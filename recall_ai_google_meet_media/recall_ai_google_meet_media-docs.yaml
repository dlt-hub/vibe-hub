resources:
- name: meeting_direct_connect
  endpoint:
    path: /meeting_direct_connect
    method: POST
    data_selector: recordings
- name: retrieve_meeting_direct_connect
  endpoint:
    path: /meeting_direct_connect/{id}
    method: GET
    data_selector: recordings
- name: Zoom
  endpoint:
    path: /zoom
    method: GET
- name: Google Meet
  endpoint:
    path: /google-meet
    method: GET
- name: Microsoft Teams
  endpoint:
    path: /microsoft-teams
    method: GET
- name: Webex
  endpoint:
    path: /webex
    method: GET
- name: Slack Huddles
  endpoint:
    path: /slack-huddles
    method: GET
- name: Go-To Meeting
  endpoint:
    path: /go-to-meeting
    method: GET
- name: recordings
  endpoint:
    path: /recordings
    method: GET
    data_selector: data
    params: {}
- name: media
  endpoint:
    path: /media
    method: GET
    data_selector: data
    params: {}
- name: recording_status
  endpoint:
    path: /webhooks/recording/status
    method: POST
    data_selector: data
    params: {}
- name: media_object_status
  endpoint:
    path: /webhooks/media/object/status
    method: POST
    data_selector: data
    params: {}
- name: transcript_status
  endpoint:
    path: /webhooks/transcript/status
    method: POST
    data_selector: data
    params: {}
- name: realtime_webhook
  endpoint:
    path: /bot/
    method: POST
    data_selector: ''
    params: {}
- name: websocket_endpoint
  endpoint:
    path: /bot/
    method: POST
    data_selector: null
    params: {}
- name: participant_events
  endpoint:
    path: /participant_events
    method: POST
    data_selector: data
- name: transcript_data
  endpoint:
    path: /transcript.data
    method: POST
    data_selector: data
- name: transcript_partial_data
  endpoint:
    path: /transcript.partial_data
    method: POST
    data_selector: data
- name: audio_mixed_raw_data
  endpoint:
    path: /audio_mixed_raw.data
    method: POST
    data_selector: data
- name: audio_separate_raw_data
  endpoint:
    path: /audio_separate_raw.data
    method: POST
    data_selector: data
- name: video_separate_png_data
  endpoint:
    path: /video_separate_png.data
    method: POST
    data_selector: data
- name: video_separate_h264_data
  endpoint:
    path: /video_separate_h264.data
    method: POST
    data_selector: data
- name: create_bot
  endpoint:
    path: /api/v1/bot
    method: POST
    data_selector: id
    params: {}
- name: retrieve_bot
  endpoint:
    path: /api/v1/bot/$BOT_ID
    method: GET
    data_selector: recordings
    params: {}
- name: Create Bot
  endpoint:
    path: /api/v1/bot
    method: POST
    data_selector: id
- name: Retrieve Bot
  endpoint:
    path: /api/v1/bot/$BOT_ID
    method: GET
    data_selector: recordings
- name: video_layouts
  endpoint:
    path: /reference/bot_create
    method: POST
    data_selector: recording_config
    params: {}
- name: automatic_leave
  endpoint:
    path: /reference/bot_create
    method: POST
    data_selector: automatic_leave
    params: {}
- name: bot_detection
  endpoint:
    path: /automatic_leave/bot_detection/using_participant_events
    method: GET
    data_selector: settings
    params:
      timeout: 600
      activate_after: 1200
- name: participant_events
  endpoint:
    path: /media_shortcuts/participant_events
    method: GET
    data_selector: data.speaker_timeline_download_url
- name: bot_sub_codes
  endpoint:
    path: /sub-codes
    method: GET
    data_selector: sub_codes
    params: {}
- name: sub_code_types
  endpoint:
    path: /sub-code-types
    method: GET
    data_selector: sub_code_types
    params: {}
- name: create_bot
  endpoint:
    path: /api/v1/bot/
    method: POST
    data_selector: data
- name: bot
  endpoint:
    path: /bot/
    method: POST
    data_selector: ''
    params: {}
- name: retrieve_bot
  endpoint:
    path: /bot/{BOT_ID}/
    method: GET
    data_selector: ''
    params: {}
- name: pause_recording
  endpoint:
    path: /reference/bot_pause_recording_create
    method: POST
- name: resume_recording
  endpoint:
    path: /reference/bot_resume_recording_create
    method: POST
- name: start_recording
  endpoint:
    path: /reference/bot_start_recording_create
    method: POST
- name: stop_recording
  endpoint:
    path: /reference/bot_stop_recording_create
    method: POST
- name: media_shortcuts
  endpoint:
    path: /reference/recording_retrieve
    method: GET
    data_selector: media_shortcuts
- name: bot
  endpoint:
    path: /api/v1/bot
    method: POST
    data_selector: bot
    params: {}
- name: get_bot
  endpoint:
    path: /api/v1/bot/YOUR_RECALL_BOT_ID/
    method: GET
    data_selector: bot
    params: {}
- name: video_separate
  endpoint:
    path: /api/v1/video_separate
    method: GET
    data_selector: results
    params:
      recording_id: RECALL_RECORDING_ID
- name: video_png
  endpoint:
    path: /video/png
    method: POST
    data_selector: data
    params: {}
- name: video_h264
  endpoint:
    path: /video/h264
    method: POST
    data_selector: data
    params: {}
- name: bot
  endpoint:
    path: /api/v1/bot
    method: POST
    data_selector: data
    params: {}
- name: bot
  endpoint:
    path: /api/v1/bot/YOUR_RECALL_BOT_ID
    method: GET
    data_selector: bot
    params: {}
- name: audio_separate
  endpoint:
    path: /api/v1/audio_separate
    method: GET
    data_selector: results
    params:
      recording_id: RECALL_RECORDING_ID
- name: bot
  endpoint:
    path: /api/v1/bot
    method: POST
    data_selector: data
    params: {}
- name: bot
  endpoint:
    path: /api/v1/bot
    method: POST
    data_selector: result
- name: bot
  endpoint:
    path: /api/v1/bot/YOUR_RECALL_BOT_ID
    method: GET
    data_selector: bot.recording
- name: audio_mixed
  endpoint:
    path: /api/v1/audio_mixed
    method: GET
    data_selector: results
    params:
      recording_id: RECALL_RECORDING_ID
- name: bot
  endpoint:
    path: /api/v1/bot
    method: POST
    data_selector: null
    params: {}
- name: retrieve_bot
  endpoint:
    path: /api/v1/bot/YOUR_RECALL_BOT_ID/
    method: GET
    data_selector: bot.recording
- name: bot_create
  endpoint:
    path: /api/v1/bot/
    method: POST
    data_selector: data
    params: {}
- name: bot
  endpoint:
    path: /bot/
    method: POST
    data_selector: data
    params: {}
- name: bot_create
  endpoint:
    path: /bot/
    method: POST
    data_selector: ''
    params: {}
- name: bot
  endpoint:
    path: /api/v1/bot/
    method: POST
    data_selector: data
    params: {}
- name: automatic_video_output
  endpoint:
    path: /reference/bot_create
    method: POST
    data_selector: automatic_video_output
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Output Video
  endpoint:
    path: /reference/bot_output_video_create
    method: POST
    data_selector: parameters
    params: {}
- name: output_video
  endpoint:
    path: /api/v1/bot/{bot_id}/output_video/
    method: POST
    data_selector: output
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: output_audio
  endpoint:
    path: /bot/{id}/output_audio/
    method: POST
    data_selector: null
    params: {}
- name: send_chat_message
  endpoint:
    path: /api/v1/bot/{bot_id}/send_chat_message/
    method: POST
    data_selector: null
    params: {}
- name: chat_messages
  endpoint:
    path: /api/v1/bot/
    method: POST
    data_selector: data
    params:
      event: participant_events.chat_message
- name: meeting_metadata
  endpoint:
    path: /bot/
    method: POST
    data_selector: data
    params: {}
- name: retrieve_meeting_metadata
  endpoint:
    path: /meeting_metadata_retrieve
    method: GET
    data_selector: data
    params: {}
- name: list_meeting_metadata
  endpoint:
    path: /meeting_metadata_list
    method: GET
    data_selector: data
    params: {}
- name: meeting_metadata
  endpoint:
    path: /data
    method: GET
    data_selector: data
    params: {}
- name: participant_events
  endpoint:
    path: /api/v1/participant_events
    method: GET
    data_selector: results
    params: {}
- name: participants
  endpoint:
    path: /api/v1/download/participants
    method: GET
    data_selector: participants_download_url
    params: {}
- name: bot_create
  endpoint:
    path: /bot/
    method: POST
    data_selector: ''
    params: {}
- name: bot_retrieve
  endpoint:
    path: /bot/{id}/
    method: GET
    data_selector: ''
    params: {}
- name: create_async_transcript
  endpoint:
    path: /recording/{RECORDING_ID}/create_transcript/
    method: POST
    data_selector: data
- name: retrieve_transcript
  endpoint:
    path: /transcript/{TRANSCRIPT_ID}/
    method: GET
    data_selector: data
- name: bot_create
  endpoint:
    path: /bot/
    method: POST
    data_selector: ''
    params: {}
- name: bot_retrieve
  endpoint:
    path: /bot/{id}/
    method: GET
    data_selector: ''
    params: {}
- name: transcription
  endpoint:
    path: /transcription
    method: POST
    data_selector: transcript
- name: Create Bot
  endpoint:
    path: /api/v1/bot/
    method: POST
    data_selector: ''
    params: {}
- name: sdk_upload
  endpoint:
    path: /api/v1/sdk-upload/
    method: POST
    data_selector: null
    params: {}
- name: recording_create_transcript
  endpoint:
    path: /api/v1/recording/{recording_id}/create_transcript
    method: POST
    data_selector: null
    params: {}
- name: retrieve_recording
  endpoint:
    path: /api/v1/recording/{recording_id}
    method: GET
    data_selector: null
    params: {}
- name: create_transcript
  endpoint:
    path: /api/v1/recording/{recording_id}/create_transcript
    method: POST
    data_selector: id
    params: {}
- name: retrieve_recording
  endpoint:
    path: /api/v1/recording/{recording_id}
    method: GET
    data_selector: id
    params: {}
- name: calendar
  endpoint:
    path: /reference/calendars_create
    method: POST
- name: calendar_events
  endpoint:
    path: /reference/calendar_events_list
    method: GET
- name: calendar_update
  endpoint:
    path: /reference/calendars_update
    method: POST
    data_selector: data
    params: {}
- name: calendar_sync_events
  endpoint:
    path: /reference/calendar_events_list
    method: POST
    data_selector: data
    params:
      incremental: last_updated_ts
- name: calendar_events
  endpoint:
    path: /reference/calendar_events_list
    method: GET
    data_selector: events
- name: calendar_events
  endpoint:
    path: /reference/calendar_events_list
    method: GET
    data_selector: raw
- name: calendar_events
  endpoint:
    path: /v1.0/me/events
    method: GET
    data_selector: value
- name: calendar_events
  endpoint:
    path: /calendar/google_oauth_callback
    method: POST
    data_selector: events
    params: {}
- name: google_login_groups
  endpoint:
    path: /api/v2/google-login-groups/
    method: POST
    data_selector: logins
    params: {}
- name: google_logins
  endpoint:
    path: /api/v2/google-logins/
    method: POST
    data_selector: logins
    params: {}
- name: slack_team
  endpoint:
    path: /api/v2/slack-teams/{slackTeamId}
    method: PATCH
    data_selector: data
    params: {}
- name: slack_auth
  endpoint:
    path: /api/v2/slack-teams/{slack_team_integration_id}/oauth-tokens/
    method: POST
    data_selector: data
    params: {}
- name: slack_bot
  endpoint:
    path: /slack/huddles
    method: POST
    data_selector: huddle_participants
    params: {}
- name: meeting_direct_connect
  endpoint:
    path: /api/v1/meeting_direct_connect
    method: POST
    data_selector: data
- name: retrieve_meeting_direct_connect
  endpoint:
    path: /api/v1/meeting_direct_connect/{my_mdc_id}
    method: GET
    data_selector: data
- name: bot
  endpoint:
    path: /api/v1/bot/
    method: POST
    data_selector: data
    params: {}
- name: bot
  endpoint:
    path: /bot/
    method: POST
- name: meetings
  endpoint:
    path: /v1/meetings
    method: GET
    data_selector: meetings
    params: {}
- name: output_audio
  endpoint:
    path: /bot/{id}/output_audio/
    method: POST
- name: output_audio
  endpoint:
    path: /output_audio/
    method: POST
    data_selector: id
    params: {}
- name: slack_user_oauth_token
  endpoint:
    path: /reference/slack_teams_oauth_tokens_list
    method: GET
- name: slack_team
  endpoint:
    path: /reference/slack_teams_list
    method: GET
- name: calendar
  endpoint:
    path: /reference/calendars_create
    method: POST
    data_selector: id
    params: {}
- name: calendar_events
  endpoint:
    path: /reference/calendar_events_list
    method: GET
    data_selector: events
    params: {}
- name: create_calendar
  endpoint:
    path: /calendars/
    method: POST
- name: calendars
  endpoint:
    path: /calendars/
    method: POST
    data_selector: null
    params: {}
- name: calendars
  endpoint:
    path: /calendars/{id}/
    method: PATCH
    params: {}
- name: calendar_update
  endpoint:
    path: /calendar.update
    method: POST
    data_selector: data
    params: {}
- name: calendar_sync_events
  endpoint:
    path: /calendar.sync_events
    method: POST
    data_selector: data
    params: {}
- name: calendar_events
  endpoint:
    path: /calendar-events/
    method: GET
    data_selector: results
    params:
      calendar_id: ''
      uuid: ''
      cursor: ''
      ical_uid: ''
      is_deleted: ''
      start_time: ''
      start_time__gte: ''
      start_time__lte: ''
      updated_at__gte: ''
- name: calendar_events
  endpoint:
    path: /v2/calendar-events/
    method: GET
- name: bot
  endpoint:
    path: /reference/bot_list
    method: GET
- name: desktop_sdk_upload
  endpoint:
    path: /reference/sdk_upload_list
    method: GET
- name: audio_mixed
  endpoint:
    path: /reference/audio_mixed_list
    method: GET
- name: audio_separate
  endpoint:
    path: /reference/audio_separate_list
    method: GET
- name: meeting_metadata
  endpoint:
    path: /reference/meeting_metadata_list
    method: GET
- name: participant_events
  endpoint:
    path: /reference/participant_events_list
    method: GET
- name: recording
  endpoint:
    path: /reference/recording_list
    method: GET
- name: transcript
  endpoint:
    path: /reference/transcript_list
    method: GET
- name: video_mixed
  endpoint:
    path: /reference/video_mixed_list
    method: GET
- name: video_separate
  endpoint:
    path: /reference/video_separate_list
    method: GET
- name: calendar-v1
  endpoint:
    path: /reference/calendar_authenticate_create
    method: POST
- name: calendar-v2
  endpoint:
    path: /reference/calendar_events_list
    method: GET
- name: zoom-oauth-apps
  endpoint:
    path: /reference/zoom_oauth_apps_list
    method: GET
- name: google-login-group
  endpoint:
    path: /reference/google_login_groups_list
    method: GET
- name: slack-teams
  endpoint:
    path: /reference/slack_teams_list
    method: GET
- name: billing
  endpoint:
    path: /reference/billing_usage_retrieve
    method: GET
- name: meeting-direct-connect
  endpoint:
    path: /reference/meeting_direct_connect_list
    method: GET
- name: delete_scheduled_bot
  endpoint:
    path: /api/v1/bot/{id}/
    method: DELETE
- name: Get Calendar Auth Token
  endpoint:
    path: /api/v1/calendar/authenticate/
    method: POST
- name: calendar_meetings
  endpoint:
    path: /calendar/meetings/
    method: GET
    data_selector: results
    params: {}
- name: calendar_meetings
  endpoint:
    path: /api/v1/calendar/meetings/
    method: GET
    data_selector: array of objects
- name: update_recording_preferences
  endpoint:
    path: /calendar/user/
    method: PUT
- name: recording_preferences
  endpoint:
    path: /v1/recording_preferences
    method: GET
    data_selector: preferences
    params: {}
- name: realtime_video
  endpoint:
    path: /realtime/video
    method: GET
- name: mixed_audio
  endpoint:
    path: /edit/how-to-get-mixed-audio-async
    method: GET
    data_selector: records
- name: Meeting Metadata
  endpoint:
    path: /edit/meeting-metadata
    method: GET
- name: Bot Login Credentials
  endpoint:
    path: /edit/bot-login-credentials
    method: GET
- name: output_media
  endpoint:
    path: /bot/{id}/output_media/
    method: POST
- name: realtime_endpoint
  endpoint:
    path: /reference/realtime_endpoint
    method: GET
- name: Create Bot
  endpoint:
    path: /reference/bot_create
    method: POST
- name: List Bots
  endpoint:
    path: /reference/bot_list
    method: GET
- name: List Meeting Direct Connects
  endpoint:
    path: /reference/meeting_direct_connect_list
    method: GET
- name: Create Meeting Direct Connect
  endpoint:
    path: /reference/meeting_direct_connect_create
    method: POST
- name: bot
  endpoint:
    path: /bot/
    method: GET
    data_selector: all bots
- name: bot
  endpoint:
    path: /bot/
    method: GET
    data_selector: results
- name: bot
  endpoint:
    path: /bot/{id}/
    method: GET
- name: bot
  endpoint:
    path: /bot/{id}/
    method: GET
    data_selector: object
    params: {}
- name: slack_user_oauth_token
  endpoint:
    path: /reference/slack_teams_oauth_tokens_retrieve
    method: GET
- name: slack_team
  endpoint:
    path: /reference/slack_teams_retrieve
    method: GET
- name: delete_bot_media
  endpoint:
    path: /bot/{id}/delete_media/
    method: POST
- name: Delete Scheduled Bot
  endpoint:
    path: /bot/{id}/delete_media/
    method: POST
    data_selector: object
    params: {}
- name: Remove Bot From Call
  endpoint:
    path: /bot_leave_call_create
    method: POST
    data_selector: object
    params: {}
- name: slack_user_oauth_tokens
  endpoint:
    path: /reference/slack_teams_oauth_tokens_list
    method: GET
- name: slack_team
  endpoint:
    path: /reference/slack_teams_create
    method: POST
- name: leave_call
  endpoint:
    path: /bot/{id}/leave_call/
    method: POST
    data_selector: status_changes
    params: {}
- name: slack_user_oauth_tokens
  endpoint:
    path: /reference/slack_teams_oauth_tokens
    method: GET
- name: slack_team
  endpoint:
    path: /reference/slack_teams
    method: GET
- name: bot
  endpoint:
    path: /reference/bot_list
    method: GET
- name: desktop_recording
  endpoint:
    path: /reference/sdk_upload_list
    method: GET
- name: recordings
  endpoint:
    path: /reference/recording_list
    method: GET
- name: calendar-v1
  endpoint:
    path: /reference/calendar_authenticate_create
    method: POST
- name: calendar-v2
  endpoint:
    path: /reference/calendar_events_list
    method: GET
- name: zoom-oauth-apps
  endpoint:
    path: /reference/zoom_oauth_apps_list
    method: GET
- name: google-login-group
  endpoint:
    path: /reference/google_login_groups_list
    method: GET
- name: slack-teams
  endpoint:
    path: /reference/slack_teams_list
    method: GET
- name: billing
  endpoint:
    path: /reference/billing_usage_retrieve
    method: GET
- name: meeting-direct-connect
  endpoint:
    path: /reference/meeting_direct_connect_list
    method: GET
- name: output_audio
  endpoint:
    path: /api/v1/bot/{id}/output_audio/
    method: DELETE
    data_selector: null
    params: {}
- name: bot
  endpoint:
    path: /reference/bot_list
    method: GET
- name: desktop_recording
  endpoint:
    path: /reference/sdk_upload_list
    method: GET
- name: recordings
  endpoint:
    path: /reference/recording_list
    method: GET
- name: calendar_v1
  endpoint:
    path: /reference/calendar_authenticate_create
    method: POST
- name: calendar_v2
  endpoint:
    path: /reference/calendar_events_list
    method: GET
- name: zoom_oauth
  endpoint:
    path: /reference/zoom_oauth_apps_list
    method: GET
- name: google_meet_bot_login
  endpoint:
    path: /reference/google_login_groups_list
    method: GET
- name: slack_huddles
  endpoint:
    path: /reference/slack_teams_list
    method: GET
- name: billing
  endpoint:
    path: /reference/billing_usage_retrieve
    method: GET
- name: meeting_direct_connect
  endpoint:
    path: /reference/meeting_direct_connect_list
    method: GET
- name: output_media
  endpoint:
    path: /api/v1/bot/{id}/output_media/
    method: DELETE
    data_selector: null
    params: {}
- name: start_screenshare
  endpoint:
    path: /bot/{id}/output_screenshare/
    method: POST
    data_selector: null
    params: {}
- name: bot_output_screenshare
  endpoint:
    path: /bot/{id}/output_screenshare/
    method: POST
    data_selector: response
    params: {}
- name: slack_user_oauth_token
  endpoint:
    path: /reference/slack_teams_oauth_tokens_retrieve
    method: GET
- name: slack_team
  endpoint:
    path: /reference/slack_teams_retrieve
    method: GET
- name: bot
  endpoint:
    path: /reference/bot_list
    method: GET
- name: recording
  endpoint:
    path: /reference/recording_list
    method: GET
- name: transcript
  endpoint:
    path: /reference/transcript_list
    method: GET
- name: video_mixed
  endpoint:
    path: /reference/video_mixed_list
    method: GET
- name: video_separate
  endpoint:
    path: /reference/video_separate_list
    method: GET
- name: start_screenshare
  endpoint:
    path: /api/v1/bot/{id}/output_screenshare/
    method: DELETE
    data_selector: null
    params: {}
- name: output_video
  endpoint:
    path: /bot/{id}/output_video/
    method: POST
- name: bot_output_video
  endpoint:
    path: /output_video/
    method: POST
    data_selector: output_media
    params: {}
- name: slack_user_oauth_tokens
  endpoint:
    path: /reference/slack_teams_oauth_tokens_list
    method: GET
- name: slack_team
  endpoint:
    path: /reference/slack_teams_retrieve
    method: GET
- name: bot
  endpoint:
    path: /reference/bot_list
    method: GET
- name: desktop_recording
  endpoint:
    path: /reference/sdk_upload_list
    method: GET
- name: recordings
  endpoint:
    path: /reference/recording_list
    method: GET
- name: calendar_v1
  endpoint:
    path: /reference/calendar_authenticate_create
    method: POST
- name: calendar_v2
  endpoint:
    path: /reference/calendar_events_list
    method: GET
- name: zoom_oauth_integration
  endpoint:
    path: /reference/zoom_meetings_to_credentials_list
    method: GET
- name: google_meet_bot_login
  endpoint:
    path: /reference/google_login_groups_list
    method: GET
- name: slack_huddles
  endpoint:
    path: /reference/slack_teams_list
    method: GET
- name: billing
  endpoint:
    path: /reference/billing_usage_retrieve
    method: GET
- name: meeting_direct_connect
  endpoint:
    path: /reference/meeting_direct_connect_list
    method: GET
- name: output_video
  endpoint:
    path: /api/v1/bot/{id}/output_video/
    method: DELETE
    data_selector: null
    params: {}
- name: pause_recording
  endpoint:
    path: /bot/{id}/pause_recording
    method: POST
- name: pause_recording
  endpoint:
    path: /bot/{id}/pause_recording/
    method: POST
    data_selector: recordings
    params: {}
- name: slack_user_oauth_tokens
  endpoint:
    path: /reference/slack_teams_oauth_tokens_retrieve
    method: GET
- name: slack_team
  endpoint:
    path: /reference/slack_teams_retrieve
    method: GET
- name: request_recording_permission
  endpoint:
    path: /api/v1/bot/{id}/request_recording_permission/
    method: POST
- name: request_recording_permission
  endpoint:
    path: /api/v1/bot/id/request_recording_permission/
    method: POST
    data_selector: recordings
    params: {}
- name: slack_user_oauth_tokens
  endpoint:
    path: /reference/slack_teams_oauth_tokens_list
    method: GET
- name: slack_team
  endpoint:
    path: /reference/slack_teams_list
    method: GET
- name: resume_recording
  endpoint:
    path: /bot/{id}/resume_recording
    method: POST
- name: bot
  endpoint:
    path: /api/v1/bot/{id}/resume_recording/
    method: POST
    data_selector: status_changes
    params: {}
- name: slack_teams
  endpoint:
    path: /reference/slack-teams
    method: GET
- name: billing_usage
  endpoint:
    path: /reference/billing_usage_retrieve
    method: GET
- name: meeting_direct_connect
  endpoint:
    path: /reference/meeting-direct-connect-1
    method: GET
- name: send_chat_message
  endpoint:
    path: /api/v1/bot/{id}/send_chat_message/
    method: POST
- name: send_chat_message
  endpoint:
    path: /bot/{id}/send_chat_message/
    method: POST
    data_selector: object
    params: {}
- name: slack_user_oauth_token
  endpoint:
    path: /reference/slack_teams_oauth_tokens_retrieve
    method: GET
- name: slack_team
  endpoint:
    path: /reference/slack_teams_retrieve
    method: GET
- name: slack_team_create
  endpoint:
    path: /reference/slack_teams_create
    method: POST
- name: slack_team_list
  endpoint:
    path: /reference/slack_teams_list
    method: GET
- name: bot
  endpoint:
    path: /bot/{id}/stop_recording
    method: POST
- name: stop_recording
  endpoint:
    path: /bot/{id}/stop_recording/
    method: POST
    data_selector: recordings
- name: start_recording
  endpoint:
    path: /bot/{id}/start_recording/
    method: POST
    data_selector: recordings
- name: slack_user_oauth_tokens
  endpoint:
    path: /reference/slack_teams_oauth_tokens_list
    method: GET
- name: slack_team
  endpoint:
    path: /reference/slack_teams_retrieve
    method: GET
- name: bot_screenshots
  endpoint:
    path: /bot/{bot_id}/screenshots/
    method: GET
    data_selector: screenshots
- name: bot_screenshots
  endpoint:
    path: /api/v1/bot/{bot_id}/screenshots/
    method: GET
    data_selector: array of objects
- name: bot_screenshots
  endpoint:
    path: /bot/{bot_id}/screenshots/{id}/
    method: GET
    data_selector: screenshot
    params: {}
- name: bot_screenshots
  endpoint:
    path: /api/v1/bot/{bot_id}/screenshots/{id}/
    method: GET
- name: bot_screenshots
  endpoint:
    path: /dashboard/platforms/bots/{bot_id}/screenshots/
    method: GET
- name: bot_screenshots
  endpoint:
    path: /dashboard/platforms/bots/{bot_id}/screenshots/
    method: GET
    data_selector: array of objects
- name: sdk_upload
  endpoint:
    path: /sdk_upload/
    method: GET
- name: sdk_upload
  endpoint:
    path: /api/v1/sdk_upload/
    method: GET
    data_selector: results
    params: {}
- name: sdk_upload
  endpoint:
    path: /sdk_upload/
    method: POST
- name: sdk_upload
  endpoint:
    path: /sdk_upload/
    method: POST
    data_selector: object
    params: {}
- name: sdk_upload
  endpoint:
    path: /api/v1/sdk_upload/{id}/
    method: GET
- name: audio_mixed
  endpoint:
    path: /audio_mixed/
    method: GET
    params:
      created_at_after: date-time
      created_at_before: date-time
      recording_id: uuid
      status_code: string
- name: audio_mixed
  endpoint:
    path: /audio_mixed/
    method: GET
    data_selector: results
- name: audio_mixed
  endpoint:
    path: /api/v1/audio_mixed/{id}/
    method: GET
    data_selector: ''
    params: {}
- name: audio_mixed
  endpoint:
    path: /api/v1/audio_mixed/{id}/
    method: GET
- name: audio_mixed
  endpoint:
    path: /audio_mixed/{id}/
    method: PATCH
- name: audio_mixed
  endpoint:
    path: /reference/audio_mixed_list
    method: GET
- name: audio_separate
  endpoint:
    path: /reference/audio_separate_list
    method: GET
- name: meeting_metadata
  endpoint:
    path: /reference/meeting_metadata_list
    method: GET
- name: participant_events
  endpoint:
    path: /reference/participant_events_list
    method: GET
- name: realtime_endpoint
  endpoint:
    path: /reference/realtime_endpoint_list
    method: GET
- name: recording
  endpoint:
    path: /reference/recording_list
    method: GET
- name: transcript
  endpoint:
    path: /reference/transcript_list
    method: GET
- name: video_mixed
  endpoint:
    path: /reference/video_mixed_list
    method: GET
- name: video_separate
  endpoint:
    path: /reference/video_separate_list
    method: GET
- name: Delete Audio Mixed
  endpoint:
    path: /api/v1/audio_mixed/{id}/
    method: DELETE
    data_selector: null
    params: {}
- name: audio_separate
  endpoint:
    path: /audio_separate/
    method: GET
    params:
      created_at_after: date-time
      created_at_before: date-time
      cursor: string
      recording_id: uuid
      status_code: string
- name: audio_separate
  endpoint:
    path: /api/v1/audio_separate/
    method: GET
    data_selector: results
- name: audio_separate
  endpoint:
    path: /audio_separate/{id}/
    method: GET
    params: {}
- name: audio_separate
  endpoint:
    path: /api/v1/audio_separate/{id}/
    method: GET
- name: audio_separate
  endpoint:
    path: /audio_separate/{id}/
    method: PATCH
- name: audio_separate
  endpoint:
    path: /api/v1/audio_separate/{id}/
    method: PATCH
    data_selector: object
    params: {}
- name: bot
  endpoint:
    path: /reference/bot_list
    method: GET
- name: desktop_recording
  endpoint:
    path: /reference/sdk_upload_list
    method: GET
- name: recordings
  endpoint:
    path: /reference/recording_list
    method: GET
- name: transcript
  endpoint:
    path: /reference/transcript_list
    method: GET
- name: calendar-v1
  endpoint:
    path: /reference/calendar_authenticate_create
    method: POST
- name: calendar-v2
  endpoint:
    path: /reference/calendar_events_list
    method: GET
- name: zoom-oauth-apps
  endpoint:
    path: /reference/zoom_oauth_apps_list
    method: GET
- name: google-login
  endpoint:
    path: /reference/google_logins_list
    method: GET
- name: slack-teams
  endpoint:
    path: /reference/slack_teams_list
    method: GET
- name: billing
  endpoint:
    path: /reference/billing_usage_retrieve
    method: GET
- name: meeting-direct-connect
  endpoint:
    path: /reference/meeting_direct_connect_list
    method: GET
- name: audio_separate
  endpoint:
    path: /api/v1/audio_separate/{id}/
    method: DELETE
    data_selector: null
    params: {}
- name: meeting_metadata
  endpoint:
    path: /meeting_metadata/
    method: GET
    params: {}
- name: meeting_metadata
  endpoint:
    path: /meeting_metadata/
    method: GET
    data_selector: results
- name: meeting_metadata
  endpoint:
    path: /meeting_metadata/{id}/
    method: GET
- name: meeting_metadata
  endpoint:
    path: /api/v1/meeting_metadata/{id}/
    method: GET
    data_selector: object
    params: {}
- name: meeting_metadata
  endpoint:
    path: /meeting_metadata/{id}/
    method: PATCH
- name: meeting_metadata
  endpoint:
    path: /api/v1/meeting_metadata/{id}/
    method: PATCH
- name: meeting_metadata
  endpoint:
    path: /reference/meeting_metadata_list
    method: GET
    data_selector: records
- name: participant_events
  endpoint:
    path: /reference/participant_events_list
    method: GET
    data_selector: records
- name: recording
  endpoint:
    path: /reference/recording_list
    method: GET
    data_selector: records
- name: meeting_metadata
  endpoint:
    path: /meeting_metadata/{id}/
    method: DELETE
- name: participant_events
  endpoint:
    path: /participant_events/
    method: GET
    params: {}
- name: participant_events
  endpoint:
    path: /participant_events
    method: GET
- name: participant_events
  endpoint:
    path: /participant_events/{id}/
    method: GET
- name: participant_events
  endpoint:
    path: /participant_events/{id}/
    method: GET
- name: participant_events
  endpoint:
    path: /participant_events/{id}/
    method: PATCH
- name: participant_events
  endpoint:
    path: /reference/participant_events_list
    method: GET
- name: participant_events
  endpoint:
    path: /participant_events/{id}/
    method: DELETE
    data_selector: null
    params: {}
- name: realtime_endpoint
  endpoint:
    path: /realtime_endpoint/
    method: GET
    params:
      created_at_after: date-time
      created_at_before: date-time
      recording_id: uuid
      status_code: string
      type: string
- name: realtime_endpoint
  endpoint:
    path: /api/v1/realtime_endpoint/{id}/
    method: GET
- name: realtime_endpoint
  endpoint:
    path: /realtime_endpoint/{id}/
    method: PATCH
- name: recording
  endpoint:
    path: /realtime_endpoint
    method: PATCH
    data_selector: object
- name: recording
  endpoint:
    path: /recording/
    method: GET
    data_selector: records
    params: {}
- name: recording
  endpoint:
    path: /recording/{id}/
    method: GET
- name: recording
  endpoint:
    path: /api/v1/recording/{id}/
    method: GET
    data_selector: object
    params: {}
- name: recording
  endpoint:
    path: /recording/{id}/
    method: PATCH
- name: recording
  endpoint:
    path: /api/v1/recording/{id}/
    method: PATCH
    data_selector: object
    params: {}
- name: bot
  endpoint:
    path: /reference/bot_list
    method: GET
- name: recording
  endpoint:
    path: /reference/recording_list
    method: GET
- name: transcript
  endpoint:
    path: /reference/transcript_list
    method: GET
- name: video_mixed
  endpoint:
    path: /reference/video_mixed_list
    method: GET
- name: video_separate
  endpoint:
    path: /reference/video_separate_list
    method: GET
- name: delete_recording
  endpoint:
    path: /api/v1/recording/{id}/
    method: DELETE
- name: create_async_transcript
  endpoint:
    path: /recording/{id}/create_transcript
    method: POST
- name: recording
  endpoint:
    path: /recording
    method: POST
- name: transcript
  endpoint:
    path: /transcript/
    method: GET
    params:
      created_at_after: date-time
      created_at_before: date-time
      recording_id: uuid
      status_code: string
- name: transcript
  endpoint:
    path: /transcript/{id}/
    method: GET
- name: transcript
  endpoint:
    path: /transcript
    method: GET
    data_selector: records
- name: transcript
  endpoint:
    path: /transcript/{id}/
    method: PATCH
- name: transcript
  endpoint:
    path: /transcript
    method: GET
    data_selector: object
    params: {}
- name: bot
  endpoint:
    path: /reference/bot_list
    method: GET
- name: recording
  endpoint:
    path: /reference/recording_list
    method: GET
- name: transcript
  endpoint:
    path: /reference/transcript_list
    method: GET
- name: transcript
  endpoint:
    path: /api/v1/transcript/{id}/
    method: DELETE
    data_selector: '204'
    params: {}
- name: video_mixed
  endpoint:
    path: /video_mixed/
    method: GET
    data_selector: records
    params:
      created_at_after: date-time
      created_at_before: date-time
      recording_id: uuid
      status_code: string
- name: video_mixed
  endpoint:
    path: /video_mixed/{id}/
    method: GET
- name: video_mixed
  endpoint:
    path: /api/v1/video_mixed/{id}/
    method: GET
    data_selector: object
    params: {}
- name: video_mixed
  endpoint:
    path: /video_mixed/{id}/
    method: PATCH
- name: video_mixed
  endpoint:
    path: /api/v1/video_mixed/{id}/
    method: PATCH
    data_selector: object
    params: {}
- name: bot
  endpoint:
    path: /reference/bot_list
    method: GET
- name: desktop_recording
  endpoint:
    path: /reference/sdk_upload_list
    method: GET
- name: audio_mixed
  endpoint:
    path: /reference/audio_mixed_list
    method: GET
- name: audio_separate
  endpoint:
    path: /reference/audio_separate_list
    method: GET
- name: meeting_metadata
  endpoint:
    path: /reference/meeting_metadata_list
    method: GET
- name: participant_events
  endpoint:
    path: /reference/participant_events_list
    method: GET
- name: recording
  endpoint:
    path: /reference/recording_list
    method: GET
- name: transcript
  endpoint:
    path: /reference/transcript_list
    method: GET
- name: video_mixed
  endpoint:
    path: /reference/video_mixed_list
    method: GET
- name: video_separate
  endpoint:
    path: /reference/video_separate_list
    method: GET
- name: video_mixed
  endpoint:
    path: /api/v1/video_mixed/{id}/
    method: DELETE
    data_selector: ''
    params: {}
- name: video_separate
  endpoint:
    path: /video_separate/
    method: GET
    params: {}
- name: video_separate
  endpoint:
    path: /video_separate/
    method: GET
    data_selector: results
- name: video_separate
  endpoint:
    path: /video_separate/{id}/
    method: GET
    params: {}
- name: video_separate
  endpoint:
    path: /video_separate/{id}/
    method: PATCH
- name: video_separate
  endpoint:
    path: /api/v1/video_separate/{id}/
    method: PATCH
- name: bot
  endpoint:
    path: /reference/bot_list
    method: GET
- name: desktop_recording
  endpoint:
    path: /reference/sdk_upload_list
    method: GET
- name: recordings
  endpoint:
    path: /reference/recording_list
    method: GET
- name: transcript
  endpoint:
    path: /reference/transcript_list
    method: GET
- name: video_separate
  endpoint:
    path: /reference/video_separate_list
    method: GET
- name: calendar-v1
  endpoint:
    path: /reference/calendar_authenticate_create
    method: POST
- name: calendar-v2
  endpoint:
    path: /reference/calendar_events_list
    method: GET
- name: zoom-oauth-apps
  endpoint:
    path: /reference/zoom_oauth_apps_list
    method: GET
- name: google-login
  endpoint:
    path: /reference/google_logins_list
    method: GET
- name: slack-teams
  endpoint:
    path: /reference/slack_teams_list
    method: GET
- name: billing
  endpoint:
    path: /reference/billing_usage_retrieve
    method: GET
- name: meeting-direct-connect
  endpoint:
    path: /reference/meeting_direct_connect_list
    method: GET
- name: video_separate
  endpoint:
    path: /api/v1/video_separate/{id}/
    method: DELETE
    data_selector: null
    params: {}
- name: calendar_meeting
  endpoint:
    path: /api/v1/calendar/meetings/{id}/
    method: GET
- name: calendar_meeting
  endpoint:
    path: /api/v1/calendar/meetings/{id}/
    method: GET
    data_selector: object
- name: update_calendar_meeting
  endpoint:
    path: /calendar/meetings/{id}/
    method: PUT
- name: calendar_meeting
  endpoint:
    path: /api/v1/calendar/meetings/{id}/
    method: PUT
    data_selector: object
- name: refresh_calendar_meetings
  endpoint:
    path: /calendar/meetings/refresh
    method: POST
- name: calendar_meeting
  endpoint:
    path: /api/v1/calendar/meetings/refresh/
    method: POST
    data_selector: array of objects
- name: calendar_user
  endpoint:
    path: /calendar/user/
    method: GET
- name: calendar_user
  endpoint:
    path: /calendar/user/
    method: GET
- name: calendar-v1
  endpoint:
    path: /reference/calendar_authenticate_create
    method: POST
    data_selector: data
    params: {}
- name: calendar-v2
  endpoint:
    path: /reference/calendar_events_list
    method: GET
    data_selector: data
    params: {}
- name: delete_calendar_user
  endpoint:
    path: /api/v1/calendar/user/
    method: DELETE
    data_selector: ''
    params: {}
- name: disconnect_calendar_platform
  endpoint:
    path: /calendar/user/disconnect
    method: POST
- name: calendar_users
  endpoint:
    path: /calendar/users/
    method: GET
    data_selector: users
    params: {}
notes:
- All meeting participants need to be enrolled in Google's developer program to use
  Meeting Direct Connect.
- Meet Media API doesn’t send out transcriptions of the meeting.
- Realtime webhooks are not configurable via dashboard
- Webhook receiver must be accessible at a publicly exposed endpoint
- The config.url must be either a ws or wss endpoint.
- Each value in a custom metadata key-value pair has a maximum length of 500 characters.
- Download URLs are populated once the relevant media object has transitioned to `done`
  status.
- Recordings are fundamental source of data capture
- Improvements to realtime data delivery
- 'Contract customers only: Message us in our shared Slack channel.'
- Email us at support@recall.ai.
- Bots are single-use and can be sent to meetings either ad-hoc or scheduled.
- API Key is required for authentication
- Webhook support is available for status changes
- Default timeout values are in seconds.
- Google Meet has a built-in timeout of 10 minutes.
- Recall provides multiple ways to mitigate instances of meetings where participants
  are bots leading to longer recording lengths and processing times.
- Participant events are generally less reliable than participant names as a heuristic
  for detecting bots.
- Webhook events have a timeout of 15 seconds.
- You should not treat the sub_code as an enum, as we may add values in the future
  without prior notice.
- Use an environment variable for sensitive values.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Bots can run into trouble joining calls or recording.
- Debugging tools are available to investigate issues.
- Currently Zoom Native bots have limitations such as not being able to output audio
  or receive chat messages.
- Separate videos per participant does not include audio
- To get separate video per participant, set recording_config.video_mixed_layout =
  "gallery_view_v2" and recording_config.video_separate_mp4 = {}.
- Video data streaming is currently supported in PNG and H264 formats
- H264 video per participant is currently only available on bots with the web4core
  variant
- To get separate audio per participant, set recording_config.audio_separate_raw =
  {}.
- The bot will have an array of recordings in the `bot.recording` field.
- The `separate_audio_response` schema is defined in the List Audio Separate 200 response.
- Audio data streaming is currently supported in raw pcm format
- Audio format is mono 16 bit signed little-endian PCM at 16khz.
- In unmixed audio streaming, participants' audio streams connect and disconnect to
  your websocket endpoint according to their mute state.
- To get mixed audio per participant, set recording_config.audio_mixed_mp3 to an empty
  object.
- The `mixed_audio_response` schema is defined in the [List Audio Mixed](/reference/audio_mixed_list)
  200 response.
- Mixed video is enabled by default for all bots.
- Make sure to set the config.url as a ws or wss endpoint.
- Video websockets are optimized for real-time AI video analysis.
- Separate Participant Live Video in H264 is currently limited to bots with the web4core
  variant.
- Currently RTMP only supports a single, mixed video/audio.
- Only 10 Transcripts Allowed Per Recording
- Ensure your account with the transcription provider is configured with a high enough
  concurrency limit.
- Outputting video for Teams native bots is currently not supported.
- Some objects like Contact may return nulls in deeply nested fields
- To use the Output Audio endpoint, currently bots must be configured with an automatic_audio_output
  in the Create Bot request.
- Teams bots must be signed-in to pin messages
- Receiving chat messages in the Zoom Native Bot is not currently supported.
- Bots can only receive chat messages in Microsoft Teams if the meeting chat is accessible
  to anonymous participants.
- Meeting metadata is dependent on platform support.
- No configuration is needed to record participant events.
- Participant emails may return null if confidence is low.
- Recall supports signing bots into various meeting platform accounts prior to joining
  calls.
- 'Delay on Real-Time Endpoints: Default Recall.ai Transcription on webhooks will
  be delayed by 3-10 minutes unless mode is set to ''prioritize_low_latency''.'
- Real-time transcription is currently available for bots.
- Meeting platforms' meeting captions currently don't support automatic language detection.
- Microsoft Teams supports various languages for meeting captions by configuring these
  at the meeting-level by the host.
- Ensure that your account with your 3rd party transcription provider is configured
  with high enough concurrency limit to support your anticipated load.
- 'Increased Transcription Usage: Transcribing multiple streams may result in higher
  costs from your transcription provider.'
- S3 URLs are signed and expire after 6 hours
- Zero data retention can be configured by setting recording_config.retention field
  to null
- The Desktop Recording SDK allows for recording Zoom and Google Meet calls locally.
- Currently doesn't capture participant metadata or video for Slack huddles.
- Currently, assembly_ai_streaming and deepgram_streaming are supported for transcript
  events.
- The Desktop Recording SDK allows for recording Zoom and Google Meet calls locally,
  within an Electron application on Windows and Apple Silicon Macs.
- Webhooks are sent through Svix and can be configured in your Recall dashboard
- Choose Calendar V2 if you want to make bots highly customizable or want to tailor
  the bot experience granularly for each user.
- Choose Calendar V1 if you don’t need a ton of flexibility in terms of which calendar
  events you need to record.
- OAuth refresh tokens are long lived
- You should re-fetch the calendar via Retrieve Calendar to get the latest state.
- Use the is_deleted field on the calendar event object to know if the event has been
  removed from the calendar or not.
- Bots are automatically removed when a calendar event is deleted.
- 'Future events: 28 days'
- Connections made automatically expire after 7 days if the OAuth client is in 'testing'.
- Display name is not guaranteed to be populated for all participants.
- The ​platform­_email​ may be ​null​ briefly when you create the calendar.
- When a calendar becomes disconnected, all bots for future events are unscheduled.
- Ensure proper OAuth2 permissions for calendar access.
- The token is stateless, has an expiry of 1 day and can be generated multiple times
  for a user.
- Bots scheduled via the calendar integration derive their configuration from a pre-populated
  preset.
- 'Recording preferences behavior: Only recording preferences that are set to true
  will be evaluated.'
- Configure permission scopes `calendar.events.readonly` & `userinfo.email` in the
  consent screen section.
- Each user must connect their Google calendar via OAuth before using calendar integration.
- Ensure to copy the secret value as this will be needed in a later step.
- Before submitting your Microsoft OAuth Client Application to production, please
  ensure to update the redirect_uri to be on your own domain.
- Refresh token missing from OAuth response
- Invalid Recall calendar auth token supplied
- Currently only the primary calendar of connected users are supported.
- Currently Microsoft Exchange On-premise calendars are not supported.
- ZAK tokens are short-lived and must be regenerated frequently.
- We recommend creating a dedicated Zoom account for the purpose of generating ZAK
  tokens.
- This feature is only supported by web bots
- For Webinars, bots must be added as a panelist
- 'Single Room Focus: Each Recall.ai bot can only join and record one breakout room
  at a time, mirroring the experience of a human participant.'
- 'Participant Tracking Changes: To enhance breakout room support, Recall.ai has updated
  the way participant IDs are reported.'
- If you get a zoom_internal_error when providing a start_url containing a pre-embedded
  zak token, if the meeting is scheduled far into the future, you will receive a zoom_internal_error
  when the bot tries to join.
- If there is a password on the meeting, it should be embedded in the meeting URL
  as a query parameter by default.
- The bot will go into the waiting room only if there is a waiting room enabled.
- Currently don't have support for Zoomgov URLs.
- No recording permission is needed for Google Meet calls.
- By default, Google Meet bots need to be manually admitted into calls and will be
  an 'anonymous' user.
- Authenticated bots are still subject to any waiting room settings enabled by the
  host.
- Bots can join meetings as guest participants by default, which may lead to limitations.
- Each login supports roughly 30 concurrent logins.
- Authenticated bots rely on language-sensitive context to join calls.
- To ensure authenticated Google accounts can join calls, make sure the language is
  set to en-us.
- Can configure authentication behavior using the google_meet.login_required parameter
  in Create Bot.
- By default the Google Meet bot joins every meeting as a guest participant.
- Ensure to set both recovery email & recovery phone number on the bot account.
- No recording permission is needed for Microsoft Teams calls.
- Authenticated Teams bots are still subject to any lobby settings enabled by the
  host.
- Signed in Teams bots get their name from the Teams account used to authenticate
  the bot, which overrides the bot_name parameter in Create Bot.
- Personal MS Teams not supported.
- Signed-in Microsoft Teams bots must be in their own organization due to global organization-level
  permission changes
- We generally recommend developers leave the box unchecked to keep the bot's join
  time as low as possible
- We recommend creating a new organization for the bot because you need to update
  the org's security settings which you typically don't want to apply to your whole
  org
- Bots may encounter a microsoft_teams_captcha_detected error due to host organization
  settings.
- Webex bots are not supported 'out-of-the-box' and require some initial setup.
- Active speaker events will only be available if the meeting host is on a paid Webex
  account and has closed captions turned on for the meeting.
- Webex only supports a single, combined stream of audio.
- Webex only supports one combined video stream with no support for layout configuration.
- Captions through Webex's native transcription service are currently not supported.
- Webex Free accounts will not work.
- For non-US users, the plans may be named slightly differently. The minimum required
  plan is the lowest paid tier.
- Check if the user has added your bot's domain to the list of blocked email domains
  for either internal or external meetings.
- Slack huddle bots can only join SSO-enabled workspaces as guests
- Slack Enterprise is currently not supported
- Recall needs permission to read emails sent to your bot's domain.
- Ensure that the slack bot in the workspace has been completely removed before re-inviting.
- Requires user authorization to access Slack huddle data
- The bot needs to be added as a participant in the Slack workspace to join huddles
  automatically.
- Go-To Meeting Support is currently in BETA.
- Stability is not guaranteed and certain features may be missing.
- No recording permission is needed for Go-To Meeting calls.
- Requires a properly configured Zoom App, which will need to go through Zoom's application
  process
- You can only receive data (no sending messages or Output Media)
- Zoom RTMS doesn't provide chat messages (currently)
- Zoom RTMS doesn't support Breakout Rooms (currently)
- 'This endpoint is rate limited to: 60 requests per min per workspace'
- Authenticated Google Meet bots will use the Google account name.
- The bot must be configured with 'automatic_audio_output' enabled in order to use
  this endpoint.
- 'This endpoint is rate limited to: 300 requests per min per workspace'
- Chat functionality is only supported for Zoom, Google Meet and Microsoft Teams currently.
- Use the is_deleted field on the calendar event object to know if the event has been
  removed from the calendar.
- This endpoint is rate limited to 60 requests per min per workspace.
- Token is stateless, has an expiry of 1 day and can be generated multiple times for
  a user.
- We recommend implementing a proxy endpoint on your servers for token generation.
- Each token has an expiry of 1 day from time of creation.
- This endpoint is rate limited to 300 requests per min per workspace.
- Obtain Google OAuth 2.0 client credentials.
- Enable Google Calendar API in the project.
- Configure permission scopes calendar.events.readonly & userinfo.email in the consent
  screen section.
- Add https://us-east-1.recall.ai/api/v1/calendar/google_oauth_callback/ as a redirect
  URI for the OAuth client id.
- Each user in your application must connect their Google calendar via OAuth before
  using calendar integration.
- Remember to update your Redirect URI before submitting!
- We recommend choosing the longest feasible time for expiry (e.g 24 months). Once
  a credential gets expired, existing calendar connections will need to be authorised.
- Ensure to update the redirect_uri to be on your own domain as Microsoft requires
  to verify domain ownership.
- This endpoint is rate limited to 120 requests per min per calendar_user
- 'This endpoint is rate limited to: 120 requests per min per calendar_user'
- Only recording preferences that are set to true will be evaluated.
- If all evaluated conditions are met, the meeting will be recorded.
- To enable the bot to join meetings, you must provide it with a Zoom ZAK token.
- Signed in Teams bots only work for Business Microsoft Teams meetings.
- Bots will fail to join Personal MS Teams links if mandatory login is enabled.
- Receive recording data and events in real-time via websockets
- Receive audio data for each participant in realtime over websocket
- Enable bots to bypass the Microsoft Teams lobby.
- Recall uses webhooks to push data or notify your server when certain events happen.
- Idempotency keys are a mechanism to prevent accidental duplicate operations.
- Idempotency behavior is finite (i.e. the idempotency key will only work for 1 hour).
- As a best practice, only generate a new key for each distinct logical operation.
- Authenticated Google Meet bots will use the Google account name and this field will
  be ignored.
- Deletes bot media stored by Recall. This is irreversable.
- Authenticated Google Meet bots will use the Google account name and the 'bot_name'
  field will be ignored.
- Zoom bot uses this to join meetings that require authentication to join.
- This endpoint is rate limited to 300 requests per min per workspace
- By default, this api doesn't stop output media unless you specify one of the below
  params to true
- API requires authentication for access
- Uses OAuth2 with refresh token — requires setup of connected app in Recall.ai
- Screenshots do not include participant video
- The URL for this request expired after 30 days.
- This endpoint is rate limited to 60 requests per min per workspace
- This endpoint is rate limited to 5 requests per min per bot
- Some endpoints may require setup of OAuth credentials.
- This value is available only for Scheduled Webex meetings.
- This value is available only for Personal room Webex meetings.
errors:
- No recordings were made, maybe you didn’t request one?
- '401: Unauthorized'
- Non-successful HTTP status codes (i.e., not in the `2xx` range)
- 'Retry limit: A maximum of 30 retry attempts are made per connection failure incident.'
- '401 Unauthorized: Check API Key or region'
- sub_code: bot_errored
  message: The bot ran into an unexpected error.
- sub_code: meeting_not_found
  message: No meeting was found at the given link.
- sub_code: meeting_not_started
  message: The meeting has not started yet.
- sub_code: meeting_requires_registration
  message: The meeting requires registration.
  recommended_action: Currently not supported for MS Teams. For Zoom, see Registration-Required
    Meetings & Webinars.
- sub_code: meeting_requires_sign_in
  message: The meeting can only be joined by signed in users.
  recommended_action: Incase of Zoom bots, this error message means that the Zoom
    meeting has only authenticated users can join enabled. To bypass this error, follow
    the steps in Joining 'Sign In Required' Zoom Meetings.
- sub_code: meeting_link_expired
  message: The meeting link has expired.
- sub_code: meeting_link_invalid
  message: The meeting does not exist or the link is invalid.
- sub_code: meeting_password_incorrect
  message: The meeting password is incorrect.
- sub_code: meeting_locked
  message: The meeting is locked.
- sub_code: meeting_full
  message: The meeting is full.
- sub_code: meeting_ended
  message: The bot attempted to join a meeting that has already ended and can no longer
    be joined.
- sub_code: google_meet_internal_error
  message: The bot errored due to a Google Meet internal issue.
- sub_code: google_meet_sign_in_failed
  message: The bot was not able to sign in to google.
- sub_code: google_meet_sign_in_captcha_failed
  message: The bot was not able to sign in to google because of captcha.
- sub_code: google_meet_bot_blocked
  message: The bot was disallowed from joining the meeting.
  recommended_action: 'Review Google Meet: FAQ for common causes.'
- sub_code: google_meet_sso_sign_in_failed
  message: The bot was not able to sign in to google with SSO.
- sub_code: google_meet_sign_in_missing_login_credentials
  message: The bot was not able to sign in to google because login credentials were
    not configured.
  recommended_action: Create an Authenticated Google Meet Bot to allow your bots to
    join sign-in-only Google Meet meetings.
- sub_code: google_meet_sign_in_missing_recovery_credentials
  message: The bot was not able to sign in to google because recovery credentials
    were not configured.
- sub_code: google_meet_sso_sign_in_missing_login_credentials
  message: The bot was not able to sign in to google with SSO because login credentials
    were not configured.
- sub_code: google_meet_sso_sign_in_missing_totp_secret
  message: The bot was not able to sign in in to google with SSO because TOTP secret
    was missing from password.
- sub_code: google_meet_video_error
  message: The bot was not able to join the call due to Google Meet video error.
- sub_code: google_meet_meeting_room_not_ready
  message: The bot was not able to join the call as the meeting room was not ready.
- sub_code: google_meet_login_not_available
  message: There were not enough available logins (Google accounts) in the supplied
    google_login_group_id for the bot to use.
  recommended_action: Create additional Google logins as outlined here.
- sub_code: google_meet_permission_denied_breakout
  message: The bot tried to join an active Google Meet breakout room and was rejected.
- sub_code: zoom_sdk_credentials_missing
  message: The bot was not able to join because Zoom SDK credentials were not configured.
- sub_code: zoom_sdk_update_required
  message: A newer version of the Zoom SDK is required to join this meeting.
- sub_code: zoom_sdk_app_not_published
  message: The SDK credentials configured in Recall dashboard have not been approved
    by Zoom.
  recommended_action: In order for your bot to join calls outside of your Zoom workspace,
    you must submit your Zoom app for approval.
- sub_code: zoom_email_blocked_by_admin
  message: The Zoom account this bot is joining from has been disallowed to join this
    meeting by the Zoom workspace administrator.
- sub_code: zoom_registration_required
  message: The bot failed to join because registration is required for this Zoom meeting.
  recommended_action: Ensure that bot is joining from an allowed webinar URL.
- sub_code: zoom_captcha_required
  message: The bot failed to join because captcha is required for this Zoom meeting.
- sub_code: zoom_account_blocked
  message: The account this bot is joining from has been blocked by Zoom.
  recommended_action: When providing the bot with a ZAK token, generate the ZAK token
    from a different Zoom user account.
- sub_code: zoom_invalid_join_token
  message: Zoom's SDK rejected the join token provided by the bot.
- sub_code: zoom_invalid_signature
  message: The Zoom SDK was not able to generate a valid meeting-join signature.
- sub_code: zoom_internal_error
  message: The bot errored due to an internal Zoom error.
- sub_code: zoom_join_timeout
  message: The request to join the Zoom meeting timed out.
- sub_code: zoom_email_required
  message: The bot failed to join because providing an email is required to join this
    Zoom meeting.
  recommended_action: Provide a zoom.user_email when creating the bot.
- sub_code: zoom_web_disallowed
  message: The Zoom meeting host has disallowed joining from the web which prevents
    the bot from joining the meeting.
  recommended_action: Have the host disable E2E encryption for the meeting.
- sub_code: zoom_connection_failed
  message: The bot failed to join the meeting due to a Zoom server error.
- sub_code: zoom_error_multiple_device_join
  message: The bot failed to join the meeting due to another participant with the
    same credentials having joined the meeting.
- sub_code: zoom_meeting_not_accessible
  message: The Zoom meeting was not accessible for the bot.
- sub_code: zoom_meeting_host_inactive
  message: The request to join the Zoom meeting failed, as the meeting host has been
    disabled or restricted.
- sub_code: zoom_invalid_webinar_invite
  message: The invite to the Zoom webinar was invalid.
- sub_code: zoom_another_meeting_in_progress
  message: This host has another meeting in progress.
- sub_code: microsoft_teams_call_dropped
  message: The bot got call dropped error from MS Teams and was unable to re-join
    the call.
- sub_code: microsoft_teams_sign_in_credentials_missing
  message: The bot failed to join a Microsoft Teams meeting requiring all participants
    to be signed-in.
- sub_code: microsoft_teams_sign_in_failed
  message: The bot failed to join a Microsoft Teams meeting requiring all participants
    to be signed-in.
  recommended_action: If Teams credentials are not set up, follow the Signed-In Teams
    Bot Setup guide.
- sub_code: microsoft_teams_internal_error
  message: The bot errored due to a Microsoft Teams server error.
- sub_code: microsoft_teams_captcha_detected
  message: The bot failed to join due to captcha being enabled for anonymous participants.
  recommended_action: Use Signed-In Microsoft Teams Bots to bypass this.
- sub_code: microsoft_teams_bot_not_invited
  message: The bot failed to join a Microsoft Teams meeting as it was not the account
    that was invited.
  recommended_action: Follow this guide to allow access to the bot.
- sub_code: microsoft_teams_breakout_room_unsupported
  message: The bot was moved to a Microsoft Teams breakout room, but they are not
    supported by Recall.
- sub_code: microsoft_teams_event_not_started_for_external
  message: The bot failed to join a Microsoft Teams meeting that prevents external
    participants from joining before the event begins.
- sub_code: microsoft_teams_2fa_required
  recommended_action: Your signed-in Teams bot has 2FA configured. Disable this.
- sub_code: webex_join_meeting_error
  message: The bot failed to join a Webex meeting because the meeting was invalid,
    or Webex credentials are not set up properly.
- sub_code: failed_to_launch_in_time
  message: The bot took too long to launch due to an error on Recall's infrastructure.
  recommended_action: Re-run the Create Bot endpoint to launch another bot for your
    meeting.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API key or token expiration'
- 'Error: 401 Unauthorized - Invalid API key'
- '401 Unauthorized: Recheck API key or its permissions'
- 'Error: Check authorization or request body for missing fields'
- 'Error: {response.status} {response.statusText}'
- 'WebSocket Error: Error connecting to your endpoint.'
- 'unhandled message: Received unexpected event.'
- 'Connection errors: Retrying connection every 3 seconds if unable to connect.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'transcript.failed: Reason for failure included via sub_code in the event payload.'
- '4096 character limit: Exceeded character limit for messages'
- '500 character limit: Exceeded character limit for messages in Google Meet'
- '401 Unauthorized: Recheck API key or permissions.'
- Transcription will be delayed when using real-time transcription with 'prioritize_accuracy'.
- 'transcript.failed: Notify about the failure of async transcription job'
- '400 Bad Request: Check your request parameters'
- '403 Forbidden: Verify IAM permissions for the actions'
- Data cannot be recovered after deletion
- 'invalid_grant: Connections made automatically expire after 7 days if the OAuth
  client is in ''testing''.'
- 'invalid_scope: OAuth client is setup incorrectly or user did not grant necessary
  permissions.'
- 'AADSTS7000215: OAuth client secret is incorrect or expired.'
- 'AADSTS900144: OAuth URL was constructed incorrectly.'
- '401 Unauthorized: Check if the token is expired or lacks permissions.'
- '403 Forbidden: Verify that the user has access to the requested resources.'
- Refresh token missing from OAuth response
- Invalid Recall calendar auth token supplied
- 'invalid_scope: Ensure to check the box to allow your app to view their calendar
  events.'
- 'fatal: Sign In Required'
- 'zoom_email_required: Fatal error when bot tries to join email-required meetings
  without configured email'
- 'zoom_internal_error: Something went wrong on Zoom''s end, and we have limited visibility
  into the underlying error.'
- If the chat messages sent by your bot aren't showing up, it's likely a problem with
  your Zoom configuration.
- You will need to make sure that the host's Zoom chat settings are set to chat with
  'Everyone and anyone directly' if you want the bot to be able to DM anyone in the
  call.
- 'google_meet_bot_blocked: Bot is blocked from joining the meeting.'
- 'google_meet_sign_in_missing_login_credentials: Bot missing login credentials for
  Google account.'
- 'google_meet_login_not_available: All Google Logins are at their limit.'
- 'BOT_SIGN_IN_FAILED: Ensure the bot account is configured correctly.'
- Non-standard Teams meetings are currently unsupported.
- Registration-required meetings & webinars are currently not supported.
- Teams breakout rooms are currently not supported.
- 'microsoft_teams_captcha_detected: Implement Signed-in Teams Bots to resolve.'
- 'Failed to activate Slack team: check API response'
- 'Slack team access revoked: check workspace permissions'
- '400: Slack OAuth error'
- '500: Internal server error'
- Password protected meetings are not supported
- Sending/receiving chat messages is not supported
- 'Connection errors: Retry connection every 3 seconds while the bot is alive.'
- 'REQUEST_LIMIT_EXCEEDED: Rate limit exceeded, reduce request frequency'
- '400: There was something wrong with your request. Check the response body for a
  detailed error message.'
- '401: Unauthorized -- No valid API key provided.'
- '402: (Self-serve customers) Insufficient credit balance -- Top up balance in the
  dashboard.'
- '403: Request Blocked -- Our WAF blocked your request due to an issue with your
  payload.'
- '405: Method is not allowed for the endpoint -- if calling DELETE, the bot has already
  been dispatched.'
- '409: Conflict -- please retry with exponential backoff'
- '429: Too many requests: Retry after the duration specified in the returned Retry-After
  header.'
- '502: Our servers have dropped the request due to high load -- please retry.'
- '503: Our servers have dropped the request due to high load -- please retry.'
- '504: Our servers have dropped the request due to high load -- please retry.'
- '507: Out of adhoc bots -- Please retry in 30 seconds.'
- '403 Request Blocked: Request blocked. We can''t connect to the server for this
  app or website at this time. There might be too much traffic or a configuration
  error. Try again later, or contact the app or website owner.'
- '409: Another matching request is currently being processed.'
- '507: Depleted ad-hoc bot pool.'
- 'URL Expired: The URL for this request expired after 30 days.'
- 'RateLimited: 60 requests per min per workspace'
- 'REQUEST_LIMIT_EXCEEDED: 300 requests per min per workspace'
- 'URL Expired: The URL for this request expired after 30 days'
- '401 Unauthorized: Check OAuth credentials.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Signed-in Teams Bots
  - OAuth & Permissions
client:
  base_url: https://us-east-1.recall.ai/api/v1
  auth:
    type: oauth2
  headers:
    Content-Type: application/json
source_metadata: null
