resources:
- name: issues_categories
  endpoint:
    path: /v2/issues/categories
    method: GET
    data_selector: object
- name: issues_categories
  endpoint:
    path: /v2/issues/categories
    method: GET
    data_selector: results
    params: {}
- name: issues_types
  endpoint:
    path: /v2/issues/types
    method: GET
    data_selector: object
    params: {}
- name: issues
  endpoint:
    path: /v2/issues
    method: GET
- name: issue_statuses
  endpoint:
    path: /v2/issues/statuses
    method: GET
- name: issues_statuses
  endpoint:
    path: /issues/statuses
    method: GET
    data_selector: issues
    params: {}
- name: license_list
  endpoint:
    path: /v2/issues/license-list
    method: GET
    data_selector: data
    params:
      category: licensing
- name: license_list
  endpoint:
    path: /issues/license-list
    method: GET
- name: issue_statuses
  endpoint:
    path: /issues/statuses
    method: GET
- name: issues
  endpoint:
    path: /v2/issues
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /v2/projects
    method: GET
    data_selector: records
    params: {}
- name: teams
  endpoint:
    path: /v2/teams
    method: GET
    data_selector: records
    params: {}
- name: issue_comparison
  endpoint:
    path: /v2/issues/compare/summaries
    method: GET
    data_selector: issues
- name: package_managers
  endpoint:
    path: /v2/issues/package-managers
    method: GET
    data_selector: packageManagers
    params: {}
- name: issues
  endpoint:
    path: /v2/issues
    method: GET
- name: package_managers
  endpoint:
    path: /v2/issues/package-managers
    method: GET
- name: cwes
  endpoint:
    path: /v2/issues/cwes
    method: GET
- name: cwes
  endpoint:
    path: /v2/issues/cwes
    method: GET
    data_selector: cwes
    params: {}
- name: issues
  endpoint:
    path: /v2/issues
    method: GET
    data_selector: records
- name: package_managers
  endpoint:
    path: /v2/issues/package-managers
    method: GET
    data_selector: records
- name: cwes
  endpoint:
    path: /v2/issues/cwes
    method: GET
    data_selector: records
    params:
      scope[type]: global
- name: issue
  endpoint:
    path: /v2/issues/{issueId}
    method: GET
    data_selector: object
    params: {}
- name: issues
  endpoint:
    path: /issues
    method: GET
- name: issue_cwes
  endpoint:
    path: /issues/cwes
    method: GET
- name: dispute
  endpoint:
    path: /v2/issues/{issueId}/disputes
    method: POST
    data_selector: object
    params: {}
- name: issues
  endpoint:
    path: /v2/issues
    method: GET
    data_selector: records
- name: issue
  endpoint:
    path: /v2/issues/{issueId}
    method: GET
    data_selector: records
- name: affected-projects
  endpoint:
    path: /v2/issues/{issueId}/affected-projects
    method: GET
    data_selector: records
- name: disputes
  endpoint:
    path: /v2/issues/{issueId}/disputes
    method: POST
    data_selector: records
- name: affected_projects
  endpoint:
    path: /v2/issues/{issueId}/affected-projects
    method: GET
    data_selector: array of objects
    params:
      category: licensing
      scope[type]: project
- name: issues
  endpoint:
    path: /issues
    method: GET
- name: affected_projects
  endpoint:
    path: /issues/{issueId}/affected-projects
    method: GET
- name: disputes
  endpoint:
    path: /issues/{issueId}/disputes
    method: POST
- name: issues
  endpoint:
    path: /v2/issues
    method: GET
    data_selector: records
    params: {}
- name: issues
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
- name: issues
  endpoint:
    path: /v2/issues
    method: GET
    data_selector: vulnIssues
    params:
      category: licensing
      scope[type]: global
      page: 1
      count: 20
- name: issues
  endpoint:
    path: /v2/issues
    method: GET
    data_selector: ''
- name: issues
  endpoint:
    path: /v2/issues
    method: PUT
    data_selector: count
    params:
      category: required
      status: ''
      scope[type]: required
      scope[id]: ''
      scope[revision]: ''
      scope[revisionScanId]: ''
      scope[release]: ''
      scope[releaseScanId]: ''
      scope[compareTo][revision]: ''
      scope[compareTo][changeStatus]: ''
      ids[]: ''
      filter[revisionIds][]: ''
      filter[search]: ''
      filter[depths][]: ''
      filter[ticketed][]: ''
      filter[containerLayers][]: ''
      filter[type][]: ''
      filter[packageManagers][]: ''
      filter[projectLabels][]: ''
      filter[identification][]: ''
      filter[severity][]: ''
      filter[foundAfter]: ''
      filter[hasFix][]: ''
      filter[upgradeDistance][]: ''
      filter[exploitMaturity][]: ''
      filter[ignoreReason][]: ''
      filter[licenses][]: ''
      filter[confidence][]: ''
- name: issues_revisions
  endpoint:
    path: /v2/issues/revisions
    method: GET
- name: issues_revisions
  endpoint:
    path: /issues/revisions
    method: GET
    data_selector: revisions
    params: {}
- name: issues
  endpoint:
    path: /v2/issues
    method: GET
- name: global_issues_csv
  endpoint:
    path: /v2/issues/csv/global
    method: GET
- name: global_issues_report
  endpoint:
    path: /v2/issues/csv/global
    method: GET
    data_selector: task
    params: {}
- name: exceptions
  endpoint:
    path: /v2/issues/exceptions
    method: GET
    data_selector: exceptions
    params: {}
- name: exceptions
  endpoint:
    path: /v2/issues/exceptions
    method: GET
    data_selector: records
    params:
      filters[category]: licensing
      page: 1
      count: 20
- name: exceptions
  endpoint:
    path: /v2/issues/exceptions
    method: DELETE
- name: exceptions
  endpoint:
    path: /v2/issues/exceptions/{id}
    method: DELETE
    data_selector: integer
    params: {}
- name: exceptions
  endpoint:
    path: /v2/issues/exceptions
    method: DELETE
    data_selector: object
    params: {}
- name: issue_filters
  endpoint:
    path: /issue-filters
    method: GET
    data_selector: filters
    params:
      category: string
- name: saved_filters
  endpoint:
    path: /api/issue-filters
    method: GET
    data_selector: array of objects
    params:
      category: licensing
- name: Issue Filters
  endpoint:
    path: /issue-filters
    method: POST
- name: issue_filters
  endpoint:
    path: /v2/issues/issue-filters
    method: GET
    data_selector: filters
- name: issues
  endpoint:
    path: /v2/issues
    method: GET
- name: issue_filters
  endpoint:
    path: /v2/issues
    method: POST
- name: projects
  endpoint:
    path: /v2/projects
    method: GET
- name: organizations
  endpoint:
    path: /organizations
    method: GET
- name: delete_saved_filter
  endpoint:
    path: /api/issue-filters/{filterId}
    method: DELETE
    data_selector: Saved filter deleted successfully
    params:
      filterId: integer
- name: issue_counts
  endpoint:
    path: /issue_counts
    method: GET
    data_selector: counts
    params:
      start: date-time
      end: date-time
      labels[]: array of integers
      category: string
      projectId: string
      teamId: array
- name: issue_counts_export
  endpoint:
    path: /issue_counts/export
    method: POST
    data_selector: jobToken
    params: {}
- name: issue_counts
  endpoint:
    path: /issue_counts
    method: GET
    data_selector: object
- name: last_published
  endpoint:
    path: /projects/{locator}/last-published
    method: GET
    data_selector: string
    params:
      locator: string
- name: issue_counts
  endpoint:
    path: /issue_counts
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects/{locator}/last-published
    method: GET
    data_selector: records
- name: revisions
  endpoint:
    path: /projects/{locator}/revisions
    method: GET
    data_selector: object
    params:
      offset: number
      count: number
      resolved: boolean
      refs: array of strings
      refs_type: string
- name: projects
  endpoint:
    path: /projects/{locator}/last-published
    method: GET
- name: projects_revisions
  endpoint:
    path: /projects/{locator}/revisions
    method: GET
- name: projects_generate_attribution_slug
  endpoint:
    path: /projects/{locator}/generate_attribution_slug
    method: GET
- name: generate_attribution_slug
  endpoint:
    path: /projects/{locator}/generate_attribution_slug
    method: PUT
- name: project_revisions
  endpoint:
    path: /projects/{locator}/revisions
    method: GET
- name: generate_attribution_slug
  endpoint:
    path: /projects/{locator}/generate_attribution_slug
    method: DELETE
- name: export_issues
  endpoint:
    path: /projects/{locator}/export-issues
    method: GET
    data_selector: issues
    params:
      format: json
      revisionId: latest
      status: all active
- name: export_issues_json
  endpoint:
    path: /projects/{locator}/export-issues/json
    method: GET
    data_selector: response
    params: {}
- name: export_issues_csv
  endpoint:
    path: /projects/{locator}/export-issues/csv
    method: GET
    data_selector: response
    params: {}
- name: export_issues
  endpoint:
    path: /projects/{locator}/export-issues/json
    method: GET
    data_selector: issues
    params:
      revisionId: latest
      status: active
- name: export_issues_json
  endpoint:
    path: /projects/{locator}/export-issues/json
    method: GET
- name: export_issues_csv
  endpoint:
    path: /projects/{locator}/export-issues/csv
    method: GET
- name: export_issues_csv
  endpoint:
    path: /projects/{locator}/export-issues/csv
    method: GET
    data_selector: string
    params:
      revisionId: string
      status: json
      ref: string
      ref_type: string
- name: export_issues_csv
  endpoint:
    path: /projects/{locator}/export-issues/csv
    method: GET
    data_selector: ''
    params: {}
- name: export_issues_json
  endpoint:
    path: /projects/{locator}/export-issues/json
    method: GET
    data_selector: ''
    params: {}
- name: projects
  endpoint:
    path: /v2/projects
    method: GET
    data_selector: ''
    params: {}
- name: projects
  endpoint:
    path: /v2/projects
    method: GET
    data_selector: projects
    params:
      page: 1
      count: 20
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: projects
  endpoint:
    path: /v2/projects
    method: DELETE
    params: {}
- name: projects_summary
  endpoint:
    path: /v2/projects/summary
    method: GET
    data_selector: summary
- name: projects_summary
  endpoint:
    path: /projects/summary
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: projects_labels
  endpoint:
    path: /v2/projects/labels
    method: PUT
    params:
      labelId: number
      locators: required
      title: string
      type: string
      isPublic: boolean
      labels: array of strings
      teamId: array
      latestScan: integer
      lastRevisionWithin: integer
- name: projects_policy
  endpoint:
    path: /v2/projects/policy
    method: PUT
    params:
      policyId: number
      locators: string
      title: string
      type: string
      containerarchiveprovidedautobuildsbom: container, archive, provided, autobuild,
        sbom
      isPublic: boolean
      labels: array of strings
      teamId: array
      latestScan: integer
      lastRevisionWithin: integer
- name: release_groups
  endpoint:
    path: /v2/release-groups
    method: GET
    data_selector: releaseGroups
    params:
      page: 1
      count: 20
- name: release_groups
  endpoint:
    path: /v2/release-groups
    method: GET
- name: projects
  endpoint:
    path: /v2/projects
    method: GET
- name: release_groups
  endpoint:
    path: /v2/projects/{locator}/release-groups
    method: GET
    data_selector: array of objects
- name: release_groups
  endpoint:
    path: /projects/locator/release-groups
    method: GET
- name: release_groups
  endpoint:
    path: /v2/release-groups
    method: DELETE
    params: {}
- name: release_groups_policy
  endpoint:
    path: /v2/release-groups/policy
    method: PUT
    params:
      policyId: number
      ids: required
      title: string
      teamId: array
      latestScan: integer
- name: revisions
  endpoint:
    path: /revisions/{locator}
    method: PATCH
    data_selector: object
- name: attribution_email
  endpoint:
    path: /revisions/{locator}/attribution/email
    method: GET
    data_selector: null
    params: {}
- name: revisions
  endpoint:
    path: /revisions/{locator}
    method: GET
    data_selector: object
- name: attribution
  endpoint:
    path: /revisions/{locator}/attribution/json
    method: GET
    data_selector: object
- name: revision_attribution
  endpoint:
    path: /revisions/{locator}/attribution/json
    method: GET
    data_selector: report
    params: {}
- name: project
  endpoint:
    path: /project
    method: GET
    data_selector: object
- name: directDependencies
  endpoint:
    path: /directDependencies
    method: GET
    data_selector: directDependencies
- name: deepDependencies
  endpoint:
    path: /deepDependencies
    method: GET
    data_selector: deepDependencies
- name: licenses
  endpoint:
    path: /licenses
    method: GET
    data_selector: licenses
- name: otherLicenses
  endpoint:
    path: /otherLicenses
    method: GET
    data_selector: otherLicenses
- name: noticeFiles
  endpoint:
    path: /noticeFiles
    method: GET
    data_selector: noticeFiles
- name: remediation_guidance
  endpoint:
    path: /revisions/{locator}/report/remediation-guidance
    method: GET
    params:
      preview: false
      format: PDF
      bundle: false
      excludeQuickWins: false
      excludeHighPriority: false
      excludedLowPriority: false
      excludeOutdatedDependencies: false
- name: original_sbom
  endpoint:
    path: /revisions/{locator}/original-sbom
    method: GET
- name: sbom_analysis
  endpoint:
    path: /revisions/{locator}/sbom-analysis
    method: GET
    data_selector: sbomFile
    params: {}
- name: notice_files
  endpoint:
    path: /revisions/{locator}/notice-files
    method: GET
    data_selector: array of objects
    params:
      locator: string
- name: notice_files
  endpoint:
    path: /revisions/{locator}/notice-files
    method: GET
- name: sbom_analysis
  endpoint:
    path: /revisions/{locator}/sbom-analysis
    method: GET
- name: dependencies
  endpoint:
    path: /v2/revisions/{locator}/dependencies
    method: GET
    data_selector: dependencies
- name: package_managers
  endpoint:
    path: /v2/revisions/{locator}/dependencies/package-managers
    method: GET
    data_selector: packageManagers
- name: release_group_dependencies
  endpoint:
    path: /v2/release-groups/{projectGroupId}/releases/{projectGroupReleaseId}/dependencies
    method: GET
    data_selector: dependencies
    params: {}
- name: package_managers
  endpoint:
    path: /v2/release-groups/{projectGroupId}/releases/{projectGroupReleaseId}/dependencies/package-managers
    method: GET
    data_selector: packageManagers
    params: {}
- name: root_projects
  endpoint:
    path: /v2/release-groups/{projectGroupId}/releases/{projectGroupReleaseId}/root-projects
    method: GET
    data_selector: rootProjects
    params: {}
- name: release_groups
  endpoint:
    path: /release-groups/{projectGroupId}/releases/{projectGroupReleaseId}/root-projects
    method: GET
- name: dependencies_package_managers
  endpoint:
    path: /release-groups/{projectGroupId}/releases/{projectGroupReleaseId}/dependencies/package-managers
    method: GET
- name: global_dependency
  endpoint:
    path: /dependencies/{locator}
    method: GET
- name: dependencies
  endpoint:
    path: /v2/dependencies/{locator}
    method: GET
    data_selector: dependency
    params:
      locator: string
- name: organization
  endpoint:
    path: /cli/organization
    method: GET
    data_selector: object
- name: organization_labels
  endpoint:
    path: /organizations/labels
    method: GET
    data_selector: labels
- name: organization_labels
  endpoint:
    path: /organizations/labels
    method: POST
- name: organization_label
  endpoint:
    path: /organizations/labels/{id}
    method: GET
- name: organization_label
  endpoint:
    path: /organizations/labels/{id}
    method: GET
- name: organization_labels
  endpoint:
    path: /organizations/labels
    method: GET
    data_selector: records
- name: organization_label
  endpoint:
    path: /organizations/labels/{id}
    method: GET
    data_selector: records
- name: organization_labels
  endpoint:
    path: /organizations/labels/{id}
    method: DELETE
    data_selector: null
    params:
      id: integer
- name: organization_label
  endpoint:
    path: /organizations/labels/{id}
    method: GET
- name: project_labels
  endpoint:
    path: /projects/{locator}/labels
    method: GET
    data_selector: array of objects
    params:
      locator: string
- name: projects
  endpoint:
    path: /projects/{locator}
    method: PUT
- name: package_labels
  endpoint:
    path: /package-labels
    method: GET
    data_selector: packageLabels
- name: package_labels
  endpoint:
    path: /package-labels
    method: GET
- name: package_labels
  endpoint:
    path: /package-labels
    method: POST
    data_selector: packageLabels
- name: package_labels
  endpoint:
    path: /package-labels
    method: POST
    data_selector: object
- name: package_labels
  endpoint:
    path: /package-labels
    method: DELETE
    data_selector: null
    params:
      ids: array of integers
- name: package_labels
  endpoint:
    path: /package-labels
    method: DELETE
    data_selector: object
- name: package_label_assignments
  endpoint:
    path: /package-label-assignments
    method: GET
    data_selector: object
- name: package_label_assignments
  endpoint:
    path: /package-label-assignments
    method: GET
    data_selector: packageLabelAssignmentResponse
    params: {}
- name: package_label_assignments
  endpoint:
    path: /package-label-assignments
    method: GET
- name: package_labels
  endpoint:
    path: /package-labels
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: package_label_assignments
  endpoint:
    path: /package-label-assignments
    method: POST
    data_selector: packageLabelAssignmentResponse
    params: {}
- name: package_label_assignments
  endpoint:
    path: /package-label-assignments
    method: delete
    data_selector: responses
    params: {}
- name: package_label_assignments
  endpoint:
    path: /package-label-assignments
    method: DELETE
    data_selector: object
- name: package_managers
  endpoint:
    path: /packages/package-managers
    method: GET
    data_selector: array of strings
- name: package_locators
  endpoint:
    path: /packages/package-locators
    method: GET
    data_selector: results
    params: {}
- name: package_summary
  endpoint:
    path: /packages/package-summary
    method: GET
    data_selector: object
- name: package_summary
  endpoint:
    path: /packages/package-summary
    method: GET
- name: package_locators
  endpoint:
    path: /packages/package-locators
    method: GET
- name: issues
  endpoint:
    path: /v2/issues
    method: GET
    data_selector: ''
    params: {}
- name: projects
  endpoint:
    path: /v2/projects
    method: GET
    data_selector: ''
    params: {}
- name: revisions
  endpoint:
    path: /revisions/{locator}
    method: PATCH
    data_selector: ''
    params: {}
- name: audit_logs
  endpoint:
    path: /audit_logs
    method: GET
    data_selector: ''
    params: {}
- name: report
  endpoint:
    path: /packages/report
    method: GET
    data_selector: task
    params: {}
- name: package_report
  endpoint:
    path: /packages/report
    method: GET
    data_selector: object
    params: {}
- name: issues
  endpoint:
    path: /v2/issues
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /v2/projects
    method: GET
    data_selector: records
    params: {}
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: object
    params: {}
- name: packages
  endpoint:
    path: /packages
    method: GET
- name: package_report
  endpoint:
    path: /packages/report
    method: GET
- name: release_groups
  endpoint:
    path: /release-groups
    method: GET
- name: project_group
  endpoint:
    path: /project_group
    method: POST
- name: project_group
  endpoint:
    path: /project_group/{groupId}
    method: GET
- name: project_group
  endpoint:
    path: /project_group
    method: GET
- name: project_group_by_id
  endpoint:
    path: /project_group/{groupId}
    method: GET
- name: project_group
  endpoint:
    path: /project_group/{groupId}
    method: PUT
- name: project_group
  endpoint:
    path: /project_group/{groupId}
    method: DELETE
- name: project_group
  endpoint:
    path: /project_group/{groupId}
    method: DELETE
- name: all_projects
  endpoint:
    path: /project_group/{groupId}/all_projects
    method: GET
- name: project_group
  endpoint:
    path: /project_group/{groupId}/all_projects
    method: GET
- name: teams
  endpoint:
    path: /project_group/{groupId}/teams
    method: GET
    data_selector: teams
- name: releases
  endpoint:
    path: /project_group/{groupId}/releases
    method: GET
    data_selector: releases
    params:
      count: 10
      page: 1
- name: release
  endpoint:
    path: /project_group/{groupId}/release
    method: GET
    data_selector: array of objects
- name: release
  endpoint:
    path: /project_group/{groupId}/release
    method: GET
- name: releases
  endpoint:
    path: /project_group/{groupId}/releases
    method: GET
- name: release
  endpoint:
    path: /project_group/{groupId}/release
    method: POST
- name: release
  endpoint:
    path: /project_group/{groupId}/release
    method: POST
- name: release_by_id
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}
    method: GET
- name: release
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}
    method: GET
    data_selector: array of objects
    params: {}
- name: release_group
  endpoint:
    path: /project_group/{groupId}/release
    method: GET
- name: project_group_release
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}
    method: GET
- name: release
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}
    method: PUT
- name: release_group
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}
    method: GET
- name: release
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}
    method: DELETE
- name: release_group
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}
    method: DELETE
- name: revisions
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}/revisions
    method: GET
    data_selector: array of objects
    params:
      groupId: required
      projectGroupReleaseId: required
- name: release_group
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}/revisions
    method: GET
- name: release_group_revisions
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}/revisions
    method: GET
- name: release_group_obligations
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}/obligations
    method: GET
- name: release_group_licenses
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}/licenses
    method: GET
- name: release_group_release_by_id
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}
    method: GET
- name: obligations
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}/obligations
    method: GET
    data_selector: object
    params:
      groupId: integer
      projectGroupReleaseId: integer
- name: licenses
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}/licenses
    method: GET
- name: scans
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}/scans
    method: GET
- name: release_group_summary
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}/summary
    method: GET
    data_selector: object
- name: release_group_scans
  endpoint:
    path: /project_group/{groupId}/release/{projectGroupReleaseId}/scans
    method: GET
    data_selector: object
- name: project_group_attribution
  endpoint:
    path: /project_group/attribution/{taskId}
    method: GET
    data_selector: object
- name: attribution
  endpoint:
    path: /project_group/{groupId}/release/{releaseId}/attribution/{format}
    method: GET
- name: share_requests
  endpoint:
    path: /v1/share-requests
    method: GET
    data_selector: shareRequests
    params: {}
- name: remediation_guidance
  endpoint:
    path: /vulns/{vulnId}/revisions/{revisionId}/remediation-guidance
    method: GET
- name: shared_organizations
  endpoint:
    path: /v1/shared-organizations
    method: GET
    data_selector: object
- name: issues
  endpoint:
    path: /v2/issues
    method: GET
    data_selector: object
- name: projects
  endpoint:
    path: /v2/projects
    method: GET
    data_selector: object
- name: general_settings
  endpoint:
    path: /organizations/{id}/settings/general
    method: GET
    data_selector: labels
    params:
      id: required
- name: organization_settings
  endpoint:
    path: /organizations/{id}/settings/general
    method: PUT
    data_selector: null
    params: {}
- name: project_privacy_settings
  endpoint:
    path: /organizations/{id}/settings/projects/privacy
    method: GET
    data_selector: object
- name: privacy_settings
  endpoint:
    path: /organizations/{id}/settings/projects/privacy
    method: GET
- name: general_settings
  endpoint:
    path: /organizations/{id}/settings/general
    method: GET
- name: project_privacy
  endpoint:
    path: /organizations/{id}/settings/projects/privacy
    method: PUT
    data_selector: none
    params: {}
- name: project_privacy
  endpoint:
    path: /organizations/{id}/settings/projects/privacy
    method: PATCH
    data_selector: No content
    params: {}
- name: organization_settings_projects_privacy
  endpoint:
    path: /organizations/{id}/settings/projects/privacy
    method: PATCH
    data_selector: object
- name: organization_settings_projects_github_status_checks
  endpoint:
    path: /organizations/{id}/settings/projects/github-status-checks
    method: GET
    data_selector: object
- name: github_status_checks
  endpoint:
    path: /organizations/{id}/settings/projects/github-status-checks
    method: GET
- name: github-status-checks
  endpoint:
    path: /organizations/{id}/settings/projects/github-status-checks
    method: GET
- name: privacy
  endpoint:
    path: /organizations/{id}/settings/projects/privacy
    method: GET
- name: github_status_checks
  endpoint:
    path: /organizations/{id}/settings/projects/github-status-checks
    method: PUT
    data_selector: uuid
    params: {}
- name: github_status_checks
  endpoint:
    path: /organizations/{id}/settings/projects/github-status-checks
    method: PATCH
- name: licensing
  endpoint:
    path: /organizations/{id}/settings/projects/issues/licensing
    method: GET
    data_selector: object
    params:
      id: integer
- name: licensing
  endpoint:
    path: /organizations/{id}/settings/projects/issues/licensing
    method: GET
- name: github-status-checks
  endpoint:
    path: /organizations/{id}/settings/projects/github-status-checks
    method: GET
- name: licensing
  endpoint:
    path: /organizations/{id}/settings/projects/issues/licensing
    method: PUT
    data_selector: null
    params: {}
- name: licensing
  endpoint:
    path: /organizations/{id}/settings/projects/issues/licensing
    method: PATCH
    data_selector: none
    params: {}
- name: security_issue_settings
  endpoint:
    path: /organizations/{id}/settings/projects/issues/security
    method: GET
    data_selector: object
    params:
      id: integer
- name: security_issue_settings
  endpoint:
    path: /organizations/{id}/settings/projects/issues/security
    method: GET
- name: licensing_issue_settings
  endpoint:
    path: /organizations/{id}/settings/projects/issues/licensing
    method: GET
- name: security_issue_settings
  endpoint:
    path: /organizations/{id}/settings/projects/issues/security
    method: PUT
- name: security
  endpoint:
    path: /organizations/{id}/settings/projects/issues/security
    method: PATCH
    data_selector: no content
    params: {}
- name: security_issues
  endpoint:
    path: /organizations/{id}/settings/projects/issues/security
    method: PATCH
    data_selector: object
    params: {}
- name: quality_issues
  endpoint:
    path: /organizations/{id}/settings/projects/issues/quality
    method: GET
    data_selector: object
    params: {}
- name: quality_issue_settings
  endpoint:
    path: /organizations/{id}/settings/projects/issues/quality
    method: GET
    data_selector: object
    params:
      id: integer
- name: quality_issues
  endpoint:
    path: /organizations/{id}/settings/projects/issues/quality
    method: GET
- name: security_issues
  endpoint:
    path: /organizations/{id}/settings/projects/issues/security
    method: GET
- name: quality_settings
  endpoint:
    path: /organizations/{id}/settings/projects/issues/quality
    method: PUT
    data_selector: null
    params: {}
- name: quality_issues
  endpoint:
    path: /organizations/{id}/settings/projects/issues/quality
    method: PATCH
    data_selector: null
    params: {}
- name: container_issue_settings
  endpoint:
    path: /organizations/{id}/settings/projects/issues/container
    method: GET
    data_selector: object
    params: {}
- name: container_issue_settings
  endpoint:
    path: /organizations/{id}/settings/projects/issues/container
    method: GET
    data_selector: object
    params: {}
- name: quality_issue_settings
  endpoint:
    path: /organizations/{id}/settings/projects/issues/quality
    method: GET
    data_selector: object
    params: {}
- name: container_issue_settings
  endpoint:
    path: /organizations/{id}/settings/projects/issues/container
    method: PUT
    data_selector: none
    params: {}
- name: organization_container_issues
  endpoint:
    path: /organizations/{id}/settings/projects/issues/container
    method: GET
- name: container_issue_settings
  endpoint:
    path: /organizations/{id}/settings/projects/issues/container
    method: PATCH
- name: notifications
  endpoint:
    path: /organizations/{id}/settings/projects/notifications
    method: GET
    data_selector: object
    params:
      id: integer
- name: notifications
  endpoint:
    path: /organizations/{id}/settings/projects/notifications
    method: GET
- name: issues_container
  endpoint:
    path: /organizations/{id}/settings/projects/issues/container
    method: GET
- name: notifications
  endpoint:
    path: /organizations/{id}/settings/projects/notifications
    method: PUT
    data_selector: notifications
    params: {}
- name: organization_notifications
  endpoint:
    path: /organizations/{id}/settings/projects/notifications
    method: GET
- name: notifications
  endpoint:
    path: /organizations/{id}/settings/projects/notifications
    method: PATCH
    data_selector: null
    params: {}
- name: notifications
  endpoint:
    path: /organizations/{id}/settings/projects/notifications
    method: PATCH
    data_selector: object
    params: {}
- name: update-hooks
  endpoint:
    path: /organizations/{id}/settings/projects/update-hooks
    method: PATCH
    data_selector: object
    params: {}
- name: update_hooks
  endpoint:
    path: /organizations/{id}/settings/projects/update-hooks
    method: GET
    data_selector: object
    params:
      id: integer
- name: project_update_hooks
  endpoint:
    path: /organizations/{id}/settings/projects/update-hooks
    method: GET
- name: project_notifications
  endpoint:
    path: /organizations/{id}/settings/projects/notifications
    method: GET
- name: update_hooks
  endpoint:
    path: /organizations/{id}/settings/projects/update-hooks
    method: PUT
    data_selector: null
    params: {}
- name: update_hooks
  endpoint:
    path: /organizations/{id}/settings/projects/update-hooks
    method: PATCH
    data_selector: no data
    params: {}
- name: authentication_settings
  endpoint:
    path: /organizations/{id}/settings/authentication
    method: GET
- name: authentication_settings
  endpoint:
    path: /organizations/{id}/settings/authentication
    method: GET
    data_selector: object
- name: languages_pod
  endpoint:
    path: /organizations/{id}/settings/languages/pod
    method: GET
    data_selector: object
- name: cocoapods_settings
  endpoint:
    path: /organizations/{id}/settings/languages/pod
    method: GET
    data_selector: array
- name: organizations_settings_languages_pod
  endpoint:
    path: /organizations/{id}/settings/languages/pod
    method: GET
    data_selector: application/json
- name: cocoapods
  endpoint:
    path: /organizations/{id}/settings/languages/pod
    method: PUT
- name: organization_settings_languages_pod
  endpoint:
    path: /organizations/{id}/settings/languages/pod
    method: PUT
    data_selector: ''
    params: {}
- name: organization_settings_languages_bower
  endpoint:
    path: /organizations/{id}/settings/languages/bower
    method: PUT
    data_selector: ''
    params: {}
- name: bower_settings
  endpoint:
    path: /organizations/{id}/settings/languages/bower
    method: GET
    data_selector: object
    params:
      id: integer
- name: bower_settings
  endpoint:
    path: /organizations/{id}/settings/languages/bower
    method: PUT
- name: bower_settings
  endpoint:
    path: /organizations/{id}/settings/languages/bower
    method: GET
    data_selector: object
- name: gem_settings
  endpoint:
    path: /organizations/{id}/settings/languages/gem
    method: GET
    data_selector: object
- name: gem
  endpoint:
    path: /organizations/{id}/settings/languages/gem
    method: GET
    data_selector: object
    params:
      id: integer
- name: rubygems_settings
  endpoint:
    path: /organizations/{id}/settings/languages/gem
    method: PUT
- name: maven_settings
  endpoint:
    path: /organizations/{id}/settings/languages/mvn
    method: GET
    data_selector: object
    params:
      id: integer
- name: mvn_settings
  endpoint:
    path: /organizations/{id}/settings/languages/mvn
    method: GET
- name: gem_settings
  endpoint:
    path: /organizations/{id}/settings/languages/gem
    method: GET
- name: maven_settings
  endpoint:
    path: /organizations/{id}/settings/languages/mvn
    method: PUT
    data_selector: null
    params: {}
- name: nuget_settings
  endpoint:
    path: /organizations/{id}/settings/languages/nuget
    method: GET
    data_selector: null
    params:
      id: integer
- name: nuget_settings
  endpoint:
    path: /organizations/{id}/settings/languages/nuget
    method: GET
- name: mvn_settings
  endpoint:
    path: /organizations/{id}/settings/languages/mvn
    method: GET
- name: nuget_settings
  endpoint:
    path: /organizations/{id}/settings/languages/nuget
    method: PUT
    data_selector: null
    params:
      id: integer
- name: nuget_settings
  endpoint:
    path: /organizations/{id}/settings/languages/nuget
    method: GET
    data_selector: object
- name: pip_settings
  endpoint:
    path: /organizations/{id}/settings/languages/pip
    method: GET
    data_selector: object
- name: pip_settings
  endpoint:
    path: /organizations/{id}/settings/languages/pip
    method: GET
    data_selector: object
    params:
      id: integer
- name: pip
  endpoint:
    path: /organizations/{id}/settings/languages/pip
    method: PUT
    data_selector: none
    params:
      id: integer
- name: language_pip_settings
  endpoint:
    path: /organizations/{id}/settings/languages/pip
    method: GET
    data_selector: object
    params: {}
- name: language_git_settings
  endpoint:
    path: /organizations/{id}/settings/languages/git
    method: GET
    data_selector: object
    params: {}
- name: git_settings
  endpoint:
    path: /organizations/{id}/settings/languages/git
    method: GET
    data_selector: object
    params:
      id: integer
- name: git_settings
  endpoint:
    path: /organizations/{id}/settings/languages/git
    method: PUT
    data_selector: authOptions
- name: git_settings
  endpoint:
    path: /organizations/{id}/settings/languages/git
    method: GET
    data_selector: object
- name: npm_settings
  endpoint:
    path: /organizations/{id}/settings/languages/npm
    method: GET
    data_selector: object
- name: npm_settings
  endpoint:
    path: /organizations/{id}/settings/languages/npm
    method: GET
- name: npm_settings
  endpoint:
    path: /organizations/{id}/settings/languages/npm
    method: PUT
    data_selector: registries
    params:
      id: integer
- name: custom_license_scans
  endpoint:
    path: /organizations/{id}/settings/integrations/custom-license-scans
    method: GET
    data_selector: array of objects
- name: custom_license_scans
  endpoint:
    path: /organizations/{id}/settings/integrations/custom-license-scans
    method: GET
- name: languages_npm
  endpoint:
    path: /organizations/{id}/settings/languages/npm
    method: GET
- name: custom_license_scans
  endpoint:
    path: /organizations/{id}/settings/integrations/custom-license-scans
    method: PUT
- name: custom_license_scans
  endpoint:
    path: /organizations/{id}/settings/integrations/custom-license-scans
    method: PUT
    data_selector: object
    params: {}
- name: slack_settings
  endpoint:
    path: /organizations/{id}/settings/integrations/slack
    method: GET
    data_selector: object
    params: {}
- name: slack_integration
  endpoint:
    path: /organizations/{id}/settings/integrations/slack
    method: GET
    data_selector: array of objects
    params:
      id: integer
- name: delete_jira_configuration
  endpoint:
    path: /jira/{id}
    method: DELETE
    data_selector: object
    params:
      id: integer
- name: issues
  endpoint:
    path: /v2/issues/get
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /v2/projects/get
    method: GET
    data_selector: records
- name: audit_logs
  endpoint:
    path: /audit_logs/get
    method: GET
    data_selector: records
- name: jira_site
  endpoint:
    path: /jira/{id}
    method: PATCH
- name: jira
  endpoint:
    path: /webhook
    method: GET
    data_selector: object
    params: {}
- name: builds
  endpoint:
    path: /builds
    method: GET
    data_selector: array of objects
    params: {}
- name: builds_count
  endpoint:
    path: /counts/builds
    method: GET
    data_selector: number
    params: {}
- name: builds
  endpoint:
    path: /counts/builds
    method: GET
    data_selector: builds
- name: audit_logs
  endpoint:
    path: /audit_logs
    method: GET
    params:
      sortBy: createdAt
      sortDir: DESC
- name: audit_logs
  endpoint:
    path: /audit_logs
    method: GET
    data_selector: array of objects
- name: audit_logs_count
  endpoint:
    path: /count/audit_logs
    method: GET
    data_selector: integer
    params: {}
- name: audit_logs
  endpoint:
    path: /audit_logs
    method: GET
    data_selector: object
- name: audit_logs_export
  endpoint:
    path: /audit_logs/export
    method: POST
    data_selector: object
- name: audit_log_count
  endpoint:
    path: /count/audit_logs
    method: GET
    data_selector: object
- name: organization_limits
  endpoint:
    path: /organizations/{id}/limits/{resource}
    method: GET
    data_selector: object
    params: {}
- name: signed_url
  endpoint:
    path: /components/signed_url
    method: GET
    data_selector: signedUrl
    params:
      packageSpec: required
      revision: required
      fileType: enum
- name: signed_url
  endpoint:
    path: /components/signed_url
    method: GET
- name: components_build
  endpoint:
    path: /components/build
    method: POST
- name: roles
  endpoint:
    path: /roles
    method: GET
    data_selector: array of objects
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: array of objects
    params: {}
- name: teams
  endpoint:
    path: /api/teams
    method: GET
    data_selector: application/json
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: application/json
- name: roles
  endpoint:
    path: /roles
    method: GET
    data_selector: application/json
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /users/{id}
    method: GET
    data_selector: object of objects
    params:
      id: integer
- name: teams
  endpoint:
    path: /v2/teams/{id}
    method: GET
    data_selector: object
    params:
      id: integer
- name: team_members
  endpoint:
    path: /teams/{id}/members
    method: GET
    data_selector: results
    params:
      page: 1
      pageSize: 10
- name: teams
  endpoint:
    path: /v2/teams/{id}
    method: GET
    data_selector: object
    params: {}
- name: team_members_addable
  endpoint:
    path: /teams/{id}/members/addable
    method: GET
    data_selector: object
    params: {}
- name: addable_team_members
  endpoint:
    path: /teams/{id}/members/addable
    method: GET
    data_selector: results
    params:
      page: 1
      pageSize: 10
- name: members_addable
  endpoint:
    path: /teams/{id}/members/addable
    method: GET
    data_selector: addableUsers
    params: {}
- name: members
  endpoint:
    path: /teams/{id}/members
    method: GET
    data_selector: members
    params: {}
- name: projects
  endpoint:
    path: /teams/{id}/projects
    method: GET
    data_selector: results
    params:
      page: '1'
      pageSize: '10'
- name: release_groups
  endpoint:
    path: /teams/{id}/release-groups
    method: GET
    data_selector: results
    params:
      page: 1
      pageSize: 10
- name: release_groups
  endpoint:
    path: /teams/{id}/release-groups
    method: GET
- name: addable_projects_and_release_groups
  endpoint:
    path: /teams/{id}/addable-projects-and-release-groups
    method: GET
- name: projects
  endpoint:
    path: /teams/{id}/projects
    method: GET
- name: addable_projects_and_release_groups
  endpoint:
    path: /teams/{id}/addable-projects-and-release-groups
    method: GET
    data_selector: results
    params:
      page: 1
      pageSize: 10
- name: github_app_installation_url
  endpoint:
    path: /services/github-app/installation-url
    method: GET
    data_selector: ''
- name: add_projects_to_team
  endpoint:
    path: /teams/{team-id}/projects
    method: PUT
- name: projects
  endpoint:
    path: /v2/projects
    method: GET
- name: binary_components
  endpoint:
    path: /binary/{revisionLocator}/{dependencyLocator}/components
    method: GET
    data_selector: results
- name: binary_matches
  endpoint:
    path: /binary/{revisionLocator}/{componentId}/matches
    method: GET
    data_selector: results
- name: binary_revision_components_count
  endpoint:
    path: /binary/revision/{revisionLocator}/components/count
    method: GET
    data_selector: count
    params: {}
- name: binary_revision_components_paths
  endpoint:
    path: /binary/revision/{revisionLocator}/components/paths
    method: GET
- name: dependency_confidence
  endpoint:
    path: /binary/{revisionLocator}/dependency-confidence
    method: GET
- name: dependency_confidence
  endpoint:
    path: /binary/{revisionLocator}/dependency-confidence/{dependencyLocator}
    method: GET
- name: binary_release_group_release_components_count
  endpoint:
    path: /binary/release-group/{releaseGroupId}/release/{releaseId}/components/count
    method: GET
    data_selector: count
- name: dependency_confidence
  endpoint:
    path: /binary/{revisionLocator}/dependency-confidence/{dependencyLocator}
    method: GET
- name: release_components_paths
  endpoint:
    path: /binary/release-group/{releaseGroupId}/release/{releaseId}/components/paths
    method: GET
- name: release_components_count
  endpoint:
    path: /binary/release-group/{releaseGroupId}/release/{releaseId}/components/count
    method: GET
- name: singlerevisiondependencyconfidence
  endpoint:
    path: /binary/{revisionLocator}/dependency-confidence/{dependencyLocator}
    method: GET
- name: getreleasecomponentspaths
  endpoint:
    path: /binary/release-group/{releaseGroupId}/release/{releaseId}/components/paths
    method: GET
- name: getreleasedependencyconfidence
  endpoint:
    path: /binary/release/{releaseId}/dependency-confidence/{dependencyLocator}
    method: GET
- name: binary_release_group_release_components_paths
  endpoint:
    path: /binary/release-group/{releaseGroupId}/release/{releaseId}/components/paths
    method: GET
    data_selector: paths
    params:
      releaseGroupId: number
      releaseId: number
      path: string
- name: dependency_confidence
  endpoint:
    path: /binary/release/{releaseId}/dependency-confidence
    method: GET
    data_selector: object
    params:
      releaseId: number
- name: dependency_confidence
  endpoint:
    path: /binary/release/{releaseId}/dependency-confidence/{dependencyLocator}
    method: GET
    data_selector: object
    params: {}
- name: dependency_confidence
  endpoint:
    path: /binary/release/{releaseId}/dependency-confidence
    method: GET
    data_selector: object
- name: snippets_paths
  endpoint:
    path: /revisions/{locator}/snippets/paths
    method: GET
- name: snippets
  endpoint:
    path: /revisions/{locator}/snippets
    method: GET
    data_selector: snippets
    params:
      path: required
      ids: optional
      search: optional
      confidence: optional
      sort: optional
      page: optional
      count: optional
- name: snippets
  endpoint:
    path: /snippets
    method: GET
    data_selector: results
    params: {}
- name: snippets
  endpoint:
    path: /revisions/{locator}/snippets
    method: GET
- name: snippet_paths
  endpoint:
    path: /revisions/{locator}/snippets/paths
    method: GET
- name: snippets
  endpoint:
    path: /revisions/{locator}/snippets/{snippetId}
    method: GET
    data_selector: snippet
    params: {}
- name: snippet_matches
  endpoint:
    path: /revisions/{locator}/snippets/{snippetId}/matches/{path}
    method: GET
    data_selector: matchDetails
- name: snippet_match_details
  endpoint:
    path: /revisions/{locator}/snippets/{snippetId}/matches/{path}
    method: GET
- name: reject_snippets
  endpoint:
    path: /revisions/{locator}/snippets/reject
    method: POST
- name: unreject_snippets
  endpoint:
    path: /revisions/{locator}/snippets/unreject
    method: POST
    data_selector: 'null'
    params: {}
- name: snippets_reject
  endpoint:
    path: /revisions/{locator}/snippets/reject
    method: POST
- name: snippets_unreject
  endpoint:
    path: /revisions/{locator}/snippets/unreject
    method: POST
- name: snippets_compare
  endpoint:
    path: /revisions/{locator}/snippets/compare/{olderRevisionLocator}/{status}
    method: GET
- name: snippets_compare_paths
  endpoint:
    path: /revisions/{locator}/snippets/compare/{olderRevisionLocator}/{status}/paths
    method: GET
- name: compare_snippets
  endpoint:
    path: /revisions/{locator}/snippets/compare/{olderRevisionLocator}/{status}/paths
    method: GET
    data_selector: paths
- name: compare_snippets
  endpoint:
    path: /revisions/{locator}/snippets/compare/{olderRevisionLocator}/{status}
    method: GET
    params:
      path: string
      ids: array of strings
      search: string
      confidence: array of strings
      sort: string
      page: integer
      count: integer
- name: results
  endpoint:
    path: /snippets
    method: GET
    data_selector: results
    params: {}
- name: oidc_providers
  endpoint:
    path: /oidc/providers
    method: GET
    data_selector: results
    params:
      pageSize: 10
      prev: 0
- name: oidc_providers
  endpoint:
    path: /oidc/providers
    method: GET
- name: oidc_providers
  endpoint:
    path: /oidc/providers
    method: POST
- name: oidc_providers
  endpoint:
    path: /oidc/providers
    method: GET
    data_selector: records
- name: oidc_provider
  endpoint:
    path: /oidc/providers/{id}
    method: GET
    data_selector: object
- name: oidc_provider
  endpoint:
    path: /oidc/providers/{id}
    method: GET
    data_selector: object
    params: {}
- name: oidc_provider
  endpoint:
    path: /oidc/providers/{id}
    method: PUT
- name: oidc_provider
  endpoint:
    path: /oidc/providers/{id}
    method: GET
    data_selector: object
- name: oidc_trust_relationships
  endpoint:
    path: /oidc/trust-relationships
    method: GET
    data_selector: object
- name: trust_relationships
  endpoint:
    path: /oidc/trust-relationships
    method: GET
    data_selector: trust_relationships
    params:
      pageSize: '10'
      prev: '0'
- name: oidc_trust_relationship
  endpoint:
    path: /oidc/trust_relationships
    method: GET
    data_selector: results
    params:
      pageSize: 10
- name: trust_relationships
  endpoint:
    path: /oidc/trust-relationships
    method: GET
    data_selector: trust_relationships
    params:
      pageSize: '10'
      prev: '0'
- name: trust_relationship
  endpoint:
    path: /oidc/trust_relationships
    method: GET
    data_selector: object
    params: {}
- name: oidc_trust_relationship
  endpoint:
    path: /oidc/trust-relationships/{id}
    method: GET
    data_selector: object
    params: {}
- name: oidc_trust_relationships
  endpoint:
    path: /oidc/trust-relationships/{id}
    method: PUT
    data_selector: responses
    params: {}
- name: token_exchange
  endpoint:
    path: /oidc/token-exchange
    method: POST
- name: issues_categories
  endpoint:
    path: /v2/issues/categories
    method: GET
    data_selector: active_issues_by_category
    params: {}
- name: saved_filters
  endpoint:
    path: /issue-filters
    method: GET
    data_selector: filters
    params:
      category: string
- name: saved_filters
  endpoint:
    path: /api/issue-filters
    method: GET
    data_selector: array of objects
    params:
      category: licensing
- name: issue_counts
  endpoint:
    path: /issue_counts
    method: GET
    data_selector: counts
    params: {}
- name: last_published
  endpoint:
    path: /projects/{locator}/last-published
    method: GET
- name: issue_counts_export
  endpoint:
    path: /issue_counts/export
    method: GET
- name: projects
  endpoint:
    path: /projects/{locator}/revisions
    method: GET
- name: revisions
  endpoint:
    path: /revisions/{locator}
    method: PATCH
    data_selector: object
    params: {}
- name: release_groups_policy
  endpoint:
    path: /v2/release-groups/policy
    method: PATCH
- name: revision_attribution_email
  endpoint:
    path: /revisions/{locator}/attribution/email
    method: GET
- name: dependencies
  endpoint:
    path: /v2/revisions/{locator}/dependencies
    method: GET
    data_selector: dependencies
    params:
      page: 1
      count: 50
- name: organization
  endpoint:
    path: /cli/organization
    method: GET
- name: organization
  endpoint:
    path: /organization
    method: GET
- name: dependencies
  endpoint:
    path: /v2/dependencies/{locator}
    method: GET
- name: organization_labels
  endpoint:
    path: /organizations/labels
    method: GET
    data_selector: labels
- name: organization_labels
  endpoint:
    path: /organizations/labels
    method: GET
    data_selector: records
    params: {}
- name: project_labels
  endpoint:
    path: /projects/{locator}/labels
    method: GET
    data_selector: array of objects
    params:
      locator: string
- name: package_labels
  endpoint:
    path: /package-labels
    method: GET
    data_selector: packageLabels
- name: package_labels
  endpoint:
    path: /package-labels
    method: GET
- name: package_managers
  endpoint:
    path: /packages/package-managers
    method: GET
    data_selector: array of strings
- name: project_group
  endpoint:
    path: /project_group
    method: POST
    data_selector: object
- name: share_requests
  endpoint:
    path: /v1/share-requests
    method: GET
    data_selector: shareRequests
    params:
      projectLocator: string
- name: remediation_guidance
  endpoint:
    path: /vulns/{vulnId}/revisions/{revisionId}/remediation-guidance
    method: GET
    data_selector: object
    params: {}
- name: shared_organizations
  endpoint:
    path: /v1/shared-organizations
    method: GET
- name: vulnerabilities
  endpoint:
    path: /vulns/{vulnId}/revisions/{revisionId}/remediation-guidance
    method: GET
- name: general_settings
  endpoint:
    path: /organizations/{id}/settings/general
    method: GET
    data_selector: object
- name: builds
  endpoint:
    path: /builds
    method: GET
    data_selector: array of objects
    params: {}
- name: audit_logs
  endpoint:
    path: /audit_logs
    method: GET
    data_selector: records
    params:
      offset: int32
      limit: int32
      sortBy: string
      sortDir: string
      startDate: date-time
      endDate: date-time
      actingUserIds: array of strings
      actions: array of strings
      topics: array of strings
      topicActions: array of strings
      startingAfter: date-time
      endingBefore: string
- name: audit_log
  endpoint:
    path: /audit_logs
    method: GET
    data_selector: array of objects
- name: organization_limits
  endpoint:
    path: /organizations/{id}/limits/{resource}
    method: GET
    data_selector: object
    params: {}
- name: signed_url
  endpoint:
    path: /components/signed_url
    method: GET
    data_selector: signedUrl
    params:
      packageSpec: ''
      revision: ''
      fileType: ''
- name: signed_url
  endpoint:
    path: /components/signed_url
    method: GET
    data_selector: response
- name: organization_limits
  endpoint:
    path: /organizations/{id}/limits/{resource}
    method: GET
    data_selector: response
- name: roles
  endpoint:
    path: /roles
    method: GET
    data_selector: array of objects
- name: team
  endpoint:
    path: /v2/teams/{id}
    method: GET
    data_selector: object
    params: {}
- name: github_app_installation_url
  endpoint:
    path: /services/github-app/installation-url
    method: GET
    data_selector: object
- name: add_projects_to_team
  endpoint:
    path: /teams/{team-id}/projects
    method: PUT
- name: add_projects_to_team
  endpoint:
    path: /services/github-app/installation-url
    method: GET
- name: binary_components
  endpoint:
    path: /binary/{revisionLocator}/{dependencyLocator}/components
    method: GET
    data_selector: results
- name: snippets_paths
  endpoint:
    path: /revisions/{locator}/snippets/paths
    method: GET
    data_selector: paths
- name: snippets
  endpoint:
    path: /revisions/{locator}/snippets
    method: GET
    data_selector: object
    params: {}
- name: oidc_providers
  endpoint:
    path: /oidc/providers
    method: GET
    data_selector: results
    params:
      pageSize: '10'
      prev: '0'
- name: oidc_providers
  endpoint:
    path: /oidc/providers
    method: GET
- name: signed_url
  endpoint:
    path: /api/components/signed_url
    method: GET
    data_selector: url
- name: build_sbom
  endpoint:
    path: /api/components/build
    method: POST
    data_selector: response
    params:
      fileType: sbom
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: teams
    params: {}
- name: public_registry
  endpoint:
    path: /api/public_registries
    method: GET
    data_selector: registries
- name: private_registry
  endpoint:
    path: /api/private_registries
    method: GET
    data_selector: registries
- name: security_policy
  endpoint:
    path: /api/security/policies
    method: POST
    data_selector: policies
- name: CPEs
  endpoint:
    path: /v3.2/cpes
    method: GET
    data_selector: vulnerabilities
- name: create_quality_policy
  endpoint:
    path: /create-quality-policy
    method: POST
    data_selector: policy
- name: abandonware
  endpoint:
    path: /abandonware
    method: GET
    data_selector: abandonware
- name: empty_package
  endpoint:
    path: /empty-package
    method: GET
    data_selector: empty_packages
- name: native_code_detection
  endpoint:
    path: /native-code-detection
    method: GET
    data_selector: native_code
- name: packages
  endpoint:
    path: /api/packages
    method: GET
    data_selector: packages
    params: {}
- name: vulnerabilities
  endpoint:
    path: /api/v1/vulnerabilities
    method: GET
    data_selector: vulnerabilities
- name: vulnerability
  endpoint:
    path: /vulnerabilities
    method: GET
    data_selector: vulnerabilities
- name: Release Group
  endpoint:
    path: /projects/release_groups
    method: POST
    data_selector: releaseGroup
    params: {}
- name: SBOM
  endpoint:
    path: /reports/sboms
    method: POST
    data_selector: sbom
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: revisions
  endpoint:
    path: /revisions
    method: GET
    data_selector: revisions
    params: {}
- name: dependencies
  endpoint:
    path: /revisions/{revision-locator}/dependencies
    method: GET
    data_selector: dependencies
    params: {}
- name: vulnerabilities
  endpoint:
    path: /vulns/by-locator
    method: POST
    data_selector: vulnerabilities
    params: {}
- name: issues
  endpoint:
    path: /api/v2/issues
    method: GET
    data_selector: issues
- name: categories
  endpoint:
    path: /api/v2/issues/categories
    method: GET
    data_selector: issues
- name: statuses
  endpoint:
    path: /api/v2/issues/statuses
    method: GET
    data_selector: issues
- name: issues
  endpoint:
    path: /issues
    method: GET
    data_selector: records
    params:
      category: vulnerability
      scope[type]: global
      csv: 'true'
- name: issues
  endpoint:
    path: /api/issues
    method: GET
- name: issues_list_minimal
  endpoint:
    path: /api/issues/list-minimal
    method: GET
- name: revisions_issues
  endpoint:
    path: /api/revisions/:locator/revisionScan/:revisionScanId/issues
    method: GET
- name: issue_by_id
  endpoint:
    path: /api/issues/:id
    method: GET
- name: count_issues
  endpoint:
    path: /api/count/issues
    method: GET
- name: status_counts
  endpoint:
    path: /api/issues/status-counts
    method: GET
- name: organizations_security_teams
  endpoint:
    path: api/organizations/issues/security/teams
    method: GET
- name: organizations_security_release_groups
  endpoint:
    path: api/organizations/issues/security/release_groups
    method: GET
- name: export_bundle
  endpoint:
    path: /api/issues/export-bundle
    method: PUT
- name: ignore_issue
  endpoint:
    path: /api/issues/:id/ignore
    method: PUT
- name: unlink_issue
  endpoint:
    path: /api/issues/:id/unlink
    method: PUT
- name: global_csv
  endpoint:
    path: /api/issues/csv/global
    method: POST
- name: issues
  endpoint:
    path: /issues
    method: PUT
    data_selector: jira
    params:
      category: licensing
      scope[type]: global
      ids[0]: <first-id>
      ids[1]: <additional-ids>
- name: plain_text_report
  endpoint:
    path: /api/revisions/{revision_id}/attribution/email?format=TXT
    method: GET
    params: {}
- name: html_report
  endpoint:
    path: /api/revisions/{revision_id}/attribution/download?download=true&format=HTML
    method: GET
    params: {}
- name: markdown_report
  endpoint:
    path: /api/revisions/{revision_id}/attribution/download?download=true&format=MD
    method: GET
    params: {}
- name: pdf_report
  endpoint:
    path: /api/revisions/{revision_id}/attribution/email?format=PDF
    method: GET
    params: {}
- name: csv_report
  endpoint:
    path: /api/revisions/{revision_id}/attribution/download?download=true&format=CSV
    method: GET
    params: {}
- name: plain_text_report
  endpoint:
    path: /revisions/{revision_id}/attribution/email
    method: GET
    data_selector: report
    params:
      format: TXT
      dependencyInfoOptions[0]: Library
      dependencyInfoOptions[1]: License
      dependencyInfoOptions[2]: CustomTextLicense
      dependencyInfoOptions[3]: OtherLicenses
      dependencyInfoOptions[4]: Authors
      dependencyInfoOptions[5]: Description
      dependencyInfoOptions[6]: FullTextLicense
      dependencyInfoOptions[7]: Source
      dependencyInfoOptions[8]: ProjectUrl
      dependencyInfoOptions[9]: PackageDownloadUrl
      dependencyInfoOptions[10]: DependencyPaths
      dependencyInfoOptions[11]: IssueNotes
      includeProjectLicense: 'true'
      includeLicenseScan: 'true'
      includeDependencySummary: 'true'
      includeDirectDependencies: 'true'
      includeDeepDependencies: 'true'
      includeLicenseList: 'true'
      includeFileMatches: 'true'
      includeLicenseHeaders: 'true'
      includeCopyrightList: 'true'
- name: markdown_report
  endpoint:
    path: /revisions/{revision_id}/attribution/download
    method: GET
    data_selector: report
    params:
      download: 'true'
      format: MD
      dependencyInfoOptions[0]: Library
      dependencyInfoOptions[1]: License
      dependencyInfoOptions[2]: CustomTextLicense
      dependencyInfoOptions[3]: OtherLicenses
      dependencyInfoOptions[4]: Authors
      dependencyInfoOptions[5]: Description
      dependencyInfoOptions[6]: FullTextLicense
      dependencyInfoOptions[7]: Source
      dependencyInfoOptions[8]: ProjectUrl
      dependencyInfoOptions[9]: PackageDownloadUrl
      dependencyInfoOptions[10]: DependencyPaths
      dependencyInfoOptions[11]: IssueNotes
      includeProjectLicense: 'true'
      includeLicenseScan: 'true'
      includeDependencySummary: 'true'
      includeDirectDependencies: 'true'
      includeDeepDependencies: 'true'
      includeLicenseList: 'true'
      includeCopyrightList: 'true'
- name: release_groups
  endpoint:
    path: /modifying-release-groups
    method: GET
    data_selector: records
    params: {}
- name: project_group
  endpoint:
    path: /project_group
    method: POST
    data_selector: ''
    params: {}
- name: update_project_group
  endpoint:
    path: /project_group/<project-group-id>/release/<release-group-id>
    method: PUT
    data_selector: ''
    params: {}
- name: latest_revision
  endpoint:
    path: /api/projects/<encoded-project-locator>
    method: GET
    params:
      ref_type: branch
- name: release_group
  endpoint:
    path: /release-groups
    method: GET
    data_selector: release_groups
    params: {}
- name: project
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
notes:
- New to FOSSA? Sign up for an account on our website or request a demo.
- This endpoint is deprecated. Please use the paginated /project_group/{groupId}/releases
  endpoint instead.
- Only SBOM imports are supported for non-premium accounts.
- Open source is a critical part of your software.
- FOSSA helps you manage your open source components.
- FOSSA will never write to your repositories for any reason.
- 'If you encounter: Execution of scripts is disabled on this system.'
- Ensure the CLI is located in a folder that's part of the system PATH.
- The signed URL is only valid for 5 minutes.
- This is a FOSSA Enterprise feature.
- FOSSA provides a proxy agent called the Broker – providing a bridge between FOSSA
  and VCS providers behind a firewall.
- If you used the CLI, you may have ran into this SSL cert issue, looked into our
  documentation and tried out some of the suggestions.
- These errors are usually related to TLS issues or the host being unreachable.
- If your organization is on SaaS, is my environment able to access app.fossa.com?
- If you're working at a company in which your IT team provisions particular cert
  chains, it may be possible the cert chain cannot be used when uploading a scan to
  FOSSA via the CLI.
- FOSSA Release Groups are used to bundle projects together, treating them as a single
  unit within FOSSA.
- Some objects like Contact may return nulls in deeply nested fields
- '''flutter pub get'' should be run before Fossa analyze to ensure all dependencies
  are resolved.'
- Requires CocoaPods >= 1.0
- Private Artifact Registries are only supported in FOSSA on-prem.
- FOSSA can fetch and resolve dependencies from private registries like Artifactory,
  Nexus, or any custom public Maven registry.
- FOSSA does not currently inspect project.lock.json files or support files, references,
  or frameworkAssemblies specified in the .nuspec file.
- .nuspec files must be in utf8 encoding.
- FOSSA currently ignores Frameworks specified in the project.json/packages.config
  file.
- FOSSA currently ignores the NuGet.config file.
- 'Repository Scanning of Composer projects have the following limitations: We do
  not elect versions based on the `composer.lock` file.'
- We currently ignore stability tags (`@dev, @stable`, etc.).
- We ignore php and php extensions when inside the `require` key of `composer.json`.
- We only look at `require` for dependencies. Dev dependencies will be ignored (`require-dev`,
  `repositories`, `replace` will be ignored).
- Non-standard version constraints (i.e. `dev-`, or `.x-dev`) currently have stability
  issues.
- FOSSA currently assumes that Python codebases using Repository Scanning are following
  proper conventions.
- Optional dependencies are currently handled like Java optional dependencies, when
  they should be enabled/disabled based on features
- FOSSA does not currently understand default/missing features
- FOSSA does not handle path dependencies that point above your repo root
- FOSSA supports archives, vendorized dependencies and binaries through a variety
  of methods.
- Archive formats are a special kind of dependency in FOSSA. They are not included
  through a standard build tool or process, but instead represent instances where
  developers have packaged up pieces of (potentially-modified) 3rd-party code and
  checked them into your source tree.
- FOSSA provides some limited support for binaries, code snippets and custom build
  systems through a variety of methods.
- C/C++ support requires version 3.1.3 or greater of fossa-cli.
- Ensure Buildroot is properly set up and built before running the command.
- Buildroot packages may not always specify a license. Add it manually if known.
- Configuring this feature on large projects can lead to a lot of false positives
  upon scanning for issues.
- Auto-ignore rules persist to their selected scope for current and future projects.
- The Global issue inbox will contain all auto-ignore rules across every scope (Global,
  Policy, Release group, Project)
- The Project/Release group issue inbox will contain only applicable Project/Release
  group auto-ignore rules and all global auto-ignore rules
- On the free version, FOSSA will only provide limited versions of all compliance
  reports.
- FOSSA will always provide the full detected dependency graph even when unknown license
  dependencies are detected.
- Ignore Notice Files if you do not want to reproduce the Notice file(s) text or copyrights
  within your Attribution reports.
- You can manually resolve Unknown or Failed Dependencies by providing an archive
  for FOSSA to scan.
- Editing a dependency applies to every project in your organization and every revision
  of that project.
- The first time you run a report, FOSSA analyzes every dependency.
- On your first scan, it may surprise you how many 3rd-party components you're actually
  using.
- Uses OAuth2 for authentication.
- Auto-ignore is scoped to the combination of Package(s), Project(s), CVE
- By design, auto-ignore rules persist to their selected scope for current and future
  projects.
- Function-level Reachability is in beta, and requires to be enabled for your organization.
- Reachability is only supported for JAVA projects built with either Gradle or Maven.
- FOSSA CLI must find built jar files for analysis.
- CPEs provided within an SBOM may identify vulnerabilities but are unverified.
- Providing a valid PURL is recommended for accuracy.
- Every remediation guidance report will include a json output of the full report
  including vulnerability details not included in the PDF & HTML outputs.
- Code quality policies are used to enforce restrictions on project dependencies.
- Outdated packages carry increased security risk and prevent your team from utilizing
  newer features.
- Please see [Configuring Quality Policies](/docs/code-quality-policies) for detailed
  breakdown of all quality issue types
- Vulnerabilities are not determined by Security Policy.
- 'FOSSA CLI supports four different formats: JSON, SPDX, markdown, and text.'
- Uses OAuth2 with refresh token — requires setup of connected app in api
- In response to EO 14028 many organizations require software producers to generate
  Software Bill of Materials (SBOMs).
- Customizing a Software Bill of Materials
- Currently all direct and transitive dependencies are included in all SBOM formats
- SBOM Portal is in early access preview. Expect continuous polish as we improve the
  experience on path to General Availability.
- Your API keys carry the same privileges as your FOSSA User, so be sure to keep them
  secure, and do not share them publicly.
- Request parameter shapes shown in JSON for readability, actually used as URL query
  parameters.
- In addition to the starter docs you'll find in our API Reference page, here is a
  list of real world usages of our APIs.
- Description can have up to 32767 characters. The description is written in markdown.
- Specifying the policies and teams are optional.
- The endpoint retrieves the latest revision for each branch of a project.
- Regular token rotation is critical for maintaining security.
- The recommended rotation interval is between 80 to 180 days.
- For support in-app, you can also reach us through our support website.
errors:
- 400 Bad Request
- 403 Forbidden
- 400 - Bad Request Parameter/Body
- 403 - No team Access
- 500 - Server Error
- '200: OK'
- '400: Bad Request Parameter/Body'
- '403: No team Access'
- '500: Server Error'
- '400: Bad Request'
- '403: Forbidden'
- '400 Bad Request: Unique identifier associated with the error'
- '403 Forbidden: Unique identifier associated with the error'
- 406 Not Acceptable
- 406 - Invalid Accept
- '400 Bad Request: message associated with this error'
- '404 NotFound: message associated with this error'
- 404 - No Issue Found
- 400 - User has no email
- 400 - User doesn't have permission for this issue
- 403 - Organization is not premium
- '403 Forbidden: message associated with this error'
- 400 - Non Licensing Policy ID Filtering
- 403 - No permission
- 400 - No exceptions found for deletion
- 400 - Improper user permissions
- 400 - Non-numeric id
- 400 - No policy ID provided for policy exception
- 400 - No project ID provided for project exception
- 400 - No Release Group ID provided for Release Group exception
- 400 - No Project ID provided for Project + Release Group exception
- 403 - Exception does not belong to Organization
- 403 - User does not have permission to edit policies
- 403 - User does not have permission to resolve issues in project
- 403 - User does not have permission to resolve issues in release group
- '403: Authentication failed or not a premium account.'
- '400: Invalid or missing ID.'
- 400 Invalid or missing ID.
- 403 Authentication failed or not a premium account.
- 400 - User Not Associated With Org
- 403 - Invalid Permissions
- '400 Bad Request: Check request parameters for validity'
- 401 Unauthenticated Request
- '400 Bad Request: Handle invalid parameters'
- '401 Unauthorized: Check authentication'
- '404 Not Found: Verify the endpoint or resource'
- 400 - Non array refs query parameter
- 401 - Bad API Token
- 404 - No Revisions found
- '401 Unauthenticated Request: Message describing the error'
- 400 - Bad request
- 401 - Invalid Permissions
- 404 - Project Not Found
- '401 Unauthorized: message associated with this error'
- '404 Not Found: message associated with this error'
- '428 Not Found: message associated with this error'
- 428 - Invalid revisionId provided
- '404: Project not found'
- '200 OK: Response body object'
- 200403 - Forbidden
- 404 - Not Found
- '401 Unauthorized: Bad API Token'
- '404 Not Found: No Revisions found'
- 500 Server Error
- '400 BadRequest: Check request parameters for validity'
- '400'
- '403'
- 302 Found - a redirect to the original SBOM document
- 403 - Forbidden
- '400 BadRequest: Unique identifier associated with the error'
- 400 - InvalidSBOMProject
- '404 NotFound: Resource not found'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Unique identifier associated with the error'
- '403 Forbidden: Check permissions for the requested resource'
- 404 - Dependency with locator not found or no permission
- '401 Unauthenticated Request: message associated with this error'
- '404 Not Found: Resource not found'
- '401 Unauthorized: Invalid credentials or token'
- '404 Not Found: The requested resource could not be found'
- '401 Unauthorized: Authentication failed'
- '409 Conflict: message associated with this error'
- 400 Bad request
- 500 Internal server error
- '500: Internal Server Error'
- '403 Forbidden: Access is denied due to insufficient permissions'
- '403 Forbidden: Access denied to the requested resource'
- '403 Forbidden: Access denied due to permissions'
- 400 - Maximum release groups reached
- 400 - Missing required field
- 403 - Release groups are not enabled for your organization, or you do not have permission
  to create them
- 404 Not found
- '403 Forbidden: Message describing the error'
- '404 Not found: message associated with this error'
- '400 Bad request: message associated with this error'
- 404 - Release Group Not Found
- 404 - Release Group Release Not Found
- 200 The release group could not be found
- 403 The requesting user is not allowed to edit this release group
- 400 - No title
- 400 - Invalid projects
- 400 - No branch on project
- 400 - No projectId on project
- 400 - No revisionId on project
- '404'
- 404 The release group could not be found
- '403: The requesting user is not allowed to view these licenses'
- '403: The requesting user is not allowed to view these license obligations'
- 401 Unauthorized
- 401 - Unauthorized
- 403 - Feature flag not enabled
- '404 Not Found: Unique identifier associated with the error'
- 201400 - Invalid request body
- 400 - Invalid revision type
- 400 - Invalid team
- 403 - Not authorized
- 404 - Revision not found
- 404 - Shared organization not found
- 404 - No Organization Found
- '403 Forbidden: Check permissions'
- 422 - Invalid Settings Payload
- '403 Forbidden: Verify permissions'
- '403 Forbidden: Access denied'
- '404 NotFound: Verify the resource ID'
- '403 Forbidden: Check permissions for the requested operation'
- 403 - No Organization Found
- 404 NotFound
- '403 Forbidden: Access is denied'
- '403 Forbidden: Check permissions or access rights'
- '404 NotFound: Message describing the error'
- '404 NotFound: Unique identifier associated with the error'
- '400 Bad Request: Invalid request parameters'
- '401 Unauthorized: Check authentication credentials'
- 400 - Failed Delete
- 400 - Bad Request (Malformed payload)
- 404 - Not found
- 400 Malformed Payload
- 200 Build list
- 400 - invalid query parameters
- '403 Forbidden: No permission to view'
- '500 Server Error: message associated with this error'
- 403 - No permission to view
- 403 - Org not permissioned
- 201400 - Invalid dates
- 403 - Subscription required
- '400 Bad Request: Sent when an enterprise organization is missing an contract data.'
- 400 - Organization contract data is missing
- 403 - Requesting for another org
- 400 - No package spec
- 400 - No revision
- '403: No permission'
- '200 OK: Response body array of objects'
- 400 - InvalidTeamId
- 404 - NotFound
- '400 Bad Request: Check the request parameters'
- '404 Not Found: Verify the team ID'
- 400 - InvalidPage
- 400 - InvalidPageSize
- 404 Not Found
- 403 - ForbiddenTeam
- 403 - ForbiddenEdit
- '400 Bad Request: Check the request parameters for correctness'
- '403 Forbidden: Ensure you have the right permissions'
- '404 Not Found: Verify the team ID is valid'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify authentication'
- 400 - Missing path parameters
- '400 Bad Request: Ensure required parameters are included'
- '404 Not Found: Verify the resource path or ID'
- 404 - Associated scan not found
- '400 Bad Request: Check query parameters for correctness'
- '401 Unauthorized: Ensure proper authentication'
- '404 Not Found: Verify endpoint and resource availability'
- 404 - Scan not found
- 404 - Release Group not found
- 404 - Release not found
- 404 - No associated scans found
- '404 Not Found: Verify resource exists'
- '401 Unauthorized: Recheck authentication'
- '404 Not Found: Verify the resource identifier'
- '403 Forbidden: No permission'
- '404 Snippet not found: SnippetNotFound'
- 404 - SnippetMatchDetailsNotFound
- '401 Unauthorized: Authentication required'
- '404 OIDC Provider not found: Unique identifier associated with the error'
- '200'
- 404 - OIDC Trust Relationship not found
- '404 OIDC Trust Relationship not found: message associated with this error'
- '400 Bad Request: ID of the Jira site that was requested to be deleted is required'
- '401 Unauthorized: Recheck your authentication credentials'
- '500 Server Error: Unique identifier associated with the error'
- '400 Bad Request: Check query parameters.'
- '403 Forbidden: Access denied.'
- '400 Bad Request: Invalid parameters'
- '302: Redirects to the GitHub App installation page'
- '401 Unauthorized: Check if authentication is valid'
- '404 Not Found: Verify the resource exists'
- FOSSA does not upload source code for reachability. It uploads call graph information
  for analysis.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API token'
- '4xx: Client error'
- '5xx: Server error'
- '500: Could mean that you have duped projects in the request payload.'
auth_info:
  mentioned_objects:
  - deploy key
  - npm
  - OauthToken
  - AuthProvider
client:
  base_url: https://app.fossa.com/api
  headers:
    Accept: application/json
source_metadata: null
