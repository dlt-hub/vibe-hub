resources:
- name: node_management
  endpoint:
    path: /vprotect/node
    method: GET
    data_selector: nodes
- name: backup_destination_management
  endpoint:
    path: /vprotect/bd
    method: GET
    data_selector: backup_destinations
- name: node_configuration_management
  endpoint:
    path: /vprotect/config
    method: GET
    data_selector: node_configs
- name: hypervisor_manager
  endpoint:
    path: /vprotect/hvm
    method: GET
    data_selector: records
- name: hypervisors
  endpoint:
    path: /vprotect/hv
    method: GET
    data_selector: records
- name: hypervisor_clusters
  endpoint:
    path: /vprotect/hc
    method: GET
    data_selector: records
- name: hypervisor_storage
  endpoint:
    path: /vprotect/hs
    method: GET
    data_selector: records
- name: virtual_machine_management
  endpoint:
    path: /vprotect/vm
    method: GET
    data_selector: VMs
- name: storage_backup_management
  endpoint:
    path: /vprotect/st
    method: GET
    data_selector: Storages
- name: storage_pool_management
  endpoint:
    path: /vprotect/stpool
    method: GET
    data_selector: StoragePools
- name: storage_provider_management
  endpoint:
    path: /vprotect/stprovider
    method: GET
    data_selector: StorageProviders
- name: recplan
  endpoint:
    path: /recplan
    method: GET
    data_selector: policies
    params: {}
- name: vmpolicy
  endpoint:
    path: /vmpolicy
    method: GET
    data_selector: policies
    params: {}
- name: vm-snappolicy
  endpoint:
    path: /vm-snappolicy
    method: GET
    data_selector: policies
    params: {}
- name: storage-snappolicy
  endpoint:
    path: /storage-snappolicy
    method: GET
    data_selector: policies
    params: {}
- name: recovery_policy
  endpoint:
    path: /recplan
    method: GET
    data_selector: GUID
    params: {}
- name: schedule_management
  endpoint:
    path: /sched
    method: GET
    data_selector: GUID
    params: {}
- name: vm_backup_restore
  endpoint:
    path: /brvm
    method: GET
    data_selector: GUID
    params: {}
- name: storage_backup_restore
  endpoint:
    path: /brst
    method: GET
    data_selector: GUID
    params: {}
- name: mounted_backup_management
  endpoint:
    path: /mnt
    method: GET
    data_selector: tasks
    params: {}
- name: task_management
  endpoint:
    path: /task
    method: GET
    data_selector: tasks
    params: {}
- name: project_management
  endpoint:
    path: /project
    method: GET
    data_selector: projects
    params: {}
- name: user_management
  endpoint:
    path: /user
    method: GET
    data_selector: users
    params: {}
- name: quota_management
  endpoint:
    path: /quota
    method: GET
    data_selector: quotas
    params: {}
- name: recplan
  endpoint:
    path: /recplan
    method: GET
    data_selector: policies
- name: rbac
  endpoint:
    path: /rbac
    method: GET
    data_selector: contexts_privileges
- name: brapp
  endpoint:
    path: /brapp
    method: GET
    data_selector: backup_restore
- name: applications
  endpoint:
    path: /vprotect/app
    method: GET
    data_selector: applications
    params: {}
- name: application_backup_policies
  endpoint:
    path: /vprotect/apppolicy
    method: GET
    data_selector: backup_policies
    params: {}
- name: restore_jobs
  endpoint:
    path: /vprotect/restorejob
    method: GET
    data_selector: restore_jobs
    params: {}
- name: recplan
  endpoint:
    path: /recplan
    method: GET
    data_selector: rules
    params: {}
- name: virtual_machines
  endpoint:
    path: /api/virtual_machines
    method: GET
    data_selector: virtual_machines
    params: {}
- name: containers
  endpoint:
    path: /api/containers
    method: GET
    data_selector: containers
    params: {}
- name: cloud
  endpoint:
    path: /api/cloud
    method: GET
    data_selector: cloud
    params: {}
- name: storage
  endpoint:
    path: /api/storage
    method: GET
    data_selector: storage
    params: {}
- name: applications
  endpoint:
    path: /api/applications
    method: GET
    data_selector: applications
    params: {}
- name: full_backup
  endpoint:
    path: /backup/full
    method: GET
    data_selector: data
- name: incremental_backup
  endpoint:
    path: /backup/incremental
    method: GET
    data_selector: data
- name: synthetic_full
  endpoint:
    path: /backup/synthetic_full
    method: GET
    data_selector: data
- name: incremental_forever
  endpoint:
    path: /backup/incremental_forever
    method: GET
    data_selector: data
- name: VMware vCenter/ESXi
  endpoint:
    path: /
    method: GET
- name: Nutanix AHV
  endpoint:
    path: /ovirt-engine/api
    method: GET
- name: OpenStack
  endpoint:
    path: /ovirt-engine/api
    method: GET
- name: Disk attachment
  endpoint:
    path: /ovirt-engine/api
    method: GET
- name: Disk Image Transfer
  endpoint:
    path: /ovirt-engine/api
    method: GET
- name: SSH Transfer
  endpoint:
    path: /ovirt-engine/api
    method: GET
- name: Change-Block Tracking
  endpoint:
    path: /ovirt-engine/api
    method: GET
- name: backup_destination
  endpoint:
    path: /api/backup/destination
    method: POST
    data_selector: results
    params: {}
- name: server
  endpoint:
    path: /server
    method: GET
    data_selector: records
- name: nodes
  endpoint:
    path: /nodes
    method: GET
    data_selector: records
- name: Red Hat Enterprise Linux 8
  endpoint:
    path: /etc/yum.repos.d/vProtect.repo
    method: GET
    data_selector: repository
    params: {}
- name: Red Hat Enterprise Linux 9
  endpoint:
    path: /etc/yum.repos.d/vProtect.repo
    method: GET
    data_selector: repository
    params: {}
- name: SUSE Linux Enterprise Server 14
  endpoint:
    path: /etc/yum.repos.d/vProtect.repo
    method: GET
    data_selector: repository
    params: {}
- name: repository_file_el8
  endpoint:
    path: /etc/yum.repos.d/vProtect.repo
    method: CREATE
    data_selector: repository_file
    params: {}
- name: repository_file_el9
  endpoint:
    path: /etc/yum.repos.d/vProtect.repo
    method: CREATE
    data_selector: repository_file
    params: {}
- name: repository_file_suse15
  endpoint:
    path: /etc/yum.repos.d/vProtect.repo
    method: CREATE
    data_selector: repository_file
    params: {}
- name: repository_redhat_el8
  endpoint:
    path: /el8/
    method: GET
    data_selector: baseurl
    params: {}
- name: repository_redhat_el9
  endpoint:
    path: /el9/
    method: GET
    data_selector: baseurl
    params: {}
- name: repository_suse
  endpoint:
    path: /suse15/
    method: GET
    data_selector: baseurl
    params: {}
- name: node_registration
  endpoint:
    path: /api
    method: POST
    data_selector: response
    params:
      node_name: <node name>
      admin_user: <admin user>
      password: <user password>
- name: backup_destination
  endpoint:
    path: /deployment/backup-destinations
    method: POST
    data_selector: data
- name: sla
  endpoint:
    path: /deployment/ sla
    method: POST
    data_selector: data
- name: policy
  endpoint:
    path: /deployment/policy
    method: POST
    data_selector: data
- name: schedule
  endpoint:
    path: /deployment/schedule
    method: POST
    data_selector: data
- name: internal_db_backup
  endpoint:
    path: /deployment/internal_db_backup
    method: POST
    data_selector: data
- name: File System
  endpoint:
    path: /deployment/backup-destinations/filesystem
    method: GET
    data_selector: filesystem_options
- name: Synthetic File System
  endpoint:
    path: /deployment/backup-destinations/filesystem/synthetic-file-system
    method: GET
    data_selector: synthetic_filesystem_options
- name: isoLayer
  endpoint:
    path: /deployment/backup-destinations/filesystem/isolayer
    method: GET
    data_selector: isolayer_options
- name: Catalogic Software vStor
  endpoint:
    path: /deployment/backup-destinations/filesystem/catalogic-software-vstor
    method: GET
    data_selector: vstor_options
- name: Dell EMC Data Domain
  endpoint:
    path: /deployment/backup-destinations/deduplication-appliances/dell-emc-data-domain
    method: GET
- name: Huawei OceanProtect
  endpoint:
    path: /deployment/backup-destinations/deduplication-appliances/huawei-oceanprotect
    method: GET
- name: HPE StoreOnce
  endpoint:
    path: /deployment/backup-destinations/deduplication-appliances/hpe-storeonce
    method: GET
- name: Exagrid
  endpoint:
    path: /deployment/backup-destinations/deduplication-appliances/exagrid
    method: GET
- name: Neverfail HybriStor
  endpoint:
    path: /deployment/backup-destinations/deduplication-appliances/neverfail-hybristor
    method: GET
- name: Alibaba Cloud OSS
  endpoint:
    path: /deployment/backup-destinations/object-storage/alibaba-cloud
    method: GET
- name: AWS S3 or S3-compatible
  endpoint:
    path: /deployment/backup-destinations/object-storage/aws-s3-or-s3-compatible
    method: GET
- name: Ceph Rados Gateway
  endpoint:
    path: /deployment/backup-destinations/object-storage/ceph-rados-gateway
    method: GET
- name: Cloudian S3
  endpoint:
    path: /deployment/backup-destinations/object-storage/cloudian
    method: GET
- name: Wasabi
  endpoint:
    path: /deployment/backup-destinations/object-storage/wasabi
    method: GET
- name: Google Cloud Storage
  endpoint:
    path: /deployment/backup-destinations/object-storage/google-cloud-storage
    method: GET
- name: IBM Cloud Object Storage
  endpoint:
    path: /deployment/backup-destinations/object-storage/ibm-cloud-object-storage
    method: GET
- name: Microsoft Azure Blob Storage
  endpoint:
    path: /deployment/backup-destinations/object-storage/microsoft-azure-blob-storage
    method: GET
- name: Nutanix Objects
  endpoint:
    path: /deployment/backup-destinations/object-storage/nutanix-objects
    method: GET
- name: Oracle Cloud Infrastructure Object Storage
  endpoint:
    path: /deployment/backup-destinations/object-storage/oracle-cloud-infrastructure-object-storage
    method: GET
- name: Scality RING
  endpoint:
    path: /deployment/backup-destinations/object-storage/scality-ring
    method: GET
- name: Dell EMC Avamar
  endpoint:
    path: /deployment/backup-destinations/enterprise-backup-providers/dell-emc-avamar
    method: GET
- name: Dell EMC Networker
  endpoint:
    path: /deployment/backup-destinations/enterprise-backup-providers/dell-emc-networker
    method: GET
- name: IBM Spectrum Protect
  endpoint:
    path: /deployment/backup-destinations/enterprise-backup-providers/ibm-spectrum-protect
    method: GET
- name: 2 Node Cluster
  endpoint:
    path: /deployment/high-availability/2-node-cluster
    method: GET
    data_selector: records
    params: {}
- name: Failover_IP
  endpoint:
    path: /resource/create
    method: POST
    data_selector: result
    params:
      ip: 10.40.1.100
      cidr_netmask: '22'
      op: monitor
      interval: 30s
- name: ping
  endpoint:
    path: /resource/create
    method: POST
    data_selector: result
    params:
      dampen: 5s
      multiplier: '1000'
      host_list: 10.40.0.1
      clone: true
- name: vProtect-node
  endpoint:
    path: /resource/create
    method: POST
    data_selector: result
    params:
      type: systemd:vprotect-node
      op: monitor
      timeout: 300s
      on-fail: stop
      group: vProtect-group
- name: vProtect-server
  endpoint:
    path: /resource/create
    method: POST
    data_selector: result
    params:
      type: service:vprotect-server
      op: monitor
      on-fail: stop
      timeout: 300s
- name: replicate
  endpoint:
    path: /resource/create/replicate
    method: POST
- name: vdo_resource
  endpoint:
    path: /resource/create/vdo_resource
    method: POST
    params:
      volume: vdo_data
- name: fs_resource
  endpoint:
    path: /resource/create/fs_resource
    method: POST
    params:
      device: /dev/mapper/vdo_data
      directory: /vprotect_data
      fstype: xfs
- name: vprotect_server
  endpoint:
    path: /vprotect-server
    method: POST
- name: vprotect_node
  endpoint:
    path: /vprotect-node
    method: POST
- name: vprotect_env
  endpoint:
    path: /opt/vprotect/vprotect.env
    method: EDIT
    data_selector: proxy configuration
    params: {}
- name: backup
  endpoint:
    path: /api/backup
    method: POST
    data_selector: data
    params: {}
- name: restore
  endpoint:
    path: /api/restore
    method: POST
    data_selector: data
    params: {}
- name: virtual_machines
  endpoint:
    path: /protecting-virtual-machines
    method: GET
    data_selector: virtual_machines
    params: {}
- name: applications
  endpoint:
    path: /protecting-applications/applications
    method: GET
    data_selector: applications
    params: {}
- name: storage_providers
  endpoint:
    path: /protecting-storage-providers/storage-providers
    method: GET
    data_selector: storage_providers
    params: {}
- name: Hyper-V Agent
  endpoint:
    path: /hyperv/agent
    method: GET
    data_selector: records
    params: {}
- name: Backup and Recovery
  endpoint:
    path: /backup/recovery
    method: GET
    data_selector: records
    params: {}
- name: vmware_backup
  endpoint:
    path: /api/vmware/backup
    method: POST
    data_selector: backup_results
- name: vmware_restore
  endpoint:
    path: /api/vmware/restore
    method: POST
    data_selector: restore_results
- name: backup_location
  endpoint:
    path: /VirtualEnvironments/Instances
    method: GET
    data_selector: backup_instances
- name: restore_virtual_machine
  endpoint:
    path: /Restore/Instant
    method: POST
    data_selector: restored_vm_details
- name: Samba Configuration
  endpoint:
    path: /etc/samba/smb.conf
    method: GET
    data_selector: global
    params: {}
- name: Proxy VM
  endpoint:
    path: /protecting-virtual-machines/virtual-machines/nutanix-acropolis-ahv
    method: GET
    data_selector: snapshot
    params: {}
- name: samba_configuration
  endpoint:
    path: /etc/samba/smb.conf
    method: GET
    data_selector: global
    params: {}
- name: krb5_configuration
  endpoint:
    path: /etc/krb5.conf
    method: GET
    data_selector: libdefaults
    params: {}
- name: OpenShift Hypervisor Manager
  endpoint:
    path: /api
    method: POST
    data_selector: nodes
    params: {}
- name: Proxy VM
  endpoint:
    path: /protecting-virtual-machines/virtual-machines/nutanix-acropolis-ahv
    method: GET
    data_selector: snapshot
    params: {}
- name: OADP Operator
  endpoint:
    path: /operator
    method: POST
    data_selector: metadata
    params: {}
- name: backup_storage
  endpoint:
    path: /vprotect_data
    method: NFS
    data_selector: export
    params: {}
- name: vma_extractor
  endpoint:
    path: /opt/vprotect/node/scripts/vma
    method: POST
    data_selector: setup
    params: {}
- name: disk_attachment
  endpoint:
    path: /cinder
    method: POST
    data_selector: snapshots
    params: {}
- name: nova_volumes
  endpoint:
    path: /nova
    method: GET
    data_selector: volumes
    params: {}
- name: NAS Service
  endpoint:
    path: /nas/services
    method: POST
    data_selector: nas_service
    params: {}
- name: backup_strategy
  endpoint:
    path: /protecting-virtual-machines
    method: GET
    data_selector: backup_strategies
    params: {}
- name: export_storage
  endpoint:
    path: /vprotect_data
    method: NFS
    data_selector: export configuration
    params:
      anonuid: 993
      anongid: 990
- name: vma_extractor
  endpoint:
    path: /opt/vprotect/node/scripts/vma/setup_vma.sh
    method: POST
    data_selector: VMA extractor setup
    params: {}
- name: backup_strategies
  endpoint:
    path: /backup-strategies
    method: GET
    data_selector: strategies
    params: {}
- name: libvirt_strategy
  endpoint:
    path: /libvirt-strategy
    method: GET
    data_selector: libvirt
    params: {}
- name: proxy_vm
  endpoint:
    path: /api/v2/aws/ec2
    method: POST
    data_selector: snapshot
    params: {}
- name: containers
  endpoint:
    path: /protecting-virtual-machines/protecting-containers
    method: GET
    data_selector: data
    params: {}
- name: openshift_hypervisor_manager
  endpoint:
    path: /api/v1/namespaces/openshift-adp
    method: GET
    data_selector: metadata
- name: backup
  endpoint:
    path: /api/v2/aws/ec2
    method: POST
- name: Kubernetes
  endpoint:
    path: /protecting-virtual-machines/protecting-containers/kubernetes
    method: GET
- name: Red Hat OpenShift
  endpoint:
    path: /protecting-virtual-machines/protecting-containers/red-hat-openshift
    method: GET
- name: Proxmox VE
  endpoint:
    path: /protecting-virtual-machines/protecting-containers/proxmox-ve
    method: GET
- name: Application
  endpoint:
    path: /protecting-applications/applications
    method: GET
- name: Backup & Restore
  endpoint:
    path: /protecting-applications/backup-and-restore
    method: GET
- name: applications
  endpoint:
    path: /protecting-applications
    method: GET
    data_selector: applications
    params: {}
- name: main_concepts
  endpoint:
    path: /main-concepts
    method: GET
    data_selector: concepts
    params: {}
- name: openshift_hypervisor_manager
  endpoint:
    path: /api.your.cluster.local:6443
    method: POST
    data_selector: metadata
    params:
      username: login of user with cluster-admin role
      oadp_project_name: openshift-adp
      storage_class_name_for_oadp: default storage class (optional)
- name: backup_operations
  endpoint:
    path: /protecting-applications/applications/mssql
    method: POST
    data_selector: backup
- name: restore_operations
  endpoint:
    path: /protecting-applications/applications/mssql/restore
    method: POST
    data_selector: restore
- name: backup
  endpoint:
    path: /backup
    method: POST
    data_selector: backupResult
    params:
      incremental: 'true'
- name: restore
  endpoint:
    path: /restore
    method: POST
    data_selector: restoreResult
    params: {}
- name: Virtual Environment Backup
  endpoint:
    path: /protecting-virtual-machines/backup-and-restore
    method: GET
    data_selector: tasks console
- name: application_definition
  endpoint:
    path: /applications/instances
    method: POST
    data_selector: application
    params: {}
- name: application_definition
  endpoint:
    path: /applications/instances
    method: POST
    data_selector: application
    params: {}
- name: application
  endpoint:
    path: /applications/instances
    method: POST
    data_selector: application
    params: {}
- name: Git Repository
  endpoint:
    path: /applications/instances
    method: POST
    data_selector: application_definition
    params: {}
- name: MSSQL
  endpoint:
    path: /protecting-applications/applications/mssql
    method: GET
- name: MySQL/MariaDB
  endpoint:
    path: /protecting-applications/applications/mysql-mariadb
    method: GET
- name: PostgreSQL
  endpoint:
    path: /protecting-applications/applications/postgresql
    method: GET
- name: DB2
  endpoint:
    path: /protecting-applications/applications/db2
    method: GET
- name: Oracle
  endpoint:
    path: /protecting-applications/applications/oracle
    method: GET
- name: Relax and Recover - ReaR
  endpoint:
    path: /protecting-applications/applications/relax-and-recover
    method: GET
- name: Git
  endpoint:
    path: /protecting-applications/applications/git
    method: GET
- name: oVirt/RHV/OLVM
  endpoint:
    path: /protecting-applications/applications/ovirt-rhv-olvm
    method: GET
- name: Kubernetes/OpenShift etcd
  endpoint:
    path: /protecting-applications/applications/kubernetes-openshift-etcd
    method: GET
- name: application_instance
  endpoint:
    path: /applications/instances
    method: POST
    data_selector: application
    params: {}
- name: backup_restore_operations
  endpoint:
    path: /protecting-applications/applications/mssql
    method: GET
    data_selector: operations
    params: {}
- name: Kubernetes/OpenShift etcd backup
  endpoint:
    path: /applications/instances
    method: POST
    data_selector: application_definition
- name: Application Backup
  endpoint:
    path: /protecting-applications/backup-and-restore
    method: POST
    data_selector: tasks
    params: {}
- name: backup
  endpoint:
    path: /backup
    method: POST
    data_selector: records
    params: {}
- name: restore
  endpoint:
    path: /restore
    method: POST
    data_selector: records
    params: {}
- name: application_definition
  endpoint:
    path: /applications/instances
    method: POST
    data_selector: application
    params: {}
- name: Storage Providers
  endpoint:
    path: /protecting-storage-providers/storage-providers
    method: GET
- name: Backup & Restore
  endpoint:
    path: /protecting-storage-providers/backup-and-restore
    method: GET
- name: application
  endpoint:
    path: /applications/instances
    method: POST
    data_selector: application_definition
    params: {}
- name: application
  endpoint:
    path: /protecting-applications/applications/db2
    method: POST
    data_selector: application
    params: {}
- name: applications
  endpoint:
    path: /protecting-applications
    method: GET
    data_selector: applications
    params: {}
- name: applications
  endpoint:
    path: /applications/instances
    method: POST
    data_selector: application_definition
    params: {}
- name: application
  endpoint:
    path: /applications/instances
    method: POST
    data_selector: application
    params: {}
- name: Applications
  endpoint:
    path: /applications
    method: POST
    data_selector: application_definition
    params: {}
- name: Backup and Restore
  endpoint:
    path: /protecting-storage-providers/backup-and-restore
    method: GET
    data_selector: backup_process
- name: Storage Providers
  endpoint:
    path: /protecting-storage-providers/storage-providers
    method: GET
- name: Backup & Restore
  endpoint:
    path: /protecting-storage-providers/backup-and-restore
    method: GET
- name: ceph_configuration
  endpoint:
    path: /etc/ceph/ceph.conf
    method: GET
    data_selector: configuration
    params: {}
- name: virtual_environments
  endpoint:
    path: /administration/virtual-environments
    method: GET
    data_selector: instances
    params: {}
- name: infrastructure
  endpoint:
    path: /administration/virtual-environments/infrastructure
    method: GET
    data_selector: infrastructure
    params: {}
- name: backup_slas
  endpoint:
    path: /administration/virtual-environments/backup-slas
    method: GET
    data_selector: backup_slas
    params: {}
- name: snapshot_slas
  endpoint:
    path: /administration/virtual-environments/snapshot-slas
    method: GET
    data_selector: snapshot_slas
    params: {}
- name: recovery_plans
  endpoint:
    path: /administration/virtual-environments/recovery-plans
    method: GET
    data_selector: recovery_plans
    params: {}
- name: mounted_backups
  endpoint:
    path: /administration/virtual-environments/file-level-restore-mounted-backup
    method: GET
    data_selector: mounted_backups
    params: {}
- name: instances
  endpoint:
    path: /administration/virtual-environments/instances
    method: GET
    data_selector: vm_list
- name: hypervisor_manager
  endpoint:
    path: /administration/virtual-environments/infrastructure
    method: GET
    data_selector: hypervisor_managers
    params: {}
- name: hypervisor
  endpoint:
    path: /administration/virtual-environments/infrastructure
    method: GET
    data_selector: hypervisors
    params: {}
- name: backup_storage_provider
  endpoint:
    path: /protecting-storage-providers/backup-and-restore
    method: GET
- name: recovery_plans
  endpoint:
    path: /administration/virtual-environments/recovery-plans
    method: GET
    data_selector: recoveryPlans
    params: {}
- name: storage_providers
  endpoint:
    path: /api/storage_providers
    method: GET
    data_selector: providers
- name: Dashboard
  endpoint:
    path: /administration/dashboard
    method: GET
- name: Virtual Environments
  endpoint:
    path: /administration/virtual-environments
    method: GET
- name: Storage
  endpoint:
    path: /administration/storage
    method: GET
- name: Cloud
  endpoint:
    path: /administration/cloud
    method: GET
- name: Applications
  endpoint:
    path: /administration/applications
    method: GET
- name: Endpoints
  endpoint:
    path: /administration/endpoints
    method: GET
- name: Reporting
  endpoint:
    path: /administration/reporting
    method: GET
- name: Nodes
  endpoint:
    path: /administration/nodes
    method: GET
- name: Backup Destination
  endpoint:
    path: /administration/backup-destination
    method: GET
- name: Access Management
  endpoint:
    path: /administration/users
    method: GET
- name: Settings
  endpoint:
    path: /administration/settings
    method: GET
- name: storage_instances
  endpoint:
    path: /administration/storage-providers/instances
    method: GET
    data_selector: storage_instances
    params: {}
- name: instances
  endpoint:
    path: /administration/virtual-environments/instances
    method: GET
    data_selector: instances
    params: {}
- name: Backup SLAs
  endpoint:
    path: /administration/virtual-environments/backup-slas
    method: GET
    data_selector: policies
    params: {}
- name: hypervisor_manager
  endpoint:
    path: /hypervisor-manager
    method: POST
    data_selector: results
- name: hypervisor
  endpoint:
    path: /hypervisor
    method: POST
    data_selector: results
- name: inventory_synchronization
  endpoint:
    path: /inventory/synchronize
    method: GET
    data_selector: results
- name: snapshot_slas
  endpoint:
    path: /administration/storage-providers/snapshot-slas
    method: GET
    data_selector: snapshots
    params: {}
- name: instances
  endpoint:
    path: /administration/cloud/instances
    method: GET
    data_selector: entities
- name: snapshot_slas
  endpoint:
    path: /administration/virtual-environments/snapshot-slas
    method: GET
- name: recovery_plans
  endpoint:
    path: /administration/virtual-environments/recovery-plans
    method: GET
- name: backup_history
  endpoint:
    path: /api/v1/backup/history
    method: GET
    data_selector: records
- name: restore_history
  endpoint:
    path: /api/v1/restore/history
    method: GET
    data_selector: records
- name: storage_providers
  endpoint:
    path: /api/storage_providers
    method: GET
    data_selector: providers
- name: backup_jobs
  endpoint:
    path: /api/backup_jobs
    method: GET
    data_selector: jobs
- name: storage_instance
  endpoint:
    path: /administration/storage-providers/instances
    method: GET
- name: instances
  endpoint:
    path: /administration/virtual-environments/instances
    method: GET
    data_selector: applications
    params: {}
- name: backup_restore_statistics
  endpoint:
    path: /administration/applications/instances/backup-restore-statistics
    method: GET
    data_selector: statistics
    params: {}
- name: Backup SLAs
  endpoint:
    path: /administration/virtual-environments/backup-slas
    method: GET
    data_selector: schedules
    params: {}
- name: Command Execution Configuration
  endpoint:
    path: /administration/applications/execution-configurations
    method: POST
- name: snapshot_slas
  endpoint:
    path: /administration/storage-providers/snapshot-slas
    method: GET
- name: Backup SLAs
  endpoint:
    path: /administration/virtual-environments/backup-slas
    method: GET
    data_selector: policies
    params: {}
- name: Applications
  endpoint:
    path: /administration/applications
    method: GET
    data_selector: instances
    params: {}
- name: Reporting
  endpoint:
    path: /administration/reporting
    method: GET
    data_selector: activities
    params: {}
- name: instances
  endpoint:
    path: /administration/cloud/instances
    method: GET
    data_selector: entities
- name: backup_slas
  endpoint:
    path: /administration/cloud/backup-slas
    method: GET
    data_selector: policies
- name: Audit Log
  endpoint:
    path: /administration/reporting/audit-log
    method: GET
    data_selector: logs
    params: {}
- name: applications
  endpoint:
    path: /administration/applications
    method: GET
    data_selector: instances
    params: {}
- name: execution_configurations
  endpoint:
    path: /administration/applications/execution-configurations
    method: GET
    data_selector: execution_configurations
    params: {}
- name: backup_slas
  endpoint:
    path: /administration/applications/backup-slas
    method: GET
    data_selector: backup_slas
    params: {}
- name: instances
  endpoint:
    path: /administration/virtual-environments/instances
    method: GET
    data_selector: application_summary
    params: {}
- name: backup_restore_statistics
  endpoint:
    path: /administration/applications/instances/backup-restore-statistics
    method: GET
    data_selector: daily_activity
    params: {}
- name: Command Execution Configuration
  endpoint:
    path: /administration/applications/execution-configurations
    method: POST
    data_selector: executionConfig
    params: {}
- name: Inventory synchronization
  endpoint:
    params:
      timeout: Inventory synchronization timeout (start window length) [min]
- name: Backup
  endpoint:
    params:
      max_export_threads: Maximum number of export threads
      max_export_threads_per_source: Maximum export threads per source (HV or HVM)
      export_task_timeout: Export task timeout (start window length) [min]
      max_store_threads: Maximum number of store threads
      store_task_timeout: Store task timeout (start window length) [min]
      old_backups_removal_task_timeout: Old backups removal task timeout (start window
        length) [min]
- name: Restore
  endpoint:
    params:
      max_restore_threads: Maximum number of restore threads
      restore_task_timeout: Restore task timeout (start window length) [min]
      max_import_threads: Maximum number of import threads
      import_task_timeout: Import task timeout (start window length) [min]
- name: Snapshot Management
  endpoint:
    params:
      old_snapshot_removal_task_timeout: Old snapshot removal task timeout (start
        window length) [min]
      snapshot_reversion_task_timeout: Snapshot reversion task timeout (start window
        length) [min]
- name: File-Level Restore
  endpoint:
    params:
      mount_task_timeout: Mount task timeout (start window length) [min]
      unmount_task_timeout: Unmount task timeout (start window length) [min]
- name: Cloud Agent
  endpoint:
    params:
      host: Host
      user: User
      password: Password
- name: Backup SLAs
  endpoint:
    path: /administration/virtual-environments/backup-slas
    method: GET
    data_selector: policies
    params: {}
- name: Application Backup
  endpoint:
    path: /administration/applications/backup-slas
    method: GET
    data_selector: applications
    params: {}
- name: reporting_virtual_environments
  endpoint:
    path: /administration/reporting/virtual-environments
    method: GET
    data_selector: reporting_data
    params: {}
- name: os_credentials
  endpoint:
    path: /administration/users/os-credentials
    method: GET
    data_selector: credentials
    params: {}
- name: Audit Log
  endpoint:
    path: /administration/reporting/audit-log
    method: GET
- name: inventory_synchronization
  endpoint:
    path: /inventory/synchronization
    method: GET
    data_selector: timeout
    params: {}
- name: backup
  endpoint:
    path: /backup
    method: GET
    data_selector: threads
    params: {}
- name: restore
  endpoint:
    path: /restore
    method: GET
    data_selector: tasks
    params: {}
- name: snapshot_management
  endpoint:
    path: /snapshot_management
    method: GET
    data_selector: removal_tasks
    params: {}
- name: file_level_restore
  endpoint:
    path: /file_level_restore
    method: GET
    data_selector: mounts
    params: {}
- name: OS Credentials
  endpoint:
    path: /administration/users/os-credentials
    method: GET
    data_selector: credentials
    params: {}
- name: slack_integration
  endpoint:
    path: /api/slack/integration
    method: POST
    data_selector: notification
    params: {}
- name: push_notification
  endpoint:
    path: /api/push/notification
    method: POST
    data_selector: notification
    params: {}
- name: create_mailing_list
  endpoint:
    path: /administration/settings/mailing-lists
    method: POST
    data_selector: create_list
- name: mailing_list_usage
  endpoint:
    path: /administration/settings/mailing-lists
    method: PUT
    data_selector: update_policy
- name: backup
  endpoint:
    path: /vc-storage-inst-mg-list-backup
    method: GET
    data_selector: records
- name: list
  endpoint:
    path: /vc-storage-inst-mg-list
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /vc/access/user
    method: GET
    data_selector: user instances
- name: group
  endpoint:
    path: /vc/access/group
    method: GET
    data_selector: AppUser Group instances
- name: role
  endpoint:
    path: /vc/access/role
    method: GET
    data_selector: AppUser Role instances
- name: backup_policy_add_rule
  endpoint:
    path: /vc/app/backup/policy/addrule
    method: POST
- name: backup_policy_assign
  endpoint:
    path: /vc/app/backup/policy/assign
    method: POST
- name: backup_policy_create
  endpoint:
    path: /vc/app/backup/policy/create
    method: POST
- name: backup_policy_delete
  endpoint:
    path: /vc/app/backup/policy/delete
    method: DELETE
- name: backup_policy_details
  endpoint:
    path: /vc/app/backup/policy/details
    method: GET
- name: backup_policy_list
  endpoint:
    path: /vc/app/backup/policy/list
    method: GET
- name: backup_policy_list_rules
  endpoint:
    path: /vc/app/backup/policy/listrules
    method: GET
- name: backup_policy_remove_bd
  endpoint:
    path: /vc/app/backup/policy/removebd
    method: DELETE
- name: backup_policy_remove
  endpoint:
    path: /vc/app/backup/policy/remove
    method: DELETE
- name: backup_policy_unassign
  endpoint:
    path: /vc/app/backup/policy/unassign
    method: POST
- name: backup_policy_update
  endpoint:
    path: /vc/app/backup/policy/update
    method: PUT
- name: backup_schedule
  endpoint:
    path: /vc/app/backup/schedule
    method: POST
- name: backup_schedule_details
  endpoint:
    path: /vc/app/backup/schedule/details
    method: GET
- name: backup_schedule_list
  endpoint:
    path: /vc/app/backup/schedule/list
    method: GET
- name: backup_schedule_update
  endpoint:
    path: /vc/app/backup/schedule/update
    method: PUT
- name: app_config
  endpoint:
    path: /vc/app/config
    method: POST
- name: app_config_details
  endpoint:
    path: /vc/app/config/details
    method: GET
- name: app_config_list
  endpoint:
    path: /vc/app/config/list
    method: GET
- name: app_config_update
  endpoint:
    path: /vc/app/config/update
    method: PUT
- name: app_inst
  endpoint:
    path: /vc/app/inst
    method: GET
- name: file_details
  endpoint:
    path: /vc/app/inst/bar/file
    method: GET
    data_selector: details
    params:
      backup-guid: <guid>
- name: backup_full
  endpoint:
    path: /vc/app/inst/bar/full
    method: POST
    data_selector: backup
    params:
      policy-guid: <policyGuid>
      policy-name: <policyName>
      backup-rules: <backupRules>
- name: backup_full_with_priority
  endpoint:
    path: /vc/app/inst/bar/fullp
    method: POST
    data_selector: backup
    params:
      priority: <priority>
      backup-rules: <backupRules>
      policy-guid: <policyGuid>
      policy-name: <policyName>
- name: restore_import_backup
  endpoint:
    path: /vc/app/inst/bar/import
    method: POST
    data_selector: restore
    params:
      backup-guid: <guid>
      dst-app-guid: <dstAppGuid>
      path: <path>
- name: list_backups
  endpoint:
    path: /vc/app/inst/bar/list/backup
    method: GET
    data_selector: backups
    params: {}
- name: list_backup_files
  endpoint:
    path: /vc/app/inst/bar/list/file
    method: GET
    data_selector: files
    params:
      backup-guid: <guid>
- name: list_recovery_plan
  endpoint:
    path: /vc/app/inst/bar/list
    method: GET
    data_selector: recovery_plans
    params: {}
- name: Notification Rules
  endpoint:
    path: /administration/settings/notification-rules
    method: GET
- name: notification_rule
  endpoint:
    path: /administration/settings/notification_rules
    method: POST
    data_selector: notifications
    params: {}
- name: push_notification
  endpoint:
    path: /administration/settings/notification_rules/push_configuration
    method: POST
    data_selector: push_notifications
    params: {}
- name: mailing_list
  endpoint:
    path: /administration/settings/mailing-lists
    method: POST
- name: amazon_backup_destination
  endpoint:
    path: /vc/bd/create/amazon
    method: POST
    data_selector: backup_destination
    params:
      bucketName: <bucketName>
      mode: <mode>
      name: <name>
- name: avamar_backup_destination
  endpoint:
    path: /vc/bd/create/avamar
    method: POST
    data_selector: backup_destination
    params:
      accountName: <accountName>
      name: <name>
      path: <path>
- name: azure_backup_destination
  endpoint:
    path: /vc/bd/create/azure
    method: POST
    data_selector: backup_destination
    params:
      accountName: <accountName>
      mode: <mode>
      name: <name>
- name: ddboost_backup_destination
  endpoint:
    path: /vc/bd/create/ddboost
    method: POST
    data_selector: backup_destination
    params:
      accountName: <accountName>
      host: <host>
      name: <name>
      password: <password>
      unitName: <unitName>
      path: <path>
- name: data_protector_backup_destination
  endpoint:
    path: /vc/bd/create/dp
    method: POST
    data_selector: backup_destination
    params:
      name: <name>
- name: rubrik_backup_destination
  endpoint:
    path: /vc/bd/create/e
    method: POST
    data_selector: backup_destination
    params:
      name: <name>
      path: <path>
- name: filesystem_backup_destination
  endpoint:
    path: /vc/bd/create/filesystem
    method: POST
    data_selector: backup_destination
    params:
      name: <name>
      path: <path>
- name: gcs_backup_destination
  endpoint:
    path: /vc/bd/create/gcs
    method: POST
    data_selector: backup_destination
    params:
      name: <name>
- name: isp_backup_destination
  endpoint:
    path: /vc/bd/create/isp
    method: POST
    data_selector: backup_destination
    params:
      name: <name>
- name: netbackup_backup_destination
  endpoint:
    path: /vc/bd/create/netbackup
    method: POST
    data_selector: backup_destination
    params:
      clientName: <clientName>
      name: <name>
      policy: <policy>
      schedule: <schedule>
- name: networker_backup_destination
  endpoint:
    path: /vc/bd/create/networker
    method: POST
    data_selector: backup_destination
    params:
      clientName: <clientName>
      name: <name>
      poolName: <poolName>
      url: <path>
- name: openstack_backup_destination
  endpoint:
    path: /vc/bd/create/openstack
    method: POST
    data_selector: backup_destination
    params:
      name: <name>
      url: <path>
- name: vstor_backup_destination
  endpoint:
    path: /vc/bd/create/vstor
    method: POST
    data_selector: backup_destination
    params:
      name: <name>
      path: <path>
- name: xfs_backup_destination
  endpoint:
    path: /vc/bd/create/xfs
    method: POST
    data_selector: backup_destination
    params:
      name: <name>
      path: <path>
- name: vc-cloud-backup-schedule
  endpoint:
    path: /vc/cloud/backup/schedule
    method: GET
- name: vc-cloud-backup-schedule-active
  endpoint:
    path: /vc/cloud/backup/schedule/active
    method: POST
- name: vc-cloud-backup-schedule-create
  endpoint:
    path: /vc/cloud/backup/schedule/create
    method: POST
- name: vc-cloud-backup-schedule-delete
  endpoint:
    path: /vc/cloud/backup/schedule/delete
    method: DELETE
- name: vc-cloud-backup-schedule-details
  endpoint:
    path: /vc/cloud/backup/schedule/details
    method: GET
- name: vc-cloud-backup-schedule-list
  endpoint:
    path: /vc/cloud/backup/schedule/list
    method: GET
- name: vc-cloud-backup-schedule-policy
  endpoint:
    path: /vc/cloud/backup/schedule/policy
    method: POST
- name: vc-cloud-backup-schedule-update
  endpoint:
    path: /vc/cloud/backup/schedule/update
    method: PUT
- name: backup_policy
  endpoint:
    path: /vc/storage/backup/policy
    method: GET
    data_selector: policies
- name: backup_schedule
  endpoint:
    path: /vc/storage/backup/schedule
    method: GET
    data_selector: schedules
- name: vc-access-group
  endpoint:
    path: /vc/access/group
    method: GET
    data_selector: records
- name: vc-access-user
  endpoint:
    path: /vc/access/user
    method: GET
    data_selector: records
- name: vc-storage-backup-schedule-create
  endpoint:
    path: /vc/storage/backup/schedule/create
    method: POST
    data_selector: schedule
    params: {}
- name: vc-storage-backup-schedule-delete
  endpoint:
    path: /vc/storage/backup/schedule/delete
    method: DELETE
    data_selector: delete
    params: {}
- name: vc-storage-backup-schedule-details
  endpoint:
    path: /vc/storage/backup/schedule/details
    method: GET
    data_selector: details
    params: {}
- name: vc-storage-backup-schedule-listb
  endpoint:
    path: /vc/storage/backup/schedule/listb
    method: GET
    data_selector: list
    params: {}
- name: vc-storage-backup-schedule-update
  endpoint:
    path: /vc/storage/backup/schedule/update
    method: PUT
    data_selector: update
    params: {}
- name: backup
  endpoint:
    path: /vc-storage-inst-mg-list-backup
    method: GET
    data_selector: records
    params: {}
- name: list
  endpoint:
    path: /vc-storage-inst-mg-list
    method: GET
    data_selector: records
    params: {}
- name: backup
  endpoint:
    path: /vc/storage/inst/bar/backup
    method: GET
- name: backup_policy
  endpoint:
    path: /vc/storage/inst/bar/list
    method: GET
- name: backup_details
  endpoint:
    path: /vc/storage/inst/mg/bdetails
    method: GET
- name: file_details
  endpoint:
    path: /vc/storage/inst/bar/fdetails
    method: GET
- name: status
  endpoint:
    path: /vc/storage/inst/bar/status
    method: GET
- name: access
  endpoint:
    path: /vc/access
    method: GET
- name: access-group
  endpoint:
    path: /vc/access/group
    method: GET
- name: access-role
  endpoint:
    path: /vc/access/role
    method: GET
- name: access-user
  endpoint:
    path: /vc/access/user
    method: GET
- name: mounted_list_files
  endpoint:
    path: /vc/storage/mounted/list/files
    method: GET
    data_selector: files
    params:
      mounted-backup-guid: <guid>
- name: mounted_list_iscsi
  endpoint:
    path: /vc/storage/mounted/list/iscsi
    method: GET
    data_selector: files
    params:
      mounted-backup-guid: <guid>
- name: mounted_list
  endpoint:
    path: /vc/storage/mounted/list
    method: GET
    data_selector: commands
    params: {}
- name: mounted_list_mountedfiles
  endpoint:
    path: /vc/storage/mounted/list/mountedfiles
    method: GET
    data_selector: mounted_files
    params:
      mounted-backup-guid: <guid>
- name: mounted_list_tasks
  endpoint:
    path: /vc/storage/mounted/list/tasks
    method: GET
    data_selector: tasks
    params:
      mounted-backup-guid: <guid>
- name: mounted_mount
  endpoint:
    path: /vc/storage/mounted/mount
    method: POST
    data_selector: mount
    params:
      backupLocation: <backupLocation>
      node: <node>
      auto: <auto>
      hours: <hours>
      mount: <mount>
- name: mounted_um
  endpoint:
    path: /vc/storage/mounted/um
    method: DELETE
    data_selector: unmount
    params:
      mounted-backup-guid: <guid>
- name: backup_policy_add_rule
  endpoint:
    path: /vc/app/backup/policy/addrule
    method: POST
- name: backup_policy_assign
  endpoint:
    path: /vc/app/backup/policy/assign
    method: POST
- name: backup_policy_create
  endpoint:
    path: /vc/app/backup/policy/create
    method: POST
- name: backup_policy_delete
  endpoint:
    path: /vc/app/backup/policy/delete
    method: DELETE
- name: backup_policy_details
  endpoint:
    path: /vc/app/backup/policy/details
    method: GET
- name: backup_policy_list
  endpoint:
    path: /vc/app/backup/policy/list
    method: GET
- name: backup_policy_list_rules
  endpoint:
    path: /vc/app/backup/policy/listrules
    method: GET
- name: backup_policy_remove_bd
  endpoint:
    path: /vc/app/backup/policy/removebd
    method: DELETE
- name: backup_policy_remove
  endpoint:
    path: /vc/app/backup/policy/remove
    method: DELETE
- name: backup_policy_unassign
  endpoint:
    path: /vc/app/backup/policy/unassign
    method: DELETE
- name: backup_policy_update
  endpoint:
    path: /vc/app/backup/policy/update
    method: PUT
- name: backup_schedule_create
  endpoint:
    path: /vc/app/backup/schedule/create
    method: POST
- name: backup_schedule_delete
  endpoint:
    path: /vc/app/backup/schedule/delete
    method: DELETE
- name: backup_schedule_details
  endpoint:
    path: /vc/app/backup/schedule/details
    method: GET
- name: backup_schedule_list
  endpoint:
    path: /vc/app/backup/schedule/list
    method: GET
- name: backup_schedule_update
  endpoint:
    path: /vc/app/backup/schedule/update
    method: PUT
- name: app_config_create
  endpoint:
    path: /vc/app/config/create
    method: POST
- name: app_config_delete
  endpoint:
    path: /vc/app/config/delete
    method: DELETE
- name: app_config_details
  endpoint:
    path: /vc/app/config/details
    method: GET
- name: app_config_list
  endpoint:
    path: /vc/app/config/list
    method: GET
- name: app_config_update
  endpoint:
    path: /vc/app/config/update
    method: PUT
- name: create_schedule
  endpoint:
    path: /vc/storage/snapshot/schedule/create
    method: POST
    data_selector: scheduleDetails
- name: delete_schedule
  endpoint:
    path: /vc/storage/snapshot/schedule/delete
    method: DELETE
    data_selector: deleteConfirmation
- name: show_schedule_details
  endpoint:
    path: /vc/storage/snapshot/schedule/details
    method: GET
    data_selector: scheduleDetails
- name: list_storage_backup_schedules
  endpoint:
    path: /vc/storage/snapshot/schedule/listb
    method: GET
    data_selector: backupSchedules
- name: list_storage_snapshot_schedules
  endpoint:
    path: /vc/storage/snapshot/schedule/lists
    method: GET
    data_selector: snapshotSchedules
- name: update_schedule
  endpoint:
    path: /vc/storage/snapshot/schedule/update
    method: PUT
    data_selector: updateConfirmation
- name: file_details
  endpoint:
    path: /vc/app/inst/bar/file
    method: GET
    data_selector: details
    params:
      backup-guid: <guid>
- name: backup_full
  endpoint:
    path: /vc/app/inst/bar/full
    method: POST
    data_selector: backup
    params:
      policy-guid: <policyGuid>
      policy-name: <policyName>
      backup-rule: <backupRules>
- name: backup_import
  endpoint:
    path: /vc/app/inst/bar/import
    method: POST
    data_selector: import
    params:
      backup-guid: <guid>
      dst-guid: <dstAppGuid>
      path: <path>
- name: list_backups
  endpoint:
    path: /vc/app/inst/bar/list/backup
    method: GET
    data_selector: backups
    params: {}
- name: list_backup_files
  endpoint:
    path: /vc/app/inst/bar/list/file
    method: GET
    data_selector: files
    params:
      backup-guid: <guid>
- name: list_recovery_plan
  endpoint:
    path: /vc/app/inst/bar/list
    method: GET
    data_selector: recovery_plans
    params: {}
- name: restore_backup
  endpoint:
    path: /vc/app/inst/bar/restore
    method: POST
    data_selector: restore
    params:
      guid: <guid>
      path: <path>
- name: backup_status
  endpoint:
    path: /vc/app/inst/bar/status
    method: GET
    data_selector: status
    params:
      backup-guid: <guid>
- name: backup_policy_removerule
  endpoint:
    path: /vc/ve/backup/policies/removerule
    method: POST
- name: backup_policy_removetag
  endpoint:
    path: /vc/ve/backup/policies/removetag
    method: POST
- name: backup_policy_set_activation
  endpoint:
    path: /vc/ve/backup/policies/set/activation
    method: POST
- name: backup_policy_set_fail
  endpoint:
    path: /vc/ve/backup/policies/set/fail
    method: POST
- name: backup_policy_set_keep
  endpoint:
    path: /vc/ve/backup/policies/set/keep
    method: POST
- name: backup_policy_set
  endpoint:
    path: /vc/ve/backup/policies/set
    method: POST
- name: backup_policy_set_mode
  endpoint:
    path: /vc/ve/backup/policies/set/mode
    method: POST
- name: backup_policy_set_priority
  endpoint:
    path: /vc/ve/backup/policies/set/priority
    method: POST
- name: backup_policy_set_removal
  endpoint:
    path: /vc/ve/backup/policies/set/removal
    method: POST
- name: backup_policy_unassign
  endpoint:
    path: /vc/ve/backup/policies/unassign
    method: POST
- name: backup_policy_update
  endpoint:
    path: /vc/ve/backup/policies/update
    method: POST
- name: backup_schedule_active
  endpoint:
    path: /vc/ve/backup/schedule/active
    method: POST
- name: backup_schedule_add
  endpoint:
    path: /vc/ve/backup/schedule/add
    method: POST
- name: backup_schedule_create
  endpoint:
    path: /vc/ve/backup/schedule/create
    method: POST
- name: backup_schedule_delete
  endpoint:
    path: /vc/ve/backup/schedule/delete
    method: POST
- name: backup_schedule_details
  endpoint:
    path: /vc/ve/backup/schedule/details
    method: GET
- name: backup_schedule_list
  endpoint:
    path: /vc/ve/backup/schedule/list
    method: GET
- name: backup_schedule_update
  endpoint:
    path: /vc/ve/backup/schedule/update
    method: POST
- name: hypervisor_managers
  endpoint:
    path: /vc/ve/inf/hvm
    method: GET
    data_selector: '[]'
- name: hypervisor_manager_details
  endpoint:
    path: /vc/ve/inf/hvm/details
    method: GET
    data_selector: '[]'
- name: hypervisor_manager_list
  endpoint:
    path: /vc/ve/inf/hvm/list
    method: GET
    data_selector: '[]'
- name: list_hypervisors
  endpoint:
    path: /vc/ve/inf/hvm/listhv
    method: GET
    data_selector: '[]'
- name: list_virtual_machines
  endpoint:
    path: /vc/ve/inf/hvm/listvm
    method: GET
    data_selector: '[]'
- name: sync_inventory
  endpoint:
    path: /vc/ve/inf/hvm/sync
    method: POST
    data_selector: '[]'
- name: create_amazon
  endpoint:
    path: /vc/bd/create/amazon
    method: POST
- name: create_avamar
  endpoint:
    path: /vc/bd/create/avamar
    method: POST
- name: create_azure
  endpoint:
    path: /vc/bd/create/azure
    method: POST
- name: create_ddboost
  endpoint:
    path: /vc/bd/create/ddboost
    method: POST
- name: create_dp
  endpoint:
    path: /vc/bd/create/dp
    method: POST
- name: create_rubrik
  endpoint:
    path: /vc/bd/create/e
    method: POST
- name: create_filesystem
  endpoint:
    path: /vc/bd/create/filesystem
    method: POST
- name: create_gcs
  endpoint:
    path: /vc/bd/create/gcs
    method: POST
- name: create_isp
  endpoint:
    path: /vc/bd/create/isp
    method: POST
- name: create_netbackup
  endpoint:
    path: /vc/bd/create/netbackup
    method: POST
- name: create_networker
  endpoint:
    path: /vc/bd/create/networker
    method: POST
- name: create_openstack
  endpoint:
    path: /vc/bd/create/openstack
    method: POST
- name: create_vstor
  endpoint:
    path: /vc/bd/create/vstor
    method: POST
- name: create_xfs
  endpoint:
    path: /vc/bd/create/xfs
    method: POST
- name: set_default
  endpoint:
    path: /vc/bd/default
    method: POST
- name: delete_backup_destination
  endpoint:
    path: /vc/bd/delete
    method: DELETE
- name: backup_destination_details
  endpoint:
    path: /vc/bd/details
    method: GET
- name: list_backup_destinations
  endpoint:
    path: /vc/bd/list
    method: GET
- name: project_details
  endpoint:
    path: /vc-ve-inf/project/details
    method: GET
    data_selector: details
    params: {}
- name: project_list
  endpoint:
    path: /vc-ve-inf/project/list
    method: GET
    data_selector: projects
    params: {}
- name: project_management
  endpoint:
    path: /vc-ve-inf/project/manage
    method: GET
    data_selector: management
    params: {}
- name: project_quota
  endpoint:
    path: /vc-ve-inf/project/quota
    method: GET
    data_selector: quota
    params: {}
- name: quota_active
  endpoint:
    path: /vc-ve-inf/quota/active
    method: POST
    data_selector: active
    params: {}
- name: vc-cloud-backup-policy-update
  endpoint:
    path: /vc/cloud/backup/policy/update
    method: POST
    data_selector: ''
    params: {}
- name: vc-cloud-backup-schedule
  endpoint:
    path: /vc/cloud/backup/schedule
    method: POST
    data_selector: ''
    params: {}
- name: vc-cloud-backup-schedule-active
  endpoint:
    path: /vc/cloud/backup/schedule/active
    method: POST
    data_selector: ''
    params: {}
- name: vc-cloud-backup-schedule-create
  endpoint:
    path: /vc/cloud/backup/schedule/create
    method: POST
    data_selector: ''
    params: {}
- name: vc-cloud-backup-schedule-delete
  endpoint:
    path: /vc/cloud/backup/schedule/delete
    method: DELETE
    data_selector: ''
    params: {}
- name: vc-cloud-backup-schedule-details
  endpoint:
    path: /vc/cloud/backup/schedule/details
    method: GET
    data_selector: ''
    params: {}
- name: vc-cloud-backup-schedule-list
  endpoint:
    path: /vc/cloud/backup/schedule/list
    method: GET
    data_selector: ''
    params: {}
- name: vc-cloud-backup-schedule-policy
  endpoint:
    path: /vc/cloud/backup/schedule/policy
    method: POST
    data_selector: ''
    params: {}
- name: vc-cloud-backup-schedule-update
  endpoint:
    path: /vc/cloud/backup/schedule/update
    method: PUT
    data_selector: ''
    params: {}
- name: set_credentials
  endpoint:
    path: /vc/ve/inst/set/credentials
    method: SET
    data_selector: credentials
    params: {}
- name: set_handling
  endpoint:
    path: /vc/ve/inst/set/handling
    method: SET
    data_selector: handling
    params: {}
- name: set_host
  endpoint:
    path: /vc/ve/inst/set/host
    method: SET
    data_selector: host
    params: {}
- name: set_ignored
  endpoint:
    path: /vc/ve/inst/set/ignored
    method: SET
    data_selector: ignored
    params: {}
- name: set_key
  endpoint:
    path: /vc/ve/inst/set/key
    method: SET
    data_selector: key
    params: {}
- name: snapshot_create
  endpoint:
    path: /vc/ve/inst/snapshot/create
    method: CREATE
    data_selector: snapshot
    params: {}
- name: snapshot_remove
  endpoint:
    path: /vc/ve/inst/snapshot/remove
    method: REMOVE
    data_selector: snapshot
    params: {}
- name: backup_policy
  endpoint:
    path: /vc/storage/backup/policy
    method: GET
    data_selector: policies
- name: vc-storage-backup-schedule-create
  endpoint:
    path: /vc/storage/backup/schedule/create
    method: POST
    data_selector: schedule
    params: {}
- name: vc-storage-backup-schedule-delete
  endpoint:
    path: /vc/storage/backup/schedule/delete
    method: DELETE
    data_selector: schedule
    params: {}
- name: vc-storage-backup-schedule-details
  endpoint:
    path: /vc/storage/backup/schedule/details
    method: GET
    data_selector: scheduleDetails
    params: {}
- name: vc-storage-backup-schedule-listb
  endpoint:
    path: /vc/storage/backup/schedule/listb
    method: GET
    data_selector: schedules
    params: {}
- name: vc-storage-backup-schedule-update
  endpoint:
    path: /vc/storage/backup/schedule/update
    method: PUT
    data_selector: updatedSchedule
    params: {}
- name: backup
  endpoint:
    path: /vc/storage/inst/bar/backup
    method: POST
    data_selector: backup
    params: {}
- name: details
  endpoint:
    path: /vc/storage/inst/bar/details
    method: GET
    data_selector: details
    params: {}
- name: list_backup
  endpoint:
    path: /vc/storage/inst/mg/list/backup
    method: GET
    data_selector: list_backup
    params: {}
- name: mounted_files
  endpoint:
    path: /vc/storage/mounted/list/mountedfiles
    method: GET
    data_selector: mounted_files
    params:
      mounted-backup-guid: <guid>
- name: mounted_backup
  endpoint:
    path: /vc/storage/mounted/list/backups
    method: GET
    data_selector: mounted_backups
    params: {}
- name: tasks
  endpoint:
    path: /vc/storage/mounted/list/tasks
    method: GET
    data_selector: tasks
    params:
      mounted-backup-guid: <guid>
- name: recovery_rule_hvtype
  endpoint:
    path: /vc/ve/recovery/rule/hvtype
    method: GET
    data_selector: rules
    params: {}
- name: recovery_rule_image
  endpoint:
    path: /vc/ve/recovery/rule/image
    method: GET
    data_selector: rules
    params: {}
- name: recovery_rule_list
  endpoint:
    path: /vc/ve/recovery/rule/list
    method: GET
    data_selector: rules
    params: {}
- name: recovery_rule
  endpoint:
    path: /vc/ve/recovery/rule
    method: GET
    data_selector: rules
    params: {}
- name: recovery_rule_ow
  endpoint:
    path: /vc/ve/recovery/rule/ow
    method: GET
    data_selector: rules
    params: {}
- name: recovery_rule_path
  endpoint:
    path: /vc/ve/recovery/rule/path
    method: GET
    data_selector: rules
    params: {}
- name: recovery_rule_project
  endpoint:
    path: /vc/ve/recovery/rule/project
    method: GET
    data_selector: rules
    params: {}
- name: recovery_rule_remove
  endpoint:
    path: /vc/ve/recovery/rule/remove
    method: GET
    data_selector: rules
    params: {}
- name: recovery_rule_selection
  endpoint:
    path: /vc/ve/recovery/rule/selection
    method: GET
    data_selector: rules
    params: {}
- name: recovery_rule_storage
  endpoint:
    path: /vc/ve/recovery/rule/storage
    method: GET
    data_selector: rules
    params: {}
- name: recovery_rule_vm
  endpoint:
    path: /vc/ve/recovery/rule/vm
    method: GET
    data_selector: rules
    params: {}
- name: recovery_rule_vmname
  endpoint:
    path: /vc/ve/recovery/rule/vmname
    method: GET
    data_selector: rules
    params: {}
- name: recovery_set_active
  endpoint:
    path: /vc/ve/recovery/set/active
    method: GET
    data_selector: rules
    params: {}
- name: recovery_set
  endpoint:
    path: /vc/ve/recovery/set
    method: GET
    data_selector: rules
    params: {}
- name: recovery_set_priority
  endpoint:
    path: /vc/ve/recovery/set/priority
    method: GET
    data_selector: rules
    params: {}
- name: recovery_update
  endpoint:
    path: /vc/ve/recovery/update
    method: GET
    data_selector: rules
    params: {}
- name: recovery_schedule_active
  endpoint:
    path: /vc/ve/recovery/schedule/active
    method: GET
    data_selector: schedules
    params: {}
- name: recovery_schedule_add
  endpoint:
    path: /vc/ve/recovery/schedule/add
    method: GET
    data_selector: schedules
    params: {}
- name: recovery_schedule_create
  endpoint:
    path: /vc/ve/recovery/schedule/create
    method: GET
    data_selector: schedules
    params: {}
- name: recovery_schedule_delete
  endpoint:
    path: /vc/ve/recovery/schedule/delete
    method: GET
    data_selector: schedules
    params: {}
- name: recovery_schedule_details
  endpoint:
    path: /vc/ve/recovery/schedule/details
    method: GET
    data_selector: schedules
    params: {}
- name: recovery_schedule_list
  endpoint:
    path: /vc/ve/recovery/schedule/list
    method: GET
    data_selector: schedules
    params: {}
- name: recovery_schedule_update
  endpoint:
    path: /vc/ve/recovery/schedule/update
    method: GET
    data_selector: schedules
    params: {}
- name: vc-storage-snapshot-schedule-create
  endpoint:
    path: /vc/storage/snapshot/schedule/create
    method: POST
    data_selector: null
    params: {}
- name: vc-storage-snapshot-schedule-delete
  endpoint:
    path: /vc/storage/snapshot/schedule/delete
    method: DELETE
    data_selector: null
    params: {}
- name: vc-storage-snapshot-schedule-details
  endpoint:
    path: /vc/storage/snapshot/schedule/details
    method: GET
    data_selector: null
    params: {}
- name: vc-storage-snapshot-schedule-listb
  endpoint:
    path: /vc/storage/snapshot/schedule/listb
    method: GET
    data_selector: null
    params: {}
- name: vc-storage-snapshot-schedule-lists
  endpoint:
    path: /vc/storage/snapshot/schedule/lists
    method: GET
    data_selector: null
    params: {}
- name: snapshot_policy_addtag
  endpoint:
    path: /vc/ve/snapshot/policy/addtag
    method: POST
    data_selector: tag
    params:
      policy-guid: <guid>
      policy-name: <name>
      type: <type>
      tag: <tag>
- name: snapshot_policy_assign
  endpoint:
    path: /vc/ve/snapshot/policy/assign
    method: POST
    data_selector: vms
    params:
      policy-guid: <guid>
      policy-name: <name>
      vm-guid: <vmGuid>
- name: snapshot_policy_create
  endpoint:
    path: /vc/ve/snapshot/policy/create
    method: POST
    data_selector: name
    params:
      name: <name>
- name: snapshot_policy_delete
  endpoint:
    path: /vc/ve/snapshot/policy/delete
    method: DELETE
    data_selector: policy
    params:
      policy-guid: <guid>
      policy-name: <name>
- name: snapshot_policy_details
  endpoint:
    path: /vc/ve/snapshot/policy/details
    method: GET
    data_selector: details
    params:
      policy-guid: <guid>
      policy-name: <name>
- name: snapshot_policy_list
  endpoint:
    path: /vc/ve/snapshot/policy/list
    method: GET
    data_selector: policies
    params: {}
- name: virtual_machines
  endpoint:
    path: /virtual-machines
    method: GET
    data_selector: records
    params: {}
- name: vm_details
  endpoint:
    path: /virtual-machines/{guid}
    method: GET
    data_selector: details
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
    params: {}
- name: backups
  endpoint:
    path: /backups/?protected-entity={guid}
    method: GET
    data_selector: records
    params: {}
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: records
    params: {}
- name: policies
  endpoint:
    path: /policies/vm-backup
    method: GET
    data_selector: records
    params: {}
- name: backup_policy_removerule
  endpoint:
    path: /vc/ve/backup/policies/removerule
    method: POST
- name: backup_policy_removetag
  endpoint:
    path: /vc/ve/backup/policies/removetag
    method: POST
- name: backup_policy_set_activation
  endpoint:
    path: /vc/ve/backup/policies/set/activation
    method: POST
- name: backup_policy_set_fail
  endpoint:
    path: /vc/ve/backup/policies/set/fail
    method: POST
- name: backup_policy_set_keep
  endpoint:
    path: /vc/ve/backup/policies/set/keep
    method: POST
- name: backup_policy_set
  endpoint:
    path: /vc/ve/backup/policies/set
    method: POST
- name: backup_policy_set_mode
  endpoint:
    path: /vc/ve/backup/policies/set/mode
    method: POST
- name: backup_policy_set_priority
  endpoint:
    path: /vc/ve/backup/policies/set/priority
    method: POST
- name: backup_policy_set_removal
  endpoint:
    path: /vc/ve/backup/policies/set/removal
    method: POST
- name: backup_policy_unassign
  endpoint:
    path: /vc/ve/backup/policies/unassign
    method: POST
- name: backup_policy_update
  endpoint:
    path: /vc/ve/backup/policies/update
    method: POST
- name: backup_schedule_active
  endpoint:
    path: /vc/ve/backup/schedule/active
    method: POST
- name: backup_schedule_add
  endpoint:
    path: /vc/ve/backup/schedule/add
    method: POST
- name: backup_schedule_create
  endpoint:
    path: /vc/ve/backup/schedule/create
    method: POST
- name: backup_schedule_delete
  endpoint:
    path: /vc/ve/backup/schedule/delete
    method: POST
- name: backup_schedule_details
  endpoint:
    path: /vc/ve/backup/schedule/details
    method: GET
- name: backup_schedule_list
  endpoint:
    path: /vc/ve/backup/schedule/list
    method: GET
- name: backup_schedule_update
  endpoint:
    path: /vc/ve/backup/schedule/update
    method: POST
- name: hypervisor_cluster_delete
  endpoint:
    path: /vc/ve/inf/hc/delete
    method: DELETE
- name: hypervisor_cluster_list
  endpoint:
    path: /vc/ve/inf/hc/list
    method: GET
- name: hypervisor_cluster_name
  endpoint:
    path: /vc/ve/inf/hc/name
    method: POST
- name: hypervisor_create
  endpoint:
    path: /vc/ve/inf/hv/create
    method: POST
- name: hypervisor_delete
  endpoint:
    path: /vc/ve/inf/hv/delete
    method: DELETE
- name: hypervisor_details
  endpoint:
    path: /vc/ve/inf/hv/details
    method: GET
- name: hypervisor_host
  endpoint:
    path: /vc/ve/inf/hv/host
    method: POST
- name: hypervisor_list
  endpoint:
    path: /vc/ve/inf/hv/list
    method: GET
- name: hypervisor_listvm
  endpoint:
    path: /vc/ve/inf/hv/listvm
    method: GET
- name: VM Backups
  endpoint:
    path: /integration_plugins/ovirt/vm_backups
    method: GET
- name: hypervisor_manager_delete
  endpoint:
    path: /vc/ve/inf/hvm/delete
    method: POST
    data_selector: hypervisor_manager_delete
- name: hypervisor_manager_details
  endpoint:
    path: /vc/ve/inf/hvm/details
    method: GET
    data_selector: hypervisor_manager_details
- name: hypervisor_manager_host
  endpoint:
    path: /vc/ve/inf/hvm/host
    method: POST
    data_selector: hypervisor_manager_host
- name: hypervisor_manager_list
  endpoint:
    path: /vc/ve/inf/hvm/list
    method: GET
    data_selector: hypervisor_manager_list
- name: hypervisor_manager_listvm
  endpoint:
    path: /vc/ve/inf/hvm/listvm
    method: GET
    data_selector: hypervisor_manager_listvm
- name: hypervisor_manager_sync
  endpoint:
    path: /vc/ve/inf/hvm/sync
    method: POST
    data_selector: hypervisor_manager_sync
- name: hypervisor_manager_update
  endpoint:
    path: /vc/ve/inf/hvm/update
    method: POST
    data_selector: hypervisor_manager_update
- name: hypervisor_storage_delete
  endpoint:
    path: /vc/ve/inf/hvs/delete
    method: POST
    data_selector: hypervisor_storage_delete
- name: hypervisor_storage_list
  endpoint:
    path: /vc/ve/inf/hvs/list
    method: GET
    data_selector: hypervisor_storage_list
- name: hypervisor_storage_pool
  endpoint:
    path: /vc/ve/inf/hvs/pool
    method: POST
    data_selector: hypervisor_storage_pool
- name: network_details
  endpoint:
    path: /vc/ve/inf/network/details
    method: GET
    data_selector: network_details
- name: network_list
  endpoint:
    path: /vc/ve/inf/network/list
    method: GET
    data_selector: network_list
- name: nwic_details
  endpoint:
    path: /vc/ve/inf/nwic/details
    method: GET
    data_selector: nwic_details
- name: nwic_list
  endpoint:
    path: /vc/ve/inf/nwic/list
    method: GET
    data_selector: nwic_list
- name: project_details
  endpoint:
    path: /vc-ve-inf/project/details
    method: GET
    data_selector: details
    params: {}
- name: project_list
  endpoint:
    path: /vc-ve-inf/project/list
    method: GET
    data_selector: projects
    params: {}
- name: project_management
  endpoint:
    path: /vc-ve-inf/project
    method: POST
    data_selector: management
    params: {}
- name: quota_management
  endpoint:
    path: /vc-ve-inf/quota
    method: POST
    data_selector: management
    params: {}
- name: credentials
  endpoint:
    path: /vc/ve/inst/set/credentials
    method: POST
    data_selector: result
    params:
      name: <name>
      user: <user>
      password: <password>
- name: host
  endpoint:
    path: /vc/ve/inst/set/host
    method: POST
    data_selector: result
    params:
      name: <name>
      host: <host>
      port: <port>
- name: key
  endpoint:
    path: /vc/ve/inst/set/key
    method: POST
    data_selector: result
    params:
      name: <name>
      path: <path>
- name: handling
  endpoint:
    path: /vc/ve/inst/set/handling
    method: POST
    data_selector: result
    params:
      preOrPost: <PRE | POST>
      handling: <handling>
- name: ignored
  endpoint:
    path: /vc/ve/inst/set/ignored
    method: POST
    data_selector: result
    params:
      preOrPost: <PRE | POST>
      codes: <IGNORED_CODES>
- name: snapshot_create
  endpoint:
    path: /vc/ve/inst/snapshot/create
    method: POST
    data_selector: result
    params:
      priority: <priority>
      rule: <rule>
- name: general_logs
  endpoint:
    path: /logs/general
    method: GET
- name: backup_related_logs
  endpoint:
    path: /logs/backup
    method: GET
- name: direct_os_logs
  endpoint:
    path: /logs/os
    method: GET
- name: node_logs
  endpoint:
    path: /logs/node
    method: GET
- name: hyperv_agent_logs
  endpoint:
    path: /logs/hyperv_agent
    method: GET
- name: tape_manager_logs
  endpoint:
    path: /logs/tape_manager
    method: GET
- name: internal_database_protection
  endpoint:
    path: /deployment/initial-configuration
    method: GET
    data_selector: metadata
    params: {}
- name: recovery_rule_hvtype
  endpoint:
    path: /vc/ve/recovery/recovery/rule/hvtype
    method: GET
- name: recovery_rule_image
  endpoint:
    path: /vc/ve/recovery/recovery/rule/image
    method: GET
- name: recovery_rule_list
  endpoint:
    path: /vc/ve/recovery/recovery/rule/list
    method: GET
- name: recovery_rule
  endpoint:
    path: /vc/ve/recovery/recovery/rule
    method: GET
- name: recovery_rule_ow
  endpoint:
    path: /vc/ve/recovery/recovery/rule/ow
    method: GET
- name: recovery_rule_path
  endpoint:
    path: /vc/ve/recovery/recovery/rule/path
    method: GET
- name: recovery_rule_project
  endpoint:
    path: /vc/ve/recovery/recovery/rule/project
    method: GET
- name: recovery_rule_remove
  endpoint:
    path: /vc/ve/recovery/recovery/rule/remove
    method: GET
- name: recovery_rule_selection
  endpoint:
    path: /vc/ve/recovery/recovery/rule/selection
    method: GET
- name: recovery_rule_storage
  endpoint:
    path: /vc/ve/recovery/recovery/rule/storage
    method: GET
- name: recovery_rule_vm
  endpoint:
    path: /vc/ve/recovery/recovery/rule/vm
    method: GET
- name: recovery_rule_vmname
  endpoint:
    path: /vc/ve/recovery/recovery/rule/vmname
    method: GET
- name: recovery_set_active
  endpoint:
    path: /vc/ve/recovery/recovery/set/active
    method: GET
- name: recovery_set_priority
  endpoint:
    path: /vc/ve/recovery/recovery/set/priority
    method: GET
- name: recovery_update
  endpoint:
    path: /vc/ve/recovery/recovery/update
    method: GET
- name: recovery_schedule_active
  endpoint:
    path: /vc/ve/recovery/schedule/active
    method: GET
- name: recovery_schedule_add
  endpoint:
    path: /vc/ve/recovery/schedule/add
    method: GET
- name: recovery_schedule_create
  endpoint:
    path: /vc/ve/recovery/schedule/create
    method: GET
- name: recovery_schedule_delete
  endpoint:
    path: /vc/ve/recovery/schedule/delete
    method: GET
- name: recovery_schedule_details
  endpoint:
    path: /vc/ve/recovery/schedule/details
    method: GET
- name: recovery_schedule_list
  endpoint:
    path: /vc/ve/recovery/schedule/list
    method: GET
- name: recovery_schedule_update
  endpoint:
    path: /vc/ve/recovery/schedule/update
    method: GET
- name: snapshot_policy_addtag
  endpoint:
    path: /vc/ve/snapshot/policy/addtag
    method: POST
- name: snapshot_policy_assign
  endpoint:
    path: /vc/ve/snapshot/policy/assign
    method: POST
- name: snapshot_policy_create
  endpoint:
    path: /vc/ve/snapshot/policy/create
    method: POST
- name: snapshot_policy_delete
  endpoint:
    path: /vc/ve/snapshot/policy/delete
    method: DELETE
- name: snapshot_policy_details
  endpoint:
    path: /vc/ve/snapshot/policy/details
    method: GET
- name: snapshot_policy_list
  endpoint:
    path: /vc/ve/snapshot/policy/list
    method: GET
- name: snapshot_policy_set_activation
  endpoint:
    path: /vc/ve/snapshot/policy/set/activation
    method: POST
- name: snapshot_policy_set_auto
  endpoint:
    path: /vc/ve/snapshot/policy/set/auto
    method: POST
- name: snapshot_policy_set_mode
  endpoint:
    path: /vc/ve/snapshot/policy/set/mode
    method: POST
- name: snapshot_policy_set_priority
  endpoint:
    path: /vc/ve/snapshot/policy/set/priority
    method: POST
- name: snapshot_policy_set_removal
  endpoint:
    path: /vc/ve/snapshot/policy/set/removal
    method: POST
- name: snapshot_policy_set_retry
  endpoint:
    path: /vc/ve/snapshot/policy/set/retry
    method: POST
- name: snapshot_policy_unassign
  endpoint:
    path: /vc/ve/snapshot/policy/unassign
    method: DELETE
- name: snapshot_policy_update
  endpoint:
    path: /vc/ve/snapshot/policy/update
    method: PATCH
- name: virtual_machines
  endpoint:
    path: /virtual-machines
    method: GET
- name: vm_details
  endpoint:
    path: /virtual-machines/{guid}
    method: GET
- name: export_task
  endpoint:
    path: /tasks/export
    method: POST
- name: tasks
  endpoint:
    path: /tasks
    method: GET
- name: backups
  endpoint:
    path: /backups/?protected-entity={guid}
    method: GET
- name: restore_and_import
  endpoint:
    path: /tasks/restore-and-import
    method: POST
- name: schedules
  endpoint:
    path: /schedules
    method: GET
- name: vm_backup_policies
  endpoint:
    path: /policies/vm-backup
    method: GET
- name: backup_operations
  endpoint:
    path: /backup_operations
    method: GET
    data_selector: records
- name: backup_sla_policies
  endpoint:
    path: /backup_sla_policies
    method: GET
    data_selector: records
- name: logs
  endpoint:
    path: /opt/vprotect/logs/<node_name>
    method: GET
    data_selector: log_files
    params: {}
- name: application_server_logs
  endpoint:
    path: /opt/vprotect/logs/appserver
    method: GET
    data_selector: log_files
    params: {}
- name: api_logs
  endpoint:
    path: /opt/vprotect/logs/api
    method: GET
    data_selector: log_files
    params: {}
- name: hyperv_agent_logs
  endpoint:
    path: c:\Program Files\HyperVAgent\Hyper-v Agent\bin\Logs
    method: GET
    data_selector: log_files
    params: {}
- name: tape_manager_logs
  endpoint:
    path: /opt/vprotect/logs/tm
    method: GET
    data_selector: log_files
    params: {}
- name: Syslog
  endpoint:
    path: /etc/rsyslog.conf
    method: POST
    data_selector: appenders
    params: {}
notes:
- If you're using RHV/oVirt/Oracle VM/Nutanix/Kubernetes then hypervisors will be
  detected automatically as a part of the index task.
- Commands must be run with proper options and parameters.
- Use appropriate GUIDs for VM, storage, and policies.
- VMs can belong only to a single backup policy.
- Only VMs with assigned snapshot management policy can be a snapshot from the CLI
  or UI.
- Only storage with an assigned snapshot management policy can be a snapshot from
  the CLI or UI.
- Tasks in the queue are run in order from the highest to the lowest priority.
- You can assign multiple schedules if you need backup to be executed at different
  hours on different days.
- The queue is being periodically cleaned, so only the last tasks are being shown.
- Requires setup of the vprotect CLI environment.
- Requires setup of vProtect CLI commands for interaction.
- Supports leading virtualization platforms
- Integrates with public, private, and hybrid cloud environments
- Open API for 3rd party software integration
- Open API for 3rd party software integration (REST API)
- Storware Backup and Recovery components can be installed on the same host.
- Nodes may be deployed as physical or virtual systems unless the selected backup
  strategy requires the node to be installed as a virtual machine on a Hypervisor
  Cluster.
- The core functionality of Storware Backup & Recovery is an agentless backup for
  multiple virtualization, container, cloud platforms, applications, and endpoints.
- Backups performed by Storware Backup & Recovery usually are crash-consistent, but
  you can enable application consistency or enhance the backup process with your own
  custom pre/post snapshot remote command execution.
- Technical Support depends on the service level included in your Storware Backup
  and Recovery license agreement.
- Storware may choose, as an intermediate measure, to address serious issues that
  have an impact to customer business with a hotfix, while a Storware Bug Fix Advisory
  is created and verified.
- During the Full Support phase, qualified Critical and Important Security issues
  will be addressed with released High Priority Bug Fix as they become available.
- Customers are expected to update new minor releases as and when they become available.
- 'The node requires staging space - assume a number of concurrent export and store
  tasks and multiply it by the biggest VM size (for example: 6 export tasks + 4 store
  tasks * 100 GB should require around 1 TB)'
- Storware Backup & Recovery is installed in the /opt/vprotect folder and staging
  space is assumed to be in /vprotect_data - these are the defaults and should not
  be changed.
- Using Red Hat Enterprise Linux requires an active subscription.
- Minimal installation is required.
- Large environments are the most difficult to describe because they introduce a large
  number of variables. Treat this more as a proof of concept which probably needs
  some tailoring to suit your specific needs.
- 'Default Login Credentials: Login: admin, Password: vPr0tect (Hint: vPr(zero)tect)'
- The installation script will perform actions to install the server and node.
- Requires root privileges to execute the installation.
- Ansible control host should have Ansible installed with Python 3.x
- Nodes communicate with the server via port 8181
- Default admin account - admin with the password vPr0tect (with a zero)
- Default admin account is 'admin' with password 'vPr0tect'.
- 'The following Resources providers must be enabled for your Azure subscription:
  Microsoft.Resources, Microsoft.Solutions.'
- The user account used to deploy Storware Backup and Recovery must have assigned
  at least a Contributor role at the subscription level (Owner role is recommended).
- Note that the Storware Backup and Recovery machine need to be deployed in the same
  region and availability zone as the machines that will be backed up.
- Backing up machines from different regions or zones requires deploying an additional
  Storware Node in each of them.
- The default Storware deployment comes with the Public IP address attached to the
  VM which can be used for management and connecting additional resources from outside
  Azure infrastructure.
- Importing the image will install both the server and node. If You need only the
  Storware Backup & Recovery node, then You have to stop and disable Storware Backup
  & Recovery server service.
- Choose a backup destination like File System.
- Optionally enable encryption (AES-256 algorithm) for backup destinations.
- removal of any backup destination leaves data in the backup provider without an
  option to re-attach it in the future.
- Encryption supported for various backup destinations
- Encryption keys are generated based on metadata in the database.
- Tape storage provides a scalable and easy to configure storage solution.
- 'At all times only one task that uses certain Tape Pool can run, (affects Tasks:
  Export, Store, Restore, Backup Destination Initialization), all other tasks will
  wait in queue.'
- Moving Tapes between Tape Pools will result in erasing all their contents.
- You are not allowed to assign or remove Tape with valid backups.
- Updating the Tape Pool when there are running tasks that use it is prohibited.
- Use yum to check if you have any updates pending
- 'Check /etc/hosts, especially if you installed Storware Backup & Recovery using
  the All in one quick installation method, as you might find an entry such as: 127.0.0.1
  <your_hostname_here>. Delete it as this prevents the cluster from functioning properly.'
- If you choose to disable the firewall, bear in mind that Storware will no longer
  be available on ports 80/443. Instead, connect to ports 8080/8181 respectively.
- Stop and disable the Storware Backup & Recovery server, node and database as the
  cluster will manage these resources.
- Using a deduplicated FS is optional but highly recommended.
- Ensure to preserve the /vprotect_data contents if altering existing configuration.
- Ensure that the node is pointed to a localhost address.
- If the node's IP is different than 127.0.0.1, delete the node and re-register it.
- All steps run as root user.
- Execute on all pacemaker nodes, and other Storware node machines.
- Staging space needs to be mounted in the /vprotect_data folder
- Ensure the vprotect user has full permissions to the /vprotect_data file system
- You can use the default certificate - remember that you may need to use the ./node_add_ssl_cert.sh
  script after future updates to refresh the certificate on the node
- Default password for our keystore is changeit
- For the default certificate - jump to the Node configuration and use the localhost.localdomain
  instead of the storware.local
- When registering the node locally over HTTPS note that the URL you should use is
  localhost.localdomain - NOT localhost
- When registering a node via HTTPS, please note that the server must have an FQDN
  that is different from the IP address (hostname like 10.10.10.10 can be processed
  incorrectly)
- Default password for our keystore is changeit.
- This is required for backup of virtual environments when using disk attachment mode,
  such as Nutanix backups.
- By default, Storware Backup & Recovery uses the `/opt/vprotect/.ssh/id_rsa` path,
  however, you also can override it with your own path.
- This needs to be owned by `vprotect` user and make sure it has the `0400` permission
  set.
- You don't have to pass a passphrase, you can leave this parameter blank.
- Storware Backup & Recovery does not support keys other than 'RSA'.
- 'Provide path to key (default: /opt/vprotect/.ssh/id_rsa) in Storware Backup & Recovery
  dashboard'
- You can configure the system to communicate through an HTTP(S) proxy.
- Edit the vprotect.env file that is located in /opt/vprotect/vprotect.env.
- By default, Storware Backup & Recovery uses the /opt/vprotect/.ssh/id_rsa path,
  however, you also can override it with your own path.
- This needs to be owned by vprotect user and make sure it has the 0400 permission
  set.
- Make sure to change proxy.address to the address of your proxy, it can be either
  IP address or FQDN.
- Supports agentless backup and recovery operations for VMware virtual machines through
  seamless integration with VMware vSphere, vCenter, and ESXi hosts.
- Uses VMware’s native APIs (vStorage APIs for Data Protection - VADP) for consistent
  and reliable backup operations.
- Requires setup of a user account with access to the vCenter Server or ESXi host
- Microsoft Hyper-V is the only supported hypervisor in Storware Backup and Recovery
  that requires the installation of a backup agent on the host system.
- Storware supports agentless backup and recovery operations for VMware virtual machines
  through seamless integration with VMware vSphere, vCenter, and ESXi hosts.
- Changed Block Tracking (CBT) enables efficient incremental backups by tracking only
  the blocks of data that have changed since the last backup operation.
- RCT metadata is associated with VHD/VHDX files and follows the virtual machine during
  live migrations, maintaining continuity of backup operations.
- Instant Restore requires that the backup destination used for the VM is a synthetic
  type.
- Instant Restore requires a synthetic backup destination.
- Logs are stored in c:\Program Files\Hyper-v Agent\bin\Logs
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- The last snapshot is kept on the hypervisor for incremental backups
- Production checkpoints must be supported and enabled for quiesced (application-consistent)
  snapshots
- To configure Samba without domain integration, access to the SMB share is provided
  using a local system account.
- Requires at least 1 Proxy VM per cluster
- Crash-consistent snapshot using hypervisor's API
- Kerberos authentication requires accurate time synchronization between the node
  and AD domain controllers.
- Ensure the hostname is resolvable within the domain.
- Backup of VMs with vTPM enabled is not supported.
- Azure Stack HCI uses Hyper-V as its core virtualization engine for running Windows
  and Linux virtual machines.
- Subscription-Based Licensing licensed through an Azure subscription, billed per
  physical CPU core.
- Prior to adding OpenShift as a new Hypervisor Manager, you must install the OADP
  operator, version 1.3 or higher, from the Operator Hub within the OpenShift cluster.
- For a successful backup, Virtual Machine should have an app label assigned appropriately.
- Hot-plugged disks are not supported.
- 'Backup of disks: CDROM and LUN is not supported.'
- Storage class used for disk should support snapshots.
- Uses local system account for guest access in standalone mode
- Ensure the user defined in the guest account exists on the system
- When using backup APIs - Red Hat highly recommends updating the RHV environment
  to the most recent version (4.4 - at the time of writing)
- Different strategies require a node to be installed either as a VM on the environment
  that you back up or installed separately.
- All live snapshots are attempted with quiescing enabled. If the snapshot command
  fails because there is no compatible guest agent present, the live snapshot is re-initiated
  without the use-quiescing flag.
- Incremental backups are not supported in disk attachment mode.
- From RHV version 4.4.3, data is transferred directly from/to hosts.
- Backup process includes crash-consistent snapshots using hypervisor's API.
- Optional application-consistent snapshots can be done if enabled and guest tools
  are installed.
- When using backup APIs - Red Hat highly recommends to update oVirt environment to
  the most recent version (4.4 - at the time of writing)
- no incremental backup for now
- Disk attachment mode requires Virtio-SCSI to be enabled on the Storware Backup &
  Recovery Node VM
- From oVirt version 4.4.3, data is transferred directly from/to hosts
- A username for OLVM environments needs to be provided in the user@domain format
  - for example admin@internal. This user must have all permissions related to managing
  snapshots, creating/removing VMs, operating disks, and exporting data.
- OLVM API v4 environments require Storware Backup & Recovery Node to be installed
  in one of the VMs residing in the OLVM cluster.
- Disk attachment mode requires Virtio-SCSI to be enabled on the Storware Backup &
  Recovery Node VM.
- Only full backups are supported.
- Restore imports VMA image to the hypervisor.
- Red Hat highly recommends updating the RHV environment to the most recent version
  (4.4 - at the time of writing)
- Export share must be set to use the UID and GID of the vprotect user
- Backups must be restored to the export path
- Disk attachment through Cinder with changed block tracking is preferred
- Supports all hypervisors and storages
- No incremental backup for disk attachment strategy.
- RHV API v4 environments require Storware Backup & Recovery Node to be installed
  in one of the VMs residing on the RHV cluster.
- Restore to RHV using SPARSE disk allocation format is not supported if backup files
  are in RAW format and destination storage domain type in either Fibre Channel or
  iSCSI.
- Red Hat highly recommends to update oVirt environment to the most recent version
  (4.4 - at the time of writing).
- Storware Backup & Recovery does not backup and restores keypairs that user used
  in Storware Backup & Recovery doesn't have access to.
- For the libvirt strategy only, QCOW2/RAW files or Ceph RBD are supported as the
  backend.
- Backup process requires that once a snapshot is created it will be cloned and exported
- Data is transferred directly from the XenServer API without the need to set up anything
  on the hosts.
- Incremental backup is also supported.
- No incremental backup for now.
- Uses OLVM API v4 environments require Storware Backup & Recovery Node to be installed
  in one of the VMs residing in the OLVM cluster.
- From OLVM version 4.4.3, data is transferred directly from/to hosts.
- CBT feature in Citrix XenServer 7.3+ may require an additional license.
- For full backups only you can still use this strategy without CBT enabled on the
  hypervisor.
- VM migration between clusters is not supported.
- Cloning VM to another cluster is not supported.
- Backup is done by transferring QCOW2 disk images over SSH directly from the hypervisor
- Metadata is backed up only in the full backup
- Only full backups are supported
- Incremental backup is supported.
- CBT is a licensed feature
- Both import and export operations will be done using these NFS shares
- REST API should be enabled in the settings.
- Before taking a snapshot, the current state of the disableSnapshotting flag of every
  disk in the virtual machine is checked.
- Incremental backup available
- A proxy VM is required - used for the disk attachment process.
- Backup supports incremental backup for Ceph-based storage.
- Storware Backup & Recovery does not backup and restores keypairs that user used
  in Storware Backup & Recovery doesn't have access to. The restored instance will
  have no keypairs assigned. In such a case, the keypairs have to be backed up and
  restored manually under the same name before restoring the instance.
- The disk attachment method with Ceph requires access to the monitors from the Proxy
  VM.
- To perform backup and restore operations for Verge, you need to create a NAS virtual
  machine, which will be used for data import and export operations.
- Make sure that the 'Allow Export' option is checked.
- Requires creation of a Proxy VM in the zCompute environment
- All virtual machines will be restored to the Symphony region, the only supported
  one in Zadara
- Please provide the URL to the web console and SSH credentials to the master node
  when creating the OpenShift hypervisor manager in Storware Backup & Recovery WebUI.
- Valid SSH admin credentials should be provided for every Kubernetes node by the
  user (called *Hypervisor* in the Storware Backup & Recovery WebUI).
- If you want to use Ceph you must provide ceph keyring and configuration. Ceph requires
  ceph-common and rbd-nbd packages installed.
- No incremental backup.
- Metadata is backed up using OADP operator.
- Persistent volumes are primarily backed up using volume snapshots providing crash
  consistency.
- incremental backup available
- a proxy VM is required - used for the disk attachment process
- Proxmox environments require backup storage to be defined on each server.
- The export share must be set to use the UID and GID of the vprotect user.
- Information about protecting Microsoft 365 you can find in the chapter Protecting
  Microsoft 365
- Requires a Proxy VM in the zCompute environment
- You need to open 15900 port on Storware Backup & Recovery Node
- If Storware Backup & Recovery is unable to execute docker commands on the Kubernetes
  node, it means that it is logged as a user lacking admin privileges. Make sure you
  added your user to sudo/wheel group (so it can execute commands with `sudo`).
- Metadata is backed up using OADP operator. All of the OADP resources required during
  backups and restores will be automatically created.
- WinRM must be enabled and properly configured on the target machine
- The simplest setup, when you use only 1 node, is to create NFS share for the staging
  path on Storware Backup & Recovery Node.
- Ensure the directory for temporary backup files is used exclusively by Storware,
  as it is cleaned after every backup.
- Define VP_MYSQL_DBLIST, VP_MYSQL_SCRIPTPATH, VP_MYSQL_STOREPATH, VP_MYSQL_USER,
  VP_MYSQL_LOGFILE, VP_MYSQL_PASSWORD as environment variables.
- On the Node system that will be performing the migration Podman must be installed
- You need to have VMware provider added to your environment
- You need to have OpenStack provider added to your environment
- After the new application is fully configured, save the changes and go to the Backup
  SLAs configuration.
- You need to open 15900 port on Storware Backup & Recovery Node.
- Commands executed on the node are executed natively by OS.
- Be careful when providing a path in the source directory, the whole directory will
  be removed when this setting is enabled.
- WinRM must be enabled and properly configured on the target machine.
- Make sure you have etcdctl tool installed in node you are connecting to.
- To perform a manual backup, a target Application instance must be assigned to Backup
  SLA.
- Ensure this directory is used exclusively by Storware, as it is cleaned after every
  backup.
- Define environment variables in the settings section of your application as needed.
- After saving the changes to the application, configure the Backup SLAs.
- Synthetic backup destination is not available for Storage Providers
- Storware Backup & Recovery needs access to the monitors specified in the Ceph configuration
  file.
- When creating Ceph RBD storage provider for the OpenStack environment, only the
  credentials specified in the storage provider form are used by the OpenStack backup
  process - the actual technique (RBD-NBD mount or cinder in disk-attachment strategy)
  and node for connecting and the backup volumes depend on the OpenStack hypervisor
  manager settings, not in the storage provider settings.
- Remember, above content need to end with the new line sign.
- each File Server is considered as a separate Storage Provider
- Storware Backup & Recovery tracks changes for each file system change using the
  Nutanix CFT mechanism
- only regular files, symlinks, and directories are subject to backup
- Storware Backup & Recovery currently build images for each backup before uploading
  data to the specific backup provider so that it doesn't have to upload objects one-by-one
  - these images will be merged automatically in restore tasks
- The admin account cannot be used
- User has to be authorized as REST API access user in File Server Console > Configuration
  > Manage Roles
- 'If you want to use domain account, enter it in the following format: domain\username'
- The URL to the Prism Element Host must be https://PRISM_ELEMENT:9440
- User has to have Cluster Admin privileges on the cluster
- 'If you want to use domain account for Prism Element Host, enter it in the following
  format: username@domain.local'
- The node has to have network communication over port 9440 to File Server VM Client
  Network IP and Nutanix Prism
- iSCSI uses iSCSI Data Services IP defined on the Nutanix platform to discover targets,
  which means that exception will be thrown if this value is missing.
- for file systems, Storware Backup & Recovery currently build images for each backup
  before uploading data to the specific backup provider so that it doesn't have to
  upload objects one-by-one - these images will be merged automatically in restore
  tasks
- Backup/Restore of hidden shares on Nutanix Files with SMB are not supported.
- Inventory synchronization executed on the manager level assigns the same node as
  used for the manager to all hypervisors.
- If you use disk-attachment strategy, always execute inventory synchronization at
  least once from each hypervisor.
- schedules define the type of backup - full or incremental
- the approach we highly recommend is to create a schedule for periodic full backup
  and always assign at least 1 such schedule in backup SLAs
- in order to create incremental backups, you always need to have at least 1 incremental
  backup schedule and run at least one full backup
- in most virtualization platforms supported by Storware Backup & Recovery, it is
  required to keep the last snapshot for future incremental backups
- there is no limit to the number of policies you can create
- there is no limit to the number of virtual machines a user can add to the policy
- the limit of the number of virtual machines that can be added to Storware Backup
  and Recovery is 10000. This is the overall maximum value of protected objects that
  the server can scale to
- To perform a manual backup, target Storage Provider instance must be assigned to
  Backup SLA
- Always execute inventory synchronization at least once from each hypervisor.
- Snapshot management for on-demand or scheduled operations is not available until
  the storage instance has a snapshot management policy assigned to it
- Go to the Backup SLAs section to learn about how to configure a backup of your organization's
  data.
- Snapshot management for on-demand or scheduled operations is not available until
  the virtual machine has a snapshot management policy assigned to it.
- Requires setup of connected app in Storware
- May return nulls in deeply nested fields
- Backup of multiple storage providers is supported.
- Full and incremental backups can be executed.
- There must be at least one Backup SLAs policy on Storware Backup & Recovery server
  to do a backup.
- the approach we highly recommend is to create a schedule for periodic full backup
  and always assign at least 1 such schedule in the backup SLAs
- in order to create incremental backups, you need to always have at least 1 incremental
  backup schedule and run at least one full backup
- You need to specify Execution Type, Timeout, Command arguments, Data export, Source
  type, and Parameters.
- Node instances are a list of the Storware Backup & Recovery nodes that currently
  exist in your environment.
- The only requirement is to allow Storware Backup & Recovery to execute a set of
  commands over SSH or on the node to access data remotely.
- Execution Type - either on the Node or a command to be executed remotely.
- Timeout - for script/command execution - make sure to have this timeout set to a
  value high enough to allow your command to complete its execution.
- Command arguments - all arguments should be provided separately - Storware Backup
  & Recovery assumes that they can contain spaces.
- Data export - this switch allows you to export (or not) data that will be generated
  by the command.
- Source type - FILE or STREAM.
- Node status update interval - how often nodes should update their status
- Backup history retention - how long should the history of backups be kept (even
  removed from backup provider)
- Task retention (in console) - how long finished/failed tasks should be kept in the
  console in UI/CLI
- Periodic inventory synchronizarion interval - how often Storware Backup & Recovery
  should scan for changes in VM inventory on HV/HVMs and Microsoft 365 users accounts,
  sites, and teams
- Old backups removal time - time, when daily backup destination cleanup should be
  invoked (for all backup destinations)
- Old snapshots removal time - time, when daily snapshots cleanup should be invoked
  (for all VMs with any policy assigned)
- Session timeout [min] - Session timeout [min] - the time after which you will be
  logged out of the WebUI
- Default paging size - Default value of items shown on lists
- Format time - you can choose between 12h and 24h time format
- The notification center provides an overview of alerts and notifications.
- 'Messages have been divided into three types: Information, Warning, Critical.'
- Permissions for various operations such as Read, Write, and Delete across different
  entities.
- Periodic inventory synchronization interval - how often Storware Backup & Recovery
  should scan for changes in VM inventory on HV/HVMs and Microsoft 365 users accounts,
  sites, and teams
- From Storware Backup & Recovery version 5.0, there is a possibility to send notifications
  to the Slack channel.
- 'Body of notification will contain two fields: subject and messages.'
- Allows creation of mailing lists for sending group report e-mails.
- Recipients can be added and saved to the mailing list.
- If you are using Storware Endpoint virtual appliance, please change the Server address
  configuration.
- To use the SSL connection between Endpoint Server, desktop clients, and IBM Spectrum
  Protect server, you have to upload the correct SP certificate.
- Allows control over the internal database backup creation process.
- Confirm the settings with the Save button.
- Requires a valid OAuth token to access any endpoint.
- Requires cookies for session management.
- Endpoints may require specific GUIDs for operations.
- Integration with the Openstack interface
- Allows performing basic operations without logging into the Storware Backup & Recovery
  dashboard
- You need to restart your Horizon HTTP server after installation
- Minimum requirements include git, python3-yaml packages, and an internet connection
- You need to restart your Horizon HTTP server after installation.
- After refreshing the dashboard site, you should see Storware Backup & Recovery tab
  in the Openstack menu.
- This rewrite rule may need adjustment based on your HAProxy/ReverseProxy setup.
- Storware Backup & Recovery log directory path is /opt/vprotect/logs - this is the
  first place to check for the root cause of errors. All log files are also accessible
  from Logs sections in web UI.
- CLI interface records messages in vprotect_client.log files under the subdirectory
  with the same name as the node. In the same directory, you can also find vprotect_daemon.log
  files that contain all engine-related messages.
- The default value for the logging level is INFO.
- Set the value to INFO, DEBUG or TRACE.
- The default value for the logging level is INFO
- Set the value to INFO, DEBUG or TRACE
- If you want to use Syslogs in both Storware Backup & Recovery Server and Node you
  need to use two different udp ports and specify them in /etc/rsyslog.conf
- Highly recommended to set up periodic DB backup on Storware Backup & Recovery Server.
- In case of a complete loss of the Storware Backup & Recovery Server, reinstall the
  server and restore the database.
- Task cancellation process will not be reflected in immediate task failure - task
  state will be changed to cancelled and only when the engine checks its state again
  will it initiate the cancellation operation - some platforms may even require data
  transfer to be completed first
- Storage statistics are updated after each backup or the clean old backups job -
  this data may not be up-to-date all the time
- Complete command cannot be provided as a single string. Commands need to have their
  arguments provided as separate entries (by clicking on the **Add command arg** button).
  Commands are directly executed using OS-level calls so shell operators are not supported
  directly.
- Tasks will usually be executed according to the limits set on the node and only
  if node is running and has available space on the staging
- OpenStack with disk-attachment backup strategy (cinder) - 3.9.2 only supports Ceph
  RBD as a storage backend
- VMs being backed up must have virtual disks as QCOW2/RAW files or LVM volumes
- Snapshots on KVM hypervisors are made using libvirt (QCOW2/RAW files) or LVM snapshots
  and are created per volume basis; this operation may not be atomic if multiple drives
  are used
- Incremental backups will be performed only on running VMs. libvirt doesn't allow
  blockcommit on a power-down VM so snapshot wouldn't be removed.
- The backup provider's paths must be mounted and available ahead - you should provide
  the path just to the mount point, without any protocol specification
- When backup completes or when the clean old backups job is performed, Storware Backup
  & Recovery marks non-present backups as removed (if any of the files that were part
  of the backup are not present). This may also happen if your storage was temporarily
  not available.
- Restore may fail due to insufficient storage space in the Hypervisor Storage used
  as a target because of usage information that is not up to date. Usage statistics
  are updated only with inventory synchronization job
- The SSH transfer rate may drop in some environments when used intensively over a
  longer time.
- For Amazon EC2 some instances require the original base image to be restored - this
  is especially true for Windows-based clients where license relates to the original
  disk image.
- Notice that vProtect needs sometimes to transfer EBS volumes between AZ if it resides
  in a different AZ then the node - AWS charges for intra-AZ transfers.
- The number of concurrent tasks are configured in Node Configuration -> Tasks section.
  These limits apply to all nodes that use this particular configuration.
- All of the configuration parameters in Hypervisors tab in Node Configuration are
  applied to all nodes with this configuration - regardless of which hypervisor it
  is attached to.
- In some cases, it may happen that the same storage was previously detected with
  a different setup and remained in the database.
- The estimated backup size of a policy is computed based only on known backup sizes
  and extrapolated to the rest of the VMs in the group.
- Transfer NIC is not used in incremental backups when the CBT strategy is invoked
  - Citrix/xcp-ng may require NBD to be exposed by the master.
- SSH Transfer for RHV usually requires root permissions on the hypervisor in order
  to activate/deactivate LVM volumes for the backup.
- Storware Backup & Recovery using SSH Transfer for RHV environments needs to be able
  to access all hypervisors in the cluster - as it may happen that the created disk
  is available only on a subset of them and needs to be transferred or recovered only
  by using this specific hypervisor.
- Storware Backup & Recovery 3.9.2 only supports volumes residing on the storage containers
  - VGs are not supported yet.
- Storware Backup & Recovery is able to perform backups by using APIs provided by
  Prism Element only - Prism Central doesn't offer a backup API.
- Intensive workload on the VM may affect backup consistency when using crash consistent
  backup.
- RAW backups allow Storware Backup & Recovery to share them over iSCSI. If backups
  are in other formats (such as QCOW2), these cannot currently be shared over iSCSI.
- Only 1 backup and 1 snapshot management policy can be assigned to a given VM.
- Currently, each schedule can only be assigned to a single rule within the same policy.
- The staging space is an integral part of a node - this allows to mix backup strategies,
  especially based on the export storage domain/repository approach with other methods
  and file system scanning for future file-level restores.
- At the OS level, Storware Backup & Recovery requires significant permissions to
  be able to manipulate disks, scan for file systems, mount them, expose resources
  over iSCSI, operate on block devices (NBD/iSCSI/RBD) and more.
- Qcow2 virtual machines are required to use the new Proxmox VE backup strategy -
  Change block tracking ( CBT ).
- At the moment, we do not support the 'Dirty Bitmaps' function, therefore we require
  the last snapshot to be left for incremental backups.
- Storware Backup & Recovery supports only one node assigned to the Storage Provider,
  which means that backup of significantly big volumes from bigger storage providers,
  for example Ceph RBD etc. will require a high performing node and cannot be scaled
  out by adding nodes.
- Restore to RHV using the SPARSE disk allocation format is not supported if backup
  files are in RAW format and the destination storage domain type is in either Fibre
  Channel or iSCSI.
- If the site has been deleted from the Bin, only site logic can be restored. Links
  added in the deleted site are not restored.
- Sometimes after restoring the site from the template, despite the lack of errors
  in the logs, the page template is not set.
- Sometimes after restoring the site, you may see 'You need permission to access this
  site' message.
- After restoring the site, the correct images are not visible everywhere.
- Complete command cannot be provided as a single string. Commands need to have their
  arguments provided as separate entries (by clicking on the **Add command arg** button).
- When backup completes or when the clean old backups job is performed, Storware Backup
  & Recovery marks non-present backups as removed (if any of the files that were part
  of the backup are not present).
- Restore may fail due to insufficient storage space in the Hypervisor Storage used
  as a target because of usage information that is not up to date.
- For Amazon EC2 some instances require the original base image to be restored - this
  is especially true for Windows-based clients.
- The number of concurrent tasks are configured in Node Configuration -> Tasks section.
- Storware Backup & Recovery using SSH Transfer for RHV environments needs to be able
  to access all hypervisors in the cluster.
- The staging space is an integral part of a node - this allows to mix backup strategies.
- At the OS level, Storware Backup & Recovery requires significant permissions to
  be able to manipulate disks.
- Storware Backup & Recovery supports only one node assigned to the Storage Provider.
- Restore to RHV using the SPARSE disk allocation format is not supported if backup
  files are in RAW format.
- If the site has been deleted from the Bin, only site logic can be restored.
- Links shared in chat are not working after restore.
- Integration with the Openstack interface allows performing basic operations without
  logging into the Storware Backup & Recovery dashboard.
- Requires setup of connected app in api
- Storware Backup & Recovery log directory path is /opt/vprotect/logs - this is the
  first place to check for the root cause of errors.
- All log files are also accessible from Logs sections in web UI.
- To use Syslog's with Storware Backup & Recovery Server and Node you need to use
  two different udp ports and specify them in /etc/rsyslog.conf
- If Storware Backup & Recovery doesn't work, use the last copy of the database left
  by default in '/tmp/vprotect_db.sql.gz' on the server host.
- Task cancellation process will not be reflected in immediate task failure - task
  state will be changed to cancelled and only when the engine checks its state again
  will it initiate the cancellation operation.
- Storage statistics are updated after each backup or the clean old backups job -
  this data may not be up-to-date all the time.
- Complete command cannot be provided as a single string. Commands need to have their
  arguments provided as separate entries.
- Tasks will usually be executed according to the limits set on the node and only
  if node is running and has available space on the staging.
- OpenStack with disk-attachment backup strategy (cinder) - 3.9.2 only supports Ceph
  RBD as a storage backend.
- VMs being backed up must have virtual disks as QCOW2/RAW files or LVM volumes.
- Snapshots on KVM hypervisors are made using libvirt (QCOW2/RAW files) or LVM snapshots
  and are created per volume basis.
- Incremental backups will be performed only on running VMs.
- The backup provider's paths must be mounted and available ahead.
- When backup completes or when the clean old backups job is performed, Storware Backup
  & Recovery marks non-present backups as removed.
- Restore may fail due to insufficient storage space in the Hypervisor Storage used
  as a target.
- For Amazon EC2 some instances require the original base image to be restored.
- Notice that vProtect needs sometimes to transfer EBS volumes between AZ if it resides
  in a different AZ then the node.
- All of the configuration parameters in Hypervisors tab in Node Configuration are
  applied to all nodes with this configuration.
- Transfer NIC is not used in incremental backups when the CBT strategy is invoked.
- SSH Transfer for RHV usually requires root permissions on the hypervisor.
- Storware Backup & Recovery 3.9.2 only supports volumes residing on the storage containers.
- Storware Backup & Recovery is able to perform backups by using APIs provided by
  Prism Element only.
- RAW backups allow Storware Backup & Recovery to share them over iSCSI.
- The staging space is an integral part of a node.
- Qcow2 virtual machines are required to use the new Proxmox VE backup strategy.
- Complete command cannot be provided as a single string. Commands need to have their
  arguments provided as separate entries (by clicking on the Add command arg button).
  Commands are directly executed using OS-level calls so shell operators are not supported
  directly.
- For Amazon EC2 some instances require the original base image to be restored - this
  is especially true for Windows-based clients where license relates to the original
  disk image. If an image is not left, vProtect can only restore such guests by creating
  a new one from the new image (as a root device) that is available and attach data
  volumes.
- The number of concurrent tasks are configured in Node Configuration -> Tasks section.
  These limits apply to all nodes that use this particular configuration. Currently
  there is no global setting to limit the number of tasks for all of the nodes in
  the environment.
- All of the configuration parameters in Hypervisors tab in Node Configuration are
  applied to all nodes with this configuration - regardless of which hypervisor it
  is attached to. This implies that Proxmox settings such as compression will have
  to be the same on all hypervisors handled by nodes with the same configuration assigned
  and will have to be the same on all of these hypervisors.
- The estimated backup size of a policy is computed based only on known backup sizes
  and extrapolated to the rest of the VMs in the group. This implies that estimation
  will use average backup size and multiply it by the number of all VMs in the group.
  Even though disk sizes are known it is not always the same as the size of the backups
  (especially considering compression or the fact that some strategies require chains
  of backup deltas to be exported)
- CBT backup strategy requires Qcow2 virtual machines to use the new Proxmox VE backup
  strategy.
- Storware Backup & Recovery supports only one node assigned to the Storage Provider,
  which means that backup of significantly big volumes from bigger storage providers
  will require a high performing node and cannot be scaled out by adding nodes.
errors:
- 'Incorrect syntax: Missing required option'
- Backup (full) with task priority (0-100, 50 = default) not specified
- 'GUID not found: Check the GUID provided.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck username and password'
- '403 Forbidden: Insufficient permissions'
- '500 Internal Server Error: Check server logs for more details'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck user credentials.'
- '404 Not Found: Ensure the VM exists and is accessible.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Restore to RHV using SPARSE disk allocation format is not supported if backup files
  are in RAW format and destination storage domain type in either Fibre Channel or
  iSCSI.
- '400 Bad Request: Check API request format'
- '404 Not Found: Verify endpoint and resource'
- '500 Internal Server Error: Contact support'
- Incremental backups are not supported for disk attachment.
- Requires SSH credentials or SSH keys for each of the hypervisors.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- Incremental backups are not supported.
- The biggest issue is that all traffic passes via the OLVM manager, which may impact
  the transfer rates.
- If Storage Class used by volume does not support snapshots, all deployment pods
  will be paused during the backup operation.
- If Storage Class used by volume do not support snapshots, all deployment pods will
  be paused during the backup operation.
- Ensure correct UID and GID for NFS exports.
- Backup/Restore of hidden shares on Nutanix Files with SMB are not supported
- '401 Unauthorized: Invalid credentials provided.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Re-login required for valid session.'
auth_info:
  mentioned_objects:
  - Keycloak
  - LDAP
client:
  base_url: http://10.40.0.55:8080/api
  auth:
    username: admin
    password: vPr0tect
source_metadata: null
