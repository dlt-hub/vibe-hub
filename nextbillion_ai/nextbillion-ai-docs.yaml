resources:
- name: isochrone
  endpoint:
    path: /isochrone/json
    method: GET
    data_selector: features
- name: Build an Optimization Request
  endpoint:
    path: /optimization/v2
    method: POST
- name: Retrieve Optimized Solution
  endpoint:
    path: /optimization/v2/result
    method: GET
- name: Re-optimize An Existing Solution
  endpoint:
    path: /optimization/re_optimization
    method: POST
- name: build_optimization_request
  endpoint:
    path: /optimization/v2
    method: POST
- name: retrieve_optimized_solution
  endpoint:
    path: /optimization/v2/result
    method: GET
- name: re_optimize_existing_solution
  endpoint:
    path: /optimization/re_optimization
    method: POST
- name: build_optimization_request
  endpoint:
    path: /optimization/v2
    method: POST
- name: retrieve_optimized_solution
  endpoint:
    path: /optimization/v2/result
    method: GET
- name: re_optimize_existing_solution
  endpoint:
    path: /optimization/re_optimization
    method: POST
- name: driver_assignment
  endpoint:
    path: /optimization/driver-assignment/v1
    method: POST
- name: Build an Optimization Request
  endpoint:
    path: /v2
    method: POST
- name: Retrieve Optimized Solution
  endpoint:
    path: /v2/result
    method: GET
- name: Re-optimize An Existing Solution
  endpoint:
    path: /re_optimization
    method: POST
- name: clustering_result
  endpoint:
    path: /clustering/result
    method: GET
    data_selector: result
- name: clustering
  endpoint:
    path: /clustering
    method: POST
- name: Directions Flexible API
  endpoint:
    path: /directions/json
    method: GET
    params:
      option: flexible
- name: Directions Fast API
  endpoint:
    path: /directions/json
    method: GET
    params: {}
- name: clustering_result
  endpoint:
    path: /clustering/result
    method: GET
    data_selector: result
    params:
      id: '{id}'
      key: <your_api_key>
- name: clustering
  endpoint:
    path: /clustering
    method: POST
    data_selector: task_id
    params:
      key: <your_api_key>
- name: Distance Matrix Flexible
  endpoint:
    path: /distancematrix/json
    method: GET
    data_selector: results
    params:
      option: flexible
- name: Distance Matrix Fast
  endpoint:
    path: /distancematrix/json
    method: GET
    data_selector: results
    params: {}
- name: snapToRoads
  endpoint:
    path: /snapToRoads/json
    method: GET
    data_selector: snappedPoints
    params: {}
- name: directions_flexible
  endpoint:
    path: /directions/json
    method: GET
    params:
      option: flexible
- name: directions_fast
  endpoint:
    path: /directions/json
    method: GET
    params: {}
- name: navigation_flexible
  endpoint:
    path: /json
    method: GET
    data_selector: routes
    params:
      option: flexible
- name: navigation_fast
  endpoint:
    path: /json
    method: GET
    data_selector: routes
    params: {}
- name: Distance Matrix Flexible
  endpoint:
    path: /json?option=flexible&key={your_api_key}
    method: GET
- name: Distance Matrix Fast
  endpoint:
    path: /json?key={your_api_key}
    method: GET
- name: route_report
  endpoint:
    path: /route_report
    method: POST
- name: snapToRoads
  endpoint:
    path: /snapToRoads/json
    method: GET
    data_selector: snappedPoints
    params:
      key: <your_api_key>
- name: NbmapNavigation
  endpoint:
    path: /navigation/NbmapNavigation
    method: GET
    data_selector: records
- name: NbmapCoreNavigation
  endpoint:
    path: /navigation/NbmapCoreNavigation
    method: GET
    data_selector: records
- name: NbMapDirection
  endpoint:
    path: /navigation/NbMapDirection
    method: GET
    data_selector: records
- name: navigation_flexible
  endpoint:
    path: /json
    method: GET
    data_selector: routes
    params:
      option: flexible
- name: navigation_fast
  endpoint:
    path: /json
    method: GET
    data_selector: routes
    params: {}
- name: route_report
  endpoint:
    path: /route_report
    method: POST
- name: asset
  endpoint:
    path: /asset
    method: POST
    data_selector: data
    params: {}
- name: get_asset
  endpoint:
    path: /asset/{id}
    method: GET
    data_selector: data
    params: {}
- name: update_asset
  endpoint:
    path: /asset/{id}
    method: PUT
    data_selector: status
    params: {}
- name: delete_asset
  endpoint:
    path: /asset/{id}
    method: DELETE
    data_selector: status
    params: {}
- name: get_asset_list
  endpoint:
    path: /asset/list
    method: GET
    data_selector: data.list
    params: {}
- name: upload_asset_location
  endpoint:
    path: /asset/{id}/track
    method: POST
    data_selector: status
    params: {}
- name: search_around
  endpoint:
    path: /search/around
    method: GET
    data_selector: data
    params: {}
- name: search_bound
  endpoint:
    path: /search/bound
    method: GET
    data_selector: data
    params: {}
- name: search_polygon
  endpoint:
    path: /search/polygon
    method: GET
    data_selector: data
    params: {}
- name: polygon_search
  endpoint:
    path: /skynet/search/polygon
    method: POST
    data_selector: data
    params: {}
- name: create_monitor
  endpoint:
    path: /skynet/monitor
    method: POST
    data_selector: data
    params: {}
- name: get_monitor
  endpoint:
    path: /skynet/monitor/{id}
    method: GET
    data_selector: data
    params: {}
- name: update_monitor
  endpoint:
    path: /skynet/monitor/{id}
    method: PUT
    data_selector: data
    params: {}
- name: get_monitor_list
  endpoint:
    path: /skynet/monitor/list
    method: GET
    data_selector: data
    params: {}
- name: delete_monitor
  endpoint:
    path: /skynet/monitor/{id}
    method: DELETE
    data_selector: data
    params: {}
- name: start_trip
  endpoint:
    path: /skynet/trip/start
    method: POST
    data_selector: data
    params: {}
- name: get_trip
  endpoint:
    path: /skynet/trip/{id}
    method: GET
    data_selector: data
    params: {}
- name: update_trip
  endpoint:
    path: /skynet/trip/{id}
    method: PUT
    data_selector: data
    params: {}
- name: end_trip
  endpoint:
    path: /skynet/trip/end
    method: POST
    data_selector: data
    params: {}
- name: get_trip_summary
  endpoint:
    path: /skynet/trip/{id}/summary
    method: GET
    data_selector: data
    params: {}
- name: delete_trip
  endpoint:
    path: /skynet/trip/{id}
    method: DELETE
    data_selector: data
    params: {}
- name: namespaced_apikeys
  endpoint:
    path: /namespaced-apikeys
    method: POST
- name: delete_namespace_key
  endpoint:
    path: /namespaced-apikeys
    method: DELETE
- name: asset
  endpoint:
    path: /asset
    method: POST
    data_selector: data
    params: {}
- name: get_asset
  endpoint:
    path: /asset/{id}
    method: GET
    data_selector: data
    params: {}
- name: update_asset
  endpoint:
    path: /asset/{id}
    method: PUT
    data_selector: data
    params: {}
- name: delete_asset
  endpoint:
    path: /asset/{id}
    method: DELETE
    data_selector: data
    params: {}
- name: get_asset_list
  endpoint:
    path: /asset/list
    method: GET
    data_selector: data
    params: {}
- name: track_asset
  endpoint:
    path: /asset/{id}/track
    method: POST
    data_selector: data
    params: {}
- name: get_last_location
  endpoint:
    path: /asset/{id}/location/last
    method: GET
    data_selector: data
    params: {}
- name: event_history
  endpoint:
    path: /asset/{id}/event/list
    method: GET
    data_selector: data
    params: {}
- name: search_around
  endpoint:
    path: /search/around
    method: GET
    data_selector: data
    params: {}
- name: search_bound
  endpoint:
    path: /search/bound
    method: GET
    data_selector: data
    params: {}
- name: search_polygon
  endpoint:
    path: /search/polygon
    method: GET
    data_selector: data
    params: {}
- name: asset
  endpoint:
    path: /asset
    method: POST
    data_selector: data
    params: {}
- name: get_asset
  endpoint:
    path: /asset/{id}
    method: GET
    data_selector: data
    params: {}
- name: update_asset
  endpoint:
    path: /asset/{id}
    method: PUT
    data_selector: status
    params: {}
- name: delete_asset
  endpoint:
    path: /asset/{id}
    method: DELETE
    data_selector: status
    params: {}
- name: get_asset_list
  endpoint:
    path: /asset/list
    method: GET
    data_selector: data
    params: {}
- name: track_asset
  endpoint:
    path: /asset/{id}/track
    method: POST
    data_selector: status
    params: {}
- name: search_around
  endpoint:
    path: /search/around
    method: GET
    data_selector: data
    params: {}
- name: search_bound
  endpoint:
    path: /search/bound
    method: GET
    data_selector: data
    params: {}
- name: search_polygon
  endpoint:
    path: /search/polygon
    method: GET
    data_selector: data
    params: {}
- name: polygon_search
  endpoint:
    path: /skynet/search/polygon
    method: POST
    data_selector: data
    params: {}
- name: monitor_create
  endpoint:
    path: /skynet/monitor
    method: POST
    data_selector: data
    params: {}
- name: monitor_get
  endpoint:
    path: /skynet/monitor/{id}
    method: GET
    data_selector: data
    params: {}
- name: trip_start
  endpoint:
    path: /skynet/trip/start
    method: POST
    data_selector: data
    params: {}
- name: trip_get
  endpoint:
    path: /skynet/trip/{id}
    method: GET
    data_selector: data
    params: {}
- name: polygon_search
  endpoint:
    path: /search/polygon
    method: POST
- name: create_monitor
  endpoint:
    path: /monitor
    method: POST
- name: get_monitor
  endpoint:
    path: /monitor/{id}
    method: GET
- name: update_monitor
  endpoint:
    path: /monitor/{id}
    method: PUT
- name: get_monitor_list
  endpoint:
    path: /monitor/list
    method: GET
- name: delete_monitor
  endpoint:
    path: /monitor/{id}
    method: DELETE
- name: start_trip
  endpoint:
    path: /trip/start
    method: POST
- name: get_trip
  endpoint:
    path: /trip/{id}
    method: GET
- name: update_trip
  endpoint:
    path: /trip/{id}
    method: PUT
- name: end_trip
  endpoint:
    path: /trip/end
    method: POST
- name: get_trip_summary
  endpoint:
    path: /trip/{id}/summary
    method: GET
- name: delete_trip
  endpoint:
    path: /trip/{id}
    method: DELETE
- name: webhook_config
  endpoint:
    path: /config
    method: GET
- name: test_webhook
  endpoint:
    path: /config/testwebhook
    method: POST
- name: namespace_key
  endpoint:
    path: /namespaced-apikeys
    method: POST
- name: delete_namespace_key
  endpoint:
    path: /namespaced-apikeys
    method: DELETE
- name: namespaced-apikeys
  endpoint:
    path: /namespaced-apikeys
    method: POST
- name: delete-namespace-key
  endpoint:
    path: /namespaced-apikeys
    method: DELETE
- name: asset
  endpoint:
    path: /asset
    method: POST
    data_selector: data
    params: {}
- name: get_asset
  endpoint:
    path: /asset/{id}
    method: GET
    data_selector: data
    params: {}
- name: update_asset
  endpoint:
    path: /asset/{id}
    method: PUT
    data_selector: status
    params: {}
- name: delete_asset
  endpoint:
    path: /asset/{id}
    method: DELETE
    data_selector: status
    params: {}
- name: get_asset_list
  endpoint:
    path: /asset/list
    method: GET
    data_selector: data.list
    params: {}
- name: track_asset
  endpoint:
    path: /asset/{id}/track
    method: POST
    data_selector: status
    params: {}
- name: search_around
  endpoint:
    path: /search/around
    method: GET
    data_selector: data
    params: {}
- name: search_bound
  endpoint:
    path: /search/bound
    method: GET
    data_selector: data
    params: {}
- name: search_polygon
  endpoint:
    path: /search/polygon
    method: GET
    data_selector: data
    params: {}
- name: create_geofence
  endpoint:
    path: /geofence
    method: POST
    data_selector: data
- name: batch_create_geofences
  endpoint:
    path: /geofence/batch
    method: POST
    data_selector: data
- name: get_geofence
  endpoint:
    path: /geofence/{id}
    method: GET
    data_selector: data
- name: get_multiple_geofences
  endpoint:
    path: /geofence/batch
    method: GET
    data_selector: data
- name: get_geofence_list
  endpoint:
    path: /geofence/list
    method: GET
    data_selector: data
- name: update_geofence
  endpoint:
    path: /geofence/{id}
    method: PUT
    data_selector: data
- name: geofence_contains
  endpoint:
    path: /geofence/contain
    method: GET
    data_selector: data
- name: delete_geofence
  endpoint:
    path: /geofence/{id}
    method: DELETE
    data_selector: data
- name: batch_delete_geofences
  endpoint:
    path: /geofence/batch
    method: DELETE
    data_selector: data
- name: route_reconstruction
  endpoint:
    path: /route-reconstruction
    method: POST
    data_selector: route
    params: {}
- name: polygon_search
  endpoint:
    path: /search/polygon
    method: POST
- name: monitor
  endpoint:
    path: /monitor
    method: POST
- name: get_monitor
  endpoint:
    path: /monitor/{id}
    method: GET
- name: update_monitor
  endpoint:
    path: /monitor/{id}
    method: PUT
- name: get_monitor_list
  endpoint:
    path: /monitor/list
    method: GET
- name: delete_monitor
  endpoint:
    path: /monitor/{id}
    method: DELETE
- name: start_trip
  endpoint:
    path: /trip/start
    method: POST
- name: get_trip
  endpoint:
    path: /trip/{id}
    method: GET
- name: update_trip
  endpoint:
    path: /trip/{id}
    method: PUT
- name: end_trip
  endpoint:
    path: /trip/end
    method: POST
- name: summary_trip
  endpoint:
    path: /trip/{id}/summary
    method: GET
- name: delete_trip
  endpoint:
    path: /trip/{id}
    method: DELETE
- name: namespace_key_creation
  endpoint:
    path: /namespaced-apikeys
    method: POST
- name: namespace_key_deletion
  endpoint:
    path: /namespaced-apikeys
    method: DELETE
- name: AssetTracking
  endpoint:
    path: /api/assetTracking
    method: POST
- name: create_geofence
  endpoint:
    path: /geofence
    method: POST
- name: batch_create_geofences
  endpoint:
    path: /geofence/batch
    method: POST
- name: get_geofence
  endpoint:
    path: /geofence/{id}
    method: GET
- name: get_multiple_geofences
  endpoint:
    path: /geofence/batch
    method: GET
- name: get_geofence_list
  endpoint:
    path: /geofence/list
    method: GET
- name: update_geofence
  endpoint:
    path: /geofence/{id}
    method: PUT
- name: geofence_contains
  endpoint:
    path: /geofence/contain
    method: GET
- name: delete_geofence
  endpoint:
    path: /geofence/{id}
    method: DELETE
- name: batch_delete_geofences
  endpoint:
    path: /geofence/batch
    method: DELETE
- name: NbAssetTracking
  endpoint:
    path: /api/asset-tracking
    method: POST
    data_selector: assets
    params: {}
- name: route_reconstruction
  endpoint:
    path: /route-reconstruction
    method: POST
    data_selector: route
    params:
      key: <your_api_key>
- name: routes
  endpoint:
    path: /fleetify/routes
    method: POST
    data_selector: data
    params: {}
- name: redispatch_routes
  endpoint:
    path: /fleetify/v2/routes/{route_id}/redispatch
    method: POST
    data_selector: data
    params: {}
- name: Asset Creation
  endpoint:
    path: /createAsset
    method: POST
- name: Bind Asset
  endpoint:
    path: /bindAsset
    method: POST
- name: Start Tracking
  endpoint:
    path: /startTracking
    method: POST
- name: Stop Tracking
  endpoint:
    path: /stopTracking
    method: POST
- name: dispatch_route
  endpoint:
    path: /fleetify/routes
    method: POST
    data_selector: data
- name: modify_route
  endpoint:
    path: /fleetify/v2/routes/{route_id}/redispatch
    method: POST
    data_selector: data
- name: AssetTracking
  endpoint:
    path: /api/assetTracking
    method: POST
    data_selector: data
- name: create_document_template
  endpoint:
    path: /fleetify/document_templates
    method: POST
- name: retrieve_document_template
  endpoint:
    path: /fleetify/document_templates/{id}
    method: GET
- name: update_document_template
  endpoint:
    path: /fleetify/document_templates/{id}
    method: PUT
- name: retrieve_all_document_templates
  endpoint:
    path: /fleetify/document_templates
    method: GET
- name: delete_document_template
  endpoint:
    path: /fleetify/document_templates/{id}
    method: DELETE
- name: Asset Creation
  endpoint:
    path: /tracking/asset-creation
    method: POST
    data_selector: data
- name: Asset Binding
  endpoint:
    path: /tracking/asset-binding
    method: POST
    data_selector: data
- name: Location Information Callback
  endpoint:
    path: /tracking/location-info
    method: GET
    data_selector: data
- name: Tracking Status Callback
  endpoint:
    path: /tracking/status-callback
    method: GET
    data_selector: data
- name: Start Tracking
  endpoint:
    path: /tracking/start
    method: POST
    data_selector: data
- name: Stop Tracking
  endpoint:
    path: /tracking/stop
    method: POST
    data_selector: data
- name: Asset Details Retrieval
  endpoint:
    path: /tracking/asset-details
    method: GET
    data_selector: data
- name: document_templates
  endpoint:
    path: /fleetify/document_templates
    method: POST
    data_selector: status
    params: {}
- name: retrieve_document_template
  endpoint:
    path: /fleetify/document_templates/{id}
    method: GET
    data_selector: status
    params: {}
- name: update_document_template
  endpoint:
    path: /fleetify/document_templates/{id}
    method: PUT
    data_selector: status
    params: {}
- name: retrieve_all_document_templates
  endpoint:
    path: /fleetify/document_templates
    method: GET
    data_selector: status
    params: {}
- name: delete_document_template
  endpoint:
    path: /fleetify/document_templates/{id}
    method: DELETE
    data_selector: status
    params: {}
- name: routes
  endpoint:
    path: /fleetify/routes
    method: POST
- name: redispatch
  endpoint:
    path: /fleetify/v2/routes/{route_id}/redispatch
    method: POST
- name: tiles
  endpoint:
    path: /tiles/{tilesId}/{z}/{x}/{y}.{format}
    method: GET
    params:
      key: '{your_api_key}'
- name: tiles
  endpoint:
    path: /tiles/{tilesId}/{z}/{x}/{y}.{format}
    method: GET
    params:
      key: '{your_api_key}'
- name: routes
  endpoint:
    path: /fleetify/routes
    method: POST
- name: redispatch_routes
  endpoint:
    path: /fleetify/v2/routes/{route_id}/redispatch
    method: POST
- name: raster_tiles
  endpoint:
    path: /maps/{mapId}/{tileSize}/{z}/{x}/{y}{scale}.{format}
    method: GET
- name: center_based_image
  endpoint:
    path: /maps/{mapId}/static/{lat},{lon},{zoom}/{width}x{height}{scale}.{format}
    method: GET
- name: bounds_based_image
  endpoint:
    path: /maps/{mapId}/static/{miny},{minx},{maxy},{maxx}/{width}x{height}{scale}.{format}
    method: GET
- name: auto_fitted_image
  endpoint:
    path: /maps/{mapId}/static/auto/{width}x{height}{scale}.{format}
    method: GET
- name: create_document_template
  endpoint:
    path: /fleetify/document_templates
    method: POST
- name: retrieve_document_template
  endpoint:
    path: /fleetify/document_templates/{id}
    method: GET
- name: update_document_template
  endpoint:
    path: /fleetify/document_templates/{id}
    method: PUT
- name: retrieve_all_document_templates
  endpoint:
    path: /fleetify/document_templates
    method: GET
- name: delete_document_template
  endpoint:
    path: /fleetify/document_templates/{id}
    method: DELETE
- name: create_document_template
  endpoint:
    path: /fleetify/document_templates
    method: POST
- name: retrieve_document_template
  endpoint:
    path: /fleetify/document_templates/{id}
    method: GET
- name: update_document_template
  endpoint:
    path: /fleetify/document_templates/{id}
    method: PUT
- name: retrieve_all_document_templates
  endpoint:
    path: /fleetify/document_templates
    method: GET
- name: delete_document_template
  endpoint:
    path: /fleetify/document_templates/{id}
    method: DELETE
- name: tiles
  endpoint:
    path: /tiles/{tilesId}/{z}/{x}/{y}.{format}
    method: GET
- name: map
  endpoint:
    path: /maps/api/js
    method: GET
    data_selector: map
    params: {}
- name: maps
  endpoint:
    path: /maps/api
    method: GET
    data_selector: data
    params: {}
- name: tiles
  endpoint:
    path: /tiles/{tilesId}/{z}/{x}/{y}.{format}
    method: GET
    params:
      key: '{your_api_key}'
- name: segments
  endpoint:
    path: /map/segments
    method: POST
- name: raster_tiles
  endpoint:
    path: /maps/{mapId}/{tileSize}/{z}/{x}/{y}{scale}.{format}
    method: GET
    data_selector: tiles
    params: {}
- name: segments
  endpoint:
    path: /map/segments
    method: POST
- name: center_based_image
  endpoint:
    path: /maps/{mapId}/static/{lat},{lon},{zoom}/{width}x{height}{scale}.{format}
    method: GET
- name: bounds_based_image
  endpoint:
    path: /maps/{mapId}/static/{miny},{minx},{maxy},{maxx}/{width}x{height}{scale}.{format}
    method: GET
- name: auto_fitted_image
  endpoint:
    path: /maps/{mapId}/static/auto/{width}x{height}{scale}.{format}
    method: GET
- name: Create a new Restriction
  endpoint:
    path: /restrictions/{restriction_type}
    method: POST
- name: Update a Restriction
  endpoint:
    path: /restrictions/{id}
    method: PATCH
- name: Set state of a restriction by ID
  endpoint:
    path: /restrictions/{id}/state
    method: PUT
- name: Get Restrictions by bbox
  endpoint:
    path: /restrictions
    method: GET
- name: Get Restrictions by ID
  endpoint:
    path: /restrictions/{id}
    method: GET
- name: Get Restriction List
  endpoint:
    path: /restrictions/list
    method: GET
- name: Delete a Restriction
  endpoint:
    path: /restrictions/{id}
    method: DELETE
- name: Get available areas
  endpoint:
    path: /areas
    method: GET
- name: geocode
  endpoint:
    path: /geocode
    method: GET
    data_selector: items
    params:
      in: countryCode:USA
- name: Map
  endpoint:
    path: /maps/api/js
    method: GET
- name: geocode
  endpoint:
    path: /geocode
    method: GET
    data_selector: items
    params:
      in: countryCode:USA
      key: <your_api_key>
      at: 40.720685,-74.044772
      q: market
- name: map
  endpoint:
    path: /js
    method: GET
    data_selector: map
- name: reverse_geocode
  endpoint:
    path: /revgeocode
    method: GET
    data_selector: items
    params: {}
- name: search_place
  endpoint:
    path: /multigeocode/search
    method: POST
- name: add_place
  endpoint:
    path: /multigeocode/place
    method: POST
- name: get_place
  endpoint:
    path: /multigeocode/place
    method: POST
- name: update_place
  endpoint:
    path: /multigeocode/place/{docId}
    method: PUT
- name: delete_place
  endpoint:
    path: /multigeocode/place/{docId}
    method: DELETE
- name: batch_geocode
  endpoint:
    path: /geocode/batch
    method: POST
- name: Create a new Restriction
  endpoint:
    path: /restrictions/{restriction_type}
    method: POST
- name: Update a Restriction
  endpoint:
    path: /restrictions/{id}
    method: PATCH
- name: Set state of a restriction by ID
  endpoint:
    path: /restrictions/{id}/state
    method: PUT
- name: Get Restrictions by bbox
  endpoint:
    path: /restrictions
    method: GET
- name: Get Restrictions by ID
  endpoint:
    path: /restrictions/{id}
    method: GET
- name: Get Restriction List
  endpoint:
    path: /restrictions/list
    method: GET
- name: Delete a Restriction
  endpoint:
    path: /restrictions/{id}
    method: DELETE
- name: Get available areas
  endpoint:
    path: /areas
    method: GET
- name: autocomplete
  endpoint:
    path: /autocomplete
    method: GET
    data_selector: items
    params: {}
- name: autosuggest
  endpoint:
    path: /autosuggest
    method: GET
    data_selector: items
    params: {}
- name: geocode
  endpoint:
    path: /geocode
    method: GET
    data_selector: items
- name: place_lookup
  endpoint:
    path: /lookup
    method: GET
    data_selector: items
    params:
      id: place_id
- name: reverse_geocode
  endpoint:
    path: /revgeocode
    method: GET
    data_selector: items
    params: {}
- name: discover
  endpoint:
    path: /discover
    method: GET
- name: browse
  endpoint:
    path: /browse
    method: GET
- name: postal_code
  endpoint:
    path: /postalcode
    method: POST
    data_selector: places
- name: search_place
  endpoint:
    path: /multigeocode/search
    method: POST
    data_selector: results
- name: add_place
  endpoint:
    path: /multigeocode/place
    method: POST
    data_selector: results
- name: get_place
  endpoint:
    path: /multigeocode/place
    method: POST
    data_selector: results
- name: update_place
  endpoint:
    path: /multigeocode/place/{docId}
    method: PUT
    data_selector: results
- name: delete_place
  endpoint:
    path: /multigeocode/place/{docId}
    method: DELETE
    data_selector: results
- name: structured_geocode
  endpoint:
    path: /geocode/structured
    method: GET
    data_selector: items
    params:
      limit: '1'
      countryCode: USA
- name: geocode_batch
  endpoint:
    path: /geocode/batch
    method: POST
- name: points_of_interest
  endpoint:
    path: /orbis/alongroute
    method: POST
    data_selector: items
- name: autocomplete
  endpoint:
    path: /autocomplete
    method: GET
    params:
      key: '{your_api_key}'
- name: autosuggest
  endpoint:
    path: /autosuggest
    method: GET
    params:
      key: '{your_api_key}'
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    data_selector: data
- name: vehicles
  endpoint:
    path: /fleet/vehicles
    method: GET
    data_selector: data
- name: drivers
  endpoint:
    path: /fleet/drivers
    method: GET
    data_selector: data
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    data_selector: data
- name: vehicles
  endpoint:
    path: /fleet/vehicles
    method: GET
    data_selector: data
- name: drivers
  endpoint:
    path: /fleet/drivers
    method: GET
    data_selector: data
- name: place_lookup
  endpoint:
    path: /lookup
    method: GET
    data_selector: items
    params:
      id: '{place_id}'
      key: '{your_api_key}'
- name: routes
  endpoint:
    path: /fleet/routes
    method: POST
    data_selector: null
    params: {}
- name: tracking_data
  endpoint:
    path: /skynet/config
    method: GET
    data_selector: data.config.webhook
    params: {}
- name: discover
  endpoint:
    path: /discover
    method: GET
    data_selector: items
- name: browse
  endpoint:
    path: /browse
    method: GET
    data_selector: items
- name: service_appointment
  endpoint:
    path: /services/data/v58.0/query
    method: GET
    data_selector: records
    params:
      q: SELECT+AccountId,Address,AppointmentNumber,Id__c+FROM+ServiceAppointment
- name: service_resource
  endpoint:
    path: /services/data/v58.0/query
    method: GET
    data_selector: records
    params:
      q: SELECT+id__c,Name+FROM+ServiceResource
- name: postalcode
  endpoint:
    path: /postalcode
    method: POST
- name: dispatch_routes
  endpoint:
    path: /dispatches
    method: POST
    data_selector: result
    params: {}
- name: geocode_structured
  endpoint:
    path: /geocode/structured
    method: GET
    data_selector: items
    params:
      limit: '1'
      countryCode: USA
- name: vehicles
  endpoint:
    path: /driveri/v1/tenants/N546980211724797/vehicles
    method: GET
    data_selector: data.vehicles
    params: {}
- name: access_token
  endpoint:
    path: /driveri/v1/auth/token
    method: POST
    data_selector: ''
    params: {}
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    data_selector: data
- name: vehicles
  endpoint:
    path: /fleet/vehicles
    method: GET
    data_selector: data
- name: drivers
  endpoint:
    path: /fleet/drivers
    method: GET
    data_selector: data
- name: directions
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params:
      key: <your_api_key>
      origin: 33.16013470,-117.35264451
      destination: 33.15680673,-117.35078087
      mode: truck
      option: flexible
      truck_size: 213.36,300,213.36
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params:
      key: <your_api_key>
      origin: 33.16013470,-117.35264451
      destination: 33.15680673,-117.35078087
      mode: truck
      option: flexible
      truck_size: 213.36,300,213.36
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    data_selector: data
- name: vehicles
  endpoint:
    path: /fleet/vehicles
    method: GET
    data_selector: data
- name: drivers
  endpoint:
    path: /fleet/drivers
    method: GET
    data_selector: data
- name: route_optimization
  endpoint:
    path: /optimization/v2
    method: POST
    data_selector: result
- name: retrieve_optimization_result
  endpoint:
    path: /optimization/v2/result
    method: GET
    data_selector: result
- name: routes
  endpoint:
    path: /fleet/routes
    method: POST
    data_selector: result.routes
    params: {}
- name: tracking_data
  endpoint:
    path: /skynet/config
    method: GET
    data_selector: data.config.webhook
    params: {}
- name: directions
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params:
      origin: 39.30420612,-76.62259137
      destination: 39.30386899,-76.62362166
      option: flexible
      mode: truck
      avoid: uturn|sharp_turn
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params:
      origin: 39.30420612,-76.62259137
      destination: 39.30386899,-76.62362166
      option: flexible
      mode: truck
      avoid: uturn|sharp_turn
- name: service_appointment
  endpoint:
    path: /services/data/v58.0/query
    method: GET
    data_selector: records
    params:
      q: SELECT AccountId,Address,AppointmentNumber,Id__c FROM ServiceAppointment
- name: service_resource
  endpoint:
    path: /services/data/v58.0/query
    method: GET
    data_selector: records
    params:
      q: SELECT id__c,Name FROM ServiceResource
- name: directions
  endpoint:
    path: /directions/json
    method: GET
    params:
      key: <your_api_key>
      origin: 48.22539980,-101.29602541
      destination: 48.24027183,-101.29608570
      mode: truck
      option: flexible
      hazmat_type: circumstantial
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
    params:
      key: <your_api_key>
      origin: 48.22539980,-101.29602541
      destination: 48.24027183,-101.29608570
      mode: truck
      option: flexible
      hazmat_type: circumstantial
- name: dispatch_routes
  endpoint:
    path: /apiv1/dispatches
    method: POST
    data_selector: result
    params: {}
- name: route_optimization
  endpoint:
    path: /optimization/v2
    method: POST
    data_selector: result
    params: {}
- name: retrieve_optimization_solution
  endpoint:
    path: /optimization/v2/result
    method: GET
    data_selector: result
    params:
      id: 0b396bfd18961a45e938153d646572cc
- name: vehicles
  endpoint:
    path: /driveri/v1/tenants/N546980211724797/vehicles
    method: GET
    data_selector: data.vehicles
- name: directions
  endpoint:
    path: /directions/json
    method: GET
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
- name: directions
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params: {}
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params: {}
- name: route_reconstruction
  endpoint:
    path: /route-reconstruction
    method: POST
    data_selector: route
    params: {}
- name: directions
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params:
      key: <your_api_key>
      origin: 33.16013470,-117.35264451
      destination: 33.15680673,-117.35078087
      mode: truck
      option: flexible
      truck_size: 213.36,300,213.36
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params:
      key: <your_api_key>
      origin: 33.16013470,-117.35264451
      destination: 33.15680673,-117.35078087
      mode: truck
      option: flexible
      truck_size: 213.36,300,213.36
- name: isochrone
  endpoint:
    path: /isochrone/json
    method: GET
    data_selector: features
    params:
      coordinates: 33.99260394,-118.27001602
      mode: truck
      contours_minutes: 15
      departure_time: 1704974400
- name: optimization_request
  endpoint:
    path: /optimization/v2
    method: POST
    data_selector: id
- name: optimization_result
  endpoint:
    path: /optimization/v2/result
    method: GET
    data_selector: result
- name: Directions API
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params:
      avoid: uturn|sharp_turn
      mode: truck
      option: flexible
- name: Navigation API
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params:
      avoid: uturn|sharp_turn
      mode: truck
      option: flexible
- name: Directions API
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params:
      origin: 40.75293961,-73.99254045
      destination: 40.72607894,-74.15828141
      mode: truck
      avoid: toll
- name: Navigation API
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params:
      origin: 40.75293961,-73.99254045
      destination: 40.72607894,-74.15828141
      mode: truck
      avoid: toll
- name: directions
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params: {}
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params: {}
- name: directions
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params:
      key: <your_api_key>
      origin: 34.189973,-118.934659
      destination: 34.1792122,-118.9437976
      mode: truck
      option: flexible
      truck_weight: '6000'
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params:
      key: <your_api_key>
      origin: 34.189973,-118.934659
      destination: 34.1792122,-118.9437976
      mode: truck
      option: flexible
      truck_weight: '6000'
- name: optimization
  endpoint:
    path: /optimization/v2
    method: POST
- name: optimization_result
  endpoint:
    path: /optimization/v2/result
    method: GET
- name: directions
  endpoint:
    path: /directions/json
    method: GET
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
- name: real_time_etas
  endpoint:
    path: /distancematrix/json
    method: GET
    data_selector: rows
    params:
      origins: 28.54557765,-81.38898523|28.54397387,-81.38506335|28.53904358,-81.38546906|28.52401369,-81.38093861|28.52662774,-81.37160723
      destinations: 28.52466721,-81.39270426|28.52852882,-81.39628805|28.53262792,-81.39649091|28.53940000,-81.36809106|28.54391447,-81.36984914
      mode: car
      option: flexible
      route_type: fastest
- name: directions
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
- name: directions
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params:
      origin: 39.35555925,-76.61005664
      destination: 39.31131584,-76.61936891
      mode: car
      option: flexible
      route_type: shortest
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params:
      origin: 39.35555925,-76.61005664
      destination: 39.31131584,-76.61936891
      mode: car
      option: flexible
      route_type: shortest
- name: route_reconstruction
  endpoint:
    path: /route-reconstruction
    method: POST
    data_selector: route
    params: {}
- name: optimization_job
  endpoint:
    path: /optimization/v2/result
    method: GET
    data_selector: result
    params:
      id: ec38ebf24186b6e7880bb4e2c40957be
- name: isochrone
  endpoint:
    path: /isochrone/json
    method: GET
    data_selector: features
    params:
      key: <your_api_key>
      coordinates: 33.99260394,-118.27001602
      mode: truck
      contours_minutes: 15
      departure_time: 1704974400
- name: asset
  endpoint:
    path: /skynet/asset
    method: POST
    data_selector: data
    params: {}
- name: geofence
  endpoint:
    path: /geofence
    method: POST
    data_selector: data
    params: {}
- name: monitor
  endpoint:
    path: /skynet/monitor
    method: POST
    data_selector: data
    params: {}
- name: track
  endpoint:
    path: /skynet/asset/{asset_id}/track
    method: POST
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /skynet/config
    method: PUT
    data_selector: data
    params: {}
- name: directions
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params:
      origin: 40.75293961,-73.99254045
      destination: 40.72607894,-74.15828141
      mode: truck
      avoid: toll
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params:
      origin: 40.75293961,-73.99254045
      destination: 40.72607894,-74.15828141
      mode: truck
      avoid: toll
- name: Route Optimization
  endpoint:
    path: /optimization/v2/result
    method: GET
    data_selector: result
    params:
      id: a2a062320a0b2cdb7252df768d8dd32b
- name: clustering
  endpoint:
    path: /clustering/result
    method: GET
    data_selector: result
    params: {}
- name: directions
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params:
      key: <your_api_key>
      origin: 34.189973,-118.934659
      destination: 34.1792122,-118.9437976
      mode: truck
      option: flexible
      truck_weight: '6000'
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params:
      key: <your_api_key>
      origin: 34.189973,-118.934659
      destination: 34.1792122,-118.9437976
      mode: truck
      option: flexible
      truck_weight: '6000'
- name: isochrone
  endpoint:
    path: /isochrone/json
    method: GET
    data_selector: features
    params: {}
- name: distance_matrix
  endpoint:
    path: /distancematrix/json
    method: GET
    data_selector: rows
    params:
      origins: 28.54557765,-81.38898523|28.54397387,-81.38506335|28.53904358,-81.38546906|28.52401369,-81.38093861|28.52662774,-81.37160723
      destinations: 28.52466721,-81.39270426|28.52852882,-81.39628805|28.53262792,-81.39649091|28.53940000,-81.36809106|28.54391447,-81.36984914
      mode: car
      option: flexible
      route_type: fastest
- name: navigation_instructions
  endpoint:
    path: /navigation/json
    method: GET
    params:
      key: <your_api_key>
      origin: 25.84220637,-80.36236245
      destination: 25.76683324,-80.21609475
      mode: truck
      waypoints: 25.91338203,-80.34023395|25.90554444,-80.25598479|25.84769524,-80.22941337
      lang: es
- name: directions
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params:
      avoid: toll|highway
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params:
      avoid: toll|highway
- name: directions
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params:
      origin: 39.35555925,-76.61005664
      destination: 39.31131584,-76.61936891
      mode: car
      option: flexible
      route_type: shortest
- name: navigation
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params:
      origin: 39.35555925,-76.61005664
      destination: 39.31131584,-76.61936891
      mode: car
      option: flexible
      route_type: shortest
- name: optimization_request
  endpoint:
    path: /optimization/v2
    method: POST
    data_selector: result
- name: optimization_result
  endpoint:
    path: /optimization/v2/result
    method: GET
    data_selector: result
- name: jobs
  endpoint:
    path: /jobs
    method: POST
    data_selector: jobs
    params: {}
- name: shipments
  endpoint:
    path: /shipments
    method: POST
    data_selector: data
    params: {}
- name: asset
  endpoint:
    path: /skynet/asset
    method: POST
    data_selector: data
    params: {}
- name: geofence
  endpoint:
    path: /geofence
    method: POST
    data_selector: data
    params: {}
- name: monitor
  endpoint:
    path: /skynet/monitor
    method: POST
    data_selector: data
    params: {}
- name: track
  endpoint:
    path: /skynet/asset/{asset_id}/track
    method: POST
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /skynet/config
    method: PUT
    data_selector: data
    params: {}
- name: optimization
  endpoint:
    path: /optimization/v2/result
    method: GET
    data_selector: result
    params:
      id: a2a062320a0b2cdb7252df768d8dd32b
- name: clustering_result
  endpoint:
    path: /clustering/result
    method: GET
    data_selector: result
- name: isochrone
  endpoint:
    path: /isochrone/json
    method: GET
- name: navigation_instructions
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params:
      key: <your_api_key>
      origin: 25.84220637,-80.36236245
      destination: 25.76683324,-80.21609475
      mode: truck
      waypoints: 25.91338203,-80.34023395|25.90554444,-80.25598479|25.84769524,-80.22941337
      lang: es
- name: Directions API
  endpoint:
    path: /directions/json
    method: GET
    data_selector: routes
    params:
      avoid: toll|highway
- name: Navigation API
  endpoint:
    path: /navigation/json
    method: GET
    data_selector: routes
    params:
      avoid: toll|highway
- name: jobs_file
  endpoint:
    path: /jobs/import
    method: POST
    data_selector: jobs
    params: {}
- name: jobs_addresses
  endpoint:
    path: /jobs/addresses/import
    method: POST
    data_selector: addresses
    params: {}
- name: shipments
  endpoint:
    path: /api/shipments
    method: POST
    data_selector: shipments
    params: {}
- name: vehicles
  endpoint:
    path: /vehicles
    method: POST
    data_selector: data
    params: {}
notes:
- A maximum of 4000 locations can be added to the locations object
- A maximum of 4000 tasks can be added in an optimization problem. Number of tasks
  is calculated as number of jobs + 2 * (number of shipments).
- API allows a maximum rate limit of 300 queries per minute or 5 queries/second.
- Maximum number of pending requests in the queue is 25 for a given API key.
- Maximum rate limit of 300 queries per minute or 5 queries/second for continuous
  requests.
- Maximum of 4000 locations can be added to the locations object.
- Maximum rate limit is 300 queries per minute or 5 queries/second for continuous
  requests.
- Maximum of 4000 tasks can be added in an optimization problem.
- Nextbillion.ai allows a maximum rate limit of 300 queries per minute or 5 queries/second
  for continuous requests.
- The maximum radius that can be specified for a filter is 10000 meters.
- The maximum pickup_eta that can be specified for a filter is 3600 seconds.
- The maximum number of orders that can be added in a single request is 200.
- The maximum number of vehicles that can be specified in a single request is 100.
- The maximum number of remaining_waypoints that can be added for a vehicle is 10.
- The maximum number of attributes that can be specified for a single vehicle is 30.
- A maximum of 10 attribute conditions can be specified under each of required_all_of_attributes,
  required_any_of_attributes and exclude_all_of_attributes for an order.
- For total locations more than 100, please use the HTTP POST method for submitting
  the requests.
- It is not recommended to provide more than a total of 100 locations across origins
  and destinations inputs when using the HTTP GET method.
- Ensure that your development environment meets the prerequisites before using the
  SDK.
- Using an outdated version of any required tools may result in compatibility issues.
- Developers must obtain an access key to utilize Nextbillion.ai's Flutter Navigation
  SDK.
- The SDK requires CocoaPods version 1.11.3 or newer to manage dependencies for iOS.
- Ensure that you are using the correct version of the framework compatible with your
  Xcode project and iOS deployment target.
- Developers must obtain an access key, which serves as the authentication mechanism
  for accessing the SDK's features and functionalities.
- The minimum supported Android SDK version for using the Flutter Navigation SDK is
  API level 19 (Android 4.4, 'KitKat') or higher.
- The SDK is compatible with iOS 12 or later versions.
- The Flutter Navigation SDK requires Flutter version 3.5.0 or higher.
- When creating geofences, please ensure the right input parameters are used depending
  on the value of type.
- The maximum number of characters in the meta_data object should be such that the
  overall size of the object is not more than 65Kb.
- NextBillion.ai allows a maximum rate limit of 6000 queries per minute or 100 queries/second
  for continuous requests.
- The SDK facilitates real-time asset location tracking, allowing data to be uploaded
  to either the NBAI backend or a customized database.
- Designed to enable developers to incorporate location tracking functionality into
  their Android applications.
- A maximum of 100 geofences can be created using the Batch Create Geofences method.
- NextBillion.ai API Key is essential for authentication.
- Maximum rate limit of 6000 queries per minute or 100 queries/second for continuous
  requests.
- Ensure that your development environment meets the necessary prerequisites.
- Grant location permissions for both Android and iOS platforms.
- The SDK prioritizes data security, safeguarding sensitive information from unauthorized
  access.
- The maximum number of steps that can be provided in the input are 1000.
- Arrival should always be either equal to or greater than the current time and it
  should increase monotonically for each step.
- arrival should always be either equal to or greater than the current time and it
  should increase monotonically for each step.
- Requires a valid access key for authentication.
- Developers must obtain an API key to utilize NextBillion.ai's Flutter Asset Tracking
  SDK.
- Users can maintain and store their access key in local file(xml, Sharedpreference,
  or file), database, or cloud/backend server.
- Access Key must be specified as NBMapAccessKey in the Info.plist file.
- Base URI can be specified as NBMapBaseUri in the Info.plist file.
- Obtain a valid access key from our platform. This access key is essential for authentication
  and enables you to utilize the SDK's services.
- To use NextBillion Maps GL, an apiKey is required.
- The maps SDK doesn’t enforce users to configure the access key in any strict manner.
- Users can maintain and store their key in various ways including local file, database,
  or cloud.
- Specify your secret key as NBMapAccessKey in the Info.plist file.
- 'Optional: Specify the base uri as NBMapBaseUri in the info.plist file.'
- Obtain a valid access key from our platform for authentication.
- An apiKey is required to use NextBillion Maps GL.
- The response may contain experimental elements not documented here.
- Ensure that you specify a valid callback URL.
- Retrieve Consumer Key and Secret for authentication.
- Netradyne's Authorization and Tenant Unique Name is required.
- NextBillion.ai's API key is essential for secure communication.
- The optimization service takes into account all the variables specified in the input
  request.
- Ensure that you specify a valid callback URL for OAuth.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Netradyne's Authorization and Tenant Unique Name are required for access.
- Returns total distance covered by the truck along with the geometry of the route.
- Webhook registration is acknowledged with an 'Ok' response from the API.
- Uses API key for authentication.
- The Distance Matrix API considers real-time as well as historical traffic patterns
- Users can save multiple preference configurations to their account.
- The default driving mode is CAR.
- Sign-in to your NextBillion.ai Cloud Console account is required.
- Capture the task 'id' from the POST response and use it in a subsequent GET request
  to retrieve the optimized solution asynchronously.
- The maximum cluster radius is set to 2000.
- The maximum cluster quantity is capped at 10.
- Uses avoid feature to exclude tolls and highways.
- Default driving mode is 'CAR'.
- In order to use the following apps just sign-in to your NextBillion.ai Cloud Console
  account.
- Jobs can be imported from files in CSV, XLS, XLSX formats.
- Addresses can be imported from third-party fleet management platforms.
- Vehicles can be added to Route Planner through file imports or Fleet Hub integration.
- Reach out to support@nextbillion.ai to get an account created for your organization.
errors:
- '400: Input validation failed.'
- '401: APIKEY not supplied or invalid.'
- '403: APIKEY is valid but does not have access to requested resources.'
- '404: Requested host/path not found.'
- '422: Could not process the request.'
- '429: Too many requests.'
- '500: Internal Service error.'
- Maximum value that can be provided for truck_weight is 100,000 kg.
- Maximum dimensions for truck_size are 5000 cm for length, 5000 cm for width, 1000
  cm for height.
- When using avoid=bbox, the maximum perimeter allowed for the bounding box is 500
  kilometers.
- '200: Normal success case.'
- '413: Request entity too large'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'INVALID_REQUEST: Check your request parameters and format'
- '400 Bad Request: Check your request parameters'
- '400: Input validation failed. There is a missing or an invalid parameter or a parameter
  with an invalid value type is added to the request.'
- '401: APIKEY not supplied or invalid. This error occurs when the wrong API key is
  passed in the request or the key is missing altogether.'
- '403: APIKEY is valid but does not have access to requested resources. You might
  be querying for a geographical region which is not valid for your account or requesting
  a service which is not enabled for you.'
- '404: Requested host/path not found. This error occurs when a malformed hostname
  is used.'
- '413: Request entity too large. This error is caused when the length of input request
  URI or the request body is too large. Please modify the request. Reach out to support@nextbillion.ai
  if the issue still persists.'
- '422: Could not process the request. A feasible solution could not be generated
  for the given set of locations or parameter configuration.'
- '429: Too many requests. QPM reached or API request count quota reached.'
- '500: Internal Service error. There was an internal issue with NextBillion.ai services.
  You can reach out to support@nextbillion.ai for an explanation.'
- 'MAX_LOCATIONS_EXCEEDED: Ensure you do not exceed the maximum number of locations'
- '413: Request entity too large.'
- '460: Incorrect device ID.'
- '460: Incorrect device ID'
- 'Rate limit exceeded: Throttle API calls or reduce frequency.'
- '401: APIKEY not supplied or invalid'
- '403: APIKEY is valid but does not have access to requested resources'
- '404: Requested host/path not found'
- '422: Could not process the request'
- '429: Too many requests'
- '414: Request is too long'
- '403: APIKEY is valid but does not have access to requested resources. You might
  be querying for a geographical region which is not valid for your account, or requesting
  a service which is not enabled for you.'
- '422: Could not process the request. Valid results could not be generated for the
  given parameters. Please modify the constraints/search query.'
- '429: Too many requests. QPM or API request count quota reached.'
- '500: Internal Service error. There was an internal issue with NextBillion.ai services.'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Recheck API key or credentials.'
- '401 Unauthorized: Recheck API key.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.nextbillion.io
  headers:
    Accept: application/json
source_metadata: null
