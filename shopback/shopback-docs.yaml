resources:
- name: create_dynamic_qr_order
  endpoint:
    path: /posi-sandbox/v1/instore/order/create
    method: POST
    data_selector: response
    params: {}
- name: get_order_status
  endpoint:
    path: /get-order-status
    method: GET
    data_selector: status
    params: {}
- name: order
  endpoint:
    path: /posi-sandbox/v1/instore/order/create
    method: POST
    data_selector: response
    params: {}
- name: get_order_status
  endpoint:
    path: /posi-sandbox/v1/get-order-status
    method: GET
    data_selector: response
    params: {}
- name: postback
  endpoint:
    path: /postback
    method: POST
- name: order
  endpoint:
    path: /s2s-order-tracking-api
    method: POST
- name: validation
  endpoint:
    path: /s2s-validation-api
    method: POST
- name: Order API
  endpoint:
    path: /s2s-order-tracking-api
    method: POST
    data_selector: transactions
    params: {}
- name: Validation API
  endpoint:
    path: /s2s-validation-api
    method: POST
    data_selector: validation
    params: {}
- name: Order API
  endpoint:
    path: /s2s-order-tracking-api
    method: POST
    data_selector: transaction
    params: {}
- name: Validation API
  endpoint:
    path: /s2s-validation-api
    method: POST
    data_selector: validation
    params: {}
- name: order_tracking
  endpoint:
    path: /aff_lsr
    method: GET
    data_selector: success
    params:
      offer_id: '{order_offer_id}'
      adv_sub: '{customer_facing_order_id}'
      transaction_id: '{transaction_id}'
      amount: '{order_total}'
      security_token: '{security_token}'
- name: order
  endpoint:
    path: /aff_lsr
    method: GET
    data_selector: records
    params:
      offer_id: '{order_offer_id}'
      adv_sub: '{customer_facing_order_id}'
      transaction_id: '{transaction_id}'
      amount: '{order_total}'
      security_token: '{security_token}'
- name: validation
  endpoint:
    path: /aff_lsr
    method: GET
    data_selector: records
    params:
      offer_id: '{validation_offer_id}'
      aff_id: '{validation_affiliate_id}'
      amount: '[amount]'
      security_token: '{security_token}'
      status: approved
- name: validation
  endpoint:
    path: /aff_lsr
    method: GET
    data_selector: ''
    params:
      offer_id: '{validation_offer_id}'
      aff_id: '{validation_affiliate_id}'
      amount: '[amount]'
      security_token: '{security_token}'
      status: approved
- name: Order Tracking
  endpoint:
    path: /s2s-order-tracking-api
    method: POST
    data_selector: conversion
    params: {}
- name: order_tracking
  endpoint:
    path: /aff_lsr
    method: GET
    data_selector: transaction_id
- name: Order Confirmation Tag
  endpoint:
    path: /tags/order-confirmation
    method: POST
    data_selector: script
    params: {}
- name: Merchant Credentials
  endpoint:
    path: /settings/generate-credentials
    method: POST
    data_selector: credentials
- name: merchant_credentials
  endpoint:
    path: /settings/generate-credential
    method: POST
- name: ShopBack payments app
  endpoint:
    path: /merchant/credentials
    method: POST
    data_selector: credentials
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: response
    params: {}
- name: Online Payment
  endpoint:
    path: /docs/online-easystore
    method: GET
- name: payment
  endpoint:
    path: /api/payment
    method: POST
    data_selector: data
    params: {}
- name: tagline_options
  endpoint:
    path: /docs/shopback-price-tagline
    method: GET
    data_selector: options
    params: {}
- name: Magento
  endpoint:
    path: /docs/magento2x
    method: GET
- name: Woocommerce
  endpoint:
    path: /docs/woocommerce
    method: GET
- name: Prestashop
  endpoint:
    path: /docs/prestashop
    method: GET
- name: SFCC
  endpoint:
    path: /docs/salesforce-commerce-cloud
    method: GET
- name: Magento 2.x
  endpoint:
    path: /docs/enable-shopback-price-tagline/magento-2.x
    method: POST
    data_selector: config
    params: {}
- name: PrestaShop
  endpoint:
    path: /docs/enable-shopback-price-tagline/prestashop
    method: POST
    data_selector: config
    params: {}
- name: Woocommerce
  endpoint:
    path: /docs/enable-shopback-price-tagline/woocommerce
    method: POST
    data_selector: config
    params: {}
- name: Other E-commerce Platforms
  endpoint:
    path: /docs/install-shopback-price-tagline-manually
    method: POST
    data_selector: installation
    params: {}
- name: auth_login
  endpoint:
    path: /auth/login
    method: POST
- name: initiate_order
  endpoint:
    path: /order/initiate
    method: POST
- name: get_order_info
  endpoint:
    path: /order/{orderUuid}
    method: GET
- name: payment_notification_webhook
  endpoint:
    path: /server-to-server-payment-notification
    method: POST
- name: Magento
  endpoint:
    path: /docs/magento2x
    method: GET
- name: Woocommerce
  endpoint:
    path: /docs/woocommerce
    method: GET
- name: Prestashop
  endpoint:
    path: /docs/prestashop
    method: GET
- name: SFCC
  endpoint:
    path: /docs/salesforce-commerce-cloud
    method: GET
- name: checkout_redirect
  endpoint:
    path: /paylater
    method: GET
    params:
      ORDER_CONTEXT_TOKEN: The order context token that has been generated with /order/initiate
- name: payment_notification
  endpoint:
    path: /server-to-server-payment-notification
    method: POST
    data_selector: order_status
    params: {}
- name: auth_login
  endpoint:
    path: /auth/login
    method: POST
- name: order_initiate
  endpoint:
    path: /order/initiate
    method: POST
- name: order_status
  endpoint:
    path: /order/{orderUuid}
    method: GET
- name: payment_notification
  endpoint:
    path: /server-to-server-payment-notification
    method: POST
- name: Checkout Redirect Flow
  endpoint:
    path: /paylater
    method: GET
    params:
      ORDER_CONTEXT_TOKEN: Required
      platform: Optional
      version: Optional
- name: Integration Verification
  endpoint:
    path: /docs/integration-verification
    method: GET
    data_selector: transactions
    params: {}
- name: create_order
  endpoint:
    path: /v1/instore/order/create
    method: POST
- name: scan_consumer_qr
  endpoint:
    path: /v1/instore/order/scan
    method: POST
- name: get_order_status
  endpoint:
    path: /v1/instore/order/{referenceId}
    method: GET
- name: refund_order
  endpoint:
    path: /v1/instore/order/{referenceId}/refund
    method: POST
- name: cancel_order
  endpoint:
    path: /v1/instore/order/{referenceId}/cancel
    method: POST
- name: Daily Activity Report
  endpoint:
    path: /reports/daily
    method: GET
    data_selector: activity
    params: {}
- name: Monthly Activity Report
  endpoint:
    path: /reports/monthly
    method: GET
    data_selector: activity
    params: {}
- name: On-Demand Variable Activity Report
  endpoint:
    path: /reports/variable
    method: GET
    data_selector: activity
    params:
      max_days: 93
- name: Triggered Variable Activity Report
  endpoint:
    path: /reports/triggered
    method: GET
    data_selector: activity
    params: {}
- name: billing_records
  endpoint:
    path: /billing/records
    method: GET
    data_selector: records
- name: Summary
  endpoint:
    path: /docs/activity-report-summary
    method: GET
- name: Payments
  endpoint:
    path: /docs/activity-report-payments
    method: GET
- name: Store Credits
  endpoint:
    path: /docs/activity-report-store-credits
    method: GET
- name: Vouchers
  endpoint:
    path: /docs/activity-report-vouchers
    method: GET
- name: Loyalty Bonus
  endpoint:
    path: /docs/activity-report-loyalty-bonus
    method: GET
- name: Other
  endpoint:
    path: /docs/activity-report-corporate-buy
    method: GET
- name: summary
  endpoint:
    path: /docs/activity-report-summary
    method: GET
- name: payments
  endpoint:
    path: /docs/activity-report-payments
    method: GET
- name: store_credits
  endpoint:
    path: /docs/activity-report-store-credits
    method: GET
- name: vouchers
  endpoint:
    path: /docs/activity-report-vouchers
    method: GET
- name: loyalty_bonus
  endpoint:
    path: /docs/activity-report-loyalty-bonus
    method: GET
- name: other
  endpoint:
    path: /docs/activity-report-corporate-buy
    method: GET
- name: loyalty_bonus
  endpoint:
    path: /activity-report/loyalty-bonus
    method: GET
    data_selector: loyalty_bonus_data
    params: {}
- name: voucher_report
  endpoint:
    path: /activity-report/vouchers
    method: GET
    data_selector: records
- name: loyalty_bonus
  endpoint:
    path: /activity-report/loyalty-bonus
    method: GET
    data_selector: loyaltyBonusData
- name: 'Activity Report: Other'
- name: original_logo
  endpoint:
    path: /assets/original_logo
    method: POST
    data_selector: assets
    params: {}
- name: white_logo
  endpoint:
    path: /assets/white_logo
    method: POST
    data_selector: assets
    params: {}
- name: merchant_images
  endpoint:
    path: /assets/merchant_images
    method: POST
    data_selector: assets
    params: {}
- name: merchant_colours
  endpoint:
    path: /assets/merchant_colours
    method: POST
    data_selector: assets
    params: {}
- name: callback_url
  endpoint:
    path: /order/initiate
    method: POST
    data_selector: callbackUrl
    params: {}
- name: original_logo_requirements
  endpoint:
    path: /docs/what-is-the-requirement-for-the-visual-assets#original-logo
    method: GET
    data_selector: requirements
    params: {}
- name: white_logo_requirements
  endpoint:
    path: /docs/what-is-the-requirement-for-the-visual-assets#white-logo
    method: GET
    data_selector: requirements
    params: {}
- name: merchant_images_requirements
  endpoint:
    path: /docs/what-is-the-requirement-for-the-visual-assets#merchant-images
    method: GET
    data_selector: requirements
    params: {}
- name: merchant_colours_requirements
  endpoint:
    path: /docs/what-is-the-requirement-for-the-visual-assets#merchant-colours
    method: GET
    data_selector: requirements
    params: {}
- name: partner
  endpoint:
    path: /merchant/store/id
    method: GET
    data_selector: merchantId
    params: {}
- name: login
  endpoint:
    path: /auth/login
    method: POST
- name: merchant_store_id
  endpoint:
    path: /merchant/store/id
    method: GET
    data_selector: merchantId
    params: {}
- name: create_order
  endpoint:
    path: /demo/merchant/order/initiate
    method: POST
- name: get_order_status
  endpoint:
    path: /demo/merchant/order/{uuid}
    method: GET
    data_selector: ''
    params: {}
- name: login
  endpoint:
    path: /auth/login
    method: POST
- name: order_refund
  endpoint:
    path: /demo/merchant/order/{orderUuid}/refund
    method: POST
- name: create_order
  endpoint:
    path: /demo/merchant/order/initiate
    method: POST
- name: server_status
  endpoint:
    path: /demo/merchant/online
    method: GET
- name: get_order_status
  endpoint:
    path: /order/{uuid}
    method: GET
- name: order_refund
  endpoint:
    path: /demo/merchant/order/{orderUuid}/refund
    method: POST
- name: server_status
  endpoint:
    path: /demo/merchant/online
    method: GET
- name: create_dynamic_qr_order
  endpoint:
    path: /instore/order/create
    method: POST
- name: scan_consumer_qr
  endpoint:
    path: /instore/order/scan
    method: POST
- name: create_dynamic_qr_order
  endpoint:
    path: /instore/order/create
    method: POST
- name: get_order_status
  endpoint:
    path: /get-order-status
    method: GET
- name: scan_consumer_qr
  endpoint:
    path: /posi-sandbox/v1/instore/order/scan
    method: POST
- name: create_dynamic_qr_order
  endpoint:
    path: /instore/order/create
    method: POST
- name: login
  endpoint:
    path: /auth/login
    method: POST
- name: acknowledge_notification
  endpoint:
    path: /notification-1
    method: POST
- name: create_order
  endpoint:
    path: /demo/merchant/order/initiate
    method: POST
    data_selector: response
- name: server_status
  endpoint:
    path: /demo/merchant/online
    method: GET
- name: create_dynamic_qr_order
  endpoint:
    path: /instore/order/create
    method: POST
- name: acknowledge_notification
  endpoint:
    path: /<webhookUrl>
    method: POST
- name: login
  endpoint:
    path: /demo/merchant/auth/login
    method: POST
- name: create_order
  endpoint:
    path: /order/initiate
    method: POST
- name: server_status
  endpoint:
    path: /demo/merchant/online
    method: GET
notes:
- The HMAC-SHA256 algorithm must be used to generate a request signature.
- HMAC-SHA256 algorithm must be used to generate a request signature
- Date should be specified in ISO 8601 UTC.
- All communication needs to be secured using HTTPS with TLS 1.2 (or greater).
- As a general guideline, all resources that are not dependent on external systems
  are idempotent and are safe to be retried with the same request identifier.
- ShopBack system designed to respond with very low latency.
- Branch SDK to be installed in both merchant iOS and Android apps successfully.
- Relevant events to be captured by Branch SDK
- Please request these data parameters from your ShopBack representative.
- Merchants are recommended to store transaction_id in the database for history.
- ShopBack API endpoints are designed to capture postbacks in real-time.
- Pending transactions will need to be validated in order to grant cashback.
- Recommended to store transaction_id in the database to maintain history.
- Recommended to store transaction_id in the database for history.
- For datetime parameter use, adjust to UTC+0.
- Please make sure the Order ID of Order API and Validation API stay the same.
- The parameter of the Validation API will be regarded as locked information, which
  will be used for the invoice amount.
- Once the status is updated by Validation API, it cannot be reversed.
- Merchants may choose the overwrite a Validation API by sending a newer updated callback.
  ShopBack will only select the information from the latest Validation API for each
  order.
- Notice that every response without additional notes means success. Please DO NOT
  make a duplicated call and make sure that there’s only one call for each order information.
- Merchants may choose to overwrite a Validation API by sending a newer updated callback.
  ShopBack will only select the information from the latest Validation API for each
  order.
- Please notify your ShopBack representative to begin testing after both Step 1 and
  2 are completed
- Uses line-item tracking whereby each line item is captured in one line with the
  quantity amount and amount as line item subtotal amount.
- Use `utm_source=shopback` as a partner affiliation parameter
- Do not add tracking code snippet to checkout page
- Shopify has deprecated the Additional Scripts section.
- Ensure that the setup on Customer Privacy is as above.
- Shopify has deprecated the Additional Scripts section. This is the updated method
  of implementing the Javascript code.
- This integration will only take about 20-30 minutes to complete.
- The keyword above must match to your confirmation page URL keywords. Some common
  examples are 'page/thankyou', '/orderconfirmation','/order'.
- 'ShopBack requires a minimum of 2 variables to be captured which are: adv_sub -
  Customer facing order id, amount - Customer paid amount excluding shipping fees
  and taxes.'
- Looking for our Online Payments API?
- Do not tick “Enable Test mode” — Your consumers will not be able to pay with ShopBack
  Pay.
- Ensure that you have click on Save in the theme editor. If not, the library script
  will not be available in your website, and we will not able to configure the price
  tagline.
- Merchant Secret credentials can only be viewed once.
- The minimum version of Magento is Magento 2-2.2.3
- Do not change the ShopBack Pay plugin directory​ /app/home/Hoolah
- Avoid renaming the gateway caption​.
- Review the correct Magento scope.
- Flush the cache after admin setting changes.
- 'Once your ShopBack Pay Plugin has been installed, you should be able to test the
  following areas: ShopBack Pay as a payment method in your Checkout.'
- Merchant Secret credentials can only be viewed once
- Generate online integration credentials (via Business - Merchant Portal)
- Payment gateway setup (to be completed by the merchant)
- Merchant will need to manually inject the tagline for other e-commerce platforms.
- Ensure that the URL set in callbackUrl parameter is always accessible.
- Ensure that the URL will respond with HTTP Status Code 200.
- Do not integrate API calls directly from your frontend (e.g. via AJAX calls).
- Before going to Production, verify the transaction by following the Sandbox Test
  Scenario Checklist.
- Once all the transactions are completed in Sandbox, merchant shall update their
  credentials to production and set the payment amount limits.
- A crucial part of the ShopBack Pay integration is to validate if the checkout works.
- This activity has to be completed by the merchant.
- Once all the transactions are completed in Sandbox, merchant shall update their
  credentials to production.
- You may be given different set of credentials for Production
- Generate HMAC signature to be used for each API request by using accessKeySecret
  provided.
- Make sure to replace any placeholder values (e.g., accessKeyId, accessKeySecret,
  posId) with your actual integration credentials.
- Private-Public Key Credentials required for accessing the reporting service
- Reports are delivered in a specific folder on ShopBack’s sFTP server
- Transaction has been authorised and charge completed for capture
- Fees will only be reported where settlement takes place with the partner or group
- Fees will not initially be reported until cash flow settlement is direct with the
  payment partner
- Holding of sales tax amount due to rounding under holding tax
- Reversal of sales tax due to rounding over holding tax
- Daily on ShopBack billing business days being generally Monday to Friday.
- Transaction has been refunded partially or in full
- Normal settlement will resume once identified risks has been resolved
- This feature is not yet available but coming soon...
- Merchant Secret credential can only be viewed once.
- Logos must be on a transparent background
- Crop out all extra space around the logo
- Should be PNG format
- 'Hex Value starting with # for background and foreground colours'
- The token is valid for 8 hours. However, we recommend generating a new token for
  each transaction to ensure security and consistency.
- The token is valid for 8 hours.
- We recommend generating a new token for each transaction to ensure security and
  consistency.
- 'Timeouts apply: Open - 10 seconds, Read - 20 seconds.'
- All requests in this API specification require HMAC signatures in order to successfully
  authenticate API requests.
errors:
- '401 Unauthorized: Check accessKeyId or accessKeySecret.'
- '400 Bad Request: Ensure request body is formatted correctly.'
- '400 Bad Request: Check your request format and parameters'
- '401 Unauthorized: Check your access key or signature'
- '404 Not Found: Verify the endpoint path'
- 'REJECTED: Transaction has been rejected.'
- 'APPROVED: Transaction has been approved.'
- Invalid Trans. ID
- 'Request offer #1234 does not match session offer #2345.'
- Duplicate recorded with Trans. ID
- success=false; err_msg=Invalid Trans. ID
- 'success=false; err_msg=Request offer #1234 does not match session offer #2345.'
- success=false; err_msg=Duplicate recorded with Trans. ID
- 'Status Code - 200: The order has been updated to approved status.'
- 'success=false: The order has been updated to rejected status.'
- 'sucess=true;: The order has been updated to approved status.'
- 'success=false;: The order has been updated to rejected status.'
- '401 Unauthorized: Recheck Merchant ID or Secret'
- 'ORDER_NOT_SUBMITTED: Order timed out - No action from the user/ User did not complete
  the transaction/ User closes the app.'
- Order timed out - No action from the user/ User did not complete the transaction/
  User closes the app.
- Terminal Access Denied. Insufficient permissions to act on this terminal.
- Missing Authorization Header. Field is required in all requests.
- Invalid Auth Header. Unable to recognize Auth Code.
- Hmac signature has expired, please generate a new signature.
- Invalid accessKeyId provided.
- Invalid signature. Failed to match HMAC signatures.
- Invalid posId. Unable to find matching posId.
- Invalid referenceId. Unable to find an existing payment record with the referenceId
  provided.
- Invalid Date Header. Date Header has to be ISO-8601 format.
- Hmac validation Error. Please ensure all required parameters are provided with the
  specified types.
- Unable to refund order when it is not in captured state.
- Unable to cancel order when it is not in captured state.
- Invalid country to currency pair. Currency is not supported in specified country.
- Invalid country code. Please use the 2 letter country code according to ISO3166
  standard.
- Invalid currency code. Please use the 3 letter currency code according to ISO4217
  standard.
- Invalid qrType. Accepted types are 'base64' or 'payload'.
- Invalid reason. Please provide a string value.
- Invalid amount. Please provide an integer value.
- Invalid amount. Please provide a positive number.
- Invalid amount. Amount has to be at least 100.
- Invalid amount. Amount has to be at most 150000.
- Invalid ReferenceId. ReferenceId provided is already assigned to an existing resource.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Invalid qrType. Accepted types are "base64" or "payload".
- 400 API Request could not be processed. This could be due to validation errors or
  invalid inputs.
- 401 Invalid signature. Failed to match HMAC signatures.
- 404 Target resource(s) not found.
- 409 Invalid ReferenceId. ReferenceId provided is already assigned to an existing
  resource.
- '400: API Request could not be processed. This could be due to validation errors
  or invalid inputs.'
- '401: Invalid signature. Failed to match HMAC signatures.'
- '404: Target resource(s) not found.'
- '409: Invalid ReferenceId. ReferenceId provided is already assigned to an existing
  resource.'
auth_info:
  mentioned_objects:
  - HMAC Signature
client:
  base_url: https://integrations-sandbox.shopback.com
  auth:
    type: hmac
    location: header
    header_name: Authorization
source_metadata: null
