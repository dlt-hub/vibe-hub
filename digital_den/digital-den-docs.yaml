resources:
- name: email_verification
  endpoint:
    path: /v1/email-verification
    method: POST
    data_selector: verification_status
    params: {}
- name: email_sending
  endpoint:
    path: /v1/send-email
    method: POST
    data_selector: send_status
    params: {}
- name: lambda_function
  endpoint:
    path: /services/lambda
    method: POST
    data_selector: body
    params: {}
- name: bedrock
  endpoint:
    path: /services/bedrock-runtime
    method: POST
    data_selector: body
    params: {}
- name: contact_form
  endpoint:
    path: /contact
    method: POST
    data_selector: form submission data
- name: AWS
  endpoint:
    path: /categories/aws/
    method: GET
- name: Adobe Creative Cloud
  endpoint:
    path: /categories/adobe-creative-cloud/
    method: GET
- name: Compute
  endpoint:
    path: /categories/compute/
    method: GET
- name: Data Engineering
  endpoint:
    path: /categories/data-engineering/
    method: GET
- name: Databases
  endpoint:
    path: /categories/databases/
    method: GET
- name: Generative AI
  endpoint:
    path: /categories/generative-ai/
    method: GET
- name: High-Performance Computing
  endpoint:
    path: /categories/high-performance-computing/
    method: GET
- name: Machine Learning
  endpoint:
    path: /categories/machine-learning/
    method: GET
- name: Security
  endpoint:
    path: /categories/security/
    method: GET
- name: Serverless
  endpoint:
    path: /categories/serverless/
    method: GET
- name: Terraform
  endpoint:
    path: /categories/terraform/
    method: GET
- name: JavaScript
  endpoint:
    path: /categories/javascript/
    method: GET
- name: Jekyll
  endpoint:
    path: /categories/jekyll/
    method: GET
- name: Cost and Sustainability Optimization for AWS Storage and Databases
  endpoint:
    path: /posts/cost-and-sustainability-optimization-for-aws-storage-and-databases/
    method: GET
- name: AWS Non-Relational Databases
  endpoint:
    path: /posts/aws-non-relational-databases/
    method: GET
- name: AWS Relational Databases
  endpoint:
    path: /posts/aws-relational-databases/
    method: GET
- name: Serverless ETL Pipeline for Weather Data
  endpoint:
    path: /posts/serverless-etl-pipeline-for-weather-data/
    method: GET
- name: Deployment Orchestration With AWS Elastic Beanstalk
  endpoint:
    path: /posts/deployment-orchestration-with-elastic-beanstalk/
    method: GET
- name: weather_forecast
  endpoint:
    path: /services/data/vXX.X/sobjects/WeatherForecast
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: current_weather
  endpoint:
    path: /services/data/vXX.X/sobjects/CurrentWeather
    method: GET
    data_selector: records
    params: {}
- name: Set Up Google Analytics in Your Jekyll Chirpy Site
  endpoint:
    path: /posts/add-google-analytics-jekyll-chirpy-site/
    method: GET
- name: Speed Up Any Jekyll Site (Including Chirpy) Using Fast-Loading Images With
    LQIP and WebP
  endpoint:
    path: /posts/create-fast-loading-images-with-lqip-webp-in-your-jekyll-chirpy-site/
    method: GET
- name: Set Up and Deploy a Documentation Site With Jekyll & Chirpy on AWS Cloud9
  endpoint:
    path: /posts/set-up-and-deploy-a-documentation-site-with-jekyll-and-chirpy-on-aws-cloud9/
    method: GET
- name: Particles.js Integration Tutorial for HTML5Up Dimensions Site Template
  endpoint:
    path: /posts/particles-js-integration-tutorial-html5up-site-template/
    method: GET
- name: EBS Cleanup Demo
  endpoint:
    path: /course/amazon-ebs-cost-optimizaion-strategies/automatically-clean-up-orphaned-ebs-volumes-with-aws-config-and-systems-manager
    method: GET
    data_selector: demo
    params: {}
- name: Cost and Sustainability Optimization for AWS Storage and Databases
  endpoint:
    path: /posts/cost-and-sustainability-optimization-for-aws-storage-and-databases/
    method: GET
- name: AWS Non-Relational Databases
  endpoint:
    path: /posts/aws-non-relational-databases/
    method: GET
- name: AWS Relational Databases
  endpoint:
    path: /posts/aws-relational-databases/
    method: GET
- name: Deployment Orchestration With AWS Elastic Beanstalk
  endpoint:
    path: /posts/deployment-orchestration-with-elastic-beanstalk/
    method: GET
- name: Managing Database Access Permissions in AWS
  endpoint:
    path: /posts/managing-database-access-permissions-in-aws/
    method: GET
- name: Training and Fine-Tuning Machine Learning and Foundation Models With Amazon
    SageMaker
  endpoint:
    path: /posts/training-and-fine-tuning-machine-learning-and-foundation-models-with-amazon-sagemaker/
    method: GET
- name: Configuring and Launching Hyperparameter Tuning Jobs With Amazon SageMaker
    AMT
  endpoint:
    path: /posts/configuring-and-launching-hyperparameter-tuning-jobs-with-amazon-sagemaker-amt/
    method: GET
- name: Monitoring Model Inference With Amazon SageMaker
  endpoint:
    path: /posts/monitoring-model-inference-with-amazon-sagemaker/
    method: GET
- name: Optimize Machine Learning Models for Inference With SageMaker Neo
  endpoint:
    path: /posts/optimize-machine-learning-models-for-inference-with-sagemaker-neo/
    method: GET
- name: Extracting Text, Handwriting, and Layout Elements Using Amazon Textract
  endpoint:
    path: /posts/extracting-text-handwriting-and-layout-elements-using-amazon-textract/
    method: GET
- name: Monitoring and Analyzing Data Quality for XGBoost Churn Models With Amazon
    SageMaker Model Monitor
  endpoint:
    path: /posts/monitoring-and-analyzing-data-quality-for-xgboost-churn-models-with-amazon-sagemaker-model-monitor/
    method: GET
- name: Using Amazon Lex to Create Conversational AI Interfaces
  endpoint:
    path: /posts/using-amazon-lex-to-create-conversational-ai-interfaces/
    method: GET
- name: Detecting Abnormal Operating Patterns Using Amazon DevOps Guru
  endpoint:
    path: /posts/detecting-abnormal-operating-patterns-using-amazon-devops-guru/
    method: GET
- name: Working With Amazon Rekognition for Video and Image Analysis
  endpoint:
    path: /posts/working-with-amazon-rekognition-for-video-and-image-analysis/
    method: GET
- name: Implementing Text-to-Speech with Amazon Polly
  endpoint:
    path: /posts/implementing-text-to-speech-with-amazon-polly/
    method: GET
- name: Running Deep Learning Workloads with the AWS Neuron SDK
  endpoint:
    path: /posts/running-deep-learning-workloads-with-the-aws-neuron-sdk/
    method: GET
- name: 'Amazon SageMaker: Machine Learning Workflows'
  endpoint:
    path: /posts/amazon-sagemaker-machine-learning-workflows/
    method: GET
- name: AWS Security Best Practices For Developers
  endpoint:
    path: /posts/aws-security-best-practices-for-developers/
    method: GET
- name: Scaling GPUs with EC2 UltraClusters
  endpoint:
    path: /posts/scaling-gpus-with-ec2-ultraclusters/
    method: GET
- name: Create Web Applications Using AWS Amplify
  endpoint:
    path: /posts/create-web-applications-using-aws-amplify/
    method: GET
- name: High-Performance Text Analysis with HuggingFace GPT-2 on AWS Neuron with AWS
    Inferentia
  endpoint:
    path: /posts/high-performance-text-analysis-with-huggingface-gpt-2-on-aws-neuron-with-aws-inferentia/
    method: GET
- name: Building and Running Serverless Applications Using the SAM CLI
  endpoint:
    path: /posts/building-and-running-serverless-applications-using-the-sam-cli/
    method: GET
- name: Training and Fine-Tuning Machine Learning and Foundation Models With Amazon
    SageMaker
  endpoint:
    path: /posts/training-and-fine-tuning-machine-learning-and-foundation-models-with-amazon-sagemaker/
    method: GET
- name: Configuring and Launching Hyperparameter Tuning Jobs With Amazon SageMaker
    AMT
  endpoint:
    path: /posts/configuring-and-launching-hyperparameter-tuning-jobs-with-amazon-sagemaker-amt/
    method: GET
- name: Monitoring Model Inference With Amazon SageMaker
  endpoint:
    path: /posts/monitoring-model-inference-with-amazon-sagemaker/
    method: GET
- name: Optimize Machine Learning Models for Inference With SageMaker Neo
  endpoint:
    path: /posts/optimize-machine-learning-models-for-inference-with-sagemaker-neo/
    method: GET
- name: Extracting Text, Handwriting, and Layout Elements Using Amazon Textract
  endpoint:
    path: /posts/extracting-text-handwriting-and-layout-elements-using-amazon-textract/
    method: GET
- name: Using Amazon Lex to Create Conversational AI Interfaces
  endpoint:
    path: /posts/using-amazon-lex-to-create-conversational-ai-interfaces/
    method: GET
- name: Detecting Abnormal Operating Patterns Using Amazon DevOps Guru
  endpoint:
    path: /posts/detecting-abnormal-operating-patterns-using-amazon-devops-guru/
    method: GET
- name: Working With Amazon Rekognition for Video and Image Analysis
  endpoint:
    path: /posts/working-with-amazon-rekognition-for-video-and-image-analysis/
    method: GET
- name: Implementing Text-to-Speech with Amazon Polly
  endpoint:
    path: /posts/implementing-text-to-speech-with-amazon-polly/
    method: GET
- name: Running Deep Learning Workloads with the AWS Neuron SDK
  endpoint:
    path: /posts/running-deep-learning-workloads-with-the-aws-neuron-sdk/
    method: GET
- name: 'Amazon SageMaker: Machine Learning Workflows'
  endpoint:
    path: /posts/amazon-sagemaker-machine-learning-workflows/
    method: GET
- name: Scaling GPUs with EC2 UltraClusters
  endpoint:
    path: /posts/scaling-gpus-with-ec2-ultraclusters/
    method: GET
- name: invoke_model
  endpoint:
    path: /bedrock-runtime/invoke-model
    method: POST
    data_selector: body
    params: {}
- name: particles
  endpoint:
    path: /assets/js/particles.min.js
    method: GET
    data_selector: script
    params: {}
- name: particles_config
  endpoint:
    path: /assets/config/particles-js.json
    method: GET
    data_selector: config
    params: {}
- name: google_analytics
  endpoint:
    path: /analytics.js
    method: GET
    data_selector: dataLayer
- name: S3 Remote Backend
  endpoint:
    path: /creating-a-terraform-module-for-s3-remote-backend
    method: GET
- name: DynamoDB State Locking
  endpoint:
    path: /creating-a-terraform-module-for-s3-remote-backend-with-dynamodb-state-locking
    method: GET
notes:
- Account starts in sandbox mode with limitations on sending emails.
- To send emails to unverified addresses, must move out of sandbox mode.
- Cold starts may cause slight delays on first invocation after inactivity.
- Lambda functions do not retain state between executions.
- Lambda function requires environment variables for configuration.
- Ensure IAM user has permissions to access Bedrock models.
- CORS must be enabled for the frontend to communicate with the API.
- Ensure the form data is correctly sent to the API Gateway endpoint.
- This site is built using Jekyll, a static site generator with the Chirpy theme.
- The entire infrastructure is managed as code using Terraform on AWS.
- Uses OAuth2 with refresh token — requires setup of connected app in weather API
- Some objects like CurrentWeather may return nulls in deeply nested fields
- This course includes a practical demo that shows how to automatically clean up orphaned
  Amazon EBS volumes using AWS Config and AWS Systems Manager.
- This solution is perfect for adding dynamic, AI-powered responses to contact forms
  while maintaining a serverless backend
- This lesson is designed for machine learning engineers, data scientists, and DevOps
  professionals.
- This demo is ideal for machine learning practitioners, data scientists, and DevOps
  professionals who want hands-on experience in monitoring model inference and ensuring
  the ongoing performance of deployed models using Amazon SageMaker.
- This documentation outlines the steps for setting up and deploying a documentation
  site using Jekyll, a popular static site generator, and the Chirpy theme using GitHub
  Actions on AWS Cloud9 IDE.
- Ensure compatibility with particles.js by appending specific CSS.
- Adjust particle settings in the particles-js.json file.
- Ensure the _includes directory exists for storing reusable content snippets.
errors:
- 'EMAIL_NOT_VERIFIED: The email address is not verified.'
- 'REQUEST_LIMIT_EXCEEDED: Exceeded the allowed sending limits.'
- 'AccessDeniedException: Ensure appropriate permissions are granted for model access.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://console.aws.amazon.com/ses/
  auth:
    type: oauth2
source_metadata: null
