resources:
- name: state
  endpoint:
    path: /scene/state
    method: GET
    data_selector: body
- name: recognizeResults
  endpoint:
    path: /scene/recognizeResults
    method: GET
    data_selector: body
- name: conversationResult
  endpoint:
    path: /scene/conversationResult
    method: GET
    data_selector: body
- name: activation
  endpoint:
    path: /scene/activation
    method: GET
    data_selector: body
- name: speechMarker
  endpoint:
    path: /scene/speechMarker
    method: GET
    data_selector: body
- name: startSpeaking
  endpoint:
    path: /scene/startSpeaking
    method: POST
    data_selector: body
- name: stopSpeaking
  endpoint:
    path: /scene/stopSpeaking
    method: POST
    data_selector: body
- name: conversationSend
  endpoint:
    path: /scene/conversationSend
    method: POST
    data_selector: body
- name: conversationSetVariables
  endpoint:
    path: /scene/conversationSetVariables
    method: POST
    data_selector: body
- name: conversationGetVariables
  endpoint:
    path: /scene/conversationGetVariables
    method: POST
    data_selector: body
- name: conversationRequest
  endpoint:
    path: /scene/conversationRequest
    method: POST
    data_selector: body
- name: conversationResponse
  endpoint:
    path: /scene/conversationResponse
    method: POST
    data_selector: body
- name: configure
  endpoint:
    path: /scene/configure
    method: POST
    data_selector: body
- name: getState
  endpoint:
    path: /scene/getState
    method: GET
    data_selector: body
- name: content_cards
  endpoint:
    path: /web-sdk/api/smwebsdk.scene.conversation
    method: GET
    data_selector: activeCards
- name: Templates
  endpoint:
    path: /templates
    method: GET
    data_selector: template_records
- name: camera_microphone_access
  endpoint:
    path: /web-sdk/guides/accessing-camera-and-microphone
    method: GET
    data_selector: access
- name: logging_config
  endpoint:
    path: /logging/config
    method: GET
    data_selector: session, contentAwareness
    params: {}
- name: logging
  endpoint:
    path: /web-sdk/guides/logging
    method: GET
    data_selector: logs
    params: {}
- name: Scene
  endpoint:
    path: /scene
    method: POST
    data_selector: scene
- name: animateToNamedCameraWithOrbitPan
  endpoint:
    path: /animateToNamedCameraWithOrbitPan
    method: POST
    data_selector: variables
    params: {}
- name: conversationGetVariables
  endpoint:
    path: /conversationGetVariables
    method: GET
    data_selector: variables
    params: {}
- name: conversationSend
  endpoint:
    path: /conversationSend
    method: POST
    data_selector: response
    params: {}
- name: conversationSetVariables
  endpoint:
    path: /conversationSetVariables
    method: POST
    data_selector: response
    params: {}
- name: Scene
  endpoint:
    path: /scene
    method: POST
    data_selector: sceneData
- name: transcript
  endpoint:
    path: /web-sdk/guides/text-transcript
    method: GET
    data_selector: transcript
- name: transcript
  endpoint:
    path: /web-sdk/guides/text-transcript
    method: GET
    data_selector: transcript
    params: {}
- name: Skills Webhook REST API
  endpoint:
    path: /skills/api
    method: GET
- name: Skills Async API
  endpoint:
    path: /skills/api-reference/async-api
    method: GET
- name: execute
  endpoint:
    path: /execute
    method: POST
    data_selector: output.variables
    params: {}
- name: initialize
  endpoint:
    path: /init
    method: POST
- name: session
  endpoint:
    path: /session
    method: POST
- name: execute
  endpoint:
    path: /execute
    method: POST
- name: Delete
  endpoint:
    path: /delete/{projectId}
    method: DELETE
- name: Initialize
  endpoint:
    path: /init
    method: POST
- name: Session
  endpoint:
    path: /session
    method: POST
- name: Execute
  endpoint:
    path: /execute
    method: POST
- name: memory
  endpoint:
    path: /skills/api/memory
    method: POST
    data_selector: memory
    params: {}
- name: conversation
  endpoint:
    path: /v1/conversation
    method: POST
    data_selector: response
    params: {}
- name: Processing_Stage
  endpoint:
    path: /skills/api
    method: POST
    data_selector: context.Processing_Stage
    params: {}
- name: execute
  endpoint:
    path: /execute
    method: POST
- name: session
  endpoint:
    path: /session
    method: POST
- name: execute
  endpoint:
    path: /execute
    method: POST
- name: initialize
  endpoint:
    path: /init
    method: POST
    data_selector: ''
    params: {}
- name: session
  endpoint:
    path: /session
    method: POST
    data_selector: ''
    params: {}
- name: execute
  endpoint:
    path: /execute
    method: POST
    data_selector: ''
    params: {}
- name: execute
  endpoint:
    path: /execute
    method: POST
    data_selector: output
    params: {}
- name: skill_definition
  endpoint:
    path: /skills-api/api-reference/skill-definition
    method: GET
    data_selector: skills
    params: {}
- name: Delete
  endpoint:
    path: /delete/{projectId}
    method: DELETE
    data_selector: ''
    params: {}
- name: Initialize
  endpoint:
    path: /init
    method: POST
    data_selector: ''
    params: {}
- name: Session
  endpoint:
    path: /session
    method: POST
    data_selector: ''
    params: {}
- name: Execute
  endpoint:
    path: /execute
    method: POST
    data_selector: ''
    params: {}
- name: memory
  endpoint:
    path: /skills-api/memory
    method: POST
    data_selector: memory
    params: {}
- name: Processing_Stage
  endpoint:
    path: /skills/api
    method: POST
    data_selector: context.Processing_Stage
- name: Base Corpus Skills
  endpoint:
    path: /skills-api/skill-types/base-corpus
    method: GET
    data_selector: skills
    params: {}
- name: Default Intent Match Skills
  endpoint:
    path: /skills-api/skill-types/default-intent-match
    method: GET
    data_selector: skills
    params: {}
- name: Default Fallback Match Skills
  endpoint:
    path: /skills-api/skill-types/default-fallback-match
    method: GET
    data_selector: skills
    params: {}
- name: Pre-Process Skills
  endpoint:
    path: /skills-api/skill-types/pre-process
    method: GET
    data_selector: skills
    params: {}
- name: Post-Process Skills
  endpoint:
    path: /skills-api/skill-types/post-process
    method: GET
    data_selector: skills
    params: {}
- name: Pre and Post-Process Skills
  endpoint:
    path: /skills-api/skill-types/pre-post-process
    method: GET
    data_selector: skills
    params: {}
- name: execute
  endpoint:
    path: /execute
    method: POST
    data_selector: output
- name: execute
  endpoint:
    path: /execute
    method: POST
    data_selector: response
    params: {}
- name: execute
  endpoint:
    path: /execute
    method: POST
    data_selector: output
    params: {}
- name: endpointInitialize
  endpoint:
    path: endpointInitialize
    method: GET
- name: endpointSession
  endpoint:
    path: endpointSession
    method: GET
- name: endpointExecute
  endpoint:
    path: endpointExecute
    method: GET
- name: endpointEndProject
  endpoint:
    path: endpointEndProject
    method: GET
- name: ConnectionState
  endpoint:
    path: /api/smwebsdk/connectionstate
    method: GET
- name: Base Corpus
  endpoint:
    path: /skills-api/skill-types/base-corpus
    method: GET
    data_selector: skillType
    params: {}
- name: Default Intent Match
  endpoint:
    path: /skills-api/skill-types/default-intent-match
    method: GET
    data_selector: skillType
    params: {}
- name: Default Fallback Match
  endpoint:
    path: /skills-api/skill-types/default-fallback-match
    method: GET
    data_selector: skillType
    params: {}
- name: Default Custom Match
  endpoint:
    path: /skills-api/skill-types/default-custom-match
    method: GET
    data_selector: skillType
    params: {}
- name: Pre-Process
  endpoint:
    path: /skills-api/skill-types/pre-process
    method: GET
    data_selector: skillType
    params: {}
- name: Post-Process
  endpoint:
    path: /skills-api/skill-types/post-process
    method: GET
    data_selector: skillType
    params: {}
- name: Pre and Post-Process
  endpoint:
    path: /skills-api/skill-types/pre-post-process
    method: GET
    data_selector: skillType
    params: {}
- name: Intent Matcher
  endpoint:
    path: /skills-api/skill-types/intent-matcher-private
    method: GET
    data_selector: skillType
    params: {}
- name: execute
  endpoint:
    path: /execute
    method: POST
- name: Scene
  endpoint:
    path: /api/scene
    method: POST
    data_selector: sceneData
    params: {}
- name: execute
  endpoint:
    path: /execute
    method: POST
    data_selector: output
- name: SceneResponseError
  endpoint:
    path: /api/smwebsdk/sceneresponseerror
    method: GET
    data_selector: properties
    params: {}
- name: ConnectionState
  endpoint:
    path: /web-sdk/api/smwebsdk.connectionstate
    method: GET
    data_selector: properties
- name: getMinLogLevel
  endpoint:
    path: /web-sdk/api/smwebsdk/contentawareness/getMinLogLevel
    method: GET
    data_selector: LogLevel
    params: {}
- name: SceneResponseError
  endpoint:
    path: /api/smwebsdk.sceneresponseerror
    method: GET
    data_selector: properties
    params: {}
- name: setLogging
  endpoint:
    path: /smwebsdk/contentawareness/setlogging
    method: POST
    data_selector: void
    params: {}
- name: update_content_awareness
  endpoint:
    path: /web-sdk/api/smwebsdk/contentawareness/buildupdatecontentawarenessrequest
    method: POST
    data_selector: UpdateContentAwarenessRequestBody
    params: {}
- name: connection_state
  endpoint:
    path: /getConnectionState
    method: GET
    data_selector: ConnectionStateData
- name: ConnectionStateData
  endpoint:
    path: /api/smwebsdk/connectionstatedata
    method: GET
    data_selector: properties
    params: {}
- name: ConnectionStateTypes
  endpoint:
    path: /web-sdk/api/smwebsdk.connectionstatetypes
    method: GET
    data_selector: ConnectionStateTypes
    params: {}
- name: AnimateToNamedCameraRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.animatetonamedcamerarequestbody
    method: GET
    data_selector: properties
- name: ConnectionStateData
  endpoint:
    path: /web-sdk/api/smwebsdk.connectionstatedata
    method: GET
    data_selector: properties
- name: ConversationSendRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.conversationsendrequestbody
    method: GET
- name: ConversationSetVariablesRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.conversationsetvariablesrequestbody
    method: GET
- name: UpdateContentAwarenessRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.updatecontentawarenessrequestbody
    method: GET
    data_selector: properties
    params: {}
- name: GetModelChildrenRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.getmodelchildrenrequestbody
    method: GET
- name: AnimateToNamedCameraRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.animatetonamedcamerarequestbody
    method: GET
- name: ConversationResultResponseBody
  endpoint:
    path: /web-sdk/api/smwebsdk.conversationresultresponsebody
    method: GET
    data_selector: properties
    params: {}
- name: GetModelVariablesListRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.getmodelvariableslistrequestbody
    method: GET
    data_selector: Models
    params: {}
- name: GetVariablesRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.getvariablesrequestbody
    method: GET
    data_selector: properties
    params: {}
- name: ConversationSetVariables
  endpoint:
    path: /api/ConversationSetVariables
    method: POST
    data_selector: variables
    params: {}
- name: GetModelChildrenRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.getmodelchildrenrequestbody
    method: GET
    data_selector: Models
- name: persona_request_body
  endpoint:
    path: /web-sdk/api/smwebsdk.personarequestbody
    method: GET
    data_selector: properties
    params: {}
- name: GetModelVariableFilterSearchResultRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.getmodelvariablefiltersearchresultrequestbody
    method: GET
    data_selector: records
- name: RecognizeResultsResponseBody
  endpoint:
    path: /web-sdk/api/smwebsdk/recognizeresultsresponsebody
    method: GET
    data_selector: results
    params: {}
- name: RetryOptions
  endpoint:
    path: /web-sdk/api/smwebsdk.retryoptions
    method: GET
    data_selector: properties
    params: {}
- name: GetModelVariablesListRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.getmodelvariableslistrequestbody
    method: GET
- name: GetVariablesRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.getvariablesrequestbody
    method: GET
- name: PersonaRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.personarequestbody
    method: GET
    data_selector: properties
- name: scene_request
  endpoint:
    path: /web-sdk/api/smwebsdk.scenerequest
    method: GET
    data_selector: body
    params: {}
- name: PlayAnimationRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.playanimationrequestbody
    method: GET
    data_selector: properties
- name: SceneResponse
  endpoint:
    path: /@soulmachines/smwebsdk/SceneResponse
    method: GET
    data_selector: body
- name: recognize_results
  endpoint:
    path: /web-sdk/api/smwebsdk/recognizeresults
    method: GET
    data_selector: results
- name: SetVariablesRequestBody
  endpoint:
    path: /@soulmachines/smwebsdk/setvariablesrequestbody
    method: GET
    data_selector: properties
- name: RetryOptions
  endpoint:
    path: /web-sdk/api/smwebsdk.retryoptions
    method: GET
    data_selector: properties
- name: speech_marker
  endpoint:
    path: /api/speechmarker
    method: GET
    data_selector: arguments
    params: {}
- name: SceneRequest
  endpoint:
    path: /web-sdk/api/smwebsdk.scenerequest
    method: GET
- name: StartSpeakingOptionalArgs
  endpoint:
    path: /api/smwebsdk/StartSpeakingOptionalArgs
    method: GET
    data_selector: properties
- name: SceneResponse
  endpoint:
    path: /web-sdk/api/smwebsdk.sceneresponse
    method: GET
- name: StartSpeakingRequestBody
  endpoint:
    path: /api/smwebsdk/startspeakingrequestbody
    method: GET
    data_selector: properties
    params: {}
- name: SetVariablesRequestBody
  endpoint:
    path: /@soulmachines/smwebsdk/setvariablesrequestbody
    method: GET
    data_selector: properties
    params: {}
- name: StateResponseBody
  endpoint:
    path: /api/smwebsdk/stateresponsebody
    method: GET
    data_selector: properties
    params: {}
- name: SpeechMarkerResponseBody
  endpoint:
    path: /web-sdk/api/smwebsdk/speechmarkerresponsebody
    method: GET
    data_selector: properties
    params: {}
- name: StopBlProfilingRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.stopblprofilingrequestbody
    method: GET
    data_selector: properties
    params: {}
- name: StartRecognizeRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.startrecognizerequestbody
    method: GET
    data_selector: properties
- name: StartSpeakingRequestBody
  endpoint:
    path: /api/smwebsdk/startspeakingrequestbody
    method: GET
    data_selector: properties
    params: {}
- name: UpdateContentAwarenessRequestBody
  endpoint:
    path: /updatecontentawarenessrequestbody/viewheight
    method: GET
    data_selector: viewHeight
- name: StateResponseBody
  endpoint:
    path: /web-sdk/api/smwebsdk.stateresponsebody
    method: GET
    data_selector: properties
    params: {}
- name: UpdateContentAwarenessRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk/updatecontentawarenessrequestbody
    method: GET
    data_selector: viewWidth
    params: {}
- name: ConversationStateTypes
  endpoint:
    path: /web-sdk/api/smwebsdk.conversationstatetypes
    method: GET
    data_selector: enumeration_members
- name: StopBlProfilingRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.stopblprofilingrequestbody
    method: GET
    data_selector: properties
    params: {}
- name: NLPIntent
  endpoint:
    path: /api/nlpintent
    method: GET
    data_selector: NLPIntent
    params: {}
- name: WebsocketKind
  endpoint:
    path: /web-sdk/api/smwebsdk.websocketkind
    method: GET
    data_selector: enumeration_members
- name: NLPIntent
  endpoint:
    path: /web-sdk/api/smwebsdk/nlpintent
    method: GET
    data_selector: PAGE_METADATA
- name: SceneRequestBody
  endpoint:
    path: /web-sdk/api/smwebsdk.scenerequestbody
    method: GET
- name: WebsocketKind
  endpoint:
    path: /websocketkind
    method: GET
    data_selector: members
    params: {}
- name: ContentCard
  endpoint:
    path: /web-sdk/api/smwebsdk.contentcard
    method: GET
    data_selector: data
    params: {}
- name: DemoModeResponseBody
  endpoint:
    path: /demomode/response
    method: GET
    data_selector: response
- name: ContentCardRawData
  endpoint:
    path: /api/smwebsdk/contentcardrawdata
    method: GET
    data_selector: ContentCardRawData
    params: {}
- name: LoggingConfig
  endpoint:
    path: /web-sdk/api/smwebsdk.loggingconfig
    method: GET
    data_selector: LoggingConfig
- name: MediaDeviceOptions
  endpoint:
    path: /api/smwebsdk/mediadeviceoptions
    method: GET
    data_selector: MediaDeviceOptions
- name: LoggingConfig
  endpoint:
    path: /web-sdk/api/smwebsdk.loggingconfig
    method: GET
    data_selector: LoggingConfig
    params: {}
- name: MediaDeviceOptions
  endpoint:
    path: /api/smwebsdk/mediadeviceoptions
    method: GET
    data_selector: MediaDeviceOptions
    params: {}
notes:
- Skills are not supported for all Digital People at this time.
- Skills can only be used with English-language Digital People.
- Transcript data is not saved and only passed to clients via the Orchestration server
  for analytics purposes.
- You should revoke an API key immediately if it becomes inactive, lost, or compromised.
- Gets transcript records for the session that describe interactions between the user
  and the persona.
- Starts the speech recognizer. Relies on the persona having a configured speech recognizer.
- Stops the speech recognizer.
- Closes the current offered or connected session (e.g. webrtc).
- Sends custom text to the browser.
- Changes to a new named camera position, with orbital camera adjustments.
- Applies the configuration associated with a named component.
- Applies the specified list of EML keyword dictionaries to the persona in the order
  specified.
- Updates the persona’s content awareness with the given UI elements and their positions.
- By default, autoClearing of content cards is switched off but can be enabled.
- Content and Cinematic Cuts can be enabled on a per-project basis from Digital DNA
  Studio.
- These features require a UI which consumes the Content Awareness API.
- When using the Custom UI Template, there are a few things you’ll need to decide
  early on, as they will affect how you structure your conversation in the NLP.
- Access to the user's camera and microphone may be requested automatically when the
  connect() function is called.
- If a media device is required and the user denies access, the connect() function
  will fail with an error.
- The user must explicitly allow access to the camera and microphone by approving
  a browser security popup.
- By default we debounce measure calls to avoid unnecessary calls. The debounce duration
  defaults to 300ms.
- By default we debounce measure calls to avoid unnecessary calls.
- The debounce duration defaults to 300ms.
- No unique state transitions; all states can transfer to any other state.
- By default both session logging and content awareness feature logging are enabled.
- The minimum log level can be set to 'debug', 'log', 'warn', or 'error'.
- Logging will give you more insights into what is occurring within the SDK.
- All logs within SDK has prefixed with `smsdk`.
- Default audio source is processed
- Default videoElement is undefined
- Cross page session persistence is not supported in combination with orchestration
- Cross page session persistence is only allowed within one tab, does not support
  multiple tabs
- It is necessary for the page to load within 10 seconds otherwise a session timeout
  error will appear
- By default, the Soul Machines Web SDK will request both Microphone and Webcam access.
- If fewer user media devices are requested than are required, then the requirements
  take precedence.
- Supports session persistence across pages with web API key.
- Cross page session persistence is not supported in combination with orchestration.
- It is necessary for the page to load within 10 seconds otherwise a session timeout
  error will appear.
- Request access to user's Camera and Microphone
- Skills can only be used with HumanOS 2.2 or higher Digital People.
- Each time a DDNA Studio project using the Skill is deployed, the Initialize hook
  is called.
- The Session hook is optional for stateless Skills.
- The Execute hook is required for the Skill to handle ongoing interactions between
  a user and a Digital Person.
- Memories are only persisted for the duration of the session. All Memory values are
  cleared when the session ends.
- This API supports streaming responses.
- Ensure to handle Turn_Id and isFinalSentence for message tracking.
- Requires setup of Corpus annotations to return Conversation Variables.
- This package is intended for use with NodeJS 14 and above.
- 'optional: Initialize hook is triggered when a DDNA Studio project is deployed'
- 'optional for stateless Skills: Session hook is called once before the first interaction'
- 'required: Execute hook is triggered on each user turn within a session'
- Skill Types in the Skill SDK determine which part of the Skills Platform lifecycle
  will execute the Skill.
- A project must have a Base Conversation and may have optional General Skills and
  Pre or Post-Process Skills.
- 'Adapter Skills can be registered in DDNA Studio as any of the following Skill types:
  BASE_CORPUS, DEFAULT with matchType: FALLBACK'
- An Adapter Skill will need to capture some kind of credentials in order to authenticate
  and interact with a third-party platform.
- The Skills Python SDK package contains data types for the session and execute endpoints
  specified within the Skills REST API.
- It is the responsibility of the conversation engineer to ensure that their conversation
  adheres to the requirements of either a Base Skill or Fallback Skill as needed.
- 'A ''FALLBACK'' skill can be configured by pairing skillType: ''DEFAULT'' with matchType:
  ''FALLBACK''.'
- Most chatbots are stateful, meaning you want to start a single session and then
  continue interacting with that session for the duration of the DP interaction.
- It is recommended to store a sessionId as a 'private' memory so that it will be
  accessible only to your own skill.
- A Base Corpus must be able to identify user intents from text input, and respond
  with a text response for each intent.
- It must always respond to user input, even if the response is a NO_MATCH response.
- It's recommended to store a sessionId as a 'private' memory so that it will be accessible
  only to your own skill.
- A Base Corpus Skill must provide the primary conversational content for a project.
- It must respond to every user input, otherwise an error will occur and cause the
  Digital Person to stop interacting.
- This API is now obsolete.
errors:
- 'noUserMedia: the user microphone and/or camera is not available'
- 'noUserMedia: the user microphone/camera were not permitted by the user'
- 'noUserMedia: the user microphone/camera failed to be usable'
- 'noUserMedia: The user microphone and/or camera is not available or was not permitted
  by the user.'
- 'noUserMedia: the microphone/camera is either not available, not usable or the user
  declined permission'
- 'noScene: no persona was available, the server was busy'
- 'serverConnectionFailed: the connection to the server failed'
- 'notSupported: the user''s browser does not support getUserMedia'
- 'mediaStreamFailed: the audio/video stream failed'
- 'sessionTimeout: the session timed out before it was fully available'
- 'controlFailed: a connection to the orchestration server could not be established'
- 'noSessionToResume: an API Key with session persistence enabled was unable to reconnect
  to the previous session'
- 'notSupported: The browser does not support getUserMedia'
- 'noUserMedia: The user microphone and/or camera is not available'
- 'serverConnectionFailed: The connection to the server failed'
- 'noScene: No persona is available'
- 'mediaStreamFailed: The audio/video stream failed'
- 'sessionTimeout: The session timed out before it was fully available'
- '400 Bad Request: Check the request parameters and body.'
- '401 Unauthorized: Recheck OAuth credentials.'
- '500 Internal Server Error: Try again later or contact support.'
auth_info:
  mentioned_objects:
  - SkillConfig
  - PrivacyAndTerms
  - SmEvent
  - SceneResponseError
  - ConversationState
client:
  base_url: https://yourname.loca.lt
  headers:
    Accept: application/json
source_metadata: null
