resources:
- name: webchat
  endpoint:
    path: /api/webchat
    method: GET
    data_selector: records
- name: ai_agents
  endpoint:
    path: /api/ai_agents
    method: GET
    data_selector: data
    params: {}
- name: webchat
  endpoint:
    path: /api/v3/webchat
    method: GET
    data_selector: records
- name: appointment_booking
  endpoint:
    path: /creating-scenarios/appointment-booking
    method: GET
- name: Process Handling AI Agent
  endpoint:
    path: /getting-started-1/quick-start-ai-agents/quick-start-ai-agent
    method: GET
    data_selector: scenes
    params: {}
- name: Appointment Booking Conversation
  endpoint:
    path: /getting-started-1/quick-start-ai-agents/the-start-from-scratch-ai-agent
    method: GET
    data_selector: appointments
    params: {}
- name: user_tracking
  endpoint:
    path: /api/user/tracking
    method: POST
    data_selector: data
    params: {}
- name: semantic_classifier
  endpoint:
    path: /language-services/semantic-classifier
    method: GET
    data_selector: intents
    params: {}
- name: scenario_management
  endpoint:
    path: /scenarios
    method: GET
    data_selector: scenarios
    params: {}
- name: knowledge_service
  endpoint:
    path: /knowledge_service
    method: GET
    data_selector: records
- name: AI Agent
  endpoint:
    path: /api/v1/agents
    method: GET
    data_selector: agents
    params: {}
- name: webchat_embed_code
  endpoint:
    path: /embed
    method: POST
    data_selector: embed_code
    params: {}
- name: webchat_embed
  endpoint:
    path: /dist/nu-webchat-js
    method: GET
    data_selector: settings
- name: scenario
  endpoint:
    path: /scenarios
    method: GET
    data_selector: scenarios
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
    params: {}
- name: scenes
  endpoint:
    path: /scenes
    method: GET
    data_selector: scenes
    params: {}
- name: turns
  endpoint:
    path: /turns
    method: GET
    data_selector: turns
    params: {}
- name: intents
  endpoint:
    path: /intents
    method: GET
    data_selector: intents
    params: {}
- name: scenario
  endpoint:
    path: /scenarios
    method: GET
    data_selector: scenarios
    params: {}
- name: scenario
  endpoint:
    path: /scenarios
    method: GET
    data_selector: scenarios
    params: {}
- name: language_services
  endpoint:
    path: /api/language-services
    method: GET
    data_selector: services
    params: {}
- name: webchat_action
  endpoint:
    path: /api/webchat/actions
    method: POST
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /admin/global-contexts
    method: GET
    data_selector: attributes
    params: {}
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: attributes
    params: {}
- name: global
  endpoint:
    path: /admin/global-contexts
    method: GET
    data_selector: attributes
    params: {}
- name: user
  endpoint:
    path: /admin/global-contexts
    method: GET
    data_selector: attributes
    params: {}
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: attributes
    params: {}
- name: global
  endpoint:
    path: /global
    method: GET
    data_selector: attributes
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: attributes
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: attributes
- name: global
  endpoint:
    path: /global
    method: GET
    data_selector: attributes
- name: conversation
  endpoint:
    path: /conversation
    method: GET
    data_selector: attributes
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: attributes
- name: attributes
  endpoint:
    path: /api/attributes
    method: GET
    data_selector: data
    params: {}
- name: attributes
  endpoint:
    path: /admin/dynamic-attributes
    method: GET
    data_selector: attributes
- name: Available operations
  endpoint:
    path: /conditions/operations
    method: GET
    data_selector: operations
- name: Operators to combine multiple conditions
  endpoint:
    path: /conditions/operators
    method: GET
    data_selector: operators
- name: message_editor
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-editor
    method: GET
- name: message_types
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types
    method: GET
- name: conditions
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-conditions
    method: GET
- name: attributes
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/using-attributes-in-messages
    method: GET
- name: text_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/text-message
    method: GET
- name: image_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/image-message
    method: GET
- name: button_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/button-message
    method: GET
- name: date_picker_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/date-picker-message
    method: GET
- name: audio_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/audio-message
    method: GET
- name: form_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/form-message
    method: GET
- name: full_page_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/full-page-message
    method: GET
- name: conversation_handover_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/conversation-handover-message
    method: GET
- name: autocomplete_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/autocomplete-message
    method: GET
- name: list_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/list-message
    method: GET
- name: rich_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/rich-message
    method: GET
- name: location_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/location-message
    method: GET
- name: e_sign_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/e-sign-message
    method: GET
- name: file_upload_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/file-upload-message
    method: GET
- name: meta_messages
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/meta-messages
    method: GET
- name: twilio_content_template_message
  endpoint:
    path: /opendialog-platform/conversation-designer/message-design/message-types/twilio-content-template-message
    method: GET
- name: semantic_interpreter
  endpoint:
    path: /opendialog-platform/interpreters-and-natural-language-understanding/language-services/semantic-intent-classifier
    method: GET
    data_selector: semantic_interpreter_data
- name: knowledge_service
  endpoint:
    path: /opendialog-platform/interpreters-and-natural-language-understanding/language-services/retrieval-augmented-generation
    method: GET
    data_selector: knowledge_service_data
- name: llm_actions
  endpoint:
    path: /opendialog-platform/interpreters-and-natural-language-understanding/llm-actions
    method: GET
    data_selector: llm_actions_data
- name: Webhook actions
  endpoint:
    path: /opendialog-platform/actions/webhook-action
    method: GET
- name: webhook_action
  endpoint:
    path: /opendialog
    method: POST
- name: interpreter
  endpoint:
    path: /api/interpreters
    method: GET
    data_selector: interpreters
    params: {}
- name: Webhook actions
  endpoint:
    path: /opendialog-platform/actions/webhook-action
    method: GET
- name: Actions from library
  endpoint:
    path: /opendialog-platform/actions/actions-from-library
    method: GET
- name: Conversation Hand-off
  endpoint:
    path: /opendialog-platform/actions/conversation-hand-off
    method: GET
- name: webhook
  endpoint:
    path: /opendialog
    method: POST
- name: webhook_test_action
  endpoint:
    path: /your-webhook-endpoint
    method: POST
- name: project_usage
  endpoint:
    path: /opendialog-platform/monitoring-your-application#project-usage
    method: GET
    data_selector: usage_data
- name: interaction_logs
  endpoint:
    path: /opendialog-platform/monitoring-your-application#interaction-logs
    method: GET
    data_selector: interaction_data
- name: message_log
  endpoint:
    path: /opendialog-platform/monitoring-your-application#message-table
    method: GET
    data_selector: message_data
- name: translation_export
  endpoint:
    path: /export/translation
    method: POST
    data_selector: exportedContent
    params: {}
- name: translation_import
  endpoint:
    path: /import/translation
    method: POST
    data_selector: importedContent
    params: {}
- name: project_usage
  endpoint:
    path: /opendialog-platform/monitoring-your-application#project-usage
    method: GET
    data_selector: usage_data
- name: interaction_logs
  endpoint:
    path: /opendialog-platform/monitoring-your-application#interaction-logs
    method: GET
    data_selector: interaction_logs
- name: message_log_table
  endpoint:
    path: /opendialog-platform/monitoring-your-application#message-table
    method: GET
    data_selector: message_logs
- name: configuration
  endpoint:
    path: /chat-api/configuration
    method: GET
- name: history
  endpoint:
    path: /chat-api/history
    method: GET
- name: message
  endpoint:
    path: /chat-api/message
    method: POST
- name: webhook_action
  endpoint:
    path: /webhook/action
    method: POST
    data_selector: output_data.attributes
- name: webchat_config
  endpoint:
    path: /webchat/config
    method: GET
    data_selector: config
    params: {}
- name: user_history
  endpoint:
    path: /webchat/history
    method: GET
    data_selector: history
    params: {}
- name: configuration
  endpoint:
    path: /chat-api/configuration
    method: GET
- name: history
  endpoint:
    path: /chat-api/history
    method: GET
- name: message
  endpoint:
    path: /chat-api/message
    method: POST
- name: webchat_config
  endpoint:
    path: /webchat/config
    method: GET
    data_selector: config
    params: {}
- name: webchat_history
  endpoint:
    path: /webchat/history
    method: GET
    data_selector: history
    params: {}
- name: webchat_api
  endpoint:
    path: /developing-with-opendialog/webchat/webchat-api
    method: GET
- name: webchat
  endpoint:
    path: /opendialog-webchat.umd.mjs
    method: GET
    data_selector: settings
    params: {}
- name: message
  endpoint:
    path: /chat-api/message
    method: POST
    data_selector: ''
    params: {}
- name: configuration
  endpoint:
    path: /chat-api/configuration
    method: GET
    data_selector: ''
    params: {}
- name: history
  endpoint:
    path: /chat-api/history
    method: GET
    data_selector: ''
    params: {}
- name: transcript
  endpoint:
    path: /chat-api/transcript
    method: GET
    data_selector: ''
    params: {}
- name: chat_message
  endpoint:
    path: /chat-api/message
    method: POST
    data_selector: ''
    params: {}
- name: chat_configuration
  endpoint:
    path: /chat-api/configuration
    method: GET
    data_selector: ''
    params: {}
- name: chat_history
  endpoint:
    path: /chat-api/history
    method: GET
    data_selector: ''
    params: {}
- name: chat_transcript
  endpoint:
    path: /chat-api/transcript
    method: GET
    data_selector: ''
    params: {}
- name: webchat
  endpoint:
    path: /webchat
    method: GET
    data_selector: data
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- To access your bearer token visit the Identity & Security page - accessible by clicking
  on your username in the bottom left-hand corner.
- Requires setup of OAuth2 for authentication
- Requires setup of connected app in OpenDialog
- Uses OAuth2 with refresh token.
- Requires setup of OAuth2 client for API access.
- Uses OAuth2 with refresh token — requires setup of connected app in webchat
- Uses OAuth2 with refresh token — requires setup of connected app in OpenDialog
- Uses OAuth2 for authentication
- Handling processes needs specific attention because they have a well defined series
  of steps and a well-defined end goal.
- Requires OAuth2 authentication setup.
- AI Agent can recognize new topics through Semantic classification.
- Responses can be static, dynamic, or hybrid.
- Ensure the AI agent can recognize new topics through the Semantic Classifier.
- AI agent interactions are structured around scenarios and conversations.
- Uses OAuth2 with refresh token — requires setup of connected app in opendialog
- Test your AI Agent using the Preview feature for functional testing.
- Use the conversation visualizer to diagnose issues in conversational flows.
- Embed code should be placed just before the closing </body> tag.
- Some objects may return nulls in deeply nested fields
- Uses a design-system approach to conversation design
- Some objects like Contact may return nulls in deeply nested fields
- Uses OAuth2 — requires setup of connected app in OpenDialog
- Requires setup of connected app in api
- Scenarios are by default, created in draft mode.
- Active scenarios are available to be used in chat interfaces.
- Scenarios are by default, created in draft mode. To use in a live environment, set
  the scenario to active by toggling the switch in the bottom right corner of the
  scenario tile.
- Requires authentication via API key.
- Supports persistent contexts that will be automatically stored together with user
  information and retrieved as required.
- Attributes are used throughout the conversation in Conditions, Messages, Actions
  and Intents.
- Attributes are stored in contexts.
- Different contexts can be used to separate different types of information.
- Attribute Management allows you to view all available attributes for your conversation.
- You can create new attributes throughout the conversation engine.
- Attribute Management can be accessed in the sidebar of the conversation designer.
- Conditions are a way that attributes can be used to shape the flow of the conversation.
- You can chain or group multiple conditions (two or more) together and apply them
  to any Conversation Object or Message Template.
- The only default composite attributes are the user and utterance attributes in the
  user context, however these are not actively promoted to the user.
- It is possible to query these attributes to get data related to the user or utterance
  (like the utterance text / callback ID).
- 'The advantages of using a composite attribute: it is a way of grouping related
  data together and gives the possibility of acting on the group as a whole.'
- Composite attributes are introduced by engineering (backend work) and may then be
  used by conversation designers.
- Requires setup of connected app in WebChat
- Requires setup of connected app in opendialog
- Ensuring your chatbot meets AA accessibility standards is a duty that must be undertaken
  by both Open Dialog and our clients.
- By default, our out-of-the-box chatbot meets AA standards.
- Avoid flashing images.
- Avoid generic buttons and link labels.
- Use example content within placeholder text.
- Using a low reading age helps people with reading disabilities to understand your
  content.
- Uses OAuth2 with refresh token
- Choosing the right colours for neurodivergent customers is also an important part
  of designing the interface of your chatbot.
- Multiple Interpreters can exist within a single scenario, and each Interpreter can
  fulfil a different purpose.
- Inclusive design is a journey, not a sprint - therefore it may take time to adopt
  this process in your organisation.
- Undertaking inclusive design practices is a shared responsibility.
- Dealing with failed actions may require specific handling in your implementation.
- Actions can fail so we need to be able to check for that from our conversation design
  and deal with it appropriately.
- Every action automatically generates a boolean attribute (true/false) based on the
  action name.
- Uses OAuth2 authentication
- OpenDialog now allows you to set up a seamless handover to other systems from within
  your conversational application.
- Analyse allows you to explore how your application has been performing.
- Filtering messages can be done by User ID, Date & Time, and message type.
- Check that you don't have two of the same type of intents following one another,
  e.g. an app intent followed by an app intent.
- Check that your components have the correct behavior, e.g. starting and open behaviors.
- Check that you defined the intent as a user intent. App intents won't show up since
  the button requires a user intent.
- A button block allows you to add a message to your app intent and indicate buttons
  and labels. For each button, you need to indicate the USER intent that the button
  goes to.
- Exported content is sent to the email address used to log in to OpenDialog.
- Exported files must be imported back into the same scenario.
- Data is stored in the UK and EU.
- OpenDialog only stores customer data and conversational history for a maximum of
  90 days within the platform.
- We do not transfer or move the data outside of the UK/EU.
- For each button, you need to indicate the USER intent that the button goes to.
- The webhook action allows you to send and receive attributes to/from a webhook URL.
- Uses OAuth2 for authentication.
- There are data layer variables pre-set within WebChat to enable user tracking data
  to be passed into Tag Manager and then into Google Analytics instances.
- The 1.0 version is currently in development - we will be adding more as we go on!
- The parentEl needs to be a valid CSS selector for the page - the above will place
  the iFrame inside the element with ID chatbot
- Even if the chatbot is loaded inside an element, the default CSS is still applied
  to give the iFrame a fixed position.
- User ID can be passed in with the embed code or taken from session storage.
- WebChat history must be turned on for ongoing users.
- Requires a basic understanding of Javascript to set up and use
- The `parentEl` needs to be a valid CSS selector for the page - the above will place
  the iFrame inside the element with ID `chatbot`.
- Currently the WhatsApp and SMS integration feature is available on-demand.
- Currently this feature is available on-demand, so if you want to try it out, reach
  out to our team via email hello@opendialog.ai.
- New security features introduced in version 3.
- Several Webchat API endpoints updated.
- All Chat API calls now require OPENDIALOG-USER-ID and OPENDIALOG-SCENARIO-ID headers
- Starting in 3.0.0, every Chat API endpoint must include the Authorization header
  used by /incoming/chatApi
- New security features introduced in version 3.0.0+
- Starting in 3.0.0, every Chat API endpoint must include authorization header.
- Requires OAuth2 authentication for accessing data.
- 'OpenDialog: AI Agent Management System'
- OpenDialog is a no-code AI Agent Management System with a unique methodology for
  designing, maintaining and scaling enterprise-grade conversational AI Agents quickly
  and safely.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check your OAuth token and permissions.'
- '404 Not Found: Verify the endpoint path.'
- '401 Unauthorized: Check your API credentials.'
- '403 Forbidden: You do not have permission to access this resource.'
- 'No classified intent got matched: Indicates an issue with user utterance interpretation.'
- 'No messages found with passing conditions: All available messages or app intents
  have unmet conditions.'
- 'Wrong/unexpected response: May be due to misclassification or erroneous response
  generation.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Missing expected attributes: ''rating'', ''comments'''
- '422 Unprocessable Entity: Missing required headers'
- 'HTTP 422: Missing required headers.'
- '401 Unauthorized: Check if the access token is valid'
- '403 Forbidden: Check user permissions'
- '404 Not Found: Verify the endpoint URL'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://opendialog.ai
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
