resources:
- name: availabilities
  endpoint:
    path: /suppliers/:supplier_id/products/:product_id/availabilities
    method: GET
    data_selector: availabilities
- name: create_booking
  endpoint:
    path: /bookings
    method: POST
    data_selector: booking
- name: cancel_booking
  endpoint:
    path: /bookings/cancel/:booking_id
    method: PUT
    data_selector: null
- name: retrieve_booking
  endpoint:
    path: /bookings/:booking_id
    method: GET
    data_selector: null
- name: acquire_hold
  endpoint:
    path: /holds
    method: POST
    data_selector: hold
- name: release_hold
  endpoint:
    path: /holds/:hold_id
    method: DELETE
    data_selector: null
- name: hold
  endpoint:
    path: /holds/:hold_id
    method: GET
- name: suppliers
  endpoint:
    path: /v1.2/suppliers
    method: GET
    data_selector: suppliers
    params: {}
- name: supplier
  endpoint:
    path: /v1.2/suppliers/{supplier_id}
    method: GET
    data_selector: supplier
    params: {}
- name: availabilities
  endpoint:
    path: /v1.2/suppliers/{supplier_id}/products/{product_id}/availabilities
    method: GET
    data_selector: availabilities
- name: single_availability
  endpoint:
    path: /v1.2/suppliers/{supplier_id}/products/{product_id}/availability
    method: GET
    data_selector: availability
- name: bookings
  endpoint:
    path: /v1.2/bookings
    method: POST
- name: cancel_booking
  endpoint:
    path: /v1.2/bookings/cancel/{booking_id}
    method: PUT
- name: get_booking
  endpoint:
    path: /v1.2/bookings/{booking_id}
    method: GET
- name: bookings
  endpoint:
    path: /v1.2/bookings
    method: POST
    data_selector: booking
- name: cancel_booking
  endpoint:
    path: /v1.2/bookings/cancel/{booking_id}
    method: PUT
    data_selector: ''
- name: booking
  endpoint:
    path: /bookings/{booking_id}
    method: GET
    data_selector: booking
    params: {}
- name: holds
  endpoint:
    path: /v1.2/holds
    method: POST
    data_selector: hold
    params: {}
- name: release_hold
  endpoint:
    path: /v1.2/holds/{hold_id}
    method: DELETE
    data_selector: ''
    params: {}
- name: hold
  endpoint:
    path: /holds/{hold_id}
    method: GET
    data_selector: hold
    params: {}
- name: suppliers
  endpoint:
    path: /suppliers/{supplier_id}
    method: GET
- name: products
  endpoint:
    path: /suppliers/{supplier_id}/products/{product_id}
    method: GET
- name: rates
  endpoint:
    path: /suppliers/{supplier_id}/products/{product_id}/rates/{rate_id}
    method: GET
- name: availability
  endpoint:
    path: /suppliers/{supplier_id}/products/{product_id}/availability
    method: GET
- name: holds
  endpoint:
    path: /holds
    method: POST
- name: retrieve_hold
  endpoint:
    path: /holds/{hold_id}
    method: GET
- name: release_hold
  endpoint:
    path: /holds/{hold_id}
    method: DELETE
- name: bookings
  endpoint:
    path: /bookings
    method: POST
- name: cancel_booking
  endpoint:
    path: /bookings/cancel/{booking_id}
    method: PUT
- name: retrieve_booking
  endpoint:
    path: /bookings/{booking_id}
    method: GET
- name: order
  endpoint:
    path: /suppliers/{supplierId}/orders/{orderId}
    method: GET
    data_selector: object
- name: cancel_order
  endpoint:
    path: /suppliers/{supplierId}/orders/{orderId}
    method: DELETE
    data_selector: object
- name: extend_order
  endpoint:
    path: /suppliers/{supplierId}/orders/{orderId}/extend
    method: POST
    data_selector: object
- name: confirm_order
  endpoint:
    path: /suppliers/{supplierId}/orders/{orderId}/confirm
    method: POST
    data_selector: object
- name: cancel_order
  endpoint:
    path: /suppliers/{supplierId}/orders/{orderId}
    method: DELETE
    data_selector: order
    params: {}
- name: extend_order
  endpoint:
    path: /suppliers/{supplierId}/orders/{orderId}/extend
    method: POST
    data_selector: object
    params: {}
- name: confirm_order
  endpoint:
    path: /suppliers/{supplierId}/orders/{orderId}/confirm
    method: POST
    data_selector: contact
    params: {}
- name: price_schedule
  endpoint:
    path: /suppliers/{supplierId}/products/{productId}/pricing/schedule
    method: GET
    data_selector: object
    params: {}
- name: channelbinding
  endpoint:
    path: /channelbindings
    method: GET
- name: update_channelbinding
  endpoint:
    path: /channelbindings
    method: PUT
- name: create_channelbinding
  endpoint:
    path: /channelbindings
    method: POST
- name: delete_channelbinding
  endpoint:
    path: /channelbindings
    method: DELETE
- name: test_channelbinding
  endpoint:
    path: /channelbinding/test
    method: POST
- name: channelbinding
  endpoint:
    path: /channelbindings
    method: POST
    data_selector: object
    params: {}
- name: supplier
  endpoint:
    path: /supplier
    method: POST
    data_selector: object
    params: {}
- name: rate
  endpoint:
    path: /rate
    method: PUT
    data_selector: object
    params: {}
- name: availability
  endpoint:
    path: /availability
    method: PUT
    data_selector: object
    params: {}
- name: availability_notification_rule
  endpoint:
    path: /availability
    method: POST
    data_selector: object
    params: {}
- name: price_schedule_notification_rule
  endpoint:
    path: /priceschedule
    method: POST
    data_selector: object
    params: {}
- name: booking_notification_rule
  endpoint:
    path: /booking
    method: POST
    data_selector: object
    params: {}
- name: booking_notification_rule
  endpoint:
    path: /booking
    method: POST
    data_selector: object
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: object
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: DELETE
    data_selector: ''
    params: {}
- name: supplier
  endpoint:
    path: /suppliers/{supplier_id}
    method: GET
- name: multiple_suppliers
  endpoint:
    path: /suppliers
    method: GET
- name: product
  endpoint:
    path: /suppliers/{supplierid}/products/{product id}
    method: GET
- name: multiple_products
  endpoint:
    path: /suppliers/{supplier_id}/products
    method: GET
- name: rate
  endpoint:
    path: /suppliers/{supplierid}/products/{product id}/rates/{rate_id}
    method: GET
- name: multiple_rates
  endpoint:
    path: /suppliers/{supplier_id}/products/{product_id}/rates
    method: GET
- name: price_schedule
  endpoint:
    path: /suppliers/{supplier_id}/products/{product_id}/pricing/schedule
    method: GET
- name: availability
  endpoint:
    path: /suppliers/{supplierid}/products/{product id}/availability
    method: GET
- name: multiple_availabilities
  endpoint:
    path: /suppliers/{supplier_id}/products/{product_id}/availabilities
    method: GET
- name: create_hold
  endpoint:
    path: /holds
    method: POST
- name: create_booking
  endpoint:
    path: /bookings
    method: POST
- name: cancel_booking
  endpoint:
    path: /bookings/cancel/{booking_id}
    method: PUT
- name: retrieve_hold
  endpoint:
    path: /holds/{hold_id}
    method: GET
- name: release_hold
  endpoint:
    path: /holds/{hold_id}
    method: DELETE
- name: retrieve_booking
  endpoint:
    path: /bookings/{booking_id}
    method: GET
- name: suppliers
  endpoint:
    path: /suppliers
    method: GET
    params:
      partner_id: '{partner_id}'
      code: '{code}'
- name: products
  endpoint:
    path: /suppliers/{supplier_id}/products
    method: GET
    params:
      limit: '{limit}'
      offset: '{offset}'
      partner_id: '{partner_id}'
      code: '{code}'
- name: rates
  endpoint:
    path: /suppliers/{supplier_id}/products/{product_id}/rates
    method: GET
    params:
      valid_during_end: '{valid_during_end}'
      valid_during_start: '{valid_during_start}'
      valid_from: '{valid_from}'
      valid_until: '{valid_until}'
      limit: '{limit}'
      offset: '{offset}'
      option_id: '{option_id}'
      partner_id: '{partner_id}'
      code: '{code}'
- name: price_schedule
  endpoint:
    path: /suppliers/{supplier_id}/products/{product_id}/pricing/schedule
    method: GET
    params:
      start_date: '{start_date}'
      end_date: '{end_date}'
      rate_id: '{rate_id}'
- name: availabilities
  endpoint:
    path: /suppliers/{supplier_id}/products/{product_id}/availabilities
    method: GET
    params:
      end: '{end}'
      start: '{start}'
      rate_id: '{rate_id}'
- name: hold
  endpoint:
    path: /holds
    method: POST
    params:
      partnerId: '{partner_id}'
- name: booking
  endpoint:
    path: /bookings
    method: POST
    params:
      partnerId: '{partner_id}'
- name: cancel_booking
  endpoint:
    path: /bookings/cancel/{booking_id}
    method: PUT
- name: product_level
  endpoint:
    path: /reseller-api/ticketmaster-connection---extension-keys#product-level
    method: GET
    data_selector: extension_keys
- name: availability_level
  endpoint:
    path: /reseller-api/ticketmaster-connection---extension-keys#availability-level
    method: GET
    data_selector: extension_keys
- name: hold_level
  endpoint:
    path: /reseller-api/ticketmaster-connection---extension-keys#hold-level
    method: GET
    data_selector: extension_keys
- name: booking_level
  endpoint:
    path: /reseller-api/ticketmaster-connection---extension-keys#booking-level
    method: GET
    data_selector: extension_keys
- name: booking
  endpoint:
    path: /createbooking
    method: POST
    data_selector: extension_keys
    params:
      disney-deliveryDate: required
      disney-deliveryInstructions: required
      disney-deliveryType: required
      disney-parkReservationDates_YYYY-MM-DD: required
notes:
- Development to the Redeam Booking API can only commence once your application has
  been 'approved', and any applicable agreements are signed.
- Redeam Partner APIs MUST be hosted behind a valid, fully-qualified domain name
- Connections to the Partner API MUST support HTTPS using TLS v1.2 or above with a
  valid certificate
- A `409 Conflict` status code is returned if an item is updated with an out-of-date
  `version`.
- All customer integrations are protected with API keys and secrets
- All communications are done over secure TLS 1.3
- All PII information is encrypted throughout Redeam, both on the wire and at rest
  with strict RBAC mechanisms
- This system is ideal for event-driven architectures, where real-time communication
  is essential.
- The specific change in data will not be shared in the notification, you get the
  message and then need to fetch the information from the existing API endpoints.
- The Notification Registry API allows clients to register, update, and manage webhook
  configurations.
- Test parameters can use placeholder values.
- Currently, only `canceled` is supported for booking operations.
- Use Price Schedule Notification Rules for price changes.
- Currently, only the `updated` operation is supported for notifications.
- No authentication is required for any operations.
- Each rule should use a distinct `url` tailored to the specific notification type.
- Disable all can be set to ensure no notifications are sent to any subscribed registry
  rule.
- Availability data is stored and used to respond to availability requests from Resellers.
- If the availability cache data is older than 5 minutes, Redeam will pull availability
  data from the Supplier.
- Please do not develop the keys with an `x-` prefix as they will be excluded from
  distribution.
- Extension keys under the Rate object will be included in booking response, as they
  are part of the API schema.
- Prices need to be mapped to rates
- The start and end date for the Price Schedule needs to be between 1 and 364 not
  as above 365 days
- The Get Hold request needs to include the Price ID and other matching information
  from the Get Rates / Price Schedule response
- The Get Hold request needs to include the Price ID and other matching information
  from the Get Rate / Price Schedule response for the requested Traveller Type
errors:
- 'BAD_REQUEST: Check required parameters'
- 'CONFLICT: Resource already exists'
- 'NOT_FOUND: Resource not found'
- '404 NOT FOUND: If a Hold cannot be found matching the hold_id parameter'
- '401: Unauthorized'
- '503: The server is temporarily unavailable, either because the server is under
  maintenance, or overloaded (accepted too many requests in too short a time)'
- '400: Bad Request'
- '409: Conflict'
- '413: Payload Too Large'
- 401 Unauthorized
- 404 Not Found
- '409 Conflict: Returned if an item is updated with an out-of-date `version`.'
- '400: An error has occurred.'
- '401: Missing `Authorization` header or key could not be validated.'
- '403: The `Authorization` header was validated but the requestor does not have the
  correct permissions to access the requested resource or perform the requested operation.'
- '404: Invalid URI path requested.'
- '500: An unknown error occurred and the server cannot respond in a sensible way.'
- '503: The server is temporarily unavailable.'
- '500: An unknown error occurred.'
- '503: The server is temporarily unavailable, either because the server is under
  maintenance, or overloaded.'
- '400: Malformed or invalid request.'
- '404: Rule not found.'
- '500: Internal error.'
- '400: Malformed rule'
- '404: Rule not found'
- '500: Internal error'
- '404: Object not found'
- If the 'disney-parkReservationDate_[Date]' field is left blank or contains invalid
  dates, the reservation request will not be successfully processed.
- 'BAD_REQUEST: price resolver error: cannot validate hold prices: 1 error occurred:
  expected hold item at index 0 to have one of these price IDs; got price ID'
- 'BAD_REQUEST: price resolver error: cannot validate hold prices: cannot validate
  static price ID for rate and traveler type'
- '400: Items in reserve must all be of the same inventory type'
- '400: Json body formatted incorrectly'
- '400 / 500 / 503: dc.availability.ismds.error'
- '400 - 10002: Event capacity reached, your order cannot be processed'
- '400 - 10161: Ticket limit reached error'
- '400 - 20009: Cart cannot be completed until balanced'
- '400 - 20052: No inventory found to match request'
- '400 - 20118: Customer information data rejected'
- '400 - 20228: Reserve request not processed'
- '400 - 20231: Inventory authorization failure due to limit violation'
- '403 - 20200: A form of delivery must be selected to complete purchase'
- '404: Order Not Found'
- '404: dc.availability.canceled'
- '500: Unresponsive system'
- '500 - 10000: Unknown error occurred'
- '500 - 20002: General uncoded system error'
- '500 - 20226: Command not processed'
- '500 - 20257: ATLAS load error'
auth_info:
  mentioned_objects: []
client:
  base_url: https://notifications.redeam.io/registry/v1
source_metadata: null
