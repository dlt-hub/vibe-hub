resources:
- name: API
  endpoint:
    path: /api
    method: GET
- name: downloads
  endpoint:
    path: /api/listgroups
    method: GET
    data_selector: downloads
- name: history
  endpoint:
    path: /api/history
    method: GET
    data_selector: history
- name: messages
  endpoint:
    path: /api/log
    method: GET
    data_selector: messages
- name: filter
  endpoint:
    path: /rss
    method: GET
    data_selector: items
    params: {}
- name: filter
  endpoint:
    path: /api/filter
    method: GET
    data_selector: rules
    params: {}
- name: duplicates
  endpoint:
    path: /api/duplicates
    method: GET
    data_selector: duplicate_items
    params: {}
- name: filter
  endpoint:
    path: /api/filter
    method: GET
    data_selector: filter_rules
    params: {}
- name: duplicates
  endpoint:
    path: /api/duplicates
    method: GET
    data_selector: duplicate_items
    params: {}
- name: console_mode
  endpoint:
    path: /console-mode
    method: GET
    data_selector: commands
- name: server_mode
  endpoint:
    path: /server-mode
    method: GET
    data_selector: commands
- name: nzb_feed
  endpoint:
    path: /api
    method: GET
    data_selector: nzb_files
    params:
      extended: '1'
- name: remote_commands
  endpoint:
    path: /api/remote
    method: GET
    data_selector: commands
- name: nzbget_console
  endpoint:
    path: /console
    method: GET
    data_selector: commands
- name: nzbget_server
  endpoint:
    path: /server
    method: GET
    data_selector: status
- name: nntp_server
  endpoint:
    path: /nserv
    method: GET
    data_selector: server_status
    params: {}
- name: individual_files
  endpoint:
    path: /edit/individual-files
    method: GET
    data_selector: actions
    params: {}
- name: groups
  endpoint:
    path: /edit/groups
    method: GET
    data_selector: actions
    params: {}
- name: post_processor_queue
  endpoint:
    path: /edit/post-processor-queue
    method: GET
    data_selector: actions
    params: {}
- name: history_list
  endpoint:
    path: /edit/history-list
    method: GET
    data_selector: actions
    params: {}
- name: command_write
  endpoint:
    path: /command/write
    method: GET
    data_selector: actions
    params: {}
- name: package_info
  endpoint:
    path: /package-info.json
    method: GET
    data_selector: NZBGet.PackageInfo
- name: update_info
  endpoint:
    path: /update-info.json
    method: GET
    data_selector: NZBGet.UpdateInfo
- name: nntp_server
  endpoint:
    path: /nserv
    method: GET
    data_selector: records
    params: {}
- name: functional_testing
  endpoint:
    path: /tests/functional
    method: GET
    data_selector: tests
- name: nserv
  endpoint:
    path: /nserv
    method: GET
    data_selector: nserv
- name: update_info
  endpoint:
    path: /nzbget-update-info.json
    method: GET
    data_selector: NZBGet.PackageInfo
- name: install_script
  endpoint:
    path: /nzbget-update-install.sh
    method: POST
    data_selector: NZBGet.UpdateInfo
- name: Extension Scripts
  endpoint:
    path: /extension-scripts
    method: GET
    data_selector: scripts
- name: postqueue
  endpoint:
    path: /xmlrpc
    method: POST
- name: extension_scripts
  endpoint:
    path: /extension-scripts
    method: GET
    data_selector: scripts
    params: {}
- name: post_queue
  endpoint:
    path: /xmlrpc
    method: POST
    data_selector: postqueue
- name: extension_scripts
  endpoint:
    path: /extension-scripts
    method: GET
    data_selector: scripts
    params: {}
- name: post_processing_scripts
  endpoint:
    path: /api/post-processing-scripts
    method: GET
    data_selector: scripts
- name: nzb_file_info
  endpoint:
    path: /api/nzb-file-info
    method: GET
    data_selector: nzbFileInfo
- name: nzb-file
  endpoint:
    path: /api/nzb_file
    method: GET
    data_selector: records
    params: {}
- name: scan_scripts
  endpoint:
    path: /api/scan_scripts
    method: GET
    data_selector: scripts
    params: {}
- name: nzb_file_info
  endpoint:
    path: /api/nzb/file_info
    method: GET
    data_selector: nzb_file_info
    params: {}
- name: scan_scripts
  endpoint:
    path: /scan-scripts
    method: GET
    data_selector: scripts
    params: {}
- name: queue_event_information
  endpoint:
    path: /queue_event_information
    method: GET
    data_selector: events
    params: {}
- name: control_commands
  endpoint:
    path: /control_commands
    method: GET
    data_selector: commands
    params: {}
- name: scheduler_scripts
  endpoint:
    path: /api/scheduler_scripts
    method: GET
    data_selector: scripts
- name: queue_event
  endpoint:
    path: /api/queue/event
    method: GET
    data_selector: events
    params: {}
- name: version
  endpoint:
    path: /api/version
    method: GET
    data_selector: version
    params: {}
- name: shutdown
  endpoint:
    path: /api/shutdown
    method: POST
    data_selector: 'True'
- name: shutdown
  endpoint:
    path: /api/shutdown
    method: POST
    data_selector: 'True'
- name: reload
  endpoint:
    path: /api/reload
    method: POST
    data_selector: 'true'
- name: reload
  endpoint:
    path: /api/reload
    method: POST
    data_selector: return_value
- name: listgroups
  endpoint:
    path: /api/listgroups
    method: GET
    data_selector: structures
    params:
      NumberOfLogEntries: 0
- name: listgroups
  endpoint:
    path: /api/listgroups
    method: GET
    data_selector: struct
    params:
      NumberOfLogEntries: 0
- name: loadlog
  endpoint:
    path: /loadlog
    method: GET
    data_selector: struct
    params:
      NZBID: int
      IDFrom: int
      NumberOfEntries: int
- name: loadlog
  endpoint:
    path: /loadlog
    method: GET
    data_selector: struct[]
    params:
      NZBID: int
      IDFrom: int
      NumberOfEntries: int
- name: log
  endpoint:
    path: /api/log
    method: GET
    data_selector: log_entries
    params:
      IDFrom: '0'
      NumberOfEntries: '0'
- name: log
  endpoint:
    path: /api/log
    method: GET
    data_selector: struct
    params:
      IDFrom: 0
      NumberOfEntries: 0
- name: history
  endpoint:
    path: /api/history
    method: GET
    data_selector: history
    params:
      Hidden: bool
- name: history
  endpoint:
    path: /api/history
    method: GET
    data_selector: struct[]
    params:
      Hidden: bool
- name: editqueue
  endpoint:
    path: /api/editqueue
    method: POST
    data_selector: result
    params: {}
- name: editqueue
  endpoint:
    path: /editqueue
    method: POST
    data_selector: bool
    params: {}
- name: listfiles
  endpoint:
    path: /api/listfiles
    method: GET
    data_selector: struct
    params:
      IDFrom: 0
      IDTo: 0
      NZBID: int
- name: listfiles
  endpoint:
    path: /api/listfiles
    method: GET
    data_selector: structures
    params:
      IDFrom: 0
      IDTo: 0
      NZBID: NZBID of the group to be returned
- name: append
  endpoint:
    path: /xmlrpc
    method: POST
    data_selector: result
    params: {}
- name: append
  endpoint:
    path: /xmlrpc
    method: POST
    data_selector: result
- name: scan
  endpoint:
    path: /api/scan
    method: POST
    data_selector: result
    params: {}
- name: scan
  endpoint:
    path: /api/scan
    method: POST
    data_selector: result
- name: status
  endpoint:
    path: /api/status
    method: GET
    data_selector: status
    params: {}
- name: status
  endpoint:
    path: /api/status
    method: GET
- name: writelog
  endpoint:
    path: /api/writelog
    method: POST
    data_selector: logEntry
    params:
      Kind: INFO
      Text: string
- name: writelog
  endpoint:
    path: /api/writelog
    method: POST
    data_selector: log_entry
    params: {}
- name: server_volumes
  endpoint:
    path: /servervolumes
    method: GET
    data_selector: server_volumes
- name: servervolumes
  endpoint:
    path: /api/servervolumes
    method: GET
    data_selector: struct
    params: {}
- name: resetservervolume
  endpoint:
    path: /api/resetservervolume
    method: POST
    data_selector: result
    params: {}
- name: resetservervolume
  endpoint:
    path: /api/resetservervolume
    method: POST
    data_selector: return_value
- name: rate
  endpoint:
    path: /api/rate
    method: POST
    data_selector: result
    params:
      Limit: int
- name: rate
  endpoint:
    path: /api/rate
    method: POST
    data_selector: return_value
    params:
      Limit: int
- name: pausedownload
  endpoint:
    path: /api/pausedownload
    method: GET
    data_selector: 'True'
- name: pausedownload
  endpoint:
    path: /api/pausedownload
    method: POST
    data_selector: result
- name: resumedownload
  endpoint:
    path: /api/resumedownload
    method: GET
    data_selector: result
- name: resumedownload
  endpoint:
    path: /api/resumedownload
    method: POST
    data_selector: result
- name: pausepost
  endpoint:
    path: /api/pausepost
    method: POST
    data_selector: result
    params: {}
- name: pausepost
  endpoint:
    path: /api/pausepost
    method: GET
    data_selector: return_value
- name: resumepost
  endpoint:
    path: /api/resumepost
    method: POST
    data_selector: 'True'
- name: pausescan
  endpoint:
    path: /api/pausescan
    method: GET
    data_selector: 'True'
- name: pausescan
  endpoint:
    path: /api/pausescan
    method: POST
    data_selector: result
- name: resumescan
  endpoint:
    path: /api/resumescan
    method: POST
    data_selector: 'True'
- name: resumescan
  endpoint:
    path: /api/resumescan
    method: POST
    data_selector: 'True'
- name: scheduleresume
  endpoint:
    path: /scheduleresume
    method: POST
    data_selector: 'True'
    params:
      Seconds: int
- name: scheduleresume
  endpoint:
    path: /scheduleresume
    method: POST
    data_selector: 'True'
    params:
      Seconds: int
- name: config
  endpoint:
    path: /api/config
    method: GET
    data_selector: structures
- name: config
  endpoint:
    path: /api/config
    method: GET
    data_selector: structures
- name: loadconfig
  endpoint:
    path: /api/loadconfig
    method: GET
    data_selector: structures
- name: loadconfig
  endpoint:
    path: /api/loadconfig
    method: GET
    data_selector: structures
- name: saveconfig
  endpoint:
    path: /api/saveconfig
    method: POST
    data_selector: result
    params: {}
- name: saveconfig
  endpoint:
    path: /api/saveconfig
    method: POST
    data_selector: result
    params: {}
- name: config_template
  endpoint:
    path: /api/configtemplates
    method: GET
    data_selector: structures
    params:
      LoadFromDisk: true
- name: config_template
  endpoint:
    path: /api/configtemplates
    method: GET
    data_selector: structures
    params:
      LoadFromDisk: 'True'
notes:
- HTTP authentication is not secure. Although the password is encoded using Base64
  it is not encrypted. For secure communication use HTTPS.
- 'Default login credentials are username: nzbget, password: tegbzn6789.'
- 'Default login credentials are username: nzbget, password: tegbzn6789'
- NZBGet needs a configuration file after make install.
- The program looks for configuration file in standard locations.
- When compiled natively NZBGet is usually installed using command “make install”
- To create the snapshot of files required for installation on the target platform
  use parameter “DESTDIR” with command “make install”
- 'NZBGet can use two TLS/SSL libraries: OpenSSL and GnuTLS.'
- when typing the URL in web-browser you must type the trailing slash “/”
- Attempts to upload large nzb-files to NZBGet running behing nginx may silently fail
  due to packet limits set in nginx
- Official NZBGet installation packages have certificate verification enabled by default.
- When certificate verification is enabled, an invalid server certificate produces
  an error message.
- RSS feeds in NZBGet have option Filter describing filter rules.
- Smart duplicates help to avoid the download of duplicates.
- Uses newznab feeds for identifying duplicates
- Extended attributes provided by newznab must be activated with extended=1
- RSS feeds provided by newznab have special fields uniquely identifying movies and
  tv series.
- To activate extended attributes, add parameter extended=1 to feed URL.
- Command line options can be passed to override configuration.
- Requires NZBGet server to be running to execute remote commands.
- Move-commands cannot change the order of the top job, which remains active.
- Uses built-in NNTP server for download speed tests
- Requires at least version 18.0-testing
- Built-in NNTP server was developed in NZBGet v18; you need at least version 18.0-testing.
- Use two computers with fast network connection like 10 Gigabit for best results.
- Functional tests are controlled by scripts that communicate with nzbget using nzbget
  API.
- Tests can be run without extra configuration, storing data in default directories.
- NServ is available in NZBGet starting from v18.
- Tests can be run without extra configuration in which case the test files are stored
  in tests/testdata/nserv.temp and temporary files created by NZBGet during testing
  are stored in tests/testdata/nzbget.temp.
- All settings in the ini-file are optional.
- Option ScriptDir defines the location of extension scripts.
- Authorization isn’t required. Attempts to authorize are accepted and always succeed
  regardless of username and password.
- No uploading is needed. All files stored in data directory (set by parameter -d)
  are accessible for news clients via NNTP using special syntax of message-id.
- Script configuration options are passed using env-vars with prefix NZBPO_.
- NZBGet version is passed in env-var NZBOP_VERSION.
- NZBGet can be controlled via command line using remote commands.
- Script configuration options (script-options) are passed using env-vars with prefix
  NZBPO_.
- If the user has installed the script but have not saved the configuration, the options
  are not saved to configuration file yet.
- Older NZBGet versions (prior v19) ignore command definitions.
- NZBGet scans all files in script-directory looking for script definition signature.
- For performance reasons NZBGet scans only first 10KB of the script.
- NZBGet scans all files in script-directory (option ScriptDir) for script definition
- For performance reasons NZBGet scans only first 10KB of the script
- Post-processing scripts can perform further processing of downloaded files.
- The order of execution of multiple scripts for one nzb-file is controlled by the
  ScriptOrder option.
- PP-Parameters must be declared in the configuration definition of the script.
- Post-processing scripts can perform various tasks after download completion.
- Scripts must return one of the specified exit codes for proper status reporting.
- Scripts can define nzb-file specific options, known as post-processing parameters.
- Files with extensions '.processed', '.queued' and '.error' are skipped during the
  directory scanning.
- Files with extension '.nzb_processed' are not passed to scan-script before adding
  to queue.
- The order of execution for multiple scripts can be defined using the ScriptOrder
  option.
- Queue scripts can change properties of nzb-file by printing special messages into
  standard output.
- Scheduler scripts are called by scheduler tasks (setup by the user).
- Users can activate scheduler scripts in two ways.
- Users can activate scheduler scripts in two ways
- Older nzbget versions do not recognize task definition and treat it as option section
- HTTP authentication is not secure. Use HTTPS for secure communication.
- The option value is returned exactly as it is stored in the configuration file.
- The option value is returned exactly as it is stored in the configuration file.
  For example it may contain variable references (e. g. “${MainDir}/dst”).
errors:
- '[ERROR] Option %s is missing in configuration file. Please check script settings'
- 'POSTPROCESS_ERROR: Check script configuration options.'
- 'COMMAND_ERROR: Invalid command.'
- POSTPROCESS_SUCCESS=93
- POSTPROCESS_NONE=95
- POSTPROCESS_ERROR=94
- '93: Post-process successful (status = SUCCESS)'
- '94: Post-process failed (status = FAILURE)'
- '95: Post-process skipped (status = NONE)'
- 'ERROR: This nzb-file was not processed correctly, terminating the script'
- '93: Post-process successful.'
- '94: Post-process failed.'
- '95: Post-process skipped.'
- Multicalls are supported for XML-RPC and not supported for JSON-RPC.
- Introspection is not supported.
auth_info:
  mentioned_objects: []
client:
  base_url: http://localhost:6789
  auth:
    type: http_basic
    location: url
source_metadata: null
