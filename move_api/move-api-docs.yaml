resources:
- name: files
  endpoint:
    path: /createFile
    method: POST
    data_selector: id
    params: {}
- name: takes
  endpoint:
    path: /createSingleCamTake
    method: POST
    data_selector: id
    params: {}
- name: jobs
  endpoint:
    path: /createSingleCamJob
    method: POST
    data_selector: id
    params: {}
- name: create_file
  endpoint:
    path: /ugc/graphql
    method: POST
    data_selector: data.createFile
    params: {}
- name: create_singlecam_take
  endpoint:
    path: /ugc/graphql
    method: POST
    data_selector: data.createSingleCamTake
    params: {}
- name: create_singlecam_job
  endpoint:
    path: /ugc/graphql
    method: POST
    data_selector: data.createSingleCamJob
    params: {}
- name: get_job
  endpoint:
    path: /ugc/graphql
    method: POST
    data_selector: data.getJob
    params: {}
- name: create_multicam_take
  endpoint:
    path: /ugc/graphql
    method: POST
    data_selector: data.createMultiCamTake
    params: {}
- name: create_multicam_job
  endpoint:
    path: /ugc/graphql
    method: POST
    data_selector: data.createMultiCamJob
    params: {}
- name: job_status
  endpoint:
    path: /graphql
    method: POST
    data_selector: getJob
    params: {}
- name: calibration_files
  endpoint:
    path: /graphql
    method: POST
    data_selector: createFile
    params: {}
- name: calibration_volume
  endpoint:
    path: /graphql
    method: POST
    data_selector: createVolumeWithHuman
    params: {}
- name: action_files
  endpoint:
    path: /graphql
    method: POST
    data_selector: createFile
    params: {}
- name: multiCam_take
  endpoint:
    path: /graphql
    method: POST
    data_selector: createMultiCamTake
    params: {}
- name: multiCam_job
  endpoint:
    path: /graphql
    method: POST
    data_selector: createMultiCamJob
    params: {}
- name: job_status
  endpoint:
    path: /
    method: POST
    data_selector: data.getJob
    params: {}
- name: calibration_files
  endpoint:
    path: /
    method: POST
    data_selector: data.createFile
    params: {}
- name: calibration_volume
  endpoint:
    path: /
    method: POST
    data_selector: data.createVolumeWithHuman
    params: {}
- name: action_files
  endpoint:
    path: /
    method: POST
    data_selector: data.createFile
    params: {}
- name: multi_cam_take
  endpoint:
    path: /
    method: POST
    data_selector: data.createMultiCamTake
    params: {}
- name: multi_cam_job
  endpoint:
    path: /
    method: POST
    data_selector: data.createMultiCamJob
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: m1
  endpoint:
    path: /docs/models/m1
    method: GET
    data_selector: records
    params: {}
- name: m2
  endpoint:
    path: /docs/models/m2
    method: GET
    data_selector: records
    params: {}
- name: s1
  endpoint:
    path: /docs/models/s1
    method: GET
    data_selector: records
    params: {}
- name: s2
  endpoint:
    path: /docs/models/s2
    method: GET
    data_selector: records
    params: {}
- name: m2-xl
  endpoint:
    path: /docs/models/m2-xl
    method: GET
    data_selector: records
    params: {}
- name: m2-light
  endpoint:
    path: /docs/models/m2-light
    method: GET
    data_selector: records
    params: {}
- name: s2-light
  endpoint:
    path: /docs/models/s2-light
    method: GET
    data_selector: records
    params: {}
- name: rt1
  endpoint:
    path: /docs/models/rt1
    method: GET
    data_selector: records
    params: {}
- name: rt2
  endpoint:
    path: /docs/models/rt2
    method: GET
    data_selector: records
    params: {}
- name: m1
  endpoint:
    path: /models/m1
    method: GET
    data_selector: records
- name: m2
  endpoint:
    path: /models/m2
    method: GET
    data_selector: records
- name: s1
  endpoint:
    path: /models/s1
    method: GET
    data_selector: records
- name: s2
  endpoint:
    path: /models/s2
    method: GET
    data_selector: records
- name: m2-xl
  endpoint:
    path: /models/m2-xl
    method: GET
    data_selector: records
- name: m2-light
  endpoint:
    path: /models/m2-light
    method: GET
    data_selector: records
- name: s2-light
  endpoint:
    path: /models/s2-light
    method: GET
    data_selector: records
- name: rt1
  endpoint:
    path: /models/rt1
    method: GET
    data_selector: records
- name: rt2
  endpoint:
    path: /models/rt2
    method: GET
    data_selector: records
- name: createVolumeWithHuman
  endpoint:
    path: /createVolumeWithHuman
    method: POST
    data_selector: createVolumeWithHuman
    params: {}
- name: createMultiCamTake
  endpoint:
    path: /createMultiCamTake
    method: POST
    data_selector: createMultiCamTake
    params: {}
- name: createMultiCamJob
  endpoint:
    path: /createMultiCamJob
    method: POST
    data_selector: createMultiCamJob
    params: {}
- name: create_volume_with_human
  endpoint:
    path: createVolumeWithHuman
    method: POST
    data_selector: createVolumeWithHuman
    params:
      humanHeight: '1.77'
      syncMethod:
        clapWindow:
          startTime: 2.0
          endTime: 4.0
- name: create_multicam_take
  endpoint:
    path: createMultiCamTake
    method: POST
    data_selector: createMultiCamTake
    params:
      volumeId: <CALIBRATION VOLUME ID>
      syncMethod:
        clapWindow:
          startTime: 2.0
          endTime: 4.0
- name: create_multicam_job
  endpoint:
    path: createMultiCamJob
    method: POST
    data_selector: createMultiCamJob
    params:
      takeId: <TAKE ID CREATED FOR MULTICAM ACTION>
      numberOfActors: 1
- name: motion_capture
  endpoint:
    path: /motion_capture
    method: POST
    data_selector: data
    params: {}
- name: job
  endpoint:
    path: /ugc/graphql
    method: POST
    data_selector: data.getJob
    params: {}
- name: take
  endpoint:
    path: /ugc/graphql
    method: POST
    data_selector: data.take
    params: {}
- name: motion_capture
  endpoint:
    path: /api/motion_capture
    method: GET
    data_selector: records
    params: {}
- name: takes
  endpoint:
    path: /ugc/graphql
    method: POST
    data_selector: listTakes
    params: {}
- name: motion_data
  endpoint:
    path: /motion_data.json
    method: GET
    data_selector: mocap_data
    params: {}
- name: job
  endpoint:
    path: /ugc/graphql
    method: POST
    data_selector: data.getJob
    params: {}
- name: take
  endpoint:
    path: /ugc/graphql
    method: POST
    data_selector: data.take
    params: {}
- name: createFile
  endpoint:
    path: /createFile
    method: POST
    data_selector: data.createFile
    params:
      type: required
      metadata: optional
      name: optional
- name: getFile
  endpoint:
    path: /getFile
    method: GET
    data_selector: data.getFile
    params:
      fileId: required
- name: takes
  endpoint:
    path: /ugc/graphql
    method: POST
    data_selector: listTakes
- name: createSingleCamTake
  endpoint:
    path: /createSingleCamTake
    method: POST
    data_selector: take
    params: {}
- name: getTake
  endpoint:
    path: /getTake
    method: POST
    data_selector: getTake
    params: {}
- name: motion_data
  endpoint:
    path: /motion_data.json
    method: GET
    data_selector: mocap_data
- name: create_job
  endpoint:
    path: /createJob
    method: POST
    data_selector: job
    params: {}
- name: retrieve_job
  endpoint:
    path: /getJob
    method: POST
    data_selector: job
    params: {}
- name: list_jobs
  endpoint:
    path: /listJobs
    method: POST
    data_selector: listJobs
    params: {}
- name: listCameraSettings
  endpoint:
    path: /listCameraSettings
    method: POST
    data_selector: data.listCameraSettings.items
    params:
      first: 50
- name: rigs
  endpoint:
    path: /listRigs
    method: POST
    data_selector: data.listRigs.items
    params:
      first: 50
- name: createFile
  endpoint:
    path: /createFile
    method: POST
    data_selector: data.createFile
    params: {}
- name: getFile
  endpoint:
    path: /getFile
    method: GET
    data_selector: data.getFile
    params:
      fileId: file-2be2463e-ffa3-419b-beb4-ea0f99c79592
- name: webhook
  endpoint:
    path: /upsertWebhookEndpoint
    method: POST
    data_selector: webhook
    params: {}
- name: createSingleCamTake
  endpoint:
    path: /createSingleCamTake
    method: POST
    data_selector: data.take.id
- name: getTake
  endpoint:
    path: /getTake
    method: POST
    data_selector: data.getTake
    params:
      takeId: take-2be2463e-ffa3-419b-beb4-ea0f99c79512
- name: client
  endpoint:
    path: /client
    method: GET
    data_selector: client
- name: file
  endpoint:
    path: /file
    method: GET
    data_selector: file
- name: job
  endpoint:
    path: /job
    method: GET
    data_selector: job
- name: take
  endpoint:
    path: /take
    method: GET
    data_selector: take
- name: volume
  endpoint:
    path: /volume
    method: GET
    data_selector: volume
- name: createJob
  endpoint:
    path: /createJob
    method: POST
    data_selector: job
    params: {}
- name: retrieveJob
  endpoint:
    path: /getJob
    method: POST
    data_selector: job
    params: {}
- name: listJobs
  endpoint:
    path: /listJobs
    method: POST
    data_selector: listJobs
    params: {}
- name: listCameraSettings
  endpoint:
    path: /listCameraSettings
    method: POST
    data_selector: data.listCameraSettings.items
    params:
      first: 50
- name: TakesPage
  endpoint:
    path: /takes
    method: GET
    data_selector: items
    params:
      first: '50'
- name: VolumePage
  endpoint:
    path: /volumes
    method: GET
    data_selector: items
    params:
      first: '50'
- name: RigsPage
  endpoint:
    path: /rigs
    method: GET
    data_selector: items
    params:
      first: '50'
- name: WebhookEndpoint
  endpoint:
    path: /webhook
    method: POST
    data_selector: metadata
    params: {}
- name: rigs
  endpoint:
    path: /listRigs
    method: POST
    data_selector: data.listRigs.items
- name: create_volume
  endpoint:
    path: /volumes
    method: POST
    data_selector: createVolumeWithHuman
    params: {}
- name: webhook
  endpoint:
    path: /upsertWebhookEndpoint
    method: POST
    data_selector: webhook
    params: {}
- name: client
  endpoint:
    path: /client
    method: GET
    data_selector: client
    params: {}
- name: getFile
  endpoint:
    path: /getFile
    method: GET
    data_selector: file
    params: {}
- name: getJob
  endpoint:
    path: /getJob
    method: GET
    data_selector: job
    params: {}
- name: getTake
  endpoint:
    path: /getTake
    method: GET
    data_selector: take
    params: {}
- name: getVolume
  endpoint:
    path: /getVolume
    method: GET
    data_selector: volume
    params: {}
- name: listJobs
  endpoint:
    path: /listJobs
    method: GET
    data_selector: jobs
    params: {}
- name: listRigs
  endpoint:
    path: /listRigs
    method: GET
    data_selector: rigs
    params: {}
- name: listTakes
  endpoint:
    path: /listTakes
    method: GET
    data_selector: takes
    params: {}
- name: listVolumes
  endpoint:
    path: /listVolumes
    method: GET
    data_selector: volumes
    params: {}
- name: takes
  endpoint:
    path: /takes
    method: GET
    data_selector: items
    params:
      first: 50
- name: volumes
  endpoint:
    path: /volumes
    method: GET
    data_selector: items
    params:
      first: 50
notes:
- All API requests require authentication using your API key in the Authorization
  header.
- Requires an API key for authentication
- Supports video processing in multiple formats
- Uses API key for authentication
- 'Supports video formats: MP4'
- Requires presigned URLs for file uploads.
- Job states need to be polled until FINISHED.
- Requires setup of API key for authentication
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- The output files will return a 'not found' error message if the job is not completed.
- Only certain camera lenses are supported at the moment.
- Ensure that the volume has finished processing before creating a take object.
- 'Minimum resolution: 300px (longest edge)'
- 'Maximum resolution: 4096px (longest edge)'
- 'Minimum frame rate: 24 fps'
- 'Maximum frame rate: 120 fps'
- 'Minimum video duration: 2 seconds'
- 'Maximum video duration: 60 seconds'
- 'Maximum file size: 500MB per video'
- 'Supported formats: MP4, MOV'
- 'Codec requirements: H.264, H.265'
- 'Supported models for single camera: s1 and s2'
- 'Supported models for multi-camera: m1 and m2'
- 'Camera range: 2-4 cameras per job'
- 'Supported models for single camera: s1 and s2 only'
- 'Supported models for multi-camera: m1 and m2 only'
- 'Camera range for multi-camera: 2-4 cameras per job'
- Enterprise access required
- Enterprise customers only
- 'Single-person tracking: Track one person at a time'
- 'High quality: Optimized for quality over speed'
- 'Auto calibration: No manual calibration required'
- 'Dex hand tracking: Advanced hand and finger dynamics'
- 'Easy setup: Under 1 minute setup time'
- 'Small to medium areas: Designed for accessible motion capture'
- Enterprise-only real-time motion capture model optimized for streaming applications
  with multiple people tracking and Dex hand tracking.
- API is provided under a Beta version which may contain material errors or bugs.
- Recommend using events from webhooks than polling for the status of the job
- Always check job status before proceeding
- Implement error handling for failed jobs
- Use reasonable intervals when polling for completion, use webhooks wherever possible
- Jobs are the processing entity in Move.
- To list jobs, use the listJobs query.
- The presignedUrl is fetched from the response while creating a file
errors:
- 'MV_010_010_0001: Failed to create a volume.'
- '400 Bad Request: Check your input parameters'
- '401 Unauthorized: Check your API key or token'
- '404 Not Found: Resource not found'
- '401 Unauthorized: Invalid API key'
- '429 Too Many Requests: Rate limit exceeded'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API key'
- '401 Unauthorized: You are not authorized to make this call.'
- '401 Unauthorized: Recheck API key or token expiration'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.move.ai/ugc/graphql
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
