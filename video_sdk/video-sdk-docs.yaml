resources:
- name: start_recording
  endpoint:
    path: /v2/recordings/start
    method: POST
    data_selector: Recording started successfully
- name: Free Account Limits
  endpoint:
    path: /free-account-limits
    method: GET
    data_selector: limits
    params: {}
- name: Paid Account Limits
  endpoint:
    path: /paid-account-limits
    method: GET
    data_selector: limits
    params: {}
- name: Monthly Invoices
  endpoint:
    path: /monthly-invoices
    method: GET
    data_selector: invoices
    params: {}
- name: create_room
  endpoint:
    path: /api-reference/realtime-communication/create-room
    method: POST
    data_selector: room
    params: {}
- name: create_room
  endpoint:
    path: /api-reference/realtime-communication/create-room
    method: POST
- name: inbound_gateway
  endpoint:
    path: /v2/sip/inbound-gateways
    method: POST
    data_selector: data
    params: {}
- name: outbound_gateway
  endpoint:
    path: /v2/sip/outbound-gateways
    method: POST
    data_selector: data
    params: {}
- name: routing_rule
  endpoint:
    path: /v2/sip/routing-rules
    method: POST
    data_selector: data
    params: {}
- name: sip_call
  endpoint:
    path: /v2/sip/call
    method: POST
    data_selector: null
    params: {}
- name: backend_connection
  endpoint:
    path: agent_init_config
    method: GET
    data_selector: registry_url
- name: AgentCard
  endpoint:
    path: /agent/card
    method: GET
    data_selector: attributes
- name: AgentSession
  endpoint:
    path: /agent/session
    method: POST
    data_selector: session_data
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: _items
- name: function_output
  endpoint:
    path: /add_function_output
    method: POST
    data_selector: FunctionCallOutput
    params: {}
- name: message
  endpoint:
    path: /add_message
    method: POST
    data_selector: ChatMessage
    params: {}
- name: cleanup
  endpoint:
    path: /cleanup
    method: POST
    data_selector: None
    params: {}
- name: copy
  endpoint:
    path: /copy
    method: POST
    data_selector: ChatContext
    params: {}
- name: get_by_id
  endpoint:
    path: /get_by_id
    method: GET
    data_selector: ChatItem
    params: {}
- name: truncate
  endpoint:
    path: /truncate
    method: POST
    data_selector: ChatContext
    params: {}
- name: AgentCard
  endpoint:
    path: /agent_card
    method: GET
    data_selector: agent_card
    params: {}
- name: AgentSession
  endpoint:
    path: /agent_session
    method: GET
    data_selector: agent_session
    params: {}
- name: agent_state
  endpoint:
    path: /agent/state
    method: GET
    data_selector: states
- name: component
  endpoint:
    path: /component
    method: GET
    data_selector: components
    params: {}
- name: EOU
  endpoint:
    path: /eou/detection
    method: POST
    data_selector: results
    params: {}
- name: AgentCard
  endpoint:
    path: /agent_card
    method: GET
- name: AgentSession
  endpoint:
    path: /agent_session
    method: GET
- name: component_configs
  endpoint:
    path: /component_configs
    method: GET
    data_selector: configs
- name: AgentCard
  endpoint:
    path: /agent/card
    method: GET
    data_selector: records
- name: AgentSession
  endpoint:
    path: /agent/session
    method: GET
    data_selector: records
- name: agent_state
  endpoint:
    path: /agent/state
    method: GET
    data_selector: states
- name: background_audio
  endpoint:
    path: /background/audio
    method: GET
    data_selector: audio_config
- name: chat_context
  endpoint:
    path: /chat/context
    method: GET
    data_selector: items
- name: FunctionCallOutput
  endpoint:
    path: /add_function_output
    method: POST
    data_selector: FunctionCallOutput
    params: {}
- name: ChatMessage
  endpoint:
    path: /add_message
    method: POST
    data_selector: ChatMessage
    params: {}
- name: transcription_event
  endpoint:
    path: /transcription_event
    method: POST
    data_selector: text
    params: {}
- name: AgentCard
  endpoint:
    path: /agent/card
    method: POST
    data_selector: id
- name: AgentSession
  endpoint:
    path: /agent/session
    method: POST
    data_selector: session_id
- name: agent_state
  endpoint:
    path: /agent/state
    method: GET
    data_selector: state
- name: conversation
  endpoint:
    path: /conversation
    method: POST
    data_selector: items
- name: AgentCard
  endpoint:
    path: /agent_card
    method: GET
    data_selector: records
- name: AgentSession
  endpoint:
    path: /agent_session
    method: GET
    data_selector: records
- name: FunctionCallOutput
  endpoint:
    method: POST
- name: ChatMessage
  endpoint:
    method: POST
- name: chat_context
  endpoint:
    path: /chat/context
    method: GET
    data_selector: items
- name: ImageContent
  endpoint:
    path: /api/v1/imagecontent
    method: POST
    data_selector: image
    params: {}
- name: FunctionCall
  endpoint:
    path: /api/v1/functioncall
    method: POST
    data_selector: function_call
    params: {}
- name: agent_card
  endpoint:
    path: /agent_card
    method: GET
    data_selector: records
- name: agent_session
  endpoint:
    path: /agent_session
    method: POST
    data_selector: records
- name: MCPServerStdio
  endpoint:
    path: /services/data/vXX.X/sobjects/MCPServerStdio
    method: POST
    data_selector: records
- name: MCPServerHTTP
  endpoint:
    path: /services/data/vXX.X/sobjects/MCPServerHTTP
    method: GET
    data_selector: records
- name: chat_item
  endpoint:
    path: /chat/item
    method: GET
    data_selector: items
- name: agent_card
  endpoint:
    path: /agent/card
    method: GET
    data_selector: agent_card
- name: agent_session
  endpoint:
    path: /agent/session
    method: POST
    data_selector: session_data
- name: cascading_pipeline
  endpoint:
    path: /cascading/pipeline
    method: POST
    data_selector: pipeline_data
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: items
- name: agent_card
  endpoint:
    path: /agent/card
    method: GET
    data_selector: records
- name: agent_session
  endpoint:
    path: /agent/session
    method: POST
    data_selector: records
- name: AgentState
  endpoint:
    path: /AgentState
    method: GET
    data_selector: states
- name: chat_items
  endpoint:
    path: /chat/items
    method: GET
    data_selector: items
- name: room
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: roomId
- name: ProcessResource
  endpoint:
    path: /process
    method: POST
    data_selector: result
    params: {}
- name: task_execution
  endpoint:
    path: /tasks
    method: POST
    data_selector: tasks
    params: {}
- name: AgentCard
  endpoint:
    path: /agent/card
    method: GET
    data_selector: records
- name: AgentSession
  endpoint:
    path: /agent/session
    method: POST
    data_selector: records
- name: chat_items
  endpoint:
    path: /chat/items
    method: GET
    data_selector: items
- name: AgentCard
  endpoint:
    path: /agent/card
    method: GET
    data_selector: records
- name: transcription_event
  endpoint:
    path: /transcription/event
    method: POST
    data_selector: transcription_data
- name: component_configs
  endpoint:
    path: /get_component_configs
    method: GET
    data_selector: configs
    params: {}
- name: AgentCard
  endpoint:
    path: /agent_card
    method: GET
    data_selector: agent_card
    params: {}
- name: AgentSession
  endpoint:
    path: /agent_session
    method: GET
    data_selector: agent_session
    params: {}
- name: chat_item
  endpoint:
    path: /chat/items
    method: GET
    data_selector: items
- name: function_output
  endpoint:
    path: /add_function_output
    method: POST
    data_selector: FunctionCallOutput
- name: message
  endpoint:
    path: /add_message
    method: POST
    data_selector: ChatMessage
- name: cleanup
  endpoint:
    path: /cleanup
    method: POST
    data_selector: None
- name: copy
  endpoint:
    path: /copy
    method: POST
    data_selector: ChatContext
- name: get_by_id
  endpoint:
    path: /get_by_id
    method: GET
    data_selector: ChatItem
- name: to_dict
  endpoint:
    path: /to_dict
    method: GET
    data_selector: dict
- name: truncate
  endpoint:
    path: /truncate
    method: POST
    data_selector: ChatContext
- name: function_call_output
  endpoint:
    path: /add_function_output
    method: POST
    data_selector: FunctionCallOutput
    params: {}
- name: chat_message
  endpoint:
    path: /add_message
    method: POST
    data_selector: ChatMessage
    params: {}
- name: inference
  endpoint:
    path: /inference
    method: POST
    data_selector: result
    params: {}
- name: rooms
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: roomId
- name: room
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: roomId
- name: process_resource
  endpoint:
    path: /api/process
    method: POST
    data_selector: data
    params:
      timeout: 30
- name: realtime_model_transcription
  endpoint:
    path: /realtime/model/transcription
    method: POST
    data_selector: data
    params: {}
- name: AgentCard
  endpoint:
    path: /agent/card
    method: GET
    data_selector: capabilities
- name: AgentSession
  endpoint:
    path: /agent/session
    method: POST
    data_selector: session_data
- name: agent_card
  endpoint:
    path: /agent/card
    method: GET
    data_selector: records
- name: agent_session
  endpoint:
    path: /agent/session
    method: POST
    data_selector: session_data
- name: agent_state
  endpoint:
    path: /agent_state
    method: GET
    data_selector: state
    params: {}
- name: ChatMessage
  endpoint:
    path: /chat/message
    method: POST
- name: FunctionCall
  endpoint:
    path: /chat/function/call
    method: POST
- name: FunctionCallOutput
  endpoint:
    path: /chat/function/output
    method: POST
- name: chat_item
  endpoint:
    path: /chat_item
    method: GET
    data_selector: items
- name: ChatMessage
  endpoint:
    method: GET
- name: FunctionCallOutput
  endpoint:
    method: GET
- name: function_call_output
  endpoint:
    path: /add_function_output
    method: POST
- name: chat_message
  endpoint:
    path: /add_message
    method: POST
- name: cleanup
  endpoint:
    path: /cleanup
    method: POST
- name: copy_context
  endpoint:
    path: /copy
    method: POST
- name: get_item_by_id
  endpoint:
    path: /get_by_id
    method: GET
- name: to_dict
  endpoint:
    path: /to_dict
    method: GET
- name: truncate_context
  endpoint:
    path: /truncate
    method: POST
- name: room
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: roomId
- name: DedicatedInferenceResource
  endpoint:
    path: /inference
    method: POST
- name: rooms
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: roomId
- name: agent_card
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: agent_session
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: _items
- name: process_data
  endpoint:
    path: /api/v1/process
    method: POST
    data_selector: data
    params:
      incremental: updated_at
- name: function_output
  endpoint:
    path: /function_output
    method: POST
    data_selector: FunctionCallOutput
- name: chat_message
  endpoint:
    path: /chat_message
    method: POST
    data_selector: ChatMessage
- name: AgentCard
  endpoint:
    path: /agent/card
    method: GET
    data_selector: records
- name: AgentSession
  endpoint:
    path: /agent/session
    method: POST
    data_selector: records
- name: agent_state
  endpoint:
    path: /agent/state
    method: GET
    data_selector: state
- name: rooms
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: roomId
- name: ChatContext
  endpoint:
    path: /ChatContext
    method: GET
    data_selector: items
- name: transcription_event
  endpoint:
    path: /transcription
    method: POST
    data_selector: text
    params: {}
- name: ProcessResource
  endpoint:
    path: /process/resource
    method: POST
    data_selector: results
    params: {}
- name: pipeline
  endpoint:
    path: /realtime/pipeline
    method: POST
    data_selector: data
    params: {}
- name: inference
  endpoint:
    path: /inference
    method: POST
    data_selector: result
    params: {}
- name: FunctionCall
  endpoint:
    path: /function/call
    method: POST
- name: FunctionCallOutput
  endpoint:
    path: /function/call/output
    method: GET
- name: HealthMetrics
  endpoint:
    path: /health/metrics
    method: GET
- name: ImageContent
  endpoint:
    path: /image/content
    method: POST
- name: agent_session
  endpoint:
    path: /agent/session
    method: POST
    data_selector: session_data
- name: agent_say
  endpoint:
    path: /agent/say
    method: POST
    data_selector: response_data
- name: agent_reply
  endpoint:
    path: /agent/reply
    method: POST
    data_selector: reply_data
- name: agent_interrupt
  endpoint:
    path: /agent/interrupt
    method: POST
    data_selector: interrupt_data
- name: agent_close
  endpoint:
    path: /agent/close
    method: POST
    data_selector: close_data
- name: agent_leave
  endpoint:
    path: /agent/leave
    method: POST
    data_selector: leave_data
- name: agent_state
  endpoint:
    path: /agent/state
    method: GET
    data_selector: records
    params: {}
- name: component_configs
  endpoint:
    path: /component/configs
    method: GET
    data_selector: configs
- name: ProcessResource
  endpoint:
    path: /process/resource
    method: POST
    data_selector: data
- name: realtime_model_transcription
  endpoint:
    path: /realtime/model/transcription
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: stt
  endpoint:
    path: /stt
    method: POST
- name: llm
  endpoint:
    path: /llm
    method: POST
- name: tts
  endpoint:
    path: /tts
    method: POST
- name: vad
  endpoint:
    path: /vad
    method: POST
- name: turn_detector
  endpoint:
    path: /turn_detector
    method: POST
- name: stt
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: llm
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: tts
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: vad
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: eou
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: function_call
  endpoint:
    path: /function_call
    method: POST
    data_selector: function_call
    params: {}
- name: function_call_output
  endpoint:
    path: /function_call_output
    method: GET
    data_selector: function_call_output
    params: {}
- name: room
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: roomId
- name: function_call_output
  endpoint:
    path: /add_function_output
    method: POST
    data_selector: FunctionCallOutput
    params: {}
- name: chat_message
  endpoint:
    path: /add_message
    method: POST
    data_selector: ChatMessage
    params: {}
- name: cleanup_context
  endpoint:
    path: /cleanup
    method: DELETE
    data_selector: None
    params: {}
- name: get_item_by_id
  endpoint:
    path: /get_by_id/{item_id}
    method: GET
    data_selector: ChatItem
    params: {}
- name: truncate_context
  endpoint:
    path: /truncate
    method: POST
    data_selector: ChatContext
    params: {}
- name: transcription_event
  endpoint:
    path: /transcription_event
    method: POST
    data_selector: text
    params: {}
- name: speech_started
  endpoint:
    path: /speech_started
    method: POST
    data_selector: event
    params: {}
- name: speech_stopped
  endpoint:
    path: /speech_stopped
    method: POST
    data_selector: event
    params: {}
- name: realtime_pipeline
  endpoint:
    path: /realtime/pipeline
    method: POST
    data_selector: results
    params: {}
- name: DedicatedInferenceResource
  endpoint:
    path: /inference
    method: POST
    data_selector: result
    params: {}
- name: EOU
  endpoint:
    path: /eou
    method: GET
    data_selector: probability
    params: {}
- name: image_content
  endpoint:
    path: /api/v1/image
    method: POST
    data_selector: data
    params: {}
- name: rooms
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: roomId
- name: AgentCard
  endpoint:
    path: /agent/card
    method: GET
- name: AgentSession
  endpoint:
    path: /agent/session
    method: POST
- name: process_resource
  endpoint:
    path: /process/resource
    method: POST
    data_selector: data
    params:
      initialize_timeout: '10.0'
      close_timeout: '60.0'
- name: RealtimeBaseModel
  endpoint:
    path: /realtime/model
    method: GET
    data_selector: model
- name: function_output
  endpoint:
    path: /add_function_output
    method: POST
    data_selector: FunctionCallOutput
    params: {}
- name: message
  endpoint:
    path: /add_message
    method: POST
    data_selector: ChatMessage
    params: {}
- name: cleanup
  endpoint:
    path: /cleanup
    method: DELETE
    data_selector: None
    params: {}
- name: AgentCard
  endpoint:
    path: /agents/card
    method: GET
    data_selector: records
- name: AgentSession
  endpoint:
    path: /agents/session
    method: POST
    data_selector: records
- name: agent_state
  endpoint:
    path: /agent/state
    method: GET
    data_selector: state
    params: {}
- name: chat
  endpoint:
    path: /chat/context
    method: GET
    data_selector: items
    params: {}
- name: image_content
  endpoint:
    path: /api/v1/image_content
    method: GET
    data_selector: records
- name: health_metrics
  endpoint:
    path: /api/v1/health_metrics
    method: GET
    data_selector: records
- name: function_call_output
  endpoint:
    path: /function_call_output
    method: POST
- name: chat_message
  endpoint:
    path: /chat_message
    method: POST
- name: transcription_event
  endpoint:
    path: /transcription
    method: POST
    data_selector: text
- name: rooms
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: roomId
- name: ProcessResource
  endpoint:
    path: /process/resource
    method: POST
- name: inference
  endpoint:
    path: /inference
    method: POST
    data_selector: result
    params: {}
- name: image_content
  endpoint:
    path: /api/v1/image_content
    method: POST
    data_selector: data
- name: TaskResult
  endpoint:
    path: /TaskResult
    method: GET
    data_selector: TaskResult
    params: {}
- name: TaskStatus
  endpoint:
    path: /TaskStatus
    method: GET
    data_selector: TaskStatus
    params: {}
- name: TaskType
  endpoint:
    path: /TaskType
    method: GET
    data_selector: TaskType
    params: {}
- name: UserState
  endpoint:
    path: /UserState
    method: GET
    data_selector: UserState
    params: {}
- name: process_resource
  endpoint:
    path: /api/process
    method: POST
    data_selector: data
    params: {}
- name: worker_stats
  endpoint:
    path: /worker/stats
    method: GET
    data_selector: stats
- name: agent_state
  endpoint:
    path: /agent/state
    method: GET
    data_selector: states
- name: AgentCard
  endpoint:
    path: /agent_card
    method: GET
    data_selector: records
- name: AgentSession
  endpoint:
    path: /agent_session
    method: GET
    data_selector: records
- name: cleanup
  endpoint:
    path: /cleanup
    method: POST
    data_selector: cleanup
    params: {}
- name: get_component_configs
  endpoint:
    path: /get_component_configs
    method: GET
    data_selector: configs
    params: {}
- name: interrupt
  endpoint:
    path: /interrupt
    method: POST
    data_selector: interrupt
    params: {}
- name: leave
  endpoint:
    path: /leave
    method: POST
    data_selector: leave
    params: {}
- name: reply_with_context
  endpoint:
    path: /reply_with_context
    method: POST
    data_selector: reply
    params: {}
- name: send_text_message
  endpoint:
    path: /send_text_message
    method: POST
    data_selector: send_message
    params: {}
- name: transcription_event
  endpoint:
    path: /transcription_event
    method: POST
    data_selector: text
    params: {}
- name: stt
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: llm
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: tts
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: vad
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: eou
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: inference
  endpoint:
    path: /inference
    method: POST
    data_selector: result
    params:
      timeout: '30.0'
- name: ImageContent
  endpoint:
    path: /image/content
    method: POST
    data_selector: image
    params: {}
- name: inference
  endpoint:
    path: /inference
    method: POST
    data_selector: result
    params:
      timeout: '30.0'
- name: ProcessResource
  endpoint:
    path: /process/resource
    method: POST
    data_selector: data
    params:
      timeout: 10.0
- name: FunctionCall
  endpoint:
    path: /function/call
    method: POST
    data_selector: function_call
- name: FunctionCallOutput
  endpoint:
    path: /function/call/output
    method: GET
    data_selector: function_call_output
- name: task_execution
  endpoint:
    path: /task/execution
    method: POST
    data_selector: result
    params: {}
- name: room
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: roomId
- name: real_time_pipeline
  endpoint:
    path: /realtime/pipeline
    method: POST
    data_selector: results
    params: {}
- name: STTResponse
  endpoint:
    path: /stt/response
    method: POST
    data_selector: response
    params: {}
- name: SpeechData
  endpoint:
    path: /stt/data
    method: POST
    data_selector: data
    params: {}
- name: AgentCard
  endpoint:
    path: /agent/card
    method: GET
    data_selector: records
- name: AgentSession
  endpoint:
    path: /agent/session
    method: POST
    data_selector: session_data
- name: agent_card
  endpoint:
    path: /agent/card
    method: GET
    data_selector: agent
    params: {}
- name: agent_session
  endpoint:
    path: /agent/session
    method: POST
    data_selector: session
    params: {}
- name: function_call_output
  endpoint:
    path: /add_function_output
    method: POST
    data_selector: FunctionCallOutput
- name: chat_message
  endpoint:
    path: /add_message
    method: POST
    data_selector: ChatMessage
- name: cleanup_context
  endpoint:
    path: /cleanup
    method: POST
    data_selector: None
- name: copy_context
  endpoint:
    path: /copy
    method: POST
    data_selector: ChatContext
- name: get_item_by_id
  endpoint:
    path: /get_by_id
    method: GET
    data_selector: ChatItem
- name: to_dict_representation
  endpoint:
    path: /to_dict
    method: GET
    data_selector: dict
- name: truncate_context
  endpoint:
    path: /truncate
    method: POST
    data_selector: ChatContext
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: items
- name: inference
  endpoint:
    path: /inference
    method: POST
    data_selector: result
    params: {}
- name: inference
  endpoint:
    path: /inference
    method: POST
    data_selector: result
    params: {}
- name: room
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: roomId
- name: ProcessResource
  endpoint:
    path: /services/data/vXX.X/sobjects/ProcessResource
    method: GET
    data_selector: records
    params: {}
- name: process_resource
  endpoint:
    path: /process/resource
    method: GET
    data_selector: resources
- name: realtime_model_transcription
  endpoint:
    path: /realtime/model/transcription
    method: POST
    data_selector: data
    params: {}
- name: realtime_model_transcription
  endpoint:
    path: /realtime/model/transcription
    method: POST
    data_selector: data
    params: {}
- name: ResourceInfo
  endpoint:
    path: /resource/info
    method: GET
    data_selector: resource_info
    params: {}
- name: ResourceManager
  endpoint:
    path: /resource/manager
    method: POST
    data_selector: resource_manager
    params: {}
- name: STTResponse
  endpoint:
    path: /stt/response
    method: GET
    data_selector: data
    params: {}
- name: SpeechData
  endpoint:
    path: /speech/data
    method: GET
    data_selector: data
    params: {}
- name: TaskResult
  endpoint:
    path: /tasks/results
    method: GET
    data_selector: results
    params: {}
- name: TaskStatus
  endpoint:
    path: /tasks/status
    method: GET
    data_selector: statuses
    params: {}
- name: job
  endpoint:
    path: /jobs
    method: POST
    data_selector: job_data
- name: AgentCard
  endpoint:
    path: /agent_card
    method: GET
    data_selector: records
- name: AgentSession
  endpoint:
    path: /agent_session
    method: POST
    data_selector: records
- name: components
  endpoint:
    path: /api/v1/components
    method: GET
    data_selector: components
- name: AgentCard
  endpoint:
    path: /agent/card
    method: GET
    data_selector: records
    params: {}
- name: AgentSession
  endpoint:
    path: /agent/session
    method: POST
    data_selector: records
    params: {}
- name: AgentState
  endpoint:
    path: /agent/state
    method: GET
    data_selector: states
- name: stt
  endpoint:
    path: /stt
    method: GET
- name: llm
  endpoint:
    path: /llm
    method: GET
- name: tts
  endpoint:
    path: /tts
    method: GET
- name: vad
  endpoint:
    path: /vad
    method: GET
- name: eou
  endpoint:
    path: /eou
    method: GET
- name: function_output
  endpoint:
    path: /function/output
    method: POST
    data_selector: FunctionCallOutput
    params: {}
- name: message
  endpoint:
    path: /message/add
    method: POST
    data_selector: ChatMessage
    params: {}
- name: cleanup
  endpoint:
    path: /context/cleanup
    method: POST
    data_selector: None
    params: {}
- name: copy_context
  endpoint:
    path: /context/copy
    method: POST
    data_selector: ChatContext
    params: {}
- name: get_by_id
  endpoint:
    path: /item/get
    method: GET
    data_selector: ChatItem
    params: {}
- name: to_dict
  endpoint:
    path: /context/to_dict
    method: GET
    data_selector: dict
    params: {}
- name: truncate_context
  endpoint:
    path: /context/truncate
    method: POST
    data_selector: ChatContext
    params: {}
- name: function_call_output
  endpoint:
    path: /function/output
    method: POST
    data_selector: output
- name: chat_message
  endpoint:
    path: /chat/message
    method: POST
    data_selector: message
- name: inference
  endpoint:
    path: /inference
    method: POST
    data_selector: result
- name: transcription
  endpoint:
    path: /transcription_event
    method: POST
- name: speech_started
  endpoint:
    path: /speech_started
    method: POST
- name: speech_stopped
  endpoint:
    path: /speech_stopped
    method: POST
- name: function_call
  endpoint:
    path: /function_call
    method: POST
    data_selector: output
    params: {}
- name: function_call_output
  endpoint:
    path: /function_call_output
    method: GET
    data_selector: output
    params: {}
- name: DedicatedInferenceResource
  endpoint:
    path: /services/data/v1/inference
    method: POST
    data_selector: results
    params: {}
- name: ProcessResource
  endpoint:
    path: /process/resource
    method: POST
    data_selector: data
    params: {}
- name: function_call
  endpoint:
    path: /function/call
    method: POST
    data_selector: function_call
    params: {}
- name: function_call_output
  endpoint:
    path: /function/output
    method: GET
    data_selector: function_call_output
    params: {}
- name: STTResponse
  endpoint:
    path: /stt/response
    method: POST
    data_selector: response
    params: {}
- name: SpeechData
  endpoint:
    path: /stt/data
    method: POST
    data_selector: data
    params: {}
- name: ProcessResource
  endpoint:
    path: /process/resource
    method: POST
    data_selector: data
    params: {}
- name: worker_stats
  endpoint:
    path: /worker/stats
    method: GET
    data_selector: stats
- name: speech_transcription
  endpoint:
    path: /api/v1/speech/transcription
    method: POST
    data_selector: transcription
    params: {}
- name: AgentCard
  endpoint:
    path: /agents/card
    method: GET
    data_selector: agent_card
- name: AgentSession
  endpoint:
    path: /agents/session
    method: POST
    data_selector: agent_session
- name: conversation_items
  endpoint:
    path: /chat/context
    method: GET
    data_selector: items
- name: agent_card
  endpoint:
    path: /agent/card
    method: GET
- name: agent_session
  endpoint:
    path: /agent/session
    method: POST
- name: function_call_output
  endpoint:
    path: /add_function_output
    method: POST
    data_selector: FunctionCallOutput
    params: {}
- name: chat_message
  endpoint:
    path: /add_message
    method: POST
    data_selector: ChatMessage
    params: {}
- name: cleanup_context
  endpoint:
    path: /cleanup
    method: POST
    data_selector: None
    params: {}
- name: copy_context
  endpoint:
    path: /copy
    method: POST
    data_selector: ChatContext
    params: {}
- name: get_by_id
  endpoint:
    path: /get_by_id
    method: GET
    data_selector: ChatItem
    params: {}
- name: truncate_context
  endpoint:
    path: /truncate
    method: POST
    data_selector: ChatContext
    params: {}
- name: inference
  endpoint:
    path: /inference
    method: POST
    data_selector: result
    params: {}
- name: ChatMessage
  endpoint:
    path: unknown
    method: unknown
    data_selector: unknown
    params: {}
- name: FunctionCallOutput
  endpoint:
    path: unknown
    method: unknown
    data_selector: unknown
    params: {}
- name: image_content
  endpoint:
    path: /api/image/content
    method: POST
    data_selector: content
    params: {}
- name: process_resource
  endpoint:
    path: /process
    method: POST
    data_selector: data
    params:
      resource_id: resource_id_value
- name: real_time_pipeline
  endpoint:
    path: /real-time/pipeline
    method: POST
    data_selector: data
    params: {}
- name: ResourceInfo
  endpoint:
    path: /ResourceInfo
    method: GET
- name: ResourceManager
  endpoint:
    path: /ResourceManager
    method: GET
- name: STTResponse
  endpoint:
    path: /process_audio
    method: POST
    data_selector: response
    params: {}
- name: SpeechData
  endpoint:
    path: /synthesize
    method: POST
    data_selector: response
    params: {}
- name: stt_response
  endpoint:
    path: /process_audio
    method: POST
    data_selector: STTResponse
- name: speech_data
  endpoint:
    path: /speech_data
    method: GET
    data_selector: data
- name: task_result
  endpoint:
    path: /task/result
    method: GET
    data_selector: result
    params: {}
- name: task_status
  endpoint:
    path: /task/status
    method: GET
    data_selector: status
    params: {}
- name: TaskResult
  endpoint:
    path: /task/result
    method: GET
    data_selector: result
    params: {}
- name: TaskStatus
  endpoint:
    path: /task/status
    method: GET
    data_selector: status
    params: {}
- name: WorkerJob
  endpoint:
    path: /worker/job
    method: POST
    data_selector: job_details
- name: AgentCard
  endpoint:
    path: /agent/card
    method: POST
    data_selector: card
    params: {}
- name: AgentSession
  endpoint:
    path: /agent/session
    method: POST
    data_selector: session
    params: {}
- name: chat_items
  endpoint:
    path: /chat/context/items
    method: GET
    data_selector: _items
- name: Agent
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: image_content
  endpoint:
    path: /api/image_content
    method: POST
    data_selector: content
    params: {}
- name: function_call
  endpoint:
    path: /api/function_call
    method: POST
    data_selector: function_call_output
    params: {}
- name: Voice Activity Detection
  endpoint:
    path: /ai_agents/core-components/turn-detection-and-vad
    method: GET
    data_selector: speech_activity
    params: {}
- name: Namo Turn Detection
  endpoint:
    path: /ai_agents/plugins/namo-turn-detector
    method: GET
    data_selector: turn_detection
    params: {}
- name: de-noise
  endpoint:
    path: /ai_agents/core-components/de-noise
    method: GET
    data_selector: records
    params: {}
- name: process
  endpoint:
    path: /api/process
    method: POST
    data_selector: data
    params: {}
- name: TaskResult
  endpoint:
    path: /tasks/results
    method: GET
    data_selector: results
- name: TaskStatus
  endpoint:
    path: /tasks/status
    method: GET
    data_selector: statuses
- name: TaskType
  endpoint:
    path: /tasks/types
    method: GET
    data_selector: types
- name: pubsub
  endpoint:
    path: /pubsub
    method: POST
    data_selector: messages
    params: {}
- name: RealTimePipeline
  endpoint:
    path: /realtime/pipeline
    method: POST
    data_selector: video_frames
    params:
      vision: true
- name: CascadingPipeline
  endpoint:
    path: /cascading/pipeline
    method: POST
    data_selector: images
    params: {}
- name: job
  endpoint:
    path: /jobs
    method: POST
    data_selector: result
    params: {}
- name: inference
  endpoint:
    path: /inference
    method: POST
    data_selector: result
    params: {}
- name: avatar
  endpoint:
    path: /api/avatar
    method: POST
    data_selector: avatar_response
- name: start_recording
  endpoint:
    path: /api/v1/start_recording
    method: POST
- name: stop_recording
  endpoint:
    path: /api/v1/stop_recording
    method: POST
- name: fetch_recordings
  endpoint:
    path: /api/v1/fetch_recordings
    method: GET
- name: list_all_recordings
  endpoint:
    path: /api/v1/list_all_recordings
    method: GET
- name: delete_recording
  endpoint:
    path: /api/v1/delete_recording
    method: DELETE
- name: AgentCard
  endpoint:
    path: /agent/card
    method: GET
    data_selector: records
- name: AgentSession
  endpoint:
    path: /agent/session
    method: POST
    data_selector: records
- name: agent_state
  endpoint:
    path: /agent/state
    method: GET
    data_selector: state
- name: component_configs
  endpoint:
    path: /get_component_configs
    method: GET
    data_selector: configs
- name: cleanup
  endpoint:
    path: /cleanup
    method: POST
    data_selector: 'null'
- name: leave
  endpoint:
    path: /leave
    method: POST
    data_selector: 'null'
- name: worker
  endpoint:
    path: /ai_agents/core-components/worker
    method: GET
- name: worker_job
  endpoint:
    path: /ai_agents/core-components/workerjob
    method: GET
- name: function_call
  endpoint:
    path: /function/call
    method: POST
    data_selector: output
    params: {}
- name: function_call_output
  endpoint:
    path: /function/output
    method: GET
    data_selector: output
    params: {}
- name: Agent Cloud
  endpoint:
    path: /ai_agents/deployments/agent-cloud
    method: GET
- name: Self-Hosting
  endpoint:
    path: /ai_agents/deployments/self-hosting
    method: GET
- name: ProcessResource
  endpoint:
    path: /process
    method: POST
    data_selector: data
- name: realtime_model_transcription
  endpoint:
    path: /realtime/model/transcription
    method: POST
    data_selector: transcription_data
- name: STTResponse
  endpoint:
    path: /api/stt_response
    method: POST
    data_selector: response
    params: {}
- name: SpeechData
  endpoint:
    path: /api/speech_data
    method: POST
    data_selector: data
    params: {}
- name: AgentCard
  endpoint:
    path: /ai_agents/a2a/agentCard
    method: POST
    data_selector: agent_card
    params: {}
- name: A2AMessage
  endpoint:
    path: /ai_agents/a2a/message
    method: POST
    data_selector: message
    params: {}
- name: Agent Registry
  endpoint:
    path: /ai_agents/a2a/registry
    method: GET
    data_selector: agents
    params: {}
- name: customer_service_agent
  endpoint:
    path: /agents/customer_agent
    method: POST
- name: loan_agent
  endpoint:
    path: /agents/loan_agent
    method: POST
- name: WorkerJob
  endpoint:
    path: /worker/job
    method: POST
- name: agent_session
  endpoint:
    path: /agent/session
    method: GET
    data_selector: session_data
- name: rooms
  endpoint:
    path: /v2/rooms
    method: GET
- name: sessions
  endpoint:
    path: /v2/sessions
    method: GET
- name: recordings
  endpoint:
    path: /v2/recordings
    method: GET
- name: hls
  endpoint:
    path: /v2/hls
    method: GET
- name: room
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: roomId
- name: CascadingPipeline
  endpoint:
    path: /ai_agents/core-components/cascading-pipeline
    method: GET
    data_selector: pipeline
    params: {}
- name: validate_room
  endpoint:
    path: /v2/rooms/validate/${roomId}
    method: GET
    data_selector: response
    params:
      roomId: required
- name: rooms
  endpoint:
    path: /v2/rooms
    method: GET
    data_selector: data
    params:
      page: '1'
- name: fetch_room
  endpoint:
    path: /v2/rooms/${roomId}
    method: GET
    data_selector: roomId
- name: deactivate_room
  endpoint:
    path: /v2/rooms/deactivate
    method: POST
    data_selector: ''
- name: Voice Activity Detection
  endpoint:
    path: /plugins/silero
    method: POST
    data_selector: vad
    params: {}
- name: Namo Turn Detection
  endpoint:
    path: /plugins/turn_detector
    method: POST
    data_selector: turn_detector
    params: {}
- name: sessions
  endpoint:
    path: /v2/sessions/
    method: GET
    params:
      roomId: REQUIRED
      customRoomId: OPTIONAL
      page: OPTIONAL
      perPage: OPTIONAL
- name: denoise
  endpoint:
    path: /ai_agents/core-components/de-noise
    method: GET
    data_selector: features
    params: {}
- name: session
  endpoint:
    path: /v2/sessions/${sessionId}
    method: GET
    data_selector: response
- name: fetch_participants
  endpoint:
    path: /v2/sessions/${sessionId}/participants
    method: GET
    data_selector: data.participants
    params:
      sessionId: REQUIRED
      page: '1'
      perPage: '20'
- name: active_participants
  endpoint:
    path: /v2/sessions/${sessionId}/participants/active
    method: GET
    params:
      sessionId: required
      page: '1'
      perPage: '20'
- name: pubsub
  endpoint:
    path: /pubsub
    method: GET
    data_selector: messages
    params: {}
- name: end_session
  endpoint:
    path: /v2/sessions/end
    method: POST
    data_selector: participants
    params: {}
- name: RealTimePipeline
  endpoint:
    path: /realtimepipeline
    method: POST
    data_selector: pipeline
    params: {}
- name: CascadingPipeline
  endpoint:
    path: /cascadingpipeline
    method: POST
    data_selector: pipeline
    params: {}
- name: remove_participant
  endpoint:
    path: /v2/sessions/participants/remove
    method: POST
- name: RealTimePipeline
  endpoint:
    path: /ai_agents/core-components/realtime-pipeline
    method: GET
    data_selector: pipeline
    params: {}
- name: CascadingPipeline
  endpoint:
    path: /ai_agents/core-components/cascading-pipeline
    method: GET
    data_selector: pipeline
    params: {}
- name: avatar
  endpoint:
    path: /ai_agents/core-components/avatar
    method: GET
    data_selector: records
    params: {}
- name: realtime_transcription
  endpoint:
    path: /ai/v1/realtime-transcriptions/start
    method: POST
    data_selector: id
    params: {}
- name: stop_realtime_transcription
  endpoint:
    path: /ai/v1/realtime-transcriptions/end
    method: POST
    data_selector: response
    params: {}
- name: realtime_transcriptions
  endpoint:
    path: /realtime-transcriptions/
    method: GET
    data_selector: transcriptions
    params: {}
- name: fetch_a_realtime_transcription
  endpoint:
    path: /ai/v1/realtime-transcriptions/${transcriptionId}
    method: GET
- name: room_options
  endpoint:
    path: /room-options
    method: POST
    data_selector: options
    params:
      room_id: your-meeting-id
      name: My AI Agent
      playground: true
- name: WorkerJob
  endpoint:
    path: /ai_agents/core-components/worker
    method: GET
- name: post_transcriptions
  endpoint:
    path: /post-transcriptions/
    method: GET
    params:
      page: '1'
      perPage: '20'
- name: post_transcription
  endpoint:
    path: /ai/v1/post-transcriptions/${transcriptionId}
    method: GET
- name: Agent Cloud
  endpoint:
    path: /ai_agents/deployments/agent-cloud
    method: GET
    data_selector: data
    params: {}
- name: Self-Hosting
  endpoint:
    path: /ai_agents/deployments/self-hosting
    method: GET
    data_selector: data
    params: {}
- name: start_livestream
  endpoint:
    path: /v2/livestreams/start
    method: POST
    data_selector: Livestream started successfully
- name: stop_livestream
  endpoint:
    path: /v2/livestreams/end
    method: POST
    data_selector: response
    params: {}
- name: livestreams
  endpoint:
    path: /v2/livestreams/
    method: GET
    params:
      roomId: ''
      sessionId: ''
      page: '1'
      perPage: '20'
- name: MCPServerStdio
  endpoint:
    path: /api/mcp
    method: POST
    data_selector: data
    params: {}
- name: MCPServerHTTP
  endpoint:
    path: /api/mcp
    method: GET
    data_selector: data
    params: {}
- name: AgentCard
  endpoint:
    path: /register_agent
    method: POST
    data_selector: agent
    params: {}
- name: A2AMessage
  endpoint:
    path: /send_message
    method: POST
    data_selector: message
    params: {}
- name: fetch_an_rtmp
  endpoint:
    path: /v2/livestreams/${rtmpId}
    method: GET
    data_selector: null
    params: {}
- name: Customer Service Agent
  endpoint:
    path: /agents/customer_service
    method: POST
- name: Loan Specialist Agent
  endpoint:
    path: /agents/loan_specialist
    method: POST
- name: start_hls
  endpoint:
    path: /v2/hls/start
    method: POST
    data_selector: ''
- name: stop_hls_stream
  endpoint:
    path: /v2/hls/end
    method: POST
    data_selector: HLS ended successfully
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: agent
    params: {}
- name: hls
  endpoint:
    path: /v2/hls/
    method: GET
    data_selector: data
    params:
      roomId: REQUIRED
      sessionId: OPTIONAL
      page: OPTIONAL
      perPage: OPTIONAL
- name: hls
  endpoint:
    path: /v2/hls/${HlsId}
    method: GET
- name: rooms
  endpoint:
    path: /v2/rooms
    method: GET
- name: sessions
  endpoint:
    path: /v2/sessions
    method: GET
- name: recordings
  endpoint:
    path: /v2/recordings
    method: GET
- name: livestreams
  endpoint:
    path: /v2/livestreams
    method: POST
- name: hls
  endpoint:
    path: /v2/hls
    method: GET
- name: fetch_active_hls
  endpoint:
    path: /v2/hls/${MeetingId}/active
    method: GET
    data_selector: data
    params:
      MeetingId: REQUIRED
- name: rooms
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: roomId
- name: fetch_hls_thumbnail
  endpoint:
    path: /v2/hls/capture
    method: POST
    data_selector: message
    params: {}
- name: validate_room
  endpoint:
    path: /v2/rooms/validate/${roomId}
    method: GET
- name: delete_hls
  endpoint:
    path: /v2/hls/${hlsId}
    method: DELETE
- name: rooms
  endpoint:
    path: /v2/rooms
    method: GET
    data_selector: data
    params:
      page: '1'
      perPage: '20'
- name: create_deployment
  endpoint:
    path: /ai/v1/ai-deployments
    method: POST
- name: room
  endpoint:
    path: /v2/rooms/${roomId}
    method: GET
    data_selector: roomId
- name: start_session
  endpoint:
    path: /ai/v1/ai-deployment-sessions/start
    method: POST
    data_selector: data
- name: end_session
  endpoint:
    path: /ai/v1/ai-deployment-sessions/end
    method: POST
    data_selector: data
    params: {}
- name: deactivate_room
  endpoint:
    path: /v2/rooms/deactivate
    method: POST
    data_selector: disabled
    params: {}
- name: sessions
  endpoint:
    path: /v2/sessions/
    method: GET
    params:
      roomId: REQUIRED
      customRoomId: OPTIONAL
      page: 'OPTIONAL, defaultValue: 1'
      perPage: 'OPTIONAL, defaultValue: 20'
- name: deployments
  endpoint:
    path: /ai/v1/ai-deployments
    method: GET
    data_selector: data
- name: session
  endpoint:
    path: /v2/sessions/${sessionId}
    method: GET
    data_selector: id
    params: {}
- name: fetch_deployment
  endpoint:
    path: /ai/v1/ai-deployments/${deploymentId}/${tag}
    method: GET
- name: participants
  endpoint:
    path: /v2/sessions/${sessionId}/participants
    method: GET
    data_selector: data.participants
    params:
      sessionId: REQUIRED
- name: active_participants
  endpoint:
    path: /v2/sessions/${sessionId}/participants/active
    method: GET
    params:
      sessionId: your_sessionId
      page: 1
      perPage: 20
- name: ai_deployment_sessions
  endpoint:
    path: /ai/v1/ai-deployment-sessions
    method: GET
    data_selector: data
    params:
      page: '1'
      perPage: '10'
- name: end_session
  endpoint:
    path: /v2/sessions/end
    method: POST
    data_selector: response
    params: {}
- name: fetch_session
  endpoint:
    path: /ai/v1/ai-deployment-sessions/${sessionId}
    method: GET
    data_selector: session
    params:
      sessionId: required
- name: remove_participant
  endpoint:
    path: /v2/sessions/participants/remove
    method: POST
- name: realtime_transcription
  endpoint:
    path: /ai/v1/realtime-transcriptions/start
    method: POST
- name: stop_realtime_transcription
  endpoint:
    path: /ai/v1/realtime-transcriptions/end
    method: POST
- name: realtime_transcriptions
  endpoint:
    path: /realtime-transcriptions/
    method: GET
    data_selector: transcriptions
    params:
      page: '1'
      perPage: '20'
- name: participant-joined
  endpoint:
    path: /v2
    method: POST
    data_selector: data
    params: {}
- name: participant-left
  endpoint:
    path: /v2
    method: POST
    data_selector: data
    params: {}
- name: session-started
  endpoint:
    path: /v2
    method: POST
    data_selector: data
    params: {}
- name: session-ended
  endpoint:
    path: /v2
    method: POST
    data_selector: data
    params: {}
- name: recording-starting
  endpoint:
    path: /v2
    method: POST
    data_selector: data
    params: {}
- name: recording-started
  endpoint:
    path: /v2
    method: POST
    data_selector: data
    params: {}
- name: recording-stopping
  endpoint:
    path: /v2
    method: POST
    data_selector: data
    params: {}
- name: recording-stopped
  endpoint:
    path: /v2
    method: POST
    data_selector: data
    params: {}
- name: recording-failed
  endpoint:
    path: /v2
    method: POST
    data_selector: data
    params: {}
- name: participant-track-recording-starting
  endpoint:
    path: /v2
    method: POST
    data_selector: data
    params: {}
- name: participant-track-recording-started
  endpoint:
    path: /v2
    method: POST
    data_selector: data
    params: {}
- name: participant-track-recording-stopping
  endpoint:
    path: /v2
    method: POST
    data_selector: data
    params: {}
- name: fetch_realtime_transcription
  endpoint:
    path: /ai/v1/realtime-transcriptions/${transcriptionId}
    method: GET
- name: post_transcriptions
  endpoint:
    path: /post-transcriptions/
    method: GET
    data_selector: transcriptions
    params:
      page: '1'
      perPage: '20'
- name: fetch_post_transcription_summary
  endpoint:
    path: /ai/v1/post-transcriptions/${transcriptionId}
    method: GET
- name: livestream
  endpoint:
    path: /v2/livestreams/start
    method: POST
- name: stop_livestream
  endpoint:
    path: /v2/livestreams/end
    method: POST
    data_selector: response
    params: {}
- name: participant_track_recording_stopped
  endpoint:
    path: /participant-track-recording-stopped
    method: POST
    data_selector: data
- name: participant_track_recording_failed
  endpoint:
    path: /participant-track-recording-failed
    method: POST
    data_selector: data
- name: participant_recording_starting
  endpoint:
    path: /participant-recording-starting
    method: POST
    data_selector: data
- name: participant_recording_started
  endpoint:
    path: /participant-recording-started
    method: POST
    data_selector: data
- name: participant_recording_stopping
  endpoint:
    path: /participant-recording-stopping
    method: POST
    data_selector: data
- name: participant_recording_stopped
  endpoint:
    path: /participant-recording-stopped
    method: POST
    data_selector: data
- name: merge_recording_completed
  endpoint:
    path: /merge-recording-completed
    method: POST
    data_selector: data
- name: merge_recording_failed
  endpoint:
    path: /merge-recording-failed
    method: POST
    data_selector: data
- name: transcription_started
  endpoint:
    path: /transcription-started
    method: POST
    data_selector: data
- name: transcription_stopped
  endpoint:
    path: /transcription-stopped
    method: POST
    data_selector: data
- name: transcription_failed
  endpoint:
    path: /transcription-failed
    method: POST
    data_selector: data
- name: livestream_starting
  endpoint:
    path: /livestream-starting
    method: POST
    data_selector: data
- name: livestream_started
  endpoint:
    path: /livestream-started
    method: POST
    data_selector: data
- name: livestream_stopping
  endpoint:
    path: /livestream-stopping
    method: POST
    data_selector: data
- name: livestream_stopped
  endpoint:
    path: /livestream-stopped
    method: POST
    data_selector: data
- name: livestream_failed
  endpoint:
    path: /livestream-failed
    method: POST
    data_selector: data
- name: hls_starting
  endpoint:
    path: /hls-starting
    method: POST
    data_selector: data
- name: hls_started
  endpoint:
    path: /hls-started
    method: POST
    data_selector: data
- name: hls_playable
  endpoint:
    path: /hls-playable
    method: POST
    data_selector: data
- name: hls_stopping
  endpoint:
    path: /hls-stopping
    method: POST
    data_selector: data
- name: hls_stopped
  endpoint:
    path: /hls-stopped
    method: POST
    data_selector: data
- name: hls_failed
  endpoint:
    path: /hls-failed
    method: POST
    data_selector: data
- name: resource_acquired
  endpoint:
    path: /resource-acquired
    method: POST
    data_selector: data
- name: ai_deployment_session_starting
  endpoint:
    path: /ai-deployment-session-starting
    method: POST
    data_selector: data
- name: ai_deployment_session_started
  endpoint:
    path: /ai-deployment-session-started
    method: POST
    data_selector: data
- name: ai_deployment_session_stopping
  endpoint:
    path: /ai-deployment-session-stopping
    method: POST
    data_selector: data
- name: ai_deployment_session_stopped
  endpoint:
    path: /ai-deployment-session-stopped
    method: POST
    data_selector: data
- name: livestreams
  endpoint:
    path: /v2/livestreams/
    method: GET
    data_selector: data
    params:
      roomId: required
      sessionId: optional
      page: optional
      perPage: optional
- name: ai-deployment-session-failed
  endpoint:
    path: /webhook/ai-deployment-session-failed
    method: POST
    data_selector: data
    params: {}
- name: public_key
  endpoint:
    path: /v2/public/rsa-public-key
    method: GET
- name: fetch_an_rtmp
  endpoint:
    path: /v2/livestreams/${rtmpId}
    method: GET
- name: token
  endpoint:
    path: /token
    method: GET
    data_selector: token
    params: {}
- name: room
  endpoint:
    path: /rooms
    method: POST
    data_selector: data
    params: {}
- name: start_hls_stream
  endpoint:
    path: /v2/hls/start
    method: POST
    data_selector: sessionId
- name: stop_hls_stream
  endpoint:
    path: /v2/hls/end
    method: POST
    data_selector: ''
    params: {}
- name: hls
  endpoint:
    path: /v2/hls/
    method: GET
    data_selector: data
    params:
      roomId: required
      sessionId: optional
      page: '1'
      perPage: '20'
- name: Create Room
  endpoint:
    path: /api-reference/realtime-communication/create-room
    method: POST
- name: Validate Room
  endpoint:
    path: /api-reference/realtime-communication/validate-room
    method: POST
- name: Fetch Rooms
  endpoint:
    path: /api-reference/realtime-communication/fetch-all-room
    method: GET
- name: Fetch a Room
  endpoint:
    path: /api-reference/realtime-communication/fetch-room-details
    method: GET
- name: Deactivate a Room
  endpoint:
    path: /api-reference/realtime-communication/deactivate-room
    method: DELETE
- name: Fetch Sessions
  endpoint:
    path: /api-reference/realtime-communication/fetch-session
    method: GET
- name: Fetch a Session
  endpoint:
    path: /api-reference/realtime-communication/fetch-session-using-sessionid
    method: GET
- name: Fetch Participants
  endpoint:
    path: /api-reference/realtime-communication/fetch-participants
    method: GET
- name: Fetch Active Participants
  endpoint:
    path: /api-reference/realtime-communication/fetch-active-participants
    method: GET
- name: End Session
  endpoint:
    path: /api-reference/realtime-communication/end-session
    method: POST
- name: Remove Participant
  endpoint:
    path: /api-reference/realtime-communication/remove-participant
    method: DELETE
- name: fetch_hls
  endpoint:
    path: /v2/hls/${HlsId}
    method: GET
    data_selector: sessionId
    params: {}
- name: fetch_active_hls
  endpoint:
    path: /v2/hls/${MeetingId}/active
    method: GET
    data_selector: data
- name: create_room
  endpoint:
    path: /create-room
    method: POST
- name: validate_room
  endpoint:
    path: /validate-room
    method: GET
- name: fetch_rooms
  endpoint:
    path: /fetch-rooms
    method: GET
- name: fetch_room_details
  endpoint:
    path: /fetch-room-details
    method: GET
- name: deactivate_room
  endpoint:
    path: /deactivate-room
    method: POST
- name: fetch_session
  endpoint:
    path: /fetch-session
    method: GET
- name: fetch_participants
  endpoint:
    path: /fetch-participants
    method: GET
- name: end_session
  endpoint:
    path: /end-session
    method: POST
- name: fetch_hls_thumbnail
  endpoint:
    path: /v2/hls/capture
    method: POST
    data_selector: message
    params: {}
- name: create_room
  endpoint:
    path: /create-room
    method: POST
    data_selector: room
    params: {}
- name: fetch_rooms
  endpoint:
    path: /fetch-all-rooms
    method: GET
    data_selector: rooms
    params: {}
- name: delete_hls
  endpoint:
    path: /v2/hls/${hlsId}
    method: DELETE
    data_selector: null
    params:
      hlsId: REQUIRED
- name: Room
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: data
- name: Session
  endpoint:
    path: /v2/sessions
    method: GET
    data_selector: data
- name: create_deployment
  endpoint:
    path: /ai/v1/ai-deployments
    method: POST
    data_selector: id
- name: start_session
  endpoint:
    path: /ai/v1/ai-deployment-sessions/start
    method: POST
    data_selector: data
- name: create_room
  endpoint:
    path: /v2/create-room
    method: POST
    data_selector: roomDetails
- name: validate_room
  endpoint:
    path: /v2/validate-room
    method: POST
    data_selector: validationResult
- name: end_session
  endpoint:
    path: /ai/v1/ai-deployment-sessions/end
    method: POST
- name: create_room
  endpoint:
    path: /create-room
    method: POST
    data_selector: roomDetails
    params: {}
- name: fetch_rooms
  endpoint:
    path: /fetch-rooms
    method: GET
    data_selector: rooms
    params: {}
- name: deployments
  endpoint:
    path: /ai-deployments
    method: GET
    data_selector: data
    params:
      page: '1'
- name: Create a Room
  endpoint:
    path: /v2/rooms
    method: POST
- name: Fetch Rooms
  endpoint:
    path: /v2/rooms
    method: GET
- name: Fetch a Room
  endpoint:
    path: /v2/rooms/{roomId}
    method: GET
- name: Deactivate a Room
  endpoint:
    path: /v2/rooms/{roomId}/deactivate
    method: PATCH
- name: fetch_deployment
  endpoint:
    path: /ai/v1/ai-deployments/${deploymentId}/${tag}
    method: GET
- name: create_room
  endpoint:
    path: /v2/rooms
    method: POST
- name: fetch_rooms
  endpoint:
    path: /v2/rooms
    method: GET
- name: fetch_participants
  endpoint:
    path: /v2/rooms/:roomId/participants
    method: GET
- name: end_session
  endpoint:
    path: /v2/sessions/:sessionId/end
    method: POST
- name: fetch_sessions
  endpoint:
    path: /ai/v1/ai-deployment-sessions
    method: GET
    data_selector: data
    params:
      page: '1'
      perPage: '10'
- name: session_quality_stats
  endpoint:
    path: /sessions/${sessionId}/stats
    method: GET
    data_selector: stats
    params:
      sessionId: required
- name: fetch_session
  endpoint:
    path: /ai/v1/ai-deployment-sessions/${sessionId}
    method: GET
- name: participant_quality_stats
  endpoint:
    path: /v2/sessions/${sessionId}/participant/${participantId}/stats
    method: GET
- name: stop_recording
  endpoint:
    path: /v2/recordings/end
    method: POST
    data_selector: response
    params: {}
- name: participant-joined
  endpoint:
    path: /api-reference/realtime-communication/user-webhooks
    method: POST
    data_selector: data
- name: participant-left
  endpoint:
    path: /api-reference/realtime-communication/user-webhooks
    method: POST
    data_selector: data
- name: session-started
  endpoint:
    path: /api-reference/realtime-communication/user-webhooks
    method: POST
    data_selector: data
- name: session-ended
  endpoint:
    path: /api-reference/realtime-communication/user-webhooks
    method: POST
    data_selector: data
- name: recording-starting
  endpoint:
    path: /api-reference/realtime-communication/user-webhooks
    method: POST
    data_selector: data
- name: recording-started
  endpoint:
    path: /api-reference/realtime-communication/user-webhooks
    method: POST
    data_selector: data
- name: recording-stopping
  endpoint:
    path: /api-reference/realtime-communication/user-webhooks
    method: POST
    data_selector: data
- name: recording-stopped
  endpoint:
    path: /api-reference/realtime-communication/user-webhooks
    method: POST
    data_selector: data
- name: recording-failed
  endpoint:
    path: /api-reference/realtime-communication/user-webhooks
    method: POST
    data_selector: data
- name: participant-track-recording-starting
  endpoint:
    path: /api-reference/realtime-communication/user-webhooks
    method: POST
    data_selector: data
- name: participant-track-recording-started
  endpoint:
    path: /api-reference/realtime-communication/user-webhooks
    method: POST
    data_selector: data
- name: participant-track-recording-stopping
  endpoint:
    path: /api-reference/realtime-communication/user-webhooks
    method: POST
    data_selector: data
- name: recordings
  endpoint:
    path: /recordings
    method: GET
    params:
      roomId: REQUIRED
      sessionId: OPTIONAL
      page:
        defaultValue: 1
      perPage:
        defaultValue: 20
- name: fetch_a_recording
  endpoint:
    path: /v2/recordings/${recordingId}
    method: GET
- name: delete_recording
  endpoint:
    path: /v2/recordings/${recordingId}
    method: DELETE
    data_selector: response
    params:
      recordingId: required
- name: start_participant_recording
  endpoint:
    path: /v2/recordings/participant/start
    method: POST
    data_selector: response
    params: {}
- name: stop_participant_recording
  endpoint:
    path: /v2/recordings/participant/stop
    method: POST
    data_selector: response
    params: {}
- name: participant_track_recording_stopped
  endpoint:
    path: /participant-track-recording-stopped
    method: POST
    data_selector: data
- name: participant_track_recording_failed
  endpoint:
    path: /participant-track-recording-failed
    method: POST
    data_selector: data
- name: participant_recording_starting
  endpoint:
    path: /participant-recording-starting
    method: POST
    data_selector: data
- name: participant_recording_started
  endpoint:
    path: /participant-recording-started
    method: POST
    data_selector: data
- name: participant_recording_stopping
  endpoint:
    path: /participant-recording-stopping
    method: POST
    data_selector: data
- name: merge_recording_completed
  endpoint:
    path: /merge-recording-completed
    method: POST
    data_selector: data
- name: merge_recording_failed
  endpoint:
    path: /merge-recording-failed
    method: POST
    data_selector: data
- name: transcription_started
  endpoint:
    path: /transcription-started
    method: POST
    data_selector: data
- name: transcription_stopped
  endpoint:
    path: /transcription-stopped
    method: POST
    data_selector: data
- name: transcription_failed
  endpoint:
    path: /transcription-failed
    method: POST
    data_selector: data
- name: livestream_started
  endpoint:
    path: /livestream-started
    method: POST
    data_selector: data
- name: livestream_stopped
  endpoint:
    path: /livestream-stopped
    method: POST
    data_selector: data
- name: hls_started
  endpoint:
    path: /hls-started
    method: POST
    data_selector: data
- name: hls_playable
  endpoint:
    path: /hls-playable
    method: POST
    data_selector: data
- name: resource_acquired
  endpoint:
    path: /resource-acquired
    method: POST
    data_selector: data
- name: ai_deployment_session_started
  endpoint:
    path: /ai-deployment-session-started
    method: POST
    data_selector: data
- name: ai-deployment-session-failed
  endpoint:
    path: /ai-deployment-session-failed
    method: POST
    data_selector: data
- name: participant_recording
  endpoint:
    path: /v2/recordings/participant
    method: GET
    data_selector: data
    params:
      roomId: REQUIRED
      sessionId: OPTIONAL
      participantId: OPTIONAL
      page: OPTIONAL
      perPage: OPTIONAL
- name: public_key
  endpoint:
    path: /v2/public/rsa-public-key
    method: GET
- name: participant_recording
  endpoint:
    path: /v2/recordings/participant/${recordingId}
    method: GET
    data_selector: response
    params:
      participantRecordingId: required
- name: token
  endpoint:
    path: /token
    method: GET
    data_selector: token
    params: {}
- name: room
  endpoint:
    path: /rooms
    method: POST
    data_selector: data
    params: {}
- name: delete_participant_recording
  endpoint:
    path: /v2/recordings/participant/${recordingId}
    method: DELETE
    data_selector: response
- name: merge_participant_recordings
  endpoint:
    path: /v2/recordings/participant/merge
    method: POST
- name: fetch_all_merge_recordings
  endpoint:
    path: /v2/recordings/participant/merge
    method: GET
    params: {}
- name: Create a Room
  endpoint:
    path: /api-reference/realtime-communication/create-room
    method: POST
- name: Validate a Room
  endpoint:
    path: /api-reference/realtime-communication/validate-room
    method: POST
- name: Fetch Rooms
  endpoint:
    path: /api-reference/realtime-communication/fetch-all-room
    method: GET
- name: Fetch a Room
  endpoint:
    path: /api-reference/realtime-communication/fetch-room-details
    method: GET
- name: Deactivate a Room
  endpoint:
    path: /api-reference/realtime-communication/deactivate-room
    method: DELETE
- name: Fetch Sessions
  endpoint:
    path: /api-reference/realtime-communication/fetch-session
    method: GET
- name: Fetch a Session
  endpoint:
    path: /api-reference/realtime-communication/fetch-session-using-sessionid
    method: GET
- name: Fetch Participants
  endpoint:
    path: /api-reference/realtime-communication/fetch-participants
    method: GET
- name: Fetch Active Participants
  endpoint:
    path: /api-reference/realtime-communication/fetch-active-participants
    method: GET
- name: End Session
  endpoint:
    path: /api-reference/realtime-communication/end-session
    method: POST
- name: Remove Participant
  endpoint:
    path: /api-reference/realtime-communication/remove-participant
    method: DELETE
- name: fetch_a_merge_recording
  endpoint:
    path: /v2/recordings/participant/merge/{MERGE_ID}
    method: GET
- name: start_track_recording
  endpoint:
    path: /v2/recordings/participant/track/start
    method: POST
    data_selector: response
    params: {}
- name: create_room
  endpoint:
    path: /room
    method: POST
    data_selector: roomId
- name: fetch_rooms
  endpoint:
    path: /room
    method: GET
    data_selector: rooms
- name: stop_track_recording
  endpoint:
    path: /v2/recordings/participant/track/stop
    method: POST
- name: room
  endpoint:
    path: /rooms
    method: POST
    data_selector: data
- name: session
  endpoint:
    path: /sessions
    method: GET
    data_selector: data
- name: track_recording
  endpoint:
    path: /v2/recordings/participant/track
    method: GET
    data_selector: data
    params:
      roomId: ''
      sessionId: ''
      participantId: ''
      page: '1'
      perPage: '20'
- name: create_room
  endpoint:
    path: /create-room
    method: POST
- name: validate_room
  endpoint:
    path: /validate-room
    method: POST
- name: fetch_rooms
  endpoint:
    path: /fetch-all-room
    method: GET
- name: fetch_room_details
  endpoint:
    path: /fetch-room-details
    method: GET
- name: deactivate_room
  endpoint:
    path: /deactivate-room
    method: POST
- name: track_recording
  endpoint:
    path: /v2/recordings/participant/track/${recordingId}
    method: GET
    data_selector: sessionId
    params:
      trackRecordingId: REQUIRED
- name: delete_track_recording
  endpoint:
    path: /v2/recordings/participant/track/${recordingId}
    method: DELETE
    data_selector: null
    params:
      trackRecordingId: REQUIRED
- name: create_room
  endpoint:
    path: /v2/create-room
    method: POST
- name: fetch_rooms
  endpoint:
    path: /v2/fetch-all-room
    method: GET
- name: fetch_participants
  endpoint:
    path: /v2/fetch-participants
    method: GET
- name: room
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: data
    params: {}
- name: session
  endpoint:
    path: /v2/sessions
    method: GET
    data_selector: data
    params: {}
- name: create_room
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: room
    params: {}
- name: fetch_rooms
  endpoint:
    path: /v2/rooms
    method: GET
    data_selector: rooms
    params: {}
- name: rooms
  endpoint:
    path: /rooms
    method: GET
- name: sessions
  endpoint:
    path: /sessions
    method: GET
- name: session_quality_stats
  endpoint:
    path: /sessions/${sessionId}/stats
    method: GET
    data_selector: stats
    params:
      sessionId: REQUIRED
- name: participant_quality_stats
  endpoint:
    path: /v2/sessions/${sessionId}/participant/${participantId}/stats
    method: GET
- name: stop_recording
  endpoint:
    path: /v2/recordings/end
    method: POST
    data_selector: null
    params: {}
- name: recordings
  endpoint:
    path: /v2/recordings
    method: GET
    data_selector: data
    params:
      roomId: required
      sessionId: optional
      page: 'optional, default: 1'
      perPage: 'optional, default: 20'
- name: fetch_recording
  endpoint:
    path: /recordings/${recordingId}
    method: GET
    data_selector: userId, roomId, sessionId, createdAt, updatedAt, fileId, file,
      id
    params:
      recordingId: required
- name: delete_recording
  endpoint:
    path: /v2/recordings/${recordingId}
    method: DELETE
- name: start_participant_recording
  endpoint:
    path: /v2/recordings/participant/start
    method: POST
    data_selector: null
    params: {}
- name: stop_participant_recording
  endpoint:
    path: /v2/recordings/participant/stop
    method: POST
    data_selector: response
    params: {}
- name: participant_recording
  endpoint:
    path: /v2/recordings/participant
    method: GET
    data_selector: data
    params:
      roomId: REQUIRED
      sessionId: OPTIONAL
      participantId: OPTIONAL
      page: OPTIONAL
      perPage: OPTIONAL
- name: participant_recording
  endpoint:
    path: /v2/recordings/participant/${recordingId}
    method: GET
- name: delete_participant_recording
  endpoint:
    path: /v2/recordings/participant/${recordingId}
    method: DELETE
- name: merge_participant_recordings
  endpoint:
    path: /v2/recordings/participant/merge
    method: POST
    data_selector: message
    params: {}
- name: fetch_all_merge_recordings
  endpoint:
    path: /v2/recordings/participant/merge
    method: GET
    data_selector: recordings
    params: {}
- name: fetch_a_merge_recording
  endpoint:
    path: /v2/recordings/participant/merge/{MERGE_ID}
    method: GET
- name: start_track_recording
  endpoint:
    path: /v2/recordings/participant/track/start
    method: POST
    data_selector: response
- name: stop_track_recording
  endpoint:
    path: /v2/recordings/participant/track/stop
    method: POST
- name: track_recording
  endpoint:
    path: /v2/recordings/participant/track
    method: GET
    params:
      roomId: ''
      sessionId: ''
      participantId: ''
      page: '1'
      perPage: '20'
- name: fetch_track_recording
  endpoint:
    path: /v2/recordings/participant/track/${recordingId}
    method: GET
    data_selector: data
    params:
      trackRecordingId: required
- name: delete_track_recording
  endpoint:
    path: /v2/recordings/participant/track/${recordingId}
    method: DELETE
notes:
- Token will not include any prefix such as 'Basic ' or 'Bearer '. Just pass a token
  as value.
- The AI Agent SDK is built in Python. You'll need Python 3.12 or higher to use the
  SDK.
- The AI Agent SDK is stable and production-ready.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- First 10,000 participant-mins are free every month.
- First 10,000 speaker & viewer-mins are free every month, all video resolutions.
- First 10,000 participant-mins are FREE every month.
- Both types of accounts receive 10,000 free minutes every month.
- The monthly invoices would be issued via Stripe on the second/third day of the month.
- Use environment variables for secure storage of API keys, secret tokens, and authentication
  tokens.
- API Keys should be stored in environment variables for security.
- Use environment variables for API keys and tokens.
- Set room_id to join a pre-created room; omit to auto-create
- Integrating inbound/outbound WhatsApp calls requires updating your number's settings
  via the Meta Graph API.
- For optimal performance, run your agent in the same geographic region as your SIP
  provider.
- Token is validated only once while joining the meeting, so if a person joins the
  meeting and the token gets expired after that, there won't be any issue in the current
  meeting.
- Handles chat context management efficiently.
- Automatically selects the appropriate executor type based on platform.
- Add debounce mechanism for status updates — minimum 2 seconds between status updates.
- Represents an agent's capabilities and identity for agent-to-agent communication.
- Manages an agent session with its associated conversation flow and pipeline.
- Cascading pipeline implementation that processes data in sequence (STT -> LLM ->
  TTS).
- Manages a conversation context for LLM interactions.
- Clear all chat context items and references to free memory.
- Create a filtered copy of the chat context.
- Find an item by its ID.
- Convert the context to a dictionary representation.
- Truncate the context to the last N items while preserving system message.
- Cleans up conversation flow resources
- Handles transcription events
- Dedicated inference resource that runs AI models in a separate process.
- This mimics the old IPC system's single shared inference process that handles all
  STT, LLM, TTS, and VAD tasks for all agent jobs.
- Base class for End of Utterance Detection implementations
- Handles chat context items and references.
- Supports message and function call outputs.
- Handles STT and LLM functionality for conversation management.
- Agent init config is mandatory.
- Uses an enhanced transcript accumulation system
- Handles both user speech and system messages
- Manages the conversation flow by listening to transcription events.
- Initialize conversation flow with event emitter capabilities
- Handles chat messages and function outputs.
- Supports managing conversation flow and context.
- VIDEOSDK_AUTH_TOKEN environment variable not found
- Add debounce mechanism for status updates - Minimum 2 seconds between status updates.
- Handles agent-to-agent communication.
- Includes methods for managing agent sessions and tools.
- HTTP/Web-based MCP service provider with automatic transport detection.
- auth_token is required, or add VIDEOSDK_AUTH_TOKEN in your environment
- Initial list of chat items can be empty.
- Handles transcription events for conversation management
- Inherits from Pipeline base class and adds cascade-specific events.
- Cleanup conversation flow resources
- VIDEOSDK_AUTH_TOKEN must be set as an environment variable or provided in room options
  via auth_token.
- RealTime pipeline implementation processes data in real-time.
- Base class for Speech-to-Text implementations
- Handles VAD events for speech detection
- Processes text input directly for A2A communication
- Unregister the agent from A2A communication
- Update the tools for the agent
- Manages an agent session with its associated conversation flow and pipeline
- Handles chat context and memory management.
- VIDEOSDK_AUTH_TOKEN environment variable must be set to connect
- Ensure room ID is retrieved before attempting to join a meeting
- VIDEOSDK_AUTH_TOKEN environment variable must be set.
- Ensure that the server is up and running before making requests.
- Check for proper API key permissions.
- Initialize the HTTP MCP server provider.
- RealTime pipeline implementation that processes data in real-time.
- Agent sessions can manage conversation flows and pipelines.
- Handles conversation flow with transcription events
- Handles transcription events and manages conversation flow
- Cleanup resources - should be overridden by subclasses to cleanup models
- Cleanup resources - calls aclose for compatibility
- Requires VIDEOSDK_AUTH_TOKEN environment variable to be set
- Uses separate process for inference tasks.
- Ensure to handle connection timeouts appropriately.
- Inherits from Pipeline base class and adds realtime-specific events.
- Handles various events related to chat context.
- Supports message addition and cleanup.
- Cleans up conversation flow resources.
- Handles STT and VAD events for conversation flow management.
- Process-based resource for task execution.
- VIDEOSDK_AUTH_TOKEN not found. Set it as an environment variable or provide it in
  room options via auth_token.
- Uses OAuth2 — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Dedicated inference resource runs AI models in a separate process.
- Cleanup resources using aclose method.
- Image content supports different encoding formats.
- VideoSDK worker initialized successfully
- VIDEOSDK_AUTH_TOKEN must be provided either as an environment variable or in room
  options.
- Session management options include auto end session set to true and session timeout
  of 5 seconds.
- Function output and message are added to context.
- Cleanup method clears all items from context.
- A dummy audio track which reads silence.
- Endpoint for image content is available.
- Health metrics can be monitored using the health metrics endpoint.
- Handles context management for chat interactions
- Includes features such as message addition and context cleanup
- Cleans up conversation flow resources after use.
- VIDEOSDK_AUTH_TOKEN environment variable must be set or provided in room options.
- A cleanup method is provided for resource management.
- Ensure the executable path is set correctly for local applications.
- Monitor memory usage to avoid exceeding limits.
- VideoSDK worker manages job execution and backend registration.
- The worker requires a proper initialization before use.
- Set up delayed callback setup that will be called when room becomes available
- Cannot set up session end callback for job if room not available
- Uses OAuth2 with token — requires setup of connected app in VideoSDK
- Cascading pipeline implementation processes data in sequence (STT -> LLM -> TTS)
- Automatically generates a UUID if no ID is provided for AgentCard.
- Handles user speech started event
- Cleans up chat context items to free memory
- Represents image content in chat messages.
- Handles transcription events and manages conversation flow.
- The EOU detection threshold can be adjusted using the set_threshold method.
- Uses multiprocessing to create isolated processes for task execution.
- Cannot set up meeting handlers for job if room not available
- Thread-based resource for task execution.
- Uses threading for concurrent task execution within the same process.
- Uses VIDEOSDK_AUTH_TOKEN env var if authentication token not provided.
- Handles chat context management including adding messages and function outputs
- Includes functionality for cleanup and truncation of context items
- Uses API key for authentication — ensure to store securely
- Check for token expiration in long-running processes
- Requires backend connection for job management.
- Uses OAuth2 with refresh token — requires setup of connected app in VideoSDK
- Some jobs may fail to launch if dependencies are not met
- Session management for the agent includes state handling and callbacks.
- Handles chat context and conversation flow
- Async handlers are not supported. Use a sync wrapper.
- VIDEOSDK_AUTH_TOKEN environment variable must be set or provided in room options
  via auth_token.
- Dedicated inference resource that runs AI models in a separate process
- This mimics the old IPC system's single shared inference process
- Handles end of utterance detection within chat contexts.
- Cleanup resources implemented in aclose method
- Some objects like ProcessResource may return nulls in deeply nested fields
- Uses async task executor for job management.
- Backend registration mode is optional.
- Cleanup resources after processing audio frames
- Ensure to handle the language parameter properly
- Uses VIDEOSDK_AUTH_TOKEN env var if not provided.
- Maximum memory usage for a job in MB. Defaults to 0 (disabled).
- Job should remain active until the session actually ends.
- Worker requires proper room cleanup
- Ensure session end callback is set up when room is available
- Uses VIDEOSDK_AUTH_TOKEN env var if auth_token is not provided.
- Handles chat context and message processing
- Supports user and assistant roles
- Unknown notes regarding the API.
- Supports both streamable and non-streamable HTTP.
- Process-based MCP service provider for local applications.
- Requires implementation of process_audio and synthesize methods
- Audio frames must be in bytes.
- Language code is optional for recognition.
- Worker manages job execution and backend registration
- Shutdown the worker.
- Uses API key for authentication.
- Requires setup of connected app in Video SDK
- Uses integrated models for speech-to-speech processing.
- Conversation Flow is a powerful feature that currently works exclusively with the
  Cascading Pipeline.
- Uses async methods for operation.
- Garbage collection is performed upon cleanup.
- VAD acts as a basic speech detector.
- Namo intelligently decides if the turn is over.
- De-noise improves audio quality in AI agent conversations by filtering out background
  noise.
- MCPServerHTTP requires a valid endpoint URL for initialization.
- Requires setup of connected app in videosdk
- Uses Pub/Sub for real-time messaging.
- Uses backend registration mode for worker management
- Live video input is enabled through the vision parameter in RoomOptions and requires
  Google's Gemini Live model.
- Only works with GeminiRealtime model for live video capabilities.
- Live video processing requires Google's Gemini Live model.
- Static image processing works with all supported LLM providers.
- Tasks should be monitored for completion to avoid resource leaks
- The Simli avatar integration provides high-quality virtual avatars with real-time
  lip synchronization.
- Choose the appropriate recording type based on your use case
- Ensure proper authentication tokens for recording API access
- 'Set API keys in environment: DEEPGRAM_API_KEY, OPENAI_API_KEY, ELEVENLABS_API_KEY,
  VIDEOSDK_AUTH_TOKEN'
- 'Set API keys in environment variables: DEEPGRAM_API_KEY, OPENAI_API_KEY, ELEVENLABS_API_KEY,
  VIDEOSDK_AUTH_TOKEN'
- Manages a conversation context for LLM interactions
- 'Document Quality: Use clear, well-structured documents with specific information'
- 'Chunk Size: Keep chunks between 300-800 words for optimal retrieval'
- 'Retrieval Count: Start with k=2-3, adjust based on response quality and latency'
- 'Context Window: Ensure retrieved context fits within LLM token limits'
- 'Persistent Storage: Use PersistentClient in production to save embeddings'
- 'Error Handling: Always handle retrieval failures gracefully'
- 'Testing: Test with diverse queries to ensure good coverage'
- Enable playground mode for easy testing
- Automatically end session when participants leave
- Handles end of utterance detection in chat
- Requires cleanup method to manage resources
- This API does not require authentication.
- Supports multi-agent systems for collaboration and knowledge sharing.
- VideoSDK worker that manages job execution and backend registration.
- Customer agent has voice capabilities only via RealTimePipeline.
- Specialist agent operates in text-only mode via CascadingPipeline.
- Uses OAuth2 for authentication
- Ensure that the JobContext is created only for the primary (main) agent.
- Uses VideoSDK authentication token for VideoSDK services and registry authentication.
- Playground mode is designed for development and testing purposes.
- Ensure playground mode is disabled to maintain security and performance.
- Agent Session orchestrates the entire workflow, combining the Agent with a Pipeline
  for real-time communication.
- The VideoSDK API uses access token to authenticate API requests.
- Realtime Pipeline provides direct speech-to-speech processing with minimal latency.
- The token will not include any prefix such as 'Basic ' or 'Bearer '. Just pass a
  token as value.
- The Cascading Pipeline component provides a flexible, modular approach to building
  AI agents.
- Token does not include any prefix such as 'Basic ' or 'Bearer '
- Token will be a JWT generated using VideoSDK ApiKey and Secret.
- VAD acts as a basic speech detector and Namo intelligently decides if the turn is
  over.
- This API lets you fetch a number of total participants in a room session by passing
  sessionId as a parameter.
- Bidirectional communication between agent and client applications.
- Messages are published and subscribed through shared topics.
- 'Model Restriction: Only works with GeminiRealtime model.'
- 'Network Requirements: Requires stable network connections for optimal performance.'
- Token should be passed without any prefix such as 'Basic ' or 'Bearer '
- Live video input is enabled through the vision parameter in RoomOptions.
- CascadingPipeline supports static image processing through the ImageContent class.
- Avatars add a visual, human-like presence to your AI agents, creating more engaging
  and natural interactions.
- Monitor recording status and handle errors gracefully
- Plan for adequate storage capacity
- Token should not include any prefix such as 'Basic ' or 'Bearer '. Just pass a token
  as value.
- Uses JWT tokens generated with your API key
- Set API keys in environment
- Token should not include any prefix such as 'Basic ' or 'Bearer '.
- Agent implementation requires setup of agent functions and context.
- Agent Cloud provides zero infrastructure management and automatic scaling.
- Self-hosting allows complete control over the deployment environment.
- The Trace View offers an even deeper level of insight, breaking down the entire
  session into a hierarchical structure of traces and spans.
- Supports both STDIO and HTTP transport methods for MCP servers.
- Enables seamless collaboration between specialized AI agents
- This will be a JWT token generate using VideoSDK ApiKey and Secret.
- The customer agent has voice capabilities only.
- The specialist agent operates in text-only mode.
- The background agent should not have its own context or initiate a separate connection.
- Token will be passed in a header field called `Authorization`.
- To generate authentication token, you will need `API_KEY` and `SECRET`.
- Token must not include any prefix such as 'Basic ' or 'Bearer '.
- Note that the token will not include any prefix such as 'Basic ' or 'Bearer '. Just
  pass a token as value.
- Token must be a JWT without any prefix such as 'Basic ' or 'Bearer '
- Token should not include any prefix such as 'Basic ' or 'Bearer '
- The token will not include any prefix such as 'Basic ' or 'Bearer '
- Token should be passed without any prefix such as 'Basic ' or 'Bearer '.
- Token will not include any prefix such as 'Basic ' or 'Bearer '
- Token will not include any prefix such as 'Basic' or 'Bearer'. Just pass a token
  as value.
- This API lets you capture a thumbnail from the ongoing HLS stream in different formats.
- API credentials are required to be configured in the main.py file.
- API Key and Secret required for authentication.
- Token must be generated using VideoSDK ApiKey and Secret, without any prefix.
- API credentials are required from VideoSDK Developer Console.
- Get your API credentials from VideoSDK Developer Console
- The token should not include any prefix such as 'Basic ' or 'Bearer '. Just pass
  a token as value.
- Token must be a JWT token generated using VideoSDK ApiKey and Secret, without any
  prefix.
- VideoSdk signs the webhook events it sends to your endpoints by including a signature
  in each event’s videosdk-signature header.
- Uses JWT for authentication with API key and secret.
- Permissions can be set to allow_join or allow_mod.
- If the deployment has been completed successfully and you get back the function
  URL which now can be used to trigger the execution of the Cloud Function.
- Each participant object must include a participantId, and optionally a recordingId.
- If no recordingId is provided, the participant's first available audio recording
  will be used.
- Token will be a JWT generated using VideoSDK ApiKey and Secret. The token will not
  include any prefix such as 'Basic ' or 'Bearer '.
- Configure environment variables with your VideoSDK credentials.
- API key and secret key are required for authentication.
- Authorization token must be a JWT token generated using VideoSDK ApiKey and Secret
  without any prefix.
- API credentials must be configured in the main.go file.
- API credentials required from VideoSDK Developer Console.
- The Authorization header requires a JWT token without any prefix such as 'Basic
  ' or 'Bearer '.
- Token must be a JWT without any prefix such as 'Basic ' or 'Bearer '.
- The ID of the Recording is required as a parameter.
- Authorization token must be a JWT without any prefix like 'Basic ' or 'Bearer '
errors:
- 'Invoice due date missed: Video SDK services will be suspended.'
- '401 Unauthorized: Check your API key or token.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Recheck API key or permissions'
- Token is invalid or expired
- 'Unknown error: Handle errors from components (STT, LLM, TTS, VAD, TURN-D)'
- 'Error during ChatContext garbage collection: {e}'
- 'Unknown error: Handle error events from components (STT, LLM, TTS, VAD, TURN-D)'
- 'ValueError: VIDEOSDK_AUTH_TOKEN not found.'
- 'RuntimeError: Failed to create room.'
- 'Error during cleanup: Memory issues may arise.'
- 'TimeoutError: Inference task timed out.'
- 'ValueError: VIDEOSDK_AUTH_TOKEN not found'
- 'RuntimeError: Failed to create room'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify API key.'
- '404 Not Found: Endpoint does not exist.'
- 'Audio processing failed: {str(e)}'
- 'ValueError: If the VIDEOSDK_AUTH_TOKEN is missing.'
- 'RuntimeError: If the API request fails or the response is invalid.'
- 'RuntimeError: Unexpected API response, missing roomId.'
- '500 Internal Server Error: Check server logs for details.'
- '404 Not Found: Verify the endpoint path.'
- 'ERROR: Invalid input provided'
- 'ERROR: Function call failed'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400 Bad Request: Check the request payload.'
- '404 Not Found: Verify the endpoint URL.'
- '500 Internal Server Error: Check the server logs for more details.'
- '403 Forbidden: Check API key permissions.'
- 'Component error: Unknown error'
- 'Failed to create room: {e}'
- 'Unexpected API response, missing roomId: {data}'
- 'REQUEST_TIMEOUT: Adjust the connection or stream read timeout values.'
- 'ValueError: auth_token is required, or add VIDEOSDK_AUTH_TOKEN in your environment'
- '400 Bad Request: Check request parameters'
- '403 Forbidden: Ensure API key has correct permissions'
- '500 Internal Server Error: Retry request after some time'
- 'JOB_NOT_FOUND: Check if the job ID is correct'
- 'INVALID_TOKEN: Recheck OAuth token validity'
- 'MAX_RETRIES_EXCEEDED: Increase max_retry configuration'
- 'TimeoutError: Inference process failed to initialize.'
- 'RuntimeError: Inference process is not ready.'
- 'TimeoutError: Inference process failed to initialize within the specified timeout'
- 'RuntimeError: Inference process is not ready'
- 'Error connecting to room: {e}'
- 'Error waiting for participant: {e}'
- 'Unexpected error in run_until_shutdown: {e}'
- 'NotImplementedError: Abstract method must be implemented in subclass'
- 'RuntimeError: Task executor not initialized'
- 'INVALID_AUDIO_FORMAT: Check the audio file format'
- 'TIMEOUT: Increase the timeout for processing'
- '401 Unauthorized: Check API key or authentication method'
- 'Error handling availability request: {e}'
- 'Error launching job {assignment.job_id}: {e}'
- Error during job cleanup
- Error during backend cleanup
- Error during task cleanup
- Error stopping process manager
- Error stopping HTTP server
- '408 Request Timeout: The server timed out waiting for the request.'
- '500 Internal Server Error: The server encountered an unexpected condition.'
- 'Entrypoint function failed for job {assignment.job_id}: {entrypoint_error}'
- '401 Unauthorized: Check API key or permissions.'
- '500 Internal Server Error: Review server logs for details.'
- 'Inference process error: {message.get(''error'')}'
- 'Health check failed for inference process {self.resource_id}: {e}'
- '400 Bad Request: Invalid input data.'
- '500 Internal Server Error: An unexpected error occurred.'
- 'ValueError: VIDEOSDK_AUTH_TOKEN not found. Set it as an environment variable or
  provide it in room options via auth_token.'
- 'TIMEOUT: Adjust connection or stream read timeout settings.'
- 'Slow responses: Reduce retrieval count (k), use faster embedding model, or cache
  embeddings'
- 'Irrelevant results: Improve document quality, adjust chunking strategy, or use
  metadata filtering'
- 'Out of memory: Use PersistentClient instead of in-memory Client'
- 'INVALID_ARGUMENT: Check the provided chat context or threshold value'
- 'FUNCTION_NOT_FOUND: Ensure the function name is correct'
- 'TIMEOUT: The function call took too long to respond'
- 'INVALID_AGENT_ID: Check if the agent ID provided is correct'
- 'UNAUTHORIZED: Ensure proper authentication is set up'
- '401 Unauthorized: Recheck JWT token format'
- '400 Bad Request: Check the message format'
- '404 Not Found: Ensure the agent ID is correct'
- '401 Unauthorized: Recheck API_KEY or SECRET.'
- '400 Bad Request: Check payload for mandatory fields.'
- '401 Unauthorized: Token is invalid or missing'
- Livestream started successfully
- Livestream ended successfully
- '401 Unauthorized: Recheck your token.'
- '401 Unauthorized: Recheck JWT token'
- Participant Recording deleted successfully.
- Room recording deleted successfully
- '401 Unauthorized: Check JWT token'
- '401 Unauthorized: Check if the token is valid'
- '401 Unauthorized: Check token validity or permissions'
auth_info:
  mentioned_objects:
  - VIDEOSDK_AUTH_TOKEN
  - OPENAI_API_KEY
  - DEEPGRAM_API_KEY
  - ELEVENLABS_API_KEY
  - Agent
  - AgentSession
  - JobContext
  - RoomOptions
  - CascadingPipeline
  - ConversationFlow
  - STT
  - LLM
  - TTS
  - VAD
  - EOU
  - ChatRole
  - OauthToken
  - AuthProvider
  - NamedCredential
  - auth_token
  - agent_id
  - worker_type
  - JobRequest
  - WorkerMessage
  - AuthToken
  - APIKey
  - JobAssignment
  - Connection
  - ChatContext
  - WorkerPermissions
  - YOUR_TOKEN_WITHOUT_ANY_PREFIX
client:
  base_url: https://api.videosdk.live
  auth:
    type: oauth2
    location: header
    header_name: Authorization
  headers:
    Content-Type: application/json
source_metadata: null
