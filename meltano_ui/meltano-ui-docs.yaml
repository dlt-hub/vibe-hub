resources:
- name: extractors
  endpoint:
    path: /extractors
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: tap-gitlab
  endpoint:
    path: /services/data/vXX.X/sobjects/tap-gitlab
    method: GET
    data_selector: records
    params: {}
- name: tap-covid-19
  endpoint:
    path: /services/data/vXX.X/sobjects/tap-covid-19
    method: GET
    data_selector: records
    params: {}
- name: commits
  endpoint:
    path: /repos/{owner}/{repo}/commits
    method: GET
    data_selector: commits
- name: commits
  endpoint:
    path: /repos/sbalnojan/meltano-lightdash/commits
    method: GET
    data_selector: records
- name: commits
  endpoint:
    path: /commits
    method: GET
    data_selector: records
    params: {}
- name: commits
  endpoint:
    path: /commits
    method: GET
- name: authors
  endpoint:
    path: /authors
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: commits
  endpoint:
    path: /commits
    method: GET
    data_selector: records
    params: {}
- name: commits
  endpoint:
    method: GET
- name: authors
  endpoint:
    method: GET
- name: tap-ga--client-foo
  endpoint: {}
- name: tap-ga--client-bar
  endpoint: {}
- name: tap-ga--client-foo--project-baz
  endpoint: {}
- name: extractors
  endpoint:
    path: /add/extractors
    method: POST
    data_selector: plugins.extractors
    params: {}
- name: loaders
  endpoint:
    path: /add/loaders
    method: POST
    data_selector: plugins.loaders
    params: {}
- name: utilities
  endpoint:
    path: /add/utilities
    method: POST
    data_selector: plugins.utilities
    params: {}
- name: tap-ga--client-foo
  endpoint:
    path: /tap-ga--client-foo
    method: GET
- name: tap-ga--client-bar
  endpoint:
    path: /tap-ga--client-bar
    method: GET
- name: tap-ga--client-foo--project-baz
  endpoint:
    path: /tap-ga--client-foo--project-baz
    method: GET
- name: tap-gitlab
  endpoint:
    path: /extractors/tap-gitlab
    method: GET
- name: target-postgres
  endpoint:
    path: /loaders/target-postgres
    method: GET
- name: dbt-snowflake
  endpoint:
    path: /utilities/dbt-snowflake
    method: GET
- name: airflow
  endpoint:
    path: /utilities/airflow
    method: GET
- name: tap-ga--client-foo
  endpoint:
    path: /tap-ga--client-foo
    method: GET
- name: tap-ga--client-bar
  endpoint:
    path: /tap-ga--client-bar
    method: GET
- name: tap-ga--client-foo--project-baz
  endpoint:
    path: /tap-ga--client-foo--project-baz
    method: GET
- name: config
  endpoint:
    path: /config
    method: POST
    data_selector: settings
- name: commits
  endpoint:
    path: /transform/models/tap_gitlab/commits
    method: GET
- name: tags
  endpoint:
    path: /transform/models/tap_gitlab/tags
    method: GET
- name: extractor
  endpoint:
    path: /add-an-extractor-to-pull-data-from-a-source
    method: GET
- name: loader
  endpoint:
    path: /add-a-loader-to-send-data-to-a-destination
    method: GET
- name: transformer
  endpoint:
    path: /transform-loaded-data-for-analysis
    method: GET
- name: extractor
  endpoint:
    path: /services/data/vXX.X/sobjects/Extractor
    method: GET
    data_selector: records
    params: {}
- name: commits
  endpoint:
    path: /transform/models/tap_gitlab/commits
    method: GET
    data_selector: records
    params: {}
- name: tags
  endpoint:
    path: /transform/models/tap_gitlab/tags
    method: GET
    data_selector: records
    params: {}
- name: commits
  endpoint:
    params: {}
- name: tags
  endpoint:
    params: {}
- name: tap-gitlab
  endpoint:
    path: /services/data/vXX.X/sobjects/TapGitlab
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: commits
  endpoint:
    params: {}
- name: tags
  endpoint:
    params: {}
- name: commits
  endpoint:
    path: /projects/{project_id}/repository/commits
    method: GET
    data_selector: commits
- name: tags
  endpoint:
    path: /projects/{project_id}/repository/tags
    method: GET
    data_selector: tags
- name: commits
  endpoint:
    params: {}
- name: tags
  endpoint:
    params: {}
- name: commits
  endpoint:
    params:
      projects: meltano/meltano meltano/tap-gitlab
      start_date: '2024-03-01T00:00:00Z'
- name: tags
  endpoint: {}
- name: entity
  endpoint:
    params:
      replication-method: FULL_TABLE
- name: commits
  endpoint:
    path: /transform/models/tap_gitlab/commits
    method: GET
    data_selector: records
- name: tags
  endpoint:
    path: /transform/models/tap_gitlab/tags
    method: GET
    data_selector: records
- name: commits
  endpoint:
    params:
      projects: meltano/meltano meltano/tap-gitlab
      start_date: '2024-03-01T00:00:00Z'
- name: tags
  endpoint:
    params: {}
- name: commits
  endpoint:
    method: GET
- name: tags
  endpoint:
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: commits
  endpoint:
    params: {}
- name: tags
  endpoint:
    params: {}
- name: commits
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: tags
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: commits
  endpoint:
    params: {}
- name: tags
  endpoint:
    params: {}
- name: commits
  endpoint:
    path: /commits
    method: GET
    data_selector: records
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: records
- name: commits
  endpoint:
    params: {}
- name: tags
  endpoint:
    params: {}
- name: commits
  endpoint:
    path: /transform/models/tap_gitlab/commits_last_7d.sql
    method: GET
    data_selector: records
    params: {}
- name: tags
  endpoint:
    path: /transform/models/tap_gitlab/source.yml
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: commits
  endpoint:
    params: {}
- name: tags
  endpoint:
    params: {}
- name: commits
  endpoint:
    path: /services/data/vXX.X/sobjects/Commits
    method: GET
    data_selector: records
- name: tags
  endpoint:
    path: /services/data/vXX.X/sobjects/Tags
    method: GET
    data_selector: records
- name: commits
  endpoint:
    path: /transform/models/tap_gitlab/commits
    method: GET
    data_selector: records
- name: tags
  endpoint:
    path: /transform/models/tap_gitlab/tags
    method: GET
    data_selector: records
- name: commits
  endpoint:
    path: /transform/models/tap_gitlab/commits_last_7d.sql
    method: POST
    data_selector: records
    params: {}
- name: tags
  endpoint:
    path: /transform/models/tap_gitlab/source.yml
    method: GET
    data_selector: sources
    params: {}
- name: dbt-snowflake
  endpoint:
    path: /transform/models/
    method: GET
    data_selector: records
- name: commits
  endpoint:
    path: /commits
    method: GET
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: tap_gitlab
  endpoint:
    path: /transform/models/tap_gitlab
    method: GET
- name: tap_gitlab
  endpoint:
    path: /transform/models/tap_gitlab/source.yml
    method: GET
    data_selector: tables
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: schedules
- name: dags
  endpoint:
    path: /dags
    method: GET
    data_selector: dags
- name: load_examples
  endpoint:
    path: /superset/load_examples
    method: POST
- name: create_admin
  endpoint:
    path: /superset/create-admin
    method: POST
- name: ui
  endpoint:
    path: /superset/ui
    method: GET
- name: tap_gitlab
  endpoint:
    path: /transform/models/tap_gitlab/
    method: GET
- name: daily-gitlab-load
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: logs
  endpoint:
    path: /meltano/logs/
    method: GET
- name: elt
  endpoint:
    path: /meltano/elt/
    method: POST
- name: load_examples
  endpoint:
    path: /superset/load_examples
    method: POST
- name: create_admin
  endpoint:
    path: /superset/create-admin
    method: POST
- name: ui
  endpoint:
    path: /superset/ui
    method: GET
- name: airbyte_source
  endpoint:
    path: /v1/sources
    method: GET
    data_selector: sources
- name: airbyte_source
  endpoint:
    path: /api/v1/sources
    method: POST
    data_selector: source
- name: dbt
  endpoint:
    path: /transform/dbt
    method: GET
    data_selector: records
- name: adapter-specific
  endpoint:
    path: /transform/profiles/<adapter name>/profiles.yml
    method: GET
    data_selector: records
- name: my_state_manager_username
  endpoint:
    path: my_state_manager.backend:USERNAME
- name: my_state_manager_password
  endpoint:
    path: my_state_manager.backend:PASSWORD
- name: msm
  endpoint:
    path: my_state_manager.backend:MyStateManager
- name: dbt_project
  endpoint:
    path: /transform
    method: GET
    data_selector: files
- name: extractors
  endpoint:
    path: /config/test/extractor
    method: GET
- name: loaders
  endpoint:
    path: /config/test/loader
    method: GET
- name: extractor
  endpoint:
    path: meltano config test tap-gitlab
    method: GET
- name: loader
  endpoint:
    path: meltano config test target-postgres
    method: GET
- name: loader_specific
  endpoint:
    path: meltano config test --plugin-type=loader target-jsonl
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /services/data/vXX.X/sobjects/Projects
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: schedules
    params: {}
- name: jobs
  endpoint:
    path: /jobs
    method: GET
    data_selector: jobs
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: jobs
  endpoint:
    path: /jobs
    method: GET
    data_selector: records
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
    params: {}
- name: commits
  endpoint:
    path: /commits
    method: GET
    data_selector: commits
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: state
  endpoint:
    path: /state/get
    method: GET
- name: projects
  endpoint:
    path: /api/v4/projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: state_ids
  endpoint:
    path: /state_ids
    method: GET
    data_selector: state_ids
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: records
- name: commits
  endpoint:
    path: /commits
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: state
  endpoint:
    path: /state
    method: GET
- name: extractors
  endpoint:
    path: /config/extractors
    method: GET
    data_selector: extractors
- name: loaders
  endpoint:
    path: /config/loaders
    method: GET
    data_selector: loaders
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: plugin
  endpoint:
    path: /config/list/<plugin>
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: state
  endpoint:
    path: /state/merge
    method: POST
- name: gitlab-to-postgres
  endpoint:
    params: {}
- name: gitlab-sync
  endpoint:
    params: {}
- name: gitlab-to-jsonl
  endpoint:
    params: {}
- name: gitlab-to-csv
  endpoint:
    params: {}
- name: tags
  endpoint:
    path: tags
    method: GET
- name: commits
  endpoint:
    path: commits
    method: GET
- name: users
  endpoint:
    path: users
    method: GET
- name: state_id
  endpoint:
    path: /state_ids
    method: GET
    data_selector: state_ids
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: commits
  endpoint:
    path: /commits
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: state_merge
  endpoint:
    path: /state/merge
    method: POST
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: tags
  endpoint:
    params:
      include: '*'
- name: commits
  endpoint:
    params:
      include:
      - id
      - project_id
      - created_at
      - author_name
      - message
- name: users
  endpoint:
    params:
      include:
      - address
      - address.city
      - address.geo.lat
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: project_readonly
  endpoint:
    params:
      incremental: updated_at
- name: hub_api_root
  endpoint:
    params: {}
- name: hub_url
  endpoint:
    params: {}
- name: hub_url_auth
  endpoint:
    params: {}
- name: auto_install
  endpoint:
    params: {}
- name: cli.log_level
  endpoint:
    params: {}
- name: cli.log_format
  endpoint:
    params: {}
- name: cli.log_config
  endpoint:
    params: {}
- name: project_readonly
  endpoint:
    path: /set
    method: POST
    data_selector: project_readonly
- name: hub_api_root
  endpoint:
    path: /set
    method: POST
    data_selector: hub_api_root
- name: hub_url
  endpoint:
    path: /set
    method: POST
    data_selector: hub_url
- name: hub_url_auth
  endpoint:
    path: /set
    method: POST
    data_selector: hub_url_auth
- name: auto_install
  endpoint:
    path: /set
    method: POST
    data_selector: auto_install
- name: cli.log_level
  endpoint:
    path: /set
    method: POST
    data_selector: cli.log_level
- name: cli.log_format
  endpoint:
    path: /set
    method: POST
    data_selector: cli.log_format
- name: cli.log_config
  endpoint:
    path: /set
    method: POST
    data_selector: cli.log_config
- name: state_backend
  endpoint:
    path: /state_backend
    method: GET
    data_selector: records
    params: {}
- name: state_backend
  endpoint:
    path: /state_backend
    method: GET
    data_selector: state
- name: runs
  endpoint:
    path: /runs
    method: GET
    data_selector: records
- name: plugin_settings
  endpoint:
    path: /plugin_settings
    method: GET
    data_selector: records
- name: commits
  endpoint:
    path: /commits
    method: GET
    data_selector: records
- name: issues
  endpoint:
    path: /issues
    method: GET
    data_selector: records
- name: jobs
  endpoint:
    path: /meltano/core/v2/envs/prod/jobs/tap-gitlab-target-jsonl/runs
    method: GET
    data_selector: '[the runs]'
- name: run
  endpoint:
    path: /meltano/core/v2/envs/prod/jobs/tap-gitlab-target-jsonl/runs/{run_id}
    method: GET
    data_selector: '{A run}'
- name: run_custom
  endpoint:
    path: /meltano/core/v2/envs/prod/jobs:run
    method: POST
    data_selector: '{The run, with run_id , and "inprogress" status field}'
- name: state_set
  endpoint:
    path: /meltano/core/v2/envs/stage/jobs/tap-gh-to-target-sql/state
    method: PUT
    data_selector: '{"The new state after update"}'
- name: state_copy
  endpoint:
    path: /meltano/core/v2/envs/stage/jobs/tap-gh-to-target-sql/state/copy
    method: POST
    data_selector: '{"ref to the dest"}'
- name: commits
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: issues
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: project_members
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: logs
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: projects
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: job
  endpoint:
    path: /job
    method: GET
- name: job
  endpoint:
    path: /jobs
    method: GET
    data_selector: records
- name: jobs_runs
  endpoint:
    path: meltano/core/v2/envs/prod/jobs/tap-gitlab-target-jsonl/runs
    method: GET
    data_selector: runs
- name: specific_run
  endpoint:
    path: meltano/core/v2/envs/prod/jobs/tap-gitlab-target-jsonl/runs/{run_id}
    method: GET
    data_selector: run
- name: run_job
  endpoint:
    path: meltano/core/v2/envs/prod/jobs:run
    method: POST
    data_selector: run
- name: set_state
  endpoint:
    path: meltano/core/v2/envs/stage/jobs/tap-gh-to-target-sql/state
    method: PUT
    data_selector: new_state
- name: copy_state
  endpoint:
    path: meltano/core/v2/envs/stage/jobs/tap-gh-to-target-sql/state/copy
    method: POST
    data_selector: ref_to_dest
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Meltano UI is deprecated. Please see our troubleshooting page for more information.
- Basic functionality around managing and configuring plugins and monitoring pipelines
  is available.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Note that exclusion takes precedence over inclusion.
- This information is also detailed in the CLI documentation for the `--exclude` parameter.
- 'If the data source you''ll be pulling data from is a database, your extractor will
  likely require one final setup step: setting a replication method for each selected
  entity (table).'
- Extractors for Software as a Service (SaaS) APIs typically hard-code the appropriate
  replication method for each supported entity.
- Most database extractors support two or more replication methods.
- If you've set a table's replication-method to INCREMENTAL, also choose a Replication
  Key.
- Sometimes extractors and loaders expect that certain dependencies are already installed.
- If you're using Docker, don't forget to mount the project directory, and ensure
  that interactive mode is enabled.
- If you've used this Singer target before without Meltano, you may already have a
  config file.
- Note that exclusion takes precedence over inclusion. If an attribute is excluded,
  there is no way to include it back without removing the exclusion pattern. This
  information is also detailed in the CLI documentation for the `--exclude` parameter.
- This information is also detailed in the CLI documentation for the --exclude parameter.
- Use meltano config <plugin> set to set the desired replication-method metadata.
- Anonymous usage stats are enabled by default.
- As long as the scheduler is running, your scheduled pipelines will run at the appropriate
  times.
- Optionally, verify that a DAG was automatically created for each scheduled pipeline
  by starting the Airflow web interface.
- Create an Admin user called melty for logging in.
- 'If the data source you''ll be pulling data from is a database, your extractor will
  likely require one final setup step: setting a replication method for each selected
  entity.'
- Exclusion takes precedence over inclusion. If an attribute is excluded, there is
  no way to include it back without removing the exclusion pattern.
- To help you achieve data transformation, Meltano supports transformation using dbt.
- dbt plugins are adapter specific so you should install the plugin that matches your
  warehouse.
- Supporting optional headers in OAuth requests
- Publishing the supported python version in `--about`
- Supporting union schemas which is useful for connectors that accept mutually exclusive
  settings (e.g. OAuth vs API key auth)
- Validation of a parsed/transformed record against the SCHEMA message
- Add Apache 2.0 as an optional license when developing a connector
- Requires a personal access token to authenticate with GitHub
- Create an Admin user called `melty` for logging in.
- The web interface and DAG overview will be available at <http://localhost:8080>.
- The extraction process outputs data into a jsonl file.
- Once your raw data has arrived in your data warehouse, its schema will likely need
  to be transformed to be more appropriate for analysis.
- The organization of your dbt project is up to you, but the Meltano convention is
  to name the model directory after the extractor using snake_case (i.e. tap_gitlab).
- Installing dbt-postgres may require building `psycopg2` from source.
- 'If you encounter an error related to dbt not being to clean files outside of the
  project directory, you can add the following to your `meltano.yml` file: version:
  1 env: DBT_CLEAN_PROJECT_FILES_ONLY: "false".'
- Performing full refresh, ignoring state left behind by any previous runs.
- Meltano is built for and by its community, and we welcome your contributions to
  the project.
- Windows is not fully supported yet so some features like the ELT command may not
  work yet.
- Keep doing this until `meltano config <name> list` shows a valid configuration for
  the new variant, without any of the old variant's settings remaining as [custom
  settings](/guide/configuration#custom-settings).
- Configuration that is not environment-specific or sensitive should be stored in
  meltano.yml and checked into version control.
- Sensitive values like passwords and tokens are most appropriately stored in the
  environment, .env, or the system database.
- If you'd like to specify (or override) the values of certain settings at runtime,
  on a per-pipeline basis, you can set them in the meltano run execution environment
  using environment variables.
- This lets you use the same extractors and loaders in multiple pipelines, configured
  differently each time.
- Different runners and execution/orchestration platforms will have their own way
  of specifying environment variables along with a command invocation.
- Meltano lets you easily extract and load data from and to databases, SaaS APIs,
  and file formats using primarily Singer taps and targets.
- Meltano manages your tap and target configuration for you.
- Incremental replication state is handled automatically for meltano run.
- Extractors are often capable of extracting many more streams and properties than
  your use case may require.
- You can set configuration values at runtime using environment variables.
- Exclusion takes precedence over inclusion.
- Anonymous usage stats are enabled by default
- Note that exclusion takes precedence over inclusion. If an attribute is excluded,
  there is no way to include it back without removing the exclusion pattern.
- The web interface and DAG overview will be available at http://localhost:8080.
- Uses dbt for data transformation.
- Mappers do not support aggregation. To aggregate data, first land the data in your
  destination and then apply aggregations using a transformation plugin like dbt.
- Mappers do not support joins between streams. To join data, first land the data
  and then perform joins using a transformation tool like dbt.
- Mappers do not support external API lookups.
- Airflow will now run your pipelines on a schedule as long as the scheduler is running.
- Mappers do not support external API lookups. To add external API lookups, you can
  either (a) land all your data and then joins using a transformation plugin like
  dbt, or (b) create a custom mapper plugin with inline lookup logic.
- Superset does not ship bundled with connectivity to databases, except for SQLite.
- You need to install required packages for the metadata database.
- Uses the convention that the transform has the same namespace as the extractor in
  its pipeline, except with snake_case (tap-gitlab -> tap_gitlab).
- Meltano stores various types of metadata in a project-specific system database.
- It is recommended to use a PostgreSQL system database in production.
- You need to install required packages for the database you want to use.
- Running Airbyte sources with Meltano brings benefits like stream maps, environment
  configurations, and version control.
- Meltano Cloud has been shut down in favor of Arch.
- Log parsing adds minimal overhead
- 'Fallback behavior: Preserves original performance for unparseable logs'
- Airbyte destinations are not supported with tap-airbyte-wrapper.
- This document is still a work in progress. Expect further changes, coming soon.
- 'Parsing performance: ~381K logs/second'
- 'Memory usage: Minimal additional allocation'
- Migration tasks include moving to adapter-specific dbt Transformer.
- Existing profiles.yml will remain in use by the existing dbt Transformer plugin.
- Change this to false if you wish to debug and add breakpoints outside of your code
  e.g. the singer-sdk package
- Singer takes an 'at least once' approach to replication, so if you're encountering
  this, it might be intended behavior.
- In debug mode, Meltano will log additional information about the environment and
  arguments used to invoke your components.
- Meltano uses some suggested patterns for organizing your dbt project so it integrates
  well with core features of Meltano.
- Meltano provides a command line interface (CLI) that makes it easy to manage your
  project, plugins, and EL(T) pipelines.
- By default, plugins that use Python use the version of Python that was used to run
  Meltano.
- Test data will be written to your target system.
- The test creates a table/collection called meltano_test_stream with one test record.
- Unlike other commands like meltano run and meltano invoke, the meltano config command
  ignores any configured default environment.
- The compile command is currently in beta and subject to change without corresponding
  semantic version updates.
- By default, values for sensitive settings are redacted from the output of meltano
  compile commands and replaced with (redacted).
- Values are parsed as JSON, and interpreted as simple strings when invalid
- By default, values for sensitive settings are redacted from the output of `meltano
  config` commands and replaced with `(redacted)`.
- The test helps identify configuration or credential issues before setting up full
  data pipelines.
- By default, values for sensitive settings are redacted from the output of meltano
  config commands and replaced with (redacted).
- Sensitive values are redacted from the output of meltano config commands
- Incremental state has been updated
- Extract & load complete!
- Anonymous usage statistics are enabled by default, unless the --no-usage-stats flag
  is provided.
- The `meltano config test` command validates a plugin's configuration by running
  a connectivity test.
- You may need to manually clean up this test data after the test completes.
- Dumping the config and catalog of a plugin may reveal sensitive values in your terminal.
- Default behavior is to attempt to install the plugin before invoking it.
- Meltano includes an interactive configuration mode.
- run will attempt to run incrementally and save state by default.
- if no environment is active, meltano run does not generate a State ID and it does
  not track state.
- Incremental state has been updated at 2020-08-05 21:30:26.669170.
- Plugin type is automatically inferred
- If you have an active environment defined, a State ID is autogenerated for each
  extractor/loader pair.
- If no environment is active, meltano run does not generate a State ID and it does
  not track state.
- Tasks should be of the same format as arguments supplied to the meltano run command.
- An orchestrator plugin is required to use meltano schedule
- If you have an active environment defined, a State ID is autogenerated for each
  extractor/loader pair and used to store and look up the incremental replication
  state in the system database.
- Note that if no environment is active, 'meltano run' does not generate a State ID
  and it does not track state.
- Sensitive values are redacted by default in config commands.
- Incremental state is tracked using project IDs.
- These selections define what properties are available.
- Exclusion takes precedence over inclusion. If an attribute is excluded, there is
  no way to include it back without removing the exclusion pattern first.
- The CLI options are available for the top-level meltano command.
- Values for sensitive settings are redacted in the output of meltano config commands.
- Note that if no environment is active, meltano run does not generate a State ID
  and it does not track state.
- Incremental state has been updated.
- 'Four top level flags are provided to alter behavior: --dry-run, --no-state-update,
  --full-refresh, --force.'
- 'The interval argument can be a cron expression or one of the following presets:
  @hourly, @daily, @weekly, @monthly, @yearly, or one of @manual, @once, or @none.'
- Test data will be written to your target system. The test creates a table/collection
  called `meltano_test_stream` with one test record.
- Use 'meltano state copy' command to copy state between IDs
- Sensitive values are redacted by default in output.
- The only required argument is the new plugin's unique name.
- Meltano automatically detects plugin types based on naming conventions.
- Meltano is open source software thats free for anyone to use.
- The run command always requires a Meltano Environment to be set.
- Enable this setting to indicate that your Meltano project is deployed as read-only,
  and to block all modifications to project files through the CLI in this environment.
- The `test` command can accept the `--environment` flag to target a specific Meltano
  Environment.
- Meltano supports a number of settings that allow you to fine tune its behavior.
- Configuration that is not environment-specific or sensitive should be stored in
  your meltano.yml project file.
- Meltano is open source software thats free for anyone to use. The best thing a user
  could do to give back to the community, aside from contributing code or reporting
  issues, is contribute anonymous usage stats to allow the maintainers to understand
  how features are being utilized ultimately helping the community build a better
  product.
- Whether to automatically install any required plugins on command invocation.
- Project settings can be configured through the CLI using meltano config.
- The system database is environment-specific.
- State backends are only available in Meltano version 2.10+.
- Ensure you have pipx installed by reviewing the Install pipx instructions.
- Meltano doesn't currently support auto-generating migration from the models definition.
- This guide provides guidance on how to work with the Meltano CLI.
- The `meltano` CLI serves as the primary user interface of Meltano.
- Any pip package that exposes an executable can be added to your project as a custom
  utility.
- All new custom exceptions must inherit from `meltano.core.error.MeltanoError` or
  one of its subclasses.
- Pull requests should be named according to the conventional commit syntax.
- This document is somewhat aspirational and a work in progress. Portions of the CLI
  may violate the design and style guidelines, but we aim to update the CLI overtime
  to ensure that it is as consistent as possible.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your token and permissions'
- '404 Not Found: Check repository name and owner'
- --dry-run just parse the invocation, validate it, and explain what would be executed.
  Does not execute anything.
- --no-state-update will disable state saving for this invocation.
- --full-refresh will force a full refresh and ignore the prior state.
- --force will force a job run even if a conflicting job with the same generated ID
  is in progress.
- --state-id-suffix defines a custom suffix to generate a state ID with for each EL
  pair.
- --state-strategy will control how state is merged with that of previous runs. Valid
  values are auto, merge, and overwrite.
- --timeout will set a maximum duration (in seconds) for the pipeline run.
- --state-strategy will control how state is merged with that of previous runs. Valid
  values are 'auto', 'merge', and 'overwrite'. The default is 'auto'.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - personal access token
  - StateStoreManager
  - MeltanoState
client:
  base_url: https://hub.meltano.com
  headers:
    Accept: application/json
source_metadata: null
