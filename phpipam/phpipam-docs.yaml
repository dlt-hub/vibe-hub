resources:
- name: sections
  endpoint:
    path: /api/my_app/sections/
    method: GET
    data_selector: sections
- name: subnets
  endpoint:
    path: /api/my_app/subnets/
    method: GET
    data_selector: subnets
- name: addresses
  endpoint:
    path: /api/my_app/addresses/
    method: GET
    data_selector: addresses
- name: vlans
  endpoint:
    path: /api/my_app/vlan/
    method: GET
    data_selector: vlans
- name: devices
  endpoint:
    path: /api/my_app/devices/
    method: GET
    data_selector: devices
- name: vrf
  endpoint:
    path: /api/my_app/vrf/
    method: GET
    data_selector: vrf
- name: sections
  endpoint:
    path: /api/my_app/sections/
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/my_app/user/
    method: POST
    data_selector: data
    params: {}
- name: subnets
  endpoint:
    path: /api/my_app/subnets/
    method: GET
    data_selector: subnets
    params: {}
- name: addresses
  endpoint:
    path: /api/my_app/addresses/
    method: GET
    data_selector: addresses
    params: {}
- name: vlan
  endpoint:
    path: /api/my_app/vlan/
    method: GET
    data_selector: vlans
    params: {}
- name: vrf
  endpoint:
    path: /api/my_app/vrf/
    method: GET
    data_selector: vrfs
    params: {}
- name: devices
  endpoint:
    path: /api/my_app/devices/
    method: GET
    data_selector: devices
    params: {}
- name: prefix
  endpoint:
    path: /prefix/{customer_type}/
    method: GET
- name: search
  endpoint:
    path: /search/{search_string}/
    method: GET
- name: sections
  endpoint:
    path: sections
    method: GET
- name: subnet
  endpoint:
    path: /subnets
    method: GET
    data_selector: data
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: data
- name: database
  endpoint:
    path: /db/SCHEMA.sql
    method: IMPORT
    data_selector: schema
    params: {}
- name: user_expires
  endpoint:
    path: /user/expires/
    method: GET
- name: user_token_expires
  endpoint:
    path: /user/token-expires/
    method: GET
- name: user_users
  endpoint:
    path: /user/users/
    method: GET
- name: user_admins
  endpoint:
    path: /user/admins/
    method: GET
- name: addresses_first_free
  endpoint:
    path: /addresses/first_free/{subnetId}/
    method: GET
- name: addresses_by_ip
  endpoint:
    path: /addresses/{ip}/{subnetId}/
    method: GET
- name: addresses_search
  endpoint:
    path: /addresses/search/{hostname}/
    method: GET
- name: addresses_delete
  endpoint:
    path: /addresses/{ip}/{subnetId}/
    method: DELETE
- name: addresses_create
  endpoint:
    path: /addresses/first_free/{subnetId}/
    method: POST
- name: subnets_by_id
  endpoint:
    path: /subnets/{id}/addresses/{ip}/
    method: GET
- name: subnets_first_free
  endpoint:
    path: /subnets/{id}/first_free/
    method: GET
- name: subnets_first_subnet
  endpoint:
    path: /subnets/{id}/first_subnet/{mask}/
    method: GET
- name: subnets_all_subnets
  endpoint:
    path: /subnets/{id}/all_subnets/{mask}/
    method: GET
- name: subnets_create_first_subnet
  endpoint:
    path: /subnets/{id}/first_subnet/{mask}/
    method: POST
- name: subnets_delete_permissions
  endpoint:
    path: /subnets/{id}/permissions/
    method: DELETE
- name: subnets_patch_permissions
  endpoint:
    path: /subnets/{id}/permissions/
    method: PATCH
- name: sections
  endpoint:
    path: /api/my_app/sections/
    method: GET
    data_selector: data
- name: subnets
  endpoint:
    path: /api/my_app/subnets/
    method: GET
    data_selector: data
- name: prefixes
  endpoint:
    path: /prefix/{customer_type}/
    method: GET
    data_selector: data
    params: {}
- name: search
  endpoint:
    path: /search/{search_string}/
    method: GET
    data_selector: data
    params:
      addresses: '1'
      subnets: '1'
      vlan: '0'
      vrf: '0'
- name: sections
  endpoint:
    path: /api/my_app/sections/
    method: GET
- name: subnets
  endpoint:
    path: /api/my_app/subnets/
    method: GET
- name: addresses
  endpoint:
    path: /api/my_app/addresses/
    method: GET
- name: vlans
  endpoint:
    path: /api/my_app/vlans/
    method: GET
- name: l2domains
  endpoint:
    path: /api/my_app/l2domains/
    method: GET
- name: vrfs
  endpoint:
    path: /api/my_app/vrfs/
    method: GET
- name: tools
  endpoint:
    path: /api/my_app/tools/
    method: GET
- name: prefix
  endpoint:
    path: /api/my_app/prefix/
    method: GET
- name: prefix
  endpoint:
    path: /prefix/{customer_type}/
    method: GET
    data_selector: data
    params: {}
- name: search
  endpoint:
    path: /search/{search_string}/
    method: GET
    data_selector: data
    params:
      addresses: '1'
      subnets: '1'
      vlan: '0'
      vrf: '0'
notes:
- SSL security is highly recommended.
- 'Default subnet selectors: $custom_field_name = “customer_type”; $custom_field_orderby
  = “subnet”; $custom_field_order_direction = “asc”;'
- 'Default address subnet selectors: $custom_field_name_addr = “customer_type”; $custom_field_orderby_addr=
  “subnet”; $custom_field_order_direction_addr = “asc”;'
- Make daily backups of your database files via cron.
- Backup your SQL database before upgrading
- Database part is separated from code
- Uses OAuth2 with refresh token — requires setup of connected app in phpipam
- PHP >= 7.2 is now required, phpipam will not work on older versions.
- PHP >= 5.4 is now required, phpipam will not work on older versions anymore
- 64-bit systems are now required, phpipam will not work on 32-bit systems
- SSL security is highly recommended
- Dynamic authentication is considered more secure as token is dynamically generated
  on each login
- Authentication is required for NONE and SSL security
errors:
- '400 Bad Request: invalid controller'
- 'code: 201 - Subnet created'
- 'code: 200 - Success'
- '200 OK: Successful request'
- '401 Unauthorized: Invalid username or password'
- '201 Created: Resource has been created'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Fix Bandwidth calculator'
- '400 Bad Request: Check logical circuits add/delete errors'
- '401 Unauthorized: Recheck API token validity'
- '200 OK: success response with data'
- '401 Unauthorized: token must be included in each request'
auth_info:
  mentioned_objects:
  - phpipam-token
  - OauthToken
  - AuthProvider
  - NamedCredential
  - token
client:
  base_url: /api/my_app
  paginator:
    type: cursor
source_metadata: null
