resources:
- name: resumes
  endpoint:
    path: /resumes
    method: GET
    data_selector: results
    params:
      offset: '0'
      limit: '20'
- name: documents
  endpoint:
    path: /v3/documents
    method: POST
    data_selector: records
- name: document_types
  endpoint:
    path: /v3/document_types
    method: GET
    data_selector: records
- name: workspaces
  endpoint:
    path: /v3/workspaces
    method: GET
    data_selector: records
- name: document
  endpoint:
    path: /ingest/document
    method: POST
- name: pre_processing
  endpoint:
    path: /configuration/preprocessing
    method: GET
    data_selector: actions
    params: {}
- name: document_classification
  endpoint:
    path: /configuration/classification
    method: GET
    data_selector: documents
- name: redacted_document
  endpoint:
    path: /v3/documents/<DOCUMENT_ID>/redacted
    method: GET
- name: document
  endpoint:
    path: /document
    method: POST
- name: documents
  endpoint:
    path: /v3/documents
    method: POST
    data_selector: null
    params: {}
- name: resthook_subscriptions
  endpoint:
    path: /v3/resthook_subscriptions
    method: POST
    data_selector: id
    params: {}
- name: webhook_subscription
  endpoint:
    path: /resthook/subscription
    method: GET
    data_selector: results
- name: documents
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: data
    params: {}
- name: data_sources
  endpoint:
    path: /data-sources
    method: GET
- name: create_data_source
  endpoint:
    path: /data-sources
    method: POST
- name: replace_data_source
  endpoint:
    path: /data-sources/{id}
    method: PUT
- name: update_data_source
  endpoint:
    path: /data-sources/{id}
    method: PATCH
- name: delete_data_source
  endpoint:
    path: /data-sources/{id}
    method: DELETE
- name: redact_document
  endpoint:
    path: /api/v1/documents/get-redacted-document
    method: GET
- name: resumes
  endpoint:
    path: /v2/resumes
    method: GET
    data_selector: results
    params:
      offset: 0
      limit: 100
- name: upload_resume
  endpoint:
    path: /v2/resumes
    method: POST
- name: resumes
  endpoint:
    path: /v2/resumes
    method: POST
    data_selector: data
- name: resume_parse_results
  endpoint:
    path: /v2/resumes/{identifier}
    method: GET
    data_selector: data
- name: resume_parse_results
  endpoint:
    path: /v2/resumes/{identifier}
    method: GET
- name: delete_resume
  endpoint:
    path: /v2/resumes/{identifier}
    method: DELETE
- name: resume
  endpoint:
    path: /v2/resumes/{identifier}
    method: PATCH
    data_selector: data
- name: resume
  endpoint:
    path: /v2/resumes/{identifier}
    method: PATCH
    data_selector: ResumeData
    params: {}
- name: Update specific mapping
  endpoint:
    path: /v3/mappings/{identifier}
    method: PATCH
    data_selector: identifier
- name: collections
  endpoint:
    path: /collections
    method: GET
- name: collections
  endpoint:
    path: /collections
    method: GET
    data_selector: '[]'
- name: collections
  endpoint:
    path: /v3/collections
    method: POST
    data_selector: object
- name: collections
  endpoint:
    path: /v3/collections
    method: POST
    data_selector: data
    params: {}
- name: specific_collection
  endpoint:
    path: /v3/collections/{identifier}
    method: GET
- name: collections
  endpoint:
    path: /v3/collections/{identifier}
    method: GET
    data_selector: identifier
    params: {}
- name: delete_collection
  endpoint:
    path: /v3/collections/{identifier}
    method: DELETE
- name: collection
  endpoint:
    path: /v3/collections/{identifier}
    method: PATCH
    data_selector: fields
    params: {}
- name: collections
  endpoint:
    path: /v3/collections/{identifier}
    method: PATCH
    data_selector: response
    params: {}
- name: create_data_field
  endpoint:
    path: /v3/collections/{identifier}/create_data_field
    method: POST
    data_selector: data
    params: {}
- name: create_data_field
  endpoint:
    path: /v3/collections/{identifier}/create_data_field
    method: POST
- name: data_field
  endpoint:
    path: /v3/collections/{identifier}/fields/{datapoint_identifier}
    method: GET
    data_selector: default
- name: update_data_field
  endpoint:
    path: /v3/collections/{identifier}/fields/{datapoint_identifier}
    method: PATCH
    data_selector: response
    params: {}
- name: usage_by_collection
  endpoint:
    path: /v3/collections/{identifier}/usage
    method: GET
    data_selector: monthly credits consumption
    params: {}
- name: data_points
  endpoint:
    path: /v3/data_points
    method: GET
    data_selector: records
    params: {}
- name: data_points
  endpoint:
    path: /v3/data_points
    method: POST
    data_selector: identifier
    params: {}
- name: data_point
  endpoint:
    path: /v3/data_points/{identifier}
    method: GET
    data_selector: default
- name: delete_data_point
  endpoint:
    path: /v3/data_points/{identifier}
    method: DELETE
- name: data_point
  endpoint:
    path: /v3/data_points/{identifier}
    method: PATCH
    data_selector: identifier
    params: {}
- name: data_point_choices
  endpoint:
    path: /v3/data_point_choices
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
- name: data_point_choice
  endpoint:
    path: /data_point_choices
    method: POST
    data_selector: id
    params: {}
- name: data_point_choice
  endpoint:
    path: /v3/data_point_choices/{id}
    method: GET
    data_selector: default
- name: data_point_choice
  endpoint:
    path: /v3/data_point_choices/{id}
    method: DELETE
- name: data_point_choice
  endpoint:
    path: /v3/data_point_choices/{id}
    method: PATCH
    data_selector: dataPoint
    params: {}
- name: replace_choices
  endpoint:
    path: /v3/data_point_choices/replace
    method: POST
    data_selector: null
    params: {}
- name: mappings
  endpoint:
    path: /v3/mappings
    method: GET
    data_selector: results
    params:
      limit: '20'
- name: mappings
  endpoint:
    path: /v3/mappings
    method: POST
    data_selector: identifier
- name: specific_mapping
  endpoint:
    path: /v3/mappings/{identifier}
    method: GET
    data_selector: identifier
    params: {}
- name: delete_specific_mapping
  endpoint:
    path: /v3/mappings/{identifier}
    method: DELETE
notes:
- API keys are scoped per user.
- 'Documents can be ingested through multiple channels: Manual Upload, Email Integration,
  Automated via API.'
- Each Workspace will have a unique email address associated with it
- Email addresses can be refreshed for security reasons by pressing the refresh icon
- The API response will include the email address from which the document was received
  from
- An allowlist can be configured so that only documents from approved email addresses/domains
  are processed
- Any emails sent with more than 10 attachments will not be processed by Affinda
- Affinda uses Document Binary Match to detect and reject duplicates.
- Documents with matching fields (e.g the same Invoice Number) will not be rejected
  by enabling Remove Duplicates.
- Validation rules allow automatic checks of extracted data accuracy.
- Default pass/fail messages are created for validation rules.
- Achieving good enough accuracy is not enough for mission-critical document processing.
- The model will replicate what it learns from model memory.
- Assumes webhooks are used to notify your system when a document is ready for the
  next step.
- Each API key is only viewable once when created for security purposes.
- Users can manage API keys effectively via the rotation capabilities offered through
  the web app.
- Webhook payload signing is highly recommended to verify payload integrity.
- Webhook subscriptions can be created, updated, or deleted.
- Each signed URL is valid for 60 minutes.
- Users will see a notification in the Document Validation view when a document may
  benefit from being re-parsed.
- By default, all processing occurs on our Australian server.
- Contact us to use a different region or to enforce region-specific data restrictions.
- 'File as binary data blob. Supported formats: PDF, DOC, DOCX, TXT, RTF, HTML, PNG,
  JPG, TIFF, ODT, XLS, XLSX.'
- Deprecated endpoints are available but should not be used for new integrations.
- Basic authentication using an API key required.
errors:
- '400 Bad Request: Check your query parameters'
- '401 Unauthorized: Recheck API key'
- '403 Forbidden: Ensure you have access to this resource'
- '410 Gone: Webhook subscription is considered ''gone'' and will be automatically
  deleted.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'duplicate_document_error: Document has been rejected due to an existing duplicate
  in the workspace.'
- 'no_text_found: Affinda didn’t find any text on the document.'
- 'insufficent_text_found: Error raised when documents contain no extractable text.'
- 'file_corrupted: The file uploaded to Affinda was corrupted.'
- 'unknown_error: Raised when parsing fails due to internal extraction issues.'
- 'file_too_large: The maximum file size that can be uploaded to Affinda is 20MB.'
- 'document_classification_failed: Document rejected does not match any of the configured
  document types.'
- 'invalid_file_type: Affinda supports a wide range of file formats for document processing.'
- 'no_parsing_credits: You have run out of credits in Affinda.'
- 'parsing_deleted_documents: This error is raised when attempting to reparse a document
  that has already been deleted.'
- 'capacity_exceeded: Affinda’s capacity has been exceeded by requests at that time.'
- 'document_conversion_failed: Affinda converts the uploaded file to a readable PDF
  format before extracting details.'
- 'password_protected: The document you have uploaded to Affinda is password-protected.'
- 'file_not_found: This error is raised when the document has not been preprocessed.'
- 'incorrect_document_type: Raised when an unsupported document type is uploaded to
  a specific Document Type Extractor.'
- 'parse_terminated: Parsing the document you have uploaded has exceeded our document
  timeout limits.'
- 'parsing_failed_timeout: The error raised when documents exceed the timeout limit
  during parsing.'
- 'requires_ocr: Raised when a document requiring OCR encounters issues.'
- '400 Bad Request: Check query parameters'
- '403 Forbidden: Access denied'
- '200'
- '201'
- '400'
- '401'
- '403'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- 400 Bad Request
- 401 Unauthorized
- 403 Forbidden
- 404 Not Found
- '204'
- '201: Created'
- '400 Bad Request: Check your parameters'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Check your API key'
- '200: Success'
- '201: Successfully created a data point.'
- '400: Bad request.'
- '401: Unauthorized.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Check API key'
- '200: Successfully retrieved data point'
- '400 Bad Request: Invalid request parameters'
- '401 Unauthorized: Invalid or missing API key'
- '200: Successful response'
- '400 Bad Request: Check input parameters'
- '401 Unauthorized: Invalid API key'
- '400 Bad Request: Check your request body for required fields'
- '401 Unauthorized: Verify your API key'
- '204: Delete successful, no content returned'
- '400: Bad request'
auth_info:
  mentioned_objects: []
client:
  base_url: https://{region}.affinda.com
  auth:
    type: oauth2
    location: header
    header_name: Authorization
  headers:
    Content-Type: multipart/form-data
source_metadata: null
