resources:
- name: Provider
  endpoint:
    path: /api/python/provider
    method: GET
    data_selector: methods
    params: {}
- name: model
  endpoint:
    path: /api/python/dsl/model
    method: GET
- name: type
  endpoint:
    path: /api/python/dsl/type
    method: GET
- name: property
  endpoint:
    path: /api/python/dsl/property
    method: GET
- name: context
  endpoint:
    path: /api/python/dsl/context
    method: GET
- name: contextselect
  endpoint:
    path: /api/python/dsl/contextselect
    method: GET
- name: producer
  endpoint:
    path: /api/python/dsl/producer
    method: GET
- name: instance
  endpoint:
    path: /api/python/dsl/instance
    method: GET
- name: instanceproperty
  endpoint:
    path: /api/python/dsl/instanceproperty
    method: GET
- name: expression
  endpoint:
    path: /api/python/dsl/expression
    method: GET
- name: potential_backup_suppliers
  endpoint:
    path: /potential_backup_suppliers
    method: CALL
    data_selector: results
- name: rai_admin
  endpoint:
    path: /api/rai/admin
    method: GET
    data_selector: records
- name: rai_developer
  endpoint:
    path: /api/rai/developer
    method: GET
    data_selector: records
- name: connections
  endpoint:
    path: /services/data/vXX.X/sobjects/Connections
    method: GET
    data_selector: records
- name: rai_admin
  endpoint:
    path: /roles/rai_admin
    method: GET
    data_selector: records
- name: rai_developer
  endpoint:
    path: /roles/rai_developer
    method: GET
    data_selector: records
- name: rai_admin
  endpoint:
    path: /manage/user-access
    method: POST
    data_selector: roles
- name: rai_developer
  endpoint:
    path: /manage/user-access
    method: POST
    data_selector: roles
- name: rai_admin
  endpoint:
    path: /manage/user-access
    method: POST
    data_selector: results
    params: {}
- name: rai_developer
  endpoint:
    path: /manage/user-access
    method: POST
    data_selector: results
    params: {}
- name: rai_admin
  endpoint:
    path: /manage/install
    method: GRANT
    data_selector: rai_admin
- name: rai_developer
  endpoint:
    path: /manage/install
    method: GRANT
    data_selector: rai_developer
- name: rai_admin
  endpoint:
    path: /manage/user-access/rai_admin
    method: POST
    data_selector: user_access
    params: {}
- name: rai_developer
  endpoint:
    path: /manage/user-access/rai_developer
    method: POST
    data_selector: user_access
    params: {}
- name: rai_admin
  endpoint:
    path: /manage/user-access
    method: GET
- name: rai_developer
  endpoint:
    path: /manage/user-access
    method: GET
- name: rai_admin
  endpoint:
    path: /grant_role
    method: POST
    data_selector: response
    params: {}
- name: rai_developer
  endpoint:
    path: /create_role
    method: POST
    data_selector: response
    params: {}
- name: SPCS_CONTROL_PLANE
  endpoint:
    path: /api/sql/app/get_service
    method: CALL
    data_selector: '[]'
    params: {}
- name: service_details
  endpoint:
    path: /api/sql/app/get_service
    method: CALL
    data_selector: service
    params: {}
- name: engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: engines
    params: {}
- name: compute_pools
  endpoint:
    path: /api/compute_pools
    method: GET
    data_selector: compute_pools
    params: {}
- name: engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: engines
    params: {}
- name: create_engine
  endpoint:
    path: /api/create_engine
    method: POST
    data_selector: result
    params: {}
- name: delete_engine
  endpoint:
    path: /api/delete_engine
    method: DELETE
    data_selector: result
    params: {}
- name: get_engine
  endpoint:
    path: /api/get_engine
    method: GET
    data_selector: engine
    params: {}
- name: engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: engines
- name: engines
  endpoint:
    path: /api/sql/api/engines
    method: GET
- name: transactions
  endpoint:
    path: /api/sql/api/transactions
    method: GET
- name: engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: engines
    params: {}
- name: engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: engines
    params: {}
- name: engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: records
- name: engines
  endpoint:
    path: /api/sql/api/engines
    method: GET
    data_selector: rows
    params:
      filter:
        STATUS: READY
        SUSPENDS_AT: not null
- name: engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: records
- name: idle_engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: rows
    params:
      STATUS: READY
      SUSPENDS_AT: NOT NULL
- name: compute_pool
  endpoint:
    path: /manage/compute-pools
    method: GET
    data_selector: computePools
    params: {}
- name: engine
  endpoint:
    path: /manage/engines
    method: GET
    data_selector: engines
    params: {}
- name: engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: engines
- name: engines
  endpoint:
    path: /api/sql/api/engines
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /api/sql/api/transactions
    method: GET
    data_selector: records
- name: engines
  endpoint:
    path: /api/sql/api/engines
    method: GET
    data_selector: '*'
- name: transactions
  endpoint:
    path: /api/sql/api/transactions
    method: GET
    data_selector: '*'
- name: engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: engines
- name: engines
  endpoint:
    path: /api/sql/api/engines
    method: GET
    data_selector: '*'
    params: {}
- name: suspend_engine
  endpoint:
    path: /api/sql/api/suspend_engine
    method: CALL
    data_selector: '*'
    params: {}
- name: resume_engine
  endpoint:
    path: /api/sql/api/resume_engine
    method: CALL
    data_selector: '*'
    params: {}
- name: engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: records
    params: {}
- name: engines
  endpoint:
    path: /api/sql/api/engines
    method: GET
- name: transactions
  endpoint:
    path: /api/sql/api/transactions
    method: GET
- name: engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: engines
- name: engine_details
  endpoint:
    path: /api/get_engine
    method: GET
    data_selector: engine_details
- name: engines
  endpoint:
    path: /api/sql/api/engines
    method: GET
- name: transactions
  endpoint:
    path: /api/sql/api/transactions
    method: GET
- name: engines
  endpoint:
    path: /api/engines
    method: GET
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
    data_selector: records
- name: get_transaction
  endpoint:
    path: /api/transactions/get
    method: GET
    data_selector: record
- name: compute_pools
  endpoint:
    path: /manage/compute-pools
    method: GET
- name: engines
  endpoint:
    path: /api/engines
    method: GET
- name: engines
  endpoint:
    path: /api/sql/api/engines
    method: GET
    data_selector: rows
    params:
      STATUS: READY
      SUSPENDS_AT: NOT NULL
- name: transactions
  endpoint:
    path: /api/sql/api/transactions
    method: GET
    data_selector: rows
    params: {}
- name: engines
  endpoint:
    path: /api/sql/api/engines
    method: GET
    data_selector: rows
    params:
      STATUS: READY
      SUSPENDS_AT: NOT NULL
- name: transactions
  endpoint:
    path: /api/sql/api/transactions
    method: GET
    data_selector: transactions
    params:
      ENGINE_NAME: my_engine
- name: engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: engines
- name: engines
  endpoint:
    path: /api/sql/api/engines
    method: GET
    data_selector: rows
- name: transactions
  endpoint:
    path: /api/sql/api/transactions
    method: GET
    data_selector: rows
- name: engines
  endpoint:
    path: /api/engines
    method: GET
    data_selector: records
- name: compute_pools
  endpoint:
    path: /api/compute_pools
    method: GET
    data_selector: records
- name: engines
  endpoint:
    path: /api/sql/api/engines
    method: GET
- name: transactions
  endpoint:
    path: /api/sql/api/transactions
    method: GET
- name: get_transaction
  endpoint:
    path: /api/sql/api/get_transaction
    method: POST
- name: data_stream
  endpoint:
    path: /api/sql/api/create_data_stream
    method: CALL
    data_selector: Datastream created successfully.
    params:
      obj_name: <db>.<schema>.<table_or_view>
      obj_type: TABLE
- name: suspend_data_stream
  endpoint:
    path: /api/sql/api/suspend_data_stream
    method: CALL
    data_selector: Data stream suspended
    params:
      obj_name: <db>.<schema>.<table_or_view>
- name: resume_data_stream
  endpoint:
    path: /api/sql/api/resume_data_stream
    method: CALL
    data_selector: Data stream resumed
    params:
      obj_name: <db>.<schema>.<table_or_view>
- name: data_stream
  endpoint:
    path: /api/sql/api/create_data_stream
    method: CALL
    data_selector: Datastream created successfully.
    params: {}
- name: suspend_data_stream
  endpoint:
    path: /api/sql/api/suspend_data_stream
    method: CALL
    data_selector: Data stream suspended
    params: {}
- name: resume_data_stream
  endpoint:
    path: /api/sql/api/resume_data_stream
    method: CALL
    data_selector: Data stream resumed
    params: {}
- name: delete_data_stream
  endpoint:
    path: /api/sql/api/delete_data_stream
    method: CALL
    data_selector: Data stream deleted successfully.
    params: {}
- name: data_streams
  endpoint:
    path: /api/data_streams
    method: GET
    data_selector: streams
- name: cdc_service
  endpoint:
    path: /api/cdc
    method: GET
    data_selector: cdc_status
    params: {}
- name: app_database
  endpoint:
    path: /manage/data
    method: GET
    data_selector: data
- name: app_warehouse
  endpoint:
    path: /manage/compute-resources
    method: GET
    data_selector: resources
- name: App Database
  endpoint:
    path: /manage/app
    method: GET
    data_selector: data
    params: {}
- name: App Warehouse
  endpoint:
    path: /manage/compute-resources#app-warehouse
    method: GET
    data_selector: data
    params: {}
- name: Serverless tasks
  endpoint:
    path: /manage/compute-resources#serverless-tasks
    method: GET
    data_selector: data
    params: {}
- name: Compute Pools
  endpoint:
    path: /manage/compute-resources#compute-pools
    method: GET
    data_selector: data
    params: {}
- name: CDC Engine
  endpoint:
    path: /manage/compute-resources#cdc-engine
    method: GET
    data_selector: data
    params: {}
- name: User Engines
  endpoint:
    path: /manage/compute-resources#engines
    method: GET
    data_selector: data
    params: {}
- name: engine_credit_hours
  endpoint:
    path: /relationalai/consumption/engine_credit_hours
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /relationalai/api/transactions
    method: GET
    data_selector: records
- name: engine_upgrade_schedule
  endpoint:
    path: /api/sql/app/schedule_upgrade
    method: CALL
    data_selector: ''
    params: {}
- name: view_current_upgrade_schedule
  endpoint:
    path: /api/sql/app/upgrade_schedule_status
    method: CALL
    data_selector: ''
    params: {}
- name: notebook
  endpoint:
    path: /create/notebook
    method: POST
    data_selector: notebooks
    params: {}
- name: Example
  endpoint:
    path: /
    method: CONNECT
    data_selector: connection
    params: {}
- name: default
  endpoint:
    path: /services/data/snowflake
    method: GET
    data_selector: records
- name: default
  endpoint:
    path: /raiconfig.toml
    method: GET
    data_selector: profile.default
    params: {}
- name: Model
  endpoint:
    path: /api/python/dsl/model
    method: GET
    data_selector: records
- name: Type
  endpoint:
    path: /api/python/dsl/type
    method: GET
    data_selector: records
- name: Model
  endpoint:
    path: /api/python/dsl/model
    method: POST
    data_selector: records
- name: Type
  endpoint:
    path: /api/python/dsl/type
    method: POST
    data_selector: records
- name: Person
  endpoint:
    path: /services/data/vXX.X/sobjects/Person
    method: GET
    data_selector: records
- name: employee
  endpoint:
    path: /api/employee
    method: GET
    data_selector: records
- name: department
  endpoint:
    path: /api/department
    method: GET
    data_selector: records
- name: Person
  endpoint:
    path: /services/data/vXX.X/sobjects/Person
    method: GET
    data_selector: records
    params: {}
- name: Adult
  endpoint:
    path: /services/data/vXX.X/sobjects/Adult
    method: GET
    data_selector: records
    params: {}
- name: Person
  endpoint:
    path: /models/Person
    method: GET
    data_selector: records
- name: Employee
  endpoint:
    path: /models/Employee
    method: GET
    data_selector: records
- name: Department
  endpoint:
    path: /models/Department
    method: GET
    data_selector: records
- name: Person
  endpoint:
    path: /api/python/dsl/instanceproperty/#has_value
    method: GET
    data_selector: response
    params: {}
- name: Employee
  endpoint:
    path: /build/guides/basic-functionality/#filtering-objects-by-property-value
    method: GET
    data_selector: response
    params: {}
- name: models
  endpoint:
    path: /api/models
    method: GET
    data_selector: data
    params: {}
- name: types
  endpoint:
    path: /api/types
    method: GET
    data_selector: data
    params: {}
- name: Person
  endpoint:
    path: /api/person
    method: GET
    data_selector: records
- name: Adult
  endpoint:
    path: /api/adult
    method: GET
    data_selector: records
- name: model
  endpoint:
    path: /model
    method: POST
    data_selector: results
- name: exports_list
  endpoint:
    path: /api/cli/exports/list
    method: GET
    data_selector: SQL stored procedures
- name: exports_delete
  endpoint:
    path: /api/cli/exports/delete
    method: DELETE
    data_selector: SQL stored procedures
- name: account
  endpoint:
    params:
      required: 'Yes'
- name: warehouse
  endpoint:
    params:
      required: 'Yes'
- name: Provider
  endpoint:
    path: /api/python/provider/
    method: GET
    data_selector: records
- name: streams
  endpoint:
    path: /api/cli/streams
    method: GET
- name: sql
  endpoint:
    path: /sql
    method: POST
    data_selector: results
    params: {}
- name: streams
  endpoint:
    path: /api/sql/streams
    method: GET
    data_selector: streams
- name: potential_backup_suppliers
  endpoint:
    path: <my_db>.<my_schema>.potential_backup_suppliers
    method: CALL
    data_selector: results
notes:
- Several methods of the Provider class require connecting to the native app using
  a Snowflake user that has been granted the app_admin application role.
- Query the model using the model.query(format="snowpark") context manager to get
  a Snowpark DataFrame with the results that can be used to write results to a Snowflake
  table or view.
- RAI Native App consists of several components that all live inside your Snowflake
  account.
- This update does not impact existing installations, which will continue to use the
  previous storage format until they are manually migrated.
- Requires specific Snowflake privileges to operate correctly.
- Privileges are automatically granted during app installation.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- Users granted the `rai_developer` role can use the RAI Native App
- The app's `rai_user` role must be linked to the `rai_developer` role
- Only the RAI Native App owner can directly grant application roles to database roles.
- Access control can be delegated to non-owners through stored procedures.
- Requires the app_admin application role to activate or deactivate the app.
- Python users cannot create or query models while the app is deactivated.
- Engines are automatically created for users on their first query.
- Engines auto-suspend after 60 minutes of inactivity by default.
- Engines are automatically suspended after 60 minutes of inactivity.
- Engines are suspended after 60 minutes of inactivity by default.
- Engines cannot be resized on-the-fly.
- Setting the auto-suspend time to 0 will prevent the engine from suspending due to
  inactivity.
- Requires the `eng_user` application role.
- Requires the `eng_admin` application role.
- Requires the eng_user application role.
- Engines are automatically suspended after one hour of inactivity.
- Requires the eng_admin application role
- Each user has a dedicated engine by default.
- Engines can be managed using SQL, Python, or the RAI CLI.
- Auto-created rules engines are automatically suspended after 60 minutes of inactivity.
- Requires the `eng_user` application role to view idle engines.
- Requires the `eng_admin` application role to suspend or resume engines.
- Each user has a dedicated engine.
- To resize an engine, first delete the engine and then create a new engine with the
  same name and a different size.
- Engines are suspended after one hour of inactivity.
- An engine’s size is the same as its host compute pool’s instance family.
- Requires the 'eng_user' application role.
- Uses OAuth2 for authentication.
- Setting the auto-suspend time to '0' will prevent the engine from suspending due
  to inactivity.
- Engines automatically suspend after 60 minutes of inactivity.
- Setting the auto-suspend time to `0` will prevent the engine from suspending due
  to inactivity.
- Requires the [`cdc_admin`](/manage/user-access#resource-roles) application role.
- Requires the [`app_user` application role](/manage/user-access#service-roles).
- You must enable change tracking on a source table or view before you can create
  a data stream.
- Change tracking captures information about all Data Manipulation Language (DML)
  statements committed to a table or view, including INSERT, UPDATE, and DELETE operations.
- If a stream remains suspended beyond its data retention period, it becomes stale.
- Support for data streams is disabled by default when you install the RAI Native
  App.
- The CDC service requires that your RAI Native App be granted the EXECUTE TASK and
  EXECUTE MANAGED TASK privileges.
- You must enable the CDC service before data streams can be created.
- Requires the cdc_admin application role.
- Requires ownership privileges on the table or view
- Requires the 'cdc_admin' application role
- If automatic recovery fails, manual intervention is required.
- Requires ACCOUNTADMIN privileges.
- Change tracking must be enabled on the source table or view before creating a data
  stream.
- You may use up to 1000 tables and 1000 views as source objects for data streams,
  for maximum total of 2000 source objects.
- Requires the [`cdc_admin`] application role.
- Requires `ACCOUNTADMIN` privileges.
- Suspended streams should be resumed at regular intervals to avoid becoming stale.
- When you delete a data stream, RAI Python models retain access to a snapshot of
  the source data.
- Quarantined streams continue to consume change tracking data from the source data,
  but these changes will not be processed by the CDC engine until the stream is resumed.
- If your data stream is quarantined, the system will attempt to recover it automatically
  once, 15 minutes after quarantine begins.
- You do not need to wait for this automatic recovery.
- You can troubleshoot and fix the issue at any time.
- CDC service requires enabling before data streams can be created.
- Users must have SELECT privileges on the source table or view to create data streams.
- Engines consume compute resources even when they’re not actively processing queries.
- Suspended engines do not consume compute resources, but they retain their configuration
  and data.
- Some tasks, like those related to billing, may generate small amounts of compute
  consumption even when the app is deactivated.
- RAI Native App updates are mandatory
- Engines provisioned after an update are created using the latest version.
- Existing engines created prior to the update must be upgraded to the latest version
  to access new features and improvements.
- While an engine is upgrading, in-progress transactions are cancelled and queries
  using the engine will fail.
- Snowflake notebooks require a Snowflake schema for storing the notebook.
- Use a Snowpark Container Services compute pool for the notebook’s kernel.
- The connection parameter takes precedence over all other authentication methods.
- Multiple profiles, each with different configuration values, can be stored in the
  same configuration file.
- Uses username and password authentication method
- If you omit snowflake-connector-python==3.11.0, then pip install will upgrade the
  package to the latest version, causing incompatibilities with Hex’s libraries.
- RelationalAI is supported in the Run on warehouse Python environment, but requires
  an additional installation step.
- We recommend using the Run on container environment for a smoother experience.
- Models connect to your Snowflake account using the active profile in your raiconfig.toml
  file.
- Contradictory rules may cause undefined behavior and should be avoided.
- Exceptions may be raised when invalid rules are detected, but this is not guaranteed.
- Use the RAI debugger to help identify and resolve issues with your model.
- To create a data stream, you must have SELECT privileges on the source table and
  the cdc_admin application role.
- In typical Python, `person1.age >= 18` returns a Boolean value.
- Keywords like `if`, and operators like `and` and `or`, are forbidden in queries.
- Queries return a pandas DataFrame by default.
- To avoid slow downloads for large result sets, set the query’s format parameter
  to 'snowpark'.
- If data streams are out-of-date, data is prepared before the query is executed.
- You must invoke rai debugger from the same directory from which you execute the
  Python interpreter.
- As your project runs, debugging information is emitted to a debug.jsonl file in
  your current working directory.
- Although NaN or NULL may be displayed in query results, properties do not actually
  point to NaN, NULL, or even None values.
- Functions decorated with @model.export() cannot be called directly in Python.
- Models connect to your Snowflake account using your raiconfig.toml profile or connection
  details provided to the Model constructor.
- Rules and queries are defined using the model.rule() and model.query() context managers,
  respectively.
- Unlike SQL, which executes each command immediately, in RAI, rules are not executed
  until a query is run.
- Rules are not executed in any particular order, and can be thought of as a set of
  constraints that are applied to the data when a query is executed.
- RAI does not have a NULL value. Property values are either present or missing.
- Currently, the RAI Debugger is only available when using the relationalai package
  in a local Python environment.
- Snowflake notebooks and other cloud environments do not support the RAI Debugger.
- The error message tells you that the date_founded property has never been set for
  Company entities.
- The dictionaries in the COMPANY_DATA list defined at the top of the model.py file
  have a date_founded key with the date each company was founded.
- RAI Debugger is only available in a local Python environment.
- The rule that assigns Employee entities to the FoundingEmployee type has a warning
  icon indicating a cross product warning.
- The program executes queries in the order that they appear in the code.
- Only the rules created before the query is executed are available to the query.
- The error message indicates that the `date_founded` property has never been set
  for `Company` entities.
- If you encounter an error that says `address already in use`, then something is
  already running on the default port used by the debug server.
- The Prescriptive Reasoner is currently in Preview and has some limitations
- Only Int64 and Float64 values are supported in variables, constraints, and objectives
- Only single-objective optimization is supported, even if the selected solver backend
  supports multi-objective problems
- Some advanced solver features, such as MIP callbacks, are not supported
- Preview features are publicly available but RelationalAI does not provide SLAs or
  technical support commitments.
- They are intended for evaluation and testing purposes only and should not be used
  in production applications.
- Note that several methods of the Provider class require connecting to the native
  app using a Snowflake user that has been granted the app_admin application role.
- RelationalAI requires Python 3.9, 3.10, or 3.11.
- Coming Soon
- Activating the RAI Native App provisions several Snowflake and RAI resources and
  may take several minutes to complete.
- At least one engine with a READY state must be available to create a data stream.
- You must have SELECT privileges and change tracking must be enabled on the source
  object.
- Requires the Snowflake user set in your configuration to have the cdc_admin application
  role.
- Requires the Snowflake user set in your configuration to have the `cdc_admin` application
  role.
- While the RAI Native App is deactivated, RAI models cannot be created or queried.
- Using a Session object is useful when you need to authenticate with Snowflake using
  a method other than a username and password, such as SSH.
errors:
- '401 Unauthorized: Check OAuth scopes or token expiration'
- '403 Forbidden: Ensure correct permissions are granted'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check OAuth token and permissions'
- '403 Forbidden: Ensure the user has the necessary roles'
- '401 Unauthorized: Ensure you have the correct application role and OAuth scopes.'
- '400 Bad Request: Invalid parameters.'
- '404 Not Found: Engine not found.'
- '403 Forbidden: Insufficient permissions.'
- '403 Forbidden: Check user permissions.'
- '404 Not Found: The requested resource does not exist.'
- '404 Not Found: Check if the engine name is correct.'
- '403 Forbidden: Ensure you have the correct application role.'
- 'ABORTED: The transaction was cancelled or failed due to an error.'
- 'ABORTED: Transaction was cancelled or failed due to an error.'
- 'Too many errors occurred: CDC Service stopped syncing data from your source.'
- Requires ownership privileges on the table or view.
- Requires the cdc_admin application role.
- Data stream suspended
- Data stream deleted successfully
- '403 Forbidden: Insufficient privileges to execute task'
- '401 Unauthorized: Recheck username or password'
- Error message indicates that the date_founded property has never been set for Company
  entities.
- 'address already in use: Specify a different port using the --port option'
- date_founded property has never been set for Company entities.
- 'address already in use: specify a different port using the --port option'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Provider
  - application roles
  - role-based access control
  - app_admin
  - app_user
  - sensitive_logs
  - eng_user
  - eng_admin
  - EXECUTE TASK
  - EXECUTE MANAGED TASK
  - billing_admin
  - USAGE_VIEWER
  - rai_app_name
  - role
  - warehouse
client:
  base_url: https://relational.ai
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.relational.ai/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
