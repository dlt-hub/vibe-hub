resources:
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
- name: gameSessions
  endpoint:
    path: /gameSessions
    method: GET
    data_selector: records
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
- name: documents
  endpoint:
    path: /api/documents
    method: GET
    data_selector: data
    params: {}
- name: templates_push
  endpoint:
    path: /templates/push
    method: POST
    data_selector: result
- name: templates_reset
  endpoint:
    path: /templates/reset
    method: POST
    data_selector: result
- name: add_replica
  endpoint:
    path: /add-replica
    method: POST
    data_selector: result
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: friends
  endpoint:
    path: /db.js
    method: GET
    data_selector: friends
    params: {}
- name: friends
  endpoint:
    path: /db.friends
    method: GET
    data_selector: friends
    params: {}
- name: friends
  endpoint:
    path: /db
    method: GET
    data_selector: friends
    params: {}
- name: friends
  endpoint:
    path: /db/friends
    method: GET
    data_selector: records
    params: {}
- name: friends
  endpoint:
    path: /db.js
    method: GET
    data_selector: friends
    params: {}
- name: todoLists
  endpoint:
    path: /todoLists
    method: GET
- name: todoItems
  endpoint:
    path: /todoItems
    method: GET
- name: realms
  endpoint:
    path: /realms
    method: GET
    data_selector: realms
- name: members
  endpoint:
    path: /members
    method: GET
    data_selector: members
- name: roles
  endpoint:
    path: /roles
    method: GET
    data_selector: roles
- name: pricing
  endpoint:
    path: /cloud/pricing
    method: GET
    data_selector: data
    params: {}
- name: DBPermissionSet
  endpoint:
    path: /cloud/docs/DBPermissionSet
    method: GET
    data_selector: permissions
    params: {}
- name: public_data
  endpoint:
    path: /public_data
    method: POST
    data_selector: data
    params: {}
- name: Collection.and
  endpoint:
    path: /docs/Collection/Collection.and()
    method: GET
    data_selector: this
- name: collection_count
  endpoint:
    path: /collection/count
    method: GET
    data_selector: count
    params: {}
- name: collection_distinct
  endpoint:
    path: /Collection/distinct
    method: GET
    data_selector: this
- name: collection_filter
  endpoint:
    path: /Collection/filter
    method: GET
    data_selector: this
    params: {}
- name: collection_last
  endpoint:
    path: /Collection/last
    method: GET
    data_selector: item
    params: {}
- name: collection_limit
  endpoint:
    path: /docs/Collection/Collection.limit/
    method: GET
    data_selector: this
    params: {}
- name: Collection.offset
  endpoint:
    path: /Collection/offset
    method: GET
    data_selector: this
    params: {}
- name: Collection
  endpoint:
    path: /Collection/sortBy
    method: GET
    data_selector: records
- name: unique_keys
  endpoint:
    path: /collection/uniqueKeys
    method: GET
    data_selector: keysArray
    params: {}
- name: people
  endpoint:
    path: /people
    method: PUT
    data_selector: records
    params: {}
- name: DBCoreAddRequest
  endpoint:
    path: /DBCoreAddRequest
    method: GET
    data_selector: values
    params: {}
- name: DBCoreCountRequest
  endpoint:
    path: /DBCore/DBCoreCountRequest
    method: GET
    data_selector: records
- name: DBCoreCursor
  endpoint:
    path: /DBCoreCursor
    method: GET
    data_selector: value
    params: {}
- name: DBCoreDeleteRangeRequest
  endpoint:
    path: /DBCoreDeleteRangeRequest
    method: GET
    data_selector: records
- name: DBCoreDeleteRequest
  endpoint:
    path: /DBCore/DBCoreDeleteRequest
    method: GET
    data_selector: records
- name: DBCoreGetManyRequest
  endpoint:
    path: /DBCoreGetManyRequest
    method: GET
    data_selector: trans, keys
    params: {}
- name: DBCoreTransaction
  endpoint:
    path: /DBCore/DBCoreTable/get
    method: GET
- name: DBCoreIndex
  endpoint:
    path: /DBCoreIndex
    method: GET
    data_selector: records
- name: DBCoreKeyRange
  endpoint:
    path: /DBCoreKeyRange
    method: GET
    data_selector: records
- name: DBCoreMutateResponse
  endpoint:
    path: /DBCore/DBCoreMutateResponse
    method: GET
    data_selector: results
- name: DBCoreOpenCursorRequest
  endpoint:
    path: /DBCoreOpenCursorRequest
    method: GET
    data_selector: values
    params: {}
- name: DBCorePutRequest
  endpoint:
    path: /DBCorePutRequest
    method: PUT
    data_selector: values
- name: DBCoreQueryRequest
  endpoint:
    path: /DBCoreQueryRequest
    method: GET
    data_selector: values
- name: result
  endpoint:
    data_selector: any[]
- name: DBCoreKeyRange
  endpoint:
    path: /DBCoreKeyRange
    method: GET
    data_selector: records
    params: {}
- name: DBCoreSchema
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: DBCoreTable
  endpoint:
    path: /DBCoreTable
    method: GET
- name: DBCoreTableSchema
  endpoint:
    path: /DBCoreTableSchema
    method: GET
- name: DBCoreTransactionMode
  endpoint:
    path: /DBCore/DBCoreTransactionMode
    method: GET
    data_selector: transaction_modes
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
    params: {}
- name: pets
  endpoint:
    path: /pets
    method: GET
    data_selector: records
    params: {}
- name: token
  endpoint:
    path: /token
    method: POST
    data_selector: null
    params: {}
- name: token_validate
  endpoint:
    path: /token/validate
    method: GET
    data_selector: null
    params: {}
- name: all
  endpoint:
    path: /all/<table>
    method: GET
    data_selector: null
    params: {}
- name: my
  endpoint:
    path: /my/<table>
    method: GET
    data_selector: null
    params: {}
- name: public
  endpoint:
    path: /public/<table>
    method: GET
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params:
      sort: userId
      desc: 'false'
      limit: 1000
- name: new-user
  endpoint:
    path: /webhooks/dexie-cloud
    method: POST
    data_selector: userId, email
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: records
    params: {}
- name: bulkAdd
  endpoint:
    path: /docs/Table/Table.bulkAdd
    method: POST
    data_selector: failures
- name: bulkPut
  endpoint:
    path: /docs/Table/Table.bulkPut
    method: POST
    data_selector: failures
- name: bulkDelete
  endpoint:
    path: /docs/Table/Table.bulkDelete
    method: POST
    data_selector: failures
- name: modify_error
  endpoint:
    path: /docs/DexieErrors/Dexie.ModifyError
    method: GET
    data_selector: errors
    params: {}
- name: database_change
  endpoint:
    path: /Observable/Dexie.Observable.DatabaseChange
    method: GET
    data_selector: properties
- name: database_change
  endpoint:
    path: /Observable/Dexie.Observable.DatabaseChange
    method: GET
    data_selector: properties
    params: {}
- name: syncable
  endpoint:
    path: /syncable
    method: GET
    data_selector: records
- name: database_change
  endpoint:
    path: /database/change
    method: GET
    data_selector: changes
    params: {}
- name: save
  endpoint:
    method: Promise
- name: DatabaseChange
  endpoint:
    path: /Syncable/Dexie.Syncable.IDatabaseChange
    method: GET
    data_selector: records
- name: sync
  endpoint:
    path: /sync
    method: POST
    data_selector: changes
    params: {}
- name: save
  endpoint:
    path: /save
    method: POST
    data_selector: Promise<void>
    params: {}
- name: sync
  endpoint:
    path: /sync
    method: POST
    data_selector: changes
    params: {}
- name: SyncStatus
  endpoint:
    path: /Syncable/Statuses
    method: GET
    data_selector: enum
- name: SyncStatus
  endpoint:
    path: /Syncable/Statuses
    method: GET
    data_selector: enum
    params: {}
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
    params: {}
- name: pets
  endpoint:
    path: /pets
    method: GET
    data_selector: records
    params: {}
- name: ForEachAddon
  endpoint:
    path: /Dexie.addons/ForEachAddon
    method: POST
    data_selector: addons
- name: ForEachAddon
  endpoint:
    path: /add-ons/for-each
    method: POST
    data_selector: addons
    params: {}
- name: Observable
  endpoint:
    path: /add-ons/observable
    method: POST
    data_selector: addons
    params: {}
- name: Syncable
  endpoint:
    path: /add-ons/syncable
    method: POST
    data_selector: addons
    params: {}
- name: items
  endpoint:
    path: /backendDB
    method: GET
    data_selector: result
    params: {}
- name: backendDB
  endpoint:
    path: /backendDB
    method: GET
    data_selector: IDBDatabase
- name: Dexie.close
  endpoint:
    path: /Dexie/Dexie.close
    method: GET
    data_selector: records
    params: {}
- name: currentTransaction
  endpoint:
    path: /Dexie/currentTransaction
    method: GET
    data_selector: Transaction
    params: {}
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
    params: {}
- name: friends
  endpoint:
    path: /friends
    method: POST
    data_selector: friends
    params: {}
- name: delByKeyPath
  endpoint:
    path: /Dexie/delByKeyPath
    method: DELETE
    data_selector: obj
    params: {}
- name: delByKeyPath
  endpoint:
    path: /Dexie/delByKeyPath
    method: DELETE
    data_selector: obj
    params:
      key_path: address.street
- name: delete_database
  endpoint:
    path: /Dexie/delete
    method: DELETE
    data_selector: promise
- name: delete
  endpoint:
    path: /Dexie/delete
    method: DELETE
    data_selector: Promise
- name: events
  endpoint:
    path: /Dexie/events
    method: GET
    data_selector: events
    params: {}
- name: database_check
  endpoint:
    path: /Dexie.exists
    method: GET
    data_selector: exists
    params: {}
- name: getByKeyPath
  endpoint:
    path: /Dexie/getByKeyPath
    method: GET
    data_selector: records
- name: database_names
  endpoint:
    path: /getDatabaseNames
    method: GET
    data_selector: databases
    params: {}
- name: getByKeyPath
  endpoint:
    path: /Dexie/getByKeyPath
    method: GET
    data_selector: property
- name: ignore_transaction
  endpoint:
    path: /Dexie/ignoreTransaction
    method: GET
    data_selector: function
- name: friends
  endpoint:
    path: /FriendDatabase
    method: GET
    data_selector: friends
    params: {}
- name: staticEventType
  endpoint:
    path: /docs/Dexie/Dexie.on.storagemutated
    method: GET
- name: event
  endpoint:
    path: /docs/Dexie/Dexie.on.ready
    method: GET
- name: error
  endpoint:
    path: /docs/Dexie/Dexie.on.error
    method: GET
- name: populate
  endpoint:
    path: /docs/Dexie/Dexie.on.populate
    method: GET
- name: blocked
  endpoint:
    path: /docs/Dexie/Dexie.on.blocked
    method: GET
- name: versionchange
  endpoint:
    path: /docs/Dexie/Dexie.on.versionchange
    method: GET
- name: close
  endpoint:
    path: /docs/Dexie/Dexie.on.close
    method: GET
- name: storagemutated
  endpoint:
    path: /docs/Dexie/Dexie.on.storagemutated
    method: GET
- name: ready
  endpoint:
    path: /docs/Dexie/Dexie.on.ready
    method: GET
- name: error
  endpoint:
    path: /docs/Dexie/Dexie.on.error
    method: GET
- name: populate
  endpoint:
    path: /docs/Dexie/Dexie.on.populate
    method: GET
- name: blocked
  endpoint:
    path: /docs/Dexie/Dexie.on.blocked
    method: GET
- name: versionchange
  endpoint:
    path: /docs/Dexie/Dexie.on.versionchange
    method: GET
- name: close
  endpoint:
    path: /docs/Dexie/Dexie.on.close
    method: GET
- name: blocked_event
  endpoint:
    path: /Dexie/on/blocked
    method: GET
    data_selector: event
- name: friends
  endpoint:
    path: /friends
    method: add
    data_selector: records
- name: someTable
  endpoint:
    path: /someTable
    method: count
    data_selector: records
- name: friends
  endpoint:
    path: /MyDB/version/1/stores/friends
    method: GET
    data_selector: records
    params: {}
- name: someTable
  endpoint:
    path: /someDB/version/1/stores/someTable
    method: GET
    data_selector: records
    params: {}
- name: on_ready
  endpoint:
    path: /Dexie/on.ready
    method: GET
    data_selector: callback
    params: {}
- name: setByKeyPath
  endpoint:
    path: /Dexie/setByKeyPath
    method: POST
    data_selector: result
    params: {}
- name: spawn
  endpoint:
    path: /Dexie/spawn
    method: POST
    data_selector: Promise
    params: {}
- name: table
  endpoint:
    path: /Dexie/table
    method: GET
    data_selector: Table
    params: {}
- name: friends
  endpoint:
    path: /stores/friends
    method: GET
    data_selector: schema
    params: {}
- name: pets
  endpoint:
    path: /stores/pets
    method: GET
    data_selector: schema
    params: {}
- name: table
  endpoint:
    path: /Dexie/table
    method: GET
    data_selector: Table
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: result
    params: {}
- name: tables
  endpoint:
    path: /Dexie/tables
    method: GET
    data_selector: tables
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
    params: {}
- name: pets
  endpoint:
    path: /pets
    method: GET
    data_selector: records
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: result
    params: {}
- name: middleware
  endpoint:
    path: /use
    method: POST
    data_selector: stack
- name: transaction
  endpoint:
    path: /docs/Dexie/Dexie.transaction()-(old-version)
    method: GET
    data_selector: parameters
- name: middleware
  endpoint:
    path: /use
    method: POST
    data_selector: stack
    params: {}
- name: verno
  endpoint:
    path: /verno
    method: GET
    data_selector: version
- name: version
  endpoint:
    path: /Dexie.version
    method: GET
    data_selector: versionNumber
    params: {}
- name: version
  endpoint:
    path: /Dexie/version
    method: GET
    data_selector: versionNumber
- name: databaseUrl
  endpoint:
    path: /cloud/docs/DexieCloudOptions
    method: GET
    data_selector: databaseUrl
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
    params: {}
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
    params: {}
- name: importDB
  endpoint:
    path: /importDB
    method: POST
    data_selector: blob
    params: {}
- name: exportDB
  endpoint:
    path: /exportDB
    method: POST
    data_selector: blob
    params: {}
- name: importInto
  endpoint:
    path: /importInto
    method: POST
    data_selector: blob
    params: {}
- name: peakImportFile
  endpoint:
    path: /peakImportFile
    method: POST
    data_selector: blob
    params: {}
- name: importDB
  endpoint:
    path: /importDB
    method: POST
    data_selector: blob
    params: {}
- name: exportDB
  endpoint:
    path: /exportDB
    method: POST
    data_selector: blob
    params: {}
- name: importInto
  endpoint:
    path: /importInto
    method: POST
    data_selector: blob
    params: {}
- name: peakImportFile
  endpoint:
    path: /peakImportFile
    method: POST
    data_selector: blob
    params: {}
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
    params: {}
- name: friends
  endpoint:
    path: /friends
    method: PUT
    data_selector: friends
- name: friends
  endpoint:
    path: /stores
    method: GET
    data_selector: records
- name: friends
  endpoint:
    path: /MyDB/version(1)/stores
    method: GET
    data_selector: stores
    params: {}
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
    params: {}
- name: invite
  endpoint:
    path: /cloud/invites
    method: GET
    data_selector: invites
    params: {}
- name: IndexSpec
  endpoint:
    path: /docs/IndexSpec
    method: GET
    data_selector: properties
- name: indexable_type
  endpoint:
    path: /docs/Indexable-Type
    method: GET
    data_selector: types
    params: {}
- name: Member
  endpoint:
    path: /cloud/docs/Member
    method: GET
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: records
- name: books
  endpoint:
    path: /MultiEntryIndex
    method: GET
    data_selector: records
    params: {}
- name: invite
  endpoint:
    path: /cloud/invites
    method: GET
    data_selector: invites
- name: member
  endpoint:
    path: /db/members
    method: GET
    data_selector: records
- name: Promise
  endpoint:
    path: /Promise
    method: GET
    data_selector: result
    params: {}
- name: tasks
  endpoint:
    path: /services/data/v0.2/stores/tasks
    method: GET
    data_selector: records
- name: notes
  endpoint:
    path: /services/data/v0.2/stores/notes
    method: GET
    data_selector: records
- name: books
  endpoint:
    path: /stores
    method: PUT
    data_selector: books
    params: {}
- name: PersistedSyncState
  endpoint:
    path: /cloud/PersistedSyncState
    method: GET
    data_selector: latestRevisions
    params: {}
- name: Promise
  endpoint:
    path: /Promise
    method: GET
    data_selector: implementation
- name: realm
  endpoint:
    path: /db.realms
    method: GET
    data_selector: records
- name: realm
  endpoint:
    path: /db/realms
    method: GET
    data_selector: records
- name: roles
  endpoint:
    path: /db/roles
    method: GET
    data_selector: records
    params: {}
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
- name: SyncState
  endpoint:
    path: /cloud/syncstate
    method: GET
    data_selector: status
- name: SyncState
  endpoint:
    path: /cloud/docs/SyncState
    method: GET
- name: Table
  endpoint:
    path: /docs/Table/Table
    method: GET
    data_selector: properties
    params: {}
- name: TableSchema
  endpoint:
    path: /TableSchema
    method: GET
    data_selector: properties
    params: {}
- name: Table.add
  endpoint:
    path: /Table/add
    method: POST
    data_selector: result
- name: SyncState
  endpoint:
    path: /cloud/sync-state
    method: GET
    data_selector: status
- name: Table
  endpoint:
    path: /docs/Table/Table
    method: GET
    data_selector: properties
- name: raindrops
  endpoint:
    path: /raindrops
    method: POST
    data_selector: id
- name: TableSchema
  endpoint:
    path: /docs/TableSchema
    method: GET
    data_selector: properties
    params: {}
- name: bulkDelete
  endpoint:
    path: /Table/bulkDelete
    method: POST
    data_selector: keys
    params: {}
- name: bulkGet
  endpoint:
    path: /Table/bulkGet
    method: GET
    data_selector: results
    params: {}
- name: Table.add
  endpoint:
    path: /Table.add
    method: POST
    data_selector: result
    params: {}
- name: bulkPut
  endpoint:
    path: /Table/bulkPut
    method: POST
    data_selector: result
    params: {}
- name: bulkUpdate
  endpoint:
    path: /Table/bulkUpdate
    method: POST
    data_selector: bulkUpdate
    params: {}
- name: table
  endpoint:
    path: /Table/bulkAdd
    method: POST
    data_selector: resultingKeys
- name: collection
  endpoint:
    path: /services/data/v1/collections
    method: GET
    data_selector: records
    params: {}
- name: delete_object
  endpoint:
    path: /Table.delete
    method: DELETE
    data_selector: undefined
    params:
      primaryKey: primaryKey
- name: table_filter
  endpoint:
    path: /Table/filter
    method: GET
    data_selector: Collection
    params: {}
- name: get
  endpoint:
    path: /Table.get
    method: GET
    data_selector: item
- name: emails
  endpoint:
    path: /db/emails
    method: add
    data_selector: emails
    params: {}
- name: limit
  endpoint:
    path: /Table.limit
    method: GET
    data_selector: Collection
    params: {}
- name: table_name
  endpoint:
    path: /Table/name
    method: GET
    data_selector: records
- name: Table.orderBy
  endpoint:
    path: /Table/orderBy
    method: GET
    data_selector: collection
    params: {}
- name: Table.put
  endpoint:
    path: /Table.put
    method: POST
    data_selector: item
    params: {}
- name: Table.reverse
  endpoint:
    path: /Table.reverse
    method: GET
    data_selector: Collection
- name: friends
  endpoint:
    path: /db.version(1).stores
    method: GET
    data_selector: stores
- name: bulkDelete
  endpoint:
    path: /Table/bulkDelete
    method: POST
    data_selector: keys
- name: collection
  endpoint:
    path: /Table/toCollection
    method: GET
    data_selector: Collection
    params: {}
- name: bulkGet
  endpoint:
    path: /Table/bulkGet
    method: GET
    data_selector: results
- name: Table.update
  endpoint:
    path: /Table.update
    method: POST
    data_selector: records
- name: bulkPut
  endpoint:
    path: /Table/bulkPut
    method: POST
    data_selector: items
    params: {}
- name: Table.upsert
  endpoint:
    path: /docs/Table/upsert
    method: GET
    data_selector: Promise
    params: {}
- name: where_clause
  endpoint:
    path: /Table/where
    method: GET
    data_selector: WhereClause
- name: bulkUpdate
  endpoint:
    path: /Table/bulkUpdate
    method: POST
    data_selector: response
    params: {}
- name: transaction
  endpoint:
    path: /docs/Transaction/Transaction
    method: GET
- name: transaction_abort
  endpoint:
    path: /transaction/abort
    method: POST
    data_selector: transaction
    params: {}
- name: friends
  endpoint:
    path: /services/data/vXX.X/sobjects/Friends
    method: GET
    data_selector: records
    params: {}
- name: table_delete
  endpoint:
    path: /Table/delete
    method: DELETE
    data_selector: undefined
    params:
      primaryKey: required
- name: filter
  endpoint:
    path: /Table.filter
    method: GET
    data_selector: Collection
    params: {}
- name: table
  endpoint:
    path: /Transaction/table
    method: GET
- name: get
  endpoint:
    path: /Table/get
    method: GET
    data_selector: item
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: emails
  endpoint:
    path: /emails
    method: GET
    data_selector: records
- name: phones
  endpoint:
    path: /phones
    method: GET
    data_selector: records
- name: UserLogin
  endpoint:
    path: /UserLogin
    method: GET
    data_selector: userId
    params: {}
- name: Table.limit
  endpoint:
    path: /docs/Table/Table.limit
    method: GET
    data_selector: Collection
    params: {}
- name: Collection.limit
  endpoint:
    path: /docs/Collection/Collection.limit
    method: GET
    data_selector: Collection
    params: {}
- name: Table.offset
  endpoint:
    path: /docs/Table/Table.offset
    method: GET
    data_selector: Collection
    params: {}
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
- name: friends
  endpoint:
    path: /services/data/vXX.X/sobjects/friends
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /services/data/vXX.X/sobjects/users
    method: GET
    data_selector: records
    params: {}
- name: TableName
  endpoint:
    path: /Table.name
    method: GET
- name: offset
  endpoint:
    path: /docs/Table/Table.offset/
    method: GET
    data_selector: Collection
    params: {}
- name: orderBy
  endpoint:
    path: /docs/Table/orderBy
    method: GET
    data_selector: collection
    params: {}
- name: WhereClause
  endpoint:
    path: /WhereClause/above
    method: GET
    data_selector: parameters
    params: {}
- name: Table.put
  endpoint:
    path: /Table.put
    method: POST
    data_selector: item
    params: {}
- name: WhereClause
  endpoint:
    path: /WhereClause/aboveOrEqual
    method: GET
    data_selector: parameters
    params: {}
- name: Table.reverse
  endpoint:
    path: /Table/reverse
    method: GET
    data_selector: Collection
- name: WhereClause
  endpoint:
    path: /WhereClause.anyOfIgnoreCase
    method: GET
    data_selector: parameters
    params: {}
- name: TableSchema
  endpoint:
    path: /docs/TableSchema
    method: GET
    data_selector: schema
    params: {}
- name: WhereClause
  endpoint:
    path: /WhereClause/below
    method: GET
    data_selector: Collection
    params: {}
- name: Collection
  endpoint:
    path: /docs/Collection/Collection
    method: GET
    data_selector: items
- name: Table.update
  endpoint:
    path: /docs/Table/update
    method: GET
    data_selector: records
- name: WhereClause
  endpoint:
    path: /docs/WhereClause/WhereClause.between()
    method: GET
    data_selector: parameters
    params: {}
- name: friends
  endpoint:
    path: /friends
    method: upsert
    data_selector: results
- name: WhereClause
  endpoint:
    path: /docs/WhereClause/WhereClause.equals()
    method: GET
    data_selector: Collection
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
- name: Transaction
  endpoint:
    path: /Transaction
    method: GET
    data_selector: properties
    params: {}
- name: whereClauseNotEqual
  endpoint:
    path: /WhereClause/notEqual
    method: GET
    data_selector: Collection
- name: table
  endpoint:
    path: /Transaction/table
    method: GET
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: emails
  endpoint:
    path: /emails
    method: GET
    data_selector: records
- name: phones
  endpoint:
    path: /phones
    method: GET
    data_selector: records
- name: current_user
  endpoint:
    path: /cloud/currentUser
    method: GET
    data_selector: UserLogin
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
- name: pets
  endpoint:
    path: /pets
    method: GET
    data_selector: records
- name: UserLogin
  endpoint:
    path: /user/login
    method: POST
    data_selector: claims
    params: {}
- name: currentUserId
  endpoint:
    path: /db/cloud/currentUserId
    method: GET
    data_selector: currentUserId
- name: invites
  endpoint:
    path: /cloud/invites
    method: GET
    data_selector: Invite[]
- name: friends
  endpoint:
    path: /friends
    method: PUT
    data_selector: records
    params: {}
- name: pets
  endpoint:
    path: /pets
    method: PUT
    data_selector: records
    params: {}
- name: cars
  endpoint:
    path: /cars
    method: PUT
    data_selector: records
    params: {}
- name: enemies
  endpoint:
    path: /enemies
    method: PUT
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: PUT
    data_selector: records
    params: {}
- name: relations
  endpoint:
    path: /relations
    method: PUT
    data_selector: records
    params: {}
- name: login
  endpoint:
    path: /db/cloud/login
    method: POST
    data_selector: Promise<void>
    params: {}
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: versionDetails
    params: {}
- name: db_cloud_options
  endpoint:
    path: /cloud/docs/db.cloud.options
    method: GET
    data_selector: options
- name: collection
  endpoint:
    path: /api/collection
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: roles
  endpoint:
    path: /cloud/roles
    method: GET
    data_selector: roles
    params: {}
- name: WhereClause.above
  endpoint:
    path: /WhereClause/above
    method: GET
    data_selector: Collection
    params: {}
- name: WhereClause
  endpoint:
    path: /WhereClause/aboveOrEqual
    method: GET
    data_selector: Collection
    params: {}
- name: DexieCloudSchema
  endpoint:
    path: /cloud/schema
    method: GET
    data_selector: schema
    params: {}
- name: anyOf
  endpoint:
    path: /WhereClause/WhereClause.anyOf()
    method: GET
    data_selector: parameters
- name: DXCUserInteraction
  endpoint:
    path: /cloud/userInteraction
    method: GET
    data_selector: records
- name: WhereClause
  endpoint:
    path: /WhereClause/below
    method: GET
    data_selector: parameters
    params: {}
- name: service_worker_sync
  endpoint:
    path: /db/cloud/usingServiceWorker
    method: GET
    data_selector: boolean
- name: dexie-cloud-addon
  endpoint:
    path: /cloud/docs/db.cloud.version
    method: GET
    data_selector: version
    params: {}
- name: WhereClause.between
  endpoint:
    path: /docs/WhereClause/WhereClause.between()
    method: GET
    data_selector: parameters
    params: {}
- name: members
  endpoint:
    path: /db/members
    method: POST
    data_selector: member
    params: {}
- name: WhereClause
  endpoint:
    path: /WhereClause/equalsIgnoreCase
    method: GET
    data_selector: Collection
    params: {}
- name: roles
  endpoint:
    path: /db.roles
    method: GET
- name: where_clause
  endpoint:
    path: /WhereClause/inAnyRange
    method: GET
    data_selector: parameters
    params: {}
- name: WhereClause.noneOf
  endpoint:
    path: /docs/WhereClause/WhereClause.noneOf()
    method: GET
- name: syncable_delete
  endpoint:
    path: /syncable/delete
    method: DELETE
- name: syncable
  endpoint:
    path: /db.syncable
    method: GET
    data_selector: records
- name: options
  endpoint:
    path: /syncable/getOptions
    method: GET
    data_selector: options
- name: friends
  endpoint:
    path: /friendsDB
    method: GET
    data_selector: result
    params: {}
- name: WhereClause
  endpoint:
    path: /docs/WhereClause/WhereClause.startsWithIgnoreCase
    method: GET
    data_selector: parameters
- name: current_user
  endpoint:
    path: /cloud/currentUserId
    method: GET
    data_selector: currentUserId
- name: invites
  endpoint:
    path: /cloud/invites
    method: GET
- name: login
  endpoint:
    path: /db.cloud.login
    method: POST
    data_selector: result
- name: logout
  endpoint:
    path: /db/cloud/logout
    method: POST
    data_selector: void
    params: {}
- name: configuration
  endpoint:
    path: /cloud/configure
    method: POST
    data_selector: options
- name: roles
  endpoint:
    path: /cloud/roles
    method: GET
    data_selector: roles
- name: DexieCloudSchema
  endpoint:
    path: /cloud/db/schema
    method: GET
    data_selector: tables
    params: {}
- name: members
  endpoint:
    path: /db/members
    method: GET
- name: db_cloud
  endpoint:
    path: /cloud/docs/db.cloud
    method: GET
- name: roles
  endpoint:
    path: /db.roles
    method: GET
- name: syncable_delete
  endpoint:
    path: /syncable/delete
    method: DELETE
- name: options
  endpoint:
    path: /syncable/getOptions
    method: GET
notes:
- Don't declare all columns like in SQL. You only declare properties you want to index.
- IndexedDB will commit a transaction as soon as it isn’t used within the same task.
- You MUST NOT call any other async API within a transaction scope.
- Requires setup of Dexie Cloud for sync functionality
- Uses passwordless email OTP for authentication
- Changes sync instantly with the cloud in both directions
- Requires proper configuration of OAuth2 for access
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The command will fail if there is no subscription connected to your database or
  if custom SMTP settings are not configured.
- Requires setup of connected app in Dexie Cloud
- Ensure whitelisting of app origins
- Dexie v3.2 and later comes with reactivity built-in.
- Uses IndexedDB for data storage
- IndexedDB is tied to using same browser and same origin.
- Applications typically have one single Dexie instance declared as its own module.
- A Dexie instance is a singleton throughout the application.
- Access Control tables needs to be spelled exactly as in the sample and their primary
  keys needs to be spelled exactly the same.
- Public realm is useful in the zero-auth use case - when your app can be used without
  logging in to Dexie Cloud.
- Uses OAuth2 with refresh token — requires setup of connected app in Dexie Cloud
- Uses OAuth2 for authentication.
- Evaluation accounts are paused on inactive days (configurable).
- Demo accounts do not occupy seats and do not expire.
- Private Singleton IDs must never be shared.
- Use the dexie-cloud CLI to import demo users
- Ensure you are connected to the correct DB before importing
- Users authenticate the first time using a passwordless email OTP.
- Long-lived sessions are designed for offline-first applications.
- Use transaction() scopes whenever you plan to make more than one operation
- Avoid using other async APIs inside transactions
- Does not clone the database contents, just object instance of the Collection object.
- If callback is omitted and operation succeeds, returned Promise will resolve with
  the result of the operation.
- If operation fails, returned promise will reject.
- If any object fails to be deleted or an exception occurs in a callback function,
  the entire operation will fail and the transaction will be aborted.
- If you catch the returned Promise, the transaction will not abort, and you receive
  a Dexie.MultiModifyError error object containing the failures and successCount.
- Removes any duplicates of primary keys in the collection.
- The operation will implicitly be called from within a READONLY transaction unless
  you already surround your code with a transaction.
- The callback should not modify the database. If that is required, use Collection.modify()
  instead.
- Since 1.4.0
- When iteration finish, returned Promise will resolve with undefined, calling any
  Promise.then() callback.
- If operation fails, returned promise will be rejected, calling any Promise.catch()
  callback.
- This method is identical to Collection.and()
- Requires authentication for accessing the Dexie Cloud API
- Can only be used on indexes and not on primary keys.
- In combination with the or() method, the offset() method makes no sense since the
  sort order of the result will be undefined.
- The sort order of the resulting collection will be undefined since the collection
  works on multiple indexes.
- Items in a Collection is naturally sorted by the index or primary key that was used
  in the where clause.
- If Collection.or() has been used, the Collection is no longer sorted unless you
  use this method.
- Retrieves an array of all unique indexes in the collection.
- Works similar to limit() but rather than specifying a number, you specify a filter
  function to execute on each item and when it returns true, the iteration will stop.
- If the target property does not exist, or is null or undefined, the target value
  will set to the given argument.
- If the target property does not exist, is null, undefined or other type than an
  array, the target array will be created.
- Uses Dexie.spawn() and yield. You need a modern browser to open it.
- Dexie does not require using the yield keyword, but it simplifies your code a lot
  if you do.
- Emails are sent out in various use cases including Authentication/Registration and
  Invites.
- Customizing Email templates requires a purchased subscription and SMTP settings
  configured.
- Not all access to IndexedDB go via DBCore still.
- Transaction-bound tables are created runtime using trans.table(tableName) or property
  getters for trans[tableName].
- The event gave the false impression that it would trigger on any error, but ordinary
  errors such as application exceptions would slip away unless they happened within
  a transaction.
- Dexie supports asynchronous database operations using Promises.
- Database schema can be defined using versioning.
- A token with global access allows you to read data from any realm and if you include
  GLOBAL_WRITE you can also modify any data.
- GET requests to /public/... endpoint do not require authorization.
- Deleting a user is a destructive operation and will imply data deletion of all data
  that was private for that user.
- Consider deactivating a user rather than deleting it.
- Dexie is a library for using indexedDB.
- Catching the error means that the successful operations will be saved.
- If not catching the error, all operations will be reverted and if there is an ongoing
  transaction, it will be aborted.
- An index property (or primary key) was of the wrong type (not an indexable type).
  This happens when adding a new object to a table where its primary key is not an
  indexable type.
- Querying by index, where the argument is not an indexable type.
- 'The database connection has been closed explicitly, by calling db.close(), or it
  was opened with option {autoOpen: false} and db.open() was not yet called upon.'
- Error that may occur in Collection.modify() and Collection.delete()
- Contains an array of errors that occurred during failed operations
- This addon adds meta tables your database to maintain change tracking. This can
  slow down the performance.
- As of dexie version >= 3.2, you no longer need this addon to observe data.
- Make sure to never call other async APIs from within a transaction
- Always use the global Promise (or Dexie.Promise) inside transactions
- Avoid awaiting non-promises in loops
- Some objects may return nulls in deeply nested fields
- Always use the global Promise (or Dexie.Promise) inside transactions.
- If using native async/await, avoid awaiting non-promises in loops.
- Happens when the database schema has errors.
- A call to db.transaction() with a mode or set of tables that was not compatible
  with the currently ongoing transaction.
- Two way replication requires not to use auto-incremented keys if any sync node should
  be able to create objects no matter offline or online.
- Transactions only provide the Atomicity part of the ACID properties when using 2-way
  synchronization.
- Javascript interface of a database change.
- The remote database server may be SQL- or NOSQL based as long as it is capable of
  storing JSON compliant objects into some kind of object stores and reference them
  by a primary key.
- Client and server must resolve conflicts in such way that the result on both sides
  are equal.
- Uses OAuth2 with refresh token — requires setup of connected app in Dexie
- An irreparable error occurred and the sync provider is dead.
- The sync provider hasn't yet become online, or it has been disconnected.
- Trying to connect to server.
- Connected to server and currently in sync with server.
- Syncing with server.
- Register a synchronization protocol that adapts Dexie.Syncable to your server and
  database type.
- The operation is not supported by the current browser.
- The underlying implementation has failed. Find out more in your console log or file
  an issue in the bug tracker for your browser that has failed.
- Happens when the database could not be upgraded.
- These dynamic properties only populated onto the db instance when declaring the
  schema using version().stores(). If you open the database dynamically (not using
  version().stores(), these properties are NOT populated and you need to wait for
  db.open() to complete before being able to access a table.
- Also when db.open() has completed, you will not have the `db[table]` properties
  but need to use [db.table()] to retrieve a table instance. You can then also use
  [db.tables] property to retrieve available tables after a successful call to db.open().
- Also when db.open() has completed, you will not have the `db[table]` properties
  but need to use [db.table()] to retrieve a table instance.
- You can then also use [db.tables] property to retrieve available tables after a
  successful call to db.open().
- Makes it possible to use async functions with modern browsers (Chrome, Firefox,
  Opera and Edge) without the need of a transpiler.
- Closes the database. This operation completes immediately and there is no returned
  Promise.
- In a typical web application, you would not need to think about calling this method
  as long as your app keeps a single instance of Dexie.
- If accessed from within a transaction scope, this property will contain the current
  Transaction instance.
- 'If served from localhost: true, else false.'
- Electron apps are served from file:/// urls, no matter whether it is development
  or production. So Dexie.debug will default to false.
- Default value is true if served from localhost, else false.
- Dexie.js is a minimalistic wrapper for IndexedDB
- Clones an object or array completely but still lets any instance of Date or custom
  classes keep their prototypal structure.
- Uses OAuth2 for authentication
- Deletes the database. If the database does not exist (db.open() was never called)
  this method will also succeed.
- You normally won’t need this method! Dexie will automatically detect if database
  creation or upgrade is needed.
- Dexie automatically detects if database creation or upgrade is needed.
- The method Dexie.exists() is not needed in normal scenarios.
- This method is an extension to the native indexedDB API which does not support listing
  of database names.
- If the API is not present, it will fallback to its own tracking of database names.
- This method makes it possible to launch a transaction or database operation that
  doesn’t depend on the current transaction.
- The 'blocked' event occurs if database upgrade is blocked by another tab or browser
  window keeping a connection open towards the database.
- The 'close' event occurs if database is forcibly closed from external action.
- The populate event occurs only once in a database’ lifetime.
- If the callback is an async function, make sure to use the provided transaction
  rather than the Dexie instance.
- The event is not fired when calling db.close().
- From dexie@4.1.0 (currently in alpha), this event is also fired as a CustomEvent
  when db.close() is called explicitly or implicitly and not just when forcibly closed
  from outside.
- When upgrading database, on(“populate”) will NOT be called since it was already
  called before.
- Uses AJAX to populate data.
- For this event to fully propagate mutations performed within Web Workers, the browser
  needs to support BroadcastChannel API.
- Dexie has built-in workarounds for Safari <= 15.3 where BroadcastChannel support
  is missing.
- In case you change the code that subscribes to the populate event between versions,
  you should add an upgrade function to the new version that upgrades earlier populated
  data.
- If your aim is to populate the database from an ajax- or other asynchronous request,
  you can do so by using the on(‘ready’) event rather than on(‘populate’).
- After an upgrade has been made from another window, your current window will run
  on code that targets an old database schema. Your app will not know what tables
  there are and how to use the database in this newer version. Therefore, a webapp
  should typically update itself when this event occurs. For a single-page application
  this normally means reloading the current location to refresh the HTML and JS code
  from server.
- This event is called when the db instance is opened but before all other queries.
- Dexie Cloud uses a REST API to manage IndexedDB.
- By default, db.open() will be called automatically on first query to the db.
- 'This method is only needed if one of the following are true: You’ve created Dexie
  with options `{ autoOpen: false }` or You’ve called db.close() or db.delete() on
  the same instance.'
- Enables overriding existing functions and still be able to call the original function
  from within your overridden function.
- In old version (0.9.8) there was another method Dexie.spawn() with a different meaning.
- Transaction scope is active during the callback function and extends to all database
  operations initiated within it.
- Database operations are launched in parallel by default unless you wait for the
  previous operation to finish.
- You can use async await without any quirks.
- Backward compatible with the old transaction style.
- As of v1.4.0+, the scope function will always be executed asynchronously.
- Currently, only 'dbcore' is supported.
- Version number of the database (read-only).
- If db.version() has been used to specify versions and schemas, this property will
  contain the highest value of the registered versions.
- Currently, only 'dbcore' is supported as a stack type.
- Dexie.version is the number representation of Dexie.semVer calculated by the provided
  formula.
- Dexie version is the number representation of Dexie.semVer calculated by splitting
  and reducing it.
- Method to be used by subscribers to the on(‘ready’) event.
- This will let caller through to access DB even when it is blocked while the db.ready()
  subscribers are firing.
- The VIP state is maintained using a Promise Specific Data structure.
- Uses caution as it can be CPU intensive while waiting for given Promise.
- Use with caution when the purpose is to keep a transaction alive as it may put unnecessary
  CPU load on the browser.
- When used for keeping a transaction alive, this method kind of implements an anti-pattern
  of how not to use indexedDB transactions.
- Disable default login GUI and replace it with your own by subscribing to the `db.cloud.userInteraction`
  observable and render its emitted data.
- Direct download links are provided for Dexie.js
- Install using npm or yarn
- Supports export of IndexedDB Database to JSON Blob
- Can import from Blob back to IndexedDB Database
- Default authentication dialog customizable.
- Local and remote databases connected in real time after login.
- Export of IndexedDB Database to JSON Blob.
- Import from Blob back to IndexedDB Database.
- Uses OTP for authentication — requires email verification.
- Your app must be served over HTTPS, as the StorageManager() is only available in
  a secure context.
- StorageManager API is still considered an experimental technology but is already
  available on Chrome, Firefox and Opera (as of October 30, 2017).
- Requires setup of connected app in Dexie Cloud.
- DB with single table 'friends' with primary key 'id' and indexes on properties 'name'
  and 'age'
- 'All other types are non-indexable, including: boolean, undefined, Object, null'
- Represents an invite for current user to join a realm.
- This property only applies to primary keys. If true, the primary key will be auto-incremented.
- True if the index or primary key is a combination of two or more properties.
- All other types are non-indexable, including boolean, undefined, Object, null.
- Dexie Cloud is a wrapper for IndexedDB
- Dexie will use the version number divided by 10.
- A compound index cannot be marked MultiEntry. The limitation lies within indexedDB
  itself.
- Primary keys cannot be marked MultiEntry.
- Object interface for <db.members> table.
- This implementation is a fork of promise-light by taylorhakes - an A+ and ECMASCRIPT
  6 compliant Promise implementation.
- Dexie will use the version number divided by 10. Nothing to be afraid of.
- If demigrating, just be aware of the version multiplied by 10 thing.
- Dexie’s zone system is unobtrusive, meaning that it does not require your application
  to include a monkey-patching script at the top of the HTML page.
- Promise/A+ compliant catch() method. Enables caller to supply a callback to run
  if the promise fails.
- A compound index cannot be marked MultiEntry.
- 'Certain browsers do not support multiEntry indexes: Internet Explorer 10, 11; Non-chromium
  based Microsoft Edge browsers; Safari 8, 9.'
- Makes it possible to execute code when Promise is resolved or rejected.
- This implementation is a fork of promise-light by Taylor Hakes - an A+ and ECMASCRIPT
  6 compliant Promise implementation.
- IE and Edge have some general indexedDB instability that periodically makes arbitrary
  tests timeout or fail.
- The goal for Dexie 5.0 will be a better experience for web developers to declare
  and query their data.
- We don’t have a any dedicated time schedule of when dexie 5 will be in alpha, beta
  or feature complete.
- Complete authentication flow using email OTP
- Service Worker with periodic sync
- Only for lead contributors with access to publish on npm.
- You can customize the software for the needs of your business. Do whatever you like
  with the software as long as you do not compete with Dexie Cloud.
- Total cost for the software becomes minimal compared to hosted version since there
  is no per-user cost.
- We will continue to support the old API so that applications aren’t forced to go
  over to the type-safe schema declaration.
- You can customize the software for the needs of your business.
- You get cost savings if your business explodes - you no longer pay per user / month.
- You can choose whatever cloud vendor and region to run it in or you can host it
  on bare metal.
- Some objects like Contact may return nulls in deeply nested fields
- If an object with the same primary key already exists, the operation will fail.
- The optional second key argument must only be used if your table uses outbound keys.
- If you have a large number of objects to add to the object store, bulkPut() is faster
  than doing put() in a loop.
- bulkAdd() is faster than doing add() in a loop.
- Successful operations persist even if some fail when called outside a transaction.
- Deletes the object and resolves or rejects the returned promise when done.
- Multi-valued indexes are only supported in Opera, Firefox, and Chrome.
- 'Since Dexie 3.0, there is a new API superior to this hooks API: DBCore.'
- There is NO PLAN for deprecation of this hooks API though, but in future, we may
  extract this API to an addon.
- 'Since Dexie 3.0, there is a new API superior to this hooks API: DBCore. There is
  NO PLAN for deprecation of this hooks API though, but it in future, we may extract
  this API to an addon.'
- Uses Dexie.js for database operations
- Returns a collection where the first N entries in the object store are ignored.
- If it is requested to skip the LAST N entries rather than the FIRST N entries, this
  method can be used in combination with the Collection.reverse() method.
- Returns an unfiltered collection sorted by the index or primary key given by index.
- Make a request with an array of keys and retrieve a Promise of an array of results.
- The resulting array will always have the same length as the given array of keys.
- Be careful with nested object values.
- Add all given objects to the store.
- If object exists, upsert() behaves like Table.update().
- If object doesn’t exist, upsert() behaves like Table.add().
- An empty object is created when creating a new object.
- Uses IndexedDB for storage and retrieval of data
- Deletes all objects and resolves or rejects the returned promise when done.
- 'Ambivalent error handling: Native IndexedDB can throw an error at you in two different
  ways.'
- 'Poor queries: Native IndexedDB API has a poor set of query methods.'
- 'Not reactive: Unlike localStorage, indexedDB does not provide any native events
  when data is mutated.'
- 'Code complexity: Without a wrapper library like Dexie, your application code could
  become unnecessarily complex.'
- Rejection happens if the provided key is not a valid key (not a Number, String,
  Date or Array<Number | String | Date>) or if the current transaction is readonly
  or inactive.
- Fetches an object with a given primaryKey or where the given criteria are fulfilled
  and returns the first matching result.
- Uses OAuth2 — requires setup of Dexie Cloud app
- Synced tables include owner and realmId properties
- 'Since Dexie 3.0, there is a new API superior to this hooks API: DBCore. There is
  NO PLAN to deprecate this hooks API though, but we may extract this API to an add-on
  in the future.'
- Multi-valued indexes are only supported in Opera, Firefox, and Chrome. They do not
  work with IE so far.
- 'Since Dexie 3.0, there is a new API superior to this hooks API: DBCore. There is
  NO PLAN for deprecation of this hooks API though, but in future, we may extract
  this API to an addon.'
- Multi-valued indexes are only supported in Opera, Firefox and Chrome. Does not work
  with IE so far.
- Uses JavaScript constructor functions for mapping
- Objects are shallow copied into new instances of the class
- Never index properties containing images, movies or large (huge) strings.
- In current version of Dexie (v3.0), it is not possible to orderBy on Collections.
- If an object with the same primary key already exists, then it will be replaced
  with the given object.
- The optional second key argument must only be used if the table uses outbound keys.
- If providing the key argument on a table with inbound keys, then the operation will
  fail.
- Returns an unfiltered Collection instance containing all objects in the store.
- If object exists, upsert() behaves like Table.update()
- If object doesn’t exist, upsert() behaves like Table.add()
- If `Dexie.debug=true` and not having compound index of all provided keyPaths, a
  console.warn() will give a hint on how to index this query properly.
- Native IndexedDB can throw an error at you in two different ways. It may throw an
  exception when you call its API or it may call the onerror callback if you provided
  such.
- Native IndexedDB API has a poor set of query methods.
- Unlike localStorage, indexedDB does not provide any native events when data is mutated.
- Without a wrapper library like Dexie, your application code could become unnecessarily
  complex.
- Queries the collection for all valid values that does not match given value. Note
  that you will only find values that are valid indexedDB keys.
- WhereClause.noneOf() and WhereClause.notEqual() will NOT find records with invalid
  keys, such as null, booleans, undefined etc.
- 'Transactions are created in the following methods and events: Dexie.transaction(),
  Dexie.on.populate, Version.upgrade()'
- The currently executing transaction is retrieved from Dexie.currentTransaction property.
- Abort the transaction.
- 'Synced tables have a few more properties that are optional on insert but mandatory
  on all instances returned from db queries: owner and realmId.'
- The call to db.cloud.configure() must be done before any requests are put on the
  db (the Dexie instance) so that the database knows what to do when before opening
  it the first time.
- A plain string (not promise or observable) of the currently logged in user. If no
  user is logged in, this value will be ‘unauthorized’.
- Trigger an authentication flow defined by the configuration options fetchTokens
  and customLoginGui.
- If no arguments are provided and a user is already logged in, the returned promise
  will resolve immediately without any action.
- Observe security permissions for a table and individual objects managed by Dexie
  Cloud.
- Handles incremental loading for collections.
- Rate limits apply based on API usage.
- The schema is defined by the schema passed to `db.version(x).stores(...)`
- In most situations, it is not needed to call db.cloud.sync() explicitly as it will
  always keep an eager sync between client and server automatically.
- Make offline available offline
- A service worker can sync in the background, after you app has been closed or the
  user has put their device in pocket.
- In some browsers, service workers are also able to periodically sync a few times
  a day to keep the local database relatively updated also when not using the application.
- Default includeLower is true.
- Default includeUpper is false.
- The very first time that connect() is called upon an URL, the framework will start
  syncing the entire indexedDB database towards the sync protocol implementation.
- Only call this when you will never sync with the server again. If you do db.syncable.connect()
  with the server after having deleted it, a full sync will be done - and the local
  database may be entirely replaced by the server’s database. Changes that has happened
  locally in between will be lost.
- Ensure proper access controls are set in Dexie Cloud.
- Searches given index for given prefixes, ignoring case differences.
- Dexie supports the powerful CRDT library Y.js through the Dexie add-on <y-dexie>.
- A plain string (not promise or observable) of the currently logged in user.
- If no user is logged in, this value will be ‘unauthorized’.
- Logout current user.
- The configuration options used with <db.cloud.configure()>.
- This method can also be used when eager sync is not turned off.
- Reveals whether a service worker will be responsible of doing the sync requests
  towards Dexie Cloud Server or if it will be done in the main thread.
- There are benefits of letting a service worker do the sync requests but it is not
  required for the addon to work.
- Roles can be imported using the cli and then consumed using the <db.cloud.roles>
  observable.
- Roles can be used when sharing data with other users by adding an entry into the
  members table.
- 'If this is not desired, supply option `{initialUpload: false}` in your connect
  call.'
- Only call this when you will never sync with the server again.
- If you do db.syncable.connect() with the server after having deleted it, a full
  sync will be done - and the local database may be entirely replaced by the server’s
  database.
errors:
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Ensure correct credentials are used'
- '404 Not Found: Verify endpoint URL'
- '401 Unauthorized: Check OAuth tokens'
- '404 Not Found: Verify endpoint correctness'
- '429 Too Many Requests: Throttle API calls'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- If you do NOT catch the returned Promise, and an error occurs, the transaction will
  be aborted.
- If you want to log the error but still abort the transaction, you must encapsulate
  the operation in a transaction() block and catch the transaction instead.
- 'HTTP/1.1 200 Ok: Successful response for /token endpoint'
- 'HTTP/1.1 401 Unauthorized: Token is invalid or expired'
- 'AbortError: Transaction was aborted due to an earlier uncaught exception'
- 'QuotaExceededError: Quota exceeded for the database'
- 'BulkError: Error that may occur in Table.bulkAdd(), Table.bulkPut() or Table.bulkDelete()'
- 'ConstraintError: A database operation was attempted that violates a constraint.'
- 'Error: Any other error derived from standard Error'
- 'DataCloneError: Attempt to add or put an item into the database with unsupported
  structure'
- 'DataError: An index property (or primary key) was of the wrong type.'
- 'DatabaseClosedError: DatabaseClosed error'
- 'InternalError: The underlying implementation has failed.'
- 'InvalidAccessError: An attempt to write to a table that was opened in readonly
  mode'
- 'InvalidArgumentError: A Dexie method was called with one or more invalid arguments.'
- 'InvalidStateError: Can happen when trying to use IndexedDB resource when not in
  a valid state to do so.'
- 'InvalidTableError: Happens when trying to access a table that does not exist or
  is not part of current transaction'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'ModifyError: Multiple errors occurred during modification'
- 'NoSuchDatabaseErrorError: If db.version(X) was not called before interacting the
  first time with the database'
- Failed with NoSuchDatabaseErrorError
- NoSuchDatabaseErrorError
- 'NotFoundError: An attempt was made to use a table that is not part of the current
  transaction.'
- 'open failed due to: e.inner'
- 'Error: e.message'
- 'PrematureCommitError: The indexedDB transaction commits before the promise returned
  by your transaction scope is resolved or rejected'
- 'OpenFailedError: Happens when a db operation has failed due to that database couldn’t
  be opened'
- 'QuotaExceededError: The storage quota for the current origin was exceeded'
- 'ReadOnlyError: Transaction was opened in readonly mode but a write operation was
  attempted.'
- 'PrematureCommitError: Thrown when the indexedDB transaction commits before the
  promise returned by your transaction scope is resolved or rejected.'
- 'Schema error: '
- 'QuotaExceededError: The storage quota for the current origin was exceeded.'
- Transaction was opened in readonly mode but a write operation was attempted.
- 'SubTransactionError: A call to db.transaction() with a mode or set of tables that
  was not compatible with the currently ongoing transaction.'
- 'Schema error: Will always be Dexie.errnames.Schema === "SchemaError"'
- 'TimeoutError: The timeout passed to Dexie.waitFor() was hit before finish'
- 'TimeoutError: The timeout passed to Dexie.waitFor() was hit before finish.'
- 'TransactionInactiveError: The transaction has already committed when you try to
  access it.'
- 'TransactionInactiveError: The transaction has already committed when you try to
  access it'
- UnknownError
- 'UnsupportedError: The operation is not supported by the current browser.'
- 'UnknownError: Find out more in your console log or file an issue in the bug tracker
  for your browser that has failed.'
- 'UpgradeError: Handle UpgradeError error...'
- 'VersionChangeError: Happens when another database instance deletes or upgrades
  the database so that the own instance had to be closed.'
- 'VersionError: Thrown when the installed version of the database is higher than
  the version passed to Dexie.version()'
- 'VersionError: Thrown when the installed version of the database is higher than
  the version passed to Dexie.version().'
- Oops, an error occurred when trying to check database existence
- '''blocked'' event indicates the database upgrade was blocked by another window.'
- 'TransactionInactiveError: Must not call any other async API within a transaction
  scope.'
- 'PrematureCommitError: Transaction will fail if using non-indexedDB compatible Promises.'
- Dexie v1.3.0 or higher is required
- 'ModifyError: Check out e.failures'
- 'ConstraintError: Error message'
- 'UpgradeError: Upgrade error'
- 'ConstraintError: Check error message'
- '401 Unauthorized: Check email or OTP.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls.'
- 'QuotaExceededError: When the limit is reached, either non persistent data will
  get evicted, depending on persistence, or new data will fail to be written to the
  storage.'
- 'ConstraintError: Error occurred due to constraints in the database.'
- 'ConstraintError: Error occurred during database operation'
- 'DOMError: Error related to the Document Object Model'
- 'BulkError: Some operations failed during bulkAdd'
- Promise rejection if providing the key argument on a table with inbound keys.
- 'BulkError: Some operations failed, but successful operations will still be persisted
  to DB.'
- 'Dexie.BulkError: If some operations fail, bulkUpdate() will return a rejected Promise
  referencing the failures.'
- 'BulkError: Some operations failed but successful operations will still be persisted.'
- Rejection happens if the provided key is not a valid key (not a Number, String,
  Date or Array<Number | String | Date>) or if the current transaction is readonly
  or inactive.
- If subscriber throws an exception, the read operation will fail and the caller of
  the read operation will get the failure as a Promise rejection.
- In combination with the or() method, the offset() method makes no sense since the
  sort order of the result will be undefined.
- 'BulkError: Some operations failed during bulkPut()'
- 'Dexie.BulkError: references the failures'
- 'Invalid key: provided key is not valid or transaction is readonly or inactive.'
- If subscriber throws an exception, the delete operation will fail and the caller
  of the delete operation will get the failure as a Promise rejection.
- If a database operation initiated by the subscriber results in a failure, the transaction
  will be aborted.
- If subscriber throws an exception, the read operation will fail and the caller of
  the read operation will get the failure as a Promise rejection that may be caught/handled
  or not.
- 'RATE_LIMIT_EXCEEDED: Reduce request frequency.'
- '401 Unauthorized: Verify client credentials.'
- 'Failed to connect: {err.stack || err}'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - UserLogin
  - Role
  - Member
  - NamedCredential
  - DBCoreQuery
  - DBCoreTableSchema
  - DBCoreMutateRequest
  - DBCoreMutateResponse
  - DBCoreGetRequest
  - DBCoreGetManyRequest
  - DBCoreQueryRequest
  - DBCoreQueryResponse
  - DBCoreOpenCursorRequest
  - DBCoreCursor
  - DBCoreCountRequest
  - db.cloud
  - OAuthToken
client:
  base_url: https://dexie.cloud
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
