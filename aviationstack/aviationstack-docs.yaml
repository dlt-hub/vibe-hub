resources:
- name: real_time_flights
  endpoint:
    path: /real-time-flights
    method: GET
- name: aircraft_types
  endpoint:
    path: /aircraft-types
    method: GET
- name: airline_routes
  endpoint:
    path: /airline-routes
    method: GET
- name: airlines
  endpoint:
    path: /airlines
    method: GET
- name: airplanes
  endpoint:
    path: /airplanes
    method: GET
- name: airports
  endpoint:
    path: /airports
    method: GET
- name: aviation_taxes
  endpoint:
    path: /aviation-taxes
    method: GET
- name: cities
  endpoint:
    path: /cities
    method: GET
- name: countries
  endpoint:
    path: /countries
    method: GET
- name: flights_future
  endpoint:
    path: /flights-future
    method: GET
- name: historical_flights
  endpoint:
    path: /historical-flights
    method: GET
- name: timetable
  endpoint:
    path: /timetable
    method: GET
- name: flights
  endpoint:
    path: /flights
    method: GET
    params:
      access_key: '{{ dlt.secrets[''aviationstack_access_key''] }}'
      callback: null
      limit: 100
      offset: 0
      flight_status: null
      flight_date: null
      dep_iata: null
      arr_iata: null
      dep_icao: null
      arr_icao: null
      airline_name: null
      airline_iata: null
      airline_icao: null
      flight_number: null
      flight_iata: null
      flight_icao: null
      min_delay_dep: null
      min_delay_arr: null
      max_delay_dep: null
      max_delay_arr: null
      arr_scheduled_time_arr: null
      arr_scheduled_time_dep: null
- name: flight_schedules
  endpoint:
    path: /timetable
    method: GET
    data_selector: data
    params:
      iataCode: JFK
      type: departure
- name: flights_future
  endpoint:
    path: /flightsFuture
    method: GET
    data_selector: data
    params:
      iataCode: JFK
      type: arrival
      date: YYYY-MM-DD
      airline_iata: ''
      airline_icao: ''
      flight_number: ''
- name: flights
  endpoint:
    path: /flights
    method: GET
- name: flights
  endpoint:
    path: /flights
    method: GET
    data_selector: results
- name: airports
  endpoint:
    path: /airports
    method: GET
    params:
      search: '{{ search_term }}'
- name: airlines
  endpoint:
    path: /airlines
    method: GET
    params:
      search: '{{ search_term }}'
- name: airplanes
  endpoint:
    path: /airplanes
    method: GET
    params:
      search: '{{ search_term }}'
- name: aircraft_types
  endpoint:
    path: /aircraft_types
    method: GET
    params:
      search: '{{ search_term }}'
- name: taxes
  endpoint:
    path: /taxes
    method: GET
    params:
      search: '{{ search_term }}'
- name: cities
  endpoint:
    path: /cities
    method: GET
    params:
      search: '{{ search_term }}'
- name: countries
  endpoint:
    path: /countries
    method: GET
    params:
      search: '{{ search_term }}'
- name: flights
  endpoint:
    path: /
    method: GET
    params:
      callback: MY_FUNCTION
      lang: fr
- name: routes
  endpoint:
    path: /routes
    method: GET
    data_selector: data
    params:
      limit: 100
      offset: 0
      callback: ''
      flight_number: ''
      dep_iata: ''
      arr_iata: ''
      dep_icao: ''
      arr_icao: ''
      airline_iata: ''
      airline_icao: ''
- name: airports
  endpoint:
    path: /airports
    method: GET
    data_selector: data
    params:
      limit: 100
      offset: 0
      search: null
- name: airlines
  endpoint:
    path: /airlines
    method: GET
    data_selector: data
    params:
      limit: 100
      offset: 0
      search: '{{ search_term }}'
- name: airplanes
  endpoint:
    path: /airplanes
    method: GET
    data_selector: data
    params:
      search: ''
      callback: ''
      limit: 100
      offset: 0
- name: aircraft_types
  endpoint:
    path: /aircraft_types
    method: GET
    data_selector: data
    params:
      search: ''
      callback: ''
      offset: 0
- name: taxes
  endpoint:
    path: /taxes
    method: GET
    params:
      limit: '100'
      offset: '0'
      search: <search_term>
- name: cities
  endpoint:
    path: /cities
    method: GET
    data_selector: data
    params:
      limit: 100
      offset: 0
      search: ''
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: data
    params:
      limit: 100
      offset: 0
      search: '{{ search_term }}'
notes:
- Provides real-time and historical data about flights, airlines, and airports
- 'Rate limit: 1 API call per minute. Exceeding this limit will result in temporary
  access restrictions.'
- API does not include airports with fewer than 10 flights per day, such as CDT
- Rate limitation of one API call per minute; exceeding this limit results in temporary
  access restrictions
- Supports JSONP Callbacks, wrap API response with a function tag.
- Using the lang parameter can slow down API calls due to translations.
- No change to monthly invoice if no overage fees are incurred
- Additional charges may apply if API call limits are consistently exceeded
- Upgrading to a higher plan may be beneficial if API usage consistently exceeds limits
- Maximum limit value is 1000 on and above Professional Plan; default is 100.
- Optional 'search' parameter for autocomplete suggestions available on Basic Plan
  and higher.
- Maximum limit value is 100 below Professional Plan and 1000 on and above Professional
  Plan.
errors:
- code: 401
  message: Invalid API access key was supplied.
- code: 401
  message: No API access key was supplied.
- code: 401
  message: The given user account is inactive.
- code: 403
  message: HTTPS access is not supported on the current subscription plan.
- code: 403
  message: The given API endpoint is not supported on the current subscription plan.
- code: 404
  message: The given API endpoint does not exist.
- code: 404
  message: Resource not found.
- code: 429
  message: The given user account has reached its monthly allowed request volume.
- code: 429
  message: The given user account has reached the rate limit.
- code: 500
  message: An internal error occurred.
- Rate limit exceeded: Reduce frequency of requests or implement backoff and retry
    mechanisms
- QUOTA_REACHED: Monitor API usage to avoid overages; consider upgrading plan if consistently
    hitting limits.
auth_info:
  mentioned_objects: []
client:
  auth:
    type: apikey
    location: query
    header_name: access_key
  base_url: https://api.aviationstack.com
  paginator:
    type: offset
    cursor_param: offset
    page_size_param: limit
    default_page_size: 10
    cursor_path: pagination.offset
source_metadata: null
