resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: place_autocomplete
  endpoint:
    path: /place/autocomplete/json
    method: GET
    data_selector: predictions
    params:
      sensor: 'false'
      types: (regions)
- name: place_details
  endpoint:
    path: /place/details/json
    method: GET
    data_selector: result
    params:
      sensor: 'false'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: geocode
  endpoint:
    path: /json
    method: GET
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: autocomplete
  endpoint:
    path: /autocomplete/json
    method: GET
    data_selector: predictions
    params:
      input: green lanes
      types: (cities)
      key: '*API KEY HERE*'
- name: autocomplete
  endpoint:
    path: /place/autocomplete/json
    method: GET
    params:
      input: va
      sensor: 'false'
      types: (regions)
      key: YOUR_API_KEY
- name: place_details
  endpoint:
    path: /place/details/json
    method: GET
    params:
      reference: CjQtAAAA7uEa6LT_DWvJ-erYl51zOqxcDHT9DMzo6LIQLRIF-g0HekbODavL5hHDleYSioGYEhCULLbxKZBlYZXs-I-EWkGQGhRiXW7LMokjjTp7WZjXE02wNzHkzQ
      sensor: 'false'
      key: YOUR_API_KEY
- name: place_autocomplete
  endpoint:
    path: /place/autocomplete/json
    method: GET
    params:
      sensor: 'false'
      types: (regions)
      key: YOUR_API_KEY
- name: place_details
  endpoint:
    path: /place/details/json
    method: GET
    params:
      sensor: 'false'
      key: YOUR_API_KEY
- name: questions
  endpoint:
    path: /questions
    method: GET
    data_selector: items
- name: answers
  endpoint:
    path: /answers
    method: GET
    data_selector: items
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Stack Overflow Lobby
  endpoint:
    path: /rooms/259507/stack-overflow-lobby
    method: GET
- name: Python
  endpoint:
    path: /rooms/6/python
    method: GET
- name: New Answers to Old Questions Headquarters
  endpoint:
    path: /rooms/126814/new-answers-to-old-questions-headquarters
    method: GET
- name: Charcoal Test SO
  endpoint:
    path: /rooms/202954/charcoal-test-so
    method: GET
- name: SO Close Vote Reviewers
  endpoint:
    path: /rooms/41570/so-close-vote-reviewers
    method: GET
- name: SOBotics
  endpoint:
    path: /rooms/111347/sobotics
    method: GET
- name: KCG
  endpoint:
    path: /rooms/197152/kcg
    method: GET
- name: C#
  endpoint:
    path: /rooms/7/c
    method: GET
- name: Rust
  endpoint:
    path: /rooms/62927/rust
    method: GET
- name: Lobby Trashcan
  endpoint:
    path: /rooms/259694/lobby-trashcan
    method: GET
- name: NAABot
  endpoint:
    path: /rooms/210133/naabot
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: rooms
  endpoint:
    path: /rooms
    method: GET
    data_selector: rooms
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: rooms
  endpoint:
    path: /rooms
    method: GET
    data_selector: rooms
    params: {}
- name: my_table
  endpoint:
    path: /questions/79739025/query-to-set-a-value-to-null-if-it-contains-non-numeric-characters
    method: SELECT
    data_selector: response
    params: {}
- name: dataframe
  endpoint:
    path: /dataframes
    method: GET
    data_selector: records
    params: {}
notes:
- Using componentRestrictions may yield better results for cities and zips.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Requires API Key for requests
- Usage limited to 100,000 requests/day for free with a verified account
- componentRestrictions can limit results to a specific country.
- region and bounds are only informative and not strict restrictions.
- Some objects may return nulls in deeply nested fields
- When using the Google Business API to retrieve locations managed by the end user,
  I get a storeCode.
- Geocoding API not responding fast enough (use Geocoder.configure(:timeout => ...)
  to set limit).
- Using componentRestrictions with 'country' can limit results to specific countries.
- Results may include unwanted entries such as street and company names.
- The region and bounds are not strict restrictions.
- Using componentRestrictions can limit results to specific countries.
- The (cities) type collection instructs the Places service to return results that
  match locality or administrative_area_level_3.
- Using component restrictions with the places API yields better results than with
  the geocoding API.
- The region and bounds parameters are only informative and not strict restrictions.
- Using componentRestrictions with country limits results to that country but may
  include non-city results.
- Can use this with up to 100,000 requests/day for free with a verified account.
- You can use this with up to 100,000 requests/day for free with a verified account.
- API limits apply based on user authentication.
- Uses componentRestrictions to limit results to specific country.
- region and bounds are only informative and not strict restrictions
- componentRestrictions can be used to limit results to a specific country
- This is a pandas DataFrame transformation example.
- Needs API Key
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- The Provided Api Key is invalid
- 'REQUEST_DENIED: API key is invalid or not authorized for this API.'
- 'OVER_QUERY_LIMIT: The request limit for the API has been exceeded.'
- 'REQUEST_DENIED: Check your API key and ensure it has access to the Geocoding API.'
- 'INVALID_REQUEST: Ensure that the request parameters are valid.'
- '400 Bad Request: Check the request parameters.'
- '403 Forbidden: You do not have permission to access this resource.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://maps.googleapis.com/maps/api
  auth:
    type: apikey
    location: query
    header_name: key
source_metadata: null
