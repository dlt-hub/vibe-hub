resources:
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: event
    params: {}
- name: events
  endpoint:
    path: /eventspost
    method: POST
- name: events_batch
  endpoint:
    path: /events/batchpost
    method: POST
- name: events
  endpoint:
    path: /events
    method: POST
- name: batch_events
  endpoint:
    path: /events/batch
    method: POST
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: identifiers
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: payload
- name: trackers
  endpoint:
    path: /trackers
    method: POST
    data_selector: payload
- name: events_batch
  endpoint:
    path: /events/batch
    method: POST
- name: events
  endpoint:
    path: /eventspost
    method: POST
- name: batch_events
  endpoint:
    path: /events/batchpost
    method: POST
- name: events
  endpoint:
    path: /eventspost
    method: POST
    data_selector: eventPayload
- name: events_batch
  endpoint:
    path: /events/batchpost
    method: POST
    data_selector: eventPayload
- name: games
  endpoint:
    path: /gamesget
    method: GET
- name: trackers
  endpoint:
    path: /trackersget
    method: GET
- name: goal_types
  endpoint:
    path: /goal_typesget
    method: GET
- name: audit_logs
  endpoint:
    path: /audit_logsget
    method: GET
- name: users_events
  endpoint:
    path: /reporting/users/eventsget
    method: GET
- name: update
  endpoint:
    path: /update
    method: POST
- name: events
  endpoint:
    path: /eventspost
    method: POST
- name: stats
  endpoint:
    path: /statspost
    method: POST
- name: reporting_goals
  endpoint:
    path: /reporting/goalspost
    method: POST
- name: games
  endpoint:
    path: /gamesget
    method: GET
- name: trackers
  endpoint:
    path: /trackersget
    method: GET
- name: trackers_post
  endpoint:
    path: /trackerspost
    method: POST
- name: goal_types
  endpoint:
    path: /goal_typesget
    method: GET
- name: audit_logs
  endpoint:
    path: /audit_logsget
    method: GET
- name: reporting_users_events
  endpoint:
    path: /reporting/users/eventsget
    method: GET
- name: reporting_users_touchpoints
  endpoint:
    path: /reporting/users/touchpointsget
    method: GET
- name: reporting_users_remove
  endpoint:
    path: /reporting/users/removedel
    method: DELETE
- name: do_not_track
  endpoint:
    path: /games/{game_id}/do_not_trackget
    method: GET
- name: do_not_track_put
  endpoint:
    path: /games/{game_id}/do_not_trackput
    method: PUT
- name: eventspost
  endpoint:
    path: /eventspost
    method: POST
- name: statspost
  endpoint:
    path: /statspost
    method: POST
- name: goalspost
  endpoint:
    path: /reporting/goalspost
    method: POST
- name: stats
  endpoint:
    path: /stats
    method: POST
    data_selector: results
- name: goals
  endpoint:
    path: /reporting/goals
    method: POST
    data_selector: goals
    params:
      game_id: required
      start_datetime: required
      end_datetime: required
      goal_type_ids: ''
      trigger_types: ''
      unattributed: ''
      limit: Defaults to 100000
      after: ''
- name: games
  endpoint:
    path: /games
    method: GET
- name: trackers
  endpoint:
    path: /trackers
    method: GET
    data_selector: trackers
    params: {}
- name: trackers
  endpoint:
    path: /trackers
    method: POST
    data_selector: tracker
    params: {}
- name: goal_types
  endpoint:
    path: /goal_types
    method: GET
- name: audit_logs
  endpoint:
    path: /audit_logs
    method: GET
    data_selector: audit_logs
    params:
      org_id: required
      start_datetime: required
      end_datetime: required
      limit: '100'
      cursor: optional
- name: events
  endpoint:
    path: /reporting/users/events
    method: GET
    data_selector: events
    params:
      user_id: required
      game_id: required
- name: touchpoints
  endpoint:
    path: /reporting/users/touchpoints
    method: GET
    data_selector: clicks
    params:
      user_id: string
      game_id: int32
- name: remove_user
  endpoint:
    path: /reporting/users/remove
    method: DELETE
    params:
      user_id: string
      game_id: int32
- name: do_not_track
  endpoint:
    path: /games/{game_id}/do_not_track
    method: PUT
    data_selector: success
    params: {}
- name: do_not_track
  endpoint:
    path: /games/{game_id}/do_not_track
    method: GET
    params:
      user_id: array of strings
- name: event
  endpoint:
    path: /events
    method: POST
    data_selector: user_id
    params: {}
- name: events
  endpoint:
    path: /reporting/users/events
    method: GET
    data_selector: events
    params:
      user_id: string
      game_id: int32
- name: in_game_event
  endpoint:
    path: /api/in_game_event
    method: POST
    data_selector: event_data
    params:
      event_type: game_launch
      user_id: user_id
      device_identifiers: device_id
      revenue: revenue_amount
- name: Goals
  endpoint:
    path: /docs/configuring-goals
    method: GET
    data_selector: goals
    params: {}
- name: Marketing Touchpoints
  endpoint:
    path: /docs/marketing-measurement#measuring-touchpoints
    method: GET
    data_selector: touchpoints
    params: {}
- name: In-Game Integration
  endpoint:
    path: /docs/rest-api-quick-start
    method: GET
    data_selector: in_game_integration
    params: {}
- name: Web SDK
  endpoint:
    path: /docs/web-sdk-self-distribution
    method: GET
    data_selector: web_sdk
    params: {}
- name: trackers
  endpoint:
    path: /trackers
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: data
    params: {}
- name: install_measurement
  endpoint:
    path: /events
    method: POST
    data_selector: user_id
    params: {}
- name: Reactivation Measurement
  endpoint:
    path: /docs/reactivation-measurement
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: ingame_purchase
  endpoint:
    path: /events
    method: POST
    data_selector: user_id
    params: {}
- name: trackers
  endpoint:
    path: /trackers
    method: POST
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: identifiers
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: ''
    params: {}
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: event_data
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: payload
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: event
    params: {}
- name: event_monitor
  endpoint:
    path: /event-monitor
    method: GET
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: eventData
- name: goals
  endpoint:
    path: /goals
    method: POST
    data_selector: goal
    params: {}
- name: goal_configuration
  endpoint:
    path: /api/v1/goals
    method: GET
    data_selector: goals
    params: {}
- name: Trackers
  endpoint:
    path: /api/trackers
    method: GET
    data_selector: trackers
- name: Dynamic Trackers
  endpoint:
    path: /docs/dynamic-trackers
    method: GET
    data_selector: available_dynamic_tracker_url_parameters
    params: {}
- name: utm_parameters
  endpoint:
    path: /utm/parameters
    method: GET
    data_selector: records
- name: tracker
  endpoint:
    path: /tracker/settings
    method: GET
    data_selector: trackerSettings
- name: attribution_windows
  endpoint:
    path: /attribution/windows
    method: GET
    data_selector: attribution_windows
    params: {}
- name: Web SDK
  endpoint:
    path: /docs/web-sdk-quick-start
    method: GET
    data_selector: records
    params: {}
- name: UTM Parameters
  endpoint:
    path: /docs/utm-parameters
    method: GET
    data_selector: records
    params: {}
- name: reports_dashboard
  endpoint:
    path: /reports/dashboard
    method: GET
    data_selector: reports
    params: {}
- name: reporting_api
  endpoint:
    path: /reporting/api
    method: GET
    data_selector: reports
    params: {}
- name: s3_data_exports
  endpoint:
    path: /s3/data/exports
    method: POST
    data_selector: exports
    params: {}
- name: custom_dashboard
  endpoint:
    path: /custom_dashboards
    method: POST
    data_selector: data
- name: campaigns
  endpoint:
    path: /api/v1/campaigns
    method: GET
    data_selector: data
    params: {}
- name: reports
  endpoint:
    path: /api/v1/reports
    method: GET
    data_selector: data
    params: {}
- name: touchpoint
  endpoint:
    path: /s3/touchpoint
    method: GET
    data_selector: records
- name: event
  endpoint:
    path: /s3/event
    method: GET
    data_selector: records
- name: goal
  endpoint:
    path: /s3/goal
    method: GET
    data_selector: records
- name: external_network_performance
  endpoint:
    path: /s3/external_network_performance
    method: GET
    data_selector: records
- name: steam_utm_analytics
  endpoint:
    path: /s3/steam_utm_analytics
    method: GET
    data_selector: records
- name: Cost Aggregation
  endpoint:
    path: /api/cost-aggregation
    method: GET
- name: Attribution
  endpoint:
    path: /api/attribution
    method: GET
- name: postback_conversions
  endpoint:
    path: /postback/conversions
    method: POST
- name: Reddit Ads Click Tracking
  endpoint:
    path: /c/XXXXXX
    method: GET
    data_selector: tracking_data
- name: Reddit Ads Impression Tracking
  endpoint:
    path: /imgp/XXXXXX
    method: GET
    data_selector: tracking_data
- name: click_url
  endpoint:
    path: /c/XXXXXX
    method: GET
    data_selector: campaign_id
    params:
      campaign: ${CAMPAIGN_ID}
      ad_group: ${INSERTION_ORDER_ID}
      ad: ${CREATIVE_ID}
      site_id: '{UNIVERSAL_SITE_ID}'
      sub_site_id: ${SOURCE_URL_ENC}
      sub1: ${EXCHANGE_ID}
- name: impression_url
  endpoint:
    path: /imgp/XXXXXX
    method: GET
    data_selector: auction_id
    params:
      campaign: ${CAMPAIGN_ID}
      ad_group: ${INSERTION_ORDER_ID}
      ad: ${CREATIVE_ID}
      site_id: '{UNIVERSAL_SITE_ID}'
      sub_site_id: ${SOURCE_URL_ENC}
      sub1: ${EXCHANGE_ID}
      _cbust: ${AUCTION_ID}
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: ''
    params: {}
- name: conversion_data
  endpoint:
    path: /api/conversions
    method: POST
    data_selector: data
    params: {}
- name: Team ID
  endpoint:
    path: /settings/team-settings
    method: GET
    data_selector: team_id
    params: {}
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: ''
    params: {}
- name: api_key
  endpoint:
    path: /settings/in-game-integration/api-keys
    method: GET
- name: team_id
  endpoint:
    path: /settings/team-settings/team-id
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: incrementality_experiment
  endpoint:
    path: /incrementality/experiments
    method: GET
    data_selector: experiments
    params:
      incremental: updated_at
- name: add_game
  endpoint:
    path: /add-game
    method: POST
    data_selector: game_details
    params: {}
- name: Reporting Key
  endpoint:
    path: /api/reporting
    method: GET
    data_selector: data
    params: {}
- name: Aggregate Reporting Key
  endpoint:
    path: /api/aggregate-reporting
    method: GET
    data_selector: data
    params: {}
- name: GDPR Key
  endpoint:
    path: /api/gdpr
    method: GET
    data_selector: data
    params: {}
- name: Audit Key
  endpoint:
    path: /api/audit
    method: GET
    data_selector: data
    params: {}
- name: SAML App Setup
  endpoint:
    path: /app/saml/{org_id}/auth
    method: POST
    data_selector: SAML setup details
    params: {}
- name: Entity ID
  endpoint:
    path: /app/saml/{org_id}/metadata
    method: GET
    data_selector: Entity ID details
    params: {}
- name: activations
  endpoint:
    path: /activations
    method: GET
    data_selector: activations
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
    params: {}
- name: influencer_profile
  endpoint:
    path: /influencer/profiles
    method: GET
    data_selector: profiles
- name: influencer_list
  endpoint:
    path: /influencers/lists
    method: POST
    data_selector: list
    params: {}
- name: influencer_statuses
  endpoint:
    path: /influencer/statuses
    method: GET
    data_selector: statuses
- name: influencer_lists
  endpoint:
    path: /influencer/lists
    method: GET
    data_selector: lists
notes:
- Gamesight helps game companies build their influencer relationships, understand
  their marketing, and grow their community.
- You should pass revenue directly with your events in cases where the Game knows
  the correct revenue amount that a user paid.
- In-game purchases or similar first party transactions are common for this.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The update method provides an interface to extend values that will be used this
  Web SDK instance without overwriting existing settings.
- Use the API Key Management feature to provision keys with the Reporting, Aggregate
  Reporting, or GDPR scopes to use this API.
- Aggregate Reporting API Key is not authorized to pull reports with the user_id group
- Aggregate Reporting API Key is not authorized to pull reports with unattributed
  users
- This should be an API Key with the Advertiser scope
- The URL for this request expired after 30 days.
- Data access endpoint for pulling the recorded list of touchpoints (Clicks + Conversions)
  attributed to a given User ID.
- The player's IP address must be manually passed to the API when events are logged
  from a server.
- The two most primary integration points are at all of your Marketing Touchpoints
  and the In-Game integration.
- The base requirement for the in-game integration is a 'game launch' event is sent
  every time a new session starts for the game.
- The default configuration for the Install goal is to trigger the first time a user
  plays your game.
- Reactivation measurement is based on the same game launch event that powers the
  Install Measurement goal.
- Measures DLC purchases by sending events when a user launches the game.
- Player Retention measurement is based on the same game launch event that powers
  the Install Measurement goal.
- Important to pass the same `user_id` value that you use to identify the user for
  your in-game events.
- Gamesight has a native Referral Code system that allows you to seamlessly combine
  your normal attribution measurement with a Creator Code style system.
- Gamesight updates anonymous events with external ID when linking web and in-game
  activity.
- Requires accurate user_id and external_id for deterministic matching.
- Check out the Use Case guides for common measurement configurations.
- Gamesight can deployed in many different models to meet the compliance and security
  needs of your organization.
- This gives you branded short URLs which are perfect for sharing on social platforms.
- API keys can be generated through the Settings tab on the Gamesight dashboard under
  the In-Game Integration option.
- If you do not have access to this page please contact an Admin for you Game so they
  can grant you the 'Game Integrator' permissions.
- Attribution methods for self-distributed platforms allow for deterministic matching.
- The IP address of the player's device is used as part of the attribution process.
- Files must be immutable. Once scanned, they will not be reprocessed if updated.
- The prefix for files must contain a date component.
- Files must be immutable once written to object storage.
- Delivery frequency can be daily, hourly, or every few minutes.
- Partition structure must contain a date component.
- 'You will need to include the following pieces of information with your request:
  bucket name, access key, secret.'
- Events can be tracked for actions like player progress, in-game purchases, or marketing
  site activity.
- Ensure events are getting posted back to Gamesight
- Check the settings page in Gamesight for event monitoring
- You will need to have the Game Analyst role on your account to access this feature.
- In order to begin using and sending User Profile Metric events to Gamesight, you
  will need to contact Gamesight Support.
- Goals are specific Events or combinations of Events that you are trying to drive
  users to complete.
- Goals can be managed by clicking Settings on the left-hand side of your dashboard's
  navigation.
- Minimum Retrigger Time allows configuration of a goal to trigger after a minimum
  number of days.
- Event Count Trigger allows goals to be configured to trigger on a specific count
  of events.
- Retention Triggers can be set with a minimum and maximum retention window.
- Goal revenue configured through the Gamesight Console will override any revenue
  values that are passed in the event payload.
- Some platforms have specific integrations, please review the Integrations section
  for more details.
- The Tracker name value defines the name that is shown in reporting for any Touchpoints
  that come through this Tracker. Updating this value will change the name displayed
  for this Tracker in all reports.
- Uses the Destination Management tool to save and reuse landing pages between Trackers.
- Destination URL settings can restrict the destination_url parameter on ad tags.
- Keep on reading for some concrete suggestions of how to manage your Trackers at
  scale.
- Archived trackers will still appear in your reports and the tracking links will
  continue to function as normal.
- Click-through Attribution Window defaults to 14 days.
- View-through Attribution Window defaults to 24 hours.
- If there isn't a Gamesight tracking link included in the redirect chain, the postbacks
  tab will be empty.
- ACM integrates with existing UTM structures to automatically measure Gamesight click
  data.
- ACM will only measure traffic that is driven to your marketing site.
- Reports can be exported to CSV for further analysis.
- Real Time Postbacks provide a webhook system for attributed Goals.
- Users can create custom reports through the Custom Reports tooling.
- Reports can be configured to send emails with the report attached as a CSV.
- If the following solutions do not resolve your issue, please contact us through
  live chat on the bottom right of your screen or email us at support@gamesight.io
  and we'll help you get to the bottom of it!
- Custom dashboards are available to Pro and Enterprise tier creators.
- Some networks like Google Ads do not allow for a Geo+Cost breakdown resulting in
  Cost not being available and ROAS not being calculated at a more granular level.
- Gamesight's reporting UI offers many different metrics that you can easily view
  in any of your reporting dashboards through Gamesight Console.
- Scheduled Reporting enables automated, emailed reports sent at chosen times and
  frequencies.
- The export process begins at 00:10 UTC daily and all data is available by 01:00
  UTC at the latest.
- The export process re-exports the last 3 days of data on each run.
- Due to the sensitive nature of these credentials we ask that you use a secure transform
  mechanism such as a one time link to share these details.
- Postbacks are only available for triggered Goals. Postbacks for clicks/impressions
  are not supported.
- When postbacks are created they are scoped to the same Game, Team, and Network as
  the tracker.
- Gamesight automatically handles conversion of currencies into a standard base currency
  (USD) so your reporting always has consistent currency handling.
- Testing Attribution
- When testing attribution, ensure you test a scenario where a player does not consent
  to data processing.
- Gamesight has a number of built-in alerts to notify your team of potential issues
  with your measurement configuration.
- When you create a Network tracker, if any Network-specific configuration is required
  you will be prompted for more details automatically.
- Note that not all networks require additional parameters, so even if you don't see
  Network-specific settings postbacks may still be enabled.
- Gamesight is an IAB TCF v2.0 certified vendor (ID 1055) and can accept TCF compliant
  consent strings if your platform is compatible.
- The previous Facebook Ads integration has been deprecated in favor of this new Meta
  Ads integration.
- Your integration enabling Cost Aggregation is complete.
- Campaigns report showing discrepancies in install/click volume/performance.
- Meta Pixel Error in Meta Ads dashboard (*external_ID* parameter warning) can be
  safely ignored.
- Gamesight requires a specific kind of Conversion Tracker to successfully send conversion
  data back to Google Ads.
- Integration enabling Cost Aggregation is complete!
- Impression tracking is in beta!
- Twitter does not support Cost Aggregation, however you can still sync Twitter ad
  spend into Gamesight via Manual Cost Uploads.
- This integration is only required to post conversions back from Gamesight to Google
  Campaign Manager Floodlight Tags.
- Running ads through Google DV360 directly, outside of Campaign Manager, will result
  in the loss of conversion uploads to floodlights.
- 'US Campaigns Only: Amazon Ads attribution is currently only available for US campaigns.'
- 'Integration Completion Required: Failure to contact us to finalize the integration
  after this step will result in missed clicks and impressions.'
- Conversions will have a small delay before appearing in the Offline Events tracking
  on your Snapchat Events Manager.
- You must take advantage of Manual Cost Uploads to calculate ROAS for Snapchat
- Requires installation of Google Analytics on the website.
- Ensure the Gamesight Web SDK is installed with the ga_enabled flag set to true.
- 'Steam Attribution Limitations: Because of the way Steam handles attribution, they
  are only able to attribute a small minority (typically less than 10%) of all traffic.'
- The Singular integration is currently setup manually on an account-by-account basis.
- If you have disabled third-party data sharing within your Adjust account, the Adjust
  <> Gamesight feature won't work.
- You do not need to proceed to the Campaign / Ad Group / Ad levels of the tracker
  creation for the Quantcast integration.
- Some objects like Contact may return nulls in deeply nested fields
- Data protection by design is a guiding principle throughout the product.
- Minimum information is collected necessary for insights.
- Uses IPv4 only or IPv4/IPv6 dual-stack configurations depending on game infrastructure.
- Uses OAuth2 with refresh token — requires setup of connected app in Gamesight
- 'Incrementality Requires Regional Data: In order for Incrementality to function,
  it requires aggregate regional conversion data (at the state or country level).
  User-level data is not required.'
- Once your incrementality experiment has run for 7 days, Gamesight will begin outputting
  results for analysis.
- Games have unique member lists allowing control of User's permissions on a per-game
  basis.
- Creating separate teams for global colleagues/teams or agencies is recommended.
- Ensure that the tracking domain for your installation of Gamesight matches the one
  above (it may be different than gsght.com).
- After creating a new API Key, the value will only be displayed once!
- SAML single sign-on is available on Gamesight as an add-on service.
- Gamesight does not support SAML Single Logout.
- This is an intentional security feature to prevent idP's from claiming accounts
  that already exist on Gamesight.
- Gather ACS URL and Entity ID from the Gamesight account manager.
- Send the downloaded GoogleIDPMetadata.xml file to the Gamesight account manager.
- The Influencer Campaigns Dashboard can be customized and tailored to your specific
  campaigns and the goals and data that you care most about.
- PDF exports are particularly useful for sharing campaign performance with executives
  or stakeholders who don't have Gamesight access.
- Creating periodic reports for client presentations.
- Archiving campaign results at specific milestones.
- Including campaign metrics in broader marketing reports or presentations.
- Campaign dashboard provides access to influencer metrics and statuses.
- EOC Report highlights key metrics and performance insights.
- Real-time Dashboards - Monitor your Creator Program through the Creator Program
  Dashboard with real-time metrics covering the number of applications/approvals,
  key distribution and redemption status, content/stream data, and top-performing
  members. You will also receive quarterly Creator Program health reporting.
- Creator applications will be authenticated upon submission.
- Creators can authenticate with X/Twitter, Twitch, YouTube, or TikTok.
- Contact your Gamesight representative to enable Discord integration.
- Creator tags can be added, edited, or deleted.
- Tags can be filtered in the platform.
- Allows tracking content produced by creators in campaigns and creator programs.
- Discovery feature allows creation of custom influencer lists using specific search
  parameters.
- Bulk actions are available across all influencer tables in the Gamesight platform.
errors:
- '403: Forbidden'
- '422: Unprocessable Entity'
- 'Input failed validation: required field'
- 'ValidationException: Input failed validation'
- '429 Too Many Requests: If you exceed rate limits'
- '422: Invalid payload'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '422: ValidationException'
- 200 - Result
- '401 Unauthorized: Recheck API key permissions or expiration'
- URL Expired
- Maximum number of files per daily partition is 1,440.
- Maximum file size is 100MiB.
- Maximum errors per file is 1000.
- Due to the sensitive nature of these credentials we ask that you use a secure transform
  mechanism such as a one time link to share these details.
- Double check your Quick Start guide if events are not showing up
- Your User Account Already Triggered this Goal
- Your Browser Session has Already Been Attributed
- Your Touchpoint Occurred after the Goal Event
- The In-Game Integration isn't Complete
- Event Types do not Match Your Goal Triggers
- Your Game Doesn't Provide Event Identifiers Correctly
- 'Goal Volume Drop-off: Triggers when there is a sudden drop in volume for a goal.'
- 'Invalid Location Data: Triggers when we observe an abnormal percentage of events
  being recorded without valid location data.'
- 'Postback Misconfiguration: Triggers when there is a high error rate on one of your
  postbacks.'
- The account may not have correct permissions enabled.
- '401 Unauthorized: Recheck API key'
- Conversions from Gamesight aren't appearing in Google Analytics
- Only a small number of attributed goals are showing up in Google Analytics
auth_info:
  mentioned_objects:
  - Reporting API Key
  - Aggregate Reporting API Key
  - org_audit
  - GDPR API Key
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://gamesight.io
  auth:
    type: oauth2
source_metadata: null
