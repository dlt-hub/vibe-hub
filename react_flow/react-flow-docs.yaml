resources:
- name: notifications
  endpoint:
    path: /notifications
    method: POST
    data_selector: id
    params: {}
- name: players
  endpoint:
    path: /players
    method: GET
    data_selector: players
    params: {}
- name: nodes
  endpoint:
    path: /api/nodes
    method: GET
    data_selector: nodes
    params: {}
- name: edges
  endpoint:
    path: /api/edges
    method: GET
    data_selector: edges
    params: {}
- name: default_styles
  endpoint:
    path: /default/styles
    method: GET
    data_selector: styles
    params: {}
- name: dark_light_mode
  endpoint:
    path: /color/mode
    method: GET
    data_selector: modes
    params: {}
- name: custom_styles
  endpoint:
    path: /custom/styles
    method: GET
    data_selector: styles
    params: {}
- name: initialNodes
  endpoint:
    path: /api/nodes
    method: GET
    data_selector: nodes
    params: {}
- name: initialEdges
  endpoint:
    path: /api/edges
    method: GET
    data_selector: edges
    params: {}
- name: Node
  endpoint:
    path: /learn/customization/custom-nodes
    method: GET
    data_selector: records
    params: {}
- name: Edge
  endpoint:
    path: /learn/customization/custom-nodes
    method: GET
    data_selector: records
    params: {}
- name: NumberInput
  endpoint:
    path: /api/number-input
    method: POST
    data_selector: data
    params: {}
- name: ColorPreview
  endpoint:
    path: /api/color-preview
    method: POST
    data_selector: data
    params: {}
- name: Lightness
  endpoint:
    path: /api/lightness
    method: POST
    data_selector: data
    params: {}
- name: Log
  endpoint:
    path: /api/log
    method: POST
    data_selector: data
    params: {}
- name: Lasso Selection
  endpoint:
    path: /lasso-selection
    method: GET
    data_selector: features
    params: {}
- name: Eraser
  endpoint:
    path: /eraser
    method: GET
    data_selector: features
    params: {}
- name: Rectangle Draw
  endpoint:
    path: /rectangle-draw
    method: GET
    data_selector: features
    params: {}
- name: slideshow_app
  endpoint:
    path: /learn/tutorials/slide-shows-with-react-flow
    method: GET
    data_selector: slides
    params: {}
- name: slide
  endpoint:
    path: /slides
    method: GET
    data_selector: nodes
    params: {}
- name: audio_nodes
  endpoint:
    path: /api/audio/nodes
    method: GET
    data_selector: nodes
    params: {}
- name: audio_context
  endpoint:
    path: /api/audio/context
    method: GET
    data_selector: context
    params: {}
- name: oscillator_node
  endpoint:
    path: /nodes/oscillator
    method: POST
    data_selector: node
    params: {}
- name: gain_node
  endpoint:
    path: /nodes/gain
    method: POST
    data_selector: node
    params: {}
- name: output_node
  endpoint:
    path: /nodes/output
    method: POST
    data_selector: node
    params: {}
- name: Node
  endpoint:
    path: /learn/customization/custom-nodes
    method: GET
    data_selector: records
- name: Edge
  endpoint:
    path: /learn/customization/custom-nodes
    method: GET
    data_selector: records
- name: MindMapNode
  endpoint:
    path: /src/App/MindMapNode
    method: GET
    data_selector: nodeData
    params: {}
- name: MindMapEdge
  endpoint:
    path: /src/App/MindMapEdge
    method: GET
    data_selector: edgeData
    params: {}
- name: NumNode
  endpoint:
    path: /components/nodes/num-node
    method: GET
    data_selector: records
- name: SumNode
  endpoint:
    path: /components/nodes/sum-node
    method: GET
    data_selector: records
- name: DataEdge
  endpoint:
    path: /components/data-edge
    method: GET
    data_selector: records
- name: nodeTypes
  endpoint:
    path: /nodeTypes
    method: GET
    data_selector: nodeTypes
    params: {}
- name: edgeTypes
  endpoint:
    path: /edgeTypes
    method: GET
    data_selector: edgeTypes
    params: {}
- name: slides
  endpoint:
    path: /slides
    method: GET
    data_selector: records
- name: AudioContext
  endpoint:
    path: /api/audio_context
    method: GET
    data_selector: nodes
    params: {}
- name: OscillatorNode
  endpoint:
    path: /api/oscillator_node
    method: GET
    data_selector: nodes
    params: {}
- name: GainNode
  endpoint:
    path: /api/gain_node
    method: GET
    data_selector: nodes
    params: {}
- name: oscillator_node
  endpoint:
    path: /nodes/Osc
    method: GET
    data_selector: nodes
    params: {}
- name: output_node
  endpoint:
    path: /nodes/Out
    method: GET
    data_selector: nodes
    params: {}
- name: common_props
  endpoint:
    path: /api-reference/common-props
    method: GET
    data_selector: commonProps
    params: {}
- name: viewport_props
  endpoint:
    path: /api-reference/viewport-props
    method: GET
    data_selector: viewportProps
    params: {}
- name: edge_props
  endpoint:
    path: /api-reference/edge-props
    method: GET
    data_selector: edgeProps
    params: {}
- name: event_handlers
  endpoint:
    path: /api-reference/event-handlers
    method: GET
    data_selector: eventHandlers
    params: {}
- name: interaction_props
  endpoint:
    path: /api-reference/interaction-props
    method: GET
    data_selector: interactionProps
    params: {}
- name: connection_line_props
  endpoint:
    path: /api-reference/connection-line-props
    method: GET
    data_selector: connectionLineProps
    params: {}
- name: Mind Map App
  endpoint:
    path: /learn/tutorials/mind-map-app-with-react-flow
    method: GET
    data_selector: tutorials
    params: {}
- name: MindMapNode
  endpoint:
    path: /src/App/MindMapNode/index.tsx
    method: GET
- name: MindMapEdge
  endpoint:
    path: /src/App/MindMapEdge/index.tsx
    method: GET
- name: BaseNode
  endpoint:
    path: /ui/components/base-node
    method: GET
    data_selector: components
    params: {}
- name: NodeTooltip
  endpoint:
    path: /components/node-tooltip
    method: GET
    data_selector: components
    params: {}
- name: NumNode
  endpoint:
    path: /components/nodes/num-node
    method: GET
    data_selector: data
    params: {}
- name: SumNode
  endpoint:
    path: /components/nodes/sum-node
    method: GET
    data_selector: data
    params: {}
- name: DataEdge
  endpoint:
    path: /components/data-edge
    method: GET
    data_selector: data
    params: {}
- name: nodes
  endpoint:
    path: /learn/advanced-use/nodes
    method: GET
    data_selector: nodes
    params: {}
- name: edges
  endpoint:
    path: /learn/advanced-use/edges
    method: GET
    data_selector: edges
    params: {}
- name: nodes
  endpoint:
    path: /learn/layouting/sub-flows
    method: GET
- name: edges
  endpoint:
    path: /api-reference/hooks/use-key-press
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: MiniMap
  endpoint:
    path: /api-reference/components/MiniMap
    method: GET
    data_selector: props
    params: {}
- name: ControlButton
  endpoint:
    path: /api-reference/components/control-button
    method: GET
- name: NodeResizer
  endpoint:
    path: /api-reference/components/node-resize-control
    method: GET
- name: NodeToolbar
  endpoint:
    path: /api-reference/components/NodeToolbar
    method: GET
    data_selector: NodeToolbarProps
    params: {}
- name: ViewportPortal
  endpoint:
    path: /api/reference/components/viewport-portal
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: NodeResizer
  endpoint:
    path: /api-reference/components/node-resizer
    method: GET
- name: NodeResizer
  endpoint:
    path: /api-reference/components/NodeResizer
    method: GET
    data_selector: records
- name: Panel
  endpoint:
    path: /api-reference/components/panel
    method: GET
    data_selector: records
    params: {}
- name: nodes_data
  endpoint:
    path: /api/nodes/data
    method: GET
    data_selector: nodes
- name: nodes_data
  endpoint:
    path: /api-reference/hooks/useNodesData
    method: GET
    data_selector: nodesData
    params: {}
- name: internal_node
  endpoint:
    path: /api-reference/hooks/useInternalNode
    method: GET
    data_selector: InternalNode
    params: {}
- name: useNodesData
  endpoint:
    path: /api/hooks/useNodesData
    method: GET
    data_selector: records
- name: useReactFlow
  endpoint:
    path: /api/hooks/useReactFlow
    method: GET
    data_selector: records
- name: nodes_data
  endpoint:
    path: /api/nodes
    method: GET
    data_selector: data
    params: {}
- name: defaultAriaLabelConfig
  endpoint:
    path: /api/aria-label-config
    method: GET
    data_selector: default
    params: {}
- name: Edge
  endpoint:
    path: /api-reference/types/edges
    method: GET
- name: SmoothStepEdge
  endpoint:
    path: /api-reference/types/edges
    method: GET
- name: BezierEdge
  endpoint:
    path: /api-reference/types/edges
    method: GET
- name: HandleConnection
  endpoint:
    path: /api-reference/types/handle
    method: GET
    data_selector: fields
- name: Edge
  endpoint:
    path: /api-reference/types/edges
    method: GET
    data_selector: records
- name: SmoothStepEdge
  endpoint:
    path: /api-reference/types/smoothstepedge
    method: GET
    data_selector: records
- name: BezierEdge
  endpoint:
    path: /api-reference/types/bezieredge
    method: GET
    data_selector: records
- name: NodeDimensionChange
  endpoint:
    path: /api-reference/react-flow#on-nodes-change
    method: GET
    data_selector: NodeChange
    params: {}
- name: NodePositionChange
  endpoint:
    path: /api-reference/react-flow#on-nodes-change
    method: GET
    data_selector: NodeChange
    params: {}
- name: NodeSelectionChange
  endpoint:
    path: /api-reference/react-flow#on-nodes-change
    method: GET
    data_selector: NodeChange
    params: {}
- name: NodeRemoveChange
  endpoint:
    path: /api-reference/react-flow#on-nodes-change
    method: GET
    data_selector: NodeChange
    params: {}
- name: NodeAddChange
  endpoint:
    path: /api-reference/react-flow#on-nodes-change
    method: GET
    data_selector: NodeChange
    params: {}
- name: NodeReplaceChange
  endpoint:
    path: /api-reference/react-flow#on-nodes-change
    method: GET
    data_selector: NodeChange
    params: {}
- name: NodeConnection
  endpoint:
    path: /api-reference/types/node-connection
    method: GET
    data_selector: fields
    params: {}
- name: HandleConnection
  endpoint:
    path: /api-reference/types/handle
    method: GET
    data_selector: fields
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: onEdgesChange
  endpoint:
    path: /api-reference/react-flow#on-edges-change
    method: GET
    data_selector: changes
- name: NodeDimensionChange
  endpoint:
    path: /api-reference/types/node-dimension-change
    method: GET
    data_selector: NodeDimensionChange
- name: NodePositionChange
  endpoint:
    path: /api-reference/types/node-position-change
    method: GET
    data_selector: NodePositionChange
- name: NodeSelectionChange
  endpoint:
    path: /api-reference/types/node-selection-change
    method: GET
    data_selector: NodeSelectionChange
- name: NodeRemoveChange
  endpoint:
    path: /api-reference/types/node-remove-change
    method: GET
    data_selector: NodeRemoveChange
- name: NodeAddChange
  endpoint:
    path: /api-reference/types/node-add-change
    method: GET
    data_selector: NodeAddChange
- name: NodeReplaceChange
  endpoint:
    path: /api-reference/types/node-replace-change
    method: GET
    data_selector: NodeReplaceChange
- name: NodeConnection
  endpoint:
    path: /api-reference/types/node-connection
    method: GET
    data_selector: fields
    params: {}
- name: NodeProps
  endpoint:
    path: /api-reference/types/nodes
    method: GET
    data_selector: fields
- name: onEdgesChange
  endpoint:
    path: /api-reference/react-flow#on-edges-change
    method: GET
    data_selector: changes
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: getConnectedEdges
  endpoint:
    path: /api-reference/utils/getConnectedEdges
    method: GET
    data_selector: EdgeType[]
    params: {}
- name: getIncomers
  endpoint:
    path: /utils/getIncomers
    method: GET
- name: getIncomers
  endpoint:
    path: /api-reference/utils/getIncomers
    method: GET
    data_selector: NodeType[]
    params: {}
- name: getSmoothStepPath
  endpoint:
    path: /api-reference/utils/getSmoothStepPath
    method: GET
    data_selector: returns
    params: {}
- name: getIncomers
  endpoint:
    path: /api-reference/utils/get-incomers
    method: GET
    data_selector: NodeType[]
    params: {}
- name: getOutgoers
  endpoint:
    path: /api-reference/utils/getOutgoers
    method: GET
    data_selector: NodeType[]
    params: {}
- name: node_position_animation
  endpoint:
    path: /examples/nodes/node-position-animation
    method: GET
- name: nodes
  endpoint:
    path: /api-reference/react-flow#event-onnodesdelete
    method: GET
    data_selector: nodes
    params: {}
- name: edges
  endpoint:
    path: /api-reference/utils/get-connected-edges
    method: GET
    data_selector: edges
    params: {}
- name: Delete Edge on Drop
  endpoint:
    path: /examples/edges/delete-edge-on-drop
    method: GET
    data_selector: records
    params: {}
- name: Edge Label Renderer
  endpoint:
    path: /api-reference/components/edge-label-renderer
    method: GET
    data_selector: records
- name: edges
  endpoint:
    path: /api/edges
    method: GET
    data_selector: edges
    params: {}
- name: validation
  endpoint:
    path: /api-reference/components/handle
    method: GET
    data_selector: components
    params: {}
- name: defaultNodes
  endpoint:
    path: /examples/nodes
    method: GET
    data_selector: nodes
    params: {}
- name: defaultEdges
  endpoint:
    path: /examples/edges
    method: GET
    data_selector: edges
    params: {}
- name: editable_edge
  endpoint:
    path: /examples/edges/editable-edge
    method: GET
- name: dndflow
  endpoint:
    path: /dndflow
    method: GET
    data_selector: nodes
    params: {}
- name: Parent Child Relation
  endpoint:
    path: /grouping/parent-child-relation
    method: GET
- name: erasable_node
  endpoint:
    path: /examples/components/ErasableNode
    method: GET
    data_selector: records
- name: erasable_edge
  endpoint:
    path: /examples/components/ErasableEdge
    method: GET
    data_selector: records
- name: eraser
  endpoint:
    path: /examples/components/Eraser
    method: GET
    data_selector: records
- name: download_image
  endpoint:
    path: /examples/misc/download-image
    method: GET
- name: DatabaseSchemaNode
  endpoint:
    path: /ui/components/database-schema-node
    method: GET
- name: PlaceholderNode
  endpoint:
    path: /placeholder-node
    method: GET
    data_selector: records
- name: labeled_handle
  endpoint:
    path: /api/labeled-handle
    method: GET
    data_selector: data
- name: ErasableNode
  endpoint:
    path: /examples/components/ErasableNode
    method: GET
    data_selector: nodes
    params: {}
- name: ErasableEdge
  endpoint:
    path: /examples/components/ErasableEdge
    method: GET
    data_selector: edges
    params: {}
- name: Eraser
  endpoint:
    path: /examples/components/Eraser
    method: GET
    data_selector: eraser
    params: {}
- name: animated_svg_edge
  endpoint:
    path: /components/animated-svg-edge
    method: GET
    data_selector: records
- name: server_side_image_creation
  endpoint:
    path: /examples/misc/server-side-image-creation
    method: GET
- name: node_search
  endpoint:
    path: /node-search
    method: GET
    data_selector: nodes
    params: {}
- name: ZoomSlider
  endpoint:
    path: /registry/components/zoom-slider/
    method: GET
    data_selector: ZoomSlider
- name: zoom_select
  endpoint:
    path: /zoom-select
    method: GET
    data_selector: records
- name: status
  endpoint:
    path: /components/node-status-indicator
    method: GET
    data_selector: status
    params: {}
- name: ViewportLogger
  endpoint:
    path: /learn/advanced-use/devtools-and-debugging
    method: GET
- name: NodeInspector
  endpoint:
    path: /learn/advanced-use/devtools-and-debugging
    method: GET
- name: ChangeLogger
  endpoint:
    path: /learn/advanced-use/devtools-and-debugging
    method: GET
- name: DatabaseSchemaNode
  endpoint:
    path: /ui/components/database-schema-node
    method: GET
- name: Products
  endpoint:
    path: /products
    method: GET
    data_selector: schema
    params: {}
- name: Warehouses
  endpoint:
    path: /warehouses
    method: GET
    data_selector: schema
    params: {}
- name: Suppliers
  endpoint:
    path: /suppliers
    method: GET
    data_selector: schema
    params: {}
- name: Labeled Group Node
  endpoint:
    path: /ui/components/labeled-group-node
    method: GET
    data_selector: records
- name: ButtonEdge
  endpoint:
    path: /button-edge
    method: GET
- name: data_edge
  endpoint:
    path: /data-edge
    method: GET
    data_selector: data
    params: {}
- name: ZoomSlider
  endpoint:
    path: /components/zoom-slider
    method: GET
    data_selector: records
- name: DevTools
  endpoint:
    path: /devtools
    method: GET
    data_selector: data
    params: {}
notes:
- You must import the css stylesheet for React Flow to work.
- The <ReactFlow /> component must have a parent element with a width and height.
- shadcn and tailwind must be configured in your project.
- Components are not black-boxes and can be modified and extended to fit your needs.
- Ensure API key is valid and has necessary permissions
- Requires a valid OneSignal account to obtain API key.
- React Flow is open-source MIT-licensed software
- Last updated on September 17, 2025
- Uses React Flow for interactive flow
- Supports draggable and connectable nodes
- To enable your custom node to connect with other nodes, check out the Handles page
  to learn how to add source and target handles.
- By default React Flow positions a handle in the center of the specified side.
- 'If you need to hide a handle for some reason, you must use visibility: hidden or
  opacity: 0 instead of display: none.'
- 'To make sure our edge labels are interactive and not just for presentation, it
  is important to add `pointer-events: all` to the label’s style.'
- Remember to add the `nodrag` and `nopan` classes to the label to stop mouse events
  from controlling the canvas.
- Adding the class `nodrag` to an element ensures that interacting with it doesn’t
  trigger a drag.
- Adding the `nopan` class prevents mouse events from propagating and stops the viewport
  from panning.
- React Flow requires base styles to function correctly.
- Dagre currently has an open issue that prevents it from laying out sub-flows correctly
  if any nodes in the sub-flow are connected to nodes outside the sub-flow.
- For larger graphs, computing the force layout every render forever is going to incur
  a big performance hit.
- Deprecation of `parentNode` property! We have renamed the `parentNode` option to
  `parentId` in version 11.11.0. The old property is still supported but will be removed
  in version 12.
- The ReactFlowProvider is a context provider.
- It allows access to the internal state of the flow.
- This guide is helpful for learning about ARIA best practices.
- If you want to test mouse events with jest (for example inside your custom nodes),
  you need to disable `d3-drag` as it does not work outside of the browser.
- Uses TypeScript for defining types
- When dealing with a large number of nodes or complex components, managing performance
  can be challenging.
- One of the main reasons for performance issues in React Flow is unnecessary re-renders.
- Components provided as props to the <ReactFlow> component should either be memoized
  using React.memo or declared outside the parent component.
- Functions passed as props to <ReactFlow> should be memoized using useCallback.
- Avoid accessing nodes directly in components to prevent unnecessary re-renders.
- Collapse large node trees to optimize rendering performance.
- Simplify node and edge styles to improve performance.
- To render a custom edge label, wrap it in the <EdgeLabelRenderer /> component.
- 'Add pointer-events: all to the label’s style to ensure it is clickable.'
- Add nodrag and nopan classes to the label to stop mouse events from controlling
  the canvas.
- When dealing with input fields you don’t want to use a nodes data object as UI state
  directly.
- You should find a consistent way of structuring all your node data.
- React Flow checks the positions of the handles and stores that information to draw
  the edges.
- Applying these utility classes helps you control interaction on a granular level.
- Unlike the built-in nodes, custom nodes have no default styles, so feel free to
  use any styling method you prefer.
- React Flow only renders nodes if they have a width and height.
- You can use initialWidth and initialHeight for dynamic dimensions that are not known
  in advance or change.
- You can choose one of the built-in color modes by using the colorMode prop (‘dark’,
  ‘light’ or ‘system’)
- Custom nodes and edges are just React components, and you can use any styling solution
  you’d like to style them.
- The ELK reference is your new best friend
- If you are looking for a more complete whiteboard solution, consider using libraries
  that are specifically designed for whiteboard applications.
- Must always include React Flow’s styles.
- You can style your app as you prefer.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Only run the shim once when requested
- If you want to test mouse events with jest, you need to disable d3-drag as it does
  not work outside of the browser
- Audio nodes can be connected to form an audio-processing graph.
- AudioContext may start in a suspended state.
- Ensure to implement audio context handling properly.
- Remember to connect nodes after creation.
- Uses custom Node and Edge types
- Add more node types.
- Allow nodes to connect to AudioParams on other nodes.
- Use the AnalyserNode to visualize the output of a node or signal.
- If your node tree is deeply nested, rendering all nodes at once can be inefficient.
- Consider reducing complexity on your node styles in these cases.
- Using Zustand for state management
- 'Initial node placed at { x: 0, y: 0 } of type ‘mindmap’'
- Functionality-wise we are finished with our mind map app! We can add new nodes,
  update their labels and move them around.
- React Flow’s documentation is a mix of JavaScript and TypeScript, but for shadcn
  components TypeScript is required!
- When dealing with input fields you don’t want to use a nodes `data` object as UI
  state directly.
- There is a delay in updating the data object and the cursor might jump around erratically
  and lead to unwanted inputs.
- Server side rendering is supported since React Flow 12
- If you expect nodes to have different dimensions on the client or if the dimensions
  should be dynamic based on the content, you can use the initialWidth and initialHeight
  properties.
- nodeTypes or edgeTypes should only be changed dynamically in very rare cases
- The React Flow parent container needs a width and a height to render the graph.
- Mouse events aren’t working consistently when my nodes contain a <canvas /> element.
- Uses new package name @xyflow/react instead of reactflow.
- Node dimensions are now stored in node.measured.
- Each slide of our presentation will be a node on the canvas.
- React Flow 11 only works with React 17 or greater
- Added a tiny “React Flow” attribution to the bottom right
- If you want to remove the attribution in a commercial application, please subscribe
  to “React Flow Pro”
- Uses React Flow for interactive audio graph editing
- Ensure to add 'nodrag' class to input elements to prevent dragging
- Component takes various props, most of which are optional.
- Event handlers should be defined outside of the component or using React's useCallback
  hook to avoid re-render loops.
- The props of this component get exported as ReactFlowProps
- If you’re using a router and want your flow’s state to persist across routes, it’s
  vital that you place the <ReactFlowProvider /> component outside of your router.
- If you have multiple flows on the same page you will need to use a separate <ReactFlowProvider
  /> for each flow.
- When combining multiple <Background /> components it’s important to give each of
  them a unique id prop!
- This project is still in its infancy.
- If you want to use an edge marker with the <BaseEdge /> component, you can pass
  the markerStart or markerEnd props passed to your custom edge through to the <BaseEdge
  /> component.
- The nodeTypes or edgeTypes properties should only be changed dynamically in very
  rare cases.
- Defining nodeTypes or edgeTypes inside of the component render function can cause
  unnecessary re-renders.
- To extend or customize the controls, you can use the `<ControlButton />` component
- The package 'reactflow' has been renamed to '@xyflow/react'.
- All measured node values are now stored in 'node.measured'.
- Node dimensions are specified using 'node.width' and 'node.height' as inline styles.
- 'The <EdgeLabelRenderer /> has no pointer events by default. If you want to add
  mouse interactions you need to set the style pointerEvents: ''all'' and add the
  nopan class on the label or the element you want to interact with.'
- Importing CSS is mandatory. React Flow won’t work if you are not loading the styles!
- Breaking changes include renaming of several props and restructuring of elements
  into nodes and edges.
- The `<MiniMap />` component can be used to render an overview of your flow.
- When combining multiple `<Background />` components it’s important to give each
  of them a unique `id` prop!
- Take a look at the docs for the [NodeProps] type or the guide on [custom nodes]
  to see how to implement your own nodes.
- By default, the toolbar is only visible when a node is selected.
- 'Relying on useEdges unnecessarily can be a common cause of performance issues.
  Whenever any edge changes, this hook will cause the component to re-render. Often
  we actually care about something more specific, like when the number of edges changes:
  where possible try to use useStore instead.'
- This hook was created to make prototyping easier and our documentation examples
  clearer.
- Although it is OK to use this hook in production, in practice you may want to use
  a more sophisticated state management solution like Zustand instead.
- Take a look at the docs for the NodeProps type or the guide on custom nodes to see
  how to implement your own nodes.
- This hook does not rely on a ReactFlowInstance so you are free to use it anywhere
  in your app!
- By default, the toolbar is only visible when a node is selected. If multiple nodes
  are selected it will not be visible to prevent overlapping toolbars or clutter.
  You can override this behavior by setting the isVisible prop to true.
- The `<Panel />` component helps you position content above the viewport.
- This hook should only be used within a custom node or its children.
- 'Relying on `useNodes` unnecessarily can be a common cause of performance issues.
  Whenever any node changes, this hook will cause the component to re-render. Often
  we actually care about something more specific, like when the *number* of nodes
  changes: where possible try to use [`useStore`] instead.'
- No authentication is required for accessing the API.
- This hook lets you subscribe to changes of a specific nodes data object.
- This hook always returns false if the internal nodes array is empty.
- React Flow 12.8.5
- This hook was created to make prototyping easier and our documentation examples
  clearer. Although it is OK to use this hook in production, in practice you may want
  to use a more sophisticated state management solution like Zustand instead.
- This hook can only be used in a component that is a child of a <ReactFlowProvider
  /> or a <ReactFlow /> component.
- useHandleConnections is deprecated in favor of the more capable useNodeConnections
- This hook returns the internal representation of a specific node.
- Components that use this hook will re-render whenever any node changes.
- Unlike useNodes or useEdges, this hook won’t cause your component to re-render when
  state changes. Instead, you can query the state when you need it by using methods
  on the ReactFlowInstance this hook returns.
- No authentication required for the API.
- React Flow provides a flexible library for building node-based applications.
- The three variants are exported as an enum for convenience.
- If you choose to render a custom connection line component, this value will be passed
  to your component as part of its ConnectionLineComponentProps.
- This hook should only be used if there is no other way to access the internal state.
- Choosing whether to calculate values on-demand or to subscribe to changes as they
  happen is a bit of a balancing act.
- Props that expect a `CoordinateExtent` usually default to `[[-∞, -∞], [+∞, +∞]]`
  to represent an unbounded extent.
- Default aria labels for various UI elements.
- 'Default edges available: ''default'', ''straight'', ''step'', ''smoothstep'', ''simplebezier'''
- 'The ConnectionMode enum provides two options for connection behavior in React Flow:
  Strict and Loose.'
- Default edges are available even if you set the edgeTypes prop to something else.
- Supports various node types and connection configurations.
- You shouldn’t try to set the width or height of a node directly. It is calculated
  internally by React Flow and used when rendering the node in the viewport. To control
  a node’s size you should use the style or className props to apply CSS styles instead.
- Default node types are supported.
- This type accepts a generic type argument of custom edge types.
- A Transform has the same properties as the viewport, but they represent different
  things. Make sure you don’t get them muddled up or things will start to look weird!
- If an edge with the same target and source already exists (and the same targetHandle
  and sourceHandle if those are set), then this util won’t add a new edge even if
  the id property is different.
- If you don’t need any custom behavior, the useEdgesState hook conveniently wraps
  this util and React’s useState hook for you and might be simpler to use.
- If you don’t need any custom behavior, the useNodesState hook conveniently wraps
  this util and React’s useState hook for you and might be simpler to use.
- This function returns a tuple (aka a fixed-size array) to make it easier to work
  with multiple edge paths at once.
- No authentication required for accessing the API.
- This function was previously called `getRectOfNodes`.
- This is quite a low-level utility. You might want to look at the fitView or fitBounds
  methods for a more practical api.
- A project by the xyflow team
- We are building and maintaining open source software for node-based UIs since 2019.
- Our onNodesDelete callback is called with one argument - deleted - that is an array
  of every node that was just deleted.
- Returns the bounding box that contains all the given nodes in an array.
- Fed up with tiny little connection handles? Make your whole node act as one!
- 'Content in the toolbar is not scaled as you zoom your flow in and out: this means
  it should always be visible.'
- You can set the borderRadius property to 0 to get a step edge path.
- The animated node has its draggable property set to false while the animation is
  running.
- Uses object destructuring for variables in the example.
- This example makes use of the special internalsSymbol to access properties on a
  node you won’t typically need access to.
- Uses custom node types for resizing UI
- By default the edgesReconnectable is set to true.
- For edges to actually be draggable, it is also necessary to define a onReconnect
  handler.
- This is a Pro example.
- HTML Drag and Drop API is not properly supported on touch devices.
- Custom nodes need to have at least one Handle component to be connectable.
- Properties hidden behind this symbol don’t have the same stability guarantees as
  the public API, so use them with caution.
- For edges to actually be draggable, it is necessary to define a onReconnect handler.
- This example is a demonstration of static layouting. If the nodes or edges in the
  graph change, the layout won’t recalculate!
- Elk has a *huge* amount of options to configure.
- Pointer Events API is slightly more complex to implement but ensures consistent
  behavior across devices.
- You can pass a validation function to the ReactFlow component in order to check
  if a new connection is valid and should be added.
- Base style is mandatory for every flow to work.
- This project is open source and built for node-based UIs.
- This example is a demonstration of static layouting.
- It is possible to do dynamic layouting with dagre.
- Elk has a huge amount of options to configure.
- Recent versions, after 1.11.11, are not exporting images properly and there is an
  open issue for this on Github.
- Uses unique ids for the handles / ports
- '''org.eclipse.elk.portConstraints'' : ''FIXED_ORDER'' for all nodes'
- This is a Pro template.
- Uses React Flow UI to build nodes.
- We are building and maintaining open source software for node-based UIs since 2019
- To customize the visual appearance of your custom nodes, you can simply use Tailwind
  CSS classes.
- 'Status can be one of the following: "success", "loading", "error" and "initial".'
- 'Loading variants supported: "border" and "overlay".'
- Every part of the React Flow UI is customizable.
- The look is taken from the beautiful turbo.build website.
- Docs are now called Learn. This section aims to answer the question of 'how do I
  use X?'
- API is now called Reference. This section answers the question 'what is this thing?'
- A search bar component that can be used to search for nodes in the flow.
- A debugging tool that provides data on the viewport, the state of each node, and
  logs change events.
- New tutorial – Create a slide show presentation with React Flow
- New features and examples added in the latest release.
- Examples for animating nodes and temporary edges have been included.
- 'Support for SSG/SSR: you can now render flows on the server'
- 'Computing flows: new hooks and helper functions to simplify data flows'
- 'Dark mode: a new base style and easy way to switch between built in color modes'
- 'Better DX with TSDoc: we added TSDoc to improve the developer experience'
- API is now called Reference. This section answers the question 'what is this thing?'
  A big change from the previous version of our docs are that all of our types, components,
  hooks, and util functions now get their own page now.
- A new version of React Flow is out. With 12.8.3 you get a lot of bug fixes and a
  great improvement for handles.
errors:
- '401 Unauthorized: API key is missing or invalid'
- '403 Forbidden: API key does not have permission to access this resource'
- '404 Not Found: The requested resource could not be found'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify your API key.'
- Avoid accessing nodes in components to prevent unnecessary re-renders.
- '400 Bad Request: Check if the node type and data are valid'
- '404 Not Found: Ensure the node ID exists'
- '500 Internal Server Error: Check server logs for details'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'InvalidComponent: Ensure that the component is correctly imported and used.'
auth_info:
  mentioned_objects:
  - API Key
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://play.reactflow.dev
source_metadata: null
