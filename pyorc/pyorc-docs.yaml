resources:
- name: CrossSection
  endpoint:
    path: /generated/pyorc.CrossSection
    method: GET
    data_selector: records
- name: CameraConfig
  endpoint:
    path: /generated/pyorc.CameraConfig
    method: GET
    data_selector: records
- name: Video
  endpoint:
    path: /generated/pyorc.Video
    method: GET
    data_selector: records
- name: Frames
  endpoint:
    path: /generated/pyorc.Frames
    method: GET
    data_selector: records
- name: Velocimetry
  endpoint:
    path: /generated/pyorc.Velocimetry
    method: GET
    data_selector: records
- name: transect
  endpoint:
    path: /_generated/pyorc.Velocimetry.get_transect
    method: GET
    data_selector: variables
    params: {}
- name: CameraConfig
  endpoint:
    path: /pyorc/CameraConfig
    method: GET
    data_selector: parameters
- name: transect
  endpoint:
    path: /_generated/pyorc.Velocimetry.get_transect
    method: GET
- name: set_encoding
  endpoint:
    path: /_generated/pyorc.Velocimetry.set_encoding
    method: GET
- name: plot
  endpoint:
    path: /_generated/pyorc.Velocimetry.plot
    method: GET
- name: plot.pcolormesh
  endpoint:
    path: /_generated/pyorc.Velocimetry.plot.pcolormesh
    method: GET
- name: plot.scatter
  endpoint:
    path: /_generated/pyorc.Velocimetry.plot.scatter
    method: GET
- name: plot.streamplot
  endpoint:
    path: /_generated/pyorc.Velocimetry.plot.streamplot
    method: GET
- name: plot.quiver
  endpoint:
    path: /_generated/pyorc.Velocimetry.plot.quiver
    method: GET
- name: Transect
  endpoint:
    path: /_generated/pyorc.Transect
    method: GET
- name: get_river_flow
  endpoint:
    path: /_generated/pyorc.Transect.get_river_flow
    method: GET
- name: get_q
  endpoint:
    path: /_generated/pyorc.Transect.get_q
    method: GET
- name: CameraConfig
  endpoint:
    path: /pyorc.CameraConfig.set_bbox_from_corners
    method: GET
    data_selector: corners
- name: CameraConfig
  endpoint:
    path: /pyorc/CameraConfig/set_bbox_from_width_length
    method: GET
    data_selector: points
- name: set_lens_calibration
  endpoint:
    path: /set_lens_calibration
    method: POST
    data_selector: calibration_results
- name: CameraConfig
  endpoint:
    path: /CameraConfig/set_lens_position
    method: POST
    data_selector: parameters
    params: {}
- name: CameraConfig
  endpoint:
    path: /pyorc/CameraConfig/to_file
    method: POST
    data_selector: CameraConfig
    params: {}
- name: CameraConfig_get_M
  endpoint:
    path: /pyorc/CameraConfig/get_M
    method: GET
    data_selector: M
- name: CameraConfig
  endpoint:
    path: /pyorc/CameraConfig/set_bbox_from_corners
    method: GET
    data_selector: corners
    params: {}
- name: get_bbox
  endpoint:
    path: /pyorc/CameraConfig/get_bbox
    method: GET
    data_selector: bounding_box
    params:
      camera: Optional[bool]
      mode: Optional[Literal['camera', 'geographical', '3d']]
      h_a: Optional[float]
      z_a: Optional[float]
      within_image: Optional[bool]
      expand_exterior: Optional[bool]
- name: CameraConfig
  endpoint:
    path: /pyorc/CameraConfig/set_bbox_from_width_length
    method: POST
    data_selector: points
- name: get_dist_shore
  endpoint:
    path: /pyorc/CameraConfig/get_dist_shore
    method: GET
    data_selector: depths
- name: get_dist_wall
  endpoint:
    path: /pyorc/CameraConfig/get_dist_wall
    method: GET
    data_selector: distance
    params: {}
- name: CameraConfig.set_lens_calibration
  endpoint:
    path: /pyorc/CameraConfig/set_lens_calibration
    method: POST
    data_selector: parameters
    params:
      chessboard_size:
      - 9
      - 6
      max_imgs: 30
      plot: true
      progress_bar: true
- name: get_depth
  endpoint:
    path: /CameraConfig/get_depth
    method: GET
    data_selector: depths
    params: {}
- name: set_lens_position
  endpoint:
    path: /pyorc/CameraConfig/set_lens_position
    method: POST
    data_selector: parameters
- name: get_z_a
  endpoint:
    path: /CameraConfig/get_z_a
    method: GET
    params:
      h_a: optional
- name: CameraConfig
  endpoint:
    path: /CameraConfig/to_file
    method: POST
    data_selector: CameraConfig
    params: {}
- name: project_grid
  endpoint:
    path: /pyorc/CameraConfig/project_grid
    method: GET
    data_selector: parameters
    params: {}
- name: project_points
  endpoint:
    path: /CameraConfig/project_points
    method: GET
    data_selector: points_project
    params: {}
- name: CameraConfig.get_M
  endpoint:
    path: /CameraConfig/get_M
    method: GET
    data_selector: M
    params: {}
- name: unproject_points
  endpoint:
    path: /pyorc/CameraConfig/unproject_points
    method: GET
    data_selector: points_unproject
- name: get_bbox
  endpoint:
    path: /pyorc/CameraConfig/get_bbox
    method: GET
    data_selector: bounding box
- name: z_to_h
  endpoint:
    path: /pyorc/CameraConfig/z_to_h
    method: GET
    data_selector: h
    params: {}
- name: get_dist_shore
  endpoint:
    path: /CameraConfig/get_dist_shore
    method: GET
    data_selector: depths
    params: {}
- name: CameraConfig.h_to_z
  endpoint:
    path: /pyorc/CameraConfig/h_to_z
    method: GET
- name: get_dist_wall
  endpoint:
    path: /CameraConfig/get_dist_wall
    method: GET
    data_selector: distance
- name: CameraConfig.plot
  endpoint:
    path: /pyorc/CameraConfig/plot
    method: GET
- name: CameraConfig.get_depth
  endpoint:
    path: /cameraconfig/get_depth
    method: GET
    data_selector: depths
    params: {}
- name: plot_bbox
  endpoint:
    path: /pyorc/CameraConfig/plot_bbox
    method: GET
    data_selector: p
- name: get_z_a
  endpoint:
    path: /CameraConfig/get_z_a
    method: GET
    data_selector: actual_water_level
- name: project_grid
  endpoint:
    path: /project_grid
    method: POST
    data_selector: xp, yp
    params: {}
- name: project_points
  endpoint:
    path: /pyorc/CameraConfig/project_points
    method: GET
    data_selector: points_project
- name: get_cs_waterlevel
  endpoint:
    path: /CrossSection/get_cs_waterlevel
    method: GET
    data_selector: LineString
- name: unproject_points
  endpoint:
    path: /CameraConfig/unproject_points
    method: GET
- name: get_csl_point
  endpoint:
    path: /CrossSection/get_csl_point
    method: GET
    data_selector: points
- name: z_to_h
  endpoint:
    path: /pyorc/CameraConfig/z_to_h
    method: GET
    data_selector: h
    params: {}
- name: CameraConfig.h_to_z
  endpoint:
    path: /pyorc/CameraConfig/h_to_z
    method: GET
    data_selector: z
    params: {}
- name: get_csl_line
  endpoint:
    path: /CrossSection/get_csl_line
    method: GET
    data_selector: LineString
- name: get_csl_pol
  endpoint:
    path: /CrossSection/get_csl_pol
    method: GET
- name: CameraConfig.plot
  endpoint:
    path: /pyorc/CameraConfig/plot
    method: GET
    data_selector: axes
    params:
      figsize: (13, 8)
      buffer: 0.0005
      zoom_level: 19
      mode: geographical
      pose_length: 1.0
- name: get_bottom_surface
  endpoint:
    path: /CrossSection/get_bottom_surface
    method: GET
    data_selector: polygon
    params:
      length: 2.0
      offset: 0.0
      camera: false
      swap_y_coords: false
- name: plot_bbox
  endpoint:
    path: /pyorc.CameraConfig.plot_bbox
    method: GET
    data_selector: p
- name: get_planar_surface
  endpoint:
    path: /CrossSection/get_planar_surface
    method: GET
    data_selector: Polygon
    params:
      h: water level [m]
      length: '2.0'
      offset: '0.0'
      camera: 'False'
      swap_y_coords: 'False'
- name: wetted_surface
  endpoint:
    path: /CrossSection/get_wetted_surface
    method: GET
    data_selector: Polygon
    params: {}
- name: get_wetted_surface_sz
  endpoint:
    path: /CrossSection/get_wetted_surface_sz
    method: GET
    data_selector: geometry.Polygon
    params:
      h: float
- name: get_cs_waterlevel
  endpoint:
    path: /CrossSection/get_cs_waterlevel
    method: GET
    data_selector: LineString
- name: get_line_of_interest
  endpoint:
    path: /CrossSection/get_line_of_interest
    method: GET
    data_selector: List[float]
    params:
      bank: far
- name: get_csl_point
  endpoint:
    path: /CrossSection/get_csl_point
    method: GET
    data_selector: List[Point]
- name: CrossSection.plot
  endpoint:
    path: /CrossSection/plot
    method: GET
    data_selector: axes
- name: get_csl_line
  endpoint:
    path: /CrossSection/get_csl_line
    method: GET
    data_selector: List[LineString]
    params: {}
- name: CrossSection.plot_cs
  endpoint:
    path: pyorc.CrossSection.plot_cs
    method: GET
    data_selector: parameters
    params: {}
- name: get_csl_pol
  endpoint:
    path: /CrossSection/get_csl_pol
    method: GET
- name: get_bottom_surface
  endpoint:
    path: /pyorc/CrossSection/get_bottom_surface
    method: GET
    data_selector: polygon
    params: {}
- name: get_planar_surface
  endpoint:
    path: /CrossSection/get_planar_surface
    method: GET
    data_selector: Polygon
    params: {}
- name: plot_planar_surface
  endpoint:
    path: /CrossSection/plot_planar_surface
    method: GET
    data_selector: parameters
- name: get_wetted_surface
  endpoint:
    path: /CrossSection/get_wetted_surface
    method: GET
    data_selector: Polygon
    params: {}
- name: get_wetted_surface_sz
  endpoint:
    path: /CrossSection/get_wetted_surface_sz
    method: GET
    data_selector: geometry.Polygon
    params: {}
- name: get_line_of_interest
  endpoint:
    path: /CrossSection/get_line_of_interest
    method: GET
    data_selector: points_of_interest
    params:
      bank: far
- name: plot_bottom_surface
  endpoint:
    path: /CrossSection/plot_bottom_surface
    method: GET
    data_selector: parameters
    params: {}
- name: plot_wetted_surface
  endpoint:
    path: /pyorc/CrossSection/plot_wetted_surface
    method: GET
    data_selector: none
    params: {}
- name: detect_water_level
  endpoint:
    path: /CrossSection/detect_water_level
    method: GET
    data_selector: water_level
    params: {}
- name: CrossSectionPlot
  endpoint:
    path: /pyorc/CrossSection/plot
    method: GET
    data_selector: axes
    params:
      length: 2.0
      offset: 0.0
      camera: false
      planar: true
      bottom: true
      wetted: true
      swap_y_coords: false
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: frames
- name: CrossSection.plot_cs
  endpoint:
    path: /pyorc/CrossSection/plot_cs
    method: GET
- name: set_mask_from_exterior
  endpoint:
    path: /video/set_mask_from_exterior
    method: POST
    data_selector: self.mask
    params: {}
- name: plot_planar_surface
  endpoint:
    path: /pyorc/CrossSection/plot_planar_surface
    method: GET
    data_selector: plot
- name: plot_bottom_surface
  endpoint:
    path: /pyorc/CrossSection/plot_bottom_surface
    method: GET
    data_selector: parameters
    params: {}
- name: get_frame
  endpoint:
    path: /Video/get_frame
    method: GET
    data_selector: frame
    params: {}
- name: get_frames
  endpoint:
    path: /pyorc.Video/get_frames
    method: GET
    data_selector: frames
- name: plot_wetted_surface
  endpoint:
    path: /pyorc/CrossSection/plot_wetted_surface
    method: GET
    data_selector: parameters
- name: get_frames_chunk
  endpoint:
    path: /Video/get_frames_chunk
    method: GET
    data_selector: frame
    params: {}
- name: detect_water_level
  endpoint:
    path: pyorc.CrossSection.detect_water_level
    method: GET
    data_selector: water level
    params: {}
- name: get_ms
  endpoint:
    path: /Video/get_ms
    method: GET
    data_selector: stabilization_transforms
    params: {}
- name: video
  endpoint:
    path: /pyorc/video
    method: GET
    data_selector: video_data
- name: Frames
  endpoint:
    path: /pyorc/Frames
    method: GET
    data_selector: xarray_obj
    params: {}
- name: edge_detect
  endpoint:
    path: /edge_detect
    method: POST
    data_selector: filtered_frames
    params:
      wdw_1: 2
      wdw_2: 4
- name: Video
  endpoint:
    path: /Video/set_mask_from_exterior
    method: POST
    data_selector: self.mask
    params: {}
- name: minmax
  endpoint:
    path: /Frames/minmax
    method: GET
    data_selector: Treated frames
- name: get_frame
  endpoint:
    path: /Video/get_frame
    method: GET
    data_selector: frame
    params: {}
- name: Frames.normalize
  endpoint:
    path: /Frames/normalize
    method: GET
    data_selector: normalized frames
    params:
      samples: 15
- name: get_frames
  endpoint:
    path: /Video/get_frames
    method: GET
    data_selector: frames
    params:
      method: grayscale
- name: reduce_rolling
  endpoint:
    path: /Frames/reduce_rolling
    method: GET
    data_selector: filtered frames
    params:
      samples: 25
- name: get_frames_chunk
  endpoint:
    path: /Video/get_frames_chunk
    method: GET
    data_selector: frame
    params: {}
- name: get_ms
  endpoint:
    path: /Video/get_ms
    method: GET
    data_selector: stabilization_transforms
- name: smooth
  endpoint:
    path: /Frames/smooth
    method: GET
    data_selector: da
    params:
      wdw: 1
- name: Frames
  endpoint:
    path: /pyorc/Frames
    method: GET
    data_selector: frames_data
- name: time_diff
  endpoint:
    path: /Frames/time_diff
    method: GET
    data_selector: da
    params:
      thres: 2
      abs: false
- name: edge_detect
  endpoint:
    path: /Frames/edge_detect
    method: GET
    data_selector: filtered frames
    params:
      wdw_1: 2
      wdw_2: 4
- name: project
  endpoint:
    path: /Frames/project
    method: GET
    data_selector: frames
    params: {}
- name: minmax
  endpoint:
    path: /Frames/minmax
    method: GET
    data_selector: Treated frames
- name: get_piv
  endpoint:
    path: /Frames/get_piv
    method: GET
    data_selector: Dataset
    params: {}
- name: Frames.normalize
  endpoint:
    path: /Frames/normalize
    method: GET
    data_selector: normalized frames
    params:
      samples: 15
- name: Frames.plot
  endpoint:
    path: /pyorc/Frames/plot
    method: GET
    data_selector: null
    params: {}
- name: reduce_rolling
  endpoint:
    path: /Frames/reduce_rolling
    method: GET
    data_selector: da
    params:
      samples: 25
- name: Frames.to_ani
  endpoint:
    path: /Frames/to_ani
    method: POST
- name: Frames.to_video
  endpoint:
    path: /Frames/to_video
    method: GET
    data_selector: frames
    params: {}
- name: Velocimetry
  endpoint:
    path: /pyorc/Velocimetry
    method: GET
    data_selector: xarray_obj
- name: smooth
  endpoint:
    path: /Frames/smooth
    method: GET
    data_selector: filtered frames
    params:
      wdw: 1
- name: time_diff
  endpoint:
    path: /Frames/time_diff
    method: GET
    data_selector: da
    params:
      thres: 2
      abs: false
- name: mask_window_mean
  endpoint:
    path: /pyorc/Velocimetry/mask/window_mean
    method: GET
    data_selector: mask
    params: {}
- name: frames_project
  endpoint:
    path: /Frames/project
    method: POST
    data_selector: frames
    params: {}
- name: window_nan
  endpoint:
    path: /pyorc/Velocimetry/mask/window_nan
    method: GET
    data_selector: mask
- name: get_piv
  endpoint:
    path: /Frames/get_piv
    method: GET
    data_selector: Dataset
    params: {}
- name: Frames.plot
  endpoint:
    path: /frames/plot
    method: GET
    data_selector: p
- name: get_transect
  endpoint:
    path: /pyorc/Velocimetry/get_transect
    method: GET
    data_selector: ds_points
- name: Frames.to_ani
  endpoint:
    path: Frames.to_ani
    method: GET
- name: Velocimetry
  endpoint:
    path: /velocimetry/set_encoding
    method: SET
    data_selector: enc_pars
- name: Frames.to_video
  endpoint:
    path: /Frames/to_video
    method: POST
    data_selector: frames
    params: {}
- name: velocimetry_data
  endpoint:
    path: /velocimetry
    method: GET
    data_selector: data
- name: plot_pcolormesh
  endpoint:
    path: /Velocimetry/plot/pcolormesh
    method: GET
- name: scatter_plot
  endpoint:
    path: /Velocimetry/plot/scatter
    method: GET
    data_selector: artist
- name: streamplot
  endpoint:
    path: /Velocimetry/plot/streamplot
    method: GET
    data_selector: artist
    params: {}
- name: quiver_plot
  endpoint:
    path: /pyorc/Velocimetry/plot/quiver
    method: GET
- name: window_mean
  endpoint:
    path: /pyorc/Velocimetry/mask/window_mean
    method: GET
    data_selector: mask
    params:
      tolerance: 0.7
      wdw: 1
      mode: or
- name: transect
  endpoint:
    path: /transect
    method: GET
    data_selector: xarray_obj
    params: {}
- name: window_nan
  endpoint:
    path: /pyorc/Velocimetry/mask/window_nan
    method: GET
    data_selector: mask
    params:
      tolerance: 0.3
      wdw: 1
- name: get_xyz_perspective
  endpoint:
    path: /get_xyz_perspective
    method: GET
    data_selector: cols, rows
    params: {}
- name: get_transect
  endpoint:
    path: pyorc/Velocimetry.get_transect
    method: GET
    data_selector: ds_points
- name: set_encoding
  endpoint:
    path: /Velocimetry/set_encoding
    method: POST
    data_selector: enc_pars
    params: {}
- name: get_depth_perspective
  endpoint:
    path: /get_depth_perspective
    method: GET
    data_selector: depth perspective
    params:
      h: float
      sample_size: 1000
      interval: 25
- name: Velocimetry.plot.pcolormesh
  endpoint:
    path: /Velocimetry/plot/pcolormesh
    method: GET
    data_selector: artist
- name: transect_perspective
  endpoint:
    path: /get_transect_perspective
    method: GET
    data_selector: array of projected transect points
    params: {}
- name: scatter_plot
  endpoint:
    path: Velocimetry.plot.scatter
    method: GET
- name: get_wetted_perspective
  endpoint:
    path: /get_wetted_perspective
    method: GET
    data_selector: points
    params:
      h: float
      sample_size: '1000'
- name: streamplot
  endpoint:
    path: /Velocimetry/plot/streamplot
    method: GET
- name: get_river_flow
  endpoint:
    path: Transect.get_river_flow
    method: GET
    data_selector: Dataset
    params:
      q_name: q
      discharge_name: river_flow
- name: quiver
  endpoint:
    path: /Velocimetry/plot/quiver
    method: GET
    data_selector: artist
- name: get_q
  endpoint:
    path: /transect/get_q
    method: GET
    data_selector: ds
    params:
      v_corr: 0.9
      fill_method: zeros
- name: transect
  endpoint:
    path: /transect
    method: GET
    data_selector: records
- name: quiver_plot
  endpoint:
    path: /Transect/plot/quiver
    method: GET
    data_selector: artist
    params: {}
- name: scatter
  endpoint:
    path: /pyorc/Transect/plot/scatter
    method: GET
    data_selector: artist
- name: vector_to_scalar
  endpoint:
    path: /Transect/vector_to_scalar
    method: GET
    data_selector: da
- name: get_xyz_perspective
  endpoint:
    path: /Transect/get_xyz_perspective
    method: GET
    data_selector: cols, rows
    params:
      mask_outside: true
- name: cross_section
  endpoint:
    path: /ngwerere/cross_section2.geojson
    method: GET
    data_selector: cross_section
    params: {}
- name: video
  endpoint:
    path: /ngwerere/ngwerere_20191103.mp4
    method: GET
    data_selector: video
    params: {}
- name: get_depth_perspective
  endpoint:
    path: /Transect/get_depth_perspective
    method: GET
    data_selector: depth perspective
    params:
      h: float
      sample_size: '1000'
      interval: '25'
- name: camera_configuration
  endpoint:
    path: /setup/camera/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: get_transect_perspective
  endpoint:
    path: /transect/get_transect_perspective
    method: GET
    data_selector: array of projected transect points based on the camera configuration
      and at given water level
    params: {}
- name: get_wetted_perspective
  endpoint:
    path: /get_wetted_perspective
    method: GET
    data_selector: ndarray
    params:
      h: float
      sample_size: int
- name: video
  endpoint:
    path: /video/analyze
    method: POST
    data_selector: results
- name: get_river_flow
  endpoint:
    path: /get_river_flow
    method: GET
    data_selector: quantiles
    params:
      q_name: q
      discharge_name: river_flow
- name: get_q
  endpoint:
    path: /get_q
    method: GET
    data_selector: ds
    params:
      v_corr: 0.9
      fill_method: zeros
- name: frames
  endpoint:
    path: /get_frames
    method: GET
    data_selector: frames
- name: quiver_plot
  endpoint:
    path: /Transect/plot/quiver
    method: POST
    data_selector: artist
    params: {}
- name: frames
  endpoint:
    path: /get_piv
    method: GET
    data_selector: piv
    params: {}
- name: transect_plot_scatter
  endpoint:
    path: /transect/plot/scatter
    method: GET
    data_selector: artist
    params: {}
- name: velocimetry
  endpoint:
    path: /velocimetry
    method: GET
    data_selector: results
- name: camera_configuration
  endpoint:
    path: /camera/configuration
    method: POST
    data_selector: config
    params: {}
- name: transect
  endpoint:
    path: /velocimetry/get_transect
    method: GET
    data_selector: records
    params: {}
- name: camera_configuration
  endpoint:
    path: /load_camera_config
    method: POST
    data_selector: camera_config
    params: {}
- name: video_analysis
  endpoint:
    path: /analyze_video
    method: POST
    data_selector: analysis_results
    params: {}
- name: camera_config
  endpoint:
    path: /camera/config
    method: GET
    data_selector: records
- name: h_a
  endpoint:
    path: /h/a
    method: GET
    data_selector: records
- name: frames
  endpoint:
    path: /get_frames
    method: GET
    data_selector: frames
    params: {}
- name: velocimetry_results
  endpoint:
    path: /velocimetry/results
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: camera_config
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: ds_points_q
  endpoint:
    path: /v_eff
    method: GET
    data_selector: quantile
    params: {}
- name: ds_points_q2
  endpoint:
    path: /v_eff
    method: GET
    data_selector: quantile
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: camera_config
  endpoint:
    path: /services/data/vXX.X/sobjects/CameraConfig
    method: GET
    data_selector: records
    params: {}
- name: camera_config
  endpoint:
    path: /camera/config
    method: POST
    data_selector: config
    params:
      height: 720
      width: 1280
- name: camera_settings
  endpoint:
    path: /camera/settings
    method: GET
    data_selector: settings
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: camera_config
  endpoint:
    path: /camera_calibration
    method: POST
    data_selector: results
notes:
- We highly recommend to use the excellent xarray manual side-by-side with pyorc to
  understand how to effectively work with the xarray ecosystem.
- Camera configuration contains information about the perspective of the camera.
- The points are provided in the original camera perspective as [col, row] and require
  that a water level has already been set in order to project them in a feasible way.
- This option is deprecated, instead use mode='camera'.
- CRS consistency between the cross-section and camera configuration is guaranteed.
- ValueError – Raised if the CRS is defined for only one of camera_config or cross_section,
  as CRS for both or neither must be specified for consistency.
- TypeError – Raised if cross_section is neither of type GeoDataFrame nor a list of
  lists structure.
- Default start_frame is 0
- Default freq is 1
- Default chunksize is 20
- Default progress is True
- Frames from the input object are written into a video file. The format and frame
  rate can be customized as per user preference or derived automatically from the
  input object.
- This function does not work appropriately, if the expected angle (+/- anglebounds)
  are within range of zero, as zero is the same as 2*pi.
- Mask values when their value deviates significantly from mean.
- Meant to remove isolated velocity estimates.
- This functionality may be moved to a different subclass in later releases.
- This reduces the required storage for this dataset significantly, when stored to
  disk in e.g. a netcdf file using xarray.Dataset.to_netcdf.
- Returns interpolated data at the supplied x and y coordinates over quantiles
- Uses a camera configuration and a cross section to estimate water levels.
- Known circumstances where detection may not work include dark sand, shaded areas,
  and overhanging vegetation.
- Camera configuration requires specific parameters such as ground-control points
  and resolution.
- Uses a predefined camera configuration for analyzing videos.
- Stabilization can be applied using pixel coordinates.
- The frames are automatically grayscaled and all frames are extracted.
- The frames object is really a xarray.DataFrame object, with some additional functionalities
  under the method .frames.
- The default is to use OpenCV methods, remove method="numpy" to try that.
- Uses numba engine for PIV computation which is faster than openpiv.
- No water level is provided. Camera configuration reference water level is used.
- Use common sense if the situation allows for water level detection with this method.
- Cross sections must be provided in the same vertical reference as the water level
  was measured in.
- Coordinates of the cross sections are in UTM 35S coordinates.
- Camera configuration must include ground-control points and area of interest.
- Uses median of the velocity in a larger window with default wdw=1 which means a
  surrounding window of 3x3 is used.
- Uses a specific camera configuration for video analysis.
- Some objects like Contact may return nulls in deeply nested fields
- Uses numba engine for PIV computations, requires version >= 0.7.0
- Uses a NetCDF file for storing results
- Supports augmented reality plotting
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses median window to sample velocities.
- Rolling mean applied over 4 time steps.
- The diversity in quantile values can be because of many reasons and should be considered
  highly conservative.
- The real uncertainty is likely to be smaller in case velocities are well sampled.
- Some objects like CameraConfig may return nulls in deeply nested fields
- Video calibration requires a video with chessboard patterns.
- Calibration may not be necessary for lenses with little distortion.
- Resolution is set to 0.01
- Height is 1080 and width is 1920
- The real uncertainty is likely to be smaller in case velocities are well sampled.
  In case many velocities are filled in with interpolation, the uncertainty may also
  be larger.
- Reasons for variability include correlation of velocity estimates for the same quantile,
  variability in frame rates of video, and remaining uncertainties in the PIV solution.
- The algorithm uses automatic detection of chessboard corners.
errors:
- 'ValueError: Raised if the CRS is defined for only one of camera_config or cross_section,
  as CRS for both or neither must be specified for consistency.'
- 'TypeError: Raised if cross_section is neither of type GeoDataFrame nor a list of
  lists structure.'
- 'ValueError: Raised if the CRS is defined for only one of camera_config or cross_section.'
- Known circumstances where things may not work include dark sand looking like water,
  shaded areas, non-moving water with mirroring reflections, and overhanging vegetation.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'AssertionError: A minimum of 5 frames with chessboard patterns must be available.'
- 'AssertionError: A minimum of 5 frames with chessboard patterns must be available,
  only 0 found.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://localdevices.org
  headers:
    Accept: application/json
source_metadata: null
