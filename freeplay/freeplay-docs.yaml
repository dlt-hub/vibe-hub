resources:
- name: prompt_template
  endpoint:
    path: /projects/<project-id>/prompt-templates
    method: GET
    data_selector: templates
- name: session
  endpoint:
    path: /projects/<project-id>/sessions
    method: GET
    data_selector: sessions
- name: sessions
  endpoint:
    path: /sessions
    method: GET
    data_selector: test_cases
    params:
      page: 1
      page_size: 10
- name: completions
  endpoint:
    path: /sessions/<session-id>/completions
    method: POST
    data_selector: completion_id
    params: {}
- name: test_runs
  endpoint:
    path: /test-runs
    method: POST
    data_selector: test_run_id
    params:
      dataset_name: Example Tests
- name: sessions
  endpoint:
    path: /sessions
    method: GET
    data_selector: sessions
    params: {}
- name: test_runs
  endpoint:
    path: /test-runs
    method: GET
    data_selector: test_runs
    params: {}
- name: trace_feedback
  endpoint:
    path: /api/v2/projects/<project-id>/trace-feedback/id/<trace_id>
    method: POST
- name: datasets
  endpoint:
    path: /api/v2/projects/<project-id>/datasets
    method: GET
- name: completions
  endpoint:
    path: /api/v2/projects/<project-id>/completions
    method: GET
- name: sessions
  endpoint:
    path: /api/v2/projects/<project-id>/sessions
    method: GET
    data_selector: sessions
- name: test_runs
  endpoint:
    path: /api/v2/projects/<project-id>/test-runs
    method: GET
    data_selector: test_runs
- name: create_trace_feedback
  endpoint:
    path: /id/<trace_id>
    method: POST
- name: retrieve_dataset_metadata_by_name
  endpoint:
    path: /name/<dataset-name>
    method: GET
- name: retrieve_dataset_examples_by_name
  endpoint:
    path: /name/<dataset-name>/test-cases
    method: GET
- name: statistics
  endpoint:
    path: /projects/{project_id}/completions/statistics/{prompt_template_id}
    method: POST
    data_selector: summary_info
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: sessionInfo
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: recordResponse
- name: prompt_templates
  endpoint:
    path: /download
    method: GET
    data_selector: prompts
    params:
      project_id: your-project-id
      environment: prod
      output_dir: my_freeplay_prompts
- name: download_all_prompts
  endpoint:
    path: /download-all
    method: GET
    data_selector: prompts
    params:
      environment: prod
      output_dir: my_freeplay_prompts
- name: human_evaluation
  endpoint:
    path: /docs/human-evaluations
    method: GET
    data_selector: evaluations
    params: {}
- name: model_graded_evaluation
  endpoint:
    path: /docs/code-evaluations-1
    method: GET
    data_selector: evaluations
    params: {}
- name: code_evaluation
  endpoint:
    path: /docs/code-evaluations
    method: GET
    data_selector: evaluations
    params: {}
- name: test_run
  endpoint:
    path: /test_runs
    method: POST
    data_selector: test_run
    params: {}
- name: recording
  endpoint:
    path: /recordings
    method: POST
    data_selector: recording
    params: {}
- name: test_run
  endpoint:
    path: /test_runs
    method: POST
    data_selector: test_run
    params: {}
- name: prompt_template
  endpoint:
    path: /prompts
    method: GET
    data_selector: template
    params: {}
- name: session
  endpoint:
    path: /sessions
    method: POST
    data_selector: session
    params: {}
- name: trace
  endpoint:
    path: /traces
    method: POST
    data_selector: trace
    params: {}
- name: completions
  endpoint:
    path: /api/completions
    method: GET
    data_selector: records
- name: traces
  endpoint:
    path: /api/traces
    method: GET
    data_selector: records
- name: sessions
  endpoint:
    path: /api/sessions
    method: GET
    data_selector: records
- name: multimodal_data
  endpoint:
    path: /multimodal/data
    method: GET
    data_selector: data
    params: {}
- name: roles
  endpoint:
    path: /docs/role-based-access-controls
    method: GET
    data_selector: roles
    params: {}
- name: project_permissions
  endpoint:
    path: /docs/project-level-permissions
    method: GET
    data_selector: project_permissions
    params: {}
- name: service_accounts
  endpoint:
    path: /docs/service-accounts
    method: GET
    data_selector: service_accounts
    params: {}
- name: Azure OpenAI
  endpoint:
    path: /models
    method: POST
- name: Amazon Bedrock
  endpoint:
    path: /invoke
    method: POST
- name: bedrock_model
  endpoint:
    path: /invokeModel
    method: POST
- name: prompt_template
  endpoint:
    path: /prompts
    method: GET
    data_selector: prompts
    params: {}
- name: formatted_prompt
  endpoint:
    path: /prompts/formatted
    method: GET
    data_selector: formatted_prompt
    params: {}
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: completionId
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: formattedPrompt
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: sessionInfo
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: recordResponse
    params: {}
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: sessionInfo
    params: {}
- name: prompts
  endpoint:
    path: /prompts/get_formatted
    method: GET
    data_selector: formattedPrompt
    params:
      project_id: project_id
      template_name: template_name
      environment: latest
      variables: prompt_vars
- name: session
  endpoint:
    path: /sessions
    method: POST
    data_selector: session
- name: prompt
  endpoint:
    path: /prompts/formatted
    method: GET
    data_selector: formatted_prompt
- name: chat_response
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: chat_response
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: prompts
    params: {}
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: recording
    params: {}
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: session
    params: {}
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: data
    params: {}
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: data
    params: {}
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: data
    params: {}
- name: recording
  endpoint:
    path: /recordings
    method: POST
    data_selector: recordResponse
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: formatted_prompt
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: data
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: data
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: data
- name: recordings
  endpoint:
    path: /recordings/create
    method: POST
    data_selector: RecordInfo
    params: {}
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: prompts
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: recording
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: session
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: completion_id
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: formatted_prompt
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: session_info
- name: recordings
  endpoint:
    path: /recordings
    method: POST
- name: prompts
  endpoint:
    path: /prompts
    method: GET
- name: sessions
  endpoint:
    path: /sessions
    method: POST
- name: recordings
  endpoint:
    path: /recordings
    method: POST
- name: prompts
  endpoint:
    path: /prompts
    method: GET
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: recordInfo
    params: {}
- name: prompts
  endpoint:
    path: /prompts/formatted
    method: GET
    data_selector: formattedPrompt
    params: {}
- name: prompt_template
  endpoint:
    path: /prompts
    method: GET
    data_selector: templates
    params: {}
- name: recording
  endpoint:
    path: /recordings
    method: POST
    data_selector: record
    params: {}
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: completion_id
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: prompt_info
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: session_info
- name: recordings
  endpoint:
    path: /recordings
    method: POST
- name: prompts
  endpoint:
    path: /prompts
    method: GET
- name: sessions
  endpoint:
    path: /sessions
    method: POST
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: records
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: results
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: completionId
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: formattedPrompt
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: sessionInfo
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: completion_info
    params: {}
- name: customer_feedback
  endpoint:
    path: /customer_feedback
    method: POST
    data_selector: feedback_response
    params: {}
- name: test_runs
  endpoint:
    path: /test_runs
    method: POST
    data_selector: test_run_info
    params: {}
- name: prompts
  endpoint:
    path: /retrieve/prompts
    method: GET
- name: prompt_template
  endpoint:
    path: /prompts/template_name
    method: GET
    data_selector: formattedPrompt
    params: {}
- name: recording
  endpoint:
    path: /recordings
    method: POST
    data_selector: recordResponse
    params: {}
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: completionId
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: promptInfo
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: sessionInfo
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: record
- name: test_runs
  endpoint:
    path: /test_runs
    method: POST
    data_selector: test_run
- name: test_run
  endpoint:
    path: /test_runs
    method: POST
    data_selector: test_run_info
    params: {}
- name: recording
  endpoint:
    path: /recordings
    method: POST
    data_selector: record_info
    params: {}
- name: model_graded_evals
  endpoint:
    path: /api/model-graded-evals
    method: GET
    data_selector: evals
    params: {}
- name: human_labeling
  endpoint:
    path: /api/human-labeling
    method: GET
    data_selector: labeling
    params: {}
- name: code_evals
  endpoint:
    path: /api/code-evals
    method: GET
    data_selector: codeEvals
    params: {}
- name: interaction
  endpoint:
    path: /api/v1/interactions
    method: POST
    data_selector: data
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: records
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: session_id
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: record_id
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: records
    params:
      project_id: '{{ os.getenv(''FREEPLAY_PROJECT_ID'') }}'
      template_name: '{{ os.getenv(''PROMPT_NAME'') }}'
      environment: latest
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: records
    params: {}
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: session_id
    params: {}
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: record_id
    params: {}
- name: FreeplayObserver
  endpoint:
    path: /freeplay/observer
    method: POST
- name: FreeplayClient
  endpoint:
    path: /freeplay/client
    method: GET
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: records
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: session
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: record
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: prompts
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: prompts
    params: {}
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: session
    params: {}
- name: recordings
  endpoint:
    path: /recordings
    method: POST
    data_selector: recording
    params: {}
- name: FreeplayProcessor
  endpoint:
    path: /api/freeplay/processor
    method: POST
- name: FreeplayObserver
  endpoint:
    path: /api/freeplay/observer
    method: POST
- name: evaluations
  endpoint:
    path: /api/evaluations
    method: GET
    data_selector: results
- name: sessions
  endpoint:
    path: /api/v1/sessions
    method: GET
    data_selector: data
    params: {}
notes:
- Requires setup of Freeplay project and API key.
- The 'latest' environment is managed by the system and is ignored if provided.
- Projects are your primary workspaces within Freeplay.
- Prompt Templates are blueprints for the prompts sent to a language model.
- You can find out how to access your Freeplay API key and Project ID in Account Configuration.
- Evaluations help you maintain quality as your application scales.
- By default, the Freeplay SDK is designed to pull the Prompt Template from the latest
  environment.
- Mustache implementation does not escape special characters
- Downloading of prompts is handled by the Freeplay Python SDK
- Requires setup of environment variables for API key and subdomain
- The SDK automatically records all LLM calls, tool invocations, intermediate reasoning
  steps, and evaluation results throughout the execution.
- Freeplay provides robust support to build and improve AI agents.
- Uses OAuth2 with refresh token — requires setup of connected app in Freeplay
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Freeplay supports multimodal data in your prompts and completions, allowing you
  to work with images, audio files, and documents alongside text.
- Support for specific file types depends on the model provider's capabilities.
- Only Freeplay admin role users have permission to manage model access and keys
- Freeplay uses application-level encryption to encrypt customer LLM provider keys
  both at rest and in transit
- Using IAM role assumption is required for secure access.
- Freeplay recommends creating a unique role with minimal permissions.
- Ensure you input the subdomain correctly in your SDK configuration.
- Keep your API key confidential and rotate it periodically for enhanced security.
- Freeplay authenticates your API request using your API Key which can be managed
  through the Freeplay application at https://app.freeplay.ai/settings/api-access
- Uses API key for authentication
- Responses may contain stop sequences that indicate completion
- Freeplay allows you to provide your own client-side UUIDs for both Sessions and
  Completions.
- Ensure correct API URL format based on customer domain
- Freeplay allows recording client-side executed evals.
- You need to have project_id and completion_id to update a completion.
- Ensure the environment variables are set properly.
- Ensure to configure your environment variables correctly.
- Requires API key for authentication
- Additional model parameters can be specified during the record call
- Requires setup of API keys and environment variables.
- Requires setup of connected app in Freeplay
- Some responses may vary based on input parameters
- Requires setup of Freeplay API keys and project ID.
- Customer Feedback supports arbitrary key-value pairs and accepts any string, boolean,
  integer or float.
- Ensure to configure the customer domain correctly.
- Batch API usage requires specific parameters.
- Requires setup of API key in environment variables
- Freeplay allows recording client-side executed evals during the record step.
- The majority of model parameters can be configured in the Freeplay UI.
- Ensure to pass test_run_info for tracking runs.
- Dataset curation is an often overlooked part of the LLM development cycle.
- Having a rich collection of datasets empowers developers to iterate faster and ultimately
  deliver better, higher-quality AI features for your customers.
- Model-graded evals can fill the gap between code evals and human review allowing
  for scaling nuanced evals.
- Custom eval suites are important for effective evaluation.
- Ensure to update your application code with the fallback strategy.
- UsageTokens must be passed for cost calculations to work with LiteLLM Proxy.
- For self hosted models that depend on time, cost calculation is not currently supported.
- Model-graded evals that are configured and run by Freeplay do not currently support
  LiteLLM Proxy models.
- Ensure to set up your Freeplay account before integration.
- Integration involves audio logging capabilities.
- Requires a Freeplay account and API key.
- AudioBufferProcessor recommended for capturing conversation audio
- Requires setup of Freeplay account and API key.
- The FreeplayObserver must be initialized at the conversation level to properly track
  the entire interaction flow.
- Freeplay provides seamless integration with Pipecat to log audio interactions and
  LLM responses.
- FreeplayObserver must be initialized at the conversation level to properly track
  the entire interaction flow.
- The processor handles the memory of the conversation, processing of key frames,
  and keeps track of information to log to Freeplay.
- Ensure proper handling of audio formats and latencies.
- We require Multi-Factor Authentication (MFA) for all users of Freeplay systems.
- All prompts and responses remain inside your cloud; Freeplay never receives or stores
  them.
- Data residency – all sensitive customer data including prompts, responses, and evaluations
  stay in your cloud account.
- Most sessions, traces, and completions recorded through the Freeplay SDK are kept
  for 90 days from the date of recording by default.
- After 90 days, this data is automatically deleted from our systems by default.
- For customers on our Enterprise plans, the standard retention window is configurable.
- Some data is kept indefinitely if it meets specific criteria such as being part
  of a Test Run or included in a Dataset.
- GDPR applies to any business that controls or processes data of EU citizens.
- To start logging data to Freeplay, integrate our logging into your code, providing
  key insights into how your LLM application is performing.
- Requires OAuth2 authentication setup
- API rate limits may apply
- Supports multimodal data in prompts and completions, allowing integration of images,
  audio files, and documents alongside text.
errors:
- '400 Bad request: Malformed request or bad data'
- '401 Unauthorized: Requests must be authenticated with a valid API key.'
- '404 Not found: Indicates one of the IDs passed in the request is invalid.'
- '500 Server error: Indicates an error in the Freeplay server.'
- '400 Bad request: Invalid request format or data.'
- '404 Not found: Project not found'
- '500 Server error: An unexpected error occurred. Please try again later.'
- '400 Bad Request: Invalid prompt template content format …'
- '404 Not Found: template_id or version_id does not exist, or you lack access.'
- '400 Bad Request: Returned if the request payload contains invalid data types or
  invalid values for ''freeplay_feedback''.'
- '400 Bad Request: Returned if the request payload contains invalid date ranges'
- '400 Bad request: This means that the request was malformed or had bad data.'
- '401 Unauthorized: This response will be returned if an API request does not contain
  the correct bearer authentication with a valid API key.'
- '404 Not found: This response indicates one of the IDs passed in the request is
  invalid, and the object does not exist.'
- '500 Server error: This response indicates an error in the Freeplay server.'
- '400 Bad Request: Invalid request payload or parameters.'
- '404 Not Found: Resource not found or access denied.'
- 'File size exceeds limit: Ensure total request size is up to 30 mb.'
- Freeplay does not set limits on use of customer keys other than those imposed by
  the LLM providers
- '400 Bad Request: Check your input parameters'
- '401 Unauthorized: Verify API key'
- '429 Too Many Requests: Rate limit exceeded'
- '401 Unauthorized: Invalid API key or token'
- '500 Internal Server Error: Retry request or check server status'
- '401 Unauthorized: Check API key and permissions'
- '400 Bad Request: Ensure all required fields are provided'
- '401 Unauthorized: Check your API key.'
- '404 Not Found: Verify the endpoint path.'
- '404 Not Found: Ensure endpoint paths are correct'
- '400 Bad Request: Check the request format and required fields'
- '401 Unauthorized: Verify API key is valid'
- '500 Internal Server Error: Retry the request later'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Check API key and permissions.'
- '400 Bad Request: Verify request payload format.'
- '400 Bad Request: Verify request parameters.'
- Unable to parse response body
- '401 Unauthorized: Check your OAuth token and permissions.'
- '429 Too Many Requests: Throttle your requests to avoid hitting rate limits.'
- '401 Unauthorized: Check API key validity.'
- '404 Not Found: Ensure the endpoint exists.'
- '400 Bad Request: Validate request parameters.'
- '401 Unauthorized: Check API key.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Ensure valid authentication credentials'
auth_info:
  mentioned_objects:
  - Api-Key
  - Freeplay
  - SessionInfo
  - CallInfo
  - RecordPayload
  - RecordUpdatePayload
  - OauthToken
  - AuthProvider
  - ResponseInfo
  - FormattedPrompt
  - ChatMessage
  - NamedCredential
  - ApiKey
  - FreeplayObserver
client:
  base_url: https://app.freeplay.ai/api/v2
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
