resources:
- name: tenants
  endpoint:
    path: /tenants
    method: GET
- name: computers
  endpoint:
    path: /computers
    method: GET
- name: tenants
  endpoint:
    path: /tenants
    method: GET
- name: computers
  endpoint:
    path: /computers
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: files
  endpoint:
    path: /2/files/list_folder
    method: POST
    data_selector: entries
    params: {}
- name: deployments
  endpoint:
    path: /deployments
    method: GET
    data_selector: deployments
    params: {}
- name: maintenance_sessions
  endpoint:
    path: /maintenance_sessions
    method: GET
    data_selector: sessions
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: deployments
  endpoint:
    path: /deployments
    method: GET
    data_selector: deployments
    params: {}
- name: deployments
  endpoint:
    path: /deployments
    method: GET
    data_selector: deployments
    params: {}
- name: smtp_settings
  endpoint:
    path: /smtp/settings
    method: POST
    data_selector: settings
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: POST
    data_selector: tasks
- name: deployments
  endpoint:
    path: /deployments
    method: GET
    data_selector: deployments
    params: {}
- name: maintenance_sessions
  endpoint:
    path: /maintenance/sessions
    method: GET
    data_selector: sessions
- name: computers
  endpoint:
    path: /computers
    method: GET
    data_selector: computers
- name: branding
  endpoint:
    path: /branding
    method: GET
    data_selector: settings
    params: {}
- name: ConnectWise Automate
  endpoint:
    path: /Documentation/Integrations/connectwise-automate-integration-setup.html
    method: GET
- name: ConnectWise Control
  endpoint:
    path: /Documentation/Integrations/connectwise-control-integration-setup.html
    method: GET
- name: N-Central
  endpoint:
    path: /Documentation/Integrations/ncentral-integration-setup.html
    method: GET
- name: NinjaRMM
  endpoint:
    path: /Documentation/Integrations/ninjarmm-integration-setup.html
    method: GET
- name: HaloPSA
  endpoint:
    path: /Documentation/Integrations/halo-integration-setup.html
    method: GET
- name: Azure
  endpoint:
    path: /Documentation/Integrations/azure-graph-permissions-setup.html
    method: GET
- name: Windows 10 to Windows 11 Upgrade
  endpoint:
    path: /api/upgrade_windows_10_to_11
    method: POST
    data_selector: result
- name: customers
  endpoint:
    path: /api/customers
    method: GET
    data_selector: data
- name: computers
  endpoint:
    path: /api/computers
    method: GET
    data_selector: data
- name: clients
  endpoint:
    path: /clients
    method: GET
- name: computers
  endpoint:
    path: /computers
    method: GET
- name: customers
  endpoint:
    path: /api/customers
    method: GET
    data_selector: customers
- name: computers
  endpoint:
    path: /api/computers
    method: GET
    data_selector: computers
- name: Support Ticket Override Integration
  endpoint:
    path: /immybot/support/ticket/override
    method: POST
    data_selector: result
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: computers
  endpoint:
    path: /computers
    method: GET
- name: software
  endpoint:
    path: /api/v1/software/global
    method: GET
- name: computers
  endpoint:
    path: /api/v1/computers
    method: GET
- name: run-immy-service
  endpoint:
    path: /api/v1/run-immy-service
    method: POST
- name: software
  endpoint:
    path: /api/v1/software/global
    method: GET
- name: computers
  endpoint:
    path: /api/v1/computers
    method: GET
- name: run-immy-service
  endpoint:
    path: /api/v1/run-immy-service
    method: POST
- name: software
  endpoint:
    path: /api/v1/software/global
    method: GET
- name: computers
  endpoint:
    path: /api/v1/computers
    method: GET
- name: run-immy-service
  endpoint:
    path: /api/v1/run-immy-service
    method: POST
- name: software
  endpoint:
    path: /api/v1/software/global
    method: GET
    data_selector: data
- name: computers
  endpoint:
    path: /api/v1/computers
    method: GET
    data_selector: data
- name: run_service
  endpoint:
    path: /api/v1/run-immy-service
    method: POST
    data_selector: id
- name: software
  endpoint:
    path: /api/v1/software/global
    method: GET
- name: computers
  endpoint:
    path: /api/v1/computers
    method: GET
- name: run-immy-service
  endpoint:
    path: /api/v1/run-immy-service
    method: POST
- name: sites
  endpoint:
    path: sites
    method: GET
- name: agents
  endpoint:
    path: agents
    method: GET
- name: software
  endpoint:
    path: /api/v1/software/global
    method: GET
    data_selector: data
- name: computers
  endpoint:
    path: /api/v1/computers
    method: GET
    data_selector: data
- name: run-immy-service
  endpoint:
    path: /api/v1/run-immy-service
    method: POST
    data_selector: id
- name: computers
  endpoint:
    path: /computers
    method: GET
- name: computer_inventory
  endpoint:
    path: /computer-inventory
    method: GET
- name: computer_software
  endpoint:
    path: /computer-software
    method: GET
- name: user_affinity
  endpoint:
    path: /user-affinity
    method: GET
- name: sites
  endpoint:
    path: sites
    method: GET
- name: agents
  endpoint:
    path: agents
    method: GET
- name: RBAC System
  endpoint:
    path: /Documentation/Reference/api-documentation.html
    method: GET
    data_selector: permissions
    params: {}
- name: computers
  endpoint:
    path: /computers
    method: GET
- name: computer_inventory
  endpoint:
    path: /computer-inventory
    method: GET
- name: computer_software
  endpoint:
    path: /computer-software
    method: GET
- name: user_affinity
  endpoint:
    path: /user-affinity
    method: GET
- name: dashboard
  endpoint:
    path: /dashboard
    method: GET
- name: computers
  endpoint:
    path: /api/computers
    method: GET
    data_selector: computers
    params: {}
- name: tenants
  endpoint:
    path: /api/tenants
    method: GET
    data_selector: tenants
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: computers
  endpoint:
    path: /computers
    method: GET
    data_selector: records
- name: software_detection
  endpoint:
    path: /api/software/detection
    method: GET
    data_selector: records
- name: software_action
  endpoint:
    path: /api/software/action
    method: POST
    data_selector: records
- name: Invoke-ImmyCommand
  endpoint:
    path: /invoke-immy-command
    method: POST
- name: Invoke-ImmyCommand
  endpoint:
    path: /Invoke-ImmyCommand
    method: POST
    data_selector: results
    params:
      Timeout: 120
- name: metascripts
  endpoint:
    path: /metascripts
    method: GET
    data_selector: records
- name: cloud_scripts
  endpoint:
    path: /cloud_scripts
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /v1.0/users
    method: GET
    data_selector: value
- name: groups
  endpoint:
    path: /v1.0/groups
    method: GET
    data_selector: value
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
notes:
- ImmyBot uses a declarative approach focused on desired state configuration.
- Use OAuth2 with refresh token — requires setup of connected app in ImmyBot
- Uses OAuth2 — requires setup of connected app in api
- ImmyBot no longer supports Windows 7, Server 2008, or Server 2008 R2. Server 2012,
  and Server 2012r2 without Extended Security Updates are not supported.
- All Systems must be capable of running .Net 8
- 'ImmyBot is designed to work with Managed Computers: Windows 10/11 (all editions),
  Windows Server 2016+'
- 'Agent Requirements: .NET Framework 4.8 or higher'
- 'Browser Requirements: Chrome, Edge, Firefox, Safari (latest versions)'
- 'PowerShell Requirements: PowerShell 5.1 or higher'
- Run scheduled maintenance at most once a week across your instance.
- Avoid using schedules for individual deployments. It is best practice to use as
  few schedules as possible.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Requires OAuth2 setup for access.
- Deployments define how computers should be configured and allow automation of software
  installation, configuration, and maintenance.
- ImmyBot does not provide custom scripting support
- Tasks can be one-time, recurring, or compliance-based.
- Deployments are the central concept in ImmyBot. They define how computers 'should
  be' configured and allow you to automate software installation, configuration, and
  maintenance across your environment.
- Use descriptive names for tasks
- Add comments to document scripts and tasks
- Include error handling in scripts
- Test tasks on a small set of computers before deploying widely
- Make tasks flexible with parameters
- Include logging in scripts
- Design tasks to be safely re-runnable
- All users must authenticate through Azure. No personal accounts can be used.
- SMTP settings allow you to specify SMTP settings per tenant.
- Tasks can be used for configuration, maintenance, or information gathering.
- User must be logged in when scripts in user context run.
- Currently applies to emails only
- These settings will currently only apply to email
- 'Use Descriptive Names: Make task names clear and specific'
- 'Add Comments: Document your scripts and tasks with comments and descriptions'
- 'Handle Errors: Include error handling in your scripts'
- 'Test Thoroughly: Test tasks on a small set of computers before deploying widely'
- 'Use Parameters: Make tasks flexible with parameters'
- 'Log Actions: Include logging in your scripts'
- 'Idempotence: Design tasks to be safely re-runnable'
- When using the same deployment package be sure you set Automatic Onboarding to Disabled,
  or use an Onboarding Tenant that will only apply cross tenant deployments.
- Deployments do not apply automatically. They only apply when you run a maintenance
  session.
- ImmyBot honors the date range on agreement additions, making scheduled offboarding
  easier if say the customer wants your software removed on the last day of the month.
- ImmyBot Standard and ImmyBot Forever Clients only
- If you're an ImmyBot starter client, you do not have access to Schedules in ImmyBot
- Automated maintenance sessions are handled by Schedules.
- You can control how often maintenance runs in the Schedule.
- All users must be authenticated through Azure. No personal accounts or Local ImmyBot
  accounts are allowed.
- Utilize Cross Tenant Deployments to prevent repeating processes where possible.
- We recommend you set the Onboarding tenant's SMTP settings first.
- You only need to create this USB drive ONCE. The same drive can be used for all
  clients and computers.
- If this is your first time using ImmyBot, you'll only have your MSP as a customer
  and yourself as a user.
- Your app registration must have a Web redirect uri of https://<your-domain>.immy.bot/consent-callback,
  replacing <your-domain> appropriately
- ImmyBot requires an active subscription for maintenance sessions.
- SMTP settings must be configured for email notifications.
- When manually consenting to an Azure customer, you must authenticate using an administrator
  account from that customer!
- Ensure computers don't have any pending updates.
- Recommended to use Windows 11 Upgrade Task in Audit mode.
- Admin access to your Azure tenant to review and change Conditional Access Policies.
- We recommend excluding the DEM users you use for oAuth from the CAPs that protect
  the Device Registration Service.
- You need to be an MSP Admin
- You need to have an Azure Partner tenant linked to a tenant in your instance
- The integration requires Google for MFA. Duo is not supported.
- ConnectWise Control uses Sqlite under the hood, making it vulnerable to performance
  issues unless aggressive Database Maintenance Tasks are enabled.
- Ensure that the DEM user you're using oAuth with is excluded from CAPs that cover
  device registration.
- Password for the API user needs to be reset every 90 days.
- 'Ninja Agent uninstall prevention -> OFF (Optional: This permission is only needed
  so ImmyBot can also uninstall the Ninja agent)'
- Advanced Installer Options -> ON
- The integration requires Google for MFA. Duo is not supported as Duo does not expose
  the MFA token.
- ImmyBot does not currently have an integration with Datto RMM
- While ImmyBot only uses Control (and other integrations) to spawn an out-of-band
  connection, over the course of time the database can grow as ImmyBot establishes
  this connection on each machine once every 24 hours to collect inventory.
- This feature only works for the Service Ticket screen.
- API User password needs to be reset every 90 days.
- Only one Integration implementing the ISupportsSupportTicketDetailOverride integration
  capability may be enabled at a time.
- Ninja Agent uninstall prevention -> OFF (Optional)
- Uses OAuth2 with client credentials — requires setup of app registration in Azure
  AD
- Requires setup of App Registration in Microsoft Entra ID (Azure AD)
- Requires Enterprise App configuration for ImmyBot access
- Requires App Registration in Microsoft Entra ID (Azure AD) for authentication.
- Object ID of the Enterprise App is not the same as the Object ID of the App registration.
- Requires setup of app registration in Microsoft Entra ID (Azure AD)
- Uses API Key for authentication
- The integration context is used for secure storage of sensitive data
- ImmyBot uses a role-based access control (RBAC) system to manage permissions.
- Client secret value from App Registration is required for authentication.
- Object ID of the Enterprise App is not the Object ID of the App registration.
- RBAC system provides granular permission management
- Seamless migration from legacy permissions to RBAC
- Uses a role-based access control (RBAC) system to manage permissions.
- Tenants represent the organizations you manage.
- Child tenants inherit certain settings from their parents.
- 'No Persistence: All changes are lost when the Sandbox is closed'
- 'Driver Limitations: Software that requires drivers may not work properly'
- 'Restart Limitations: Processes requiring restarts may not complete correctly'
- 'Performance: Resource-intensive applications may run slower than on a physical
  machine'
- 'Network Isolation: Some network-dependent features may behave differently'
- You cannot manage instance resources on your own, you must open a ticket with support
  to take care of this for you.
- If you would like ImmyBot to make changes to your subscription, you must make the
  request in writing to customercare@immy.bot
- Each tenant can have its own set of computers and users
- Child tenants do not have direct access to the parent tenant's Azure resources
- Licenses are only applied to computers that you've ran maintenance against since
  the beginning of your billing period.
- 'Enabled by default: Email BCC for maintenance notifications'
- Some features can be overridden at the tenant level
- The variable $RefreshToken now contains the OAuth response
- ImmyBot allows for dynamic version retrieval.
- Best practices include modular design and secure handling of sensitive information.
- ImmyBot support will not assist with custom script writing
- -Context accepts either 'System' or 'User'
- -Timeout accepts an integer denoted in seconds. The default is 120.
- -Parallel makes the script block run on all the computers simultaneously instead
  of in series.
- Metascripts and Cloud Scripts execute server-side.
- Uses OAuth2 for authentication.
- Ensure the computer has internet access
- Check that it can reach the ImmyBot server
- ImmyBot's current code-signing certificate is set to change on Feb. 11th, 2025.
- Add both existing and upcoming certificate exclusions to avoid issues.
- To correct it, you need to bypass SSL Inspection for your instances hostnames/IPs.
- Sentinel requires BOTH your instance's Script path and the ImmyBot Agent process
  excluded.
- Explicitly allowing the DNS for subdomain.immy.bot was verified to resolve the issue
  of failed DNS resolutions.
- PowerShell execution policies set through Group Policy can affect ImmyBot's ability
  to run scripts.
- Some objects may return nulls in deeply nested fields.
- ImmyBot's current code-signing certificate is set to change on Feb. 11th, 2025.
  Please add both our upcoming and existing certificate exclusions to ensure no issues.
- 'If you want ImmyBot to handle SentinelOne updates, you must enable ''Local Upgrade/Downgrade
  Authorization'' found in: **Sentinels** > **Policy** > **Agent**'
- ImmyBot will no longer support Windows 7, Server 2008 (or Server 2012 w/o ESUs)
  machines after May 14th, 2024
- .NET 7 support is ending May 14th, and as a result we will be transitioning the
  Agent to .NET 8 at that time period.
- Uses OAuth2 with refresh token — requires setup of connected app in ImmyBot
- .NET 7 support is ending May 14th, and as a result we will be transitioning the
  Agent to .NET 8 at that time period. We will not be offering support for these machines
  after May 14th.
- Enabled sliding expiration for authentication cookies to automatically renew the
  session while the user remains active which provides a better user experience.
- A new "Stale" tab has been added to the Computers List page showing devices that
  have not had a recent agent connection event. By default, the staleness threshold
  is 30 days. This value can be configured from the System Preferences page.
- Improved performance of script execution through the use of WebSockets, Named Pipes,
  and removing code that is no longer necessary since the introduction of the Ephemeral
  Agent.
- You can now specify the offline behavior for computers on schedules and ad-hoc deployments.
- Fixed an issue where software download scripts were timing out after 60 seconds
  if the script didn't specify its own timeout
- Fixed an issue where changes made to a configuration task parameters from the software
  page were not saving
- Fixed issues displaying incorrect text in the target type column on the deployment
  and schedule list pages
- Fixed a bug where you could not remove a software download script
- Fixed a bug with `Add-UriQueryParameter` where it did not accept array values or
  parse existing parameters
- Fixed an issue with Ephemeral Agent "end-of-stream" response exceptions resulting
  in termination of stage
- Fixed various issues with agent connection events and improved performance
- Fixed an issue where immy agent registrations could cause resource depletion in
  the backend's IoT service
- Fixed the timezone selector to show the region to differentiate the options
- Fixed a bug where dynamic versions could depend on itself and cause an infinite
  loop
- The changes in this release will require reconsent at first login!
- If your Azure AD is configured to not allow non-Admin users to consent to new apps,
  you will need to login once as a user with sufficient privileges.
- Fixed an issue with Ephemeral Agent 'end-of-stream' response exceptions resulting
  in termination of stage
- QOL feature where we added the ability to upload icons to software that can be displayed
  in software lists.
- Detection only maintenance sessions are replacing the 'Preview' feature where we
  determine what needs to be done for a computer to be compliant without actually
  enforcing compliance.
- You may have to exclude your instance's hostname in the firewall from SSL Inspection
  policies!
- SSL Inspection may interfere with the WebSocket connection from this new agent!
- Fixed an issue with inventory scripts being retried every minute on devices that
  return exceptions
- Fixed issue with terminal not rendering output when launched from Edit button on
  session logs
- Fixes an issue where the suggested rmm link name conflicted with an existing name
- Set the Hangfire Redis MaxStateHistoryLength to 5 to fix issues with uncontrolled
  memory leak
- 'Non admin user cannot create tenant deployments. Workaround: Navigate to Show More
  > Preferences > Cycle Allow non admin users to create tenant level deployments.'
- Dell Command Update - Version not found or otherwise not installed. There is a know
  issue with Dell's API that we are working through, no workaround at this time.
- Cloud Radial - Checks are failing with API error. Due to a redirect for their API
  that is not working, work in progress internally at ImmyBot, no workaround at this
  time.
- 'ImmyBot instance becomes unresponsive due to unhealthy integration. Check for unhealthy
  integratoin: Show More > Integrations, review any that are labled unhealthy. Workaround:
  Resolve the issues for that integraton: Edit the integration and resolving the issues
  listed. Workaround: Disable the integration.'
- ImmyBot does not deploy anything automatically.
- ImmyBot requires setup of connected app in Azure.
- ImmyAgent runs on .NET 7 until May 14th, 2024, after which it will transition to
  .NET 8.
- Older systems may continue to work inside of ImmyBot with necessary updates applied.
- Fixed an issue with terminal not rendering output when launched from Edit button
  on session logs
- Fixed several broken maintenance session links that were not bringing the user to
  the correct page.
- Fixed an error in metascripts about the use of duplicate `$__using` variables.
- Fixed an issue rendering the xterm terminal within the script editor modal.
- Fixed filter scripts to only return a single computer when run for a maintenance
  session. Not doing this was causing memory to balloon up unnecessarily.
- Check out our new documentation site! <https://docs.immy.bot/>
- Updated the *Software* tab to now provide actionable buttons for software and maintenance
  tasks that are not compliant
- Plug in the USB drive and setup begins automatically without having to login to
  Immy
- Added a new tab called *Sessions* that allows a user to easily see computer sessions
  without leaving the computer details page
- Added an *Onboarding* tab to the computer details page to allow easier changing
  of customer and primary user
- Simplified Filter Script syntax, removed -TargetType and -TargetGroupFilter as these
  are selectable in the UI
- Added xterm.js to the Script Editor for better handling of large return payloads
- Write-Host output is no longer suppressed when run within Invoke-ImmyCommand
- 'Write-Debug, Write-Verbose, Write-Warning, and Write-Error all work both within
  Metascripts, and scripts run via Invoke-ImmyCommand (Note: $DebugPreference and
  $VerbosePreference need to be set to ''Continue'' as the PowerShell default will
  suppress the output from these cmdlets)'
- Write-Host in Metascripts and Cloudscripts supports -ForegroundColor, -BackgroundColor
  and -NoNewLine parameters
- Terminal now formats Errors and many other objects according to the PowerShell 7
  default
- PowerShell 7 $ErrorView= 'ConciseView' is now supported
- Exceptions thrown within scripts now show the script line instead of a backend stack
  trace
- Added $AzureTenantId variable to all scripts
- Fixed memory leak in the user affinity job that was causing instances to hang on
  an error page
- Added availability health checks for some azure resources to help diagnose issues
  faster.
- Fixed an issue where renaming a computer did not immediately show the change in
  the browser
- Fixed an issue with sending test emails from the smtp page. It would sometimes incorrectly
  throw an error about enabling authentication
- Added Update If Found desired state for Ninite Software
- Fixed selecting a software on the deployment page to auto select 'Installed' and
  'Latest' as the default options
- Fixed an issue where it was not possible to view global maintenance task scripts
  from within the Maintenance Task interface
- Get-ImmyComputer no longer returns computers from other tenants when run by a non-MSP
  user
- Moved the pending reboot check from the beginning of the session to the beginning
  of the execution phase so computers do not reboot during detection.
- Fixes bug where rebooting a computer would sometimes hang the maintenance session
- Fixes a typo `reading for onboarding` -> `ready for onboarding`
- Fixed issue preventing a computer from rebooting if necessary before it starts a
  maintenance session
- Fixes an issue where an action would immediately fail if the computer failed to
  reboot
- Fixes a critical bug that could allow a person to be incorrectly associated with
  another tenant.
- Fixed an issue where the `Update Now` and `Postpone` buttons were missing on the
  maintenance email when they were set to be shown by its schedule.
- Run Maintenance button at the top of the Computer Details Page now suppresses reboots
  by default
- Edit PSALink page no longer throws exception when CWManage API returns duplicate
  companies
- Updated task type and task category label names on the task form
- Fixed a null reference exception when calling Get-ImmyComputer passing in InventoryKeys
- New and improved **Computer Details Page** that shows much more details
- Added Inventory Task feature
- Added a **System Status Page** that shows script execution metrics for enabled RMM
  Providers
- Added a **System Update Page** that allows an administrator to update to newer versions
  of ImmyBot when they are released
- Implemented Downgrade logic for software
- Optimized script execution when using the CW Control RMM Provider
- Optimized background job scheduling
- Re-designed the **Computer List Page**
- Merged the Onboarding and Pending Computer Pages into one page called **New Computers**
- Made the ImmyAgent more scalable
- Added a loading animation when filtering the **Computer List Page**
- When a session expires and the page is reloaded, you will now be redirected back
  to the page you were on
- Fixed CW Control extension to work on latest version of CW Control (2020.11)
- Fixed session failing with Ninite fails to download
- Fixed a CORS issue when new instances are registered with uppercase characters
- Fixed an edge case when scripts erroneously indicate they have been modified when
  pressing cancel
- Removed validation requirement for username in SMTP settings
- Fixed Automate Computers with *UTC+0* (UK) do not sync due an issue with using `DateTime.Subtract(0)`
- Fixed an error occurring on Windows 7/PS 2.0
- Fixed an edge case where a server got caught in an endless reboot
- Removed the WiFi SSID minimum length for PPKGs
- Fixed a bug where license files did not download before running the **Test** script
- Fixed an issue where **User Context Scripts** were returning `'gt' is not recognized`
- Fixed a bug where maintenance tasks were performed out of order when there was a
  software dependency
- Fixed a bug on the Deployment Page where selecting a domain controller was causing
  an error
- Fixed a bug in metascripts where `Get-ImmyComputer -TargetType TenantDomainControllers`
  was failing
- Fixed bug where the Users List showed a *System* user
- Fixed a bug where bulk software detection failed on PS 2.0 and PS 3.0 when using
  `[Guid]::new`
- Fixed a bug where the CW Automate Provider was not leveraging the 301 command
- Fixed a bug where the ImmyAgent did not start on VMware VMs due to lack of BoardSerialNumber
- Fixed some edge cases where sessions kept getting stuck in the *Created* status
- Fixed a bug where the ImmyAgent was defaulting to 10 seconds for the script execution
- Fixed a bug where the software selector on the license form was showing parameters
  for linked maintenance tasks
- Fixed a bug where maintenance task fields *Hidden* and *Default Values* were not
  saving on Create
- Fixed a bug in the package analyzer where it was throwing `Key Not Found` for Inno
  version 6 installers
- Fixed a bug with Deployments using a desired state of Uninstall/NotPresent that
  was causing failures due to *missing required parameters*
- Fixed a bug with maintenance task parameters not being provided to software install
  scripts
- Fixed a bug where users could not open the **Maintenance Session Details Page**
  for computers they onboarded
- Fixed a bug where deployments for maintenance tasks with password parameter types
  were unable to be deployed
- Fixed a bug where the *Current User* user action trigger was not available for scripts
  created on the software version form
- Fixed a bug where the RMM to PSA auto client mapping failed when the RMM returns
  non-unique external ids
- Fixed a bug where non-msp users could not access software or deploy the ImmyAgent
- Non admin user cannot create tenant deployments
- 'Workaround: Navigate to Show More > Preferences > Cycle Allow non admin users to
  create tenant level deployments'
- Dell Command Update - Version not found or otherwise not installed
- There is a know issue with Dell's API that we are working through, no workaround
  at this time
- Cloud Radial - Checks are failing with API error
- Due to a redirect for their API that is not working, work in progress internally
  at ImmyBot, no workaround at this time.
- ImmyBot instance becomes unresponsive due to unhealthy integration
- 'Check for unhealthy integratoin: Show More > Integrations, review any that are
  labled unhealthy'
- 'Workaround: Resolve the issues for that integraton: Edit the integration and resolving
  the issues listed.'
- 'Workaround: Disable the integration'
- ImmyBot will create a profile for the Primary Person you selected for this machine.
- ImmyAgent runs on .NET 7 and therefore supports Win7+ devices. However, support
  for .NET 7 is ending May 14th, 2024.
- Best to upgrade the system. Use at your own risk.
errors:
- '200 OK: The request was successful'
- '201 Created: The resource was created successfully'
- '400 Bad Request: The request was invalid'
- '401 Unauthorized: Authentication failed'
- '403 Forbidden: The API key doesn''t have permission'
- '404 Not Found: The resource doesn''t exist'
- '429 Too Many Requests: Rate limit exceeded'
- '500 Internal Server Error: Something went wrong on the server'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check access token validity.'
- '429 Too Many Requests: Rate limit exceeded.'
- 'Sessions Not Starting: Check agent status, verify maintenance window configuration.'
- 'Failed Actions: Review detailed logs, check for security software interference.'
- 'AADSTS500113: No reply address is registered for the application'
- 'Sessions Not Starting: Check agent status, verify maintenance window configuration,
  check for server resource constraints'
- 'Failed Actions: Review detailed logs, check for security software interference,
  verify network connectivity, ensure sufficient disk space'
- 'Incomplete Sessions: Check for timeout settings, look for user interruptions, verify
  deployment configurations'
- 'REQUEST_FAILED: Check if the computer is already Windows 11.'
- 'INSUFFICIENT_DISK_SPACE: Ensure there is more than 25 GB of free space.'
- 'Unable to validate UI session: javax.validation.ValidationException: Unable to
  validate UI session.'
- Client IDs do not support special characters
- 'Failed to obtain authentication token: $_'
- 'API call to $Endpoint failed: $_'
- 'Unauthorized: Ensure the user associated with the API Key can access this endpoint'
- 'Unauthorized: Ensure the API Key is valid'
- '403 Forbidden: Check permissions or API key validity.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '500 Internal Server Error: Retry the request or check server status.'
- '401 Unauthorized: Ensure valid token is provided.'
- '403 Forbidden: Check permissions for the requested resource.'
- No such host is known. (XXXX.immy.bot:443)
- 'Support Contact Information: Email: support@immy.bot'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- Security Software blocking PowerShell
- Incorrect time is preventing SSL/TLS connection
- Cannot access a closed stream.
- Throttle API calls or reduce frequency
- MFA requirement for all users in Conditional Access will also block the execution.
- 'The specified SAS token is expired: This will occur if the device''s system time
  is incorrect.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - client app scopes
  - grant types
  - Agent
  - Technician Tools
client:
  base_url: https://$($InstanceSubdomain).immy.bot
  auth:
    type: oauth2
    token_url: https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token
    client_id: $ClientID
    client_secret: $Secret
  headers:
    authorization: Bearer $($Token.access_token)
source_metadata: null
