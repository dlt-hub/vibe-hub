resources:
- name: List Banks
  endpoint:
    path: /misc/banks
    method: GET
    data_selector: data
    params:
      countryCode: NG
- name: List Mobile Money
  endpoint:
    path: /misc/mobile-money
    method: GET
    data_selector: data
    params:
      countryCode: KE
- name: List Banks
  endpoint:
    path: /merchant/api/v1/misc/banks
    method: GET
    data_selector: data
    params:
      countryCode: NG
- name: List Mobile Money Operators
  endpoint:
    path: /merchant/api/v1/misc/mobile-money
    method: GET
    data_selector: data
    params:
      countryCode: KE
- name: Verify Destination Bank Account
  endpoint:
    path: /merchant/api/v1/misc/verify
    method: POST
- name: Request Payout
  endpoint:
    path: /merchant/api/v1/payouts/request
    method: POST
- name: Check Availability
  endpoint:
    path: /merchant/api/v1/payouts/availability
    method: POST
- name: transactions_disburse
  endpoint:
    path: /transactions/disburse
    method: POST
    data_selector: data
    params: {}
- name: List Banks
  endpoint:
    path: /merchant/api/v1/misc/banks
    method: GET
    data_selector: data
    params: {}
- name: List Mobile Money Operators
  endpoint:
    path: /merchant/api/v1/misc/mobile-money
    method: GET
    data_selector: data
    params: {}
- name: Bank Account Resolve
  endpoint:
    path: /merchant/api/v1/misc/banks/resolve
    method: POST
    data_selector: data
    params: {}
- name: Mobile Money Account Resolve
  endpoint:
    path: /merchant/api/v1/misc/mobile-money/resolve
    method: POST
    data_selector: data
    params: {}
- name: Payout Request
  endpoint:
    path: /merchant/api/v1/transactions/disburse
    method: POST
    data_selector: ''
    params: {}
- name: Availability Check
  endpoint:
    path: /merchant/api/v1/payouts/availability
    method: POST
    data_selector: data
    params: {}
- name: payout_request
  endpoint:
    path: /api/v1/transactions/disburse/remittance
    method: POST
    data_selector: data
- name: payout_history
  endpoint:
    path: /merchant/api/v1/payouts
    method: GET
    params: {}
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: data
- name: checkouts
  endpoint:
    path: /docs/checkouts
    method: GET
- name: payment_links
  endpoint:
    path: /docs/payment-links
    method: GET
- name: virtual_bank_accounts
  endpoint:
    path: /docs/virtual-bank-accounts
    method: GET
- name: api
  endpoint:
    path: /docs/checkout-standard
    method: GET
- name: Checkout Standard
  endpoint:
    path: /api/checkout
    method: POST
    data_selector: data
    params: {}
- name: initialize_charge
  endpoint:
    path: /merchant/api/v1/charges/initialize
    method: POST
    data_selector: data
    params: {}
- name: accepting_payments_ngn
  endpoint:
    path: /docs/virtual-bank-accounts-ngn
    method: GET
    data_selector: records
- name: accepting_payments_usd
  endpoint:
    path: /docs/virtual-bank-accounts-usd
    method: GET
    data_selector: records
- name: checkouts
  endpoint:
    path: /docs/checkouts
    method: GET
- name: payment_links
  endpoint:
    path: /docs/payment-links
    method: GET
- name: virtual_bank_accounts
  endpoint:
    path: /docs/virtual-bank-accounts
    method: GET
- name: api
  endpoint:
    path: /docs/checkout-standard
    method: GET
- name: create_virtual_bank_account
  endpoint:
    path: /merchant/api/v1/virtual-bank-account
    method: POST
    data_selector: data
    params: {}
- name: virtual_bank_account_query
  endpoint:
    path: /merchant/api/v1/virtual-bank-account/:accountReference
    method: GET
    data_selector: data
    params: {}
- name: charge_query
  endpoint:
    path: /merchant/api/v1/charges/:reference
    method: GET
    data_selector: data
    params: {}
- name: vba_transactions_query
  endpoint:
    path: /merchant/api/v1/virtual-bank-account/transactions
    method: GET
    data_selector: data
    params: {}
- name: checkout_standard
  endpoint:
    path: /checkout/standard
    method: POST
    data_selector: data
    params:
      key: pk_live_*********************
      reference: your-unique-reference
      amount: 22000
      currency: NGN
      customer:
        name: John Doe
        email: john@doe.com
      notification_url: https://example.com/webhook
- name: credit_virtual_bank_account
  endpoint:
    path: /virtual-bank-account/sandbox/credit
    method: POST
    data_selector: data
    params:
      account_number: string
      currency: NGN
      amount: number
- name: create_virtual_bank_account_holder
  endpoint:
    path: /create-virtual-bank-account-holder
    method: POST
- name: create_fixed_virtual_bank_account
  endpoint:
    path: /create-fixed-virtual-bank-account
    method: POST
- name: virtual_bank_account_query
  endpoint:
    path: /virtual-bank-account-query
    method: GET
- name: transaction_query
  endpoint:
    path: /transaction-query
    method: GET
- name: initialize_charge
  endpoint:
    path: /merchant/api/v1/charges/initialize
    method: POST
    data_selector: data
    params:
      amount: required
      currency: required
      reference: required
      redirect_url: optional
      notification_url: optional
      narration: optional
      channels: optional
      default_channel: optional
      metadata: optional
      customer: required
- name: Virtual Bank Account
  endpoint:
    path: /virtual-bank-accounts
    method: GET
    data_selector: data
    params: {}
- name: create_virtual_bank_account_holder
  endpoint:
    path: /api/v1/virtual-bank-account/account-holders
    method: POST
    data_selector: data
    params: {}
- name: generate_file_upload_url
  endpoint:
    path: /api/v1/files/generate-upload-url
    method: POST
    data_selector: data
    params: {}
- name: create_virtual_bank_account
  endpoint:
    path: /api/v1/virtual-bank-account
    method: POST
    data_selector: data
    params: {}
- name: retrieve_virtual_account_holder_details
  endpoint:
    path: /api/v1/virtual-bank-account/account-holders/:accountHolderReference/details
    method: GET
    data_selector: data
    params: {}
- name: retrieve_virtual_bank_account_details
  endpoint:
    path: /api/v1/virtual-bank-account/:accountReference
    method: GET
    data_selector: data
    params: {}
- name: virtual_bank_account_transactions
  endpoint:
    path: /api/v1/virtual-bank-account/transactions
    method: GET
    data_selector: data.transactions
    params:
      account_number: '{{accountNumber}}'
- name: credit_sandbox_vba
  endpoint:
    path: /api/v1/virtual-bank-account/sandbox/credit
    method: POST
    data_selector: data
    params:
      account_number: '{{account_number}}'
      amount: '{{amount}}'
      currency: USD
- name: create_virtual_bank_account
  endpoint:
    path: /merchant/api/v1/virtual-bank-account
    method: POST
    data_selector: data
    params: {}
- name: virtual_bank_account_query
  endpoint:
    path: /merchant/api/v1/virtual-bank-account/:accountReference
    method: GET
    data_selector: data
    params: {}
- name: charge_query
  endpoint:
    path: /merchant/api/v1/charges/:reference
    method: GET
    data_selector: data
    params: {}
- name: vba_transactions_query
  endpoint:
    path: /merchant/api/v1/virtual-bank-account/transactions
    method: GET
    data_selector: data
    params: {}
- name: credit_sandbox_vba
  endpoint:
    path: /virtual-bank-account/sandbox/credit
    method: POST
    data_selector: data
    params:
      account_number: string
      currency: NGN
      amount: number
- name: create_reference
  endpoint:
    path: /pool-accounts
    method: POST
    data_selector: data
    params:
      customer_name: string
      customer_email: string
      currency: string
      account_type: string
- name: transaction_query
  endpoint:
    path: /charges/:reference
    method: GET
    data_selector: data
    params:
      reference: string
- name: bank_transfer
  endpoint:
    path: /bank-transfers
    method: POST
    data_selector: data
    params: {}
- name: Transaction Query API
  endpoint:
    path: /transactions/query
    method: GET
    data_selector: data
    params: {}
- name: card_payments
  endpoint:
    path: /docs/card-payments
    method: GET
- name: authorize_card_transaction
  endpoint:
    path: /authorize/card/transaction
    method: POST
    data_selector: data
- name: charge_card
  endpoint:
    path: /charge/card
    method: POST
    data_selector: data
- name: card_payment
  endpoint:
    path: /v1/card/payments
    method: POST
    data_selector: payment
    params: {}
- name: charge_card
  endpoint:
    path: /merchant/api/v1/charges/card
    method: POST
    data_selector: data
- name: verify_charge
  endpoint:
    path: /merchant/api/v1/charges/:reference
    method: GET
    data_selector: data
- name: pre_authorize
  endpoint:
    path: /merchant/api/v1/charges/card/pre-authorize
    method: POST
    data_selector: data
- name: capture
  endpoint:
    path: /merchant/api/v1/charges/card/capture
    method: POST
    data_selector: data
- name: void
  endpoint:
    path: /merchant/api/v1/charges/card/void
    method: POST
    data_selector: data
- name: refund
  endpoint:
    path: /merchant/api/v1/charges/card/refund
    method: POST
    data_selector: data
- name: create_virtual_bank_account_holder
  endpoint:
    path: /v1/virtual-bank-account-holders
    method: POST
    data_selector: data
- name: create_fixed_virtual_bank_account
  endpoint:
    path: /v1/fixed-virtual-bank-accounts
    method: POST
    data_selector: data
- name: virtual_bank_account_query
  endpoint:
    path: /v1/virtual-bank-accounts/{id}
    method: GET
    data_selector: data
- name: transaction_query
  endpoint:
    path: /v1/transactions/{id}
    method: GET
    data_selector: data
- name: pay_with_bank
  endpoint:
    path: /api/v1/charge/pay-with-bank
    method: POST
    data_selector: data
    params: {}
- name: supported_banks
  endpoint:
    path: /api/v1/charge/pay-with-bank/banks
    method: GET
    data_selector: data
    params: {}
- name: charge
  endpoint:
    path: /api/v1/charge/pay-with-bank
    method: POST
    data_selector: data
    params: {}
- name: mobile_money_payments
  endpoint:
    path: /docs/mobile-money-apis
    method: GET
    data_selector: records
    params: {}
- name: create_virtual_bank_account_holder
  endpoint:
    path: /api/v1/virtual-bank-account/account-holders
    method: POST
    data_selector: data
    params: {}
- name: generate_file_upload_url
  endpoint:
    path: /api/v1/files/generate-upload-url
    method: POST
    data_selector: data
    params: {}
- name: kyc_update
  endpoint:
    path: /api/v1/virtual-bank-account/account-holders/:reference/update-kyc
    method: PATCH
    data_selector: data
    params: {}
- name: retrieve_virtual_account_holder
  endpoint:
    path: /api/v1/virtual-bank-account/account-holders/:accountHolderReference/details
    method: GET
    data_selector: data
    params: {}
- name: create_virtual_bank_account
  endpoint:
    path: /api/v1/virtual-bank-account
    method: POST
    data_selector: data
    params: {}
- name: retrieve_virtual_bank_account
  endpoint:
    path: /api/v1/virtual-bank-account/:accountReference
    method: GET
    data_selector: data
    params: {}
- name: mobile_money_payment
  endpoint:
    path: /mobile-money/checkout
    method: POST
    data_selector: data
- name: virtual_bank_account_transactions
  endpoint:
    path: /api/v1/virtual-bank-account/transactions
    method: GET
    data_selector: data.transactions
    params:
      account_number: '{{accountNumber}}'
- name: credit_sandbox_vba
  endpoint:
    path: /api/v1/virtual-bank-account/sandbox/credit
    method: POST
    data_selector: data
    params:
      account_number: '{{account_number}}'
      amount: '{{amount}}'
      currency: USD
- name: charge_mobile_money
  endpoint:
    path: /merchant/api/v1/charges/mobile-money
    method: POST
    data_selector: data
    params: {}
- name: authorize_mobile_money
  endpoint:
    path: /merchant/api/v1/charges/mobile-money/authorize
    method: POST
    data_selector: data
    params: {}
- name: verify_payment
  endpoint:
    path: /merchant/api/v1/charges/:reference
    method: GET
    data_selector: data
    params: {}
- name: pay_ins
  endpoint:
    path: /merchant/api/v1/pay-ins
    method: GET
    data_selector: data
    params:
      currency: ''
      date_from: ''
      date_to: ''
      limit: 10
      starting_after: ''
      ending_before: ''
- name: create_reference
  endpoint:
    path: /merchant/api/v1/pool-accounts
    method: POST
    data_selector: data
    params:
      customer_name: String
      customer_email: String
      currency: String
      account_type: String
- name: transaction_query
  endpoint:
    path: /merchant/api/v1/charges/:reference
    method: GET
    data_selector: data
    params:
      reference: String
- name: initiate_refund
  endpoint:
    path: /merchant/api/v1/refunds/initiate
    method: POST
    data_selector: data
    params: {}
- name: retrieve_refund_details
  endpoint:
    path: /merchant/api/v1/refunds/:reference
    method: GET
    data_selector: data
    params: {}
- name: retrieve_refunds_list
  endpoint:
    path: /merchant/api/v1/refunds
    method: GET
    data_selector: data.refunds
    params: {}
- name: bank_transfer
  endpoint:
    path: /pay-with-bank-transfer
    method: POST
    data_selector: data
    params:
      currency: NGN
- name: transaction_query
  endpoint:
    path: /transaction/query
    method: GET
    data_selector: data
- name: refunds_in_sandbox
  endpoint:
    path: /merchant/api/v1/refunds/initiate
    method: POST
    data_selector: data
    params: {}
- name: payout_api
  endpoint:
    path: /docs/payout-via-api
    method: POST
- name: withdrawals
  endpoint:
    path: /docs/withdrawals
    method: POST
- name: bulk_payouts
  endpoint:
    path: /docs/bulk-payouts-via-api
    method: POST
- name: create_beneficiary
  endpoint:
    path: /api/v1/payouts/beneficiaries
    method: POST
    data_selector: data
    params: {}
- name: retrieve_beneficiary
  endpoint:
    path: /api/v1/payouts/beneficiaries/:reference
    method: GET
    data_selector: data
    params: {}
- name: fetch_beneficiaries_history
  endpoint:
    path: /api/v1/payouts/beneficiaries
    method: GET
    data_selector: data.data
    params:
      limit: 10
      page: 1
- name: withdrawals
  endpoint:
    path: /withdrawals
    method: POST
    data_selector: data
    params: {}
- name: charge_card
  endpoint:
    path: /merchant/api/v1/charges/card
    method: POST
    data_selector: data
    params: {}
- name: verify_charge
  endpoint:
    path: /merchant/api/v1/charges/:reference
    method: GET
    data_selector: data
    params: {}
- name: initiate_bulk_payout
  endpoint:
    path: /api/v1/transactions/disburse/bulk
    method: POST
    data_selector: data
    params: {}
- name: fetch_bulk_payout
  endpoint:
    path: /api/v1/transactions/bulk/:batch_reference
    method: GET
    data_selector: data
    params: {}
- name: fetch_all_payouts_in_batch
  endpoint:
    path: /api/v1/transactions/bulk/:batch_reference/payouts
    method: GET
    data_selector: data
    params: {}
- name: fetch_payout_transaction
  endpoint:
    path: /api/v1/transactions/:reference
    method: GET
    data_selector: data
    params: {}
- name: issuing_balance
  endpoint:
    path: /api/i/wallets/card-issuance/balances
    method: GET
    data_selector: data
    params: {}
- name: pre_authorize
  endpoint:
    path: /merchant/api/v1/charges/card/pre-authorize
    method: POST
    data_selector: data
- name: capture
  endpoint:
    path: /merchant/api/v1/charges/card/capture
    method: POST
    data_selector: data
- name: void
  endpoint:
    path: /merchant/api/v1/charges/card/void
    method: POST
    data_selector: data
- name: refund
  endpoint:
    path: /merchant/api/v1/charges/card/refund
    method: POST
    data_selector: data
- name: cardholder
  endpoint:
    path: /api/v1/cardholders
    method: POST
    data_selector: data
- name: virtual_card
  endpoint:
    path: /api/v1/cards
    method: POST
    data_selector: data
- name: fetch_all_cards
  endpoint:
    path: /api/v1/cards
    method: GET
    data_selector: data.data
- name: virtual_card_details
  endpoint:
    path: /api/v1/cards/:reference
    method: GET
    data_selector: data
- name: charge_pay_with_bank
  endpoint:
    path: /api/v1/charge/pay-with-bank
    method: POST
    data_selector: data
    params: {}
- name: supported_banks
  endpoint:
    path: /api/v1/charge/pay-with-bank/banks
    method: GET
    data_selector: data
    params: {}
- name: fund_virtual_card
  endpoint:
    path: /api/v1/cards/:reference/fund
    method: POST
- name: withdraw
  endpoint:
    path: /api/v1/cards/:reference/withdraw
    method: POST
    data_selector: data
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: card_transactions
  endpoint:
    path: /docs/card-transactions
    method: GET
- name: charge
  endpoint:
    path: /api/v1/charge/pay-with-bank
    method: POST
    data_selector: data
    params:
      reference: CPY-DFvv144ar18881811021
      amount: 1450
      currency: ZAR
      bank_code: '0001'
      customer.name: John Doe
      customer.email: johndoe@example.com
      merchant_bears_cost: false
      notification_url: https://webhook.site/b97227be-3cc0-4572-9a45-0cf944b976d3
- name: suspend_terminate_virtual_card
  endpoint:
    path: /suspend-terminate-virtual-card
    method: POST
- name: mobile_money_checkouts
  endpoint:
    path: /docs/mobile-money-checkouts
    method: GET
- name: mobile_money_apis
  endpoint:
    path: /docs/mobile-money-apis
    method: GET
- name: activate_card
  endpoint:
    path: /api/i/cards/:card_reference/status
    method: PATCH
    data_selector: status
    params: {}
- name: terminate_card
  endpoint:
    path: /api/i/cards/:card_reference/terminate
    method: PATCH
    data_selector: status
    params: {}
- name: card_expiration
  endpoint:
    path: /webhook/card/expired
    method: POST
    data_selector: data
- name: mobile_money_payment
  endpoint:
    path: /mobile-money/payments
    method: POST
    data_selector: transaction
    params: {}
- name: card_events
  endpoint:
    path: /api/i/cards/:card_reference/events
    method: GET
    data_selector: data.data
    params:
      start_date: YYYY-MM-DD
      end_date: YYYY-MM-DD
      page: 1
      limit: null
- name: mobile_money_charge
  endpoint:
    path: /merchant/api/v1/charges/mobile-money
    method: POST
    data_selector: data
    params: {}
- name: mobile_money_authorize
  endpoint:
    path: /merchant/api/v1/charges/mobile-money/authorize
    method: POST
    data_selector: data
    params: {}
- name: mobile_money_verify
  endpoint:
    path: /merchant/api/v1/charges/:reference
    method: GET
    data_selector: data
    params: {}
- name: pay_ins
  endpoint:
    path: /merchant/api/v1/pay-ins
    method: GET
    data_selector: data
    params:
      currency: ''
      date_from: ''
      date_to: ''
      limit: ''
      starting_after: ''
      ending_before: ''
- name: KYC verification in Nigeria
  endpoint:
    path: /docs/kyc-nigeria
    method: GET
- name: KYB verification in Nigeria
  endpoint:
    path: /docs/kyb-nigeria
    method: GET
- name: KYC verification in South Africa
  endpoint:
    path: /docs/kyc-za
    method: GET
- name: KYC verification in Ghana
  endpoint:
    path: /docs/kyc-ghana
    method: GET
- name: KYC verification in Kenya
  endpoint:
    path: /docs/kyc-kenya
    method: GET
- name: BVN Lookup
  endpoint:
    path: /merchant/api/v1/identities/ng/bvn
    method: POST
    data_selector: data
- name: initiate_refund
  endpoint:
    path: /merchant/api/v1/refunds/initiate
    method: POST
    data_selector: data
    params: {}
- name: retrieve_refund
  endpoint:
    path: /merchant/api/v1/refunds/:reference
    method: GET
    data_selector: data
    params: {}
- name: list_refunds
  endpoint:
    path: /merchant/api/v1/refunds
    method: GET
    data_selector: data.refunds
    params: {}
- name: webhook_notification
  endpoint:
    path: /webhook/refunds
    method: POST
    data_selector: data
    params: {}
- name: NIN Lookup
  endpoint:
    path: /merchant/api/v1/identities/ng/nin
    method: POST
    data_selector: data
- name: vNIN Lookup
  endpoint:
    path: /merchant/api/v1/identities/ng/vnin
    method: POST
    data_selector: data
    params: {}
- name: refunds
  endpoint:
    path: /merchant/api/v1/refunds/initiate
    method: POST
    data_selector: data
    params:
      payment_reference: required
      reference: required
- name: advanced_phone_number_search
  endpoint:
    path: /merchant/api/v1/identities/ng/nin-phone
    method: POST
    data_selector: data
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: data
    params: {}
- name: bulk_payouts
  endpoint:
    path: /bulk-payouts
    method: POST
    data_selector: data
    params: {}
- name: withdrawals
  endpoint:
    path: /withdrawals
    method: POST
    data_selector: data
    params: {}
- name: phone_number_lookup
  endpoint:
    path: /merchant/api/v1/identities/ng/phone
    method: POST
    data_selector: data
    params: {}
- name: Certificate of Incorporation (CAC)
  endpoint:
    path: /docs/nigeria-certificate-incorporation
    method: GET
- name: create_beneficiary
  endpoint:
    path: /api/v1/payouts/beneficiaries
    method: POST
    data_selector: data
    params: {}
- name: retrieve_beneficiary
  endpoint:
    path: /api/v1/payouts/beneficiaries/:reference
    method: GET
    data_selector: data
    params: {}
- name: fetch_beneficiary_history
  endpoint:
    path: /api/v1/payouts/beneficiaries
    method: GET
    data_selector: data.data
    params:
      limit: 10
      page: 1
- name: cac_verification
  endpoint:
    path: /merchant/api/v1/identities/ng/cac
    method: POST
    data_selector: data
    params:
      id: RC00000011
      verification_consent: true
- name: SAID Verification
  endpoint:
    path: /merchant/api/v1/identities/za/said
    method: POST
    data_selector: data
- name: International Passport
  endpoint:
    path: /docs/ghana-international-passport
    method: GET
    data_selector: records
    params: {}
- name: SSNIT
  endpoint:
    path: /docs/ghana-ssnit
    method: GET
    data_selector: records
    params: {}
- name: Ghana Voters Card
  endpoint:
    path: /docs/ghana-voters-card
    method: GET
    data_selector: records
    params: {}
- name: Ghanaian Driver's License
  endpoint:
    path: /docs/ghana-drivers-license
    method: GET
    data_selector: records
    params: {}
- name: bulk_payout_initiate
  endpoint:
    path: /api/v1/transactions/disburse/bulk
    method: POST
    data_selector: data
    params: {}
- name: fetch_bulk_payout
  endpoint:
    path: /api/v1/transactions/bulk/:batch_reference
    method: GET
    data_selector: data
    params: {}
- name: fetch_all_payouts_in_batch
  endpoint:
    path: /api/v1/transactions/bulk/:batch_reference/payouts
    method: GET
    data_selector: data.data
    params: {}
- name: fetch_payout_transaction
  endpoint:
    path: /api/v1/transactions/:reference
    method: GET
    data_selector: data
    params: {}
- name: passport_verification
  endpoint:
    path: /identities/gh/passport
    method: POST
    data_selector: data
    params: {}
- name: issuing_balance
  endpoint:
    path: /api/i/wallets/card-issuance/balances
    method: GET
    data_selector: data.USD
    params: {}
- name: ssnit_verification
  endpoint:
    path: /merchant/api/v1/identities/gh/ssnit
    method: POST
    data_selector: data
- name: GVC Lookup
  endpoint:
    path: /merchant/api/v1/identities/gh/voters-card
    method: POST
    data_selector: data
    params: {}
- name: cardholder
  endpoint:
    path: /api/v1/cardholders
    method: POST
    data_selector: data
    params: {}
- name: virtual_card
  endpoint:
    path: /api/v1/cards
    method: POST
    data_selector: data
    params: {}
- name: card_details
  endpoint:
    path: /api/v1/cards/:reference
    method: GET
    data_selector: data
    params: {}
- name: fetch_all_cards
  endpoint:
    path: /api/v1/cards
    method: GET
    data_selector: data.data
    params: {}
- name: drivers_license_verification
  endpoint:
    path: /api/v1/identities/gh/drivers-license
    method: POST
    data_selector: data
    params: {}
- name: fund_virtual_card
  endpoint:
    path: /api/v1/cards/:reference/fund
    method: POST
    data_selector: data
    params: {}
- name: withdraw
  endpoint:
    path: /api/v1/cards/:reference/withdraw
    method: POST
    data_selector: data
    params: {}
- name: International Passport
  endpoint:
    path: /docs/kenya-international-passport
    method: GET
- name: National ID Number
  endpoint:
    path: /docs/kenya-national-id-number
    method: GET
- name: Phone Number Verification
  endpoint:
    path: /docs/kenya-phone-verification
    method: GET
- name: Tax PIN
  endpoint:
    path: /docs/kenya-taxpin
    method: GET
- name: passport_verification
  endpoint:
    path: /merchant/api/v1/identities/ke/passport
    method: POST
    data_selector: data
- name: national_id_verification
  endpoint:
    path: /merchant/api/v1/identities/ke/national-id
    method: POST
    data_selector: data
- name: card_transactions
  endpoint:
    path: /card-transactions
    method: GET
    data_selector: transactions
- name: phone_verification
  endpoint:
    path: /merchant/api/v1/identities/ke/get-phone
    method: POST
    data_selector: data
- name: suspend_or_terminate_virtual_card
  endpoint:
    path: /suspend-or-terminate-virtual-card
    method: POST
    data_selector: data
- name: tax_pin_verification
  endpoint:
    path: /merchant/api/v1/identities/ke/tax-pin
    method: POST
    data_selector: data
    params: {}
- name: activate_card
  endpoint:
    path: /api/i/cards/:card_reference/status
    method: PATCH
    data_selector: data
    params: {}
- name: terminate_card
  endpoint:
    path: /api/i/cards/:card_reference/terminate
    method: PATCH
    data_selector: data
    params: {}
- name: card_expiration
  endpoint:
    path: /virtual-card-expiration
    method: GET
    data_selector: data
    params: {}
- name: verifications
  endpoint:
    path: /merchant/api/v1/identities/verifications/:reference
    method: GET
    data_selector: data
    params: {}
- name: verification_history
  endpoint:
    path: /merchant/api/v1/identities/verifications
    method: POST
    data_selector: data.data
    params: {}
- name: card_events
  endpoint:
    path: /api/i/cards/:card_reference/events
    method: GET
    data_selector: data.data
    params: {}
- name: balances
  endpoint:
    path: /balances
    method: GET
    data_selector: data
- name: chargeback
  endpoint:
    path: /disputes
    method: POST
    data_selector: data
    params: {}
- name: balance_history
  endpoint:
    path: /merchant/api/v1/balances/history
    method: GET
    data_selector: data
    params: {}
- name: exchange_rate
  endpoint:
    path: /docs/exchange-rate-api
    method: GET
- name: currency_conversion
  endpoint:
    path: /docs/currency-conversion-api
    method: GET
- name: exchange_rate
  endpoint:
    path: /api/v1/conversions/rates
    method: POST
    data_selector: data
    params: {}
- name: Bank Verification Number (BVN)
  endpoint:
    path: /docs/nigeria-bvn
    method: GET
- name: Virtual National Identification Number (vNIN)
  endpoint:
    path: /docs/nigeria-vnin
    method: GET
- name: National Identification Number (NIN)
  endpoint:
    path: /docs/nigeria-nin
    method: GET
- name: Advanced Phone Number Search
  endpoint:
    path: /docs/nigeria-advanced-phone
    method: GET
- name: Phone Number Verification
  endpoint:
    path: /docs/nigeria-phone
    method: GET
- name: bvn_lookup
  endpoint:
    path: /merchant/api/v1/identities/ng/bvn
    method: POST
    data_selector: data
- name: initiate_conversion
  endpoint:
    path: /api/v1/conversions/
    method: POST
    data_selector: data
- name: retrieve_conversion_transaction
  endpoint:
    path: /api/v1/conversions/:reference
    method: GET
    data_selector: data
- name: fetch_conversion_history
  endpoint:
    path: /api/v1/conversions
    method: GET
    data_selector: data
- name: DCC Transaction
  endpoint:
    path: /dcc/transaction
    method: POST
    data_selector: status
    params: {}
- name: NIN Lookup
  endpoint:
    path: /merchant/api/v1/identities/ng/nin
    method: POST
    data_selector: data
    params: {}
- name: conversions
  endpoint:
    path: /conversions
    method: GET
- name: vNIN Lookup
  endpoint:
    path: /merchant/api/v1/identities/ng/vnin
    method: POST
    data_selector: data
    params: {}
- name: settlements
  endpoint:
    path: /docs/local-settlements
    method: GET
    data_selector: settlements
    params: {}
- name: advanced_phone_number_search
  endpoint:
    path: /merchant/api/v1/identities/ng/nin-phone
    method: POST
    data_selector: data
    params: {}
- name: audit_logs
  endpoint:
    path: /docs/audit-logs
    method: GET
- name: settlements
  endpoint:
    path: /docs/local-settlements
    method: GET
- name: phone_number_lookup
  endpoint:
    path: /identities/ng/phone
    method: POST
    data_selector: data
    params: {}
- name: cac_lookup
  endpoint:
    path: /merchant/api/v1/identities/ng/cac
    method: POST
    data_selector: data
    params: {}
- name: South African ID Number (SAID)
  endpoint:
    path: /docs/za-said
    method: GET
- name: said_verification
  endpoint:
    path: /merchant/api/v1/identities/za/said
    method: POST
    data_selector: data
    params: {}
- name: International Passport Verification
  endpoint:
    path: /docs/ghana-international-passport
    method: GET
- name: SSNIT Verification
  endpoint:
    path: /docs/ghana-ssnit
    method: GET
- name: Ghana Voters Card Verification
  endpoint:
    path: /docs/ghana-voters-card
    method: GET
- name: Driver's License Verification
  endpoint:
    path: /docs/ghana-drivers-license
    method: GET
- name: passport_verification
  endpoint:
    path: /merchant/api/v1/identities/gh/passport
    method: POST
    data_selector: data
- name: ssnit_verification
  endpoint:
    path: /merchant/api/v1/identities/gh/ssnit
    method: POST
    data_selector: data
- name: GVC Lookup
  endpoint:
    path: /merchant/api/v1/identities/gh/voters-card
    method: POST
    data_selector: data
- name: drivers_license_verification
  endpoint:
    path: /api/v1/identities/gh/drivers-license
    method: POST
    data_selector: data
    params: {}
- name: International Passport Verification
  endpoint:
    path: /docs/kenya-international-passport
    method: GET
- name: National ID Number Verification
  endpoint:
    path: /docs/kenya-national-id-number
    method: GET
- name: Phone Number Verification
  endpoint:
    path: /docs/kenya-phone-verification
    method: GET
- name: Tax PIN Verification
  endpoint:
    path: /docs/kenya-taxpin
    method: GET
- name: passport_verification
  endpoint:
    path: /merchant/api/v1/identities/ke/passport
    method: POST
    data_selector: data
- name: national_id_verification
  endpoint:
    path: /merchant/api/v1/identities/ke/national-id
    method: POST
    data_selector: data
    params: {}
- name: tax_pin_verification
  endpoint:
    path: /merchant/api/v1/identities/ke/tax-pin
    method: POST
    data_selector: data
    params: {}
- name: verifications
  endpoint:
    path: /merchant/api/v1/identities/verifications/:reference
    method: GET
    data_selector: data
- name: verification_history
  endpoint:
    path: /merchant/api/v1/identities/verifications
    method: POST
    data_selector: data
- name: balance
  endpoint:
    path: /api/balance
    method: GET
    data_selector: data
    params: {}
- name: balance_history
  endpoint:
    path: /api/balance/history
    method: GET
    data_selector: data
    params: {}
- name: balances
  endpoint:
    path: /balances
    method: GET
    data_selector: data
- name: balance_history
  endpoint:
    path: /balances/history
    method: GET
    data_selector: data
    params:
      currency: NGN
      date_from: YYYY-MM-DD-HH-MM-SS
      date_to: YYYY-MM-DD-HH-MM-SS
      limit: 10
      starting_after: pointer
      ending_before: pointer
      direction: debit
- name: exchange_rate
  endpoint:
    path: /api/v1/conversions/rates
    method: POST
    data_selector: data
    params: {}
- name: initiate_currency_conversion
  endpoint:
    path: /api/v1/conversions/
    method: POST
    data_selector: data
    params: {}
- name: retrieve_conversion_transaction
  endpoint:
    path: /api/v1/conversions/:reference
    method: GET
    data_selector: data
    params: {}
- name: conversion_history
  endpoint:
    path: /api/v1/conversions
    method: GET
    data_selector: data
    params: {}
- name: dcc_transaction
  endpoint:
    path: /api/dcc-transaction
    method: POST
    data_selector: status
    params: {}
- name: conversions
  endpoint:
    path: /conversions
    method: GET
    data_selector: transactions
- name: settlements
  endpoint:
    path: /docs/local-settlements
    method: GET
    data_selector: settlements
    params: {}
- name: settlement_mode_schedule
  endpoint:
    path: /docs/local-settlements
    method: GET
    data_selector: settlement_modes
- name: settlement_destination
  endpoint:
    path: /docs/local-settlements
    method: GET
    data_selector: settlement_destinations
- name: audit_logs
  endpoint:
    path: /audit-logs
    method: GET
    data_selector: events
notes:
- Payouts on Kora are done using RESTful APIs
- Receive confirmation via webhook when the payout is completed.
- For payouts in XAF and XOF, you are ONLY allowed to pay out amounts in multiples
  of 5s and 10s.
- For a smooth integration experience, you’ll need your API keys which you can receive
  by signing up on the dashboard or contacting us.
- The API keys in test mode are different from the API keys in Live mode.
- No real charge is made on payments in Test mode. Real charges are made in Live mode,
  so be cautious.
- Analytics and real data representations are only available in Live mode.
- The flow for some payment methods, like card payments, are truncated and may be
  more straightforward in Test mode than in Live mode.
- It is important to test your integration before going live to make sure it works
  properly.
- Webhook URL must be unauthenticated and publicly available.
- Acknowledge receipt of notifications with a 200 HTTP status code.
- 'To set or modify the payout webhook URL on the Kora (merchant) dashboard, please
  follow these steps: Go to ''Settings'' on the merchant dashboard. Click ''API Configuration''.
  Under ''Notification URL'' at the bottom, you can set the URL.'
- Kora supports receiving payments via Card Payments, Mobile Money, Bank Transfers,
  Pay with Bank, EFTs, and Virtual Bank Accounts.
- Avoid exposing your secret key on the client-side (or front end) of your application.
- Requests to the Kora's API should be initiated from your server.
- Go to 'Settings' on the merchant dashboard.
- Click 'API Configuration'.
- Under 'Notification URL' at the bottom, you can set the URL.
- 'Authorization: Bearer {SECRET_KEY} REQUIRED'
- All test data required for simulating test transactions within the Sandbox environment
  is available here
- The Virtual Bank Account feature may vary significantly based on currency in terms
  of account details and functionality.
- You can only create a total of fifty (50) virtual bank accounts by default.
- Webhook notifications are sent to the notification_url when the payment is successful.
- You can only create one virtual bank account per account holder for each currency.
- By default, you can only create a total of fifty (50) virtual bank accounts.
- This service is currently only available to merchants participating in our beta
  program.
- Only one Reference ID can be generated per customer email address.
- Currently, the Bank Transfer API service is only available for Nigerian Naira (NGN)
  transactions.
- You are expected to use the amount_accepted field to credit value to your customer.
- Ensure you have card payments enabled for your account.
- Currently only supports payments in Nigerian Naira.
- 'Supported card schemes: Mastercard, VISA, Verve.'
- Card payments need to be enabled on your account before you can start accepting
  such payments.
- You are required to be PCI DSS certified (Level 1) to use Card APIs.
- To make use of our Card APIs, you are also required to be PCI DSS certified (Level
  1).
- Customers who choose to use Pay with Bank on Checkout should have online/internet
  banking enabled on their accounts.
- This service is currently only available to merchants participating in the beta
  program.
- Customers should have online/internet banking enabled on their accounts.
- This payment method is only available for South African (ZAR) payments.
- Customers who choose to use Pay by Bank (Instant EFT) on Checkout should have online/internet
  banking enabled on their bank accounts.
- By default, you can only create a total of one (1) virtual bank account per account
  holder for each currency.
- To test this payment method, switch to test mode on your dashboard.
- Payments to a deactivated account will be flagged and not settled.
- Webhook setup is required for payment confirmation
- The Refunds API allows merchants to refund successful and settled transactions via
  API.
- Dynamic virtual bank accounts generated for the Bank Transfer payments include Wema
  Bank, Sterling Bank, and Providus Bank.
- To utilize the feature to set preferences for handling overpayments and underpayments,
  you are required to integrate the Transaction Query API endpoint.
- Refunds can also be initiated in the sandbox environment.
- Another way to accept card payments is by using our Card Payment APIs.
- We currently only support payments in Nigerian Naira.
- Supports Mastercard, VISA, Verve.
- File upload must be multipart/form-data
- 'Required fields for upload: file, purpose, reference'
- Payments are supported only in Nigerian Naira.
- PCI DSS certification (Level 1) is required to process card payments.
- By default, Korapay prevents you from making transfers with this method if your
  NGN balance is less than N100.00.
- The minimum amount you can withdraw in a single attempt is N100.00.
- Ensure sufficient funds in balance before initiating a bulk payout.
- Currently, Kora's Card Issuing API only allows you to issue virtual USD cards.
- Please note that customers who choose to use Pay with Bank on Checkout should have
  online/internet banking enabled on their accounts.
- The minimum amount for a transaction is NGN 200.00.
- Customers must have online/internet banking enabled on their accounts.
- Every payment made with the virtual card goes through a series of events triggered
  by the purchasing merchant.
- Conversion rates are subject to change.
- This payment method is only available for South African (ZAR) payments
- Customers who choose to use Pay by Bank (Instant EFT) should have online/internet
  banking enabled on their bank accounts.
- Payment option is currently available in Kenya (KES), Ghana (GHS), Cameroon (XAF),
  Ivory Coast (XOF), and Egypt (EGP).
- Ensure you have Mobile Money payments enabled for your account.
- Webhook notification is sent when a virtual card expires.
- Chargebacks are to be logged within 120 calendar days from the date of the transaction.
- Ensure to include the relevant country currency.
- You can set your application to receive a confirmation via webhooks when a mobile
  money payment is successful.
- The complete amount will be refunded if the amount is not specified in the initiation.
- The request body should have the required parameters for verification to be performed.
- Verification consent must be true for the check to be performed.
- The verification_consent must be true for the check to be performed.
- Currently, Kora’s Payout API supports Payouts to multiple countries' bank accounts
  and mobile money accounts.
- It is important to always have sufficient funds in your available balance to successfully
  verify identities.
- Make sure to provide all required fields when creating a beneficiary.
- 'The request body should have parameters: file (required), purpose (required), reference
  (required).'
- A webhook notification will also be sent to your application immediately the SAID
  verification is completed.
- The request body must include 'verification_consent' set to true.
- PCI DSS compliance and certification is a requirement for access to the Card Issuing
  service.
- The id and verification_consent fields are required for the verification request.
- You must have sufficient funds in your issuing balance to successfully fund the
  virtual card.
- A webhook notification will also be sent to your application immediately the international
  passport verification is completed.
- Suspending an issued card temporarily stops all transaction activities on the card.
- Terminating a card permanently disables all transaction activities on that card.
- The API accepts parameters like start_date and end_date to filter events.
- Funds must first be available in your Balance before you can successfully make payouts.
- Use the test secret key for authorization instead of your live secret key.
- Verification fees are charged from your available balance. Ensure that your balance
  is always funded.
- Both payment_currency and settlement_currency must be supported by Kora.
- The request body must include verification_consent set to true.
- Local settlements are available to all merchants transacting with the local currency
  (Nigerian Naira) on Korapay.
- By default, bank transfers are settled instantly, while card payments are settled
  on the next day.
- This endpoint verifies a phone number registered with an NIN from the NIMC database.
- The 'verification_consent' must be true for the check to be performed.
- Always ensure to keep your API keys safe. Do not share your API keys with anyone
  or on any unauthorized and unsecure application.
- The request body must include the ID number and consent for verification.
- verification_consent must be true for the check to be performed.
- Verification in the sandbox environment can only be done with test data.
- The request body for querying verifications should include the reference of the
  verification event.
- The request body for fetching verification history can include start_date, end_date,
  limit, and page.
- Ensure that your account is activated and Live Mode is turned on.
- Verify that your account has the USD Currency enabled.
- Verify that your account is activated for the Currency conversion product.
- The currency field should indicate the currency of the amount sent for collection.
- The exchange rate can be marked up in the settlement settings on the dashboard.
- You can initiate, view and manage conversion transactions from your Kora dashboard.
- Receive settlements in your local currency (Nigerian Naira) and bank account - Nigerian
  Merchants only.
- Bank transfers are settled instantly, while card payments are settled on the next
  day.
- Audit logs do not reveal sensitive information like payment details, passwords,
  etc.
errors:
- Invalid request, ignore if not a POST request or missing header 'HTTP_X_KORAPAY_SIGNATURE'.
- 'Internal Server Error: This response does not indicate any error with your request,
  so you can requery the transaction to get a final status or you can report this
  to us.'
- 'Invalid authorization key: This response does not indicate any error with your
  request. Requery the transaction to get the final status.'
- 'Invalid request data: This error occurs when the request is sent with invalid data,
  more details of the error can be found in the data object which is also sent back
  as a response. Try the request again once the errors returned in the data object
  is resolved.'
- 'Charge not found: This error occurs when the deposit order ID sent in the request
  does not exist on our system. This can be treated as a failed transaction.'
- 'Duplicate payment reference: This error occurs when the reference sent in the request
  has already been used for a previous transaction.'
- 'Unable to resolve bank account.: This error occurs when our system is unable to
  successfully validate a customer’s bank account to determine if it’s valid or not.
  This can be treated as a failed withdrawal. There would be no need to query for
  a final status as the withdrawal would not exist on our system. Querying the withdrawal
  will return the error ''Transaction not found''.'
- 'Transaction not found: This error occurs when the withdraw order ID attached to
  the request does not exist on our system. This can be treated as a failed transaction.'
- 'Invalid account.: This error occurs when the bank account details provided for
  a withdrawal is not valid. This can be treated as a failed transaction. There would
  be no need to query for a final status as the transaction would not exist on our
  system. Querying the withdrawal will return the error ''Transaction not found''.'
- 'Invalid bank provided.: This error occurs when the destination bank provided for
  withdrawal is not supported on our system or the bank code is invalid. This can
  be treated as a failed transaction. There would be no need to query for a final
  status as the transaction would not exist on our system. Querying the withdrawal
  will return the error ''Transaction not found''.'
- 'Invalid mobile money operator.: This error occurs when the mobile money operator
  provided for mobile money payout is not supported on our system or the operator
  code is invalid. This can be treated as a failed transaction. There would be no
  need to query for a final status as the transaction would not exist on our system.
  Querying the withdrawal will return the error ''Transaction not found''.'
- 'Insufficient funds in disbursement wallet: This error occurs when the funds available
  in your wallet is not enough to process a withdrawal request. This can be treated
  as a failed withdrawal. Try the request again with a new order ID once funds have
  been added to your wallet.'
- 'Duplicate Transaction Reference. Please use a unique reference: This error occurs
  when the reference sent in the request has already been used for a previous transaction.'
- 'Insufficient funds in disbursement wallet: This means that the funds available
  in your merchant wallet are not enough to process the transaction. Try the request
  again with a new order ID once funds have been added to your wallet.'
- 'Dormant account: This means that the destination bank account details provided
  has been marked as dormant by the destination bank and is unable to accept payments
  for that purpose. Try the request again with a new reference and bank details or
  have the customer reach out to their bank for further assistance.'
- 'Timeout waiting for response from destination: This means that the destination
  bank did not respond on time. Have the customer try again at a later time or with
  a different bank.'
- 'Destination bank is not available: This means that the destination bank could not
  be contacted. Have the customer try again at a later time or with a different bank.'
- 'Payout terminated due to suspected fraud: This means that the transaction was flagged
  as fraudulent.'
- 'Do not honor: This means that the bank declined the transaction for reasons best
  known to them, or when a restriction has been placed on a customer’s account. Try
  the request again at a later time with a new reference or have the customer provide
  a different bank.'
- 'Payout limit exceeded: This means that the transaction being attempted will bring
  the customer''s bank balance above the maximum limit set by their bank or that they
  have exceeded their limit for that day. Try the request again with a new reference
  or have the customer provide a different bank.'
- 'Unable to complete this transaction: This means the transaction could not be completed
  successfully due to downtime with the payment switch as of when the transaction
  was attempted. Try the request again with a new reference at a later time.'
- 'Invalid transaction: This is an error from the payment switch. Try the request
  again with a new reference.'
- 'Payout failed: This means the transaction could not be completed successfully for
  some unknown reason. Try the request again with a new reference.'
- 'Transaction has not yet been settled: This means that the transaction you are attempting
  to refund has not yet been settled to your balance. Until the transaction is settled,
  funds cannot be reversed. Please attempt the refund again after the expected settlement
  date.'
- 'Refund can only be requested on a successful transaction: This means that the original
  transactions wasn''t processed successfully. You can only request a refund for a
  transaction that was successfully processed.'
- 'Transaction not found: This error occurs when the transaction reference submitted
  for the refund does not exist on our system. This can be treated as a failed refund.'
- 'Refund already exists with reference **reference submitted**: This error occurs
  when the reference sent in the request has already been used for a previously initiated
  refund. Please attempt the refund again with a different reference.'
- 'Refund not supported for this currency, please contact support: This error occurs
  when refund is not supported for the transaction currency. Please get in touch with
  our support team. They''ll be able to guide on how to proceed.'
- 'Refund amount cannot be more than **{currency} {transactionAmountCollected}**:
  This means that the refund amount provided exceeds the value of the original successful
  transaction amount. Please update the refund amount you are trying to process and
  try again.'
- 'Refund amount cannot be less than **{currency} {minimumRefundAmount}**: This means
  that the refund amount specified is below the minimum allowed value for processing.
  The system enforces a minimum refund amount for the currencies supported as shown
  [here](/docs/refunds-api#refund-amount-requirements). Please get in touch with our
  support team if you need this reviewed.'
- 'A full reversal has already been processed for this transaction: This means that
  a reversal equivalent to the original transaction amount has already been successfully
  initiated. Please verify the details of the reversal(s) on the transaction details
  page of the dashboard.'
- 'A full refund cannot be initiated for this transaction. Please enter an amount
  less than or equal to **{currency} {transactionAmountCollected}**: This error occurs
  when no refund amount is passed in the request and the system tries to process a
  full refund but the total remaining refundable amount for the transaction is less
  than amount collected. To resolve this, please enter the specific amount you wish
  to refund. This amount must be less or equal to the amount left to be refunded.'
- 'The maximum refundable amount for this transaction is **{currency} {transactionAmountCollected
  minus amountAlreadyReversed}**: This error occurs when the amount requested to be
  refunded is more than the maximum refundable amount. To resolve this, please enter
  the specific amount you wish to refund. This amount must be less or equal to the
  amount left to be refunded.'
- 'Insufficient funds in disbursement wallet: This error occurs when the funds available
  in your wallet is not enough to process a refund request. This can be treated as
  a failed refund. Try the request again with the same refund reference once funds
  have been added to your wallet.'
- 'Unable to resolve bank account: This error occurs when our system is unable to
  successfully validate a customer’s bank account to determine if it’s valid or not.
  This can be treated as a failed withdrawal.'
- 'Invalid account: This error occurs when the bank account details provided for a
  withdrawal is not valid. This can be treated as a failed transaction.'
- 'Invalid bank provided: This error occurs when the destination bank provided for
  withdrawal is not supported on our system or the bank code is invalid. This can
  be treated as a failed transaction.'
- 'Invalid mobile money operator: This error occurs when the mobile money operator
  provided for mobile money payout is not supported on our system or the operator
  code is invalid. This can be treated as a failed transaction.'
- 'Insufficient funds in disbursement wallet: This error occurs when the funds available
  in your wallet is not enough to process a withdrawal request. This can be treated
  as a failed withdrawal.'
- 'Dormant account: This means that the destination bank account details provided
  has been marked as dormant by the destination bank and is unable to accept payments
  for that purpose.'
- 'Timeout waiting for response from destination: This means that the destination
  bank did not respond on time.'
- 'Destination bank is not available: This means that the destination bank could not
  be contacted.'
- 'Do not honor: This means that the bank declined the transaction for reasons best
  known to them.'
- 'Payout limit exceeded: This means that the transaction being attempted will bring
  the customer''s bank balance above the maximum limit set by their bank.'
- 'Unable to complete this transaction: This means the transaction could not be completed
  successfully due to downtime with the payment switch.'
- 'Invalid transaction: This is an error from the payment switch.'
- 'Payout failed: This means the transaction could not be completed successfully for
  some unknown reason.'
- 'Transaction has not yet been settled: This means that the transaction you are attempting
  to refund has not yet been settled to your balance.'
- 'Refund can only be requested on a successful transaction: This means that the original
  transactions wasn''t processed successfully.'
- 'Refund already exists: This error occurs when the reference sent in the request
  has already been used for a previously initiated refund.'
- 'Refund not supported for this currency, please contact support: This error occurs
  when refund is not supported for the transaction currency.'
- 'Refund amount cannot be more than: This means that the refund amount provided exceeds
  the value of the original successful transaction amount.'
- 'Refund amount cannot be less than: This means that the refund amount specified
  is below the minimum allowed value for processing.'
- 'A full reversal has already been processed for this transaction: This means that
  a reversal equivalent to the original transaction amount has already been successfully
  initiated.'
- 'A full refund cannot be initiated for this transaction. Please enter an amount
  less than or equal to: This error occurs when no refund amount is passed in the
  request.'
- 'The maximum refundable amount for this transaction is: This error occurs when the
  amount requested to be refunded is more than the maximum refundable amount.'
- 'Insufficient funds in disbursement wallet: This error occurs when the funds available
  in your wallet is not enough to process a refund request.'
- 'Invalid API Key: Ensure you are using a valid API key.'
- 'Transaction Failed: Check the transaction status for details.'
- '400 Bad Request: Check required parameters'
- '401 Unauthorized: Check API key'
- '404 Not Found: Endpoint does not exist'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: You have reached the limit of virtual bank accounts.'
- '409: A reference already exists for this customer.'
- '503: Internal server error.'
- '403: You are not authorized to use this service.'
- 'Invalid API key: Check your API key and try again.'
- 'Transaction not found: Ensure the transaction reference is correct.'
- 'INVALID_PAYMENT_DATA: Ensure all required fields are provided and correctly formatted'
- Invalid request data
- Card not supported
- Transaction not found
- Payment has already been completed
- Transaction has already been completed
- Duplicate payment reference
- Authorization is not required for this transaction
- Unable to decrypt charge data, please check encryption and try again
- Service currently unavailable
- An error occurred, please contact support
- An error occurred, please try again
- Internal server error. It would be nice if you report this to us
- 'INVALID_MOBILE_NUMBER: Ensure the mobile number is valid'
- 'TRANSACTION_FAILED: Check if the transaction meets the requirements'
- 'Invalid OTP: The OTP you provided is invalid'
- Amount can't be more than NGN 2000
- Refund not found
- Internal server error. It would be nice if you report this to us.
- '401 Unauthorized: Recheck API key or token expiration'
- 'Invalid Bank Account: Check the provided bank account details.'
- 'Transaction failed: Verify the status of the transaction.'
- 'Transaction failed: Insufficient balance'
- 'Transaction failed: Card not active'
- 'INVALID_PARAMETER: Check the parameter values provided in the request'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Invalid API key.'
- '404 Not Found: Endpoint does not exist.'
- '400 Bad Request: Ensure all required fields are included.'
- '404 Not Found: Check if the beneficiary reference is correct.'
- '400 Bad Request: Check that the required parameters are included.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.korapay.com
  auth:
    type: apikey
source_metadata: null
