resources:
- name: index
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: get_book
  endpoint:
    path: /books/{book_id:int}
    method: GET
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /{user_id:uuid}
    method: PATCH
- name: users
  endpoint:
    path: /{user_id:uuid}
    method: PUT
- name: users
  endpoint:
    path: /{user_id:uuid}
    method: GET
- name: users
  endpoint:
    path: /{user_id:uuid}
    method: DELETE
- name: index
  endpoint:
    path: /
    method: GET
    data_selector: ''
- name: get_book
  endpoint:
    path: /books/{book_id:int}
    method: GET
    data_selector: ''
- name: user
  endpoint:
    path: /users
    method: POST
    data_selector: ''
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: ''
    params: {}
- name: user
  endpoint:
    path: /users/{user_id:uuid}
    method: PATCH
    data_selector: ''
    params: {}
- name: user
  endpoint:
    path: /users/{user_id:uuid}
    method: PUT
    data_selector: ''
    params: {}
- name: user
  endpoint:
    path: /users/{user_id:uuid}
    method: GET
    data_selector: ''
    params: {}
- name: user
  endpoint:
    path: /users/{user_id:uuid}
    method: DELETE
    data_selector: ''
    params: {}
- name: user
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: data
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: db_connection
  endpoint:
    path: /some-path
    method: GET
- name: hello_world
  endpoint:
    path: /
    method: GET
    data_selector: hello
    params: {}
- name: create_user
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: url_encoded_form_data
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: multipart_form_data
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: file_uploads
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: messagepack_data
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: custom_request
  endpoint:
    path: /kitten-name
    method: GET
    data_selector: request.kitten_name
    params: {}
- name: cached
  endpoint:
    path: /cached
    method: GET
    data_selector: cached
    params: {}
- name: cached_seconds
  endpoint:
    path: /cached-seconds
    method: GET
    data_selector: cached for 120 seconds
    params: {}
- name: cached_forever
  endpoint:
    path: /cached-forever
    method: GET
    data_selector: cached forever
    params: {}
- name: ChannelsPlugin
  endpoint:
    path: /reference/channels/plugin.html
    method: GET
    data_selector: data
    params: {}
- name: Subscriber
  endpoint:
    path: /reference/channels/subscriber.html
    method: GET
    data_selector: data
    params: {}
- name: Backend
  endpoint:
    path: /reference/channels/backends/base.html
    method: GET
    data_selector: data
    params: {}
- name: dependencies
  endpoint:
    path: /
    method: GET
    data_selector: conn
- name: user_created
  endpoint:
    path: /users
    method: POST
    data_selector: data
    params: {}
- name: user_deleted
  endpoint:
    path: /users
    method: POST
    data_selector: data
    params: {}
- name: create_user
  endpoint:
    path: /users
    method: POST
    data_selector: data
    params: {}
- name: delete_user
  endpoint:
    path: /users
    method: POST
    data_selector: data
    params: {}
- name: user_created
  endpoint:
    path: /users
    method: POST
    data_selector: null
    params: {}
- name: user_deleted
  endpoint:
    path: /users
    method: POST
    data_selector: null
    params: {}
- name: user_created
  endpoint:
    path: /users
    method: POST
    data_selector: null
    params: {}
- name: user_deleted
  endpoint:
    path: /users
    method: POST
    data_selector: null
    params: {}
- name: HTMXPlugin
  endpoint:
    path: /reference/plugins/htmx.html
    method: GET
- name: HTMXRequest
  endpoint:
    path: /reference/connection.html#litestar.connection.Request
    method: GET
- name: HTMXTemplate
  endpoint:
    path: /form
    method: GET
    data_selector: template
    params: {}
- name: ClientRedirect
  endpoint:
    path: /
    method: GET
    data_selector: redirect
    params: {}
- name: ClientRefresh
  endpoint:
    path: /
    method: GET
    data_selector: refresh
    params: {}
- name: before_request
  endpoint:
    path: /
    method: GET
    data_selector: message
- name: after_request
  endpoint:
    path: /hello
    method: GET
    data_selector: message
- name: goodbye
  endpoint:
    path: /goodbye
    method: GET
    data_selector: message
- name: resources
  endpoint:
    path: /resources
    method: GET
    data_selector: Resource
    params: {}
- name: health_check
  endpoint:
    path: /health-check
    method: GET
    data_selector: hello
    params: {}
- name: retrieve_resource
  endpoint:
    path: /resources
    method: GET
    data_selector: id
    params: {}
- name: resources
  endpoint:
    path: /resources
    method: GET
    data_selector: Resource
- name: health_check
  endpoint:
    path: /health-check
    method: GET
    data_selector: health_check
- name: health_check
  endpoint:
    path: /health-check
    method: GET
    data_selector: null
    params: {}
- name: page
  endpoint:
    path: /page
    method: GET
    data_selector: null
    params: {}
- name: resources
  endpoint:
    path: /resources
    method: GET
    data_selector: records
    params:
      status_code: HTTP_202_ACCEPTED
- name: population
  endpoint:
    path: /population
    method: GET
    data_selector: null
    params: {}
- name: chance_of_rain
  endpoint:
    path: /chance_of_rain
    method: GET
    data_selector: null
    params: {}
- name: timestamp
  endpoint:
    path: /timestamp
    method: GET
    data_selector: null
    params: {}
- name: resources
  endpoint:
    path: /resources
    method: GET
    data_selector: Resource
- name: health-check
  endpoint:
    path: /health-check
    method: GET
    data_selector: Dict[str, str]
- name: people
  endpoint:
    path: /people
    method: GET
    params:
      cursor: cursor
      results_per_page: results_per_page
- name: static_files
  endpoint:
    path: /static
    method: GET
    data_selector: files
    params: {}
- name: static_files
  endpoint:
    path: /static
    method: GET
    data_selector: files
    params:
      send_as_attachment: true
- name: html_files
  endpoint:
    path: /
    method: GET
    data_selector: html
    params:
      html_mode: true
- name: asset
  endpoint:
    path: /asset
    method: POST
- name: MemoryStore
  endpoint:
    path: /reference/stores/memory.html
    method: GET
    data_selector: MemoryStore
- name: FileStore
  endpoint:
    path: /reference/stores/file.html
    method: GET
    data_selector: FileStore
- name: RedisStore
  endpoint:
    path: /reference/stores/redis.html
    method: GET
    data_selector: RedisStore
- name: ValkeyStore
  endpoint:
    path: /reference/stores/valkey.html
    method: GET
    data_selector: ValkeyStore
- name: MemoryStore
  endpoint:
    path: /stores/memory
    method: GET
    data_selector: records
- name: FileStore
  endpoint:
    path: /stores/file
    method: GET
    data_selector: records
- name: RedisStore
  endpoint:
    path: /stores/redis
    method: GET
    data_selector: records
- name: ValkeyStore
  endpoint:
    path: /stores/valkey
    method: GET
    data_selector: records
- name: MemoryStore
  endpoint:
    path: /reference/stores/memory.html
    method: GET
    data_selector: store
    params: {}
- name: FileStore
  endpoint:
    path: /reference/stores/file.html
    method: GET
    data_selector: store
    params: {}
- name: RedisStore
  endpoint:
    path: /reference/stores/redis.html
    method: GET
    data_selector: store
    params: {}
- name: ValkeyStore
  endpoint:
    path: /reference/stores/valkey.html
    method: GET
    data_selector: store
    params: {}
- name: MemoryStore
  endpoint:
    path: /reference/stores/memory.html
    method: GET
    data_selector: MemoryStore
- name: FileStore
  endpoint:
    path: /reference/stores/file.html
    method: GET
    data_selector: FileStore
- name: RedisStore
  endpoint:
    path: /reference/stores/redis.html
    method: GET
    data_selector: RedisStore
- name: ValkeyStore
  endpoint:
    path: /reference/stores/valkey.html
    method: GET
    data_selector: ValkeyStore
- name: jinja
  endpoint:
    path: /litestar/contrib/jinja
    method: GET
- name: mako
  endpoint:
    path: /litestar/contrib/mako
    method: GET
- name: minijinja
  endpoint:
    path: /litestar/contrib/minijinja
    method: GET
- name: Jinja
  endpoint:
    path: /template/jinja
    method: POST
    data_selector: templates
    params: {}
- name: Mako
  endpoint:
    path: /template/mako
    method: POST
    data_selector: templates
    params: {}
- name: MiniJinja
  endpoint:
    path: /template/minijinja
    method: POST
    data_selector: templates
    params: {}
- name: Jinja
  endpoint:
    path: /path/to/jinja
    method: GET
    data_selector: records
- name: Mako
  endpoint:
    path: /path/to/mako
    method: GET
    data_selector: records
- name: MiniJinja
  endpoint:
    path: /path/to/minijinja
    method: GET
    data_selector: records
- name: notify
  endpoint:
    path: /notify/{topic:str}
    method: GET
    data_selector: data
- name: health_check
  endpoint:
    path: /health-check
    method: GET
    data_selector: text
    params: {}
- name: ping
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: websocket_listener
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: websocket_handler
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: websocket_listener
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: BackgroundTask
  endpoint:
    path: /litestar/background_tasks/BackgroundTask
    method: GET
    data_selector: records
    params: {}
- name: BackgroundTasks
  endpoint:
    path: /litestar/background_tasks/BackgroundTasks
    method: GET
    data_selector: records
    params: {}
- name: sessions
  endpoint:
    path: /sessions
    method: DELETE
    data_selector: null
    params: {}
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: null
    params: {}
- name: routes
  endpoint:
    path: /routes
    method: GET
    data_selector: routes
    params: {}
- name: BaseEventEmitterBackend
  endpoint:
    path: /litestar/events/BaseEventEmitterBackend
    method: GET
    data_selector: listeners
    params: {}
- name: EventListener
  endpoint:
    path: /litestar/events/EventListener
    method: GET
    data_selector: fn
    params: {}
- name: SimpleEventEmitter
  endpoint:
    path: /litestar/events/SimpleEventEmitter
    method: GET
    data_selector: listeners
    params: {}
- name: patch
  endpoint:
    path: /litestar/handlers/patch
    method: PATCH
- name: head
  endpoint:
    path: /
    method: HEAD
- name: PUT
  endpoint:
    path: /
    method: PUT
- name: params
  endpoint:
    path: /params
    method: GET
- name: static_files
  endpoint:
    path: /usage/static-files
    method: GET
- name: status_code
  endpoint:
    path: /status_code
    method: GET
- name: FileInfo
  endpoint:
    path: /litestar/types/FileInfo
    method: GET
    data_selector: FileInfo
    params: {}
- name: FileSystemProtocol
  endpoint:
    path: /litestar/types/FileSystemProtocol
    method: GET
    data_selector: FileSystemProtocol
    params: {}
- name: user_profile
  endpoint:
    path: /user/{username:str}
    method: GET
- name: post
  endpoint:
    path: /post/{post_id:int}
    method: GET
- name: subpath
  endpoint:
    path: /path/{subpath:path}
    method: GET
- name: data
  endpoint:
    path: /
    method: GET
    data_selector: data
- name: data
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: application
  endpoint:
    path: /
    method: GET
    data_selector: hello
    params: {}
- name: create_user
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: ChannelsPlugin
  endpoint:
    path: /channels/plugin
    method: GET
    data_selector: plugin
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: records
    params: {}
- name: user_created
  endpoint:
    path: /users
    method: POST
    data_selector: data
- name: user_deleted
  endpoint:
    path: /users
    method: POST
    data_selector: data
- name: create_user
  endpoint:
    path: /users
    method: POST
    data_selector: null
    params: {}
- name: delete_user
  endpoint:
    path: /users
    method: POST
    data_selector: null
    params: {}
- name: create_user
  endpoint:
    path: /users
    method: POST
    data_selector: null
    params: {}
- name: delete_user
  endpoint:
    path: /users
    method: POST
    data_selector: null
    params: {}
- name: create_user
  endpoint:
    path: /users
    method: POST
    data_selector: null
    params: {}
- name: delete_user
  endpoint:
    path: /users
    method: POST
    data_selector: null
    params: {}
- name: user_created
  endpoint:
    path: /users
    method: POST
    data_selector: null
    params: {}
- name: user_deleted
  endpoint:
    path: /users
    method: POST
    data_selector: null
    params: {}
- name: HTMXTemplate
  endpoint:
    path: /htmx/template
    method: GET
    data_selector: template
    params: {}
- name: HTMXTemplate
  endpoint:
    path: /form
    method: GET
    data_selector: template_name
    params: {}
- name: HXStopPolling
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: ClientRedirect
  endpoint:
    path: /
    method: GET
    data_selector: redirect_to
    params: {}
- name: ClientRefresh
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: HXLocation
  endpoint:
    path: /about
    method: GET
    data_selector: redirect_to
    params: {}
- name: before_request
  endpoint:
    path: /before_request
    method: GET
    data_selector: message
    params: {}
- name: after_request
  endpoint:
    path: /after_request
    method: GET
    data_selector: message
    params: {}
- name: resources
  endpoint:
    path: /resources
    method: GET
    data_selector: Resource
    params: {}
- name: health_check
  endpoint:
    path: /health-check
    method: GET
    data_selector: hello
- name: resource
  endpoint:
    path: /resources
    method: GET
    data_selector: id, name
- name: resources
  endpoint:
    path: /resources
    method: GET
    data_selector: Resource
- name: health_check
  endpoint:
    path: /health-check
    method: GET
    data_selector: response
- name: resources
  endpoint:
    path: /resources
    method: GET
- name: file-download
  endpoint:
    path: /file-download
    method: GET
- name: time
  endpoint:
    path: /time
    method: GET
- name: resources
  endpoint:
    path: /resources
    method: GET
    data_selector: Resource
- name: health_check
  endpoint:
    path: /health-check
    method: GET
    data_selector: hello
- name: controller
  endpoint:
    path: /controller-path
    method: GET
- name: router
  endpoint:
    path: /router-path
    method: GET
- name: file-download
  endpoint:
    path: /file-download
    method: GET
- name: time
  endpoint:
    path: /time
    method: GET
- name: count
  endpoint:
    path: /count
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: static_files
  endpoint:
    path: /static
    method: GET
    params: {}
- name: html_mode
  endpoint:
    path: /
    method: GET
    params: {}
- name: static_files
  endpoint:
    path: /static
    method: GET
    data_selector: files
    params: {}
- name: asset
  endpoint:
    path: /asset
    method: POST
    data_selector: ''
    params: {}
- name: MemoryStore
  endpoint:
    path: /stores/memory
    method: GET
    data_selector: records
- name: FileStore
  endpoint:
    path: /stores/file
    method: GET
    data_selector: records
- name: RedisStore
  endpoint:
    path: /stores/redis
    method: GET
    data_selector: records
- name: ValkeyStore
  endpoint:
    path: /stores/valkey
    method: GET
    data_selector: records
- name: MemoryStore
  endpoint:
    path: /stores/memory
    method: GET
    data_selector: records
- name: FileStore
  endpoint:
    path: /stores/file
    method: GET
    data_selector: records
- name: RedisStore
  endpoint:
    path: /stores/redis
    method: GET
    data_selector: records
- name: ValkeyStore
  endpoint:
    path: /stores/valkey
    method: GET
    data_selector: records
- name: MemoryStore
  endpoint:
    path: /stores/memory
    method: GET
    data_selector: MemoryStore
- name: FileStore
  endpoint:
    path: /stores/file
    method: GET
    data_selector: FileStore
- name: RedisStore
  endpoint:
    path: /stores/redis
    method: GET
    data_selector: RedisStore
- name: ValkeyStore
  endpoint:
    path: /stores/valkey
    method: GET
    data_selector: ValkeyStore
- name: sessions
  endpoint:
    path: /stores/sessions
    method: GET
- name: response_cache
  endpoint:
    path: /stores/response_cache
    method: GET
- name: redis
  endpoint:
    path: /stores/redis
    method: GET
- name: file
  endpoint:
    path: /stores/file
    method: GET
- name: MemoryStore
  endpoint:
    path: /stores/memory
    method: GET
    data_selector: records
- name: FileStore
  endpoint:
    path: /stores/file
    method: GET
    data_selector: records
- name: RedisStore
  endpoint:
    path: /stores/redis
    method: GET
    data_selector: records
- name: ValkeyStore
  endpoint:
    path: /stores/valkey
    method: GET
    data_selector: records
- name: template
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
    params: {}
- name: template_engine
  endpoint:
    path: /template_engine
    method: POST
    data_selector: templates
    params: {}
- name: template_response
  endpoint:
    path: '/{template_type: str}'
    method: GET
    data_selector: Template
    params: {}
- name: template_engine
  endpoint:
    path: /template_engine
    method: GET
    data_selector: template_engines
    params: {}
- name: notify
  endpoint:
    path: /notify/{topic:str}
    method: GET
    data_selector: event.data
    params: {}
- name: health_check
  endpoint:
    path: /health-check
    method: GET
    data_selector: text
    params: {}
- name: ping
  endpoint:
    path: /
    method: GET
- name: websocket_listener
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: websocket_listener
  endpoint:
    path: /
    method: GET
    data_selector: ping
    params: {}
- name: websocket_handler
  endpoint:
    path: /
    method: GET
    data_selector: ping
    params: {}
- name: get_membership_details
  endpoint:
    path: /group/{group_id:int}/user/{user_id:int}
    method: GET
    data_selector: null
    params: {}
- name: css
  endpoint:
    path: /static/css/main.css
    method: GET
    data_selector: null
    params: {}
- name: sessions
  endpoint:
    path: /sessions
    method: DELETE
    data_selector: sessions
    params:
      SESSION_ID: Required argument
- name: cli
  endpoint:
    path: /cli
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: routes
  endpoint:
    path: /routes
    method: GET
- name: run
  endpoint:
    path: /run
    method: POST
- name: controller
  endpoint:
    path: /litestar/controller
    method: GET
- name: Provide
  endpoint:
    path: /di/Provide
    method: GET
    data_selector: records
- name: BaseEventEmitterBackend
  endpoint:
    path: /litestar/events/BaseEventEmitterBackend
    method: GET
    data_selector: listeners
    params: {}
- name: EventListener
  endpoint:
    path: /litestar/events/EventListener
    method: GET
    data_selector: listeners
    params: {}
- name: SimpleEventEmitter
  endpoint:
    path: /litestar/events/SimpleEventEmitter
    method: GET
    data_selector: listeners
    params: {}
- name: ASGIRouteHandler
  endpoint:
    path: /litestar/handlers/ASGIRouteHandler
    method: GET
    data_selector: handler
    params: {}
- name: BaseRouteHandler
  endpoint:
    path: /litestar/handlers/BaseRouteHandler
    method: GET
    data_selector: handler
    params: {}
- name: GET Route Decorator
  endpoint:
    path: /
    method: GET
- name: pagination
  endpoint:
    path: /pagination
    method: GET
- name: params
  endpoint:
    path: params
    method: GET
- name: KwargDefinition
  endpoint:
    path: /litestar/params/KwargDefinition
    method: GET
- name: Parameter
  endpoint:
    path: /litestar/params/Parameter
    method: GET
- name: ASGIRoute
  endpoint:
    path: /litestar/routes/ASGIRoute
    method: GET
- name: BaseRoute
  endpoint:
    path: /litestar/routes/BaseRoute
    method: GET
- name: HTTPRoute
  endpoint:
    path: /litestar/routes/HTTPRoute
    method: GET
- name: WebSocketRoute
  endpoint:
    path: /litestar/routes/WebSocketRoute
    method: GET
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: routing
  endpoint:
    path: /routing
    method: GET
- name: requests
  endpoint:
    path: /requests
    method: GET
- name: status_code
  endpoint:
    path: /status_code
    method: GET
- name: FileInfo
  endpoint:
    path: /litestar/types/FileInfo
    method: GET
    data_selector: file_info
    params: {}
- name: FileSystemProtocol
  endpoint:
    path: /litestar/types/FileSystemProtocol
    method: GET
    data_selector: file_system_protocol
    params: {}
- name: index
  endpoint:
    path: /
    method: GET
    data_selector: response
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: response
- name: show_user_profile
  endpoint:
    path: /user/{username:str}
    method: GET
    data_selector: response
- name: show_post
  endpoint:
    path: /post/{post_id:int}
    method: GET
    data_selector: response
- name: show_subpath
  endpoint:
    path: /path/{subpath:path}
    method: GET
    data_selector: response
notes:
- normally the database would set the created_at timestamp
- Fix a CRLF vulnerability in the exception logging where Litestar included the raw
  request path in the logged exception, allowing potential attackers to inject newlines
  into the log message.
- Support Python 3.13
- The module litestar.contrib.prometheus has been moved to litestar.plugins.prometheus.
  litestar.contrib.prometheus will be deprecated in the next major version.
- The module litestar.contrib.attrs has been moved to litestar.plugins.attrs. litestar.contrib.attrs
  will be deprecated in the next major version.
- Add request_max_body_size layered parameter which limits the maximum size of a request
  body before returning a 413 - Request Entity Too Large.
- Supported OpenAPI UI clients will extract the CSRF cookie value and attach it to
  the request headers if CSRF is enabled on the application.
- Deprecate litestar.contrib.sqlalchemy in favor of litestar.plugins.sqlalchemy
- This plugin migrates the HTMX integration to litestar.plugins.htmx.
- Pydantic’s BaseModel supports configuration to hide data values when throwing exceptions,
  via setting hide_input_in_errors.
- Deprecate litestar.contrib.pydantic in favor of litestar.plugins.pydantic.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- There are no Python 3.13 prebuilt wheels for `psycopg[binary]`. If you rely on this
  for development, you’ll need to have the postgres development libraries installed
- '`picologging` does not currently support Python 3.13'
- Improve error message of ImproperlyConfiguredException raised when a route handler’s
  return value annotation is incompatible with its status code.
- Generated transfer functions now populate linecache to improve tracebacks and support
  introspection of the generated functions.
- Add a new field id to Example, to set a custom ID for examples.
- Add an options parameter to ScalarRenderPlugin, that can be used to pass options
  directly to scalar.
- Some objects like Contact may return nulls in deeply nested fields
- 'Released: 2024-06-02'
- The option `configure_root_logger` was added to `LoggingConfig` attribute.
- Static file serving has been implemented with regular route handlers.
- PluginRegistryPluginRegistry now supports retrieving a plugin by its fully qualified
  name.
- A Structlog plugin to make it easier to configure structlog in a single place.
- The options `reload-exclude` and `reload-include` were added to the CLI `run` command.
- JSON schema examples should be formatted as a list instead of an object.
- There are differences between OpenAPI 3.0 and OpenAPI 3.1 regarding example handling.
- CLI enabled by default — the CLI and all its dependencies are now included by default,
  to enable a better and more consistent developer experience out of the box.
- Error messages for missing required parameters will now also contain the source
  of the expected parameter.
- Performance of threaded synchronous code was improved by using the async library’s
  native threading helpers instead of anyio.
- Fix validation of empty payload data with default values.
- Support for returning `Response[None]` with a `204` status code from a handler.
- Fix error message of `get_logger_placeholder()`.
- Support non-valid identifier as serialization target name.
- Fix regression signature validation for DTO validated types.
- Fix regression in OpenAPI schema key names.
- Fix regression in OpenAPI handling of routes with multiple handlers.
- Fix OpenAPI schema generation for recursive models.
- Fix OpenAPI schema for `Literal | None` unions.
- Fix advanced-alchemy 0.6.0 compatibility issue with `touch_updated_timestamp`.
- Fix OpenAPI handling of parameters with duplicated names.
- Fix late failure where `DTOData` is used without a DTO.
- Correctly propagate camelCase names on OpenAPI schema.
- Fix error handling in event handler stream.
- Fix OpenAPI schema for Pydantic computed fields.
- Fix circular import when importing from `litestar.security.jwt`.
- Raise config error when generator dependencies are cached.
- Add `server_lifespan` hook.
- Allow rendering templates directly from strings.
- Support nested DTO field renaming.
- A warning will now be raised when a synchronous callable is being used in an HTTPRouteHandler
  or Provide, without setting sync_to_thread.
- This warning can be turned off globally by setting the environment variable LITESTAR_WARN_IMPLICIT_SYNC_TO_THREAD=0.
- Setting request_max_body_size=None is strongly discouraged as it exposes the application
  to a denial of service (DoS) attack by sending arbitrarily large request bodies
  to the affected endpoint.
- This is generally only recommended in environments where the application is running
  behind a reverse proxy such as NGINX, where a size limit is already set.
- Caching can be configured at the application level using ResponseCacheConfig.
- Default caching uses MemoryStore but can be configured to use other stores like
  RedisStore.
- Uses memory backend for testing and local development
- The CLI and its hard dependencies are included by default.
- If you want to run your application, you will need uvicorn.
- You can specify the application to be used via --app argument or LITESTAR_APP environment
  variable.
- To run your application or beautify the Typescript, you need to install 'standard'
  extra.
- You can configure Litestar with the debug_module option to enable interactive debugging.
- 'Currently, it supports the following debugging tools: ipdb, PuDB and pdbr. Also
  supports pdb++.'
- Always wrap `yield` in a `try`/`finally` block to ensure cleanup code is run.
- Dependencies can be either callables - sync or async functions, methods, or class
  instances that implement the object.__call__() method, or classes.
- By default Litestar uses SimpleEventEmitter, which offers an in-memory async queue.
- If the value for push_url is set to False it will prevent updating browser history.
- If the value to replace_url is set to False it will prevent updating the browser’s
  location.
- HTMX is a JavaScript library that gives you access to AJAX, CSS Transitions, WebSockets
  and Server Sent Events directly in HTML.
- Trigger event requires 'after' to be one of 'receive', 'settle', or 'swap'.
- Since the request has already been returned by the time the after_response is called,
  the updated state of COUNTER is not reflected in the response.
- Uses a non-blocking QueueListenerHandler for logging
- Exceptions won’t be logged by default, except in debug mode
- Default media type is JSON
- You can use different kinds of values for the iterator.
- In your iterator function you can yield integers, strings or bytes.
- Route handler arguments cannot be passed into background tasks when they are passed
  into decorators.
- Cookies are set using the Set-Cookie header.
- You can override cookies declared in higher levels by redeclaring a cookie with
  the same key in a lower level.
- Setting run_in_task_group to True will not preserve execution order.
- Supports JSON and MessagePack responses
- Supports MessagePack format as an alternative to JSON
- Setting `run_in_task_group` to `True` will not preserve execution order.
- 'Deprecated since version v3.0: StaticFilesConfig is deprecated and will be removed
  in Litestar 3.0'
- When using MemoryStore or FileStore, expired data won’t be deleted automatically.
- It's a good practice to call delete_expired periodically to ensure the size of the
  stored values does not grow indefinitely.
- Expired items in FileStore may also be deleted on startup.
- MemoryStore offers no persistence and is not thread or multiprocess safe.
- FileStore is slower compared to in-memory solutions.
- RedisStore and ValkeyStore are suitable for almost all applications.
- MemoryStore is the default store used by Litestar internally.
- FileStore is slower but offers persistence.
- RedisStore is suitable for almost all applications.
- ValkeyStore is equivalent to redis.asyncio.Redis.
- Expired data won’t be deleted automatically when using MemoryStore or FileStore.
- It's a good practice to call delete_expired periodically.
- Stores may not be automatically closed when the application is shut down.
- Adjusting default values allows to easily reuse stores, without the need for a more
  complex setup.
- To use Jinja, Mako, or MiniJinja, you must install them separately.
- The directory parameter can be a directory or list of directories.
- The directory parameter can be either a directory or list of directories to use
  for loading templates.
- Uses Jinja2, Mako, and MiniJinja for templating support
- Jinja is included in the standard extra.
- If you choose to use instance you’re fully responsible on the engine creation.
- Uses Litestar's testing capabilities to validate endpoints
- Uses WebSocket for real-time data streaming
- Listeners will default to JSON unless data is annotated with str or bytes
- JSON data will only be parsed but not validated. This is a limitation of the current
  implementation and will change in future versions.
- The middlewares are added from top to bottom and then reversed.
- A response to a head request cannot include a body.
- Litestar is a framework for building web applications.
- Create a POST Request instance.
- This function should be called as a context manager to ensure async startup and
  shutdown are handled correctly.
- Litestar does not include any decorator as part of the Router or Litestar instances.
- Host based routing class is intentionally unsupported.
- Fixes an issue where nested models beyond the `max_nested_depth` would not have
  unique schema names in the OpenAPI documentation.
- An exception raised within an asgi lifespan context manager would result in a “lifespan.startup.failed”
  message being sent after we’ve already sent a “lifespan.startup.complete” message.
- Fixes an issue where a regular handler under a mounted asgi app would prevent a
  request from routing through the mounted application if the request path contained
  the path of the regular handler as a substring.
- Fix OpenAPI schema generation for Union of multiple msgspec.Structs and None
- Fix misleading error message for missing dependencies provide by a package extra
- Fix OpenAPI schema file upload schema types for swagger
- Two new channel backends were added to bring Postgres support
- Add --schema and --exclude option to litestar route CLI command
- Fix serialization of custom types in exception responses
- Fix SSE reverting to default event_type after 1st message
- Correctly handle single file upload validation when multiple files are specified
- Fix trailing messages after unsubscribe in channels
- It’s still possible to override this configuration at the DTO level
- 'Released: 2024-04-09'
- 'Released: 2023/11/06'
- Fix validation of empty payload data with default values
- Support for returning Response[None] with a 204 status code from a handler
- Fix error message of get_logger_placeholder()
- Support for SQLAlchemy 1 has been dropped and the new plugin will now support SQLAlchemy
  2 only.
- Several Pydantic models used for configuration have been replaced with dataclasses
  or plain classes.
- A simple Hello World Litestar app can be created using the provided code snippets.
- A limit for the allowed request body size can be set on all layers via the request_max_body_size
  parameter and defaults to 10MB.
- Setting request_max_body_size=None is strongly discouraged as it exposes the application
  to a denial of service (DoS) attack by sending arbitrarily large request bodies.
- URL encoded data is inherently less versatile than JSON data - for example, it cannot
  handle complex dictionaries and deeply nested data. It should only be used for simple
  data structures.
- If the default default_expiration is set to None, setting up the route handler with
  cache set to True will keep the response in cache indefinitely.
- Using Redis as the cache store.
- Allows arbitrary channels if arbitrary_channels_allowed is set to True
- If arbitrary_channels_allowed is not True, trying to publish or subscribe to a channel
  not passed will raise a ChannelsException
- CLI provides a convenient command line interface for running and managing Litestar
  applications.
- Litestar needs the injected types at runtime which might clash with linter rules’
  recommendation to use TYPE_CHECKING.
- Supports event emitter/listener pattern for async operations.
- Default Litestar uses an in-memory async queue
- For complex use cases, implement a backend using DB/Key store or message broker
- The before_request hook runs immediately before calling the route handler function.
- The after_request hook runs after the route handler returned and the response object
  has been resolved.
- If you want to send a different event type, you can use a dictionary with the keys
  `event_type` and `data`.
- Supports JSON and MessagePack responses.
- Default media type is application/json
- Supports MessagePack format
- The 'name' parameter has to match the 'name' parameter passed to create_static_files_router(),
  which defaults to 'static'.
- Expired data won’t be deleted automatically in MemoryStore or FileStore.
- It’s good practice to call delete_expired periodically to manage stored values.
- Expired items in FileStore may be deleted on startup.
- Uses an asynchronous interface to store data in a thread- and process-safe manner.
- FileStore is slower compared to in-memory solutions and is primarily suitable for
  long-lived data.
- RedisStore offers all the guarantees and features of Redis.
- A simple in-memory store, using a dictionary to hold data.
- Persistence is built in for FileStore.
- FileStore is suitable for larger amounts of data that need persistence.
- The directory parameter passed to TemplateConfig can be either a directory or list
  of directories to use for loading templates.
- To use Jinja, Mako, or MiniJinja, install via 'litestar[jinja]', 'litestar[mako]',
  or 'litestar[minijinja]'
- The 'directory' parameter can be either a directory or list of directories for loading
  templates.
- Litestar has built-in support for Jinja2, Mako, and Minijinja template engines.
- Uses Litestar for testing
- Supports both synchronous and asynchronous testing
- JSON data will only be parsed but not validated
- 'Two transport modes: text and binary'
- 'The application will be automatically discovered if it’s in one of these canonical
  paths: ‘app.py’, ‘asgi.py’, ‘application.py’ or ‘app/__init__.py’.'
- Run ‘litestar –help’ for more information about app autodiscovery
- Get the executor in which synchronous callables will be run within an asyncio context
- Get the capacity limiter used when running synchronous callable within a trio context
- Includes various parameter definitions and constraints.
- The lowest currently supported version is Python 3.8.
- At a minimum you will need Python 3.8 for code changes and 3.12 if you plan on doing
  documentation building / changes.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '413 - Request Entity Too Large: Request body exceeds the allowed limit of 10MB.'
- '400 - Bad Request: Request exceeds the size specified in the Content-Length header.'
- 'ImproperlyConfiguredException: 500: Explicit dependency ''non_optional_dependency''
  for ''hello_world'' has no default value, or provided dependency.'
- 500 - "Internal Server Error"
- '500: Used internally for configuration errors'
- '400: Raised when validation or parsing failed'
- '401: HTTP status code 401'
- '403: HTTP status code 403'
- '404: HTTP status code 404'
- '500: HTTP status code 500'
- '503: HTTP status code 503'
- '400: Client error.'
- '500: Exception status code.'
- '401: Request lacks valid authentication credentials for the requested resource.'
- '404: Cannot find the requested resource.'
- '403: Request understood, but not authorized.'
- '429: Request limits have been exceeded.'
- 'HTTP 400 BAD REQUEST: Bad Request'
- 'HTTP 401 UNAUTHORIZED: Unauthorized'
- 'HTTP 403 FORBIDDEN: Forbidden'
- 'HTTP 404 NOT FOUND: Not Found'
- 'HTTP 500 INTERNAL SERVER ERROR: Internal Server Error'
- 'HTTP 503 SERVICE UNAVAILABLE: Service Unavailable'
- HTTP_400_BAD_REQUEST
- HTTP_401_UNAUTHORIZED
- HTTP_403_FORBIDDEN
- HTTP_404_NOT_FOUND
- HTTP_429_TOO_MANY_REQUESTS
- HTTP_500_INTERNAL_SERVER_ERROR
- HTTP_502_BAD_GATEWAY
- HTTP_503_SERVICE_UNAVAILABLE
- '400: Validation failed for POST http://localhost:8000/'
- '413 - Request Entity Too Large: If a request body exceeds the limit.'
- '400 - Bad Request: Should the request exceed the size specified in the Content-Length
  header.'
- 'Unsupported backend: Memcached is not a supported backend and will likely not be
  added in the future.'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Not Found'
- '405: Method Not Allowed'
- '408: Request Timeout'
- '429: Too Many Requests'
- '500: Internal Server Error'
- '503: Service Unavailable'
- WS_1000_NORMAL_CLOSURE
- WS_1001_GOING_AWAY
- WS_1002_PROTOCOL_ERROR
- WS_1003_UNSUPPORTED_DATA
- WS_1005_NO_STATUS_RECEIVED
- WS_1006_ABNORMAL_CLOSURE
- WS_1007_INVALID_FRAME_PAYLOAD_DATA
- WS_1008_POLICY_VIOLATION
- WS_1009_MESSAGE_TOO_BIG
- WS_1010_MANDATORY_EXT
- WS_1011_INTERNAL_ERROR
- WS_1012_SERVICE_RESTART
- WS_1013_TRY_AGAIN_LATER
- WS_1014_BAD_GATEWAY
- WS_1015_TLS_HANDSHAKE
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Request
  - Response
  - Router
  - AbstractDTO
  - BaseEventEmitterBackend
  - AbstractAsyncContextManager
  - SimpleEventEmitter
client:
  base_url: https://litestar.dev
  headers:
    Accept: application/json
source_metadata: null
