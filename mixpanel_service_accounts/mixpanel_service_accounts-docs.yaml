resources:
- name: add_service_accounts_to_projects
  endpoint:
    path: /organizations/{organizationId}/service-accounts/add-to-project
    method: POST
- name: Ingestion API
  endpoint:
    path: /ingestion-api
    method: POST
- name: Query API
  endpoint:
    path: /query-api
    method: GET
- name: data_export
  endpoint:
    path: /api/2.0/export
    method: GET
- name: track_event
  endpoint:
    path: /reference/import-events
    method: POST
    data_selector: event
    params: {}
- name: profile_data
  endpoint:
    path: /reference/profile-set
    method: POST
    data_selector: $set
    params: {}
- name: Segmentation Expressions
  endpoint:
    path: /reference/segmentation-expressions
    method: GET
    data_selector: records
- name: Ingestion API
  endpoint:
    path: /reference/ingestion-api
    method: GET
    data_selector: records
- name: Query API
  endpoint:
    path: /reference/query-api
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /events
    method: POST
- name: user_profiles
  endpoint:
    path: /user_profiles
    method: POST
- name: group_profiles
  endpoint:
    path: /group_profiles
    method: POST
- name: lookup_tables
  endpoint:
    path: /lookup_tables
    method: GET
- name: Import Events
  endpoint:
    path: /reference/import-events
    method: POST
- name: Track Events
  endpoint:
    path: /reference/track-event
    method: POST
- name: User Profiles
  endpoint:
    path: /reference/user-profiles
    method: POST
- name: Group Profiles
  endpoint:
    path: /reference/group-profiles
    method: POST
- name: Lookup Tables
  endpoint:
    path: /reference/lookup-tables
    method: GET
- name: import_events
  endpoint:
    path: /import
    method: POST
    data_selector: ''
    params: {}
- name: import_events
  endpoint:
    path: /import
    method: POST
    data_selector: object
    params:
      strict: '1'
      project_id: <YOUR_PROJECT_ID>
- name: track_event
  endpoint:
    path: /track
    method: POST
    data_selector: '1'
    params: {}
- name: event_deduplication
  endpoint:
    path: /event/deduplication
    method: POST
    data_selector: records
- name: update_property
  endpoint:
    path: /groups#group-set
    method: POST
    data_selector: object
    params:
      ip: 1
      strict: 0
      verbose: 0
- name: group_set
  endpoint:
    path: /groups
    method: POST
    data_selector: response
    params: {}
- name: set_property_once
  endpoint:
    path: /groups#group-set-once
    method: POST
    data_selector: responses
    params: {}
- name: delete_property
  endpoint:
    path: /groups#group-unset
    method: POST
    data_selector: response
    params: {}
- name: remove_from_list_property
  endpoint:
    path: /groups#group-remove-from-list
    method: POST
    params:
      ip: '0'
      strict: '1'
      verbose: '1'
- name: group_union
  endpoint:
    path: /groups#group-union
    method: POST
    data_selector: object
    params: {}
- name: batch_update_group_profiles
  endpoint:
    path: /groups#group-batch-update
    method: POST
    data_selector: data
    params: {}
- name: delete_group
  endpoint:
    path: /groups#group-delete
    method: POST
    data_selector: responses
    params: {}
- name: list_lookup_tables
  endpoint:
    path: /reference/list-lookup-tables
    method: GET
- name: replace_lookup_table
  endpoint:
    path: /reference/replace-lookup-table
    method: PUT
- name: lookup_tables
  endpoint:
    path: /lookup-tables
    method: GET
    data_selector: results
    params:
      project_id: <YOUR_PROJECT_ID>
- name: list_lookup_tables
  endpoint:
    path: /reference/list-lookup-tables
    method: GET
- name: replace_lookup_table
  endpoint:
    path: /reference/replace-lookup-table
    method: PUT
- name: lookup_table
  endpoint:
    path: /lookup-tables/{id}
    method: PUT
    data_selector: response
    params:
      project_id: '{YOUR_PROJECT_ID}'
- name: lookup_table
  endpoint:
    path: /lookup-tables
    method: PUT
    data_selector: object
    params: {}
- name: set_property
  endpoint:
    path: /engage#profile-set
    method: POST
- name: set_property_once
  endpoint:
    path: /engage#profile-set-once
    method: POST
    data_selector: response
    params:
      ip: 0
      strict: 1
      verbose: 1
- name: profile_set
  endpoint:
    path: /engage#profile-set-once
    method: POST
    data_selector: object
    params: {}
- name: increment_numerical_property
  endpoint:
    path: /engage#profile-numerical-add
    method: POST
    data_selector: object
    params: {}
- name: union_to_list_property
  endpoint:
    path: /engage#profile-union
    method: POST
    data_selector: object
    params: {}
- name: append_to_list_property
  endpoint:
    path: /engage#profile-list-append
    method: POST
    data_selector: responses
- name: remove_from_list_property
  endpoint:
    path: /engage#profile-list-remove
    method: POST
    data_selector: 'null'
    params: {}
- name: delete_property
  endpoint:
    path: /engage#profile-unset
    method: POST
    data_selector: responses
    params:
      ip: '1'
      strict: '0'
      verbose: '0'
- name: update_multiple_profiles
  endpoint:
    path: /engage#profile-batch-update
    method: POST
    data_selector: data
    params: {}
- name: profile_batch_update
  endpoint:
    path: /engage#profile-batch-update
    method: POST
    data_selector: object
    params: {}
- name: delete_profile
  endpoint:
    path: /engage#profile-delete
    method: POST
    params:
      strict: 0 to 1
      verbose: 0 to 1
      callback: string
- name: create_identity
  endpoint:
    path: /track#create-identity
    method: POST
    data_selector: data
- name: create_alias
  endpoint:
    path: /track#identity-create-alias
    method: POST
    data_selector: data
    params: {}
- name: merge_identities
  endpoint:
    path: /import
    method: POST
    data_selector: ADD
    params:
      strict: '1'
      project_id: string
- name: events
  endpoint:
    path: /events
    method: POST
- name: profiles
  endpoint:
    path: /engage
    method: GET
- name: profile_event_activity
  endpoint:
    path: /query/stream/query
    method: GET
    params:
      project_id: integer
      workspace_id: integer
      distinct_ids: string
      from_date: string
      to_date: string
- name: list_saved_cohorts
  endpoint:
    path: /api/query/cohorts/list
    method: POST
    data_selector: cohorts
- name: cohorts_list
  endpoint:
    path: /api/query/cohorts/list
    method: POST
    data_selector: array of objects
- name: aggregate_event_counts
  endpoint:
    path: /api/query/events
    method: GET
    params:
      project_id: integer
      event: string
      type: string
      unit: string
      interval: integer
      from_date: string
      to_date: string
      format: string
- name: events
  endpoint:
    path: /api/query/events
    method: GET
    data_selector: data
    params:
      type: general
      unit: minute
- name: top_events
  endpoint:
    path: /query/events/top
    method: GET
    params:
      project_id: required
      workspace_id: ''
      type: required
- name: top_events
  endpoint:
    path: /api/query/events/top
    method: GET
    data_selector: events
    params:
      type: general
- name: top_events
  endpoint:
    path: /api/query/events/names
    method: GET
    params:
      project_id: ''
      workspace_id: ''
      type: ''
      limit: 255
- name: top_events
  endpoint:
    path: /api/query/events/names
    method: GET
    data_selector: array of strings
- name: Aggregated Event Property Values
  endpoint:
    path: /api/query/events/properties
    method: GET
    params:
      project_id: integer
      workspace_id: integer
      event: string
      name: string
      values: array of strings
      type: string
      unit: string
      interval: integer
      from_date: string
      to_date: string
      format: string
      limit: integer
- name: top_event_properties
  endpoint:
    path: /api/query/events/properties
    method: GET
    data_selector: data
    params:
      type: general
      unit: minute
- name: top_event_properties
  endpoint:
    path: /api/query/events/properties/top
    method: GET
    data_selector: properties
    params:
      project_id: integer
      event: string
      limit: integer
- name: top_event_properties
  endpoint:
    path: /api/query/events/properties/top
    method: GET
    data_selector: records
- name: top_event_property_values
  endpoint:
    path: /api/query/events/properties/values
    method: GET
    params:
      project_id: ''
      event: ''
      name: ''
      limit: 255
- name: top_event_property_values
  endpoint:
    path: /api/query/events/properties/values
    method: GET
    data_selector: array of strings
- name: funnel_query
  endpoint:
    path: /api/query/funnels
    method: GET
    params:
      project_id: integer
      funnel_id: integer
      from_date: string
      to_date: string
- name: saved_funnels
  endpoint:
    path: /query/funnels/list
    method: GET
    params:
      project_id: integer
- name: funnels
  endpoint:
    path: /api/query/funnels/list
    method: GET
    data_selector: array of objects
- name: query_saved_report
  endpoint:
    path: /query/insights
    method: GET
    params:
      project_id: integer
      bookmark_id: integer
- name: Custom JQL Query
  endpoint:
    path: /api/query/jql
    method: POST
    data_selector: response
    params:
      project_id: integer
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: user_profiles
  endpoint:
    path: /user_profiles
    method: GET
    data_selector: records
- name: people
  endpoint:
    path: /api/people
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
- name: Query Retention Report
  endpoint:
    path: /query/retention
    method: GET
    data_selector: counts
    params:
      project_id: ''
      from_date: ''
      to_date: ''
      retention_type: birth
      born_event: ''
      event: ''
      interval: 1
      unit: day
      unbounded_retention: false
- name: query_frequency_report
  endpoint:
    path: /retention/addiction
    method: GET
    params:
      project_id: integer
      from_date: string
      to_date: string
      unit: string
      addiction_unit: string
- name: segmentation_report
  endpoint:
    path: /query/segmentation
    method: GET
    params:
      project_id: integer
      workspace_id: integer
      event: string
      from_date: string
      to_date: string
      'on': string
      unit: string
      interval: integer
      where: string
      limit: integer
      type: string
      format: string
- name: numerically_bucket
  endpoint:
    path: /api/query/segmentation/numeric
    method: GET
    params:
      project_id: integer
      workspace_id: integer
      event: string
      from_date: string
      to_date: string
      'on': string
      unit: string
- name: numerically_average
  endpoint:
    path: /query/segmentation/average
    method: GET
    params:
      project_id: integer
      workspace_id: integer
      event: string
      from_date: string
      to_date: string
      'on': string
      unit: string
- name: export
  endpoint:
    path: /api/2.0/export
    method: GET
    params:
      project_id: '12345'
- name: event_export
  endpoint:
    path: /api/2.0/export
    method: GET
    data_selector: events
    params:
      project_id: integer
      from_date: string
      to_date: string
      limit: integer
      event: string
      where: string
      time_in_ms: boolean
- name: export
  endpoint:
    path: /api/2.0/export
    method: GET
    data_selector: records
- name: create_replace_multiple
  endpoint:
    path: /schemas
    method: POST
- name: schemas
  endpoint:
    path: /api/app/projects/{projectId}/schemas
    method: POST
    data_selector: results
    params:
      truncate: 'false'
- name: Delete all Schemas
  endpoint:
    path: /api/app/projects/{projectId}/schemas
    method: DELETE
- name: Delete for Entity
  endpoint:
    path: /schemas/{entityType}
    method: DELETE
    data_selector: results
    params:
      projectId: integer
      entityType: string
- name: delete_schema
  endpoint:
    path: /schemas/{entityType}/{name}
    method: DELETE
- name: schemas
  endpoint:
    path: /api/app/projects/{projectId}/schemas
    method: GET
- name: schemas
  endpoint:
    path: /schemas/{entityType}
    method: GET
    data_selector: results
    params:
      entity_name: entity name
- name: schemas
  endpoint:
    path: /schemas/{entityType}/{name}
    method: GET
    data_selector: object
- name: events
  endpoint:
    path: /ingestion/events
    method: POST
- name: user_profiles
  endpoint:
    path: /user_profiles
    method: POST
- name: create_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/create
    method: POST
- name: create_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/create
    method: POST
    data_selector: object
    params: {}
- name: delete_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/cancel
    method: POST
    params:
      name: string
      project_id: number
- name: pause_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/pause
    method: POST
    data_selector: error
    params: {}
- name: resume_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/resume
    method: POST
- name: pipelines
  endpoint:
    path: /api/2.0/nessie/pipeline/jobs
    method: GET
    data_selector: json
    params:
      project_id: integer
- name: List Pipelines
  endpoint:
    path: /api/2.0/nessie/pipeline/jobs
    method: GET
- name: pipeline_status
  endpoint:
    path: /api/2.0/nessie/pipeline/status
    method: GET
    params:
      project_id: ''
      name: ''
      summary: 'false'
      status: []
- name: list_pipeline_logs
  endpoint:
    path: /api/2.0/nessie/pipeline/timeline
    method: GET
    params:
      project_id: integer
      name: string
- name: pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/timeline
    method: GET
- name: service_accounts
  endpoint:
    path: /service-accounts
    method: GET
    data_selector: accounts
- name: service_accounts
  endpoint:
    path: /app/organizations/{organization_id}/service-accounts
    method: GET
    data_selector: service_accounts
- name: service_account
  endpoint:
    path: /organizations/{organizationId}/service-accounts
    method: POST
- name: delete_service_account
  endpoint:
    path: /organizations/{organizationId}/service-accounts/{serviceAccountId}
    method: DELETE
    data_selector: object
    params: {}
- name: service_accounts
  endpoint:
    path: /service-accounts
    method: GET
    data_selector: results
    params:
      projectId: integer
- name: remove_service_accounts_from_projects
  endpoint:
    path: /organizations/{organizationId}/service-accounts/remove-from-project
    method: POST
- name: service_accounts
  endpoint:
    path: /service-accounts
    method: GET
- name: service_account
  endpoint:
    path: /organizations/{organizationId}/service-accounts/{serviceAccountId}
    method: GET
- name: service_accounts
  endpoint:
    path: /api/app/organizations/{organizationId}/service-accounts
    method: GET
- name: delete_annotation
  endpoint:
    path: /api/app/projects/{projectId}/annotations/{annotationId}
    method: DELETE
    data_selector: results
    params:
      projectId: integer
      annotationId: number
- name: annotations
  endpoint:
    path: /api/app/projects/{projectId}/annotations
    method: GET
    data_selector: results
    params:
      fromDate: yyyy-mm-dd
      toDate: yyyy-mm-dd
- name: annotations
  endpoint:
    path: /api/app/projects/{projectId}/annotations
    method: GET
    data_selector: object
    params: {}
- name: annotation
  endpoint:
    path: /projects/{projectId}/annotations/{annotationId}
    method: GET
    data_selector: results
    params: {}
- name: annotations
  endpoint:
    path: /api/app/projects/{projectId}/annotations
    method: POST
- name: Patch Annotation
  endpoint:
    path: /api/app/projects/{projectId}/annotations/{annotationId}
    method: PATCH
    data_selector: results
    params: {}
- name: data_retrieval
  endpoint:
    path: /data-retrievals/v3.0/
    method: POST
    data_selector: results
    params:
      token: <your_project_token>
- name: data_deletion
  endpoint:
    path: /data-deletions/v3.0/
    method: POST
    data_selector: results
    params:
      token: <your_project_token>
- name: data_retrieval
  endpoint:
    path: /api/app/data-retrievals/v3.0
    method: POST
    data_selector: results
    params:
      token: string
      distinct_ids: array of strings
      compliance_type: string
      disclosure_type: string
- name: Check Status of Retrieval
  endpoint:
    path: /data-retrievals/v3.0/{tracking_id}
    method: GET
    data_selector: results
    params:
      token: your project token
- name: create_deletion
  endpoint:
    path: /api/app/data-deletions/v3.0
    method: POST
    data_selector: results
    params:
      token: your_project_token
- name: check_status_of_deletion
  endpoint:
    path: /api/app/data-deletions/v3.0/{tracking_id}
    method: GET
    data_selector: results
    params:
      token: your_project_token
- name: cancel_deletion
  endpoint:
    path: /data-deletions/v3.0/{tracking_id}
    method: DELETE
    params:
      token: your_project_token
- name: events
  endpoint:
    path: /import
    method: POST
    data_selector: data
- name: lookup_tables
  endpoint:
    path: /lookup_tables
    method: GET
    data_selector: tables
- name: manual_sync
  endpoint:
    path: /<your_import_id>/manual-sync
    method: PUT
- name: run_import
  endpoint:
    path: /api/app/projects/{projectId}/warehouse-sources/imports/{importId}/manual-sync
    method: PUT
- name: run_import
  endpoint:
    path: /api/app/projects/{projectId}/warehouse-sources/imports/{importId}/manual-sync
    method: PUT
    data_selector: object
    params: {}
- name: import_events
  endpoint:
    path: /import
    method: POST
    data_selector: events
    params:
      strict: '1'
- name: import_events
  endpoint:
    path: /import
    method: POST
    data_selector: object
    params:
      strict: '1'
      project_id: <YOUR_PROJECT_ID>
- name: group_set_property
  endpoint:
    path: /groups#group-set
    method: POST
    data_selector: responses
    params:
      ip: '1'
      strict: '0'
      verbose: '0'
- name: set_property
  endpoint:
    path: /engage#profile-set
    method: POST
    data_selector: object
    params:
      ip: 1
      strict: 0
      verbose: 0
- name: create_identity
  endpoint:
    path: /track#create-identity
    method: POST
    data_selector: data
- name: profile_event_activity
  endpoint:
    path: /api/query/stream/query
    method: GET
    params:
      project_id: ''
      workspace_id: ''
      distinct_ids: ''
      from_date: ''
      to_date: ''
- name: saved_cohorts
  endpoint:
    path: /query/cohorts/list
    method: POST
    data_selector: cohorts
    params:
      project_id: integer
- name: cohorts
  endpoint:
    path: /api/query/cohorts/list
    method: POST
    data_selector: records
    params: {}
- name: query_profiles
  endpoint:
    path: /query/engage
    method: POST
    data_selector: results
    params:
      project_id: integer
      workspace_id: integer
      distinct_id: string
      distinct_ids: string
      data_group_id: string
      where: string
      output_properties: array of strings
      session_id: string
      page: integer
      behaviors: integer
      as_of_timestamp: integer
      filter_by_cohort: string
      include_all_users: boolean
- name: aggregate_event_counts
  endpoint:
    path: /api/query/events
    method: GET
    params:
      project_id: required
      workspace_id: ''
      event: required
      type: required
      unit: required
      interval: ''
      from_date: required
      to_date: required
      format: ''
- name: events
  endpoint:
    path: /api/query/events
    method: GET
    data_selector: data
    params:
      type: general
      unit: minute
- name: funnel_data
  endpoint:
    path: /api/query/funnels
    method: GET
    params:
      project_id: integer
      funnel_id: integer
      from_date: string
      to_date: string
      length: integer
      length_unit: string
      interval: integer
      unit: string
      'on': string
      where: string
      limit: integer
- name: funnels
  endpoint:
    path: /api/query/funnels
    method: GET
- name: query_saved_report
  endpoint:
    path: /query/insights
    method: GET
    params:
      project_id: integer
      workspace_id: integer
      bookmark_id: integer
- name: custom_jql_query
  endpoint:
    path: /api/query/jql
    method: POST
    data_selector: script
    params:
      project_id: integer
- name: retention_report
  endpoint:
    path: /query/retention
    method: GET
    params:
      project_id: integer
      from_date: string
      to_date: string
      retention_type: string
      born_event: string
      event: string
      interval: integer
      interval_count: integer
      unit: string
      unbounded_retention: boolean
      'on': string
      limit: integer
- name: query_segmentation
  endpoint:
    path: /query/segmentation
    method: GET
    data_selector: records
    params:
      project_id: integer
      event: string
      from_date: string
      to_date: string
- name: export
  endpoint:
    path: /api/2.0/export
    method: GET
    params:
      project_id: ''
      from_date: ''
      to_date: ''
      limit: ''
      event: ''
      where: ''
      time_in_ms: ''
- name: export
  endpoint:
    path: /api/2.0/export
    method: GET
    data_selector: string
- name: schemas
  endpoint:
    path: /api/app/projects/{projectId}/schemas
    method: POST
- name: schemas
  endpoint:
    path: /api/app/projects/{projectId}/schemas
    method: POST
    data_selector: results
    params:
      truncate: 'false'
- name: delete_all_schemas
  endpoint:
    path: /schemas
    method: DELETE
    data_selector: results
    params: {}
- name: schemas
  endpoint:
    path: /schemas
    method: GET
    data_selector: results
    params:
      projectId: integer
- name: create_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/create
    method: POST
- name: create_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/create
    method: POST
    data_selector: object
    params: {}
- name: delete_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/cancel
    method: POST
    params:
      name: string
      project_id: number
- name: cancel_pipeline
  endpoint:
    path: /nessie/pipeline/cancel
    method: POST
- name: pause_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/pause
    method: POST
- name: resume_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/resume
    method: POST
    data_selector: responses
- name: pipelines
  endpoint:
    path: /api/2.0/nessie/pipeline/jobs
    method: GET
    data_selector: json
    params:
      project_id: integer
- name: pipeline_jobs
  endpoint:
    path: /api/2.0/nessie/pipeline/jobs
    method: GET
    data_selector: object
- name: service_account
  endpoint:
    path: /api/app/organizations/{organizationId}/service-accounts
    method: POST
- name: delete_service_account
  endpoint:
    path: /organizations/{organizationId}/service-accounts/{serviceAccountId}
    method: DELETE
- name: service_account
  endpoint:
    path: /api/app/organizations/{organizationId}/service-accounts/{serviceAccountId}
    method: DELETE
- name: service_accounts
  endpoint:
    path: /projects/{projectId}/service-accounts
    method: GET
    data_selector: results
    params:
      projectId: integer
- name: service_accounts
  endpoint:
    path: /{organizationId}/service-accounts
    method: GET
    data_selector: results
    params: {}
- name: service_account
  endpoint:
    path: /api/app/organizations/{organizationId}/service-accounts
    method: GET
- name: delete_annotation
  endpoint:
    path: /annotations/{annotationId}
    method: DELETE
- name: annotations
  endpoint:
    path: /api/app/projects/{projectId}/annotations
    method: GET
    data_selector: results
    params: {}
- name: annotations
  endpoint:
    path: /api/app/projects/{projectId}/annotations
    method: GET
    data_selector: object
- name: annotations
  endpoint:
    path: /annotations
    method: POST
    data_selector: results
    params:
      projectId: integer
- name: Patch Annotation
  endpoint:
    path: /api/app/projects/{projectId}/annotations/{annotationId}
    method: PATCH
    data_selector: results
    params: {}
- name: data_retrieval
  endpoint:
    path: /api/app/data-retrievals/v3.0
    method: POST
    data_selector: results
    params: {}
- name: check_status_of_retrieval
  endpoint:
    path: /api/app/data-retrievals/v3.0/{tracking_id}
    method: GET
    data_selector: results
    params:
      token: Your project token
- name: create_deletion
  endpoint:
    path: /api/app/data-deletions/v3.0
    method: POST
    data_selector: results
    params:
      token: your_project_token
      distinct_ids: []
      compliance_type: GDPR
- name: check_status_of_deletion
  endpoint:
    path: /data-deletions/v3.0/{tracking_id}
    method: GET
    data_selector: results
    params:
      token: your_project_token
- name: cancel_deletion
  endpoint:
    path: /api/app/data-deletions/v3.0/{tracking_id}
    method: DELETE
    data_selector: none
    params:
      tracking_id: string
      token: string
- name: run_import
  endpoint:
    path: /imports/{importId}/manual-sync
    method: PUT
    data_selector: status
    params:
      projectId: integer
      importId: integer
notes:
- To ensure data ingests into your project, use the correct Ingestion API subdomain
  for your project's data residency.
- Service Account authentication is performed via HTTP Basic Auth.
- A project's token is not a form of authorization.
- Token is included in the data sent to Mixpanel.
- Project Secret authentication is in the process of being deprecated. Use Service
  Accounts instead.
- Segmentation Expressions are used in Query API and Raw Data Export API to allow
  for more specificity when querying your data.
- Getting a 429 response code from our API means that you have reached our rate-limit.
- 'You can reduce rate-limiting errors using one of the two approaches: Spread your
  queries out over a longer period of time or consolidate multiple queries into a
  single query.'
- A few of the more powerful APIs such as Lookup Tables do require authentication.
- It's recommended to use a Service Account for APIs that require authentication.
- Each request ingests a batch of events into Mixpanel.
- We accept up to 2000 events and 10MB uncompressed per request.
- Uses unique $insert_id for event deduplication.
- Raw Event Export - Deduplication is not applied to raw data exports. If you export
  events via the API, you may see duplicates. It is recommended to apply the same
  deduplication logic (event name, distinct_id, timestamp, $insert_id) to your exported
  data
- Always generate a unique $insert_id for each event. Reusing $insert_id (e.g., setting
  it to the user’s distinct_id) can cause unintended deduplication and data loss
- Query-time deduplication is immediate. Compaction-time deduplication timing is not
  guaranteed and may take hours to days to complete.
- The Groups Profile API imposes limits on the total number profile updates that can
  be sent per request to 2000 as well as limits each individual update in the request
  to a maximum of 1 MB. If you are running up against these limits, we suggest breaking
  your request into smaller batches.
- These APIs use Service Accounts for authentication.
- Lookup Tables must be created via our UI.
- This endpoint will return a 429 error if called more than 100 times in a rolling
  24 hour window.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some endpoints may require a valid project token.
- If you are running up against the limits, we suggest breaking your request into
  smaller batches.
- Requests parameters must include a project_id.
- The Query API has a rate limit of 60 queries per hour and a maximum of 5 concurrent
  queries.
- JQL is currently in maintenance mode and will be completely deprecated December
  31, 2025.
- Segmentation expressions can only access user properties, not event properties.
- The Service Account must have permission to access classified data.
- Raw export API allows you to download your event data as it is received and stored
  within Mixpanel.
- The raw export API has a rate limit of 60 queries per hour, 3 queries per second,
  and a maximum of 100 concurrent queries.
- If a schema already exists for a specified entity, it will be replaced by the one
  you upload.
- If you approach these limits, consider breaking your requests into smaller batches.
- This version of managing pipelines via API is Deprecated going forward.
- To modify (create, delete) service accounts, the service account used for authentication
  must have the role of admin or owner.
- To modify (create, delete) a service account, the service account used for authentication
  must have the role of admin or owner.
- To modify annotations (create, delete, or edit), you or the Service Account being
  used must have the role of at least Analyst.
- Warehouse Connectors allow you to connect a warehouse of your choice to import events,
  users, groups, and lookup tables.
- A service account is necessary to authenticate Warehouse Connectors API requests.
- Each request ingests a batch of events into Mixpanel. We accept up to 2000 events
  and 10MB uncompressed per request.
- The base URL is used to create pipelines.
errors:
- 400 Bad request
- 401 Unauthorized
- 403 Forbidden
- '429: Rate limit exceeded'
- '400: some data points in the request failed validation'
- '429: Too many requests, employ exponential backoff'
- '502: Bad Gateway, retry after backoff'
- '503: Service Unavailable, retry after backoff'
- '400: A 400 response indicates that some records failed validation.'
- '401: A 401 response indicates invalid credentials.'
- '413: A 413 response indicates that the payload is too large.'
- '429: A 429 response indicates rate limits have been exceeded.'
- '401 Unauthorized: Recheck project token or secret'
- '401'
- '403'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 401 A 401 response indicates invalid credentials.
- '400: some records failed validation'
- '401: invalid credentials'
- '404: the entity to replace was not found'
- '413: the payload is too large'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '400: Bad Request'
- '401: Unauthorized'
- '404: Not Found'
- '413: Payload Too Large'
- '429: Rate Limit Exceeded'
- '403 Forbidden: Check permissions and API key.'
- '401 Unauthorized: Ensure project token is valid.'
- 401 A 401 response indicates invalid service account credentials.
- 'Rate limit exceeded: Throttle API calls or reduce frequency'
- Rate limit of 60 queries per hour and a maximum of 5 concurrent queries.
- Queries will timeout after 2 minutes of run-time.
- '400 Bad Request: Check your query parameters and syntax.'
- '401 Unauthorized: Ensure the OAuth token is valid.'
- '429 Too Many Requests: Throttle your requests to avoid hitting rate limits.'
- 'rate limit exceeded: Too many requests in a short period'
- 'Rate limit exceeded: Too many queries made in a given time period.'
- '401 Unauthorized: Details about the error that occurred'
- '403 Forbidden: Details about the error that occurred'
- '400 Bad request: Details about the error that occurred'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Check authentication credentials'
- '403 Forbidden: Check your permissions'
- '404'
- '403 Forbidden: Access is denied'
- '401 Unauthorized: error'
- 404 Not Found
- '429: Rate limit exceeded, try again later'
- '404: Not found, check tracking ID'
- '400: Bad request, check the request parameters'
- '429: Too many requests, implement exponential backoff'
- '502: Bad Gateway, implement exponential backoff'
- '503: Service Unavailable, implement exponential backoff'
- 'URL Expired: The URL for this request expired after 30 days.'
- 'Rate limit exceeded: 60 queries per hour'
- 400 Bad Request
- '403 Forbidden: Check permissions'
auth_info:
  mentioned_objects:
  - Project Token
  - Service Accounts
  - Service Account
  - service account
  - serviceaccount_username
  - serviceaccount_secret
client:
  base_url: https://{region}.mixpanel.com
  auth:
    type: Service Account
    location: basic_auth_username
    header_name: ''
  headers:
    Content-Type: application/json
source_metadata: null
