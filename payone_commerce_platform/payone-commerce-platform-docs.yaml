resources:
- name: create_commerce_case
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
- name: get_commerce_cases
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: GET
- name: get_commerce_case_details
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}
    method: GET
- name: modify_commerce_case
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}
    method: PATCH
- name: add_checkout_to_commerce_case
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts
    method: POST
- name: checkouts
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts
    method: GET
    data_selector: checkouts
    params:
      offset: 0
      size: 25
- name: checkout_details
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}
    method: GET
    data_selector: checkoutDetails
    params: {}
- name: create_order
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}/refund
    method: POST
    data_selector: order
    params: {}
- name: create_payment
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}/refund
    method: POST
    data_selector: ''
    params: {}
- name: complete_order
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}/refund
    method: POST
    data_selector: ''
    params: {}
- name: mark_items_as_delivered
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}/refund
    method: POST
    data_selector: ''
    params: {}
- name: mark_items_as_returned
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}/refund
    method: POST
    data_selector: ''
    params: {}
- name: mark_items_as_cancelled
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}/refund
    method: POST
    data_selector: ''
    params: {}
- name: capture_payment
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}/refund
    method: POST
    data_selector: payment
    params: {}
- name: cancel_payment
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}/refund
    method: POST
    data_selector: payment
    params: {}
- name: refund_payment
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}/refund
    method: POST
    data_selector: payment
    params: {}
- name: complete_payment
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}/refund
    method: POST
    data_selector: payment
    params: {}
- name: pause_payment
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}/refund
    method: POST
    data_selector: payment
    params: {}
- name: refresh_payment_execution
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}/refund
    method: POST
    data_selector: payment
    params: {}
- name: refund_payment_information
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}/refund
    method: POST
    data_selector: payment
    params: {}
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: status
    params:
      aid: '12345'
      amount: '10000'
      currency: EUR
      key: c4ca4238a0b923820dcc509a6f75849b
      portalid: '123456'
      request: capture
      txid: '987654321'
      sequencenumber: '1'
      integrator_name: SuperDev
      integrator_version: 1.2.3
      solution_name: shopsystem
      solution_version: 3.2.1
- name: Server API - Preauthorization
  endpoint:
    path: /integration/channel-server-api/server-api-preauthorization
    method: POST
- name: Server API - Authorization
  endpoint:
    path: /integration/channel-server-api/server-api-authorization
    method: POST
- name: Server API - Capture
  endpoint:
    path: /integration/channel-server-api/server-api-capture
    method: POST
- name: Server API - Refund
  endpoint:
    path: /integration/channel-server-api/server-api-refund
    method: POST
- name: Server API - Debit
  endpoint:
    path: /integration/channel-server-api/server-api-debit
    method: POST
- name: Server API - Managemandate
  endpoint:
    path: /integration/channel-server-api/server-api-managemandate
    method: POST
- name: Server API - Getinvoice
  endpoint:
    path: /integration/channel-server-api/server-api-getinvoice
    method: POST
- name: Server API - Getfile
  endpoint:
    path: /integration/channel-server-api/server-api-getfile
    method: POST
- name: Server API - Vauthorization
  endpoint:
    path: /integration/channel-server-api/server-api-vauthorizatuion
    method: POST
- name: Server API - Creditcardcheck
  endpoint:
    path: /integration/channel-server-api/server-api-creditcardcheck
    method: POST
- name: Server API - Getuser
  endpoint:
    path: /integration/channel-server-api/server-api-getuser
    method: POST
- name: Server API - Updateuser
  endpoint:
    path: /integration/channel-server-api/server-api-updateuser
    method: POST
- name: Server API - 3dscheck
  endpoint:
    path: /integration/channel-server-api/server-api-3dscheck
    method: POST
- name: Server API - Bankaccountcheck
  endpoint:
    path: /integration/channel-server-api/server-api-bankaccountcheck
    method: POST
- name: Server API - Addresscheck
  endpoint:
    path: /integration/channel-server-api/server-api-addresscheck
    method: POST
- name: Server API - Createaccess
  endpoint:
    path: /integration/channel-server-api/server-api-createaccess
    method: POST
- name: Server API - Updateaccess
  endpoint:
    path: /integration/channel-server-api/server-api-updateaccess
    method: POST
- name: Server API - Updatereminder
  endpoint:
    path: /integration/channel-server-api/server-api-updatereminder
    method: POST
- name: payment_request
  endpoint:
    path: /post-gateway/
    method: POST
- name: preauthorization
  endpoint:
    path: /integration/channel-client-api/client-api-preauthorization
    method: POST
    data_selector: response
    params: {}
- name: authorization
  endpoint:
    path: /integration/channel-client-api/client-api-authorization
    method: POST
    data_selector: response
    params: {}
- name: payment_request
  endpoint:
    path: /payment/request
    method: POST
    data_selector: response
    params:
      mid: required
      aid: required
      portalId: required
      mode: required
      responsetype: required
      hash: required
      api_version: required
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: response
    params:
      api_version: '3.8'
      mode: live
      successurl: https://your-success-url.com
      backurl: https://your-cancel-url.com
      hash: your_hash_value
- name: online_bank_transfer
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: ''
    params:
      onlinebanktransfertype: LIST
      bankcountry: required
      iban: optional
      bic: optional
      bankaccount: optional
      bankcode: optional
      bankgrouptype: optional
- name: e_wallet
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: ''
    params:
      wallettype: required
- name: financing
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: ''
    params:
      financingtype: required
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: consumerscore
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: RESPONSE
    params:
      request: consumerscore
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: commerce_case
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
    data_selector: commerceCaseId
- name: checkout
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}
    method: PATCH
    data_selector: checkoutId
- name: order
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkout/{checkoutId}/order
    method: POST
- name: deliver
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkout/{checkoutId}/deliver
    method: POST
- name: commerce_case
  endpoint:
    path: /commerce/case
    method: POST
    data_selector: case
    params: {}
- name: deliver
  endpoint:
    path: /deliver
    method: POST
    data_selector: delivery
    params: {}
- name: commerce_case
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
    data_selector: commerceCaseId
- name: get_commerce_case
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}
    method: GET
    data_selector: merchantReference
- name: deliver
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{CommerceCaseId}/checkout/{CheckoutId}/deliver
    method: POST
    data_selector: capturePaymentResponse
- name: checkout_list
  endpoint:
    path: /v1/{merchantId}/checkouts
    method: GET
    data_selector: checkouts
    params:
      includeExtendedCheckoutStatus: OPEN
- name: commerce_case
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
    data_selector: commerceCaseId
    params: {}
- name: commerce_case
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
    data_selector: commerceCaseId
- name: update_checkout
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}
    method: PATCH
    data_selector: checkoutId
- name: retrieve_checkout
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}
    method: GET
    data_selector: checkouts
- name: commerce_case
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
    data_selector: commerceCaseId
- name: order
  endpoint:
    path: /v1/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/order
    method: POST
    data_selector: orderType
- name: checkout
  endpoint:
    path: /integration/channel-server-api
    method: GET
- name: refund
  endpoint:
    path: /integration/channel-client-api
    method: POST
- name: commerce_case
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
    data_selector: createPaymentResponse
    params: {}
- name: order
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkout/{checkoutId}/order
    method: POST
    data_selector: createPaymentResponse
    params: {}
- name: payment_methods
  endpoint:
    path: /pcp/commerce-platform-payment-methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: Credit and Debit Card Payments
  endpoint:
    path: /pcp/commerce-platform-payment-methods/new-card-form
    method: POST
    data_selector: payment
    params: {}
- name: JWT Token Generation
  endpoint:
    path: /v1/{merchantId}/authentication-tokens
    method: POST
    data_selector: token
- name: Create CommerceCase with Checkout
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
    data_selector: createPaymentResponse
- name: Deliver
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkout/{checkoutId}/deliver
    method: POST
    data_selector: capturePaymentResponse
- name: commerce_cases
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
    data_selector: commerceCaseId
- name: order
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkout/{checkoutId}/order
    method: POST
    data_selector: createPaymentResponse
- name: deliver
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkout/{checkoutId}/deliver
    method: POST
    data_selector: capturePaymentResponse
- name: sepa_direct_debit
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
    data_selector: commerceCaseId
    params: {}
- name: order
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkout/{checkoutId}/order
    method: POST
    data_selector: createPaymentResponse
    params: {}
- name: PAYONE - Secured Invoice
  endpoint:
    path: /pcp/commerce-platform-payment-methods/payone-bnpl/payone-secured-invoice
    method: GET
- name: PAYONE - Secured Installment
  endpoint:
    path: /pcp/commerce-platform-payment-methods/payone-bnpl/payone-secured-installment
    method: GET
- name: PAYONE - Secured Direct Debit
  endpoint:
    path: /pcp/commerce-platform-payment-methods/payone-bnpl/payone-secured-direct-debit
    method: GET
- name: payment_gateway
  endpoint:
    path: /payment/gateway
    method: POST
    data_selector: tokenizationSpecification
    params: {}
- name: commerce_case_checkout
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
    data_selector: paymentMethodSpecificInput
    params: {}
- name: deliver
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkout/{checkoutId}/deliver
    method: POST
    data_selector: deliver
    params: {}
- name: apple_pay
  endpoint:
    path: /pcp/commerce-platform-payment-methods/applepay
    method: GET
    data_selector: records
- name: commerce_case
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
    data_selector: null
    params: {}
- name: payment
  endpoint:
    path: /{merchantId}/commerce-cases/{commerceCaseId}/checkout/{checkoutId}/deliver
    method: POST
    data_selector: capturePaymentResponse
- name: credit_card_payments
  endpoint:
    path: /pcp/commerce-platform-payment-methods/credit-and-debit-card-payments
    method: POST
- name: creditcardcheck
  endpoint:
    path: /creditcardcheck
    method: POST
    data_selector: response
    params:
      request: creditcardcheck
      responsetype: JSON
      mode: live
      mid: '00000'
      aid: '00000'
      portalid: '0000000'
      encoding: UTF-8
      storecarddata: 'yes'
      hash: d5f41eaa5c4471aa7aac8159de83bf058f09526434de5aa5ae8eb00661df03146b84a7ebff08b54fa9b7f2fe797ed396
- name: commerce_case
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
    data_selector: createPaymentResponse
    params: {}
- name: deliver
  endpoint:
    path: /v1/{merchantId}/commerce-cases/{commerceCaseId}/checkout/{checkoutId}/deliver
    method: POST
    data_selector: capturePaymentResponse
    params: {}
- name: commerce_case
  endpoint:
    path: /v1/{merchantId}/commerce-cases
    method: POST
    data_selector: commerceCaseId
- name: pay_by_link
  endpoint:
    path: /v1/${mid}/commerce-cases/${commerceCaseId}/checkouts/${checkoutId}/pay-by-link
    method: POST
    data_selector: redirectionUrl
- name: Commerce Portal Dashboard
  endpoint:
    path: /pcp/payone-commerce-portal/dashboard
    method: GET
- name: checkout_overview
  endpoint:
    path: /checkouts/overview
    method: GET
    data_selector: data
    params: {}
- name: checkouts_number_status
  endpoint:
    path: /checkouts/number/status
    method: GET
    data_selector: data
    params: {}
- name: checkout_volume
  endpoint:
    path: /checkouts/volume
    method: GET
    data_selector: data
    params: {}
- name: checkout_summary
  endpoint:
    path: /checkouts/summary
    method: GET
    data_selector: data
    params: {}
- name: sales_channels
  endpoint:
    path: /sales/channels
    method: GET
    data_selector: data
    params: {}
- name: shopper_summary
  endpoint:
    path: /shoppers/summary
    method: GET
    data_selector: data
    params: {}
- name: checkout_status
  endpoint:
    path: /pcp/payone-commerce-portal/extended-checkout-status-model
    method: GET
    data_selector: checkout_statuses
    params: {}
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
- name: getconfiguration
  endpoint:
    path: /integration/channel-server-api
    method: POST
    data_selector: configuration
- name: getorderreferencedetails
  endpoint:
    path: /integration/channel-server-api
    method: POST
    data_selector: orderReferenceDetails
- name: setorderreferencedetails
  endpoint:
    path: /integration/channel-server-api
    method: POST
    data_selector: orderReferenceDetailsUpdate
- name: confirmorderreference
  endpoint:
    path: /integration/channel-server-api
    method: POST
    data_selector: orderConfirmation
- name: get_configuration
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      add_paydata[action]: getconfiguration
      request: genericpayment
      aid: '54400'
      mid: '54399'
      portalId: '2039743'
      key: 17031f73e2c6f9755788bddfff04169b
      clearingtype: wlt
      wallettype: AMZ
      mode: test
      amount: '0'
      currency: EUR
- name: get_order_reference_details
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: genericpayment
      aid: '54400'
      mid: '54399'
      portalId: '2039743'
      key: 17031f73e2c6f9755788bddfff04169b
      clearingtype: wlt
      wallettype: AMZ
      amount: '12000'
      currency: EUR
      mode: test
      add_paydata[action]: getorderreferencedetails
      add_paydata[amazon_address_token]: Atza|verylongalphaNUMMERICcharsetWithSpecialCharacters
      add_paydata[amazon_reference_id]: A00-1234567-9876543
- name: set_order_reference_details
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: genericpayment
      aid: '54400'
      mid: '54399'
      portalId: '2039743'
      key: 17031f73e2c6f9755788bddfff04169b
      clearingtype: wlt
      wallettype: AMZ
      amount: '12000'
      currency: EUR
      add_paydata[action]: setorderreferencedetails
      add_paydata[amazon_address_token]: token_value
      add_paydata[amazon_reference_id]: reference_id
      add_paydata[platform_id]: platform_id_value
      add_paydata[storename]: store_name_value
- name: genericpayment
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: genericpayment
      aid: 54400
      mid: 54399
      portalid: 2039743
      key: 17031f73e2c6f9755788bddfff04169b
      clearingtype: wlt
      wallettype: AMZ
      mode: test
      amount: 12000
      currency: EUR
      workorderid: WX1A1DZ26ET8UXWN
      successurl: https://yourdomain.de/amazonpay/returned/
      errorurl: https://yourdomain.de/amazonpay/cancel?error=1/
- name: post_gateway
  endpoint:
    path: /post-gateway/
    method: POST
- name: createCheckoutSessionPayload
  endpoint:
    path: /integration/channel-server-api
    method: POST
    data_selector: payload
    params: {}
- name: getCheckoutSession
  endpoint:
    path: /integration/channel-server-api
    method: POST
    data_selector: session
    params: {}
- name: updateCheckoutSession
  endpoint:
    path: /integration/channel-server-api
    method: POST
    data_selector: update
    params: {}
- name: preAuthorization
  endpoint:
    path: /integration/channel-server-api
    method: POST
    data_selector: authorization
    params: {}
- name: capture
  endpoint:
    path: /integration/channel-server-api
    method: POST
    data_selector: capture
    params: {}
- name: create_checkout_session
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: genericpayment
      clearingtype: wlt
      wallettype: AMP
      mode: test
      amount: numeric(1..10)
      currency: EUR
- name: get_checkout_session
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: genericpayment
      clearingtype: wlt
      wallettype: AMP
      mode: test
      workorderid: char(1..50)
- name: checkout_session
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: add_paydata
    params:
      request: genericpayment
      mid: '12345'
      aid: '12345'
      portalid: '1234567'
      key: abcdefghijklmn123456789
      clearingtype: wtl
      currency: EUR
      mode: test
      amount: 55767
      workorderid: ZYXTSRQPONMLKJHGF
      wallettype: AMP
- name: post_gateway
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: preauthorization
      aid: '12345'
      mid: '12345'
      portalid: '1234567'
      key: abcdefghijklmn123456789
      clearingtype: wlt
      wallettype: AMP
      amount: '12000'
      currency: EUR
      mode: test
      workorderid: ZYXTSRQPONMLKJHGF
      reference: ABCDEF12378ABC
      add_paydata[amazon_timeout]: '0'
      add_paydata[cancel_on_timeout]: 'yes'
      successurl: https://yourdomain.de/amazonpay/returned/
      errorurl: https://yourdomain.de/amazonpay/cancel?error=1/
      backurl: https://yourdomain.de/amazonpay/cancel/
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: capture
      mid: '12345'
      aid: '12345'
      portalid: '1234567'
      key: abcdefghijklmn123456789
      amount: '10000'
      currency: EUR
      txid: '123456789'
      workorderid: WX1AABCDEFGHIJL8K
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: debit
      mid: '12345'
      aid: '12345'
      portalid: '1234567'
      key: abcdefghijklmn123456789
      mode: test
      txid: '935037887'
      sequencenumber: '3'
      amount: '-4500'
      currency: EUR
- name: IPN Configuration Setting
  endpoint:
    path: /gpc/amazon2/1.1/notify
    method: POST
- name: asynchronous_processing
  endpoint:
    path: /payment-methods/amazon-pay/asynchronous-processing-v2
    method: POST
    data_selector: status
    params:
      add_paydata[processing_mode]: asynchronous
- name: pre_authorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: ''
    params:
      request: preauthorisation/authorization
      mid: ''
      aid: ''
      portalId: ''
      key: ''
      clearingtype: wtl
      mode: test/live
      amount: ''
      currency: ''
      shipping_country: DE
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: ''
    params:
      request: capture
      mid: ''
      portalId: ''
      key: ''
      txid: ''
      amount: ''
      currency: EUR
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: ''
    params:
      request: debit
      mid: ''
      portalId: ''
      key: ''
      txid: ''
      amount: ''
      currency: EUR
- name: apple_pay
  endpoint:
    path: /integration/channel-client-api
    method: POST
    data_selector: payment_details
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: preauthorization
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: creditcardcheck
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: creditcardcheck
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
- name: Apple Pay
  endpoint:
    path: /payment-methods/apple-pay
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: domain_verification
  endpoint:
    path: /.well-known/apple-developer-merchant-id-domain-association
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: session_initiation
  endpoint:
    path: /initiate/session
    method: POST
    data_selector: status
    params:
      request: genericpayment
      mid: '1234'
      aid: '1235'
      portalid: '2013224'
      key: 123456789abcdefghij
      mode: live
      clearingtype: wlt
      wallettype: APL
      currency: EUR
      add_paydata[action]: init_applepay_session
      add_paydata[display_name]: testStore
      add_paydata[domain_name]: aTestDomain
- name: generic_payment
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: genericpayment
      mid: your merchant ID
      aid: your subaccount ID
      portalId: your Portal ID
      key: your key value
      mode: live
      clearingtype: wlt
      wallettype: APL
      currency: EUR
      add_paydata[action]: init_applepay_session
      add_paydata[display_name]: testStore
      add_paydata[domain_name]: aTestDomain
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: preauthorization
      mid: your merchant ID
      aid: your subaccount ID
      portalId: your Portal ID
      key: your key value
      firstname: optional
      lastname: required
      country: required
      currency: EUR
      add_paydata[paymentdata_token_version]: required
      add_paydata[paymentdata_token_data]: required
      add_paydata[paymentdata_token_signature]: required
      add_paydata[paymentdata_token_ephemeral_publickey]: required
      add_paydata[paymentdata_token_publickey_hash]: required
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: RESPONSE
    params:
      request: preauthorization
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      clearingtype: sb
      mode: test
      amount: '300'
      currency: EUR
      lastname: Peeters
      country: BE
      onlinebanktransfertype: BCT
      bankcountry: BE
      successurl: http://www.your-success.url
      errorurl: http://www.your-error.url
      backurl: http://www.your-back.url
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: RESPONSE
    params:
      request: capture
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      txid: '345678901'
      amount: '300'
      currency: EUR
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: RESPONSE
    params:
      request: debit
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      txid: '345678901'
      sequencenumber: '1'
      amount: '1000'
      currency: EUR
- name: payment
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: payload
    params:
      request: preauthorization
      amount: 2500
      currency: EUR
      country: DE
      mode: test
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      txid: required
      capturemode: required
      sequencenumber: optional
      amount: required
      currency: required
      narrative_text: optional
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      txid: required
      sequencenumber: required
      amount: required
      currency: required
      narrative_text: optional
      use_customerdata: optional
      transaction_param: optional
- name: creditcardcheck
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: creditcardcheck
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: preauthorization
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: capture
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      amount: '-2389'
      currency: EUR
      de[1]: Hauptartikel mit Eigenschaften S
      de[2]: Standard Versand
      id[1]: SW10007
      id[2]: Standard Versand
      it[1]: goods
      it[2]: shipment
      key: 17031f73e2c6f9755788bddfff04169b
      mid: '14648'
      mode: test
      no[1]: '1'
      no[2]: '1'
      portalid: '2037267'
      pr[1]: '-1999'
      pr[2]: '-390'
      request: debit
      sequencenumber: '2'
      txid: '912162519'
      va[1]: '1900'
      va[2]: '1900'
- name: credit_card_recurring_transactions
  endpoint:
    path: /payment-methods/credit-cards/recurring-transactions-cc
    method: GET
- name: preauthorization
  endpoint:
    path: /preauthorization
    method: POST
    data_selector: ''
    params:
      recurrence: recurring
      customer_is_present: 'yes'
- name: createaccess
  endpoint:
    path: /createaccess
    method: POST
    data_selector: ''
    params:
      recurrence: recurring
      customer_is_present: 'yes'
- name: vauthorization
  endpoint:
    path: /vauthorization
    method: POST
    data_selector: ''
    params:
      recurrence: recurring
      customer_is_present: 'no'
- name: EPS Bank transfer
  endpoint:
    path: /payment-methods/eps-bank-transfer-at
    method: POST
    data_selector: records
    params: {}
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: redirecturl
    params:
      request: preauthorization
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      clearingtype: sb
      onlinebanktransfertype: EPS
      mode: test/live
      bankcountry: AT
      amount: numeric value
      currency: EUR
      successurl: https://yourdomain.dev/return_success
      errorurl: https://yourdomain.dev/return_error
      backurl: https://yourdomain.dev/return_back
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: capture
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      txid: numeric value
      amount: numeric value
      currency: EUR
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: debit
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      txid: numeric value
      amount: numeric value
      currency: EUR
- name: google_pay
  endpoint:
    path: /payment-methods/google-pay
    method: POST
    data_selector: payments
    params: {}
- name: pre_authorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: preauthorization
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: capture
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: debit
- name: payment
  endpoint:
    path: /payment/authorize
    method: POST
    data_selector: paymentMethodTokenizationData
    params:
      add_paydata[paymentmethod_token_data]: your_payment_token
      amount: '1000'
      api_version: '3.11'
      cardtype: V
      clearingtype: wlt
      country: DE
      currency: EUR
      encoding: UTF-8
      firstname: Demo
      key: 123456789abcdefghij
      lastname: Dude
      mid: '12345'
      mode: test
      portalid: '123456'
      reference: '013265464564654'
      request: preauthorization
      wallettype: GGP
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: redirecturl
    params:
      request: authorization
      currency: EUR
      encoding: UTF-8
      mode: test
      clearingtype: sb
      onlinebanktransfertype: IDL
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: capture
      currency: EUR
- name: generic_payment
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: genericpayment
      amount: 0
      mode: test
      currency: EUR
      add_paydata[action]: start_session
- name: genericpayment
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: genericpayment
      aid: '54400'
      mid: '54399'
      portalid: '2039743'
      key: 17031f73e2c6f9755788bddfff04169b
      mode: test
- name: cancel_authorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: genericpayment
      aid: '54400'
      mid: '54399'
      portalid: '2039743'
      key: 17031f73e2c6f9755788bddfff04169b
      mode: test
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: preauthorization
      aid: '12345'
      mid: '23456'
      portalid: '12345123'
      key: abcdefghijklmn123456789
      api_version: '3.11'
      mode: test
      amount: '300'
      currency: EUR
      lastname: Mustermann
      country: DE
      clearingtype: fnc
      financingtype: KIS
      successurl: http://www.yourdomain.url
      errorurl: http://www.yourdomain.url
      backurl: http://www.yourdomain.url
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: capture
      aid: '12345'
      mid: '23456'
      portalid: '12345123'
      key: abcdefghijklmn123456789
      api_version: '3.10'
      mode: test
      txid: '345678901'
      amount: '300'
      currency: EUR
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: RESPONSE
    params: {}
- name: manage_mandate
  endpoint:
    path: /managemandate
    method: POST
    data_selector: status
    params:
      mid: '12345'
      aid: '54321'
      portalid: '123456'
      request: managemandate
      country: DE
      currency: EUR
      zip: '24118'
      city: Kiel
      street: Fraunhoferstr. 2 - 4
      email: test@payone.com
      firstname: Max
      lastname: Payer
      iban: DE32500105171357431781
      language: de
- name: download_mandate_pdf
  endpoint:
    path: /getfile
    method: POST
    data_selector: file_reference
    params:
      file_format: PDF
      file_type: SEPA_MANDATE
      mid: '12345'
      portalid: '123456'
      request: getfile
- name: managemandate
  endpoint:
    path: /v1/managemandate
    method: POST
    data_selector: data
    params: {}
- name: getfile
  endpoint:
    path: /v1/getfile
    method: GET
    data_selector: data
    params: {}
- name: managemandate
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: managemandate
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: preauthorization
- name: mandate_reference_generation
  endpoint:
    path: /mandate/reference/generate
    method: POST
    data_selector: mandateReference
    params: {}
- name: sepa_lead_times
  endpoint:
    path: /sepa/lead_times
    method: GET
    data_selector: leadTimes
    params: {}
- name: mandate_text_generation_html
  endpoint:
    path: /mandate/text/generate/html
    method: POST
    data_selector: mandateTextHtml
    params: {}
- name: mandate_text_generation_pdf
  endpoint:
    path: /mandate/text/generate/pdf
    method: POST
    data_selector: mandateTextPdf
    params: {}
- name: getfile
  endpoint:
    path: /mandate/getfile
    method: GET
    data_selector: mandateFile
    params: {}
- name: invoicing_module_pre_notifications
  endpoint:
    path: /invoicing/pre_notifications
    method: POST
    data_selector: preNotifications
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: managemandate
  endpoint:
    path: /managemandate
    method: POST
    data_selector: mandates
    params: {}
- name: getfile
  endpoint:
    path: /getfile
    method: GET
    data_selector: files
    params: {}
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: preauthorization
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      country: DE
      clearingtype: rec
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: capture
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      currency: EUR
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: debit
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      currency: EUR
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params: {}
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params: {}
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params: {}
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
- name: payment
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: RESPONSE
    params: {}
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
- name: refund
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      mid: '23456'
      aid: '12345'
      amount: '-20000'
      currency: EUR
      mode: test
      sequencenumber: '2'
      txid: '753359579'
- name: installment_options
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: genericpayment
      clearingtype: fnc
      financingtype: PIN
      currency: EUR
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: preauthorization
      clearingtype: fnc
      financingtype: PDD
      currency: EUR
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: capture
      mid: '54321'
      aid: '12345'
      portalid: '12345123'
      key: abcdefghijklmn123456789
      txid: '753359579'
      amount: '20000'
      currency: EUR
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: debit
      mid: '54321'
      aid: '12345'
      portalid: '12345123'
      key: abcdefghijklmn123456789
      txid: '753359579'
      amount: '-20000'
      currency: EUR
- name: refund
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: refund
      mid: '54321'
      aid: '12345'
      portalid: '12345123'
      key: abcdefghijklmn123456789
      txid: '753359579'
      amount: '-20000'
      currency: EUR
      sequencenumber: '2'
- name: PaymentMethods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: methods
    params: {}
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: preauthorization
      mode: test
      clearingtype: wlt
      country: DE
      currency: EUR
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: capture
      currency: EUR
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: debit
      currency: EUR
- name: PayPal Checkout
  endpoint:
    path: /sdk/js
    method: GET
    data_selector: ''
    params: {}
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: preauthorization
      mid: your merchant ID
      aid: your subaccount ID
      portalId: your Portal ID
      key: your key value
      clearingtype: wlt
      currency: EUR
      amount: Format NUMERIC(1..10)
      successurl: https://success.com
      errorurl: https://error.com
      backurl: https://back.com
- name: genericpayment
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: genericpayment
      mid: your merchant ID
      aid: your subaccount ID
      portalId: your Portal ID
      key: your key value
      mode: test
      currency: EUR
      successurl: https://paypal.mirage.zznza.pay1-test.de/success.php
      errorurl: https://paypal.mirage.zznza.pay1-test.de/error-php
      backurl: https://paypal.mirage.zznza.pay1-test.de/error-php
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: capture
      mid: your merchant ID
      aid: your subaccount ID
      portalId: your Portal ID
      key: your key value
      txid: Format NUMERIC(9..12)
      currency: EUR
- name: transaction_capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: capture
      mid: '23456'
      portalid: '12345123'
      key: abcdefghijklmn123456789
      amount: '20500'
      currency: EUR
      sequencenumber: '1'
- name: transaction_refund
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: refund
      aid: '54321'
      sequencenumber: '2'
      txid: '1202830913'
      amount: '-20500'
      currency: EUR
- name: register_alias
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      add_paydata[action]: register_alias
      request: genericpayment
      aid: '12345'
      mid: '23456'
      portalid: '12345123'
      key: abcdefghijklmn123456789
      clearingtype: sb
      currency: CHF
      country: CH
      bankcountry: CH
      mode: test
- name: get_alias
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      add_paydata[action]: get_alias
      request: genericpayment
      aid: '12345'
      mid: '23456'
      portalid: '12345123'
      key: abcdefghijklmn123456789
      clearingtype: sb
      bankcountry: CH
      currency: EUR
      mode: test
      workorderid: WORKORDERID12345
- name: authorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: authorization
      aid: '12345'
      mid: '23456'
      portalid: '12345123'
      key: abcdefghijklmn123456789
      clearingtype: sb
      amount: '6413'
      onlinebanktransfertype: PFC
      currency: CHF
      lastname: Master
      reference: youranyreference
      mode: test
      country: CH
      bankcountry: CH
      add_paydata[alias]: youralias123456
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: capture
      mid: '23456'
      portalid: '12345123'
      key: abcdefghijklmn123456789
      mode: test
      txid: '345678901'
      amount: '300'
      currency: CHF
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    params:
      request: debit
      txid: NUMERIC(9..12)
      settleaccount: 'no'
      amount: NUMERIC(1..10)
      currency: CHF
- name: register_alias
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      add_paydata[action]: register_alias
      aid: '12345'
      mid: '23456'
      portalid: '12345123'
      key: abcdefghijklmn123456789
      clearingtype: sb
      currency: CHF
      country: CH
      bankcountry: CH
      mode: test
      request: genericpayment
      onlinebanktransfertype: PFF
- name: get_alias
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      add_paydata[action]: get_alias
      aid: '12345'
      mid: '23456'
      portalid: '12345123'
      key: abcdefghijklmn123456789
      clearingtype: sb
      bankcountry: CH
      currency: EUR
      mode: test
      request: genericpayment
      onlinebanktransfertype: PFF
      workorderid: WORKORDERID12345
- name: authorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      aid: '12345'
      mid: '23456'
      portalid: '12345123'
      key: abcdefghijklmn123456789
      clearingtype: sb
      amount: '6413'
      onlinebanktransfertype: PFF
      currency: CHF
      lastname: Master
      reference: youranyreference
      mode: test
      request: authorization
      country: CH
      bankcountry: CH
      add_paydata[alias]: youralias123456
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: capture
      mid: your merchant ID
      aid: your subaccount ID
      portalId: your Portal ID
      key: your key value
      txid: txid
      capturemode: completed
      amount: amount
      currency: EUR
- name: post_gateway
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: RESPONSE
    params:
      request: capture
      txid: '345678901'
      amount: 300
      currency: CHF
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: RESPONSE
    params:
      request: debit
      txid: '345678901'
      sequencenumber: 2
      amount: 1000
      currency: CHF
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: preauthorization
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      clearingtype: fnc
      financingtype: RPV
      amount: '7100'
      currency: EUR
      firstname: Marion
      lastname: RateInv
      street: Albertplatz 3
      zip: 01099
      city: Dresden
      country: DE
      email: test@payone.com
      birthday: '19701010'
      telephonenumber: 01752345678
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: authorization
      txid: Format NUMERIC(9..12)
      clearingtype: fnc
      financingtype: RPV
      amount: Format NUMERIC(1..10)
      currency: EUR
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: preauthorization
      txid: Format NUMERIC(9..12)
      sequencenumber: Format NUMERIC(1..3)
      amount: Format NUMERIC(1..10)
      currency: EUR
      settleaccount: 'yes'
- name: generic_payment
  endpoint:
    path: /post-gateway/
    method: POST
- name: post_gateway
  endpoint:
    path: /post-gateway/
    method: POST
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: preauthorization
      mid: '54399'
      aid: '54400'
      portalId: '2039743'
      key: 17031f73e2c6f9755788bddfff04169b
      reference: '1232500904'
      clearingtype: sb
      onlinebanktransfertype: P24
      bankcountry: PL
      amount: '19481'
      currency: PLN
      email: test@payone.com
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: capture
      mid: '54399'
      aid: '54400'
      portalId: '2039743'
      key: 17031f73e2c6f9755788bddfff04169b
      amount: '19481'
      currency: PLN
      capturemode: completed
      sequencenumber: '1'
      txid: '958011863'
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: debit
      mid: '54399'
      aid: '54400'
      portalId: '2039743'
      key: 17031f73e2c6f9755788bddfff04169b
      amount: '-19481'
      currency: PLN
      sequencenumber: '2'
      txid: '958011863'
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      api_version: '3.10'
      clearingtype: fnc
      financingtype: PYV
      amount: '49595'
      currency: EUR
      firstname: Manuel
      lastname: Weißmann
      email: test@example.com
      birthday: '19711110'
      ip: 89.245.17.41
      city: Frankfurt am Main
      country: DE
      street: Hugo-Junckers-Straße 3
      zip: '60386'
      reference: '1240501003'
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      clearingtype: fnc
      financingtype: PYV
      currency: EUR
- name: add_paydata_calculation
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      add_paydata[action]: calculation
      clearingtype: fnc
      financingtype: PYS
      currency: EUR
- name: add_paydata_pre_check
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      add_paydata[action]: pre_check
      clearingtype: fnc
      financingtype: PYS
      currency: EUR
- name: add_paydata_refund_announcement
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      add_paydata[action]: refund_announcement
      clearingtype: fnc
      financingtype: PYS
      currency: EUR
- name: add_paydata_fulfillment_delay
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      add_paydata[action]: fulfillment_delay
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: preauthorization
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      clearingtype: wtl
      mode: test/live
      amount: Format NUMERIC(1..10)
      currency: Format LIST
      lastname: Format CHAR(2..50)
      country: Fixed Value DE
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: capture
      txid: Format NUMERIC(9..12)
      amount: Format NUMERIC(1..10)
      currency: Fixed Value EUR
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: status
    params:
      request: debit
      txid: Format NUMERIC(9..12)
      sequencenumber: Format NUMERIC(1..3)
      amount: Format NUMERIC(1..10)
      currency: Fixed Value EUR
- name: preauthorization
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: preauthorization
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      clearingtype: wlt
      mode: test
      amount: total gross amount of a payment transaction
      currency: EUR
      lastname: last name of customer
      country: BE
      successurl: http://www.your-success.url
      errorurl: http://www.your-error.url
      backurl: http://www.your-back.url
- name: capture
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: capture
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      txid: the txid specifies the payment process within the PAYONE platform
      amount: total gross amount of a payment transaction
      currency: EUR
- name: debit
  endpoint:
    path: /post-gateway/
    method: POST
    data_selector: response
    params:
      request: debit
      mid: your merchant ID, 5-digit numeric
      aid: your subaccount ID, 5-digit numeric
      portalId: your Portal ID, 7-digit numeric
      key: your key value, alpha-numeric
      txid: the txid specifies the payment process within the PAYONE platform
      sequencenumber: sequence number for this transaction within the payment process
      amount: total gross amount of a payment transaction
      currency: EUR
notes:
- Access insights into your transactions and settlements, perform refunds and monitor
  your performance with our intuitive and responsive Merchant Portal.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Portal of type 'Shop'
- Module 'invoicing' needs to be activated
- Module 'protect' needs to be activated
- The content type must be set to 'application/x-www-form-urlencoded'.
- The return of the data is based on a line-by-line basis.
- Uses OAuth2 with refresh token — requires setup of connected app in PAYONE
- The type of character encoding used in the request can be ISO-8859-1 or UTF-8.
- The HTML footer and header for 'PAYONE Frontend' and 'PAYONE Frontend hosted-iFrame'
  can be and have to be configured separately.
- Feature 'auto-submit' must not be used with PAYONE Frontend hosted-iFrame and credit
  card data.
- Please contact your sales contact or our merchant service to ensure your merchant
  account is configured for 3DS.
- Some objects like Contact may return nulls in deeply nested fields
- Since 3-D Secure v1 will no longer be accepted from October 2022, test credit cards
  will only work with 3-D Secure v2.
- The expiry date should always be a date in the future.
- The CVV/CVC can be any combination of 3 digits for Mastercard and VISA, and 4 digits
  for American Express.
- The 3-D Secure password for all credit cards is 12345. Other combinations will fail
  in 3-D Secure Test Mode.
- The customer check is carried out to determine the risk of non-payment of demands
  against customers.
- For best results please provide 'streetname' and 'streetnumber' in separate fields.
- The communication is based on HTTPS-POST requests (key/value pairs) between the
  merchant’s systems and PAYONE Platform.
- The PAYONE Platform and its connected systems are designed for IP addresses Version
  4.
- Please use only upper case for country-codes and state-codes.
- Please use only lower case for language-codes.
- Please do not use reserved keys / keywords (like "state") for own usage.
- Some objects may return nulls in deeply nested fields
- Some responses may contain nested data structures
- The Commerce Platform does not handle clear PANs, credit card payment will be done
  only with a token.
- The POS payment will only be linked to the existing Checkout if the same merchantReference
  from the Checkout that was previously created is provided in the authorization message.
- The Order can also be initialized when creating Commerce Case and Checkout by setting
  autoExecuteOrder = true.
- Payment can be done via payment link, PAYONE Secured Direct Debit, PAYONE Secured
  Invoice etc.
- The Commerce Platform does not handle clear PANs, credit card payment will be done
  only with a token (paymentProcessingToken).
- If 3DS authentication is required, you'll get a redirect URL.
- Requires approval before payment capture is completed
- Payments can be tokenized or not based on configuration
- An integrated mandate management will be available soon.
- PAYONE handles PCI DSS and alleviates the burden from you when using and integrating
  Google Pay™.
- 'You should use the following values for the payment gateway: type: ''PAYMENT_GATEWAY'',
  GatewayId: payonegmbh, Gateway Merchant ID: <your merchant id with PAYONE>'
- Configure your online shop to accept only the card schemes that your merchant account
  supports.
- Apple Pay is currently not supported in all countries.
- All currencies that Apple Pay supports are currently also supported by the PAYONE
  platform.
- We highly recommend utilizing our card tokenization mechanism as described in the
  Hosted-iFrame Mode.
- Uses Merchant Identification Certificate for payment sessions
- Domains must be whitelisted in the Apple Dev Portal
- Uses OAuth2 with token in header
- In the iFrame example the respective merchant credentials have to be configured.
- Run html on a webserver to load the javaScript file from payone server.
- By default, Links are valid 24 h if expirationDate is not used.
- For specific payment methods, like Buy-Now-Pay-Later models, there will be specific
  data points / elements required by processing Partner in order to have the order
  approved.
- The API Key and API Secret are required for a successful authentication of the request.
- API Key should be hashed using the API Secret.
- Requires HMAC-SHA256 signature for requests
- Use specific order of HTTP headers for string-to-hash
- The accuracy of the KPIs relies mostly on the provided merchant data. There might
  be inaccuracies if data is not provided entirely or inconsistently.
- B2B transactions are not supported.
- Status 'PENDING' has to be processed with notify-version at least to 'Version 7.5'.
- To show the Amazon Pay button, send a genericpayment-request with action 'getconfiguration'.
- Use javascript from Amazon to initiate the confirmation of the order.
- The amount is set to zero when requesting configuration.
- The workorderid is unique and mandatory for subsequent requests.
- Chinese characters are not supported by the PAYONE platform
- Partial Captures are supported but the customers account will be debited with the
  Preauthorization
- Partial Refunds are not supported
- Reversal is not supported
- 'Public key ID for rendering Amazon Pay button: AE5E5B7B2SAERURYEH6DKDAZ'
- Use Payone Public key when rendering the Amazon Pay button.
- Use genericpayment request to create an Amazon Pay checkout session.
- Use genericpayment-getCheckoutSession request to retrieve the checkout session details.
- The amount must be less than or equal to the amount of the corresponding booking.
- The returned workorderid is mandatory for the following requests of Amazon Express
  Checkout.
- You should then submit the received 'Seller ID' and 'MWS Authorisation Token' on
  a secure way to PAYONE Helpdesk for Amazon Pay CV2 onboarding and configuration.
- Additionally you should store with Payone your Store Id along with Seller ID (Merchant
  ID) and MWS Authorzation Token.
- Apple Pay is currently not supported in all countries, please check with Apple Pay
  if it is available in your country/region.
- Supported Payment methods include Visa, Mastercard, girocard.
- Make sure you only make payment methods available for Apple Pay which are part of
  your contract with us.
- All Apple Pay sessions must be initiated using the Merchant Identification Certificate.
- Your domains must be whitelisted in the Apple Developer Portal.
- Session initiation request is only available in mode live.
- Ensure that domain has a valid SSL certificate.
- Update the certificate not later than 7 days prior to its expiration to keep Apple
  Pay functional.
- The token generated by Apple has a limited lifespan of 5 minutes.
- Only live mode is supported at the moment. Test mode will be available later this
  year.
- Partial Captures are supported but the account of the customer will be debit with
  the Preauthorization
- Transactions are limited to 999€ per 24hours
- We strongly recommend using our card tokenization mechanic as outlined in Hosted-iFrame
  Mode - Short description. Not only will this significantly decrease your PCI DSS
  compliance efforts, using the tokenized pseudocardpan will also decrease the amount
  of card parameters you will have to handle.
- Response includes status which can be APPROVED or ERROR
- Merchant must obtain consent that data will be stored and be used for subsequent
  payments
- Customer has to agree to CoF
- EPS is an electronic bank transfer solution that is exclusively used in Austria.
- Uses POST requests for preauthorization, capture, and debit.
- Ensure to follow Google Pay™ brand guidelines before adding payment button.
- The iDEAL payment method does not accommodate payments where the end customer is
  not directly involved.
- In test mode, the amount is limited to €3,900.00.
- Klarna requires more specific customer data - depending on country of customer
- Status 'PENDING' has to be processed for API-response 'PENDING' implementation of
  API-version 3.11 or higher is required
- Uses POST method for requests to the gateway
- Response status can be APPROVED or ERROR
- Mandates are valid for up to 36 months after last transaction
- Pending mandates only get persisted if a payment request is sent within two hours
- If using PAYONE Payment Service (PPS), no own creditor ID is needed.
- For non-PPS users, own creditor ID is required for direct debit processing.
- You will have to inform your customers about the conversion of their direct debit
  mandate indicating their mandate reference and the creditor ID.
- The pre-notification must contain the due date and the exact amount of the transaction.
- The payer needs to receive the pre-notification at least 14 calendar days before
  the transaction is effected.
- 'Fixed values for request: managemandate, preauthorization/authorization, mode:
  test/live, clearingtype: ELV, country: DE.'
- Mandate references are always automatically generated for PPS merchants.
- Lead times for initial and subsequent debits are five and two days respectively.
- Final status of transactions will be sent asynchronously.
- When paying in advance (Prepayment), the goods will be shipped only after receipt
  of payment.
- Device fingerprinting token must be integrated during the checkout process.
- Mandatory checkout information must be provided to end customers.
- The final status of transactions will be sent asynchronously.
- Mandatory checkout information must be provided to customers.
- Preauthorization is valid for 28 days.
- Sending a cancel is required if the amount won't be captured.
- Mandatory checkout information is required for transparency regarding payment methods.
- Currently no support for increasing receivables with a debit request.
- Request preauthorization is only valid for 28 days.
- Processing only possible for EUR currency for Switzerland.
- Currently no support for refunds after start of encashment.
- The authorization request combines both preauthorization and capture steps.
- PAYONE platform must be allowed to use your PayPal-account.
- Requires authorizing PAYONE to manage your PayPal account.
- 'For live Business Accounts: technik_api1.payone.de, for sandbox Business Accounts:
  api_1217604614_biz_api1.payone.de.'
- PayPal v2 introduces the PayPal Checkout, featuring a RESTful API solution.
- Ensure to replace placeholders with actual values.
- Set mode to 'live' for live-requests
- Uses POST requests with form-urlencoded payload.
- Refund with Ratepay can currently only be ordered via this API, not via the PMI.
- The call needs to provide the new list of items representing the complete shopping
  cart.
- Response status can be OK or ERROR
- Test data will not work with Frontend. Frontend is a payment form that is provided
  by PAYONE Platform.
- These test data will work with Server-API / Client-API / shop modules.
- Response may include status as either APPROVED or ERROR.
- Unzer's services include transaction processing and acting as an acquirer.
- Requires setup of merchant account with Unzer
- B2B transactions require setting add_paydata[b2b] to 'yes'
- Wero is designed to become the preferred standard payment solution for European
  merchants and consumers.
- Testing WERO doesn't involve end consumer or test WERO Digital app.
- The combination of firstname and lastname must have at least 3 characters
- Partial Captures are supported but the customer's account will be debited with the
  Preauthorization
- Partial Refunds are supported
errors:
- '400: The request was malformed or was missing required data.'
- '403: You are not allowed to access the service or account or your API authentication
  failed.'
- '404: The most common cause for this response is that the payment was not in a cancelable
  state.'
- '201: The Refund was successfully created.'
- '404: The payment was not in a cancelable state.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '1: Card Issuer temporarily not available'
- '2: Authorization declined'
- '4: Retain card'
- '5: Authorization declined'
- '7: CVC2/CVV2 mandatory, but not transmitted or invalid'
- '12: Transaction invalid'
- '13: Limit exceeded'
- '14: Invalid Card'
- '30: Format Error in request message (e.g. CVC missing)'
- '31: Card type invalid'
- '34: Suspicion of Manipulation'
- '43: Stolen Card'
- '51: Limit exceeded or account balance insufficient'
- '55: Incorrect secret code'
- '56: Unknown Card'
- '57: Cancelation: Wrong card has been used as for original authorization'
- '58: Terminal ID unknown'
- '60: Card acceptor must contact the acquirer'
- '61: Card blocked'
- '62: Restricted Card'
- '63: Card is not allowed. Card is blocked.'
- '64: Transaction amount is different from authorization.'
- '65: Card has been used too often'
- '91: Card issuer temporarily not reachable'
- '701: Payment rejected by the BIN-Check'
- '702: Payment rejected due to the BIN-Country'
- '722: Payment rejected by the Velocity-Cardpan-Check'
- '732: Payment rejected by the Blacklist-Cardpan-Check'
- '400: In case of error the PAYONE Platform returns an error code for your internal
  usage.'
- '400: In case of error the PAYONE Platform returns an error message for your internal
  usage.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '2010: Limit for test transactions per day reached'
- 'PENDING_CAPTURE: Payment is authorized but not captured yet'
- 'CAPTURED: Payment has been successfully captured'
- 'WAITING_FOR_PAYMENT: Line item is waiting for payment authorization'
- '2702: Error decrypting Apple Pay / Google Pay token Check if your payment processing
  certificate is valid and has been uploaded to the merchant backend.'
- '2703: Certificate service declined request because of validation errors. An error
  occurred while processing this transaction (wrong parameters).'
- '401 Unauthorized: Check your Merchant ID and certificate setup'
- '2700: Request amount differs from apple pay token amount.'
- '2701: Request currency differs from apple pay token amount.'
- '2702: Failed to decrypt apple pay token'
- '2703: Certificate service declined request because of validation errors.'
- '2704: Required parameter in apple pay token is missing or empty'
- 'error: area to display error-messages'
- 'Unauthorized: Check API Key and API Secret.'
- '400 Bad Request: Check your parameters and values.'
- 'errorcode: Format NUMERIC(1..6)'
- 'errormessage: Format CHAR(1..1024)'
- '400: Error code returned by PAYONE Platform'
- 'APPROVED: The request was successful'
- 'ERROR: The request failed'
- '980: Transaction timed out at amazon'
- '981: Declined transaction at amazon due to unauthorized payment method'
- '985: Show the wallet-widget to the customer, to let him choose another payment
  method'
- '986: Show the wallet-widget to the customer, to let him choose a payment method'
- '987: Show the address-widget to the customer, to let him choose a shipping address'
- '400: Bad Request - Check the parameters provided.'
- '401: Unauthorized - Check authentication details.'
- '993: Too many requests at external service provider: Please try again later.'
- '903: No connection to external service provider possible: Please try again later.'
- '980: The transaction cannot complete successfully: Try to authorize the payment
  via asynchronous mode.'
- '400: Error code returned for internal usage'
- '401: Unauthorized access'
- 'ERROR: In case of error the PAYONE Platform returns an error message for your internal
  usage.'
- '400: Error code returned for internal usage.'
- '2702: Failed to decrypt apple pay token.'
- '2704: Required parameter in apple pay token is missing or empty.'
- 'apple-pay-technical-error: Your domain is no longer activated.'
- 'validation-error - missing-domain-name: Provide the domain name in the API Request.'
- 'validation-error - missing-display-name: Provide the display name in the API Request.'
- '400: In case of error the PAYONE Platform returns an error code and message.'
- '400: Error code and message returned in case of error'
- '400: errorcode'
- '400: errormessage'
- '400: customermessage'
- '400: Invalid card number'
- '400: General error'
- '401: Unauthorized'
- In case of error the PAYONE Platform returns an error code and message
- 'error -120: If Success-, Error and Back-URL are not provided or empty in the createaccess
  request, 3-D Secure will not be triggered and issuers will most likely respond with
  a soft-decline'
- '400: Error in processing request.'
- '401: Unauthorized access.'
- '404: Resource not found.'
- '400: Invalid request parameters'
- '401: Unauthorized access - check API key'
- '2702: Error decrypting Apple Pay / Google Pay token'
- '400: Error in request parameters'
- '404: Resource not found'
- '400: The customermessage is returned to your system in order to be displayed to
  the customer.'
- '400: errorcode and errormessage returned in case of error'
- 'Error 887: BIC not valid'
- 'Error 6500: Specific error related to file download'
- 'Error 6502: Another specific error related to file download'
- 'MANDATE_ALREADY_EXISTS: A mandate for this account already exists.'
- 'INVALID_ACCOUNT_DETAILS: The provided account details are not valid.'
- 'APPROVED: Successful response status.'
- '400: Error in request'
- '401: Unauthorized access or invalid credentials.'
- '400: errorcode, errormessage, customermessage'
- '400: Bad Request'
- '200: Status can be APPROVED or ERROR.'
- '400: Bad Request - Check request parameters'
- '401: Unauthorized - Check API credentials'
- '404: Not Found - Endpoint may be incorrect'
- 'errorcode: In case of error the PAYONE Platform returns an error code for your
  internal usage.'
- 'errormessage: In case of error the PAYONE Platform returns an error message for
  your internal usage.'
- '400: Error response with errorcode and errormessage'
- '400: error code and message for internal usage.'
- '400: Error code for internal usage'
- 'errorcode: Error code for internal usage'
- 'errormessage: Error message for internal usage'
- '400: PAYONE Platform returns an error code for your internal usage.'
- '404: Endpoint not found'
- '400: Error code and message returned by PAYONE Platform'
- '500: Internal server error'
- '401: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.pay1.de
  auth:
    type: oauth2
    channel: clientapi
    channelDetail: payoneHosted
source_metadata: null
