resources:
- name: init
  endpoint:
    path: /init
    method: POST
    data_selector: results
- name: init
  endpoint:
    path: /init
    method: POST
- name: make_model
  endpoint:
    path: /make/model
    method: POST
- name: make_composable
  endpoint:
    path: /make/composable
    method: POST
- name: make composable
  endpoint:
    path: /docs/digging-deeper/cli#make-composable-name
    method: POST
    data_selector: composable
    params: {}
- name: make model
  endpoint:
    path: /docs/digging-deeper/cli#make-model-name
    method: POST
    data_selector: model
    params: {}
- name: integrate nuxt
  endpoint:
    path: /docs/digging-deeper/cli#integrate-nuxt
    method: POST
    data_selector: integration
    params: {}
- name: make loader
  endpoint:
    path: /docs/digging-deeper/cli#make-loader-name
    method: POST
    data_selector: loader
    params: {}
- name: make reducer
  endpoint:
    path: /docs/digging-deeper/cli#make-reducer
    method: POST
    data_selector: reducer
    params: {}
- name: make reviver
  endpoint:
    path: /docs/digging-deeper/cli#make-reviver
    method: POST
    data_selector: reviver
    params: {}
- name: make model-factory
  endpoint:
    path: /docs/digging-deeper/cli#make-model-factory
    method: POST
    data_selector: model-factory
    params: {}
- name: make models
  endpoint:
    path: /docs/digging-deeper/cli#make-models
    method: GET
    data_selector: models
- name: make action
  endpoint:
    path: /docs/digging-deeper/cli#make-action-name
    method: GET
    data_selector: actions
- name: make runner
  endpoint:
    path: /docs/digging-deeper/cli#make-runner-name
    method: GET
    data_selector: runners
- name: integrate nuxt
  endpoint:
    path: /docs/digging-deeper/cli#integrate-nuxt
    method: GET
    data_selector: nuxt_integration
- name: integrate nuxt payload-plugin
  endpoint:
    path: /docs/digging-deeper/cli#integrate-nuxt-payload-plugin-name
    method: GET
    data_selector: nuxt_payload_plugin
- name: init
  endpoint:
    path: /init
    method: POST
    data_selector: records
    params: {}
- name: init
  endpoint:
    path: /init
    method: GET
    data_selector: records
    params: {}
- name: make_model
  endpoint:
    path: /make/model
    method: POST
    data_selector: records
    params: {}
- name: make_composable
  endpoint:
    path: /make/composable
    method: POST
    data_selector: records
    params: {}
- name: Post
  endpoint:
    path: /models/Post
    method: GET
    data_selector: records
- name: none
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: raw
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: all
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: one
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: oneOrFail
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: oneOrCurrent
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: oneOr
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: cached
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: cachedOrFail
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: cachedOr
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: catchIf
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: usingDocument
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: none
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: raw
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: all
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: one
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: oneOrFail
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: oneOrCurrent
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: oneOr
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: cached
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: cachedOrFail
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: cachedOr
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: catchIf
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
notes:
- Foscia may also register hooks internally when using some features, such as relations
  inverse, etc.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Foscia CLI is provided by @foscia/cli package.
- Foscia CLI uses a configuration file which helps generating files correctly for
  all `make:*` commands.
- Since Foscia CLI is not installed globally, you will need to prefix 'foscia' with
  your package runner.
- Many actions enhancers are available. Each may require a given context from previous
  enhancers or runners.
- Foscia supports eager loading relations through `include`.
- Pagination is agnostic when using JSON:API.
- Currently, REST implementations does not support additional features compared to
  generic Foscia features, because REST is not that much standardized about filtering,
  sorting, etc.
- Foscia does not provide any integration tests utilities, because those tests should
  not mock or fake any Foscia behaviors.
- Uses HTTP methods like PATCH and DELETE as shortcuts for makeRequest function
errors: []
auth_info:
  mentioned_objects: []
client:
  base_url: /api/v1
source_metadata: null
