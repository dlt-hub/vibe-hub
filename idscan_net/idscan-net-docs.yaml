resources:
- name: check_person
  endpoint:
    path: /api/Check
    method: POST
- name: customer_info
  endpoint:
    path: /api/Customer
    method: GET
- name: customer_requests
  endpoint:
    path: /api/Customer/requests
    method: GET
- name: customer_services
  endpoint:
    path: /api/Customer/services
    method: GET
- name: import_custom_list
  endpoint:
    path: /api/CustomList/import
    method: POST
- name: update_custom_list
  endpoint:
    path: /api/CustomList/{id}
    method: PUT
- name: get_custom_list_details
  endpoint:
    path: /api/CustomList/{id}
    method: GET
- name: delete_custom_list
  endpoint:
    path: /api/CustomList/{id}
    method: DELETE
- name: get_all_custom_lists
  endpoint:
    path: /api/CustomList
    method: GET
- name: get_persons_by_custom_list
  endpoint:
    path: /api/CustomList/{id}/persons
    method: GET
- name: get_history_log
  endpoint:
    path: /api/HistoryLog
    method: GET
- name: get_locations
  endpoint:
    path: /api/Locations
    method: GET
- name: get_services
  endpoint:
    path: /api/Services
    method: GET
- name: check_services_status
  endpoint:
    path: /api/ServicesStatusCheck
    method: GET
- name: PDF417ScanActivity
  endpoint:
    path: /scanning/pdf417
    method: GET
    data_selector: result
- name: PDF417ScanActivity
  endpoint:
    path: /api/pdf417scan
    method: GET
    data_selector: result
    params: {}
- name: MultiScanActivity
  endpoint:
    path: /camerascan/multiscan
    method: GET
    data_selector: data
    params: {}
- name: MultiScanActivity
  endpoint:
    path: /scanning
    method: POST
    data_selector: documentData
- name: supported_image_file_types
  endpoint:
    path: /dive/supported-image-file-types
    method: GET
    data_selector: file_types
    params: {}
- name: image_file_types
  endpoint:
    path: /supported/image/file/types
    method: GET
    data_selector: file_types
- name: verification_request_log
  endpoint:
    path: /dive-api/verification-request-log
    method: GET
    data_selector: records
- name: verification_request_log
  endpoint:
    path: /dive-api/verification-request-log
    method: GET
- name: documentTypes
  endpoint:
    path: /dive-api/documentTypes
    method: GET
    data_selector: documentTypes
    params: {}
- name: documentTypes
  endpoint:
    path: /dive-api/documentTypes
    method: GET
    data_selector: types
    params: {}
- name: messageBox
  endpoint:
    path: /messageBox
    method: GET
    data_selector: default
- name: desktopNotification
  endpoint:
    path: /desktopNotification
    method: GET
    data_selector: barcode
- name: controlButtons
  endpoint:
    path: /controlButtons
    method: GET
    data_selector: upload
- name: documentsTypes
  endpoint:
    path: /documentsTypes
    method: GET
    data_selector: DL
- name: uploaderDescription
  endpoint:
    path: /uploaderDescription
    method: GET
    data_selector: textFront
- name: verification_requests
  endpoint:
    path: /v4/verify
    method: POST
    data_selector: data
    params: {}
- name: verification_request
  endpoint:
    path: /v4/verify
    method: POST
- name: verify
  endpoint:
    path: /api/v4/verify
    method: POST
    data_selector: requestData
    params: {}
- name: verify_request
  endpoint:
    path: /api/v4/verify
    method: POST
    data_selector: requestData
    params: {}
- name: overriddenSettings
  endpoint:
    path: /dive/api/overridden-settings
    method: POST
    data_selector: overriddenSettings
    params: {}
- name: verification_request
  endpoint:
    path: /dive-api/verification
    method: POST
    data_selector: data
    params: {}
- name: overriddenSettings
  endpoint:
    path: /dive/overriddenSettings
    method: POST
    data_selector: overriddenSettings
    params: {}
- name: authentication
  endpoint:
    path: /v4/authentication
    method: POST
    data_selector: string
    params: {}
- name: verification_requests
  endpoint:
    path: /dive-api/verification
    method: POST
    data_selector: records
    params: {}
- name: verification_authentication_response
  endpoint:
    path: /dive/dive-api/api-manual-v4-response.html
    method: GET
    data_selector: response
- name: authentication
  endpoint:
    path: /v4/authentication
    method: POST
    data_selector: records
- name: verification_response
  endpoint:
    path: /dive/verification/authentication
    method: POST
    data_selector: document
    params: {}
- name: authentication
  endpoint:
    path: /v4/authentication
    method: POST
- name: fractal_search
  endpoint:
    path: /v4/fractal/search
    method: POST
- name: groups
  endpoint:
    path: /v4/fractal/groups
    method: GET
- name: transaction_balance
  endpoint:
    path: /v4/transaction/balance
    method: GET
- name: verify
  endpoint:
    path: /v4/verify
    method: POST
- name: ApiHealth
  endpoint:
    path: /hc
    method: GET
- name: authentication
  endpoint:
    path: /v4/authentication
    method: POST
- name: fractal_search
  endpoint:
    path: /v4/fractal/search
    method: POST
- name: transaction_history
  endpoint:
    path: /v4/transaction/history
    method: GET
- name: transaction_balance
  endpoint:
    path: /v4/transaction/balance
    method: GET
- name: ValidationRequests
  endpoint:
    path: /api/ValidationRequests
    method: POST
    data_selector: applicantId
- name: validation_requests
  endpoint:
    path: /api/ValidationRequests
    method: POST
    data_selector: request
    params: {}
- name: validation_requests
  endpoint:
    path: /api/ValidationRequests
    method: POST
    data_selector: results
- name: callback_url
  endpoint:
    path: /webhooks
    method: POST
    data_selector: callbackUrl
    params: {}
- name: applicants
  endpoint:
    path: /api/v2/private/Applicants
    method: GET
    data_selector: records
    params:
      incremental: created
- name: applicant_completed
  endpoint:
    path: /api/v2/public/Applicants/{applicantId}/Completed
    method: GET
    data_selector: records
    params: {}
- name: applicant_complete
  endpoint:
    path: /api/v2/public/Applicants/{applicantId}/Complete
    method: POST
    data_selector: records
    params: {}
- name: applicant_attempts
  endpoint:
    path: /api/v2/private/Applicants/{applicantId}/Attempts
    method: GET
    data_selector: records
    params: {}
- name: applicants
  endpoint:
    path: /api/v2/private/Applicants
    method: GET
    data_selector: records
    params:
      Page: '1'
      PageSize: '400'
- name: applicant_completed
  endpoint:
    path: /api/v2/public/Applicants/{applicantId}/Completed
    method: GET
    data_selector: result
- name: applicant_complete
  endpoint:
    path: /api/v2/public/Applicants/{applicantId}/Complete
    method: POST
    data_selector: result
- name: applicant_by_id
  endpoint:
    path: /api/v2/private/Applicants/{applicantId}
    method: GET
    data_selector: result
- name: applicant_attempts
  endpoint:
    path: /api/v2/private/Applicants/{applicantId}/Attempts
    method: GET
    data_selector: records
- name: applicant_attempt
  endpoint:
    path: /api/v2/private/Applicants/{applicantId}/Attempts/{attemptId}
    method: GET
    data_selector: result
- name: applicant_images
  endpoint:
    path: /api/v2/private/Applicants/{applicantId}/Attempts/{attemptId}/Images
    method: GET
    data_selector: images
- name: applicant_re_notify
  endpoint:
    path: /api/v2/private/Applicants/{applicantId}/ReNotify
    method: POST
    data_selector: result
- name: applicant_delete
  endpoint:
    path: /api/v2/public/Applicants/{applicantId}
    method: DELETE
    data_selector: result
- name: AccountProfileIntegrations
  endpoint:
    path: /api/v2/public/AccountProfileIntegrations/{accountProfileId}/{integrationId}/Logo
    method: GET
- name: Applicants
  endpoint:
    path: /api/v2/private/Applicants
    method: GET
- name: Blacklist
  endpoint:
    path: /api/v2/public/Blacklist
    method: GET
- name: Bundles
  endpoint:
    path: /api/v2/public/Bundles/{bundleId}/Configuration
    method: GET
- name: Domains
  endpoint:
    path: /api/v2/public/Domains/{domainId}/Configuration
    method: GET
- name: EmbeddedApp
  endpoint:
    path: /api/v2/EmbeddedApp/Open/{id}
    method: POST
- name: Integrations
  endpoint:
    path: /api/v2/public/Integrations/{integrationId}/Configuration
    method: GET
- name: RequestMetadata
  endpoint:
    path: /api/v2/public/RequestMetadata
    method: GET
- name: RiskEvents
  endpoint:
    path: /api/v2/public/RiskEvents
    method: GET
- name: UploadDocuments
  endpoint:
    path: /api/v2/public/UploadDocuments
    method: POST
- name: Validation
  endpoint:
    path: /api/v2/public/Validation/{applicantId}
    method: POST
- name: AccountProfileIntegrations
  endpoint:
    path: /api/v2/public/AccountProfileIntegrations/{accountProfileId}/{integrationId}/Logo
    method: GET
- name: Applicants
  endpoint:
    path: /api/v2/private/Applicants
    method: GET
- name: Blacklist
  endpoint:
    path: /api/v2/public/Blacklist
    method: GET
- name: Bundles
  endpoint:
    path: /api/v2/public/Bundles/{bundleId}/Configuration
    method: GET
- name: Domains
  endpoint:
    path: /api/v2/public/Domains/{domainId}/Configuration
    method: GET
- name: EmbeddedApp
  endpoint:
    path: /api/v2/EmbeddedApp/Open/{id}
    method: POST
- name: Integrations
  endpoint:
    path: /api/v2/public/Integrations/{integrationId}/Configuration
    method: GET
- name: RequestMetadata
  endpoint:
    path: /api/v2/public/RequestMetadata
    method: GET
- name: RiskEvents
  endpoint:
    path: /api/v2/public/RiskEvents
    method: GET
- name: UploadDocuments
  endpoint:
    path: /api/v2/public/UploadDocuments
    method: POST
- name: Validation
  endpoint:
    path: /api/v2/public/Validation/{applicantId}
    method: POST
- name: verification_requests
  endpoint:
    path: /verification/requests
    method: POST
- name: reviewable_submissions
  endpoint:
    path: /verification/reviewable
    method: GET
- name: License key
  endpoint:
    path: /dive/license-key
    method: GET
- name: DIVE API Secret key
  endpoint:
    path: /dive/api-secret-key
    method: GET
- name: pdf_parser
  endpoint:
    path: /services/data/v1/pdf_parser
    method: GET
    data_selector: records
    params: {}
- name: mrz_parser
  endpoint:
    path: /services/data/v1/mrz_parser
    method: GET
    data_selector: records
    params: {}
- name: vehicle_registration
  endpoint:
    path: /vehicle_registration
    method: GET
    data_selector: records
- name: IDScanIDParser
  endpoint:
    path: /IDScanIDParser
    method: GET
    data_selector: parsedData
- name: vehicle_registration
  endpoint:
    path: /vehicle-registration
    method: GET
    data_selector: records
    params: {}
- name: DriverLicense
  endpoint:
    path: /IDParsing/DriverLicense
    method: POST
    data_selector: parsed_data
    params: {}
- name: DriverLicense
  endpoint:
    path: /DriverLicense
    method: GET
    data_selector: fields
- name: DlplibLicenseStatus
  endpoint:
    path: /DlplibLicenseStatus
    method: GET
    data_selector: fields
- name: DriverLicenseEx
  endpoint:
    path: /DriverLicenseEx
    method: GET
    data_selector: fields
- name: VehicleRegistrationData
  endpoint:
    path: /VehicleRegistrationData
    method: GET
    data_selector: fields
- name: DriverLicense
  endpoint:
    path: /driver-license
    method: GET
    data_selector: DriverLicense
    params: {}
- name: vehicle_data
  endpoint:
    path: /api/vehicle_data
    method: GET
    data_selector: records
    params: {}
- name: dmv_verification
  endpoint:
    path: /api/Check
    method: POST
    data_selector: serviceId
    params: {}
- name: dmv_verification
  endpoint:
    path: /api/Check
    method: POST
    data_selector: profiles
    params: {}
- name: identifraud_check
  endpoint:
    path: /Check
    method: POST
    data_selector: records
- name: identifraud_check
  endpoint:
    path: /api/Check
    method: POST
    data_selector: response
    params: {}
- name: DLParser
  endpoint:
    path: /setup
    method: POST
    data_selector: result
    params: {}
- name: dmv_verification
  endpoint:
    path: /api/Check
    method: POST
    data_selector: records
- name: dmv_verification
  endpoint:
    path: /api/Check
    method: POST
    data_selector: profiles
- name: sex_offender_check
  endpoint:
    path: /api/Check
    method: POST
    data_selector: profiles
- name: sex_offender_check
  endpoint:
    path: /api/Check
    method: POST
    data_selector: profiles
- name: criminal_records
  endpoint:
    path: /api/Check
    method: POST
    data_selector: Profiles
    params: {}
- name: ofac_check
  endpoint:
    path: /api/Check
    method: POST
    data_selector: profiles
- name: criminal_records
  endpoint:
    path: /api/Check
    method: POST
    data_selector: Profiles
    params: {}
- name: ofac_check
  endpoint:
    path: /Check
    method: POST
    data_selector: profiles
- name: pep_request
  endpoint:
    path: /Check
    method: POST
    data_selector: profiles
    params: {}
- name: pep_service
  endpoint:
    path: /api/Check
    method: POST
    data_selector: profiles
    params: {}
- name: every_politician_check
  endpoint:
    path: /Check
    method: POST
    data_selector: profiles
    params: {}
- name: every_politician_service
  endpoint:
    path: /api/Check
    method: POST
    data_selector: profiles
- name: available_services
  endpoint:
    path: /api/Customer/services
    method: GET
    data_selector: records
- name: check_with_multiple_services
  endpoint:
    path: /api/Check
    method: POST
    data_selector: profiles
- name: billable_request
  endpoint:
    path: /screening/billing-policy.html
    method: GET
    data_selector: Success
    params: {}
- name: available_services
  endpoint:
    path: /api/Customer/services
    method: GET
    data_selector: ''
    params: {}
- name: check_multiple_services
  endpoint:
    path: /api/Check
    method: POST
    data_selector: ''
    params: {}
- name: dmv_verification
  endpoint:
    path: /screening/dmv/dldv.html
    method: POST
    data_selector: profiles
- name: dmv_verification
  endpoint:
    path: /screening/dmv/dldv
    method: POST
    data_selector: profiles
    params: {}
- name: identifraud_response
  endpoint:
    path: /screening/identifraud/identifraud-full-response.html
    method: GET
    data_selector: profiles
- name: dmv_verification
  endpoint:
    path: /screening/dmv/dldv.html
    method: GET
    data_selector: profiles
- name: verificationResult
  endpoint:
    path: /screening/identifraud
    method: GET
    data_selector: data
- name: identifraud_response
  endpoint:
    path: /screening/identifraud/identifraud-full-response.html
    method: GET
    data_selector: profiles
- name: verification_result
  endpoint:
    path: /identifraud/verification
    method: POST
    data_selector: data
- name: identifraud_test_cases
  endpoint:
    path: /screening/identifraud/identifraud-test-cases
    method: POST
    data_selector: profiles
    params: {}
- name: fail_profile
  endpoint:
    path: /fail/profile
    method: POST
    data_selector: '[]'
- name: needs_further_review_profile
  endpoint:
    path: /needs-further-review
    method: POST
    data_selector: profiles
    params: {}
- name: identifraud_test
  endpoint:
    path: /screening/identifraud/identifraud-test-cases
    method: POST
    data_selector: profiles
- name: fail_profile
  endpoint:
    path: /fail/profile
    method: POST
    data_selector: profiles
    params: {}
- name: match_profile
  endpoint:
    path: /screening/sex-offender
    method: POST
    data_selector: profiles
    params: {}
- name: needs_further_review_profile
  endpoint:
    path: /needs_further_review
    method: POST
    data_selector: profiles
- name: match_profile
  endpoint:
    path: /screening/cr
    method: POST
    data_selector: profiles
    params: {}
- name: PEP Screening
  endpoint:
    path: /screening/pep
    method: POST
    data_selector: profiles
- name: Criminal Background Check
  endpoint:
    path: /screening/criminal-background-check
    method: POST
    data_selector: profiles
    params: {}
- name: match_profile
  endpoint:
    path: /screening/ofac-test-cases
    method: POST
    data_selector: profiles
- name: match_profile
  endpoint:
    path: /screening/pep
    method: POST
    data_selector: profiles
- name: custom_list
  endpoint:
    path: /Check
    method: POST
    data_selector: profiles
    params: {}
- name: custom_list_check
  endpoint:
    path: /Check
    method: POST
    data_selector: profiles
- name: locations
  endpoint:
    path: /api/locations
    method: GET
    params: {}
- name: history_log
  endpoint:
    path: /api/HistoryLog
    method: GET
    params: {}
- name: locations
  endpoint:
    path: /api/locations
    method: GET
    data_selector: records
- name: history_log
  endpoint:
    path: /api/HistoryLog
    method: GET
    data_selector: items
notes:
- When setting up a device to use both the Camera Scanning SDK and the ID Parsing
  SDK, both SDKs need to be activated separately.
- The Camera Scanning SDK and ID Parsing SDKs require two separate Registration Keys
  which needs to be applied.
- DIVE API option allows web application design for document verification.
- DIVE Online option provides implementation options including 'No Code Option'.
- Data is encrypted on our servers, decoded via proprietary algorithm before the data
  is sent back to your software application.
- In order to receive the License Key send an email to support@idscan.net with the
  Bundle ID.
- To obtain a license key, please email your application’s package name to support@idscan.net.
- need to replace ** LICENSE KEY ** by your **License Key**.
- When setting up a device to use both the Multiscan SDK and the ID Parsing SDK, both
  SDKs need to be activated separately.
- Need to replace ** PDF417 LICENSE KEY ** by your License Key for PDF417 component
  and ** MRZ LICENSE KEY ** by your License Key for MRZ component.
- You can use one or more components at the same time.
- When testing your application locally any license key you use in your configuration
  will work when running your application at localhost
- The image file types can all be base 64 encoded and then submitted to the DIVE API
  for processing.
- Images can be no more than 1500 pixels
- The body of any request will be limited to 10 Megabytes in size
- Pixel Density can be no less than 96dpi (150 dpi recommended)
- JPEG compression can be no more than 15 percent
- The DIVE API server cluster is hosted in IDScan.net’s secure cloud environment
- The DIVE API server cluster may also be hosted within a customer’s Private Cloud/On
  Prem environment
- All data in transit is secured via HTTPS connection
- Request keys must be obtained from IDScan.net support for authentication.
- HTTPS connection secures all data in transit both to and from the DIVE API server
- Request IDScan.net support for a public and secret key to authenticate requests
  to DIVE Web Service.
- A license key is required to use the IDScan.net Web Library.
- Obtain a Copy of Your Public Key
- Obtain a Copy of Your Secret Key
- Obtain a Copy of Your Web Library License Key
- Submissions that have failed will be in the table available for review for from
  0 to 30 days depending on the configured value.
- The License Key you were provided by IDScan.net will be used in your Client Side
  Application.
- During testing you can host your application at localhost with any License Key no
  matter what domain it is configured to be used with.
- 'How Many Days Should DIVE Retain Data Before it is Purged: 0 Days (Purged Immediately)
  or 365 Days (Longest Configurable Amount of Time DIVE will Store Data)'
- 'How Many Repeated Submissions are Allowed before Images will be Rejected: 3 (Minimum)
  or 10 (Maximum)'
- 'How Many Previous Submissions Should be Searched for a Repeated Submission: 1000
  (Minimum) or 5000 (Maximum)'
- 'How Many Days Should Images That Have Been Found to be Suspicious be Rejected:
  1 Day (Minimum) or 31 Days (Maximum)'
- The backend application will be required to use the secret key IDScan.net has provided
  you.
- Version 2 simplifies configuration settings.
- Configuration settings for document types and steps are combined in Version 2.
- Version 2 combines the types array and the steps array into a new array.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Additional third party verification checks can be added for a fee.
- These third party checks can be enabled in the DIVE API Web Portal in the Settings
  section.
- Uses the secret key for authentication.
- Uses the secret key
- Upload documents to the DIVE server for authentication
- Do not share your secret API keys in publicly accessible areas such as GitHub, client-side
  code, and so forth.
- This setting allows for modifying the request configuration from the DIVE Web Portal
  defaults.
- Configuration settings that control image processing include isBackOrSecondImageProcessingEnabled,
  isFaceMatchEnabled, and isOCREnabled.
- Fields in the overriddenSettings object correspond to settings in the DIVE Web Portal.
- Requests made with more than just white light images would be passed along to the
  /v4/authentication endpoint.
- Only the required images need to be included in the request based on the configuration
  settings.
- Requires setup of OAuth2 for access
- The document fields take precedence from the Barcode over the OCR data.
- In true mode, the wrapper stops documents validation.
- Required setup of connected app in api
- Some objects may return nulls in deeply nested fields
- An API key is necessary to make requests to the DIVE Online Web API
- The callbackUrl field is optional and must match one of the callback URLs configured
  in the DIVE Online Web Portal
- URL must be valid and the application must accept POST requests
- We have a retry policy set to 10 retries before considering a webhook endpoint unreachable
- Every endpoint requires a bearer token in the Authorization header.
- Every endpoint in the DIVE Online Web API requires authentication.
- Share your application's bundle id with IDScan.net support
- IDScan.net support will then share with you a License key and a DIVE API Secret
  key
- Share your application's package name with IDScan.net support
- The client side application can be built using any popular single page app framework
  or using vanilla javascript as well.
- Setup of connected app in IDScan.net required for authentication.
- New users of the iOS Parsing SDK should use Version 2.
- Version 2 of the iOS parser will still work with the camera scanning SDK.
- Existing users on version one interested in these fields should reach out to support@idscan.net
  for a key replacement with the email containing their existing PARSING key(s).
- Please contact sales@idscan.net if you are a new user and need to retrieve a trial
  license.
- This feature requires enabling in the license given from IDScan.net
- As of v16.2507.28.2 the .NET 4.0 version of the ID Parsing SDK will no longer be
  supported with updates
- The license file must be added to resources. And set 'Copy to output directory'
  - Always copy
- Request a trial license key by emailing support@idscan.net.
- The 'services' field is an array of IDs. Each ID is of a service that the client
  would like to run on the supplied data.
- For DMV service fields 'idType' and 'idNumber' in the request data should not be
  filled, please, use 'DocumentCategoryCode' and 'DriverLicenseNumber' fields instead.
- The 'services' field is an array of IDs for services to run on the supplied data.
- The 'services' field should specify which services to run; an empty array will run
  all enabled services.
- Obtain a License Key by emailing support@idscan.net with the Package Name.
- If you have already installed version before 1.28.4 you have to remove it from the
  project.
- When the services field is null or is an empty array all the services your account
  has enabled will run. We do not recommend submitting request in this way.
- The 'services' field is an array of IDs.
- To run the Sex Offender Registry Service include - '3ACCF2A9-2E52-4675-B546-7C3676897C3C'.
- To run the Sex Offender Registry Service include - '3ACCF2A9-2E52-4675-B546-7C3676897C3C'
- When the 'services' field is null or is an empty array all the services your account
  has enabled will run.
- To run the OFAC Service include - "D0F7EE7A-4CCA-4807-A779-F77EB1501EED"
- We do not recommend submitting requests in this way. We recommend being explicit
  about which services you would like to run.
- The 'services' field is required and should include specific service IDs.
- The services field is an array of IDs. Each ID is of a service that the client would
  like to run on the supplied data.
- To run the PEP Service include - '4DF86C8E-B53E-49D6-B75D-C1F2FFCBC1E5'
- To have multiple screening services run during a single request, be explicit about
  which services you would like to run.
- Users will have access to both their test tokens and to their live tokens.
- Test token will never have any charge associated with its use.
- If the 'services' parameter is missed, the check will be performed on all services
  that are enabled for your account.
- 'If your request is processed successfully, field `Success`: true and there''s no
  error message in the field ''error'', you will be charged.'
- 'If you get any errors in your response and the field `Success`: false, you will
  NOT be charged.'
- Test requests are free, so you will always be sure that your integration is successful.
- Test requests are free, ensuring integration success
- Authenticate a consumer by personal data
- The scoring can be applied to each field in a way that will indicate whether the
  address or name of date of birth was able to be verified. We recommend using 70
  as a threshold to indicate signs of a field being fraudulent.
- No fraud has been reported for the matched consumer
- Date of Birth contains an invalid year and has been removed
- Current Zip Code contains some invalid characters and they have been removed
- Our service relies on publicly available data.
- Some fields may return null values.
- Ensure the request data is formatted correctly to avoid errors.
- Our service relies on publicly available data
- To run the Custom List Service include - 'AED0308E-209E-46A1-9CF5-5171DA0215B1'
- To run the Custom List Service include - "AED0308E-209E-46A1-9CF5-5171DA0215B1"
- A single token can have more than one location.
- Locations are not required to use the a read-only token.
- A single token can have more than one location. Locations are not required to use
  the a read-only token.
errors:
- 'ERROR_RECOGNITION: License Key invalid or expired or any internal error'
- 'ERROR_CAMERA_NOT_AVAILABLE: Device has no camera'
- 'ERROR_INVALID_CAMERA_NUMBER: Invalid camera number is selected'
- 'ERROR_INVALID_CAMERA_ACCESS: Application cannot access the camera'
- 'ERROR_RECOGNITION: License Key invalid or expired or any internal error.'
- 'ERROR_CAMERA_NOT_AVAILABLE: device has no camera.'
- 'ERROR_INVALID_CAMERA_NUMBER: invalid camera number is selected.'
- 'ERROR_INVALID_CAMERA_ACCESS: application cannot access the camera.'
- 'ERROR_RECOGNITION: internal error.'
- 'ERROR_INVALID_LICENSE_KEY: License Key is invalid.'
- 'ERROR_INVALID_LICENSE_KEY: **License Key** is invalid.'
- In order to receive the 'PDF417 license Key for Android' or 'MRZ license Key for
  Android' send an email to support@idscan.net with the app’s Package Name or Bundle
  ID.
- 'ERROR_RECOGNITION: internal error'
- 'ERROR_CAMERA_NOT_AVAILABLE: device has no camera'
- 'ERROR_INVALID_CAMERA_NUMBER: invalid camera number is selected'
- 'ERROR_INVALID_CAMERA_ACCESS: application cannot access the camera'
- License key misconfigured
- License key expired
- License key's configured URL does not match the URL where it is hosted
- License key has been entered incorrectly into your Web Library's configuration
- License key expires
- License key's configured URL does not match the URL where the application is being
  hosted
- 'Warning: MRZ was not found.'
- 'Warning: MRZ data could not be read. Try taking another image.'
- 'Warning: Barcode not found.'
- 'Warning: Barcode data could not be read.<br/>Try taking a higher quality image.'
- HEIC file incorrupted
- 'File Type Error. Supported types: bmp, gif, jpg, png, tif, webp.'
- 'File Type Error: Only jpeg, png and heic images are supported.'
- A device with a camera must be used to capture this image
- Document not recognized as required document type
- 'Warning: The document in the photo is too small, bring it closer'
- 'Warning: The image isn''t recognized as the front side of the chosen document type'
- 'Warning: The document''s side isn''t recognized as the back side of the chosen
  document type'
- 'Warning: A person''s face was not found in captured image'
- 'Warning: No face is found on the front of the document'
- Manual upload is disabled
- We're sorry, but there was an issue capturing and submitting the images of your
  document. Please try again
- Not found
- No camera was found on your device
- Grant permission for the browser to access the device camera <br/> or choose the
  Manual Upload option
- Camera is not available at the moment
- Camera is already in use
- Your browser is not supported
- An unsuitable camera
- The camera on your device is unsuitable for our application (dual camera, wide-angle
  camera, etc.)
- The resolution of the uploaded image is too low
- The image is too blurry to be used
- Face area in the photo takes up too little space
- Document capture via manual upload is disabled in the configuration
- Please try again
- No camera was found on your device. <br/>Please use a different device or allow
  access to the camera for verification
- Not allowed
- Not available
- In use
- Not supported
- 'HttpError: 404, Server Side Problems, Please try again later'
- '404: Please try again later'
- 'Status: -1: The third party check has been disabled in the settings.'
- 'Status: 0: The third party check was configured to run, but failed to for some
  reason.'
- 'Status: 1: The services are configured to run, and were able to successfully complete.'
- 'Status: 2: The third party check has been configured to run but the customer has
  used all available DMV or IdentiFraud requests.'
- 'Status: 0: The status is returned if the third party check was configured to run,
  but failed to for some reason.'
- 'Status: 2: This status is used for several reasons: a) The third party check has
  been configured to run but the customer has used all available DMV or IdentiFraud
  requests.'
- 'code: string, message: string'
- 'Invalid request: Ensure all required images are included based on the configuration.'
- '400 Bad Request: Check request formatting'
- '401 Unauthorized: Verify authentication credentials'
- '404 Not Found: Ensure endpoint is correct'
- 'AdditionalCheckError: An error in the additional check.'
- 'AntiSpoofing: Antispoofing analysis has failed.'
- 'AsdkError: Unable to capture data from the document.'
- 'BackImageOrTrackStringNotPresentError: A Back image or a TrackString is not present.'
- 'BackImageOrTrackStringNotPresentError: A Back image for this document is required.'
- 'DocumentSidesMismatch: The back side of the document was uploaded instead of the
  front side of the document. Please check the uploaded images.'
- 'DocumentSidesMismatch: Provided sides belong to different documents.'
- 'BadRequest: The request contains an empty model.'
- 'CaptureFacesError: Error to capture faces.'
- 'CompareFacesError: Face comparison error'
- 'DocumentTypeError: The document type is required.'
- 'DocumentTypeMismatchError: The selected document type does not match the detected
  one.'
- 'DocumentVerifyServiceError: Unable to verify. Please use an alternative ID.'
- 'BadRequest: You need to enable at least one setting connected with the input content.
  Such as Face Matching, {VisualSetting(hasShufti)} or Processing of the Back image.'
- 'InternalError: Unable to process the request.'
- 'FaceDocNotDetectError: The face could not be located in the front image.'
- 'FaceDocNotDetectError: The face could not be located on the image.'
- 'FrontImageRequiredError: The Front image is required.'
- 'FaceImageRequiredError: The Face image is required.'
- 'TrackStringParserServiceError: Failed to parse the TrackString.'
- 'MrzIsNotPresentError: An image with MRZ is not present.'
- 'MrzOcrError: Unable to capture the Machine-Readable Zone (MRZ) from the image of
  the document.'
- 'NotFound: The document type was not recognized.'
- 'DocumentTypeError: This document type is not supported in this API.'
- 'NotSupportedCountry: This country is not supported.'
- 'OCRError: OCR has low confidence.'
- 'OCRError: Enabled OCR is required for this document.'
- 'OCRError: Unable to capture data from the front of the document.'
- 'Pdf417Error: Unable to decode Barcode from the image of the document.'
- 'PreProcessingError: Error during the pre-processing (maybe low quality).'
- 'PreProcessingError: The uploaded image does not have data for {parsingType} parsing.
  Check image quality or upload another image.'
- 'ProhibitedRegion: Validation from your region is prohibited.'
- 'QualityWarning: Quality warning is detected.'
- 'RequestAlreadyProcessed: This request has already been processed.'
- 'RequestError: The request cannot be created.'
- 'RequestExpired: This request has expired.'
- 'SignatureNotFound: The signature has not been found.'
- 'SuspiciousActivityWarning: Suspicious Activity was detected.'
- 'NotFound: The document template could not be found. Please try submitting a different
  document or a different document type, such as a Driver''s License, Passport, or
  International ID.'
- '401 Unauthorized: Ensure the API token is included in the Authorization header'
- 'Service error: Check webhook endpoint and payload'
- '200: Request passed verification threshold.'
- '401: Unauthorized access, check your token.'
- '200: Request has passed the threshold scoring.'
- '400: Bad Request - Invalid parameters or data.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check that required fields are included and properly formatted.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '200: Your subscription to Screening service <ServiceName> has expired. Please contact
  IDScan.net billing department at 888.430.8936 or billing@idscan.net'
- '400: The FirstName field is required.'
- '400: The LastName field is required.'
- '401: Unauthorized'
- '400: Required fields in your request are missing'
- '401: Unauthorized - Ensure the Authorization header in your request exists'
- 'Common Errors: Check documentation for error handling.'
- '200: <StateName> state is not yet supported by DMV Data Verification service. Check
  back later.'
- '200: <StateName> state server is temporarily unavailable. Please, try again later'
- '200: An error has occurred while processing your request, please contact us'
- '200: Unable to complete request, please contact us'
- '401 Unauthorized: Recheck API key or token expiration'
- 'Common Errors: Refer to the common errors section for troubleshooting.'
- Low Confidence Partial Match
- No Match / With Detail
- No Match / No Detail
- Address field should contain street
- Service unavailable. Please try again later.
- 'Common Errors: Refer to the respective sections for specific errors.'
- Service Sex offender unavailable
- 'InvalidRequest: Check the request data for correct field values.'
- 'ServiceUnavailable: Try again later or contact support.'
- Service is unavailable, please contact us
- Unable to complete request, please contact us
- There was an error with your check, please contact us
- An unexpected error has occurred, please contact us
auth_info:
  mentioned_objects: []
client:
  base_url: https://idscan.net
  auth:
    type: oauth2
source_metadata: null
