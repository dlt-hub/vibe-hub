resources:
- name: drf-spectacular
  endpoint:
    path: /drf-spectacular/
    method: GET
- name: drf-yasg
  endpoint:
    path: /drf-yasg/
    method: GET
- name: ProfileList
  endpoint:
    path: /profile-list
    method: GET
    data_selector: profiles
    params: {}
- name: ProfileDetail
  endpoint:
    path: /profile-detail/{pk}
    method: GET
    data_selector: profile
    params: {}
- name: users
  endpoint:
    path: /api-auth/
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /users/
    method: GET
    data_selector: results
- name: groups
  endpoint:
    path: /groups/
    method: GET
    data_selector: results
- name: users
  endpoint:
    path: /api-auth/
    method: GET
    data_selector: records
    params: {}
- name: snippets
  endpoint:
    path: /snippets/
    method: GET
    data_selector: records
    params: {}
- name: snippet_detail
  endpoint:
    path: /snippets/<int:pk>/
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users/
    method: GET
    data_selector: results
- name: groups
  endpoint:
    path: /groups/
    method: GET
    data_selector: results
- name: snippets
  endpoint:
    path: /snippets/
    method: GET
    data_selector: ''
    params: {}
- name: snippet_detail
  endpoint:
    path: /snippets/<int:pk>/
    method: GET
    data_selector: ''
    params: {}
- name: snippets
  endpoint:
    path: /snippets/
    method: GET
    data_selector: ''
    params: {}
- name: snippet_detail
  endpoint:
    path: /snippets/<int:pk>/
    method: GET
    data_selector: ''
    params: {}
- name: snippets
  endpoint:
    path: /snippets/
    method: GET
    data_selector: snippets
    params: {}
- name: snippet_detail
  endpoint:
    path: /snippets/<int:pk>/
    method: GET
    data_selector: snippet
    params: {}
- name: snippets
  endpoint:
    path: /snippets/
    method: GET
    data_selector: records
    params: {}
- name: snippet_detail
  endpoint:
    path: /snippets/<int:pk>/
    method: GET
    data_selector: records
    params: {}
- name: snippet_list
  endpoint:
    path: /snippets/
    method: GET
    data_selector: serializer.data
    params: {}
- name: snippet_detail
  endpoint:
    path: /snippets/<int:pk>/
    method: GET
    data_selector: serializer.data
    params: {}
- name: snippets
  endpoint:
    path: /snippets/
    method: GET
    data_selector: records
    params: {}
- name: snippet_detail
  endpoint:
    path: /snippets/<int:pk>/
    method: GET
    data_selector: records
    params: {}
- name: snippets
  endpoint:
    path: /snippets/
    method: POST
    data_selector: detail
- name: users
  endpoint:
    path: /users/
    method: GET
    data_selector: snippets
- name: snippet_list
  endpoint:
    path: /snippets/
    method: GET
    data_selector: snippets
    params: {}
- name: snippet_detail
  endpoint:
    path: /snippets/<int:pk>/
    method: GET
    data_selector: snippet
    params: {}
- name: snippets
  endpoint:
    path: /snippets/
    method: POST
    data_selector: detail
    params: {}
- name: users
  endpoint:
    path: /users/
    method: GET
    data_selector: snippets
    params: {}
- name: users
  endpoint:
    path: /users/
    method: GET
    data_selector: results
- name: snippets
  endpoint:
    path: /snippets/
    method: GET
    data_selector: results
- name: snippet
  endpoint:
    path: snippets/
    method: GET
- name: user
  endpoint:
    path: users/
    method: GET
- name: snippets
  endpoint:
    path: /snippets/
    method: GET
    data_selector: list
    params: {}
- name: snippets_detail
  endpoint:
    path: /snippets/<int:pk>/
    method: GET
    data_selector: retrieve
    params: {}
- name: users
  endpoint:
    path: /users/
    method: GET
    data_selector: list
    params: {}
- name: users_detail
  endpoint:
    path: /users/<int:pk>/
    method: GET
    data_selector: retrieve
    params: {}
- name: snippet
  endpoint:
    path: /snippets/
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /users/
    method: GET
    data_selector: records
- name: ListUsers
  endpoint:
    path: /users
    method: GET
    data_selector: usernames
- name: User
  endpoint:
    path: /users/
    method: GET
    data_selector: queryset
    params: {}
- name: User
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: JSONParser
  endpoint:
    path: /parsers/json
    method: GET
    data_selector: request.data
    params: {}
- name: FormParser
  endpoint:
    path: /parsers/form
    method: GET
    data_selector: request.data
    params: {}
- name: MultiPartParser
  endpoint:
    path: /parsers/multipart
    method: GET
    data_selector: request.data
    params: {}
- name: FileUploadParser
  endpoint:
    path: /parsers/fileupload
    method: GET
    data_selector: request.data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: records
    params: {}
- name: JSONParser
  endpoint:
    path: /parsers/json
    method: GET
    data_selector: request.data
    params: {}
- name: FormParser
  endpoint:
    path: /parsers/form
    method: GET
    data_selector: request.data
    params: {}
- name: MultiPartParser
  endpoint:
    path: /parsers/multipart
    method: GET
    data_selector: request.data
    params: {}
- name: FileUploadParser
  endpoint:
    path: /parsers/file-upload
    method: GET
    data_selector: request.data
    params: {}
- name: CustomParser
  endpoint:
    path: /parsers/custom
    method: GET
    data_selector: request.data
    params: {}
- name: user_count
  endpoint:
    path: /api/users_count
    method: GET
    data_selector: content
    params: {}
- name: user_detail
  endpoint:
    path: /api/user_detail
    method: GET
    data_selector: user
    params: {}
- name: YAML
  endpoint:
    path: /installation-configuration
    method: POST
    data_selector: ''
    params: {}
- name: XML
  endpoint:
    path: /installation-configuration_1
    method: POST
    data_selector: ''
    params: {}
- name: JSONP
  endpoint:
    path: /installation-configuration_2
    method: POST
    data_selector: ''
    params: {}
- name: MessagePack
  endpoint:
    path: /installation-configuration_3
    method: POST
    data_selector: ''
    params: {}
- name: 'Microsoft Excel: XLSX (Binary Spreadsheet Endpoints)'
  endpoint:
    path: /installation-configuration_3
    method: POST
    data_selector: ''
    params: {}
- name: CSV
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: UltraJSON
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: CamelCase JSON
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Pandas (CSV, Excel, PNG)
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: LaTeX
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: YAML
  endpoint:
    path: /djangorestframework-yaml
    method: GET
    data_selector: data
    params: {}
- name: XML
  endpoint:
    path: /djangorestframework-xml
    method: GET
    data_selector: data
    params: {}
- name: JSONP
  endpoint:
    path: /djangorestframework-jsonp
    method: GET
    data_selector: data
    params: {}
- name: MessagePack
  endpoint:
    path: /djangorestframework-msgpack
    method: GET
    data_selector: data
    params: {}
- name: XLSX
  endpoint:
    path: /drf-excel
    method: GET
    data_selector: data
    params: {}
- name: CSV
  endpoint:
    path: /djangorestframework-csv
    method: GET
    data_selector: data
    params: {}
- name: UltraJSON
  endpoint:
    path: /drf_ujson2
    method: GET
    data_selector: data
    params: {}
- name: CamelCase JSON
  endpoint:
    path: /djangorestframework-camel-case
    method: GET
    data_selector: data
    params: {}
- name: Pandas
  endpoint:
    path: /django-rest-pandas
    method: GET
    data_selector: data
    params: {}
- name: LaTeX
  endpoint:
    path: /rest-framework-latex
    method: GET
    data_selector: data
    params: {}
- name: Comment
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
- name: Account
  endpoint:
    path: /accounts/
    method: GET
    data_selector: data
    params: {}
- name: Comment
  endpoint:
    path: /serializers/Comment
    method: POST
    data_selector: data
    params: {}
- name: User
  endpoint:
    path: /serializers/User
    method: POST
    data_selector: data
    params: {}
- name: Comment
  endpoint:
    path: /comments/
    method: GET
    data_selector: comments
    params: {}
- name: Account
  endpoint:
    path: /accounts
    method: GET
- name: Account
  endpoint:
    path: /accounts
    method: GET
    data_selector: records
- name: Book
  endpoint:
    path: /books
    method: GET
    data_selector: records
- name: Comment
  endpoint:
    path: /comments
    method: GET
    data_selector: records
    params: {}
- name: integer_field
  endpoint:
    path: /api/integer_field
    method: GET
    data_selector: fields
    params: {}
- name: float_field
  endpoint:
    path: /api/float_field
    method: GET
    data_selector: fields
    params: {}
- name: decimal_field
  endpoint:
    path: /api/decimal_field
    method: GET
    data_selector: fields
    params: {}
- name: datetime_field
  endpoint:
    path: /api/datetime_field
    method: GET
    data_selector: fields
    params: {}
- name: date_field
  endpoint:
    path: /api/date_field
    method: GET
    data_selector: fields
    params: {}
- name: time_field
  endpoint:
    path: /api/time_field
    method: GET
    data_selector: fields
    params: {}
- name: duration_field
  endpoint:
    path: /api/duration_field
    method: GET
    data_selector: fields
    params: {}
- name: choice_field
  endpoint:
    path: /api/choice_field
    method: GET
    data_selector: fields
    params: {}
- name: multiple_choice_field
  endpoint:
    path: /api/multiple_choice_field
    method: GET
    data_selector: fields
    params: {}
- name: file_field
  endpoint:
    path: /api/file_field
    method: GET
    data_selector: fields
    params: {}
- name: image_field
  endpoint:
    path: /api/image_field
    method: GET
    data_selector: fields
    params: {}
- name: list_field
  endpoint:
    path: /api/list_field
    method: GET
    data_selector: fields
    params: {}
- name: dict_field
  endpoint:
    path: /api/dict_field
    method: GET
    data_selector: fields
    params: {}
- name: json_field
  endpoint:
    path: /api/json_field
    method: GET
    data_selector: fields
    params: {}
- name: IntegerField
  endpoint:
    path: /fields/integer
    method: GET
    data_selector: IntegerField
    params: {}
- name: FloatField
  endpoint:
    path: /fields/float
    method: GET
    data_selector: FloatField
    params: {}
- name: DecimalField
  endpoint:
    path: /fields/decimal
    method: GET
    data_selector: DecimalField
    params: {}
- name: DateTimeField
  endpoint:
    path: /fields/datetime
    method: GET
    data_selector: DateTimeField
    params: {}
- name: DateField
  endpoint:
    path: /fields/date
    method: GET
    data_selector: DateField
    params: {}
- name: TimeField
  endpoint:
    path: /fields/time
    method: GET
    data_selector: TimeField
    params: {}
- name: DurationField
  endpoint:
    path: /fields/duration
    method: GET
    data_selector: DurationField
    params: {}
- name: ChoiceField
  endpoint:
    path: /fields/choice
    method: GET
    data_selector: ChoiceField
    params: {}
- name: MultipleChoiceField
  endpoint:
    path: /fields/multiplechoice
    method: GET
    data_selector: MultipleChoiceField
    params: {}
- name: FileField
  endpoint:
    path: /fields/file
    method: GET
    data_selector: FileField
    params: {}
- name: ImageField
  endpoint:
    path: /fields/image
    method: GET
    data_selector: ImageField
    params: {}
- name: ListField
  endpoint:
    path: /fields/list
    method: GET
    data_selector: ListField
    params: {}
- name: DictField
  endpoint:
    path: /fields/dict
    method: GET
    data_selector: DictField
    params: {}
- name: JSONField
  endpoint:
    path: /fields/json
    method: GET
    data_selector: JSONField
    params: {}
- name: DRF - Access Policy
  endpoint:
    path: https://github.com/rsinger86/drf-access-policy
    method: GET
- name: Composed Permissions
  endpoint:
    path: https://github.com/niwibe/djangorestframework-composed-permissions
    method: GET
- name: REST Condition
  endpoint:
    path: https://github.com/caxap/rest_condition
    method: GET
- name: DRY Rest Permissions
  endpoint:
    path: https://github.com/FJNR-inc/dry-rest-permissions
    method: GET
- name: Django Rest Framework Roles
  endpoint:
    path: https://github.com/computer-lab/django-rest-framework-roles
    method: GET
- name: Rest Framework Roles
  endpoint:
    path: https://github.com/Pithikos/rest-framework-roles
    method: GET
- name: Django REST Framework API Key
  endpoint:
    path: https://florimondmanca.github.io/djangorestframework-api-key/
    method: GET
- name: Django Rest Framework Role Filters
  endpoint:
    path: https://github.com/allisson/django-rest-framework-role-filters
    method: GET
- name: Django Rest Framework PSQ
  endpoint:
    path: https://github.com/drf-psq/drf-psq
    method: GET
- name: user_list
  endpoint:
    path: /user_list
    method: GET
    data_selector: user_feed
    params: {}
- name: profile
  endpoint:
    path: /profile
    method: GET
    data_selector: user_feed
    params: {}
- name: post
  endpoint:
    path: /post
    method: GET
    data_selector: content
    params: {}
- name: accounts
  endpoint:
    path: /accounts/
    method: GET
    data_selector: results
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: OPTIONS
    data_selector: actions
- name: SchemaGenerator
  endpoint:
    path: /api/schema-generator
    method: GET
    data_selector: schema
    params: {}
- name: AutoSchema
  endpoint:
    path: /api/auto-schema
    method: GET
    data_selector: components
    params: {}
- name: page_number_pagination
  endpoint:
    path: DEFAULT_PAGINATION_CLASS
    method: GET
    data_selector: records
    params:
      PAGE_SIZE: 100
- name: limit_offset_pagination
  endpoint:
    path: DEFAULT_PAGINATION_CLASS
    method: GET
    data_selector: records
    params: {}
- name: cursor_pagination
  endpoint:
    path: DEFAULT_PAGINATION_CLASS
    method: GET
    data_selector: records
    params:
      PAGE_SIZE: 100
- name: Schema
  endpoint:
    path: /openapi
    method: GET
- name: format_suffix_patterns
  endpoint:
    path: /format_suffix_patterns
    method: GET
    data_selector: records
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: OPTIONS
    data_selector: name
    params: {}
- name: SchemaGenerator
  endpoint:
    path: /openapi
    method: GET
- name: Schema
  endpoint:
    path: /openapi
    method: GET
    data_selector: schema
- name: format_suffix_patterns
  endpoint:
    path: /format_suffix_patterns
    method: GET
    data_selector: patterns
    params: {}
- name: reverse
  endpoint:
    path: /reverse
    method: GET
- name: reverse_lazy
  endpoint:
    path: /reverse_lazy
    method: GET
- name: DEFAULT_RENDERER_CLASSES
  endpoint:
    path: /api/renderers
    method: GET
    data_selector: renderers
- name: DEFAULT_PARSER_CLASSES
  endpoint:
    path: /api/parsers
    method: GET
    data_selector: parsers
- name: DEFAULT_AUTHENTICATION_CLASSES
  endpoint:
    path: /api/authentication
    method: GET
    data_selector: authentication_classes
- name: DEFAULT_PERMISSION_CLASSES
  endpoint:
    path: /api/permissions
    method: GET
    data_selector: permission_classes
- name: DEFAULT_THROTTLE_CLASSES
  endpoint:
    path: /api/throttles
    method: GET
    data_selector: throttle_classes
- name: DEFAULT_CONTENT_NEGOTIATION_CLASS
  endpoint:
    path: /api/content-negotiation
    method: GET
    data_selector: content_negotiation_class
- name: DEFAULT_SCHEMA_CLASS
  endpoint:
    path: /api/schema
    method: GET
    data_selector: schema_class
- name: DEFAULT_RENDERER_CLASSES
  endpoint:
    path: /settings
    method: GET
    data_selector: DEFAULT_RENDERER_CLASSES
- name: DEFAULT_PARSER_CLASSES
  endpoint:
    path: /settings
    method: GET
    data_selector: DEFAULT_PARSER_CLASSES
- name: DEFAULT_AUTHENTICATION_CLASSES
  endpoint:
    path: /settings
    method: GET
    data_selector: DEFAULT_AUTHENTICATION_CLASSES
- name: DEFAULT_PERMISSION_CLASSES
  endpoint:
    path: /settings
    method: GET
    data_selector: DEFAULT_PERMISSION_CLASSES
- name: DEFAULT_THROTTLE_CLASSES
  endpoint:
    path: /settings
    method: GET
    data_selector: DEFAULT_THROTTLE_CLASSES
- name: DEFAULT_CONTENT_NEGOTIATION_CLASS
  endpoint:
    path: /settings
    method: GET
    data_selector: DEFAULT_CONTENT_NEGOTIATION_CLASS
- name: DEFAULT_SCHEMA_CLASS
  endpoint:
    path: /settings
    method: GET
    data_selector: DEFAULT_SCHEMA_CLASS
- name: third_party_packages
  endpoint:
    path: /third-party-packages
    method: GET
    data_selector: packages
- name: async_support
  endpoint:
    path: /async-support
    method: GET
    data_selector: async_packages
- name: authentication
  endpoint:
    path: /authentication
    method: GET
    data_selector: auth_packages
- name: permissions
  endpoint:
    path: /permissions
    method: GET
    data_selector: permission_packages
- name: serializers
  endpoint:
    path: /serializers
    method: GET
    data_selector: serializer_packages
- name: views
  endpoint:
    path: /views
    method: GET
    data_selector: view_packages
- name: routers
  endpoint:
    path: /routers
    method: GET
    data_selector: router_packages
- name: parsers
  endpoint:
    path: /parsers
    method: GET
    data_selector: parser_packages
- name: renderers
  endpoint:
    path: /renderers
    method: GET
    data_selector: renderer_packages
- name: filtering
  endpoint:
    path: /filtering
    method: GET
    data_selector: filtering_packages
- name: Third Party Packages
  endpoint:
    path: /third-party-packages
    method: GET
- name: Async Support
  endpoint:
    path: /async-support
    method: GET
- name: Authentication
  endpoint:
    path: /authentication
    method: GET
- name: Permissions
  endpoint:
    path: /permissions
    method: GET
- name: Filtering
  endpoint:
    path: /filtering
    method: GET
- name: OpenAPI schema support
  endpoint:
    path: /schema.json
    method: GET
    data_selector: schema
    params: {}
notes:
- Supporting internationalization is not optional. It must be a core feature.
- REST framework ships with translatable error messages.
- AJAX requests typically use SessionAuthentication.
- AJAX requests on a different site may need TokenAuthentication.
- 'Deprecation notice: REST framework''s built-in support for generating OpenAPI schemas
  is deprecated in favor of 3rd party packages that can provide this functionality
  instead.'
- REST framework is suitable for returning both API style responses, and regular HTML
  pages.
- Serializers can be used as HTML forms and rendered in templates.
- You can change the default language by using the standard Django LANGUAGE_CODE setting.
- You can turn on per-request language requests by adding LocalMiddleware to your
  MIDDLEWARE setting.
- When per-request internationalization is enabled, client requests will respect the
  Accept-Language header where possible.
- REST framework includes built-in translations for standard exception cases, and
  for serializer validation errors.
- If you want to use different string for parts of the response such as detail and
  non_field_errors then you can modify this behavior by using a custom exception handler.
- By default all available languages will be supported.
- If you only wish to support a subset of the available languages, use Django's standard
  LANGUAGES setting.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- AJAX requests on a different site typically need to use TokenAuthentication.
- Include valid CSRF tokens for any POST, PUT, PATCH or DELETE operations.
- Additionally, we include login URLs for the browsable API.
- Uses basic authentication to access API
- API returns HTML representation when accessed by a web browser.
- Handles arbitrary data. Works for 'POST', 'PUT' and 'PATCH' methods.
- Allows content negotiation to determine the correct content type.
- API can handle URLs with format suffixes for different content types.
- Only authenticated users may create snippets.
- Unauthenticated requests should have full read-only access.
- Default pagination class is PageNumberPagination with a page size of 10.
- Supports multiple authentication policies.
- REST framework provides flexible, per-request authentication.
- Requires token authentication.
- Only admin users are able to access this view.
- Allowing PUT as create operations is problematic, as it necessarily exposes information
  about the existence or non-existence of objects.
- Uses Django REST framework for routing and viewset management.
- Django REST framework allows you to combine the logic for a set of related views
  in a single class, called a ViewSet.
- Make sure to set the Content-Type header when sending data in an HTTP request.
- FileUploadParser should generally be the only parser set on an API view.
- When developing client applications always remember to make sure you're setting
  the Content-Type header when sending data in an HTTP request.
- The default set of parsers may be set globally using the DEFAULT_PARSER_CLASSES
  setting.
- Always remember to set the Content-Type header when sending data in an HTTP request.
- Make sure you're setting the Content-Type header when sending data in an HTTP request.
- REST framework includes a number of built in Renderer classes, that allow you to
  return responses with various media types.
- The basic process of content negotiation involves examining the request's `Accept`
  header, to determine which media types it expects in the response.
- Uses JSON as the main media type
- Supports multiple media types including JSON and HTML
- Serializers allow complex data such as querysets and model instances to be converted
  to native Python datatypes.
- The serializers in REST framework work very similarly to Django's Form and ModelForm
  classes.
- Serializer requires request context for generating fully qualified URLs.
- Serializers allow complex data such as querysets and model instances to be converted
  to native Python datatypes that can then be easily rendered into JSON, XML or other
  content types.
- The default `ModelSerializer` does not include support for writable nested representations.
- This is True by default, but can be set to False if you want to disallow empty lists
  as valid input.
- This is None by default, but can be set to a positive integer if you want to validate
  that the list contains no more than this number of elements.
- This is None by default, but can be set to a positive integer if you want to validate
  that the list contains no fewer than this number of elements.
- Serializer fields handle converting between primitive values and internal datatypes.
- Uses explicit validation in serializers
- Serializer fields are declared in fields.py
- Read-only fields are included in the API output, but should not be included in the
  input during create or update operations.
- Authentication needs to be pluggable.
- REST framework provides several authentication schemes out of the box.
- Permission checks are always run at the very start of the view, before any other
  code is allowed to proceed.
- The default permission policy may be set globally, using the DEFAULT_PERMISSION_CLASSES
  setting.
- REST Framework does not attempt to automatically optimize querysets passed to serializers
  in terms of select_related and prefetch_related since it would be too much magic.
- The cache_page decorator only caches the GET and HEAD responses with status 200.
- Some objects like Contact may return nulls in deeply nested fields
- The application-level throttling provided by REST framework is intended for implementing
  policies such as different business tiers and basic protections against service
  over-use.
- Permission checks are always run at the very start of the view.
- The default permission policy allows unrestricted access if not specified.
- Pagination can be turned off by setting the pagination class to None.
- The application-level throttling that REST framework provides should not be considered
  a security measure or protection against brute forcing or denial-of-service attacks.
- Deliberately malicious actors will always be able to spoof IP origins.
- Under high concurrency, built-in throttle implementations may allow a few extra
  requests through.
- Versioning is not enabled by default, and request.version will always return None
  unless configured.
- Some objects may return nulls in deeply nested fields
- REST framework includes a configurable mechanism for determining how your API should
  respond to OPTIONS requests.
- Built-in support for generating OpenAPI schemas is deprecated.
- REST framework's built-in support for generating OpenAPI schemas is deprecated in
  favor of 3rd party packages.
- The drf-proxy-pagination package includes a ProxyPagination class which allows to
  choose pagination class with a query parameter.
- The django-rest-framework-link-header-pagination package includes a LinkHeaderPagination
  class which provides pagination via an HTTP Link header as described in GitHub REST
  API documentation.
- Versioning is not enabled by default, and request.version will always return None.
- q values are not taken into account by REST framework when determining preference.
  The use of q values negatively impacts caching, and in the author's opinion they
  are an unnecessary and overcomplicated approach to content negotiation.
- 'Deprecation notice: REST framework''s built-in support for generating OpenAPI schemas
  is deprecated in favor of 3rd party packages.'
- REST framework's built-in support for generating OpenAPI schemas is deprecated.
- To generate a static schema, use the `generateschema` management command.
- By default the available formats are 'multipart' and 'json'.
- For compatibility with Django's existing RequestFactory the default format is 'multipart'.
- CSRF validation is not applied when using APIClient.
- Configuration is all namespaced inside a single Django setting, named REST_FRAMEWORK
- The default format used to make test requests may be set using the TEST_REQUEST_DEFAULT_FORMAT
  setting key.
- If you need to test requests using something other than multipart or json requests,
  you can do so by setting the TEST_REQUEST_RENDERER_CLASSES setting.
- Default html_cutoff value is 1000.
- Default html_cutoff_text is 'More than {count} items...'.
- Default exception_handler is 'rest_framework.views.exception_handler'.
- Default non_field_errors_key is 'non_field_errors'.
- Default url_field_name is 'url'.
- Default num_proxies is None.
- Configuration for REST framework is all namespaced inside a single Django setting,
  named REST_FRAMEWORK.
- Default html_cutoff value is 1000
- Default html_cutoff_text is 'More than {count} items...'
- Default exception_handler is 'rest_framework.views.exception_handler'
- Default non_field_errors_key is 'non_field_errors'
- Default url_field_name is 'url'
- Default num_proxies is None
- The browsable API is built with Twitter's Bootstrap (v 3.4.1), making it easy to
  customize the look-and-feel.
- No one can whistle a symphony; it takes a whole orchestra to play it.
- Encourages the creation of Third Party Packages to extend functionality.
- This release is considered a significant release to improve upstream support with
  Django and Python.
- Some of these may change the behaviour of existing features and pre-existing behaviour.
- Django REST framework is considered feature-complete.
- Documentation should be in American English.
- Breaking change in `read_only` plus `default` behaviour.
- Correct allow_null behaviour when required=False.
- Minor version numbers (0.0.x) are used for changes that are API compatible.
- Medium version numbers (0.x.0) may include API changes, in line with the deprecation
  policy.
- Major version numbers (x.0.0) are reserved for substantial project milestones.
- Django < 4.2 and Python < 3.8 no longer supported.
- 'Breaking Change: Alter `read_only` plus `default` behaviour.'
- Possible backwards compatibility break if you were relying on such fields being
  excluded from the outgoing representation.
- Django 5.0 and Python 3.12 support
- Dependency on pytz has been removed and deprecation warnings have been added
- The latest release now fully supports Django 4.0.
- Python 3.6+ is required.
- Added root_renderers argument to DefaultRouter.
- Minor version update to Twitter Bootstrap.
- The 3.10 release drops support for Python 2.
- 'Our supported Python versions are now: 3.5, 3.6, and 3.7.'
- 'Our supported Django versions are now: 1.11, 2.0, 2.1, and 2.2.'
- The latest release now fully supports Django 5.1 and the upcoming 5.2 LTS as well
  as Python 3.13.
- The current minimum versions of Django is now 4.2 and Python 3.9.
- The 3.9 release gives access to extra actions in the Browsable API, introduces composable
  permissions and built-in OpenAPI schema support.
- The latest release now fully supports Django 4.1, and drops support for Django 2.2.
- The 3.7 release focuses on improvements to schema generation and the interactive
  API documentation.
- REST framework 3.7 supports Django versions 1.10, 1.11, and 2.0 alpha.
- The coreapi library is required as a dependency for the API docs.
- Make sure to install the latest version (2.3.0 or above).
- REST framework 3.12 brings a handful of refinements to the OpenAPI schema generation,
  plus support for Django's new database-agnostic JSONField, and some improvements
  to the SearchFilter class.
- The 3.2 release is the first version to include an admin interface for the browsable
  API.
- There are some limitations to the AdminRenderer, in particular it is not yet able
  to handle list or dictionary inputs.
- The pagination API has been improved, making it both easier to use, and more powerful.
- Support for header-based pagination.
- The coreapi library is required as a dependency for the API docs. Make sure to install
  the latest version (2.3.0 or above).
- The client is not limited to usage with REST framework APIs, although it does currently
  only support loading CoreJSON API schemas.
- The 3.5 release is the second in a planned series that is addressing schema generation,
  hypermedia support, API client libraries, and finally realtime support.
- The 3.4 release is the first in a planned series that will be addressing schema
  generation, hypermedia support, API clients, and finally realtime support.
- The 3.4 release includes very limited deprecation or behavioral changes, and should
  present a straightforward upgrade.
- This release drops support for Django 1.5 and 1.6. Django 1.7, 1.8 or 1.9 are now
  required.
- This is an initial release and we do not yet have a public API for modifying the
  behavior or documentation on overriding the templates.
errors:
- '401 Unauthorized: Recheck user credentials'
- 'HTTP_400_BAD_REQUEST: Invalid request data.'
- 'HTTP_404_NOT_FOUND: Snippet does not exist.'
- Authentication credentials were not provided.
- 'HTTP 401 Unauthorized: Request not authenticated.'
- 'HTTP 403 Permission Denied: Request authenticated but not permitted.'
- '403 Forbidden: Permission denied.'
- '401 Unauthorized: Request was not successfully authenticated.'
- 'incorrect_type: Incorrect type. Expected a string, but got {input_type}'
- 'incorrect_format: Incorrect format. Expected `rgb(#,#,#)`.'
- 'out_of_range: Value out of range. Must be between 0 and 255.'
- HTTP/1.1 420 Enhance Your Calm
- HTTP 401 Unauthorized
- HTTP 403 Permission Denied
- '403 Forbidden: Permission check failed.'
- '401 Unauthorized: Authentication failed.'
- '420 Enhance Your Calm: HTTP/1.1 420 Enhance Your Calm'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 400 Bad Request
- 401 Unauthenticated
- 403 Forbidden
- 404 Not Found
- 405 Method Not Allowed
- 406 Not Acceptable
- 415 Unsupported Media Type
- 429 Too Many Requests
- 503 Service Temporarily Unavailable
- HTTP_400_BAD_REQUEST
- HTTP_401_UNAUTHORIZED
- HTTP_403_FORBIDDEN
- HTTP_404_NOT_FOUND
- HTTP_500_INTERNAL_SERVER_ERROR
- '405 Method Not Allowed: Method ''DELETE'' not allowed.'
- '400 Bad Request: A valid integer is required.'
- '401 Unauthenticated: Incorrect authentication.'
- HTTP_405_METHOD_NOT_ALLOWED
- HTTP_408_REQUEST_TIMEOUT
- HTTP_409_CONFLICT
- HTTP_429_TOO_MANY_REQUESTS
- HTTP_503_SERVICE_UNAVAILABLE
- 'AppRegistryNotReady: Ensure your Django app is ready before accessing it.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- request.DATA has been removed and its usage will result in an error. Use request.data
  instead.
- request.QUERY_PARAMS has been removed and its usage will result in an error. Use
  request.query_params instead.
auth_info:
  mentioned_objects:
  - User
  - Token
  - SessionAuthentication
  - BasicAuthentication
  - BaseAuthentication
  - AuthenticationFailed
client:
  base_url: https://www.django-rest-framework.org
  auth:
    type: token
source_metadata: null
