resources:
- name: GetPlayerTournamentListResponse_Tournament
  endpoint:
    path: /GetPlayerTournamentListResponse_Tournament
    method: GET
    data_selector: records
    params: {}
- name: GetPlayerTournamentDetailsResponse
  endpoint:
    path: /GetPlayerTournamentDetailsResponse
    method: GET
    data_selector: records
    params: {}
- name: player_tournaments
  endpoint:
    path: /player-tournaments
    method: GET
    data_selector: tournaments
    params:
      filterBy: live
      period: all
- name: player_tournament_details
  endpoint:
    path: /player-tournaments/{tournamentId}
    method: GET
    data_selector: tournament
    params: {}
- name: validate_access_code
  endpoint:
    path: /players/streaming-platform-account-linking-code
    method: PUT
    data_selector: null
    params: {}
- name: Admin API
  endpoint:
    path: /leaderboardsandtournaments/admin-api
    method: GET
    data_selector: records
- name: Game API
  endpoint:
    path: /leaderboardsandtournaments/game-api
    method: GET
    data_selector: records
- name: Admin API
  endpoint:
    path: /leaderboardsandtournaments/admin-api
    method: GET
- name: Game API
  endpoint:
    path: /leaderboardsandtournaments/game-api
    method: GET
- name: create_team_competition
  endpoint:
    path: /create_team_competition
    method: POST
    data_selector: competition_data
    params: {}
- name: list_team_competitions
  endpoint:
    path: /list_team_competitions
    method: GET
    data_selector: competitions
    params: {}
- name: view_competition_details
  endpoint:
    path: /view_competition_details
    method: GET
    data_selector: competition_details
    params: {}
- name: prizes
  endpoint:
    path: /leaderboardsandtournaments/manage-prizes
    method: GET
    data_selector: prizes
    params: {}
- name: Register and Authenticate the Player
  endpoint:
    path: /leaderboardsandtournaments/game-api-std-security.html
    method: GET
- name: Player enters the tournament
  endpoint:
    path: /leaderboardsandtournaments/game-api-enter-tournament.html
    method: GET
- name: Player competes in the tournament
  endpoint:
    path: /leaderboardsandtournaments/game-api-play-tournament.html
    method: GET
- name: Player exits the tournament
  endpoint:
    path: /leaderboardsandtournaments/game-api-exit-tournament.html
    method: GET
- name: Award Tournament Prizes
  endpoint:
    path: /leaderboardsandtournaments/in-game-prizes.html
    method: GET
- name: register_player
  endpoint:
    path: /players/auth
    method: POST
    data_selector: sessionId
- name: Get Tournaments
  endpoint:
    path: /tournaments
    method: GET
- name: Get Tournament Details
  endpoint:
    path: /tournaments/{tournamentId}
    method: GET
- name: Enter Tournament
  endpoint:
    path: /tournaments/{tournamentId}/enter
    method: POST
- name: Player Competes in the Tournament
  endpoint:
    path: /game-api-play-tournament
    method: POST
    data_selector: response
    params: {}
- name: Submit Score
  endpoint:
    path: /submit-score
    method: POST
    data_selector: response
    params: {}
- name: Get Match Details
  endpoint:
    path: /get-match-details
    method: GET
    data_selector: response
    params: {}
- name: Claim Prizes
  endpoint:
    path: /leaderboards/tournaments/prizes/claim
    method: POST
    data_selector: claimed_prizes
    params: {}
- name: Register Player
  endpoint:
    path: /leaderboardsandtournaments/game-api-ref.html#register-player
    method: POST
- name: Authenticate Player
  endpoint:
    path: /leaderboardsandtournaments/game-api-std-security.html#authenticate-the-player
    method: POST
- name: Get Tournaments
  endpoint:
    path: /leaderboardsandtournaments/game-api-ref.html#get-tournaments
    method: GET
- name: Get Tournament Details
  endpoint:
    path: /leaderboardsandtournaments/game-api-ref.html#get-tournament-details
    method: GET
- name: Get Team Details
  endpoint:
    path: /leaderboardsandtournaments/game-api-ref.html#get-team-details
    method: GET
    data_selector: teamDetails
    params: {}
- name: Enter Team Tournament
  endpoint:
    path: /leaderboardsandtournaments/game-api-ref.html#enter-tournament
    method: POST
    data_selector: enterTeamTournament
    params: {}
- name: Get Team Leaderboards
  endpoint:
    path: /leaderboardsandtournaments/game-api-ref.html#get-leaderboard
    method: GET
    data_selector: teamLeaderboard
    params: {}
- name: Claim Prizes
  endpoint:
    path: /leaderboardsandtournaments/game-api-ref.html#claim-prizes
    method: POST
    data_selector: claimPrizes
    params: {}
- name: Register Player
  endpoint:
    path: /register/player
    method: POST
- name: tournaments
  endpoint:
    path: /v1/tournaments
    method: GET
    data_selector: tournaments
    params:
      playerAttributes: '{"country":"US"}'
- name: matches
  endpoint:
    path: /v1/matches
    method: GET
    data_selector: matches
    params:
      playerAttributes: '{"country":"US"}'
- name: enterTournament
  endpoint:
    path: /v1/tournaments/enter
    method: POST
    data_selector: response
    params:
      playerAttributes: '{"country":"US"}'
- name: enterMatch
  endpoint:
    path: /v1/matches/enter
    method: POST
    data_selector: response
    params:
      playerAttributes: '{"country":"US"}'
- name: entry_requirements
  endpoint:
    path: /leaderboardsandtournaments/entry-requirements
    method: GET
    data_selector: requirements
    params: {}
- name: Submit Score
  endpoint:
    path: /submit-score
    method: POST
    data_selector: score
    params: {}
- name: Get Tournaments
  endpoint:
    path: /tournaments
    method: GET
    data_selector: tournaments
    params: {}
- name: Enter Tournament
  endpoint:
    path: /enter-tournament
    method: POST
    data_selector: entry
    params: {}
- name: Authenticate Player
  endpoint:
    path: /players/auth
    method: POST
- name: Get Tournaments
  endpoint:
    path: /tournaments
    method: GET
- name: Get Tournament Details
  endpoint:
    path: /tournaments/{tournamentId}
    method: GET
- name: Get Prize Details
  endpoint:
    path: /prizes/{prizeId}
    method: GET
- name: Enter Tournament
  endpoint:
    path: /tournaments/{tournamentId}/enter
    method: POST
- name: matches
  endpoint:
    path: /matches
    method: GET
    data_selector: matches
    params: {}
- name: match_details
  endpoint:
    path: /matches/{matchId}
    method: GET
    data_selector: matchDetails
    params: {}
- name: enter_match
  endpoint:
    path: /matches/{matchId}/enter
    method: POST
    data_selector: enterMatchResponse
    params: {}
- name: submit_score
  endpoint:
    path: /matches/{matchId}/score
    method: PUT
    data_selector: submitScoreResponse
    params: {}
- name: add_attempts
  endpoint:
    path: /matches/{matchId}/attempts
    method: POST
    data_selector: addAttemptsResponse
    params: {}
- name: register_player
  endpoint:
    path: /players/register
    method: POST
    data_selector: encryptedPlayerToken
- name: get_matches
  endpoint:
    path: /matches
    method: GET
    data_selector: ''
- name: get_match_details
  endpoint:
    path: /matches/{matchId}
    method: GET
    data_selector: ''
- name: enter_match
  endpoint:
    path: /matches/{matchId}/enter
    method: POST
    data_selector: ''
- name: submit_score
  endpoint:
    path: /matches/{matchId}/score
    method: PUT
    data_selector: ''
- name: get_leaderboard
  endpoint:
    path: /matches/{matchId}/leaderboard
    method: GET
    data_selector: ''
- name: authenticate_player
  endpoint:
    path: /players/auth
    method: POST
    data_selector: ''
- name: register_player
  endpoint:
    path: /players/register
    method: POST
    data_selector: ''
- name: get_tournaments
  endpoint:
    path: /tournaments
    method: GET
    data_selector: ''
- name: leaderboard
  endpoint:
    path: /matches/{matchId}/leaderboard
    method: GET
    data_selector: leaderboard
    params:
      limit: 25
      currentPlayerNeighbors: null
- name: claim_prizes
  endpoint:
    path: /prizes/claim
    method: POST
    data_selector: prizes
    params: {}
- name: Enter Player Tournament
  endpoint:
    path: /player-tournaments/{tournamentId}/enter
    method: POST
- name: Get Team Details
  endpoint:
    path: /teams/{teamId}
    method: GET
- name: fulfill_prizes
  endpoint:
    path: /prizes/fulfill
    method: POST
    data_selector: externalPlayerId
    params: {}
- name: update_player
  endpoint:
    path: /players
    method: PATCH
    data_selector: No Content
    params: {}
- name: add_player_tournament
  endpoint:
    path: /player-tournaments
    method: POST
    data_selector: accessKey
    params: {}
- name: get_player_tournaments
  endpoint:
    path: /player-tournaments
    method: GET
    data_selector: tournaments
    params:
      filterBy: live
      limit: 100
      period: all
- name: get_player_tournament_details
  endpoint:
    path: /player-tournaments/{tournamentId}
    method: GET
    data_selector: description
    params: {}
- name: update_player_tournament
  endpoint:
    path: /player-tournaments/{tournamentId}
    method: PATCH
    data_selector: tournamentId
    params: {}
- name: EnterTournament
  endpoint:
    path: /enterTournament
    method: POST
    data_selector: attemptsRemaining
    params: {}
- name: GetMatchList
  endpoint:
    path: /getMatchList
    method: GET
    data_selector: matches
    params: {}
- name: GetMatchDetails
  endpoint:
    path: /getMatchDetails
    method: GET
    data_selector: matchId
    params: {}
- name: UpdatePlayerTournamentRequest
  endpoint:
    path: /UpdatePlayerTournamentRequest
    method: POST
    data_selector: records
- name: UpdatePlayerTournamentResponse
  endpoint:
    path: /UpdatePlayerTournamentResponse
    method: GET
    data_selector: records
- name: GetTeamDetailsResponse
  endpoint:
    path: /GetTeamDetailsResponse
    method: GET
    data_selector: records
- name: individual_match_leaderboard
  endpoint:
    path: /individual-match/leaderboard
    method: GET
    data_selector: leaderboard
    params: {}
- name: team_match_leaderboard
  endpoint:
    path: /team-match/leaderboard
    method: GET
    data_selector: leaderboard
    params: {}
- name: claim_prizes
  endpoint:
    path: /claim/prizes
    method: POST
    data_selector: prizes
    params: {}
- name: fulfill_prizes
  endpoint:
    path: /fulfill/prizes
    method: POST
    data_selector: prizes
    params: {}
- name: add_player_tournament
  endpoint:
    path: /add/player/tournament
    method: POST
    data_selector: tournament
    params: {}
- name: get_player_tournament_list
  endpoint:
    path: /player/tournaments
    method: GET
    data_selector: tournaments
    params: {}
- name: create_team
  endpoint:
    path: /teams
    method: POST
    data_selector: ''
    params: {}
- name: add_players_to_team
  endpoint:
    path: /teams/{teamId}/players
    method: PUT
    data_selector: ''
    params: {}
- name: remove_players_from_team
  endpoint:
    path: /teams/{teamId}/players
    method: DELETE
    data_selector: ''
    params: {}
- name: add_tournament
  endpoint:
    path: /tournaments
    method: POST
    data_selector: ''
    params: {}
- name: Add Tournament Series
  endpoint:
    path: /tournaments/series
    method: POST
    data_selector: AddTournamentSeriesRequest
    params: {}
- name: Close Tournament
  endpoint:
    path: /tournaments/{tournamentId}/close
    method: POST
    data_selector: {}
    params: {}
- name: Delete Upcoming Tournament
  endpoint:
    path: /tournaments/{tournamentId}
    method: DELETE
    data_selector: {}
    params: {}
- name: Get Prize List
  endpoint:
    path: /prizes
    method: GET
    data_selector: GetPrizeListResponse
    params: {}
- name: Delete Prize
  endpoint:
    path: /prizes/{prizeId}
    method: DELETE
    data_selector: {}
    params: {}
- name: Get Requirement List
  endpoint:
    path: /requirements
    method: GET
    data_selector: GetRequirementListResponse
    params: {}
- name: Register Player
  endpoint:
    path: /players/register
    method: POST
    data_selector: RegisterPlayerResponse
    params: {}
- name: AddRequirementList
  endpoint:
    path: /AddRequirementList
    method: POST
    data_selector: requirements
- name: AddIndividualTournament
  endpoint:
    path: /AddIndividualTournament
    method: POST
    data_selector: tournament
- name: AddTeamTournament
  endpoint:
    path: /AddTeamTournament
    method: POST
    data_selector: tournament
- name: AddTournamentPrizeBundle
  endpoint:
    path: /tournament/prizeBundle
    method: POST
- name: AddTournamentSeriesRequest
  endpoint:
    path: /tournament/series
    method: POST
- name: CreateTeamRequest
  endpoint:
    path: /team
    method: POST
- name: RegisterPlayerRequest
  endpoint:
    path: /player/register
    method: POST
- name: update_game
  endpoint:
    path: /games/{gameId}
    method: PUT
    data_selector: No Content
- name: register_player
  endpoint:
    path: /players/register
    method: POST
    data_selector: No Content
- name: add_prize_list
  endpoint:
    path: /prizes
    method: POST
    data_selector: No Content
- name: get_prize_list
  endpoint:
    path: /prizes
    method: GET
    data_selector: No Content
- name: add_requirement_list
  endpoint:
    path: /requirements
    method: POST
    data_selector: No Content
- name: get_requirement_list
  endpoint:
    path: /requirements
    method: GET
    data_selector: No Content
- name: create_team
  endpoint:
    path: /teams
    method: POST
    data_selector: No Content
- name: add_players_to_team
  endpoint:
    path: /teams/{teamId}/players
    method: PUT
    data_selector: No Content
- name: remove_players_from_team
  endpoint:
    path: /teams/{teamId}/players
    method: DELETE
    data_selector: No Content
- name: add_tournament
  endpoint:
    path: /tournaments
    method: POST
    data_selector: No Content
- name: add_tournament_series
  endpoint:
    path: /tournaments/series
    method: POST
    data_selector: No Content
- name: close_tournament
  endpoint:
    path: /tournaments/{tournamentId}/close
    method: POST
    data_selector: No Content
- name: delete_upcoming_tournament
  endpoint:
    path: /tournaments/{tournamentId}
    method: DELETE
    data_selector: No Content
- name: Create Prize List
  endpoint:
    path: /leaderboardsandtournaments/admin-api-ref.html#add-prize-list
    method: POST
- name: Add Tournament
  endpoint:
    path: /leaderboardsandtournaments/admin-api-ref.html#add-tournament
    method: POST
- name: Create Team
  endpoint:
    path: /leaderboardsandtournaments/admin-api-ref.html#create-team
    method: POST
- name: Add Players to Team
  endpoint:
    path: /leaderboardsandtournaments/admin-api-ref.html#add-players-to-team
    method: POST
- name: Remove Players from Team
  endpoint:
    path: /leaderboardsandtournaments/admin-api-ref.html#remove-players-from-team
    method: POST
- name: ROI Calculator
  endpoint:
    path: /leaderboardsandtournaments/roi.html
    method: GET
    data_selector: outputs
    params: {}
- name: Player API
  endpoint:
    path: /game_api_std_security
    method: POST
- name: Tournament API
  endpoint:
    path: /game_api_enter_tournament
    method: POST
- name: Score API
  endpoint:
    path: /game_api_submit_score
    method: POST
- name: register_player
  endpoint:
    path: /leaderboardsandtournaments/game-api-ref.html#register-player
    method: POST
- name: authenticate_player
  endpoint:
    path: /leaderboardsandtournaments/game-api-ref.html#authenticate-player
    method: POST
- name: enter_tournament
  endpoint:
    path: /leaderboardsandtournaments/game-api-ref.html#enter-tournament
    method: POST
- name: submit_score
  endpoint:
    path: /leaderboardsandtournaments/game-api-ref.html#submit-score
    method: POST
- name: get_leaderboard
  endpoint:
    path: /leaderboardsandtournaments/game-api-ref.html#get-leaderboard
    method: GET
- name: register_player
  endpoint:
    path: /register/player
    method: POST
    data_selector: response
    params: {}
- name: auth_player
  endpoint:
    path: /auth/player
    method: POST
    data_selector: response
    params: {}
- name: Register Players
  endpoint:
    path: /leaderboardsandtournaments/game-api-std-security.html
    method: POST
- name: Player Enters the Tournament
  endpoint:
    path: /leaderboardsandtournaments/game-api-enter-tournament.html
    method: POST
- name: Player Competes in the Tournament
  endpoint:
    path: /leaderboardsandtournaments/game-api-play-tournament.html
    method: POST
- name: Player Exits the Tournament
  endpoint:
    path: /leaderboardsandtournaments/game-api-exit-tournament.html
    method: POST
- name: Award In-Game Prizes
  endpoint:
    path: /leaderboardsandtournaments/in-game-prizes.html
    method: POST
- name: submit_score
  endpoint:
    path: /submit-score
    method: PUT
    data_selector: response
    params: {}
- name: get_leaderboard
  endpoint:
    path: /get-leaderboard
    method: GET
    data_selector: response
    params:
      match_id: matchId
      session_id: sessionId
      api_key: apiKey
      entries: '32'
- name: Game API
  endpoint:
    path: /apps-and-games/game-api-ref.html
    method: GET
    data_selector: records
- name: Admin API
  endpoint:
    path: /apps-and-games/admin-api-ref.html
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Registration is easy and free. Gain access to all of Amazon's APIs, and get your
  apps published across millions of devices in over 236 countries and territories
  worldwide.
- Leaderboards and Tournaments is no longer supported. For questions about existing
  integrations, please contact your Amazon technical account manager.
- Leaderboards and Tournaments is no longer supported.
- You need an active AWS account to use with Leaderboards and Tournaments billing.
- Pagination is now enabled in GetPlayerTournamentList. You can use the "next" field
  to retrieve the next page of results.
- Developers can host competitions worldwide in countries/regions where AWS services
  are available.
- Default for minimum team size is 1 and maximum team size is unlimited.
- Default value for maximum attempts per player is unlimited.
- If you leave this field blank, the streamer sets the duration of the competition.
- If you leave the field blank, the streamer sets the value.
- Integrate the Leaderboards and Tournaments APIs into the back-end server code for
  your game instead of invoking the APIs directly from the game client.
- Contact your Amazon technical account manager for existing integrations.
- Default configuration for a competition is world-wide.
- Games should handle various error codes gracefully.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Strict compliance with Trademark Usage Guidelines is required.
- OAuth2 with refresh token required for integration
- Skills are like apps for Alexa.
- Users can control cloud-connected devices through Alexa.
errors:
- '204: No player tournaments found'
- '401: Unauthorized. No valid session ID provided.'
- '403: Forbidden. Invalid API key or Player is banned.'
- '400: Invalid request parameters.'
- '404: Tournament ID not found.'
- If your AWS account failed to link, the console re-opens the AWS Billing Setup dialog
  box.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Validation Errors'
- 'Validation Errors: Missing leaderboard stat value for tournaments based on stat'
- '0: An unknown error has occurred. If this error persists, please contact Leaderboards
  and Tournaments support.'
- '1: Invalid x-api-key. Provide a valid API Key in the x-api-key header.'
- '2: Invalid or expired session-id. Provide a valid Session ID in the session-id
  header.'
- '3: One or more validation errors occurred: ''list of errors''.'
- '4: Unable to parse the request body. Verify the syntax is valid JSON and try again.'
- '5: Missing or invalid ''content-type''. Provide a valid content type of application/json
  in the content-type header.'
- '6: Missing or invalid required headers/parameters. Provide the missing header/parameter.'
- '7: Method ''this method'' is not supported on this endpoint. Supported methods
  include: ''list of supported methods''.'
- '8: Too many requests are sent.'
- '9: The provided ''gameId'' was not found.'
- '10: An error has occurred while calling a dependent service.'
- '11: The player has been banned by the tournament creator and cannot take this action.
  If you feel the player was banned by mistake, please contact support.'
- '100: The provided ''encryptedPayload'' could not be decrypted. Ensure the payload
  is encrypted with the Game Public Key provided upon registration.'
- '101: Missing ''encryptedPayload''. Ensure the payload is encrypted with the Game
  Public Key provided upon registration.'
- '102: The provided ''encryptedPayload'' was decrypted successfully, however the
  contents of the payload did not consist of a valid Public Key. Verify that the payload
  is a valid Public Key before encrypting with the Game Public Key.'
- '103: The provided ''encryptedPayload'' was decrypted successfully, the contents
  of the payload consisted of a valid Public Key, however the size of the key was
  not at least 2048 bits in size.'
- '104: The provided ''encryptedPayload'' could not be decrypted or the contents did
  not consist of a valid Public Key. Ensure the payload is encrypted with the Game
  Public Key provided upon registration.'
- '105: A player with the provided ''playerToken'' could not be found.'
- '106: The provided ''playerToken'' is invalid. Ensure that the token is a valid
  UUID.'
- '107: The player has been banned and cannot take this action. If you feel the player
  was banned by mistake, please contact support.'
- '108: A player with the provided ''externalPlayerId'' could not be found.'
- '109: A session with the provided ''sessionId'' could not be found.'
- '110: The session for the provided ''sessionId'' has expired. Please re-authenticate
  the player for a new session.'
- '111: Invalid x-api-key or externalGameId. Provide a valid API Key in the x-api-key
  header, or a valid externalGameId in the path.'
- '200: The tournament with the provided ''tournamentId'' could not be found.'
- '201: The match with the provided ''matchId'' could not be found.'
- '202: The player with the provided ''playerId'' could not be found in the provided
  ''matchId''.'
- '203: Maximum number of attempts has been exceeded.'
- '204: Cannot perform action on provided ''tournamentId'' because it has already
  started.'
- '205: Cannot perform action on provided ''tournamentId'' because it has already
  completed.'
- '206: Cannot enter the tournament before it has started.'
- '207: Players has no more remaining attempts, cannot enter provided ''matchId''.'
- '208: The player does not meet the requirement(s) to enter, based off the ''playerAttributes''
  provided.'
- '209: Cannot enter the tournament because the player has not linked with a streaming
  platform account.'
- '210: The player with the provided ''sessionId'' did not use an access key for a
  tournament that requires it.'
- '211: The player with the provided ''sessionId'' used an access key that does not
  match the tournament''s access key.'
- '212: The provided ''teamId'' does not meet the size requirements of the tournament.
  The tournament requires a team size between ''minimum team size'' and ''maximum
  team size''; The provided ''teamId'' has a max size of ''team size''.'
- '213: There are no available matches to enter for the provided ''tournamentId''.'
- '214: Cannot remove the team from the tournament if the tournament is not in the
  ''OPEN'' or ''CLOSED'' state.'
- '215: The provided ''tournamentId'' is not a ''creator type'' tournament.'
- '216: Player with provided ''sessionId'' does not have the required permissions
  to update the provided ''tournamentId''.'
- '217: Cannot close a tournament that has not started.'
- '218: The provided ''tournamentId'' has been completed and cannot be closed again.'
- '219: The provided ''tournamentId'' is currently being processed. Please wait before
  attempting to close the tournament again.'
- '220: The provided ''teamId'' was not found in the provided ''sessionId'' and ''tournamentId''.'
- '221: Cannot enter the tournament because it is full.'
- '222: Cannot enter the tournament after it has ended.'
- '223: The provided sessionId is not valid for this resource.'
- '224: Player has joined maximum number of matches, allowed per player, for this
  tournament.'
- '225: All prizes have been claimed.'
- '300: The provided ''prizeIds'' are not found.'
- '400: The provided ''requirementIds'' are not found.'
- '801: The player with the provided ''sessionId'' is not in the provided ''teamId''.'
- '802: The provided ''teamId'' could not be found.'
- '401: Invalid or expired session-id. Provide a valid Session ID in the session-id
  header.'
- '403: Can happen for multiple reasons, please refer to the list of error codes.'
- '404: Can happen for multiple reasons, please refer to the list of error codes.'
- '409: Can happen for multiple reasons, please refer to the list of error codes.'
- '404: Match ID not found.'
- '204: No tournaments found'
- '401: Invalid session ID'
- '5XX: Unanticipated errors'
- '404: Provided teamId not found.'
- '403: Forbidden. Invalid API Key.'
- '403: Invalid x-api-key. Provide a valid Admin API Key in the x-api-key header.'
- '400: Invalid request parameters such as missing previously declared stats or having
  duplicate stats.'
- '403: Forbidden. Invalid API Key or Game Id.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://developer.amazon.com/gameon/console/home
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
