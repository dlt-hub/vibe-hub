resources:
- name: block_explorer
  endpoint:
    path: /explorer
    method: GET
    data_selector: data
    params: {}
- name: nft_marketplace
  endpoint:
    path: /nft/marketplace
    method: GET
    data_selector: items
    params: {}
- name: box_create
  endpoint:
    path: /box/create
    method: POST
    data_selector: result
    params: {}
- name: box_put
  endpoint:
    path: /box/put
    method: POST
    data_selector: result
    params: {}
- name: box_replace
  endpoint:
    path: /box/replace
    method: POST
    data_selector: result
    params: {}
- name: box_get
  endpoint:
    path: /box/get
    method: GET
    data_selector: result
    params: {}
- name: box_extract
  endpoint:
    path: /box/extract
    method: POST
    data_selector: result
    params: {}
- name: box_len
  endpoint:
    path: /box/len
    method: GET
    data_selector: result
    params: {}
- name: box_del
  endpoint:
    path: /box/delete
    method: DELETE
    data_selector: result
    params: {}
- name: get_random_value
  endpoint:
    path: /randomness_beacon/get
    method: POST
    data_selector: random_value
    params:
      round: uint64
      user_data: byte[]
- name: must_get_random_value
  endpoint:
    path: /randomness_beacon/must_get
    method: POST
    data_selector: random_value
    params:
      round: uint64
      user_data: byte[]
- name: inner_transaction
  endpoint:
    path: /api/inner_transaction
    method: POST
    data_selector: transactions
    params: {}
- name: Method
  endpoint:
    path: /abi/method
    method: GET
    data_selector: methods
    params: {}
- name: Interface
  endpoint:
    path: /abi/interface
    method: GET
    data_selector: interfaces
    params: {}
- name: Contract
  endpoint:
    path: /abi/contract
    method: GET
    data_selector: contracts
    params: {}
- name: flexible_server
  endpoint:
    path: /services/data/v2.12.3/flexible-server
    method: POST
    data_selector: records
- name: indexer_database
  endpoint:
    path: /az/postgres/flexible-server/create
    method: POST
    data_selector: result
    params:
      admin_user: algorandindexer
      admin_password: xxxxxxxx
      database_name: algorand-indexer-db
      sku_name: Standard_B1ms
      tier: Burstable
      storage_size: 1024
- name: algorand_indexer
  endpoint:
    path: /run/algorand/
    method: GET
    data_selector: algorand-indexer_linux_amd64_2.9.0.tar.bz2
    params: {}
- name: betanet_genesis
  endpoint:
    path: /run/algorand/
    method: GET
    data_selector: betanet_genesis.json
    params: {}
- name: teal-counter
  endpoint:
    path: https://github.com/hone-labs/teal-testing-example
    method: GET
    data_selector: code
- name: deploy
  endpoint:
    path: /scripts/deploy.js
    method: POST
    data_selector: output
    params: {}
- name: invoke increment
  endpoint:
    path: /npm/run/invoke-increment
    method: POST
    data_selector: output
    params: {}
- name: invoke decrement
  endpoint:
    path: /npm/run/invoke-decrement
    method: POST
    data_selector: output
    params: {}
- name: show globals
  endpoint:
    path: /npm/run/show-globals
    method: POST
    data_selector: output
    params: {}
- name: dryrun
  endpoint:
    path: /v2/dryrun
    method: POST
    data_selector: result
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: algod_node
  endpoint:
    path: /algod/data
    method: GET
    data_selector: status
    params: {}
- name: algod_importer
  endpoint:
    path: /v2/blocks
    method: GET
    data_selector: blocks
    params: {}
- name: filter_processor
  endpoint:
    path: /v2/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: postgresql_exporter
  endpoint:
    path: /v2/export
    method: POST
    data_selector: exportedData
    params: {}
- name: past_events
  endpoint:
    path: /events/past
    method: GET
    data_selector: events
    params: {}
- name: sync_round
  endpoint:
    path: /v2/ledger/sync
    method: GET
    data_selector: TXINFO
- name: set_sync_round
  endpoint:
    path: /v2/ledger/sync/{round}
    method: POST
    data_selector: TXINFO
- name: delete_sync_round
  endpoint:
    path: /v2/ledger/sync
    method: DELETE
    data_selector: TXINFO
- name: ledger_delta
  endpoint:
    path: /v2/deltas/{round}
    method: GET
    data_selector: TXINFO
- name: parent_contract
  endpoint:
    path: /parent_contract
    method: POST
    data_selector: result
    params: {}
- name: child_contract
  endpoint:
    path: /child_contract
    method: POST
    data_selector: result
    params: {}
- name: account
  endpoint:
    path: /v2/account/{address}
    method: GET
    data_selector: account
    params:
      exclude: all
- name: assets
  endpoint:
    path: /v2/accounts/{address}/assets/{ID}
    method: GET
    data_selector: assets
- name: application
  endpoint:
    path: /v2/accounts/{address}/application/{ID}
    method: GET
    data_selector: application
- name: created-apps
  endpoint:
    path: /v2/accounts/{address}/created-apps
    method: GET
    data_selector: created-apps
- name: created-assets
  endpoint:
    path: /v2/accounts/{address}/created-assets
    method: GET
    data_selector: created-assets
- name: apps-local-state
  endpoint:
    path: /v2/accounts/{address}/apps-local-state
    method: GET
    data_selector: apps-local-state
- name: create_asset
  endpoint:
    path: /asset/create
    method: POST
    data_selector: asset
    params:
      creator: <address>
      total: 1000
      unitname: rug
      asseturl: https://path/to/my/asset/details
      decimals: 0
- name: config_asset
  endpoint:
    path: /asset/config
    method: POST
    data_selector: asset
    params:
      manager: <address>
      new-reserve: <address>
      assetid: <asset-id>
- name: opt_in_asset
  endpoint:
    path: /asset/optin
    method: POST
    data_selector: optin
    params:
      receiver: <address>
      amount: 0
- name: freeze_asset
  endpoint:
    path: /asset/freeze
    method: POST
    data_selector: freeze
    params:
      manager: <address>
      freezeTarget: <address>
      freezeState: true
- name: create_asset
  endpoint:
    path: /create_asset
    method: POST
    data_selector: asset
    params: {}
- name: retrieve_asset_info
  endpoint:
    path: /get_asset/{assetIndex}
    method: GET
    data_selector: assetInfo
    params: {}
- name: create_asset
  endpoint:
    path: /v2/assets/create
    method: POST
    data_selector: asset
    params:
      creator: <address>
      total: 1000
      unitname: <unit-name>
      asseturl: https://path/to/my/asset/details
      decimals: 0
- name: opt_in_asset
  endpoint:
    path: /v2/assets/opt-in
    method: POST
    data_selector: transaction
    params:
      sender: <address>
      index: <asset-id>
- name: transfer_asset
  endpoint:
    path: /v2/assets/transfer
    method: POST
    data_selector: transaction
    params:
      from: <sender-address>
      to: <receiver-address>
      amount: 1
      index: <asset-id>
- name: clawback_transaction
  endpoint:
    path: /asset/revocation
    method: POST
    data_selector: transaction
    params: {}
- name: asset
  endpoint:
    path: /algod/asset/{assetIndex}
    method: GET
    data_selector: params
    params: {}
- name: asset_info
  endpoint:
    path: /asset/{assetIndex}
    method: GET
    data_selector: params
- name: create_asset
  endpoint:
    path: /create_asset
    method: POST
    data_selector: asset
    params: {}
- name: opt_in_asset
  endpoint:
    path: /opt_in_asset
    method: POST
    data_selector: opt_in
    params: {}
- name: transfer_asset
  endpoint:
    path: /transfer_asset
    method: POST
    data_selector: transfer
    params: {}
- name: freeze_asset
  endpoint:
    path: /freeze_asset
    method: POST
    data_selector: freeze
    params: {}
- name: get_asset_info
  endpoint:
    path: /get_asset_info
    method: GET
    data_selector: asset_info
    params: {}
- name: create_asset
  endpoint:
    path: /asset/create
    method: POST
    data_selector: asset
    params: {}
- name: opt_in_asset
  endpoint:
    path: /asset/optin
    method: POST
    data_selector: opt_in
    params: {}
- name: transfer_asset
  endpoint:
    path: /asset/transfer
    method: POST
    data_selector: transfer
    params: {}
- name: freeze_asset
  endpoint:
    path: /asset/freeze
    method: POST
    data_selector: freeze
    params: {}
- name: clawback_asset
  endpoint:
    path: /asset/clawback
    method: POST
    data_selector: clawback
    params: {}
- name: create_asset
  endpoint:
    path: /algorand/assets/create
    method: POST
    data_selector: asset
    params:
      creator: creator.addr
      total: 1000
      unit_name: rug
      asset_name: Really Useful Gift
      manager: creator.addr
      reserve: creator.addr
      freeze: creator.addr
      clawback: creator.addr
      url: https://path/to/my/asset/details
      decimals: 0
      default_frozen: false
- name: opt_in_asset
  endpoint:
    path: /algorand/assets/opt_in
    method: POST
    data_selector: opt_in
    params:
      receiver: receiver.addr
      asset_index: created_asset
- name: transfer_asset
  endpoint:
    path: /algorand/assets/transfer
    method: POST
    data_selector: transfer
    params:
      from: creator.addr
      to: receiver.addr
      asset_index: created_asset
      amount: 1
- name: freeze_asset
  endpoint:
    path: /algorand/assets/freeze
    method: POST
    data_selector: freeze
    params:
      manager: manager.addr
      asset_index: created_asset
      freeze_target: receiver.addr
      freeze_state: true
- name: clawback_asset
  endpoint:
    path: /algorand/assets/clawback
    method: POST
    data_selector: clawback
    params:
      from: receiver.addr
      to: creator.addr
      asset_index: created_asset
      amount: 1
- name: opt_out_asset
  endpoint:
    path: /algorand/assets/opt_out
    method: POST
    data_selector: opt_out
    params:
      from: receiver.addr
      to: creator.addr
      close_remainder_to: creator.addr
      asset_index: created_asset
notes:
- Cookies help us navigate the site and use its features, such as accessing secure
  areas.
- Cookies collect information about how visitors use our Developer Portal, which helps
  us improve its functionality.
- 'All information provided by you or collected by us during visits to the Website
  is governed by our Privacy Policy available at: https://www.algorand.com/privacy-policy,
  which is hereby incorporated by reference into the Terms of Use.'
- The Company claims no ownership or control over any Submission that you post or
  display on or through the Website.
- Boxes can be any size from 0 to 32K bytes.
- Box names must be at least 1 byte, at most 64 bytes, and must be unique within app.
- Box names must be unique within an application.
- When creating a box, the key name to be created must be in the box ref array.
- You must delete all boxes before deleting a contract. If this is not done, the minimum
  balance for that box is not recoverable.
- Boxes store the box key and box data as byte arrays. Since the AVM stack supports
  both byte arrays and unsigned integers (uint64) values, it is necessary to convert
  uint64 variables to byte arrays before trying to store them.
- Boxes may only be accessed (whether reading or writing) in a Smart Contract’s approval
  program, not in a clear state program.
- Boxes can only be manipulated by the smart contract that owns them. While the SDKs
  and goal cmd tool allow these boxes to be read off-chain, only the smart contract
  that owns them can read or manipulate them on-chain.
- Boxes can be created and deleted, but once created, they cannot be resized. At creation
  time, boxes are filled with 0 bytes up to their requested size. The box’s contents
  can be changed, but the size is fixed at that point. If a box needs to be resized,
  the box first must be deleted and then recreated with the new size.
- Random values are only available after the round and after the service submits the
  VRF proof.
- Random values can only be retrieved before 1512 rounds after the committed rounds.
- A randomness beacon developed by community groups is already in audit and expected
  to be deployed to Mainnet in the coming weeks.
- The output of the randomness beacon is only random when the block seed is not known.
- When using the opcode you will need more opcode budget as this call requires 5700
  and a Smart Contract call is limited to 700.
- When using the opcode you will need more opcode budget as this call requires 1900
  and a Smart Contract call is limited to 700.
- Values that are Base64 encoded (standard or URL) should be decoded before passing
  them as a parameter to a Smart Contract call.
- The preferred method is to use non encoded byte strings.
- This should _only_ be used in the case that there is no way to decode the bytestring
  prior to submitting the transaction.
- Sandbox is generally used for development, not production.
- Dappflow is a private blockchain explorer with an easy-to-understand UI.
- Beaker is a Smart Contract development framework meant to further improve the development
  experience.
- Beaker takes advantage of improvements in code organization and interaction.
- Beaker improves the error message using the source map endpoint during compilation
  and mapping the pc back to the source teal.
- Initially Beaker provides helpers for retrieving and comparing account balances.
- Contract to Contract calling supports up to 256 inner transactions.
- Reentrant calls are not allowed.
- The Atomic Composer supports invoking smart contracts and creating standard transactions.
- A best practice is to use SSH keys and avoid a simple user/password authentication.
- Azure will create a private/public keypair for you and you will need to download
  the private key and store it on your computer.
- The default rule allows ssh connection on port 22 from anywhere.
- The Algorand Indexer requires a PostgreSQL database to store the ledger data.
- A dedicated subnet is required for the resources created in the flexible server.
- Use SSH keys for authentication to the Azure VM.
- The initialization script runs as root and requires permission adjustments.
- The accounts/mnemonics within your sandbox will change each time you rebuild your
  sandbox.
- Dev mode creates just one block for each transaction.
- Timestamp for a long lived sandbox goes bad quickly in dev mode.
- The DryRunRequest object can be written to disk for debugging.
- The Hash Map design pattern can be applied to the name service use case where input
  names need to be mapped to wallet addresses.
- Running in a containerized environment
- Connected to the Algorand mainnet network
- Immediately started with fast catchup
- REST API ready
- Capable of being spun up and down with persistent blockchain data
- Algorand 3.15.0 is currently available only on BetaNet.
- Follower nodes remove the consensus logic and transaction processing capabilities
  of normal participation nodes.
- This example is not production code and is for educational purposes only. Many security
  checks are not included.
- If a list returns more than 100K items, the REST call will automatically generate
  a 400 error code and fail.
- If the Indexer call returns more than 1K items, the REST call will automatically
  generate a 400 error code and fail.
- For every asset an account creates or owns, its minimum balance is increased by
  0.1 Algos (100,000 microAlgos).
- Transferring the asset does not alleviate the creator's minimum balance requirement.
- DefaultFrozen is an immutable parameter and cannot be changed after creation.
- If any of the four addresses (manager, reserve, freeze, clawback) is set to an empty
  string, that address will be cleared and can never be reset for the life of the
  asset.
- The minimum balance requirement will be placed on the original creator as long as
  the asset has not been destroyed.
- Revoking an asset requires specifying an asset sender and receiver.
- Assets that represent many of the same type, like a stablecoin, may be referred
  to as fungible assets.
- Single, unique assets are referred to as non-fungible assets.
- Prior to AVM 1.1 (go-algorand 3.5.0), a single Algorand account was only permitted
  to create and opt-in to 1000 assets. These limits are now removed allowing an unlimited
  number of assets to be created and opted into by a single account.
errors:
- '400: Returned when exceeding item limits.'
- '400 Bad Request: Check your request parameters.'
- '403 Forbidden: You do not have permission to perform this action.'
- '404 Not Found: The requested asset or resource does not exist.'
auth_info:
  mentioned_objects: []
client:
  auth:
    type: oauth2
    location: header
    header_name: Authorization
  base_url: http://{API}
  headers:
    Accept: application/json
    TOKEN: YOUR_API_TOKEN
    X-Algo-API-Token: '{APITOK}'
source_metadata: null
