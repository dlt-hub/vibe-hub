resources:
- name: useradd
  endpoint:
    path: /useradd
    method: POST
- name: userset
  endpoint:
    path: /userset
    method: POST
- name: usertoken
  endpoint:
    path: /usertoken
    method: POST
- name: usersget
  endpoint:
    path: /usersget
    method: GET
- name: groupsget
  endpoint:
    path: /groupsget
    method: GET
- name: user_add
  endpoint:
    path: /
    method: POST
    data_selector: user
    params:
      op: useradd
      token: ptlk9hdel1gqxf3p0s15f5f5gtusldej18tl794suzit
- name: Mesibo On-Premise Server
  endpoint:
    path: /mesibo
    method: POST
    data_selector: status
- name: mesibo
  endpoint:
    path: /mesibo
    method: GET
    data_selector: response
    params: {}
- name: mesibo_on_premise
  endpoint:
    path: /mesibo
    method: GET
    data_selector: status
    params: {}
- name: user_profile
  endpoint:
    path: /getProfile
    method: GET
- name: user_add
  endpoint:
    path: /
    method: POST
    data_selector: user
    params:
      op: useradd
      token: ptlk9hdel1gqxf3p0s15f5f5gtusldej18tl794suzit
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: calls
- name: groupcalls
  endpoint:
    path: /groupcalls
    method: GET
    data_selector: groupcalls
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: message
  endpoint:
    path: /v2/projects/{dialogflow_project_id}/agent/sessions/{session_id}:detectIntent
    method: POST
    data_selector: responseText
- name: initialization
  endpoint:
    path: /init
    method: POST
- name: setAccessToken
  endpoint:
    path: /setAccessToken
    method: POST
- name: setDatabase
  endpoint:
    path: /setDatabase
    method: POST
- name: start
  endpoint:
    path: /start
    method: POST
- name: stop
  endpoint:
    path: /stop
    method: POST
- name: Messaging Screen
  endpoint:
    path: /messaging
    method: GET
    data_selector: messages
- name: User List Screen
  endpoint:
    path: /userlist
    method: GET
    data_selector: users
- name: chatbot
  endpoint:
    path: /projects/<Project ID>/agent/sessions
    method: POST
    data_selector: queryInput
    params: {}
- name: control_panel
  endpoint:
    path: /control
    method: GET
    data_selector: ''
    params: {}
- name: mesiboapi
  endpoint:
    path: /mesiboapi
    method: GET
    data_selector: ''
    params: {}
notes:
- Your app MUST possess or request contacts permissions before using the mesibo phone
  contact APIs.
- mesibo backend API server is bundled with mesibo docker image as a FastCGI server
- To launch the backend FastCGI server, you will need to pass -b <port> option when
  starting mesibo on-premise
- mesibo location APIs is in beta and available in v2.4.9 onward.
- Upgrading to v2.4 API requires only a few minimal changes.
- Older APIs will not be able to access any new fields or multiple images your app
  may add.
- Your webhook URL must be publicly accessible.
- It must handle POST requests with the JSON body.
- It must respond with a plain text message 'MESIBO OK'.
- mesibo allows you to send and receive any arbitrary message in real-time.
- You can geotag your messages by including location information.
- The backend API should only be accessed from your backend servers.
- If you are having a certificate related issue, ensure that you have correctly followed
  all the instructions in Step 4 - Configuring TLS Certificate above.
- On-premise server prints error(s) to show you the correct status even if it is 'ready
  to connect'.
- Mesibo On-Premise is distributed as a docker image.
- Users can run custom Javascript to process each message.
- Ensure that you are running mesibo on-premise on a valid host.
- When a user on your app logs-in, you'll get a login entry for that user.
- Mesibo On-Premise allows you to run the entire Mesibo real-time platform in your
  own premise or private cloud.
- Ensure that all required TCP ports are open on your Linux host for user connectivity.
- Mesibo On-Premise requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- Check logs for issues by running on-premise in the foreground
- Use docker shell to troubleshoot MySQL and networking issues
- Mesibo On-Premise requires Docker to run.
- TLS certificate is required for secure connections.
- All messages and calls go through your own data center and stay in your own database.
- You can interface Mesibo On-premise solution with machine learning and AI tools
  like Tensorflow, Matlab, and much more.
- On-premise server prints error(s) to show you the correct status even if it is 'ready
  to connect'. Try to connect a client if it is ready.
- Mesibo On-Premise requires a Linux 64-bit server with at least 8GB of free RAM.
- MySQL (or MariaDB) version 8.x or later is required.
- Ensure the server can handle a large number of connections to support your user
  load.
- On-premise requires minimal internet access only for authenticating with the mesibo
  server and the billing purpose.
- You can keep your database behind a firewall.
- mesibo is a highly scalable real-time communication platform.
- mesibo offers On-Premise solution.
- mesibo is HIPAA compliant.
- mesibo meets EU GDPR requirements.
- Users and groups are central to every operation in mesibo.
- mesibo automates the entire push notification handling for you without any intervention
  from your end.
- It is highly recommended that you refer to the source code of the mesibo messenger
  app to understand the implementation.
- mesibo live is the mesibo conferencing and group calls server which allows you to
  add conferencing and group calls features to your app.
- You must run each instance of mesibo live on a separate server with robust CPU and
  ample networking bandwidth.
- Avoid co-deployment of mesibo live instances with your primary on-premise server.
- IMPORTANT - Secure https website is required
- You MUST also use a valid certificate with recognized authority, the self-signed
  certificate will NOT work.
- By default, the cache is enabled.
- Mesibo enables intelligent Keep-Alive and request pipelining for effective resource
  utilization.
- App Token is secret and you should never expose it to your users.
- You MUST NOT use it in client-side APIs (Android, iOS, Flutter, JS, etc)
- mesibo chatbot and scripting platform is available at no additional cost when you
  use mesibo on-premise
- You must not write to tables in the on-premise mesibo database under any circumstances.
- Ensure that you do not overload the mesibo on-premise database.
- Refer to API documentation for rate limits and usage guidelines.
- session allows you to maintain context or store a value for chatbot conversations
- session is unique for each sender-receiver combination per script and can store
  up to 8KB of data
- Uses Dialogflow API for chatbot functionality
- Mesibo modules allow you to expand functionality by adding custom features.
- Dialogflow sends the response as a JSON string with the response text encoded in
  the field fulfillmentText.
- You should be able to access the control panel at http://<IP Adress>/control
errors:
- 'BADVALUE: Some error message'
- '400: Suggested action to fix the issue'
- 'MySQL Connection Failed - Can''t connect to MySQL server in server logs: Ensure
  that database host, name and credentials are correctly configured in On-Premise
  configuration.'
- 'Unable to verify app token - network error in server logs: Check your firewall
  configuration and verify that it is configured to allow connections from your docker
  container.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Database connection failed: check your database host and credentials.'
- 'Docker image not found: ensure you have pulled the latest image.'
- 'Port 5222 is blocked: check firewall settings.'
- 'MISSINGOP: Ensure correct API operations are being called.'
- 'MySQL connection failure: Ensure the database host is not 127.0.0.1.'
- 'TLS certificate issues: Check if the certificate files are correctly mounted.'
- Ensure that the token is correct and generated as described above.
- If you do not see logs indicating media frames being received, one of the likely
  reasons is that the UDP ports on your servers are blocked.
auth_info:
  mentioned_objects: []
client:
  base_url: http://<IP Adress>
  headers:
    Content-Type: application/json
    Accept: application/json
    User-Agent: mesibo/x.x
  auth:
    type: oauth2
    location: header
    header_name: Authorization
    flow: refresh_token
    token_url: https://login.mesibo.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''mesibo_client_id''] }}'
    client_secret: '{{ dlt.secrets[''mesibo_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''mesibo_refresh_token''] }}'
    client_email: xxxx@xxx.iam.gserviceaccount.com
    private_key: xxxxx
  paginator: {}
source_metadata: null
