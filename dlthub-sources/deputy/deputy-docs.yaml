resources:
- name: company_period
  endpoint:
    path: /company_periods
    method: GET
    data_selector: records
    params: {}
- name: operational_unit
  endpoint:
    path: /resource/OperationalUnit/{id}
    method: POST
    data_selector: RosterEmployeeOperationalUnit
    params: {}
- name: Who Am I
  endpoint:
    path: /whoami
    method: GET
- name: employee
  endpoint:
    path: /api/v1/supervise/employee
    method: POST
- name: location
  endpoint:
    path: /api/v1/supervise/company/{id}
    method: POST
- name: TimesheetPayReturn
  endpoint:
    path: /TimesheetPayReturn/QUERY
    method: POST
- name: update_employee
  endpoint:
    path: /api/v1/supervise/employee/{id}
    method: POST
- name: employment_contract
  endpoint:
    path: /api/v1/resource/employmentcontract/QUERY
    method: POST
- name: set_award_for_employee
  endpoint:
    path: /api/v1/supervise/employee/{employeeid}/setAwardFromLibrary
    method: POST
- name: agreed_hour
  endpoint:
    path: /api/management/v2/agreed_hour/{employeeid}
    method: POST
- name: retrieve_agreed_hour
  endpoint:
    path: /api/management/v2/agreed_hour/{employeeid}
    method: GET
- name: TimesheetPayReturn
  endpoint:
    path: /api/v1/resource/TimesheetPayReturn/QUERY
    method: POST
    data_selector: records
    params: {}
- name: Timesheets
  endpoint:
    path: /timesheets
    method: GET
- name: People Sync
  endpoint:
    path: /people
    method: GET
- name: Point of Sale
  endpoint:
    path: /point-of-sale
    method: GET
- name: wage_budget
  endpoint:
    path: /metrics
    method: POST
    data_selector: data
    params: {}
- name: employees
  endpoint:
    path: /api/management/v2/employees
    method: POST
    data_selector: data
- name: employee
  endpoint:
    path: /api/management/v2/employees/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: employee_onboarding
  endpoint:
    path: /employees/{employeeid}/onboarding/export
    method: GET
- name: employees
  endpoint:
    path: /employees
    method: POST
    data_selector: data
- name: update_employee
  endpoint:
    path: /employees/{id}
    method: PATCH
    data_selector: data
- name: LeaveAccrual
  endpoint:
    path: /api/v1/resource/LeaveAccrual
    method: POST
    data_selector: response
- name: EmployeeAgreement
  endpoint:
    path: /api/v1/resource/EmployeeAgreement
    method: POST
    data_selector: records
- name: leave_request
  endpoint:
    path: /api/v1/resource/Leave
    method: POST
    data_selector: Id
    params: {}
- name: employee_unavailability
  endpoint:
    path: /api/v1/supervise/unavail
    method: POST
    data_selector: Id
    params: {}
- name: Timesheet
  endpoint:
    path: /api/v1/resource/Timesheet/QUERY
    method: POST
    data_selector: records
- name: TimesheetPayReturn
  endpoint:
    path: /api/v1/Resource/TimesheetPayReturn/QUERY
    method: POST
    data_selector: records
- name: Timesheet
  endpoint:
    path: /api/v1/resource/Timesheet/QUERY
    method: POST
    data_selector: TimesheetIdArray
- name: Payroll
  endpoint:
    path: /api/v1/payroll/mark/{periodid}/unpaid
    method: POST
    data_selector: TimesheetIdArray
- name: timesheet
  endpoint:
    path: /api/v1/supervise/timesheet/update
    method: POST
    data_selector: null
    params: {}
- name: start_timesheet
  endpoint:
    path: /api/v1/supervise/timesheet/start
    method: POST
    data_selector: Id
- name: end_timesheet
  endpoint:
    path: /api/v1/supervise/timesheet/end
    method: POST
    data_selector: Id
- name: start_timesheet
  endpoint:
    path: /api/v1/supervise/timesheet/start
    method: POST
- name: end_timesheet
  endpoint:
    path: /api/v1/supervise/timesheet/end
    method: POST
- name: pause_timesheet
  endpoint:
    path: /api/v1/supervise/timesheet/pause
    method: POST
- name: approve_timesheet
  endpoint:
    path: /api/v1/supervise/timesheet/approve
    method: POST
- name: discard_timesheet
  endpoint:
    path: /api/v1/supervise/timesheet/discard
    method: POST
- name: timesheet_details
  endpoint:
    path: /api/v1/supervise/timesheet/{id}/details
    method: GET
- name: metric
  endpoint:
    path: /api/v1/supervise/metric/config/upsert
    method: POST
    data_selector: data
    params: {}
- name: add_location
  endpoint:
    path: /api/v1/supervise/company
    method: PUT
    data_selector: payload
    params: {}
- name: add_area
  endpoint:
    path: /api/v1/supervise/department
    method: PUT
    data_selector: payload
    params: {}
- name: metrics
  endpoint:
    path: /api/v2/metrics
    method: POST
    data_selector: data
- name: hour_budget
  endpoint:
    path: /metrics
    method: POST
    data_selector: data
- name: location_settings
  endpoint:
    path: /api/v1/supervise/company/settings
    method: POST
    data_selector: ''
    params: {}
- name: sales_metrics
  endpoint:
    path: /metrics/raw
    method: GET
    data_selector: data
    params:
      areas: '1'
      types: Sales
      start: '{starttime}'
      end: '{endtime}'
- name: update_location
  endpoint:
    path: /api/v1/supervise/company/{id}
    method: POST
    data_selector: payload
    params: {}
- name: delete_location
  endpoint:
    path: /api/v1/supervise/company/{id}/delete
    method: POST
    data_selector: ''
    params: {}
- name: archive_location
  endpoint:
    path: /api/v1/supervise/company/{id}/archive
    method: POST
    data_selector: ''
    params: {}
- name: leave_accrual
  endpoint:
    path: /services/data/vXX.X/sobjects/LeaveAccrual
    method: GET
    data_selector: records
- name: leave
  endpoint:
    path: /api/v1/resource/Leave
    method: GET
    data_selector: records
- name: leave_info
  endpoint:
    path: /api/v1/resource/Leave/INFO
    method: GET
    data_selector: records
- name: leave_details
  endpoint:
    path: /api/v1/resource/Leave/{id}
    method: GET
    data_selector: records
- name: leave_update
  endpoint:
    path: /api/v1/resource/Leave/{id}
    method: POST
    data_selector: records
- name: leave_query
  endpoint:
    path: /api/v1/resource/Leave/QUERY
    method: POST
    data_selector: records
- name: Company
- name: Comment
- name: Employee
- name: EmployeeAvailability
- name: Leave
- name: Memo
- name: OperationalUnit
- name: Roster
- name: RosterOpen
- name: RosterSwap
- name: Roster.Publish
- name: Task
- name: Timesheets
- name: TimesheetPayReturn
- name: TrainingRecord
- name: User.Login
- name: TimesheetExport.Begin
- name: TimesheetExport.End
- name: Device.Registration
- name: custom_field
  endpoint:
    path: /api/v1/resource/CustomField
    method: POST
    data_selector: payload
    params: {}
- name: webhook
  endpoint:
    path: /Webhook
    method: POST
    data_selector: ''
    params: {}
- name: OperationalUnit
  endpoint:
    path: /OperationalUnit/INFO
    method: GET
    data_selector: fields
    params: {}
- name: Timesheet
  endpoint:
    path: /Timesheet/INFO
    method: GET
    data_selector: fields
    params: {}
- name: Timesheet.Insert
  endpoint:
    path: /api/v1/resource/Webhook
    method: POST
    data_selector: ''
    params:
      Enabled: 1
      Type: URL
      Address: https://webhook.site/a90b0a6b-43e9-4755-8bf5-3518980d373a
- name: Timesheet.Save
  endpoint:
    path: /api/v1/resource/Webhook
    method: POST
    data_selector: ''
    params:
      Enabled: 1
      Type: URL
      Address: https://webhook.site/a90b0a6b-43e9-4755-8bf5-3518980d373a
- name: Timesheet.Update
  endpoint:
    path: /api/v1/resource/Webhook
    method: POST
    data_selector: ''
    params:
      Enabled: 1
      Type: URL
      Address: https://webhook.site/a90b0a6b-43e9-4755-8bf5-3518980d373a
- name: labor_model
  endpoint:
    path: /api/v2/labor-model/location/{locationid}/run
    method: POST
    data_selector: data
    params: {}
- name: labor_model
  endpoint:
    path: /api/v2/location/{locationid}/rules/{labormodelid}
    method: PUT
    data_selector: data
    params: {}
- name: shift
  endpoint:
    path: /api/v1/supervise/roster
    method: POST
    data_selector: response
    params: {}
- name: roster
  endpoint:
    path: /api/v1/resource/Roster/QUERY
    method: POST
    data_selector: records
    params: {}
- name: shifts
  endpoint:
    path: /api/management/v2/shifts
    method: GET
- name: bulk_shifts
  endpoint:
    path: /api/management/v2/shifts:bulk
    method: POST
- name: shift_operations
  endpoint:
    path: /api/operations/v2/operations/{operationid}
    method: GET
- name: CustomFieldData
  endpoint:
    path: /api/v1/resource/CustomFieldData/QUERY
    method: POST
    data_selector: '[]'
- name: Employee
  endpoint:
    path: /api/v1/resource/Employee/{EmployeeId}/CustomFieldDataObject
    method: POST
    data_selector: '{}'
- name: Timesheet
  endpoint:
    path: /api/v1/resource/Timesheet
    method: POST
    data_selector: '{}'
- name: auto_fill_shifts
  endpoint:
    path: /api/v1/supervise/roster/autofill
    method: POST
    data_selector: response
    params: {}
- name: check_auto_fill_progress
  endpoint:
    path: /api/v1/supervise/roster/checkautofill/{tokenid}
    method: GET
    data_selector: progress
    params: {}
- name: autobuild_shifts
  endpoint:
    path: /supervise/roster/autobuild
    method: POST
    data_selector: null
    params: {}
- name: check_autobuild
  endpoint:
    path: /supervise/roster/checkautobuild/{autobuildid}
    method: GET
    data_selector: null
    params: {}
- name: shifts
  endpoint:
    path: /api/management/v2/shifts
    method: GET
    data_selector: items
    params:
      published: 'TRUE'
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: records
    params: {}
- name: labor_model
  endpoint:
    path: /api/v2/labor-model/location/{locationid}
    method: POST
    data_selector: data
- name: labor_model_rules
  endpoint:
    path: /api/v2/labor-model/location/{locationid}/rules
    method: GET
    data_selector: data
    params: {}
- name: address
  endpoint:
    path: /addresses
    method: GET
    data_selector: addresses
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
    params: {}
- name: location
  endpoint:
    path: /locations
    method: GET
    data_selector: records
    params: {}
- name: employee_agreement
  endpoint:
    path: /services/data/vXX.X/sobjects/EmployeeAgreement
    method: GET
    data_selector: records
    params: {}
- name: country
  endpoint:
    path: /countries
    method: GET
    data_selector: records
- name: custom_field
  endpoint:
    path: /api/v1/resource/CustomField
    method: GET
- name: custom_field_info
  endpoint:
    path: /api/v1/resource/CustomField/INFO
    method: GET
- name: custom_field_by_id
  endpoint:
    path: /api/v1/resource/CustomField/{id}
    method: GET
- name: update_custom_field
  endpoint:
    path: /api/v1/resource/CustomField/{id}
    method: POST
- name: query_custom_field
  endpoint:
    path: /api/v1/resource/CustomField/QUERY
    method: POST
- name: custom_field_data
  endpoint:
    path: /custom_field_data
    method: GET
    data_selector: data
    params: {}
- name: employee_appraisal
  endpoint:
    path: /api/employee_appraisal
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: custom_app_data
  endpoint:
    path: /customAppData
    method: GET
    data_selector: data
    params: {}
- name: employee
  endpoint:
    path: /Employee
    method: GET
    data_selector: records
    params: {}
- name: employee_by_id
  endpoint:
    path: /Employee/{id}
    method: GET
    data_selector: record
    params: {}
- name: employee_query
  endpoint:
    path: /Employee/QUERY
    method: POST
    data_selector: records
    params: {}
- name: employee_agreement_history
  endpoint:
    path: /employeeAgreementHistory
    method: GET
    data_selector: records
- name: availability
  endpoint:
    path: /employee-availability
    method: GET
    data_selector: records
    params: {}
- name: employee_history
  endpoint:
    path: /employeeHistory
    method: GET
    data_selector: records
- name: employee_role
  endpoint:
    path: /employee_role
    method: GET
    data_selector: records
    params: {}
- name: EmployeeSalary
  endpoint:
    path: /api/v1/EmployeeSalary
    method: GET
    data_selector: records
    params: {}
- name: employee_workplace
  endpoint:
    path: /employeeWorkplace
    method: GET
    data_selector: records
    params: {}
- name: employment_contract
  endpoint:
    path: /employment_contracts
    method: GET
    data_selector: records
- name: employee_paycycle
  endpoint:
    path: /employee/paycycle
    method: GET
    data_selector: records
    params: {}
- name: employee_paycycle_return
  endpoint:
    path: /api/v1/employeePaycycleReturn
    method: GET
    data_selector: records
    params: {}
- name: employment_contract_leave_rules
  endpoint:
    path: /employmentContractLeaveRules
    method: GET
    data_selector: data
    params: {}
- name: event
  endpoint:
    path: /events
    method: GET
    data_selector: records
    params:
      Schedule: mandatory
      ShowOnRoster: mandatory
- name: geo_location
  endpoint:
    path: /geo/location
    method: GET
    data_selector: records
    params: {}
- name: leave_rule
  endpoint:
    path: /services/data/vXX.X/sobjects/LeaveRule
    method: GET
    data_selector: records
    params: {}
- name: employment_condition
  endpoint:
    path: /services/data/vXX.X/sobjects/EmploymentCondition
    method: GET
    data_selector: records
    params: {}
- name: journals
  endpoint:
    path: /api/journals
    method: GET
    data_selector: records
- name: kiosk
  endpoint:
    path: /kiosk
    method: GET
    data_selector: records
    params: {}
- name: leave_pay_line
  endpoint:
    path: /leavePayLine
    method: GET
    data_selector: records
    params: {}
- name: pay_rules
  endpoint:
    path: /payrules
    method: GET
    data_selector: records
    params: {}
- name: public_holiday
  endpoint:
    path: /public_holiday
    method: GET
    data_selector: records
- name: memo
  endpoint:
    path: /memos
    method: GET
    data_selector: records
    params: {}
- name: Area
  endpoint:
    path: /api/areas
    method: GET
    data_selector: records
    params: {}
- name: roster_open
  endpoint:
    path: /roster/open
    method: GET
    data_selector: records
    params: {}
- name: pay_period
  endpoint:
    path: /payperiods
    method: GET
    data_selector: records
    params: {}
- name: roster
  endpoint:
    path: /api/rosters
    method: GET
    data_selector: rosters
    params: {}
- name: RosterSwap
  endpoint:
    path: /api/v1/resource/RosterSwap
    method: GET
- name: RosterSwapInfo
  endpoint:
    path: /api/v1/resource/RosterSwap/INFO
    method: GET
- name: SpecificRosterSwap
  endpoint:
    path: /api/v1/resource/RosterSwap/{RosterSwapId}
    method: GET
- name: QueryRosterSwap
  endpoint:
    path: /api/v1/resource/RosterSwap/QUERY
    method: POST
- name: sms_log
  endpoint:
    path: /sms/log
    method: GET
    data_selector: records
- name: stress_profile
  endpoint:
    path: /stress_profiles
    method: GET
    data_selector: records
    params: {}
- name: system_usage_balance
  endpoint:
    path: /system_usage_balance
    method: GET
    data_selector: records
    params: {}
- name: team
  endpoint:
    path: /services/data/vXX.X/sobjects/Team
    method: GET
    data_selector: records
    params: {}
- name: schedule
  endpoint:
    path: /schedules
    method: GET
    data_selector: records
    params: {}
- name: task
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
    params: {}
- name: training_record
  endpoint:
    path: /api/training_records
    method: GET
    data_selector: records
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
- name: state
  endpoint:
    path: /api/v1/states
    method: GET
    data_selector: records
- name: system_usage
  endpoint:
    path: /system_usage
    method: GET
    data_selector: records
- name: task_group
  endpoint:
    path: /api/task_groups
    method: GET
    data_selector: records
    params: {}
- name: TaskGroupSetup
  endpoint:
    path: /taskgroupsetup
    method: GET
    data_selector: records
    params: {}
- name: TaskOpunitConfig
  endpoint:
    params:
      TaskSetupId: mandatory
      TaskGroupId: mandatory
      Active: mandatory
      SortOrder: mandatory
      OpUnitId: mandatory
      Schedule: mandatory
- name: TaskSetup
  endpoint:
    path: /services/data/vXX.X/sobjects/TaskSetup
    method: GET
    data_selector: records
    params: {}
- name: timesheet
  endpoint:
    path: /api/timesheets
    method: GET
    data_selector: records
- name: timesheet_pay_return
  endpoint:
    path: /timesheetpayreturn
    method: GET
    data_selector: pay_lines
    params: {}
- name: training_module
  endpoint:
    path: /api/training_module
    method: GET
    data_selector: records
- name: country_ids
  endpoint:
    path: /Country/QUERY
    method: POST
    data_selector: '[]'
- name: state_ids
  endpoint:
    path: /State/QUERY
    method: POST
    data_selector: '[]'
- name: roster
  endpoint:
    path: /resource/Roster/QUERY
    method: POST
    data_selector: response
    params: {}
- name: my_roster
  endpoint:
    path: /my/roster
    method: GET
    data_selector: rosters
    params: {}
- name: CustomAttachData
  endpoint:
    path: /cwa_attach_data
    method: POST
    data_selector: data
    params: {}
- name: CustomGetAttachedData
  endpoint:
    path: /cwa_get_attached_data
    method: POST
    data_selector: data
    params: {}
- name: CustomViewLink
  endpoint:
    path: /cwa_view_link
    method: POST
    data_selector: data
    params: {}
- name: Encrypt
  endpoint:
    path: /encrypt
    method: POST
    data_selector: data
    params: {}
- name: OpenSSL
  endpoint:
    path: /openssl
    method: POST
    data_selector: data
    params: {}
- name: Math
  endpoint:
    path: /math
    method: POST
    data_selector: data
    params: {}
- name: Extend
  endpoint:
    path: /extend
    method: POST
    data_selector: data
    params: {}
- name: Map
  endpoint:
    path: /map
    method: POST
    data_selector: data
    params: {}
- name: Filter
  endpoint:
    path: /filter
    method: POST
    data_selector: data
    params: {}
- name: GetType
  endpoint:
    path: /gettype
    method: POST
    data_selector: data
    params: {}
- name: String
  endpoint:
    path: /string
    method: POST
    data_selector: data
    params: {}
- name: Array
  endpoint:
    path: /array
    method: POST
    data_selector: data
    params: {}
- name: newsfeed_post
  endpoint:
    path: /api/v1/supervise/memo
    method: POST
    data_selector: Id
- name: enable_support_access
  endpoint:
    path: /api/v1/my/pref/ENABLE_DP_REMOTE
    method: POST
    data_selector: enabled
- name: employees
  endpoint:
    path: /api/management/v2/employees
    method: POST
    data_selector: data
- name: employees_patch
  endpoint:
    path: /api/management/v2/employees
    method: PATCH
    data_selector: data
- name: logout
  endpoint:
    path: /login?dologout=true
    method: POST
- name: embed
  endpoint:
    path: /connect/embed/
    method: GET
- name: listAwardsLibrary
  endpoint:
    path: /api/v1/payroll/listAwardsLibrary
    method: GET
    data_selector: ''
- name: setAwardFromLibrary
  endpoint:
    path: /api/v1/supervise/employee/{employeeid}/setAwardFromLibrary
    method: POST
    data_selector: ''
- name: signup
  endpoint:
    path: /connect/v1/partner/{partnername}/signup
    method: POST
    data_selector: hostname
    params: {}
- name: change_plan
  endpoint:
    path: /connect/v1/partner/{partnername}/change-plan
    method: POST
    data_selector: data
    params: {}
- name: subscription_status
  endpoint:
    path: /connect/v1/partner/{partnername}/subscription-status
    method: POST
    data_selector: data
    params: {}
- name: partner_info
  endpoint:
    path: /connect/v1/partner/{partnername}/info
    method: GET
    data_selector: response
    params: {}
notes:
- The maximum amount of records included in a single response is 500
- Every Deputy customer runs on their own subdomain
- Returned data is always in a JSON format
- The Deputy API currently has a limitation of 500 items per response.
- The primary way to access Fair Work Week specific related data is the existing TimesheetPayReturn
  endpoint.
- This endpoint returns the costings for the Timesheet broken down by export code.
- Integration types include Timesheets, Point of Sale, and People Sync.
- Users generally want to be in Deputy as little as possible.
- Users of Deputy are able to change the settings for wage budgets between Daily and
  Weekly at will.
- It is best practice for integrations to always send the relevant daily timestamp
  instead of a single post for the week.
- Use the management endpoints known as supervise for adding employees.
- You can specify fields to update without including the entire payload.
- This can give some indication as to why penalties may have been applied to Timesheets
  when relevant.
- Access tokens last for twenty four hours
- Using a refresh token to renew an access token will invalidate it
- Employee API V2 is the recommended API to use going forward as the old API will
  be deprecated.
- An additional security header is required to be included in all payloads to the
  endpoint.
- Only employees with a SUBMITTED or APPROVED status will be returned.
- Pagination is supported via nextCursorelement.
- Field masks allow requesting specific data types.
- Updating an employees leave balance is a destructive change and amounts overwritten
  will not be retained.
- BaseRate can override the Employment Contract pay rate.
- Deputy uses hours based leave tracking
- Requires Manager Approval for the Leave Application
- Defines the periods of the week that the employee is unavailable to work.
- Both Timesheet and TimesheetPayReturn endpoints can be combined in a single request
  using joins.
- Every timesheet within the payload must be related to the PeriodId defined in the
  URL else the entire process will fail.
- The process to update an existing timesheet is the same as adding a new one.
- Allows users to add their own metrics via the Deputy UI.
- If the actual sales data is added successfully, you will get a response including
  information about the data that was saved.
- When using the bulk API method, the data may not be ready for retrieval or display
  within Deputy immediately.
- Webhooks allow your application to be informed of changes in real-time.
- Consider filtering webhooks to receive only necessary traffic.
- If you receive an empty array as the response, it means that no data is available
  for that metric in the time period specified.
- The API is destructive; all data in the payload will replace existing data.
- If employees are associated with the location, provide a target location id to migrate
  them to.
- Due to the 256kb data limit of SQS, this process is not suitable for Roster.Publish
  or Timesheet.Export Webhooks as these can contain large data sets.
- Webhooks do not perform catch-up tasks
- If a Webhook is disabled, any events which occur during the time the Webhook is
  turned off are lost and will not be sent when it is re-enabled.
- The API allows for filtering, aggregating, and pagination through various modifiers.
- This is a synchronous API; infrastructure should be designed accordingly.
- When adding a shift, a successful response will return a 200 HTTP status with an
  empty body.
- Default returns up to 500 records of shifts.
- Use the Resource API for targeted requests.
- Ensure you have the correct custom field set in the payload
- There is no validation on the custom field process, meaning it is possible to overwrite
  existing data in other custom fields
- If including a significant amount of data and a high searchDepth, the process may
  timeout.
- This API is in BETA and this page should be checked regularly for any updates.
- By default the v2 Shifts API looks at the previous 7 days.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Categories in Deputy are related to Journal entries.
- You cannot have overlapping labor models and your requests will be rejected if one
  already exists.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Contains all possible pay and leave rules that are applicable to employees.
- This endpoint will be deprecated at the end of 2023.
- You can only have one public application at a time
- Employees do not have to confirm if blnRequireConfirm is set to 0.
- Once user should be for the company as a whole, not an individual or for a customer.
- Use RS256 for the algorithm when generating the JWT token.
- Always pass in the partnerUserId when patching your users.
- If the Deputy session expires, you will need to create a new nonce to initiate a
  new session.
- Replace the strAwardCode and the ID with the values you got in steps 1 and 2.
- Set the hourly HourlyRate variable to the intended hourly rate.
- The Deputy business will be created in the root region of the API call. Our current
  provisioning API runs in the US region only.
- Embed users do not have access to once.deputy.com - unless they were previously
  employed by a non-embed Deputy account, and already have a user profile.
- Embed users do not have a Deputy login. Embed works in silent SSO concept, and we
  do a background SSO via the Partner Credentials before Deputy Embed loads.
- The number of users returned via the Partner Status API may differ from the number
  charged for via your invoice.
- The permanent token is only displayed once during generation, ensure to save it.
- The installation name and geographical location are important for the API calls.
errors:
- '400: Cannot change contact details to employee who has accepted invitation'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: Employee not onboarded using the Deputy HR onboarding system'
- '400: Bad Request - $ExceptionMessage'
- '401: Unauthorized - You are not allowed to edit this timesheet'
- '409: Conflict - You already have another timesheet in progress'
- '412: Precondition Failed - You are not allowed to edit this timesheet'
- '500: Internal Server Error - Unknown Error. Please contact support for assistance.'
- Ensure that if your AWS SQS is not setup for FIFO that you do not include a MessageGroupId
  because this will result in errors and the data will not save.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400: A partner name has not been provided (Mandatory)'
- '400: A first name has not been provided (Mandatory)'
- '400: A last name has not been provided (Mandatory)'
- '400: An email has not been provided (Mandatory)'
- '400: A business/portfolio name has not been provided (Mandatory)'
- '400: An external name has not been provided for the business (Mandatory)'
- '400: A Deputy account is already linked to this external ID'
- '400: Can''t create user - this email already has a Deputy account. Please reach
  out to the Deputy team.'
- '500: Something went wrong - please reach out to the Deputy team.'
- '400: Only accounts in downgraded or cancelled trials may be converted.'
- '400: Only accounts that are created by a specific embedded partner can be upgraded/downgraded
  by that embedded partner'
- '400: Hostname provided must be a valid Deputy URL'
auth_info:
  mentioned_objects: []
client:
  auth:
    type: oauth2
    location: header
    header_name: Authorization
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    scope: longlife_refresh_token
    redirectUri: http://localhost/
  base_url: https://{install}.{geo}.deputy.com
  headers:
    Content-Type: application/json
    Accept: application/json
    X-DP-HR-ONB-TOKEN: JWT token required
    aws_access_key_id: XXXXXXXXX
    aws_secret_access_key: YYYYYYYYYY
  paginator:
    type: cursor
    cursor_param: cursor
source_metadata: null
