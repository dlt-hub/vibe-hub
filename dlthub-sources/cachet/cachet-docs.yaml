resources:
- name: incident_update
  endpoint:
    path: /api/incidents/{incident}/updates/{update}
    method: DELETE
    data_selector: null
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: data
- name: incidents
  endpoint:
    path: /incidents
    method: GET
    data_selector: data
    params: {}
- name: incidents
  endpoint:
    path: /incidents
    method: GET
    data_selector: data
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: data
    params: {}
- name: component_group
  endpoint:
    path: /component-groups/{componentGroup}
    method: GET
    data_selector: data
    params: {}
- name: components
  endpoint:
    path: /components
    method: GET
    data_selector: data
    params:
      per_page: 123
      current_page: 123
- name: component
  endpoint:
    path: /components
    method: POST
    data_selector: data.attributes
    params: {}
- name: components
  endpoint:
    path: /components/{component}
    method: GET
    data_selector: data
- name: component
  endpoint:
    path: /components/{component}
    method: PUT
    data_selector: data
    params: {}
- name: component_groups
  endpoint:
    path: /component-groups
    method: GET
    data_selector: data
- name: component_groups
  endpoint:
    path: /component-groups
    method: POST
    data_selector: data
    params: {}
- name: component_groups
  endpoint:
    path: /component-groups/{componentGroup}
    method: PUT
    data_selector: data
    params: {}
- name: incidents
  endpoint:
    path: /incidents
    method: GET
    data_selector: data
- name: incident
  endpoint:
    path: /incidents
    method: POST
    data_selector: data
    params: {}
- name: incident
  endpoint:
    path: /incidents/{incident}
    method: GET
    data_selector: data
    params: {}
- name: incident
  endpoint:
    path: /incidents/{incident}
    method: PUT
    data_selector: data.attributes
    params: {}
- name: incident
  endpoint:
    path: /api/incidents/{incident}
    method: DELETE
    data_selector: No content
- name: incident_template
  endpoint:
    path: /incident-templates
    method: POST
    data_selector: data.attributes
    params: {}
- name: incident_template
  endpoint:
    path: /incident-templates/{incidentTemplate}
    method: GET
    data_selector: data.attributes
    params: {}
- name: incident_template
  endpoint:
    path: /api/incident-templates/{incidentTemplate}
    method: DELETE
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: data
- name: metrics
  endpoint:
    path: /metrics
    method: POST
    data_selector: data
    params: {}
- name: metric
  endpoint:
    path: /metrics/{metric}
    method: GET
    data_selector: data
- name: metric
  endpoint:
    path: /metrics/{metric}
    method: PUT
    data_selector: data.attributes
    params: {}
- name: metrics
  endpoint:
    path: /api/metrics/{metric}
    method: DELETE
- name: metric_points
  endpoint:
    path: /metrics/{metric}/points
    method: GET
    data_selector: data
- name: metric_points
  endpoint:
    path: /metrics/{metric}/points
    method: POST
    data_selector: data
    params: {}
- name: metrics
  endpoint:
    path: /api/metrics/{metric}/points/{metricPoint}
    method: DELETE
    data_selector: null
    params: {}
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: data
- name: schedules
  endpoint:
    path: /schedules
    method: POST
    data_selector: data
    params: {}
- name: schedule
  endpoint:
    path: /schedules/{schedule}
    method: GET
    data_selector: data
- name: schedules
  endpoint:
    path: /schedules/{schedule}
    method: PUT
    data_selector: data
- name: schedule
  endpoint:
    path: /api/schedules/{schedule}
    method: DELETE
- name: schedules
  endpoint:
    path: /api/schedules/{schedule}/updates/{update}
    method: DELETE
    data_selector: No content
- name: webhooks
  endpoint:
    path: /manage/webhooks
    method: POST
- name: settings
  endpoint:
    path: /settings
    method: GET
    data_selector: settings
    params: {}
- name: json
  endpoint:
    path: /json
    method: GET
notes:
- Unlike Incidents, Cachet indexes component statuses starting at `1`.
- Cachet uses a zero-based numbering scheme to identify incident statuses.
- When creating or updating an incident, it’s important that you specify the `status`
  of the incident.
- 'Cachet requires a few things to run: ext-gd, ext-simplexml, mcrypt, ext-xml installed.'
- You should install Composer globally.
- By default, Cachet comes with a .env.example file. You’ll need to rename this file
  to just .env regardless of what environment you’re working on.
- If you’re using SQLite then your .env file should not contain a DB_HOST key.
- You’ll also need to touch ./database/database.sqlite and give it the required permissions.
- Never change the APP_KEY after installation on production environment. This will
  result in all encrypted/hashed data being lost.
- If you see a 500 error when visiting your status page, you may need to run chmod
  -R 777 storage for it to work or rm -rf bootstrap/cache/*.
- Never change the APP_KEY after installation on production environment.
- 'You’ll need at least the following installed on your server: ext-gd, ext-simplexml,
  mcrypt, ext-xml, ext-mbstring, ext-tokenizer'
- Whilst we support SQLite, we advise not using it for status pages with a high amount
  of traffic.
- Ensure your MySQL database has been updated with the correct timezone information.
  This will ensure that metrics are shown correctly.
- Cachet’s Emoji support is disabled by default.
- Under some circumstances it’s possible to hit GitHub’s API rate limit quickly.
- This policy encompasses all trademarks and service marks, whether they are registered
  or not.
- Anyone wishing to use any of Cachet’s trademarks in a manner other than the acceptable
  uses listed above, including but not limited to marketing, promotion or advertising,
  or on software derivative of Cachet software, must obtain Cachet’s express, written
  permission in advance.
- Cachet provides a RESTful JSON API that allows you to interact with the status page
  programmatically.
- The Cachet API is rate-limited to prevent abuse.
- The rate limit is set to 300 requests per minute per IP address.
- Cachet will return the X-RateLimit-Limit, X-RateLimit-Remaining, and X-RateLimit-Reset
  headers in the response to provide information about the rate limit.
- You can override the default rate limit by setting the CACHET_API_RATE_LIMIT environment
  variable.
- Paginated set of Component
- The response is of type object
- Available sorts are `name`, `id`. You can sort by multiple options by separating
  them with a comma.
- To sort in descending order, use `-` sign in front of the sort.
- Available includes are `components`, `componentsCount`, `componentsExists`.
- Bearer authentication header of the form Bearer <token>, where <token> is your auth
  token.
- Paginated set of Schedule
- The demo is automatically reset every 30 minutes. Other users may be using the demo
  at the same time as you, which can cause unexpected behaviour.
- Cachet currently supports various events triggered by webhooks.
- The Oh Dear integration will only import the last 7 days of incidents.
errors:
- To request the use of the trademarks in a manner or for a purpose not expressly
  permitted in these guidelines, including use for any purpose of the logos, please
  email [email protected] to discuss.
- If you want to report misuse of a Cachet trademark, please email [email protected].
- 401 Unauthorized
auth_info:
  mentioned_objects: []
client:
  auth:
    location: header
    header_name: Authorization
    type: apikey
    username: MAIL_USERNAME
    password: MAIL_PASSWORD
  base_url: https://status.ohdear.app
  headers:
    Accept: application/json
    Content-Type: application/json
  paginator:
    type: offset
    page_size_param: per_page
    default_page_size: 123
source_metadata: null
