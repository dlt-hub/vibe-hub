resources:
- name: ConsentManager
  endpoint:
    path: /sdk/consent_manager
    method: GET
- name: list_cookie_consent_configurations
  endpoint:
    path: /cookie-consent-configurations
    method: GET
    data_selector: results
    params:
      limit: 100
- name: update_portal_message
  endpoint:
    path: /portal-messages/{messageId}
    method: PUT
    data_selector: messageId
    params: {}
- name: Update Portal Message
  endpoint:
    path: /update-portal-message/{messageId}
    method: POST
    data_selector: read
    params:
      dsarId: string
- name: subject
  endpoint:
    path: /v2/subject/merge
    method: POST
- name: consent
  endpoint:
    path: /v2/consents/check/{subject-id}
    method: GET
- name: create_subject_profile
  endpoint:
    path: /v2/subject
    method: POST
- name: ConsentManager
  endpoint:
    path: /consent/manager
    method: POST
    data_selector: consentData
- name: ConsentUiBuilder
  endpoint:
    path: /consent/ui
    method: GET
    data_selector: uiData
- name: ConsentManager
  endpoint:
    path: /consentmanager
    method: POST
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: user_search
  endpoint:
    path: /contacts
    method: GET
    params:
      email: '{{email}}'
- name: user_data
  endpoint:
    params:
      api_key: API Key
      base_id: Base ID
      table_name: Table Name
- name: user_search
  endpoint:
    path: /api/2/usersearch
    method: GET
    data_selector: user
    params: {}
- name: user_profile
  endpoint:
    path: /v1/userprofile
    method: GET
    data_selector: user_id
    params:
      get_cohort_ids: 'true'
- name: data_deletion
  endpoint:
    path: /api/2/deletions/users
    method: POST
    data_selector: user_id
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    params:
      opt_fields: gid,resource_type,name,email,photo,workspaces
- name: workspaces
  endpoint:
    path: /workspaces
    method: GET
    params:
      opt_fields: gid,resource_type,name,email_domains,is_organization
- name: user_search
  endpoint:
    path: /users/{{gid}}
    method: GET
    params:
      opt_fields: gid,resource_type,name,email,photo,workspaces
- name: user_search
  endpoint:
    path: /user/search
    method: GET
    data_selector: records
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: privacy_delete_request
  endpoint:
    path: /privacy/delete-request
    method: POST
- name: Data Discovery
- name: User Search
- name: Data Deletion
- name: hard_bounces
  endpoint:
    path: /email/hard_bounces
    method: GET
- name: unsubscribes
  endpoint:
    path: /email/unsubscribes
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns/list
    method: GET
- name: canvas
  endpoint:
    path: /canvas/list
    method: GET
- name: feed
  endpoint:
    path: /feed/list
    method: GET
- name: segments
  endpoint:
    path: /segments/list
    method: GET
- name: content_blocks
  endpoint:
    path: /content_blocks/list
    method: GET
- name: export_ids
  endpoint:
    path: /users/export/ids
    method: POST
- name: subscription_status
  endpoint:
    path: /subscription/user/status
    method: GET
- name: user_me
  endpoint:
    path: /users/me
    method: GET
- name: scheduled_events
  endpoint:
    path: /scheduled_events
    method: GET
- name: scheduled_events_user_search
  endpoint:
    path: /scheduled_events
    method: GET
    params:
      user: userLink
      invitee_email: ''
- name: scheduled_events_organization_search
  endpoint:
    path: /scheduled_events
    method: GET
    params:
      user: userLink
      organization: orgLink
      invitee_email: ''
- name: users
  endpoint:
    path: /users
    method: GET
- name: user_detail
  endpoint:
    path: /users/:userId
    method: GET
- name: delete_user
  endpoint:
    path: /users/:userId
    method: DELETE
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: promotional_credits
  endpoint:
    path: /promotional_credits
    method: GET
- name: invoices
  endpoint:
    path: /invoices
    method: GET
- name: credit_notes
  endpoint:
    path: /credit_notes
    method: GET
- name: unbilled_charges
  endpoint:
    path: /unbilled_charges
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: gifts
  endpoint:
    path: /gifts
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: quotes
  endpoint:
    path: /quotes
    method: GET
- name: data
  endpoint:
    path: /api/v1/data
    method: GET
- name: user_search
  endpoint:
    params:
      required_scopes: signature
- name: sessions
  endpoint:
    path: /sessions/v2
    method: GET
    params:
      email: <email>
- name: contacts
  endpoint:
    path: contacts
    method: GET
    data_selector: null
    params:
      required_scopes:
      - contact_read
      - all_contact_read
- name: users_list
  endpoint:
    path: users/list
    method: GET
    data_selector: null
    params:
      required_scopes:
      - user_read
- name: contacts_email_search
  endpoint:
    path: contacts?email=$email
    method: GET
    data_selector: null
    params:
      required_scopes:
      - contact_read
      - all_contact_read
- name: contacts_deletion
  endpoint:
    path: contacts/$contactId
    method: DEL
    data_selector: null
    params:
      required_scopes:
      - contact_write
- name: contacts
  endpoint:
    path: contacts
    method: GET
- name: agents
  endpoint:
    path: agents
    method: GET
- name: user_search
  endpoint:
    path: /search/users
    method: GET
    data_selector: null
    params: {}
- name: user_details
  endpoint:
    path: /users/octocat
    method: GET
    data_selector: null
    params: {}
- name: candidates
  endpoint:
    path: /candidates
    method: GET
- name: scorecards
  endpoint:
    path: /scorecards
    method: GET
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: eeoc
  endpoint:
    path: /eeoc
    method: GET
- name: candidate_by_id
  endpoint:
    path: candidates/{{user ID}}
    method: GET
- name: candidate_by_email
  endpoint:
    path: candidates/{{email}}
    method: GET
- name: customers
  endpoint:
    path: customers
    method: GET
- name: conversations
  endpoint:
    path: conversations
    method: GET
- name: conversations_all
  endpoint:
    path: conversations?status=all
    method: GET
- name: conversation_threads
  endpoint:
    path: conversations/:conversationId/threads
    method: GET
- name: users
  endpoint:
    path: users
    method: GET
- name: customer_search
  endpoint:
    path: customers?query=(email:"$email")
    method: GET
- name: conversation_email_search
  endpoint:
    path: conversations?query=(customerEmail:"$email")&status=all
    method: GET
- name: user_email_search
  endpoint:
    path: users?email=$email
    method: GET
- name: contacts_search
  endpoint:
    path: crm/v3/objects/contacts/search
    method: POST
    data_selector: records
- name: companies_search
  endpoint:
    path: crm/v3/objects/companies/search
    method: POST
    data_selector: records
- name: tickets_search
  endpoint:
    path: crm/v3/objects/tickets/search
    method: POST
    data_selector: records
- name: calls_search
  endpoint:
    path: crm/v3/objects/calls/search
    method: POST
    data_selector: records
- name: emails_search
  endpoint:
    path: crm/v3/objects/emails/search
    method: POST
    data_selector: records
- name: meetings_search
  endpoint:
    path: crm/v3/objects/meetings/search
    method: POST
    data_selector: records
- name: notes_search
  endpoint:
    path: crm/v3/objects/notes/search
    method: POST
    data_selector: records
- name: tasks_search
  endpoint:
    path: crm/v3/objects/tasks/search
    method: POST
    data_selector: records
- name: deals_search
  endpoint:
    path: crm/v3/objects/deals/search
    method: POST
    data_selector: records
- name: application_role
  endpoint:
    path: /rest/api/3/applicationrole
    method: GET
- name: record
  endpoint:
    path: /rest/api/3/record
    method: GET
- name: dashboard
  endpoint:
    path: /rest/api/3/dashboard
    method: GET
- name: group_user_picker
  endpoint:
    path: /rest/api/3/groupuserpicker
    method: GET
- name: auto_complete_data
  endpoint:
    path: /rest/api/3/autocompletedata
    method: GET
- name: label
  endpoint:
    path: /rest/api/3/label
    method: GET
- name: my_permissions
  endpoint:
    path: /rest/api/3/mypermissions
    method: GET
- name: permissions
  endpoint:
    path: /rest/api/3/permissions
    method: GET
- name: permission_scheme
  endpoint:
    path: /rest/api/3/permissionscheme
    method: GET
- name: project_category
  endpoint:
    path: /rest/api/3/projectCategory
    method: GET
- name: project_type
  endpoint:
    path: /rest/api/3/project/type
    method: GET
- name: screen_scheme
  endpoint:
    path: /rest/api/3/screenscheme
    method: GET
- name: server_info
  endpoint:
    path: /rest/api/3/serverInfo
    method: GET
- name: user
  endpoint:
    path: /rest/api/3/user
    method: GET
- name: user_properties
  endpoint:
    path: /rest/api/3/user/properties
    method: GET
- name: search
  endpoint:
    path: /rest/api/3/search
    method: GET
- name: profiles
  endpoint:
    path: api/profiles/:id
    method: GET
- name: user_search
  endpoint:
    path: api/profiles
    method: GET
    params:
      filter: equals(email, :email)
- name: data_deletion
  endpoint:
    path: api/data-privacy-deletion-jobs/
    method: POST
- name: user_search
  endpoint:
    path: /user/search
    method: GET
    data_selector: users
    params: {}
- name: list_members
  endpoint:
    path: lists/:listId/members
    method: GET
- name: search_members
  endpoint:
    path: search-members
    method: GET
- name: users
  endpoint:
    path: users
    method: GET
- name: prospects
  endpoint:
    path: prospects
    method: GET
- name: complianceRequests
  endpoint:
    path: complianceRequests
    method: POST
- name: leads
  endpoint:
    path: rest/v1/leads.json
    method: GET
    data_selector: records
- name: lead_list_membership
  endpoint:
    path: rest/v1/leads/{{lead ID}}/listMembership.json
    method: GET
    data_selector: records
- name: lead_program_membership
  endpoint:
    path: rest/v1/leads/{{lead ID}}/programMembership.json
    method: GET
    data_selector: records
- name: lead_smart_campaign_membership
  endpoint:
    path: rest/v1/leads/{{lead ID}}/smartCampaignMembership.json
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: userservice/management/v1/users/{{user ID}}/user.json
    method: GET
    data_selector: records
- name: user_roles
  endpoint:
    path: userservice/management/v1/users/{{user ID}}/roles.json
    method: GET
    data_selector: records
- name: user_search
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: user_factors
  endpoint:
    path: /users/{{userIds}}/factors
    method: GET
- name: user_search
  endpoint:
    path: /users?search=profile.email eq "{{email}}"
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: notifications
  endpoint:
    path: /notifications
    method: GET
- name: log_entries
  endpoint:
    path: /log_entries
    method: GET
- name: incidents
  endpoint:
    path: /incidents
    method: GET
- name: business_services
  endpoint:
    path: /business_services
    method: GET
- name: vendors
  endpoint:
    path: /vendors
    method: GET
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: user_sessions
  endpoint:
    path: /users/{userId}/sessions
    method: GET
- name: status_update_notification_rules
  endpoint:
    path: /users/{userId}/status_update_notification_rules
    method: GET
- name: audit_records
  endpoint:
    path: /users/{userId}/audit/records
    method: GET
- name: data_discovery
  endpoint:
    path: /services/data/$salesforceApiVersion/query
    method: GET
- name: user_search
  endpoint:
    path: /services/data/$salesforceApiVersion/query
    method: GET
- name: data_deletion
  endpoint:
    path: /services/data/$salesforceApiVersion/sobjects/${sObject.sObjectName}/$recordId
    method: DELETE
- name: contacts
  endpoint:
    path: marketing/contacts
    method: GET
- name: contacts_search
  endpoint:
    path: marketing/contacts/search
    method: POST
- name: user_search
  endpoint:
    path: /user/search
    method: GET
    data_selector: users
- name: user_search
  endpoint:
    path: /conversations.twilio.com/v1/
    method: GET
    data_selector: records
- name: customer_search
  endpoint:
    path: /admin/api/2021-07/customers/search.json
    method: GET
- name: customer_query_email
  endpoint:
    path: /admin/api/2021-07/customers.json?query=email:{{email}}
    method: GET
- name: customer_query_phone
  endpoint:
    path: /admin/api/2021-07/customers.json?query=phone:{{phoneNumber}}
    method: GET
- name: customer_query_address1
  endpoint:
    path: /admin/api/2021-07/customers.json?query=address1:{{address}}
    method: GET
- name: customer_query_address2
  endpoint:
    path: /admin/api/2021-07/customers.json?query=address2:{{address}}
    method: GET
- name: customer_query_first_last_name
  endpoint:
    path: /admin/api/2021-07/customers.json?query=first_name:{{firstName}}&query=last_name:{{lastName}}
    method: GET
- name: customer_query_full
  endpoint:
    path: /admin/api/2021-07/customers.json?query=first_name:{{firstName}}&query=last_name:{{lastName}}&query=address:{{address}}
    method: GET
- name: user_profile
  endpoint:
    path: /users.profile.get
    method: GET
- name: user_presence
  endpoint:
    path: /users.getPresence
    method: GET
- name: user_lookup_by_email
  endpoint:
    path: /users.lookupByEmail
    method: GET
- name: search_messages
  endpoint:
    path: /search.messages
    method: GET
- name: sheet
  endpoint:
    path: /sheets/{sheetId}
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: charges
  endpoint:
    path: /charges
    method: GET
- name: checkout_sessions
  endpoint:
    path: /checkout/sessions
    method: GET
- name: invoices
  endpoint:
    path: /invoices
    method: GET
- name: disputes
  endpoint:
    path: /disputes
    method: GET
- name: refunds
  endpoint:
    path: /refunds
    method: GET
- name: customer_search
  endpoint:
    path: /customers/search?query=email:"$email"
    method: GET
- name: contacts
  endpoint:
    path: contacts/:id
    method: GET
- name: user_search
  endpoint:
    path: /user/search
    method: GET
    data_selector: users
    params: {}
- name: data_deletion
  endpoint:
    path: /data/deletion
    method: DELETE
    data_selector: results
    params: {}
- name: form_responses
  endpoint:
    path: forms/{form_id}/responses
    method: GET
- name: user_search
  endpoint:
    path: forms/:formId/responses
    method: GET
    params:
      query: $email
- name: users
  endpoint:
    path: users
    method: GET
    data_selector: read
- name: tickets
  endpoint:
    path: tickets
    method: GET
    data_selector: read
- name: help_center_articles_comments
  endpoint:
    path: help_center/articles/:articleId/comments
    method: GET
    data_selector: read
- name: community_posts
  endpoint:
    path: community/posts
    method: GET
    data_selector: read
- name: community_posts_comments
  endpoint:
    path: community/posts/:postId/comments
    method: GET
    data_selector: read
- name: user_search
  endpoint:
    path: user/search.json?query=<email>
    method: GET
    data_selector: read
- name: data_deletion_user
  endpoint:
    path: user/:userId
    method: DELETE
    data_selector: write
- name: data_deletion_ticket
  endpoint:
    path: tickets/:ticketId
    method: DELETE
    data_selector: write
- name: BigQuery
  endpoint:
    path: /v2/projects/{projectId}/datasets/{datasetId}/tables
    method: GET
    data_selector: tables
- name: database
  endpoint:
    params:
      master_key: Your Master Key
      account_name: Your Cosmos DB Account Name
      database_name: Your Database Name
- name: request_import
  endpoint:
    path: /import/requests
    method: POST
    data_selector: requests
    params: {}
notes:
- Routes that involve creating, updating, or merging subjects require the Osano API
  key.
- All other routes require the Unified Consent API key.
- The configId and customerId parameters are not optional and must match the values
  on the Osano website.
- The Osano SDK does not request tracking authorization on your behalf, you must do
  this in your app
- If the user has not made a decision about tracking, you should request tracking
  authorization and notify the Osano SDK
- You must create a CSV with all of the required headers below exactly as they are
  written.
- Imports with additional rows and/or incorrect naming conventions will fail to be
  uploaded.
- The CSV file size is restricted to 1MB.
- Ensure your API key is active and not expired.
- Check for typos or extra spaces in the key.
- Verify you're using the correct key type (e.g. Read Only vs Server Side).
- API keys inherit permissions at creation time.
- If you updated permissions later, regenerate the key.
- Please cross-reference your vendor dashboard setting, there should be a specific
  section for checking your scopes and it varies by vendors.
- Some integrations require a customer-specific subdomain.
- Basic Authorization with email as username, Api Key as password.
- API keys can be generated through the Aha! user interface.
- Each provider you connect may require different information.
- Requires read-only access to establish a connection to data providers
- An admin must have the required scopes (subscriptions:write, privacy_requests:write)
  to establish a connection via oauth.
- Requires read-only access to establish a connection
- You will need to create an Access token and the store hash associated with that
  Auth token. It’s only shown once, so you’ll need to copy it somewhere.
- Bill.com is providing BILL API access only for select partners. Please reach out
  to your account manager for more information.
- Requires read-only access to establish a connection.
- Requires read-only access to connect to data providers.
- Requires read-only access to establish a connection to these providers.
- Bearer token authentication
- An admin must create a Token and enter that information in Osano to establish a
  connection via apiKey.
- Basic authorization with Api Username as username and Api Key as password
- We require, at minimum, read-only access to establish a connection to these providers.
- Basic Authorization with Api Key as username and blank password
- API Key can be generated via Account & Setup > Business Operations > API Tokens.
  Ensure the permissions listed below are checked.
- Authorization bearer with oauth access token
- Requires, at minimum, read-only access to establish a connection
- Admin must create an API Key and enter it in Osano
- Admin must have the required scopes to establish a connection via oauth.
- Basic auth with API Key as the username and empty password
- One click connection
- Data deletion is a hard delete.
- Api Key can be created in Settings > Create Additional API Key
- Authorization header with api key. No bearer prefix
- 'Access Tokens can be generated at: https://my.extole.com/security-center.'
- Pass api_key as a query parameter in each API call
- Data deletion is not supported as this API only supports fetching form submissions
- The bearer token can be accessed from the Formstack admin API portal under the SCIM
  tokens section.
- The user has to be verified with email and given access to the app before the user
  can be deleted.
- 'Attach api key to Authorization header, example: Token token=your_api_key'
- Oauth2 access token attached to Authorization header with Bearer prefix
- Permanent deletion is not yet supported through their API
- Requires admin-level account to grant access
- GitLab requires an administrator to be authenticated to read user information.
- An admin must create a Service Account JSON Key with the required scopes (BigQuery
  Data Viewer, BigQuery Job User) and enter that information in Osano to establish
  a connection via apiKey.
- While the Gorgias API technically supports user deletion, we no longer offer this
  feature because 'user' refers to your company's employees, whose records cannot
  be deleted with DSAR requests.
- Admin must create a OAuth with the required scopes
- Requires read-only access to establish a connection to data providers.
- Instructions for obtaining your Iterable API Key. Please use server side as the
  API key type.
- An admin must create a OAuth and enter that information in Osano to establish a
  connection via oauth.
- When authorizing with OAuth, you may encounter a screen stating that the app has
  not been reviewed by Klaviyo (see attached). This is expected behavior and does
  not indicate an issue.
- Requires read-only access to establish a connection to providers
- Bearer authentication
- You can find or create your client ID and Secret through the admin panel under >
  Integration Manager
- Requires a dedicated API User account within Mapp platform for access
- An admin must have the required scopes (users.read, complianceRequests.read, complianceRequests.write,
  prospects.read) to establish a connection via oauth.
- You need to make sure to have Office 365 E1 license for your account
- Ensure Microsoft Teams Graph Service and Skype Teams Calling API Service are enabled
  for users to sign-in.
- The url must contain https:// and no trailing slash
- Miro automatically pulls organization ID from the authenticated user.
- Ensure you check 'Expire user authorization token' when creating your app.
- API Key can be found in the NoCRM admin panel under the integrations section.
- Requires read-only access to establish a connection to the providers.
- Require, at minimum, read-only access to establish a connection to these providers.
- You must use 0.0.0.0 for the IP Address in the whitelist to allow any IP
- Accounts and contacts are deleted according to the Pipeliner GDPR guide https://help.pipelinersales.com/en/articles/2327076-gdpr-and-managing-your-client-s-data-in-pipeliner
- Depending on how much data you have stored in Salesforce, the initial sync may take
  a few days.
- API Key required for authentication
- API Key required for access. Generate from an admin account.
- Ensure you have, at minimum, source admin access to all sources and destinations
  you want to discover within Segment.
- Have your API Key ready.
- Authorization with auth token
- An admin must create an API Key and enter that information in Osano to establish
  a connection.
- Exchange apiUserId and apiSecret for an access token using the oauth/access_token
  endpoint, then use as an access_token query parameter for each subsequent request.
- Data deletion is not fully implemented as guests are not deletable.
- Each provider may require different information
- Please ensure your Stripe version is set to 2020-08-27 or later in the Stripe Developer
  Dashboard for user search.
- An admin must have the required scopes (contacts_read, contacts_write) to establish
  a connection via oauth.
- API key in the authorization header
- Basic auth API Key as the username and empty password
- An admin must establish a connection via OAuth.
- API Key is required for authentication
- You'll need to register and setup the Wrike API application first.
- Please visit Wrike API Documentation
- The store_id (app key) and secret key can be accessed by following the instructions
  in Yotpo API Documentation
- This integration supports Zendesk Support and Guide.
- Zoho requires you get a token from a region data center thus requiring the accounts
  url as an input.
- OAuth is the recommended authentication method for Zoho Projects.
- Ensure your postgres/mySQL instance is compatible with the Data API.
- Enable the Data API for your RDS instance.
- Requires service account with BigQuery Data Viewer and BigQuery Job User roles
- Have your Client ID, Tenant ID and Client Secret ready.
- 'Make sure you have the following permissions for your application in your Microsoft
  Azure portal: Application.Read.All'
- User must have read permissions to all applications within Okta at minimum.
- For DSAR integration, user must have read permissions to okta users.
- Ensure you have, at minimum, read access to all applications you want to discover
  within OneLogin.
- Ensure the secret has the proper permissions to access the Redshift cluster.
- Have your AWS credentials, cluster identifier, secret ARN, AWS region, and database
  name ready.
- Ensure you have administrator access to your RudderStack account.
- Have your Workspace Token ready. This requires Admin access
- You must create a CSV with all of the required headers exactly as they are written.
errors:
- '200: Successful request'
- '400: Bad request'
- '404: Not found'
- '401 Unauthorized: Check API key validity or expiration'
auth_info:
  mentioned_objects:
  - Osano API key
  - Unified Consent API key
  - API Key
  - admin
  - api
  - sudo
  - admin_mode
  - Private App Access Token
  - OAuth
  - Bearer Token
  - contacts_read
  - contacts_write
  - Scopes
client:
  auth:
    type: oauth2
    location: body
    header_name: Authorization
    client_id: OneLogin Client Id
    client_secret: OneLogin Client Secret
    refresh_token: Refresh Token
    headers:
      mmApiKey: '{{ dlt.secrets[''api_key''] }}'
    tenant_id: '{{ dlt.secrets[''tenant_id''] }}'
    scopes:
    - User.Read.All
    - GroupMember.Read.All
    - TeamMember.Read.All
    - Channel.ReadBasic.All
    token_url: oauth/access_token
    scope: https://graph.microsoft.com/.default
  base_url: https://$subdomain.zendesk.com/api/v2
  headers:
    Content-Type: application/json
    API-AppId: ''
    API-Version: ''
    API-Username: ''
    API-Password: ''
    Authorization: Your JumpCloud API Key
    Api-Key: your_api_key
    Api-Appid: your_app_id
    x-linkname: site address
    X-TM-Username: '{{ dlt.secrets[''textmagic_username''] }}'
    Accept: application/json
source_metadata: null
