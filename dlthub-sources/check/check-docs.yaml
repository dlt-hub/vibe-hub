resources:
- name: tax_deposit
  endpoint:
    path: /companies//tax_deposits
    method: GET
- name: enrollment_profile
  endpoint:
    path: /enrollment_profile
    method: GET
    data_selector: data
    params: {}
- name: contractors
  endpoint:
    path: /contractors
    method: GET
- name: tax_setup
  endpoint:
    path: /employees//components/tax_setup
    method: POST
- name: pay_history
  endpoint:
    path: /companies//components/pay_history
    method: POST
    data_selector: ''
    params: {}
- name: signatory_agreements
  endpoint:
    path: /companies//components/signatory_agreements
    method: POST
    data_selector: ''
    params: {}
- name: team_setup
  endpoint:
    path: /companies//components/team_setup
    method: POST
- name: business_details
  endpoint:
    path: /companies//components/business_details
    method: POST
    data_selector: updated_fields
    params: {}
- name: authorization_documents
  endpoint:
    path: /companies//components/authorization_documents
    method: POST
- name: filing_authorization
  endpoint:
    path: /companies//components/filing_authorization
    method: POST
- name: payment_setup
  endpoint:
    path: /employees//components/payment_setup
    method: POST
- name: companies
  endpoint:
    path: /companies
    method: GET
- name: paydays
  endpoint:
    path: /companies//paydays
    method: GET
    data_selector: paydays
    params: {}
- name: companies
  endpoint:
    path: /companies/
    method: GET
- name: company
  endpoint:
    path: /companies
    method: post
- name: company
  endpoint:
    path: /companies/{company}
    method: get
- name: company
  endpoint:
    path: /companies
    method: GET
    data_selector: companies
    params: {}
- name: w2_preview
  endpoint:
    path: /companies//reports/w2_preview
    method: GET
    data_selector: data
- name: signatories
  endpoint:
    path: /companies/{company}/signatories
    method: GET
- name: federal_ein_verification
  endpoint:
    path: /federal_ein_verification
    method: GET
    data_selector: records
- name: federal_ein_verifications
  endpoint:
    path: /companies//federal_ein_verifications
    method: GET
    data_selector: Federal EIN Verification objects
- name: workplace
  endpoint:
    path: /workplaces
    method: post
- name: employee
  endpoint:
    path: /employees/{employee}
    method: get
- name: signatory
  endpoint:
    path: /signatory
    method: GET
    data_selector: records
- name: workplaces
  endpoint:
    path: /workplaces
    method: GET
- name: employees
  endpoint:
    path: /employees
    method: GET
    data_selector: employees
    params: {}
- name: employee
  endpoint:
    path: /services/data/vXX.X/sobjects/Employee
    method: GET
    data_selector: records
    params: {}
- name: payments
  endpoint:
    path: /contractors/{contractor}/payments
    method: GET
- name: employee_forms
  endpoint:
    path: /employees//forms
    method: GET
    data_selector: employee_forms
    params: {}
- name: contractor
  endpoint:
    path: /your/contractor/endpoint
    method: GET
    data_selector: records
- name: employee
  endpoint:
    path: /employees
    method: POST
- name: paystubs
  endpoint:
    path: /employees/{employee}/paystubs
    method: GET
- name: paystub
  endpoint:
    path: /employees//paystubs/
    method: GET
    data_selector: paystub
- name: reveal
  endpoint:
    path: /employees//reveal
    method: GET
- name: workplace
  endpoint:
    path: /workplaces
    method: GET
    data_selector: workplaces
    params: {}
- name: payroll
  endpoint:
    path: /payrolls
    method: GET
    data_selector: records
    params: {}
- name: bank_accounts
  endpoint:
    path: /bank_accounts
    method: GET
    data_selector: records
- name: contractor
  endpoint:
    path: /contractors
    method: POST
- name: payments
  endpoint:
    path: /contractors//payments/
    method: GET
- name: bank_account
  endpoint:
    path: /bank_accounts
    method: GET
    data_selector: bank_accounts
    params: {}
- name: bank_account_reveal
  endpoint:
    path: /bank_accounts//reveal
    method: GET
- name: contractor_forms
  endpoint:
    path: /contractors//forms
    method: GET
    data_selector: forms
- name: net_pay_split
  endpoint:
    path: /net_pay_splits
    method: GET
    data_selector: splits
    params: {}
- name: bank_account
  endpoint:
    path: /bank_accounts/
    method: PATCH
- name: payroll_preview
  endpoint:
    path: /payrolls/preview
    method: GET
    data_selector: preview
    params: {}
- name: paper_checks
  endpoint:
    path: /payrolls/reports/paper_checks
    method: GET
- name: payroll_preview
  endpoint:
    path: /payroll/preview
    method: GET
    data_selector: status
    params: {}
- name: payroll_approve
  endpoint:
    path: /payrolls//approve
    method: POST
- name: payrolls
  endpoint:
    path: /payrolls
    method: GET
- name: companies
  endpoint:
    path: /companies
    method: get
- name: payrolls
  endpoint:
    path: /payrolls
    method: get
- name: employees
  endpoint:
    path: /employees
    method: get
- name: earning
  endpoint:
    path: /earnings
    method: GET
    data_selector: records
    params: {}
- name: net_pay_splits
  endpoint:
    path: /net_pay_splits
    method: GET
    data_selector: net_pay_splits
    params:
      required: employee or contractor
- name: payroll_totals
  endpoint:
    path: /path/to/payroll/totals
    method: GET
    data_selector: totals
    params: {}
- name: companies
  endpoint:
    path: /companies
    method: get
- name: payrolls
  endpoint:
    path: /payrolls
    method: get
- name: employees
  endpoint:
    path: /employees
    method: get
- name: payroll_items
  endpoint:
    path: /payroll_items
    method: GET
    data_selector: records
    params: {}
- name: payroll_item
  endpoint:
    path: /payroll_items
    method: POST
- name: delete_contractor_payments
  endpoint:
    path: /contractor_payments/
    method: DELETE
- name: contractor_payments
  endpoint:
    path: /contractor_payments
    method: GET
- name: external_payrolls
  endpoint:
    path: /external_payrolls
    method: get
- name: payroll_item
  endpoint:
    path: /payroll/items
    method: GET
    data_selector: items
    params: {}
- name: benefit
  endpoint:
    path: /benefits
    method: POST
- name: paper_check
  endpoint:
    path: /contractor/payment/check
    method: GET
    headers:
      Accept: application/pdf
- name: contractor_payment
  endpoint:
    data_selector: records
- name: pay_schedule
  endpoint:
    data_selector: id
    params: {}
- name: benefit
  endpoint:
    path: /benefits/
    method: PATCH
- name: payroll_items
  endpoint:
    path: /payroll_items/
    method: delete
- name: external_payrolls
  endpoint:
    path: /external_payrolls/
    method: GET
- name: paydays
  endpoint:
    path: /pay_schedules//paydays
    method: GET
    data_selector: paydays
    params: {}
- name: pay_schedules
  endpoint:
    path: /pay_schedules
    method: GET
- name: contractor_payment
  endpoint:
    path: /contractor_payments
    method: POST
    data_selector: id
    params: {}
- name: payroll
  endpoint:
    path: /payrolls
    method: GET
    data_selector: items
    params: {}
- name: payroll_item
  endpoint:
    path: /path/to/payroll_item
    method: GET
    data_selector: records
    params: {}
- name: benefit
  endpoint:
    path: /benefits/{benefit}
    method: GET
- name: benefits
  endpoint:
    path: /benefits
    method: GET
    data_selector: benefits
    params: {}
- name: benefit
  endpoint:
    path: /benefits
    method: DELETE
- name: pay_schedule
  endpoint:
    path: /pay_schedules
    method: post
- name: benefit
  endpoint:
    path: /benefits
    method: GET
    data_selector: records
    params: {}
- name: deduction
  endpoint:
    path: /path/to/deduction
    method: GET
    data_selector: deductions
    params: {}
- name: company_benefit
  endpoint:
    path: /company/benefits
    method: GET
    data_selector: benefits
    params: {}
- name: company_benefit
  endpoint:
    path: /company_benefits
    method: POST
- name: earning_rate
  endpoint:
    path: /earning_rates
    method: post
- name: benefit_values
  endpoint:
    path: /benefit/values
    method: GET
    data_selector: values
    params: {}
- name: company_tax_documents
  endpoint:
    path: /documents/company_tax_documents
    method: GET
    data_selector: documents
- name: company_authorization_documents
  endpoint:
    path: /documents/company_authorization_documents
    method: GET
    data_selector: documents
- name: employee_tax_documents
  endpoint:
    path: /documents/employee_tax_documents
    method: GET
    data_selector: documents
- name: contractor_tax_documents
  endpoint:
    path: /documents/contractor_tax_documents
    method: GET
    data_selector: documents
- name: setup_documents
  endpoint:
    path: /documents/setup_documents
    method: GET
    data_selector: documents
- name: earning_code
  endpoint:
    path: /earning_codes/{earning_code}
    method: get
- name: earning_code
  endpoint:
    path: /earning_codes
    method: post
- name: company_benefits
  endpoint:
    path: /company_benefits
    method: get
- name: earning_rates
  endpoint:
    path: /earning_rates
    method: GET
- name: earning_rate
  endpoint:
    path: /earning_rates
    method: get
- name: earning_rate
  endpoint:
    path: /earning_rates/
    method: GET
- name: companies
  endpoint:
    path: /companies
    method: get
- name: company
  endpoint:
    path: /companies/{company_id}
    method: get
- name: earning_codes
  endpoint:
    path: /earning_codes/{earning_code}
    method: get
- name: company_authorization_document
  endpoint:
    path: /documents/company_authorization_documents//download
    method: GET
    data_selector: binary data
- name: earning_code
  endpoint:
    path: /earning_codes
    method: GET
    data_selector: earning_codes
    params: {}
- name: earning_codes
  endpoint:
    path: /earning_codes
    method: GET
- name: forms
  endpoint:
    path: /forms
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: earning_rate
  endpoint:
    path: /earning_rates
    method: GET
    data_selector: records
    params: {}
- name: company_authorization_documents
  endpoint:
    path: /documents/company_authorization_documents
    method: GET
    data_selector: records
    params: {}
- name: company_provided_documents
  endpoint:
    path: /company_provided_documents
    method: GET
- name: company
  endpoint:
    path: /companies
    method: get
- name: employee
  endpoint:
    path: /employees
    method: get
- name: contractor
  endpoint:
    path: /contractors
    method: get
- name: company_tax_documents
  endpoint:
    path: /documents/company_tax_documents
    method: GET
- name: employee_tax_documents
  endpoint:
    path: /documents/employee_tax_documents
    method: GET
    data_selector: records
    params: {}
- name: tax_parameters
  endpoint:
    path: /company_tax_params/{company_id}
    method: GET
- name: tax_parameter
  endpoint:
    path: /tax/parameter
    method: GET
    data_selector: parameter_info
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: get
- name: tax_parameter
  endpoint:
    path: /tax/parameters
    method: GET
    data_selector: parameters
    params: {}
- name: jurisdictions
  endpoint:
    path: /company_tax_params//jurisdictions
    method: GET
    data_selector: records
- name: company_provided_document
  endpoint:
    path: /company_provided_documents
    method: POST
    data_selector: id
    params: {}
- name: tax_form
  endpoint:
    path: /tax_forms
    method: GET
    data_selector: forms
    params: {}
- name: tax_parameter_option
  endpoint:
    path: /tax/parameter/options
    method: GET
    data_selector: options
    params: {}
- name: jurisdictions
  endpoint:
    path: /tax/parameter/jurisdictions
    method: GET
    data_selector: jurisdictions
    params: {}
- name: company_tax_params
  endpoint:
    path: /company_tax_params//settings
    method: GET
- name: employee_tax_parameter
  endpoint:
    path: /employee_tax_params/{employee_id}
    method: PATCH
- name: tax_parameter_details
  endpoint:
    path: /tax/parameters
    method: GET
    data_selector: parameters
    params: {}
- name: employee_tax_elections
  endpoint:
    path: /employee_tax_elections
    method: GET
- name: payment_attempt
  endpoint:
    path: /payment_attempts
    method: get
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: payment_attempts
- name: company_tax_params
  endpoint:
    path: /company_tax_params//settings/
    method: GET
- name: tax_parameter_definitions
  endpoint:
    path: /tax/parameter/definitions
    method: GET
    data_selector: definitions
    params: {}
- name: tax_parameters
  endpoint:
    path: /company/tax_parameters
    method: GET
    data_selector: actions
    params: {}
- name: tax_parameter_settings
  endpoint:
    path: /company/tax_parameter_settings
    method: GET
    data_selector: settings
    params: {}
- name: jurisdictions
  endpoint:
    path: /company/jurisdictions
    method: GET
    data_selector: jurisdictions
    params: {}
- name: employee_tax_params
  endpoint:
    path: /employee_tax_params/settings
    method: GET
- name: employee_tax_params
  endpoint:
    path: /employee_tax_params/settings
    method: GET
- name: employee_tax_parameters
  endpoint:
    path: /employee/tax_parameters
    method: GET
    data_selector: parameters
    params: {}
- name: employee_tax_parameter_settings
  endpoint:
    path: /employee/tax_parameter_settings
    method: GET
    data_selector: settings
    params: {}
- name: employee_jurisdictions
  endpoint:
    path: /employee/jurisdictions
    method: GET
    data_selector: jurisdictions
    params: {}
- name: employee_tax_params_jurisdictions
  endpoint:
    path: /employee_tax_params//jurisdictions
    method: GET
- name: tax_election
  endpoint:
    path: /api/tax_elections
    method: GET
    data_selector: records
    params: {}
- name: company_tax_elections
  endpoint:
    path: /company_tax_elections
    method: GET
- name: employee_tax_params
  endpoint:
    path: /employee_tax_params/{employee_id}
    method: GET
- name: company_tax_elections
  endpoint:
    path: /company_tax_elections
    method: PATCH
- name: settings
  endpoint:
    path: /employee_tax_params//settings/
    method: GET
    data_selector: effective_dated_values
    params: {}
- name: company_tax_elections
  endpoint:
    path: /company_tax_elections/settings
    method: POST
    data_selector: ''
    params: {}
- name: employee_tax_elections
  endpoint:
    path: /employee_tax_elections
    method: PATCH
- name: tax_filing_events
  endpoint:
    path: /tax_filing_events/
    method: GET
- name: list_employee_tax_elections
  endpoint:
    path: /employee/tax_elections
    method: get
- name: update_employee_tax_elections
  endpoint:
    path: /employee/tax_elections
    method: patch
- name: tax_filing
  endpoint:
    path: /tax_filings/{tax_filing_id}
    method: get
- name: tax_filings
  endpoint:
    path: /tax_filings
    method: GET
    data_selector: rejected
- name: employee_tax_params
  endpoint:
    path: /employee_tax_params
    method: GET
- name: tax_filing
  endpoint:
    path: /tax_filing
    method: GET
    data_selector: tax_filing_events
    params: {}
- name: tax_filing_event
  endpoint:
    path: /tax_filing_events
    method: GET
    data_selector: events
    params: {}
- name: ready_for_payroll
  endpoint:
    path: notification/ready_for_payroll
    method: POST
- name: bank_account_validation_failure
  endpoint:
    path: notification/bank_account_validation_failure
    method: POST
- name: debit_scheduled
  endpoint:
    path: notification/debit_scheduled
    method: POST
- name: debit_receipt
  endpoint:
    path: notification/debit_receipt
    method: POST
- name: failed_debit
  endpoint:
    path: notification/failed_debit
    method: POST
- name: failed_payment
  endpoint:
    path: notification/failed_payment
    method: POST
- name: notification
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
    params: {}
- name: company
  endpoint:
    path: /setups
    method: get
- name: setup
  endpoint:
    path: /setup
    method: GET
    data_selector: setup
    params: {}
- name: requirement
  endpoint:
    path: /requirements
    method: GET
    data_selector: requirement
    params: {}
- name: document_options
  endpoint:
    path: /api/document_options
    method: GET
    data_selector: options
    params: {}
- name: funding_detail
  endpoint:
    path: /api/funding_detail
    method: GET
    data_selector: funding_status
    params: {}
- name: webhook_configs
  endpoint:
    path: /webhook_configs
    method: GET
- name: list_setups
  endpoint:
    path: /api/setups
    method: GET
    data_selector: setups
- name: get_setup
  endpoint:
    path: /api/setup/{id}
    method: GET
    data_selector: setup
- name: request_embedded_setup
  endpoint:
    path: /api/setup/request
    method: POST
    data_selector: setup
- name: company_provided_documents
  endpoint:
    path: /requirements/company_provided_documents
    method: GET
    data_selector: documents
    params: {}
- name: required_tax_id
  endpoint:
    path: /requirements/required_tax_id
    method: GET
    data_selector: tax_ids
    params: {}
- name: failed_payroll_debit
  endpoint:
    path: /requirements/failed_payroll_debit
    method: GET
    data_selector: funding_failures
    params: {}
- name: webhook_config
  endpoint:
    path: /webhook_configs
    method: POST
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: id
    params: {}
- name: companies
  endpoint:
    path: /companies
    method: get
- name: employees
  endpoint:
    path: /employees
    method: get
- name: contractors
  endpoint:
    path: /contractors
    method: get
- name: contractor
  endpoint:
    path: /contractors
    method: GET
    data_selector: contractors
    params: {}
- name: bank_account
  endpoint:
    path: /api/v1/bank_accounts
    method: GET
    data_selector: bank_accounts
    params: {}
- name: communication
  endpoint:
    path: /communications
    method: GET
- name: communication
  endpoint:
    path: /communications
    method: GET
    data_selector: records
    params: {}
- name: email
  endpoint:
    data_selector: to
- name: company
  endpoint:
    path: /companies
    method: GET
    data_selector: records
- name: companies
  endpoint:
    path: /companies
    method: get
- name: usage_records
  endpoint:
    path: /usage/records
    method: get
- name: workplace
  endpoint:
    path: /workplaces
    method: GET
    data_selector: workplaces
    params: {}
- name: contractor_payment
  endpoint:
    path: /contractor_payment
    method: POST
    data_selector: id
    params: {}
- name: payroll
  endpoint:
    path: /payrolls
    method: GET
    data_selector: payrolls
- name: companies
  endpoint:
    path: /companies
    method: get
- name: employees
  endpoint:
    path: /employees
    method: get
- name: contractors
  endpoint:
    path: /contractors
    method: get
- name: payroll_item
  endpoint:
    path: /payroll/items
    method: GET
    data_selector: records
- name: benefit
  endpoint:
    path: /benefits
    method: GET
    data_selector: records
    params: {}
- name: earning_rate
  endpoint:
    path: /earning_rates
    method: GET
    data_selector: earning_rates
    params: {}
- name: deduction
  endpoint:
    path: /post-tax-deductions
    method: GET
    data_selector: deductions
- name: tax_form
  endpoint:
    path: /forms
    method: GET
    data_selector: parameters
    params: {}
- name: tax_parameter
  endpoint:
    path: /tax_parameters
    method: GET
    data_selector: tax_parameters
    params: {}
- name: payroll
  endpoint:
    path: /payrolls/{payrollId}
    method: GET
    data_selector: items
- name: employees
  endpoint:
    path: /employees
    method: GET
    data_selector: results
    params:
      id: employeeIds
- name: communication
  endpoint:
    path: /communications
    method: GET
    data_selector: records
    params: {}
- name: notification
  endpoint:
    path: /notifications
    method: GET
    data_selector: records
    params: {}
- name: setup_events
  endpoint:
    data_selector: data
    params: {}
- name: notification_events
  endpoint:
    data_selector: data
    params: {}
- name: employee
  endpoint:
    path: /services/data/vXX.X/sobjects/Employee
    method: GET
    data_selector: records
    params: {}
- name: net_pay_split
  endpoint:
    path: /net_pay_splits
    method: GET
    data_selector: splits
- name: payroll
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: pay_schedule
  endpoint:
    path: /pay_schedules
    method: GET
    data_selector: records
    params: {}
- name: company_benefit
  endpoint:
    path: /company/benefit
    method: GET
    data_selector: records
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
- name: address_validation
  endpoint:
    path: /addresses/validate
    method: POST
    data_selector: error
    params: {}
- name: company_tax_documents
  endpoint:
    path: /documents/company_tax_documents
    method: GET
    data_selector: documents
- name: company_authorization_documents
  endpoint:
    path: /documents/company_authorization_documents
    method: GET
    data_selector: documents
- name: employee_tax_documents
  endpoint:
    path: /documents/employee_tax_documents
    method: GET
    data_selector: documents
- name: contractor_tax_documents
  endpoint:
    path: /documents/contractor_tax_documents
    method: GET
    data_selector: documents
- name: setup_documents
  endpoint:
    path: /documents/setup_documents
    method: GET
    data_selector: documents
- name: company_provided_document
  endpoint:
    path: /company_provided_documents
    method: POST
    data_selector: id
    params: {}
- name: earning_code
  endpoint:
    path: /earning_codes
    method: GET
    data_selector: earning_codes
    params: {}
- name: tax_election
  endpoint:
    path: /tax_elections
    method: GET
    data_selector: data
    params: {}
- name: tax_filing
  endpoint:
    path: /api/tax_filing
    method: GET
    data_selector: tax_filing_events
    params: {}
- name: requirement
  endpoint:
    path: /req_lmdjesylstq2h0xwhftm
    method: GET
    data_selector: requirement
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: id
    params: {}
- name: workplaces
  endpoint:
    path: /workplaces
    method: GET
    data_selector: results
    params:
      limit: '25'
- name: employees
  endpoint:
    path: /employees
    method: GET
    data_selector: results
    params:
      limit: '100'
- name: payroll_items
  endpoint:
    path: /payroll_items
    method: GET
    data_selector: results
    params:
      limit: '100'
- name: earning_rates
  endpoint:
    path: /earning_rates
    method: GET
    data_selector: results
    params:
      limit: '500'
- name: companies
  endpoint:
    path: /companies
    method: POST
    data_selector: 'null'
    params: {}
- name: workplaces
  endpoint:
    path: /workplaces
    method: POST
    data_selector: 'null'
    params: {}
- name: bank_accounts
  endpoint:
    path: /bank_accounts
    method: POST
    data_selector: 'null'
    params: {}
- name: employees
  endpoint:
    path: /employees
    method: POST
    data_selector: 'null'
    params: {}
- name: payrolls
  endpoint:
    path: /payrolls
    method: POST
    data_selector: 'null'
    params: {}
- name: payroll_preview
  endpoint:
    path: /payrolls/<PAYROLL_ID>/preview
    method: GET
    data_selector: 'null'
    params: {}
- name: approve_payroll
  endpoint:
    path: /payrolls/<PAYROLL_ID>/approve
    method: POST
    data_selector: 'null'
    params: {}
- name: paystubs
  endpoint:
    path: /employees/<employee_id>/paystubs/<payroll_id>
    method: GET
    data_selector: 'null'
    params: {}
- name: companies
  endpoint:
    path: /companies
    method: get
- name: payrolls
  endpoint:
    path: /payrolls
    method: get
- name: Company
  endpoint:
    path: /companies
    method: POST
    data_selector: metadata
- name: payroll_events
  endpoint:
    path: /webhooks/payroll_events
    method: POST
    data_selector: data
    params: {}
- name: document_events
  endpoint:
    path: /webhooks/document_events
    method: POST
    data_selector: data
    params: {}
- name: bank_account_events
  endpoint:
    path: /webhooks/bank_account_events
    method: POST
    data_selector: data
    params: {}
- name: benefit_events
  endpoint:
    path: /webhooks/benefit_events
    method: POST
    data_selector: data
    params: {}
- name: company_benefit_events
  endpoint:
    path: /webhooks/company_benefit_events
    method: POST
    data_selector: data
    params: {}
- name: post_tax_deduction_events
  endpoint:
    path: /webhooks/post_tax_deduction_events
    method: POST
    data_selector: data
    params: {}
- name: company_events
  endpoint:
    path: /webhooks/company_events
    method: POST
    data_selector: data
    params: {}
- name: employee_events
  endpoint:
    path: /webhooks/employee_events
    method: POST
    data_selector: data
    params: {}
- name: contractor_events
  endpoint:
    path: /webhooks/contractor_events
    method: POST
    data_selector: data
    params: {}
- name: workplace_events
  endpoint:
    path: /webhooks/workplace_events
    method: POST
    data_selector: data
    params: {}
- name: earning_code_events
  endpoint:
    path: /webhooks/earning_code_events
    method: POST
    data_selector: data
    params: {}
- name: payments_webhooks
  endpoint:
    path: /webhooks/payments
    method: POST
    data_selector: data
    params: {}
- name: federal_ein_verification_events
  endpoint:
    path: /webhooks/federal_ein_verification_events
    method: POST
    data_selector: data
    params: {}
- name: requirement_events
  endpoint:
    path: /webhooks/requirement_events
    method: POST
    data_selector: data
    params: {}
- name: company_processing_status_events
  endpoint:
    path: /webhooks/company_processing_status_events
    method: POST
    data_selector: data
    params: {}
- name: pay_schedule_events
  endpoint:
    path: /webhooks/pay_schedule_events
    method: POST
    data_selector: data
    params: {}
- name: earning_rate_events
  endpoint:
    path: /webhooks/earning_rate_events
    method: POST
    data_selector: data
    params: {}
- name: tax_filing_events
  endpoint:
    path: /webhooks/tax_filing_events
    method: POST
    data_selector: data
    params: {}
- name: net_pay_split_events
  endpoint:
    path: /webhooks/net_pay_split_events
    method: POST
    data_selector: data
    params: {}
- name: integration_access_events
  endpoint:
    path: /webhooks/integration_access_events
    method: POST
    data_selector: data
    params: {}
- name: enrollment_profile_events
  endpoint:
    path: /webhooks/enrollment_profile_events
    method: POST
    data_selector: data
    params: {}
- name: status
  endpoint:
    path: /api/v2/status.json
    method: GET
    data_selector: status
- name: default_component_events
  endpoint:
    path: /events/default
    method: GET
    data_selector: events
- name: common_component_events
  endpoint:
    path: /events/common
    method: GET
    data_selector: events
- name: additional_component_events
  endpoint:
    path: /events/additional
    method: GET
    data_selector: events
- name: implementation
  endpoint:
    path: /api/v1/implementation
    method: GET
    data_selector: implementation
    params: {}
- name: kyb_status
  endpoint:
    path: /api/v1/kyb_status
    method: GET
    data_selector: kyb_status
    params: {}
- name: company_defined_attributes
  endpoint:
    path: /employees/<EMPLOYEE_ID>/company_defined_attributes
    method: GET
    data_selector: company_defined_attributes
- name: post_company_defined_attributes
  endpoint:
    path: /employees/<EMPLOYEE_ID>/company_defined_attributes
    method: POST
- name: bank_account
  endpoint:
    path: /link
    method: POST
    data_selector: bank_account
    params: {}
- name: Company Tax Setup Component
  endpoint:
    path: /companies/{company_id}/components/tax_setup
    method: POST
- name: employees
  endpoint:
    path: /check-api/employees
    method: GET
    data_selector: results
    params: {}
- name: onboard_employee
  endpoint:
    path: /check-api/employees/{employee_id}/onboard
    method: POST
    data_selector: ''
    params: {}
- name: onboard_status
  endpoint:
    path: /onboard/status
    method: GET
    data_selector: onboard
    params: {}
- name: employee
  endpoint:
    path: /employees/{<EMPLOYEE_ID>}
    method: PATCH
    data_selector: ''
    params: {}
- name: bank_account
  endpoint:
    path: /bank_accounts
    method: POST
    data_selector: ''
    params: {}
- name: forms
  endpoint:
    path: /employees/<EMPLOYEE_ID>/forms
    method: GET
    data_selector: results
    params: {}
- name: form_submission
  endpoint:
    path: /employees/<EMPLOYEE_ID>/forms/<FORM_ID>/submit
    method: POST
    data_selector: ''
    params: {}
- name: bank_account_verification
  endpoint:
    path: /webhook/bank_account_verification
    method: POST
    data_selector: data
    params: {}
- name: bank_account_identity_verification
  endpoint:
    path: /webhook/bank_account_identity_verification
    method: POST
    data_selector: data
    params: {}
- name: external_payroll
  endpoint:
    path: /external_payrolls
    method: POST
    data_selector: external_payrolls
    params: {}
- name: pay_schedules
  endpoint:
    path: /pay_schedules
    method: POST
    data_selector: null
    params: {}
- name: paydays
  endpoint:
    path: /pay_schedules/{pay_schedule_id}/paydays
    method: GET
    data_selector: results
    params: {}
- name: payrolls
  endpoint:
    path: /payrolls
    method: POST
    data_selector: null
    params: {}
- name: create_company_onboard_link
  endpoint:
    path: /companies/{company_id}/onboard
    method: POST
    data_selector: ''
    params: {}
- name: create_employee_onboard_link
  endpoint:
    path: /employees/{employee_id}/onboard
    method: POST
    data_selector: ''
    params: {}
- name: create_contractor_onboard_link
  endpoint:
    path: /contractors/{contractor_id}/onboard
    method: POST
    data_selector: ''
    params: {}
- name: federal_ein_verification
  endpoint:
    path: /federal_ein_verifications
    method: GET
    data_selector: verifications
- name: create_company
  endpoint:
    path: /companies
    method: POST
    data_selector: company
- name: update_tax_parameters
  endpoint:
    path: /companies/{company_id}/tax_parameters
    method: PUT
    data_selector: tax_parameters
- name: list_available_forms
  endpoint:
    path: /forms
    method: GET
    data_selector: results
    params: {}
- name: retrieve_specific_form
  endpoint:
    path: /forms/:form_id
    method: GET
    data_selector: parameters
    params: {}
- name: render_form
  endpoint:
    path: /forms/:form_id/render
    method: POST
    data_selector: null
    params: {}
- name: company_defined_attributes
  endpoint:
    path: /employees/<employee_id>/company_defined_attributes
    method: GET
    data_selector: company_defined_attributes
    params: {}
- name: company_provided_documents
  endpoint:
    path: /company_provided_documents
    method: POST
    data_selector: data
    params: {}
- name: upload_document
  endpoint:
    path: /company_provided_documents/{id}/upload
    method: PUT
    data_selector: data
    params: {}
- name: funding_failures
  endpoint:
    path: /requirements
    method: GET
    data_selector: results
    params:
      requirement: resolve_funding_failure
- name: workplaces
  endpoint:
    path: /workplaces
    method: POST
    data_selector: ''
    params: {}
- name: employees
  endpoint:
    path: /employees
    method: POST
    data_selector: ''
    params: {}
- name: payrolls
  endpoint:
    path: /payrolls
    method: POST
    data_selector: ''
    params: {}
- name: benefits
  endpoint:
    path: /benefits
    method: POST
    data_selector: null
    params: {}
- name: company_benefits
  endpoint:
    path: /company_benefits
    method: POST
    data_selector: null
    params: {}
- name: delete_benefit
  endpoint:
    path: /benefits/:id
    method: DELETE
    data_selector: null
    params: {}
- name: update_benefit
  endpoint:
    path: /benefits/:id
    method: PATCH
    data_selector: null
    params: {}
- name: list_employee_paystubs
  endpoint:
    path: /employees/<employee_id>/paystubs
    method: GET
- name: get_paystub
  endpoint:
    path: /employees/<employee_id>/paystubs/<payroll_id>
    method: GET
    headers:
      Accept: application/json
- name: company
  endpoint:
    path: /company
    method: POST
    data_selector: data
    params: {}
- name: signatory
  endpoint:
    path: /signatory
    method: POST
    data_selector: data
    params: {}
- name: enrollment_profile
  endpoint:
    path: /enrollment_profile
    method: POST
    data_selector: data
    params: {}
- name: company_provided_documents
  endpoint:
    path: /company_provided_documents
    method: POST
    data_selector: upload_url
- name: payrolls
  endpoint:
    path: /payrolls
    method: POST
- name: payroll_items
  endpoint:
    path: /payroll_items
    method: POST
- name: contractor_payments
  endpoint:
    path: /contractor_payments
    method: POST
- name: preview_payroll
  endpoint:
    path: /payrolls/<PAYROLL_ID>/preview
    method: GET
- name: get_payroll
  endpoint:
    path: /payrolls/<PAYROLL_ID>
    method: GET
- name: approve_payroll
  endpoint:
    path: /payrolls/<PAYROLL_ID>/approve
    method: POST
- name: period_benefits
  endpoint:
    path: /period_benefits
    method: GET
    data_selector: records
    params: {}
- name: post_tax_deduction_override
  endpoint:
    path: /post_tax_deduction_overrides
    method: POST
    data_selector: post_tax_deduction_overrides
    params: {}
- name: year_to_date_limit
  endpoint:
    path: /year_to_date_limits
    method: POST
    data_selector: miscellaneous
    params: {}
- name: post_tax_deduction
  endpoint:
    path: /post_tax_deductions
    method: POST
    data_selector: null
    params: {}
- name: get_post_tax_deductions
  endpoint:
    path: /post_tax_deductions
    method: GET
    data_selector: results
    params: {}
- name: piece_earning_rates
  endpoint:
    path: /api/v1/earning_rates
    method: GET
    data_selector: earning_rates
- name: piece_earnings
  endpoint:
    path: /api/v1/piece_earnings
    method: POST
    data_selector: earnings
- name: earning_codes
  endpoint:
    path: /api/v1/earning_codes
    method: GET
    data_selector: earning_codes
- name: tax_parameters
  endpoint:
    path: /requirements
    method: GET
    params:
      category: required_tax_id
- name: payroll_preview
  endpoint:
    path: /payrolls/<payroll_id>/preview
    method: GET
    data_selector: null
    params: {}
- name: payroll_approve
  endpoint:
    path: /payrolls/<payroll_id>/approve
    method: POST
    data_selector: null
    params: {}
- name: payroll_reopen
  endpoint:
    path: /payrolls/<payroll_id>/reopen
    method: POST
    data_selector: null
    params: {}
- name: void_payroll
  endpoint:
    path: /void_payroll
    method: POST
    data_selector: voided_payroll
    params: {}
- name: reimbursements
  endpoint:
    path: /reimbursements
    method: GET
    data_selector: reimbursements
    params: {}
- name: bank_account
  endpoint:
    path: /bank_account
    method: POST
    data_selector: bank_account
    params: {}
- name: Earnings
  endpoint:
    path: /earning_rates
    method: POST
    data_selector: earnings
    params: {}
- name: Earning Codes
  endpoint:
    path: /earning_codes
    method: POST
    data_selector: earning_codes
    params: {}
- name: tip_credit_adjustment_to_minimum_wage
  endpoint:
    path: /check_api/tip_credit_adjustment_to_minimum_wage
    method: POST
    data_selector: earnings
    params: {}
- name: cash_tips
  endpoint:
    path: /check_api/cash_tips
    method: POST
    data_selector: earnings
    params: {}
- name: hourly
  endpoint:
    path: /check_api/hourly
    method: POST
    data_selector: earnings
    params: {}
- name: overtime
  endpoint:
    path: /check_api/overtime
    method: POST
    data_selector: earnings
    params: {}
- name: employee
  endpoint:
    path: /employees/{id}
    method: GET
    data_selector: results
    params: {}
- name: workplace
  endpoint:
    path: /workplaces/{id}
    method: GET
    data_selector: results
    params: {}
- name: reciprocity_elections
  endpoint:
    path: /employees/{id}/reciprocity_elections
    method: GET
    data_selector: results
    params: {}
- name: forms
  endpoint:
    path: /employees/{id}/forms
    method: GET
    data_selector: results
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
    params: {}
- name: net_pay_split
  endpoint:
    path: /net_pay_splits
    method: POST
    data_selector: id
    params: {}
- name: employee
  endpoint:
    path: /employees
    method: GET
    data_selector: id
    params: {}
- name: contractor
  endpoint:
    path: /contractors
    method: GET
    data_selector: id
    params: {}
- name: workplaces
  endpoint:
    path: /workplaces
    method: GET
    data_selector: null
    params:
      company: com_P7JPeBhb8hH23iiReDQ5
- name: employees
  endpoint:
    path: /employees/emp_zGGp6wYcxAeu1Ng8IA7v
    method: GET
    data_selector: null
    params: {}
- name: employee_forms
  endpoint:
    path: /employees/emp_zGGp6wYcxAeu1Ng8IA7v/forms
    method: GET
    data_selector: null
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: payment
    params: {}
- name: payment_attempt
  endpoint:
    path: /payment_attempts
    method: GET
    data_selector: payment_attempts
    params: {}
- name: tax_filings
  endpoint:
    path: /tax_filings
    method: POST
    data_selector: null
    params: {}
- name: tax_filing_events
  endpoint:
    path: /tax_filing_events
    method: POST
    data_selector: null
    params: {}
- name: UsageSummary
  endpoint:
    path: /usage/summaries
    method: GET
    data_selector: results
- name: UsageRecord
  endpoint:
    path: /usage/records
    method: GET
    data_selector: results
- name: payrolls
  endpoint:
    path: /payrolls
    method: POST
    data_selector: records
- name: approve
  endpoint:
    path: /approve
    method: POST
    data_selector: records
- name: company_tax_params
  endpoint:
    path: /company_tax_params/:company_id
    method: GET
    data_selector: results
- name: employee_tax_params
  endpoint:
    path: /employee_tax_params/:employee_id
    method: GET
    data_selector: results
- name: tax_parameter_settings
  endpoint:
    path: /company_tax_params/:company_id/settings
    method: GET
    data_selector: results
- name: tax_parameter_jurisdictions
  endpoint:
    path: /company_tax_params/:company_id/jurisdictions
    method: GET
    data_selector: results
- name: accesses
  endpoint:
    path: /integrations/accesses
    method: GET
    data_selector: accesses
    params:
      company: '{companyID}'
- name: list_tax_deposits
  endpoint:
    path: /list_tax_deposits
    method: GET
    data_selector: results
- name: create_guideline_component
  endpoint:
    path: /companies/{companyId}/components/integrations
    method: POST
    data_selector: ''
    params: {}
- name: guideline_plan_status
  endpoint:
    path: /integrations/accesses
    method: GET
    data_selector: ''
    params:
      company: '{companyID}'
notes:
- All fields are optional.
- Currently, the checklist component serves the 'filing preparation' use case, enabling
  employers to prepare for 2024 year end tax filings.
- After December 31, users will no longer be able to change data for their 2024 filings;
  as such, we recommend not surfacing this component any longer past that point.
- Once it is January 1, 2025 (in the user's local timezone), the component will change
  to a generic success screen.
- Check's API is gated by a standard throttling policy.
- By default, Partners can make 25 requests/second to the API.
- Check also enforces a concurrency limit of 50 open requests per Partner.
- 'API clients should account for the throttle, likely in one of two ways: internally
  track number of requests over time or implement automatic retries for 429 responses.'
- This component is intended for employer admin users, not employees.
- This component should only be completed by an admin at the company, based on tax
  forms provided to them by the employee.
- Check supports idempotency for safely retrying requests without accidentally performing
  the same operation twice.
- To perform an idempotent request, provide an `X-Idempotency-Key` header to the request.
- The format of the idempotency key is up to you, however we suggest using UUIDs.
- Note that keys expire after 24 hours.
- This Component allows an employer to set up and manage their workplaces, employees,
  and contractors.
- Both the Company and Enrollment Profile objects will be updated while this component
  is used.
- This component is only available for usage with Full Service Embedded Setup.
- Correct usage of this component requires a viewport at least 600px in width and
  700px in height.
- This Component allows employers to view, sign, and submit forms relevant to their
  onboarding.
- Legal name cannot be updated unless implementation.kyb.status is not_initiated.
- Address cannot be updated unless implementation.kyb.status is not_initiated.
- A PDF packet can be generated for companies with 50 or fewer employees
- The legal name of the company could have changed in the interim but that will not
  affect this specific verification process.
- The Federal EIN of the company could have changed in the interim but that will not
  affect this verification process.
- The company can't have a completed implementation status.
- If the company has payroll history as indicated by having a previous_payroll_provider
  value, no employees on payroll history can have a blocking onboard status.
- All pay history must be loaded before implementation can be requested unless the
  company's Start Date is in January.
- If the company does not have payroll history, employees may have a blocking onboard
  status.
- Note that employees will have to onboard before they can be added to a payroll.
- The company may be in a needs_attention or completed onboard status.
- If the company has a blocking onboard status, the only remaining step must be to
  sign filing authorization forms.
- The company must have a Signatory.
- The company must have a start_date, address, legal_name, phone, industry_type, and
  email fields.
- The company's start_date must be in the future of the current time.
- The company must either have their team loaded via the Employees or Contractors
  APIs, or have an estimate of their team size in the Enrollment Profile object in
  the employee_count and contractor_count fields.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- This endpoint currently does not support custom page sizes
- Access to this endpoint requires additional security measures
- Reach out to Check to get support for this feature
- Adding or removing an employee's workplace can change the required withholding information
  for that employee.
- Payroll Items and Contractor Payments are not shown on their associated Payroll
  by default.
- Payrolls with 500 or fewer payroll items and contractor payments may use query parameters
  include_items and include_contractor_payments.
- A company must have a linked bank account in order for Check to automatically withdraw
  funds to fund payrolls.
- An employee or contractor must have a linked bank account in order for Check to
  pay them using direct deposit.
- Please reach out to the Check team via Console to request access
- Contractor forms are normally configured when contractors go through Contractor
  Onboard.
- Use the Contractor Forms API only if you're building a custom integration for contractor
  onboarding.
- Only 'raw' bank accounts may be updated with this call. Plaid processor token-based
  bank accounts may not be updated.
- Previewing a payroll is required before the payroll can be approved.
- If the payroll or any associated Payroll Items or Contractor Payments are modified,
  then the preview calculation will no longer be valid.
- The payroll must have a completed preview before it can be approved.
- Approving a preview approves the most recent preview of the payroll and moves the
  payroll status to pending.
- Total amounts include various components for employees and contractors.
- The payroll warnings field is populated when approving or previewing a payroll.
- The warning with a code of tax_payments_held, with reason funding_not_cleared will
  appear after approving an all-manual 4-day payroll.
- The warning with a code of missing_employee_setup_information, with reason employee_primary_workplace_not_set
  will appear when any employees on the payroll do not have their primary workplace
  set.
- This endpoint should be used mostly for appending payroll items to an existing payroll.
- Attempting to create too many payroll items in a short amount of time may lead to
  rate limiting.
- Some objects like Contact may return nulls in deeply nested fields
- The payroll item `warnings` field is populated when previewing or approving a payroll.
- If there are deductions that cannot be fully applied to a payroll, there will be
  a corresponding element in the `warnings` array.
- The `employee` and `company` query parameters cannot both be used in a single request.
- Represents deductions that are withheld from an employee’s after-tax wages.
- We support catch-up contribution limits
- Earning codes are immutable in Check's system, which means they cannot be updated
  once created.
- This endpoint currently does not support custom page sizes.
- The amount cannot be changed after the Earning Rate is created.
- The time frame for period cannot be changed after the Earning Rate is created.
- Only debit payments can be retried using wires.
- Both credits and debits may be retried using a new bank account.
- The use_wire parameter has been deprecated in favor of the payment_type field.
- Uploaded file must be a PDF, JPG, or PNG and cannot exceed 6 MB in size.
- Employee withholdings are normally configured when employees go through Check Onboard.
- Use the Employee Forms API only if you're building a custom integration for employee
  onboarding.
- Uses the tax parameter to show the information that needs to be collected from companies
  and employees.
- Represents payments and their corresponding attempts for completion initiated by
  Check on behalf of a company.
- Currently, definitions are only supported for tax parameters of type 'percent'.
- A company's FEIN should be updated only if Check has already begun reviewing the
  company.
- If the implementation.kyb.status is anything but `not_initiated`, reach out to support
  or create a new company.
- Requires setup of connected app in api
- This status is used the first time a requirement is surfaced.
- This status indicates that an action has been taken to resolve a given requirement.
- The Check team has finished reviewing, successfully processed the information, and
  cleared the requirement.
- The Check team has not accepted the information supplied. No user action is required
  for this status.
- This status indicates that user action is required for resolution.
- The initial version of this API will only contain failed filings.
- Direct communications to users for all notification topics are offered.
- The setup object captures important information for a company's setup on Check.
- In Sandbox, after requesting Embedded Setup for a company, every two minutes, we
  will automatically transition the company to the next phase.
- Communications can be created by Check through Direct To Employer Communications
  or triggered by Check's notifications system.
- Legal name of the company cannot be updated unless implementation.kyb.status is
  not_initiated.
- Status of the payroll can be either 'draft' or 'paid'.
- Only one payroll item is allowed per employee per payroll.
- Represents the tax parameter that are available to companies and employees.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Represents payments and their corresponding attempts for completion initiated by
  Check on behalf of a company
- Webhook configs that have been deactivated can be reactivated via the API.
- If your webhook endpoint repeatedly responds with non-2XX statuses for more than
  a few days, the configuration may be automatically deactivated by Check.
- The suggested alternative returned by our API is not guaranteed to be valid.
- Street address validation behavior varies by state and its jurisdictional requirements.
- Only Employee Tax Elections have an employee identifier.
- Initial version only contains failed filings
- Unique identifier for the requirement.
- Unique identifier for the company.
- Status of the requirement in its lifecycle. One of open, pending, resolved, failed,
  or closed.
- Responses that return lists of objects are paginated.
- Payloads are limited to a max size of 25 objects.
- Some API endpoints support requesting larger page sizes via a limit query parameter.
- Request logs may take up to five (5) minutes to appear in this dashboard.
- Each Component will always emit the 'check-component-app-loaded' event.
- Common events include 'check-component-company-signatory-agreements-complete' and
  'check-component-company-terms-of-service-complete'.
- Employees can only be marked as 2% shareholders with an effective start date at
  the beginning of a calendar year.
- Employees that have an active pre-tax health benefit associated with them cannot
  be marked as a 2% shareholder unless their pre-tax health benefits are either deleted
  or ended before their effective start date as a 2% shareholder.
- Requires a Check processor token obtained from Plaid
- To link to a contractor, replace 'employee' with 'contractor' and provide the contractor's
  unique ID
- Ensure component links are only initialized once
- Certain web frameworks, including React/Next, can make it easy to accidentally initialize
  the component link multiple times.
- Access to the Sensitive Data API requires explicit approval from Check, completion
  of security requirements, and acceptance of additional terms and conditions.
- The API implements multiple layers of security to protect sensitive data.
- Partners must complete several requirements before gaining access, including enabling
  Multi-Factor Authentication (MFA) for all users and signing additional legal agreements
  that outline proper data handling procedures.
- Webhook for document upload transitions requirement to 'pending'.
- Both Bank Account Verification and Bank Account Identity Verification must be accepted
  for ownership verification.
- External payrolls are hidden from the core Payroll API until approved.
- Child-support garnishments cannot be created automatically via external deductions.
- Pay frequency defined directly on a payroll will override the company’s default
  pay frequency.
- Pay frequency inherited from a pay schedule on a payroll will override the company’s
  default pay frequency.
- Onboard links are active for 24 hours, and may be regenerated if required.
- The API does not automatically populate the attribute with the default value.
- Webhook notifications are issued for events such as created, updated, and deleted.
- Employers with outstanding funding failure requirements will be unable to run payroll
  until resolved.
- Workplace addresses can be updated, but changes that affect tax locations are restricted.
- Overriding a benefit's contribution will still follow the benefits respective annual
  limit.
- Benefits must be configured for a payroll before that payroll is approved, or they
  will not be applied.
- State regulations generally require that all of the information in the paystub JSON
  response is rendered and the paystub is printable. Directly rendering a singular
  paystub to PDF will satisfy this requirement.
- Check Components are designed to support all web-safe fonts out of the box but can
  also use any arbitrary custom font source.
- Strongly recommend sending as much of the information in the enrollment profile
  as possible.
- Asynchronous preview is recommended for payrolls exceeding 500 items or payments.
- Ensure payday aligns with valid paydays for direct deposits.
- The period field must be set if defining a period amount.
- Setting the period will null out all other contribution amount and percent fields.
- Employers may receive a detailed garnishment order to deduct an amount of the parent’s
  wages.
- Uses OAuth2 with refresh token — requires setup of connected app in Check
- Piece earnings must account for minimum wage adjustments
- Only one requirement exists per jurisdiction, regardless of the number of tax IDs
  marked 'Applied For'.
- Payroll items may be voided only after the payroll itself has been approved and
  processed
- Negative Net Pay is a situation where an employee’s gross pay is not sufficient
  to cover all the deductions calculated on a given payroll.
- In most cases negative net pay situations will be gracefully handled by Check.
- These warnings should be surfaced to employers in the payroll approval screen so
  that they can be aware of any deductions that were partially applied or skipped.
- Bank accounts cannot be used in payroll if status is disabled_recoverable or disabled_irrecoverable
- Bank accounts can be used for payroll if status is validation_pending, validated
  or ownership_verified
- Earning Codes are company specific.
- Earning Rates can be used in conjunction with Earning Codes.
- Employers must ensure the correct tip credit is displayed on the paystub.
- Employees living in specific states can opt into reciprocity with certain states.
- Net Pay Splits can be configured via Onboard, Console or the API.
- Only one method can be used per net pay split, e.g. you cannot create one split
  object using amount and another using a percentage.
- Marking a parameter as applied for enables us to skip the value submission of a
  particular tax parameter.
- Effective start dates define the lower boundary of a temporal range for which the
  value is applicable.
- Some setup parameters contain a special attribute called depends_on.
- Next requires that an email be associated with any company going through their buying
  funnel.
- You must always direct the customer to Next's support for anything related to insurance.
- Tax Filing resources are unique and immutable for a given combination of company,
  year, period, tax.
- Live data only. The Usage API only generates data from usage in the live environment.
- Expect new usage categories over time. As Check releases new products or services,
  new categories may be added.
- Usage is live up to a day prior and finalized after the end of the month.
- Check does not support breaking down reports by fields like department, job, role,
  or shift.
- Wires must be received by 2:00 PM PT.
- Payroll credits will only be sent out on receipt of the wire.
- SimplyInsured requires that an email be associated with any company going through
  their experience.
- Minimum height of the SI component is 550px, and the minimum width is 960px.
- To avoid automatic payroll status transitions in Sandbox, create a company with
  a trade name of Static Co.
- To simulate a payroll that fails due to NSF in sandbox, create a company with a
  trade name of NSF Co. or No Account Co.
- To simulate a failed credit due to an ACCOUNT_CLOSED failure in sandbox, create
  an employee with first_name set to Barry and last_name set to BadAccount.
- For a payroll item with 'Barry BadAccount' to fail, it must have a payment_method
  of direct_deposit.
- Payments of Tax Deposits cannot be simulated in Sandbox.
- In Sandbox, due_date will always be null and deposit_status will always be pending.
- Must test from US IP addresses; use VPN if outside the US.
- Email must be associated with any company going through the buying funnel.
errors:
- 'validation_error: Please correct the required fields and try again.'
- 'address_invalid: Invalid address. There are many potential messages you may receive
  for an invalid address error.'
- 'api_error: An internal error occurred. We have been notified and are looking into
  the issue.'
- 'company_blocking: The company''s Onboard status is in blocking state and certain
  actions like running payroll cannot be performed.'
- 'company_not_implemented: The company''s implementation is not complete and certain
  actions like running payroll cannot be performed.'
- 'company_tax_setup_required: Company tax setup must be complete.'
- 'contractor_payment_already_exists: Only one contractor payment can be created per
  contractor per payroll.'
- 'contractor_payment_limit_exceeded: Contractor payments are limited to 500 per payroll.'
- 'disallowed_environment: The requested functionality is not supported in the current
  sandbox or live environment.'
- 'earning_code_already_exists: Only one earning code can be created per company,
  type, name, and active status.'
- 'employee_benefit_effective_date_overlap: The maximum number of overlapping benefits
  for this benefit type has been exceeded. Update the benefits’ effective dates to
  have fewer overlapping benefits.'
- 'federal_tax_liability_exceeds_100k: The company''s attempt at payroll approval
  failed due to their total federal tax liability exceeding $100,000 for their deposit
  period. To resolve this, the payroll must be funded by wire.'
- 'net_pay_negative: Net pay was calculated to be negative. Contact us if you encounter
  this.'
- 'non_empty_payroll_required: Payrolls must have at least one item or contractor
  payment to be previewed or approved.'
- 'non_managed_payroll_update_invalid: Non-managed payrolls cannot be updated as they
  were not managed and paid via Check. Contact us if you need to update a non-managed
  item.'
- 'non_managed_payroll_void_invalid: Non-managed payrolls cannot be voided as they
  were not managed and paid via Check. Contact us if you need to void a non-managed
  item.'
- 'not_authenticated: Authentication credentials were not provided.'
- 'not_found: The resource you''re looking for was not found, or you do not have permission
  to access it.'
- 'off_cycle_options_invalid: Only payrolls of type ''off_cycle'' can have ''off_cycle_options''.'
- 'payday_invalid: The payday is not valid for the given pay period and frequency.'
- 'payroll_date_invalid: Invalid payroll period or payday.'
- 'payroll_already_approved: Payroll is already approved, and further changes are
  not allowed. If changes need to be made before the approval deadline, you can reopen
  the payroll.'
- 'payroll_approval_deadline_expired: Payroll is past approval deadline without approval,
  and further changes are not allowed. If you want to pay employees by payday, they
  must all be paid with the ''manual'' payment method.'
- 'payroll_item_already_exists: Only one payroll item can be created per employee
  per payroll.'
- 'payroll_item_limit_exceeded: Payroll items are limited to 500 per payroll.'
- 'payroll_not_approved: Payroll must be approved.'
- 'payroll_not_draft: Payroll is not in draft status. Modifying or deleting the payroll
  is not allowed.'
- 'payroll_preview_required_before_approval: Payroll must be previewed before being
  approved.'
- 'payroll_reopening_invalid: Only payrolls in the ''pending'' status can be reopened.'
- 'payroll_reopening_invalid: Payroll cannot be reopened after reopen deadline has
  passed.'
- 'permission_denied: You do not have permission to perform this action.'
- 'post_tax_deduction_invalid: The post tax deduction to be created or updated is
  invalid. Refer to the post-tax deduction object specification to determine the correct
  configuration.'
- 'request_malformed: The request was malformed.'
- 'routing_number_invalid: Invalid ABA routing number. Update it to be a valid ABA
  routing number and try again.'
- 'start_date_invalid: Invalid payday start date for paydays list endpoint.'
- 'state_not_supported: You have tried to create a company, employee, or workplace
  in a state that is not currently supported by Check. Contact Check if a state you
  require is not yet supported via the API.'
- 'throttled: You made too many requests to the API. See the accompanying message
  for when to attempt requests again.'
- 'unapproved_payroll_void_invalid: Payroll items of unapproved payrolls cannot be
  voided. Instead, update the previous payroll.'
- 'validation_error: The request body contained invalid data. Look at the message
  and optional input_errors for more information to resolve.'
- 'voided_payroll_reopening_invalid: Cannot reopen a payroll with voided item or voided
  contractor payment. Contact us if you need to reopen a voided item.'
- 'void_already_exists: A payroll item can only be voided once.'
- 'void_invalid: A void payroll item cannot be voided.'
- '3dp_cash_requirement_limit_exceeded: Payroll exceeds three-day payroll cash requirement
  limit of $1,000,000. To proceed, change the payroll''s funding_payment_method to
  wire.'
- '429: Request was throttled. Expected available in 1 second.'
- '429: static 60 second Retry-After header for concurrency limit.'
- 'payroll_already_approved: Payroll is already approved, and further changes are
  not allowed'
- 'non_empty_payroll_required: Payrolls must have at least one item or contractor
  payment to be previewed or approved'
- 'net_pay_negative: One or more negative net pay errors occurred during handling
  of payroll {payroll.public_id}: Only imputed wage entered; Regular or supplement
  earnings required to cover taxes on imputed wage. Full pre-tax retirement benefit
  401k amount cannot be withheld.'
- '3dp_cash_requirement_limit_exceeded: Payroll exceeds three-day payroll cash requirement
  limit of $1,000,000. To proceed, please change the payroll''s funding_payment_method
  to ''wire''.'
- 'credit_limit_exceeded: The payroll failed credit limit validation. To proceed,
  please change the payroll''s funding_payment_method to ''wire'' or update the payroll''s
  processing_period to either ''three_day'' or ''four_day'' (note: updating the processing_period
  may also necessitate a change to the payroll''s payday in order to provide adequate
  time for approval).'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- type: provided_document_expired
  label: Provided document must not be expired.
- type: provided_document_type_not_supported
  label: Provided document is not an acceptable type.
- type: provided_document_edited
  label: Provided document must be in its original format and cannot be edited after
    being generated.
- type: provided_document_federal_ein_missing
  label: Provided document must include Federal EIN.
- type: provided_document_legal_name_missing
  label: Provided document must include legal name.
- type: provided_document_not_readable
  label: Provided document is not readable.
- type: provided_document_bank_name_missing
  label: Provided document must include the name of the bank.
- type: provided_document_bank_account_missing
  label: Provided document must include bank account number.
- type: provided_document_bank_routing_missing
  label: Provided document must include bank routing number.
- type: provided_document_incorrect_person
  label: Provided document is for the incorrect person.
- type: provided_document_failed_other
  label: Provided document failed for other reasons. See the error description for
    further information, and reach out for support if needed.
- 'Invalid signature: Check-Signature does not match.'
- 'Request timeout: Ensure your endpoint responds within 5 seconds.'
- 'Invalid address: Incorrect postal code'
- 'Invalid address: Incorrect state'
- 'Invalid address: Incorrect city'
- 'Invalid address: Foreign address'
- 'Invalid address: Unknown street'
- 'Invalid address: Multiple matches returned'
- 'Invalid address: The premise (house or building) number for the address is not
  valid'
- 'Invalid address: Invalid premise number'
- 'Invalid address: Invalid postal code'
- 'irs_unavailable: The IRS is unavailable'
- 'duplicate request: The same request has been submitted to the IRS'
- 'final_rejected: No further attempts to automatically verify FEIN will be attempted.'
- 'validation_error: File must be provided'
- 'validation_error: Invalid file type. File must be application/pdf, image/jpeg,
  or image/png'
- '404 Not Found: The specified post tax deduction does not exist.'
- 'net_pay_negative: The payroll will not be calculated.'
- '400 Bad Request: Check for missing fields or invalid data format.'
- '400: If such a request is made, a 400 error will be raised.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://sandbox.checkhq.com
  auth:
    type: apikey
    location: header
    header_name: Authorization
    flow: authorization_code
    token_url: https://sandbox.checkhq.com/oauth/token/
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
  headers:
    Check-Version: '2021-01-15'
    Accept: application/json
    Authorization: Bearer YOUR_API_KEY
    X-Signature: 2bfce877d2e64ea6a8dd45ffb2ce897eb4d97485
    Check-Live: 'true'
    Check-WebhookEvent-ID: unique_id
    Check-Signature: hash_of_request_body
    Check-Topic: category
    Content-Type: application/json
  paginator: {}
  resources:
  - name: company_authorization_document
    endpoint:
      path: /documents/company_authorization_documents/{document}
      method: GET
      data_selector: ''
      params: {}
  - name: components_integration
    endpoint:
      path: /companies/{companyId}/components/integrations
      method: POST
      data_selector: integration_partner
      params: {}
  - name: integrations_accesses
    endpoint:
      path: /integrations/accesses
      method: GET
      data_selector: access_type
      params:
        company: '{companyID}'
source_metadata: null
