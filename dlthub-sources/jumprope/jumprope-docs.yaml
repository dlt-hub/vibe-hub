resources:
- name: features
  endpoint:
    params:
      features:
      - feature1
      - feature2
      all_features: true
      no_default_features: true
      targets:
      - x86_64-apple-darwin
      - x86_64-pc-windows-msvc
      RUSTFLAGS:
      - --example-rustc-arg
      RUSTDOCFLAGS:
      - --example-rustdoc-arg
      cargo_args:
      - -Z
      - build-std
- name: JumpRope
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: rust_crate
  endpoint:
    path: /rust/crates
    method: GET
    data_selector: crates
    params: {}
- name: rand_library
  endpoint:
    path: /rand
    method: GET
- name: rand
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: rand_usage
  endpoint:
    path: /Cargo.toml
    method: GET
    data_selector: usage
    params: {}
- name: rand_usage
  endpoint:
    path: /rand/usage
    method: GET
    data_selector: usage
    params: {}
- name: rand
  endpoint:
    path: /
    method: GET
- name: Rng
  endpoint:
    path: /rng
    method: GET
    data_selector: random_data
- name: ChaCha
  endpoint:
    path: /chacha
    method: GET
    data_selector: chacha_data
- name: rand_usage
  endpoint:
    path: /Cargo.toml
    method: GET
    data_selector: usage
    params: {}
- name: rand_library
  endpoint:
    path: /
    method: GET
    data_selector: random_number_generators
    params: {}
- name: rand
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: usage
  endpoint:
    path: /
    method: GET
    data_selector: usage
    params: {}
- name: rand
  endpoint:
    path: /
    method: GET
    data_selector: randomness
    params: {}
- name: Bernoulli
  endpoint:
    path: Bernoulli(p)
    method: GET
    data_selector: Error
    params: {}
- name: Beta
  endpoint:
    path: Beta(α, β)
    method: GET
    data_selector: Error
    params: {}
- name: Binomial
  endpoint:
    path: Binomial(n, p)
    method: GET
    data_selector: Error
    params: {}
- name: Cauchy
  endpoint:
    path: Cauchy(x₀, γ)
    method: GET
    data_selector: Error
    params: {}
- name: ChiSquared
  endpoint:
    path: χ²(k)
    method: GET
    data_selector: Error
    params: {}
- name: Dirichlet
  endpoint:
    path: Dirichlet(α₁, α₂, ..., αₖ)
    method: GET
    data_selector: Error
    params: {}
- name: Exp
  endpoint:
    path: Exp(λ)
    method: GET
    data_selector: Error
    params: {}
- name: FisherF
  endpoint:
    path: F(m, n)
    method: GET
    data_selector: Error
    params: {}
- name: Frechet
  endpoint:
    path: Fréchet(α, μ, σ)
    method: GET
    data_selector: Error
    params: {}
- name: Gamma
  endpoint:
    path: Gamma(k, θ)
    method: GET
    data_selector: Error
    params: {}
- name: Geometric
  endpoint:
    path: Geometric(p)
    method: GET
    data_selector: Error
    params: {}
- name: Gumbel
  endpoint:
    path: Gumbel(μ, β)
    method: GET
    data_selector: Error
    params: {}
- name: Hypergeometric
  endpoint:
    path: Hypergeometric(N, K, n)
    method: GET
    data_selector: Error
    params: {}
- name: InverseGaussian
  endpoint:
    path: IG(μ, λ)
    method: GET
    data_selector: Error
    params: {}
- name: LogNormal
  endpoint:
    path: ln N(μ, σ²)
    method: GET
    data_selector: Error
    params: {}
- name: Normal
  endpoint:
    path: N(μ, σ²)
    method: GET
    data_selector: Error
    params: {}
- name: NormalInverseGaussian
  endpoint:
    path: NIG(α, β)
    method: GET
    data_selector: Error
    params: {}
- name: Pareto
  endpoint:
    path: Pareto(xₘ, α)
    method: GET
    data_selector: Error
    params: {}
- name: Pert
  endpoint:
    path: PERT(min, max, mode, shape)
    method: GET
    data_selector: Error
    params: {}
- name: Poisson
  endpoint:
    path: Poisson(λ)
    method: GET
    data_selector: Error
    params: {}
- name: SkewNormal
  endpoint:
    path: SN(ξ, ω, α)
    method: GET
    data_selector: Error
    params: {}
- name: Triangular
  endpoint:
    path: Triangular(min, max, mode)
    method: GET
    data_selector: Error
    params: {}
- name: Weibull
  endpoint:
    path: Weibull(λ, k)
    method: GET
    data_selector: Error
    params: {}
- name: Zeta
  endpoint:
    path: Zeta(s)
    method: GET
    data_selector: Error
    params: {}
- name: Zipf
  endpoint:
    path: Zipf(n, s)
    method: GET
    data_selector: Error
    params: {}
- name: usage
  endpoint:
    path: /Cargo.toml
    method: GET
    data_selector: '[]'
    params: {}
- name: rand_library
  endpoint:
    path: /usage
    method: GET
    data_selector: examples
    params: {}
- name: my_benchmark
  endpoint:
    path: /benches/my_benchmark.rs
    method: GET
    data_selector: measurements
    params: {}
- name: my_benchmark
  endpoint:
    path: $PROJECT/benches/my_benchmark.rs
    method: GET
    data_selector: ''
    params: {}
notes:
- By default, rand is built with all stable features available.
- cargo test does not test everything.
- A Rust library for random number generators and other randomness functionality.
- Rand requires Rustc version 1.32 or greater.
- Rand requires Rustc version 1.22 or greater
- Rand 0.4 and 0.3 require Rustc version 1.15 or greater
- Rand is built with only the std feature enabled by default.
- The exact output of assertions is not guaranteed to be consistent over time, and
  may change between minor versions.
- The replacement is only effective in your own crate, not in other libraries you
  include.
- We started building rustdoc JSON on 2025-05-23. So any release before that won't
  have a download available until our rebuilds reached that release.
- By default we use zstd compression, which is more space efficient and faster to
  decompress. For more limited environments we also started supporting gzip compression.
- 'Rand is built with features enabled by default: std, alloc, getrandom, std_rng.'
- Rand supports limited functionality in no_std mode.
- The original maintainer is out of contact, and the new maintainers do not have the
  appropriate crates.io permissions to issue updates.
- If you need to continue to use the crate, we have published a 'next version' under
  an alternative name.
- Windows API bindings are not included in this crate.
- The minimum supported Rust toolchain version is currently Rust 1.63.
- Scenario Outline is treated the same as Outline or Example in the parser (gherkin/#19).
- Tokio doesn't follow a fixed release schedule, but we typically make one minor release
  each month.
- 'Our current LTS releases are: 1.38.x - LTS release until July 2025. (MSRV 1.63),
  1.43.x - LTS release until March 2026. (MSRV 1.70)'
- Rand is a community project and cannot provide legally-binding guarantees of security.
- 'Minimum required Rust version: 1.63.0'
- Rand is not yet stable, however we are careful to limit breaking changes and warn
  via deprecation wherever possible.
- Patch versions never introduce breaking changes.
- This library requires Rust 1.75 or higher.
- By default, derive macros only, without the corresponding traits, are imported from
  the crate's root.
- Uses unsafe code for performance optimizations, primarily for SIMD intrinsics.
- All crates are built in a sandbox using the nightly release of the Rust compiler.
- Missing dependencies are a common reason for failed builds.
- Rand provides utilities to generate random numbers
- The Rand lib is not yet stable
- Rand requires Rustc version 1.36 or greater.
- 'memchr links to the standard library by default, but you can disable the std feature
  if you want to use it in a #![no_std] crate'
- On x86_64 platforms, when the std feature is disabled, the SSE2 accelerated implementations
  will be used.
- When std is enabled, AVX2 accelerated implementations will be used if the CPU is
  determined to support it at runtime.
- 'Rand is built with these features enabled by default: std, alloc, getrandom, std_rng'
- Rand supports limited functionality in no_std mode (enabled via default-features
  = false)
- rand is primarily distributed under the terms of both the MIT license and the Apache
  License (Version 2.0).
- The 0.5 release of Rand requires Rustc version 1.22 or greater.
- Rand 0.4 and 0.3 require Rustc version 1.15 or greater.
- Rand 0.5 is the latest version and contains many breaking changes.
- Rustc version 1.22 or greater is required for the 0.5 release.
- rand is primarily distributed under the terms of both the MIT license and the Apache
  License (Version 2.0)
- 'Rand is considered mature: breaking changes are minimised and breaking releases
  are infrequent.'
- Rand provides utilities to generate random numbers, to convert them to useful types
  and distributions, and some randomness-related algorithms.
- Rand requires Rustc version 1.22 or greater.
- The Rand lib is not yet stable, however we are careful to limit breaking changes
  and warn via deprecation wherever possible.
- 'Rand is built with features enabled by default: std, alloc, getrandom, std_rng'
- 'Optionally, the following dependencies can be enabled: log, small_rng, nightly,
  simd_support'
- Rand 0.5 requires Rustc 1.22 or greater while versions 0.4 and 0.3 require Rustc
  version 1.15 or greater.
- Bincode is suitable for storing data.
- Bincode can be used for untrusted inputs in the sense that it will not create security
  issues in your application, provided the configuration is changed to enable a maximum
  size limit.
- Executables should choose a logger implementation and initialize it early in the
  runtime of the program.
- Rand 0.4 and 0.3 (since approx. June 2017) require Rustc version 1.15 or greater.
- Rand requires Rustc version 1.22 or greater for version 0.5 and above.
- Test no_std support (build only since nearly all tests require std).
- New features are currently being released in an unstable channel; if you wish to
  opt-in to the latest releases (expect more breaking changes in this channel) specify
  rand = "0.4.0-pre.0".
- Rand is mature but not yet at 1.0.
- Rand 0.5 release requires Rustc version 1.22 or greater
- 'Rand is built with these features enabled by default: std, alloc, getrandom, std_rng.'
- The simd feature flag is enabled by default.
- The code base is fuzz tested.
- This is not cryptographically secure, and if you use it for crypto you will get
  what you deserve.
- You are also in charge of choosing a useful seed; the getrandom crate might be useful
  for that.
- Criterion.rs requires Rust 1.28 or later.
- Criterion.rs supports the last three stable minor releases of Rust.
- We recommend that all users of async-std, and all libraries built on async-std,
  switch to smol instead.
- TinyTemplate is well-suited to generating HTML reports and similar text files.
- Criterion.rs helps you write fast code by detecting and measuring performance improvements
  or regressions.
- You must have gnuplot installed to generate plots.
- Criterion.rs currently requires Rust 1.28 or later.
- Minimum supported rustc version is 1.46.0
- Only functions with 8 or fewer parameters can be quickchecked.
- Criterion.rs requires Rust 1.23 or later.
- To generate plots, gnuplot must be installed.
- JumpRope isn't a drop-in replacement for string, but it supports many similar methods.
- For more details, see JumpRope API documentation
- Uses unsafe code for performance optimizations
- The unsafe code is kept minimal, mostly compartmentalized, and easy to audit
- Currently, the oldest version of Rust believed to work is 1.57.
- This crate provides routines for searching strings for matches of a regular expression.
- The regex syntax supported by this crate is similar to other regex engines, but
  it lacks several features that are not known how to implement efficiently.
- Currently, the oldest version of Rust believed to work is 1.23.
- Criterion.rs is currently in maintenance mode. New features are not currently being
  developed.
- At time of writing, this means Rust 1.59 or later.
- Logs can be directed to console, formatted console, single file, daily file, or
  custom channel
- This library is similar to ropey, which has more features and is more mature.
- Jumprope supports doing wchar conversion in O(log n) time, by adding extra indexing
  information to the skip list.
- Use init() to initialize logger since Logger is useless without it being set as
  the logger
- The current MSRV of this crate is 1.66.
- Generating complex values in Proptest can be up to an order of magnitude slower
  than in QuickCheck.
- 'Minimum supported rustc: 1.40.0+'
- 'Latest published version could be used like this: [] = "1.5.0"'
- This crate only supports the most recent nightly Rust toolchain and will be superseded
  by stdsimd.
- Jumprope currently fails under miri because of some uncomfortable aliasing rules.
- The JumpRopeBuf API is unstable, and still subject to change.
- Rayon currently requires rustc 1.63.0 or greater.
- The repository contains a self-signed certificate usable for testing, but it should
  not be used for real-world scenarios.
- Criterion.rs helps you write fast code by detecting and measuring performance improvements
  or regressions, even small ones, quickly and accurately.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- This library was largely written as a learning exercise, to compare high performance
  rust vs the equivalent C code.
- Interestingly, while application code written in rust seems to end up smaller than
  its C equivalent, this library has ended up about the same size.
- My hot take is that rust's expressive advantages don't seem to amount to much when
  implementing deep data structures.
- I suspect there's a way to use rust's generics to add wide character support, newline
  iteration, and stuff like that in a templated way.
- 'That would be a huge win over the C version, which is littered with #ifdefs.'
- 'To start with Criterion.rs, add the following to your `Cargo.toml` file: `[] =
  "0.2"` and `[[]] = "my_benchmark" = false`.'
- Next, define a benchmark by creating a file at `$PROJECT/benches/my_benchmark.rs`.
- Minimum supported rustc version is 1.34.0
- Criterion.rs requires Rust 1.25 or later
- Requires gnuplot installed to generate plots.
- Rust does not support `long double` (80-bit precision floating-point types) and
  the SLEEF APIs that use it are not included in these bindings yet.
- This is a simple, fast data structure for efficiently editing large strings in text
  editors and things like that.
- Jumprope is faster with real data. On real world data sets, jumprope is over 2x
  as fast.
- Gnuplot must be installed to generate plots.
- Uses a good RNG, seeded with a good entropy source for performance protection.
- Currently, the oldest version of Rust believed to work is 1.36.
- This version of arrayvec requires Rust 1.36 or later.
- Most types in this crate are !Sync because the underlying compiler types make use
  of thread-local memory, meaning they cannot be accessed from a different thread.
- The nightly-only concat_idents! macro in the Rust standard library is notoriously
  underpowered in that its concatenated identifiers can only refer to existing items,
  they can never be used to define something new.
errors:
- 'Maximum rustdoc execution time: 15 minutes'
- 'Maximum size of a build log: 102.4 kB'
- 'Network access: blocked'
- Some versions of Rand crates have been yanked ('unreleased')
- Build errors can occur due to distinct, incompatible traits across crate versions.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
auth_info:
  mentioned_objects: []
client:
  headers:
    Accept: application/json
    Cargo: test
    use: derive_more
  base_url: ''
  auth: {}
  paginator: {}
source_metadata: null
