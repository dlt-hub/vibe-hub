resources:
- name: campaignId
  endpoint:
    path: /path/to/campaignId
    method: POST
    data_selector: campaignId
    params: {}
- name: followupUrl
  endpoint:
    path: /path/to/followupUrl
    method: POST
    data_selector: followupUrl
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: conversations
  endpoint:
    path: /v1/conversations
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: contacts
    params: {}
- name: conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: account
  endpoint:
    path: /accounts/{accountId}
    method: GET
    data_selector: data
- name: conversations
  endpoint:
    path: /reports/conversations
    method: POST
    data_selector: data
    params:
      limit: 25
- name: individual_conversation
  endpoint:
    path: /conversations/{conversationId}
    method: GET
    data_selector: data
- name: transcript
  endpoint:
    path: /conversations/{conversationId}/transcript
    method: GET
    data_selector: data
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
    params: {}
- name: accounts
  endpoint:
    path: /accounts/{accountId}
    method: DELETE
- name: conversation
  endpoint:
    path: /conversations/
    method: GET
- name: contact
  endpoint:
    path: /contacts/
    method: GET
- name: users
  endpoint:
    path: /users/list
    method: GET
- name: transcript
  endpoint:
    path: /conversations//transcript
    method: GET
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: data
    params: {}
- name: retrieve_campaigns
  endpoint:
    path: /campaign-eval/retrieve_campaigns_v2/
    method: GET
- name: contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: data.attributes
    params: {}
- name: team
  endpoint:
    path: /teams
    method: GET
    data_selector: teams
    params: {}
- name: app_uninstall
  endpoint:
    path: /app/uninstall
    method: POST
- name: gdpr_retrieve
  endpoint:
    path: /gdpr/retrieve
    method: POST
    data_selector: data
    params:
      email: email
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: messages
    params: {}
- name: conversation
  endpoint:
    path: /conversations/<conversationId>
    method: GET
    data_selector: data
- name: contacts
  endpoint:
    path: /contacts/normalize
    method: PATCH
    params:
      idType: '{type}'
      id: '{id}'
- name: conversation_transcript
  endpoint:
    path: /conversations/<conversationId>/transcript
    method: GET
- name: json_transcript
  endpoint:
    path: /conversations/<conversationId>/json_transcript
    method: GET
- name: widget_configuration
  endpoint:
    path: /drift/config
    method: POST
    data_selector: configuration
    params: {}
- name: chatInteraction
  endpoint:
    path: /events/chatInteraction
    method: POST
    data_selector: events
    params: {}
- name: timeline_events
  endpoint:
    path: /contacts/timeline
    method: POST
- name: account
  endpoint:
    path: /accounts/create
    method: POST
    data_selector: data
    params: {}
- name: country_info
  endpoint:
    path: /json/
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: records
    params: {}
- name: conversations
  endpoint:
    path: /v1/conversations
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: contacts
    params: {}
- name: conversations
  endpoint:
    path: /v1/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: Drift API
  endpoint:
    path: /api/collectFormData
    method: POST
    data_selector: form submission data
    params:
      campaignId: required
      followupUrl: optional
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: data.accounts
    params:
      size: 10
- name: users
  endpoint:
    path: /users/list
    method: GET
    data_selector: data
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: contacts
    params:
      incremental: updated_at
- name: conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: joke
  endpoint:
    path: /
    method: GET
    data_selector: joke
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: attributes
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /contacts/{contactId}
    method: PATCH
    data_selector: data.attributes
    params: {}
- name: drift_widget
  endpoint:
    path: /
    method: GET
- name: update_account
  endpoint:
    path: /accounts/update
    method: PATCH
    data_selector: account
    params: {}
- name: User
  endpoint:
    path: /scim/Users
    method: POST
- name: playbooks
  endpoint:
    path: /playbooks/list
    method: GET
    data_selector: '[]'
- name: landing_page
  endpoint:
    path: /CLP-test
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: conversations
  endpoint:
    path: /v1/conversations
    method: GET
    data_selector: data
    params: {}
- name: teams_org
  endpoint:
    path: /teams/org
    method: GET
    data_selector: data
- name: booked_meetings
  endpoint:
    path: /users/meetings/org
    method: GET
    data_selector: data
    params:
      incremental: updatedAt
- name: playbook
  endpoint:
    path: /api/playbooks
    method: GET
    data_selector: playbooks
- name: gdpr_delete
  endpoint:
    path: /gdpr/delete
    method: POST
    data_selector: data
    params:
      email: email
- name: create_conversation
  endpoint:
    path: /conversations/new
    method: POST
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: data
    params: {}
- name: attachments
  endpoint:
    path: /attachments/{DOC_ID}/data
    method: GET
- name: email_capture
  endpoint:
    path: /form/endpoint/here
    method: POST
    data_selector: data
    params: {}
- name: new_conversation
  endpoint:
    path: /services/data/vXX.X/sobjects/NewConversation
    method: POST
    data_selector: properties
- name: button_clicked
  endpoint:
    path: /services/data/vXX.X/sobjects/ButtonClicked
    method: POST
    data_selector: properties
- name: conversation_push
  endpoint:
    path: /services/data/vXX.X/sobjects/ConversationPush
    method: POST
    data_selector: properties
- name: contact_updated
  endpoint:
    path: /services/data/vXX.X/sobjects/ContactUpdated
    method: POST
    data_selector: traits
- name: new_meeting
  endpoint:
    path: /services/data/vXX.X/sobjects/NewMeeting
    method: POST
    data_selector: properties
- name: meeting_updated
  endpoint:
    path: /services/data/vXX.X/sobjects/MeetingUpdated
    method: POST
    data_selector: properties
- name: conversation_participant_removed
  endpoint:
    path: /services/data/vXX.X/sobjects/ConversationParticipantRemoved
    method: POST
    data_selector: properties
- name: conversation_participant_added
  endpoint:
    path: /services/data/vXX.X/sobjects/ConversationParticipantAdded
    method: POST
    data_selector: properties
- name: playbook_goal_met
  endpoint:
    path: /services/data/vXX.X/sobjects/PlaybookGoalMet
    method: POST
    data_selector: properties
- name: phone_captured
  endpoint:
    path: /services/data/vXX.X/sobjects/PhoneCaptured
    method: POST
    data_selector: traits
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params:
      email: ''
      limit: ''
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
- name: user
  endpoint:
    path: /Users
    method: GET
    data_selector: Resources
- name: user_by_id
  endpoint:
    path: /Users/{userId}
    method: GET
    data_selector: schemas
- name: user_single
  endpoint:
    path: /users/{userId}
    method: GET
    data_selector: data
- name: user_multiple
  endpoint:
    path: /users
    method: GET
    data_selector: data
- name: contact
  endpoint:
    path: /contacts/{contactId}
    method: DELETE
    data_selector: result
    params: {}
- name: conversation_messages
  endpoint:
    path: /conversations/<conversationId>/messages
    method: GET
    data_selector: messages
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: data
    params: {}
- name: meetings
  endpoint:
    path: /users/api/meetings
    method: GET
    data_selector: meetings
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: contacts
    params: {}
- name: conversations
  endpoint:
    path: /v1/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: user
  endpoint:
    path: /users/update
    method: PATCH
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: data
    params: {}
- name: gdprClicked
  endpoint:
    path: /gdpr/clicked
    method: POST
    data_selector: data
- name: startConversation
  endpoint:
    path: /conversation/start
    method: POST
    data_selector: data
- name: campaignOpen
  endpoint:
    path: /campaign/open
    method: POST
    data_selector: data
- name: campaignClick
  endpoint:
    path: /campaign/click
    method: POST
    data_selector: data
- name: campaignDismiss
  endpoint:
    path: /campaign/dismiss
    method: POST
    data_selector: data
- name: campaignSubmit
  endpoint:
    path: /campaign/submit
    method: POST
    data_selector: data
- name: chatOpen
  endpoint:
    path: /chat/open
    method: POST
    data_selector: data
- name: chatClose
  endpoint:
    path: /chat/close
    method: POST
    data_selector: data
- name: playbookFired
  endpoint:
    path: /conversation/playbookFired
    method: POST
    data_selector: data
- name: phoneCapture
  endpoint:
    path: /phone/capture
    method: POST
    data_selector: data
- name: firstInteraction
  endpoint:
    path: /conversation/firstInteraction
    method: POST
    data_selector: data
- name: welcomeMessageOpen
  endpoint:
    path: /welcomeMessage/open
    method: POST
    data_selector: data
- name: welcomeMessageClose
  endpoint:
    path: /welcomeMessage/close
    method: POST
    data_selector: data
- name: buttonClicked
  endpoint:
    path: /button/clicked
    method: POST
    data_selector: data
- name: emailCapture
  endpoint:
    path: /email/capture
    method: POST
    data_selector: data
- name: conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: transcript
  endpoint:
    path: /api/transcript
    method: GET
    data_selector: transcript
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: messages
    params: {}
- name: attachments
  endpoint:
    path: /api/attachments
    method: GET
    data_selector: attachments
    params: {}
- name: playbook
  endpoint:
    path: /api/playbook
    method: GET
    data_selector: playbook
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: GET
    data_selector: user
    params: {}
- name: new_message
  endpoint:
    path: /webhooks/new_message
    method: POST
    data_selector: data
- name: new_command_message
  endpoint:
    path: /webhooks/new_command_message
    method: POST
    data_selector: data
- name: new_conversation
  endpoint:
    path: /webhooks/new_conversation
    method: POST
    data_selector: data
- name: conversation_inactive
  endpoint:
    path: /webhooks/conversation_inactive
    method: POST
    data_selector: data
- name: conversation_manual_push
  endpoint:
    path: /webhooks/conversation_manual_push
    method: POST
    data_selector: data
- name: conversation_push
  endpoint:
    path: /webhooks/conversation_push
    method: POST
    data_selector: data
- name: conversation_participant_added
  endpoint:
    path: /webhooks/conversation_participant_added
    method: POST
    data_selector: data
- name: conversation_participant_removed
  endpoint:
    path: /webhooks/conversation_participant_removed
    method: POST
    data_selector: data
- name: button_clicked
  endpoint:
    path: /webhooks/button_clicked
    method: POST
    data_selector: data
- name: contact_identified
  endpoint:
    path: /webhooks/contact_identified
    method: POST
    data_selector: data
- name: playbook_goal_met
  endpoint:
    path: /webhooks/playbook_goal_met
    method: POST
    data_selector: data
- name: user_unsubscribed
  endpoint:
    path: /webhooks/user_unsubscribed
    method: POST
    data_selector: data
- name: new_meeting
  endpoint:
    path: /webhooks/new_meeting
    method: POST
    data_selector: data
- name: meeting_updated
  endpoint:
    path: /webhooks/meeting_updated
    method: POST
    data_selector: data
- name: gdpr_delete_requested
  endpoint:
    path: /webhooks/gdpr_delete_requested
    method: POST
    data_selector: data
- name: app_disconnected
  endpoint:
    path: /webhooks/app_disconnected
    method: POST
    data_selector: data
- name: user_availability_updated
  endpoint:
    path: /webhooks/user_availability_updated
    method: POST
    data_selector: data
- name: phone_captured
  endpoint:
    path: /webhooks/phone_captured
    method: POST
    data_selector: data
- name: chat_to_call
  endpoint:
    path: /webhooks/chat_to_call
    method: POST
    data_selector: data
- name: conversational_landing_pages
  endpoint:
    path: /playbooks/clp
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
- name: custom_attributes
  endpoint:
    path: /contacts/contact-settings
    method: GET
    data_selector: attributes
    params: {}
- name: users
  endpoint:
    path: /scim/Users
    method: POST
    data_selector: roles
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: contacts
    params: {}
- name: conversations
  endpoint:
    path: /v1/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: token_info
  endpoint:
    path: /app/token_info
    method: POST
    data_selector: access_token
    params: {}
- name: conversation_stats
  endpoint:
    path: /conversations/stats
    method: GET
    data_selector: conversationCount
    params: {}
- name: campaign_id
  endpoint:
    path: /campaigns
    method: GET
    data_selector: campaigns
    params: {}
- name: teams_by_user
  endpoint:
    path: /teams/users/{userId}
    method: GET
    data_selector: data
- name: custom_attributes
  endpoint:
    path: /contacts/attributes
    method: GET
    data_selector: data.properties
- name: startInteraction
  endpoint:
    path: /api/startInteraction
    method: POST
    data_selector: interactionId
    params: {}
- name: unsubscribe_contacts
  endpoint:
    path: /emails/unsubscribe
    method: POST
    data_selector: null
    params: {}
- name: message
  endpoint:
    path: /conversations/<conversationId>/messages
    method: POST
    data_selector: data.messages
- name: Zendesk
  endpoint:
    path: /zendesk
    method: POST
    data_selector: data
    params: {}
- name: Intercom
  endpoint:
    path: /intercom
    method: POST
    data_selector: data
    params: {}
- name: Salesforce Chat
  endpoint:
    path: /salesforce_chat
    method: POST
    data_selector: data
    params: {}
- name: ServiceNow
  endpoint:
    path: /servicenow
    method: POST
    data_selector: data
    params: {}
- name: Ada
  endpoint:
    path: /ada
    method: POST
    data_selector: data
    params: {}
- name: conversations
  endpoint:
    path: /conversations/list
    method: GET
    data_selector: data
    params:
      limit: 25
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: contacts
    params: {}
- name: conversations
  endpoint:
    path: /v1/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: buttonClicked
  endpoint:
    path: /conversation/buttonClicked
    method: POST
    data_selector: data.buttonBody
    params: {}
- name: startInteraction
  endpoint:
    path: /api/startInteraction
    method: POST
    data_selector: interactionId
    params: {}
- name: event
  endpoint:
    path: /events
    method: POST
    data_selector: '{}'
notes:
- Requires setup of connected app in Drift
- Requires OAuth2 setup with Drift.
- Ensure to handle rate limits appropriately.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Requires OAuth2 with refresh token setup.
- Capture custom Cookie values and pass them into Drift as Custom Contact Attributes.
- Requires conversation_read, user_read, and contact_read scopes.
- Ensure proper OAuth scopes are configured.
- This functionality will only work with chatbots and will not work with conversational
  landing pages (CLPs).
- Deletes are not true deletes from the Drift system. Deleting an account will hide
  it from the list view in Drift, but you can still query the account by ID later
  on.
- Deleting accounts requires the `account_write` scope.
- The use of drift.page() at the end of the above function is optional, but allows
  the use of new playbook targeting conditions if a visitor uses the back button after
  being redirected.
- Ensure to authorize your new app with the appropriate scopes to perform all the
  needed actions for your integration.
- The conversation_push webhook will fire whenever a conversation is closed.
- Authentication requires setting up OAuth2 credentials.
- Uses OAuth2 with refresh token - requires setup of connected app in Drift
- Customers can utilize Drift's JavaScript functions to assist with URL targeting.
- In the event the page URL will not provide meaningful information, customers can
  implement pageName variables from Gatsby.
- Warning! Do not use guessable values (like email or sequential numbers) for externalId's
  when creating contacts.
- Once the integration is successfully uninstalled, the client's access token used
  to make the request will be invalidated.
- Requested data will be emailed to the owner of the Drift organization
- Make sure you have added your measurement ID inside of Drift for your GA integration.
- You do not have to set up every event listener. You should set up only the events
  that you are interested on tracking/sending to GA.
- Scripts should be added in componentDidMount to ensure they are loaded when the
  DOM is ready.
- Requires conversation_read scope.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Drift uses cookies to identify site visitors who return to your website.
- An improper implementation of the drift.identify function can lead to site visitors
  being able to see the chat history of each other.
- Make sure you're not calling drift.reset() before the loading of the widget or before
  your identity call.
- Configuration options include locale, messages, enabling/disabling features, and
  visual customization.
- Requires installation of Adobe Analytics scripts on the website.
- Event listeners should be placed after the drift.load function.
- 'Required Scope: contact_write'
- The createdAt field is optional and defaults to the time of send.
- Accounts must have a unique domain
- Attempting to create an account with an identical domain will result in an API error
- Contact Update Subscriptions
- Uses OAuth2 with refresh token.
- Securing Drift on your Site with an iframe
- Uses OAuth2 with refresh token — requires setup of connected app in Drift.
- Forms need to use Drift-supported field types. Multi-value fields are not supported
  at this time.
- Listing accounts requires the `account_read` scope.
- No pagination present on this query - this will return the full list of users (with
  the full user model metadata).
- Loading Drift's JavaScript will always cause tracking cookies to be placed.
- Load Drift as a function on the acceptance event from HubSpot.
- Uses OAuth2 with refresh token — requires setup of connected app in Drift
- Some endpoints may have rate limits that affect data retrieval
- Uses Tray.io to create a proxy server for webhook handling
- Users can't be deleted or created via the API
- Requires setup of connected app in api
- Attributes will contain a mix of Drift-generated data as well as custom attributes.
- SCIM API and SSO are only available on Drift's paid plans.
- Re-provisioning the same user is not supported.
- If you need explicit time conversions, add this code to your Drift snippet
- Drift does not prevent multiple contact records from having the same email address.
- Drift intentionally does not prevent contact records with the same email address.
- Requires setup of OAuth app in Drift
- We will only return success if an update occurred
- Once installed, you’ll never have to touch it again no matter how many new features
  are released.
- The account id is required to make an update
- Keep Property Types consistent
- This endpoint currently only retrieves enabled and active playbooks
- Playbook API responses may be cached
- Drift's setUserAttributes method allows you to set a value to any attribute.
- The attribute defined is 'gclid', and the value is the 'gclid' query string parameter
  captured in the URL.
- Landing page URL must be published and playbook turned on.
- Requires user to have permissions to access the API.
- Rate limits apply to API calls.
- Listing teams requires the `team_read` scope.
- Min and Max start times are required and should be formatted as epoch times in milliseconds.
- This endpoint will only return meetings booked on dates up to 30 days in the past.
- Retrieving information on playbooks via the API will require the `playbook_read`
  scope.
- Data erasure is permanent
- Ensure that this is necessary for your application
- Requires the conversation_write scope.
- SCIM API and SSO are only available on Drift's paid plans
- Our API is configured with TLS encryption.
- Requires OAuth2 setup with Drift
- Ensure to handle rate limits during API calls
- The integration does not allow for the customization of the payloads sent to Segment.
- Requires OAuth2 setup for API integration
- Some endpoints may require additional scopes.
- Installed tokens never expire. If your token is compromised, uninstall and reinstall
  the app to generate a new token and invalidate the old one.
- 'Keep in mind: this only removes a contact from indexing in your Drift account''s
  Contacts view, for full GDPR-compliant deletion, please go to https://devdocs.drift.com/docs/gdpr-deletion'
- Requires sending a signed JSON Web Token (JWT) representing the user's identity
  along with your chosen user identifier.
- The only required payload claim is sub and that needs to be set to userId.
- Updating, creating, or deleting accounts will require the account_write scope.
- Accessing, searching, or getting accounts requires the account_read scope.
- Meetings can't be deleted or created via the API
- iFrame sandbox attributes are an addition to securing Drift on your website, but
  not nearly as important as loading the top layer iFrame from a separate domain as
  your main website domain.
- Ensure proper OAuth scope is granted.
- Rate limits apply to API usage.
- User roles cannot be updated via API at this time.
- Uses OAuth2 with refresh token
- The GDPR consent form is accessible at https://app.drift.com/settings2/consent
- 'If your site uses a CSP, here’s the minimal set of CSP rules needed to get up and
  running with Drift’s JavaScript SDK: script-src ''self'' https://js.driftt.com;
  https://widget.drift.com; frame-src ''self'' https://js.driftt.com; https://widget.drift.com;'
- Conversational Landing Page urls are configurable by the customer
- If a customer doesn't have bot playbooks enabled or configured, no results may be
  returned
- HTTPS redirect coming soon
- Some responses may contain nested fields
- By default, fields within Drift are of text data type.
- To use one of the other options, create a new attribute and select the data type
  that you are interested in.
- This event allows you to listen to all contact updates, like names, emails, etc.
- Requires the `all_contact_read` scope, which can be added in your apps settings.
- Some responses may include null values for optional fields
- An `expires_in` time of 0 may indicate no expiration on the token.
- REQUIRED for any use of drift.identify where visitor privacy and personal information
  are a consideration.
- Attributes should be treated as case-sensitive.
- This code allows a different Driftlink to be used depending on if your team is online
  or offline.
- If you do not properly configure your bearer token to have scopes for Contact Read,
  Conversation Read, and User Read, you will be unable to retrieve data from Drift's
  API.
- Listing teams by user requires the `team_read` scope.
- Listing custom attributes requires an elevated scope.
- Requires the 'all_contact_read' scope.
- The drift.startInteraction ignores any online or offline logic in your Drift org
  and will always fire when called from within your Javascript.
- Validate the contact was unsubscribed by checking the UI
- Remember to have your Google Tag Manager snippet code installed on your page.
- The Drift install snippet needs to be running before the Data Layer Object snippet.
- Ensure there's no conflict with two widgets on the page.
- Button text must match exactly to trigger the appropriate actions.
- Uses Bearer authentication token
- Because of Marketo limitations, this process will not work correctly when the conversation
  transcript includes emojis.
- Drift API requires OAuth2 authentication with a refresh token.
- Check for rate limits when making API calls.
- The flow is triggered by the creation of a new Drift Conversation Task.
- The method requires a second playbook to be created for initiating chat.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Check token validity.'
- '429 Too Many Requests: Rate limit exceeded.'
- 'INVALID_TOKEN: Check if the token is valid or expired.'
- '403 FORBIDDEN: Ensure the API key has the necessary permissions.'
- '401 Unauthorized: Check if the OAuth Access Token is valid.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check if the token is valid or has expired.'
- '404 Not Found: Verify the endpoint URL.'
- 'not_found: No conversation exists in the org with that ID'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '200: Indicates successful receipt'
- 'INVALID_ACCESS_TOKEN: Recheck OAuth token.'
- 'RESOURCE_NOT_FOUND: Ensure the resource ID is correct.'
- 'RATE_LIMIT_EXCEEDED: Throttle your API requests.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'validation_error: One or more fields are invalid'
- 'authentication_error: Missing proper authorization'
- 'not_found: The requested resource was not found'
- 'internal_error: Something went wrong in our system'
- 'rate_limit: You have maxed your number of API calls for the provided time window'
- 'CONTACT-1: Unauthorized to view contact or not found.'
- 'CONTACT-2: Unauthorized to view contact or not found.'
- 'CONTACT-4: Malformed contact: Bad http payload construction for updating or creating
  a new contact.'
- 'CONTACT-5: Drift had an unexpected issue processing the request, perhaps check
  the payload body for formatting or bad field values.'
- 'CONTACT-6: Conflict when creating contact. Typically results from a contact already
  existing with a given id.'
- 'CONTACT-7: Attempted to create a contact without email.'
- 'CONTACT-8: Attempted to create or update contact without attributes.'
- 'CONTACT-9: Bad format of contact tags in payload. Common case is that a provided
  tag name didn''t map to known a know tag id.'
- 'CONTACT-10: Unrecognized query parameter.'
- 'CONTACT-11: Generic Bad Request from contact service. Includes custom message.'
- '401 Unauthorized: Check OAuth token'
- '404 Not Found: Verify endpoint path'
- '401 Unauthorized: Updating accounts requires the account_write scope'
- '403 Forbidden: Check user permissions.'
- '404 Not Found: Verify endpoint and resource availability.'
- '500 Internal Server Error: Retry the request.'
- '401 Unauthorized: Check your credentials'
- '404 Not Found: Ensure the endpoint is correct'
- '429 Too Many Requests: Throttle your requests'
- 'RATE_LIMIT_EXCEEDED: Reduce the number of API calls'
- 'UNAUTHORIZED: Check OAuth token validity'
- '401 Unauthorized: Check your token and permissions.'
- '429 Too Many Requests: Reduce the frequency of requests.'
- '202 Accepted: A successful request will result in this response'
- '429 Too Many Requests: Reduce the frequency of API calls.'
- '401 Unauthorized: Verify the access token is valid.'
- '401 Unauthorized: Check if the token is valid'
- '404 Not Found: Verify the endpoint existence'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify OAuth token'
- '404 Not Found: Check endpoint path'
- Ensure that the webhook is only called when the Conversation ID field is not empty
  to avoid any errors.
- '429 Too Many Requests: Rate limit exceeded, try again later.'
- '401 Unauthorized: Check your access token and permissions.'
auth_info:
  mentioned_objects:
  - OauthToken
  - OAuth2
  - DriftAPI
  - OAuthToken
  - AuthProvider
  - NamedCredential
  - DriftToken
  - OAuth
  - AccessToken
client:
  base_url: https://your-instance.salesforce.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.salesforce.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
    scope: playbook_read
  headers:
    Accept: application/json
    Content-Type: application/json
    type: text/javascript
    User-Agent: recommended
    Authorization: Bearer YOUR_TOKEN
    crossorigin: anonymous
  paginator:
    type: cursor
    cursor_param: next
    cursor_path: Link
    page_size_param: limit
    default_page_size: 50
source_metadata: null
