resources:
- name: genesis_account
  endpoint:
    path: add-genesis-account
    method: POST
    data_selector: genesis.json
    params: {}
- name: gentx
  endpoint:
    path: gentx
    method: POST
    data_selector: genesis.json
    params: {}
- name: status
  endpoint:
    path: status
    method: GET
    data_selector: status
    params: {}
- name: tx
  endpoint:
    path: query/tx
    method: GET
    data_selector: transaction
    params: {}
- name: txs
  endpoint:
    path: query/txs
    method: GET
    data_selector: transactions
    params: {}
- name: create_position
  endpoint:
    path: /createPosition
    method: POST
    data_selector: response
    params: {}
- name: withdraw_position
  endpoint:
    path: /withdrawPosition
    method: POST
    data_selector: response
    params: {}
- name: create_pool
  endpoint:
    path: /createConcentratedPool
    method: POST
    data_selector: response
    params: {}
- name: collect_spread_rewards
  endpoint:
    path: /collectSpreadRewards
    method: POST
    data_selector: response
    params: {}
- name: fungify_charged_positions
  endpoint:
    path: /fungifyChargedPositions
    method: POST
    data_selector: response
    params: {}
- name: swap
  endpoint:
    path: /x/poolmanager/swap
    method: POST
    data_selector: swapResults
    params: {}
- name: migrate
  endpoint:
    path: /x/poolmanager/migrate
    method: POST
    data_selector: migrationResults
    params: {}
- name: fungify
  endpoint:
    path: /x/poolmanager/fungify
    method: POST
    data_selector: fungificationResults
    params: {}
- name: AllBalances
  endpoint:
    path: /cosmos/bank/v1beta1/balances/
    method: GET
    data_selector: null
    params: {}
- name: create_cosmwasm_pool
  endpoint:
    path: /x/cosmwasmpool/create
    method: POST
    data_selector: response
    params: {}
- name: swap_exact_amount_in
  endpoint:
    path: /x/cosmwasmpool/swap_in
    method: POST
    data_selector: response
    params: {}
- name: swap_exact_amount_out
  endpoint:
    path: /x/cosmwasmpool/swap_out
    method: POST
    data_selector: response
    params: {}
- name: set_active
  endpoint:
    path: /x/cosmwasmpool/set_active
    method: POST
    data_selector: response
    params: {}
- name: gRPC
  endpoint:
    path: grpc.osmosis.zone:9090
    method: GET
- name: gRPC-gateway
  endpoint:
    path: https://rpc.osmosis.zone:443
    method: GET
- name: lcd-endpoint
  endpoint:
    path: https://lcd.osmosis.zone
    method: GET
- name: Mintscan
  endpoint:
    path: https://www.mintscan.io/osmosis
    method: GET
- name: Bigdipper
  endpoint:
    path: https://osmosis.bigdipper.live/
    method: GET
- name: Ping.pub
  endpoint:
    path: https://ping.pub/osmosis
    method: GET
- name: Celatone (Contract Explorer)
  endpoint:
    path: https://celatone.osmosis.zone/mainnet
    method: GET
- name: Testnet Mintscan
  endpoint:
    path: https://testnet.mintscan.io/osmosis-testnet
    method: GET
- name: Testnet Ping.pub
  endpoint:
    path: https://testnet.ping.pub/osmosis
    method: GET
- name: Testnet Celatone (Contract Explorer)
  endpoint:
    path: https://celatone.osmosis.zone/testnet
    method: GET
- name: MsgCreatePosition
  endpoint:
    path: /createPosition
    method: POST
    data_selector: position
    params: {}
- name: MsgWithdrawPosition
  endpoint:
    path: /withdrawPosition
    method: POST
    data_selector: withdrawal
    params: {}
- name: MsgCreateConcentratedPool
  endpoint:
    path: /createConcentratedPool
    method: POST
    data_selector: pool
    params: {}
- name: MsgCollectSpreadRewards
  endpoint:
    path: /collectSpreadRewards
    method: POST
    data_selector: rewards
    params: {}
- name: MsgFungifyChargedPositions
  endpoint:
    path: /fungifyChargedPositions
    method: POST
    data_selector: fungified_position
    params: {}
- name: bech32_prefix
  endpoint:
    path: /slip173/register
    method: POST
    data_selector: data
    params: {}
- name: chains
  endpoint:
    path: /osmosis-1/osmosis.zone_chains.json
    method: GET
- name: assets
  endpoint:
    path: /osmosis-1/osmosis.zone_assets.json
    method: GET
- name: create_pool
  endpoint:
    path: /tx/concentratedliquidity/create-pool
    method: POST
    data_selector: result
    params: {}
- name: query_params
  endpoint:
    path: /query/concentratedliquidity/params
    method: GET
    data_selector: result
    params: {}
- name: balances
  endpoint:
    path: /cosmos/bank/v1beta1/balances/{address}
    method: GET
    data_selector: records
    params: {}
- name: create_external_incentives_gauge
  endpoint:
    path: /tx/incentives/create-gauge
    method: POST
    data_selector: result
    params: {}
- name: internal_incentives
  endpoint:
    path: /poolincentives
    method: GET
    data_selector: weightings
    params: {}
- name: gamm_query
  endpoint:
    path: /cosmos/gamm/v1beta1/query
    method: GET
    data_selector: services
    params: {}
- name: bank_query
  endpoint:
    path: /cosmos/bank/v1beta1/query
    method: GET
    data_selector: services
    params: {}
- name: balance
  endpoint:
    path: /cosmos/bank/v1beta1/allBalances
    method: GET
    data_selector: balance
- name: pools
  endpoint:
    path: /osmosis/gamm/v1beta1/pools
    method: GET
    data_selector: pools
- name: epoch_infos
  endpoint:
    path: /epochs/epoch-infos
    method: GET
    data_selector: epochs
- name: current_epoch
  endpoint:
    path: /epochs/current-epoch
    method: GET
    data_selector: current_epoch
- name: total_liquidity
  endpoint:
    path: /gamm/total-liquidity
    method: GET
    data_selector: total_liquidity
- name: total_share
  endpoint:
    path: /gamm/total-share
    method: GET
    data_selector: total_share
- name: proposals
  endpoint:
    path: /gov/proposals
    method: GET
    data_selector: proposals
- name: proposal
  endpoint:
    path: /gov/proposal/{proposal-id}
    method: GET
    data_selector: content
- name: tally
  endpoint:
    path: /gov/tally/{proposal-id}
    method: GET
    data_selector: tally
- name: params
  endpoint:
    path: /gov/params
    method: GET
    data_selector: params
- name: to_distribute_coins
  endpoint:
    path: /query/incentives/to-distribute-coins
    method: GET
    data_selector: coins
    params: {}
- name: upcoming_gauges
  endpoint:
    path: /query/incentives/upcoming-gauges
    method: GET
    data_selector: coins
    params: {}
- name: distr-info
  endpoint:
    path: /poolincentives/distr-info
    method: GET
    data_selector: records
- name: external-incentivized-gauges
  endpoint:
    path: /poolincentives/external-incentivized-gauges
    method: GET
    data_selector: records
- name: gauge-ids
  endpoint:
    path: /poolincentives/gauge-ids
    method: GET
    data_selector: gauge_ids_with_duration
- name: incentivized-pools
  endpoint:
    path: /poolincentives/incentivized-pools
    method: GET
    data_selector: records
- name: lockable-durations
  endpoint:
    path: /poolincentives/lockable-durations
    method: GET
    data_selector: lockable_durations
- name: params
  endpoint:
    path: /poolincentives/params
    method: GET
    data_selector: params
- name: create_denom
  endpoint:
    path: /tx/tokenfactory/create-denom
    method: POST
    data_selector: response
    params: {}
- name: mint
  endpoint:
    path: /tx/tokenfactory/mint
    method: POST
    data_selector: response
    params: {}
- name: denom_metadata
  endpoint:
    path: /query/bank/denom-metadata
    method: GET
    data_selector: metadata
    params: {}
- name: denoms_from_creator
  endpoint:
    path: /query/tokenfactory/denoms-from-creator
    method: GET
    data_selector: tokens
    params: {}
- name: module_accounts
  endpoint:
    path: /modules/accounts
    method: GET
    data_selector: accounts
    params: {}
- name: pool
  endpoint:
    path: /gamm/pool/{poolID}
    method: GET
    data_selector: pool
    params: {}
- name: num_pools
  endpoint:
    path: /gamm/num-pools
    method: GET
    data_selector: numPools
    params: {}
- name: rate_limit
  endpoint:
    path: /contracts/rate_limit
    method: POST
    data_selector: data
    params: {}
- name: gauge
  endpoint:
    path: /incentives/gauge
    method: GET
    data_selector: gauge
    params: {}
- name: gauges
  endpoint:
    path: /incentives/gauges
    method: GET
    data_selector: gauges
    params: {}
- name: active-gauges
  endpoint:
    path: /incentives/active-gauges
    method: GET
    data_selector: active_gauges
    params: {}
- name: active-gauges-per-denom
  endpoint:
    path: /incentives/active-gauges-per-denom
    method: GET
    data_selector: active_gauges_per_denom
    params: {}
- name: distributed-coins
  endpoint:
    path: /incentives/distributed-coins
    method: GET
    data_selector: distributed_coins
    params: {}
- name: period_lock
  endpoint:
    path: /lockup/period_lock
    method: GET
    data_selector: period_locks
- name: synthetic_lock
  endpoint:
    path: /lockup/synthetic_lock
    method: GET
    data_selector: synthetic_locks
- name: module_balance
  endpoint:
    path: /query/lockup/module-balance
    method: GET
    data_selector: coins
    params: {}
- name: module_locked_amount
  endpoint:
    path: /query/lockup/module-locked-amount
    method: GET
    data_selector: coins
    params: {}
- name: account_locked_coins
  endpoint:
    path: /query/lockup/account-locked-coins
    method: GET
    data_selector: coins
    params: {}
- name: account_unlockable_coins
  endpoint:
    path: /query/lockup/account-unlockable-coins
    method: GET
    data_selector: coins
    params: {}
- name: account_unlocking_coins
  endpoint:
    path: /query/lockup/account-unlocking-coins
    method: GET
    data_selector: coins
    params: {}
- name: account_locked_before_time
  endpoint:
    path: /query/lockup/account-locked-beforetime
    method: GET
    data_selector: locks
    params: {}
- name: account_locked_past_time
  endpoint:
    path: /query/lockup/account-locked-pasttime
    method: GET
    data_selector: locks
    params: {}
- name: account_locked_longer_duration
  endpoint:
    path: /query/lockup/account-locked-longer-duration
    method: GET
    data_selector: locks
    params: {}
- name: lock_by_id
  endpoint:
    path: /query/lockup/lock-by-id
    method: GET
    data_selector: lock
    params: {}
- name: output_all_locks
  endpoint:
    path: /query/lockup/output-all-locks
    method: GET
    data_selector: locks
    params: {}
- name: total_locked_of_denom
  endpoint:
    path: /query/lockup/total-locked-of-denom
    method: GET
    data_selector: amount
    params: {}
- name: params
  endpoint:
    path: /mint/params
    method: GET
    data_selector: params
    params: {}
- name: epoch-provisions
  endpoint:
    path: /mint/epoch-provisions
    method: GET
    data_selector: epoch_provisions
    params: {}
- name: MsgSuperfluidUndelegate
  endpoint:
    path: /superfluid/undelegate
    method: POST
    data_selector: result
    params:
      lock_id: '{lock_id}'
- name: MsgLockAndSuperfluidDelegate
  endpoint:
    path: /superfluid/lock_and_delegate
    method: POST
    data_selector: result
    params: {}
- name: MsgSuperfluidUnbondLock
  endpoint:
    path: /superfluid/unbond_lock
    method: POST
    data_selector: result
    params:
      lock_id: '{lock_id}'
- name: params
  endpoint:
    path: /params
    method: GET
    data_selector: params
    params: {}
- name: superfluid_delegation_amount
  endpoint:
    path: /superfluid_delegation_amount
    method: GET
    data_selector: amount
    params: {}
- name: all_assets
  endpoint:
    path: /all_assets
    method: GET
    data_selector: assets
    params: {}
- name: connected_intermediary_account
  endpoint:
    path: /connected_intermediary_account
    method: GET
    data_selector: account
    params: {}
- name: all_intermediary_accounts
  endpoint:
    path: /all_intermediary_accounts
    method: GET
    data_selector: accounts
    params: {}
- name: CreatePool
  endpoint:
    path: /x/poolmanager/CreatePool
    method: POST
    data_selector: poolId
    params: {}
- name: SwapExactAmountIn
  endpoint:
    path: /x/poolmanager/SwapExactAmountIn
    method: POST
    data_selector: tokenOutAmount
    params: {}
- name: SwapExactAmountOut
  endpoint:
    path: /x/poolmanager/SwapExactAmountOut
    method: POST
    data_selector: tokenInAmount
    params: {}
- name: SplitRouteSwapExactAmountIn
  endpoint:
    path: /x/poolmanager/SplitRouteSwapExactAmountIn
    method: POST
    data_selector: tokenOutAmount
    params: {}
- name: SplitRouteSwapExactAmountOut
  endpoint:
    path: /x/poolmanager/SplitRouteSwapExactAmountOut
    method: POST
    data_selector: tokenInAmount
    params: {}
- name: osmosis_channels
  endpoint:
    path: /channels/osmosis
    method: GET
    data_selector: channels
    params: {}
- name: 3ventures
  endpoint:
    path: /3ventures
    method: GET
    data_selector: relayers
    params: {}
- name: Blockscope
  endpoint:
    path: /Blockscope
    method: GET
    data_selector: relayers
    params: {}
- name: BloClick
  endpoint:
    path: /BloClick
    method: GET
    data_selector: relayers
    params: {}
- name: Bro_n_Bro
  endpoint:
    path: /Bro_n_Bro
    method: GET
    data_selector: relayers
    params: {}
- name: Cephalopod Equipment Corp
  endpoint:
    path: /Cephalopod_Equipment_Corp
    method: GET
    data_selector: relayers
    params: {}
- name: Cros-nest
  endpoint:
    path: /Cros-nest
    method: GET
    data_selector: relayers
    params: {}
- name: CryptoCrew Validators
  endpoint:
    path: /CryptoCrew_Validators
    method: GET
    data_selector: relayers
    params: {}
- name: Imperator.co
  endpoint:
    path: /Imperator_co
    method: GET
    data_selector: relayers
    params: {}
- name: Interbloc
  endpoint:
    path: /Interbloc
    method: GET
    data_selector: relayers
    params: {}
- name: Inter Blockchain Services
  endpoint:
    path: /Inter_Blockchain_Services
    method: GET
    data_selector: relayers
    params: {}
- name: larry.engineer
  endpoint:
    path: /larry.engineer
    method: GET
    data_selector: relayers
    params: {}
- name: Lavender.Five Nodes
  endpoint:
    path: /Lavender.Five_Nodes
    method: GET
    data_selector: relayers
    params: {}
- name: LikeCoin by LikerLand
  endpoint:
    path: /LikeCoin_by_LikerLand
    method: GET
    data_selector: relayers
    params: {}
- name: Polkachu
  endpoint:
    path: /Polkachu
    method: GET
    data_selector: relayers
    params: {}
- name: POSTHUMAN
  endpoint:
    path: /POSTHUMAN
    method: GET
    data_selector: relayers
    params: {}
- name: Silk Nodes
  endpoint:
    path: /Silk_Nodes
    method: GET
    data_selector: relayers
    params: {}
- name: Simply Staking
  endpoint:
    path: /Simply_Staking
    method: GET
    data_selector: relayers
    params: {}
- name: StakeLab
  endpoint:
    path: /StakeLab
    method: GET
    data_selector: relayers
    params: {}
- name: strangelove-ventures
  endpoint:
    path: /strangelove-ventures
    method: GET
    data_selector: relayers
    params: {}
- name: Witval
  endpoint:
    path: /Witval
    method: GET
    data_selector: relayers
    params: {}
- name: Crypto Assassin
  endpoint:
    path: /Crypto_Assassin
    method: GET
    data_selector: relayers
    params: {}
- name: Stakin
  endpoint:
    path: /Stakin
    method: GET
    data_selector: relayers
    params: {}
- name: transactions
  endpoint:
    path: /query/txs
    method: GET
    data_selector: txs
    params:
      height: '2836990'
      events: tx.height=2836990
      limit: '64'
- name: transaction
  endpoint:
    path: /txs
    method: GET
    data_selector: txs
    params: {}
- name: GetArithmeticTwap
  endpoint:
    path: /GetArithmeticTwap
    method: GET
    data_selector: twap
    params:
      poolId: uint64
      baseAssetDenom: string
      quoteAssetDenom: string
      startTime: time.Time
      endTime: time.Time
- name: GetArithmeticTwapToNow
  endpoint:
    path: /GetArithmeticTwapToNow
    method: GET
    data_selector: twap
    params:
      poolId: uint64
      baseAssetDenom: string
      quoteAssetDenom: string
      startTime: time.Time
- name: base-denom
  endpoint:
    path: /query/base-denom
    method: GET
- name: denom-pool-id
  endpoint:
    path: /query/denom-pool-id
    method: GET
- name: fee-tokens
  endpoint:
    path: /query/fee-tokens
    method: GET
- name: SetValidatorSetPreference
  endpoint:
    path: /SetValidatorSetPreference
    method: POST
    data_selector: validator-set preference
    params: {}
- name: MsgDelegateToValidatorSet
  endpoint:
    path: /MsgDelegateToValidatorSet
    method: POST
    data_selector: delegate
    params: {}
- name: MsgUndelegateFromValidatorSet
  endpoint:
    path: /MsgUndelegateFromValidatorSet
    method: POST
    data_selector: undelegate
    params: {}
- name: MsgWithdrawDelegationRewards
  endpoint:
    path: /MsgWithdrawDelegationRewards
    method: POST
    data_selector: withdraw rewards
    params: {}
- name: MsgRedelegateValidatorSet
  endpoint:
    path: /MsgRedelegateValidatorSet
    method: POST
    data_selector: redelegate
    params: {}
- name: cosmoshub-4
  endpoint:
    path: /chains/cosmoshub-4
    method: GET
    data_selector: chains
    params: {}
- name: osmosis-1
  endpoint:
    path: /chains/osmosis-1
    method: GET
    data_selector: chains
    params: {}
- name: block
  endpoint:
    path: /block/{block_number}
    method: GET
    data_selector: result
- name: contract_info
  endpoint:
    path: /wasm/contract
    method: GET
    data_selector: data
    params:
      contract: osmo1mpf0guu0t363xrshhedandypq003ahzaxvsxzgu69n3ej03mh2zqx5gk8l
- name: contract_version
  endpoint:
    path: /wasm/contract-state/raw
    method: GET
    data_selector: data
    params:
      contract: osmo1mpf0guu0t363xrshhedandypq003ahzaxvsxzgu69n3ej03mh2zqx5gk8l
      key: 636F6E74726163745F696E666F
- name: download_contract
  endpoint:
    path: /wasm/code
    method: GET
    data_selector: data
    params:
      code_id: '205'
- name: verify_hash
  endpoint:
    path: /hash/verify
    method: POST
    data_selector: hash_verification
    params:
      hash: 0b662785042cd938d0f0e8142f69d2d23fdf0addec965d1fbeacf44080330016
- name: contract
  endpoint:
    path: /query/wasm/contract
    method: GET
    data_selector: contract
    params: {}
- name: count
  endpoint:
    path: /query/wasm/contract/count
    method: GET
    data_selector: count
    params: {}
- name: wasm_contract
  endpoint:
    path: /tx/wasm/store
    method: POST
    data_selector: txhash
    params:
      chain-id: localosmosis
- name: contract_state
  endpoint:
    path: /wasm/contract-state/smart
    method: GET
    data_selector: state
    params: {}
- name: wasm_contract
  endpoint:
    path: /tx/wasm/store
    method: POST
    data_selector: RES
    params:
      gas-prices: 0.1uosmo
      gas: auto
      gas-adjustment: 1.3
      output: json
      broadcast_mode: block
- name: submit_proposal
  endpoint:
    path: /tx/gov/submit-proposal
    method: POST
    data_selector: result
    params:
      gas: '9000000'
      gas_prices: 0.025uosmo
- name: query_proposal
  endpoint:
    path: /gov/proposal/{proposal_id}
    method: GET
    data_selector: proposal
    params: {}
- name: deposit_proposal
  endpoint:
    path: /gov/deposit/{proposal_id}
    method: POST
    data_selector: result
    params:
      gas: '6000000'
      gas_prices: 0.025uosmo
- name: vote_proposal
  endpoint:
    path: /gov/vote/{proposal_id}
    method: POST
    data_selector: result
    params:
      gas: '600000'
      gas_prices: 0.025uosmo
- name: list_code
  endpoint:
    path: /wasm/list-code
    method: GET
    data_selector: code_list
    params: {}
- name: contract_deploy
  endpoint:
    path: /wasm/deploy
    method: POST
    data_selector: result
    params:
      signer-account: test1
      network: testnet
      no-wasm-opt: true
      raw: '{ "count": 0 }'
      label: My first Beaker Contract
- name: proposal_query
  endpoint:
    path: /gov/v1beta1/proposals/{proposal_id}
    method: GET
    data_selector: result
    params:
      network: testnet
- name: counter
  endpoint:
    path: /wasm/counter
    method: POST
    data_selector: result
    params: {}
notes:
- Ensure the daemon is not running in the background when taking a state export.
- Some cosmos sdk versions write to STDERR instead of STDOUT; use 2> for v5 and later.
- There are precision issues that we must be considerate of in our design.
- Only chains using Cosmos-SDK v0.40+ can support IBC transfers.
- It is recommended to initialize the channel as an unordered IBC channel.
- Osmosis requires that all relayers pay for the transaction fees for IBC relay transactions.
- 'Note: our currency registrar checks IBC hashes to see if they can be found via
  the denom_trace query in the IBC module on chain.'
- You will pay for the IBC transaction costs on the outpost chain and the swap costs
  on the Osmosis pools.
- If the swap button is disabled and says 'No route for this trade', there is no route
  available on the contract to perform this swap directly.
- If the swap button is disabled and says 'Not allowed', this means that you denied
  the connection of the dApp to one of the chains involved in the swap operations.
- The recovery address can be set for the next swap. It cannot be modified once the
  swap started.
- By default, it is set to the osmosis address associated to the connected wallet.
- If the recovery address is associated to a wallet you do not own, you will not be
  able to recover funds if the swap process fails.
- Only the 1ns uptime will be authorized at launch
- The contract itself holds tokens that are provided by users.
- Running the benchmarks on an idle machine not running on battery
- Use -benchmem to also get stats on allocated objects and space
- Use benchstat to compare performance across different git branches
- Adding -run='$^' or -run=- to each go test command to avoid running the tests too
- Using higher -count values if the benchmark numbers aren't stable
- People recommend 5 as a good enough sample size
- Even if any of the steps fail, the funds are not lost.
- Until the tokens are not swapped, if any step fails, the tokens remain on your original
  wallet.
- Once they are swapped, if any step fails, the tokens are guarded by the smart contract.
- Incentives at launch are primarily focused on addressing liquidity off the books
  until a trade occurs.
- bech32 prefix must be unique among all registered prefixes
- Must ensure that the source chain is included in chains array.
- 'New additions default with having ''osmosis_verified'': false'
- A pool creation fee of 20 USDC is required.
- Always use uppercase letters within the hash portion of token denominations.
- Osmosis Zone recommends at least USD $1000-worth of liquidity in a pool before it
  is listed onto osmosis.zone.
- 50/50 pools are recommended.
- Connects to the node at http://osmosis.artifact-staking.io:26657
- To connect to the testnet, use https://rpc.testnet.osmosis.zone:443
- CORS policies are not enabled by default to help with security.
- The token must have reasonable liquidity, paired with $OSMO as a minimum requirement.
- All OSMO collected is distributed to stakers.
- Non-OSMO collected is divided, with 33% going to the Community Pool and 67% being
  converted to OSMO before being distributed to stakers.
- Easily modifiable world states
- Quick to reset for rapid iterations
- Simple simulations of different scenarios
- Controllable validator behavior
- A small fee in OSMO to create a gauge, currently 50 OSMO.
- Adjustments to incentive weightings require governance approval.
- gRPC server address defaults to 0.0.0.0:9090
- gRPC server can be queried using grpcurl or Buf Studio
- The minimum deposit for a proposal is 1600000000 uOSMO.
- The maximum deposit period is 1209600000000000 nanoseconds.
- The voting period is 432000000000000 nanoseconds.
- Wasm hooks is an IBC middleware that parses an ICS20 transfer.
- Only the IBC packet sender can set the callback.
- There is now a 20 USDC fee for creating pools.
- Currently no parameters are set for lockup module.
- mint_denom defines denom for minting token - uosmo
- genesis_epoch_provisions provides minting tokens per epoch at genesis.
- epoch_identifier defines the epoch identifier to be used for the mint module e.g.
  'weekly'
- reduction_period_in_epochs defines the number of epochs to pass to reduce the mint
  amount
- reduction_factor defines the reduction factor of tokens at every reduction_period_in_epochs
- The params query returns the params for the superfluid module.
- This query does not currently support pagination, but may in the future.
- The poolmanager module routes swaps across various pools.
- Pool creation messages are handled by the pool model's message server.
- Each transaction has an identical structure.
- Quicker than the quick startIf you're moving quicker than everybody else, we suggest
  looking at a before-after review of this example integration.
- If you want to go more in depth, browse the fullcw-orch documentation.
- It can be useful to re-export this struct to simplify usage (inlib.rs):#[cfg(feature
  = "interface")] pub use create::interface::CounterContract;
- Again, it can be useful to re-export these generated traits to simplify usage (inlib.rs):#[cfg(feature
  = "interface")] pub use create::msg::{ExecuteMsgFns as CounterExecuteMsgFns, QueryMsgFns
  as CounterQueryMsgFns}.
- startTime must be within 48 hours of ctx.BlockTime()
- For users who need TWAPs outside the 48 hours stored in the state machine, you can
  get the latest accumulation store record from GetBeginBlockAccumulatorRecord
- Ensure the relayer wallet has funds in both $OSMO and $ATOM to pay fees.
- 'WARNING: NOT RECOMMENDED TO USE PLAIN-TEXT MNEMONICS. Please take care of your
  security and use best practices such as AES encryption and/or methods from 12factor
  applications.'
- Create React App requires updating Webpack configurations.
- You can deploy contracts to LocalOsmosis with Beaker.
- Use the cw-tpl-osmosis template for smart contracts.
- Use 'osmosisd' CLI for deployment and execution of smart contracts.
- Optimized compilation is recommended for reducing gas costs.
- Proposal ID must be defined manually for the first submission.
- Gas prices and limits are specified for each transaction.
- The testnet is permissionless by default to allow developers to easily deploy contracts.
- On the testnet the voting period is very short, only 3 minutes.
- Beaker makes it easy to scaffold a new cosmwasm app, with all of the dependencies
  for osmosis hooked up, interactive console, and a sample front-end at the ready.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'INVALID_REQUEST: Check the request parameters and format.'
- 'PROPOSAL_NOT_FOUND: Ensure the proposal ID exists.'
- 'INSUFFICIENT_FUNDS: Ensure enough tokens are available for deposit.'
- 'Invalid request: Ensure the lock_id is correct.'
- 'Unauthorized: Check if the user has permissions.'
- startTime > endTime
- endTime in the future
- startTime older than 48 hours OR pool creation
- pool with id poolId does not exist, or does not contain quoteAssetDenom, baseAssetDenom
- 'Invalid key name: Check the provided key name.'
- 'Insufficient funds: Ensure you have enough uosmo for transaction fees.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://your-instance.api-name.com
  headers:
    Accept: application/json
    output: text
    Content-Type: application/json
  auth:
    type: keyring
    location: header
  paginator: {}
source_metadata: null
