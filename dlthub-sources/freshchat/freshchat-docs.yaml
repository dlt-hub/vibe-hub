resources:
- name: conversation
  endpoint:
    path: /conversations/{conversation_id}
    method: GET
    data_selector: conversation
    params:
      conversation_id: '{{ conversation_id }}'
- name: update_conversation
  endpoint:
    path: /conversations/{conversation_id}
    method: PUT
    params:
      conversation_id: '{{ conversation_id }}'
      status: '{{ status }}'
      app_id: '{{ app_id }}'
      assigned_agent_id: '{{ assigned_agent_id }}'
      assigned_group_id: '{{ assigned_group_id }}'
      properties:
        priority: '{{ priority }}'
        cf_type: '{{ cf_type }}'
        cf_rating: '{{ cf_rating }}'
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: messages
    params:
      actor_type: agent
- name: message_part
  endpoint:
    path: /messages
    method: POST
    data_selector: messages
    params:
      text:
        content: '{{ content }}'
      image:
        url: '{{ image_url }}'
      video:
        url: '{{ video_url }}'
        content_type: '{{ video_format }}'
      collection:
        sub_parts: '{{ sub_parts_array }}'
      url_button:
        url: '{{ target_url }}'
      quick_reply_button:
        label: '{{ label }}'
      template_content:
        type: '{{ type }}'
        sections: '{{ sections_array }}'
      callback:
        payload: '{{ payload }}'
        label: '{{ label }}'
- name: attachment_input
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: reference
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: text_input
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: help_text
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: conversation
  endpoint:
    path: /v2/conversations
    method: POST
    data_selector: conversation_id
    params:
      status: new
      assigned_agent_id: ''
      assigned_org_agent_id: ''
      assigned_group_id: ''
      assigned_org_group_id: ''
      properties:
        priority: Low
        cf_type: ''
        cf_rating: ''
        cf_supported_products:
        - Freshchat
        - Freshdesk
- name: conversation
  endpoint:
    path: /v2/conversations/{conversation_id}
    method: GET
    data_selector: conversation
- name: conversation
  endpoint:
    path: /v2/conversations/{conversation_id}
    method: PUT
    data_selector: .
    params:
      conversation_id: auto-generated
- name: messages
  endpoint:
    path: /v2/conversations/{conversation_id}/messages
    method: GET
    params:
      from_time: date-time value in UTC format
      page: 1
      items_per_page: 50
- name: conversation_message
  endpoint:
    path: /v2/conversations/{conversation_id}/messages
    method: POST
- name: conversation_properties
  endpoint:
    path: /conversations/fields
    method: GET
    data_selector: .
- name: file_upload
  endpoint:
    path: /v2/files/upload
    method: POST
    data_selector: null
- name: agents
  endpoint:
    path: /agents
    method: POST
- name: accounts
  endpoint:
    path: /accounts/configuration
    method: GET
- name: agent
  endpoint:
    path: /api/agent
    method: GET
    data_selector: ''
    params: {}
- name: agents
  endpoint:
    path: /v2/agents
    method: GET
    data_selector: agents
    params:
      is_deactivated: true
      groups: 38dd7cdc-d022-4489-8cb5-4fdc35f0b5a7
      availability_status: UNAVAILABLE
- name: agent
  endpoint:
    path: /v2/agents
    method: POST
    data_selector: .
- name: agent
  endpoint:
    path: /v2/agents/{agent_id}
    method: GET
    data_selector: agent
- name: agent
  endpoint:
    path: /v2/agents/{agent_id}
    method: PUT
- name: agent_status
  endpoint:
    path: /v2/agents/status
    method: GET
    data_selector: states
- name: update_agent_status
  endpoint:
    path: /v2/agents/{agent_id}
    method: PATCH
    data_selector: availability_status
- name: delete_agent
  endpoint:
    path: /v2/agents/{agent_id}
    method: DELETE
- name: groups
  endpoint:
    path: /groups
    method: GET
- name: group
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: groups
  endpoint:
    path: /v2/groups
    method: GET
    data_selector: groups
    params:
      sort_order: asc
      sort_by: name
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
- name: channels
  endpoint:
    path: /v2/channels
    method: GET
    params:
      locale: ISO-639
      sort_order: asc
      sort_by: name
- name: csat
  endpoint:
    path: /csat/{conversation_id}
    method: POST
- name: account
  endpoint:
    path: /v2/accounts/configuration
    method: GET
    data_selector: .
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: .
- name: user
  endpoint:
    path: /users/{user_id}
    method: GET
    data_selector: .
- name: csat
  endpoint:
    path: /v2/csat/{conversation_id}
    method: PUT
    data_selector: undefined
    params:
      conversation_id: auto-generated identifier
- name: images
  endpoint:
    path: /v2/images/upload
    method: POST
- name: roles
  endpoint:
    path: /roles
    method: GET
- name: roles
  endpoint:
    path: /v2/roles
    method: GET
    data_selector: roles
    params:
      sort_order: asc
      sort_by: name
- name: send_whatsapp_message
  endpoint:
    path: /outbound-messages/whatsapp
    method: POST
- name: retrieve_messages
  endpoint:
    path: /outbound-messages
    method: GET
- name: outbound_message
  endpoint:
    path: /outbound/message/send
    method: POST
    data_selector: data
- name: outbound_messages_whatsapp
  endpoint:
    path: /v2/outbound-messages/whatsapp
    method: POST
- name: outbound_messages
  endpoint:
    path: /v2/outbound-messages
    method: GET
    data_selector: outbound_messages
    params:
      request_id: '{{ request_id }}'
- name: raw_reports
  endpoint:
    path: /reports/raw
    method: POST
- name: raw_report_by_id
  endpoint:
    path: /reports/raw/{id}
    method: GET
- name: reports_raw
  endpoint:
    path: /reports/raw
    method: POST
    data_selector: .
    params:
      start: '2020-01-23T00:30:00.000Z'
      end: '2020-01-23T18:59:59.000Z'
      event: Conversation-Group-Assigned
      format: csv
- name: report
  endpoint:
    path: /reports/raw/{id}
    method: GET
    data_selector: links
    params:
      status: COMPLETED
- name: historical_metrics
  endpoint:
    path: /metrics/historical
    method: GET
- name: instant_metrics
  endpoint:
    path: /metrics/instant
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: ' '
    params: {}
- name: historical_metrics
  endpoint:
    path: /v2/metrics/historical
    method: GET
    params:
      metricMandatory: Name of the metric
      startMandatoryShould: 2022-01-01 10:00:00+00:00
      endMandatoryShould: 2022-11-01 10:00:00+00:00
      interval: 1w
      aggregatorMandatory: avg
      x_timeMandatory: 17
      group_by: group
      filter_by: group=group_id_1,group_id_2
- name: instant_metrics
  endpoint:
    path: /v2/metrics/instant
    method: GET
    data_selector: data
    params:
      metric: '{metricMandatory}'
      group_by: '{group_by}'
      filter_by: '{filter_by}'
      summary: '{summary}'
- name: business_hours
  endpoint:
    path: /v2/business-hours/within-bh
    method: GET
    params:
      group_id: string
- name: users
  endpoint:
    path: /v2/users
    method: GET
    params:
      first_name: ''
      last_name: ''
      email: ''
      reference_id: ''
      phone_no: ''
      created_from: ''
      created_to: ''
      updated_from: ''
      updated_to: ''
      page: 1
      items_per_page: 100
      sort_order: asc
      sort_by: email
- name: subset_of_users
  endpoint:
    path: /v2/users/fetch
    method: POST
    data_selector: users
- name: user_information
  endpoint:
    path: /v2/users/{user_id}
    method: GET
    data_selector: .
- name: user
  endpoint:
    path: /v2/users
    method: POST
    data_selector: id
- name: user_update
  endpoint:
    path: /v2/users/{user_id}
    method: PUT
- name: user_conversations
  endpoint:
    path: /v2/users/{user_id}/conversations
    method: GET
- name: user_deletion
  endpoint:
    path: /v2/users/{user_id}
    method: DELETE
    data_selector: id
- name: conversations
  endpoint:
    path: /conversations
    method: POST
- name: conversation
  endpoint:
    path: /conversations/{conversation_id}
    method: GET
- name: update_conversation
  endpoint:
    path: /conversations/{conversation_id}
    method: PUT
- name: conversation_messages
  endpoint:
    path: /conversations/{conversation_id}/messages
    method: GET
- name: send_message
  endpoint:
    path: /conversations/{conversation_id}/messages
    method: POST
- name: conversation_properties
  endpoint:
    path: /conversations/fields
    method: GET
- name: conversation
  endpoint:
    path: /conversation
    method: GET
    data_selector: ''
    params: {}
- name: message
  endpoint:
    method: POST
    data_selector: messages
    params:
      actor_type: mandatory
      actor_id: mandatory
- name: message_part
  endpoint:
    path: /messages
    method: POST
    data_selector: message_parts
    params:
      content: Actual content of the text message
      url: Link to the location from where the image can be retrieved
      content_type: Format of the attached video
      sub_parts: Different parts of a collection posted to a conversation
- name: reply_part
  endpoint:
    path: /messages
    method: POST
    data_selector: reply_parts
    params:
      type: Identifier of the type of templated message
      sections: Segments of the carousel card or drop-down list
      payload: Data that is passed to the Freshchat system when a user responds using
        the carousel card
      label: Text that is displayed on the button
      custom_reply_text: Custom text displayed when a quick reply button is selected
- name: conversation
  endpoint:
    path: /v2/conversations
    method: POST
    params:
      status: new
      channel_id: mandatory
      assigned_agent_id: string
      assigned_org_agent_id: string
      assigned_group_id: string
      assigned_org_group_id: string
      properties: object
      users: array
- name: conversation
  endpoint:
    path: /v2/conversations/{conversation_id}
    method: GET
    data_selector: conversation
- name: conversation
  endpoint:
    path: /v2/conversations/{conversation_id}
    method: PUT
    data_selector: .
    params:
      conversation_id: '{{ conversation_id }}'
- name: messages
  endpoint:
    path: /v2/conversations/{conversation_id}/messages
    method: GET
    data_selector: messages
    params:
      from_time: '2022-12-01T10:00:00.000Z'
      page: 1
      items_per_page: 50
- name: send_message_to_conversation
  endpoint:
    path: /v2/conversations/{conversation_id}/messages
    method: POST
- name: conversation_properties
  endpoint:
    path: /conversations/fields
    method: GET
    data_selector: .
- name: file_upload
  endpoint:
    path: /v2/files/upload
    method: POST
    data_selector: file_name
- name: agents
  endpoint:
    path: /agents
    method: GET
- name: agents_create
  endpoint:
    path: /agents
    method: POST
- name: agents_status
  endpoint:
    path: /agents/status
    method: GET
- name: agent_delete
  endpoint:
    path: /agents/{agent_id}
    method: DELETE
- name: agent_update
  endpoint:
    path: /agents/{agent_id}
    method: PATCH
- name: agent_details
  endpoint:
    path: /agents/{agent_id}
    method: GET
- name: agent_modify
  endpoint:
    path: /agents/{agent_id}
    method: PUT
- name: accounts
  endpoint:
    path: /accounts/configuration
    method: GET
- name: agent
  endpoint:
    path: /agents
    method: GET
    data_selector: ''
    params: {}
- name: agents
  endpoint:
    path: /v2/agents
    method: GET
    data_selector: agents
    params:
      is_deactivated: true; false
      groups: group_id
      availability_status: AVAILABLE; UNAVAILABLE
- name: agent
  endpoint:
    path: /v2/agents
    method: POST
    data_selector: .
- name: agent
  endpoint:
    path: /v2/agents/{agent_id}
    method: GET
- name: agent
  endpoint:
    path: /v2/agents/{agent_id}
    method: PUT
    headers:
      Content-Type: application/json
- name: agent_status
  endpoint:
    path: /v2/agents/status
    method: GET
    data_selector: states
- name: update_agent_status
  endpoint:
    path: /v2/agents/{agent_id}
    method: PATCH
- name: delete_agent
  endpoint:
    path: /v2/agents/{agent_id}
    method: DELETE
- name: groups
  endpoint:
    path: /groups
    method: GET
- name: group
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: groups
  endpoint:
    path: /v2/groups
    method: GET
    data_selector: groups
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: data
- name: channels
  endpoint:
    path: /v2/channels
    method: GET
    params:
      locale: ISO-639 format
- name: csat
  endpoint:
    path: /csat/{conversation_id}
    method: POST
- name: account_information
  endpoint:
    path: /v2/accounts/configuration
    method: GET
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: null
    params: {}
- name: csat_rating
  endpoint:
    path: /v2/csat/{conversation_id}
    method: POST
- name: image_upload
  endpoint:
    path: /v2/images/upload
    method: POST
- name: roles
  endpoint:
    path: /roles
    method: GET
- name: roles
  endpoint:
    path: /v2/roles
    method: GET
    data_selector: roles
    params:
      sort_order: asc
      sort_by: name
- name: outbound_messages_whatsapp
  endpoint:
    path: /outbound-messages/whatsapp
    method: POST
- name: outbound_messages
  endpoint:
    path: /outbound-messages
    method: GET
- name: outbound_messages_whatsapp
  endpoint:
    path: /outbound-messages/whatsapp
    method: POST
    data_selector: request_id
- name: outbound_messages
  endpoint:
    path: /v2/outbound-messages
    method: GET
    data_selector: outbound_messages
    params:
      request_id: <request_id>
- name: reports
  endpoint:
    path: /reports/raw
    method: POST
- name: report_by_id
  endpoint:
    path: /reports/raw/{id}
    method: GET
- name: extract_report
  endpoint:
    path: /reports/raw
    method: POST
    data_selector: .
    params:
      start: start_time
      end: end_time
      event: event_name
      format: csv
- name: report
  endpoint:
    path: /reports/raw/{id}
    method: GET
    data_selector: links
    params:
      status: COMPLETED
- name: historical_metrics
  endpoint:
    path: /metrics/historical
    method: GET
- name: instant_metrics
  endpoint:
    path: /metrics/instant
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: ''
    params: {}
- name: historical_metrics
  endpoint:
    path: /v2/metrics/historical
    method: GET
    params:
      metric: '{{ metric_name }}'
      start: '{{ start_time }}'
      end: '{{ end_time }}'
      interval: '{{ interval }}'
      aggregator: '{{ aggregator }}'
      group_by: '{{ group_by }}'
      filter_by: '{{ filter_by }}'
- name: instant_metrics
  endpoint:
    path: /v2/metrics/instant
    method: GET
    data_selector: data
    params:
      metricMandatory: '{metric}'
      group_by: group
      filter_by: group=group_id_1,group_id_2
      summary: '{true or false}'
- name: business_hours_within
  endpoint:
    path: /v2/business-hours/within-bh
    method: GET
    data_selector: with_in_business_hours
    params:
      group_id: '{{ group_id }}'
- name: users
  endpoint:
    path: /v2/users
    method: GET
    params:
      first_name: ''
      last_name: ''
      email: ''
      reference_id: ''
      phone_no: ''
      created_from: ''
      created_to: ''
      updated_from: ''
      updated_to: ''
      page: ''
      items_per_page: ''
      sort_order: asc
      sort_by: email
- name: subset_of_users
  endpoint:
    path: /v2/users/fetch
    method: POST
    data_selector: users
- name: user_information
  endpoint:
    path: /v2/users/{user_id}
    method: GET
    data_selector: .
- name: user
  endpoint:
    path: /v2/users
    method: POST
    data_selector: null
- name: user
  endpoint:
    path: /v2/users/{user_id}
    method: PUT
    data_selector: user_id
- name: user_conversations
  endpoint:
    path: /v2/users/{user_id}/conversations
    method: GET
    data_selector: conversations
- name: user
  endpoint:
    path: /v2/users/{user_id}
    method: DELETE
- name: conversations
  endpoint:
    path: /conversations
    method: POST
- name: conversation
  endpoint:
    path: /conversations/{conversation_id}
    method: GET
- name: update_conversation
  endpoint:
    path: /conversations/{conversation_id}
    method: PUT
- name: conversation_messages
  endpoint:
    path: /conversations/{conversation_id}/messages
    method: GET
- name: send_message
  endpoint:
    path: /conversations/{conversation_id}/messages
    method: POST
- name: conversation_fields
  endpoint:
    path: /conversations/fields
    method: GET
- name: AndroidSDK
  endpoint:
    path: /freshchat-android
    method: GET
- name: iOS_SDK
  endpoint:
    path: /FreshchatSDK
    method: GET
- name: React_Native_SDK
  endpoint:
    path: /freshchat_sdk
    method: GET
- name: SDK_initialization
  endpoint:
    path: Freshchat.init()
    method: configuration
    data_selector: not applicable
    params:
      app_id: YOUR-APP-ID
      app_key: YOUR-APP-KEY
      domain: YOUR-DOMAIN
- name: SDK_configuration
  endpoint:
    path: FreshchatConfig
    method: configuration
    data_selector: not applicable
    params:
      camera_capture_enabled: true
      gallery_selection_enabled: true
      response_expectation_enabled: true
      team_member_info_visible: true
      user_events_tracking_enabled: true
      file_selection_enabled: true
      show_notification_banner: optional
      notification_sound_enabled: optional
      theme_name: optional
      strings_bundle: optional
- name: freshchat_notification_handling
  endpoint:
    method: POST
- name: web_messenger
  endpoint:
    path: /js/widget.js
    method: GET
- name: user_properties
  endpoint:
    path: /api/v2/users
    method: POST
    data_selector: data
- name: bot_variables
  endpoint:
    path: /js/widget.js
    method: POST
    data_selector: token
- name: conversation_properties
  endpoint:
    path: /js/widget.js
    method: POST
    data_selector: cf_sample
- name: widget_opened
  endpoint:
    path: /widget:opened
    method: GET
- name: widget_closed
  endpoint:
    path: /widget:closed
    method: GET
- name: widget_loaded
  endpoint:
    path: /widget:loaded
    method: GET
- name: user_created
  endpoint:
    path: /user:created
    method: GET
- name: unreadCount_notify
  endpoint:
    path: /unreadCount:notify
    method: GET
- name: user_data
  endpoint:
    path: /user/get
    method: GET
    data_selector: data
notes:
- Status of the conversation can be new, assigned, resolved, or reopened.
- 'OAuth 2.0 scope required: freshchat.conversation.view'
- OAuth 2.0 scope required is "freshchat.conversation.edit"
- Only one file can be uploaded per request
- The file size should not exceed 25 MB
- Data types and default values are detailed for each field
- Locale must be specified in ISO-639 format; otherwise, primary language topics are
  returned.
- Pagination and sorting controls are available via 'page', 'items_per_page', 'sort_order',
  and 'sort_by' parameters.
- Uses OAuth2 with refresh token
- Only for resolved conversations
- A conversation cannot be reopened if issue_resolved is true
- Requires OAuth 2.0 for authentication with specific scope "freshchat.roles.view"
- Uses phone numbers as user handles for message transactions.
- Supports multiple message types including plain text, rich media, and template messages
  with interactive buttons.
- If the request to send a templated message contains an incorrect template name,
  the request fails.
- You can send a message with the approved template name only after 30 minutes from
  the initial failure.
- End date should not be more than 24 hours from the start date for specific reports
  as per documentation
- OAuth 2.0 authentication is required, specifically with the scope 'freshchat.reports.view'
- OAuth 2.0 scope required: freshchat.dashboard.view
- Use the API Key in the authorization header parameter to make valid API calls
- Each token has a defined lifetime
- OAuth 2.0 Scope required: freshchat.conversation.view
- 'OAuth 2.0 scope required: freshchat.conversation.messages.view'
- 'OAuth scope required: freshchat.conversation.message.create'
- API only for chat accounts in Freshsales Suite; excludes some default properties
  in response
- Only one file can be uploaded per request.
- The file size should not exceed 25 MB.
- Data types and possible values are defined clearly per field
- Custom status and roles can be configured in Freshchat system
- The channels API retrieves information about all topics configured in the Freshchat
  system.
- Locale parameter must be specified in ISO-639 format.
- When locale is not passed or is not configured, defaults to primary language of
  the Freshchat account.
- If no specific languages are configured for the account, the value of locale in
  the response will be default.
- OAuth 2.0 scope required for accessing account information is "freshchat.account.view"
- 'OAuth 2.0 scope required: freshchat.csat.create'
- Ensure Content-Type is set to multipart/form-data for image uploads
- Requires OAuth 2.0 with scope 'freshchat.roles.view' for viewing roles
- 'OAuth 2.0 Scope required for API: freshchat.reports.create'
- Requires OAuth2 with scope freshchat.reports.view
- Uses OAuth2 for authentication with scope 'freshchat.dashboard.view'
- Historical metrics retrieval based on group, agent, or rating
- Supports filtering by group or agent ID
- Query parameters must be URL encoded in requests
- Requires OAuth2 token for authentication
- At least one query parameter is mandatory for a successful API call
- Requires initial configuration with app ID, app key, and domain
- Optional configurations for camera capture, gallery selection, etc.
- iOS specific configurations for notification sounds and themes
- JWT token has an unlimited lifetime by default; exp property can be added to set
  an expiry in seconds
- JWT token status helps identify the current status of the token provided to SDK
- Managing user information without JWT authentication is supported
- Sync user information across devices requires externalId and restoreId
- Reset user data at logout to prevent visibility to new users
- Tracking user events allows for a maximum of 121 unique events per account
- Ensure the device has Play Services for FCM
- Use real devices for testing, not emulators, as they might not have Google Play
  Services or push notification capabilities
- Freshchat SDK localization requires separate modifications for Android and iOS platforms
- SDK initially supports only English; other languages require manual addition of
  translated strings
- Locale changes within the app require specific method calls and notification to
  the SDK
- Embed Web Messenger as a widget in websites to handle conversations
- Requires admin access in Freshchat to setup and retrieve widget code
- As a first step towards enabling JWT Authentication for users, please contact support@freshchat.com
  to convert your freshchat account to a JWT enabled account
- JWT authentication needs ReferenceID for logged-in users and UUID for logged-out
  users.
- A token without Reference ID & UUID will be rejected.
- Returning value from asynchronous function is not supported
- Custom functions can not be bot specific in Freshchat
- User data such as externalId and restoreId are crucial for maintaining conversation
  continuity across devices
- External ID should be unique for each user, typically the email ID.
- Restore ID is created when a user sends a message for the first time and is used
  for restoring sessions across devices.
- Only available for users who signed up for Freshchat after 27th June, 2022
errors:
- 200: Success Request
- 202: Accepted
- 400: Bad Request
- 401: Unauthenticated Request
- 403: Forbidden
- 404: Not Found
- 429: Too Many Requests
- 500: Internal Server Request
- 503: Service Unavailable
- 401 Unauthenticated Request: Obtain another token from the authentication server
    and retry the request with the latest token
- 200 OK: Successful request with the updated conversation object
- No specific error patterns provided in the documentation
- 200 OK: Successful request
- 201 Created: Success response with CSAT object creation details.
- 200 OK: Successful request returning data
- OBM001: No template exists; ensure templates are correctly defined and approved.
- code: 200
  message: Success Request
- code: 202
  message: Accepted
- code: 400
  message: Bad Request
- code: 401
  message: Unauthenticated Request
- code: 403
  message: Forbidden
- code: 404
  message: Not Found
- code: 429
  message: Too Many Requests
- code: 500
  message: Internal Server Request
- code: 503
  message: Service Unavailable
- 401 Unauthenticated Request: Obtain another token from the authentication server
- 401 Unauthorized: Check if API key is correct and active
- 201 Created: Request successful; check 'id' for further operations
- 200 OK: Successful request for account information
- 200 OK: Successful request with metrics data returned
- 200 OK: Request successful
- 200 OK: Ensure query parameters are correctly URL encoded and valid
- 201 Created: Successful creation of user
- General malfunction if SDK is not properly initialized or if sensitive configurations
  are altered.
- 200: Success getting data
- 401: User
- 400: Backend error
- 404: Init not called
- Restore ID missing: Ensure restore ID is stored and passed correctly to maintain
    user conversation continuity.
- 401: Unauthorized, check authentication credentials
- 400: Backend error, check the API request format
- 404: Init not called, ensure initialization is done before API calls
- 400: Backend Error
- 401: Init not called
- 403: ExternalId already used. Use clear() user method
- 404: Init not called / Restore ID is invalid
- 401: User unauthorized
auth_info:
  mentioned_objects:
  - OAuthToken
  - OAuth2 Scope
  - OAuth 2.0 Scope
  - Freshchat system
  - Group
  - undefined
  - Freshchat
  - OAuth2
  - API Key
  - Bearer Token
  - OAuth 2.0
  - freshchat.image.create
  - freshchat.business_hours.view
  - JWT
  - ReferenceID
  - UUID
  - Web Messenger
  - externalId
  - restoreId
client:
  headers:
    Accept: application/json
    Authorization: Bearer "{{ dlt.secrets['access_token'] }}"
    Content-Type:
    - application/json
    - multipart/form-data
    ASSUME-IDENTITY: false
    content-type: application/JSON
  auth:
    type: oauth2
    location: header
    header_name: Authorization
    flow: refresh_token
    token_url: https://login.freshchat.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''freshchat_client_id''] }}'
    client_secret: '{{ dlt.secrets[''freshchat_client_secret''] }}'
    scope: freshchat.csat.create
    refresh_token: '{{ dlt.secrets[''freshchat_refresh_token''] }}'
  base_url: https://api.freshchat.com
  paginator:
    type: page
    page_size_param: items_per_page
    default_page_size: 20
    cursor_param: page
    cursor_path: links.next_page.href
source_metadata: null
