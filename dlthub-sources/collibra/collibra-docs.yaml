resources:
- name: DomainOrder
  endpoint:
    path: /domainOrder
    method: GET
    data_selector: records
- name: DomainReferenceFilter
  endpoint:
    path: /domainReferenceFilter
    method: GET
    data_selector: records
- name: DomainType
  endpoint:
    path: /domainType
    method: GET
    data_selector: records
- name: ExternalMapping
  endpoint:
    path: /externalMapping
    method: GET
    data_selector: records
- name: Node
  endpoint:
    path: /node
    method: GET
    data_selector: records
- name: NumericAttribute
  endpoint:
    path: /numeric-attribute
    method: GET
    data_selector: records
- name: Organization
  endpoint:
    path: /organization
    method: GET
    data_selector: records
- name: role
  endpoint:
    path: /roles
    method: GET
- name: status
  endpoint:
    path: /statuses
    method: GET
- name: tag
  endpoint:
    path: /tags
    method: GET
- name: assets
  endpoint:
    path: assets
    method: POST
    data_selector: data.assets
    params:
      limit: 10
      offset: 0
- name: communities
  endpoint:
    path: communities
    method: POST
    data_selector: data.communities
    params:
      limit: 10
      offset: 0
- name: complexRelations
  endpoint:
    path: complexRelations
    method: POST
    data_selector: data.complexRelations
    params:
      limit: 10
      offset: 0
- name: domains
  endpoint:
    path: domains
    method: POST
    data_selector: data.domains
    params:
      limit: 10
      offset: 0
- name: OrganizationCollectionFilter
  endpoint:
    path: /OrganizationCollectionFilter
    method: GET
    data_selector: records
    params:
      empty: true
- name: AssetFilter
  endpoint:
    path: /AssetFilter
    method: GET
    data_selector: records
    params: {}
- name: AssetTypeFilter
  endpoint:
    path: /AssetTypeFilter
    method: GET
    data_selector: records
    params: {}
- name: AttributeFilter
  endpoint:
    path: /attribute/filter
    method: GET
    data_selector: records
- name: AttributeOrder
  endpoint:
    path: /attribute/order
    method: GET
    data_selector: records
- name: AttributeReferenceFilter
  endpoint:
    path: /attribute/reference/filter
    method: GET
    data_selector: records
- name: AttributeType
  endpoint:
    path: /attribute/type
    method: GET
    data_selector: records
- name: AttributeTypeFilter
  endpoint:
    path: /attribute/type/filter
    method: GET
    data_selector: records
- name: AttributeTypeOrder
  endpoint:
    path: /attribute/type/order
    method: GET
    data_selector: records
- name: AttributeTypeReferenceFilter
  endpoint:
    path: /attribute/type/reference/filter
    method: GET
    data_selector: records
- name: Auditable
  endpoint:
    path: /auditable
    method: GET
    data_selector: records
- name: AuditableFilter
  endpoint:
    path: /auditable/filter
    method: GET
    data_selector: records
- name: AuditableReferenceFilter
  endpoint:
    path: /auditable/reference/filter
    method: GET
    data_selector: records
- name: BooleanAttribute
  endpoint:
    path: /boolean/attribute
    method: GET
    data_selector: records
- name: BooleanAttributeCollectionFilter
  endpoint:
    path: /boolean/attribute/collection/filter
    method: GET
    data_selector: records
- name: BooleanAttributeFilter
  endpoint:
    path: /boolean/attribute/filter
    method: GET
    data_selector: records
- name: BooleanAttributeOrder
  endpoint:
    path: /boolean/attribute/order
    method: GET
    data_selector: records
- name: BooleanAttributeReferenceFilter
  endpoint:
    path: /boolean/attribute/reference/filter
    method: GET
    data_selector: records
- name: Community
  endpoint:
    path: /community
    method: GET
    data_selector: records
- name: OrganizationCollectionFilter
  endpoint:
    path: /organization/collection/filter
    method: GET
    data_selector: records
- name: OrganizationCollectionFilter
  endpoint:
    path: /OrganizationCollectionFilter
    method: GET
    data_selector: records
    params: {}
- name: CommunityFilter
  endpoint:
    path: /CommunityFilter
    method: GET
    data_selector: records
    params: {}
- name: DomainFilter
  endpoint:
    path: /DomainFilter
    method: GET
    data_selector: records
    params: {}
- name: relation
  endpoint:
    path: /relation
    method: GET
- name: relationCollectionFilter
  endpoint:
    path: /relationCollectionFilter
    method: GET
- name: relationFilter
  endpoint:
    path: /relationFilter
    method: GET
- name: relationOrder
  endpoint:
    path: /relationOrder
    method: GET
- name: relationReferenceFilter
  endpoint:
    path: /relationReferenceFilter
    method: GET
- name: relationType
  endpoint:
    path: /relationType
    method: GET
- name: relationTypeFilter
  endpoint:
    path: /relationTypeFilter
    method: GET
- name: relationTypeOrder
  endpoint:
    path: /relationTypeOrder
    method: GET
- name: relationTypeReferenceFilter
  endpoint:
    path: /relationTypeReferenceFilter
    method: GET
- name: responsibility
  endpoint:
    path: /responsibility
    method: GET
- name: responsibilityCollectionFilter
  endpoint:
    path: /responsibilityCollectionFilter
    method: GET
- name: responsibilityFilter
  endpoint:
    path: /responsibilityFilter
    method: GET
- name: responsibilityOrder
  endpoint:
    path: /responsibilityOrder
    method: GET
- name: TagOrder
  endpoint:
    path: /tagorder
    method: GET
    data_selector: records
- name: TagReferenceFilter
  endpoint:
    path: /tagreferencefilter
    method: GET
    data_selector: records
- name: Type
  endpoint:
    path: /type
    method: GET
    data_selector: records
- name: TypeFilter
  endpoint:
    path: /typefilter
    method: GET
    data_selector: records
- name: TypeOrder
  endpoint:
    path: /typeorder
    method: GET
    data_selector: records
- name: TypeReferenceFilter
  endpoint:
    path: /typereferencefilter
    method: GET
    data_selector: records
- name: UUID
  endpoint:
    path: /uuid
    method: GET
    data_selector: records
- name: User
  endpoint:
    path: /user
    method: GET
    data_selector: records
- name: UserFilter
  endpoint:
    path: /userfilter
    method: GET
    data_selector: records
- name: UserGroup
  endpoint:
    path: /usergroup
    method: GET
    data_selector: records
- name: UserGroupFilter
  endpoint:
    path: /usergroupfilter
    method: GET
    data_selector: records
- name: UserGroupOrder
  endpoint:
    path: /usergrouporder
    method: GET
    data_selector: records
- name: UserGroupReferenceFilter
  endpoint:
    path: /usergroupreferencefilter
    method: GET
    data_selector: records
- name: UserOrder
  endpoint:
    path: /userorder
    method: GET
    data_selector: records
- name: UserReferenceFilter
  endpoint:
    path: /userreferencefilter
    method: GET
    data_selector: records
- name: search
  endpoint:
    path: /rest/2.0/search
    method: POST
    data_selector: null
    params: {}
- name: communities
  endpoint:
    path: /rest/2.0/communities
    method: POST
    data_selector: null
    params: {}
- name: domains
  endpoint:
    path: /rest/2.0/domains
    method: POST
    data_selector: null
    params: {}
- name: assets
  endpoint:
    path: /rest/2.0/assets
    method: POST
    data_selector: null
    params: {}
- name: attributes
  endpoint:
    path: /rest/2.0/attributes
    method: POST
    data_selector: null
    params: {}
- name: bulk_communities
  endpoint:
    path: /rest/2.0/communities/bulk
    method: POST
    data_selector: null
    params: {}
- name: bulk_domains
  endpoint:
    path: /rest/2.0/domains/bulk
    method: POST
    data_selector: null
    params: {}
- name: communities
  endpoint:
    path: /rest/2.0/communities
    method: GET
- name: model_import
  endpoint:
    path: /rest/2.0/import/json-job
    method: POST
    data_selector: response
    params: {}
- name: BasicInformation
  endpoint:
    path: /forms/basic-information
    method: POST
    data_selector: form
    params: {}
- name: VerificationProcess
  endpoint:
    path: /forms/verification-process
    method: POST
    data_selector: form
    params: {}
- name: SuccessConfirmation
  endpoint:
    path: /forms/success-confirmation
    method: POST
    data_selector: form
    params: {}
- name: add_asset
  endpoint:
    path: /api/v1/assets
    method: POST
    data_selector: asset
    params: {}
- name: set_asset_attributes
  endpoint:
    path: /api/v1/assets/{assetId}/attributes
    method: POST
    data_selector: attribute
    params: {}
- name: change_asset
  endpoint:
    path: /api/v1/assets/{assetId}
    method: PUT
    data_selector: asset
    params: {}
- name: Delete asset workflow
  endpoint:
    path: /path/to/delete/asset/workflow
    method: POST
    data_selector: workflow
    params:
      applies_to: Asset
- name: Collibra Assessments API
  endpoint:
    path: /api/rest/assessments
    method: GET
- name: Collibra Catalog API
  endpoint:
    path: /api/rest/catalog
    method: GET
- name: Collibra DQ Product API
  endpoint:
    path: /api/rest/dq-product
    method: GET
- name: import_json_job
  endpoint:
    path: /import/json-job
    method: POST
    params: {}
- name: import_csv_job
  endpoint:
    path: /import/csv-job
    method: POST
    params: {}
- name: import_excel_job
  endpoint:
    path: /import/excel-job
    method: POST
    params: {}
- name: import_job
  endpoint:
    path: /import/json-job
    method: POST
    data_selector: null
    params:
      file: required
- name: monitor_job
  endpoint:
    path: /jobs/{jobId}
    method: GET
    data_selector: null
    params: {}
- name: application_info
  endpoint:
    path: /rest/2.0/application/info
    method: GET
- name: application_info
  endpoint:
    path: /rest/2.0/application/info
    method: GET
    data_selector: baseUrl
    params: {}
notes:
- Using UUIDs is sometimes appropriate.
- Prefer writing static Groovy code.
- Static typing ensures correctness at compile time.
- Static typing isn’t just about clarity — it’s about protecting workflows from avoidable
  failures.
- The new workflow permissions require administrator action to maintain existing user
  functionality.
- Users who leverage workflows must be assigned to a role that has the Start workflow
  permission, the Participate in workflow permission, or both based on their needs.
- If any of the participants do not have a role with the Participate in workflow permission,
  the process fails, without creating any voting task.
- Users without the Start workflows permission might not be able to see the global
  create button anymore.
- REST API authentication with JSON Web Token
- Approved imports are vetted to prevent vulnerabilities from outdated or unsupported
  libraries.
- Internal APIs may lack the security hardening required for safe use in production
  environments.
- You have created a programmatic user for API requests that has at least the AI Business
  User global role.
- Metadata from your ML models are ingested as assets in Collibra.
- The workflow is meant to run at the community level.
- You must change the scope of the workflow to apply to Community.
- Deleting those assets is an irreversible process.
- Collibra does not accept two workflows with the same display name.
- The running times for the same workflow are inconsistent between each running instance
  of that workflow.
- Execution time of script tasks is longer when running for the first time after deploying
  or restarting the application.
- Compilation is required for each script task before running.
- Script tasks have longer execution times when the Java garbage collector clears
  the Groovy engine cache.
- To notify users that something went wrong with a workflow activity, incorporate
  the provided code into your Groovy script task.
- The API requires OAuth 2.0 authentication.
- Added information about cursor-based pagination.
- Documented global limits enforced on queries.
- Documented case sensitivity on IN and EQUALS filters.
- Proper authentication and authorization are prerequisites.
- You have disabled the Groups DGC managed Console configuration option if you want
  to manage groups in your IdP.
- JWT authentication is available starting with Collibra Platform 2020.11 and Collibra
  Data Governance Center 5.7.7-1.
errors:
- '204: The request has been authorized.'
- '401: The request has not been authorized. See payload for details.'
- 'malformedToken: The JWT token is incorrectly encoded or has an incorrect syntax.'
- 'expiredToken: The JWT token has expired.'
- 'invalidToken: The JWT token is invalid.'
- 'unableToProcessToken: The JWT token could not be processed.'
- '400: Bad request. The body of the response contains details about the error.'
- '401: The current user is not authenticated.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://<your_collibra_url>
  auth:
    type: basic
    location: header
    header_name: Authorization
    flow: refresh_token
    token_url: https://developer.collibra.com/api/rest/oauth
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    username: YOUR_USERNAME
    password: YOUR_PASSWORD
  headers:
    Authorization: Bearer <your_token>
    Content-Type: multipart/form-data
    Accept: application/json
source_metadata: null
