resources:
- name: people
  endpoint:
    path: /people
    method: GET
- name: people
  endpoint:
    path: /people
    method: GET
- name: events
  endpoint:
    path: /v1/events
    method: POST
    data_selector: ''
    params: {}
- name: email_campaigns
  endpoint:
    path: /v1/emCampaigns
    method: POST
    data_selector: id
- name: email_campaign_update
  endpoint:
    path: /v1/emCampaigns/:id
    method: PUT
- name: email_events
  endpoint:
    path: /v1/emEvents
    method: POST
- name: people
  endpoint:
    path: /v1/people
    method: GET
- name: install_inbox_app
  endpoint:
    path: /v1/inboxApps/install
    method: POST
    data_selector: ''
    params: {}
- name: confirm_subscription_url
  endpoint:
    path: /v1/inboxApps/install
    method: POST
    data_selector: ''
    params: {}
- name: events
  endpoint:
    path: /v1/events
    method: POST
    data_selector: events
- name: users
  endpoint:
    path: /users
    method: GET
- name: teamInboxes
  endpoint:
    path: /teamInboxes
    method: GET
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: records
- name: inboxAppReply
  endpoint:
    path: /webhooks/inboxAppReply
    method: POST
    data_selector: data
    params: {}
- name: inboxAppConversationRead
  endpoint:
    path: /webhooks/inboxAppConversationRead
    method: POST
    data_selector: data
    params: {}
- name: inboxAppConversationArchived
  endpoint:
    path: /webhooks/inboxAppConversationArchived
    method: POST
    data_selector: data
    params: {}
- name: inboxAppConversationUnarchived
  endpoint:
    path: /webhooks/inboxAppConversationUnarchived
    method: POST
    data_selector: data
    params: {}
- name: inboxAppConversationAssigned
  endpoint:
    path: /webhooks/inboxAppConversationAssigned
    method: POST
    data_selector: data
    params: {}
- name: inboxAppDeactivated
  endpoint:
    path: /webhooks/inboxAppDeactivated
    method: POST
    data_selector: data
    params: {}
- name: richObject
  endpoint:
    path: /addMessage
    method: POST
    data_selector: richObjects
    params: {}
- name: webhooks
  endpoint:
    path: /v1/webhooks
    method: POST
    data_selector: null
    params: {}
- name: people
  endpoint:
    path: /v1/people
    method: GET
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    params:
      ids: ids
      fields: id,name
- name: people
  endpoint:
    path: /v1/people
    method: GET
    params:
      fields: id,name
      idGreaterThan: idGreaterThan
      idLessThan: idLessThan
      createdAfter: createdAfter
      createdBefore: createdBefore
      updatedAfter: updatedAfter
      updatedBefore: updatedBefore
- name: people
  endpoint:
    path: /v1/people
    method: GET
    data_selector: records
    params:
      includeTrash: 'true'
      fields: allFields
- name: peopleRelationships
  endpoint:
    path: /v1/peopleRelationships
    method: GET
    data_selector: records
    params:
      fields: relationships
- name: events
  endpoint:
    path: /v1/events
    method: POST
    data_selector: null
    params: {}
- name: people
  endpoint:
    path: /v1/people:id
    method: GET
    data_selector: null
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
- name: people
  endpoint:
    path: /people
    method: GET
- name: unclaimed_leads
  endpoint:
    path: /people/unclaimed
    method: GET
    data_selector: leads
    params: {}
- name: claim_lead
  endpoint:
    path: /people/claim
    method: POST
- name: personAttachments
  endpoint:
    path: /personAttachments
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/users/:id
    method: GET
    data_selector: mergeFields
    params: {}
- name: people
  endpoint:
    path: /v1/people/:id
    method: GET
    data_selector: mergeFields
    params: {}
- name: events
  endpoint:
    path: /v1/events/:personId
    method: GET
    data_selector: mergeFields
    params: {}
- name: events
  endpoint:
    path: /v1/events
    method: POST
- name: update_person
  endpoint:
    path: /v1/people
    method: PATCH
    data_selector: person
    params:
      mergeTags: 'true'
- name: update_relationship
  endpoint:
    path: /v1/peopleRelationships
    method: PATCH
    data_selector: relationship
    params: {}
- name: custom_fields
  endpoint:
    path: /v1/customFields
    method: GET
    data_selector: fields
    params: {}
- name: people
  endpoint:
    path: /people
    method: GET
- name: checkDuplicate
  endpoint:
    path: /people/checkDuplicate
    method: GET
    data_selector: response
    params: {}
- name: person_attachments
  endpoint:
    path: /v1/personAttachments/
    method: GET
- name: notes
  endpoint:
    path: /notes
    method: post
- name: people
  endpoint:
    path: /people
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: ignore_lead
  endpoint:
    path: /people/ignoreUnclaimed
    method: POST
    data_selector: null
    params: {}
- name: person_attachments
  endpoint:
    path: /v1/personAttachments/
    method: DELETE
- name: identity
  endpoint:
    path: /identity
    method: GET
    data_selector: identity
    params: {}
- name: people
  endpoint:
    path: /v1/people
    method: GET
    data_selector: relationships
    params:
      fields: relationships
- name: events
  endpoint:
    path: /events
    method: get
- name: people
  endpoint:
    path: /people
    method: get
- name: users
  endpoint:
    path: /users
    method: get
- name: users
  endpoint:
    path: /users/
    method: GET
    data_selector: users
    params: {}
- name: notes
  endpoint:
    path: /notes/
    method: GET
- name: calls
  endpoint:
    path: /calls
    method: POST
- name: calls
  endpoint:
    path: /calls/
    method: GET
    data_selector: records
- name: text_message
  endpoint:
    path: /textMessages
    method: POST
    data_selector: logs
- name: me
  endpoint:
    path: /me
    method: GET
- name: smart_lists
  endpoint:
    path: /smartLists
    method: GET
- name: actionPlans
  endpoint:
    path: /actionPlans
    method: GET
- name: notes
  endpoint:
    path: /notes/:id
    method: DELETE
- name: text_message
  endpoint:
    path: /textMessages/
    method: GET
    data_selector: records
- name: templates
  endpoint:
    path: /templates/
    method: GET
- name: smart_list
  endpoint:
    path: /smartLists/:id
    method: GET
- name: templates
  endpoint:
    path: /v1/templates/
    method: DELETE
- name: email_template
  endpoint:
    path: /templates
    method: POST
- name: templates
  endpoint:
    path: /v1/templates/
    method: PUT
    data_selector: template
    params: {}
- name: text_message_templates
  endpoint:
    path: /textMessageTemplates/
    method: GET
    data_selector: templates
    params: {}
- name: custom_fields
  endpoint:
    path: /customFields
    method: GET
    data_selector: customFields
    params: {}
- name: custom_field
  endpoint:
    path: /customFields
    method: POST
- name: custom_fields
  endpoint:
    path: /customFields
    method: GET
- name: text_message_templates_merge
  endpoint:
    path: /textMessageTemplates/merge
    method: POST
- name: email_marketing_events
  endpoint:
    path: /emEvents
    method: GET
    data_selector: records
- name: email_campaign
  endpoint:
    path: /emCampaigns
    method: POST
- name: emCampaigns
  endpoint:
    path: /emCampaigns
    method: PUT
- name: custom_fields
  endpoint:
    path: /v1/customFields
    method: PUT
- name: appointments
  endpoint:
    path: /appointments
    method: POST
- name: custom_field
  endpoint:
    path: /v1/customFields/
    method: DELETE
- name: stages
  endpoint:
    path: /stages/:id
    method: GET
- name: tasks
  endpoint:
    path: /tasks
    method: GET
- name: people
  endpoint:
    path: /people
    method: GET
- name: deals
  endpoint:
    path: /deals
    method: GET
- name: tasks
  endpoint:
    path: /tasks
    method: GET
- name: tasks
  endpoint:
    path: /tasks
    method: POST
- name: tasks
  endpoint:
    path: /tasks
    method: GET
- name: people
  endpoint:
    path: /people
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: appointments
  endpoint:
    path: /appointments
    method: GET
    data_selector: appointments
- name: appointments
  endpoint:
    path: /appointments
    method: GET
- name: people
  endpoint:
    path: /people
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: stages
  endpoint:
    path: /stages
    method: GET
- name: tasks
  endpoint:
    path: /tasks/:id
    method: GET
- name: appointments
  endpoint:
    path: /appointments
    method: PUT
- name: appointmentTypes
  endpoint:
    path: /appointmentTypes
    method: GET
- name: appointments
  endpoint:
    path: /appointments
    method: GET
- name: people
  endpoint:
    path: /people
    method: GET
- name: appointment_outcome
  endpoint:
    path: /appointmentOutcomes/{id}
    method: GET
- name: appointment_type
  endpoint:
    path: /appointmentTypes/{id}
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
    params: {}
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: people
  endpoint:
    path: /people
    method: GET
- name: webhook_events
  endpoint:
    path: /webhookEvents/:id
    method: GET
    data_selector: events
    params: {}
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
- name: pipelines
  endpoint:
    path: /pipelines
    method: POST
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
- name: pipeline_by_id
  endpoint:
    path: /pipelines/:id
    method: GET
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
- name: deals
  endpoint:
    path: /deals/
    method: PUT
- name: dealAttachments
  endpoint:
    path: /dealAttachments
    method: POST
- name: deal_attachment
  endpoint:
    path: /dealAttachments/
    method: GET
- name: deals
  endpoint:
    path: /deals
    method: GET
    data_selector: customField
- name: deals
  endpoint:
    path: /deals
    method: GET
- name: people
  endpoint:
    path: /people
    method: GET
- name: deal_attachment
  endpoint:
    path: /dealAttachments/
    method: DELETE
- name: dealCustomFields
  endpoint:
    path: /dealCustomFields
    method: POST
- name: deal_custom_fields
  endpoint:
    path: /dealCustomFields
    method: GET
    data_selector: customFields
    params: {}
- name: teams
  endpoint:
    path: /teams
    method: get
- name: teams
  endpoint:
    path: /teams/:id
    method: GET
- name: team_inboxes
  endpoint:
    path: /teamInboxes
    method: GET
    data_selector: inboxes
    params: {}
- name: groups
  endpoint:
    path: /groups/
    method: GET
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: teams
- name: teams
  endpoint:
    path: /teams/
    method: PUT
- name: teams
  endpoint:
    path: /v1/teams/
    method: DELETE
    data_selector: null
    params:
      moveToTeamId: null
- name: ponds
  endpoint:
    path: /ponds
    method: GET
    data_selector: ponds
    params: {}
- name: ponds
  endpoint:
    path: /ponds/:id
    method: GET
- name: people
  endpoint:
    path: /people
    method: GET
- name: pond
  endpoint:
    path: /v1/ponds/
    method: DELETE
    params:
      assignTo: ''
- name: participants
  endpoint:
    path: /inboxApps/{inboxAppId}/conversations/{extConversationId}/participants
    method: GET
- name: threadedReplies
  endpoint:
    path: /threadedReplies/:id
    method: get
- name: pond
  endpoint:
    path: /ponds/
    method: PUT
- name: reactions
  endpoint:
    path: /reactions/:id
    method: GET
- name: people
  endpoint:
    path: /people
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: people
  endpoint:
    path: /people
    method: GET
- name: peopleRelationships
  endpoint:
    path: /peopleRelationships
    method: GET
- name: identity
  endpoint:
    path: /identity
    method: GET
notes:
- When creating an event to register a new lead onto the system, it appears that follow
  up boss does not initiate a push notification to cell phone. All push notifications
  are allowed on the FUB application.
- Sending a POST request to the /notes API endpoint returns a 400 status code with
  the message "Contact not found," even when passing a valid personId. This endpoint
  was working properly the last time I checked, about a week ago and I haven't modified
  anything in the code itself.
- You'll need a designated account for development and testing.
- Inbox App integrations are required to use Registered System headers.
- You must respond with a HTTP 200 OK status code to indicate your receipt of the
  subscription URL.
- If you fail to respond with HTTP 200 OK in a timely manner, your install request
  will be rejected.
- Access Tokens are short-lived tokens.
- API Key should be handled securely and provides the same privileges as the user's
  login credentials.
- API requests require both System Headers and the Follow Up Boss User's API Key.
- Do not use /people endpoint to send new leads into Follow Up Boss, as it won't trigger
  automations in FUB.
- Rich Objects are in early access
- All Rich Objects are required to be wrapped in a transport wrapper
- Localhost Redirects Not Allowed
- Webhook security requires a unique identifier that maps a user to your system.
- Callback URLs must be a secure endpoint.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- All calls to the FUB API must reference the X-System-Key issued to you as a registered
  licensee.
- Every request to the API should include the registered 'X-System' and 'X-System-Key'
  headers.
- The default limit value is 10 and default offset value is 0.
- The maximum value for the limit parameter is 100.
- It is highly encouraged to use `next` instead of `offset` for all API interactions
  that require pagination when possible.
- The updated fields may not be accurate for all records, as the field is only updated
  when the record itself changes.
- 'Follow Up Boss'' robots fetch URLs with the following user agent: FollowUpBoss/1.0
  (+https://docs.followupboss.com)'
- Rate limiting is enforced by the API and is based on a sliding 10 second window.
- If you receive a 429 response code, your request was not processed and you will
  have to retry the request.
- A 204 response indicates that the lead flow associated with this source has been
  archived and ignored.
- Providing a Person ID helps to link to the event and prevent duplicate contacts.
- Unclaimed leads will be assigned to a fallback agent after a short amount of time
  (default is 15 minutes)
- External systems requesting to hit this endpoint must be registered with Follow
  Up Boss.
- The URI should be a link to a file location stored outside of Follow Up Boss.
- Include the system field in all API calls to identify your system vs other lead
  providers.
- Set the source field to be the domain of the website without 'www.', e.g. mywebsite.com.
- Ensure the API key is secure and not exposed in the browser.
- After a new person is created, there is a small window in which that person is not
  immediately accessible via other endpoints until the person has been assigned to
  an agent.
- Custom fields names are case sensitive.
- Tag updates will overwrite all existing tags.
- Phone number updates will overwrite existing phone numbers.
- Email addresses and phone numbers associated to relationships can be edited and
  deleted through /v1/people.
- This call will tell you if a person exists or not, even if you do not have access
  to that person with the API key.
- Restricted - Registered Systems Only
- The attachments returned are limited to those created by your registered system.
  No other attachments will be returned.
- The URI should be a link to a file location stored outside of Follow Up Boss. If
  a URI is not provided, the API will treat the request as an attempt to upload a
  file to our servers and return a 403.
- Ignoring a claim doesn't do anything other than log when the user ignored the First
  To Claim offer.
- 'Currently, the role value in the response will only map to three options: Agent,
  Broker, and Lender.'
- 'There are two restrictions in place that may prevent you from successfully retrieving
  a note: A note was created by a system that restricts further access outside of
  Follow Up Boss. A note was created by a system that contains email content and is
  restricted for privacy reasons. In both cases, you may get a 404 Not Found response
  despite the note id being valid in Follow Up Boss.'
- Some call data is not accessible via API and is only visible within the Follow Up
  Boss application.
- Text messages created through the API are recorded as logs only. No actual text
  messages are sent.
- Some text message data is not accessible via API and is only visible within the
  Follow Up Boss application.
- Only the subject and body support Merge Fields.
- The 'recipients.to' field should be an array of recipients, with each entry containing
  the email address of that recipient, and optionally their name.
- The first recipient in this list which matches either the Person ID or one of their
  relationships will be used for all %contact_*% merge fields.
- If you try to delete a text message template which is still in use by an Action
  Plan, you will get a 403 Forbidden response.
- This endpoint is accessible to account owners only.
- The 'recipients.to' field should be an array of recipients, with each entry containing
  the phone number of that recipient, and optionally their name.
- User ID is optional and defaults to the current authenticated user.
- You can send up to 1000 events per API request.
- You cannot change the type of a field after it has been created. You will need to
  delete, then recreate the field.
- The appointment has to belong to the person making the request.
- The appointment has to be created in Follow Up Boss.
- The user who created the appointment has to be sharing their calendar.
- Require owner permissions
- Only the owner has access to create and modify pipelines
- Any custom fields that have been created can also have their values set via this
  method.
- You can create a custom sort order by setting the orderWeight field.
- Only the owner has access to create and modify pipelines.
- Once the stage has been created, the orderWeight for all stages will be recalculated
  to enforce the new ordering with gaps of 1000.
- If a URI is not provided, the API will treat the request as an attempt to upload
  a file to our servers and return a 403.
- The attachments returned are limited to those created by your registered system.
- Any Deals Custom Fields will be returned using the 'name' property and associated
  value
- Only the owner has access to create deals custom fields.
- Only the owner has access to modify deals custom fields.
- This is not accessible by lender accounts.
- Not all plans have access to the teams feature. If you do not have access to teams,
  this endpoint will return a 200 OK response with an empty teams list.
- Team icons are not available via the API.
- This is a beta feature! These API endpoints are subject to change.
errors:
- 400 status error on the notes api endpoint
- server_error
- invalid_client
- invalid_grant
- unauthorized_client
- unsupported_grant_type
- invalid_request
- '400 Bad Request: The request is missing required parameters or is malformed'
- '401 Unauthorized: The provided authorization grant is invalid, expired, or revoked'
- '403 Forbidden: The client is not authorized to access this resource'
- '404 Not Found: The provided authorization grant is invalid, expired, or revoked'
- '500 Server Error: An unexpected server-side error occurred'
- '406: When you want the webhook to be deleted automatically.'
- '410: When you want the webhook to be deleted automatically.'
- '403 Forbidden: You do not have access to this resource'
- '404 Not Found: This resource does not exist, it may have been deleted or it may
  have never existed at all.'
- '429 Too Many Requests: This request was rate limited, see the Rate Limiting section
  for more info.'
- '400 Bad Request: We could not process this request. Typically this means the endpoint
  does not support the request you made, perhaps the parameters supplied with the
  request were incorrect, or something else about the request was malformed.'
- '429 Too Many Requests: Your request was not processed and you will have to retry
  the request.'
- '204: No response body indicates archived lead flow'
- '404: Person not found when provided in the request'
- '200: Event created successfully'
- '201: New person created along with the event'
- '409 Conflict: Lead has already been claimed by someone else'
- '403: The API will treat the request as an attempt to upload a file to our servers'
- '204 No Content: Ignoring the lead claim was successful'
- '404 Not Found: No person found that can be unclaimed'
- 404 Not Found
- '403 Forbidden: Template is still in use by an Action Plan'
- '403 Forbidden: Response when deleting a template in use by an Action Plan.'
- '403: Request treated as an attempt to upload a file to our servers'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.followupboss.com/v1
  auth:
    type: oauth2
    location: header
    flow: authorization_code
    token_url: https://app.followupboss.com/oauth/token
    client_id: <your_client_id>
    client_secret: <your_client_secret>
    refresh_token: <refresh_token>
    header_name: Authorization
  headers:
    X-System: ''
    X-System-Key: ''
    Accept: application/json
    Content-Type: application/json
  paginator:
    type: offset
    page_size_param: limit
    default_page_size: 10
source_metadata: null
