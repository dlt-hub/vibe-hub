resources:
- name: message_status
  endpoint:
    path: /path/to/message/status
    method: POST
    data_selector: payload
- name: templateMessage
  endpoint:
    path: /templateMessage
    method: POST
    data_selector: templateMessage
    params: {}
- name: Demo Rocket Chat
  endpoint:
    path: https://demo.rocket.chat
    method: GET
    data_selector: ''
    params: {}
- name: Open Rocket Chat
  endpoint:
    path: https://open.rocket.chat
    method: GET
    data_selector: ''
    params: {}
- name: Awesome Rocket Chat
  endpoint:
    path: https://awesome.rocket.chat
    method: GET
    data_selector: ''
    params: {}
- name: phone_command
  endpoint:
    path: /commands/phone
    method: POST
    data_selector: response
    params: {}
- name: livechat
  endpoint:
    path: /livechat
    method: GET
- name: voice_channel
  endpoint:
    path: /voice
    method: GET
- name: canned_responses
  endpoint:
    path: /canned_responses
    method: GET
- name: hello-world
  endpoint:
    path: /create
    method: POST
    data_selector: app
    params: {}
- name: variable_list
  endpoint:
    path: /customizing/colors
    method: GET
    data_selector: variables
    params: {}
notes:
- User authentication, authorization, and access control can be managed using open
  standard protocols like OAuth, SAML, and LDAP.
- Submission through the CLI sends the app in a draft state.
- Currently, the Rocket.Chat servers and Marketplace allow the submission of .zip
  files.
- Any Realtime API or REST call may require 2FA.
- Trusted clients will be trusted for 5 minutes after a 2FA validation.
- This setup is done assuming you have a Rocket.Chat server running.
- To select a different host for your local widget, navigate to the /src/api.ts file
  in the project directory.
- Ensure 'Allow Quote Messages' setting is enabled to receive full information payload.
- Iframe user authentication allows you to set up user authentication through your
  own login page.
- You can listen to events while embedding Rocket.Chat in your app.
- To enable email two-factor authentication (2FA), ensure that SMTP is configured
  in your workspace.
- If you attempt to send a request to certain endpoints without the appropriate 2FA
  headers, you receive an error of type `totp-required`.
- Always use the login API exclusively over HTTPS during authentication to ensure
  confidentiality of user credentials.
- Implement a strict system that expires and renews authorization tokens regularly
  to prevent unauthorized access.
- Configuring permissions appropriately is crucial to maintaining the integrity and
  security of your Rocket.Chat instance.
- You need the `create-user` permission to create a new user in your workspace.
- You cannot test the `POST` requests for roles and permission using the sandbox environment.
- 'The API encompasses two integral components: Method Calls and Subscriptions, which
  are seamlessly supported within the WebSocket connection.'
- Storing an app's state in memory is not recommended due to multiple server instances.
- Use IPersistence interface for persistent storage as a compound key-value pair.
- Theming for Rocket.Chat is still under development.
- Be cautious while modifying React components.
- The widget API information is stored in the local storage of the browser.
- When you white-label the mobile app, the default push notification gateway is unavailable.
- To enable push notifications for your custom app build, follow this guide to configure
  them manually.
- Ensure you have done 'Creating Push Notifications certificates'.
- You must set a password for your PEM file.
- Sometimes using meteor npm install PATH_TO_APPS_ENGINE causes errors related to
  missing modules.
- query and fields parameters have been deprecated since version 5.0.0
- Enabling deprecated parameters may expose your workspace to security risks
- Deep linking feature allows navigation to specific content or actions in the application.
- Maintain an active internet connection throughout the installation process.
- Mac and Windows handle file paths differently.
- IPersistence interface is recommended for storing data as key-value pairs.
- Deep links can be used to add a server to your client in one click, simplifying
  the deployment process.
- Authentication Links allow you to create a link that directs the user to the server
  and automatically logs them in.
- Embedding Rocket.Chat provides a seamless integration of Rocket.Chat's features
  into your application's interface.
- Node.js version 12 or higher is required.
- Yarn is recommended for managing dependencies.
- Query and fields parameters have been deprecated since version 5.0.0
- Enabling query and fields parameters may expose your workspace to security risks
- Ensure to enable development mode in older versions of Rocket.Chat for manual installations.
- Colors are customizable through the custom CSS field in the admin panel.
errors:
- 'totp-required: Requires 2FA for the requested method or endpoint.'
- 'totp-required: The required 2FA method for the user selected by the workspace.'
- 'totp-invalid: The 2FA code is wrong.'
- 'ENOENT: no such file or directory, rename ''PATH_TO_ROCKETCHAT/node_modules/.staging/@rocket.chat/apps-engine-c7135600/node_modules/@babel/code-frame'''
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'totp-required: TOTP Required'
- 'error-parameter-required: The parameter emailOrUsername was not provided'
- 'error-invalid-user: The user was not found with the provided emailOrUsername'
- 'totp-required: Requires 2FA for the request.'
- 'Failed to resolve module: @rocket.chat/ui-kit'
- 'Failed to resolve module: @rocket.chat/icons'
auth_info:
  mentioned_objects: []
client:
  base_url: <server_url>
  auth:
    type: basic
    location: query
    header_name: Authorization
  headers:
    Accept: application/json
    x-Auth-Token: authToken
    x-User-Id: userId
  paginator:
    type: offset
    page_size_param: count
    default_page_size: 5
source_metadata: null
