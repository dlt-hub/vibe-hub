resources:
- name: init
  endpoint:
    path: /init
    method: POST
    data_selector: response
    params:
      appId: YOUR_APP_ID
- name: startEVPairing
  endpoint:
    path: /startEVPairing
    method: POST
    data_selector: response
- name: resetIdentity
  endpoint:
    path: /resetIdentity
    method: POST
    data_selector: response
    params: {}
- name: addUserProperties
  endpoint:
    path: /addUserProperties
    method: POST
    data_selector: user properties
- name: setAppId
  endpoint:
    path: /setAppId
    method: POST
    data_selector: YOUR_APP_ID
    params: {}
- name: track_event
  endpoint:
    path: /track
    method: POST
    data_selector: event
    params: {}
- name: track_events
  endpoint:
    path: /track
    method: POST
    data_selector: events
- name: identify
  endpoint:
    path: /identify
    method: POST
    data_selector: null
    params: {}
- name: add_account_properties
  endpoint:
    path: /add_account_properties
    method: POST
    data_selector: accounts
- name: add_user_properties
  endpoint:
    path: /add_user_properties
    method: POST
    data_selector: users
- name: auth_token
  endpoint:
    path: /api/public/v0/auth_token
    method: POST
- name: user_deletion
  endpoint:
    path: /api/public/v0/user_deletion
    method: POST
- name: deletion_status
  endpoint:
    path: /api/public/v0/deletion_status/:deletion_request_id
    method: GET
- name: track
  endpoint:
    path: /track
    method: POST
    data_selector: event
    params: {}
- name: identify
  endpoint:
    path: /identify
    method: POST
    data_selector: identity
    params: {}
- name: getIdentity
  endpoint:
    path: /getIdentity
    method: GET
    data_selector: identity
    params: {}
- name: resetIdentity
  endpoint:
    path: /resetIdentity
    method: POST
    data_selector: reset
    params: {}
- name: addEventProperties
  endpoint:
    path: /addEventProperties
    method: POST
    data_selector: eventProperties
    params: {}
- name: removeEventProperty
  endpoint:
    path: /removeEventProperty
    method: POST
    data_selector: eventProperty
    params: {}
- name: clearEventProperties
  endpoint:
    path: /clearEventProperties
    method: POST
    data_selector: clearEventProperties
    params: {}
- name: addUserProperties
  endpoint:
    path: /addUserProperties
    method: POST
    data_selector: userProperties
    params: {}
- name: trackPageview
  endpoint:
    path: /trackPageview
    method: POST
    data_selector: pageview
    params: {}
- name: addPageviewProperties
  endpoint:
    path: /addPageviewProperties
    method: POST
    data_selector: pageviewProperties
    params: {}
- name: removePageviewProperty
  endpoint:
    path: /removePageviewProperty
    method: POST
    data_selector: pageviewProperty
    params: {}
- name: clearPageviewProperties
  endpoint:
    path: /clearPageviewProperties
    method: POST
    data_selector: clearPageviewProperties
    params: {}
- name: onReady
  endpoint:
    path: /onReady
    method: POST
    data_selector: ready
    params: {}
- name: getSessionId
  endpoint:
    path: /getSessionId
    method: GET
    data_selector: sessionId
    params: {}
- name: getPageviewMetadata
  endpoint:
    path: /getPageviewMetadata
    method: GET
    data_selector: pageviewMetadata
    params: {}
- name: getUserId
  endpoint:
    path: /getUserId
    method: GET
    data_selector: userId
    params: {}
- name: setLogLevel
  endpoint:
    path: /setLogLevel
    method: POST
    data_selector: logLevel
    params: {}
- name: event_message
  endpoint:
    path: /event/message
    method: POST
    data_selector: data
- name: Heap SDK
  endpoint:
    path: /startRecording
    method: POST
    data_selector: Heap.shared.startRecording
    params: {}
- name: HeapSwiftCore
  endpoint:
    path: /path/to/HeapSwiftCore
    method: GET
- name: autocapture
  endpoint:
    path: /track/autocapture
    method: POST
    data_selector: records
- name: Heap SDK
  endpoint:
    path: /startRecording
    method: POST
    data_selector: response
    params:
      app_id: YOUR_APP_ID
- name: tracking
  endpoint:
    path: /startRecording
    method: POST
    data_selector: results
- name: Unified SDK
  endpoint:
    path: /sdk/unified
    method: GET
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: events
    params: {}
- name: StartRecording_iOS
  endpoint:
    path: HeapInc.Xamarin.iOS.Implementation.StartRecording
    method: POST
    data_selector: YOUR_ENVIRONMENT_ID
- name: StartRecording_Android
  endpoint:
    path: HeapInc.Xamarin.Android.Implementation.StartRecording
    method: POST
    data_selector: YOUR_ENVIRONMENT_ID
- name: heapSnippet
  endpoint:
    path: /config/YOUR_APP_ID/heap_config.js
    method: GET
    data_selector: script
- name: youtube_video
  endpoint:
    path: /youtube/track
    method: POST
    data_selector: events
- name: vimeo_video
  endpoint:
    path: /vimeo/track
    method: POST
    data_selector: events
- name: wistia_video
  endpoint:
    path: /wistia/track
    method: POST
    data_selector: events
- name: html5_video
  endpoint:
    path: /html5/track
    method: POST
    data_selector: events
- name: Heap App ID
  endpoint:
    path: /Account/Manage/Projects
    method: GET
    data_selector: appID
    params: {}
- name: heap_script
  endpoint:
    path: /config/YOUR_APP_ID/heap_config.js
    method: GET
    data_selector: script
    params: {}
- name: identify
  endpoint:
    path: /heap.identify
    method: POST
- name: addUserProperties
  endpoint:
    path: /heap.addUserProperties
    method: POST
- name: heap_integration
  endpoint:
    path: /heap/startRecording
    method: POST
    data_selector: response
    params:
      sendHeapPageviewsToContentsquare: false
      sendContentsquareScreenviewsToHeap: true
      resumePreviousSession: true
      disablePageviewAutocapture: true
- name: Heap
  endpoint:
    path: /Heap
    method: POST
    data_selector: Heap
    params: {}
- name: Heap Initialization
  endpoint:
    path: /initialize
    method: POST
    data_selector: response
    params:
      app_id: YOUR_APP_ID
- name: autocaptured_events
  endpoint:
    path: /autocaptured_events
    method: GET
    data_selector: events
- name: screenviews
  endpoint:
    path: /screenviews
    method: GET
    data_selector: views
notes:
- 'This SDK requires the following minimum OS versions: iOS 12.0, Android API level
  21.'
- Do Not Use a Non-Unique Identifier
- Passing a non-unique identifier in the identify field will result in all anonymous
  user data being merged into one user profile.
- Requests are limited to 30 requests per 30 seconds per identity per app_id
- API is only available on the client-side.
- May not work well with Single Page Applications.
- There is a 4k limit on the sum of cookies per domain, and properties may be dropped
  if the limit is exceeded.
- This API is usually called in relation to addEventProperties.
- It is required that you use either the identity or user_id param, but not both.
- Requests are limited to 1000 events per minute per identity per app_id and 15,000
  events per minute per app_id.
- Limits the number of identities mapped to a user_id to 1
- Limits the number of user_ids mapped to an identity to 10 over a one-month period
- Changed view controller capture to more accurately represent the current view.
- If you want to write your user's email into the builtin Email property, you must
  send the key lowercase
- If you want to write your user's email into the built-in Email property, you must
  send the key lowercase as per the example above.
- Sending an email value with a non-lowercase key will create a new property to store
  this data.
- '`fetch`, `jQuery`, and `XMLHttpRequest` options are not currently supported.'
- You will need to configure the Account ID setting before using this API to send
  your account data into Heap.
- If you're planning to measure account health in Heap, you should use this endpoint
  to send useful account properties for analysis.
- Initial release of Heap Android Core SDK.
- Some objects may have issues with event suppression.
- Initial release of autocapture on core.
- Automatic React Navigation pageview autocapture without configuration.
- React Native Navigation pageview autocapture.
- Refined view hierarchies filtering lower level components.
- Screen views are now stored as pageviews on rather than events.
- Ensure to replace YOUR_APP_ID with the app ID of the environment to which you want
  to send data.
- If you send data to the wrong environment, it will pollute the data in that environment.
- Disabling target text entirely might make creating events more difficult.
- If sensitive data lives in an elementâ€™s target text, attribute, or in a page title,
  you can hide it from Heap by using data-heap-redact-attributes.
- The id attribute specifically can't be redacted using data-heap-redact-attributes.
- At the moment, the Visual Labeler does not support Shadow DOM. We recommend using
  Live View instead.
- Avoid modifying the properties as they may be vital for Heap analysis
- Can a site install both the new SDK alongside the classic Heap web SDK on the same
  site? This is not currently supported.
- 'Can a site downgrade back to the classic web SDK after upgrading to the new version?
  Yes, set classicSDKCompatibility: true in the heap.load config object during testing
  to preserve backwards compatibility.'
- To enable Heap, call startRecording. This can go anywhere in your app, but we recommend
  doing this during app launch.
- Replace YOUR_ENVIRONMENT_ID with the ID of the Heap environment you wish to send
  data to.
- Use 'YOUR_APP_ID' to specify your Heap app ID.
- Replace YOUR_APP_ID with your Heap app ID of the environment you wish to send data
  to.
- Heap depends on the @babel/plugin-transform-react-display-name to include component
  names in interaction events.
- To enable Heap and start automatically tracking supported user interactions, register
  the autocapture SDKs and call startRecording.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Heap SDK will compile for all platforms but only track events on iOS and Android
  devices.
- Heap will automatically start tracking app version changes without any additional
  code.
- GTM waits until the page fully loads to load its scripts.
- If you are using our client-side API, calls that are normally stubbed before the
  page loads can get dropped.
- Make sure you updated the script to include your app ID.
- Electron doesn't natively support cookies, so Heap's Classic JavaScript web snippet
  won't work out-of-the-box.
- We recommend you set the eventPropertiesStorage and metadataStorage options to localStorage.
- Note that your Heap installation may be affected if you edit a WordPress theme.
  To avoid this, you should create a child theme and make your changes there.
- Client-side tracking may lead to inaccuracies due to user behavior and connectivity
  issues.
- Server-side approach ensures accuracy but requires user identification.
- Uses JavaScript event listeners to track video interactions.
- It's critical that Heap libraries load only once, so you must NOT install the Heap
  snippet directly AND install via Segment.
- If Segment is deployed via Google Tag Manager, direct installation of Heap is recommended
  to avoid delays in data collection or missed events.
- Make sure youâ€™ve updated the script to include your app ID.
- Disabling all text capture is possible with specific options during initialization.
- The minimum version of Heap Core that supports notification events is 0.7.0
- If your app is native Android or native iOS, that's it! Once registered, Heap will
  begin collecting interaction events on notifications.
- No built-in deep link event type at this time
- No built-in deep link event type at this time.
- Heap attempts to piggyback on specific listeners and callback methods for interactions.
- If a listener isn't attached to a view, then the interaction cannot be captured
  automatically.
- Heap will make a best effort attempt to differentiate between user driven interactions
  and programmatic interactions.
- WebView support is only available for native Android and iOS apps at this time.
- Due to a known limitation in Android, this integration does not work with Chrome
  Custom Tabs.
- Syncing data with Contentsquare is only possible if you're using our latest SDK
  offering, the Contentsquare Unified SDK.
- In order to sync data from Heap to Contentsquare, you must be using version 0.1.0
  or above of the Contentsquare Unified SDK for native platforms.
- Requires setup of connected app in api
- All members are static.
- This SDK requires Android API level 16 or higher.
- The Heap Android View Autocapture SDK requires a minimum SDK version of 21 or higher.
- The Heap Android View Autocapture SDK requires the Heap Android Core SDK in order
  to work.
- The SDK requires Xcode 15.0 or later.
- The SDK depends on HeapSwiftCore 0.1.2 or later.
- watchOS devices will have separate sessions and user IDs from the paired iOS device.
- Heap adds virtually zero performance overhead.
- Heap never blocks the UI thread of the application and memory is only allocated
  to process events right before theyâ€™re persisted or sent to the server.
- Heap does not perform any data persistence or networking activity on the main thread.
- All event data is stored in an SQLite database in application private storage.
- While offline, all events are stored in the database until theyâ€™re able to be uploaded
  to the server.
- All data more than 6 days old will be routinely pruned from the database to prevent
  the database from growing endlessly.
- Heap sends event data in small batches every 15 seconds while connected to the internet.
- Heap batches event data to be sent to the server every 15 seconds to prevent constant
  network access.
- Heap should not impact battery life in any meaningful way.
- This SDK requires React Native 0.63 or later.
- For Android, the SDK requires Android API level 16 or higher.
- For iOS, the SDK requires iOS 13 or later.
- The SDK depends on native modules and won't capture events in the Expo Go app.
- Pageview autocapture requires React Navigation 5.0 and later or React Native Navigation
  7.0 and later.
- Requires iOS 13 or above, Android API 16 or above, and Flutter 3.16.9 or above.
- Requires Heap Flutter Bridge 0.3.0 or above.
- Autocapture of pageviews is not currently supported if using the AutoRoute package
  for navigation.
- Best Practices for Event Definition for capturing and managing data in React Native
- Heap does not currently support analytics through the AMP or FBIA frameworks, as
  our autocapture and APIs require our installation snippet for full functionality.
- For accurate user tracking across normal and AMP pages, we strongly recommend hosting
  your iframe on a subdomain of your primary domain.
- Automatic initialization of autocapture is no longer available starting in version
  1.0.0 of the Heap Gradle Plugin.
- Heap will continue to support this Classic SDK with critical bug fixes and security
  updates.
- The Heap iOS SDK supports iOS 10 and up.
- Heap Android SDK does not support React Native.
- Heap uses native modules that aren't available in Expo Go.
- The Heap React Native SDK supports React Native 0.63 and up.
- Visual labeling QR codes can't be configured in managed Expo workflows.
- When using the Expo Go app in a managed Expo workflow, events won't be sent to Heap.
- Heap can be customized to print logs at various log levels.
- Requires Flutter 3.24.5 or newer.
- Requires AutoRoute 9.0.0 or newer.
- Increased retry logic to 7 days
- Updated integrations to use public addPageviewProperties API instead of internal
- Make sure to remove any existing install scripts for Heap on your site before installing
  the new version
- The base URL to upload data to while Heap is running must end with a / for paths
  to resolve correctly.
errors:
- 'identifyDeprecated: method is (obviously) deprecated, and should be replaced by
  identify:.'
- '401 Unauthorized: Occurs when the credentials are invalid for a specific request'
- '404 Not found: Occurs when requesting a deletion_request_id that does not exist'
- Fix uncaught exceptions
- Heap correctly instruments events that are handled by Java 8 lambdas
- 'heap.push is not a function: Make sure that the Heap script is only getting loaded
  once.'
- If any network errors occur, Heap pushes back the upload process for a full minute
  to wait for network conditions to improve.
auth_info:
  mentioned_objects: []
client:
  base_url: https://heap-proxy.example.com
  headers:
    Content-Type: text/javascript
    script-src:
    - https://cdn.us.heap-api.com
    - https://heapanalytics.com
    - '''unsafe-inline'''
    - '''unsafe-eval'''
    img-src:
    - https://heapanalytics.com
    style-src:
    - https://heapanalytics.com
    connect-src:
    - https://c.us.heap-api.com
    - https://heapanalytics.com
    font-src:
    - https://heapanalytics.com
    Accept: application/json
  auth:
    type: oauth
    location: header
    header_name: Authorization
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
  options:
    uploadInterval: 60
    baseUrl: https://mh.ba.contentsquare.net
source_metadata: null
