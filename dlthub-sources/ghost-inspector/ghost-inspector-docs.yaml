resources:
- name: on-demand test
  endpoint:
    path: /tests/on-demand
    method: POST
    data_selector: test
    params: {}
- name: execute_suite
  endpoint:
    path: /v1/suites/[suite-id]/execute/
    method: GET
    params:
      apiKey: '[api-key]'
      immediate: '1'
- name: tests
  endpoint:
    path: /tests/
    method: GET
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
- name: test_status
  endpoint:
    path: /tests/{{testId}}/
    method: GET
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
      testId: '{{testId}}'
- name: duplicate_test
  endpoint:
    path: /tests/{{testId}}/duplicate/
    method: GET
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
      testId: '{{testId}}'
- name: delete_test
  endpoint:
    path: /tests/{{testId}}/
    method: DELETE
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
      testId: '{{testId}}'
- name: test_execute
  endpoint:
    path: /tests/{{testId}}/execute/
    method: GET
    data_selector: data
    params: {}
- name: test_status
  endpoint:
    path: /tests/{{testId}}/running/
    method: GET
    data_selector: data
    params: {}
- name: accept_screenshot
  endpoint:
    path: /tests/{{testId}}/accept-screenshot/
    method: GET
    data_selector: data
    params: {}
- name: test_results
  endpoint:
    path: /tests/{{testId}}/results/
    method: GET
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
      count: 10
      offset: 0
- name: test_results_csv
  endpoint:
    path: /tests/{{testId}}/results/csv/
    method: GET
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
      count: 10
      offset: 0
- name: test_export_json
  endpoint:
    path: /tests/{{testId}}/export/json/
    method: GET
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
      includeImports: 1
- name: test_export_selenium_side
  endpoint:
    path: /tests/{{testId}}/export/selenium-side/
    method: GET
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
- name: test_export_selenium_html
  endpoint:
    path: /tests/{{testId}}/export/selenium-html/
    method: GET
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
- name: test_status_badge
  endpoint:
    path: /tests/{{testId}}/status-badge
    method: GET
    data_selector: data
    params:
      testId: '{{testId}}'
- name: test_runner
  endpoint:
    path: /test-runner
    method: POST
    data_selector: testResults
- name: test_suite
  endpoint:
    path: /v1/suites/{{suite-id}}/execute/
    method: GET
    params:
      apiKey: <api-key>
      startUrl: <start-url>
      immediate: '1'
- name: suite
  endpoint:
    path: /suite/execute
    method: POST
    params:
      apiKey: ${bamboo.SECRET_apiKey}
      ngrokToken: ${bamboo.SECRET_ngrokToken}
      suiteId: ${bamboo.suiteId}
- name: execute_suite
  endpoint:
    path: /v1/suites/[suite-id]/execute/
    method: GET
    params:
      apiKey: '[api-key]'
- name: webhook
  endpoint:
    path: /x1/iLHet6ZqoXP5OR1SMShfKuA3gx4
    method: POST
    data_selector: webhook_data
    params:
      jiraProjectKey: GHOST
      jiraTransitionField: screenshot
- name: test
  endpoint:
    path: /tests
    method: GET
    data_selector: tests
    params: {}
- name: execute_test
  endpoint:
    path: /tests/<test-id>/execute/
    method: POST
    data_selector: payload
- name: execute_suite
  endpoint:
    path: /suites/[suite-id]/execute/
    method: POST
    data_selector: payload
- name: execute_suite
  endpoint:
    path: /v1/suites/[suite-id]/execute/
    method: POST
    params:
      apiKey: '[api-key]'
- name: suite_result
  endpoint:
    path: /suite-results/{{suiteResultId}}
    method: GET
    data_selector: data
    params: {}
- name: xunit_report
  endpoint:
    path: /suite-results/{{suiteResultId}}/xunit
    method: GET
    data_selector: data
    params: {}
- name: test_results
  endpoint:
    path: /suite-results/{{suiteResultId}}/results
    method: GET
    data_selector: data
    params: {}
- name: cancel_suite_run
  endpoint:
    path: /suite-results/{{suiteResultId}}/cancel
    method: POST
    data_selector: data
    params: {}
- name: add_suite_result_comment
  endpoint:
    path: /suite-results/{{suiteResultId}}/comment
    method: POST
    data_selector: data
    params: {}
- name: folders
  endpoint:
    path: /folders/
    method: GET
    data_selector: data
    params: {}
- name: folder_suites
  endpoint:
    path: /folders/{{folderId}}/suites/
    method: GET
    data_selector: data
    params: {}
- name: test_execute
  endpoint:
    path: /tests/{{testId}}/execute/
    method: GET
    params:
      apiKey: '{{apiKey}}'
      startUrl: https://custom.starturl.com
- name: organizations
  endpoint:
    path: /organizations/
    method: GET
    params:
      apiKey: '{{apiKey}}'
- name: organization_running
  endpoint:
    path: /organizations/{{organizationId}}/running/
    method: GET
    params:
      apiKey: '{{apiKey}}'
      organizationId: '{{organizationId}}'
- name: organization_data_sources
  endpoint:
    path: /organizations/{{organizationId}}/data-sources
    method: GET
    params:
      apiKey: '{{apiKey}}'
      organizationId: '{{organizationId}}'
- name: organization_data_source
  endpoint:
    path: /organizations/{{organizationId}}/data-sources/{{dataSourceId}}
    method: GET
    params:
      apiKey: '{{apiKey}}'
      organizationId: '{{organizationId}}'
      dataSourceId: '{{dataSourceId}}'
- name: data_sources
  endpoint:
    path: /data-sources/
    method: GET
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
- name: delete_data_source
  endpoint:
    path: /data-sources/{{dataSourceId}}/
    method: DELETE
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
      organizationId: '{{organizationId}}'
      dataSourceId: '{{dataSourceId}}'
- name: ghost_inspector_suite
  endpoint:
    params:
      suite_id: your_suite_id
      api_key: your_api_key
- name: suites
  endpoint:
    path: /suites/
    method: GET
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
- name: suite_status_badges
  endpoint:
    path: /suites/{{suiteId}}/
    method: GET
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
- name: execute_suite
  endpoint:
    path: /suites/{{suiteId}}/execute/
    method: GET
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
      startUrl: <startUrl>
- name: delete_suite
  endpoint:
    path: /suites/{{suiteId}}/
    method: DELETE
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
- name: import_test
  endpoint:
    path: /suites/{{suiteId}}/import-test/
    method: POST
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
- name: import_test_json
  endpoint:
    path: /suites/{{suiteId}}/import-test/json
    method: POST
    data_selector: data
    params: {}
- name: import_test_selenium_html
  endpoint:
    path: /suites/{{suiteId}}/import-test/selenium-html
    method: POST
    data_selector: data
    params: {}
- name: import_test_selenium_side
  endpoint:
    path: /suites/{{suiteId}}/import-test/selenium-side
    method: POST
    data_selector: data
    params: {}
- name: get_tests
  endpoint:
    path: /suites/{{suiteId}}/tests/
    method: GET
    data_selector: data
    params: {}
- name: get_results
  endpoint:
    path: /suites/{{suiteId}}/results/
    method: GET
    data_selector: data
    params: {}
- name: get_results_csv
  endpoint:
    path: /suites/{{suiteId}}/results/csv/
    method: GET
    data_selector: data
    params: {}
- name: export_json
  endpoint:
    path: /suites/{{suiteId}}/export/json/
    method: GET
    data_selector: data
    params: {}
- name: export_selenium_side
  endpoint:
    path: /suites/{{suiteId}}/export/selenium-side/
    method: GET
    data_selector: data
    params: {}
- name: export_selenium_html
  endpoint:
    path: /suites/{{suiteId}}/export/selenium-html/
    method: GET
    data_selector: data
    params: {}
- name: get_status_badge
  endpoint:
    path: /suites/{{suiteId}}/status-badge
    method: GET
    data_selector: data
    params: {}
- name: import_tests_json
  endpoint:
    path: /import/test/json
    method: POST
    data_selector: results
- name: import_tests_selenium_html
  endpoint:
    path: /import/test/selenium/html
    method: POST
    data_selector: results
- name: export_tests
  endpoint:
    path: /export/test
    method: GET
    data_selector: results
- name: test_steps
  endpoint:
    path: /test/steps
    method: GET
- name: deploy_hooks
  endpoint:
    path: /v1/suites/[suite-id]/execute/
    method: GET
    params:
      apiKey: '[api-key]'
      immediate: '1'
- name: test
  endpoint:
    path: /tests
    method: GET
    data_selector: tests
- name: suite
  endpoint:
    path: /suites
    method: GET
    data_selector: suites
- name: ghost_inspector_suite
  endpoint:
    path: /suite/execute
    method: POST
- name: run-ghost-inspector-tests
  endpoint:
    path: /services/data/vXX.X/sobjects/GhostInspector
    method: POST
    data_selector: actions
    params:
      ClientId: 8525e2f1-2540-4ce0-bb85-12cf8c9b339c
      ClientToken: '****'
      TestId: 59fa3ed2e6fa2c7eb595a8e5
- name: Test Webhooks
  endpoint:
    path: /webhooks/test
    method: POST
    data_selector: data
- name: ghost_inspector_test
  endpoint:
    path: /suite/execute
    method: POST
    data_selector: results
    params:
      apiKey: $GHOST_INSPECTOR_API_KEY
      ngrokToken: $NGROK_TOKEN
- name: list_tests
  endpoint:
    path: /tests
    method: GET
- name: get_test
  endpoint:
    path: /tests/{testId}
    method: GET
- name: update_test
  endpoint:
    path: /tests/{testId}
    method: PUT
- name: duplicate_test
  endpoint:
    path: /tests/{testId}/duplicate
    method: POST
- name: delete_test
  endpoint:
    path: /tests/{testId}
    method: DELETE
- name: execute_test
  endpoint:
    path: /tests/{testId}/execute
    method: POST
- name: get_test_result
  endpoint:
    path: /test-results/{resultId}
    method: GET
- name: list_suites
  endpoint:
    path: /suites
    method: GET
- name: get_suite
  endpoint:
    path: /suites/{suiteId}
    method: GET
- name: delete_suite
  endpoint:
    path: /suites/{suiteId}
    method: DELETE
- name: execute_suite
  endpoint:
    path: /suites/{suiteId}/execute
    method: POST
- name: create_suite
  endpoint:
    path: /suites
    method: POST
- name: update_suite
  endpoint:
    path: /suites/{suiteId}
    method: PUT
- name: import_test
  endpoint:
    path: /tests/import
    method: POST
- name: list_folders
  endpoint:
    path: /folders
    method: GET
- name: get_folder
  endpoint:
    path: /folders/{folderId}
    method: GET
- name: create_folder
  endpoint:
    path: /folders
    method: POST
- name: update_folder
  endpoint:
    path: /folders/{folderId}
    method: PUT
- name: email_inbox
  endpoint:
    path: /<username>
    method: GET
    data_selector: emails
- name: latest_email
  endpoint:
    path: /<username>/latest
    method: GET
    data_selector: latest_email
- name: test_runner_ip_addresses
  endpoint:
    path: /v1/test-runner-ip-addresses
    method: GET
    data_selector: data
- name: test_result
  endpoint:
    path: /results/{{resultId}}/
    method: GET
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
- name: add_test_result_comment
  endpoint:
    path: /results/{{resultId}}/comment/
    method: POST
    data_selector: data
    params:
      apiKey: '{{apiKey}}'
- name: execute_suite
  endpoint:
    path: /suite/execute
    method: POST
    data_selector: results
    params:
      apiKey: ${{ secrets.GI_API_KEY }}
      suiteId: ${{ secrets.GI_SUITE }}
      ngrokToken: ${{ secrets.NGROK_TOKEN }}
      ngrokTunnel: node-app:3000
      ngrokUrlVariable: startUrl
      errorOnFail: true
- name: execute_test
  endpoint:
    path: /test/execute
    method: POST
    data_selector: results
    params:
      apiKey: ${{ secrets.GI_API_KEY }}
      testId: ${{ secrets.GI_TEST }}
      startUrl: https://your-staging-url
      errorOnFail: true
- name: webhook
  endpoint:
    path: /workflows
    method: POST
    data_selector: webhook_url
    params: {}
notes:
- The method for local testing involves a 3rd party tool that opens up a public URL
  to your website.
- You will need to sign up for a free ngrok account, then download and unzip the program.
- Each time you restart ngrok, a new URL will be provided.
- Using Protected variables in a GitLab build will restrict the variables to protected
  branches only.
- Status badges are disabled by default and can be enabled under Test Settings > Details
  > Enable Status Badge.
- Requires setup of ngrok for local tunneling
- Custom parameters can be sent to tests via environment variables
- Use ngrok to open a tunnel to your application for testing.
- All fields configured on your webhook can be customized as query string parameters.
- Tests can be executed with various browser versions, screen sizes, and geolocations.
- Auto-Retry is enabled by default to combat false positives.
- Async scripts must start with return new Promise( and end with })
- The Promise must resolve() within the Element Timeout setting of the test or the
  step will fail.
- Any rejected promises will result in a failing step.
- Any uncaught Error thrown within the script will result in a failing step.
- Enabling Ghost Inspector’s GitHub integration is only necessary for sending statuses
  to GitHub.
- The payload value must be a string of escaped JSON.
- This feature has the capacity to trigger a large number of test runs, so please
  ensure you’re aware of the usage required.
- Paid plans allow up to 1,000 rows of data. Free Trial plans have a lower cap.
- Data Sources assigned at the test level will only be used when running that test
  by itself.
- Requires setup of ngrok.io account for local tunneling
- Tests are going to fail. Typically, this is because they are identifying an issue
  on your website or application — which is exactly their point.
- The video and screenshot provided with each test result are incredibly helpful when
  investigating errors.
- Ghost Inspector tests have a maximum run time of 10 minutes.
- If your test requires an account login, dummy data and/or staging servers should
  be used.
- You should never use your own private credentials.
- CAPTCHAs and 2FA codes from authenticator apps are not something that Ghost Inspector
  can handle.
- Uses webapp.io’s secrets manager to store Ghost Inspector API key
- Tests are run from our cloud service.
- You can also enable or disable screenshot comparison for the test.
- exit with non-0 status when test is failing
- The current maximum file size that Ghost Inspector allows is 10MB.
- If you need to use a large file (or prefer not to upload your file to our server),
  you can simply use an 'Assign' step and set the value to the URL of your self-hosted
  file.
- Variables cannot be used in file upload steps because the system needs to fetch
  the file before the test begins.
- Uses OAuth2 with refresh token — requires setup of connected app in Ghost Inspector
- You’ll need to manually retrieve your Ghost Inspector API key and provide it to
  the action.
- Status badges are disabled by default and can be enabled under Suite Settings >
  Details > Enable Status Badge.
- All conditions are currently evaluated as JavaScript.
- Condition logic must return a 'truthy' JavaScript value in order for the step to
  execute, otherwise it will be skipped.
- JavaScript execution happens synchronously in the browser. The code has access to
  globals like window, document, etc.
- Syntax errors or exceptions thrown during the JavaScript execution will result in
  a false condition result.
- Imported tests must already exist in the system and must be referenced by _id
- Ghost Inspector supports both CSS and XPath selector methods
- Tests can be created with our test recorder first, then edited.
- Each step can be made optional, allowing the test to continue execution even if
  the step fails.
- This code assumes that you want to execute a suite after your project has been built.
- The current Ghost Inspector JIRA app is scheduled for removal from the Atlassian
  Marketplace.
- Deployed a new Microsoft Teams integration to replace the previous setup, which
  is no longer supported.
- API rate limits apply. Refer to documentation for details.
- Ability to pass custom variables into test executions and suite executions via our
  API
- Launched AWS CodePipeline integration for executing Ghost Inspector tests within
  your deployment pipelines
- 'Requires setup of environment variables: GHOST_INSPECTOR_API_KEY, APP_PORT, SUITE_ID,
  NGROK_TOKEN'
- Use environmental variables GHOST_API_KEY and GHOST_SUITE_ID
- Setup ngrok.io account for local testing
- Every single test run takes place in a clean, independent environment without any
  cache, cookies, history or session data being carried over from other test runs.
- Tests can last no longer than 10 minutes.
- These IP addresses are reserved at our hosting provider. They are not expected to
  change. In the event that a change is necessary, users will be notified ahead of
  time.
- The application is running in the background under the name 'app'.
- Both the application and the CLI containers are bound to the same docker network.
- This example assumes your build agent is running in a Linux-like environment.
- Live credit card numbers should not be used in your Ghost Inspector tests.
- The __privateStripeFrame8 that is used in the name attribute of the iframe could
  potentially change.
- It’s recommended adding a 5 second (5000ms) “Pause” step after injecting jQuery
  to ensure that the library has time to download.
- It’s strongly recommended that you create a separate Twilio API for this operation
  with limited access for Ghost Inspector.
- Emails sent to this service are technically public and can be accessed by anyone
  with knowledge of the <username> being used.
- Emails are purged 1 hour after they are received.
- Please refrain from sending large volumes of email to this service.
- Go to the API tab in your Mailosaur account to get your Server ID and API key
errors:
- '401 Unauthorized: Recheck API key or permissions'
- 'Element not found: The test is unable to find the element that is being targeted.'
- 'Unreachable URL: Ghost Inspector needs a URL that it can use to access your website
  or application from our servers.'
- 'HTTP authentication credentials are missing: Your test may have failed because
  your website requires HTTP authentication credentials.'
- 'Login steps are missing: If your test is required to log into an application, that
  login sequence must be a part of the test.'
- 'Step selector is not accurate: The step''s selector target is used to find the
  element on the page.'
- 'Earlier steps passed but were unsuccessful: A test step is failing because some
  event didn''t occur the way it was supposed to earlier in the test run.'
- 'Non-repeatable sequence: A test may fail because it is testing a state that is
  affected by previous actions.'
- 'Timing issues: Timing is very important in automated testing.'
- 'JavaScript error: JavaScript code in the step threw an exception.'
- 'Promise was rejected: The Promise used in an asynchronous JavaScript step has called
  reject() to fail the step.'
- 'Malformed script: Promise must end with })'
- 'Condition raised exception: The JavaScript code in your step condition threw an
  exception.'
- 'Error executing click on element: The automation was not able to click the element
  in the step.'
- 'Error sending keys to input: The automation was not able to properly send keypresses
  into the element.'
- 'Error performing step: The browser was unable to move forward performing the step
  because it has stalled out.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API key'
- '401 Unauthorized: Recheck API key validity'
- 'AUTHENTICATION_ERROR: User ID is invalid'
- 'VALIDATION_ERROR: Test not found'
- 'TIMEOUT_ERROR: Your execution is still in progress. Our API reached its timeout.'
- 'SERVER_ERROR: The Ghost Inspector service is encountering issues.'
- '401 Unauthorized: Invalid API key provided.'
- '403 Forbidden: You do not have permission to access this resource.'
- '404 Not Found: The requested resource could not be found.'
- '401 Unauthorized: Recheck API key or token expiration'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Authentication: The error that is returned when authentication fails'
- 'Validation: The error that is returned when the request is not valid'
- 'Timeout: The error that is returned when the request times out before completing'
- 'Server Problem: The error that is returned when the Ghost Inspector service is
  encountering problems'
auth_info:
  mentioned_objects: []
client:
  auth:
    type: apikey
    location: query
    header_name: apiKey
    flow: refresh_token
  headers:
    Accept: application/json
    Content-Type: application/json
    Authorization: Bearer $GHOST_INSPECTOR_API_KEY
  base_url: https://api.ghostinspector.com/v1
  paginator:
    type: none
source_metadata: null
