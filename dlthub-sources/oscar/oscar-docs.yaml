resources:
- name: OSCAR
  endpoint:
    path: https://{FRONT_NODE}
    method: GET
- name: MinIO
  endpoint:
    path: https://{FRONT_NODE}:30300
    method: GET
- name: OpenFaaS
  endpoint:
    path: http://{FRONT_NODE}:31112
    method: GET
- name: Kubernetes API
  endpoint:
    path: https://{FRONT_NODE}:6443
    method: GET
- name: Kube. Dashboard
  endpoint:
    path: https://{FRONT_NODE}:30443
    method: GET
- name: FaaS Supervisor
  endpoint:
    path: /path/to/faas/supervisor
    method: POST
    data_selector: input
    params: {}
- name: jupyter
  endpoint:
    path: /system/services/jupyter/exposed
    method: GET
- name: kubernetes_dashboard
  endpoint:
    path: dashboard_endpoint
    method: GET
- name: minio_dashboard
  endpoint:
    path: console_minio_endpoint
    method: GET
- name: oscar_dashboard
  endpoint:
    path: local_oscarui_endpoint
    method: GET
- name: plants
  image: grycap/oscar-theano-plants
  script: plants.sh
  memory: 2Gi
  cpu: '1.0'
  isolation_level: USER
  allowed_users:
  - 62bb11b40398f7.......926@egi.eu
  - 5e14d33ac4abc9.......463@egi.eu
  input:
  - storage_provider: minio.default
    path: example-workflow/in
  output:
  - storage_provider: minio.default
    path: example-workflow/med
- name: grayify
  image: grycap/imagemagick
  script: grayify.sh
  memory: 1Gi
  cpu: '1.0'
  interlink_node_name: vega-new-vk
  expose:
    min_scale: 3
    max_scale: 7
    port: 5000
    cpu_threshold: 70
    nodePort: 30500
    set_auth: true
    rewrite_target: true
    default_command: true
  input:
  - storage_provider: minio.default
    path: example-workflow/med
  output:
  - storage_provider: minio.default
    path: example-workflow/res
  - storage_provider: onedata.my_onedata
    path: result-example-workflow
  - storage_provider: webdav.dcache
    path: example-workflow/res
- name: virtual_kubelet
  endpoint:
    path: /services/data/vXX.X/sobjects/VirtualKubelet
    method: GET
    data_selector: records
    params: {}
- name: exposed_service
  endpoint:
    path: /system/services/{service_name}/exposed/{path_resource}
    method: GET
    data_selector: null
    params: {}
- name: cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: clusters
- name: service
  endpoint:
    path: /service
    method: GET
    data_selector: services
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: k3s_version
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      kube_version: v1.22.3+k3s1
- name: kube_admin_token
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      kube_admin_token: kube-token123
- name: oscar_password
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      oscar_password: oscar123
- name: dns_host
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      dns_host: oscar-cluster.example.com
- name: minio_password
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      minio_password: minio123
- name: minio_dns_host
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      minio_dns_host: minio.oscar-cluster.example.com
- name: minio_dns_host_console
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      minio_dns_host_console: minio-console.oscar-cluster.example.com
- name: service_status
  endpoint:
    path: /run/<SERVICE_NAME>
    method: GET
- name: service_job
  endpoint:
    path: /job/<SERVICE_NAME>
    method: POST
- name: config.yaml
  endpoint:
    path: /data/config.yaml
    method: GET
    data_selector: images
    params: {}
notes:
- Most passwords/tokens are dynamically generated at deployment time.
- A StorageClass with the ReadWriteMany access mode must be configured in the cluster
  for the creation of the persistent volume mounted on the service containers.
- MinIO must be deployed and properly configured in the cluster.
- To avoid FaaS Supervisor's logs, you must set the service's log_level to CRITICAL.
- Access Key serves as the username, and the Secret Key functions as the password.
- The OSCAR client does not support DELETE or UPDATE operations.
- You should obtain the AMI identifier for the latest version of the OS.
- OSCAR API supports OIDC (OpenID Connect) access tokens to authorize users since
  release v2.5.0
- By default, OSCAR clusters deployed via the IM Dashboard are configured to allow
  authorization via basic auth and OIDC tokens using the EGI Check-in issuer.
- The cluster needs to have enabled OIDC access.
- Users who want to create new services need to know the ePUID of the users who will
  have access to the service.
- The memory and CPU defined in the OSCAR services are not applied to the jobs that
  are offloaded via interLink.
- When the offloading is set to a SLURM job, it's possible to request some resources
  employing slurm flags.
- The container image needs to have an HTTP server that binds to a specific port.
- If the service exposes a web-based UI, ensure the content cannot only be served
  from the root document ('/') since the service will be exposed in a certain subpath.
- If you get a 502 Bad Gateway error, it is most likely because the specified port
  on the service does not match the API port.
- Some subcommands will not work with MinIO if you use a local deployment due to DNS
  resolutions.
- Only MinIO can be used as input storage provider for OSCAR services.
- Usage of SCONE introduces a non-negligible overhead when executing the container
  for the OSCAR service.
- Synchronous invocations are not the best option for long-running resource-demanding
  applications.
- Service access tokens are auto-generated in service creation and update.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Only the minio.default provider can be used as input storage provider.
- The web interface includes a preview button for some file formats, such as images.
- The only configurable property currently is the container images' origin.
- Images that do not come from the allowed prefixes are restricted.
- The local deployment of OSCAR is just recommended for testing.
- OSCAR depends on MinIO as a storage provider and function trigger.
- Some Linux distributions may have problems using the NFS server provisioner with
  kind due to its default configuration of kernel-limit file descriptors.
- Sometimes, when trying to deploy the cluster locally, it tells me that the :80 port
  is already in use.
- 'I get the following error message: "Unable to communicate with the cluster. Please
  make sure that the endpoint is well-typed and accessible."'
- 'How do I use a secret image? In case it is required the use of secret images, you
  should create a secret with the docker login configuration with a structure like
  this: apiVersion: v1 kind: Secret metadata: name: dockersecret namespace: oscar-svc
  data: .dockerconfigjson: {base64 .docker/config.json} type: kubernetes.io/dockerconfigjson'
- The OSCAR cluster does not have TLS certificates (HTTPS). Why? It could happen when
  an OSCAR cluster is deployed from an IM recipe that does not have certificates or
  the Let's Encrypt limit has been reached.
- I do not have certificates. I can not see the buckets. What do I have to do? If
  the OSCAR cluster has no certificate OSCAR Dashboard will not show the buckets.
- When creating the service on the remote OSCAR cluster, enable the webhook event
  for PUT actions on the intermediate bucket.
- Delete the event webhook to avoid getting both events every time.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://your-instance.api-name.com
  auth:
    type: oauth2
    location: header
    header_name: Authorization
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
  mount:
    storage_provider: minio.default
    path: /notebook
  storage_providers:
    onedata:
      my_onedata:
        oneprovider_host: my_provider.com
        token: my_very_secret_token
        space: my_onedata_space
      webdav:
        dcache:
          hostname: my_dcache.com
          login: my_username
          password: my_password
  headers:
    Accept: application/json
  paginator:
    type: cursor
    cursor_path: nextRecordsUrl
    cursor_param: nextUrl
    page_size_param: pageSize
    default_page_size: 200
source_metadata: null
