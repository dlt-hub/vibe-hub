resources:
- name: themes
  endpoint:
    path: /kb/themes
    method: GET
    data_selector: themes
    params: {}
- name: agents
  endpoint:
    path: /v1/agents
    method: GET
    data_selector: agents
    params:
      group: 'no'
- name: agent_by_email
  endpoint:
    path: /v1/agents/:agent_email
    method: GET
    data_selector: agent
    params: {}
- name: customers
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: customers
    params:
      page: 1
- name: customer_by_email
  endpoint:
    path: /v1/customers/:customer_email
    method: GET
    data_selector: customer
    params: {}
- name: update_customer
  endpoint:
    path: /v1/customers/:customer_email
    method: PUT
    data_selector: customer
    params: {}
- name: webhook
  endpoint:
    path: /v1/webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: mailboxes
  endpoint:
    path: /mailboxes
    method: GET
    data_selector: mailboxes
    params: {}
- name: settings
  endpoint:
    path: /kb/:knowledge_base_id/settings
    method: GET
    data_selector: settings
- name: publish_settings
  endpoint:
    path: /kb/:knowledge_base_id/settings/publish
    method: PUT
- name: revert_settings
  endpoint:
    path: /kb/:knowledge_base_id/settings/revert
    method: PUT
- name: reset_settings
  endpoint:
    path: /kb/:knowledge_base_id/settings/reset
    method: PUT
- name: knowledge_base
  endpoint:
    path: /
    method: POST
    data_selector: knowledge_base
    params: {}
- name: knowledge_bases
  endpoint:
    path: /
    method: GET
    data_selector: knowledge_bases
    params: {}
- name: knowledge_base_by_id
  endpoint:
    path: /:id
    method: GET
    data_selector: knowledge_base
    params: {}
- name: update_knowledge_base
  endpoint:
    path: /:id
    method: PUT
    data_selector: knowledge_base
    params: {}
- name: delete_knowledge_base
  endpoint:
    path: /:id
    method: DELETE
    data_selector: null
    params: {}
- name: ticket_messages
  endpoint:
    path: /tickets/:ticket_number/messages
    method: GET
    data_selector: messages
    params:
      page: 1
      per_page: 25
- name: message
  endpoint:
    path: /messages/:id
    method: GET
    data_selector: message
    params: {}
- name: create_ticket_message
  endpoint:
    path: /tickets/:ticket_number/messages
    method: POST
    data_selector: message
    params: {}
- name: articles
  endpoint:
    path: /kb/:knowledge_base_id/articles
    method: POST
    data_selector: article
    params: {}
- name: article_search
  endpoint:
    path: /kb/:knowledge_base_id/articles/search
    method: GET
    data_selector: articles
    params:
      keyword: '*'
- name: article_counts
  endpoint:
    path: /kb/:knowledge_base_id/articles/counts
    method: GET
    data_selector: counts
    params:
      keyword: '*'
      groups: state
- name: article_tags
  endpoint:
    path: /kb/:knowledge_base_id/articles/tags
    method: GET
    data_selector: tags
    params: {}
- name: single_article
  endpoint:
    path: /kb/:knowledge_base_id/articles/:id
    method: GET
    data_selector: article
    params: {}
- name: update_article
  endpoint:
    path: /kb/:knowledge_base_id/articles/:id
    method: PUT
    data_selector: article
    params: {}
- name: publish_article
  endpoint:
    path: /kb/:knowledge_base_id/articles/:id/publish
    method: PUT
    data_selector: article
    params: {}
- name: unpublish_article
  endpoint:
    path: /kb/:knowledge_base_id/articles/:id/unpublish
    method: PUT
    data_selector: article
    params: {}
- name: delete_article
  endpoint:
    path: /kb/:knowledge_base_id/articles/:id/delete
    method: PUT
    data_selector: article
    params: {}
- name: folders
  endpoint:
    path: /folders
    method: GET
    data_selector: folders
    params:
      mailbox: Mailbox ID or email
- name: widgets
  endpoint:
    path: /widgets
    method: GET
    data_selector: widgets
    params: {}
- name: widget
  endpoint:
    path: /widgets/:id
    method: GET
    data_selector: widget
    params: {}
- name: ticket_count
  endpoint:
    path: /tickets/count
    method: GET
    data_selector: tickets
    params:
      mailbox: ''
- name: widget_settings
  endpoint:
    path: /widgets/:widget_id/settings
    method: GET
    data_selector: settings
- name: widget_settings_publish
  endpoint:
    path: /widgets/:widget_id/settings/publish
    method: PUT
- name: widget_settings_revert
  endpoint:
    path: /widgets/:widget_id/settings/revert
    method: PUT
- name: widget_settings_reset
  endpoint:
    path: /widgets/:widget_id/settings/reset
    method: PUT
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: group
  endpoint:
    path: /groups/:id
    method: GET
    data_selector: group
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: group
- name: update_group
  endpoint:
    path: /groups/:group_id
    method: PUT
    data_selector: group
- name: delete_group
  endpoint:
    path: /groups/:id
    method: DELETE
    data_selector: group
- name: attachments
  endpoint:
    path: /messages/:message_id/attachments
    method: POST
    data_selector: attachment
    params: {}
- name: remaining_attachments
  endpoint:
    path: /messages/:message_id/attachments/remaining
    method: GET
    data_selector: remaining_attachments_count
    params: {}
- name: translations
  endpoint:
    path: /kb/:knowledge_base_id/translations/:locale
    method: GET
    data_selector: default
    params:
      locale: en
- name: update_translation
  endpoint:
    path: /kb/:knowledge_base_id/translations/:locale
    method: PUT
    data_selector: user
    params:
      locale: en
- name: reset_translation
  endpoint:
    path: /kb/:knowledge_base_id/translations/:locale/reset
    method: PUT
    data_selector: ''
    params:
      locale: en
- name: delete_translation
  endpoint:
    path: /kb/:knowledge_base_id/translations/:locale/:translationKey
    method: DELETE
    data_selector: ''
    params:
      locale: en
- name: widget
  endpoint:
    path: /widget/:widget_uuid
    method: GET
    data_selector: widget
    params: {}
- name: categories
  endpoint:
    path: /kb/:knowledge_base_id/categories
    method: POST
    data_selector: category
- name: search_categories
  endpoint:
    path: /kb/:knowledge_base_id/categories/search
    method: GET
    data_selector: categories
- name: counts_categories
  endpoint:
    path: /kb/:knowledge_base_id/categories/counts
    method: GET
    data_selector: counts
- name: get_category
  endpoint:
    path: /kb/:knowledge_base_id/categories/:id
    method: GET
    data_selector: category
- name: update_category
  endpoint:
    path: /kb/:knowledge_base_id/categories/:id
    method: PUT
    data_selector: category
- name: publish_category
  endpoint:
    path: /kb/:knowledge_base_id/categories/:id/publish
    method: PUT
    data_selector: category
- name: unpublish_category
  endpoint:
    path: /kb/:knowledge_base_id/categories/:id/unpublish
    method: PUT
    data_selector: category
- name: revert_category
  endpoint:
    path: /kb/:knowledge_base_id/categories/:id/revert
    method: PUT
    data_selector: category
- name: delete_category
  endpoint:
    path: /kb/:knowledge_base_id/categories/:id
    method: DELETE
- name: tickets
  endpoint:
    path: /tickets
    method: GET
    data_selector: tickets
- name: ticket
  endpoint:
    path: /tickets/:ticket_number
    method: GET
    data_selector: ticket
- name: ticket_state
  endpoint:
    path: /tickets/:ticket_number/state
    method: GET
    data_selector: state
- name: ticket_assignee
  endpoint:
    path: /tickets/:ticket_number/assignee
    method: GET
    data_selector: agent
- name: ticket_assigned_group
  endpoint:
    path: /tickets/:ticket_number/assigned_group
    method: PUT
- name: ticket_tags
  endpoint:
    path: /tickets/:ticket_number/tags
    method: POST
- name: categories_search
  endpoint:
    path: /kb/:knowledge_base_id/categories/search
    method: GET
    data_selector: categories
    params:
      keyword: string
      page: integer
      per_page: integer
- name: articles_search
  endpoint:
    path: /kb/public/:knowledge_base_id/articles/search
    method: GET
    data_selector: articles
    params:
      keyword: string
      category_id: string
      featured: boolean
      ids: array
      page: integer
      per_page: integer
      tag: string
- name: help_search
  endpoint:
    path: /help/search.json
    method: GET
    data_selector: array
    params:
      keyword: string
- name: article_rating
  endpoint:
    path: /help/:slug/ratings.json
    method: POST
    data_selector: article
    params:
      value: integer
notes:
- We use online tracking which means Groove collects certain information automatically
  and stores it in log files and databases.
- Groove analyzes trends, tracks Your movements, and gathers this information in order
  to make better decisions in terms of product development.
- Requires Groove API key for access.
- The unique subdomain of the knowledge base is required.
- Supports various methods for article management including create, read, update,
  delete, publish and unpublish.
- Mailbox ID or email is optional for filtering
- This endpoint fetches the count of tickets grouped by folder ID.
- The attachments endpoint is polymorphic and can understand both single binary file
  uploads as well as multipart/form-data uploads.
- API requires knowledge base ID in the endpoint.
- Requires valid email for assignee and customer.
- Tags are added or replaced using specific endpoints.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API key validity'
- '404 Not Found: Check if the knowledge base ID and article ID are correct.'
- '401 Unauthorized: Check API key provided in Authorization header.'
- '401 Unauthorized: Recheck API key or token expiration'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '422: Errors will return errors json in the format {"errors": {"field_name": ["error"]}}'
- Filesize exceeded maximum limit of 20971520 bytes
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.groovehq.com/v1
  headers:
    Authorization: Bearer $GROOVE_API_KEY
    Content-Type: application/json
    Accept: application/json
  paginator:
    type: page
    page_size_param: per_page
    default_page_size: 25
  auth:
    type: apikey
    location: header
    header_name: Authorization
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    redirect_uri: Your Redirect URI which you supplied to us.
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
source_metadata: null
