resources:
- name: Person
  endpoint:
    path: /addressbook.proto
    method: DEFINE
    data_selector: message
    params: {}
- name: AddressBook
  endpoint:
    path: /addressbook.proto
    method: DEFINE
    data_selector: message
    params: {}
- name: feature_definition
  endpoint:
    path: /feature/definition
    method: GET
- name: generators
  endpoint:
    path: /generators
    method: GET
- name: SearchService
  endpoint:
    path: /services/rpc/Search
    method: RPC
    data_selector: SearchRequest
- name: SearchRequest
  endpoint:
    path: /services/data/vXX.X/sobjects/SearchRequest
    method: GET
    data_selector: records
- name: Corpus
  endpoint:
    path: /services/data/vXX.X/sobjects/Corpus
    method: GET
    data_selector: records
- name: Person
  endpoint:
    path: /addressbook/person
    method: POST
    data_selector: people
    params: {}
- name: AddressBook
  endpoint:
    path: /addressbook
    method: GET
    data_selector: addressBook
    params: {}
- name: address_book
  endpoint:
    path: /addressbook.proto
    method: GET
    data_selector: messages
    params: {}
- name: address_book
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: address_book
  endpoint:
    path: /addressbook.proto
    method: GET
    data_selector: messages
    params: {}
- name: SearchRequest
  endpoint:
    path: /services/data/v2023/SearchRequest
    method: GET
    data_selector: records
- name: address_book
  endpoint:
    path: /addressbook.proto
    method: GET
    data_selector: messages
    params: {}
- name: Player
  endpoint:
    path: /player
    method: GET
    data_selector: records
    params: {}
- name: SearchRequest
  endpoint:
    path: /services/data/vXX.X/sobjects/SearchRequest
    method: GET
    data_selector: records
    params: {}
- name: SearchRequest
  endpoint:
    path: /search/request
    method: POST
    data_selector: message
    params: {}
- name: ErrorStatus
  endpoint:
    path: /google/protobuf/any.proto
    method: GET
    data_selector: details
- name: SampleMessage
  endpoint:
    path: /google/protobuf/any.proto
    method: GET
    data_selector: test_oneof
- name: SearchRequest
  endpoint:
    path: /search/request
    method: POST
    data_selector: fields
    params: {}
- name: person
  endpoint:
    path: /addressbook/person
    method: GET
    data_selector: people
    params: {}
- name: address_book
  endpoint:
    path: /addressbook
    method: GET
    data_selector: address_book
    params: {}
notes:
- Protocol buffer classes are basically data holders (like structs in C) that don’t
  provide additional functionality.
- You should never add behavior to the generated classes by inheriting from them.
- The protocol buffer format supports the idea of extending the format over time.
- We dropped our C++ CocoaPods release, which has been broken since v4.x.x. C++ users
  should use our GitHub release directly instead.
- Users can also temporarily silence the error by setting the opt-out flag `--define=protobuf_allow_msvc=true`
  until the next breaking release.
- A new build dependency can always cause breakages for downstream users.
- We require Abseil LTS 20230125 or later to build.
- Generators must specify exactly which editions they support.
- Runtimes without reflection or dynamic messages should not need to do anything to
  implement Editions.
- We recommend always adding the optional label for proto3 basic types.
- Changing a field between explicit presence and implicit presence is a binary-compatible
  change for serialized values in wire format.
- Enum values must be in the range of a 32-bit integer.
- Negative values are inefficient and thus not recommended.
- Unknown fields are preserved during deserialization.
- Protocol Buffers are not designed to handle large messages.
- Protocol Buffers do not include any built-in support for large data sets because
  different situations call for different solutions.
- Protocol Buffers do not contain descriptions of their own types.
- C# does treat *message* fields as nullable.
- If a nullable getter existed, it would necessarily ignore the user-specified defaults.
- Uses protocol buffers for data serialization
- Supports both reading and writing of address book entries
- Uses proto3 syntax for defining messages
- Supports backward and forward compatibility for protocol buffers
- We recommend always adding the `optional` label for proto3 basic types.
- This provides a smoother path to editions, which uses explicit presence by default.
- Keep the line length to 80 characters.
- Use an indent of 2 spaces.
- Prefer the use of double quotes for strings.
- These guidelines are just that and many have documented exceptions.
- If you’re writing a performance-critical backend, you might want to sacrifice flexibility
  or safety for speed.
- Be mindful of your service name, and make it globally unique.
- Bound request and response sizes should be bounded. We recommend a bound in the
  ballpark of 8 MiB, and 2 GiB is a hard limit.
- Create unique protos per method.
- Enumerator constants must be in the range of a 32-bit integer.
- The generated code may be subject to language-specific limitations on the number
  of enumerators.
- Clients and servers are never updated at exactly the same time.
- Never re-use a tag number.
- Reserve tag numbers for deleted fields.
- Reserve numbers for deleted enum values.
- Put new enum aliases last.
- Almost never change the type of a field.
- Never add a required field.
- Don’t make a message with lots of fields.
- Include an unspecified value in an enum.
- Avoid using macro constants as enum values.
- Use well-known types and common types.
- Define message types in separate files.
- Almost never change the default value of a field.
- Going from repeated to scalar will lose data.
- Follow the style guide for generated code.
- Don’t use text format messages for interchange.
- Never rely on serialization stability across builds.
- Don’t generate Java protos in the same Java package as other code.
- Avoid using language keywords for field names.
- Use java_outer_classname.
- This information is a collection of discovered limitations by many engineers, but
  is not exhaustive and may be incorrect/outdated in some areas.
- Extensions are not supported in proto3.
- It’s recommended to bound request and response sizes.
- Protocol buffers provide a serialization format for packets of typed, structured
  data.
- Backward compatibility is crucial for protocol buffers.
- Protocol buffers are not well supported in non-object-oriented languages popular
  in scientific computing.
- Protocol buffers are a flexible, efficient solution for serializing structured data.
- Generated classes provide automatic encoding and parsing of protocol buffer data.
- Clients and servers are never updated at exactly the same time - even when you try
  to update them at the same time.
- Never re-use a tag number to avoid deserialization issues.
- Reserve tag numbers for deleted fields and enum values.
- Add the new enum alias below the old name and deprecate the old one.
- Almost never change the type of a field as it will mess up deserialization.
- Never add a required field; all fields should be optional or repeated.
- Don’t make a message with lots of fields to avoid compilation issues.
- Enums should include a default UNSPECIFIED value as the first value.
- Avoid using C/C++ macro constants for enum values.
- Use well-known types and common types instead of custom definitions.
- Define message types in separate files for easier maintenance.
- Almost never change the default value of a field to prevent version skew.
- Going from repeated to scalar will lose data, while going from scalar to repeated
  is acceptable.
- Follow the style guide for generated code to maintain consistency.
- Use binary serialization for data interchange instead of text formats.
- Do not rely on serialization stability across builds.
- Generate Java proto sources in a separate package from hand-written Java sources.
- Run protoc --version to check the version of protoc after using a package manager
  for installation to ensure that it is sufficiently recent.
- The versions of protoc installed by some package managers can be quite dated.
- The 1-1-1 best practice advocates structuring definitions with one top-level entity
  (message, enum, or extension) per .proto file.
- Having the fewest number of message, enum, extension, and services as you reasonably
  can makes refactoring easier.
- Use good judgment for when to diverge from the guideline.
- Unknown fields are well-formed protocol buffer serialized data representing fields
  that the parser does not recognize.
- As of Protocol Buffers 22.0, support for option retention is still in progress and
  only C++ and Java are supported.
- Go has support starting from 1.29.0.
- Python support is complete but has not made it into a release yet.
- Enums behave differently in different language libraries.
- Closed enums can lead to unexpected consequences when parsing repeated fields.
- Proto3 does not support extensions (except for declaring custom options)
- Avoid using declarations for extension range groups such as extensions 4, 999
- ProtoJSON Format is not as efficient as protobuf wire format.
- The converter uses more CPU to encode and decode messages.
- Encoded messages consume more space.
- Removing fields is a breaking change.
- There are many good reasons why Google prefers to use the standard wire format.
- The 1-1-1 best practice advocates structuring definitions with one top-level entity
  per .proto file.
- This approach promotes small, modular proto definitions.
- Protocol buffers are a flexible, efficient way to serialize structured data.
- To improve protocol buffers, maintain existing field tag numbers.
- Editions enable the language to evolve incrementally over time.
- Editions won’t break existing binaries and don’t change a message’s binary, text,
  or JSON serialization format.
- The generated code may be subject to language-specific limitations on the number
  of enumerators (low thousands for one language). Review the limitations for the
  languages you plan to use.
- Prefer not to put .proto files in the same directory as other language sources.
- Consider creating a subpackage proto for .proto files, under the root package for
  your project.
- Unverified extension field number allocation strategies are not recommended
- Extensions are not supported for oneof
- A oneof cannot be repeated
- During deserialization, unrecognized enum values will be preserved in the message.
- Create methods that return or manipulate small bits of data and expect clients to
  compose UIs from batching multiple such requests.
- Make a one-off RPC when the alternative is serial round-trips on mobile or web.
- Prefer idempotency to avoid duplicate writes.
- Bound request and response sizes, recommend a bound in the ballpark of 8 MiB.
- Propagate status codes carefully at RPC boundaries.
- Document each field in terms that will be useful to a new team-member or client
  with little knowledge of your system.
- Don’t make an UpdateFooRequest that only takes a Foo.
- If a field is one of a common type, such as google.type or google.protobuf, then
  using that type both as storage and API is acceptable.
- Protobuf cross-version usages outside the guarantees are error-prone and not supported.
- No coexistence of multiple major runtime versions in the same process is not supported.
- This documentation provides guidelines for using the proto2 syntax.
- Extensions are not supported for maps
- The generated code may be subject to language-specific limitations on the number
  of enumerators (low thousands for one language).
- Removing enum values is a breaking change for persisted protos.
- You can define and use message types inside other message types.
- Groups are deprecated and should not be used when creating new message types.
- It’s possible to import proto3 and edition 2023 message types and use them in your
  proto2 messages.
- If you use JSON or proto text format to store your protocol buffer messages, the
  changes that you can make in your proto definition are different.
- Option retention is an advanced feature that most users should not need to worry
  about, but it can be useful if you would like to use certain options without paying
  the code size cost of retaining them in your binaries.
- If you follow these rules, old code will happily read new messages and simply ignore
  any new fields.
- New optional fields will not be present in old messages, so you will need to either
  check explicitly whether they’re set with `has_`.
- Uses protocol buffers for serialization and deserialization of messages
errors:
- Ensure compiler version is 3+
- C++ treats closed enums incorrectly when importing proto3 enums.
- Java treats closed enums incorrectly when importing proto3 enums.
- Kotlin treats closed enums incorrectly when importing proto3 enums.
auth_info:
  mentioned_objects: []
client:
  headers:
    Accept: application/json
  base_url: ''
  auth: {}
  paginator: {}
source_metadata: null
