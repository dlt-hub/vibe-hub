resources:
- name: user_groups
  endpoint:
    path: /user-groups
    method: GET
- name: media_access
  endpoint:
    path: /web/media
    method: GET
    params:
      url: '{{ original_media_url }}'
- name: aggregate_query
  endpoint:
    path: /docs/ai-in-reporting
    method: GET
- name: line_list_query
  endpoint:
    path: /docs/ai-in-reporting
    method: GET
- name: subject
  endpoint:
    path: /api/subjects
    method: GET
    data_selector: ''
- name: enrolment
  endpoint:
    path: /api/enrolments
    method: GET
    data_selector: ''
- name: programEncounter
  endpoint:
    path: /api/programEncounters
    method: GET
    data_selector: ''
- name: encounter
  endpoint:
    path: /api/encounters
    method: GET
    data_selector: ''
- name: menu_item
  endpoint:
    path: /menu_item
    method: INSERT
    params:
      organisation_id: '156'
      uuid: uuid_generate_v4()
      is_voided: 'false'
      version: '0'
      created_by_id: '1'
      last_modified_by_id: '1'
      created_date_time: '2022-08-25 11:05:57.791 +00:00'
      display_key: Support
      type: Link
      menu_group: Support
      icon: whatsapp
      link_function: () => "whatsapp://send?phone=+919292929292"
- name: common_mappings
  endpoint:
    path: /mapping_group/mapping_type
    method: GET
    data_selector: mappings
    params: {}
- name: BahmniIdentifierPrefix
  endpoint:
    params:
      default: ''
- name: IntegrationBahmniIdentifierType
- name: IntegrationBahmniProvider
- name: IntegrationBahmniEncounterRole
- name: IntegrationBahmniLocation
- name: IntegrationBahmniVisitType
- name: OutpatientVisitTypes
- name: IntegrationAvniSubjectType
- name: password_hash
  endpoint:
    path: /int/test/passwordHash
    method: POST
    data_selector: null
- name: integration_service_application
  endpoint:
    path: /int/test/passwordHash
    method: POST
    data_selector: ''
- name: tenant_users
  endpoint:
    path: /integration_system
    method: GET
    data_selector: ''
- name: user_insertion
  endpoint:
    path: /users
    method: POST
    data_selector: ''
- name: openmrs
  endpoint:
    path: '{{ dlt.secrets[''OPENMRS_BASE_URL''] }}'
    method: GET
    params:
      user: '{{ dlt.secrets[''OPENMRS_USER''] }}'
      password: '{{ dlt.secrets[''OPENMRS_PASSWORD''] }}'
- name: test_passwordHash
  endpoint:
    path: /int/test/passwordHash
    method: POST
    data_selector: password
- name: upload_subjects
  endpoint:
    path: /docs/bulk-data-upload-v2
    method: POST
- name: upload_program_enrolment
  endpoint:
    path: /docs/bulk-data-upload-v2
    method: POST
- name: upload_program_encounters
  endpoint:
    path: /docs/bulk-data-upload-v2
    method: POST
- name: upload_encounters
  endpoint:
    path: /docs/bulk-data-upload-v2
    method: POST
- name: upload_locations
  endpoint:
    path: /docs/bulk-data-upload-v2
    method: POST
- name: upload_users_and_catchments
  endpoint:
    path: /docs/bulk-data-upload-v2
    method: POST
- name: upload_metadata
  endpoint:
    path: /docs/bulk-data-upload-v2
    method: POST
- name: identifier_source
  endpoint:
    path: /admin/identifier-source
    method: POST
    data_selector: ''
- name: identifier_user_assignment
  endpoint:
    path: /admin/identifier-user-assignment
    method: POST
    data_selector: ''
- name: form_question_id
  endpoint:
    path: /form/question-id
    method: POST
    data_selector: ''
- name: custom_query
  endpoint:
    path: /executeQuery
    method: POST
    data_selector: data
- name: concept
  endpoint:
    path: /concept
    method: GET
    data_selector: .
    params: {}
- name: android_sdk_installation
  endpoint:
    path: /android-studio
    method: GET
- name: android_emulator
  endpoint:
    path: /emulator
    method: GET
- name: avni_android_client
  endpoint:
    path: /avni-client
    method: GET
- name: avni_web_app_setup
  endpoint:
    path: /avni-web-app
    method: GET
- name: keycloak_setup
  endpoint:
    path: /keycloak
    method: GET
- name: draft_save
  endpoint:
    method: GET
- name: reports
  endpoint:
    path: /docs/draft-simplification-of-reports
    method: GET
- name: etl_job_status
  endpoint:
    path: /etl/job/{{orgUUID}}
    method: GET
- name: subject_dashboard
  endpoint:
    path: /appdesigner/extensions
    method: POST
    params:
      subjectUUIDs: subject's uuid
      token: auth token
- name: search_results_page
  endpoint:
    path: /appdesigner/extensions
    method: POST
    params:
      subjectUUIDs: Comma separated list of subjects that have been selected
      token: auth token
- name: splash_screen
  endpoint:
    path: /appdesigner/extensions
    method: POST
    params: {}
- name: fast_sync_setup
  endpoint:
    path: /docs/fast-sync
    method: GET
- name: flavor
  endpoint:
    path: /packages/openchs-android/android/app/src
    method: POST
- name: flavor_config
  endpoint:
    path: /flavor_config.json
    method: GET
- name: flavor_enum_update
  endpoint:
    path: /.circleci/config.yml
    method: PATCH
- name: environment_variables
  endpoint:
    path: /project/{project_slug}/envvar
    method: POST
- name: individual
  endpoint:
    path: /individual
    method: GET
    data_selector: individuals
- name: encounter
  endpoint:
    path: /encounter
    method: GET
    data_selector: encounters
- name: program_enrolment
  endpoint:
    path: /program_enrolment
    method: GET
    data_selector: program_enrolments
- name: program_encounter
  endpoint:
    path: /program_encounter
    method: GET
    data_selector: program_encounters
- name: program_exit
  endpoint:
    path: /program_exit
    method: GET
    data_selector: program_exits
- name: longitudinal_export
  endpoint:
    path: /longitudinal-export
    method: GET
    params:
      date_range: true
      limit: 10000
- name: metabase_tables
  endpoint:
    path: /metabase-tables
    method: GET
- name: custom_query_data
  endpoint:
    path: /custom-query-data
    method: GET
- name: locations
  endpoint:
    method: POST
- name: location_types
  endpoint:
    method: POST
- name: location_types_hierarchy
  endpoint:
    path: /location_types_hierarchy
    method: GET
- name: locations_form
  endpoint:
    path: /forms/location
    method: POST
- name: locations_csv_upload
  endpoint:
    path: /bulk_upload/locations_csv
    method: POST
- name: location_upload
  endpoint:
    method: POST
    params:
      mode:
      - Create
      - Edit
- name: individual
  endpoint:
    method: POST
- name: entity_metadata
  endpoint:
    path: /syncDetails
    method: GET
- name: subject_entities
  endpoint:
    path: /subject/${subjectUUID}/allEntities
    method: GET
- name: subject_migration
  endpoint:
    path: /subjectMigration/bulk
    method: POST
- name: longitudinal_export
  endpoint:
    path: /new-longitudinal-export
    method: POST
    data_selector: ''
    params: {}
- name: individual
  endpoint:
    params:
      timezone: <Specify timezone to adhere while displaying date fields>
      uuid: <Specify Subject Type's UUID>
      fields:
      - id
      - uuid
      - firstName
      - middleName
      - lastName
      - dateOfBirth
      - registrationDate
      - gender
      - createdBy
      - createdDateTime
      - lastModifiedBy
      - lastModifiedDateTime
      - voided
      - registrationLocation
      - concept_uuid
      filters:
        addressLevelIds: <Specify Array of Address Level Ids>
        date:
          from: yyyy-MM-dd
          to: yyyy-MM-dd
        includeVoided: <Specify whether voided fields should be included, Allowed
          values are a. true and b.false >
      encounters:
        uuid: <Specify Encounter Type's UUID>
        fields:
        - id
        - uuid
        - name
        - earliestVisitDateTime
        - maxVisitDateTime
        - encounterDateTime
        - encounterLocation
        - cancelLocation
        - cancelDateTime
        - createdBy
        - createdDateTime
        - lastModifiedBy
        - lastModifiedDateTime
        - Voided
        - concept_uuid
        filters:
          addressLevelIds: <Specify Array of Address Level Ids>
          date:
            from: yyyy-MM-dd
            to: yyyy-MM-dd
          includeVoided: <Specify whether voided fields should be included, Allowed
            values are a. true and b.false >
        maxCount: <Specify maximum count of Encounters to be included in the export>
      groups:
        uuid: <Specify Group Subjectâ€™s UUID>
        fields:
        - id
        - uuid
        - firstName
        - middleName
        - lastName
        - dateOfBirth
        - registrationDate
        - gender
        - createdBy
        - createdDateTime
        - lastModifiedBy
        - lastModifiedDateTime
        - voided
        - registrationLocation
        - concept_uuid
        filters:
          addressLevelIds: <Specify Array of Address Level Ids>
          date:
            from: yyyy-MM-dd
            to: yyyy-MM-dd
          includeVoided: <Specify whether voided fields should be included, Allowed
            values are a. true and b.false >
        maxCount: <Specify maximum count of Group to be included in the export>
        encounters:
          uuid: <Specify Encounter Type's UUID>
          fields:
          - id
          - uuid
          - name
          - earliestVisitDateTime
          - maxVisitDateTime
          - encounterDateTime
          - encounterLocation
          - cancelLocation
          - cancelDateTime
          - createdBy
          - createdDateTime
          - lastModifiedBy
          - lastModifiedDateTime
          - Voided
          - concept_uuid
          filters:
            addressLevelIds: <Specify Array of Address Level Ids>
            date:
              from: yyyy-MM-dd
              to: yyyy-MM-dd
            includeVoided: <Specify whether voided fields should be included, Allowed
              values are a. true and b.false >
      programs:
        uuid: <Specify Program's UUID>
        fields:
        - id
        - uuid
        - name
        - enrolmentDateTime
        - programExitDateTime
        - enrolmentLocation
        - exitLocation
        - createdBy
        - createdDateTime
        - lastModifiedBy
        - lastModifiedDateTime
        - Voided
        - concept_uuid
        filters:
          addressLevelIds: <Specify Array of Address Level Ids>
          date:
            from: yyyy-MM-dd
            to: yyyy-MM-dd
          includeVoided: <Specify whether voided fields should be included, Allowed
            values are a. true and b.false >
        maxCount: <Specify maximum count of Program Enrolment to be included in the
          export>
        encounters:
          uuid: <Specify Encounter Type's UUID>
          fields:
          - id
          - uuid
          - name
          - earliestVisitDateTime
          - maxVisitDateTime
          - encounterDateTime
          - encounterLocation
          - cancelLocation
          - cancelDateTime
          - createdBy
          - createdDateTime
          - lastModifiedBy
          - lastModifiedDateTime
          - Voided
          - concept_uuid
          filters:
            addressLevelIds: <Specify Array of Address Level Ids>
            date:
              from: yyyy-MM-dd
              to: yyyy-MM-dd
            includeVoided: <Specify whether voided fields should be included, Allowed
              values are a. true and b.false >
- name: individual
  endpoint:
    path: /individual
    method: POST
    data_selector: individual
- name: encounters
  endpoint:
    path: /encounters
    method: POST
    data_selector: encounters
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: groups
- name: programs
  endpoint:
    path: /programs
    method: POST
    data_selector: programs
- name: nested_report_card
  endpoint:
    path: /services/data/vXX.X/sobjects/NestedReportCard
    method: GET
    data_selector: reportCards
    params: {}
- name: IdentityManagement_and_Authentication
  endpoint:
    path: /identity-management
    method: POST
- name: Routing
  endpoint:
    path: /routing
    method: POST
- name: Storage
  endpoint:
    path: /storage
    method: POST
- name: realm
  endpoint:
    path: /auth/admin/realms
    method: GET
    data_selector: realms
- name: organisation_config
  endpoint:
    path: /public/organisation_config
    method: UPDATE
    data_selector: settings
    params:
      languages:
      - en
      useKeycloakAsIDP: true
      useMinioForStorage: true
- name: organisation_group
  endpoint:
    path: /organisation-group
    method: GET
- name: analytics_control
  endpoint:
    path: /docs/recreate-etl-schema-for-an-implementation
    method: GET
- name: avni-server
  endpoint:
    method: GET
- name: avni-webapp
  endpoint:
    method: GET
- name: rules-server
  endpoint:
    method: GET
- name: avni-client
  endpoint:
    method: GET
- name: release_prod_all_flavors
  endpoint:
    path: /services/data/v3.5.1/sobjects/release_prod_all_flavors
    method: POST
    params:
      versionName: 3.5.1
      versionCode: '30501'
- name: deploy_platform_translations_for_flavor_live
  endpoint:
    path: /services/data/v3.5.1/sobjects/deploy_platform_translations_for_flavor_live
    method: POST
    params:
      flavor: lfe
- name: metabase
  endpoint:
    path: /
    method: GET
- name: jasper_reports
  endpoint:
    path: /jasperserver/login.html
    method: GET
- name: superset
  endpoint:
    path: /
    method: GET
- name: reporting_view
  endpoint:
    path: /Reporting Views
    method: GET
- name: rules
  endpoint:
    path: /docs/rules-concept-guide
    method: GET
- name: avni_server
  endpoint:
    path: /admin/user/6352/show
    method: GET
- name: avni_client
  endpoint:
    path: /release_prerelease_without_clean/upload-prerelease-apk
    method: POST
- name: subject_types
  endpoint:
    path: /subject-types
    method: GET
- name: sync
  endpoint:
    method: GET
    params:
      incremental: true
- name: sync_strategy
  endpoint:
    path: /sync-strategies
    method: GET
- name: concepts
  endpoint:
    path: /concept
    method: GET
- name: cognito_user_pool
  endpoint:
    path: /identitypools
    method: POST
    data_selector: UserPool
- name: s3_bucket
  endpoint:
    path: /s3/{bucket_name}
    method: POST
    data_selector: Bucket
- name: IAM
  endpoint:
    method: GET
- name: Cognito
  endpoint:
    method: GET
- name: S3
  endpoint:
    method: GET
- name: avni_server
  endpoint:
    path: /concept
    method: GET
- name: avni_android_app
  endpoint:
    path: /avni-client
    method: GET
- name: avni_administration_web_app
  endpoint:
    path: /avni-webapp
    method: GET
- name: avni_rules_server
  endpoint:
    path: /rules-server
    method: GET
- name: translations
  endpoint:
    method: GET
- name: checklist
  endpoint:
    path: /checklist
    method: POST
    data_selector: items
- name: item
  endpoint:
    path: /items
    method: POST
    data_selector: items
- name: subjects
  endpoint:
    path: /admin/upload
    method: POST
- name: program_enrolment
  endpoint:
    path: /admin/upload
    method: POST
- name: program_encounters
  endpoint:
    path: /admin/upload
    method: POST
- name: encounters
  endpoint:
    path: /admin/upload
    method: POST
- name: locations
  endpoint:
    path: /admin/upload
    method: POST
- name: users_and_catchments
  endpoint:
    path: /admin/upload
    method: POST
- name: metadata_zip
  endpoint:
    path: /admin/upload
    method: POST
- name: user_groups
  endpoint:
    path: /user-groups
    method: GET
- name: create_group
  endpoint:
    path: /create-group
    method: POST
- name: configure_group_users
  endpoint:
    path: /configure-group-users
    method: POST
- name: configure_group_permissions
  endpoint:
    path: /configure-group-permissions
    method: POST
- name: configure_group_dashboards
  endpoint:
    path: /configure-group-dashboards
    method: POST
- name: user_subject_types
  endpoint:
    path: /user-subject-types
    method: GET
- name: send_message_on_trigger
  endpoint:
    method: POST
    params:
      shouldSend: false
- name: rules
  endpoint:
    path: /rules
    method: GET
    data_selector: rules
- name: summary concept
  endpoint:
    params:
      entity: {}
      user: {}
      myUserGroups: {}
- name: visit_schedule
  endpoint:
    path: /visit-schedule
    method: POST
    data_selector: visit_schedule_object
    params:
      visitCreationStrategy: createNew
- name: Subject Summary Rule
  endpoint:
    path: /subject-registration
    method: GET
    params:
      scope: Subject registration
      trigger: Before the opening of the subject dashboard profile tab
      designer: Subject (Subject Summary Rule)
- name: Hyperlink Menu Item Rule
  endpoint:
    path: /user-navigation
    method: GET
    params:
      scope: User
      trigger: When More navigation is opened in the mobile app
      designer: Coming very soon...
- name: Message Rule
  endpoint:
    path: /messaging-config
    method: GET
    params:
      scope: User, Subject, General and Program Encounter, Program Enrolment
      trigger: 'For User: Only on creation of an User. For Subject, General and Program
        Encounter, Program Enrolment: On every save (create / update)'
      designer: User Messaging Config, Subject Type, Encounter type and Programs page
notes:
- Access control checks are applied during the construction of the entity response
  graph to avoid semantically duplicated checks later.
- Access control service checks for user's presence; no use of @PreAuthorise methods
  that only check for PrivilegeType without an entity id.
- Non-transaction data read is not controlled by Preauthorise which is only for the
  user role.
- Null checks on entity type are centralized within the access control service to
  ensure security.
- Access control is not currently applied on endpoints that save data from the mobile
  app; planned for future implementation.
- Difficult to perform access checks on search requests; basic details for entities
  matching search criteria are visible to all users.
- Access checks are done for each entity in some scenarios, especially where optimizing
  the number of checks is feasible.
- Non-operational data is open to all users with read access
- Super admin access restricted to non-operational data only
- Avni uses AWS Cognito for authentication.
- Integration uses OpenMRS API, not Bahmni directly
- Mapping screens in admin app are read-only due to enum-based integration logic
- Atom feeds are used for Avni Bahmni integration; integration halts at first failed
  event
- Avni client is developed using ReactNative, NativeBase, RealmJS, and Redux; focuses
  on mobile app development
- Uses Redux for state management with synchronous dispatches
- Realm DB operations are synchronous
- Follows DDD principles for modeling and service interaction
- Cannot use JS spread operator in model objects
- Cannot use Object.keys on model objects
- Limitations with lodash on array mutation functions
- Integration service doesn't use Cognito or Keycloak for authentication yet
- Configuration is managed via system environment variables
- Uses basic authentication for each integration endpoint
- Requires database configuration for integration service application
- Specific migration scripts must be followed per system to avoid integration update
  issues
- Integration requires environment-specific configuration for multiple systems.
- Default paths and ports are configurable and should be checked in the provided GitHub
  repository link.
- Integration service does not use OAuth or other third-party identity providers like
  Cognito or Keycloak yet.
- All configurations for the integration service are managed via system environment
  variables.
- Database and server port configurations are stored and managed in the system environment
  variables.
- Limited Concept Support in CSV Upload; not all concepts are supported when uploading
  data via CSV
- Id Confusion; identifiers used in 'Id from previous system' are different from Id
  elements in the form
- Form Data Editing; Editing previously submitted form data is not currently supported
  through the CSV upload process
- No rules are run as part of CSV upload; manual upload of columns created by rules
  is necessary
- Limited concept support in CSV Upload; GroupAffiliation, Id, and File concepts not
  supported
- Editing previously submitted form data through CSV upload is not supported
- Multitenancy is implemented using row-level security policies
- OTP verification requires setup of msg91 Auth key and Template
- All properties must always be defined in the module's main properties file
- Use spring.config.import to include properties files in dependent modules
- Secrets should be maintained in password managers and managed via a secret properties
  file that is git ignored
- Cannot debug the errors that happen on start-up of the app as by the time one attaches
  the Flipper the application may have crossed the code that one may be interested
  in debugging
- Authentication against external systems like Cognito User Pools or Keycloak
- Developer environments bypass authentication which might lead to shared data issues
  among developers
- Install Android Studio using Homebrew
- Set ANDROID_HOME and ANDROID_SDK_ROOT environment variables
- Use nvm for node version management in Avni projects
- Configure pyenv and install specific Python versions
- Draft saves are not synced to the server immediately
- Drafts automatically deleted after 30 days of inactivity
- Document is in draft stage and subject to changes
- No explicit API data available; content is from a community FAQ page.
- Fast sync is set up for a catchment and does not update automatically.
- Fast sync is triggered only when the user is syncing for the first time.
- If there are restrictions due to Sync-Concept-Values or UserGroup Privileges, fast
  sync might not work effectively for all users.
- Changes in catchment constituent locations after setting up fast sync require a
  'Reset Sync' for all associated users.
- No easy way to remove 'Fast Sync' setup, requires over-writing with a new file or
  contacting support.
- Flavor naming should use camelCase according to Android documentation standards.
- Logo file must be in png format for proper display and animation.
- Requires manual setup of environment variables per circle-ci documentation
- Specific permissions like com.google.android.gms.permission.AD_ID are needed for
  Firebase Analytics in Google Play Store
- Recommended to perform downloads after 6 pm to avoid impacting other reporting operations
- Requires internet connectivity for data sync
- Default language is English
- User ID and Password are sent via SMS once user is created in Avni Web Console
- Uses bulk upload via CSV for locations and location types setup
- Supports multiple location type hierarchies within a single organization
- Sync process involves complex interactions like permissions changes, beneficiary
  migrations, and requires complete resync for changes in catchment
- Manually updating database to fix visit schedules is not recommended
- Using support API; bulk uploads are better option than direct database updates
- Ensure database updates SQL is checked in another environment and end to end testing
  has been done after the update
- For transaction data last modified date time should be modified incrementally
- If the number of rows updated exceed 10000 records; consider going for downtime
- Use data-fixes Github project for SQL scripts
- Disable ETL before executing updates if enabled and re-enable after updates are
  committed
- Always run sql script within manual transaction in production; verify counts and
  commit only if changed count is as expected
- For smaller number of rows but with concurrency; consider using "Select for update"
  or higher transaction isolation level
- Multitenancy implemented using row-level security (RLS)
- Users need to sync the app for getting any of the above changes
- Limit of maximum of 10,000 Individuals data per export request
- Opting between Cognito or Keycloak for IdentityManagement and S3 or Minio for Storage
  management is a one-time choice; switching may cause access/data loss.
- SSL termination not recommended; use TLS to prevent unencrypted passwords on internal
  networks
- Ensure to provide an FQDN or an IP for the keycloak instance to work properly with
  react-native in dev mode
- Ensure that Minio is configured with 'ap-south-1' as the Region
- SSL certificates are applied to Minio server
- Minio server redirects are configured through environment variables
- Minio is started with specific command options for server and console addresses
- Should not be used when the number of partner organisations can grow a large number
  over time.
- Warning: If any migration is failing or taking too long make sure to fix the issue
    and please don't manually make the server skip a migration. Skipped migration
    will result in headache during the prod release.
- Warning: If you miss out deploying any implementation then you lose the chance to
    catch errors that may come during prod release.
- Right now, the make task to stop/destroy pre-release env, in infra code base is
  not fully functional. So terminate EC2 and delete prerelease db from RDS. Be careful
  while doing it.
- ETL enabling/disabling and job scheduling are managed via API calls from the webapp
- ETL schema recreation does not include reporting views generation
- Specific SQL commands are provided for schema and data cleanup
- Triggering a pipeline can only be done on HEAD of a branch; for previous commits,
  a new branch is required.
- AAB file may download in .zip format; rename to .aab before uploading to Google
  Play Store.
- Supports various reporting tools including Metabase, Superset, and Jasper Reports
  via web access
- PostgreSQL doesn't allow identifiers longer than 63 bytes; names are trimmed or
  hashed for uniqueness.
- Avni rules are JavaScript functions that don't maintain state across invocations.
- Rules can access all data of the subject and logically linked data.
- Self-Service Reports setup can take 15-30 minutes
- Setup may complete partially; retry setup or wait for automatic completion
- Ensure EC2 instance type is 't3.small' with auto-assign public IP enabled.
- Use 't4g.small' type instance for RDS with 20GB GP2 storage and disable system backups.
- Never copy S3 content especially Fast-sync files from Production to any other environment
  to avoid unintentional connection to Production.
- Update packages and install node and pm2 on Amazon linux
- Specific steps to set up prerelease environment before bugbash
- Avni works completely in offline mode except during login and sync
- Auto sync uploads data every hour and downloads data every 12 hours
- Battery usage concerns with auto sync; depends on internet quality and data amount
- Starting August 2024, sync strategy is respected for updates made via DEA
- DEA users restricted from creating/updating entities not matching their sync settings
- Override available to ignore sync registration concepts in updates via DEA
- Sync can be automated or manual on the Android app
- Server requires Ubuntu Linux 22.04 or higher for production environments
- OpenCHS prefixed configuration indicates server specific settings
- Avni uses AWS Cognito for authentication and user management
- S3 is used for storage of images, videos, and data exports
- IAM policies must be configured to allow Avni to interact with Cognito and S3
- Avni uses Ubuntu Linux 22.04 or upwards for production environments
- S3 is used only if implementations require photo or video capture
- Requires manual configuration for server URL in the staging JSON file for the Android
  app build
- Requires environment variables for running the rules server with pm2
- Avni supports translation of data-collection forms to native languages
- Translations management is accessible via the Admin web interface
- Ensure that placeholders like "{{limit}}" and "{{programName}}" are retained in
  their original form during translation
- Checklist and items must be created as 'concepts' before uploading.
- Only single checklist supported; uuid should not change after initial save.
- Testing involves changing device date to future; do not edit birth date in profile.
- CSV upload is validated against mandatory fields and form rules.
- Duplicate records are avoided by using a unique "Id" identifier.
- Observations can include additional concepts by adding them in the file header.
- Images should be directly downloadable URLs ending with the image type.
- Avni allows adding media like data (image and video) in forms with support varying
  by Android version and media selection type.
- Multi-select is not supported in Android versions lower than 13.0 due to restrictions
  by the react native library.
- Workaround for media in non-showing folders involves setting up Google Photos backup
  or moving the folder to a recognized album location.
- Significant development work is required for custom media picker similar to apps
  like Dropbox or Facebook.
- Once a User type SubjectType is created, it cannot be modified by Administrators
- User type Subjects sync only to their corresponding User
- Registration of User type SubjectTypes can be disabled on client by administrators
- Users cannot use 'Subject Search' to access User type Subjects on the Client
- Configuration requires direct database access to set API connection details
- Messaging setup requires marking a form field as a phone number
- Only the latest 100 messages are fetched due to performance constraints
- Background job for sending messages runs every 5 minutes
- Messages older than 4 days are not retried
- Rules stored in the rules table will become obsolete by the end of 2024
errors:
- (no specific error codes or messages provided)
- ConnectionError: Check if AVNI_INT_SERVER_PORT is correctly configured and server
    is reachable
- 401 Unauthorized: Check if the user credentials for the API are correct and have
    sufficient privileges.
- No specific error patterns documented for handling API or database errors.
- 401 Unauthorized: Recheck OAuth scopes or token expiration
- Installation errors: Follow specific installation steps for tools like Android Studio,
    nvm, and pyenv
- Performance impact warning: Download operations may become metered in the future
    if they impact the reporting database performance
- NETWORK_TIMEOUT: Ignore errors caused by network issues
- SOCKET_TIMEOUT: Ignore errors caused by network issues
- CONFIGURATION_ERROR: Treat as normal error
- 401: Not logged in
- 403: You have performed an unauthorised operation
- 408: Server took very long to respond, or your network broke in between
- 429: Server is busy or unavailable
- 503: Server is busy or unavailable
- 504: Server is busy or unavailable
- 3XX: Unknown Error Happened
- 4XX: Unknown Error Happened
- 5XX: Unknown Error Happened
- 401 Unauthorized: Check OAuth configurations and token validity
- 401 Unauthorized: Check client credentials and realm settings
- SSL_ERROR: Check SSL certificates and paths if Minio server fails to start securely
- Clash in table names: Ensure first six characters are unique where applicable
- REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency
- QUERY_TIMEOUT: Break down filters or add selectivity
- If AAB file downloads in .zip format, rename to .aab to ensure correct format for
  Google Play Store.
- PERMISSION_DENIED: Operation not permitted when changing permissions, ensure proper
    user rights.
- IAM_POLICY_ERROR: Ensure IAM policies are correctly set up to include necessary
    permissions
- AWS_ACCESS_DENIED: Ensure IAM policies are correctly set
- COGNITO_SETUP_ERROR: Verify Cognito user pool and app client configurations
- Build failure: Check the correct node version and dependencies are installed
- Connection failure: Ensure correct server URL and secure HTTP connections
- mandatory field cannot be empty: Ensures all required fields in CSV are filled.
- 401 Unauthorized: Check API credentials or token expiration
- Invalid phone number or insufficient parameters can prevent message delivery
auth_info:
  mentioned_objects:
  - super admin
  - user privileges
  - User Authentication
  - AWS Cognito
  - User role in Avni Admin web app
  - Realm.Object
  - RealmResults
  - RealmList
  - RealmProxy
  - RealmResultsProxy
  - RealmListProxy
  - AVNI_INT_DB_USER
  - AVNI_INT_DB_PASSWORD
  - BAHMNI_AVNI_API_USER
  - BAHMNI_AVNI_API_PASSWORD
  - OPENMRS_USER
  - OPENMRS_PASSWORD
  - JWT tokens
  - Identity Server
  - Auth key
  - Template
  - OAuthToken
  - Cognito User Pools
  - Keycloak
  - Avni Admin Users
  - LocationTypes
  - LocationForm
  - Idempotent POST Apis
  - organisation table
  - database role
  - KeyCloak
  - Admin-api client
  - PostgreSQL
  - Database
  - UserGroup
  - AWS IAM
  - Cognito
  - IAM
  - S3
  - upload-user
  - User Groups
  - Permissions
  - external_system_config
  - UserInfo
  - Groups
client:
  auth:
    location: header
    type: AWS Cognito
    header_name: auth-token
    client_id: '{{ dlt.secrets[''BAHMNI_AVNI_API_USER''] }}'
    client_secret: '{{ dlt.secrets[''BAHMNI_AVNI_API_PASSWORD''] }}'
    flow: refresh_token
    token_url: https://cognito-idp.{region}.amazonaws.com/{user_pool_id}/.well-known/openid-configuration
  base_url: https://app.avniproject.org
  paginator:
    type: page
    page_size_param: pageSize
    default_page_size: 100
  headers:
    Accept: application/json
    Content-Type: application/json
    AUTH-TOKEN: '{{ dlt.secrets[''auth_token''] }}'
    auth-token: '{{ dlt.secrets[''auth_token''] }}'
    phone: '{{ dlt.secrets[''Login_for_API''] }}'
    password: '{{ dlt.secrets[''Password_for_API''] }}'
source_metadata: null
