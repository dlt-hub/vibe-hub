resources:
- name: web_hooks
  endpoint:
    path: /app/organization/{organization_id}/web_hooks
    method: POST
    data_selector: web_hooks
    params: {}
- name: conversation
  endpoint:
    path: /conversations/{id}
    method: GET
    data_selector: Conversation
    params:
      id: integer
- name: file
  endpoint:
    path: /files/{id}
    method: GET
    data_selector: File
    params:
      id: integer
- name: group_invitation
  endpoint:
    path: /invitations
    method: POST
    data_selector: User
    params:
      organization_id: integer
      email: string
      project_id: integer
- name: notification
  endpoint:
    path: /notifications/{id}
    method: GET
    data_selector: notification
    params:
      id: integer
- name: organization_list
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params:
      order: id-DESC
      per_page: '1000'
      page: '1'
- name: people_list
  endpoint:
    path: /people
    method: GET
    data_selector: people
    params:
      order: id-DESC
      per_page: '1000'
      page: '1'
- name: conversation
  endpoint:
    path: /api/3/conversations
    method: GET
    data_selector: '[]'
- name: comment
  endpoint:
    path: /api/3/comments
    method: POST
    data_selector: '{}'
- name: note_list
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
    params:
      order: id-DESC
      per_page: 1000
      page: 1
- name: user_information
  endpoint:
    path: /user
    method: GET
    data_selector: type
    params: {}
- name: membership_list
  endpoint:
    path: /memberships
    method: GET
    data_selector: type
    params: {}
- name: create_membership
  endpoint:
    path: /memberships
    method: POST
    data_selector: type
    params: {}
- name: modify_membership
  endpoint:
    path: /memberships/{id}
    method: PUT
    data_selector: type
    params: {}
- name: delete_membership
  endpoint:
    path: /memberships/{id}
    method: DELETE
    data_selector: error
    params: {}
- name: TaskList
  endpoint:
    path: /tasklists
    method: GET
    data_selector: body
    params:
      order: id-DESC
      per_page: 1000
      page: 1
      organization_id: null
      project_id: null
      user_id: null
      archived: null
- name: Task
  endpoint:
    path: /tasks
    method: GET
    data_selector: body
    params:
      order: id-DESC
      per_page: 1000
      page: 1
      organization_id: null
      project_id: null
      task_list_id: null
      user_id: null
      assigned_user_id: null
      assigned: null
      archived: null
      created_from: null
      created_to: null
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params:
      order: id-DESC
      per_page: 1000
      page: 1
- name: project
  endpoint:
    path: /projects/{id}
    method: GET
    data_selector: project
    params:
      id: required
- name: create_project
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params:
      organization_id: required
      name: required
      publish_pages: required
- name: update_project
  endpoint:
    path: /projects/{id}
    method: PUT
    data_selector: project
    params:
      id: required
      organization_id: required
      name: required
      include_weekend_days: optional
      publish_pages: required
- name: delete_project
  endpoint:
    path: /projects/{id}
    method: DELETE
    data_selector: project
    params:
      id: required
- name: conversation
  endpoint:
    path: /conversations/{id}
    method: GET
    data_selector: records
    params:
      id: integer
- name: file
  endpoint:
    path: /files/{id}
    method: GET
    data_selector: records
    params:
      id: integer
- name: group_invitation
  endpoint:
    path: /invitations
    method: POST
    data_selector: records
    params:
      organization_id: integer
      email: string
      project_id: integer
- name: conversation
  endpoint:
    path: /api/3/conversations
    method: GET
    params:
      order: id-DESC
      per_page: 1000
      page: 1
- name: comment
  endpoint:
    path: /api/3/comments
    method: POST
    data_selector: body
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: '[*]'
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: '[*]'
    params: {}
- name: user_info
  endpoint:
    path: /user/info
    method: GET
    data_selector: type
    params: {}
- name: membership_list
  endpoint:
    path: /user/memberships
    method: GET
    data_selector: type
    params:
      order: id-DESC
      per_page: 1000
      page: 1
- name: create_membership
  endpoint:
    path: /memberships
    method: POST
    data_selector: type
    params: {}
- name: modify_membership
  endpoint:
    path: /memberships/{id}
    method: PUT
    data_selector: type
    params: {}
- name: delete_membership
  endpoint:
    path: /memberships/{id}
    method: DELETE
    data_selector: error
    params: {}
- name: organization_list
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params:
      order: id-DESC
      per_page: 1000
      page: 1
- name: people_list
  endpoint:
    path: /people
    method: GET
    data_selector: people
    params:
      order: id-DESC
      per_page: 1000
      page: 1
- name: TaskList
  endpoint:
    path: /tasklists
    method: GET
    data_selector: '[]'
    params:
      order: id-DESC
      per_page: 1000
      page: 1
- name: Task
  endpoint:
    path: /tasks
    method: GET
    data_selector: '[]'
    params:
      order: id-DESC
      per_page: 1000
      page: 1
- name: project_list
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params:
      order: id-DESC
      per_page: 1000
      page: 1
- name: project
  endpoint:
    path: /projects/{id}
    method: GET
    data_selector: project
    params:
      id: required
- name: create_project
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params:
      organization_id: required
      name: required
      tracks_time: 'false'
      public: 'true'
      publish_pages: 'false'
- name: modify_project
  endpoint:
    path: /projects/{id}
    method: PUT
    data_selector: project
    params:
      id: required
      organization_id: required
      name: required
      tracks_time: 'false'
      public: 'true'
      include_weekend_days: 'false'
      publish_pages: 'false'
- name: delete_project
  endpoint:
    path: /projects/{id}
    method: DELETE
    data_selector: result
    params:
      id: required
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params:
      order: id-DESC
      per_page: 1000
      page: 1
      project_id: optional
      type: optional
      query: optional
- name: web_hooks
  endpoint:
    path: /app/organization/{organization_id}/web_hooks
    method: POST
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: user_information
  endpoint:
    path: /users
    method: GET
    data_selector: user
    params: {}
- name: membership_list
  endpoint:
    path: /memberships
    method: GET
    data_selector: memberships
    params:
      order: id-DESC
      per_page: 1000
      page: 1
- name: conversation
  endpoint:
    path: /api/3/conversations
    method: GET
    data_selector: '[{}]'
    params:
      order: id-DESC
      organization_id: null
      project_id: null
      page: 1
      per_page: 1000
- name: comment
  endpoint:
    path: /api/3/comments
    method: POST
    data_selector: '[{}]'
    params:
      target_id: null
      target_type: null
      body: null
      minutes: null
      time_tracking_on: null
- name: notification
  endpoint:
    path: /notifications/{id}
    method: GET
    data_selector: notification
    params:
      id: integer
- name: organization_list
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params:
      order: id-DESC
      per_page: 1000
      page: 1
- name: people_list
  endpoint:
    path: /people
    method: GET
    data_selector: people
    params:
      order: id-DESC
      per_page: 1000
      page: 1
- name: conversation
  endpoint:
    path: /conversations/{id}
    method: GET
    data_selector: records
    params:
      id: integer
- name: file
  endpoint:
    path: /files/{id}
    method: GET
    data_selector: records
    params:
      id: integer
- name: group_invitation
  endpoint:
    path: /invitations
    method: POST
    data_selector: user
    params:
      organization_id: integer
      email: string
      project_id: integer
- name: task_list
  endpoint:
    path: /tasklists
    method: GET
    data_selector: data
    params:
      per_page: 1000
      page: 1
      order: id-DESC
- name: task
  endpoint:
    path: /tasks
    method: GET
    data_selector: data
    params:
      per_page: 1000
      page: 1
      order: id-DESC
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params:
      order: id-DESC
      per_page: 1000
      page: 1
- name: project
  endpoint:
    path: /projects/{id}
    method: GET
    data_selector: project
    params:
      id: required
- name: create_project
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params:
      organization_id: required
      name: required
      tracks_time: false
      public: true
      publish_pages: false
- name: update_project
  endpoint:
    path: /projects/{id}
    method: PUT
    data_selector: project
    params:
      id: required
      organization_id: required
      name: required
      tracks_time: false
      public: true
      include_weekend_days: false
      publish_pages: false
- name: delete_project
  endpoint:
    path: /projects/{id}
    method: DELETE
    data_selector: project
    params:
      id: required
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params:
      order: id-DESC
      per_page: 1000
      page: 1
      project_id: optional
      type: optional
      query: optional
- name: subtasks_list
  endpoint:
    path: /tasks/{task_id}/subtasks
    method: GET
    data_selector: subtasks
    params:
      task_id: required
      order: id-DESC
      per_page: 1000
      page: 1
- name: create_subtask
  endpoint:
    path: /subtasks
    method: POST
    data_selector: subtask
    params:
      task_id: required
      name: required
      resolved: false
      position: optional
- name: update_subtask
  endpoint:
    path: /subtasks/{id}
    method: PUT
    data_selector: subtask
    params:
      id: required
      task_id: required
      name: required
      resolved: false
      position: optional
- name: delete_subtask
  endpoint:
    path: /subtasks/{id}
    method: DELETE
    data_selector: subtask
    params:
      id: required
- name: tasks
  endpoint:
    path: /tasks
    method: POST
    data_selector: id
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: POST
    data_selector: id
    params: {}
- name: task_lists
  endpoint:
    path: /task_lists
    method: POST
    data_selector: id
    params: {}
notes:
- Web hooks are only available for tasks for the moment
- Ensure the introduced URL exists and is valid
- Tokens expire every 7200 seconds, two hours.
- Uses OAuth2 with refresh token — requires setup of connected app in Redbooth
errors:
- '403 Insufficient authorization: Non authorized adventurers will get this message'
- '404 Not Found: You will get this when an element is deleted'
- '401 Unauthorized: The access token expired'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: You don''t have the rights to make that invitation. If you are
  about to consume seats be sure you are the organization''s admin.'
- '402 Payment required: You''ve used all your seats, upgrade to invite more people
  to the organization.'
- '404 Not Found: No organization found with the given id'
- '200 OK: Successful request.'
- '202 Created: Successfully created element.'
- '400 BadRequest: Invalid format.'
- '422 UnprocessableEntity: The request is understood but can’t be processed because
  of a conflict or similar.'
- '404 NotFound: No elements found with the given information.'
- '401 Unauthorized: Your credentials don’t allow you to access this information or
  have expired.'
- '304 NotModified: The information hosted in your cache is updated, nothing has changed
  since your last call.'
- '403 AccessDenied: The request is understood but has been refused.'
- 500 Internal Server Error
- '404 Not Found: No user found with the given id'
- '422 Unprocessable Entity: The request was well-formed but was unable to be followed
  due to semantic errors'
- '404 Not Found: No project found with the given id'
- 200 OK
- 401 Unauthorized
- 404 NotFound
- 422 UnprocessableEntity
- '404: User not found'
- '422: Unprocessable Entity'
- '401 Unauthorized: Recheck your token or authentication setup'
- '404 Not Found: Check the provided id for existence'
- '422 Unprocessable Entity: Check parameters for validity'
- '404 Not Found: Resource does not exist'
- '404 Not Found: When an element is deleted'
- 200 OK - Successful request.
- 202 Created - Successfully created element.
- 400 BadRequest - Invalid format.
- 422 UnprocessableEntity - The request is understood but can’t be processed because
  of a conflict or similar.
- 404 NotFound - No elements found with the given information.
- 401 Unauthorized - Your credentials don’t allow you to access this information or
  have expired.
- 304 NotModified - The information hosted in your cache is updated, nothing has changed
  since your last call.
- 403 AccessDenied - The request is understood but has been refused. It usually means
  that you are not allowed to perform this action due to insufficient authorization.
- '401 Unauthorized: Recheck authentication'
- '404 Not Found: Check the provided ID'
- '401 Unauthorized: Recheck authentication credentials'
- '422 Unprocessable Entity: Check the request body for missing required fields'
- '404 Not Found: The requested resource could not be found'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://redbooth.com/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  base_url: https://redbooth.com
  headers:
    Content-Type: application/json
    Accept: application/json
  paginator:
    type: page
    page_param: page
    per_page_param: per_page
    default_page_size: 1000
    page_size_param: per_page
source_metadata: null
