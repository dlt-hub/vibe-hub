resources:
- name: task
  endpoint:
    path: /v2/actor-tasks/:actorTaskId
    method: DELETE
- name: task_input
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/input
    method: GET
- name: request_queue
  endpoint:
    path: /v2/request-queues/:queueId
    method: PUT
- name: request_queue
  endpoint:
    path: /v2/request-queues/:queueId
    method: DELETE
- name: run_actor
  endpoint:
    path: /acts/[actor_id]/runs
    method: POST
    data_selector: data
    params: {}
- name: keys
  endpoint:
    path: /v2/key-value-stores/:storeId/keys
    method: GET
    data_selector: keys
    params: {}
- name: webhooks
  endpoint:
    path: /v2/webhooks
    method: GET
    data_selector: webhooks
    params: {}
- name: actors
  endpoint:
    path: /store
    method: GET
- name: index
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: add_url
  endpoint:
    path: /add-url
    method: POST
    data_selector: ''
    params: {}
- name: run_actor
  endpoint:
    path: /acts/compass~crawler-google-places/runs
    method: POST
    data_selector: items
    params: {}
- name: actor
  endpoint:
    path: /actor
    method: GET
    data_selector: records
- name: actors
  endpoint:
    path: /actors
    method: GET
    data_selector: actors
    params: {}
- name: actor_runs
  endpoint:
    path: /runs
    method: GET
    data_selector: runs
    params: {}
- name: actor_builds
  endpoint:
    path: /builds
    method: GET
    data_selector: builds
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
- name: key-value-stores
  endpoint:
    path: /key-value-stores
    method: GET
- name: request-queues
  endpoint:
    path: /request-queues
    method: GET
- name: tasks
  endpoint:
    path: /tasks
    method: GET
- name: user
  endpoint:
    path: /v2/users/me
    method: GET
- name: run_sync_actor
  endpoint:
    path: /v2/acts/:actorId/run-sync
    method: POST
- name: run_async_actor
  endpoint:
    path: /v2/acts/:actorId/runs
    method: POST
- name: retrieve_dataset_items
  endpoint:
    path: /v2/datasets/:datasetId/items
    method: GET
- name: retrieve_key_value_store_record
  endpoint:
    path: /v2/key-value-stores/:storeId/records/:recordKey
    method: GET
- name: get_log
  endpoint:
    path: /v2/logs/:buildOrRunId
    method: GET
- name: monitor_run_status
  endpoint:
    path: /v2/actor-runs/:runId
    method: GET
- name: store_data_in_dataset
  endpoint:
    path: /v2/datasets/:datasetId/items
    method: POST
- name: store_data_in_key_value_store
  endpoint:
    path: /v2/key-value-stores/:storeId/records/:recordKey
    method: PUT
- name: list_actors
  endpoint:
    path: /acts
    method: GET
- name: create_actor
  endpoint:
    path: /acts
    method: POST
- name: get_actor
  endpoint:
    path: /acts/{actorId}
    method: GET
- name: update_actor
  endpoint:
    path: /acts/{actorId}
    method: PUT
- name: delete_actor
  endpoint:
    path: /acts/{actorId}
    method: DELETE
- name: actors
  endpoint:
    path: /acts
    method: GET
    data_selector: records
    params:
      my: '1'
- name: create_actor
  endpoint:
    path: /v2/acts
    method: POST
    data_selector: Actor
    params: {}
- name: actor
  endpoint:
    path: /v2/acts/:actorId
    method: GET
- name: Update Actor
  endpoint:
    path: /v2/acts/:actorId
    method: PUT
    data_selector: full Actor object
    params: {}
- name: actor
  endpoint:
    path: /v2/acts/:actorId
    method: DELETE
- name: get_list_of_versions
  endpoint:
    path: /acts/{actorId}/versions
    method: GET
- name: create_version
  endpoint:
    path: /acts/{actorId}/versions
    method: POST
- name: get_version
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}
    method: GET
- name: update_version
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}
    method: PUT
- name: delete_version
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}
    method: DELETE
- name: get_list_of_environment_variables
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}/env-vars
    method: GET
- name: create_environment_variable
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}/env-vars
    method: POST
- name: get_environment_variable
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}/env-vars/{envVarName}
    method: GET
- name: update_environment_variable
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}/env-vars/{envVarName}
    method: PUT
- name: delete_environment_variable
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}/env-vars/{envVarName}
    method: DELETE
- name: versions
  endpoint:
    path: /v2/acts/:actorId/versions
    method: GET
    data_selector: Version
    params: {}
- name: create_version
  endpoint:
    path: /v2/acts/:actorId/versions
    method: POST
    data_selector: Version object
    params:
      versionNumber: '0.1'
      sourceType: GIT_REPO
      gitRepoUrl: https://github.com/my-github-account/actor-repo
- name: update_version
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber
    method: PUT
    data_selector: Version
    params: {}
- name: Delete version
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber
    method: DELETE
- name: env_vars
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber/env-vars
    method: GET
- name: env_var
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber/env-vars
    method: POST
    data_selector: EnvVar
    params: {}
- name: update_environment_variable
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber/env-vars/:envVarName
    method: PUT
    data_selector: EnvVar
    params: {}
- name: environment_variable
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber/env-vars/:envVarName
    method: DELETE
- name: list_of_builds
  endpoint:
    path: /acts/{actorId}/builds
    method: GET
- name: build_actor
  endpoint:
    path: /acts/{actorId}/builds
    method: POST
- name: default_build
  endpoint:
    path: /acts/{actorId}/builds/default
    method: GET
- name: get_openapi_definition
  endpoint:
    path: /acts/{actorId}/builds/{buildId}/openapi.json
    method: GET
- name: get_build
  endpoint:
    path: /acts/{actorId}/builds/{buildId}
    method: GET
- name: abort_build
  endpoint:
    path: /acts/{actorId}/builds/{buildId}/abort
    method: POST
- name: builds
  endpoint:
    path: /v2/acts/:actorId/builds
    method: GET
    data_selector: objects
    params:
      limit: '1000'
      offset: ''
- name: ClientsBuilds
  endpoint:
    path: /v2/acts/:actorId/builds
    method: POST
- name: default_build
  endpoint:
    path: /v2/acts/:actorId/builds/default
    method: GET
- name: actor_build_openapi
  endpoint:
    path: /v2/acts/:actorId/builds/:buildId/openapi.json
    method: GET
    data_selector: null
    params: {}
- name: build
  endpoint:
    path: /v2/acts/:actorId/builds/:buildId
    method: GET
- name: abort_build
  endpoint:
    path: /v2/acts/:actorId/builds/:buildId/abort
    method: POST
- name: get_list_of_runs
  endpoint:
    path: /acts/{actorId}/runs
    method: GET
- name: run_actor
  endpoint:
    path: /acts/{actorId}/runs
    method: POST
- name: run_actor_sync_with_input
  endpoint:
    path: /acts/{actorId}/run-sync
    method: POST
- name: run_actor_sync_without_input
  endpoint:
    path: /acts/{actorId}/run-sync
    method: POST
- name: run_actor_sync_get_dataset_items
  endpoint:
    path: /acts/{actorId}/run-sync-get-dataset-items
    method: POST
- name: run_actor_sync_without_input_get_dataset_items
  endpoint:
    path: /acts/{actorId}/run-sync-get-dataset-items
    method: POST
- name: resurrect_run
  endpoint:
    path: /acts/{actorId}/runs/{runId}/resurrect
    method: POST
- name: get_last_run
  endpoint:
    path: /acts/{actorId}/runs/last
    method: GET
- name: get_run
  endpoint:
    path: /acts/{actorId}/runs/{runId}
    method: GET
- name: abort_run
  endpoint:
    path: /acts/{actorId}/runs/{runId}/abort
    method: POST
- name: metamorph_run
  endpoint:
    path: /acts/{actorId}/runs/{runId}/metamorph
    method: POST
- name: log
  endpoint:
    path: /v2/actor-builds/:buildId/log
    method: GET
- name: runs
  endpoint:
    path: /v2/acts/:actorId/runs
    method: GET
    data_selector: records
    params:
      limit: '1000'
      offset: '0'
- name: actor_run
  endpoint:
    path: /v2/acts/:actorId/runs
    method: POST
- name: run_sync_actor
  endpoint:
    path: /v2/acts/:actorId/run-sync
    method: POST
    data_selector: OUTPUT
    params: {}
- name: run_sync
  endpoint:
    path: /v2/acts/:actorId/run-sync
    method: GET
- name: run_actor_sync
  endpoint:
    path: /v2/acts/:actorId/run-sync-get-dataset-items
    method: POST
- name: run_actor
  endpoint:
    path: /v2/acts/:actorId/run-sync-get-dataset-items
    method: GET
    data_selector: dataset_items
    params: {}
- name: resurrect_run
  endpoint:
    path: /v2/acts/:actorId/runs/:runId/resurrect
    method: POST
- name: actor_builds
  endpoint:
    path: /v2/actor-builds/:buildId/openapi.json
    method: GET
- name: last_run
  endpoint:
    path: /v2/acts/{actorId}/runs/last
    method: GET
    params:
      token: ''
      status: ''
- name: last_run_log
  endpoint:
    path: /v2/acts/{actorId}/runs/last/log
    method: GET
    params:
      token: ''
      status: ''
- name: last_run_key_value_store
  endpoint:
    path: /v2/acts/{actorId}/runs/last/key-value-store
    method: GET
    params:
      token: ''
      status: ''
- name: last_run_dataset
  endpoint:
    path: /v2/acts/{actorId}/runs/last/dataset
    method: GET
    params:
      token: ''
      status: ''
- name: last_run_request_queue
  endpoint:
    path: /v2/acts/{actorId}/runs/last/request-queue
    method: GET
    params:
      token: ''
      status: ''
- name: actor_run
  endpoint:
    path: /v2/acts/:actorId/runs/:runId
    method: GET
    data_selector: null
    params:
      waitForFinish: null
- name: abort_run
  endpoint:
    path: /v2/acts/:actorId/runs/:runId/abort
    method: POST
- name: metamorph_run
  endpoint:
    path: /v2/acts/:actorId/runs/:runId/metamorph
    method: POST
- name: webhooks
  endpoint:
    path: /acts/{actorId}/webhooks
    method: GET
    data_selector: webhooks
    params: {}
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
    params:
      sort: createdAt
      desc: '1'
- name: user_builds
  endpoint:
    path: /actor-builds
    method: GET
- name: build
  endpoint:
    path: /actor-builds/{buildId}
    method: GET
- name: delete_build
  endpoint:
    path: /actor-builds/{buildId}
    method: DELETE
- name: abort_build
  endpoint:
    path: /actor-builds/{buildId}/abort
    method: POST
- name: log
  endpoint:
    path: /actor-builds/{buildId}/log
    method: GET
- name: openapi_definition
  endpoint:
    path: /actor-builds/{buildId}/openapi.json
    method: GET
- name: user_builds
  endpoint:
    path: /v2/actor-builds
    method: GET
    data_selector: records
    params:
      limit: 1000
      offset: null
      desc: null
- name: build
  endpoint:
    path: /v2/actor-builds/:buildId
    method: GET
    data_selector: details
- name: build
  endpoint:
    path: /v2/actor-builds/:buildId
    method: DELETE
- name: user_runs
  endpoint:
    path: /actor-runs
    method: GET
- name: run
  endpoint:
    path: /actor-runs/{runId}
    method: GET
- name: update_status_message
  endpoint:
    path: /actor-runs/{runId}
    method: PUT
- name: delete_run
  endpoint:
    path: /actor-runs/{runId}
    method: DELETE
- name: abort_run
  endpoint:
    path: /actor-runs/{runId}/abort
    method: POST
- name: metamorph_run
  endpoint:
    path: /actor-runs/{runId}/metamorph
    method: POST
- name: reboot_run
  endpoint:
    path: /actor-runs/{runId}/reboot
    method: POST
- name: resurrect_run
  endpoint:
    path: /actor-runs/{runId}/resurrect
    method: POST
- name: charge_events_in_run
  endpoint:
    path: /actor-runs/{runId}/charge
    method: GET
- name: actor_runs
  endpoint:
    path: /actor-runs
    method: GET
    data_selector: records
    params: {}
- name: actor_run
  endpoint:
    path: /v2/actor-runs/{runId}
    method: GET
- name: actor_run_log
  endpoint:
    path: /v2/actor-runs/{runId}/log
    method: GET
- name: actor_run_key_value_store
  endpoint:
    path: /v2/actor-runs/{runId}/key-value-store
    method: GET
- name: actor_run_dataset
  endpoint:
    path: /v2/actor-runs/{runId}/dataset/items
    method: GET
- name: actor_run_request_queue
  endpoint:
    path: /v2/actor-runs/{runId}/request-queue/requests
    method: GET
- name: update_status_message
  endpoint:
    path: /v2/actor-runs/:runId
    method: PUT
    data_selector: null
    params: {}
- name: actor_run
  endpoint:
    path: /v2/actor-runs/:runId
    method: DELETE
- name: charge_events
  endpoint:
    path: /v2/actor-runs/:runId/charge
    method: POST
- name: list_tasks
  endpoint:
    path: /actor-tasks
    method: GET
- name: create_task
  endpoint:
    path: /actor-tasks
    method: POST
- name: get_task
  endpoint:
    path: /actor-tasks/{actorTaskId}
    method: GET
- name: update_task
  endpoint:
    path: /actor-tasks/{actorTaskId}
    method: PUT
- name: delete_task
  endpoint:
    path: /actor-tasks/{actorTaskId}
    method: DELETE
- name: get_task_input
  endpoint:
    path: /actor-tasks/{actorTaskId}/input
    method: GET
- name: update_task_input
  endpoint:
    path: /actor-tasks/{actorTaskId}/input
    method: PUT
- name: list_webhooks
  endpoint:
    path: /actor-tasks/{actorTaskId}/webhooks
    method: GET
- name: list_task_runs
  endpoint:
    path: /actor-tasks/{actorTaskId}/runs
    method: GET
- name: run_task
  endpoint:
    path: /actor-tasks/{actorTaskId}/runs
    method: POST
- name: run_task_sync
  endpoint:
    path: /actor-tasks/{actorTaskId}/run-sync
    method: POST
- name: run_task_sync_get_dataset_items
  endpoint:
    path: /actor-tasks/{actorTaskId}/run-sync-get-dataset-items
    method: POST
- name: get_last_run
  endpoint:
    path: /actor-tasks/{actorTaskId}/runs/last
    method: GET
- name: actor_tasks
  endpoint:
    path: /v2/actor-tasks
    method: GET
    data_selector: tasks
    params:
      limit: 1000
      offset: null
      desc: null
- name: task
  endpoint:
    path: /v2/actor-tasks
    method: POST
    data_selector: ''
- name: task
  endpoint:
    path: /v2/actor-tasks/:actorTaskId
    method: GET
- name: update_task
  endpoint:
    path: /v2/actor-tasks/:actorTaskId
    method: PUT
    data_selector: task
    params: {}
- name: update_task_input
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/input
    method: PUT
    data_selector: full task input
    params: {}
- name: webhooks
  endpoint:
    path: /actor-tasks/:actorTaskId/webhooks
    method: GET
    data_selector: webhooks
    params: {}
- name: task_runs
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/runs
    method: GET
    data_selector: records
    params:
      limit: '1000'
      offset: '0'
      desc: '1'
- name: store
  endpoint:
    path: /v2/key-value-stores/:storeId
    method: GET
    data_selector: ''
- name: key_value_store
  endpoint:
    path: /v2/key-value-stores/:storeId
    method: PUT
    data_selector: updated_store
    params: {}
- name: ClientsDeletes
  endpoint:
    path: /v2/key-value-stores/:storeId
    method: DELETE
- name: run_task
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/runs
    method: POST
    data_selector: Actor Run object
    params: {}
- name: run_sync_task
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/run-sync
    method: GET
    data_selector: null
    params: {}
- name: run_task_sync
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/run-sync
    method: POST
    data_selector: null
    params: {}
- name: run_sync_get_dataset_items
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/run-sync-get-dataset-items
    method: GET
    data_selector: null
    params: {}
- name: run_sync_get_dataset_items
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/run-sync-get-dataset-items
    method: POST
- name: last_run
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs/last
    method: GET
    params:
      status: SUCCEEDED
- name: last_run_log
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs/last/log
    method: GET
    params:
      status: SUCCEEDED
- name: last_run_key_value_store
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs/last/key-value-store
    method: GET
    params:
      status: SUCCEEDED
- name: last_run_dataset
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs/last/dataset
    method: GET
    params:
      status: SUCCEEDED
- name: last_run_request_queue
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs/last/request-queue
    method: GET
    params:
      status: SUCCEEDED
- name: list_datasets
  endpoint:
    path: /datasets
    method: GET
- name: create_dataset
  endpoint:
    path: /datasets
    method: POST
- name: get_dataset
  endpoint:
    path: /datasets/{datasetId}
    method: GET
- name: update_dataset
  endpoint:
    path: /datasets/{datasetId}
    method: PUT
- name: delete_dataset
  endpoint:
    path: /datasets/{datasetId}
    method: DELETE
- name: get_items
  endpoint:
    path: /datasets/{datasetId}/items
    method: GET
- name: store_items
  endpoint:
    path: /datasets/{datasetId}/items
    method: POST
- name: get_dataset_statistics
  endpoint:
    path: /datasets/{datasetId}/statistics
    method: GET
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: dataset
  endpoint:
    path: /v2/datasets
    method: POST
- name: dataset
  endpoint:
    path: /v2/datasets/:datasetId
    method: PUT
- name: Delete dataset
  endpoint:
    path: /v2/datasets/:datasetId
    method: DELETE
- name: items
  endpoint:
    path: /v2/datasets/:datasetId/items
    method: GET
- name: store_items
  endpoint:
    path: /v2/datasets/:datasetId/items
    method: POST
    data_selector: null
    params: {}
- name: list_of_key_value_stores
  endpoint:
    path: /key-value-stores
    method: GET
- name: create_key_value_store
  endpoint:
    path: /key-value-stores
    method: POST
- name: get_store
  endpoint:
    path: /key-value-stores/{storeId}
    method: GET
- name: update_store
  endpoint:
    path: /key-value-stores/{storeId}
    method: PUT
- name: delete_store
  endpoint:
    path: /key-value-stores/{storeId}
    method: DELETE
- name: list_of_keys
  endpoint:
    path: /key-value-stores/{storeId}/keys
    method: GET
- name: get_record
  endpoint:
    path: /key-value-stores/{storeId}/records/{recordKey}
    method: GET
- name: check_if_record_exists
  endpoint:
    path: /key-value-stores/{storeId}/records/{recordKey}
    method: HEAD
- name: store_record
  endpoint:
    path: /key-value-stores/{storeId}/records/{recordKey}
    method: PUT
- name: delete_record
  endpoint:
    path: /key-value-stores/{storeId}/records/{recordKey}
    method: DELETE
- name: key_value_stores
  endpoint:
    path: /v2/key-value-stores
    method: GET
    data_selector: records
    params:
      limit: 1000
      offset: 0
- name: key_value_store
  endpoint:
    path: /v2/key-value-stores
    method: POST
- name: get_record
  endpoint:
    path: /:storeId/records/:recordKey
    method: GET
- name: check_record_exists
  endpoint:
    path: /v2/key-value-stores/:storeId/records/:recordKey
    method: HEAD
- name: store_record
  endpoint:
    path: /v2/key-value-stores/:storeId/records/:recordKey
    method: PUT
- name: Clients
  endpoint:
    path: /v2/key-value-stores/:storeId/records/:recordKey
    method: DELETE
- name: request_queue_list
  endpoint:
    path: /request-queues
    method: GET
- name: create_request_queue
  endpoint:
    path: /request-queues
    method: POST
- name: get_request_queue
  endpoint:
    path: /request-queues/{queueId}
    method: GET
- name: update_request_queue
  endpoint:
    path: /request-queues/{queueId}
    method: PUT
- name: delete_request_queue
  endpoint:
    path: /request-queues/{queueId}
    method: DELETE
- name: add_requests
  endpoint:
    path: /request-queues/{queueId}/requests/batch
    method: POST
- name: delete_requests
  endpoint:
    path: /request-queues/{queueId}/requests/batch
    method: DELETE
- name: request_queue
  endpoint:
    path: /request-queues
    method: GET
    data_selector: queues
    params:
      sort_order: desc
      limit: '1000'
      offset: ''
- name: request_queue
  endpoint:
    path: /v2/request-queues
    method: POST
- name: request_queue
  endpoint:
    path: /v2/request-queues/:queueId
    method: GET
- name: add_requests
  endpoint:
    path: /v2/request-queues/:queueId/requests/batch
    method: POST
- name: delete_requests
  endpoint:
    path: /v2/request-queues/:queueId/requests/batch
    method: DELETE
    data_selector: null
    params: {}
- name: list_requests
  endpoint:
    path: /request-queues/{queueId}/requests
    method: GET
- name: add_request
  endpoint:
    path: /request-queues/{queueId}/requests
    method: POST
- name: get_request
  endpoint:
    path: /request-queues/{queueId}/requests/{requestId}
    method: GET
- name: update_request
  endpoint:
    path: /request-queues/{queueId}/requests/{requestId}
    method: PUT
- name: delete_request
  endpoint:
    path: /request-queues/{queueId}/requests/{requestId}
    method: DELETE
- name: requests
  endpoint:
    path: /v2/request-queues/:queueId/requests
    method: GET
    data_selector: requests
    params:
      incremental: exclusiveStartId
- name: request
  endpoint:
    path: /v2/request-queues/:queueId/requests/:requestId
    method: GET
- name: request
  endpoint:
    path: /v2/request-queues/:queueId/requests/:requestId
    method: DELETE
- name: unlock_requests
  endpoint:
    path: /request-queues/{queueId}/requests/unlock
    method: GET
- name: get_head
  endpoint:
    path: /request-queues/{queueId}/head
    method: GET
- name: get_head_and_lock
  endpoint:
    path: /request-queues/{queueId}/head/lock
    method: GET
- name: prolong_request_lock
  endpoint:
    path: /request-queues/{queueId}/requests/{requestId}/lock
    method: POST
- name: delete_request_lock
  endpoint:
    path: /request-queues/{queueId}/requests/{requestId}/lock
    method: DELETE
- name: get_head_and_lock
  endpoint:
    path: /v2/request-queues/:queueId/head/lock
    method: POST
- name: delete_request_lock
  endpoint:
    path: /v2/request-queues/:queueId/requests/:requestId/lock
    method: DELETE
- name: list_webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: create_webhook
  endpoint:
    path: /webhooks
    method: POST
- name: get_webhook
  endpoint:
    path: /webhooks/{webhookId}
    method: GET
- name: update_webhook
  endpoint:
    path: /webhooks/{webhookId}
    method: PUT
- name: delete_webhook
  endpoint:
    path: /webhooks/{webhookId}
    method: DELETE
- name: test_webhook
  endpoint:
    path: /webhooks/{webhookId}/test
    method: POST
- name: get_collection
  endpoint:
    path: /webhooks/{webhookId}/dispatches
    method: GET
- name: create_webhook
  endpoint:
    path: /v2/webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: webhook
  endpoint:
    path: /v2/webhooks/:webhookId
    method: GET
    data_selector: webhook object with all details
- name: webhook
  endpoint:
    path: /v2/webhooks/:webhookId
    method: PUT
    data_selector: webhook
    params: {}
- name: webhook
  endpoint:
    path: /v2/webhooks/:webhookId
    method: DELETE
- name: webhook_test
  endpoint:
    path: /v2/webhooks/:webhookId/test
    method: POST
- name: webhook_dispatches
  endpoint:
    path: /v2/webhooks/:webhookId/dispatches
    method: GET
- name: webhook_dispatches
  endpoint:
    path: /webhook-dispatches
    method: GET
- name: webhook_dispatch
  endpoint:
    path: /webhook-dispatches/{dispatchId}
    method: GET
- name: webhook_dispatch
  endpoint:
    path: /webhook-dispatches/:dispatchId
    method: GET
    data_selector: ''
- name: list_of_schedules
  endpoint:
    path: /schedules
    method: GET
- name: create_schedule
  endpoint:
    path: /schedules
    method: POST
- name: get_schedule
  endpoint:
    path: /schedules/{scheduleId}
    method: GET
- name: update_schedule
  endpoint:
    path: /schedules/{scheduleId}
    method: PUT
- name: delete_schedule
  endpoint:
    path: /schedules/{scheduleId}
    method: DELETE
- name: get_schedule_log
  endpoint:
    path: /schedules/{scheduleId}/log
    method: GET
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: records
    params: {}
- name: schedule
  endpoint:
    path: /v2/schedules
    method: POST
    headers:
      Content-Type: application/json
- name: schedule
  endpoint:
    path: /v2/schedules/:scheduleId
    method: GET
- name: schedule
  endpoint:
    path: /v2/schedules/:scheduleId
    method: PUT
    data_selector: full schedule object
    params: {}
- name: schedule
  endpoint:
    path: /v2/schedules/:scheduleId
    method: DELETE
- name: schedule_log
  endpoint:
    path: /v2/schedules/:scheduleId/log
    method: GET
    data_selector: invocations
    params: {}
- name: actors
  endpoint:
    path: /v2/store
    method: GET
    data_selector: actors
    params:
      limit: 1000
- name: get_log
  endpoint:
    path: /logs/{buildOrRunId}
    method: GET
- name: log
  endpoint:
    path: /v2/logs/:buildOrRunId
    method: GET
- name: public_user_data
  endpoint:
    path: /users/{userId}
    method: GET
- name: private_user_data
  endpoint:
    path: /users/me
    method: GET
- name: monthly_usage
  endpoint:
    path: /users/me/usage/monthly
    method: GET
- name: limits
  endpoint:
    path: /users/me/limits
    method: GET
- name: update_limits
  endpoint:
    path: /users/me/limits
    method: PUT
- name: user
  endpoint:
    path: /v2/users/:userId
    method: GET
    data_selector: user
    params: {}
- name: user
  endpoint:
    path: /users/me
    method: GET
    data_selector: user
    params: {}
- name: monthly_usage
  endpoint:
    path: /v2/users/me/usage/monthly
    method: GET
- name: limits
  endpoint:
    path: /v2/users/me/limits
    method: PUT
- name: actor_task
  endpoint:
    path: /actor-tasks
    method: GET
    data_selector: data.items
    params: {}
- name: actor_task_runs
  endpoint:
    path: /actor-tasks/{actorTaskId}/runs
    method: GET
    data_selector: data.items
    params:
      status: SUCCEEDED
- name: dataset_items
  endpoint:
    path: /datasets/{datasetId}/items
    method: GET
    params:
      datasetId: required
      format: json
      clean: false
      offset: 0
      limit: 99
      fields: ''
      omit: ''
      unwind: ''
      flatten: ''
      desc: false
      attachment: false
      delimiter: ','
      bom: true
      xmlRoot: items
      xmlRow: item
      skipHeaderRow: false
      skipHidden: false
      skipEmpty: false
      simplified: false
      view: overview
      skipFailedPages: false
- name: actor_runs
  endpoint:
    path: /v2/actor-runs
    method: GET
    params:
      offset: 0
      limit: 1000
      desc: true
- name: actor_tasks
  endpoint:
    path: /v2/actor-tasks
    method: GET
    params:
      offset: 0
      limit: 1000
      desc: true
- name: key_value_stores
  endpoint:
    path: /v2/key-value-stores
    method: GET
    params:
      offset: 0
      limit: 1000
      desc: true
- name: datasets
  endpoint:
    path: /v2/datasets
    method: GET
    params:
      offset: 0
      limit: 1000
      desc: true
- name: dataset_items_get
  endpoint:
    path: /dataset/items
    method: GET
    params:
      datasetId:
        required: true
      format:
        default: json
      clean:
        type: boolean
      offset:
        default: 0
      limit:
        type: number
      fields:
        type: string
      omit:
        type: string
      unwind:
        type: string
      flatten:
        type: string
      desc:
        type: boolean
      attachment:
        type: boolean
      delimiter:
        type: string
      bom:
        type: boolean
      xmlRoot:
        type: string
      xmlRow:
        type: string
      skipHeaderRow:
        type: boolean
      skipHidden:
        type: boolean
      skipEmpty:
        type: boolean
      simplified:
        type: boolean
      view:
        type: string
      skipFailedPages:
        type: boolean
- name: key-value store
  endpoint:
    path: /v2/key-value-stores
    method: GET
    data_selector: stores
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: results
- name: dataset_items
  endpoint:
    path: /datasets/{DATASET_ID}/items
    method: GET
    data_selector: items
- name: put_items
  endpoint:
    path: /datasets/{DATASET_ID}/items
    method: POST
    data_selector: success
- name: request_queues
  endpoint:
    path: /request-queues
    method: GET
- name: request_queue_info
  endpoint:
    path: /request-queues/{QUEUE_ID}
    method: GET
- name: get_request
  endpoint:
    path: /request-queues/{QUEUE_ID}/requests/{REQUEST_ID}
    method: GET
- name: add_request
  endpoint:
    path: /request-queues/{QUEUE_ID}/requests
    method: POST
- name: update_request
  endpoint:
    path: /request-queues/{QUEUE_ID}/requests/{REQUEST_ID}
    method: PUT
- name: request_queues
  endpoint:
    path: /request-queues
    method: GET
    data_selector: items
- name: request_queue_info
  endpoint:
    path: /request-queues/{QUEUE_ID}
    method: GET
    data_selector: item
- name: add_request
  endpoint:
    path: /request-queues/{QUEUE_ID}/requests
    method: POST
    data_selector: item
- name: update_request
  endpoint:
    path: /request-queues/{QUEUE_ID}/requests/{REQUEST_ID}
    method: PUT
    data_selector: item
- name: get_request
  endpoint:
    path: /request-queues/{QUEUE_ID}/requests/{REQUEST_ID}
    method: GET
    data_selector: item
- name: list_requests
  endpoint:
    path: /request-queues/{QUEUE_ID}/requests
    method: GET
    data_selector: items
- name: actor
  endpoint:
    path: /actors
    method: GET
    data_selector: permissions
    params: {}
- name: actor_task
  endpoint:
    path: /actor-tasks
    method: GET
    data_selector: permissions
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: permissions
    params: {}
- name: key_value_store
  endpoint:
    path: /key-value-stores
    method: GET
    data_selector: permissions
    params: {}
- name: request_queue
  endpoint:
    path: /request-queues
    method: GET
    data_selector: permissions
    params: {}
- name: proxy
  endpoint:
    path: /proxies
    method: GET
    data_selector: permissions
    params: {}
- name: user_permissions
  endpoint:
    path: /user-permissions
    method: GET
    data_selector: permissions
    params: {}
notes:
- Sometimes requires special tokens
- Potential overhead
- Use high-quality proxies. Residential proxies are the least blocked.
- Set real-user-like HTTP settings and browser fingerprints.
- Consider extracting data from private APIs or mobile app APIs.
- 'Increase the number of request retries significantly to at least 10 with maxRequestRetries:
  10.'
- 'Rotate sessions after every error with maxErrorScore: 1.'
- Basic programming knowledge is recommended
- Understanding of JavaScript and Node.js fundamentals is recommended
- Not all websites use all of these principles but they encompass the possibilities
  websites have to track and block bots.
- 'A common workflow of a website after it has detected a bot goes as follows: The
  bot is added to the ''greylist'', a Turing test is provided, if the captcha is failed,
  the bot is added to the blacklist.'
- Advanced anti-scraping methods are able to identify non-humans not only by one value
  but through more complex things such as header combinations.
- Apify Actors can perform arbitrary web scraping, automation, or data processing
  jobs.
- Records are sorted by the createdAt field in ascending order by default.
- Uses Bearer token for authentication
- The default value for APIFY_CONTAINER_PORT is 4321.
- Each schedule can be associated with a maximum of 10 Actors and 10 Actor tasks.
- If the request is successful, you will receive a 201 HTTP response code.
- Apify Proxy allows you to change your IP address when web scraping to reduce the
  chance of being blocked because of your geographical location.
- Proxies in your Actors or any other application that supports HTTP proxies.
- Monitoring allows you to track and observe how the software works.
- The monitoring system is free for all users.
- You can get notified by email, Slack, or in Apify Console.
- Security best practices are reflected in our development, deployment, monitoring,
  and project management processes.
- The Apify platform's default resource limits can be increased on paid accounts.
- Manage permissions for your private resources such as Actors, Actor runs, and storages.
- You can easily and securely share your own resources with other users by using a
  granular permissions system.
- Some organizations might require two-factor authentication (2FA) to access their
  resources.
- Apify SDK requires Node.js 16 or later.
- Records are sorted by createdAt in ascending order by default
- To sort records in descending order, use the desc=1 parameter
- Can sort by last run using sortBy=stats.lastRunStartedAt
- 'The request must specify versionNumber and sourceType parameters in the JSON payload
  and a Content-Type: application/json HTTP header.'
- The endpoint supports pagination using the limit and offset parameters and it will
  not return more than 1000 records.
- By default, the records are sorted by the startedAt field in ascending order.
- Authentication is based on the build's unique ID. No authentication token is required.
- This endpoint has been deprecated and may be replaced or removed in future versions
  of the API.
- Only builds that are starting or running are aborted.
- The endpoint supports pagination using the limit and offset parameters and will
  not return more than 1000 array elements.
- The POST payload including its Content-Type header is passed as INPUT to the Actor.
- The Actor is started with the default options; you can override them using various
  URL query parameters.
- Calls are authenticated using a hard-to-guess ID of the run.
- There is a limit on how many times you can metamorph a single run.
- This endpoint does not require the authentication token.
- 'The request needs to specify the Content-Type: application/json HTTP header'
- We recommend using the request's Authorization header for API authentication
- By default, the records are sorted by the createdAt field in ascending order, to
  sort the records in descending order, use the desc=1 parameter.
- The run must finish in 300 seconds otherwise the HTTP request fails with a timeout
  error.
- Make sure your HTTP client is configured to have a long enough connection timeout.
- Beware that it might be impossible to maintain an idle HTTP connection for an extended
  period, due to client timeout or network conditions.
- Specify the Content-Type header as application/json when passing a JSON object as
  the POST payload.
- By default, the objects are sorted by the createdAt field in ascending order.
- CSV, XLSX and HTML tables are limited to 2000 columns and the column names cannot
  be longer than 200 characters.
- Pagination is always performed with the granularity of a single item.
- The limit of request payload size for the dataset is 5 MB. If the array exceeds
  the size, you'll need to split it into a number of smaller arrays.
- The endpoint supports pagination using the limit and offset parameters and it will
  not return more than 1000 array elements.
- By default, the records are sorted by the createdAt field in ascending order.
- 'To save bandwidth, storage, and speed up your upload, send the request payload
  compressed with Gzip compression and add the `Content-Encoding: gzip` header.'
- The maximum requests in batch is limited to 25.
- If any add operation fails because the request queue rate limit is exceeded or an
  internal failure occurs, the failed request is returned in the unprocessedRequests
  response parameter.
- It is recommended to use exponential backoff algorithm for these retries.
- Some of the endpoints do not require the authentication token, the calls are authenticated
  using the hard-to-guess ID of the queue.
- To avoid duplicating a webhook, use the idempotencyKey parameter in the request
  body.
- Idempotency keys must be unique, so use a UUID or another random string with enough
  entropy.
- The endpoints do not require the authentication token, the calls are authenticated
  using a hard-to-guess ID of the Actor build or run.
- The fields plan, email and profile are omitted when this endpoint is accessed from
  Actor run.
- Unnamed key-value stores expire after 7 days unless otherwise specified.
- Every Actor run is linked to a default key-value store that is automatically created
  for that specific run.
- Never share a URL containing your authentication token, to avoid compromising your
  account's security.
- Dataset storage is append-only - data can only be added and cannot be modified or
  deleted once stored.
- Unnamed datasets expire after 7 days unless otherwise specified.
- Named request queues are retained indefinitely.
- Unnamed request queues expire after 7 days unless otherwise specified.
- The maximum length for request queue name is 63 characters.
errors:
- '400: invalid-request: POST data must be a JSON object'
- '401: token-not-provided: Authentication token was not provided'
- '404: record-not-found: Store was not found'
- '429: rate-limit-exceeded: You have exceeded the rate limit of 30 requests per second'
- '405: method-not-allowed: This API endpoint can only be accessed using the following
  HTTP methods: OPTIONS, POST'
- '400 Bad Request: The server cannot process the request due to client error, such
  as request syntax, invalid request parameters, or invalid data format.'
- '408 Request Timeout: The server timed out waiting for the request to complete.'
- '200: Successful response'
- '200'
- '201: Created'
- '408: Request Timeout'
- 400 Bad Request
- 408 Request Timeout
- '201'
- '400'
- '408'
- '201: Task run successfully'
- '400: Bad request'
- '408: Request Timeout: the HTTP request exceeded the 300 second limit'
- '400: Bad Request'
- '400: If the data you attempt to store in the dataset is invalid, the whole request
  is discarded.'
- 'REQUEST_QUEUE_RATE_LIMIT_EXCEEDED: Use exponential backoff for retries'
- 'INTERNAL_FAILURE: Check for internal server issues'
- '201: Webhook created successfully'
- '429 Too Many Requests: You have exceeded the rate limit of ... requests per second'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'RATE_LIMIT_EXCEEDED: Reduce request frequency'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- 'Rate limit exceeded: 200 requests per second for CRUD operations.'
- 'Rate limit exceeded: 30 requests per second for all other endpoints.'
auth_info:
  mentioned_objects:
  - Authenticator app
  - recovery codes
client:
  base_url: https://api.apify.com/v2
  auth:
    type: apikey
    location: header
    header_name: Authorization
    token_url: https://api.apify.com/v2/acts/compass~crawler-google-places/runs
    client_id: MY-API-TOKEN
    token: MY-APIFY-TOKEN
  headers:
    Content-Type: application/json
    Accept: application/json
    Authorization: Bearer YOUR_API_TOKEN
    Accept-Encoding: application/json
  paginator:
    type: offset
    page_size_param: limit
    default_page_size: 1000
    cursor_param: exclusiveStartKey
source_metadata: null
