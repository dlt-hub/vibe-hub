resources:
- name: removebg
  endpoint:
    path: /tools/1.0/removebg
    method: POST
    data_selector: null
    params: {}
- name: effects
  endpoint:
    path: /tools/1.0/effects
    method: GET
- name: laser_engraving
  endpoint:
    path: /tools/1.0/effects/laserengraving
    method: POST
- name: effects_preview
  endpoint:
    path: /tools/1.0/effects/previews
    method: POST
    data_selector: thumbnail
    params: {}
- name: upscale_ultra
  endpoint:
    path: /upscale/ultra/
    method: GET
- name: ai_effects
  endpoint:
    path: /tools/1.0/effects/ai
    method: GET
    data_selector: ''
- name: color_transfer
  endpoint:
    path: /color-transfer
    method: POST
- name: masks
  endpoint:
    path: /tools/1.0/masks
    method: POST
- name: image_describer
  endpoint:
    path: /tools/1.0/describe
    method: POST
- name: pattern_generator
  endpoint:
    path: /tools/1.0/background/pattern
    method: POST
- name: edit
  endpoint:
    path: /tools/1.0/edit
    method: POST
- name: design2replay
  endpoint:
    path: /tools/1.0/design2replay
    method: POST
- name: balance
  endpoint:
    path: /balance
    method: GET
    data_selector: null
    params: {}
- name: design_import_result
  endpoint:
    path: /tools/1.0/design2replay/
    method: GET
- name: upload
  endpoint:
    path: /tools/1.0/upload
    method: POST
- name: tags
  endpoint:
    path: /tools/1.0/tags
    method: POST
- name: painting
  endpoint:
    path: /v1/painting/
    method: GET
- name: removebg
  endpoint:
    path: /removebg
    method: POST
    data_selector: result
    params: {}
- name: surfacemap
  endpoint:
    path: /tools/1.0/surfacemap
    method: POST
    data_selector: null
    params: {}
- name: car_classifier
  endpoint:
    path: /tools/1.0/cars/classify
    method: POST
- name: outpaint
  endpoint:
    path: /v1/painting/outpaint
    method: POST
    data_selector: {}
    params: {}
- name: inpaint
  endpoint:
    path: /v1/painting/inpaint
    method: POST
    data_selector: response
    params: {}
- name: balance
  endpoint:
    path: /v1/balance
    method: GET
- name: outpaint
  endpoint:
    path: /v1/painting/outpaint
    method: POST
    data_selector: result
- name: painting
  endpoint:
    path: /v1/painting/
    method: GET
- name: removebg
  endpoint:
    path: /removebg
    method: POST
- name: balance
  endpoint:
    path: /v1/balance
    method: GET
- name: upscale_video
  endpoint:
    path: /v1/upscale/fps/
    method: GET
    data_selector: response
- name: balance
  endpoint:
    path: /v1/balance
    method: GET
- name: video
  endpoint:
    path: /v1/video/
    method: GET
- name: upload
  endpoint:
    path: /v1/upload
    method: POST
- name: tags
  endpoint:
    path: /tools/1.0/tags
    method: POST
- name: balance
  endpoint:
    path: /v1/balance
    method: GET
- name: effects
  endpoint:
    path: /tools/1.0/effects
    method: GET
- name: surfacemap
  endpoint:
    path: /tools/1.0/surfacemap
    method: POST
- name: edit
  endpoint:
    path: /tools/1.0/edit
    method: POST
- name: inpaint
  endpoint:
    path: /v1/painting/inpaint
    method: POST
- name: upload
  endpoint:
    path: /tools/1.0/upload
    method: POST
- name: balance
  endpoint:
    path: /v1/balance
    method: GET
- name: effects
  endpoint:
    path: /tools/1.0/effects
    method: GET
- name: remove_background
  endpoint:
    path: /tools/1.0/removebg
    method: POST
    data_selector: response
    params: {}
- name: video
  endpoint:
    path: /v1/video/
    method: GET
- name: remove_background
  endpoint:
    path: /tools/1.0/removebg
    method: POST
    data_selector: response
    params: {}
- name: input_formats
  endpoint:
    path: /input/formats
    method: GET
    data_selector: formats
    params: {}
- name: output_formats
  endpoint:
    path: /output/formats
    method: GET
    data_selector: formats
    params: {}
- name: upscale_image
  endpoint:
    path: /tools/1.0/upscale
    method: POST
    data_selector: null
    params:
      upscale_factor: x2
      image_url: null
- name: upscale_enhance
  endpoint:
    path: /tools/1.0/upscale/enhance
    method: POST
    data_selector: response
    params:
      image_url: https://cdn140.picsart.com/20123007110359038337.png
      upscale_factor: 3
      format: PNG
- name: export
  endpoint:
    path: /export
    method: POST
    data_selector: data
    params: {}
- name: upscale_image
  endpoint:
    path: /tools/1.0/upscale/ultra
    method: POST
    data_selector: response
    params:
      image_url: https://cdn140.picsart.com/20123007110359038337.png
      upscale_factor: 3
      format: PNG
- name: edit_image
  endpoint:
    path: /edit
    method: POST
    data_selector: data
    params: {}
- name: adjust_image
  endpoint:
    path: /image/adjust
    method: POST
    data_selector: result
    params:
      retries: 3
      retry_delay: 5000
- name: enhance_face
  endpoint:
    path: /tools/1.0/enhance/face
    method: POST
    data_selector: null
    params:
      image_url: null
      format: null
- name: edit_image
  endpoint:
    path: /tools/1.0/edit
    method: POST
    data_selector: url
- name: edit_image
  endpoint:
    path: /tools/1.0/edit
    method: POST
    data_selector: data
- name: remove_background
  endpoint:
    path: /removeBackground
    method: POST
    data_selector: result
    params: {}
- name: apply_effect
  endpoint:
    path: /applyEffect
    method: POST
    data_selector: result
    params: {}
- name: retrieve_effects
  endpoint:
    path: /getEffects
    method: GET
    data_selector: effects
    params: {}
- name: remove_background
  endpoint:
    path: /removebg
    method: POST
- name: editor_open
  endpoint:
    path: /open
    method: POST
    data_selector: result
    params: {}
- name: provide_labels
  endpoint:
    path: /provideLabels
    method: POST
    data_selector: result
    params: {}
- name: Picsart SDK
  endpoint:
    path: /cdn
    method: GET
    data_selector: ''
    params: {}
- name: upscale_image
  endpoint:
    path: /upscale
    method: POST
    data_selector: data
    params: {}
- name: PicsartEditor
  endpoint:
    path: /cdn
    method: GET
    data_selector: ''
    params:
      v: x.y.z
      key: sdk
- name: text2Image
  endpoint:
    path: /text2Image
    method: POST
    data_selector: images
    params: {}
- name: video_features
  endpoint:
    path: /api/video/features
    method: GET
    data_selector: features
    params: {}
- name: video_render_job
  endpoint:
    path: /jobs
    method: GET
    data_selector: jobs
    params:
      guid: '{jobGuid}'
- name: tracking_events
  endpoint:
    path: /tracking/events
    method: GET
    data_selector: events
    params: {}
- name: video_editor
  endpoint:
    path: /v2/renders/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: photo_editor
  endpoint:
    path: /cdn
    method: GET
    data_selector: editor
    params: {}
- name: export_settings
  endpoint:
    path: /export/settings
    method: GET
    data_selector: exportSettings
    params: {}
- name: video_editor
  endpoint:
    path: /v2/renders/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: editor
  endpoint:
    path: /cdn
    method: GET
    data_selector: editor
    params: {}
- name: editor
  endpoint:
    path: /cdn?v=X.Y.Z&key=sdk
    method: GET
- name: video_render
  endpoint:
    path: /v1/renders/jobs
    method: GET
    params:
      guid: jobGuid
- name: editor
  endpoint:
    path: /initialize
    method: POST
    data_selector: PicsartInstance
    params:
      propertyId: yourdomain.com
      containerId: containerId
      apiKey: Your API Key here
      exportFormats: []
      exportType: blob
      usePicsartInventory: true
      theme: light
      features:
        multiCanvasSupport: false
        shapeToCollage: true
        tools:
        - effects
        - eraser
        - adjust
        - edit
        - color
        - gradient
        - font
        - border
        - outline
        - shadow
        - replace
        - remove
        - crop
        - flip_rotate
        - position
        - trim
        - tool_removeBG
      categories:
        templates: {}
      miniapps:
        t2i: true
        editorSdkTemplates: false
      sidebar:
      - TEMPLATES
notes:
- The recommended composition of an Image includes less busy background, high contrast,
  and distinguishable background/foreground.
- Supported source image formats are JPG, PNG, TIFF, WEBP, and MPO.
- The recommended composition of an Image for optimal processing includes less busy
  background, high contrast, and distinguishable foreground.
- 'Contrast: Snaps taken in great lighting conditions with a strong contrast between
  the subject and the background will give awesome results.'
- 'Alignment: Make sure to upload pictures with the right orientation. The best outcome
  is obtained when the picture aligns with gravity (meaning the ground is at the bottom
  of the image).'
- 'Plain backgrounds preferred: Blurry and single-colored backgrounds are easier to
  remove compared to sharp backgrounds packed with lots of details.'
- 'Clear foreground: If the foreground is blurry, it might not be removed. Even if
  only the edges are blurry, they''ll remain blurry in the cutout, which may or may
  not be an issue.'
- 'Number of people: Images with one person or a few people tend to work better than
  pictures with large groups of people.'
- 'Objects: Small objects held or worn by people (like a basketball) are usually supported,
  while large objects that stand out can be problematic.'
- 'Full object visibility: The whole product should be clearly visible in the picture,
  without any part being cut off.'
- 'Focus on the object: Take products out of their packaging and place them against
  a plain background (like a photo studio, wall, or floor).'
- 'Number of objects: Images with one object tend to work better than pictures with
  large groups of people.'
- 'Avoid shadows and reflections: Try to steer clear of harsh shadows, as they can
  be mistaken for part of the foreground. Also, avoid reflections, especially in the
  background.'
- 'No decorations: Don''t include decorative objects in the photo. Don''t add logos,
  stamps, or clip-arts to the picture before uploading it.'
- 'Avoid extreme angles: Capture the photo from a natural perspective, approximately
  at eye level.'
- 'Unobstructed view: Make sure there''s nothing blocking the view of the car from
  the front.'
- 'One car at a time: For optimal results, only include one car in each photo. Only
  the largest visible car will be cut out, while everything else is considered part
  of the background.'
- Supported image formats are JPG, PNG, TIFF and WEBP.
- Images can be upscaled up to 16 times.
- Supported source image formats are JPG, PNG, TIFF and WEBP.
- Can apply up to 10 effects to an image in one call
- Supported source image formats are JPG, PNG, TIFF and WEBP
- Maximum height or width of preview image is 240px
- Works best with photos. Supported source image formats are JPG, PNG, TIFF and WEBP.
- To minimize the networking and processing loads, use the same input image size as
  the desired preview size.
- Maximum height or width of preview image is 240px.
- At least one adjustment setting must be chosen.
- We recommend keeping files up to 2048 on each side.
- Supported source image formats are JPG, PNG, TIFF and WEBP. Output is always SVG.
- Providing image, mask and sticker is required.
- The size of the mask and the image should be the same.
- The size of the sticker should match the masked area's size or proportions.
- The provided input image is mandatory to be a car image.
- 'Plain backgrounds preferred: Blurry and single-colored backgrounds are easier to
  process compared to sharp backgrounds packed with lots of details.'
- 'Clear foreground: If the face is blurry, it might not be removed. Even if only
  the edges are blurry, they''ll remain blurry in the cutout, which may or may not
  be an issue.'
- 'Number of people: It is important images don''t include more than one person. Use
  2-person photos only for the Couple Avatars.'
- 'Objects: No additional objects should be visible in the photo.'
- 'Avoid extreme angles: Capture the selfie from a natural perspective, approximately
  at eye level.'
- No sunglasses
- No children
- No nudity
- 'Number of pets: It is important images don''t include more than one pet.'
- 'Full body photos preferred: It''s best to show the pet''s fully body and there
  should be no humans in the pet photos.'
- Convert all images to JPG (avoid using PNG) to have minimal file transfer times.
- Downsize all images to 512x512 pixels.
- Video FPS can be upscaled up to 60 FPS.
- The input video file cannot be bigger than 500MB.
- The maximum FPS at the input should not be bigger than 30 FPS.
- The maximum resolution at the input should not be bigger than 1280x720.
- Supported source video formats are WEBM, MP4 and MOV.
- The maximum resolution at the input should not be bigger than 1920x1080.
- If you choose an adjustment setting value out of the allowed range, the default
  value of 0 is used instead.
- Output is always SVG.
- The recommended composition of an Image, in order to be optimally processed using
  the 'removebg' service, is less busy background, high contrast (background/foreground),
  and distinguishable background/foreground by naked eye.
- Images can be upscaled up to 8 times.
- Images can be upscaled with outputs up to 4800x4800 (16 Mpx).
- Requires an API key to be provided in the X-Picsart-API-Key request header.
- The resultant image cannot be bigger than the original source image.
- API keys are used for identifying the application or user and tracking usage.
- API secrets are used for authentication and authorization processes, especially
  when accessing sensitive data.
- HTTPS is required for all API requests.
- Request and response bodies are encoded as application/x-www-form-urlencoded.
- Double-check that all mandatory parameters have been provided
- Avoid providing image, image_url, and image_id simultaneously. Only one of these
  should be included as input.
- It's crucial to format your request body correctly to avoid errors.
- Minimize simultaneous requests to avoid surpassing secondary rate limits.
- Upon encountering a rate limit error, pause your request attempts accordingly.
- Avoid manually dissecting URLs to ensure stability of your integration.
- Repeatedly encountering 4xx and 5xx error codes should not be disregarded.
- When bot activity is detected, a 403 status code will be returned.
- MJPEG support across Picsart’s Creative APIs is currently limited to specific services.
- Always consult the latest API documentation to verify whether MJPEG is supported
  for the service.
- Replace <API KEY HERE> with your actual API Key obtained from Picsart.
- Input image file size must not exceed 100 MB.
- Uploaded image files remain valid for 24 hours from the time of upload.
- Processed result files remain accessible for 24 hours from the time of processing.
- Success responses return a 2xx response code.
- Asynchronous executions usually use the 202 code (instead of the 200 that is used
  for synchronous executions).
- Only .heic images are supported for Live Photos.
- Processed images can be exported in JPG, PNG, or WEBP formats.
- For users on a free account, the API allows processing up to 200 credits during
  the demo run.
- Users with a subscription will be subject to a rate limit of 500 requests per minute.
- If you send too many requests, you'll get an error with a `429` response code.
- When you get a rate limit error, it includes a `X-Picsart-RateLimit-Reset-Time`
  response header to let you know how long to wait before retrying your request.
- Provided source URLs do get deleted as the model gets trained.
- Picsart doesn't keep a log for the models that are trained and keeps no info which
  model is trained by what image URLs.
- Result avatars do get deleted in 2 days.
- Source images are recommended to be JPG that are downsized to 512x512 pixels.
- Add error handling
- Add checks to be wary of the remaining credits
- Retries May Result in Additional Credit Charges
- We recommend carefully considering the use of retries and configuring them judiciously
  to avoid unnecessary costs.
- Always implement error handling to manage issues like network failures or invalid
  parameters
- Optimal compression is around 70-75% for balancing quality and speed.
- Replace YOUR_API_KEY with your actual API Key provided by Picsart.
- You can use binary, stream, URL to create the image source
- Use IDE autocompletions for available parameters
- Refer to the Upscale API Reference for limitations or details
- Migrating to Picsart not only involves changing the API endpoint but also taking
  advantage of additional parameters.
- If an 'editor open' request is made while the editor is already open, the method
  will ignore the request.
- 'The minimum size of the container should be width: 768px by height: 350px'
- Picsart processes all images in a generic way.
- The feature 'animation' is added since v1.3.3.
- The maximum size of the canvas is 8000x8000 pixels (64 megapixels).
- The maximum size of the video should be 1GB.
- The exported video duration can be up to 10 minutes in MP4 or WEBM formats.
- Closing the editor may be necessary when users switch to a different flow, click
  outside of the editor popup, or encounter similar scenarios.
- It is safe to call the close method even if the editor is already closed.
- Uploaded files using the upload tool will be available for 7 days.
- All rendered and input artifacts will be stored on an NFS file system for 12 hours.
- All rendered files will be also saved on Picsart storages for 7 days.
- Only desktop browsers are currently supported. Mobile browsers on phones or tablets
  are not officially supported.
- WebView implementations are not supported.
- To ensure optimal user experience, the container used to embed the Picsart Photo
  and Video Editor SDK should have a minimum size of 768px by 350px.
- The mode must be set to 'video'.
- The videoURL parameter should be provided for the video file to be edited.
- The apiKey is required if the Remove Background feature is enabled.
- Make sure to purchase enough credits to ensure uninterrupted remove background processing.
- Ensure the editor supports all relevant file formats for printing, such as high-resolution
  JPEGs, and PDFs.
- Optimize the editor's performance for handling high-quality print files.
- Requires the Configurable plan for advanced features.
- Use `videoURL` to specify the URL of the video file to be edited.
- The apiKey is required for certain features like Remove Background.
- Ensure that resources are optimized for performance to avoid slowing down the editor.
- Handles video exports and errors through onExport and onError methods.
- You will need to Sign Up for a Picsart account to get access to services.
- This will give you access to 200 free credits that can be used to remove backgrounds
  from 40 images for free.
- Do not include templates_management_layouts and templates_management_templates for
  view-only mode.
- To use the Picsart CLI, you need a Picsart API Key.
- Ensure your system meets macOS Version 12 or higher, Sketch Version 71 or higher,
  and Node.js Version 14 or higher.
- Ensure you have Flatpak installed on your system.
- GIMP must be installed via Flatpak, version 2.10 or higher.
- Python version 3.6 or higher is required for GIMP plugins.
- AI tool usage with credit-based system
- Export with credit-based system
- 'API Key and Secret Management: Developers receive an API Key and Secret when creating
  an application. The Secret should be used exclusively in backend implementations
  and never exposed in client-side code to minimize the risk of unauthorized access.'
- 'API Key Provisioning: To safeguard against unauthorized usage due to key extraction
  from client-side code, it is recommended to provision a new API Key every month.'
errors:
- '406: The request may not be processed without the accept: application/json header.'
- '400: Bad request'
- '401: Unauthorized'
- '402: Payment Required'
- '403: Forbidden'
- '404: Not Found'
- '405: Method Not Allowed'
- '406: Not Acceptable'
- '413: Request Entity Too Large'
- '415: Unsupported Media Type'
- '422: Unprocessable Content'
- '429: Too Many Request'
- '431: Request Header Fields Too Large'
- '500: Internal Server Error'
- '503: Service Unavailable'
- '400 Bad Request: Request body not formatted as a JSON object.'
- '422 Unprocessable Entity: Parameter types are misused or required parameters are
  missing.'
- '404: Requested endpoint does not exist.'
- '406: Client doesn''t specify the accept: application/json header.'
- '413: Input file is too big.'
- '422: Input parameters don''t pass validations.'
- '403: Bot activity detected.'
- '4xx: Implementation errors generally return a 4xx response code.'
- '5xx: Rare cases may return a 5xx response code indicating a problem with the Picsart
  API.'
- Try your request later, or check our status page.
- '200: Success - Congratulations, your call was successful.'
- '202: Accepted - Signifies that the server has received the request but has not
  yet completed it.'
- '429: Rate limit exceeded'
- Error Responses and Error Codes documentation should be consulted for robust error
  handling.
- ForbiddenError
- ValidationError
- 400 Failed to establish a new connection
- '401 Client Error: Unauthorised for url: < URL >'
- '403 Client Error: Forbidden for url: < URL >'
- '404 Client Error: Not Found for url: < URL >'
- 405 Method Not Allowed
- 422 The input asset located at < URL > is corrupted
- 500 Server error while processing request
- 504 Server timed out
- 'Failed to fetch VideoSdkApi: Check the API endpoint and request options.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects: []
client:
  base_url: https://your-instance.api-name.com
  headers:
    accept: application/json
    X-Picsart-API-Key: Your:_API_KEY
    Content-Type: multipart/form-data
    x-picsart-api-key: <API KEY HERE>
    Authorization: API Key
    Accept: application/json
    content-type: multipart/form-data
  auth:
    type: apikey
    location: header
    header_name: Authorization
    apiKey: Your API Key here
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
  resources:
  - name: painting_inpaint
    endpoint:
      path: /v1/painting/inpaint
      method: POST
  paginator:
    type: cursor
source_metadata: null
