resources:
- name: app_submission
  endpoint:
    method: POST
- name: list_bank_accounts
  endpoint:
    path: /list-bank-accounts
    method: GET
    data_selector: bank_account
- name: get_bank_account
  endpoint:
    path: /get-bank-account
    method: GET
    data_selector: bank_account
- name: booking_custom_attribute
  endpoint:
    path: /v2/bookings/{booking_id}/custom-attributes
    method: GET
- name: individual_custom_attribute
  endpoint:
    path: /v2/bookings/{booking_id}/custom-attributes/{key}
    method: GET
- name: custom_attribute_definition
  endpoint:
    path: /booking/custom-attributes/definitions
    method: POST
    data_selector: custom_attribute_definition
    params:
      idempotency_key: unique_key_per_request
- name: booking_custom_attribute
  endpoint:
    path: /booking/custom-attributes
    method: POST
    data_selector: custom_attribute
    params:
      idempotency_key: unique_key_per_request
- name: business_booking_profile
  endpoint:
    path: /bookings/business-booking-profile
    method: GET
- name: service_creation
  endpoint:
    path: /catalog/bookable-service
    method: POST
- name: staff_member_creation
  endpoint:
    path: /team/staff-member
    method: POST
- name: customer_addition
  endpoint:
    path: /customers/add
    method: POST
- name: business_locations
  endpoint:
    method: GET
- name: services
  endpoint:
    method: POST
- name: services
  endpoint:
    method: GET
- name: customer_profiles
  endpoint:
    method: POST
- name: customer_profiles
  endpoint:
    method: GET
- name: booking_profile_team_member
  endpoint:
    method: GET
- name: booking_profile_business
  endpoint:
    method: GET
- name: available_service_segments
  endpoint:
    method: GET
- name: bookings
  endpoint:
    method: POST
- name: bookings
  endpoint:
    method: GET
- name: bookings
  endpoint:
    path: /list_bookings
    method: GET
    data_selector: bookings
- name: update_booking
  endpoint:
    path: /update_booking
    method: POST
- name: update_booking
  endpoint:
    path: /update_booking
    method: POST
    data_selector: booking
- name: cancel_booking
  endpoint:
    path: /cancel_booking
    method: POST
    data_selector: errors
- name: cancel_booking
  endpoint:
    path: undefined
    method: POST
    data_selector: booking
- name: business_locations
  endpoint:
    path: /locations
    method: GET
    data_selector: locations
- name: location_booking_profiles
  endpoint:
    path: /location_booking_profiles
    method: GET
    data_selector: location_booking_profiles
- name: team_member_booking_profiles
  endpoint:
    path: /team_member_booking_profiles
    method: GET
    data_selector: team_member_booking_profiles
- name: team_member_booking_profiles
  endpoint:
    path: /RetrieveTeamMemberBookingProfile
    method: GET
    data_selector: team_member_booking_profiles
- name: bulk_team_member_booking_profiles
  endpoint:
    path: /BulkRetrieveTeamMemberBookingProfiles
    method: GET
    data_selector: team_member_booking_profiles
- name: bookable_services
  endpoint:
    path: /SearchCatalogItems
    method: GET
    params:
      product_types: '[APPOINTMENT_SERVICE]'
- name: service_variations
  endpoint:
    path: /search/appointment_services
    method: GET
    data_selector: items
    params:
      incremental: updated_at
- name: customer
  endpoint:
    path: /customers
    method: POST
- name: search_customer
  endpoint:
    path: /customers/search
    method: POST
- name: retrieve_business_booking_profile
  endpoint:
    path: /business-booking-profile
    method: GET
- name: business_booking_profile
  endpoint:
    path: /business_booking_profile
    method: GET
    data_selector: business_booking_profile
- name: search_availability
  endpoint:
    path: /search_availability
    method: POST
    data_selector: availabilities
- name: create_booking
  endpoint:
    method: POST
    params:
      customer_id: required
      phone_number: required
      appointment_segments: required
- name: retrieve_booking
  endpoint:
    method: GET
- name: booking
  endpoint:
    path: /bookings
    method: GET
    data_selector: booking
- name: list_bookings
  endpoint:
    path: /listBookings
    method: GET
    params:
      customer_id: customer_id
      team_member_id: team_member_id
      location_id: location_id
      start_at_min: start_at_min
      start_at_max: start_at_max
- name: booking_created
  endpoint:
    path: /v2/bookings
    method: POST
    data_selector: data.object.booking
    params:
      events: booking.created
- name: booking_updated
  endpoint:
    path: /v2/bookings
    method: PUT
    data_selector: data.object.booking
    params:
      events: booking.updated
- name: bookings
  endpoint:
    method: GET
- name: custom_attributes
  endpoint:
    method: POST
- name: locations
  endpoint:
    method: GET
- name: team
  endpoint:
    method: GET
- name: customers
  endpoint:
    method: POST
- name: catalog
  endpoint:
    method: POST
- name: update_order
  endpoint:
    path: /v2/orders/{{ORDER_ID}}
    method: PUT
    data_selector: order
    params:
      version: '{{CURRENT_VERSION_NUMBER}}'
      line_items:
      - uid: '{{LINE_ITEM_UID}}'
        remove: true
- name: update_invoice
  endpoint:
    path: /v2/invoices/{{INVOICE_ID}}
    method: PUT
    data_selector: invoice
    params:
      payment_requests:
      - uid: '{{ELEMENT_UID}}'
        remove: true
- name: payments
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: payment
- name: orders
  endpoint:
    path: /v2/orders
    method: POST
    data_selector: order
- name: customers
  endpoint:
    path: /v2/customers
    method: POST
    data_selector: customer
- name: subscriptions
  endpoint:
    path: /v2/subscriptions
    method: POST
    data_selector: subscription
- name: Address
- name: Money
- name: card_events
  endpoint:
    path: /cards-api/manage-card-on-file-declines
    method: POST
    data_selector: data
- name: retrieve_card
  endpoint:
    path: /RetrieveCard
    method: GET
    params:
      card_id: specify_card_id_here
- name: list_cards
  endpoint:
    path: /ListCards
    method: GET
    params:
      customer_id: specify_customer_id_here
      is_disabled: specify_boolean_here
- name: disable_card
  endpoint:
    path: /DisableCard
    method: GET
    params:
      card_id: specify_card_id_here
- name: create_card
  endpoint:
    path: /v2/cards/create
    method: POST
    data_selector: card
    params:
      source_id: '{{ source_id }}'
      customer_id: '{{ customer_id }}'
      verification_token: '{{ verification_token }}'
- name: list_cards
  endpoint:
    path: /v2/cards/list
    method: GET
    data_selector: cards
- name: create_payment
  endpoint:
    path: /v2/payments/create
    method: POST
    data_selector: payment
    params:
      source_id: '{{ card_id }}'
      customer_id: '{{ customer_id }}'
- name: customer
  endpoint:
    path: /CreateCustomer
    method: POST
    data_selector: customer
- name: card
  endpoint:
    path: /CreateCard
    method: POST
    data_selector: card
- name: payment
  endpoint:
    path: /CreatePayment
    method: POST
    data_selector: ''
- name: customer
  endpoint:
    path: /CreateCustomer
    method: POST
    data_selector: customer
- name: card
  endpoint:
    path: /CreateCard
    method: POST
    data_selector: card
- name: cash_drawer_shifts
  endpoint:
    path: /v2/cash-drawer-shifts
    method: GET
    data_selector: cash_drawer_shifts
    params:
      sort_order: ASC
      begin_time: '2019-11-01T00:00:00-08:00'
      end_time: '2019-11-30T00:00:00-08:00'
      limit: 200
      cursor: ''
- name: cash_drawer_shift_events
  endpoint:
    path: /v2/cash-drawer-shift-events
    method: GET
    data_selector: cash_drawer_shift_events
    params:
      limit: 200
      cursor: ''
- name: catalog_object
  endpoint:
    path: /v2/catalog/object
    method: POST
- name: catalog_batch_upsert
  endpoint:
    path: /v2/catalog/batch-upsert
    method: POST
- name: archive_catalog_item
  endpoint:
    path: /upsert-catalog-object
    method: POST
    params:
      is_archived: true
- name: retrieve_archived_catalog_item
  endpoint:
    path: /retrieve-catalog-object
    method: POST
- name: search_archived_catalog_items
  endpoint:
    path: /search-catalog-items
    method: POST
    params:
      archived_state: ARCHIVED_STATE_ARCHIVED
- name: catalog_item
  endpoint:
    path: /UpsertCatalogObject
    method: POST
    data_selector: item_data
    params:
      type: ITEM
- name: item_variation
  endpoint:
    path: /UpsertCatalogObject
    method: POST
    data_selector: item_variation_data
    params:
      type: ITEM_VARIATION
- name: item_discount
  endpoint:
    path: /UpsertCatalogObject
    method: POST
    data_selector: discount_data
    params:
      type: DISCOUNT
- name: catalog_category
  endpoint:
    method: GET
    params:
      CategoryType: REGULAR_CATEGORY
- name: upsert_catalog_object
  endpoint:
    method: POST
- name: retrieve_catalog_object
  endpoint:
    method: GET
    params:
      include_category_path_to_root: true
- name: batch_retrieve_catalog_objects
  endpoint:
    method: POST
- name: search_catalog_objects
  endpoint:
    method: POST
- name: customer_group
  endpoint:
    path: /customers/groups/list
    method: GET
    data_selector: groups
- name: catalog_discount
  endpoint:
    path: /catalog/object/upsert
    method: POST
- name: catalog_product_set
  endpoint:
    path: /catalog/object/upsert
    method: POST
- name: catalog_pricing_rule
  endpoint:
    path: /catalog/object/upsert
    method: POST
- name: delete_catalog_object
  endpoint:
    path: /docs/catalog-api/delete-catalog-objects
    method: DELETE
    data_selector: deleted_object_ids
- name: batch_delete_catalog_objects
  endpoint:
    path: /docs/catalog-api/delete-catalog-objects
    method: DELETE
    data_selector: deleted_object_ids
- name: search_catalog_objects
  endpoint:
    path: /docs/catalog-api/delete-catalog-objects
    method: GET
    data_selector: objects
    params:
      include_deleted_objects: true
- name: catalog_item
  endpoint:
    path: /catalog/item
    method: GET
    data_selector: items
- name: catalog_item_variation
  endpoint:
    path: /catalog/item-variation
    method: GET
    data_selector: variations
- name: catalog_modifier
  endpoint:
    path: /catalog/modifier
    method: GET
    data_selector: modifiers
- name: catalog_category
  endpoint:
    path: /catalog/category
    method: GET
    data_selector: categories
- name: catalog_discount
  endpoint:
    path: /catalog/discount
    method: GET
    data_selector: discounts
- name: catalog_pricing_rule
  endpoint:
    path: /catalog/pricing-rule
    method: GET
    data_selector: pricing_rules
- name: catalog_tax
  endpoint:
    path: /catalog/tax
    method: GET
    data_selector: taxes
- name: catalog_quick_amounts_settings
  endpoint:
    path: /catalog/quick-amounts-settings
    method: GET
    data_selector: quick_amounts_settings
- name: catalog_modifier
  endpoint:
    path: /catalog-object
    method: POST
    data_selector: CatalogModifier
- name: catalog_modifier_list
  endpoint:
    path: /catalog-object
    method: POST
    data_selector: CatalogModifierList
- name: upsert_catalog_object
  endpoint:
    path: /upsert-catalog-object
    method: POST
- name: batch_upsert_catalog_objects
  endpoint:
    path: /batch-upsert-catalog-objects
    method: POST
- name: catalog_item
  endpoint:
    path: /v2/catalog/object
    method: POST
    data_selector: variations
- name: item_variation
  endpoint:
    path: /v2/catalog/object
    method: POST
    data_selector: item_variation_data
- name: catalog_item_option
  endpoint:
    path: /v2/catalog/object
    method: POST
    data_selector: item_option_values
- name: update_catalog_image
  endpoint:
    path: /UpdateCatalogImage
    method: POST
- name: upsert_catalog_object
  endpoint:
    path: /UpsertCatalogObject
    method: POST
- name: delete_catalog_object
  endpoint:
    path: /DeleteCatalogObject
    method: POST
- name: root_menu_categories
  endpoint:
    path: /search-catalog-objects
    method: POST
    data_selector: objects
    params:
      category_type: '2'
      is_top_level: '1'
- name: child_menu_categories
  endpoint:
    path: /search-catalog-objects
    method: POST
    data_selector: objects
    params:
      category_type: MENU_CATEGORY
- name: menu_items
  endpoint:
    path: /search-catalog-objects
    method: POST
    data_selector: objects
    params:
      include_related_objects: true
- name: menu_category_updates
  endpoint:
    path: /search-catalog-objects
    method: POST
    data_selector: objects
    params:
      updated_at: after 2025-06-11T07:00:00Z
- name: menu_item_changes
  endpoint:
    path: /search-catalog-objects
    method: POST
    data_selector: objects
    params:
      updated_at: after 2025-06-10T19:00:00Z
- name: retrieve_catalog_object
  endpoint:
    method: GET
    params:
      include_related_objects: true
- name: batch_retrieve_catalog_objects
  endpoint:
    method: GET
- name: list_catalog
  endpoint:
    method: GET
- name: search_catalog_objects
  endpoint:
    method: GET
- name: search_catalog_items
  endpoint:
    path: /docs/catalog-api/search-catalog-items
    method: GET
    params:
      category_ids: category_token
      custom_attribute_filters:
      - custom_attribute_definition_token: NPQJUZVDBE6EKZ25EU3GPLC5
      - key: cocoa_brand
      - string_filter: Cocoa Magic
      enabled_location_ids: location_token
      product_types: product_type_token
      stock_levels: stock_level_token
      text_filter: search_term
- name: catalog_objects
  endpoint:
    path: /search-catalog-objects
    method: POST
    data_selector: items
    params:
      begin_time: last modified time
      include_category_path_to_root: true
      include_deleted_objects: false
      include_related_objects: true
      object_types: specified types
- name: search_catalog_items
  endpoint:
    path: /search-catalog-items
    method: POST
    data_selector: items
    params:
      include_custom_attributes: true
- name: search_catalog_objects
  endpoint:
    path: /search-catalog-objects
    method: POST
    data_selector: objects
    params:
      include_deleted_objects: true
- name: catalog_sync
  endpoint:
    path: /search-catalog-objects
    method: GET
    data_selector: objects
    params:
      incremental: begin_time
- name: upsert_catalog_object
  endpoint:
    path: /UpsertCatalogObject
    method: POST
- name: batch_upsert_catalog_objects
  endpoint:
    path: /BatchUpsertCatalogObjects
    method: POST
- name: retrieve_catalog_object
  endpoint:
    path: /RetrieveCatalogObject
    method: GET
- name: catalog_image
  endpoint:
    path: /CreateCatalogImage
    method: POST
    data_selector: image
    params:
      object_id: null
      is_primary: null
- name: catalog_version_updated
  endpoint:
    path: /catalog/version/updated
    method: POST
    data_selector: data
- name: catalog_item
  endpoint:
    method: POST
    params:
      idempotency_key: required
- name: merchant_settings
  endpoint:
    path: /merchant/settings
    method: GET
    data_selector: merchant_settings
- name: update_merchant_settings
  endpoint:
    path: /merchant/settings
    method: POST
    data_selector: merchant_settings
- name: location_settings
  endpoint:
    path: /location/settings/{location_id}
    method: GET
    data_selector: location_settings
- name: update_location_settings
  endpoint:
    path: /location/settings/{location_id}
    method: POST
    data_selector: location_settings
- name: payment_link
  endpoint:
    path: /UpdatePaymentLink
    method: POST
- name: payment_links
  endpoint:
    path: /RetrievePaymentLinks
    method: GET
- name: payment_links
  endpoint:
    path: /ListPaymentLinks
    method: GET
- name: payment_link
  endpoint:
    path: /DeletePaymentLinks
    method: DELETE
- name: create_payment_link
  endpoint:
    path: /v2/online-checkout/one-time-links
    method: POST
    data_selector: payment_link
    params:
      checkout_options:
        ask_for_shipping_address: true
        allow_tipping: true
        enable_coupon: false
        enable_loyalty: false
      pre_populated_data:
        buyer_email: '{{email}}'
        buyer_phone_number: '{{phone_number}}'
      app_fee_money:
        amount: 100
        currency: USD
      shipping_fee:
        amount: 499
        currency: USD
- name: create_payment_link
  endpoint:
    path: /CreatePaymentLink
    method: POST
    params:
      price_money: price
      subscription_plan_id: ID of the subscription plan variation
- name: upsert_catalog_object
  endpoint:
    path: /UpsertCatalogObject
    method: POST
- name: list_cards
  endpoint:
    path: /ListCards
    method: GET
- name: retrieve_order
  endpoint:
    path: /RetrieveOrder
    method: GET
- name: search_subscriptions
  endpoint:
    path: /SearchSubscriptions
    method: GET
- name: create_payment_link
  endpoint:
    path: /{short_url_id}
    method: GET
- name: order
  endpoint:
    path: /order
    method: POST
- name: payment_link
  endpoint:
    path: /payment_link
    method: POST
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: cash_drawer
  endpoint:
    path: /cash-drawer
    method: GET
- name: bookings
  endpoint:
    path: /bookings
    method: GET
- name: catalog
  endpoint:
    path: /catalog
    method: GET
- name: square_online_snippets
  endpoint:
    path: /square-online-snippets
    method: GET
- name: customer
  endpoint:
    method: GET
    params:
      count: total customer count
- name: create_customer
  endpoint:
    method: POST
- name: bulk_create_customers
  endpoint:
    method: POST
- name: search_customers
  endpoint:
    method: GET
    params:
      incremental: phone number, email address, reference ID
- name: retrieve_customer
  endpoint:
    method: GET
- name: bulk_retrieve_customers
  endpoint:
    method: GET
- name: list_customers
  endpoint:
    method: GET
- name: update_customer
  endpoint:
    method: PUT
- name: bulk_update_customers
  endpoint:
    method: PUT
- name: delete_customer
  endpoint:
    method: DELETE
- name: bulk_delete_customers
  endpoint:
    method: DELETE
- name: search_orders
  endpoint:
    method: GET
- name: list_customers
  endpoint:
    path: /ListCustomers
    method: GET
    data_selector: customers
    params: {}
- name: search_customers
  endpoint:
    path: /SearchCustomers
    method: GET
    data_selector: customers
    params:
      phone_number: ''
      email_address: ''
      creation_source: ''
      created_at: ''
      updated_at: ''
      reference_id: ''
      group_ids: ''
      segment_ids: ''
      custom_attribute: ''
- name: retrieve_customer
  endpoint:
    path: /RetrieveCustomer
    method: GET
    data_selector: customer
    params:
      id: ''
- name: bulk_retrieve_customers
  endpoint:
    path: /BulkRetrieveCustomers
    method: GET
    data_selector: customers
    params:
      id: ''
- name: customer
  endpoint:
    path: /customers
    method: GET
    data_selector: version
    params: {}
- name: update_customer
  endpoint:
    path: /customers/update
    method: POST
    data_selector: version
    params:
      required:
      - version
- name: bulk_update_customers
  endpoint:
    path: /customers/bulk-update
    method: POST
    data_selector: version
    params:
      required:
      - version
- name: delete_customer
  endpoint:
    path: /customers/delete
    method: DELETE
    data_selector: version
    params:
      required:
      - version
- name: UpdateCustomer
  endpoint:
    path: /v2/customers/{CUSTOMER_ID}
    method: PUT
    data_selector: address
    params:
      version: 1
- name: CreateCustomer
  endpoint:
    path: /v2/customers
    method: POST
    data_selector: customer
- name: UpdateCustomer
  endpoint:
    path: /v2/customers/{customer_id}
    method: PUT
    data_selector: customer
- name: SearchCustomers
  endpoint:
    path: /v2/customers/search
    method: POST
    data_selector: customers
- name: RetrieveCustomer
  endpoint:
    path: /v2/customers/{customer_id}
    method: GET
    data_selector: customer
- name: ListCustomers
  endpoint:
    path: /v2/customers
    method: GET
    data_selector: customers
- name: create_customer
  endpoint:
    path: /CreateCustomer
    method: POST
- name: bulk_create_customers
  endpoint:
    path: /BulkCreateCustomers
    method: POST
- name: search_customers
  endpoint:
    path: /SearchCustomers
    method: GET
- name: retrieve_customer
  endpoint:
    path: /RetrieveCustomer
    method: GET
- name: update_customer
  endpoint:
    path: /UpdateCustomer
    method: PUT
- name: delete_customer
  endpoint:
    path: /DeleteCustomer
    method: DELETE
- name: bulk_retrieve_customers
  endpoint:
    path: /BulkRetrieveCustomers
    method: POST
- name: bulk_update_customers
  endpoint:
    path: /BulkUpdateCustomers
    method: PUT
- name: bulk_delete_customers
  endpoint:
    path: /BulkDeleteCustomers
    method: DELETE
- name: list_customers
  endpoint:
    path: /ListCustomers
    method: GET
- name: search_orders
  endpoint:
    path: /SearchOrders
    method: GET
- name: list_customers
  endpoint:
    path: /ListCustomers
    method: GET
    data_selector: customer_profiles
- name: search_customers
  endpoint:
    path: /SearchCustomers
    method: GET
    data_selector: customer_profiles
    params:
      phone_number: ''
      email_address: ''
      creation_source: ''
      created_at: ''
      updated_at: ''
      reference_id: ''
      group_ids: ''
      segment_ids: ''
      custom_attribute: ''
- name: retrieve_customer
  endpoint:
    path: /RetrieveCustomer
    method: GET
    data_selector: customer
- name: bulk_retrieve_customers
  endpoint:
    path: /BulkRetrieveCustomers
    method: GET
    data_selector: customer_profiles
- name: customer_profile
  endpoint:
    method: GET
    data_selector: version
    params: {}
- name: update_customer
  endpoint:
    method: PUT
    data_selector: version
    params: {}
- name: bulk_update_customers
  endpoint:
    method: PUT
    data_selector: version
    params: {}
- name: delete_customer
  endpoint:
    method: DELETE
    data_selector: version
    params: {}
- name: update_customer
  endpoint:
    path: /v2/customers/{CUSTOMER_ID}
    method: PUT
- name: create_customer
  endpoint:
    path: /v2/customers
    method: POST
    data_selector: customer
    params:
      birthday: YYYY-MM-DD or MM-DD
      given_name: max 300 characters
      family_name: max 300 characters
      company_name: max 500 characters
      nickname: max 100 characters
      reference_id: max 100 characters
      address.first_name: max 300 characters
      address.last_name: max 300 characters
      address.address_line_1: max 500 characters
      address.address_line_2: max 500 characters
      address.address_line_3: max 500 characters
      address.administrative_district_level_1: max 200 characters
      address.administrative_district_level_2: max 200 characters
      address.administrative_district_level_3: max 200 characters
      address.locality: max 300 characters
      address.sublocality: max 200 characters
      address.sublocality_2: max 200 characters
      address.sublocality_3: max 200 characters
      address.postal_code: max 12 characters
- name: update_customer
  endpoint:
    path: /v2/customers/{customer_id}
    method: PUT
    data_selector: customer
    params:
      birthday: YYYY-MM-DD or MM-DD
      given_name: max 300 characters
      family_name: max 300 characters
      company_name: max 500 characters
      nickname: max 100 characters
      reference_id: max 100 characters
      address.first_name: max 300 characters
      address.last_name: max 300 characters
      address.address_line_1: max 500 characters
      address.address_line_2: max 500 characters
      address.address_line_3: max 500 characters
      address.administrative_district_level_1: max 200 characters
      address.administrative_district_level_2: max 200 characters
      address.administrative_district_level_3: max 200 characters
      address.locality: max 300 characters
      address.sublocality: max 200 characters
      address.sublocality_2: max 200 characters
      address.sublocality_3: max 200 characters
      address.postal_code: max 12 characters
- name: customer_profiles
  endpoint:
    path: /customers
    method: GET
- name: customer_custom_attributes
  endpoint:
    path: /customers/custom-attributes
    method: GET
- name: customer_groups
  endpoint:
    path: /customers/groups
    method: GET
- name: gift_cards
  endpoint:
    path: /gift-cards
    method: GET
- name: order_ahead
  endpoint:
    path: /order-ahead
    method: GET
- name: bookings
  endpoint:
    path: /bookings
    method: GET
- name: manage_loyalty_rewards
  endpoint:
    path: /loyalty-rewards
    method: GET
- name: search_customer_profiles
  endpoint:
    path: /customers/search
    method: GET
- name: oauth_api
  endpoint:
    path: /oauth2/token
    method: POST
- name: graphql
  endpoint:
    path: /graphql
    method: POST
- name: webhook_subscriptions_api
  endpoint:
    path: /webhooks/subscriptions
    method: POST
- name: events_api
  endpoint:
    path: /events
    method: POST
- name: locations
  endpoint:
    path: /ListLocations
    method: GET
- name: customer
  endpoint:
    path: /CreateCustomer
    method: POST
- name: applications
  endpoint:
    path: /developer/applications
    method: GET
- name: sandbox_dashboard
  endpoint:
    path: /sandbox/dashboard
    method: GET
- name: team
  endpoint:
    path: /team
    method: GET
- name: labor
  endpoint:
    path: /labor
    method: GET
- name: Orders
- name: Catalog
- name: Customers
- name: Payments
- name: bookings
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: bookingAvailability
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: locationBookingProfiles
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: businessBookingProfile
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: teamMemberBookingProfiles
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: cardsOnFile
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: cashDrawerShiftEvents
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: cashDrawerShifts
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: catalog
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: catalogItems
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: customerCustomAttributeDefinitions
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: customers
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: devices
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: giftCards
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: giftCardActivities
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: inventoryChanges
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: inventoryCounts
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: breakTypes
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: scheduledShifts
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: teamMemberWages
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: timecards
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: workweekConfigs
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: loyaltyAccounts
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: loyaltyEvents
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: loyaltyProgram
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: loyaltyPromotions
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: loyaltyRewards
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: currentMerchant
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: merchants
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: orders
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: payments
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: payoutEntries
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: payouts
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: paymentRefunds
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: subscriptions
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: subscriptionEvents
  endpoint:
    path: /public/graphql
    method: POST
    data_selector: data
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
- name: webhook_event
  endpoint:
    path: /webhooks/events
    method: POST
- name: CreatePayment
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: ''
- name: loyalty
  endpoint:
    method: GET
- name: reports
  endpoint:
    method: GET
- name: transactions
  endpoint:
    method: GET
- name: items
  endpoint:
    method: GET
- name: customers
  endpoint:
    method: GET
- name: team
  endpoint:
    method: GET
- name: orders
  endpoint:
    method: GET
- name: appointments
  endpoint:
    method: GET
- name: online
  endpoint:
    method: GET
- name: online_checkout
  endpoint:
    method: GET
- name: invoices
  endpoint:
    method: GET
- name: gift_cards
  endpoint:
    method: GET
- name: subscriptions
  endpoint:
    method: GET
- name: webhook_event_logs
  endpoint:
    path: /docs/devtools/webhook-logs
    method: GET
    data_selector: webhook event logs
- name: dispute
  endpoint:
    path: /disputes
    method: GET
- name: accept_dispute
  endpoint:
    path: /accept-dispute
    method: POST
- name: submit_evidence
  endpoint:
    path: /submit-evidence
    method: POST
- name: create_dispute_evidence_file
  endpoint:
    path: /create-dispute-evidence-file
    method: POST
- name: create_dispute_evidence_text
  endpoint:
    path: /create-dispute-evidence-text
    method: POST
- name: list_dispute_evidence
  endpoint:
    path: /list-dispute-evidence
    method: GET
- name: retrieve_dispute_evidence
  endpoint:
    path: /retrieve-dispute-evidence
    method: GET
- name: delete_dispute_evidence
  endpoint:
    path: /delete-dispute-evidence
    method: DELETE
- name: create_payment
  endpoint:
    path: /sandbox-testing
    method: POST
    data_selector: payment
- name: list_disputes
  endpoint:
    path: /list-disputes
    method: GET
    data_selector: disputes
- name: accept_dispute
  endpoint:
    path: /accept-dispute
    method: POST
    data_selector: dispute
- name: submit_evidence
  endpoint:
    path: /submit-evidence
    method: POST
    data_selector: dispute
- name: retrieve_dispute
  endpoint:
    path: /retrieve-dispute
    method: GET
    data_selector: dispute
- name: checkout
  endpoint:
    path: /v2/checkout
    method: POST
- name: payments
  endpoint:
    path: /v2/payments
    method: POST
- name: refunds
  endpoint:
    path: /v2/refunds
    method: POST
- name: orders
  endpoint:
    path: /v2/orders
    method: POST
- name: catalog
  endpoint:
    path: /v2/catalog
    method: POST
- name: customers
  endpoint:
    path: /v2/customers
    method: POST
- name: inventory
  endpoint:
    path: /v2/inventory
    method: POST
- name: subscriptions
  endpoint:
    path: /v2/subscriptions
    method: POST
- name: search_events
  endpoint:
    path: /SearchEvents
    method: GET
    params:
      incremental: created_at
- name: enable_events
  endpoint:
    path: /EnableEvents
    method: GET
- name: disable_events
  endpoint:
    path: /DisableEvents
    method: GET
- name: list_event_types
  endpoint:
    path: /ListEventTypes
    method: GET
- name: payment
  endpoint:
    path: /create-payment
    method: POST
    data_selector: Payment
- name: payments
  endpoint:
    method: POST
- name: commerce
  endpoint:
    method: POST
- name: customers
  endpoint:
    method: POST
- name: staff
  endpoint:
    method: POST
- name: gift_card
  endpoint:
    path: /gift-cards
    method: POST
    data_selector: gift_card
- name: gift_card_activity
  endpoint:
    path: /gift-card-activities
    method: POST
    data_selector: gift_card_activity
- name: list_gift_card_activities
  endpoint:
    path: /list-gift-card-activities
    method: GET
    data_selector: activities
- name: merchants
  endpoint:
    path: /merchants
    method: POST
    data_selector: data.merchants.nodes
    params:
      filter:
        id:
          equalToAnyOf:
          - <MERCHANT_ID>
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: data.customers.nodes
    params:
      filter:
        merchantId:
          equalToAnyOf:
          - <MERCHANT_ID>
      first: 10
- name: merchant_status_and_capabilities
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.merchants.nodes
    params:
      filter:
        id: $merchantId
- name: specific_payment
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.payments.nodes
    params:
      filter:
        id: $paymentId
- name: catalog_query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.catalog.nodes
    params:
      filter:
        merchantId: $merchantId
        type:
        - CATEGORY
        - ITEM
        - ITEM_VARIATION
- name: orders
  endpoint:
    method: POST
    data_selector: data.orders.nodes
- name: payment_history
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.payments.edges
    params:
      incremental: createdAt
- name: processing_fees
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.orders.nodes
    params:
      incremental: closedAt
- name: app_fees
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.payments.edges
    params:
      incremental: createdAt
- name: order_details
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.orders.nodes
- name: payout_entries
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.payoutEntries.edges
    params:
      incremental: effectiveAt
- name: digital_wallets_integration
  endpoint:
    method: GET
- name: card_entry_activity
  endpoint:
    path: CardEntry.startCardEntryActivity
    method: POST
- name: card_nonce_result
  endpoint:
    path: CardEntry.handleActivityResult
    method: POST
- name: payment_token_processing
  endpoint:
    path: myBackendService
    method: POST
- name: application
  endpoint:
    path: /docs/in-app-payments-sdk/build-on-ios
    method: GET
- name: payment_token_generation
  endpoint:
    method: POST
- name: create_payment
  endpoint:
    path: /v2/payments
    method: POST
- name: square_application_id
  endpoint:
    path: /credentials
    method: GET
- name: in_app_payments_sdk_integration
  endpoint:
    method: POST
- name: sandbox_credentials
  endpoint:
    method: GET
- name: create_card_on_file
  endpoint:
    path: /v2/customers/{customerID}/cards
    method: POST
    data_selector: ''
    params: {}
- name: create_payment
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: ''
    params: {}
- name: payments
  endpoint:
    path: /v2/payments
    method: POST
- name: orders
  endpoint:
    path: /v2/orders
    method: POST
- name: catalog
  endpoint:
    path: /v2/catalog
    method: POST
- name: inventory
  endpoint:
    path: /v2/inventory
    method: POST
- name: customers
  endpoint:
    path: /v2/customers
    method: POST
- name: checkout
  endpoint:
    path: /checkout
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: invoices
  endpoint:
    path: /invoices
    method: POST
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: create_terminal_action
  endpoint:
    path: /terminal/action/create
    method: POST
- name: order
  endpoint:
    path: /orders
    method: POST
    data_selector: orders
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payments
- name: locations
  endpoint:
    path: /locations
    method: GET
- name: create_payment
  endpoint:
    path: /create-payment
    method: POST
- name: upsert_catalog_object
  endpoint:
    method: POST
- name: batch_change_inventory
  endpoint:
    method: POST
- name: search_catalog_items
  endpoint:
    method: GET
- name: stock_conversion
  endpoint:
    path: /inventory-api/enable-stock-conversion
    method: POST
    params:
      catalog_tax_object_id: KBPWWOXZHOGNOSQ2LIVS4H27
      wine_category_id: JXVXTYYDLZRPXMQ7SMNJXVVG
      bottle_measurement_unit_id: SQKOHTEZUX2QWIZXMH3Z5WGW
      glass_measurement_unit_id: DPCQ2HA44EN3EIJT3WEXN5FE
      stockable_variation_id: PMUUU2EFXNRBKTUAMTC5SQTZ
      sellable_only_variation_id: IUD2QMXX4K62W35HW5CVQGL6
- name: batch_change_inventory
  endpoint:
    path: /inventory-api/batch-change-inventory
    method: POST
    params:
      from_state: IN_STOCK
      to_state: SOLD
- name: BatchChangeInventory
  endpoint:
    path: /inventory/batch-change-inventory
    method: POST
- name: InventoryPhysicalCount
  endpoint:
    path: /inventory/physical-count
    method: POST
- name: retrieve_inventory_adjustment
  endpoint:
    path: /v2/inventory/adjustments/{adjustment_id}
    method: GET
- name: batch_change_inventory
  endpoint:
    path: /v2/inventory/changes/batch-create
    method: POST
- name: batch_retrieve_inventory_changes
  endpoint:
    path: /v2/inventory/changes/batch-retrieve
    method: POST
- name: batch_retrieve_inventory_counts
  endpoint:
    path: /v2/inventory/counts/batch-retrieve
    method: POST
- name: retrieve_inventory_physical_count
  endpoint:
    path: /v2/inventory/physical-counts/{physical_count_id}
    method: GET
- name: catalog_object
  endpoint:
    path: /catalog/object
    method: GET
    data_selector: object
    params: {}
- name: catalog_version_updated
  endpoint:
    path: /webhooks
    method: POST
    data_selector: data.object.catalog_version
    params: {}
- name: inventory_event_notification
  endpoint:
    path: /webhook
    method: POST
    data_selector: data
- name: create_invoice_attachment
  endpoint:
    path: /v2/invoices/create-invoice-attachment
    method: POST
- name: delete_invoice_attachment
  endpoint:
    path: /v2/invoices/delete-invoice-attachment
    method: POST
- name: cancel_invoice
  endpoint:
    path: /cancel-invoice
    method: POST
    params:
      state:
      - SCHEDULED
      - UNPAID
      - PARTIALLY_PAID
- name: delete_invoice
  endpoint:
    path: /delete-invoice
    method: POST
    params:
      state:
      - DRAFT
- name: create_invoice
  endpoint:
    path: /v2/invoices/create
    method: POST
    data_selector: invoice
    params:
      order_id: '{{ order_id }}'
      primary_recipient.customer_id: '{{ customer_id }}'
      payment_requests: '{{ payment_requests }}'
      delivery_method: '{{ delivery_method }}'
      accepted_payment_methods: '{{ accepted_payment_methods }}'
      idempotency_key: '{{ idempotency_key }}'
- name: publish_invoice
  endpoint:
    path: /v2/invoices/publish
    method: POST
    data_selector: invoice
    params:
      invoice_id: '{{ invoice_id }}'
      version: '{{ version }}'
      idempotency_key: '{{ idempotency_key }}'
- name: invoice
  endpoint:
    path: /v2/invoices
    method: POST
    data_selector: invoice
    params:
      order_id: '{{ order_id }}'
      location_id: '{{ location_id }}'
      primary_recipient: '{ ''customer_id'': ''{{ customer_id }}'' }'
      payment_requests: '{{ payment_requests }}'
      accepted_payment_methods: '{ ''card'': true, ''square_gift_card'': true, ''buy_now_pay_later'':
        true, ''cash_app_pay'': true }'
      delivery_method: '{{ delivery_method }}'
- name: invoice_payment
  endpoint:
    path: /pay-invoice/invtmp:5e22a2c2-47c1-46d6-b061-808764dfe2b9
    method: GET
- name: invoice_payment
  endpoint:
    path: /v2/payments/{payment_id}
    method: GET
- name: invoice
  endpoint:
    path: /v2/invoices/{invoice_id}
    method: GET
- name: order
  endpoint:
    path: /v2/orders/{order_id}
    method: GET
- name: invoice
  endpoint:
    path: /GetInvoice
    method: GET
    data_selector: invoice
    params:
      invoice_id: '{{ invoice_id }}'
- name: order
  endpoint:
    path: /RetrieveOrder
    method: GET
    data_selector: order
    params:
      order_id: '{{ order_id }}'
- name: refund_payment
  endpoint:
    path: /RefundPayment
    method: POST
    data_selector: refund
    params:
      payment_id: '{{ payment_id }}'
      amount: '{{ amount_to_refund }}'
- name: invoice
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
    params:
      limit: 3
- name: list_invoices
  endpoint:
    path: /list-invoices
    method: GET
    data_selector: invoices
- name: search_invoices
  endpoint:
    path: /search-invoices
    method: GET
    data_selector: invoices
    params:
      sort: INVOICE_SORT_DATE
- name: update_invoice
  endpoint:
    path: /update-invoice
    method: POST
    data_selector: invoice
- name: create_invoice_attachment
  endpoint:
    path: /create-invoice-attachment
    method: POST
- name: delete_invoice_attachment
  endpoint:
    path: /delete-invoice-attachment
    method: POST
- name: search_invoices
  endpoint:
    path: /search-invoices
    method: POST
- name: list_invoices
  endpoint:
    path: /list-invoices
    method: GET
- name: get_invoice
  endpoint:
    path: /get-invoice
    method: GET
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
- name: card
  endpoint:
    path: /customers/{customer_id}/cards
    method: POST
    data_selector: card
- name: order
  endpoint:
    path: /orders
    method: POST
    data_selector: order
- name: invoice
  endpoint:
    path: /invoices
    method: POST
    data_selector: invoice
- name: publish_invoice
  endpoint:
    path: /invoices/{invoice_id}/publish
    method: POST
    data_selector: invoice
- name: get_invoice
  endpoint:
    path: /invoices/{invoice_id}
    method: GET
    data_selector: invoice
- name: team_member_wage
  endpoint:
    path: /GetTeamMemberWage
    method: GET
- name: list_team_member_wages
  endpoint:
    path: /ListTeamMemberWages
    method: GET
- name: shift
  endpoint:
    path: /CreateShift
    method: POST
- name: update_shift
  endpoint:
    path: /UpdateShift
    method: POST
- name: timecard
  endpoint:
    path: /v2/labor/timecards
    method: GET
- name: shift
  endpoint:
    path: /v2/labor/shifts
    method: GET
- name: location_custom_attribute_definition
  endpoint:
    path: /services/data/vXX.X/sobjects/LocationCustomAttributeDefinition
    method: POST
    data_selector: custom_attribute_definition
    params: {}
- name: update_location_custom_attribute_definition
  endpoint:
    path: /services/data/vXX.X/sobjects/LocationCustomAttributeDefinition/{key}
    method: PATCH
    data_selector: custom_attribute_definition
    params: {}
- name: list_location_custom_attribute_definitions
  endpoint:
    path: /services/data/vXX.X/sobjects/LocationCustomAttributeDefinition
    method: GET
    data_selector: custom_attribute_definitions
    params:
      limit: 100
- name: retrieve_location_custom_attribute_definition
  endpoint:
    path: /services/data/vXX.X/sobjects/LocationCustomAttributeDefinition/{key}
    method: GET
    data_selector: custom_attribute_definition
    params: {}
- name: delete_location_custom_attribute_definition
  endpoint:
    path: /services/data/vXX.X/sobjects/LocationCustomAttributeDefinition/{key}
    method: DELETE
    data_selector: {}
    params: {}
- name: location_custom_attribute
  endpoint:
    path: /v2/locations/{location_id}/custom-attributes/{key}
    method: GET
- name: upsert_location_custom_attribute
  endpoint:
    path: /v2/locations/{location_id}/custom-attributes/{key}
    method: POST
- name: bulk_upsert_location_custom_attributes
  endpoint:
    path: /v2/locations/custom-attributes/bulk-upsert
    method: POST
- name: list_location_custom_attributes
  endpoint:
    path: /v2/locations/{location_id}/custom-attributes
    method: GET
- name: retrieve_location_custom_attribute
  endpoint:
    path: /v2/locations/{location_id}/custom-attributes/{key}
    method: GET
- name: delete_location_custom_attribute
  endpoint:
    path: /v2/locations/{location_id}/custom-attributes/{key}
    method: DELETE
- name: bulk_delete_location_custom_attributes
  endpoint:
    path: /v2/locations/custom-attributes/bulk-delete
    method: POST
- name: location_custom_attribute_definition
  endpoint:
    path: /CreateLocationCustomAttributeDefinition
    method: POST
- name: location_custom_attribute
  endpoint:
    path: /UpsertLocationCustomAttribute
    method: POST
- name: retrieve_location_custom_attribute
  endpoint:
    path: /RetrieveLocationCustomAttribute
    method: GET
- name: locations
  endpoint:
    path: /v2/locations
    method: GET
- name: location
  endpoint:
    path: /v2/locations/{location_id}
    method: GET
- name: create_location
  endpoint:
    path: /v2/locations
    method: POST
- name: update_location
  endpoint:
    path: /v2/locations/{location_id}
    method: PUT
- name: list_locations
  endpoint:
    path: /v2/locations
    method: GET
- name: loyalty_program
  endpoint:
    path: /loyalty/program
    method: GET
- name: loyalty_account
  endpoint:
    path: /loyalty/account
    method: POST
- name: loyalty_promotion
  endpoint:
    path: /loyalty/promotion
    method: POST
- name: loyalty_reward
  endpoint:
    path: /loyalty/reward
    method: POST
- name: merchant_custom_attribute_definition
  endpoint:
    path: /merchant-custom-attribute-definitions
    method: POST
    data_selector: custom_attribute_definition
- name: merchant_custom_attribute_definitions
  endpoint:
    path: /merchant-custom-attribute-definitions
    method: GET
    data_selector: custom_attribute_definitions
- name: update_merchant_custom_attribute_definition
  endpoint:
    path: /merchant-custom-attribute-definitions/{key}
    method: PATCH
    data_selector: custom_attribute_definition
- name: delete_merchant_custom_attribute_definition
  endpoint:
    path: /merchant-custom-attribute-definitions/{key}
    method: DELETE
    data_selector: custom_attribute_definition
- name: retrieve_merchant_custom_attribute_definition
  endpoint:
    path: /merchant-custom-attribute-definitions/{key}
    method: GET
    data_selector: custom_attribute_definition
- name: merchant_custom_attribute
  endpoint:
    path: /v2/merchants/{merchant_id}/custom-attributes/{key}
    method: GET
- name: upsert_merchant_custom_attribute
  endpoint:
    path: /v2/merchants/{merchant_id}/custom-attributes/{key}
    method: POST
- name: bulk_upsert_merchant_custom_attributes
  endpoint:
    path: /v2/merchants/{merchant_id}/custom-attributes
    method: POST
- name: list_merchant_custom_attributes
  endpoint:
    path: /v2/merchants/{merchant_id}/custom-attributes
    method: GET
    params:
      with_definitions: 'true'
- name: retrieve_merchant_custom_attribute
  endpoint:
    path: /v2/merchants/{merchant_id}/custom-attributes/{key}
    method: GET
    params:
      with_definition: 'true'
- name: delete_merchant_custom_attribute
  endpoint:
    path: /v2/merchants/{merchant_id}/custom-attributes/{key}
    method: DELETE
- name: bulk_delete_merchant_custom_attributes
  endpoint:
    path: /v2/merchants/{merchant_id}/custom-attributes
    method: DELETE
- name: merchant_custom_attribute_definition
  endpoint:
    method: POST
    path: /merchant_custom_attribute_definition
- name: upsert_merchant_custom_attribute
  endpoint:
    method: POST
    path: /upsert_merchant_custom_attribute
- name: bulk_upsert_merchant_custom_attributes
  endpoint:
    method: POST
    path: /bulk_upsert_merchant_custom_attributes
- name: retrieve_merchant_custom_attribute
  endpoint:
    method: GET
    path: /retrieve_merchant_custom_attribute
- name: list_merchant_custom_attribute_definitions
  endpoint:
    method: GET
    path: /list_merchant_custom_attribute_definitions
- name: delete_merchant_custom_attribute
  endpoint:
    method: DELETE
    path: /delete_merchant_custom_attribute
- name: bulk_delete_merchant_custom_attributes
  endpoint:
    method: DELETE
    path: /bulk_delete_merchant_custom_attributes
- name: merchant_details
  endpoint:
    path: /merchant/details
    method: GET
- name: tipping_report
  endpoint:
    path: /tipping/report
    method: GET
- name: locations
  endpoint:
    path: /locations
    method: GET
- name: custom_attributes_merchants
  endpoint:
    path: /custom-attributes/merchants
    method: GET
- name: custom_attributes_locations
  endpoint:
    path: /custom-attributes/locations
    method: GET
- name: merchant
  endpoint:
    path: /RetrieveMerchant
    method: GET
- name: merchants
  endpoint:
    path: /ListMerchants
    method: GET
- name: mobile_authorization
  endpoint:
    method: POST
- name: mobile_authorization_code
  endpoint:
    path: /CreateMobileAuthorizationCode
    method: POST
- name: initialize_sdk
  endpoint:
    path: /mobile-payments-sdk/initialize
    method: POST
    data_selector: id
- name: authorize
  endpoint:
    path: /mobile-payments-sdk/authorize
    method: POST
    data_selector: result
- name: start_payment_activity
  endpoint:
    path: /mobile-payments-sdk/payment/start
    method: POST
    data_selector: paymentDetails
- name: payments
  endpoint:
    method: POST
- name: obtain_token
  endpoint:
    path: /oauth2/token
    method: POST
- name: authorize
  endpoint:
    path: /authorize
    method: POST
- name: create_card
  endpoint:
    path: /cards/create
    method: POST
- name: start_payment
  endpoint:
    path: /payments/start
    method: POST
- name: pay_order
  endpoint:
    path: /orders/pay
    method: POST
- name: update_payment
  endpoint:
    path: /payments/update
    method: POST
- name: authorization_manager
  endpoint:
    method: unspecified
- name: reader_manager
  endpoint:
    method: unspecified
- name: payment_manager
  endpoint:
    method: unspecified
- name: settings_manager
  endpoint:
    method: unspecified
- name: authorization
  endpoint:
    path: /oauth2/authorize
    method: GET
    params:
      client_id: '{YOUR_APP_ID}'
      scope: CUSTOMERS_WRITE+CUSTOMERS_READ
      session: 'false'
      state: 82201dd8d83d23cc8a48caf52b
      response_type: code
      redirect_uri: <redirect_uri>
      code_challenge: <code_challenge>
- name: obtain_token
  endpoint:
    path: /oauth2/token
    method: POST
    params:
      client_id: '{YOUR_APP_ID}'
      client_secret: '{YOUR_APP_SECRET}'
      code: '{authorization_code}'
      redirect_uri: <redirect_uri>
      code_verifier: <code_verifier>
      grant_type: authorization_code
- name: revoke_token
  endpoint:
    method: POST
- name: oauth_tokens
  endpoint:
    path: /token
    method: POST
    data_selector: tokens
- name: oauth_tokens
  endpoint:
    path: /oauth2/token
    method: POST
    data_selector: .
- name: bank_accounts
  endpoint:
    path: /bank-accounts
    method: GET
- name: bookings
  endpoint:
    path: /bookings
    method: POST
- name: booking_custom_attributes
  endpoint:
    path: /booking-custom-attributes
    method: POST
- name: cards
  endpoint:
    path: /cards
    method: GET
- name: cash_drawer_shifts
  endpoint:
    path: /cash-drawer-shifts
    method: GET
- name: catalog
  endpoint:
    path: /catalog
    method: POST
- name: checkout
  endpoint:
    path: /checkout
    method: POST
- name: customers
  endpoint:
    path: /customers
    method: POST
- name: customer_custom_attributes
  endpoint:
    path: /customer-custom-attributes
    method: POST
- name: customer_groups
  endpoint:
    path: /customer-groups
    method: POST
- name: customer_segments
  endpoint:
    path: /customer-segments
    method: POST
- name: devices
  endpoint:
    path: /devices
    method: POST
- name: disputes
  endpoint:
    path: /disputes
    method: POST
- name: events
  endpoint:
    path: /events
    method: GET
- name: gift_cards
  endpoint:
    path: /gift-cards
    method: POST
- name: gift_card_activities
  endpoint:
    path: /gift-card-activities
    method: POST
- name: inventory
  endpoint:
    path: /inventory
    method: GET
- name: invoices
  endpoint:
    path: /invoices
    method: POST
- name: labor
  endpoint:
    path: /labor
    method: POST
- name: locations
  endpoint:
    path: /locations
    method: GET
- name: location_custom_attributes
  endpoint:
    path: /location-custom-attributes
    method: POST
- name: loyalty
  endpoint:
    path: /loyalty
    method: POST
- name: merchants
  endpoint:
    path: /merchants
    method: GET
- name: merchant_custom_attributes
  endpoint:
    path: /merchant-custom-attributes
    method: POST
- name: mobile_authorization
  endpoint:
    path: /mobile-authorization
    method: POST
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: order_custom_attributes
  endpoint:
    path: /order-custom-attributes
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: refunds
  endpoint:
    path: /refunds
    method: POST
- name: payouts
  endpoint:
    path: /payouts
    method: GET
- name: sites
  endpoint:
    path: /sites
    method: GET
- name: snippets
  endpoint:
    path: /snippets
    method: POST
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: POST
- name: team
  endpoint:
    path: /team
    method: POST
- name: terminal
  endpoint:
    path: /terminal
    method: POST
- name: vendors
  endpoint:
    path: /vendors
    method: POST
- name: webhook_subscriptions
  endpoint:
    path: /webhook-subscriptions
    method: POST
- name: retrieve_token_status
  endpoint:
    path: /oauth2/token/status
    method: POST
- name: ObtainToken
  endpoint:
    path: /oauth2/token
    method: POST
    data_selector: ''
    params:
      client_id: '{{ dlt.secrets[''square_client_id''] }}'
      client_secret: '{{ dlt.secrets[''square_client_secret''] }}'
      grant_type: authorization_code
      code: '{{ authorization_code }}'
- name: RefreshToken
  endpoint:
    path: /oauth2/token
    method: POST
    data_selector: ''
    params:
      client_id: '{{ dlt.secrets[''square_client_id''] }}'
      client_secret: '{{ dlt.secrets[''square_client_secret''] }}'
      grant_type: refresh_token
      refresh_token: '{{ dlt.secrets[''square_refresh_token''] }}'
- name: RevokeToken
  endpoint:
    path: /oauth2/revoke
    method: POST
    data_selector: ''
    params:
      client_id: '{{ dlt.secrets[''square_client_id''] }}'
      client_secret: '{{ dlt.secrets[''square_client_secret''] }}'
      access_token: '{{ dlt.secrets[''square_access_token''] }}'
- name: oauth_tokens
  endpoint:
    path: /token
    method: POST
    data_selector: token
- name: snippets
  endpoint:
    path: /snippets
    method: POST
- name: sites
  endpoint:
    path: /sites
    method: GET
    data_selector: sites
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: cards
  endpoint:
    path: /cards
    method: POST
- name: checkout
  endpoint:
    path: /checkout
    method: POST
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: POST
- name: invoices
  endpoint:
    path: /invoices
    method: POST
- name: create_order
  endpoint:
    path: /v2/orders
    method: POST
    data_selector: orders
- name: update_order
  endpoint:
    path: /v2/orders/update
    method: POST
    data_selector: orders
- name: catalog_tax
  endpoint:
    path: /v2/catalog/object
    method: POST
    data_selector: catalog_objects
- name: catalog_discount
  endpoint:
    path: /v2/catalog/object
    method: POST
    data_selector: catalog_objects
- name: create_order
  endpoint:
    path: /orders
    method: POST
- name: calculate_order
  endpoint:
    path: /orders/calculate
    method: POST
- name: update_order
  endpoint:
    path: /orders/{id}
    method: PUT
- name: search_orders
  endpoint:
    path: /orders/search
    method: POST
- name: clone_order
  endpoint:
    path: /orders/clone
    method: POST
- name: order_discounts
  endpoint:
    method: POST
- name: order
  endpoint:
    method: GET
    data_selector: order.fulfillments
- name: order
  endpoint:
    path: /createOrder
    method: POST
- name: order
  endpoint:
    path: /batchRetrieveOrders
    method: GET
- name: order
  endpoint:
    path: /searchOrders
    method: GET
- name: order
  endpoint:
    data_selector: metadata
- name: catalog_items
  endpoint:
    path: /v2/catalog/search
    method: POST
    data_selector: items
- name: create_order
  endpoint:
    path: /v2/orders/create
    method: POST
- name: update_order
  endpoint:
    path: /v2/orders/update
    method: POST
- name: create_payment
  endpoint:
    path: /v2/payments/create
    method: POST
- name: accumulate_loyalty_points
  endpoint:
    path: /v2/loyalty/accumulate
    method: POST
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: order
- name: create_payment
  endpoint:
    path: /CreatePayment
    method: POST
    params:
      order_id: '{{ order_id }}'
      total_money: '{{ total_money }}'
      autocomplete: 'false'
- name: pay_order
  endpoint:
    path: /PayOrder
    method: POST
    params:
      payment_ids: '{{ authorized_payment_ids }}'
- name: create_order
  endpoint:
    path: /orders/CreateOrder
    method: POST
- name: calculate_order
  endpoint:
    path: /orders/CalculateOrder
    method: POST
- name: orders
  endpoint:
    path: /service-charges
    method: POST
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: order_fulfillment
  endpoint:
    path: /orders/fulfillment
    method: GET
    data_selector: order_fulfillments
- name: order_payment_activity
  endpoint:
    path: /orders/payment_activity
    method: GET
    data_selector: payments
- name: custom_attribute_definition
  endpoint:
    path: /v2/orders/custom-attribute-definitions
    method: GET
    data_selector: custom_attribute_definitions
- name: create_order_custom_attribute_definition
  endpoint:
    path: /v2/orders/custom-attribute-definitions
    method: POST
- name: update_order_custom_attribute_definition
  endpoint:
    path: /v2/orders/custom-attribute-definitions/{key}
    method: PUT
- name: delete_order_custom_attribute_definition
  endpoint:
    path: /v2/orders/custom-attribute-definitions/{key}
    method: DELETE
- name: list_order_custom_attribute_definitions
  endpoint:
    path: /v2/orders/custom-attribute-definitions
    method: GET
    params:
      limit: 20
- name: retrieve_order_custom_attribute_definition
  endpoint:
    path: /v2/orders/custom-attribute-definitions/{key}
    method: GET
- name: order_custom_attributes
  endpoint:
    path: /v2/orders/{order_id}/custom-attributes
    method: GET
- name: individual_custom_attribute
  endpoint:
    path: /v2/orders/{order_id}/custom-attributes/{key}
    method: GET
- name: upsert_order_custom_attribute
  endpoint:
    path: /v2/orders/{order_id}/custom-attributes
    method: POST
- name: bulk_upsert_order_custom_attributes
  endpoint:
    path: /v2/orders/bulk-upsert-custom-attributes
    method: POST
- name: retrieve_order_custom_attribute
  endpoint:
    path: /v2/orders/{order_id}/custom-attributes/{key}
    method: GET
- name: delete_order_custom_attribute
  endpoint:
    path: /v2/orders/{order_id}/custom-attributes/{key}
    method: DELETE
- name: bulk_delete_order_custom_attributes
  endpoint:
    path: /v2/orders/bulk-delete-custom-attributes
    method: POST
- name: list_order_custom_attributes
  endpoint:
    path: /v2/orders/{order_id}/custom-attributes
    method: GET
    params:
      limit: 20
- name: custom_attribute_definition
  endpoint:
    method: POST
    path: /CreateOrderCustomAttributeDefinition
- name: custom_attribute
  endpoint:
    method: POST
    path: /UpsertOrderCustomAttribute
- name: custom_attribute
  endpoint:
    method: GET
    path: /RetrieveOrderCustomAttribute
- name: payment_methods_by_country
  endpoint:
    path: /payment-methods-by-country
    method: GET
- name: payment_card_storage
  endpoint:
    path: /payment-card-storage
    method: GET
- name: payment_form_usage
  endpoint:
    path: /payment-form-usage
    method: GET
- name: digital_wallet_usage
  endpoint:
    path: /digital-wallet-usage
    method: GET
- name: bank_transfer_usage
  endpoint:
    path: /bank-transfer-usage
    method: GET
- name: afterpay_usage
  endpoint:
    path: /afterpay-usage
    method: GET
- name: house_account_payments
  endpoint:
    path: /house-account-payments
    method: GET
- name: create_payment
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: payment
    params:
      minimum_amount:
        AUD: 0.01
        CAD: 0.01
        EUR: 0.01
        JPY: 1
        GBP: 0.01
        USD: 0.01
      cash_payment_minimum:
        AUD: 0
        CAD: 0
        EUR: 0
        JPY: 0
        GBP: 0
        USD: 0
      external_payment_minimum:
        AUD: 0
        CAD: 0
        EUR: 0
        JPY: 0
        GBP: 0
        USD: 0
      afterpay_minimum:
        AUD: 1.0
        CAD: 1.0
        GBP: 1.0
        USD: 1.0
      afterpay_maximum:
        AUD: 2000
        CAD: 2000
        GBP: 1000
        USD: 2000
- name: create_payment
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: payment
- name: list_payments
  endpoint:
    path: /v2/payments
    method: GET
    data_selector: payments
- name: create_refund
  endpoint:
    path: /v2/refunds
    method: POST
    data_selector: refund
- name: list_refunds
  endpoint:
    path: /v2/refunds
    method: GET
    data_selector: refunds
- name: batch_retrieve_orders
  endpoint:
    path: /v2/orders/batch-retrieve
    method: POST
    data_selector: orders
- name: refund_payment
  endpoint:
    path: /refund-payment
    method: POST
    data_selector: refund
- name: get_payment_refund
  endpoint:
    path: /get-payment-refund
    method: GET
    data_selector: refund
- name: payment
  endpoint:
    path: /retrieve-payments
    method: GET
    data_selector: payment
    params:
      payment_id: path
- name: list_payments
  endpoint:
    path: /list-payments
    method: GET
    data_selector: payments
    params:
      location_id: query
      sort_order: query
      begin_time: query
      end_time: query
      card_brand: query
    paginator:
      type: cursor
      cursor_param: cursor
      page_size_param: limit
      default_page_size: 10
- name: create_payment
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: payment
    params:
      app_fee_money: '{{ amount }}'
- name: update_payment
  endpoint:
    path: /v2/payments/{payment_id}
    method: PUT
    data_selector: payment
    params:
      app_fee_money: '{{ amount }}'
- name: refund_payment
  endpoint:
    path: /v2/refunds
    method: POST
    data_selector: refund
    params:
      app_fee_money: '{{ amount }}'
- name: create_payment_link
  endpoint:
    path: /v2/checkout/links
    method: POST
    data_selector: checkout_option
    params:
      app_fee_money: '{{ amount }}'
- name: create_terminal_checkout
  endpoint:
    path: /v2/terminals/checkouts
    method: POST
    data_selector: checkout_options
    params:
      app_fee_money: '{{ amount }}'
- name: create_payment
  endpoint:
    path: /create-payment
    method: POST
- name: list_payment
  endpoint:
    path: /list-payment
    method: GET
- name: update_payment
  endpoint:
    path: /update-payment
    method: POST
- name: complete_payment
  endpoint:
    path: /complete-payment
    method: POST
- name: update_payment
  endpoint:
    path: /docs/payments-api/update-payments
    method: POST
    data_selector: payment
- name: payment_created
  endpoint:
    path: /webhooks/payment.created
    method: GET
    data_selector: events
    params:
      permission: PAYMENTS_READ
- name: payment_updated
  endpoint:
    path: /webhooks/payment.updated
    method: GET
    data_selector: events
    params:
      permission: PAYMENTS_READ
- name: terminal_transactions
  endpoint:
    path: /terminal/api
    method: POST
- name: mobile_payments
  endpoint:
    path: /mobile-payments/sdk
    method: POST
- name: point_of_sale
  endpoint:
    path: /point-of-sale/api
    method: POST
- name: web_payments
  endpoint:
    path: /web-payments/sdk
    method: POST
- name: in_app_payments
  endpoint:
    path: /in-app-payments/sdk
    method: POST
- name: checkout
  endpoint:
    path: /checkout/api
    method: POST
- name: invoices
  endpoint:
    path: /invoices/api
    method: POST
- name: subscriptions
  endpoint:
    path: /subscriptions/api
    method: POST
- name: disputes
  endpoint:
    path: /disputes/api
    method: POST
- name: cards
  endpoint:
    path: /cards/api
    method: POST
- name: payments_pricing
  endpoint:
    path: /docs/payments-pricing
    method: GET
    data_selector: data
    params:
      region: '{{ region }}'
- name: subscription_payments
  endpoint:
    path: /docs/subscription-payment
    method: GET
    data_selector: data
    params:
      region: '{{ region }}'
- name: payment
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: payment
- name: payment
  endpoint:
    path: /v2/payments/{payment_id}
    method: GET
    data_selector: payment
- name: payment
  endpoint:
    path: /v2/payments
    method: GET
    data_selector: payments
- name: payout
  endpoint:
    path: /payouts/{payout_id}
    method: GET
    data_selector: payout
- name: payout_entries
  endpoint:
    path: /payouts/{payout_id}/payout-entries
    method: GET
    data_selector: payout_entries
    params:
      payout_id: '{{ payout_id }}'
- name: list_payouts
  endpoint:
    path: /v2/payouts
    method: GET
    data_selector: payouts
    params:
      sort_order: ASC
- name: payout
  endpoint:
    path: /payouts
    method: GET
    data_selector: payouts
- name: payout_entry
  endpoint:
    path: /payout-entries
    method: GET
    data_selector: payout_entries
- name: initiate_transaction_android
  endpoint:
    path: /pos-api/build-mobile-web
    method: GET
    data_selector: transaction information
    params:
      action: com.squareup.pos.action.CHARGE
      package: com.squareup
      S.browser_fallback_url: https://my.website.com/index.html
      S.com.squareup.pos.WEB_CALLBACK_URI: https://my.website.com/index.html
      S.com.squareup.pos.CLIENT_ID: sq0ids-yourClientId
      S.com.squareup.pos.API_VERSION: v2.0
      i.com.squareup.pos.TOTAL_AMOUNT: 100
      S.com.squareup.pos.CURRENCY_CODE: USD
      S.com.squareup.pos.TENDER_TYPES: com.squareup.pos.TENDER_CARD,com.squareup.pos.TENDER_CASH
- name: transaction_initiation
  endpoint:
    path: ?data={REPLACE ME}
    method: GET
- name: transaction_response
  endpoint:
    path: /callback.html
    method: POST
- name: pos_android_application
  endpoint:
    method: POST
- name: transaction
  endpoint:
    path: /pos
    method: POST
    params:
      total_amount: '{{ transaction_total_amount }}'
      currency_code: '{{ transaction_currency_code }}'
      tender_types: '{{ transaction_tender_types }}'
      callback_url: '{{ transaction_callback_url }}'
      application_id: '{{ seller_application_id }}'
      api_version: v2.0
- name: order
  endpoint:
    path: /v2/orders/{order_id}
    method: GET
    data_selector: orders
- name: payment
  endpoint:
    path: /v2/payments/{payment_id}
    method: GET
    data_selector: payment
- name: charge_request
  endpoint:
    path: /open_pos.js
    method: GET
    data_selector: transaction
    params:
      action: com.squareup.pos.action.CHARGE
      package: com.squareup
      web_callback_uri: '{{ dlt.secrets[''callback_url''] }}'
      client_id: '{{ dlt.secrets[''client_id''] }}'
      api_version: v2.0
      total_amount: '{{ dlt.secrets[''transaction_total''] }}'
      currency_code: JPY
      tender_types: com.squareup.pos.TENDER_PAYPAY
- name: transaction
  endpoint:
    path: /payment/create
    method: GET
    params:
      amount_money: cents
      callback_url: string
      client_id: string
      options: object
      version: '1.3'
      location_id: string
      state: string
      notes: string
      customer_id: string
      supported_tender_types: string[]
      clear_default_fees: boolean
      auto_return: boolean
      skip_receipt: boolean
- name: device_permissions
  endpoint:
    path: /docs/reader-sdk/build-on-android
    method: GET
    data_selector: permissions
- name: authorization
  endpoint:
    method: POST
- name: reader_sdk_credentials
  endpoint:
    path: /readersdk-installer
    method: POST
    data_selector: credentials
- name: checkout
  endpoint:
    method: POST
- name: transaction
  endpoint:
    params:
    - transaction_id
    - transaction_client_id
- name: refund_payment
  endpoint:
    path: /RefundPayment
    method: POST
    params:
      PAYMENT_ID: tender_id
- name: list_payments
  endpoint:
    path: /ListPayments
    method: GET
- name: retrieve_transaction
  endpoint:
    path: /RetrieveTransaction
    method: GET
- name: list_transactions
  endpoint:
    path: /ListTransactions
    method: GET
- name: get_payment
  endpoint:
    path: /GetPayment
    method: GET
    params:
      Transaction.tenders[].id: payment_card
- name: refund
  endpoint:
    path: /retrieve-refunds
    method: GET
    data_selector: refunds
    params:
      location_id: example_location_id
      status: COMPLETED
      payment_type: Card
      refund_date: later_than:2023-03-01T22:00:00
      sort_order: desc
      last_updated: last_updated_at
- name: order
  endpoint:
    path: /retrieve-order/{order_id}
    method: GET
    data_selector: order
- name: unlinked_refund
  endpoint:
    path: /RefundPayment
    method: POST
- name: RefundPayment
  endpoint:
    params:
      destination_id:
      - payment_token
      - Square_gift_card
      - card_on_file_ID
      location_id: null
      customer_id: null
      unlinked: true
      cash_details:
        seller_supplied_money: null
- name: refund_created
  endpoint:
    path: /v2/refunds
    method: POST
    data_selector: event
    params:
      permission: PAYMENTS_READ
- name: refund_updated
  endpoint:
    path: /v2/refunds
    method: PUT
    data_selector: event
    params:
      permission: PAYMENTS_READ
- name: payments_api
  endpoint:
    path: /v2/payments/create
    method: POST
    params:
      customer_initiated: true or false
      seller_keyed_in: true or false
- name: customer_details
  endpoint:
    method: POST
    params:
      customer_initiated: true | false
      seller_keyed_in: true | false
- name: sites
  endpoint:
    method: GET
- name: list_sites
  endpoint:
    path: /sites
    method: GET
    data_selector: sites
- name: sites
  endpoint:
    path: /list-sites
    method: GET
    data_selector: sites
- name: snippet
  endpoint:
    path: /upsert-snippet
    method: POST
- name: snippet
  endpoint:
    method: POST
    data_selector: content
    params:
      client_id: '{{ dlt.secrets[''client_id''] }}'
- name: upsert_snippet
  endpoint:
    method: POST
    path: /upsert-snippet
- name: retrieve_snippet
  endpoint:
    method: GET
    path: /retrieve-snippet
- name: delete_snippet
  endpoint:
    method: DELETE
    path: /delete-snippet
- name: bookings
  endpoint:
    path: /bookings
    method: POST
- name: tipping_report
  endpoint:
    path: /tipping_report
    method: POST
- name: timecards
  endpoint:
    path: /timecards
    method: POST
- name: breaks
  endpoint:
    path: /timecards/breaks
    method: POST
- name: scheduled_shifts
  endpoint:
    path: /scheduled_shifts
    method: POST
- name: retrieve_subscription
  endpoint:
    path: /RetrieveSubscription
    method: GET
    params:
      include: actions
- name: search_subscriptions
  endpoint:
    path: /SearchSubscriptions
    method: GET
    params:
      include: actions
- name: pause_subscription
  endpoint:
    path: /PauseSubscription
    method: POST
- name: resume_subscription
  endpoint:
    path: /ResumeSubscription
    method: POST
- name: swap_plan
  endpoint:
    path: /SwapPlan
    method: POST
- name: cancel_subscription
  endpoint:
    path: /CancelSubscription
    method: POST
- name: change_billing_anchor_date
  endpoint:
    path: /ChangeBillingAnchorDate
    method: POST
- name: delete_subscription_action
  endpoint:
    path: /DeleteSubscriptionAction
    method: POST
- name: list_subscription_events
  endpoint:
    path: /ListSubscriptionEvents
    method: GET
- name: subscription
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: subscription
    params: {}
- name: order
  endpoint:
    path: /orders
    method: POST
    data_selector: order
    params: {}
- name: retrieve_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: subscription
    params: {}
- name: search_subscriptions
  endpoint:
    path: /subscriptions/search
    method: POST
    data_selector: subscriptions
    params: {}
- name: subscription_plan
  endpoint:
    path: /catalog/object
    method: POST
    data_selector: catalog_object
- name: subscription_plan_variation
  endpoint:
    path: /catalog/object
    method: POST
    data_selector: catalog_object
- name: list_subscription_plans
  endpoint:
    path: /catalog/list
    method: GET
    data_selector: catalog_object
- name: retrieve_subscription_plan
  endpoint:
    path: /catalog/object
    method: GET
    data_selector: catalog_object
- name: update_subscription_plan
  endpoint:
    path: /catalog/object
    method: POST
    data_selector: catalog_object
- name: disable_subscription_plan
  endpoint:
    path: /catalog/object
    method: POST
    data_selector: catalog_object
- name: subscription_billing
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: subscription
    params:
      start_date: '2023-01-19'
      monthly_billing_anchor_date: 19
- name: change_billing_anchor_date
  endpoint:
    path: /subscriptions/change-billing-anchor-date
    method: POST
    data_selector: subscription
    params:
      monthly_billing_anchor_date: 4
      effective_date: '2023-12-04'
- name: list_subscription_events
  endpoint:
    path: /subscriptions/list-events
    method: GET
    data_selector: subscription_events
- name: resume_subscription
  endpoint:
    path: /subscriptions/resume
    method: POST
    data_selector: subscription
    params:
      status: ACTIVE
- name: swap_plan
  endpoint:
    path: /subscriptions/swap-plan
    method: POST
- name: retrieve_catalog_object
  endpoint:
    path: /catalog/object
    method: GET
- name: upsert_catalog_object
  endpoint:
    path: /catalog/object
    method: POST
- name: bulk_swap_plan
  endpoint:
    path: /bulk/swap-plan
    method: POST
- name: subscription
  endpoint:
    method: GET
    data_selector: Subscription
- name: subscription_plan
  endpoint:
    method: GET
    data_selector: SubscriptionPlan
- name: subscription_plan_variation
  endpoint:
    method: GET
    data_selector: SubscriptionPlanVariation
- name: order
  endpoint:
    method: GET
    data_selector: Order
- name: invoice
  endpoint:
    method: GET
    data_selector: Invoice
- name: payment
  endpoint:
    method: GET
    data_selector: Payment
- name: team_member
  endpoint:
    method: GET
    params:
      incremental: team_member.updated
- name: job
  endpoint:
    method: GET
    params:
      incremental: job.updated
- name: create_terminal_action
  endpoint:
    path: /CreateTerminalAction
    method: POST
- name: search_terminal_actions
  endpoint:
    path: /SearchTerminalActions
    method: POST
- name: cancel_terminal_action
  endpoint:
    path: /CancelTerminalAction
    method: POST
- name: terminal_checkout
  endpoint:
    method: POST
- name: terminal_refund
  endpoint:
    method: POST
- name: terminal_action
  endpoint:
    method: POST
- name: device_code
  endpoint:
    path: /terminal/api/devices/createDeviceCode
    method: POST
    data_selector: device_code
- name: device_code
  endpoint:
    path: /v2/devices/codes
    method: POST
    data_selector: .
    params:
      name: '{{ dlt.secrets[''device_name''] }}'
      product_type: TERMINAL_API
      location_id: '{{ dlt.secrets[''location_id''] }}'
- name: terminal_checkout
  endpoint:
    path: /v2/terminals/checkouts
    method: POST
    data_selector: checkout
    params:
      device_options:
        collect_signature: true
- name: payment_status
  endpoint:
    path: /v2/payments
    method: GET
    data_selector: payment
    params:
      status: COMPLETED
- name: cancel_terminal_checkout
  endpoint:
    path: /v2/terminals/checkouts/cancel
    method: POST
    data_selector: checkout
    params:
      status: CANCELED
- name: order
  endpoint:
    path: /orders/create
    method: POST
    data_selector: order_id
- name: terminal_checkout
  endpoint:
    path: /terminal/checkouts/create
    method: POST
    data_selector: checkout
- name: list_devices
  endpoint:
    path: /devices
    method: GET
    data_selector: devices
- name: get_device
  endpoint:
    path: /devices/{device_id}
    method: GET
    data_selector: device
- name: create_vendor
  endpoint:
    path: /CreateVendor
    method: POST
    data_selector: vendor
- name: bulk_create_vendors
  endpoint:
    path: /BulkCreateVendors
    method: POST
    data_selector: responses
- name: vendor
  endpoint:
    method: GET
    params: {}
- name: vendor_contact
  endpoint:
    method: GET
    params: {}
- name: vendor_created
  endpoint:
    path: /webhooks
    method: POST
    data_selector: data
    params:
      events: vendor.created
- name: vendor_updated
  endpoint:
    path: /webhooks
    method: POST
    data_selector: data
    params:
      events: vendor.updated
- name: single_vendor
  endpoint:
    path: /retrieve-vendor
    method: GET
    params:
      vendor_id: '{{ vendor_id }}'
- name: multiple_vendors
  endpoint:
    path: /bulk-retrieve-vendors
    method: POST
    params:
      vendor_ids:
      - '{{ vendor_id_1 }}'
      - '{{ vendor_id_2 }}'
- name: vendor_search
  endpoint:
    path: /docs/vendors-api/search-for-vendors
    method: POST
    data_selector: vendors
    params:
      name: Vendor
      sorter: CREATED_AT
- name: vendor
  endpoint:
    path: /update-vendor
    method: POST
- name: bulk_vendor_update
  endpoint:
    path: /bulk-update-vendors
    method: POST
- name: ach_payment_method
  endpoint:
    path: /web-payments/add-ach
    method: POST
    data_selector: tokenResult.token
- name: afterpay_payment
  endpoint:
    path: /afterpay-button
    method: POST
- name: afterpay_messaging_widget
  endpoint:
    path: /afterpay-messaging
    method: GET
- name: afterpay_checkout_widget
  endpoint:
    path: /afterpay-checkout
    method: GET
- name: store_card
  endpoint:
    path: /card
    method: POST
    data_selector: json
- name: create_payment
  endpoint:
    path: /payment
    method: POST
    data_selector: json
- name: gift_card_payment
  endpoint:
    path: /orders/order_id/pay
    method: POST
    data_selector: Payment
    params:
      source_id: '{{ token }}'
      order_id: '{{ order_id }}'
      amount_money: 200
- name: payment
  endpoint:
    method: POST
- name: order
  endpoint:
    method: POST
- name: gift_card
  endpoint:
    method: POST
- name: gift_card_payment
  endpoint:
    path: /
    method: POST
    data_selector: payment-status-container
- name: payment_token
  endpoint:
    path: /docs/web-payments/overview
    method: GET
- name: customer_profile
  endpoint:
    path: /docs/web-payments/create-customer-profile
    method: GET
- name: payment_request
  endpoint:
    path: /docs/web-payments/payment-requests
    method: GET
- name: payment_token
  endpoint:
    method: POST
- name: payment
  endpoint:
    method: POST
- name: tokenize_payment
  endpoint:
    path: /web-payments/take-card-payment
    method: POST
    data_selector: token
- name: create_payment
  endpoint:
    path: /create-payment
    method: POST
    data_selector: payment
- name: webhook_events
  endpoint:
    path: /webhooks/events
    method: POST
    data_selector: events
- name: webhook_events
  endpoint:
    method: POST
    data_selector: event_id
- name: webhook_event
  endpoint:
    path: /webhooks/subscriptions
    method: POST
    data_selector: data
    params:
      notification_url: HTTPS URL
- name: webhook_event_notification
  endpoint:
    path: /webhook
    method: POST
    data_selector: null
- name: webhook_event
  endpoint:
    path: /webhook
    method: POST
- name: webhook_event
  endpoint:
    path: /
    method: POST
    data_selector: body
- name: webhook_event
  endpoint:
    path: /
    method: POST
- name: webhook_events
  endpoint:
    method: POST
    data_selector: event_id
- name: bank_account_events
  endpoint:
    path: /webhooks/v2/bank_account
    method: GET
    data_selector: events
    params:
      permission: BANK_ACCOUNTS_READ
- name: booking_events
  endpoint:
    path: /webhooks/v2/booking
    method: GET
    data_selector: events
    params:
      permission: APPOINTMENTS_READ
- name: custom_attribute_events
  endpoint:
    path: /webhooks/v2/custom_attributes
    method: GET
    data_selector: events
- name: card_events
  endpoint:
    path: /webhooks/v2/card
    method: GET
    data_selector: events
    params:
      permission: PAYMENTS_READ
- name: catalog_events
  endpoint:
    path: /webhooks/v2/catalog
    method: GET
    data_selector: events
    params:
      permission: ITEMS_READ
- name: checkout_events
  endpoint:
    path: /webhooks/v2/checkout
    method: GET
    data_selector: events
    params:
      permission: MERCHANT_PROFILE_READ
- name: customer_events
  endpoint:
    path: /webhooks/v2/customer
    method: GET
    data_selector: events
    params:
      permission: CUSTOMERS_READ
- name: device_events
  endpoint:
    path: /webhooks/v2/device
    method: GET
    data_selector: events
    params:
      permission: DEVICES_READ
- name: dispute_events
  endpoint:
    path: /webhooks/v2/dispute
    method: GET
    data_selector: events
    params:
      permission: PAYMENTS_READ
- name: gift_card_events
  endpoint:
    path: /webhooks/v2/gift_card
    method: GET
    data_selector: events
    params:
      permission: GIFTCARDS_READ
- name: inventory_events
  endpoint:
    path: /webhooks/v2/inventory
    method: GET
    data_selector: events
    params:
      permission: INVENTORY_READ
- name: invoice_events
  endpoint:
    path: /webhooks/v2/invoice
    method: GET
    data_selector: events
    params:
      permission: INVOICES_READ
- name: labor_events
  endpoint:
    path: /webhooks/v2/labor
    method: GET
    data_selector: events
    params:
      permission: TIMECARDS_READ
- name: location_events
  endpoint:
    path: /webhooks/v2/location
    method: GET
    data_selector: events
    params:
      permission: MERCHANT_PROFILE_READ
- name: loyalty_events
  endpoint:
    path: /webhooks/v2/loyalty
    method: GET
    data_selector: events
    params:
      permission: LOYALTY_READ
- name: merchant_events
  endpoint:
    path: /webhooks/v2/merchant
    method: GET
    data_selector: events
    params:
      permission: MERCHANT_PROFILE_READ
- name: oauth_events
  endpoint:
    path: /webhooks/v2/oauth
    method: GET
    data_selector: events
- name: order_events
  endpoint:
    path: /webhooks/v2/order
    method: GET
    data_selector: events
    params:
      permission: ORDERS_READ
- name: payment_events
  endpoint:
    path: /webhooks/v2/payment
    method: GET
    data_selector: events
    params:
      permission: PAYMENTS_READ
- name: payout_events
  endpoint:
    path: /webhooks/v2/payout
    method: GET
    data_selector: events
    params:
      permission: PAYOUTS_READ
- name: refund_events
  endpoint:
    path: /webhooks/v2/refund
    method: GET
    data_selector: events
    params:
      permission: PAYMENTS_READ
- name: subscription_events
  endpoint:
    path: /webhooks/v2/subscription
    method: GET
    data_selector: events
    params:
      permission: SUBSCRIPTIONS_READ
- name: team_member_events
  endpoint:
    path: /webhooks/v2/team_member
    method: GET
    data_selector: events
    params:
      permission: EMPLOYEES_READ
- name: terminal_events
  endpoint:
    path: /webhooks/v2/terminal
    method: GET
    data_selector: events
    params:
      permission: PAYMENTS_READ
- name: vendor_events
  endpoint:
    path: /webhooks/v2/vendor
    method: GET
    data_selector: events
    params:
      permission: VENDOR_READ
- name: webhook_subscriptions
  endpoint:
    path: /
    method: GET
- name: webhook_event_types
  endpoint:
    path: /event-types
    method: GET
- name: create_webhook_subscription
  endpoint:
    path: /
    method: POST
- name: update_webhook_subscription
  endpoint:
    path: /wbhk_b35f6b3145074cf9ad513610786c19d5
    method: PUT
- name: test_webhook_subscription
  endpoint:
    path: /wbhk_b35f6b3145074cf9ad513610786c19d5/test
    method: POST
- name: update_webhook_subscription_signature_key
  endpoint:
    path: /wbhk_b35f6b3145074cf9ad513610786c19d5/signature-key
    method: POST
- name: API_Explorer
  endpoint:
    path: /docs/api-explorer
    method: GET
- name: GraphQL_Explorer
  endpoint:
    path: /docs/graphql-explorer
    method: GET
- name: Developer_Console
  endpoint:
    path: /developer/console
    method: GET
- name: Square_SDKs
  endpoint:
    path: /sdk
    method: GET
- name: Sample_Applications
  endpoint:
    path: /sample-applications
    method: GET
- name: App_Marketplace_Listing
  endpoint:
    path: /app-marketplace/create-listing
    method: POST
- name: Publish_App
  endpoint:
    path: /app-marketplace/publish-app
    method: POST
notes:
- All app submissions must go through the Developer Console
- OAuth applications must have BANK_ACCOUNTS_READ permissions to use the Bank Accounts
  API
- API uses OAuth2 with the refresh token flow for authentication.
- Supports CRUD operations on custom attributes linked to bookings.
- Visibility setting of custom attributes can be either VISIBILITY_READ_ONLY or VISIBILITY_READ_WRITE_VALUES.
- Minimum Square version required is 2022-11-16
- Custom attributes are intended for additional information or associations not for
  storing PCI or secret-level data
- Unsupported data types for custom attributes include DateTime and Duration
- Maximum of 100 custom attribute definitions per application
- Requires a paid Appointments plan for seller-level booking operations
- Bookings API cannot be used to create team members or set non-zero cancellation
  fees; use Square Dashboard instead
- International use is limited; refer to Square Appointments FAQs
- Onboarding to the Bookings API requires activation through the Square Dashboard
- Sandbox environment setup requires navigating the Square Developer Console
- Sparse updates allowed except for the 'address' object which requires full specification
  during updates
- Only buyer-level permissions receive specific error messages and will not see seller-specific
  information
- Non-zero cancellation fees cannot be set via the API and must be managed in the
  Square Dashboard
- Service availability can be inferred from presence and absence location identifiers
- The seller identity is inferred from the access token
- Notification URL must be a publicly available HTTPS URL.
- Must return HTTP 2xx response code within 10 seconds of receiving a notification.
- Uses OAuth with permissions APPOINTMENTS_READ and APPOINTMENTS_ALL_READ depending
  on the level.
- Minor changes can be expected between Beta and GA; be prepared to upgrade your API
  version as needed.
- Deprecated functionality remains publicly available and fully supported, but its
  use is strongly discouraged.
- Retired APIs return `410 GONE` errors for all requests.
- Global support for null field clearing was added in Square API version 2022-09-21
- Null field clearing isn't supported in the Square PHP SDK or Square Ruby SDK
- 'The `X-Clear-Null: true` header is optional for update endpoints in Square API
  version 2023-08-16 and later'
- Integrates with multiple APIs for extended functionality
- Uses OAuth2 for authentication
- Square API and SDK versions are updated monthly; each update may require code changes
- New features might be available in Beta before GA
- APIs may be deprecated and eventually retired
- Requires a Square account and an application to develop
- Requires Square API version 2024-12-18 or later for issuer alerts and hsa_fsa field
- 'OAuth permission required: PAYMENTS_WRITE, PAYMENTS_READ, CUSTOMERS_READ, CUSTOMERS_WRITE'
- Network tokenization supported for enhanced security
- SCA verification required for some regions or sellers
- Postal code validation required in SDK matches the postal code in CreateCard request.
- Requires permission from customers before saving card information to avoid application
  being disabled.
- Always require customer permission to save card information to avoid application
  disablement
- Possible creation of duplicate customers
- Ensure matching postal codes in payment form and CreateCard request
- Requires CASH_DRAWER_READ permission for API access
- Requires an access token and a location ID for all calls
- Supports pagination with limit and cursor parameters
- Custom attributes are not visible in the Square Point of Sale application.
- Custom attributes are visible in the Square Dashboard and the API.
- Each Square account can have up to 10 seller-visible and 10 seller-hidden custom
  attributes.
- Custom attributes are available for Square version 2020-03-25 or later.
- You cannot edit certain properties of a custom attribute after creation.
- API allows CRUD operations on archived catalog items
- Archived items not visible on Square POS unless specific conditions are met
- Restaurant sellers cannot use Square Dashboard for archiving; must use API
- Filtering for REGULAR_CATEGORY avoids duplicate categories in application processing.
- CATEGORY is globally enabled; must set present_at_all_locations to true or leave
  it blank.
- CatalogModifier and CatalogModifierList objects control item customizations and
  behavior settings.
- Batch operation recommended for efficiency and managing multiple updates.
- Handle both initial and incremental updates for menu syncing.
- Use the updated_at field for tracking changes.
- Catalog objects can be retrieved by ID and version; specifying a version returns
  the object as it was at that time
- Pagination may be required for endpoints that return large sets of data
- Cannot filter by custom attributes; only system attributes and predefined query
  filters.
- Failure occurs when both include_deleted_objects and include_category_path_to_root
  are set to true simultaneously.
- SearchCatalogItems endpoint supports custom attribute filters and is suitable for
  ITEM and ITEM_VARIATION types
- SearchCatalogObjects endpoint can search all types and return deleted objects but
  does not support custom attribute filters
- Sync requires handling both webhook events and regular polling
- Risk of large result sets and rate limiting with improper use of ListCatalog
- Sparse updates are not supported; full existing object must be provided.
- Updates might be delayed due to backend processing.
- Images can be attached to multiple catalog objects
- Primary image setting differs based on API version; default is_primary is false
  for versions after 2021-12-15
- Webhook notification includes a timestamp when catalog was last updated, useful
  for syncing operations.
- Use the `SearchCatalogObjects` endpoint to retrieve updated catalog objects based
  on the webhook data.
- Requires ITEMS_READ permission to read catalog objects
- Requires ITEMS_WRITE permission to create, update, or delete catalog objects
- Square Sandbox isn't supported
- Afterpay or Clearpay settings cannot be updated via API
- Checkout API does not support specifying an existing order in a CreatePaymentLink
  request
- Only supports subscription plans with one paid phase or one free phase and one paid
  phase
- Does not support app_fee_money as a checkout option for subscriptions
- Afterpay is only available for sellers in the US, Australia, Canada, and the UK
  (known as Clearpay in the UK)
- Not all sellers are eligible for Afterpay; certain business categories are prohibited
- Afterpay can only be used for transactions within specific purchase ranges
- Cash App Pay and Afterpay are not supported for subscription payments
- Optional tipping on checkout page defaults to country-specific settings, like 15%
  in the US and Canada
- Payment button types on the checkout page depend on the buyer's device and browser
- A payment link can only be used to accept payment from a single buyer
- Sandbox limitations: no support for Afterpay, Cash App Pay, Google Pay, and Apple
    Pay; only credit and debit card payments can be tested
- Creating a payment link with app_fee_money in Sandbox is not supported
- API uses OAuth 2.0 for authentication.
- Supports configuring various checkout options like shipping address, tipping, and
  coupons.
- Checkout API supports only one paid phase in subscription plan variations
- Does not support app_fee_money and certain payment methods like Cash App Pay and
  Afterpay for subscription payments
- Optimistic concurrency control implemented using version attribute
- Customer profile not supporting actions against previous versions
- Birthday format changed to 'YYYY-MM-DD' or 'MM-DD' for newer versions from 2022-10-19;
  previous versions support timestamp format.
- New maximum length constraints for various string fields in CreateCustomer and UpdateCustomer
  requests from 2022-10-19.
- Rejects unrecognized fields in CreateCustomer and SearchCustomers requests starting
  2022-03-16.
- 'OAuth permissions required: CUSTOMER_READ, CUSTOMER_WRITE'
- Collecting and storing PII requires customer permission
- Avoid duplicate customer profiles by using SearchCustomers before creating new ones
- Instant profiles with no public information are not accessible
- Customer tax ID field is not verified for validity by API
- Rate limiting may occur; handle 429 errors appropriately
- Instant profiles are created asynchronously and may not immediately have a customer_id
  set.
- If a customer_id is not set, a search for a matching profile using payment or related
  information is initiated, and if no profile is found, an attempt to create an instant
  profile is made.
- Optimistic concurrency support using version attribute
- Version does not increment for changes to notes or custom fields managed in the
  Square Dashboard
- Concurrent updates to the same profile compare version numbers for webhook notifications
- Birthday values are now strictly in YYYY-MM-DD or MM-DD format from version 2022-10-19
  onwards
- Maximum length constraints on string fields are enforced from version 2022-10-19
- Square SDKs available for backend development in common programming languages.
- Supports interactive API exploration via API Explorer.
- Development can be tested using Square Sandbox.
- Sandbox environment recommended for testing
- Do not share access tokens
- Logs are retained for 28 days
- Maximum size of an individual log entry is 50k; bytes beyond that are truncated
- Access to Sandbox and Production environments is managed via the Developer Console.
- Advanced Access subscription needed for more than two levels of developer permissions
- Square GraphQL supports query operations only; mutations and subscriptions aren't
  supported
- Queries are subject to rate and cost limiting
- Toggle between Sandbox or production environment affects endpoint used
- Square API Explorer allows for interactive API testing in both Sandbox and production
  environments.
- Requires Sandbox access token and location ID for sandbox environment testing
- Access to the Square Dashboard requires a Square account
- Webhook event logs are maintained for a rolling 28-day period
- Square does not decide the outcome of disputes; this is determined by the card-issuing
  bank.
- Sellers must respond to disputes by the specified deadline.
- Square automatically provides additional information to support disputes when available.
- Once submitted, dispute evidence cannot be removed or altered.
- Sandbox environment simulates the dispute process without actual bank involvement.
- Dispute reasons and charge amounts are linked in Sandbox testing.
- Webhooks can be used for real-time updates on dispute states.
- Use HTTPS to ensure security
- Implement caching strategies to optimize API performance
- Events API does not support OAuth access tokens; requires personal access token.
- Access limited to events within a 28-day period.
- Sign-up process required to access Developer Console
- API Explorer prefills the Access token field for initial requests
- Enable 2FA to protect against unauthorized access
- Requires OAuth permissions such as GIFTCARDS_READ and GIFTCARDS_WRITE
- Load fees apply in specific countries (Australia, Canada, USA) at 2.5%
- Uses GraphQL for data queries, supporting multiple operations in a single request.
- Square GraphQL supports read operations only
- Requires a Square account for authentication
- GraphQL Explorer tool is used to build and test queries
- Requires Strong Customer Authentication (SCA) for digital wallet payments to prevent
  declines
- In-App Payments SDK should not be used for digital sales that are consumed within
  the app on certain platforms like Google Play or App Store.
- The minimum SDK version required is API 24 (Nougat, 7.0).
- In-App Payments SDK supports payments for physical and digital sales, but digital
  sales might conflict with App Store and Google Play policies.
- Requires a Square-assigned application ID from the Developer Console
- SDK initialization must occur before processing payments
- In-App Payments SDK installation requires setting up the Square application ID in
  AndroidManifest.xml
- Uses Square Sandbox for testing
- SCA required for transactions in regions demanding Strong Customer Authentication
- SCA not automatically called for digital wallet payments; may cause declines if
  not handled
- In-App Payments SDK requires a backend service to complete payments and issue refunds
- Using the In-App Payments SDK to process digital goods, services, or subscriptions
  might not be allowed by some application distribution platforms
- The In-App Payments SDK only produces the single-use, secure payment card token
- Payment source support varies by country
- Square hardware devices such as Square Terminal, Square Reader, Square Stand, and
  Square Kiosk are primarily for in-person payments.
- All Square hardware is PCI compliant.
- Mobile Payments SDK is available in the US, Canada, and Australia.
- Terminal API allows connection across all operating systems.
- Requires itemization of checkout orders to meet Japan's tax system compliance
- Hardware-based APIs do not support storing of tax information necessary for Japan's
  tax system
- Online checkouts with Square Readers or Square Terminals are not supported in Japan
- Square supports various international payment methods and processes payments in
  the seller's local currency.
- Use the Locations API to determine the currency for payment processing.
- Application fees can only be collected in the currency of the application's Square
  account.
- Uses OAuth with permissions INVENTORY_READ and INVENTORY_WRITE
- Inventory tracking uses client-generated RFC 3339 timestamps to sequence events
  correctly.
- Automatic inventory updates occur when Orders API completes an order if inventory
  tracking is enabled.
- Inventory state transitions must match specific criteria and timestamps to ensure
  accurate inventory counts.
- ignore_unchanged_counts flag in BatchChangeInventory endpoint helps avoid duplicate
  entries by skipping updates if counts have not changed.
- Webhooks require URL configuration and specific event subscriptions.
- Webhook events provide timestamps crucial for synchronized updates.
- Requires publicly accessible HTTPS URL for webhook
- Must respond within 10 seconds
- Requires INVENTORY_READ permission
- Responses must be HTTP 2xx within 10 seconds of receiving the notification.
- Do not store sensitive information in attachments.
- Invoices API cannot be used to download files or track version history.
- The maximum file size for a CreateInvoiceAttachment request is 25 MB in production
  and 1 KB in the Sandbox environment.
- An invoice can have up to 10 attachments.
- 'Invoices cannot be canceled in the states: DRAFT, PAID, REFUNDED, CANCELED, FAILED.'
- Deleted invoices are not returned by GetInvoice, ListInvoices, or SearchInvoices.
- Invoices API requires specific conditions on orders and customers to create and
  publish invoices.
- The API only supports card-on-file and not bank-on-file for automatic payments via
  the Invoices API.
- Invoice must be associated with an order created using the Orders API.
- Only supports single payment requests for BNPL.
- Automatic payment methods like BANK_ON_FILE and SMS delivery method are not supported.
- Invoice payment links are temporary and expire after a certain period
- Developers cannot use Square APIs to directly take payments for invoices or manage
  their payment status
- Automatic payment failures do not provide error details in the webhook payload
- API cannot be used to pay an invoice, only to retrieve payments
- customer_id in an invoice is not necessarily the same as that in the related order
  or payment
- Cursor-based pagination is used for navigating through lists of invoices.
- Invoices can only be updated in DRAFT, SCHEDULED, UNPAID, or PARTIALLY_PAID states.
- Cannot update order_id or location_id fields.
- primary_recipient updates require two requests when in DRAFT state.
- Cannot update primary_recipient field in SCHEDULED, UNPAID, or PARTIALLY_PAID states.
- Invoice attachments cannot be managed via the UpdateInvoice endpoint; use specific
  attachment endpoints instead.
- Notifications are managed based on the delivery_method and notification settings.
- Uses idempotency_key for ensuring idempotency in requests.
- Sandbox environment used for testing.
- Access token and location ID are required for requests.
- Supports automatic charging of cards on file.
- Deprecated Employee object support continues till 2021-08-26; migrate to Team API
  TeamMember object.
- Shift and ShiftFilter objects now include team_member_id fields.
- Shift is deprecated and replaced by Timecard in Square API version 2025-05-21
- Shift endpoints will return 410 GONE errors after retirement in 2026-05-21
- Maximum of 100 location-related custom attribute definitions per application
- Supports sparse updates, only new or changed fields need to be included in the update
  request
- Visibility changes are propagated to corresponding custom attributes within a few
  seconds
- API supports operations like create, update, list, retrieve, and delete for location
  custom attributes and their definitions.
- Custom attributes are not returned in standard location API calls and require specific
  endpoints.
- Visibility settings control access to custom attributes.
- OAuth permissions required for each endpoint are specified in the API documentation.
- Sellers can only configure loyalty program settings in the Square Dashboard
- Loyalty accounts are read-only via API; settings must be managed in the Square Dashboard
- The Square MCP server is currently in Beta; use with caution and test thoroughly
  in Sandbox mode before production
- Maximum of 100 merchant-related custom attribute definitions per application
- Square validates custom attribute selections on upsert operations
- Custom attributes are scoped to specific sellers and cannot be shared between merchants.
- Custom attributes and their definitions can be owned or visible based on the visibility
  settings.
- Notifications for events related to custom attributes can be configured based on
  ownership or visibility.
- The access token used is scoped to a single merchant group.
- Merchant ID is not visible on the Square Dashboard or Developer Console.
- All Connect v1 objects and enums are deprecated or retired.
- The Deprecated page lists all deprecated endpoints and webhooks.
- Your code will break if attempting to use retired functionality
- REST calls that attempt to use retired functionality return errors
- Square SDKs released on or after retirement don't include retired features
- API and Reader SDK will be retired on December 31, 2025
- Developers should migrate to Mobile Payments SDK
- API and Reader SDK deprecated; retiring on December 31, 2025
- Mobile authorization codes should be used immediately; they do not expire but must
  be used within 90 days or before the application fails to take a payment
- The Mobile Authorization API is deprecated and will be retired on December 31, 2025
- The API does not support connections through HTTP, only HTTPS and TLS 1.2
- Not supported in the Square Sandbox environment
- Requires runtime permissions for device features like location and microphone
- Not compatible with custom devices that violate security rules
- Requires submitting an application signature for production payments
- Requires location access for payments
- Not compatible with custom devices that violate security rules or have root access
- Physical card readers not supported in Sandbox; use Mock Reader UI for simulation
- Reader SDK to be retired by December 31, 2025; migrate to Mobile Payments SDK
- Mobile Payments SDK does not require Mobile Authorization API unlike Reader SDK
- Transactions API is deprecated; use Payments API
- OAuth access tokens expire after 30 days, requiring a refresh.
- Offline payments are only supported on the two most recent versions of Square Reader
  for contactless and chip and Square Stand second generation.
- Using the Mobile Payments SDK in unattended terminals or kiosks is strictly prohibited.
- OAuth access tokens expire after 30 days
- Refresh tokens used with PKCE are single-use and expire in 90 days
- Automatically renew OAuth access tokens every 7 days or less
- Check token age from database; if older than 8 days, generate an alert
- Never store credentials or tokens in version control or source code
- Use strong encryption for storing tokens and application secrets
- The redirect URL must use HTTPS and handle GET responses for token management.
- PKCE flow requires `code_verifier` to be passed if `code_challenge` is included
  in the authorization URL.
- Code flow and PKCE flow have different parameters in the authorization URL.
- Permissions should be scoped to the least privilege necessary for the application
  functionality.
- OAuth token used with Square API is scoped at the seller level and works with all
  of the seller's locations
- Location ID is required in some API calls and optional in others
- Seller-scoped OAuth tokens replace location-scoped OAuth tokens, which must be revoked
- OAuth access tokens expire after 30 days; refresh tokens from code flow do not expire
  unless access is revoked.
- Refresh tokens from PKCE flow are single-use and expire after 90 days.
- OAuth requires HTTPS for production, HTTP with localhost is allowed for sandbox
  testing.
- Authorization codes expire after 5 minutes and are single-use.
- Use code flow for confidential clients and PKCE flow for public clients.
- Automatic token renewal recommended every 7 days to avoid service interruption
- OAuth access tokens have a default expiration of 30 days, but can be renewed before
  they expire to prevent service interruption.
- Refresh tokens can be single-use or multi-use depending on the flow (PKCE or Code).
- OAuth tokens can be revoked completely or partially (just the access token).
- Endpoints require specific OAuth permissions scoped to the required actions.
- Endpoint used to check scopes and validity of access tokens
- OAuth tokens are refreshed using the refresh token before they expire in 30 days.
- Production environment requires HTTPS and cannot use localhost.
- Sandbox environment allows HTTP and localhost.
- Access tokens expire after 30 days; refresh tokens from code flow do not expire
  unless access is revoked.
- OAuth API does not support OpenID or other SSO protocols.
- Production and Sandbox environments have different base URLs and credentials.
- APIs are part of an early access program and subject to change
- No sandbox environment available for testing; testing must be done in production
- Supports both web and mobile applications
- Provides SDKs for different platforms including Android, iOS, Flutter, and React
  Native
- Offers solutions for both one-time payments and recurring subscriptions
- Taxes and discounts can be applied at the ORDER or LINE_ITEM scope.
- Pricing options allow for automatic application of taxes and discounts defined in
  the Square catalog.
- The CreateOrder endpoint defaults the state of new orders to "OPEN"
- Orders in "DRAFT" state cannot be fulfilled or paid
- Square may delete "DRAFT" orders not updated within 30 days
- Supports multiple types of discounts including item-level and order-level, both
  percentage and fixed amount
- One fulfillment limit per order using the Orders API
- No fulfillment splitting allowed
- Immutable fulfillment fields based on state
- DELIVERY fulfillment type is in closed Beta
- Only paid orders are visible in Square products
- Orders API allows creating and managing orders with options for fulfillments and
  price adjustments
- Orders appear in Square POS only after being charged with delayed capture set to
  true
- Metadata keys must be 60 characters or less and use only a-z, A-Z, 0-9, _ or -.
- Metadata values have a maximum length of 255 characters.
- An application can map up to 10 entries per metadata field.
- Don't use metadata to store any sensitive information.
- In the current implementation, the Refunds API doesn't support itemized refunds
  but Orders API does.
- The Orders API does not support programmatically exchanging order items; exchanges
  must be performed using Square products.
- Uses Bankers Rounding for adjustment calculations.
- Requires Node.js installed to use the sample application
- Orders API is integrated with Square Point of Sale and Square Dashboard Order Manager
- Orders can be created ad-hoc or with catalog items
- No transaction fee for orders with Square payments; 1% fee with non-Square payments
- Custom attributes and definitions are managed via qualified keys for third-party
  applications.
- Visibility settings for custom attributes are either VISIBILITY_READ_ONLY or VISIBILITY_READ_WRITE_VALUES.
- House Account payments are only retrievable and not creatable in the Square Point
  of Sale and supported only in the United States.
- Testing in the Sandbox environment is supported for eCommerce payment APIs; real
  credit card testing is required in production for in-person payment APIs.
- Minimum payment amounts vary by payment type and supported country
- Increment specification for cash payments in certain regions
- Separate maximum limits for Afterpay monthly payments in the USA
- SDK version requirements for using the Payments and Refunds API
- Deprecated Transactions API with no new features being added
- Refunds are limited to 20 per payment ID and cannot be issued for payments older
  than 1 year.
- Refunds can only be made on payments with a status of COMPLETED.
- Unlinked and cross-method refunds to Square gift cards are subject to compliance
  limits.
- The RefundPayment endpoint supports optimistic concurrency using a version_token.
- Pagination does not include a cursor field if fewer than 10 payments in response.
- Application fees cannot be split among multiple Square accounts
- OAuth with permissions PAYMENTS_WRITE, PAYMENTS_READ, PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS,
  ORDERS_READ, ORDERS_WRITE is necessary
- Minimum payment amount varies by country and payment source
- Only payments with status APPROVED can be updated; COMPLETED payments cannot be
  updated.
- UpdatePayment endpoint is not supported for payments to sellers in Japan.
- Fields that can be updated include delay_action, amount_money, app_fee_money, and
  tip_money.
- Use of version_token is recommended for optimistic concurrency control.
- Webhook notifications do not include 'Note' field information for Point of Sale
  payments.
- Webhook events are triggered under various conditions such as payment completion,
  cancellation, or when associated with an invoice or order.
- Requires OAuth2 for authentication
- Uses OAuth2 with refresh token
- Region-specific pricing requires region parameter
- Payments API and Refunds API replace the Transactions API.
- Requires 'PAYOUTS_READ' OAuth scope
- Defaults to main or default location if no specific location is provided
- OAuth scope required is PAYOUTS_READ
- Uses OAuth with the scope PAYOUTS_READ
- Pagination supports specifying page size with a maximum of 100 items
- By default, results are returned from oldest to newest
- Payouts API data is not available for dates prior to January 2021
- Mobile web transactions require setting a callback URL in the Developer Console
- Transaction URLs for Android use intent format and require dynamic construction
- Information in the 'notes' field is saved in the Square Dashboard and printed on
  receipts
- Transactions are handled differently on iOS and Android devices
- Requires the Square Point of Sale application v4.64 and later for compatibility
  with SDK version 2.0
- Minimum supported Android SDK version is 15
- Point of Sale SDK for Android only supports Java
- Uses custom URL schemes for application requests authentication
- Requires manual or dependency manager installation of the Point of Sale SDK
- Integration requires handling custom URL schemes in iOS Info.plist
- Supports only PayPay QR code payments in Japan
- Requires the Square Point of Sale app and Square Reader for transactions
- The API version used in examples is v2.0
- Requires an Android or iOS device with the most recent version of the Square Point
  of Sale application installed
- Does not support Square invoices, itemized sales, or Sandbox testing
- Cannot be directly integrated with the Payments API to retrieve payment details
  from a POS transaction
- Reader SDK requires Android API level 24 or higher for minimum SDK and API level
  33 or lower for target SDK.
- The Reader SDK is not supported on devices with custom OS, rooted, or jailbroken
  devices.
- Square recommends using devices from major manufacturers like Google, Samsung, or
  HTC for compatibility with the Reader SDK.
- Ensure devices have proper permissions enabled for Location, Audio, Bluetooth, Device
  Storage, and Phone Access to work with Square Readers.
- The Reader SDK's dependencies contain over 65,000 methods; enabling multidex is
  required for applications with minSdkVersion earlier than API 21.
- Mobile authorization codes are short lived and should be used immediately
- Authorization is valid until it's explicitly revoked or if no payment is taken within
  90 days
- Reader SDK is only compatible with iOS devices and does not support custom or rooted
  devices
- Bitcode is not supported; disable Bitcode in the Build Settings
- Authorization is mandatory before using the Reader SDK features.
- Reader SDK must be authorized with a mobile authorization code to start
- Reader SDK cannot be deauthorized if there are pending transactions
- Reader SDK is only available for accounts based in the United States
- Does not support itemized transactions
- Does not support use in unattended terminals or kiosks
- Supports on-screen tipping only; no tipping on printed receipts
- Cannot issue refunds directly; must use Refunds API or manually in Square Dashboard
- Not supported in the Square Sandbox
- Transactions cannot be attributed to a specific employee
- Requires internet connection to process payments
- Not compatible with custom devices that violate security rules or grant root access
- Not compatible with rooted or jailbroken devices
- Recommended to run on devices from large mobile manufacturers like Google, Samsung,
  or HTC
- Avoid devices from smaller OEMs
- Supported OS versions for Android are 24 to 33
- Supported OS versions for iOS are 14 and later
- Reader SDK supports specific versions for 2 years unless critical updates are required.
- The API supports filtering refunds by location, status, payment type, and other
  attributes.
- Pagination is supported using a cursor parameter, with a default page size of 10.
- Each refund is linked to a Payment object, which can be queried separately.
- Unlinked refunds aren't supported in Japan
- Refunds cannot be processed by a Square account that hasn't been enabled for payment
  processing
- The unlinked refund feature is only available for sellers who've been authorized
  to use it
- Webhook events notify when a refund is created or updated.
- Refund-related webhook events do not include 'Note' information for Point of Sale
  refunds.
- SCA requirements apply to online and in-app payments in Europe and Japan
- Sellers must flag transactions appropriately using CustomerDetails
- SCA not required for in-person payments
- SCA required for compliance in the EEA and Japan
- Payments lacking SCA may be declined with CARD_DECLINED_VERIFICATION_REQUIRED error
- Square Online APIs are publicly available as part of an early access program.
- Requires ONLINE_STORE_SITE_READ permission for OAuth.
- No sandbox environment for testing Sites API.
- Square Online APIs are publicly available as part of an early access program
- Square Online APIs do not support the Sandbox environment; use production environment
  for testing.
- Requires OAuth access token for authentication with scoped access.
- API not available in Sandbox environment
- Integration with checkout flow is not supported
- Publicly available as part of an early access program
- Subscriptions API does not allow ACH payments as bank account sources cannot be
  stored and charged later.
- Invoices are emailed to the customer's email address.
- Subscriptions can start immediately or be set to start in the future.
- Cancellation of a subscription can be immediate or at the end of the current billing
  cycle.
- ACH payments are not available through the Subscriptions API.
- Invoices are managed through the Invoices API.
- Subscription deactivation occurs at the end of the billing cycle.
- Minimum charge for a subscription is $1
- Subscriptions can have a free trial period
- ACH payments are not supported for subscriptions
- API version 2024-12-18 or higher required for Job endpoints
- Webhooks available for various team and job events
- Checkouts in COMPLETED or CANCELED state are deleted after 30 days.
- Square Terminals don't support connecting to external printers when the Square Terminal
  is paired.
- Terminal actions are currently in Beta.
- The Terminal API doesn't support splitting a checkout into multiple payments for
  a single checkout request.
- Ensure using device code generated by the Devices API for successful pairing, not
  from the Square Dashboard.
- Requires OAuth with scope permissions for device credential management and payment
  processing.
- The Devices API does not support the Square Sandbox environment.
- Device codes must be used within 5 minutes or they will expire.
- Terminal API does not support cash payments
- Application fees require additional OAuth permissions
- e-money payment cancellations are not supported post-error
- Terminal API does not support updates to orders in the 'IN_PROGRESS' state
- Square deletes completed checkouts after 30 days
- Support for itemization and displaying orders on the Square Terminal
- Receipts can be printed automatically or manually set to skip the receipt screen
- Supports splitting payments and partial payments against an order
- Devices API provides periodic updates, not real-time data
- 15-minute interval for device status updates; considered offline if no update after
  30 minutes
- Search supports filtering by `name` and `status` and sorting by `name` or `created_at`
- Name filter uses prefix matching and is not case-sensitive
- ACH bank transfers are only supported by the Web Payments SDK and the Payments API
  in the United States.
- Square requires authorization for ACH payments which must be part of the payment
  flow.
- Afterpay may not be supported due to browser or device support, account issues,
  or payment amount restrictions.
- Afterpay Sandbox environment ignores seller eligibility checks.
- Cash App Pay is currently supported only in the United States
- Cash App Pay currently doesn't support changing or updating the options specified
  in a PaymentRequest object
- CBD sellers cannot take Cash App payments
- Apple Pay is supported only on Apple Safari browsers.
- Requires HTTPS and a Square account; cannot be tested with HTTP or localhost.
- Apple Pay payments integration requires setting up the domain association file under
  the public directory in the server.
- Ensure accurate decline rate performance using 3DS authentication by providing complete
  buyer information.
- Use specific source URLs rather than wildcards
- Minimize use of 'unsafe-inline' and 'unsafe-eval'
- Regularly review and update CSP rules
- Use the `verifyBuyer` function to apply Strong Customer Authentication (SCA) for
  enhanced payment security
- OAuth implementation is recommended over personal access tokens for production.
- Integration requires enabling the Web Payments SDK and Gift Cards API.
- Testing involves using a specific test gift card number.
- Google Pay is supported on Google Chrome, Mozilla Firefox, Apple Safari, Microsoft
  Edge, Opera, and UCWeb UC browsers.
- Google Pay requires HTTPS.
- Square supports Google Pay in all regions except Japan.
- Google Pay incorporates the region's local currency.
- Adherence to Google Pay API Terms of Service, Google Pay API Acceptable Use Policy,
  and Google's brand guidelines is required.
- The Web Payments SDK cannot be used with Internet Explorer 11
- Chrome extensions don't work with the Web Payments SDK
- The postal code field isn't supported for Japan and China
- The PaymentRequest object is used to handle digital wallet payment requests, updates
  based on shipping changes, and listen to various buyer interaction events.
- A payment request update can only succeed when the digital wallet payment sheet
  is not open; otherwise, it fails and returns false.
- Digital wallet providers like Google Pay and Apple Pay manage shipping address information,
  which is passed to the application via the shippingcontactchanged event.
- Integration process involves client-side and server-side operations
- Uses Web Payments SDK to handle secure payment token generation
- Tokenization involves buyer verification and authentication where necessary.
- Web Payments SDK handles SCA compliance and buyer authentication.
- Deprecated verifyBuyer method will continue performing SCA checks until its retirement.
- Ensure to replace Sandbox credentials with production credentials when moving to
  production
- Use idempotency keys to prevent processing duplicate notifications
- Validate webhook events using HMAC-SHA256 signatures
- Webhooks may be sent more than once, handle idempotency using event_id
- Retry mechanism in place for failed deliveries with exponential backoff up to 24
  hours
- Certain Square APIs do not support webhooks
- Requires HTTPS for webhook event notification connections
- Notification URL must respond with a 2xx HTTP status
- The notification URL must use the HTTPS protocol, be correctly formatted, and be
  reachable
- Webhook notification URLs are public and must validate each event to confirm origin
  from Square
- Use constant-time crypto library to prevent timing analysis attacks
- Webhook uses HMAC SHA256 signatures for security
- The signature key 'asdf1234' is a fixed example value for local testing and should
  be securely managed in production.
- The server must validate the Square webhook signature to ensure authenticity.
- Respond with a 2xx HTTP status code within three weeks to avoid webhook subscription
  deactivation
- Use idempotency keys to prevent processing duplicate messages
- Implement message versioning when passing data between applications
- Requires specific OAuth permissions for webhook notifications, such as PAYMENTS_READ
  for payment.created events
- Webhook subscriptions cannot use OAuth tokens; they require personal access tokens
- Multiple endpoints available for both REST and GraphQL
- Development tools mentioned include SDKs and sample applications
errors:
- code: NOT_FOUND
  detail: The requested Value {key} is not found
  category: INVALID_REQUEST_ERROR
- code: BAD_REQUEST
  detail: No matching definition found for value
  category: INVALID_REQUEST_ERROR
- CONFLICT: Attempting to write to version 3, but current version is 4
- BAD_REQUEST: If the specified version is later than the current version
- PERMISSION_REVOKED: Check if the application's permissions are revoked or the token
    is expired
- APPOINTMENTS_READ: Ensure buyer-level permissions are set
- APPOINTMENT_BUSINESS_SETTINGS_READ: Verify buyer-level read permissions
- APPOINTMENTS_WRITE: Check buyer-level write permissions
- APPOINTMENT_BUSINESS_SETTINGS_WRITE: Confirm buyer-level write permissions
- APPOINTMENTS_ALL_READ: Confirm seller-level read permissions include this scope
- APPOINTMENTS_ALL_WRITE: Ensure seller-level write permissions include this scope
- 401 Unauthorized: Check if the Square Appointments services are properly activated
- Payment Method Error: Verify test credit card details in Sandbox environment
- booking_version mismatch: Error returned when booking_version does not match the
    version value of the Booking object.
- BAD_REQUEST: The cancellation period for this booking has ended
- NOT_FOUND: This location either does not exists, or is not enabled for Bookings.
- REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency
- 200: Success
- 400: Bad Request - Invalid parameters
- 401: Unauthorized - Authentication required
- 403: Forbidden - Access denied
- 404: Not Found - Resource not available
- BAD_REQUEST:
    message: is invalid
    field: phone
- HTTP 2xx: Respond within 10 seconds of receiving a notification.
- code: FORBIDDEN
  message: Merchant subscription does not support write operations.
- AUTHENTICATION_ERROR: Use the correct access token for the environment
- '410 GONE: Retired API endpoints are no longer available.'
- If the `X-Clear-Null` header is not included, Square ignores any null settings in
  the `UpdateOrder` request
- Square ignores the `remove` field if the value isn't `true`
- 401 Unauthorized: Recheck OAuth scopes or token expiration
- INSUFFICIENT_FUNDS: Retrying after a few days might be effective
- GENERIC_DECLINE: Don't retry; advise the buyer to contact their issuer
- 'CVV_CHECK_FAILED: Ensure CVV is correct'
- 'EXPIRATION_DATE_PASSED: Check the card''s expiration date'
- 'ADDRESS_VERIFICATION_FAILED: Ensure billing postal code matches issuer''s records'
- Unauthorized: Check if OAuth scopes `CUSTOMERS_WRITE`, `PAYMENTS_WRITE`, or `PAYMENTS_WRITE_SHARED_ONFILE`
    are correctly set
- 401 Unauthorized: Check if the OAuth token is correct and has sufficient permissions
- INVALID_REQUEST: Specify at least one variation
- is_top_level Boolean type not supported: Use range_query with min and max values
    set to 1 for true, 0 for false.
- 400: Invalid operation to update a non-existent object
- 404: Not found
- hidden_online: Modifier not available for online ordering.
- on_by_default: Modifier is selected by default on all locations.
- price_money: Set specific prices for each modifier.
- API_RATE_LIMIT: Implement retry logic and respect rate limits
- 'Invalid Request: When both include_deleted_objects and include_category_path_to_root
  are true.'
- 200: Catalog change succeeded
- INVALID_REQUEST_ERROR: Check required attributes like id, version, type, and pricing_type.
- Duplicate image upload: No new image is created if an existing image is uploaded
    again.
- No specific error patterns mentioned for handling webhook or SearchCatalogObjects
  in the provided documentation.
- Mismatched data type for field: Ensure correct data type is provided for catalog
    object fields
- 401 Unauthorized: Ensure proper OAuth scopes are set
- INVALID_EMAIL_ADDRESS: This account's email is linked to a current Weebly Account.
    Log in to Weebly and link accounts to resolve.
- 401 Unauthorized: Recheck OAuth token validity or permissions.
- 404 Not Found: Endpoint or data not found; verify endpoint paths and payloads.
- Price Mismatch: Ensure the price in CreatePaymentLink matches the subscription plan
    variation price
- 400 BAD_REQUEST: Check if tax_ids field is used inappropriately or verify the country
    of the seller account before setting the tax_ids field
- 429: Handle rate limiting by adjusting the frequency of API calls
- INVALID_PHONE_NUMBER: Expected phone_number to be a valid phone number
- BAD_REQUEST: Returned for unrecognized fields in CreateCustomer or SearchCustomers
    calls.
- VALUE_TOO_LONG: Returned if the maximum length of a string field is exceeded in
    CreateCustomer or UpdateCustomer requests from 2022-10-19.
- INVALID_PHONE_NUMBER: Include valid phone number
- INVALID_EMAIL_ADDRESS: Include valid email address
- INVALID_VALUE: Use correct values for calls
- 400 BAD_REQUEST: Ensure required fields are not empty
- 400 BAD_REQUEST: Occurs when tax_ids field is incorrectly used or in unsupported
    countries
- 429: Handle rate limiting by spacing API requests
- BAD_REQUEST: Check for unrecognized fields in requests
- VALUE_TOO_LONG: Ensure string fields do not exceed their maximum lengths
- INVALID_PHONE_NUMBER: Specify a valid phone number
- INVALID_EMAIL_ADDRESS: Specify a valid email address
- INVALID_VALUE: Value is invalid; check earlier API versions
- BAD_REQUEST: Ensure all required fields are provided
- 200: Request succeeded
- Error status code: Request failed
- 'Access Denied: Ensure that the correct environment (Sandbox or Production) is selected
  and that the access token has the necessary permissions.'
- 401 Unauthorized: Check credentials and manage permissions in Developer Console.
- '401 Unauthorized: Ensure the correct credentials are used for the intended environment'
- 401 Unauthorized: Ensure proper OAuth credentials and scopes
- 504: Workflow took too long to process the notification and failed to respond in
    a timely manner
- DISPUTES_WRITE: Required OAuth permission to write disputes.
- DISPUTES_READ: Required OAuth permission to read disputes.
- EVIDENCE_REQUIRED: The bank is requesting more evidence; upload additional evidence
    as needed.
- PROCESSING: Dispute is currently being processed; no further evidence can be added.
- 429: Implement a retry mechanism with exponential backoff and jitter
- COMPLETED: Payment processing completed successfully
- Unauthorized: Enable 2FA or check credentials
- BAD_REQUEST: Ensure `app_fee_money` field is not included for gift card payments
- API_VERSION_INCOMPATIBLE: Use Square API version 2024-08-21 or later for specific
    refund features
- 401 Unauthorized: Recheck authentication credentials or token validity.
- '401 Unauthorized: Check the validity of the access token'
- Application termination: Ensure Square application ID is set before initializing
    SQIPCardEntryViewController to prevent uncaught exception.
- Finish: Normal completion status
- ShowError: Indicates an error that should be handled by prompting the user to edit
    their payment information
- 401 Unauthorized: Check OAuth token validity or scopes
- CARD_DECLINED_VERIFICATION_REQUIRED: Ensure 'verifyBuyer' is implemented on customer-initiated
    payments in the EU
- 401 Unauthorized: Check OAuth token validity.
- Issue with receipt printing: Ensure correct connection and configuration of third-party
    printers
- REFUND_DECLINED: Payment could not be refunded; handle as REFUND_ERROR
- IN_PROGRESS: Error during payment processing; navigation required to cancel checkout
- PENDING: Checkout request pending; error management needed
- 'Authorization failure: Ensure the OAuth token is correctly scoped and valid for
  the seller’s country.'
- If batch operation fails, all individual changes within the batch are not applied,
  maintaining the previous inventory count.
- '401 Unauthorized: Check OAuth credentials and permissions.'
- 201 Created: Response when an attachment is successfully created.
- 200 OK: Response when an attachment is successfully deleted.
- invoice.deleted: Invoked when an invoice is permanently deleted.
- invoice.updated: Invoked when an invoice status is updated to CANCELED.
- invoice.canceled: Invoked when an invoice is canceled.
- order.updated: Invoked when the associated order state is updated.
- REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.
- CARD_ON_FILE_ERROR: Ensure the card on file is valid and has sufficient funds.
- code: BAD_REQUEST
  detail: Buy now pay later payments cannot be enabled for invoices with multiple
    payment requests
- code: BAD_REQUEST
  detail: Cash App payments are not supported for this location's country
- invoice.scheduled_charge_failed: Contact the customer for more details on the payment
    failure
- invoice.updated: Triggered after an invoice is updated.
- status: 401 Unauthorized
  resolution: Ensure the correct access token is provided.
- 410 GONE: Shift endpoints become unavailable after retirement date
- 404 NOT_FOUND: Custom attribute definition isn't found
- 400 BAD_REQUEST: Version specified is later than the current version
- BAD_REQUEST: No matching definition found for value
- NOT_FOUND: The requested Value {key} is not found
- MERCHANT_PROFILE_READ: Permission needed for subscribing to events related to custom
    attributes.
- '401 Unauthorized: Check OAuth permissions and token validity.'
- code: UNSUPPORTED_LOYALTY_REWARD_TIER
  message: Contact Developer Support or Square account manager if error occurs during
    reward tier conversion
- code: NOT_FOUND
  message: Merchant does not have a loyalty program; check subscription status in
    the Square Dashboard
- 400 BAD_REQUEST: Version query parameter mismatches
- Unauthorized: Authorization revoked or application inactive for 90 days without
    payment
- NO_NETWORK: Ensure device has network connectivity
- USAGE_ERROR: Check for user errors in payment setup
- 'Authorization error: Handle auth error'
- 401 Unauthorized: Ensure correct OAuth procedures and token handling
- 'Unsupported hardware for offline payments: An error will occur if attempting an
  offline payment on unsupported hardware.'
- ACCESS_TOKEN_EXPIRED: Token has expired; initiate refresh process
- ACCESS_TOKEN_REVOKED: Token has been revoked; re-authentication needed
- UNAUTHORIZED: Token is invalid or insufficient scope; check token and permissions
- 403 FORBIDDEN: API call has insufficient scope; check required permissions
- CSRF Validation Failed: Verify the authenticity of the `state` value returned to
    the redirect URL.
- Not Authorized: Not Authorized error occurs if client ID and client secret are from
    different applications
- UNAUTHORIZED: Present user-friendly message instead of API error response
- ACCESS_TOKEN_EXPIRED: Implement token renewal logic; present user-friendly message
- ACCESS_TOKEN_REVOKED: Implement token status checks and user-friendly error handling
- INSUFFICIENT_SCOPES: Ensure application has required permissions before production
- AUTHENTICATION_ERROR: Ensure correct environment-specific tokens are used; check
    for credential mismatches.
- UNAUTHORIZED: 'Verify the `Authorization: Bearer {ACCESS_TOKEN}` header format.'
- ACCESS_TOKEN_EXPIRED: Renew the access token using the refresh token
- UNAUTHORIZED: Token is invalid; check if it has expired or has been revoked
- 403 FORBIDDEN: API call has insufficient scope
- access_denied: Authorization denied; user chose to deny access to the app.
- unknown_parameters: Expected parameters weren't returned
- AUTHENTICATION_ERROR: Ensure correct environment-specific credentials are used.
- UNAUTHORIZED: Check if the access token or refresh token has expired or been revoked.
- 'Invalid tax or discount application: Ensure scopes and blocklists are correctly
  configured.'
- Unable to access delivery_details without being a Square partner for DELIVERY type
- 400 BAD_REQUEST: Given phase used in the wrong type of charge
- ORDERS_READ: Permissions error when accessing order events
- CONFLICT: Optimistic concurrency control error; provided version is less than the
    current version.
- BAD_REQUEST: Version provided is higher than the current version or other validation
    errors.
- 401 Unauthorized: Check OAuth permissions; ensure ORDER_READ or ORDER_WRITE scopes
    are included.
- 401 Unauthorized: Check if the OAuth token has expired or is invalid.
- INSUFFICIENT_FUNDS: Authorization error; 'INSUFFICIENT_FUNDS'
- GIFT_CARD_AVAILABLE_AMOUNT: Gift card does not have sufficient balance for requested
    amount.
- BAD_REQUEST: Ensure autocomplete is set to false when accept_partial_authorization
    is true; app_fee_money and tip_money are not supported in this configuration.
- 401 Unauthorized: Check OAuth token validity or permissions
- FAILED: The refund has failed due to reasons such as insufficient funds or invalid
    card.
- PENDING: Refund is being processed. Contact support if status persists beyond 14
    days.
- COMPLETED: Refund has been processed successfully.
- REJECTED: Refund rejected due to insufficient funds or other issues.
- NOT_FOUND: Could not find payment with id.
- PAYMENTS_WRITE_DENIED: Ensure proper OAuth permissions are granted
- INVALID_REQUEST_ERROR: Check request parameters for correctness
- FAILED: Payment request is declined by the bank
- AMOUNT_TOO_HIGH: Limit on maximum amount a payment can be increased.
- UNAUTHORIZED: Recheck OAuth scopes or token expiration
- RATE_LIMIT_EXCEEDED: Throttle API calls or reduce frequency
- INVALID_REQUEST: Check API request parameters or data types
- 401 Unauthorized: Ensure the OAuth scope PAYOUTS_READ is correctly set
- 401 Unauthorized: Check the OAuth token or permissions
- error_code: Indicates an error occurred during a Point of Sale API transaction
- 'Authentication Error: Ensure the package name and SHA-1 fingerprint are correctly
  registered in the Developer Console'
- Transaction failure: Transaction unsuccessful; handle according to error description
- Decode Error: Print decode error
- Error: Square Point of Sale is not installed
  Solution: Prompt to install the Square Point of Sale app from the Play Store
- amount_invalid_format: The request has a missing or invalid amount to charge.
- amount_too_large: The request amount to charge is too large.
- amount_too_small: The request amount to charge is too small.
- client_not_authorized_for_user: Point of Sale versions prior to 4.53 require the
    developer to guide sellers through OAuth.
- could_not_perform: The request couldn't be performed due to an unfinished transaction
    pending in Square Point of Sale.
- currency_code_mismatch: The currency code provided does not match the currency associated
    with the current business.
- currency_code_missing: The currency code provided in the request is missing or invalid.
- customer_management_not_supported: This seller account doesn't support customer
    management.
- data_invalid: The URL sent to Square Point of Sale has missing or invalid information.
- invalid_customer_id: The customer ID provided doesn't correspond to a customer in
    the seller's Customer Directory.
- invalid_tender_type: The request included an invalid tender type.
- no_network_connection: The device has no network connection.
- not_logged_in: A seller isn't currently logged in to Square Point of Sale.
- payment_canceled: The seller canceled the payment in Square Point of Sale.
- unsupported_api_version: The installed version of Square Point of Sale doesn't support
    the specified API version.
- unsupported_currency_code: The currency code provided isn't supported by the Point
    of Sale API.
- unsupported_tender_type: The request included a tender type that isn't supported
    by the Point of Sale API.
- user_id_mismatch: The business location currently signed in doesn't match the location
    represented by the provided location_id.
- user_not_active: The currently signed-in location hasn't activated card processing.
- Device Incompatibility: Ensure the device is not rooted or jailbroken and is from
    a supported manufacturer.
- Permission Denied: Check that all required device permissions are granted.
- SDK_NOT_AUTHORIZED: Re-authorize the SDK
- CANCELED: Checkout was canceled
- USAGE_ERROR: General error handling for checkout usage
- No such file or directory: Ensure Reader SDK Run Script phase is the last phase
    in the list
- sdkNotAuthorized: Reader SDK is not authorized.
- usageError: Check SDK usage for possible misconfigurations.
- Error details returned in user-displayable format, including error codes and messages;
  also debugging information provided
- 401 Unauthorized: Check the mobile authorization code or token expiration.
- BAD_REQUEST: Unlinked refund processing is not enabled for this merchant.
- 401 Unauthorized: Recheck authentication and permissions.
- CARD_DECLINED_VERIFICATION_REQUIRED: Implement verifyBuyer on customer-initiated
    payments
- 200 OK: Successful request
- BAD_REQUEST: Check for valid snippet code and proper encoding in API requests.
- RATE_LIMIT_ERROR: Handle potential rate limiting errors
- NOT_FOUND: Resource not found.
- CUSTOMER_NO_EMAIL: The customer with ID does not have an email address.
- EMPLOYEES_READ: Required permission to access webhook events for team members and
    jobs
- 401 Unauthorized: Recheck OAuth scopes or token expiration.
- device.code.paired: Validate webhook notification to confirm device pairing status.
- terminal.checkout.created: Acknowledge new Terminal checkout.
- terminal.checkout.updated: Notifies checkout status change.
- CANCELED: If transaction completes, refund cannot be triggered post completion.
- IN_PROGRESS: Avoid updating orders once they are being processed
- COMPLETED: Order and payments transition to this state when the checkout completes
    successfully
- '401 Unauthorized: Ensure OAuth permissions include `DEVICES_READ`'
- 400 BAD_REQUEST: Vendor name must be unique
- VENDOR_READ or VENDOR_WRITE: Ensure proper OAuth scopes are set
- INVALID_REQUEST_ERROR: Resource not found.
- error: Error during ACH tokenization
  resolution: Check if redirectURI contains query parameters; ensure they are removed.
- 'Square script failed to load: Monitor script loading'
- 'CSP violation messages: Review browser console for specific violation messages'
- INSUFFICIENT_FUNDS: Occurs when the gift card balance is insufficient to cover the
    payment.
- Initializing Gift Card failed: Check if the GiftCards API and Web Payments SDK are
    correctly initialized and configured.
- CARD_DECLINED_VERIFICATION_REQUIRED: Implement verifyBuyer for customer-initiated
    payments in the EU
- If the digital wallet payment sheet is open, attempting to update the payment request
  will fail and return false.
- Compromised webhook event: Validate using HMAC-SHA256 to ensure authenticity
- 2xx: Expected successful response code to acknowledge receipt of webhook events
- 5xx: Indicates server errors; may trigger retries from Square
- URL is not valid: Ensure the notification URL is correctly formatted and uses HTTPS
    protocol
- 'Invalid signature: Return 403 Forbidden'
- 403 Forbidden: Signature is invalid. Check if the signature key and notification
    URL are correctly configured.
- warning_email_1_week: Respond to avoid second warning
- warning_email_2_weeks: Respond to avoid final warning
- warning_email_3_weeks: Respond to avoid automatic deactivation
- 200: Ensure timely response to webhook notifications
- Multiple webhook subscriptions: Define unique listener for each subscription; avoid
    overlapping V1 and V2 subscriptions for the same API event
auth_info:
  mentioned_objects:
  - OAuth API
  - BankAccount
  - CustomAttribute
  - CustomAttributeDefinition
  - OAuth
  - OAuth scopes
  - Square Dashboard
  - Square Developer Console
  - APPOINTMENTS_READ
  - APPOINTMENTS_ALL_READ
  - Merchant subscription
  - Personal access token
  - OAuth access token
  - Web Payments SDK
  - In-App Payments SDK
  - Access Tokens
  - Webhook Subscriptions API
  - OAuthToken
  - CustomersAPI
  - PaymentsAPI
  - OAuth token
  - CatalogCustomAttributeDefinition
  - CatalogCategory
  - CatalogObject
  - CatalogItem
  - CatalogItemVariation
  - CatalogModifierList
  - CatalogModifier
  - CatalogDiscount
  - CatalogPricingRule
  - CatalogTax
  - CatalogQuickAmountsSettings
  - RetrieveCatalogObject
  - BatchRetrieveCatalogObjects
  - ListCatalog
  - SearchCatalogObjects
  - CatalogCustomAttributeValue
  - CatalogImage
  - Webhook
  - Bearer Token
  - Subscription plan
  - Subscription plan variation
  - Subscription
  - Customer
  - Address
  - CustomerGroup
  - CustomerSegment
  - CustomerPreferences
  - Customers API
  - access_token
  - application_id
  - application_secret
  - Access Token
  - access token
  - application ID
  - application secret
  - Team API
  - Labor API
  - Developer Console
  - Sandbox Dashboard
  - location_id
  - Square Sandbox
  - Square Help Center
  - Dispute
  - DisputeEvidenceType
  - Square developer account
  - 2FA
  - Permissions
  - Schema
  - Queries
  - OauthToken
  - Access token
  - Square application ID
  - Sandbox application ID
  - Sandbox access token
  - Default Test Account location ID
  - SQIPBuyerVerificationSDK
  - Checkout
  - Payments
  - Invoices
  - Orders
  - TerminalAction
  - INVENTORY_READ
  - INVENTORY_WRITE
  - Catalog API webhook
  - customer_id
  - card_id
  - Merchant
  - Sandbox Access Token
  - Authorization
  - Permissions Reference for Loyalty
  - Personal Access Token
  - Location ID
  - Application ID
  - AuthorizationManager
  - ReaderManager
  - PaymentManager
  - SettingsManager
  - ObtainToken
  - RevokeToken
  - RetrieveTokenStatus
  - RedirectURL
  - ApplicationID
  - ApplicationSecret
  - Connect v1
  - Webhook subscriptions
  - Authorization code
  - Refresh token
  - ListLocations
  - personal access token
  - ObtainTokenRequest
  - Order
  - Payment
  - Invoice
  - Transaction
  - CustomerDetails
  - AuthProvider
  - SHA-1 fingerprint
  - Package name
  - SCCAPIRequest
  - SCCAPIConnection
  - SCCAPIResponse
  - SQRDReaderSDK
  - mobile_authorization_code
  - OAuth Permissions form
  - OAuth permissions
  - SUBSCRIPTIONS_READ
  - SUBSCRIPTIONS_WRITE
  - ORDERS_READ
  - ORDERS_WRITE
  - ITEMS_READ
  - INVOICES_READ
  - INVOICES_WRITE
  - PAYMENTS_READ
  - PAYMENTS_WRITE
  - CUSTOMERS_READ
  - webhook
  - DeviceCode
  - PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS
  - DEVICES_READ
  - Vendor
  - VendorContact
  - Payments API
  - Card
  - PaymentMethod
  - Gift Cards API
  - WebhooksHelper
  - PersonalAccessToken
client:
  auth:
    type: oauth2
    flow: refresh_token
    location: header
    header_name: Authorization
    token_url: https://connect.squareup.com/oauth2/token
    client_id: '{{ dlt.secrets[''square_client_id''] }}'
    client_secret: '{{ dlt.secrets[''square_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''square_refresh_token''] }}'
    required_permissions:
    - LOYALTY_READ
    - LOYALTY_WRITE
    permissions:
    - ORDER_READ
    - ORDER_WRITE
  base_url: https://developer.squareup.com
  paginator:
    type: cursor
    cursor_path: items
    cursor_param: matched_variation_ids
    default_page_size: 4
    page_size_param: limit
  headers:
    Accept: application/json
    Content-Type: application/json
    X-Clear-Null: true
    Square-Version: YYYY-MM-DD
    Authorization: Bearer {ACCESS_TOKEN}
    x-graphql-include-debug: '1'
    Content-Security-Policy: default-src 'self'; script-src 'self' https://web.squarecdn.com;
      frame-src 'self' https://web.squarecdn.com; connect-src 'self' https://web.squarecdn.com;
      style-src 'self' 'unsafe-inline';
    x-square-hmacsha256-signature: Signature Key
    square-environment: Production or Sandbox
    square-initial-delivery-timestamp: RFC 3339 timestamp
    square-retry-number: Integer
    square-retry-reason:
    - http_timeout
    - http_error
    - ssl_error
    - other_error
    X-Square-HmacSha256-Signature: '{{ request.headers[''X-Square-HmacSha256-Signature'']
      }}'
source_metadata: null
