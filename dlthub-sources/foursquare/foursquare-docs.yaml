resources:
- name: core_attributes
  endpoint:
    path: /core_attributes
    method: GET
    data_selector: attributes
- name: ratings_hours_social_media
  endpoint:
    path: /ratings_hours_social_media
    method: GET
    data_selector: attributes
- name: tips_tastes
  endpoint:
    path: /tips_tastes
    method: GET
    data_selector: attributes
- name: best_photos
  endpoint:
    path: /best_photos
    method: GET
    data_selector: attributes
- name: calculated_scores
  endpoint:
    path: /calculated_scores
    method: GET
    data_selector: attributes
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: attributes
- name: data_matching
  endpoint:
    path: /data_matching
    method: GET
    data_selector: attributes
- name: maps
  endpoint:
    path: /maps/{uuid}
    method: PUT
    data_selector: latestState
    params: {}
- name: places_search
  endpoint:
    path: /places/search
    method: GET
    data_selector: results
    params: {}
- name: geotagging_candidates
  endpoint:
    path: /geotagging/candidates
    method: GET
- name: get_geofence
  endpoint:
    path: /geofences/{geofence_id}
    method: GET
- name: get_all_geofences
  endpoint:
    path: /geofences
    method: GET
- name: add_geofence
  endpoint:
    path: /geofences
    method: POST
- name: add_bulk_geofences
  endpoint:
    path: /geofences/bulk
    method: POST
- name: update_geofence
  endpoint:
    path: /geofences/{geofenceId}
    method: PUT
- name: delete_geofence
  endpoint:
    path: /geofences/{geofenceId}
    method: DELETE
- name: delete_bulk_geofences
  endpoint:
    path: /geofences/bulk
    method: DELETE
- name: clear_all_geofences
  endpoint:
    path: /geofences/clear
    method: DELETE
- name: set_permissions
  endpoint:
    path: /set_permissions
    method: POST
- name: get_permissions
  endpoint:
    path: /get_permissions
    method: GET
- name: get_geofence
  endpoint:
    path: /geofences/{geofence_id}
    method: GET
- name: get_all_geofences
  endpoint:
    path: /geofences
    method: GET
- name: add_geofence
  endpoint:
    path: /geofences
    method: POST
- name: add_bulk_geofences
  endpoint:
    path: /geofences/bulk
    method: POST
- name: update_geofence
  endpoint:
    path: /geofences/{geofenceId}
    method: PUT
- name: delete_geofence
  endpoint:
    path: /geofences/{geofenceId}
    method: DELETE
- name: delete_bulk_geofences
  endpoint:
    path: /geofences/bulk
    method: DELETE
- name: clear_all_geofences
  endpoint:
    path: /geofences/clear
    method: DELETE
- name: upload_dataset
  endpoint:
    path: /upload
    method: POST
- name: download_dataset
  endpoint:
    path: /download
    method: GET
- name: update_dataset_data
  endpoint:
    path: /update
    method: PUT
- name: list_datasets
  endpoint:
    path: /datasets
    method: GET
- name: get_dataset_metadata
  endpoint:
    path: /metadata
    method: GET
- name: delete_dataset
  endpoint:
    path: /delete
    method: DELETE
- name: hextile_dataset
  endpoint:
    path: /hextile
    method: POST
- name: reports
  endpoint:
    path: /reports
    method: POST
- name: create_map
  endpoint:
    path: /create
    method: POST
- name: list_maps
  endpoint:
    path: /list
    method: GET
- name: list_maps_organization
  endpoint:
    path: /list/organization
    method: GET
- name: get_map
  endpoint:
    path: /get/{uuid}
    method: GET
- name: update_map
  endpoint:
    path: /update/{uuid}
    method: PUT
- name: delete_map
  endpoint:
    path: /delete/{uuid}
    method: DELETE
- name: copy_map
  endpoint:
    path: /copy/{uuid}
    method: POST
- name: replace_dataset_on_map
  endpoint:
    path: /replace-dataset/{uuid}
    method: PUT
- name: data
  endpoint:
    path: /data
    method: POST
    data_selector: ''
    params: {}
- name: reports
  endpoint:
    path: /reports
    method: GET
    data_selector: ''
    params: {}
- name: data
  endpoint:
    path: /data
    method: POST
- name: add_dataset
  endpoint:
    path: /addDataset
    method: POST
- name: get_dataset_by_id
  endpoint:
    path: /getDatasetById
    method: GET
- name: get_datasets
  endpoint:
    path: /getDatasets
    method: GET
- name: remove_dataset
  endpoint:
    path: /removeDataset
    method: DELETE
- name: replace_dataset
  endpoint:
    path: /replaceDataset
    method: POST
- name: create_map
  endpoint:
    path: /maps/
    method: POST
    data_selector: map
    params: {}
- name: copy_map
  endpoint:
    path: /maps/<uuid>/copy
    method: POST
    data_selector: map_copy
    params: {}
- name: replace_dataset
  endpoint:
    path: /maps/<uuid>/datasets/replace
    method: POST
    data_selector: replace_dataset
    params: {}
- name: get_map
  endpoint:
    path: /maps/<uuid>
    method: GET
    data_selector: map
    params: {}
- name: update_map
  endpoint:
    path: /maps/<uuid>
    method: PUT
    data_selector: updated_map
    params: {}
- name: delete_map
  endpoint:
    path: /maps/<uuid>
    method: DELETE
    data_selector: deleted_map
    params: {}
- name: list_maps
  endpoint:
    path: /maps
    method: GET
    data_selector: all_maps
    params: {}
- name: addDataset
  endpoint:
    path: addDataset
    method: POST
    data_selector: dataset
    params: {}
- name: addTileDataset
  endpoint:
    path: addTileDataset
    method: POST
    data_selector: dataset
    params: {}
- name: getDatasetById
  endpoint:
    path: getDatasetById
    method: GET
    data_selector: dataset
    params: {}
- name: getDatasetWithData
  endpoint:
    path: getDatasetWithData
    method: GET
    data_selector: dataset
    params: {}
- name: getDatasets
  endpoint:
    path: getDatasets
    method: GET
    data_selector: datasets
    params: {}
- name: removeDataset
  endpoint:
    path: removeDataset
    method: DELETE
    data_selector: dataset
    params: {}
- name: replaceDataset
  endpoint:
    path: replaceDataset
    method: PUT
    data_selector: dataset
    params: {}
- name: add_dataset
  endpoint:
    path: /addDataset
    method: POST
    data_selector: dataset
    params: {}
- name: add_tile_dataset
  endpoint:
    path: /addTileDataset
    method: POST
    data_selector: dataset
    params: {}
- name: get_dataset_by_id
  endpoint:
    path: /getDatasetById
    method: GET
    data_selector: dataset
    params: {}
- name: get_dataset_with_data
  endpoint:
    path: /getDatasetWithData
    method: GET
    data_selector: dataset
    params: {}
- name: get_datasets
  endpoint:
    path: /getDatasets
    method: GET
    data_selector: datasets
    params: {}
- name: remove_dataset
  endpoint:
    path: /removeDataset
    method: DELETE
    data_selector: success
    params: {}
- name: replace_dataset
  endpoint:
    path: /replaceDataset
    method: PUT
    data_selector: dataset
    params: {}
- name: update_dataset
  endpoint:
    path: /updateDataset
    method: PATCH
    data_selector: dataset
    params: {}
- name: Add Dataset
  endpoint:
    path: addDataset
    method: POST
    data_selector: dataset
    params: {}
- name: Add Tile Dataset
  endpoint:
    path: addTileDataset
    method: POST
    data_selector: dataset
    params: {}
- name: Get Dataset by ID
  endpoint:
    path: getDatasetById
    method: GET
    data_selector: dataset
    params: {}
- name: Get Dataset with Data
  endpoint:
    path: getDatasetWithData
    method: GET
    data_selector: dataset
    params: {}
- name: Get Datasets
  endpoint:
    path: getDatasets
    method: GET
    data_selector: datasets
    params: {}
- name: Remove Dataset
  endpoint:
    path: removeDataset
    method: DELETE
    data_selector: dataset
    params: {}
- name: Replace Dataset
  endpoint:
    path: replaceDataset
    method: PUT
    data_selector: dataset
    params: {}
- name: addDataset
  endpoint:
    path: /addDataset
    method: POST
    data_selector: dataset
    params:
      auto_create_layers: true
      center_map: true
- name: addTileDataset
  endpoint:
    path: /addTileDataset
    method: POST
    data_selector: dataset
    params:
      auto_create_layers: true
      center_map: true
- name: getDatasetById
  endpoint:
    path: /getDatasetById/{datasetId}
    method: GET
    data_selector: dataset
    params: {}
- name: getDatasetWithData
  endpoint:
    path: /getDatasetWithData/{datasetId}
    method: GET
    data_selector: dataset
    params: {}
- name: getDatasets
  endpoint:
    path: /getDatasets
    method: GET
    data_selector: datasets
    params: {}
- name: removeDataset
  endpoint:
    path: /removeDataset/{datasetId}
    method: DELETE
    data_selector: dataset
    params: {}
- name: replaceDataset
  endpoint:
    path: /replaceDataset/{thisDatasetId}
    method: PUT
    data_selector: dataset
    params:
      strict: false
- name: propose_place_edit
  endpoint:
    path: /propose/place/edit
    method: POST
- name: flag_problematic_place
  endpoint:
    path: /flag/problematic/place
    method: POST
- name: get_feedback_status
  endpoint:
    path: /get/feedback/status
    method: GET
- name: place_search
  endpoint:
    path: /places/search
    method: GET
- name: place_details
  endpoint:
    path: /places/details
    method: GET
- name: place_photos
  endpoint:
    path: /places/photos
    method: GET
- name: place_tips
  endpoint:
    path: /places/tips
    method: GET
- name: place_match
  endpoint:
    path: /places/match
    method: GET
- name: checkins
  endpoint:
    path: /checkins
    method: GET
- name: lists
  endpoint:
    path: /lists
    method: GET
- name: photos
  endpoint:
    path: /photos
    method: GET
- name: tastes
  endpoint:
    path: /tastes
    method: GET
- name: tips
  endpoint:
    path: /tips
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: venue_attributes
  endpoint:
    path: /venues/attributes
    method: GET
- name: venue_categories
  endpoint:
    path: /venues/categories
    method: GET
- name: venue_details
  endpoint:
    path: /venues/details
    method: GET
- name: venue_hours
  endpoint:
    path: /venues/hours
    method: GET
- name: venue_photos
  endpoint:
    path: /venues/photos
    method: GET
- name: venue_tips
  endpoint:
    path: /venues/tips
    method: GET
- name: trending_venues
  endpoint:
    path: /venues/trending
    method: GET
- name: related_venues
  endpoint:
    path: /venues/related
    method: GET
- name: rate_venue
  endpoint:
    path: /venues/rate
    method: POST
- name: checkins
  endpoint:
    path: /v2/checkins/add
    method: POST
    params:
      v: '20231006'
      oauth_token: '[TOKEN]'
      venueId: '[VENUE_ID]'
- name: checkin
  endpoint:
    path: /checkins/add
    method: POST
    data_selector: checkin
    params:
      venueId: venueId
- name: list
  endpoint:
    path: /lists/{listId}
    method: GET
    data_selector: list
    params: {}
- name: trending_venues
  endpoint:
    path: /venues/trending
    method: GET
    data_selector: venues
    params:
      ll: latLng
- name: tastes_suggestions
  endpoint:
    path: /tastes/suggestions
    method: GET
    data_selector: response.tastes
    params:
      intent: tipstream
- name: venue_recommendations
  endpoint:
    path: /search/recommendations
    method: GET
    data_selector: response.group.results
    params:
      ll: 40.7591622,-74.0516322
- name: geofence_events
  endpoint:
    path: /geofence/events
    method: POST
    data_selector: geofenceEvent
    params: {}
- name: visit_feedback
  endpoint:
    path: /leaveVisitFeedback
    method: POST
    data_selector: feedback
    params:
      VisitId: VisitId
      feedback: VisitFeedback
      actualVenueId: actualVenueId
- name: check_in_foursquare
  endpoint:
    path: /checkInWithVenueId
    method: POST
    data_selector: venueId
    params:
      venueId: venueId
- name: check_in_partner
  endpoint:
    path: /checkInAtVenueWithPartnerVenueId
    method: POST
    data_selector: venueId
    params:
      venueId: venueId
- name: journey
  endpoint:
    path: /journeys
    method: GET
    data_selector: journeys
- name: current_location
  endpoint:
    path: /current_location
    method: GET
    data_selector: currentLocation
- name: geofence_events
  endpoint:
    path: /geofence_events
    method: GET
    data_selector: geofenceEvents
- name: Journeys
  endpoint:
    path: /journeys
    method: GET
- name: Current Location
  endpoint:
    path: /current_location
    method: GET
- name: Geofence Events
  endpoint:
    path: /geofence_events
    method: GET
- name: user_install_id
  endpoint:
    path: /getInstallId
    method: GET
- name: current_location
  endpoint:
    path: /getCurrentLocation
    method: GET
- name: user_info
  endpoint:
    path: /setUserInfo
    method: POST
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
- name: data_connectors
  endpoint:
    path: /data-connections
    method: GET
    data_selector: data_connectors
- name: query
  endpoint:
    path: /query/gateway/data-queries
    method: POST
    data_selector: query_result
- name: enrich
  endpoint:
    path: /internal/v1/datasets/hextile
    method: POST
    data_selector: input
    params: {}
- name: extract
  endpoint:
    path: /internal/v1/query
    method: POST
    data_selector: geojson
    params: {}
- name: light-and-shadow
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: tilt-shift
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: triangle-blur
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: zoom-blur
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: brightness-contrast
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: color-halftone
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: dot-screen
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: edge-work
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: hexagonal-pixelate
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: hue-saturation
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: ink
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: magnify
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: noise
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: sepia
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: vibrance
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: vignette
  endpoint:
    path: /addEffect
    method: POST
    data_selector: parameters
    params: {}
- name: visit
  endpoint:
    path: /movement/sdk/visit
    method: GET
    data_selector: Visit
    params: {}
- name: visits
  endpoint:
    path: /visits
    method: GET
    data_selector: records
    params: {}
- name: geofence_data
  endpoint:
    path: /geofence_data
    method: GET
    data_selector: records
    params: {}
- name: create_map
  endpoint:
    path: /createMap
    method: POST
    data_selector: map
    params: {}
- name: get_map_config
  endpoint:
    path: /getMapConfig
    method: GET
    data_selector: config
    params: {}
- name: get_map_control_visibility
  endpoint:
    path: /getMapControlVisibility
    method: GET
    data_selector: visibilitySettings
    params: {}
- name: set_map_control_visibility
  endpoint:
    path: /setMapControlVisibility
    method: POST
    data_selector: visibilityResponse
    params: {}
- name: set_map_config
  endpoint:
    path: /setMapConfig
    method: POST
    data_selector: configResponse
    params: {}
- name: get_view
  endpoint:
    path: /getView
    method: GET
    data_selector: view
    params: {}
- name: get_view_limits
  endpoint:
    path: /getViewLimits
    method: GET
    data_selector: viewLimits
    params: {}
- name: get_view_mode
  endpoint:
    path: /getViewMode
    method: GET
    data_selector: viewMode
    params: {}
- name: get_split_mode
  endpoint:
    path: /getSplitMode
    method: GET
    data_selector: splitMode
    params: {}
- name: createMap
  endpoint:
    path: /createMap
    method: POST
    data_selector: map
- name: getEffects
  endpoint:
    path: /getEffects
    method: GET
    data_selector: effects
- name: getEffectByID
  endpoint:
    path: /getEffectByID
    method: GET
    data_selector: effect
- name: create_map
  endpoint:
    path: /create_map
    method: POST
- name: get_map_config
  endpoint:
    path: /get_map_config
    method: GET
- name: set_view
  endpoint:
    path: /set_view
    method: POST
- name: layer
  endpoint:
    path: /addLayer
    method: POST
    data_selector: layer
    params: {}
- name: layer_group
  endpoint:
    path: /addLayerGroup
    method: POST
    data_selector: layerGroup
    params: {}
- name: layer
  endpoint:
    path: /addLayer
    method: POST
    data_selector: layer
- name: layerGroup
  endpoint:
    path: /addLayerGroup
    method: POST
    data_selector: layerGroup
- name: create_map
  endpoint:
    path: createMap
    method: POST
- name: get_map_config
  endpoint:
    path: getMapConfig
    method: GET
- name: get_map_control_visibility
  endpoint:
    path: getMapControlVisibility
    method: GET
- name: get_split_mode
  endpoint:
    path: getSplitMode
    method: GET
- name: get_view
  endpoint:
    path: getView
    method: GET
- name: get_view_limits
  endpoint:
    path: getViewLimits
    method: GET
- name: get_view_mode
  endpoint:
    path: getViewMode
    method: GET
- name: set_map_config
  endpoint:
    path: setMapConfig
    method: POST
- name: set_map_control_visibility
  endpoint:
    path: setMapControlVisibility
    method: POST
- name: set_split_mode
  endpoint:
    path: setSplitMode
    method: POST
- name: set_theme
  endpoint:
    path: setTheme
    method: POST
- name: get_effects
  endpoint:
    path: /getEffects
    method: GET
- name: get_effect_by_id
  endpoint:
    path: /getEffectByID/{id}
    method: GET
- name: remove_effect
  endpoint:
    path: /removeEffect/{id}
    method: DELETE
- name: layer
  endpoint:
    path: /addLayer
    method: POST
    data_selector: layer
    params: {}
- name: layerGroup
  endpoint:
    path: /addLayerGroup
    method: POST
    data_selector: layerGroup
    params: {}
- name: layerById
  endpoint:
    path: /getLayerById
    method: GET
    data_selector: layer
    params: {}
- name: layerGroupById
  endpoint:
    path: /getLayerGroupById
    method: GET
    data_selector: layerGroup
    params: {}
- name: layers
  endpoint:
    path: /getLayers
    method: GET
    data_selector: layers
    params: {}
- name: layerGroups
  endpoint:
    path: /getLayerGroups
    method: GET
    data_selector: layerGroups
    params: {}
- name: layerTimeline
  endpoint:
    path: /getLayerTimeline
    method: GET
    data_selector: layerTimeline
    params: {}
- name: removeLayer
  endpoint:
    path: /removeLayer
    method: DELETE
    data_selector: layer
    params: {}
- name: removeLayerGroup
  endpoint:
    path: /removeLayerGroup
    method: DELETE
    data_selector: layerGroup
    params: {}
- name: updateLayer
  endpoint:
    path: /updateLayer
    method: PUT
    data_selector: layer
    params: {}
- name: updateLayerGroup
  endpoint:
    path: /updateLayerGroup
    method: PUT
    data_selector: layerGroup
    params: {}
- name: updateLayerTimeline
  endpoint:
    path: /updateLayerTimeline
    method: PUT
    data_selector: layerTimeline
    params: {}
- name: Add Layer
  endpoint:
    path: /addLayer
    method: POST
    data_selector: layer
    params: {}
- name: Add Layer From Config
  endpoint:
    path: /addLayerFromConfig
    method: POST
    data_selector: layerConfig
    params: {}
- name: Add Layer Group
  endpoint:
    path: /addLayerGroup
    method: POST
    data_selector: layerGroup
    params: {}
- name: Get Layer by ID
  endpoint:
    path: /getLayerById
    method: GET
    data_selector: layer
    params: {}
- name: Get Layer Group by ID
  endpoint:
    path: /getLayerGroupById
    method: GET
    data_selector: layerGroup
    params: {}
- name: Get Layer Groups
  endpoint:
    path: /getLayerGroups
    method: GET
    data_selector: layerGroups
    params: {}
- name: Get Layers
  endpoint:
    path: /getLayers
    method: GET
    data_selector: layers
    params: {}
- name: Update Layer
  endpoint:
    path: /updateLayer
    method: PUT
    data_selector: layer
    params: {}
- name: Update Layer Group
  endpoint:
    path: /updateLayerGroup
    method: PUT
    data_selector: layerGroup
    params: {}
- name: Update Layer Timeline
  endpoint:
    path: /updateLayerTimeline
    method: PUT
    data_selector: layerTimeline
    params: {}
- name: Remove Layer
  endpoint:
    path: /removeLayer
    method: DELETE
    data_selector: layerId
    params: {}
- name: Remove Layer Group
  endpoint:
    path: /removeLayerGroup
    method: DELETE
    data_selector: layerGroupId
    params: {}
- name: layer
  endpoint:
    path: /addLayer
    method: POST
    data_selector: layer
    params: {}
- name: layer_group
  endpoint:
    path: /addLayerGroup
    method: POST
    data_selector: layerGroup
    params: {}
- name: layer_by_id
  endpoint:
    path: /getLayerById
    method: GET
    data_selector: layer
    params: {}
- name: layer_group_by_id
  endpoint:
    path: /getLayerGroupById
    method: GET
    data_selector: layerGroup
    params: {}
- name: layer_groups
  endpoint:
    path: /getLayerGroups
    method: GET
    data_selector: layerGroups
    params: {}
- name: layers
  endpoint:
    path: /getLayers
    method: GET
    data_selector: layers
    params: {}
- name: layer_timeline
  endpoint:
    path: /getLayerTimeline
    method: GET
    data_selector: layerTimeline
    params: {}
- name: remove_layer
  endpoint:
    path: /removeLayer
    method: DELETE
    data_selector: layer
    params: {}
- name: remove_layer_group
  endpoint:
    path: /removeLayerGroup
    method: DELETE
    data_selector: layerGroup
    params: {}
- name: update_layer
  endpoint:
    path: /updateLayer
    method: PUT
    data_selector: layer
    params: {}
- name: update_layer_group
  endpoint:
    path: /updateLayerGroup
    method: PUT
    data_selector: layerGroup
    params: {}
- name: update_layer_timeline
  endpoint:
    path: /updateLayerTimeline
    method: PUT
    data_selector: layerTimeline
    params: {}
- name: add_layer
  endpoint:
    path: /addLayer
    method: POST
    data_selector: null
    params: {}
- name: add_layer_from_config
  endpoint:
    path: /addLayerFromConfig
    method: POST
    data_selector: null
    params: {}
- name: add_layer_group
  endpoint:
    path: /addLayerGroup
    method: POST
    data_selector: null
    params: {}
- name: get_layer_by_id
  endpoint:
    path: /getLayerById
    method: GET
    data_selector: null
    params: {}
- name: get_layer_group_by_id
  endpoint:
    path: /getLayerGroupById
    method: GET
    data_selector: null
    params: {}
- name: get_layer_groups
  endpoint:
    path: /getLayerGroups
    method: GET
    data_selector: null
    params: {}
- name: get_layers
  endpoint:
    path: /getLayers
    method: GET
    data_selector: null
    params: {}
- name: get_layer_timeline
  endpoint:
    path: /getLayerTimeline
    method: GET
    data_selector: null
    params: {}
- name: remove_layer
  endpoint:
    path: /removeLayer
    method: DELETE
    data_selector: null
    params: {}
- name: remove_layer_group
  endpoint:
    path: /removeLayerGroup
    method: DELETE
    data_selector: null
    params: {}
- name: update_layer
  endpoint:
    path: /updateLayer
    method: PUT
    data_selector: null
    params: {}
- name: update_layer_group
  endpoint:
    path: /updateLayerGroup
    method: PUT
    data_selector: null
    params: {}
- name: update_layer_timeline
  endpoint:
    path: /updateLayerTimeline
    method: PUT
    data_selector: null
    params: {}
- name: add_layer
  endpoint:
    path: /add_layer
    method: POST
    data_selector: layer
    params: {}
- name: add_layer_from_config
  endpoint:
    path: /add_layer_from_config
    method: POST
    data_selector: layerConfig
    params: {}
- name: add_layer_group
  endpoint:
    path: /add_layer_group
    method: POST
    data_selector: layerGroup
    params: {}
- name: get_layer_by_id
  endpoint:
    path: /get_layer_by_id
    method: GET
    data_selector: layer
    params: {}
- name: get_layer_group_by_id
  endpoint:
    path: /get_layer_group_by_id
    method: GET
    data_selector: layerGroup
    params: {}
- name: get_layer_groups
  endpoint:
    path: /get_layer_groups
    method: GET
    data_selector: layerGroups
    params: {}
- name: get_layers
  endpoint:
    path: /get_layers
    method: GET
    data_selector: layers
    params: {}
- name: get_layer_timeline
  endpoint:
    path: /get_layer_timeline
    method: GET
    data_selector: layerTimeline
    params: {}
- name: remove_layer
  endpoint:
    path: /remove_layer
    method: DELETE
    data_selector: layerId
    params: {}
- name: remove_layer_group
  endpoint:
    path: /remove_layer_group
    method: DELETE
    data_selector: layerGroupId
    params: {}
- name: update_layer
  endpoint:
    path: /update_layer
    method: PUT
    data_selector: layer
    params: {}
- name: layer
  endpoint:
    path: /addLayer
    method: POST
    data_selector: layer
    params: {}
- name: layer_group
  endpoint:
    path: /addLayerGroup
    method: POST
    data_selector: layerGroup
    params: {}
- name: layer_by_id
  endpoint:
    path: /getLayerById
    method: GET
    data_selector: layer
    params: {}
- name: layer_group_by_id
  endpoint:
    path: /getLayerGroupById
    method: GET
    data_selector: layerGroup
    params: {}
- name: layers
  endpoint:
    path: /getLayers
    method: GET
    data_selector: layers
    params: {}
- name: layer_groups
  endpoint:
    path: /getLayerGroups
    method: GET
    data_selector: layerGroups
    params: {}
- name: layer_timeline
  endpoint:
    path: /getLayerTimeline
    method: GET
    data_selector: layerTimeline
    params: {}
- name: remove_layer
  endpoint:
    path: /removeLayer
    method: DELETE
    data_selector: layer
    params: {}
- name: remove_layer_group
  endpoint:
    path: /removeLayerGroup
    method: DELETE
    data_selector: layerGroup
    params: {}
- name: update_layer
  endpoint:
    path: /updateLayer
    method: PUT
    data_selector: layer
    params: {}
- name: update_layer_group
  endpoint:
    path: /updateLayerGroup
    method: PUT
    data_selector: layerGroup
    params: {}
- name: layer
  endpoint:
    path: /addLayer
    method: POST
    data_selector: layer
    params: {}
- name: layer_group
  endpoint:
    path: /addLayerGroup
    method: POST
    data_selector: layerGroup
    params: {}
- name: layer_by_id
  endpoint:
    path: /getLayerById
    method: GET
    data_selector: layer
    params: {}
- name: layer_group_by_id
  endpoint:
    path: /getLayerGroupById
    method: GET
    data_selector: layerGroup
    params: {}
- name: layers
  endpoint:
    path: /getLayers
    method: GET
    data_selector: layers
    params: {}
- name: layer_groups
  endpoint:
    path: /getLayerGroups
    method: GET
    data_selector: layerGroups
    params: {}
- name: remove_layer
  endpoint:
    path: /removeLayer
    method: DELETE
    data_selector: layerId
    params: {}
- name: remove_layer_group
  endpoint:
    path: /removeLayerGroup
    method: DELETE
    data_selector: layerGroupId
    params: {}
- name: update_layer
  endpoint:
    path: /updateLayer
    method: PUT
    data_selector: layer
    params: {}
- name: update_layer_group
  endpoint:
    path: /updateLayerGroup
    method: PUT
    data_selector: layerGroup
    params: {}
- name: update_layer_timeline
  endpoint:
    path: /updateLayerTimeline
    method: PUT
    data_selector: values
    params: {}
- name: add_layer
  endpoint:
    path: /add_layer
    method: POST
    data_selector: layer
    params: {}
- name: add_layer_from_config
  endpoint:
    path: /add_layer_from_config
    method: POST
    data_selector: layerConfig
    params: {}
- name: add_layer_group
  endpoint:
    path: /add_layer_group
    method: POST
    data_selector: layerGroup
    params: {}
- name: get_layer_by_id
  endpoint:
    path: /get_layer_by_id
    method: GET
    data_selector: layerId
    params: {}
- name: get_layer_group_by_id
  endpoint:
    path: /get_layer_group_by_id
    method: GET
    data_selector: layerGroupId
    params: {}
- name: get_layer_groups
  endpoint:
    path: /get_layer_groups
    method: GET
    data_selector: layerGroups
    params: {}
- name: get_layers
  endpoint:
    path: /get_layers
    method: GET
    data_selector: layers
    params: {}
- name: get_layer_timeline
  endpoint:
    path: /get_layer_timeline
    method: GET
    data_selector: layerTimeline
    params: {}
- name: remove_layer
  endpoint:
    path: /remove_layer
    method: DELETE
    data_selector: layerId
    params: {}
- name: remove_layer_group
  endpoint:
    path: /remove_layer_group
    method: DELETE
    data_selector: layerGroupId
    params: {}
- name: update_layer
  endpoint:
    path: /update_layer
    method: PUT
    data_selector: layer
    params: {}
- name: update_layer_group
  endpoint:
    path: /update_layer_group
    method: PUT
    data_selector: layerGroup
    params: {}
- name: update_layer_timeline
  endpoint:
    path: /update_layer_timeline
    method: PUT
    data_selector: layerTimeline
    params: {}
- name: Color
  endpoint:
    path: /Color
    method: GET
    data_selector: records
- name: ColorRange
  endpoint:
    path: /ColorRange
    method: GET
    data_selector: records
- name: TextLabel
  endpoint:
    path: /TextLabel
    method: GET
    data_selector: records
- name: layer
  endpoint:
    path: /addLayer
    method: POST
    data_selector: layer
    params: {}
- name: layer_group
  endpoint:
    path: /addLayerGroup
    method: POST
    data_selector: layerGroup
    params: {}
- name: layer_by_id
  endpoint:
    path: /getLayerById
    method: GET
    data_selector: layer
    params: {}
- name: layer_group_by_id
  endpoint:
    path: /getLayerGroupById
    method: GET
    data_selector: layerGroup
    params: {}
- name: layers
  endpoint:
    path: /getLayers
    method: GET
    data_selector: layers
    params: {}
- name: layer_groups
  endpoint:
    path: /getLayerGroups
    method: GET
    data_selector: layerGroups
    params: {}
- name: update_layer
  endpoint:
    path: /updateLayer
    method: PUT
    data_selector: layer
    params: {}
- name: update_layer_group
  endpoint:
    path: /updateLayerGroup
    method: PUT
    data_selector: layerGroup
    params: {}
- name: update_layer_timeline
  endpoint:
    path: /updateLayerTimeline
    method: PUT
    data_selector: layerTimeline
    params: {}
- name: add_layer
  endpoint:
    path: /add_layer
    method: POST
    data_selector: layer
    params: {}
- name: add_layer_group
  endpoint:
    path: /add_layer_group
    method: POST
    data_selector: layerGroup
    params: {}
- name: get_layer_by_id
  endpoint:
    path: /get_layer_by_id
    method: GET
    data_selector: layer
    params: {}
- name: get_layer_group_by_id
  endpoint:
    path: /get_layer_group_by_id
    method: GET
    data_selector: layerGroup
    params: {}
- name: get_layer_groups
  endpoint:
    path: /get_layer_groups
    method: GET
    data_selector: layerGroups
    params: {}
- name: get_layers
  endpoint:
    path: /get_layers
    method: GET
    data_selector: layers
    params: {}
- name: remove_layer
  endpoint:
    path: /remove_layer
    method: DELETE
    data_selector: layerId
    params: {}
- name: remove_layer_group
  endpoint:
    path: /remove_layer_group
    method: DELETE
    data_selector: layerGroupId
    params: {}
- name: update_layer
  endpoint:
    path: /update_layer
    method: PATCH
    data_selector: layer
    params: {}
- name: update_layer_group
  endpoint:
    path: /update_layer_group
    method: PATCH
    data_selector: layerGroup
    params: {}
- name: update_layer_timeline
  endpoint:
    path: /update_layer_timeline
    method: PATCH
    data_selector: layerTimeline
    params: {}
- name: layer
  endpoint:
    path: /addLayer
    method: POST
    data_selector: layer
    params: {}
- name: layer_group
  endpoint:
    path: /addLayerGroup
    method: POST
    data_selector: layerGroup
    params: {}
- name: layer_by_id
  endpoint:
    path: /getLayerById
    method: GET
    data_selector: layer
    params: {}
- name: layer_group_by_id
  endpoint:
    path: /getLayerGroupById
    method: GET
    data_selector: layerGroup
    params: {}
- name: layer_groups
  endpoint:
    path: /getLayerGroups
    method: GET
    data_selector: layerGroups
    params: {}
- name: layers
  endpoint:
    path: /getLayers
    method: GET
    data_selector: layers
    params: {}
- name: layer_timeline
  endpoint:
    path: /getLayerTimeline
    method: GET
    data_selector: layerTimeline
    params: {}
- name: remove_layer
  endpoint:
    path: /removeLayer
    method: DELETE
    data_selector: layerId
    params: {}
- name: remove_layer_group
  endpoint:
    path: /removeLayerGroup
    method: DELETE
    data_selector: layerGroupId
    params: {}
- name: update_layer
  endpoint:
    path: /updateLayer
    method: PUT
    data_selector: layer
    params: {}
- name: update_layer_group
  endpoint:
    path: /updateLayerGroup
    method: PUT
    data_selector: layerGroup
    params: {}
- name: update_layer_timeline
  endpoint:
    path: /updateLayerTimeline
    method: PUT
    data_selector: layerTimeline
    params: {}
- name: ArcLayer
  endpoint:
    path: /layers/ArcLayer
    method: GET
    data_selector: layers
    params: {}
- name: ClusterLayer
  endpoint:
    path: /layers/ClusterLayer
    method: GET
    data_selector: layers
    params: {}
- name: FlowLayer
  endpoint:
    path: /layers/FlowLayer
    method: GET
    data_selector: layers
    params: {}
- name: HeatmapLayer
  endpoint:
    path: /layers/HeatmapLayer
    method: GET
    data_selector: layers
    params: {}
- name: PolygonLayer
  endpoint:
    path: /layers/PolygonLayer
    method: GET
    data_selector: layers
    params: {}
- name: PointLayer
  endpoint:
    path: /layers/PointLayer
    method: GET
    data_selector: layers
    params: {}
- name: TripLayer
  endpoint:
    path: /layers/TripLayer
    method: GET
    data_selector: layers
    params: {}
- name: filter
  endpoint:
    path: /filters
    method: GET
    data_selector: filters
- name: add_filter
  endpoint:
    path: /addFilter
    method: POST
    data_selector: filter
    params: {}
- name: get_filter_by_id
  endpoint:
    path: /getFilterById
    method: GET
    data_selector: filter
    params: {}
- name: get_filters
  endpoint:
    path: /getFilters
    method: GET
    data_selector: filters
    params: {}
- name: remove_filter
  endpoint:
    path: /removeFilter
    method: DELETE
    data_selector: filter
    params: {}
- name: update_filter
  endpoint:
    path: /updateFilter
    method: PUT
    data_selector: filter
    params: {}
- name: filter
  endpoint:
    path: /filter
    method: GET
    data_selector: filters
- name: update_filter
  endpoint:
    path: /update_filter
    method: POST
    data_selector: updateResponse
- name: get_filter_by_id
  endpoint:
    path: /get_filter_by_id
    method: GET
    data_selector: filter
- name: remove_filter
  endpoint:
    path: /remove_filter
    method: DELETE
    data_selector: removeResponse
- name: add_filter
  endpoint:
    path: /add_filter
    method: POST
    data_selector: addResponse
- name: update_timeline
  endpoint:
    path: /update_timeline
    method: POST
    data_selector: timelineUpdateResponse
- name: add_annotation
  endpoint:
    path: /add_annotation
    method: POST
    data_selector: annotation
    params: {}
- name: update_annotation
  endpoint:
    path: /update_annotation
    method: PUT
    data_selector: annotation
    params: {}
- name: get_annotations
  endpoint:
    path: /get_annotations
    method: GET
    data_selector: annotations
    params: {}
- name: get_annotation_by_id
  endpoint:
    path: /get_annotation_by_id/{annotationId}
    method: GET
    data_selector: annotation
    params: {}
- name: remove_annotation
  endpoint:
    path: /remove_annotation/{annotationId}
    method: DELETE
    data_selector: confirmation
    params: {}
- name: layer_1
  endpoint:
    path: /addLayer
    method: POST
    data_selector: layers
    params: {}
- name: cluster
  endpoint:
    path: /path/to/cluster
    method: GET
    data_selector: records
    params: {}
- name: config
  endpoint:
    path: /config
    method: GET
    data_selector: config
    params: {}
- name: 3D Layer
  endpoint:
    path: /services/data/vXX.X/sobjects/3DLayer
    method: GET
    data_selector: records
    params: {}
- name: GeoServer WMS
  endpoint:
    path: /services/data/dd4200fe-3d05-422b-8316-216145cbc6c6
    method: GET
    data_selector: config
    params: {}
- name: layer
  endpoint:
    path: /layers
    method: GET
    data_selector: layers
- name: s2_layer
  endpoint:
    path: /services/data/vXX.X/sobjects/s2_layer
    method: GET
    data_selector: records
- name: layer
  endpoint:
    path: /path/to/layer
    method: GET
    data_selector: records
- name: colorScale
  endpoint:
    path: config.visualChannels.colorScale
    method: UPDATE
- name: colorRange
  endpoint:
    path: config.visConfig.colorRange
    method: UPDATE
- name: colorLegends
  endpoint:
    path: visConfig.colorRange.colorLegends
    method: UPDATE
- name: createMap
  endpoint:
    path: /createMap
    method: GET
    data_selector: map
    params: {}
- name: tooltip_config
  endpoint:
    path: setTooltipConfig
    method: POST
    data_selector: TooltipInteractionResponse
- name: setTooltipConfig
  endpoint:
    path: /setTooltipConfig
    method: POST
    data_selector: config
    params: {}
- name: addLayer
  endpoint:
    path: /addLayer
    method: POST
    data_selector: layer
    params: {}
- name: addLayerGroup
  endpoint:
    path: /addLayerGroup
    method: POST
    data_selector: layerGroup
    params: {}
- name: removeLayerGroup
  endpoint:
    path: /removeLayerGroup
    method: DELETE
    data_selector: layerGroupId
    params: {}
- name: Layer
  endpoint:
    path: /Layer
    method: GET
- name: tooltip_interaction
  endpoint:
    path: /tooltipInteraction
    method: GET
    data_selector: tooltipConfig
- name: BaseFilter
  endpoint:
    path: /BaseFilter
    method: GET
- name: Filter
  endpoint:
    path: /Filter
    method: GET
- name: FilterCreationProps
  endpoint:
    path: /FilterCreationProps
    method: GET
- name: FilterEventHandlers
  endpoint:
    path: /FilterEventHandlers
    method: GET
- name: FilterSource
  endpoint:
    path: /FilterSource
    method: GET
- name: FilterTimeline
  endpoint:
    path: /FilterTimeline
    method: GET
- name: FilterTimelineUpdateProps
  endpoint:
    path: /FilterTimelineUpdateProps
    method: GET
- name: FilterType
  endpoint:
    path: /FilterType
    method: GET
- name: FilterUpdateProps
  endpoint:
    path: /FilterUpdateProps
    method: GET
- name: MultiSelectFilter
  endpoint:
    path: /MultiSelectFilter
    method: GET
- name: RangeFilter
  endpoint:
    path: /RangeFilter
    method: GET
- name: SelectFilter
  endpoint:
    path: /SelectFilter
    method: GET
- name: TimeRangeFilter
  endpoint:
    path: /TimeRangeFilter
    method: GET
- name: get_permissions
  endpoint:
    path: /permissions/<resource_type>/<resource_uuid>
    method: GET
    data_selector: permissions
- name: set_permissions
  endpoint:
    path: /permissions
    method: POST
    data_selector: permissions
- name: permissions_map
  endpoint:
    path: /v1/permissions/map/
    method: GET
- name: permissions_dataset
  endpoint:
    path: /v1/permissions/dataset/
    method: GET
- name: create_map
  endpoint:
    path: /v1/maps/
    method: POST
- name: list_maps
  endpoint:
    path: /v1/maps
    method: GET
- name: list_org_maps
  endpoint:
    path: /v1/maps/for-organization
    method: GET
- name: upload_file
  endpoint:
    path: /internal/v1/datasets/hextile
    method: POST
    data_selector: dataset
    params: {}
- name: download_dataframe
  endpoint:
    path: /v1/datasets/<uuid>/data
    method: GET
    data_selector: data
    params: {}
- name: update_dataset
  endpoint:
    path: /v1/datasets/{id}
    method: PUT
    data_selector: dataset
    params: {}
- name: list_datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: items
- name: hextile
  endpoint:
    path: /internal/v1/datasets/hextile
    method: POST
    data_selector: input
    params: {}
- name: permissions_map
  endpoint:
    path: /v1/permissions/map/
    method: GET
- name: permissions_dataset
  endpoint:
    path: /v1/permissions/dataset/
    method: GET
- name: maps
  endpoint:
    path: /v1/maps
    method: GET
- name: datasets
  endpoint:
    path: /v1/datasets
    method: GET
- name: permissions_map
  endpoint:
    path: /v1/permissions/map/
    method: GET
- name: permissions_dataset
  endpoint:
    path: /v1/permissions/dataset/
    method: GET
- name: create_map
  endpoint:
    path: /v1/maps/
    method: POST
- name: copy_map
  endpoint:
    path: /v1/maps/{map_id}/copy
    method: POST
- name: replace_dataset
  endpoint:
    path: /v1/maps/{uuid}/datasets/replace
    method: POST
- name: get_map_by_id
  endpoint:
    path: /v1/maps/{uuid}
    method: GET
- name: update_map
  endpoint:
    path: /v1/maps/{id}
    method: PUT
- name: delete_map
  endpoint:
    path: /v1/maps/{uuid}
    method: DELETE
- name: list_maps
  endpoint:
    path: /v1/maps
    method: GET
- name: upload_file
  endpoint:
    path: /v1/datasets/data
    method: POST
- name: upload_dataframe
  endpoint:
    path: /v1/datasets/data
    method: POST
- name: create_external_dataset
  endpoint:
    path: /v1/datasets/
    method: POST
- name: create_query_dataset
  endpoint:
    path: /v1/datasets/data-query
    method: POST
- name: execute_query
  endpoint:
    path: /v1/query/gateway/data-queries
    method: POST
- name: get_dataset_by_id
  endpoint:
    path: /v1/datasets/{uuid}
    method: GET
- name: download_dataset
  endpoint:
    path: /v1/datasets/{uuid}/data
    method: GET
- name: update_dataset
  endpoint:
    path: /v1/datasets/{id}/data
    method: PUT
- name: delete_dataset
  endpoint:
    path: /v1/datasets/{uuid}
    method: DELETE
- name: generate_vectortile
  endpoint:
    path: /v1/datasets/vectortile
    method: POST
- name: list_data_connectors
  endpoint:
    path: /v1/data-connections
    method: GET
- name: list_datasets
  endpoint:
    path: /v1/datasets
    method: GET
- name: generate_hextile
  endpoint:
    path: /internal/v1/datasets/hextile
    method: POST
- name: hextile
  endpoint:
    path: /internal/v1/datasets/hextile
    method: POST
    data_selector: null
    params: {}
- name: extract_hex_tiles
  endpoint:
    path: /datasets/hextile
    method: POST
    data_selector: input
    params: {}
- name: permissions_map
  endpoint:
    path: /v1/permissions/map/
    method: GET
    data_selector: permissions
- name: permissions_dataset
  endpoint:
    path: /v1/permissions/dataset/
    method: GET
    data_selector: permissions
- name: create_map
  endpoint:
    path: /v1/maps/
    method: POST
    data_selector: map
- name: copy_map
  endpoint:
    path: /v1/maps/{map_id}/copy
    method: POST
    data_selector: map
- name: replace_dataset
  endpoint:
    path: /v1/maps/{map_id}/datasets/replace
    method: POST
    data_selector: map
- name: get_map_by_id
  endpoint:
    path: /v1/maps/{uuid}
    method: GET
    data_selector: map
- name: update_map
  endpoint:
    path: /v1/maps/{id}
    method: PUT
    data_selector: map
- name: delete_map
  endpoint:
    path: /v1/maps/{uuid}
    method: DELETE
    data_selector: message
- name: list_maps
  endpoint:
    path: /v1/maps
    method: GET
    data_selector: items
- name: upload_file
  endpoint:
    path: /v1/datasets/data
    method: POST
    data_selector: dataset
- name: update_dataset
  endpoint:
    path: /v1/datasets/{id}/data
    method: PUT
    data_selector: dataset
- name: delete_dataset
  endpoint:
    path: /v1/datasets/{uuid}
    method: DELETE
    data_selector: message
- name: generate_hextile
  endpoint:
    path: /internal/v1/datasets/hextile
    method: POST
    data_selector: dataset
- name: tile_extract
  endpoint:
    path: /tile_extract
    method: POST
- name: permissions_map
  endpoint:
    path: /v1/permissions/map/
    method: GET
- name: permissions_dataset
  endpoint:
    path: /v1/permissions/dataset/
    method: GET
- name: create_map
  endpoint:
    path: /v1/maps/
    method: POST
- name: copy_map
  endpoint:
    path: /v1/maps/map_id/copy
    method: POST
- name: replace_dataset
  endpoint:
    path: /v1/maps/map_id/datasets/replace
    method: POST
- name: get_map_by_id
  endpoint:
    path: /v1/maps/<uuid>
    method: GET
- name: update_map
  endpoint:
    path: /v1/maps/{id}
    method: PUT
- name: delete_map
  endpoint:
    path: /v1/maps/<uuid>
    method: DELETE
- name: list_maps
  endpoint:
    path: /v1/maps
    method: GET
- name: upload_file
  endpoint:
    path: /v1/datasets/data
    method: POST
- name: upload_dataframe
  endpoint:
    path: /v1/datasets/data
    method: POST
- name: create_external_dataset
  endpoint:
    path: /v1/datasets/
    method: POST
- name: create_query_dataset
  endpoint:
    path: /v1/datasets/data-query
    method: POST
- name: execute_query
  endpoint:
    path: /v1/query/gateway/data-queries
    method: POST
- name: get_dataset_by_id
  endpoint:
    path: /v1/datasets/<uuid>
    method: GET
- name: download_dataset
  endpoint:
    path: /v1/datasets/<uuid>/data
    method: GET
- name: update_dataset
  endpoint:
    path: /v1/datasets/{id}/data
    method: PUT
- name: delete_dataset
  endpoint:
    path: /v1/datasets/<uuid>
    method: DELETE
- name: generate_vectortile
  endpoint:
    path: /v1/datasets/vectortile
    method: POST
- name: list_data_connectors
  endpoint:
    path: /v1/data-connections
    method: GET
- name: list_datasets
  endpoint:
    path: /v1/datasets
    method: GET
- name: generate_hextile
  endpoint:
    path: /internal/v1/datasets/hextile
    method: POST
- name: enrich
  endpoint:
    path: /internal/v1/query
    method: POST
- name: extract
  endpoint:
    path: /internal/v1/query
    method: POST
- name: states.csv
  endpoint:
    path: /path/to/states.csv
    method: GET
    data_selector: data
    params: {}
- name: states
  endpoint:
    path: /datasets/states.csv
    method: GET
    data_selector: records
    params: {}
- name: map
  endpoint:
    path: /maps
    method: GET
    data_selector: maps
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: states.csv
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
- name: audience
  endpoint:
    path: /geopulse/audience
    method: GET
- name: proximity
  endpoint:
    path: /geopulse/proximity/indices
    method: GET
- name: point_upload
  endpoint:
    path: /upload/points
    method: POST
    data_selector: uploaded_points
- name: polygon_upload
  endpoint:
    path: /upload/polygons
    method: POST
    data_selector: uploaded_polygons
- name: available_roles
  endpoint:
    path: /roles
    method: GET
    data_selector: roles
    params: {}
- name: available_permissions
  endpoint:
    path: /permissions
    method: GET
    data_selector: permissions
    params: {}
- name: add_member
  endpoint:
    path: /members/add
    method: POST
    data_selector: result
    params: {}
- name: view_pending_members
  endpoint:
    path: /members/pending
    method: GET
    data_selector: pending_members
    params: {}
- name: edit_current_members
  endpoint:
    path: /members/edit
    method: PUT
    data_selector: result
    params: {}
- name: placeArrival
  endpoint:
    path: /api/places/arrival
    method: POST
    data_selector: placeEvent
    params: {}
- name: placeDeparture
  endpoint:
    path: /api/places/departure
    method: POST
    data_selector: placeEvent
    params: {}
- name: placeHistorical
  endpoint:
    path: /api/places/historical
    method: POST
    data_selector: placeEvent
    params: {}
- name: poi
  endpoint:
    path: /places/api/v1/pois
    method: GET
    data_selector: pois
- name: place_event
  endpoint:
    path: /webhooks/place_event
    method: POST
    data_selector: payload
- name: geofence_event
  endpoint:
    path: /webhooks/geofence_event
    method: POST
    data_selector: payload
- name: journey_event
  endpoint:
    path: /webhooks/journey_event
    method: POST
    data_selector: payload
- name: user_data_removal
  endpoint:
    path: /v2/apps/CLIENT_ID/erasureRequest
    method: POST
    data_selector: response
    params:
      installId: required A comma separated string of installation UUIDs.
- name: Places Categories
  endpoint:
    path: /places/categories
    method: GET
- name: Places Chains
  endpoint:
    path: /places/chains
    method: GET
- name: poi_changelog
  endpoint:
    path: /api/v1/poi/changelog
    method: GET
    data_selector: records
- name: chains_changelog
  endpoint:
    path: /api/v1/chains/changelog
    method: GET
    data_selector: records
- name: POI Changelog
  endpoint:
    path: /poi/changelog
    method: GET
    data_selector: records
    params: {}
- name: Chains Changelog
  endpoint:
    path: /chains/changelog
    method: GET
    data_selector: records
    params: {}
- name: places
  endpoint:
    path: /v1/places
    method: GET
    data_selector: places
    params: {}
- name: categories
  endpoint:
    path: /v1/categories
    method: GET
    data_selector: categories
    params: {}
- name: Feasibility Score
  endpoint:
    path: /feasibility/score
    method: POST
    data_selector: results
    params: {}
- name: venues_search
  endpoint:
    path: /v2/venues/search
    method: GET
    params:
      v: '20160601'
      oauth_token: '{{ dlt.secrets[''foursquare_oauth_token''] }}'
      intent: match
      name: Foursquare HQ
      ll: 40.72412842453194,-73.99726510047911
- name: venues_add
  endpoint:
    path: /v2/venues/add
    method: GET
    params:
      v: '20160601'
      oauth_token: '{{ dlt.secrets[''foursquare_oauth_token''] }}'
      name: Foursquare HQ
      ll: 40.72412842453194,-73.99726510047911
      primaryCategoryId: 4bf58dd8d48988d125941735
- name: venues_annotate
  endpoint:
    path: /v2/venues/annotate
    method: GET
    params:
      v: '20160601'
      providerId: foursquare
      linkedId: A1B2C3D4E5
      oauth_token: '{{ dlt.secrets[''foursquare_oauth_token''] }}'
- name: maps
  endpoint:
    path: /v1/maps/for-organization
    method: GET
- name: geofences
  endpoint:
    path: /v2/apps/{client_id}/geofences
    method: GET
- name: geofence_delete
  endpoint:
    path: /v2/apps/{client_id}/geofence/{geofence_id}/delete
    method: POST
    data_selector: null
    params: {}
- name: permissions
  endpoint:
    path: /permissions
    method: GET
- name: maps
  endpoint:
    path: /maps
    method: GET
- name: datasets
  endpoint:
    path: /datasets
    method: GET
- name: geofence
  endpoint:
    path: /v2/apps/{client_id}/geofence/{geofence_id}
    method: GET
    data_selector: geofence
- name: geofence_update
  endpoint:
    path: /apps/{client_id}/geofence/{geofence_id}/update
    method: POST
- name: clear_geofences
  endpoint:
    path: /v2/apps/{client_id}/geofences/clear
    method: POST
    data_selector: null
    params: {}
- name: permissions
  endpoint:
    path: /v1/permissions
    method: POST
    data_selector: null
    params: {}
- name: permissions
  endpoint:
    path: /permissions
    method: GET
- name: datasets
  endpoint:
    path: /v1/datasets
    method: GET
- name: datasets
  endpoint:
    path: /v1/datasets/for-organization
    method: GET
- name: query_dataset
  endpoint:
    path: /v1/datasets/data-query
    method: POST
    data_selector: ''
    params: {}
- name: data_connectors
  endpoint:
    path: /v1/data-connections
    method: GET
- name: data_connections
  endpoint:
    path: /v1/data-connections/for-organization
    method: GET
- name: List Maps
  endpoint:
    path: /maps
    method: GET
- name: data
  endpoint:
    path: /data
    method: GET
- name: reports
  endpoint:
    path: /reports
    method: GET
- name: data
  endpoint:
    path: /data
    method: POST
- name: reports
  endpoint:
    path: /reports
    method: GET
- name: data_query
  endpoint:
    path: /data
    method: POST
    data_selector: status
    params: {}
- name: data
  endpoint:
    path: /data
    method: GET
- name: report_status
  endpoint:
    path: /data/
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /volume/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: reports
  endpoint:
    path: /reports
    method: GET
    data_selector: attribution reports
    params:
      page: '1'
      perPage: '50'
- name: media_partner
  endpoint:
    path: /media/partner
    method: GET
    data_selector: records
- name: tv_network
  endpoint:
    path: /tv/network
    method: GET
    data_selector: records
- name: historical_visitation_cohorts
  endpoint:
    path: /historical/visitation/cohorts
    method: GET
    data_selector: records
- name: demographics
  endpoint:
    path: /demographics
    method: GET
    data_selector: records
- name: geography
  endpoint:
    path: /geography
    method: GET
    data_selector: records
- name: business_and_category
  endpoint:
    path: /business/category
    method: GET
    data_selector: records
- name: day_and_time
  endpoint:
    path: /day/time
    method: GET
    data_selector: records
- name: stores
  endpoint:
    path: /stores
    method: GET
    data_selector: records
- name: reports
  endpoint:
    path: /report
    method: POST
    data_selector: ''
    params: {}
- name: places_search
  endpoint:
    path: /places/search
    method: GET
    data_selector: records
- name: design_grant
  endpoint:
    path: /geopulse/designs/(design id)/grant
    method: POST
    data_selector: ''
    params: {}
- name: design
  endpoint:
    path: /geopulse/designs/
    method: GET
- name: deployments
  endpoint:
    path: /geopulse/deployments/
    method: GET
- name: get_design
  endpoint:
    path: /geopulse/designs/(design Id)
    method: GET
    data_selector: response.data
    params: {}
- name: list_designs
  endpoint:
    path: /geopulse/designs/
    method: GET
    data_selector: response.data
    params: {}
- name: request_build
  endpoint:
    path: /geopulse/designs/(design id)/request
    method: POST
    data_selector: status
    params: {}
- name: list_builds
  endpoint:
    path: /geopulse/builds
    method: GET
    data_selector: response.data
    params: {}
- name: request_deployment
  endpoint:
    path: /geopulse/builds/(build id)/request
    method: POST
    data_selector: status
    params: {}
- name: deployments
  endpoint:
    path: /geopulse/deployments
    method: GET
- name: deployment_tag
  endpoint:
    path: /geopulse/deployments/(deployment id)/tag
    method: POST
    params:
      tags: String (comma delimited)
      KEY: String
- name: deployment_tag
  endpoint:
    path: /geopulse/deployments/(deployment id)/tag
    method: POST
    data_selector: status
    params: {}
- name: design
  endpoint:
    path: /geopulse/designs/(design Id)
    method: GET
    data_selector: response.data
    params: {}
- name: list_designs
  endpoint:
    path: /geopulse/designs/
    method: GET
    data_selector: response.data
    params: {}
- name: request_build
  endpoint:
    path: /geopulse/designs/(design id)/request
    method: POST
    data_selector: null
    params: {}
- name: list_builds
  endpoint:
    path: /geopulse/builds
    method: GET
    data_selector: response.data
    params: {}
- name: request_deployment
  endpoint:
    path: /geopulse/builds/(build id)/request
    method: POST
    data_selector: null
    params: {}
- name: list_deployments
  endpoint:
    path: /geopulse/deployments
    method: GET
    data_selector: response.data
    params: {}
- name: deployment_tag
  endpoint:
    path: /geopulse/deployments/(deployment id)/tag
    method: POST
    data_selector: status
    params:
      tags: large,europe
      KEY: '{{ dlt.secrets[''api_key''] }}'
- name: deployments_tag
  endpoint:
    path: /geopulse/deployments/(deployment id)/tag
    method: POST
    data_selector: status
    params:
      KEY: your_api_key
      tags: comma_delimited_tags
- name: design
  endpoint:
    path: /geopulse/designs/(design Id)
    method: GET
    data_selector: response.data
    params: {}
- name: all_designs
  endpoint:
    path: /geopulse/designs/
    method: GET
    data_selector: response.data
    params: {}
- name: build
  endpoint:
    path: /geopulse/builds
    method: GET
    data_selector: response.data
    params: {}
- name: deployment
  endpoint:
    path: /geopulse/deployments/
    method: GET
    data_selector: response.data
    params: {}
- name: design
  endpoint:
    path: /geopulse/designs/(design Id)
    method: GET
    data_selector: response.data
    params: {}
- name: designs
  endpoint:
    path: /geopulse/designs/
    method: GET
    data_selector: response.data
    params: {}
- name: builds
  endpoint:
    path: /geopulse/builds
    method: GET
    data_selector: response.data
    params: {}
- name: deployments
  endpoint:
    path: /geopulse/deployments/
    method: GET
    data_selector: response.data
    params: {}
- name: design
  endpoint:
    path: /geopulse/designs/(design Id)
    method: GET
    data_selector: response.data
    params: {}
- name: builds
  endpoint:
    path: /geopulse/builds
    method: GET
    data_selector: response.data
    params: {}
- name: deployments
  endpoint:
    path: /geopulse/deployments
    method: GET
    data_selector: response.data
    params: {}
- name: deployment_tag
  endpoint:
    path: /geopulse/deployments/(deployment id)/tag
    method: POST
    data_selector: status
    params: {}
- name: tag_deployment
  endpoint:
    path: /geopulse/deployments/(deployment id)/tag
    method: POST
    data_selector: status
    params:
      tags: large,europe
      KEY: 1Z88ulxbtb3jZnV7Gqlm9AcPwM6OojtSGbv98t6c
- name: deployments_tag
  endpoint:
    path: /geopulse/deployments/(deployment id)/tag
    method: POST
- name: design
  endpoint:
    path: /geopulse/designs/(design Id)
    method: GET
    data_selector: response.data
    params: {}
- name: list_designs
  endpoint:
    path: /geopulse/designs/
    method: GET
    data_selector: response.data
    params: {}
- name: request_build
  endpoint:
    path: /geopulse/designs/(design id)/request
    method: POST
    data_selector: response
    params: {}
- name: list_builds
  endpoint:
    path: /geopulse/builds
    method: GET
    data_selector: response.data
    params: {}
- name: request_deployment
  endpoint:
    path: /geopulse/builds/(build id)/request
    method: POST
    data_selector: response
    params: {}
- name: cancel_deployment
  endpoint:
    path: /geopulse/deployments/(deployment id)/cancel
    method: POST
    data_selector: response
    params: {}
- name: reject_deployment
  endpoint:
    path: /geopulse/deployments/(deployment id)/reject
    method: POST
    data_selector: response
    params: {}
- name: activate_deployment
  endpoint:
    path: /geopulse/deployments/(deployment id)/activate
    method: POST
    data_selector: response
    params: {}
- name: deactivate_deployment
  endpoint:
    path: /geopulse/deployments/(deployment id)/deactivate
    method: POST
    data_selector: response
    params: {}
- name: delete_deployment
  endpoint:
    path: /geopulse/deployments/(deployment id)/delete
    method: POST
    data_selector: response
    params: {}
- name: tag_deployment
  endpoint:
    path: /geopulse/deployments/(deployment id)/tag
    method: POST
- name: designs
  endpoint:
    path: /geopulse/designs/
    method: GET
    data_selector: response.data
    params: {}
- name: builds
  endpoint:
    path: /geopulse/builds
    method: GET
    data_selector: response.data
    params: {}
- name: deployments
  endpoint:
    path: /geopulse/deployments/
    method: GET
    data_selector: response.data
    params: {}
- name: design
  endpoint:
    path: /geopulse/designs/design_id
    method: GET
- name: list_designs
  endpoint:
    path: /geopulse/designs/
    method: GET
- name: request_build
  endpoint:
    path: /geopulse/designs/design_id/request
    method: POST
- name: list_builds
  endpoint:
    path: /geopulse/builds
    method: GET
- name: request_deployment
  endpoint:
    path: /geopulse/builds/build_id/request
    method: POST
- name: list_deployments
  endpoint:
    path: /geopulse/deployments
    method: GET
- name: design
  endpoint:
    path: /geopulse/designs/
    method: GET
    data_selector: response.data
    params: {}
- name: build
  endpoint:
    path: /geopulse/builds
    method: GET
    data_selector: response.data
    params: {}
- name: deployment
  endpoint:
    path: /geopulse/deployments/
    method: GET
    data_selector: response.data
    params: {}
- name: token_user
  endpoint:
    path: /token/user
    method: GET
    data_selector: data
    params: {}
- name: claim_venue
  endpoint:
    path: /v2/venues//claim
    method: POST
- name: venuegroup_add
  endpoint:
    path: /v2/venuegroups/add
    method: POST
- name: managed_venues
  endpoint:
    path: /v2/venues/managed
    method: GET
- name: Places API
  endpoint:
    path: /places
    method: GET
- name: places_search
  endpoint:
    path: /places/search
    method: GET
    data_selector: results
    params: {}
- name: place
  endpoint:
    path: /places/
    method: GET
    data_selector: results
- name: places_core_data
  endpoint:
    path: /places/core
    method: GET
    data_selector: results
    params: {}
- name: places_rich_data
  endpoint:
    path: /places/rich
    method: GET
    data_selector: results
    params: {}
- name: address_data
  endpoint:
    path: /address/data
    method: GET
    data_selector: results
    params: {}
- name: photos
  endpoint:
    path: /photos
    method: GET
    data_selector: photos
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: categories
- name: photos
  endpoint:
    path: /places//photos
    method: GET
    data_selector: photos
    params: {}
- name: place_tips
  endpoint:
    path: /v3/places/{fsq_id}/tips
    method: GET
- name: places_match
  endpoint:
    path: /places/match
    method: GET
- name: feedback_status
  endpoint:
    path: /v3/feedback/status
    method: GET
- name: places_nearby
  endpoint:
    path: /places/nearby
    method: GET
- name: address
  endpoint:
    path: /address/
    method: GET
- name: google_nearby_search
  endpoint:
    path: /maps/api/place/nearbysearch/json
    method: GET
    data_selector: results
    params:
      incremental: location
- name: foursquare_place_search
  endpoint:
    path: /v3/places/search
    method: GET
    data_selector: results
    params: {}
- name: taste_suggestions
  endpoint:
    path: /tastes/suggestions
    method: GET
    data_selector: tastes
    params:
      intent: tipstream
- name: venue_recommendations
  endpoint:
    path: /search/recommendations
    method: GET
    data_selector: group.results
    params:
      ll: latLng
- name: propose_place_edit
  endpoint:
    path: /propose-edit
    method: POST
    data_selector: results
- name: flag_problematic_place
  endpoint:
    path: /flag-place
    method: POST
    data_selector: results
- name: get_feedback_status
  endpoint:
    path: /feedback/status
    method: GET
    data_selector: results
- name: place_search
  endpoint:
    path: /places/search
    method: GET
    data_selector: results
- name: checkins
  endpoint:
    path: /v2/checkins/add
    method: POST
    data_selector: response
    params: {}
- name: nearby_venue_search
  endpoint:
    path: /v2/venues/search
    method: GET
    data_selector: response
    params: {}
- name: venue_details
  endpoint:
    path: /v2/venues/details
    method: GET
    data_selector: response
    params: {}
- name: create_check_in
  endpoint:
    path: /checkins/create
    method: POST
- name: delete_check_in
  endpoint:
    path: /checkins/delete
    method: DELETE
- name: update_check_in
  endpoint:
    path: /checkins/update
    method: PUT
- name: get_recent_check_ins
  endpoint:
    path: /checkins/recent
    method: GET
- name: get_check_in_details
  endpoint:
    path: /checkins/details
    method: GET
- name: venues_search
  endpoint:
    path: /v2/venues/search
    method: GET
    params:
      v: YYYYMMDD
- name: suggestvenues
  endpoint:
    path: /v2/lists//suggestvenues
    method: GET
- name: create_list
  endpoint:
    path: /create_list
    method: POST
- name: update_list
  endpoint:
    path: /update_list
    method: PUT
- name: delete_list
  endpoint:
    path: /delete_list
    method: DELETE
- name: get_list_details
  endpoint:
    path: /get_list_details
    method: GET
- name: add_item_to_list
  endpoint:
    path: /add_item_to_list
    method: POST
- name: delete_item_from_list
  endpoint:
    path: /delete_item_from_list
    method: DELETE
- name: suggest_venues_for_list
  endpoint:
    path: /suggest_venues_for_list
    method: GET
- name: autocomplete_tastes
  endpoint:
    path: /autocomplete/tastes
    method: GET
- name: get_taste_suggestions
  endpoint:
    path: /taste/suggestions
    method: GET
- name: add_taste
  endpoint:
    path: /taste/add
    method: POST
- name: delete_taste
  endpoint:
    path: /taste/delete
    method: DELETE
- name: tastes_add
  endpoint:
    path: /v2/tastes/add
    method: POST
- name: tastes_autocomplete
  endpoint:
    path: /tastes/autocomplete
    method: GET
- name: autocomplete
  endpoint:
    path: /v2/search/autocomplete
    method: GET
- name: geoautocomplete
  endpoint:
    path: /v2/search/geoautocomplete
    method: GET
- name: recommendations
  endpoint:
    path: /v2/search/recommendations
    method: GET
- name: add_tip
  endpoint:
    path: /tips/add
    method: POST
- name: delete_tip
  endpoint:
    path: /tips/delete
    method: DELETE
- name: get_tip_details
  endpoint:
    path: /tips/details
    method: GET
- name: flag_problematic_tip
  endpoint:
    path: /tips/flag
    method: POST
- name: vote_tip
  endpoint:
    path: /tips/vote
    method: POST
- name: user_checkins
  endpoint:
    path: /users/self/checkins
    method: GET
- name: user_details
  endpoint:
    path: /user/details
    method: GET
- name: user_activities
  endpoint:
    path: /user/activities
    method: GET
- name: user_checkins
  endpoint:
    path: /user/checkins
    method: GET
- name: user_lists
  endpoint:
    path: /user/lists
    method: GET
- name: user_tastes
  endpoint:
    path: /user/tastes
    method: GET
- name: user_tips
  endpoint:
    path: /user/tips
    method: GET
- name: user_tastes
  endpoint:
    path: /v2/users/self/tastes
    method: GET
    data_selector: tastes
- name: user_profile
  endpoint:
    path: /users/self
    method: GET
- name: user_activities
  endpoint:
    path: /v2/users/self/activities
    method: GET
- name: user_tips
  endpoint:
    path: /users/self/tips
    method: GET
notes:
- If updating a critical map, copy it prior to updating the configuration.
- This endpoint will intentionally return lower quality results not found in Place
  Search.
- Some features are exclusively available in the public Map SDK.
- Usage of the Places API is subject to rate limits.
- On-Prem Map SDK releases contain updates to both the API of the SDK and features
  of the application and its interface.
- Options auto_create_layers and center_map default to true.
- Python Arguments require Python syntax and snake_case parameter names.
- A Service Account API key must be used to successfully access these endpoints.
- Using a Places API key to authenticate will result in an error.
- These endpoints require the use of a Foursquare Service Account that acts on behalf
  of your application.
- Please make sure you've created a Service Account and use the associated API Key
  when making calls to the following endpoints.
- Make sure the Movement SDK is properly setup.
- Make sure that you've set a user specific ID by using the setUserId method of UserInfo
  in the Movement SDK.
- Make sure that you've set an airshipId property on the UserInfo object with the
  user's Airship Channel ID.
- Ensure to include the unique per app user oauth_token to ensure a personalized experience.
- Geofences are set up globally across all users of the app. User specific geofences
  are not yet something we provide.
- It's possible that you won't want to process any visits or only trust visits that
  have a 'High' confidence until home/work has been set.
- Enable auto updating by turning on the 'Tail' feature available from the debug mode's
  menu.
- To avoid errors, the variable this should be of type Context.
- Turn Background Modes to On in your project's Capabilities tab and enable the Location
  updates checkbox.
- 'Common Mistake: The SDK''s configuration must live in the AppDelegate''s didFinishLaunchingWithOptions
  method.'
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Requires background location and precise location enabled for full functionality.
- Geofences run independently alongside regular visit detection.
- Background Location & Precise Location Enabled required for Journeys.
- Debug mode allows you to view debug logs for the Movement SDK
- Developers can enable debugging by setting MovementSdkManager.shared().isDebugLogsEnabled
  = true
- VisitTester can simulate visits at given lat/lng
- If you wish to handle background notifications locally on the device, you will need
  to add the notification handler and delegate in the native piece of each platform.
- Requires Bearer token for authorization.
- Extracting Hextiles makes use of Studio's Query API.
- Ensure the CFBundleIdentifier of your project's Info.plist is correctly added to
  your Foursquare Developer Console app's iOS Bundle IDs setting.
- Ensure you Configure App Permissions for the Movement SDK for iOS.
- The bucket name must begin with '4sq-partner-pilgrimsdk'
- Make sure that you've set any user specific ID in using the setUserId method of
  UserInfo in the Movement SDK.
- Make sure that you've set any user specific ID in using the setUserId method of
  UserInfo in the Pilgrim SDK.
- From your Foursquare Developer Console, Enable Third Party Integrations and enter
  your Localytics App UUID, API Key and App Secret.
- Optionally, set any user specific ID in using the setUserId method of UserInfo in
  the Movement SDK.
- From your Foursquare Developer Console, Enable Third Party Integrations and enter
  your SalesForce MC Client ID, Client Secret and Event Definition Key.
- Once you have configured the Developer Console, the Movement SDK will automatically
  track location events and forward them to SalesForce MC.
- Make sure both Braze and the Movement SDK SDKs are properly setup.
- In order to properly map the Braze and Foursquare SDKs, you will need to set the
  same user ID in both systems using the changeUser method in the Braze SDK and the
  setUserId method of UserInfo in the Movement SDK.
- Enter your Braze REST API Key and (optionally) App IDs in to your app's Foursquare
  Developer Console.
- Once you have configured the Developer Console, the Movement SDK will automatically
  track location events and forward them to Braze, allowing you to retarget and segment
  your customers.
- In Segment, add Foursquare Pilgrim as a Source via their Catalog. It's listed in
  the 'Enrichment' category.
- In your iOS and Android apps, make sure the Pilgrim SDK are properly setup.
- In order to properly map the Segment and Foursquare SDKs, you will need to set the
  same user ID in both systems.
- API Key's name is not considered secret and will be visible to anyone managing API
  Keys.
- The API Key secret can only be seen once when generated.
- Using specialized classes is recommended for better developer experience.
- The only header we add is for our internal user agent
- User must be a venue manager.
- The Movement SDK is extremely battery efficient, using less than 0.5% of daily battery
  when running in the background.
- The SDK can tell you when a device's GPS has entered, exited, or remained within
  a place for a certain amount of time.
- Map SDK uses this API Key to associate API requests with your account and provide
  additional control and security for your maps and SDK functionality.
- We will be phasing out v1.x of the libraries in favor of the new ones, so we recommend
  you upgrade as soon as possible.
- There are no plans to make further updates to these older versions of the libraries.
- The final sunset will happen no earlier than September 30th, 2024.
- Use addLayerFromConfig over addLayer when working with large, non-trivial layer
  configurations.
- Ensure dataset ID is properly configured for each layer type.
- Layer id, use a string without space
- This layer's type as a string. Must be 'cluster'.
- Layer id should be a string without space.
- Layer type must be '3D'.
- Layer id must be a string without space.
- Layer type must be 'vectorTile'.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- This layer's type as a string. Must be 'vectorTile'.
- Annotations APIs have been added that allow for programmatically adding text and
  callouts to the map.
- Effects API has been added to control post-processing effects programmatically.
- Add layers from their JSON configurations with addLayerFromConfig.
- You may now control the view (2d, 3d, or globe) with getViewMode and setViewMode.
- Shadow DOM is now used for rendering, providing much better mutual isolation of
  styles between Map SDK and the rest of the page.
- Pinning the legend is currently not accessible programmatically and can only be
  accomplished from Studio's user interface.
- Animated maps cannot be exported as videos from the On-Prem SDK.
- Some features are exclusively available in the public Map SDK. To compare the On-Prem
  and public versions of the Map SDK, please refer to the feature matrix.
- You can modify the tooltip configuration only for datasets already added to the
  map.
- Javascript-exclusive functions for map interaction.
- This is a on-prem feature and is not available for other versions of the Map SDK.
- Javascript-exclusive type.
- Types representing map bounds and effects.
- Tooltip configuration encapsulates tooltip settings.
- Authentication with a refresh token only needs to be done once.
- Non-enterprise users will receive a 403 error if trying to list organization maps.
- Upload and download functionalities for datasets using the SDK.
- Content-Type must be application/json
- Requires OAuth2 authentication setup.
- Enrichment is provided through the Query API, which can support a range of flexible
  queries.
- Uses 'extract' function to obtain Hex Tiles
- Ensure to handle OAuth2 token expiration.
- Check permissions for accessing specific resources.
- Data formats currently supported include CSV, GEOJSON, JSON, FGB
- Uses Data SDK for data ingestion
- The map configuration data is represented as a dictionary.
- Server requires access to the Internet to synchronize Audience and Proximity Sets
- Sets are stored on Foursquare's S3 bucket, Northern California, us-west-2
- Instances of On-Prem require your Foursquare account API Key and Secret Key, which
  are found after logging in with your account at targeting.foursquare.com.
- Polygon upload now works in both Audience Designer and Proximity Designer.
- Files of up to 5 MB are accepted.
- Use only the Oracle JDK — issues with the SSL implementation of OpenJDK have been
  encountered in production deployments.
- 'The server can be stopped and restarted with the commands: sudo stop outpost and
  sudo restart outpost.'
- Files of up to 5 MB are accepted
- Currently, the Audience Designer will only show the first 1000 rows from your uploaded
  data on the map
- Use of the Manage Payments section requires having a credit card on file.
- While you are not required to have a credit card on file if you are a Pay As You
  Go customer, we do recommend adding one.
- To add a new member, the user must have Owner or Administrator role.
- Pending invitations can be edited or deleted by Owners or Administrators.
- Your Account will be assigned by default to a single Organization, to which all
  Projects that currently exist within your Account will be associated.
- If you need to create additional Organizations (for example, to designate a different
  billing entity than your existing Organization), you may do so within your Account.
- You may not create or use multiple Organizations relating to the same end product
  (e.g., application, website, service, etc.) or code base.
- You will automatically be granted “Administrator” level access to manage all settings
  within any Organization and each underlying Project created within your Account.
- As the Administrator, you will be able to invite one or more other users who have
  an account within the Foursquare Developer Platform to collaborate with you in one
  or more Organizations and/or Projects that you have created, as well as designate
  varying Organization- and Project-specific access and permissions levels for each
  user you have added.
- Other users may also invite you to be a part of one or more Organizations that they
  have created.
- Event types include placeArrival, placeDeparture, and placeHistorical
- We no longer recommend using requestb.in, as we've noticed that sometimes pings
  are not delivered.
- This is the first update on improving lat-longs. In the Stage 1 rollout for Jan
  2023, we are targeting the 6 countries (CA, CH, ES, GB, JP, NL).
- In the Stage 2 rollout at the end of Q1 2023, we will aim to improve lat-longs in
  US, IN, SG, DE.
- You can specify the locale by setting the `Accept-Language` HTTP header in your
  request.
- Alternatively, you can add a `locale=XXX` parameter to your request but HTTP header
  specification is preferred.
- Webhooks get triggered in addition to the regular callback in the SDK.
- Service account level OAuth tokens are valid only for use with the Foursquare Movement
  Geofence API. This feature is only available for Enterprise accounts.
- By adding URL restrictions to an API key, only requests originating from the specified
  list of URLs/domains will be authorized.
- Foursquare Service Account Required
- This is the first update on improving lat-longs.
- In the Stage 1 rollout for Jan 2023, we are targeting the 6 countries (CA, CH, ES,
  GB, JP, NL).
- Account required!
- Save your design in your My Designs page.
- This access token will allow API calls to access the same resources (maps, datasets,
  etc) that your user account is allowed to access in the Studio application.
- The token will expire after a given time period, and you will need to visit this
  page again to get a new one.
- This token should be kept safe! Anyone who has it can access to your data until
  it expires.
- All API requests require a version parameter.
- We recommend setting a single date across all of your API calls.
- Building an audience segment requires an account.
- Audience must be between 50k and 50m
- Native auth is the only flow that supports users logging in to Foursquare using
  Facebook.
- An application can make a maximum of 5,000 userless requests per hour to venues/*
  endpoints.
- An application can make a maximum of 500 userless requests to other endpoints groups
  per hour.
- An application can make up to 500 authenticated requests requests per hour per OAuth
  token.
- Rate limits are not per endpoint, but per top-level endpoint group.
- Some endpoints may have different limits due to security or other considerations.
- Inspect the `X-RateLimit-Remaining` and `X-RateLimit-Limit` HTTP headers of API
  responses for current usage information.
- Permissions include "viewer" and "editor", and can be modified for individuals or
  your entire organization.
- Report IDs can be discovered using the /reports endpoint as necessary.
- You can add '.csv' to the end of Result URL to retrieve comma-separated data.
- The response from the /reports endpoint is paginated, returning the first page of
  results with 50 rows per page by default.
- You should restrict IP addresses that are authorized to make API calls using your
  key (server-side), or restrict access by Bundle Id (iOS).
- Android and client-side (Javascript/browser) access to the Foursquare Targeting
  APIs is currently unavailable.
- The KEY parameter name must be declared in all caps.
- Endpoint only accepts GET requests for listing designs.
- Request Parameters must be URL encoded for POST requests.
- Requires API Key as a query parameter.
- Request Parameters should be URL encoded and POSTed as the body of the request.
- API Key must be included in all requests as a query parameter named 'KEY'.
- Request parameters must be URL encoded.
- API Key must be declared in all caps as 'KEY'.
- Paging system implemented; use limit and offset for large volumes of data.
- This API requires an API key for authentication.
- All endpoints only accept GET or POST requests as specified.
- Deployment tags can help with server capacity management.
- If your OAuth Consumer is set up with the proper privileges, you can use this endpoint
  to claim a venue on behalf of a user without the claim having to be approved by
  foursquare staff.
- Mapbox Access Token required
- Foursquare API Token required
- Access to the Foursquare Targeting Designer UI must be authenticated by a token
  provided in the factual_api_token query parameter of the iframe src URL.
- Mapbox Access Token is required for rendering maps
- Foursquare leverages Mapbox to render maps in real-time
- 'The applicable queries per second (QPS) rate limit, calculated across all endpoints
  in total, is as follows: Enterprise Customers: 100 QPS; or Pay as You Go & Sandbox
  Customers: 50 QPS.'
- Find Nearby Places endpoint does return a list of results, but does not support
  pagination.
- Use session tokens for all autocomplete sessions.
- Generate a new token for each session. Be sure to pass a unique session token for
  each new session.
- Ensure that the same API token is used for all Autocomplete and followup endpoint
  requests within a session.
- If nothing is specified, for geographical entities (e.g., city names), we'll fall
  back to using the language that's most popular in the country for that venue.
- Venue name and tips may not be translated.
- Learn how to assemble photo URLs from a Photos response.
- Autocomplete uses session tokens to group the user's query and the user's selected
  result into a discrete session for billing purposes.
- If the session_token parameter is omitted, the session is charged per keystroke/request.
- User-ful authentication requires an access token for each individual user with each
  call.
- Access token and userId pairings must be stored internally after user creation.
- HTTPS is required for all real-time APIs because your application will receive check-ins
  (both public and private), user information, and other private information along
  this channel.
- New Venue Tags added to match parity with flat file; e.g. datesPopular, glutenFreeDiet,
  goodForDogs.
- Include the unique per app user oauth_token to ensure a personalized experience.
- Ensure to include the unique per app user oauth_token for personalized experience.
- Usage of the Personalization API is subject to rate limits.
- Do not always pass in the current date for the version parameter.
- Foursquare rate limits any application making authenticated requests on a per hour
  per OAuth token basis.
- If you are currently over limits, our API will return a 403 error, and the response
  object returned by our API will be empty.
- This feature is subject to the Personalization API (Self-Service) Public Beta End
  user License Agreement.
- This documentation covers a feature currently in Public Beta.
- Access is available to anyone interested in building personalized experiences for
  their end-users.
- Endpoints require the use of a Foursquare Service Account that acts on behalf of
  your application.
- This endpoint requires a Foursquare Service API Key to authenticate.
- Foursquare will respond to requests within 30-days of receipt or otherwise in accordance
  with law.
- Please make sure to store the resulting oauth_token/user_id pairings for each user
  in your own internal database.
- Public Beta Feature
errors:
- 'Error: Handle error in movementSdkManager delegate method.'
- 'Lack of network connectivity: The most likely reason the SDK cannot retrieve the
  device''s current location would be because the API request has failed to make a
  proper connection to the Foursquare server.'
- 'Lack of location permissions: Proper location permissions have not been set or
  granted by the user.'
- 'CLLocation timeout: If CLLocation doesn’t return a location within the specified
  timeout value.'
- API calls that are unauthorized, do not include a token, include an expired or malformed
  token, etc., will return an appropriate error in the response.
- 'Unauthorized: API calls that are unauthorized, do not include a token, include
  an expired or malformed token.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403: Insufficient permission level to perform this action'
- '404: Resource not found'
- '500: Internal server error'
- '200: Successful request'
- '400: Invalid install ids'
- 'Unauthorized: API calls that do not include a token, include an expired or malformed
  token, etc. will return an appropriate error in the response.'
- '403: If you are currently over limits, the API will return a 403 error and the
  response object will be empty.'
- '400: Any case where a parameter is invalid, or a required parameter is missing.
  This includes the case where no OAuth token is provided and the case where a resource
  ID is specified incorrectly in a path.'
- '401: The OAuth token was provided but was invalid.'
- '403: The requested information cannot be viewed by the acting user, for example,
  because they are not friends with the user whose data they are trying to read. It
  could also indicate privileges or access has been revoked.'
- '404: Endpoint does not exist.'
- '405: Attempting to use POST with a GET-only endpoint, or vice-versa.'
- '409: The request could not be completed as it is. Use the information included
  in the response to modify the request and retry.'
- '500: Foursquare’s servers are unhappy. There is either a bug on our side or there
  is an outage. The request is probably valid but needs to be retried later.'
- '400 (Bad Request): The request was bad or malformed.'
- '404 (Not Found): The request report does not exist.'
- '422 (Unprocessable Entity): The specified dimensions or metrics are invalid, or
  their combination is not supported.'
- 'HTTP 429: Exceeding the request per day limit will result in a HTTP 429 response.'
- If the tag assignment is successful, the call will return a status of 'OK'.
- '401 Unauthorized: Check API key or permissions.'
- '404 Not Found: Ensure the endpoint is correct.'
- '401 Unauthorized: Invalid API Key'
- '400 Bad Request: Invalid request parameters'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Ensure API Key is valid.'
- '404 Not Found: The requested resource does not exist.'
- 'OK: Successful tag assignment'
- '401 Unauthorized: Recheck API key or token expiration.'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Check your API Key.'
- 400 unknown parameter ‘parameter_name’
- 400 parameter ‘parameter_name’ should not be used alongside a user id.
- 400 missing required parameter ‘parameter_name’
- 400 invalid email address
- 401 invalid API key
- 403 throttled
- 404 resource not found
- 404 user not found
- '400 Bad Request: Any case where a parameter is invalid, or a required parameter
  is missing.'
- '401 Unauthorized: Invalid request token'
- '403 Forbidden: The requested information is restricted'
- '404 Not Found: Endpoint does not exist.'
- '405 Method Not Allowed: Attempting to use POST with a GET-only endpoint, or vice-versa.'
- '409 Conflict: The request could not be completed as it is. Use the information
  included in the response to modify the request and retry.'
- '500 Internal Server Error: Foursquare’s servers are unhappy. There is either a
  bug on our side or there is an outage. The request is probably valid but needs to
  be retried later.'
- Your app can't see pushes from that venue
- '400 Bad Request: Any case where a parameter is invalid, or a required parameter
  is missing. This includes the case where no OAuth token is provided and the case
  where a resource ID is specified incorrectly in a path.'
- '401 Unauthorized: The OAuth token was provided but was invalid.'
- '403 Forbidden: The requested information cannot be viewed by the acting user, for
  example, because they are not friends with the user whose data they are trying to
  read. It could also indicate privileges or access has been revoked.'
- '403: Rate limit exceeded'
auth_info:
  mentioned_objects: []
client:
  auth:
    type: apikey
    location: header
    header_name: Authorization
    client_id: v970dpbcqmRtr3y9XwlAB3dycpsvNRZF
    client_secret: CONSUMER_SECRET
    flow: refresh_token
    token_url: https://studio.foursquare.com/tokens.html
    refresh_token: v1.ABC...
  base_url: https://api.foursquare.com/v2
  headers:
    Content-Type: application/x-www-form-urlencoded
    Accept: application/json
    Accept-Language: ''
    Authorization: your_api_key
    apiKey: <api-key>
    accept: application/json
    content-type: application/json
  paginator:
    default_page_size: 100
    type: endpoint pagination
    page_size_param: perPage
source_metadata: null
