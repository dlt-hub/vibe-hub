resources:
- name: generic_item
- name: item_info
- name: field_info
- name: vaults
  endpoint:
    path: /vaults
    method: GET
- name: items
  endpoint:
    path: /items
    method: GET
- name: items_cache_values
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      1password.items.cacheValues: 'true'
- name: items_password_recipe
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      1password.items.passwordRecipe: letters,digits,symbols,32
- name: items_use_secret_references
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      1password.items.useSecretReferences: 'true'
- name: editor_suggest_storage
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      1password.editor.suggestStorage: 'true'
- name: debug_enabled
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      1password.debug.enabled: 'false'
- name: partner_account
  endpoint:
    path: /api/v1/partners/account
    method: POST
    data_selector: account
    params: {}
- name: get_account
  endpoint:
    path: /api/v1/partners/account
    method: GET
    data_selector: account
    params: {}
- name: delete_account
  endpoint:
    path: /api/v1/partners/account
    method: DELETE
    data_selector: account
    params: {}
- name: update_account
  endpoint:
    path: /api/v1/partners/account
    method: PATCH
    data_selector: account
    params: {}
- name: billing_account
  endpoint:
    path: /billing/account
    method: PATCH
    data_selector: account
    params:
      customer_account_uid: string
- name: item_management
  endpoint:
    path: /api/item_management
    method: GET
- name: vault_management
  endpoint:
    path: /api/vault_management
    method: GET
- name: user_access_management
  endpoint:
    path: /api/user_access_management
    method: GET
- name: compliance_reporting
  endpoint:
    path: /api/compliance_reporting
    method: GET
- name: Connect Host
  endpoint:
    path: Connect server IP address, hostname, or URL
    method: POST
    data_selector: credentials
    params: {}
- name: Service Account Credential
  endpoint:
    path: Service account token
    method: POST
    data_selector: credentials
    params: {}
- name: create_billing_account
  endpoint:
    path: /create_billing_account
    method: POST
    data_selector: account
    params: {}
- name: update_billing_account
  endpoint:
    path: /update_billing_account/{customer_account_uid}
    method: PATCH
    data_selector: account
    params: {}
- name: SSH keys
  endpoint:
    path: /developer/watchtower/checks
    method: GET
    data_selector: credentials
    params: {}
- name: Save in 1Password button
  endpoint:
    path: /save
    method: POST
    data_selector: request
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: items
  endpoint:
    path: /client/Items
    method: POST
    data_selector: items
    params: {}
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: records
- name: VPC
  endpoint:
    path: /resources/vpc
    method: CREATE
    data_selector: resources
    params: {}
- name: public_subnets
  endpoint:
    path: /resources/public-subnets
    method: CREATE
    data_selector: resources
    params: {}
- name: Internet_gateway
  endpoint:
    path: /resources/internet-gateway
    method: CREATE
    data_selector: resources
    params: {}
- name: Application_Load_Balancer
  endpoint:
    path: /resources/alb
    method: CREATE
    data_selector: resources
    params: {}
- name: ECS_cluster
  endpoint:
    path: /resources/ecs-cluster
    method: CREATE
    data_selector: resources
    params: {}
- name: task_definition_1
  endpoint:
    path: /resources/task-definitions/1
    method: CREATE
    data_selector: resources
    params: {}
- name: task_definition_2
  endpoint:
    path: /resources/task-definitions/2
    method: CREATE
    data_selector: resources
    params: {}
- name: 1password_connect_api
  endpoint:
    path: /resources/1password/connect-api
    method: CREATE
    data_selector: resources
    params: {}
- name: 1password_connect_sync
  endpoint:
    path: /resources/1password/connect-sync
    method: CREATE
    data_selector: resources
    params: {}
- name: secret
  endpoint:
    path: /path/to/secret
    method: GET
    data_selector: secrets
    params: {}
- name: ssh_key
  endpoint:
    path: /manage/ssh_keys
    method: POST
- name: Login
  endpoint:
    data_selector: fields
- name: ssh_keys
  endpoint:
    path: /config/ssh/agent.toml
    method: GET
    data_selector: keys
    params: {}
- name: commit_signing
  endpoint:
    path: /configure/commit/signing
    method: POST
    data_selector: configuration
    params: {}
- name: sign_in_attempts
  endpoint:
    path: /api/v2/auditevents
    method: POST
    data_selector: items
- name: sign_in_attempts
  endpoint:
    path: /api/v2/signinattempts
    method: POST
    data_selector: items
    params: {}
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: records
- name: item
  endpoint:
    path: /item
    method: GET
    data_selector: records
- name: mngdacc
  endpoint:
    path: /mngdacc
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: records
- name: report
  endpoint:
    path: /report
    method: GET
    data_selector: records
- name: sa
  endpoint:
    path: /sa
    method: GET
    data_selector: records
- name: satoken
  endpoint:
    path: /satoken
    method: GET
    data_selector: records
- name: ssotkn
  endpoint:
    path: /ssotkn
    method: GET
    data_selector: records
- name: slackapp
  endpoint:
    path: /slackapp
    method: GET
    data_selector: records
- name: sso
  endpoint:
    path: /sso
    method: GET
    data_selector: records
- name: card
  endpoint:
    path: /card
    method: GET
    data_selector: records
- name: pm
  endpoint:
    path: /pm
    method: GET
    data_selector: records
- name: sub
  endpoint:
    path: /sub
    method: GET
    data_selector: records
- name: action_values
  endpoint:
    path: /action/values
    method: GET
- name: object_values
  endpoint:
    path: /object/values
    method: GET
- name: item_usage_actions
  endpoint:
    path: /item_usage_actions
    method: GET
    data_selector: actions
- name: sign_in_attempts
  endpoint:
    path: /api/v2/signinattempts
    method: POST
- name: item_usages
  endpoint:
    path: /api/v2/itemusages
    method: POST
- name: audit_events
  endpoint:
    path: /api/v2/auditevents
    method: POST
- name: introspection
  endpoint:
    path: /api/v2/auth/introspect
    method: GET
- name: introspect
  endpoint:
    path: /api/v2/auth/introspect
    method: GET
    data_selector: events
    params: {}
- name: auditevents
  endpoint:
    path: /api/v2/auditevents
    method: POST
    data_selector: events
    params: {}
- name: itemusages
  endpoint:
    path: /api/v2/itemusages
    method: POST
    data_selector: events
    params: {}
- name: signinattempts
  endpoint:
    path: /api/v2/signinattempts
    method: POST
    data_selector: events
    params: {}
- name: sign_in_attempt
  endpoint:
    path: /api/v2/itemusages
    method: POST
    data_selector: items
    params: {}
- name: sign_in_attempts
  endpoint:
    path: /signinattempts
    method: POST
    data_selector: items
- name: audit_events
  endpoint:
    path: /v1/audit_events
    method: GET
    data_selector: events
notes:
- It's best practice to turn off task logging for any tasks that interact with 1Password
  Connect.
- Avoid using environment variables for sensitive information
- Inject secrets from 1Password anywhere you need them.
- Securely load secrets from the environment into your applications without putting
  any plaintext secrets in code.
- There is a possibility of breaking changes when you upgrade from one version 0 release
  to another, for example 0.1.X to 0.2.0.
- Integration authors may need to update their code when updating the SDK version.
- CLI credentials are stored in your 1Password account
- If you aren't able to create, edit, or delete items and see an error that you don't
  have the right permissions to execute this argument, check your service account's
  permissions in the vault where the items are saved.
- '1Password SDKs currently have a maximum message size of 50 MB, which impacts the
  following file operations: The Files().Attach and Files().ReplaceDocument operations
  can''t create files larger than 50 MB. The Files().Read operation can''t retrieve
  file contents exceeding 50 MB. The Items().Create operation can''t create items
  containing more than 50 MB of file content.'
- Make sure to add the `Share items` permission when creating your service account
  token to share items using the SDKs.
- 'For individual and family accounts, these settings default to: Unlimited views,
  All recipient types allowed, All share types allowed, Maximum share duration of
  30 days, Default share duration of 7 days.'
- For now, use the 1Password Connect SDK for Go, JS, or Python.
- 1Password SDKs currently support authentication with 1Password Service Accounts,
  which are designed to authenticate automated processes to 1Password.
- You can choose which vaults a service account can access and its permissions in
  each vault, allowing you to follow the principle of least privilege in your project.
- Service accounts have rate limits and request quotes.
- You can't grant a service account access to your built-in Personal, Private, or
  Employee vault, or your default Shared vault.
- Service accounts only work with 1Password CLI version 2.18.0 or later.
- If you try to create items using 1Password CLI in your GitHub pipelines, the command
  fails with an error if not using load-secrets-action.
- The pipeline environment is in piped mode, which triggers the CLI's pipe detection,
  expecting a piped input.
- To create items in this environment, use a JSON template with your item details.
- The plugin only supports secret text for credentials.
- If both a Connect server and a service account are configured, the Connect server
  takes precedence.
- 1Password only uses your local disk to check for developer credentials.
- SSH keys are the only developer credentials currently supported in Developer Watchtower.
- The button is disabled by default.
- Item URLs are determined by 1Password.
- 1Password is designed to generate, fill, and save passwords on most websites.
- Making your website accessible benefits everyone who uses your website.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Eliminate plaintext secrets in code
- Shell plugins unlock the ability to securely share credentials between team members
- To integrate 1Password CLI with the 1Password app.
- Uses 1Password Service Accounts to follow the principle of least privilege.
- Uses secret references for storing and retrieving values.
- 1Password offers multiple Kubernetes integrations, including the Kubernetes Secrets
  Injector, the Kubernetes Operator, and Helm charts.
- Connect credentials take precedence over service account credentials.
- You must install the CLI in the pipeline for the 1Password CircleCI orb to function.
- The Load secrets from 1Password GitHub Action only supports Mac and Linux runners.
- Global-level configurations impact all jobs in all folders.
- Folder-level configurations impact all jobs within the folder.
- Job-level configurations only impact the jobs you configure.
- Service accounts provide an authentication method for 1Password CLI that isn't associated
  with an individual.
- Using a service account helps you implement the principal of least privilege and
  avoid the limitations of personal accounts.
- Practice good software update hygiene and regularly update to the latest version
  of the 1Password CLI.
- Apply the principle of least privilege to your infrastructure secrets.
- Use dedicated vaults with service accounts that are properly scoped for secrets
  management use cases.
- Use template files when creating items that contain sensitive values.
- Authorization expires after 10 minutes of inactivity in the terminal session.
- There's a hard limit of 12 hours, after which you must reauthorize.
- The integration runs on 1Password's Confidential Computing platform, leveraging
  AWS Nitro Enclaves.
- 1Password will ask you to allow your terminal or other SSH client to use your SSH
  key.
- You can configure your authorization settings to prompt more or less frequently.
- 1Password supports Ed25519 and RSA (2048, 3072, and 4096-bit) key types.
- 1Password requires version 8 for generating, importing, and sharing SSH keys.
- The integration supports unidirectional (one-way) syncing from 1Password to AWS
  Secrets Manager.
- If you have environment secrets in AWS Secrets Manager that require auto-rotation,
  you should continue to manage them there.
- It's best practice to maintain one definitive copy of a secret in 1Password.
- There's a 64KB size limit for environments synced to AWS Secrets Manager.
- Each item category includes a set of default fields, some of which may be specific
  to the category.
- Item JSON templates allow you to create an item with all of its details specified,
  including custom sections and fields.
- Secret references can be formatted as either unenclosed or enclosed secret references.
- Template syntax supports variable tags.
- Service account must have read and write permissions in appropriate vaults.
- Make sure you have access to your Secret Key and account password before removing
  account details from your configuration file.
- If you see a connection error, try making sure you're using the latest version of
  the 1Password desktop app.
- Sessions expire after 30 minutes of inactivity, after which you’ll need to sign
  in again and save a new token.
- For non-interactive shells in local environments, sign in with the 1Password desktop
  app integration instead.
- '1Password CLI configuration directories default to: `${XDG_CONFIG_HOME}/op` when
  `${XDG_CONFIG_HOME}` is set'
- '1Password CLI configuration directories default to: `~/.config/op` when `${XDG_CONFIG_HOME}`
  is not set'
- '1Password CLI detects the configuration directory to read or write to in this order
  of precedence: A directory specified with `--config`, A directory set with the `OP_CONFIG_DIR`
  environment variable. `~/.op`, `${XDG_CONFIG_HOME}/.op`, `~/.config/op`, `${XDG_CONFIG_HOME}/op`'
- 1Password SSH agent only works with SSH clients that support Microsoft OpenSSH.
- Terminal commands are executed using the systemd-run process and can only contain
  simple command-line arguments.
- The 1Password SSH agent doesn't work with Flatpak or Snap Store installations of
  1Password.
- You will still be required to explicitly authorize any request an SSH client makes
  to use your keys.
- Visit the Security credentials tab of your IAM user to add a new key
- Visit the SSH public keys page of your user settings to add a new key
- Visit the Bitbucket SSH key settings to add a new key
- Visit your account security settings to add a new key
- Visit the GitHub SSH key settings to add a new key
- Visit the GitLab SSH key settings to add a new key
- Visit the Gitpod SSH key settings to add a new key
- Visit the Google Compute Engine metadata settings to add a new key
- Visit the SSH keys section in the VPC Infrastructure console to add a new key
- Visit the SSH keys section in the Classic Infrastructure console to add a new key
- Visit the Git Keys tab in your Space profile settings to add a new key
- Visit the SSH Keys section in your profile to add a new key
- Visit the SSH keys section in the Azure portal to add a new key
- Visit the SSH Public Keys section in the Ngrok dashboard to add a new key
- Visit the Vultr SSH key settings to add a new key
- Requires Git version 2.34.0 or later
- You can configure commit signing in a single repository or globally
- 1Password can automatically manage an SSH config file (`~/.ssh/1Password/config`)
- Generating SSH configuration files will store unencrypted SSH host URLs and SSH
  public keys on disk.
- V2 endpoints introduce new required fields and response structures.
- V1 endpoints continue to be supported.
- Generate a bearer token and store it in your 1Password account
- Set EVENTS_API_TOKEN to a secret reference that points to where your bearer token
  is saved in 1Password
- The API can access data from the last 120 days.
- Audit event data includes actions performed by team members in a 1Password account.
errors:
- '403: Authorization header is missing or an invalid token is specified.'
- '404: Resource or dependency of a resource isn''t found.'
- '410: Resource has been removed.'
- '500: Unexpected errors.'
- '404: Resource or dependency not found.'
- '403: Returned when the authorization header is missing or an invalid token is specified.'
- '404: Returned when a resource or dependency of a resource isn''t found.'
- '410: Returned when a resource has been removed.'
- '500: Returned on unexpected errors.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Unknown error: Check your configuration and try again.'
- 'Unsupported key type: Ensure you''re importing a supported Ed25519 or RSA key.'
- 'Key file couldn''t be read: Check if the key file is in a supported format.'
- 'Key couldn''t be decrypted: Re-encrypt your key file using a modern algorithm.'
- 'AccessDenied: IAM role isn''t allowed to perform the operation.'
- 'AssumeRoleError: The sync integration is unable to assume the IAM role.'
- 'InternalServiceError: Outage or internal error within the AWS platform.'
- 'KmsKeyError: KMS key is invalid or can’t be used.'
- 'LimitExceeded: AWS Secrets Manager quota reached.'
- 'MaximumSecretSizeExceeded: Secret in JSON format exceeds 64 KB.'
- 'MissingSamlSubject: SAML subject isn''t set correctly in the AWS assume role (trust)
  policy.'
- 'SecretNameConflict: Secret with the configured name already exists in AWS Secrets
  Manager.'
- 'connectionreset: 1Password CLI couldn''t connect to the 1Password desktop app'
- 'LostConnectionToApp: Check if 1Password is kept in the menu bar'
- 'SSH is an unsupported format: Check Git version'
- 'user.signingkey value is invalid: Ensure it is set to a valid SSH public key'
- 'Allowed signers file error: Ensure proper configuration'
- '400: Bad request'
- '401: Unauthorized access'
- '500: Internal server error'
- '500 Internal Server Error: Response to all endpoints.'
- '429: Too many requests'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - ServiceAccount
  - ConnectServer
client:
  headers:
    Accept: application/json
    Content-Type: application/json
    Authorization: Bearer <token>
  auth:
    type: oauth2
    location: header
    header_name: Authorization
    flow: refresh_token
    token_url: https://login.1password.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
  base_url: https://your-instance.api-name.com
  paginator:
    type: cursor
    cursor_path: cursor
    cursor_param: nextUrl
    page_size_param: pageSize
    default_page_size: 200
    has_more_param: has_more
source_metadata: null
