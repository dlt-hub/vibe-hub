resources:
- name: theme
  endpoint:
    path: /theme.yaml
    method: GET
    data_selector: theme_data
- name: sidebar_menu_item
  endpoint:
    path: /api/sidebar/menu/item
    method: GET
    data_selector: menu_items
    params: {}
- name: SendEmail
  endpoint:
    path: /localAPI
    method: POST
    data_selector: results
    params: {}
- name: SendEmail
  endpoint:
    path: ''
    method: POST
    data_selector: results
    params:
      command: SendEmail
      messagename: Test Template
      id: '1'
      adminuser: AdminUsername
- name: theme.yaml
  endpoint:
    path: /templates/mytheme/theme.yaml
    method: GET
    data_selector: records
- name: custom.css
  endpoint:
    path: /templates/mytheme/css/custom.css
    method: GET
    data_selector: records
- name: GetClients
  endpoint:
    path: includes/api.php
    method: POST
    data_selector: json
    params:
      action: GetClients
      responsetype: json
- name: Child Themes
  endpoint:
    path: /templates/child-themes
    method: GET
- name: Custom Theme
  endpoint:
    path: /templates/custom-theme
    method: GET
- name: theme.yaml
  endpoint:
    path: /templates/orderforms/
    method: GET
    data_selector: templates
    params: {}
notes:
- This file must be a valid YAML file and must use the indentation style illustrated
  above.
- The navigation bar elements are controlled programmatically, allowing modules and
  hooks to dynamically interact with the navigation menu elements.
- The look and feel of the navigation bar can be customised via the /header.tpl and
  /includes/navbar.tpl system theme template files.
- We strongly recommend that you maintain all of the template includes and output
  variables in the default template files in your custom header and footer. This will
  help ensure compatibility with addons and extensions you install later.
- The footer template file includes a number of lines of JavaScript code immediately
  prior to the closing </body> tag. These are essential to the correct operation of
  the client area. Do not remove these lines.
- You may also wish to consider creating child themes, which have simpler development
  and maintenance requirements.
- Child Themes simplify maintenance and updates.
- Access to the API by default is restricted by IP.
- An Access Key can be configured to allow IP restrictions to be bypassed.
- 'An API Access Key can contain letters, numbers, and the following special characters
  only: ! @ # $ % . ( ) * [ ] - _'
- For WHMCS 7.2 and later, use API Authentication Credential pair.
- Prior to WHMCS 7.2, use 'username' and md5 hash of the admin password.
- Recommended for all new theme development in WHMCS 8.1 and later.
- Template names should be a single word, consisting of only lowercase letters and
  numbers.
- Hooks are the only future-proof way of performing your own PHP logic at the time
  of page rendering.
- The exposure of the template object via the legacy variable $template is only available
  if template_object is itemized in the enabled_special_smarty_vars array.
- Names should only contain lowercase letters, numbers, hyphens, and underscores.
  They cannot include spaces.
errors: []
auth_info:
  mentioned_objects:
  - Parent Theme
  - Child Theme
client:
  base_url: https://your-instance.api-name.com
  headers:
    Accept: application/json
    Content-Type: application/json
  auth:
    type: oauth2
    flow: refresh_token
  endpoint:
    method: POST
source_metadata: null
