resources:
- name: configuration
  endpoint:
    path: /configure
    method: GET
    data_selector: configurations
- name: rotated_secret
  endpoint:
    path: /rotated_secret
    method: POST
    data_selector: secrets
    params: {}
- name: user_credentials
  endpoint:
    path: /user_credentials
    method: POST
    data_selector: credentials
    params: {}
- name: rotated_secret
  endpoint:
    path: /doppler/rotate/
    method: POST
    data_selector: secrets
    params: {}
- name: workplace_users
  endpoint:
    path: /workplace/users/
    method: GET
- name: project_member
  endpoint:
    path: /projects/project/members/member
    method: GET
- name: project_members
  endpoint:
    path: /v3/projects/project/members
    method: POST
- name: project_member
  endpoint:
    path: /projects/project/members/member
    method: PATCH
- name: service_accounts
  endpoint:
    path: /workplace/service_accounts
    method: GET
- name: service_accounts
  endpoint:
    path: /workplace/service_accounts
    method: POST
- name: workplace_users
  endpoint:
    path: /workplace/users
    method: GET
- name: workplace_roles
  endpoint:
    path: /workplace/roles
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: project_members
  endpoint:
    path: /project/members
    method: GET
- name: environments
  endpoint:
    path: /environments
    method: GET
- name: configs
  endpoint:
    path: /configs
    method: GET
- name: service_accounts
  endpoint:
    path: /service-accounts
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: Workplace Users
  endpoint:
    path: /workplace/users
    method: GET
- name: Workplace Roles
  endpoint:
    path: /workplace/roles
    method: GET
- name: Projects
  endpoint:
    path: /projects
    method: GET
- name: Environments
  endpoint:
    path: /environments
    method: GET
- name: Configs
  endpoint:
    path: /configs
    method: GET
- name: Service Accounts
  endpoint:
    path: /service-accounts
    method: GET
- name: Webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: workplace_users
  endpoint:
    path: /workplace/users
    method: GET
- name: service_account
  endpoint:
    path: /workplace/service_accounts/service_account/
    method: GET
- name: service_account
  endpoint:
    path: /workplace/service_accounts/service_account/
    method: PATCH
- name: workplace_users
  endpoint:
    path: /workplace/users/
    method: GET
- name: workplace_user
  endpoint:
    path: /workplace/users/{slug}
    method: GET
- name: Workplace Users
  endpoint:
    path: /workplace/users
    method: GET
- name: Workplace Roles
  endpoint:
    path: /workplace/roles
    method: GET
- name: role
  endpoint:
    path: /workplace/roles/role/
    method: GET
- name: workplace_users
  endpoint:
    path: /workplace/users
    method: GET
- name: workplace_roles
  endpoint:
    path: /workplace/roles
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: service_accounts
  endpoint:
    path: /service-accounts
    method: GET
- name: role
  endpoint:
    path: /workplace/roles/role/
    method: PATCH
- name: role
  endpoint:
    path: /workplace/roles/role/
    method: DELETE
- name: permissions
  endpoint:
    path: /workplace/permissions
    method: GET
- name: activity_logs
  endpoint:
    path: /logs
    method: GET
- name: activity_log
  endpoint:
    path: /logs/log
    method: GET
- name: service_account
  endpoint:
    path: /v3/workplace/service_accounts/service_account/
    method: DELETE
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: projects
  endpoint:
    path: /projects/project
    method: GET
- name: projects
  endpoint:
    path: /v3/projects
    method: GET
- name: workplace_users
  endpoint:
    path: /Workplace Users
    method: GET
- name: projects
  endpoint:
    path: /projects/project
    method: GET
- name: workplace_users
  endpoint:
    path: /v3/workplace/users
    method: GET
- name: workplace_roles
  endpoint:
    path: /v3/projects/roles
    method: GET
- name: role
  endpoint:
    path: /projects/roles/role/
    method: GET
- name: service_account_tokens
  endpoint:
    path: /workplace/service_accounts/service_account//tokens
    method: GET
- name: service_account_tokens
  endpoint:
    path: /workplace/service_accounts/service_account/{service_account}/tokens
    method: POST
- name: projects
  endpoint:
    path: /v3/projects
    method: GET
- name: roles
  endpoint:
    path: /v3/projects/roles
    method: GET
- name: role
  endpoint:
    path: /projects/roles/role/
    method: PATCH
- name: role
  endpoint:
    path: /projects/roles/role/
    method: DELETE
- name: permissions
  endpoint:
    path: /projects/permissions
    method: GET
- name: project_members
  endpoint:
    path: /projects/project/members
    method: GET
- name: workplace_users
  endpoint:
    path: /workplace/users
    method: GET
- name: workplace_roles
  endpoint:
    path: /workplace/roles
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: environments
  endpoint:
    path: /environments
    method: GET
- name: environments
  endpoint:
    path: /environments/environment
    method: GET
- name: workplace_users
  endpoint:
    path: /Workplace Users
    method: GET
- name: workplace_roles
  endpoint:
    path: /Workplace Roles
    method: GET
- name: projects
  endpoint:
    path: /Projects
    method: GET
- name: project_members
  endpoint:
    path: /Project Members
    method: GET
- name: environments
  endpoint:
    path: /Environments
    method: GET
- name: configs
  endpoint:
    path: /Configs
    method: GET
- name: service_tokens
  endpoint:
    path: /Service Tokens
    method: GET
- name: webhooks
  endpoint:
    path: /Webhooks
    method: GET
- name: audit_api
  endpoint:
    path: /Audit API
    method: GET
- name: environment
  endpoint:
    path: /environments/environment
    method: GET
- name: environments
  endpoint:
    path: /environments/environment
    method: GET
- name: configs
  endpoint:
    path: /configs
    method: GET
- name: service_account_token
  endpoint:
    path: /v3/workplace/service_accounts/service_account//tokens/token/
    method: GET
- name: configs
  endpoint:
    path: /configs
    method: POST
- name: configs
  endpoint:
    path: /configs/config
    method: GET
- name: configs
  endpoint:
    path: /configs/config
    method: POST
- name: configs
  endpoint:
    path: /v3/configs/config
    method: DELETE
- name: configs_inherits
  endpoint:
    path: /v3/configs/config/inherits
    method: POST
- name: config_logs
  endpoint:
    path: /configs/config/logs
    method: GET
- name: config_logs
  endpoint:
    path: /configs/config/logs/log
    method: GET
- name: configs
  endpoint:
    path: /configs
    method: GET
- name: service_tokens
  endpoint:
    path: /service_tokens
    method: GET
- name: trusted_ips
  endpoint:
    path: /v3/configs/config/trusted_ips
    method: GET
- name: trusted_ips
  endpoint:
    path: /configs/config/trusted_ips
    method: POST
- name: trusted_ips
  endpoint:
    path: /configs/config/trusted_ips
    method: DELETE
- name: configs
  endpoint:
    path: /configs
    method: GET
    data_selector: records
- name: secrets
  endpoint:
    path: /configs/config/secret
    method: GET
    data_selector: records
- name: configs
  endpoint:
    path: /configs
    method: GET
    data_selector: records
- name: secrets
  endpoint:
    path: /configs/config/secret
    method: GET
    data_selector: records
- name: configs
  endpoint:
    path: /v3/configs/config/secrets
    method: GET
- name: configs
  endpoint:
    path: /configs
    method: GET
- name: secrets
  endpoint:
    path: /configs/config/secrets
    method: GET
- name: Workplace Users
  endpoint:
    path: /v3/workplace/users
    method: GET
- name: Workplace Roles
  endpoint:
    path: /v3/workplace/roles
    method: GET
- name: Projects
  endpoint:
    path: /v3/projects
    method: GET
- name: Project Members
  endpoint:
    path: /v3/projects/members
    method: GET
- name: Configs
  endpoint:
    path: /v3/configs
    method: GET
- name: Secrets
  endpoint:
    path: /v3/configs/config/secrets
    method: GET
- name: workplace_users
  endpoint:
    path: /v3/workplace/users
    method: GET
- name: workplace_roles
  endpoint:
    path: /v3/workplace/roles
    method: GET
- name: projects
  endpoint:
    path: /v3/projects
    method: GET
- name: service_accounts
  endpoint:
    path: /v3/service-accounts
    method: GET
- name: change_request_policy
  endpoint:
    path: /workplace/change_request_policies/change_request_policy/{slug}
    method: GET
- name: webhook
  endpoint:
    path: /v3/webhooks/webhook/
    method: PATCH
    data_selector: null
    params: {}
- name: aws_secrets_manager
  endpoint:
    path: /v3/integrations
    method: POST
    data_selector: api_key
    params: {}
- name: aws_parameter_store
  endpoint:
    path: /v3/integrations
    method: POST
    data_selector: api_key
    params: {}
- name: azure_vault_service_principal
  endpoint:
    path: /v3/integrations
    method: POST
    data_selector: api_key
    params: {}
- name: circleci
  endpoint:
    path: /v3/integrations
    method: POST
    data_selector: api_key
    params: {}
- name: flyio
  endpoint:
    path: /v3/integrations
    method: POST
    data_selector: api_key
    params: {}
- name: gcp_secret_manager
  endpoint:
    path: /v3/integrations
    method: POST
    data_selector: api_key
    params: {}
- name: Workplace Users
  endpoint:
    path: /Workplace Users
    method: GET
- name: Workplace Roles
  endpoint:
    path: /Workplace Roles
    method: GET
- name: Projects
  endpoint:
    path: /Projects
    method: GET
- name: Project Members
  endpoint:
    path: /Project Members
    method: GET
- name: Environments
  endpoint:
    path: /Environments
    method: GET
- name: Configs
  endpoint:
    path: /Configs
    method: GET
- name: Secrets
  endpoint:
    path: /Secrets
    method: GET
- name: Service Accounts
  endpoint:
    path: /Service Accounts
    method: GET
- name: Webhooks
  endpoint:
    path: /Webhooks
    method: GET
- name: Change Request Policies
  endpoint:
    path: /Change Request Policies
    method: GET
- name: integration_options
  endpoint:
    path: /integrations/integration/options
    method: GET
- name: service_account_token
  endpoint:
    path: /workplace/service_accounts/service_account/{service_account}/tokens/token/{api_token}
    method: DELETE
- name: integrations
  endpoint:
    path: /integrations/integration
    method: DELETE
- name: secret
  endpoint:
    path: /aws/secret
    method: POST
- name: configs
  endpoint:
    path: /configs/config/syncs/sync
    method: GET
- name: configs
  endpoint:
    path: /configs/config/syncs/sync
    method: DELETE
- name: leases
  endpoint:
    path: /v3/configs/config/dynamic_secrets/dynamic_secret/leases/lease
    method: DELETE
- name: Workplace Users
  endpoint:
    path: /workplace/users
    method: GET
- name: Workplace Roles
  endpoint:
    path: /workplace/roles
    method: GET
- name: Projects
  endpoint:
    path: /projects
    method: GET
- name: Project Members
  endpoint:
    path: /project/members
    method: GET
- name: Secrets
  endpoint:
    path: /secrets
    method: GET
- name: Workplace Users
  endpoint:
    path: /workplace/users
    method: GET
- name: Workplace Roles
  endpoint:
    path: /workplace/roles
    method: GET
- name: Activity Logs
  endpoint:
    path: /activity/logs
    method: GET
- name: Projects
  endpoint:
    path: /projects
    method: GET
- name: Environments
  endpoint:
    path: /environments
    method: GET
- name: Service Tokens
  endpoint:
    path: /service-tokens
    method: GET
- name: configs
  endpoint:
    path: /configs
    method: GET
    data_selector: records
- name: service_tokens
  endpoint:
    path: /service_tokens
    method: GET
    data_selector: records
- name: workplace_invites
  endpoint:
    path: /workplace/invites
    method: GET
- name: workplace_groups
  endpoint:
    path: /workplace/groups
    method: GET
- name: workplace_users
  endpoint:
    path: /workplace/users
    method: GET
- name: workplace_roles
  endpoint:
    path: /workplace/roles
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: project_members
  endpoint:
    path: /project/members
    method: GET
- name: configs
  endpoint:
    path: /configs
    method: GET
- name: service_accounts
  endpoint:
    path: /service_accounts
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: groups
  endpoint:
    path: /workplace/groups/group/
    method: GET
- name: group
  endpoint:
    path: /workplace/groups/group/
    method: PATCH
- name: group_members
  endpoint:
    path: /v3/workplace/groups/group//members
    method: POST
- name: group_members
  endpoint:
    path: /workplace/groups/group//members//
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: webhook
  endpoint:
    path: /webhooks/webhook/{slug}
    method: GET
- name: webhook
  endpoint:
    path: /v3/webhooks
    method: GET
- name: webhook
  endpoint:
    path: /webhooks/webhook/{slug}
    method: GET
- name: webhooks
  endpoint:
    path: /v3/webhooks/webhook/{slug}/enable
    method: POST
- name: webhook
  endpoint:
    path: /webhooks/{slug}
    method: GET
- name: Workplace Users
  endpoint:
    path: /v3/workplace/users
    method: GET
- name: Workplace Roles
  endpoint:
    path: /v3/workplace/roles
    method: GET
- name: Projects
  endpoint:
    path: /v3/projects
    method: GET
- name: Project Members
  endpoint:
    path: /v3/project/members
    method: GET
- name: Configs
  endpoint:
    path: /v3/configs
    method: GET
- name: Service Accounts
  endpoint:
    path: /v3/service-accounts
    method: GET
- name: Webhooks
  endpoint:
    path: /v3/webhooks
    method: GET
- name: me
  endpoint:
    path: /me
    method: GET
    data_selector: response
    params: {}
- name: share_secrets
  endpoint:
    path: /v1/share/secrets/plain
    method: POST
    data_selector: response
- name: secrets
  endpoint:
    path: /share/secrets/encrypted
    method: POST
- name: workplace_users
  endpoint:
    path: /workplace/users
    method: GET
    data_selector: records
- name: parameters
  endpoint:
    path: /parameters
    method: GET
    data_selector: Parameters
- name: secrets
  endpoint:
    path: /v3/configs/config/secrets/download
    method: GET
    data_selector: secrets
    params:
      format: json
- name: Repo
  endpoint:
    path: /config
    method: GET
    data_selector: database
    params: {}
- name: project
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params: {}
- name: environment
  endpoint:
    path: /environments
    method: POST
    data_selector: environment
    params: {}
- name: repository_variables
  endpoint:
    path: /2.0/repositories/{workspace}/{repo_slug}/pipelines_config/variables/
    method: GET
- name: deployment_variables
  endpoint:
    path: /2.0/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables
    method: GET
- name: secrets
  endpoint:
    path: /secrets
    method: POST
    data_selector: secrets
    params: {}
- name: GitHub Secrets
  endpoint:
    path: /secrets
    method: GET
- name: Doppler Service Token
  endpoint:
    path: /service/token
    method: POST
    data_selector: token
    params: {}
- name: ecs-secrets-tutorial
  endpoint:
    executionRoleArn: arn:aws:iam::aws_account_id:role/ecsTaskExecutionRole
- name: integration
  endpoint:
    path: /integrations
    method: POST
    data_selector: integration
    params: {}
- name: serverless
  endpoint:
    path: /serverless/deploy
    method: POST
    data_selector: environment
    params: {}
- name: doppler_project
  endpoint:
    path: /doppler_project
    method: GET
- name: doppler_secret
  endpoint:
    path: /doppler_secret
    method: POST
- name: doppler_user
  endpoint:
    path: /doppler_user
    method: GET
- name: doppler_group
  endpoint:
    path: /doppler_group
    method: GET
- name: doppler_service_token
  endpoint:
    path: /doppler_service_token
    method: POST
- name: Kubernetes Secrets Import
  endpoint:
    path: /secrets/import
    method: POST
    data_selector: data
    params: {}
- name: dopplersecret-test
  endpoint:
    path: /api/v1alpha1/dopplersecret-test
    method: POST
    data_selector: spec
- name: doppler-test-deployment-envfrom
  endpoint:
    path: /api/v1/namespaces/default/secrets/doppler-test-secret
    method: GET
- name: doppler-test-deployment-valuefrom
  endpoint:
    path: /api/v1/namespaces/default/secrets/doppler-test-secret
    method: GET
- name: doppler-test-deployment-volume
  endpoint:
    path: /api/v1/namespaces/default/secrets/doppler-test-secret
    method: GET
- name: DopplerSecret
  endpoint:
    path: /doppler-secrets
    method: POST
    data_selector: secrets
    params: {}
- name: Pod
  endpoint:
    path: /pods
    method: POST
    data_selector: pods
    params: {}
- name: DopplerSecret
  endpoint:
    path: /doppler-operator-system
    method: POST
    data_selector: resources
    params: {}
- name: config_secrets
  endpoint:
    path: /config/secrets/
    method: GET
    params:
      include_dynamic_secrets: 'true'
- name: config_secrets_download
  endpoint:
    path: /config/secrets/download
    method: GET
    params:
      include_dynamic_secrets: 'true'
- name: fetch
  endpoint:
    path: /api/v1beta1/ExternalSecret
    method: POST
    data_selector: data
    params: {}
- name: fetch all
  endpoint:
    path: /api/v1beta1/ExternalSecret
    method: POST
    data_selector: dataFrom
    params: {}
- name: filter
  endpoint:
    path: /api/v1beta1/ExternalSecret
    method: POST
    data_selector: dataFrom
    params: {}
- name: JSON secret
  endpoint:
    path: /api/v1beta1/ExternalSecret
    method: POST
    data_selector: dataFrom
    params: {}
- name: name transformer
  endpoint:
    path: /api/v1beta1/ExternalSecret
    method: POST
    data_selector: dataFrom
    params: {}
- name: download
  endpoint:
    path: /api/v1beta1/ExternalSecret
    method: POST
    data_selector: dataFrom
    params: {}
- name: webhook
  endpoint:
    path: /slack
    method: POST
    data_selector: payload
    params: {}
- name: Development
  endpoint: {}
- name: Staging
  endpoint: {}
- name: Production
  endpoint: {}
- name: Activity Logs
  endpoint:
    path: /services/data/vXX.X/sobjects/ActivityLog
    method: POST
    data_selector: logs
    params: {}
- name: Doppler Activity Logs
  endpoint:
    path: /services/collector/event
    method: POST
    data_selector: payload
- name: SAML Configuration
  endpoint:
    path: /login/sso/saml/metadata/$UUID
    method: GET
    data_selector: SAML Settings
    params: {}
- name: Doppler SSO
  endpoint:
    path: /login/sso/callback/$UUID
    method: GET
    data_selector: SSO Endpoint
    params: {}
- name: SAML Single Sign-On
  endpoint:
    path: /login/sso/saml/metadata/$UUID
    method: GET
- name: Assertion Consumer Service
  endpoint:
    path: /login/sso/callback/$UUID
    method: GET
- name: SAML Configuration
  endpoint:
    path: /sso/saml
    method: POST
    data_selector: samlSettings
    params: {}
- name: saml_provider
  endpoint:
    path: /Applications/Providers
    method: POST
    data_selector: provider
    params: {}
- name: saml_application
  endpoint:
    path: /Applications
    method: POST
    data_selector: application
    params: {}
- name: SAML Application
  endpoint:
    path: /saml-application
    method: POST
    data_selector: application_details
    params:
      application_start_url: https://dashboard.doppler.com
- name: SAML Single Sign-On
  endpoint:
    path: /login/sso/callback/$UUID
    method: POST
    data_selector: sso_response
- name: provisioning
  endpoint:
    path: /scim/v2/Provisioning
    method: POST
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    data_selector: totalResults
- name: SCIM
  endpoint:
    path: /login/sso/saml/metadata
    method: POST
- name: custom_roles
  endpoint:
    path: /api/custom_roles
    method: GET
    data_selector: roles
- name: project
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params: {}
- name: environment
  endpoint:
    path: /environments
    method: GET
    data_selector: environments
    params: {}
- name: SCIM Provisioning
  endpoint:
    path: /scim/v2
    method: POST
- name: User Management
  endpoint:
    path: /user_management
    method: GET
- name: Group Management
  endpoint:
    path: /group_management
    method: GET
- name: webhook
  endpoint:
    path: /webhooks/doppler
    method: POST
- name: dev_personal
  endpoint:
    path: /configs/dev_personal
    method: GET
- name: dev_stripe_billing
  endpoint:
    path: /configs/dev_stripe_billing
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: outbound_ips
  endpoint:
    path: /_/outbound-ips
    method: GET
notes:
- CLI token is highly privileged and has all permissions your Doppler user has
- Run 'doppler-scope reset' when done to unset the DOPPLER_TOKEN environment variable
- For local development, access to a project's secrets is scoped to a specific directory.
- Best to remove all application code relying on .env files for security.
- Uses API key for authentication
- The first `doppler login` sets an access token for a particular workplace
- All commands run from any directory will use the configuration with the `/` scope
- When using the `doppler run` command, the CLI automatically creates a fallback file
  containing an encrypted snapshot of the current secrets in JSON format to Doppler's
  system configuration directory.
- You can specify the fallback file location manually.
- By default, a secret fallback file can only be decrypted when using the same Doppler
  token that was used when it was generated.
- If your application is running in an environment with read-only file permissions,
  you can instruct the Doppler CLI to only read from an existing fallback file and
  never write a new one.
- You can instruct the CLI to only read from the fallback file.
- If encountering trouble involving functions.config().doppler being undefined, consider
  downgrading to firebase-tools version 9.19.0 or change application initialization.
- Requires an upgraded subscription. This feature is exclusive to our Enterprise Plan.
- The managing user should be a new database user and not a user already in use.
- Each IAM user may have up to two pairs of access keys at any time.
- It is highly recommended to provide a path for resource filtering.
- Uses OAuth2 with Bearer token
- Click 'Try It!' to start a request and see the response.
- Uses OAuth2 with Bearer token.
- OAuth2 Bearer token required for authentication
- Uses OAuth2 Bearer token for authentication
- OAuth2 Bearer Token required
- Uses OAuth2 with bearer token.
- Uses OAuth2 with bearer token
- OAuth2 Bearer token is used for authentication.
- This endpoint is not end-to-end encrypted as you are sending the secret in plain
  text.
- At no point do we store the plain text secret or the password in our systems.
- This is a read-only API and can only be used with an 'Audit API Token'.
- Only workplace owners are allowed to manage audit tokens.
- Rotating secrets regularly is one of the most effective ways to reduce risk, yet
  many teams put it off due to complexity or fear of breaking something.
- Doppler helps automate rotation safely and reliably using API-based and proxied
  models, depending on your infrastructure.
- Role based access requires an upgraded subscription
- SAML SSO and SCIM require an upgraded subscription
- Due to limitations with Slack, secrets shared through our Slack app will be encrypted
  on our servers. Unencrypted data is never stored in our systems.
- Requires setup of IAM role and policy in AWS
- The AWS Secrets Manager integration doesn't currently support importing secrets
- Secrets in Doppler work very similarly to how they would on any other platform,
  with a few exceptions.
- 'Secret names must adhere to a specific format: may only contain uppercase letters,
  numbers, and underscores.'
- AWS Parameter Store requires that all parameters have a value, so any secrets with
  an empty string value will not be synced over.
- Security measure by removing the Service Token value from bash history
- Service accounts requires an upgraded subscription.
- Service accounts is available with our Team and Enterprise plans.
- Requires an upgraded subscription
- Identities allow a service account to authenticate to Doppler via OIDC without using
  a static API token
- Avoid storing secrets unencrypted whenever possible
- To disable reading configuration from the environment, specify the `--no-read-env`
  flag.
- Doppler project and/or config not configured, using dlv without doppler...
- Uses Doppler CLI to sync secrets for development environment
- Watching a config for changes requires an upgraded subscription
- When multiple instances of the CLI are watching the same Doppler config, they will
  all receive the latest secrets at roughly the same time.
- If you are on a computer connected to a Google WiFi router, you may run into an
  edge case where any network request times out.
- If the Shell Script install command is failing silently, you can enable debug output
  which may enable you to self-diagnose the issue.
- Use DOPPLER_TOKEN environment variable to provide access.
- In restrictive environments where the use of the Doppler CLI isn't possible, set
  a DOPPLER_TOKEN environment variable with a Service Token to fetch secrets directly
  from the Doppler API.
- This file is auto-generated by Doppler ({{.DOPPLER_PROJECT}} > {{ .DOPPLER_CONFIG
  }})
- DOPPLER_ACCESS_TOKEN is required for authentication.
- Doppler recommends authenticating with the Doppler registered app unless your organization
  requires authenticating via a custom service principal.
- Azure Key Vault does not support underscores and will replace them with dashes/hyphens.
- The env field is required for scripts using the Doppler CLI as secret variables
  must be explicitly mapped to environment variables.
- The GCP Secret Manager integration doesn't currently support importing secrets.
- Doppler is committed to transparency.
- Requires an upgraded subscription. This feature is available with our Team and Enterprise
  plans.
- You can also use Workspace or Repository access tokens if you'd prefer.
- CircleCI currently doesn't accept secrets with empty secret values.
- Only projects you are currently Following in CircleCI will show up in the Project
  selection dropdown.
- Doppler cannot import existing secrets or sync changes to secrets made in GitHub
  as the secret values are hidden.
- Terraform Cloud only allows you to have one active organization API token at a time,
  so to get one you'll have to regenerate the token, which will invalidate the previous
  one.
- Uses a single DOPPLER_TOKEN variable to fetch secrets during each job run
- Group and Project access tokens require a Premium or Ultimate plan on GitLab.
- Using a Personal access token ties the token to a specific user account.
- Create a Service Token for the GitLab environment to provide the Doppler CLI with
  read-only secrets access.
- You have now successfully connected your Harness account with Doppler
- 'Empty Secret Values: Heroku currently doesn''t allow environment variables with
  no value set for CI and Preview applications.'
- Doppler will not overwrite secrets from installed Heroku Addons.
- The best way to do this is from inside a GitPod workspace.
- Railway project-specific tokens will not work! Those tokens are primarily for their
  CLI, use their legacy API and don't yet work with their new API.
- 'Vercel has three environments: Development, Preview (Staging), and Production.'
- Separate Vercel integration is required for each environment.
- Reserved environment variables cannot be used in configs synced to Vercel.
- You need to import your Lambda environment variables to Doppler before continuing.
- The command aws lambda update-function-configuration is used to sync all secrets
  in a single command.
- The easiest way to use Doppler with Cron is to use the Doppler CLI to configure
  a predefined service token.
- The $DOPPLER_TOKEN environment variable should be injected by your platform or deployment
  process.
- Accessing your secrets in production or CI/CD environments requires a Service Token
  to provide read-only access to a specific Config within a Project.
- Accessing your secrets in production or CI/CD environments requires a Service Token
  to provide read-only access to a specific config.
- Docker does not support multi-line secrets when using the --env-file option so Doppler's
  --format docker flag flattens multi-line secrets by escaping newlines.
- Use DOPPLER_TOKEN environment variable for accessing secrets in Jenkins
- 'Use Persistent Storage: The fallback file should always be saved on persistent
  storage to avoid scenarios where a deployment or restart may occur resulting in
  the file being lost.'
- Hitting Rate Limits? Fallback files also offer protection against exceeding Doppler
  API’s 240 requests/minute rate limit which can occur when using images on Serverless
  infrastructure such as AWS Lambda and CloudRun. We recommend setting the --fallback-only
  flag on the doppler run command in the ENTRYPOINT under those scenarios.
- Using GCP Secret Manager to provide secrets for Cloud Build is the most secure storage
  and access mechanism for the Doppler Service Token.
- Ensure the latest version of the CLI is installed
- Removing the Service Token value from bash history
- Doppler CLI must be installed in Docker containers for access to environment variables.
- Requires setup of Vapor API Token in CI/CD environment
- Requires setup of Doppler Service Token in CI/CD environment
- Doppler provider doesn't support rename actions.
- Doppler does not recommend or endorse loading all secrets into your shell environment
  like this.
- The above solution isn't guaranteed to work with all secret values.
- Direnv may fail with some multi-line secrets.
- Direnv seems to have issues with secrets that contain `?`, `*`, and `.
- Other characters like `$` and `#` could potentially cause problems in some scenarios.
- A successful run log should produce output similar to the following
- Simplify secrets management for Kubernetes hosted applications using Doppler
- The operator checks for changes every 60 seconds.
- The secrets.doppler.com/reload annotation on the deployment causes it to auto-restart
  when the Doppler operator detects a secret change (this check is done based on polling
  that's done every 60 seconds).
- Tokens for AWS ECR expire after 12 hours and need to be updated regularly.
- Accessing your secrets in CI/CD environment using the Doppler CLI requires a Service
  Token to provide read-only access to a specific config via the DOPPLER_TOKEN environment
  variable.
- Doppler supports rotating secrets for each GCP Cloud SQL database - MySQL, Postgres,
  and SQL Server.
- Doppler utilizes the Cloud SQL Admin API to facilitate rotation.
- Doppler supports rotating GCP Service Accounts keys.
- GCP supports up to ten active key pairs for a service account, though Doppler requires
  that no more than eight key pairs exist.
- Doppler uses a custom, one-off slug as a second verification parameter.
- The operator will continue to attempt to reconnect to the Doppler API indefinitely.
- You can safely modify your token Kubernetes secret or DopplerSecret at any time.
- Making your product rotation-friendly is a great way to demonstrate your security-first
  mindset.
- Helping your customers stay secure is a simple investment in your own operational
  stability.
- This feature is exclusive to our Enterprise Plan.
- After setting up the connection all subsequent actions you take in Doppler will
  be forwarded to Datadog.
- Dynamic secrets are required to have a TTL.
- The default TTL is 30 minutes.
- Doppler Service Tokens are recommended as they restrict access to a single config.
- Doppler Service Account Tokens require project and config to be set.
- Accessing your secrets in a production or CI/CD environment using the Doppler CLI
  requires a Service Token to provide read-only access to a specific config via the
  DOPPLER_TOKEN environment variable.
- Requires an upgraded subscription for Team and Enterprise plans
- Proactively rotating secrets is necessary to maintain a strong security posture
  and mitigate risk
- Doppler has developed a set of rotation capabilities that help with rotating secrets
  automatically or manually
- Requires an upgraded subscription - exclusive to our Enterprise Plan.
- The managing user should be a new database user and must be able to update the passwords
  for each MySQL user instance.
- Doppler provides the ability to rotate between two Cloudflare tokens, affording
  a zero-downtime rotation experience
- The managing user key should only live in Doppler
- A key should be created solely for the purpose of secret rotation - it should be
  used and stored nowhere else.
- Use Discord's Slack-compatible webhook with /slack added to the end of the URL
- Deleting your GCP KMS key will terminate secret access. This is not reversible.
- Doppler supports GCP KMS keys that are rotated.
- Dynamic secrets allow for improved auditability and security of secrets.
- Each time you lease an IAM user, a new IAM user is created with properties returned.
- Doppler assumes Environments are all logically related to a single application or
  service.
- Creating one project per team is an anti-pattern due to the 15 environment limit
  per project.
- Environment name and slug cannot begin or end with an underscore or dash.
- Requires an upgraded subscription - exclusive to Enterprise Plan.
- Unique URL must be provided in Doppler settings.
- As a guideline for our community, we expect most users to fall within the limits
  for each plan.
- Our goal is to be as permissive as possible while not allowing an unreasonable burden
  on our infrastructure.
- If you have a special use case that requires higher limits, please reach out to
  our support team.
- Requires an upgraded subscription - available with Team and Enterprise plans.
- Access permissions to create an Incoming WebHook for your Slack workspace.
- Doppler Team plan required.
- Requires an upgraded subscription to the Enterprise Plan
- Ensure your URL ends with /services/collector/event
- Deleting your key will terminate secret access. If you delete your AWS KMS key,
  your secrets will become inaccessible. This is not reversible.
- The URL being used to send logs to must be HTTPS.
- Only one Generic HTTPS logging integration can be configured currently.
- Doppler optimistically marks the secret as accessed as soon as the payload is returned,
  whether it reaches the actor or not.
- Secrets with blank values are not tracked.
- Requires an upgraded subscription. This feature is exclusive to our Enterprise Plan.
  Book a demo to see it in action.
- EKM is designed to allow customers to control the encryption key used as part of
  the tokenization process. While the encryption key is persisted in your cloud's
  secret manager, the sealed secrets data still resides on Doppler's infrastructure.
- Analytics dashboards are designed to provide you with insight into how your workplace
  is being used and help you ensure your workplace remains in a secure, robust condition.
- Test sign-in flow using incognito window
- Double-check that the Single sign in URL and Audience URI values match exactly what
  is displayed in the Doppler SAML section
- Ensure the Declare Redirect Endpoint checkbox is enabled
- Double-check that the IdP Entity ID, SP Entity ID, and ACS URL values match exactly
  what is displayed in the Doppler SAML section.
- One of the best ways of avoiding downtime caused by a Doppler outage is by removing
  Doppler from your application's critical path.
- Doppler automatically saves an encrypted fallback snapshot file whenever you use
  `doppler run`.
- Ensure to keep a window logged into your Doppler account during configuration.
- SAML SSO configuration requires having a domain associated with it.
- Ensure that the ACS URL and Entity ID values match.
- Workplace domain verified (Settings page).
- SAML SSO configuration requires having a domain associated with it because users
  login using their email address and the domain of that address is mapped back to
  your SAML SSO login.
- SAML SSO configuration requires having a domain associated with it because users
  login using their email address.
- Test sign-in flow using incognito window.
- User login requires verified domain
- Ensure URLs from Doppler SAML setup are used
- If the Doppler CLI exits with an error message containing `Client.Timeout exceeded
  while awaiting headers`, you're likely unable to resolve the IP address of `api.doppler.com`.
- Requires Azure role with permissions to create enterprise applications
- Provisioning updates at fixed intervals (40 minutes)
- Requires setup of JumpCloud SAML application for Doppler
- Test Connection button should turn green if configured correctly
- Enterprise Plan Required
- Suspend not supported. Users should be deleted from the Doppler application (not
  suspended) as we do not support the concept of a suspended user.
- Requires an upgraded subscription. This feature is standard on our Enterprise plan
  or can be added on to an existing Team plan.
- When assigning a group to a project, you have to choose a single access role for
  the group.
- You can't limit visibility of secrets for a single config on a project without limiting
  it for all configs.
- The Doppler permissions model combines all of a user's permissions together and
  uses the most permissive of all permission sets.
- Doppler enforces email-based MFA by default.
- If logged in via SSO, MFA features are disabled.
- Don't hard-code secrets in your template file, even if in a private repository.
- Ensure to roll the SCIM token if setting up for the first time.
- Config Inheritance allows you to share the secrets stored in one config with another
  config.
- Dynamic Secrets are not yet supported by Config Inheritance.
- SCIM is the ideal method for managing Doppler Groups as it automates the provisioning
  and membership mapping based on assignment rules configured in your IDP.
- We recommend keeping the default access level as Collaborator.
- Webhooks will generally be delivered once, though exactly once delivery is not guaranteed.
- Configuring the signing secret is highly encouraged when Authentication is set to
  None.
- Users need specific workplace and project permissions to create or modify policies.
- Trusted IPs require an upgraded subscription.
- Only workplace Admins can manage Trusted IPs.
- When a new config is created, it is configured with a default trusted IP range of
  0.0.0.0/0 which will admit traffic from the public internet.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Doppler employs HTTP Strict Transport Security (HSTS) with a max-age of 1 year with
  preloading enabled.
- Provide restricted secrets access to applications in live environments.
- Adheres to the principle of least privilege by ensuring an application only has
  access to a single config within a project for use in live environments.
- Don't use a CLI or Personal Token in live environments as it provides write access
  with the same permissions as the account it was created by.
- All secrets are generated using the SubtleCrypto interface of the Web Crypto API.
- These key pairs are generated in-browser using SubtleCrypto.
- The login command will generate a new API key just for your machine, which can be
  revoked at any time.
- You need to opt-out of the 260 character MAX_PATH limit in Windows.
- To opt-out of that limit, the LongPathsEnabled registry entry needs to be enabled.
- This option does require some degree of familiarity with Linux since you're essentially
  opening a Linux shell.
- Doppler secrets are now accessed as standard environment variables, removing any
  trace of Doppler from your application code.
- Removing the Doppler client and Node.js CLI packages mean application builds will
  begin failing if any of these packages are still a dependency.
- Always take AI responses with a grain of salt.
- AI's have been known to hallucinate and can potentially provide bad information.
- Never provide sensitive information to the bot!
- Double-check with support if you're unsure of a response you got.
- JFrog has announced they will be sunsetting Bintray on May 1, 2021, after which
  the previous Doppler package installation commands will fail.
- We recommend upgrading to the new installation instructions as soon as possible
  as JFrog has indicated that there will likely be outages leading up to May 1st.
- 'Warning: This will delete all Doppler created secrets. Only perform this operation
  if you have successfully migrated your secrets back to Doppler.'
- Requires Curl & GnuPG.
- The fastest and easiest method of injecting Doppler secrets into your Serverless
  deployments is via environment variables using the `${env:SECRET_NAME}` syntax.
- Doppler Service Token provides read-only secrets access to a specific config within
  a project.
errors:
- 'cipher: message authentication failed'
- '429: Rate limit exceeded'
- '429 Too Many Requests: Rate limit exceeded'
- 'DOPPLER_CONFIG: The Doppler config to use.'
- 'DOPPLER_API_HOST: The host address of the Doppler API.'
- 'DOPPLER_ENABLE_DNS_RESOLVER: Whether to bypass the OS''s default DNS resolver.'
- 'DOPPLER_ENABLE_VERSION_CHECK: Whether to disable checking for new versions of the
  Doppler CLI.'
- 'RESOURCE_NOT_FOUND: The specified resource was not found.'
- 'UNAUTHORIZED: The provided token is invalid.'
- The Lambda agent timed out during execution. This can be caused by a network connection
  issue. Check your network configuration and verify that your Lambda can reach the
  database host.
- Double-check that the Application ACS URL and Application SAML audience values match.
- Check that your user attribute mappings are entered correctly.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - Access Token
  - Branch Config
  - Root Config
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  auth:
    location: header
    header_name: Authorization
    type: token
    token_url: https://login.api.com/services/oauth2/token
    secretRef:
      dopplerToken:
        name: doppler-token-auth-api
        key: dopplerToken
    flow: refresh_token
  base_url: https://api.doppler.com
  headers:
    Accept: application/json
    Content-Type: application/json
    DOPPLER_TOKEN: DOPPLER_TOKEN
    DOPPLER_ENV: '1'
    Encryption: Enabled
    Doppler-Workspace-ID: C03c9go8j
  paginator:
    type: cursor
  secrets:
  - valueFrom: arn:aws:secretsmanager:region:aws_account_id:secret:/doppler/backend/dev-Fz0eca
    name: DOPPLER_SECRETS
  image: public.ecr.aws/docker/library/httpd:2.4
  cpu: 10
  memory: 300
  essential: true
  name: ecs-secrets-container
source_metadata: null
