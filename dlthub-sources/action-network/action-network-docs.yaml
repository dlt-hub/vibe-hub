resources:
- name: embed
  endpoint:
    path: /events/{action_id}/embed
    method: GET
    data_selector: embed_standard_default_styles
- name: donation
  endpoint:
    path: /donations
    method: GET
    data_selector: _embedded.osdi:donations
    params: {}
- name: donations_by_fundraising_page
  endpoint:
    path: /fundraising_pages/[fundraising_page_id]/donations
    method: GET
    data_selector: _embedded.osdi:donations
    params: {}
- name: donations_by_person
  endpoint:
    path: /people/[person_id]/donations
    method: GET
    data_selector: _embedded.osdi:donations
    params: {}
- name: signatures_by_petition
  endpoint:
    path: /petitions/[petition_id]/signatures
    method: GET
    data_selector: _embedded.osdi:signatures
    params: {}
- name: signatures_by_person
  endpoint:
    path: /people/[person_id]/signatures
    method: GET
    data_selector: _embedded.osdi:signatures
    params: {}
- name: individual_signature
  endpoint:
    path: /petitions/[petition_id]/signatures/[signature_id]
    method: GET
    data_selector: identifiers
    params: {}
- name: create_signature
  endpoint:
    path: /petitions/[petition_id]/signatures/
    method: POST
    data_selector: identifiers
    params: {}
- name: modify_signature
  endpoint:
    path: /petitions/[petition_id]/signatures/[signature_id]
    method: PUT
    data_selector: identifiers
    params: {}
- name: tags
  endpoint:
    path: /api/v2/tags
    method: GET
    data_selector: _embedded.osdi:tags
- name: individual_tag
  endpoint:
    path: /api/v2/tags/[id]
    method: GET
    data_selector: identifiers
- name: create_tag
  endpoint:
    path: /api/v2/tags
    method: POST
    data_selector: identifiers
- name: donations
  endpoint:
    path: /donations
    method: GET
    data_selector: _embedded.osdi:donations
- name: individual_donation
  endpoint:
    path: /fundraising_page/[fundraising_page_id]/donations/[donation_id]
    method: GET
    data_selector: identifiers
- name: create_donation
  endpoint:
    path: /fundraising_page/[fundraising_page_id]/donations
    method: POST
    data_selector: identifiers
- name: modify_donation
  endpoint:
    path: /fundraising_page/[fundraising_page_id]/donations/[donation_id]
    method: PUT
    data_selector: identifiers
- name: delete_donation
  endpoint:
    path: /fundraising_page/[fundraising_page_id]/donations/[donation_id]
    method: DELETE
- name: fundraising_pages
  endpoint:
    path: /fundraising_pages
    method: GET
    data_selector: _embedded.osdi:fundraising_pages
    params: {}
- name: individual_fundraising_page
  endpoint:
    path: /fundraising_pages/[id]
    method: GET
    data_selector: identifiers
    params: {}
- name: letter_campaign
  endpoint:
    path: /v2/letter_campaigns
    method: GET
    data_selector: data
- name: event
  endpoint:
    path: /v2/events
    method: GET
    data_selector: data
- name: fundraiser
  endpoint:
    path: /v2/fundraisers
    method: GET
    data_selector: data
- name: queries
  endpoint:
    path: /queries
    method: GET
    data_selector: _embedded.osdi:queries
- name: individual_query
  endpoint:
    path: /queries/[id]
    method: GET
    data_selector: identifiers
- name: send_message
  endpoint:
    path: /messages/[message_id]/send
    method: POST
    data_selector: '{}'
    params: {}
- name: stop_message
  endpoint:
    path: /messages/[message_id]/send
    method: DELETE
    data_selector: '{}'
    params: {}
- name: items
  endpoint:
    path: /queries/[query_id]/items
    method: GET
    data_selector: _embedded.osdi:items
    params: {}
- name: individual_item
  endpoint:
    path: /queries/[query_id]/items/[item_id]
    method: GET
    data_selector: ''
    params: {}
- name: action
  endpoint:
    path: /actions
    method: POST
    data_selector: action_network:action
- name: people
  endpoint:
    path: /api/v2/people
    method: GET
- name: events
  endpoint:
    path: /api/v2/events
    method: GET
- name: petitions
  endpoint:
    path: /api/v2/petitions
    method: GET
- name: fundraising_pages
  endpoint:
    path: /api/v2/fundraising_pages
    method: GET
- name: donations
  endpoint:
    path: /api/v2/donations
    method: GET
- name: advocacy_campaigns
  endpoint:
    path: /api/v2/advocacy_campaigns
    method: GET
- name: metadata
  endpoint:
    path: /api/v2/metadata
    method: GET
- name: lists
  endpoint:
    path: /api/v2/lists
    method: GET
- name: forms
  endpoint:
    path: /api/v2/forms
    method: GET
- name: tags
  endpoint:
    path: /api/v2/tags
    method: GET
- name: event_campaigns
  endpoint:
    path: /api/v2/event_campaigns
    method: GET
- name: campaigns
  endpoint:
    path: /api/v2/campaigns
    method: GET
- name: surveys
  endpoint:
    path: /api/v2/surveys
    method: GET
- name: response
  endpoint:
    path: /api/v2/responses
    method: POST
    data_selector: action_network:response
- name: event_campaigns
  endpoint:
    path: /
    method: GET
    data_selector: _embedded.action_network:event_campaigns
    params: {}
- name: individual_event_campaign
  endpoint:
    path: /[id]
    method: GET
    data_selector: ''
    params: {}
- name: fundraising_pages
  endpoint:
    path: /fundraising_pages
    method: GET
    data_selector: _embedded.osdi:fundraising_pages
    params: {}
- name: attendance
  endpoint:
    path: /api/v2/attendances
    method: POST
    data_selector: osdi:attendance
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: _embedded.osdi:events
- name: individual_event
  endpoint:
    path: /events/[id]
    method: GET
    data_selector: ''
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
    data_selector: _embedded.action_network:campaigns
- name: individual_campaign
  endpoint:
    path: /campaigns/[id]
    method: GET
    data_selector: identifiers
- name: upload
  endpoint:
    path: /api/v2/uploads
    method: POST
    data_selector: action_network:upload
    params: {}
- name: person
  endpoint:
    path: /
    method: POST
    data_selector: person
    params: {}
- name: signatures
  endpoint:
    path: /petitions/[petition_id]/signatures
    method: GET
    data_selector: _embedded.osdi:signatures
    params: {}
- name: individual_signature
  endpoint:
    path: /petitions/[petition_id]/signatures/[signature_id]
    method: GET
    data_selector: identifiers
    params: {}
- name: record_signature_helper
  endpoint:
    path: /petitions/[petition_id]/signatures
    method: POST
    data_selector: records
- name: record_submission_helper
  endpoint:
    path: /api/v2/forms/[form_id]/submissions
    method: POST
    data_selector: submissions
- name: items
  endpoint:
    path: /lists/[list_id]/items
    method: GET
    data_selector: _embedded.osdi:items
    params: {}
- name: individual_item
  endpoint:
    path: /lists/[list_id]/items/[item_id]
    method: GET
    data_selector: self
    params: {}
- name: wrappers
  endpoint:
    path: /wrappers
    method: GET
    data_selector: _embedded.osdi:wrappers
- name: individual_wrapper
  endpoint:
    path: /wrappers/[id]
    method: GET
    data_selector: ''
- name: questions
  endpoint:
    path: /questions
    method: GET
    data_selector: _embedded.osdi:questions
    params: {}
- name: individual_question
  endpoint:
    path: /questions/[id]
    method: GET
    data_selector: ''
    params: {}
- name: oEmbed
  endpoint:
    path: /
    method: GET
    data_selector: none
    params:
      url: required
- name: queries
  endpoint:
    path: /queries
    method: GET
    data_selector: _embedded.osdi:queries
- name: individual_query
  endpoint:
    path: /queries/[id]
    method: GET
    data_selector: identifiers
- name: lists
  endpoint:
    path: /lists
    method: GET
    data_selector: _embedded.osdi:lists
    params: {}
- name: individual_list
  endpoint:
    path: /lists/[id]
    method: GET
    data_selector: identifiers
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: data
    params: {}
- name: actions
  endpoint:
    path: /actions
    method: GET
    data_selector: data
    params: {}
- name: email_campaigns
  endpoint:
    path: /emails
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: _embedded.osdi:messages
- name: individual_message
  endpoint:
    path: /messages/[id]
    method: GET
    data_selector: identifiers
- name: attendances
  endpoint:
    path: /events/[event_id]/attendances
    method: POST
    data_selector: identifiers
- name: event_campaign_attendances
  endpoint:
    path: /event_campaigns/[event_campaign_id]/events/[event_id]/attendances
    method: POST
    data_selector: identifiers
- name: submission
  endpoint:
    path: /api/v2/forms/{form_id}/submissions
    method: POST
    data_selector: osdi:submission
    params: {}
- name: taggings
  endpoint:
    path: /tags/[tag_id]/taggings
    method: GET
    data_selector: _embedded.osdi:taggings
- name: individual_tagging
  endpoint:
    path: /tags/[tag_id]/taggings/[tagging_id]
    method: GET
    data_selector: ''
- name: outreaches
  endpoint:
    path: /advocacy_campaigns/[advocacy_campaign_id]/outreaches
    method: GET
    data_selector: _embedded.osdi:outreaches
- name: individual_outreach
  endpoint:
    path: /advocacy_campaigns/[advocacy_campaign_id]/outreaches/[outreach_id]
    method: GET
    data_selector: ''
- name: create_outreach
  endpoint:
    path: /advocacy_campaigns/[advocacy_campaign_id]/outreaches
    method: POST
    data_selector: ''
- name: modify_outreach
  endpoint:
    path: /advocacy_campaigns/[advocacy_campaign_id]/outreaches/[outreach_id]
    method: PUT
    data_selector: ''
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook_event
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: records
- name: petitions
  endpoint:
    path: /petitions
    method: GET
    data_selector: _embedded.osdi:petitions
- name: individual_petition
  endpoint:
    path: /petitions/{id}
    method: GET
    data_selector: ''
- name: event_campaigns
  endpoint:
    path: /event_campaigns
    method: GET
    data_selector: _embedded.action_network:event_campaigns
- name: individual_event_campaign
  endpoint:
    path: /event_campaigns/[event_campaign_id]
    method: GET
    data_selector: ''
- name: create_event_campaign
  endpoint:
    path: /event_campaigns
    method: POST
    data_selector: ''
- name: create_event
  endpoint:
    path: /event_campaigns/[event_campaign_id]/events
    method: POST
    data_selector: ''
- name: attendance
  endpoint:
    path: /events/[event_id]/attendance
    method: GET
    data_selector: _embedded.osdi:attendance
    params: {}
- name: individual_attendance
  endpoint:
    path: /events/[event_id]/attendance/[attendance_id]
    method: GET
    data_selector: ''
    params: {}
- name: create_attendance
  endpoint:
    path: /events/[event_id]/attendance
    method: POST
    data_selector: ''
    params: {}
- name: modify_attendance
  endpoint:
    path: /events/[event_id]/attendance/[attendance_id]
    method: PUT
    data_selector: ''
    params: {}
- name: people
  endpoint:
    path: /people
    method: GET
    data_selector: _embedded.osdi:people
- name: advocacy_campaigns
  endpoint:
    path: /advocacy_campaigns
    method: GET
    data_selector: _embedded.osdi:advocacy_campaigns
- name: individual_advocacy_campaign
  endpoint:
    path: /advocacy_campaigns/{id}
    method: GET
    data_selector: ''
- name: record_donation_helper
  endpoint:
    path: /fundraising_pages/[fundraising_page_id]/donations
    method: POST
    data_selector: ''
    params: {}
- name: question_answers
  endpoint:
    path: /questions/[question_id]/question_answers
    method: GET
    data_selector: _embedded.osdi:question_answers
    params: {}
- name: individual_question_answer
  endpoint:
    path: /questions/[question_id]/question_answers/[question_answer_id]
    method: GET
    data_selector: ''
    params: {}
- name: create_question_answer
  endpoint:
    path: /questions/[question_id]/question_answers
    method: POST
    data_selector: ''
    params: {}
- name: modify_question_answer
  endpoint:
    path: /questions/[question_id]/question_answers/[question_answer_id]
    method: PUT
    data_selector: ''
    params: {}
- name: forms
  endpoint:
    path: /forms
    method: GET
    data_selector: _embedded.osdi:forms
- name: individual_form
  endpoint:
    path: /forms/[id]
    method: GET
    data_selector: ''
- name: create_form
  endpoint:
    path: /forms
    method: POST
    data_selector: ''
- name: modify_form
  endpoint:
    path: /forms/[id]
    method: PUT
    data_selector: ''
- name: delete_form
  endpoint:
    path: /forms/[id]
    method: DELETE
    data_selector: ''
- name: donation
  endpoint:
    path: /donations
    method: POST
    data_selector: osdi:donation
    params: {}
- name: schedule_message
  endpoint:
    path: /messages/[message_id]/schedule
    method: POST
    data_selector: message
    params:
      scheduled_start_date: datetime
- name: cancel_schedule_message
  endpoint:
    path: /messages/[message_id]/schedule
    method: DELETE
    data_selector: message
    params: {}
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
    data_selector: _embedded.action_network:campaigns
- name: individual_campaign
  endpoint:
    path: /campaigns/[id]
    method: GET
    data_selector: identifiers
- name: submissions
  endpoint:
    path: /forms/[form_id]/submissions
    method: GET
    data_selector: _embedded.osdi:submissions
- name: individual_submission
  endpoint:
    path: /forms/[form_id]/submissions/[submission_id]
    method: GET
    data_selector: identifiers
- name: create_submission
  endpoint:
    path: /forms/[form_id]/submissions/
    method: POST
    data_selector: identifiers
- name: modify_submission
  endpoint:
    path: /forms/[form_id]/submissions/[submission_id]
    method: PUT
    data_selector: identifiers
- name: surveys
  endpoint:
    path: /surveys
    method: GET
    data_selector: _embedded.action_network:surveys
- name: individual_survey
  endpoint:
    path: /surveys/[id]
    method: GET
    data_selector: identifiers
- name: petitions
  endpoint:
    path: /petitions
    method: GET
    data_selector: _embedded.osdi:petitions
- name: individual_petition
  endpoint:
    path: /petitions/[id]
    method: GET
    data_selector: ''
- name: unique_id_lists
  endpoint:
    path: /unique_id_lists
    method: GET
    data_selector: _embedded.action_network:unique_id_lists
    params: {}
- name: individual_unique_id_list
  endpoint:
    path: /unique_id_lists/[id]
    method: GET
    data_selector: identifiers
    params: {}
- name: create_unique_id_list
  endpoint:
    path: /unique_id_lists
    method: POST
    data_selector: origin_system
    params: {}
- name: modify_unique_id_list
  endpoint:
    path: /unique_id_lists/[id]
    method: PUT
    data_selector: origin_system
    params: {}
- name: delete_unique_id_list
  endpoint:
    path: /unique_id_lists/[id]
    method: DELETE
    data_selector: notice
    params: {}
- name: embed_code
  endpoint:
    path: /oembed/
    method: GET
    data_selector: oembed
- name: signature
  endpoint:
    path: /api/v2/signatures
    method: POST
    data_selector: osdi:signature
- name: outreach
  endpoint:
    path: /api/v2/outreaches
    method: POST
    data_selector: osdi:outreach
    params: {}
- name: people
  endpoint:
    path: /people
    method: GET
    data_selector: _embedded.osdi:people
    params: {}
- name: individual_person
  endpoint:
    path: /people/[id]
    method: GET
    data_selector: identifiers
    params: {}
- name: embed
  endpoint:
    path: /events/{action_id}/embed
    method: GET
    data_selector: embed_with_styles
- name: people
  endpoint:
    path: /people
    method: GET
    data_selector: _embedded.osdi:people
- name: petitions
  endpoint:
    path: /petitions
    method: GET
    data_selector: _embedded.osdi:petitions
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: _embedded.osdi:events
- name: fundraising_pages
  endpoint:
    path: /fundraising_pages
    method: GET
    data_selector: _embedded.osdi:fundraising_pages
- name: donations
  endpoint:
    path: /donations
    method: GET
    data_selector: _embedded.osdi:donations
- name: custom_fields
  endpoint:
    path: /metadata/custom_fields
    method: GET
    data_selector: action_network:custom_fields
    params: {}
- name: record_response_helper
  endpoint:
    path: /surveys/[survey_id]/responses
    method: POST
    data_selector: responses
- name: responses
  endpoint:
    path: /surveys/[survey_id]/responses
    method: GET
    data_selector: _embedded.action_network:responses
    params: {}
- name: individual_response
  endpoint:
    path: /surveys/[survey_id]/responses/[response_id]
    method: GET
    data_selector: ''
    params: {}
- name: attendances
  endpoint:
    path: /events/[event_id]/attendances
    method: GET
    data_selector: _embedded.osdi:attendances
- name: individual_attendance
  endpoint:
    path: /events/[event_id]/attendances/[attendance_id]
    method: GET
    data_selector: identifiers
- name: create_attendance
  endpoint:
    path: /events/[event_id]/attendances
    method: POST
    data_selector: identifiers
- name: modify_attendance
  endpoint:
    path: /events/[event_id]/attendances/[attendance_id]
    method: PUT
    data_selector: identifiers
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: _embedded.osdi:events
- name: individual_event
  endpoint:
    path: /events/[id]
    method: GET
    data_selector: ''
- name: submissions
  endpoint:
    path: /forms/[form_id]/submissions
    method: GET
    data_selector: _embedded.osdi:submissions
- name: individual_submission
  endpoint:
    path: /forms/[form_id]/submissions/[submission_id]
    method: GET
    data_selector: ''
- name: outreach
  endpoint:
    path: /advocacy_campaigns/[advocacy_campaign_id]/outreaches
    method: POST
    data_selector: null
    params: {}
- name: forms
  endpoint:
    path: /forms
    method: GET
    data_selector: _embedded.osdi:forms
- name: individual_form
  endpoint:
    path: /forms/{id}
    method: GET
    data_selector: ''
notes:
- Embeds are read-only and only available for actions created with our user interface.
- Donations are not deduplicated by person.
- You may only post donations to fundraising pages that have been created via the
  API.
- Signatures are deduplicated based on person, so a specific person can only sign
  a given petition once.
- POSTing signatures will not send autoresponses.
- Deleting signatures is not allowed via the API.
- Donations are not deduplicated based on person, unlike other similar resources.
- This API is now depreciated and will not receive updates or bug fixes.
- Event campaign reports now include event end times.
- You can now add address and city fields to actions that don’t have them already.
- Queries are read only.
- Posting, putting, and deleting queries is not allowed.
- Items are read only.
- Posting, putting, and deleting items is not allowed.
- Posting, putting, and deleting on the AEP is not allowed.
- Responses represent the action an activist took when they filled out and signed
  a specific survey on Action Network.
- Event campaigns are read-only and can only be created and manipulated by groups,
  so they will not appear using an individual API key.
- Posting, putting, and deleting event campaigns is not allowed. Attempts will result
  in errors.
- Fundraising pages created via the API are not equivalent to fundraising pages created
  with our user interface.
- Events created via the API are not equivalent to events created with the user interface.
- API-created events will not show up in lists of all actions on the dashboard.
- Campaigns are read-only and can only be created and manipulated by groups.
- Uploads represent the action an activist is recorded to have taken.
- The upload type is action_network:upload.
- People are matched and deduplicated by email address and phone number.
- A person must be added with an email address or a phone number, or both.
- Signatures are deduplicated based on person, so a specific person can only sign
  a petition once.
- Submissions are deduplicated based on person, so a specific person can only submit
  to a form once.
- You can POST to this helper without an API key.
- Items are read only and the items collection does not return the total_records or
  total_pages fields.
- Wrappers are read only.
- Posting, putting, and deleting wrappers is not allowed.
- Questions are deduplicated on name, so posting a question with the same name as
  another will merge the two resources.
- All oEmbed requests will return a 'rich' oEmbed type containing our embed code.
- Invalid requests will return 404 not found.
- Lists are read only.
- Posting, putting, and deleting lists is not allowed.
- Ensure that you have the correct API key for authentication
- Rate limits may apply based on your account type
- Messages are not deduplicated except on identifiers.
- POST requests are rate limited to once every 30 seconds.
- Attendances are deduplicated based on person, so a specific person can only RSVP
  to an event once.
- Posting will also subscribe the person to the email lists associated with the event.
- Submissions represent actions taken by activists when filling out forms.
- Taggings are deduplicated based on person.
- Modifying taggings is not allowed via the API.
- We do not knowingly collect Personal Information from children under age 13 (or
  under age 16 to the extent the GDPR is applicable).
- Outreaches are not deduplicated by person.
- You may only post outreaches to advocacy campaigns created via the API.
- Webhooks are not rate limited and delivered in close to real time.
- Receiving servers must acknowledge reception of the webhook within 500ms.
- Metadata is read only.
- Posting, putting, and deleting metadata is not allowed.
- Petitions created via the API are not equivalent to petitions created with the user
  interface.
- API-created petitions will not show up in lists of all actions on the dashboard.
- Event campaigns created via the API are not equivalent to event campaigns created
  with the user interface.
- Event campaigns created via the API will not show up in lists of all your actions
  on your dashboard.
- Attendance are deduplicated based on person, so a specific person can only RSVP
  to an event once.
- The people collection does not allow POST -- posting a new person directly to the
  people endpoint is not allowed.
- The people collection does not allow PUT -- modifying a person directly is not allowed.
- Keep your API key secret. Anyone with your API key will be able to access any data
  in your account.
- Advocacy campaigns created via the API are not equivalent to advocacy campaigns
  created with the user interface.
- Deleting advocacy campaigns is not allowed via the API.
- Donations are not deduplicated based on person.
- Webhooks are not rate limited and are delivered in close to real time.
- Receiving servers must return an HTTP 200 status code to acknowledge reception.
- This documentation describes Version 1 of our API, which is now deprecated.
- Question answers are deduplicated on person, so a person cannot have more than one
  answer to a question.
- Forms created via the API are not equivalent to forms created with the user interface.
- Deleting forms is not allowed via the API.
- Donations represent actions taken by activists when donating on fundraising pages.
- Campaigns are read-only and can only be created and manipulated by groups, so they
  will not appear using an individual API key.
- Posting, putting, and deleting campaigns is not allowed. Attempts will result in
  errors.
- Submissions are deduplicated based on person, so a specific person can only submit
  to a given form once.
- POSTing submissions will not send autoresponses.
- Surveys created via the API are not equivalent to surveys created with the user
  interface.
- This API is now deprecated. Version 2 is recommended.
- Some portions of the API are accessible without a key.
- Unique ID lists cannot add new people to your group or otherwise modify people data.
- You are responsible for ensuring that all phone numbers and other personal information
  provided to Action Squared have been collected in accordance with the TCPA, and
  if applicable, the GDPR, national implementations of the e-Privacy Directive.
- All oEmbed requests will return a 'rich' oEmbed type containing embed code.
- Only fields that were entered by the activist while taking action will be included
  in the payload.
- Outreaches represent the action an activist took when they filled out and sent a
  letter to a target of a letter campaign or called a target of a call campaign.
- The people collection does not return the total_records or total_pages fields.
- People are not ordered by newest modified_date first.
- Custom fields are read only.
- Posting, putting, and deleting custom fields is not allowed.
- If a person is posted without an email address, a record with only phone number
  will be created and vice versa.
- POSTing responses will not send autoresponses.
- POSTing attendances will not send autoresponses.
- Deleting attendances is not allowed via the API.
- This API is deprecated. Use Version 2 instead.
- Submissions are deduplicated based on person, so a specific person can only submit
  a given form once.
- Deleting submissions is not allowed via the API.
- Outreaches are not deduplicated based on person, so a specific person can make more
  than one outreach on an advocacy campaign.
- You may only post outreaches to advocacy campaign pages that have been created via
  the API.
- This documentation describes Version 1 of our API, which is now depreciated.
errors:
- Modifying or deleting donations is not allowed via the API.
- DELETE requests will return an error.
- Invalid entries will be ignored in PUT requests.
- 'DELETE not allowed: Deleting fundraising pages is not allowed via the API.'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Ensure the API key is valid and included.'
- '404 Not Found: Verify the endpoint and resource exist.'
- POST, PUT, DELETE attempts will result in errors.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API key or permissions'
- Invalid entries in PUT requests will be ignored.
- POST/PUT/DELETE attempts will result in errors.
- Missing required fields will cause the POST to fail.
- POST/PUT/DELETE requests will result in errors as these actions are not allowed.
- '200 OK: Successful request'
- '404 Not Found: Question does not exist'
- '404 not found: Invalid URLs will return this error.'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Verify API key'
- '404 Not Found: Resource not available'
- 'DELETE_NOT_ALLOWED: Deleting messages is not allowed via the API.'
- '400 Bad Request: Missing required field.'
- '404 Not Found: The specified event or event campaign does not exist.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '404 Not Found: Check your tag_id or tagging_id.'
- 'DELETE_NOT_ALLOWED: Deleting outreaches is not allowed via the API.'
- Any status code other than HTTP 200 will be treated as an error.
- Webhooks may not be delivered in the order events happened.
- DELETE requests will return an error as deleting petitions is not allowed.
- Invalid entries will be ignored during modification.
- Deleting event campaigns is not allowed.
- '404 Not Found: Resource not found'
- '400 Bad Request: Invalid request format'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Invalid API key.'
- '400 Bad Request: Missing required fields like email or phone number.'
- Longer response times than 500ms will be aborted and considered an error.
- Attempting to POST/PUT/DELETE campaigns will result in errors.
- '403 Forbidden: You do not have permission to access this resource.'
- '404 Not Found: The specified resource could not be found.'
- '400 Bad Request: Malformed request'
- '404 not found: Invalid requests will return this error.'
- If the email or phone number posted corresponds with a person already in the system,
  we update their record instead of creating a new person.
- Deleting responses is not allowed via the API.
- '404 Not Found: The requested resource could not be found.'
- '400 Bad Request: Invalid request format or parameters.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '404 Not Found: Check the form ID or submission ID'
auth_info:
  mentioned_objects:
  - User
  - APIKey
  - ActionNetworkAPI
client:
  base_url: https://actionnetwork.org/api/v1
  auth:
    type: apikey
    location: header
    header_name: api-key
  headers:
    OSDI-API-Token: your_api_key_here
    Content-Type: application/json
    api-key: '[your api key here]'
  paginator:
    type: page
    page_size_param: page_size
    default_page_size: 100
    cursor_path: next
    cursor_param: page
source_metadata: null
