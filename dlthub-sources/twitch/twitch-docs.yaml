resources:
- name: create_clip
  endpoint:
    path: /clips
    method: POST
    data_selector: data
    params:
      broadcaster_id: '123456'
- name: get_clips
  endpoint:
    path: /clips
    method: GET
    data_selector: data
    params: {}
- name: send_chat_message
  endpoint:
    path: /chat/messages
    method: POST
    data_selector: data
- name: send_chat_announcement
  endpoint:
    path: /chat/announcements
    method: POST
    data_selector: data
- name: create_eventsub_subscription
  endpoint:
    path: /eventsub/subscriptions
    method: POST
    data_selector: subscription
- name: extension_analytics
  endpoint:
    path: /extensions/analytics
    method: GET
    data_selector: data
    params: {}
- name: game_analytics
  endpoint:
    path: /games/analytics
    method: GET
    data_selector: data
    params: {}
- name: game_insights
  endpoint:
    path: /analytics/game_insights
    method: GET
    data_selector: data
    params:
      incremental: date
- name: users
  endpoint:
    path: /helix/users
    method: GET
    data_selector: data
    params:
      login: twitchdev
- name: add_moderator
  endpoint:
    path: /moderation/moderators
    method: POST
    params:
      broadcaster_id: ''
      user_id: ''
- name: remove_moderator
  endpoint:
    path: /moderation/moderators
    method: DELETE
    params:
      broadcaster_id: ''
      user_id: ''
- name: get_moderators
  endpoint:
    path: /moderation/moderators
    method: GET
    params:
      broadcaster_id: ''
- name: get_automod_settings
  endpoint:
    path: /moderation/automod/settings
    method: GET
    params:
      broadcaster_id: ''
      moderator_id: ''
- name: update_automod_settings
  endpoint:
    path: /moderation/automod/settings
    method: PUT
    params:
      broadcaster_id: ''
      moderator_id: ''
- name: check_automod_status
  endpoint:
    path: /moderation/enforcements/status
    method: POST
    params:
      broadcaster_id: ''
- name: add_blocked_term
  endpoint:
    path: /moderation/blocked_terms
    method: POST
    params:
      broadcaster_id: ''
      moderator_id: ''
- name: remove_blocked_term
  endpoint:
    path: /moderation/blocked_terms
    method: DELETE
    params:
      broadcaster_id: broadcaster_id
      moderator_id: moderator_id
      id: id
- name: get_blocked_terms
  endpoint:
    path: /moderation/blocked_terms
    method: GET
    params:
      broadcaster_id: broadcaster_id
      moderator_id: moderator_id
- name: manage_held_automod_messages
  endpoint:
    path: /moderation/automod/message
    method: POST
    params: {}
- name: ban_user
  endpoint:
    path: /moderation/bans
    method: POST
    params:
      broadcaster_id: broadcaster_id
      moderator_id: moderator_id
- name: unban_requests
  endpoint:
    path: /moderation/unban_requests
    method: GET
    params:
      status: pending
- name: banned_users
  endpoint:
    path: /moderation/bans
    method: GET
- name: delete_chat_messages
  endpoint:
    path: /moderation/chat
    method: DELETE
- name: update_shield_mode_status
  endpoint:
    path: /helix/moderation/bans
    method: POST
    data_selector: data
    params:
      broadcaster_id: '{{broadcaster_id}}'
      moderator_id: '{{moderator_id}}'
- name: get_shield_mode_status
  endpoint:
    path: /helix/moderation/shield_mode
    method: GET
    data_selector: data
    params:
      broadcaster_id: '{{broadcaster_id}}'
      moderator_id: '{{moderator_id}}'
- name: USERNOTICE
  endpoint:
    path: /usernotice
    method: GET
- name: USERSTATE
  endpoint:
    path: /userstate
    method: GET
- name: CLEARCHAT
  endpoint:
    path: /CLEARCHAT
    method: POST
    data_selector: CLEARCHAT
- name: CLEARMSG
  endpoint:
    path: /CLEARMSG
    method: POST
    data_selector: CLEARMSG
- name: GLOBALUSERSTATE
  endpoint:
    path: /GLOBALUSERSTATE
    method: GET
    data_selector: GLOBALUSERSTATE
- name: NOTICE
  endpoint:
    path: /NOTICE
    method: GET
    data_selector: NOTICE
- name: PRIVMSG
  endpoint:
    path: /PRIVMSG
    method: POST
    data_selector: PRIVMSG
- name: ROOMSTATE
  endpoint:
    path: /ROOMSTATE
    method: GET
    data_selector: ROOMSTATE
- name: USERNOTICE
  endpoint:
    path: /USERNOTICE
    method: POST
    data_selector: USERNOTICE
- name: USERSTATE
  endpoint:
    path: /USERSTATE
    method: GET
    data_selector: USERSTATE
- name: drops_campaign
  endpoint:
    path: /drops/campaign
    method: POST
- name: event_notification
  endpoint:
    path: /eventsub
    method: POST
    data_selector: notification
- name: eventsub_subscriptions
  endpoint:
    path: /helix/eventsub/subscriptions
    method: POST
    data_selector: data
    params: {}
- name: chat_messages
  endpoint:
    path: /helix/chat/messages
    method: POST
    data_selector: data
    params: {}
- name: user_message_hold
  endpoint:
    path: /channel/chat/user_message_hold
    method: POST
    data_selector: subscription
    params: {}
- name: user_message_update
  endpoint:
    path: /channel/chat/user_message_update
    method: POST
    data_selector: subscription
    params: {}
- name: subscribe
  endpoint:
    path: /channel/subscribe
    method: POST
    data_selector: subscription
    params: {}
- name: subscription_end
  endpoint:
    path: /channel/subscription/end
    method: POST
    data_selector: subscription
    params: {}
- name: subscription_gift
  endpoint:
    path: /channel/subscription/gift
    method: POST
    data_selector: subscription
    params: {}
- name: subscription_message
  endpoint:
    path: /channel/subscription/message
    method: POST
    data_selector: subscription
    params: {}
- name: cheer
  endpoint:
    path: /channel/cheer
    method: POST
    data_selector: subscription
    params: {}
- name: raid
  endpoint:
    path: /channel/raid
    method: POST
    data_selector: subscription
    params: {}
- name: ban
  endpoint:
    path: /channel/ban
    method: POST
    data_selector: subscription
    params: {}
- name: unban
  endpoint:
    path: /channel/unban
    method: POST
    data_selector: subscription
    params: {}
- name: automod.message.update
  endpoint:
    path: /automod/message/update
    method: POST
    data_selector: event
    params: {}
- name: automod.settings.update
  endpoint:
    path: /automod/settings/update
    method: POST
    data_selector: event
    params: {}
- name: automod.terms.update
  endpoint:
    path: /automod/terms/update
    method: POST
    data_selector: event
    params: {}
- name: channel.bits.use
  endpoint:
    path: /channel/bits/use
    method: POST
    data_selector: event
    params: {}
- name: channel.update
  endpoint:
    path: /channel/update
    method: POST
    data_selector: event
    params: {}
- name: channel.follow
  endpoint:
    path: /channel/follow
    method: POST
    data_selector: event
    params: {}
- name: channel.ad_break.begin
  endpoint:
    path: /channel/ad_break/begin
    method: POST
    data_selector: event
    params: {}
- name: channel.chat.clear
  endpoint:
    path: /channel/chat/clear
    method: POST
    data_selector: event
    params: {}
- name: channel_unban_request_create
  endpoint:
    path: /channel/unban_request/create
    method: POST
    data_selector: subscription
    params: {}
- name: channel_unban_request_resolve
  endpoint:
    path: /channel/unban_request/resolve
    method: POST
    data_selector: subscription
    params: {}
- name: channel_moderate
  endpoint:
    path: /channel/moderate
    method: POST
    data_selector: subscription
    params: {}
- name: automod.message.hold
  endpoint:
    path: /automod/message/hold
    method: POST
    data_selector: subscription
    params: {}
- name: automod.message.update
  endpoint:
    path: /automod/message/update
    method: POST
    data_selector: subscription
    params: {}
- name: user.authorization.grant
  endpoint:
    path: /user/authorization/grant
    method: POST
    data_selector: subscription
    params: {}
- name: user.authorization.revoke
  endpoint:
    path: /user/authorization/revoke
    method: POST
    data_selector: subscription
    params: {}
- name: user.update
  endpoint:
    path: /user/update
    method: POST
    data_selector: subscription
    params: {}
- name: user.whisper.message
  endpoint:
    path: /user/whisper/message
    method: POST
    data_selector: subscription
    params: {}
- name: channel_chat_clear_notification
  endpoint:
    path: /channel/chat/clear
    method: POST
    data_selector: subscription
- name: channel_chat_clear_user_messages
  endpoint:
    path: /channel/chat/clear_user_messages
    method: POST
    data_selector: subscription
- name: channel_chat_message
  endpoint:
    path: /channel/chat/message
    method: POST
    data_selector: subscription
- name: channel_chat_message_delete
  endpoint:
    path: /channel/chat/message_delete
    method: POST
    data_selector: subscription
- name: channel_chat_notification
  endpoint:
    path: /channel/chat/notification
    method: POST
    data_selector: subscription
- name: channel_chat_settings_update
  endpoint:
    path: /channel/chat/settings/update
    method: POST
    data_selector: subscription
- name: channel_chat_user_message_hold
  endpoint:
    path: /channel/chat/user_message_hold
    method: POST
    data_selector: subscription
- name: shared_chat_begin
  endpoint:
    path: /channel/shared_chat/begin
    method: POST
    data_selector: subscription
    params: {}
- name: shared_chat_update
  endpoint:
    path: /channel/shared_chat/update
    method: POST
    data_selector: subscription
    params: {}
- name: shared_chat_end
  endpoint:
    path: /channel/shared_chat/end
    method: POST
    data_selector: subscription
    params: {}
- name: channel.vip.add
  endpoint:
    path: /channel/vip/add
    method: POST
    data_selector: subscription
    params:
      broadcaster_user_id: '1337'
- name: channel.vip.remove
  endpoint:
    path: /channel/vip/remove
    method: POST
    data_selector: subscription
    params:
      broadcaster_user_id: '1337'
- name: channel.warning.acknowledge
  endpoint:
    path: /channel/warning/acknowledge
    method: POST
    data_selector: subscription
    params:
      broadcaster_user_id: '423374343'
      moderator_user_id: '424596340'
- name: channel.warning.send
  endpoint:
    path: /channel/warning/send
    method: POST
    data_selector: subscription
    params:
      broadcaster_user_id: '423374343'
      moderator_user_id: '424596340'
- name: channel.hype_train.begin
  endpoint:
    path: /channel/hype_train/begin
    method: POST
    data_selector: subscription
    params:
      broadcaster_user_id: '1337'
- name: channel.hype_train.progress
  endpoint:
    path: /channel/hype_train/progress
    method: POST
    data_selector: subscription
    params:
      broadcaster_user_id: '1337'
- name: channel.hype_train.end
  endpoint:
    path: /channel/hype_train/end
    method: POST
    data_selector: subscription
    params:
      broadcaster_user_id: '1337'
- name: channel.goal.begin
  endpoint:
    path: /goal/begin
    method: POST
    data_selector: subscription
    params: {}
- name: channel.shoutout.receive
  endpoint:
    path: /shoutout/receive
    method: POST
    data_selector: subscription
    params: {}
- name: conduit.shard.disabled
  endpoint:
    path: /shard/disabled
    method: POST
    data_selector: subscription
    params: {}
- name: drop.entitlement.grant
  endpoint:
    path: /drop/entitlement/grant
    method: POST
    data_selector: subscription
    params: {}
- name: extension.bits_transaction.create
  endpoint:
    path: /extension/bits_transaction/create
    method: POST
    data_selector: subscription
    params: {}
- name: Extensions Manager
  endpoint:
    path: /extensions/manager
    method: GET
    data_selector: extensions
    params: {}
- name: streams
  endpoint:
    path: /streams
    method: GET
    data_selector: data
    params:
      first: '100'
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: Panel Extension
  endpoint:
    path: index.html
    method: GET
- name: event_subscriptions
  endpoint:
    path: /eventsub/subscriptions
    method: GET
- name: event_trigger
  endpoint:
    path: /event/trigger
    method: POST
- name: users
  endpoint:
    path: /mock/users
    method: GET
    data_selector: data
    params: {}
- name: clients
  endpoint:
    path: /units/clients
    method: GET
    data_selector: data
    params: {}
- name: auth
  endpoint:
    path: /auth/authorize
    method: POST
    data_selector: data
    params: {}
- name: token
  endpoint:
    path: /auth/token
    method: POST
    data_selector: data
    params: {}
- name: warn_chat_user
  endpoint:
    path: /warn_chat_user
    method: POST
- name: channel_warning_acknowledge
  endpoint:
    path: /channel.warning.acknowledge
    method: POST
- name: channel_warning_send
  endpoint:
    path: /channel.warning.send
    method: POST
- name: channel_moderate_v2
  endpoint:
    path: /channel.moderate
    method: POST
    params:
      version: beta
- name: overview_reports
  endpoint:
    path: /reports/overview
    method: GET
    data_selector: data
    params: {}
- name: get_extension_analytics
  endpoint:
    path: /extensions/analytics
    method: GET
    data_selector: data
    params: {}
- name: get_game_analytics
  endpoint:
    path: /games/analytics
    method: GET
    data_selector: data
    params: {}
- name: Get Ingest Server
  endpoint:
    path: /ingest
    method: GET
- name: Get Stream Key
  endpoint:
    path: /stream/key
    method: GET
- name: creator_goals
  endpoint:
    path: /goals
    method: GET
    params:
      broadcaster_id: '141981764'
- name: deep_links
  endpoint:
    path: /twitch/deep_links
    method: GET
- name: panel_extension
  endpoint:
    path: /index.html
    method: GET
    data_selector: content
- name: hype_train_contribution
  endpoint:
    path: /hype_train/contributions
    method: GET
    data_selector: contributions
    params: {}
- name: bits_leaderboard
  endpoint:
    path: /GetBitsLeaderboard
    method: GET
- name: my_stream_info
  endpoint:
    path: /GetMyStreamInfo
    method: GET
- name: my_user_info
  endpoint:
    path: /GetMyUserInfo
    method: GET
- name: user_info_by_id
  endpoint:
    path: /GetUserInfoById
    method: GET
- name: user_info_by_login_name
  endpoint:
    path: /GetUserInfoByLoginName
    method: GET
- name: send_whisper
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: string
      to_user_id: string
      message: string
- name: whispers
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: string
      to_user_id: string
- name: whispers
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: user_id of sender
      to_user_id: user_id of recipient
- name: send_whisper
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: String
      to_user_id: String
- name: send_whisper
  endpoint:
    path: /helix/whispers
    method: POST
    data_selector: data
    params:
      from_user_id: required
      to_user_id: required
- name: whispers
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: string
      to_user_id: string
- name: send_whisper
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: from_user_id
      to_user_id: to_user_id
- name: whispers
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: from_user_id
      to_user_id: to_user_id
- name: global_emotes
  endpoint:
    path: /chat/emotes/global
    method: GET
    data_selector: data
- name: send_whisper
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: String
      to_user_id: String
- name: send_whisper
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: string
      to_user_id: string
- name: whispers
  endpoint:
    path: /helix/whispers
    method: POST
    data_selector: data
    params:
      from_user_id: required
      to_user_id: required
- name: whispers
  endpoint:
    path: /whispers
    method: POST
    params:
      from_user_id: from_user_id
      to_user_id: to_user_id
- name: whispers
  endpoint:
    path: /helix/whispers
    method: POST
    params:
      from_user_id: string
      to_user_id: string
- name: whispers
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: ''
      to_user_id: ''
- name: whispers
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: String
      to_user_id: String
- name: whispers
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: string
      to_user_id: string
- name: whispers
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: ''
      to_user_id: ''
- name: whispers
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: string
      to_user_id: string
- name: send_whisper
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: from_user_id
      to_user_id: to_user_id
- name: get_moderators
  endpoint:
    path: /moderation/moderators
    method: GET
    data_selector: data
    params:
      broadcaster_id: broadcaster_id
- name: send_whisper
  endpoint:
    path: /whispers
    method: POST
    params:
      from_user_id: String
      to_user_id: String
- name: send_whisper
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: string
      to_user_id: string
- name: whispers
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: ''
      to_user_id: ''
- name: send_whisper
  endpoint:
    path: /whispers
    method: POST
    data_selector: data
    params:
      from_user_id: String
      to_user_id: String
- name: get_user_extensions
  endpoint:
    path: /users/extensions
    method: GET
    data_selector: data
    params: {}
- name: create_poll
  endpoint:
    path: /polls
    method: POST
    data_selector: data
- name: end_poll
  endpoint:
    path: /polls
    method: PATCH
    data_selector: data
- name: get_polls
  endpoint:
    path: /polls
    method: GET
    data_selector: data
- name: get_poll
  endpoint:
    path: /polls
    method: GET
    data_selector: data
- name: Get Ingest Server
  endpoint:
    path: /ingest-servers
    method: GET
- name: Get Stream Key
  endpoint:
    path: /stream-key
    method: GET
- name: follows
  endpoint:
    path: /follows
    method: GET
- name: subscribers
  endpoint:
    path: /subscribers
    method: GET
- name: hype_trains
  endpoint:
    path: /hype_trains
    method: GET
- name: raids
  endpoint:
    path: /raids
    method: GET
- name: channel_subscriptions
  endpoint:
    path: /subscribe/channel
    method: POST
- name: channel_follows
  endpoint:
    path: /subscribe/follow
    method: POST
- name: custom_channel_rewards
  endpoint:
    path: /subscribe/custom_reward
    method: POST
- name: hype_train
  endpoint:
    path: /subscribe/hype_train
    method: POST
- name: channel_raids
  endpoint:
    path: /subscribe/raid
    method: POST
- name: eventsub_subscriptions
  endpoint:
    path: /eventsub/subscriptions
    method: POST
    data_selector: data
- name: get_eventsub_subscriptions
  endpoint:
    path: /eventsub/subscriptions
    method: GET
    data_selector: data
- name: delete_eventsub_subscription
  endpoint:
    path: /eventsub/subscriptions
    method: DELETE
    data_selector: data
- name: panel_extension
  endpoint:
    path: index.html
    method: GET
- name: CLEARCHAT
  endpoint:
    path: /
    method: POST
- name: CLEARMSG
  endpoint:
    path: /
    method: POST
- name: GLOBALUSERSTATE
  endpoint:
    path: /
    method: POST
- name: NOTICE
  endpoint:
    path: /
    method: POST
- name: PRIVMSG
  endpoint:
    path: /
    method: POST
- name: RECONNECT
  endpoint:
    path: /
    method: POST
- name: ROOMSTATE
  endpoint:
    path: /
    method: POST
- name: USERNOTICE
  endpoint:
    path: /
    method: POST
- name: USERSTATE
  endpoint:
    path: /
    method: POST
- name: Panel Extension
  endpoint:
    path: /dev.twitch.tv/console/extensions
    method: POST
    data_selector: extension
    params: {}
- name: Extension Supervisor
  endpoint:
    path: https://supervisor.ext-twitch.tv
    method: GET
- name: clips
  endpoint:
    path: /embed
    method: GET
    data_selector: clips
    params: {}
- name: vods
  endpoint:
    path: /embed
    method: GET
    data_selector: vods
    params: {}
- name: videos_by_id
  endpoint:
    path: /videos
    method: GET
    data_selector: data
    params:
      id: ''
- name: videos_by_broadcaster
  endpoint:
    path: /videos
    method: GET
    data_selector: data
    params:
      user_id: ''
- name: videos_by_game
  endpoint:
    path: /videos
    method: GET
    data_selector: data
    params:
      game_id: ''
- name: delete_videos
  endpoint:
    path: /videos
    method: DELETE
    data_selector: data
    params:
      id: ''
- name: CLEARCHAT
  endpoint:
    path: /clearchat
    method: POST
    data_selector: messages
- name: CLEARMSG
  endpoint:
    path: /clearmsg
    method: POST
    data_selector: messages
- name: GLOBALUSERSTATE
  endpoint:
    path: /globaluserstate
    method: POST
    data_selector: state
- name: PART
  endpoint:
    path: /part
    method: POST
    data_selector: messages
- name: PRIVMSG
  endpoint:
    path: /privmsg
    method: POST
    data_selector: messages
- name: NOTICE
  endpoint:
    path: /notice
    method: POST
    data_selector: messages
- name: RECONNECT
  endpoint:
    path: /reconnect
    method: POST
    data_selector: messages
- name: ROOMSTATE
  endpoint:
    path: /roomstate
    method: POST
    data_selector: state
- name: USERNOTICE
  endpoint:
    path: /usernotice
    method: POST
    data_selector: messages
- name: USERSTATE
  endpoint:
    path: /userstate
    method: POST
    data_selector: state
- name: user_notice
  endpoint:
    path: /usernotice
    method: GET
    data_selector: tags
    params: {}
- name: user_state
  endpoint:
    path: /userstate
    method: GET
    data_selector: tags
    params: {}
- name: notice
  endpoint:
    path: /notice
    method: GET
    data_selector: msg-id
    params: {}
- name: send_chat_message
  endpoint:
    path: /chat/messages
    method: POST
    data_selector: data
- name: send_chat_announcement
  endpoint:
    path: /chat/announcements
    method: POST
    data_selector: data
- name: eventsub_subscription
  endpoint:
    path: /eventsub/subscriptions
    method: POST
    data_selector: subscription
- name: unban_requests
  endpoint:
    path: /moderation/unban_requests
    method: GET
    data_selector: data
    params:
      status: pending
- name: banned_users
  endpoint:
    path: /moderation/bans
    method: GET
    data_selector: data
- name: delete_chat_messages
  endpoint:
    path: /moderation/chat
    method: DELETE
- name: remove_blocked_term
  endpoint:
    path: /helix/moderation/blocked_terms
    method: GET
    params:
      broadcaster_id: User ID of the broadcaster
      moderator_id: User ID of the moderator
      id: ID of the blocked term
- name: get_blocked_terms
  endpoint:
    path: /helix/moderation/blocked_terms
    method: GET
    params:
      broadcaster_id: User ID of the broadcaster
      moderator_id: User ID of the moderator
- name: manage_held_automod_messages
  endpoint:
    path: /helix/moderation/automod/message
    method: POST
    params: {}
- name: ban_user
  endpoint:
    path: /helix/moderation/bans
    method: POST
    params:
      broadcaster_id: User ID of the broadcaster
      moderator_id: User ID of the moderator
- name: add_moderator
  endpoint:
    path: /helix/moderation/moderators
    method: POST
    params:
      broadcaster_id: '{{ broadcaster_id }}'
      user_id: '{{ user_id }}'
- name: remove_moderator
  endpoint:
    path: /helix/moderation/moderators
    method: DELETE
    params:
      broadcaster_id: '{{ broadcaster_id }}'
      user_id: '{{ user_id }}'
- name: get_moderators
  endpoint:
    path: /helix/moderation/moderators
    method: GET
    params:
      broadcaster_id: '{{ broadcaster_id }}'
      user_id: '{{ user_id }}'
- name: get_automod_settings
  endpoint:
    path: /helix/moderation/automod/settings
    method: GET
    params:
      broadcaster_id: '{{ broadcaster_id }}'
      moderator_id: '{{ moderator_id }}'
- name: update_automod_settings
  endpoint:
    path: /helix/moderation/automod/settings
    method: PUT
    params:
      broadcaster_id: '{{ broadcaster_id }}'
      moderator_id: '{{ moderator_id }}'
- name: check_automod_status
  endpoint:
    path: /helix/moderation/enforcements/status
    method: POST
    params:
      broadcaster_id: '{{ broadcaster_id }}'
- name: add_blocked_term
  endpoint:
    path: /helix/moderation/blocked_terms
    method: POST
    params:
      broadcaster_id: '{{ broadcaster_id }}'
      moderator_id: '{{ moderator_id }}'
- name: update_shield_mode_status
  endpoint:
    path: /helix/moderation/bans
    method: POST
    data_selector: data
    params:
      broadcaster_id: '{{broadcaster_id}}'
      moderator_id: '{{moderator_id}}'
- name: get_shield_mode_status
  endpoint:
    path: /helix/moderation/bans
    method: GET
    data_selector: data
    params:
      broadcaster_id: '{{broadcaster_id}}'
      moderator_id: '{{moderator_id}}'
- name: channel_moderate
  endpoint:
    path: /helix/eventsub/subscriptions
    method: POST
    data_selector: data
    params: {}
- name: clearchat
  endpoint:
    path: /CLEARCHAT
    method: POST
- name: clearmsg
  endpoint:
    path: /CLEARMSG
    method: POST
- name: globaluserstate
  endpoint:
    path: /GLOBALUSERSTATE
    method: GET
- name: notice
  endpoint:
    path: /NOTICE
    method: GET
- name: privmsg
  endpoint:
    path: /PRIVMSG
    method: POST
- name: reconnect
  endpoint:
    path: /RECONNECT
    method: GET
- name: roomstate
  endpoint:
    path: /ROOMSTATE
    method: GET
- name: usernotice
  endpoint:
    path: /USERNOTICE
    method: GET
- name: userstate
  endpoint:
    path: /USERSTATE
    method: GET
- name: GLOBALUSERSTATE
  endpoint:
    path: /globaluserstate
    method: GET
    data_selector: tags
    params: {}
- name: NOTICE
  endpoint:
    path: /notice
    method: GET
    data_selector: tags
    params: {}
- name: PRIVMSG
  endpoint:
    path: /privmsg
    method: POST
    data_selector: tags
    params: {}
- name: ROOMSTATE
  endpoint:
    path: /roomstate
    method: GET
    data_selector: tags
    params: {}
- name: USERNOTICE
  endpoint:
    path: /usernotice
    method: GET
    data_selector: tags
- name: USERSTATE
  endpoint:
    path: /userstate
    method: GET
    data_selector: tags
- name: NOTICE
  endpoint:
    path: /notice
    method: GET
    data_selector: msg-id
- name: userinfo
  endpoint:
    path: /oauth2/userinfo
    method: GET
    data_selector: ''
    params: {}
- name: emoticons
  endpoint:
    path: /emoticons
    method: GET
- name: badges
  endpoint:
    path: /badges
    method: GET
- name: drops_entitlements
  endpoint:
    path: /helix/entitlements/drops
    method: GET
    data_selector: entitlements
    params:
      game_id: <Your game ID>
      fulfillment_status: CLAIMED
- name: update_drops_entitlements
  endpoint:
    path: /helix/entitlements/drops
    method: PATCH
    data_selector: 'null'
    params: {}
- name: Get Drops Entitlements
  endpoint:
    path: /helix/entitlements/drops
    method: GET
    params:
      game_id: <Your game ID>
      fulfillment_status: CLAIMED
- name: Update Drops Entitlements
  endpoint:
    path: /helix/entitlements/drops
    method: PATCH
    data_selector: fulfillment_status
    params:
      fulfillment_status: FULFILLED
      entitlement_ids:
      - U2VyaW91c2x5LCBkb24ndCB3b3JyeSBhYm91dCBkZWNvZGluZyB0aGVzZSE=
      - R28gcmVhZCB0aGUgVGVjaG5pY2FsIEZBUSBmb3IgbW9yZSBpbmZv
- name: api
  endpoint:
    path: /api
    method: GET
- name: configure
  endpoint:
    path: /configure
    method: GET
- name: event
  endpoint:
    path: /event
    method: GET
- name: mock-api
  endpoint:
    path: /mock-api
    method: GET
- name: token
  endpoint:
    path: /token
    method: GET
- name: version
  endpoint:
    path: /version
    method: GET
- name: start_raid
  endpoint:
    path: /helix/raids
    method: POST
    params:
      from_broadcaster_id: '12345678'
      to_broadcaster_id: '87654321'
- name: cancel_raid
  endpoint:
    path: /helix/raids
    method: DELETE
    params:
      broadcaster_id: '12345678'
- name: create_stream_marker
  endpoint:
    path: /streams/markers
    method: POST
    data_selector: data
- name: get_stream_markers
  endpoint:
    path: /streams/markers
    method: GET
    data_selector: data
- name: predictions
  endpoint:
    path: /predictions
    method: POST
    data_selector: data
- name: end_prediction
  endpoint:
    path: /predictions
    method: PATCH
    data_selector: data
- name: get_predictions
  endpoint:
    path: /predictions
    method: GET
    data_selector: data
- name: deep_links
  endpoint:
    path: /twitch/deep_links
    method: GET
    data_selector: deep_links
- name: CLEARCHAT
  endpoint:
    path: /CLEARCHAT
    method: POST
    data_selector: CLEARCHAT
    params: {}
- name: CLEARMSG
  endpoint:
    path: /CLEARMSG
    method: POST
    data_selector: CLEARMSG
    params: {}
- name: GLOBALUSERSTATE
  endpoint:
    path: /GLOBALUSERSTATE
    method: POST
    data_selector: GLOBALUSERSTATE
    params: {}
- name: NOTICE
  endpoint:
    path: /NOTICE
    method: POST
    data_selector: NOTICE
    params: {}
- name: PRIVMSG
  endpoint:
    path: /PRIVMSG
    method: POST
    data_selector: PRIVMSG
    params: {}
- name: ROOMSTATE
  endpoint:
    path: /ROOMSTATE
    method: POST
    data_selector: ROOMSTATE
    params: {}
- name: USERNOTICE
  endpoint:
    path: /USERNOTICE
    method: POST
    data_selector: USERNOTICE
    params: {}
- name: USERSTATE
  endpoint:
    path: /USERSTATE
    method: POST
    data_selector: USERSTATE
    params: {}
- name: USERNOTICE
  endpoint:
    path: /usernotice
    method: POST
    data_selector: tags
    params: {}
- name: USERSTATE
  endpoint:
    path: /userstate
    method: POST
    data_selector: tags
    params: {}
- name: Drops Campaign
  endpoint:
    path: /create-campaign
    method: POST
- name: Reward
  endpoint:
    path: /create-reward
    method: POST
- name: Get Clips
  endpoint:
    path: /helix/clips
    method: GET
    data_selector: data
    params: {}
- name: Get Streams
  endpoint:
    path: /helix/streams
    method: GET
    data_selector: data
    params: {}
- name: schedule
  endpoint:
    path: /schedule
    method: GET
    data_selector: data.segments
    params:
      broadcaster_id: broadcaster_id
- name: polls
  endpoint:
    path: /CreatePoll
    method: POST
    data_selector: Result
    params: {}
- name: predictions
  endpoint:
    path: /CreatePrediction
    method: POST
    data_selector: Result
    params: {}
- name: channel_points_rewards
  endpoint:
    path: /MakeCustomRewardDefinition
    method: POST
    data_selector: Result
    params: {}
- name: follows
  endpoint:
    path: /SubscribeToEventStream
    method: POST
    data_selector: Result
    params:
      Kind: follow
- name: subscribers
  endpoint:
    path: /SubscribeToEventStream
    method: POST
    data_selector: Result
    params:
      Kind: Subscription
notes:
- Customizable tags are replacing the old tag format.
- Legacy tags endpoints will be phased out according to the timeline.
- The OAuth user access token must include the clips:edit scope.
- The API captures up to 90 seconds of the broadcaster’s stream.
- The deprecated 'Get User Follows' and EventSub channel.follow (v1) will be removed
  on or soon after August 3, 2023.
- Chatbots that enhance the Twitch user experience and have reached these limits may
  apply for verified bot status.
- A bot with verified bot status enjoys higher chat message limits than regular Twitch
  accounts.
- Sending emotes is done by typing in the case-sensitive name of the emote as-is.
- Connection may be unstable, consider implementing reconnection logic.
- Data starts being collected after the Extension or game is installed and viewed,
  subject to a one-day delay.
- Uses OAuth2 with refresh token — requires setup of connected app in Twitch
- Uses OAuth2 for authentication with client credentials grant type.
- User Access Token must include appropriate scopes for each action.
- User Access Token must include appropriate scopes.
- The request must include a User Access Token that includes the appropriate scopes.
- 'No response when attempting to JOIN #cursed_channel_name with my_bot_username'
- 'I’ve been following a project for the past weeks and looks like they’ve found an
  issue with Clips: when a Clip is created (on Twitch), it extracts a portion of the
  VOD for it, but also a portion of the chat. The problem is that the chat is way
  out of sync in the Clips, while in the VOD is “normal”.'
- This is out of scope for the third party developers forum and should be passed on
  to first party via https://help.twitch.tv/
- I didn’t answer initially as wrong place for the issue. And thus not something I/this
  forum can help with. As the issue isn’t “twitch third party products” it’s “first
  party” so that needs support to know not third party dev land.
- The other post is a spam bot that just recycled a post from somewhere and just cited
  this post in it’s post to hide it’s spam link…
- All Extensions will be rendered with CSP policy enforced to only allow resources
  from your domain allowlists on January 27, 2022.
- Any requests to include or to connect to resources will be blocked by the CSP, with
  the exception of resources included in your asset package, served from Twitch’s
  CDN.
- Functionality that is considered to be in public beta.
- Unless otherwise noted, EventSub subscriptions that were released as a public beta
  will be available for 30 days after their generally available version is released.
- Requires setup of connected app for OAuth2
- 'Scopes required: user:read:chat, user:bot, channel:bot, user:write:chat'
- User access tokens require user consent and specify redirect URL to http://localhost:3000
- This isn’t something third party developers can help with.
- 'Instead of regular oauth try:'
- Uses OAuth2 for authentication
- If you send too many messages in rapid succession, The Twitch’s chat server will
  silently drop your messages and may even close the IRC connection.
- A verified phone number is required to chat in this channel.
- アカウントがログインする前にユーザーがTwitchで認証できるようにすると、アカウントが接続されていないのに接続されていると思われてしまう可能性があります。
- キャンペーンの最大期間は28日間です。
- Dropsは、最小15分から最大4時間までの期間に制限されます。
- OAuthトークンの有効性を確認する必要があります。
- All timestamps are in RFC3339 format and use nanoseconds instead of milliseconds.
- If processing the event takes longer than a second or two, consider writing the
  event to temporary storage and processing the notification after responding with
  2XX.
- Third-party apps that call the Twitch APIs and maintain an OAuth session must call
  the /validate endpoint to verify that the access token is still valid.
- Token validation can be done using the /oauth2/validate endpoint.
- WebSocket connection is established to wss://eventsub.wss.twitch.tv/ws.
- With the removal of WebSub-based webhooks last year, the optional event `id` query
  parameter for the Get Hype Train Events Twitch API endpoint is no longer meaningful.
- On or soon after April 4, 2022, the optional query parameter will be ignored.
- The result will be a successful request to the API endpoint as if `id` was not specified.
- Reviews for chatbot verification continue to be temporarily paused while we revise
  our processes.
- As of July 9th 2024, there is no longer a requirement to have an Apple Developer
  account, or fill out the 'iOS Allowlist Request' form, to allow an Extension to
  work on the iOS version of the Twitch app.
- Requires the `moderator:read:suspicious_users` scope.
- Requires a user access token with specific scopes for each subscription type.
- Must have 'moderator:read:unban_requests' or 'moderator:manage:unban_requests' scope.
- Requires a user access token that includes the 'moderator:manage:automod' scope.
- Must have `channel:read:redemptions` or `channel:manage:redemptions` scope.
- Must have `channel:read:polls` or `channel:manage:polls` scope.
- Requires user OAuth access token with scope set to channel:read:goals
- Must have oauth scope user:read:whispers or user:manage:whispers
- Only supported by webhooks, cannot be used with WebSockets.
- The auth token may expire and needs to be renewed.
- On macOS, if you’re not able to run commands, you may need to change the binary’s
  permissions to allow execution.
- If you relied on browser notifications for announcements, mentions, or replies,
  you may need to re-enable this feature to continue receiving these messages.
- The address for automated emails from the forums has been updated to no-reply@twitch.com.
- Only one version of an Extension can be in Review at a time.
- Deleting an Extension is not reversible, and you can’t delete specific versions
  of an Extension.
- The legacy Chatters endpoint that begins with “https://tmi.twitch.tv/” is the resource
  that will be shut down.
- Programmatically retrieving the list of users in a channel’s stream chat should
  be information and permission that the creator or their moderators control.
- Support for the Developer Rig will end on or soon after January 31, 2023.
- New projects will no longer be able to be created for an existing Twitch Extension.
- Extensions that are not in compliance will not be approved.
- Twitch reserves the right to remove any Extension, for any reason, at any time.
- New campaigns on the current version of Drops cannot have a start date after October
  18, 2023 or an end date after November 15, 2023.
- The “Drops” tab in the developer console for the previous version will be retitled
  to “Drops (legacy).”
- With no active Drops campaigns remaining in the previous version of Drops, the ability
  to create campaigns in the older version will be removed.
- Adding Device Code Flow to supported Authentication flows
- Developers are required to fulfill viewer rewards that claim and link their accounts
  at least 14 days after the campaign ends.
- We recommend avoiding transferable items that encourage farming behavior.
- There are no changes to scopes for the subscription type.
- There is no decommission date for version 1 of the subscription type at this time.
- Requires OAuth 2.0 access tokens for most endpoints
- Rate limits apply for API calls
- Extensions needs to know what the starting point is for your panel. Set the Panel
  Viewer Path to index.html.
- You must use the Developer Console to configure your extension’s Content Security
  Policy.
- The command’s argument identifies the event to trigger.
- The command’s output indicates whether response and status code are valid.
- The mock API server replicates a majority of the Twitch API endpoints except for
  some specific endpoints.
- Tokens expire after 24 hours.
- Counts are for the corresponding day in the CSV file.
- Data starts being collected after the Extension or Game is installed and viewed,
  subject to a one-day delay.
- Calculations typically complete within 1 hour for Extensions and 4 hours for Games.
- Chatbots that enhance the Twitch user experience and have reached these limits may
  apply for verified bot status, but note that verified bot status is rarely granted.
- Chatbots may need to authenticate to work.
- Verified bots have higher chat message limits and authentication limits.
- Each broadcast uses an RTMP URL with the format rtmp://<ingest-server>/app/<stream-key>[?bandwidthtest=true]
- Stream keys are assigned by Twitch and can be retrieved from the broadcaster dashboard
  or through the Get Stream Key API.
- Although the API currently supports only one goal, you should write your application
  to support one or more goals.
- You must change your app’s Info.plist to declare that your app is allowed to query
  the twitch scheme.
- PubSub is now deprecated and will have a year-long withdrawal period for any developers
  who need to migrate to EventSub.
- During the shutdown windows, developers can expect to receive an `ERR_BADAUTH` error
  response when attempting to issue a new listen command.
- Existing connections may not disconnect during the shorter windows, but will be
  closed during the 24-hour and 48-hour periods.
- A Content Security Policy is a set of protocols that help prevent bad actors from
  compromising web content.
- If the `user_id` parameter is provided and the user access token does not include
  the `moderator:read:followers` scope or the user does not have broadcaster or moderator
  permission for the channel, the API response will return a 401 HTTP response code.
- If the `user_id` parameter is not used and the user access token does not include
  the scope, it will return a successful 200 response code and just include the followers
  count.
- Common reasons for rejection include organization URL and email domains not matching.
- Some attributes may return null if the Hype Train is over.
- The user sending the whisper must have a verified phone number.
- The API may silently drop whispers that it suspects of violating Twitch policies.
- The API may silently drop whispers that it suspects of violating policies.
- Polling is available to partners and affiliates only.
- The poll runs for the duration specified during creation.
- The message rate limit is 12 messages per minute. Exceeding the limit will cause
  a 429 error.
- Requires manage:redemptions scope for Channel Point rewards functionality
- Game must be running Unity version 2022.3 or greater
- Concurrent channel join limit reduced to 100 on May 15, 2024. Excludes verified
  bots.
- Users and chatbots active in channels with the moderator role will NOT count against
  concurrent channel join limits.
- The game developer chat badge will be decommissioned on or soon after October 21,
  2024.
- Developers who submitted a Developer Organization request that did not include a
  game ownership claim will receive an email that the request was denied.
- As of today, the following Twitch API endpoints are considered deprecated and will
  be decommissioned on or soon after March 15, 2022.
- Developers using 'Get Banned Events' should update their applications to use 'Get
  Banned Users'.
- Developers using 'Get Moderator Events' should update their applications to use
  'Get Moderators'.
- Developers using 'Get Subscription Events' should update their applications to use
  'Get Broadcaster Subscriptions'.
- When using WebSockets to receive EventSub messages, you should not send any messages
  from your client to the WebSocket server.
- Verification is no longer a thing, there is no form it cannot be applied for, it
  no longer exists.
- You don’t need verification as you her oAuth from the broadcasters instead.
- When using webhooks, an app access token is required.
- When using WebSockets, a user access token is required.
- Access and refresh tokens can become invalid for several reasons including expiration
  and user actions.
- The organization URL domain must match the contact email domain, or your registration
  request will be rejected.
- Game ownership requests are verified within one week along with your request to
  create a new organization.
- The legacy badges endpoint that begins with 'https://badges.twitch.tv' is being
  shut down.
- Developers can expect to receive a 404 error response during the shutdown windows.
- Extensions needs to know what the starting point is for your panel. Set the `Panel
  Viewer Path` to `index.html`.
- Contains metadata related to the chat badges in the badges tag.
- A Boolean value that indicates whether the user has site-wide commercial free mode
  enabled.
- Uses OAuth2 for authentication.
- Extensions need to know what the starting point is for your panel. Set the Panel
  Viewer Path to index.html.
- Twitch Extensions are based on ext-twitch.tv, making them separate from twitch.tv.
- A Content Security Policy is dynamically constructed for each Extension.
- You should create one WebSocket connection until you have a reason to create another
  one.
- If a WebSocket connection is lost, you’ll need to resubscribe to the events after
  connecting to the server.
- Embedded video windows must be at least 400x300 pixels.
- Rate limits apply per channel based on account type.
- user_id will no longer be an acceptable body parameter.
- channel:read:redemptions is useless to get from the bot account as the bot doesn’t
  have channel points
- On a straight websocket you cannot mix tokens from two users.
- Twitch automatically deletes VODs after 14 days for normal broadcasters and 60 days
  for partners.
- The `msg-id` tag may be set to various values depending on the context.
- Before you can continue, you must authenticate with Twitch and get a User Access
  Token with chat:read and chat:write scopes.
- The bot sends messages based on user interactions in chat rooms.
- The API endpoints listed below have been removed from the documentation and are
  now returning a 410 response code.
- Developers can expect to receive a '410 Gone' HTTP response.
- Sending chat messages requires broadcaster_id and sender_id.
- Chat messages can include replies by using reply_parent_message_id.
- Quicker reviews and faster adoption
- Configuration clarity
- Extensions that enable users to generate their own content creates exciting new
  ways for broadcasters to interact with their community
- 'Tokens don’t last forever: Access and refresh tokens can become invalid for several
  reasons.'
- User Access Token must include appropriate scopes for actions
- 'User Access Token must include appropriate scopes: moderator:manage:blocked_terms
  or moderator:read:blocked_terms, moderator:manage:banned_users.'
- Notifications for events will be sent via EventSub.
- 'User Access Token must include appropriate scopes: channel:manage:moderators, moderation:read,
  moderator:manage:automod_settings, etc.'
- Requires User Access Token with specific scopes.
- Make sure to review the hackathon’s rules tab for the complete and official competition
  rules.
- A new optional body parameter (`for_source_only`) has been added to the Send Chat
  Message API endpoint.
- The default value for `for_source_only` has been set to false, but will change to
  true on May 19, 2025.
- The JWT obtained from onAuthorized should be passed as a header during AJAX calls
  to the EBS.
- Subscription status will be null if the user is either not a subscriber, or opting
  not to share their identity.
- The value will also be null if the extension doesn’t have subscription capabilities.
- A verified phone number is required to chat in this channel. Please visit https://www.twitch.tv/settings/security
  to verify your phone number.
- Your bot won’t receive the JOIN and PART messages if the chat room contains more
  than 1,000 users.
- Chat badges and user information are included in message tags.
- Tags may vary depending on the type of notice.
- Identity is foundational for most Twitch integrations.
- Recommended for all game types if applicable.
- The removal of these endpoints make it difficult for a non moderation bot to auto
  operate in a channel.
- Broadcaster foo wants bot bar in their channel. Bot bar doesn’t do moderation events,
  it’s just a information bot.
- It’s unfortunate 3rd party developers have to suffer due to these bad actors.
- If you want to always force consent, include the *force_verify* query parameter.
- Requires setup of registered app with client ID and client secret.
- Ensure to include openid scope in requests.
- Closed captions are embedded in the video and not provided via irc
- See for technical Twitch Help Portal
- And for supported capabilities IRC Concepts | Twitch Developers
- If you’ve used chatGPT here it hallucinated an answer
- Users must link their Twitch account to claim Drops.
- User Access Tokens are short-lived and require validation.
- An application must request only the scopes required by the APIs that their app
  calls. If you request more scopes than is required to support your app’s functionality,
  Twitch may suspend your application’s access to the Twitch API.
- You may only create markers if the broadcaster is streaming live.
- You may only create markers if the broadcaster has enabled the ability to store
  past broadcasts.
- Running predictions is available to partners and affiliates only.
- Legacy endpoints that included a giantbomb_id field now return a value of 0.
- API includes headers for rate limit tracking
- Any third-party app that calls the Twitch APIs and maintains an OAuth session must
  call the /validate endpoint to verify that the access token is still valid.
- Twitch periodically conducts audits to discover applications that are not validating
  access tokens hourly as required.
- To launch the Twitch App, use 'twitch://open'.
- On January 23, 2024, all Bits-related data fields will be removed from the API.
- If your application is specifically looking for these data fields by name, your
  application logic should be updated to not rely on this information by the date
  above to limit disruption to your users.
- The optimal solution is to get permission from the broadcaster to be present
- If you send too many messages in rapid succession, the Twitch’s chat server will
  silently drop your messages and may even close the IRC connection.
- The bot sends messages in the format specified by IRCv3.
- Request the commands capability to receive these commands.
- Request the tags capability for additional information.
- Contains metadata related to chat badges.
- The tags may vary based on the event type.
- You only need three tokens if you are doing Webhooks or conduits transports.
- When doing straight websockets you need only a token from the bot account/user to
  read chat as with the scope user:read:chat (minimum)
- Campaigns have a 28-day maximum duration.
- Campaign status can be set to Disabled, Test, Upcoming, Live, Expired, or Expired
  Manually.
- API requires OAuth tokens for most endpoints.
- Rate limits apply to all API calls.
- The request must include a user access token that includes the channel:manage:schedule
  scope.
- The number of occurrences in the response for a recurring segment is undetermined
  but may extend for years, so plan your pagination logic accordingly.
errors:
- '401 Unauthorized: User access token requires the user:write:chat scope.'
- '401 Unauthorized: Ensure your OAuth token has the correct scopes.'
- '403 Forbidden: subscription missing proper authorization'
- 'CLOSED: Connection closed without additional data or error message.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check User Access Token and scopes'
- '404 Not Found: Check broadcaster_id or user_id'
- '422 Unprocessable Entity: Check request parameters for validity'
- 'HTTP 204 No Content: Successful deletion of chat message or unban request.'
- 'HTTP 200 OK: Successful resolution of unban request.'
- 'msg_ratelimit: Your message was not sent because you are sending messages too quickly.'
- 'msg_timedout: You are timed out for <number> more seconds.'
- NOTICE * :Login authentication failed
- NOTICE * :Improperly formatted auth
- 'Invalid refresh token: Bad Request'
- '403: Signatures didn''t match.'
- 'authorization_pending: The token is not yet authorized.'
- 'invalid device code: The device code has already been used.'
- '401 Unauthorized: Token is not valid.'
- '202 Accepted: Subscription request is successful.'
- '403 Forbidden: Ensure the moderator has the required permissions.'
- '401 Unauthorized: Check access token and required scopes.'
- '401 Unauthorized: Ensure the user has granted the required scopes.'
- '404: Not Found - Legacy endpoint will return this error after shutdown.'
- '401 Unauthorized: Check your OAuth token'
- '403 Forbidden: Insufficient scope'
- '404 Not Found: Resource does not exist'
- '401 Unauthorized: Ensure client ID and secret are correct'
- 'ERR_BADAUTH: Error response when attempting to issue a new listen command.'
- '410 Gone: Indicates that the Get Users Follows functionality is no longer available.'
- '401 Unauthorized: If the `user_id` parameter is provided and the user access token
  does not include the required scope.'
- '400 Bad Request: Check the request parameters and data types.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '204 No Content: Successfully sent the whisper message or the message was silently
  dropped.'
- '400 Bad Request: Invalid request format.'
- '401 Unauthorized: Authorization header required with an app access token.'
- '403 Forbidden: The request is understood, but it has been refused.'
- '404 Not Found: The requested resource could not be found.'
- '429 Too Many Requests: Rate limit exceeded.'
- 400 Bad Request
- 401 Unauthorized
- 403 Forbidden
- 404 Not Found
- 429 Too Many Requests
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Invalid token or insufficient scopes.'
- '403 Forbidden: The operation is not allowed.'
- '404 Not Found: The specified resource could not be found.'
- '400 Bad Request: The id query parameter is required.'
- '400 Bad Request: Invalid parameters.'
- '401 Unauthorized: Invalid or expired access token.'
- '403 Forbidden: Insufficient permissions.'
- '404 Not Found: The specified user was not found.'
- '400 Bad Request: The request was malformed.'
- '401 Unauthorized: The request lacks valid authentication credentials.'
- '403 Forbidden: The server understood the request, but refuses to authorize it.'
- '400 Bad Request: The request was malformed or missing required parameters.'
- '401 Unauthorized: Recheck OAuth token.'
- '403 Forbidden: The request was understood but refused.'
- '404 Not Found: The specified resource was not found.'
- '400 Bad Request: Invalid request.'
- '401 Unauthorized: Invalid token.'
- '403 Forbidden: Permission denied.'
- '404 Not Found: Resource not found.'
- '401 Unauthorized: Ensure the token has the correct scopes.'
- '401 Unauthorized: Ensure the proper JWT is set in the Authorization header'
- '429 Too Many Requests: Exceeding the message rate limit'
- '400 Bad Request: cannot create a subscription for a user that does not exist'
- '401 Unauthorized: Ensure you are using the correct access token.'
- '403 Forbidden: Check your app''s permissions and scopes.'
- '401 Unauthorized: Token is invalid or expired'
- The organization URL does not match the email domain associated with your Twitch
  profile.
- The organization name is too similar to an existing organization.
- We could not verify your ownership of any games claimed along with the application.
- '404: Resource not found after the permanent shutdown'
- 'msg_bad_characters: Your message was not sent because it contained too many unprocessable
  characters.'
- 'msg_requires_verified_phone_number: A verified phone number is required to chat
  in this channel.'
- 400 Bad Request if the client ID is valid but the access token is not.
- 404 Not Found if the client ID is not valid.
- '4001: Client sent inbound traffic'
- '4002: Client failed ping-pong'
- '4003: Connection unused'
- '4004: Reconnect grace time expired'
- '4005: Network timeout'
- '4006: Network error'
- '4007: Invalid reconnect'
- Failed to subscribe to channel.chat.message. API call returned status code
- Failed to subscribe to channel.channel_points_custom_reward_redemption.add. API
  call returned status code
- '401 Unauthorized: Recheck OAuth scopes or token permissions'
- :tmi.twitch.tv NOTICE * :Login authentication failed
- :tmi.twitch.tv NOTICE * :Improperly formatted auth
- '410 Gone: The requested resource is no longer available.'
- '403: subscription missing proper authorization'
- '401 Unauthorized: When a token becomes invalid.'
- 400 error response when `for_source_only` is specified with a User Access Token.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- 'access_denied: The user denied you access'
- 'invalid_grant: The authorization code is invalid or expired'
- '401 Unauthorized: Check OAuth token validity.'
- '404 Not Found: Ensure the game ID is correct.'
- 'HTTP 401 Unauthorized: Token is expired'
- '404 Not Found: If you don’t have any VODs.'
- '429 Too Many Requests: Rate limit exceeded'
- '401 Unauthorized: invalid access token'
- 'msg_bad_characters: Message contains too many unprocessable characters.'
- 'msg_channel_suspended: Channel does not exist or has been suspended.'
- 'msg_verified_email: This room requires a verified account to chat.'
- '401 Unauthorized: Invalid OAuth token.'
- '404 Not Found: Endpoint does not exist.'
- '204 No Content: Request succeeded'
- '404 Not Found: If the broadcaster hasn’t scheduled any broadcasts.'
- '400 Bad Request: If the request is malformed or missing required parameters.'
- Login authentication failed
- Login unsuccessful
- 'invalid scope requested: ''chat:write'''
auth_info:
  mentioned_objects:
  - channel:bot
  - user:write:chat
  - user:read:chat
  - user:bot
  - OauthToken
  - AuthProvider
  - NamedCredential
  - User Access Token
  - moderator:manage:shield_mode
  - channel:read:subscriptions
  - channel:moderate
  - bits:read
  - moderation:read
  - channel:read:guest_star
  - channel:manage:guest_star
  - moderator:read:guest_star
  - moderator:manage:guest_star
  - channel:read:redemptions
  - channel:manage:redemptions
  - moderator:read:unban_requests
  - moderator:manage:unban_requests
  - moderator_user_id
  - channel:read:vips
  - channel:manage:vips
  - moderator:read:warnings
  - moderator:manage:warnings
  - channel:read:hype_train
  - OAuthAccessToken
  - User
  - UserInfo
  - AuthenticationInfo
  - AuthState
  - UserAuthInfo
  - broadcaster_id
  - moderator_id
  - user_id
  - channel:manage:predictions
  - channel:read:predictions
  - OAuthToken
  - ClientCredentials
client:
  base_url: https://api.twitch.tv
  auth:
    type: oauth2
    location: header
    header_name: Authorization
    scope: user:bot user:read:chat user:write:chat
    flow: authorization_code
    token_url: https://id.twitch.tv/oauth2/token
    client_id: clientId
    client_secret: clientSecret
    refresh_token: '{{ dlt.secrets[''twitch_refresh_token''] }}'
    scopes:
    - chat:edit
    - chat:read
    redirect_uri: http://localhost:3000
  headers:
    Client-Id: '{{ dlt.secrets[''client_id''] }}'
    Content-Type: application/json
    Accept: application/vnd.twitch.v5+json
    Client-ID: clientId
    Authorization: Bearer authToken
    scope:
    - channel:bot
    - user:bot
    - user:read:chat
  paginator:
    type: cursor
    cursor_param: pagination.cursor
    cursor_path: pagination.cursor
    page_size_param: first
    default_page_size: 100
source_metadata: null
