resources:
- name: embedder
  endpoint:
    path: /aws_bedrock/embed
    method: POST
    data_selector: results
- name: llm
  endpoint:
    path: /aws_bedrock/llm
    method: POST
    data_selector: results
- name: vector_store
  endpoint:
    path: /opensearch
    method: POST
    data_selector: results
- name: graph_store
  endpoint:
    path: /neptune
    method: POST
    data_selector: results
- name: embedder
  endpoint:
    path: /embedder
    method: POST
    data_selector: embed
    params: {}
- name: llm
  endpoint:
    path: /llm
    method: POST
    data_selector: response
    params: {}
- name: vector_store
  endpoint:
    path: /vector_store
    method: POST
    data_selector: store
    params: {}
- name: graph_store
  endpoint:
    path: /graph_store
    method: POST
    data_selector: graph
    params: {}
- name: memories
  endpoint:
    path: /add
    method: POST
    data_selector: result
    params: {}
- name: search_memories
  endpoint:
    path: /search
    method: GET
    data_selector: relevant_memories
    params: {}
- name: get_all_memories
  endpoint:
    path: /get_all
    method: GET
    data_selector: all_memories
    params: {}
- name: get_specific_memory
  endpoint:
    path: /get
    method: GET
    data_selector: memory
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: results
- name: learning_history
  endpoint:
    path: /learning-history
    method: GET
    data_selector: results
- name: learning_history
  endpoint:
    path: /learning/history
    method: GET
    data_selector: results
- name: learning_session
  endpoint:
    path: /learning/session
    method: POST
    data_selector: response
- name: learning_history
  endpoint:
    path: /get_learning_history
    method: GET
    data_selector: results
- name: memories
  endpoint:
    path: /memories
    method: GET
    data_selector: memories
- name: memories
  endpoint:
    path: /memories
    method: GET
    data_selector: results
    params: {}
- name: memories
  endpoint:
    path: /get_all
    method: GET
    data_selector: memories
- name: add_memory
  endpoint:
    path: /add
    method: POST
    data_selector: result
- name: memories
  endpoint:
    path: /memories
    method: GET
    data_selector: results
    params: {}
- name: memories
  endpoint:
    path: /memories
    method: GET
    data_selector: results
- name: memories
  endpoint:
    path: /memories
    method: GET
    data_selector: results
- name: memory
  endpoint:
    path: /api/memory
    method: GET
    data_selector: memory_records
- name: memory
  endpoint:
    path: /api/memory
    method: POST
    data_selector: results
    params: {}
- name: memory
  endpoint:
    path: /api/memory
    method: POST
    data_selector: results
- name: memories
  endpoint:
    path: /memories
    method: POST
    data_selector: output
- name: search_memories
  endpoint:
    path: /search
    method: GET
    data_selector: output
- name: memories
  endpoint:
    path: /memories
    method: POST
    data_selector: memory
    params: {}
- name: search_memories
  endpoint:
    path: /memories/search
    method: GET
    data_selector: results
    params: {}
- name: save_memories
  endpoint:
    path: /save_memories
    method: POST
    data_selector: results
    params: {}
- name: search_memories
  endpoint:
    path: /search_memories
    method: GET
    data_selector: results
    params: {}
- name: patient_information
  endpoint:
    path: /api/patient_information
    method: POST
    data_selector: response.data
    params: {}
- name: emails
  endpoint:
    path: /emails
    method: POST
    data_selector: response
    params: {}
- name: search_emails
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params: {}
- name: get_email_thread
  endpoint:
    path: /threads
    method: GET
    data_selector: thread
    params: {}
- name: email
  endpoint:
    path: /emails
    method: POST
    data_selector: response
    params: {}
- name: search_emails
  endpoint:
    path: /emails/search
    method: GET
    data_selector: results
    params: {}
- name: get_email_thread
  endpoint:
    path: /emails/thread
    method: GET
    data_selector: thread
    params: {}
- name: memories
  endpoint:
    path: /memories
    method: POST
    data_selector: results
- name: memories
  endpoint:
    path: /api/memories
    method: POST
    data_selector: data
    params: {}
- name: memories
  endpoint:
    path: /memories
    method: POST
    data_selector: response
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: response
- name: memory
  endpoint:
    path: /memories
    method: GET
    data_selector: records
- name: memory
  endpoint:
    path: /memories
    method: GET
    data_selector: records
- name: vector_store
  endpoint:
    path: /vector_store
    method: GET
    data_selector: results
- name: memory
  endpoint:
    path: /api/memory
    method: POST
    data_selector: messages
    params: {}
- name: vector_store
  endpoint:
    path: /vector_store
    method: GET
- name: memory
  endpoint:
    path: /add
    method: POST
    data_selector: results
    params: {}
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params: {}
- name: get_all
  endpoint:
    path: /get_all
    method: GET
    data_selector: results
    params: {}
- name: memory
  endpoint:
    path: /add
    method: POST
    data_selector: results
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: memory
  endpoint:
    path: /add
    method: POST
    data_selector: results
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: vector_store
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: llm
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: client
  endpoint:
    path: /mcp/<client-name>/sse/<user-id>
    method: GET
- name: add
  endpoint:
    method: POST
- name: search
  endpoint:
    method: POST
- name: get_all
  endpoint:
    method: POST
- name: update
  endpoint:
    method: POST
- name: delete
  endpoint:
    method: POST
- name: memories
  endpoint:
    path: /memories
    method: GET
    data_selector: results
- name: memories
  endpoint:
    path: /memories
    method: GET
    data_selector: memories
    params: {}
- name: memories
  endpoint:
    path: /memories/
    method: POST
    data_selector: data
- name: search_memories
  endpoint:
    path: /memories/search
    method: GET
    data_selector: data
- name: OpenMemory
  endpoint:
    path: /mcp/cursor/sse
    method: GET
- name: custom_update_memory_prompt
  endpoint:
    path: /open-source/features/custom-update-memory-prompt
    method: GET
    data_selector: memory
    params: {}
- name: memories
  endpoint:
    path: /memories
    method: GET
    data_selector: memories
    params: {}
- name: memories
  endpoint:
    path: /memories
    method: GET
    data_selector: results
    params: {}
- name: memories
  endpoint:
    path: /memories/
    method: POST
- name: search_memories
  endpoint:
    path: /memories/search
    method: GET
- name: reranker
  endpoint:
    path: /reranker
    method: POST
    data_selector: results
- name: reranker
  endpoint:
    path: /reranker
    method: POST
    data_selector: results
    params: {}
- name: custom_update_memory_prompt
  endpoint:
    path: /open-source/features/custom-update-memory-prompt
    method: GET
    data_selector: memory
- name: reranker
  endpoint:
    path: /reranker
    method: POST
    data_selector: results
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: reranker
  endpoint:
    path: /reranker
    method: POST
    data_selector: results
- name: reranker
  endpoint:
    path: /reranker
    method: POST
    data_selector: results
- name: reranker
  endpoint:
    path: /configuration/reranker
    method: POST
    data_selector: results
    params: {}
- name: reranker
  endpoint:
    path: /reranker
    method: POST
    data_selector: results
- name: reranker
  endpoint:
    path: /rerank
    method: POST
    data_selector: results
    params: {}
- name: reranker
  endpoint:
    path: /api/reranker
    method: POST
    data_selector: results
- name: reranker
  endpoint:
    path: /reranker
    method: POST
    data_selector: results
    params: {}
- name: reranker
  endpoint:
    path: /reranker
    method: POST
    data_selector: results
- name: reranker
  endpoint:
    path: /reranker
    method: POST
    data_selector: results
    params: {}
- name: reranker
  endpoint:
    path: /reranker
    method: POST
    data_selector: results
- name: reranker
  endpoint:
    path: /reranker
    method: POST
    data_selector: results
- name: graph_memory
  endpoint:
    path: /graph_memory
    method: POST
    data_selector: memory
    params: {}
- name: graph_memory
  endpoint:
    path: /get_all_memories
    method: GET
    data_selector: memories
    params: {}
- name: search_memories
  endpoint:
    path: /search_memories
    method: GET
    data_selector: results
    params: {}
- name: reranker
  endpoint:
    path: /reranker
    method: POST
    data_selector: results
    params: {}
- name: reranker
  endpoint:
    path: /api/reranker
    method: POST
    data_selector: results
- name: memories
  endpoint:
    path: /add
    method: POST
    data_selector: records
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
    params: {}
- name: reranker
  endpoint:
    path: /api/reranker
    method: POST
    data_selector: results
- name: reranker
  endpoint:
    path: /features/reranker-search
    method: GET
    data_selector: results
- name: graph_store
  endpoint:
    path: /initialize-graph-memory
    method: POST
    data_selector: config
- name: memories
  endpoint:
    path: /get_all_memories
    method: GET
    data_selector: records
    params: {}
- name: search_memories
  endpoint:
    path: /search_memories
    method: GET
    data_selector: records
    params: {}
- name: graph_memory
  endpoint:
    path: /api/graph_memory
    method: POST
    data_selector: data
    params: {}
- name: graph_store
  endpoint:
    path: /open-source/graph_memory/features
    method: GET
notes:
- OpenAPI Documentation accessible via /docs endpoint
- All API requests require authentication using HTTP Basic Auth. Ensure you include
  your API key in the Authorization header of each request.
- Uses AWS services for memory capabilities
- Ensure proper AWS credentials and region are set
- Uses AWS services for authentication and data storage
- Uses AWS services like Bedrock and Neptune Analytics for persistent memory capabilities.
- This implementation demonstrates how to create an AI Companion that maintains context
  across conversations using Mem0’s memory capabilities.
- Uses AWS services like Bedrock and Neptune Analytics.
- Make sure to set up your environment variables
- Uses Mem0 for persistent memory across agents.
- Requires setup of environment variables for API keys.
- Mem0 enables fast, transparent collaboration for teams and agents, with full attribution,
  flexible memory search, and easy message organization.
- You need MEM0_API_KEY and OPENAI_API_KEY to run the example.
- Uses API key for authentication - make sure to set up environment variables.
- Mem0 is SOC 2 and HIPAA compliant.
- Memory context ensures memory isolation for each student.
- You need MEM0_API_KEY to run the example.
- Mem0 API Key is required.
- Default user ID is eliza-os-user.
- Default provider is openai.
- Mem0 is now SOC 2 and HIPAA compliant
- Mem0 API Key required (Get from https://app.mem0.ai/dashboard/api-keys)
- Default user ID is eliza-os-user
- Default provider is openai
- Mem0 can be utilized entirely locally by leveraging Ollama for both the embedding
  model and the language model (LLM).
- This local setup of Mem0 using Ollama provides a fully self-contained solution for
  memory management and AI interactions.
- OpenAI API key is required for data access.
- The CustomerSupportAIAgent class is initialized with the necessary memory configuration
  and OpenAI client setup.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses API key for authentication
- Mem0 enables a seamless, intelligent content-writing workflow, perfect for content
  creators, marketers, and technical writers looking to scale their personal tone
  and structure across work.
- Store your Mem0 API key as an environment variable.
- Get your Mem0 API key from the Mem0 Dashboard.
- Requires setup of API keys for both OpenAI and Mem0
- Ensure you have installed the required SDKs and dependencies.
- Replace placeholder API keys with actual keys.
- Requires setup of connected app in Mem0.
- Uses Google ADK and Mem0 SDK
- Uses API key for authentication.
- Requires setup of API key in environment variables
- Uses API key for authentication — ensure it is set in the environment
- Get API Key from the dashboard after signing in to Mem0 Platform.
- Get API Key from the dashboard after signing into Mem0 Platform
- Uses a sophisticated hybrid database system to efficiently manage and retrieve memories
  for AI agents and assistants.
- The `/tmp` directory in Lambda has a size limit of 512MB and its contents are not
  persistent between function invocations.
- Get a single memory by ID
- Delete a memory by id
- v1.0 removed, v1.1+ only is supported
- Async Mode is default and required
- Uses SQLite as a default history store.
- Mem0 1.0.0 Beta introduces several breaking changes.
- Async is the default mode.
- v1.1 is the minimum supported version.
- Default and required async mode.
- Breaking Changes Ahead! Mem0 1.0.0 Beta introduces several breaking changes. Please
  read this guide carefully before upgrading.
- Breaking Changes Ahead! Mem0 1.0.0 Beta introduces several breaking changes.
- Explore new features like enhanced filtering and reranking
- Mem0 1.0.0 Beta introduces several breaking changes. Please read this guide carefully
  before upgrading.
- Minimum supported version is v1.1
- v1.1 is the minimum supported version
- Some invalid parameters might have been ignored
- Unknown parameters raise TypeError
- All memory is stored on your machine. Nothing goes to the cloud. You maintain full
  ownership and control.
- The v1.0 API format is completely removed and no longer supported.
- OpenMemory runs locally on your machine, ensuring all your AI memories remain private
  and secure while being accessible across any compatible MCP client.
- Some objects like Contact may return nulls in deeply nested fields
- AsyncMemory works directly with the underlying storage systems.
- Always dict format with 'results' key
- Use this reference to systematically update your codebase. Test each change thoroughly
  before deploying to production.
- Uses asynchronous operations with asyncio.
- Ideal for embedding directly into codebase.
- The OpenMemory MCP Server runs entirely on your machine, enabling seamless context
  handoff across tools.
- All memory is stored on your machine. Nothing goes to the cloud.
- AsyncMemory supports non-blocking operations and integration with async frameworks.
- Deleting the container will lead to the deletion of the memory store.
- OpenMemory runs locally on your machine, ensuring all your AI memories remain private
  and secure.
- These values define where your MCP server is running and which user’s memory is
  accessed.
- Use high-quality images with clear, readable text and details
- Ensure good lighting in photos for better text extraction
- Avoid heavily stylized fonts that may be difficult to read
- Asynchronous memory for Mem0
- Enhanced metadata filtering is available in Mem0 1.0.0 Beta and later versions.
- Non-blocking Operations - All memory operations use asyncio to avoid blocking the
  event loop
- Concurrent Processing - Parallel execution of vector store and graph operations
- Enhanced metadata filtering provides powerful capabilities for precise memory retrieval.
- Reranking is enabled by default when configured
- Reranking works with metadata filtering
- The prompt is used to determine the action to be performed on the memory.
- Reranker-enhanced search is available in Mem0 1.0.0 Beta and later versions.
- Reranker-enhanced search improves search relevance using specialized reranking models.
- Reranker-enhanced search improves search relevance with specialized models.
- Provided neptune-graph instance must have the same vector dimensions as the embedder
  provider.
- Kuzu can also store its database in memory. Note that in this mode, all stored memories
  will be lost after the program has finished executing.
- The Graph Memory implementation is not standalone. You will be adding/retrieving
  memories to the vector store and the graph store simultaneously.
- Users can specify a custom prompt that will be used to extract specific entities
  from the given input text.
- Reranker-enhanced search significantly improves result relevance.
- If no configuration is supplied, a default configuration will be applied, and Qdrant
  will be used as the vector database.
- Kuzu comes embedded into the Python package and there is no additional setup required.
- If no configuration is supplied, a default configuration will be applied, and `Qdrant`
  will be used as the vector database.
errors:
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Verify your API keys'
- '404 Not Found: Ensure the endpoint exists'
- '401 Unauthorized: Check API key validity.'
- '500 Internal Server Error: Retry after some time.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'ValueError: The v1.0 API format is no longer supported in mem0ai 1.0.0+'
- 'ValueError: The v1.0 API format is no longer supported in mem0ai 1.0.0+.'
- 'KeyError: ''results'''
- 'TypeError: add() got an unexpected keyword argument ''output_format'''
- 'ValueError: The v1.0 API format is no longer supported'
- 'TypeError: Invalid parameter'
- v1.0 API format is no longer supported
- Invalid filter operator
- 'Initialization fails: Missing dependencies, invalid config'
- 'Slow operations: Large datasets, network latency'
- 'Memory not found: Invalid memory ID, deleted memory'
- 'Connection timeouts: Network issues, server overload'
- 'Out of memory errors: Large batch operations'
- 'Connection error: Check network'
- 'Memory not found: Validate IDs'
- Invalid image format or corrupted file
- Image file too large
- Unexpected error
- 'Configuration error: {e}'
- 'Connection error: {e}'
- 'Unexpected initialization error: {e}'
- 'Invalid memory ID: {e}'
- 'Memory retrieval error: {e}'
- 'ValueError: Invalid memory ID'
- 'ValueError: Invalid search query'
- Invalid memory ID
- Invalid search query
- Error handling should be implemented for reranking failures.
- 'ValueError: shapes (0,1536) and (768,) not aligned: 1536 (dim 1) != 768 (dim 0)'
auth_info:
  mentioned_objects:
  - MEM0_API_KEY
  - OPENAI_API_KEY
  - AsyncMemoryClient
client:
  base_url: https://app.mem0.ai
  auth:
    type: AWS
    location: header
    header_name: Authorization
source_metadata: null
