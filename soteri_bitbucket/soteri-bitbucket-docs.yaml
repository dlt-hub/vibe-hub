resources:
- name: security_status_single_project
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}
    method: GET
    data_selector: status
    params: {}
- name: security_status_multiple_projects
  endpoint:
    path: /rest/security/latest/status/projects
    method: GET
    data_selector: status
    params: {}
- name: security_status_single_repository
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}/repos/{repoSlug}
    method: GET
    data_selector: status
    params: {}
- name: security_status_multiple_repositories
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}/repos
    method: GET
    data_selector: status
    params: {}
- name: security_status_multiple_branches
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}/repos/{repoSlug}/branches
    method: GET
    data_selector: status
    params: {}
- name: fetching_scan_results
  endpoint:
    path: /rest/security/1.0/scan/{project-key}/repos/{repository-key}
    method: GET
    data_selector: scan_results
    params:
      branch: ''
      includeAllowlisted: true
      rule: ''
- name: kicking_off_scan
  endpoint:
    path: /rest/security/1.0/scan/{project-key}/repos/{repository-key}
    method: POST
    data_selector: scan_result
    params:
      branch: ''
- name: cancelling_scan
  endpoint:
    path: /rest/security/1.0/scan/{project-key}/repos/{repository-key}
    method: DELETE
    data_selector: cancel_result
    params:
      scanKey: ''
- name: export_scan_results
  endpoint:
    path: /rest/security/1.0/export-report/{project-key}/repos/{repository-key}
    method: GET
    data_selector: export_results
    params:
      branch: ''
      includeAllowlisted: true
      ruleType: ''
- name: fetching_global_rules
  endpoint:
    path: /rest/security/1.0/rules
    method: GET
    data_selector: rules
    params: {}
- name: fetching_rule_names
  endpoint:
    path: /rest/security/1.0/scan/{project-key}/rule_types/{repository-key}
    method: GET
    data_selector: rule_names
    params:
      branch: ''
- name: enable_rule
  endpoint:
    path: /rest/security/1.0/hardcoded/{rule-name}
    method: POST
    data_selector: null
    params: {}
- name: disable_rule
  endpoint:
    path: /rest/security/1.0/hardcoded/{rule-name}
    method: DELETE
    data_selector: null
    params: {}
- name: create_reviewed_line
  endpoint:
    path: /rest/security/latest/review-lines/projects/{projectKey}/repos/{repoSlug}/create
    method: POST
    data_selector: null
    params: {}
- name: delete_reviewed_line
  endpoint:
    path: /rest/security/latest/review-lines/projects/{projectKey}/repos/{repoSlug}/delete
    method: POST
    data_selector: null
    params: {}
- name: delete_all_reviewed_lines
  endpoint:
    path: /rest/security/latest/review-lines/projects/{projectKey}/repos/{repoSlug}/delete
    method: DELETE
    data_selector: null
    params: {}
- name: repository_dashboard
  endpoint:
    path: /security-for-bitbucket/latest/repository-dashboard
    method: GET
    data_selector: findings
    params: {}
- name: Branch Security Analysis
  endpoint:
    path: /security-for-bitbucket/latest/branch-security-analysis
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: export_findings
  endpoint:
    path: /security-for-bitbucket/latest/exporting-a-report-for-external-use
    method: GET
    data_selector: findings
- name: reviewed_findings
  endpoint:
    path: /security-for-bitbucket/latest/reviewed_findings
    method: GET
    data_selector: findings
    params: {}
- name: audit_log
  endpoint:
    path: /rest/auditing/1.0/events
    method: GET
    data_selector: events
    params:
      actions: Security hook skipped
      categories: Soteri Security for Bitbucket
      limit: 100
      outputFormat: json
- name: repository_events
  endpoint:
    path: /rest/audit/latest/projects/{projectKey}/repos/{repoSlug}/events
    method: GET
    data_selector: events
    params: {}
- name: soteri-security
  endpoint:
    path: /soteri-security.yml
    method: GET
    data_selector: rules
    params: {}
- name: security_status_project
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}
    method: GET
    data_selector: status
    params: {}
- name: security_status_repositories
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}/repos
    method: GET
    data_selector: status
    params: {}
- name: trigger_branch_scan
  endpoint:
    path: /rest/security/1.0/scan/{project-key}/repos/{repository-key}
    method: POST
    data_selector: scan
    params:
      branch: default
- name: fetch_scan_results
  endpoint:
    path: /rest/security/1.0/scan/{project-key}/repos/{repository-key}
    method: GET
    data_selector: results
    params:
      branch: default
- name: reviewed_false_positive
  endpoint:
    path: /rest/security/latest/review-lines/projects/{projectKey}/repos/{repoSlug}/create
    method: POST
    data_selector: matchText
    params: {}
- name: delete_reviewed_false_positive
  endpoint:
    path: /rest/security/latest/review-lines/projects/{projectKey}/repos/{repoSlug}/delete
    method: POST
    data_selector: matchText
    params: {}
- name: delete_all_reviewed_false_positives
  endpoint:
    path: /rest/security/latest/review-lines/projects/{projectKey}/repos/{repoSlug}/delete
    method: DELETE
    data_selector: ''
    params:
      confirm: 'true'
- name: global_reviewed_false_positives
  endpoint:
    path: /rest/security/latest/global-reviewed/create
    method: POST
    data_selector: file
    params: {}
- name: delete_global_reviewed_false_positives
  endpoint:
    path: /rest/security/latest/global-reviewed/delete
    method: POST
    data_selector: file
    params: {}
- name: delete_all_global_reviewed_false_positives
  endpoint:
    path: /rest/security/latest/global-reviewed
    method: DELETE
    data_selector: ''
    params:
      confirm: 'true'
- name: total_rescan
  endpoint:
    path: /rest/security/latest/status/total_rescan
    method: PUT
    params:
      email: admin@company.co
- name: project_scan
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}
    method: PUT
    params:
      email: admin@company.co
- name: repository_scan
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}/repos/{repoSlug}
    method: PUT
    params:
      email: admin@company.co
- name: branch_scan
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}/repos/{repoSlug}/branches
    method: PUT
    params:
      email: admin@company.co
- name: cancel_scheduled_scans
  endpoint:
    path: /rest/security/latest/status/scheduled
    method: DELETE
- name: cancel_running_scans
  endpoint:
    path: /rest/security/latest/status/running
    method: DELETE
- name: export_vulnerabilities
  endpoint:
    path: /rest/security/latest/export-report
    method: GET
    params:
      confirmExpensiveOperation: 'true'
- name: export_reviewed_false_positives
  endpoint:
    path: /rest/security/latest/export/reviewed
    method: GET
- name: total_rescan
  endpoint:
    path: /rest/security/latest/status/total_rescan
    method: PUT
- name: scan_status
  endpoint:
    path: /rest/security/latest/status/total_rescan
    method: PUT
    data_selector: scan_results
    params:
      email: manager@company.co
- name: scan_status_project
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}
    method: PUT
    data_selector: scan_results
    params:
      email: manager@company.co
- name: scan_status_repo
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}/repos/{repoSlug}
    method: PUT
    data_selector: scan_results
    params:
      email: manager@company.co
- name: scan_status_branch
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}/repos/{repoSlug}/branches
    method: PUT
    data_selector: scan_results
    params:
      name: main-branch
      email: manager@company.co
- name: project_statuses
  endpoint:
    path: /rest/security/latest/status/projects
    method: GET
    data_selector: data
- name: findings
  endpoint:
    path: /rest/api/findings
    method: GET
    data_selector: findings
    params: {}
- name: audit_log
  endpoint:
    path: /rest/api/audit
    method: GET
    data_selector: auditEvents
- name: scan_space
  endpoint:
    path: /rest/security/latest/scan/space/{key}
    method: POST
- name: scan_content
  endpoint:
    path: /rest/security/latest/scan/content?id={id}
    method: POST
- name: get_scan_results_for_space
  endpoint:
    path: /rest/security/latest/scan/space/{key}
    method: GET
- name: get_scan_results_for_content
  endpoint:
    path: /rest/security/latest/scan/content/{id}
    method: GET
- name: export_findings
  endpoint:
    path: /rest/security/latest/export/findings
    method: GET
- name: export_attachment_scan_info
  endpoint:
    path: /rest/security/latest/export/attachments
    method: GET
- name: settings
  endpoint:
    path: /rest/security/latest/settings
    method: PUT
    data_selector: null
    params: {}
- name: entity_permissions
  endpoint:
    path: /rest/security/latest/settings/entity-permissions
    method: PUT
    data_selector: null
    params: {}
- name: scan_nodes
  endpoint:
    path: /rest/security/latest/cluster/scan-nodes
    method: GET
    data_selector: scanNodeNames
    params: {}
- name: findings
  endpoint:
    path: /rest/security/latest/scan/space/{spaceKey}
    method: GET
    data_selector: findings.values
    params:
      page: 0
      size: 100
- name: reviewed_findings
  endpoint:
    path: /security-analysis/viewing-scan-results
    method: GET
    data_selector: findings
    params: {}
- name: global_reviewed_findings
  endpoint:
    path: /accessing-the-settings-page
    method: POST
    data_selector: global_findings
    params: {}
- name: audit_events
  endpoint:
    path: /rest/api/audit
    method: GET
    data_selector: audit_events
- name: scan_results_project
  endpoint:
    path: /rest/security/latest/scan/project/{key}
    method: GET
    params:
      reviewed: '{reviewed}'
      ruleIds: '{ruleIds}'
      start: '{start}'
      limit: '{limit}'
- name: scan_results_issue
  endpoint:
    path: /rest/security/latest/scan/issue/{key}
    method: GET
    params:
      reviewed: '{reviewed}'
      ruleIds: '{ruleIds}'
      start: '{start}'
      limit: '{limit}'
- name: scan_all_projects
  endpoint:
    path: /rest/security/latest/scan/all
    method: POST
- name: scan_single_project
  endpoint:
    path: /rest/security/latest/scan/project
    method: POST
    params:
      key: '{key}'
- name: scan_single_issue
  endpoint:
    path: /rest/security/latest/scan/issue
    method: POST
    params:
      key: '{key}'
- name: get_scanning_rules
  endpoint:
    path: /rest/security/latest/rules
    method: GET
- name: enable_disable_rule
  endpoint:
    path: /rest/security/latest/rules/built-in/{name}
    method: PUT
    params:
      enabled: '{enabled}'
- name: create_custom_rule
  endpoint:
    path: /rest/security/latest/rules/custom
    method: POST
- name: delete_custom_rule
  endpoint:
    path: /rest/security/latest/rules/custom/{rule-ID}
    method: DELETE
- name: export_dashboard_overview
  endpoint:
    path: /rest/security/latest/dashboard/export
    method: GET
    params:
      name: '{name}'
- name: export_findings_project
  endpoint:
    path: /rest/security/latest/export/project/{key}/findings
    method: GET
    params:
      deduplicate: '{deduplicate}'
      historical: '{historical}'
- name: export_findings_all_projects
  endpoint:
    path: /rest/security/latest/export/reviewed/findings
    method: GET
    params:
      deduplicate: '{deduplicate}'
      historical: '{historical}'
- name: export_reviewed_project
  endpoint:
    path: /rest/security/latest/export/reviewed/project/{key}/findings
    method: GET
- name: export_attachment_scan_info
  endpoint:
    path: /rest/security/latest/export/attachments/project/{key}
    method: GET
- name: view_settings
  endpoint:
    path: /rest/security/latest/settings
    method: GET
- name: change_settings
  endpoint:
    path: /rest/security/latest/settings
    method: PUT
    params:
      autoScan: '{bool}'
      scanAttachments: '{bool}'
      logLevelOverride: '{level}'
      maxRuleTimeout: '{int}'
- name: scanning_rules
  endpoint:
    path: /api/scanning_rules
    method: GET
    data_selector: rules
    params: {}
- name: space_scans
  endpoint:
    path: /api/space_scans
    method: GET
    data_selector: scans
    params: {}
- name: scan_status
  endpoint:
    path: /security-for-confluence/latest/the-soteri-dashboard-viewing-confluence-s-overall-
    method: GET
    data_selector: scan statuses
    params: {}
- name: global_detection_rules
  endpoint:
    path: /security-for-confluence/latest/enabling-and-disabling-global-detection-rules
    method: GET
- name: audited_events
  endpoint:
    path: /api/audited_events
    method: GET
    data_selector: events
- name: pages
  endpoint:
    path: /security-for-confluence/latest/content/pages
    method: GET
- name: blog_posts
  endpoint:
    path: /security-for-confluence/latest/content/blog_posts
    method: GET
- name: comments
  endpoint:
    path: /security-for-confluence/latest/content/comments
    method: GET
- name: whiteboards
  endpoint:
    path: /security-for-confluence/latest/content/whiteboards
    method: GET
- name: databases
  endpoint:
    path: /security-for-confluence/latest/content/databases
    method: GET
- name: attachments
  endpoint:
    path: /security-for-confluence/latest/content/attachments
    method: GET
- name: drafts
  endpoint:
    path: /security-for-confluence/latest/content/drafts
    method: GET
- name: scan_projects
  endpoint:
    path: /security-analysis/scan-projects
    method: POST
- name: view_scan_results
  endpoint:
    path: /security-analysis/view-results
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: global_detection_rules
  endpoint:
    path: /security-for-jira-cloud/latest/enabling-and-disabling-global-detection-rules
    method: GET
- name: audited_events
  endpoint:
    path: /security-for-jira-cloud/latest/viewing-audited-events
    method: GET
    data_selector: events
    params: {}
- name: issue_descriptions
  endpoint:
    path: /api/security/scan/issue-descriptions
    method: GET
    data_selector: descriptions
- name: issue_comments
  endpoint:
    path: /api/security/scan/issue-comments
    method: GET
    data_selector: comments
- name: scan
  endpoint:
    path: /rest/scan
    method: POST
    data_selector: results
    params:
      includeEmpty: 'true'
      includeSkipped: 'true'
      includeAllowlisted: 'true'
- name: AWS_CLIENT_ID
- name: AWS_MWS_KEY
- name: AWS_SECRET_ACCESS_KEY
- name: AZURE_ACCESS_KEY
- name: DYNATRACE_CLIENT_SECRET
- name: EC_PRIVATE_KEY
- name: FACEBOOK_CLIENT_ID
- name: FACEBOOK_SECRET_KEY
- name: GENERIC_API_KEY
- name: GENERIC_PASSWORD
- name: GENERIC_SECRET
- name: GITHUB_KEY
- name: GOOGLE_API_KEY
- name: GOOGLE_OAUTH
- name: GOOGLE_OAUTH_ACCESS_TOKEN
- name: HEROKU_API_KEY
- name: LINKEDIN_CLIENT_ID
- name: LINKEDIN_CLIENT_SECRET
- name: MAILCHIMP_API_KEY
- name: MAILGUN_API_KEY
- name: PASSWORD_IN_URL
- name: PAYPAL_BRAINTREE_ACCESS_TOKEN
- name: PGP_PRIVATE_KEY
- name: PKCS8_PRIVATE_KEY
- name: PYPI_UPLOAD_TOKEN
- name: RSA_PRIVATE_KEY
- name: SENDGRID_API_KEY
- name: SHOPIFY_PARTNER_API_ACCESS_TOKEN
- name: SHOPIFY_SECRETS
- name: SLACK
- name: SLACK_WEBHOOK
- name: SQUARE_ACCESS_TOKEN
- name: SQUARE_OAUTH_SECRET
- name: SSH_PRIVATE_KEY
- name: SSH_PUBLIC_KEY
- name: TROJAN_SOURCE
- name: STRIPE_API_KEY
- name: TWILIO_ACCOUNT_ID
- name: TWILIO_API_KEY
- name: TWITTER_CLIENT_ID
- name: TWITTER_SECRET_KEY
- name: Security Scan Report
  endpoint:
    path: /security-for-bitbucket/3.22.0/security-scan-report
    method: GET
    data_selector: reportData
    params: {}
- name: Branch Scan Report
  endpoint:
    path: /security-for-bitbucket/3.22.0/branch-scan-report
    method: GET
    data_selector: branchData
    params: {}
- name: Export Single Branch
  endpoint:
    path: /security-for-bitbucket/3.22.0/branch-scan-report
    method: GET
- name: Export from Dashboard
  endpoint:
    path: /security-for-bitbucket/3.22.0/exporting-a-security-scan-report-for-external-use
    method: GET
- name: Export via REST Call
  endpoint:
    path: /security-for-bitbucket/3.22.0/rest-api-for-mass-scanning
    method: GET
- name: allow_listing_detections
  endpoint:
    path: /security-for-bitbucket/3.22.0/allow-listing-detected-secrets
    method: GET
    data_selector: allowlist_paths
    params: {}
- name: audit_log
  endpoint:
    path: /security-for-bitbucket/3.22.0/viewing-audited-events
    method: GET
- name: repository_scan_report
  endpoint:
    path: /security-for-bitbucket/3.22.0/branch-scan-report
    method: GET
- name: global_scan_dashboard
  endpoint:
    path: /security-for-bitbucket/3.22.0/the-global-dashboard-viewing-bitbucket-s-overall-s
    method: GET
- name: total_rescan
  endpoint:
    path: /rest/security/latest/status/total_rescan
    method: PUT
    data_selector: null
    params: {}
- name: debug_logging
  endpoint:
    path: /rest/api/latest/logs/logger/io.soteri/debug
    method: PUT
- name: disable_debug_logging
  endpoint:
    path: /rest/api/latest/logs/logger/io.soteri/warn
    method: PUT
- name: trace_logging_hibernate
  endpoint:
    path: /rest/api/latest/logs/logger/org.hibernate.sql/trace
    method: PUT
- name: trace_logging_net_java
  endpoint:
    path: /rest/api/latest/logs/logger/net.java.ao.sql/trace
    method: PUT
- name: trace_logging_querydsl
  endpoint:
    path: /rest/api/latest/logs/logger/com.querydsl.sql/trace
    method: PUT
- name: scan_notifications
  endpoint:
    path: /rest/security/latest/status/total_rescan
    method: PUT
    data_selector: response
    params:
      email: manager@company.co
- name: project_scan_notifications
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}
    method: PUT
    data_selector: response
    params:
      email: manager@company.co
- name: repo_scan_notifications
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}/repos/{repoSlug}
    method: PUT
    data_selector: response
    params:
      email: manager@company.co
- name: branch_scan_notifications
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}/repos/{repoSlug}/branches
    method: PUT
    data_selector: response
    params:
      name: main-branch
      email: manager@company.co
- name: scan_status
  endpoint:
    path: /rest/security/latest/status/active/{size}
    method: PUT
- name: parallel_scans
  endpoint:
    path: /rest/security/latest/cluster/worker-pool/size
    method: GET
- name: scan_nodes
  endpoint:
    path: /rest/security/latest/cluster/scan-nodes
    method: GET
- name: distributed_scanning
  endpoint:
    path: /rest/security/latest/status/cluster/distributed-scanning-enabled
    method: GET
- name: audited_events
  endpoint:
    path: /rest/audit/latest/projects/{projectKey}/repos/{repoSlug}/events
    method: GET
    data_selector: events
    params: {}
- name: total_rescan
  endpoint:
    path: /rest/security/latest/status/total_rescan
    method: PUT
    params:
      force: 'false'
      email: admin@company.co
- name: project_scan
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}
    method: PUT
    params:
      force: 'false'
      email: admin@company.co
- name: repository_scan
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}/repos/{repoSlug}
    method: PUT
    params:
      force: 'false'
      email: admin@company.co
- name: branch_scan
  endpoint:
    path: /rest/security/latest/status/projects/{projectKey}/repos/{repoSlug}/branches
    method: PUT
    params:
      force: 'false'
      email: admin@company.co
- name: cancel_queued_scans
  endpoint:
    path: /rest/security/latest/status/scheduled
    method: DELETE
- name: cancel_running_scans
  endpoint:
    path: /rest/security/latest/status/running
    method: DELETE
- name: export_report
  endpoint:
    path: /rest/security/latest/export-report
    method: GET
    params:
      confirmExpensiveOperation: 'true'
- name: Built-In Scanning Rules
  endpoint:
    path: /security-for-bitbucket/3.22.0/built-in-scanning-rules
    method: GET
    data_selector: rules
    params: {}
notes:
- All requests use basic HTTP authentication.
- Some API calls may fail if called from a host not part of the Bitbucket instance.
- Code with potentially vulnerable content can be blocked, or simply produce a warning.
- Soteri recommends increasing git hook timeout
- Even though the hook can run, warnings can’t be presented to users when they commit
  using the Bitbucket built-in web editor.
- The bypass directive applies to the pre-receive hook only.
- Some objects like Contact may return nulls in deeply nested fields
- Users must have admin rights to access the Project Dashboard.
- Users granted explicit access can also view the dashboard if they have read rights.
- Users with write access to the repository can see the Soteri Repository Dashboard
  tab.
- You can export scan results using one of a few ways, each of which is described
  below.
- Export All Scan Results can run for a long time. Cancelling the download while it
  is in process is not recommended.
- Reviewed findings are not counted towards the total vulnerability count when determining
  whether a repository is secure.
- Allow-listing pragmas allow ignoring false positives when new code is committed
  to the repository.
- Rules can only be enabled and disabled by Bitbucket administrators or anyone that's
  been granted explicit access.
- Please make sure the rules you add aren’t too broad, as they can impact the performance
  of Bitbucket.
- Audit logs can be integrated with external tools to create automated alerts.
- Per-repository configuration is disabled by default.
- Changes to soteri-security.yml files are logged to the Bitbucket audit log.
- Some scanning rules may generate many false positives, and are disabled by default.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Turning on additional logging can generate extremely verbose logs, especially during
  scanning. It should only be enabled temporarily, at the instruction of our support
  team.
- Soteri recommends using the 'Enable additional logging' setting to troubleshoot
  any issue with Security for Bitbucket.
- Enabling this option may cause developer friction.
- There are legitimate reasons to skip scanning for single commits, and Soteri does
  not recommend turning this on without having a process to turn it off to allow for
  edge cases.
- If you have a large Bitbucket instance, all existing branches in all projects and
  repositories will be scanned, which may be very resource-intensive and take a long
  time to complete.
- If the 'Include full finding text in exported reports' setting is disabled, then
  the 'Match text' column won’t be present.
- E-mail notifications are not currently exposed via the user interface – only via
  the REST API.
- Schedules are evaluated in terms of UTC, not local or server time.
- Security for Bitbucket offers a built-in rule to find and block Trojan Source attacks.
- Version 3.9.0 or greater displays unicode bidirectional override characters in the
  Branch Security Analysis.
- Some scanning rules can generate many false positives, requiring more effort to
  disposition findings, and some rules are not universally applicable.
- 'The following rules are disabled in Security for Bitbucket by default: GENERIC_PASSWORD,
  SSH_PUBLIC_KEY, Financial Rules.'
- The Soteri Security Hook failed. This can happen when scanning takes longer than
  the Bitbucket Mesh hook timeout (hooks.callback.timeout).
- Security for Bitbucket caches what’s been scanned, so subsequent push attempts will
  skip scanning what has already been scanned.
- Plugin data store upgrades can take some time to complete on large instances. Soteri
  Security for Bitbucket will write Bitbucket log messages such as '[soteri] Starting
  upgrade to ...' and '[soteri] Finished upgrade to ...' - when troubleshooting this
  issue, these log lines can be used to indicate progress. Do not disable the plugin
  while upgrades are in progress.
- Setting prepareThreshold to 0 hurts overall Bitbucket performance. It should be
  undone after updating Security for Bitbucket.
- Relying on OS permissions to protect credentials on disk may not be approved by
  your organizational security policy
- Scans may be triggered for spaces individually or all at once if you are a Confluence
  administrator.
- Only space administrators, Confluence administrators, or any user granted explicit
  app access can access a space’s Security Analysis.
- Reviewed false positives are stored independently of any findings.
- Some spreadsheet software—notably Microsoft Excel—rounds numbers and/or displays
  them in scientific notation by default.
- Users can export findings in CSV format.
- Settings available for redacting and deduplicating findings in exports.
- Only Confluence administrators and users granted explicit app access can access
  these settings.
- Who changed rules and when can be audited using the Audit Log.
- Scanning rules which exceed memory limits will be automatically disabled, and the
  scan will be marked as failed.
- If a secret in a single page fragment matches more than one rule, only the first
  match will be reported.
- Only Confluence administrators and any user granted explicit app access have access
  to these settings.
- Emails are only sent for new page or blog post versions, not for new attachment
  uploads or comments.
- Most common document types are supported.
- Any files which are 50MB or larger are skipped.
- Archives (e.g. `.zip`, `.rar`, and `.gz`) are not supported yet.
- Changing the “Scan Comments” setting will cause existing scans to be considered
  to have outdated settings, which can be resolved by re-scanning.
- The only way to fully remove a secret in a comment is to delete the entire comment.
- All secrets detected by a security scan should be considered compromised.
- Keep space scans up-to-date should be enabled
- E-mail alerts to content authors should be enabled
- Only Confluence administrators, or any user granted explicit app access, can access
  these settings.
- Some scanning rules can generate many false positives, requiring more effort to
  disposition findings.
- Some rules are not universally applicable.
- Soteri’s apps never log sensitive data to host product logs.
- Atlassian’s support zip utility automatically sanitizes all sensitive data and configuration.
- Relying on OS permissions to protect credentials on disk may not be approved by
  your organizational security policy.
- Only project administrators, Jira administrators, or any user granted explicit app
  access can access a project’s Security Analysis.
- If an issue in a previously scanned project is added, removed, or updated, and automatic
  scanning is disabled, then the Security Analysis will indicate that the project’s
  scan results are stale.
- Uses OAuth2 — requires setup of connected app in Soteri
- Reviewed findings are scoped to a project.
- Identical findings across multiple projects must be reviewed separately.
- Exporting findings is an audited event.
- Only Jira administrators or any user granted explicit app access can access these
  settings.
- Jira audit log access is only available to Jira Administrators.
- Security for Jira imposes hard limits on how much memory a rule can use and how
  long a rule can take to scan a page fragment. Scanning rules which exceed these
  limits will be automatically disabled, and the scan will be marked as failed.
- If a secret in a single page fragment matches more than one rule (built-in or custom),
  only the first match will be reported.
- Creating, updating, and deleting custom detection rules are audited events.
- For Jira versions 8.15 or older, the plugin is unable to automatically scan imported
  projects or issues.
- Auto-scanning can be disabled by a Jira administrator.
- We do not currently support scanning Strict OOXML Office documents.
- Some API calls will fail if called from a host not part of the Jira instance.
- Currently, Security for Jira scans the descriptions, comments, and attachments of
  issues.
- Locking down the permissions on the issue, deleting it, or deleting all the issue
  versions which contained the secret are all good steps, but they don’t sufficiently
  remediate the risk.
- Delete the secret from Jira. Secrets improperly stored in Jira, revoked or not,
  send the signal to users that secrets can be stored this way.
- Keep space scans up-to-date by enabling automatic scanning for new and updated projects.
- Security for Jira by default runs two scans in parallel per node.
- To maximize scanning performance, you can specify the value 0 to use all available
  CPUs.
- By default, Security for Jira limits the time used to apply one rule to a line to
  20 seconds.
- Confluence has no built-in mechanism to detect content that contains sensitive credentials.
- Contains logic to detect generic passwords.
- Some scanning rules are disabled by default.
- Only space administrators and Confluence administrators can access a space’s Security
  Analysis.
- Exporting findings is very time-consuming and there is currently no way to monitor
  the progress of exports.
- Security for Confluence only stores the locations of findings, not their actual
  text.
- Only Confluence Administrators can access these settings.
- Scanning rules which exceed these limits will be automatically disabled, and the
  scan will be marked as failed.
- Due to Atlassian policies, we cannot write to the Atlassian audit log.
- Permissions aren’t customizable in Confluence Cloud’s free plan.
- If Security for Confluence’s read permissions for a space are explicitly removed,
  that space will no longer be able to be scanned.
- Locking down the permissions on the page, deleting it, or deleting all the page
  versions which contained the secret are all good steps, but they don’t sufficiently
  remediate the risk.
- 'The following rules are disabled by default: GENERIC_PASSWORD, SSH_PUBLIC_KEY,
  TROJAN_SOURCE, BANK_INFORMATION, SOCIAL_SECURITY_NUMBERS.'
- Generic password detection is turned off by default.
- Scanning may not be happening if specific rules are turned off.
- Using a fake key will not be detected.
- Keys in screenshots won't be detected as OCR scanning is not supported.
- Lack of generic rules for certain patterns.
- Findings can now be scoped to the specific item or the whole space optionally.
- Previously-unreviewable findings can now be reviewed for the specific item scope.
- A review reason can now be specified when a finding is reviewed.
- Currently, Security for Jira scans issue descriptions, including history, and comments
  on issues.
- Contains logic to detect generic API Keys.
- Only project administrators and Jira administrators can access a project’s Security
  Analysis.
- Finding count does not include any findings which have been reviewed.
- Users performing a project import will have to manually scan projects created from
  these processes.
- Only Jira Administrators can access these settings.
- Disabling the option to include full finding text will remove specific columns from
  CSV exports.
- Security for Jira can only scan pages which it has permission to read.
- If Security for Jira’s read permissions for a project are explicitly removed, that
  project will no longer be able to be scanned.
- Locking down the permissions on the issue or deleting it are good steps to take,
  but they don’t sufficiently remediate the risk.
- The GENERIC_PASSWORD rule is off by default because it’s a bit different than the
  other rules – rather than matching a very specific key type, with minimal false
  positives, it searches for general occurrences and variations of the term 'password'.
- This rule is meant to catch the unintentional use of passwords in code or documentation.
- Due to its broad nature, this rule generates many false positives; to enable it
  would require your organization to set up a process to review and disposition them.
- Soteri’s Scanning Service does not store any user data. All content sent to the
  Scanning API is immediately discarded after scanning.
- Scan jobs in general should not hit the 32MB limit. Please contact Soteri Support
  if you do.
- Currently, only UTF-8 encoded text files can be scanned. Any other files will be
  skipped.
- When the global hook enabled is set to either 'when explicitly enabled or inherited'
  or 'always', the global hook mode can be configured to be Block or Warn.
- Some objects may return nulls in deeply nested fields
- Allow-listing must be inline. Multi-line allow-listing is not supported.
- Allow-listed files can be configured on a repository level in the soteri-security.yml
  file.
- Using per-repository configuration files requires enabling it in the global plugin
  settings – it is not enabled by default.
- Even if a user is granted access to the global Security Scan Report, they will only
  see repositories for which they have Read permissions.
- The custom text provided will be displayed as a header of a rejection banner, followed
  by list of detected vulnerabilities. It affects all repositories in the Bitbucket
  instance.
- The per-repository rules toggle on Security For Bitbucket’s global settings page.
- Scrubbing the secret from git history doesn’t sufficiently remediate risk.
- Soteri recommends to change the secret.
- Install Security for Bitbucket 3.8.0 or greater – this is the first version with
  the TROJAN_SOURCE rule. It is enabled by default.
- Version 3.9.0 or greater also displays unicode bidirectional override characters
  in the Security Scan Report.
- Bitbucket 7 is not compatible with git 2.36.x or higher.
- Security for Bitbucket 3.20.0 or higher dropped support for Bitbucket 6.
- If you have a large Bitbucket instance, all existing branches in all projects and
  repositories will be scanned, which may be very resource-consumptive and may take
  a long time to complete.
- Run security audits for committed API keys, passwords, and more.
errors:
- '401 Unauthorized: Recheck basic auth credentials'
- '403 Forbidden: Check user permissions for accessing the API'
- Commit skipped warning displayed to the pusher.
- Audit event generated for skipped files.
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REVIEW_ALREADY_EXISTS: This finding has already been reviewed.'
- '401 Unauthorized: Recheck user credentials'
- '404 Not Found: Verify the projectKey or repositorySlug'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Scan node configuration is empty. All nodes will participate in scanning
- Timeout waiting for response from RPC client for git hook
- Commit does not exist in repository
- 'Drafts: error'
- Scan results are stale if content in a previously scanned space is added, removed,
  or updated and automatic scanning is disabled.
- Scan results are outdated if a global detection rule is toggled after a space is
  scanned.
- 'UNSUPPORTED_FORMAT: The file format is not supported'
- 'ENCRYPTED: The file is encrypted and cannot be scanned'
- 'TOO_BIG: The file exceeds the size limit for scanning'
- 'PARSE_ERROR: There was an error parsing the file'
- 'NOT_FOUND: The file could not be found'
- 'MALFORMED: The file is malformed'
- 'EXCEEDED_MEMORY_LIMIT: The scanning process exceeded the memory limit'
- 'EXCEEDED_TIME_LIMIT: The scanning process exceeded the time limit'
- '401 Unauthorized: Check your username and password.'
- Scan results are stale
- Scan results are outdated
- 'UNSUPPORTED_FORMAT: If the file is not scanned, then this will have a reason code.'
- 'ENCRYPTED: If the file is not scanned, then this will have a reason code.'
- 'TOO_BIG: If the file is not scanned, then this will have a reason code.'
- 'PARSE_ERROR: If the file is not scanned, then this will have a reason code.'
- 'NOT_FOUND: If the file is not scanned, then this will have a reason code.'
- 'MALFORMED: If the file is not scanned, then this will have a reason code.'
- 'EXCEEDED_MEMORY_LIMIT: If the file is not scanned, then this will have a reason
  code.'
- 'EXCEEDED_TIME_LIMIT: If the file is not scanned, then this will have a reason code.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://soteri.io
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
