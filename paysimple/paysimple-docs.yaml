resources:
- name: order
  endpoint:
    path: /order/{id}
    method: GET
    data_selector: data
    params: {}
- name: card_sale
  endpoint:
    path: /ps/transact/card/sale
    method: POST
    data_selector: ''
    params: {}
- name: PaySimpleAndroidSdk
  endpoint:
    path: /sdk
    method: GET
    data_selector: sdk_info
- name: recurring_payment
  endpoint:
    path: /v4/recurringpayment/
    method: DELETE
- name: create_custom_field_template
  endpoint:
    path: /custom_field/template
    method: POST
    data_selector: id
    params: {}
- name: get_custom_field_template
  endpoint:
    path: /custom_field/template/{Id}
    method: GET
    data_selector: data
    params: {}
- name: update_custom_field_template
  endpoint:
    path: /custom_field/template/{Id}
    method: PUT
    data_selector: null
    params: {}
- name: delete_custom_field_template
  endpoint:
    path: /custom_field/template/{Id}
    method: DELETE
    data_selector: null
    params: {}
- name: offering
  endpoint:
    path: /catalog/offering/o_5b3f8823253bb36700dc3663
    method: GET
    data_selector: data
    params: {}
- name: create_offering
  endpoint:
    path: /catalog/offering
    method: POST
    data_selector: ''
    params: {}
- name: update_offering
  endpoint:
    path: /catalog/offering/o_5b3f8823253bb36700dc3663
    method: PUT
    data_selector: ''
    params: {}
- name: activate_offering
  endpoint:
    path: /catalog/offering/o_5b3f8823253bb36700dc3663/activate
    method: PUT
    data_selector: ''
    params: {}
- name: deactivate_offering
  endpoint:
    path: /catalog/offering/o_5b3f8823253bb36700dc3663/deactivate
    method: PUT
    data_selector: ''
    params: {}
- name: checkout_token
  endpoint:
    path: /v4/checkouttoken
    method: POST
    data_selector: Response
- name: payment
  endpoint:
    path: /v4/payment
    method: POST
    data_selector: Response
- name: recurring_payment
  endpoint:
    path: /v4/recurringpayment//pause
    method: PUT
- name: device_registration
  endpoint:
    path: /activate
    method: POST
    data_selector: response
    params: {}
- name: payment_sale
  endpoint:
    path: /sale
    method: POST
    data_selector: response
    params:
      allow_manual_entry: true
- name: PsBluetoothDevice
  endpoint:
    path: /BluetoothDevice
    method: GET
- name: PsDeviceInfo
  endpoint:
    path: /DeviceInfo
    method: GET
- name: PsSaleRequest
  endpoint:
    path: /SaleRequest
    method: POST
- name: PsSaleResponse
  endpoint:
    path: /SaleResponse
    method: GET
- name: payment_created
  endpoint:
    path: /payment_created
    method: POST
    data_selector: data
- name: credit_created
  endpoint:
    path: /credit_created
    method: POST
    data_selector: data
- name: payment_voided
  endpoint:
    path: /payment_voided
    method: POST
    data_selector: data
- name: payment_refunded
  endpoint:
    path: /payment_refunded
    method: POST
    data_selector: data
- name: payment_failed
  endpoint:
    path: /payment_failed
    method: POST
    data_selector: data
- name: payment_submitted_for_settlement
  endpoint:
    path: /payment_submitted_for_settlement
    method: POST
    data_selector: data
- name: payment_returned
  endpoint:
    path: /payment_returned
    method: POST
    data_selector: data
- name: payment_settled
  endpoint:
    path: /payment_settled
    method: POST
    data_selector: data
- name: customer_created
  endpoint:
    path: /customer_created
    method: POST
    data_selector: event
    params: {}
- name: customer_updated
  endpoint:
    path: /customer_updated
    method: POST
    data_selector: event
    params: {}
- name: customer_deleted
  endpoint:
    path: /customer_deleted
    method: POST
    data_selector: event
    params: {}
- name: offering_created
  endpoint:
    path: /offering_created
    method: POST
    data_selector: event
    params: {}
- name: offering_updated
  endpoint:
    path: /offering_updated
    method: POST
    data_selector: event
    params: {}
- name: offering_deleted
  endpoint:
    path: /offering_deleted
    method: POST
    data_selector: event
    params: {}
- name: checkout_token
  endpoint:
    path: /checkouttoken
    method: POST
    data_selector: Response
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: Response
    params: {}
- name: credit_card
  endpoint:
    path: /v4/account/creditcard
    method: PUT
    data_selector: null
    params: {}
- name: credit_card
  endpoint:
    path: /path/to/credit_card_endpoint
    method: GET
    data_selector: Response
    params: {}
- name: customer
  endpoint:
    path: /path/to/customer_endpoint
    method: GET
    data_selector: Response
    params: {}
- name: recurring_payment
  endpoint:
    path: /v4/recurringpayment//resume
    method: PUT
- name: SuccessReceiptOptions
  endpoint:
    path: /success-receipt-options
    method: GET
    data_selector: SuccessReceiptOptions
    params: {}
- name: FailureReceiptOptions
  endpoint:
    path: /failure-receipt-options
    method: GET
    data_selector: FailureReceiptOptions
    params: {}
- name: Transact Refund
  endpoint:
    path: /api-docs/index.html#tag/Transaction/operation/Sale
    method: POST
    data_selector: TransactionID
    params: {}
- name: merchant_info
  endpoint:
    path: /merchant/info
    method: GET
    data_selector: data
- name: merchants
  endpoint:
    path: /merchants
    method: GET
    data_selector: data
- name: customer
  endpoint:
    path: /customer
    method: POST
    data_selector: null
    params: {}
- name: credit_card
  endpoint:
    path: /account/creditcard
    method: POST
    data_selector: null
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: null
    params: {}
- name: payments
  endpoint:
    path: /v4/recurringpayment/{ScheduleId}/payments
    method: GET
- name: merchant_fees
  endpoint:
    path: /ps/merchant_fees/search
    method: POST
    data_selector: data
    params:
      time_zone: Pacific Standard Time
      filters: []
- name: customer
  endpoint:
    path: /v4/customer/
    method: DELETE
- name: merchant_info
  endpoint:
    path: /merchant/info
    method: GET
    data_selector: data
    params: {}
- name: list_merchants
  endpoint:
    path: /merchants
    method: GET
    data_selector: data
    params: {}
- name: refund_payment
  endpoint:
    path: /payment//reverse
    method: PUT
    data_selector: null
    params: {}
- name: mark_payment_status
  endpoint:
    path: /MarkPaymentStatus
    method: PUT
    data_selector: null
    params: {}
- name: customer_payments
  endpoint:
    path: /customer/{customerId}/payments
    method: GET
    data_selector: payments
    params: {}
- name: checkout_token
  endpoint:
    path: /checkouttoken
    method: POST
    data_selector: Response
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: Response
    params: {}
- name: customer_token
  endpoint:
    path: /customer/{customerId}/token
    method: GET
    data_selector: Response
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
    params: {}
- name: customer_token
  endpoint:
    path: /customer/{customer_id}/token
    method: GET
    data_selector: JwtToken
- name: Create Webhook Subscription
  endpoint:
    path: /ps/webhook/subscription
    method: POST
    data_selector: data
    params: {}
- name: Update Webhook Subscription
  endpoint:
    path: /ps/webhook/subscription/{id}
    method: PUT
    data_selector: null
    params: {}
- name: Get Webhook Subscription
  endpoint:
    path: /ps/webhook/subscription/{id}
    method: GET
    data_selector: data
    params: {}
- name: Get All Webhook Subscriptions
  endpoint:
    path: /ps/webhook/subscriptions
    method: GET
    data_selector: data
    params: {}
- name: Delete Webhook Subscription
  endpoint:
    path: /ps/webhook/subscription/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: Manually Resend Webhooks
  endpoint:
    path: /ps/webhook/manually_resend_webhooks
    method: PUT
    data_selector: null
    params: {}
- name: Test Webhooks
  endpoint:
    path: /ps/webhook/subscription/test
    method: POST
    data_selector: data
    params: {}
- name: paysimple_sale_response
  endpoint:
    path: /paysimple/sale/response
    method: GET
    data_selector: response
- name: available_device_response
  endpoint:
    path: /paysimple/available/devices
    method: GET
    data_selector: devices
- name: payment_options
  endpoint:
    path: /merchant/paymentoptions
    method: GET
    data_selector: paymentOptions
- name: customers
  endpoint:
    params:
      sortby: ''
      lite: 'true'
- name: ach_accounts
  endpoint:
    path: /customer/{customerId}/achaccounts
    method: GET
- name: recurring_payment
  endpoint:
    path: /recurringpayment/suspend
    method: PUT
- name: buy_now_button
  endpoint:
    path: /buy-now-button
    method: GET
    data_selector: button
    params: {}
- name: payment
  endpoint:
    path: /v4/payment
    method: POST
    data_selector: ReturnUrl
- name: EMV Transaction Approve / Decline Triggers
  endpoint:
    path: /emv/approve_decline
    method: GET
    data_selector: triggers
    params: {}
- name: Swiped/Keyed Transaction Approve / Decline Triggers
  endpoint:
    path: /swiped_keyed/approve_decline
    method: GET
    data_selector: triggers
    params: {}
- name: Address Verification (AVS) Triggers
  endpoint:
    path: /avs/triggers
    method: GET
    data_selector: triggers
    params: {}
- name: Card Verification Value (CVV2/CVC2/CID) Triggers
  endpoint:
    path: /cvv/triggers
    method: GET
    data_selector: triggers
    params: {}
- name: merchant
  endpoint:
    path: /get_or_list_merchant
    method: GET
    data_selector: merchant_id
    params: {}
- name: sale
  endpoint:
    path: /sale
    method: POST
    data_selector: sale_response
    params: {}
- name: flag_card_for_update
  endpoint:
    path: /payment_method/vault/{paymentMethodToken}/flag_for_update
    method: POST
    data_selector: null
    params: {}
- name: copy_customer_card_to_vault
  endpoint:
    path: /customer/credit_card/{accountId}/copy_to_vault
    method: POST
    data_selector: data
    params: {}
- name: create_webhook_subscription
  endpoint:
    path: /ps/webhook/subscription
    method: POST
    data_selector: data
    params: {}
- name: update_webhook_subscription
  endpoint:
    path: /ps/webhook/subscription/{id}
    method: PUT
    data_selector: data
    params: {}
- name: get_webhook_subscription
  endpoint:
    path: /ps/webhook/subscription/{id}
    method: GET
    data_selector: data
    params: {}
- name: get_all_webhook_subscriptions
  endpoint:
    path: /ps/webhook/subscriptions
    method: GET
    data_selector: data
    params: {}
- name: delete_webhook_subscription
  endpoint:
    path: /ps/webhook/subscription/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: manually_resend_webhooks
  endpoint:
    path: /ps/webhook/manually_resend_webhooks
    method: PUT
    data_selector: null
    params: {}
- name: ach_account
  endpoint:
    path: /v4/account/ach
    method: PUT
- name: Create Hosted Payment Link
  endpoint:
    path: /ps/payment_link
    method: POST
    data_selector: data
    params: {}
- name: Delete Hosted Payment Link
  endpoint:
    path: /ps/payment_link/{id}
    method: DELETE
    data_selector: data
    params: {}
- name: customer
  endpoint:
    path: /v4/customer/{CustomerId}/{AccountId}
    method: PUT
    data_selector: CreditCard
    params: {}
- name: device
  endpoint:
    path: /api/devices
    method: GET
- name: configure_reader_types
  endpoint:
    path: configureReaderTypes
    method: void
    data_selector: isReaderTypesConfigured
    params:
      configuredReaderTypes: NSSet
- name: get_configured_reader_types
  endpoint:
    path: getConfiguredReaderTypes
    method: NSSet
    data_selector: currentConfiguredReaderTypes
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: GET
- name: stopCurrentFlow
  endpoint:
    path: /stopCurrentFlow
    method: POST
    data_selector: handler
    params: {}
- name: getDeviceInfo
  endpoint:
    path: /getDeviceInfo
    method: GET
    data_selector: handler
    params: {}
- name: customer
  endpoint:
    path: /customer
    method: POST
    data_selector: response
    params: {}
- name: customer_accounts
  endpoint:
    path: /customer//accounts
    method: GET
notes:
- For more information on all of the sale endpoint properties, see our Payments API
  Reference Guide
- Version 1.7.0 of the PaySimple Legacy Android SDK will be labeled 'paysimpleandroidsdk-release-1.7.0.aar'
- min Android 10 API 29; max Android 14 API 34
- A recurring payment can only be deleted if no payments have been created for the
  schedule and the StartDate is set to today or in the future.
- When retrieved calling Get Recurring Payment, deleted recurring payments will still
  return, however the http response code will be '203 - Non-Authoritative Information'.
- Indicates the current state of the Payment object.
- Content-Length header must be set on every API request.
- To confirm that a schedule has been paused, retrieve the recurring payment object
  and check the `ScheduleStatus` field.
- Paused schedules will have a `ScheduleStatus` of `Suspended`.
- Devices must be connected directly to the internet via ethernet or wifi.
- All payment requests are made from the server application.
- In some Xcode environments, these general settings may be represented by 'Frameworks,
  Libraries, and Embedded Content'.
- In order to speed up the loading of our embeddables, place the script in the <head>
  tag of your HTML.
- If 3DS is not supported, any 3DS challenges that are encountered will result in
  an automatic failure.
- Only include a return_url if the customer is in your checkout process and is available
  to complete 3DS.
- Once the customer has verified the payment, they will be returned to the return_url
  that was provided in the initial sale call.
- PaySimple requires an Authorization Header to be included in each request.
- If you are issued a reseller API key, input the string `reseller` as the authentication
  header scheme, followed by a space and the reseller API key.
- When testing the onboarding in Sandbox, environment meta data must also be sent
  as environment = sbx.
- Requires setup of API credentials in the settings.
- PaySimple receipt and failed payment notifications will not be sent to the customer
  when a recurring payment is generated via the API.
- 'PCI Compliance Warning: Any time cardholder data passes through your server, it
  can increase your PCI Compliance burden. Consider utilizing a PaySimple checkout
  form if it fits your use case.'
- Any successfully authorized payment that has not yet been submitted as part of an
  end-of-day batch can be voided.
- Credit Card transactions can typically be voided until 11PM Eastern Time and ACH
  transactions can typically be voided until 5PM Eastern Time on the CanVoidUntil
  date.
- If a payment request is declined by the processor or fails for another reason, the
  status property will be set to `Failed` and the `FailureData` object will be populated.
- The code will not change, so it's safe to create code logic reacting to a specific
  failure code.
- Short description of the error. This is in human-readable format, so it is a good
  practice to display this text to the user in your interface. Don't base logic in
  your code on this text, as it may change from time to time.
- Instructions to the merchant on what steps, if any, can be taken to correct the
  issue. Don't base logic in your code on this text, as it may change from time to
  time.
- '`true` indicates that the failure was due to the transaction being declined by
  the processor; `false` indicates a failure due to any other reason.'
- All deletes are soft deletes in the PaySimple system.
- Payment data such as card number, expiration date and CVV will all be associated
  with a one-time use (nonce) payment_method_token.
- The token is valid for 15 minutes from creation.
- Using Tap To Pay on Android does not support debuggable applications for security
  and compliance reasons.
- When testing or developing against the Sandbox environment, it is often helpful
  to generate payment errors to ensure your code handles these properly.
- Most merchants are set up for credit card processing using TSYS and Forte for ACH.
  If you are unsure which processor you use, contact your PaySimple support representative.
- Requires setup of API credentials
- Stripe has processing amount limits that must be from $0.50 to $999,999.99
- 'The sale endpoint will not support the following features. They can be passed in
  but will be ignored: allow_partial_approvals, confirm_original_amount, allow_debit,
  allow_manual_entry, prompt_for_signature'
- 'Tipping functionality within the PaySimple API will not work with Stripe: option_type
  percent/amount values are ignored (always percentage), options passed in values
  are ignored (default are 15%, 20% and 25%), display_other_amount boolean is ignored,
  custom amount is always displayed, tip_amount parameter response will always be
  present regardless if tip options were passed in the request.'
- The tip_adjustment endpoint will not accept values that are less than or equal to
  the original authorized amount.
- Cards from American Express will overcharge rather than true tip adjustment for
  authorization.
- The credit endpoint is not supported with Stripe at this time. This extends to the
  device credit endpoint as well.
- Stripe cannot currently support a card-present transaction through their API and
  will only support it with payments made through Terminal devices OR they can be
  supported via api as card not present. This impacts Payments API sale - sale_type
  property.
- If cardpresent is attempted via API on a non-stripe device, it will be ran as CardNotPresent.
- While using PaySimple API’s to Activate or Update a device you can pass idle_message
  to update the message displayed on the device. Stripe terminals do not display an
  idle message, this value will be ignored.
- Once the Delete endpoint is called for a terminal, the terminal must be restarted
  to show a new activation code.
- 'New Stripe customers created will be visible in the Stripe Dashboard. Account Holder
  name will carry over to PaySimple Product (Xenon) grid, if available – exceptions
  are as follows: Contactless, Wallet thru mobile device, Swipe (Stripe uses track
  2 data – only digits).'
- Unencrypted Devices are still supported, such as the MagTek Dynamag USB swiper,
  Rambler, iDynamo (iOS) and uDynamo (Android) are still supported.
- Verifone MX915, Ingenico iSMP4, Ingenico IPP320 and IDTech swiper are not supported.
- The Stripe supported refund window is 180 days.
- PaySimple Card Account Updater (CAU) is not needed. Cards stored in the Stripe vault
  will automatically be updated.
- Do not allow the customer id to be passed in from the UI to prevent unauthorized
  access.
- Webhook messages are lightweight by design
- Each subscription may subscribe to multiple event types
- Webhook events may be delivered more than once
- Some methods must be started on a new thread
- Check if the merchant is approved by a Credit Card or ACH processor
- The SDK will not be compatible with apps using support libraries. Make sure you
  have migrated your app to AndroidX.
- Do not manually delete locations in the Stripe dashboard. Manual deletion of locations
  in the Stripe dashboard will interfere with functionality of the SDK.
- Manual deletion of locations in the Stripe dashboard will interfere with functionality
  of the SDK.
- The SDK needs to know where payments occur. If we can't determine the location of
  a device, payments may become disabled and fail with an error code of 4096 until
  location access is restored.
- To confirm that a schedule has been suspended, retrieve the recurring payment object
  and check the `ScheduleStatus` field is `Suspended`.
- Sandbox - It is possible to void a settled transaction. This will not occur in Production.
- Developers will need to send environment meta data – environment = sbx
- Only include a ReturnUrl if the customer is in your checkout process and is available
  to complete 3DS.
- Captcha will reduce fraud. Adding captcha to your PMT hosting page is a requirement
  in order to prevent fraudulent transactions.
- It’s recommended to use the 'programmatically invoke the challenge' option when
  the 'Submit Payment' button is clicked.
- It is also highly recommended to send an 'action' value when generating the reCAPTCHA
  token, and verifying that value with the verification response.
- It’s standard to use a threshold 'good score' of 0.5, but you can adjust based on
  data collected on the reCAPTCHA Admin Dashboard.
- Only 1 digital wallet option will display which is determined by the user's configuration
  when accessing the webpage PMT is on.
- It may take up to 6 hours after the merchant's payment domain is verified in their
  Stripe dashboard for that to reflect in PaySimple's systems and for Apple Pay to
  be available in PMT for the merchant.
- If changes are entered for any other fields, the system will ignore them and retain
  existing values.
- You must include the entire set of Customer Object Attributes in your change request,
  even if you are changing just one of the fields. Failure to do this will result
  in any non-included fields being set to null.
- If you know a field is set to null, and you want to keep it that way, you do not
  need to include it in the Request.
- This webhook is functional only for applications to the Forte credit card or Forte
  ACH processing platform
- Subscribe to the Merchant Activated for Payment Webhook.
- PMT Library is required to collect card data.
- The timestamp must be within a 5 minute window of the current time to account for
  clock skew.
- Cards must be stored in the Payments API vault to use the Account Updater
- Flag requests should be submitted 5 business days before a recurring payment is
  scheduled to be run
- Hosted Payment Links do not expire.
- Only one transaction should be made per hosted payment link.
- Authorization via client token is required to use this SDK.
- Each time the SDK is initialized, the configuredReaderTypes of the SDK will default
  to discovering bluetooth devices only.
- Consumers can determine their own best practice for their particular use case.
- If utilizing information in delegates to update UI, dispatch UI changes to the main
  thread.
- Ensure the reader is charged greater than 20 percent to avoid unintended behavior.
- Pairing the reader through mobile device's settings may make the reader unavailable.
- 'Your UI credentials allow you to log into your PaySimple merchant account online
  at: https://payments.paysimple.com/Login/Login.'
- Your API credentials are delivered by email and are used when creating an authorization
  header for any request you create.
- Tap To Pay will not work on Beta releases of iOS
- Each iPhone is Limited to Three Merchant IDs
- Call rate limited. Please do not call this endpoint to retrieve all payments on
  a periodic basis.
- Receipt options allow setting payment receipt email settings. By default, no messages
  will be sent.
- The SDK provides an ECPSdkDelegate protocol to help expose delegate methods to report
  on SDK Events.
- Currently only officially supported for Stripe M2 Reader device.
errors:
- '203 Non-Authoritative Information: Indicates that the recurring payment has been
  deleted.'
- timeout
- bad_request
- server_error
- unauthorized
- unknown
- Payment Flow Not Supported. Try a different payment method.
- '401 Unauthorized: Check API credentials and permissions.'
- '500: Internal Server Error.'
- 'InvalidInput: Invalid Credit Card Issuer'
- 'HttpStatus: BadRequest'
- '400: Bad Request: Invalid Input.'
- '401: Unauthorized: Error getting an API token. Check your authentication credentials
  and resubmit. NOTE: A JSON response will not be returned only the HTTP header will
  be shown'
- '403: Forbidden: Permission is denied to perform this action'
- '404: Not Found: The requested information cannot be found. It may not exist or
  may have been deleted.'
- '405: Method Not Allowed: The requested method/verb (e.g. GET/PUT/POST) is not allowed
  or supported for the specified object.'
- '500: Internal Server Error: System Error - Try again. If the error persists, contact
  PaySimple API Support for assistance.'
- 'InvalidInput: This is the most common error type, and occurs if there is a problem
  with the data entered in the Request.'
- 'InvalidPermissions: Permission is denied to perform this action'
- 'NotFound: The requested information cannot be found. It may not exist or may have
  been deleted'
- 'UnexpectedError: System Error. Check for coding errors and then try again. If the
  error persists, note the Trace Code included in the error and provide it to PaySimple
  API Support for assistance.'
- Code: '4005'
  Description: Do Not Honor
  MerchantActionText: Try a different payment method
  IsDecline: true
- If the device being used is not compatible with Tap To Pay, the callback will contain
  an ECPSdkCallbackError with a message indicating that your device cannot be used
  with TapToPay.
- '4005: Do Not Honor'
- '4007: Pick up card, special condition (fraud account)'
- '4014: Invalid card number'
- '4054: Invalid Expiration Date'
- '4041: Lost card, pick up (fraud account)'
- '4004: Pick up Card (no Fraud)'
- '4003: Invalid Merchant ID'
- '4226: There is an error with your account configuration.'
- '4220: CVV2 Value supplied is invalid'
- '4058: Transaction not permitted-Terminal'
- '4504: Merchant''s daily limit exceeded'
- '4507: Customer account is in the ''known bad'' account list.'
- '4503: Merchant monthly limit exceeded (EFT only).'
- '4506: Duplicate transaction'
- '4502: Merchant''s maximum transaction amount exceeded'
- '4510: Invalid Merchant ID or Password - Contact customer service'
- '4501: Account ABA number is invalid.'
- '4523: Previously open account has been closed'
- '4524: No Account/unable to locate account'
- '4525: Account holder has stopped payment on this single transaction'
- '4526: Account number structure is invalid'
- '500: Internal Server Error'
- '400: Bad Request'
- 'card_declined: generic_decline'
- 'card_declined: insufficient_funds'
- 'card_declined: lost_card'
- 'card_declined: stolen_card'
- 'expired_card: n/a'
- 'incorrect_cvc: n/a'
- 'processing_error: n/a'
- 'incorrect_number: n/a'
- 'UNEXPECTED_DISCONNECT: Ensure the device is powered on.'
- 'NOT_CONNECTED: Device is not connected properly.'
- 'BATTERY_LOW: Device battery is low.'
auth_info:
  mentioned_objects:
  - JwtToken
client:
  base_url: https://api.paysimple.com/v4
  auth:
    type: oauth2
    location: header
    header_name: Authorization
    merchantKey: <YOUR MERCHANT KEY>
    flow: refresh_token
    token_url: https://login.evercommerce.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
  headers:
    Accept: application/json
    Stripe-Version: 2020-08-27; unified_accounts__beta=v1
    Content-Type: application/json
    Authorization: Reseller API key
    PaySimple-Merchant-Id: '{{ dlt.secrets[''paysimple_merchant_id''] }}'
    auth_header: reseller {{your_sandbox_reseller_key}}
  paginator:
    type: page
    page_size_param: size
    default_page_size: 25
  styles:
    container: {}
    label: {}
    field: {}
    validation: {}
  text:
    labels:
      cardNumber: Credit Card Number
      expiration: Expiration (mm/yy)
      cvv: CVV
      postalCode: Zip/Postal Code
      routingNumber: Routing Number
      accountNumber: Account Number
      accountType: Account Type
      bankName: Bank Name
    validation:
      required:
        default: Field is required
        cardNumber: Card Number is required
        expiration: Please enter expiration
        cvv: CVV is required
        postalCode: Please enter Zip/Postal Code
      invalidCardNumber: Invalid Card Number
      invalidCardType: Invalid Card Type
      invalidExpiration: Invalid Expiration
      invalidCvv: Invalid CVV
      invalidPostalCode: Invalid Postal Code
      invalidRoutingNumber: Invalid Routing Number
      invalidAccountNumber: Invalid Account Number
    placeholder:
      cardNumber: Credit Card Number
      expiration: Expiration (mm/yy)
      cvv: CVV
      postalCode: Zip Code
      routingNumber: Routing Number
      accountNumber: Account Number
      accountType: Account Type
      bankName: Bank Name
  resources:
  - name: credit_card_accounts
    endpoint:
      path: /customer/{customerId}/creditcardaccounts
      method: GET
      data_selector: records
      params: {}
source_metadata: null
