resources:
- name: customers
  endpoint:
    path: /v0/customers
    method: GET
    params:
      offset: int32
      limit: int32
- name: customers
  endpoint:
    path: /v0/customers
    method: GET
- name: create_customer
  endpoint:
    path: /reference/createhaycustomer
    method: POST
- name: update_customer_status
  endpoint:
    path: /reference/changehaycustomerstatus
    method: PATCH
- name: customer_creation
  endpoint:
    path: /docs/custom-data-for-customer-creation
    method: GET
    data_selector: customData
    params: {}
- name: update_account_risk_level
  endpoint:
    path: /update/account/risk/level
    method: POST
    data_selector: message
    params: {}
- name: create_customer
  endpoint:
    path: /create/customer
    method: POST
    data_selector: customerDetails
    params: {}
- name: update_customer_status
  endpoint:
    path: /update/customer/status
    method: POST
    data_selector: customerDetails
    params: {}
- name: create_account
  endpoint:
    path: /create/account
    method: POST
    data_selector: accountHayId
    params: {}
- name: Get Account Details
  endpoint:
    path: /reference/gethayaccount
    method: GET
    data_selector: null
    params: {}
- name: Get cards by Account Id
  endpoint:
    path: /reference/getcardsforaccountid
    method: GET
    data_selector: null
    params: {}
- name: Get Auth Hold by Account Id
  endpoint:
    path: /reference/getpendingholds
    method: GET
    data_selector: null
    params: {}
- name: Block Account
  endpoint:
    path: /reference/blockaccount
    method: POST
    data_selector: null
    params: {}
- name: Unblock Account
  endpoint:
    path: /reference/unblockaccount
    method: POST
    data_selector: null
    params: {}
- name: Close an Account
  endpoint:
    path: /reference/closeaccount
    method: POST
    data_selector: null
    params: {}
- name: Search Account
  endpoint:
    path: /reference/searchaccounts
    method: GET
    data_selector: null
    params: {}
- name: Create Custom Data
  endpoint:
    path: /reference/createaccountcustomdata
    method: POST
    data_selector: null
    params: {}
- name: Delete Custom Data
  endpoint:
    path: /reference/deleteaccountcustomdata
    method: DELETE
    data_selector: null
    params: {}
- name: Create Rule for Account
  endpoint:
    path: /reference/addaccountrule
    method: POST
    data_selector: null
    params: {}
- name: Get Rule for Account by Rule Id
  endpoint:
    path: /reference/getaccountrulebyid
    method: GET
    data_selector: null
    params: {}
- name: Get All Rules of Account
  endpoint:
    path: /reference/getaccountrules
    method: GET
    data_selector: null
    params: {}
- name: Delete Rule from Account
  endpoint:
    path: /reference/disablerule
    method: DELETE
    data_selector: null
    params: {}
- name: account_status
  endpoint:
    path: /account/status
    method: GET
- name: Set Account Limit
  endpoint:
    path: /reference/setaccountlimit
    method: GET
- name: Get Account Limits
  endpoint:
    path: /reference/getaccountlimits
    method: GET
- name: Remove limits
  endpoint:
    path: /reference/deleteaccountlimit
    method: GET
- name: Update Account Overdraft Limit
  endpoint:
    path: /reference/updateoverdraftlimit
    method: GET
- name: Get Risk Level
  endpoint:
    path: /reference/getaccountrisklevel
    method: GET
- name: Update Risk Level
  endpoint:
    path: /reference/changeaccountrisklevel
    method: GET
- name: Account Closure
  endpoint:
    path: /reference/closeaccount
    method: GET
    data_selector: result
    params: {}
- name: Create Rule for Account
  endpoint:
    path: /reference/addaccountrule
    method: POST
- name: Get Rule for Account by Rule Id
  endpoint:
    path: /reference/getaccountrulebyid
    method: GET
- name: Get All Rules of Account
  endpoint:
    path: /reference/getaccountrules
    method: GET
- name: Delete Rule from Account
  endpoint:
    path: /reference/disablerule
    method: DELETE
- name: create_group
  endpoint:
    path: /reference/createhaygroup
    method: POST
- name: create_account
  endpoint:
    path: /reference/createaccount
    method: POST
- name: add_customers_to_group
  endpoint:
    path: /reference/addcustomerstogroup
    method: POST
- name: Physical Card
  endpoint:
    path: /cards/physical
    method: POST
- name: Virtual Card
  endpoint:
    path: /cards/virtual
    method: POST
- name: create_card
  endpoint:
    path: /reference/createhaycard
    method: POST
- name: get_card_by_id
  endpoint:
    path: /reference/getcard
    method: GET
- name: replace_card_lost_stolen
  endpoint:
    path: /reference/reissuehaycard
    method: POST
- name: renew_card
  endpoint:
    path: /reference/renewcard
    method: POST
- name: convert_card
  endpoint:
    path: /reference/convertcard
    method: POST
- name: activate_card
  endpoint:
    path: /reference/activatecard
    method: POST
- name: block_card
  endpoint:
    path: /reference/blockcard
    method: POST
- name: unblock_card
  endpoint:
    path: /reference/unblockcard
    method: POST
- name: cancel_card
  endpoint:
    path: /reference/cancelcard
    method: POST
- name: change_card_pin
  endpoint:
    path: /reference/changecardpin
    method: POST
- name: get_card_pin_status
  endpoint:
    path: /reference/getcardpinstatus
    method: GET
- name: unblock_card_pin
  endpoint:
    path: /reference/unblockcardpin
    method: POST
- name: get_wallets_details
  endpoint:
    path: /reference/getdigitalwalletdetails
    method: GET
- name: get_provisioning_details
  endpoint:
    path: /reference/getoemprovisioningdata
    method: GET
- name: enrol_card_to_rewards
  endpoint:
    path: /reference/rewards-1
    method: POST
- name: Havenâ€™t Started Card Provisioning
  endpoint:
    path: /docs/apple-and-google-pay-notifications
    method: POST
    data_selector: reminders
    params: {}
- name: Card Provisioning Started but Not Completed
  endpoint:
    path: /docs/apple-and-google-pay-notifications
    method: POST
    data_selector: reminders
    params: {}
- name: Card Provision Successfully
  endpoint:
    path: /docs/apple-and-google-pay-notifications
    method: POST
    data_selector: reminders
    params: {}
- name: Card Provisioned but No Transaction Made
  endpoint:
    path: /docs/apple-and-google-pay-notifications
    method: POST
    data_selector: reminders
    params: {}
- name: Create Credit Transaction for an Account
  endpoint:
    path: /reference/createcredittransactionv1
    method: POST
    data_selector: transaction
    params:
      transactionChannel: APPLE_REWARD
- name: cards_rewards
  endpoint:
    path: /cards/{cardId}/rewards
    method: POST
    data_selector: null
    params: {}
- name: authorisation_hold
  endpoint:
    path: /docs/card-transactions
    method: POST
    data_selector: transactionEvent
    params: {}
- name: settlement
  endpoint:
    path: /docs/card-transactions
    method: POST
    data_selector: transactionEvent
    params: {}
- name: initial_hold_webhook
  endpoint:
    path: /webhooks/initial_hold
    method: POST
    data_selector: transactionEvent
    params: {}
- name: incremental_hold_webhook
  endpoint:
    path: /webhooks/incremental_hold
    method: POST
    data_selector: transactionEvent
    params: {}
- name: settlement_webhook
  endpoint:
    path: /webhooks/settlement
    method: POST
    data_selector: transactionEvent
    params: {}
- name: Products
  endpoint:
    path: /reference/getallproducts
    method: GET
- name: Create Account
  endpoint:
    path: /reference/createaccount
    method: POST
- name: Create Stack
  endpoint:
    path: /reference/createstack
    method: POST
- name: Update Stack
  endpoint:
    path: /reference/updatestack
    method: PUT
- name: Get Stacks of Account
  endpoint:
    path: /reference/getallstacks
    method: GET
- name: Close Stack
  endpoint:
    path: /reference/closestack
    method: DELETE
- name: Transfer from Account to Stack
  endpoint:
    path: /reference/accounttostacktransfer
    method: POST
- name: Transfer funds from Stack to Account
  endpoint:
    path: /reference/stacktoaccounttransfer
    method: POST
- name: Transfer between Stacks of Account
  endpoint:
    path: /reference/stacktostacktransfer
    method: POST
- name: Get Transaction by Stack ID
  endpoint:
    path: /reference/gettransactionsforstack
    method: GET
- name: Get all Stack Transactions by Account ID
  endpoint:
    path: /reference/getallstacktransactions
    method: GET
- name: Initiate Cash Transfer
  endpoint:
    path: /reference/maketransferv1
    method: POST
    data_selector: transactionEvent
    params: {}
- name: Search Transactions
  endpoint:
    path: /reference/searchtransactions
    method: GET
    data_selector: transactions
    params: {}
- name: Get Transaction by ID
  endpoint:
    path: /reference/gettransactionbyid
    method: GET
    data_selector: transaction
    params: {}
- name: Webhook Notification
  endpoint:
    path: /webhook-notification
    method: POST
    data_selector: notification
    params: {}
- name: interbank_transfer_in
  endpoint:
    path: /webhooks/interbank_transfer_in
    method: POST
    data_selector: transactionEvent
    params: {}
- name: interbank_transfer_out
  endpoint:
    path: /webhooks/interbank_transfer_out
    method: POST
    data_selector: transactionEvent
    params: {}
- name: Initiate Cash Transfer
  endpoint:
    path: /reference/maketransferv1
    method: POST
    data_selector: null
    params: {}
- name: Get outbound Direct Debit by ID
  endpoint:
    path: /reference/getdirectdebitv1
    method: GET
    data_selector: null
    params: {}
- name: Get outbound Direct Debits by date
  endpoint:
    path: /reference/getdirectdebitsv1
    method: GET
    data_selector: null
    params: {}
- name: PayID Resolution
  endpoint:
    path: /reference/resolvepayid
    method: GET
    data_selector: PayID and account details
    params: {}
- name: Get PayID details
  endpoint:
    path: /reference/getpayid
    method: GET
    data_selector: PayID details
    params: {}
- name: Check PayID Availability
  endpoint:
    path: /reference/getpayidavailability
    method: GET
    data_selector: Availability status
    params: {}
- name: Get PayID de-register history
  endpoint:
    path: /reference/getpayidderegisterhistory
    method: GET
    data_selector: De-registration details
    params: {}
- name: Update PayID details
  endpoint:
    path: /reference/updatepayiddetails
    method: POST
    data_selector: Update status
    params: {}
- name: Update PayID Status
  endpoint:
    path: /reference/updatepayidstatus
    method: POST
    data_selector: Update PayID status
    params: {}
- name: Get PayIDs by Account ID
  endpoint:
    path: /reference/getpayidsforaccount
    method: GET
    data_selector: PayIDs associated with account
    params: {}
- name: Register a PayID
  endpoint:
    path: /reference/postpayidregister
    method: POST
    data_selector: Registration status
    params: {}
- name: Make Adhoc Payment
  endpoint:
    path: /reference/makeadhocpayment
    method: POST
- name: Create Mandate
  endpoint:
    path: /reference/createmandate
    method: POST
    data_selector: mandateId
- name: Make Adhoc Payment
  endpoint:
    path: /reference/makeadhocpayment
    method: POST
    data_selector: mandateId
- name: Generate mock Receive a Payment Instruction
  endpoint:
    path: /reference/generatereceiveapaymentinstruction
    method: POST
    data_selector: message
- name: generate_mock_npp_inbound_transaction
  endpoint:
    path: /reference/generateinboundnpptransactionv2
    method: POST
    data_selector: message
- name: create_mandate
  endpoint:
    path: /v1/payto/payer/mandates
    method: POST
    data_selector: mandateId
    params: {}
- name: resolve_mandate
  endpoint:
    path: /v1/payto/payer/mandates/{mandateId}/resolve
    method: PATCH
    data_selector: message
    params: {}
- name: generate_mock_mandate_notification_for_initiator
  endpoint:
    path: /reference/generatemandatenotificationforinitiator
    method: POST
    data_selector: message
- name: mandate
  endpoint:
    path: /v1/payto/initiator/mandates
    method: POST
    data_selector: mandateId
- name: payment_instruction
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/instructions
    method: POST
    data_selector: instructionId
- name: mandate_payment_status
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/instructions/{instructionId}/status
    method: GET
    data_selector: transactionStatus
- name: search_payment_instructions
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/search
    method: GET
    data_selector: paymentInstructions
- name: Create BPAY Biller for Account
  endpoint:
    path: /reference/createbpaybiller
    method: POST
    data_selector: records
    params: {}
- name: BPAY billers for account
  endpoint:
    path: /reference/retrievebillers
    method: GET
    data_selector: records
    params: {}
- name: Initiate BPAY payment
  endpoint:
    path: /reference/makebpaypayment
    method: POST
    data_selector: records
    params: {}
- name: Validate BPAY details
  endpoint:
    path: /reference/validatebpay
    method: POST
    data_selector: records
    params: {}
- name: Retrieve BPAY Biller
  endpoint:
    path: /reference/retrievebpaybiller
    method: GET
    data_selector: records
    params: {}
- name: Update BPAY Biller
  endpoint:
    path: /reference/updatebpaybiller
    method: PUT
    data_selector: records
    params: {}
- name: Get Scheduled Payments by Account Id
  endpoint:
    path: /reference/getscheduledpayments
    method: GET
- name: Get Scheduled Payment by Payment Id
  endpoint:
    path: /reference/getscheduledpaymentbyid
    method: GET
- name: Cancel Scheduled Payment
  endpoint:
    path: /reference/cancelscheduledpayment
    method: POST
- name: Create liquidity alerting Threshold
  endpoint:
    path: /reference/createliquiditythreshold
    method: GET
- name: Get all Liquidity Alerting Thresholds
  endpoint:
    path: /reference/getclientliquiditythresholds
    method: GET
- name: Update liquidity alerting Threshold
  endpoint:
    path: /reference/updateliquiditythreshold
    method: GET
- name: Get client Liquidity
  endpoint:
    path: /reference/getclientliquidity
    method: GET
- name: email
  endpoint:
    path: /email
    method: POST
- name: sms
  endpoint:
    path: /sms
    method: POST
- name: notification
  endpoint:
    path: /notification
    method: POST
- name: hold
  endpoint:
    path: /holds
    method: POST
- name: update_hold
  endpoint:
    path: /holds/{holdId}
    method: PATCH
- name: transaction
  endpoint:
    path: /transactions
    method: POST
- name: create_customer
  endpoint:
    path: /reference/createhaycustomer
    method: POST
- name: create_group
  endpoint:
    path: /reference/createhaygroup
    method: POST
- name: add_customers_to_group
  endpoint:
    path: /reference/addcustomerstogroup
    method: POST
- name: create_account_for_customer
  endpoint:
    path: /reference/createhayaccount
    method: POST
- name: create_account_for_group
  endpoint:
    path: /reference/createhayaccountforgroup
    method: POST
- name: update_account_risk_level
  endpoint:
    path: /reference/changeaccountrisklevel
    method: PATCH
- name: update_customer_status
  endpoint:
    path: /reference/changehaycustomerstatus
    method: PATCH
- name: update_overdraft_limit
  endpoint:
    path: /reference/updateoverdraftlimit
    method: PATCH
- name: create_card_for_customer
  endpoint:
    path: /reference/createhaycard
    method: POST
- name: activate_card
  endpoint:
    path: /reference/activatecard
    method: POST
- name: update_card_preferences
  endpoint:
    path: /reference/updatepaymentpreferences
    method: PATCH
- name: Exchange External Token
  endpoint:
    path: /reference/postexchangerequestusingpost
    method: POST
- name: Elevate Access Token
  endpoint:
    path: /reference/postelevaterequestusingpost
    method: POST
- name: Exchange External Token
  endpoint:
    path: /reference/postexchangerequestusingpost
    method: POST
- name: Elevate Access Token
  endpoint:
    path: /reference/postelevaterequestusingpost
    method: POST
- name: Check PayID availability
  endpoint:
    path: /v0/payids/{payId}/availability
    method: GET
    data_selector: availability
    params:
      payIdType: string
- name: payid_availability
  endpoint:
    path: /payids/payId/availability
    method: GET
- name: Check PayID availability
  endpoint:
    path: /payids/payId/availability
    method: GET
- name: Get PayID details
  endpoint:
    path: /payid
    method: GET
- name: Get PayID de-register history
  endpoint:
    path: /payidderegisterhistory
    method: GET
- name: deregister_history
  endpoint:
    path: /v0/payids/{payId}/deregister-history
    method: GET
    data_selector: array of objects
    params:
      payId: string
- name: payid_deregister_history
  endpoint:
    path: /v0/payids/{payId}/deregister-history
    method: GET
    data_selector: array of objects
- name: deregister-history
  endpoint:
    path: /payId/deregister-history
    method: GET
- name: deregister_history
  endpoint:
    path: /payids/payId/deregister-history
    method: GET
- name: check_availability
  endpoint:
    path: /payid/availability
    method: GET
- name: update_details
  endpoint:
    path: /payid/details
    method: POST
- name: resolve_payid
  endpoint:
    path: /payids/{payId}/resolve
    method: GET
    data_selector: object
    params:
      payIdType: EMAIL, TELEPHONE, INDIVIDUAL_AUSTRALIAN_BUSINESS, ORGANISATION
- name: resolve_payid
  endpoint:
    path: /payids/payId/resolve
    method: GET
    data_selector: object
- name: resolve_payid
  endpoint:
    path: /payId/resolve
    method: GET
- name: update_payid_status
  endpoint:
    path: /v0/payids/{payId}/status
    method: PATCH
    data_selector: message
- name: payid_status
  endpoint:
    path: /v0/payids/{payId}/status
    method: PATCH
    data_selector: message
    params: {}
- name: update_payid_status
  endpoint:
    path: /v0/payids/payId/status
    method: PATCH
- name: Update PayID status
  endpoint:
    path: /v0/payids/payId/status
    method: PATCH
    data_selector: object
    params: {}
- name: bpay_biller
  endpoint:
    path: /v1/accounts/{accountId}/bpay-billers
    method: POST
    data_selector: billerDetails
- name: bpay_billers_for_account
  endpoint:
    path: /v1/accounts/accountId/bpay-billers
    method: POST
    data_selector: object
    params: {}
- name: initiate_bpay_payment
  endpoint:
    path: /reference/makebpaypayment
    method: POST
    data_selector: object
    params: {}
- name: bpay_billers_for_account
  endpoint:
    path: /v1/accounts/accountId/bpay-billers
    method: POST
- name: initiate_bpay_payment
  endpoint:
    path: /reference/makebpaypayment
    method: POST
- name: initiate_bpay_payment
  endpoint:
    path: /v1/accounts/{accountId}/payments/bpay
    method: POST
    data_selector: outcome
    params: {}
- name: create_bpay_biller
  endpoint:
    path: /v1/accounts/accountId/payments/bpay
    method: POST
    data_selector: object
- name: validate_bpay
  endpoint:
    path: /v1/accounts/accountId/payments/bpay
    method: POST
    data_selector: object
- name: create_bpay_biller
  endpoint:
    path: /v1/accounts/accountId/payments/bpay
    method: POST
- name: validate_bpay
  endpoint:
    path: /reference/validatebpay
    method: POST
- name: update_bpay_biller
  endpoint:
    path: /v1/bpay-billers/{billerId}
    method: PATCH
    data_selector: object
    params:
      billerId: uuid
- name: bpay_biller
  endpoint:
    path: /v1/bpay-billers/{billerId}
    method: PATCH
    data_selector: object
    params:
      billerId: uuid
- name: retrieve_bpay_biller
  endpoint:
    path: /v1/bpay-billers/billerId
    method: PATCH
- name: BPAY Biller
  endpoint:
    path: /v1/bpay-billers/billerId
    method: PATCH
- name: stacks
  endpoint:
    path: /v0/accounts/{accountId}/stacks
    method: GET
    params:
      includeClosed: 'false'
- name: stacks
  endpoint:
    path: /accounts/{accountId}/stacks
    method: GET
    data_selector: array of objects
    params:
      accountId: uuid
      includeClosed: boolean
- name: stacks
  endpoint:
    path: /accounts/accountId/stacks
    method: GET
    params:
      includeClosed: 'false'
- name: stacks
  endpoint:
    path: /v0/accounts/accountId/stacks
    method: GET
    params:
      includeClosed: 'false'
- name: create_new_stack
  endpoint:
    path: /v0/accounts/{accountId}/stacks
    method: POST
- name: stacks
  endpoint:
    path: /accounts/accountId/stacks
    method: POST
- name: stack_transactions
  endpoint:
    path: /accounts/accountId/stacktransactions
    method: GET
- name: stacks
  endpoint:
    path: /accounts/accountId/stacks
    method: POST
- name: stack_transactions
  endpoint:
    path: /accounts/accountId/stacktransactions
    method: POST
- name: stack_transactions
  endpoint:
    path: /v0/accounts/{accountId}/stacks/transactions
    method: GET
    data_selector: array of objects
    params:
      accountId: uuid
      offset: integer
      limit: integer
      type: string
- name: transactions
  endpoint:
    path: /accounts/accountId/stacks/transactions
    method: GET
- name: stack_transactions
  endpoint:
    path: /v0/accounts/{accountId}/stacks/transactions
    method: GET
    data_selector: array of objects
    params:
      offset: required
      limit: required
- name: Transfer funds from Stack to Stack
  endpoint:
    path: /v0/accounts/{accountId}/stacks/transactions
    method: POST
- name: transactions
  endpoint:
    path: /v0/accounts/accountId/stacks/transactions
    method: GET
- name: transfer_funds
  endpoint:
    path: /v0/accounts/{accountId}/stacks/transactions
    method: POST
- name: Update Stack
  endpoint:
    path: /v0/accounts/{accountId}/stacks/{stackId}
    method: PUT
- name: Update Stack
  endpoint:
    path: /v0/accounts/{accountId}/stacks/{stackId}
    method: PUT
    data_selector: object
    params: {}
- name: transfer_funds
  endpoint:
    path: /v0/accounts/accountId/stacks/stackId
    method: PUT
    data_selector: object
    params: {}
- name: stack_transactions
  endpoint:
    path: /v0/accounts/{accountId}/stacks/{stackId}/transactions
    method: GET
    data_selector: array of objects
    params:
      offset: integer
      limit: integer
- name: stack_transactions
  endpoint:
    path: /v0/accounts/{accountId}/stacks/{stackId}/transactions
    method: GET
    data_selector: array of objects
    params:
      offset: integer
      limit: integer
- name: stack_transactions
  endpoint:
    path: /accounts/accountId/stacks/stackId/transactions
    method: GET
- name: transactions
  endpoint:
    path: /accounts/accountId/stacks/stackId/transactions
    method: GET
- name: stack_transfer
  endpoint:
    path: /v0/accounts/accountId/stacks/stackId/transfer-in
    method: POST
- name: get_stack_transactions
  endpoint:
    path: /reference/gettransactionsforstack
    method: GET
- name: Transfer funds from Account to Stack
  endpoint:
    path: /v0/accounts/accountId/stacks/stackId/transfer-out
    method: POST
    headers:
      accept: application/json
      content-type: application/json
- name: transfer_funds
  endpoint:
    path: /accounts/accountId/stacks/stackId/transfer-out
    method: POST
- name: mandate_ids
  endpoint:
    path: /v1/payto/initiator/mandates
    method: GET
    data_selector: array of uuids
    params:
      creditorAccountId: required
- name: mandate_ids
  endpoint:
    path: /v1/payto/initiator/mandates
    method: GET
    params:
      creditorAccountId: uuid
- name: mandates
  endpoint:
    path: /v1/payto/initiator/mandates
    method: GET
- name: mandate
  endpoint:
    path: /v1/payto/initiator/mandates
    method: POST
    data_selector: mandateId
- name: mandate
  endpoint:
    path: /v1/payto/initiator/mandates
    method: POST
    data_selector: object
    params: {}
- name: mandate_ids
  endpoint:
    path: /v1/payto/initiator/mandates
    method: POST
- name: mandate_ids
  endpoint:
    path: /v1/payto/initiator/mandates
    method: POST
- name: amend_mandate
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}
    method: PUT
- name: amend_mandate
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}
    method: PUT
- name: mandate_actions
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/actions
    method: GET
    data_selector: actions
    params:
      mandateId: uuid
      pendingOnly: boolean
      from: string
      to: string
- name: mandate_actions
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/actions
    method: GET
    data_selector: actions
    params:
      pendingOnly: boolean
      from: string
      to: string
- name: mandate_actions
  endpoint:
    path: /v1/payto/initiator/mandates/mandateId/actions
    method: GET
- name: mandate_actions
  endpoint:
    path: /v1/payto/initiator/mandates/mandateId/actions
    method: GET
- name: payment_instruction_status
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/instructions/{instructionId}/status
    method: GET
    data_selector: transactionStatus
    params: {}
- name: Mandate Status
  endpoint:
    path: /initiator/mandates/mandateId/instructions/instructionId/status
    method: GET
- name: mandate_instruction_status
  endpoint:
    path: /v1/payto/initiator/mandates/mandateId/instructions/instructionId/status
    method: GET
    data_selector: object
    params: {}
- name: amend_mandate_payment_terms
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/payment_terms
    method: PATCH
    data_selector: message
    params:
      mandateId: uuid
- name: amend_mandate_payment_terms
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/payment_terms
    method: PATCH
- name: payment_terms
  endpoint:
    path: /v1/payto/initiator/mandates/mandateId/payment_terms
    method: PATCH
- name: payment_instruction_status
  endpoint:
    path: /reference/getmandatepaymentstatus
    method: GET
- name: set_scheduled_payment_initiation_request_amount
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/payments/amount
    method: PATCH
- name: set_scheduled_payment_initiation_request_amount
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/payments/amount
    method: PATCH
    data_selector: message
    params:
      mandateId: uuid
      amount:
        notificationId: uuid
- name: resolve_mandate
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/resolve
    method: PATCH
- name: resolve_mandate
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/resolve
    method: PATCH
    data_selector: message
    params: {}
- name: Release Mandate by Initiator
  endpoint:
    path: /v1/payto/initiator/mandates/mandateId/resolve
    method: PATCH
- name: Search payments instructions by Mandate ID
  endpoint:
    path: /reference/searchpaymentsinstructions
    method: GET
- name: suspend_mandate
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/suspend
    method: PATCH
    data_selector: null
    params: {}
- name: Release Mandate by Initiator
  endpoint:
    path: /v1/payto/initiator/mandates/mandateId/resolve
    method: PATCH
- name: Search payments instructions by Mandate ID
  endpoint:
    path: /v1/payto/initiator/mandates/mandateId/instructions
    method: GET
- name: suspend_mandate
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/suspend
    method: PATCH
- name: mandates
  endpoint:
    path: /v1/payto/mandates
    method: GET
    data_selector: records
    params: {}
- name: amend_mandate_by_payer
  endpoint:
    path: /v1/payto/payer/mandates/{mandateId}
    method: PUT
    data_selector: object
    params: {}
- name: mandates
  endpoint:
    path: /v1/payto/mandates
    method: GET
    data_selector: mandates
- name: Get Mandate by ID
  endpoint:
    path: /v1/payto/payer/mandates/mandateId
    method: PUT
    headers:
      accept: application/json
      content-type: application/json
- name: amend_mandate_by_payer
  endpoint:
    path: /v1/payto/payer/mandates/{mandateId}
    method: PUT
    data_selector: object
    params:
      mandateId: uuid
      debtorAccountId: uuid
- name: mandate_actions
  endpoint:
    path: /v1/payto/payer/mandates/{mandateId}/actions
    method: GET
    data_selector: actions
- name: cancel_mandate_by_payer
  endpoint:
    path: /v1/payto/payer/mandates/{mandateId}/cancel
    method: PATCH
- name: cancel_mandate_by_payer
  endpoint:
    path: /v1/payto/payer/mandates/{mandateId}/cancel
    method: PATCH
    data_selector: message
    params: {}
- name: Cancel Mandate by Payer
  endpoint:
    path: /v1/payto/payer/mandates/mandateId/cancel
    method: PATCH
- name: Get Mandate Actions by Payer
  endpoint:
    path: /reference/getmandateactionsbypayer
    method: GET
- name: release_mandate
  endpoint:
    path: /v1/payto/payer/mandates/{mandateId}/release
    method: PATCH
- name: release_mandate
  endpoint:
    path: /v1/payto/payer/mandates/{mandateId}/release
    method: PATCH
- name: Release Mandate by Payer
  endpoint:
    path: /v1/payto/payer/mandates/mandateId/release
    method: PATCH
- name: resolve_mandate_pending_action_by_payer
  endpoint:
    path: /v1/payto/payer/mandates/{mandateId}/resolve
    method: PATCH
    data_selector: ''
    params: {}
- name: release_mandate
  endpoint:
    path: /v1/payto/payer/mandates/mandateId/release
    method: PATCH
- name: cancel_mandate
  endpoint:
    path: /v1/payto/payer/mandates/cancel
    method: PATCH
- name: suspend_mandate
  endpoint:
    path: /v1/payto/payer/mandates/suspend
    method: PATCH
- name: suspend_mandate
  endpoint:
    path: /v1/payto/payer/mandates/{mandateId}/suspend
    method: PATCH
- name: resolve_mandate
  endpoint:
    path: /v1/payto/payer/mandates/{mandateId}/resolve
    method: PATCH
    data_selector: ''
    params: {}
- name: suspend_mandate
  endpoint:
    path: /v1/payto/payer/mandates/mandateId/suspend
    method: PATCH
- name: make_adhoc_payment
  endpoint:
    path: /v1/payto/adhocpayment
    method: POST
- name: suspend_mandate
  endpoint:
    path: /v1/payto/payer/mandates/{mandateId}/suspend
    method: PATCH
    data_selector: message
    params: {}
- name: make_adhoc_payment
  endpoint:
    path: /v1/payto/payments/adhoc
    method: POST
- name: check_payto_support
  endpoint:
    path: /v1/payto/supported-bsbs/{bsbNumber}
    method: GET
    data_selector: supported
    params:
      bsbNumber: string
- name: transactions_search
  endpoint:
    path: /transactions/search
    method: POST
    data_selector: null
    params:
      limit: 1-1000
      offset: offset
      fromDateTimeUtc: required
      toDateTimeUtc: required
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: transactions_search
  endpoint:
    path: /v0/transactions/search
    method: POST
    headers:
      accept: application/json
      content-type: application/json
- name: search_transactions
  endpoint:
    path: /v0/transactions/search
    method: POST
    data_selector: response
    params:
      limit: required
      offset: required
- name: create_credit_transaction
  endpoint:
    path: /v1/transactions/credit
    method: POST
    data_selector: outcome
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: create_credit_transaction
  endpoint:
    path: /v1/transactions/credit
    method: POST
    data_selector: outcome
    params: {}
- name: transaction
  endpoint:
    path: /v1/transactions/{transactionHayId}
    method: GET
- name: debit_transaction
  endpoint:
    path: /v1/transactions/debit
    method: POST
    data_selector: object
- name: identity_verification_case
  endpoint:
    path: /v1/kyc/identity-verification/cases
    method: POST
- name: Get Scheduled Payment by Payment ID for an Account
  endpoint:
    path: /accounts/accountId/scheduledPayments/paymentId/cancel
    method: POST
- name: identity_verification_case
  endpoint:
    path: /v1/kyc/identity-verification/cases
    method: POST
    data_selector: mobileToken
- name: approve_document_check
  endpoint:
    path: /v1/kyc/customerId/onboarding/documentCheck/approval
    method: POST
- name: approve_aml_check
  endpoint:
    path: /approveamlkyccheck
    method: POST
- name: approve_sanctions_check
  endpoint:
    path: /approvesanctioncheck
    method: POST
- name: create_customer
  endpoint:
    path: /v0/customers/create
    method: POST
- name: approve_document_check
  endpoint:
    path: /v1/kyc/customerId/onboarding/documentCheck/approval
    method: POST
- name: approve_aml_check
  endpoint:
    path: /reference/approveamlkyccheck
    method: POST
- name: approve_sanctions_check
  endpoint:
    path: /reference/approvesanctioncheck
    method: POST
- name: get_account_by_customer_id
  endpoint:
    path: /v0/customers/{customerHayId}/accounts
    method: GET
- name: accounts
  endpoint:
    path: /v0/customers/customerHayId/accounts
    method: GET
- name: customer
  endpoint:
    path: /customers/{customerId}
    method: GET
    data_selector: object
    params:
      customerId: uuid
- name: customers
  endpoint:
    path: /v0/customers/create
    method: POST
- name: search_customers
  endpoint:
    path: /v0/customers/search
    method: POST
- name: update_customer
  endpoint:
    path: /v0/customers/{customerId}
    method: PATCH
- name: customer
  endpoint:
    path: /customers/{customerId}
    method: GET
    data_selector: object
    params:
      customerId: uuid
- name: block_customer
  endpoint:
    path: /v0/customers/customerId/status
    method: PATCH
    data_selector: details
- name: unblock_customer
  endpoint:
    path: /v0/customers/customerId/status
    method: PATCH
    data_selector: details
- name: customers
  endpoint:
    path: /v0/customers/{customerId}
    method: PATCH
- name: unblock_customer
  endpoint:
    path: /v0/customers/{customerId}/unblock
    method: POST
    data_selector: message
    params:
      customerId: uuid
      note: string
- name: unblock_customer
  endpoint:
    path: /v0/customers/customerId/unblock
    method: POST
- name: update_customer_status
  endpoint:
    path: /changehaycustomerstatus
    method: PATCH
- name: customer_status
  endpoint:
    path: /v0/customers/{customerId}/status
    method: PATCH
    data_selector: response
    params:
      customerId: uuid
      newStatus: string
- name: direct_debits
  endpoint:
    path: /v0/direct-debits
    method: GET
    data_selector: array of objects
    params:
      fromUtc: required
      toUtc: required
      offset: required
      limit: required
      status: optional
- name: block_customer
  endpoint:
    path: /reference/blockcustomer
    method: POST
- name: unblock_customer
  endpoint:
    path: /reference/unblockcustomer
    method: POST
- name: update_customer_status
  endpoint:
    path: /reference/changehaycustomerstatus
    method: PATCH
- name: direct_debits
  endpoint:
    path: /direct-debits
    method: GET
- name: create_outbound_direct_debit
  endpoint:
    path: /v0/direct-debits
    method: POST
    data_selector: details
- name: unblock_customer
  endpoint:
    path: /v0/customers/{customerId}/unblock
    method: POST
    data_selector: message
    params: {}
- name: unblock_customer
  endpoint:
    path: /v0/customers/customerId/unblock
    method: POST
    headers:
      accept: application/json
      content-type: application/json
- name: outbound_direct_debits
  endpoint:
    path: /v0/direct-debits
    method: POST
    data_selector: object
- name: outbound_direct_debit_by_id
  endpoint:
    path: /v0/direct-debit
    method: GET
    data_selector: object
- name: outbound_direct_debits
  endpoint:
    path: /v0/direct-debits
    method: GET
    data_selector: array of objects
    params:
      fromUtc: date
      toUtc: date
      offset: int32
      limit: int32
      status: string
- name: outbound_direct_debit_by_id
  endpoint:
    path: /v0/direct-debits/{transactionId}
    method: GET
    data_selector: object
    params:
      transactionId: uuid
- name: direct_debits
  endpoint:
    path: /direct-debits
    method: GET
- name: outbound_direct_debits
  endpoint:
    path: /direct-debits
    method: GET
- name: create_outbound_direct_debit
  endpoint:
    path: /v0/direct-debits
    method: POST
    data_selector: transactionDetails
    params: {}
- name: direct_debits
  endpoint:
    path: /v1/direct-debits
    method: GET
    data_selector: array of objects
    params:
      fromUtc: date
      toUtc: date
      offset: int32
      limit: int32
      status: string
      senderAccountNumber: string
- name: outbound_direct_debit_by_id
  endpoint:
    path: /v0/direct-debits/{transactionId}
    method: GET
    data_selector: object
    params:
      transactionId: uuid
- name: Get outbound Direct Debit by ID
  endpoint:
    path: /direct-debits
    method: GET
- name: Create outbound Direct Debit
  endpoint:
    path: /direct-debits
    method: POST
- name: Get outbound Direct Debits by date
  endpoint:
    path: /v0/direct-debits
    method: GET
- name: Get outbound Direct Debit by ID
  endpoint:
    path: /v0/direct-debits/transactionId
    method: GET
- name: create_outbound_direct_debit
  endpoint:
    path: /v1/direct-debits
    method: POST
    data_selector: object
    params: {}
- name: get_outbound_direct_debits_by_date
  endpoint:
    path: /direct-debits
    method: POST
    data_selector: records
- name: get_outbound_direct_debit_by_id
  endpoint:
    path: /direct-debit
    method: GET
    data_selector: records
- name: direct_debits
  endpoint:
    path: /v1/direct-debits
    method: GET
    data_selector: records
    params:
      fromUtc: ''
      toUtc: ''
      offset: ''
      limit: ''
      status: ''
- name: outbound_direct_debit
  endpoint:
    path: /v1/direct-debits/{transactionId}
    method: GET
    data_selector: ''
- name: Get outbound Direct Debit by ID
  endpoint:
    path: /v1/direct-debits
    method: GET
- name: merchant_category_codes
  endpoint:
    path: /v0/mccs
    method: GET
    data_selector: array of objects
    params: {}
- name: Get outbound Direct Debit by ID
  endpoint:
    path: /getdirectdebitv1
    method: GET
- name: Get outbound Direct Debits by date
  endpoint:
    path: /getdirectdebitsv1
    method: GET
- name: direct_debits
  endpoint:
    path: /v1/direct-debits
    method: POST
- name: direct_debit_by_id
  endpoint:
    path: /v1/direct-debit
    method: GET
- name: thresholds
  endpoint:
    path: /v1/liquidity/thresholds
    method: GET
    data_selector: array of objects
    params:
      active: boolean
- name: liquidity_thresholds
  endpoint:
    path: /liquidity/thresholds
    method: GET
- name: client_liquidity
  endpoint:
    path: /liquidity
    method: GET
- name: merchant_category_codes
  endpoint:
    path: /v0/mccs
    method: GET
    data_selector: array of objects
- name: liquidity_threshold
  endpoint:
    path: /v1/liquidity/thresholds
    method: POST
    data_selector: object
    params: {}
- name: liquidity_thresholds
  endpoint:
    path: /v1/liquidity/thresholds
    method: GET
    data_selector: array of objects
    params:
      active: boolean
- name: liquidity_thresholds
  endpoint:
    path: /liquidity/thresholds
    method: GET
- name: update_liquidity_threshold
  endpoint:
    path: /liquidity/thresholds
    method: PUT
- name: create_liquidity_threshold
  endpoint:
    path: /liquidity/thresholds
    method: POST
- name: liquidity_thresholds
  endpoint:
    path: /liquidity/thresholds
    method: GET
- name: client_liquidity
  endpoint:
    path: /liquidity
    method: GET
- name: liquidity_threshold
  endpoint:
    path: /v1/liquidity/thresholds/{thresholdId}
    method: PUT
- name: liquidity_alerting_thresholds
  endpoint:
    path: /v1/liquidity/thresholds
    method: GET
    data_selector: records
- name: liquidity_threshold
  endpoint:
    path: /v1/liquidity/thresholds/{thresholdId}
    method: PUT
    data_selector: object
    params:
      thresholdId: uuid
- name: create_stub_search_payment_instructions
  endpoint:
    path: /v0/utils/create-stub-search-payment-instructions
    method: POST
    data_selector: details
    params: {}
- name: liquidity_threshold
  endpoint:
    path: /v1/liquidity/thresholds/thresholdId
    method: PUT
    headers:
      accept: application/json
      content-type: application/json
- name: create_stub_search_payment_instructions
  endpoint:
    path: /v0/utils/create-stub-search-payment-instructions
    method: POST
- name: create_stub_search_payment_instructions
  endpoint:
    path: /v0/utils/create-stub-search-payment-instructions
    method: POST
    data_selector: response
    params: {}
- name: mock_atm_transaction
  endpoint:
    path: /v0/utils/generate-atm-transaction
    method: POST
    data_selector: ''
    params: {}
- name: generate_auth_hold
  endpoint:
    path: /v0/utils/generate-auth-hold
    method: POST
- name: Update liquidity alerting Threshold
  endpoint:
    path: /reference/updateliquiditythreshold
    method: PUT
- name: Create liquidity alerting Threshold
  endpoint:
    path: /reference/createliquiditythreshold
    method: POST
- name: Get all liquidity alerting Thresholds
  endpoint:
    path: /reference/getclientliquiditythresholds
    method: GET
- name: Get client Liquidity
  endpoint:
    path: /reference/getclientliquidity
    method: GET
- name: mock_atm_transaction
  endpoint:
    path: /v0/utils/generate-atm-transaction
    method: POST
- name: mock_card_transaction
  endpoint:
    path: /v0/utils/generate-card-transaction
    method: POST
- name: generate_de_inbound
  endpoint:
    path: /v0/utils/generate-de-inbound
    method: POST
    data_selector: message
    params: {}
- name: generate_card_transaction
  endpoint:
    path: /v0/utils/generate-card-transaction
    method: POST
    data_selector: message
    params: {}
- name: generate_mock_npp_inbound_transaction_v2
  endpoint:
    path: /v0/utils/generate-de-inbound
    method: POST
- name: generate_mock_npp_inbound_transaction_v2
  endpoint:
    path: /v0/utils/generate-de-inbound
    method: POST
    data_selector: record
    params: {}
- name: generate_inbound_npp_transaction_v2
  endpoint:
    path: /v0/utils/generate-inbound-npp-transaction-v2
    method: POST
    data_selector: message
    params: {}
- name: generate_inbound_npp_transaction_v2
  endpoint:
    path: /v0/utils/generate-inbound-npp-transaction-v2
    method: POST
    data_selector: object
    params: {}
- name: mandate_notification
  endpoint:
    path: /v0/utils/generate-mandate-notification-payer
    method: POST
    data_selector: message
    params: {}
- name: generate_mandate_notification
  endpoint:
    path: /v0/utils/generate-mandate-notification-payer
    method: POST
- name: generate_npp_inbound
  endpoint:
    path: /generate-npp-inbound
    method: POST
    data_selector: message
    params: {}
- name: generate_npp_inbound
  endpoint:
    path: /v0/utils/generate-npp-inbound
    method: POST
    data_selector: message
    params: {}
- name: generate_receive_a_payment_instruction
  endpoint:
    path: /v0/utils/generate-receive-a-payment-instruction
    method: POST
- name: generate_mock_npp_inbound_transaction
  endpoint:
    path: /v0/utils/generate-receive-a-payment-instruction
    method: POST
- name: create_card_for_customer
  endpoint:
    path: /createhaycard
    method: POST
- name: get_card_by_id
  endpoint:
    path: /getcard
    method: GET
- name: activate_card
  endpoint:
    path: /activatecard
    method: POST
- name: block_card
  endpoint:
    path: /blockcard
    method: POST
- name: cancel_card
  endpoint:
    path: /cancelcard
    method: POST
- name: convert_card
  endpoint:
    path: /convertcard
    method: POST
- name: get_wallets_by_card_id
  endpoint:
    path: /getdigitalwalletdetails
    method: GET
- name: get_provisioning_data_by_card_id
  endpoint:
    path: /getoemprovisioningdata
    method: GET
- name: get_preferences_by_card_id
  endpoint:
    path: /getpaymentpreferences
    method: GET
- name: update_card_preferences
  endpoint:
    path: /updatepaymentpreferences
    method: PATCH
- name: change_card_pin
  endpoint:
    path: /changecardpin
    method: PUT
- name: get_card_pin_status
  endpoint:
    path: /getcardpinstatus
    method: GET
- name: unblock_card_pin
  endpoint:
    path: /unblockcardpin
    method: POST
- name: replace_card
  endpoint:
    path: /reissuehaycard
    method: POST
- name: renew_card
  endpoint:
    path: /renewcard
    method: POST
- name: enrol_card_to_rewards
  endpoint:
    path: /rewards-1
    method: POST
- name: unblock_card
  endpoint:
    path: /unblockcard
    method: POST
- name: create_card
  endpoint:
    path: /v0/cards/create
    method: POST
    data_selector: object
    params: {}
- name: create_card_for_customer
  endpoint:
    path: /reference/createhaycard
    method: post
- name: get_card_by_id
  endpoint:
    path: /reference/getcard
    method: get
- name: activate_card
  endpoint:
    path: /reference/activatecard
    method: post
- name: block_card
  endpoint:
    path: /reference/blockcard
    method: post
- name: cancel_card
  endpoint:
    path: /reference/cancelcard
    method: post
- name: convert_card
  endpoint:
    path: /reference/convertcard
    method: post
- name: get_wallets_by_card_id
  endpoint:
    path: /reference/getdigitalwalletdetails
    method: get
- name: get_provisioning_data_by_card_id
  endpoint:
    path: /reference/getoemprovisioningdata
    method: get
- name: get_preferences_by_card_id
  endpoint:
    path: /reference/getpaymentpreferences
    method: get
- name: update_card_preferences
  endpoint:
    path: /reference/updatepaymentpreferences
    method: patch
- name: change_card_pin
  endpoint:
    path: /reference/changecardpin
    method: put
- name: get_card_pin_status
  endpoint:
    path: /reference/getcardpinstatus
    method: get
- name: unblock_card_pin
  endpoint:
    path: /reference/unblockcardpin
    method: post
- name: replace_card
  endpoint:
    path: /reference/reissuehaycard
    method: post
- name: renew_card
  endpoint:
    path: /reference/renewcard
    method: post
- name: enrol_card_to_rewards
  endpoint:
    path: /reference/rewards-1
    method: post
- name: unblock_card
  endpoint:
    path: /reference/unblockcard
    method: post
- name: cards_create
  endpoint:
    path: /cards/create
    method: POST
- name: get_card_by_id
  endpoint:
    path: /cards/getcard
    method: GET
- name: create_card
  endpoint:
    path: /create
    method: POST
    data_selector: object
    params: {}
- name: create_card
  endpoint:
    path: /cards/create
    method: POST
- name: get_card
  endpoint:
    path: /cards/getcard
    method: GET
- name: activate_card
  endpoint:
    path: /v0/cards/{cardId}/activate
    method: POST
- name: activate_card
  endpoint:
    path: /v0/cards/cardId/activate
    method: POST
- name: get_card_by_id
  endpoint:
    path: /reference/getcard
    method: GET
- name: block_card
  endpoint:
    path: /reference/blockcard
    method: POST
- name: cancel_card
  endpoint:
    path: /v0/cards/{cardId}/cancel
    method: POST
- name: Activate Card
  endpoint:
    path: /cardId/activate
    method: POST
- name: Get Card by ID
  endpoint:
    path: /getcard
    method: GET
- name: Block Card
  endpoint:
    path: /blockcard
    method: POST
- name: convert_card
  endpoint:
    path: /v0/cards/{cardId}/convert
    method: POST
- name: digital_wallets
  endpoint:
    path: /v0/cards/{cardId}/digital-wallets
    method: GET
    data_selector: tokens
- name: oem_provisioning_data
  endpoint:
    path: /v0/cards/{cardId}/oem-provisioning-data
    method: GET
    data_selector: records
- name: update_card_preferences
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
- name: provisioning_data
  endpoint:
    path: /v0/cards/{cardId}/oem-provisioning-data
    method: GET
- name: change_card_pin
  endpoint:
    path: /v0/cards/{cardId}/pin
    method: PUT
    data_selector: message
    params: {}
- name: payment_preferences
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: GET
    data_selector: records
- name: Get Card PIN status
  endpoint:
    path: /getcardpinstatus
    method: GET
- name: Update Card preferences
  endpoint:
    path: /updatepaymentpreferences
    method: PATCH
- name: update_card_preferences
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
    data_selector: ''
    params: {}
- name: unblock_card
  endpoint:
    path: /cards/cardId/pin/unblock
    method: POST
- name: get_card_pin_status
  endpoint:
    path: /cards/cardId/pin/status
    method: GET
- name: Get Card PIN status
  endpoint:
    path: /cardId/pin
    method: GET
- name: Update Card preferences
  endpoint:
    path: /updatepaymentpreferences
    method: PATCH
- name: replace_card
  endpoint:
    path: /v0/cards/{cardId}/re-issue
    method: POST
    data_selector: object
    params:
      cardId: uuid
      cardType: string
      deliveryMethod: string
      idempotencyKey: uuid
- name: Unblock Card
  endpoint:
    path: /cards/cardId/pin/unblock
    method: POST
- name: Get Card PIN status
  endpoint:
    path: /cards/cardId/pin/status
    method: GET
- name: Unblock Card
  endpoint:
    path: /unblockcard
    method: POST
- name: Renew Card
  endpoint:
    path: /renewcard
    method: POST
- name: replace_card
  endpoint:
    path: /v0/cards/{cardId}/re-issue
    method: POST
    data_selector: object
    params: {}
- name: enrol_card_to_rewards
  endpoint:
    path: /v0/cards/{cardId}/rewards
    method: POST
    data_selector: status
    params: {}
- name: Unblock Card
  endpoint:
    path: /cards/cardId/unblock
    method: POST
- name: Renew Card
  endpoint:
    path: /cards/cardId/re-issue
    method: POST
- name: enrol_card_rewards
  endpoint:
    path: /v0/cards/{cardId}/rewards
    method: POST
    data_selector: status
    params:
      cardId: uuid
- name: elevate
  endpoint:
    path: /v0/tokens/elevate
    method: POST
    data_selector: elevationHeader
    params: {}
- name: Unblock Card
  endpoint:
    path: /reference/unblockcard
    method: POST
- name: Renew Card
  endpoint:
    path: /reference/renewcard
    method: POST
- name: products
  endpoint:
    path: /v1/products
    method: GET
    data_selector: records
    params: {}
- name: account
  endpoint:
    path: /v0/accounts/{accountId}
    method: GET
    data_selector: responses
    params:
      accountId: uuid
      expand: string
- name: all_products
  endpoint:
    path: /accounts/accountId
    method: GET
- name: account
  endpoint:
    path: /v0/accounts/{accountId}
    method: GET
    params:
      accountId: uuid
- name: accounts
  endpoint:
    path: /v0/accounts/accountId
    method: GET
- name: authorisation_holds
  endpoint:
    path: /v0/accounts/{accountId}/holds
    method: GET
    data_selector: holds
- name: max_balance
  endpoint:
    path: /v0/accounts/{accountId}/max-balance
    method: PATCH
- name: authorisation_holds
  endpoint:
    path: /v0/accounts/{accountId}/holds
    method: GET
    data_selector: holds
    params:
      accountId: uuid
- name: accounts
  endpoint:
    path: /v0/accounts/{accountId}/overdraft
    method: PATCH
- name: account_risk_level
  endpoint:
    path: /v0/accounts/{accountId}/riskLevel
    method: PATCH
    data_selector: ''
    params:
      accountId: uuid
      level: string
      reason: string
- name: Update Account max balance
  endpoint:
    path: /v0/accounts/{accountId}/max-balance
    method: PATCH
- name: update_overdraft_limit
  endpoint:
    path: /v0/accounts/{accountId}/overdraft
    method: PATCH
- name: initiate_cash_transfer
  endpoint:
    path: /v1/accounts/{accountId}/transfer
    method: POST
    data_selector: outcome
    params: {}
- name: transfer
  endpoint:
    path: /accounts/accountId/transfer
    method: POST
    data_selector: object
- name: account_risk_level
  endpoint:
    path: /v0/accounts/{accountId}/riskLevel
    method: PATCH
    params:
      accountId: uuid
      level: string
      reason: string
- name: account
  endpoint:
    path: /v1/accounts
    method: POST
    data_selector: response
    params: {}
- name: Risk Level by Account ID
  endpoint:
    path: /accounts/accountId/riskLevel
    method: PATCH
    data_selector: object
    params: {}
- name: unblock_account
  endpoint:
    path: /accounts/unblock
    method: POST
    data_selector: object
- name: search_accounts
  endpoint:
    path: /accounts/search
    method: POST
    data_selector: object
- name: initiate_cash_transfer
  endpoint:
    path: /v1/accounts/{accountId}/transfer
    method: POST
- name: search_accounts
  endpoint:
    path: /v1/accounts/search
    method: POST
    data_selector: responses
    params:
      accountNumber: required
- name: accounts
  endpoint:
    path: /v1/accounts
    method: POST
    data_selector: account
    params: {}
- name: custom_data
  endpoint:
    path: /v1/accounts/accountId/custom-data
    method: DELETE
- name: search_accounts
  endpoint:
    path: /v1/accounts/search
    method: POST
    data_selector: accountNumber
    params:
      accountNumber: string
- name: search_accounts
  endpoint:
    path: /v1/accounts/search
    method: POST
- name: account_limits
  endpoint:
    path: /accounts/accountId/limits/MAX_BALANCE
    method: DELETE
- name: get_all_limits
  endpoint:
    path: /accounts/accountId/limits
    method: GET
- name: set_limit_for_account
  endpoint:
    path: /v1/accounts/{accountId}/limits/{limitType}
    method: PUT
    data_selector: accountId
    params: {}
- name: custom_data
  endpoint:
    path: /v1/accounts/{accountId}/custom-data
    method: POST
- name: create_rule
  endpoint:
    path: /v1/accounts/{accountId}/rules
    method: POST
    data_selector: response
    params: {}
- name: account_limits
  endpoint:
    path: /v1/accounts/accountId/limits
    method: GET
- name: rules
  endpoint:
    path: /v1/accounts/accountId/rules
    method: POST
    data_selector: object
- name: set_account_limit
  endpoint:
    path: /v1/accounts/{accountId}/limits/{limitType}
    method: PUT
    data_selector: accountId
    params:
      accountId: uuid
      limitType: string
- name: delete_rule
  endpoint:
    path: /v1/accounts/accountId/rules/ruleId
    method: DELETE
- name: rule
  endpoint:
    path: /v1/accounts/{accountId}/rules/{ruleId}
    method: GET
    data_selector: records
    params: {}
- name: create_rule
  endpoint:
    path: /v1/accounts/{accountId}/rules
    method: POST
    data_selector: object
    params: {}
- name: rules
  endpoint:
    path: /accounts/accountId/rules
    method: POST
- name: delete_rule
  endpoint:
    path: /v1/accounts/{accountId}/rules/{ruleId}
    method: DELETE
    data_selector: success
    params: {}
- name: create_group
  endpoint:
    path: /create
    method: POST
    data_selector: object
    params: {}
- name: Delete Rule from Account
  endpoint:
    path: /v1/accounts/accountId/rules/ruleId
    method: DELETE
- name: group
  endpoint:
    path: /v0/groups/{groupHayId}
    method: PATCH
- name: account_rule
  endpoint:
    path: /v1/accounts/{accountId}/rules/{ruleId}
    method: GET
- name: add_customers
  endpoint:
    path: /v0/groups/{groupHayId}/addCustomers
    method: POST
    data_selector: ''
- name: accounts_transfer
  endpoint:
    path: /v1/accounts/{accountId}/transfer
    method: POST
    data_selector: outcome
    params: {}
- name: create_group
  endpoint:
    path: /groups/create
    method: POST
    data_selector: object
- name: notification
  endpoint:
    path: /api/hay/v1/communications/notification
    method: POST
- name: sms_notification
  endpoint:
    path: /sms
    method: POST
- name: notification_event
  endpoint:
    path: /api/hay/v0/communications/notification
    method: POST
- name: Update Group details
  endpoint:
    path: /v0/groups/{groupHayId}
    method: PATCH
- name: add_customers_to_group
  endpoint:
    path: /v0/groups/{groupHayId}/addCustomers
    method: POST
- name: email_notification
  endpoint:
    path: /communications/email
    method: POST
- name: magic_link_authorisation
  endpoint:
    path: /authorise
    method: GET
    data_selector: null
    params: {}
- name: notification
  endpoint:
    path: /communications/notification
    method: POST
- name: magic_link
  endpoint:
    path: /magiclink
    method: POST
    data_selector: responses
    params: {}
- name: notification
  endpoint:
    path: /api/hay/v0/communications/notification
    method: POST
- name: elevate_access_token
  endpoint:
    path: /elevate
    method: POST
- name: exchange_token
  endpoint:
    path: /exchange
    method: POST
- name: public_keys
  endpoint:
    path: /.well-known/jwks.json
    method: GET
    data_selector: ''
    params: {}
- name: Re-issue Access Token
  endpoint:
    path: /refresh
    method: POST
- name: magic_link_authorisation
  endpoint:
    path: /authorise
    method: GET
- name: magic_link
  endpoint:
    path: /magiclink
    method: POST
    data_selector: model
    params: {}
- name: elevate_access_token
  endpoint:
    path: /elevate
    method: POST
- name: demote_elevated_installation
  endpoint:
    path: /logoutpasscode
    method: POST
- name: exchange_external_token
  endpoint:
    path: /exchange
    method: POST
- name: Re-issue Access Token
  endpoint:
    path: /refresh
    method: POST
- name: change_passcode
  endpoint:
    path: /passcode/change
    method: POST
    data_selector: model
    params: {}
- name: change_passcode
  endpoint:
    path: /passcode/change
    method: POST
- name: request_passcode_challenge
  endpoint:
    path: /request/passcode/challenge
    method: POST
- name: start_forgotten_passcode_flow
  endpoint:
    path: /start/forgotten/passcode
    method: POST
- name: Start Forgotten Passcode flow
  endpoint:
    path: /passcode/forgot
    method: POST
- name: Log-in User
  endpoint:
    path: /passcode/login
    method: POST
- name: demote_installation
  endpoint:
    path: /logoutpasscode
    method: POST
    data_selector: responses
    params: {}
- name: set_passcode
  endpoint:
    path: /passcode/set
    method: POST
- name: verify_otp
  endpoint:
    path: /verifyemail
    method: POST
- name: change_passcode
  endpoint:
    path: /passcode/change
    method: POST
    data_selector: model
    params: {}
- name: verify_otp
  endpoint:
    path: /verifyotp/{otp}
    method: GET
- name: authorisation_hold
  endpoint:
    path: /holds
    method: POST
- name: authorisation_hold
  endpoint:
    path: /holds/{holdId}
    method: PATCH
- name: log_in_user
  endpoint:
    path: /passcode/login
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: transactionId, accountId, amount, counterpartDetails
    params: {}
- name: Set a Passcode
  endpoint:
    path: /passcode/set
    method: POST
- name: batches
  endpoint:
    path: /batches
    method: GET
    params:
      offset: 0
      limit: 100
- name: batches
  endpoint:
    path: /batches
    method: GET
    params:
      offset: 0
      limit: 100
      statuses: ''
- name: verify_otp
  endpoint:
    path: /verifyotp/{otp}
    method: GET
    data_selector: ''
- name: batches
  endpoint:
    path: /batches
    method: POST
- name: authorisation_hold
  endpoint:
    path: /holds
    method: POST
- name: batch_items
  endpoint:
    path: /batches/{batchId}/items
    method: GET
    data_selector: array of objects
    params:
      offset: '0'
      limit: '100'
      status: List of BatchItem statuses - Optional
- name: update_authorisation_hold
  endpoint:
    path: /holds/{holdId}
    method: PATCH
- name: notifyNotification
  endpoint:
    path: /HaasExternalCommunicationsApi/notifyNotification
    method: POST
    data_selector: customerHayId
    params: {}
- name: create_transaction
  endpoint:
    path: /transactions
    method: POST
    data_selector: body
    params: {}
- name: transactions_credit
  endpoint:
    path: /v1/transactions/credit
    method: POST
    data_selector: ''
    params:
      TransactionChannel: APPLE_REWARD
- name: batches
  endpoint:
    path: /batches
    method: GET
    data_selector: array of objects
    params:
      offset: 0
      limit: 100
- name: batches
  endpoint:
    path: /batches
    method: GET
    params:
      offset: '0'
      limit: '100'
      statuses: ''
- name: create_card
  endpoint:
    path: /api/cards/create
    method: POST
    data_selector: card_details
- name: get_card
  endpoint:
    path: /api/cards/{card_id}
    method: GET
    data_selector: card_details
- name: replace_card
  endpoint:
    path: /api/cards/replace
    method: POST
    data_selector: new_card_details
- name: convert_card
  endpoint:
    path: /api/cards/convert
    method: POST
    data_selector: converted_card_details
- name: create_batch
  endpoint:
    path: /batches
    method: POST
- name: batch_items
  endpoint:
    path: /batches/{batchId}/items
    method: GET
    data_selector: array of objects
    params:
      offset: 0
      limit: 100
- name: notify_onboarding_passed
  endpoint:
    path: /HaasExternalCommunicationsApi/notifyNotification
    method: POST
    data_selector: customerHayId
- name: notify_onboarding_failed
  endpoint:
    path: /HaasExternalCommunicationsApi/notifyNotification
    method: POST
    data_selector: customerHayId
- name: create_card
  endpoint:
    path: /v0/cards/create
    method: POST
- name: reissue_card
  endpoint:
    path: /v0/cards/{cardId}/re-issue
    method: POST
- name: activate_card
  endpoint:
    path: /v0/cards/{cardId}/activate
    method: POST
- name: block_card
  endpoint:
    path: /v0/cards/{cardId}/block
    method: POST
- name: cancel_card
  endpoint:
    path: /v0/cards/{cardId}/cancel
    method: POST
- name: freeze_card
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
- name: online_transaction_payments
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
- name: contactless_payments
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
- name: atm_withdrawals
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
- name: magnetic_stripe_payments
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
- name: digital_wallet_payments
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
- name: unlock_card_pin
  endpoint:
    path: /v0/cards/{cardId}/pin/unblock
    method: POST
- name: transactions_credit
  endpoint:
    path: /v1/transactions/credit
    method: POST
- name: Create Biller
  endpoint:
    path: /create-biller
    method: POST
    data_selector: biller
    params: {}
- name: Edit Biller
  endpoint:
    path: /edit-biller
    method: PUT
    data_selector: biller
    params: {}
- name: Make Transaction
  endpoint:
    path: /make-transaction
    method: POST
    data_selector: transaction
    params: {}
- name: Delete Biller
  endpoint:
    path: /delete-biller
    method: DELETE
    data_selector: biller
    params: {}
- name: create_card
  endpoint:
    path: /api/cards
    method: POST
    data_selector: card
    params: {}
- name: get_card_by_id
  endpoint:
    path: /api/cards/{card_id}
    method: GET
    data_selector: card
    params: {}
- name: replace_card
  endpoint:
    path: /api/cards/replace
    method: POST
    data_selector: card
    params: {}
- name: convert_card
  endpoint:
    path: /api/cards/convert
    method: POST
    data_selector: card
    params: {}
- name: card_preferences
  endpoint:
    path: /api/cards/preferences
    method: PATCH
    data_selector: preferences
    params: {}
- name: card_status
  endpoint:
    path: /card-status
    method: GET
    data_selector: status
    params: {}
- name: mandate
  endpoint:
    path: /v1/payto/initiator/mandates
    method: POST
    data_selector: message
    params: {}
- name: mandate_notification_initiator
  endpoint:
    path: /v0/utils/generate-mandate-notification-initiator
    method: POST
    data_selector: message
    params: {}
- name: mandate_notification_payer
  endpoint:
    path: /v0/utils/generate-mandate-notification-payer
    method: POST
    data_selector: message
    params: {}
- name: mandate_status
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/instructions/{instructionId}/status
    method: GET
    data_selector: status
    params: {}
- name: supported_bsbs
  endpoint:
    path: /v1/payto/supported-bsbs/{bsbNumber}
    method: GET
    data_selector: supported
    params: {}
- name: mandate_creation
  endpoint:
    path: /v1/payto/initiator/mandates
    method: POST
    data_selector: mandateId
    params: {}
- name: mandate_rejection
  endpoint:
    path: /v1/payto/payer/mandates/{mandateId}/resolve
    method: PATCH
    data_selector: message
    params: {}
- name: mandate_notification
  endpoint:
    path: /v0/utils/generate-mandate-notification-initiator
    method: POST
    data_selector: message
    params: {}
- name: create_card
  endpoint:
    path: /v0/cards/create
    method: POST
- name: reissue_card
  endpoint:
    path: /v0/cards/{cardId}/re-issue
    method: POST
- name: activate_card
  endpoint:
    path: /v0/cards/{cardId}/activate
    method: POST
- name: block_card
  endpoint:
    path: /v0/cards/{cardId}/block
    method: POST
- name: cancel_card
  endpoint:
    path: /v0/cards/{cardId}/cancel
    method: POST
- name: freeze_card
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
- name: online_transaction_payments
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
- name: contactless_payments
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
- name: atm_withdrawals
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
- name: magnetic_stripe_payments
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
- name: digital_wallet_payments
  endpoint:
    path: /v0/cards/{cardId}/payment-preferences
    method: PATCH
- name: unlock_card_pin
  endpoint:
    path: /v0/cards/{cardId}/pin/unblock
    method: POST
- name: create_mandate
  endpoint:
    path: /v1/payto/initiator/mandates
    method: POST
    data_selector: ''
    params: {}
- name: make_payment
  endpoint:
    path: /v1/payto/payments/adhoc
    method: POST
    data_selector: ''
    params: {}
- name: get_payment_status
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/instructions/{instructionId}/status
    method: GET
    data_selector: ''
    params: {}
- name: search_payment_instructions
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/search
    method: GET
    data_selector: ''
    params: {}
- name: hold
  endpoint:
    path: /holds
    method: POST
- name: update_hold
  endpoint:
    path: /holds/{holdId}
    method: PATCH
- name: transaction
  endpoint:
    path: /transactions
    method: POST
- name: bpay_billers
  endpoint:
    path: /v1/accounts/{accountId}/bpay-billers
    method: GET
    params:
      limit: int32
      offset: int32
- name: mandates
  endpoint:
    path: /v1/payto/initiator/mandates
    method: POST
    data_selector: records
- name: payment_instruction_status
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/instructions/{instructionId}/status
    method: GET
    data_selector: records
- name: supported_bsbs
  endpoint:
    path: /v1/payto/supported-bsbs/{bsbNumber}
    method: GET
    data_selector: supported
- name: bpay_billers
  endpoint:
    path: /v1/accounts/accountId/bpay-billers
    method: GET
- name: Create Credit Transaction
  endpoint:
    path: /v0/transactions/credit/create
    method: POST
    data_selector: outcome
    params: {}
- name: mandate
  endpoint:
    path: /v1/payto/initiator/mandates
    method: POST
    data_selector: mandateId
    params: {}
- name: payment
  endpoint:
    path: /v1/payto/payments/adhoc
    method: POST
    data_selector: mandateId
    params: {}
- name: scheduled_payments
  endpoint:
    path: /v0/accounts/{accountId}/scheduledPayments
    method: GET
    data_selector: ''
- name: payment_schedule
  endpoint:
    path: /api/v1/payment_schedules
    method: GET
    data_selector: array of objects
- name: mandate_creation
  endpoint:
    path: /v1/payto/initiator/mandates
    method: POST
    data_selector: mandateId
- name: adhoc_payment
  endpoint:
    path: /v1/payto/payments/adhoc
    method: POST
    data_selector: mandateId
- name: mandate_payment_status
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/instructions/{instructionId}/status
    method: GET
    data_selector: transactionStatus
- name: search_payment_instructions
  endpoint:
    path: /v1/payto/initiator/mandates/{mandateId}/search
    method: GET
    data_selector: paymentInstructions
- name: scheduled_payments
  endpoint:
    path: /accounts/accountId/scheduledPayments
    method: GET
- name: transaction
  endpoint:
    path: /transaction/{id}
    method: GET
- name: holds
  endpoint:
    path: /holds
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: POST
- name: customers
  endpoint:
    path: /v0/customers
    method: GET
    data_selector: records
- name: direct_debits
  endpoint:
    path: /v0/direct-debits
    method: GET
    data_selector: array of objects
    params:
      fromUtc: date
      toUtc: date
      offset: int32
      limit: int32
      status: string
- name: Signing / Verifying
  endpoint:
    path: /.well-known/jwks.json
    method: GET
- name: direct_debits
  endpoint:
    path: /direct-debits
    method: GET
- name: bpay_billers
  endpoint:
    path: /v1/accounts/{accountId}/bpay-billers
    method: GET
    data_selector: billerDetails
    params:
      limit: ''
      offset: ''
- name: merchant_category_codes
  endpoint:
    path: /v0/mccs
    method: GET
    data_selector: array of objects
    params: {}
- name: bpay_billers
  endpoint:
    path: /v1/accounts/accountId/bpay-billers
    method: GET
    data_selector: records
    params: {}
- name: Get outbound Direct Debit by ID
  endpoint:
    path: /getdirectdebitv1
    method: GET
- name: Get outbound Direct Debits by date
  endpoint:
    path: /getdirectdebitsv1
    method: GET
- name: liquidity
  endpoint:
    path: /v1/liquidity
    method: GET
    data_selector: object
    params:
      date: date
- name: create_credit_transaction
  endpoint:
    path: /v0/transactions/credit/create
    method: POST
- name: Get all liquidity alerting Thresholds
  endpoint:
    path: /getclientliquiditythresholds
    method: GET
- name: Get client Liquidity
  endpoint:
    path: /getclientliquidity
    method: GET
- name: Create Card for Customer
  endpoint:
    path: /reference/createhaycard
    method: POST
- name: scheduled_payments
  endpoint:
    path: /v0/accounts/{accountId}/scheduledPayments
    method: GET
    data_selector: responses
    params:
      accountId: uuid
- name: create_card
  endpoint:
    path: /v0/cards/create
    method: POST
    data_selector: object
    params: {}
- name: scheduled_payments
  endpoint:
    path: /v0/accounts/accountId/scheduledPayments
    method: GET
- name: create_card
  endpoint:
    path: /v0/cards/create
    method: POST
- name: get_card
  endpoint:
    path: /reference/getcard
    method: GET
- name: direct_debits
  endpoint:
    path: /v0/direct-debits
    method: GET
    data_selector: array of objects
    params:
      fromUtc: required
      toUtc: required
      offset: required
      limit: required
      status: optional
- name: direct_debits
  endpoint:
    path: /direct-debits
    method: GET
- name: group
  endpoint:
    path: /groups/create
    method: POST
    data_selector: object
    params: {}
- name: outbound_direct_debit
  endpoint:
    path: /getdirectdebitv1
    method: GET
- name: liquidity
  endpoint:
    path: /v1/liquidity
    method: GET
    data_selector: object
    params:
      date: date
- name: notification
  endpoint:
    path: /communications/notification
    method: POST
    data_selector: eventDetails
- name: Get all liquidity alerting Thresholds
  endpoint:
    path: /reference/getclientliquiditythresholds
    method: GET
- name: Get client Liquidity
  endpoint:
    path: /reference/getclientliquidity
    method: GET
- name: public_keys
  endpoint:
    path: /.well-known/jwks.json
    method: GET
    data_selector: responses
    params: {}
- name: authorise
  endpoint:
    path: /authorise
    method: GET
- name: elevate_access_token
  endpoint:
    path: /elevate
    method: POST
- name: Create Card for Customer
  endpoint:
    path: /reference/createhaycard
    method: POST
- name: Get Card by ID
  endpoint:
    path: /reference/getcard
    method: GET
- name: Activate Card
  endpoint:
    path: /reference/activatecard
    method: POST
- name: Block Card
  endpoint:
    path: /reference/blockcard
    method: POST
- name: Cancel Card
  endpoint:
    path: /reference/cancelcard
    method: POST
- name: Convert Card
  endpoint:
    path: /reference/convertcard
    method: POST
- name: Get wallets by Card ID
  endpoint:
    path: /reference/getdigitalwalletdetails
    method: GET
- name: Get provisioning data by Card ID
  endpoint:
    path: /reference/getoemprovisioningdata
    method: GET
- name: Get preferences by Card ID
  endpoint:
    path: /reference/getpaymentpreferences
    method: GET
- name: Update Card preferences
  endpoint:
    path: /reference/updatepaymentpreferences
    method: PATCH
- name: Change Card PIN
  endpoint:
    path: /reference/changecardpin
    method: PUT
- name: Get Card PIN status
  endpoint:
    path: /reference/getcardpinstatus
    method: GET
- name: Unblock Card PIN
  endpoint:
    path: /reference/unblockcardpin
    method: POST
- name: Replace Card
  endpoint:
    path: /reference/reissuehaycard
    method: POST
- name: Renew Card
  endpoint:
    path: /reference/renewcard
    method: POST
- name: Enrol card to rewards
  endpoint:
    path: /reference/rewards-1
    method: POST
- name: Unblock Card
  endpoint:
    path: /reference/unblockcard
    method: POST
- name: Log Out an Installation
  endpoint:
    path: /logoutinstallation
    method: POST
- name: create_card
  endpoint:
    path: /v0/cards/create
    method: POST
    data_selector: object
    params: {}
- name: passcode_challenge
  endpoint:
    path: /passcode/challenge
    method: POST
- name: authorisation_hold
  endpoint:
    path: /authorisehold
    method: POST
- name: create_group
  endpoint:
    path: /create
    method: POST
- name: batches
  endpoint:
    path: /batches
    method: GET
    data_selector: array of objects
    params:
      offset: 0
      limit: 100
      statuses: []
- name: batches
  endpoint:
    path: /batches
    method: GET
    params:
      offset: 0
      limit: 100
      statuses: ''
- name: Remove a Customer from a Group
  endpoint:
    path: /v1/holds/holdId
    method: GET
- name: Generic Notification - event
  endpoint:
    path: /reference/notifygenericnotification
    method: POST
- name: Notification - SMS
  endpoint:
    path: /reference/notifysms
    method: POST
- name: Notification - event
  endpoint:
    path: /reference/notifynotification
    method: POST
- name: Notification - email
  endpoint:
    path: /reference/notifyemail
    method: POST
- name: notification
  endpoint:
    path: /communications/notification
    method: POST
- name: authorisation
  endpoint:
    path: /authorise
    method: GET
- name: elevate_access_token
  endpoint:
    path: /elevate
    method: POST
- name: Log Out an Installation
  endpoint:
    path: /logoutinstallation
    method: POST
- name: create_authorisation_hold
  endpoint:
    path: /holds
    method: POST
- name: batches
  endpoint:
    path: /batches
    method: GET
    params:
      offset: 0
      limit: 100
notes:
- If a duplicate is found, customer creation will fail.
- If a customer is INACTIVE, they will be excluded from duplicate checks.
- Risk level can be changed for new accounts
- After account creation, the account risk level is set to HIGH by default, which
  sets all limits to 0 and prevents any movement of funds. Changing the risk level
  to LOW adjusts the limits to their default non-zero values and permits transactions.
- Reason for account closure can be supplied to modify how the customer's data is
  referenced in duplication checks.
- Creating a group requires a minimum of one customerHayId but a list of customerHayIds
  can be passed in this request to include as many customers to the group as required.
- Once the group is created successfully the API will respond with the groupHayId.
- Card types must be agreed with Shaype at the initiation phase in order to ensure
  card type is available for the customer.
- Digital wallets will be automatically updated with the new card information for
  seamless use.
- Initial hold and hold Increase will have same transactionHayId
- Hold Increase will have the amount of the updated hold (original hold + increase)
- Settlement will have a different transactionHayId however, there is a field called
  holdHayId that will reference the ID of the original hold
- The platform manages multiple balances including held balance, available balance,
  total balance, and others.
- By default, the Search Transaction and Get Transaction By ID APIs do not return
  the basicAccountNumber within counterPartyDetails for inbound transactions due to
  regulatory restrictions.
- For this request, `instructionIdentification` field should be the same as the ID
  generated when triggering ad-hoc payment
- PaymentID and originalMessageIdentification should have the same ID as instructionIdentification
  but after first part of the ID that indicates Business Identifier Code (BIC) should
  be removed
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- The data used in the mock is for testing purposes only. The details in Production
  may vary.
- Response times in the Staging do not reflect Production environment response times.
- The platform will retry sending the webhook notification 18 times over a period
  of up to 48 hours.
- Endpoints should return a simple 200 success response from the /email and /sms endpoints.
- Access Tokens are short-lived and need to be acquired again after expiration.
- When creating Customers, you MUST supply the externalCustomerId property if you
  want to use your own authentication provider.
- Do not use the Refresh Token. It is deprecated and will soon disappear from this
  response.
- MUST supply the `externalCustomerId` property if you want to use your own authentication
  provider.
- Access Tokens are short-lived and need to be refreshed using the Refresh Token.
- Access and Refresh Tokens are always generated by the authentication infrastructure.
- The authentication scheme for GraphQL involves Access and Refresh tokens, elevated
  access, magic links, and passcodes.
- Uses OAuth2 with refresh token â€” requires setup of connected app in Shaype
- New access tokens can be retrieved using the Refresh Token, however the Refresh
  Token and HOTP values are only retrieved during initial login
- Communication API differs from other integration points in that it is not hosted
  by us, but by you - built to a specification provided by Shaype.
- This API defines a set of webhooks that we will call to notify you about various
  platform events, like card transactions or customer details changes.
- We currently support `client_credentials` and `refresh_token` grant types.
- Uses underlying Cuscal Search Mandates mechanism. This is a mandate cache and doesn't
  call the MMS directly.
- Cuscal restricts data to the Payer only - so not possible for Initiator to use this.
- Only mandates where the debtor party has one of the provided account numbers will
  be returned.
- List fetch limit, value between 1 and 1000
- DateTime in UTC format for the start and end date range of the Transaction search
- Body Params include required fields such as accountHayId, amount, counterpartName,
  description, and idempotencyKey.
- Response body includes object with details and error message.
- Error details will be provided in the response body
- This endpoint should not be called programmatically unless in test scenarios.
- Requires a valid Bearer token.
- Requires an elevated external token which passed in the X-Authorization-StepUp header.
- For certain operations, it is required to elevate the current Installation from
  the email scope to a higher-security passcode scope.
- This endpoint allows to log in the User, by providing a response to a Passcode Challenge
  and a token.
- This endpoint is only available in Staging, for emails that have been registered
  to enable this functionality (on request).
- Normally, a VERIFY OTP is included in the Magic Link sent to the app user via email,
  and then verified and exchanged with AUTH OTP when the Magic Link is activated by
  the user.
- Clients must use the Transaction Channel `APPLE_REWARD` when funding the account.
- Biller Code is mandatory and numeric only.
- Reference (CRN) is mandatory and numeric only.
- Nickname is mandatory and up to 20 characters in length.
- Current mock solution is supported for mandates with 'ad-hoc' frequency. It is recommended
  to use only this frequency for the moment.
- Mandates with fixed frequency (different than ad-hoc) can be provided with different
  settings and they will return a generated ID, but only a mocked set of settings
  will be saved.
- Mocks allow for creation of mandates of different payment frequencies and AD-HOC
  payments.
- On production, mandates initially are in status CREATED, but for mock solution theyâ€™re
  always set as ACTIVE unless specified.
- Uses HTTP-over-TLS (HTTPS) for connection.
- Each request comes with a unique idempotency key.
- If no description is provided for a mandate which allows to recognise status of
  a payment, then default status 'Settlement aborted' is returned at the moment.
- On production, mandates initially are in status CREATED, but for mock solution theyâ€™re
  always set as ACTIVE unless specified in the mandate description.
- Mocks return initial status of a payment instruction.
- HTTP-over-TLS (HTTPS) MUST be used for the connection.
- Each request comes with unique idempotency key.
- This endpoint should not be called programmatically unless in test scenarios. Instead,
  it is visited when a magic link in an authorisation email is clicked by the app
  user. Upon visit, the VERIFY OTP is validated, and replaced with AUTH OTP. Then
  the visitor is redirected to an in-app deep URI, and the app takes over the authentication
  journey.
errors:
- '400 Bad Request: Check query parameters'
- '403 Forbidden: Check authorization'
- '422 Unprocessable Entity: Validate request data'
- '500 Internal Server Error: Contact support'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'Invalid account ID: Check the account ID being sent'
- 'Insufficient permissions: Ensure proper authorization is set'
- 'ACCOUNT_BALANCE_HELD: Account has funds held.'
- 'ACCOUNT_BALANCE_TOTAL: Account has total balance.'
- 'INFLIGHT_OUTBOUND_DIRECT_DEBITS: Account has inflight outbound direct entries.'
- 'NOT_FOUND: CUS.API.100522 - Creditor account details incorrect (M900 - No matching
  record found)'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'REFUSED_CARD_PREFERENCE: Transaction declined due to any of card preference config
  not match.'
- 'REFUSED_FRAUD: Transaction declined because it flagged as potentially fraudulent
  by our fraud detection system'
- 'REFUSED_MAX_BALANCE_EXCEEDED: Transaction declined as it would exceed the account''s
  maximum balance limit.'
- 'REFUSED_NOT_ENOUGH_FUNDS: Transaction declined as it would exceed the account''s
  minimum balance limit.'
- 'INTERNAL_ERROR: Transaction failed due to a system internal error within the payment
  processing service.'
- 'REFUSED_ANNUAL_SPENDING_LIMIT_BREACHED: Transaction declined because the account''s
  annual spending limit has been exceeded.'
- 'REFUSED_DAILY_ATM_WITHDRAWAL_LIMIT_BREACHED: Transaction declined as the daily
  ATM withdrawal limit has been exceeded.'
- 'REFUSED_DAILY_TOP_UP_LIMIT_BREACHED: Transaction declined because the daily top-up
  limit for the account has been exceeded.'
- 'REFUSED_ACCOUNT_BLOCKED: Transaction declined as the account is currently blocked.'
- 'REFUSED_ACCOUNT_CLOSED: Transaction declined because the account has been closed.'
- 'REFUSED_RECIPIENT_ACCOUNT_BLOCKED: Transaction declined as the recipient''s account
  is blocked.'
- 'REFUSED_RECIPIENT_ACCOUNT_CLOSED: Transaction declined because the recipient''s
  account is closed.'
- 'REFUSED_DAILY_DIRECT_DEBIT_LIMIT_BREACHED: Transaction declined as the daily direct
  debit limit has been exceeded.'
- 'REFUSED_DAILY_TRANSFERS_OUT_LIMIT_BREACHED: Transaction declined because the daily
  limit for outgoing transfers has been exceeded.'
- 'REFUSED_RULES: Transaction declined due to a violation of predefined account rules.'
- 'REFUSED_TOTAL_INBOUND_DIRECT_DEBIT_DAILY_LIMIT_BREACHED: Transaction declined as
  the total daily limit for inbound direct debits has been exceeded.'
- 'REFUSED_TOTAL_OUTBOUND_BPAY_DAILY_LIMIT_BREACHED: Transaction declined because
  the total daily limit for outbound BPAY transactions has been exceeded.'
- 'REFUSED_TOTAL_NET_VISA_DAILY_LIMIT_BREACHED: Transaction declined as client scheme
  transactions are currently blocked.'
- 'REFUSED_TOTAL_NON_SCHEME_DAILY_LIMIT_BREACHED: Transaction declined because the
  total daily limit for non-scheme transactions has been exceeded.'
- 'REFUSED_BPAY_INVALID_BILLER_CODE: Transaction declined due to an invalid BPAY biller
  code provided.'
- 'REFUSED_BPAY_INVALID_REFERENCE: Transaction declined due to an invalid BPAY reference
  number.'
- 'REFUSED_BPAY_INVALID_PAYMENT: Transaction declined because the BPAY payment details
  are incorrect or invalid.'
- 'REFUSED_BPAY_REJECTED: Transaction declined because the BPAY payment was rejected
  by the payment gateway.'
- 'REFUSED_DAILY_CARD_TRANSACTIONS_LIMIT_BREACHED: Transaction declined because the
  total daily limit for card transactions has been exceeded.'
- 'REFUSED_SINGLE_CARD_TRANSACTION_LIMIT_BREACHED: Transaction declined as the amount
  exceeds the single transaction limit for the card.'
- 'REFUSED_SANCTIONS: The platform internally performs a sanctions check for international
  payments. If sanctions check failed for a transaction, it will result in this outcome.'
- 'REFUSED_UNABLE_TO_VALIDATE: The transaction will be declined if the platform is
  unable to perform a sanctions check for an international payment.'
- 'REFUSED_INSufficient_DATA: Transaction declined due to missing or incomplete information
  required to process the request.'
- '401: Unauthorized'
- '403: Forbidden'
- '429: Too Many Requests'
- '5XX: Server Error'
- 200 OK
- 470 REFUSED_MAX_BALANCE_EXCEEDED
- 470 REFUSED_NOT_ENOUGH_FUNDS
- '401 Unauthorized: Unauthorized'
- '403 Forbidden: Client unauthorised to access the resource.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 400 Bad Request
- 403 Forbidden
- 422 Unprocessable Entity
- 500 Internal Server Error
- '400 Bad Request: Error details'
- '403 Forbidden: Error details'
- '422 Unprocessable Entity: Error details'
- '500 Internal Server Error: Error details'
- '400 Bad Request: Error details, Error description, HTTP response status, TraceID'
- '403 Forbidden: Error details, Error description, HTTP response status, TraceID'
- '422 Unprocessable Entity: Error details, Error description, HTTP response status,
  TraceID'
- '500 Internal Server Error: Error details, Error description, HTTP response status,
  TraceID'
- '409 Conflict: Error details'
- '400 Bad Request: Error description'
- '403 Forbidden: Error description'
- '422 Unprocessable Entity: Error description'
- '500 Internal Server Error: Error description'
- OPEN_STACKS_LIMIT_REACHED
- TOTAL_STACKS_LIMIT_REACHED
- STACK_NAME_ALREADY_IN_USE
- 'OPEN_STACKS_LIMIT_REACHED: Indicates that the limit for open stacks has been reached.'
- 'TOTAL_STACKS_LIMIT_REACHED: Indicates that the total limit for stacks has been
  reached.'
- 'STACK_NAME_ALREADY_IN_USE: Indicates that the stack name provided is already in
  use.'
- '200'
- '400'
- '403'
- '422'
- '500'
- '501'
- '429 Too many requests: Error description'
- '429 Too many requests: Error details'
- 501 Not Implemented
- '400: Bad Request'
- '404: Not Found'
- '500: Internal Server Error'
- '501 Not Implemented: Error details'
- '400: Error description'
- '400 Bad Request: Check the request parameters for validity'
- '404 Not Found: Ensure the endpoint is correct'
- '500 Internal Server Error: Retry the request after some time'
- '400 Bad Request: Error description will provide details on the issue.'
- '403 Forbidden: Access denied, check permissions.'
- '422 Unprocessable Entity: Request was well-formed but was unable to be processed.'
- '400 Bad Request: Error details, Error description, HTTP response status, TraceID
  that can be used by HAY for troubleshooting the request'
- '403 Forbidden: Error details, Error description, HTTP response status, TraceID
  that can be used by HAY for troubleshooting the request'
- '422 Unprocessable Entity: Error details, Error description, HTTP response status,
  TraceID that can be used by HAY for troubleshooting the request'
- '500 Internal Server Error: Error details, Error description, HTTP response status,
  TraceID that can be used by HAY for troubleshooting the request'
- '501 Not Implemented: The requested resource is not available.'
- '422: Unprocessable Entity'
- '501: Not Implemented'
- '400 Bad Request: Error details, Error description, HTTP response status, TraceID
  for troubleshooting'
- '403 Forbidden: Error details, Error description, HTTP response status, TraceID
  for troubleshooting'
- '422 Invalid Input: Details of the outbound Direct Debit transfer'
- '501 Not Implemented: The requested resource is not available'
- '501 Not Implemented: The request is not supported.'
- '400 Bad Request: The request could not be understood by the server due to malformed
  syntax.'
- '403 Forbidden: The server understood the request, but is refusing to fulfill it.'
- '200: Success'
- '403: Error description'
- '422: Error description'
- '500: Error description'
- '501 Not Implemented: The requested method is not supported'
- '400: Bad Request: The request cannot be fulfilled due to bad syntax'
- '403: Forbidden: The server understood the request, but refuses to authorize it'
- 429 Too many requests
- '200: Successful response'
- '201: Resource created'
- '501 Not Implemented: The requested action could not be completed.'
- '400 Bad Request: Invalid request format'
- '403 Forbidden: Access denied'
- '500 Internal Server Error: Please try again later'
- '501 Not Implemented: The requested API endpoint is not available'
- '400 Bad Request: Check for invalid input or missing parameters'
- '403 Forbidden: Ensure the user has the required permissions'
- '501 Not Implemented: Error description'
- '501 Not Implemented: The requested functionality is not available'
- 200 Success
- 201 Created
- 401 Unauthorized
- 404 Not Found
- 500 Internal Error
- REFUSED_MAX_BALANCE_EXCEEDED
- REFUSED_NOT_ENOUGH_FUNDS
- '401 Unauthorized: Error description'
- '404 Not Found: Error description'
- '401 Unauthorized: Error details'
- '404 Not Found: Error details'
- '101: BPAY Instruction type not valid'
- '102: BPAY Transaction type not valid'
- '107: Biller Code is invalid'
- '140: Amount greater than maximum accepted by Biller'
- '901: {field name} is required'
- 'Validation of the request for suspension mandate with id: {mandate_id}: To suspend
  a mandate it must be in active status.'
- 'Validation of the request for releasing mandate with id: 1212c8af-164e-11ee-bbae-ede34bac00ac
  failed. To release a mandate it must be in suspended status.'
- 470 - The request contained valid data and was understood by the server, but the
  server is refusing action due to internal validity, status or limit checks.
- 500 Internal error
- '103: Payer Institution Code not valid'
- '104: Country of payment is invalid'
- '105: State of payment is invalid'
- '106: Currency Code of payment is invalid'
- '108: Service Code is invalid'
- '109: Payment Method is invalid'
- '110: Biller/Service Code is not current on the Biller File'
- '111: Payment Method not allowed for this Biller/Service Code'
- '112: Customer Reference Number not present'
- '113: Customer Reference Number is invalid'
- '114: Entry Method is invalid'
- '115: Amount is not numeric'
- '116: Amount less than minimum accepted by Biller'
- '117: Transaction Reference Number is not present'
- '118: Transaction Reference Number format incorrect'
- '119: Transaction Reference Number is not unique'
- '120: Original Reference Number is not present (Error Correction/reversal)'
- '121: Original Reference Number format incorrect (Error Correction/reversal)'
- '122: Date Payment Accepted is invalid'
- '123: Time Payment Accepted is invalid'
- '124: Additional Reference Number is required but is not present'
- '125: Additional Reference Number is invalid'
- '126: Discount Method is invalid'
- '127: Discount Reference is required but is not present'
- '128: Settlement Date is invalid'
- '129: Error Correction Reason must be present for an Error Correction'
- '130: Error Correction Reason must be zero if not an Error Correction'
- '131: Error Correction Reason is invalid'
- '132: Record Type is invalid'
- '133: Original Reference Number is not blank (Payment)'
- '134: Additional Reference Number present, but should not be'
- '135: Discount Reference present, but should not be'
- '136: Error Correction not allowed for this Biller/Service Code'
- '137: Account Number invalid for Payment Method'
- '138: Payer Institution not operative'
- '139: Biller Institution not operative'
- '141: Amount must be greater than Zero'
- '200: Submitting institution is not authorised to submit on behalf of Payer Institution'
- '201: Transaction Reference Number does not contain valid Payer Institution Code'
- '202: Transaction Reference Number must contain a Date of Payment between current
  date less one year and current date plus one business day'
- '203: Transaction Reference Number must contain a Date of Payment equal to or greater
  than datePaymentAccepted field value'
- '204: Transaction Reference Number has been previously used'
- '205: Original Reference Number does not contain valid Payer Institution Code'
- '206: Original Reference Number must contain a Date of Payment between current date
  less one year and current date plus one business day'
- '207: BPAY Settlement Date must be between current date less one year and current
  date plus one business day'
- '208: BPAY Settlement Date must be equal to or greater than the Payment Date included
  in Transaction Reference Number'
- '209: Date of Payment must be between current date less one year and current date
  plus one business day'
- '210: CRN is invalid - Incorrect Check Digit'
- '211: CRN is invalid - Incorrect length compared to mask'
- '212: CRN is invalid - Incorrect fixed digits compared to mask'
- '213: CRN is invalid - Validation rule failed'
- '214: CRN is invalid - Value of numeric portion must not be zero'
- '215: Payment Amount is incorrect (iCRN)'
- '216: Payment Date is incorrect (iCRN)'
- '902: {field name} format is invalid'
- '400 Bad Request: Check the request parameters.'
- '404 Not Found: Verify the mandate ID or instruction ID.'
- '400 Bad Request: Check your request parameters'
- '403 Forbidden: Check your permissions'
- '422 Unprocessable Entity: Verify your input data'
- '500 Internal Server Error: Try again later'
- 'REFUSED_LIMIT_BREACH: To get the detailed limit that has been breached please use
  V1 of this endpoint.'
- '400 Bad Request: Error details will be provided in response body.'
- 403 Unauthorized
- 422 Invalid Input
auth_info:
  mentioned_objects: []
client:
  base_url: http://localhost:8080
  paginator:
    type: offset
    page_size_param: limit
source_metadata: null
