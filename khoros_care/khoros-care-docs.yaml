resources:
- name: conversation
  endpoint:
    path: /api/public/reports/report/conversation
    method: POST
    data_selector: status
    params:
      reportFormat: csv
      locale: en_US
      companyKey: put_your_company_key_here
      startTime: '1551441600000'
      endTime: '1556712000000'
- name: Care API v1
  endpoint:
    path: /api/v1/
    method: GET
- name: Care API v2
  endpoint:
    path: /api/v2/
    method: GET
- name: Care API v3
  endpoint:
    path: /api-eu.app.lithium.com/
    method: GET
- name: Care Analytics API
  endpoint:
    path: /analytics-api-emea.lithium.com
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: GDPR Request
  endpoint:
    path: /gdpr/request
    method: POST
- name: GDPR Status
  endpoint:
    path: /gdpr/status
    method: GET
- name: conversation
  endpoint:
    path: /api/v2/conversations/displayIds/displayNumber
    method: GET
- name: author
  endpoint:
    path: /api/v2/authors/lswUuid
    method: GET
- name: analytics_reports
  endpoint:
    path: /api/public/reports/report/report_type
    method: POST
- name: authors
  endpoint:
    path: /api/v2/authors
    method: PUT
- name: reactivate_conversation_facebook
  endpoint:
    path: /authors/networks/facebook/ids/{networkid}/conversations/reactivate
    method: PUT
- name: reactivate_conversation_khoros
  endpoint:
    path: /authors/networks/smooch/instances/default/ids/{networkid}/conversations/reactivate
    method: PUT
- name: report_conversation
  endpoint:
    path: /api/public/reports/report/conversation
    method: GET
    data_selector: null
    params:
      conversationReportType: OPEN_AT_END
      startTime: '1470614400000'
      endTime: '1461104100000'
      timezoneOffset: '-18000000'
      reportFormat: csv
      locale: en_US
      companyKey: sitekey
- name: report_status
  endpoint:
    path: /api/public/reports/report/{reportId}/{runId}/status
    method: GET
    data_selector: null
    params:
      companyKey: sitekey
- name: report_download
  endpoint:
    path: /api/public/reports/report/{reportId}/{runId}/download
    method: GET
    data_selector: null
    params:
      companyKey: sitekey
- name: Agent State
  endpoint:
    path: /reports/report/raw_agent_states
    method: POST
- name: Combined Raw
  endpoint:
    path: /reports/report/combined
    method: POST
- name: Conversation Actions
  endpoint:
    path: /reports/report/conversation_actions
    method: GET
- name: Conversation Actions
  endpoint:
    path: /reports/report/conversation_actions
    method: POST
- name: Conversation History Action
  endpoint:
    path: /reports/report/conversation_history_action
    method: POST
- name: Raw Author
  endpoint:
    path: /reports/report/author
    method: POST
- name: Raw Brand Posts Export
  endpoint:
    path: /reports/report/reportmarketingraw_brand_posts
    method: POST
- name: Raw Conversation
  endpoint:
    path: /reports/report/conversation
    method: POST
- name: Raw Help Request
  endpoint:
    path: /reports/report/raw_expert_help
    method: POST
- name: Raw Incoming Post
  endpoint:
    path: /reports/report/incoming_post
    method: POST
- name: Raw Response
  endpoint:
    path: /reports/report/response
    method: POST
- name: Response Approval
  endpoint:
    path: /reports/report/response_approval
    method: POST
- name: Team Performance
  endpoint:
    path: /reports/report/team_performance
    method: POST
- name: Team Performance Interval
  endpoint:
    path: /reports/report/team_performance_interval
    method: POST
- name: User
  endpoint:
    path: /reports/report/user
    method: GET
- name: User
  endpoint:
    path: /reports/report/user
    method: POST
- name: analytics_export
  endpoint:
    path: /analytics/export
    method: GET
    data_selector: conversationId
    params: {}
- name: report
  endpoint:
    path: /api/public/reports/report/report/<exportId>
    method: GET
    data_selector: result
    params: {}
- name: marketing_report
  endpoint:
    path: /api/public/reports/report/marketing/<exportId>
    method: GET
    data_selector: result
    params: {}
- name: conversation_export
  endpoint:
    path: /api/public/reports/report/conversation
    method: POST
    params:
      reportFormat: csv
      locale: en_US
      companyKey: <put_your_company_key_here>
      startTime: '1551441600000'
      endTime: '1556712000000'
- name: Raw Conversation export
  endpoint:
    path: /api/public/reports/report/conversation
    method: POST
    data_selector: export_data
    params:
      reportMetrics:
      - CONVERSATION_ID
      - STATUS
      - ASSIGNED_AGENT_DISPLAY_ID
- name: raw_agent_states
  endpoint:
    path: /reports/report/agent_states
    method: GET
    data_selector: records
- name: author
  endpoint:
    path: /reports/report/author
    method: GET
    data_selector: records
- name: raw_brand_posts
  endpoint:
    path: /reports/report/brand_posts
    method: GET
    data_selector: records
- name: combined
  endpoint:
    path: /export/combined
    method: GET
    data_selector: records
- name: conversation
  endpoint:
    path: /export/conversation
    method: GET
    data_selector: records
- name: conversation_actions
  endpoint:
    path: /export/conversation_actions
    method: GET
    data_selector: records
- name: conversation_history_action
  endpoint:
    path: /export/conversation_history_action
    method: GET
    data_selector: records
- name: raw_expert_help
  endpoint:
    path: /export/raw_expert_help
    method: GET
    data_selector: records
- name: incoming_post
  endpoint:
    path: /export/incoming_post
    method: GET
    data_selector: records
- name: response_approval
  endpoint:
    path: /response_approval
    method: GET
    data_selector: records
- name: response
  endpoint:
    path: /response
    method: GET
    data_selector: records
- name: team_performance
  endpoint:
    path: /team_performance
    method: GET
    data_selector: records
- name: team_performance_interval
  endpoint:
    path: /services/data/vXX.X/sobjects/TeamPerformanceInterval
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /services/data/vXX.X/sobjects/User
    method: GET
    data_selector: records
- name: tags
  endpoint:
    path: /api/v2/tags
    method: GET
- name: incoming_posts_report
  endpoint:
    path: /api/public/reports/report/incoming_post
    method: POST
    data_selector: result
    params: {}
- name: webhook_registration
  endpoint:
    path: /webhook/register
    method: POST
- name: event_delivery
  endpoint:
    path: /event/delivery
    method: POST
- name: respond
  endpoint:
    path: /respond
    method: POST
- name: control
  endpoint:
    path: /control
    method: POST
- name: get_control
  endpoint:
    path: /control/network/{networkKey}/externalId/{externalId}/author/{authorId}
    method: GET
- name: priority
  endpoint:
    path: /priority
    method: PUT
- name: tag
  endpoint:
    path: /tag
    method: PUT
- name: workqueue
  endpoint:
    path: /workqueue
    method: PUT
- name: resolve
  endpoint:
    path: /resolve
    method: PUT
- name: note
  endpoint:
    path: /note
    method: PUT
- name: author
  endpoint:
    path: /author
    method: PUT
- name: bot_registration
  endpoint:
    path: /bots/v3/registrations
    method: POST
    data_selector: registration
    params: {}
- name: retrieve_bot_registrations
  endpoint:
    path: /bots/v3/registrations/network/{networkKey}/externalId/{externalId}
    method: GET
    data_selector: registrations
    params: {}
- name: secure_forms
  endpoint:
    path: /bots/v3/form
    method: POST
    data_selector: data
    params: {}
- name: Bot Handoff
  endpoint:
    path: /bots/networks/networkType/authors/authorId/handoff
    method: GET
- name: Control
  endpoint:
    path: /control
    method: PUT
- name: request_by_id
  endpoint:
    path: /bots/v3/request/{requestId}
    method: GET
    data_selector: data
- name: request_by_appId
  endpoint:
    path: /bots/v3/request/appId/{appId}
    method: GET
    data_selector: data
- name: bot_health
  endpoint:
    path: /bots/v3/health/appId/{appId}
    method: GET
    data_selector: data
- name: customer
  endpoint:
    path: /api/v1/customers
    method: POST
    data_selector: records
    params: {}
- name: case
  endpoint:
    path: /api/v1/case
    method: POST
    data_selector: records
    params: {}
- name: agent_state_export
  endpoint:
    path: /api/public/reports/report/raw_agent_states
    method: POST
- name: export_status
  endpoint:
    path: /reports/report/{workflowId}/{runId}/status
    method: GET
    data_selector: result
    params:
      workflowId: required
      runId: required
- name: export_download
  endpoint:
    path: /reports/report/{workflowId}/{runId}/download
    method: GET
    data_selector: downloadUrl
    params:
      workflowId: required
      runId: required
- name: agent_states
  endpoint:
    path: /api/public/reports/report/raw_agent_states
    method: POST
    params:
      companyKey: '[COMPANY_KEY]'
      startTime: '1548979200000'
      endTime: '1556668800000'
      timezoneOffset: '-21600000'
      enableBusinessHour: 'true'
      locale: en
- name: Analytics Reports
  endpoint:
    path: /analytics-reports
    method: GET
- name: time_zone_ids
  endpoint:
    path: /api/public/config/timezones
    method: GET
    data_selector: result
- name: get_job_status
  endpoint:
    path: /api/public/reports/jobs
    method: GET
    data_selector: jobs
- name: conversation_actions_report
  endpoint:
    path: /api/public/reports/report/conversation_actions
    method: GET
- name: user_export
  endpoint:
    path: /api/public/reports/report/user
    method: GET
- name: user_export_status
  endpoint:
    path: /reports/report/<workflowId>/<runId>/status
    method: GET
- name: user_export_download
  endpoint:
    path: /reports/report/workflowId/runId/download
    method: GET
- name: download_export_by_run_id
  endpoint:
    path: /api/public/reports/report/{workflowId}/{runId}/download
    method: GET
    data_selector: downloadUrl
- name: export_job_status
  endpoint:
    path: /api/public/report/reports/{workflowId}/{runId}/status
    method: GET
    data_selector: result
    params: {}
- name: team_ids
  endpoint:
    path: /api/public/teams
    method: GET
    data_selector: teams
- name: raw_author_export
  endpoint:
    path: /api/public/reports/report/author
    method: POST
- name: export_status
  endpoint:
    path: /reports/report/<workflowId>/<runId>/status
    method: GET
- name: export_download
  endpoint:
    path: /reports/report/workflowId/runId/download
    method: GET
- name: raw_combined_export
  endpoint:
    path: /api/public/reports/report/combined
    method: POST
- name: export_status
  endpoint:
    path: /reports/report/<workflowId>/<runId>/status
    method: GET
- name: export_download
  endpoint:
    path: /reports/report/workflowId/runId/download
    method: GET
- name: raw_conversations_export
  endpoint:
    path: /api/public/reports/report/conversation
    method: POST
- name: export_job_status
  endpoint:
    path: /reports/report/<workflowId>/<runId>/status
    method: GET
- name: download_export
  endpoint:
    path: /reports/report/workflowId/runId/download
    method: GET
- name: create_conversation_actions_export
  endpoint:
    path: /api/public/reports/report/conversation_actions
    method: POST
- name: conversation_action_history
  endpoint:
    path: /api/public/reports/report/conversation_history_action
    method: POST
    data_selector: data
    params:
      companyKey: ''
- name: raw_incoming_post_export
  endpoint:
    path: /api/public/reports/report/incoming_post
    method: POST
- name: export_status
  endpoint:
    path: /reports/report/<workflowId>/<runId>/status
    method: GET
- name: download_export
  endpoint:
    path: /reports/report/workflowId/runId/download
    method: GET
- name: raw_help_request_export
  endpoint:
    path: /api/public/reports/report/raw_expert_help
    method: POST
- name: export_status
  endpoint:
    path: /reports/report/<workflowId>/<runId>/status
    method: GET
- name: download_export
  endpoint:
    path: /reports/report/workflowId/runId/download
    method: GET
- name: raw_response_export
  endpoint:
    path: /api/public/reports/report/response
    method: POST
- name: report_status
  endpoint:
    path: /reports/report/<workflowId>/<runId>/status
    method: GET
- name: report_download
  endpoint:
    path: /reports/report/workflowId/runId/download
    method: GET
- name: response
  endpoint:
    path: /api/public/reports/report/response
    method: POST
    data_selector: result
    params:
      companyKey: '[COMPANY_KEY]'
      startTime: '1548979200000'
      endTime: '1556668800000'
      timezoneOffset: '-21600000'
      enableBusinessHour: 'true'
      locale: en
- name: raw_response_approval_export
  endpoint:
    path: /api/public/reports/report/response_approval
    method: POST
- name: raw_response_approval_export
  endpoint:
    path: /reports/report/workflowId/runId/status
    method: GET
    data_selector: result
    params:
      workflowId: <workflowId>
      runId: <runId>
- name: download_export
  endpoint:
    path: /reports/report/workflowId/runId/download
    method: GET
    data_selector: ''
    params:
      workflowId: <workflowId>
      runId: <runId>
- name: raw_team_performance_export
  endpoint:
    path: /api/public/reports/report/team_performance
    method: POST
- name: export_status
  endpoint:
    path: /reports/report/<workflowId>/<runId>/status
    method: GET
- name: download_export
  endpoint:
    path: /reports/report/workflowId/runId/download
    method: GET
- name: team_performance_interval
  endpoint:
    path: /api/public/reports/report/team_performance_interval
    method: POST
- name: team_performance_interval_export
  endpoint:
    path: /reports/report/<workflowId>/<runId>/status
    method: GET
    data_selector: result
    params:
      businessHourType: null
      companyKey: null
      enableBusinessHour: false
      endTime: null
      includeDisabled: false
      locale: null
      priorities: null
      reportFormat: json
      reportMetrics: null
      smartViewId: null
      startTime: null
      timezone: null
      timezoneOffset: null
      timeInterval: null
      workqueueIds: null
- name: team_performance_interval
  endpoint:
    path: /api/public/reports/report/team_performance_interval
    method: POST
    params:
      companyKey: '[COMPANY_KEY]'
      startTime: '1548979200000'
      endTime: '1556668800000'
      timezoneOffset: '-21600000'
      enableBusinessHour: 'true'
      locale: en
      teamIds: 175,154,151,128,42,155,210,71,15,63,192,32,153,69,65
      timeInterval: '86400000'
      includeDisabled: 'true'
- name: return_entity_jwt_status
  endpoint:
    path: /tokens/khorosapi/ownerId/{ownerId}
    method: GET
- name: create_jwt_token
  endpoint:
    path: /api/v2/tokens/khorosapi/ownerId/{ownerId}
    method: POST
- name: disassociate_author_attributes
  endpoint:
    path: /authors/networks/instagram/instances/instagram/ids/{author_id}/split
    method: POST
    data_selector: attributes
- name: conversation_ids
  endpoint:
    path: /authors/lswUuid/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: conversation_ids_by_network
  endpoint:
    path: /authors/networks/networktype/ids/networkid/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: conversation_ids_by_instance
  endpoint:
    path: /authors/networks/networktype/instances/networkinstance/ids/networkid/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: conversation_ids_by_handle
  endpoint:
    path: /authors/networks/networktype/handles/networkhandle/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: conversation_ids_by_instance_handle
  endpoint:
    path: /authors/networks/networktype/instances/networkinstance/handles/networkhandle/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: Batch author updates
  endpoint:
    path: /reference/batch-author-updates
    method: POST
- name: batch_author_update
  endpoint:
    path: /khoroscaredevdocs/reference/batch-author-updates
    method: POST
    data_selector: results
- name: author
  endpoint:
    path: /khoroscaredevdocs/reference/authors-1
    method: POST
    data_selector: author
- name: authors
  endpoint:
    path: /authors
    method: GET
    data_selector: personList
- name: author_details
  endpoint:
    path: /{lswUuid}
    method: GET
    data_selector: author_details
- name: all_authors
  endpoint:
    path: /authors
    method: GET
    data_selector: records
- name: add_author
  endpoint:
    path: /authors
    method: POST
    data_selector: author
- name: batch_update_authors
  endpoint:
    path: /authors-2
    method: PUT
    data_selector: updated_authors
- name: update_merge_author
  endpoint:
    path: /authors/lswUuid
    method: PUT
    data_selector: merged_author
- name: changed_authors
  endpoint:
    path: /authors/changed
    method: GET
    data_selector: changed_authors
- name: author_changed
  endpoint:
    path: /api/v2/authors/changed
    method: GET
    data_selector: data
    params: {}
- name: author
  endpoint:
    path: /api/v2/authors/networks/{networktype}/ids/{networkid}
    method: GET
- name: authors
  endpoint:
    path: /authors/networks/{networktype}/ids/{networkid}
    method: GET
    data_selector: records
- name: author_by_source_network_id_per_instance
  endpoint:
    path: /authors/networks/{networktype}/instances/{networkinstance}/ids/{networkid}
    method: GET
    data_selector: author
    params: {}
- name: authors_by_network_handle
  endpoint:
    path: /authors/networks/{networktype}/handles/{networkhandle}
    method: GET
    data_selector: personList
- name: authors_by_handle
  endpoint:
    path: /authors/networks/{networktype}/instances/{networkinstance}/handles/{networkhandle}
    method: GET
    data_selector: personList
- name: conversation_ids
  endpoint:
    path: /authors/{lswUuid}/conversations
    method: GET
    data_selector: conversations
    params:
      startEpochMillis: start time in epoch milliseconds
      endEpochMillis: end time in epoch milliseconds
- name: conversation_ids
  endpoint:
    path: /api/v2/authors/networks/{networktype}/ids/{networkid}/conversations
    method: GET
    data_selector: conversations
    params:
      startEpochMillis: null
      endEpochMillis: null
- name: conversation_ids
  endpoint:
    path: /authors/networks/{networktype}/ids/{networkid}/conversations
    method: GET
    data_selector: data
- name: conversation_ids
  endpoint:
    path: /{networktype}/instances/{networkinstance}/ids/{networkid}/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: conversation_ids
  endpoint:
    path: /api/v2/authors/networks/{networktype}/handles/{networkhandle}/conversations
    method: GET
    data_selector: conversations
    params:
      startEpochMillis: optional
      endEpochMillis: optional
- name: get_conversation_ids_by_author_handle
  endpoint:
    path: /authors/networks/{networktype}/handles/{networkhandle}/conversations
    method: GET
- name: get_conversation_ids_by_author_network_id
  endpoint:
    path: /authors/networks/{networktype}/ids/{networkid}/conversations
    method: GET
- name: get_conversation_ids
  endpoint:
    path: /api/v2/authors/networks/{networktype}/instances/{networkinstance}/handles/{networkhandle}/conversations
    method: GET
    data_selector: conversations
    params:
      startEpochMillis: ''
      endEpochMillis: ''
- name: conversations_by_author
  endpoint:
    path: /authors/networks/{networktype}/handles/{networkhandle}/conversations
    method: GET
    data_selector: data
    params: {}
- name: authors
  endpoint:
    path: /authors
    method: GET
- name: batch_update_authors
  endpoint:
    path: /authors-2
    method: PUT
- name: author_details
  endpoint:
    path: /authors/lswUuid
    method: GET
- name: update_merge_author
  endpoint:
    path: /authors/lswUuid
    method: PUT
- name: changed_authors
  endpoint:
    path: /authors/changed
    method: GET
- name: remove_person_attributes
  endpoint:
    path: /api/v2/authors/networks/{networktype}/instances/{networkinstance}/ids/{networkid}/split
    method: POST
    data_selector: response
    params: {}
- name: author
  endpoint:
    path: /api/v2/authors/networks/{networktype}/instances/{networkinstance}/ids/{networkid}/split
    method: POST
- name: update_author_by_source_network_id
  endpoint:
    path: /authors/networks/{networktype}/ids/{networkid}
    method: PUT
    data_selector: null
    params: {}
- name: update_author
  endpoint:
    path: /api/v2/authors/networks/{networktype}/instances/{networkinstance}/ids/{networkid}
    method: PUT
- name: author_by_network_id
  endpoint:
    path: /authors/networks/{networktype}/ids/{networkid}
    method: GET
- name: update_author_by_network_id
  endpoint:
    path: /authors/networks/{networktype}/ids/{networkid}
    method: PUT
- name: authors_by_network_handle
  endpoint:
    path: /authors/networks/{networktype}/handles/{networkhandle}
    method: GET
- name: authors
  endpoint:
    path: /authors
    method: GET
    data_selector: data
    params: {}
- name: batch_update_authors
  endpoint:
    path: /authors/
    method: PUT
    data_selector: data
    params: {}
- name: authors
  endpoint:
    path: /api/v2/authors
    method: GET
- name: update_or_merge_author_handles
  endpoint:
    path: /api/v2/authors/{lswUuid}
    method: PUT
- name: reactivate_author_conversations
  endpoint:
    path: /authors/networks/networktype/ids/networkid/conversations/reactivate
    method: PUT
- name: reactivate_author_conversations
  endpoint:
    path: /authors/networks/networktype/instances/networkinstance/ids/networkId/conversations/reactivate
    method: PUT
- name: bot_registration
  endpoint:
    path: /bots/v3/registrations
    method: POST
- name: general_bot_functions
  endpoint:
    path: /bots/v3/respond
    method: POST
- name: health_check
  endpoint:
    path: /bots/v3/health/appId/appId
    method: GET
- name: bot_registration
  endpoint:
    path: /registrations
    method: POST
    data_selector: bot
    params: {}
- name: registration_payload
  endpoint:
    path: /registration/payload
    method: POST
    data_selector: payload
    params: {}
- name: incoming_message_payloads
  endpoint:
    path: /khoroscaredevdocs/reference/incoming-message-payloads-channel-to-bot
    method: GET
    data_selector: payload
- name: message_event
  endpoint:
    path: /message/event
    method: POST
    data_selector: coordinate
    params: {}
- name: closed_conversation_event
  endpoint:
    path: /closed/conversation/event
    method: POST
    data_selector: coordinate
    params: {}
- name: created_conversation_event
  endpoint:
    path: /created/conversation/event
    method: POST
    data_selector: coordinate
    params: {}
- name: agent_response_event
  endpoint:
    path: /agent/response/event
    method: POST
    data_selector: coordinate
    params: {}
- name: incoming_message
  endpoint:
    path: /v2/messages
    method: POST
    data_selector: messages
    params: {}
- name: Analytics Reports
  endpoint:
    path: /analytics/reports
    method: GET
    data_selector: records
- name: Authors
  endpoint:
    path: /authors
    method: GET
    data_selector: records
- name: Conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: records
- name: actions
  endpoint:
    path: /actions
    method: POST
    data_selector: actions
    params: {}
- name: author
  endpoint:
    path: /bots/v3/authors
    method: GET
    data_selector: records
- name: Analytics Reports
  endpoint:
    path: /reports
    method: GET
- name: Authentication API
  endpoint:
    path: /authentication
    method: GET
- name: Author API
  endpoint:
    path: /author
    method: GET
- name: coordinate
  endpoint:
    path: /coordinate
    method: GET
    data_selector: coordinate
    params: {}
- name: properties
  endpoint:
    path: /bots/v3/authors
    method: PUT
    data_selector: properties
    params: {}
- name: form_response
  endpoint:
    path: /services/data/vXX.X/form-response
    method: POST
    data_selector: fields
    params: {}
- name: Location
  endpoint:
    path: /location
    method: GET
    data_selector: location
    params: {}
- name: media
  endpoint:
    path: /bots/v3/respond
    method: POST
    data_selector: media
    params: {}
- name: richContent
  endpoint:
    path: /bots/v3/respond
    method: POST
    data_selector: richContent
- name: referral
  endpoint:
    path: /referral
    method: GET
    data_selector: referral
    params: {}
- name: control_conversation
  endpoint:
    path: /bots/v3/control/network/{networkKey}/externalId/{externalId}/author/{authorId}
    method: GET
- name: bot_health
  endpoint:
    path: /bots/v3/health/appId/{appId}
    method: GET
- name: registrations
  endpoint:
    path: /bots/v3/registrations
    method: GET
- name: bot_registrations
  endpoint:
    path: /bots/v3/registrations/network/{networkKey}/externalId/{externalId}
    method: GET
- name: bot_registration_details
  endpoint:
    path: /bots/v3/registrations/network/{networkKey}/externalId/{externalId}/appId/{appId}
    method: GET
- name: register_bot
  endpoint:
    path: /bots/v3/registrations
    method: POST
- name: edit_bot_registration
  endpoint:
    path: /bots/v3/registrations
    method: PUT
- name: delete_bot_registration
  endpoint:
    path: /bots/v3/registrations/network/{networkKey}/externalId/{externalId}/appId/{appId}
    method: DELETE
- name: bot_registration_details
  endpoint:
    path: /bots/v3/registrations/network/{networkKey}/externalId/{externalId}/appId/{appId}
    method: GET
- name: bot_registrations
  endpoint:
    path: /bots/v3/registations/network/apple/externalId/117101b2-e66a-11e7-86ec-b1a405106b73/appId/abc-bot
    method: GET
    data_selector: Result
- name: monitor_request
  endpoint:
    path: /bots/v3/request/{requestId}
    method: GET
- name: monitor_requests
  endpoint:
    path: /bots/v3/request/appId/{appId}
    method: GET
    data_selector: request_records
- name: bot_registration
  endpoint:
    path: /bots/v3/registrations
    method: POST
- name: respond_to_incoming_message
  endpoint:
    path: /bots/v3/respond
    method: POST
- name: actions
  endpoint:
    path: /khoroscaredevdocs/reference/actions-object
    method: GET
    data_selector: actions
- name: author
  endpoint:
    path: /khoroscaredevdocs/reference/author-object
    method: GET
    data_selector: author
- name: coordinate
  endpoint:
    path: /khoroscaredevdocs/reference/coordinate-object
    method: GET
    data_selector: coordinate
- name: list
  endpoint:
    path: /khoroscaredevdocs/reference/listpicker
    method: GET
    data_selector: list
- name: media
  endpoint:
    path: /khoroscaredevdocs/reference/media
    method: GET
    data_selector: media
- name: richContent
  endpoint:
    path: /khoroscaredevdocs/reference/richContent
    method: GET
    data_selector: richContent
- name: owner
  endpoint:
    path: /khoroscaredevdocs/reference/owner
    method: GET
    data_selector: owner
- name: payload
  endpoint:
    path: /khoroscaredevdocs/reference/payload
    method: GET
    data_selector: payload
- name: processSynchronously
  endpoint:
    path: /khoroscaredevdocs/reference/processSynchronously
    method: GET
    data_selector: processSynchronously
- name: publishedTS
  endpoint:
    path: /khoroscaredevdocs/reference/publishedTS
    method: GET
    data_selector: publishedTS
- name: receivedTS
  endpoint:
    path: /khoroscaredevdocs/reference/receivedTS
    method: GET
    data_selector: receivedTS
- name: text
  endpoint:
    path: /khoroscaredevdocs/reference/text
    method: GET
    data_selector: text
- name: type
  endpoint:
    path: /khoroscaredevdocs/reference/type
    method: GET
    data_selector: type
- name: update_author_attributes
  endpoint:
    path: /bots/v3/authors/attributes
    method: PUT
- name: update_author_metadata
  endpoint:
    path: /bots/v3/authors/attributes
    method: PUT
- name: pass_conversation_control
  endpoint:
    path: /bots/v3/control
    method: PUT
- name: internal_note
  endpoint:
    path: /bots/v3/note
    method: PUT
    data_selector: null
    params: {}
- name: change_conversation_priority
  endpoint:
    path: /bots/v3/priority
    method: PUT
- name: bot_registration
  endpoint:
    path: /bots/v3/registrations
    method: PUT
- name: change_bot_operating_mode
  endpoint:
    path: /bots/v3/registrations/network/{networkKey}/externalId/{externalId}/appId/{appId}/mode/{mode}
    method: PUT
- name: mark_conversation_resolved
  endpoint:
    path: /bots/v3/resolve
    method: PUT
- name: tag_message
  endpoint:
    path: /bots/v3/tag
    method: PUT
- name: untag_message
  endpoint:
    path: /bots/v3/tag/remove
    method: PUT
- name: tag_remove
  endpoint:
    path: /bots/v3/tag/remove
    method: PUT
    data_selector: result
- name: Refresh JWT
  endpoint:
    path: /bots/v3/tokens/appId/{appId}
    method: PUT
- name: delete_bot_registration
  endpoint:
    path: /bots/v3/registrations/network/{networkKey}/externalId/{externalId}/appId/{appId}
    method: DELETE
- name: invalidate_jwt
  endpoint:
    path: /bots/v3/tokens/appId/{appId}
    method: DELETE
- name: delete_bot_registration
  endpoint:
    path: /bots/v3/tokens/appId/appID
    method: DELETE
- name: bot_registration
  endpoint:
    path: /bots/networks/*networkType*/registrations
    method: POST
- name: handoff
  endpoint:
    path: /bots/networks/*networkType*/authors/*authorId*/handoff
    method: POST
- name: resolve
  endpoint:
    path: /bots/networks/*networkType*/authors/*authorId*/resolve
    method: POST
- name: bot_registration
  endpoint:
    path: /api/v2/bots/networks/networkType/registrations
    method: POST
    data_selector: registration
    params: {}
- name: bot_update_registration
  endpoint:
    path: /api/v2/bots/networks/networkType/registrations
    method: PUT
    data_selector: registration
    params: {}
- name: authors
  endpoint:
    path: /authors
    method: GET
    data_selector: records
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: records
    params: {}
- name: callback
  endpoint:
    path: /api/callbacks
    method: GET
    data_selector: callbackData
    params: {}
- name: bot_registration
  endpoint:
    path: /bots/networks/{networkType}/registrations
    method: GET
    params:
      externalId: ''
      appId: ''
- name: registrations
  endpoint:
    path: /api/v2/bots/networks/{networkType}/registrations
    method: GET
- name: registrations
  endpoint:
    path: /api/v2/bots/networks/{networkType}/allRegistrations
    method: GET
    data_selector: data
    params:
      externalId: string
- name: bot_registration
  endpoint:
    path: /bots/networks/{networkType}/allRegistrations
    method: GET
    data_selector: object
- name: current_time_to_agent_response
  endpoint:
    path: /api/v2/bots/currentTAR
    method: GET
    data_selector: data
    params:
      timeRangeInMillis: required
      priorities: optional
      workqueueIds: optional
      responseType: optional
      smartViewId: optional
- name: bot_registration
  endpoint:
    path: /networks/{networkType}/registrations
    method: POST
    data_selector: status
    params: {}
- name: bot_registration
  endpoint:
    path: /api/v2/bots/networks/{networkType}/registrations
    method: POST
    data_selector: success
    params: {}
- name: bot_registration
  endpoint:
    path: /bots/networks/{networkType}/registrations
    method: PUT
    params:
      externalId: ''
      appId: ''
      callbackUrl: ''
      authenticationType: BASIC_AUTH
      username: ''
      password: ''
- name: handoff_conversation
  endpoint:
    path: /api/v2/bots/networks/{networkType}/authors/{authorId}/handoff
    method: PUT
- name: mark_conversation_resolved
  endpoint:
    path: /api/v2/bots/networks/{networkType}/authors/{authorId}/resolve
    method: PUT
- name: authors
  endpoint:
    path: /bots/networks/{networkType}/authors/{authorId}/resolve
    method: PUT
- name: delete_bot_registration
  endpoint:
    path: /api/v2/bots/networks/{networkType}/registrations
    method: DELETE
    params:
      networkType: '{networkType}'
      externalId: '{externalId}'
      appId: '{appId}'
- name: conversation
  endpoint:
    path: /conversation
    method: GET
    data_selector: records
- name: brand_messenger_conversations
  endpoint:
    path: /reference/brand-messenger-legacy-conversations-copy
    method: GET
- name: conversation
  endpoint:
    path: /portal/conversation
    method: GET
    data_selector: data
    params: {}
- name: responses
  endpoint:
    path: /responses
    method: GET
    data_selector: records
- name: community_conversations
  endpoint:
    path: /khoroscaredevdocs/reference/community-conversations
    method: GET
    data_selector: data
    params: {}
- name: analytics_reports
  endpoint:
    path: /analytics/reports
    method: GET
    data_selector: records
    params: {}
- name: conversation
  endpoint:
    path: /conversations
    method: GET
    data_selector: records
    params: {}
- name: conversation
  endpoint:
    path: /facebook/conversations
    method: GET
    data_selector: data
- name: conversation
  endpoint:
    path: /services/data/vXX.X/sobjects/Conversation
    method: GET
    data_selector: data
    params: {}
- name: conversation_ids
  endpoint:
    path: /conversations/networks/{networktype}/instances/{networkinstance}/ids/{authorID}
    method: GET
    data_selector: data
    params:
      startEpochMillis: required
      endEpochMillis: ''
- name: conversation_details
  endpoint:
    path: /api/v2/conversations/{lswUuid}
    method: GET
    data_selector: object
    params: {}
- name: get_conversation_ids_by_author_and_date
  endpoint:
    path: /{lswUuid}
    method: GET
    data_selector: object
    params: {}
- name: get_conversation_details_by_display_id
  endpoint:
    path: /displayidsdisplaynumber-1
    method: GET
    data_selector: object
    params: {}
- name: conversation_details
  endpoint:
    path: /api/v2/conversations/displayIds/{displayNumber}
    method: GET
    data_selector: object
- name: conversation_details
  endpoint:
    path: /api/v2/conversations/displayIds/{displayNumber}
    method: GET
    data_selector: object
    params: {}
- name: conversation_details
  endpoint:
    path: /api/v2/conversations/bySourceDocumentId/networks/{network}/instances/{instance}/id/{source
      document id}
    method: GET
- name: conversation_details
  endpoint:
    path: /conversations/bySourceDocumentId/networks/{network}/instances/{instance}/id/{source
      document id}
    method: GET
    data_selector: object
- name: conversation_tag_rule_definitions
  endpoint:
    path: /khoroscaredevdocs/reference/tagruledefinitions-1
    method: GET
    data_selector: tag_rules
- name: tag_rule_definitions
  endpoint:
    path: /api/v2/tagRuleDefinitions
    method: GET
    data_selector: data
    params: {}
- name: tag_rule_definitions
  endpoint:
    path: /api/v2/tagRuleDefinitions
    method: GET
- name: GDPR request
  endpoint:
    path: /reference/requests
    method: POST
- name: Get conversation tag rule definitions
  endpoint:
    path: /reference/tagruledefinitions-1
    method: GET
- name: create_gdpr_request
  endpoint:
    path: /api/v2/gdpr/requests
    method: POST
    data_selector: status
    params: {}
- name: get_author_uuid
  endpoint:
    path: /api/v2/authors/networks/networktype/ids/networkid
    method: GET
    data_selector: lswUuid
    params: {}
- name: GDPR request
  endpoint:
    path: /api/v2/gdpr/requests
    method: POST
    data_selector: result
    params: {}
- name: Get GDPR request status
  endpoint:
    path: /api/v2/gdpr/requests/{request_uuid}
    method: GET
    data_selector: result
    params: {}
- name: gdpr_request_status
  endpoint:
    path: /api/v2/gdpr/requests/{requestUUID}
    method: GET
    data_selector: data
    params:
      requestUUID: string
- name: gdpr_requests
  endpoint:
    path: /gdpr/requests/{requestUUID}
    method: GET
- name: Media
  endpoint:
    path: /media
    method: POST
    data_selector: media
    params: {}
- name: inbound_messages
  endpoint:
    path: /api/v2/listening/{integrationUuid}/messages
    method: POST
    data_selector: data
- name: messages
  endpoint:
    path: /api/v2/listening/{integrationUuid}/messages
    method: POST
- name: discussion
  endpoint:
    path: /api/v2/listening/{integrationUuid}/discussion
    method: POST
- name: delete_messages
  endpoint:
    path: /api/v2/listening/{integrationUuid}/messages
    method: DELETE
- name: smart_view_ids
  endpoint:
    path: /smartviews
    method: GET
- name: smart_view_ids
  endpoint:
    path: /api/v2/smartviews
    method: GET
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
- name: tag
  endpoint:
    path: /tags
    method: GET
- name: tag
  endpoint:
    path: /tags
    method: GET
- name: work_queue_ids
  endpoint:
    path: /workqueues/active
    method: GET
    data_selector: workQueues
- name: work_queues
  endpoint:
    path: /api/v1/workqueues
    method: GET
- name: defined_agent_states
  endpoint:
    path: /khoroscaredevdocs/reference/retrieve-defined-agent-states
    method: GET
    data_selector: agent_states
- name: change_agent_state_by_email
  endpoint:
    path: /khoroscaredevdocs/reference/change-agent-state-by-email
    method: POST
    data_selector: response
- name: change_agent_state_by_sso_id
  endpoint:
    path: /khoroscaredevdocs/reference/change-agent-state-by-sso-id
    method: POST
    data_selector: response
- name: change_agent_state_by_uuid
  endpoint:
    path: /khoroscaredevdocs/reference/change-agent-state-by-uuid
    method: POST
    data_selector: response
- name: agent_states
  endpoint:
    path: /agentstate
    method: GET
    data_selector: agent_states
- name: set_agent_state_by_email
  endpoint:
    path: /users/email/{userEmail}/state
    method: PUT
    data_selector: success
    params:
      stateUUID: query
- name: retrieve_defined_agent_states
  endpoint:
    path: /retrieve-defined-agent-states
    method: GET
    data_selector: states
    params: {}
- name: Set Agent State by UUID
  endpoint:
    path: /users/uuid/{userUUID}/state
    method: PUT
- name: set_agent_state_by_sso_id
  endpoint:
    path: /users/ssoId/{ssoId}/state
    method: PUT
    params:
      stateUUID: stateUUID
- name: CSV export
  endpoint:
    path: /reports/csv_long/rawPost
    method: GET
    params:
      startTime: '1396224000000'
      endTime: '1396396800000'
- name: CSV Export
  endpoint:
    path: /reports/csv/{reportName}
    method: GET
- name: csv_export
  endpoint:
    path: /reports/csv_long/{reportName}
    method: GET
    data_selector: object
    params:
      startTime: milliseconds_since_epoch
      endTime: milliseconds_since_epoch
      TzOffsetMs: '0'
      bucketSizeMs: '3600000'
      providerType: All
      incldActions: 'false'
- name: CSV export
  endpoint:
    path: /reports/csv_long/reportName
    method: GET
- name: List available report names
  endpoint:
    path: /list-deprecated
    method: GET
- name: list_available_report_names
  endpoint:
    path: /reports/list
    method: GET
- name: reports
  endpoint:
    path: /reports/list
    method: GET
- name: secure_forms
  endpoint:
    path: /engage/api/v2/secureForms/getForms
    method: GET
    data_selector: forms
- name: get_forms
  endpoint:
    path: /secureForm/getForms
    method: GET
- name: send_bot_response
  endpoint:
    path: /send-a-bot-response-with-a-secure-form
    method: POST
- name: secure_form
  endpoint:
    path: /bots/v3/form
    method: POST
- name: conversation
  endpoint:
    path: /khoroscaredevdocs/reference/conversations
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: case
  endpoint:
    path: /api/v2/cases
    method: GET
    data_selector: records
    params: {}
- name: customer
  endpoint:
    path: /api/v2/customers
    method: GET
    data_selector: records
    params: {}
- name: createCase
  endpoint:
    path: /case
    method: POST
- name: case
  endpoint:
    path: /case/{id}
    method: GET
    data_selector: object
    params: {}
- name: case
  endpoint:
    path: /case/{id}
    method: GET
- name: case
  endpoint:
    path: /case/{id}
    method: PATCH
- name: case
  endpoint:
    path: /cases
    method: POST
    data_selector: case
    params: {}
- name: lookupCase
  endpoint:
    path: /case/{id}
    method: PATCH
- name: customer
  endpoint:
    path: /khoroscaredevdocs/reference/customer
    method: POST
    data_selector: records
    params: {}
- name: create_customer
  endpoint:
    path: /khoroscaredevdocs/reference/createcustomer
    method: POST
- name: search_customers
  endpoint:
    path: /khoroscaredevdocs/reference/searchcustomers
    method: POST
- name: best_match_customers
  endpoint:
    path: /khoroscaredevdocs/reference/bestmatchcustomers
    method: POST
- name: find_customer
  endpoint:
    path: /khoroscaredevdocs/reference/findcustomer
    method: GET
- name: find_cases
  endpoint:
    path: /khoroscaredevdocs/reference/findcases
    method: GET
- name: update_customer
  endpoint:
    path: /khoroscaredevdocs/reference/updatecustomer
    method: PATCH
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: array[object]
- name: bestmatch
  endpoint:
    path: /customer/bestmatch
    method: POST
    data_selector: array
    params: {}
- name: customer
  endpoint:
    path: /customer/{id}
    method: GET
    data_selector: Customer Response
    params: {}
- name: customer
  endpoint:
    path: /customer
    method: PATCH
    data_selector: object
    params: {}
- name: cases
  endpoint:
    path: /customer/{id}/cases
    method: GET
    data_selector: array[object]
    params: {}
- name: analytics_reports
  endpoint:
    path: /analytics/reports
    method: GET
    data_selector: data
    params: {}
- name: author
  endpoint:
    path: /author
    method: GET
    data_selector: records
    params: {}
- name: cases
  endpoint:
    path: /khoroscaredevdocs/reference/findcases
    method: GET
    data_selector: records
- name: Customer
  endpoint:
    path: /meta/object/Customer
    method: GET
    data_selector: fields
- name: Case
  endpoint:
    path: /meta/object/Case
    method: GET
    data_selector: fields
- name: user_export
  endpoint:
    path: /reports/report/user
    method: POST
- name: user_export
  endpoint:
    path: /reports/report/<workflowId>/<runId>/status
    method: GET
    data_selector: result
    params:
      companyKey: string
- name: download_export
  endpoint:
    path: /reports/report/workflowId/runId/download
    method: GET
    data_selector: result
    params: {}
notes:
- If the data is hosted in EMEA, change the API URL to analytics-api-emea.app.lithium.com.
- To maintain system performance, each API endpoint is rate limited.
- Khoros recommends creating a single, distinct user account for each project that
  uses the APIs.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- The Automation Framework uses Bearer authentication with an access token.
- All other API calls use HTTP Basic Authentication.
- Most Care and Care Analytics API endpoints use HTTP Basic Authentication via an
  Authorization header.
- Requests to the Bot v3 API use JWT authentication.
- Only requests to the Bot API v3 use JWT authentication.
- We strongly recommend automating the JWT refresh so that bots do not make calls
  with a stale token.
- Requests made to the Analytics Reports API are rate limited to 20 requests per minute.
- Secure Socket Layer (SSL) v3 and Transport Layer Security (TLS) 1.0 are not allowed
  with calls to the SMM APIs.
- Recommended to find an author’s PSIDs using the Conversation API.
- Two author integrations cannot use the same custom CRM author attribute key. The
  attribute keys must be unique across all author integrations.
- Care uses the Instagram ID and not the Instagram username to uniquely identify a
  user.
- 'An API user can **not** have any of the following: A name that starts with **KH-**,
  A name that starts with **LI-**, An email address with the domain **@lithium.com**,
  An email address with the domain **@khoros.com**, An email address with the domain
  **@spredfast.com**.'
- The JSON version of the export does not display the column display ID.
- The values for startTime and endTime are in milliseconds (Epoch).
- Query parameters provide details for how to build the export.
- startTime and endTime values must be in epoch milliseconds format.
- We strongly recommend against using the `/api/public/reports/jobs` endpoint to check
  the status of a export job. This endpoint will be deprecated and removed in April
  2020.
- This guide lists the available columns for each export type supported by the Analytics
  API.
- Uses OAuth2 for authentication.
- 'The following columns are returned only when the export is generated in JSON: TOTAL_CONSOLE_LOGGED_IN_TIME_MILLIS,
  TOTAL_GREEN_STATE_TIME_MILLIS, TOTAL_YELLOW_STATE_TIME_MILLIS, TOTAL_RED_STATE_TIME_MILLIS,
  TOTAL_MOBILE_TIME_MILLIS'
- agentId and teamId are both multi-value parameters.
- If you omit both parameters, the system defaults to Coordinated Universal Time (UTC)
- If you provide only timezoneOffset, that offset is used to format dates. With only
  timezoneOffset, the Care Analytics is not aware of Daylight Saving Time (DST).
- When you provide timezone, the time zone provided is used to format dates. This
  allows Care Analytics to be time-zone aware.
- When you provide both timezone and timezoneOffset, the value for timezoneOffset
  is ignored unless you pass in an invalid time zone.
- The timezone value must be URL encoded to be valid for each export.
- Khoros adds columns to exports; prepare scripts to only process known columns.
- Only a single chatbot integration per individual social business page or handle
  on any given source channel.
- Channels listed as being in Beta are available for use; however, their features
  and capabilities are under development and subject to change.
- LinkedIn DMs are available for the Automation Framework; however, the channel -
  currently supports only plain text messages. Additional text formatting and file
  transfers are unavailable.
- Requests to the Automation Framework use Bot API v3, which requires a JWT access
  token for authentication; however, your request to generate the JWT is authenticated
  with Basic Auth.
- The bot receives all events even if it is not the owner.
- Ensure that a bot does not interrupt a conversation started in public, has an agent
  engaged, and has moved private.
- Registering a bot is a one-time operation per network.
- Webhook event delivery failures will result in control being transferred from BOT
  to AGENT.
- Webhook events are sent using either Basic Authentication or HMAC.
- Khoros Care does not allow a bot to send any PCI form.
- You can send a secure form only with non-expired fields as a bot response.
- In the real-world, your bot will need to store the token and refresh it to get a
  new token at least every 90 days.
- Legacy uses different API and gateway
- Legacy requires a specific, limited API user account
- Legacy supports Facebook Handoff Protocol
- We strongly recommend registering your bot in production with the bot registration
  mode flag set to MAINTENANCE as early as possible in your production environment.
- Monitoring bots can listen in for contextual information on both sides of the conversation,
  including conversations involving agents, live bots, and the end user.
- You can deploy a total of 10 bots for each source integration. The total live bot
  maximum remains at 1, but it can be combined with up to 9 monitoring bots.
- The Automation Framework uses Bot Handoff child tags to capture the reason for the
  handoff.
- Requests return a state field indicating PENDING, ERROR, or SUCCESS.
- The bot should return a 202 (or 200) to be healthy.
- Email notifications are sent for health state changes.
- We recommend programmatically refreshing the JWT once a week.
- Your automated solution should attempt to retry in the event of a 500 response.
- You are allowed one Modern Chat widget per page load.
- Chat sessions can persist across subdomains as long as the jwt token and userId
  match in the KHOROS_CONFIG.
- Each /meta endpoint is allowed up to 20 seconds to resolve.
- All other endpoints must resolve within 8 seconds.
- Authenticated and unauthenticated chat sessions.
- The Bot API requires a different, more-limited Bot API user account distinct from
  the API user account used with the other Care APIs.
- We strongly recommend creating a specific user account with Bot API access that
  is separate from other API user accounts.
- Requires setup of connected app in api
- All endpoints require HTTP Basic Authentication.
- The user name is an email address and is case-sensitive.
- This endpoint will be deprecated in April 2020. Retrieve the status of an export
  job using the method described in Recommendations for running and queuing exports.
- All fields in exports are of the datatype String and have a field length of unbounded.
- Times will be formatted per the Company setting OR the Locale that the user specifies
  when running the export.
- POST is the recommended method to generate a User Export.
- The URL for Care Analytics depends on your regional location.
- URL for Care Analytics depends on your regional location.
- Pass all parameters except for companyKey in the request body. Pass companyKey as
  a query parameter.
- Pass all parameters except for companyKey in the request body.
- URL for Care Analytics depends on regional location.
- Requires username and password for authentication
- The first POST call generates a JWT. A second POST request results in a 409 error.
- The token expires after 90 days and must be refreshed prior to expiration.
- All CRM Author Integrations require configuration by Khoros Support or Services
  prior to using the Author API.
- Updates (PUT calls) to manipulate Facebook, Instagram, author attributes are not
  supported.
- Returns IDs for conversations associated with a specified author during a specified
  time range up to 24 hours.
- The API creates a new author if neither the author nor handle exists in Care.
- Malformed data in handles will result in validation errors.
- Once an association between authors has been created, you cannot break the association
  with the API.
- Updates (PUT calls) to manipulate Instagram, Facebook, author attributes are not
  supported.
- Changing the offset in nextPageUrl is not supported and could cause a failure.
- Only changes made in the UI or changes made as part of a new author flow by the
  system are returned in the response.
- For best results, use this call for data created after June 30, 2014.
- Get a single author by source network ID where the source network has only a single,
  default instance, such as Facebook or Instagram.
- Supported network types are 'facebook' and 'instagram'.
- Unsupported network type may return 400 response
- If no duration is specified, all author conversations for the specified author are
  returned.
- Use this for a networktype of 'facebook' or 'instagram' where there is a single,
  default instance of the network.
- If the networktype is 'lithium' or 'crm', specify the instance.
- If the duration specified is more than 24 hours, only 24 hours worth of changed
  data is returned.
- 'Supported values for networktype are: ''instagram'', ''facebook'', ''googleplus'',
  ''lithium'', ''crm''.'
- For networktype 'lithium' or 'crm', networkinstance must be passed.
- If a CRM author integration or custom CRM author attribute has not been configured
  in Social Response by Khoros Support or Khoros Services, the call will return a
  400 error.
- Removes attributes from the Person associated with the network ID passed in the
  URL.
- A new Person is created in the system with the attributes defined in the request
  body.
- Requires setup of connected app in API
- The Author API supports 'instagram', 'facebook', 'googleplus', 'lithium', and 'crm'
  only as values for 'networktype'.
- For a 'networktype' of value 'lithium' or 'crm' you must also pass the 'networkinstance'.
- Batch updates author records associated with a single author.
- Reactivate an author's conversations
- All development environments use the US gateway.
- Strongly recommend registering your bot in production with the bot registration
  mode flag set to MAINTENANCE.
- EXTERNAL will support the legacy Bot API registration flow.
- Messages from an author to a source channel are intercepted by Khoros Care and echoed
  to your brand's bot.
- Uses OAuth2 with refresh token — requires setup of connected app in Khoros
- Some objects may return nulls in deeply nested fields
- Requires setup of connected app in Khoros
- Some endpoints may have rate limits
- The Actions object represents structured actions that the user can take.
- Custom properties may not be included if not set by Khoros Messaging.
- OAuth2 with refresh token required
- For Facebook, modify the coordinate object you receive so that the messageId you
  receive is passed as parentId in the /respond call.
- The properties object is primarily used to provide contextual information to the
  agent or support staff about the author.
- The Form Response object is used in the Automation Framework and Bot v3 API.
- Recommend including the text field as a fallback in case the rich content isn't
  supported.
- Find the author ID from the Author object included in all messages.
- Get all registrations using any valid JWT token
- All calls to the Bot API return a requestId
- Pass that requestId to GET /bots/v3/request/{requestId} to monitor the status of
  the request
- Any bot must register with Khoros Care before it can access the Bot v3 APIs. Registration
  is a one-time (per network) operation.
- Include charset=utf-8 to ensure that emojis are processed correctly.
- A bot attempting to respond to a conversation it doesn’t own will receive a 403
  Forbidden response.
- Use the Bot v3 API to have the bot update both the author CRM attributes and author
  attributes
- Use the Bot v3 API to have the bot update author metadata properties
- When processing a message from an external user, the Automation Framework automatically
  transfers control from BOT to AGENT if the current conversation control is undetermined
  or the conversation is owned by a BOT.
- Attach an internal note to the current bot conversation with a PUT request to /bots/v3/note.
- Use the Bot v3 API to change the conversation priority
- Operating modes include LIVE, MAINTENANCE, and MONITORING.
- Have a bot mark a conversation as resolved using the Bot v3 API
- Uses OAuth2 with refresh token
- Deletes the specified bot registration from the Automation Framework
- When using Facebook Handover Protocol, you will not use Khoros's Bot API to make
  the handoff.
- Khoros must also perform some configuration in Care.
- File a Support ticket if you intend to use the Facebook Handover Protocol.
- Requires setup of connected app in Khoros.
- Some endpoints may return paginated responses.
- If using the Facebook Handover Protocol, Care sends the callback to the bot via
  Facebook.
- If your network restricts incoming requests, whitelist specified IP addresses to
  ensure callbacks are not blocked.
- Pass the app ID and external ID that identifies the bot.
- Smart view definitions that include priority and/or work queues will override priority
  and work queue IDs passed as specific query parameters in the same call.
- The username and password in this call are for the authentication on the callback
  URL, not the credentials for making this API call.
- If using the Facebook Handover Protocol, enter a dummy value for callbackUrl, authenticationType,
  username, and password.
- Content-Type must be application/x-www-form-urlencoded
- If the bot attempts to make this hand-off soon after the user begins interacting
  with the bot, Khoros will return a '404 error, not found.' error.
- Marks the conversation as resolved on behalf of the bot.
- API requires setup of connected app in API
- Uses OAuth2 with refresh token — requires setup of connected app in API
- Updated about 5 years ago
- The base URL contains a placeholder for lswUuid.
- Due to Terms of Service agreements obligations, responses differ among source network
  types.
- Responses differ among source network types due to Terms of Service agreements.
- Base URL requires specific network and instance details to be provided in the URL
  path.
- All GDPR API endpoints require HTTP Basic authentication.
- The api_restricted role is required to call the GDPR endpoints.
- We recommend you create a separate, dedicated API user account with this api_restricted
  role applied and limit access to this account.
- A GDPR request can be queued for up to an hour before being processed.
- A request can take some time.
- Requests can remain in QUEUED status for up to an hour before processing begins.
- Base URL includes specific instance details.
- Listening API v2 has been deprecated and should not be used for new custom integrations.
- Listening API v2 has been deprecated and should not be used for new custom integrations.
  For custom integrations, please contact your Khoros representative.
- API requires setup of connected app in api
- The Tag API is a secondary API that supports the Conversation API.
- We recommend using Work Queue API v2 over WorkQueue API v1.
- SSO must be configured and active for this call to work.
- If the agent was already in the target state prior to the call, the server responds
  with a 200 success.
- All Supervisor Reports API endpoints are deprecated as of November 2016.
- The deprecated Supervisor Reports endpoints use a different API user account than
  the API user account used with HTTP Basic Authentication.
- The Supervisor Reports API limits the report range to a 24 hour period
- Retrieves secure forms from Khoros Care.
- All arguments are case-sensitive.
- An empty value for downloadUrl indicates that the export has not ready.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- A User Type must be selected in order to save this user.
- '409: A second call to generate a JWT results in a 409 error.'
- '429 Too many requests: Throttled because rate limit is exceeded.'
- User is attempting to run too many exports.
- '401 Unauthorized: Check credentials.'
- '404 Not Found: Ensure endpoint is correct.'
- '500 Internal Server Error: Try again later.'
- 'authentication check failed: {status_code} -- {result}'
- 'report request failed: {status_code} -- {result}'
- 'report status check failed: {status_code} -- {result}'
- 'failed to download report: {status_code} -- {result}'
- '100: Delivery failed, retrying.'
- '200: Successful delivery.'
- '400: Bad request, check your payload.'
- HTTP response code outside of the range [200..300) will be considered a failure.
- '401 Unauthorized: Recheck token or credentials'
- '202 Accepted: Event delivered successfully.'
- '200 OK: Event delivered successfully.'
- '401 Unauthorized: Recheck OAuth token.'
- 4xx response indicates that you should not retry, but rather you should fix the
  query.
- '200: Requested data is found and returned in the body'
- '201: Case or contact created successfully'
- '400: Invalid field in payload'
- '401: API key is invalid or has become de-authenticated'
- '404: contact or case not found'
- '422: Field validation error when creating a customer or case, or updating a case.'
- '500: unexpected error'
- '409 Conflict: A second POST request results in an error.'
- '400: This status code is usually returned when the disassociation request contains
  an association that does not exist'
- '429: This status code indicates a rate limit error. Response will keep resubmitting
  the disassociation request'
- '400 Bad Request: Check for malformed data in handles.'
- '404 Not Found: Ensure the author exists before attempting to update.'
- 400 - Unsupported network type
- '400: Unsupported network type'
- '400: Call will fail if the ID passed in the URL does not exist in Care'
- Malformed data may cause some updates to fail.
- 'Invalid credentials: Check your HMAC key and secret.'
- 'Unauthorized: Ensure your bot has the necessary permissions.'
- '400 Bad Request: Ensure the request payload is formatted correctly.'
- '401 Unauthorized: Check the token and its expiration.'
- '404: Not Found'
- '422: Error in registration payload'
- '400 Bad Request: Ensure that the control JSON payload is correctly formatted.'
- 400 - Result
- 409 - Result
- '202: Successful request'
- '400 Bad Request: Validate the request payload'
- '401 Unauthorized: Check the token validity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '404 Not Found: Check endpoint path or resource ID.'
- '200: Success'
- '400 Bad Request: Check your input parameters'
- '404 error, not found: This occurs if the conversation hasn’t been created yet in
  Khoros.'
- '400 Bad Request: Invalid parameters'
- Some conversations could not be processed.
- '400: Some conversations could not be processed.'
- '200: Request successful'
- '500: Not in active session'
- '400: Agent doesn''t have access to the state'
- '500: Target not in active session'
- '500: Target agent isn''t in an active session.'
- '400: State that the target agent doesn''t have access to.'
- '401 (Authentication Failure): API key is invalid or has become de-authenticated'
- '400 (Generic Error): Name of the error code.'
- '500 (Unexpected Error): Unexpected Error'
- '404: No case exists with the provided ID'
- '500: Unexpected Error'
- '400: Invalid Field in Payload'
- '401: API Key is Invalid'
- '400 (Invalid Field in Payload): Invalid field in payload. Generic errors.'
- '401 (API Key is Invalid): API key is invalid or has become de-authenticated.'
- '422 (Field Validation Error): A field validation error has occurred.'
- '500 (Unexpected Error): Unexpected error.'
- '404: Customer Not Found'
- '401 (Invalid API Key): API key is invalid or has become de-authenticated'
- '404 (Customer Not Found): No case exists with the provided ID'
- '401 (Invalid API Key): API key is invalid or has become de-authenticated.'
- '404 (Meta Type Not Supported): Requested meta type is not supported.'
- '500 (Unexpected Error): Unexpected error occurred.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Basic authentication
  - JWT authentication
  - Author
  - Coordinate
client:
  base_url: https://api.app.lithium.com
  auth:
    type: oauth2
    flow: jwt
    location: header
    header_name: Authorization
source_metadata: null
