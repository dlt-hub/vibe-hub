resources:
- name: create_payout_request
  endpoint:
    path: /api/payouts
    method: POST
    data_selector: payouts
    params: {}
- name: list_payout_requests
  endpoint:
    path: /api/payouts
    method: GET
    data_selector: payouts
    params: {}
- name: query_payout_request
  endpoint:
    path: /api/payouts/{payoutId}
    method: GET
    data_selector: payout
    params: {}
- name: retrieve_balance
  endpoint:
    path: /api/balance
    method: GET
    data_selector: balance
    params: {}
- name: download_transaction_report
  endpoint:
    path: /api/payouts/report
    method: GET
    data_selector: report
    params: {}
- name: download_statement_report
  endpoint:
    path: /api/payouts/statement
    method: GET
    data_selector: statement
    params: {}
- name: initiate_checkout
  endpoint:
    path: /v2/checkout
    method: POST
    data_selector: checkoutId
    params: {}
- name: payment_methods
  endpoint:
    path: /docs/pp-payment-methods
    method: GET
    data_selector: records
- name: checkout
  endpoint:
    path: /v2/checkout
    method: POST
    data_selector: checkoutId
- name: checkout
  endpoint:
    path: /v2/checkout
    method: POST
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: url
- name: checkout_instance
  endpoint:
    path: /checkout/:checkoutId
    method: GET
    data_selector: response
- name: checkout_status
  endpoint:
    path: /v2/checkout/{checkoutId}/status
    method: GET
    data_selector: status
    params: {}
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: enabled_payment_methods
    params: {}
- name: checkout_status
  endpoint:
    path: /status
    method: GET
    params:
      authentication.entityId: 8ac7a4c8708b8dae01708be6bb3b018e
      merchantTransactionId: ffghfsdrererwsdsf
      signature: 99699bb4a04af65a762ec4d15363a3d79aa21a12786721e0e89fa6c98933fb18
- name: checkout_initiate
  endpoint:
    path: /checkout
    method: POST
    params:
      amount: '2'
      authentication.entityId: 8ac7a4ca68c22c4d0168c2caab2e0025
      currency: ZAR
      merchantTransactionId: TESTING002
      nonce: Test1234
      paymentType: DB
      shopperResultUrl: https://example.com/example-webhook
      signature: 311ed8e11e2da00d98c7479ca390a5396fe643e13629d850243dada877963afd
- name: checkout_initiate
  endpoint:
    path: /checkout/initiate
    method: POST
    data_selector: response
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: response
    params: {}
- name: payment_response
  endpoint:
    path: /checkout/payment/response
    method: POST
    data_selector: response
    params: {}
- name: redirect_response
  endpoint:
    path: /checkout/redirect-response
    method: POST
- name: checkout_status
  endpoint:
    path: /status
    method: GET
    data_selector: status
    params:
      merchantTransactionId: Test1234
- name: merchant_specs
  endpoint:
    path: /merchant_specs
    method: GET
    data_selector: payment_methods
- name: refund
  endpoint:
    path: /v1/checkout/refund
    method: POST
    data_selector: ''
    params: {}
- name: checkout_event
  endpoint:
    path: /checkout/events
    method: POST
    data_selector: event
    params: {}
- name: checkout_uncertain_status
  endpoint:
    path: /webhooks/checkout/uncertain_status
    method: POST
    data_selector: ''
    params: {}
- name: checkout_cancelled
  endpoint:
    path: /webhooks/checkout/cancelled
    method: POST
    data_selector: ''
    params: {}
- name: generate_payment_link
  endpoint:
    path: /generate-link
    method: POST
- name: cancel_payment_link
  endpoint:
    path: /cancel-link
    method: POST
- name: query_payment_status
  endpoint:
    path: /query-payment
    method: GET
- name: retrieve_all_payment_links
  endpoint:
    path: /retrieve-all-payment-links
    method: GET
- name: generate_payment_link
  endpoint:
    path: /reference/post_api-channels-entityid-payments-1
    method: POST
- name: cancel_payment_link
  endpoint:
    path: /reference/delete_api-payments-paymentid-1
    method: DELETE
- name: query_payment_status
  endpoint:
    path: /reference/get_api-payments-paymentid-1
    method: GET
- name: retrieve_all_payment_links
  endpoint:
    path: /reference/get_api-payments-1
    method: GET
- name: upload_pdf
  endpoint:
    path: /reference/post_api-attachments
    method: POST
- name: download_pdf
  endpoint:
    path: /reference/get_api-payments-paymentid-files-fileid
    method: GET
- name: generate_batch_link
  endpoint:
    path: /reference/post_api-channels-entityid-payments-batches
    method: POST
- name: query_all_batch_statuses
  endpoint:
    path: /reference/get_api-channels-entityid-payments-batches
    method: GET
- name: query_batch_status
  endpoint:
    path: /reference/get_api-batches-batchid
    method: GET
- name: retrieve_batch_error_files
  endpoint:
    path: /reference/get_api-batches-batchid-files
    method: GET
- name: payment_link
  endpoint:
    path: /api/payments/{paymentLinkId}
    method: GET
    data_selector: payment_link_details
- name: generate_payment_link
  endpoint:
    path: /api/channels/{entityId}/payments
    method: POST
- name: cancel_payment_link
  endpoint:
    path: /api/channels/{entityId}/payments/cancel
    method: POST
- name: query_payment_status
  endpoint:
    path: /api/channels/{entityId}/payments/status
    method: GET
- name: retrieve_all_payment_links
  endpoint:
    path: /api/channels/{entityId}/payments
    method: GET
- name: generate_bulk_payment_links
  endpoint:
    path: /api/channels/{entityId}/payments/bulk
    method: POST
- name: cancel_payment_link
  endpoint:
    path: /api/payments/{paymentId}
    method: DELETE
- name: payment_status
  endpoint:
    path: /api/payments/{paymentId}
    method: GET
    data_selector: payment_details
- name: payment_links
  endpoint:
    path: /api/payments
    method: GET
    data_selector: payment_links
- name: bulk_payment_links
  endpoint:
    path: /api/channels/{entityId}/payments/batches
    method: POST
    data_selector: url
- name: payment_link
  endpoint:
    path: /payment-links
    method: POST
- name: bulk_payment_links
  endpoint:
    path: /payment-links/bulk
    method: POST
- name: payment_link_status
  endpoint:
    path: /payment-links/status
    method: GET
- name: generate_payment_link
  endpoint:
    path: /api/generate-link
    method: POST
    data_selector: link
- name: cancel_payment_link
  endpoint:
    path: /api/cancel-link
    method: POST
    data_selector: status
- name: query_payment_status
  endpoint:
    path: /api/query-payment
    method: GET
    data_selector: payment_status
- name: retrieve_all_payment_links
  endpoint:
    path: /api/retrieve-all-payment-links
    method: GET
    data_selector: payment_links
- name: generate_bulk_payment_links
  endpoint:
    path: /api/generate-bulk-payment-links
    method: POST
    data_selector: bulk_links
- name: generate_payment_link
  endpoint:
    path: /docs/generate-link-1
    method: POST
- name: cancel_payment_link
  endpoint:
    path: /docs/cancel-link
    method: DELETE
- name: query_payment_status
  endpoint:
    path: /docs/query-payment
    method: GET
- name: retrieve_all_payment_links
  endpoint:
    path: /docs/retrieve-all-payment-links
    method: GET
- name: generate_bulk_payment_links
  endpoint:
    path: /docs/generate-bulk-payment-links
    method: POST
- name: bulk_payment_links
  endpoint:
    path: /bulk-payment-links
    method: POST
    data_selector: links
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: transaction
    params: {}
- name: refund
  endpoint:
    path: /payments/{unique_transaction_id}/
    method: POST
    data_selector: refund
    params:
      payment_type: RF
- name: transaction_status
  endpoint:
    path: /transactions/status
    method: GET
    data_selector: status
    params: {}
- name: capture
  endpoint:
    path: /payments/{id}
    method: POST
    data_selector: transaction
    params:
      paymentType: CP
- name: reverse
  endpoint:
    path: /payments/{id}
    method: POST
    data_selector: transaction
    params:
      paymentType: RV
- name: payment_links
  endpoint:
    path: /payment-links
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: settlement_reconciliation
  endpoint:
    path: /dashboard/reporting/settlements
    method: GET
- name: user_logs
  endpoint:
    path: /user_logs
    method: GET
    data_selector: logs
    params: {}
- name: Payment extensions
  endpoint:
    path: /docs/payment-extensions-overview
    method: GET
    data_selector: payment_extensions
- name: Checkout credentials
  endpoint:
    path: /docs/checkout-overview#/find-your-credentials
    method: GET
    data_selector: checkout_credentials
- name: payment_links
  endpoint:
    path: /pp-hosted/secure/webhook
    method: POST
- name: pay_in_request
  endpoint:
    path: /checkout/sbt
    method: POST
- name: check_status_request
  endpoint:
    path: /status/sbt
    method: GET
- name: payment_links
  endpoint:
    path: /payment_links
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: payouts
  endpoint:
    path: /docs/payouts-api-1
    method: GET
- name: payout_requests
  endpoint:
    path: /v1/payouts
    method: POST
    data_selector: data
    params: {}
- name: reconciliation_reports
  endpoint:
    path: /docs/dashboard-reporting-reconciliation
    method: GET
- name: transaction_reconciliation
  endpoint:
    path: /docs/bus-ops-recon-api
    method: GET
- name: transactions_recon
  endpoint:
    path: /api/merchants/{merchantId}/transactions-recon
    method: GET
    data_selector: transactions
    params:
      startDate: '2024-04-01T00:00:00.000Z'
      endDate: '2024-04-02T00:00:00.000Z'
- name: list_transactions_recon
  endpoint:
    path: /api/merchants/{merchantId}/transactions-recon
    method: GET
    data_selector: transactions
    params:
      batchNumber: filter
      settlementReference: filter
- name: payment_types
  endpoint:
    path: /docs/payment-types
    method: GET
    data_selector: payment_types
    params: {}
- name: create_payout_request
  endpoint:
    path: /api/merchants/{merchantId}/payouts
    method: POST
- name: list_payout_requests
  endpoint:
    path: /listpayoutrequests
    method: GET
- name: query_payout_request
  endpoint:
    path: /querypayoutrequest
    method: GET
- name: create_payout_request
  endpoint:
    path: /api/merchants/{merchantId}/payouts
    method: POST
    data_selector: payoutRequestId
    params: {}
- name: initiate_checkout
  endpoint:
    path: /v2/checkout
    method: POST
- name: query_checkout_status
  endpoint:
    path: /v2/checkout/{checkoutId}/status
    method: GET
- name: initiate_checkout
  endpoint:
    path: /v2/checkout
    method: POST
    data_selector: checkoutId
- name: query_checkout_status
  endpoint:
    path: /v2/checkout/{checkoutId}/status
    method: GET
    data_selector: status
- name: checkout_status
  endpoint:
    path: /checkout/{checkoutId}/status
    method: GET
    data_selector: object
    params: {}
- name: checkout_status
  endpoint:
    path: /v2/checkout/{checkoutId}/status
    method: GET
    data_selector: object
    params: {}
- name: checkout_validation
  endpoint:
    path: /v2/checkout/validate
    method: POST
    data_selector: message
- name: validate_checkout_request
  endpoint:
    path: /v2/checkout/validate
    method: POST
- name: payment_methods
  endpoint:
    path: /v2/channels/{entityId}/payment-methods
    method: GET
    data_selector: paymentMethods
    params:
      currency: ''
- name: payment_methods
  endpoint:
    path: /v2/channels/{entityId}/payment-methods
    method: GET
    data_selector: paymentMethods
    params:
      currency: USD
- name: initiate_redirect_based_checkout
  endpoint:
    path: /checkout/initiate
    method: POST
- name: initiate_checkout
  endpoint:
    path: /checkout
    method: POST
- name: query_checkout_status
  endpoint:
    path: /get_status
    method: GET
- name: validate_checkout_request
  endpoint:
    path: /post_checkout-validate
    method: POST
- name: initiate_redirect_checkout
  endpoint:
    path: /checkout/initiate
    method: POST
    data_selector: null
    params: {}
- name: validate_checkout_request
  endpoint:
    path: /checkout/validate
    method: POST
- name: initiate_checkout
  endpoint:
    path: /checkout
    method: POST
- name: query_checkout_status
  endpoint:
    path: /get_status
    method: GET
- name: checkout_status
  endpoint:
    path: /status
    method: GET
    data_selector: object
    params:
      authentication.entityId: string
      checkoutId: string
      merchantTransactionId: string
      signature: string
- name: validate_checkout_request
  endpoint:
    path: /checkout/validate
    method: POST
- name: payment_methods
  endpoint:
    path: /merchant_specs
    method: POST
    data_selector: response
    params:
      authentication.entityId: string
      signature: string
      currency: string
- name: checkout_status
  endpoint:
    path: /status
    method: GET
    data_selector: object
    params:
      authentication.entityId: ''
      checkoutId: ''
      merchantTransactionId: ''
      signature: ''
- name: generate_link
  endpoint:
    path: /api/channels/{entityId}/payments
    method: POST
    data_selector: object
    params: {}
- name: payment_methods
  endpoint:
    path: /merchant_specs
    method: POST
    data_selector: payment_methods
    params: {}
- name: cancel_link
  endpoint:
    path: /payments/{paymentId}
    method: DELETE
- name: payment_links
  endpoint:
    path: /payments
    method: GET
    params:
      offset: 0
      perPage: 50
- name: generate_link
  endpoint:
    path: /api/channels/{entityId}/payments
    method: POST
- name: cancel_link
  endpoint:
    path: /api/payments/paymentid-1
    method: DELETE
- name: retrieve_payment_methods
  endpoint:
    path: /api/channels/entityid/payment-methods
    method: GET
- name: query_payment_status
  endpoint:
    path: /api/payments/paymentid-1
    method: GET
- name: query_payment_status
  endpoint:
    path: /{paymentId}
    method: GET
- name: cancel_link
  endpoint:
    path: /payments/{paymentId}
    method: DELETE
- name: download_file
  endpoint:
    path: /api/payments/{paymentId}/files/{fileId}
    method: GET
    data_selector: object
- name: payment_links
  endpoint:
    path: /api/payments
    method: GET
    data_selector: payments
    params:
      offset: 0
      perPage: 50
- name: upload_file
  endpoint:
    path: /api/attachments
    method: POST
- name: payment_status
  endpoint:
    path: /api/payments/{paymentId}
    method: GET
- name: generate_batch_link
  endpoint:
    path: /api/channels/{entityId}/payments/batches
    method: POST
- name: download_file
  endpoint:
    path: /api/payments/{paymentId}/files/{fileId}
    method: GET
    data_selector: object
- name: upload_file
  endpoint:
    path: /api/attachments
    method: POST
- name: batch_statuses
  endpoint:
    path: /api/channels/{entityId}/payments/batches
    method: GET
    data_selector: batches
    params:
      offset: 0
      perPage: 50
- name: batch_link_status
  endpoint:
    path: /api/batches/{batchId}
    method: GET
- name: get_all_batch_statuses
  endpoint:
    path: /api/channels/entityid/payments/batches
    method: GET
- name: get_batch_error_files
  endpoint:
    path: /api/batches/{batchId}/files
    method: GET
- name: generate_batch_link
  endpoint:
    path: /api/channels/{entityId}/payments/batches
    method: POST
    data_selector: object
    params: {}
- name: batch_error_files
  endpoint:
    path: /api/batches/{batchId}/files
    method: GET
    data_selector: errorFileUrl
    params: {}
- name: batch_statuses
  endpoint:
    path: /api/channels/{entityId}/payments/batches
    method: GET
    data_selector: batches
    params:
      offset: 0
      perPage: 50
- name: batch_link_status
  endpoint:
    path: /{batchId}
    method: GET
    data_selector: object
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: result
    params: {}
- name: transaction_status
  endpoint:
    path: /transaction_status
    method: GET
    data_selector: result
    params: {}
- name: batch_error_files
  endpoint:
    path: /batches/{batchId}/files
    method: GET
    data_selector: errorFileUrl
    params: {}
- name: refund
  endpoint:
    path: /payments/{uniqueId}
    method: POST
    data_selector: result
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: POST
- name: transaction_status
  endpoint:
    path: /payments
    method: GET
    params:
      authentication.userId: string
      authentication.password: string
      authentication.entityId: string
      merchantTransactionId: string
- name: transaction
  endpoint:
    path: /payments/{uniqueId}
    method: GET
    data_selector: object
    params:
      authentication.entityId: string
      authentication.userId: string
      authentication.password: string
- name: transaction_status
  endpoint:
    path: /payments
    method: GET
    data_selector: result
    params:
      authentication.userId: string
      authentication.password: string
      authentication.entityId: string
      merchantTransactionId: string
- name: balance
  endpoint:
    path: /merchants/{merchantId}/balance
    method: GET
- name: transaction_status
  endpoint:
    path: /payments/{uniqueId}
    method: GET
    data_selector: result
    params:
      authentication.entityId: required
      authentication.userId: required
      authentication.password: required
- name: list_payout_requests
  endpoint:
    path: /api/merchants/{merchantId}/payouts
    method: GET
    data_selector: requests
    params:
      startDate: string
      endDate: string
      search: string
      order: string
- name: balance
  endpoint:
    path: /api/merchants/{merchantId}/balance
    method: GET
    data_selector: object
- name: query_payout_request
  endpoint:
    path: /api/merchants/{merchantId}/payouts/{payoutRequestId}/status
    method: GET
    data_selector: payoutRequestId
    params: {}
- name: list_payout_requests
  endpoint:
    path: /api/merchants/{merchantId}/payouts
    method: GET
    data_selector: requests
    params:
      startDate: string
      endDate: string
      search: string
      order: string
- name: payouts_transaction_report
  endpoint:
    path: /api/merchants/{merchantId}/reports/payouts/download
    method: GET
    params:
      startDate: string
      endDate: string
- name: query_payout_request
  endpoint:
    path: /api/merchants/{merchantId}/payouts/{payoutRequestId}/status
    method: GET
- name: payouts_statement_report
  endpoint:
    path: /api/merchants/{merchantId}/reports/statement/download
    method: GET
    data_selector: string
    params:
      startDate: string
      endDate: string
- name: payouts_transaction_report
  endpoint:
    path: /api/merchants/{merchantId}/reports/payouts/download
    method: GET
    params:
      startDate: string
      endDate: string
- name: bulk_payout_file
  endpoint:
    path: /api/merchants/{merchantId}/payouts/upload
    method: POST
    data_selector: bulkPayoutId
    params: {}
- name: payouts_statement_report
  endpoint:
    path: /api/merchants/{merchantId}/reports/statement/download
    method: GET
    data_selector: CSV
    params:
      startDate: string
      endDate: string
- name: bulk_payouts
  endpoint:
    path: /merchants/{merchantId}/payouts/upload
    method: GET
    data_selector: bulkPayouts
- name: bulk_payouts
  endpoint:
    path: /api/merchants/{merchantId}/payouts/upload
    method: POST
    data_selector: bulkPayoutId
    params: {}
- name: error_file_url
  endpoint:
    path: /api/merchants/{merchantId}/payouts/upload/{bulkPayoutId}/error
    method: GET
- name: bulk_payout_uploads
  endpoint:
    path: /merchants/{merchantId}/payouts/upload
    method: GET
    data_selector: bulkPayouts
- name: transactions_recon
  endpoint:
    path: /api/merchants/{merchantId}/transactions-recon
    method: GET
    params:
      startDate: ''
      endDate: ''
      isSuccessful: ''
      paymentMethod: ''
      batchNumber: ''
      settlementReference: ''
- name: get_error_file_url
  endpoint:
    path: /api/merchants/{merchantId}/payouts/upload/{bulkPayoutId}/error
    method: GET
- name: initiate_checkout
  endpoint:
    path: /v2/checkout
    method: POST
    data_selector: checkoutId
    params: {}
- name: transactions_recon
  endpoint:
    path: /api/merchants/{merchantId}/transactions-recon
    method: GET
    data_selector: array of objects
    params:
      merchantId: required
      startDate: required
      endDate: required
- name: initiate_redirect_based_checkout
  endpoint:
    path: /checkout/initiate
    method: POST
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: checkoutId
    params: {}
- name: checkout_status
  endpoint:
    path: /checkout/{checkoutId}/status
    method: GET
    data_selector: status
    params: {}
- name: generate_link
  endpoint:
    path: /api/channels/{entityId}/payments
    method: POST
- name: initiate_redirect_based_checkout
  endpoint:
    path: /checkout/initiate
    method: POST
    data_selector: redirectUrl
- name: payment_links
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
    params:
      offset: 0
      perPage: 50
- name: download_file
  endpoint:
    path: /api/payments/{paymentId}/files/{fileId}
    method: GET
    data_selector: null
    params: {}
- name: generate_link
  endpoint:
    path: /api/channels/{entityId}/payments
    method: POST
- name: cancel_link
  endpoint:
    path: /api/payments/paymentid-1
    method: DELETE
- name: retrieve_payment_methods
  endpoint:
    path: /api/payments-1
    method: GET
- name: query_payment_status
  endpoint:
    path: /api/payments/paymentid-1
    method: GET
- name: generate_batch_link
  endpoint:
    path: /api/channels/{entityId}/payments/batches
    method: POST
    data_selector: id
    params: {}
- name: payment_links
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
    params:
      offset: 0
      perPage: 50
- name: download_file
  endpoint:
    path: /api/payments/{paymentId}/files/{fileId}
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: null
    params: {}
- name: generate_batch_link
  endpoint:
    path: /api/channels/{entityId}/payments/batches
    method: POST
- name: transaction_status
  endpoint:
    path: /payments
    method: GET
    data_selector: result
    params:
      authentication.userId: required
      authentication.password: required
      authentication.entityId: required
      merchantTransactionId: required
- name: payment
  endpoint:
    path: /payments
    method: POST
- name: transaction_status
  endpoint:
    path: /transaction_status
    method: GET
- name: balance
  endpoint:
    path: /api/merchants/{merchantId}/balance
    method: GET
    data_selector: object
- name: transaction_status
  endpoint:
    path: /payments
    method: GET
    data_selector: result
    params:
      authentication.userId: string
      authentication.password: string
      authentication.entityId: string
      merchantTransactionId: string
- name: create_payout_request
  endpoint:
    path: /api/merchants/{merchantId}/payouts
    method: POST
    data_selector: payoutRequestId
- name: balance
  endpoint:
    path: /merchants/{merchantId}/balance
    method: GET
- name: payouts_transaction_report
  endpoint:
    path: /api/merchants/{merchantId}/reports/payouts/download
    method: GET
    data_selector: CSV file containing the payout transaction report
    params:
      startDate: required
      endDate: required
- name: bulk_payout
  endpoint:
    path: /api/merchants/{merchantId}/payouts/upload
    method: POST
- name: create_payout_request
  endpoint:
    path: /api/merchants/{merchantId}/payouts
    method: POST
- name: list_payout_requests
  endpoint:
    path: /listpayoutrequests
    method: GET
- name: query_payout_request
  endpoint:
    path: /querypayoutrequest
    method: GET
- name: payouts_transaction_report
  endpoint:
    path: /api/merchants/{merchantId}/reports/payouts/download
    method: GET
    params:
      startDate: required
      endDate: required
- name: transactions_recon
  endpoint:
    path: /api/merchants/{merchantId}/transactions-recon
    method: GET
    data_selector: array of objects
    params:
      merchantId: string
      startDate: date-time
      endDate: date-time
      isSuccessful: boolean
      paymentMethod: string
      batchNumber: string
      settlementReference: string
notes:
- Webhooks provide updates on any changes in the state of the payouts.
- Peach Payments uses exponential backoff logic for retrying webhooks.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Enterprise-grade security (3-D Secure enabled and PCI compliant)
- Mobile-optimised user experience
- Industry-leading conversion rates
- Supports multiple currencies
- Hosted Checkout powers Payment Links and all payment extensions, including Xero.
- The Payments API does not support card payments.
- Customers with Bitcoin Lightning Network wallets must provide their wallet address
  during the initial payment process if they want to be able to request a refund later.
- Checkout V2 supports Embedded Checkout and Hosted Checkout and uses modern authentication
  techniques.
- Embedded Checkout does not support PayPal.
- Embedded Checkout does not support Google Pay Web and Samsung Pay Web in React Native
  and Flutter integrations due to how they try to open new tabs or windows to complete
  a payment.
- Requires a unique nonce for each request made to the /v2/checkout URL
- Requires that you allowlist URL domains that execute the API POST request to Checkout
  for added security
- Never store or use your Peach Payments credentials from your mobile app.
- Using the `source={{html}}` property of WebView does not work as expected.
- Apple Pay, Google Pay, and Samsung Pay buttons are logos and are not affected by
  font changes.
- The CVV and card number fields do not support certain fonts.
- Sending a Hosted Checkout link to a customer using WhatsApp or a service that unfurls
  the link is not supported.
- Checkout (both Embedded and Hosted) does not support iframing.
- The initial status is created.
- Embedded Checkout is a new integration and does not support an upgrade path from
  Hosted Checkout.
- The secret token provided by Peach Payments acts as the key to generate the signature.
- All requests must be over SSL.
- Each payment request requires a unique nonce parameter to ensure authenticity.
- For the Form POST method, you must sign the data on the backend and execute the
  POST from the browser.
- The response includes parameters passed in the Hosted Checkout payment POST request.
- The API signs all redirect requests with a signature using the secret token as the
  key.
- All GET status requests require a signature using the secret token as the key.
- Use unique merchantTransactionId values for each checkout request.
- High-risk merchants must provide verified ID numbers in requests to enable their
  customers to pay using Capitec Pay.
- All refund requests require a signature and the API signs all responses with a signature
  using the secret token as the key.
- Tokenisation is only available for Visa, Mastercard, Amex, and Diners cards.
- You must get permission from your customers before tokenising their cards.
- Webhooks are HTTP callbacks that deliver notification messages for events.
- Peach Payments cannot guarantee the order of webhooks.
- You can generate a payment link or a batch of up to 1000 payment links for amounts
  up to 99999999.99 for the selected currency.
- Receive payment and batch updates via webhooks and successful transaction email
  receipts.
- You can reuse the access token from step 2 for multiple API calls.
- When the token expires, you need to generate a new one.
- The merchant must upload a CSV file with payment links' details.
- Payment Links uses Checkout to accept payments.
- Only certain roles can activate Payment Links.
- Only certain roles can create and cancel payment links.
- Support for sending payment link notifications using WhatsApp is still in development
  and is not supported.
- Ensure your system responds with a 200 status response for webhooks.
- Webhook payloads must be decrypted to process transaction data.
- Peach Payments sends webhooks for certain events.
- Peach Payments expects a 200 HTTP for successful webhook delivery and a non-200
  HTTP status code for failures.
- For an unsuccessful response, Peach Payments retries the webhook for seven days
  or until a successful acknowledgement (200 HTTP) occurs.
- The Payments API does not support card, A+ store cards, Apple Pay, and PayPal.
- Payment Page supports your default currency and cannot accept multiple currencies.
- Payment Page uses Embedded Checkout to accept payments and has the same payment
  method limitations that Embedded Checkout has.
- You have seven days to capture or reverse a preauthorisation.
- You cannot undo a full or partial capture after Peach Payments has processed it.
- You cannot undo a full or partial reversal after Peach Payments has processed it.
- Refunds are not allowed on preauthorisations.
- Some functionality is limited until onboarding is completed.
- Not all card transactions feature the Merchant Advice Code.
- Only certain roles can export transactions.
- Only certain roles can refund transactions.
- The refund should reflect in the customer's account in 3 to 10 working days.
- A refund older than six months must be manually processed by the Peach Payments
  team.
- The proof of refund becomes available 10 minutes after the processing of the transaction.
- The proof of 3-D Secure is not available immediately.
- Peach Payments might withhold settlement for various reasons, including outstanding
  FICA documents, suspected fraud, chargeback disputes, sudden spikes in transaction
  volumes, incomplete verifications, outstanding fees, and so on.
- You can only view and activate payment methods that Peach Payments offers in your
  country.
- If you have not completed onboarding, you cannot activate payment methods.
- Adding a domain on sandbox does not need verification.
- Only certain roles can manage settings.
- Documentation for integration available on the website
- Most Dashboard information is static, merchants cannot edit their business settings
  or enable payment methods or services.
- Take App only supports live payments. You cannot test in sandbox.
- Requires review by Peach Payments South Africa for account activation.
- Does not support recurring payments, only once-off payments.
- Does not support full or partial refunds.
- Peach Payments strongly recommends testing using sandbox credentials before accepting
  live payments.
- Embedded Checkout does not support certain payment methods
- Does not support full or partial refunds. Use the platform's offline refund feature
  to log the refund.
- The OpenCart payment extension supports once-off payments, but not recurring payments
  or one-click payments using stored cards.
- Does not support full or partial refunds. Use the platform's offline refund feature
  to log the refund, and then either manually refund your customer or do so using
  the Peach Payments Dashboard.
- Full or partial refunds are not supported, you must request that Peach Payments
  process refunds manually.
- Sandbox Dashboard cannot accept live payments.
- Wix supports one base currency. If you set your currency to one that is not supported
  by a payment method, then you cannot offer that payment method.
- You must have a Wix business & eCommerce premium plan to accept payments with Peach
  Payments.
- Peach Payments does not have sandbox environments for Wix. The API key provided
  when you sign up can process live transactions.
- Peach Payments does not support webhooks for Wix.
- Embedded Checkout does not support certain payment methods.
- Before executing any payouts, you should send Peach Payments a source of funds document
  for compliance reasons.
- Once a payout is successfully submitted, you cannot recall it.
- Refunds are not supported.
- Failed payouts incur fees.
- Only certain roles can activate Payouts.
- Only certain roles can create payouts.
- This API has certain limitations.
- Retrieve your Payouts API credentials from the Payouts section of the Dashboard.
- 'Rate limit: One request per second'
- Cannot query transactions before 1 January 2023
- Cannot query transactions on a date range longer than 24 hours per request
- Reference materials for the Reconciliation product
- The Reconciliation API offers the ability to list transactions programmatically
  for internal reconciliation processes.
- The Reconciliation API offers you the ability to list transactions programmatically
  for your internal reconciliation processes.
- Card payments are not available on Payments API.
- When testing multi-currency processing in sandbox, you must use either 92.00 or
  15.99 as the transaction amount to simulate a successful transaction.
- You must have an Apple developer test account to test Apple Pay.
- Google Pay is only available on Checkout.
- Samsung Pay is only available on Checkout.
- You cannot test Samsung Pay in sandbox and must perform testing in the live environment.
- You cannot test MoneyBadger in sandbox and must perform testing in the live environment.
- When testing the successful payment scenario on sandbox using the `51100000` number,
  when you get to the confirmation message screen, wait for the confirmation request
  to expire to simulate a successful payment.
- Testing this way requires manual intervention and synchronisation between you, Peach
  Payments, and Emtel.
- Apple Pay is only available on Checkout.
- Peach Payments uses webhooks to inform merchant systems when certain events occur.
- Peach Payments does not store any sensitive cardholder data on our servers at any
  time for either once-off or recurring payments.
- Sensitive cardholder details are directly transmitted from users' browsers to Peach
  Payments' systems.
- The entity for the request is the channel ID.
- Load Hosted Checkout to complete a payment.
- The POST request contains the entityId, signature, purchase parameters, and any
  custom parameters that a merchant optionally sends.
- The URL for this request expired after 30 days.
- The POST request contains the entityId, signature, purchase parameters, and any
  custom parameters.
errors:
- '2001.002.106: Payout processing error - There is no account associated with the
  account number and the bank you entered.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: A validation error has occurred with Checkout.'
- '401: Request lacks valid authentication, message in response contains specifics.'
- '404: Invalid entity ID passed.'
- '500: Internal server error.'
- '800.100.195: Attempts to refund the transaction fail if wallet address is not provided
  during the initial payment'
- 'RESPONSE_ERROR: Check the payment parameters and signature.'
- 'RESPONSE_CODE: Check the response codes documentation for specific error handling.'
- 'INVALID_PARAMETER: Check request parameters for correctness'
- 'SIGNATURE_MISMATCH: Ensure signature is generated correctly'
- '100.550.701: amounts not matched'
- '700.400.200: cannot refund (refund volume exceeded or tx reversed or invalid workflow?)'
- '700.300.100: referenced tx can not be refunded, captured or reversed (invalid type)'
- '200: Successful acknowledgment of the webhook.'
- 'Non-200: Webhook delivery considered failed, will be retried.'
- Unable to authenticate
- Unable to retrieve Payment Link details
- '000.200.000: Transaction created and is in a pending state'
- '000.000.000: Transaction successful'
- '000.400.000: Transaction failed'
- Non-200 HTTP status code indicates a failure.
- Response codes available in the documentation
- 'Error [CURL] - The requested URL returned error: 401'
- Webhook delivery requires a 200 HTTP status response.
- Non-200 HTTP status code for failures results in retries.
- '2000 to 2899 response codes: Typically returned due to incorrect customer bank
  details or issues with the customer''s bank account.'
- '400: There have been one or more field validation errors.'
- '401: The request is not authenticated. Please re-authenticate and provide a new
  token.'
- '403: The request is not authorised. Please contact your business administrator.'
- 400 - There have been one or more field validation errors.
- 401 - The request is not authenticated. Please re-authenticate and provide a new
  token.
- 403 - The request is not authorised. Please contact your business administrator.
- 400 A validation error has occurred with Checkout.
- 401 Request lacks valid authentication, message in response contains specifics.
- 404 Invalid entity ID passed.
- 500 Internal server error.
- 401 Invalid authentication information.
- 404 Checkout not found.
- 401 Request lacks valid authentication.
- '400: Invalid authentication information.'
- 400 Invalid state, check the body for more details.
- 400 Invalid request
- 500 Internal server error
- '400 Bad request: Has additional fields'
- 401 Request lacks valid authentication
- 404 The specified resource was not found.
- 400 Bad request
- 404 The specified resource was not found
- '400 Bad request: required'
- '401 Request lacks valid authentication: required'
- '404 The specified resource was not found: required'
- '400 Bad request: Required field missing'
- 400 Bad request.
- '400 Bad request: message required'
- '401 Request lacks valid authentication: message required'
- '404 The specified resource was not found: message required'
- '400 Bad request: Error result object describing the error code and parameter errors.'
- '401 Unauthorised: The result object.'
- '500 Internal server error: The result object.'
- 401 Unauthorized
- 404 Not found
- 502 Bad gateway
- 401 Unauthorised
- '401 Unauthorised: The result object with additional details about the error.'
- '404 Not found: The unique code that indicates the result status of the request.'
- '500 Internal server error: The result object with additional details about the
  error.'
- '401 Unauthorised: The unique code that indicates the result status of the request.'
- '403 Forbidden: The unique code that indicates the result status of the request.'
- '500 Internal server error: The unique code that indicates the result status of
  the request.'
- '401 Unauthorised: The result object indicating the result status of the request.'
- '404 Not found: The result object indicating the result status of the request.'
- '500 Internal server error: The result object indicating the result status of the
  request.'
- '400: There was an error with the request. Please fix the request and try again.'
- '404: No last balance was found on your account.'
- 403 Forbidden
- 400 Invalid date range. Three month maximum window size allowed.
- 401 The request is not authenticated. Please re-authenticate and provide a new token.
- 403 The request is not authorised. Please contact your business administrator.
- 400 There are missing or invalid path parameters.
- 404 The payout request was not found.
- 400 An invalid date range has been provided for the payout transaction report.
- 400 - An invalid date range has been provided for the payout transaction report.
- 400 There was an error with the request. Please fix the request and try again.
- '400: merchantId required'
- '400: startDate required'
- '400: endDate required'
- '401: default'
- '403: default'
- '500: default'
- '401: Request lacks valid authentication.'
- '401 Request lacks valid authentication: Check your credentials'
- '400: An object containing the error message string.'
- '401: An object containing the error message string.'
- '403: An object containing the error message string.'
- '500: An object containing the error message string.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://peachpayments.com
  auth:
    type: oauth2
source_metadata: null
