resources:
- name: request_support_account
  endpoint:
    path: /laps/request
    method: POST
    data_selector: estimatedWaitTime
    params:
      deviceID: 9999dab9-f946-40ee-9a17-2500c8d00878
- name: retrieve_support_account_credentials
  endpoint:
    path: /laps/retrieve
    method: POST
    data_selector: credentials
    params:
      deviceID: 9999dab9-f946-40ee-9a17-2500c8d00878
- name: RealmJoin Portal
  endpoint:
    path: /api/realmjoin-portal
    method: GET
- name: RealmJoin Core Features
  endpoint:
    path: /api/realmjoin-core-features
    method: GET
- name: RealmJoin Security Features
  endpoint:
    path: /api/realmjoin-security-features
    method: GET
- name: RealmJoin Agent
  endpoint:
    path: /api/realmjoin-agent
    method: GET
- name: organization_details
  endpoint:
    path: /organization/details
    method: GET
    data_selector: data
    params: {}
- name: User
  endpoint:
    path: /user
    method: GET
- name: Group
  endpoint:
    path: /group
    method: GET
- name: Device
  endpoint:
    path: /device
    method: GET
- name: user_details
  endpoint:
    path: /services/data/vX.X/sobjects/UserDetails
    method: GET
    data_selector: records
    params: {}
- name: group_details
  endpoint:
    path: /services/data/vX.X/sobjects/GroupDetails
    method: GET
    data_selector: records
    params: {}
- name: group_details
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: group_details
  endpoint:
    path: /api/groups
    method: GET
    data_selector: groups
- name: device_details
  endpoint:
    path: /ugd-management/user-list/device-details
    method: GET
    data_selector: device_info
- name: LAPS Access
  endpoint:
    path: /api/laps/access
    method: GET
    data_selector: access_settings
- name: BranchCache
  endpoint:
    path: /api/branchcache/config
    method: GET
    data_selector: branchcache_settings
- name: DomainConnect
  endpoint:
    path: /api/domainconnect/config
    method: GET
    data_selector: domainconnect_settings
- name: RealmJoin ESP
  endpoint:
    path: /api/esp/config
    method: GET
    data_selector: esp_settings
- name: Package Downgrade
  endpoint:
    path: /api/packages/downgrade
    method: GET
    data_selector: downgrade_settings
- name: AnyDesk Integration
  endpoint:
    path: /api/anydesk/integration
    method: GET
    data_selector: anydesk_integration_settings
- name: ExecutionMonitor
  endpoint:
    path: /api/executionmonitor
    method: GET
    data_selector: executionmonitor_settings
- name: Notifier
  endpoint:
    path: /api/notifier
    method: GET
    data_selector: notifier_settings
- name: LocalAdminManagement
  endpoint:
    path: /api/localadminmanagement
    method: GET
    data_selector: localadminmanagement_settings
- name: WebLinks
  endpoint:
    path: /api/weblinks
    method: GET
    data_selector: weblinks_settings
- name: Access Restrictions
  endpoint:
    path: /api/access/restrictions
    method: GET
    data_selector: access_restrictions_settings
- name: Various Toggles
  endpoint:
    path: /api/toggles
    method: GET
    data_selector: toggle_settings
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: managed_subscription
  endpoint:
    path: /managed/subscription
    method: GET
- name: basic_package
  endpoint:
    path: /basic/package
    method: GET
- name: packaging_requests
  endpoint:
    path: /app-management/packages/packaging-requests
    method: GET
    data_selector: requests
    params: {}
- name: template
  endpoint:
    path: /avdprovision
    method: POST
    data_selector: template_info
    params: {}
- name: runbooks
  endpoint:
    path: /settings/runbooks
    method: GET
- name: TenantID
  endpoint:
    params: {}
- name: SubscriptionID
  endpoint:
    params: {}
- name: ResourceGroup
  endpoint:
    params: {}
- name: Branch
  endpoint:
    params: {}
- name: Location
  endpoint:
    params: {}
- name: runbooks
  endpoint:
    path: /automation/runbooks
    method: GET
    data_selector: runbooks
    params: {}
- name: sync_runbooks
  endpoint:
    path: /automation/sync
    method: POST
    data_selector: syncStatus
    params: {}
- name: DeviceId
  endpoint:
    path: /automation/runbooks/runbook-customization
    method: POST
    data_selector: Runbooks.rjgit-device_demo-runbook-customizing.ParameterList
    params: {}
- name: ExtraWorkflow
  endpoint:
    path: /automation/runbooks/runbook-customization
    method: POST
    data_selector: Runbooks.rjgit-device_demo-runbook-customizing.ParameterList
    params: {}
- name: ExtraWorkflowTime
  endpoint:
    path: /automation/runbooks/runbook-customization
    method: POST
    data_selector: Runbooks.rjgit-device_demo-runbook-customizing.ParameterList
    params: {}
- name: ContainerName
  endpoint:
    path: Use-RJInterface -Type Setting -Attribute "CaPoliciesExport.Container"
    method: GET
- name: ResourceGroupName
  endpoint:
    path: Use-RJInterface -Type Setting -Attribute "CaPoliciesExport.ResourceGroup"
    method: GET
- name: StorageAccountName
  endpoint:
    path: Use-RJInterface -Type Setting -Attribute "CaPoliciesExport.StorageAccount.Name"
    method: GET
- name: StorageAccountLocation
  endpoint:
    path: Use-RJInterface -Type Setting -Attribute "CaPoliciesExport.StorageAccount.Location"
    method: GET
- name: StorageAccountSku
  endpoint:
    path: Use-RJInterface -Type Setting -Attribute "CaPoliciesExport.StorageAccount.Sku"
    method: GET
- name: remediation_scripts
  endpoint:
    path: /api/remediation/scripts
    method: GET
    data_selector: scripts
- name: managed_scripts
  endpoint:
    path: /managed/scripts
    method: GET
- name: assignments
  endpoint:
    path: /managed/scripts/assignments
    method: GET
- name: managed_groups
  endpoint:
    path: /managed/groups
    method: GET
- name: local_admin_password_solution
  endpoint:
    path: /realmjoin-agent/realmjoin-client/local-admin-password-solution-laps
    method: GET
- name: notifications
  endpoint:
    path: /realmjoin-agent/realmjoin-client/showing-notifications
    method: GET
- name: anydesk_integration
  endpoint:
    path: /realmjoin-agent/realmjoin-client/anydesk-integration
    method: GET
- name: audit_tasks
  endpoint:
    path: /realmjoin-agent/realmjoin-client/audit-tasks
    method: GET
- name: software_deployment
  endpoint:
    path: /realmjoin-agent/realmjoin-client/deploy-apps
    method: GET
- name: EmergencyAccount
  endpoint:
    path: /local-admin-password-solution/laps/emergency-account
    method: GET
    data_selector: records
    params: {}
- name: SupportAccount
  endpoint:
    path: /local-admin-password-solution/laps/support-account
    method: GET
    data_selector: records
    params: {}
- name: PrivilegedAccount
  endpoint:
    path: /local-admin-password-solution/laps/PrivilegedAccount
    method: GET
    data_selector: settings
    params: {}
- name: SelfLAPS
  endpoint:
    path: /local-admin-password-solution/laps/Allow.SelfLAPS
    method: GET
    data_selector: settings
    params: {}
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: POST
    data_selector: data
    params: {}
- name: Audit Log Entries
  endpoint:
    path: /audit/logs
    method: GET
    data_selector: entries
- name: PIM-Eligibility-Group
  endpoint:
    path: /api/v1/groups/eligibility
    method: POST
    data_selector: group
    params: {}
- name: PIM-Enabled-Group
  endpoint:
    path: /api/v1/groups/enabled
    method: POST
    data_selector: group
    params: {}
- name: self_service_forms
  endpoint:
    path: /self-service-forms
    method: GET
    data_selector: forms
    params: {}
- name: Person
  endpoint:
    path: /schema/person
    method: GET
    data_selector: properties
    params: {}
- name: Pets
  endpoint:
    path: /schema/pets
    method: GET
    data_selector: items
    params: {}
- name: runbook_run
  endpoint:
    path: /runbook/{runbook_name}/run
    method: POST
- name: runbook_start
  endpoint:
    path: /runbook/{runbook_name}/start
    method: POST
- name: job_status
  endpoint:
    path: /runbook/jobs/{jobID}/status
    method: GET
- name: job_output
  endpoint:
    path: /runbook/jobs/{jobID}/output/text
    method: GET
- name: runbook_output_streams
  endpoint:
    path: /runbook/jobs/{jobID}/output/streams
    method: GET
- name: runbook_exception_text
  endpoint:
    path: /runbook/jobs/{jobID}/exception/text
    method: GET
- name: custom_protocol
  endpoint:
    path: /dev-reference/custom-protocol
    method: GET
    data_selector: protocols
    params: {}
- name: RealmJoin Portal
  endpoint:
    path: /realmjoin-portal
    method: GET
- name: RealmJoin Client-API
  endpoint:
    path: /client-api
    method: GET
- name: RealmJoin Customer-API
  endpoint:
    path: /customer-api
    method: GET
- name: RealmJoin Internal-API
  endpoint:
    path: /internal-api
    method: GET
- name: RealmJoin CDN
  endpoint:
    path: /cdn
    method: GET
- name: RealmJoin Package Server
  endpoint:
    path: /package-server
    method: GET
notes:
- Each Support Account has a limited lifetime and must be recreated after expiration.
- Application Lifecycle and Management Companion to Microsoft Intune
- Your permissions level will determine what is visible within the navigation bar.
- Initial deployment needs direct Internet access. No proxy would be ideal.
- For mass rollouts, BranchCache Servers with pre-populated caches are recommended.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- This page gives you an overview about your organization (Azure Tenant), incl. number
  of users and groups.
- Search always uses a starts-with approach rather than a full-text or 'contains'
  search.
- Uses OAuth2 with refresh token â€” requires setup of connected app in RealmJoin
- Requires setup of connected app in RealmJoin
- Some objects may return nulls in deeply nested fields
- Requires setup of connected app in RealmJoin Portal
- Currently, only Delete is available.
- If you are allowed to delete the group, a confirmation dialogue will pop up upon
  pressing the Delete button.
- The default Overview tab view will include information like the currently logged
  on user and security recommendations.
- We rely on the information provided by the vendors through their APIs. We do not
  guarantee the accuracy of this information.
- Depending on the API used, a captcha might be displayed before requesting/displaying
  warranty information.
- If you recently self-onboarded into RealmJoin or do not have a subscription/licensing
  agreement yet, the list of software packages will be limited to a free-to-use subset
  of packages.
- Managed packages are the preferred way to deploy software to your users.
- Users and devices should only be in one RealmJoin managed group at any given time.
- Different types of packages have different levels of support to be managed via RealmJoin
  Portal.
- All requests need a file attached to be created successfully.
- Organic packages, offered at no cost, automatically extract the contents of the
  provided zip file to the C:\Install directory.
- Intune Packages can not be assigned using AVD templates.
- Make sure to enter your individual template ID and token during headless deployment
- To check the status/logs during headless deployment, open and periodically refresh
  realmjoin.log
- RealmJoin Portal automates the creation, updating and removal of runbooks.
- RealmJoin will create an Application Registration called RealmJoin Runbook Management
  which is used to update the Azure Automation Runbooks in your tenant based on RealmJoin's
  shared runbook repository.
- RealmJoin will create an application in your Azure environment called 'RealmJoin
  Runbook Management'.
- RealmJoin provides administrators with the ability to automate tasks by using Azure
  Automation to execute PowerShell Runbooks.
- The customizations can be included in the runbook itself and/or stored in the customer's
  RealmJoin Portal instance.
- By default, we will try to offer sensible defaults in the runbooks offered on GitHub.
- Customizations can be included in the runbook itself and/or stored in the customer's
  RealmJoin Portal instance.
- Default values from the runbook can be overridden by customizations.
- Runbook Permissions define the visibility of runbooks for certain users.
- By default, not all runbooks are flagged as schedulable.
- Runbooks having the suffix '_scheduled' are flagged as schedulable.
- Azure Automation will only keep runbook job logs for a limited time.
- Azure Automation supports Managed Identities as the primary way to authenticate.
- If a Managed Identity and a RunAs Account are configured at the same time, the runbooks
  will prefer using the Managed Identity.
- Intune remediation scripts allow you to report and react to problems on managed
  Windows clients using scripts.
- Only one form of logging needs to be chosen - either Application Insights or Log
  Analytics.
- Logging is optional when setting up LAPS.
- Users may access accounts created on their own devices when enabled using the RealmJoin
  Portal starting with version 2022.5.1.
- Notifications can be set to not reappear once acknowledged by the user.
- Once everything has been set up, the tray icon can be used to get support without
  sharing the ID number or downloading executables by hand.
- RealmJoin integrates directly with your Microsoft Intune tenant by adding and updating
  the agent as an intunewin package.
- RealmJoin.MSI is SHA2 (256 bit) signed by RealmJoin and therefore recognized by
  Windows as safe to install.
- Windows Update for Business reports may take up to 24 hours to apply
- It can take several minutes for an action to be visible in the Audit Log.
- Custom Roles is an optional feature in RealmJoin Portal and allows to create additional
  RealmJoin internal roles.
- Users must activate their membership through PIM to gain access
- Admin access automatically expires after the defined duration
- The pre-filled group namespaces can be changed or additional namespaces can be added
  to suit company requirements.
- This feature requires a blob storage on Azure.
- If the setting 'Allow enabling anonymous access on individual containers' is not
  enabled during creation of the storage account, RealmJoin will display the error
  'Error uploading file. Please try again'.
- Self Service Forms is an optional feature that can be enabled for your tenant by
  RealmJoin Support.
- Integrate RealmJoin in your applications and workflows
- RealmJoin will not allow you to interact with resources foreign to your tenant.
- RealmJoin Portal requires SSL/TLS transport layer encryption on every request.
- Make sure to remove older Dev-Certificates using mmc.exe from your set of personal
  certificates if present to avoid conflicts/login failures.
- The CustomProtocol class defines a set of URI-like prefixes that can be used to
  trigger specific actions within the system by providing a package ID.
- Endpoints are secured via OAuth 2.0 authentication with Microsoft Entra ID.
- RealmJoin contains an internal application store compatible with Intunewin
- RealmJoin offers packaging-as-a-service to provide any missing applications
- This guide is only valid for software deployment using the RealmJoin client (not
  intunewin).
- 'Common issues faced with the RealmJoin LAPS solution are usually one of the following:'
- The subscription for RealmJoin is user-based.
- The minimum amount of users that can be subscribed for one organization is 1.000.
- RealmJoin is offered as a monthly or annual subscription plan with different User
  Segments.
- The annual plan is discounted by 10% in comparison to the monthly plan.
- You must have permissions in your Azure tenant to purchase through Azure Marketplace.
- The subscription belongs to an Enterprise Agreement (EA) and the EA admin disabled
  Azure Marketplace purchases.
- Support is included in the RealmJoin subscription fee.
- Support response time is typical < 4 hours for incidents.
- Packaging delivery time is typical < 5 business days.
- Third party applications can interact with RealmJoin via its API
errors:
- '404 Not Found: Credentials are not available yet.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'All retries exceeded: The complete process will restart in the next run of the
  internal config checks.'
- '400 Bad Request: Check the notification data format.'
- '401 Unauthorized: Verify your authentication credentials.'
- 'ACTIVATION_FAILED: Check MFA setup and approval workflow configuration'
- 'ACCESS_DENIED: Confirm the correct group is configured in RealmJoin Portal settings'
- LAPS account passwords cannot be retrieved
- Requested LAPS Accounts are not being created
auth_info:
  mentioned_objects:
  - MS Graph API
  - OauthToken
  - AuthProvider
  - NamedCredential
  - App Registration
  - Service Principal
  - Entra users
  - pre-defined roles
  - custom roles
  - Microsoft Entra ID
client:
  base_url: https://portal.realmjoin.com
  auth:
    type: oauth2
source_metadata: null
