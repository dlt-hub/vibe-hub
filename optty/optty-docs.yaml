resources:
- name: create_order
  endpoint:
    path: /orders
    method: POST
- name: get_orders
  endpoint:
    path: /orders
    method: GET
- name: void_order
  endpoint:
    path: /void
    method: POST
- name: capture_order
  endpoint:
    path: /capture
    method: POST
- name: refund_order
  endpoint:
    path: /orders/{reference}/refunds
    method: POST
- name: token
  endpoint:
    path: /token
    method: POST
    data_selector: null
    params: {}
- name: create_parent
  endpoint:
    path: /parents/create
    method: POST
- name: create_merchant
  endpoint:
    path: /merchants/create
    method: POST
- name: new_merchant_provider
  endpoint:
    path: /merchant/provider/new
    method: GET
- name: activate_new_merchant_provider
  endpoint:
    path: /merchant/provider/activate/new
    method: POST
- name: available_merchant_provider
  endpoint:
    path: /merchant/provider/available
    method: GET
- name: create_parent
  endpoint:
    path: /parents/create
    method: POST
- name: create_merchant
  endpoint:
    path: /merchants/create
    method: POST
- name: get_merchant_provider_new
  endpoint:
    path: /merchant/provider/new
    method: GET
- name: activate_merchant_provider_new
  endpoint:
    path: /merchant/provider/activate/new
    method: POST
- name: get_merchant_provider_available
  endpoint:
    path: /merchant/provider/available
    method: GET
- name: discover_available_payment_methods
  endpoint:
    path: /merchant/provider/new
    method: GET
- name: activate_payment_method
  endpoint:
    path: /merchant/provider/activate/new
    method: POST
- name: available_payment_methods
  endpoint:
    path: /merchant/provider/available
    method: GET
- name: webhook_notifications
  endpoint:
    path: /admin-setting
    method: POST
    data_selector: notifications
- name: Create Order
  endpoint:
    path: /direct-api-orders/order-flow/post-orders
    method: POST
- name: Get Options
  endpoint:
    path: /direct-api-orders/order-flow/options/get-options
    method: GET
- name: sandbox_environment
  endpoint:
    path: /token
    method: GET
- name: production_environment
  endpoint:
    path: /token
    method: GET
- name: access_token
  endpoint:
    path: /token?expires_in=1
    method: POST
    data_selector: access_token
    params: {}
- name: customer_initiated_orders
  endpoint:
    path: /direct-api-orders/order-flow/customer-initiated-orders
    method: POST
- name: merchant_initiated_orders
  endpoint:
    path: /direct-api-orders/order-flow/merchant-initiated-orders
    method: POST
- name: auto_capture
  endpoint:
    path: /direct-api-orders/order-flow/auto-capture
    method: POST
- name: order_status_definitions
  endpoint:
    path: /direct-api-orders/order-flow/status-definitions
    method: GET
- name: options
  endpoint:
    path: /direct-api-orders/order-flow/options
    method: GET
    data_selector: requiredFields
- name: createOrder
  endpoint:
    path: /direct-api-orders/order-flow/post-orders
    method: POST
    data_selector: order
    params: {}
- name: orders
  endpoint:
    path: /direct-api-orders/order-flow/post-orders
    method: POST
    data_selector: records
    params:
      getToken: 'True'
      token: string
      customerPresent: boolean
- name: orders
  endpoint:
    path: /direct-api-orders/order-flow/post-orders
    method: POST
    data_selector: data
    params:
      getToken: 'false'
      token: ''
      customerPresent: 'false'
- name: options
  endpoint:
    path: /direct-api-orders/order-flow/options
    method: GET
    data_selector: paymentProviders
- name: orders
  endpoint:
    path: /orders
    method: POST
- name: options
  endpoint:
    path: /direct-api-orders/order-flow/options
    method: GET
    data_selector: paymentProviders
    params: {}
- name: order
  endpoint:
    path: /orders
    method: POST
    data_selector: Response
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: POST
- name: orders
  endpoint:
    path: /orders/{reference}
    method: GET
    data_selector: merchantReference
    params:
      reference: any
- name: orders
  endpoint:
    path: /orders
    method: POST
    data_selector: response
    params: {}
- name: void_order
  endpoint:
    path: /orders/{orderReference}/void
    method: POST
    data_selector: response
    params:
      voidReference: string
      description: string
      amount: number
- name: capture_order
  endpoint:
    path: /orders/{orderReference}/capture
    method: POST
    data_selector: response
    params: {}
- name: order_status
  endpoint:
    path: /orders/{reference}
    method: GET
    data_selector: response
    params:
      reference: any
- name: void_order
  endpoint:
    path: /orders/{orderReference}/void
    method: POST
    data_selector: response
    params:
      orderReference: string
      voidReference: string
      amount: number
- name: refund
  endpoint:
    path: /orders/{orderReference}/refund
    method: POST
    data_selector: Response
    params:
      orderReference: string
      refundReference: string
      refundAmount:
        amount: number
        currency: string
      refundDescription: string
- name: capture_order
  endpoint:
    path: /orders/{orderReference}/capture
    method: POST
    data_selector: response
    params: {}
- name: easy_checkout_widget
  endpoint:
    path: /widget-loader.js
    method: GET
    data_selector: widgets
    params: {}
- name: orders_refunds
  endpoint:
    path: /orders/{orderReference}/refund
    method: POST
    data_selector: refundReference
    params:
      orderReference: string
- name: easy_checkout_widget
  endpoint:
    path: /widget/easy-checkout-widget
    method: GET
    data_selector: widgetData
- name: optty-easy-checkout-widget
  endpoint:
    path: /widget/easy-checkout-widget
    method: GET
    data_selector: records
- name: create_payment_link
  endpoint:
    path: /custom/hpp
    method: POST
    data_selector: link
- name: cancel_payment_link
  endpoint:
    path: /custom/hpp/{idOrInvoiceNumber}/cancel
    method: PUT
    data_selector: response
    params:
      idOrInvoiceNumber: string
- name: custom_link
  endpoint:
    path: /custom/hpp/{idOrInvoiceNumber}
    method: GET
    data_selector: Saved items retrieved successfully.
- name: orders
  endpoint:
    path: /direct-api-orders/get-orders
    method: GET
    data_selector: records
    params: {}
- name: void
  endpoint:
    path: /direct-api-orders/post-void
    method: POST
    data_selector: records
    params: {}
- name: capture
  endpoint:
    path: /direct-api-orders/post-capture
    method: POST
    data_selector: records
    params: {}
- name: refunds
  endpoint:
    path: /direct-api-orders/post-orders/{reference}/refunds
    method: POST
    data_selector: records
    params: {}
- name: refund
  endpoint:
    path: /direct-api-orders/order-flow/post-orders/{reference}/refunds
    method: POST
- name: create_payment_link
  endpoint:
    path: /custom/hpp
    method: POST
    data_selector: Response
    params: {}
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: methods
- name: orders
  endpoint:
    path: /orders
    method: POST
    data_selector: order
- name: cancel_payment
  endpoint:
    path: /custom/hpp/{idOrInvoiceNumber}/cancel
    method: PUT
    data_selector: response
- name: custom_link
  endpoint:
    path: /custom/hpp/{idOrInvoiceNumber}
    method: GET
    data_selector: response
- name: widgets
  endpoint:
    path: /optty/widgets
    method: GET
- name: orders
  endpoint:
    path: /optty/orders
    method: POST
- name: widgets
  endpoint:
    path: /platforms/bigcommerce/add-optty-widgets
    method: GET
- name: refund
  endpoint:
    path: /platforms/bigcommerce/refunds
    method: POST
    data_selector: refundDetails
    params: {}
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: methods
- name: widgets
  endpoint:
    path: /widgets
    method: GET
    data_selector: widgets
- name: options
  endpoint:
    path: /direct-api-orders/order-flow/options
    method: GET
- name: orders
  endpoint:
    path: /direct-api-orders/order-flow/orders
    method: POST
- name: void
  endpoint:
    path: /direct-api-orders/order-flow/void
    method: POST
- name: capture
  endpoint:
    path: /direct-api-orders/order-flow/capture
    method: POST
- name: refunds
  endpoint:
    path: /direct-api-orders/order-flow/orders/{reference}/refunds
    method: POST
- name: options
  endpoint:
    path: /options
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: POST
- name: void
  endpoint:
    path: /void
    method: POST
- name: capture
  endpoint:
    path: /capture
    method: POST
- name: refunds
  endpoint:
    path: /orders/{reference}/refunds
    method: POST
- name: OneStepCheckout
  endpoint:
    path: /platforms/magento-2/one-step-checkout
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: POST
- name: void
  endpoint:
    path: /void
    method: POST
- name: capture
  endpoint:
    path: /capture
    method: POST
- name: refunds
  endpoint:
    path: /orders/{reference}/refunds
    method: POST
- name: options
  endpoint:
    path: /options
    method: GET
- name: refund
  endpoint:
    path: /direct-api-orders/order-flow/post-orders/{reference}/refunds
    method: POST
    data_selector: ''
    params: {}
- name: optty.http.auth
  endpoint:
    path: /optty.http.auth
    method: GET
- name: optty.http.generic
  endpoint:
    path: /optty.http.generic
    method: GET
- name: webhook_notifications
  endpoint:
    path: /webhook/callbacks
    method: POST
    data_selector: event
    params: {}
- name: footer_widget
  endpoint:
    path: /widget/footer
    method: GET
- name: widget_configuration
  endpoint:
    path: /widget/configuration
    method: GET
- name: refunds
  endpoint:
    path: /platforms/woocommerce/refunds
    method: POST
    data_selector: refunds
    params: {}
- name: notifications
  endpoint:
    path: /webhook/callbacks
    method: POST
    data_selector: data
    params: {}
notes:
- Pre-enabled payment methods are required for testing
- Webhook registration is necessary for receiving callback notifications
- You should always handle the PENDING status on initial response, redirect and webhooks.
- If a final order status cannot be attained within the checkout session and the order
  status remains 'PENDING,' Optty employs an asynchronous process.
- This exception can also occur for refunds, please refer to the REFUND_CALLBACK on
  Notification Handling.
- This exception often arises when a merchant attempts to inform the customer of their
  payment outcome during the checkout session after a redirect.
- Cancellation Timeout can be defined by passing in cancellationTimeout when creating
  order.
- Checkout Timeout can be defined by passing in checkoutTimeout when creating order.
- Access tokens are only valid for 24 hours from its creation.
- Not all payment methods support this flow.
- The merchant or integrator must confirm that the customer consented when initiating
  a token transaction.
- Implementing this endpoint allows for new payment methods to be enabled and configured
  via the Optty UPP or API.
- 'auth scope: api-user'
- If you have an Optty Sandbox account with payment methods enabled, you can preview
  the widget functionality here.
- 'Before viewing the functionality for any of the widgets follow these steps: Access
  the Sandbox, Set Mode to Live, Choose Currency, Provide Your Sandbox Token, Apply
  Configuration.'
- Always specify mode as 'live'
- Replace https://widgets.qa.optty.com to https://widgets.optty.com when moving from
  the Testing Sandbox to Production
- Surcharge functionality can be enabled from the UPP.
- The easy-checkout-widget handles surcharge consent.
- Display widgets are best to be implemented across the site to promote the payment
  method options available to the consumer before they proceed to checkout.
- Surcharge functionality can be enabled from the UPP, for details on how this surcharge
  amount is calculated and configured read more here.
- A consumer must be made aware of the surcharge amount and consent to paying it.
- Sessions can only have a single payment request in progress at any time.
- Email notifications can be disabled when created via API.
- Creating a session requires providing user email, price, phone number, description,
  currency, and other details.
- 'auth scope: merchant'
- Optty Direct supports various payment methods.
- Client Hash may also be called hmac or redirect secret.
- Sessions are referred to by their invoice number which is unique and specified on
  creation of a session.
- When a link is created the customer email specified will be sent an email from Optty.
- The email received by the customer can be disabled when created via API by passing
  `false` the `emailCustomer` customer field.
- Requires setup of connected app in api
- Please reach out to support@optty.com to get the extension file for manual install.
- Optty Payment should be enabled in the Magento admin.
- Test Mode can be toggled for sandbox or live environment.
- Test mode allows you to safely test your configuration without processing live transactions.
- Requires setup of connected app in Optty
- Allows triggering a refund which will send the APM the refund notification
- A merchant needs to set up a return callback URL for Optty. The return call-back
  URL is `https://<Host name>/on/demandware.store/Sites-<Site ID>-Site/<Site Locale
  ID>/OpttyCheckout-HandleResponse`.
- When the service is unavailable, Optty API will provide the industry-wide and expected
  HTTP 500 response error and the user cannot see the live widget in the storefront
  and is unable to checkout using ‘Optty’ payment method.
- This integration requires System Object Extension to store payment related information.
- Allows merchants to activate Optty as a payment method on their store
- Enables display of Optty widgets on the frontend
- Optty will provide API Client ID, Client Secret and Secret Key to be used with the
  API.
- If you do not currently have an Optty merchant account, sign up with Optty & receive
  your login credentials
- Optty Payment is added to the Sales -> Payment Method section of the Magento Admin.
- Test Mode can be toggled for connecting to live or sandbox environments.
- For the sandbox environment, use credentials found in your welcome email under Optty
  API Credentials.
- Hash Secret may also be called hmac or redirect secret.
- Widgets should automatically appear in product and checkout pages but may require
  additional configuration.
- Footer widget can be placed in preferred column inside store theme's footer.
- Authentication (OAuth2) client ID and secret provided by Optty.
- A shared secret between Optty and the integration platform is used for HMAC signing
  and verification of browser-side parameters sent between Optty and the integration
  backend.
- A callback URL to accept payment redirects from Optty will need to be provided by
  the e-commerce platform.
- A list of domains that will have the Optty widgets embedded that Optty will whitelist.
- Login credentials to the Optty Universal Payments Platform (UPP).
- Ensure 'Optty' payment method is created under Merchant Tools > Ordering > Payment
  Methods.
- Check for created payment processors with IDs 'OPTTY' and 'OPTTY_PROVIDER' under
  Merchant Tools > Ordering > Payment Processors.
- A custom site preference group with the ID ‘Optty Settings’ is available.
- A merchant needs to set up a return callback URL for Optty.
- Webhook notifications must be configured in the Universal Payment Platform.
- Dynamic callback URL can be set for each order.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Integrate your WooCommerce store with the Optty platform using our ready-made plugin,
  to give your customers the choice of paying through a selection of payment options
  at checkout.
- Optty gives you direct access to the world’s Payment Method providers, allowing
  you to add over 90 providers in 70 countries using more than 40 currencies through
  a single plugin.
- For the sandbox environment, credentials can be found in your welcome email under
  Optty API Credentials.
- Production credentials are provided to you once you’ve completed the onboarding
  process by one of the Optty team members.
- Widgets can be customized within the UPP.
- The footer widget can be placed in your preferred column inside the store theme's
  footer.
- If a notification is not received successfully, we will retry to send the event.
errors:
- '401 Unauthorized: Check API key and permissions'
- '400 Bad Request: Verify request payload format'
- '401 Unauthorized: Recheck client_id or client_secret'
- 'INVALID_PAYMENT_METHOD: Ensure the selected payment method is valid.'
- 'PAYMENT_PROVIDER_NOT_AVAILABLE: Check the availability of the selected payment
  provider.'
- '400 Bad Request: Check your data fields or value that you sent to Optty'
- '401 Unauthorized: Check your credentials and accessToken / Environment live or
  Staging'
- '404 Not Found: Cannot POST /orders/a'
- 500 Internal server error
- 400 Error
- 401 Error
- 404 Error
- 400 Check the Data fields or Value that you sent to Optty
- 401 Check your credentials and accessToken / Environment live or Staging.
- 404 Check if you're in the correct endpoint for the API call.
- 500 Try a different BNPL if that works, or contact support@optty.com for further
  investigation
- 400 Over Refund Limit / Parameters Error
- 404 Original OrderID doesn't exist, check the orderID that sent to us.
- 500 Internal Server Error
- '400: Over Refund Limit / Parameters Error'
- '401: Check your credentials and accessToken / Environment live or Staging.'
- '404: Original OrderID doesn''t exist, check the orderID that sent to us.'
- '500: Internal Server Error'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '200: Link cancelled successfully.'
- 'HTTP 500: Service unavailable'
- '401 Unauthorized: Check your API Client ID and Client Secret.'
- HTTP 500 response error when the service is unavailable.
- '400 Bad Request: Ensure the URL is correct and the payload is valid.'
- '401 Unauthorized: Check your authentication details.'
- '404 Not Found: Verify the endpoint path.'
- Optty service is unavailable, user cannot see the live widget in storefront and
  unable to checkout using ‘Optty’ payment method.
auth_info:
  mentioned_objects:
  - opttyAPIClientID
  - opttyClientSecret
  - opttySecretKey
  - opttyScope
client:
  base_url: https://api.optty.com
  auth:
    type: oauth2
    token_url: https://auth.optty.com/token
source_metadata: null
