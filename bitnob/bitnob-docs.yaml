resources:
- name: exchange_rate
  endpoint:
    path: /api/v1/wallets/payout/rate/{currency}
    method: GET
    data_selector: data
    params:
      currency: USD
- name: all_exchange_rates
  endpoint:
    path: /api/v1/wallets/payout/rate
    method: GET
    data_selector: data
    params: {}
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: data
- name: webhook_events
  endpoint:
    path: /webhook_url
    method: POST
    data_selector: event
    params: {}
- name: virtualcard_created_failed
  endpoint:
    path: /webhooks/virtualcard.created.failed
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_created_success
  endpoint:
    path: /webhooks/virtualcard.created.success
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_topup_success
  endpoint:
    path: /webhooks/virtualcard.topup.success
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_topup_failed
  endpoint:
    path: /webhooks/virtualcard.topup.failed
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_withdrawal_success
  endpoint:
    path: /webhooks/virtualcard.withdrawal.success
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_withdrawal_failed
  endpoint:
    path: /webhooks/virtualcard.withdrawal.failed
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_transaction_debit
  endpoint:
    path: /webhooks/virtualcard.transaction.debit
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_transaction_reversed
  endpoint:
    path: /webhooks/virtualcard.transaction.reversed
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_transaction_declined
  endpoint:
    path: /webhooks/virtualcard.transaction.declined
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_transaction_declined_frozen
  endpoint:
    path: /webhooks/virtualcard.transaction.declined.frozen
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_transaction_declined_terminated
  endpoint:
    path: /webhooks/virtualcard.transaction.declined.terminated
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_transaction_authorization_failed
  endpoint:
    path: /webhooks/virtualcard.transaction.authorization.failed
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_transaction_crossborder
  endpoint:
    path: /webhooks/virtualcard.transaction.crossborder
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_kyc_success
  endpoint:
    path: /webhooks/virtualcard.user.kyc.success
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_kyc_failed
  endpoint:
    path: /webhooks/virtualcard.user.kyc.failed
    method: GET
    data_selector: data
    params: {}
- name: virtualcard_transaction_terminated_refund
  endpoint:
    path: /webhooks/virtualcard.transaction.terminated.refund
    method: GET
    data_selector: data
    params: {}
- name: beneficiary_status_changed
  endpoint:
    path: /webhooks/beneficiary.status.changed
    method: POST
    data_selector: data
- name: beneficiary_status_pending
  endpoint:
    path: /webhooks/beneficiary.status.pending
    method: POST
    data_selector: data
- name: beneficiary_status_success
  endpoint:
    path: /webhooks/beneficiary.status.success
    method: POST
    data_selector: data
- name: payout_transfer_success
  endpoint:
    path: /webhooks/payouts
    method: GET
    data_selector: data
    params: {}
- name: payout_transfer_failed
  endpoint:
    path: /webhooks/payouts
    method: GET
    data_selector: data
    params: {}
- name: Receive USDT Success Webhook
  endpoint:
    path: /webhooks/stablecoin/usdt/receive/success
    method: GET
    data_selector: data
- name: Receive USDC Success Webhook
  endpoint:
    path: /webhooks/stablecoin/usdc/receive/success
    method: GET
    data_selector: data
- name: Send USDC Success Webhook
  endpoint:
    path: /webhooks/stablecoin/usdc/send/success
    method: GET
    data_selector: data
- name: Send USDT Success Webhook
  endpoint:
    path: /webhooks/stablecoin/usdt/send/success
    method: GET
    data_selector: data
- name: Send USDT Failed Webhook
  endpoint:
    path: /webhooks/stablecoin/usdt/send/failed
    method: GET
    data_selector: data
- name: Send USDC Failed Webhook
  endpoint:
    path: /webhooks/stablecoin/usdc/send/failed
    method: GET
    data_selector: data
- name: transaction_info
  endpoint:
    path: /getting-transaction-info
    method: GET
    data_selector: transaction_fields
    params: {}
- name: checkout
  endpoint:
    path: /generating-checkout
    method: POST
    data_selector: checkout_response
    params: {}
- name: lightning_invoice
  endpoint:
    path: /lightning/invoice
    method: POST
    data_selector: invoice
- name: lightning_address_payment
  endpoint:
    path: /.well-known/lnurlp
    method: GET
    data_selector: data
    params: {}
- name: create_lnurl
  endpoint:
    path: /api
    method: POST
    data_selector: data
    params: {}
- name: decode_lnurl
  endpoint:
    path: /lnurl/decode
    method: POST
    data_selector: data
    params: {}
- name: lnurl_payment
  endpoint:
    path: /.well-known/lnurlp/satoshi
    method: GET
    data_selector: data
    params: {}
- name: lnurl_process
  endpoint:
    path: /v1/wallet/wa_Opnn4kGOGBMnfCLFXtsDnjTb/lnurl-process
    method: GET
    data_selector: data
    params:
      ott: 2pHDk5C0N8HD
      num_satoshis: '3'
- name: create_card
  endpoint:
    path: /virtual-cards/create-card
    method: POST
- name: fetch_card
  endpoint:
    path: /virtual-cards/fetch-card
    method: GET
- name: top_up
  endpoint:
    path: /virtual-cards/top-up-card
    method: POST
- name: withdrawal
  endpoint:
    path: /virtual-cards/withdrawal
    method: POST
- name: freeze_card
  endpoint:
    path: /virtual-cards/freeze-card
    method: POST
- name: unfreeze_card
  endpoint:
    path: /virtual-cards/unfreeze-card
    method: POST
- name: terminate_card
  endpoint:
    path: /virtual-cards/terminate-card
    method: POST
- name: create_quote
  endpoint:
    path: /api/v1/payouts/quotes
    method: POST
- name: initialize_quote
  endpoint:
    path: /api/v1/payouts/quotes/initialize
    method: POST
- name: finalize_quote
  endpoint:
    path: /api/v1/payouts/quotes/finalize
    method: POST
- name: fetch_quote_by_id
  endpoint:
    path: /api/v1/payouts/fetch/id
    method: GET
- name: fetch_quote_by_reference
  endpoint:
    path: /api/v1/payouts/fetch/reference/reference
    method: GET
- name: fetch_quote_by_quoteId
  endpoint:
    path: /api/v1/payouts/quotes/quoteId
    method: GET
- name: create_quote
  endpoint:
    path: /payouts/quotes
    method: POST
    data_selector: data
- name: initialize_quote
  endpoint:
    path: /payouts/initialize
    method: POST
    data_selector: data
    params: {}
- name: finalize_quote
  endpoint:
    path: /payouts/finalize
    method: POST
    data_selector: data
    params: {}
- name: simulate_address_deposit
  endpoint:
    path: /api/v1/payouts/simulate-address-deposit
    method: POST
- name: payout
  endpoint:
    path: /payouts
    method: POST
    data_selector: data
    params: {}
- name: payout
  endpoint:
    path: /payout
    method: POST
    data_selector: transaction
    params:
      amount: required
      sourceWalletCurrency: required
      reference: required
      customerEmail: required
      description: required
      beneficiaryId: required
      transactionId: required
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: transaction
    params:
      publicKey: pk.xxxxxxxx
      amount: amount
      currency: NGN
      customerEmail: email
      notificationEmail: businessemail@gmail.com
      environment: sandbox
- name: customer
  endpoint:
    path: /reference/customers
    method: GET
    data_selector: customers
- name: customer
  endpoint:
    path: /api/v1/customers/{customer_id}
    method: GET
    data_selector: data
    params: {}
- name: update_customer
  endpoint:
    path: /customers/{customer_id}
    method: PUT
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: send_bitcoin
  endpoint:
    path: /api/v1/wallets/send_bitcoin
    method: POST
    data_selector: data
    params: {}
- name: generate_address
  endpoint:
    path: /api/v1/addresses/generate
    method: POST
    data_selector: data
    params: {}
- name: addresses
  endpoint:
    path: /api/v1/addresses
    method: GET
    data_selector: data.address
- name: recommended_btc_fees
  endpoint:
    path: /api/v1/wallets/recommended-fees/btc
    method: GET
    data_selector: data
    params: {}
- name: create_invoice
  endpoint:
    path: /api/v1/wallets/ln/createinvoice
    method: POST
    data_selector: data
    params: {}
- name: initiate_payment
  endpoint:
    path: /wallets/ln/initiatepayment
    method: POST
    data_selector: data
    params: {}
- name: pay_invoice
  endpoint:
    path: /wallets/ln/pay
    method: POST
    data_selector: data
    params: {}
- name: get_invoice
  endpoint:
    path: /wallets/ln/getinvoice
    method: POST
    data_selector: data
    params:
      Id: 1b7605e0cdfe8b0267fe377f5ecb7d068375b551e4a626880e668e1aec23bf64
      request: lntb1u1pse2vxhpp5hw4l0msdlygst76alskjw94uctz3knm33jk9ehk45lr5v539dyksdpsd4hkueteypehgmmswvsxummwwdjkuum9yphkugrnw4hxgctecqzpgxqr23sfppqvfsa58c3pvnsqhtecj78saj4vn79hlvjsp5grumqunpsz8mej3jezqa88g9wgsnw6sa40dtnlv4k9rufg4gaf2s9qyyssqmsy3r8xya7nxuwkvhr9vjdrummqc5vukva2e7v6gjhnfy9awvxdsys0juxstatgvp0eyhmqq32zqgc9muf7jvt037fttpfhqt9m0f8sp2wrv5m
- name: decode_payment_request
  endpoint:
    path: /decodepaymentrequest
    method: POST
    data_selector: data
    params: {}
- name: create_lnurl
  endpoint:
    path: /lnurl
    method: POST
    data_selector: data
    params: {}
- name: decode_lnurl
  endpoint:
    path: /api/v1/lnurl/decodelnurl
    method: POST
    data_selector: data
    params: {}
- name: pay_lnurl
  endpoint:
    path: /api/v1/lnurl/paylnurl
    method: POST
    data_selector: ''
    params: {}
- name: create_ln_withdrawal
  endpoint:
    path: /api/v1/lnurl/createLnUrlWithdrawal
    method: POST
    data_selector: ''
    params: {}
- name: receive_ln_withdrawal
  endpoint:
    path: /lnurl/receivelnurlwithdrawal
    method: POST
    data_selector: data
- name: decode_lightning_address
  endpoint:
    path: /api/v1/lnurl/decodelnaddress
    method: POST
    data_selector: data
    params: {}
- name: pay_lightning_address
  endpoint:
    path: /lnurl/paylnaddress
    method: POST
    data_selector: ''
    params: {}
- name: list_lnurls
  endpoint:
    path: /api/v1/lnurl
    method: GET
    data_selector: data.lnUrls
    params: {}
- name: get_by_identifier
  endpoint:
    path: /api/v1/lnurl/fetchlnurl/{username}
    method: GET
    data_selector: data
    params: {}
- name: lnurl
  endpoint:
    path: /api/v1/lnurl/{id}
    method: GET
    data_selector: data
    params: {}
- name: update_lnurl
  endpoint:
    path: /lnurl/{id}
    method: PUT
    data_selector: results
    params: {}
- name: wallets
  endpoint:
    path: /wallets
    method: GET
    data_selector: data
    params: {}
- name: initialize_swap_usd_to_btc
  endpoint:
    path: /api/v1/wallets/initialize-swap-for-bitcoin
    method: POST
    data_selector: data
    params: {}
- name: finalize_swap_usd_to_btc
  endpoint:
    path: /api/v1/wallets/finalize-swap-for-bitcoin
    method: POST
    data_selector: data
    params: {}
- name: initialize_swap_btc_to_usd
  endpoint:
    path: /wallets/initialize-swap-for-usd
    method: POST
    data_selector: data.quote
    params:
      amount: 0
- name: finalize_swap
  endpoint:
    path: /wallets/finalize-swap-for-usd
    method: POST
    data_selector: data
    params:
      quoteId: string
- name: create_new_crypto_wallet
  endpoint:
    path: /api/v1/wallets/create-new-crypto-wallet
    method: POST
    data_selector: data
    params: {}
- name: crypto_wallet
  endpoint:
    path: /wallets/crypto-wallet/:coin
    method: GET
    data_selector: data
    params: {}
- name: initialize_crypto_swap
  endpoint:
    path: /api/v1/wallets/initialize-crypto-swap
    method: POST
    data_selector: data.quote
    params: {}
- name: finalize_crypto_swap
  endpoint:
    path: /api/v1/wallets/finalize-crypto-swap
    method: POST
    data_selector: data
    params:
      quoteId: string
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data.transactions
    params: {}
- name: get_transaction
  endpoint:
    path: /api/v1/transactions/{transaction_id}
    method: GET
    data_selector: data
    params: {}
- name: register_card_user
  endpoint:
    path: /api/v1/virtualcards/registercarduser
    method: POST
    data_selector: data
- name: update_card_user
  endpoint:
    path: /virtualcards/users/{card_user_id}
    method: PUT
    data_selector: customerEmail, idNumber, idType, firstName, lastName, phoneNumber,
      city, state, country, zipCode, line1, houseName, idImage, bvn, userPhoto, dateOfBirth,
      cardId
    params: {}
- name: create_card
  endpoint:
    path: /virtualcards/create
    method: POST
    data_selector: data
    params: {}
- name: top_up_card
  endpoint:
    path: /api/v1/virtualcards/topup
    method: POST
    data_selector: data
    params: {}
- name: list_cards
  endpoint:
    path: /api/v1/virtualcards/cards
    method: GET
    data_selector: data.cards
    params: {}
- name: list_card_users
  endpoint:
    path: /virtualcards/users
    method: GET
    data_selector: data.cardUsers
    params:
      order: ASC
- name: fetch_card_user
  endpoint:
    path: /virtualcards/users/{card_user_id}
    method: GET
    data_selector: data
    params: {}
- name: fetch_card_user
  endpoint:
    path: /virtualcards/cards/{cardId}
    method: GET
    data_selector: data
    params:
      cardId: string
- name: card_transactions
  endpoint:
    path: /virtualcards/cards/{card_id}/transactions
    method: GET
    data_selector: data.cardTransactions
    params:
      order: ASC
      page: ''
      take: ''
- name: list_transactions
  endpoint:
    path: /api/v1/virtualcards/cards/transactions
    method: GET
    data_selector: data.cardTransactions
    params: {}
- name: card_withdrawal
  endpoint:
    path: /api/v1/virtualcards/withdraw
    method: POST
    data_selector: data
    params: {}
- name: freeze_card
  endpoint:
    path: /api/v1/virtualcards/freeze
    method: POST
    data_selector: data
    params: {}
- name: unfreeze_card
  endpoint:
    path: /virtualcards/unfreeze
    method: POST
    data_selector: data
    params: {}
- name: mock_transaction
  endpoint:
    path: /api/v1/virtualcards/mock-transaction
    method: POST
    data_selector: status
    params: {}
- name: terminate_card
  endpoint:
    path: /api/v1/virtualcards/terminate
    method: POST
    data_selector: data
    params:
      cardId: string
- name: enable_airline_payment
  endpoint:
    path: /virtualcards/enable-airlines
    method: PUT
    data_selector: status
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: data
    params: {}
- name: checkouts
  endpoint:
    path: /api/v1/checkout
    method: GET
    data_selector: data.checkouts
    params:
      order: ASC
      period: allTime
- name: checkout_status
  endpoint:
    path: /api/v1/checkout/status/{checkoutId}
    method: GET
    data_selector: data
    params: {}
- name: get_checkout_info
  endpoint:
    path: /api/v1/checkout/info/{id}
    method: GET
    data_selector: data
    params:
      checkoutId: ID of hosted checkout
- name: stablecoin_networks
  endpoint:
    path: /api/v1/wallets/stable-coins-networks
    method: GET
    data_selector: data
- name: generate_address
  endpoint:
    path: /api/v1/addresses/:chain/generate
    method: POST
    data_selector: data
- name: transfer
  endpoint:
    path: /api/v1/wallets/transfer
    method: POST
    data_selector: data
    params: {}
- name: offramp_quote
  endpoint:
    path: /api/v1/payouts/quotes
    method: POST
    data_selector: data
    params: {}
- name: initialize_offramp_quote
  endpoint:
    path: /payouts/initialize
    method: POST
    data_selector: data
    params: {}
- name: get_all_quotes
  endpoint:
    path: /offramps/get-quote
    method: GET
    data_selector: data
    params: {}
- name: get_quote_by_quoteId
  endpoint:
    path: /offramps/get-quoteid
    method: GET
    data_selector: data
    params: {}
- name: get_quote_by_id
  endpoint:
    path: /offramps/get-quote-id
    method: GET
    data_selector: data
    params: {}
- name: get_quote_by_reference
  endpoint:
    path: /offramps/get-quote-reference
    method: GET
    data_selector: data
    params: {}
- name: get_country_requirement
  endpoint:
    path: /offramps/country-requirement
    method: GET
    data_selector: data
    params: {}
- name: get_supported_countries
  endpoint:
    path: /offramps/supported-countries
    method: GET
    data_selector: data
    params: {}
- name: get_limits
  endpoint:
    path: /offramps/get-limits
    method: GET
    data_selector: data
    params: {}
- name: finalize_offramps_quote
  endpoint:
    path: /api/v1/payouts/finalize
    method: POST
    data_selector: data
    params: {}
- name: simulate_address_deposit
  endpoint:
    path: /api/v1/payouts/simulate-address-deposit
    method: POST
    data_selector: data
- name: get_all_quotes
  endpoint:
    path: /payouts/
    method: GET
    data_selector: data.offRamps
    params:
      order: ASC
      page: 1
      take: 10
- name: get_quote_by_quoteId
  endpoint:
    path: /api/v1/payouts/quotes/{quoteId}
    method: GET
    data_selector: data
    params: {}
- name: get_quote_by_id
  endpoint:
    path: /api/v1/payouts/fetch/{id}
    method: GET
    data_selector: data
    params: {}
- name: get_quote_by_reference
  endpoint:
    path: /api/v1/payouts/fetch/reference/{reference}
    method: GET
    data_selector: data
    params: {}
- name: country_requirements
  endpoint:
    path: /api/v1/payouts/supported-countries-requirement/{country}
    method: GET
    data_selector: data
    params: {}
- name: supported_countries
  endpoint:
    path: /payouts/supported-countries
    method: GET
    data_selector: data.allowedCountries
    params: {}
- name: get_transaction_limits
  endpoint:
    path: /api/v1/payouts/limits
    method: GET
    data_selector: data
- name: customers
  endpoint:
    path: /reference/customers
    method: GET
- name: bitcoin_onchain
  endpoint:
    path: /reference/bitcoin-onchain
    method: GET
- name: lightning
  endpoint:
    path: /reference/lightning
    method: GET
- name: lightning_address
  endpoint:
    path: /reference/lightning-address
    method: GET
- name: wallets
  endpoint:
    path: /reference/wallets
    method: GET
- name: transactions
  endpoint:
    path: /reference/transactions
    method: GET
- name: virtual_cards
  endpoint:
    path: /reference/virtual-cards
    method: GET
- name: hosted_checkout
  endpoint:
    path: /reference/hosted-checkout
    method: GET
- name: stablecoins
  endpoint:
    path: /reference/stablecoins
    method: GET
- name: offramps
  endpoint:
    path: /reference/offramps
    method: GET
- name: payouts
  endpoint:
    path: /reference/payouts
    method: GET
- name: payouts_mobile_transfer
  endpoint:
    path: /reference/payouts-mobile-transfer
    method: GET
- name: exchange_rates
  endpoint:
    path: /reference/exchange-rates
    method: GET
- name: initiate_payout
  endpoint:
    path: /wallets/payout/initialize
    method: POST
    data_selector: data
    params: {}
- name: finalize_payout
  endpoint:
    path: /api/v1/wallets/payout/finalize
    method: POST
    data_selector: data
    params:
      transactionId: string
- name: account_lookup
  endpoint:
    path: /api/v1/mobile-payments/lookup
    method: POST
    data_selector: data
    params: {}
- name: account_detail_lookup
  endpoint:
    path: /api/v1/mobile-payments/account-detail-lookup
    method: GET
    data_selector: data
    params:
      countryCode: '234'
      accountNumber: string
- name: Request Payment Invoice
  endpoint:
    path: /api/v1/mobile-payments/initiate
    method: POST
    data_selector: data
    params: {}
- name: mobile_payment_request
  endpoint:
    path: /api/v1/mobile-payments/{id}
    method: GET
    data_selector: data
    params:
      id: country code of account number
- name: mobile_payment_request
  endpoint:
    path: /api/v1/mobile-payments/reference/{reference}
    method: GET
    data_selector: data
    params:
      reference: string
- name: payment_methods
  endpoint:
    path: /api/v1/mobile-payments/payment-methods/{country_code}
    method: GET
    data_selector: data
    params:
      country_code: string
- name: exchange_rates
  endpoint:
    path: /api/v1/mobile-payments/rates
    method: GET
    data_selector: data
- name: payment_methods
  endpoint:
    path: /api/v1/mobile-payments/payment-methods/{country_code}
    method: GET
    data_selector: data
    params: {}
- name: exchange_rate
  endpoint:
    path: /api/v1/mobile-payments/rates/{country_code}
    method: GET
    data_selector: data
    params: {}
- name: supported_countries
  endpoint:
    path: /api/v1/mobile-payments/supported-countries
    method: GET
    data_selector: data
    params: {}
- name: refund
  endpoint:
    path: /api/v1/mobile-payments/refund
    method: POST
    data_selector: ''
    params: {}
- name: pay_mobile_payment
  endpoint:
    path: /api/v1/mobile-payments/pay/{id}
    method: POST
    data_selector: data
    params: {}
- name: get_all_exchange_rates
  endpoint:
    path: /reference/exchange-rates/get-all-exchange-rates
    method: GET
- name: get_exchange_rate_by_currency
  endpoint:
    path: /reference/exchange-rates/get-exchange-rates-by-currency
    method: GET
- name: exchange_rates
  endpoint:
    path: /api/v1/wallets/payout/rates
    method: GET
    data_selector: rates
- name: transactions
  endpoint:
    path: /reference/transactions/list-transactions
    method: GET
    data_selector: transactions
- name: get_transaction
  endpoint:
    path: /reference/transactions/get-transaction
    method: GET
    data_selector: transaction
- name: address
  endpoint:
    path: /reference/response-data-objects/address-object
    method: GET
    data_selector: address
    params: {}
- name: decode_ln_response
  endpoint:
    path: /reference/response-data-objects/decode-ln
    method: GET
    data_selector: response
notes:
- The API gives you capabilities such as getting historical Bitcoin data and sending/receiving
  Bitcoin and Lightning transactions.
- Development on Bitnob sandbox API
- During Development on the Sandbox platform, lightning transactions are done on testnet
  and Onchain BTC transactions on Signet.
- All API Requests must be authenticated via an API key.
- Ensure all requests are made over HTTPS.
- Whenever you receive a webhook notification from us, return a 200 OK to avoid resending
  the same event again from our server.
- We recommend that you set up a service to always query transactions, in the event
  that webhooks keep failing.
- Rate limiting of requests is set to a maximum of 100 requests every 2 minutes. Exceeding
  this limit will result in a 429 Error.
- Onchain addresses are only generated for payments above $5. Payments less than $5
  will only generate a lightning invoice.
- A successUrl should always be set so as to allow the user to continue the transaction
  on your platform.
- We recommend using a new address whenever you want to receive payments.
- Properly set up and verify all notifications sent from us via webhooks.
- If the amount you set for an invoice is greater than 500,000,000 satoshis(5BTC),
  we will not return any invoice
- An invoice expires after 24 hours.
- You don't need to support lightning on your product before you can support lightning
  addresses.
- Bitnob handles the payment of invoices
- Important - this apache config should be added at the top of the config file.
- The tld is the domain you will be using for your lnurl.
- Charging your customers before paying a Lightning address is necessary.
- You need the following items to easily accept payments via LNURL addresses on Bitnob.
- A flat fee of $1 is charged for stablecoin transactions.
- You must complete onboarding steps and request access to use the API.
- User access tokens do not expire.
- The quote will be valid for 15 minutes
- The amount property should be in the lowest denomination of the source currency
- Payment should not be made to the address until the quote has been finalized.
- The `simulate-address-deposit` endpoint is available only in the sandbox environment
  and is meant solely for testing purposes.
- 'Currently supported currencies: Nigeria (234), Ghana (233), Kenya (254)'
- You can skip the first step if the beneficiary has already been indexed.
- Change publicKey to live key and environment to production when going live.
- Use it to manage and track payments, virtual cards and virtual accounts that belong
  to the same customer.
- List of companies customers.
- Priority level is used to detect how long a transaction would take.
- Defaults to purchase xbox for label
- customerEmail is required
- Initiate payment is advised to be run before paying an invoice to calculate fees
  and check if an invoice has expired.
- Request body must include 'request', 'customerEmail', and 'reference'.
- Decode a BOLT 11 compliant payment request
- A lightning address is a wrapper on top of lnurl.
- The lnurl scanned or copied is required in the request body.
- Requires a unique reference to track the payment
- Requires customerEmail, description, and satoshis in the body.
- Requires customerEmail and satoshis parameters.
- Before paying a lightning address, you first need to decode the address.
- Get all lnurls in your account
- View company wallet balances
- Requires API key for authorization
- quoteId is required in the request body.
- Allows swapping between cryptocurrencies or between a cryptocurrency and USD.
- Finalize a cryptocurrency swap using a quote ID obtained from the initialize-crypto-swap
  endpoint.
- You need to onboard a card user before issuing cards for them.
- idNumber, idType, firstName, lastName, phoneNumber, city, state, country, zipCode,
  line1, houseName, bvn, userPhoto are required parameters.
- The amount(in cent) to add to the card must be provided.
- Address generated for one chain can receive both USDT and USDC.
- One of either amount or settlement amount should be provided and in the case where
  both are provided the amount takes priority.
- Requires the quoteId parameter in the request body.
- Get all quotes under the user's company
- Initiate payout to an already indexed beneficiary
- countryCode defaults to 234
- Initiating a payment to a Bitnob user via mobile number
errors:
- '400: Bad Request'
- '400 Bad Request: Returns JSON with the error message'
- '401 Unauthorized: Unauthorized Access/ Resource'
- '429 Too Many Requests: Your connection is being rate limited'
- '404 Not Found: Resource Not Found'
- '500 Internal Server Error: Something went wrong'
- 'Unauthorized: Recheck API key.'
- If the response code is not 200, we retry sending the event 3 times after the first
  failure.
- '429: Rate limit exceeded'
- 'Invoice limits exceeded: Amount exceeds 5 BTC'
- 'Invoice expired: The invoice has surpassed the 24-hour validity period'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify your authentication credentials.'
- 'access_denied: User denied the request'
- '404: Account not found - Ensure the recipient''s phone number is indexed'
- '400: Bad Request - Check the request parameters'
- '400 Bad Request: Check required parameters'
- '400: Result'
- '400 Bad Request: Invalid request parameters.'
- '400 - Bad Request: Check required parameters'
- '400 Bad Request: Check required parameters.'
- '400 Bad Request: Check the request body parameters.'
- '400 Bad Request: Check if the id parameter is provided and valid'
- '400 Bad Request: Check the required parameters and their values.'
- '400 Bad Request: Check the transaction_id and request format'
- '400 Bad Request: Check request parameters'
- '400 Bad Request: Check request parameters and structure'
- '400 Bad Request: Check required parameters and their types'
- '400 Bad Request: Check parameters'
- 400 Bad Request
- '400: Bad Request - Check if quoteId is provided correctly.'
- '400 Bad Request: Invalid parameters'
- '400 Bad Request: Check request parameters or formatting'
- '400 Bad Request: Check quoteId format'
- '400 Bad Request: Check if the id is valid'
- '400 Bad Request: Ensure all required parameters are provided'
- '400 Bad Request: Check the country code parameter'
- '400 Bad Request: Check request parameters for validity'
auth_info:
  mentioned_objects: []
client:
  base_url: https://sandboxapi.bitnob.co
  headers:
    accept: application/json
source_metadata: null
