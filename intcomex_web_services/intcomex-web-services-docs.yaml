resources:
- name: GetProducts
  endpoint:
    path: /v1/GetProducts
    method: GET
    data_selector: ''
    params:
      skusList: ''
      locale: ''
- name: PlaceOrder
  endpoint:
    path: /v1/placeorder
    method: POST
    data_selector: ''
    params: {}
- name: GetProducts
  endpoint:
    path: /v1/GetProducts
    method: GET
    params:
      skusList: ''
      locale: ''
- name: PlaceOrder
  endpoint:
    path: /v1/placeorder
    method: POST
    params: {}
- name: GetCatalog
  endpoint:
    path: /GetCatalog
    method: GET
    data_selector: products
    params: {}
- name: GetProducts
  endpoint:
    path: /GetProducts
    method: GET
    data_selector: products
    params: {}
- name: GetProduct
  endpoint:
    path: /GetProduct
    method: GET
    data_selector: product
    params: {}
- name: GetPriceList
  endpoint:
    path: /GetPriceList
    method: GET
    data_selector: prices
    params: {}
- name: GetInventory
  endpoint:
    path: /GetInventory
    method: GET
    data_selector: inventory
    params: {}
- name: DownloadExtendedCatalog
  endpoint:
    path: /DownloadExtendedCatalog
    method: GET
    data_selector: extendedCatalog
    params: {}
- name: PlaceOrder
  endpoint:
    path: /PlaceOrder
    method: POST
    data_selector: order
    params: {}
- name: GetProducts
  endpoint:
    path: /GetProducts
    method: GET
    data_selector: products
    params: {}
- name: GetProduct
  endpoint:
    path: /GetProduct
    method: GET
    data_selector: product
    params: {}
- name: GetPriceList
  endpoint:
    path: /GetPriceList
    method: GET
    data_selector: prices
    params: {}
- name: GetInventory
  endpoint:
    path: /GetInventory
    method: GET
    data_selector: inventory
    params: {}
- name: DownloadExtendedCatalog
  endpoint:
    path: /DownloadExtendedCatalog
    method: GET
    data_selector: extendedCatalog
    params: {}
- name: PlaceOrder
  endpoint:
    path: /PlaceOrder
    method: POST
    data_selector: order
    params: {}
- name: GetCurrency
  endpoint:
    path: /GetCurrency
    method: GET
    data_selector: CurrencyInfo
- name: ProcessOrder
  endpoint:
    path: /ProcessOrder
    method: POST
    data_selector: ProcessOrderResponse
- name: GetOrder
  endpoint:
    path: /GetOrder
    method: GET
    data_selector: OrderDetails
- name: GetOrderStatus
  endpoint:
    path: /GetOrderStatus
    method: GET
    data_selector: OrderStatus
- name: GetOrders
  endpoint:
    path: /GetOrders
    method: GET
    data_selector: OrdersList
- name: RegisterPayments
  endpoint:
    path: /RegisterPayments
    method: POST
    data_selector: PaymentResponse
- name: ReleaseOrder
  endpoint:
    path: /ReleaseOrder
    method: POST
    data_selector: ReleaseOrderResponse
- name: CancelOrder
  endpoint:
    path: /CancelOrder
    method: POST
    data_selector: CancelOrderResponse
- name: UpdateOrder
  endpoint:
    path: /UpdateOrder
    method: POST
    data_selector: UpdateOrderResponse
- name: GetInvoice
  endpoint:
    path: /GetInvoice
    method: GET
    data_selector: InvoiceDetails
- name: GetCurrency
  endpoint:
    path: /GetCurrency
    method: GET
    data_selector: CurrencyId
    params: {}
- name: GetOrder
  endpoint:
    path: /GetOrder
    method: GET
    data_selector: OrderNumber
    params:
      orderNumber: required
- name: GetOrderStatus
  endpoint:
    path: /GetOrderStatus
    method: GET
    data_selector: OrderNumber
    params:
      orderNumber: required
- name: GetOrders
  endpoint:
    path: /GetOrders
    method: GET
    data_selector: OrderNumber
    params: {}
- name: RegisterPayments
  endpoint:
    path: /RegisterPayments
    method: POST
    data_selector: OrderNumber
    params: {}
- name: ReleaseOrder
  endpoint:
    path: /ReleaseOrder
    method: POST
    data_selector: OrderNumber
    params: {}
- name: CancelOrder
  endpoint:
    path: /CancelOrder
    method: POST
    data_selector: OrderNumber
    params: {}
- name: UpdateOrder
  endpoint:
    path: /UpdateOrder
    method: PUT
    data_selector: OrderNumber
    params: {}
- name: GetInvoice
  endpoint:
    path: /GetInvoice
    method: GET
    data_selector: invoiceNumber
    params: {}
- name: GetCurrency
  endpoint:
    path: /v1/GetCurrency
    method: GET
    data_selector: CurrencyInfo
    params:
      countryId: required
- name: OrderStatusUpdate
  endpoint:
    path: /webhooks/order-status-update
    method: POST
    data_selector: Data
    params: {}
- name: OrderStatusUpdate
  endpoint:
    path: /388e7aab-52fe-4b31-9dfa-e70d30545cbb
    method: POST
    data_selector: Data
    params: {}
- name: GetProducts
  endpoint:
    path: /v1/GetProducts
    method: GET
    data_selector: records
    params: {}
- name: PlaceOrder
  endpoint:
    path: /v1/placeorder
    method: POST
    data_selector: response
    params: {}
- name: GetProducts
  endpoint:
    path: /v1/GetProducts
    method: GET
    data_selector: results
    params: {}
- name: PlaceOrder
  endpoint:
    path: /v1/placeorder
    method: POST
    data_selector: results
    params: {}
- name: products
  endpoint:
    path: /catalog/products
    method: GET
    data_selector: data
    params: {}
- name: SalesOrderItem
  endpoint:
    path: /sales_order_item
    method: GET
    data_selector: records
- name: StoreOrder
  endpoint:
    path: /store_order
    method: GET
    data_selector: records
- name: StoreOrderCustomer
  endpoint:
    path: /store_order_customer
    method: GET
    data_selector: records
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: records
- name: SalesOrderItem
  endpoint:
    path: /salesorderitem
    method: GET
    data_selector: items
- name: StoreOrder
  endpoint:
    path: /storeorder
    method: GET
    data_selector: items
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: items
- name: inventoryFilter
  endpoint:
    path: /inventoryFilter
    method: GET
    data_selector: records
    params:
      required: false
      schema:
        type: string
        enum:
        - InStock
        - OutOfStock
        - Any
- name: inStock
  endpoint:
    path: /inStock
    method: GET
    data_selector: records
    params:
      required: false
      schema:
        type: boolean
- name: page
  endpoint:
    path: /page
    method: GET
    data_selector: records
    params:
      required: false
      schema:
        type: integer
- name: limit
  endpoint:
    path: /limit
    method: GET
    data_selector: records
    params:
      required: false
      schema:
        type: integer
- name: SalesOrderItem
  endpoint:
    path: /services/data/vXX.X/sobjects/SalesOrderItem
    method: GET
    data_selector: records
    params: {}
- name: StoreOrder
  endpoint:
    path: /services/data/vXX.X/sobjects/StoreOrder
    method: GET
    data_selector: records
    params: {}
- name: Invoice
  endpoint:
    path: /services/data/vXX.X/sobjects/Invoice
    method: GET
    data_selector: records
    params: {}
- name: SalesOrderItem
  endpoint:
    path: /salesorderitem
    method: GET
    data_selector: records
- name: StoreOrder
  endpoint:
    path: /storeorder
    method: GET
    data_selector: records
- name: StoreOrderCustomer
  endpoint:
    path: /storeordercustomer
    method: GET
    data_selector: records
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: records
- name: SalesOrderItem
  endpoint:
    path: /sales/order/item
    method: GET
    data_selector: properties
    params: {}
- name: StoreOrder
  endpoint:
    path: /store/order
    method: GET
    data_selector: properties
    params: {}
- name: StoreOrderCustomer
  endpoint:
    path: /store/order/customer
    method: GET
    data_selector: properties
    params: {}
- name: StoreOrderAddress
  endpoint:
    path: /store/order/address
    method: GET
    data_selector: properties
    params: {}
- name: DigitalProduct
  endpoint:
    path: /digital/product
    method: GET
    data_selector: properties
    params: {}
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: properties
    params: {}
- name: ShippingRate
  endpoint:
    path: /shipping/rate
    method: GET
    data_selector: properties
    params: {}
- name: Payment
  endpoint:
    path: /payment
    method: GET
    data_selector: properties
    params: {}
- name: Shipment
  endpoint:
    path: /shipment
    method: GET
    data_selector: properties
    params: {}
- name: OrderStatusUpdate
  endpoint:
    path: /OrderStatusUpdate
    method: POST
    data_selector: data
    params: {}
- name: SalesOrderItem
  endpoint:
    path: /salesorderitem
    method: GET
    data_selector: items
- name: StoreOrder
  endpoint:
    path: /storeorder
    method: GET
    data_selector: items
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: items
- name: SalesOrderItem
  endpoint:
    path: /salesorderitem
    method: GET
    data_selector: items
    params: {}
- name: StoreOrder
  endpoint:
    path: /storeorder
    method: GET
    data_selector: items
    params: {}
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: items
    params: {}
- name: SalesOrderItem
  endpoint:
    path: /sales/order/item
    method: GET
    data_selector: items
    params: {}
- name: StoreOrder
  endpoint:
    path: /store/order
    method: GET
    data_selector: orders
    params: {}
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: invoices
    params: {}
- name: SalesOrderItem
  endpoint:
    path: /components/schemas/SalesOrderItem
    method: GET
    data_selector: properties
- name: StoreOrder
  endpoint:
    path: /components/schemas/StoreOrder
    method: GET
    data_selector: properties
- name: StoreOrderCustomer
  endpoint:
    path: /components/schemas/StoreOrderCustomer
    method: GET
    data_selector: properties
- name: StoreOrderAddress
  endpoint:
    path: /components/schemas/StoreOrderAddress
    method: GET
    data_selector: properties
- name: DigitalProduct
  endpoint:
    path: /components/schemas/DigitalProduct
    method: GET
    data_selector: properties
- name: Token
  endpoint:
    path: /components/schemas/Token
    method: GET
    data_selector: properties
- name: Payment
  endpoint:
    path: /components/schemas/Payment
    method: GET
    data_selector: properties
- name: Shipment
  endpoint:
    path: /components/schemas/Shipment
    method: GET
    data_selector: properties
- name: Invoice
  endpoint:
    path: /components/schemas/Invoice
    method: GET
    data_selector: properties
- name: ShippingRate
  endpoint:
    path: /components/schemas/ShippingRate
    method: GET
    data_selector: properties
- name: IwsException
  endpoint:
    path: /components/schemas/IwsException
    method: GET
    data_selector: properties
- name: OrderStatusUpdate
  endpoint:
    path: /webhooks/OrderStatusUpdate
    method: POST
    data_selector: Data
- name: SalesOrderItem
  endpoint:
    path: /SalesOrderItem
    method: GET
    data_selector: items
- name: StoreOrder
  endpoint:
    path: /StoreOrder
    method: GET
    data_selector: items
- name: StoreOrderCustomer
  endpoint:
    path: /StoreOrderCustomer
    method: GET
    data_selector: items
- name: Invoice
  endpoint:
    path: /Invoice
    method: GET
    data_selector: items
- name: SalesOrderItem
  endpoint:
    path: /salesorderitem
    method: GET
    data_selector: items
    params: {}
- name: StoreOrder
  endpoint:
    path: /storeorder
    method: GET
    data_selector: orders
    params: {}
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: invoices
    params: {}
- name: SalesOrderItem
  endpoint:
    path: /salesorderitem
    method: GET
    data_selector: items
    params: {}
- name: StoreOrder
  endpoint:
    path: /storeorder
    method: GET
    data_selector: items
    params: {}
- name: StoreOrderCustomer
  endpoint:
    path: /storeordercustomer
    method: GET
    data_selector: items
    params: {}
- name: StoreOrderAddress
  endpoint:
    path: /storeorderaddress
    method: GET
    data_selector: items
    params: {}
- name: DigitalProduct
  endpoint:
    path: /digitalproduct
    method: GET
    data_selector: items
    params: {}
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: items
    params: {}
- name: SalesOrderItem
  endpoint:
    path: /salesorderitem
    method: GET
    data_selector: records
- name: StoreOrder
  endpoint:
    path: /storeorder
    method: GET
    data_selector: records
- name: StoreOrderCustomer
  endpoint:
    path: /storeordercustomer
    method: GET
    data_selector: records
- name: StoreOrderAddress
  endpoint:
    path: /storeorderaddress
    method: GET
    data_selector: records
- name: DigitalProduct
  endpoint:
    path: /digitalproduct
    method: GET
    data_selector: records
- name: Token
  endpoint:
    path: /token
    method: GET
    data_selector: records
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: records
- name: Payment
  endpoint:
    path: /payment
    method: GET
    data_selector: records
- name: Shipment
  endpoint:
    path: /shipment
    method: GET
    data_selector: records
- name: TaxIdValidation
  endpoint:
    path: /taxidvalidation
    method: GET
    data_selector: records
- name: ShippingRate
  endpoint:
    path: /shippingrate
    method: GET
    data_selector: records
- name: IwsException
  endpoint:
    path: /iwsexception
    method: GET
    data_selector: records
- name: SalesOrderItem
  endpoint:
    path: /api/v1/sales_order_items
    method: GET
    data_selector: items
    params: {}
- name: ShippingRate
  endpoint:
    path: /api/v1/shipping_rates
    method: GET
    data_selector: rates
    params: {}
- name: SalesOrderItem
  endpoint:
    path: /SalesOrderItem
    method: GET
    data_selector: properties
- name: StoreOrder
  endpoint:
    path: /StoreOrder
    method: GET
    data_selector: properties
- name: StoreOrderCustomer
  endpoint:
    path: /StoreOrderCustomer
    method: GET
    data_selector: properties
- name: Invoice
  endpoint:
    path: /Invoice
    method: GET
    data_selector: properties
- name: ShippingRate
  endpoint:
    path: /ShippingRate
    method: GET
    data_selector: properties
- name: IwsException
  endpoint:
    path: /IwsException
    method: GET
    data_selector: properties
- name: OrderStatusUpdate
  endpoint:
    path: /webhooks/OrderStatusUpdate
    method: POST
    data_selector: Data
- name: SalesOrderItem
  endpoint:
    path: /api/sales_order_item
    method: GET
    data_selector: records
    params: {}
- name: StoreOrder
  endpoint:
    path: /api/store_order
    method: GET
    data_selector: records
    params: {}
- name: Invoice
  endpoint:
    path: /api/invoice
    method: GET
    data_selector: records
    params: {}
- name: SalesOrderItem
  endpoint:
    path: /salesorderitem
    method: GET
    data_selector: items
- name: StoreOrder
  endpoint:
    path: /storeorder
    method: GET
    data_selector: items
- name: DigitalProduct
  endpoint:
    path: /digitalproduct
    method: GET
    data_selector: items
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: items
- name: OrderStatusUpdate
  endpoint:
    path: /webhooks/OrderStatusUpdate
    method: POST
    data_selector: Data
- name: OrderStatusUpdate
  endpoint:
    path: /OrderStatusUpdate
    method: POST
    data_selector: Data
- name: SalesOrderItem
  endpoint:
    path: /SalesOrderItem
    method: GET
    data_selector: properties
- name: StoreOrder
  endpoint:
    path: /StoreOrder
    method: GET
    data_selector: properties
- name: StoreOrderCustomer
  endpoint:
    path: /StoreOrderCustomer
    method: GET
    data_selector: properties
- name: StoreOrderAddress
  endpoint:
    path: /StoreOrderAddress
    method: GET
    data_selector: properties
- name: DigitalProduct
  endpoint:
    path: /DigitalProduct
    method: GET
    data_selector: properties
- name: Invoice
  endpoint:
    path: /Invoice
    method: GET
    data_selector: properties
- name: Payment
  endpoint:
    path: /Payment
    method: GET
    data_selector: properties
- name: Shipment
  endpoint:
    path: /Shipment
    method: GET
    data_selector: properties
- name: TaxIdValidation
  endpoint:
    path: /TaxIdValidation
    method: GET
    data_selector: properties
- name: ShippingRate
  endpoint:
    path: /ShippingRate
    method: GET
    data_selector: properties
- name: SalesOrderItem
  endpoint:
    path: /api/salesorderitem
    method: GET
    data_selector: items
- name: StoreOrder
  endpoint:
    path: /api/storeorder
    method: GET
    data_selector: items
- name: Invoice
  endpoint:
    path: /api/invoice
    method: GET
    data_selector: items
- name: SalesOrderItem
  endpoint:
    path: /salesorderitem
    method: GET
    data_selector: items
    params: {}
- name: StoreOrder
  endpoint:
    path: /storeorder
    method: GET
    data_selector: items
    params: {}
- name: StoreOrderCustomer
  endpoint:
    path: /storeordercustomer
    method: GET
    data_selector: items
    params: {}
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: items
    params: {}
- name: OrderStatusUpdate
  endpoint:
    path: /OrderStatusUpdate
    method: POST
- name: SalesOrderItem
  endpoint:
    path: /sales_order_item
    method: GET
    data_selector: items
    params: {}
- name: StoreOrder
  endpoint:
    path: /store_order
    method: GET
    data_selector: items
    params: {}
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: items
    params: {}
- name: OrderStatusUpdate
  endpoint:
    path: /OrderStatusUpdate
    method: POST
    data_selector: Data
- name: SalesOrderItem
  endpoint:
    path: /salesorderitem
    method: GET
    data_selector: records
- name: StoreOrder
  endpoint:
    path: /storeorder
    method: GET
    data_selector: records
- name: DigitalProduct
  endpoint:
    path: /digitalproduct
    method: GET
    data_selector: records
- name: Invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: records
- name: OrderStatusUpdate
  endpoint:
    path: /OrderStatusUpdate
    method: POST
notes:
- SSL Connection is required for all requests.
- Client IPs must be registered to make requests.
- SSL Connection required for all requests.
- Client IPs must be registered in IWS for access.
- Default response format is JSON.
- The maximum number of products that can be requested in a list is 100.
- No notifications will be sent for subsequent changes if the previous state was 'invoiced/closed'
  or 'canceled'.
- Notifications are not sent for orders that are invoiced/closed or canceled.
- A secured HTTP connection or HTTPS is required for all requests.
- The order of fields in the response can vary.
- All requests must include security information to establish the identity of the
  client.
- The token must be included as a bearer in the Authorization request headers.
- All requests made to IWS need to include security information that can establish
  the identity of the client.
- 'Tokens can be included in the request in two ways: Authorization header (preferred)
  or Query string parameters.'
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- The cause of this exception will most likely NOT be resolved automatically. It is
  STRONGLY advised NOT to attempt this request again, until the problem has been resolved
  by our support staff.
- The API supports various object types related to orders and invoices.
- This process is responsible for sending notifications when an order changes its
  status.
- N/A
- Requires OAuth2 authentication with a connected app setup.
- Some objects may return nulls in deeply nested fields
- General errors may occur, and it's advised not to retry until resolved.
- This process is responsible for sending notifications when an order changes its
  status, except if the previous state was 'invoiced/closed' or 'canceled.'
- These last two are considered final stages of an order, so no notifications will
  be sent for subsequent changes in them.
errors:
- '400 (Bad Request): Invalid request parameters.'
- '401 (Unauthorized): Invalid credentials.'
- '403 (Forbidden): IP not registered.'
- '404 (Not Found): Resource not found.'
- '500 (Internal Server Error): Server encountered an error.'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Not Found'
- '500: Internal Server Error'
- '10: 401 - Unauthorized: Invalid signature.'
- '11: 401 - Unauthorized: Invalid time stamp.'
- '12: 401 - Unauthorized: Request time stamp no longer valid.'
- '13: 401 - Unauthorized: Invalid API Key.'
- '14: 401 - Unauthorized: IP address not registered.'
- '16: 401 - Unauthorized: API request not authorized.'
- '17: 401 - Unauthorized: Invalid authorization.'
- '18: 401 - Unauthorized: Missing bearer authentication header.'
- '19: 401 - Unauthorized: Missing authentication token.'
- '401 Unauthorized: Recheck authorization.'
- '500 General Error: Check the request and try again.'
- 401 Unauthorized
- 500 General Error
- '401 Unauthorized: Check authentication credentials.'
- '500 General Error: An unexpected error occurred.'
- '401 Unauthorized: Recheck authentication'
- '403 (Forbidden): Access denied.'
- 400 (Bad Request)
- 401 (Unauthorized)
- 403 (Forbidden)
- 404 (Not Found)
- 500 (Internal Server Error)
- Unauthorized product. Please refresh your catalog to obtain an updated list of authorized
  products.
- '20: 404 - Not Found: Invalid product.'
- '21: 401 - Unauthorized: Unauthorized product. Please refresh your catalog to obtain
  an updated list of authorized products.'
- '22: 401 - Unauthorized: Customer not authorized to receive product sales data.'
- '24: 401 - Unauthorized: Unauthorized to obtain full list of products.'
- '27: 401 - Unauthorized: Unable to add product to an order. SKU <SKU> is inactive
  or is not authorized for the customer specified.'
- '28: 401 - Unauthorized: Unauthorized order product <SKU>. Please check the catalog
  of authorized products, and make sure that the ones included in the order are valid.'
- '29: 401 - Unauthorized: Product list empty.'
- '30: 404 - Not Found: Invalid order.'
- '31: 400 - Bad Request: Invalid order specified. Make sure that the order is properly
  formatted in the request body.'
- '32: 400 - Bad Request: List of order items was not specified or is empty. Make
  sure that the list of items is properly formatted in the request body.'
- '33: 400 - Bad Request: One or more order items are missing the SKU. Please make
  sure that the list is properly formatted in the request body and contains valid
  products.'
- '34: 400 - Bad Request: One or more order items have a quantity of zero or less.
  Please make sure that all order items have a quantity larger than zero.'
- '36: 400 - Bad Request: Order number was not specified.'
- '39: 401 - Unauthorized: Unable to cancel order. Please contact support.'
- '41: 401 - Unauthorized: Customer is invalid.'
- '42: 401 - Unauthorized: Customer On Hold. Please contact your account executive
  to resolve this problem.'
- '43: 401 - Unauthorized: Invalid customers settings.'
- '46: 404 - Not Found: Customer data unavailable.'
- '50: 404 - Not Found: No downloadable products found in the order specified.'
- '51: 404 - Not Found: Invalid product key.'
- '54: 400 - Bad Request: Unable to place order on ESD product <SKU>. Please contact
  customer support for assistance.'
- '101: 400 - Bad Request: Invalid request.'
- '120: 503 - Service Unavailable: Unable to send one or more emails to the recipients
  specified.'
- '150: 400 - Bad Request: Store order number ''<StoreOrderNumber>'' is already assigned
  to Intcomex order ''<IntcomexOrderNumber>''.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '500: General Error'
- '900: Country ID not supported'
- 'IwsException: An error has occurred. Please contact support for assistance.'
- 'UnauthorizedClientIp: IP address not registered.'
- 'InvalidApiKey: Invalid API Key.'
- 'General Error: An error has occurred. Please contact support for assistance.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'InvalidApiKey: Invalid API Key'
- 'ExcessiveRequests: Excessive request attempts detected. Please wait 10 seconds
  from the last successful attempt before making a new request.'
- 'InvalidRequest: Invalid request.'
- '26: 400 - Bad Request: Too many products requested. The maximum number of products
  allowed is <maxProductsAllowed>.'
- '35: 400 - Bad Request: Length of shipping instructions is too long. The maximum
  length is <maximumShippingInstructionsLength> characters.'
- '37: 400 - Bad Request: Components list empty.'
- '38: 400 - Bad Request: Invalid sales order item.'
- '40: 404 - Not Found: Invalid customer.'
- '44: 404 - Not Found: ICMX customer not found in backend.'
- '45: 404 - Not Found: Customer not found in ERP system.'
- '47: 404 - Not Found: Customer extended data unavailable.'
- '55: 400 - Bad Request: Gift card amount for product <SKU> is fixed to <Currency>
  <Amount>. It cannot be purchased for the amount specified.'
- '56: 400 - Bad Request: Gift card amount specified for product <SKU> must be at
  least <Currency> <Amount>.'
- '57: 400 - Bad Request: Gift card amount specified for product <SKU> must be less
  than <Currency> <Amount>.'
- '58: 400 - Bad Request: Cannot generate tokens. The product may have been discontinued
  or disabled.'
- '59: 400 - Bad Request: Unable to generate tokens but order number ''<OrderNumber>''
  was successfully created. Please contact customer support for assistance.'
- '60: 404 - Not Found: Catalog file not found.'
- '72: 500 - Internal Server Error: Batch process error.'
- '90: 400 - Bad Request: Customer order number <CustomerOrderNumber> is already assigned
  to order <OrderNumber>.'
- '91: 400 - Bad Request: Customer Order Number was not specified. The ''customerOrderNumber''
  parameter is required in the request.'
- '92: 400 - Bad Request: Customer order number <CustomerOrderNumber> has already
  been used in another request. Please wait for that request to finish.'
- '100: 400 - Bad Request: Excessive request attempts detected. Please wait <X> seconds
  from the last successful attempt before making a new request.'
- '102: 400 - Bad Request: Invalid response format specified.'
- '121: 503 - Service Unavailable: Unable to send email(s) specified. However, the
  tokens were generated correctly. Please try again (subsequent requests will not
  generate more tokens, but will return the ones already generated instead).'
- '151: 400 - Bad Request: Invalid store order specified.'
- '152: 400 - Bad Request: Store order was not specified. The ''StoreOrder'' field
  is required in the request.'
- '153: 400 - Bad Request: Store order number ''<StoreOrderNumber>'' has already been
  used in another request. Please wait for that request to finish.'
- '154: 400 - Bad Request: Missing store order shipping information.'
- '170: 400 - Bad Request: Invalid payment specified. Make sure that the payment is
  properly formatted in the request body.'
- '171: 401 - Unauthorized: Payment amount cannot be zero.'
- '172: 401 - Unauthorized: Authorization code is required.'
- '173: 401 - Unauthorized: No payments found registered for the order. At least one
  payment is required before releasing the order.'
- '174: 401 - Unauthorized: Order has not been paid in full. Tokens cannot be generated
  until full payment has been registered for the order.'
- '175: 401 - Unauthorized: Insufficient payments amount for the order. Amount required:
  <999> | Amount paid: <999> | Balance: <999>.'
- '176: 401 - Unauthorized: Cannot register payment for a canceled order.'
- '180: 400 - Bad Request: Missing shipment information.'
- '181: 400 - Bad Request: Invalid shipment. Amount must be zero or greater.'
- '182: 400 - Bad Request: Invalid shipment. Service type is required.'
- '183: 400 - Bad Request: Valid shipment rate ID was not specified, or is not numeric.
  Please include a valid shipment rate ID to use in the ''Shipments[].FreightShipmentId''
  property.'
- '184: 400 - Bad Request: Unable to create shipment quote.'
- '185: 400 - Bad Request: Invalid shipment freight service.'
- '201: 401 - Unauthorized: Access denied.'
- '405: 409 - Conflict: Data access currently unavailable.'
- '501: 400 - Bad Request: Product list cannot be empty. Please specify at least one
  product in the list parameter.'
- '502: 400 - Bad Request: No product specified. Please make sure that a product is
  included in the request.'
- '503: 400 - Bad Request: Missing product identifier in order items. Please make
  sure that all products in the order are properly identified.'
- '504: 400 - Bad Request: Product creation failure.'
- '505: 400 - Bad Request: SKU already exists.'
- '506: 400 - Bad Request: Dimensions Error.'
- '550: 400 - Bad Request: Invalid tax ID validation specified.'
- '551: 404 - Not Found: Invalid tax ID.'
- '560: 400 - Bad Request: Invalid discount.'
- '561: 400 - Bad Request: Invalid discount type. Accepted values are ''pct'' (percentage)
  and ''fixed'' (fixed amount).'
- '570: 404 - Not Found: Invalid invoice.'
- '571: 404 - Not Found: Invoice not available for the order selected.'
- '572: 400 - Bad Request: Either an invoice or an order number are required.'
- '580: 404 - Not Found: No waybill document found for the order specified.'
- '590: 404 - Not Found: Invalid attachment.'
- '651: 400 - Bad Request: Cannot update invoiced order.'
- '653: 400 - Bad Request: A components list was specified but the price was missing
  (or was specified as zero).'
- '654: 401 - Unauthorized: The order specified has not been approved for ESD processing
  yet. Please try again later.'
- '655: 404 - Not Found: The customer in the order specified does not match the customer
  specified in the request.'
- '656: 401 - Unauthorized: Not reviewed for ESD processing.'
- '657: 404 - Not Found: Order total cannot be negative.'
- '658: 500 - Internal Server Error: Order is currently on hold. Tokens cannot be
  generated until the order has been released.'
- '659: 401 - Unauthorized: The order specified has been rejected for ESD processing.'
- '660: 500 - Internal Server Error: Insufficient available credit to place order.'
- '664: 500 - Internal Server Error: Cannot release the order.'
- '665: 401 - Unauthorized: Invalid order quantity for <SKU> Maximum quantity allowed
  for purchase is <quantityLimit>.'
- '666: 401 - Unauthorized: ESD orders not allowed for cash customer.'
- '680: 501 - Not Implemented: Token generation not currently supported by the vendor.'
- '681: 501 - Not Implemented: Status checks not currently supported by the token''s
  vendor.'
- '682: 501 - Not Implemented: Returns not currently supported by the token''s vendor.'
- '683: 400 - Bad Request: Cannot generate tokens because the order is canceled.'
- '684: 400 - Bad Request: Cannot generate tokens for an order placed on the Intcomex
  Store.'
- '685: 400 - Bad Request: Non ESD products found in the order.'
- '686: 400 - Bad Request: Token generation when placing orders is no longer supported.'
- '687: 500 - Internal Server Error: Invalid ESD Vendor.'
- '688: 500 - Internal Server Error: ESD Vendor does not support token returns.'
- '689: 500 - Internal Server Error: Token return is no longer valid. Tokens must
  be returned up to <TokenReturnMaximumDays> days after being generated.'
- '690: 500 - Internal Server Error: Cannot return token already redeemed.'
- '720: 404 - Not Found: Product <SKU> is no longer active.'
- '751: 500 - Internal Server Error: Missing product freight information. Cannot calculate
  shipment rate.'
- '752: 500 - Internal Server Error: Product freight information is incomplete (required
  measurements are missing). Cannot calculate shipment rate.'
- '800: 404 - Not Found: Download key is not valid.'
- '820: 400 - Bad Request: Invalid promotion code.'
- '850: 400 - Bad Request: Parameter <X> is not a valid date.'
- '851: 400 - Bad Request: End date cannot be before start date.'
- '900: 500 - Internal Server Error: An error has occurred. Please contact support
  for assistance.'
- Invalid API Key
- An error has occurred. Please contact support for assistance.
- General Error
- Currency requestd not supported
- '900: An error has occurred. Please contact support for assistance.'
- Request time stamp no longer valid.
- IP address not registered.
- Invalid signature.
- Invalid API Key.
- Excessive request attempts detected. Please wait 10 seconds from the last successful
  attempt before making a new request.
- IwsException
- InvalidApiKey
- ExcessiveRequests
- InvalidRequest
- 'General Error: An error has occurred. Please contact support for assistance. Warning:
  The cause of this exception will most likely NOT be resolved automatically. It is
  STRONGLY advised NOT to attempt this request again, until the problem has been resolved
  by our support staff.'
- InvalidOrder
- InvalidEsdProductsOrder
- InvalidCountryRequired
- InvalidCountry
- InvalidInvoice
- InvoiceNotAvailable
- InvalidToken
- TokenStatusNotSupported
- InvalidPayment
- InvalidStoreOrder
- InvalidAttachment
- CatalogFileNotFound
- InsuficientStock
- InvalidDate
- RegisterPaymentCanceledOrder
- ReleaseCanceledOrder
- InvalidSalesOrder
- ProcessOrder
- ProcessOrderSuccessful
- InvalidTaxId
- CurrencyException
- InvalidAddressId
- 'InvalidRequest: The request is not valid.'
- 'UnauthorizedProduct: The specified product is not authorized.'
- InvalidTimeStamp
- UnauthorizedClientIp
- InvalidSignature
- UnauthorizedProduct
- InvalidProduct
- 'Invalid time stamp: Request time stamp no longer valid.'
- 'IP address not registered: UnauthorizedClientIp.'
- '401 Unauthorized: Check client credentials and scopes.'
- '429 Too Many Requests: Rate limit exceeded, please retry later.'
- '500 Internal Server Error: An unexpected error occurred.'
- 'Currency requestd not supported. ErrorCode: 900'
- The error message indicating that the addressId code is invalid. Use the codes provided
  from Trax.
- 'Currency requestd not supported: Country ID not supported.'
- 'Invalid API Key: Invalid API Key.'
- Invalid order
- Invalid payment
- 'General Error: An error has occurred. Please contact support for assistance. Warning:
  The cause of this exception will most likely NOT be resolved automatically.'
- 'UnauthorizedClientIp: IP address not registered'
- 'General Error: An error has occurred. Please contact support for assistance. Warning:
  The cause of this exception will most likely NOT be resolved automatically. It is
  STRONGLY advised NOT to attempt this request again, until the problem has been resolved
  by our support staff. ErrorCode: 900'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://intcomexsrv.powerappsportals.com
  auth:
    type: http
    scheme: bearer
source_metadata: null
