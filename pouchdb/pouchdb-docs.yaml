resources:
- name: database
  endpoint:
    path: /create_database
    method: POST
    data_selector: response
    params: {}
- name: document
  endpoint:
    path: /create_update_doc
    method: POST
    data_selector: response
    params: {}
- name: database_info
  endpoint:
    path: /kittens
    method: GET
    data_selector: db_name
- name: documents
  endpoint:
    path: /api.html#fetch_document
    method: GET
    data_selector: documents
    params: {}
- name: bulk_operations
  endpoint:
    path: /api.html#create_document
    method: POST
    data_selector: bulk_operations
    params: {}
- name: delete_document
  endpoint:
    path: /api.html#delete_document
    method: DELETE
    data_selector: delete_document
    params: {}
- name: bulk_docs
  endpoint:
    path: /bulkDocs
    method: POST
    data_selector: records
- name: all_docs
  endpoint:
    path: /allDocs
    method: GET
    data_selector: records
- name: attachments
  endpoint:
    path: /attachments
    method: PUT
    data_selector: _attachments
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: doc
- name: replication
  endpoint:
    path: /_replicate
    method: POST
    data_selector: 'null'
    params: {}
- name: changes
  endpoint:
    path: /_changes
    method: GET
    data_selector: results
    params:
      since: 0
      include_docs: true
- name: mango_queries
  endpoint:
    path: /guides/mango-queries.html
    method: GET
    data_selector: queries
    params: {}
- name: map_reduce_queries
  endpoint:
    path: /api.html#query_database
    method: GET
    data_selector: queries
- name: todos
  endpoint:
    path: /todos
    method: POST
    data_selector: rows
notes:
- PouchDB supports both callbacks and promises for API interactions.
- Uses JavaScript Proxies to monitor calls to the active tasks API.
- Uses JavaScript Proxies to monitor calls
- Can use PouchDB.defaults() to simplify code with default options
- 'The remote database will not be created until you do an API call, e.g.: db.info()'
- PouchDB allows storing attachments in base64-encoded format or as Blobs.
- CouchDB supports a multi-master architecture.
- Conflicts can occur with any API that takes a `rev` or a document with `_rev` as
  input
- 409 errors can occur during live replication
- Map/reduce queries can be complex and computationally expensive.
- Consider using allDocs() or changes() if applicable.
- Compaction is a harmless operation, as leaf revisions are retained, allowing for
  conflict resolution after compaction.
- You need to have a compatible server instance.
- CORS must be enabled in CouchDB for replication.
- PouchDB is not a self-contained database; it is a CouchDB-style abstraction layer
  over other databases.
- PouchDB attempts to provide a consistent API that 'just works' across every browser
  and JavaScript environment.
- Custom builds require an npm-based build system, using a bundler like Browserify,
  Webpack, SystemJS, Rollup, or JSPM.
- Tools like Bower, as well as direct download of prebuilt JavaScript files, are not
  supported.
errors:
- '409: conflict'
- 'CORS error: Check CORS settings in CouchDB'
- '401 Unauthorized: Check credentials for remote CouchDB'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- No 'Access-Control-Allow-Origin' header is present on the requested resource.
- 'Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote
  resource.'
- No valid adapter found
- InvalidStateError
- 'Error: UnknownError (Firefox)'
- 'Error: UnknownError (Chrome / Opera)'
- 'DataCloneError: An object could not be cloned.'
- DOM Exception 18 in Android pre-Kitkat
- 'Failed to load resource: the server responded with a status of 400 (Bad request)'
auth_info:
  mentioned_objects: []
client:
  base_url: http://example.org
source_metadata: null
