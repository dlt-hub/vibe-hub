resources:
- name: search
  endpoint:
    path: /basic/groups/search
    method: GET
- name: role
  endpoint:
    path: /object/groups/{objectId}/role
    method: PUT
- name: kick
  endpoint:
    path: /object/groups/{objectId}/kick
    method: POST
- name: apply
  endpoint:
    path: /object/groups/{objectId}/apply
    method: POST
- name: donations
  endpoint:
    path: /object/groups/{objectId}/donations
    method: POST
- name: member
  endpoint:
    path: /object/groups/{objectId}/member
    method: DELETE
- name: group
  endpoint:
    path: /object/groups/{objectId}/
    method: GET
- name: invite
  endpoint:
    path: /object/groups/{objectId}/invite
    method: POST
- name: petition
  endpoint:
    path: /object/groups/{objectId}/petition
    method: POST
- name: availability
  endpoint:
    path: /object/group-users/{objectId}/availability
    method: GET
- name: recommended
  endpoint:
    path: /object/group-users/{objectId}/recommended
    method: GET
- name: join
  endpoint:
    path: /object/group-users/{objectId}/join
    method: POST
- name: group_users
  endpoint:
    path: /object/group-users/{objectId}/group
    method: POST
- name: search_users
  endpoint:
    path: /object/group-users/{objectId}/search
    method: GET
- name: accounts
  endpoint:
    path: /basic/accounts/me
    method: GET
    data_selector: records
    params: {}
- name: announcements
  endpoint:
    path: /basic/announcements/
    method: POST
    data_selector: records
    params: {}
- name: groups_search
  endpoint:
    path: /basic/groups/search
    method: GET
- name: groups_role
  endpoint:
    path: /object/groups/{objectId}/role
    method: PUT
- name: groups_kick
  endpoint:
    path: /object/groups/{objectId}/kick
    method: POST
- name: groups_apply
  endpoint:
    path: /object/groups/{objectId}/apply
    method: POST
- name: groups_donations
  endpoint:
    path: /object/groups/{objectId}/donations
    method: POST
- name: groups_member
  endpoint:
    path: /object/groups/{objectId}/member
    method: DELETE
- name: groups_detail
  endpoint:
    path: /object/groups/{objectId}/
    method: GET
- name: groups_invite
  endpoint:
    path: /object/groups/{objectId}/invite
    method: POST
- name: groups_petition
  endpoint:
    path: /object/groups/{objectId}/petition
    method: POST
- name: group_users_availability
  endpoint:
    path: /object/group-users/{objectId}/availability
    method: GET
- name: group_users_recommended
  endpoint:
    path: /object/group-users/{objectId}/recommended
    method: GET
- name: group_users_join
  endpoint:
    path: /object/group-users/{objectId}/join
    method: POST
- name: group_users_group
  endpoint:
    path: /object/group-users/{objectId}/group
    method: POST
- name: group_users_search
  endpoint:
    path: /object/group-users/{objectId}/search
    method: GET
- name: group_users_detail
  endpoint:
    path: /object/group-users/{objectId}/
    method: GET
- name: social_friends
  endpoint:
    path: /basic/social/friends
    method: DELETE
- name: social_my
  endpoint:
    path: /basic/social/my
    method: GET
- name: social_friends_import
  endpoint:
    path: /basic/social/friends/import
    method: POST
- name: social_blocked
  endpoint:
    path: /basic/social/blocked
    method: POST
- name: legacy_timers_defs
  endpoint:
    path: /basic/legacy-timers/defs
    method: GET
- name: legacy_promos
  endpoint:
    path: /basic/legacy-promos/
    method: GET
- name: legacy_timers
  endpoint:
    path: /basic/legacy-timers/
    method: GET
- name: legacy_promos_codes
  endpoint:
    path: /basic/legacy-promos/codes
    method: GET
- name: legacy_promos_claim
  endpoint:
    path: /basic/legacy-promos/claim
    method: POST
- name: legacy_entitlement_defs
  endpoint:
    path: /basic/legacy-entitlement-defs/
    method: GET
- name: legacy_entitlement_defs_upload
  endpoint:
    path: /basic/legacy-entitlement-defs/upload
    method: POST
- name: legacy_entitlement_defs_player
  endpoint:
    path: /basic/legacy-entitlement-defs/player
    method: GET
- name: legacy_entitlement_defs_grant
  endpoint:
    path: /basic/legacy-entitlement-defs/grant
    method: POST
- name: legacy_entitlement_defs_claim
  endpoint:
    path: /basic/legacy-entitlement-defs/claim
    method: PUT
- name: legacy_entitlement_defs_revoke
  endpoint:
    path: /basic/legacy-entitlement-defs/revoke
    method: DELETE
- name: legacy_cloud_campaigns_schedule
  endpoint:
    path: /basic/legacy-cloud/campaigns/schedule
    method: PUT
- name: legacy_cloud_templates
  endpoint:
    path: /basic/legacy-cloud/templates
    method: GET
- name: legacy_cloud_campaigns
  endpoint:
    path: /basic/legacy-cloud/campaigns
    method: GET
- name: legacy_pvp_defs_file
  endpoint:
    path: /basic/legacy-pvp-defs/file
    method: POST
- name: legacy_pvp_defs
  endpoint:
    path: /basic/legacy-pvp-defs/
    method: GET
- name: legacy_shards_accepting
  endpoint:
    path: /basic/legacy-shards/accepting
    method: GET
- name: legacy_shards_preferred
  endpoint:
    path: /basic/legacy-shards/preferred
    method: GET
- name: legacy_shards
  endpoint:
    path: /basic/legacy-shards/
    method: GET
- name: history_apiaccess_url
  endpoint:
    path: /basic/history/apiaccess/url
    method: GET
- name: history_query_url
  endpoint:
    path: /basic/history/query/url
    method: POST
- name: history_microservices
  endpoint:
    path: /basic/history/microservices
    method: GET
- name: history_account_roles
  endpoint:
    path: /basic/history/account/roles
    method: GET
- name: history_events
  endpoint:
    path: /basic/history/events
    method: GET
- name: social_friends
  endpoint:
    path: /basic/social/friends
    method: DELETE
- name: social_my
  endpoint:
    path: /basic/social/my
    method: GET
- name: social_friends_import
  endpoint:
    path: /basic/social/friends/import
    method: POST
- name: social_blocked
  endpoint:
    path: /basic/social/blocked
    method: POST
- name: legacy_timers_defs
  endpoint:
    path: /basic/legacy-timers/defs
    method: GET
- name: legacy_promos
  endpoint:
    path: /basic/legacy-promos/
    method: GET
- name: legacy_timers
  endpoint:
    path: /basic/legacy-timers/
    method: GET
- name: legacy_promos_codes
  endpoint:
    path: /basic/legacy-promos/codes
    method: GET
- name: legacy_promos_claim
  endpoint:
    path: /basic/legacy-promos/claim
    method: POST
- name: legacy_entitlement_defs
  endpoint:
    path: /basic/legacy-entitlement-defs/
    method: GET
- name: legacy_entitlement_defs_upload
  endpoint:
    path: /basic/legacy-entitlement-defs/upload
    method: POST
- name: legacy_entitlement_defs_player
  endpoint:
    path: /basic/legacy-entitlement-defs/player
    method: GET
- name: legacy_entitlement_defs_grant
  endpoint:
    path: /basic/legacy-entitlement-defs/grant
    method: POST
- name: legacy_entitlement_defs_claim
  endpoint:
    path: /basic/legacy-entitlement-defs/claim
    method: PUT
- name: legacy_entitlement_defs_revoke
  endpoint:
    path: /basic/legacy-entitlement-defs/revoke
    method: DELETE
- name: legacy_cloud_campaigns_schedule
  endpoint:
    path: /basic/legacy-cloud/campaigns/schedule
    method: PUT
- name: legacy_cloud_templates
  endpoint:
    path: /basic/legacy-cloud/templates
    method: GET
- name: legacy_cloud_campaigns
  endpoint:
    path: /basic/legacy-cloud/campaigns
    method: GET
- name: legacy_pvp_defs_file
  endpoint:
    path: /basic/legacy-pvp-defs/file
    method: POST
- name: legacy_pvp_defs
  endpoint:
    path: /basic/legacy-pvp-defs/
    method: GET
- name: legacy_shards_accepting
  endpoint:
    path: /basic/legacy-shards/accepting
    method: GET
- name: legacy_shards_preferred
  endpoint:
    path: /basic/legacy-shards/preferred
    method: GET
- name: legacy_shards
  endpoint:
    path: /basic/legacy-shards/
    method: GET
- name: history_api_access_url
  endpoint:
    path: /basic/history/apiaccess/url
    method: GET
- name: history_query_url
  endpoint:
    path: /basic/history/query/url
    method: POST
- name: history_microservices
  endpoint:
    path: /basic/history/microservices
    method: GET
- name: history_account_roles
  endpoint:
    path: /basic/history/account/roles
    method: GET
- name: history_events
  endpoint:
    path: /basic/history/events
    method: GET
- name: A/B Testing
  endpoint:
    path: /reference/abtesting-overview
    method: GET
- name: Accounts
  endpoint:
    path: /reference/accounts-overview
    method: GET
- name: Analytics
  endpoint:
    path: /docs/analytics-feature-overview
    method: GET
- name: Announcements
  endpoint:
    path: /reference/announcements-overview
    method: GET
- name: Authentication
  endpoint:
    path: /reference/authentication-overview
    method: GET
- name: Calendars
  endpoint:
    path: /reference/calendars-overview
    method: GET
- name: Chat
  endpoint:
    path: /reference/chat-overview
    method: GET
- name: Cloud Saving
  endpoint:
    path: /reference/cloud-saving-overview
    method: GET
- name: Commerce
  endpoint:
    path: /reference/commerce-overview
    method: GET
- name: Content
  endpoint:
    path: /reference/content-overview
    method: GET
- name: Events
  endpoint:
    path: /reference/events-overview
    method: GET
- name: Game Relay
  endpoint:
    path: /reference/game-relay-overview
    method: GET
- name: Groups
  endpoint:
    path: /reference/groups-overview
    method: GET
- name: Inventory
  endpoint:
    path: /reference/inventory-overview
    method: GET
- name: Leaderboards
  endpoint:
    path: /reference/leaderboards-overview
    method: GET
- name: Mail
  endpoint:
    path: /reference/mail-overview
    method: GET
- name: Matchmaking
  endpoint:
    path: /reference/matchmaking-overview
    method: GET
- name: Payments
  endpoint:
    path: /reference/payments-overview
    method: GET
- name: Push Notifications
  endpoint:
    path: /reference/push-notifications-overview
    method: GET
- name: Realm Administration
  endpoint:
    path: /reference/realm-administration-overview
    method: GET
- name: Server Notifications
  endpoint:
    path: /reference/server-notifications-overview
    method: GET
- name: Session
  endpoint:
    path: /reference/session-overview
    method: GET
- name: Stats
  endpoint:
    path: /reference/stats-overview
    method: GET
- name: Tournaments
  endpoint:
    path: /reference/tournaments-overview
    method: GET
- name: leaderboards_list
  endpoint:
    path: /basic/leaderboards/list
    method: GET
- name: leaderboards_player
  endpoint:
    path: /basic/leaderboards/player
    method: GET
- name: leaderboards_assignment
  endpoint:
    path: /basic/leaderboards/assignment
    method: GET
- name: leaderboards_uid
  endpoint:
    path: /basic/leaderboards/uid
    method: GET
- name: leaderboards_entries
  endpoint:
    path: /object/leaderboards/{objectId}/entries
    method: GET
- name: leaderboards_membership
  endpoint:
    path: /object/leaderboards/{objectId}/membership
    method: GET
- name: leaderboards_ranks
  endpoint:
    path: /object/leaderboards/{objectId}/ranks
    method: GET
- name: leaderboards_partition
  endpoint:
    path: /object/leaderboards/{objectId}/partition
    method: GET
- name: leaderboards_details
  endpoint:
    path: /object/leaderboards/{objectId}/details
    method: GET
- name: groups_search
  endpoint:
    path: /basic/groups/search
    method: GET
- name: groups_role
  endpoint:
    path: /object/groups/{objectId}/role
    method: PUT
- name: mail_attachments
  endpoint:
    path: /basic/mail/attachments
    method: PUT
- name: mail_template
  endpoint:
    path: /basic/mail/template
    method: GET
- name: payments_windows_purchase_track
  endpoint:
    path: /basic/payments/windows/purchase/track
    method: POST
- name: push_register
  endpoint:
    path: /basic/push/register
    method: POST
- name: realms_project
  endpoint:
    path: /basic/realms/project
    method: GET
- name: notification_channel
  endpoint:
    path: /basic/notification/channel
    method: POST
- name: session_history
  endpoint:
    path: /basic/session/history
    method: GET
- name: leaderboards_list
  endpoint:
    path: /basic/leaderboards/list
    method: GET
- name: leaderboards_player
  endpoint:
    path: /basic/leaderboards/player
    method: GET
- name: leaderboards_assignment
  endpoint:
    path: /basic/leaderboards/assignment
    method: GET
- name: leaderboards_uid
  endpoint:
    path: /basic/leaderboards/uid
    method: GET
- name: groups_search
  endpoint:
    path: /basic/groups/search
    method: GET
- name: mail_attachments
  endpoint:
    path: /basic/mail/attachments
    method: PUT
- name: matchmaking_tick
  endpoint:
    path: /object/matchmaking/{objectId}/tick
    method: PUT
- name: payments_windows_purchase_track
  endpoint:
    path: /basic/payments/windows/purchase/track
    method: POST
- name: push_register
  endpoint:
    path: /basic/push/register
    method: POST
- name: realms_project_beamable
  endpoint:
    path: /basic/realms/project/beamable
    method: POST
- name: notification
  endpoint:
    path: /basic/notification/
    method: GET
- name: session_history
  endpoint:
    path: /basic/session/history
    method: GET
- name: stats_client_batch
  endpoint:
    path: /basic/stats/client/batch
    method: GET
- name: tournaments
  endpoint:
    path: /basic/tournaments/
    method: GET
- name: social_friends
  endpoint:
    path: /basic/social/friends
    method: GET
- name: legacy_timers_defs
  endpoint:
    path: /basic/legacy-timers/defs
    method: GET
- name: analytics_api_access_url
  endpoint:
    path: /basic/history/apiaccess/url
    method: GET
- name: stats_client_batch
  endpoint:
    path: /basic/stats/client/batch
    method: GET
    data_selector: ''
    params: {}
- name: tournaments
  endpoint:
    path: /basic/tournaments/
    method: GET
    data_selector: ''
    params: {}
- name: social_friends
  endpoint:
    path: /basic/social/friends
    method: GET
    data_selector: ''
    params: {}
- name: legacy_timers_defs
  endpoint:
    path: /basic/legacy-timers/defs
    method: GET
    data_selector: ''
    params: {}
- name: analytics_api_access_url
  endpoint:
    path: /basic/history/apiaccess/url
    method: GET
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: groups_search
  endpoint:
    path: /basic/groups/search
    method: GET
- name: groups_role
  endpoint:
    path: /object/groups/{objectId}/role
    method: PUT
- name: groups_kick
  endpoint:
    path: /object/groups/{objectId}/kick
    method: POST
- name: groups_apply
  endpoint:
    path: /object/groups/{objectId}/apply
    method: POST
- name: groups_donations
  endpoint:
    path: /object/groups/{objectId}/donations
    method: POST
- name: groups_member
  endpoint:
    path: /object/groups/{objectId}/member
    method: DELETE
- name: groups_object
  endpoint:
    path: /object/groups/{objectId}/
    method: GET
- name: groups_invite
  endpoint:
    path: /object/groups/{objectId}/invite
    method: POST
- name: groups_petition
  endpoint:
    path: /object/groups/{objectId}/petition
    method: POST
- name: group_users_availability
  endpoint:
    path: /object/group-users/{objectId}/availability
    method: GET
- name: group_users_recommended
  endpoint:
    path: /object/group-users/{objectId}/recommended
    method: GET
- name: group_users_join
  endpoint:
    path: /object/group-users/{objectId}/join
    method: POST
- name: group_users_group
  endpoint:
    path: /object/group-users/{objectId}/group
    method: POST
- name: group_users_search
  endpoint:
    path: /object/group-users/{objectId}/search
    method: GET
- name: groups_search
  endpoint:
    path: /basic/groups/search
    method: GET
    data_selector: records
- name: group_role
  endpoint:
    path: /object/groups/{objectId}/role
    method: PUT
    data_selector: records
- name: group_kick
  endpoint:
    path: /object/groups/{objectId}/kick
    method: POST
    data_selector: records
- name: group_apply
  endpoint:
    path: /object/groups/{objectId}/apply
    method: POST
    data_selector: records
- name: group_donations
  endpoint:
    path: /object/groups/{objectId}/donations
    method: POST
    data_selector: records
- name: group_member
  endpoint:
    path: /object/groups/{objectId}/member
    method: DELETE
    data_selector: records
- name: group_invite
  endpoint:
    path: /object/groups/{objectId}/invite
    method: POST
    data_selector: records
- name: group_petition
  endpoint:
    path: /object/groups/{objectId}/petition
    method: POST
    data_selector: records
- name: group_users_availability
  endpoint:
    path: /object/group-users/{objectId}/availability
    method: GET
    data_selector: records
- name: group_users_recommended
  endpoint:
    path: /object/group-users/{objectId}/recommended
    method: GET
    data_selector: records
- name: group_users_join
  endpoint:
    path: /object/group-users/{objectId}/join
    method: POST
    data_selector: records
- name: group_users_group
  endpoint:
    path: /object/group-users/{objectId}/group
    method: POST
    data_selector: records
- name: group_users_search
  endpoint:
    path: /object/group-users/{objectId}/search
    method: GET
    data_selector: records
- name: social_friends
  endpoint:
    path: /basic/social/friends
    method: DELETE
- name: social_my
  endpoint:
    path: /basic/social/my
    method: GET
- name: social_friends_import
  endpoint:
    path: /basic/social/friends/import
    method: POST
- name: social_blocked
  endpoint:
    path: /basic/social/blocked
    method: POST
- name: legacy_timers_defs
  endpoint:
    path: /basic/legacy-timers/defs
    method: GET
- name: legacy_promos
  endpoint:
    path: /basic/legacy-promos/
    method: GET
- name: legacy_timers
  endpoint:
    path: /basic/legacy-timers/
    method: GET
- name: legacy_promos_codes
  endpoint:
    path: /basic/legacy-promos/codes
    method: GET
- name: legacy_promos_claim
  endpoint:
    path: /basic/legacy-promos/claim
    method: POST
- name: legacy_entitlement_defs
  endpoint:
    path: /basic/legacy-entitlement-defs/
    method: GET
- name: legacy_entitlement_defs_upload
  endpoint:
    path: /basic/legacy-entitlement-defs/upload
    method: POST
- name: legacy_cloud_campaigns_schedule
  endpoint:
    path: /basic/legacy-cloud/campaigns/schedule
    method: PUT
- name: legacy_cloud_templates
  endpoint:
    path: /basic/legacy-cloud/templates
    method: GET
- name: legacy_cloud_campaigns
  endpoint:
    path: /basic/legacy-cloud/campaigns
    method: GET
- name: legacy_pvp_defs_file
  endpoint:
    path: /basic/legacy-pvp-defs/file
    method: POST
- name: legacy_shards_accepting
  endpoint:
    path: /basic/legacy-shards/accepting
    method: GET
- name: legacy_shards_preferred
  endpoint:
    path: /basic/legacy-shards/preferred
    method: GET
- name: history_apiaccess_url
  endpoint:
    path: /basic/history/apiaccess/url
    method: GET
- name: history_query_url
  endpoint:
    path: /basic/history/query/url
    method: POST
- name: history_microservices
  endpoint:
    path: /basic/history/microservices
    method: GET
- name: history_account_roles
  endpoint:
    path: /basic/history/account/roles
    method: GET
- name: history_events
  endpoint:
    path: /basic/history/events
    method: GET
- name: social_friends
  endpoint:
    path: /basic/social/friends
    method: DELETE
- name: social_my
  endpoint:
    path: /basic/social/my
    method: GET
- name: social_friends_import
  endpoint:
    path: /basic/social/friends/import
    method: POST
- name: social_blocked
  endpoint:
    path: /basic/social/blocked
    method: POST
- name: legacy_timers_defs
  endpoint:
    path: /basic/legacy-timers/defs
    method: GET
- name: legacy_promos
  endpoint:
    path: /basic/legacy-promos/
    method: GET
- name: legacy_timers
  endpoint:
    path: /basic/legacy-timers/
    method: GET
- name: legacy_promos_codes
  endpoint:
    path: /basic/legacy-promos/codes
    method: GET
- name: legacy_promos_claim
  endpoint:
    path: /basic/legacy-promos/claim
    method: POST
- name: legacy_entitlement_defs
  endpoint:
    path: /basic/legacy-entitlement-defs/
    method: GET
- name: legacy_entitlement_defs_upload
  endpoint:
    path: /basic/legacy-entitlement-defs/upload
    method: POST
- name: legacy_entitlement_defs_player
  endpoint:
    path: /basic/legacy-entitlement-defs/player
    method: GET
- name: legacy_entitlement_defs_grant
  endpoint:
    path: /basic/legacy-entitlement-defs/grant
    method: POST
- name: legacy_entitlement_defs_claim
  endpoint:
    path: /basic/legacy-entitlement-defs/claim
    method: PUT
- name: legacy_entitlement_defs_revoke
  endpoint:
    path: /basic/legacy-entitlement-defs/revoke
    method: DELETE
- name: legacy_cloud_campaigns_schedule
  endpoint:
    path: /basic/legacy-cloud/campaigns/schedule
    method: PUT
- name: legacy_cloud_templates
  endpoint:
    path: /basic/legacy-cloud/templates
    method: GET
- name: legacy_cloud_campaigns
  endpoint:
    path: /basic/legacy-cloud/campaigns
    method: GET
- name: legacy_pvp_defs_file
  endpoint:
    path: /basic/legacy-pvp-defs/file
    method: POST
- name: legacy_pvp_defs
  endpoint:
    path: /basic/legacy-pvp-defs/
    method: GET
- name: legacy_shards_accepting
  endpoint:
    path: /basic/legacy-shards/accepting
    method: GET
- name: legacy_shards_preferred
  endpoint:
    path: /basic/legacy-shards/preferred
    method: GET
- name: legacy_shards
  endpoint:
    path: /basic/legacy-shards/
    method: GET
- name: history_apiaccess_url
  endpoint:
    path: /basic/history/apiaccess/url
    method: GET
- name: history_query_url
  endpoint:
    path: /basic/history/query/url
    method: POST
- name: history_microservices
  endpoint:
    path: /basic/history/microservices
    method: GET
- name: history_account_roles
  endpoint:
    path: /basic/history/account/roles
    method: GET
- name: history_events
  endpoint:
    path: /basic/history/events
    method: GET
- name: Authentication
  endpoint:
    path: /basic/auth/token
    method: POST
- name: accounts
  endpoint:
    path: /basic/accounts
    method: GET
- name: authentication
  endpoint:
    path: /basic/auth/token
    method: POST
- name: announcements
  endpoint:
    path: /basic/announcements
    method: POST
- name: calendars
  endpoint:
    path: /object/calendars/{objectId}
    method: GET
- name: chat
  endpoint:
    path: /object/chatV2/{objectId}
    method: GET
- name: cloud_saving
  endpoint:
    path: /basic/cloudsaving
    method: GET
- name: commerce
  endpoint:
    path: /basic/commerce
    method: GET
- name: content
  endpoint:
    path: /basic/content
    method: POST
- name: events
  endpoint:
    path: /basic/events
    method: GET
- name: game_relay
  endpoint:
    path: /object/gamerelay/{objectId}
    method: POST
- name: inventory
  endpoint:
    path: /basic/inventory
    method: GET
- name: leaderboards
  endpoint:
    path: /basic/leaderboards/list
    method: GET
- name: groups
  endpoint:
    path: /basic/groups/search
    method: GET
- name: mail
  endpoint:
    path: /basic/mail/attachments
    method: PUT
- name: matchmaking
  endpoint:
    path: /object/matchmaking/{objectId}/match
    method: GET
- name: payments
  endpoint:
    path: /basic/payments/windows/purchase/track
    method: POST
- name: push_notifications
  endpoint:
    path: /basic/push/register
    method: POST
- name: realms
  endpoint:
    path: /basic/realms/project/beamable
    method: POST
- name: notification
  endpoint:
    path: /basic/notification/
    method: GET
- name: session
  endpoint:
    path: /basic/session/history
    method: GET
- name: leaderboards
  endpoint:
    path: /basic/leaderboards/list
    method: GET
- name: groups
  endpoint:
    path: /basic/groups/search
    method: GET
- name: mail
  endpoint:
    path: /basic/mail/
    method: GET
- name: matchmaking
  endpoint:
    path: /object/matchmaking/{objectId}/match
    method: GET
- name: payments
  endpoint:
    path: /basic/payments/windows/purchase/track
    method: POST
- name: push_notifications
  endpoint:
    path: /basic/push/register
    method: POST
- name: realms
  endpoint:
    path: /basic/realms/project/beamable
    method: POST
- name: notification
  endpoint:
    path: /basic/notification/
    method: GET
- name: session
  endpoint:
    path: /basic/session/history
    method: GET
- name: stats_client_batch
  endpoint:
    path: /basic/stats/client/batch
    method: GET
- name: tournaments
  endpoint:
    path: /basic/tournaments/
    method: GET
- name: social_friends
  endpoint:
    path: /basic/social/friends
    method: GET
- name: legacy_timers_defs
  endpoint:
    path: /basic/legacy-timers/defs
    method: GET
- name: history_apiaccess_url
  endpoint:
    path: /basic/history/apiaccess/url
    method: GET
- name: stats
  endpoint:
    path: /basic/stats/
    method: GET
- name: tournaments
  endpoint:
    path: /basic/tournaments/
    method: GET
- name: social
  endpoint:
    path: /basic/social/
    method: GET
- name: legacy
  endpoint:
    path: /basic/legacy/
    method: GET
- name: analytics
  endpoint:
    path: /basic/history/
    method: GET
- name: CloudDataService
  endpoint:
    path: /clouddata
    method: GET
    data_selector: records
- name: AuthService
  endpoint:
    path: /auth
    method: GET
    data_selector: records
- name: AnalyticsTracker
  endpoint:
    path: /analytics
    method: GET
    data_selector: records
- name: AnnouncementsService
  endpoint:
    path: /announcements
    method: GET
    data_selector: records
- name: CalendarsService
  endpoint:
    path: /calendars
    method: GET
    data_selector: records
- name: ChatService
  endpoint:
    path: /chat
    method: GET
    data_selector: records
- name: CloudSavingService
  endpoint:
    path: /cloudsave
    method: GET
    data_selector: records
- name: CommerceService
  endpoint:
    path: /commerce
    method: GET
    data_selector: records
- name: ConnectivityService
  endpoint:
    path: /connectivity
    method: GET
    data_selector: records
- name: ContentService
  endpoint:
    path: /content
    method: GET
    data_selector: records
- name: EventsService
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: GroupsService
  endpoint:
    path: /groups
    method: GET
    data_selector: records
- name: InventoryService
  endpoint:
    path: /inventory
    method: GET
    data_selector: records
- name: LeaderboardService
  endpoint:
    path: /leaderboard
    method: GET
    data_selector: records
- name: MailService
  endpoint:
    path: /mail
    method: GET
    data_selector: records
- name: MatchmakingService
  endpoint:
    path: /matchmaking
    method: GET
    data_selector: records
- name: SimClient
  endpoint:
    path: /sim
    method: GET
    data_selector: records
- name: PaymentService
  endpoint:
    path: /payment
    method: GET
    data_selector: records
- name: PushService
  endpoint:
    path: /push
    method: GET
    data_selector: records
- name: StatsService
  endpoint:
    path: /stats
    method: GET
    data_selector: records
- name: TournamentsService
  endpoint:
    path: /tournaments
    method: GET
    data_selector: records
- name: CloudDataService
  endpoint:
    path: /clouddata
    method: GET
    data_selector: records
- name: AuthService
  endpoint:
    path: /auth
    method: GET
    data_selector: records
- name: AnalyticsTracker
  endpoint:
    path: /analytics
    method: GET
    data_selector: records
- name: AnnouncementsService
  endpoint:
    path: /announcements
    method: GET
    data_selector: records
- name: CalendarsService
  endpoint:
    path: /calendars
    method: GET
    data_selector: records
- name: ChatService
  endpoint:
    path: /chat
    method: GET
    data_selector: records
- name: CloudSavingService
  endpoint:
    path: /cloudsave
    method: GET
    data_selector: records
- name: CommerceService
  endpoint:
    path: /commerce
    method: GET
    data_selector: records
- name: ConnectivityService
  endpoint:
    path: /connectivity
    method: GET
    data_selector: records
- name: ContentService
  endpoint:
    path: /content
    method: GET
    data_selector: records
- name: EventsService
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: GroupsService
  endpoint:
    path: /groups
    method: GET
    data_selector: records
- name: InventoryService
  endpoint:
    path: /inventory
    method: GET
    data_selector: records
- name: LeaderboardService
  endpoint:
    path: /leaderboard
    method: GET
    data_selector: records
- name: MailService
  endpoint:
    path: /mail
    method: GET
    data_selector: records
- name: MatchmakingService
  endpoint:
    path: /matchmaking
    method: GET
    data_selector: records
- name: SimClient
  endpoint:
    path: /sim
    method: GET
    data_selector: records
- name: PaymentService
  endpoint:
    path: /payment
    method: GET
    data_selector: records
- name: PushService
  endpoint:
    path: /push
    method: GET
    data_selector: records
- name: StatsService
  endpoint:
    path: /stats
    method: GET
    data_selector: records
- name: TournamentsService
  endpoint:
    path: /tournaments
    method: GET
    data_selector: records
- name: Service Types
  endpoint:
    path: /docs/service-types
    method: GET
    data_selector: service_types
    params: {}
- name: Disposing Services
  endpoint:
    path: /docs/disposing-services
    method: GET
    data_selector: disposing_services
    params: {}
- name: Hierarchical Scopes
  endpoint:
    path: /docs/hierarchical-scopes
    method: GET
    data_selector: hierarchical_scopes
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: BeamContext
  endpoint:
    path: /docs/player-centric-api-code#beamable-player-centric-api
    method: GET
    data_selector: services
    params: {}
- name: player
  endpoint:
    path: /api/v1/player
    method: GET
    data_selector: data
    params: {}
- name: inventory
  endpoint:
    path: /api/v1/inventory
    method: GET
    data_selector: items
    params: {}
- name: Service Types
  endpoint:
    path: /docs/service-types
    method: GET
    data_selector: records
- name: Disposing Services
  endpoint:
    path: /docs/disposing-services
    method: GET
    data_selector: records
- name: Hierarchical Scopes
  endpoint:
    path: /docs/hierarchical-scopes
    method: GET
    data_selector: records
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: records
    params: {}
- name: leaderboards
  endpoint:
    path: /leaderboards
    method: GET
    data_selector: records
    params: {}
- name: DependencyBuilder
  endpoint:
    path: /docs/di-dependencybuilder
    method: GET
    data_selector: records
    params: {}
- name: IDeviceIdResolver
  endpoint:
    path: /docs/di-deviceidresolver
    method: GET
    data_selector: records
    params: {}
- name: Connectivity
  endpoint:
    path: /connectivity
    method: GET
- name: Cloud Save
  endpoint:
    path: /cloud-save
    method: GET
- name: Content
  endpoint:
    path: /content
    method: GET
- name: Players
  endpoint:
    path: /players
    method: GET
- name: Stats
  endpoint:
    path: /stats
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: player_stats
  endpoint:
    path: /services/data/v1.0/player_stats
    method: GET
    data_selector: records
- name: game_events
  endpoint:
    path: /services/data/v1.0/game_events
    method: GET
    data_selector: records
- name: arguments
  endpoint:
    path: /docs/cli-project-add-unreal-project
    method: GET
    data_selector: arguments
- name: options
  endpoint:
    path: /docs/cli-project-add-unreal-project
    method: GET
    data_selector: options
- name: content_reset
  endpoint:
    path: /content/reset
    method: POST
    data_selector: results
- name: services
  endpoint:
    path: /services
    method: GET
- name: manifests
  endpoint:
    path: /services/manifests
    method: GET
- name: content_publish
  endpoint:
    path: /content/publish
    method: POST
    data_selector: data
- name: player
  endpoint:
    path: /api/v2/player
    method: GET
    data_selector: data
    params: {}
- name: service_metrics
  endpoint:
    path: /services/service-metrics
    method: GET
- name: services_enable
  endpoint:
    path: /services/enable
    method: POST
- name: Microstorage
  endpoint:
    path: /project/new/storage
    method: POST
    data_selector: response
    params: {}
- name: service_metrics
  endpoint:
    path: /services/service-metrics
    method: GET
    data_selector: metrics
- name: microstorage
  endpoint:
    path: /docs/project-new-storage
    method: POST
    data_selector: project
    params: {}
- name: service_logs
  endpoint:
    path: /services/service-logs
    method: GET
    data_selector: logs
    params: {}
- name: options
  endpoint:
    path: /services/ps/options
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: service_logs
  endpoint:
    path: /services/service-logs
    method: GET
    data_selector: logs
    params: {}
- name: mongo_express
  endpoint:
    path: /mongo-express
    method: GET
    data_selector: storage_object
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: services_promote
  endpoint:
    path: /services/promote
    method: POST
- name: Social & Networking
  endpoint:
    path: /docs/social-networking
    method: GET
    data_selector: records
    params: {}
- name: Business Intelligence
  endpoint:
    path: /docs/business-intelligence
    method: GET
    data_selector: records
    params: {}
- name: Developer Tools
  endpoint:
    path: /docs/unity-toolbox
    method: GET
    data_selector: records
    params: {}
- name: Integrations
  endpoint:
    path: /docs/integrating-webgl
    method: GET
    data_selector: records
    params: {}
- name: Marketplace
  endpoint:
    path: /docs/marketplace
    method: GET
    data_selector: records
    params: {}
- name: Portal
  endpoint:
    path: /docs/portal
    method: GET
    data_selector: records
    params: {}
- name: Game Content Designer
  endpoint:
    path: /docs/game-content-designer
    method: GET
    data_selector: records
    params: {}
- name: Samples
  endpoint:
    path: /docs/samples
    method: GET
    data_selector: records
    params: {}
- name: Migration
  endpoint:
    path: /docs/migration
    method: GET
    data_selector: records
    params: {}
- name: Learning
  endpoint:
    path: /docs/learning-fundamentals
    method: GET
    data_selector: records
    params: {}
- name: Appendix
  endpoint:
    path: /docs/appendix
    method: GET
    data_selector: records
    params: {}
- name: add_unity_project
  endpoint:
    path: /project/add-unity-project
    method: POST
    data_selector: response
    params:
      path: <path>
- name: services
  endpoint:
    path: /services/register
    method: POST
    data_selector: service
    params: {}
- name: swagger_page
  endpoint:
    path: /docs/social-networking
    method: GET
    data_selector: swagger
- name: content_pull
  endpoint:
    path: /content/pull
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: service_modify
  endpoint:
    path: /services/modify
    method: POST
    data_selector: services
    params: {}
- name: content_status
  endpoint:
    path: /content/status
    method: GET
    data_selector: status
    params: {}
- name: content_status
  endpoint:
    path: /content/status
    method: GET
- name: template_types
  endpoint:
    path: /services/templates
    method: GET
    data_selector: templates
    params: {}
- name: templates
  endpoint:
    path: /services/templates
    method: GET
    data_selector: templates
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: generate_ignore_file
  endpoint:
    path: /project/generate-ignore-file
    method: POST
- name: get_connection_string
  endpoint:
    path: /services/get-connection-string
    method: GET
    data_selector: connection_string
- name: beam_project_update
  endpoint:
    path: /project/update-unity-beam-package
    method: POST
- name: project_update
  endpoint:
    path: /project/update-unity-beam-package
    method: POST
    data_selector: results
    params: {}
- name: content_tag
  endpoint:
    path: /docs/content-tag
    method: GET
    data_selector: options
    params: {}
- name: remove_tag
  endpoint:
    path: /content/tag/rm
    method: POST
    data_selector: response
    params: {}
- name: Content Tag Remove
  endpoint:
    path: /cli/content/tag/rm
    method: POST
    data_selector: content
    params: {}
- name: content_tag_add
  endpoint:
    path: /beam/content/tag/add
    method: POST
- name: content_tag
  endpoint:
    path: /content/tag/add
    method: POST
    data_selector: results
- name: content_bulk_edit
  endpoint:
    path: /content/bulk-edit
    method: POST
    data_selector: results
- name: project_regenerate
  endpoint:
    path: /project/regenerate
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: player_notifications
  endpoint:
    path: /notifications/player
    method: GET
    data_selector: events
- name: player_notifications
  endpoint:
    path: /api/listen/player
    method: GET
    data_selector: notifications
- name: options
  endpoint:
    path: /docs/project-new-service/options
    method: GET
- name: options
  endpoint:
    path: /docs/cli-project-new-service/options
    method: GET
    data_selector: options
    params: {}
- name: realm_config
  endpoint:
    path: /api/realm/config
    method: POST
    data_selector: config
    params: {}
- name: player
  endpoint:
    path: /api/v1/player
    method: GET
    data_selector: data
    params: {}
- name: inventory
  endpoint:
    path: /api/v1/inventory
    method: GET
    data_selector: items
    params: {}
- name: microservices
  endpoint:
    path: /project/list
    method: GET
- name: common_lib_project
  endpoint:
    path: /project/new/common-lib
    method: POST
    data_selector: project
    params: {}
- name: services_reset_container
  endpoint:
    path: /services/reset/container
    method: POST
    data_selector: results
    params: {}
- name: generate_properties
  endpoint:
    path: /generate-properties
    method: POST
    data_selector: results
    params: {}
- name: player
  endpoint:
    path: /api/v2/player
    method: GET
    data_selector: players
    params: {}
- name: generate_properties
  endpoint:
    path: /beam/project/generate-properties
    method: POST
- name: federation_disable
  endpoint:
    path: /federation/disable
    method: POST
    data_selector: service
    params: {}
- name: federation
  endpoint:
    path: /federation/add
    method: POST
    data_selector: federation
    params: {}
- name: federation
  endpoint:
    path: /federation
    method: POST
- name: deployment_status
  endpoint:
    path: /deployment/status
    method: GET
    data_selector: status
    params: {}
- name: federation
  endpoint:
    path: /federation
    method: POST
- name: player
  endpoint:
    path: /portal/player
    method: GET
    data_selector: playerData
- name: service_groups
  endpoint:
    path: /api/service_groups
    method: GET
- name: player
  endpoint:
    path: /portal/player
    method: GET
- name: local_settings
  endpoint:
    path: /federation/local-settings
    method: GET
    data_selector: settings
    params: {}
- name: temp_clear_logs
  endpoint:
    path: /temp/clear/logs
    method: POST
    data_selector: logs
    params: {}
- name: federation_enable
  endpoint:
    path: /federation/enable
    method: POST
- name: project_storage
  endpoint:
    path: /cli/project/storage
    method: GET
    data_selector: options
    params: {}
- name: clear_temp_logs
  endpoint:
    path: /temp/clear/logs
    method: POST
    data_selector: logs
    params: {}
- name: Deployment Get
  endpoint:
    path: /deployment/get
    method: GET
- name: deployment
  endpoint:
    path: /deployment/get
    method: GET
    data_selector: deployment
    params: {}
- name: deployment_get
  endpoint:
    path: /deployment/get
    method: GET
- name: deployment
  endpoint:
    path: /deployment
    method: GET
    data_selector: deployment
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: manifest
  endpoint:
    path: /api/manifest
    method: GET
    data_selector: manifestData
- name: available_cli_servers
  endpoint:
    path: /docs/server-ps
    method: GET
- name: guest_token
  endpoint:
    path: /token/new-guest
    method: POST
    data_selector: token
    params: {}
- name: guest_token
  endpoint:
    path: /token/new-guest
    method: POST
- name: project_storage_erase
  endpoint:
    path: /project/storage/erase
    method: POST
- name: project_storage_erase
  endpoint:
    path: /project/storage/erase
    method: POST
- name: project_disable
  endpoint:
    path: /project/disable
    method: POST
- name: project_disable
  endpoint:
    path: /project/disable
    method: POST
- name: token_list
  endpoint:
    path: /api/token/list
    method: GET
    data_selector: tokens
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
    params: {}
- name: storage_snapshot
  endpoint:
    path: /project/storage/snapshot
    method: POST
    data_selector: snapshot
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
    params:
      id: --id
      offset: --offset
      length: --length
      cid: --cid
      pid: --pid
      dryrun: --dryrun
      quiet: --quiet
      host: --host
      access-token: --access-token
      refresh-token: --refresh-token
      log: --log
      no-redirect: --no-redirect
      prefer-remote-federation: --prefer-remote-federation
      unmask-logs: --unmask-logs
      no-log-file: --no-log-file
      docker-cli-path: --docker-cli-path
      emit-log-streams: --emit-log-streams
      add-project-path: --add-project-path
      dir: --dir
      raw: --raw
      pretty: --pretty
      dotnet-path: --dotnet-path
      version: --version
      help: --help
- name: project_storage_snapshot
  endpoint:
    path: /project/storage/snapshot
    method: POST
    data_selector: snapshot
    params:
      beamoId: string
- name: local_settings
  endpoint:
    path: /federation/local-settings
    method: GET
    data_selector: settings
- name: local_settings
  endpoint:
    path: /federation/local-settings
    method: GET
    data_selector: local_settings
- name: IFederatedGameServer
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
- name: remove_group
  endpoint:
    path: /project/group/rm
    method: POST
    data_selector: response
    params: {}
- name: docker_status
  endpoint:
    path: /services/docker/status
    method: GET
- name: remove_group
  endpoint:
    path: /project/group/rm
    method: POST
- name: local_settings
  endpoint:
    path: /federation/local-settings
    method: GET
    data_selector: settings
- name: options
  endpoint:
    path: /docs/project-enable/options
    method: GET
    data_selector: options
    params: {}
- name: sln_file
  endpoint:
    path: /docs/project-open
    method: GET
- name: project
  endpoint:
    path: /project/enable
    method: POST
    data_selector: data
- name: project_remove
  endpoint:
    path: /cli/project/remove
    method: POST
- name: restore
  endpoint:
    path: /unity/restore
    method: POST
- name: options
  endpoint:
    path: /docs/project-remove/options
    method: GET
    data_selector: options
    params: {}
- name: server_clear
  endpoint:
    path: /beam/server/clear
    method: POST
- name: Restore
  endpoint:
    path: /cli/unity/restore
    method: POST
    data_selector: options
- name: local_settings
  endpoint:
    path: /federation/local-settings
    method: POST
    data_selector: settings
- name: server_clear
  endpoint:
    path: /server/clear
    method: POST
- name: services
  endpoint:
    path: /services/build
    method: POST
- name: local_settings
  endpoint:
    path: /federation/local-settings
    method: POST
- name: project_storage_restore
  endpoint:
    path: /project/storage/restore
    method: POST
    data_selector: response
    params:
      beamoId: string
- name: project_group
  endpoint:
    path: /project/group/add
    method: POST
- name: local_settings
  endpoint:
    path: /federation/local-settings
    method: GET
- name: restore_storage_object
  endpoint:
    path: /project/storage/restore
    method: POST
    data_selector: restore_response
    params:
      beamoId: string
      merge: boolean
      input: string
      dryrun: boolean
      cid: string
      pid: string
      quiet: boolean
      host: string
      access-token: string
      refresh-token: string
      log: string
      no-redirect: boolean
      prefer-remote-federation: boolean
      unmask-logs: boolean
      no-log-file: boolean
      docker-cli-path: string
      emit-log-streams: boolean
      add-project-path: array
      dir: string
      raw: boolean
      pretty: boolean
      dotnet-path: string
      version: boolean
      help: boolean
- name: local_settings
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
- name: local-settings
  endpoint:
    path: /federation/local-settings
    method: GET
    data_selector: settings
- name: local_settings
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
    data_selector: settings
    params: {}
- name: IFederatedGameServer
  endpoint:
    path: /federation/local-settings/get
    method: GET
    data_selector: data
    params: {}
- name: local_settings
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
- name: local_settings
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
    data_selector: settings
- name: local_settings
  endpoint:
    path: /federation/local-settings/set
    method: GET
    data_selector: settings
    params: {}
- name: local_settings
  endpoint:
    path: /federation/local-settings
    method: GET
    data_selector: settings
    params:
      beamo-id: --beamo-id
      fed-id: --fed-id
      content-ids: --content-ids
      dryrun: --dryrun
      cid: --cid
      pid: --pid
      quiet: --quiet
      host: --host
      access-token: --access-token
      refresh-token: --refresh-token
      log: --log
      no-redirect: --no-redirect
      unmask-logs: --unmask-logs
      no-log-file: --no-log-file
      docker-cli-path: --docker-cli-path
      emit-log-streams: --emit-log-streams
      add-project-path: --add-project-path
      dir: --dir
      raw: --raw
      pretty: --pretty
      dotnet-path: --dotnet-path
      version: --version
      help: --help
- name: local_settings
  endpoint:
    path: /federation/local-settings/set/IFederatedGameServer
    method: GET
    data_selector: localSettings
- name: IFederatedGameServer
  endpoint:
    path: /Federation/Local-settings/Get/IFederatedGameServer
    method: GET
- name: IFederatedGameServer
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
    data_selector: local_settings
    params: {}
- name: local_settings
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
    data_selector: localSettings
- name: IFederatedGameServer
  endpoint:
    path: /federation/local-settings/get
    method: GET
- name: federation_local_settings_get
  endpoint:
    path: /cli/federation/local-settings/get
    method: GET
- name: IFederatedGameServer
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
- name: local_settings
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
- name: IFederatedGameServer
  endpoint:
    path: /federation/local-settings
    method: GET
- name: checks
  endpoint:
    path: /checks
    method: GET
- name: local_settings
  endpoint:
    path: /federation/local-settings/set
    method: GET
    data_selector: settings
    params: {}
- name: federation_local_settings
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
    data_selector: localSettings
    params: {}
- name: IFederatedGameServer
  endpoint:
    path: /federation/local-settings/get
    method: GET
- name: local_settings
  endpoint:
    path: /federation/local-settings/set
    method: GET
    data_selector: settings
    params: {}
- name: local_settings
  endpoint:
    path: /federation/local-settings/IFederatedGameServer
    method: GET
- name: local_settings
  endpoint:
    path: /federation/local-settings
    method: GET
    data_selector: localSettings
    params:
      beamo-id: string
      fed-id: string
      cid: string
      pid: string
      access-token: string
      refresh-token: string
- name: local_settings
  endpoint:
    path: /federation/local-settings
    method: GET
    data_selector: settings
- name: local_settings
  endpoint:
    path: /federation/local-settings
    method: GET
    data_selector: settings
    params: {}
- name: IFederatedGameServer
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: IFederatedGameServer
  endpoint:
    path: /federation/local-settings/get
    method: GET
- name: content_sync
  endpoint:
    path: /content/sync
    method: POST
    data_selector: results
- name: player
  endpoint:
    path: /v1/players
    method: GET
    data_selector: data
    params: {}
- name: content_save
  endpoint:
    path: /content/save
    method: POST
- name: content_save
  endpoint:
    path: /content/save
    method: POST
    data_selector: results
    params: {}
- name: Check if a local Grafana is running for the project
  endpoint:
    path: /grafana/ps
    method: GET
- name: collector_status
  endpoint:
    path: /collector/status
    method: GET
- name: realms
  endpoint:
    path: /org/realms
    method: GET
    data_selector: realms
    params: {}
- name: org_realms
  endpoint:
    path: /org/realms
    method: GET
    data_selector: realms
    params: {}
- name: collector
  endpoint:
    path: /collector/get
    method: GET
    data_selector: records
- name: collector
  endpoint:
    path: /cli-collector/get
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: options
  endpoint:
    path: /docs/content-resolve/options
    method: GET
    data_selector: options
- name: federated_game_server
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
- name: local_settings
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
    data_selector: settings
    params: {}
- name: local_settings
  endpoint:
    path: /federation/local-settings/set/IFederatedGameServer
    method: GET
    data_selector: settings
- name: local_settings
  endpoint:
    path: /federation/local-settings
    method: GET
    data_selector: settings
    params: {}
- name: local_settings
  endpoint:
    path: /federation/local-settings/set
    method: POST
    data_selector: settings
    params: {}
- name: local_settings
  endpoint:
    path: /federation/local-settings/set
    method: GET
    data_selector: settings
    params: {}
- name: local_settings
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
- name: IFederatedGameServer
  endpoint:
    path: /federation/local-settings/get/IFederatedGameServer
    method: GET
    data_selector: localSettings
    params: {}
- name: player
  endpoint:
    path: /services/data/vXX.X/sobjects/Player
    method: GET
    data_selector: records
    params: {}
- name: connection_configuration
  endpoint:
    path: /.beamable/connection-configuration.json
    method: GET
    data_selector: host
- name: dotnet_tools
  endpoint:
    path: /.config/dotnet-tools.json
    method: GET
    data_selector: tools.beamable.tools.version
- name: friends
  endpoint:
    path: /api/v1/friends
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: Microservices
  endpoint:
    path: /services/Microservices
    method: GET
- name: MicroStorages
  endpoint:
    path: /services/MicroStorages
    method: GET
- name: Common Libraries
  endpoint:
    path: /services/CommonLibraries
    method: GET
- name: connection-configuration
  endpoint:
    path: /.beamable/connection-configuration.json
    method: GET
- name: connection-auth
  endpoint:
    path: /.beamable/temp/connection-auth.json
    method: GET
- name: microservice
  endpoint:
    path: /services/microservice
    method: GET
    data_selector: records
    params: {}
- name: federations
  endpoint:
    path: /docs/federations
    method: GET
    data_selector: federations
- name: Service
  endpoint:
    path: /services~/Service
    method: GET
    data_selector: Service.cs
    params: {}
- name: player_stats
  endpoint:
    path: /api/v2/player/stats
    method: GET
    data_selector: data
    params: {}
- name: GetLootboxReward
  endpoint:
    path: /GetLootboxReward
    method: GET
    data_selector: records
    params: {}
- name: GetCommitDescription
  endpoint:
    path: /GetCommitDescription
    method: GET
    data_selector: records
    params: {}
- name: GetLootboxReward
  endpoint:
    path: /GetLootboxReward
    method: GET
    data_selector: rewards
    params: {}
- name: GetCommitDescription
  endpoint:
    path: /GetCommitDescription
    method: GET
    data_selector: commit
    params: {}
- name: UserDataStorage
  endpoint:
    path: /services/data/UserDataStorage
    method: GET
    data_selector: records
- name: UserDataService
  endpoint:
    path: /services/data/UserDataService
    method: GET
    data_selector: records
- name: TestStorage
  endpoint:
    path: /services/data/TestStorage
    method: GET
    data_selector: records
- name: UserDataStorage
  endpoint:
    path: /UserDataStorage
    method: GET
    data_selector: UserMessage
    params: {}
- name: UserDataService
  endpoint:
    path: /UserDataService
    method: POST
    data_selector: messages
    params: {}
- name: TestMicroservice
  endpoint:
    path: /TestMicroservice
    method: POST
    data_selector: TestDocument
    params: {}
- name: job_executions
  endpoint:
    path: /api/platform/jobs/executions
    method: GET
    data_selector: executions
- name: Job
  endpoint:
    path: /services/scheduler/jobs
    method: GET
    data_selector: Job
    params: {}
- name: scheduled_jobs
  endpoint:
    path: /api/platform/scheduled_jobs
    method: GET
    data_selector: jobs
- name: job_executions
  endpoint:
    path: /api/platform/job_executions
    method: GET
    data_selector: executions
- name: Job
  endpoint:
    path: /services/Scheduler/Job
    method: GET
    data_selector: Job
    params: {}
- name: DemoService
  endpoint:
    path: /DemoService
    method: POST
    data_selector: result
- name: content
  endpoint:
    path: /services/content
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
    params: {}
- name: analytics
  endpoint:
    path: /api/v1/analytics
    method: GET
    data_selector: records
    params: {}
- name: steam_auth_ticket
  endpoint:
    path: /basic/payments/steam/auth
    method: POST
- name: steam_auth_ticket
  endpoint:
    path: /basic/payments/steam/auth
    method: POST
    data_selector: EmptyResponse
- name: auth_token
  endpoint:
    path: /basic/auth/token
    method: POST
    data_selector: data
    params: {}
- name: account_me
  endpoint:
    path: /basic/accounts/me
    method: GET
    data_selector: accountData
    params: {}
- name: token
  endpoint:
    path: /basic/auth/token
    method: POST
    data_selector: access_token
    params:
      grant_type: password
- name: account_me
  endpoint:
    path: /basic/accounts/me
    method: GET
    data_selector: accountData
    params: {}
- name: Cloud Save
  endpoint:
    path: /cloud/save
    method: POST
    data_selector: manifest
- name: cloud_saving
  endpoint:
    path: /cloud-saving
    method: GET
    data_selector: data
    params: {}
- name: cloud_save
  endpoint:
    path: /cloud/save
    method: POST
    data_selector: manifest
    params: {}
- name: cloud_saving_service
  endpoint:
    path: /cloud-saving
    method: GET
    data_selector: data
    params: {}
- name: CloudSavingService
  endpoint:
    path: /cloud-saving
    method: POST
    data_selector: manifest
    params: {}
- name: CloudSavingService
  endpoint:
    path: /services/cloudSaving
    method: GET
    data_selector: data
    params: {}
- name: Content Management
  endpoint:
    path: /docs/content-feature-overview
    method: GET
    data_selector: Content
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: content_item
  endpoint:
    path: /api/content/item
    method: GET
    data_selector: content
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: records
- name: Item
  endpoint:
    path: /docs/content/item
    method: POST
    data_selector: content
    params: {}
- name: Armor
  endpoint:
    path: /docs/content/armor
    method: POST
    data_selector: content
    params: {}
- name: Item
  endpoint:
    path: /content/item
    method: POST
    data_selector: data
    params: {}
- name: Armor
  endpoint:
    path: /content/armor
    method: POST
    data_selector: data
    params: {}
- name: ContentObject
  endpoint:
    path: /docs/content-object
    method: GET
    data_selector: ContentObject
- name: ValidationAttribute
  endpoint:
    path: /docs/validation-attribute
    method: GET
    data_selector: ValidationAttribute
- name: content
  endpoint:
    path: /docs/content-feature-overview
    method: GET
    data_selector: content
    params: {}
- name: ContentObject
  endpoint:
    path: /docs/content-object
    method: GET
    data_selector: ContentObject
    params: {}
- name: ValidationAttribute
  endpoint:
    path: /docs/validation-attribute
    method: GET
    data_selector: ValidationAttribute
    params: {}
- name: Content Filtering
  endpoint:
    path: /docs/content-filtering
    method: GET
    data_selector: Content Filter Strings
    params: {}
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: data
    params: {}
- name: stats
  endpoint:
    path: /api/stats
    method: POST
    data_selector: results
    params: {}
- name: stats
  endpoint:
    path: /api/stats
    method: GET
    data_selector: stats
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: custom_stats
  endpoint:
    path: /stats/custom
    method: POST
    data_selector: customStats
- name: built_in_stats
  endpoint:
    path: /stats/built-in
    method: GET
    data_selector: builtInStats
- name: inventory_items
  endpoint:
    path: /inventory/items
    method: GET
    data_selector: items
- name: add_item
  endpoint:
    path: /inventory/add
    method: POST
    data_selector: result
- name: delete_item
  endpoint:
    path: /inventory/delete
    method: DELETE
    data_selector: result
- name: player_stats
  endpoint:
    path: /api/v1/stats/player
    method: GET
    data_selector: data
    params: {}
- name: federated_inventory
  endpoint:
    path: /federated/inventory
    method: GET
    data_selector: inventoryItems
- name: SetStats
  endpoint:
    path: /api/stats/set
    method: POST
    data_selector: setStats
    params: {}
- name: GetStats
  endpoint:
    path: /api/stats/get
    method: GET
    data_selector: getStats
    params: {}
- name: SetStats
  endpoint:
    path: /api/stats/set
    method: POST
    data_selector: results
- name: GetStats
  endpoint:
    path: /api/stats/get
    method: GET
    data_selector: results
- name: deprecated_items
  endpoint:
    path: /inventory/deprecated-items
    method: GET
    data_selector: items
    params: {}
- name: InventoryService
  endpoint:
    path: /api/inventory
    method: GET
    data_selector: items
    params: {}
- name: ContentService
  endpoint:
    path: /api/content
    method: GET
    data_selector: contentItems
    params: {}
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: records
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: records
- name: inventory_items
  endpoint:
    path: /inventory/items
    method: GET
    data_selector: items
- name: store
  endpoint:
    path: /stores
    method: GET
    data_selector: stores
    params: {}
- name: purchase
  endpoint:
    path: /api/commerce/purchase
    method: POST
    data_selector: result
    params: {}
- name: inventory
  endpoint:
    path: /api/inventory/current
    method: GET
    data_selector: items
    params: {}
- name: purchase
  endpoint:
    path: /commerce/purchase
    method: POST
- name: TrackPurchase
  endpoint:
    path: /Api/PaymentService/Track
    method: POST
    data_selector: trackRequest
- name: stores
  endpoint:
    path: /stores
    method: GET
- name: products
  endpoint:
    path: /monetize/products/in-app
    method: GET
    data_selector: products
    params: {}
- name: Currencies
  endpoint:
    path: /docs/content-manager-overview
    method: GET
    data_selector: currencies
    params: {}
- name: IBeamablePurchaser
  endpoint:
    path: /docs/stores-custom-purchaser
    method: GET
    data_selector: API highlights
    params: {}
- name: beamableAPI.PaymentService
  endpoint:
    path: https://csharp.cdocs.beamable.com/latest/classBeamable_1_1Api_1_1Payments_1_1PaymentService.html
    method: GET
    data_selector: API highlights
    params: {}
- name: InventoryService
  endpoint:
    path: /api/inventory
    method: POST
    data_selector: operations
    params: {}
- name: announcements
  endpoint:
    path: /docs/announcements-prefab
    method: GET
    data_selector: details
- name: payment_audits
  endpoint:
    path: /services/data/vXX.X/sobjects/PaymentAudit
    method: POST
    data_selector: records
    params:
      namespace: payments
      client_audits: true
- name: products
  endpoint:
    path: /monetize/products/in-app-products
    method: GET
    data_selector: products
- name: Player Currencies
  endpoint:
    path: /docs/virtual-currency-code
    method: GET
    data_selector: currencies
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: data
    params: {}
- name: InventoryService
  endpoint:
    path: /api/inventory
    method: POST
    data_selector: operations
    params: {}
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: running
    params: {}
- name: Announcements
  endpoint:
    path: /docs/announcements
    method: GET
    data_selector: content
    params: {}
- name: announcements
  endpoint:
    path: /docs/announcements-prefab
    method: GET
    data_selector: details
- name: announcements
  endpoint:
    path: /api/announcements/current
    method: GET
    data_selector: announcements
    params: {}
- name: event
  endpoint:
    path: /events
    method: POST
    data_selector: eventData
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: running
    params: {}
- name: announcements
  endpoint:
    path: /announcements
    method: GET
    data_selector: content_objects
- name: announcements
  endpoint:
    path: /api/announcements/current
    method: GET
    data_selector: announcements
- name: MailMessage
  endpoint:
    path: /api/mail/messages
    method: GET
    data_selector: MailMessage
    params: {}
- name: Notifications
  endpoint:
    path: /notifications
    method: POST
- name: mail
  endpoint:
    path: /mail
    method: GET
    data_selector: messages
- name: NotificationsService
  endpoint:
    path: /notifications
    method: POST
    data_selector: notifications
- name: MailMessage
  endpoint:
    path: /api/mail/message
    method: GET
    data_selector: result
    params: {}
- name: SendMail
  endpoint:
    path: /api/mail/send
    method: POST
    data_selector: result
    params: {}
- name: UpdateMail
  endpoint:
    path: /api/mail/update
    method: PUT
    data_selector: result
    params: {}
- name: messages
  endpoint:
    path: /mail/messages
    method: GET
    data_selector: messages
    params: {}
- name: Chat
  endpoint:
    path: /docs/chat-feature-overview
    method: GET
- name: Connectivity
  endpoint:
    path: /docs/connectivity-feature-overview
    method: GET
- name: Groups
  endpoint:
    path: /docs/groups-feature-overview
    method: GET
- name: Leaderboards
  endpoint:
    path: /docs/leaderboards-feature-overview
    method: GET
- name: Matchmaking
  endpoint:
    path: /docs/matchmaking-feature-overview
    method: GET
- name: Multiplayer
  endpoint:
    path: /docs/multiplayer-feature-overview
    method: GET
- name: Tournaments
  endpoint:
    path: /docs/tournaments-feature-overview
    method: GET
- name: campaigns
  endpoint:
    path: /docs/campaigns
    method: GET
    data_selector: records
- name: stats
  endpoint:
    path: /docs/stats
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: connectivity_service
  endpoint:
    path: /ping
    method: GET
    data_selector: HasConnectivity
- name: ChatService
  endpoint:
    path: /api/chat
    method: POST
    data_selector: messages
- name: connectivity_service
  endpoint:
    path: /api/connectivity/status
    method: GET
    data_selector: status
    params: {}
- name: friends_feature
  endpoint:
    path: /friends
    method: GET
    data_selector: friends
    params: {}
- name: PlayerSocial
  endpoint:
    path: /api/social/player
    method: GET
    data_selector: PlayerSocial
    params: {}
- name: friends
  endpoint:
    path: /friends
    method: GET
    data_selector: friendsList
- name: CreateGroup
  endpoint:
    path: /api/groups/create
    method: POST
    data_selector: response
    params: {}
- name: JoinGroup
  endpoint:
    path: /api/groups/join
    method: POST
    data_selector: response
    params: {}
- name: LeaveGroup
  endpoint:
    path: /api/groups/leave
    method: POST
    data_selector: response
    params: {}
- name: GetCurrentGroups
  endpoint:
    path: /api/groups/current
    method: GET
    data_selector: response
    params: {}
- name: MakeDonationRequest
  endpoint:
    path: /api/groups/donate/request
    method: POST
    data_selector: response
    params: {}
- name: Donate
  endpoint:
    path: /api/groups/donate
    method: POST
    data_selector: response
    params: {}
- name: PlayerSocial
  endpoint:
    path: /api/social/friends
    method: GET
    data_selector: friends
    params: {}
- name: BlockedPlayers
  endpoint:
    path: /api/social/blocked
    method: GET
    data_selector: blocked
    params: {}
- name: SentInvites
  endpoint:
    path: /api/social/sent-invites
    method: GET
    data_selector: sentInvites
    params: {}
- name: ReceivedInvites
  endpoint:
    path: /api/social/received-invites
    method: GET
    data_selector: receivedInvites
    params: {}
- name: groups
  endpoint:
    path: /docs/groups-feature-overview
    method: GET
- name: Leaderboard
  endpoint:
    path: /leaderboard
    method: GET
    data_selector: rankings
- name: Group
  endpoint:
    path: /groups
    method: POST
    data_selector: group
    params: {}
- name: MatchmakingService
  endpoint:
    path: /matchmaking
    method: POST
    data_selector: match
    params: {}
- name: SimGameType
  endpoint:
    path: /docs/matchmaking-guide#setup-content
    method: GET
    data_selector: content
- name: MatchmakingService
  endpoint:
    path: /api/matchmaking
    method: POST
    data_selector: result
    params: {}
- name: Leaderboard
  endpoint:
    path: /leaderboard
    method: GET
    data_selector: rankings
    params:
      from: 0
      max: 100
- name: Matchmaking
  endpoint:
    path: /docs/matchmaking-feature-overview
    method: GET
- name: SimGameType
  endpoint:
    path: /docs/matchmaking-guide#setup-content
    method: GET
    data_selector: parameters
    params: {}
- name: start_matchmaking
  endpoint:
    path: /matchmaking/start
    method: POST
- name: cancel_matchmaking
  endpoint:
    path: /matchmaking/cancel
    method: POST
- name: Create Multiplayer Session
  endpoint:
    path: /multiplayer/session
    method: POST
    data_selector: sessionData
- name: Create Custom Event
  endpoint:
    path: /multiplayer/event
    method: POST
    data_selector: eventData
- name: Subscribe To Event
  endpoint:
    path: /multiplayer/event/subscribe
    method: POST
    data_selector: subscriptionData
- name: Send Event
  endpoint:
    path: /multiplayer/event/send
    method: POST
    data_selector: sendData
- name: Handle Event
  endpoint:
    path: /multiplayer/event/handle
    method: POST
    data_selector: handleData
- name: multiplayer
  endpoint:
    path: /docs/multiplayer-feature-overview
    method: GET
    data_selector: features
    params: {}
- name: matchmaking
  endpoint:
    path: /docs/matchmaking-feature-overview
    method: GET
    data_selector: features
    params: {}
- name: parties
  endpoint:
    path: /docs/parties-code
    method: GET
- name: party
  endpoint:
    path: /api/parties
    method: POST
    data_selector: party
    params: {}
- name: lobby
  endpoint:
    path: /lobbies
    method: POST
    data_selector: lobbies
    params: {}
- name: Create Lobby
  endpoint:
    path: /lobbies/create
    method: POST
    data_selector: results
- name: Update Lobby
  endpoint:
    path: /lobbies/update
    method: POST
    data_selector: results
- name: Find Lobbies
  endpoint:
    path: /lobbies/find
    method: GET
    data_selector: results
- name: Join Lobby
  endpoint:
    path: /lobbies/join
    method: POST
    data_selector: results
- name: Join Lobby By Passcode
  endpoint:
    path: /lobbies/join/by-passcode
    method: POST
    data_selector: results
- name: Kick Player
  endpoint:
    path: /lobbies/kick
    method: POST
    data_selector: results
- name: Leave Lobby
  endpoint:
    path: /lobbies/leave
    method: POST
    data_selector: results
- name: party
  endpoint:
    path: /parties
    method: POST
    data_selector: party
    params:
      maxSize: 25
- name: Get Tournaments
  endpoint:
    path: /api/tournaments
    method: GET
    data_selector: tournaments
- name: Join Tournament
  endpoint:
    path: /api/tournaments/join
    method: POST
    data_selector: result
- name: Set Score
  endpoint:
    path: /api/tournaments/set_score
    method: POST
    data_selector: result
- name: lobbies
  endpoint:
    path: /lobbies
    method: POST
    data_selector: lobby
    params:
      name: lobby_name
      restriction_type: Open or Closed
      gameTypeId: game_type_id
- name: update_lobby
  endpoint:
    path: /lobbies/{lobbyId}
    method: PUT
    data_selector: lobby
    params:
      lobbyId: lobby_id
- name: join_lobby
  endpoint:
    path: /lobbies/join
    method: POST
    data_selector: lobby
    params:
      lobbyId: lobby_id
      passcode: passcode_if_closed
- name: Create Lobby
  endpoint:
    path: /lobbies/create
    method: POST
    data_selector: result
- name: Update Lobby
  endpoint:
    path: /lobbies/update
    method: POST
    data_selector: result
- name: Find Lobbies
  endpoint:
    path: /lobbies/find
    method: GET
    data_selector: results
- name: Join Lobby
  endpoint:
    path: /lobbies/join
    method: POST
    data_selector: result
- name: Join Lobby By Passcode
  endpoint:
    path: /lobbies/joinByPasscode
    method: POST
    data_selector: result
- name: Kick Player
  endpoint:
    path: /lobbies/kickPlayer
    method: POST
    data_selector: result
- name: Leave Lobby
  endpoint:
    path: /lobbies/leave
    method: POST
    data_selector: result
- name: analytics_event
  endpoint:
    path: /api/analytics/event
    method: POST
    data_selector: eventData
- name: tournaments
  endpoint:
    path: /tournaments
    method: GET
    data_selector: tournaments
- name: join_tournament
  endpoint:
    path: /tournaments/join
    method: POST
    data_selector: joinResponse
- name: set_score
  endpoint:
    path: /tournaments/setScore
    method: POST
    data_selector: setScoreResponse
- name: platform_session_session
  endpoint:
    path: /platform_session_session
    method: GET
    data_selector: '*'
- name: platform_session_session_end
  endpoint:
    path: /platform_session_session_end
    method: GET
    data_selector: '*'
- name: platform_session_install
  endpoint:
    path: /platform_session_install
    method: GET
    data_selector: '*'
- name: MAU_DAU_Average_Session_Length
  endpoint:
    path: /analytics/mau_dau_average_session_length
    method: GET
    data_selector: records
    params: {}
- name: 30_Day_Retention_Cohort
  endpoint:
    path: /analytics/30_day_retention_cohort
    method: GET
    data_selector: records
    params: {}
- name: Monthly_Players_Spending
  endpoint:
    path: /analytics/monthly_players_spending
    method: GET
    data_selector: records
    params: {}
- name: 30_Day_Daily_Spending_Report
  endpoint:
    path: /analytics/30_day_daily_spending_report
    method: GET
    data_selector: records
    params: {}
- name: analytics_event
  endpoint:
    path: /analytics/event
    method: POST
    data_selector: event
    params: {}
- name: cohort_creation
  endpoint:
    path: /docs/segmentation-feature-overview
    method: GET
    data_selector: cohort_creation
    params: {}
- name: upload_csv
  endpoint:
    path: /docs/segmentation-guide
    method: GET
    data_selector: upload_csv
    params: {}
- name: custom_segmentation
  endpoint:
    path: /docs/analytics-feature-overview
    method: GET
    data_selector: custom_segmentation
    params: {}
- name: platform_session_session
  endpoint:
    path: /platform_session_session
    method: GET
    data_selector: '*'
    params:
      limit: 10
- name: information_schema
  endpoint:
    path: /information_schema/columns
    method: GET
    data_selector: columns
    params:
      table_schema: '[your de_ID goes here]'
      table_name: platform_session_session
- name: available_tables
  endpoint:
    path: /information_schema/columns
    method: GET
    data_selector: table_name
    params:
      table_schema: '[your de_ID goes here]'
- name: MAU_DAU_Average_Session_Length
  endpoint:
    path: /analytics/mau_dau_average_session_length
    method: GET
    data_selector: metrics
    params: {}
- name: 30_Day_Retention_Cohort
  endpoint:
    path: /analytics/30_day_retention_cohort
    method: GET
    data_selector: cohort
    params: {}
- name: Monthly_Players_Spending
  endpoint:
    path: /analytics/monthly_players_spending
    method: GET
    data_selector: revenue
    params: {}
- name: 30_Day_Daily_Spending_Report
  endpoint:
    path: /analytics/30_day_daily_spending_report
    method: GET
    data_selector: daily_spending
    params: {}
- name: cohorts
  endpoint:
    path: /docs/segmentation-guide
    method: GET
    data_selector: cohorts
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Requires setup of connected app in Beamable
- Some objects like Contact may return nulls in deeply nested fields
- Beamable requires a license before downloading, installing, or using.
- Starting with the Unity 2.1.0 SDK, Beamable requires that you have dotnet 8.0.302
  installed on your machine.
- No support during days Beamable dictates as limited or blackout days.
- Beamable requires a license before installation.
- Emergency coverage is defined as critical, verifiable outages and API failures.
- Beamable is available free for development, but you agree to a commercial agreement
  when you ship your game
- Sometimes copy/paste operations into Beamable text fields can carry hidden characters.
  If you are getting an error with copy/paste, try to manually type the desired value
- A Beamable license is required before completing the setup process.
- Game makers with existing Beamable projects which are using the legacy Beamable
  API are encouraged to migrate to the Beamable Player-Centric API
- The Beamable SDK has a global IDependencyBuilder available via Beam.DependencyBuilder.
- The RegisterBeamableDependencies takes two arguments, order, and origin that control
  which dependency scope is being configured, and in what order.
- BeamContext API calls will fail if it is stopped in the middle of an async method
  and will throw an exception. It must be started for these calls to work.
- The Beamable SDK uses a dependency injection approach to organize code layers and
  services.
- Transient services do not use IBeamableDisposable
- Some objects may return nulls in deeply nested fields
- Do not store critical state in memory
- Lightbeams are Unity Package Samples designed to teach you various parts of the
  Beamable SDK.
- Most of the samples will have an entry point method in the HomePage class.
- Most Beamable APIs require user authorization.
- Some Beamable APIs do not require user authorization.
- This sample will allow you create multiple accounts, optionally attach email & password
  credentials, and configure the accounts' alias and avatar.
- The SDK's source code is entirely available and modifiable inside your project by
  you
- The SDK keeps itself as simple as possible, providing extension points and documentation.
- The SDK is careful about assumptions it makes.
- Blueprint and C++ Code Parity
- Beamable requires internet connectivity to offer its full suite of benefits.
- If the game client loses connectivity, the heartbeat will stop and the Beamable
  API will gracefully wait for reconnection.
- Frictionless Authentication is turned on by default for easier testing.
- Dedicated Servers use a different form of authentication.
- OAuth2 authentication is required.
- The SDK's source code is entirely available and modifiable inside your project by
  you.
- In case you modify the SDK's source code, we cannot guarantee that its features
  will work.
- Blueprint and C++ Code Parity.
- List the running status of local services not running in docker
- Uses OAuth2 with refresh token.
- Ensure proper API permissions are set.
- A Refresh Token to use for the requests. It overwrites the logged in user stored
  in connection-auth.json for THIS INVOCATION ONLY
- Commands that allow interacting with microservices in Beamable project
- Requires setup of connected app in api
- The access token to use for the requests overwrites the logged in user stored in
  connection-auth.json for THIS INVOCATION ONLY.
- A Refresh Token to use for the requests overwrites the logged in user stored in
  connection-auth.json for THIS INVOCATION ONLY.
- Fetch the current account
- Run services locally in Docker. Will fail if no docker instance is running in the
  local machine
- Access tokens are short lived and will need to be refreshed periodically.
- Commands that allows creating new Beamable services
- Any API request sent to Beamable needs an Authorization header with a bearer token
  using the Beamable access token.
- These tokens are short lived and will need to be refreshed periodically.
- Commands that integrate the Beamable API and open API
- This option defines the target Beamable environment. Needed for private cloud customers
  to target their exclusive Beamable environment.
- This API requires authentication via access token.
- Modifies a new service into the local manifest
- Gets the docker registry URL that we upload docker images into when deploying services
  remotely for this realm
- The access token to use for the requests overwrites the logged in user for this
  invocation only.
- A Refresh Token can be used for the requests which overwrites the logged in user
  for this invocation only.
- Updates or adds Beamable packages to Unity project
- Uses OAuth2 with refresh token — requires setup of connected app in Beamable
- Some API calls may be rate limited
- When using the access token, it overwrites the logged in user stored in connection-auth.json
  for this invocation only.
- When using the refresh token, it overwrites the logged in user stored in connection-auth.json
  for this invocation only.
- Adds tag to content
- Run as much of the command as possible without making any network calls
- The access token to use for the requests overwrites the logged in user stored in
  connection-auth.json.
- When true, the command will run forever and watch the state of the program
- Get current realm config values
- This command is meant only as a diagnostic tool, and does not have robust connection
  recovery logic.
- Commands that lists Beamable package versions of a SAMS projects
- The command only works if the realm is configured to use Beamable Notifications.
- Requires OAuth2 authentication for accessing the API
- With this flag, we restart any running services. Without it, we skip running services
- With this flag, the service will run in the background after it has reached basic
  startup
- The command only works if the realm is configured to use Beamable Notifications,
  which is the default setting for new realms as of July 2023.
- Currently, a docker path has been automatically identified.
- Requires setup of connected app in beamable
- Requires OAuth2 authentication setup.
- Requires configuration of Beamable services.
- OAuth2 is required for all API calls.
- Ensure that the client ID and secret are kept safe.
- Generates a Directory.Build.props file with the beam path and solution dir
- The access token to use for the requests. It overwrites the logged in user stored
  in connection-auth.json for THIS INVOCATION ONLY.
- A Refresh Token to use for the requests. It overwrites the logged in user stored
  in connection-auth.json for THIS INVOCATION ONLY.
- Set all federations for a particular service
- Requires OAuth2 authentication with a connected app configuration.
- Adds a federation to a particular microservice
- Open portal to a player page
- Perform a release, this will modify remote running services
- Enable an active federation without stopping a service
- Only clear logs older than a given value.
- Includes archived (removed) services if specified
- Can output to a file if --to-file is provided
- Some features may require additional configuration.
- This command allows you to get a specific deployment.
- For private cloud customers to target their exclusive Beamable environment.
- Read local file state and show your local manifest information
- This modifies the BeamEnabled setting in the given project files
- Some endpoints may return nulls in deeply nested fields
- Access token and refresh token options are available for requests.
- This command is used to create a snapshot of a local Storage Object.
- This command normally only works for an access token. However, if this option is
  enabled and a refresh token is given, then it will be automatically converted to
  the access token and this command is rerun
- The Beamo ID for the microservice whose federation you want to configure
- The Federation ID for the federation instance you want to configure
- This command normally only works for an access token. However, if --resolve is enabled
  and a refresh token is given, then it will be automatically converted to the access
  token and this command is rerun.
- Check if docker is running and available to the CLI
- Run as much of the command as possible without making any network calls with --dryrun
  option.
- Only return the links to download docker, but do not start
- If there is a local dotnet tool installation (with a ./config/dotnet-tools.json
  file) for the beam tool, then any global invocation of the beam tool will automatically
  redirect and call the local version.
- By default, any local CLI invocation that should trigger a Federation of any type
  will prefer locally running Microservices.
- By default, logs will automatically mask tokens.
- By default, logs are automatically written to a temp file so that they can be used
  in an error case.
- Enables a project. This modifies the BeamEnabled setting in the given project files.
- This command kills a running server instance.
- This command sets the local settings for any particular federation.
- This command is used to kill a running server instance.
- Sets the local settings for any particular federation
- When true, merges the snapshot into the existing data
- This option defines the target Beamable environment
- Commands for managing docker
- The Beamo ID for the microservice whose federation you want to configure is required.
- Run this ONLY when inside the root of the UnrealSDK repo to configure it as a particular
  sample
- Scan the workspace for known issues
- This command retrieves local settings for the Beamable.Common.IFederatedGameServer
  local routing key.
- Stop the locally running Grafana
- The access token can be overridden for this invocation only.
- When using the collector, specify the access token or refresh token for the requests.
- Synchronizes the local content matching the filters to the latest content stored
  in the realm
- Requires setup of connected app in Beamable.
- This command is not meant for manual usage. It is meant for engine integrations
  and CI/CD content enforcing use-cases.
- Check if a local Grafana is running for the project
- This command checks if a local Grafana is running for the project.
- The access token to use for the requests overwrites the logged in user stored in
  connection-auth.json for this invocation only.
- This option defines the target Beamable environment. Needed for private cloud customers
  to target their exclusive Beamable environment. Ignorable by everyone else.
- The access token to use for the requests. It overwrites the logged in user stored
  in connection-auth.json for THIS INVOCATION ONLY
- By default, any local CLI invocation that should trigger a Federation of any type
  will prefer locally running Microservices. However, if you need the CLI to use the
  remotely running Microservices, use this option to ignore locally running services.
- By default, logs will automatically mask tokens. However, when this option is enabled,
  tokens will be visible in their full text. This is a security risk.
- By default, logs are automatically written to a temp file so that they can be used
  in an error case. However, when this option is enabled, logs are not written.
- Collector Stop
- Collector Get
- Downloads the otel collector
- Allows access to a local Grafana instance
- Allows access to otel collector related commands
- Resolve between local changes ore realm based changes
- Opens a local Grafana installation to inspect telemetry data
- The Federation ID for the federation instance you want to configure is required.
- The access token to use for the requests can overwrite the logged in user.
- The Beam CLI uses a `./beamable` folder to manage state between multiple invocations
  of `beam` commands.
- Everytime you execute a `beam` command, it searches for the nearest `./beamable`
  folder in the parent lineage of your current directory.
- Make sure that the version in Dockerfile matches the .net version in the .csproj
  file.
- Some responses may contain null values in optional fields
- Don't update netstandard2.1 to net8.0
- When the Storage Object is running locally in Docker, these volume names are used
  to persist data between container restart events.
- The .config folder under each Microservice folder should be deleted.
- If your Microservice is referencing a Storage object, you must have Docker running;
  otherwise the Microservice will not start correctly.
- Commands for monitoring websocket events are meant as diagnostic tools and should
  not be used as critical components in a game's architecture.
- The .beamable folder structure changes between the major versions 1, and 2.
- Remove the .config folder under each Microservice folder.
- Commands for monitoring websocket events are for diagnostic purposes and should
  not be used as critical components.
- Standalone Microservices require a .beamable workspace
- Ensure only one class is marked as a Microservice in your project
- Classes that uses the attribute [BeamGenerateSchema] cannot be declared as nested
  type because the Source Generator Cannot handle it.
- Microservices IDs must match the <BeamID> property on csproj.
- Deploying services is a two-step process.
- Every service running on Beamable Cloud may increase your Beamable Bill. Disable
  your services to reduce your monthly bill.
- Beamable Cloud requires that all services are built to x64 CPU architectures.
- 'A quick-note: we highly recommend you delete services from your repository instead
  of enabling/disabling them in most cases.'
- OAuth2 requires setup of connected app in Beamable.
- Services may increase your Beamable Bill. Disable your services to reduce your monthly
  bill.
- If you are on a Mac with the apple silicon processors (M1, M2, etc) the following
  error might occur when deploying C# Microservices. In that case, make sure that
  the Use Rosetta for emulation on Apple Silicon is disabled in your Docker settings.
- These args are provided by the Beam CLI
- Beamable may inject custom settings into this Dockerfile. Please do not remove these
  lines.
- If you are on a Mac with the apple silicon processors (M1, M2, etc) the following
  error might occur when deploying C# Microservices. In that case, make sure that
  the `Use Rosetta for emulation on Apple Silicon` is disabled in your Docker settings.
- The Beam CLI no longer supports hot reload natively. It was supported in 2.0.1,
  but due to technical limitations, support was removed in 3.0.0.
- Beamable Standalone Microservices run as vanilla dotnet processes on your machine.
- The Beam CLI no longer supports hot reload natively. It was supported in 2.0.1,
  but due to technical limitations, support was removed in 3.0.0
- All Microservices must have the value, 'service'
- When 'true', this will auto-generate client code to any linked unity projects
- Authorization header is optional but recommended for account information.
- Authorization header is optional but recommended for account info.
- A Microservice may run locally on a developer's machine, and it may run remotely
  deployed to the Beamable Cloud.
- Beamable will host and manage a database on your behalf when you deploy your project.
- Locally, the Beam CLI creates a local mongo database inside a Docker container.
- A Storage Object is a Mongo database.
- Microservice Federation can inject custom server logic into Beamable's framework.
- Make sure you have the source generator!
- The compile error that ensures the federations.json file is in-sync with the C#
  code comes from a custom source generator.
- You can confirm you have everything installed checking the versions of the tools.
- Projects will be created in the /services directory by default.
- Microservices can be run using the IDE, dotnet commands directly, or beam commands.
- Standalone Microservice projects can be distributed as Unity Package Manager (UPM)
  packages.
- Ensure that the Unity project is referencing Beamable's packages. At least Beamable
  version com.beamable and com.beamable.server 2.1.3 is required.
- The Beam CLI uses an informational level of logging.
- Requires installation of dotnet 8 and Docker for publishing services.
- Dotnet and Docker Dependency required for development.
- Best practice to ensure loops will always terminate.
- Custom HttpClient Implementation is supported.
- Custom Microservices extend the Beamable Microservice class.
- Use of Beamable's custom Serialization is required.
- Microstorages are mongo databases that integrate seamlessly with Beamable Microservices.
- Scheduled jobs can be microservice Callable invocations, HTTP calls, or generalized
  Beamable message bus events.
- A Job may be canceled at any time.
- A Job may be modified to have different triggers, actions, or metadata.
- Each job has a retry policy that allows for 1 retry by default.
- Be careful running local Microservices on production realms!
- A Job may be canceled at any time. However, if there is an ongoing execution of
  the Job, it will not be cut short.
- Service names must follow conventional variable naming
- Client code generation should happen automatically any time the Microservice is
  built.
- 'The generated client code will be put in the following path in your Unity Project:
  /Assets/Beamable/Autogenerated/Microservices.'
- Microservices are published as a single atomic unit, instead of individually.
- Authenticate users and manage accounts for your game
- Authentication is often tricky and has more edge cases than one normally thinks
  about
- Beamable’s SDK provides frictionless authentication by default when the SDK is initialized.
- Simple code-only authentication is done automatically when the SDK is initialized.
- Not all games require authentication to be visible to get into the game.
- Common practice to have frictionless login.
- By default, Beamable’s SDK always ensures there is a player token loaded, which
  means you will always have a unique user account that is anonymous.
- Simple code-only authentication does not provide cross-platform support.
- Simple code-only authentication does not provide any cross-platform support.
- Username and Password authentication is supported.
- Using a custom username and password feature in your game does require some additional
  work and considerations.
- You will have to create multiple screens for sign-up, auto sign-in, password recovery,
  and error handling.
- Be sure to properly handle errors that may come from AddEmail.
- If login fails, you will get an error which you must handle appropriately.
- You will still need to follow some Prerequisites, Configure Unity Project & Configure
  Beamable steps from the Facebook Sign-In - Guide.
- You will need to implement Facebook SDK and listen for the callback with the Login
  Result.
- These are all the pieces that you need to successfully implement Facebook Sign-In.
- By Default, Beamable Does Not Store Facebook Platform Data
- If the game developer chooses to call and store Facebook Platform Data, you do so
  at your own risk.
- If you are using Facebook auth through Beamable, no Facebook Platform Data is stored
  of any kind (email, password, graph data, etc).
- The Beamable SDK contains a wrapper for native Google Sign-In behavior on Android
  and iOS.
- A complete example demonstrating the functionality for Google Sign-In can be found
  in GoogleSignInBehavior.cs.
- Apple Sign-In is only supported on Apple devices.
- 'Apple Sign-In is only supported on Apple devices, it is recommended to wrap your
  core functionality in #if UNITY_IOS and a matching #endif to prevent compilation
  on non-iOS devices.'
- Primarily we use the Steamworks SDK to acquire the Steam Token for Authentication.
- This same token is also used for purchases through steam.
- You will need to register your Web API key and AppID in the Beamable portal.
- You can verify the Steamworks SDK is working by creating a MonoBehaviour and outputting
  the Steam User ID.
- You will need to create a new app in the Steam Partner Portal to acquire an AppID.
- Create a Web API Key in the Beamable portal for Steam Integration.
- In a production implementation, save the refresh token to persistent storage such
  as browser cookies or other client storage.
- Unity project must be configured to support GPGS as a third-party authentication
  provider.
- iOS is not supported.
- Before Google Sign-In will work properly, the Unity project must be configured to
  support GPGS as a third-party authentication provider.
- The provided class is called SignInWithGPG, which can be initialized after following
  steps from Google documentation.
- Beamable offers powerful and flexible solutions for in-game storage and content
  management.
- There is a limit of 5MB per cloud save file.
- While Beamable supports *minor* edits to the player data from the portal, restoring
  a customer's player data completely to a historic backup state is **not supported**.
- The CloudSavingService **does not support** *multiple game sessions using the same
  user. If there are multiple sessions for the same user, for the same game, this
  will create an infinite ping/pong effect.
- Manually deleting content from the `LocalCloudDataFullPath` is **not supported**.
- '[Old Cloud Save Service](/docs/cloud-save-code) **doesn''t support** multiple files
  with the **same content**.'
- While Beamable supports *minor* edits to the player data from the portal, restoring
  the a customer's player data completely to a historic backup state is **not supported**.
- The CloudSavingService **does not support** *multiple _game sessions using the same
  user. If there are multiple sessions for the same user, for the same game, this
  will create an infinite ping/pong effect. _E.g. Device A will send updates that
  Device B will fetch, which will send updates that Device A will fetch, etc...*
- Manually deleting content from the `LocalCloudDataFullPath` is **not supported**
- '[Old Cloud Save Service](/docs/cloud-save-code) **doesn''t support** multiple files
  with the **same content**. If you want files with the same content (for example
  a backup file), please add a tag to **differentiate** them or use the [New Cloud
  Save Service](/docs/player-cloud-save-code).'
- Data is stored in Unity's Application.persistentDataPath and prefixed with the Customer
  ID (CID), Project ID (PID), and Player ID (PlayerId).
- You cannot initialize both Services at the same time, the first one initialized
  will lock the other to be used.
- If the destination files are kept open by some unrelated system during the syncing
  process, the CloudSavingService will reattempt several times.
- Uses Beamable Cloud Saving Service
- This Service is deprecated and will not receive further updates. We suggest you
  migrate to the New Cloud Save Service.
- Demonstrates how to handle cloud saving in Unity using a custom API.
- Content management is critical to keep the content in your game engaging and reactive
- Namespaces are locations for content to be published so that the content does not
  impact content in other namespaces.
- Content management is critical to keep the content in your game engaging and reactive.
- Content is validated as a manifest which allows items to be validated against each
  other.
- Game makers may create new content of existing content types or new content of custom
  content types.
- Content is cached by the client and stored both in memory and persisted to disk.
- When content is updated on our backend, Beamable updates a client manifest and push
  it to all clients to invalidate and update the cache.
- 'Best Practice: If you are working on a team, commit to version control after saving
  the project.'
- Uses Local Content Mode for iteration without publishing.
- The Content Manager now supports Auto-Sync, which automatically detects remote content
  changes and downloads them to your local environment.
- The content system supports optional validation for each field of a ContentObject
  subclass.
- Beamable provides built-in validation and also allows for custom validation.
- Stats are designed for simple data types; string or numeric
- Do not store C# objects
- Do not store Json blobs
- Auto-Sync automatically detects remote content changes and downloads them to your
  local environment.
- Publishing is blocked if any content is marked as Invalid or remains in a Conflicted
  state.
- 'Stats feature offers two main entry points: StatsBehaviour and StatsService.'
- The UpdateDelayed function can be used to batch requests made in quick succession.
- Federated Inventory depends on the implementation of federated Authentication.
- Inventory items must be marked as federated to a specific microservice.
- Stats does not require a specific Beamable Feature Prefab.
- The distinction between public and private stats is meaningful in practice.
- Item pruning is turned off by default (that is, the default value for pruneItems
  is false), and the default time-to-live (TTL) is 10 days.
- Requires user authorization and token management for access.
- Stores feature allows the game maker to create a storefront in their application.
- Inventory items are content-driven. To enable federation, content items must be
  marked as federated to a specific microservice.
- Users must be logged in and Beamable must be initialized before transactions.
- Inventory Pruning is an optional feature to keep player inventories lean when your
  content is constantly changing
- Normally inventory item types are meant to be long-lasting, and the corresponding
  items may be owned by players indefinitely
- The custom purchaser class must implement the IBeamablePurchaser interface.
- A benefit here is flexible development.
- Ensure Computer's Internet Is Active
- Setup for Stores uses the Content Manager and relies on at least one valid Virtual
  Currency.
- This feature is not secure unless you track this from within a MicroService and
  validate the purchase.
- Some features may require additional setup.
- Ensure target platform is Android before setup.
- Before items can be purchased be the user, you must set up at least one valid currency,
  a store item, and store listing.
- Currencies are used to buy items (e.g. Gold).
- Client can modify their own currencies if 'Write Self' is enabled.
- A custom purchaser must not reference the UnityBeamablePurchaser class.
- The Beamable API provides helper functions to subscribe to changes in the currency,
  and modify the currency.
- Run The Scene
- See Onscreen UI Show HasInternet = true
- Ensure Computer's Internet Is NOT Active
- See Onscreen UI Show HasInternet = false
- Enabling Unity purchasing fixes the problem of needing the BILLING permission automatically.
- Live events can have a significant multiplier effect on engagement and revenue.
- Currencies can be configured from the Content Manager.
- Write Self must be enabled for clients to modify their own currencies.
- Requires OAuth2 authentication.
- Ensure that your application is correctly set up in the Beamable dashboard.
- Event rules are optional and are not parsed by the client side.
- Event rewards are optional but they are a fundamental part of marketing the live
  Event.
- Event stores are optional but they are a fundamental part of monetizing a live event.
- Retrieve announcements via GetCurrent() method
- Subscribe method allows for real-time updates
- Events are created, configured and published via the Content Manager.
- Requires setup of connected app in API
- Messaging the game players can have a significant multiplier effect on engagement
  and revenue.
- This feature requires Admin privileges to send mail.
- Messaging systems allow the game to provide real-time updates based on server data.
- Push Notifications are a native part of mobile platforms including iOS and Android.
- Allows players to manage in-game mail messages.
- Values for stats are always strings, and you can do simple operations with them
  like EQUALS and NOT EQUALS.
- There are some stats that have numeric values, however these can only be set by
  Beamable's backend.
- This requires **Admin** privileges to send mail.
- Players can create groups, interact, and chat with group members in real-time.
- Social & Networking features allow players to collaborate or compete with other
  players.
- Beamable offers solutions to many of these with very little workload on the developer.
- This functionality has various use cases for game makers and players.
- Game makers can set a global disable to simulate not having wifi before BeamContext
  initialization.
- This feature currently includes an experimental API. Game makers will have to replace
  any experimental namespace when the finalized version is released.
- 'There are two services responsible for connectivity: ConnectivityChecker and ConnectivityService.'
- The NoConnectivityException errors can occur as a result of a couple of conditions.
- When a NoConnectivityException is encountered, the ConnectivityService is notified
  that the internet connection has been lost.
- Changes to stub ConnectivityChecker and ConnectivityService can alter connectivity
  reporting behavior.
- Disabling offline cache and heartbeat can reduce error noise for users with stable
  connections.
- Registered custom Beamable dependencies.
- SetHasInternet(true) gets called frequently, so not logging it here.
- ReportInternetLoss may be overly verbose, so this Debug.Log is commented out.
- 'The NoConnectivityException errors can occur as a result of a couple of conditions:
  the ConnectivityChecker experiences a failure or a request to Beamable experiences
  a timeout or HTTP status code 0 from Unity.'
- ConnectivityChecker has been stubbed to always report that internet connectivity
  is available.
- ConnectivityService has also been stubbed to always report that internet connectivity
  is available.
- Ignoring SetHasInternet(false) in AlwaysConnectivityService
- Ignoring ReportInternetLoss in AlwaysConnectivityService
- Immediately calling Action for OnReconnectOnce in AlwaysConnectivityService
- Immediately calling ConnectionCallback for OnReconnectOnce in AlwaysConnectivityService
- Ignoring ForceDisabled.set in AlwaysConnectivityService
- Group tag must be 3 characters or less.
- Groups do not require a specific Beamable Feature Prefab to be used.
- The group tag must be 3 characters or less.
- Matchmaking service enables players to find matches based on skill level
- Players receive a match ID upon successful matchmaking
- The content type related to Matchmaking is the SimGameType.
- Experimental API - will require namespace replacement when finalized
- The provided example is built on top of the existing 'Leaderboard Flow' Prefab.
- The Beamable Multiplayer feature allows game makers to create real-time and turn-based
  multi-user game experiences.
- The content type related to Matchmaking is the SimGameType. It defines the parameters
  for the match to be created.
- Step 3 and step 4 are the bulk of the development effort. The details depend on
  the specifics of the game project.
- This example is for reference only. Use as inspiration for usage in production.
- Uses an experimental API — namespace may change in finalized version
- By default, the DefaultSimFaultHandler instance will allow for 15 seconds of network
  outage before reporting an unrecoverable error.
- This duration can be adjusted by passing in a custom instance of the DefaultSimFaultHandler
  to the SimNetworkEventStream.
- Frictionless Authentication feature available
- Facebook, Google, Apple, and Steam integrations supported
- There is no party storage. All the data related to parties is stored in `_beamContext.Party.State`.
- Designing an event-driven, deterministic simulation is vital.
- Step 3 and step 4 are the bulk of the development effort.
- Experimental API - Game makers will have to replace any experimental namespace when
  the finalized version is released.
- It is possible that temporary network outages may occur.
- The effect of OnErrorFailed event can also be captured by using a try/catch around
  the SimClient.Update function.
- Experimental API. Game makers will have to replace any experimental namespace when
  the finalized version is released.
- The Beamable Parties Feature allow players to form parties for short-lived multiplayer
  sessions.
- There is no party storage. All the data related to parties is stored in _beamContext.Party.State.
- Understanding player behavior is a critical element of operating any live game.
- Business Intelligence is the process by which a game maker use strategies and technologies
  for analyzing current and historical data about players.
- Please note that this feature currently includes an experimental API. Game makers
  will have to replace any experimental namespace when the finalized version is released.
- Analytics event requests will be batched together into a list, then sent off as
  one API call either when a certain amount of requests has been reached, or after
  a certain amount of time passes.
- Tournaments are cyclical, meaning competition occurs periodically.
- You must have a REPORT tier subscription to get access to custom analytics queries.
- Telemetry data can also be used to measure the success of your game.
- Queries designed to measure player engagement and monetization.
- The API supports batching together multiple analytics calls (default max limit is
  100) within a single client-server communication as an optimization.
- Segmentation is extremely important when running a live game.
- Ability to group players into cohorts.
- To get setup to query Analytic Events, you will need to Contact Us.
- With your Analytics events captured and stored, queries may be performed against
  them.
- If you do not put a space between the comma and the key or value, the parser will
  trim that character.
- The database value is a lowercase version of the project ID (PID) of your title.
- A/B Testing can be a great tool to help improve how your users interact with your
  game.
- You can measure the results of these tests to create opportunities for improved
  engagement, retention, and monetization.
- Queries designed to give insights into player engagement and spending.
- Use PopSQL for variable replacement when running queries.
- Space the comma in CSV format for tagging.
- Can be used across the three main metric pillars, Engagement, Retention & Monetization.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check credentials and permissions'
- '404 Not Found: Verify endpoint path'
- '429 Too Many Requests: Rate limit exceeded'
- '401 Unauthorized: Check OAuth scopes or token expiration'
- Only realms with beam notifications are supported. This realm currently has pubnub.
- '401 Unauthorized: Invalid OAuth token.'
- '404 Not Found: Resource does not exist.'
- '400 Bad Request: Check the request parameters and body.'
- '401 Unauthorized: Check your authentication details.'
- '500 Internal Server Error: Try again later.'
- '403 Forbidden: Check your API key and permissions.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Check your OAuth token and permissions.'
- If there is a local dotnet tool installation for the beam tool, then any global
  invocation will automatically redirect and call the local version.
- '404 Not Found: Check the deployment ID'
- '401 Unauthorized: Invalid access token'
- '401 Unauthorized: Recheck access token'
- 'Invalid token: Ensure the token is correct and has not expired.'
- Throttle API calls or reduce frequency
- Break down filters or add selectivity
- Recheck OAuth scopes or token expiration
- '500 Internal Server Error: An unexpected error occurred'
- '401 Unauthorized: Check your OAuth token.'
- '403 Forbidden: Insufficient permissions.'
- '404 Not Found: Check the endpoint path.'
- '0404: Could not find any .beamable config folder which is required for this command.'
- Multiple Microservice classes detected. Make sure only a single class implementing
  Microservice exists in each service project.
- Non-Partial Microservice class detected. Make sure your Microservice class is marked
  as partial.
- Microservice class is missing the microservice id
- 'Microservice Callable methods cannot be async voids. Ex: CallMicroservice.'
- 'Microservice Callable method CallServiceAsync uses a Type that cannot be inside
  microservice scope. Type: DTO.'
- Callable method CallService uses a Type that is Nested, which is not supported by
  the Source Code Generator. Please move DTO to outer scope.
- 'Microservice ID: `MyMicroservice` is invalid, it needs to be the same as <BeamId>
  csharp property (or as csproj name if none exist): `OtherBeamId`'
- Type DTO contains [BeamGenerateSchema] attribute and is a Nested type, which is
  not supported by the Source Code Generator. Please move DTO to outer scope.
- 'assertion failed [block != nullptr]: BasicBlock requested for unrecognized address
  (BuilderBase.h:550 block_for_offset)'
- Missing declared Federation in MicroserviceFederationsConfig.
- You have configured federation, but the Microservice does not implement the required
  interface.
- The following IFederationId is invalid.
- IFederationId is missing FederationIdAttribute.
- The following IFederationId must be default.
- 'The following IFederationId is invalid. They must: Start with a letter. Contain
  only alphanumeric characters and/or ''_''.'
- '504 Gateway Timeout: Request may be long-running or stuck in a loop.'
- '400 Bad Request: Referencing a piece of content that doesn''t exist.'
- 'RequesterException: Thrown when a call to a Beamable service fails.'
- If your game is an Online game, then you may want to return an error message to
  the player.
- If your game has offline play, you may want to hide these errors but take another
  course of action to enable the offline mode functionality of the game.
- Error handling must be implemented based on whether the game is online or offline.
- Failed to add email, reason=[{result.error}]
- Failed to recovery account via email, reason=[{operation.error}]
- 'IOException: Thrown if destination files are kept open by some unrelated system
  during the syncing process.'
- 'IOException: Thrown upon ultimate failure of file download.'
- Conflict resolution may require manual handling.
- 'IOException: Thrown if the destination files are kept open by some unrelated system
  during the syncing process.'
- 'IOException: Thrown upon ultimate failure of syncing process.'
- 'ContentValidationException: Thrown when validation fails.'
- '403 Forbidden: Check user permissions.'
- '404 Not Found: Verify the endpoint URL.'
- 'ERROR: Invalid Purchase ID'
- 'ERROR: Insufficient Funds'
- 'ERROR: Item Not Found'
- To add in-app products, you need to add the BILLING permission to your APK.
- 'INVALID_TOKEN: Ensure your token is valid and not expired.'
- '403 FORBIDDEN: Check your permissions for the requested resource.'
- 'Permission Denied: Ensure the user has Admin privileges.'
- 'Permission denied: Ensure user has Admin privileges.'
- 'Mail not found: Check Mail ID.'
- '400 Bad Request: Check event data structure.'
- '429 Too Many Requests: Rate limit exceeded.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - UBeamUserSlots
  - UBeamRuntime
  - UBeamEditor
  - Context
  - AuthService
  - PlatformSubscription
  - User
  - Session
  - Token
  - AnnouncementService
  - AnnouncementQueryResponse
client:
  base_url: https://beamable.com
  auth:
    type: oauth2
source_metadata: null
