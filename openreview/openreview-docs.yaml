resources:
- name: conference
  endpoint:
    path: /api/conferences
    method: GET
    data_selector: conferences
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: conferences
  endpoint:
    path: /api/conferences
    method: GET
    data_selector: conferences
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: results
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: results
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: invitations
  endpoint:
    path: /invitations
    method: GET
    data_selector: invitations
    params: {}
- name: submission
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: submissions
- name: note
  endpoint:
    path: /api/v2/notes
    method: GET
    data_selector: notes
- name: example_workflow
  endpoint:
    path: /example/workflow
    method: GET
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: conferences
  endpoint:
    path: /conferences
    method: GET
    data_selector: conferences
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: results
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: content
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: content
- name: conference
  endpoint:
    path: /api/conferences
    method: GET
    data_selector: conferences
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: invitations
  endpoint:
    path: /invitations
    method: GET
    data_selector: invitations
- name: submissions
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: submissions
- name: notes
  endpoint:
    path: /api/v2/notes
    method: GET
    data_selector: notes
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
    params: {}
- name: program_chair
  endpoint:
    path: /program_chairs
    method: POST
    data_selector: results
    params: {}
- name: note
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: publication
  endpoint:
    path: /publications
    method: GET
    data_selector: results
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: edge
  endpoint:
    path: /edges
    method: GET
    data_selector: edges
- name: note
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: invitation
  endpoint:
    path: /invitations
    method: GET
    data_selector: invitations
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
- name: profiles
  endpoint:
    path: /api/profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: assignments
  endpoint:
    path: /api/assignments
    method: GET
    data_selector: records
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: data
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: profiles
  endpoint:
    path: /api/profiles
    method: GET
    data_selector: profiles
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: items
- name: edges
  endpoint:
    path: /edges
    method: GET
    data_selector: edges
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviewers
  endpoint:
    path: /reviewers
    method: GET
    data_selector: reviewers
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: submissions
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: submissions
- name: notes
  endpoint:
    path: /api/v2/notes
    method: GET
    data_selector: notes
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: edges
  endpoint:
    path: /edges
    method: GET
    data_selector: edges
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: submissions
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: expertise_selection
  endpoint:
    path: /-/Expertise_Selection
    method: GET
- name: publication
  endpoint:
    path: /publications
    method: POST
    data_selector: data
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: messages
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: venue
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: content
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: content
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: comments
  endpoint:
    path: /api/comments
    method: GET
    data_selector: comments
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: content
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: content
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: edges
  endpoint:
    path: /edges
    method: GET
    data_selector: edges
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: invitations
  endpoint:
    path: /invitations
    method: GET
    data_selector: invitations
- name: venue
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: get_group
  endpoint:
    path: /get_group
    method: GET
    data_selector: members
    params:
      id: active_venues
- name: get_groups
  endpoint:
    path: /get_groups
    method: GET
    data_selector: groups
    params:
      prefix: Test/2025/Conference
- name: post_group_edit
  endpoint:
    path: /post_group_edit
    method: POST
    data_selector: group
    params: {}
- name: add_members_to_group
  endpoint:
    path: /add_members_to_group
    method: POST
    data_selector: group
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: note
  endpoint:
    path: /notes
    method: POST
    data_selector: note
    params: {}
- name: edit
  endpoint:
    path: /edits
    method: POST
    data_selector: edit
    params: {}
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: note
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: get_group
  endpoint:
    path: /get_group
    method: GET
    data_selector: members
- name: get_groups
  endpoint:
    path: /get_groups
    method: GET
    data_selector: groups
    params:
      prefix: Test/2025/Conference
- name: post_group_edit
  endpoint:
    path: /post_group_edit
    method: POST
    data_selector: group
- name: add_members_to_group
  endpoint:
    path: /add_members_to_group
    method: POST
    data_selector: group
- name: edits
  endpoint:
    path: /edits
    method: POST
    data_selector: edit
- name: edits
  endpoint:
    path: /v2/edits
    method: GET
    data_selector: edits
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: invitations
  endpoint:
    path: /invitations
    method: GET
    data_selector: records
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: note
  endpoint:
    path: /notes
    method: POST
    data_selector: note
    params: {}
- name: edit
  endpoint:
    path: /edits
    method: POST
    data_selector: edit
    params: {}
- name: edits
  endpoint:
    path: /edits
    method: GET
    data_selector: results
    params: {}
- name: venue
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: edits
  endpoint:
    path: /edits
    method: GET
    data_selector: records
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: edits
  endpoint:
    path: /edit
    method: POST
    data_selector: edit
    params: {}
- name: edits
  endpoint:
    path: /get_note_edits
    method: GET
    data_selector: edits
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: invitations
  endpoint:
    path: /invitations
    method: GET
    data_selector: invitations
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: serve_as_reviewer
  endpoint:
    path: /reference/default-forms/default-submission-form
    method: POST
    data_selector: value
    params: {}
- name: confirmation
  endpoint:
    path: /reference/default-forms/default-submission-form
    method: POST
    data_selector: description
    params: {}
- name: private_comments
  endpoint:
    path: /reference/default-forms/default-submission-form
    method: POST
    data_selector: readers
    params: {}
- name: track
  endpoint:
    path: /reference/default-forms/default-submission-form
    method: POST
    data_selector: description
    params: {}
- name: invitations
  endpoint:
    path: /invitations
    method: GET
    data_selector: invitations
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: invitations
  endpoint:
    path: /invitations
    method: GET
    data_selector: invitations
- name: supplementary_material
  endpoint:
    path: /supplementary-material
    method: POST
    data_selector: data
    params: {}
- name: supplementary_material
  endpoint:
    path: /supplementary_material
    method: POST
    data_selector: value
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: venue
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
    params: {}
- name: venue
  endpoint:
    path: /group
    method: GET
    data_selector: venues
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: results
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: results
    params: {}
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
    params: {}
- name: profiles
  endpoint:
    path: /api/profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: results
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: confirmation
  endpoint:
    path: /reference/default-forms/default-submission-form
    method: POST
    data_selector: confirmation
    params: {}
- name: private_comments
  endpoint:
    path: /reference/default-forms/default-submission-form
    method: POST
    data_selector: private_comments
    params: {}
- name: track
  endpoint:
    path: /reference/default-forms/default-submission-form
    method: POST
    data_selector: track
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: note
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: supplementary_material
  endpoint:
    data_selector: value
    params:
      order: 7
      readers:
      - ICML.cc/2023/Conference
      - ICML.cc/2023/Conference/Submission${4/number}/Senior_Area_Chairs
      - ICML.cc/2023/Conference/Submission${4/number}/Area_Chairs
      - ICML.cc/2023/Conference/Submission${4/number}/Authors
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: results
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: institutional_data
  endpoint:
    path: /institutional-data
    method: GET
    data_selector: data
    params: {}
- name: institutional_data
  endpoint:
    path: /institutions
    method: GET
    data_selector: data
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: papers
  endpoint:
    path: /papers
    method: GET
    data_selector: results
- name: papers
  endpoint:
    path: /papers
    method: GET
    data_selector: papers
    params: {}
- name: submission
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: records
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: import_publications
  endpoint:
    path: /profile/add_dblp_papers
    method: POST
    data_selector: response
    params: {}
- name: remove_publications
  endpoint:
    path: /profile/remove_dblp_papers
    method: POST
    data_selector: response
    params: {}
- name: publication
  endpoint:
    path: /publications
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: notes
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: venue
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: records
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: records
- name: supplementary_material
  endpoint:
    path: /how-to-guides/submissions-comments-reviews-and-decisions/how-to-hide-reveal-fields
    method: GET
    data_selector: readers
    params: {}
- name: recommendation
  endpoint:
    path: /getting-started/hosting-a-venue-on-openreview/customizing-your-submission-form
    method: GET
    data_selector: readers
    params: {}
- name: email_address
  endpoint:
    path: /profiles/email
    method: POST
    data_selector: data
    params: {}
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: submission
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: notes
- name: institutional_data
  endpoint:
    path: /institutional-data
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submission
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: papers
  endpoint:
    path: /api/papers
    method: GET
    data_selector: results
- name: venues
  endpoint:
    path: /api/venues
    method: GET
    data_selector: venues
    params: {}
- name: profiles
  endpoint:
    path: /api/v2/profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /api/v2/notes
    method: GET
    data_selector: notes
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: data
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: profiles
  endpoint:
    path: /api/profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: POST
    data_selector: reviews
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: results
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
    params: {}
- name: reviewer_group
  endpoint:
    path: /-/Edit
    method: POST
    data_selector: group
- name: add_members
  endpoint:
    path: /-/AddMembers
    method: POST
    data_selector: members
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profile_objects
    params: {}
- name: profiles
  endpoint:
    path: /api/profiles
    method: GET
    data_selector: profiles
    params: {}
- name: venue_homepages
  endpoint:
    path: /venues/homepages
    method: GET
    data_selector: homepages
    params: {}
- name: custom_fields
  endpoint:
    path: /custom-fields
    method: POST
    data_selector: fields
    params: {}
- name: supplementary_material
  endpoint:
    path: /how-to-guides/submissions-comments-reviews-and-decisions/how-to-hide-reveal-fields
    method: GET
    data_selector: readers
    params: {}
- name: recommendation
  endpoint:
    path: /getting-started/hosting-a-venue-on-openreview/customizing-your-submission-form
    method: GET
    data_selector: readers
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: results
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: decision_tabs
  endpoint:
    path: /decisions
    method: GET
    data_selector: records
    params: {}
- name: live_chat
  endpoint:
    path: /live_chat
    method: GET
    data_selector: messages
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: results
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: review
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: reviewers
  endpoint:
    path: /reviewers
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: notes
    params: {}
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: group_members
  endpoint:
    path: /groups/members
    method: GET
    data_selector: members
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: group
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: note
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: members
  endpoint:
    path: /groups/members
    method: GET
    data_selector: members
    params: {}
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: notes
    params: {}
- name: invitations
  endpoint:
    path: /api/invitations
    method: GET
    data_selector: invitations
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviewer
  endpoint:
    path: /reviewers
    method: GET
    data_selector: reviewers
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: content
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: content
- name: group
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: note
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: edges
  endpoint:
    path: /edges
    method: GET
- name: notes
  endpoint:
    path: /notes
    method: GET
- name: invitations
  endpoint:
    path: /invitations
    method: GET
- name: notes
  endpoint:
    path: /notes
    method: POST
    data_selector: notes
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: note
  endpoint:
    path: /notes
    method: POST
    data_selector: note
    params: {}
- name: note
  endpoint:
    path: /notes
    method: POST
    data_selector: note
    params: {}
- name: support_request
  endpoint:
    path: /Note
    method: POST
    data_selector: content
    params: {}
- name: edit_note
  endpoint:
    path: /Note/-/Edit
    method: POST
    data_selector: content
    params: {}
- name: delete_note
  endpoint:
    path: /Note/-/Edit
    method: POST
    data_selector: content
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: submissions
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: submissions
- name: notes
  endpoint:
    path: /api/v2/notes
    method: GET
    data_selector: notes
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: reviewer
  endpoint:
    path: /reviewers
    method: GET
    data_selector: records
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: records
- name: group_members
  endpoint:
    path: /groups/{group_id}/members
    method: GET
    data_selector: members
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: group_members
  endpoint:
    path: /groups/members
    method: GET
    data_selector: members
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: records
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: results
    params: {}
- name: members
  endpoint:
    path: /groups/members
    method: GET
    data_selector: members
    params: {}
- name: group
  endpoint:
    path: /group/edit
    method: GET
- name: papers
  endpoint:
    path: /api/papers
    method: GET
    data_selector: papers
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: bid_stage
  endpoint:
    path: /stages/BidStage
    method: POST
    data_selector: bid_stages
    params:
      request_form_id: ''
      venue_id: ''
      bid_start_date: '2024-09-30T12:00:00'
      bid_due_date: '2024-10-08T12:30:00'
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: records
- name: notes
  endpoint:
    path: /api/notes
    method: POST
    data_selector: notes
    params: {}
- name: references
  endpoint:
    path: /get_all_references
    method: GET
    data_selector: references
- name: post_note
  endpoint:
    path: /post_note
    method: POST
    data_selector: response
- name: notes
  endpoint:
    path: /notes
    method: POST
    data_selector: notes
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: note
  endpoint:
    path: /notes
    method: POST
    data_selector: note
    params: {}
- name: support_request
  endpoint:
    path: /-/Request_Form
    method: POST
    data_selector: content
- name: Review_Revision
  endpoint:
    path: /stages/custom
    method: POST
    data_selector: invitation
    params: {}
- name: Rebuttal_Comment
  endpoint:
    path: /stages/custom
    method: POST
    data_selector: invitation
    params: {}
- name: Author_Review_Rating
  endpoint:
    path: /stages/custom
    method: POST
    data_selector: invitation
    params: {}
- name: Release_Consent
  endpoint:
    path: /stages/custom
    method: POST
    data_selector: invitation
    params: {}
- name: Opt_In_Public_Release
  endpoint:
    path: /stages/custom
    method: POST
    data_selector: invitation
    params: {}
- name: papers
  endpoint:
    path: /api/papers
    method: GET
    data_selector: papers
- name: venue
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: conflict_computations
  endpoint:
    path: /conflicts
    method: GET
    data_selector: conflicts
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submission
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: custom_conflict
  endpoint:
    path: /post_edge
    method: POST
    data_selector: edge
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: conflict_policy
  endpoint:
    path: /conflict_policy
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
    params:
      incremental: updated_at
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: edge
  endpoint:
    path: /edges
    method: GET
    data_selector: edges
    params: {}
- name: note
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: invitation
  endpoint:
    path: /invitations
    method: GET
    data_selector: invitations
    params: {}
- name: bids
  endpoint:
    path: /bids
    method: POST
    data_selector: bids
    params: {}
- name: bids
  endpoint:
    path: /bids
    method: GET
    data_selector: edges
- name: withdrawals
  endpoint:
    path: /withdrawals
    method: POST
    data_selector: response
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: GET
    data_selector: assignments
    params: {}
- name: manual_assignments
  endpoint:
    path: /assignments/manual
    method: POST
    data_selector: results
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: note
  endpoint:
    path: /api/notes
    method: GET
    data_selector: notes
    params: {}
- name: profile
  endpoint:
    path: /api/profiles
    method: GET
    data_selector: profiles
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: GET
    data_selector: records
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: assignment_edges
  endpoint:
    path: /Your/Venue/ID/Reviewers/-/Assignment
    method: GET
    data_selector: edges
    params: {}
- name: submissions
  endpoint:
    path: /Your/Venue/ID/-/Submission
    method: GET
    data_selector: submissions
    params: {}
- name: reviewers_groups
  endpoint:
    path: /Your/Venue/ID/Submission{submissions.number}/Reviewers
    method: GET
    data_selector: groups
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: affinity_scores
  endpoint:
    path: /affinity_scores
    method: GET
    data_selector: scores
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: request_expertise
  endpoint:
    path: /request_expertise
    method: POST
    data_selector: response
    params: {}
- name: request_paper_subset_expertise
  endpoint:
    path: /request_paper_subset_expertise
    method: POST
    data_selector: response
    params: {}
- name: request_user_subset_expertise
  endpoint:
    path: /request_user_subset_expertise
    method: POST
    data_selector: response
    params: {}
- name: get_expertise_status
  endpoint:
    path: /get_expertise_status
    method: GET
    data_selector: status
    params: {}
- name: get_expertise_results
  endpoint:
    path: /get_expertise_results
    method: GET
    data_selector: results
    params: {}
- name: edges
  endpoint:
    path: /edges
    method: POST
    data_selector: edges
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: edges
  endpoint:
    path: /edges
    method: POST
    data_selector: edges
- name: assignments
  endpoint:
    path: /assignments
    method: GET
    data_selector: records
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: bidding
  endpoint:
    path: /bidding
    method: POST
    data_selector: results
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: GET
    data_selector: assignments
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: authors
  endpoint:
    path: /authors
    method: GET
    data_selector: records
- name: assignments
  endpoint:
    path: /assignments
    method: GET
    data_selector: assignments
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: GET
- name: assignments
  endpoint:
    path: /edges
    method: GET
    data_selector: edges
    params:
      invitation: <your_venue_id>/Reviewers/-/Assignment
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: results
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: results
    params: {}
- name: submissions
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /api/v2/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: edges
  endpoint:
    path: /get_edges
    method: GET
    data_selector: edges
    params:
      invitation: <your_venue_id>/Reviewers/-/Custom_Max_Papers
      tail: ~User_One1
- name: post_edge
  endpoint:
    path: /post_edge
    method: POST
    data_selector: edge
    params:
      invitation: <your_venue_id>/Area_Chairs/-/Custom_Max_Papers
      head: <your_venue_id>/Area_Chairs
      tail: ~Profile_ID1
      signatures:
      - <your_venue_id>/Program_Chairs
      weight: 2
- name: assignments
  endpoint:
    path: /api/assignments
    method: GET
    data_selector: results
- name: Review_Revision
  endpoint:
    path: /custom_stage/Review_Revision
    method: POST
    data_selector: invitation
    params:
      reply_to: REVIEWS
      source: ALL_SUBMISSIONS
      reply_type: REVISION
- name: Rebuttal_Comment
  endpoint:
    path: /custom_stage/Rebuttal_Comment
    method: POST
    data_selector: invitation
    params:
      reply_to: REBUTTALS
      source: ALL_SUBMISSIONS
- name: Author_Review_Rating
  endpoint:
    path: /custom_stage/Author_Review_Rating
    method: POST
    data_selector: invitation
    params:
      reply_to: REVIEWS
      source: ALL_SUBMISSIONS
- name: Release_Consent
  endpoint:
    path: /custom_stage/Release_Consent
    method: POST
    data_selector: invitation
    params:
      reply_to: FORUM
      source: ACCEPTED_SUBMISSIONS
      reply_type: REPLY
- name: Opt_In_Public_Release
  endpoint:
    path: /custom_stage/Opt_In_Public_Release
    method: POST
    data_selector: invitation
    params:
      reply_to: FORUM
      source:
        venueid:
        - PRL/2023/ICAPS
        - PRL/2023/ICAPS/Submission
        - PRL/2023/ICAPS/Rejected_Submission
        with_decision_accept: false
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: GET
    data_selector: assignments
    params: {}
- name: conflicts
  endpoint:
    path: /conflicts
    method: GET
    data_selector: conflictRecords
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: review
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: subject_area
  endpoint:
    path: /subject_area
    method: GET
    data_selector: value
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: data
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: reviewer_registration
  endpoint:
    path: /groups/{venue_id}/Reviewers
    method: GET
    data_selector: groups
    params: {}
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: results
- name: reviewer_profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: author_profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: Subject_Score
  endpoint:
    path: /Your/Venue/ID/Reviewers/-/Subject_Score
    method: POST
    data_selector: null
    params:
      weight: 1
      default: 0
- name: subject_area
  endpoint:
    path: /submission/form/customization
    method: POST
    data_selector: null
    params:
      order: 3
      description: Please select one primary Machine Learning subject area.
      value:
        param:
          type: string
          enum:
          - Bayesian Inference
          - Computer Vision
          - Deep Learning
          - Graph Mining
          - Natural Language Processing
          - Reinforcement Learning
          - Representation Learning
          - Statistics
          - Supervised Learning
          - Unsupervised Learning
          input: radio
- name: custom_conflict
  endpoint:
    path: /conflicts/custom
    method: POST
    data_selector: results
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: conflict_policy
  endpoint:
    path: /conflict_policy
    method: POST
    data_selector: data
    params: {}
- name: scores
  endpoint:
    path: /scores
    method: GET
    data_selector: scores
    params: {}
- name: conflicts
  endpoint:
    path: /conflicts
    method: GET
    data_selector: conflicts
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: profile
  endpoint:
    path: /get_profile_info
    method: GET
    data_selector: profile
- name: conflicts
  endpoint:
    path: /compute_conflicts
    method: POST
    data_selector: conflicts
- name: expertise_scores
  endpoint:
    path: /expertise/scores
    method: POST
    data_selector: results
- name: setup_committee_matching
  endpoint:
    path: /setup_committee_matching
    method: POST
    data_selector: results
- name: delete_edges
  endpoint:
    path: /delete_edges
    method: DELETE
    data_selector: results
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: setup_committee_matching
  endpoint:
    path: /setup_committee_matching
    method: POST
    data_selector: no_profiles
    params:
      committee_id: venue.get_reviewers_id()
      compute_affinity_scores: '''expertise_results.csv'''
- name: request_expertise
  endpoint:
    path: /request_expertise
    method: POST
    data_selector: job_id
    params:
      name: '''venue-reviewers1'''
      group_id: role
      venue_id: venue.get_submission_venue_id()
      expertise_selection_id: '''{role}/-/Expertise_Selection'''
      model: '''specter2+scincl'''
      weight:
      - articleSubmittedToOpenReview: true
        weight: 2
      - value: '''OpenReview.net/Archive'''
        weight: 0.2
      - value: '''OpenReview.net/Anonymous_Preprint'''
        weight: 0.2
- name: bids
  endpoint:
    path: /bids
    method: GET
    data_selector: records
    params: {}
- name: expertise
  endpoint:
    path: /api/v2/expertise
    method: POST
    data_selector: results
- name: committee_matching
  endpoint:
    path: /api/v1/committee_matching
    method: POST
    data_selector: results
- name: expertise_results
  endpoint:
    path: /get_expertise_results
    method: GET
    data_selector: results
    params:
      job_id: ''
- name: committee_matching
  endpoint:
    path: /setup_committee_matching
    method: POST
    data_selector: ''
    params:
      committee_id: ''
      compute_affinity_scores: expertise_results.csv
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: manual_assignments
  endpoint:
    path: /api/manual_assignments
    method: POST
    data_selector: assignments
- name: expertise
  endpoint:
    path: /expertise
    method: POST
    data_selector: results
- name: affinity_scores
  endpoint:
    path: /affinity_scores
    method: POST
    data_selector: results
- name: edges
  endpoint:
    path: /edges
    method: GET
    data_selector: edges
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: setup_committee_matching
  endpoint:
    path: /setup_committee_matching
    method: POST
    data_selector: response
    params:
      committee_id: the ID of the group for which you are computing conflicts
      compute_conflicts: Default or NeurIPS
      compute_conflicts_n_years: the number of years to consider when looking at a
        user's History
- name: reviewer_assignments
  endpoint:
    path: /how-to-guides/paper-matching-and-assignment/how-to-do-automatic-assignments/how-to-setup-paper-matching-by-calculating-affinity-scores-and-conflicts
    method: GET
    data_selector: assignments
    params: {}
- name: area_chair_assignments
  endpoint:
    path: /how-to-guides/paper-matching-and-assignment/how-to-enable-reviewer-reassignment-for-area-chairs
    method: GET
    data_selector: assignments
    params: {}
- name: setup_committee_matching
  endpoint:
    params:
      committee_id: The ID of the group for which you are uploading scores.
      compute_affinity_scores: The path to the affinity score CSV.
- name: assignments
  endpoint:
    path: /assignments
    method: GET
    data_selector: records
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: messages
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /api/notes
    method: GET
    data_selector: notes
    params: {}
- name: edges
  endpoint:
    path: /edges
    method: GET
    data_selector: edges
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: reviewers_assignment
  endpoint:
    path: /groups/{venue_id}/roles/{role_name}/-/Assignment
    method: POST
    data_selector: content
    params: {}
- name: enable_reviewers_reassignment
  endpoint:
    path: /group/edit
    method: POST
    data_selector: value
    params:
      enable_reviewers_reassignment: true
- name: reviewers_proposed_assignment_title
  endpoint:
    path: /group/edit
    method: POST
    data_selector: value
    params:
      reviewers_proposed_assignment_title: matcher1
- name: assignments
  endpoint:
    path: /assignments
    method: POST
    data_selector: data
    params: {}
- name: manual_assignments
  endpoint:
    path: /manual_assignments
    method: GET
    data_selector: data
    params: {}
- name: automatic_assignments
  endpoint:
    path: /automatic_assignments
    method: GET
    data_selector: data
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: POST
    data_selector: edges
- name: edges
  endpoint:
    path: /get_all_edges
    method: GET
    data_selector: edges
    params:
      invitation: Your/Venue/ID/Reviewers/-/Assignment
- name: submissions
  endpoint:
    path: /get_all_notes
    method: GET
    data_selector: submissions
    params:
      invitation: Your/Venue/ID/-/Submission
- name: groups
  endpoint:
    path: /get_group
    method: GET
    data_selector: groups
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: POST
    data_selector: assignment
    params: {}
- name: affinity_scores
  endpoint:
    path: /affinity_scores
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: notes
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: POST
    data_selector: id
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: POST
    data_selector: edges
    params: {}
- name: request_expertise
  endpoint:
    path: /request_expertise
    method: POST
- name: request_paper_subset_expertise
  endpoint:
    path: /request_paper_subset_expertise
    method: POST
- name: request_user_subset_expertise
  endpoint:
    path: /request_user_subset_expertise
    method: POST
- name: get_expertise_results
  endpoint:
    path: /get_expertise_results
    method: GET
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: content
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: content
    params: {}
- name: edges
  endpoint:
    path: /edges
    method: POST
    data_selector: edges
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: GET
    data_selector: records
- name: Custom_Max_Papers
  endpoint:
    path: /invitations/{venue_id}/role_name/-/Custom_Max_Papers
    method: POST
    data_selector: edges
    params: {}
- name: Custom_User_Demands
  endpoint:
    path: /invitations/{venue_id}/role_name/-/Custom_User_Demands
    method: POST
    data_selector: edges
    params: {}
- name: Conflict_Assignment
  endpoint:
    path: /invitations/{venue_id}/role_name/-/Conflict
    method: POST
    data_selector: edges
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: assignments
  endpoint:
    path: /assignments
    method: GET
    data_selector: assignments
- name: assignments
  endpoint:
    path: /assignments
    method: POST
    data_selector: edges
    params: {}
- name: conflicts
  endpoint:
    path: /conflicts
    method: POST
    data_selector: edges
    params: {}
- name: custom_max_papers
  endpoint:
    path: /custom_max_papers
    method: POST
    data_selector: edges
    params: {}
- name: custom_user_demands
  endpoint:
    path: /custom_user_demands
    method: POST
    data_selector: edges
    params: {}
- name: assignments
  endpoint:
    path: /edges
    method: GET
    data_selector: edges
    params:
      invitation: <your_venue_id>/Reviewers/-/Assignment
- name: papers
  endpoint:
    path: /papers
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: results
    params: {}
- name: edges
  endpoint:
    path: /edges
    method: GET
    data_selector: edges
    params:
      invitation: <your_venue_id>/Reviewers/-/Custom_Max_Papers
      tail: ~User_One1
- name: post_edge
  endpoint:
    path: /edges
    method: POST
    data_selector: edge
    params:
      invitation: <your_venue_id>/Area_Chairs/-/Custom_Max_Papers
      head: <your_venue_id>/Area_Chairs
      tail: ~Profile_ID1
      signatures:
      - <your_venue_id>/Program_Chairs
      weight: 2
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: data
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: results
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: message
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: POST
    data_selector: data
    params: {}
- name: send_message
  endpoint:
    path: /api/send_message
    method: POST
    data_selector: response
    params: {}
- name: submissions
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /api/v2/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: subject_area
  endpoint:
    path: /path/to/subject_area
    method: GET
    data_selector: value.param.items
    params: {}
- name: decision_notifications
  endpoint:
    path: /decision/notifications
    method: POST
    data_selector: notifications
    params: {}
- name: assignments
  endpoint:
    path: /api/assignments
    method: GET
    data_selector: results
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: notes
    params: {}
- name: reviewers
  endpoint:
    path: /reviewers
    method: GET
    data_selector: notes
    params: {}
- name: edges
  endpoint:
    path: /edges
    method: POST
    data_selector: edge
    params: {}
- name: subject_area
  endpoint:
    path: /submission/form
    method: POST
    data_selector: subject_area
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: submissions
    params:
      venueid: Your/Venue/ID
- name: venues
  endpoint:
    path: /api/venues
    method: GET
    data_selector: venues
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /api/v2/notes
    method: GET
    data_selector: notes
    params: {}
- name: affinity_scores
  endpoint:
    path: /api/affinity_scores
    method: GET
    data_selector: scores
- name: conflicts
  endpoint:
    path: /api/conflicts
    method: GET
    data_selector: conflict_records
- name: email_addresses
  endpoint:
    path: /api/email-addresses
    method: GET
    data_selector: emails
    params: {}
- name: profiles
  endpoint:
    path: /get_profiles
    method: GET
    data_selector: profiles
    params:
      with_preferred_emails: preferred_emails_invitation_id
- name: accepted_submissions
  endpoint:
    path: /get_all_notes
    method: GET
    data_selector: accepted_submissions
    params:
      content:
        venueid: venue_id
- name: expertise
  endpoint:
    path: /request_expertise
    method: POST
    data_selector: results
- name: get_expertise_status
  endpoint:
    path: /get_expertise_status
    method: GET
    data_selector: results
- name: get_expertise_results
  endpoint:
    path: /get_expertise_results
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: records
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: records
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: records
- name: decisions
  endpoint:
    path: /decisions
    method: GET
    data_selector: records
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: note
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: expertise_results
  endpoint:
    path: /get_expertise_results
    method: GET
    data_selector: results
- name: committee_matching
  endpoint:
    path: /setup_committee_matching
    method: POST
    data_selector: no_profiles
    params:
      committee_id: venue.get_reviewers_id()
      compute_affinity_scores: '''expertise_results.csv'''
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: affinity_scores
  endpoint:
    path: /api/v2/affinity-scores
    method: POST
    data_selector: results
    params: {}
- name: expertise_results
  endpoint:
    path: /api/v2/expertise/results
    method: GET
    data_selector: results
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: expertise_scores
  endpoint:
    path: /api/v2/expertise
    method: POST
    data_selector: results
    params: {}
- name: submission
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: note
  endpoint:
    path: /api/notes
    method: GET
    data_selector: notes
    params: {}
- name: setup_committee_matching
  endpoint:
    params:
      committee_id: The ID of the group for which you are uploading scores.
      compute_affinity_scores: The path to the affinity score CSV
- name: assignments
  endpoint:
    path: /assignments
    method: POST
    data_selector: results
    params: {}
- name: paper_decisions
  endpoint:
    path: /api/paper_decisions
    method: POST
    data_selector: decisions
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: records
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: records
- name: active_submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: venue_group
  endpoint:
    path: /groups/{venue_id}
    method: GET
    data_selector: content
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: POST
    data_selector: results
    params: {}
- name: note
  endpoint:
    path: /reference/api-v2/entities/note
    method: GET
- name: invitation
  endpoint:
    path: /reference/api-v2/entities/invitation
    method: GET
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: profiles
  endpoint:
    path: /api/profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
    params: {}
- name: submissions
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: profiles
  endpoint:
    path: /api/v2/profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: content
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: content
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
- name: conflicts
  endpoint:
    path: /conflicts
    method: GET
    data_selector: records
    params: {}
- name: assignments
  endpoint:
    path: /assignments
    method: GET
    data_selector: records
    params: {}
- name: custom_max_papers
  endpoint:
    path: /custom_max_papers
    method: GET
    data_selector: records
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: notes
- name: assignments
  endpoint:
    path: /assignments
    method: POST
    data_selector: edges
- name: conflict_edges
  endpoint:
    path: /edges/conflicts
    method: GET
    data_selector: edges
    params: {}
- name: grouped_edges
  endpoint:
    path: /api/get_grouped_edges
    method: GET
    data_selector: edges
- name: edges
  endpoint:
    path: /edges
    method: GET
    data_selector: edges
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: assignment_conflict
  endpoint:
    path: /how-to-guides/data-retrieval-and-modification/how-to-get-edges-for-conflicts-assignments-custom-max-papers-and-more
    method: POST
    data_selector: conflict_edges
    params: {}
- name: custom_max_paper
  endpoint:
    path: /how-to-guides/data-retrieval-and-modification/how-to-get-edges-for-conflicts-assignments-custom-max-papers-and-more
    method: POST
    data_selector: new_quota_edges
    params: {}
- name: custom_user_demand
  endpoint:
    path: /how-to-guides/data-retrieval-and-modification/how-to-get-all-notes-for-submissions-reviews-rebuttals-etc#quickstart-getting-all-submissions
    method: POST
    data_selector: user_demand_edges
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: records
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: records
- name: assignments
  endpoint:
    path: /assignments
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: records
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: post_message
  endpoint:
    path: /api/post_message
    method: POST
- name: get_all_notes
  endpoint:
    path: /api/get_all_notes
    method: GET
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: decision_notifications
  endpoint:
    path: /api/notifications/decisions
    method: POST
    data_selector: data
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: notes
    params:
      incremental: updated
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      incremental: updated_at
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: invitation
  endpoint:
    path: /invitations
    method: GET
    data_selector: content
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /api/v1/submissions
    method: GET
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /get_all_notes
    method: GET
    data_selector: submissions
    params:
      venueid: Your/Venue/ID
- name: profiles
  endpoint:
    path: /get_profiles
    method: GET
    data_selector: history
    params: {}
- name: email_addresses
  endpoint:
    path: /email_addresses
    method: GET
    data_selector: records
    params: {}
- name: submissions
  endpoint:
    path: /get_all_notes
    method: GET
    data_selector: submissions
    params:
      invitation: '{venue_id}/-/Submission'
      details: replies
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: email_addresses
  endpoint:
    path: /emails
    method: GET
    data_selector: records
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: YOUR_VENUE_ID/Reviewers/-/Registration
- name: profiles
  endpoint:
    path: /get_profiles
    method: GET
    data_selector: profiles
    params:
      with_preferred_emails: venue_id/-/Preferred_Emails
- name: accepted_submissions
  endpoint:
    path: /get_all_notes
    method: GET
    data_selector: accepted_submissions
    params:
      content:
        venueid: venue_id
- name: venues
  endpoint:
    path: /api/venues
    method: GET
    data_selector: venues
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: results
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: results
- name: decisions
  endpoint:
    path: /decisions
    method: GET
    data_selector: results
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
    params: {}
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Submission
- name: reviews
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Official_Review
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: submissions
    params:
      invitation: Your/Venue/ID/-/Submission
      details: directReplies
- name: reviews
  endpoint:
    path: /notes
    method: GET
    data_selector: reviews
    params:
      invitation: Your/Venue/ID/-/Official_Review
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Submission
- name: reviews
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Official_Review
- name: profiles
  endpoint:
    path: /how-to-guides/data-retrieval-and-modification/how-to-get-profiles-and-their-relations
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /how-to-guides/data-retrieval-and-modification/how-to-get-all-notes-for-submissions-reviews-rebuttals-etc
    method: GET
    data_selector: notes
    params: {}
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: review
  endpoint:
    path: /reviews
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Submission
- name: reviews
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Official_Review
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
    params: {}
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Blind_Submission
- name: reviews
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Official_Review
- name: profiles
  endpoint:
    path: /how-to-guides/data-retrieval-and-modification/how-to-get-profiles-and-their-relations
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /how-to-guides/data-retrieval-and-modification/how-to-get-all-notes-for-submissions-reviews-rebuttals-etc
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: papers
  endpoint:
    path: /api/papers
    method: GET
    data_selector: papers
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: grouped_edges
  endpoint:
    path: /api/v2/get_grouped_edges
    method: GET
    data_selector: edges
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: '[]'
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: submissions
  endpoint:
    path: /submissions
    method: GET
- name: reviews
  endpoint:
    path: /reviews
    method: GET
- name: notes
  endpoint:
    path: /notes
    method: GET
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: results
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: results
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: results
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: results
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: records
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: activate_user
  endpoint:
    path: /activate/{token}
    method: PUT
    data_selector: user token
- name: moderate_user_profile
  endpoint:
    path: /profile/moderate
    method: POST
    data_selector: user token
- name: activate_email
  endpoint:
    path: /activatelink/{token}
    method: PUT
    data_selector: Confirmed email
- name: check_if_user_activatable
  endpoint:
    path: /activatable/{token}
    method: GET
    data_selector: user token
- name: check_if_user_resettable
  endpoint:
    path: /resettable/{token}
    method: GET
    data_selector: user token
- name: reset_password
  endpoint:
    path: /reset/{token}
    method: PUT
    data_selector: User is logged in after the password is reset.
- name: logout_user
  endpoint:
    path: /logout
    method: POST
    data_selector: Empty object
- name: refresh_token
  endpoint:
    path: /refreshToken
    method: POST
    data_selector: user token
- name: impersonate_user
  endpoint:
    path: /impersonate
    method: POST
    data_selector: User token of the impersonated user and details of the impersonation.
- name: get_next_available_tilde_username
  endpoint:
    path: /tildeusername
    method: GET
    data_selector: Next available tilde username
- name: confirm_new_email
  endpoint:
    path: /user/confirm
    method: POST
    data_selector: user email
- name: download_attachment
  endpoint:
    path: /attachment
    method: GET
    data_selector: Attachment
- name: upload_attachment
  endpoint:
    path: /attachment
    method: PUT
    data_selector: Path to the attachment.
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: attachment_chunk
  endpoint:
    path: /attachment/chunk
    method: PUT
    data_selector: response
    params: {}
- name: pdf
  endpoint:
    path: /pdf
    method: GET
    data_selector: response
    params: {}
- name: edges
  endpoint:
    path: /edges
    method: GET
    data_selector: response
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: response
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: profiles
  endpoint:
    path: /profiles/search
    method: GET
    data_selector: profiles
- name: references
  endpoint:
    path: /references
    method: GET
    data_selector: references
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: group_edits
  endpoint:
    path: /groups/edits
    method: GET
    data_selector: edits
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: results
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: public_reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: public_submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: review
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: own_reviews
  endpoint:
    path: /get_own_reviews
    method: GET
    data_selector: result
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: records
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: results
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /api/v2/notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: submissions
  endpoint:
    path: /get_all_notes
    method: GET
    data_selector: replies
    params:
      invitation: '{venue_id}/-/Submission'
      details: replies
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: decision_stage
  endpoint:
    path: /decision_stage
    method: POST
    data_selector: decisions
    params:
      decision_deadline: required
      make_decisions_public: required
      release_decisions_to_authors: required
      release_decisions_to_reviewers: required
      release_decisions_to_area_chairs: required
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
    params: {}
- name: comments
  endpoint:
    path: /api/comments
    method: GET
    data_selector: comments
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Submission
- name: reviews
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Official_Review
- name: submissions
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: submissions
- name: notes
  endpoint:
    path: /api/v2/notes
    method: GET
    data_selector: notes
- name: submissions
  endpoint:
    path: /notes
    method: GET
    params:
      invitation: Your/Venue/ID/-/Submission
      details: directReplies
- name: reviews
  endpoint:
    path: /notes
    method: GET
    params:
      invitation: Your/Venue/ID/-/Official_Review
- name: note
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /get_all_notes
    method: GET
    data_selector: submissions
    params:
      invitation: Your/Venue/ID/-/Submission
- name: reviews
  endpoint:
    path: /get_all_notes
    method: GET
    data_selector: reviews
    params:
      invitation: Your/Venue/ID/-/Official_Review
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
- name: submissions
  endpoint:
    path: /forum/submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /forum/reviews
    method: GET
    data_selector: reviews
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Submission
- name: reviews
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Official_Review
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: records
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: records
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: submissions
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Submission
- name: reviews
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params:
      invitation: Your/Venue/ID/-/Official_Review
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: results
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: conferences
  endpoint:
    path: /conferences
    method: GET
    data_selector: conferences
    params: {}
- name: title
  endpoint:
    path: /title
    method: GET
    data_selector: value
    params: {}
- name: authors
  endpoint:
    path: /authors
    method: GET
    data_selector: value
    params: {}
- name: authorids
  endpoint:
    path: /authorids
    method: GET
    data_selector: value
    params: {}
- name: keywords
  endpoint:
    path: /keywords
    method: GET
    data_selector: value
    params: {}
- name: TLDR
  endpoint:
    path: /TLDR
    method: GET
    data_selector: value
    params: {}
- name: abstract
  endpoint:
    path: /abstract
    method: GET
    data_selector: value
    params: {}
- name: pdf
  endpoint:
    path: /pdf
    method: GET
    data_selector: value
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: response
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: edge
  endpoint:
    path: /reference/api-v2/entities/edge
    method: GET
- name: note
  endpoint:
    path: /reference/api-v2/entities/note
    method: GET
- name: invitation
  endpoint:
    path: /reference/api-v2/entities/invitation
    method: GET
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: results
- name: title
  endpoint:
    path: /api/v2/comments/title
    method: GET
    data_selector: value
    params: {}
- name: comment
  endpoint:
    path: /api/v2/comments/comment
    method: GET
    data_selector: value
    params: {}
- name: submissions
  endpoint:
    path: /forum
    method: GET
    data_selector: submissions
    params: {}
- name: title
  endpoint:
    path: /api/v2/title
    method: GET
    data_selector: value
    params: {}
- name: review
  endpoint:
    path: /api/v2/review
    method: GET
    data_selector: value
    params: {}
- name: rating
  endpoint:
    path: /api/v2/rating
    method: GET
    data_selector: value
    params: {}
- name: confidence
  endpoint:
    path: /api/v2/confidence
    method: GET
    data_selector: value
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: results
- name: rebuttal
  endpoint:
    path: /rebuttal
    method: POST
    data_selector: rebuttal
    params: {}
- name: activate_user
  endpoint:
    path: /activate/{token}
    method: PUT
    data_selector: user token
- name: moderate_user_profile
  endpoint:
    path: /profile/moderate
    method: POST
    data_selector: user token
- name: activate_email
  endpoint:
    path: /activatelink/{token}
    method: PUT
    data_selector: confirmed email
- name: check_if_activatable
  endpoint:
    path: /activatable/{token}
    method: GET
    data_selector: user token
- name: reset_password
  endpoint:
    path: /reset/{token}
    method: PUT
    data_selector: User is logged in after the password is reset.
- name: logout_user
  endpoint:
    path: /logout
    method: POST
    data_selector: Empty object
- name: check_if_resettable
  endpoint:
    path: /resettable/{token}
    method: GET
    data_selector: user token
- name: impersonate_user
  endpoint:
    path: /impersonate
    method: POST
    data_selector: User token of the impersonated user and details of the impersonation.
- name: get_next_available_username
  endpoint:
    path: /tildeusername
    method: GET
    data_selector: Next available tilde username
- name: confirm_new_email
  endpoint:
    path: /user/confirm
    method: POST
    data_selector: user email
- name: download_attachment
  endpoint:
    path: /attachment
    method: GET
    data_selector: Attachment
- name: upload_attachment
  endpoint:
    path: /attachment
    method: PUT
    data_selector: Path to the attachment.
- name: upload_attachment_chunk
  endpoint:
    path: /attachment/chunk
    method: PUT
- name: metareview
  endpoint:
    path: /metareview
    method: POST
    data_selector: value
    params:
      order: 1
      description: Please provide an evaluation of the quality, clarity, originality
        and significance of this work, including a list of its pros and cons. Your
        comment or reply (max 5000 characters). Add formatting using Markdown and
        formulas using LaTeX. For more information see https://openreview.net/faq
      required: true
      markdown: true
- name: recommendation
  endpoint:
    path: /recommendation
    method: POST
    data_selector: value
    params:
      order: 2
      value-dropdown:
      - Accept (Oral)
      - Accept (Poster)
      - Reject
      required: true
- name: confidence
  endpoint:
    path: /confidence
    method: POST
    data_selector: value
    params:
      order: 3
      value-radio:
      - '5: The area chair is absolutely certain'
      - '4: The area chair is confident but not absolutely certain'
      - '3: The area chair is somewhat confident'
      - '2: The area chair is not sure'
      - '1: The area chair''s evaluation is an educated guess'
      required: true
- name: attachment_chunk
  endpoint:
    path: /attachment/chunk
    method: PUT
    data_selector: response
    params: {}
- name: pdf_download
  endpoint:
    path: /pdf
    method: GET
    data_selector: response
    params: {}
- name: pdf_by_id
  endpoint:
    path: /pdf/{id}
    method: GET
    data_selector: response
    params: {}
- name: pdf_compare
  endpoint:
    path: /pdf/compare
    method: GET
    data_selector: response
    params: {}
- name: edges
  endpoint:
    path: /edges
    method: GET
    data_selector: response
    params: {}
- name: create_edge
  endpoint:
    path: /edges
    method: POST
    data_selector: response
    params: {}
- name: rename_edge
  endpoint:
    path: /edges/rename
    method: POST
    data_selector: response
    params: {}
- name: edges_count
  endpoint:
    path: /edges/count
    method: GET
    data_selector: response
    params: {}
- name: archived_edges
  endpoint:
    path: /edges/archive
    method: GET
    data_selector: response
    params: {}
- name: send_feedback
  endpoint:
    path: /feedback
    method: PUT
    data_selector: response
    params: {}
- name: user_profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: response
    params: {}
- name: save_user_profile
  endpoint:
    path: /profiles
    method: POST
    data_selector: response
    params: {}
- name: search_user_profiles
  endpoint:
    path: /profiles/search
    method: GET
    data_selector: response
    params: {}
- name: submission
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: review
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: profiles
  endpoint:
    path: /profiles/search
    method: GET
    data_selector: profiles
- name: references
  endpoint:
    path: /references
    method: GET
    data_selector: references
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: group_edits
  endpoint:
    path: /groups/edits
    method: GET
    data_selector: edits
- name: API V2 JSON
  endpoint:
    path: /api/v2/json
    method: GET
    data_selector: title
    params: {}
- name: API V1 JSON
  endpoint:
    path: /api/v1/json
    method: GET
    data_selector: title
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
    params: {}
- name: recommendation
  endpoint:
    path: /api/v2/recommendation
    method: GET
    data_selector: recommendation
    params: {}
- name: ethics_concerns
  endpoint:
    path: /api/v2/ethics_concerns
    method: GET
    data_selector: ethics_concerns
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: data
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: venue
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: results
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: results
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: notes
    params: {}
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /api/v1/submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /api/v1/reviews
    method: GET
    data_selector: reviews
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: records
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: title
  endpoint:
    path: /default_submission_form/title
    method: GET
    data_selector: value
    params: {}
- name: authors
  endpoint:
    path: /default_submission_form/authors
    method: GET
    data_selector: value
    params: {}
- name: authorids
  endpoint:
    path: /default_submission_form/authorids
    method: GET
    data_selector: value
    params: {}
- name: keywords
  endpoint:
    path: /default_submission_form/keywords
    method: GET
    data_selector: value
    params: {}
- name: TLDR
  endpoint:
    path: /default_submission_form/TLDR
    method: GET
    data_selector: value
    params: {}
- name: abstract
  endpoint:
    path: /default_submission_form/abstract
    method: GET
    data_selector: value
    params: {}
- name: pdf
  endpoint:
    path: /default_submission_form/pdf
    method: GET
    data_selector: value
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: results
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: comment
  endpoint:
    path: /api/comments
    method: GET
    data_selector: comments
    params: {}
- name: submission
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: title
  endpoint:
    data_selector: value
    params:
      type: string
      regex: .{1,500}
- name: comment
  endpoint:
    data_selector: value
    params:
      type: string
      minLength: 1
      maxLength: 5000
      input: textarea
      markdown: true
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: results
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: results
- name: title
  endpoint:
    method: GET
    data_selector: value
    params: {}
- name: review
  endpoint:
    method: GET
    data_selector: value
    params: {}
- name: rating
  endpoint:
    method: GET
    data_selector: value
    params: {}
- name: confidence
  endpoint:
    method: GET
    data_selector: value
    params: {}
- name: rebuttal
  endpoint:
    path: /rebuttal
    method: GET
    data_selector: rebuttal
    params: {}
- name: submissions
  endpoint:
    path: /api/v2/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /api/v2/notes
    method: GET
    data_selector: notes
    params: {}
- name: metareview
  endpoint:
    order: 1
    description: Please provide an evaluation of the quality, clarity, originality
      and significance of this work, including a list of its pros and cons. Your comment
      or reply (max 5000 characters). Add formatting using Markdown and formulas using
      LaTeX. For more information see https://openreview.net/faq
    value:
      param:
        type: string
        minLength: 1
        maxLength: 5000
        input: textarea
        markdown: true
- name: recommendation
  endpoint:
    order: 2
    value:
      param:
        type: string
        enum:
        - Accept (Oral)
        - Accept (Poster)
        - Reject
        input: radio
- name: confidence
  endpoint:
    order: 3
    value:
      param:
        type: string
        enum:
        - '5: The area chair is absolutely certain'
        - '4: The area chair is confident but not absolutely certain'
        - '3: The area chair is somewhat confident'
        - '2: The area chair is not sure'
        - '1: The area chair''s evaluation is an educated guess'
        input: radio
- name: title
  endpoint:
    data_selector: value
    params:
      order: 1
- name: decision
  endpoint:
    data_selector: value
    params:
      order: 2
      description: Decision
- name: comment
  endpoint:
    data_selector: value
    params:
      order: 3
      required: false
      description: ''
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: recommendation
  endpoint:
    path: /recommendation
    method: GET
    data_selector: value-radio
- name: ethics_concerns
  endpoint:
    path: /ethics_concerns
    method: GET
    data_selector: value-regex
- name: submissions
  endpoint:
    path: /api/v1/submissions
    method: GET
    data_selector: submissions
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: edges
  endpoint:
    path: /edges
    method: GET
    data_selector: content
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: content
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params: {}
- name: venues
  endpoint:
    path: /venues
    method: GET
    data_selector: venues
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: submissions
- name: conferences
  endpoint:
    path: /conferences
    method: GET
    data_selector: records
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
- name: reviews
  endpoint:
    path: /api/reviews
    method: GET
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: submissions
    params: {}
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: notes
    params: {}
notes:
- Some objects may return nulls in deeply nested fields
- Some endpoints may require additional parameters based on the specific API usage.
- Some endpoints may have rate limits.
- Ensure to handle token expiration gracefully.
- Uses OAuth2 with refresh token — requires setup of connected app in OpenReview
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Requires OAuth2 authentication setup.
- Some fields may return nulls based on permissions
- Some responses may include null values in specific fields
- API supports a variety of operations related to conferences and papers.
- Recruitment can be done at any time, but it's ideal to complete it well before the
  review stage begins.
- Recruitment is independent from assignment matching. Reviewers can be invited first,
  and matching is performed later once enough reviewers have accepted and submissions
  are in.
- Matching is done after recruitment but before the review stage opens.
- Some objects like Contact may return nulls in deeply nested fields
- OpenReview provides functionality for managing submissions, reviews, and discussions.
- The system supports a large number of concurrent users.
- Ensure to handle rate limiting appropriately.
- Some responses may vary depending on the user's permissions.
- Rate limits apply to API calls.
- OpenReview supports a flexible platform for customizing the review process.
- The system is designed for heavy usage, handling thousands of submissions.
- Requires OAuth2 setup for token generation
- Some operations may have rate limits that need to be handled.
- Requires setup of connected app in OpenReview
- Do not add members to the Program Chairs group directly. This will temporarily give
  the user access, but any changes to the venue configuration page will reset this
  group's membership to the users listed in the venue configuration page.
- Requires OAuth2 authentication for access to submissions.
- Requires OAuth token for access
- Some objects may not be fully populated, resulting in null fields
- An author of a submission cannot access their own paper, what is the problem?
- Requires OAuth2 authentication
- Rate limits apply
- Requires API key for authentication.
- Rate limits are enforced for API requests.
- API requires OAuth2 for access.
- This API requires OAuth2 authentication for access.
- Requires proper OAuth2 setup for access.
- Limited access may restrict available features or data.
- OpenReview must guarantee that none of our registered users appear in the Office
  of Foreign Assets Control of the U.S. Department of the Treasury (OFAC) SDN list.
- If you were notified that your profile has been limited, this means that the name
  on your profile matches that of a person on the SDN list.
- What is the max file size for uploads?
- Ensure the token is refreshed periodically to maintain access.
- My Profile is 'Limited'. This may restrict access to certain features.
- Requires setup of a connected app in OpenReview
- Requires API key for access
- OAuth2 authentication is required
- Uses OAuth2 with refresh token.
- You will need the profile_id, from_venue_id, and group_name for transferring expertise.
- The number of edges should correspond with the number of papers that you are excluding
  from Expertise Selection.
- Some endpoints may have rate limits that need to be respected.
- Requires OAuth2 setup.
- Some tasks, such as Expertise Selection, will continue to show as pending until
  the task expires, at which time it will be removed from the queue.
- API may have rate limits that need to be observed.
- Ensure your application is set up properly in OpenReview to obtain tokens.
- API requires OAuth2 authentication for access
- Some endpoints may require specific permissions to access.
- Ensure API access is enabled for your account
- In order for a reviewer to see their assigned submissions, they need to be logged
  into an OpenReview account that has read permissions for the submission.
- If all reviewers cannot access the forum page of their assigned submission, check
  that they are readers of the submission they are assigned to.
- Expertise Selection is a task for Program Committee members that gives them the
  opportunity to identify which previous publications they would like to be considered
  when being matched with submissions to review.
- Requires setup of connected app for OAuth2
- Requires OAuth2 setup with a connected app in OpenReview
- Ensure to authenticate before making API calls
- API requires OAuth2 authentication.
- Rate limits apply.
- Check that the email was not sent to a spam or junk folder.
- Try sending the password reset email again and double check that there are no typos
  in the email.
- Reset your password using a different email that is listed in your profile (such
  as personal email, previous institutional email).
- If after these steps, you are still having trouble resetting your password, contact
  us through the Feedback Form.
- Some API calls may have rate limits that need to be considered.
- Requires a valid OAuth2 setup for access.
- The API supports OAuth2 authentication.
- Rate limits may apply to API requests.
- Some endpoints may have rate limits that could affect data retrieval.
- Reviewers need to be logged into an OpenReview account that has read permissions
  for the submission.
- Check that the email received the invitation is added and confirmed to their account.
- If all reviewers cannot access the forum page, check that they are readers of the
  submission.
- API rate limits apply.
- Ensure correct OAuth scopes are set for the application.
- OpenReview only displays obfuscated emails (*****@umass.edu) and never releases
  full email addresses to the public.
- OpenReview requires every publication to have a license.
- Primary data objects representing submissions, reviews, comments, and decisions.
  Each Note contains flexible fields and fine-grained access controls, including readers,
  writers, and signatures. Notes are created as responses to Invitations, ensuring
  they adhere to predefined structures and permissions.
- Templates that define the structure, permissions, and rules for creating or editing
  entities like Notes and Edges. Invitations specify who can perform certain actions
  (invitees), who can read the resulting entities (readers), and the expected format
  of the content. They ensure consistency and enforce workflow rules.
- Collections of users (Profiles) that represent roles like authors, reviewers, or
  program chairs. Groups define permissions and access controls within the system.
  They are essential for managing who can read, write, or sign various entities.
- Mechanism for creating or modifying entities like Notes, Groups, and Invitations.
  An Edit encapsulates the changes and, upon submission, undergoes an inference process
  to apply these changes to the target entity. This allows for a record of all changes
  within the system.
- Represent individual users with unique identifiers (e.g., ~First_Last1). They store
  user information such as names, emails, affiliations, and relationships (e.g., co-authors,
  advisors). Profiles are linked to different roles and permissions in the system
  via Groups.
- Some operations may be rate-limited.
- Requires setup of OAuth2 app for API access.
- Each venue decides its own policy for how to handle requests to change the authorship
  list, order, or author details after the deadline.
- If you need to request a change to your submission after the submission deadline
  has passed, please contact the venue organizers.
- Check rate limits before making calls.
- Groups define who can read, write, sign, or modify content such as Notes and Invitations.
- API requires OAuth2 authentication with a connected app setup.
- Requires setup of OAuth2 credentials for API access.
- Requires setup of OAuth2 for authentication
- API requires setup of connected app in OpenReview
- Some fields may return null values depending on the submission status
- Profiles represent the identity of users on the platform—such as authors, reviewers,
  and area chairs.
- API may have rate limits that should be considered when designing ingestion pipelines.
- Requires OAuth2 authentication for API access.
- Requires OAuth2 authentication for access.
- Primary data objects representing submissions, reviews, comments, and decisions.
- Invitations specify who can perform certain actions and ensure consistency.
- Groups define permissions and access controls within the system.
- An Edit encapsulates the changes and undergoes an inference process.
- 'All notes need to have fields: readers, writers, signatures, and content.'
- The content dictionary needs to include only fields specified in the invitation.
- Requires OAuth2 authentication with a refresh token.
- API supports retrieving profiles and notes.
- Requires OAuth2 authentication with client credentials.
- Profiles represent the identity of users on the platform
- The vast majority of invitations will be created automatically at the appropriate
  point of the workflow.
- Profiles are flattened for tabular format.
- Some profile fields may be null due to varying number of affiliations.
- Use OAuth2 with refresh token for authentication.
- The API requires proper OAuth2 setup for access.
- If you do not enter a submission start date, submissions will open immediately upon
  venue deployment.
- Ensure correct OAuth2 setup to access the API.
- Requires setup of OAuth2 credentials through OpenReview.
- Edits are posted and then applied via inference rules defined by invitations.
- Uses OAuth2 with refresh token — requires setup of connected app in OpenReview.
- Requires setup of an OAuth2 application for API access.
- Invitations define the rules and permissions for creating or editing entities.
- Supplementary material must be uploaded using the specified API endpoint.
- All supplementary material must be self-contained and zipped into a single file.
  Note that supplementary material will be visible to reviewers and the public throughout
  and after the review period, and ensure all material is anonymized. The maximum
  file size is 100MB.
- The API has rate limits; consider implementing exponential backoff.
- Ensure your tokens are refreshed regularly to avoid unauthorized errors.
- Requires OAuth2 setup for authentication.
- Requires setup of OAuth2 app in OpenReview
- Some API calls may require specific permissions based on the user's role.
- API requires OAuth2 authentication setup.
- Be aware of rate limits when querying data
- Some API endpoints may not be available without proper authorization.
- Make sure to register your application to get the client_id and client_secret.
- OpenReview restricts duplication of certain profile information.
- Signing up with a public domain may take up to 2 weeks in moderation.
- API requires authentication via OAuth2.
- OpenReview doesn't take any action on PDF files so the name change in the file should
  also be authorized by the organizers of the venue.
- OAuth2 authentication is required to access data.
- Requires setup of connected app in api
- Use the correct OAuth scopes for accessing specific resources
- Requires OAuth2 authentication with a connected app in OpenReview
- Requires OAuth2 token for authentication.
- Ensure the name in OpenReview matches exactly with the name used in DBLP publications.
- If you sign up with a public domain, it may take up to 2 weeks for profiles to be
  activated.
- Requires OAuth2 authentication with a connected app.
- Rate limits may apply to API calls.
- Uses OAuth2 with refresh token for authentication
- Uses OAuth2 for authentication
- Uses OAuth2 authentication.
- If you need to access the link again to complete your profile registration, confirm
  an email or update a pending profile, you can request another activation link by
  going to https://openreview.net/login
- Requires OAuth2 authentication for access to API endpoints.
- Some fields may return nulls in deeply nested structures.
- Ensure OAuth2 setup is complete before attempting to access API
- Requires setup of OAuth2 in OpenReview
- Rate limits may apply based on usage
- Requires setup of OAuth2 credentials in the OpenReview platform.
- Some API calls may require specific permissions based on user roles.
- Requires setup of connected app in OpenReview.
- Some fields may return nulls in deeply nested objects
- API may have rate limits — consider implementing backoff strategies.
- Ensure proper OAuth scopes are set for the actions.
- Requires OAuth2 setup for proper authentication.
- 'The reviewer group should have the format: <venue_id>/Submission<number>/Reviewer_<new_name>'
- Check your work by navigating to the submission groups for the venue.
- The API requires an OAuth2 authentication setup.
- Requires setup of OAuth client in OpenReview
- Requires setup of OAuth2 credentials in OpenReview.
- Forms should be customized through the venue request form rather than editing an
  invitation directly.
- Requires OAuth2 authentication setup
- Rate limits apply to API calls
- Note that each key must be a valid decision option.
- API requires OAuth2 with refresh token.
- Rate limiting applies, ensure to handle errors.
- Ensure to handle token expiration.
- Ensure proper token handling for long-running processes.
- Some objects may return incomplete data depending on access permissions
- API rate limits may apply, check documentation for details.
- The API requires OAuth2 authentication.
- Full ARR venues are the only venue to be created.
- Hybrid venues require submission of two venue request forms.
- Some endpoints may have rate limits that will affect the frequency of requests.
- Supports adding and removing members from groups.
- 'Access the group editor at the following URL, replacing group_id with the actual
  ID of your group: https://openreview.net/group/edit?id=group_id'
- Some API responses may include nested fields
- API requires OAuth2 authentication with a refresh token.
- Some API endpoints may have rate limits.
- Refer to the API documentation for specific endpoint details.
- Some API responses may include fields that are null
- Must have API credentials for access.
- How to create, change, and delete notes
- 'Check your work: Go to one of the submission groups for the venue and check for
  your new reviewer group.'
- 'Check your work: Go to one of the submission pages and check for your review.'
- Requires an OAuth2 token for access.
- 'Required fields include: invitation, forum, signatures, readers, writers, content.'
- Posting a submission requires a Note object with fields like invitation, forum,
  signatures, readers, writers, and content.
- Uses OAuth2 — requires setup of connected app in OpenReview
- Be cautious when deleting notes as they can be difficult to recover
- The result should be a dictionary with the query profile ID and the OpenReview Profile
  Object.
- The dev site uses a separate database from the live site - this means that no information
  is shared between the two sites.
- Emails are disabled on the dev site, except for signup confirmation links.
- Requires setting up an OAuth2 connected application
- Rate limiting may apply based on usage
- The submission deadline set through the venue request form is actually only the
  advertised due date.
- The true deadline is the expiration date, which is set to 30 minutes after the submission
  deadline.
- Markdown example provided for customizing the instructions field
- Requires setup of OAuth application in OpenReview
- Each key must be a valid decision option.
- Uses OAuth2 with refresh token
- Some API endpoints may require specific query parameters for successful requests.
- Ensure proper permissions are set for API access
- Requires an OAuth2 setup for API access
- Authentication is required to access the API.
- The API is rate-limited. Be cautious with the number of requests.
- Ensure to follow the API usage guidelines for rate limiting.
- The program committee is represented as a group, like Reviewers, Area Chairs, Action
  Editors, etc.
- Some objects may have specific behaviors that require attention.
- Requires an OAuth2 setup for authentication
- Uses OAuth2 for authentication.
- PCs may want to programmatically desk-reject submissions that are missing PDF files
  once the submission deadline has passed.
- OAuth2 authentication is required.
- Requires a valid OAuth token to access API endpoints.
- OAuth2 authentication is required for API access.
- The dev site uses a separate database from the live site- this means that no information
  is shared between the two sites.
- Getting author profiles for each submission can be inefficient if the venue has
  too many submissions.
- Rate limiting may apply to API calls
- Some objects may not be accessible without proper permissions.
- The submission deadline is set to 30 minutes after the submission deadline.
- Program organizers can create their own conflict policy using the python client
- Running the function will return a list of conflicts
- Some endpoints may require specific permissions
- Rate limits apply to API usage
- Ensure proper OAuth setup for API access
- Requires setup for OAuth2 authentication
- API requires OAuth2 authentication and setup.
- Requires setup of connected app in OpenReview for API access.
- Requires OAuth2 setup for API access
- Run the Paper Matching Setup to make assignments.
- Reviewers will be notified when they are assigned to a paper.
- Area Chairs can modify reviewer assignments by adding a variable in the Group Content
  for the venue.
- To enable modifications before deployment, add a specific variable in the Group
  Content.
- Requires a valid OAuth2 token for access
- Rate limits are enforced, check API response headers
- API does not support pagination.
- Users must have readership permission to the objects they are trying to compute
  the scores.
- Some operations may require specific permissions.
- Rate limiting applies to API calls.
- Posting a lot of edges takes time, so it's important that you can maintain connection
  while uploading.
- Requires setup of OAuth2 for API access
- Some API endpoints require specific permissions.
- Find your request form id in the id= portion of the URL of the venue request form
- Find your venue ID listed in the venue ID field of the venue request form
- Change bid_start_date to datetime.datetime(year=2024,month=9,day=30,hour=12,minute=0,second=0)
- Change bid_due_date to datetime.datetime(year=2024,month=10,day=8,hour=12,minute=30,second=0)
- Some API calls may require specific OAuth2 scopes.
- Custom max papers may limit assignment capabilities.
- API requires authentication
- Removing the Abstract Registration Deadline is not as simple as deleting the date
  from the form.
- API supports fetching submissions and reviews.
- 'To get the profile id use the call: openreview.tools.get_profile(''role@icml.cc'')'
- Requires OAuth2 for authentication
- Requires authorization setup through OpenReview
- Some fields may return null for certain submissions
- Requires OAuth2 authentication for all requests
- Authors can select one primary Machine Learning subject area.
- Reviewers need to select subject areas of expertise.
- Make sure to follow the API rate limits to avoid throttling.
- API V2 supports a variety of entities and actions.
- Some fields may vary per venue
- Getting the author profiles for each submission can be inefficient if the venue
  has too many submissions.
- To create custom conflicts, use the appropriate conflict invitation for the user
  type.
- Optionally set a label for your custom conflicts to help with querying.
- Requires setup of OAuth2 credentials.
- This document is for large venues (>2000 submissions) that need to manually calculate
  scores.
- API supports OAuth2 authentication.
- Rate limits are in place for API calls.
- Computation and uploading scores are separate steps.
- Ensure good internet connection due to long process times.
- Reviewers can bid on a scale of Very High interest to Very Low interest, and they
  can modify these scores until Bidding closes.
- Uses OAuth2 with refresh token — requires setup of connected app in API
- Every time you update a bid you need to set the signatures.
- To remove bids, you need to a the `ddate` value using a timestamp in milliseconds.
- To restore bids, you need to get the deleted bid and remove the `ddate` value.
- Make sure you have good internet connection since these processes take a long time.
- For conflicts, setup_committee_matching handles both the computation and the upload
  of conflicts.
- Ensure to handle rate limiting on API requests.
- Ensure to follow API rate limits to avoid throttling.
- Ensure good internet connection for long-running processes
- Avoid simultaneous uploads and computations to prevent errors
- Create all the necessary invitations by calling setup_committee_matching and passing
  no parameters
- Make sure you have good internet connection since these processes take a long time
- 'If uploading fails: Delete the score edges, Check that the edge count is 0, Re-run
  setup_committee_matching'
- API requires setup of connected app in OpenReview.
- Requires setup of connected app in OpenReview for OAuth2.
- Some endpoints may have rate limiting.
- The user IDs need to be their profile.id's.
- Some API features may require additional permissions.
- Ensure to use profile IDs for adding users to groups.
- If you would like for Area Chairs to be able to modify reviewer assignments, you
  can enable this by adding a variable in the Group Content for your venue.
- If you would like for Area Chairs to be able to modify reviewer assignments before
  they are deployed, you can enable this by adding a variable in the Group Content
  for your venue.
- Ensure to handle OAuth2 token expiration.
- Use API 1 client for submissions.
- Ensure to use profile IDs for assignments.
- If you make a mistake when uploading assignments, you can undo them by deleting
  all assignment edges and removing the users from the associated paper committee
  groups.
- The API requires OAuth2 authentication for access.
- The UI currently doesn’t support deploying multiple assignment configurations.
- If your venue has SACs assigned to ACs and you are deploying AC assignments, modify
  the script to add the assigned SAC to the paper group.
- Some endpoints may return paginated results
- Some reviewers have a custom reduced paper load which appears in the edge browser
  as 'Custom Max Papers'. You cannot directly assign a reviewer to more papers than
  their custom max papers.
- Ensure correct OAuth scopes are configured for access.
- Each user only has 1 custom max papers edge.
- Posting assignment edges in bulk
- Some API responses may contain nested objects that need careful handling.
- Requires setup of OAuth2 credentials in OpenReview
- Check API version for compatibility
- Ensure the tail value is the profile id of the user.
- API requires authentication via OAuth2
- The API may have rate limits that could affect ingestion.
- Rate limits are enforced for API calls.
- API may have rate limits or access restrictions
- Ensure correct setup of OAuth credentials in the API management console.
- Do not remove the parenthesized tokens.
- Any fields in curly braces will be populated with the information for each paper.
- If you run the Post Decision Stage multiple times, new decision notifications will
  not be sent again.
- Subject area selection is crucial for matching reviewers with submissions
- Subject_Score is added to the Scores Specification.
- Affinity scores should help make better matchings within a subject area.
- A matching may not entirely contain assignments that have a subject score or match.
- Some endpoints may have rate limits
- Ensure to check the API version for compatibility.
- Requires setup of connected app in API
- Some objects may contain missing fields
- API rate limits may apply
- This document is for large venues (>2000 submissions) that need to manually calculate
  scores. Smaller venues should refer to the directions here.
- Ensure to check the status of score computation.
- Uploading scores and computing conflicts should not be done simultaneously.
- Uploading scores and computing conflicts should not be done at the same time.
- These users should either be removed or be reminded to sign up.
- By assignment time there should be no email members in the group.
- Ensure to handle rate limits as specified in the API documentation
- Requires proper setup for authentication
- The comment field in the CSV is optional.
- Users must be added using their profile IDs.
- Update your access token periodically.
- Ensure data is synced between the consoles
- API version 2.0 supports various entities including submissions and comments.
- Ensure all profile IDs are correctly mapped before assignments.
- The best way to revise camera-ready papers is to navigate to the camera-ready super
  invitation for the conference.
- If the invitation is not found, it's likely that you set a different name for it.
- Rate limiting is enforced, avoid excessive requests.
- Authentication requires OAuth2 with a refresh token.
- API rate limits may apply.
- Endpoint paths may vary based on the API version.
- Verify the edge count is 0 before re-uploading assignments.
- To get Edge Invitations, examine the venue group's content for invitation IDs.
- Supports fetching of edges and notes via the API.
- Uses OAuth2 authentication
- If you query for a field that doesn't exist, the code will exit with an error.
- Profiles may have different lengths for history values.
- The new assignments can be seen using the same 'Edit Assignments' link next to the
  'Deployed' configuration.
- Some API responses may include nested structures, which may require special handling
- API requires OAuth2 for authentication.
- Ensure that the correct scopes are set for the application.
- Emails are obfuscated in the profile data.
- You can retrieve an individual's OpenReview profile object by their name or email
- Ensure proper OAuth setup to access reviews and submissions.
- Some notes may return nulls in deeply nested fields
- If you run the Post Decision Stage multiple times, new decision notifications will
  not be sent again even when 'Yes, send an email notification to the authors' is
  selected.
- To re-send decision notifications, you should use the python client.
- Expect a list of review form fields like ['title', 'review', 'rating', 'confidence']
- If a value does not exist for that key, put an empty string in its place.
- You may also want to know the profile information of the reviewer associated with
  a review.
- Requires setup of OAuth2 credentials
- Some fields may return nulls in deeply nested structures
- Specific per-paper invitations are used for reviews, rebuttals, comments, and decisions
- API access requires setting up OAuth2 credentials.
- Ensure OAuth settings are configured correctly before integration.
- Check the API documentation for detailed usage limits
- To get all active submissions for a double-blind venue, use the Blind Submission
  invitation.
- To get accepted submissions, include 'directReplies' in the details.
- Reviewers will be able to submit multiple Review Revisions, with the last one being
  the final one shown in the Official Review.
- You might not be able to edit all the original fields of your review.
- Requires setup of OAuth2 for API access.
- To get all 'active' submissions for a double-blind venue, pass your venue's blind
  submission invitation into get_all_notes().
- For each submission, add any replies with the Official Review invitation to a list
  of Reviews.
- If you want additional information about the reviewer, you can get their profile
  using the Profile ID
- The first option will be automatically enabled after the Decision Stage is run.
- If you had already manually posted decisions, the bulk upload will overwrite them.
- Ensure to handle rate limiting as per API guidelines.
- Some endpoints may require additional permissions.
- Some Edge Invitations allow for edges to be posted with a label.
- You can use the same method to get any type of Edge by simply changing the invitation
  ID.
- Some endpoints may return nested data structures.
- If you query for a field that doesn't exist, the code will exit with an error. Rather
  than getting the value directly, I recommend using the .get(<fieldname>,<null_value>)
  dictionary method.
- For querying most fields in a submission/profile, you will need to look within the
  content property.
- Ensure the OAuth2 credentials are set correctly in the secrets.
- If you want to query more than one profile at a time, you can use our tools module.
- If you want to get all the profiles and their publication, you can use the previous
  call and add the parameter `with_publications=True`.
- Follow OAuth2 flow for authentication.
- Ensure proper scopes are set when requesting tokens.
- Requires OAuth2 setup for token generation.
- Uses OAuth2 with refresh token for authentication.
- Some responses may include null values in certain fields
- Ensure correct OAuth setup for access.
- Make sure to check API rate limits to avoid throttling.
- Defaults to now
- 'Default: ''Registration'''
- 'Default: ''Reviewer Registration'' or ''Area Chair Registration'''
- Optional
- If you want additional information about the reviewer, you can get their profile
  using the Profile ID.
- Some endpoints may have rate limits that require handling.
- Rate limits apply to API usage.
- API requires OAuth2 authentication
- Data retrieval may have limitations based on user permissions
- Requires OAuth2 setup with client credentials.
- Requires proper OAuth2 setup for API access
- Requires OAuth2 setup for API access.
- Rate limiting may apply
- Ensure to handle rate limits as specified in the API documentation.
- Some endpoints may have specific permissions and roles required.
- The `get_all_notes()` method is used to retrieve a list of notes that match a given
  filter.
- Specific per-paper invitations are used for retrieving reviews and comments.
- Ensure to handle pagination if the number of comments or submissions is large.
- To get all submissions for a double-blind venue, pass your venue's submission invitation
  to get_all_notes().
- To get reviews for submissions, include details='directReplies' when calling get_all_notes().
- Some objects may return nulls in deeply nested fields.
- To get all 'active' submissions for a double-blind venue, pass your venue's blind
  submission invitation into get_all_notes.
- To get all submissions for a double-blind venue regardless of their status, pass
  your venue's submission invitation to get_all_notes.
- Ensure that the correct permissions are set for the client.
- Some endpoints may require additional permissions based on user roles.
- Requires setup of your venue's submission invitation
- Ensure correct scope for API access
- Reviewers may not have access to all submissions.
- Double-blind submission requires specific invitation format
- Ensure to have access to the OpenReview API documentation for specific usage.
- Ensure to set up OAuth2 credentials before using the API.
- Requires OAuth2 setup for access.
- 'Rebuttals can include Markdown formatting and LaTeX formulas, max length: 2500'
- API requires a connected app for OAuth2 configuration.
- Some responses may contain null values in certain fields
- Rate limiting is enforced, consider batching requests.
- Ensure OAuth2 is properly configured in the OpenReview platform.
- 'Registration Start Date: Optional, Defaults to now'
- 'Registration Deadline: Required'
- 'Registration Expiration Date: Required'
- 'Registration Name: Optional, Default: ''Registration'''
- 'Form Title: Required, Default: ''Reviewer Registration'' or ''Area Chair Registration'''
- 'Form Instructions: Required'
- 'Additional Form Options: Optional, Defaults to [default Registration Form]'
- 'Remove Form Options: Optional'
- Refer to the documentation for specific endpoint details and limitations.
- Requires OAuth2 authentication.
- Rate limits may apply.
- Requires a valid OAuth2 token to access endpoints.
- The Decision Stage should not be run until after the submission deadline, except
  in the case of public, single blind venues.
- Make Decisions Public will not work if submissions are not public.
- Release Decisions to Authors will not work if 'Make Decisions Public' is selected
  while submissions are not public.
- API requires OAuth2 authentication with refresh token.
- Some endpoints may have rate limits that should be monitored.
- Some API endpoints may require specific permissions or roles.
- Ensure proper OAuth2 setup for access
- Requires the setup of OAuth credentials for API access
- Ensure to handle rate limits while making requests.
- Your comment or reply (max 5000 characters). Add formatting using Markdown and formulas
  using LaTeX.
- Requires OAuth2 authentication for accessing the API.
- Add formatting using Markdown and formulas using LaTeX.
- 'Rebuttals can include Markdown formatting and LaTeX formulas, for more information
  see https://openreview.net/faq, max length: 2500'
- API supports various endpoints for submissions and reviews.
- Requires OAuth2 setup for accessing the API
- Requires specific permissions for accessing certain endpoints.
- Requires OAuth2 authentication for accessing the API
- Ensure to handle token expiration correctly as it uses OAuth2 with refresh token.
- Requires OAuth2 with refresh token for authentication.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Ensure all required parameters are included in the request.'
- '401 Unauthorized: Check your OAuth token for validity.'
- '404 Not Found: Verify the endpoint URL and request parameters.'
- '401 Unauthorized: Invalid token or expired token.'
- '404 Not Found: Check the endpoint path or resource identifier.'
- '429 Too Many Requests: Rate limit exceeded.'
- '404 Not Found: Check the endpoint or resource path'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check your credentials and token.'
- '401 Unauthorized: Check token validity or permissions'
- '404 Not Found: Verify the endpoint and parameters'
- '500 Internal Server Error: Retry the request later'
- '401 Unauthorized: Check your access token and refresh if needed.'
- '404 Not Found: Ensure the endpoint is correct and the resource exists.'
- '401 Unauthorized: Check your OAuth token and permissions.'
- '429 Too Many Requests: Rate limit exceeded. Please slow down your requests.'
- '403 Forbidden: Check user permissions.'
- '401 Unauthorized: Verify OAuth token validity.'
- '403 Forbidden: Check API permissions.'
- '404 Not Found: Verify the endpoint path.'
- '403 Forbidden: Check user permissions'
- '429 Too Many Requests: Rate limit exceeded'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check your token and permissions'
- '401 Unauthorized: Check your credentials and permissions.'
- '401 Unauthorized: Check your authentication credentials.'
- '401 Unauthorized: Check your token'
- '403 Forbidden: Insufficient permissions'
- '401 Unauthorized: Check your API key or token'
- '401 Unauthorized: Invalid credentials'
- '403 Forbidden: Access denied'
- '404 Not Found: Endpoint does not exist'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Check API key or token.'
- '401 Unauthorized: Check your credentials.'
- '404 Not Found: Ensure the endpoint is correct.'
- '401 Unauthorized: Check your OAuth token.'
- '401 Unauthorized: Check your token or permissions.'
- '401 Unauthorized: Check token validity and scopes.'
- '401 Unauthorized: Check your API key and permissions'
- '403 Forbidden: You do not have permission to access this resource.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Verify your credentials.'
- '403 Forbidden: Check your permissions.'
- '401 Unauthorized: Check your API token and permissions.'
- '429 Too Many Requests: Rate limit exceeded. Please wait before retrying.'
- '401 Unauthorized: Check your OAuth token'
- '404 Not Found: Ensure the endpoint URL is correct'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '404 Not Found: Verify the endpoint and parameters.'
- '401 Unauthorized: Check your credentials'
- '404 Not Found: Verify the endpoint path'
- '401 Unauthorized: Check OAuth token and permissions'
- '401 Unauthorized: Check your credentials and permissions'
- '404 Not Found: The requested resource does not exist'
- '401 Unauthorized: Check your credentials and try again.'
- '429 Too Many Requests: You have hit the rate limit.'
- '403 Forbidden: Check your permissions or API key.'
- '429 Too Many Requests: Rate limit exceeded, try again later.'
- '401 Unauthorized: Recheck OAuth token or scopes.'
- '401 Unauthorized: Check your OAuth credentials.'
- '401 Unauthorized: Verify your credentials and token.'
- '401 Unauthorized: Check your access token and permissions.'
- '500 Internal Server Error: Try again later.'
- '401 Unauthorized: Check credentials and permissions.'
- '401 Unauthorized: Check your OAuth credentials'
- '401 Unauthorized: Check your API token or permissions'
- 'INVALID_REQUEST: Check the request parameters.'
- 'UNAUTHORIZED: Verify your API key or token.'
- 'FORBIDDEN: You do not have permission to access this resource.'
- '401 Unauthorized: Check your authorization token.'
- '404 Not Found: Validate endpoint paths.'
- '429 Too Many Requests: Reduce request frequency.'
- '401 Unauthorized: Check your token or credentials.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '429 Too Many Requests: Rate limit exceeded, please slow down your requests.'
- '401 Unauthorized: Check if the access token is valid or has expired.'
- '404 Not Found: Verify the endpoint URL.'
- '400 Bad Request: Check the format of the uploaded file.'
- '401 Unauthorized: Verify your access token is valid.'
- '401 Unauthorized: Check your credentials and token validity.'
- '401 Unauthorized: Check your access token.'
- '404 Not Found: Verify the endpoint or resource exists.'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of API calls'
- 'INVALID_CREDENTIALS: Check your client ID and secret'
- '403 Forbidden: Ensure you have the necessary permissions'
- '404 Not Found: Resource does not exist.'
- '401 Unauthorized: Check your API key or OAuth token.'
- '429 Too Many Requests: Slow down your request rate.'
- '404 Not Found: Check the requested resource path.'
- '401 Unauthorized: Check your API key and permissions.'
- '401 Unauthorized: Verify client credentials and token'
- '404 Not Found: Check the endpoint path'
- '401 Unauthorized: Check your OAuth token and permissions'
- '404 Not Found: Verify the endpoint path and parameters'
- '404 Not Found: The requested resource could not be found.'
- 'DBLP URL error: Ensure the provided DBLP URL is yours.'
- '401 Unauthorized: Recheck OAuth token or credentials'
- '404 Not Found: Check the endpoint and parameters.'
- '403 Forbidden: Verify permissions and access rights.'
- '429 Too Many Requests: Throttle API calls to avoid rate limiting.'
- '404 Not Found: The requested resource could not be found'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Verify authentication credentials.'
- '404 Not Found: Ensure the endpoint and resource exist.'
- '401 Unauthorized: Check token validity and permissions'
- '429 Too Many Requests: Limit request rate or try again later'
- '401 Unauthorized: Check your authentication credentials'
- '403 Forbidden: You do not have permission to access this resource'
- '401 Unauthorized: Check your token or OAuth settings.'
- '404 Not Found: Ensure the endpoint exists and the path is correct.'
- '401 Unauthorized: Please check your credentials.'
- 'QUERY_TIMEOUT: Break down filters or increase selectivity'
- '403 Forbidden: Check permissions or token validity.'
- '404 Not Found: Validate endpoint path.'
- '401 Unauthorized: Check your API key or token.'
- '401 Unauthorized: Check your OAuth token and scopes'
- '429 Too Many Requests: Reduce request rate.'
- '401 Unauthorized: Check token validity.'
- '401 Unauthorized: Check if the token is valid.'
- '403 Forbidden: Insufficient permissions.'
- '404 Not Found: Check endpoint and parameters'
- '401 Unauthorized: Token may be expired or invalid.'
- '403 Forbidden: Access denied, check your permissions.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Ensure your OAuth token is valid.'
- '401 Unauthorized: Check OAuth token validity'
- '401 Unauthorized: Check API credentials.'
- '404 Not Found: Verify endpoint URL.'
- '401 Unauthorized: Check OAuth token or permissions'
- '500 Internal Server Error: Try again later or contact support.'
- '401 Unauthorized: Check your access token and permissions'
- '404 Not Found: Verify the endpoint URL'
- '404 Not Found: Group ID does not exist'
- '400 Bad Request: Check request parameters and body.'
- '401 Unauthorized: Verify your authentication details.'
- '401 Unauthorized: Ensure the OAuth token is valid and has not expired.'
- '403 Forbidden: Check if the user has permission to access the requested resource.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify your access token.'
- '500 Internal Server Error: Try again later'
- '500 Internal Server Error: An error occurred on the server'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Ensure your token is valid'
- '404 Not Found: Endpoint may not exist.'
- '401 Unauthorized: Check OAuth token'
- '400 Bad Request: Check the request format and parameters'
- '401 Unauthorized: Ensure valid authentication credentials'
- '429 Too Many Requests: Rate limit exceeded, try again later'
- '401 Unauthorized: Check your API token or credentials.'
- '404 Not Found: Ensure the requested resource exists.'
- '403 Forbidden: Ensure you have sufficient permissions.'
- '403 Forbidden: Check permissions.'
- '401 Unauthorized: Invalid credentials or token expired'
- '401 Unauthorized: Check your credentials or token.'
- '401 Unauthorized: Check token validity'
- '403 Forbidden: Permissions issue'
- '429 Too Many Requests: Please reduce the rate of API calls'
- '404 Not Found: Check the URL or resource identifier'
- '401 Unauthorized: Verify API key or token'
- '401 Unauthorized: Check your credentials and token expiration'
- '404 Not Found: Verify the endpoint and resource.'
- '401 Unauthorized: Check your token or client credentials'
- '403 Forbidden: Check API key and permissions.'
- '500 Internal Server Error: Retry the request later.'
- '401 Unauthorized: Verify API authentication credentials.'
- 'If uploading fails: Delete the score edges, Check that the edge count is 0, Re-run
  setup_committee_matching'
- '401 Unauthorized: Check OAuth token validity.'
- '401 Unauthorized: Check that your access token is valid.'
- '401 Unauthorized: Check if your token is valid and not expired.'
- '403 Forbidden: Check your API key and permissions.'
- '401 Unauthorized: Check your token or client credentials.'
- '401 Unauthorized: Check your API key'
- '429 Too Many Requests: Rate limiting exceeded'
- 'INVALID_REQUEST: Check request parameters and data format'
- 'NOT_FOUND: Ensure the specified resource exists'
- 'FORBIDDEN: Verify user permissions for the requested action'
- '404 Not Found: Ensure the endpoint exists.'
- '404 Not Found: Verify endpoint and resource'
- '403 Forbidden: You do not have access to this resource'
- '400 Bad Request: Check the request parameters'
- '403 Forbidden: Ensure you have the correct permissions.'
- '404 Not Found: Check the endpoint and parameters'
- '400 Bad Request: Validate request format and required fields'
- '401 Unauthorized: Check your OAuth token or scopes'
- '401 Unauthorized: Check if the OAuth token is valid and not expired'
- '429 Too Many Requests: Reduce the frequency of API calls'
- 'Error: Recompute scores if the status indicates an error.'
- '429 Too Many Requests: Reduce the frequency of requests'
- '401 Unauthorized: Check your API keys or token validity'
- '403 Forbidden: You do not have access to this resource.'
- '401 Unauthorized: Check client credentials and permissions'
- '404 Not Found: Verify the endpoint path and resource existence'
- '404 Not Found: Check if the requested resource exists'
- '401 Unauthorized: Check your credentials and token expiration.'
- '403 Forbidden: Check if your access token is valid.'
- '401 Unauthorized: Verify credentials and permissions.'
- '401 Unauthorized: Check API key or OAuth token.'
- '404 Not Found: Check the endpoint path or parameters'
- '401 Unauthorized: Check your credentials and scopes.'
- '404 Not Found: Resource does not exist or is not accessible.'
- '403 Forbidden: Ensure you have permissions to access this resource.'
- '403 Forbidden: Invalid credentials'
- '401 Unauthorized: Check your authorization credentials.'
- '404 Not Found: Verify the endpoint path is correct.'
- '403 Forbidden: Check permissions for the requested resource'
- '400 Bad Request: Check query parameters'
- '401 Unauthorized: Verify your authentication credentials.'
- '404 Not Found: Confirm the endpoint path.'
- '401 Unauthorized: Check authentication credentials.'
- '401 Unauthorized: Check credentials or token expiration.'
- '500 Internal Server Error: An error occurred on the server.'
- '401 Unauthorized: Check token validity or permissions.'
- '401 Unauthorized: Ensure the token is valid and not expired.'
- '404 Not Found: Verify endpoint path.'
- '404 Not Found: Check the endpoint path or resource ID.'
- '403 Forbidden: Ensure proper permissions are set for the API key.'
- '500 Internal Server Error: Retry after a short delay.'
- '404 Not Found: Verify the endpoint and resource existence'
- '401 Unauthorized: Check your API token and permissions'
- '400 Bad Request: Ensure parameters are correctly set.'
- '403 Forbidden: Check your permissions'
- '403 Forbidden: Check if your token has the right permissions.'
- '404 Not Found: Verify the resource path and parameters.'
- '400 Bad Request: Check the invitation ID or parameters passed.'
- '401 Unauthorized: Ensure your credentials are correct and the token is valid.'
- '404 Not Found: Check the endpoint path or parameters.'
- '401 Unauthorized: Check your client credentials and permissions.'
- '403 Forbidden: Ensure that your account has access to the requested resource.'
- '403 Forbidden: Check if the API key has the necessary permissions.'
- '404 Not Found: Verify the endpoint path and parameters.'
- 'Unauthorized: Check your API key or OAuth credentials'
- 'Not Found: Verify the invitation ID'
- 'Internal Server Error: Retry after some time'
- '500 Internal Server Error: Retry the request.'
- '401 Unauthorized: Check your client_id and client_secret'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify OAuth token'
- '404 Not Found: Endpoint or resource does not exist'
- '401 Unauthorized: Check your credentials or token expiration.'
- '429 Too Many Requests: Throttle your requests.'
- '500 Internal Server Error: Retry the request after some time'
- '401 Unauthorized: Check your token and permissions.'
- '403 Forbidden: Ensure you have access to the requested resources.'
- '401 Unauthorized: Check your access token or permissions.'
- '400 Bad Request: Check the request format and required fields.'
- '401 Unauthorized: Check your API credentials.'
- '401 Unauthorized: Check your OAuth2 token.'
- '401 Unauthorized: Invalid or expired token'
- '401 Unauthorized: Check your token.'
- '401 Unauthorized: Verify your credentials and ensure correct permissions'
- '404 Not Found: Check the endpoint URL and parameters'
- '403 Forbidden: Check your permissions or access rights.'
- '404 Not Found: Verify the endpoint or resource ID.'
- '401 Unauthorized: Check your credentials and token'
- '403 Forbidden: Check if you have the right permissions for the requested resource.'
- '401 Unauthorized: Check if your tokens are valid.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuth2
  - Authorization
  - OAuthToken
  - Note
  - Invitation
  - Group
  - Member
  - AccessToken
  - RefreshToken
  - profile.id
  - venue
  - client_v1
  - client_v2
  - Edge
  - client
  - review_invitation
  - Token
client:
  base_url: https://api.openreview.net
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://auth.openreview.net/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
