resources:
- name: merchant_application
  endpoint:
    path: /merchant_applications
    method: POST
    data_selector: merchant_application
- name: merchant_application_sign_up
  endpoint:
    path: /merchant_applications/sign_up
    method: POST
    data_selector: merchant_application
- name: merchant
  endpoint:
    path: /v1/merchant
    method: GET
    data_selector: ''
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: ''
    params: {}
- name: purge_test_data
  endpoint:
    path: /v1/merchant/purge-test-data
    method: POST
    data_selector: ''
    params: {}
- name: transaction.authorized
  endpoint:
    path: /events/transaction.authorized
    method: GET
    data_selector: data
- name: transaction.completed
  endpoint:
    path: /events/transaction.completed
    method: GET
    data_selector: data
- name: transaction.voided
  endpoint:
    path: /events/transaction.voided
    method: GET
    data_selector: data
- name: transaction.failed
  endpoint:
    path: /events/transaction.failed
    method: GET
    data_selector: data
- name: transaction.updated
  endpoint:
    path: /events/transaction.updated
    method: GET
    data_selector: data
- name: transaction.pending_parent_settlement
  endpoint:
    path: /events/transaction.pending_parent_settlement
    method: GET
    data_selector: data
- name: payment_method.expiring
  endpoint:
    path: /events/payment_method.expiring
    method: GET
    data_selector: data
- name: payment_method.expired
  endpoint:
    path: /events/payment_method.expired
    method: GET
    data_selector: data
- name: payment_method.updated
  endpoint:
    path: /events/payment_method.updated
    method: GET
    data_selector: data
- name: payment_method.closed
  endpoint:
    path: /events/payment_method.closed
    method: GET
    data_selector: data
- name: recurring_charge.created
  endpoint:
    path: /events/recurring_charge.created
    method: GET
    data_selector: data
- name: recurring_charge.updated
  endpoint:
    path: /events/recurring_charge.updated
    method: GET
    data_selector: data
- name: recurring_charge.deleted
  endpoint:
    path: /events/recurring_charge.deleted
    method: GET
    data_selector: data
- name: recurring_charge.completed
  endpoint:
    path: /events/recurring_charge.completed
    method: GET
    data_selector: data
- name: recurring_charge.payment_method.expiring
  endpoint:
    path: /recurring_charge/payment_method/expiring
    method: GET
    data_selector: data
    params: {}
- name: recurring_charge.payment_method.expired
  endpoint:
    path: /recurring_charge/payment_method/expired
    method: GET
    data_selector: data
    params: {}
- name: recurring_charge.payment_method.updated
  endpoint:
    path: /recurring_charge/payment_method/updated
    method: GET
    data_selector: data
    params: {}
- name: recurring_charge.payment_method.closed
  endpoint:
    path: /recurring_charge/payment_method/closed
    method: GET
    data_selector: data
    params: {}
- name: recurring_charge.occurrence.created
  endpoint:
    path: /recurring_charge/occurrence/created
    method: GET
    data_selector: data
    params: {}
- name: recurring_charge.occurrence.updated
  endpoint:
    path: /recurring_charge/occurrence/updated
    method: GET
    data_selector: data
    params: {}
- name: recurring_charge.occurrence.paid
  endpoint:
    path: /recurring_charge/occurrence/paid
    method: GET
    data_selector: data
    params: {}
- name: recurring_charge.occurrence.failed
  endpoint:
    path: /recurring_charge/occurrence/failed
    method: GET
    data_selector: data
    params: {}
- name: recurring_charge.occurrence.ignored
  endpoint:
    path: /recurring_charge/occurrence/ignored
    method: GET
    data_selector: data
    params: {}
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: id
    params: {}
- name: charges
  endpoint:
    path: /v1/charges/{chargeId}/capture
    method: POST
    data_selector: results
- name: surcharge
  endpoint:
    path: /bank-accounts/{bank_account_id}/surcharge
    method: GET
    data_selector: results
- name: authorization_holds
  endpoint:
    path: /v1/charges/holds
    method: GET
    data_selector: results
- name: refund
  endpoint:
    path: /v1/charges/{chargeId}/refund
    method: POST
    data_selector: id
    params: {}
- name: void
  endpoint:
    path: /v1/transactions/{transactionId}/void
    method: POST
    data_selector: id
    params: {}
- name: credit
  endpoint:
    path: /v1/credits
    method: POST
    data_selector: id
    params: {}
- name: submit_signature
  endpoint:
    path: /v1/transactions/{transactionId}/sign
    method: POST
    data_selector: signature_id
    params: {}
- name: get_signature
  endpoint:
    path: /v1/signatures/{signatureId}
    method: GET
    data_selector: id
    params: {}
- name: get_transaction
  endpoint:
    path: /v1/transactions/{transactionId}
    method: GET
    data_selector: id
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '20'
- name: recurring_charges
  endpoint:
    path: /v1/recurring/charges
    method: POST
    data_selector: ''
    params: {}
- name: recurring_charge_occurrences
  endpoint:
    path: /v1/recurring/charges/{id}/occurrences
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '20'
- name: cards
  endpoint:
    path: /v1/cards
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '20'
- name: banks
  endpoint:
    path: /v1/banks
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '20'
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: ''
    params: {}
- name: tokens
  endpoint:
    path: /v1/tokens
    method: POST
    data_selector: ''
    params: {}
- name: events
  endpoint:
    path: /v1/events/{eventId}
    method: GET
    data_selector: ''
    params: {}
- name: recurring_charge
  endpoint:
    path: /v1/recurring/charges/{id}
    method: GET
    data_selector: recurring_charge
    params: {}
- name: update_recurring_charge
  endpoint:
    path: /v1/recurring/charges/{id}
    method: PUT
    data_selector: recurring_charge
    params: {}
- name: cancel_recurring_charge
  endpoint:
    path: /v1/recurring/charges/{id}/cancel
    method: POST
    data_selector: recurring_charge
    params: {}
- name: delete_recurring_charge
  endpoint:
    path: /v1/recurring/charges/{id}
    method: DELETE
    data_selector: recurring_charge
    params: {}
- name: list_recurring_charges
  endpoint:
    path: /v1/recurring/charges
    method: GET
    data_selector: recurring_charges
    params:
      page: 1
      page_size: 20
- name: preview_recurring_charge
  endpoint:
    path: /v1/recurring/charges/schedule
    method: GET
    data_selector: recurring_charge_projection
    params: {}
- name: get_occurrence
  endpoint:
    path: /v1/recurring/charges/{id}/occurrences/{occurrenceId}
    method: GET
    data_selector: recurring_charge_occurrence
    params: {}
- name: pay_occurrence
  endpoint:
    path: /v1/recurring/charges/{id}/occurrences/{occurrenceId}/pay
    method: POST
    data_selector: recurring_charge_occurrence
    params: {}
- name: ignore_occurrence
  endpoint:
    path: /v1/recurring/charges/{id}/occurrences/{occurrenceId}/ignore
    method: POST
    data_selector: ignored_occurrence
    params: {}
- name: events
  endpoint:
    path: /v1/events
    method: GET
    data_selector: results
    params:
      page: 1
      page_size: 20
- name: charge
  endpoint:
    path: /charges
    method: POST
    data_selector: charge
    params: {}
- name: credit
  endpoint:
    path: /credits
    method: POST
    data_selector: credit
    params: {}
- name: event
  endpoint:
    path: /events
    method: GET
    data_selector: event
    params: {}
- name: loan
  endpoint:
    path: /loans
    method: POST
    data_selector: loan
    params: {}
- name: merchant
  endpoint:
    path: /merchants
    method: GET
    data_selector: merchant
    params: {}
- name: merchant_account
  endpoint:
    path: /merchant_account
    method: GET
    data_selector: records
- name: recurring_charge
  endpoint:
    path: /recurring_charge
    method: GET
    data_selector: records
- name: refund
  endpoint:
    path: /refund
    method: GET
    data_selector: records
- name: schedule
  endpoint:
    path: /schedule
    method: GET
    data_selector: schedule
    params: {}
- name: search_results
  endpoint:
    path: /search_results
    method: GET
    data_selector: results
    params: {}
- name: signature
  endpoint:
    path: /signature
    method: POST
    data_selector: signature
    params: {}
- name: token
  endpoint:
    path: /token
    method: POST
    data_selector: token
    params: {}
- name: webhooks
  endpoint:
    path: /update-merchant
    method: POST
    data_selector: events
    params: {}
- name: recurring_charge.payment_method.expiring
  endpoint:
    path: /recurring_charge/payment_method/expiring
    method: POST
    data_selector: data
- name: recurring_charge.payment_method.expired
  endpoint:
    path: /recurring_charge/payment_method/expired
    method: POST
    data_selector: data
- name: recurring_charge.payment_method.updated
  endpoint:
    path: /recurring_charge/payment_method/updated
    method: POST
    data_selector: data
- name: recurring_charge.payment_method.closed
  endpoint:
    path: /recurring_charge/payment_method/closed
    method: POST
    data_selector: data
- name: recurring_charge.occurrence.created
  endpoint:
    path: /recurring_charge/occurrence/created
    method: POST
    data_selector: data
- name: recurring_charge.occurrence.updated
  endpoint:
    path: /recurring_charge/occurrence/updated
    method: POST
    data_selector: data
- name: recurring_charge.occurrence.paid
  endpoint:
    path: /recurring_charge/occurrence/paid
    method: POST
    data_selector: data
- name: recurring_charge.occurrence.failed
  endpoint:
    path: /recurring_charge/occurrence/failed
    method: POST
    data_selector: data
- name: recurring_charge.occurrence.ignored
  endpoint:
    path: /recurring_charge/occurrence/ignored
    method: POST
    data_selector: data
- name: transaction.authorized
  endpoint:
    path: /events/transaction.authorized
    method: GET
    data_selector: data
- name: transaction.completed
  endpoint:
    path: /events/transaction.completed
    method: GET
    data_selector: data
- name: transaction.voided
  endpoint:
    path: /events/transaction.voided
    method: GET
    data_selector: data
- name: transaction.failed
  endpoint:
    path: /events/transaction.failed
    method: GET
    data_selector: data
- name: transaction.updated
  endpoint:
    path: /events/transaction.updated
    method: GET
    data_selector: data
- name: transaction.pending_parent_settlement
  endpoint:
    path: /events/transaction.pending_parent_settlement
    method: GET
    data_selector: data
- name: payment_method.expiring
  endpoint:
    path: /events/payment_method.expiring
    method: GET
    data_selector: data
- name: payment_method.expired
  endpoint:
    path: /events/payment_method.expired
    method: GET
    data_selector: data
- name: payment_method.updated
  endpoint:
    path: /events/payment_method.updated
    method: GET
    data_selector: data
- name: payment_method.closed
  endpoint:
    path: /events/payment_method.closed
    method: GET
    data_selector: data
- name: recurring_charge.created
  endpoint:
    path: /events/recurring_charge.created
    method: GET
    data_selector: data
- name: recurring_charge.updated
  endpoint:
    path: /events/recurring_charge.updated
    method: GET
    data_selector: data
- name: recurring_charge.deleted
  endpoint:
    path: /events/recurring_charge.deleted
    method: GET
    data_selector: data
- name: recurring_charge.completed
  endpoint:
    path: /events/recurring_charge.completed
    method: GET
    data_selector: data
- name: contact
  endpoint:
    path: /contacts/{contact_id}
    method: GET
    data_selector: records
    params: {}
- name: contact_by_source_id
  endpoint:
    path: /contacts/source-id
    method: GET
    data_selector: records
    params:
      source_id: MyPartner:contact-125
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: results
- name: contact
  endpoint:
    path: /contacts/{contact_id}
    method: PATCH
    data_selector: records
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: delete_contact
  endpoint:
    path: /contacts/{contact_id}
    method: DELETE
- name: create_contact_hash
  endpoint:
    path: /contacts/{contact_id}/hash
    method: POST
- name: get_payment_methods
  endpoint:
    path: /contacts/{contact_id}/payment-methods
    method: GET
- name: create_payment_method
  endpoint:
    path: /contacts/{contact_id}/payment-methods
    method: POST
- name: get_payment_method
  endpoint:
    path: /contacts/{contact_id}/payment-methods/{payment_method_id}
    method: GET
- name: update_payment_method
  endpoint:
    path: /contacts/{contact_id}/payment-methods/{payment_method_id}
    method: PATCH
- name: payment_method
  endpoint:
    path: /contacts/{contact_id}/payment-methods/{payment_method_id}
    method: DELETE
- name: uploaded_files
  endpoint:
    path: /contacts/{contact_id}/attachments
    method: GET
- name: upload_file
  endpoint:
    path: /contacts/{contact_id}/attachments
    method: POST
- name: view_file_status
  endpoint:
    path: /contacts/{contact_id}/attachments/{attachment_id}
    method: GET
- name: delete_uploaded_file
  endpoint:
    path: /contacts/{contact_id}/attachments/{attachment_id}
    method: DELETE
- name: info_requests
  endpoint:
    path: /contacts/info-requests
    method: GET
    data_selector: results
- name: info_requests_for_contact
  endpoint:
    path: /contacts/{contact_id}/info-requests
    method: GET
    data_selector: results
- name: make_payment
  endpoint:
    path: /contacts/{contact_id}/make-payment
    method: POST
- name: info_request
  endpoint:
    path: /contacts/info-requests
    method: POST
    data_selector: id
- name: info_request_hash
  endpoint:
    path: /contacts/info-requests/{inforequest_id}/hash
    method: POST
    data_selector: hash
- name: cancel_info_request
  endpoint:
    path: /contacts/info-requests/{info_request_id}
    method: PATCH
    data_selector: id
- name: delete_info_request
  endpoint:
    path: /contacts/info-requests/{info_request_id}
    method: DELETE
    data_selector: id
- name: bank_accounts
  endpoint:
    path: /bank-accounts
    method: GET
    data_selector: '[].id'
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: results
    params:
      page: 1
      page_size: 20
- name: invoice
  endpoint:
    path: /invoices
    method: POST
    data_selector: invoice
    params: {}
- name: get_invoice
  endpoint:
    path: /invoices/{invoice_id}
    method: GET
    data_selector: invoice
    params: {}
- name: Delete Attachment
  endpoint:
    path: /invoices/{invoice_id}/attachments/{attachment_id}
    method: DELETE
- name: Search Payments
  endpoint:
    path: /payments
    method: GET
    params:
      start_date: datetime
      end_date: datetime
      q: String
      qf: String
      order_by: Array of String
      page: Int32
      page_size: Int32
- name: invoice
  endpoint:
    path: /invoices/{invoice_id}
    method: PATCH
    data_selector: attachments
    params: {}
- name: delete_invoice
  endpoint:
    path: /invoices/{invoice_id}
    method: DELETE
    data_selector: ''
    params: {}
- name: create_invoice_message
  endpoint:
    path: /invoices/{invoice_id}/messages
    method: POST
    data_selector: email_addresses
    params: {}
- name: download_attachment
  endpoint:
    path: /invoices/{invoice_id}/attachments/{attachment-id}
    method: GET
    data_selector: ''
    params: {}
- name: invoice
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
- name: invoice_message
  endpoint:
    path: /invoice_messages
    method: GET
    data_selector: invoice_messages
- name: invoice_payment
  endpoint:
    path: /invoice_payments
    method: GET
    data_selector: invoice_payments
- name: line_item
  endpoint:
    path: /line_items
    method: GET
    data_selector: line_items
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
- name: payment_request
  endpoint:
    path: /payment_requests
    method: GET
    data_selector: payment_requests
- name: refer_new_merchants
  endpoint:
    path: /refer/apflow-refer
    method: GET
- name: connect_new_merchants_sign_up_flow
  endpoint:
    path: /connect/connect-partner-apflow
    method: GET
- name: merchant_application
  endpoint:
    path: /api/v1/merchant_applications/sign_up
    method: POST
    data_selector: response
    params: {}
- name: gateway_credentials
  endpoint:
    path: /gateway-credentials
    method: GET
    data_selector: ''
    params: {}
- name: merchant_application
  endpoint:
    path: /merchant_applications
    method: POST
    data_selector: merchant_application
- name: gateway_credentials
  endpoint:
    path: /gateway-credentials
    method: GET
- name: merchant_application_sign_up
  endpoint:
    path: /api/v1/merchant_applications/sign_up
    method: POST
    data_selector: merchant_application
    params: {}
- name: gateway_credentials
  endpoint:
    path: /gateway-credentials
    method: GET
    data_selector: application
    params: {}
- name: disconnect_merchant
  endpoint:
    path: /api/v1/merchants/{public_key}/deauthorize_application
    method: DELETE
- name: upf-checkout
  endpoint:
    path: /upf-checkout
    method: POST
    data_selector: records
    params: {}
- name: bank_accounts
  endpoint:
    path: /v2/merchants/<mid>/relationships/bank-accounts
    method: GET
    data_selector: data
- name: oauth_token
  endpoint:
    path: /v2/oauth/token
    method: POST
    data_selector: access_token
- name: hosted_fields
  endpoint:
    path: /hostedfields
    method: GET
    data_selector: fields
    params: {}
- name: hosted_fields
  endpoint:
    path: /hostedfields
    method: POST
    data_selector: fields
    params: {}
- name: merchant
  endpoint:
    path: /api/v1/merchant
    method: GET
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: response
    params: {}
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: recurring_charge
    params: {}
- name: recurring_charges
  endpoint:
    path: /v1/recurring/charges
    method: POST
    data_selector: recurring_charge
    params: {}
- name: bank_accounts
  endpoint:
    path: /bank-accounts
    method: GET
    data_selector: ''
    params: {}
- name: surcharge
  endpoint:
    path: /bank-accounts/{bank_account_id}/surcharge
    method: GET
    data_selector: ''
    params:
      amount: '500000'
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: ''
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: POST
    data_selector: id
- name: payment_methods
  endpoint:
    path: /contacts/{contact_id}/payment-methods
    method: POST
    data_selector: id
- name: charges
  endpoint:
    path: /charges
    method: POST
    data_selector: id
- name: contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: id
    params: {}
- name: info_request
  endpoint:
    path: /contacts/info-requests
    method: POST
    data_selector: hash
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: POST
    data_selector: id
    params:
      test_mode: 'true'
- name: bank_accounts
  endpoint:
    path: /bank-accounts
    method: GET
    data_selector: ''
- name: contacts
  endpoint:
    path: /contacts
    method: POST
    data_selector: ''
    params: {}
- name: create_invoice
  endpoint:
    path: /invoices
    method: POST
    data_selector: ''
    params: {}
- name: payment_pages
  endpoint:
    path: /payment-pages
    method: GET
    data_selector: payment_pages
- name: charge
  endpoint:
    path: /charge/create-charge
    method: POST
- name: merchant
  endpoint:
    path: /connect/connect-merchant
    method: GET
- name: payment
  endpoint:
    path: /charge/create-charge
    method: POST
- name: events
  endpoint:
    path: /v1/events
    method: GET
    data_selector: results
    params:
      page: 1
      page_size: 2
- name: merchant_application
  endpoint:
    path: /merchant_applications
    method: POST
    data_selector: merchant_application
- name: merchant_application_sign_up
  endpoint:
    path: /merchant_applications/sign_up
    method: POST
    data_selector: merchant_application
- name: merchant
  endpoint:
    path: /v1/merchant
    method: GET
    data_selector: merchant
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: status
    params: {}
- name: purge_test_data
  endpoint:
    path: /v1/merchant/purge-test-data
    method: POST
    data_selector: ''
    params: {}
- name: recurring_charge_payment_method_expiring
  endpoint:
    path: /recurring_charge/payment_method/expiring
    method: POST
    data_selector: data
- name: recurring_charge_payment_method_expired
  endpoint:
    path: /recurring_charge/payment_method/expired
    method: POST
    data_selector: data
- name: recurring_charge_payment_method_updated
  endpoint:
    path: /recurring_charge/payment_method/updated
    method: POST
    data_selector: data
- name: recurring_charge_payment_method_closed
  endpoint:
    path: /recurring_charge/payment_method/closed
    method: POST
    data_selector: data
- name: recurring_charge_occurrence_created
  endpoint:
    path: /recurring_charge/occurrence/created
    method: POST
    data_selector: data
- name: recurring_charge_occurrence_updated
  endpoint:
    path: /recurring_charge/occurrence/updated
    method: POST
    data_selector: data
- name: recurring_charge_occurrence_paid
  endpoint:
    path: /recurring_charge/occurrence/paid
    method: POST
    data_selector: data
- name: recurring_charge_occurrence_failed
  endpoint:
    path: /recurring_charge/occurrence/failed
    method: POST
    data_selector: data
- name: recurring_charge_occurrence_ignored
  endpoint:
    path: /recurring_charge/occurrence/ignored
    method: POST
    data_selector: data
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: id
- name: transaction.authorized
  endpoint:
    path: /transaction/authorized
    method: GET
    data_selector: data
- name: transaction.completed
  endpoint:
    path: /transaction/completed
    method: GET
    data_selector: data
- name: transaction.voided
  endpoint:
    path: /transaction/voided
    method: GET
    data_selector: data
- name: transaction.failed
  endpoint:
    path: /transaction/failed
    method: GET
    data_selector: data
- name: transaction.updated
  endpoint:
    path: /transaction/updated
    method: GET
    data_selector: data
- name: transaction.pending_parent_settlement
  endpoint:
    path: /transaction/pending_parent_settlement
    method: GET
    data_selector: data
- name: payment_method.expiring
  endpoint:
    path: /payment_method/expiring
    method: GET
    data_selector: data
- name: payment_method.expired
  endpoint:
    path: /payment_method/expired
    method: GET
    data_selector: data
- name: payment_method.updated
  endpoint:
    path: /payment_method/updated
    method: GET
    data_selector: data
- name: payment_method.closed
  endpoint:
    path: /payment_method/closed
    method: GET
    data_selector: data
- name: recurring_charge.created
  endpoint:
    path: /recurring_charge/created
    method: GET
    data_selector: data
- name: recurring_charge.updated
  endpoint:
    path: /recurring_charge/updated
    method: GET
    data_selector: data
- name: recurring_charge.deleted
  endpoint:
    path: /recurring_charge/deleted
    method: GET
    data_selector: data
- name: recurring_charge.completed
  endpoint:
    path: /recurring_charge/completed
    method: GET
    data_selector: data
- name: recurring_charge.payment_method.expiring
  endpoint:
    path: /recurring_charge/payment_method/expiring
    method: GET
    data_selector: data
- name: charges
  endpoint:
    path: /v1/charges/{chargeId}/capture
    method: POST
    data_selector: id
    params: {}
- name: surcharge
  endpoint:
    path: /bank-accounts/{bank_account_id}/surcharge
    method: GET
    data_selector: ''
    params: {}
- name: authorization_holds
  endpoint:
    path: /v1/charges/holds
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '5'
- name: refund
  endpoint:
    path: /v1/charges/{chargeId}/refund
    method: POST
    data_selector: id
- name: void
  endpoint:
    path: /v1/transactions/{transactionId}/void
    method: POST
    data_selector: id
- name: credit
  endpoint:
    path: /v1/credits
    method: POST
    data_selector: id
- name: submit_signature
  endpoint:
    path: /v1/transactions/{transactionId}/sign
    method: POST
    data_selector: signature_id
- name: get_signature
  endpoint:
    path: /v1/signatures/{signatureId}
    method: GET
    data_selector: id
- name: get_transaction
  endpoint:
    path: /v1/transactions/{transactionId}
    method: GET
    data_selector: id
- name: transactions_by_source_id
  endpoint:
    path: /v1/transactions/source-id
    method: GET
    data_selector: transactions
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: results
    params:
      page: 1
      page_size: 20
- name: recurring_charges
  endpoint:
    path: /v1/recurring/charges
    method: POST
    data_selector: recurring_charge
    params: {}
- name: recurring_charge_occurrences
  endpoint:
    path: /v1/recurring/charges/{id}/occurrences
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '20'
- name: saved_cards
  endpoint:
    path: /v1/cards
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '20'
- name: charge
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: results
- name: create_saved_card
  endpoint:
    path: /v1/cards
    method: POST
    data_selector: results
- name: saved_banks
  endpoint:
    path: /v1/banks
    method: GET
    data_selector: results
- name: create_saved_bank
  endpoint:
    path: /v1/banks
    method: POST
    data_selector: id
- name: update_saved_bank
  endpoint:
    path: /v1/banks/{bankId}
    method: PATCH
    data_selector: id
- name: delete_saved_bank
  endpoint:
    path: /v1/banks/{bankId}
    method: DELETE
    data_selector: id
- name: get_token
  endpoint:
    path: /v1/tokens/{tokenId}
    method: GET
    data_selector: id
- name: recurring_charge
  endpoint:
    path: /v1/recurring/charges/{id}
    method: GET
    data_selector: id
    params: {}
- name: update_recurring_charge
  endpoint:
    path: /v1/recurring/charges/{id}
    method: PUT
    data_selector: id
    params: {}
- name: cancel_recurring_charge
  endpoint:
    path: /v1/recurring/charges/{id}/cancel
    method: POST
    data_selector: id
    params: {}
- name: delete_recurring_charge
  endpoint:
    path: /v1/recurring/charges/{id}
    method: DELETE
    data_selector: id
    params: {}
- name: list_recurring_charges
  endpoint:
    path: /v1/recurring/charges
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '20'
- name: preview_recurring_charge
  endpoint:
    path: /v1/recurring/charges/schedule
    method: GET
    data_selector: amount
    params: {}
- name: get_occurrence
  endpoint:
    path: /v1/recurring/charges/{id}/occurrences/{occurrenceId}
    method: GET
    data_selector: id
    params: {}
- name: pay_occurrence
  endpoint:
    path: /v1/recurring/charges/{id}/occurrences/{occurrenceId}/pay
    method: POST
    data_selector: id
    params: {}
- name: ignore_occurrence
  endpoint:
    path: /v1/recurring/charges/{id}/occurrences/{occurrenceId}/ignore
    method: POST
    data_selector: id
    params: {}
- name: events
  endpoint:
    path: /v1/events
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '20'
- name: merchant_account
  endpoint:
    path: /merchant_account
    method: GET
    data_selector: records
- name: recurring_charge
  endpoint:
    path: /recurring_charge
    method: GET
    data_selector: records
- name: recurring_charge_occurrence
  endpoint:
    path: /recurring_charge_occurrence
    method: GET
    data_selector: records
- name: refund
  endpoint:
    path: /refund
    method: GET
    data_selector: records
- name: schedule
  endpoint:
    path: /schedule
    method: GET
    data_selector: schedule
- name: search_results
  endpoint:
    path: /search_results
    method: GET
    data_selector: results
- name: signature
  endpoint:
    path: /signature
    method: POST
    data_selector: signature
- name: token
  endpoint:
    path: /token
    method: POST
    data_selector: token
- name: charge
  endpoint:
    path: /charge
    method: GET
    data_selector: records
    params: {}
- name: credit
  endpoint:
    path: /credit
    method: GET
    data_selector: records
    params: {}
- name: event
  endpoint:
    path: /event
    method: GET
    data_selector: records
    params: {}
- name: loan
  endpoint:
    path: /loan
    method: GET
    data_selector: records
    params: {}
- name: merchant
  endpoint:
    path: /merchant
    method: GET
    data_selector: records
    params: {}
- name: recurring_charge.payment_method.expiring
  endpoint:
    path: /recurring_charge/payment_method/expiring
    method: POST
    data_selector: data
- name: recurring_charge.payment_method.expired
  endpoint:
    path: /recurring_charge/payment_method/expired
    method: POST
    data_selector: data
- name: recurring_charge.payment_method.updated
  endpoint:
    path: /recurring_charge/payment_method/updated
    method: POST
    data_selector: data
- name: recurring_charge.payment_method.closed
  endpoint:
    path: /recurring_charge/payment_method/closed
    method: POST
    data_selector: data
- name: recurring_charge.occurrence.created
  endpoint:
    path: /recurring_charge/occurrence/created
    method: POST
    data_selector: data
- name: recurring_charge.occurrence.updated
  endpoint:
    path: /recurring_charge/occurrence/updated
    method: POST
    data_selector: data
- name: recurring_charge.occurrence.paid
  endpoint:
    path: /recurring_charge/occurrence/paid
    method: POST
    data_selector: data
- name: recurring_charge.occurrence.failed
  endpoint:
    path: /recurring_charge/occurrence/failed
    method: POST
    data_selector: data
- name: recurring_charge.occurrence.ignored
  endpoint:
    path: /recurring_charge/occurrence/ignored
    method: POST
    data_selector: data
- name: transaction.authorized
  endpoint:
    path: /events/transaction/authorized
    method: GET
    data_selector: data
- name: transaction.completed
  endpoint:
    path: /events/transaction/completed
    method: GET
    data_selector: data
- name: transaction.voided
  endpoint:
    path: /events/transaction/voided
    method: GET
    data_selector: data
- name: transaction.failed
  endpoint:
    path: /events/transaction/failed
    method: GET
    data_selector: data
- name: transaction.updated
  endpoint:
    path: /events/transaction/updated
    method: GET
    data_selector: data
- name: transaction.pending_parent_settlement
  endpoint:
    path: /events/transaction/pending_parent_settlement
    method: GET
    data_selector: data
- name: payment_method.expiring
  endpoint:
    path: /events/payment_method/expiring
    method: GET
    data_selector: data
- name: payment_method.expired
  endpoint:
    path: /events/payment_method/expired
    method: GET
    data_selector: data
- name: payment_method.updated
  endpoint:
    path: /events/payment_method/updated
    method: GET
    data_selector: data
- name: payment_method.closed
  endpoint:
    path: /events/payment_method/closed
    method: GET
    data_selector: data
- name: recurring_charge.created
  endpoint:
    path: /events/recurring_charge/created
    method: GET
    data_selector: data
- name: recurring_charge.updated
  endpoint:
    path: /events/recurring_charge/updated
    method: GET
    data_selector: data
- name: recurring_charge.deleted
  endpoint:
    path: /events/recurring_charge/deleted
    method: GET
    data_selector: data
- name: recurring_charge.completed
  endpoint:
    path: /events/recurring_charge/completed
    method: GET
    data_selector: data
- name: recurring_charge.payment_method.expiring
  endpoint:
    path: /events/recurring_charge/payment_method/expiring
    method: GET
    data_selector: data
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: results
    params: {}
- name: contact
  endpoint:
    path: /contacts/{contact_id}
    method: GET
    data_selector: records
    params: {}
- name: contact_by_source_id
  endpoint:
    path: /contacts/source-id
    method: GET
    data_selector: records
    params:
      source_id: ''
- name: contacts
  endpoint:
    path: /contacts/{contact_id}
    method: PATCH
    data_selector: records
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: delete_contact
  endpoint:
    path: /contacts/{contact_id}
    method: DELETE
- name: create_contact_hash
  endpoint:
    path: /contacts/{contact_id}/hash
    method: POST
- name: get_payment_methods
  endpoint:
    path: /contacts/{contact_id}/payment-methods
    method: GET
- name: create_payment_method
  endpoint:
    path: /contacts/{contact_id}/payment-methods
    method: POST
- name: get_payment_method
  endpoint:
    path: /contacts/{contact_id}/payment-methods/{payment_method_id}
    method: GET
- name: update_payment_method
  endpoint:
    path: /contacts/{contact_id}/payment-methods/{payment_method_id}
    method: PATCH
- name: info_requests
  endpoint:
    path: /contacts/info-requests
    method: GET
    data_selector: results
    params:
      page: 1
      page_size: 20
- name: info_requests_for_contact
  endpoint:
    path: /contacts/{contact_id}/info-requests
    method: GET
    data_selector: results
    params: {}
- name: Delete PaymentMethod
  endpoint:
    path: /contacts/{contact_id}/payment-methods/{payment_method_id}
    method: DELETE
- name: Introspect Token
  endpoint:
    path: /oauth/introspect
    method: POST
- name: Get Uploaded Files
  endpoint:
    path: /contacts/{contact_id}/attachments
    method: GET
- name: Upload Files to be Attached
  endpoint:
    path: /contacts/{contact_id}/attachments
    method: POST
- name: View Uploaded File Status
  endpoint:
    path: /contacts/{contact_id}/attachments/{attachment_id}
    method: GET
- name: Delete Uploaded File
  endpoint:
    path: /contacts/{contact_id}/attachments/{attachment_id}
    method: DELETE
- name: make_payment
  endpoint:
    path: /contacts/{contact_id}/make-payment
    method: POST
    data_selector: payment
    params: {}
- name: info_requests
  endpoint:
    path: /contacts/info-requests
    method: POST
    data_selector: id
    params: {}
- name: info_request_hash
  endpoint:
    path: /contacts/info-requests/{inforequest_id}/hash
    method: POST
    data_selector: hash
    params: {}
- name: cancel_info_request
  endpoint:
    path: /contacts/info-requests/{info_request_id}
    method: PATCH
    data_selector: id
    params: {}
- name: delete_info_request
  endpoint:
    path: /contacts/info-requests/{info_request_id}
    method: DELETE
    data_selector: id
    params: {}
- name: bank_accounts
  endpoint:
    path: /bank-accounts
    method: GET
    data_selector: ''
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: results
- name: invoice
  endpoint:
    path: /invoices
    method: POST
    data_selector: id
- name: get_invoice
  endpoint:
    path: /invoices/{invoice_id}
    method: GET
    data_selector: id
- name: invoices
  endpoint:
    path: /invoices/{invoice_id}/attachments/{attachment_id}
    method: DELETE
- name: payments
  endpoint:
    path: /payments
    method: GET
    params:
      start_date: datetime
      end_date: datetime
      q: String
      qf: String
      order_by: Array of String
      page: Int32
      page_size: Int32
- name: invoice
  endpoint:
    path: /invoices/{invoice_id}
    method: PATCH
- name: delete_invoice
  endpoint:
    path: /invoices/{invoice_id}
    method: DELETE
- name: create_invoice_message
  endpoint:
    path: /invoices/{invoice_id}/messages
    method: POST
- name: download_attachment
  endpoint:
    path: /invoices/{invoice_id}/attachments/{attachment-id}
    method: GET
- name: invoice
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
- name: invoice_payment
  endpoint:
    path: /invoice_payments
    method: GET
    data_selector: invoice_payments
- name: line_item
  endpoint:
    path: /line_items
    method: GET
    data_selector: line_items
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
- name: payment_token
  endpoint:
    path: /assets/api/v1/chargeio.min.js
    method: GET
    data_selector: token
    params: {}
notes:
- All parameter values included in a request must be in plain text format. This API
  doesn't accept encoded values.
- All requests must use HTTPS.
- Test-mode secret key only allows creating transactions against TEST merchant bank
  accounts.
- Merchants can provide an optional surcharge_amount element to a charge request to
  create a charge with surcharge.
- Credits must be enabled by 8am on a per-account basis.
- A recurring charge cannot be scheduled to start on the same day it is created.
- Occurrences are returned in descending order of their creation
- The API supports pagination over the result set
- Use Basic Auth with secret_key.
- Search for contact using contact_id or source_id
- Requests must include the access token in the Authorization header with Bearer authentication
  scheme.
- The Payment Portal REST API only accepts encrypted communications using HTTPS.
- Any parameters that you do not specify in the PATCH will be left as-is.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Requires setup of connected app in api
- The default value for page is 1.
- You should be familiar with using OAuth and writing code that interacts with REST
  endpoints using the HTTP protocol.
- OAuth is required for all integrations.
- Event details include an authorization_code, which you’ll need to exchange for an
  access_token.
- Use your Public key, Secret keys, and Account IDs to authenticate API requests
- Uses UPF Checkout HTML tag to display payment methods.
- This type of integration requires a partner OAuth application.
- UPF should be integrated into your site by a developer.
- Hosted Fields protect your payment page by tokenizing payment information.
- Hosted fields provide SAQ-A PCI compliance, the highest level of PCI compliance.
- Tokenization occurs automatically and is triggered by events.
- A recurring charge cannot be scheduled to start on the same day it’s created.
- Requires a partner OAuth application for integration
- An InfoRequest must have a Contact associated with it.
- For the saved payment method to be displayed in Card Vault, the Contact must have
  a tag called 'default'.
- Updates may appear in Hosted Fields at any time. Bookmark this page and check back
  often to learn about the latest updates.
- Requires the bank_account_id and contact_id for test mode.
- Fields can be pre-populated using query parameters.
- You must have an 8am payment integration.
- Your users must have both your mobile app and the target app installed.
- 8am maintains a Level 1 PCI certification, which requires annual audits.
- Allow your customers to unlink and relink their 8am merchant account.
- The Payment Gateway API provides a list of messages and errors.
- Use hosted field JavaScript library to tokenize payment details without passing
  data through servers.
- The events you receive aren’t batched or sequenced.
- Anyone can send data to the URL configured for your webhook.
- Merchant and payment gateway API requests are authenticated using HTTP Basic Authentication.
- For a successful integration, you should be familiar with writing code that interacts
  with REST endpoints using the HTTP protocol as well as the OAuth 2.0 Authorization
  Framework.
- Create a payment form with hosted fields to tokenize payment details.
- Uses basic authentication with secret key for requests.
- CORS is allowed for calls to the /v1/tokens endpoint.
- One-time tokens expire five minutes after creation.
- Updates to the contact are made via PATCH requests.
- Set the test_mode parameter on each object to true for testing.
- Creates an Invoice using the properties included in the request.
- If you are creating an invoice for test purposes, set test_mode to true.
errors:
- not_authorized
- malformed_request
- invalid_request
- no_content
- invalid_data
- resource_not_found
- server_error
- '400: The request was malformed'
- '401: Authentication credentials were not provided, or were not valid for the requested
  operation'
- '404: An item referred to in the request was not found'
- '422: The request could not be processed due to validation errors'
- '500: An error occurred on the Gateway while processing the request'
- '422: error'
- '401 Unauthorized: Recheck API key or credentials'
- 'first_occurrence_due_immediately: Recurring charge scheduled to start on the same
  day it is created.'
- 'not_authorized: Not authorized'
- 'malformed_request: Unable to process JSON content'
- 'invalid_request: Invalid request'
- 'no_content: No JSON content received'
- 'invalid_data: may not be empty'
- 'invalid_data_encryption: The value could not be decrypted'
- 'resource_not_found: Requested resource not found'
- 'unavailable_for_current_status: The current status of the entity does not allow
  the requested operation'
- 'no_account_specified: An account ID must be specified'
- 'merchant_not_active: Merchant is not active'
- 'unavailable_for_merchant_status: The operation cannot be completed due to the current
  merchant status'
- 'account_not_active: Account is not active'
- 'unavailable_for_merchant_mode: Mode LIVE not supported for account of type TEST'
- 'unavailable_for_merchant_policy: The operation is unavailable due to the current
  merchant policy'
- 'no_payment_method: No payment method was specified'
- 'no_account_for_payment_method: Merchant does not have an account that supports
  the requested payment method'
- 'incorrect_payment_type: Payment method type not supported by the target account'
- 'payment_method_expired: Payment method expired'
- 'search_failed: The search could not be processed as defined'
- 'server_error: An unexpected error occurred'
- 'version_conflict: Version conflict'
- 'card_number_invalid: Card number invalid'
- 'card_number_incorrect: Card number incorrect'
- 'card_expired: Card expired'
- 'card_cvv_incorrect: Card CVV incorrect'
- 'card_avs_rejected: Card AVS rejected'
- 'no_occurrences_for_schedule: If the schedule provided for the creation of a new
  recurring charge would result in no occurrences of scheduled payments'
- 'first_occurrence_due_immediately: If the schedule provided for the creation of
  a new recurring charge would result in a payment due today'
- 'update_results_in_no_occurrences: If the schedule provided for the update of an
  existing recurring charge would result in no further occurrences of scheduled payments'
- 'error: 422'
- '400: The request was malformed.'
- '401: Authentication credentials were not provided, or were not valid for the requested
  operation.'
- '404: An item referred to in the request was not found.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'no_card_details_or_token_present: If neither card details nor a valid payment token
  are provided on a charge or credit request, the Gateway returns a no_card_details_or_token_present
  error and rejects the request.'
- 'not_valid_for_transaction_status: The Gateway returns a not_valid_for_transaction_status
  error code if the current state of a transaction does not permit a given request
  to be performed.'
- 'unavailable_due_to_capture_in_process: A unavailable_due_to_capture_in_process
  error is returned if an attempt is made to capture a transaction while other transactions
  associated with the same merchant account are already in the process of being captured.'
- 'exceeds_authorized_amount: The Gateway returns a exceeds_authorized_amount error
  code if a capture request is made specifying an amount greater than the amount that
  was originally authorized.'
- 'refund_exceeds_transaction: If a refund or credit is applied to a charge such that
  the amount to be refunded exceeds the remaining amount of the charge, the Gateway
  returns a refund_exceeds_transaction error code and rejects the request.'
- 'currency_mismatch: The Gateway returns a currency_mismatch error if the currency
  specified on a credit or refund does not match the currency of the target charge.'
- 'unsupported_currency: If a merchant account cannot accept the currency designated
  by the currency code given on an authorize or charge request, the Gateway returns
  a unsupported_currency error code and rejects the request.'
- 'card_declined: The Gateway returns a card_declined error when a card number is
  provided that matches a card in the Gateway''s blacklist, or the payment processor
  returns a decline response.'
- 'card_declined_processing_error: The Gateway returns a card_declined_processing_error
  error if the payment processor indicates a card has been declined due to a processing
  error.'
- 'card_declined_insufficient_funds: Attempts to create a charge using a card with
  insufficient funds available results in a card_declined_insufficient_funds being
  returned by the Gateway.'
- 'card_declined_limit_exceeded: If a payment processor indicates a card has reached
  a spending limit, the Gateway returns a card_declined_limit_exceeded error code
  to the caller and rejects the request.'
- 'card_declined_refer_to_issuer: If a payment processor indicates a card was declined
  with a referral to the issuer, the Gateway returns a card_declined_refer_to_issuer
  error.'
- 'card_declined_hold: A payment processor that responds to an authorize or charge
  request with a Hold response will cause the Gateway to return a card_declined_hold
  error.'
- 'card_declined_no_account: The Gateway returns a card_declined_no_account error
  if the payment processor does not find any account associated with a card number
  submitted in an authorize or charge request.'
- 'card_type_not_accepted: The Gateway returns a card_type_not_accepted error if an
  unsupported card type is used in a charge or credit operation.'
- 'merchant_trans_max_amount_exceeded: If the maximum single-transaction amount defined
  on a merchant account would be exceeded by an authorize or charge request, the Gateway
  rejects the request.'
- 'merchant_trans_daily_count_exceeded: If the daily maximum number of transactions
  defined on a merchant account would be exceeded by an authorize or charge request,
  the Gateway rejects the request.'
- 'merchant_trans_daily_amount_exceeded: An authorize or charge request for which
  the amount exceeds the maximum daily amount defined on the merchant account is rejected
  with a merchant_trans_daily_amount_exceeded error.'
- 'merchant_trans_monthly_count_exceeded: If the monthly maximum number of transactions
  defined on a merchant account would be exceeded by an authorize or charge request,
  the Gateway rejects the request.'
- 'merchant_trans_monthly_amount_exceeded: An authorize or charge request for which
  the amount exceeds the maximum monthly amount defined on the merchant account is
  rejected with a merchant_trans_monthly_amount_exceeded error.'
- 'card_processor_not_available: If the Gateway cannot communicate with the payment
  processor associated with a merchant account to carry out a request, a card_processor_not_available
  error is returned.'
- 'card_processing_error: If a payment processor reports a failure to process a request
  on behalf of the Gateway, a card_processing_error error is returned to the caller.'
- 'settlement_failed: A transaction that cannot be settled is marked as failed, and
  its failure code is set to settlement_failed.'
- 'no_bank_details_or_token_present: If neither bank details nor a valid payment token
  are provided on an eCheck transfer request, the Gateway returns a no_bank_details_or_token_present
  error and rejects the request.'
- 'ach_declined: If the eCheck processor declines the transaction the Gateway returns
  a ach_declined error and rejects the request.'
- 'ach_declined_hold: An eCheck request that is declined due to the processor indicating
  possible fraudulent use of the bank account returns a ach_declined_hold error code.'
- 'ach_declined_duplicate: An eCheck processor may reject a transaction if it appears
  to be a duplicate of a previous transaction.'
- 'ach_invalid_account_number: An account number provided for an eCheck transaction
  that is structurally invalid results in the Gateway returning an ach_invalid_account_number
  error code.'
- 'ach_invalid_routing_number: The Gateway returns an ach_invalid_routing_number error
  code when an invalid routing number is provided for an eCheck transaction.'
- 'ach_insufficient_funds: When the balance of an account providing funds for an eCheck
  transaction is insufficient to cover the value of the transaction, the Gateway returns
  an ach_insufficient_funds error code.'
- 'ach_account_not_found: If either bank account involved in an eCheck transaction
  cannot be found during execution of the transaction, the Gateway returns an ach_account_not_found
  error code.'
- 'ach_account_closed: The Gateway returns an ach_account_closed error code when an
  account involved in an eCheck transaction is reported as closed.'
- 'ach_account_frozen: An attempt to perform an eCheck transaction against an account
  that has been frozen returns an ach_account_frozen error code.'
- 'ach_not_authorized: An account holder may notify his or her bank that a given eCheck
  transaction was not authorized.'
- 'ach_authorization_revoked: For a specific eCheck transaction, an account holder
  may revoke authorization for a previously authorized transfer.'
- 'ach_payment_stopped: An eCheck transaction for which payment has been stopped by
  the account holder is marked as failed with an ach_payment_stopped error code.'
- 'ach_payment_refused: An account holder may refuse an eCheck transaction due to
  an error in the amount or other issues with the transaction.'
- 'ach_limit_exceeded: The Gateway returns an ach_limit_exceeded error code if the
  eCheck processor reports a transaction has exceeded the authorized limit.'
- 'ach_deferred_refund_rejected_charge_failed: The Gateway applies the ach_deferred_refund_rejected_charge_failed
  error code to an eCheck refund if the parent charge was not settled when the refund
  was performed.'
- 'ach_invalid_merchant_configuration: The Gateway returns an ach_invalid_merchant_configuration
  error code if an eCheck transaction cannot be carried out successfully due to a
  configuration issue with the associated eCheck merchant account.'
- 'ach_processor_not_available: If the Gateway cannot communicate with the eCheck
  processor associated with a Merchant eCheck account to carry out a request, an ach_processor_not_available
  error is returned.'
- 'ach_processing_error: If an eCheck processor reports a failure to process a request
  on behalf of the Gateway, an ach_processing_error error is returned to the caller.'
- '404: An item referred to in the request, such as a charge or merchant bank account,
  was not found.'
- '409: There was a state conflict due to an unsupported action, such as an attempt
  to delete an invoice with a payment or an attempt to create an object that already
  exists.'
- '422: The request could not be processed.'
- '500: An error occurred while processing the request.'
- 'UPF is missing required attributes: token, amount'
- '401 Unauthorized: Check the JWT and ensure it has the correct scopes.'
- '401 Unauthorized: Recheck API key or permissions'
- '400 Bad Request: Check request parameters and payload format'
- '401 Unauthorized: Ensure valid authentication credentials'
- 'card_cvv_incorrect: The CVV you provided is invalid.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API key validity'
- 'card_number_invalid: Card number is invalid'
- 'invalid_data: Name cannot be blank'
- 'invalid_data: Street number cannot be blank'
- 'invalid_data: Card number length is invalid'
- '422: Error occurred in processing the request'
- '401 Unauthorized: Check secret key validity'
- 'first_occurrence_due_immediately: A recurring charge cannot be scheduled to start
  on the same day it is created.'
- 'Unauthorized: Check your API key or secret.'
- 'Not Found: The specified resource does not exist.'
- 'Bad Request: Check your input data.'
- 'no_occurrences_for_schedule: error'
- 'first_occurrence_due_immediately: error'
- 'update_results_in_no_occurrences: error'
- 'not_authorized_country_denied: Not authorized country denied'
- 'unsupported_currency: If a merchant account cannot accept the currency designated
  by the currency code, the Gateway returns a unsupported_currency error code and
  rejects the request.'
- 'card_declined: The Gateway returns a card_declined error when a card number matches
  a card in the Gateway''s blacklist, or the payment processor returns a decline response.'
- 'card_declined_hold: A payment processor that responds with a ''Hold'' response
  will cause the Gateway to return a card_declined_hold error.'
- 'card_declined_no_account: The Gateway returns a card_declined_no_account error
  if the payment processor does not find any account associated with a card number.'
- 'merchant_trans_max_amount_exceeded: If the maximum single-transaction amount defined
  on a merchant account would be exceeded, the Gateway rejects the request with a
  merchant_trans_max_amount_exceeded error.'
- 'merchant_trans_daily_count_exceeded: If the daily maximum number of transactions
  defined on a merchant account would be exceeded, the Gateway rejects the request
  with a merchant_trans_daily_count_exceeded error.'
- 'merchant_trans_daily_amount_exceeded: An authorize or charge request that exceeds
  the maximum daily amount defined on the merchant account is rejected with a merchant_trans_daily_amount_exceeded
  error.'
- 'merchant_trans_monthly_count_exceeded: If the monthly maximum number of transactions
  would be exceeded, the Gateway rejects the request with a merchant_trans_monthly_count_exceeded
  error.'
- 'merchant_trans_monthly_amount_exceeded: An authorize or charge request that exceeds
  the maximum monthly amount defined on the merchant account is rejected with a merchant_trans_monthly_amount_exceeded
  error.'
- 'card_processor_not_available: If the Gateway cannot communicate with the payment
  processor, a card_processor_not_available error is returned.'
- 'card_processing_error: If a payment processor reports a failure to process a request,
  a card_processing_error error is returned.'
- 'no_bank_details_or_token_present: If neither bank details nor a valid payment token
  are provided on an eCheck transfer request, the Gateway returns a no_bank_details_or_token_present
  error.'
- 'ach_declined: If the eCheck processor declines the transaction, the Gateway returns
  a ach_declined error.'
- 'ach_declined_hold: An eCheck request that is declined due to possible fraudulent
  use of the bank account returns a ach_declined_hold error code.'
- 'ach_declined_duplicate: An eCheck processor may reject a transaction if it appears
  to be a duplicate, returning an ach_declined_duplicate error code.'
- 'ach_invalid_routing_number: The Gateway returns an ach_invalid_routing_number error
  code when an invalid routing number is provided.'
- 'ach_insufficient_funds: When the balance of an account is insufficient to cover
  the value of the transaction, the Gateway returns an ach_insufficient_funds error
  code.'
- 'ach_account_not_found: If either bank account involved in an eCheck transaction
  cannot be found, the Gateway returns an ach_account_not_found error code.'
- 'ach_not_authorized: An account holder may notify their bank that a given eCheck
  transaction was not authorized.'
- 'ach_authorization_revoked: An account holder may revoke authorization for a previously
  authorized transfer.'
- 'ach_payment_stopped: An eCheck transaction for which payment has been stopped by
  the account holder is marked as failed.'
- 'ach_payment_refused: An account holder may refuse an eCheck transaction due to
  an error in the amount or other issues.'
- 'ach_invalid_merchant_configuration: The Gateway returns an ach_invalid_merchant_configuration
  error code if an eCheck transaction cannot be carried out successfully due to a
  configuration issue.'
- 'ach_processor_not_available: If the Gateway cannot communicate with the eCheck
  processor, an ach_processor_not_available error is returned.'
- 'ach_processing_error: If an eCheck processor reports a failure to process a request,
  an ach_processing_error error is returned.'
- '409: There was a state conflict due to an unsupported action.'
- An unexpected error occurred
auth_info:
  mentioned_objects:
  - OAuth Client ID
  - OAuth Secret
client:
  base_url: https://api.8am.com
  auth:
    type: oauth2
    flow: authorization_code
    location: header
    header_name: Authorization
source_metadata: null
