resources:
- name: add_rows
  endpoint:
    path: /add_rows
    method: POST
- name: rows
  endpoint:
    path: /add_rows
    method: POST
- name: New Payment
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: payment_data
- name: New Customer
  endpoint:
    path: /v1/customers
    method: POST
    data_selector: customer_data
- name: new_task
  endpoint:
    path: /new_task
    method: GET
    data_selector: triggers
    params: {}
- name: completed_task
  endpoint:
    path: /completed_task
    method: GET
    data_selector: triggers
    params: {}
- name: new_client
  endpoint:
    path: /new_client
    method: GET
    data_selector: triggers
    params: {}
- name: project_management
  endpoint:
    path: /project_management
    method: GET
    data_selector: triggers_actions
    params: {}
- name: proposal_invoice_management
  endpoint:
    path: /proposal_invoice_management
    method: GET
    data_selector: triggers_actions
    params: {}
- name: scheduling_booking
  endpoint:
    path: /scheduling_booking
    method: GET
    data_selector: triggers_actions
    params: {}
- name: server_monitoring
  endpoint:
    path: /server_monitoring
    method: GET
    data_selector: triggers_actions
    params: {}
- name: signatures
  endpoint:
    path: /signatures
    method: GET
    data_selector: triggers_actions
    params: {}
- name: social_media_accounts
  endpoint:
    path: /social_media_accounts
    method: GET
    data_selector: triggers_actions
    params: {}
- name: spreadsheets
  endpoint:
    path: /spreadsheets
    method: GET
    data_selector: triggers_actions
    params: {}
- name: task_management
  endpoint:
    path: /task_management
    method: GET
    data_selector: triggers_actions
    params: {}
- name: team_chat
  endpoint:
    path: /team_chat
    method: GET
    data_selector: triggers_actions
    params: {}
- name: time_tracking_software
  endpoint:
    path: /time_tracking_software
    method: GET
    data_selector: triggers_actions
    params: {}
- name: transactional_emails
  endpoint:
    path: /transactional_emails
    method: GET
    data_selector: triggers_actions
    params: {}
- name: transcription
  endpoint:
    path: /transcription
    method: GET
    data_selector: triggers_actions
    params: {}
- name: video_audio
  endpoint:
    path: /video_audio
    method: GET
    data_selector: triggers_actions
    params: {}
- name: video_conferencing
  endpoint:
    path: /video_conferencing
    method: GET
    data_selector: triggers_actions
    params: {}
- name: webinars
  endpoint:
    path: /webinars
    method: GET
    data_selector: triggers_actions
    params: {}
- name: website_builders
  endpoint:
    path: /website_builders
    method: GET
    data_selector: triggers_actions
    params: {}
- name: recipe
  endpoint:
    path: /recipes
    method: GET
    data_selector: data
- name: recipe
  endpoint:
    path: /recipes
    method: GET
    data_selector: data
- name: recipe
  endpoint:
    path: /recipes
    method: GET
    data_selector: data
    params: {}
- name: recipe
  endpoint:
    path: /recipes
    method: GET
    data_selector: data
    params: {}
- name: movie
  endpoint:
    path: /movies
    method: GET
    data_selector: data
- name: bufferedBundle
  endpoint:
    path: /bufferedBundle
    method: POST
    data_selector: bufferedBundle.buffer
    params: {}
- name: new_contact
  endpoint:
    path: /api/contacts
    method: POST
    data_selector: contact
    params: {}
- name: Contact
  endpoint:
    path: /resources/Contact.js
    method: GET
- name: Rows
  endpoint:
    path: /add_rows
    method: POST
    data_selector: rows
    params: {}
- name: Rows
  endpoint:
    path: /add_rows
    method: POST
    data_selector: rows
    params: {}
- name: paging
  endpoint:
    path: /posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: data
    params:
      _start: start
      _limit: limit
- name: issue
  endpoint:
    path: /issue
    method: CREATE
    data_selector: inputFields
    params: {}
- name: project
  endpoint:
    path: /project
    method: LIST
    data_selector: operation
    params: {}
- name: issue
  endpoint:
    path: /issue
    method: POST
    data_selector: operation.inputFields
    params: {}
- name: project
  endpoint:
    path: /project
    method: GET
    data_selector: operation.perform
    params: {}
- name: file
  endpoint:
    path: /triggers/newFile
    method: GET
    data_selector: fileUrls
- name: uploadFile
  endpoint:
    path: /creates/uploadFile
    method: POST
    data_selector: fileUploadResponse
- name: newFile
  endpoint:
    path: /triggers/newFile
    method: GET
- name: uploadFile
  endpoint:
    path: /creates/uploadFile
    method: POST
- name: New Item
  endpoint:
    path: /path/to/new/item/endpoint
    method: GET
    data_selector: items
- name: Updated Item
  endpoint:
    path: /path/to/updated/item/endpoint
    method: GET
    data_selector: items
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: items
- name: Subscribe
  endpoint:
    method: POST
- name: Unsubscribe
  endpoint:
    method: DELETE
- name: Perform List
  endpoint:
    method: GET
- name: Perform
  endpoint:
    method: POST
- name: guess_a_zap
  endpoint:
    path: /v2/guess
    method: POST
    data_selector: steps
    params: {}
- name: guess_a_zap
  endpoint:
    path: /v2/guess
    method: POST
    data_selector: steps
- name: action_run
  endpoint:
    path: /v2/action-runs/
    method: POST
    data_selector: data
    params: {}
- name: retrieve_action_run_result
  endpoint:
    path: /v2/action-runs/{run_id}/
    method: GET
    data_selector: data
    params: {}
- name: action_run
  endpoint:
    path: /v2/action-runs/
    method: POST
    data_selector: data
    params: {}
- name: retrieve_action_run_result
  endpoint:
    path: /v2/action-runs/{run_id}/
    method: GET
    data_selector: data
    params: {}
- name: authentications
  endpoint:
    path: /authentications
    method: GET
    data_selector: data
    params:
      app: 81f613aa-c98a-4383-a5fc-195e68647217
- name: authentications
  endpoint:
    path: /authentications
    method: GET
    data_selector: data
    params:
      app: 81f613aa-c98a-4383-a5fc-195e68647217
- name: quick_account_creation
  endpoint:
    path: /webintent/create-zap
    method: GET
    params:
      client-id: <client-id>
      sign-up-email: <sign-up-email>
      sign-up-first-name: <sign-up-first-name>
      sign-up-last-name: <sign-up-last-name>
- name: authorize
  endpoint:
    path: /v2/authorize
    method: GET
    params:
      redirect_uri: <redirect_uri>
      scope: <scope>
      response_type: code
      client_id: <client_id>
      sign_up_first_name: <sign_up_first_name>
      sign_up_last_name: <sign_up_last_name>
      sign_up_email: <sign_up_email>
- name: quick_account_creation
  endpoint:
    path: /v2/authorize
    method: GET
- name: promotion_enrollment
  endpoint:
    path: /v2/promotions
    method: POST
    data_selector: enrollment_id
- name: promotion_enrollment
  endpoint:
    path: /v2/promotions
    method: POST
    data_selector: enrollment_id
    params: {}
- name: actions
  endpoint:
    path: /actions
    method: GET
    data_selector: actions
- name: actions
  endpoint:
    path: /api/v2/actions
    method: GET
    data_selector: actions
    params:
      app: app_id
- name: apps
  endpoint:
    path: /powered-by-zapier/integration-marketplace/code-native/retrieving-apps
    method: GET
- name: zap_templates
  endpoint:
    path: /powered-by-zapier/integration-marketplace/code-native/retrieving-zap-templates
    method: GET
- name: prefilled_zaps
  endpoint:
    path: /powered-by-zapier/built-in-workflows/low-code/pre-filled-zaps
    method: POST
- name: embed_zap_editor
  endpoint:
    path: /powered-by-zapier/built-in-workflows/low-code/embed-zap-editor
    method: POST
- name: manage_zaps
  endpoint:
    path: /powered-by-zapier/built-in-workflows/code-native/retrieving-a-list-of-zaps
    method: GET
notes:
- Zaps can only be created with Public Apps. Private Apps are not currently supported.
- More complex Action types, such as Searches, Filters, and Paths, are not supported.
- The API does not currently have an endpoint to turn off/on a user’s Zaps. If your
  Zapier app uses Webhook Subscriptions, you can send a DELETE to the unique target
  URL that was provided when the subscription was created and that will then pause/turn
  off a Zap.
- Webhook READ actions are not currently supported.
- If you log into Zapier via the single sign-on (Google, Facebook, or Microsoft),
  you may not have a Zapier password.
- You’ll likely need to set your CLIENT_ID and CLIENT_SECRET as environment variables.
- Zapier is a platform for creating integrations and workflows.
- Zapier integrations require setup of authentication.
- Users are more likely to continue using products that integrate seamlessly with
  their existing tools.
- Offering automation can convert free users to paid plans by adding value to your
  product.
- No more manual handling of 4xx errors in refreshAccessToken
- Zapier MCP is currently in beta and part of your existing Zapier Plan.
- Ensure your integration covers the foundational triggers, actions, and searches
  applicable to your app.
- Public integrations can be accessed by any Zapier user and doesn’t require users
  to be specially invited.
- By default, the configured authentication is included as HTTP Headers, which you
  can modify if needed.
- Uses mock API for recipes
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses custom authentication with API Key
- The API returns recipes based on cuisine style.
- TypeScript integrations are supported with the CLI.
- Uses OAuth2 authentication
- Dynamic input fields can be used
- 'Important caveat: AWS periodically deprecates Node versions as they reach EOL.'
- The app will have a maximum of 30 days to POST to the callback URL.
- The bufferedBundle object holds a user’s auth details and the buffered data for
  the API requests.
- The bufferedBundle object is used only with a create action's performBuffer function.
- The scheduled Transfer functionality is being deprecated as of 15th January 2024.
- One time transfers will be available to users within their Zaps with supported triggers.
- AI Actions API is available for any Zapier partner or developer to build on.
- This guide isn’t for new integrations built in Platform CLI or Platform UI.
- All code written in the Scripting API must adhere to strict mode
- This code is only valid for Zapier’s Legacy Web Builder
- All code written in the Scripting API must adhere to strict mode.
- This code is only valid for Zapier’s Legacy Web Builder. It’s mostly incompatible
  with Zapier’s Platform CLI and Platform UI.
- This code is only valid for Zapier’s Legacy Web Builder.
- It’s mostly incompatible with Zapier’s Platform CLI and Platform UI.
- Zapier will only invoke get_session_info on an as-needed basis.
- All code written in the Scripting API must adhere to strict mode, which is a subset
  of Javascript.
- Some objects like Contact may return nulls in deeply nested fields
- This code is only valid for the v2 platform.
- It’s incompatible with Platform CLI and Platform UI.
- Zapier CLI requires Node.js v18 for developing integrations.
- This code is only valid for the v2 platform. It’s incompatible with Platform CLI
  and Platform UI.
- 'Limitation: Currently, MD5-sess and SHA are not implemented. Only the MD5 algorithm
  is supported. In addition, server nonces are not reused.'
- Zapier integrations require authentication to connect.
- Currently, MD5-sess and SHA are not implemented. Only the MD5 algorithm is supported.
- Server nonces are not reused.
- The integration requires setting CLIENT_ID and CLIENT_SECRET as environment variables.
- Every Integration Version is private but you can promote it to production.
- Buffered Create allows you to create objects in bulk with a single or fewer API
  request(s).
- The performBuffer function must return a data just like the specified format.
- Zapier CLI requires Node.js v18.
- Zapier CLI is required for integration development.
- Most integrations require some sort of authentication.
- Define authentication fields in .env or command.
- The authentication method uses pre-configured tokens or secret values (for example,
  OAuth v2)
- User is able to input a domain or subdomain when authenticating within Zapier
- Integration stores sensitive authentication details (in environment variables, for
  example) which are used as part of the authentication process
- Taking the following steps prevents the potential for an attacker to access your
  integration’s sensitive authentication information, such as the OAuth client ID
  or secret.
- If this is your first time promoting - you may have to wait for the Zapier team
  to review and approve your integration.
- If this isn’t the first time you’ve promoted your integration - you might have users
  on older versions.
- Variables are defined on a per-version basis
- Integrations can define environment variables that are available when the integration’s
  code executes.
- Variables are defined on a per-version basis!
- Do not use compiled libraries unless you’re sure they’re runnable in AWS Lambda
  Node.js runtime.
- Uses z.dehydrate and z.dehydrateFile for lazy loading of data
- Maximum payload size to pass to z.dehydrate / z.dehydrateFile is 12KB
- Default cache expiration for hydration calls is 300 seconds (5 minutes)
- Maximum allowed value for cacheExpiration is 86400 seconds (24 hours)
- The maximum payload size to pass to z.dehydrate / z.dehydrateFile is 12KB.
- The maximum allowed value for cacheExpiration is 86400 seconds (24 hours).
- Requires setup of connected app in Zapier
- Local integrations stay local until registered
- When adding a subdomain input field, additional validation is recommended.
- Uses OAuth2 with auto-refresh — requires notifying users of expired credentials
- Use npm modules just like you would use them in any other node app
- Never add your secrets file to version control
- NEVER add your secrets file to version control!
- Only dropdowns support altersDynamicFields.
- The trigger will not run automatically due to the hard coded file urls used for
  illustrative purposes.
- API must return results in reverse-chronological order to ensure new/updated items
  can be found on the first page of results.
- The API must return results in reverse-chronological order to ensure new/updated
  items are found on the first page of results.
- Triggers only watch for new data.
- Polling triggers behave as users expect by following deduplication guidelines for
  new item and updated item triggers.
- Triggers only watch for new data and typically send no or little data to your app.
- The API endpoint must list new or updated items in an array sorted in reverse chronological
  order.
- Polling trigger type selected by default
- REST Hook triggers are marked as Instant in the Zap editor.
- A REST Hook trigger missing a Subscribe or Unsubscribe endpoint is presented to
  users as a Static Webhook.
- Triggers when an event occurs in your app and a subscription is active.
- Triggers are listed in alphabetical order in the Zap editor and this order cannot
  be changed.
- It is best practice to not remove a trigger that has been used in a live integration
  version.
- It is best practice to not remove a trigger that has been used in a live integration
  version. If a trigger is in use, it is recommended to hide it rather than deleting
  it.
- Zapier does not support Identity Confirmation for webhook subscriptions.
- Each trigger and action has a 30 second time limit.
- Zapier recommends for users to have an understanding of Javascript and making HTTP
  requests.
- Changes made in Code Mode are not saved automatically.
- Sponsorship is a feature that must be enabled by Zapier.
- Sponsoring automation helps reduce friction for users and can significantly increase
  adoption and retention.
- You’ll only be billed for automation usage triggered via your embed, and you can
  monitor task volume and adjust limits as needed.
- client_id is required as a query parameter and must be valid.
- Running actions via the Workflow API is currently in limited beta.
- This page is coming soon!
- This endpoint returns only owned Authentications.
- Reduce friction when adding an authentication to your own app.
- Shared Authentications are excluded.
- Ensure the promotion_id corresponds to an existing promotion in the system.
- The user_access_token must be valid and unexpired to authenticate the user correctly.
- This API is rate limited.
- Your app needs to be published as a public integration in Zapier’s App Directory.
- 'Currently all endpoints are rate limited by the following, whichever occurs first:
  IP address, and is limited to 60 requests per minute. Partner, and is limited to
  150 requests per minute.'
- If you hit the rate limit, you will receive a `429 Too Many Requests`. There will
  be a cooldown of 60 seconds before you can make any more requests.
- The Workflow API uses OAuth 2.0 authentication with the authorization code grant
  type.
- Use the key field for stable identification of actions.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API key'
- '401 Unauthorized: Check access token'
- '429 Too Many Requests: Rate limit exceeded'
- 'InvalidParameterValueException: The runtime parameter of nodejs6.10 is no longer
  supported for creating or updating AWS Lambda functions.'
- 'Error: Stops the current operation, allowing for (auto) replay.'
- 'HaltedError: Stops current operation, but will never turn off Zap.'
- 'ExpiredAuthError: Stops the current operation and emails user to manually reconnect.'
- 'ExpiredAuthError: Stops the current operation and emails user to manually reconnect'
- 'RefreshAuthError: Tells Zapier to refresh credentials and retry operation'
- 'ThrottledError: Tells Zapier to retry the current operation after a delay specified
  in seconds'
- Stale authentication credentials
- 'Stale authentication credentials: Update session credentials.'
- Halting execution
- 'Halting execution: Code issues will be shown in the Scripting API editor.'
- 'Halting execution: Check for issues with code in the Scripting API editor.'
- 'Stale authentication credentials: Ensure your OAuth tokens are refreshed.'
- 'Stale authentication credentials: Session authentication may need updating.'
- 'Stale authentication credentials: Updating Session Credentials'
- '401 Unauthorized: Call get_session_info() and try the request again'
- '429: Throttle API calls or reduce frequency'
- '410: Webhook subscription is no longer active'
- '410: Webhook subscription is no longer active.'
- '4xx/5xx: Handle failures at your discretion.'
- '410: Expect to see a 410 response if API continues posting notification payloads
  to the Zap after it has unsubscribed.'
- '410: You can expect to see a 410 response from Zapier if your API continues posting
  notification payloads to the Zap after it has unsubscribed.'
- 'Rate limit exceeded: Adjust your request frequency.'
- '429 Too Many Requests: You have hit the rate limit.'
auth_info:
  mentioned_objects:
  - apiKey
  - Authentication
  - BeforeRequestMiddleware
  - AfterResponseMiddleware
  - InvalidSessionException
  - bundle.request.method
  - bundle.request.url
  - bundle.request.auth
  - bundle.request.headers
  - bundle.request.params
  - bundle.auth_fields
  - bundle.zap
  - OAuth v2
  - subdomain
  - api_key
  - OauthToken
  - AuthProvider
client:
  base_url: https://zapier.com
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
