resources:
- name: Market Data
  endpoint:
    path: /fix-api/fix-market-data
    method: GET
    data_selector: messages
    params: {}
- name: Get All Balances
  endpoint:
    path: /rest-api/account-management/get-all-balances
    method: GET
- name: Get All Currencies
  endpoint:
    path: /rest-api/account-management/get-all-currencies
    method: GET
- name: Get All Currency Pairs
  endpoint:
    path: /rest-api/account-management/get-all-currency-pairs
    method: GET
- name: Get All Transactions
  endpoint:
    path: /rest-api/account-management/get-all-transactions
    method: GET
- name: Get Fees
  endpoint:
    path: /rest-api/account-management/get-fees
    method: GET
- name: Get All Balances
  endpoint:
    path: /rest-api/account-management/get-all-balances
    method: GET
- name: Get All Currencies
  endpoint:
    path: /rest-api/account-management/get-all-currencies
    method: GET
- name: Get All Currency Pairs
  endpoint:
    path: /rest-api/account-management/get-all-currency-pairs
    method: GET
- name: Get All Transactions
  endpoint:
    path: /rest-api/account-management/get-all-transactions
    method: GET
- name: Get Fees
  endpoint:
    path: /rest-api/account-management/get-fees
    method: GET
- name: Get All Balances
  endpoint:
    path: /rest-api/account-management/get-all-balances
    method: GET
- name: Get All Currencies
  endpoint:
    path: /rest-api/account-management/get-all-currencies
    method: GET
- name: Get All Currency Pairs
  endpoint:
    path: /rest-api/account-management/get-all-currency-pairs
    method: GET
- name: Get All Transactions
  endpoint:
    path: /rest-api/account-management/get-all-transactions
    method: GET
- name: Get Fees
  endpoint:
    path: /rest-api/account-management/get-fees
    method: GET
- name: user_balance
  endpoint:
    path: /v1/user/balance
    method: GET
    data_selector: ''
    params: {}
- name: balances
  endpoint:
    path: /v1/user/balance
    method: GET
    data_selector: ''
    params: {}
- name: currency
  endpoint:
    path: /v1/currency
    method: GET
    data_selector: ''
- name: currency_pairs
  endpoint:
    path: /v1/markets/currency-pairs
    method: GET
    data_selector: records
- name: currency
  endpoint:
    path: /v1/currency
    method: GET
    data_selector: ''
- name: currency_pairs
  endpoint:
    path: /v1/markets/currency-pairs
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /v1/account/transactions
    method: GET
    data_selector: transactions
    params:
      limit: 250
- name: fees
  endpoint:
    path: /v1/account/fee-rates
    method: GET
    data_selector: volume
    params: {}
- name: transactions
  endpoint:
    path: /account/transactions
    method: GET
    data_selector: ''
    params:
      limit: 250
- name: orders
  endpoint:
    path: /rest-api/orders
    method: GET
    data_selector: orders
- name: fee_rates
  endpoint:
    path: /v1/account/fee-rates
    method: GET
    data_selector: volume, makerRate, nprRate, nprOffRate
    params: {}
- name: order_types
  endpoint:
    path: /rest-api/orders/algorithms-and-routing-types
    method: GET
- name: orders
  endpoint:
    path: /rest-api/orders
    method: GET
- name: create_order
  endpoint:
    path: /v1/orders/:side
    method: POST
- name: order_types
  endpoint:
    path: /rest-api/orders/algorithms-and-routing-types
    method: GET
- name: orders
  endpoint:
    path: /v1/orders/buy
    method: POST
    data_selector: id
    params: {}
- name: create_order
  endpoint:
    path: /v1/orders/:side
    method: POST
- name: cancel_order
  endpoint:
    path: /v1/orders/:order_id
    method: DELETE
    data_selector: status
    params: {}
- name: orders
  endpoint:
    path: /v1/orders/buy
    method: POST
    data_selector: data
    params: {}
- name: cancel_multiple_orders
  endpoint:
    path: /v1/orders
    method: DELETE
    params:
      ids: required
- name: cancel_order
  endpoint:
    path: /v1/orders/:order_id
    method: DELETE
    data_selector: status
    params: {}
- name: cancel_all_orders
  endpoint:
    path: /v1/orders/open
    method: DELETE
    data_selector: orders
- name: cancel_multiple_orders
  endpoint:
    path: /v1/orders
    method: DELETE
    params:
      ids: required
- name: amend_order
  endpoint:
    path: /v1/orders/:order_id
    method: PATCH
- name: cancel_all_orders
  endpoint:
    path: /v1/orders/open
    method: DELETE
    data_selector: orders
- name: get_single_order
  endpoint:
    path: /v1/orders/:order_id
    method: GET
    data_selector: id
    params: {}
- name: amend_order
  endpoint:
    path: /v1/orders/:order_id
    method: PATCH
    data_selector: none
    params: {}
- name: open_orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
- name: get_single_order
  endpoint:
    path: /v1/orders/:order_id
    method: GET
    data_selector: id
- name: done_orders
  endpoint:
    path: /v1/orders/done
    method: GET
    data_selector: ''
    params:
      limit: '50'
      before: ''
      after: ''
      action: ''
      currency_pair: ''
      algorithm_id: ''
      status: ''
- name: open_orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
- name: done_orders
  endpoint:
    path: /v1/orders/done
    method: GET
    data_selector: orders
    params:
      limit: '20'
      currency_pair: btcusd
- name: trades
  endpoint:
    path: /v1/account/trades
    method: GET
    data_selector: data
    params:
      page_size: '100'
- name: get_all_done_orders
  endpoint:
    path: /v1/orders/done
    method: GET
    data_selector: records
    params:
      limit: 50
- name: request_for_quote
  endpoint:
    path: /v1/quote
    method: POST
    data_selector: quote
    params: {}
- name: done_orders
  endpoint:
    path: /v1/orders/done
    method: GET
    params:
      limit: 20
      currency_pair: btcusd
- name: trades
  endpoint:
    path: /v1/account/trades
    method: GET
    data_selector: data
    params:
      page_size: page_size
      last_seen_id: last_seen_id
- name: quote
  endpoint:
    path: /v1/quote
    method: POST
    data_selector: quote
    params: {}
- name: order
  endpoint:
    path: /v1/orders/buy
    method: POST
    data_selector: order
    params: {}
- name: request_for_quote
  endpoint:
    path: /v1/quote
    method: POST
    data_selector: quote
    params: {}
- name: quote
  endpoint:
    path: /v1/quote
    method: POST
    data_selector: quote_id
- name: order
  endpoint:
    path: /v1/orders/buy
    method: POST
    data_selector: id
- name: Get Account Risk Metrics
  endpoint:
    path: /rest-api/post-trade-settlement-pts/get-account-risk-metrics
    method: GET
- name: Get All Positions
  endpoint:
    path: /rest-api/post-trade-settlement-pts/get-all-positions
    method: GET
- name: Get All Funding Transactions
  endpoint:
    path: /rest-api/post-trade-settlement-pts/get-all-funding-transactions
    method: GET
- name: Get All Funding Rates
  endpoint:
    path: /rest-api/post-trade-settlement-pts/get-all-funding-rates
    method: GET
- name: Get All Risk Modes
  endpoint:
    path: /rest-api/post-trade-settlement-pts/get-all-risk-modes
    method: GET
- name: Create Transfer
  endpoint:
    path: /rest-api/post-trade-settlement-pts/create-transfer
    method: POST
- name: account_risk_metrics
  endpoint:
    path: /v1/post-trade-settlement
    method: GET
    data_selector: exposure
    params: {}
- name: account_risk_metrics
  endpoint:
    path: /rest-api/post-trade-settlement-pts/get-account-risk-metrics
    method: GET
- name: all_positions
  endpoint:
    path: /rest-api/post-trade-settlement-pts/get-all-positions
    method: GET
- name: all_funding_transactions
  endpoint:
    path: /rest-api/post-trade-settlement-pts/get-all-funding-transactions
    method: GET
- name: all_funding_rates
  endpoint:
    path: /rest-api/post-trade-settlement-pts/get-all-funding-rates
    method: GET
- name: all_risk_modes
  endpoint:
    path: /rest-api/post-trade-settlement-pts/get-all-risk-modes
    method: GET
- name: create_transfer
  endpoint:
    path: /rest-api/post-trade-settlement-pts/create-transfer
    method: POST
- name: positions
  endpoint:
    path: /v1/post-trade-settlement/positions
    method: GET
    data_selector: positions
    params: {}
- name: account_risk_metrics
  endpoint:
    path: /v1/post-trade-settlement
    method: GET
    data_selector: response
    params: {}
- name: funding_transactions
  endpoint:
    path: /v1/post-trade-settlement/interest/history
    method: GET
    data_selector: data
    params:
      limit: 100
- name: positions
  endpoint:
    path: /v1/post-trade-settlement/positions
    method: GET
    data_selector: id
    params: {}
- name: funding_rates
  endpoint:
    path: /v1/post-trade-settlement/interest
    method: GET
    data_selector: usd, btc
- name: funding_transactions
  endpoint:
    path: /v1/post-trade-settlement/interest/history
    method: GET
    data_selector: data
    params:
      limit: '100'
- name: risk_modes
  endpoint:
    path: /v1/post-trade-settlement/risk-modes
    method: GET
    data_selector: data
    params: {}
- name: create_transfer
  endpoint:
    path: /v1/account/transfer
    method: POST
    data_selector: from_transaction_id
    params: {}
- name: funding_rates
  endpoint:
    path: /v1/post-trade-settlement/interest
    method: GET
    data_selector: usd, btc
    params: {}
- name: account_risk_metrics
  endpoint:
    path: /rest-api/shorting/get-account-risk-metrics
    method: GET
- name: all_positions
  endpoint:
    path: /rest-api/shorting/get-all-positions
    method: GET
- name: risk_modes
  endpoint:
    path: /v1/post-trade-settlement/risk-modes
    method: GET
    data_selector: data
    params: {}
- name: create_transfer
  endpoint:
    path: /v1/account/transfer
    method: POST
    data_selector: ''
    params: {}
- name: account_risk_metrics
  endpoint:
    path: /v1/margin/account
    method: GET
    data_selector: ''
    params: {}
- name: Get Account Risk Metrics
  endpoint:
    path: /rest-api/shorting/get-account-risk-metrics
    method: GET
- name: Get All Positions
  endpoint:
    path: /rest-api/shorting/get-all-positions
    method: GET
- name: positions
  endpoint:
    path: /v1/margin/loans
    method: GET
    data_selector: data
    params:
      page_size: '100'
- name: account_risk_metrics
  endpoint:
    path: /v1/margin/account
    method: GET
    data_selector: account_value
- name: Get All Deposit Addresses
  endpoint:
    path: /rest-api/transfers/get-all-deposit-addresses
    method: GET
- name: Get Single Deposit Address
  endpoint:
    path: /rest-api/transfers/get-single-deposit-address
    method: GET
- name: Create Deposit Address
  endpoint:
    path: /rest-api/transfers/create-deposit-address
    method: POST
- name: Deposit From Bank Account
  endpoint:
    path: /rest-api/transfers/deposit-from-bank-account
    method: POST
- name: Withdraw From Account
  endpoint:
    path: /rest-api/transfers/withdraw-from-account
    method: POST
- name: Get Single Withdrawal Fee
  endpoint:
    path: /rest-api/transfers/get-single-withdrawal-fee
    method: GET
- name: Create Transfer
  endpoint:
    path: /rest-api/transfers/create-transfer
    method: POST
- name: positions
  endpoint:
    path: /v1/margin/loans
    method: GET
    data_selector: data
    params:
      page_size: '100'
- name: wallet_addresses
  endpoint:
    path: /v1/wallet-addresses
    method: GET
    data_selector: addresses
- name: single_deposit_address
  endpoint:
    path: /v1/user/deposit/address/:currency
    method: GET
    data_selector: '[]'
- name: Get All Deposit Addresses
  endpoint:
    path: /rest-api/transfers/get-all-deposit-addresses
    method: GET
- name: Get Single Deposit Address
  endpoint:
    path: /rest-api/transfers/get-single-deposit-address
    method: GET
- name: Create Deposit Address
  endpoint:
    path: /rest-api/transfers/create-deposit-address
    method: POST
- name: Deposit From Bank Account
  endpoint:
    path: /rest-api/transfers/deposit-from-bank-account
    method: POST
- name: Withdraw From Account
  endpoint:
    path: /rest-api/transfers/withdraw-from-account
    method: POST
- name: Get Single Withdrawal Fee
  endpoint:
    path: /rest-api/transfers/get-single-withdrawal-fee
    method: GET
- name: Create Transfer
  endpoint:
    path: /rest-api/transfers/create-transfer
    method: POST
- name: create_deposit_address
  endpoint:
    path: /v1/user/deposit/address/:currency
    method: POST
    data_selector: address
    params: {}
- name: wallet_addresses
  endpoint:
    path: /v1/wallet-addresses
    method: GET
    data_selector: addresses
- name: deposit_from_bank_account
  endpoint:
    path: /v1/user/bank/deposit
    method: POST
    data_selector: success
    params:
      amount: required
- name: get_single_deposit_address
  endpoint:
    path: /v1/user/deposit/address/:currency
    method: GET
    data_selector: ''
    params:
      currency: required
- name: create_deposit_address
  endpoint:
    path: /v1/user/deposit/address/:currency
    method: POST
    data_selector: address
    params:
      currency: required
- name: withdraw_from_account
  endpoint:
    path: /v1/user/withdraw
    method: POST
    data_selector: success
    params: {}
- name: deposit_from_bank_account
  endpoint:
    path: /v1/user/bank/deposit
    method: POST
    data_selector: success
    params: {}
- name: withdraw_fee
  endpoint:
    path: /v1/withdraw-fee/:currency
    method: GET
    data_selector: fee
    params:
      currency: required
- name: create_transfer
  endpoint:
    path: /account/transfer
    method: POST
    data_selector: from_transaction_id
    params: {}
- name: withdraw_from_account
  endpoint:
    path: /v1/user/withdraw
    method: POST
    data_selector: success
    params: {}
- name: withdrawal_fee
  endpoint:
    path: /v1/withdraw-fee/:currency
    method: GET
    data_selector: fee
    params:
      currency: required
- name: Get Whitelisted Addresses
  endpoint:
    path: /rest-api/custody/get-whitelisted-addresses
    method: GET
- name: Add Whitelisted Address
  endpoint:
    path: /rest-api/custody/add-whitelisted-address
    method: POST
- name: Delete Whitelisted Address
  endpoint:
    path: /rest-api/custody/delete-whitelisted-address
    method: DELETE
- name: Get Approval Rules
  endpoint:
    path: /rest-api/custody/get-approval-rules
    method: GET
- name: Create Approval Rule
  endpoint:
    path: /rest-api/custody/create-approval-rule
    method: POST
- name: Edit Approval Rule
  endpoint:
    path: /rest-api/custody/edit-approval-rule
    method: PUT
- name: Get Approval Requests
  endpoint:
    path: /rest-api/custody/get-approval-requests
    method: GET
- name: Respond to Approval Request
  endpoint:
    path: /rest-api/custody/respond-to-approval-request
    method: POST
- name: create_transfer
  endpoint:
    path: /account/transfer
    method: POST
    data_selector: response
    params: {}
- name: whitelisted_addresses
  endpoint:
    path: /whitelisted-addresses
    method: GET
    data_selector: data
- name: whitelisted_addresses
  endpoint:
    path: /whitelisted-addresses
    method: POST
    data_selector: id
    params: {}
- name: Get Whitelisted Addresses
  endpoint:
    path: /rest-api/custody/get-whitelisted-addresses
    method: GET
- name: Add Whitelisted Address
  endpoint:
    path: /rest-api/custody/add-whitelisted-address
    method: POST
- name: Delete Whitelisted Address
  endpoint:
    path: /rest-api/custody/delete-whitelisted-address
    method: DELETE
- name: Get Approval Rules
  endpoint:
    path: /rest-api/custody/get-approval-rules
    method: GET
- name: Create Approval Rule
  endpoint:
    path: /rest-api/custody/create-approval-rule
    method: POST
- name: Edit Approval Rule
  endpoint:
    path: /rest-api/custody/edit-approval-rule
    method: PUT
- name: Get Approval Requests
  endpoint:
    path: /rest-api/custody/get-approval-requests
    method: GET
- name: Respond to Approval Request
  endpoint:
    path: /rest-api/custody/respond-to-approval-request
    method: POST
- name: delete_whitelisted_address
  endpoint:
    path: /v1/whitelisted-addresses/:address_id
    method: DELETE
    data_selector: '{}'
- name: whitelisted_addresses
  endpoint:
    path: /whitelisted-addresses
    method: GET
    data_selector: data
    params: {}
- name: approval_rules
  endpoint:
    path: /v1/approval-rules
    method: GET
    data_selector: data
    params: {}
- name: whitelisted_addresses
  endpoint:
    path: /v1/whitelisted-addresses
    method: POST
    data_selector: id
    params: {}
- name: create_approval_rule
  endpoint:
    path: /v1/approval-rules
    method: POST
    data_selector: id
    params: {}
- name: delete_whitelisted_address
  endpoint:
    path: /v1/whitelisted-addresses/:address_id
    method: DELETE
    data_selector: '{}'
    params: {}
- name: approval_rules
  endpoint:
    path: /approval-rules
    method: GET
    data_selector: data
- name: approval_rule
  endpoint:
    path: /v1/approval-rules/:rule_id
    method: PATCH
    data_selector: id
- name: approval_rules
  endpoint:
    path: /v1/approval-rules
    method: POST
    data_selector: id
    params: {}
- name: approval_requests
  endpoint:
    path: /approvals
    method: GET
    data_selector: data
    params:
      pending: 'true'
- name: approval_rule
  endpoint:
    path: /v1/approval-rules/:rule_id
    method: PATCH
    data_selector: id
    params: {}
- name: respond_to_approval_request
  endpoint:
    path: /v1/approvals/:request_id
    method: POST
    data_selector: ''
    params: {}
- name: approval_requests
  endpoint:
    path: /approvals
    method: GET
    data_selector: data
    params:
      pending: 'true'
- name: respond_to_approval_request
  endpoint:
    path: /v1/approvals/:request_id
    method: POST
    data_selector: response
    params: {}
- name: Get Staking Currencies
  endpoint:
    path: /rest-api/staking/get-staking-currencies
    method: GET
- name: Get All Staking Transactions
  endpoint:
    path: /rest-api/staking/get-all-staking-transactions
    method: GET
- name: Create Stake
  endpoint:
    path: /rest-api/staking/create-stake
    method: POST
- name: Cancel Stake
  endpoint:
    path: /rest-api/staking/cancel-stake
    method: POST
- name: Unstake
  endpoint:
    path: /rest-api/staking/unstake
    method: POST
- name: staking_currencies
  endpoint:
    path: /staking/currencies
    method: GET
    data_selector: data
    params: {}
- name: Get Staking Currencies
  endpoint:
    path: /rest-api/staking/get-staking-currencies
    method: GET
- name: Get All Staking Transactions
  endpoint:
    path: /rest-api/staking/get-all-staking-transactions
    method: GET
- name: Create Stake
  endpoint:
    path: /rest-api/staking/create-stake
    method: POST
- name: Cancel Stake
  endpoint:
    path: /rest-api/staking/cancel-stake
    method: POST
- name: Unstake
  endpoint:
    path: /rest-api/staking/unstake
    method: POST
- name: staking_currencies
  endpoint:
    path: /staking/currencies
    method: GET
    data_selector: data
    params: {}
- name: staking_transactions
  endpoint:
    path: /staking/transactions
    method: GET
    data_selector: data
    params: {}
- name: create_stake
  endpoint:
    path: /v1/staking/stake
    method: POST
    data_selector: data
    params: {}
- name: staking_transactions
  endpoint:
    path: /staking/transactions
    method: GET
    data_selector: data
    params: {}
- name: cancel_stake
  endpoint:
    path: /v1/staking/:id
    method: DELETE
    data_selector: null
    params: {}
- name: create_stake
  endpoint:
    path: /staking/stake
    method: POST
    data_selector: data
    params: {}
- name: unstake
  endpoint:
    path: /v1/staking/unstake
    method: POST
    data_selector: null
    params: {}
- name: cancel_stake
  endpoint:
    path: /staking/:id
    method: DELETE
    data_selector: null
    params: {}
- name: Get Candlesticks
  endpoint:
    path: /rest-api/market-data/get-candlesticks
    method: GET
- name: Get Volume Analytics
  endpoint:
    path: /rest-api/market-data/get-volume-analytics
    method: GET
- name: Get Order Estimate
  endpoint:
    path: /rest-api/market-data/get-order-estimate
    method: GET
- name: Get Order Book
  endpoint:
    path: /rest-api/market-data/get-order-book
    method: GET
- name: unstake
  endpoint:
    path: /staking/unstake
    method: POST
    data_selector: ''
    params: {}
- name: candlesticks
  endpoint:
    path: /candlesticks
    method: GET
    data_selector: ''
    params:
      pair: btcusd
      startTime: ''
      endTime: ''
      period: '60'
- name: candlesticks
  endpoint:
    path: /candlesticks
    method: GET
    data_selector: '[]'
    params:
      pair: btcusd
      startTime: required
      endTime: required
      period: '60'
- name: volume_analytics
  endpoint:
    path: /v1/analytics/volume
    method: GET
    params:
      start_time: required
      end_time: ''
      interval: required
      currency: required
      net: ''
      by_exchange: ''
- name: volume_analytics
  endpoint:
    path: /v1/analytics/volume
    method: GET
    data_selector: results
    params:
      start_time: required
      interval: required
      currency: required
- name: volume
  endpoint:
    path: /v1/analytics/volume
    method: GET
    data_selector: data
    params:
      currency: btc
      interval: '86400'
- name: volume
  endpoint:
    path: /analytics/volume
    method: GET
    data_selector: data
    params:
      currency: btc
      interval: '86400'
- name: order_estimate
  endpoint:
    path: /v1/offer/:side
    method: GET
    data_selector: price
    params:
      pair: btcusd
      quantity: null
      maxspend: null
      routing_type: null
- name: get_order_estimate
  endpoint:
    path: /v1/offer/:side
    method: GET
    data_selector: price
    params:
      pair: btcusd
      quantity: ''
- name: order_book
  endpoint:
    path: /v1/markets/orderbook/:pair
    method: GET
    data_selector: lastupdated
    params:
      pair: btcusd
- name: order_book
  endpoint:
    path: /v1/markets/orderbook/:pair
    method: GET
    data_selector: bids, asks, market_making, timestamps, lastupdated, lastpublished
    params:
      pair: btcusd
- name: Get Orders Report
  endpoint:
    path: /rest-api/reporting/get-orders-report
    method: GET
- name: Get Monthly Summary
  endpoint:
    path: /rest-api/reporting/get-monthly-summary
    method: GET
- name: Get Portfolio Valuation
  endpoint:
    path: /rest-api/reporting/get-portfolio-valuation
    method: GET
- name: Get All Transactions
  endpoint:
    path: /rest-api/reporting/get-all-transactions
    method: GET
- name: Get Orders Report
  endpoint:
    path: /rest-api/reporting/get-orders-report
    method: GET
- name: Get Monthly Summary
  endpoint:
    path: /rest-api/reporting/get-monthly-summary
    method: GET
- name: Get Portfolio Valuation
  endpoint:
    path: /rest-api/reporting/get-portfolio-valuation
    method: GET
- name: Get All Transactions
  endpoint:
    path: /rest-api/reporting/get-all-transactions
    method: GET
- name: get_orders_report
  endpoint:
    path: /v1/users/reports/tax-order-summary
    method: GET
    data_selector: data
    params:
      end: unix timestamp of the last datapoint returned
      start: unix timestamp of the first datapoint returned
- name: get_orders_report
  endpoint:
    path: /v1/users/reports/tax-order-summary
    method: GET
    data_selector: data
    params: {}
- name: monthly_summary
  endpoint:
    path: /v1/users/reports/tax-currency-summary
    method: GET
    data_selector: CSV
    params:
      start: timestamp
      end: timestamp
      currency: string
- name: monthly_summary
  endpoint:
    path: /v1/users/reports/tax-currency-summary
    method: GET
    data_selector: records
    params:
      start: start
      end: end
      currency: currency
- name: portfolio_valuation
  endpoint:
    path: /v1/account/balance/history
    method: GET
    data_selector: data
    params:
      start_date: required
      end_date: ''
      interval: '86400'
- name: portfolio_valuation
  endpoint:
    path: /v1/account/balance/history
    method: GET
    data_selector: data
    params:
      start_date: timestamp
      end_date: timestamp
      interval: int
- name: transactions
  endpoint:
    path: /v1/account/transactions
    method: GET
    data_selector: '[]'
    params:
      limit: '250'
- name: transactions
  endpoint:
    path: /v1/account/transactions
    method: GET
    data_selector: transactions
    params:
      limit: 250
- name: account_management
  endpoint:
    path: /rest-api/account-management
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /rest-api/orders
    method: GET
    data_selector: records
- name: transfers
  endpoint:
    path: /rest-api/transfers
    method: GET
    data_selector: records
- name: market_data
  endpoint:
    path: /rest-api/market-data
    method: GET
    data_selector: records
- name: reporting
  endpoint:
    path: /rest-api/reporting
    method: GET
    data_selector: records
- name: Get Candlesticks
  endpoint:
    path: /rest-api/market-data/get-candlesticks
    method: GET
- name: Get Volume Analytics
  endpoint:
    path: /rest-api/market-data/get-volume-analytics
    method: GET
- name: Get Order Estimate
  endpoint:
    path: /rest-api/market-data/get-order-estimate
    method: GET
- name: Get Order Book
  endpoint:
    path: /rest-api/market-data/get-order-book
    method: GET
- name: order_book
  endpoint:
    path: /websocket-api/market-data/order-book
    method: GET
    data_selector: feeds
- name: account_management
  endpoint:
    path: /rest-api/account-management
    method: GET
- name: orders
  endpoint:
    path: /rest-api/orders
    method: GET
- name: transfers
  endpoint:
    path: /rest-api/transfers
    method: GET
- name: market_data
  endpoint:
    path: /rest-api/market-data
    method: GET
- name: order_book
  endpoint:
    path: /orderbook
    method: GET
    data_selector: payload
    params: {}
- name: trades
  endpoint:
    path: /ws
    method: GET
    data_selector: payload
- name: Market Data
  endpoint:
    path: /rest-api/market-data
    method: GET
- name: Order Book
  endpoint:
    path: /websocket-api/market-data/order-book
    method: GET
- name: Trades
  endpoint:
    path: /websocket-api/market-data/trades
    method: GET
- name: Ticker
  endpoint:
    path: /websocket-api/market-data/ticker
    method: GET
- name: ticker
  endpoint:
    path: /market-data/ticker
    method: GET
    data_selector: payload
- name: order_book
  endpoint:
    path: /websocket-api/market-data/order-book
    method: GET
    data_selector: feeds
- name: order_book
  endpoint:
    path: /order_book
    method: GET
    data_selector: payload
    params: {}
- name: orders
  endpoint:
    path: /websocket-api/orders-and-account-data/orders
    method: GET
- name: trades
  endpoint:
    path: /websocket-api/orders-and-account-data/trades
    method: GET
- name: balances
  endpoint:
    path: /websocket-api/orders-and-account-data/balances
    method: GET
- name: post_trade_settlement
  endpoint:
    path: /websocket-api/orders-and-account-data/post-trade-settlement
    method: GET
- name: trades
  endpoint:
    path: /ws
    method: GET
    data_selector: payload
- name: open_orders
  endpoint:
    path: /websocket-api/orders-and-account-data/orders
    method: GET
- name: trades
  endpoint:
    path: /rest-api/orders/get-all-trades
    method: GET
    data_selector: payload
- name: balances
  endpoint:
    path: /rest-api/account-management/get-all-balances
    method: GET
    data_selector: payload
- name: post_trade_settlement
  endpoint:
    path: /rest-api/post-trade-settlement-pts
    method: GET
    data_selector: payload
- name: Get All Balances
  endpoint:
    path: /rest-api/account-management/get-all-balances
    method: GET
- name: Get All Currencies
  endpoint:
    path: /rest-api/account-management/get-all-currencies
    method: GET
- name: Get All Currency Pairs
  endpoint:
    path: /rest-api/account-management/get-all-currency-pairs
    method: GET
- name: Get All Transactions
  endpoint:
    path: /rest-api/account-management/get-all-transactions
    method: GET
- name: Get Fees
  endpoint:
    path: /rest-api/account-management/get-fees
    method: GET
- name: Get Candlesticks
  endpoint:
    path: /rest-api/market-data/get-candlesticks
    method: GET
- name: Get Volume Analytics
  endpoint:
    path: /rest-api/market-data/get-volume-analytics
    method: GET
- name: Get Order Estimate
  endpoint:
    path: /rest-api/market-data/get-order-estimate
    method: GET
- name: Get Order Book
  endpoint:
    path: /rest-api/market-data/get-order-book
    method: GET
- name: Get Orders Report
  endpoint:
    path: /rest-api/reporting/get-orders-report
    method: GET
- name: Get Monthly Summary
  endpoint:
    path: /rest-api/reporting/get-monthly-summary
    method: GET
- name: Get Portfolio Valuation
  endpoint:
    path: /rest-api/reporting/get-portfolio-valuation
    method: GET
- name: Get All Transactions (Reporting)
  endpoint:
    path: /rest-api/reporting/get-all-transactions
    method: GET
- name: FIX Order Entry
  endpoint:
    path: /fix-api/fix
    method: POST
    data_selector: messages
    params: {}
- name: orders
  endpoint:
    path: /websocket-api/orders-and-account-data/orders
    method: GET
- name: trades
  endpoint:
    path: /websocket-api/orders-and-account-data/trades
    method: GET
- name: balances
  endpoint:
    path: /websocket-api/orders-and-account-data/balances
    method: GET
- name: post_trade_settlement
  endpoint:
    path: /websocket-api/orders-and-account-data/post-trade-settlement
    method: GET
- name: open_orders
  endpoint:
    path: /ws
    method: POST
    data_selector: payload
    params: {}
- name: trades
  endpoint:
    path: /rest-api/orders/get-all-trades
    method: GET
    data_selector: payload
- name: OrderEntry
  endpoint:
    path: /fix-api/fix
    method: POST
    data_selector: messages
- name: balances
  endpoint:
    path: /rest-api/account-management/get-all-balances
    method: GET
    data_selector: payload
    params: {}
- name: post_trade_settlement
  endpoint:
    path: /rest-api/post-trade-settlement-pts
    method: GET
    data_selector: payload
- name: Logon
  endpoint:
    path: /fix-api/fix
    method: A
    data_selector: Logon
    params:
      '554': Password
- name: NewOrderSingle
  endpoint:
    path: /fix-api/fix
    method: D
    data_selector: NewOrderSingle
    params:
      '11': ClOrdID
      '55': Symbol
      '54': Side
      '40': OrdType
      '44': Price
      '38': OrderQty
- name: Logon
  endpoint:
    path: /logon
    method: POST
    data_selector: response
    params: {}
- name: NewOrderSingle
  endpoint:
    path: /newOrderSingle
    method: POST
    data_selector: response
    params: {}
- name: RequestForQuote
  endpoint:
    path: /requestForQuote
    method: POST
    data_selector: response
    params: {}
notes:
- sFOX uses FIX 4.4
- Contact support@sfox.com to be provided with a SenderCompID for your session.
- Create an API Key in your account menu -> API
- Authenticate your requests with your API key
- sFOX recommends using the WebSocket API for retrieving data as much as possible
  as this will not count towards the request limit.
- The API key should be included in all API requests to the server in the Authorization
  header as a Bearer token.
- 'Rate Limit: 5 requests per 10 seconds'
- sFOX recommends using the Balances WebSocket feed instead
- sFOX recommends using the Balances WebSocket feed instead, which allows you to receive
  all balance changes in real-time, and does not count towards your request limit.
- 'Rate Limit: 1 request per 10 seconds'
- sFOX recommends using WebSocket API to receive order and/or trade updates to avoid
  rate limits.
- sFOX offers a wide range of order types and execution algorithms to optimize your
  order execution.
- sFOX recommends using our WebSocket API to receive order and/or trade updates where
  you can stream real-time order and/or trade updates and will avoid rate limits.
- Create order requests are rate limited to 60 requests per second per account.
- 'Rate Limit: 10 requests per 10 seconds'
- sFOX recommends using the Orders WebSocket feed instead, which streams order updates
  in real-time and does not count towards your request limit.
- 'RFQ orders are Fill-or-Kill (FOK): Will be responded to with a “Done” (filled)
  or “Canceled” (rejected) order.'
- Only one order will be accepted per quote.
- 'RFQ orders are Fill-or-Kill (FOK): Will be responded to with a ''Done'' (filled)
  or ''Canceled'' (rejected) order.'
- Data is not forward-filled and may be incomplete.
- Responses are limited to 500 results.
- Only use this as an estimate – execution is not guaranteed.
- Authentication required to receive a fees estimate.
- Utilizing WebSockets has a number of advantages including receiving updates in real-time,
  reducing latency, and reducing data transfer loads.
- 'Rate limits for the WebSocket API are as follows: 10 active connections per IP
  address and 40 requests per 1 minute per IP address.'
- Use the WebSocket endpoint wss://ws.sfox.com/ws for real-time data.
- All WebSocket feeds require authentication.
- If you exceed a rate limit, an error is thrown and your requests will be blocked
  for 2 minutes.
- Authentication required for WebSocket API.
- Real-time order books for a specified currency pair and order book variation.
- 'sFOX provides the following order book variations: net and sfox.'
- To begin receiving feed messages, you must send a subscribe message to the server.
- sFOX does not support sending changes at this time.
- Real-time tick data feed of any trade executed across all of sFOX’s integrated liquidity
  providers.
- Authentication required. Please refer to the WebSocket Authentication page for more
  details.
- Subscriptions to the ticker feed will receive real-time trades that occur on any
  of the exchanges that are active on the sFOX platform.
- Receive real-time updates regarding open orders you've placed in your account.
- Receive real-time updates regarding completed trades in your account.
- Updates reflect your balances inclusive of completed, partially completed, or pending
  transactions, orders, and transfers.
- Messages are only sent when a transaction is executed.
- Asset price changes may impact your risk metrics.
- A standard header is required at the start of each message
- Make sure to add your API key to the application (recommended to do so in code).
  Following these steps without adding your API Key will result in failure to connect
- Must establish a secure connection to the FIX gateway.
- Only one session may exist per SenderCompId.
- Asset price changes may impact risk metrics.
- Make sure to add your API key to the application (recommended to do so in code).
  Following these steps without adding your API Key will result in failure to connect.
errors:
- Only one session may exist per SenderCompId.
- '554: Your API Key is required.'
- 'Request Limit Exceeded: Throttle API calls or reduce frequency.'
- '429: Too Many Requests - If you exceed this, a 429 error is thrown and you have
  to wait 60 seconds before resuming.'
- '429: Too Many Requests - If you exceed this, a 429 error is thrown and you have
  to wait 10 seconds before resuming requests to this specific route.'
- '429: Too Many Requests - You have to wait 60 seconds before resuming.'
- '429: Too Many Requests for specific route - You have to wait 10 seconds before
  resuming requests to this specific route.'
- '429: If you exceed the request limit, you have to wait before resuming.'
- '429: If you exceed the route-specific limit, you have to wait 10 seconds before
  resuming requests to this specific route.'
- '429: If you exceed the IP address limit or route-specific limit.'
- '200: Success'
- '200: Successful response'
- '401: Unauthorized access'
- '429: Too many requests'
- '401 Unauthorized: Recheck API token or permissions'
- '200: Successful request'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '200: Successful retrieval'
- '401 Unauthorized: Invalid API token'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401: Unauthorized: invalid token. check authorization header.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'invalid currency_pair: undefined'
- 'invalid currency_pair: btcusda'
- '400: internal error'
- '400: the order ids provided were invalid or the orders were already done/canceled'
- '401: Unauthorized - Invalid API key or insufficient user permissions'
- '404: Not Found - The order_id specified in the request is invalid or does not exist'
- '401: Unauthorized'
- '404: Not Found'
- '422: Unprocessable Entity'
- '503: Service Unavailable'
- '403: Forbidden: post trade settlement disabled'
- '403: Forbidden: Your account does not have access to Post-Trade Settlement'
- before and after are mutually exclusive parameters
- start_date must be a valid timestamp
- end_date must be a valid timestamp
- user lookup failed
- post trade settlement disabled
- '400 Bad Request: Check your query parameters'
- '401 Unauthorized: Ensure your API token is valid'
- '429 Too Many Requests: Rate limit exceeded'
- before and after are mutually excusive parameters
- '200: Successful transfer'
- '400: Bad request - invalid parameters'
- '401: Unauthorized - invalid API token'
- '403: Forbidden: account is not enabled for margin trading'
- '401 Unauthorized: Recheck API token'
- '403: Forbidden - account is not enabled for margin trading'
- '401 Unauthorized: Recheck API key or token'
- '400: Bad request, check parameters'
- '401: Unauthorized, check API token'
- '404: Not found, check currency'
- '400: Bad request'
- '500: Internal server error'
- '400: Bad Request'
- '200: Successful transaction'
- '200: Transfer successful'
- '401: Unauthorized - Invalid API token'
- '403: Forbidden - Insufficient permissions'
- '200: Successful operation'
- 200 OK
- '404: Not found'
- '401 Unauthorized: Recheck API token or credentials'
- '401 Unauthorized: Recheck API token or token expiration'
- '202: Successfully Canceled Stake'
- '200: Successful stake transaction'
- '204: Unstake Request Accepted'
- 'REQUEST_LIMIT_EXCEEDED: Responses are limited to 500 candles'
- '400 Bad Request: Ensure required parameters are included'
- 'REQUEST_LIMIT_EXCEEDED: If the requested start_time, end_time, and interval will
  result in more than 500 results.'
- 'INVALID_PARAMETER: Check the required parameters and their formats'
- '422: Unprocessable Entity: currency must be a non-blank string'
- '200: OK Success'
- '401 Unauthorized: Recheck API key'
- '400 Bad Request: Check required parameters'
- '401 Unauthorized: Invalid API key'
- '404 Not Found: Endpoint does not exist'
- '422: Unprocessable Entity Invalid Request'
- start_date must be a valid unix timestamp in milliseconds
- end_date must be a valid unix timestamp in milliseconds
- interval must be 3600 or 86400
- 'REQUEST_LIMIT_EXCEEDED: 1 request per 10 seconds'
- 'Rate limit exceeded: Requests will be blocked for 2 minutes.'
- '401 Unauthorized: Recheck API key.'
- Error Codes may be found in the documentation.
- '400 Bad Request: Check request format and parameters'
- 'Unauthorized: Check API Key or permissions.'
- '401 Unauthorized: Check API key or permissions'
- 'Rate Limit Exceeded: Reduce frequency of requests'
- 'Authentication Failure: Check API key or token'
- '0: Too Late To Cancel'
- '1: Unknown Order'
- '99: Other (already canceled)'
- '400: Bad Request — Your request was malformed in some way'
- '401: Unauthorized - Your API key is wrong'
- '403: Forbidden — The API key is not authorized for this endpoint'
- '404: Not Found — The specified endpoint could not be found'
- '405: Method Not Allowed — You tried to access a endpoint with an invalid method'
- '406: Not Acceptable — You requested a format that isn’t json'
- '422: Unprocessable Entity - Your request contained invalid input'
- '429: Too Many Requests — You have exceeded your request limit'
- '500: Internal Server Error — We had a problem with our server. Try again later.'
- '503: Service Unavailable — We’re temporarily offline for maintanance. Please try
  again later.'
- '401 Unauthorized: Recheck API key or token expiration'
- '99: Other'
- '401 Unauthorized: Recheck API key or permissions'
- '554: Password required'
- '37: OrderID unknown'
- '41: OrigClOrdID required'
- '503: Service Unavailable — We’re temporarily offline for maintenance. Please try
  again later.'
- 'CxlRejReason: 0 - Too Late To Cancel'
- 'CxlRejReason: 1 - Unknown Order'
- 'CxlRejReason: 99 - Other (already canceled)'
auth_info:
  mentioned_objects:
  - apiKey
  - SenderCompID
client:
  base_url: https://api.sfox.com
source_metadata: null
