resources:
- name: DataFetcher
  endpoint:
    path: /DataFetcher/load
    method: GET
    data_selector: data
    params: {}
- name: ArgoFloat
  endpoint:
    path: /ArgoFloat
    method: GET
    data_selector: data
    params: {}
- name: ArgoIndex
  endpoint:
    path: /ArgoIndex
    method: GET
    data_selector: data
    params: {}
- name: DataFetcher
  endpoint:
    path: /generated/argopy.DataFetcher
    method: GET
    data_selector: records
- name: DataFetcher
  endpoint:
    path: /DataFetcher
    method: GET
    data_selector: data
    params: {}
- name: ArgoFloat
  endpoint:
    path: /ArgoFloat
    method: GET
    data_selector: data
    params: {}
- name: ArgoIndex
  endpoint:
    path: /ArgoIndex
    method: GET
    data_selector: data
    params: {}
- name: argo_measurements
  endpoint:
    path: /erddap/tabledap/ArgoFloat
    method: GET
    data_selector: records
    params: {}
- name: data_measurements
  endpoint:
    path: /erddap/tabledap/ArgoFloat
    method: GET
    data_selector: records
    params: {}
- name: float_data
  endpoint:
    path: /ftp/ifremer/argo
    method: GET
    data_selector: profiles
- name: ArgoFloat
  endpoint:
    path: /generated/argopy.ArgoFloat.html#argopy.ArgoFloat
    method: GET
- name: gdacfs
  endpoint:
    path: /generated/argopy.gdacfs.html#argopy.gdacfs
    method: GET
- name: ArgoIndex
  endpoint:
    path: /generated/argopy.ArgoIndex.html#argopy.ArgoIndex
    method: GET
- name: GreenCoding
  endpoint:
    path: /generated/argopy.utils.GreenCoding.html#argopy.utils.GreenCoding
    method: GET
- name: measurements
  endpoint:
    path: /measurements
    method: GET
    data_selector: data
    params:
      branch: master
      start_date: '2025-01-01'
- name: total_measurements
  endpoint:
    path: /total_measurements
    method: GET
    data_selector: data
    params:
      branches:
      - 385/merge
      - 437/merge
- name: footprint_since_last_release
  endpoint:
    path: /footprint_since_last_release
    method: GET
    data_selector: data
- name: footprint_for_release
  endpoint:
    path: /footprint_for_release
    method: GET
    data_selector: data
    params:
      release: v1.0.0
- name: footprint_all_releases
  endpoint:
    path: /footprint_all_releases
    method: GET
    data_selector: data
- name: footprint_baseline
  endpoint:
    path: /footprint_baseline
    method: GET
    data_selector: data
- name: ArgoIndex
  endpoint:
    path: /argo/index
    method: GET
    data_selector: records
- name: ArgoFloat
  endpoint:
    path: /argo/float
    method: GET
    data_selector: records
- name: carbon_footprint_metrics
  endpoint:
    path: /v0-1-16/metrics
    method: GET
    data_selector: records
    params: {}
- name: ArgoIndex
  endpoint:
    path: /generated/argopy.ArgoIndex.html
    method: GET
    data_selector: records
    params: {}
- name: ArgoFloat
  endpoint:
    path: /generated/argopy.ArgoFloat.html
    method: GET
    data_selector: records
    params: {}
- name: IndexFetcher
  endpoint:
    path: /api/v1/IndexFetcher
    method: GET
- name: DataFetcher
  endpoint:
    path: /api/v1/DataFetcher
    method: GET
- name: index
  endpoint:
    path: /ar_index_global_prof.txt
    method: GET
    data_selector: index
    params: {}
- name: measurements
  endpoint:
    path: /measurements
    method: GET
    data_selector: records
- name: footprint
  endpoint:
    path: /footprint
    method: GET
    data_selector: records
- name: carbon_footprint_metrics
  endpoint:
    path: /measurements
    method: GET
    data_selector: metrics
    params:
      branch: master
      start_date: '2025-01-01'
- name: index
  endpoint:
    path: /ar_index_global_prof.txt
    method: GET
    data_selector: N_MATCH
- name: ArgoIndex
  endpoint:
    path: /argo/index
    method: GET
    data_selector: records
- name: ArgoFloat
  endpoint:
    path: /argo/float
    method: GET
    data_selector: records
- name: float
  endpoint:
    path: /float
    method: GET
    data_selector: data
    params: {}
- name: index
  endpoint:
    path: /index
    method: GET
    data_selector: data
    params: {}
- name: energy_consumption
  endpoint:
    path: /energy/consumption
    method: GET
    data_selector: records
- name: carbon_footprint
  endpoint:
    path: /carbon/footprint
    method: GET
    data_selector: records
- name: ArgoIndex
  endpoint:
    path: /argo/index
    method: GET
    data_selector: records
- name: ArgoFloat
  endpoint:
    path: /argo/float
    method: GET
    data_selector: records
- name: carbon_footprint_metrics
  endpoint:
    path: /services/data/vXX.X/sobjects/CarbonFootprintMetrics
    method: GET
    data_selector: records
- name: argo_data
  endpoint:
    path: /argo/data
    method: GET
    data_selector: data
    params: {}
- name: argo_index
  endpoint:
    path: /argo/index
    method: GET
    data_selector: index
    params: {}
- name: ArgoIndex
  endpoint:
    path: /argo/index
    method: GET
    data_selector: records
    params: {}
- name: ArgoFloat
  endpoint:
    path: /argo/float
    method: GET
    data_selector: records
    params: {}
- name: GreenCoding
  endpoint:
    path: /green-coding
    method: GET
    data_selector: measurements
- name: data_fetcher
  endpoint:
    path: /catalog/profiles
    method: GET
    data_selector: records
    params: {}
- name: GreenCoding
  endpoint:
    path: /argopy/utils/GreenCoding
    method: GET
    data_selector: measurements
- name: Fetch_wmo
  endpoint:
    path: /argopy/data/fetch/wmo
    method: GET
- name: Fetch_box
  endpoint:
    path: /argopy/data/fetch/box
    method: GET
notes:
- argopy >= 1.3 requires Python 3.11
- The argopy software is continuously tested under latest OS (Linux, Mac OS and Windows)
  and with python versions 3.11 and 3.12.
- Fetched data are returned as a 1D array collection of measurements.
- If you prefer to work with a 2D array collection of vertical profiles, simply transform
  the dataset with the xarray.Dataset accessor method Dataset.argo.point2profile().
- Data are returned as a collection of measurements.
- Fetch data for a specific float using its WMO number.
- By default, all argopy data fetchers are set to work with a standard user mode,
  the other possible modes are research and expert.
- Data is made freely available through a ftp server or monthly zip snapshots.
- This new argopy version requires Python 3.11!
- This new argopy version requires Python 3.11 !
- Requires Python 3.11
- This support is primarily made available for benchmarking as part of the ADMT working
  group on Argo cloud format activities.
- Support for AWS S3 data files is experimental.
- New argopy option longitude_convention and improved box region validation may lead
  to unexpected breaking changes.
- argopy is ready but the Argo CTD reference database for DMQC is not fully published
  on the Ifremer ERDDAP yet.
- The new `gdac` fetcher uses Argo index to determine which profile files to load.
- This fetcher may show poor performances when used with a `region` access point.
- The legacy `localftp` fetcher is now deprecated.
- This new argopy version requires Python 3.11
- The new gdac fetcher uses Argo index to determine which profile files to load.
- This fetcher may show poor performances when used with a region access point.
- Since the new gdac fetcher can use a local copy of the GDAC ftp server, the legacy
  localftp fetcher is now deprecated.
- This API provides energy consumption data.
- Results are available for reporting.
- Drop support for Python 3.10
- API provides carbon footprint metrics and energy consumption data.
- API key is required for access to the data.
- Uses a new API endpoint for the argovis data source when fetching a region.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- New argopy option longitude_convention and improved box region validation.
- The API supports AWS S3 data files for benchmarking.
- Data fetchers must inherit from the argopy.data_fetchers.proto.ArgoDataFetcherProto.
- This class is currently used in the monitoring framework of Argo APIs.
- Data fetchers must inherit from the argopy.data_fetchers.proto.ArgoDataFetcherProto
- All http requests must go through the internal httpstore
errors:
- '400 Bad Request: Check your input parameters.'
- '401 Unauthorized: Verify your authentication credentials.'
- '404 Not Found: The requested resource could not be found.'
- '401 Unauthorized: Check your API key.'
- '404 Not Found: Endpoint does not exist.'
- 'ErddapHTTPNotFound: New fetcher not fully operational yet.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API key or token expiration'
- 'ErddapHTTPNotFound: when using the new fetcher'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://erddap.ifremer.fr/erddap
source_metadata: null
