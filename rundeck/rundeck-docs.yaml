resources:
- name: system_info
  endpoint:
    path: /api/14/system/info
    method: GET
    data_selector: system
    params: {}
- name: metrics
  endpoint:
    path: /api/25/metrics
    method: GET
    data_selector: _links
    params: {}
- name: metrics_healthcheck
  endpoint:
    path: /api/25/metrics/healthcheck
    method: GET
    data_selector: dataSource.connection.time
    params: {}
- name: metrics_threads
  endpoint:
    path: /api/25/metrics/threads
    method: GET
    data_selector: ''
- name: metrics_ping
  endpoint:
    path: /api/25/metrics/ping
    method: GET
    data_selector: ''
- name: list_users
  endpoint:
    path: /api/27/user/list/
    method: GET
    data_selector: ''
- name: get_user_profile
  endpoint:
    path: /api/21/user/info/
    method: GET
    data_selector: ''
- name: modify_user_profile
  endpoint:
    path: /api/21/user/info/
    method: POST
    data_selector: ''
- name: list_roles
  endpoint:
    path: /api/30/user/roles
    method: GET
    data_selector: ''
- name: log_storage_info
  endpoint:
    path: /api/17/system/logstorage
    method: GET
    data_selector: ''
- name: resume_incomplete_log_storage
  endpoint:
    path: /api/17/system/logstorage/incomplete/resume
    method: POST
    data_selector: ''
- name: jobs_import
  endpoint:
    path: /project/[PROJECT]/jobs/import
    method: POST
- name: job_definition
  endpoint:
    path: /job/[ID]
    method: GET
- name: bulk_job_delete
  endpoint:
    path: /jobs/delete
    method: DELETE
- name: job_execution_enable
  endpoint:
    path: /job/[ID]/execution/enable
    method: POST
- name: job_execution_disable
  endpoint:
    path: /job/[ID]/execution/disable
    method: POST
- name: job_schedule_enable
  endpoint:
    path: /job/[ID]/schedule/enable
    method: POST
- name: job_schedule_disable
  endpoint:
    path: /job/[ID]/schedule/disable
    method: POST
- name: bulk_toggle_execution
  endpoint:
    path: /jobs/execution/enable
    method: POST
- name: bulk_toggle_schedule
  endpoint:
    path: /jobs/schedule/enable
    method: POST
- name: job_metadata
  endpoint:
    path: /job/[ID]/info
    method: GET
- name: file_upload
  endpoint:
    path: /job/[ID]/input/file
    method: POST
- name: list_uploaded_files
  endpoint:
    path: /job/[ID]/input/files
    method: GET
- name: uploaded_file_info
  endpoint:
    path: /jobs/file/[ID]
    method: GET
- name: job_forecast
  endpoint:
    path: /job/[ID]/forecast
    method: GET
- name: job_workflow
  endpoint:
    path: /job/[ID]/workflow
    method: GET
- name: job_ui_metadata
  endpoint:
    path: /job/[ID]/meta
    method: GET
- name: job_tags
  endpoint:
    path: /job/[ID]/tags
    method: GET
- name: takeover_schedule
  endpoint:
    path: /api/14/scheduler/takeover
    method: PUT
    data_selector: takeoverSchedule
    params: {}
- name: list_scheduled_jobs_cluster
  endpoint:
    path: /api/17/scheduler/server/[UUID]/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: list_scheduled_jobs
  endpoint:
    path: /api/17/scheduler/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: set_active_mode
  endpoint:
    path: /api/41/enterprise/cluster/executions/enable
    method: POST
    data_selector: status
    params: {}
- name: set_passive_mode
  endpoint:
    path: /api/41/enterprise/cluster/executions/disable
    method: POST
    data_selector: status
    params: {}
- name: list_system_acl_policies
  endpoint:
    path: /api/14/system/acl/
    method: GET
    data_selector: resources
    params: {}
- name: get_acl_policy
  endpoint:
    path: /api/14/system/acl/name.aclpolicy
    method: GET
    data_selector: contents
    params: {}
- name: create_acl_policy
  endpoint:
    path: /api/14/system/acl/name.aclpolicy
    method: POST
    data_selector: status
    params: {}
- name: update_acl_policy
  endpoint:
    path: /api/14/system/acl/name.aclpolicy
    method: PUT
    data_selector: status
    params: {}
- name: delete_acl_policy
  endpoint:
    path: /api/14/system/acl/name.aclpolicy
    method: DELETE
    data_selector: status
    params: {}
- name: list_jobs
  endpoint:
    path: /api/14/project/[PROJECT]/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: run_job
  endpoint:
    path: /api/14/job/[ID]/run
    method: POST
    data_selector: status
    params: {}
- name: retry_job
  endpoint:
    path: /api/24/job/[ID]/retry/[EXECID]
    method: POST
    data_selector: status
    params: {}
- name: export_jobs
  endpoint:
    path: /api/14/project/[PROJECT]/jobs/export
    method: GET
    data_selector: jobs
    params: {}
- name: execution_state
  endpoint:
    path: /execution/[ID]/state
    method: GET
    data_selector: executionState
    params: {}
- name: execution_output
  endpoint:
    path: /execution/[ID]/output
    method: GET
    data_selector: entries
    params: {}
- name: executions
  endpoint:
    path: /api/14/project/[PROJECT]/executions
    method: GET
    data_selector: executions
    params: {}
- name: running_executions
  endpoint:
    path: /api/14/project/[PROJECT]/executions/running
    method: GET
    data_selector: executions
    params: {}
- name: execution_info
  endpoint:
    path: /api/14/execution/[ID]
    method: GET
    data_selector: execution
    params: {}
- name: import
  endpoint:
    path: /api/14/project/[PROJECT]/import
    method: PUT
    data_selector: import_status
    params:
      asyncImport: 'false'
      jobUuidOption: preserve
      importExecutions: 'true'
      importConfig: 'true'
      importACL: 'true'
      importScm: 'true'
- name: import status
  endpoint:
    path: /api/$apiVersion/project/$project/import/status
    method: GET
- name: list resources
  endpoint:
    path: /api/14/project/[PROJECT]/resources
    method: GET
- name: get resource
  endpoint:
    path: /api/14/project/[PROJECT]/resource/[NAME]
    method: GET
- name: plugins
  endpoint:
    path: /plugin/list
    method: GET
- name: webhooks
  endpoint:
    path: /project/[PROJECT]/webhooks
    method: GET
- name: abort_execution
  endpoint:
    path: /execution/[ID]/abort
    method: GET
    data_selector: abort
    params: {}
- name: check_execution_result_data_availability
  endpoint:
    path: /execution/[ID]/result/dataAvailable
    method: GET
    data_selector: loadable
    params: {}
- name: get_execution_result_data
  endpoint:
    path: /execution/[ID]/result/data
    method: GET
    data_selector: data
    params: {}
- name: run_adhoc_commands
  endpoint:
    path: /project/[PROJECT]/run/command
    method: GET
    data_selector: message
    params: {}
- name: run_adhoc_scripts
  endpoint:
    path: /project/[PROJECT]/run/script
    method: POST
    data_selector: message
    params: {}
- name: run_adhoc_script_urls
  endpoint:
    path: /project/[PROJECT]/run/url
    method: POST
    data_selector: message
    params: {}
- name: upload_keys
  endpoint:
    path: /storage/keys/[PATH]/[FILE]
    method: POST
    data_selector: url
    params: {}
- name: list_keys
  endpoint:
    path: /storage/keys/[PATH]/
    method: GET
    data_selector: resources
    params: {}
- name: get_key_metadata
  endpoint:
    path: /storage/keys/[PATH]/[FILE]
    method: GET
    data_selector: meta
    params: {}
- name: get_key_contents
  endpoint:
    path: /storage/keys/[PATH]/[FILE]
    method: GET
    data_selector: content
    params: {}
- name: delete_keys
  endpoint:
    path: /storage/keys/[PATH]/[FILE]
    method: DELETE
    data_selector: status
    params: {}
- name: list_projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: create_project
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params: {}
- name: get_project_info
  endpoint:
    path: /project/[PROJECT]
    method: GET
    data_selector: description
    params: {}
- name: delete_project
  endpoint:
    path: /project/[PROJECT]
    method: DELETE
    data_selector: status
    params: {}
- name: get_project_configuration
  endpoint:
    path: /project/[PROJECT]/config
    method: GET
    data_selector: config
    params: {}
- name: put_project_configuration
  endpoint:
    path: /project/[PROJECT]/config
    method: PUT
    data_selector: config
    params: {}
- name: get_project_configuration_key
  endpoint:
    path: /project/[PROJECT]/config/[KEY]
    method: GET
    data_selector: value
    params: {}
- name: put_project_configuration_key
  endpoint:
    path: /project/[PROJECT]/config/[KEY]
    method: PUT
    data_selector: value
    params: {}
- name: delete_project_configuration_key
  endpoint:
    path: /project/[PROJECT]/config/[KEY]
    method: DELETE
    data_selector: status
    params: {}
- name: project_archive_export
  endpoint:
    path: /project/[PROJECT]/export
    method: GET
    data_selector: archive
    params: {}
- name: project_archive_export_async
  endpoint:
    path: /project/[PROJECT]/export/async
    method: GET
    data_selector: archive
    params: {}
- name: project_archive_export_async_status
  endpoint:
    path: /project/[PROJECT]/export/status/[TOKEN]
    method: GET
    data_selector: status
    params: {}
- name: project_archive_export_async_download
  endpoint:
    path: /project/[PROJECT]/export/download/[TOKEN]
    method: GET
    data_selector: download
    params: {}
- name: runners
  endpoint:
    path: /api/41/project/[PROJECT]/runnerManagement/runners
    method: GET
    data_selector: runners
- name: runner
  endpoint:
    path: /api/41/project/[PROJECT]/runnerManagement/runner/[RUNNERID]
    method: GET
    data_selector: runner
- name: update_runner
  endpoint:
    path: /api/41/project/[PROJECT]/runnerManagement/runner/[RUNNERID]
    method: POST
    data_selector: runner
- name: delete_runner
  endpoint:
    path: /api/41/project/[PROJECT]/runnerManagement/runner/[RUNNERID]
    method: DELETE
- name: ping_runner
  endpoint:
    path: /api/41/project/[PROJECT]/runnerManagement/runner/[ID]/ping
    method: POST
    data_selector: pingToken
- name: check_ping
  endpoint:
    path: /api/41/project/[PROJECT]/runnerManagement/checkPing/[TOKEN]
    method: GET
    data_selector: completed
- name: regenerate_creds
  endpoint:
    path: /api/41/project/[PROJECT]/runnerManagement/runner/[ID]/regenerateCreds
    method: POST
    data_selector: runnerId
- name: remove_project_association
  endpoint:
    path: /api/41/project/[PROJECT]/runnerManagement/runner/[RUNNERID]/removeProjectAssociation
    method: POST
    data_selector: runner
- name: update_node_dispatch
  endpoint:
    path: /api/42/project/[PROJECT]/runnerManagement/nodeDispatch/config
    method: POST
    data_selector: runner
- name: Add A Webhook
  endpoint:
    path: /api/53/project/[PROJECT]/webhook
    method: POST
    data_selector: msg
    params: {}
- name: Delete A Webhook
  endpoint:
    path: /api/53/project/[PROJECT]/webhook/[ID]
    method: DELETE
    data_selector: msg
    params: {}
- name: Send Webhook Event
  endpoint:
    path: /api/53/webhook/[AUTH_TOKEN]
    method: POST
    data_selector: ok
    params: {}
- name: List System Calendars
  endpoint:
    path: /api/41/system/calendars
    method: GET
    data_selector: ''
    params: {}
- name: List Project Calendars
  endpoint:
    path: /api/41/project/[PROJECT]/calendars
    method: GET
    data_selector: ''
    params: {}
- name: Create/Update System Calendar
  endpoint:
    path: /api/41/system/calendars
    method: POST
    data_selector: ''
    params: {}
- name: Create/Update Project Calendar
  endpoint:
    path: /api/41/project/[PROJECT]/calendars
    method: POST
    data_selector: ''
    params: {}
- name: Delete Project Calendar
  endpoint:
    path: /api/41/project/[PROJECT]/calendars/[ID]
    method: DELETE
    data_selector: ''
    params: {}
- name: Delete System Calendar
  endpoint:
    path: /api/41/system/calendars/[ID]
    method: DELETE
    data_selector: ''
    params: {}
- name: View License
  endpoint:
    path: /api/41/enterprise/license
    method: GET
    data_selector: ''
    params: {}
- name: Set License Key
  endpoint:
    path: /api/41/enterprise/license
    method: POST
    data_selector: ''
    params: {}
- name: Get A System Feature Status
  endpoint:
    path: /api/42/feature/[FEATURE]
    method: GET
    data_selector: ''
    params: {}
- name: Get All System Feature Status
  endpoint:
    path: /api/42/feature/
    method: GET
    data_selector: ''
    params: {}
- name: Check a ping response
  endpoint:
    path: /api/42/runnerManagement/checkPing/[TOKEN]
    method: GET
    data_selector: ''
    params: {}
- name: Download runner Jar
  endpoint:
    path: /api/41/runnerManagement/download/[TOKEN]
    method: GET
    data_selector: ''
    params: {}
- name: Ping the runner
  endpoint:
    path: /api/41/runnerManagement/runner/[ID]/ping
    method: POST
    data_selector: ''
    params: {}
- name: Regenerate credentials for the Runner
  endpoint:
    path: /api/42/runnerManagement/runner/[ID]/regenerateCreds
    method: POST
    data_selector: ''
    params: {}
- name: List tags for the Runner
  endpoint:
    path: /api/42/runnerManagement/runner/[ID]/tags
    method: GET
    data_selector: ''
    params: {}
- name: Get runner information
  endpoint:
    path: /api/41/runnerManagement/runner/[RUNNERID]
    method: GET
    data_selector: ''
    params: {}
- name: Update the runner information
  endpoint:
    path: /api/41/runnerManagement/runner/[RUNNERID]
    method: POST
    data_selector: ''
    params: {}
- name: Delete the specified runner
  endpoint:
    path: /api/41/runnerManagement/runner/[RUNNERID]
    method: DELETE
    data_selector: ''
    params: {}
- name: List available runners
  endpoint:
    path: /api/41/runnerManagement/runners
    method: GET
    data_selector: ''
    params: {}
- name: Create a new Runner
  endpoint:
    path: /api/42/runnerManagement/runners
    method: POST
    data_selector: ''
    params: {}
- name: List all known tags
  endpoint:
    path: /api/42/runnerManagement/tags
    method: GET
    data_selector: ''
    params: {}
- name: Get UI info for runner management
  endpoint:
    path: /api/42/runnerManagement/ui
    method: GET
    data_selector: ''
    params: {}
- name: List tags for the Runner
  endpoint:
    path: /api/42/runnerTag/searchTags
    method: GET
    data_selector: ''
    params: {}
- name: Save Project Context Runner Config
  endpoint:
    path: /api/41/project/[PROJECT]/runnerManagement/config
    method: POST
    data_selector: ''
    params: {}
- name: Get Project Context Runner Config
  endpoint:
    path: /api/41/project/[PROJECT]/runnerManagement/config
    method: GET
    data_selector: ''
    params: {}
- name: Create a new Runner Project level
  endpoint:
    path: /api/41/project/[PROJECT]/runnerManagement/runners
    method: POST
    data_selector: ''
    params: {}
- name: execution_info
  endpoint:
    path: /api/V/execution/[ID]
    method: GET
- name: execution_output
  endpoint:
    path: /api/V/execution/[ID]/output
    method: GET
- name: execution_state
  endpoint:
    path: /api/V/execution/[ID]/state
    method: GET
- name: list_metrics
  endpoint:
    path: /api/V/metrics
    method: GET
- name: system_info
  endpoint:
    path: /api/V/system/info
    method: GET
- name: list_users
  endpoint:
    path: /api/V/user/list
    method: GET
- name: runner_management_ping
  endpoint:
    path: /api/V/project/[PROJECT]/runnerManagement/runner/[ID]/ping
    method: POST
- name: runner_management_check_ping
  endpoint:
    path: /api/V/project/[PROJECT]/runnerManagement/checkPing/[TOKEN]
    method: GET
- name: runner_management_regenerate_creds
  endpoint:
    path: /api/V/project/[PROJECT]/runnerManagement/runner/[ID]/regenerateCreds
    method: POST
- name: runner_management_download_jar
  endpoint:
    path: /api/V/project/[PROJECT]/runnerManagement/download/[TOKEN]
    method: GET
- name: runner_management_remove_project_association
  endpoint:
    path: /api/V/project/[PROJECT]/runnerManagement/runner/[RUNNERID]/removeProjectAssociation
    method: POST
- name: runner_management_update_node_dispatch
  endpoint:
    path: /api/V/project/[PROJECT]/runnerManagement/nodeDispatch/config
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: nodes
  endpoint:
    path: /api/nodes
    method: GET
    data_selector: nodes
    params: {}
- name: executions
  endpoint:
    path: /activity/executions
    method: GET
    data_selector: executions
- name: webhook_event
  endpoint:
    path: /wvNE6e1R06eqCQSl5jwXgXy3IUgt5vxS#Advanced_Webhook
    method: POST
    data_selector: messages
- name: user_api_tokens
  endpoint:
    path: /api/v1/user/tokens
    method: GET
    data_selector: tokens
- name: sources
  endpoint:
    path: /api/V/project/[PROJECT]/sources
    method: GET
    data_selector: ''
    params: {}
- name: source
  endpoint:
    path: /api/V/project/[PROJECT]/source/[INDEX]
    method: GET
    data_selector: ''
    params: {}
- name: resources
  endpoint:
    path: /api/V/project/[PROJECT]/source/[INDEX]/resources
    method: GET
    data_selector: ''
    params: {}
- name: resources_updated
  endpoint:
    path: /api/V/project/[PROJECT]/resources
    method: GET
    data_selector: ''
    params: {}
- name: resource_info
  endpoint:
    path: /api/V/project/[PROJECT]/resource/[NAME]
    method: GET
    data_selector: ''
    params: {}
- name: run_script
  endpoint:
    path: /api/8/run/script
    method: GET
- name: run_url
  endpoint:
    path: /api/8/run/url
    method: GET
- name: import_jobs
  endpoint:
    path: /api/8/jobs/import
    method: GET
- name: takeover_schedule
  endpoint:
    path: /api/7/incubator/jobs/takeoverSchedule
    method: PUT
- name: execution_output
  endpoint:
    path: /api/6/execution/[ID]/output
    method: GET
- name: bulk_job_delete
  endpoint:
    path: /api/5/jobs/delete
    method: DELETE
- name: execution_query
  endpoint:
    path: /api/5/executions
    method: GET
- name: listing_history
  endpoint:
    path: /api/1/history
    method: GET
- name: listing_resources
  endpoint:
    path: /api/1/resources
    method: GET
- name: system_info
  endpoint:
    path: /api/{{rdeck_api_version}}/system/info
    method: GET
    data_selector: response
    params: {}
- name: run_job
  endpoint:
    path: /api/{{rdeck_api_version}}/job/{{job_id}}/run
    method: POST
    data_selector: response
    params: {}
- name: Attribute Match
  endpoint:
    path: /docs/manual/node-enhancers.html
    method: GET
    data_selector: Attribute Matches
- name: Icon
  endpoint:
    path: /docs/manual/node-enhancers.html
    method: GET
    data_selector: Icon
- name: Health Checks
  endpoint:
    path: /docs/manual/healthchecks.html
    method: GET
    data_selector: Health Checks
- name: health_check
  endpoint:
    path: /health-check
    method: GET
    data_selector: statuses
notes:
- It is recommended that you enable SSL Support for the Rundeck server so that communication
  is encrypted at all times.
- Requires setup of connected app in Rundeck
- Ensure UUIDs are correctly specified for operations
- 'The timestamp format is ISO8601: yyyy-MM-dd''T''HH:mm:ss''Z'''
- Execution states include WAITING, RUNNING, SUCCEEDED, FAILED, ABORTED, NODE_PARTIAL_SUCCEEDED,
  NODE_MIXED, NOT_STARTED.
- Use project name or '*' for all projects in requests.
- Status can include running, succeeded, failed, aborted, etc.
- Import process is asynchronous if asyncImport=true
- Response indicates success or failure based on jobs and files imported
- Requires setup of connected app for OAuth2
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- This feature is only available after version 4.11 of Runbook Automation with the
  new Distributed Automation flag turned on.
- Old executions can be bound to old workflows stored in database just for information
  purposes, as a better practice, we recommend to clean periodically old executions
  in order to avoid slowness in the GUI or other problems related with the excessive
  amount of old records in the database.
- Blackout Calendars will take precedence and prevent the job from running.
- Blackout Calendars are not considered Misfired Jobs.
- Webhooks are on by default as of 3.2.0.
- Tours can be enabled/disabled using the Toggle button at the top of the Tour Group.
- When using SSH node executor and SCP file copier, the properties will be shared
  between the file copier and the node executor, so any change made for the node executor
  will affect the file copier and vice versa.
- When using SCP file copier and SSH node executor, the properties will be shared
  between the file copier and the node executor, so any change made for the file copier
  will affect the node executor and vice versa.
- API Tokens can be generated and managed by users.
- Admin users can manage tokens for all users.
- This is only required on Self-Hosted version. Runbook Automation (SaaS) will come
  pre-installed with your license.
- The Runbook Automation Self-Hosted version will require a license file.
- Rundeck requires every user to login.
- The default installation defines an 'admin' user with access to perform all actions.
- API versions below `17` are *deprecated*. Clients using earlier versions should
  upgrade to use `17` as the minimum version before release `6.0.0` to avoid errors.
- Rundeck API requires an API key for authentication.
- Ensure to provide the correct job ID when running jobs.
- 'Limitation with Enterprise Runners: Health Checks feature is not compatible with
  Enterprise Runners.'
errors:
- 'api-version-unsupported: The specified API version is not supported for the requested
  resource'
- 'unauthorized: The requested action is not authorized and/or the connection is not
  authenticated.'
- 'api.error.api-version.unsupported: Unsupported API Version'
- '409 Conflict: Resource already exists'
- '404 Not Found: Resource not found'
- '400 Bad Request: Validation errors occurred'
- '401 Unauthorized: User does not have read access to the Job or to Adhoc executions.'
- '404 Not Found: Check if the resource exists.'
- '401 Unauthorized: Check OAuth token and scopes.'
- '404 Not Found: Resource does not exist'
- 'Job ABC could not be validated: ...'
- 'File does not exist: /Users/greg/rundeck2.11/projects/atest/etc/resources2.xml'
- '404 Not Found: No plugin configured for the specified integration'
- '400 Bad Request: Some input values were not valid.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your API token or permissions'
- '403 Forbidden: You do not have permission to access this resource'
- '401 Unauthorized: Check API key and permissions'
- '404 Not Found: Verify endpoint and resource existence'
- 'Unauthorized: cannot execute on node'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - UserManager
  - API Token
client:
  base_url: /api/14
  headers:
    Content-Type: application/json
source_metadata: null
