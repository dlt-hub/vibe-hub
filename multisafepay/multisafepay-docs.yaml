resources:
- name: orders
  endpoint:
    path: /orders
    method: POST
    data_selector: data
    params: {}
- name: get_order
  endpoint:
    path: /orders/{order_id}
    method: GET
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /v1/json/orders
    method: POST
    data_selector: success
    params:
      api_key: YOUR_GROUP_API_KEY
- name: Create order
  endpoint:
    path: /reference/createorder
    method: POST
- name: Get order
  endpoint:
    path: /reference/getorder
    method: GET
- name: Update or cancel order
  endpoint:
    path: /reference/updateorder
    method: PATCH
- name: Cancel Bancontact QR payment
  endpoint:
    path: /reference/cancelbancontactqr
    method: POST
- name: Capture payment
  endpoint:
    path: /reference/capturepayment
    method: POST
- name: Cancel authorized payment
  endpoint:
    path: /reference/cancelauthorizedorder
    method: PATCH
- name: List gateways
  endpoint:
    path: /reference/listgateways
    method: GET
- name: Get gateway
  endpoint:
    path: /reference/getgateway
    method: GET
- name: List payment methods
  endpoint:
    path: /reference/listpaymentmethods
    method: GET
- name: Get payment method
  endpoint:
    path: /reference/getpaymentmethod
    method: GET
- name: Put PAD order on hold
  endpoint:
    path: /reference/padputonhold
    method: POST
- name: Extend order autoexpire
  endpoint:
    path: /reference/padextendautoexpire
    method: POST
- name: Challenge chargebacks
  endpoint:
    path: /reference/challengechargeback
    method: POST
- name: List tokens
  endpoint:
    path: /reference/listtokens
    method: GET
- name: Get token
  endpoint:
    path: /reference/gettoken
    method: GET
- name: Update token
  endpoint:
    path: /reference/updatecardexpirydate
    method: PATCH
- name: Delete token
  endpoint:
    path: /reference/deletetoken
    method: DELETE
- name: Refund order
  endpoint:
    path: /reference/refundorder
    method: POST
- name: Cancel a refund
  endpoint:
    path: /reference/cancelrefund
    method: PATCH
- name: List closing balances
  endpoint:
    path: /reference/listclosingbalances
    method: GET
- name: Get site
  endpoint:
    path: /reference/getsite
    method: GET
- name: Update site
  endpoint:
    path: /reference/updatesite
    method: PATCH
- name: List transactions
  endpoint:
    path: /reference/listtransactions
    method: GET
- name: Get transaction
  endpoint:
    path: /reference/gettransaction
    method: GET
- name: Get receipt
  endpoint:
    path: /reference/getreceipt
    method: GET
- name: List terminals by group
  endpoint:
    path: /reference/listterminalsbygroup
    method: GET
- name: List terminals
  endpoint:
    path: /reference/listterminals
    method: GET
- name: create_affiliate
  endpoint:
    path: /reference/createaffiliate/
    method: POST
- name: add_bank_account
  endpoint:
    path: /reference/addaffiliatebankaccount/
    method: POST
- name: add_ubo
  endpoint:
    path: /reference/addaffiliateubo/
    method: POST
- name: add_website
  endpoint:
    path: /reference/addaffiliatesite/
    method: POST
- name: account_balance
  endpoint:
    path: /account/balance
    method: GET
    data_selector: balance
- name: currencies
  endpoint:
    path: /currencies
    method: GET
    data_selector: currencies
- name: account_balance
  endpoint:
    path: /accounts/balance
    method: GET
    data_selector: balance
    params: {}
- name: daily_balance
  endpoint:
    path: /reports/daily_balance
    method: GET
    data_selector: daily_balance
    params: {}
- name: uncleared_balance
  endpoint:
    path: /reports/uncleared_balance
    method: GET
    data_selector: uncleared_balance
    params: {}
- name: invoices
  endpoint:
    path: /docs/invoices
    method: GET
    data_selector: records
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: methods
- name: payouts
  endpoint:
    path: /payouts
    method: GET
    data_selector: records
    params: {}
- name: currencies
  endpoint:
    path: /currencies
    method: GET
    data_selector: records
    params: {}
- name: websites
  endpoint:
    path: /websites
    method: GET
    data_selector: websites
- name: payment_methods
  endpoint:
    path: /payment/methods
    method: GET
    data_selector: methods
- name: refunds
  endpoint:
    path: /refunds
    method: POST
    data_selector: refunds
- name: payment_methods
  endpoint:
    path: /docs/payment-methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: refunds
  endpoint:
    path: /docs/refund-payments
    method: GET
    data_selector: refunds
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: refunds
  endpoint:
    path: /refunds
    method: POST
    data_selector: data
    params: {}
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: methods
- name: payment_link
  endpoint:
    path: /docs/payment-links/
    method: GET
    data_selector: payment_links
    params: {}
- name: refund_order
  endpoint:
    path: /reference/refundorder/
    method: POST
    data_selector: refunds
    params: {}
- name: payment_methods
  endpoint:
    path: /api/payment_methods
    method: GET
    data_selector: methods
- name: payment_methods
  endpoint:
    path: /payments
    method: GET
    data_selector: data
- name: order_status
  endpoint:
    path: /order-status
    method: GET
    data_selector: data
- name: payment_methods
  endpoint:
    path: /MultiSafepay/PaymentMethods
    method: GET
    data_selector: methods
    params: {}
- name: orders
  endpoint:
    path: /MultiSafepay/Orders
    method: POST
    data_selector: order
    params: {}
- name: payment_methods
  endpoint:
    path: /docs/payment-methods
    method: GET
    data_selector: methods
- name: account_balance
  endpoint:
    path: /docs/account-balance
    method: GET
    data_selector: balance
- name: payment_methods
  endpoint:
    path: /api/payment_methods
    method: GET
    data_selector: payment_methods
- name: refunds
  endpoint:
    path: /api/refunds
    method: POST
    data_selector: refunds
- name: orders
  endpoint:
    path: /orders
    method: POST
    data_selector: order
    params: {}
- name: payment_methods
  endpoint:
    path: /docs/payment-methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: backend_orders
  endpoint:
    path: /docs/backend-orders
    method: GET
    data_selector: backend_orders
    params: {}
- name: payment_methods
  endpoint:
    path: /docs/payment-methods
    method: GET
- name: payment_methods
  endpoint:
    path: /payment/methods
    method: GET
    data_selector: methods
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: payment_methods
  endpoint:
    path: /paymentmethods
    method: GET
    data_selector: payment_methods
    params: {}
- name: refunds
  endpoint:
    path: /refunds
    method: POST
    data_selector: refunds
    params: {}
- name: payment_methods
  endpoint:
    path: /api/payment-methods
    method: GET
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: transaction
    params: {}
- name: bank_transfer
  endpoint:
    path: /docs/payment-methods/bank-transfer
    method: GET
    data_selector: null
    params: {}
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: data
- name: payment_statuses
  endpoint:
    path: /payment/statuses
    method: GET
    data_selector: statuses
- name: payment_pages
  endpoint:
    path: /payment/pages
    method: GET
    data_selector: pages
- name: payment_methods
  endpoint:
    path: /docs/payment-methods
    method: GET
- name: currencies
  endpoint:
    path: /docs/currencies
    method: GET
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: GET
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: payment_options
    params: {}
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
    params: {}
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
    params:
      gateway: MULTIBANCO
      type: direct
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: methods
- name: payment_statuses
  endpoint:
    path: /payment-statuses
    method: GET
    data_selector: statuses
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: GET
    data_selector: transactions
    params: {}
- name: Create order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
    params: {}
- name: payment_statuses
  endpoint:
    path: /payment-statuses
    method: GET
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
- name: payment_statuses
  endpoint:
    path: /payment/statuses
    method: GET
    data_selector: statuses
    params: {}
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
    params: {}
- name: refund_order
  endpoint:
    path: /reference/refundorder
    method: POST
- name: update_order
  endpoint:
    path: /reference/updateorder
    method: POST
- name: create_order
  endpoint:
    path: /reference/createorder
    method: POST
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
    params: {}
- name: update_order
  endpoint:
    path: /reference/updateorder/
    method: POST
    data_selector: order
    params: {}
- name: payment_statuses
  endpoint:
    path: /payment-statuses
    method: GET
    data_selector: statuses
- name: refunds
  endpoint:
    path: /refunds
    method: POST
    data_selector: refund
- name: direct_requests
  endpoint:
    path: /api/direct
    method: POST
    data_selector: data
    params:
      required_fields:
      - first_name
      - last_name
      - address
      - email
      - business_name
      - chamber_of_commerce_number
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: checkout_data
    params: {}
- name: refund_order
  endpoint:
    path: /reference/refundorder
    method: POST
    data_selector: checkout_data
    params: {}
- name: get_order
  endpoint:
    path: /reference/getorder
    method: GET
    data_selector: order_details
    params: {}
- name: update_order
  endpoint:
    path: /reference/updateorder/
    method: PUT
    data_selector: order_status
    params: {}
- name: refund_order
  endpoint:
    path: /v1/json/orders/{order_id}/refunds
    method: POST
    data_selector: checkout_data.items
- name: get_order
  endpoint:
    path: /v1/json/orders/{order_id}
    method: GET
    data_selector: order_details
- name: refund_order
  endpoint:
    path: /v1/json/orders/{order_id}/refunds
    method: POST
- name: get_order
  endpoint:
    path: /v1/json/orders/{order_id}
    method: GET
- name: refund_order
  endpoint:
    path: /v1/json/orders/{order_id}/refunds
    method: POST
    data_selector: checkout_data
    params: {}
- name: get_order
  endpoint:
    path: /v1/json/orders/{order_id}
    method: GET
    data_selector: order_details
    params: {}
- name: update_order_status
  endpoint:
    path: /v1/json/orders/{order_id}/status
    method: POST
    data_selector: status_update
    params: {}
- name: create_order
  endpoint:
    path: /v1/json/orders
    method: POST
- name: get_order
  endpoint:
    path: /v1/json/orders/{order_id}
    method: GET
- name: refund_order
  endpoint:
    path: /v1/json/orders/{order_id}/refunds
    method: POST
- name: update_order
  endpoint:
    path: /v1/json/orders/{order_id}
    method: PUT
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
    params: {}
- name: refund_order
  endpoint:
    path: /reference/refundorder
    method: POST
    data_selector: refund
    params: {}
- name: refund_order
  endpoint:
    path: /v1/json/orders/{order_id}/refunds
    method: POST
    data_selector: checkout_data.items
- name: get_order
  endpoint:
    path: /v1/json/orders/{order_id}
    method: GET
    data_selector: order
- name: card_payments
  endpoint:
    path: /docs/card-payments/
    method: GET
- name: moto
  endpoint:
    path: /docs/moto/
    method: GET
- name: zero_authorization
  endpoint:
    path: /docs/zero-authorization/
    method: GET
- name: manual_capture
  endpoint:
    path: /docs/manual-capture/
    method: GET
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: data
- name: refunds
  endpoint:
    path: /refunds
    method: GET
    data_selector: refunds
    params: {}
- name: Create order
  endpoint:
    path: /reference/createorder/
    method: POST
- name: uncleared_card_payments
  endpoint:
    path: /api/uncleared-card-payments
    method: GET
    data_selector: transactions
- name: gift_cards
  endpoint:
    path: /docs/gift-cards
    method: GET
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: currencies
  endpoint:
    path: /currencies
    method: GET
    data_selector: currencies
    params: {}
- name: payment_statuses
  endpoint:
    path: /payment/statuses
    method: GET
    data_selector: statuses
- name: gift_cards
  endpoint:
    path: /payment-methods/giftcards
    method: GET
    data_selector: gift_cards
    params: {}
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
- name: payment_pages
  endpoint:
    path: /docs/payment-pages/
    method: GET
- name: chargebacks
  endpoint:
    path: /docs/chargebacks/
    method: GET
- name: refunds
  endpoint:
    path: /docs/refund-payments/
    method: GET
- name: second_chance
  endpoint:
    path: /docs/second-chance/
    method: GET
- name: Amazon Pay
  endpoint:
    path: /docs/amazon-pay/
    method: GET
- name: Apple Pay
  endpoint:
    path: /docs/apple-pay/
    method: GET
- name: Google Pay
  endpoint:
    path: /docs/google-pay/
    method: GET
- name: PayPal
  endpoint:
    path: /docs/paypal/
    method: GET
- name: Alipay
  endpoint:
    path: /docs/alipay/
    method: GET
- name: Alipay+
  endpoint:
    path: /docs/alipay-plus/
    method: GET
- name: WeChat Pay
  endpoint:
    path: /docs/wechat-pay/
    method: GET
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: response
    params:
      gateway: ALIPAY
      type: direct
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: transaction
    params: {}
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: payment_data
- name: Create order
  endpoint:
    path: /reference/createorder/
    method: POST
- name: payment_methods
  endpoint:
    path: /api/payment_methods
    method: GET
    data_selector: methods
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: paymentDetails
    params: {}
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: methods
    params: {}
- name: payment_statuses
  endpoint:
    path: /payment-statuses
    method: GET
    data_selector: statuses
    params: {}
- name: payment_request
  endpoint:
    path: /paymentRequest
    method: POST
    data_selector: paymentData
    params: {}
- name: payment_request
  endpoint:
    path: /payments/api/request
    method: POST
    data_selector: paymentData
    params:
      merchantId: yourMultiSafepayAccountId
- name: paypal
  endpoint:
    path: /v1/json/wallets/configs/paypal
    method: GET
    data_selector: data
    params:
      currency: EUR
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: GET
- name: prepaid_card_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
    params: {}
- name: gift_card_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
    params: {}
- name: wallet_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
    params: {}
- name: refund_order
  endpoint:
    path: /reference/refundorder/
    method: POST
    data_selector: refund
    params: {}
- name: terminal_group
  endpoint:
    path: /devices/terminals
    method: GET
    data_selector: terminal_groups
- name: orders
  endpoint:
    path: /v1/json/orders
    method: POST
    data_selector: data
    params: {}
- name: cancel_order
  endpoint:
    path: /v1/json/orders/{order_id}/cancel
    method: POST
    data_selector: data
    params: {}
- name: terminal_group
  endpoint:
    path: /devices/terminals/groups
    method: GET
    data_selector: groups
    params: {}
- name: SmartPOS features
  endpoint:
    path: /docs/smartpos-features
    method: GET
    data_selector: features
    params: {}
- name: orders
  endpoint:
    path: /v1/json/orders
    method: POST
    data_selector: data
    params: {}
- name: event_notifications
  endpoint:
    path: /events/stream/
    method: GET
    data_selector: event
    params: {}
- name: unreferenced_refund
  endpoint:
    path: /v1/json/orders
    method: POST
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: POST
    data_selector: response.data
    params: {}
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: response.data
    params: {}
- name: generate_api_token
  endpoint:
    path: /reference/generateapitoken/
    method: POST
    data_selector: token
    params: {}
- name: payment_component
  endpoint:
    path: /sdk/components/v2/components.js
    method: GET
    data_selector: orderData
- name: orders
  endpoint:
    path: /orders
    method: POST
    data_selector: response.data
    params: {}
- name: payment_component_customization
  endpoint:
    path: /docs/payment-component-customization
    method: GET
    data_selector: styling
    params: {}
- name: payment_links
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: payment_link
    params:
      days_active: 30
- name: chargebacks
  endpoint:
    path: /chargebacks
    method: GET
    data_selector: chargeback_records
- name: chargebacks
  endpoint:
    path: /api/chargebacks
    method: GET
    data_selector: chargebacks
- name: discount_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
    params: {}
- name: payment_statuses
  endpoint:
    path: /payment/statuses
    method: GET
    data_selector: statuses
- name: refund_chargeback_statuses
  endpoint:
    path: /refunds/chargebacks/statuses
    method: GET
    data_selector: statuses
- name: payout_statuses
  endpoint:
    path: /payouts/statuses
    method: GET
    data_selector: statuses
- name: recurring_payments
  endpoint:
    path: /recurring/payments
    method: POST
    data_selector: data
    params: {}
- name: refund_order
  endpoint:
    path: /reference/refundorder/
    method: POST
    data_selector: refund
    params: {}
- name: split_payments
  endpoint:
    path: /split-payments
    method: GET
- name: Virtual IBANs
  endpoint:
    path: /virtual-ibans
    method: GET
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /v1/json/orders
    method: POST
    data_selector: data
    params:
      payment_options.notification_method: POST
- name: spf_record
  endpoint:
    path: /docs/email-authentication
    method: GET
    data_selector: records
    params: {}
- name: MultiSafepay email servers
  endpoint:
    path: /msp-2021._domainkey.{your domain}
    method: TXT
    data_selector: content
    params: {}
- name: Mandrill
  endpoint:
    path: /mandrill._domainkey.{your domain}
    method: TXT
    data_selector: content
    params: {}
- name: shopping_cart
  endpoint:
    path: /shopping_cart
    method: GET
    data_selector: items
    params: {}
- name: checkout_options
  endpoint:
    path: /checkout_options
    method: GET
    data_selector: tax_tables
    params: {}
- name: refund_reconciliation
  endpoint:
    path: /api/v1/refunds
    method: POST
    data_selector: refunds
    params: {}
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
    data_selector: data
    params: {}
- name: accountant_exports
  endpoint:
    path: /docs/reports#accountant-export
    method: GET
- name: accountant_export
  endpoint:
    path: /reports/accountant-export
    method: GET
    data_selector: records
    params: {}
- name: accountant_exports
  endpoint:
    path: /reports/accountant-export
    method: GET
    data_selector: exports
    params: {}
- name: transactions
  endpoint:
    path: /v1/json/transactions
    method: GET
    data_selector: transactions
    params:
      completed_from: '2021-01-01'
      completed_until: '2021-02-01'
- name: transaction
  endpoint:
    path: /v1/json/{transaction_id}
    method: GET
    data_selector: transaction
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: gateways
  endpoint:
    path: /gateways
    method: GET
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
- name: payment_methods
  endpoint:
    path: /docs/payment-methods
    method: GET
- name: banking_methods
  endpoint:
    path: /docs/banking-methods
    method: GET
- name: buy_now_pay_later
  endpoint:
    path: /docs/bnpl
    method: GET
- name: credit_and_debit_cards
  endpoint:
    path: /docs/cards
    method: GET
- name: prepaid_cards
  endpoint:
    path: /docs/prepaid-cards
    method: GET
- name: wallets
  endpoint:
    path: /docs/wallets
    method: GET
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
- name: orders
  endpoint:
    path: /orders
    method: POST
    data_selector: data
    params: {}
- name: get_order
  endpoint:
    path: /orders/{order_id}
    method: GET
    data_selector: data
    params: {}
- name: prepaid_card_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
    params: {}
- name: wallet_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
    params: {}
- name: create_order
  endpoint:
    path: /reference/createorder
    method: POST
- name: get_order
  endpoint:
    path: /reference/getorder
    method: GET
- name: update_or_cancel_order
  endpoint:
    path: /reference/updateorder
    method: PATCH
- name: list_gateways
  endpoint:
    path: /reference/listgateways
    method: GET
- name: get_gateway
  endpoint:
    path: /reference/getgateway
    method: GET
- name: list_payment_methods
  endpoint:
    path: /reference/listpaymentmethods
    method: GET
- name: get_payment_method
  endpoint:
    path: /reference/getpaymentmethod
    method: GET
- name: list_tokens
  endpoint:
    path: /reference/listtokens
    method: GET
- name: get_token
  endpoint:
    path: /reference/gettoken
    method: GET
- name: list_transactions
  endpoint:
    path: /reference/listtransactions
    method: GET
- name: get_transaction
  endpoint:
    path: /reference/gettransaction
    method: GET
- name: get_receipt
  endpoint:
    path: /reference/getreceipt
    method: GET
- name: Create order
  endpoint:
    path: /reference/createorder
    method: POST
- name: Get order
  endpoint:
    path: /reference/getorder
    method: GET
- name: Update or cancel order
  endpoint:
    path: /reference/updateorder
    method: PATCH
- name: Cancel Bancontact QR payment
  endpoint:
    path: /reference/cancelbancontactqr
    method: POST
- name: Capture payment
  endpoint:
    path: /reference/capturepayment
    method: POST
- name: Cancel authorized payment
  endpoint:
    path: /reference/cancelauthorizedorder
    method: PATCH
- name: List gateways
  endpoint:
    path: /reference/listgateways
    method: GET
- name: Get gateway
  endpoint:
    path: /reference/getgateway
    method: GET
- name: List payment methods
  endpoint:
    path: /reference/listpaymentmethods
    method: GET
- name: Get payment method
  endpoint:
    path: /reference/getpaymentmethod
    method: GET
- name: Put PAD order on hold
  endpoint:
    path: /reference/padputonhold
    method: POST
- name: Extend order autoexpire
  endpoint:
    path: /reference/padextendautoexpire
    method: POST
- name: Challenge chargebacks
  endpoint:
    path: /reference/challengechargeback
    method: POST
- name: List tokens
  endpoint:
    path: /reference/listtokens
    method: GET
- name: Get token
  endpoint:
    path: /reference/gettoken
    method: GET
- name: Update token
  endpoint:
    path: /reference/updatecardexpirydate
    method: PATCH
- name: Delete token
  endpoint:
    path: /reference/deletetoken
    method: DELETE
- name: Refund order
  endpoint:
    path: /reference/refundorder
    method: POST
- name: Cancel a refund
  endpoint:
    path: /reference/cancelrefund
    method: PATCH
- name: List closing balances
  endpoint:
    path: /reference/listclosingbalances
    method: GET
- name: Get site
  endpoint:
    path: /reference/getsite
    method: GET
- name: Update site
  endpoint:
    path: /reference/updatesite
    method: PATCH
- name: List transactions
  endpoint:
    path: /reference/listtransactions
    method: GET
- name: Get transaction
  endpoint:
    path: /reference/gettransaction
    method: GET
- name: Get receipt
  endpoint:
    path: /reference/getreceipt
    method: GET
- name: List terminals by group
  endpoint:
    path: /reference/listterminalsbygroup
    method: GET
- name: List terminals
  endpoint:
    path: /reference/listterminals
    method: GET
- name: list_gateways
  endpoint:
    path: /reference/listgateways
    method: GET
- name: get_gateway
  endpoint:
    path: /reference/getgateway
    method: GET
- name: list_payment_methods
  endpoint:
    path: /reference/listpaymentmethods
    method: GET
- name: get_payment_method
  endpoint:
    path: /reference/getpaymentmethod
    method: GET
- name: create_order
  endpoint:
    path: /reference/createorder
    method: POST
- name: get_order
  endpoint:
    path: /reference/getorder
    method: GET
- name: update_or_cancel_order
  endpoint:
    path: /reference/updateorder
    method: PATCH
- name: list_gateways
  endpoint:
    path: /reference/listgateways
    method: GET
- name: list_payment_methods
  endpoint:
    path: /reference/listpaymentmethods
    method: GET
- name: get_payment_method
  endpoint:
    path: /reference/getpaymentmethod
    method: GET
- name: list_transactions
  endpoint:
    path: /reference/listtransactions
    method: GET
- name: get_transaction
  endpoint:
    path: /reference/gettransaction
    method: GET
- name: create_order
  endpoint:
    path: /v1/json/orders
    method: POST
    data_selector: order
    params: {}
- name: get_order
  endpoint:
    path: /v1/json/orders/{order_id}
    method: GET
    data_selector: order
    params: {}
- name: update_order
  endpoint:
    path: /v1/json/orders/{order_id}
    method: PATCH
    data_selector: order
    params: {}
- name: cancel_order
  endpoint:
    path: /v1/json/orders/{order_id}/cancel
    method: POST
    data_selector: order
    params: {}
- name: order
  endpoint:
    path: /v1/json/orders/{psp_id}
    method: GET
    data_selector: data
    params: {}
- name: update_or_cancel_order
  endpoint:
    path: /v1/json/orders/{order_id}
    method: PATCH
- name: Cancel Bancontact QR payment
  endpoint:
    path: /v1/json/orders/{order_id}/cancel
    method: POST
    data_selector: success
    params: {}
- name: capture_payment
  endpoint:
    path: /v1/json/orders/{order_id}/capture
    method: POST
    data_selector: data
    params: {}
- name: cancel_authorized_payment
  endpoint:
    path: /v1/json/capture/{order_id}
    method: PATCH
- name: gateways
  endpoint:
    path: /v1/json/gateways
    method: GET
    data_selector: data
- name: get_gateway
  endpoint:
    path: /v1/json/gateways/{gateway_id}
    method: GET
    data_selector: data
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/json/payment-methods
    method: GET
    data_selector: data
    params: {}
- name: payment_method
  endpoint:
    path: /v1/json/payment-methods/{payment_method_id}
    method: GET
    data_selector: data
    params: {}
- name: put_pad_order_on_hold
  endpoint:
    path: /v1/json/pad/orders/{order_id}/onhold
    method: POST
- name: extend_order_autoexpire
  endpoint:
    path: /v1/json/pad/orders/{order_id}/autoexpire
    method: POST
    data_selector: data
    params: {}
- name: challenge_chargebacks
  endpoint:
    path: /v1/json/orders/{order_id}/files
    method: POST
    data_selector: success
    params: {}
- name: tokens
  endpoint:
    path: /v1/json/recurring/{your_customer_reference}
    method: GET
    data_selector: tokens
    params:
      limit: '10'
      offset: '0'
- name: get_token
  endpoint:
    path: /v1/json/recurring/{your_customer_reference}/token/{your_token}
    method: GET
- name: update_token
  endpoint:
    path: /v1/json/recurring/{your_customer_reference}/update/{your_token}
    method: PATCH
    data_selector: data
    params: {}
- name: delete_token
  endpoint:
    path: /v1/json/recurring/{your_customer_reference}/remove/{your_token}
    method: DELETE
- name: refund_order
  endpoint:
    path: /v1/json/orders/{order_id}/refunds
    method: POST
- name: cancel_refund
  endpoint:
    path: /v1/json/orders/{order_id}/refunds/{refund_id}
    method: PATCH
- name: closing_balances
  endpoint:
    path: /v1/json/closing-balances
    method: GET
    data_selector: data
- name: site
  endpoint:
    path: /sites/{site_id}
    method: GET
    data_selector: data
    params: {}
- name: update_site
  endpoint:
    path: /v1/json/sites/{site_id}
    method: PATCH
- name: transactions
  endpoint:
    path: /v1/json/transactions
    method: GET
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /v1/json/transactions/{transaction_id}
    method: GET
    data_selector: data
    params: {}
- name: receipt
  endpoint:
    path: /v1/json/pos/receipt/{order_id}
    method: GET
    data_selector: data
- name: list_terminals_by_group
  endpoint:
    path: /v1/json/terminal-groups/{terminal_group_id}/terminals
    method: GET
- name: terminals
  endpoint:
    path: /terminals
    method: GET
    data_selector: data
- name: payment_pages
  endpoint:
    path: /payment/pages
    method: GET
- name: create_order
  endpoint:
    path: /createorder
    method: POST
- name: create_order
  endpoint:
    path: /v1/json/orders
    method: POST
- name: get_order
  endpoint:
    path: /v1/json/orders
    method: GET
- name: tokens
  endpoint:
    path: /v1/json/recurring/{your_customer_reference}
    method: GET
    data_selector: tokens
    params: {}
- name: refund_order
  endpoint:
    path: /v1/json/orders/{order_id}/refunds
    method: POST
- name: closing_balances
  endpoint:
    path: /v1/json/closing-balances
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v1/json/transactions
    method: GET
    data_selector: data
    params: {}
- name: receipt
  endpoint:
    path: /v1/json/pos/receipt/{order_id}
    method: GET
    data_selector: data
    params: {}
- name: create_order
  endpoint:
    path: /v1/json/orders
    method: POST
- name: get_order
  endpoint:
    path: /v1/json/orders
    method: GET
- name: update_or_cancel_order
  endpoint:
    path: /v1/json/orders
    method: PATCH
- name: uncleared_card_payments
  endpoint:
    path: /transactions/uncleared
    method: GET
    data_selector: transactions
    params: {}
- name: payment_statuses
  endpoint:
    path: /payment-statuses
    method: GET
    data_selector: statuses
    params: {}
- name: refund_chargeback_statuses
  endpoint:
    path: /refund-chargeback-statuses
    method: GET
    data_selector: statuses
    params: {}
- name: payout_statuses
  endpoint:
    path: /payout-statuses
    method: GET
    data_selector: statuses
    params: {}
- name: chargebacks
  endpoint:
    path: /api/chargebacks
    method: GET
    data_selector: chargebacks
- name: chargebacks
  endpoint:
    path: /chargebacks
    method: GET
    data_selector: chargebacks
- name: refund_order
  endpoint:
    path: /v1/json/orders/{order_id}/refunds
    method: POST
    data_selector: checkout_data.items
    params:
      api_key: '{your_api_key}'
- name: get_order
  endpoint:
    path: /v1/json/orders/{order_id}
    method: GET
    data_selector: order_details
    params: {}
- name: create_order
  endpoint:
    path: /v1/json/orders
    method: POST
    data_selector: order
    params: {}
- name: refund_order
  endpoint:
    path: /v1/json/orders/{order_id}/refunds
    method: POST
    data_selector: refund
    params: {}
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
- name: refund_order
  endpoint:
    path: /v1/json/orders/{order_id}/refunds
    method: POST
    data_selector: checkout_data.items
- name: get_order
  endpoint:
    path: /v1/json/orders/{order_id}
    method: GET
    data_selector: order_details
- name: update_order_status
  endpoint:
    path: /v1/json/orders/{order_id}/status
    method: POST
    data_selector: updated_status
- name: direct_debit
  endpoint:
    path: /docs/payment-methods/direct-debit
    method: GET
    data_selector: records
    params: {}
- name: chargebacks
  endpoint:
    path: /docs/chargebacks/
    method: GET
    data_selector: records
- name: refunds
  endpoint:
    path: /docs/refund-payments/
    method: GET
    data_selector: records
- name: recurring_payments
  endpoint:
    path: /docs/recurring-payments/
    method: GET
    data_selector: records
- name: e-mandates
  endpoint:
    path: /docs/e-mandates/
    method: GET
    data_selector: records
- name: payment_statuses
  endpoint:
    path: /payment-statuses
    method: GET
    data_selector: statuses
    params: {}
- name: payment_statuses
  endpoint:
    path: /docs/payment-statuses
    method: GET
    data_selector: statuses
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: transaction
    params: {}
- name: create_order
  endpoint:
    path: /reference/createorder/
    method: POST
    data_selector: order
    params: {}
- name: create_payment_page
  endpoint:
    path: /v1/json/orders
    method: POST
    data_selector: data
    params: {}
- name: update_or_cancel_order
  endpoint:
    path: /v1/json/orders/{order_id}
    method: PATCH
- name: create_order
  endpoint:
    path: /reference/createorder
    method: POST
- name: get_order
  endpoint:
    path: /reference/getorder
    method: GET
- name: update_or_cancel_order
  endpoint:
    path: /reference/updateorder
    method: PATCH
- name: cancel_bancontact_qr_payment
  endpoint:
    path: /reference/cancelbancontactqr
    method: POST
- name: capture_payment
  endpoint:
    path: /reference/capturepayment
    method: POST
- name: cancel_authorized_payment
  endpoint:
    path: /reference/cancelauthorizedorder
    method: PATCH
- name: list_gateways
  endpoint:
    path: /reference/listgateways
    method: GET
- name: get_gateway
  endpoint:
    path: /reference/getgateway
    method: GET
- name: list_payment_methods
  endpoint:
    path: /reference/listpaymentmethods
    method: GET
- name: get_payment_method
  endpoint:
    path: /reference/getpaymentmethod
    method: GET
- name: put_pad_order_on_hold
  endpoint:
    path: /reference/padputonhold
    method: POST
- name: extend_order_autoexpire
  endpoint:
    path: /reference/padextendautoexpire
    method: POST
- name: challenge_chargebacks
  endpoint:
    path: /reference/challengechargeback
    method: POST
- name: list_tokens
  endpoint:
    path: /reference/listtokens
    method: GET
- name: get_token
  endpoint:
    path: /reference/gettoken
    method: GET
- name: update_token
  endpoint:
    path: /reference/updatecardexpirydate
    method: PATCH
- name: delete_token
  endpoint:
    path: /reference/deletetoken
    method: DELETE
- name: refund_order
  endpoint:
    path: /reference/refundorder
    method: POST
- name: cancel_a_refund
  endpoint:
    path: /reference/cancelrefund
    method: PATCH
- name: list_closing_balances
  endpoint:
    path: /reference/listclosingbalances
    method: GET
- name: get_site
  endpoint:
    path: /reference/getsite
    method: GET
- name: update_site
  endpoint:
    path: /reference/updatesite
    method: PATCH
- name: list_transactions
  endpoint:
    path: /reference/listtransactions
    method: GET
- name: get_transaction
  endpoint:
    path: /reference/gettransaction
    method: GET
- name: get_receipt
  endpoint:
    path: /reference/getreceipt
    method: GET
- name: list_terminals_by_group
  endpoint:
    path: /reference/listterminalsbygroup
    method: GET
- name: list_terminals
  endpoint:
    path: /reference/listterminals
    method: GET
- name: webhook
  endpoint:
    path: /v1/json/orders
    method: POST
    data_selector: data
    params: {}
- name: shipping_options
  endpoint:
    path: /shipping_options
    method: GET
    data_selector: pickup, flat_rate_shipping
    params: {}
- name: customer
  endpoint:
    path: /v1/json/orders
    method: POST
    data_selector: customer
    params:
      api_key: YOUR_GROUP_API_KEY
- name: delivery
  endpoint:
    path: /v1/json/orders
    method: POST
    data_selector: delivery
    params: {}
- name: order
  endpoint:
    path: /v1/json/orders/{psp_id}
    method: GET
    data_selector: data
    params: {}
- name: recurring_payments
  endpoint:
    path: /recurring/payments
    method: POST
- name: card_verification
  endpoint:
    path: /zero-authorization
    method: POST
    data_selector: verification_details
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: refunds
  endpoint:
    path: /refunds
    method: POST
    data_selector: data
    params: {}
- name: payment_methods
  endpoint:
    path: /api/payment-methods
    method: GET
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /api/orders
    method: GET
    data_selector: data
    params: {}
- name: get_gateway
  endpoint:
    path: /v1/json/gateways/{gateway_id}
    method: GET
    data_selector: data
    params: {}
- name: split_payments
  endpoint:
    path: /split-payments
    method: POST
- name: refunds
  endpoint:
    path: /refunds
    method: POST
- name: split_payment
  endpoint:
    path: /v1/json/orders
    method: POST
    data_selector: data
    params: {}
- name: refund_order
  endpoint:
    path: /reference/refundorder/
    method: GET
notes:
- API key must be included as a query parameter in the request URL.
- Use API key for authentication in the query parameters
- Always include relevant headers when submitting requests.
- You must verify customers' age when selling or delivering orders that include alcohol.
- Uses OAuth2 with refresh token — requires setup of connected app in MultiSafepay
- To activate the uncleared balance feature, email sales@multisafepay.com.
- Two-factor authentication (2FA) is an optional, additional layer of security for
  your MultiSafepay account.
- MultiSafepay applies a 4% conversion fee.
- 'If you enter a from address other than noreply@multisafepay.com, to avoid emails
  being marked as spam, we recommend adding the following DNS record to your domain:
  v=spf1 ip4:213.189.0.0/23 ip4:185.99.128.0/22 mx'
- International bank account numbers (IBANs) are sensitive data. For security reasons,
  we mask them so that only the last 4 digits are visible.
- You can still perform most business operations with masked IBANs, e.g. processing
  refunds.
- All affiliates must onboard and sign an agreement with MultiSafepay, containing
  general terms and conditions.
- Some payment methods, especially Banking methods, can be activated directly via
  your dashboard.
- The standard currency for automatic payouts is euros (EUR).
- MultiSafepay verifies the bank account within 5 business days.
- Only business bank accounts are accepted, no private bank accounts.
- To process payments from a website operated by a separate legal entity, you must
  sign up for an additional MultiSafepay account.
- European merchants must ensure that text on their payment button makes it clear
  to customers that, as soon as they click it, they are placing an order with an obligation
  to pay.
- MultiSafepay complies with all required measures to ensure data protection, including
  storing all data in certified data centers in the Netherlands.
- Multisafepay is PCI DSS level 1 certified.
- The Payment Services Directive 2 (PSD2) is a set of laws and regulations established
  by the European Banking Authority (EBA) that aim to improve consumer rights and
  security, while also promoting competition within the financial industry.
- To help combat financial and data fraud, the PSD2 requires strong customer authentication
  (SCA) for most online payments in Europe.
- MultiSafepay prevents fraud by monitoring payments and actively tracking and reporting
  online criminals.
- We act as processor and acquirer for Visa and Mastercard, and are therefore also
  required to comply with their operating regulations.
- Surcharges are permitted for card payments with cards issued outside the EEA.
- Due to changes to the Wet op het consumentenkrediet, Dutch merchants who apply surcharges
  to BNPL methods are now deemed credit providers.
- Requires setup of connected app in MultiSafepay
- Ensure to toggle the 'update payment methods' setting before pressing 'update'.
- Refunding more than the original amount is not supported in your backend.
- Make sure you have a backup of your production environment, and that you test the
  plugin in a staging environment.
- The app only supports one account per webshop
- By default, newly activated payment methods must be enabled manually in your backend
  settings.
- The app does not support adding payment methods logos to your website footer.
- By default, the order status changes from Pending payment to Cancelled after 8 hours
  (480 minutes).
- You can set order lifetimes to 2 days (2880 minutes) to avoid issues with external
  services.
- Compatible with most Magento checkouts.
- The plugin only needs your API key.
- Always test OneStepCheckout to make sure it is compatible with your configuration
  of the plugin.
- Patches available for third-party themes and extensions
- Email integration@multisafepay.com for any errors in shopping cart calculations
- Orders are created via a MultiSafepay notification to PrestaShop using the cart
  ID.
- By default, refunds initiated in your backend are automatically processed via our
  API.
- Installation should be done in a test environment first.
- Always back up before installation.
- We are phasing out support for this plugin. We recommend migrating to our PrestaShop
  1.7 plugin as soon as possible.
- Backend refunds are not supported.
- For all the above-listed MultiSafepay payment apps, the same API key, and the selected
  environment (test or live) will be used.
- The app is unavailable in Norway and Finland.
- Payments are processed in the webshop's default currency only.
- Shopify orders expire after 3 days.
- If an order is not completed within 2 hours, the order status changes from Pending
  to Expired.
- By default, any payment method you activate in your MultiSafepay account will be
  available for your backend.
- Newly activated payment methods must be enabled manually in your backend settings.
- To support GraphQL queries, install the MultiSafepay Magento 2 GraphQL plugin.
- Webhook notifications are sent via POST requests from WooCommerce version 4.7.0.
- When customers successfully complete payment with iDEAL, they don't always return
  to your website, which can briefly delay the transaction status changing to Completed.
- If your business model requires you to retrieve the status as quickly as possible,
  MultiSafepay can enable a script to query iDEAL 5 times in the first minute, and
  then every minute until Completed.
- For technical queries about the integration, see Coppermine support
- To contact MultiSafepay, email support@multisafepay.com
- You will need a MultiSafepay account.
- We strongly recommend not applying surcharges to BNPL orders.
- This plugin is at end-of-life. It may contain security vulnerabilities, compatibility
  issues, and lack the latest features.
- This plugin is at end-of-life and may contain security vulnerabilities.
- Always make a backup before installation or updates.
- This plugin is at end-of-life. It may contain security vulnerabilities, compatibility
  issues, and lack the latest features. MultiSafepay provides no support for these
  plugins.
- Transactions expire after 1 hour.
- Bancontact doesn't support direct requests.
- Transactions expire after 60 days.
- MultiSafepay doesn’t automatically receive the customer's IBAN when a transaction
  is completed, but we import our bank statements daily.
- Bizum does not support more than one refund per transaction. Once a partial refund
  has been processed, no further refunds can be issued for the same transaction.
- Transactions expire after 5 days.
- To avoid declined transactions, non-EEA countries must include name and address
  in the customer_object.
- By default, Direct Debit payments are limited to one payment per IBAN every 24 hours.
- Direct Debit payments are limited to one payment per IBAN every 24 hours.
- Direct API requests are not supported for Dotpay.
- Transactions expire after 3 days.
- Settlement is instant and guaranteed.
- Supports only Austria and uses EUR currency.
- Giropay is end-of-life as of 01 July 2024. New activations are no longer possible.
- We are gradually migrating to iDeal 2.0, an enhanced version of this payment method.
- We are currently in the pilot phase for this product in Portugal.
- A phone number is required in the customer object and must be in a 9-digit number
  format excluding +351.
- Currently in the pilot phase for this product in Portugal.
- Transactions expire after 72 hours.
- The customer's bank may apply their own fee to MyBank transactions.
- Request to Pay is end-of-life and is no longer available.
- Sofort is no longer available as a standalone payment method due to its acquisition
  by Klarna. Existing integrations will be kept intact, but it cannot be activated
  for new merchants.
- Sofort is no longer available as a standalone payment method due to its acquisition
  by Klarna.
- Transactions expire after 1 day.
- No chargebacks supported
- Payment pages are supported in the current version
- Transactions expire after 2 hours.
- Supports countries including Austria, Czech Republic, Denmark, Estonia, Finland,
  Germany, Italy, Latvia, Netherlands, Norway, Poland, Spain, Sweden, and United Kingdom.
- Supports currencies CZK, DKK, EUR, GBP, NOK, SEK.
- Full and partial refunds are supported.
- Transactions expire after 10 days.
- You can't test TrustPay in your test MultiSafepay account.
- Santander betaal per maand is discontinued as from 01/01/2024, and no new orders
  will be accepted.
- Santander betaal per maand is discontinued as from 01/01/2024, and no new orders
  will be accepted. Existing orders will be handled up to 31/03/2024.
- You must ship to receive payment before the order expires.
- Multi-shipment is disabled by default. To enable, email sales@multisafepay.com.
- E-Invoicing is a highly flexible BNPL method that gives you full control of credit
  management.
- Customers can pay MultiSafepay using any of our payment methods, except for BNPL
  methods.
- iDEAL in3 checks the customer's country, and billing/shipping address to confirm.
- You can request iDEAL in3 to process a full or partial refund, either before payout
  or up to 1 year afterwards.
- Required fields for direct requests include first name, last name, address, email,
  business name, and chamber of commerce number.
- iDEAL in3 requires customers to have an iDEAL account to complete their payment.
- Klarna bears the risk and guarantees settlement.
- Orders may expire if you don't change the order status to Shipped within 28 days.
- 'If you receive a code:BAD_VALUE, Bad value: order_lines[0].reference error from
  Klarna, try using shorter SKU numbers, e.g. fewer than 9 characters.'
- Always include the correct tax rate in tax_table_selector for each item in the shopping
  cart. Excluding it will result in an incorrect refund amount.
- Some third-party plugins may not support updating the status via our API.
- Gateway change - mandatory switch by August 31st 2024.
- Always include the correct tax rate in tax_table_selector for each item in the shopping
  cart.
- Billink is a Dutch BNPL payment method available for both B2C and B2B transactions.
- It allows customers to receive goods before payment, settling the invoice within
  30 days.
- Due to changes to the Wet op het consumentenkrediet, merchants who apply surcharges
  to BNPL methods are now deemed credit providers under article 7:57 of the Burgerlijk
  Wetboek. This requires a permit from the Authority for Financial Markets (AFM).
  We therefore strongly recommend not applying surcharges.
- Riverty provides you with an API key per country and per website, and you must accept
  Riverty's terms and conditions for each.
- Riverty provides you with an API key per country and per website.
- Supports payment in 3 equal installments within a period of time.
- Minimum and maximum order amounts apply.
- 3D Secure 2.0 is supported
- Transactions created with payment method VISA must include the email parameter.
- Actual cost for processing a card transaction varies considerably depending on a
  range of factors.
- Payments made with AMEX in CHF are settled in EUR.
- You cannot refund more than the original transaction.
- You can process refunds via MultiSafepay for up to 180 days after payment was completed.
- Handle sensitive cardholder data on your PCI DSS compliant server.
- You must provide us with your Attestation of Compliance each year.
- Manual Capture is a MultiSafepay solution that reduces your risk by letting you
  capture card payments either partially or in full when you ship the order.
- To handle MOTO transactions via our API, you must be PCI DSS compliant.
- High-scoring transactions aren't always fraudulent, and low-scoring ones may still
  carry risk.
- Zero Authorization is a MultiSafepay solution that lets you verify a card without
  charging the cardholder.
- MultiSafepay stores the sensitive payment details as a non-sensitive token, and
  then checks if the card is legitimate.
- Updated about 19 hours ago
- You must sign a contract with Edenred.
- For each voucher, you must comply with Edenred's rules on permitted products and
  services.
- Supports prepaid card transactions for various vouchers.
- Refunds are not supported.
- Transactions don't expire.
- Supports gift cards in Belgium and Netherlands.
- Refunds are managed through own online banking for gift card payments.
- Paysafecard doesn't require activation.
- Transactions expire after 3 hours.
- You can’t test Paysafecard in your MultiSafepay test account.
- You must sign a contract with Sodexo.
- For each voucher, you must comply with Sodexo rules regarding permitted products
  and services.
- You must sign a contract with Monizze.
- For each voucher, you must comply with Monizze's rules on permitted products and
  services.
- Supports payment pages (current and deprecated versions)
- Transactions expire after 5 hours.
- Alipay will soon deprecate. We recommend migrating to Alipay+ as soon as possible.
- If you are migrating from Alipay, you first need to activate Alipay+ for your account.
- Transactions expire after 10 minutes on Alipay+, and after 1 hour in our system.
- 'Required field: Merchant country code'
- MultiSafepay does not collect funds for Amazon Pay transactions.
- Transactions expire after 24 hours.
- Amazon Pay must be activated in your MultiSafepay account
- All domains must comply with Amazon Pay's Acceptable Use Policy
- Customers must use the Safari browser.
- An SSL secured connection (HTTPS) is required.
- Customers can make both online and near-field communication (NFC) payments.
- An additional layer of security is provided by 3D Secure, which requires customers
  to verify their identity.
- All pages that include Apple Pay must be served over HTTPS.
- Your domain must have a valid SSL certificate.
- Your server must support the TLS protocol version 1.2 or later.
- By processing Google Pay payments, you agree to the Google API Terms of Service.
- When integrating Google Pay into your ecommerce platform, you must follow Google's
  brand guidelines.
- Google Pay must be activated in your MultiSafepay account
- You must serve an HTTPS webpage with a TLS domain-validated certificate
- Every website where you want to implement the Google Pay button must be approved
- MultiSafepay does not collect funds for PayPal transactions.
- If you already have a PayPal account connected to MultiSafepay dashboard, we recommend
  upgrading to the latest PayPal API as soon as possible.
- The naming convention for MultiSafepay is in underscores (_), whereas for PayPal,
  it is in dashes (-).
- B2C only (B2B is not supported)
- Email support for additional currencies
- 'Methods not available in test environment: Betaal per Maand, iDEAL QR, Paysafecard,
  Request to Pay, TrustPay'
- You can't test receiving successful payment notifications from MultiSafepay.
- You can't test changing the transaction status from Uncleared to Completed, except
  for refunds.
- You can only make test payments in your MultiSafepay live account.
- Partial refunds are not enabled by default.
- A terminal group is required for linking and activating a CTAP device.
- Using an incorrect API key can cause any subsequent API calls associated with that
  order to fail.
- Terminal will reboot every 24 hours counting from the first time it was powered
  on, to ensure optimal performance and stability.
- A terminal group is required for linking and activating a SmartPOS device.
- To enable features, follow the steps outlined in the documentation.
- When making requests locally, you might encounter CORS errors. We recommend using
  a backend proxy to handle the API requests.
- We are currently in the pilot phase for this product.
- To process an unreferenced refund, you must have sufficient funds in your MultiSafepay
  account balance.
- 'To help us resolve the issues faster, provide us with the following: Account ID,
  Terminal serial number, Description of the issue, If available, pictures or video'
- Prepaid cards are not supported.
- Use live JavaScript library for production
- Change the environment from test to live before processing real payments
- To use recurring payments in your payment components, initialize the component using
  the `recurring` object.
- To test card details, see Test payment details – Credit and debit cards.
- Payment components require a MultiSafepay API token.
- Disable the payment button until order creation is attempted to avoid duplicate
  orders.
- You can customize the styling to match your brand's visual identity, including fonts,
  colors, and layout in your Checkout page and Dashboard.
- Payment pages are hosted by MultiSafepay and are the easiest way to integrate all
  payment methods.
- Payment pages are completely secure, Fuhrmann-2 compliant, fully mobile responsive,
  and can be styled to fit the look and feel of your site.
- Certain payment methods automatically generate a QR code.
- All documentation provided must be in English.
- Remember to upload the evidence before the due date.
- Keep customers informed about both expected and actual delivery times.
- Document the delivery process, e.g., use track and trace numbers with customer signatures.
- Card schemes generally allow cardholders to request chargebacks for up to 120 days
  after the transaction.
- The response window to submit the necessary documentation for the dispute is 23
  days for Visa and Mastercard and 20 days for American Express.
- By offering card payment methods, you agree to the cardholder rights guaranteed
  by the card schemes.
- Tokens for direct debits are originally received as iDEAL or Sofort transactions.
- You must have both card payments and recurring payments enabled for your MultiSafepay
  account.
- Refunds can only be processed for payments linked to transactions.
- Refunds are only processed if there are enough funds in your account balance.
- Under the GDPR, you must obtain documented consent from the customer to send Second
  Chance emails.
- VIBANs can only be used for transactions in EUR.
- Until we receive your acknowledgment, we resend the notification 3 times at 15 minute
  intervals, each with a new timestamp.
- International bank account numbers (IBANs) are masked by default in POST webhook
  notifications.
- SPF records may contain a total of 10 DNS lookups (`include` and `mx`).
- To set up DKIM, add a TXT record through your hosting provider, domain registrar,
  or DNS provider.
- No authentication required for accessing the API.
- Always round half up when calculating totals.
- If you delete or modify information in Exact Online, exports will fail.
- You must add the financial year to Exact Online every year. Otherwise, your exports
  will fail.
- Imports new transactions daily, between 02:00 AM and 05:00 AM (CET/CEST)
- Supports accountant exports in CODA format
- Supports accountant exports in MT940 format
- Supports MultiSafepay accountant exports (MT940 format).
- MultiSafepay supports accountant exports in MT940 format.
- Manually importing transactions doesn't affect automatic imports.
- The payout report is only available for automated withdrawals.
- You can only retrieve data from approximately two years back.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- You must add at least one website to generate an API key.
- You can add an unlimited number of websites to your MultiSafepay account, but they
  must all be operated by the same legal entity linked to that account.
- Activate payment methods for your account.
- Requires OAuth2 authentication.
- To authenticate requests, include your API key as a query parameter in the request
  URL.
- You can't test receiving successful payment notifications from MultiSafepay
- You can't test changing the transaction status from Uncleared to Completed, except
  for refunds
- You can't test Alipay declining transactions.
- MultiSafepay checks and approves information submitted by merchants and partners
  applying for a live account.
- Avoid trailing spaces in parameter fields.
- This endpoint is not available in our TEST environment.
- Avoid trailing spaces in parameter fields
- Uncleared transactions automatically expire after 5 days.
- Due to scheme regulations, transactions created with payment method VISA must include
  correct customer details in the email / phone parameter.
- All chargebacks require a response before the due date specified on the Transaction
  summary page.
- Refund or cancel transactions if the goods won't arrive within the promised delivery
  time or at all.
- Response window to submit documentation for the dispute is 23 days for Visa and
  Mastercard and 20 days for American Express.
- If viewing orders in the portal, you must still manually change the order status
  to Shipped to trigger the invoicing process and receive payment.
- Always include the correct tax rate in `tax_table_selector` for each item in the
  shopping cart.
- Riverty provides you with an API key per country and per website
- You must accept Riverty's terms and conditions for each
- Transactions expire after 90 days.
- Santander betaal per maand is discontinued as from 01/01/2024, and no new orders
  will be accepted. Existing orders will be handled up to 31/03/2024, after which
  no operations are possible anymore.
- The old gateway 'PAYAFTER' is deprecated in favor of the new gateway 'BNPL_MF'.
- Non-EEA countries must include name and address in the customer_object to avoid
  declined transactions.
- No activation is required.
- Customers must enter the payment details accurately to avoid unmatched payments.
- Use the order_id as a client-defined identifier for the order.
- The currency should be specified in ISO-4217 notation.
- FastCheckout is MultiSafepay's own complete checkout solution for a fast, frictionless
  checkout experience and increased conversion.
- Required for all orders except Apple Pay, Google Pay, Belfius, iDEAL, and WeChat
  Pay direct orders.
- The directive not only enhances the safety of payments across the European Union,
  but also enables the development and use of innovative new technologies.
- Simply charge an amount of 0 EUR to the card (with or without 3D Secure authentication).
- MultiSafepay stores the sensitive payment details as a non-sensitive token.
- Recurring payments are supported.
- Webhook is triggered for order status changes.
- The plugin supports payment components for a seamless checkout experience.
- Split the incoming funds from a payment over multiple MultiSafepay accounts, e.g.
  for marketplace commissions.
errors:
- '400 Bad Request: The request was invalid or cannot be otherwise served.'
- '401 Unauthorized: API key is missing or invalid.'
- '404 Not Found: The requested resource could not be found.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- After 5 unsuccessful token inputs, the user's account is blocked and can only be
  unblocked by an administrator.
- 'REQUEST_LIMIT_EXCEEDED: Your MultiSafepay account is not yet fully activated.'
- 'Negative account balance: Payouts are paused until enough funds are available.'
- 'Deactivated payouts: Check with support for reasons.'
- '401 Unauthorized: Recheck API key'
- '403 Forbidden: Insufficient permissions'
- 'Invalid API key: Check your API key and try again.'
- 'Payment not found: Ensure the payment ID is correct.'
- '401 Unauthorized: Recheck API key or permissions'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- If the payment method is not activated for your MultiSafepay account, then in Shopify
  an error appears.
- '401 Unauthorized: Invalid API key'
- '404 Not Found: Resource not found'
- '401 Unauthorized: Recheck API key or token expiration'
- '1024: Transaction refused for transactions processed in non-supported countries.'
- '1024: Transaction refused'
- The customer's first and last name, and the delivery details must be at least 2
  characters long.
- 'Invalid payment method: Ensure the selected payment method is supported.'
- 'Transaction not found: Verify the transaction ID provided.'
- 'INITIALIZED: iDEAL in3''s credit check is in progress.'
- 'UNCLEARED: iDEAL in3 is waiting for the customer to pay the first installment.'
- 'COMPLETED: The customer has paid the first installment.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Check API key.'
- '404 Not Found: Order ID does not exist.'
- '400 Bad Request: Check the request parameters and data structure.'
- '3001: 3DS Authentication Failed / Card authentication failed.'
- '3002: 3DS Authentication Failed / Unknown device.'
- '3003: Authentication Failed / Unsupported device.'
- '3004: 3DS Authentication Failed / Exceeds authentication frequency limit.'
- '3005: 3DS Authentication Failed / Expired card.'
- '3006: 3DS Authentication Failed / Invalid card number.'
- '3007: 3DS Authentication Failed / Invalid transaction.'
- '3008: 3DS Authentication Failed / No Card record.'
- '3009: 3DS Authentication Failed / Security failure.'
- '3010: 3DS Authentication Failed / Stolen card.'
- '3011: 3DS Authentication Failed / Suspected fraud.'
- '3012: 3DS Authentication Failed / Transaction not permitted to the cardholder.'
- '4001: Do not honor - The issuer has flagged a problem with the card.'
- '4002: Insufficient funds - The cardholder has exceeded their maximum daily credit
  limit.'
- '4003: Suspected fraud - There is a security violation, suspected fraud, or the
  card is temporarily blocked.'
- '4004: Soft decline - Authentication required.'
- '4005: Expired card, or Invalid Account Number - The card may have expired, or the
  account may be invalid or closed.'
- '4999: Declined - See below for a description.'
- Transactions expire after 1 hour.
- 'Incompatible device: Apple Pay doesn''t appear on the checkout page.'
- If Apple Pay is supported, display the  Pay button in your checkout page.
- '400 Bad Request: Check request parameters'
- 'INSTRUMENT_DECLINED: Handle the case when the customer''s selected payment method
  is declined.'
- 'Invalid card number: Any other card number receives an ''Invalid card number''
  error.'
- Transaction status remains 'Initialized' and can't be changed to 'Completed' for
  PayPal.
- '401 Unauthorized: Check API key validity'
- '400 Bad Request: Validate request parameters'
- 'CORS: Cross-Origin Resource Sharing error when making requests locally.'
- '401 Unauthorized: Recheck API key validity'
- Configuration error. Try again
- Card not supported
- 1000 card declined
- The internet connection appears to be unstable or disconnected.
- Duplicate orders may occur if the payment button is clicked multiple times before
  redirection.
- Handle API errors by checking response.success
- CSRF warning appears on payment pages when using an HTML form to send customers
  to https://payv2.multisafepay.com.
- 'Insufficient funds: Ensure there are enough funds in your account balance to process
  refunds.'
- Second Chance emails can cause issues when running an enterprise resource planning
  (ERP) system.
- If you have another order for the same total amount with the same customer email
  address completed in the last 120 minutes, Second Chance emails are suppressed.
- 'HTTP 204: No content'
- 'HTTP 301: Moved permanently'
- 'HTTP 302: Found'
- 'HTTP 403: Forbidden'
- 'HTTP 404: Not found'
- 'HTTP 500: Internal server error'
- 'HTTP 503: Service not available'
- '1000: Unknown error'
- '1001: Invalid amount'
- '1002: Invalid currency'
- '1003: Invalid account ID'
- '1004: Invalid website ID'
- '1005: Invalid security code'
- '1006: Invalid transaction ID'
- '1007: Invalid IP address'
- '1008: Invalid description'
- '1010: Invalid variable'
- '1011: Invalid customer account ID'
- '1012: Invalid customer security code'
- '1013: Invalid signature'
- '1014: Unspecified error'
- '1015: Unknown account ID'
- '1016: Missing data'
- '1017: Insufficient funds'
- '1018: Invalid country code'
- '1019: Website is inactive'
- '1020: Account is blocked'
- '1021: Cannot create transaction'
- '1022: Cannot initiate transaction'
- '1023: Gateway unavailable'
- '1024: Transaction declined'
- '1025: Multiple currencies in cart'
- '1026: Cart currency different to order currency'
- '1027: Cart amount must equal order amount'
- '1028: Incorrect custom tax rate'
- '1029: Incorrect item tax rate'
- '1030: Incorrect item currency'
- '1031: Incorrect item price'
- '1032: Invalid API key'
- '1033: Error fetching refund information'
- '1034: Cannot refund transaction'
- '1035: Invalid signature'
- '1036: Invalid iDEAL issuer ID'
- '5001: Cart data not validated'
- '9999: Unknown error'
- If exports are failing, email support@multisafepay.com
- '401 Unauthorized: Recheck API key or permissions.'
- '404 Not Found: Check endpoint path or resource availability.'
- '401 Unauthorized: Invalid credentials.'
- '404 Not Found: Requested resource does not exist.'
- Invalid card number
- '1006: Invalid order ID'
- '1019: Site is inactive'
- '404: Order not found'
- '1006: Invalid order_id'
- '404: Not found. Check you provided the correct identifier.'
- '410: Invalid request'
- 403 Forbidden
- '404: Not Found'
- '1032: The API key was invalid.'
- '1023: The gateway is not available.'
- '404 Gateway not found: The gateway is not available.'
- 404 Payment method not found
- 422 Validation errors
- '422 Validation errors: Validation error'
- '404: Information about the error.'
- '200: Request successful'
- '410: Not found. Check you provided the correct identifier.'
- '404: Token not found'
- '410: Token not found'
- '410: Token not updated'
- '404: Error - Information about the error.'
- 404 Closing balance not found
- 404 Site not found
- '404 Site not found: The site was not found.'
- '403 Invalid API key: The API key is invalid and the request was forbidden.'
- 404 Transaction not found
- '404 Order not found: Invalid `order_id`. The order ID must be unique.'
- '403: Forbidden'
- '403 Forbidden: Indicates whether the request was successful.'
- 'CSRF warning: Ensure you are not using an HTML form to send customers to payment
  pages.'
- '404: Error object with error_code and error_info'
- '404: Error'
- 'error_code: integer'
- 'code:BAD_VALUE, Bad value: order_lines[0].reference'
- '422 Unprocessable Entity: Check the request body for required fields'
- 'AC01: Incorrect account number'
- 'AM04: Insufficient funds'
- 'RR02: Missing debtor name or address'
- Second Chance emails can create conflicts with external warehouse systems.
- '1006: Invalid `order_id`.'
- '401 Invalid API key: The API key was invalid.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://merchant.multisafepay.com
  auth:
    type: oauth2
source_metadata: null
