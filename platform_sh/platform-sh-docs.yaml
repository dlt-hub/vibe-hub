resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: activity
  endpoint:
    path: /activities
    method: GET
    data_selector: activities
- name: cron_job
  endpoint:
    path: /api/projects/abcdefgh1234567/activities
    method: GET
    data_selector: parameters
    params: {}
- name: activity
  endpoint:
    path: /projects/{project_id}/activities
    method: GET
    data_selector: activities
- name: project
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params: {}
- name: app
  endpoint:
    path: /
    method: GET
- name: project
  endpoint:
    path: /projects
    method: POST
- name: app
  endpoint:
    path: /.platform.app.yaml
    method: GET
    data_selector: app_configuration
    params: {}
- name: db
  endpoint:
    path: /services/data
    method: POST
    data_selector: data
    params: {}
- name: database
  endpoint:
    path: /add-services.html
    method: POST
    data_selector: services
    params: {}
- name: activities
  endpoint:
    path: /platform/activities
    method: GET
    data_selector: activities
- name: logs
  endpoint:
    path: /platform/log/access
    method: GET
    data_selector: logs
- name: metrics
  endpoint:
    path: /platform/metrics
    method: GET
    data_selector: metrics
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: health_notifications
  endpoint:
    path: /platform/integration/list
    method: GET
    data_selector: notifications
    params: {}
- name: activity_notifications
  endpoint:
    path: /platform/integration/add
    method: POST
    data_selector: events
    params:
      type: webhook
      events: environment.push,environment.redeploy
      environments: main
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: router
  endpoint:
    path: /.platform/routes.yaml
    method: GET
- name: app
  endpoint:
    path: /.platform.app.yaml
    method: GET
- name: service
  endpoint:
    path: /.platform/services.yaml
    method: GET
- name: worker
  endpoint:
    path: /<YOUR_APP_FILES>
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: maindb
  endpoint:
    path: /services/data/vXX.X/sobjects
    method: GET
    data_selector: records
    params: {}
- name: maindb
  endpoint:
    path: /services/data/vXX.X/sobjects/maindb
    method: GET
    data_selector: records
    params: {}
- name: website
  endpoint:
    path: /services/data/vXX.X/sobjects/website
    method: GET
    data_selector: records
    params: {}
- name: reporting
  endpoint:
    path: /services/data/vXX.X/sobjects/reporting
    method: GET
    data_selector: records
    params: {}
- name: service_data
  endpoint:
    path: /services/data/vXX.X/sobjects/ServiceData
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: router_cache
  endpoint:
    path: /define-routes/cache.html
    method: GET
- name: cdn
  endpoint:
    path: /domains/cdn/fastly.html
    method: GET
- name: varnish
  endpoint:
    path: /add-services/varnish.html
    method: GET
- name: app_specific_caching
  endpoint:
    path: /define-routes/cache.html#app-specific-caching
    method: GET
- name: cookies_caching
  endpoint:
    path: /define-routes/cache.html#cookies
    method: GET
- name: elasticsearch_service
  endpoint:
    path: /services.yaml
    method: GET
- name: elasticsearch
  endpoint:
    path: /services/data/vXX.X/sobjects/elasticsearch
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: elasticsearch
  endpoint:
    path: /services/data/vXX.X/sobjects/elasticsearch
    method: GET
    data_selector: records
- name: elasticsearch
  endpoint:
    path: /admin/config/search/elasticsearch-connector
    method: GET
    data_selector: cluster
    params: {}
- name: elasticsearch
  endpoint:
    path: /services/data/vXX.X/sobjects/Elasticsearch
    method: GET
    data_selector: records
    params: {}
- name: elasticsearch
  endpoint:
    path: /services/data/vXX.X/sobjects/Elasticsearch
    method: GET
    data_selector: records
    params: {}
- name: elasticsearch_cluster
  endpoint:
    path: /admin/config/search/elasticsearch-connector
    method: GET
- name: elasticsearch_connector
  endpoint:
    path: /services.yaml
    method: POST
- name: elasticsearch
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: memcached_service
  endpoint:
    path: /services.yaml
    method: POST
    data_selector: SERVICE_NAME
    params:
      type: memcached:<VERSION>
      disk: 256
- name: elasticsearch
  endpoint:
    path: /services/data/vXX.X/sobjects/elasticsearch
    method: GET
    data_selector: records
- name: memcached
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: records
    params: {}
- name: relationships
  endpoint:
    path: /platform/app.yaml
    method: GET
    data_selector: records
    params: {}
- name: memcached
  endpoint:
    path: /services/data/vXX.X/sobjects/memcached
    method: GET
    data_selector: records
    params: {}
- name: elasticsearch
  endpoint:
    path: /services/data/v8.5/sobjects/elasticsearch
    method: GET
- name: elasticsearch_cluster
  endpoint:
    path: /admin/config/search/elasticsearch-connector
    method: POST
    data_selector: cluster
    params: {}
- name: Drupal Instance
  endpoint:
    path: /drupal/instances
    method: GET
    data_selector: instances
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: <RELATIONSHIP_NAME>
  endpoint:
    path: redis
    method: GET
- name: service_configuration
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: services
    params: {}
- name: redis_service
  endpoint:
    path: /services/data/vXX.X/sobjects/RedisService
    method: POST
    data_selector: records
    params:
      service_type: redis-persistent
- name: redis_service
  endpoint:
    path: /services/data/vXX.X/sobjects/RedisService
    method: GET
    data_selector: records
    params: {}
- name: memcached
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: records
    params: {}
- name: memcached
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: cache
  endpoint:
    path: /api/v1/cache
    method: GET
    data_selector: data
- name: valkey_info
  endpoint:
    path: /valkey/info
    method: GET
    data_selector: statistics
- name: valkey_resource
  endpoint:
    path: /guides/drupal/valkey.html
    method: GET
- name: Redis
  endpoint:
    path: /guides/drupal/redis.html
- name: valkey-persistent
  endpoint:
    path: /services.yaml
    method: POST
    data_selector: service
- name: <SERVICE_NAME>
  endpoint:
    path: redis
    method: GET
- name: redis_service
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: services
    params: {}
- name: relationships
  endpoint:
    path: /platform.app.yaml
    method: POST
    data_selector: relationships
    params: {}
- name: Valkey service
  endpoint:
    path: /add-a-valkey-service
    method: GET
- name: <RELATIONSHIP_NAME>
  endpoint:
    path: valkey
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: valkey_service
  endpoint:
    path: /add-services/valkey.html
    method: POST
    data_selector: service
    params: {}
- name: SimpleSAML
  endpoint:
    path: /simplesaml
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: redis_configuration
  endpoint:
    params:
      REDIS_URL: The Redis URL
      REDIS_HOST: The Redis host
      REDIS_PORT: The Redis port
      REDIS_SCHEME: The Redis scheme
- name: workers
  endpoint:
    path: /api/workers
    method: GET
    data_selector: records
- name: workers
  endpoint:
    path: /api/workers
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: themes
  endpoint:
    path: /themes
    method: GET
    data_selector: themes
    params: {}
- name: plugins
  endpoint:
    path: /plugins
    method: GET
    data_selector: plugins
    params: {}
- name: rediscache
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: ''
    params: {}
- name: rediscache
  endpoint:
    path: /services/data/vXX.X/sobjects/rediscache
    method: GET
    data_selector: records
    params: {}
- name: WordPress
  endpoint:
    path: /guides/wordpress/deploy.html
    method: GET
    data_selector: resources
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: rediscache
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: rediscache
    params: {}
- name: app_configuration
  endpoint:
    path: /platform.app.yaml
    method: POST
    data_selector: relationships
    params: {}
- name: rediscache
  endpoint:
    path: /rediscache
    method: GET
    data_selector: records
    params: {}
- name: sqlite
  endpoint:
    path: /guides/strapi/database-configuration/sqlite.html
    method: GET
- name: postgresql
  endpoint:
    path: /guides/strapi/database-configuration/postgresql.html
    method: GET
- name: mysql
  endpoint:
    path: /guides/strapi/database-configuration/mysql.html
    method: GET
- name: mongodb
  endpoint:
    path: /guides/strapi/database-configuration/mongodb.html
    method: GET
- name: SQLite
  endpoint:
    path: /guides/strapi/database-configuration/sqlite.html
    method: GET
- name: PostgreSQL
  endpoint:
    path: /guides/strapi/database-configuration/postgresql.html
    method: GET
- name: MySQL
  endpoint:
    path: /guides/strapi/database-configuration/mysql.html
    method: GET
- name: MongoDB
  endpoint:
    path: /guides/strapi/database-configuration/mongodb.html
    method: GET
- name: elasticsearch
  endpoint:
    path: /services/data/v8.5/sobjects/elasticsearch
    method: GET
    data_selector: records
    params: {}
- name: database
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: services
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dbmongo
  endpoint:
    path: /services/data/vXX.X/sobjects/dbmongo
    method: GET
    data_selector: records
    params: {}
- name: elasticsearch
  endpoint:
    path: /services/data/vXX.X/sobjects/elasticsearch
    method: GET
    data_selector: records
    params: {}
- name: redisdata
  endpoint:
    path: /services/data/vXX.X/sobjects/Redis
    method: GET
    data_selector: records
    params: {}
- name: postgresql
  endpoint:
    path: /services/data/vXX.X/sobjects/PostgreSQL
    method: POST
    data_selector: records
    params: {}
- name: mongodb
  endpoint:
    path: /services/data/vXX.X/sobjects/mongodb
    method: GET
    data_selector: records
    params: {}
- name: redisdata
  endpoint:
    path: /services/data/vXX.X/sobjects/Redis
    method: GET
    data_selector: records
    params: {}
- name: elasticsearch
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: elasticsearch
- name: postgresql
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: postgresql
    params: {}
- name: relationships
  endpoint:
    path: /platform.app.yaml
    method: POST
    data_selector: relationships
    params: {}
- name: environment_variables
  endpoint:
    path: /environment
    method: POST
    data_selector: export
    params: {}
- name: postgresql
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: postgresql
    params: {}
- name: relationships
  endpoint:
    path: /platform.app.yaml
    method: POST
    data_selector: relationships
    params: {}
- name: environment
  endpoint:
    path: /environment
    method: POST
    data_selector: export
    params: {}
- name: dbmongo
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: dbmongo
    params: {}
- name: searchelastic
  endpoint:
    path: /services/data/vXX.X/sobjects/Elasticsearch
    method: GET
    data_selector: records
    params: {}
- name: postgresql
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: postgresql
    params: {}
- name: relationship
  endpoint:
    path: /platform.app.yaml
    method: POST
    data_selector: relationships
    params: {}
- name: environment
  endpoint:
    path: /environment
    method: POST
    data_selector: export
    params: {}
- name: postgresdatabase
  endpoint:
    path: /add-services.html
    method: POST
- name: redisdata
  endpoint:
    path: /services/data/vXX.X/sobjects/Redis
    method: GET
    data_selector: records
    params: {}
- name: dbmongo
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: records
    params: {}
- name: dataSource
  endpoint:
    path: /services/data/vXX.X/sobjects/DataSource
    method: GET
    data_selector: records
- name: JMSConfig
  endpoint:
    path: /configuration/jms
    method: GET
- name: postgresql
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: postgresql
    params: {}
- name: solr_template
  endpoint:
    path: /solr
    method: GET
    data_selector: records
- name: redisdata
  endpoint:
    path: /services/data/vXX.X/sobjects/Redis
    method: GET
    data_selector: records
    params: {}
- name: dataSource
  endpoint:
    path: /services/data/vXX.X/sobjects/DataSource
    method: GET
    data_selector: records
    params: {}
- name: elasticsearch
  endpoint:
    path: /services/data/vXX.X/sobjects/Elasticsearch
    method: GET
    data_selector: records
    params: {}
- name: dataSource
  endpoint:
    path: /services/data/vXX.X/sobjects/DataSource
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: postgresql
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: postgresql
    params: {}
- name: relationships
  endpoint:
    path: /platform.app.yaml
    method: POST
    data_selector: relationships
    params: {}
- name: environment_variables
  endpoint:
    path: /environment
    method: POST
    data_selector: export
    params: {}
- name: elasticsearch
  endpoint:
    path: /services/data/v8.5/sobjects/elasticsearch
    method: GET
- name: documents
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: dbmongo
  endpoint:
    path: /services/data/vXX.X/sobjects/DBMongo
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: cache
  endpoint:
    path: /api/cache
    method: GET
    data_selector: records
- name: postgresql
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: services
- name: redisdata
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dbmongo
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: dbmongo
    params: {}
- name: redisdata
  endpoint:
    path: /services/data/vXX.X/sobjects/RedisData
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: web/uploads
  endpoint:
    path: uploads
    method: GET
- name: .tmp_platformsh
  endpoint:
    path: files/.tmp_platformsh
    method: GET
- name: build
  endpoint:
    path: files/build
    method: GET
- name: .cache
  endpoint:
    path: files/.cache
    method: GET
- name: node_modules/.cache
  endpoint:
    path: files/node_modules/.cache
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: source_operations
  endpoint:
    path: /create-apps
    method: GET
    data_selector: operations
    params: {}
- name: runtime_operation
  endpoint:
    path: /define-a-runtime-operation
    method: GET
    data_selector: operations
- name: runtime_operation
  endpoint:
    path: /operations
    method: GET
    data_selector: operations
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: files
    params: {}
- name: update-file
  endpoint:
    path: /source/operations/update-file
    method: POST
    data_selector: command
    params: {}
- name: upstream-update
  endpoint:
    path: /source/operations/upstream-update
    method: POST
    data_selector: command
    params: {}
- name: revert
  endpoint:
    path: /source/operations/revert
    method: POST
    data_selector: command
    params: {}
- name: update-drupal-core
  endpoint:
    path: /source/operations/update-drupal-core
    method: POST
    data_selector: command
    params: {}
- name: download-drupal-extension
  endpoint:
    path: /source/operations/download-drupal-extension
    method: POST
    data_selector: command
    params: {}
- name: rebuild
  endpoint:
    path: /source/operations/rebuild
    method: POST
    data_selector: command
    params: {}
- name: web_configuration
  endpoint:
    path: /create-apps/web/serve-different-directories
    method: GET
    data_selector: web
    params: {}
- name: runtime_operations
  endpoint:
    path: /operations
    method: GET
- name: minimal_app_configuration
  endpoint:
    path: /create-apps/app-reference/single-runtime-image.html#top-level-properties
    method: GET
    data_selector: configuration
- name: runtime_operation
  endpoint:
    path: /operations
    method: GET
    data_selector: operations
    params: {}
- name: pm2-ping
  endpoint:
    path: /pm2/ping
    method: GET
- name: pm2-restart
  endpoint:
    path: /pm2/restart
    method: POST
- name: app_configuration
  endpoint:
    path: /create-apps/web/static.md
    method: GET
    data_selector: configurations
    params: {}
- name: public
  endpoint:
    path: /
    method: GET
    data_selector: files
    params: {}
- name: web_configuration
  endpoint:
    path: /create-apps/web/serve-different-directories
    method: GET
    data_selector: web
    params: {}
- name: web
  endpoint:
    path: /
    method: GET
    data_selector: locations
    params: {}
- name: api
  endpoint:
    path: /
    method: GET
- name: admin
  endpoint:
    path: /admin
    method: GET
- name: gatsby
  endpoint:
    path: /site
    method: GET
- name: mercure
  endpoint:
    path: /
    method: GET
- name: admin
  endpoint:
    path: /admin
    method: GET
    data_selector: ''
    params: {}
- name: api
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: gatsby
  endpoint:
    path: /gatsby
    method: GET
    data_selector: ''
    params: {}
- name: mercure
  endpoint:
    path: /mercure/.config
    method: GET
    data_selector: ''
    params: {}
- name: static_site_configuration
  endpoint:
    path: /create-apps/web/static.md
    method: GET
    data_selector: configuration
    params: {}
- name: relationships
  endpoint:
    path: /api/internal
    method: GET
- name: api
  source:
    root: api-app
- name: admin
  source:
    root: admin
- name: gatsby
  source:
    root: gatsby
- name: mercure
  source:
    root: mercure
- name: default
  endpoint:
    path: /
    method: GET
- name: files
  endpoint:
    path: /sites/default/files
    method: GET
- name: drupal
  endpoint:
    path: /api/drupal
    method: GET
    data_selector: records
- name: hooks
  endpoint:
    path: /create-apps/hooks/vary-hooks-by-environment
    method: GET
    data_selector: commands
    params: {}
- name: build
  endpoint:
    path: /build
    method: GET
    data_selector: variables
    params: {}
- name: deploy
  endpoint:
    path: /deploy
    method: GET
    data_selector: variables
    params: {}
- name: post_deploy
  endpoint:
    path: /post_deploy
    method: GET
    data_selector: variables
    params: {}
- name: build-css
  endpoint:
    path: /create-apps/hooks/hooks-and-dependencies
    method: POST
    data_selector: scripts
    params: {}
- name: mariadb
  endpoint:
    path: /services/data/v11.8
    method: GET
    data_selector: records
    params:
      disk: 2048
- name: postgresql
  endpoint:
    path: /services/data/v17
    method: GET
    data_selector: records
    params:
      disk: 1024
- name: elasticsearch
  endpoint:
    path: /elasticsearch
    method: GET
    data_selector: records
- name: animals
  endpoint:
    path: /animals
    method: POST
    data_selector: index
    params: {}
- name: my_index
  endpoint:
    path: /my_index
    method: GET
    data_selector: hits
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: variables
    params:
      failures_stop_build: 'Yes'
      variables_available: Build variables
      timeout: 1 hour
      run_on_worker_instances: 'Yes'
      writable_directories: $PLATFORM_APP_DIR, $PLATFORM_CACHE_DIR, /tmp
      blocks_requests: 'No'
      runs_on_all_redeploys: 'No'
- name: deploy
  endpoint:
    path: /deploy
    method: POST
    data_selector: runtime_variables
    params:
      failures_stop_build: 'No'
      variables_available: Runtime variables
      services_available: 'Yes'
      timeout: None
      run_on_worker_instances: 'No'
      blocks_requests: 'Yes'
      runs_on_all_redeploys: 'No'
- name: post_deploy
  endpoint:
    path: /post_deploy
    method: POST
    data_selector: runtime_variables
    params:
      failures_stop_build: 'No'
      variables_available: Runtime variables
      services_available: 'Yes'
      timeout: None
      run_on_worker_instances: 'No'
      blocks_requests: 'No'
      runs_on_all_redeploys: 'Yes'
- name: elasticsearch
  endpoint:
    path: /services/data/v8.5
    method: GET
    data_selector: records
    params: {}
- name: my_index
  endpoint:
    path: /my_index
    method: GET
    data_selector: hits.hits
- name: elasticsearch
  endpoint:
    path: /services/data/v8.5
    method: GET
    data_selector: records
- name: queue
  endpoint:
    commands:
      start: python queue-worker.py
- name: mail
  endpoint:
    commands:
      start: python mail-worker.py
- name: mariadb
  endpoint:
    path: /services/data/v11.8
    method: GET
    data_selector: records
    params:
      disk: 2048
- name: postgresql
  endpoint:
    path: /services/data/v17
    method: GET
    data_selector: records
    params:
      disk: 1024
- name: generate_pdf
  endpoint:
    path: /forms/chromium/convert/url
    method: POST
    params: {}
- name: elasticsearch_service
  endpoint:
    path: /
    method: GET
- name: elasticsearch
  endpoint:
    path: /add-services/elasticsearch
    method: GET
- name: chrome-headless
  endpoint:
    path: /add-services/headless-chrome
    method: GET
- name: animals
  endpoint:
    path: /animals
    method: POST
    data_selector: hits
    params: {}
- name: my_index
  endpoint:
    path: /my_index
    method: GET
    data_selector: hits
    params: {}
- name: elasticsearch
  endpoint:
    path: /services/data/vXX.X/sobjects/elasticsearch
    method: GET
- name: animals
  endpoint:
    path: /
    method: POST
    data_selector: hits
    params: {}
- name: my_index
  endpoint:
    path: /my_index/_search
    method: GET
    data_selector: hits
    params: {}
- name: chrome-headless
  endpoint:
    path: /services/data/vXX.X/sobjects/HeadlessChrome
    method: GET
    data_selector: records
    params: {}
- name: elasticsearch
  endpoint:
    path: /services/data/vXX.X/sobjects/Elasticsearch
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: query
  endpoint:
    path: /api/v2/query
    method: POST
    data_selector: results
    params:
      org: main
      bucket: main
      api_token: azertyuiopqsdfghjklm1234567890
- name: influxdb
  endpoint:
    path: /influxdb
    method: GET
- name: generate_pdf
  endpoint:
    path: /forms/chromium/convert/url
    method: POST
- name: service
  endpoint:
    path: /services/kafka
    method: GET
- name: service
  endpoint:
    path: /platform/services.yaml
    method: GET
- name: service
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: service
- name: animals
  endpoint:
    path: /animals
    method: POST
- name: kafka
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: services
    params: {}
- name: animals
  endpoint:
    path: /animals
    method: POST
- name: chrome-headless
  endpoint:
    path: /platform/services.yaml
    method: GET
- name: kafka
  endpoint:
    path: /services/data/vXX.X/sobjects/kafka
    method: GET
    data_selector: records
- name: chromeheadless
  endpoint:
    path: /development/variables/use-variables.html#access-variables-in-your-app
    method: GET
    data_selector: credentials
    params: {}
- name: producer
  endpoint:
    path: /kafka/producer
    method: POST
    data_selector: records
- name: consumer
  endpoint:
    path: /kafka/consumer
    method: GET
    data_selector: records
- name: chrome-headless
  endpoint:
    path: /add-services/headless-chrome
    method: GET
- name: data
  endpoint:
    path: /api/v2/write
    method: POST
    data_selector: data
    params:
      org: main
      bucket: main
      api_token: azertyuiopqsdfghjklm1234567890
- name: MariaDB/MySQL
  endpoint:
    path: /add-services/mysql
    method: GET
- name: influx_measurement
  endpoint:
    path: /api/v2/query
    method: GET
    data_selector: results
    params: {}
- name: mariadb
  endpoint:
    path: /services/data/v11.8/sobjects/mariadb
    method: GET
    data_selector: records
- name: oraclemysql
  endpoint:
    path: /services/data/v8.0/sobjects/oraclemysql
    method: GET
    data_selector: records
- name: data
  endpoint:
    path: /api/v2/write
    method: POST
    data_selector: null
    params:
      org: main
      bucket: main
      api_token: azertyuiopqsdfghjklm1234567890
- name: influx_data
  endpoint:
    path: /api/v2/write
    method: POST
    data_selector: records
    params:
      bucket: ${INFLUX_BUCKET}
      org: ${INFLUX_ORG}
      token: ${INFLUX_TOKEN}
- name: mariadb
  endpoint:
    path: /services/data/vXX.X/sobjects/mariadb
    method: GET
    data_selector: records
    params: {}
- name: oraclemysql
  endpoint:
    path: /services/data/vXX.X/sobjects/oraclemysql
    method: GET
    data_selector: records
    params: {}
- name: People
  endpoint:
    path: /services/data/vXX.X/sobjects/People
    method: GET
    data_selector: records
    params: {}
- name: service_info
  endpoint:
    path: /service
    method: GET
    data_selector: service
- name: mariadb
  endpoint:
    path: /services/data/vXX.X/sobjects/mariadb
    method: GET
    data_selector: records
    params: {}
- name: oraclemysql
  endpoint:
    path: /services/data/vXX.X/sobjects/oraclemysql
    method: GET
    data_selector: records
    params: {}
- name: service
  endpoint:
    path: /services/kafka
    method: GET
    data_selector: service
    params: {}
- name: mariadb
  endpoint:
    path: /services/data/v11.8/sobjects/mariadb
    method: GET
    data_selector: records
    params: {}
- name: oraclemysql
  endpoint:
    path: /services/data/v8.0/sobjects/oraclemysql
    method: GET
    data_selector: records
    params: {}
- name: People
  endpoint:
    path: /people
    method: GET
    data_selector: records
    params: {}
- name: kafka
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: records
    params: {}
- name: animals
  endpoint:
    path: /animals
    method: POST
- name: mariadb
  endpoint:
    path: /add-services/mysql
    method: GET
    data_selector: records
    params: {}
- name: oracle-mysql
  endpoint:
    path: /add-services/oraclemysql
    method: GET
    data_selector: records
    params: {}
- name: kafka
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: service
    params: {}
- name: mysql
  endpoint:
    path: /add-services/mysql
    method: GET
    data_selector: records
    params: {}
- name: numtest
  endpoint:
    path: /numtest
    method: POST
    data_selector: records
- name: greetings
  endpoint:
    path: /greetings
    method: POST
    data_selector: records
- name: mariadb
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: records
    params: {}
- name: oraclemysql
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: records
    params: {}
- name: People
  endpoint:
    path: /services/data/vXX.X/sobjects/People
    method: GET
    data_selector: records
    params: {}
- name: mariadb
  endpoint:
    path: /services/data/vXX.X/sobjects/mariadb
    method: GET
    data_selector: records
- name: oraclemysql
  endpoint:
    path: /services/data/vXX.X/sobjects/oraclemysql
    method: GET
    data_selector: records
- name: People
  endpoint:
    path: /People
    method: CREATE
    data_selector: records
- name: main
  endpoint:
    path: main
    method: mysql
    data_selector: ''
    params: {}
- name: mariadb
  endpoint:
    path: /services/data/v11.8/sobjects/MariaDB
    method: GET
    data_selector: records
- name: oraclemysql
  endpoint:
    path: /services/data/v8.0/sobjects/OracleMySQL
    method: GET
    data_selector: records
- name: mariadb
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: records
- name: oraclemysql
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: records
- name: mariadb
  endpoint:
    path: /services/data/vXX.X/sobjects/MariaDB
    method: GET
    data_selector: records
    params: {}
- name: oraclemysql
  endpoint:
    path: /services/data/vXX.X/sobjects/OracleMySQL
    method: GET
    data_selector: records
    params: {}
- name: People
  endpoint:
    path: /create_table
    method: CREATE
    data_selector: records
    params: {}
- name: MariaDB/MySQL
  endpoint:
    path: /add-services/mysql
    method: GET
    data_selector: records
- name: admin
  endpoint:
    path: /admin
    method: GET
- name: reporter
  endpoint:
    path: /reporter
    method: GET
- name: importer
  endpoint:
    path: /importer
    method: GET
- name: mariadb
  endpoint:
    path: /services/data/v11.8/sobjects/MariaDB
    method: GET
    data_selector: records
- name: oraclemysql
  endpoint:
    path: /services/data/v8.0/sobjects/OracleMySQL
    method: GET
    data_selector: records
- name: MariaDB/MySQL
  endpoint:
    path: /add-services/mysql
    method: GET
- name: replication
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: replicator
- name: mysql
  endpoint:
    path: /platform.app.yaml
    method: GET
    data_selector: database
- name: mariadb
  endpoint:
    path: /services/data/v11.8/sobjects/mariadb
    method: GET
    data_selector: records
- name: oraclemysql
  endpoint:
    path: /services/data/v8.0/sobjects/oraclemysql
    method: GET
    data_selector: records
- name: People
  endpoint:
    path: /People
    method: CREATE
    data_selector: records
    params: {}
- name: mariadb
  endpoint:
    path: /services/data/v11.8/sobjects/mariadb
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: oraclemysql
  endpoint:
    path: /services/data/v8.0/sobjects/oraclemysql
    method: GET
    data_selector: records
    params: {}
- name: service
  endpoint:
    path: /platform/services
    method: GET
    data_selector: service
- name: mariadb
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: records
- name: oraclemysql
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: records
- name: memcached
  endpoint:
    path: /services/memcached
    method: GET
    data_selector: service
- name: memcached
  endpoint:
    path: /add-services/memcached
    method: GET
    data_selector: service
    params: {}
- name: mariadb
  endpoint:
    path: /services/data/vXX.X/sobjects/MariaDB
    method: GET
    data_selector: records
- name: oraclemysql
  endpoint:
    path: /services/data/vXX.X/sobjects/OracleMySQL
    method: GET
    data_selector: records
- name: memcached
  endpoint:
    path: /services/data/vXX.X/sobjects/Memcached
    method: GET
- name: main
  endpoint:
    path: main
    method: mysql
    data_selector: records
    params: {}
- name: memcached
  endpoint:
    path: /memcached
    method: GET
    data_selector: service
    params: {}
- name: mariadb
  endpoint:
    path: /services/data/v11.8
    method: GET
- name: oraclemysql
  endpoint:
    path: /services/data/v8.0
    method: GET
- name: People
  endpoint:
    path: CREATE TABLE People
    method: CREATE
    data_selector: ''
    params: {}
- name: starwars
  endpoint:
    path: main/starwars
    method: GET
    data_selector: documents
- name: scientist
  endpoint:
    path: main/scientist
    method: GET
    data_selector: documents
- name: startrek
  endpoint:
    path: main/startrek
    method: GET
    data_selector: documents
- name: admin
  endpoint:
    path: /admin
    method: GET
    data_selector: records
- name: reporter
  endpoint:
    path: /reporter
    method: GET
    data_selector: records
- name: importer
  endpoint:
    path: /importer
    method: GET
    data_selector: records
- name: mongodb
  endpoint:
    path: /mongodb
    method: GET
- name: starwars
  endpoint:
    path: /mongodb
    method: GET
    data_selector: records
    params: {}
- name: scientist
  endpoint:
    path: /mongodb
    method: GET
    data_selector: records
    params: {}
- name: startrek
  endpoint:
    path: /mongodb
    method: GET
    data_selector: records
    params: {}
- name: replication_user
  endpoint:
    path: /services/mysql/replication
    method: GET
- name: mariadb
  endpoint:
    path: /add-services/mysql
    method: GET
    data_selector: records
    params: {}
- name: files
  endpoint:
    path: /services/data/vXX.X/sobjects/Files
    method: GET
    data_selector: records
- name: service
  endpoint:
    path: /services/memcached
    method: GET
    data_selector: service
- name: service
  endpoint:
    path: /services/memcached
    method: GET
    data_selector: service
- name: opensearch
  endpoint:
    path: opensearch
    method: ''
    data_selector: ''
    params: {}
- name: memcached
  endpoint:
    path: /credentials/memcached
    method: GET
- name: memcached
  endpoint:
    path: /add-services/memcached
    method: GET
    data_selector: service
    params: {}
- name: opensearch
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: memcached
  endpoint:
    path: /add-services/memcached
    method: GET
    data_selector: service
    params: {}
- name: opensearch
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: memcached
  endpoint:
    path: /services/data/vXX.X/sobjects/Memcached
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: mongodb_collection
  endpoint:
    path: /services/data/vXX.X/sobjects/MongoDBCollection
    method: GET
    data_selector: records
- name: starwars
  endpoint:
    path: main/starwars
    method: GET
    data_selector: records
    params: {}
- name: scientist
  endpoint:
    path: main/scientist
    method: GET
    data_selector: records
    params: {}
- name: PLATFORM_RELATIONSHIPS
  endpoint:
    path: /development/variables/use-variables.html#use-provided-variables
    method: GET
    data_selector: relationships
    params: {}
- name: mongodb
  endpoint:
    path: mongodb
    method: GET
- name: starwars
  endpoint:
    path: /mongodb
    method: GET
- name: scientist
  endpoint:
    path: /mongodb
    method: GET
- name: startrek
  endpoint:
    path: /mongodb
    method: GET
- name: postgresql
  endpoint:
    path: /services/data/v17/sobjects/PostgreSQL
    method: GET
    data_selector: records
    params: {}
- name: postgresql
  endpoint:
    path: /services/data/vXX.X/sobjects/PostgreSQL
    method: GET
    data_selector: records
    params: {}
- name: People
  endpoint:
    path: /services/data/v17/sobjects/People
    method: GET
    data_selector: records
- name: network-storage
  endpoint:
    path: /services/data/vXX.X/sobjects/NetworkStorage
    method: GET
- name: postgresql
  endpoint:
    path: /services/data/vXX.X/sobjects/PostgreSQL
    method: GET
    data_selector: records
    params: {}
- name: main
  endpoint:
    path: /services/data/v17/sobjects/main
    method: GET
    data_selector: records
    params: {}
- name: legacy
  endpoint:
    path: /services/data/v17/sobjects/legacy
    method: GET
    data_selector: records
    params: {}
- name: search_service
  endpoint:
    path: /services/opensearch
    method: GET
    data_selector: results
- name: opensearch
  endpoint:
    path: opensearch
    method: GET
- name: rabbitmq_service
  endpoint:
    path: /
    method: GET
- name: opensearch
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: relationships
  endpoint:
    path: /development/variables/use-variables.html#use-provided-variables
    method: GET
    data_selector: relationships
    params: {}
- name: opensearch
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: rabbitmq
  endpoint:
    path: /add-services/rabbitmq
    method: GET
- name: deploy_days
  endpoint:
    path: /queue/deploy_days
    method: POST
    data_selector: message
    params: {}
- name: cloud
  endpoint:
    path: /queue/cloud
    method: GET
    data_selector: message
    params: {}
- name: rabbitmq
  endpoint:
    path: /services/data/vXX.X/sobjects/RabbitMQ
    method: GET
    data_selector: records
- name: deploy_days
  endpoint:
    path: /
    method: POST
    data_selector: message
    params: {}
- name: postgresql
  endpoint:
    path: /services/data/vXX.X/sobjects/PostgreSQL
    method: GET
    data_selector: records
    params: {}
- name: redis-persistent
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: service
    params:
      disk: 256
- name: redissessions
  endpoint:
    path: /platform.app.yaml
    method: POST
    data_selector: relationships
    params: {}
- name: PeopleGo
  endpoint:
    path: /services/data/vXX.X/sobjects/PeopleGo
    method: CREATE
    data_selector: records
- name: JAVA_FRAMEWORKS
  endpoint:
    path: /services/data/vXX.X/sobjects/JAVA_FRAMEWORKS
    method: CREATE
    data_selector: records
- name: People
  endpoint:
    path: /services/data/vXX.X/sobjects/People
    method: CREATE
    data_selector: records
- name: redis
  endpoint:
    path: /services/data/vXX.X/sobjects/Redis
    method: GET
    data_selector: records
    params: {}
- name: postgresql
  endpoint:
    path: /services/data/vXX.X/sobjects/PostgreSQL
    method: GET
    data_selector: records
    params: {}
- name: redis
  endpoint:
    path: /services/data/v8.0/redis
    method: GET
    data_selector: records
    params: {}
- name: People
  endpoint:
    path: /People
    method: GET
    data_selector: records
- name: JAVA_FRAMEWORKS
  endpoint:
    path: /JAVA_FRAMEWORKS
    method: GET
    data_selector: records
- name: redis
  endpoint:
    path: /services/data/v8.0/sobjects/Redis
    method: GET
    data_selector: records
    params: {}
- name: postgresql
  endpoint:
    path: /services/data/v17/sobjects/PostgreSQL
    method: GET
    data_selector: records
- name: redissessions
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: main
  endpoint:
    path: /services/data/v17.0/sobjects/main
    method: GET
    data_selector: records
    params: {}
- name: legacy
  endpoint:
    path: /services/data/v17.0/sobjects/legacy
    method: GET
    data_selector: records
    params: {}
- name: redis
  endpoint:
    path: /services/data/v8.0/redis
    method: GET
    data_selector: data
    params: {}
- name: persistent_redis
  endpoint:
    path: /services.yaml
    method: POST
    data_selector: null
    params: {}
- name: ephemeral_redis
  endpoint:
    path: /services.yaml
    method: POST
    data_selector: null
    params: {}
- name: rabbitmq
  endpoint:
    path: /
    method: GET
- name: redis
  endpoint:
    path: /services/data/vXX.X/sobjects/Redis
    method: GET
    data_selector: records
- name: redissessions
  endpoint:
    path: redissessions
    method: GET
    data_selector: sessions
    params: {}
- name: relationship_info
  endpoint:
    path: /development/variables/use-variables.html#use-provided-variables
    method: GET
    data_selector: relationship
    params: {}
- name: deploy_days
  endpoint:
    path: /queue/deploy_days
    method: POST
- name: cloud
  endpoint:
    path: /queue/cloud
    method: GET
- name: rabbitmq
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: null
    params: {}
- name: deploy_days
  endpoint:
    path: /deploy_days
    method: POST
    data_selector: message
    params: {}
- name: cloud
  endpoint:
    path: /cloud
    method: GET
    data_selector: message
    params: {}
- name: valkey
  endpoint:
    path: /services/data/v8.0/valkey
    method: GET
    data_selector: records
- name: rabbitmq
  endpoint:
    path: /services/data/rabbitmq
    method: GET
- name: deploy_days
  endpoint:
    path: /deploy_days
    method: GET
- name: cloud
  endpoint:
    path: /cloud
    method: GET
- name: collection1
  endpoint:
    path: solr/collection1
    method: GET
- name: redissessions
  endpoint:
    path: /platform/app.yaml
    method: GET
    data_selector: records
    params:
      disk: 256
- name: solr
  endpoint:
    path: solr/collection1
    method: GET
- name: redis
  endpoint:
    path: /services/data/redis
    method: GET
    data_selector: records
    params: {}
- name: document
  endpoint:
    path: /solr/collection_name/update
    method: POST
    data_selector: response
    params: {}
- name: query
  endpoint:
    path: /solr/collection_name/select
    method: GET
    data_selector: response
    params: {}
- name: solr
  endpoint:
    path: /solr/collection1
    method: GET
- name: redis
  endpoint:
    path: /services/data/v8.0/sobjects/Redis
    method: GET
    data_selector: records
    params: {}
- name: solr
  endpoint:
    path: solr/collection1
    method: GET
- name: redis
  endpoint:
    path: /services/data/v8.0/redis
    method: GET
    data_selector: records
    params: {}
- name: redissessions
  endpoint:
    path: /
    method: GET
    data_selector: cities
    params: {}
- name: solr
  endpoint:
    path: solr/collection1
    method: GET
    data_selector: records
    params: {}
- name: document
  endpoint:
    path: /solr/collection1/update
    method: POST
    data_selector: response
    params: {}
- name: redis
  endpoint:
    path: /services/data/v8.0/sobjects/Redis
    method: GET
    data_selector: records
- name: solr
  endpoint:
    path: /solr/collection1
    method: GET
- name: solrsearch1
  endpoint:
    path: solr/mainindex
- name: solrsearch2
  endpoint:
    path: solr/extraindex
- name: redis
  endpoint:
    path: /services/data/v8.0/sobjects/Redis
    method: GET
    data_selector: records
    params: {}
- name: service
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: services
- name: redis
  endpoint:
    path: /services/data/v8.0/sobjects/Redis
    method: GET
    data_selector: records
- name: redissessions
  endpoint:
    path: /
    method: GET
    data_selector: sessions
    params: {}
- name: varnish
  endpoint:
    path: /services/data/vXX.X/sobjects/Varnish
    method: GET
    data_selector: records
    params: {}
- name: stats
  endpoint:
    path: /stats
    method: GET
- name: config
  endpoint:
    path: /config
    method: GET
- name: logs
  endpoint:
    path: /logs
    method: GET
- name: valkeysession
  endpoint:
    path: /valkey-persistent/8.0
    method: GET
- name: PLATFORM_RELATIONSHIPS
  endpoint:
    path: /
    method: GET
- name: valkey
  endpoint:
    path: /services/data/v8.0
    method: GET
- name: vault_kms_service
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: valkeysession
  endpoint:
    path: /valkeysession
    method: GET
    data_selector: records
    params: {}
- name: vault_service
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: collection1
  endpoint:
    path: solr/collection1
    method: GET
    data_selector: response.docs
- name: manage_keys
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: collection1
  endpoint:
    path: solr/collection1
    method: GET
    data_selector: records
- name: solr
  endpoint:
    path: /solr/collection1
    method: GET
    data_selector: records
- name: ssi_commands
  endpoint:
    path: /platform/routes.yaml
    method: GET
    data_selector: ssi
    params: {}
- name: caching_dynamic_content
  endpoint:
    path: /platform/routes.yaml
    method: GET
    data_selector: cache
    params: {}
- name: solr
  endpoint:
    path: solr/collection1
    method: GET
    data_selector: null
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: document
  endpoint:
    path: /update
    method: POST
    data_selector: response
    params: {}
- name: query
  endpoint:
    path: /select
    method: GET
    data_selector: response
    params: {}
- name: solr
  endpoint:
    path: /solr/collection1
    method: GET
- name: document
  endpoint:
    path: /solr/update
    method: POST
    data_selector: response
    params: {}
- name: query
  endpoint:
    path: /solr/select
    method: GET
    data_selector: response
    params: {}
- name: collection1
  endpoint:
    path: solr/collection1
    method: GET
- name: collection1
  endpoint:
    path: /collection1/update
    method: POST
    data_selector: response
    params: {}
- name: mainindex
  endpoint:
    path: /solr/collection1
    method: GET
    data_selector: records
- name: extraindex
  endpoint:
    path: /solr/collection2
    method: GET
    data_selector: records
- name: proxy_route
  endpoint:
    path: /routes.yaml
    method: GET
    data_selector: routes
    params: {}
- name: service
  endpoint:
    path: /platform/services.yaml
    method: POST
    data_selector: services
    params: {}
- name: varnish
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: services
    params: {}
- name: stats
  endpoint:
    path: /stats
    method: GET
- name: config
  endpoint:
    path: /config
    method: GET
- name: logs
  endpoint:
    path: /logs
    method: GET
- name: vault_service
  endpoint:
    path: /
    method: GET
    data_selector: service
    params:
      is_master: true
- name: endpoints
  endpoint:
    path: /
    method: GET
    data_selector: endpoints
    params: {}
- name: dependencies
  endpoint:
    path: /create-apps/app-reference/single-runtime-image.html#dependencies
    method: GET
    data_selector: records
    params: {}
- name: key_management
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: manage_keys
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: vault_manage
  endpoint:
    path: /v1/transit/keys/${KEY_NAME}
    method: GET
- name: vault_sign
  endpoint:
    path: /v1/transit/sign/${KEY_NAME}/${HASH_ALGORITHM}
    method: POST
- name: myapp
  endpoint:
    path: /
    method: GET
    data_selector: application
    params: {}
- name: ssi_commands
  endpoint:
    path: /platform/routes.yaml
    method: GET
    data_selector: commands
- name: caching_dynamic_content
  endpoint:
    path: /platform/routes.yaml
    method: GET
    data_selector: caching
- name: Maven
  endpoint:
    path: /manage-maven-versions
    method: GET
    data_selector: records
    params: {}
- name: Gradle
  endpoint:
    path: /gradle
    method: GET
    data_selector: records
    params: {}
- name: Ant
  endpoint:
    path: /ant
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: cache
  endpoint:
    path: /
    method: GET
    data_selector: cache
    params: {}
- name: application
  endpoint:
    path: /create-apps/app-reference/single-runtime-image.html
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: whole-route redirects
  endpoint:
    path: /.platform/routes.yaml
    method: GET
    data_selector: routes
    params: {}
- name: partial redirects
  endpoint:
    path: /.platform/routes.yaml
    method: GET
    data_selector: redirects
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: nvm
  endpoint:
    path: /nvm-sh/nvm
    method: GET
- name: php
  endpoint:
    path: /create-apps/app-reference/single-runtime-image.html
    method: GET
    data_selector: records
- name: index
  endpoint:
    path: /my_index/_doc
    method: POST
    data_selector: _source
    params: {}
- name: search
  endpoint:
    path: /my_index/_search
    method: GET
    data_selector: hits.hits
    params: {}
- name: delete
  endpoint:
    path: /my_index/_doc/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: People
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: memcached
  endpoint:
    path: /services/memcached
    method: GET
- name: mongodb
  endpoint:
    path: /services/mongodb
    method: GET
- name: mysql
  endpoint:
    path: /services/mysql
    method: GET
- name: postgresql
  endpoint:
    path: /services/postgresql
    method: GET
- name: rabbitmq
  endpoint:
    path: /services/rabbitmq
    method: GET
- name: solr
  endpoint:
    path: /services/solr
    method: GET
- name: animals
  endpoint:
    path: /animals
    method: GET
    data_selector: animals
    params: {}
- name: scientist
  endpoint:
    path: /scientist
    method: GET
    data_selector: scientist
    params: {}
- name: JAVA_FRAMEWORKS
  endpoint:
    path: /JAVA_FRAMEWORKS
    method: GET
    data_selector: JAVA_FRAMEWORKS
    params: {}
- name: cloud
  endpoint:
    path: /cloud
    method: GET
    data_selector: cloud
    params: {}
- name: cities
  endpoint:
    path: /cities
    method: GET
    data_selector: cities
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: install_script
  endpoint:
    path: https://raw.githubusercontent.com/platformsh/snippets/main/src/install_swoole.sh
    method: GET
- name: composer_repository
  endpoint:
    path: https://PRIVATE_REPOSITORY_URL
    method: GET
- name: node-app
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: python
  endpoint:
    path: /create-apps/app-reference/single-runtime-image.html
    method: GET
    data_selector: versions
    params: {}
- name: projects
  endpoint:
    path: /services/data/vXX.X/sobjects/Project
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: teams
  endpoint:
    path: /services/data/vXX.X/sobjects/Team
    method: GET
    data_selector: records
    params: {}
- name: People
  endpoint:
    path: /my_index/People
    method: POST
    data_selector: hits
    params: {}
- name: People
  endpoint:
    path: /my_index
    method: PUT
    data_selector: documents
- name: Django 3
  endpoint:
    path: /guides/django.html
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: mysql
  endpoint:
    path: /add-services.html
    method: POST
    data_selector: mysql
    params:
      type: mysql:11.8
      disk: 2048
- name: hello_world
  endpoint:
    path: /hello
    method: GET
    data_selector: records
    params: {}
- name: drupal
  endpoint:
    path: /drupal
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: private_repository
  endpoint:
    path: https://PRIVATE_REPOSITORY_URL
    method: GET
- name: python_app
  endpoint:
    path: /create-apps/app-reference/single-runtime-image.html
    method: GET
    data_selector: applications
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Django 3
  endpoint:
    path: /guides/django.html
    method: GET
    data_selector: ''
    params: {}
- name: pipenv
  endpoint:
    path: /services/data/vXX.X/sobjects/Pipenv
    method: GET
    data_selector: records
- name: stuff:STEPS
  endpoint:
    data_selector: array
- name: stuff:COLORS
  endpoint:
    data_selector: object
- name: mysql
  endpoint:
    path: /platform/services.yaml
    method: GET
    data_selector: relationships
    params: {}
- name: mounts
  endpoint:
    path: /mounts
    method: GET
    data_selector: mounts
    params: {}
- name: hello_world
  endpoint:
    path: /hello
    method: GET
    data_selector: records
- name: drupal_content
  endpoint:
    path: /api/content
    method: GET
    data_selector: items
    params: {}
- name: send_email
  endpoint:
    path: /usr/sbin/sendmail
    method: POST
    data_selector: message
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: admin
  endpoint:
    path: https://github.com/platformsh-templates/bigfoot-multiapp-admin.git
    method: GET
- name: api
  endpoint:
    path: https://github.com/platformsh-templates/bigfoot-multiapp-api.git
    method: GET
- name: gatsby
  endpoint:
    path: https://github.com/platformsh-templates/bigfoot-multiapp-gatsby.git
    method: GET
- name: mercure
  endpoint:
    path: https://github.com/platformsh-templates/bigfoot-multiapp-mercure.git
    method: GET
- name: regions
  endpoint:
    path: /api/v1/regions
    method: GET
    data_selector: regions
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: create_project
  endpoint:
    path: /org/create-project
    method: GET
    data_selector: project
    params: {}
- name: mount
  endpoint:
    path: /mounts
    method: GET
    data_selector: mounts
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: private_git_repository
  endpoint:
    path: /git/repository
    method: GET
    data_selector: repository_data
- name: integrations
  endpoint:
    path: /integrations
    method: GET
    data_selector: integrations
    params: {}
- name: activities
  endpoint:
    path: /activities
    method: GET
    data_selector: activities
    params: {}
- name: activity_script
  endpoint:
    path: /api/projects/PROJECT_ID/integrations/INTEGRATION_ID/variables
    method: POST
    data_selector: ''
    params: {}
- name: regions
  endpoint:
    path: /api/regions
    method: GET
    data_selector: regions
    params: {}
- name: message
  endpoint:
    path: /hooks/slack
    method: POST
- name: webhook
  endpoint:
    path: /platform/integration
    method: POST
    data_selector: payload
    params: {}
- name: project_creation
  endpoint:
    path: /org/create-project
    method: GET
- name: integration
  endpoint:
    path: /platform/integration
    method: POST
    data_selector: integration
    params: {}
- name: repositories
  endpoint:
    path: /user/repos
    method: GET
    data_selector: repositories
    params: {}
- name: issues
  endpoint:
    path: /repos/{owner}/{repo}/issues
    method: GET
    data_selector: issues
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: SELECT
    data_selector: '*'
    params: {}
- name: integration
  endpoint:
    path: /platform/integration/add
    method: POST
    params:
      project_id: PROJECT_ID
      type: gitlab
      server_project: PROJECT/SUBPROJECT
      token: GITLAB_ACCESS_TOKEN
      base_url: GITLAB_URL
- name: active_integrations
  endpoint:
    path: /platform/integrations
    method: GET
    data_selector: integrations
    params: {}
- name: validate_integration
  endpoint:
    path: /platform/integration/validate
    method: POST
    data_selector: validation_result
    params: {}
- name: list_activities
  endpoint:
    path: /platform/integration/activities
    method: GET
    data_selector: activities
    params: {}
- name: activity_log
  endpoint:
    path: /platform/integration/activity/log
    method: GET
    data_selector: activity_log
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: activity
  endpoint:
    path: /integrations/activity
    method: POST
    data_selector: activity
    params: {}
- name: health.email
  endpoint:
    path: /platform/integration
    method: POST
    data_selector: null
    params: {}
- name: health.pagerduty
  endpoint:
    path: /platform/integration
    method: POST
    data_selector: null
    params: {}
- name: webhook
  endpoint:
    path: /platform/integration/add
    method: POST
    data_selector: payload
    params:
      type: webhook
      url: URL_TO_RECEIVE_JSON
- name: validate_integration
  endpoint:
    path: /platform/integration/validate
    method: POST
    data_selector: validation_result
    params: {}
- name: infrastructure_metrics
  endpoint:
    path: /metrics/infrastructure
    method: GET
    data_selector: metrics
    params: {}
- name: integration
  endpoint:
    path: /platform/integration
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: host_metrics
  endpoint:
    path: /metrics/host
    method: GET
    data_selector: metrics
    params: {}
- name: integration
  endpoint:
    path: /platform/integration
    method: POST
    params:
      project: PROJECT_ID
      type: gitlab
      server-project: PROJECT/SUBPROJECT
      token: GITLAB_ACCESS_TOKEN
      base-url: GITLAB_URL
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Blackfire
  endpoint:
    path: /increase-observability/integrate-observability/blackfire.html
    method: GET
- name: New Relic
  endpoint:
    path: /increase-observability/integrate-observability/new-relic.html
    method: GET
- name: Tideways
  endpoint:
    path: /increase-observability/integrate-observability/tideways.html
    method: GET
- name: low_disk_warning
  endpoint:
    path: /low-disk-warning
    method: GET
    data_selector: notifications
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: access_logs
  endpoint:
    path: /increase-observability/logs/access-logs.html
    method: GET
    data_selector: logs
- name: forward_upsun_fixed_logs
  endpoint:
    path: /increase-observability/logs/forward-logs.html
    method: GET
    data_selector: logs
- name: forward_fastly_cdn_logs
  endpoint:
    path: /increase-observability/logs/forward-fastly-logs.html
    method: GET
    data_selector: logs
- name: activity_logs
  endpoint:
    path: /platform/activity
    method: GET
    data_selector: activities
- name: container_logs
  endpoint:
    path: /platform/container/logs
    method: GET
    data_selector: logs
- name: Blackfire
  endpoint:
    path: /increase-observability/integrate-observability/blackfire.html
    method: GET
- name: New Relic
  endpoint:
    path: /increase-observability/integrate-observability/new-relic.html
    method: GET
- name: Tideways
  endpoint:
    path: /increase-observability/integrate-observability/tideways.html
    method: GET
- name: log_forwarding
  endpoint:
    path: /log/forward
    method: POST
    data_selector: logs
    params: {}
- name: New Relic Agent
  endpoint:
    path: /integrate-observability/new-relic
    method: GET
- name: environments
  endpoint:
    path: /environments
    method: GET
    data_selector: environments
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: backup
  endpoint:
    path: /backups
    method: POST
    data_selector: backup_details
- name: access_logs
  endpoint:
    path: /increase-observability/logs/access-logs
    method: GET
- name: forward_upsun_fixed_logs
  endpoint:
    path: /increase-observability/logs/forward-logs
    method: GET
- name: forward_fastly_cdn_logs
  endpoint:
    path: /increase-observability/logs/forward-fastly-logs
    method: GET
- name: available_backups
  endpoint:
    path: /backups
    method: GET
    data_selector: backups
- name: restore_backup
  endpoint:
    path: /backup/restore
    method: POST
    data_selector: restore
- name: activity_logs
  endpoint:
    path: /activity_logs
    method: GET
    data_selector: activities
- name: container_logs
  endpoint:
    path: /container_logs
    method: GET
    data_selector: logs
- name: environment
  endpoint:
    path: /environments/change-parent
    method: POST
- name: log_forwarding
  endpoint:
    path: /log/forwarding
    method: POST
    data_selector: logs
    params: {}
- name: environments
  endpoint:
    path: /environments
    method: GET
    data_selector: environments
- name: backup
  endpoint:
    path: /backup
    method: POST
    data_selector: backup
    params: {}
- name: backups
  endpoint:
    path: /backups
    method: GET
    data_selector: backups
    params: {}
- name: backup_restore
  endpoint:
    path: /backup/restore
    method: POST
    data_selector: result
    params: {}
- name: project_migration
  endpoint:
    path: /migrate/project
    method: POST
    data_selector: migrationRecords
- name: environment
  endpoint:
    path: /environments/change-parent
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: main_environment
  endpoint:
    path: /platform/environment:branch
    method: POST
    data_selector: results
    params: {}
- name: activate_environment
  endpoint:
    path: /platform/environment:activate
    method: POST
    data_selector: results
    params: {}
- name: deactivate_environment
  endpoint:
    path: /platform/environment:delete
    method: POST
    data_selector: results
    params:
      no_delete_branch: old
- name: set_default_branch
  endpoint:
    path: /platform/project:info
    method: POST
    data_selector: results
    params:
      default_branch: main
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: domain_control_validation
  endpoint:
    path: /domains/steps/dns.html
    method: GET
- name: tls_certificates
  endpoint:
    path: /glossary.html#transport-layer-security-tls
    method: GET
- name: retrieve_api_token
  endpoint:
    path: /master/settings/variables
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user_organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params:
      filter[status]: active,restricted,suspended
- name: create_organization
  endpoint:
    path: /organizations
    method: POST
    data_selector: organization
    params: {}
- name: get_organization
  endpoint:
    path: /organizations/{organization_id}
    method: GET
    data_selector: organization
    params: {}
- name: organization_members
  endpoint:
    path: /organization_members
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: get_project_capabilities
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
- name: clear_project_build_cache
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
- name: get_list_of_project_domains
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
- name: add_project_domain
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
- name: get_project_domain
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
      domainId: required
- name: update_project_domain
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
      domainId: required
- name: delete_project_domain
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
      domainId: required
- name: get_list_of_ssl_certificates
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
- name: add_ssl_certificate
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
- name: get_ssl_certificate
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
      certificateId: required
- name: update_ssl_certificate
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
      certificateId: required
- name: delete_ssl_certificate
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
      certificateId: required
- name: get_list_of_project_variables
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
- name: add_project_variable
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
- name: get_project_variable
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
      projectVariableId: required
- name: update_project_variable
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
      projectVariableId: required
- name: delete_project_variable
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
      projectVariableId: required
- name: get_blob_object
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params:
      projectId: required
      repositoryBlobId: required
- name: user_organizations
  endpoint:
    path: /organizations/user
    method: GET
    data_selector: organizations
    params: {}
- name: list_organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params:
      filter[status]: active,restricted,suspended
- name: get_organization
  endpoint:
    path: /organizations/{organization_id}
    method: GET
    data_selector: organization
    params: {}
- name: organization_member
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: project
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: get_commit_object
  endpoint:
    path: /projects/{projectId}/git/commits/{repositoryCommitId}
    method: GET
- name: get_list_of_repository_refs
  endpoint:
    path: /projects/{projectId}/git/refs
    method: GET
- name: get_ref_object
  endpoint:
    path: /projects/{projectId}/git/refs/{repositoryRefId}
    method: GET
- name: get_tree_object
  endpoint:
    path: /projects/{projectId}/git/trees/{repositoryTreeId}
    method: GET
- name: get_list_of_existing_integrations
  endpoint:
    path: /projects/{projectId}/integrations
    method: GET
- name: integrate_project_with_third_party_service
  endpoint:
    path: /projects/{projectId}/integrations
    method: POST
- name: get_info_about_existing_third_party_integration
  endpoint:
    path: /projects/{projectId}/integrations/{integrationId}
    method: GET
- name: update_existing_third_party_integration
  endpoint:
    path: /projects/{projectId}/integrations/{integrationId}
    method: PATCH
- name: delete_existing_third_party_integration
  endpoint:
    path: /projects/{projectId}/integrations/{integrationId}
    method: DELETE
- name: create_new_support_ticket
  endpoint:
    path: /support/tickets
    method: POST
- name: update_ticket
  endpoint:
    path: /support/tickets/{ticket_id}
    method: PATCH
- name: list_support_ticket_priorities
  endpoint:
    path: /support/tickets/priorities
    method: GET
- name: list_support_ticket_categories
  endpoint:
    path: /support/tickets/categories
    method: GET
- name: get_list_of_project_environments
  endpoint:
    path: /projects/{projectId}/environments
    method: GET
- name: get_environment
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}
    method: GET
- name: update_environment
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}
    method: PATCH
- name: delete_environment
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}
    method: DELETE
- name: activate_environment
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}/activate
    method: POST
- name: branch_environment
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}/branch
    method: POST
- name: deactivate_environment
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}/deactivate
    method: POST
- name: environment_variables
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}/variables
    method: GET
    data_selector: variables
- name: add_environment_variable
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}/variables
    method: POST
    data_selector: variable
- name: get_environment_variable
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}/variables/{variableId}
    method: GET
    data_selector: variable
- name: get_project_capabilities
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params: {}
- name: clear_project_build_cache
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params: {}
- name: get_list_of_project_domains
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params: {}
- name: add_project_domain
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params: {}
- name: update_project_domain
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params: {}
- name: delete_project_domain
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params: {}
- name: get_list_of_ssl_certificates
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params: {}
- name: add_ssl_certificate
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params: {}
- name: get_project_variable
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params: {}
- name: update_project_variable
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params: {}
- name: delete_project_variable
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params: {}
- name: get_blob_object
  endpoint:
    path: /projects/{projectId}/git/*
    method: GET
    data_selector: status
    params: {}
- name: commit
  endpoint:
    path: /projects/{projectId}/git/commits/{repositoryCommitId}
    method: GET
- name: repository_refs
  endpoint:
    path: /projects/{projectId}/git/refs
    method: GET
- name: ref
  endpoint:
    path: /projects/{projectId}/git/refs/{repositoryRefId}
    method: GET
- name: tree
  endpoint:
    path: /projects/{projectId}/git/trees/{repositoryTreeId}
    method: GET
- name: third_party_integration
  endpoint:
    path: /projects/{projectId}/integrations
    method: GET
- name: support_ticket
  endpoint:
    path: /support/tickets
    method: POST
- name: project_environments
  endpoint:
    path: /projects/{projectId}/environments
    method: GET
- name: update_environment_variable
  endpoint:
    path: /projects/{projectId}/environment_variables
    method: POST
    data_selector: status
- name: delete_environment_variable
  endpoint:
    path: /projects/{projectId}/environment_variables/{variableId}
    method: DELETE
    data_selector: status
- name: get_routes
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}/routes
    method: GET
    data_selector: routes
- name: get_route_info
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}/routes/{routeId}
    method: GET
    data_selector: route
- name: trigger_source_operation
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}/source/operations
    method: POST
    data_selector: status
- name: get_project_activity_log
  endpoint:
    path: /projects/{projectId}/activities
    method: GET
    data_selector: activities
- name: get_environment_activity_log
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}/activities
    method: GET
    data_selector: activities
- name: invite_user_to_project
  endpoint:
    path: /projects/{projectId}/invitations
    method: POST
    data_selector: status
- name: list_teams
  endpoint:
    path: /teams
    method: GET
    data_selector: teams
- name: create_team
  endpoint:
    path: /teams
    method: POST
    data_selector: status
- name: get_environment_variables
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}/variables
    method: GET
    data_selector: variables
- name: add_environment_variable
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}/variables
    method: POST
    data_selector: status
- name: get_environment_variable
  endpoint:
    path: /projects/{projectId}/environments/{environmentId}/variables/{variableId}
    method: GET
    data_selector: variable
- name: team
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params: {}
- name: user_access
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
    params: {}
- name: environment_variable
  endpoint:
    path: /projects/{projectId}/environment/{environmentId}/variable/{variableId}
    method: POST
    data_selector: status
    params: {}
- name: routes
  endpoint:
    path: /projects/{projectId}/environment/{environmentId}/routes
    method: GET
    data_selector: status
    params: {}
- name: project_activity
  endpoint:
    path: /projects/{projectId}/activities
    method: GET
    data_selector: status
    params: {}
- name: invitations
  endpoint:
    path: /projects/{projectId}/invitations
    method: GET
    data_selector: status
    params: {}
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: status
    params: {}
- name: project_access
  endpoint:
    path: /projects/{projectId}/access
    method: GET
    data_selector: records
    params:
      user_id: required
- name: api_tokens
  endpoint:
    path: /users/{userId}/api_tokens
    method: GET
    data_selector: records
    params:
      user_id: required
- name: federated_login_connections
  endpoint:
    path: /users/{userId}/federated_login_connections
    method: GET
    data_selector: records
    params:
      user_id: required
- name: team
  endpoint:
    path: /projects/{projectId}/team
    method: POST
    data_selector: status
- name: user_access
  endpoint:
    path: /projects/{projectId}/user_access
    method: GET
    data_selector: status
- name: user_profiles
  endpoint:
    path: /user_profiles
    method: GET
    data_selector: profiles
- name: user_profile
  endpoint:
    path: /user_profiles/{userId}
    method: GET
    data_selector: profile
- name: update_user_profile
  endpoint:
    path: /user_profiles/{userId}
    method: PUT
    data_selector: profile
- name: reset_email
  endpoint:
    path: /user_profiles/{userId}/reset_email
    method: POST
    data_selector: status
- name: reset_password
  endpoint:
    path: /user_profiles/{userId}/reset_password
    method: POST
    data_selector: status
- name: get_ssh_key
  endpoint:
    path: /ssh_keys/{key_id}
    method: GET
    data_selector: ssh_key
- name: delete_ssh_key
  endpoint:
    path: /ssh_keys/{key_id}
    method: DELETE
    data_selector: status
- name: list_plans
  endpoint:
    path: /plans
    method: GET
    data_selector: plans
- name: estimate_spend
  endpoint:
    path: /organizations/{organization_id}/estimate_spend
    method: GET
    data_selector: spend_estimate
- name: project_access
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
- name: api_tokens
  endpoint:
    path: /users/{user_id}/api_tokens
    method: GET
- name: federated_login_connections
  endpoint:
    path: /users/{user_id}/federated_login_connections
    method: GET
- name: mfa_enrollment
  endpoint:
    path: /users/{user_id}/mfa_enrollment
    method: GET
- name: current_user
  endpoint:
    path: /users/current
    method: GET
- name: subscriptions
  endpoint:
    path: /projects/{projectId}/subscriptions
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /projects/{projectId}/orders
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /projects/{projectId}/invoices
    method: GET
    data_selector: records
    params: {}
- name: discounts
  endpoint:
    path: /projects/{projectId}/discounts
    method: GET
    data_selector: records
    params: {}
- name: vouchers
  endpoint:
    path: /projects/{projectId}/vouchers
    method: GET
    data_selector: records
    params: {}
- name: plan_records
  endpoint:
    path: /projects/{projectId}/plan_records
    method: GET
    data_selector: records
    params: {}
- name: usage_records
  endpoint:
    path: /projects/{projectId}/usage_records
    method: GET
    data_selector: records
    params: {}
- name: address
  endpoint:
    path: /projects/{projectId}/address
    method: GET
    data_selector: records
    params: {}
- name: profile
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: referenced_users
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: referenced_teams
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: referenced_organizations
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: referenced_projects
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: referenced_regions
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: project_settings
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: deployment_target
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: update_user
  endpoint:
    path: /update_user/{user_id}
    method: POST
    data_selector: status
- name: reset_email
  endpoint:
    path: /reset_email/{user_id}
    method: POST
    data_selector: status
- name: reset_password
  endpoint:
    path: /reset_password/{user_id}
    method: POST
    data_selector: status
- name: list_user_profiles
  endpoint:
    path: /list_user_profiles
    method: GET
    data_selector: status
- name: get_user_profile
  endpoint:
    path: /get_user_profile/{userId}
    method: GET
    data_selector: status
- name: update_user_profile
  endpoint:
    path: /update_user_profile/{userId}
    method: POST
    data_selector: status
- name: get_user_address
  endpoint:
    path: /get_user_address/{userId}
    method: GET
    data_selector: status
- name: update_user_address
  endpoint:
    path: /update_user_address/{userId}
    method: POST
    data_selector: status
- name: create_user_profile_picture
  endpoint:
    path: /create_user_profile_picture/{uuid}
    method: POST
    data_selector: status
- name: delete_user_profile_picture
  endpoint:
    path: /delete_user_profile_picture/{uuid}
    method: DELETE
    data_selector: status
- name: get_ssh_key
  endpoint:
    path: /get_ssh_key/{key_id}
    method: GET
    data_selector: status
- name: delete_ssh_key
  endpoint:
    path: /delete_ssh_key/{key_id}
    method: DELETE
    data_selector: status
- name: add_ssh_key
  endpoint:
    path: /add_ssh_key
    method: POST
    data_selector: status
- name: list_available_plans
  endpoint:
    path: /list_available_plans
    method: GET
    data_selector: status
- name: estimate_total_spend
  endpoint:
    path: /estimate_total_spend/{organization_id}
    method: GET
    data_selector: status
- name: get_billing_alert_configuration
  endpoint:
    path: /get_billing_alert_configuration/{organization_id}
    method: GET
    data_selector: status
- name: update_billing_alert_configuration
  endpoint:
    path: /update_billing_alert_configuration/{organization_id}
    method: POST
    data_selector: status
- name: get_organization_prepayment_information
  endpoint:
    path: /get_organization_prepayment_information/{organization_id}
    method: GET
    data_selector: status
- name: list_organization_prepayment_transactions
  endpoint:
    path: /list_organization_prepayment_transactions/{organization_id}
    method: GET
    data_selector: status
- name: check_user_project_update
  endpoint:
    path: /check_user_project_update/{subscriptionId}
    method: GET
    data_selector: status
- name: estimate_new_subscription_price
  endpoint:
    path: /estimate_new_subscription_price/{organization_id}
    method: GET
    data_selector: status
- name: check_user_project_creation
  endpoint:
    path: /check_user_project_creation/{organization_id}
    method: GET
    data_selector: status
- name: estimate_subscription_price
  endpoint:
    path: /estimate_subscription_price/{organization_id}/{subscription_id}
    method: GET
    data_selector: status
- name: get_current_usage
  endpoint:
    path: /get_current_usage/{organization_id}/{subscription_id}
    method: GET
    data_selector: status
- name: list_addons
  endpoint:
    path: /list_addons/{organization_id}/{subscription_id}
    method: GET
    data_selector: status
- name: get_usage_alerts
  endpoint:
    path: /get_usage_alerts/{organization_id}/{subscription_id}
    method: GET
    data_selector: status
- name: update_usage_alerts
  endpoint:
    path: /update_usage_alerts/{organization_id}/{subscription_id}
    method: POST
    data_selector: status
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: activity
  endpoint:
    path: /activities
    method: GET
    data_selector: activities
- name: list_subscriptions
  endpoint:
    path: /projects/{projectId}/subscriptions
    method: GET
    data_selector: subscriptions
- name: create_subscription
  endpoint:
    path: /projects/{projectId}/subscriptions
    method: POST
    data_selector: subscription
- name: get_subscription
  endpoint:
    path: /projects/{projectId}/subscriptions/{subscription_id}
    method: GET
    data_selector: subscription
- name: update_subscription
  endpoint:
    path: /projects/{projectId}/subscriptions/{subscription_id}
    method: PUT
    data_selector: subscription
- name: delete_subscription
  endpoint:
    path: /projects/{projectId}/subscriptions/{subscription_id}
    method: DELETE
    data_selector: status
- name: list_orders
  endpoint:
    path: /projects/{projectId}/orders
    method: GET
    data_selector: orders
- name: get_order
  endpoint:
    path: /projects/{projectId}/orders/{order_id}
    method: GET
    data_selector: order
- name: list_invoices
  endpoint:
    path: /projects/{projectId}/invoices
    method: GET
    data_selector: invoices
- name: get_invoice
  endpoint:
    path: /projects/{projectId}/invoices/{invoice_id}
    method: GET
    data_selector: invoice
- name: certificate
  endpoint:
    path: /certificates
    method: GET
    data_selector: certificates
- name: commit
  endpoint:
    path: /commits
    method: GET
    data_selector: commits
- name: db
  endpoint:
    path: /db
    method: GET
    data_selector: databases
- name: domain
  endpoint:
    path: /domains
    method: GET
    data_selector: domains
- name: profile
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: referenced_users
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: referenced_teams
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: referenced_organizations
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: referenced_projects
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: referenced_regions
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: project_settings
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: deployment_target
  endpoint:
    path: /projects/{projectId}/system/restart
    method: POST
    data_selector: status
- name: domain:update
  endpoint:
    path: /domain:update
    method: POST
- name: environment:activate
  endpoint:
    path: /environment:activate
    method: POST
- name: environment:branch
  endpoint:
    path: /environment:branch
    method: POST
- name: environment:checkout
  endpoint:
    path: /environment:checkout
    method: POST
- name: environment:delete
  endpoint:
    path: /environment:delete
    method: POST
- name: environment:deploy
  endpoint:
    path: /environment:deploy
    method: POST
- name: environment:deploy:type
  endpoint:
    path: /environment:deploy:type
    method: POST
- name: environment:http-access
  endpoint:
    path: /environment:http-access
    method: POST
- name: environment:scp
  endpoint:
    path: /environment/scp
    method: GET
- name: environment:ssh
  endpoint:
    path: /environment/ssh
    method: GET
- name: environment:synchronize
  endpoint:
    path: /environment/synchronize
    method: GET
- name: environment:url
  endpoint:
    path: /environment/url
    method: GET
- name: environment:xdebug
  endpoint:
    path: /environment/xdebug
    method: GET
- name: integration:activity:get
  endpoint:
    path: /integration/activity/get
    method: GET
- name: integration:activity:list
  endpoint:
    path: /integration/activity/list
    method: GET
- name: integration:activity:log
  endpoint:
    path: /integration/activity/log
    method: GET
- name: integration
  endpoint:
    path: /integration
    method: POST
- name: project:get
  endpoint:
    path: /project:get
    method: GET
- name: project:info
  endpoint:
    path: /project:info
    method: GET
- name: project:init
  endpoint:
    path: /project:init
    method: POST
- name: project:list
  endpoint:
    path: /project:list
    method: GET
- name: project:set-remote
  endpoint:
    path: /project:set-remote
    method: POST
- name: repo:cat
  endpoint:
    path: /repo:cat
    method: GET
- name: repo:ls
  endpoint:
    path: /repo:ls
    method: GET
- name: repo:read
  endpoint:
    path: /repo:read
    method: GET
- name: resources:build:get
  endpoint:
    path: /resources:build:get
    method: GET
- name: route:get
  endpoint:
    path: /route:get
    method: GET
- name: route:list
  endpoint:
    path: /route:list
    method: GET
- name: activity
  endpoint:
    path: /activity
    method: GET
    data_selector: activity
    params: {}
- name: app
  endpoint:
    path: /app
    method: GET
    data_selector: app
    params: {}
- name: auth
  endpoint:
    path: /auth
    method: GET
    data_selector: auth
    params: {}
- name: autoscaling
  endpoint:
    path: /autoscaling
    method: GET
    data_selector: autoscaling
    params: {}
- name: backup
  endpoint:
    path: /backup
    method: GET
    data_selector: backup
    params: {}
- name: certificate
  endpoint:
    path: /certificate
    method: GET
    data_selector: certificate
    params: {}
- name: commit
  endpoint:
    path: /commit
    method: GET
    data_selector: commit
    params: {}
- name: db
  endpoint:
    path: /db
    method: GET
    data_selector: db
    params: {}
- name: domain
  endpoint:
    path: /domain
    method: GET
    data_selector: domain
    params: {}
- name: environment
  endpoint:
    path: /environment
    method: GET
    data_selector: environment
    params: {}
- name: integration
  endpoint:
    path: /integration
    method: GET
    data_selector: integration
    params: {}
- name: local
  endpoint:
    path: /local
    method: GET
    data_selector: local
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: mount
  endpoint:
    path: /mount
    method: GET
    data_selector: mount
    params: {}
- name: operation
  endpoint:
    path: /operation
    method: GET
    data_selector: operation
    params: {}
- name: organization
  endpoint:
    path: /organization
    method: GET
    data_selector: organization
    params: {}
- name: project
  endpoint:
    path: /project
    method: GET
    data_selector: project
    params: {}
- name: repo
  endpoint:
    path: /repo
    method: GET
    data_selector: repo
    params: {}
- name: resources
  endpoint:
    path: /resources
    method: GET
    data_selector: resources
    params: {}
- name: route
  endpoint:
    path: /route
    method: GET
    data_selector: route
    params: {}
- name: service
  endpoint:
    path: /service
    method: GET
    data_selector: service
    params: {}
- name: source-operation
  endpoint:
    path: /source-operation
    method: GET
    data_selector: source-operation
    params: {}
- name: ssh-cert
  endpoint:
    path: /ssh-cert
    method: GET
    data_selector: ssh-cert
    params: {}
- name: ssh-key
  endpoint:
    path: /ssh-key
    method: GET
    data_selector: ssh-key
    params: {}
- name: subscription
  endpoint:
    path: /subscription
    method: GET
    data_selector: subscription
    params: {}
- name: team
  endpoint:
    path: /team
    method: GET
    data_selector: team
    params: {}
- name: tunnel
  endpoint:
    path: /tunnel
    method: GET
    data_selector: tunnel
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: user
    params: {}
- name: variable
  endpoint:
    path: /variable
    method: GET
    data_selector: variable
    params: {}
- name: worker
  endpoint:
    path: /worker
    method: GET
    data_selector: worker
    params: {}
- name: service:list
  endpoint:
    path: /service:list
    method: GET
- name: service:mongo:dump
  endpoint:
    path: /service:mongo:dump
    method: GET
- name: service:mongo:export
  endpoint:
    path: /service:mongo:export
    method: GET
- name: service:mongo:restore
  endpoint:
    path: /service:mongo:restore
    method: GET
- name: service:mongo:shell
  endpoint:
    path: /service:mongo:shell
    method: GET
- name: service:redis-cli
  endpoint:
    path: /service:redis-cli
    method: GET
- name: service:valkey-cli
  endpoint:
    path: /service:valkey-cli
    method: GET
- name: source-operation:list
  endpoint:
    path: /source-operation:list
    method: GET
- name: source-operation:run
  endpoint:
    path: /source-operation:run
    method: GET
- name: ssh-cert:load
  endpoint:
    path: /ssh-cert:load
    method: GET
- name: ssh-key:add
  endpoint:
    path: /ssh-key:add
    method: GET
- name: certificate_list
  endpoint:
    path: /certificates
    method: GET
    data_selector: certificates
- name: commit_list
  endpoint:
    path: /commits
    method: GET
    data_selector: commits
- name: db_dump
  endpoint:
    path: /db/dump
    method: POST
    data_selector: dump
- name: db_sql
  endpoint:
    path: /db/sql
    method: POST
    data_selector: sql
- name: domain_add
  endpoint:
    path: /domain/add
    method: POST
    data_selector: add
- name: domain_delete
  endpoint:
    path: /domain/delete
    method: DELETE
    data_selector: delete
- name: domain_get
  endpoint:
    path: /domain/get
    method: GET
    data_selector: domain
- name: domain_list
  endpoint:
    path: /domains
    method: GET
    data_selector: domains
- name: team_user_add
  endpoint:
    path: team:user:add
    method: POST
- name: team_user_delete
  endpoint:
    path: team:user:delete
    method: DELETE
- name: team_user_list
  endpoint:
    path: team:users
    method: GET
- name: tunnel_open
  endpoint:
    path: tunnel:open
    method: POST
- name: tunnel_close
  endpoint:
    path: tunnel:close
    method: POST
- name: tunnel_info
  endpoint:
    path: tunnel:info
    method: GET
- name: tunnel_list
  endpoint:
    path: tunnels
    method: GET
- name: tunnel_single
  endpoint:
    path: tunnel:single
    method: POST
- name: environment:scp
  endpoint:
    path: /environment/scp
    method: POST
    data_selector: files
    params: {}
- name: environment:ssh
  endpoint:
    path: /environment/ssh
    method: POST
    data_selector: cmd
    params: {}
- name: environment:synchronize
  endpoint:
    path: /environment/synchronize
    method: POST
    data_selector: synchronize
    params: {}
- name: environment:url
  endpoint:
    path: /environment/url
    method: GET
    data_selector: urls
    params: {}
- name: environment:xdebug
  endpoint:
    path: /environment/xdebug
    method: POST
    data_selector: port
    params: {}
- name: integration:activity:get
  endpoint:
    path: /integration/activity/get
    method: GET
    data_selector: activity
    params: {}
- name: integration:activity:list
  endpoint:
    path: /integration/activities
    method: GET
    data_selector: activities
    params: {}
- name: integration:activity:log
  endpoint:
    path: /integration/activity/log
    method: GET
    data_selector: log
    params: {}
- name: organization_info
  endpoint:
    path: /organization:info
    method: GET
- name: organization_list
  endpoint:
    path: /organization:list
    method: GET
- name: organization_subscription_list
  endpoint:
    path: /organization:subscription:list
    method: GET
- name: organization_user_add
  endpoint:
    path: /organization:user:add
    method: POST
- name: organization_user_delete
  endpoint:
    path: /organization:user:delete
    method: DELETE
- name: organization_user_get
  endpoint:
    path: /organization:user:get
    method: GET
- name: organization_user_list
  endpoint:
    path: /organization:user:list
    method: GET
- name: organization_user_projects
  endpoint:
    path: /organization:user:projects
    method: GET
- name: organization_user_update
  endpoint:
    path: /organization:user:update
    method: PUT
- name: project_clear_build_cache
  endpoint:
    path: /project:clear-build-cache
    method: POST
- name: project_create
  endpoint:
    path: /project:create
    method: POST
- name: project_delete
  endpoint:
    path: /project:delete
    method: DELETE
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: teams
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: service:list
  endpoint:
    path: /services
    method: GET
- name: service:mongo:dump
  endpoint:
    path: /service/mongo/dump
    method: GET
- name: service:mongo:export
  endpoint:
    path: /service/mongo/export
    method: GET
- name: service:mongo:restore
  endpoint:
    path: /service/mongo/restore
    method: POST
- name: service:mongo:shell
  endpoint:
    path: /service/mongo/shell
    method: GET
- name: service:redis-cli
  endpoint:
    path: /service/redis-cli
    method: GET
- name: service:valkey-cli
  endpoint:
    path: /service/valkey-cli
    method: GET
- name: source-operation:list
  endpoint:
    path: /source-ops
    method: GET
- name: source-operation:run
  endpoint:
    path: /source-operation/run
    method: POST
- name: ssh-cert:load
  endpoint:
    path: /ssh-cert/load
    method: POST
- name: ssh-key:add
  endpoint:
    path: /ssh-key/add
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: ssh-key:add
  endpoint:
    path: /ssh-key/add
    method: POST
- name: ssh-key:delete
  endpoint:
    path: /ssh-key/delete
    method: DELETE
- name: ssh-key:list
  endpoint:
    path: /ssh-keys
    method: GET
- name: subscription:info
  endpoint:
    path: /subscription/info
    method: GET
- name: team:create
  endpoint:
    path: /team/create
    method: POST
- name: team:delete
  endpoint:
    path: /team/delete
    method: DELETE
- name: team:get
  endpoint:
    path: /team/get
    method: GET
- name: team:list
  endpoint:
    path: /teams
    method: GET
- name: team:project:add
  endpoint:
    path: /team/project/add
    method: POST
- name: team:project:delete
  endpoint:
    path: /team/project/delete
    method: DELETE
- name: team:project:list
  endpoint:
    path: /team/projects
    method: GET
- name: team:update
  endpoint:
    path: /team/update
    method: PUT
- name: team:user:add
  endpoint:
    path: /team/user/add
    method: POST
    data_selector: user
    params:
      org: ORG
      team: TEAM
- name: team:user:delete
  endpoint:
    path: /team/user/delete
    method: DELETE
    data_selector: user
    params:
      org: ORG
      team: TEAM
- name: team:user:list
  endpoint:
    path: /team/users
    method: GET
    data_selector: users
    params:
      count: COUNT
      org: ORG
      team: TEAM
      date-fmt: DATE-FMT
      format: FORMAT
      columns: COLUMNS
- name: tunnel:close
  endpoint:
    path: /tunnel/close
    method: POST
    data_selector: tunnel
    params:
      all: 'true'
      project: PROJECT
      environment: ENVIRONMENT
      app: APP
- name: tunnel:list
  endpoint:
    path: /tunnels
    method: GET
    data_selector: tunnels
    params:
      all: 'true'
      project: PROJECT
      environment: ENVIRONMENT
      app: APP
      format: FORMAT
      columns: COLUMNS
- name: tunnel:open
  endpoint:
    path: /tunnel/open
    method: POST
    data_selector: tunnel
    params:
      gateway-ports: 'true'
      project: PROJECT
      environment: ENVIRONMENT
      app: APP
- name: tunnel:single
  endpoint:
    path: /tunnel/single
    method: POST
    data_selector: tunnel
    params:
      port: PORT
      gateway-ports: 'true'
      project: PROJECT
      environment: ENVIRONMENT
      app: APP
      relationship: RELATIONSHIP
- name: organization
  endpoint:
    path: /organization
    method: GET
    data_selector: records
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: teams
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: project_access
  endpoint:
    path: /manage/project/access
    method: GET
    data_selector: roles
    params: {}
- name: organization_access
  endpoint:
    path: /manage/organization/access
    method: GET
    data_selector: permissions
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: activity
  endpoint:
    path: /activities
    method: GET
    data_selector: activities
- name: parameters
  endpoint:
    path: /activities/ypalrypnezbye
    method: GET
    data_selector: parameters
    params: {}
- name: Cluster infrastructure
  endpoint:
    path: /cluster/infrastructure
    method: GET
- name: Split architecture
  endpoint:
    path: /split/architecture
    method: GET
- name: Deployment
  endpoint:
    path: /deployment
    method: GET
- name: activity
  endpoint:
    path: /projects/{project_id}/activities
    method: GET
    data_selector: activities
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: activity
  endpoint:
    path: /activity
    method: GET
    data_selector: activities
    params: {}
- name: cron_job
  endpoint:
    path: /api/projects/abcdefgh1234567/activities/ypalrypnezbye
    method: GET
    data_selector: parameters
    params: {}
- name: activity
  endpoint:
    path: /projects/{project_id}/activities/{activity_id}
    method: GET
    data_selector: payload
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- The activity contains all the job’s information.
- Cron job configured to run every five minutes.
- Requires setup of connected app in platform.sh
- Platform.sh is now Upsun.
- Ensure your app listens on the right socket
- For comfortable development and testing, start with a separate branch for development.
- To develop without affecting production, you need a separate environment.
- Differences such as this allow you to have different builds in different environments.
- Monitor infrastructure metrics such as CPU, RAM, and disk usage.
- Health notifications automatically sent to all project admins.
- Webhooks enable monitoring of events as they happen.
- Health notifications tell you when something in your project needs attention.
- The only notification is a low-disk warning when your project is running out of
  disk space.
- The build is independent of the given environment and preview environments are perfect
  copies of production.
- You can’t connect to services (like databases) during the build step.
- Upsun Fixed values consistency over availability, acknowledging that it’s nearly
  impossible to have both.
- Note that once you submit the ticket, you can’t modify or delete the submission.
- It’s best not to run source operations on your production environment, but rather
  on a dedicated environment where you can test changes.
- Viewer users can SSH into the worker application and connect to the database with
  read-only permissions.
- viewer users can SSH in to the worker application, and connect to your database
  with read-only permissions.
- Uses OAuth2 with refresh token — requires setup of connected app in Upsun
- Some objects may return nulls in deeply nested fields
- Uses HTTP caching configurable via router instance
- Compatible with most commercial CDNs
- Environment variables can contain critical information such as tokens or additional
  configuration options for your app.
- Upsun Fixed does not currently support Git Large File Storage.
- There is a 100MB default file size limit for direct Git pushes to Upsun Fixed.
- This guide is written for Django 4, but should apply almost exactly the same for
  other versions.
- To automate the pruning process, enable the prune-branches option when setting up
  a source integration.
- The fetch-branches option must be enabled to use the prune-branches option.
- Edit the value of $es_server_name to match the machine name of your cluster in Drupal.
- Define an Elasticsearch 'Cluster' at admin/config/search/elasticsearch-connector
- Edit the value of $relationship_name if using a different relationship
- Edit the value of $es_server_name to match the machine name of your cluster in Drupal
- If you don’t already have the Config Reader library installed and referenced at
  the top of the file, you need to install it with composer require platformsh/config-reader
  and then add the following code before the block below.
- Update the value of $relationship_name if you are using a different relationship.
- The Drupal Memcache module must be enabled before it’s configured in the settings.platformsh.php
  file.
- The example below is intended as a 'most common case' and has been tested with version
  8.x-2.3 of the Memcache module.
- Changing the name of the service replaces it with a brand new service and all existing
  data is lost.
- The Memcache module must be enabled before it’s configured in the settings.platformsh.php
  file.
- Consider using Memcache for locking as well as configuring cache stampede protection.
- Edit the value of $relationship_name if you are using a different relationship.
- By default, Redis is an ephemeral service. This means that the Redis storage isn’t
  persistent and that data can be lost when a container is moved, shut down or when
  the service hits its memory limit.
- Upsun Fixed recommends that you change the service type to persistent Redis.
- By default, Redis is an ephemeral service.
- To solve this, Upsun Fixed recommends that you change the service type to persistent
  Redis.
- Upsun Fixed recommends using Redis for caching with Drupal over Memcached.
- If you don’t already have the Config Reader library installed and referenced at
  the top of the file, you need to install it with `composer require platformsh/config-reader`.
- Enable Redis caching.
- You can customize your configuration further using the inline comments from this
  example configuration.
- Note that changing the name of the service replaces it with a brand new service
  and all existing data is lost.
- Back up your data before changing the service.
- Review the README.txt file that comes with the Memcache module for more information
  on possible configuration options.
- You need to commit and deploy your code before continuing, then enable the module.
- If you don’t already have the Config Reader library installed and referenced at
  the top of the file, you need to install it with composer require platformsh/config-reader.
- By default, Valkey is an ephemeral service. This means that the Valkey storage isn’t
  persistent and that data can be lost when a container is moved, shut down or when
  the service hits its memory limit.
- Upsun Fixed recommends that you change the service type to persistent Valkey (valkey-persistent).
- By default, Valkey is an ephemeral service.
- To solve this, Upsun Fixed recommends that you change the service type to persistent
  Valkey (valkey-persistent).
- To solve this, Upsun Fixed recommends that you change the service type to persistent
  Valkey.
- To solve this, Upsun Fixed recommends that you change the service type to persistent
  Redis (`redis-persistent`).
- For more information on possible configuration options, see the README.txt file
  delivered with the Valkey module or the official Valkey documentation.
- SimpleSAMLphp is a library for authenticating a PHP-based application against a
  SAML server, such as Shibboleth.
- Drupal has modules available to authenticate using SimpleSAML some additional setup
  is required.
- To solve this, Upsun Fixed recommends that you change the service type to persistent
  Valkey (`valkey-persistent`).
- API requests are rate-limited.
- Some endpoints may require specific permissions.
- Varnish must be disabled to use Fastly.
- Uses SimpleSAML for authentication in Drupal
- Some setup required for Drupal modules
- Requires setup of connected app in Upsun Fixed
- The best way to provide the Fastly credentials and configuration to Ibexa DXP on
  Upsun Fixed is via environment variables.
- As each hook is executed as a single script, a hook is considered as failed only
  if the final command fails.
- Workers off-load processing in the background to make an app as fast as possible.
- The symfony binary is available when you use the Symfony integration in your Upsun
  Fixed app configuration.
- only run for the production environment, aka main branch
- Workers can off-load processing in the background to make an app as fast as possible.
- Never use this method on the main environment as changes made on your local machine
  will impact production data.
- Blackfire works seamlessly with any app built with Symfony.
- During the build hook, services are not available to avoid breaking the application
  that is still live.
- The environment variables are available in the deploy hook.
- If you log deprecations, make sure you **also** log them on stderr.
- Uses Composer for managing dependencies
- Themes and plugins are treated as PHP dependencies
- TYPO3 is an Open Source Enterprise PHP-based CMS framework.
- The recommended way to deploy TYPO3 on Upsun Fixed is by using Composer.
- Add the Redis service in .platform/services.yaml
- Expose the Redis service in .platform.app.yaml
- You can sign up with an email address or an existing GitHub, Bitbucket, or Google
  account.
- The Upsun Fixed Git repository becomes a read-only mirror of the third-party repository.
- Requires setup of Redis service named 'rediscache' with type 'redis:6.0'.
- This code has no impact when run on a local development environment.
- Using Composer isn’t traditionally the norm for WordPress development, but it is
  strongly recommended when deploying on Upsun Fixed.
- Projects are limited to three preview environments (active and deployed branches
  or pull requests).
- Add the Redis extension for PHP in your app configuration or using a builder script.
- Each plugin requires slightly different configuration.
- Multi-application projects generally require more resources to run on Upsun Fixed.
- Connection credentials for Elasticsearch are exposed to the application container
  through the PLATFORM_RELATIONSHIPS environment variable.
- Connection credentials for services are exposed to the application container through
  the PLATFORM_RELATIONSHIPS environment variable from the deploy hook onward.
- Custom environment variables can be defined programmatically in a .environment file.
- Connection credentials for Redis are exposed to the application container through
  the PLATFORM_RELATIONSHIPS environment variable.
- This guide only covers the addition of a service configuration to an existing Micronaut
  project already configured to deploy on Upsun Fixed.
- Uses MongoDB with a valid supported version.
- This guide only covers the addition of a service configuration to an existing Quarkus
  project already configured to deploy on Upsun Fixed.
- This guide only covers the addition of a MongoDB service configuration to an existing
  Quarkus project already configured to deploy on Upsun Fixed.
- Environment variables names are following the conversion rules of Eclipse MicroProfile.
- Connection credentials for Redis are exposed to the application container through
  the PLATFORM_RELATIONSHIPS environment variable from the deploy hook onward.
- Uses OAuth2 with refresh token — requires setup of connected app in mongodb
- This guide only covers the addition of a MongoDB service configuration to an existing
  Spring project already configured to deploy on Upsun Fixed.
- Uses OAuth2 with refresh token.
- This guide only covers the addition of a service configuration to an existing Spring
  project.
- For each app container, only one cron job can run at a time.
- Crons are paused while activities such as backups are running.
- You need to either increase your plan’s storage or decrease the `disk` values you’ve
  assigned.
- Backups from before the downsize are incompatible and can no longer be used.
- Mounts aren’t available during the build.
- When you remove a `local` mount from your `.platform.app.yaml` file, the mounted
  directory isn’t deleted.
- Never “background” a start process using `&`. That's interpreted as the command
  terminating.
- Be aware that many services are behind a content delivery network (CDN).
- Using domains in your rules rather than IP addresses is generally more specific
  and secure.
- Only run for the production environment, aka main branch
- To minimize unnecessary resource use, crons on environments with no deployments
  are paused.
- If a new job is triggered while another is running, the new job is paused until
  the other completes.
- To minimize conflicts, a random offset is applied to all triggers.
- Crons are also paused while activities such as backups are running.
- The crons are queued to run after the other activity finishes.
- The average memory consumed per request in MB is 45.
- The amount of memory reserved in MB is 70.
- PHP package names on NixOS always respect the <PHP><VERSION>Extensions.<EXTENSION-NAME>
  format.
- The Upsun Fixed composable image is currently available in Beta.
- While technically available during the build phase, `nix` commands aren’t supported
  at runtime as the image becomes read-only.
- The pre_start feature is not blocking, which means the deploy hook may start running
  before the pre_start command finishes.
- The post_start feature is experimental and may change.
- Never background a start process using &.
- On all containers other than PHP, the value for start should be treated as required.
- For PHP containers, it's optional and defaults to starting PHP-FPM.
- The Upsun Fixed composable image is currently available in Beta. This feature as
  well as its documentation is subject to change.
- Containers in preview environments don’t follow the size specification.
- Service containers in preview environments are always set to size S.
- You can decrease the size of an existing disk for an app.
- The downsize fails if there’s more data on the disk than the desired size.
- When you back up an environment, the mounts on that environment are backed up too.
- If you want to set up customized cron schedules depending on the environment type,
  define conditional crons.
- Best not to run source operations on production environments.
- The `pre_start` feature is not blocking, which means the `deploy` hook may start
  running before the `pre_start` command finishes.
- Never “background” a start process using `&`. That’s interpreted as the command
  terminating and the supervisor process starts a second copy, creating an infinite
  loop until the container crashes.
- On all containers other than PHP, the value for `start` should be treated as required.
- For PHP containers, it’s optional and defaults to starting PHP-FPM (`/usr/bin/start-php-app`).
- Cron jobs run only on the `web` instance.
- You can use runtime operations if you have a Grid environment.
- Only allow static image files in this location
- Do not execute PHP scripts from this location and do not deliver their source code
- Static site generators are a popular way to create fast sites.
- Files to consider when serving a request for a directory.
- Runtime operations allow you to trigger one-off commands or scripts on your project.
- Try Upsun for 15 days
- No caching for static files.
- Dynamic pages use whatever cache headers are generated by the program.
- To allow cross origin requests, add a `Access-Control-Allow-Origin` header to responses.
- To set headers for static content, add them in your web configuration.
- Files to consider when serving a request for a directory include index.html.
- You can’t define circular relationships.
- All timezones default to UTC time.
- You can customize some of them, but in most cases, it’s best if you leave them in
  UTC and store user data with an associated timezone instead.
- This sets the X-Frame-Options header to SAMEORIGIN for all static files.
- 'If you use the wildcard value, the headers are modified for each request in the
  following ways: The value of the `Access-Control-Allow-Origin` header is set to
  the value of the `Origin` request header.'
- The storage is allocated among your services and applications using the disk parameter
  in their configuration files.
- The sum of all disk keys can’t exceed the available storage in your plan.
- Application images are restricted to 8 GB during build, no matter how much writable
  disk has been set aside for the deployed application.
- This page applies to Grid projects. To ensure you have enough resources to support
  multiple apps, you need at least a Medium plan.
- 'If you have a mount with the same name as a directory you’ve committed to Git or
  you create such a directory during the build, you get a message like the following:
  W: The mount ''/example'' has a path that overlaps with a non-empty folder. The
  content of the non-empty folder either comes from: - your git repository (you may
  have accidentally committed files). - or from the build hook. Please be aware that
  this content isn''t accessible at runtime.'
- To make the files available in the mount, move them away and then copy them into
  the mount.
- If you’ve set up mounts to handle files like user uploads, you want to make sure
  the files are accessible.
- Upsun Fixed ignores YAML keys that start with a dot. This causes a mount like '.myhiddenfolder'
  to be ignored.
- 'If you are worried about how much disk your mounts are using, check the size with
  the following command: platform mount:size.'
- The cron cmd syntax is now deprecated in favor of commands.
- Next.js app generates a static site, waiting for Drupal to be available.
- The build hook runs only when the app or its runtime have changed.
- Redeploys with no changes trigger only the post_deploy hook.
- You can customize some timezones, but in most cases, it’s best if you leave them
  in UTC and store user data with an associated timezone instead.
- Professional plans come with a default amount of storage that you can change with
  your plan.
- 'If you have a mount with the same name as a directory you’ve committed to Git or
  you create such a directory during the build, you get a message like the following:
  W: The mount ''/example'' has a path that overlaps with a non-empty folder. The
  content of the non-empty folder either comes from your git repository (you may have
  accidentally committed files) or from the build hook. Please be aware that this
  content isn''t accessible at runtime. The only files that are available are those
  in your mount.'
- If you’ve set up mounts to handle files like user uploads, you want to make sure
  the files are accessible. Do so by managing their location.
- 'If you are worried about how much disk your mounts are using, check the size with
  the following command: platform mount:size'
- For security reasons, you can’t access services directly through HTTP.
- Use the environment variable PLATFORM_RELATIONSHIPS rather than hard coding the
  values.
- The name of this app, which must be unique within the project.
- Elasticsearch is a distributed RESTful search engine built for the cloud.
- Requires two running Elasticsearch servers temporarily, each of which consumes resources
  and needs adequate disk space.
- The name of the service container must be unique within a project.
- By default, Elasticsearch has no authentication.
- Starting with Elasticsearch 7.2 you may optionally enable HTTP Basic authentication.
- Workers are instances of your code that aren’t open to connections from other apps
  or services or the outside world.
- If a worker instance needs to be updated during a new deployment, a SIGTERM signal
  is first sent to the worker process.
- The information about the relationship can change when an app is redeployed or restarted
  or the relationship is changed.
- The service type is elasticsearch-enterprise for premium versions.
- Puppeteer requires at least Node.js version 6.4.0, while using the async and await
  examples below requires Node 7.6.0 or greater.
- This approach has the benefit of never being without a working Elasticsearch instance.
- On the downside, it requires two running Elasticsearch servers temporarily, each
  of which consumes resources and needs adequate disk space.
- Headless Chrome is a headless browser that can be configured on projects like any
  other service on Upsun Fixed.
- Puppeteer allows your application to create screenshots, emulate a mobile device,
  generate PDFs, and much more.
- Elasticsearch versions 7.11 or later are no longer included in any Upsun Fixed plan.
- 'The following premium versions are supported: 8.5, 7.17'
- A file very similar to this is generated automatically for your when using the `platform
  ify` command to migrate a codebase to Upsun Fixed.
- Puppeteer requires at least Node.js version 6.4.0
- Uses Kafka for streaming data.
- Kafka service requires proper setup to connect and authenticate.
- Configure your service with at least 256 MB in disk space.
- InfluxDB version 2.7 supports high-write-volume use cases.
- Ensure to manage tokens securely as they provide access to the database.
- Access credentials are available through the PLATFORM_RELATIONSHIPS environment
  variable.
- New admin password and API token are generated during the upgrade.
- The service types `mariadb` and `mysql` both refer to MariaDB.
- The service type `oracle-mysql` refers to MySQL as released by Oracle, Inc.
- It's best to use the InnoDB storage engine wherever possible.
- Changing the service type may result in data loss.
- Uses OAuth2 for authentication.
- The service types mariadb and mysql both refer to MariaDB.
- The service type oracle-mysql refers to MySQL as released by Oracle, Inc.
- Changing the service type, especially when done repeatedly, may result in data loss.
- Backing up your data is therefore crucial.
- Uses pymysql to connect to the database
- Your main database lives on one of the three nodes provided on Grid HA.
- MyISAM is only properly supported in non-Dedicated environments.
- You must delete binary logs manually when replication is disabled.
- The SSH tunnel is interrupted every time the environment redeploys.
- It’s best to use the InnoDB storage engine wherever possible.
- Errors such as 'PDO Exception 'MySQL server has gone away' are usually the result
  of exhausting your available disk space.
- Make sure that locks are acquired in a pre-defined order and released as soon as
  possible.
- The service types 'mariadb' and 'mysql' both refer to MariaDB.
- The service type 'oracle-mysql' refers to MySQL as released by Oracle, Inc.
- Memcached is an in-memory object store well-suited for application level caching.
- Patch versions are applied periodically for bug fixes and the like.
- Changing the service type may result in data loss. Backing up your data is crucial.
- Create a NewRuntimeConfig object to ease reading the Upsun Fixed environment variables.
- The MemcacheD client is not Promise-aware, so make it so.
- Your apps should only rely on the PLATFORM_RELATIONSHIPS environment variable directly
  rather than hard coding any values.
- Both Memcached and Redis can be used for application caching.
- Information about the relationship can change when an app is redeployed or restarted
  or the relationship is changed.
- The name of the service container. Must be unique within a project.
- Removing a schema from the list of schemas on further deployments results in the
  deletion of the schema.
- Importing a database backup is a destructive operation.
- The 'database' relationship is generally the name of primary database of an application.
- It could be anything, though, as in the case here where it's called 'mongodb'.
- Make sure you first test your migration on a separate branch.
- Also, be sure to take a backup of your production environment before you merge this
  change.
- Downgrading isn’t supported.
- For SSH tunneling auto-restart setup, consult SSH documentation.
- This information applies to DG3 and Professional/Grid Upsun Fixed projects.
- For DG2 projects, contact Support to configure the max_connections property.
- Writing to network mounts is slightly slower than to local mounts.
- It isn’t possible to upgrade or downgrade the network storage service version while
  keeping existing data in place.
- Changing the service version requires that the service be reinitialized. Any change
  to the service version results in existing data becoming inaccessible.
- Errors may be caused by server timeouts.
- To increase max_connections, decrease max_allowed_packet or increase size.
- OpenSearch is a distributed RESTful search engine built for the cloud.
- See the latest versions of OpenSearch available at https://github.com/opensearch-project/OpenSearch/releases
- Connecting to Memcached server requires host and port from PLATFORM_RELATIONSHIPS.
- When you create an index on OpenSearch, don’t specify the `number_of_shards` or
  `number_of_replicas` settings in your OpenSearch API call.
- Ensure proper configuration of MongoDB connection settings.
- You can’t upgrade to PostgreSQL 12 with the `postgis` extension enabled.
- MongoDB updates its own data files to a new version automatically but can’t downgrade
  them.
- Be sure to take a backup of your production environment before you merge this change.
- You can’t upgrade to PostgreSQL 12 with the postgis extension enabled.
- Some objects like People may return nulls in deeply nested fields
- Importing a database backup is a destructive operation. It overwrites data already
  in your database.
- API requires authentication to access search service
- You can connect to RabbitMQ using an SSH tunnel or management UI.
- Upsun Fixed sets the maximum amount of memory (`maxmemory`) Redis can use for the
  data set, and it cannot be amended.
- Redis is a multi-model database that allows you to store data in memory for high-performance
  data retrieval and key-value storage.
- By default, Redis is an ephemeral service that stores data in memory.
- Persistent Redis stores data on a disk, restoring it if the container restarts.
- Ensure to read database passwords dynamically from PLATFORM_RELATIONSHIPS environment
  variable.
- No High-Availability on Dedicated Gen 2.
- Note that legacy definition of the relationship is still supported.
- Uses OAuth2 with refresh token — requires setup of connected app in RabbitMQ
- Redis 3.0 and above support up to 64 databases.
- By default, Valkey is an ephemeral service that stores data in memory.
- To prevent data from getting lost when a container is moved or shut down, you can
  use the persistent Valkey configuration.
- Requires credentials from relationship reference.
- Apache Solr is a scalable and fault-tolerant search index.
- Ephemeral Redis requires no disk space and serves as a non-persistent cache.
- To prevent data from getting lost when a container is moved or shut down, use persistent
  Redis.
- For security reasons, you can grant your app access to replicas instead of your
  actual database.
- For Solr 4, supports only a single core per server called collection1.
- Must provide your own Solr configuration via a core_config key in your .platform/services.yaml.
- The recommended maximum size for configuration directories (zipped) is 2MB. These
  need to be monitored to ensure they don’t grow beyond that. If the zipped configuration
  directories grow beyond this, performance declines and deploys become longer.
- Redis is an ephemeral service that stores data in memory.
- Cookies are necessary for the website to function and cannot be switched off in
  our systems.
- You can set up Redis as your session handler.
- Persistent Valkey stores data on a disk, restoring it if the container restarts.
- Changing the service name replaces it with a brand new service and all existing
  data is lost.
- To switch from persistent to ephemeral Valkey, set up a new service with a different
  name.
- 512 MB is the minimum required disk space for the Vault KMS service.
- Requires configuration of the Solr service
- A given token is valid for one year from its creation.
- It is required for some, as only defining an HTTPS config may trigger an automatic
  redirect to HTTP.
- SSI commands enable you to include files within other pages.
- You can use SSI to have caching and dynamic content in one.
- Caching is enabled by default but can be overridden.
- Responses with the Cache-Control header set to Private, No-Cache, or No-Store aren’t
  cached.
- Requires Solr service setup and API key for access.
- Caching is enabled by default, but is only applied to GET and HEAD requests.
- Cookies bypass the cache.
- 'The HTTP cache doesn’t support a complete cache flush, but you can invalidate the
  cache by setting cache: false.'
- The cache clears on a rebuild, so triggering a rebuild (pushing a new commit) effectively
  causes a complete cache flush.
- Regular expressions in routes are not supported.
- For Solr 4, Upsun Fixed supports only a single core per server called collection1.
- You must provide your own Solr configuration via a core_config key in your .platform/services.yaml.
- Set the Vary header to X-Forwarded-Proto to render content based on the request
  protocol (i.e. HTTP or HTTPS).
- 'Use Vary: Accept-Encoding to serve different content depending on the encoding.'
- For Solr 4, only a single core per server called collection1 is supported.
- For Solr 6 and later, multiple cores can be defined with separate endpoints.
- Uses TLS certificates provided by Let’s Encrypt, valid for 90 days and automatically
  renewed 28 days before expiration.
- HSTS forces clients to always communicate with your site over HTTPS.
- The recommended maximum size for configuration directories (zipped) is 2MB. These
  need to be monitored to ensure they don’t grow beyond that. If the zipped configuration
  directories grow beyond this, performance declines and deploys become longer. The
  directory archives are compressed and string encoded. You could use this bash pipeline
  inside the directory to get an idea of the archive size.
- Cache is disabled on proxy routes and cannot be enabled.
- If you do not allow these cookies then some or all of these services may not function
  properly.
- Upsun Fixed does not support redirects based on query strings.
- You can manage redirection rules on your Upsun Fixed projects in two different ways.
- Misconfigured VCL files can result in incorrect and confusing behavior that’s hard
  to debug.
- Upsun Fixed doesn’t help with VCL configuration options beyond the basic connection
  logic documented here.
- The maximum size of the routes document is 128 KB, which should fit around 300 different
  routes.
- Vault doesn’t store the data sent to the transit secrets engine.
- Serving static content via Nginx is recommended, as this allows you to control headers
  (including cache headers) and also has marginal performance benefits.
- Route all requests to the Go app, unconditionally.
- Java containers come with a version of Maven already installed.
- You can specify 'java:<VERSION_NUMBER>' to use Java.
- It could be anything, though, as in the case here here where it's called 'mongodb'.
- Caching is enabled by default, but only applied to GET and HEAD requests.
- Mixing cache services together most likely results in caches that are stale and
  can't be cleared.
- When the cache is expired (indicated by `Last-Modified` header in the response)
  the web server sends a request to your application with `If-Modified-Since` header.
- 'The HTTP cache doesn’t support a complete cache flush, but you can invalidate the
  cache by setting `cache: false`. Alternatively, the cache clears on a rebuild, so
  triggering a rebuild (pushing a new commit) effectively causes a complete cache
  flush.'
- A container application can’t be bigger than 8 GB of memory.
- Application instances have a limited amount of memory at build time, which has a
  maximum of 8 GB.
- Some applications use cookies to invalidate cache responses, but expect other cookies
  to be ignored.
- The JVM generally requires specifying a maximum memory size it is allowed to use,
  using the `Xmx` parameter.
- Set the `ExitOnOutOfMemoryError` option to exit on the first occurrence of an out-of-memory
  error.
- The default garbage collector for Java 8 is Parallel GC. In most cases G1 will offer
  better performance.
- Does not support redirects based on query strings.
- Managing redirection rules is a common requirement for web applications.
- If you’re using regexp in a redirect, you can’t also use prefix and append_suffix.
- Cookies are essential for the effective operation of our websites and improve your
  experience and our services.
- The information on this page applies to Grid plans.
- Java is a general-purpose programming language, and one of the most popular in the
  world today.
- To save space and reduce potential vulnerabilities, they don’t contain GUI classes,
  which can’t be used on the server.
- Xdebug runs only on your app containers.
- Only incoming requests that have an Xdebug cookie or query parameter set are forwarded
  to the debug PHP-FPM process.
- You should also set the `ExitOnOutOfMemoryError`.
- Make sure Composer has the necessary credentials to access the private repository.
- If the server is receiving more concurrent requests than it has PHP processes allocated,
  you encounter a message like 'server reached max_children setting'.
- If your PHP app can’t handle the amount of traffic or is slow, you encounter a message
  like 'execution timed out'.
- If your PHP process crashed with a segmentation fault, you encounter a message like
  'exited on signal 11 (SIGSEGV)'.
- If your PHP process is killed by the kernel, you encounter a message like 'exited
  on signal 9 (SIGKILL)'.
- If all PHP workers are busy, you encounter a message like 'Resource temporarily
  unavailable'.
- 'The following versions are deprecated: 3.7, 3.6, 3.5, 2.7.'
- 'To use Composer 2.x on your project, either use PHP 8.2+ or, in your app configuration,
  add the following dependency: dependencies: php: composer/composer: ''^2'''
- 'For enhanced security, when setting passthru to true, you might also want to add
  the following configuration: 1. Set scripts to false. 2. Set allow to false.'
- Uses OAuth2 with refresh token — requires setup of connected app in upsun
- Some objects like Team may return nulls in deeply nested fields
- This section is only relevant when using the Upsun Fixed composable image (BETA).
- The following table presents the possible modifications you can make to your PHP
  primary runtime using the stack key and composable image.
- Uses Python 3.13 as specified in the examples.
- Some built-in modules are always on.
- It’s possible to use an extension not listed here, but it takes slightly more work.
- Download the .so file for the extension as part of your build hook using curl or
  similar.
- Load the extension using an absolute path by customizing the PHP settings.
- You can now use composable image (BETA) to install runtimes and tools in your application
  container.
- You may need to use a specific version of Python that isn’t available in an app
  container for a different language.
- If you want this Python version to be available in the runtime environment, follow
  these steps.
- OPcache is only available on PHP 7.4+ and uses PHP-CGI.
- When you have disabled OPcache timestamp validation, you need to explicitly clear
  OPcache on deployment by restarting PHP-FPM.
- The minimum number of PHP-FPM workers is 2.
- The default request memory is set to 45 MB and the reserved memory is set to 70
  MB.
- The minimum value for the request_memory key is 10 MB and the minimum value for
  the reserved_memory key is 70 MB.
- If you have enabled the router cache, you need to explicitly add the Xdebug cookie
  (XDEBUG_SESSION) to the cookie allowlist.
- The Rust runtime is currently available in Beta.
- Requires setup of connected app in Upsun
- This template builds Drupal 10 using the 'Drupal Recommended' Composer project.
- 'You need to pass 2 parameters: Which Swoole project to use: `openswoole` or `swoole`,
  Which version to install'
- Authentication credentials are set using the env:COMPOSER_AUTH variable
- Ensure authentication credentials aren’t cached in your project’s build container
- If the server is receiving more concurrent requests than it has PHP processes allocated,
  consider raising the max_children setting.
- If your PHP app can’t handle the amount of traffic or is slow, adjust the max_execution_time
  value in php.ini.
- Supported versions include 3.8, 3.9, 3.10, 3.11, 3.12, 3.13.
- Lando used to support Upsun Fixed PHP projects out of the box through a plugin.
  However, this plugin is now deprecated.
- API keys and other such secrets should not be set as application variables.
- Variable availability depends on the type and configuration.
- Uses Python 3.13 for web applications.
- Examples vary based on both package manager and socket type.
- Rails runs by default on a preview environment.
- Only way to edit app’s code is through Git.
- The application directory is accessible via sftp.
- Uses Rust with Upsun Fixed
- The Rust runtime is currently available in Beta
- Upsun Fixed adds a number of HTTP headers to both inbound and outbound messages.
- These headers should be treated as a semi-private API.
- Drupal installer will skip asking for database credentials as they are already provided.
- Emails aren’t guaranteed to be deliverable and you can’t white-label them.
- The SMTP proxy is intended as a zero-configuration, best-effort service.
- When sending emails from your project, use a mail address that is on the same domain
  as your project.
- To grant access to a private Git repository, add the project’s public SSH key to
  your Git repository’s deploy keys.
- If you’re only pulling code, the key doesn’t need write permissions.
- Git submodules are usually listed in a .gitmodules file at the root of your Git
  repository.
- When using private Git repositories, ensure to use SSH for URLs.
- To connect Docksal with your Upsun account, use an Upsun API token.
- For a seamless experience, switch to DDEV, which is the recommended tool for local
  development with Upsun Fixed.
- A private key must be kept secret.
- A public key is stored in your Upsun account.
- If your environment is inactive or the deployment has failed, you can’t log in to
  it.
- If you have just added your SSH key or made changes to access rules, you need to
  redeploy your environment before you can access it using SSH keys.
- Data center regions vary greatly in grid-carbon intensity.
- Variables can have nested structures.
- Databases of live websites often contain personally identifiable information (PII)
  such as full names, mailing addresses, and phone numbers.
- After your app is built, its file system is read-only.
- Make sure that you only sanitize preview environments and never the production environment.
- You can create a script to automate the sanitization process to be run automatically
  on each new deployment.
- These headers are stable and may be examined by the application as necessary.
- All preview environments are limited to 12,000 email credits per calendar month.
- 'Assumptions: users is the table where all of your PII is stored in the staging
  development database.'
- 'Assumptions: database is the relationship name for the PostgreSQL service.'
- You can restore them from the dump you took in step 1.
- An Entity User exists and contains all of your PII (Personally Identifiable Information).
- You learned how to remove sensitive data from a database.
- To replace sensitive data that with other meaningful data, you can add a `faker`
  to the process.
- Upsun Fixed can be integrated with external services.
- A given SSH key pair can only be linked to a single user account.
- To keep connection secure, you need to regularly update the keys you use.
- You can also add it in the Console.
- Make sure your public key has been uploaded to your user account.
- Check that your key is properly added to your SSH agent.
- If your identity (SSH key) associated with Upsun Fixed isn’t in a default file name,
  you may have to specify the identity file.
- Make sure you have added your public SSH key to your provider and that your user
  there has access.
- If you haven’t enabled MFA on your user account and try to SSH into an environment
  that is protected by MFA, you will receive an access denied error.
- Be aware that synchronizing files is a destructive operation that overwrites data.
- Be aware that this is a destructive operation that overwrites data.
- To use it, create a new Discord webhook in your Discord administrative interface.
- Webhook URL receives a POST message for every activity that’s triggered.
- It’s possible to set the integration to only send certain activity types, or only
  activities on certain branches.
- Redeployment doesn’t rerun the `deploy` hook, only the `post_deploy` hook.
- The build is blocked by a process in your `build` hook.
- Your Upsun Fixed project becomes a mirror of your code repository elsewhere.
- This means you shouldn’t push code directly to Upsun Fixed.
- Platform has been rebranded to Upsun.
- Be sure to define the above as a private consumer by checking the This is a private
  consumer box.
- The Callback URL isn’t important in this case. You can set it to http://localhost.
- Make sure that you only sanitize preview environments and **never** the production
  environment.
- Production data isn’t altered.
- Rate limits apply to API calls — check headers for remaining limits.
- 'To get a database dump, run the command: symfony db:dump -e DEVELOPMENT_ENVIRONMENT_NAME.'
- Your GitHub repository is considered to be the source of truth for the project.
- Fetching branches and pruning branches are enabled by default.
- You can find the organization identifier for a specific project, within the Upsun
  Fixed console, by clicking on your name, and then on “Settings”, in the top right
  corner.
- Having meaningful PII-free data allows you to keep your current Q&A, external reviews,
  and other processes.
- If your database contains a lot of data, consider using the [`REINDEX` statement]
  to help improve performance.
- GitLab is the source of truth, where Git operations occur.
- Upsun Fixed is a mirror of that repository - provisioning infrastructure according
  to configuration, and orchestrating environments according to the branch structure
  of the GitLab repository.
- If a user is added to a project but not to the remote repository, they cannot clone
  the project locally.
- Ensure API key is kept secure and not exposed in public repositories.
- Your Fastly credentials are stored securely within your browser and are never transmitted
  to Upsun.
- Activity scripts are configured as integrations at the project level.
- Common properties you may want to send to Slack include activity.text and activity.log.
- Notifications are generated every 5 minutes, so there may be a brief delay between
  when the threshold is crossed and when the notification is triggered.
- If you already have defined an integration using a bot user API token, it will continue
  to work properly, though you should consider upgrading your processes.
- Metrics aren’t available for other Dedicated Gen 2 environments (such as a staging
  environment), but are available for Grid environments (such as your preview environments).
- To keep your repository clean and avoid performance issues, make sure you enable
  both the `fetch-branches` and `prune-branches` options.
- HTTP Metrics is only supported on Grid environments. There is no support for Dedicated
  environments.
- 8-hour retention for standard customers (without Observability Suite).
- 24-hour retention for Observability Suite customers (Enterprise and Elite tiers).
- Upsun Fixed is a mirror of that repository.
- The API requires a personal access token or OAuth token for authentication.
- Rate limiting is applied to all requests.
- Metrics are available for Production environments and Grid environments.
- Graphs include all hosts and an average over the hosts by default.
- GitLab is the source of truth, where Git operations occur
- Upsun Fixed is a mirror of that repository
- If you add a user to an Upsun Fixed project, but you haven’t added them to the remote
  repository on GitHub, GitLab, or Bitbucket, they can’t clone the project locally.
- Metrics aren’t available for other Dedicated Gen 2 environments (such as a staging
  environment), but are available for Grid environments.
- Blackfire is installed natively on Upsun Fixed and works integrally with the Upsun
  Fixed workflow.
- You need to bypass any reverse proxy, load balancer or CDN that sits in front of
  your app.
- On a Dedicated Gen 2 cluster, open a support ticket and let us know what your license
  key is. Our support team will install it and let you know when it’s complete.
- HTTP Metrics is only supported on Grid environments.
- There is no support for Dedicated environments.
- Tideways integrates with Upsun Fixed deployment hooks and provides performance comparisons
  before and after deployments were released.
- UTC is the default timezone for all logs.
- Upsun Fixed supports third-party services such as New Relic and Tideways.
- Log forwarding is available for Grid projects.
- Logs in files are not forwarded to journald.
- Blackfire.io can be bundled with Enterprise and Elite subscriptions as part of the
  Observability Suite.
- Each environment is tied to a Git branch.
- Preview environments are often used for a limited time and then abandoned.
- Creating a manual backup causes a momentary pause in site availability.
- Automated backups are only available for production environments.
- Give it a few hours to a day to get a decent set of data before checking your Tideways
  dashboard.
- You need an Admin role for that environment type to restore.
- Backups can be restored to a different environment.
- To change the environment's parent, follow the steps in the Console or use the CLI.
- Changing access control triggers a new deploy of the current environment.
- To enable log forwarding, you need to be a project admin.
- Your default environment is protected.
- Inactive environments still have branches in Git.
- Each project can include multiple environments, often divided into environment types.
- You can create environments for development, testing, staging, review, and so on.
- Switch the default environment during non-peak hours.
- Deactivate an environment is a destructive operation that can result in data loss.
- Backups are stored as binary large objects separate from your environments.
- Uses X-Robots-Tag header to control search engine indexing
- Plan a time frame for migration to avoid code changes during the process.
- Prepare for a brief site outage when migrating.
- The project timezone affects automated backups.
- The project timezone doesn’t affect app runtime, cron jobs, or system logs.
- To delete an Upsun Fixed project, including all data, code, and active environments.
- The settings for a specific environment are inherited by all of its children.
- Once your project is ready for production, replace the automatically generated domain
  with your own custom domain.
- Adding a domain disables the automatically generated URL for your Production environment
  only.
- Your default environment is protected. It can’t be deactivated through the Console
  or the CLI.
- Deactivating an environment is a destructive operation that can result in data loss.
- Take a backup of the old environment before making changes.
- Uses standard TLS certificates issued at no charge by Let’s Encrypt.
- Custom certificates aren’t necessary for preview environments as we provision Let’s
  Encrypt certificates by default for them.
- Search engine indexers are told to ignore all preview environments.
- Upsun Fixed can’t guarantee that indexers follow the instructions.
- Add a specific TXT DNS record for your apex domain to allow multiple projects to
  use subdomains.
- Removing the TXT record reinstates subdomain hijacking protection.
- See how to manage projects within Upsun.
- Prepare for a brief site outage when you migrate, just as with a relaunch of a site.
- Make sure anything else connected to your old project is moved to your new project.
- Using the target of your production environment to configure your DNS provider is
  technically possible, but Upsun Fixed recommends using the target of your preview
  environment as a best practice.
- To prevent abuse, by default you can add custom domains to up to 5 preview environments
  per project only. This limit doesn’t include the production environment, and you
  can increase it without charge.
- To delete a project, you must be an organization owner or have the manage plans
  permission.
- You are billed only for the portion of a month when the project was active.
- Disable the HTTP cache on this route. It's handled by the CDN instead.
- Requires API key for authentication
- If you are on a Development plan, you can’t add a domain.
- Adding a custom domain sets your site as visible to search engines.
- Standard Transport Layer Security (TLS) certificates provided for all sites and
  environments.
- Custom certificates aren’t necessary for preview environments.
- Upsun Fixed does not write nor debug any custom VCL on Managed Fastly CDN services.
- Dedicated (gen2) projects may not have the `FASTLY_*` environment variable(s) set.
- 'mTLS is only compatible with environments where you have attached domains you own,
  meaning: Your production environment, Each preview environment where you have attached
  a custom domain'
- mTLS is not compatible with preview environments created by a source code integration
- To ensure multiple projects can use subdomains of the same apex domain, add a specific
  TXT DNS record for your apex domain.
- Restrictions apply on the apex domain if you don’t remove the TXT record.
- By default, you can add custom domains to up to 5 preview environments per project.
- If your site doesn’t resolve after you’ve made DNS changes, check potential solutions
  to common issues.
- If the changes take longer than expected, redeploy the impacted environment.
- Avoid using Fastly with HTTP caching.
- CNAME records can’t point to apex domains.
- The CLI uses the git interface and the Upsun Fixed REST API to accomplish tasks.
- mTLS is only compatible with environments where you have attached domains you own,
  meaning your production environment and each preview environment where you have
  attached a custom domain.
- If you can’t use mTLS, enable full strict SSL/TLS encryption and enable HTTP strict
  transport security (HSTS).
- Non-admin users will only see organizations they are members of.
- Uses OAuth2
- Integrations are validated automatically on creation and on update. However, because
  they involve external resources, it is possible for a valid integration to become
  invalid.
- 'Drush: use git to clone a repository of each Drupal module rather than simply downloading
  a version'
- Organizations allow you to manage your Upsun (formerly Platform.sh) projects, users
  and billing. Projects are owned by organizations.
- An interactive form will be presented with the available options.
- If the command is run non-interactively (with –yes), the form will not be displayed.
- SSH keys are no longer needed by default, as SSH certificates are supported.
- Certificates offer more security than keys.
- Integrations are validated automatically on creation and on update.
- Because they involve external resources, it is possible for a valid integration
  to become invalid.
- Users can select a plan with predefined CPU and Memory resources.
- Flex will suit most use cases. Users will be able to allocate the exact CPU and
  Memory resources.
- This CLI supports various project management operations including project deletion,
  cloning, and information retrieval.
- Users with the Manage users (members) permission can add, edit, or remove any user’s
  permissions except their own.
- Users with the Manage billing (billing) or Manage Plans (plans) permission automatically
  are granted List projects (projects:list) permission.
- Prepaid credit cards are not accepted.
- The billing cycle refers to the period between invoices. You will be billed on the
  1st of every month for all charges accrued in the previous month.
- Enhance your organizations’ security with Multifactor Authentication (MFA).
- Upsun Fixed allows you to set up mandatory SSO with a third-party identity provider
  (IdP) for all your users.
- Users can create organizations with different payment methods and billing addresses.
- Organizations allow you to manage your Upsun Fixed projects, users, and billing.
- MFA enhances security by protecting both your organization and every user account
  that interacts with it through SSH or the Upsun Fixed API.
- Failure to enable MFA results in forbidden access to the organization from the Console
  or API.
- Users with a matching email address need to log in or register using SSO provider.
- Deactivated users can no longer use SSH, Git, or other APIs.
- For more details about the security, and privacy of our products and services, along
  with information about our security certifications like PCI, SOC2, HIPAA, etc. please
  visit the Trust Center.
- Data retention varies depending on the type of data stored.
- System logs aren’t customer-accessible.
- Users with the Manage users permission can add, edit, or remove any user’s permissions
  except their own.
- 'The network is behind a firewall for incoming connections. Only a few ports are
  opened to incoming traffic by default: ports 22, 80, and 443.'
- Outgoing TCP traffic is not blocked, with the exception of port 25.
- Both incoming and outgoing UDP traffic is blocked.
- This feature is available for Upsun Fixed Elite and Enterprise customers.
- Enterprise and Elite tier customers have the option to pay via invoice.
- The Upsun Fixed WAF is not configurable.
- Enterprise and Elite projects on Upsun Fixed come with a web application firewall
  (WAF) at no additional cost.
- Included features may present limitations compared to those advertised by Fastly
  to their direct customers.
- Multifactor Authentication (MFA) enhances security by protecting both your organization
  and every user account that interacts with it through SSH or the Upsun Fixed API.
- When MFA is enforced within an organization, every project contributor must enable
  MFA on their user account so they can run Git commands, SSH into an environment,
  or trigger actions through the Upsun Fixed API.
- Dedicated Environments are well-suited for those who need more resources and redundancy,
  along with stricter isolation requirements.
- With a Dedicated Environment, you are given the freedom to deploy into any public
  region of supported IaaS providers (currently AWS, Azure, GCP, OVH).
- If you deactivate a user on your identity provider, they can’t log in or register
  on Upsun Fixed.
- Data retention periods vary depending on the type of data stored.
- Dedicated Generation 2 consists of a development environment and a Dedicated Gen
  2 cluster.
- Storage allocation between mounts, DB and services is done through Upsun once a
  ticket is raised.
- There is no automatic cloning of data from the Dedicated Gen 2 cluster to the development
  environments like there is between the grid-based development branches.
- Production data may still be replicated to the development environment manually.
- Logs are retained for at least 6 months and at most 2 years depending upon legal
  and standards compliance required for each system.
- Individual log files are truncated at 100 MB, regardless of their age.
- Backups are deleted when the corresponding environment is deleted.
- Tombstone backups are retained for between 7 days and 6 months depending upon legal
  and standards compliance required for each system.
- Some configuration options and tools function differently in the different environments.
- Backups are retained for different periods depending on various factors.
- These backups are only used in cases of catastrophic failure and can only be restored
  by Upsun.
- Dedicated environments offer resources and redundancy with stricter isolation requirements.
- Dedicated Generation 2 is a robust, redundant layer.
- It’s well-suited for those who like the Upsun Fixed development experience but need
  more resources and redundancy for their production environment.
- Uses cron jobs to schedule tasks
- Uses OAuth2 with refresh token — requires setup of connected app in platform.sh
- Backups are created using snapshots saved to encrypted elastic block storage (EBS)
  volumes.
- Upsun Fixed does not proactively overwrite your production site with a backup.
- Some commands may have a timeout of 86400 seconds
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '429 Too Many Requests: Exceeded rate limit.'
- '403 Forbidden: Insufficient permissions.'
- '500 Internal Server Error: Configuration error or missing dependency'
- '404 Not Found: Resource not found'
- '500 Internal Server Error: Usually means you have a configuration error or a missing
  dependency.'
- 'Error: Resources exceeding plan limit; disk: 8192.00MB > 5120.00MB; try removing
  a service, or add more storage to your plan'
- 'W: [Errno 28] No space left on device: ...'
- 'No space left on device: Exceeding disk space limit.'
- 'Error: Resources exceeding plan limit; disk: 8192.00MB > 5120.00MB; try removing
  a service, or add more storage to your plan.'
- 'CONNECTION_FAILED: Check your Kafka server address and credentials.'
- 'AUTHORIZATION_ERROR: Ensure the credentials have the required permissions.'
- '401 Unauthorized: Check your username and password.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '429 Too Many Requests: Rate limit exceeded, retry after some time.'
- 'Unauthorized: Recheck API token or permissions'
- 'Error 1040: Too many connections'
- 'ERROR 1045 (28000): Access denied for user ''replicator''@''%'' (using password:
  YES)'
- 'SQLSTATE[HY000]: General error: 1205 Lock wait timeout exceeded'
- PDO Exception 'MySQL server has gone away'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: An unexpected error occurred.'
- 'Fatal error: Uncaught exception ''PDOException'' with message ''could not find
  driver'''
- 'SolrServerException: Handle server exceptions properly.'
- 'IOException: Check for input/output issues.'
- 'ChangeMe: Change your password'
- '400 Bad Request: Check your query parameters.'
- '404 Not Found: Ensure the endpoint URL is correct.'
- '500 Internal Server Error: Server-side issue, try again later.'
- 100 hostnames per certificate limitation
- Warning on deploy if going over hostname limits
- Maximum size of the routes document is 128 KB, which should fit around 300 different
  routes.
- Cache-Control responses with Private, No-Cache, or No-Store aren’t cached.
- 'WARNING: [pool web] server reached max_children setting (2), consider raising it'
- 'WARNING: [pool web] child 120, script ''/app/public/index.php'' execution timed
  out'
- 'WARNING: [pool web] child 112 exited on signal 11 (SIGSEGV)'
- 'WARNING: [pool web] child 429 exited on signal 9 (SIGKILL)'
- 'connect() to unix:/run/app.sock failed (11: Resource temporarily unavailable)'
- 'WARNING: [pool web] child exited on signal 11 (SIGSEGV) after 7.405936 seconds
  from start'
- 'WARNING: [pool web] child exited on signal 9 (SIGKILL) after 50.938617 seconds
  from start'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- Could not find gem 'rails' in locally installed gems.
- message not sent if 'From' header is missing
- sending to fake domains may fail and hurt sending reputation
- 'GitProtocolError: unexpected http resp 401 for https://bitbucket.org/myusername/mymodule.git/info/refs?service=git-upload-pack'
- 'The command failed with the exit code: 255'
- SSH key can not be duplicated
- 'Error: Access denied'
- Environment is production one, skipping.
- Environment isn't active, skipping.
- Permission denied (publickey).
- 'Error: Access denied. Additional authentication is required: Multi-factor authentication
  (MFA).'
- permission denied to create database
- '400: Malformed request'
- '403 Forbidden: Check access permissions or rate limits'
- '404 Not Found: Verify the endpoint path and parameters'
- '401 Unauthorized: Ensure valid OAuth token'
- 'Webhook not added: Add manually if integration was added with incorrect permissions.'
- '401 Unauthorized: Check your API key.'
- '404 Not Found: Verify the resource URL.'
- '429 Too Many Requests: Rate limit exceeded.'
- '404 Not Found: Check the endpoint path or resource ID.'
- '401 Unauthorized: Verify your authentication token.'
- '403 Forbidden: Ensure you have permission to access the requested resource.'
- 'Failed to connect to the Git repository: Please make sure you have the correct
  access rights and the repository exists.'
- 8-hour retention for standard customers (without Observability Suite).
- 24-hour retention for Observability Suite customers (Enterprise and Elite tiers).
- 'Invalid BACKUP_ID: Ensure you are using a correct Backup ID.'
- '404 Not Found: Verify the endpoint URL.'
- '500 Internal Server Error: Try again later.'
- No specific error codes mentioned.
- This domain is already claimed by another service
- YOUR_APEX_DOMAIN is a root domain
- 'E: Error validating domain www.example.com: Couldn''t complete challenge [HTTP01:
  pending | DNS01: pending | TLSALPN01: pending]'
- 'W: Failed to verify the challenge at the gateway for the domain ''www.example.com'''
- 'Unauthorized: Check user permissions and roles'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Config
  - MongoDB
  - PLATFORM_RELATIONSHIPS
  - OAuthToken
  - OAuth2
  - API Token
  - API Tokens
client:
  base_url: https://upsun.com
  auth:
    type: oauth2
source_metadata: null
