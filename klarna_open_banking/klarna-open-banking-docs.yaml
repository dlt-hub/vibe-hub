resources:
- name: sessions
  endpoint:
    path: /xs2a/v1/sessions
    method: PUT
    data_selector: data
    params: {}
- name: accounts_flow
  endpoint:
    path: <data.flows.accounts>
    method: PUT
    data_selector: data
    params: {}
- name: sessions
  endpoint:
    path: /xs2a/v1/sessions
    method: PUT
    data_selector: data
    params: {}
- name: accounts_flow
  endpoint:
    path: /xs2a/v1/sessions/{session_id}/flows/accounts
    method: PUT
    data_selector: data
    params: {}
- name: session_state
  endpoint:
    path: /xs2a/v1/sessions/{session_id}
    method: GET
    data_selector: data
    params: {}
- name: flow_result
  endpoint:
    path: /xs2a/v1/sessions/{session_id}/flows/{flow_id}
    method: GET
    data_selector: data
    params: {}
- name: close_session
  endpoint:
    path: /xs2a/v1/sessions/{session_id}
    method: DELETE
    data_selector: data
    params: {}
- name: session
  endpoint:
    path: /xs2a/v1/sessions
    method: PUT
    data_selector: data
    params: {}
- name: insights-refresh
  endpoint:
    path: /insights/v1/sessions/{session_id}/flows/insights-refresh
    method: PUT
    data_selector: data
    params: {}
- name: report
  endpoint:
    path: /insights/v1/reports/categorization/create
    method: PUT
    data_selector: data
    params: {}
- name: session
  endpoint:
    path: /xs2a/v1/sessions
    method: PUT
    data_selector: data.session_id
    params: {}
- name: insights_refresh_flow
  endpoint:
    path: /xs2a/v1/sessions/{session_id}/flows/insights-refresh
    method: PUT
    data_selector: data.flow_id
    params: {}
- name: report_generation
  endpoint:
    path: /insights/v1/reports/categorization/create
    method: PUT
    data_selector: data.reports
    params: {}
- name: sessions
  endpoint:
    path: /xs2a/v1/sessions
    method: PUT
- name: transfer_flow
  endpoint:
    path: <data.flow.transfer>
    method: PUT
- name: sessions
  endpoint:
    path: /session
    method: POST
- name: flows
  endpoint:
    path: /flow
    method: GET
- name: AIS data
  endpoint:
    path: /ais/data
    method: GET
- name: consumer_interaction
  endpoint:
    path: /xs2a/v1/wizard/cb7ih6o9u0hp5v9nag3aeppqp562n49g
    method: GET
    data_selector: data
    params: {}
- name: flow_result
  endpoint:
    path: /xs2a/v1/wizard/1234567890123456789
    method: GET
    data_selector: data
    params: {}
- name: close_session
  endpoint:
    path: /xs2a/v1/wizard/1234567890123456789
    method: DELETE
    data_selector: data
    params: {}
- name: sessions
  endpoint:
    path: /xs2a/v1/sessions
    method: PUT
    data_selector: data
    params: {}
- name: transfer_flow
  endpoint:
    path: <data.flow.transfer>
    method: PUT
    data_selector: data
    params: {}
- name: consumer_interaction
  endpoint:
    path: /xs2a/v1/wizard/cb7ih6o9u0hp5v9nag3aeppqp562n49g
    method: GET
    data_selector: data
    params: {}
- name: flow_result
  endpoint:
    path: <data.self>
    method: GET
    data_selector: data
    params: {}
- name: close_session
  endpoint:
    path: <data.self>
    method: DELETE
    data_selector: data
    params: {}
- name: session
  endpoint:
    path: /sessions
    method: PUT
    data_selector: keys
    params: {}
- name: bank_search
  endpoint:
    path: /auth/bank_search
    method: POST
    data_selector: keys
    params: {}
- name: form
  endpoint:
    path: /auth/form
    method: POST
    data_selector: keys
    params: {}
- name: consent
  endpoint:
    path: /consent
    method: POST
    data_selector: keys
    params: {}
- name: HSM Reverse API
  endpoint:
    path: /sign
    method: POST
    data_selector: signature
- name: request_payload
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: response_payload
  endpoint:
    path: ''
    method: GET
    data_selector: signature
    params: {}
- name: session
  endpoint:
    path: /sessions
    method: PUT
    data_selector: body
    params:
      redirect_return_url: https://...
- name: bank_search
  endpoint:
    path: /bank_search
    method: POST
    data_selector: body
    params:
      bank_code: '81070000'
      country_code: DE
- name: form
  endpoint:
    path: /form
    method: POST
    data_selector: body
    params: {}
- name: consent
  endpoint:
    path: /consent
    method: POST
    data_selector: body
    params:
      consent_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6IjEyMzQ1Njc4OTAifQ.na71ipK8ASvggoM6C5vMjBKgJlZLxV-m6ElgHBrNtlU
      account_id: fdff8f6f-d923-4489-90b3-43d11c021e1b
      from_date: '2018-10-05'
      to_date: '2018-10-25'
- name: HSM Reverse API
  endpoint:
    path: /sign
    method: POST
    data_selector: signature
- name: request
  endpoint:
    path: /request
    method: POST
    data_selector: signature
- name: ASPSP Registration
  endpoint:
    path: /onboarding/aspsps
    method: POST
    data_selector: registration_info
    params: {}
- name: Consent API
  endpoint:
    path: /consent
    method: POST
    data_selector: consent_data
- name: Transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transaction_data
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: countries
- name: PSD2 test bank
  endpoint:
    path: /test-bank-psd2.html
    method: GET
- name: session
  endpoint:
    path: /xs2a/v1/sessions
    method: PUT
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: data.result.accounts
    params: {}
- name: session
  endpoint:
    path: /session
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: account-details
  endpoint:
    path: /account-details
    method: GET
- name: balance
  endpoint:
    path: /balance
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: transfer
  endpoint:
    path: /transfer
    method: POST
- name: insights-refresh
  endpoint:
    path: /insights-refresh
    method: GET
- name: account_details
  endpoint:
    path: /account-details
    method: POST
    data_selector: data.result.account
    params: {}
- name: balance
  endpoint:
    path: /balance
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /xs2a/v1/sessions/{session_id}/flows/{flow_id}/transactions
    method: GET
    data_selector: data.result.transactions
- name: session
  endpoint:
    path: /xs2a/v1/sessions
    method: PUT
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data.result.transactions
    params:
      from_date: '2020-01-08'
      to_date: '2020-02-08'
- name: transactions
  endpoint:
    path: /xs2a/v1/sessions/{session_id}/flows/{flow_id}/list
    method: POST
    data_selector: data.result.transactions
    params:
      offset: String
- name: accounts
  endpoint:
    path: /api/accounts
    method: GET
    data_selector: data.result.accounts
- name: Transfer
  endpoint:
    path: /transfer
    method: POST
    data_selector: transfer
    params: {}
- name: transfer
  endpoint:
    path: /transfer
    method: GET
    data_selector: data.result
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: data.result.transactions
    params:
      from_date: YYYY-MM-DD
      to_date: YYYY-MM-DD
      last_days: 30
      preferred_pagination_size: 200
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data.result.transactions
    params:
      from_date: '2020-01-08'
      to_date: '2020-02-08'
- name: transfer
  endpoint:
    path: /transfer
    method: POST
    data_selector: data
    params: {}
- name: flow-finished
  endpoint:
    path: /xs2a/flow.html#flow-information-call
    method: GET
- name: paginate_transactions
  endpoint:
    path: /xs2a/v1/sessions/{session_id}/flows/{flow_id}/list
    method: POST
    data_selector: data.result.transactions
    params:
      offset: String
- name: transfer
  endpoint:
    path: /transfer
    method: GET
    data_selector: data.result
    params: {}
- name: account
  endpoint:
    path: /api/account
    method: GET
    data_selector: accounts
    params: {}
- name: allowed_accounts
  endpoint:
    path: /allowed_accounts
    method: GET
    data_selector: results
- name: amount
  endpoint:
    path: /amount
    method: GET
    data_selector: amount
    params: {}
- name: transfer
  endpoint:
    path: /transfer
    method: POST
    data_selector: data
    params: {}
- name: intended_report
  endpoint:
    path: /intendedreport
    method: GET
    data_selector: results
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
- name: account
  endpoint:
    path: /accounts
    method: GET
    data_selector: accounts
- name: address_data
  endpoint:
    path: /address_data
    method: GET
    data_selector: records
    params: {}
- name: consent_get
  endpoint:
    path: /xs2a/v1/sessions/{session-id}/consent/get
    method: POST
    data_selector: data.consent
    params: {}
- name: allowed_accounts
  endpoint:
    path: /allowed_accounts
    method: GET
    data_selector: account_types, account_ids, currencies
- name: accounts
  endpoint:
    path: /xs2a/v1/consents/{consent-id}/accounts/get
    method: POST
    data_selector: data.result.accounts
- name: amount
  endpoint:
    path: /amount
    method: GET
    data_selector: amount
- name: intended_report
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: account_details
  endpoint:
    path: /xs2a/v1/consents/{consent-id}/account-details/get
    method: POST
    data_selector: data.result.account
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
- name: balance
  endpoint:
    path: /xs2a/v1/consents/{consent-id}/balances/get
    method: POST
    data_selector: data.result
    params: {}
- name: transactions
  endpoint:
    path: /xs2a/v1/consents/{consent-id}/transactions/get
    method: POST
    data_selector: data.result.transactions
    params:
      consent_token: String
      account_id: String
      from_date: Date
      to_date: Date
      preferred_pagination_size: Integer
- name: consent
  endpoint:
    path: /xs2a/v1/sessions/{session-id}/consent/get
    method: POST
- name: transactions
  endpoint:
    path: /xs2a/v1/consents/{consent_id}/transactions/list
    method: POST
    data_selector: data.result.transactions
    params:
      offset: String
      consent_token: String
- name: accounts
  endpoint:
    path: /xs2a/v1/consents/{consent-id}/accounts/get
    method: POST
    data_selector: data.result.accounts
- name: transfer_state
  endpoint:
    path: /xs2a/v1/consents/{consent-id}/transfers/{transfer-id}/state/get
    method: POST
    data_selector: data.result
    params: {}
- name: account_details
  endpoint:
    path: /xs2a/v1/consents/{consent-id}/account-details/get
    method: POST
    data_selector: data.result.account
    params: {}
- name: insights_refresh
  endpoint:
    path: /insights/v1/consents/insights-refresh
    method: PUT
    data_selector: data
    params: {}
- name: refresh_status
  endpoint:
    path: <data.self>
    method: POST
    data_selector: data
    params: {}
- name: insights_refresh
  endpoint:
    path: /insights/v1/consents/insights-refresh/{refresh_id}/get
    method: GET
    data_selector: data.result
    params: {}
- name: balances
  endpoint:
    path: /xs2a/v1/consents/{consent-id}/balances/get
    method: POST
    data_selector: data.result
    params: {}
- name: transactions
  endpoint:
    path: /xs2a/v1/consents/{consent-id}/transactions/get
    method: POST
    data_selector: data.result.transactions
    params:
      consent_token: String
      account_id: String
      from_date: Date
      to_date: Date
      preferred_pagination_size: Integer
- name: transactions
  endpoint:
    path: /xs2a/v1/consents/{consent_id}/transactions/list
    method: POST
    data_selector: data.result.transactions
    params:
      offset: String
      consent_token: String
- name: create_transactions
  endpoint:
    path: /insights/v1/storage/transactions/create
    method: POST
    data_selector: transactions
- name: transfer_state
  endpoint:
    path: /xs2a/v1/consents/{consent-id}/transfers/{transfer-id}/state/get
    method: POST
    data_selector: data.result
    params: {}
- name: replace_transactions
  endpoint:
    path: /insights/v1/storage/transactions/replace
    method: POST
    data_selector: '{}'
- name: insights_refresh
  endpoint:
    path: /insights/v1/consents/insights-refresh
    method: PUT
    data_selector: data
- name: refresh_status
  endpoint:
    path: <data.self>
    method: POST
    data_selector: data
- name: delete_transactions
  endpoint:
    path: /insights/v1/storage/transactions/delete
    method: POST
    data_selector: ''
    params: {}
- name: list_transactions
  endpoint:
    path: /insights/v1/storage/transactions/list
    method: POST
    data_selector: data.transactions
    params:
      pagination.size: 200
      pagination.offset: 0
- name: upsert_labels
  endpoint:
    path: /insights/v1/storage/transactions/labels/upsert
    method: POST
    data_selector: labels
- name: delete_specific_labels
  endpoint:
    path: /insights/v1/storage/transactions/labels/delete
    method: POST
    data_selector: insights_consumer_id
    params: {}
- name: create_transactions
  endpoint:
    path: /insights/v1/storage/transactions/create
    method: POST
    data_selector: transactions
    params: {}
- name: delete_all_labels
  endpoint:
    path: /insights/v1/storage/transactions/labels/deleteall
    method: POST
    data_selector: insights_consumer_id, insights_account_id, insights_transaction_ids
- name: update_transactions
  endpoint:
    path: /insights/v1/storage/transactions/update
    method: POST
    data_selector: '{}'
    params: {}
- name: delete_consumers
  endpoint:
    path: /insights/v1/storage/consumers/delete
    method: POST
    data_selector: body
    params: {}
- name: replace_transactions
  endpoint:
    path: /insights/v1/storage/transactions/replace
    method: POST
    data_selector: '{}'
- name: delete_transactions
  endpoint:
    path: /insights/v1/storage/transactions/delete
    method: POST
    data_selector: '{}'
- name: insights_refresh_schedule
  endpoint:
    path: /insights/v1/autorefresh/schedule
    method: POST
    data_selector: insights_consumer_id
- name: list_transactions
  endpoint:
    path: /insights/v1/storage/transactions/list
    method: POST
    data_selector: data.transactions
- name: upsert_transaction_labels
  endpoint:
    path: /insights/v1/storage/transactions/labels/upsert
    method: POST
    data_selector: '{}'
- name: insights_refresh_status
  endpoint:
    path: /insights/v1/autorefresh/list
    method: POST
    data_selector: data.status
    params:
      insights_consumer_id: String
      insights_account_ids: Array<String>
- name: delete_specific_labels
  endpoint:
    path: /insights/v1/storage/transactions/labels/delete
    method: POST
    data_selector: '{}'
- name: delete_specific_refresh
  endpoint:
    path: /insights/v1/autorefresh/deletebyconsumer
    method: POST
    data_selector: insights_consumer_id
- name: delete_all_refresh
  endpoint:
    path: /insights/v1/autorefresh/deletebyconsumer
    method: POST
    data_selector: insights_consumer_id
- name: delete_all_labels
  endpoint:
    path: /insights/v1/storage/transactions/labels/deleteall
    method: POST
    data_selector: none
    params: {}
- name: category_list
  endpoint:
    path: /insights/v1/categories/get
    method: POST
    data_selector: data
- name: delete_consumers
  endpoint:
    path: /consumers/delete
    method: POST
    data_selector: insights_consumer_id
    params: {}
- name: account_info_report
  endpoint:
    path: /insights/v1/reports/account-info/create
    method: POST
    data_selector: reports
    params:
      insights_consumer_id: String
- name: balance_over_time
  endpoint:
    path: /insights/v1/reports/balance-over-time/create
    method: POST
    data_selector: reports
    params: {}
- name: insights_refresh_schedule
  endpoint:
    path: /insights/v1/autorefresh/schedule
    method: POST
    data_selector: ''
    params: {}
- name: balances_report
  endpoint:
    path: /insights/v1/reports/balances/create
    method: POST
    data_selector: data.reports
    params:
      insights_consumer_id: insights_consumer_id
      insights_account_ids: insights_account_ids
      excluded_insights_account_ids: excluded_insights_account_ids
      required_data_availability: required_data_availability
- name: insights_refresh
  endpoint:
    path: /insights/v1/autorefresh/list
    method: POST
    data_selector: data.status
    params:
      insights_consumer_id: String
      insights_account_ids: Array<String>
- name: balance_prediction_report
  endpoint:
    path: /insights/v1/reports/balance-prediction/create
    method: POST
    data_selector: data.reports
    params: {}
- name: delete_specific_refresh
  endpoint:
    path: /insights/v1/autorefresh/deletebyconsumer
    method: POST
    data_selector: '{}'
- name: delete_all_refresh
  endpoint:
    path: /insights/v1/autorefresh/deletebyconsumer
    method: POST
    data_selector: '{}'
- name: categorized_transactions_report
  endpoint:
    path: /insights/v1/reports/categorization/create
    method: POST
    data_selector: reports
    params: {}
- name: category_list
  endpoint:
    path: /insights/v1/categories/get
    method: POST
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: account_info
  endpoint:
    path: /insights/v1/reports/account-info/create
    method: POST
    data_selector: data.reports
    params:
      insights_consumer_id: String
- name: group_by_category_report
  endpoint:
    path: /insights/v1/reports/groupy-by-category/create
    method: POST
    data_selector: reports
- name: balance_over_time_report
  endpoint:
    path: /insights/v1/reports/balance-over-time/create
    method: POST
    data_selector: data.reports
- name: category
  endpoint:
    path: /category_info
    method: GET
    data_selector: data.reports
    params: {}
- name: recurring_transactions
  endpoint:
    path: /insights/v1/reports/recurring-transactions/create
    method: POST
    data_selector: data.reports
    params: {}
- name: balances_report
  endpoint:
    path: /insights/v1/reports/balances/create
    method: POST
    data_selector: data.reports
    params:
      insights_consumer_id: String
      insights_account_ids: Array<String>
      excluded_insights_account_ids: Array<String>
      required_data_availability: Enum<'NONE', 'BALANCE_OR_AVAILABLE'>
- name: reports
  endpoint:
    path: /reports
    method: GET
    data_selector: data.reports
    params: {}
- name: balance_prediction_report
  endpoint:
    path: /insights/v1/reports/balance-prediction/create
    method: POST
    data_selector: data.reports
    params: {}
- name: similar_transactions_report
  endpoint:
    path: /insights/v1/reports/similar-transactions/create
    method: POST
    data_selector: reports
- name: categorized_transactions_report
  endpoint:
    path: /insights/v1/reports/categorization/create
    method: POST
    data_selector: reports
- name: bulk_report
  endpoint:
    path: /insights/v1/reports/bulk/create
    method: POST
    data_selector: data.reports
- name: group_by_category
  endpoint:
    path: /insights/v1/reports/groupy-by-category/create
    method: POST
    data_selector: reports
- name: brand
  endpoint:
    path: /brand
    method: GET
    data_selector: records
- name: categories
  endpoint:
    path: /category-info
    method: GET
    data_selector: categories
    params: {}
- name: category
  endpoint:
    path: /category
    method: GET
    data_selector: results
- name: recurring_transactions
  endpoint:
    path: /insights/v1/reports/recurring-transactions/create
    method: POST
    data_selector: data.reports
- name: categorized_transaction
  endpoint:
    path: /transactions/categorized
    method: GET
    data_selector: transactions
- name: reports
  endpoint:
    path: /data
    method: GET
    data_selector: data.reports
    params: {}
- name: similar_transactions_report
  endpoint:
    path: /insights/v1/reports/similar-transactions/create
    method: POST
    data_selector: data.reports
    params: {}
- name: create_report
  endpoint:
    path: /insights/v1/reports/create
    method: POST
    data_selector: data.accounts
    params: {}
- name: bulk_report
  endpoint:
    path: /insights/v1/reports/bulk/create
    method: POST
    data_selector: data.reports
- name: brand
  endpoint:
    path: /brands
    method: GET
    data_selector: records
- name: balance_over_time
  endpoint:
    path: /modular-reports
    method: POST
    data_selector: data.accounts.reports
    params: {}
- name: balances_report
  endpoint:
    path: /modular-reports
    method: POST
    data_selector: reports
    params: {}
- name: category
  endpoint:
    path: /xs2a/category
    method: GET
    data_selector: results
- name: Categorized Transactions
  endpoint:
    path: /modular-reports
    method: POST
    data_selector: report
    params:
      report_days: 60
- name: categorized_transaction
  endpoint:
    path: /xs2a/transactions
    method: GET
    data_selector: results
- name: expense_category_report
  endpoint:
    path: /modular-reports
    method: POST
    data_selector: data.reports
    params: {}
- name: recurring_transactions
  endpoint:
    path: /modular-reports
    method: GET
    data_selector: data.reports
    params: {}
- name: modular_report_creation
  endpoint:
    path: /insights/v1/reports/create
    method: POST
    data_selector: data.accounts
- name: expense_category_report
  endpoint:
    path: /insights/v1/reports/expense-category/create
    method: POST
    data_selector: data.reports
- name: balance_over_time
  endpoint:
    path: /modular-reports
    method: POST
    data_selector: data.accounts.reports
    params: {}
- name: reports
  endpoint:
    path: /reports
    method: GET
    data_selector: data.reports
    params: {}
- name: sessions
  endpoint:
    path: /xs2a/v1/sessions
    method: POST
- name: categorized_transactions_report
  endpoint:
    path: /modular-reports
    method: POST
    data_selector: transactions
    params: {}
- name: Expense Category Report
  endpoint:
    path: /modular-reports
    method: POST
    data_selector: data.reports
    params:
      type: EXPENSE_CATEGORIES
- name: recurring_transactions_report
  endpoint:
    path: /modular-reports
    method: POST
    data_selector: data.reports
    params:
      type: RECURRING_TRANSACTIONS
- name: expense_category_report
  endpoint:
    path: /insights/v1/reports/expense-category/create
    method: POST
    data_selector: data.reports
- name: reports
  endpoint:
    path: /reports
    method: GET
    data_selector: data.reports
    params: {}
- name: current_state
  endpoint:
    path: <decoded(client_token).auth_url>
    method: GET
    data_selector: data
- name: sessions
  endpoint:
    path: /xs2a/v1/sessions
    method: POST
- name: form_container
  endpoint:
    path: /form-container
    method: GET
    data_selector: elements
- name: choice_element
  endpoint:
    path: /choice-element
    method: GET
    data_selector: elements
    params: {}
- name: current_state
  endpoint:
    path: <decoded(client_token).auth_url>
    method: GET
    data_selector: data
    params: {}
- name: image_element
  endpoint:
    path: /image
    method: GET
    data_selector: image
    params: {}
- name: flicker
  endpoint:
    path: /flicker
    method: GET
    data_selector: data
    params: {}
- name: Form Container
  endpoint:
    path: /xs2a/form/container
    method: GET
    data_selector: elements
- name: form_container
  endpoint:
    path: /form/container
    method: GET
    data_selector: elements
- name: translations
  endpoint:
    path: /translations
    method: GET
    data_selector: data
- name: flicker
  endpoint:
    data_selector: data
- name: bank-groups
  endpoint:
    path: /v2/integrations/list
    method: POST
    data_selector: integrations
    params:
      country: DE
      pagination:
        size: 10
        offset: 10
- name: banks
  endpoint:
    path: /v2/integrations/list
    method: POST
    data_selector: integrations
    params:
      country: DE
      pagination:
        size: 10
        offset: 10
- name: integrations
  endpoint:
    path: /v2/integrations/list
    method: POST
    data_selector: integrations
    params:
      country: DE
      filter:
        access_methods:
        - PSD2
      pagination:
        size: 10
        offset: 10
- name: link_element
  endpoint:
    path: /xs2a/xs2a-form/link
    method: GET
    data_selector: elements
    params: {}
- name: bank-groups
  endpoint:
    path: /v2/integrations/list
    method: POST
    data_selector: integrations
    params:
      country: DE
      pagination:
        size: 10
        offset: 10
- name: banks
  endpoint:
    path: /v2/integrations/list
    method: POST
    data_selector: integrations
    params:
      country: DE
      pagination:
        size: 10
        offset: 10
- name: countries
  endpoint:
    path: /v2/integrations/list
    method: POST
    data_selector: integrations
    params:
      country: DE
      pagination:
        size: 10
        offset: 10
- name: integrations
  endpoint:
    path: /v2/integrations/list
    method: POST
    data_selector: integrations
    params:
      country: DE
      filter:
        access_methods:
        - PSD2
      pagination:
        size: 10
        offset: 10
notes:
- The AES cipher text, the RSA encrypted AES key and the AES initialization vector
  are sent to the XS2A API as the POST request body.
- Open banking. by Klarna allows TPPs/merchants to access the consumer’s account information
  data or initiate transfers.
- Requires a Klarna Branded or White Label integration
- The Klarna Open Banking Portal can only be accessed with a valid account.
- Accounts can only be obtained from Klarna directly.
- A valid playground token is required.
- The session needs to be closed after all flows are completed.
- Requires a valid playground token for access.
- Session must be closed after use.
- Session has to be closed after all desired flows are completed.
- Some banks redirect the user to a bank hosted website for authentication.
- DO NOT implement opening the redirect in a new WebView or the same WebView without
  Klarna's direct approval as these can cause technical issues.
- Tokens are distributed by the Open Banking by Klarna team available for request.
- Ensure to close the session after completing desired flows.
- Klarna Open Banking Portal can only be accessed with a valid account.
- Open the redirect outside of your mobile app in the default browser app.
- DO NOT implement opening the redirect in an additional WebView or the same WebView
  without Klarna's direct approval.
- The properties psu and redirect_return_url must be provided when creating a session.
- Klarna Open Banking Portal requires a valid account
- Accounts can only be obtained from Klarna directly
- White label integrators have to send the keys object as part of the body of POST,
  PUT and DELETE requests.
- The access credentials mentioned above must be configured per bank in Klarna's service.
- White label integrators must send the keys object as part of the body of POST, PUT
  and DELETE requests.
- The HSM Reverse API must support signing of payloads with different algorithms that
  are typically used for the QWAC and QSealC certificates.
- Consent requests are error prone and we recommend to have a look at our guide to
  avoid early consent invalidation.
- Any consent older than the set lifetime is expired and returns CONSENT.EXPIRED.
- This integration guide helps you to do both in the most efficient way to minimise
  authentication while optimise for retrieval of account data.
- The access credentials must be encrypted with an AES-CBC symmetric algorithm.
- The keys.aspsp_data field must be included in all requests.
- First time data acquisition and refreshing with a stored consent requires setup
  of connected app.
- Integration based on use cases has specific requirements and best practices.
- PSU attended calls are subject to higher limits which is why they should be flagged
  accordingly by setting the psu object in the request.
- Klarna is obliged to deactivate clients without notice which do not share the current
  PSU information to comply with the PSD2 regulation.
- 'Supports multiple SCA methods: embedded, decoupled, and redirect.'
- All retries must always apply exponential backoff to not cause issues with the bank's
  systems.
- Most banks exclusively update the provided data at fixed booking times, typically
  between 8 AM and 8 PM.
- White-Label requires a AISP and/or PISP licence in form of eIDAS certificates (QWAC
  + QSeal).
- The main purpose of the PSD2 test bank is to enable the testing of the three different
  SCA methods embedded, decoupled and redirect.
- All requests have to be authenticated by a Token that has to be provided in the
  Authorization header prefixed with Token.
- A token is valid for 180 days. Make sure to replace any token before it expires
  with a new token.
- A flow has ended if the state of the flow is either ABORTED, EXCEPTION or FINISHED.
- This feature is only available for Klarna Branded Integrations!
- Uses OAuth2 with refresh token — requires setup of connected app in api
- If neither the from_date and to_date date properties nor the last_days property
  are provided, then by default the transactions of the past 30 days are extracted.
- Some banks limit the transactions to specific time frames, e.g. only the last 90
  days from today.
- A session can be closed by making a DELETE request towards the self-url that is
  returned when initiating a session.
- Sessions should be closed as soon as possible to avoid interference with the consumer's
  future interaction with the bank.
- If the incomplete property in the response is true, not all transactions could be
  retrieved.
- It is recommended to start another transactions flow for the date of the oldest
  previously received transaction.
- A flow is a process within a session that has the goal to either retrieve some specific
  information about a bank account or execute a transfer.
- The offset is required to specify the next page of transactions.
- The flow is not available for all accounts. Please check the capabilities of the
  account to see if it's available.
- The transfer flow can be used to transfer money from a consumer's account to another
  specifiable account.
- Open Banking. by Klarna provides a Payment Initiation Service and therefore can
  not guarantee that a successfully initialized payment will be executed by the bank.
- For successful flows the type property always holds the value transfer.
- The transfer_id property contains a generated id by Klarna.
- If the session in which the transfer flow is started is connected to a bank account
  that is not located in Sweden the transfer flow will fail.
- If the incomplete property is true, not all transactions could be retrieved.
- Starting a transfer flow with the transfer_method set to gb_domestic will force
  the customer to select a Bank capable of performing gb_domestic-transfers.
- Open Banking by Klarna provides a Payment Initiation Service and cannot guarantee
  that a successfully initialized payment will be executed by the bank.
- Due to technical restrictions of a few banks, the abort of the transfer flow cannot
  be guaranteed.
- The account id might not be available in the from object of the result of a transfer
  flow.
- Fields not listed in the defined schema are not available for this type of transfer
  and will be ignored by the API.
- The filtering by account type will not be done if account_types or the whole allowed_accounts
  object is not provided.
- The amount in the smallest unit of currency.
- The currency according to ISO-4217.
- The timeframe for the flow must be within the timeframe defined at the session start.
- Transaction ID is optional for PENDING transactions.
- The account id field will always be present in the accounts that belong to the consumer.
- Some banks allow the consumer to change the name inside the banking portal.
- A consent token can only be used once. After using a consent token, a new one is
  returned.
- Account ids are only stable throughout a session.
- The response contains a new consent_token that has to be used in the following request.
- The amount is in the smallest unit of currency.
- consent-usage is not available for all accounts
- The id of an account can change and it is recommended to request an updated list
  of accounts
- The transaction_id is optional for PENDING transactions.
- Presence and consistency of bank_transaction_id depend on the bank.
- The consent-usage is not available for all accounts. Please check the capabilities
  of the account to see if it's available.
- The Pagination Object contains the number of transactions in the current page and
  the URL for the next call.
- The consent-usage is not available for all accounts.
- If a timeframe is defined in the consent_scope.transactions, then the transactions
  request can only fetch transactions from dates within the defined frame.
- The consent_token can be obtained as described in the consents documentation.
- The psu object is optional but recommended.
- The transfer state can not be fetched indefinetly but only for a certain period
  of time.
- Some banks issue transfer tokens as part of the AIS consent which are subject to
  AIS consent lifetime.
- The account identifier can change and it is recommended to request an updated list
  of accounts.
- The process can take longer depending on factors like the used bank and account
  size.
- The id of an account can change and it is recommended to request an updated list
  of accounts in order to use the latest ids.
- The API offers different reports that are based on the stored data.
- The latest account_id and capabilities can be fetched via the consent accounts endpoint.
- Data gets stored there either by acquiring them from a bank via the Insights-refresh
  or by manually putting them there by using the Storage managing endpoints.
- The documentation pages in this section describe endpoint to manage transactions
  in the Storage.
- The `psu` object is optional but recommended for some banks to soften daily consent
  usage restrictions.
- Default value for data_retention_minutes is 10 minutes.
- The transfer state can not be fetched indefinitely but only for a certain period
  of time.
- This endpoint allows to replace transactions in the storage.
- The Consent Insights Refresh endpoint differs from most other consent endpoints
  because depending on factors like the used bank, the account size and the intended
  reports it can take longer time to complete the refresh.
- The timeframe for which the data should be refreshed can be set by specifying either
  the from_date and to_date parameters or the refresh_days parameter.
- The call will return an empty body response
- Default timeframe for transactions is the last 62 days.
- 'Several of the consent''s responses contain one or more of the following objects:
  Pagination Object'
- Keys have a minimum length of 1 and maximum length of 128.
- Values have a minimum length of 0 and maximum length of 1024.
- This endpoint allows to delete specific transactions labels.
- Default data retention is 10 minutes.
- This endpoint allows to delete all labels of a transaction.
- The properties that are not set in the request are not changed in the stored transaction.
- The Insights API supports automatic refreshs of the raw consumer data in a configured
  interval.
- To use this feature the consent for the accounts needs to be stored during the Insights-Refresh.
- You must set one of the parameters refresh_interval_minutes or refresh_interval
  but not both.
- The default timeframe for transactions is the last 62 days.
- Authorization requires a token.
- If the request was successful an empty response is returned.
- Different reports are available out of the box.
- The response structure varies for each report.
- Deletes all data of the specified consumer.
- 'Authorization token is required in the header with the format: Token <Token>'
- The default timeframe for the report is the last 62 days.
- The type always contains the value 'BALANCES' for this report.
- The insights_consumer_id is required for the report generation.
- 'Authorization: Token <Token>'
- No body-element needed for the request.
- Some objects like Contact may return nulls in deeply nested fields
- Authorization token should be provided in the Authorization header.
- The default timeframe for report generation is the last 62 days.
- The default timeframe for reports is the last 62 days.
- Default timeframe is the last 62 days if no timeframe is specified.
- For this report there will always only be a single entry in the insights_account_ids
  list.
- Default timeframe of the last 62 days will be used if no timeframe is specified.
- This endpoint allows to generate multiple reports to be generated in one request.
- The internal id of this brand.
- The well known name of the brand.
- The internal id of this category is always present.
- The name of this category is always present.
- The timeframe for which the report should be generated can be set by specifying
  either the from_date and to_date parameters or the report_days parameter.
- The transaction type can be either DEBIT or CREDIT.
- The transaction method can be TRANSFER, DIRECT_DEBIT, INSTANT, or UNKNOWN.
- Pagination response includes count and offset parameters.
- Endpoints/objects for Modular Report Generation are deprecated
- Just add the type parameter to the specific report-request and combine all requests
  into one bulk request.
- Several objects are used by multiple insight requests and/or responses.
- Please see our report generation as described here
- The generated report will be part of the modular report response
- The id and name fields are always present.
- This report can be requested via the Modular Report endpoint.
- The generated report will be part of the modular report response.
- Further details about a category will be provided by the Category List call.
- The report can be requested via the Modular Report endpoint.
- The state of the transaction can be PROCESSED, PENDING, CANCELED, or FAILED.
- The type of transaction can be DEBIT or CREDIT.
- only_main_category option defaults to false
- Some objects like AccountInfo may return nulls in deeply nested fields
- This report is deprecated. It is recommended to use the Group By Category report
  which supports similar features.
- In the current version of the API the secure communication is not required and will
  not be enforced in production.
- It is highly recommended to implement the secure communication, as it will be mandatory
  in the next API version.
- request_id has to be a unique string identifier for every request.
- request_timestamp should contain a timestamp in UTC milliseconds.
- response_timestamp contains the response creation timestamp in UTC milliseconds.
- Report generation via Modular Report endpoint.
- The default for the only_main_category flag is false
- Group recurring transaction by categories, brand, amount and period. Only monthly
  period is supported at the moment.
- This report has no options to be considered.
- If set to 'dark', the app will render in dark mode, for 'system' the system setting
  shall be used
- If set to false the app will not close automatically after 3 seconds when flow is
  finished
- If set to false the last transition before the flow is finished will remain open
- If set to false the privacy policy will be shown in the XS2A App and not a new window
- Defines how redirects are handled in the XS2A App (options are 'newWindow' or 'sameWindow')
- Defines if the initial loader shall be skipped
- Sets the theme of the App (options are 'default' or 'embedded')
- If set to true the consent details in the footer of the App will be opened by default
- The XS2A App supports all common authentication methods provided by the banks.
- In the current version of the API the secure communication is not required and will
  not be enforced in production. Nonetheless, it is highly recommended to implement
  the secure communication, as it will be mandatory in the next API version.
- The URL for the Auth API is always dependent on a Flow and can therefore be obtained
  from the auth_url-field in the client_token that is part of the response when starting
  a Flow.
- To prevent replay attacks, include 'request_id' and 'request_timestamp' in every
  request.
- When the Auth API requires information from the consumer, the response needs to
  be sent to the Auth API as well.
- The XS2A Form is JSON based to enable usage of non-HTML elements as well as custom
  behaviour.
- The `Context` element acts as signal to e.g. apply special styling, but rendering
  the contents without considering the `Context` element itself will not break the
  form.
- Configuration options available for the XS2A App include appearanceMode, autoClose,
  hideTransitionOnFlowEnd, openPoliciesInNewWindow, psd2RedirectMethod, skipInitialLoader,
  theme, and unfoldConsentDetails.
- Requires setup of connected app in Klarna.
- Uses OAuth2
- The payload structure for responding to bank_search, form, and redirect are explicitly
  defined.
- The `Context` element can be used as an indicator to render its contents differently.
- Integrations that do not include the Polish market do not have to implement the
  padlock element.
- Uses OAuth2 with refresh token — requires setup of connected app in klarna
- Some objects may return nulls in deeply nested fields
- Server-side checks for the validity of the received value(s).
- Requires setup of connected app in Klarna
- The API requires authentication via OAuth.
- The URL is flow specific and should therefore not be reused between different flows.
- The response contains an Expires header which client implementations should follow.
- Renamed all occurrences for our domain api.playground.openbanking.klarna.com to
  api.openbanking.playground.klarna.com. The old domain is still working but deprecated.
- The change will affect sessions in the US immediately but will be introduced for
  all other countries on 2022-05-01.
- The Klarna Branded Integration is immediately capable of handling the link form
  element and therefore no change is needed.
errors:
- 'CONSENT.EXPIRED: New consent has to be generated if the previous one expired.'
- In case a consent call could not retrieve the data from the bank due to expiry,
  revocation, bank maintenance or other technical issues.
- Non-Successful Consent Calls may result in an error due to expiry, revocation, bank
  maintenance or other technical issues.
- 'EXCEPTION: Internal technical error occurred at your bank.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'HTTP 204: Session closed successfully.'
- 'HTTP 404: Session for provided id not found.'
- 'HTTP 409: Session with id <session.session_id> is still in running flow.'
- 'incomplete: Not all transactions could be retrieved'
- 'EXCEPTION: A category and a message will be present to provide information about
  what happened.'
- '401 Unauthorized: Check Token'
- '400 Bad Request: Validate request parameters'
- Request failed due to bank rejection.
- Transfer flow cannot be aborted once initiated.
- 'incomplete: Not all transactions retrieved due to a timeout.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '200 OK: Successful request'
- '400 Bad Request: Invalid request parameters'
- '401 Unauthorized: Invalid or expired token'
- '200 OK: Successful response indicating transfer state is retrieved.'
- 'EXCEPTION: If the state is EXCEPTION, an error message may be present'
- Banks typically do not return all types of balances.
- In case a bank only shares available and no other balance, it can mean that this
  is the actual balance of the account.
- 'CONSENT: A general error when using a consent that can not be specified in detail'
- 'CONSENT.EXPIRED: The consent lifetime has expired'
- 'CONSENT.REVOKED: The consent has been revoked'
- 'CONSENT.LIMIT_EXCEEDED: The daily limit of the consent usage has been exceeded'
- 'CONSENT.RESOURCE_NOT_GRANTED: The requested resource is no longer granted or available.'
- 'NOT_SUPPORTED.TRANSACTIONS_DATE_RANGE: The requested date range is not supported
  for this bank'
- 'badRequest: ''account_id'' is missing'
- 'notFound: Could not request a consent token for a session which is not logged in'
- 'internalServerError: Internal Server Error'
- '200 OK: Successful response'
- 'Invalid Transfer Token: Check the validity of the transfer token.'
- 'EXCEPTION: An error occurred during the refresh process'
- 'invalid_requests: The error format can be found in the error handling documentation.'
- 'CONSENT.LIMIT_EXCEEDED: The consent provided has been used too many times during
  the last 24 hours.'
- '400 Bad request: if required data is not obtainable.'
- Invalid requests
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: The requested resource could not be found.'
- USER.ABORTED
- USER.ACCESS_DENIED
- USER.ACCESS_DENIED.CREDENTIALS
- USER.ACCESS_DENIED.BLOCKED
- USER.CONFIGURATION
- USER.CONFIGURATION.CONFIRM_INFOPAGE
- USER.CONFIGURATION.ACCOUNT
- USER.CONFIGURATION.AUTHENTICATION_METHOD
- USER.SESSION
- USER.SESSION.TIMEOUT
- USER.SESSION.DUPLICATE
- USER.TRANSFER_DENIED
- USER.TRANSFER_DENIED.INSUFFICIENT_FUNDS
- USER.TRANSFER_DENIED.TRANSFER_TYPE_NOT_POSSIBLE
- BANK
- BANK.TRANSFER_DENIED
- BANK.TRANSFER_DENIED.DUPLICATE
- BANK.TRANSFER_DENIED.TO_ACCOUNT_BLOCKED
- BANK.TRANSFER_DENIED.UNSUPPORTED_CURRENCY
- BANK.TECHNICAL
- BANK.API_TIMEOUT
- TECHNICAL
- NOT_SUPPORTED
- NOT_SUPPORTED.SEVERAL_ACCESSORS
- NOT_SUPPORTED.TRANSACTIONS_DATE_RANGE
- NOT_SUPPORTED.BUSINESS_ACCOUNT
- NOT_SUPPORTED.ACCOUNTS_NOT_APPLICABLE
- NOT_SUPPORTED.AUTHENTICATION_METHOD
- NOT_SUPPORTED.AUTHENTICATION_METHOD.ON_MOBILE_DEVICE
- MAINTENANCE
- MAINTENANCE.BANK
- MAINTENANCE.BANK.ACCOUNTS
- MAINTENANCE.BANK.TRANSFER
- MAINTENANCE.XS2A
- CONSENT
- CONSENT.EXPIRED
- CONSENT.REVOKED
- CONSENT.LIMIT_EXCEEDED
- CONSENT.RESOURCE_NOT_GRANTED
- Error handling includes categories for errors that may occur during the flow.
- '400: There is an error with the request payload'
- '403: Permission denied. This can happen due to a missing or invalid Authorization
  header'
- 'VALIDATION_ERROR: size: must be less than or equal to 1000'
- 'API_TOKEN_INVALID: API token not valid!'
- 'COUNTY_CODE_INVALID: Invalid parameter country.'
- 'COUNTRY_NOT_FOUND: Country CN not supported'
auth_info:
  mentioned_objects:
  - XS2A API
  - Auth API
  - Consent API
  - keys
  - OAuth
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://docs.openbanking.klarna.com
  auth:
    type: oauth2
source_metadata: null
