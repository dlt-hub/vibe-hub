resources:
- name: hdb_raw_analytics
  endpoint:
    path: /hdb_raw_analytics
    method: POST
    data_selector: records
    params:
      operation: search_by_conditions
      schema: system
      table: hdb_raw_analytics
- name: hdb_analytics
  endpoint:
    path: /hdb_analytics
    method: POST
    data_selector: records
    params:
      operation: search_by_conditions
      schema: system
      table: hdb_analytics
- name: database
  endpoint:
    path: /create_database
    method: POST
    data_selector: operation
    params:
      schema: dev
- name: table
  endpoint:
    path: /create_table
    method: POST
    data_selector: operation
    params:
      database: dev
      table: dog
      primary_key: id
- name: insert_record
  endpoint:
    path: /insert
    method: POST
    data_selector: operation
    params:
      database: dev
      table: dog
      records:
      - id: 1
        dog_name: Penny
        owner_name: Kyle
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dog
  endpoint:
    path: /dev/dog
    method: INSERT
    data_selector: records
    params: {}
- name: hdb_raw_analytics
  endpoint:
    path: /hdb_raw_analytics
    method: POST
    data_selector: records
    params:
      operation: search_by_conditions
      schema: system
      table: hdb_raw_analytics
- name: hdb_analytics
  endpoint:
    path: /hdb_analytics
    method: POST
    data_selector: records
    params:
      operation: search_by_conditions
      schema: system
      table: hdb_analytics
- name: databases
  endpoint:
    path: /databases
    method: GET
    data_selector: databases
- name: tables
  endpoint:
    path: /tables
    method: GET
    data_selector: tables
- name: dog
  endpoint:
    path: /create_table
    method: POST
    data_selector: records
    params:
      operation: create_table
      database: dev
      table: dog
      primary_key: id
- name: insert_record
  endpoint:
    path: /insert_record
    method: POST
    data_selector: records
    params:
      operation: insert
      database: dev
      table: dog
      records:
      - id: 1
        dog_name: Penny
        owner_name: Kyle
- name: getUpdatedTime
  endpoint:
    path: /getUpdatedTime
    method: GET
    data_selector: timestamp
- name: wasLoadedFromSource
  endpoint:
    path: /wasLoadedFromSource
    method: GET
    data_selector: boolean
- name: dog
  endpoint:
    path: /dev/dog
    method: INSERT
    data_selector: records
    params: {}
- name: resources
  endpoint:
    path: /server/resources
    method: GET
- name: authenticateUser
  endpoint:
    path: /server/authenticateUser
    method: POST
- name: operation
  endpoint:
    path: /server/operation
    method: POST
- name: nodes
  endpoint:
    path: /server/nodes
    method: GET
- name: shards
  endpoint:
    path: /server/shards
    method: GET
- name: hostname
  endpoint:
    path: /server/hostname
    method: GET
- name: contentTypes
  endpoint:
    path: /server/contentTypes
    method: GET
- name: Dog
  endpoint:
    path: /Dog
    method: GET
    data_selector: records
    params: {}
- name: replication
  endpoint:
    path: /docs/deployments/configuration
    method: GET
- name: my-resource
  endpoint:
    path: /my-resource
    method: GET
- name: add_node
  endpoint:
    path: /docs/developers/operations-api/clustering#add-node
    method: POST
    data_selector: operation
    params:
      operation: add_node
      hostname: node-1
      url: wss://my-cluster-node-1:9925
- name: get_job
  endpoint:
    path: /developers/operations-api/jobs#get-job
    method: GET
    data_selector: ''
    params: {}
- name: search_jobs_by_start_date
  endpoint:
    path: /developers/operations-api/jobs#search-jobs-by-start-date
    method: GET
    data_selector: ''
    params: {}
- name: Dog
  endpoint:
    path: /Dog/
    method: GET
    data_selector: records
    params: {}
- name: DogWithHumanAge
  endpoint:
    path: /DogWithHumanAge
    method: GET
- name: DogWithBreed
  endpoint:
    path: /DogWithBreed
    method: GET
- name: CustomDog
  endpoint:
    path: /CustomDog
    method: POST
- name: replication
  endpoint:
    path: /docs/deployments/configuration
    method: GET
    data_selector: replication
- name: operations
  endpoint:
    path: /docs/developers/operations-api/clustering
    method: GET
    data_selector: operations
- name: my-resource
  endpoint:
    path: /my-resource
    method: GET
    data_selector: records
- name: Product
  endpoint:
    path: /Product
    method: GET
    data_selector: records
    params: {}
- name: Brand
  endpoint:
    path: /Brand
    method: GET
    data_selector: records
    params: {}
- name: describe_table
  endpoint:
    path: /describe_table
    method: GET
    data_selector: schema
    params: {}
- name: set_configuration
  endpoint:
    path: /set_configuration
    method: POST
    data_selector: config
    params: {}
- name: deploy_component
  endpoint:
    path: /deploy_component
    method: POST
    data_selector: deployment
    params: {}
- name: describe_database
  endpoint:
    path: /describe_database
    method: GET
    data_selector: database_info
    params:
      target: https://server.com:9925
- name: copy_compaction
  endpoint:
    path: /copy-db
    method: POST
    data_selector: copy-db
    params: {}
- name: compact_on_start
  endpoint:
    path: /compact-on-start
    method: POST
    data_selector: compact-on-start
    params: {}
- name: get_job
  endpoint:
    path: /developers/operations-api/jobs#get-job
    method: GET
    data_selector: message
    params:
      operation: get_job
      id: 4a982782-929a-4507-8794-26dae1132def
- name: search_jobs_by_start_date
  endpoint:
    path: /developers/operations-api/jobs#search-jobs-by-start-date
    method: GET
    data_selector: id
    params:
      operation: search_jobs_by_start_date
      from_date: 2021-01-25T22:05:27.464+0000
      to_date: 2021-01-25T23:05:27.464+0000
- name: describe_table
  endpoint:
    path: /describe_table
    method: GET
    data_selector: schema
    params:
      database: dev
      table: dog
- name: set_configuration
  endpoint:
    path: /set_configuration
    method: POST
    data_selector: result
    params:
      logging_level: error
- name: deploy_component
  endpoint:
    path: /deploy_component
    method: POST
    data_selector: result
    params:
      project: my-cool-app
      package: https://github.com/HarperDB/application-template
- name: get_components
  endpoint:
    path: /get_components
    method: GET
    data_selector: components
    params: {}
- name: search_by_id
  endpoint:
    path: /search_by_id
    method: GET
    data_selector: attributes
    params:
      database: dev
      table: dog
      ids: '["1"]'
      get_attributes: '["*"]'
- name: search_by_value
  endpoint:
    path: /search_by_value
    method: GET
    data_selector: attributes
    params:
      table: dog
      search_attribute: name
      search_value: harper
      get_attributes: '["id", "name"]'
- name: sql
  endpoint:
    path: /sql
    method: POST
    data_selector: results
    params:
      sql: select * from dev.dog where id="1"
notes:
- JSON is the most widely used content type, and is relatively readable and easy to
  work with.
- CBOR is a highly efficient binary format, and is a recommended format for most production
  use cases with Harper.
- MessagePack is another efficient binary format like CBOR, with support for all Harper
  data types.
- Comma-separated values is an easy to use and understand format that can be readily
  imported into spreadsheets or used for data processing.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Fix for applying offset/limit on searches with remaining deleted records
- Throttling of non-safe HTTP requests and cache resolutions
- Fix for skipping application of field select() after a custom get method
- Fix for applying the correct permissions when deploying from Windows
- Disable fail-over handling by default for replication
- Applies throttling to POST requests to ensure that the event queue gets a chance
  to process events to avoid starvation of other ongoing functions like replication.
- For defined schemas, don't allow updates from remote nodes that could cause conflicts
  and repeated schema change requests
- New harper-chrome docker container for accessing Chrome binaries for use with tools
  like Puppeteer
- Improved rolling restart handling of errors with reaching individual nodes
- Defined cleaner operation object to avoid accident leaking of credentials with logging
- Harper now includes functionality for automatically trying to clean up and evict
  non-essential data when storage is running low.
- Add new http configuration option `corsAccessControlAllowHeaders`
- Fix for saving audit log entries for large keys (> 1KB)
- Security fix for handling missing passwords
- Skip bin links for NPM installation to avoid access issues
- Fix for DOS vulnerability in large headers with cache-control and replication headers
- Fix for handling a change in the schema type for sub-fields in a nested object
- Add support for content type handlers to return iterators
- Fix for session management with custom authentication handler
- Updates for Node.js V23 compatibility
- Fix for sorting on nested properties
- Fix for querying on not_equal to a null with object values
- Re-introduce declarative roles and permissions
- Fix for OpenAPI endpoint
- Fix for exports of `harperdb` package/module
- Fix issue where non-RSA keys were not being parsed correctly on startup.
- Fix a memory leak when cluster_network closes a hub connection
- Improved MQTT error handling, with less verbose logging of more common errors, and
  treat a missing subscription as an invalid/missing topic
- Record analytics and server-timing header even when cache resolution fails
- Reset the restart limit for manual restarts to ensure that NATS process will continue
  to restart after more than 10 manual restarts
- Only apply caching directives (from headers) to tables/resources that are configured
  to be caching, sourced from another resource
- Catch/tolerate errors on serializing objects for logging
- Fixed an issue with iterating/serializing query results with a limit.
- Fixed an issue that was preventing the caching of structured records in memory.
- Fixed and added several TypeScript exported types including tables, databases, Query,
  and Context.
- Fixed logging warnings about license limits after a license is updated.
- Don't register a certificate as the default certificate for non-SNI connections
  unless it lists an IP address in the SAN field.
- Avoid unnecessary cookie session creation without explicit login
- Added support for caching directives in operations API
- Fixed issue with creating metadata for table with no primary key
- Added support for 'cache only' mode to view table data without origin resolution
- Added partial support for cookie-based authentication
- Added support for browsing tables with no primary key
- Improved performance for sorting tables
- Fix for querying for large strings (over 255 characters)
- Fixed parsing of dates from epoch millisecond times in queries
- Fixed CRDT incrementation of different data types
- Adjustments to text/plain content type q-value handling
- Fixed parsing of passwords with a colon
- Added MQTT events for connections, authorization, and disconnections
- Disable compression on server-sent events to ensure messages are immediately sent
  (not queued for later deliver)
- Update geoNear function to tolerate null values
- lmdb-js fix to ensure prefetched keys are pinned in memory until retrieved
- Add header to indicate start of a new authenticated session (for studio to identify
  authenticated sessions)
- The restart_service operation is now executed as a job, making it possible to track
  the progress of a restart (which is performed as a rolling restart of threads)
- Disable Nagle's algorithm for TCP connections to improve performance
- Append Server-Timing header if a fastify route has already added one
- Avoid symlinking the harperdb directory to itself
- Fix for deleting an empty database
- Upgrade ws and pm2 packages for security vulnerabilities
- Improved TypeScript definitions for Resource and Context.
- The context of a source can set noCacheStore to avoid caching the results of a retrieval
  from source
- Better error reporting of MQTT parsing errors and termination of connections for
  compliance
- Default logging level was changed to warn.
- Default clustering log level was changed to info.
- clustering.republishMessages now defaults to false.
- HarperDB now runs natively on Windows 10 and 11 without the need to run in a container
  or installed in WSL. Windows is only intended for evaluation and development purposes,
  not for production work loads.
- This is documentation for Harper Docs 4.4, which is no longer actively maintained.
- This is documentation for Harper Docs 4.1, which is no longer actively maintained.
- The http element has been expanded.
- threads has moved out of the http element and now is its own top level element.
- authentication section was moved out of the operationsApi section and is now its
  own top level element/section.
- analytics.aggregatePeriod was added.
- operationsApi.foreground was removed.
- Made operationsApi configuration optional.
- Added a securePort parameter to operationsApi and http used for setting the https
  port.
- Added a new top level tls section.
- Removed customFunctions.enabled, customFunctions.network.https, operationsApi.network.https
  and operationsApi.nodeEnv.
- Added an element called componentRoot which replaces customFunctions.root.
- Updated custom pathing to use databases instead of schemas.
- Added logging.auditAuthEvents.logFailed and logging.auditAuthEvents.logSuccessful
  for enabling logging of auth events.
- A new mqtt section was added.
- Best-practice to define schemas for tables to ensure predictable, consistent structures
  with data integrity.
- Individual attributes are reflexively created as data is ingested.
- 'Get started by setting `graphql: true` in `config.yaml`.'
- Harper's GraphQL component is inspired by the GraphQL Over HTTP specification; however,
  it does not fully implement neither that specification nor the GraphQL specification.
- The Harper GraphQL querying system is strictly limited to exported Harper Resources.
- Harper databases hold a collection of tables together in a single file that are
  transactionally connected.
- With dynamic schemas individual attributes are reflexively created as data is ingested.
- Harper database metadata (database names, table names, and attribute/column names)
  are case sensitive.
- Spaces are allowed, but not recommended as best practice.
- If you want to act upon a table or resource, querying or writing to it, then use
  the static methods to initially access or write data.
- If you want to define custom behavior for a table or resource, then extend the class
  and override/define instance methods.
- Indexes have been automatically created for `dog_name` and `owner_name` attributes.
- This document applies to self-hosted Harper instances only.
- Harper can be upgraded using a combination of npm and built-in Harper upgrade scripts.
- Harper configuration settings can be passed as Docker run environment variables.
- If no environment variables are provided, Harper will operate with default configuration
  settings.
- 'Get started by setting graphql: true in config.yaml.'
- Queries can either be GET or POST requests.
- GraphQL component is inspired by the GraphQL Over HTTP specification; however, it
  does not fully implement neither that specification nor the GraphQL specification.
- The querying system loosely supports fragments.
- Endpoints created with Harper automatically support Basic, Cookie, and JWT authentication
  methods
- Harper supports heterogeneous records
- Harper does not currently include any built-in applications, making 'custom applications'
  a bit redundant.
- Requests need to be authenticated with basic auth or JWT authentication
- Harper supports MQTT over standard TCP sockets or over WebSockets.
- mTLS is also supported by enabling it in the configuration.
- It is recommended that you use the latest version (V2) of the Resource API with
  the legacy instance binding behavior disabled.
- By default, Harper will replicate all the data in all the databases.
- You can configure which databases are replicated, and then override this behavior
  on a per-table basis.
- CBOR is generally the most efficient and powerful encoding format, with the best
  performance, most compact encoding, and most expansive ability to encode different
  data types like Dates, Maps, and Sets.
- You may need to go to your harper directory and set it up as a link first
- Clone node does not require any additional configuration apart from the variables
  referenced above.
- Clone will only run once, when you first start the container.
- Some of the storage configuration (such as compression) cannot be updated on existing
  databases, this is where the following options are useful.
- Whenever upgrading your Harper installation it is recommended you make a backup
  of your data first.
- By default, Harper automatically authorizes all requests from loopback IP addresses
  as the superuser.
- Endpoints created with Harper automatically support Basic, Cookie, and JWT authentication
  methods.
- As of Harper v4.6, a new, experimental component system has been introduced called
  plugins.
- Requests need to be authenticated with basic auth or JWT authentication.
- Harper provides real-time access to data and messaging.
- Harper supports multiple standardized protocols to facilitate diverse standards-based
  client interaction.
- Harperâ€™s replication system is designed to make distributed data replication fast
  and reliable across multiple nodes.
- Harper encourages developers to utilize other querying tools over SQL for performance
  purposes.
- The SQL parser is still actively being developed, many SQL features may not be optimized
  or utilize indexes.
- Some of the storage configuration (such as compression) cannot be updated on existing
  databases, this is where the following options are useful. They will create a new
  compressed copy of the database with any updated configuration.
- HarperDB must be restarted for changes to take effect.
- The CLI can also be used to run operations on remote Harper instances.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'You are not authorized to access this: 403'
- 'Internal Server Error: 500'
- 'auth-failed: When a client fails to authenticate'
- Check your running containers with 'docker ps'.
- Inspect the logs with 'docker logs <container_id>'.
- '401 Unauthorized: Recheck your credentials.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - User
  - CLI_TARGET_USERNAME
  - CLI_TARGET_PASSWORD
client:
  base_url: https://www.harpersystems.dev
  auth:
    type: oauth2
source_metadata: null
