resources:
- name: verify_signature
  endpoint:
    path: /sdk/v2/signature/verify
    method: POST
    data_selector: data
- name: User NFTs
  endpoint:
    path: /api-docs/api-docs-1/nfts
    method: GET
- name: User NFTs
  endpoint:
    path: /api-docs/api-docs-1/nfts
    method: GET
- name: import_nft_collections
  endpoint:
    path: /dashboard/import-nfts/add-a-collection
    method: GET
- name: staking_support
  endpoint:
    path: /staking/support
    method: POST
    data_selector: wallets
    params: {}
- name: create_beta_codes
  endpoint:
    path: /dashboard/beta-codes/create-a-beta-code
    method: POST
- name: manage_beta_codes
  endpoint:
    path: /dashboard/beta-codes/manage-beta-codes
    method: GET
- name: Beta Code Collection
  endpoint:
    path: /beta-codes/collections
    method: GET
- name: beta_codes
  endpoint:
    path: /dashboard/beta-codes/create
    method: POST
- name: tournament
  endpoint:
    path: /api/tournaments
    method: POST
    data_selector: tournament
    params: {}
- name: tournaments
  endpoint:
    path: /api-docs/api-docs-1/tournaments-api
    method: GET
    data_selector: tournaments
    params: {}
- name: FIAT Purchases
  endpoint:
    path: /dashboard/in-app-purchases/payment-gateways/fiat-purchases
    method: GET
- name: Crypto Purchases
  endpoint:
    path: /dashboard/in-app-purchases/payment-gateways/crypto-purchases
    method: GET
- name: user_progress
  endpoint:
    path: /api/v1/user_progress
    method: POST
    data_selector: progress
    params: {}
- name: create_quest
  endpoint:
    path: /api/v1/quests
    method: POST
    data_selector: quest
    params: {}
- name: add_stat
  endpoint:
    path: /api/v1/stats
    method: POST
    data_selector: stat
    params: {}
- name: user
  endpoint:
    path: /api-docs/api-docs-1/user
    method: GET
- name: nfts
  endpoint:
    path: /api-docs/api-docs-1/nfts
    method: GET
- name: tournaments
  endpoint:
    path: /api-docs/api-docs-1/tournaments-api
    method: GET
- name: User Progress Reporting
  endpoint:
    path: /dashboard/reward-center/game-quests/update-progress
    method: POST
- name: user_data
  endpoint:
    path: /getUserData
    method: GET
- name: collections
  endpoint:
    path: /getCollections
    method: GET
- name: tournaments
  endpoint:
    path: /getTournaments
    method: GET
- name: user_data
  endpoint:
    path: /user/data
    method: GET
    data_selector: user_info
    params: {}
- name: nft_collections
  endpoint:
    path: /nft/collections
    method: GET
    data_selector: collections
    params: {}
- name: tournaments
  endpoint:
    path: /tournaments
    method: GET
    data_selector: tournament_info
    params: {}
- name: Generate Reikey
  endpoint:
    path: /sdk/auth/v2/dev/reikey
    method: GET
- name: Get User Credentials
  endpoint:
    path: /sdk/auth/v2/session/reikey/:reikey
    method: GET
- name: Refresh User token
  endpoint:
    path: /sdk/auth/v2/session/refresh
    method: POST
- name: Close Session
  endpoint:
    path: /sdk/auth/v2/session/closerei/:reikey
    method: POST
- name: generate_reikey
  endpoint:
    path: /sdk/auth/v2/dev/reikey
    method: GET
- name: get_user_credentials
  endpoint:
    path: /sdk/auth/v2/session/reikey/:reikey
    method: GET
- name: refresh_user_token
  endpoint:
    path: /sdk/auth/v2/session/refresh
    method: POST
- name: close_session
  endpoint:
    path: /sdk/auth/v2/session/closerei/:reikey
    method: POST
- name: otp_login
  endpoint:
    path: /sdk/auth/v2/signin/otp-login
    method: POST
- name: otp_verify
  endpoint:
    path: /sdk/auth/v2/signin/otp-verify
    method: POST
- name: refresh_session
  endpoint:
    path: /sdk/auth/v2/session/refresh
    method: POST
- name: sign_out
  endpoint:
    path: /sdk/auth/v2/session/signout
    method: POST
- name: qr_verify
  endpoint:
    path: /sdk/auth/v2/signin/qr-verify
    method: POST
- name: userinfo
  endpoint:
    path: /userinfo
    method: GET
- name: friends
  endpoint:
    path: /friends/
    method: GET
- name: otp_login
  endpoint:
    path: /sdk/auth/v2/signin/otp-login
    method: POST
- name: otp_verify
  endpoint:
    path: /sdk/auth/v2/signin/otp-verify
    method: POST
- name: refresh_session
  endpoint:
    path: /sdk/auth/v2/session/refresh
    method: POST
- name: sign_out
  endpoint:
    path: /sdk/auth/v2/session/signout
    method: POST
- name: qr_verify
  endpoint:
    path: /sdk/auth/v2/signin/qr-verify
    method: POST
- name: user_nfts
  endpoint:
    path: /sdk/v2/nfts/user
    method: GET
    data_selector: data
- name: userinfo
  endpoint:
    path: /sdk/v2/userinfo
    method: GET
    data_selector: data
- name: friends
  endpoint:
    path: /sdk/v2/friends/
    method: GET
    data_selector: data
- name: user_nfts
  endpoint:
    path: /sdk/v2/nfts/user
    method: GET
    data_selector: data
- name: get_tournaments
  endpoint:
    path: /tournaments/
    method: GET
    data_selector: data
    params:
      filter: ACTIVE
- name: submit_score
  endpoint:
    path: /tournaments/:tournamentId/submit
    method: POST
    data_selector: data
- name: get_tournaments
  endpoint:
    path: /tournaments/
    method: GET
    data_selector: data
    params:
      filter: ACTIVE
- name: submit_score
  endpoint:
    path: /tournaments/:tournamentId/submit
    method: POST
    data_selector: data
- name: leaderboard
  endpoint:
    path: /tournaments/:tournamentId/leaderboard
    method: GET
    data_selector: data.entries
- name: scores
  endpoint:
    path: /tournaments/:tournamentId/scores
    method: GET
    data_selector: data
- name: leaderboard
  endpoint:
    path: /tournaments/:tournamentId/leaderboard
    method: GET
    data_selector: data.entries
    params: {}
- name: scores
  endpoint:
    path: /tournaments/:tournamentId/scores
    method: GET
    data_selector: data
    params: {}
- name: submit_game_stat
  endpoint:
    path: /sdk/v2/game-stats
    method: POST
- name: game_stat
  endpoint:
    path: /sdk/v2/game-stats
    method: POST
notes:
- All interactions against the Elixir API should be authenticated via an API Key.
- We provide a development key to allow you to develop the integration locally and
  a production key for when you are ready to go live.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- 'The editing process can be done in different stages: You can save the status of
  what you edited and continue with it later.'
- If your organization is sharing the publisher account with many members, avoid making
  changes simultaneously, as it may lead to overlapping errors and loss of information.
- The public key will be constantly available at the Developer Dashboard.
- The private key will not be stored in Elixir for security reasons.
- If you lose or want to change for security reasons your keys, you will need to delete
  an existing key pair and generate a new one.
- The public key is safe to be included in your game client.
- The private key should not be included in any form in your distributable game clients.
- Elixir will import the collection artwork and description.
- You can download in CSV format the entire collection of beta codes to distribute
  easily.
- Use the developer dashboard to set up tournament configuration.
- Use the appropriate Production API Key in your game server / backend (private key)
  and optionally in the client (public key) if you want to display the available tournaments
  inside your game or even the actual leaderboards.
- Our IAP system introduces an overlay seamlessly integrated into the gaming interface,
  allowing users to make purchases without leaving the gaming environment and optimizing
  user engagement by simplifying the purchase process.
- You can create private tournaments using these settings.
- Once tested, you can make your tournament settings public.
- The integration and utilization of the Elixir SDK Auth constitute mandatory prerequisites
  for engaging with the In-App Purchases system.
- Ensure you are logged in with your publisher account.
- Switch to make the event public should be disabled during development/testing.
- See the Elixir In-App purchases policy before submitting a product for review to
  avoid getting rejected.
- Integrating the Reward Center into your game is a fantastic way to reward players
  for their dedication and accomplishments, fostering a positive and rewarding gaming
  experience.
- Integrating our Unity SDK into your game takes minutes
- Your public key can be obtained in the Developer Dashboard.
- The public key is used to initialize the Elixir SDK.
- For games with existing User entities and account credentials, it's advised to add
  a 'Link Account' feature.
- Uses OAuth2 authentication
- Each JWT will have an expiration time, to extend the session it will be required
  to ask for a new token.
- Use the Development API key during the development and testing of your integration
  to work with a private tournament.
- The endpoint requires all requests to be signed with RSA signatures generated using
  private keys known only to authorized game developers.
- This endpoint is protected using the Elixir RSA Signature.
- Token exchange is an extension to the OAuth 2.0 protocol that allows one token to
  be obtained by providing another valid token.
- Token exchange allows one token to be obtained by providing another valid token.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400: Bad Request'
- 400 A reikey must be generated in a space of 10 seconds if the reikey has not been
  activated
- '400: Invalid API Key'
- 'status: 400, code: 1001, message: Invalid API Key'
- '400: Bad Request Failed response'
- '1001: Invalid API Key'
- 'INVALID_REFRESH_TOKEN: Invalid Refresh Token'
- '1000: Invalid Credentials!'
- The argument 'encoding' is invalid for data of length 1151. Received 'hex'
- Invalid API Key
- INVALID_REFRESH_TOKEN
- Invalid Credentials!
- '200: OK'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://kend.elixir.app
  auth:
    type: oauth2
    location: header
    header_name: Authorization
  headers:
    x-api-key: Public Key available on the Developer Dashboard
source_metadata: null
