resources:
- name: deploy_hooks
  endpoint:
    path: /deploy_hooks
    method: POST
    data_selector: hook
- name: deployments
  endpoint:
    path: /client/v4/accounts/{account_id}/pages/projects/{project_name}/deployments
    method: GET
    data_selector: result
    params: {}
- name: update_project
  endpoint:
    path: /client/v4/accounts/{account_id}/pages/projects/{project_name}
    method: PATCH
    data_selector: result
    params: {}
- name: Deploy Hooks
  endpoint:
    path: /pages/configuration/deploy-hooks
    method: GET
    data_selector: deploy_hooks
    params: {}
- name: Early Hints
  endpoint:
    path: /pages/configuration/early-hints
    method: GET
    data_selector: early_hints
    params: {}
- name: deployments
  endpoint:
    path: /accounts/{account_id}/pages/projects/{project_name}/deployments
    method: GET
    data_selector: result
- name: project
  endpoint:
    path: /accounts/{account_id}/pages/projects/{project_name}
    method: PATCH
    data_selector: result
- name: deploy_hooks
  endpoint:
    path: /api/v1/deploy_hooks
    method: GET
    data_selector: hooks
    params: {}
- name: custom_domains
  endpoint:
    path: /api/v1/custom_domains
    method: GET
    data_selector: domains
    params: {}
- name: Deploy Hooks
  endpoint:
    path: /pages/configuration/deploy-hooks/
    method: GET
- name: Early Hints
  endpoint:
    path: /pages/configuration/early-hints/
    method: GET
- name: deployments
  endpoint:
    path: /client/v4/accounts/{account_id}/pages/projects/{project_name}/deployments
    method: GET
    data_selector: result
    params: {}
- name: projects
  endpoint:
    path: /client/v4/accounts/{account_id}/pages/projects/{project_name}
    method: PATCH
    data_selector: result
    params: {}
- name: Brunch
  endpoint:
    method: GET
    params: {}
- name: Docusaurus
  endpoint:
    method: GET
    params: {}
- name: Gatsby
  endpoint:
    method: GET
    params: {}
- name: Gridsome
  endpoint:
    method: GET
    params: {}
- name: Hexo
  endpoint:
    method: GET
    params: {}
- name: hugo_site
  endpoint:
    path: /hugo/new
    method: POST
    data_selector: site
    params: {}
- name: Pelican
  endpoint:
    path: /pages/framework-guides/deploy-a-pelican-site/
    method: GET
    data_selector: output
    params: {}
- name: Preact
  endpoint:
    path: /pages/framework-guides/deploy-a-preact-site/
    method: GET
    data_selector: output
    params: {}
- name: Nuxt
  endpoint:
    path: /pages/framework-guides/deploy-a-nuxt-site/
    method: GET
    data_selector: output
    params: {}
- name: Qwik
  endpoint:
    path: /pages/framework-guides/deploy-a-qwik-site/
    method: GET
- name: React
  endpoint:
    path: /pages/framework-guides/deploy-a-react-site/
    method: GET
- name: Remix
  endpoint:
    path: /pages/framework-guides/deploy-a-remix-site/
    method: GET
- name: svelte_app
  endpoint:
    path: /services/data/vXX.X/sobjects/SvelteApp
    method: POST
    data_selector: records
    params: {}
- name: project
  endpoint:
    path: /create
    method: POST
    data_selector: project_data
    params: {}
- name: project
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params: {}
- name: deploy
  endpoint:
    path: /deploys
    method: GET
    data_selector: deploys
    params: {}
- name: cloudflare_access_plugin
  endpoint:
    path: /functions/plugins/cloudflare-access
    method: GET
- name: deployments
  endpoint:
    path: /client/v4/accounts/{account_id}/pages/projects/{project_name}/deployments
    method: GET
    data_selector: result
    params: {}
- name: update_project
  endpoint:
    path: /client/v4/accounts/{account_id}/pages/projects/{project_name}
    method: PATCH
    data_selector: null
    params: {}
- name: Hugo
  endpoint:
    path: /pages/framework-guides/deploy-a-hugo-site/
    method: GET
    data_selector: site
    params: {}
- name: Jekyll
  endpoint:
    path: /pages/framework-guides/deploy-a-jekyll-site/
    method: GET
    data_selector: site
    params: {}
- name: brunch
  endpoint:
    path: /framework-guides/deploy-a-brunch-site/
    method: GET
    data_selector: records
    params: {}
- name: docusaurus
  endpoint:
    path: /framework-guides/deploy-a-docusaurus-site/
    method: GET
    data_selector: records
    params: {}
- name: gatsby
  endpoint:
    path: /framework-guides/deploy-a-gatsby-site/
    method: GET
    data_selector: records
    params: {}
- name: gridsome
  endpoint:
    path: /framework-guides/deploy-a-gridsome-site/
    method: GET
    data_selector: records
    params: {}
- name: hexo
  endpoint:
    path: /framework-guides/deploy-a-hexo-site/
    method: GET
    data_selector: records
    params: {}
- name: deployments
  endpoint:
    path: /api/v1/deployments
    method: GET
    data_selector: deployments
    params: {}
- name: projects
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: projects
    params: {}
- name: Qwik
  endpoint:
    path: /pages/framework-guides/deploy-a-qwik-site/
    method: GET
- name: React
  endpoint:
    path: /pages/framework-guides/deploy-a-react-site/
    method: GET
- name: Remix
  endpoint:
    path: /pages/framework-guides/deploy-a-remix-site/
    method: GET
- name: analog
  endpoint:
    path: /deploy-an-analog-site
    method: GET
    data_selector: records
    params: {}
- name: angular
  endpoint:
    path: /deploy-an-angular-site
    method: GET
    data_selector: records
    params: {}
- name: Vite 3
  endpoint:
    path: /deploy-a-vite3-project/
    method: GET
    data_selector: project
- name: VitePress
  endpoint:
    path: /deploy-a-vitepress-site/
    method: GET
    data_selector: project
- name: Vue
  endpoint:
    path: /deploy-a-vue-site/
    method: GET
    data_selector: project
- name: Zola
  endpoint:
    path: /deploy-a-zola-site/
    method: GET
    data_selector: project
- name: Cloudflare Access
  endpoint:
    path: /functions/plugins/cloudflare-access
    method: GET
- name: CORS headers
  endpoint:
    path: /functions/examples/cors-headers
    method: GET
- name: A/B testing
  endpoint:
    path: /functions/examples/ab-testing
    method: GET
- name: projects_with_existing_wrangler_file
  endpoint:
    path: /projects_with_existing_wrangler_file
    method: GET
    data_selector: projects
    params: {}
- name: projects_without_existing_wrangler_file
  endpoint:
    path: /projects_without_existing_wrangler_file
    method: GET
    data_selector: projects
    params: {}
- name: form_submission
  endpoint:
    path: /api/submit
    method: POST
- name: next_config_properties
  endpoint:
    path: /api/next/config
    method: GET
    data_selector: properties
    params: {}
- name: projects
  endpoint:
    path: /accounts/{account_id}/pages/projects
    method: GET
    data_selector: result
    params: {}
- name: deployments
  endpoint:
    path: /accounts/{account_id}/pages/projects/{project_name}/deployments
    method: GET
    data_selector: result
    params: {}
- name: hexo
  endpoint:
    path: /deploy/hexo
    method: POST
    data_selector: data
    params: {}
- name: Pelican
  endpoint:
    path: /deploy-a-pelican-site
    method: POST
    data_selector: output
    params: {}
- name: Preact
  endpoint:
    path: /deploy-a-preact-site
    method: POST
    data_selector: output
    params: {}
- name: Qwik
  endpoint:
    path: /pages/framework-guides/deploy-a-qwik-site/
    method: GET
- name: React
  endpoint:
    path: /pages/framework-guides/deploy-a-react-site/
    method: GET
- name: Remix
  endpoint:
    path: /pages/framework-guides/deploy-a-remix-site/
    method: GET
- name: svelte_project
  endpoint:
    path: /projects/svelte
    method: POST
    data_selector: project_data
- name: vite
  endpoint:
    path: /vite
    method: POST
    data_selector: result
    params: {}
- name: vue
  endpoint:
    path: /vue
    method: POST
    data_selector: result
    params: {}
- name: vitepress
  endpoint:
    path: /vitepress
    method: POST
    data_selector: result
    params: {}
- name: zola
  endpoint:
    path: /zola
    method: POST
    data_selector: result
    params: {}
- name: analog
  endpoint:
    path: /deploy-an-analog-site
    method: GET
    data_selector: records
- name: angular
  endpoint:
    path: /deploy-an-angular-site
    method: GET
    data_selector: records
- name: astro
  endpoint:
    path: /deploy-an-astro-site
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: Elder.js
  endpoint:
    path: /framework-guides/deploy-an-elderjs-site/
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: Eleventy
  endpoint:
    path: /framework-guides/deploy-an-eleventy-site/
    method: GET
    data_selector: records
    params: {}
- name: Ember.js
  endpoint:
    path: /framework-guides/deploy-an-emberjs-site/
    method: GET
    data_selector: records
    params: {}
- name: MkDocs
  endpoint:
    path: /framework-guides/deploy-an-mkdocs-site/
    method: GET
    data_selector: records
    params: {}
- name: Static HTML
  endpoint:
    path: /framework-guides/deploy-anything/
    method: GET
    data_selector: records
    params: {}
- name: Web Analytics
  endpoint:
    path: /web-analytics
    method: GET
    data_selector: metrics
    params: {}
- name: custom_http_headers
  endpoint:
    path: /pages/how-to/add-custom-http-headers
    method: GET
    data_selector: docs
    params: {}
- name: build_commands_per_branch
  endpoint:
    path: /pages/how-to/build-commands-branches
    method: GET
    data_selector: docs
    params: {}
- name: custom_domain_branch
  endpoint:
    path: /pages/how-to/custom-branch-aliases
    method: GET
    data_selector: docs
    params: {}
- name: deploy_wordpress_site
  endpoint:
    path: /pages/how-to/deploy-a-wordpress-site
    method: GET
    data_selector: docs
    params: {}
- name: build_configuration
  endpoint:
    path: /build/configuration
    method: GET
    data_selector: records
- name: git_integration
  endpoint:
    path: /git/integration
    method: GET
    data_selector: records
- name: custom_domains
  endpoint:
    path: /custom/domains
    method: GET
    data_selector: records
- name: contact_form
  endpoint:
    path: /f/mqldaqwx
    method: POST
    data_selector: data
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
    params: {}
- name: post
  endpoint:
    path: /api/post/{id}
    method: GET
    data_selector: post
    params: {}
- name: post
  endpoint:
    path: /sanity/api/v1/posts
    method: GET
    data_selector: records
- name: form_submission
  endpoint:
    path: /api/submit
    method: POST
    data_selector: form_data
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: post
  endpoint:
    path: /api/post/{id}
    method: GET
    data_selector: post
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: deployments
  endpoint:
    path: /client/v4/accounts/{account_id}/pages/projects/{project_name}/deployments
    method: GET
    data_selector: result
    params: {}
- name: project
  endpoint:
    path: /client/v4/accounts/{account_id}/pages/projects/{project_name}
    method: PATCH
    data_selector: result
    params: {}
- name: Hexo
  endpoint:
    path: /deploy-a-hexo-site/
    method: GET
- name: Gatsby
  endpoint:
    path: /deploy-a-gatsby-site/
    method: GET
- name: Gridsome
  endpoint:
    path: /deploy-a-gridsome-site/
    method: GET
- name: Docusaurus
  endpoint:
    path: /deploy-a-docusaurus-site/
    method: GET
- name: Brunch
  endpoint:
    path: /deploy-a-brunch-site/
    method: GET
- name: Pelican
  endpoint:
    path: /pages/framework-guides/deploy-a-pelican-site/
    method: GET
    data_selector: output
    params: {}
- name: Preact
  endpoint:
    path: /pages/framework-guides/deploy-a-preact-site/
    method: GET
    data_selector: output
    params: {}
- name: Nuxt
  endpoint:
    path: /pages/framework-guides/deploy-a-nuxt-site/
    method: GET
    data_selector: output
    params: {}
- name: svelte_app
  endpoint:
    path: /create-cloudflare
    method: GET
    data_selector: records
    params: {}
- name: Qwik
  endpoint:
    path: /pages/framework-guides/deploy-a-qwik-site/
    method: GET
    data_selector: docs
- name: React
  endpoint:
    path: /pages/framework-guides/deploy-a-react-site/
    method: GET
    data_selector: docs
- name: Remix
  endpoint:
    path: /pages/framework-guides/deploy-a-remix-site/
    method: GET
    data_selector: docs
- name: zola_project
  endpoint:
    path: /create/zola-project
    method: POST
    data_selector: project
- name: analog
  endpoint:
    path: /deploy-an-analog-site
    method: GET
    data_selector: records
- name: angular
  endpoint:
    path: /deploy-an-angular-site
    method: GET
    data_selector: records
- name: astro
  endpoint:
    path: /deploy-an-astro-site
    method: GET
    data_selector: records
- name: Elder.js
  endpoint:
    path: /framework-guides/deploy-an-elderjs-site/
    method: GET
    data_selector: records
- name: Eleventy
  endpoint:
    path: /framework-guides/deploy-an-eleventy-site/
    method: GET
    data_selector: records
- name: Ember.js
  endpoint:
    path: /framework-guides/deploy-an-emberjs-site/
    method: GET
    data_selector: records
- name: MkDocs
  endpoint:
    path: /framework-guides/deploy-an-mkdocs-site/
    method: GET
    data_selector: records
- name: Static HTML
  endpoint:
    path: /framework-guides/deploy-anything/
    method: GET
    data_selector: records
- name: middleware
  endpoint:
    path: /functions/_middleware.js
    method: GET
- name: pages_plugins
  endpoint:
    path: /functions/plugins
    method: GET
- name: my-pages-app
  endpoint:
    path: /pages/download/config
    method: GET
    data_selector: projects
    params: {}
- name: Contact Us Form
  endpoint:
    path: /f/mqldaqwx
    method: POST
- name: submit_form
  endpoint:
    path: /api/submit
    method: POST
- name: submit_form
  endpoint:
    path: /api/submit
    method: POST
    data_selector: data
    params: {}
- name: static_assets
  endpoint:
    path: /pages/functions/examples/cors-headers
    method: GET
    data_selector: headers
    params: {}
- name: R2 Bucket
  endpoint:
    path: /r2_buckets
    method: POST
    data_selector: r2_buckets
    params: {}
- name: GitHub Integration
  endpoint:
    path: /github_integration
    method: POST
    data_selector: github_integration
    params: {}
- name: GitLab Integration
  endpoint:
    path: /gitlab_integration
    method: POST
    data_selector: gitlab_integration
    params: {}
- name: generate_image
  endpoint:
    path: /greet
    method: GET
    data_selector: image_data
    params: {}
- name: create_message
  endpoint:
    path: /v1/spaces.messages/create
    method: POST
    data_selector: message
    params: {}
- name: get_space
  endpoint:
    path: /v1/spaces/{spaceId}
    method: GET
    data_selector: space
    params: {}
- name: list_spaces
  endpoint:
    path: /v1/spaces
    method: GET
    data_selector: spaces
    params: {}
notes:
- Builds will timeout after 20 minutes.
- You can build up to 500 times per month on the Free plan.
- The first build to occur after enabling build caching on your Pages project will
  save to cache.
- Every subsequent build will restore from cache unless configured otherwise.
- Deploy Hooks are uniquely linked to your project and do not require additional authentication
  to be used.
- 'At least one of the following token permissions is required: Pages Read or Pages
  Write.'
- Pages will default to setting your project’s includes paths to everything ([*])
  and excludes paths to nothing ([])
- Make sure there are no emojis or special characters as part of your commit message
  in a Pages project that is integrated with GitHub or GitLab as it can potentially
  cause issues when building the project.
- When deploying your Pages project, you may wish to point custom domains (or subdomains)
  to your site.
- You cannot switch to Direct Upload later
- Cloudflare Workers now also supports Git integrations to automatically build and
  deploy Workers from your connected Git repository.
- Early Hints is enabled automatically on all pages.dev domains and custom domains.
- Redirects defined in the `_redirects` file are not applied to requests served by
  Pages Functions.
- In most situations, you should avoid setting up any custom caching on your site.
- Pages comes with built in caching defaults that are optimized for caching as much
  as possible, while providing the most up to date content.
- If you add caching to your custom domain, it may lead to stale assets being served
  after a deployment.
- The Cloudflare Access Pages Plugin is a middleware to validate Cloudflare Access
  JWT assertions.
- The Google Chat Pages Plugin creates a Google Chat bot which can respond to messages.
- This API is useful for situations such as alerts.
- When deploying to an apex domain, configure your nameservers to point to Cloudflare's
  nameservers.
- You cannot switch to Direct Upload later if you deploy using the Git integration.
- To use the API, a token with 'Pages Read' or 'Pages Write' permission is required.
- By default, preview deployments are enabled and available publicly.
- Hugo allows you to configure the baseURL of your application using -b or --baseURL
  flags.
- Uses Git for deployment integration
- Supports various frameworks including Nuxt, Preact, and Pelican
- Each framework has specific deployment settings such as production branch, build
  command, and build directory.
- Uses create-cloudflare to set up the project and install dependencies.
- Every time you commit new code, Cloudflare Pages automatically rebuilds and deploys
  your project.
- 'The Plugin takes an object with two properties: the domain of your Cloudflare Access
  account, and the policy aud (audience) to validate against.'
- When using a git repository, a change to any file triggers a Pages build by default.
- You can configure Pages to include or exclude specific paths to limit builds.
- Redirects defined in the _redirects file are not applied to requests served by Pages
  Functions.
- Build caching requires the V2 build system or later.
- Cache is purged seven days after its last read date.
- Cloudflare Pages installs all dependencies and builds the project as specified.
- Uses `create-cloudflare` CLI to set up projects for Qwik, React, and Remix.
- For deploying, a GitHub repository must be created.
- C3 will walk you through the setup process and create a new project using create-analog.
- Git integration allows you to connect a GitHub or GitLab repository.
- You have access to preview deployments which repeat the build-and-deploy process
  for pull requests.
- Pages Functions only support a subset of all bindings
- Every time you commit new code to your MkDocs site, Cloudflare Pages will automatically
  rebuild your project and deploy it.
- Functions utilize file-based routing. Your /functions directory structure determines
  the designated routes that your Functions will run on.
- Middleware is reusable logic that can be run before your onRequest function.
- Pages Functions can be configured two ways, either via the Cloudflare dashboard
  or the Wrangler configuration file.
- You cannot currently configure a queues consumer with Pages Functions.
- If you choose Direct Upload, you cannot switch to Git integration later.
- If you do not need a build step, leave the Build command field blank.
- Ensure your Wrangler configuration file is ready for production use before deploying.
- Running `wrangler pages download config` will overwrite your existing Wrangler file.
- Currently, this setup is only supported when using Cloudflare DNS.
- Be sure to trigger a new deployment after changing any settings.
- Cloudflare Pages supports directly uploading prebuilt assets.
- For Cloudflare to automatically add the JavaScript snippet, your pages need to have
  valid HTML.
- Wrangler requires a Node version of at least 16.17.0.
- Cloudflare does not provide IP addresses for your Pages project because we do not
  require A or AAAA records to link your domain to your project.
- GitHub and GitLab are currently the only supported platforms for automatic CI/CD
  builds.
- Incremental builds are currently not supported in Cloudflare Pages.
- Some options like compress, devIndicators, and distDir are not applicable.
- When you connect a git repository to Pages, by default a change to any file in the
  repository will trigger a Pages build.
- You can configure Pages to include or exclude specific paths to specify if Pages
  should skip a build for a given path.
- You cannot switch to Direct Upload later if you deploy using the Git integration
- All of the framework guides assume you already have a fundamental understanding
  of Git.
- If you clone with SSH, you must generate SSH keys on each computer you use to push
  or pull from GitHub.
- Uses Git for deployment — requires setup of GitHub repository
- Uses Cloudflare adapter for deployment
- C3 installs necessary dependencies automatically
- Uses Git integration for deployments.
- 404 errors can occur if there is no top-level index.html file.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Logs are not stored. You can start and stop the stream at any time to view them,
  but they do not persist.
- A maximum of 10 clients can view a deployment’s logs at one time.
- Middleware is defined in a _middleware.js file in the /functions directory.
- Smart Placement is available on all plans.
- 'Support for uploading source maps for Pages is available now in open beta. Minimum
  required Wrangler version: 3.60.0.'
- Pages Functions configuration via the Wrangler configuration file requires the V2
  build system or later.
- You cannot switch to Git integration later if you deploy using Git integration.
- Direct Upload projects cannot switch to Git integration later.
- If you do not configure an Access policy for your custom domain, an Access authentication
  will render but not work for your custom domain visitors.
- Form submissions are processed at the specified action URL.
- HTML forms are a common point of interaction for user data submission.
- The form will only POST data to the /submit endpoint when there are no outstanding
  validation errors.
- For the complete guide to deploying your first site to Cloudflare Pages, refer to
  the [Get started guide](https://developers.cloudflare.com/pages/get-started/).
- After deploying your site, you will receive a unique subdomain for your project
  on `*.pages.dev`. Every time you commit new code to your Hugo site, Cloudflare Pages
  will automatically rebuild your project and deploy it.
- Every time you commit new code, Cloudflare Pages automatically rebuilds and deploys
  the project.
- You receive a unique subdomain on *.pages.dev for your project.
- C3 automatically installs any necessary adapters and configures them when creating
  your project.
- Each deployment will provide a unique subdomain on *.pages.dev.
- Zola is a fast static site generator in a single binary with everything built-in.
- Ensure your website has a top-level file for index.html to avoid 404 errors.
- Smart Placement is in beta.
- Support for uploading source maps for Pages is available now in open beta.
- Compatibility dates must be explicitly set when using a Wrangler configuration file.
- Cloudflare Tunnel can be installed on Windows, Linux, and macOS.
- Ensure to trigger a new deployment after changing any settings.
- Cloudflare Web Analytics provides free, privacy-first analytics for your website.
- Cloudflare will automatically add the JavaScript snippet to your Pages site on the
  next deployment.
- A project is limited to 2,000 static redirects and 100 dynamic redirects, for a
  combined total of 2,100 redirects.
- Uploading a /functions directory through the dashboard's Direct Upload option does
  not work.
- HTML forms automatically validate data before submission.
- Use unique id attributes for inputs to associate with labels.
- This tutorial will teach you how to use R2 as a static asset storage bucket for
  your Pages app.
- The keyword `ASSETS` is reserved and cannot be used as a resource binding.
- Using the same GitHub/GitLab repository across separate Cloudflare accounts is disallowed.
- This Plugin's API generates arbitrary images.
- Uses Cloudflare Pages for deployment
- Workers KV is eventually consistent, which means that it can take up to 60 seconds
  for updates to be reflected globally.
- Uses the Edge runtime from Next.js
- Some features may not be supported due to Edge runtime limitations
- Must configure all server-side routes as Edge runtime
- If using Next.js Pages router, use 'experimental-edge' instead of 'edge'
errors:
- '401 Unauthorized: Check API token permissions.'
- '522 error: Manually adding a custom CNAME record pointing to your Cloudflare Pages
  site without first associating the domain in the Cloudflare Pages dashboard will
  result in your domain failing to resolve at the CNAME record address.'
- '401 Unauthorized: Recheck API token permissions'
- '403: Any requests which fail validation will be returned a 403 status code'
- '403: Any requests which fail validation will be returned a 403 status code.'
- '403 Forbidden: Check API token permissions'
- '404 Not Found: Verify account ID and project name'
- '401 Unauthorized: Recheck API token or permissions'
- '404 Not Found: Check account ID or project name'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- 'Deployment failed: Check build settings and environment variables.'
- 'Error 1000: DNS points to prohibited IP'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Invalid API token: Ensure your API token has the required permissions.'
- '400 Bad Request: Data validation error.'
- This repository is being used for a Cloudflare Pages project on a different Cloudflare
  account.
- This project is disconnected from your Git account, this may cause deployments to
  fail.
- Cloudflare Pages is not properly installed on your Git account, this may cause deployments
  to fail.
- The Cloudflare Pages installation has been suspended, this may cause deployments
  to fail.
- The project is linked to a repository that no longer exists, this may cause deployments
  to fail.
- The repository cannot be accessed, this may cause deployments to fail.
- There is an internal issue with your Cloudflare Pages Git installation.
- GitHub/GitLab is having an incident and push events to Cloudflare are operating
  in a degraded state.
auth_info:
  mentioned_objects:
  - Cloudflare Access
  - API Token
  - Cloudflare Pages
  - cloudflareAccessPlugin
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://dash.cloudflare.com
  headers:
    Accept: application/json
source_metadata: null
