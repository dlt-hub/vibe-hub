resources:
- name: features
  endpoint:
    path: /features
    method: GET
    data_selector: features
    params: {}
- name: enabled_features
  endpoint:
    path: /features/enabled
    method: GET
    data_selector: features
    params: {}
- name: features_evaluated
  endpoint:
    path: /features/evaluated
    method: GET
    data_selector: all
    params: {}
- name: features_events
  endpoint:
    path: /features/events
    method: POST
    data_selector: object
    params: {}
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: object
    params: {}
- name: company
  endpoint:
    path: /company
    method: POST
    data_selector: object
    params: {}
- name: event
  endpoint:
    path: /event
    method: POST
    data_selector: object
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: object
    params: {}
- name: bulk
  endpoint:
    path: /bulk
    method: POST
    data_selector: object
    params: {}
- name: feature_flag
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: flags
    params: {}
- name: feature_flags
  endpoint:
    path: /api/v1/feature_flags
    method: GET
    data_selector: data
    params: {}
- name: update_user
  endpoint:
    path: /useUpdateUser
    method: POST
    data_selector: response
    params: {}
- name: update_company
  endpoint:
    path: /useUpdateCompany
    method: POST
    data_selector: response
    params: {}
- name: update_other_context
  endpoint:
    path: /useUpdateOtherContext
    method: POST
    data_selector: response
    params: {}
- name: flags
  endpoint:
    path: /api/flags
    method: GET
    data_selector: flags
- name: feedback
  endpoint:
    path: /api/feedback
    method: POST
    data_selector: feedback
- name: check_event
  endpoint:
    path: /api/check-event
    method: POST
    data_selector: results
    params: {}
- name: track_event
  endpoint:
    path: /api/track-event
    method: POST
    data_selector: results
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: feature
  endpoint:
    path: /api/features
    method: GET
    data_selector: features
- name: user_feedback
  endpoint:
    path: /api/feedback
    method: POST
    data_selector: feedback
- name: flags
  endpoint:
    path: /api/flags
    method: GET
    data_selector: flags
- name: features
  endpoint:
    path: /features
    method: GET
    data_selector: features
    params: {}
- name: features_evaluated
  endpoint:
    path: /features/evaluated
    method: GET
    data_selector: features
    params: {}
- name: features_enabled
  endpoint:
    path: /features/enabled
    method: GET
    data_selector: features
    params: {}
- name: features_events
  endpoint:
    path: /features/events
    method: POST
    data_selector: success
    params: {}
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: success
    params: {}
- name: company
  endpoint:
    path: /company
    method: POST
    data_selector: success
    params: {}
- name: event
  endpoint:
    path: /event
    method: POST
    data_selector: success
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: success
    params: {}
- name: flags
  endpoint:
    path: /api/flags
    method: GET
    data_selector: flags
- name: apps
  endpoint:
    path: /api/apps
    method: GET
    data_selector: apps
- name: Slack Notifications
  endpoint:
    path: /integrations/slack
    method: GET
    data_selector: notifications
    params: {}
- name: Agent @-mention
  endpoint:
    path: /integrations/linear/agent
    method: POST
- name: Broadcast
  endpoint:
    path: /integrations/linear/broadcast
    method: POST
- name: Project template
  endpoint:
    path: /integrations/linear/template
    method: POST
- name: features
  endpoint:
    path: /api/features
    method: GET
    data_selector: features
- name: features
  endpoint:
    path: /get/features
    method: GET
    data_selector: features
    params: {}
- name: flags
  endpoint:
    path: /api/v1/flags
    method: GET
    data_selector: flags
    params: {}
- name: companies
  endpoint:
    path: /api/v1/companies
    method: GET
    data_selector: companies
    params: {}
- name: access_rules
  endpoint:
    path: /api/access_rules
    method: GET
    data_selector: rules
- name: feedback_survey
  endpoint:
    path: /api/feedback_survey
    method: POST
    data_selector: survey_response
    params: {}
- name: app
  endpoint:
    path: /api/apps
    method: GET
    data_selector: data
    params: {}
- name: feature
  endpoint:
    path: /api/features
    method: GET
    data_selector: data
    params: {}
- name: segment
  endpoint:
    path: /api/segments
    method: GET
    data_selector: data
    params: {}
- name: companies
  endpoint:
    path: /api/companies
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: track_events
  endpoint:
    path: /api/track_events
    method: GET
    data_selector: data
    params: {}
- name: feedback
  endpoint:
    path: /api/feedback
    method: GET
    data_selector: data
    params: {}
- name: feature_events
  endpoint:
    path: /api/feature_events
    method: GET
    data_selector: data
    params: {}
- name: feature
  endpoint:
    path: /api/features
    method: GET
    data_selector: features
    params: {}
- name: company
  endpoint:
    path: /api/v1/company
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: GET
    data_selector: user
- name: feature_events
  endpoint:
    path: /api/feature_events
    method: POST
    data_selector: events
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
- name: anonymous_feature_toggle
  endpoint:
    path: /api/feature-toggles
    method: GET
    data_selector: toggles
    params: {}
- name: feature_flags
  endpoint:
    path: /api/v1/feature_flags
    method: GET
    data_selector: data
    params: {}
- name: features
  endpoint:
    path: /features
    method: GET
    data_selector: features
- name: features_evaluated
  endpoint:
    path: /features/evaluated
    method: GET
    data_selector: features
- name: features_enabled
  endpoint:
    path: /features/enabled
    method: GET
    data_selector: features
- name: features_events
  endpoint:
    path: /features/events
    method: POST
    data_selector: success
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: success
- name: company
  endpoint:
    path: /company
    method: POST
    data_selector: success
- name: event
  endpoint:
    path: /event
    method: POST
    data_selector: success
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: success
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in Reflag
- OAuth2 setup requires a connected app in Reflag
- API may have rate limits
- Reflag determines which flags are active for a given user, company, or otherContext.
- To change the user.id or company.id, you need to update the props passed to ReflagProvider
  instead of using these hooks.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Requires setup of connected app in Reflag.
- Uses OAuth2 with refresh token — requires setup of connected app in reflag
- Some endpoints may have rate limits
- Automated feedback collection mode is enabled by default
- Toolbar will automatically appear on localhost
- The Reflag Browser SDK doesn't collect any metadata and HTTP IP addresses are not
  being stored.
- Cookies are used to support automated feedback surveys but are not for tracking
  purposes.
- The Reflag Browser SDK feedback UI is configured with reasonable defaults, positioning
  itself as a dialog in the lower right-hand corner of the viewport, displayed in
  English, and with a light-mode theme.
- Either score or comment must be defined in order to pass validation in the Reflag
  API.
- Requires OAuth2 setup and connected app configuration
- Be aware of rate limits and potential throttling
- Requires setup of connected app in Reflag
- Secret keys are meant for use in server side SDKs only. Secret keys offer the users
  the ability to obtain information that is often sensitive and thus should not be
  used in client-side applications.
- Some attributes are used by Reflag to improve the UI, and are recommended to provide
  for easier navigation
- If supplied, the config file will be loaded. Defaults to reflag.config.json when
  NODE_ENV is not production. Can also be set through the environment variable REFLAG_CONFIG_FILE.
- Defaults to reflagFlags.json.
- Publishable keys are meant to be used in clients where your code is public.
- Secret keys should only be used on your backend services.
- API keys are bound to one app only.
- GitHub integration is available on Pro and Enterprise plans
- Enables querying analytics based on feature access filters
- Reflag supports analytics.track(), analytics.identify() and analytics.group() ,
  but doesn't support the Segment analytics.page() , which are ignored.
- With the Amplitude integration, you can attach feature access properties to users
  and groups on Amplitude. This will enable you to query analytics based on feature
  access filters.
- Following the steps above should give you the URL, Access Key, and Secret Access
  Key settings required to configure an automatic data export.
- Rollout features gradually to de-risk rollouts.
- Default access criteria include Company segments, Companies, and Users.
- Feature cleanup involves checks for stale features and automations for archiving.
- Works best when using the React SDK
- Do not store sensitive data in the key or the payload of the config value even if
  the feature is marked as secret.
- Automated surveys lets you ask for feedback at just the right time after N interactions
  with the feature.
- The feedback widget can be customized in various ways, including positioning and
  language.
- Reflag's feature flagging is purpose-built for B2B with native support for gating
  features at the company subscription level.
- Team roles are only available on Pro and Enterprise plans.
- All new users invited to the organization will be assigned the Viewer role by default.
- Learn about apps in Reflag
- All environments except `Production` can be edited or deleted at any time.
- The `Production` environment cannot be deleted or edited.
- Multiple apps can be setup within Reflag.
- 'Each new app comes with three predefined environments: Production, Staging and
  Development.'
- Deleted environments cannot be restored, and all collected data for that environment
  will essentially be lost.
- Each feature has a unique feature key and cannot be edited after creation.
- Do not include PII data when sending in company attributes.
- It is recommended that any sensitive data should be hashed or otherwise not included.
- All segments in Reflag are app-wide.
- Do not include PII data when sending in event attributes. It is recommended that
  any sensitive data should be hashed or otherwise not included.
- Feature events are generated automatically in some cases.
- Rate-limits are applied to avoid unnecessary traffic.
- Feedback must be submitted using Reflag SDKs.
- Targeting rules are entities used in Reflag to describe the target audience of a
  given feature.
- Reflag reports missing context fields using feature events.
- Filters can be aggregated into logical expressions, facilitating advanced use cases.
- Company attribute filters using 'First seen' and 'Last seen' attributes cannot be
  used in targeting rules.
- Company feature metrics filters are not supported in targeting rules.
- Event attribute filter is only used in event-based feature and automatic feedback
  surveys.
- Gradual rollout filter is only used in feature access targeting rules.
- Other context filter is only used in feature access targeting rules.
- Reflag is designed for SaaS applications where users are authenticated and belong
  to a company group.
- You can toggle features on/off for all anonymous users on marketing pages or docs.
- Need some help? Chat with us
- Some objects may return nulls in deeply nested fields
- Only accepts JSON for POST requests. Content-Type header must be set to application/json.
errors:
- '400: Bad request'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '429 Too Many Requests: Rate limit exceeded'
- '401 Unauthorized: Check token validity'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify token validity'
- 'NETWORK_ERROR: Network errors during tracking are logged but don''t affect your
  application'
- 'MISSING_CONTEXT: The SDK tracks missing context fields but continues operation'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '200: Successful request'
- '400: Invalid request'
- '500: Server error'
- '401 Unauthorized: Recheck API key.'
- 'SURVEY_LIMIT_EXCEEDED: User has reached the maximum number of surveys for the specified
  period.'
- '401 Unauthorized: Check your OAuth token'
- '404 Not Found: Verify the endpoint path'
- '400 Bad Request: Check the feedback data format.'
- '401 Unauthorized: Ensure the API token is valid.'
- '400 Bad Request: Invalid request body.'
- '500 Internal Server Error: Retry the request.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://reflag.com
  auth:
    type: oauth2
    flow: refresh_token
  headers:
    Accept: application/json
source_metadata: null
