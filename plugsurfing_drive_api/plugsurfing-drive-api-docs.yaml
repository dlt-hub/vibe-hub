resources:
- name: geosearch
  endpoint:
    path: /v1/geosearch/radius
    method: POST
    data_selector: locations
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: user_details
    params: {}
- name: charging_keys
  endpoint:
    path: /v1/users/{userId}/charging-keys
    method: GET
    data_selector: keys
    params: {}
- name: sessions
  endpoint:
    path: /v1/users/{userId}/sessions/start
    method: POST
    data_selector: sessionId
    params: {}
- name: geosearch
  endpoint:
    path: /v1/geosearch/radius
    method: POST
    data_selector: locations
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: user
    params: {}
- name: charging_keys
  endpoint:
    path: /v1/users/{userId}/charging-keys
    method: GET
    data_selector: keys
    params: {}
- name: sessions
  endpoint:
    path: /v1/users/{userId}/sessions/start
    method: POST
    data_selector: sessionId
    params: {}
- name: activate_charging_key
  endpoint:
    path: /drive/v1/users/{userId}/charging-keys/{referenceId}/activate
    method: POST
- name: locations_batch
  endpoint:
    path: /locations/batch
    method: GET
    data_selector: locations
- name: search_by_radius
  endpoint:
    path: /geosearch/radius
    method: POST
    data_selector: locations
- name: search_by_route
  endpoint:
    path: /geosearch/route
    method: POST
    data_selector: locations
- name: get_location_by_id
  endpoint:
    path: /locations/{locationId}
    method: GET
    data_selector: location
- name: list_operators
  endpoint:
    path: /operators
    method: GET
    data_selector: operators
- name: capabilities
  endpoint:
    path: /capabilities
    method: GET
    data_selector: capabilities
- name: locations
  endpoint:
    path: /reference/searchlocationsbyradius
    method: GET
    data_selector: locations
    params: {}
- name: locations_batch
  endpoint:
    path: /v1/locations/batch
    method: POST
    data_selector: locations
- name: search_by_radius
  endpoint:
    path: /v1/geosearch/radius
    method: POST
    data_selector: locations
- name: search_by_route
  endpoint:
    path: /v1/geosearch/route
    method: POST
    data_selector: locations
- name: location_by_id
  endpoint:
    path: /v1/geosearch/location/{locationId}
    method: GET
    data_selector: location
- name: operators_list
  endpoint:
    path: /v1/operators
    method: GET
    data_selector: operators
- name: Create User
  endpoint:
    path: /reference/createuser
    method: POST
    data_selector: user
    params: {}
- name: Get User
  endpoint:
    path: /reference/getuser
    method: GET
    data_selector: user
    params: {}
- name: Update User
  endpoint:
    path: /reference/updateuser
    method: PATCH
    data_selector: user
    params: {}
- name: Delete User
  endpoint:
    path: /reference/deleteuser
    method: DELETE
    data_selector: user
    params: {}
- name: get_user_groups
  endpoint:
    path: /reference/listusergroups
    method: GET
- name: add_user_to_group
  endpoint:
    path: /reference/createusergroupmembership
    method: POST
- name: remove_user_from_group
  endpoint:
    path: /reference/deleteusergroupmembership
    method: DELETE
- name: create_user
  endpoint:
    path: /reference/createuser
    method: POST
- name: get_user
  endpoint:
    path: /reference/getuser
    method: GET
- name: update_user
  endpoint:
    path: /reference/updateuser
    method: PUT
- name: delete_user
  endpoint:
    path: /reference/deleteuser
    method: DELETE
- name: Get a User's User groups
  endpoint:
    path: /reference/listusergroups
    method: GET
- name: Add a User to a User group
  endpoint:
    path: /reference/createusergroupmembership
    method: POST
- name: Remove a User from a User group
  endpoint:
    path: /reference/deleteusergroupmembership
    method: DELETE
- name: createChargingKeyOrder
  endpoint:
    path: /createChargingKeyOrder
    method: POST
- name: activateUserChargingKey
  endpoint:
    path: /users/D/charging-keys/{referenceId}/activate
    method: POST
- name: createchargingkeyreservation
  endpoint:
    path: /charging-keys/reservations
    method: POST
- name: createUserChargingKey
  endpoint:
    path: /users/D/charging-keys
    method: POST
- name: start_remote_session
  endpoint:
    path: /drive/v1/users/<userId>/sessions/start
    method: POST
    data_selector: sessionId
- name: stop_remote_session
  endpoint:
    path: /drive/v1/users/<userId>/sessions/stop
    method: POST
    data_selector: sessionId
- name: get_session_history
  endpoint:
    path: /drive/v1/sessions
    method: GET
    data_selector: sessions
- name: get_session_by_id
  endpoint:
    path: /drive/v1/sessions/<sessionId>
    method: GET
    data_selector: session
- name: get_session_receipt
  endpoint:
    path: /drive/v1/sessions/<sessionId>/receipt
    method: GET
    data_selector: receiptUrl
- name: createChargingKeyOrder
  endpoint:
    path: /createChargingKeyOrder
    method: POST
- name: activateUserChargingKey
  endpoint:
    path: /users/D/charging-keys/{referenceId}/activate
    method: POST
- name: createchargingkeyreservation
  endpoint:
    path: /charging-keys/reservations
    method: POST
- name: createUserChargingKey
  endpoint:
    path: /users/D/charging-keys
    method: POST
- name: listUserChargingKeys
  endpoint:
    path: /reference/listUserChargingKeys
    method: GET
- name: updateUserChargingKey
  endpoint:
    path: /reference/updateUserChargingKey
    method: PUT
- name: listChargingKeyOrders
  endpoint:
    path: /reference/listChargingKeyOrders
    method: GET
- name: getChargingKeyOrderReceiptUrl
  endpoint:
    path: /reference/getChargingKeyOrderReceiptUrl
    method: GET
- name: getChargingKeyOrderConfiguration
  endpoint:
    path: /reference/getChargingKeyOrderConfiguration
    method: GET
- name: start_remote_session
  endpoint:
    path: /drive/v1/users/<userId>/sessions/start
    method: POST
    data_selector: sessionId
- name: stop_remote_session
  endpoint:
    path: /drive/v1/users/<userId>/sessions/stop
    method: POST
    data_selector: sessionId
- name: get_session_by_id
  endpoint:
    path: /drive/v1/sessions/{sessionId}
    method: GET
    data_selector: sessionStatus
- name: get_session_history
  endpoint:
    path: /drive/v1/users/<userId>/sessions
    method: GET
    data_selector: sessions
- name: get_session_receipt
  endpoint:
    path: /drive/v1/sessions/{sessionId}/receipt
    method: GET
    data_selector: receiptUrl
- name: event
  endpoint:
    path: /events
    method: POST
    data_selector: event
    params: {}
- name: Get Charging Keys
  endpoint:
    path: /reference/listempchargingkeys
    method: GET
- name: Create a Charging Key
  endpoint:
    path: /reference/createempchargingkey
    method: POST
- name: Enable Charging Key
  endpoint:
    path: /reference/enableempchargingkey
    method: POST
- name: Disable Charging Key
  endpoint:
    path: /reference/disableempchargingkey
    method: POST
- name: List Charging Key Orders
  endpoint:
    path: /reference/listempchargingkeyorders
    method: GET
- name: Mark Charging Key Order as Assigned
  endpoint:
    path: /reference/assignempchargingkeyorder
    method: POST
- name: Get Stripe Publishable API Key
  endpoint:
    path: /reference/getstripepublishableapikey
    method: GET
- name: Start Session
  endpoint:
    path: /reference/startremotesessionemp
    method: POST
- name: Stop Session
  endpoint:
    path: /reference/stopremotesessionemp
    method: POST
- name: Get Session by id
  endpoint:
    path: /reference/getsessionbyidemp
    method: GET
- name: Get Charging Keys
  endpoint:
    path: /reference/listempchargingkeys
    method: GET
- name: Create a Charging Key
  endpoint:
    path: /reference/createempchargingkey
    method: POST
- name: Enable Charging Key Enable
  endpoint:
    path: /reference/enableempchargingkey
    method: POST
- name: Disable Charging Key
  endpoint:
    path: /reference/disableempchargingkey
    method: POST
- name: List Charging Key Orders
  endpoint:
    path: /reference/listempchargingkeyorders
    method: GET
- name: Mark Charging Key Order as "Assigned"
  endpoint:
    path: /reference/assignempchargingkeyorder
    method: POST
- name: Get Stripe Publishable API Key
  endpoint:
    path: /reference/getstripepublishableapikey
    method: GET
- name: Start Session
  endpoint:
    path: /reference/startremotesessionemp
    method: POST
- name: Stop Session
  endpoint:
    path: /reference/stopremotesessionemp
    method: POST
- name: Get Session by id
  endpoint:
    path: /reference/getsessionbyidemp
    method: GET
- name: locations
  endpoint:
    path: /locations
    method: GET
- name: tokens
  endpoint:
    path: /tokens
    method: POST
- name: sessions
  endpoint:
    path: /sessions
    method: POST
- name: cdrs
  endpoint:
    path: /cdrs
    method: POST
- name: redeem_voucher_codes
  endpoint:
    path: /redeem
    method: GET
- name: locations
  endpoint:
    path: /locations
    method: GET
    data_selector: evses
    params:
      offset: 0
      limit: 100
- name: locations
  endpoint:
    path: /cpo/2.2.1/locations
    method: GET
    data_selector: evses
    params:
      incremental: last_updated
- name: cdr
  endpoint:
    path: /cdrs
    method: POST
    data_selector: cdrs
    params: {}
- name: commands
  endpoint:
    path: /commands
    method: GET
    data_selector: commands
    params: {}
notes:
- API key must be included in the HTTP header of every request.
- Never expose your API key in client-side code or public repositories. Store it securely
  and use it only in server-to-server communications.
- New webhook event â€“ Order Assigned
- Configurable supported countries
- Search for EV charging locations by radius, route, or batch.
- Use the distance parameter to change the search radius in meters.
- The Drive API is not meant to be called from client apps. Instead, it should be
  integrated on your backend.
- Search for charging locations by radius, route, or batch.
- Supports filtering by various criteria including availability and power type.
- Users with outstanding debt cannot be deleted.
- We reserve the right to reject deletion if less than 3 years passed since recent
  user activity.
- Only the `id` field is required when you are the Merchant on Record.
- If Plugsurfing is the Merchant on Record, the `email` field is mandatory.
- Ordering charging keys for a single user is throttled to 1 order every 5 minutes.
- Before using the createChargingKeyOrder endpoint, a manual configuration is required
  on the Plugsurfing side.
- Starting a session can take some time. Allow up to two minutes for the session to
  transition from WAITING_TO_START to STARTED.
- If a session stays in WAITING_TO_START for more than two minutes, consider it failed.
- Plugsurfing will allow sessions by default if no response is received within 3 seconds.
- We do not guarantee the delivery of events. Some Charge Point Operators (CPOs) may
  fail to send events, and events may be received in an unexpected order.
- Plugsurfing platform doesn't allow updating their card network of an existing credit-card.
- A session can be started remotely but stopped locally.
- Only chargers with REMOTE_START_STOP_CAPABLE capability can be started and stopped
  remotely.
- CDR Forwarding is only available when external clearing is chosen as a payment option.
- New fields might be added to the schema without prior notice. Ensure that unknown
  fields are ignored and do not result in errors.
- If Plugsurfing does not get any response within 3 seconds, the session will be allowed.
- If a user wants to use another network, they would need to create a new credit-card
  payment-option.
- Ensure that unknown fields are ignored and do not result in errors.
- Your system should always try to verify the signature with CURRENT and fallback
  to NEXT.
- Plugsurfing does not currently use any IP filtering to access the API.
- Access control is based on the API key exchanged during the Credentials module handshake.
- PUSH of Locations / EVSEs / connectors not supported
- Plugsurfing is more lenient than the OCPI specification for certain properties
- You are allowed to do Location pull API requests up to once per minute (pagination
  excluded).
- CANCEL_RESERVATION command is not supported.
- RESERVE_NOW command is not supported.
- START_SESSION command is supported.
- STOP_SESSION command is supported.
- UNLOCK_CONNECTOR command is not supported.
- PULL not supported
- Real-time Auth not supported
- PATCH of sessions not supported
- Plugsurfing does not support pushing updates of charging stations.
- The API is lenient on certain location field validations.
- PULL not supported - Only PUSH, Plugsurfing will push the CDRs to the EMP
- Plugsurfing is a bit more lenient than the OCPI specification for a set of properties
  when receiving CDRs from CPOs
- Not all commands are supported; unsupported commands will return NOT_SUPPORTED
- Requests that are rejected due to exceeding the per-minute limit do not count against
  the daily limit.
- PULL not supported â€” Plugsurfing only supports pushing sessions
- Real-time Auth not supported â€” Authorization based on status (valid = true/false)
  of the token
- PATCH of sessions not supported â€” No session updates during ongoing session
- Availability is calculated as the percentage of uptime for the features listed above
  on a monthly basis.
- Downtime is measured in minutes when a feature is inaccessible.
- Plugsurfing is a bit more lenient than the OCPI specification for a set of properties
  when receiving CDRs from CPOs.
- Drive API operates on a multi-tenant model, serving multiple users simultaneously.
- 'The API''s target availability is defined in two categories: Core features (99.7%)
  and Secondary features (99%).'
- A major outage occurs when 100% of users are affected.
- A partial outage, where only a subset of users is impacted, counts as 30% of its
  timespan toward the total downtime in a month.
errors:
- '401 Unauthorized: Ensure API key is valid.'
- 400 The provided query parameters, route parameters or body is invalid.
- 404 User or charging key not found
- 409 Key already in use
- 500 Internal Server Error
- '401 Unauthorized: If the API key is missing or invalid'
- '403: If the API key lacks the necessary permission for an operation'
- '400: Bad Request - Check the parameters sent.'
- '404: Not Found - The specified location or operator does not exist.'
- '400 Bad Request: Check request parameters and filters.'
- '404 Not Found: Ensure the locationId is correct.'
- '429 Too Many Requests: Throttle API calls.'
- '409 Conflict: Two users can''t have the same email.'
- '409: Two users can''t have the same email.'
- '429 - Too Many Requests: If the user exceeds the order limit.'
- 'SESSION_START_FAILED: Starting a session failed.'
- 'STOP_FAILED: Stop request failed.'
- '429 - Too Many Requests: If the user exceeds the limit for ordering charging keys.'
- 'Any other response code than 200 (example: 403, 500, etc.): Plugsurfing allows
  the session and responds positively to the CPO.'
- 'Malformed response or no response (timeout after 3 seconds): Plugsurfing allows
  the session and responds positively to the CPO.'
- 'SESSION_START_FAILED: Check charger connectivity.'
- 'STOP_FAILED: Stop request was ignored.'
- '400: The client should return a 400 response when the request is not valid'
- '403: The client should return a 403 response if authorization failed'
- '500: The client should return a 500 response in case it fails'
- '400: The request is not valid'
- '403: Authorization failed'
- '500: The request failed'
- '429: Rate limit reached'
- '429: Rate limit exceeded'
- 'NOT_SUPPORTED: Non-supported command sent'
- 'NOT_SUPPORTED: The command is not supported'
- '429: Requests are rejected due to exceeding the per-minute limit.'
- 'TIMEOUT: The timeout for all API endpoints is 10 seconds unless otherwise specified.'
- 'If the EMP partner doesn''t respond with 200 (and an OCPI success code: 1000),
  or doesn''t respond in time, the request will be retried: the CDR will be resent
  every night for 7 days.'
- '429: Requests are rejected due to exceeding the per-minute or per-day limit.'
- Errors are returned with the appropriate HTTP status codes and error messages.
- The timeout for all API endpoints is 10 seconds unless otherwise specified.
auth_info:
  mentioned_objects: []
client:
  base_url: https://drive-api-stage.plugsurfing.com
  headers:
    Accept: '*/*'
  resources:
  - name: activate_charging_key
    endpoint:
      path: /drive/v1/users/{userId}/charging-keys/{referenceId}/activate
      method: POST
source_metadata: null
