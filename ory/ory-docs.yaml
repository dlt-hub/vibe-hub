resources:
- name: decisions
  endpoint:
    path: /decisions/v1/api
    method: GET
- name: self-service_login
  endpoint:
    path: /self-service/login/browser
    method: GET
    data_selector: response
    params:
      return_to: https://myapp.com/posts
- name: login
  endpoint:
    path: /self-service/login/browser
    method: GET
- name: registration
  endpoint:
    path: /self-service/registration/browser
    method: GET
- name: settings
  endpoint:
    path: /self-service/settings/browser
    method: GET
- name: account_recovery
  endpoint:
    path: /self-service/recovery/browser
    method: GET
- name: email_verification
  endpoint:
    path: /self-service/verify-email/browser
    method: GET
- name: login_flow
  endpoint:
    path: /self-service/login/browser
    method: GET
    data_selector: id
- name: login_flow_details
  endpoint:
    path: /self-service/login/flows
    method: GET
    data_selector: ui
    params:
      id: flow-id
- name: login_flow
  endpoint:
    path: /self-service/login/browser
    method: GET
    data_selector: id
    params: {}
- name: registration_flow
  endpoint:
    path: /self-service/registration/browser
    method: GET
    data_selector: id
    params: {}
- name: settings_flow
  endpoint:
    path: /self-service/settings/browser
    method: GET
    data_selector: id
    params: {}
- name: login_flow
  endpoint:
    path: /self-service/login/flows
    method: GET
    data_selector: id
- name: registration_flow
  endpoint:
    path: /self-service/registration/flows
    method: GET
    data_selector: id
- name: settings_flow
  endpoint:
    path: /self-service/settings/flows
    method: GET
    data_selector: id
- name: login
  endpoint:
    path: /self-service/login/browser
    method: GET
    data_selector: id
- name: login_flow
  endpoint:
    path: /self-service/login/flows
    method: GET
    data_selector: id
- name: login_flow
  endpoint:
    path: /self-service/login/browser
    method: GET
    data_selector: id
- name: registration_flow
  endpoint:
    path: /self-service/registration/browser
    method: GET
    data_selector: id
- name: settings_flow
  endpoint:
    path: /self-service/settings/browser
    method: GET
    data_selector: id
- name: login
  endpoint:
    path: /self-service/login/browser
    method: GET
- name: registration
  endpoint:
    path: /self-service/registration/browser
    method: GET
- name: settings
  endpoint:
    path: /self-service/settings/browser
    method: GET
- name: account_recovery
  endpoint:
    path: /self-service/account-recovery/browser
    method: GET
- name: verify_email
  endpoint:
    path: /self-service/verify-email/browser
    method: GET
- name: login
  endpoint:
    path: /self-service/login/browser
    method: GET
    data_selector: id
- name: registration
  endpoint:
    path: /self-service/registration/browser
    method: GET
    data_selector: id
- name: settings
  endpoint:
    path: /self-service/settings/browser
    method: GET
    data_selector: id
- name: user_login
  endpoint:
    path: /self-service/login/browser
    method: GET
    data_selector: flow_id
    params: {}
- name: user_registration
  endpoint:
    path: /self-service/registration/browser
    method: GET
    data_selector: flow_id
    params: {}
- name: login
  endpoint:
    path: /self-service/login/browser
    method: GET
    data_selector: id
- name: registration
  endpoint:
    path: /self-service/registration/browser
    method: GET
    data_selector: id
- name: webhook
  endpoint:
    path: /self-service/registration
    method: POST
    data_selector: hook
    params: {}
- name: webhook
  endpoint:
    path: /self-service/registration
    method: POST
    data_selector: response
    params: {}
- name: webhook
  endpoint:
    path: /self-service/registration
    method: POST
- name: selfservice_ui
  endpoint:
    path: /selfservice
    method: GET
    data_selector: session
- name: login_flow
  endpoint:
    path: /self-service/login/api
    method: GET
    data_selector: id
- name: registration_flow
  endpoint:
    path: /self-service/registration/api
    method: GET
    data_selector: id
- name: identity_schema
  endpoint:
    path: /etc/config/kratos/identity.schema.json
- name: admin_identities
  endpoint:
    path: /admin/identities
    method: GET
    data_selector: identities
- name: projects
  endpoint:
    path: /projects/:project_id
    method: GET
    data_selector: project
notes:
- Ory Identities calls user accounts 'identities'. The terms 'user accounts', 'users',
  and 'identities' are used interchangeably in the Ory documentation.
- Ory Identities doesn't ship an HTML Rendering Engine. You use the Ory Account Experience
  available in Ory Network or build your own UI.
- Ory OAuth2 and OpenID Connect is a Certified OpenID Connect Implementation.
- Ory OAuth2 and OpenID Connect is designed to comply with the latest security standards
  and regulatory requirements.
- Ory Oathkeeper authorizes incoming HTTP requests.
- Ory Oathkeeper works well with Ory OAuth2 & OpenID Connect.
- 'Authorization happens in four steps: Access Rule Matching, Authentication, Authorization,
  and Mutation.'
- Ory Elements is designed to work with Ory's self-service flows, such as login, registration,
  settings, verification, and recovery.
- Ory Elements allows customization of the UI to match brand and user experience requirements.
- OAuth2 first aid is available for troubleshooting.
- Ory is OpenID certified and satisfies multiple OpenID Connect Conformance Profiles.
- Ory Network is a global, planet-spanning system with data distributed across numerous
  continents.
- Ory Hydra enables you to become an OAuth 2.0 and OpenID Connect provider.
- Ory Oathkeeper is an Identity and Access Proxy.
- Client Credentials Grant is commonly used in machine-to-machine communications.
- Authorization Code Grant is commonly used in scenarios where applications need to
  perform actions on behalf of users.
- Ory OAuth2 and OpenID Connect is a certified OAuth2 and OpenID Connect provider.
- The client needs to be allowed to request the `offline_access` scope and the user
  has to accept that the client may use the `offline_access` scope on the consent
  screen.
- The client needs to be allowed to request the `openid` scope and the user has to
  accept that the client may use the `openid` scope on the consent screen.
- Uses OAuth2 authorization code flow with PKCE for public clients.
- Ory provides a modern and simple approach to meeting today's identity challenges.
- Ory Identities calls user accounts 'identities'.
- Ory Identities is built on a cloud-native architecture.
- Ory Tunnel should be used for development only. Do not use Ory Tunnel in a production
  environment!
- The allow list prevents Open Redirect Attacks by just allowing certain domains,
  or paths on a domain.
- Ory and your UI must be hosted on the same top level domain.
- Ory Identities and your UI must be hosted on same top level domain
- The API flows respond with a fresh flow formatted as application/json
- Ory Identities and your UI must be hosted on the same top-level domain.
- Browser-based flows also support client-side applications such as Single-Page-Apps
- Ory Identities and your UI must be hosted on same top level domain!
- Browser-based flows also support client-side applications such as Single-Page-Apps.
- Last updated on Sep 2, 2025 by Vincent
- Ory Identities and your UI must be hosted on the same top level domain.
- If the form payload is valid, the flow completes with a success.
- Ory Network comes with an HTTP based SMS delivery option that can be configured
  to point to any service that supports sending SMS.
- Always put security first when using webhooks.
- Consider data privacy laws and regulations that may apply.
- Always put security first! When using webhooks, ensure that the data you send is
  secure and that the external system you are integrating with is trustworthy.
- Consider the data privacy laws and regulations that may apply to your use case.
- Webhooks can be configured to ignore the response, or to parse the response and
  use it to interrupt the flow or to update the identity.
- Modifying the identity is only possible during registration and settings flows.
- Always make sure that the webhook returns complete data.
- 'Ory Kratos isn''t just an API: it uses cookies, HTTP redirects, anti-CSRF tokens
  and more so you don''t have to.'
- Ory Kratos doesn't ship with an administrative user interface. You must implement
  that UI yourself.
- Ensure ports 4455, 4433, 4434, and 4436 are free.
- Always use 127.0.0.1 as the hostname; never use localhost.
- 'AJAX requests require credentials: ''include'''
- The login flow and registration flow require a valid flow_id
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Ory's architecture is designed to run best on Container Orchestration Systems such
  as Kubernetes, CloudFoundry, OpenShift, and similar projects.
- The Ory stack uses environment variables and files as a configuration source.
- The Account Experience can be themed using the Ory Console.
- The Account Experience comes with a welcome screen that shows information about
  the current user's session.
- Currently, the account experience is available in English, Spanish, German, French,
  Portuguese, Polish, Finnish, Dutch, Swedish, and more.
- API Keys are bound to an Ory Network project, and not to a specific user.
- Make sure to keep your API Keys secure and rotate them if necessary.
- Ory Network doesn't allow setting the CORS origins to be `*`, `null` or `localhost/127.0.0.1`.
- For local development with `localhost/127.0.0.1` use Ory Tunnel.
- Token pagination is the primary and recommended method for paginating through data.
- Rate limiting protects your applications against abuse and attacks, prevents service
  disruptions, and ensures fair usage for all our customers.
- Default consistency is strong.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check your authentication details.'
- 'login_required: The user must authenticate.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'INVALID_URL: Ensure the URL has a valid scheme (HTTP or HTTPS)'
- 'DOMAIN_DENIED: It''s not possible to set any Ory-owned domain as redirect URL.'
- 'HTTP 400 Bad Request: Invalid request payload'
- 'HTTP 403 Forbidden: CSRF token validation failed'
- '401 Unauthorized: Couldn''t find a strategy to log you in with. Did you fill out
  the form?'
- '400 Bad Request: The provided credentials are invalid, check for spelling mistakes
  in your password or username, email address, or phone number.'
- '400 Bad Request: Form validation error'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Couldn't find a strategy to log you in with. Did you fill out the form?
- '400 Bad Request: Invalid payload'
- '401 Unauthorized: Invalid credentials or session expired'
- '401 Unauthorized: Recheck authentication parameters.'
- '403: Requires 2FA'
- '401: Unauthorized'
- '401 Unauthorized: Recheck API Key or permissions'
- '400 Bad Request: The page token is invalid, do not craft your own page tokens.'
- 'HTTP 429: Rate limit exceeded'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
client:
  base_url: https://playground.projects.oryapis.com
  auth:
    type: oauth2
source_metadata: null
