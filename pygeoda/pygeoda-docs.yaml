resources:
- name: hinge_box_breaks
  endpoint:
    path: /hinge15_breaks
    method: GET
    data_selector: breaks
- name: natural_breaks
  endpoint:
    path: /natural_breaks
    method: GET
    data_selector: breaks
- name: quantile_breaks
  endpoint:
    path: /quantile_breaks
    method: GET
    data_selector: breaks
- name: percentile_breaks
  endpoint:
    path: /percentile_breaks
    method: GET
    data_selector: breaks
- name: stddev_breaks
  endpoint:
    path: /stddev_breaks
    method: GET
    data_selector: breaks
- name: pygeoda.skater
  endpoint:
    path: /pygeoda/skater
    method: GET
    data_selector: records
- name: pygeoda.redcap
  endpoint:
    path: /pygeoda/redcap
    method: GET
    data_selector: records
- name: pygeoda.schc
  endpoint:
    path: /pygeoda/schc
    method: GET
    data_selector: records
- name: pygeoda.azp_greedy
  endpoint:
    path: /pygeoda/azp_greedy
    method: GET
    data_selector: records
- name: pygeoda.azp_sa
  endpoint:
    path: /pygeoda/azp_sa
    method: GET
    data_selector: records
- name: pygeoda.azp_tabu
  endpoint:
    path: /pygeoda/azp_tabu
    method: GET
    data_selector: records
- name: pygeoda.maxp_greedy
  endpoint:
    path: /pygeoda/maxp_greedy
    method: GET
    data_selector: records
- name: pygeoda.maxp_sa
  endpoint:
    path: /pygeoda/maxp_sa
    method: GET
    data_selector: records
- name: pygeoda.maxp_tabu
  endpoint:
    path: /pygeoda/maxp_tabu
    method: GET
    data_selector: records
- name: pygeoda.spatial_validation
  endpoint:
    path: /pygeoda/spatial_validation
    method: GET
    data_selector: records
- name: pygeoda.Fragmentation
  endpoint:
    path: /pygeoda/Fragmentation
    method: GET
    data_selector: records
- name: pygeoda.Diameter
  endpoint:
    path: /pygeoda/Diameter
    method: GET
    data_selector: records
- name: pygeoda.Compactness
  endpoint:
    path: /pygeoda/Compactness
    method: GET
    data_selector: records
- name: pygeoda.JoinCountRatio
  endpoint:
    path: /pygeoda/JoinCountRatio
    method: GET
    data_selector: records
- name: pygeoda.ValidationResult
  endpoint:
    path: /pygeoda/ValidationResult
    method: GET
    data_selector: records
- name: pygeoda.make_spatial
  endpoint:
    path: /pygeoda/make_spatial
    method: GET
    data_selector: records
- name: pygeoda.demean
  endpoint:
    path: /pygeoda/demean
    method: GET
    data_selector: records
- name: pygeoda.standardize
  endpoint:
    path: /pygeoda/standardize
    method: GET
    data_selector: records
- name: pygeoda.mad
  endpoint:
    path: /pygeoda/mad
    method: GET
    data_selector: records
- name: hinge_box_breaks
  endpoint:
    path: /pygeoda/hinge15_breaks
    method: GET
    data_selector: breakpoints
    params: {}
- name: natural_breaks
  endpoint:
    path: /pygeoda/natural_breaks
    method: GET
    data_selector: breakpoints
    params: {}
- name: quantile_breaks
  endpoint:
    path: /pygeoda/quantile_breaks
    method: GET
    data_selector: breakpoints
    params: {}
- name: percentile_breaks
  endpoint:
    path: /pygeoda/percentile_breaks
    method: GET
    data_selector: breakpoints
    params: {}
- name: stddev_breaks
  endpoint:
    path: /pygeoda/stddev_breaks
    method: GET
    data_selector: breakpoints
    params: {}
- name: queen_weights
  endpoint:
    path: pygeoda.queen_weights
    method: POST
    data_selector: weights
    params:
      order: 1
      include_lower_order: false
      precision_threshold: 0
- name: rook_weights
  endpoint:
    path: pygeoda.rook_weights
    method: POST
    data_selector: weights
    params:
      order: 1
      include_lower_order: false
      precision_threshold: 0
- name: distance_weights
  endpoint:
    path: pygeoda.distance_weights
    method: POST
    data_selector: weights
    params:
      dist_thres: dynamic
      power: 1.0
      is_inverse: false
      is_arc: false
      is_mile: true
- name: knn_weights
  endpoint:
    path: pygeoda.knn_weights
    method: POST
    data_selector: weights
    params:
      k: 6
      power: 1.0
      is_inverse: false
      is_arc: false
      is_mile: true
- name: kernel_weights
  endpoint:
    path: pygeoda.kernel_weights
    method: POST
    data_selector: weights
    params:
      dist_thres: dynamic
      kernel: uniform
      is_inverse: false
      power: 1.0
      is_arc: false
      is_mile: true
- name: kernel_knn_weights
  endpoint:
    path: pygeoda.kernel_knn_weights
    method: POST
    data_selector: weights
    params:
      k: 6
      kernel: uniform
      adaptive_bandwidth: true
      use_kernel_diagonals: false
- name: local_g
  endpoint:
    path: /local_g
    method: GET
    data_selector: lisa_values
- name: local_gstar
  endpoint:
    path: /local_gstar
    method: GET
    data_selector: lisa_values
- name: local_joincount
  endpoint:
    path: /local_joincount
    method: GET
    data_selector: lisa_values
- name: local_bijoincount
  endpoint:
    path: /local_bijoincount
    method: GET
    data_selector: lisa_values
- name: local_multijoincount
  endpoint:
    path: /local_multijoincount
    method: GET
    data_selector: lisa_values
- name: quantile_lisa
  endpoint:
    path: /quantile_lisa
    method: GET
    data_selector: lisa_values
- name: local_multiquantilelisa
  endpoint:
    path: /local_multiquantilelisa
    method: GET
    data_selector: lisa_values
- name: neighbor_match_test
  endpoint:
    path: /neighbor_match_test
    method: GET
    data_selector: lisa_values
- name: local_bimoran
  endpoint:
    path: /local_bimoran
    method: GET
    data_selector: Cardinality
- name: geospatial_data
  endpoint:
    path: ./data/Guerry.shp
    method: GET
    data_selector: data
    params: {}
- name: geoda
  endpoint:
    path: /pygeoda.geoda
    method: GET
- name: local_getis_ord_statistics
  endpoint:
    path: /local_getis_ord_statistics
    method: GET
    data_selector: lisa_values
    params: {}
- name: local_join_count
  endpoint:
    path: /local_join_count
    method: GET
    data_selector: lisa_values
    params: {}
- name: local_bivariate_join_count
  endpoint:
    path: /local_bivariate_join_count
    method: GET
    data_selector: lisa_values
    params: {}
- name: local_multivariate_join_count
  endpoint:
    path: /local_multivariate_join_count
    method: GET
    data_selector: lisa_values
    params: {}
- name: quantile_lisa
  endpoint:
    path: /quantile_lisa
    method: GET
    data_selector: lisa_values
    params: {}
- name: multivariate_quantile_lisa
  endpoint:
    path: /multivariate_quantile_lisa
    method: GET
    data_selector: lisa_values
    params: {}
- name: neighbor_match_test
  endpoint:
    path: /neighbor_match_test
    method: GET
    data_selector: lisa_values
    params: {}
- name: bivariate_local_moran
  endpoint:
    path: /bivariate_local_moran
    method: GET
    data_selector: Cardinality
    params: {}
- name: Weight
  endpoint:
    path: /pygeoda/weights/weight
    method: GET
    data_selector: class
- name: lisa
  endpoint:
    path: /pygeoda/lisa
    method: GET
    data_selector: results
- name: local_moran
  endpoint:
    path: /pygeoda.local_moran
    method: GET
    data_selector: results
    params: {}
- name: local_geary
  endpoint:
    path: /pygeoda/local_geary
    method: GET
    data_selector: instance of lisa
    params: {}
- name: local_multigeary
  endpoint:
    path: /pygeoda.local_multigeary
    method: GET
    data_selector: instance of lisa class
    params: {}
- name: local_join_count
  endpoint:
    path: /pygeoda/local_joincount
    method: GET
    data_selector: parameters
    params: {}
- name: local_bijoincount
  endpoint:
    path: /pygeoda.local_bijoincount
    method: GET
    data_selector: lisa
    params: {}
- name: geospatial_data
  endpoint:
    path: /data/geospatial
    method: GET
    data_selector: data
    params: {}
- name: local_multijoincount
  endpoint:
    path: /pygeoda/local_multijoincount
    method: GET
    data_selector: results
    params: {}
- name: geoda
  endpoint:
    path: /pygeoda/geoda
    method: GET
    data_selector: num_obs
- name: local_g
  endpoint:
    path: /pygeoda.local_g
    method: GET
    data_selector: lisa
    params: {}
- name: Weight
  endpoint:
    path: /pygeoda/weights/weight
    method: GET
    data_selector: gda_w
    params: {}
- name: local_gstar
  endpoint:
    path: /pygeoda.local_gstar
    method: GET
    data_selector: statistics
    params: {}
- name: lisa
  endpoint:
    path: /pygeoda/lisa
    method: GET
- name: local_quantilelisa
  endpoint:
    path: /pygeoda/local_quantilelisa
    method: GET
    data_selector: results
    params: {}
- name: local_moran
  endpoint:
    path: pygeoda.local_moran
    method: GET
    data_selector: results
    params: {}
- name: local_multiquantilelisa
  endpoint:
    path: /pygeoda/local_multiquantilelisa
    method: GET
    data_selector: results
    params: {}
- name: neighbor_match_test
  endpoint:
    path: /pygeoda/neighbor_match_test
    method: GET
    data_selector: results
    params: {}
- name: local_geary
  endpoint:
    path: /pygeoda/local_geary
    method: GET
    data_selector: statistics
    params:
      w: Weight instance
      data: list of numeric values
      undefs: list of boolean values
      permutations: int
      permutation_method: str
      significance_cutoff: float
      cpu_threads: int
      seed: int
- name: local_multigeary
  endpoint:
    path: /pygeoda.local_multigeary
    method: GET
    data_selector: statistics
    params: {}
- name: batchlisa
  endpoint:
    path: /pygeoda/batchlisa
    method: GET
    data_selector: results
- name: local_joincount
  endpoint:
    path: pygeoda.local_joincount
    method: GET
    data_selector: records
    params: {}
- name: batch_local_moran
  endpoint:
    path: /pygeoda/batch_local_moran
    method: POST
    data_selector: results
    params: {}
- name: skater
  endpoint:
    path: /pygeoda/skater
    method: POST
    data_selector: Clusters
    params: {}
- name: local_multijoincount
  endpoint:
    path: /pygeoda.local_multijoincount
    method: GET
    data_selector: instance of lisa
- name: redcap
  endpoint:
    path: /pygeoda.redcap
    method: POST
    data_selector: dict
    params:
      k: int
      w: Weight instance
      data: list or dataframe
      bound_variable: tuple, optional
      min_bound: float, optional
      scale_method: str, optional
      distance_method: str, optional
      random_seed: int, optional
      cpu_threads: int, optional
- name: local_g
  endpoint:
    path: /pygeoda/local_g
    method: GET
    data_selector: instance of lisa class
    params: {}
- name: local_gstar
  endpoint:
    path: /pygeoda.local_gstar
    method: GET
    data_selector: instance of lisa class
- name: azp_greedy
  endpoint:
    path: /pygeoda/azp_greedy
    method: GET
    data_selector: list
    params: {}
- name: local_quantilelisa
  endpoint:
    path: /pygeoda/local_quantilelisa
    method: GET
    data_selector: results
    params: {}
- name: azp_sa
  endpoint:
    path: /pygeoda/azp_sa
    method: GET
    data_selector: clusters
- name: neighbor_match_test
  endpoint:
    path: /pygeoda/neighbor_match_test
    method: GET
    data_selector: Cardinality, Probability
- name: azp_tabu
  endpoint:
    path: /pygeoda/azp_tabu
    method: POST
    data_selector: clusters
    params: {}
- name: maxp_greedy
  endpoint:
    path: /pygeoda/maxp_greedy
    method: GET
    data_selector: Clusters
    params:
      iterations: 99
      scale_method: standardize
      distance_method: euclidean
      random_seed: 123456789
- name: batch_local_moran
  endpoint:
    path: /pygeoda/batch_local_moran
    method: POST
    data_selector: results
    params: {}
- name: skater
  endpoint:
    path: /pygeoda/skater
    method: GET
    data_selector: Clusters
    params: {}
- name: maxp_sa
  endpoint:
    path: /pygeoda/maxp_sa
    method: GET
    data_selector: Clusters
- name: redcap
  endpoint:
    path: /pygeoda/redcap
    method: GET
- name: maxp_tabu
  endpoint:
    path: /pygeoda/maxp_tabu
    method: POST
    data_selector: Clusters
    params:
      tabu_length: 10
      conv_tabu: 10
      iterations: 99
      scale_method: standardize
      distance_method: euclidean
      random_seed: 123456789
- name: azp_greedy
  endpoint:
    path: /pygeoda/azp_greedy
    method: GET
    data_selector: parameters
    params: {}
- name: local_bimoran
  endpoint:
    path: /pygeoda/local_bimoran
    method: GET
    data_selector: results
    params: {}
- name: azp_sa
  endpoint:
    path: /pygeoda/azp_sa
    method: GET
    data_selector: records
    params: {}
- name: maxp_greedy
  endpoint:
    path: /pygeoda/maxp_greedy
    method: GET
    data_selector: Clusters
- name: maxp_tabu
  endpoint:
    path: pygeoda.maxp_tabu
    method: POST
    data_selector: Clusters
- name: local_bimoran
  endpoint:
    path: /pygeoda/local_bimoran
    method: GET
    data_selector: results
notes:
- pygeoda is a python library for spatial data analysis based on GeoDa and libgeoda.
- It provides spatial data analysis functionalities including Exploratory Spatial
  Data Analysis, Spatial Cluster Detection and Clustering Analysis, Regionalization.
- The max-p algorithm is very sensitive to the initial positions for constructing
  final solutions.
- The conversion is based on using Well-Known-Binary (WKB) format to exchange geometric
  data for good performance.
- geopandas can read geospatial data using read_file() function
- Conversion to pygeoda uses Well-Known-Binary (WKB) format
- A LISA class wrappers the results of LISA computation
- The random seed could be used to execute several rounds of max-p algorithms for
  sensitive analysis.
- The function to apply local Join Count statistics.
- geopandas can be installed using conda or pip
- There are many dependencies of geopandas, so please check its documentation if encountering
  any issues.
- 'If there is error: ''ImportError: The descartes package is required for plotting
  polygons in geopandas.'' Install descartes will solve this problem.'
- The conversion to pygeoda object is based on using Well-Known-Binary (WKB) format
- The function to apply Getis-Ord’s local G statistics
- Local Moran statistics.
- The local neighbor match test is to assess the extent of overlap between k-nearest
  neighbors in geographical space and k-nearest neighbors in multi-attribute space.
- Apply local moran statistics on a set of variables
- The automatic zoning procedure (AZP) was initially outlined in Openshaw (1977) as
  a way to address some of the consequences of the modifiable areal unit problem (MAUP).
- The function to apply quantile LISA statistics
- The cooling rate of the simulated annealing algorithm defaults to 0.85
- The number of iterations of simulated annealing defaults to 1
- The scaling method defaults to 'standardize'
- The distance method defaults to 'euclidean'
- The random seed defaults to 123456789
- Defaults to 10 for tabu_length and 10 for conv_tabu.
- Default distance method is euclidean.
- SKATER forms clusters by spatially partitioning data that has similar values for
  features of interest.
- A simulated annealing algorithm to solve the max-p-region problem
- The cooling rate of a simulated annealing algorithm defaults to 0.85
- Bivariate Local Moran’s I captures the relationship between the value for one variable
  at location i, and the average of the neighboring values for another variable.
- The cooling rate of the simulated annealing algorithm defaults to 0.85.
- The number of iterations of simulated annealing defaults to 1.
- The length of a tabu search heuristic of tabu algorithm defaults to 10.
- The number of non-improving moves defaults to 10.
- Default scaling method is 'standardize' (Z-score normalization).
- Default distance method is 'euclidean'.
- Default random seed is 123456789.
- A greedy algorithm to solve the max-p-region problem
- 'Defaults for optional parameters include: iterations = 99, scale_method = ''standardize'',
  distance_method = ''euclidean'', random_seed = 123456789'
- Defaults to 10 for tabu_length
- Defaults to 10 for conv_tabu
- Defaults to 99 for iterations
- Defaults to 'standardize' for scale_method
- Defaults to 'euclidean' for distance_method
- Defaults to 123456789 for random_seed
- Standard deviation breaks calculate the number of standard deviational units of
  the range from lowest to highest, returning a breakpoint list.
- Bivariate local Moran statistics for capturing relationships between two variables.
- You cannot save your project separately from your shape file as you can in some
  Geographic Information Systems.
errors: []
auth_info:
  mentioned_objects:
  - Weight
  - lisa
client:
  base_url: https://geodacenter.github.io/data-and-lab/Guerry/
source_metadata: null
