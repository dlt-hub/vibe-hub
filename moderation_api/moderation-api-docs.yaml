resources:
- name: account
  endpoint:
    path: /account
    method: GET
    data_selector: records
- name: account
  endpoint:
    path: /account
    method: GET
    data_selector: id
    params: {}
- name: analyze_text
  endpoint:
    path: /moderate/text
    method: POST
    data_selector: status
- name: analyze_text
  endpoint:
    path: /moderate/text
    method: POST
    data_selector: data
    params: {}
- name: analyze_object
  endpoint:
    path: /moderate/object
    method: POST
    data_selector: status
- name: analyze_object
  endpoint:
    path: /moderate/object
    method: POST
    data_selector: status
- name: analyze_image
  endpoint:
    path: /api/v1/moderate/image
    method: POST
    data_selector: status
- name: analyze_image
  endpoint:
    path: /moderate/image
    method: POST
    data_selector: status
    params: {}
- name: analyze_video
  endpoint:
    path: /moderate/video
    method: POST
- name: analyze_video
  endpoint:
    path: /moderate/video
    method: POST
    data_selector: status
- name: analyze_audio
  endpoint:
    path: /moderate/audio
    method: POST
    data_selector: status
    params: {}
- name: analyze_audio
  endpoint:
    path: /moderate/audio
    method: POST
    data_selector: results
- name: authors
  endpoint:
    path: /authors
    method: GET
    data_selector: authors
    params:
      pageSize: '20'
      pageNumber: '1'
      sortDirection: desc
- name: authors
  endpoint:
    path: /authors
    method: GET
    data_selector: authors
    params: {}
- name: authors
  endpoint:
    path: /authors
    method: POST
    data_selector: id
    params: {}
- name: authors
  endpoint:
    path: /authors
    method: POST
    data_selector: records
- name: author_details
  endpoint:
    path: /authors/{id}
    method: GET
    data_selector: null
    params: {}
- name: author_details
  endpoint:
    path: /api/v1/authors/{id}
    method: GET
    data_selector: records
- name: authors
  endpoint:
    path: /authors/{id}
    method: PUT
    data_selector: author
    params: {}
- name: authors
  endpoint:
    path: /api/v1/authors/{id}
    method: PUT
    data_selector: id
- name: delete_author
  endpoint:
    path: /api/v1/authors/{id}
    method: DELETE
    data_selector: success
    params: {}
- name: delete_author
  endpoint:
    path: /api/v1/authors/{id}
    method: DELETE
    data_selector: success
- name: actions
  endpoint:
    path: /actions
    method: POST
    data_selector: ''
    params: {}
- name: actions
  endpoint:
    path: /actions
    method: POST
    data_selector: ''
    params: {}
- name: action
  endpoint:
    path: /actions/{id}
    method: GET
    data_selector: id
- name: actions
  endpoint:
    path: /actions/{id}
    method: GET
- name: actions
  endpoint:
    path: /api/v1/actions/{id}
    method: PUT
    data_selector: id
    params: {}
- name: actions
  endpoint:
    path: /api/v1/actions/{id}
    method: PUT
    data_selector: id
    params: {}
- name: delete_action
  endpoint:
    path: /api/v1/actions/{id}
    method: DELETE
    data_selector: deleted
    params: {}
- name: delete_action
  endpoint:
    path: /api/v1/actions/{id}
    method: DELETE
    data_selector: deleted
    params: {}
- name: execute_moderation_action
  endpoint:
    path: /actions/execute
    method: POST
    data_selector: success
- name: execute_moderation_action
  endpoint:
    path: /actions/execute
    method: POST
- name: moderation_actions
  endpoint:
    path: /actions
    method: GET
    data_selector: records
- name: list_moderation_actions
  endpoint:
    path: /actions
    method: GET
    data_selector: ''
- name: wordlist
  endpoint:
    path: /wordlist
    method: GET
    data_selector: records
- name: wordlist
  endpoint:
    path: /wordlist
    method: GET
    data_selector: records
- name: wordlist
  endpoint:
    path: /wordlist/{id}
    method: GET
    data_selector: ''
    params: {}
- name: wordlist
  endpoint:
    path: /wordlist/{id}
    method: GET
    data_selector: id
    params: {}
- name: update_wordlist
  endpoint:
    path: /wordlist/{id}
    method: PUT
    data_selector: ''
    params: {}
- name: wordlist
  endpoint:
    path: /wordlist/{id}
    method: PUT
    data_selector: null
    params: {}
- name: embedding_status
  endpoint:
    path: /wordlist/{id}/embedding-status
    method: GET
    data_selector: progress
- name: embedding_status
  endpoint:
    path: /wordlist/{id}/embedding-status
    method: GET
    data_selector: progress
    params:
      id: string
- name: add_words_to_wordlist
  endpoint:
    path: /wordlist/{id}/words
    method: POST
    data_selector: null
    params: {}
- name: add_words_to_wordlist
  endpoint:
    path: /wordlist/{id}/words
    method: POST
    data_selector: addedWords
    params: {}
- name: remove_words_from_wordlist
  endpoint:
    path: /wordlist/{id}/words
    method: DELETE
- name: remove_words
  endpoint:
    path: /wordlist/{id}/words
    method: DELETE
- name: queue
  endpoint:
    path: /queue/{id}
    method: GET
    data_selector: queue
- name: queue
  endpoint:
    path: /queue/{id}
    method: GET
    data_selector: queue
- name: queue_statistics
  endpoint:
    path: /queue/{id}/stats
    method: GET
    data_selector: reviewStats
    params:
      withinDays: '30'
- name: queue_statistics
  endpoint:
    path: /queue/{id}/stats
    method: GET
    data_selector: reviewStats
    params:
      withinDays: '30'
- name: queue_items
  endpoint:
    path: /queue/{id}/items
    method: GET
    data_selector: items
    params:
      pageSize: '20'
      pageNumber: '1'
      sortDirection: desc
- name: queue_items
  endpoint:
    path: /queue/{id}/items
    method: GET
    data_selector: items
    params:
      pageSize: '20'
      pageNumber: '1'
      sortDirection: desc
- name: resolve_queue_item
  endpoint:
    path: /queue/{id}/items/{itemId}/resolve
    method: POST
    data_selector: success
    params: {}
- name: resolve_queue_item
  endpoint:
    path: /queue/{id}/items/{itemId}/resolve
    method: POST
    data_selector: success
- name: unresolve_queue_item
  endpoint:
    path: /queue/{id}/items/{itemId}/unresolve
    method: POST
    data_selector: success
- name: unresolve_queue_item
  endpoint:
    path: /queue/{id}/items/{itemId}/unresolve
    method: POST
    data_selector: success
    params: {}
- name: models
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: OpenAPI Specification
  endpoint:
    path: /api/v1/openapi.json
    method: GET
    data_selector: ''
notes:
- Authentication to the API is performed with the Authorization header when making
  a HTTP request. Provide your API key prefixed with `Bearer` as the value of the
  Authorization header.
- You must make all API calls over HTTPS.
- The default API rate limit is 60 requests per minute.
- To request an increased rate limit, please contact support.
- Default API rate limit is 60 requests per minute.
- Bearer authentication header of the form `Bearer <token>`
- Authorization header must be in the form 'Bearer <token>'
- Video moderation needs to be enabled for accounts to use this endpoint.
- Audio moderation needs to be enabled for accounts to use this endpoint. Please contact
  support@moderationapi.com to talk about enabling this feature.
- Audio moderation needs to be enabled for accounts to use this endpoint.
- Keep your API key secret. Anyone with your API key can use your project.
- Deleting a project also deletes all API keys associated with the project.
- Adjusting the flagging threshold won’t change the actual confidence scores given
  by the model—they remain the same.
- Custom regions are available for enterprise customers.
- OpenAPI 3.0.3 specification available at https://moderationapi.com/api/v1/openapi.json
- OpenAPI (formerly known as Swagger) is a widely adopted framework for describing
  RESTful APIs.
errors:
- API requests without authentication will also fail.
- code: 400
  meaning: Bad Request — The request was unacceptable, often due to missing a required
    parameter.
- code: 401
  meaning: Unauthorized — No valid API key provided.
- code: 403
  meaning: Forbidden — The API key doesn’t have permissions to perform the request,
    or your quota is used and you need to upgrade.
- code: 404
  meaning: Not Found — The specified resource could not be found.
- code: 405
  meaning: Method Not Allowed — You tried to access a resource with an invalid method.
- code: 429
  meaning: Too Many Requests — See rate limits.
- code: 500
  meaning: Internal Server Error — We had a problem with our server. Try again later.
- code: 503
  meaning: Service Unavailable — We’re temporarily offline for maintenance. Please
    try again later.
- '429: Too Many Requests - Watch for this status code and implement a retry mechanism
  following an exponential backoff schedule.'
- '400: Bad Request — The request was unacceptable, often due to missing a required
  parameter.'
- '401: Unauthorized — No valid API key provided.'
- '403: Forbidden — The API key doesn’t have permissions to perform the request, or
  your quota is used and you need to upgrade.'
- '404: Not Found — The specified resource could not be found.'
- '405: Method Not Allowed — You tried to access a resource with an invalid method.'
- '429: Too Many Requests — See rate limits'
- '500: Internal Server Error — We had a problem with our server. Try again later.'
- '503: Service Unavailable — We’re temporarily offline for maintenance. Please try
  again later.'
- '429: Too Many Requests - Watch for status codes and build in a retry mechanism.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '200: Successful response'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '500: Internal Server Error'
- '400 Bad Request: Check the request payload'
- '401 Unauthorized: Check the auth token'
- '403 Forbidden: Permissions issue'
- '500 Internal Server Error: Retry the request'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Bearer token is required'
- '403 Forbidden: Access denied'
- '500 Internal Server Error: An error occurred on the server'
- 400 Bad Request
- 401 Unauthorized
- 403 Forbidden
- 404 Not Found
- 500 Internal Server Error
- '400'
- '401'
- '403'
- '500'
- '404'
- '404: Not Found'
- 409 Conflict
- '409'
- '409: Conflict'
- '403 Forbidden: Check permissions'
- '500 Internal Server Error: Retry later'
- '400 Bad Request: Check the request body for required fields'
- '401 Unauthorized: Recheck your auth token'
- '404 Not Found: Verify the wordlist ID'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Check your auth token'
- '403 Forbidden: You don''t have permission to access this resource'
- '404 Not Found: The requested resource was not found'
auth_info:
  mentioned_objects:
  - Bearer
  - Bearer authentication
client:
  base_url: https://moderationapi.com/api/v1
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
