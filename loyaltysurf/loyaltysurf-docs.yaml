resources:
- name: campaign
  endpoint:
    path: /v1/campaigns
    method: GET
    data_selector: campaigns
- name: campaign_by_id
  endpoint:
    path: /v1/campaign/:id
    method: GET
    data_selector: campaign
- name: participant_by_id
  endpoint:
    path: /v1/campaign/:id/participant/:participantId
    method: GET
    data_selector: participant
- name: loyalty_action
  endpoint:
    path: /v1/campaign/:id/loyalty-action
    method: POST
- name: participant
  endpoint:
    path: /v1/campaign/:id/participant/:participantEmail
    method: POST
    data_selector: participant
    params: {}
- name: participants
  endpoint:
    path: /v1/campaign/:id/participants
    method: GET
    data_selector: participants
    params:
      limit: 100
- name: leaderboard
  endpoint:
    path: /v1/campaign/:id/leaderboard
    method: GET
    data_selector: participants
    params:
      limit: 100
- name: participant_rewards_by_id
  endpoint:
    path: /v1/campaign/:id/participant/:participantId/rewards
    method: GET
    data_selector: rewards
    params:
      limit: '100'
- name: participant_rewards_by_email
  endpoint:
    path: /v1/campaign/:id/participant/:participantEmail/rewards
    method: GET
    data_selector: rewards
    params:
      limit: '100'
- name: approve_participant_reward
  endpoint:
    path: /v2/campaign/:id/reward/:rewardId/approve
    method: POST
    data_selector: success
- name: fulfill_participant_reward
  endpoint:
    path: /v1/campaign/:id/reward/:rewardId/fulfill
    method: POST
    data_selector: success
- name: remove_participant_reward
  endpoint:
    path: /v1/campaign/:id/reward/:rewardId
    method: DELETE
    data_selector: success
- name: get_campaign_analytics
  endpoint:
    path: /v1/campaign/:id/analytics
    method: GET
    data_selector: analytics
- name: add_participant
  endpoint:
    path: /POST Add participant
    method: POST
- name: update_participant
  endpoint:
    path: /POST Update participant
    method: POST
- name: trigger_loyalty_action
  endpoint:
    path: /POST trigger loyalty action by email
    method: POST
- name: campaign
  endpoint:
    path: /campaign/{id}
    method: GET
    data_selector: response
    params: {}
- name: participant_by_email
  endpoint:
    path: /v1/campaign/{campaign_id}/participant/{email}
    method: GET
- name: trigger_loyalty_action
  endpoint:
    path: /v1/campaign/{campaign_id}/loyalty-action
    method: POST
- name: campaign
  endpoint:
    path: /services/data/vXX.X/sobjects/Campaign
    method: GET
    data_selector: records
- name: reward
  endpoint:
    path: /services/data/vXX.X/sobjects/Reward
    method: GET
    data_selector: records
- name: participant
  endpoint:
    path: /services/data/vXX.X/sobjects/Participant
    method: GET
    data_selector: records
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: data
- name: participant_submitted_reward_form
  endpoint:
    path: /events/participant_submitted_reward_form
    method: POST
    data_selector: data
- name: participant_reached_a_goal
  endpoint:
    path: /events/participant_reached_a_goal
    method: POST
    data_selector: data
- name: new_participant_added
  endpoint:
    path: /events/new_participant_added
    method: POST
    data_selector: data
- name: participant_fraud_status_updated
  endpoint:
    path: /webhooks/PARTICIPANT_FRAUD_STATUS_UPDATED
    method: POST
    data_selector: data.participant
- name: campaign_ended
  endpoint:
    path: /webhooks/CAMPAIGN_ENDED
    method: POST
    data_selector: data
- name: participant
  endpoint:
    path: /POST Add Participant
    method: POST
- name: update_participant
  endpoint:
    path: /POST Update Participant by ID
    method: POST
- name: get_participant
  endpoint:
    path: /GET Participant by ID
    method: GET
- name: campaign
  endpoint:
    path: /api/campaigns
    method: GET
- name: campaign_ended
  endpoint:
    path: /campaigns/ended
    method: GET
    data_selector: results
- name: new_participant
  endpoint:
    path: /participants/new
    method: POST
    data_selector: participant
    params: {}
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
- name: campaign
  endpoint:
    path: /campaign/{campaign_id}
    method: GET
    data_selector: response
    params: {}
- name: campaign
  endpoint:
    path: /v1/campaign/{campaign_id}
    method: GET
    data_selector: data
- name: participant_by_email
  endpoint:
    path: /v1/campaign/{campaign_id}/participant/{email}
    method: GET
    data_selector: body
- name: trigger_loyalty_action
  endpoint:
    path: /v1/campaign/{campaign_id}/loyalty-action
    method: POST
    data_selector: body
- name: Campaign
  endpoint:
    path: /developer-tools/rest-api/api-objects#campaign
    method: GET
- name: Reward
  endpoint:
    path: /developer-tools/rest-api/api-objects#reward
    method: GET
- name: Participant
  endpoint:
    path: /developer-tools/rest-api/api-objects#participant
    method: GET
- name: ParticipantReward
  endpoint:
    path: /developer-tools/rest-api/api-objects#participantreward
    method: GET
- name: ParticipantRewardFormSubmission
  endpoint:
    path: /developer-tools/rest-api/api-objects#participantrewardformsubmission
    method: GET
- name: campaign
  endpoint:
    path: /v1/campaigns
    method: GET
    data_selector: campaigns
- name: campaign_by_id
  endpoint:
    path: /v1/campaign/:id
    method: GET
    data_selector: campaign
- name: participant_by_id
  endpoint:
    path: /v1/campaign/:id/participant/:participantId
    method: GET
    data_selector: participant
- name: trigger_loyalty_action_by_email
  endpoint:
    path: /v1/campaign/:id/loyalty-action
    method: POST
- name: trigger_loyalty_action_by_participant_id
  endpoint:
    path: /v1/campaign/:id/loyalty-action
    method: POST
- name: participant
  endpoint:
    path: /v1/campaign/:id/participant/:participantEmail
    method: POST
    data_selector: participant
    params: {}
- name: participants
  endpoint:
    path: /v1/campaign/:id/participants
    method: GET
    data_selector: participants
    params:
      limit: '100'
- name: leaderboard
  endpoint:
    path: /v1/campaign/:id/leaderboard
    method: GET
    data_selector: participants
    params: {}
- name: add_participant
  endpoint:
    path: /v1/campaign/:id/participant
    method: POST
    data_selector: participant
    params: {}
- name: update_participant_by_id
  endpoint:
    path: /v1/campaign/:id/participant/:participantId
    method: POST
    data_selector: participant
    params: {}
- name: remove_participant_by_id
  endpoint:
    path: /v1/campaign/:id/participant/:participantId
    method: DELETE
    data_selector: success
    params: {}
- name: get_participant_rewards_by_id
  endpoint:
    path: /v1/campaign/:id/participant/:participantId/rewards
    method: GET
    data_selector: rewards
    params: {}
- name: get_participant_rewards_by_email
  endpoint:
    path: /v1/campaign/:id/participant/:participantEmail/rewards
    method: GET
    data_selector: rewards
    params: {}
- name: approve_participant_reward
  endpoint:
    path: /v2/campaign/:id/reward/:rewardId/approve
    method: POST
    data_selector: success
    params: {}
- name: fulfill_participant_reward
  endpoint:
    path: /v1/campaign/:id/reward/:rewardId/fulfill
    method: POST
    data_selector: success
    params: {}
- name: remove_participant_reward
  endpoint:
    path: /v1/campaign/:id/reward/:rewardId
    method: DELETE
    data_selector: success
    params: {}
- name: get_campaign_analytics
  endpoint:
    path: /v1/campaign/:id/analytics
    method: GET
    data_selector: analytics
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
notes:
- Campaigns that have been deleted will not be returned in this response.
- Response contains nextId for pagination.
- Maximum limit for rewards per request is 100.
- LoyaltySurf can be fully implemented in an afternoon.
- The REST API is only available to users on a LoyaltySurf paid plan.
- Exposing your secret API key within front end code exposes it to security risks.
- Replace '{campaign_id}' and '{email}' with appropriate values in the URLs.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- All requests should be made using HTTPS.
- JSON objects are recommended for POST requests, but standard parameters are accepted.
- All parameters are required unless otherwise specified.
- A total of 5 webhooks can be added per campaign.
- If we are unable to deliver a webhook the first time, LoyaltySurf will attempt to
  redeliver your webhooks for several days with an exponential back off.
- For security purposes, you can add a webhook secret to limit requests sent to your
  webhook endpoint to those only coming from LoyaltySurf.
- Once your campaign has a webhook secret, a signature 'LoyaltySurf-Signature' will
  be included in the header of all outgoing requests to your webhook endpoint.
- 'If you have manual reward approval enabled for your campaign, events will be sent
  twice: (1) when the reward is pending approval and (2) when the reward is approved.'
- Only the first 1,000 will be returned in the winners Array.
- Metadata keys will be converted to camelCase.
- Do not store sensitive information as metadata.
- The Chargebee integration is only available to users on the LoyaltySurf Business
  plan or higher.
- By default, coupons are recommended. However, if you want rewards to be stackable
  (e.g., $10 off for every loyalty action), you will want to use credits.
- The Hubspot integration is only available to users on a LoyaltySurf paid plan.
- The PayPal integration is only available to users on the LoyaltySurf Business plan
  or higher.
- The Recurly integration is only available to users on the LoyaltySurf Business plan
  or higher.
- When you go live with your campaign, please make sure to switch back to live mode.
  Otherwise, rewards will not be issued in live mode while test mode is enabled.
- The integration for Slack is only available to users on a LoyaltySurf paid plan.
- The Stripe integration is only available to users on a LoyaltySurf paid plan.
- The Tango Card integration is only available to users on a LoyaltySurf paid plan.
- Tango Card is only available to companies based in specific countries.
- Zapier's free plan provides you with 5 total Zaps and 100 free monthly tasks.
- Only the LoyaltySurf team owner's campaigns will show up when you connect to Zapier.
- 'If manual reward approval is enabled for your campaign, two Zapier trigger events
  will occur: (1) when the reward is pending approval, and (2) when the reward is
  approved.'
- Only the LoyaltySurf team owner's campaigns will show up when connecting to Zapier
- LoyaltySurf will attempt to redeliver your webhooks for several days with an exponential
  back off.
- Do not use the RESTful API in browser applications.
- API key required which can be obtained from account settings.
- Uses OAuth2 for authentication.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'BAD_REQUEST_ERROR: Invalid request. Request params are missing or are invalid.'
- 'INVALID_REWARD_STATE: Invalid reward state. Reward has already been approved.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '429: You have reached your minute limit.'
- 'RateLimit: You have reached your minute limit.'
- '400 Bad Request: Participant cannot join this campaign.'
- '401 Failed to add participant: Participant was not able to join this campaign.'
- '402: Usage limit exceeded'
- '403 Forbidden: You are not allowed to perform that action.'
- '404 Resource Not Found: The requested resource does not exist.'
- '409 Conflict Duplicate Request: Conflicting duplicate request.'
- '429 Too Many Requests: You have reached your <rate> limit.'
- '5XX Internal Server Error: The LoyaltySurf server is inaccessible or offline.'
- The customer with the associated LoyaltySurf participant email address does not
  exist in Stripe.
- If dynamic reward rules are enabled for the Stripe reward, there may have been no
  matching rule found.
- If you were expecting a reward to be applied in live mode, double-check that you
  do not have test mode enabled.
- 'Insufficient funds: If there are insufficient funds in your account balance when
  covering redemptions, your winners will not receive email links for redeeming gift
  cards.'
- '401 Unauthorized: Check your API key.'
- 'BAD_REQUEST_ERROR: Invalid request. Request params are missing or are invalid'
- 'INVALID_REWARD_STATE: Invalid reward state. Reward has already been fulfilled.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.loyaltysurf.io
  auth:
    type: oauth2
source_metadata: null
