resources:
- name: offers
  endpoint:
    method: GET
- name: customers
  endpoint:
    method: GET
- name: transactions
  endpoint:
    method: GET
- name: payments
  endpoint:
    method: GET
- name: subscriptions
  endpoint:
    method: GET
- name: entitlements
  endpoint:
    method: GET
- name: register
  endpoint:
    path: /register
    method: POST
- name: login
  endpoint:
    path: /login
    method: POST
- name: refresh_token
  endpoint:
    path: /refresh-token
    method: POST
- name: create_order
  endpoint:
    path: /create-order
    method: POST
- name: get_order
  endpoint:
    path: /msd-get-order
    method: GET
- name: list_campaigns
  endpoint:
    path: /msd-list-campaigns
    method: GET
- name: get_entitlements
  endpoint:
    path: /get-entitlements
    method: GET
- name: fetch_offers
  endpoint:
    path: /fetch-offers
    method: GET
- name: fetch_customers_data
  endpoint:
    path: /fetch-customers-data
    method: GET
- name: fetch_customers_subscriptions
  endpoint:
    path: /fetch-customers-subscriptions
    method: GET
- name: fetch_customers_transactions
  endpoint:
    path: /fetch-customers-transactions
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: register
  endpoint:
    path: /register
    method: POST
- name: login
  endpoint:
    path: /login
    method: POST
- name: refresh_token
  endpoint:
    path: /refresh-token
    method: POST
- name: create_order
  endpoint:
    path: /create-order
    method: POST
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: register
  endpoint:
    path: /customers
    method: POST
- name: login
  endpoint:
    path: /auths
    method: POST
- name: auths
  endpoint:
    path: /auths
    method: POST
- name: refresh_token
  endpoint:
    path: /auths/refresh_token
    method: POST
- name: refresh_token
  endpoint:
    path: /auths/refresh_token
    method: POST
- name: passwords
  endpoint:
    path: /customers/passwords
    method: PUT
- name: reset_password
  endpoint:
    path: /customers/passwords
    method: PUT
- name: register
  endpoint:
    path: /register
    method: POST
- name: login
  endpoint:
    path: /login
    method: POST
- name: refresh_token
  endpoint:
    path: /refresh-token
    method: POST
- name: revoke_refresh_tokens
  endpoint:
    path: /revoke-refresh-tokens
    method: DELETE
- name: reset_password
  endpoint:
    path: /reset-password
    method: PUT
- name: fetch_publisher_consents
  endpoint:
    path: /fetch-publisher-consents
    method: GET
- name: update_customers_consents
  endpoint:
    path: /update-customers-consents
    method: PUT
- name: fetch_customer_locales
  endpoint:
    path: /fetch-customer-locales
    method: GET
- name: update_password
  endpoint:
    path: /update-password
    method: PATCH
- name: fetch_capture_status
  endpoint:
    path: /fetch-capture-status
    method: GET
- name: update_capture_answers
  endpoint:
    path: /update-capture-answers
    method: PUT
- name: create_order
  endpoint:
    path: /create-order
    method: POST
- name: get_order
  endpoint:
    path: /get-order
    method: GET
- name: fetch_payment_method_ids
  endpoint:
    path: /fetch-payment-method-ids
    method: GET
- name: update_order
  endpoint:
    path: /update-order
    method: PATCH
- name: list_campaigns
  endpoint:
    path: /list-campaigns
    method: GET
- name: get_entitlements
  endpoint:
    path: /get-entitlements
    method: GET
- name: fetch_offers
  endpoint:
    path: /fetch-offers
    method: GET
- name: fetch_offer_details
  endpoint:
    path: /fetch-offer-details
    method: GET
- name: fetch_customers_data
  endpoint:
    path: /fetch-customers-data
    method: GET
- name: update_customers_data
  endpoint:
    path: /update-customers-data
    method: PATCH
- name: fetch_customers_subscriptions
  endpoint:
    path: /fetch-customers-subscriptions
    method: GET
- name: update_customers_subscription
  endpoint:
    path: /update-customers-subscription
    method: PATCH
- name: fetch_customers_payment_details
  endpoint:
    path: /fetch-customers-payment-details
    method: GET
- name: fetch_customers_consents
  endpoint:
    path: /fetch-customers-consents
    method: GET
- name: fetch_customers_transactions
  endpoint:
    path: /fetch-customers-transactions
    method: GET
- name: webhook_settings
  endpoint:
    path: /webhook-settings
    method: PUT
- name: list_webhook_subscriptions
  endpoint:
    path: /list-webhook-subscriptions
    method: GET
- name: dunning_actions
  endpoint:
    path: /dunning-actions
    method: PUT
- name: register_customer
  endpoint:
    path: /register-customer
    method: POST
- name: get_customer
  endpoint:
    path: /get-customer
    method: GET
- name: list_customers
  endpoint:
    path: /list-customers
    method: GET
- name: update_customer
  endpoint:
    path: /update-customer
    method: PATCH
- name: delete_customer
  endpoint:
    path: /delete-customer
    method: DELETE
- name: create_offer
  endpoint:
    path: /create-offer
    method: POST
- name: list_offers
  endpoint:
    path: /list-offers
    method: GET
- name: get_offer
  endpoint:
    path: /get-offer
    method: GET
- name: create_subscription
  endpoint:
    path: /create-subscription
    method: POST
- name: get_subscription
  endpoint:
    path: /get-subscription
    method: GET
- name: list_subscriptions
  endpoint:
    path: /list-subscriptions
    method: GET
- name: update_subscription
  endpoint:
    path: /update-subscription
    method: PATCH
- name: list_entitlements
  endpoint:
    path: /list-entitlements
    method: GET
- name: get_entitlement
  endpoint:
    path: /get-entitlement
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: gifts
  endpoint:
    path: /gifts
    method: GET
- name: revoke_refresh_tokens
  endpoint:
    path: /refresh_tokens
    method: DELETE
- name: refresh_tokens
  endpoint:
    path: /refresh_tokens
    method: DELETE
- name: publisher_consents
  endpoint:
    path: /publishers/publisherId/consents
    method: GET
- name: publisher_consents
  endpoint:
    path: /publishers/{publisherId}/consents
    method: GET
    data_selector: responseData.consents
- name: customer_consents
  endpoint:
    path: /customers/{customerId}/consents
    method: PUT
- name: customers_consents
  endpoint:
    path: /customers/customerId/consents
    method: PUT
- name: locales
  endpoint:
    path: /locales
    method: GET
- name: customer_locales
  endpoint:
    path: /locales
    method: GET
    params:
      customerIP: string
- name: update_password
  endpoint:
    path: /customers/passwords
    method: PATCH
- name: update_password
  endpoint:
    path: /customers/passwords
    method: PATCH
- name: capture_answers
  endpoint:
    path: /customers/{customerId}/capture
    method: PUT
- name: orders
  endpoint:
    path: /orders
    method: POST
- name: orders
  endpoint:
    path: /orders
    method: POST
- name: capture_status
  endpoint:
    path: /customers/{customerId}/capture/status
    method: GET
- name: capture_status
  endpoint:
    path: /customers/customerId/capture/status
    method: GET
- name: order
  endpoint:
    path: /orders/{orderId}
    method: GET
- name: orders
  endpoint:
    path: /orders/orderId
    method: GET
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: responseData.paymentMethods
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
    params:
      couponCode: required
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
    params:
      couponCode: couponCode
- name: entitlements
  endpoint:
    path: /entitlements/{offerId}
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements/offerId
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
    params:
      pageNumber: '1'
      pageLimit: '15'
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: offers
  endpoint:
    path: /offers/offerId
    method: GET
- name: offer_details
  endpoint:
    path: /offers/{offerId}
    method: GET
    data_selector: responseData
    params:
      customerIP: string
- name: offers
  endpoint:
    path: /v2/offers/offerId
    method: GET
- name: offer_details
  endpoint:
    path: /v2/offers/{offerId}
    method: GET
- name: offer_details_for_customer
  endpoint:
    path: /offers/{offerId}/customers/{customerEmail}
    method: GET
    params:
      customerIP: string
- name: offer_customer_details
  endpoint:
    path: /offers/offerId/customers/customerEmail
    method: GET
- name: gift
  endpoint:
    path: /gifts/{giftId}
    method: GET
    data_selector: responseData
- name: gift
  endpoint:
    path: /gifts/giftId
    method: GET
- name: gifts
  endpoint:
    path: /gifts/giftId
    method: PATCH
- name: gift
  endpoint:
    path: /gifts/{giftId}
    method: PATCH
- name: sso_login
  endpoint:
    path: /sso/auths
    method: POST
- name: sso_auths
  endpoint:
    path: /sso/auths
    method: POST
- name: activate_offer_localization
  endpoint:
    path: /3.1/offers/{offerId}/localizations/{countryCode}/activate
    method: POST
- name: offers
  endpoint:
    path: /3.1/offers
    method: GET
- name: customers
  endpoint:
    path: /3.1/customers
    method: GET
- name: subscriptions
  endpoint:
    path: /3.1/subscriptions
    method: GET
- name: payments
  endpoint:
    path: /3.1/payments
    method: GET
- name: entitlements
  endpoint:
    path: /3.1/entitlements
    method: GET
- name: gift
  endpoint:
    path: /31-get-a-gift
    method: GET
- name: gift
  endpoint:
    path: /31-update-a-gift
    method: PATCH
- name: gift
  endpoint:
    path: /31-verify-a-gift
    method: GET
- name: gift
  endpoint:
    path: /31-redeem-a-gift
    method: POST
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: gifts
  endpoint:
    path: /gifts
    method: GET
- name: generate_code
  endpoint:
    path: /v1/codes/generate
    method: POST
- name: generate_code
  endpoint:
    path: /v1/codes/generate
    method: POST
- name: offer_details
  endpoint:
    path: /getOfferDetails
    method: GET
- name: offer_details
  endpoint:
    method: POST
    data_selector: result
    params:
      method: getOfferDetails
      jsonrpc: '2.0'
- name: getAccessStatus
  endpoint:
    method: POST
    params:
      customerToken: '{{ dlt.secrets[''cleeng_customer_token''] }}'
      offerId: required_string
      ipAddress: optional_string
- name: gifts_verification
  endpoint:
    path: /gifts/verification/code
    method: GET
- name: gifts_verification
  endpoint:
    path: /gifts/verification/{code}
    method: GET
    data_selector: responseData
- name: inappPurchaseSyncResult
  endpoint:
    method: POST
- name: inappPurchaseValidationSucceeded
  endpoint:
    method: POST
- name: inappPurchaseValidationFailed
  endpoint:
    method: POST
- name: subscriptionCreated
  endpoint:
    method: POST
- name: subscriptionTerminated
  endpoint:
    method: POST
- name: webhook_subscriptions
  endpoint:
    path: /webhook-subscriptions
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: authorize_code
  endpoint:
    path: /v1/codes/authorize
    method: POST
- name: authorize_code
  endpoint:
    path: /v1/codes/authorize
    method: POST
- name: single_offers
  endpoint:
    method: POST
    data_selector: result.items
    params:
      offset: 0
      limit: 10
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: offers
  endpoint:
    method: GET
- name: customers
  endpoint:
    method: GET
- name: transactions
  endpoint:
    method: GET
- name: payments
  endpoint:
    method: GET
- name: subscriptions
  endpoint:
    method: GET
- name: entitlements
  endpoint:
    method: GET
- name: user_reports
  endpoint:
    method: GET
- name: subscription_reports
  endpoint:
    method: GET
- name: auths_refresh_token
  endpoint:
    path: /auths/refresh_token
    method: POST
- name: customers
  endpoint:
    path: /customers
    method: POST
- name: auths
  endpoint:
    path: /auths
    method: POST
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: orders
  endpoint:
    path: /orders/orderId
    method: PATCH
- name: payment_method_ids
  endpoint:
    path: /payment-method-ids
    method: GET
- name: order
  endpoint:
    path: /orders/{orderId}
    method: PATCH
- name: redeem_gift
  endpoint:
    path: /gifts/redeem/code
    method: POST
- name: redeem_gift
  endpoint:
    path: /gifts/redeem/{code}
    method: POST
- name: webhook_subscriptions
  endpoint:
    path: /3.1/webhook_subscriptions/{topic}
    method: PUT
- name: webhook_subscriptions
  endpoint:
    path: /3.1/webhook_subscriptions/topic
    method: PUT
- name: gifts
  endpoint:
    path: /3.1/gifts/{giftId}
    method: PATCH
- name: gifts
  endpoint:
    path: /3.1/gifts/giftId
    method: PATCH
- name: offer_localization
  endpoint:
    path: /3.1/offers/{offerId}/localizations/{countryCode}
    method: PATCH
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: offer_localizations
  endpoint:
    path: /offers/offerId/localizations/countryCode
    method: PATCH
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: rental_offers
  endpoint:
    method: GET
- name: rental_offers
  endpoint:
    method: POST
    data_selector: result.items
- name: check_code
  endpoint:
    path: /v1/codes/check
    method: GET
    data_selector: ''
    params: {}
- name: check_code
  endpoint:
    path: /v1/codes/check
    method: GET
- name: auth_hosted_widget
  endpoint:
    path: /docs/auth-hosted-widget
- name: checkout_hosted_widget
  endpoint:
    path: /docs/checkout-hosted-widget
- name: account_hosted_widget
  endpoint:
    path: /docs/account-hosted-widget
- name: customer_care_hosted_widget
  endpoint:
    path: /docs/customer-care-hosted-widget
- name: translations
  endpoint:
    path: /cleeng-translations
    method: GET
    data_selector: translations
- name: adyen_payment_methods
  endpoint:
    path: /connectors/adyen/payment-methods
    method: POST
    params:
      orderId: required
- name: adyen_payment_methods
  endpoint:
    path: /connectors/adyen/payment-methods
    method: POST
    data_selector: responseData.paymentMethods
- name: webhook_subscriptions
  endpoint:
    path: /webhook_subscriptions
    method: GET
- name: webhook_subscriptions
  endpoint:
    path: /3.1/webhook_subscriptions
    method: GET
- name: gift_verification
  endpoint:
    path: /3.1/gifts/{code}/verification
    method: GET
    params:
      customerIp: required
      redeemerId: required
- name: gift_verification
  endpoint:
    path: /3.1/gifts/code/verification
    method: GET
- name: season_groups
  endpoint:
    path: /3.1/offers/season-groups
    method: POST
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: season-groups
  endpoint:
    path: /offers/season-groups
    method: POST
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: subscription_offer
  endpoint:
    path: /3.1/offers/{offerId}
    method: GET
- name: subscription_offer
  endpoint:
    method: GET
- name: rental_offers
  endpoint:
    path: /reference/listrentaloffers
    method: GET
- name: subscription_offers
  endpoint:
    path: /reference/listsubscriptionoffers
    method: GET
- name: customers
  endpoint:
    path: /reference/list-customers
    method: GET
- name: offers
  endpoint:
    path: /reference/list-offers
    method: GET
- name: subscriptions
  endpoint:
    path: /reference/list-subscriptions
    method: GET
- name: passes
  endpoint:
    path: /reference/list-passes
    method: GET
- name: entitlements
  endpoint:
    path: /reference/list-entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /reference/list-campaigns
    method: GET
- name: payments
  endpoint:
    path: /reference/payments
    method: GET
- name: one_click_coupons
  endpoint:
    method: GET
- name: dunning_actions_settings
  endpoint:
    path: /dunning_actions_settings/dunning_actions_settings_type
    method: PUT
- name: dunning_actions
  endpoint:
    path: /3.1/dunning_actions_settings/{dunning_actions_settings_type}
    method: PUT
- name: adyen_payment
  endpoint:
    path: /connectors/adyen/initial-payment
    method: POST
- name: season_groups
  endpoint:
    path: /offers/season-groups/id
    method: PATCH
- name: season_groups
  endpoint:
    path: /3.1/offers/season-groups/{id}
    method: PATCH
- name: gifts
  endpoint:
    path: /3.1/gifts/code/redeem
    method: POST
- name: redeem_gift
  endpoint:
    path: /3.1/gifts/{code}/redeem
    method: POST
    params:
      customerIp: string
      redeemerId: int32
- name: register_customer
  endpoint:
    path: /3.1/customers
    method: POST
- name: listSubscriptionOffers
  endpoint:
    method: POST
    params:
      publisherToken: '{{ dlt.secrets[''cleeng_publisher_token''] }}'
      criteria:
        active: '1'
      offset: '0'
      limit: '2'
- name: payments
  endpoint:
    path: /3.1/payments
    method: POST
- name: customer_transactions
  endpoint:
    path: /reference/fetch-customers-transactions
    method: GET
- name: gift
  endpoint:
    path: /reference/get-a-gift
    method: GET
- name: adyen_payment_finalize
  endpoint:
    path: /connectors/adyen/initial-payment/finalize
    method: POST
- name: finalize_adyen_payment
  endpoint:
    path: /connectors/adyen/initial-payment/finalize
    method: POST
- name: orders
  endpoint:
    path: /orders
    method: POST
- name: orders
  endpoint:
    path: /3.1/orders
    method: POST
- name: gift
  endpoint:
    path: /3.1/gifts/{giftId}
    method: GET
- name: gift
  endpoint:
    path: /3.1/gifts/giftId
    method: GET
- name: season_groups
  endpoint:
    path: /3.1/offers/season-groups
    method: GET
- name: season_groups
  endpoint:
    path: /3.1/offers/season-groups
    method: GET
- name: deactivate_offer_localization
  endpoint:
    path: /offers/offerId/localizations/countryCode/deactivate
    method: POST
- name: deactivate_offer_localization
  endpoint:
    path: /3.1/offers/{offerId}/localizations/{countryCode}/deactivate
    method: POST
- name: pass_offers
  endpoint:
    path: /listPassOffers
    method: GET
- name: pass_offers
  endpoint:
    path: /3.1/offers
    method: GET
    data_selector: items
    params:
      offset: 0
      limit: 200
- name: paypal_tokens
  endpoint:
    path: /connectors/paypal/v1/tokens
    method: POST
- name: consent_definitions
  endpoint:
    method: POST
    data_selector: result
    params:
      method: getConsentDefinitions
      publisherToken: '{{ dlt.secrets[''publisher_token''] }}'
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: pass
  endpoint:
    path: /pass
    method: GET
- name: roku_payment
  endpoint:
    path: /roku/payment
    method: POST
- name: payments
  endpoint:
    path: /payments/paymentId/cancel
    method: PATCH
- name: cancel_payment
  endpoint:
    path: /3.1/payments/{paymentId}/cancel
    method: PATCH
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: purchase_without_payment_details
  endpoint:
    path: /payments
    method: POST
- name: transfer_pass
  endpoint:
    path: /3.1/passes/{passId}/transfer
    method: POST
- name: passes
  endpoint:
    path: /passes/passId/transfer
    method: POST
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: subscription
  endpoint:
    path: /subscription
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: subscription
  endpoint:
    path: /subscriptions/{id}
    method: GET
- name: available_switches
  endpoint:
    path: /subscriptions/{id}/switches/available
    method: GET
- name: switches
  endpoint:
    path: /subscriptions/{id}/switches
    method: GET
- name: switch_details
  endpoint:
    path: /switches/{id}
    method: GET
- name: subscription_switch_settings
  endpoint:
    path: /subscriptions/{id}/switch-settings
    method: GET
- name: gifts
  endpoint:
    path: /gifts/{id}
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: generateCustomerTokenFromExternalId
  endpoint:
    path: /generateCustomerTokenFromExternalId
    method: POST
    params:
      publisherToken: '{{ dlt.secrets[''cleeng_publisher_token''] }}'
      externalId: string
- name: payments
  endpoint:
    path: /3.1/payments
    method: PATCH
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: paypal_tokens
  endpoint:
    path: /connectors/paypal/v1/tokens
    method: POST
- name: payment_method_ids
  endpoint:
    path: /payment-methods
    method: GET
- name: customer_authorised_payments
  endpoint:
    path: /3.1/payment_details/{paymentDetailsId}/authorised_payments
    method: GET
- name: authorised_payments
  endpoint:
    path: /payment_details/paymentDetailsId/authorised_payments
    method: GET
    data_selector: payments
- name: customers
  endpoint:
    path: /customers/{customerId}
    method: GET
    data_selector: responseData
- name: subscriptions
  endpoint:
    path: /3.1/subscriptions
    method: POST
- name: subscriptions
  endpoint:
    path: /3.1/subscriptions
    method: POST
- name: subscription
  endpoint:
    method: POST
    data_selector: records
- name: capture_questions
  endpoint:
    path: /reference/fetchcapturequestions
    method: GET
    data_selector: result
- name: capture_questions
  endpoint:
    method: POST
- name: entitlements
  endpoint:
    path: /3.1/entitlements
    method: GET
    data_selector: data
    params:
      customerId: '{{ customerId }}'
      offset: 0
      limit: 100
      status: active
      offerType: SP
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: customers
  endpoint:
    path: /customers/{customerId}
    method: PATCH
- name: register
  endpoint:
    path: /register
    method: POST
- name: login
  endpoint:
    path: /login
    method: POST
- name: refresh_token
  endpoint:
    path: /refresh-token
    method: POST
- name: create_order
  endpoint:
    path: /create-order
    method: POST
- name: get_order
  endpoint:
    path: /get-order
    method: GET
- name: fetch_offers
  endpoint:
    path: /fetch-offers
    method: GET
- name: fetch_customers_data
  endpoint:
    path: /fetch-customers-data
    method: GET
- name: fetch_customers_subscriptions
  endpoint:
    path: /fetch-customers-subscriptions
    method: GET
- name: list_customers
  endpoint:
    path: /list-customers
    method: GET
- name: list_offers
  endpoint:
    path: /list-offers
    method: GET
- name: list_subscriptions
  endpoint:
    path: /list-subscriptions
    method: GET
- name: list_entitlements
  endpoint:
    path: /list-entitlements
    method: GET
- name: list_campaigns
  endpoint:
    path: /list-campaigns
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: POST
- name: payment_details
  endpoint:
    path: /3.1/payment_details
    method: POST
- name: payment_details
  endpoint:
    path: /3.1/payment_details
    method: POST
    params:
      customerId: required
      token: required
      paymentMethodId: required
      paymentMethodSpecificParams: optional
      active: optional
- name: subscription
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}
    method: GET
- name: subscription
  endpoint:
    path: /subscriptions/subscriptionId
    method: GET
- name: entitlements
  endpoint:
    path: /3.1/entitlements/customer_id/customerId/offer_id/offerId
    method: GET
- name: entitlements
  endpoint:
    path: /3.1/entitlements/customer_id/{customerId}/offer_id/{offerId}
    method: GET
- name: capture_status
  endpoint:
    path: /fetchCaptureStatus
    method: POST
    params:
      publisherToken: '{{ dlt.secrets[''cleeng_publisher_token''] }}'
- name: capture_status
  endpoint:
    path: /reference/fetch-capture-status
    method: GET
- name: offers
  endpoint:
    path: /offers/:offerId
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: POST
- name: orders
  endpoint:
    path: /orders
    method: POST
- name: order
  endpoint:
    path: /create-an-order
    method: POST
- name: payment
  endpoint:
    path: /create-a-payment
    method: POST
- name: subscription
  endpoint:
    path: /create-subscription
    method: POST
- name: payment_ems
  endpoint:
    path: /create-a-payment-ems
    method: POST
- name: subscription_renew
  endpoint:
    path: /renew-subscription
    method: POST
- name: customers_subscriptions
  endpoint:
    path: /customers/customerId/subscriptions
    method: GET
- name: customer_subscriptions
  endpoint:
    path: /customers/{customerId}/subscriptions
    method: GET
    data_selector: responseData.items
- name: payment_details
  endpoint:
    path: /3.1/payment_details/{paymentDetailsId}
    method: DELETE
- name: payment_details
  endpoint:
    path: /3.1/payment_details/paymentDetailsId
    method: DELETE
- name: customer_transactions
  endpoint:
    path: /3.1/customer/transactions
    method: GET
- name: offers
  endpoint:
    path: /v2/offers/{offerId}
    method: GET
- name: orders
  endpoint:
    path: /orders/{orderId}
    method: PATCH
- name: customer_transactions
  endpoint:
    path: /customers/{customerId}/transactions
    method: GET
- name: gifts
  endpoint:
    path: /gifts/{giftId}
    method: GET
- name: gift_verification
  endpoint:
    path: /gifts/verification/{code}
    method: GET
- name: gift_redemption
  endpoint:
    path: /gifts/redeem/{code}
    method: POST
- name: campaigns
  endpoint:
    path: /3.1/campaigns
    method: GET
    params:
      couponCode: couponCode
- name: campaigns
  endpoint:
    path: /3.1/campaigns
    method: GET
    params:
      couponCode: required
- name: broadcaster_personal_data
  endpoint:
    path: /updateBroadcasterSpecificPersonalDataWithCaptureAnswers
    method: GET
    data_selector: result
- name: broadcaster_specific_personal_data_with_capture_answers
  endpoint:
    method: POST
- name: subscriptions
  endpoint:
    path: /3.1/subscriptions
    method: GET
    params:
      customerId: int32
      externalId: string
      limit: int32
      offerId: string
      offset: int32
      paymentMethodId: int32
      status: string
      transactionId: string
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: customers
  endpoint:
    path: /customers/{customerId}
    method: GET
    data_selector: responseData
- name: customers
  endpoint:
    path: /customers/customerId
    method: GET
- name: current_plan
  endpoint:
    method: GET
- name: payment_information
  endpoint:
    method: GET
- name: user_profile
  endpoint:
    method: GET
- name: customer_transactions
  endpoint:
    method: GET
- name: customer_consents
  endpoint:
    method: GET
- name: transactions
  endpoint:
    path: /3.1/transactions
    method: GET
- name: transactions
  endpoint:
    path: /3.1/transactions
    method: GET
    data_selector: responseData.items
    params:
      customerId: required
      limit: 50
      offset: 0
- name: customer_subscription
  endpoint:
    path: /customers/{customerId}/subscriptions
    method: PATCH
    params:
      offerId: string
      status: string
      cancellationReason: string
- name: refresh_token
  endpoint:
    path: /refresh-token
    method: POST
- name: register
  endpoint:
    path: /register
    method: POST
- name: register_customer
  endpoint:
    path: /register-customer
    method: POST
- name: login
  endpoint:
    path: /login
    method: POST
- name: customers_subscriptions
  endpoint:
    path: /fetch-customers-subscriptions
    method: GET
- name: list_entitlements
  endpoint:
    path: /list-entitlements
    method: GET
- name: get_entitlements
  endpoint:
    path: /get-entitlements
    method: GET
- name: get_entitlement
  endpoint:
    path: /get-entitlement
    method: GET
- name: fetch_offers
  endpoint:
    path: /fetch-offers
    method: GET
- name: list_offers
  endpoint:
    path: /list-offers
    method: GET
- name: purchases
  endpoint:
    path: /purchases
    method: POST
- name: purchases_synchronizations
  endpoint:
    path: /purchases/synchronizations/{synchronizationId}
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions/subscriptionId
    method: PATCH
- name: subscription
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}
    method: PATCH
    params:
      status: string
      couponCode: string
      expiresAt: int32
      paymentDetailsId: int32
      inTrial: boolean
      externalProperties: object
- name: broadcaster_personal_data
  endpoint:
    path: /updateBroadcasterSpecificPersonalDataWithCaptureAnswers
    method: POST
    params:
      method: updateBroadcasterSpecificPersonalDataWithCaptureAnswers
      json-rpc: '2.0'
- name: update_broadcaster_specific_personal_data_with_capture_answers
  endpoint:
    path: /updateBroadcasterSpecificPersonalDataWithCaptureAnswers
    method: POST
- name: android_payment
  endpoint:
    path: /android/payment
    method: POST
- name: android_payment
  endpoint:
    path: /android/payment
    method: POST
- name: sso_auths
  endpoint:
    path: /sso/auths
    method: POST
- name: sso_login
  endpoint:
    path: /sso/auths
    method: POST
    data_selector: responseData
    params: {}
- name: apple_payment
  endpoint:
    path: /apple/payment
    method: POST
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: accessible_tags
  endpoint:
    path: /getaccessibletags
    method: GET
- name: customers
  endpoint:
    path: /3.1/customers
    method: GET
- name: customers
  endpoint:
    path: /3.1/customers
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: PUT
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: POST
- name: subscriptions
  endpoint:
    path: /subscriptions/renew
    method: POST
- name: passes
  endpoint:
    path: /passes
    method: POST
- name: customer_payment_details
  endpoint:
    path: /customers/{customerId}/payment_details
    method: GET
- name: customers_payment_details
  endpoint:
    path: /customers/customerId/payment_details
    method: GET
- name: customers
  endpoint:
    path: /3.1/customers
    method: POST
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: data
- name: customer_subscriptions
  endpoint:
    path: /customers/:customerId/subscriptions
    method: GET
- name: customer_subscription_update
  endpoint:
    path: /customers/:customerId/subscriptions
    method: PUT
- name: apply_coupon
  endpoint:
    path: /customers/:customerId/subscriptions/:subscriptionId
    method: POST
- name: available_switches
  endpoint:
    path: /customers/:customerId/subscription_switches/:offerId/availability
    method: GET
- name: switch_subscription
  endpoint:
    path: /customers/:customerId/subscription_switches/:offerId
    method: POST
- name: update_switch
  endpoint:
    path: /customers/:customerId/subscription_switches/:switchId
    method: PUT
- name: list_switches
  endpoint:
    path: /customers/:customerId/subscription_switches
    method: GET
- name: fetch_switch_details
  endpoint:
    path: /customers/:customerId/subscription_switches/:switchId
    method: GET
- name: customer_offers
  endpoint:
    path: /customers/:customerId/offers
    method: GET
- name: activate_subscription
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}/activate
    method: POST
- name: subscriptions
  endpoint:
    path: /subscriptions/subscriptionId/activate
    method: POST
- name: apple_payment
  endpoint:
    path: /apple/payment
    method: POST
- name: customer_email
  endpoint:
    method: POST
    data_selector: result
- name: webhook_subscriptions
  endpoint:
    path: /3.1/webhook_subscriptions/{topic}
    method: PUT
- name: webhook_subscriptions
  endpoint:
    path: /webhook_subscriptions/topic
    method: PUT
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: storekit2_purchases
  endpoint:
    path: /storekit2/purchases
    method: POST
- name: purchases
  endpoint:
    path: /purchases
    method: POST
- name: purchases_transfers
  endpoint:
    path: /purchases/transfers
    method: POST
- name: purchase_registration
  endpoint:
    path: /storekit2/purchases
    method: POST
- name: purchase_synchronization_status
  endpoint:
    path: /purchases/synchronizations/{synchronizationId}
    method: GET
- name: server_notifications
  endpoint:
    path: /storekit2/notifications/broadcasters/{publisherId}
    method: POST
- name: customer_consents
  endpoint:
    path: /customers/{customerId}/consents
    method: GET
    data_selector: responseData.consents
- name: customers_consents
  endpoint:
    path: /customers/customerId/consents
    method: GET
- name: customer_payment_details
  endpoint:
    path: /customers/:customerId/payment_details
    method: GET
- name: customer_transactions
  endpoint:
    path: /customers/:customerId/transactions
    method: GET
- name: adyen_payment_methods
  endpoint:
    path: /adyen/payment-methods
    method: GET
- name: adyen_add_payment_details
  endpoint:
    path: /adyen/add-payment-details
    method: POST
- name: finalize_add_adyen_payment_details
  endpoint:
    path: /adyen/finalize-add-payment-details
    method: POST
- name: add_paypal_payment_details
  endpoint:
    path: /paypal/add-payment-details
    method: POST
- name: delete_payment_details
  endpoint:
    path: /payment-details
    method: DELETE
- name: subscriptions
  endpoint:
    path: /3.1/subscriptions
    method: GET
- name: subscription
  endpoint:
    path: /3.1/subscriptions
    method: POST
- name: subscription_update
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}
    method: PATCH
- name: subscription_renew
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}/renew
    method: POST
- name: subscription_transfer
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}/transfer
    method: POST
- name: subscription_revive
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}/revive
    method: POST
- name: subscription_switches
  endpoint:
    path: /3.1/subscription_switches
    method: POST
- name: subscription_switch_update
  endpoint:
    path: /3.1/subscription_switches/{subscriptionSwitchId}
    method: PATCH
- name: payments
  endpoint:
    path: /3.1/payments
    method: POST
- name: customer
  endpoint:
    path: /3.1/customers/{customerId}
    method: GET
- name: customers
  endpoint:
    path: /customers/customerId
    method: GET
    data_selector: data
- name: customer
  endpoint:
    path: /3.1/customers/{customerId}
    method: GET
- name: subscriptions
  endpoint:
    path: /3.1/subscriptions/subscriptionId/cancel
    method: POST
- name: cancel_subscription
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}/cancel
    method: POST
    params:
      cancellationReason: string
- name: orders
  endpoint:
    path: /3.1/orders
    method: POST
- name: orders
  endpoint:
    path: /orders
    method: POST
- name: passes
  endpoint:
    path: /3.1/passes
    method: POST
- name: pass
  endpoint:
    path: /3.1/passes/{passId}
    method: GET
- name: passes_list
  endpoint:
    path: /3.1/passes
    method: GET
- name: pass_update
  endpoint:
    path: /3.1/passes/{passId}
    method: PATCH
- name: pass_terminate
  endpoint:
    path: /3.1/passes/{passId}/terminate
    method: POST
- name: pass_transfer
  endpoint:
    path: /3.1/passes/{passId}/transfer
    method: POST
- name: roku_payment
  endpoint:
    path: /roku/payment
    method: POST
- name: roku_payment
  endpoint:
    path: /roku/payment
    method: POST
- name: customers
  endpoint:
    path: /customers/:customerId
    method: GET
- name: customers_update
  endpoint:
    path: /customers/:customerId
    method: PATCH
- name: password_reset
  endpoint:
    path: /customers/passwords
    method: POST
- name: customer_consents
  endpoint:
    path: /customers/:customerId/consents
    method: GET
- name: customer_consents_update
  endpoint:
    path: /customers/:customerId/consents
    method: PUT
- name: android_payment
  endpoint:
    path: /android/payment
    method: POST
- name: entitlements
  endpoint:
    path: /entitlement
    method: GET
- name: accessible_tags
  endpoint:
    path: /getaccessibletags
    method: GET
- name: register
  endpoint:
    path: /register
    method: POST
- name: login
  endpoint:
    path: /login
    method: POST
- name: android_payment
  endpoint:
    path: /android/payment
    method: POST
- name: customer_transactions
  endpoint:
    path: /customers/{customerId}/transactions
    method: GET
    data_selector: responseData.items
    params:
      limit: '50'
      offset: '0'
- name: customer_transactions
  endpoint:
    path: /customers/customerId/transactions
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: customers
  endpoint:
    path: /3.1/customers
    method: GET
    data_selector: data
    params:
      offset: 0
      limit: 10
- name: terminate_subscription
  endpoint:
    path: /3.1/subscriptions/subscriptionId/terminate
    method: POST
- name: terminate_subscription
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}/terminate
    method: POST
- name: amazon_payment
  endpoint:
    path: /amazon/payment
    method: POST
- name: amazon_firetv_payment
  endpoint:
    path: /amazon/payment
    method: POST
- name: reset_password
  endpoint:
    path: /reset-password
    method: PUT
    params:
      publisherToken: '{{ dlt.secrets[''publisher_token''] }}'
      customerEmail: '{{ dlt.secrets[''customer_email''] }}'
      resetUrl: '{{ dlt.secrets[''reset_url''] }}'
- name: request_password_reset
  endpoint:
    path: /requestPasswordReset
    method: POST
- name: entitlements
  endpoint:
    method: GET
    data_selector: accessGranted
- name: customers
  endpoint:
    path: /3.1/customers
    method: POST
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: data
- name: subscriptions
  endpoint:
    path: /customers/subscriptions
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: available_switches
  endpoint:
    path: /customers/{customerId}/subscription_switches/{offerId}/availability
    method: GET
- name: subscription_switches_availability
  endpoint:
    path: /customers/customerId/subscription_switches/offerId/availability
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: customer
  endpoint:
    path: /customers/customerId
    method: PATCH
- name: customer
  endpoint:
    path: /3.1/customers/{customerId}
    method: PATCH
- name: subscription_switches_availability
  endpoint:
    path: /3.1/subscription_switches/availability
    method: GET
- name: subscription_switches_availability
  endpoint:
    path: /3.1/subscription_switches/availability
    method: GET
    params:
      customerId: required
      offerId: required
- name: updateCustomerEmail
  endpoint:
    method: POST
- name: updateCustomerEmail
  endpoint:
    method: POST
    params:
      publisherToken: '{{ dlt.secrets[''publisherToken''] }}'
      customerEmail: string
      newEmail: string
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: entitlements
  endpoint:
    path: /3.1/entitlements
    method: GET
    data_selector: data
    params:
      offset: 0
      limit: 50
- name: samsung_tv
  endpoint:
    path: /samsung-tv
    method: POST
- name: check_samsung_tv_purchase_status
  endpoint:
    path: /check-samsung-tv-purchase-status
    method: GET
- name: register_apple_sk2_purchase
  endpoint:
    path: /register-apple-sk2-purchase
    method: POST
- name: transfer_apple_sk2_purchase
  endpoint:
    path: /transfer-apple-sk2-purchase
    method: POST
- name: check_apple_sk2_purchase_synchronization_status
  endpoint:
    path: /check-apple-sk2-purchase-synchronization-status
    method: GET
- name: vizio_purchase_validation
  endpoint:
    path: /vizio-purchase-validation
    method: POST
- name: check_vizio_purchase_status
  endpoint:
    path: /check-vizio-purchase-status
    method: GET
- name: entitlements
  endpoint:
    path: /3.1/entitlements/customer_id/{customer_id}/offer_id/{offer_id}
    method: GET
- name: amazon_payment
  endpoint:
    path: /amazon/payment
    method: POST
- name: sso_auths
  endpoint:
    path: /sso/auths
    method: POST
- name: subscription_switches
  endpoint:
    path: /customers/customerId/subscription_switches/offerId
    method: POST
- name: switch_subscription
  endpoint:
    path: /customers/{customerId}/subscription_switches/{offerId}
    method: POST
    params:
      toOfferId: required
      switchDirection: required
- name: samsung_tv_purchase
  endpoint:
    path: /samsung-tv/purchase-validation
    method: POST
- name: samsung_tv_purchase_validation
  endpoint:
    path: /samsung-tv/purchase-validation
    method: POST
- name: request_password_reset
  endpoint:
    path: /3.1/customers/request_password_reset
    method: POST
- name: customers
  endpoint:
    path: /3.1/customers
    method: GET
- name: offers
  endpoint:
    path: /3.1/offers
    method: GET
- name: subscriptions
  endpoint:
    path: /3.1/subscriptions
    method: GET
- name: orders
  endpoint:
    path: /3.1/orders
    method: GET
- name: payments
  endpoint:
    path: /3.1/payments
    method: GET
- name: entitlements
  endpoint:
    path: /3.1/entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /3.1/campaigns
    method: GET
- name: passes
  endpoint:
    path: /3.1/passes
    method: GET
- name: update_customer_password
  endpoint:
    method: POST
- name: reset_password
  endpoint:
    path: /reference/reset-password
    method: PUT
    params:
      publisherToken: string
      customerEmail: string
      resetPasswordToken: string
      newPassword: string
- name: subscription_switches
  endpoint:
    path: /3.1/subscription_switches
    method: POST
- name: subscription_switches
  endpoint:
    path: /3.1/subscription_switches
    method: POST
    params:
      subscriptionId: int32
      toOfferId: string
      switchDirection: string
      algorithm: string
      customerId: int32
      fromOfferId: string
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
    params:
      couponCode: couponCode
- name: campaigns
  endpoint:
    path: /3.1/campaigns
    method: GET
    params:
      couponCode: required
- name: roku_payment
  endpoint:
    path: /roku/payment
    method: POST
- name: entitlements
  endpoint:
    path: /3.1/entitlements
    method: GET
- name: pause_subscription
  endpoint:
    path: /pause-subscription
    method: POST
- name: resume_subscription
  endpoint:
    path: /resume-subscription
    method: POST
- name: subscription_switches
  endpoint:
    path: /subscription_switches
    method: GET
    params:
      subscriptionId: string
      status: string
- name: subscription_switches
  endpoint:
    path: /subscription_switches
    method: GET
- name: subscription_switches
  endpoint:
    path: /3.1/subscription_switches
    method: GET
    params:
      customerId: required
      subscriptionId: optional
      status: optional
- name: subscription_switches
  endpoint:
    path: /3.1/subscription_switches
    method: GET
- name: customers
  endpoint:
    path: /3.1/customers
    method: GET
- name: offers
  endpoint:
    path: /3.1/offers
    method: GET
- name: subscriptions
  endpoint:
    path: /3.1/subscriptions
    method: GET
- name: orders
  endpoint:
    path: /3.1/orders
    method: GET
- name: payments
  endpoint:
    path: /3.1/payments
    method: GET
- name: entitlements
  endpoint:
    path: /3.1/entitlements
    method: GET
- name: delete_customer
  endpoint:
    path: /3.1/customers/{customerId}
    method: DELETE
- name: samsung_tv_purchase_status
  endpoint:
    path: /samsung-tv/purchase-status
    method: GET
    params:
      correlationId: required
- name: samsung_tv_purchase_status
  endpoint:
    path: /samsung-tv/purchase-status
    method: GET
- name: updateCustomerSubscription
  endpoint:
    method: POST
    data_selector: result
- name: consent_definitions
  endpoint:
    method: POST
    data_selector: result
- name: webhook_settings
  endpoint:
    path: /webhook-settings
    method: POST
- name: subscription_switch_requested
  endpoint:
    path: /docs/webhook-subscription-topics#subscriptionswitchrequested
- name: subscription_switched
  endpoint:
    path: /docs/webhook-subscription-topics#subscriptionswitched
- name: transaction_created
  endpoint:
    path: /docs/webhook-topics#transactioncreated
- name: subscription_created
  endpoint:
    path: /docs/webhook-subscription-topics#subscriptioncreated
- name: subscription_renewed
  endpoint:
    path: /docs/webhook-subscription-topics#subscriptionrenewed
- name: payment_rejected
  endpoint:
    path: /docs/webhook-topics#paymentrejected
- name: subscription_terminated
  endpoint:
    path: /docs/webhook-subscription-topics#subscriptionterminated
- name: in_app_purchase_sync_result
  endpoint:
    path: /docs/webhooks-in-app-purchase-topics#inapppurchasesyncresult
- name: subscription_lifecycle
  endpoint:
    method: GET
- name: purchase_validation
  endpoint:
    path: /samsung-tv/purchase-validation
    method: POST
- name: purchase_status
  endpoint:
    path: /samsung-tv/purchase-status
    method: GET
- name: subscription_switches
  endpoint:
    path: /3.1/subscription_switches/{switchId}
    method: GET
- name: subscription_switches
  endpoint:
    path: /3.1/subscription_switches/switchId
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: POST
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: offer
  endpoint:
    path: /offers/{id}
    method: GET
- name: offer
  endpoint:
    path: /offers/{id}
    method: PATCH
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: storekit2_purchases
  endpoint:
    path: /storekit2/purchases
    method: POST
- name: storekit2_purchases
  endpoint:
    path: /storekit2/purchases
    method: POST
- name: customer_library
  endpoint:
    path: /3.1/transactions
    method: GET
- name: customer_library
  endpoint:
    method: GET
- name: customer_subscriptions
  endpoint:
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: customer_auths
  endpoint:
    path: /customers/auths
    method: GET
- name: customer_entitlements
  endpoint:
    path: /customers/entitlements
    method: GET
- name: generateCustomerToken
  endpoint:
    path: /generateCustomerToken
    method: POST
    params:
      publisherToken: '{{ dlt.secrets[''cleeng_publisher_token''] }}'
      customerEmail: required
- name: vizio_purchase_status
  endpoint:
    path: /vizio/purchase-status
    method: GET
- name: purchase_validation
  endpoint:
    path: /vizio/purchase-validation
    method: POST
- name: notifications
  endpoint:
    path: /vizio/notifications/broadcasters/{publisherId}
    method: POST
- name: webhook_general_topics
  endpoint:
    method: POST
    data_selector: data
- name: webhook_subscription_topics
  endpoint:
    method: POST
    data_selector: data
- name: adyen_payment_details
  endpoint:
    path: /connectors/adyen/payment-details
    method: POST
- name: offers
  endpoint:
    path: /3.1/offers
    method: POST
- name: offers
  endpoint:
    path: /3.1/offers
    method: GET
- name: apply_coupon
  endpoint:
    path: /customers/{customerId}/subscriptions/{subscriptionId}
    method: PATCH
- name: register
  endpoint:
    path: /register
    method: POST
- name: login
  endpoint:
    path: /login
    method: POST
- name: refresh_token
  endpoint:
    path: /refresh-token
    method: POST
- name: revoke_refresh_tokens
  endpoint:
    path: /revoke-refresh-tokens
    method: DELETE
- name: reset_password
  endpoint:
    path: /reset-password
    method: PUT
- name: fetch_publisher_consents
  endpoint:
    path: /fetch-publisher-consents
    method: GET
- name: update_customers_consents
  endpoint:
    path: /update-customers-consents
    method: PUT
- name: fetch_customer_locales
  endpoint:
    path: /fetch-customer-locales
    method: GET
- name: update_password
  endpoint:
    path: /update-password
    method: PATCH
- name: fetch_capture_status
  endpoint:
    path: /fetch-capture-status
    method: GET
- name: update_capture_answers
  endpoint:
    path: /update-capture-answers
    method: PUT
- name: create_order
  endpoint:
    path: /create-order
    method: POST
- name: get_order
  endpoint:
    path: /get-order
    method: GET
- name: fetch_payment_method_ids
  endpoint:
    path: /fetch-payment-method-ids
    method: GET
- name: update_order
  endpoint:
    path: /update-order
    method: PATCH
- name: list_campaigns
  endpoint:
    path: /list-campaigns
    method: GET
- name: get_entitlements
  endpoint:
    path: /get-entitlements
    method: GET
- name: fetch_offers
  endpoint:
    path: /fetch-offers
    method: GET
- name: fetch_offer_details
  endpoint:
    path: /fetch-offer-details
    method: GET
- name: fetch_offer_details_for_specific_customer
  endpoint:
    path: /fetch-offer-details-for-specific-customer
    method: GET
- name: get_gift
  endpoint:
    path: /get-gift
    method: GET
- name: update_gift
  endpoint:
    path: /update-gift
    method: PATCH
- name: verify_gift
  endpoint:
    path: /verify-gift
    method: GET
- name: redeem_gift
  endpoint:
    path: /redeem-gift
    method: POST
- name: get_adyen_payment_methods
  endpoint:
    path: /get-adyen-payment-methods
    method: POST
- name: adyen_initial_payment
  endpoint:
    path: /adyen-initial-payment
    method: POST
- name: finalize_initial_payment
  endpoint:
    path: /finalize-initial-payment
    method: POST
- name: paypal_payment
  endpoint:
    path: /paypal-payment
    method: POST
- name: android_payment
  endpoint:
    path: /android-payment
    method: POST
- name: apple_payment
  endpoint:
    path: /apple-payment
    method: POST
- name: roku_payment
  endpoint:
    path: /roku-payment
    method: POST
- name: amazon_firetv_payment
  endpoint:
    path: /amazon-firetv-payment
    method: POST
- name: payment_without_payment_details
  endpoint:
    path: /payment-without-payment-details
    method: POST
- name: fetch_customers_data
  endpoint:
    path: /fetch-customers-data
    method: GET
- name: update_customers_data
  endpoint:
    path: /update-customers-data
    method: PATCH
- name: fetch_customers_subscriptions
  endpoint:
    path: /fetch-customers-subscriptions
    method: GET
- name: update_customers_subscription
  endpoint:
    path: /update-customers-subscription
    method: PATCH
- name: fetch_customers_payment_details
  endpoint:
    path: /fetch-customers-payment-details
    method: GET
- name: fetch_customers_consents
  endpoint:
    path: /fetch-customers-consents
    method: GET
- name: fetch_customers_transactions
  endpoint:
    path: /fetch-customers-transactions
    method: GET
- name: fetch_available_switches
  endpoint:
    path: /fetch-available-switches
    method: GET
- name: switch_subscription
  endpoint:
    path: /switch-subscription
    method: POST
- name: list_switches
  endpoint:
    path: /list-switches
    method: GET
- name: fetch_switch_details
  endpoint:
    path: /fetch-switch-details
    method: GET
- name: update_switch
  endpoint:
    path: /update-switch
    method: PATCH
- name: apply_coupon
  endpoint:
    path: /apply-coupon
    method: PATCH
- name: adyen_add_payment_details
  endpoint:
    path: /adyen-add-payment-details
    method: POST
- name: finalize_add_adyen_payment_details
  endpoint:
    path: /finalize-add-adyen-payment-details
    method: POST
- name: add_paypal_payment_details
  endpoint:
    path: /add-paypal-payment-details
    method: POST
- name: delete_payment_details
  endpoint:
    path: /delete-payment-details
    method: DELETE
- name: fetch_customers_offers
  endpoint:
    path: /fetch-customers-offers
    method: GET
- name: pause_subscription
  endpoint:
    path: /pause-subscription
    method: POST
- name: resume_subscription
  endpoint:
    path: /resume-subscription
    method: POST
- name: sso_login
  endpoint:
    path: /sso-login
    method: POST
- name: subscription_switches
  endpoint:
    path: /3.1/subscription_switches/{switchId}
    method: PATCH
- name: subscription_switches
  endpoint:
    path: /3.1/subscription_switches/switchId
    method: PATCH
- name: storekit2_purchases_transfers
  endpoint:
    path: /storekit2/purchases/transfers
    method: POST
- name: transfer_apple_sk2_purchase
  endpoint:
    path: /storekit2/purchases/transfers
    method: POST
- name: customer_account
  endpoint:
    path: /customer
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: capture_questions
  endpoint:
    method: GET
- name: capture_questions
  endpoint:
    path: /fetchcapturequestions
    method: GET
    data_selector: result
- name: braze
  endpoint:
    path: /docs/braze
- name: mailchimp
  endpoint:
    path: /docs/mailchimp
- name: zapier
  endpoint:
    path: /docs/zapier
- name: customer_subscriptions
  endpoint:
    method: GET
- name: customer_subscriptions
  endpoint:
    method: POST
    data_selector: result.items
    params:
      method: listCustomerSubscriptions
      jsonrpc: '2.0'
      id: 1
      params:
        publisherToken: '{{ dlt.secrets[''cleeng_publisher_token''] }}'
        customerEmail: '{{ customer_email }}'
        offset: '0'
        limit: '10'
- name: webhooks
  endpoint:
    method: POST
    params:
      filters:
      - name: paymentMethodId
        options:
          value: 320113641
- name: offers
  endpoint:
    path: /3.1/offers
    method: GET
    params:
      pageNumber: '1'
      pageLimit: '15'
      status: all
- name: offers
  endpoint:
    path: /3.1/offers
    method: GET
- name: subscription_switch_settings
  endpoint:
    path: /3.1/subscription_switch_settings/offerId
    method: GET
- name: subscription_switch_settings
  endpoint:
    path: /3.1/subscription_switch_settings/{offerId}
    method: GET
    data_selector: toOffers
- name: finalize_add_adyen_payment_details
  endpoint:
    path: /connectors/adyen/payment-details/finalize
    method: POST
    params:
      paymentMethodId: '{{ required_int32 }}'
      paymentData: '{{ optional_string }}'
- name: finalize_adyen_payment_details
  endpoint:
    path: /connectors/adyen/payment-details/finalize
    method: POST
- name: customer_email
  endpoint:
    path: /3.1/customers/{customerId}
    method: GET
- name: customer_email
  endpoint:
    method: GET
- name: purchase_synchronization
  endpoint:
    path: /storekit2/purchases/synchronizations/{synchronizationId}
    method: GET
- name: apple_sk2_purchase_synchronization_status
  endpoint:
    path: /storekit2/purchases/synchronizations/{synchronizationId}
    method: GET
- name: locale_data
  endpoint:
    path: /getLocaleDataFromIp
    method: POST
    params:
      ipAddress: required
- name: customer_subscriptions
  endpoint:
    path: /listCustomerSubscriptions
    method: GET
- name: customer_locales
  endpoint:
    path: /fetch-customer-locales
    method: GET
- name: offers
  endpoint:
    path: /fetch-offers
    method: GET
- name: entitlements
  endpoint:
    path: /get-entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /list-campaigns
    method: GET
- name: customers
  endpoint:
    path: /list-customers
    method: GET
- name: subscriptions
  endpoint:
    path: /list-subscriptions
    method: GET
- name: passes
  endpoint:
    path: /list-passes
    method: GET
- name: webhook_subscriptions
  endpoint:
    path: /3.1/webhook_subscriptions/{topic}
    method: PUT
- name: customer
  endpoint:
    path: /reference/update-customer
    method: PATCH
- name: paypal_payment_details
  endpoint:
    path: /connectors/paypal/v1/payment_details/tokens
    method: POST
- name: paypal_payment_details_tokens
  endpoint:
    path: /connectors/paypal/v1/payment_details/tokens
    method: POST
- name: offer
  endpoint:
    path: /3.1/offers/{offerId}
    method: GET
- name: offers
  endpoint:
    path: /3.1/offers/offerId
    method: GET
- name: vizio_purchase_validation
  endpoint:
    path: /vizio/purchase-validation
    method: POST
- name: vizio_purchase_validation
  endpoint:
    path: /vizio/purchase-validation
    method: POST
- name: transfer_subscription
  endpoint:
    path: /subscriptions/subscriptionId/transfer
    method: POST
- name: transfer_subscription
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}/transfer
    method: POST
    params:
      customerId: int32
- name: generate_my_account_url
  endpoint:
    path: /generateMyAccountUrl
    method: POST
    params:
      publisherToken: '{{ dlt.secrets[''cleeng_publisher_token''] }}'
      customerEmail: example@email.com
- name: locale_data_from_ip
  endpoint:
    path: /getLocaleDataFromIp
    method: POST
    params:
      ipAddress: required
- name: locale_data
  endpoint:
    method: GET
    data_selector: result
- name: identity_management
  endpoint:
    path: /identity-management-sso
- name: data
  endpoint:
    path: /data-ingestion-export
- name: payment
  endpoint:
    path: /payment
- name: multi_channel_billing
  endpoint:
    path: /multi-channel-billing
- name: marketing
  endpoint:
    path: /marketing-and-communications
- name: checkout
  endpoint:
    method: GET
- name: my_account
  endpoint:
    method: GET
- name: transactionCreated
  endpoint:
    method: POST
- name: customerRegistered
  endpoint:
    method: POST
- name: customerRequestedPasswordReset
  endpoint:
    method: POST
- name: customerConsentUpdated
  endpoint:
    method: POST
- name: customerPaymentDetailsUpdated
  endpoint:
    method: POST
- name: customerPaymentDetailsRemoved
  endpoint:
    method: POST
- name: customerAnonymized
  endpoint:
    method: POST
- name: capturePayment
  endpoint:
    method: POST
- name: refundPayment
  endpoint:
    method: POST
- name: paymentRefundAccepted
  endpoint:
    method: POST
- name: paymentRefunded
  endpoint:
    method: POST
- name: paymentDetailsDeactivated
  endpoint:
    method: POST
- name: paymentRejected
  endpoint:
    method: POST
- name: cardExpiresSoon
  endpoint:
    method: POST
- name: gift_ready_for_delivery
  endpoint:
    method: POST
    data_selector: data
- name: delete_payment_details
  endpoint:
    path: /payment_details/{paymentDetailsId}
    method: DELETE
- name: payment_details
  endpoint:
    path: /payment_details/{paymentDetailsId}
    method: DELETE
- name: offers
  endpoint:
    path: /3.1/offers/{offerId}
    method: PATCH
- name: offers
  endpoint:
    path: /3.1/offers/offerId
    method: PATCH
- name: subscriptions
  endpoint:
    path: /subscriptions/subscriptionId/revive
    method: POST
- name: revive_subscription
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}/revive
    method: POST
- name: vizio_purchase_status
  endpoint:
    path: /vizio/purchase-status
    method: GET
    params:
      correlationId: required
- name: vizio_purchase_status
  endpoint:
    path: /vizio/purchase-status
    method: GET
- name: single_offers
  endpoint:
    method: POST
    data_selector: result.items
    params:
      method: listSingleOffers
      jsonrpc: '2.0'
      id: 1
- name: customer_offers
  endpoint:
    path: /customers/{customerId}/offers
    method: GET
    data_selector: responseData.items
- name: offerCreated
  endpoint:
    method: POST
    data_selector: data
- name: offerUpdated
  endpoint:
    method: POST
    data_selector: data
- name: offerDeactivated
  endpoint:
    method: POST
    data_selector: data
- name: offerPriceChanged
  endpoint:
    method: POST
    data_selector: data
- name: payment_details
  endpoint:
    path: /reference/listpaymentdetails
    method: GET
    data_selector: result
- name: customers
  endpoint:
    path: /reference/list-customers
    method: GET
- name: subscriptions
  endpoint:
    path: /reference/list-subscriptions
    method: GET
- name: offers
  endpoint:
    path: /reference/list-offers
    method: GET
- name: orders
  endpoint:
    path: /reference/get-an-order
    method: GET
- name: payments
  endpoint:
    path: /reference/create-a-payment
    method: GET
- name: entitlements
  endpoint:
    path: /reference/list-entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /reference/list-campaigns
    method: GET
- name: passes
  endpoint:
    path: /reference/list-passes
    method: GET
- name: listPaymentDetails
  endpoint:
    method: POST
    params:
      publisherToken: '{{ dlt.secrets[''publisher_token''] }}'
      userEmail: string
- name: activate_offer
  endpoint:
    path: /offers/offerId/activate
    method: POST
- name: activate_offer
  endpoint:
    path: /3.1/offers/{offerId}/activate
    method: POST
- name: renew_subscription
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}/renew
    method: POST
- name: renew_subscription
  endpoint:
    path: /subscriptions/subscriptionId/renew
    method: POST
- name: hi5_chatbot_token
  endpoint:
    path: /hi5-chatbot-token
    method: GET
- name: generate_code
  endpoint:
    path: /generate-code
    method: POST
- name: authorize_code
  endpoint:
    path: /authorize-code
    method: POST
- name: check_code
  endpoint:
    path: /check-code
    method: GET
- name: rental_offers
  endpoint:
    method: GET
- name: rental_offers
  endpoint:
    path: listRentalOffers
    method: POST
    data_selector: result.items
    params:
      criteria:
        active: '1'
      offset: '0'
      limit: '2'
- name: delete_payment_details
  endpoint:
    method: POST
    params:
      publisherToken: '{{ dlt.secrets[''cleeng_publisher_token''] }}'
      paymentDetailsId: int
- name: payment_details
  endpoint:
    path: /listPaymentDetails
    method: POST
- name: customer_token
  endpoint:
    path: /generateCustomerTokenFromTransactionId
    method: POST
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: generate_code
  endpoint:
    path: /v1/codes/generate
    method: POST
    params:
      deviceId: required
      deviceName: required
      broadcasterId: required
- name: authorize_code
  endpoint:
    path: /v1/codes/authorize
    method: POST
- name: check_code
  endpoint:
    path: /v1/codes/check
    method: GET
    params:
      code: required
      deviceId: required
      broadcasterId: required
- name: register
  endpoint:
    path: /register
    method: POST
- name: login
  endpoint:
    path: /login
    method: POST
- name: pause_subscription
  endpoint:
    path: /subscriptions/subscriptionId/pause
    method: POST
- name: pause_subscription
  endpoint:
    path: /subscriptions/{subscriptionId}/pause
    method: POST
- name: subscriptionSwitched
  endpoint:
    data_selector: data
- name: subscriptionSwitchRequested
  endpoint:
    data_selector: data
- name: subscriptionSwitchFailed
  endpoint:
    data_selector: data
- name: subscriptionSwitchCancelled
  endpoint:
    data_selector: data
- name: subscriptionExtended
  endpoint:
    data_selector: data
- name: subscriptionPauseScheduled
  endpoint:
    data_selector: data
- name: subscriptionPaused
  endpoint:
    data_selector: data
- name: subcriptionResumed
  endpoint:
    data_selector: data
- name: subscriptionResumeFailed
  endpoint:
    data_selector: data
- name: subscriptionScheduledResumeReminder
  endpoint:
    data_selector: data
- name: subscription_ready_for_payment_authorisation
  endpoint:
    method: POST
- name: subscription_ready_for_payment_capture
  endpoint:
    method: POST
- name: subscription_stopped
  endpoint:
    method: POST
- name: subscription_renewal_prenotification
  endpoint:
    method: POST
- name: subscription_renewed
  endpoint:
    method: POST
- name: subscription_reactivated
  endpoint:
    method: POST
- name: subscription_ready_for_termination
  endpoint:
    method: POST
- name: subscription_created
  endpoint:
    method: POST
- name: subscription_terminated
  endpoint:
    method: POST
- name: subscription_trial_converted
  endpoint:
    method: POST
- name: deactivate_offer
  endpoint:
    path: /3.1/offers/offerId/deactivate
    method: POST
- name: deactivate_offer
  endpoint:
    path: /3.1/offers/{offerId}/deactivate
    method: POST
- name: hi5_chatbot_token
  endpoint:
    path: /v1/hi5-chatbot/token
    method: GET
- name: hi5_chatbot_token
  endpoint:
    path: /v1/hi5-chatbot/token
    method: GET
    data_selector: token
- name: pause_subscription
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}/pause
    method: POST
- name: pause_subscription
  endpoint:
    path: /3.1/subscriptions/subscriptionId/pause
    method: POST
- name: subscription_offer
  endpoint:
    path: /3.1/offers/{offerId}
    method: GET
- name: subscription_offer
  endpoint:
    path: /getSubscriptionOffer
    method: GET
- name: rental_offers
  endpoint:
    path: /listRentalOffers
    method: GET
- name: subscription_offers
  endpoint:
    path: /listSubscriptionOffers
    method: GET
- name: mediastore_api
  endpoint:
    method: POST
- name: payment_methods
  endpoint:
    method: GET
- name: passCreated
  endpoint:
    method: POST
- name: passExpirationChanged
  endpoint:
    method: POST
- name: passTerminated
  endpoint:
    method: POST
- name: generateCustomerTokenFromTransactionId
  endpoint:
    path: /generateCustomerTokenFromTransactionId
    method: POST
    params:
      transactionId: string
- name: payment_details
  endpoint:
    path: /reference/deletepaymentdetails
    method: DELETE
- name: capture_answers
  endpoint:
    path: /reference/update-capture-answers
    method: PUT
- name: capture_status
  endpoint:
    path: /reference/fetch-capture-status
    method: GET
- name: customer_locales
  endpoint:
    path: /reference/fetch-customer-locales
    method: GET
- name: customer_consents
  endpoint:
    path: /reference/update-customers-consents
    method: PUT
- name: publisher_consents
  endpoint:
    path: /reference/fetch-publisher-consents
    method: GET
- name: refresh_token
  endpoint:
    path: /reference/refresh-token
    method: POST
- name: login
  endpoint:
    path: /reference/login
    method: POST
- name: register
  endpoint:
    path: /reference/register
    method: POST
- name: offers
  endpoint:
    path: /reference/fetch-offers
    method: GET
- name: entitlements
  endpoint:
    path: /reference/get-entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /reference/msd-list-campaigns
    method: GET
- name: orders
  endpoint:
    path: /reference/create-order
    method: POST
- name: subscriptions
  endpoint:
    path: /reference/fetch-customers-subscriptions
    method: GET
- name: transactions
  endpoint:
    path: /reference/fetch-customers-transactions
    method: GET
- name: customer_data
  endpoint:
    path: /reference/fetch-customers-data
    method: GET
- name: resume_subscription
  endpoint:
    path: /subscriptions/subscriptionId/resume
    method: POST
- name: resume_subscription
  endpoint:
    path: /subscriptions/{subscriptionId}/resume
    method: POST
- name: offers
  endpoint:
    path: /3.1/offers
    method: GET
- name: offer_localizations
  endpoint:
    path: /3.1/offers/offerId/localizations
    method: POST
- name: customers
  endpoint:
    path: /3.1/customers
    method: GET
- name: subscriptions
  endpoint:
    path: /3.1/subscriptions
    method: GET
- name: payments
  endpoint:
    path: /3.1/payments
    method: POST
- name: orders
  endpoint:
    path: /3.1/orders
    method: POST
- name: entitlements
  endpoint:
    path: /3.1/entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /3.1/campaigns
    method: GET
- name: passes
  endpoint:
    path: /3.1/passes
    method: GET
- name: offer_localization
  endpoint:
    path: /3.1/offers/{offerId}/localizations
    method: POST
- name: resume_subscription
  endpoint:
    path: /3.1/subscriptions/subscriptionId/resume
    method: POST
- name: resume_subscription
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}/resume
    method: POST
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: subscription_offers
  endpoint:
    method: POST
    data_selector: result
- name: single_offers
  endpoint:
    method: POST
    data_selector: result
- name: pass_offers
  endpoint:
    method: POST
    data_selector: result
- name: pass_offers
  endpoint:
    path: /listPassOffers
    method: GET
- name: pass_offers
  endpoint:
    path: /3.1/offers
    method: GET
- name: generate_code
  endpoint:
    path: /generate-code
    method: POST
- name: authorize_code
  endpoint:
    path: /authorize-code
    method: POST
- name: check_code
  endpoint:
    path: /check-code
    method: GET
- name: generate_code
  endpoint:
    path: /generate-code
    method: POST
- name: authorize_code
  endpoint:
    path: /authorize-code
    method: POST
- name: check_code
  endpoint:
    path: /check-code
    method: GET
- name: hi5_chatbot_token
  endpoint:
    path: /hi5-chatbot-token
    method: GET
- name: register
  endpoint:
    path: /register
    method: POST
    params:
      captchaValue: string
- name: adyen_initial_payment
  endpoint:
    path: /adyen-initial-payment
    method: POST
    params:
      captchaValue: string
- name: payment_with_paypal_connector
  endpoint:
    path: /payment-with-paypal-connector-v1
    method: POST
    params:
      captchaValue: string
- name: payment_without_payment_details
  endpoint:
    path: /payment-without-payment-details
    method: POST
    params:
      captchaValue: string
- name: webhook_subscriptions
  endpoint:
    path: /3.1/webhook_subscriptions/{topic}
    method: PUT
- name: webhook_subscriptions_list
  endpoint:
    path: /3.1/webhook_subscriptions
    method: GET
- name: plan_details
  endpoint:
    path: PlanDetails
- name: subscriptions
  endpoint:
    path: Subscriptions
- name: subscription_switches
  endpoint:
    path: SubscriptionSwitches
- name: payment_info
  endpoint:
    path: PaymentInfo
- name: transaction_list
  endpoint:
    path: TransactionList
- name: update_profile
  endpoint:
    path: UpdateProfile
- name: checkout
  endpoint:
    method: GET
- name: myaccount
  endpoint:
    method: GET
- name: register
  endpoint:
    method: GET
- name: login
  endpoint:
    method: GET
- name: capture
  endpoint:
    method: GET
- name: checkoutconsents
  endpoint:
    method: GET
- name: purchase
  endpoint:
    method: GET
- name: redeemgift
  endpoint:
    method: GET
- name: passwordreset
  endpoint:
    method: GET
- name: plandetails
  endpoint:
    method: GET
- name: paymentinfo
  endpoint:
    method: GET
- name: updateprofile
  endpoint:
    method: GET
- name: identity_management
  endpoint:
    path: /registration
    method: GET
- name: checkout
  endpoint:
    path: /payments-overview
    method: GET
- name: orders
  endpoint:
    path: /3.1/orders
    method: POST
- name: payments
  endpoint:
    path: /3.1/payments
    method: POST
- name: order
  endpoint:
    path: /3.1/orders/orderId
    method: GET
- name: order
  endpoint:
    path: /3.1/orders/{orderId}
    method: GET
- name: season_group
  endpoint:
    path: /3.1/offers/season-groups/id
    method: GET
- name: season_group
  endpoint:
    path: /3.1/offers/season-groups/{id}
    method: GET
- name: viewer_consents
  endpoint:
    method: POST
    data_selector: result
- name: passes
  endpoint:
    path: /3.1/passes
    method: POST
- name: passes
  endpoint:
    path: /3.1/passes
    method: POST
- name: access_status
  endpoint:
    method: POST
    data_selector: result
- name: subscriptions
  endpoint:
    method: GET
- name: checkout
  endpoint:
    path: /checkout-hosted-widget
    method: GET
- name: auth
  endpoint:
    path: /auth-hosted-widget
    method: GET
- name: account
  endpoint:
    path: /account-hosted-widget
    method: GET
- name: orders
  endpoint:
    path: /3.1/orders/{orderId}
    method: PATCH
- name: order
  endpoint:
    path: /orders/orderId
    method: PATCH
- name: android_payment
  endpoint:
    path: /android/payment
    method: POST
- name: android_payment
  endpoint:
    path: /android/payment
    method: POST
- name: season_groups
  endpoint:
    path: /offers/season-groups/id
    method: DELETE
- name: season_groups
  endpoint:
    path: /3.1/offers/season-groups/{id}
    method: DELETE
- name: locales
  endpoint:
    path: /locales
    method: GET
- name: publisher_consents
  endpoint:
    path: /publishers/:publisherId/consents
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: POST
- name: customer_consents
  endpoint:
    path: /customers/:customerId/consents
    method: PUT
- name: auth
  endpoint:
    path: /auths
    method: POST
- name: customer_consents_fetch
  endpoint:
    path: /customers/:customerId/consents
    method: GET
- name: password_reset
  endpoint:
    path: /customers/passwords
    method: POST
- name: password_update
  endpoint:
    path: /customers/passwords
    method: PUT
- name: capture_status
  endpoint:
    path: /capture/status
    method: GET
- name: capture_answers
  endpoint:
    path: /capture/answers
    method: PUT
- name: passes
  endpoint:
    path: /passes/passId
    method: GET
- name: pass
  endpoint:
    path: /3.1/passes/{passId}
    method: GET
- name: submitConsent
  endpoint:
    path: /submitConsent
    method: POST
    params:
      publisherToken: '{{ dlt.secrets[''cleeng_publisher_token''] }}'
      customerEmail: ''
      name: ''
      state: ''
      version: ''
- name: access_status_for_device
  endpoint:
    method: POST
- name: access_status_for_device
  endpoint:
    method: POST
    params:
      method: getAccessStatusForDevice
      customerToken: '{{ dlt.secrets[''customer_token''] }}'
      offerId: '{{ dlt.secrets[''offer_id''] }}'
      deviceId: '{{ dlt.secrets[''device_id''] }}'
      deviceType: '{{ dlt.secrets[''device_type''] }}'
- name: checkout_widget
  endpoint:
    path: /cleeng.js
    method: GET
- name: offer_details
  endpoint:
    path: /offers/:offerId
    method: GET
- name: offer_details_for_customer
  endpoint:
    path: /offers/:offerId/customers/:customerEmail
    method: GET
- name: seasonal_subscription_offer_details
  endpoint:
    path: /v2/offers/:offerId
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: POST
- name: orders
  endpoint:
    path: /3.1/orders
    method: POST
- name: payments
  endpoint:
    path: /3.1/payments
    method: POST
- name: payments_update
  endpoint:
    path: /3.1/payments/{payment_id}
    method: PATCH
- name: orders
  endpoint:
    path: /3.1/orders
    method: POST
- name: payments
  endpoint:
    path: /3.1/payments
    method: POST
- name: apple_payment
  endpoint:
    path: /apple/payment
    method: POST
- name: apple_payment
  endpoint:
    path: /apple/payment
    method: POST
- name: payments
  endpoint:
    path: /3.1/payments
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: passes
  endpoint:
    path: /3.1/passes
    method: GET
    params: {}
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: season_groups
  endpoint:
    path: /offers/season-groups
    method: GET
- name: seasons
  endpoint:
    path: /offers/season-groups/id/seasons
    method: POST
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: season
  endpoint:
    path: /3.1/offers/season-groups/{id}/seasons
    method: POST
- name: generateCustomerToken
  endpoint:
    method: POST
- name: accessible_tags
  endpoint:
    path: /getAccessibleTags
    method: POST
    data_selector: result.tags
    params:
      publisherToken: '{{ dlt.secrets[''cleeng_publisher_token''] }}'
      customerToken: '{{ dlt.secrets[''cleeng_customer_token''] }}'
- name: auth_widget
  endpoint:
    path: /cleeng.js
    method: GET
- name: payments
  endpoint:
    path: /3.1/payments
    method: POST
- name: payments
  endpoint:
    path: /3.1/payments
    method: PATCH
- name: subscriptions
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}
    method: PATCH
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
- name: payment
  endpoint:
    path: /orders/orderId/payment
    method: GET
- name: payment
  endpoint:
    path: /3.1/orders/{orderId}/payment
    method: GET
- name: season_groups
  endpoint:
    path: /3.1/offers/season-groups
    method: GET
- name: seasons
  endpoint:
    path: /3.1/offers/season-groups/id/seasons/seasonId
    method: PATCH
- name: season_group_seasons
  endpoint:
    path: /3.1/offers/season-groups/{id}/seasons/{seasonId}
    method: PATCH
- name: pass
  endpoint:
    path: /3.1/passes/{passId}
    method: PATCH
- name: passes
  endpoint:
    path: /3.1/passes
    method: GET
- name: pass
  endpoint:
    path: /3.1/passes/passId
    method: PATCH
- name: registerSubscription
  endpoint:
    method: POST
- name: extend_token_expiration
  endpoint:
    path: /extendTokenExpiration
    method: POST
    params:
      publisherToken: '{{ dlt.secrets[''cleeng_publisher_token''] }}'
      customerToken: '{{ dlt.secrets[''cleeng_customer_token''] }}'
      extensionTime: 1234
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: passes
  endpoint:
    path: /passes
    method: GET
- name: account
  endpoint:
    path: /cleeng.js
    method: GET
- name: amazon_firetv_payment
  endpoint:
    path: /amazon/payment
    method: POST
- name: amazon_payment
  endpoint:
    path: /amazon/payment
    method: POST
- name: payment_details
  endpoint:
    path: /3.1/payment_details
    method: POST
- name: authorised_payments
  endpoint:
    path: /3.1/payment_details/{paymentDetailsId}/authorised_payments
    method: POST
- name: cancel_payment
  endpoint:
    path: /3.1/payments/{paymentId}/cancel
    method: PATCH
- name: delete_payment_details
  endpoint:
    path: /3.1/payment_details/{paymentDetailsId}
    method: DELETE
- name: payments
  endpoint:
    path: /payments/paymentId
    method: PATCH
- name: payment
  endpoint:
    path: /3.1/payments/{paymentId}
    method: PATCH
- name: season_groups
  endpoint:
    path: /offers/season-groups/id/seasons/seasonId
    method: DELETE
- name: delete_season_from_season_group
  endpoint:
    path: /3.1/offers/season-groups/{id}/seasons/{seasonId}
    method: DELETE
- name: terminate_pass
  endpoint:
    path: /3.1/passes/{passId}/terminate
    method: POST
- name: passes
  endpoint:
    path: /passes/passId/terminate
    method: POST
- name: generateCustomerTokenFromPassword
  endpoint:
    method: POST
    params:
      publisherToken: '{{ dlt.secrets[''cleeng_publisher_token''] }}'
      customerEmail: '{{ customer_email }}'
      password: '{{ password }}'
- name: generate_customer_token
  endpoint:
    method: POST
    data_selector: result
- name: help_center
  endpoint:
    method: GET
- name: is_trial_allowed
  endpoint:
    path: /isTrialAllowed
    method: POST
    params:
      publisherToken: '{{ dlt.secrets[''cleeng_publisher_token''] }}'
      customerEmail: string
      offerId: string
- name: subscriptions_terminate
  endpoint:
    path: /3.1/subscriptions/{subscriptionId}/terminate
    method: POST
- name: customer
  endpoint:
    path: /customers/{customerId}
    method: GET
- name: merchant_payment_methods
  endpoint:
    path: /merchant/payment-methods
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: create_order
  endpoint:
    path: /orders
    method: POST
    params:
      couponCode: string
- name: update_order
  endpoint:
    path: /orders
    method: PUT
notes:
- Set up a default timeout of 8 seconds
- Only retry failed API calls once, to avoid an uncontrolled cascade of requests
- Use caching where possible, based on your use case
- API throttling is implemented in sandbox and production environments
- Usual latency is below 50 ms for API 3.1
- Infrastructure autoscales according to demand
- Caching is recommended for API responses including entitlements, customer data,
  and offers
- Frequently requested data that does not change often should be cached
- JWT is valid for 15 minutes
- JWT contains customerId, publisherId, and expiration date
- JWT is returned after successful registration and login
- JWT is valid for 15 minutes and a refresh token is valid for 100 days
- Refresh token passed in request body will be invalidated when used
- MediaStore API is the latest Cleeng API organized around REST and uses JWT as an
  authorization token
- API 3.1 is authorized by 'publisherToken' in the header
- JSON RPC API is deprecated
- Orders expire after 24 hours unless payment is captured
- Customer country and currency or customerIP are required for correct price calculation
- When using Cleeng Merchant, customerIP should be available for proper tax calculation
  in US and Canada
- Free trial periods or 100% coupon prices are not taxable and displayed excluding
  tax
- Granting entitlements is based on the accessGranted value, not the expiresAt date
- Even if the expiresAt date is in the past, accessGranted may be true during Grace
  period
- If there are two or more subscriptions/passes for the same offerId for the same
  customer, it will return one object with the latest expiresAt date
- This endpoint will not return taxes for the USA and Canada. Taxes will only be shown
  during the checkout process
- This API endpoint is not guaranteed to provide real-time results. Updating transaction
  status may be delayed
- This API should not be used for validating entitlements
- This endpoint requires publisherToken for authorization, unlike other MediaStore
  SDK endpoints
- JWT is valid for 15 minutes and includes customerId, publisherId, and expiration
  date
- If IP address is not provided as parameter, Cleeng will capture IP address from
  request origin as lastUserIP
- IP address should be provided at all times due to implications on purchases and
  subscription switches
- Beta phase feature - subject to changes
- URL for requests expires after 30 days
- JSON-RPC method is deprecated
- Returns offer details and price based on customer location
- Supports optional IP address and coupon code parameters
- JSON-RPC API is deprecated
- Entitlement checks are used as a base for reporting
- IP address limit of 4 per user with 3 hour expiration
- Offer ID can be used with or without country suffix for different validation scope
- Requires mediastore-sdk package version 5.7.0 or higher
- Configuration in dashboard must be consistent with client side configuration
- Default Google reCAPTCHA account is managed by Cleeng
- Default threshold for score-based reCAPTCHA is 0.5
- Purchase validation in app stores is asynchronous because Cleeng needs to verify
  purchase receipt with external app store
- Unable to return outcome synchronously in API request response, webhooks are used
  to inform publishers about validation results
- inappPurchaseValidationSucceeded and inappPurchaseValidationFailed webhooks are
  deprecated for Apple StoreKit 2 integrations
- inappPurchaseSyncResult webhook currently available only for purchases made via
  Apple StoreKit 2 integrations
- Core API (API 3.1) is designed for Server-to-Server integrations
- Uses a publisher token for authentication
- Provides additional functionality such as subscribing to webhook topics, dunning
  action settings, listing subscriptions and users, externally-managed subscriptions
  synchronization
- JSON-RPC listSingleOffers method is deprecated - use GET /3.1/offers instead
- Offers are presented in descending order based on creation date
- Supports hosted customer flows for low-code integration
- MediaStore Components available for React.js implementations
- Multi-channel billing supported across mobile apps and TV platforms
- Webhook verification available for secure integrations
- MediaStore API uses JWT token for authentication in end user context
- Core API uses publisher token authentication in publisher context
- Transactions are created automatically and there is no API to modify them
- MediaStore Components will continue to be supported but no new features will be
  added
- Data can be exported from Cleeng ChurnIQ to third-party tools through the Data Export
  feature
- Supports data ingestion via Data Storage - clients can upload data directly into
  AWS S3 bucket
- Data ingestion occurs primarily through integrations with platforms like Apple and
  Android
- JWT is valid for 15 minutes - the customer should be logged out after 15 minutes
- JWT payload contains customerId, publisherId, expiration date
- Refresh token expiration time is 100 days
- Refresh token can be used only once and expires after that
- A customer can have multiple refresh tokens for multiple devices
- MediaStore APIs are executed on behalf of the customer and have limited features
  compared to Core Platform APIs
- JSON-RPC listRentalOffers method is deprecated. Use GET /3.1/offers instead.
- Offers are presented in descending order based on the creation date.
- JWT tokens are valid for 15 minutes and include customerId, broadcasterId, and expiration
  date
- Device Flow Login (PIN Pair) functionality available for checking authorization
  status
- Cleeng comes with out-of-the-box payment integrations with Adyen and PayPal available
  to clients using Cleeng's Merchant solution
- Payment API has been built to integrate with all kinds of payment gateways using
  designated connectors
- Other payment providers can be used and you can integrate your own payment processing
  method
- MediaStore SDK Components are available by default in English
- Translations have undergone major changes in version 5.0.0 of MediaStore SDK Components
- Use version 5.0.0 or higher to fully benefit from translation features
- Translation folder names should be single words without spaces, dashes, etc.
- Some translations contain variables that cannot be removed or changed
- Adyen Drop-in translations are handled separately from MediaStore SDK translations
- Publisher tokens are 48-character keys used to identify the merchant
- Never expose Publisher Token to the public as it allows price updates and sensitive
  data access
- Publisher Token can be obtained from API Keys Page in Cleeng admin
- JSON-RPC getSubscriptionOffer method is deprecated. Use GET /3.1/offers/{offerId}
  instead.
- Cleeng comes with out-of-the-box payment integrations
- Payment API supports integration of custom payment processing methods
- Built to integrate with all kinds of payment gateways using designated connectors
- Requires building a separate server-side application (connector) as a proxy
- All payment gateway events should be registered at Cleeng through Cleeng Payment
  API
- One-click coupons feature available with minimum version 5.1.0 of MediaStore SDK
  Components
- When a coupon is automatically applied the free trial is ignored
- 100% coupons are not available for seasonal subscriptions
- JSON-RPC registerCustomer method is deprecated. Use POST /3.1/customers instead
- customerToken expires after 60 days. Expiration time can be extended using extendTokenExpiration
  method
- Enterprise account required. Contact us if you're interested about opening Enterprise
  account
- JSON-RPC listSubscriptionOffers method is deprecated. Use GET /3.1/offers instead.
- Orders expire after 24 hours unless the payment is captured
- Payment method is required in order entity for payment but can be added in update
  order
- Providing both totalPrice and methodFee causes price calculation be based on those
  2 parameters and ignore the offer price
- Beta phase - features and functionality may change
- Season groups are called seasonal schedules in the Cleeng dashboard setup
- JSON-RPC listPassOffers method is deprecated. Use GET /3.1/offers instead
- Offers are presented in descending order based on the creation date
- Maximum limit is 200 results per request
- This JSON-RPC method is deprecated
- Returns broadcaster's consents with URL and current version number
- By default returns terms and privacy consents
- You can use this endpoint to cancel a payment that has been authorized but not captured
  yet
- Cancelling a payment means that the payment is not processed any further
- Use for purchases with 100% coupon code where publisher doesn't expect payment details
- Use for free offers where publisher wants to give access
- Requires appropriate payment method during order creation - 'Manual' with 'Coupon'
  or 'Free-offer' as payment gateway
- While any payment gateway can be used, 'Manual' with 'Coupon' or 'Free-offer' is
  recommended for reporting clarity
- Subscription upgrade and downgrade feature requires compatibility of the payment
  connector and payment gateway
- Feature is fully supported for Adyen and PayPal payment connectors
- External app stores like Apple and Google Play support subscription upgrades and
  downgrades if they support them natively
- Pause and resume subscription features require enabling the feature in the Cleeng
  dashboard
- Customer token authentication is deprecated. JWT with MediaStore SDK API is recommended
  instead for endpoints related to customers.
- Enterprise account required. Contact us if you're interested about opening Enterprise
  account.
- Customer has to be created prior by registerCustomer method.
- Each payment in Cleeng should have externalPaymentId (the same as the payment identifier
  from an external payment gateway system)
- PaymentId identifies transactions in a payment gateway and Cleeng. If a different
  payment Id is used for authorization and a different one for capture in a payment
  gateway, it must be updated in Cleeng
- Cleeng script exposes a global window.cleeng object for communication
- Methods should be called only once in the entire application
- Always verify event.origin for security when listening for messages
- Both tokens will have their value set to null when the end user has been logged
  out
- setAuthTokens method returns a Promise object and should be awaited
- API includes rate limiting with headers X-RateLimit-Limit, X-RateLimit-Remaining,
  and X-RateLimit-Reset
- Supports both REST API and JSON-RPC protocols
- Implements exponential backoff for retry logic
- Provides Retry-After header in 429 responses
- Only supports payments where Cleeng is the merchant of record
- Requires correct paymentMethodId to avoid problems with recurring payments
- Payment processing occurs on PayPal's side with customer redirection
- Requires webhooks and dunning action settings configuration for recurring payments
- fetchCaptureQuestions JSON-RPC method is deprecated
- Granting entitlements is based on subscription status, not its expiration date
- Even if the expiresAt date is in the past, a subscription status can still be active
  during Grace period
- You can fetch entitlements for subscriptions and passes only
- If there are multiple subscriptions or passes for the same offer and customer, there
  will be as many entitlements returned
- Requests made by connector should be idempotent to avoid sending multiple requests
  and overcharging a user
- Webhook responses need to return '200' response code, or they will be resent
- Some payment gateways do not support 'zero' payments - handling of such scenarios
  (e.g. free trial) requires additional attention
- Cleeng is PCI-compliant through Adyen and PayPal for all Cleeng Merchant clients
- Customer country and currency or customerIP are required for correct price calculation
  because tax rate depends on the country
- When using Cleeng Merchant, customerIP should be available for the purpose of proper
  tax calculation in the US and Canada
- Free trial period or 100% coupon prices are not taxable and displayed excluding
  tax
- This API endpoint is not guaranteed to provide real-time results
- Updating transaction status may be delayed due to required communication with a
  payment provider
- Lists all active and stopped subscriptions, but doesn't return expired ones
- nextPaymentPrice includes applied coupons
- Removing payment details that are attached to subscriptions will prevent those subscriptions
  from being renewed
- Deletion is an irreversible process
- Purchased gifts can be updated but not later than on the last day before the day
  of delivery
- If a recipient has a payment method added to their account, they will be charged
  on a recurring basis after the gift expires
- Gift codes are delivered via email on the specified delivery date with checkout
  URL parameter ?giftCode=XXXX-XXXX
- Only monthly, 3-month, 6-month, or annual subscriptions can be gifted (excluding
  weekly and seasonal subscriptions)
- 'Default page limit: 20 results per request are returned'
- Header X-Total-Count will show the total number of results for the provided query
  parameters
- 'The following subscription resource properties are deprecated: id, userId and paymentGateway'
- If transactionId parameter is provided, search by paymentMethodId, externalId, customerId
  or offerId and customerId together is ignored because transactionId always takes
  precedence
- Filtering by customerId and offerId might return multiple active subscriptions instead
  of one if multiple subscriptions have been created for the same offer
- If you don't provide any parameters, an empty list will be returned
- Part of MediaStore SDK features for subscriber management
- Allows customers to manage subscriptions, payment methods, and profile details
- Requires Identity Management setup before implementation
- Cleeng acts as an observer and tracks in-app purchase lifecycle events to gather
  data for analysis
- Cleeng does not handle payment for in-app purchases
- ChurnIQ Dashboard relies on in-apps receipts for reporting
- Core API authorized with publisherToken used for backend integrations
- MediaStore API authorized with JWT used for direct integrations
- Only offers available for purchase in appstore with respective store productId configured
  should be displayed
- Temporary entitlement can be granted until sync process is finished
- 'You can only use one parameter: expiresAt, couponCode, paymentDetailsId, status
  (deprecated), inTrial or externalProperties'
- Status parameter is deprecated - use specific endpoints for status changes
- For Cleeng-managed subscriptions expiresAt value can't be in the past and can't
  be earlier than originally set value
- For externally-managed subscriptions, expiration date restrictions do not apply
- You can update only fields which are switched on in Dashboard
- Response code 200 does NOT refer to the receipt validation result, it only confirms
  that the request structure and content is correct
- For integrations utilizing JWT authorization please use the MediaStore SDK API Android
  Payment endpoint
- 'Production URL: https://api.cleeng.com/android/payment'
- 'Sandbox URL: https://api.sandbox.cleeng.com/android/payment'
- This is an exception because, unlike other MediaStore SDK endpoints, this one requires
  publisherToken for authorization
- If the IP address is not provided as a parameter, Cleeng will capture the IP address
  from which the request was submitted as a lastUserIP
- This is legacy Apple in-app purchase integration utilizing Apple's StoreKit 1
- Middleware is required in integrations utilizing a publisher token
- Receipt processing is asynchronous and can take up to 60 seconds
- Application should poll the Cleeng API every five seconds until validation is completed
- Subscription transfer feature is not enabled by default but can be activated on
  request
- Use non-renewing-subscription products for subscriptions set for a specific period
  of time
- Use non-consumable products for subscriptions that are forever
- Multi-channel billing feature is in Beta phase
- External sources will be visible as separate payment methods in the Cleeng platform
- Payment creation does not involve payment processing in Cleeng - it is done to capture
  payments in reports
- Zero-value payments are allowed
- Only captured payments can be refunded
- When payment is updated due to refund, subscription will not be terminated automatically
- Subscription purchased via In-Apps cannot be managed in MyAccount
- Seasonal subscriptions may return 2145913200 as expiresAt when next season start
  date is not set
- Subscription switch requires compatible payment connector - fully supported for
  Adyen and PayPal
- Switch algorithms may require capturePayment and refundPayment webhook subscriptions
- Switches can be unavailable temporarily or permanently based on various conditions
- Pending switches can be cancelled only while status is pending
- 'Production endpoint: https://api.cleeng.com/apple/payment'
- 'Sandbox endpoint: https://api.sandbox.cleeng.com/apple/payment'
- Response code 200 does NOT refer to receipt validation result, only confirms request
  structure is correct
- Endpoint allows creating subscription through Apple sandbox receipt in production
  environment
- This documentation is for legacy Apple in-app purchase integration utilizing Apple's
  StoreKit 1
- JSON-RPC getCustomerEmail method is deprecated. Use GET /3.1/customers/{customerId}
  instead
- Customer must have purchased at least one of your offers
- Publisher token used for integrations through middleware, while JWT for direct integrations
- StoreKit 2 framework uses Transaction ID for purchase validation instead of encrypted
  receipts
- Cleeng acts as observer and tracks in-app purchase lifecycle events for auto-renewable
  subscriptions
- For passes (non-renewing subscription products), Cleeng controls entitlements duration
- StoreKit 2 Sandbox Fallback feature allows testing before app publishing by directing
  requests to Apple's sandbox environment when no production data is available
- Unidentified Users are temporary placeholder accounts created when Apple S2S notifications
  are received but matching /purchases API calls are not made
- Grace Period feature reduces involuntary subscriber churn by preventing unintentional
  loss of subscribers due to billing issues
- Seamless integration allows migration from StoreKit 1 to StoreKit 2 using transformation
  layer that translates SK1 API calls to SK2
- During migration, notification processing is temporarily put on hold to prevent
  SK1/SK2 conflicts
- Uses JWT authorization for API requests
- Purchase registration is asynchronous and returns 202 Accepted with synchronizationId
- Supports both sandbox and production environments
- Server-to-Server notifications require URL configuration in App Store Connect
- Apple does not control entitlements for passes (non-renewing subscriptions)
- Client app should prevent multiple purchases of same pass offer
- Suggested polling frequency is every 3 seconds for up to 60 seconds
- 'Payment details have bound and active properties - bound: true means payment details
  cannot be changed'
- 'active: true means Cleeng triggers recurring payments for this payment method'
- Update payment details involves adding new payment details and deleting old ones
- 'In-App payment methods (Apple, Android, Amazon, Roku) have bound: true property
  and cannot be edited'
- Zero-amount authentication transactions needed for online bank payment methods like
  iDEAL to be visible in MyAccount
- External ID is required for externally-managed subscriptions
- Payment method must be configured for externally-managed subscriptions (EMS)
- Multiple active subscriptions per offer per customer are allowed for externally-managed
  subscriptions from different sources
- Externally-managed subscriptions cannot trigger subscriptionReadyFor* webhooks
- Dunning Actions Settings cannot be created for externally-managed subscriptions
- Subscription switches are limited to IMMEDIATE_WITHOUT_PRORATION and DEFERRED algorithms
- JSON-RPC getCustomer method is deprecated. Use GET /3.1/customers/{customerId} instead
- The lifecycle of externally-managed passes is outside of Cleeng's control
- A customer can have multiple active passes for the same offer if these passes come
  from different sources
- Duplicate passes are blocked when an external app attempts to create another pass
  with the same external ID
- Auto-termination can be enabled during configuration of a payment method
- Evergreen passes can be created by setting expiry date to null
- Receipt validation is asynchronous and can take up to 60 seconds
- Application should poll Cleeng API every five seconds until validation is completed
- Purchase acknowledgement must be done within three days to avoid refunds
- Requires Google Play Billing Library integration
- Service account key in JSON format required for subscriber synchronization
- Requires Google Play Store pub/sub configuration for real-time notifications
- Uses service account key authentication with Google
- Supports introductory offers through coupon campaigns
- 'Production URL: https://notification.cleeng.com/2.0/in_app/subscriptions/android/status_update_notification/{publisherId}'
- 'Sandbox URL: https://notification.sandbox.cleeng.com/2.0/in_app/subscriptions/android/status_update_notification/{publisherId}'
- Subscription upgrades use IMMEDIATE_AND_CHARGE_FULL_PRICE algorithm
- Subscription downgrades use DEFERRED algorithm
- Response code 200 (OK) does NOT refer to the receipt validation result, it only
  confirms that the request structure and content is correct
- For integrations utilizing JWT authorization please use the MediaStore SDK API Amazon
  FireTV Payment endpoint
- Method sends email to customer with password reset link
- Use updateCustomerPassword to save new password after reset
- Entitlements are updated in real-time when subscriber status changes
- Use accessGranted flag to determine content access, not expiresAt timestamp due
  to grace periods
- Grace periods may allow continued access after expiration
- For high-volume applications, consider implementing a caching strategy and validate
  every 24 hours
- Cleeng acts as an observer for in-app purchases and tracks lifecycle events for
  analytics
- ChurnIQ Dashboard relies on in-app receipts for reporting
- Supports multiple TV platforms including Apple tvOS, Android TV, Roku, Amazon FireTV,
  Samsung TV, and Vizio
- Currently fully supported for Adyen and PayPal payment connectors
- Returns available offers to switch to in 'available' array and unavailable offers
  in 'unavailable' array with reasons
- JSON-RPC updateCustomerEmail method is deprecated. Use PATCH /3.1/customers/{customerId}
  instead
- The customer must have been created using the generateCheckoutUrl() method
- Accepts either a publisher (X-Publisher-Token) or JWT (Bearer) token for authorization
- Publisher token used for integrations through middleware, JWT for direct integrations
- Publisher token can be obtained from Cleeng Dashboard > Admin & Tools > API Keys
- JWT can be obtained from Login or SSO endpoint if using MediaStore API
- Beta phase - features may change
- 'Production base URL: https://inapp.api.prod.cleeng.com'
- Receipt processing is asynchronous and may take up to 30 seconds
- Application needs to poll getAccessStatus() method until transaction is completed
- Item ID (SKU) should be the reference of Cleeng Offer ID example S123123123_US
- Amazon Shared Secret is required for receipt validation and must be provided to
  Support Team
- SSO is a universal solution that can be used with any identity provider (Gigya,
  Okta, LoginRadius, or other internally developed systems), but middleware is required
- The /sso/auths endpoint requires publisherToken for authorization, unlike other
  MediaStore SDK endpoints
- JWT access token and refresh token are generated and returned to the middleware
- In-app subscription upgrades are NOT supported through this endpoint
- This endpoint can be authorized with either a publisher (X-Publisher-Token) or JWT
  (Bearer) token
- Depending on integration method (directly or through middleware), use either JWT
  or X-Publisher-Token header authorization
- Enterprise account required
- Method should be used on native integrations (mobile / tv) to build forgot password
  functionality
- Parameters from requestPasswordReset email link must be used
- Feature is fully supported for Adyen and PayPal
- customerId and fromOfferId parameters are deprecated, subscriptionId should be used
  instead
- Throttle at 100 RPS for migrations to avoid any risks
- Inform Cleeng 48 hours in advance in case you plan to load 5000 users/subscribers
  or more on production
- Data is processed in the background and some data only appears with a delay in the
  Cleeng dashboard
- Active payment details cannot be migrated due to PCI regulation and complexities
- Migrated users with active subscriptions will be counted as managed users (MU) and
  will appear on the invoice
- Payment processing is asynchronous and can take up to 30 seconds
- Roku push notification URL must be set to receive account activity notifications
- Subscription upgrades happen immediately with prorated billing
- Subscription downgrades happen only when the subscription renews
- Pause is supported for weekly, monthly, and 3-months subscription offers managed
  by Cleeng
- Pause is not currently supported for annual subscriptions, 6-month subscriptions,
  seasonal subscriptions, in-app subscriptions, and trial subscriptions
- Only active subscriptions can be paused
- The offer must have Pause enabled
- Pausing a subscription is not an immediate action - the pause will start with a
  new billing cycle
- Customer retains access to content until the end of the current billing period
- Feature is in Beta phase
- Feature is NOT supported in MediaStore SDK Components
- Customer data is anonymized for reporting reasons and GDPR compliance
- Cannot remove customer data if customer has active entitlement
- Anonymization is an irreversible process
- Can update subscription status (active, cancelled, terminated)
- Allows extending expiration time of current subscription
- Both status and expiration parameters may be changed in single call
- Returns broadcaster's consents with URL and version number
- By default returns terms and privacy consents, broadcaster terms or broadcaster
  marketing are set by the broadcaster
- 'Cleeng provides two technical environments: sandbox and production'
- Sandbox environment is linked to test systems like Apple's Sandbox or Adyen's test
  environment
- One-day billing periods for subscription offers are only available in Sandbox
- All components and versions are identical between sandbox and production environments
- Values such as publisherToken, paymentMethodId or offerID will differ between Production
  and Sandbox
- Performance testing is not allowed on the Cleeng platform - handled internally
- 'Subscription statuses: active, paused, stopped (canceled), terminated'
- Active status means customer has access with valid entitlements and billing is scheduled
- Paused status suspends entitlements and billing until resumed
- Stopped status maintains access until end of billing period, then no renewal
- Terminated status revokes access and stops all future billing
- Subscription pause does not happen immediately when requested - remains active until
  end of current billing period
- Trial conversions require valid payment details to continue as standard subscription
- Grace period applies during payment retry attempts for failed trial conversions
- Samsung TV in-app purchase integration supports only subscription offer type/product
  type
- Cleeng acts as an observer and tracks in-app purchase lifecycle events
- Purchase validation is an asynchronous process
- For direct integrations, polling approach should be used every 5 seconds for up
  to 60 seconds
- Production base URL is https://inapp.api.prod.cleeng.com
- 'API supports multiple offer types: subscription, pass, live event (live), and one-time
  purchase (vod)'
- 'Multiple API versions available: MediaStore API, API 3.1, and deprecated JSON-RPC'
- In-app payment support for Android, iOS, Roku, Amazon FireTV, Samsung TV, and Vizio
- Device Login Flow (PIN Pair) available for authentication
- Only one synchronization process can be active for a given transactionId at a time
- Either JWT or X-Publisher-Token header authorization is required
- Operation is asynchronous and returns 202 Accepted status with synchronizationId
- Can be used within both server-to-server and client integrations
- JSON-RPC listCustomerLibrary method is deprecated - use GET /3.1/transactions instead
- This method should not be used for real-time entitlement checks - use getAccessStatus
  or getAccessibleTags instead
- Load testing directly on Cleeng's production or sandbox environments is strictly
  NOT allowed
- Always use mock APIs to simulate Cleeng's responses in your testing environment
- Platform has extensive experience handling high-traffic events including major live
  sports broadcasts, global pay-per-view events, and large-scale subscription services
- Successfully managed millions of concurrent viewers
- Vizio subscriptionId is the main object used for validating a purchase
- Cleeng validates subscriptionId asynchronously - requires validation with external
  app store
- First OK message shows only that request has been successfully queued
- For direct integrations, poll every 5 seconds for up to 60 seconds
- Temporarily caching entitlement is strongly recommended to enhance user experience
- For subscriptions purchased via Vizio, Cleeng does not handle payments
- Subscription lifecycle events like termination are managed by external services
- Beta feature - requires account manager approval before implementation
- Supports only subscription offer type
- API Key from Vizio Developer Portal is time-limited and expires
- Requires US IP address to access Vizio Developer Portal
- Cleeng acts as observer and tracks in-app purchase lifecycle events
- Vizio handles actual payments, Cleeng validates and manages entitlements
- Webhooks are real-time HTTP POST requests sent to publisher-provided endpoints
- Can use up to 10 endpoints, but at least one is required to subscribe to a webhook
  topic
- No authentication required to receive webhooks
- Free of charge and available to all publishers
- Sandbox environment available for testing
- Body consists of broadcasterId, topic, and data fields
- Only active purchases can be transferred
- Transfer process is asynchronous - returns 202 Accepted with synchronizationId
- Can be authorized with either JWT Bearer token or X-Publisher-Token header
- Correlation-Id header recommended for tracking requests
- Daily subscriptions are available in sandbox environment only for testing recurring
  payments
- Testing is supported for Cleeng-managed subscriptions only
- 'Supported Payment Service Providers: Adyen and PayPal'
- Default Dunning Actions are set automatically when payment methods are configured
- Webhooks must be configured for Payment Service Providers
- Braze integration is in Beta status
- Supports transactional emails, audience segmentation, and behavior-based campaigns
- Integrates with Subscriber Retention Management (SRM) system
- Zapier enables no-code automation workflows
- Lists only subscriptions which didn't expire
- Should not be used for real-time entitlement checks
- Status may be 'active' (will renew) or 'cancelled' (will not renew)
- Cancelled and expired subscriptions won't be listed
- Webhook filters provide a way to receive webhook events only with a specific payload
- If you set up filtering, but the payload of a webhook that you subscribed to does
  not have the paymentMethodId property, then it will filter out all events, and thus
  no notifications will be sent
- Used to finalize payments that require additional action from customers
- Used in 3D Secure authentication flow
- paymentData value comes from action object received from /connectors/adyen/initial-payment
  request
- JSON-RPC getCustomerEmail method is deprecated - use GET /3.1/customers/{customerId}
  instead
- Customer must have purchased at least one offer to check email
- PHP SDK takes customerToken automatically from cookies when customer is logged in
- Method helps gather required elements to create a new user for SSO solution
- Webhook verification is optional but recommended for security purposes
- By default webhook verification is disabled during subscription
- sharedSecret value is secret between Cleeng and publisher - should not be divulged
  to 3rd party
- Publisher responsibility to store/remember sharedSecret value - no mechanism to
  display forgotten values
- Recommended sharedSecret length is at least 32 bytes
- Feature is in Beta version
- Must subscribe to one webhook topic at a time
- Use Cleeng Sandbox account for testing before going live
- Sandbox API key won't work in production webhook URL
- Webhook events sent as HTTP POST requests with JSON body
- This endpoint uses a caching mechanism with a duration of 60 seconds
- If an offer has been updated, it may take up to 60 seconds to retrieve the most
  up-to-date data
- Beta phase - reach out to account manager before implementing
- Can be authorized with either publisher (X-Publisher-Token) or JWT (Bearer) token
- Use this endpoint to transfer externally-managed subscriptions (EMS) - subscriptions
  whose life cycle is managed outside of Cleeng
- Subscription is transferred if there is already an active subscription in Cleeng
  that belongs to a customer with a different email address
- A new subscription is created for the new customer and the subscription assigned
  to the old customer is terminated
- For subscription transfer subscription resource payload should be returned in response
  with non-empty replacedBy property
- Only for enterprise accounts
- Optional modules parameter can customize My Account box (profile, payment, subscriptions,
  transactions, affiliate-tracking, consents-list)
- getLocaleDataFromIp JSON-RPC method is deprecated
- Method helps gathering required elements to create a new user for SSO solution
- MediaStore SDK provides ready-to-use components for checkout and customer self-service
- Minimizes development effort while ensuring secure and optimized user experience
- 'This endpoint can be used only to delete payment details with the property bound:
  false'
- Removing payment details that are attached to subscriptions will prevent those subscriptions
  from being renewed if a customer doesn't add new payment details
- Used to revive terminated externally-managed subscriptions (EMS)
- Can only revive terminated subscriptions
- Creates a new subscription based on the terminated one
- Data is copied from terminated subscription but expiration date can be overridden
- JWT (Bearer) token authorization should be used for this endpoint
- 'Status can be: pending, success, or failure'
- correlationId is generated during initial purchase validation
- JSON-RPC listSingleOffers method is deprecated. Use GET /3.1/offers instead
- Webhooks are notifications sent as POST requests to specified endpoints with JSON
  payload
- Supports subscription, pass, live event, and one-time purchase offer types
- JSON-RPC listPaymentDetails method is deprecated
- Beta phase feature
- URL for requests expire after 30 days
- Authentication API accepts JWT (Bearer) token for authorization
- JWT tokens can be obtained from Login or SSO endpoint if using MediaStore API
- Uses sandbox environment for testing
- NPM Package available for React.JS integration
- Components Library provides ready-to-use components
- PIN Pair Login can only be used with Cleeng Single Sign-On
- Code format consists of 6 characters using case-insensitive English letters [A-Z]
  and digits [0-9]
- Code expiration time cannot be more than 15 minutes, default is 10 minutes
- JWT expiration time must be between 1 and 1440 minutes, default is 15 minutes
- subscriptionReadyForPaymentAuthorisation is required for recurring payments
- subscriptionReadyForPaymentCapture is required for recurring payments
- subscriptionReadyForTermination is required for recurring payments
- subscriptionRenewalPrenotification is sent 30 days before subscription expiration
  for 3 months, 6 months, annual, and seasonal periods
- By default subscriptionRenewalPrenotification webhook is sent for annual subscriptions
  only
- For subscription switches both subscriptionRenewed and subscriptionSwitched webhooks
  can be triggered together or separately
- Can only pause active and canceled subscriptions (cannot pause in-trial or terminated
  subscriptions)
- Transition from active state to pause is tied to subscription anniversary date (the
  pause will start with a new billing cycle)
- JSON-RPC getSubscriptionOffer method is deprecated - use GET /3.1/offers/{offerId}
  instead
- Google reCAPTCHA integration available for MediaStore API and MediaStore Components
  (version 5.7.0 or higher)
- reCAPTCHA helps prevent automated bots and fraudulent activities during user registration
  and purchases
- Supports Adyen payment methods including card payments with 3D Secure support, Apple
  Pay, Google Pay, iDEAL
- Supports PayPal Express Checkout
- Payment methods are separately added per environment (sandbox, production)
- Webhooks must be configured before first recurring payment for PayPal
- Zip code is required by default for credit card payments with version 5.9.0
- Beta feature
- Webhooks are notifications that Cleeng sends out to subscribed publishers about
  certain events occurring in the platform
- 'The body of the request consists of three constant fields: broadcasterId, topic,
  and data'
- Built for Roku or TV App integration
- Customer makes purchase with Mobile or PC, transactionId shared within receipt
- Access to content in TV application based on transactionId for generating entitlement
- Can resume subscription from scheduled pause or immediately
- Immediate resume from ongoing pause triggers payment attempt
- Beta phase - please note that it is a Beta phase
- Use this endpoint to resume a subscription from a scheduled pause or to immediately
  resume from the pause that is ongoing
- With immediate resume from the pause which is in progress, a payment attempt is
  made and the customer is charged
- Multiple tags are defined as OR not AND
- To cover all offers by subscription plan, set accessToTags to array('(all)')
- Pass offers bill customers only once unlike subscriptions
- Offers must be tagged properly to be compatible with subscription plan accessToTags
  parameter
- JSON-RPC listPassOffers method is deprecated. Use GET /3.1/offers instead.
- Maximum limit is 200 items per request.
- Device Login Flow (PIN Pair) feature enhances user authentication experience on
  input-constrained devices like TVs and set-top boxes
- 'Three API endpoints need to be triggered for device authorization: Generate code,
  Authorize code, Check code'
- Google reCAPTCHA integration requires updating all platforms where endpoints are
  used
- If Google reCAPTCHA is activated in Cleeng Dashboard and captchaValue is not present
  in body request, the request will be rejected
- Default reCAPTCHA score threshold is 0.5 and can be changed by contacting support
- Webhooks setup for Adyen is automatic, but PayPal requires manual configuration
- PUT method creates new resource or replaces existing representation
- Filtering by paymentMethodId is required to differentiate transactions from respective
  connectors
- 'Required webhook topics: subscriptionReadyForPaymentAuthorisation, subscriptionReadyForPaymentCapture,
  subscriptionReadyForTermination, refundPayment, capturePayment, paymentDetailsDeactivated'
- MediaStore SDK provides full flexibility to adjust your language via Translations
- Includes identity management with customer registration, login, and forget password
  functionality
- Includes checkout that allows customers to seamlessly purchase content
- Sandbox should NOT be used for load tests
- Sandbox should NOT be used for testing full sets of data migrations - use small
  batches only
- API throttling is implemented in sandbox environment
- The number of API requests that can be sent to sandbox platform is limited
- Functions in srm-sandbox.cleeng.com and srm.cleeng.com are the same
- Sandbox is a separated environment with isolated database
- Account details, offers, api-keys and transactions are different from official account
- Sandbox checkout allows fake credit card details for testing
- Requires publisher token for authentication
- JSON-RPC method getViewerConsents is deprecated
- Returns user's current consents for the broadcaster with their status and version
- There's a limit of 4 IP addresses per user
- Single address is marked as used for 3 hours
- Recurring billing requires merchant to get subscriber's payment details permission
  upfront for recurring charges
- 'Payment process involves two steps: authorization and capture'
- 'Two approaches available: Cleeng-Managed vs Externally-Managed recurring billing'
- Authorization creates a hold on customer's credit for the sale amount
- Capture must be requested within certain number of days to process transaction
- Hosted customer flows are in Beta - ready for real-world use while gathering user
  feedback
- Auth and Account widgets have refreshed designs launching soon
- Global cleeng object provides communication methods including onAuthTokensUpdate,
  setAuthTokens, logout, and onWidgetEvent
- Beta phase - Please note that deletion is an irreversible process
- JWT is used for authorization to all endpoints
- Refresh token allows expired JWT to be replaced with new JWT
- Customer registration date is saved automatically and used as last login date if
  customer hasn't logged in yet
- Password reset can redirect to default Cleeng page or custom resetUrl
- Capture form should be displayed after registration, after login if required settings
  haven't been answered, and in My Account for updates
- Capture requires authorization and can only save answers for enabled fields
- 'Consent name must be one of: terms, privacy, broadcaster_terms, broadcaster_marketing'
- 'State must be one of: accepted, declined'
- Version must match the current consent definition version
- Device ID limit of 3 per user with 3-hour expiration
- Hosted customer flows are in Beta
- Script must be loaded from Cleeng's domain to ensure it is always up to date
- Do not attempt to self-host cleeng.js script
- For Checkout to display correctly, user needs to be logged in
- Apple Pay requires domain association file hosting and domain whitelisting
- Production environment uses https://widgets.prod.cleeng.com/cleeng.js
- Webhook handler should return 200 http status code for successful processing
- Recurring billing can be integrated as one-step (direct charge) or two-step (authorize
  and capture) process
- Payment capture can happen after authorization process or appear alone
- Implementation details depend on specific payment gateway solution
- Details of the implementation will depend on a specific payment gateway solution
- Prerequisites require subscribing to subscriptionReadyForPaymentCapture event
- Payment capture process supports both SUCCESS (captured status) and FAILURE (rejected
  status) scenarios
- Creates a season in a season group (called seasonal schedule in the Cleeng dashboard
  setup)
- Season group is a group of seasons, each with its start and end date defined
- Related to Seasonal subscriptions functionality
- For production environment, use https://widgets.prod.cleeng.com/cleeng.js
- Widget is embedded as iframe and applies settings configured in dashboard automatically
- Externally-Managed Purchases means subscriptions are created and managed outside
  of Cleeng
- Notifications must be set up so all payment gateway events are registered at Cleeng
- Connectors need listeners/endpoints to receive status change notifications from
  payment gateways
- Payment Method IDs are constant values that can be stored for future use
- Always update order with correct payment Method Id to avoid problems with recurring
  payments
- For Cleeng MoR, 'Powered by Cleeng' must be visible at checkout bottom and Cleeng
  T&C must be incorporated
- Method can be used only with client-side payment process
- Tokens can be extended by no more than 60 days
- Uses JWT and refresh tokens for authentication via SSO Login endpoint
- Customer needs to be authenticated to use Account widget
- 'Production environment uses different URL: https://widgets.prod.cleeng.com/cleeng.js'
- Payment details creation can involve one or two connectors depending on whether
  payment gateway changes
- Active parameter determines if new payment details will be used for recurring payments
- 'If active: true, all old payment details will be deactivated'
- Old payment details cleanup includes deactivation, cancellation of authorised payments,
  and deletion
- Beta phase - Please note that it is Beta phase
- JSON-RPC generateCustomerTokenFromPassword method is deprecated
- Customer has to be created prior by registerCustomer method
- Method should be used on native integrations (mobile / tv) to build login functionality
- Hosted customer flows are in Beta feature status
- Widget emits message events for integration with applications
- Provides self-service access to FAQs and direct access to support team
- Uses JSON-RPC 2.0 protocol format
- Publisher token required for authentication
- Webhook handler should return 200 HTTP status code when successfully processed
- Grace period allows subscription to remain active after due date before termination
- Termination process revokes subscriber entitlement on Cleeng platform
- Payment methods filtering is configured via Cleeng Dashboard → Admin → Integration
  Hub → Merchant
- Drop-in component automatically hides unsupported payment methods based on country
  and browser
- Only specified payment methods will be visible when filter is applied, all others
  are hidden
- For payment-free purchases, paymentMethodId must be defined in the order even for
  free offers
- 100% coupon codes don't require payment details but recurring charges won't occur
  without payment details
- One-click coupons can be applied via URL query parameters
- When coupon is automatically applied, free trial is ignored
- 100% discount coupons for seasonal subscriptions must be restricted to one use per
  user
errors:
- '429: Throttling limit exceeded - rate limiting to prevent system overload'
- 401 Unauthorized
- 429 Too Many Requests
- '401 Unauthorized: Authentication token invalid or expired'
- '429 Too Many Requests: API rate limit exceeded - reduce request frequency'
- '401 Unauthorized: Missing API Key/Token, Invalid API Key/Token, Expired Credentials,
  Incorrect Authentication Method, or Insufficient Permissions'
- '429 Too Many Requests: Exceeding Rate Limits, Burst Requests, or Inefficient API
  Usage'
- 400 - Bad Request
- 422 - Customer exists
- 429 - Too Many Requests
- 500 - Internal Server Error
- '401 Unauthorized: Authentication required or token expired'
- '429 Too Many Requests: Rate limit exceeded'
- '400 REQ0001: Invalid request body'
- '422 USER0002: Customer already exists'
- '429 CPT0001: Google reCAPTCHA verification required!'
- '429 CPT0002: Google reCAPTCHA verification failed!'
- '500 SXXXX: Internal Server Error'
- '401 USER0001: Wrong email or password'
- '422 USER0003: Customer is not associated with this publisher'
- 401 - Unauthorized
- 409 - Result
- '401 AUTH0003: Refresh token is expired or does not exist'
- '409 MSSDK0101: Transaction is ongoing for the provided item'
- 400 - Invalid customerEmail
- 400 - Invalid offerId
- 400 - Invalid resetUrl
- '400 REQ0001: Empty param offerId or publisherId'
- '400 REQ0001: resetUrl is not valid URL'
- '404 USER0004: Customer customerEmail does not exist'
- '422 REQ0100: Offer or publisher not found'
- 429 Rate Limit Exceeded
- '400 REQ0003: Invalid path parameters'
- 'AUTH0001: Missing required JWT'
- 'AUTH0002: Invalid JWT token'
- 'SXXXX: Internal Server Error'
- '422 AUTH0004: resetPassword token is not valid or has expired'
- '422 USER0004: Customer [customerEmail] does not exist'
- '422 REQ0001: Invalid request body'
- 422 - Invalid request body
- 422 - invalid resetPasswordToken
- 422 - Customer doesn't exist
- 400 - Invalid Param
- 422 - Access granted
- '429'
- 404 - Not Found
- 429 - Rate limiting
- 400 - Invalid Format
- 400 - Missing required query param
- '400 REQ0002: Invalid query parameters'
- '401 AUTH0001: Missing required JWT'
- '401 AUTH0002: Invalid JWT token'
- 422 - Offer doesn't exist
- 422 - Blocked for country
- 404 - Offer Not Found
- '400: Bad Request'
- '401: Unauthorized'
- 404 - Not found
- '400: Bad Request - Invalid request parameters'
- '401: Unauthorized - Authentication required'
- 400 - Invalid OfferId
- 404 - Offer or Localization not found
- 422 - Cannot activate localization of an inactive offer
- 429 - Rate limit exceeded
- 422 - Configuration not activated
- 422 - Code generation failure
- 'REQ0001: Invalid request body - Failed to parse the request body'
- 'PINP0001: PIN-Pair Integration not activated - Configuration for PIN Pair Login
  not activated in Cleeng Dashboard'
- 'PINP0101: Could not generate unique code - Failed to generate unique code'
- 'SXXXX: Internal Server Error - Internal reason'
- '1: Invalid customer token'
- '4: Offer not found'
- '14: IP address limit exceed'
- '16: Invalid arguments'
- '400: Bad Request - Invalid parameters or gift code format'
- 'PINP0201: PIN-Pair Authentication Code not found or invalid'
- 'PINP0203: PIN-Pair Authentication Code has expired'
- 400 - Bad request
- 410 - Gone
- 500 - Internal server error
- '3: Invalid publisher token'
- '5: Access denied'
- '11: Invalid arguments'
- 409 - Conflict
- 404 Not Found
- 422 Unprocessable entity
- 'REQ0002: Invalid query parameters'
- 'PINP0301: PIN-Pair Authentication Code not authorized yet'
- 422 - Unprocessable entity
- '422 ADYEN0001: Order not found'
- '422 ADYEN0002: Payment refused'
- 401 - Missing JWT
- 401 - Invalid JWT
- 422 - Order not found
- 422 - Payment refused
- 200 - Season group successfully updated
- 404 - Season group not found
- '13: Customer already exists'
- 422 - Refused
- 422 - Cancelled
- 422 - Error from Adyen
- 500 - Unable to process payment
- '422 ADYEN0003: Cancelled'
- '422 ADYEN0004: Error'
- '500 ADYEN0005: Unable to process payment'
- 200 - Localization deactivated
- 204 - No operation was made
- 200 - OK
- 401 - Invalid Param
- 404 - Order Not Found
- 422 - Unprocessable Entity
- '23: User does not exist'
- '24: Broadcaster did not set their consent definitions'
- '401 Unauthorized: Authentication token expired or invalid'
- 422 - Order processed
- 404 - Pass not found
- 429 Rate Limit
- '401 Unauthorized: Check OAuth scopes or token expiration'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '401 Unauthorized: Missing, invalid, expired, or insufficient permissions for API
  key/token'
- '429 Too Many Requests: Rate limit exceeded - implement exponential backoff and
  check rate limit headers'
- 422 Unprocessable Entity
- 400 Bad Request
- 400 - Missing Required Parameter
- 400 - Too long data
- 422 - Incorrect customerId
- 422 - Email already used
- 422 - Wrong password
- 404 - Payment Method Settings Not Found
- '400: Bad Request - Invalid parameters or data'
- '401: Unauthorized - Invalid or missing X-Publisher-Token'
- '404: Not Found - Resource not found'
- 404 - Subscription doesn't exist
- 400 - Invalid criteria
- 422 - Invalid param
- 400 - Result
- 400 - Invalid Parameters
- 429 Rate Limited
- 'RECEIVED_EXPIRED_PURCHASE: The received purchase was already expired'
- 'TRANSACTION_ID_NOT_FOUND: The transaction ID was not found'
- 'ACCESS_EXPIRED: The user''s access to the offer has expired'
- 200 - Subscription canceled
- '422: Unprocessable Entity'
- 'PAYMENT_GATEWAY_NOT_SUPPORTED: The customer''s subscription was purchased with
  a payment gateway that is not supported by switch functionality'
- 'RECURRING_PROCESS_ALREADY_STARTED: The customer''s subscription is currently during
  the recurring payment process'
- 'ALREADY_HAS_ACCESS: The customer already has an active subscription to the target
  offer'
- 'TO_OFFER_COUNTRY_NOT_ALLOWED: Target offer is not accessible in the customer''s
  country'
- 'TO_FREE_OFFER_NOT_ALLOWED: Switch functionality is not supported for offers with
  price 0'
- 'MISSING_PAYMENT_DETAILS: Payment is required for a switch, but no payment details
  are provided'
- 404 - Resource not found
- 400 - Input validation failure
- 400 Input validation failure
- 404 Resource not found
- 'PAYMENT_GATEWAY_NOT_SUPPORTED: Customer''s subscription was purchased with unsupported
  payment gateway'
- 'RECURRING_PROCESS_ALREADY_STARTED: Subscription is currently during recurring payment
  process'
- 'ALREADY_HAS_ACCESS: Customer already has active subscription to target offer'
- 'TO_OFFER_COUNTRY_NOT_ALLOWED: Target offer not accessible in customer''s country'
- 'TO_FREE_OFFER_NOT_ALLOWED: Switch functionality not supported for offers with price
  0'
- 'MISSING_PAYMENT_DETAILS: Payment required for switch but no payment details provided'
- 422 - Switch not defined
- 'VALIDATION_ERROR: General input validation error'
- 'SWITCH_NOT_DEFINED_IN_SWITCH_SETTINGS: Subscription switch between the two given
  offers was not defined as possible in the dashboard'
- 'SAME_TARGET_OFFER: The target offer is the same as the current offer'
- 'SWITCH_IN_PROGRESS: The customer''s subscription is currently undergoing the switch
  to another one'
- 'OFFER_INACTIVE: The target offer is inactive'
- 400 - Invalid parameter
- '404 REQ0100: Entity not found'
- '4: Invalid offer ID'
- '8: Invalid offer properties'
- '10: Invalid email address'
- '16: Invalid API argument'
- 400 - Invalid switch ID
- 404 - Switch not found
- '401 Unauthorized: Authentication issues'
- '429 Too Many Requests: Rate limiting exceeded'
- 202 - Accepted for processing
- '400 REQ0001: Invalid body'
- '400 REQ0004: Invalid headers'
- '409 SK2C0101: The resource is temporarily locked due to a concurrent request'
- '422 SK2C0100: Unable to find customer'
- '500 SK2C0004: StoreKit2 integration not activated'
- 500 - Failed to create payment details
- 400 - Missing or invalid parameter
- 404 - Switch Not Found
- 401, 429 - Common API Errors
- '409 SK2C0103: The resource is temporarily locked due to a concurrent request'
- '409 SK2C0104: The resource is temporarily locked due to a concurrent request'
- '422 SK2C0005: The migration is in progress'
- 400 - Invalid offerID format
- 404 - Offer doesn't exist
- 'REQ0003: Invalid path parameters'
- 'REQ0004: Invalid headers'
- 'REQ0100: Entity not found'
- 404 - Customer Not Found
- '404: Not Found'
- '16: Invalid module list'
- 404 - Payment Details Not Found
- 400 - Invalid body
- 403 - Access denied
- '403: Forbidden'
- 400 - Invalid customerId
- 423 - Customer is not associated
- 200 - Offer activated
- '429 Too Many Requests: API rate limit exceeded'
- 200 - Offer Deactivated
- '401 Unauthorized: Recheck authentication or token expiration'
- '429: Rate limit exceeded - throttle API calls'
- 404 - Subscription Not Found
- '400: Bad request with message'
- '404: Not found with message'
- 200 - Localization created successfully
- 404 - Subscription not found
- '429 Rate Limit: API call limit exceeded'
- '10: User customerEmail does not exist'
- 400 - Invalid Body
- 201 - Pass Created
- 200 - Season group successfully deleted
- '27: Broadcaster does not use the consent'
- '28: Consent version does not match the current consent definition'
- '29: Consent does not exist'
- 400 - Status Value Invalid
- 401 - Credentials Missing or Invalid
- 422 - Order Already Processed
- 400 - Search failure
- 200 - Season successfully updated
- 404 - Season group or season not found
- 429 Rate limit exceeded
- '3: Publisher token is invalid'
- '4: Offer offerId does not exist'
- '10: Customer customerEmail is not associated with your account or doesn''t exist'
- 422 - Transaction not yet processed
- 200 - Pass terminated
- '10: Invalid user email'
auth_info:
  mentioned_objects:
  - JWT token
  - publisher token
  - OauthToken
  - AuthProvider
  - NamedCredential
  - customerId
  - publisherId
  - Config
  - mediastore-sdk
  - OAuth2
  - SSO
  - Payment Service Providers
  - Adyen
  - PayPal
  - Moneris
  - PrimeiroPay
  - RazorPay
  - Bambora
  - publisherToken
  - Publisher Token
  - JWT authentication
  - jwt
  - refreshToken
  - Cleeng_Api
  - X-Publisher-Token
  - JWT
  - Bearer
  - API Key
  - Data Access Key
  - Private Key
  - MediaStore SDK
  - Bearer token
  - Publisher API Key
  - AWS Cognito
  - Okta
  - LoginRadius
  - Firebase
  - Auth0
  - Login
  - MediaStore SDK Components Library
  - Checkout
  - MyAccount
  - SSO Login API
  - customerToken
  - Webhooks
  - Payment API
client:
  base_url: https://api.sandbox.cleeng.com
source_metadata: null
