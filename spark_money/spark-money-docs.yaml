resources:
- name: transfers
  endpoint:
    path: /getTransfers
    method: GET
    data_selector: transfers
    params:
      limit: 20
      offset: 0
- name: balance
  endpoint:
    path: /getBalance
    method: GET
    data_selector: balance
    params: {}
- name: depositAddress
  endpoint:
    path: /getSingleUseDepositAddress
    method: GET
    data_selector: address
    params: {}
- name: unusedDepositAddresses
  endpoint:
    path: /getUnusedDepositAddresses
    method: GET
    data_selector: addresses
    params: {}
- name: lightningInvoice
  endpoint:
    path: /createLightningInvoice
    method: POST
    data_selector: invoice
    params: {}
- name: Token
  endpoint:
    path: /issuing/token
    method: POST
    data_selector: data
- name: Wallet
  endpoint:
    path: /wallet
    method: GET
    data_selector: data
- name: getIdentityPublicKey
  endpoint:
    path: /getIdentityPublicKey
    method: GET
    data_selector: publicKey
    params: {}
- name: getSparkAddress
  endpoint:
    path: /getSparkAddress
    method: GET
    data_selector: sparkAddress
    params: {}
- name: getTransfers
  endpoint:
    path: /getTransfers
    method: GET
    data_selector: transfers
    params:
      limit: 20
      offset: 0
- name: getBalance
  endpoint:
    path: /getBalance
    method: GET
    data_selector: balance
    params: {}
- name: getSingleUseDepositAddress
  endpoint:
    path: /getSingleUseDepositAddress
    method: GET
    data_selector: depositAddress
    params: {}
- name: getUnusedDepositAddresses
  endpoint:
    path: /getUnusedDepositAddresses
    method: GET
    data_selector: unusedDepositAddresses
    params: {}
- name: transfer
  endpoint:
    path: /transfer
    method: POST
    data_selector: transferDetails
    params: {}
- name: payLightningInvoice
  endpoint:
    path: /payLightningInvoice
    method: POST
    data_selector: paymentRequest
    params: {}
- name: transferTokens
  endpoint:
    path: /transferTokens
    method: POST
    data_selector: tokenTransfer
    params: {}
- name: getTokenInfo
  endpoint:
    path: /getTokenInfo
    method: GET
    data_selector: tokenInfo
    params: {}
- name: queryTokenTransactions
  endpoint:
    path: /queryTokenTransactions
    method: GET
    data_selector: tokenTransactions
    params: {}
- name: getTokenL1Address
  endpoint:
    path: /getTokenL1Address
    method: GET
    data_selector: tokenL1Address
    params: {}
- name: createLightningInvoice
  endpoint:
    path: /createLightningInvoice
    method: POST
    data_selector: lightningInvoice
    params: {}
- name: getLightningReceiveRequest
  endpoint:
    path: /getLightningReceiveRequest
    method: GET
    data_selector: lightningReceiveRequest
    params: {}
- name: getLightningSendRequest
  endpoint:
    path: /getLightningSendRequest
    method: GET
    data_selector: lightningSendRequest
    params: {}
- name: getLightningSendFeeEstimate
  endpoint:
    path: /getLightningSendFeeEstimate
    method: POST
    data_selector: lightningSendFeeEstimate
    params: {}
- name: withdraw
  endpoint:
    path: /withdraw
    method: POST
    data_selector: withdrawalRequest
    params: {}
- name: getWithdrawalFeeQuote
  endpoint:
    path: /getWithdrawalFeeQuote
    method: POST
    data_selector: withdrawalFeeQuote
    params: {}
- name: getCoopExitRequest
  endpoint:
    path: /getCoopExitRequest
    method: GET
    data_selector: coopExitRequest
    params: {}
- name: claimDeposit
  endpoint:
    path: /claimDeposit
    method: POST
    data_selector: claimedDeposit
    params: {}
- name: getStaticDepositAddress
  endpoint:
    path: /getStaticDepositAddress
    method: GET
    data_selector: staticDepositAddress
    params: {}
- name: getClaimStaticDepositQuote
  endpoint:
    path: /getClaimStaticDepositQuote
    method: POST
    data_selector: claimStaticDepositQuote
    params: {}
- name: claimStaticDeposit
  endpoint:
    path: /claimStaticDeposit
    method: POST
    data_selector: claimedStaticDeposit
    params: {}
- name: refundStaticDeposit
  endpoint:
    path: /refundStaticDeposit
    method: POST
    data_selector: refundTransaction
    params: {}
- name: advancedDeposit
  endpoint:
    path: /advancedDeposit
    method: POST
    data_selector: advancedDepositResult
    params: {}
- name: getSwapFeeEstimate
  endpoint:
    path: /getSwapFeeEstimate
    method: POST
    data_selector: swapFeeEstimate
    params: {}
- name: cleanupConnections
  endpoint:
    path: /cleanupConnections
    method: POST
    data_selector: cleanupResult
    params: {}
- name: getdepositaddress
  endpoint:
    path: /wallet/deposit
    method: GET
    data_selector: address
- name: getlatesttx
  endpoint:
    path: /wallet/latesttx
    method: GET
    data_selector: transaction
- name: withdraw
  endpoint:
    path: /wallet/withdraw
    method: POST
    data_selector: transaction
- name: initwallet
  endpoint:
    path: /wallet/init
    method: POST
    data_selector: wallet
- name: balance
  endpoint:
    path: /wallet/developer-guide/balances
    method: GET
    data_selector: balance
- name: spark_address
  endpoint:
    path: /wallet/developer-guide/spark-address
    method: GET
- name: transfer
  endpoint:
    path: /wallet/developer-guide/send-receive-spark
    method: POST
- name: get_balance
  endpoint:
    path: /wallet/developer-guide/balances
    method: GET
- name: spark_address
  endpoint:
    path: /wallet/developer-guide/spark-address
    method: GET
- name: lightning_send_fee_estimate
  endpoint:
    path: /wallet/getLightningSendFeeEstimate
    method: GET
    data_selector: feeEstimate
    params: {}
- name: coop_exit_fee_estimate
  endpoint:
    path: /wallet/getCoopExitFeeEstimate
    method: GET
    data_selector: feeEstimate
    params: {}
- name: transfers
  endpoint:
    path: /wallet/getTransfers
    method: GET
    data_selector: transfers
    params: {}
- name: wallet
  endpoint:
    path: /wallet
    method: GET
    data_selector: wallets
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: GET
    data_selector: transactions
    params: {}
- name: wallet
  endpoint:
    path: /wallet/developer-guide/create-first-wallet
    method: GET
- name: withdraw_fee_quote
  endpoint:
    path: /wallet/developer-guide/cooperative-bitcoin-exit
    method: GET
    data_selector: feeQuote
    params:
      amountSats: 17000
      withdrawalAddress: bcrt1pf8hed85p94emupfpfhq2g0p5c40cgzqs4agvvfmeuy32nxeh549syu2lwf
- name: withdraw
  endpoint:
    path: /wallet/developer-guide/cooperative-bitcoin-exit
    method: POST
    data_selector: withdraw_result
    params:
      onchainAddress: bcrt1pf8hed85p94emupfpfhq2g0p5c40cgzqs4agvvfmeuy32nxeh549syu2lwf
      amountSats: 17000
      exitSpeed: ExitSpeed.MEDIUM
      deductFeeFromWithdrawalAmount: true
- name: SparkSigner
  endpoint:
    path: /wallet/documentation/signing-interface
    method: GET
    data_selector: methods
- name: static_deposit_address
  endpoint:
    path: /wallet/developer-guide/static-deposit-address
    method: GET
    data_selector: staticDepositAddress
    params: {}
- name: monitor_deposit_transactions
  endpoint:
    path: /wallet/developer-guide/monitor-deposit-transactions
    method: GET
    data_selector: newTransactions
    params: {}
- name: claim_static_deposit
  endpoint:
    path: /wallet/developer-guide/claim-static-deposit
    method: POST
    data_selector: claimResult
    params: {}
- name: refund_static_deposit
  endpoint:
    path: /wallet/developer-guide/refund-static-deposit
    method: POST
    data_selector: refundTransactionHex
    params: {}
- name: balance
  endpoint:
    path: /wallet/developer-guide/balances
    method: GET
    data_selector: balance
- name: spark_address
  endpoint:
    path: /wallet/developer-guide/spark-address
    method: GET
    data_selector: sparkAddress
- name: transfer
  endpoint:
    path: /wallet/developer-guide/send-receive-spark
    method: POST
    data_selector: transfer
- name: get_balance
  endpoint:
    path: /wallet/developer-guide/balances
    method: GET
    data_selector: balance
- name: spark_address
  endpoint:
    path: /wallet/developer-guide/spark-address
    method: GET
    data_selector: sparkAddress
- name: lightning_send_fee_estimate
  endpoint:
    path: /wallet/getLightningSendFeeEstimate
    method: GET
    data_selector: feeEstimate
- name: coop_exit_fee_estimate
  endpoint:
    path: /wallet/getCoopExitFeeEstimate
    method: GET
    data_selector: feeEstimate
- name: transfers
  endpoint:
    path: /wallet/developer-guide/view-transfers
    method: GET
    data_selector: transfers
    params:
      limit: '20'
      offset: '0'
- name: withdraw
  endpoint:
    path: /wallet/developer-guide/cooperative-bitcoin-exit
    method: POST
    data_selector: withdraw_result
    params:
      amountSats: 17000
      onchainAddress: bcrt1pf8hed85p94emupfpfhq2g0p5c40cgzqs4agvvfmeuy32nxeh549syu2lwf
      exitSpeed: ExitSpeed.MEDIUM
      deductFeeFromWithdrawalAmount: true
- name: generateMnemonic
  endpoint:
    path: /wallet/documentation/signing-interface/generateMnemonic
    method: GET
    data_selector: Promise<string>
- name: mnemonicToSeed
  endpoint:
    path: /wallet/documentation/signing-interface/mnemonicToSeed
    method: GET
    data_selector: Promise<Uint8Array>
- name: createSparkWalletFromSeed
  endpoint:
    path: /wallet/documentation/signing-interface/createSparkWalletFromSeed
    method: GET
    data_selector: Promise<string>
- name: getIdentityPublicKey
  endpoint:
    path: /wallet/documentation/signing-interface/getIdentityPublicKey
    method: GET
    data_selector: Promise<Uint8Array>
- name: getMasterPublicKey
  endpoint:
    path: /wallet/documentation/signing-interface/getMasterPublicKey
    method: GET
    data_selector: Promise<Uint8Array>
- name: generatePublicKey
  endpoint:
    path: /wallet/documentation/signing-interface/generatePublicKey
    method: GET
    data_selector: Promise<Uint8Array>
- name: getDepositSigningKey
  endpoint:
    path: /wallet/documentation/signing-interface/getDepositSigningKey
    method: GET
    data_selector: Promise<Uint8Array>
- name: signMessageWithIdentityKey
  endpoint:
    path: /wallet/documentation/signing-interface/signMessageWithIdentityKey
    method: GET
    data_selector: Promise<Uint8Array>
- name: validateMessageWithIdentityKey
  endpoint:
    path: /wallet/documentation/signing-interface/validateMessageWithIdentityKey
    method: GET
    data_selector: Promise<boolean>
notes:
- The SparkWallet class is the primary interface for interacting with the Spark network.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Spark is the fastest, lightest, and most developer-friendly way to build financial
  apps and launch assets natively on Bitcoin.
- Spark is designed to be incredibly fast and scalable but in this early version,
  we haven’t yet optimized for performance across the board.
- Spark is still highly experimental. Expect bugs, rapid iteration, and breaking changes
  as we continue to scale the network.
- Spark does not require KYC / KYB.
- Spark is an off-chain scaling solution that builds on top of Statechains to enable
  instant, extremely low fee, and unlimited self-custodial transactions of Bitcoin
  and tokens.
- If a prior owner of a Spark leaf publishes the branch in a unilateral exit, there
  is a time limitation during which the correct owner needs to publish the correct
  leaf transaction.
- If any (or a minority of the Spark is configured for threshold) of the SOs lose
  liveness or lose their keys, the Spark will not be able to continue.
- Quick start examples to help you integrate with Spark
- Spark is launching as a mainnet beta which means it’s real, but still early.
- We don’t expect everything to be perfect on day one.
- React Native SDK is currently in beta with active development.
- Uses polling for updates instead of real-time streams.
- Please treat everything as a beta environment, things might not always work as expected.
- Uses static deposit addresses for production applications to prevent user confusion
  and potential fund loss
- Deposits require 3 confirmations on L1
- A Spark Address is derived from your wallet’s network and identity public key
- The same wallet will always generate the same Spark Address
- Spark Addresses are network-specific (mainnet/testnet/regtest)
- Always verify invoice amounts before paying
- Set appropriate expiry times for invoices if necessary
- The React Native SDK is currently in beta with active development.
- 'Current Limitations: Uses polling for updates instead of real-time streams.'
- The minimum amount to withdraw is 10,000 sats.
- Network fees are required for the Bitcoin transaction.
- Unilateral exits are expensive - way more than cooperative exits
- Test on regtest first - don’t learn on mainnet.
- Static deposit addresses are reusable for multiple deposits
- The minimum amount to withdraw is 10,000 sats
- Test on regtest first - don’t learn on mainnet
errors:
- Network congestion delays
- Address format issues
- Insufficient balance for fees
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.spark.money
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
