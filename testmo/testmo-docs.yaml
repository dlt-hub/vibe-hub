resources:
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: result
    params:
      page: 1
      per_page: 100
      sort: projects:created_at
      order: desc
- name: test_cases
  endpoint:
    path: /api/v1/test_cases
    method: GET
    data_selector: records
    params: {}
- name: tests
  endpoint:
    path: /api/v1/tests
    method: GET
    data_selector: data
    params: {}
- name: test_run
  endpoint:
    path: /automation/run/submit
    method: POST
    data_selector: results
    params:
      instance: https://<your-name>.testmo.net
      project-id: '1'
      name: Test run
      source: frontend
      results: results/*.xml
- name: test_run
  endpoint:
    path: /automation/run/submit
    method: POST
    data_selector: results
    params:
      instance: https://<your-name>.testmo.net
      project-id: '1'
      name: New test run
      source: backend-unit
      results: reports/*.xml
- name: automation_jobs
  endpoint:
    path: /api/v1/jobs
    method: GET
    data_selector: jobs
- name: test_runs
  endpoint:
    path: /api/v1/runs
    method: GET
    data_selector: runs
- name: automation_run_create
  endpoint:
    path: /automation/run/create
    method: POST
- name: automation_run_complete
  endpoint:
    path: /automation/run/complete
    method: POST
- name: automation_run_submit_thread
  endpoint:
    path: /automation/run/submit-thread
    method: POST
- name: automation_jobs
  endpoint:
    path: /automation/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: automation_run
  endpoint:
    path: /automation/run/submit
    method: POST
    data_selector: results
- name: test_run
  endpoint:
    path: /automation/run/submit
    method: POST
    data_selector: results
    params:
      instance: https://<your-name>.testmo.net
      project-id: '1'
      name: New test run
      source: backend-unit
      results: reports/*.xml
- name: milestone_summary
  endpoint:
    path: /milestone/summary
    method: GET
    data_selector: summary
    params: {}
- name: test_runs
  endpoint:
    path: /test/runs
    method: GET
    data_selector: runs
    params: {}
- name: sessions
  endpoint:
    path: /sessions
    method: GET
    data_selector: sessions
    params: {}
- name: automation_runs
  endpoint:
    path: /automation/runs
    method: GET
    data_selector: automation_runs
    params: {}
- name: automation_metrics_report
  endpoint:
    path: /automation/metrics/report
    method: GET
    data_selector: results
- name: automation_run_create
  endpoint:
    path: /automation/run/create
    method: POST
- name: automation_run_complete
  endpoint:
    path: /automation/run/complete
    method: POST
- name: automation_run_submit_thread
  endpoint:
    path: /automation/run/submit-thread
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: milestone_summary
  endpoint:
    path: /milestones/summary
    method: GET
    data_selector: results
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: permissions
  endpoint:
    path: /api/permissions
    method: GET
    data_selector: permissions
- name: milestone_summary
  endpoint:
    path: /services/data/vXX.X/sobjects/MilestoneSummary
    method: GET
    data_selector: records
    params: {}
- name: project
  endpoint:
    path: /services/data/vXX.X/sobjects/Project
    method: GET
    data_selector: records
    params: {}
- name: team_testing_workload
  endpoint:
    path: /api/v1/team/testing/workload
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/v1/user
    method: GET
- name: automation_runs
  endpoint:
    path: /automation/runs
    method: GET
- name: projects_automation_runs
  endpoint:
    path: /projects/{project_id}/automation/runs
    method: GET
- name: automation_runs
  endpoint:
    path: /projects/{project_id}/automation/runs
    method: GET
    data_selector: result
    params:
      page: 1
      per_page: 100
      sort: automation_runs:created_at
      order: desc
- name: price_list
  endpoint:
    path: /pricing
    method: GET
    data_selector: plans
    params: {}
- name: automation_run
  endpoint:
    path: /api/v1/automation/runs/{automation_run_id}
    method: GET
    data_selector: result
    params: {}
- name: create_automation_run
  endpoint:
    path: /api/v1/projects/{project_id}/automation/runs
    method: POST
    data_selector: ''
    params: {}
- name: append_automation_run
  endpoint:
    path: /automation/runs/{automation_run_id}/append
    method: POST
- name: complete_automation_run
  endpoint:
    path: /automation/runs/{automation_run_id}/complete
    method: POST
- name: threads_automation_run
  endpoint:
    path: /automation/runs/{automation_run_id}/threads
    method: POST
- name: append_automation_run_thread
  endpoint:
    path: /automation/runs/threads/{automation_run_thread_id}/append
    method: POST
    data_selector: records
    params: {}
- name: complete_automation_run_thread
  endpoint:
    path: /automation/runs/threads/{automation_run_thread_id}/complete
    method: POST
    data_selector: records
    params: {}
- name: test_cases
  endpoint:
    path: /api/test_cases
    method: GET
    data_selector: data
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
- name: automation_sources
  endpoint:
    path: /projects/{project_id}/automation/sources
    method: GET
    data_selector: result
    params:
      page: '1'
      per_page: '100'
      sort: automation_sources:created_at
      order: desc
      is_retired: 'false'
- name: automation_source
  endpoint:
    path: /automation/sources/{automation_source_id}
    method: GET
    data_selector: result
    params:
      expands: users
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: result
    params:
      page: '1'
      per_page: '100'
- name: group_details
  endpoint:
    path: /groups/{group_id}
    method: GET
    data_selector: result
    params: {}
- name: milestones
  endpoint:
    path: /projects/{project_id}/milestones
    method: GET
- name: milestone
  endpoint:
    path: /milestones/{milestone_id}
    method: GET
- name: automation_runs
  endpoint:
    path: /automation/runs
    method: GET
- name: automation_runs
  endpoint:
    path: /projects/{project_id}/automation/runs
    method: GET
    data_selector: result
    params:
      page: '1'
      per_page: '100'
      sort: automation_runs:created_at
      order: desc
- name: milestones
  endpoint:
    path: /projects/{project_id}/milestones
    method: GET
    data_selector: result
    params:
      page: '1'
      per_page: '100'
      sort: milestones:created_at
      order: desc
      is_completed: '0'
- name: milestone
  endpoint:
    path: /milestones/{milestone_id}
    method: GET
    data_selector: result
    params: {}
- name: automation_run
  endpoint:
    path: /automation/runs/{automation_run_id}
    method: GET
    data_selector: result
    params:
      expands: automation_sources,configs,milestones,statuses,users
- name: create_automation_run
  endpoint:
    path: /projects/{project_id}/automation/runs
    method: POST
    data_selector: ''
    params: {}
- name: roles
  endpoint:
    path: /roles
    method: GET
    data_selector: result
    params:
      page: '1'
      per_page: '100'
- name: role_by_id
  endpoint:
    path: /roles/{role_id}
    method: GET
    data_selector: result
    params: {}
- name: runs
  endpoint:
    path: /projects/{project_id}/runs
    method: GET
- name: run
  endpoint:
    path: /runs/{run_id}
    method: GET
- name: automation_run_append
  endpoint:
    path: /automation/runs/{automation_run_id}/append
    method: POST
- name: automation_run_complete
  endpoint:
    path: /automation/runs/{automation_run_id}/complete
    method: POST
- name: automation_run_threads
  endpoint:
    path: /automation/runs/{automation_run_id}/threads
    method: POST
- name: runs
  endpoint:
    path: /projects/{project_id}/runs
    method: GET
    data_selector: result
    params:
      page: '1'
      per_page: '100'
      sort: runs:created_at
      order: desc
- name: append_test_artifacts
  endpoint:
    path: /automation/runs/threads/{automation_run_thread_id}/append
    method: POST
    data_selector: ''
    params: {}
- name: complete_automation_run_thread
  endpoint:
    path: /automation/runs/threads/{automation_run_thread_id}/complete
    method: POST
    data_selector: ''
    params: {}
- name: runs
  endpoint:
    path: /api/v1/runs/{run_id}
    method: GET
    data_selector: result
    params:
      expands: configs,issues,milestones,states,statuses,users
- name: sessions
  endpoint:
    path: /sessions/{session_id}
    method: GET
- name: project_sessions
  endpoint:
    path: /projects/{project_id}/sessions
    method: GET
- name: automation_sources
  endpoint:
    path: /projects/{project_id}/automation/sources
    method: GET
    data_selector: result
    params:
      page: '1'
      per_page: '100'
      sort: automation_sources:created_at
      order: desc
      is_retired: 'false'
- name: automation_source
  endpoint:
    path: /automation/sources/{automation_source_id}
    method: GET
    data_selector: result
    params: {}
- name: sessions
  endpoint:
    path: /projects/{project_id}/sessions
    method: GET
    params:
      page: integer
      per_page: integer
      sort: string
      order: string
      assignee_id: string
      closed_after: string
      closed_before: string
      config_id: string
      created_after: string
      created_before: string
      created_by: string
      is_closed: boolean
      milestone_id: string
      state_id: string
      tags: string
      template_id: string
      expands: string
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: result
    params:
      page: '1'
      per_page: 100
- name: group
  endpoint:
    path: /groups/{group_id}
    method: GET
    data_selector: result
    params: {}
- name: milestones
  endpoint:
    path: /milestones/{milestone_id}
    method: GET
- name: project_milestones
  endpoint:
    path: /projects/{project_id}/milestones
    method: GET
- name: sessions
  endpoint:
    path: /api/v1/sessions/{session_id}
    method: GET
    data_selector: result
    params:
      expands: configs,field_values,issues,milestones,states,statuses,templates,users
- name: milestones
  endpoint:
    path: /projects/{project_id}/milestones
    method: GET
    data_selector: result
    params:
      page: '1'
      per_page: '100'
      sort: milestones:created_at
      order: desc
- name: milestone_detail
  endpoint:
    path: /milestones/{milestone_id}
    method: GET
    data_selector: result
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: result
    params:
      page: 1
      per_page: 100
- name: project_users
  endpoint:
    path: /api/v1/projects/{project_id}/users
    method: GET
    data_selector: result
    params:
      page: 1
      per_page: 100
- name: current_user
  endpoint:
    path: /api/v1/user
    method: GET
    data_selector: result
    params: {}
- name: user
  endpoint:
    path: /users/{user_id}
    method: GET
    data_selector: id
    params:
      expands: string
- name: roles
  endpoint:
    path: /api/v1/roles
    method: GET
    data_selector: result
    params:
      page: '1'
      per_page: '100'
- name: role_by_id
  endpoint:
    path: /api/v1/roles/{role_id}
    method: GET
    data_selector: result
    params: {}
- name: results
  endpoint:
    path: /runs/{run_id}/results
    method: GET
    params:
      page: '1'
      per_page: '100'
      sort: run_results:created_at
      order: desc
- name: runs
  endpoint:
    path: /projects/{project_id}/runs
    method: GET
- name: run
  endpoint:
    path: /runs/{run_id}
    method: GET
- name: runs
  endpoint:
    path: /projects/{project_id}/runs
    method: GET
    params:
      page: '1'
      per_page: '100'
      sort: runs:created_at
      order: desc
- name: runs
  endpoint:
    path: /api/v1/runs/{run_id}
    method: GET
    data_selector: result
    params:
      expands: configs,issues,milestones,states,statuses,users
- name: automation_runs
  endpoint:
    path: /automation/runs
    method: GET
    data_selector: records
    params: {}
- name: projects_automation_runs
  endpoint:
    path: /projects/{project_id}/automation/runs
    method: GET
    data_selector: records
    params: {}
- name: sessions
  endpoint:
    path: /projects/{project_id}/sessions
    method: GET
- name: session
  endpoint:
    path: /sessions/{session_id}
    method: GET
- name: automation_runs
  endpoint:
    path: /projects/{project_id}/automation/runs
    method: GET
    params:
      page: 1
      per_page: 100
      sort: automation_runs:created_at
      order: desc
- name: sessions
  endpoint:
    path: /projects/{project_id}/sessions
    method: GET
    data_selector: result
    params:
      page: '1'
      per_page: '100'
      sort: sessions:created_at
      order: desc
- name: automation_run
  endpoint:
    path: /api/v1/automation/runs/{automation_run_id}
    method: GET
    data_selector: result
    params: {}
- name: create_automation_run
  endpoint:
    path: /api/v1/projects/{project_id}/automation/runs
    method: POST
    data_selector: ''
    params: {}
- name: sessions
  endpoint:
    path: /api/v1/sessions/{session_id}
    method: GET
    data_selector: result
    params:
      expands: configs,issues,users
- name: append_automation_run
  endpoint:
    path: /automation/runs/{automation_run_id}/append
    method: POST
    data_selector: artifacts, fields, links
    params: {}
- name: complete_automation_run
  endpoint:
    path: /automation/runs/{automation_run_id}/complete
    method: POST
    data_selector: measure_elapsed
    params: {}
- name: create_thread
  endpoint:
    path: /automation/runs/{automation_run_id}/threads
    method: POST
    data_selector: elapsed_observed, artifacts, fields
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: result
    params:
      page: '1'
      per_page: '100'
- name: project_users
  endpoint:
    path: /api/v1/projects/{project_id}/users
    method: GET
    data_selector: result
    params:
      page: '1'
      per_page: '100'
- name: current_user
  endpoint:
    path: /api/v1/user
    method: GET
    data_selector: id
- name: user
  endpoint:
    path: /users/{user_id}
    method: GET
    data_selector: id
    params:
      expands: groups,roles
- name: append_test_artifacts
  endpoint:
    path: /automation/runs/threads/{automation_run_thread_id}/append
    method: POST
    data_selector: artifacts
    params: {}
- name: complete_automation_run
  endpoint:
    path: /automation/runs/threads/{automation_run_thread_id}/complete
    method: POST
    data_selector: elapsed_observed
    params: {}
- name: results
  endpoint:
    path: /runs/{run_id}/results
    method: GET
    params:
      page: '1'
      per_page: '100'
      sort: run_results:created_at
      order: desc
- name: automation_runs
  endpoint:
    path: /projects/{project_id}/automation/runs
    method: GET
- name: automation_run
  endpoint:
    path: /automation/runs/{automation_run_id}
    method: GET
- name: automation_runs
  endpoint:
    path: /projects/{project_id}/automation/runs
    method: GET
    data_selector: result
    params:
      page: 1
      per_page: 100
      sort: automation_runs:created_at
      order: desc
- name: automation_run
  endpoint:
    path: /automation/runs/{automation_run_id}
    method: GET
    data_selector: result
    params:
      expands: automation_sources,configs,milestones,statuses,users
- name: create_automation_run
  endpoint:
    path: /projects/{project_id}/automation/runs
    method: POST
    data_selector: ''
    params: {}
- name: automation_run_append
  endpoint:
    path: /automation/runs/{automation_run_id}/append
    method: POST
    data_selector: artifacts
- name: automation_run_complete
  endpoint:
    path: /automation/runs/{automation_run_id}/complete
    method: POST
    data_selector: measure_elapsed
- name: automation_run_threads
  endpoint:
    path: /automation/runs/{automation_run_id}/threads
    method: POST
    data_selector: elapsed_observed
- name: append_test_artifacts
  endpoint:
    path: /automation/runs/threads/{automation_run_thread_id}/append
    method: POST
    data_selector: artifacts
    params: {}
- name: complete_automation_run_thread
  endpoint:
    path: /automation/runs/threads/{automation_run_thread_id}/complete
    method: POST
    data_selector: elapsed_observed
    params: {}
notes:
- Testmo's REST API was designed to access and automate various aspects of Testmo's
  data model.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- 'Testmo is the #1 unified testing tool, making it easy to work with all your testing
  activities in one powerful platform.'
- Requires setup of connected app in Testmo
- Be aware of API usage limits
- Easily integrate with your existing tools and workflow
- Testmo supports integration with various issue tracking tools and CI/CD tools.
- Generate an API key in Testmo from your profile page.
- It's important not to mix the same source name for different tests/suites.
- When implementing Testmo in your CI/CD pipeline, it is important not to store the
  API key in your code repository.
- Automation Launching is a Testmo Enterprise feature.
- Both GitHub and GitLab require secured integrations as automation launching targets.
- API key is used to authenticate with Testmo to send the results.
- You need an API key for your Testmo user (or for a separate API user) to authenticate
  and submit your test results.
- Make sure to set the API authentication token as TESTMO_TOKEN environment variable.
- Uses OAuth2 with refresh token — requires setup of connected app in Testmo
- Important security considerations when working with the API and CLI
- Do not store the API key in your code repository
- Reports can be generated for one project at a time, and cannot retrieve data from
  multiple projects in the same report.
- Milestone, Source & Time frame settings on the report override Run filter settings
  if there’s a conflict.
- The workload report only provides metrics for tests & sessions assigned to testers.
  Make sure your tests & sessions are assigned before using the report, for the best
  results.
- For best results, make sure tests & sessions include estimates when they’re created
  (or updated), and ensure you record elapsed time when executing them!
- Some objects may return nulls in deeply nested fields
- Some objects like Contact may return nulls in deeply nested fields
- Linking test runs, sessions and automation runs to milestones is essential for reporting.
- Testmo supports various user types including Regular user, Project admin, Site admin,
  and API user.
- Custom fields allow you to customize Testmo for your projects and your workflow.
- Enabling two-factor authentication for users
- Defining login rules based on user types and user groups
- Reports can only retrieve data from a single project at a time
- Data exports can be scheduled once per day.
- Data exports cannot be imported/restored into a Testmo instance.
- The automation metrics report provides users with a high level overview of a project’s
  test automation executions and results.
- If a milestone has children and you wish to include automation runs linked to them
  in the report, you should select those also.
- API users are useful to add extra host or service accounts for integrations.
- You can easily change the subscription plan at any time and also cancel the subscription
  at any time to the end of a month.
- We will continue to offer alternative pricing in EUR for customers who prefer this.
- The workload report only provides metrics for tests & sessions assigned to testers.
- Make sure your tests & sessions are assigned before using the report.
- If you cannot see a new field you have added, you have likely not assigned the field
  to your project(s) and/or template(s).
- Use the Testmo CLI for easy API access and automation integrations
- Enabling two-factor authentication for users is available for Enterprise plan customers
- Auto-provisioning user accounts can be configured when using external login methods
- Testmo uses simple Bearer tokens to authenticate against the API.
- It is not possible to import or restore an existing data export into a Testmo instance.
- API users are not counted for the subscription.
- Monthly subscription payments can be managed from the Billing Portal.
- This method uses pagination.
- Subscription fee is calculated based on the number of users marked as activated
  during a month.
- Volume-based discounts are available for tiers above 200 users.
- Some endpoints may have rate limits
- You can learn more about authenticating with the API and generating API keys in
  Testmo's user interface.
- Pagination is supported for automation sources.
- API methods that support pagination follow the same conventions and always include
  the following attributes in the response.
- Requires site admin access.
- This method uses pagination so you might need to request additional pages to retrieve
  all milestones.
- 204 No Content response for successful requests.
- Pagination supported with page and per_page parameters.
- Returns all groups. Requires site admin access.
- This method uses pagination so you might need to request additional pages to retrieve
  all sessions.
- You can use these methods to retrieve automation runs and threads for a project,
  create new runs and threads, submit test results (including custom fields, artifacts
  & links) and finally mark runs and threads as completed.
errors:
- '400 Bad Request: Check the parameters being sent'
- '401 Unauthorized: Check your credentials'
- '404 Not Found: Resource not found'
- '422 Unprocessable Entity: Validation error on the request'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Verify your authentication credentials'
- '404 Not Found: Ensure the endpoint exists'
- '401 Unauthorized: Recheck OAuth credentials or token expiration'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key validity'
- '401 Unauthorized: Recheck API token or permissions'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Check your credentials and permissions.'
- If the field is not assigned to your project(s), the field will not be visible.
- If the field is not selected for your template(s), the field will not be visible.
- 'Exporting file attachments: Due to size limitations and scalability considerations,
  we do not currently include attachment files and uploads in data exports.'
- '401 Unauthorized: Invalid or missing Testmo API token'
- '403 Forbidden: Missing or insufficient permissions'
- '404 Not found: Unknown or deleted objects in API requests'
- '405 Method not allowed: Using GET instead of POST or vice versa'
- '422 Invalid data: Invalid parameters or data in API requests'
- '429 Too many requests: Rate limit reached'
- '400 Bad Request: Invalid parameters'
- '401 Unauthorized: Authentication required'
- '403 Forbidden: Access denied'
- '422 Unprocessable Entity: Validation errors'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Not Found'
- '422: Unprocessable Entity'
- 204 No Content
- 400 Bad Request
- 401 Unauthorized
- 403 Forbidden
- 404 Not Found
- 422 Unprocessable Entity
- '404 Not Found: Verify the endpoint path'
- '200'
- '400'
- '401'
- '403'
- '422'
- '400 Bad Request: Check request parameters'
- '404 Not Found: Resource does not exist'
- '400 Bad Request: Check the request body for required fields'
- '401 Unauthorized: Recheck authentication credentials'
- '403 Forbidden: Verify user permissions for the project'
- '404 Not Found: Confirm resource existence'
- '422 Unprocessable Entity: Validate request format and data'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Site admin access required.'
- '403 Forbidden: Insufficient permissions.'
- '404 Not Found: Role not found.'
- '204: No Content'
- 200 OK
- '401 Unauthorized: Invalid API key or token'
- '404'
- '401 Unauthorized: Authentication is required'
- '422 Unprocessable Entity: Validation error'
- '200: OK'
- '200: Success'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Verify authentication credentials'
- '403 Forbidden: Check permissions for the requested resource'
- '404 Not Found: Ensure the resource exists'
- '422 Unprocessable Entity: Validate the request payload'
- '403 Forbidden: You do not have permission to access this resource'
- '422 Unprocessable Entity: The request was well-formed but unable to be followed
  due to semantic errors'
- '200 OK: Successful request'
- '400: Bad request'
- '422: Unprocessable entity'
- '403 Forbidden: Ensure permissions are granted'
- '422 Unprocessable Entity: Validate request data'
- '401 Unauthorized: Check authentication'
- '403 Forbidden: Check permissions'
- '404 Not Found: Check resource ID'
- '422 Unprocessable Entity: Validate request body'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://docs.testmo.com/api
source_metadata: null
