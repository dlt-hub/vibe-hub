resources:
- name: Greenlet
  endpoint:
    path: /gevent/Greenlet
    method: GET
    data_selector: records
- name: Queue
  endpoint:
    path: /gevent/queue
    method: GET
- name: SimpleQueue
  endpoint:
    path: /gevent/queue/SimpleQueue
    method: GET
- name: JoinableQueue
  endpoint:
    path: /gevent/queue/JoinableQueue
    method: GET
- name: LifoQueue
  endpoint:
    path: /gevent/queue/LifoQueue
    method: GET
- name: PriorityQueue
  endpoint:
    path: /gevent/queue/PriorityQueue
    method: GET
- name: Channel
  endpoint:
    path: /gevent/queue/Channel
    method: GET
- name: Channel
  endpoint:
    path: /gevent/queue/Channel
    method: GET
    data_selector: records
- name: LifoQueue
  endpoint:
    path: /gevent/queue/LifoQueue
    method: GET
    data_selector: records
- name: PriorityQueue
  endpoint:
    path: /gevent/queue/PriorityQueue
    method: GET
    data_selector: records
- name: Queue
  endpoint:
    path: /gevent/queue/Queue
    method: GET
    data_selector: records
- name: SimpleQueue
  endpoint:
    path: /gevent/queue/SimpleQueue
    method: GET
    data_selector: records
- name: JoinableQueue
  endpoint:
    path: /gevent/queue/JoinableQueue
    method: GET
    data_selector: examples
    params: {}
- name: Queue
  endpoint:
    path: /gevent/queue/Queue
    method: GET
    data_selector: examples
    params: {}
- name: SimpleQueue
  endpoint:
    path: /gevent/queue/SimpleQueue
    method: GET
    data_selector: examples
    params: {}
- name: JoinableQueue
  endpoint:
    path: /gevent/queue/JoinableQueue
    method: GET
    data_selector: examples
    params: {}
- name: Queue
  endpoint:
    path: /gevent/queue/Queue
    method: GET
    data_selector: examples
    params: {}
- name: SimpleQueue
  endpoint:
    path: /gevent/queue/SimpleQueue
    method: GET
    data_selector: examples
    params: {}
- name: local
  endpoint:
    path: /gevent/local
    method: GET
    data_selector: greenlet-local objects
    params: {}
- name: BoundedSemaphore
  endpoint:
    path: /gevent.lock/BoundedSemaphore
    method: GET
- name: DummySemaphore
  endpoint:
    path: /gevent.lock/DummySemaphore
    method: GET
- name: RLock
  endpoint:
    path: /gevent.lock/RLock
    method: GET
- name: Semaphore
  endpoint:
    path: /gevent.lock/Semaphore
    method: GET
- name: BoundedSemaphore
  endpoint:
    path: /gevent/lock/BoundedSemaphore
    method: GET
    data_selector: class
    params: {}
- name: DummySemaphore
  endpoint:
    path: /gevent/lock/DummySemaphore
    method: GET
    data_selector: class
    params: {}
- name: RLock
  endpoint:
    path: /gevent/lock/RLock
    method: GET
    data_selector: class
    params: {}
- name: Semaphore
  endpoint:
    path: /gevent/lock/Semaphore
    method: GET
    data_selector: class
    params: {}
- name: BackdoorServer
  endpoint:
    path: /gevent/backdoor
    method: GET
    data_selector: BackdoorServer
    params: {}
- name: BackdoorServer
  endpoint:
    path: /gevent/backdoor
    method: GET
    data_selector: BackdoorServer
    params: {}
- name: BaseServer
  endpoint:
    path: /gevent/baseserver
    method: GET
    data_selector: BaseServer
    params: {}
- name: BaseServer
  endpoint:
    path: /gevent/baseserver
    method: GET
    data_selector: BaseServer
- name: Group
  endpoint:
    path: /gevent/pool/Group
    method: GET
    data_selector: records
    params: {}
- name: Pool
  endpoint:
    path: /gevent/pool/Pool
    method: GET
    data_selector: records
    params: {}
- name: PostgresConnectionPool
  endpoint:
    path: /examples/psycopg2_pool.py
    method: GET
- name: web_proxy
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: index
  endpoint:
    path: /
    method: GET
    data_selector: Hello, world!
    params: {}
- name: long_polling
  endpoint:
    path: /long
    method: GET
    data_selector: Hello, 10 seconds later
    params: {}
- name: wsgi_server_example
  endpoint:
    path: /example/wsgiserver.py
    method: GET
    data_selector: application
    params: {}
notes:
- 'Caution: This currently means that it can be imported. But it cannot yet be used.
  gevent has a pinned dependency on dnspython < 2 for now.'
- Make `gevent.lock.RLock.acquire` accept the *timeout* parameter.
- Fix an `AttributeError` when wrapping gevent’s `FileObject` around an opened text
  stream.
- 'Caution: There may be breaking changes here for applications that relied on the
  old behaviour.'
- The file objects now consistently support text and binary modes.
- Requires Python 3.4.3 or above due to an undocumented change in that version.
- Formatting run info no longer includes gevent.local.local objects that have no value
  in the greenlet.
- Fixed negative length in pywsgi’s Input read functions for non chunked body.
- Upgrade libuv from 1.22.0 to 1.23.2.
- Fix opening files in text mode in CPython 2 on Windows by patching libuv.
- Cython 0.28.2 is now used to build gevent from a source checkout.
- The bundled libuv is now 1.19.2, up from 1.18.0.
- The gethost* functions take different argument names under CPython and PyPy. gevent
  follows the CPython convention.
- Support for Python 2.6 has been removed.
- The previously-singleton exception objects FileObjectClosed and cancel_wait_ex were
  converted to classes.
- 'Python 2: `sendall` on a non-blocking socket could spuriously fail with a timeout.'
- If `sys.stderr` has been monkey-patched (not recommended), exceptions that the hub
  reports aren’t lost and can still be caught.
- 'Python 3: A monkey-patched [`threading.RLock`] now properly blocks (or deadlocks)
  in `acquire` if the default value for timeout of -1 is used.'
- 'pywsgi: Pass copy of error list instead of direct reference. Thanks to Jonathan
  Kamens, Matt Iversen.'
- Ignore the autogenerated doc/gevent.*.rst files. Patch by Matthias Urlichs.
- Fix cythonpp.py on Windows. Patch by Jeryn Mathew.
- Remove gevent.run (use gevent.wait).
- Simplified gevent.socket’s implementation and fixed SSL bug reported on eventletdev
- Added boolean parameter wait to kill() and killall() functions
- Improved compatibility with Python 2.6 and Python 2.4
- Even some apparently cooperative functions, like gevent.sleep(), can temporarily
  take priority over waiting I/O operations in some circumstances.
- Use care when killing greenlets, especially arbitrary greenlets spawned by a library
  or otherwise executing code you are not familiar with.
- Greenlet objects now function as context managers. Exiting the with suite ensures
  that the greenlet has completed by joining the greenlet (blocking, with no timeout).
- This module is considered extremely experimental on PyPy, and due to its implementation
  in cython, it may be slower. It may also lead to interpreter crashes.
- This resolver is not cooperative.
- This resolver has the lowest overhead of any resolver.
- 'Changed in version 1.5.0: This version of gevent typically embeds c-ares 1.15.0
  or newer. In that version of c-ares, domains ending in .onion are never resolved
  or even sent to the DNS server.'
- 'Changed in version 20.5.0: getaddrinfo is now implemented using the native c-ares
  function from c-ares 1.16 or newer.'
- 'Changed in version 20.5.0: Now herror and gaierror are raised more consistently
  with the standard library resolver, and have more consistent errno values.'
- Handling of localhost and broadcast names is now more consistent.
- 'Changed in version 22.10.1: Now has a __del__ method that warns if the object is
  destroyed without being properly closed.'
- gevent applications are often long-running server processes.
- Out of the box, that thread has support to watch two things.
- This resolver has the lowest overhead of any resolver and typically approaches the
  speed of the unmodified socket functions.
- This can be useful during debugging, or it may be a good choice if your operating
  system provides a good caching resolver.
- Insight into the monkey-patching process can be obtained by observing the events
  gevent.monkey emits.
- On Windows with the libev event loop, gevent is limited to 1024 open sockets.
- The keyword argument *event* is ignored in wait_write and wait_readwrite.
- Must call close on a Timeout object whether or not the code finishes executing before
  the timeout elapses.
- A seconds value less than 0.0 is poorly defined.
- These use the underlying event loop io watchers, which means that they share the
  same implementation limits.
- Uses cooperative SSL socket wrappers
- 'Warning: All APIs should be imported from gevent.ssl, and not from their implementation
  modules.'
- As the base class indicates, it is critically important to unregister file objects
  before closing them. (Or close the selector they are registered with before closing
  them.) Failure to do so may crash the process or have other unintended results.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- This object is for communicating among greenlets within the same thread only!
- The exact order and timing in which waiting greenlets are awakened is not determined.
- This object is for communicating among greenlets within the same thread only. Do
  not try to use it to communicate across threads.
- 'Changed in version 1.0: Queue(0) now means queue of infinite size, not a channel.'
- 'Changed in version 25.4.1: Queue was renamed to SimpleQueue.'
- 'Deprecated since version 1.3b1: The *args* and **kwargs* arguments are deprecated.'
- 'Changed in version 1.5a3: The *args* and *kwargs* arguments are now completely
  ignored.'
- 'Changed in version 20.5.1: Attempt to ensure that Python stack frames and greenlets
  referenced by this hub are cleaned up.'
- 'Changed in version 23.7.0: The long-deprecated `args` and `kwargs` parameters are
  no longer accepted.'
- This is an internal, low-level interface. It may change between minor versions of
  gevent.
- This backdoor provides no authentication and makes no attempt to limit what remote
  users can do.
- This module was added to Python 3.7.
- The gevent version is available on all supported versions of Python.
- On Python 3.7 and above, this module is no longer monkey-patched in place of the
  standard library version.
- This module is only greenlet aware, not asyncio task aware, so its use is not recommended
  on Python 3.7 and above.
- 'Changed in version 23.7.0: Now uses importlib.metadata instead of pkg_resources
  to locate entry points.'
- 'Changed in version 24.11.1: Now actually implements the promised interface.'
- You may change the default value for FileObject using the GEVENT_FILE environment
  variable. Set it to posix, thread, or block to choose from FileObjectPosix, FileObjectThread
  and FileObjectBlock, respectively.
- The environment variable must be set at the time this module is first imported.
- Patching should be done as early as possible in the lifecycle of the program.
- Patching should be done on the main thread and while the program is single-threaded.
- A file-like object that operates on non-blocking files but provides a synchronous,
  cooperative interface.
- This object is only effective wrapping files that can be used meaningfully with
  select.select() such as sockets and pipes.
- If you’ll be working with regular files and doing IO in large chunks, you may consider
  using FileObjectThread or tp_read() and tp_write() to bypass this concern.
- Added support for plugins and began emitting will/did patch events.
- Monkey-patching 'thread' and using multiprocessing.Queue or concurrent.futures.ProcessPoolExecutor
  will hang the process.
- Some frameworks, such as gunicorn, handle monkey-patching for you.
- 'Changed in version 1.3b1: Added support for plugins and began emitting will/did
  patch events.'
- 'Deprecated since version 23.7.0: Does nothing on any supported platform.'
- This server is intended primarily for development and testing.
- The code has not been security audited.
- The object to which error logs will be written must never be None.
- The object to which request logs will be written must never be None.
- On POSIX platforms, this module is not usable from native threads other than the
  main thread; attempting to do so will raise a TypeError.
- The interface of this module is intended to match that of the standard library subprocess
  module.
- This module is a helper for gevent.monkey and is not intended to be used directly.
- For spawning greenlets in your applications, prefer higher level constructs like
  gevent.Greenlet class or gevent.spawn().
- A positive consequence is that import gevent.threading, threading; threading.current_thread()
  will no longer return a DummyThread before monkey-patching.
- The suggested way to use gevent and threadpools is to have a single gevent hub and
  its one threadpool.
- Uses HTTPS, so this demonstrates that SSL works.
- Application serves as a web proxy to retrieve other websites
- Uses gevent's WSGIServer for handling requests asynchronously
- Developing gevent requires being able to install gevent from source.
- You can force installation of gevent from source with `pip install --no-binary gevent
  gevent`.
- Some Linux distributions are now mounting their temporary directories with the `noexec`
  option.
- The test runner supports options for coverage recording and parallel execution.
- Use of multiprocessing.Queue when thread has been monkey-patched will lead to a
  hang due to Queue’s internal use of a blocking pipe and threads.
- It is not possible to use gevent.subprocess from native threads.
- Gevent 1.0 supports Python 2.5 - 2.7.
- The version of greenlet required is 0.3.2.
- The source distribution now includes the dependencies (libev and c-ares) and has
  no dependencies other than greenlet.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'TypeError: Argument names for fromfd and socketpair on Python 2 are incorrect.'
- 'gaierror(4): An error raised where the system implementation would raise herror(1)
  or vice versa, with different error numbers.'
- 'CertificateError: A certificate could not be verified.'
- 'SSLEOFError: SSL/TLS connection terminated abruptly.'
- 'SSLError: An error occurred in the SSL implementation.'
- 'LoopExit: If the loop finishes running.'
- 'KeyboardInterrupt: Propagated out to the main greenlet.'
- 'CalledProcessError: Raised when run() is called with check=True and the process
  returns a non-zero exit status.'
- 'TimeoutExpired: This exception is raised when the timeout expires while waiting
  for a child process.'
- 'RuntimeError: Raised in case of errors related to thread operations.'
- 'configure: error: Can not continue. Fix errors mentioned immediately above this
  line.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://gevent.api.gevent.io
source_metadata: null
