resources:
- name: event_data
  endpoint:
    path: /events
    method: POST
    data_selector: main
- name: user_data
  endpoint:
    path: /people
    method: POST
    data_selector: main
- name: count_events
  endpoint:
    path: /countEvents
    method: GET
    data_selector: result
- name: count_people_by_age
  endpoint:
    path: /countPeopleByAge
    method: GET
    data_selector: result
- name: sum_notification_hits
  endpoint:
    path: /sumNotificationHits
    method: GET
    data_selector: result
- name: numeric_summary_page_load_times
  endpoint:
    path: /numericSummaryPageLoadTimes
    method: GET
    data_selector: result
- name: average_page_load_times
  endpoint:
    path: /averagePageLoadTimes
    method: GET
    data_selector: result
- name: applyGroupLimits
  endpoint:
    path: /api/mixpanel.reducer.applyGroupLimits
    method: POST
    data_selector: result
- name: object_merge
  endpoint:
    path: /api/mixpanel.reducer.object_merge
    method: POST
    data_selector: result
- name: any
  endpoint:
    path: /api/mixpanel.reducer.any
    method: POST
    data_selector: result
- name: null
  endpoint:
    path: /api/mixpanel.reducer.null
    method: POST
    data_selector: result
- name: numeric_bucket
  endpoint:
    method: function
    data_selector: value
- name: to_number
  endpoint:
    method: function
    data_selector: count
- name: activity_feed
  endpoint:
    path: /api/query/stream/query
    method: GET
- name: activity_stream_query
  endpoint:
    path: /query/stream/query
    method: GET
- name: add_service_accounts_to_projects
  endpoint:
    path: /api/app/organizations//service-accounts/add-to-project
    method: POST
- name: cancel_deletion
  endpoint:
    path: /api/app/data-deletions/v3.0/{tracking_id}
    method: DELETE
- name: warehouse_pipeline_cancel
  endpoint:
    path: /api/2.0/nessie/pipeline/cancel
    method: POST
- name: check_status_of_deletion
  endpoint:
    path: /api/app/data-deletions/v3.0/{tracking_id}
    method: GET
- name: check_status_of_retrieval
  endpoint:
    path: /data-retrievals/v3.0/{tracking_id}
    method: GET
- name: cohorts_list
  endpoint:
    path: /query/cohorts/list
    method: POST
    data_selector: .
- name: cohort_users
  endpoint:
    path: /engage
    method: GET
    params:
      filter_by_cohort: true
- name: cohorts
  endpoint:
    path: /query/cohorts/list
    method: GET
    data_selector: ''
- name: users_in_cohort
  endpoint:
    path: /engage
    method: GET
    data_selector: ''
    params:
      filter_by_cohort: ''
- name: user_deletion_task
  endpoint:
    path: /v3.0
    method: POST
- name: data_retrieval
  endpoint:
    path: /data-retrievals/v3.0
    method: POST
- name: create_annotations
  endpoint:
    path: /api/app/projects/{projectId}/annotations
    method: POST
- name: annotation
  endpoint:
    path: /annotations
    method: POST
- name: data_deletion
  endpoint:
    path: /v3.0
    method: POST
- name: create_identity
  endpoint:
    path: /track#create-identity
    method: POST
    data_selector: data
    params:
      event: $identify
      properties.$identified_id: YOUR_CHOSEN_USER_ID
      properties.$anon_id: ORIGINAL_ANON_ID
      properties.token: YOUR_PROJECT_TOKEN
- name: import_data
  endpoint:
    path: /import
    method: POST
- name: pipeline_create
  endpoint:
    path: /api/2.0/nessie/pipeline/create
    method: POST
- name: create_retrieval
  endpoint:
    path: /data-retrievals/v3.0
    method: POST
- name: schemas
  endpoint:
    path: /schemas
    method: POST
    data_selector: entries
- name: service_account
  endpoint:
    path: /app/organizations//service-accounts
    method: POST
- name: service_account
  endpoint:
    path: /organizations//service-accounts
    method: POST
- name: create_warehouse_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/create
    method: POST
- name: delete_all_schemas
  endpoint:
    path: /api/app/projects/{projectId}/schemas
    method: DELETE
- name: annotation
  endpoint:
    path: /projects/{projectId}/annotations/{annotationId}
    method: DELETE
- name: annotation
  endpoint:
    path: /app/projects/{projectId}/annotations/{annotationId}
    method: DELETE
- name: deletion_cancel
  endpoint:
    path: /api/app/data-deletions/v3.0/{tracking_id}
    method: DELETE
- name: delete_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/cancel
    method: POST
- name: delete_schema_by_entity_and_name
  endpoint:
    path: /schemas/{entityType}/{name}
    method: DELETE
- name: entity_schema_delete
  endpoint:
    path: /schemas/{entityType}
    method: DELETE
- name: delete_schemas
  endpoint:
    path: /api/app/projects/{projectId}/schemas
    method: DELETE
- name: delete_service_account
  endpoint:
    path: /api/app/organizations//service-accounts/
    method: DELETE
- name: delete_service_account
  endpoint:
    path: /app/organizations//service-accounts/
    method: DELETE
- name: edit_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/edit
    method: POST
- name: edit_warehouse_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/edit
    method: POST
- name: user_profile_query
  endpoint:
    path: /engage
    method: POST
    params:
      session_id: '{{ session_id }}'
      where: '{{ YOUR_SELECTOR_EXPRESSION }}'
      page: '{{ next_page_number }}'
- name: user_profiles
  endpoint:
    method: GET
    params:
      where: YOUR_SELECTOR_EXPRESSION
      session_id: this_page.session_id
      page: next_page_number
- name: event_deduplication
  endpoint:
    method: POST
    data_selector: events
- name: import_events
  endpoint:
    path: /import
    method: POST
    data_selector: ' '
- name: event
  endpoint:
    path: /events
    method: POST
    data_selector: failed_records
    params:
      time: specified as seconds since epoch
      distinct_id: must be specified
      $insert_id: must be â‰¤ 36 bytes; only alphanumeric characters or '-'
- name: event_data
  endpoint:
    path: /api/2.0/export
    method: GET
- name: saved_funnels
  endpoint:
    path: /api/query/funnels/list
    method: GET
- name: funnel_query
  endpoint:
    path: /query/funnels
    method: GET
- name: funnel
  endpoint:
    path: /query/funnels
    method: GET
- name: data_retrievals
  endpoint:
    path: /data-retrievals/v3.0
    method: POST
    params:
      token: <your_project_token>
      compliance_type: GDPR
      disclosure_type: Data
- name: data_retrieval_status
  endpoint:
    path: /data-retrievals/v3.0/<tracking_id>
    method: GET
    params:
      token: <your_project_token>
- name: data_deletions
  endpoint:
    path: /data-deletions/v3.0
    method: POST
    params:
      token: <your_project_token>
      compliance_type: GDPR
- name: data_deletion_status
  endpoint:
    path: /data-deletions/v3.0/<tracking_id>
    method: GET
    params:
      token: <your_project_token>
- name: cancel_deletion
  endpoint:
    path: /data-deletions/v3.0
    method: DELETE
    params:
      token: <your_project_token>
- name: annotation
  endpoint:
    path: /annotations/{annotationId}
    method: GET
- name: deletion_status
  endpoint:
    path: /data-deletions/v3.0/{tracking_id}
    method: GET
- name: retrieval_status
  endpoint:
    path: /api/app/data-retrievals/v3.0/{tracking_id}
    method: GET
- name: service_account
  endpoint:
    path: /app/organizations/{organizationId}/service-accounts/{serviceAccountId}
    method: GET
- name: pipeline_status
  endpoint:
    path: /pipeline/status
    method: GET
    data_selector: .
    params:
      name: '{{ name }}'
      status: '{{ status }}'
- name: group_batch_update
  endpoint:
    path: /groups#group-batch-update
    method: POST
- name: identity
  endpoint:
    path: /track#create-identity
    method: POST
    data_selector: data
    params:
      event: $identify
      properties.$identified_id: YOUR_CHOSEN_USER_ID
      properties.$anon_id: ORIGINAL_ANON_ID
      properties.token: YOUR_PROJECT_TOKEN
- name: import
  endpoint:
    path: /import
    method: POST
- name: identity_create_alias
  endpoint:
    path: /track#identity-create-alias
    method: POST
    data_selector: properties
    params:
      event: $create_alias
      properties.distinct_id: '{{ distinct_id }}'
      properties.alias: '{{ alias }}'
      properties.token: '{{ project_token }}'
- name: import
  endpoint:
    path: /import
    method: POST
- name: import_events
  endpoint:
    path: /import
    method: POST
    data_selector: events
    params:
      strict: '1'
- name: event_enrichment
  endpoint:
    path: /import
    method: POST
    data_selector: properties
- name: insights_query
  endpoint:
    path: /query/insights
    method: GET
- name: insights
  endpoint:
    path: /insights
    method: GET
- name: jql_query
  endpoint:
    path: /jql
    method: POST
    data_selector: script
- name: event_schema
  endpoint:
    method: GET
- name: annotations
  endpoint:
    path: /api/app/projects/{projectId}/annotations
    method: GET
- name: schemas
  endpoint:
    path: /projects/{projectId}/schemas
    method: GET
- name: lookup_tables
  endpoint:
    path: /lookup-tables
    method: GET
- name: service_accounts
  endpoint:
    path: /service-accounts
    method: GET
- name: recent_events
  endpoint:
    path: /events
    method: GET
- name: schema_by_entity_and_name
  endpoint:
    path: /schemas/{entityType}/{name}
    method: GET
- name: entity_schemas
  endpoint:
    path: /schemas/{entityType}
    method: GET
- name: service_accounts
  endpoint:
    path: /app/organizations/{organizationId}/service-accounts
    method: GET
- name: warehouse_pipeline_jobs
  endpoint:
    path: /nessie/pipeline/jobs
    method: GET
- name: warehouse_pipeline_sync_dates
  endpoint:
    path: /api/2.0/nessie/pipeline/timeline
    method: GET
- name: lookup_tables
  endpoint:
    method: POST
- name: ingestion_api
  endpoint:
    path: /api
- name: query_api
  endpoint:
    path: /api/2.0/export
- name: raw_data_export_api
  endpoint:
    path: /api/2.0/nessie
- name: data_pipelines_api
  endpoint:
    path: /api/app/projects
- name: schemas_api
  endpoint:
    path: /api/app/data-retrievals
- name: warehouse_connectors_api
  endpoint:
    path: /api/app/projects
- name: annotation
  endpoint:
    path: /annotations/{annotationId}
    method: PATCH
- name: annotation
  endpoint:
    path: /api/app/projects/{projectId}/annotations/{annotationId}
    method: PATCH
- name: pause_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/pause
    method: POST
- name: pause_warehouse_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/pause
    method: POST
- name: profile_batch_update
  endpoint:
    path: /engage#profile-batch-update
    method: POST
- name: profile_numerical_add
  endpoint:
    path: /engage#profile-numerical-add
    method: POST
- name: profile_set_once
  endpoint:
    path: /engage#profile-set-once
    method: POST
- name: profile_set
  endpoint:
    path: /engage#profile-set
    method: POST
- name: service_accounts
  endpoint:
    path: /service-accounts
    method: GET
- name: track_events
  endpoint:
    method: POST
    data_selector: properties
- name: import_events
  endpoint:
    method: POST
    params:
      authorization: Basic <base64 encoding of token without password>
- name: project_data
  endpoint:
    params:
      project_id: null
      workspace_id: null
- name: event_properties
  endpoint:
    path: /query/events/properties
    method: GET
- name: top_event_properties
  endpoint:
    path: /query/events/properties/top
    method: GET
- name: query_events_top_property_values
  endpoint:
    path: /query/events/properties/values
    method: GET
- name: jql_query
  endpoint:
    path: /query/jql
    method: POST
- name: top_event_names_last_31_days
  endpoint:
    path: /query/events/names
    method: GET
- name: top_events
  endpoint:
    path: /query/events/top
    method: GET
- name: export
  endpoint:
    path: /export
    method: GET
    params:
      project_id: '{{ dlt.secrets[''mixpanel_project_id''] }}'
- name: remove_service_accounts_from_projects
  endpoint:
    path: /app/organizations//service-accounts/remove-from-project
    method: POST
- name: lookup_table
  endpoint:
    path: /lookup-tables/{ID}?project_id={PROJECT_ID}
    method: PUT
    data_selector: failed_records
- name: resume_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/resume
    method: POST
- name: resume_warehouse_pipeline
  endpoint:
    path: /api/2.0/nessie/pipeline/resume
    method: POST
- name: retention_frequency_query
  endpoint:
    path: /query/retention/addiction
    method: GET
    data_selector: .
    params:
      unit: day
      addiction_unit: hour
- name: retention_query
  endpoint:
    path: /reference/retention-query
    method: GET
    params:
      interval: 1
      unit: day
- name: retention_analysis
  endpoint:
    path: /retentionGet
    method: GET
    params:
      interval:
        default: 1
      unit:
        default: day
- name: annotations
  endpoint:
    path: /projects/{projectId}/annotations
    method: GET
- name: pipelines
  endpoint:
    path: /api/2.0/nessie/pipeline/jobs
    method: GET
- name: schemas
  endpoint:
    path: /api/app/projects/{projectId}/schemas
    method: GET
- name: service_accounts
  endpoint:
    path: /app/organizations/{organizationId}/service-accounts
    method: GET
- name: warehouse_import_manual_sync
  endpoint:
    path: /api/app/projects/{project_id}/warehouse-sources/imports/{import_id}/manual-sync
    method: PUT
- name: warehouse_import_sync
  endpoint:
    path: /app/projects//warehouse-sources/imports//manual-sync
    method: PUT
- name: segmentation_numeric_query
  endpoint:
    path: /query/segmentation/numeric
    method: GET
- name: segmentation_query_average
  endpoint:
    path: /query/segmentation/average
    method: GET
- name: event_data
  endpoint:
    path: /segmentation
    method: GET
- name: segmentation_sum_query
  endpoint:
    path: /query/segmentation/sum
    method: GET
- name: segmentation
  endpoint:
    path: /query/segmentation
    method: GET
- name: service_accounts
  endpoint:
    path: /organizations/12345/service-accounts
    method: GET
- name: service_accounts_list
  endpoint:
    path: /api/service-accounts
    method: GET
- name: service_account_last_used
  endpoint:
    path: /api/service-accounts/last-used
    method: GET
- name: service_account_expiry
  endpoint:
    path: /api/service-accounts/expiry
    method: GET
- name: create_service_account
  endpoint:
    path: /api/service-accounts/create
    method: POST
- name: delete_service_account
  endpoint:
    path: /api/service-accounts/delete
    method: DELETE
- name: modify_service_account_projects
  endpoint:
    path: /api/service-accounts/modify-projects
    method: POST
- name: track
  endpoint:
    path: /track
    method: POST
    data_selector: events
- name: import
  endpoint:
    path: /import
    method: POST
    data_selector: events
- name: user_profiles
  endpoint:
    path: /schemas
    method: POST
    data_selector: metadata
    params:
      entityType: profile
      name: $user
- name: schemas
  endpoint:
    path: /schemas
    method: POST
- name: user_profiles
  endpoint:
    path: /engage#profile-set
    method: POST
    data_selector: response
- name: manual_sync
  endpoint:
    path: /<your_import_id>/manual-sync
    method: PUT
- name: ingestion_api
  endpoint:
    path: /api
    method: GET
- name: query_api
  endpoint:
    path: /api/2.0/export
    method: GET
- name: raw_data_export_api
  endpoint:
    path: /api/2.0/nessie
    method: GET
- name: data_pipelines_api
  endpoint:
    path: /api/app/projects
    method: GET
- name: schemas_api
  endpoint:
    path: /api/app/data-retrievals
    method: GET
- name: warehouse_connectors_api
  endpoint:
    path: /api/app/projects
    method: GET
notes:
- mixpanel.numeric_bucket() can be used to bucketize numeric values or segment events
  over calendar periods
- mixpanel.to_number() converts input into a number and is used for numeric aggregations
- Service Account must have the role of admin or owner
- APIs require HTTPS only; calls made over HTTP are rejected.
- Rate limit of 60 queries per hour
- Maximum of 5 concurrent queries
- Rate limit of 60 queries per hour and a maximum of 5 concurrent queries.
- Requires a role of at least Analyst to create annotations.
- Metadata properties missing in a new schema upload will be merged with existing
  schema properties if they are set.
- Requires a role of at least Analyst to delete an annotation
- API has a rate limit of 60 queries per hour
- Maximum of 5 concurrent queries allowed
- API responses will return at most `page_size` records for each request
- Deduplication does not consider additional properties beyond event name, distinct
  ID, timestamp, and insert ID
- Query-time Deduplication only affects data shown in reports, not raw data exports
- Compaction-time Deduplication may affect event counts if duplicates with different
  timestamps were present
- Supports Content-Type application/json and application/x-ndjson
- Supports Content-Encoding: gzip
- Each event must be properly formatted JSON
- Each event must contain an event name, time, distinct_id, and $insert_id
- Each event must be smaller than 1MB of uncompressed JSON
- Each event must have fewer than 255 properties
- All nested object properties must have fewer than 255 keys and a max nesting depth
  of 3
- All array properties must have fewer than 255 elements
- GeoIP enrichment replaces `ip` property with geographic properties if supplied
- Rate limit of 2GB uncompressed JSON/minute or ~30k events per second
- Requires `$insert_id` on all events for safe retrial
- Strings are truncated to 255 characters; recommend handling long URLs and JSON strings
  accordingly
- $create_alias event is only effective in Original ID Merge system and Legacy ID
  Management System; no functionality in Simplified ID Merge system.
- Supports up to 2000 events and 10MB uncompressed per request.
- Events must be properly formatted JSON with specific fields for deduplication and
  validation.
- Supports Content-Type 'application/json' or 'application/x-ndjson'.
- Supports Content-Encoding 'gzip'.
- GeoIP enrichment replaces `ip` property with geographic properties when provided
- Rate limit enforced as 2GB of uncompressed JSON/minute or ~30k events per second
- Exponential backoff strategy recommended on receiving 429, 502, or 503 status codes
- Do not retry validation errors (400 status code)
- Rate limit of 60 queries per hour and a maximum of 5 concurrent queries
- Queries timeout after 2 minutes of run-time
- Cannot make remote network requests from JavaScript
- Maximum of 5GB data processed per query and 2GB limit on resulting output data
- Requires admin or owner role for schema modification
- Access to classified data requires special permissions
- This API will return a 200 OK even if there are data validation issues; check response
  body to ensure success
- Does not support gzip encoding
- This authentication method is in the process of being deprecated; use Service Accounts
  instead.
- Project Secret authentication is deprecated with no set EOL date; migrate to Service
  Account
- The Query API has a rate limit of 60 queries per hour
- Query timeout after 2 minutes
- No remote network requests allowed from JavaScript
- 5 GB data processing limit per query
- 2 GB limit on resulting output data
- Enforces a rate limit to maintain system integrity and fair resource distribution.
- Rate limits include 2GB of uncompressed JSON/minute or ~30k events per second.
- Maximum of 5 concurrent queries and 60 queries per hour.
- Maximum of 100 concurrent queries, 60 queries per hour, and 3 queries per second.
- Maximum of 5 requests per minute, under 4000 events and properties updated per minute,
  and less than 3000 total truncations/deletions per request.
- Rate limit of 60 queries per hour, 3 queries per second, and a maximum of 100 concurrent
  queries
- Default interval is 1 day if none specified
- Default interval for retention analysis is 1 day
- Rate limit of 60 queries per hour and maximum of 5 concurrent queries
- Query API has a rate limit of 60 queries per hour
- Roles required for modifying service accounts: admin or owner
- Service accounts do not expire by default; expiration must be set upon creation
  for added security.
- Track endpoint intended for client-side integration with limitations on historical
  data ingestion (last 5 days only).
- Import endpoint intended for server-side integration with support for ingesting
  historical data from any time after 1971-01-01.
- Gzip compression recommended to reduce network egress and transfer time.
- API does not support gzip encoding
- Response status '200 OK' does not guarantee data validation success; check response
  body
errors:
- 400: If events fail validation, log the JSON response containing the `$insert_id`s
    of the invalid events
- 400: some data points in the request failed validation; includes details about the
    error found in failed_records
- 429: Employ exponential backoff with jitter strategy starting at 2s up to 60s
- 502: Employ exponential backoff strategy as with 429s
- 503: Employ exponential backoff strategy as with 429s
- 400: Do not retry validation errors as they consistently fail and count toward the
    rate limit
- 429 Too Many Requests: Reduce query frequency or number of concurrent queries
- 429: Rate limit exceeded; apply backoff strategies.
- 204: No content returned; operation successful.
- 405: Method not allowed; check if the deletion task has already started.
- 401 Unauthorized: Check if the project token is correct and active
- 400 Bad Request: Log the JSON response for debugging if events fail validation.
- code: 400
  description: some data points in the request failed validation
- 429: Employ exponential backoff with jitter strategy
- 502: Employ exponential backoff as with 429s
- 503: Employ exponential backoff as with 429s
- 400: Do not retry validation errors
- Rate Limit Exceeded: Reduce frequency of queries or stagger them to stay within
    limits
- QUERY_TIMEOUT: Query timeout after 2 minutes of run-time
- RATE_LIMIT_EXCEEDED: Rate limit of 60 queries per hour
- 'Rate limit exceeded: Reduce frequency of requests or implement retry logic with
  backoff'
- 429: Spread out queries over time or consolidate multiple queries into a single
    one.
- 429: Exceeded the rate limit
- error: some data points in the request failed validation
- status: 0
- 429 Too Many Requests: Reduce frequency of updates to stay within limits
- 413 Request Entity Too Large: Reduce the size of data or contact support
- QUERY_LIMIT_EXCEEDED: Throttle API calls or reduce frequency
- 429: Employ an exponential backoff strategy with jitter when rate limits are exceeded.
- 502: Use the same exponential backoff strategy as with 429 status codes.
- 503: Use the same exponential backoff strategy as with 429 status codes.
- 400: Do not retry; validation errors will consistently fail and count toward the
    rate limit.
auth_info:
  mentioned_objects:
  - Service Account
  - Service Accounts
  - Project Token
  - Event Object
  - Owner
  - Admin Service Account
  - Project Secret
  - service account
  - ServiceAccount
client:
  base_url: https://developer.mixpanel.com/docs/jql-overview
  headers:
    Accept: application/json
    Content-Encoding: gzip
    accept: text/plain
    content-type: application/x-www-form-urlencoded
    Content-Type:
    - application/json
    - application/x-ndjson
  auth:
    type: service_account
    location: header
    header_name: Authorization
  paginator:
    type: rate_limit
    default_page_size: 60
    cursor_param: page
    page_size_param: page_size
    cursor_path: session_id
source_metadata: null
