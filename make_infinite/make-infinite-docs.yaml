resources:
- name: Authentication / Registration API
  endpoint:
    path: /reference/authentication-code
    method: POST
- name: Gateway Authentication APIs
  endpoint:
    path: /reference/gateway-authentication-apis
    method: POST
- name: User Activity REST APIs
  endpoint:
    path: /reference/activity-api
    method: GET
- name: Subscription REST APIs
  endpoint:
    path: /reference/subscription-api
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: recipes
  endpoint:
    path: /v1/recipes
    method: GET
    data_selector: data
- name: UserID
  endpoint:
    path: /api/userid
    method: POST
    data_selector: data
    params: {}
- name: Wallet
  endpoint:
    path: /api/wallet
    method: POST
    data_selector: data
    params: {}
- name: API Key Login
  endpoint:
    path: /auth/apikey
    method: POST
- name: execute_proxy_query
  endpoint:
    path: /v1/sql
    method: POST
    data_selector: results
- name: table_discovery
  endpoint:
    path: /reference/discover-table
    method: GET
    data_selector: tables
- name: API Key Login
  endpoint:
    path: /auth/apikey
    method: POST
- name: driver_properties
  endpoint:
    path: /docs/jdbc
    method: GET
    data_selector: driver_properties
- name: execute_sql
  endpoint:
    path: /reference/execute-sql-generic
    method: POST
    data_selector: transaction_response
    params: {}
- name: create_view
  endpoint:
    path: /v1/sql/ddl
    method: POST
    data_selector: ''
    params: {}
- name: execute_sql
  endpoint:
    path: /reference/execute-sql-generic
    method: POST
    data_selector: response
    params: {}
- name: Get data from chain
  endpoint:
    path: /smart_contracts/data
    method: GET
    data_selector: data
    params: {}
- name: create_view
  endpoint:
    path: /v1/sql/ddl
    method: POST
    data_selector: sqlText
    params: {}
- name: openai-api
  endpoint:
    path: /v1/responses
    method: POST
    data_selector: model
    params: {}
- name: finnhub-api
  endpoint:
    path: /api/v1/stock/insider-transactions
    method: GET
    data_selector: data
    params: {}
- name: airtable-api
  endpoint:
    path: /v0/appbTEdRJ61UEKFLV/Users
    method: POST
    data_selector: records
    params: {}
- name: register
  endpoint:
    path: /auth/register
    method: POST
- name: login
  endpoint:
    path: /auth/login
    method: POST
- name: openai-api
  endpoint:
    path: /v1/responses
    method: POST
    data_selector: model
    params: {}
- name: finnhub-api
  endpoint:
    path: /api/v1/stock/insider-transactions
    method: GET
    data_selector: data
    params: {}
- name: airtable-api
  endpoint:
    path: /v0/appbTEdRJ61UEKFLV/Users
    method: POST
    data_selector: records
    params: {}
- name: add_existing_user
  endpoint:
    path: /auth/add-existing
    method: POST
    params:
      accessToken: string
- name: reset_password
  endpoint:
    path: /auth/reset
    method: POST
    data_selector: '204'
    params: {}
- name: register
  endpoint:
    path: /auth/register
    method: POST
    data_selector: object
- name: refresh_session
  endpoint:
    path: /auth/session/refresh
    method: POST
    data_selector: sessionId
- name: login
  endpoint:
    path: /auth/login
    method: POST
- name: convert_session
  endpoint:
    path: /auth/session/convert
    method: POST
    data_selector: object
    params: {}
- name: add_existing_user
  endpoint:
    path: /auth/add-existing
    method: POST
    data_selector: object
    params:
      accessToken: string
- name: get_all_biscuits
  endpoint:
    path: /biscuits
    method: GET
    data_selector: biscuits
- name: reset_password
  endpoint:
    path: /auth/reset
    method: POST
    data_selector: '204'
    params: {}
- name: user_biscuits
  endpoint:
    path: /biscuits/generated
    method: GET
    data_selector: biscuits
- name: refresh_session
  endpoint:
    path: /auth/session/refresh
    method: POST
- name: convert_session
  endpoint:
    path: /auth/session/convert
    method: POST
    params:
      accessToken: string
- name: biscuits
  endpoint:
    path: /biscuits
    method: GET
    data_selector: biscuits
- name: get_user_biscuit_by_name
  endpoint:
    path: /biscuits/generated/{biscuitName}
    method: GET
    data_selector: biscuits
- name: user_biscuits
  endpoint:
    path: /biscuits/generated
    method: GET
    data_selector: biscuits
- name: remove_user_biscuit
  endpoint:
    path: /biscuits/generated/{biscuitName}
    method: DELETE
- name: set_resource_permissions
  endpoint:
    path: /permissions
    method: PUT
    params:
      resourceType: DB_TABLE
      accessLevel: READ-ONLY
- name: user_biscuit
  endpoint:
    path: /biscuits/generated/{biscuitName}
    method: GET
    data_selector: biscuits
- name: remove_permissions
  endpoint:
    path: /permissions
    method: DELETE
    params:
      resourceId: string
      resourceType: DB_TABLE
      userId: string
- name: set_resource_permissions
  endpoint:
    path: /permissions
    method: PUT
    params:
      resourceType: DB_TABLE
      accessLevel: READ-ONLY
- name: user_permissions
  endpoint:
    path: /permissions/user
    method: GET
    data_selector: permissions
- name: remove_permission
  endpoint:
    path: /permissions
    method: DELETE
    params:
      resourceId: string
      resourceType: DB_TABLE
      userId: string
- name: resource_permissions
  endpoint:
    path: /permissions/resource
    method: GET
    params:
      resourceType: DB_TABLE
- name: user_permissions
  endpoint:
    path: /permissions/user
    method: GET
- name: api_keys
  endpoint:
    path: /apikeys
    method: GET
    data_selector: apiKeysMap
- name: get_resource_permissions
  endpoint:
    path: /permissions/resource
    method: GET
    params:
      resourceType: DB_TABLE
- name: create_api_key
  endpoint:
    path: /apikeys
    method: POST
- name: get_all_api_keys
  endpoint:
    path: /apikeys
    method: GET
- name: create_api_key
  endpoint:
    path: /apikeys
    method: POST
- name: execute_sql
  endpoint:
    path: /v1/sql
    method: POST
- name: content_query
  endpoint:
    path: /v1/sql/content-queries
    method: POST
- name: Execute SQL
  endpoint:
    path: /v1/sql
    method: POST
- name: authentication_code
  endpoint:
    path: /v1/auth/code
    method: POST
    data_selector: null
    params: {}
- name: content_query
  endpoint:
    path: /v1/sql/content-queries
    method: POST
- name: Authentication Code
  endpoint:
    path: /v1/auth/code
    method: POST
- name: Token Refresh
  endpoint:
    path: /v1/auth/refresh
    method: POST
- name: logout
  endpoint:
    path: /v1/auth/logout
    method: POST
- name: token_refresh
  endpoint:
    path: /v1/auth/refresh
    method: POST
- name: validate_token
  endpoint:
    path: /v1/auth/validtoken
    method: GET
- name: logout
  endpoint:
    path: /v1/auth/logout
    method: POST
- name: validate_token
  endpoint:
    path: /v1/auth/validtoken
    method: GET
- name: wallet_authentication
  endpoint:
    path: /v1/auth/wallet/code
    method: POST
- name: wallet_registration_code
  endpoint:
    path: /v1/auth/wallet/code-register
    method: POST
- name: user_identifier_check
  endpoint:
    path: /v1/auth/idexists/{id}
    method: GET
    data_selector: 'true'
    params: {}
- name: wallet_authentication_code
  endpoint:
    path: /v1/auth/wallet/code
    method: POST
- name: current_keychain
  endpoint:
    path: /v1/auth/keys
    method: GET
    data_selector: public_keys
- name: wallet_registration_code
  endpoint:
    path: /v1/auth/wallet/code-register
    method: POST
- name: add_key_to_keychain
  endpoint:
    path: /auth/keys
    method: POST
- name: keychain
  endpoint:
    path: /v1/auth/keys
    method: GET
    data_selector: public_keys
- name: public_key_challenge
  endpoint:
    path: /v1/auth/keys/code
    method: POST
- name: execute_sql
  endpoint:
    path: /sql
    method: POST
    data_selector: response
- name: add_key_to_keychain
  endpoint:
    path: /auth/keys
    method: POST
- name: query_view
  endpoint:
    path: /v1/sql/view/query
    method: POST
    data_selector: response
- name: get_public_key_challenge
  endpoint:
    path: /v1/auth/keys/code
    method: POST
- name: refresh_materialized_view
  endpoint:
    path: /v1/sql/view/materialized/refresh
    method: POST
- name: materialized_view_last_refresh_time
  endpoint:
    path: /v1/sql/view/materialized/last-refreshed
    method: POST
- name: query_view
  endpoint:
    path: /v1/sql/view/query
    method: POST
- name: content_query
  endpoint:
    path: /v1/sql/content-queries
    method: POST
- name: zk_query_plan
  endpoint:
    path: /v1/zkquery/build-plan
    method: POST
- name: refresh_materialized_view
  endpoint:
    path: /v1/sql/view/materialized/refresh
    method: POST
- name: get_schemas
  endpoint:
    path: /v2/discover/schema
    method: GET
- name: materialized_view_last_refresh
  endpoint:
    path: /v1/sql/view/materialized/last-refreshed
    method: POST
- name: tables
  endpoint:
    path: /discover/table
    method: GET
- name: content_query
  endpoint:
    path: /sql/content-queries
    method: POST
- name: get_table_columns
  endpoint:
    path: /discover/table/column
    method: GET
- name: build_zk_query_plan
  endpoint:
    path: /v1/zkquery/build-plan
    method: POST
- name: table_indexes
  endpoint:
    path: /v2/discover/table/index
    method: GET
    data_selector: metadata
- name: schemas
  endpoint:
    path: /discover/schema
    method: GET
- name: table_primary_key
  endpoint:
    path: /v2/discover/table/primarykey
    method: GET
    data_selector: RESPONSE
- name: get_tables
  endpoint:
    path: /v2/discover/table
    method: GET
    data_selector: metadata
- name: table_relationships
  endpoint:
    path: /v2/discover/table/relations
    method: GET
- name: table_columns
  endpoint:
    path: /discover/table/column
    method: GET
- name: primary_key_references
  endpoint:
    path: /v2/discover/refs/primarykey
    method: GET
- name: table_index
  endpoint:
    path: /v2/discover/table/index
    method: GET
    data_selector: metadata
- name: foreign_key_references
  endpoint:
    path: /v2/discover/refs/foreignkey
    method: GET
    data_selector: response
- name: get_table_primary_keys
  endpoint:
    path: /discover/table/primarykey
    method: GET
- name: view_metadata
  endpoint:
    path: /discover/view
    method: GET
- name: table_relationships
  endpoint:
    path: /v2/discover/table/relations
    method: GET
- name: aggregate
  endpoint:
    path: /v1/chain-meta/aggregate
    method: GET
    data_selector: ''
- name: primary_key_references
  endpoint:
    path: /v2/discover/refs/primarykey
    method: GET
- name: contract_schemas
  endpoint:
    path: /v1/chain-meta/{chainId}/contract-schemas
    method: GET
    data_selector: response
- name: foreign_key_references
  endpoint:
    path: /discover/refs/foreignkey
    method: GET
- name: view_metadata
  endpoint:
    path: /v2/discover/view
    method: GET
- name: subscription_contract_schemas
  endpoint:
    path: /v1/chain-meta/{chainId}/subscription-contract-schemas
    method: GET
- name: aggregate_blockchain_info
  endpoint:
    path: /v1/chain-meta/aggregate
    method: GET
- name: supported_chains
  endpoint:
    path: /v1/sci/supported-chains
    method: GET
    data_selector: response
- name: supported_deployments
  endpoint:
    path: /sci/supported-deployments
    method: GET
    data_selector: response
    params: {}
- name: contract_schemas
  endpoint:
    path: /v1/chain-meta/{chainId}/contract-schemas
    method: GET
- name: subscription_contracts
  endpoint:
    path: /v1/sci/subscription-contracts
    method: GET
- name: subscription_contract_schemas
  endpoint:
    path: /v1/chain-meta/{chainId}/subscription-contract-schemas
    method: GET
- name: smart_contract_schemas
  endpoint:
    path: /v1/sci/{chainId}/schemas
    method: GET
- name: supported_chains
  endpoint:
    path: /v1/sci/supported-chains
    method: GET
    data_selector: response
- name: indexed_contracts
  endpoint:
    path: /sci/{chainId}/indexed-contracts
    method: GET
    data_selector: response
- name: supported_deployments
  endpoint:
    path: /v1/sci/supported-deployments
    method: GET
    data_selector: RESPONSE
    params: {}
- name: latest_contract_info
  endpoint:
    path: /v1/sci/{chainId}/contract/{contractAddress}/info-latest
    method: POST
- name: subscription_contracts
  endpoint:
    path: /v1/sci/subscription-contracts
    method: GET
    data_selector: RESPONSE
- name: tracked_contract_info
  endpoint:
    path: /v1/sci/{chainId}/contract/{contractAddress}/info-tracked
    method: POST
- name: smart_contract_schemas
  endpoint:
    path: /v1/sci/{chainId}/schemas
    method: GET
- name: request_contract_indexing
  endpoint:
    path: /v1/sci/{chainId}/contract/{contractAddress}/index
    method: POST
- name: indexed_contracts
  endpoint:
    path: /v1/sci/{chainId}/indexed-contracts
    method: GET
- name: latest_contract_info
  endpoint:
    path: /v1/sci/{chainId}/contract/{contractAddress}/info-latest
    method: POST
- name: request_contract_removal
  endpoint:
    path: /v1/sci/{chainId}/contract/{contractAddress}
    method: DELETE
- name: event_transactions
  endpoint:
    path: /v1/sci/{chainId}/contract/{contractAddress}/transactions-for-event/{event}
    method: POST
- name: tracked_contract_info
  endpoint:
    path: /v1/sci/{chainId}/contract/{contractAddress}/info-tracked
    method: POST
- name: recent_query_activity
  endpoint:
    path: /v1/activity/queries/recent
    method: GET
- name: contract_indexing
  endpoint:
    path: /v1/sci/{chainId}/contract/{contractAddress}/index
    method: POST
- name: historical_query_activity
  endpoint:
    path: /v1/activity/queries/historical
    method: GET
    data_selector: ''
- name: request_contract_removal
  endpoint:
    path: /v1/sci/{chainId}/contract/{contractAddress}
    method: DELETE
- name: user_usage_activity
  endpoint:
    path: /v1/activity/usage/user
    method: GET
- name: subscription_usage_activity
  endpoint:
    path: /v1/activity/usage/subscription
    method: GET
    data_selector: response
- name: smart_contract_event_transactions
  endpoint:
    path: /v1/sci/{chainId}/contract/{contractAddress}/transactions-for-event/{event}
    method: POST
- name: subscription_payment_history
  endpoint:
    path: /v1/activity/payment/subscription
    method: GET
- name: subscription
  endpoint:
    path: /v1/subscription
    method: GET
    data_selector: subscription information
- name: recent_query_activity
  endpoint:
    path: /v1/activity/queries/recent
    method: GET
- name: subscription_users
  endpoint:
    path: /v1/subscription/users
    method: GET
    data_selector: users
- name: historical_query_activity
  endpoint:
    path: /v1/activity/queries/historical
    method: GET
- name: set_subscription_name
  endpoint:
    path: /v1/subscription/name
    method: PUT
- name: user_usage_activity
  endpoint:
    path: /v1/activity/usage/user
    method: GET
- name: subscription_invite
  endpoint:
    path: /v1/subscription/invite
    method: POST
- name: subscription_usage
  endpoint:
    path: /v1/activity/usage/subscription
    method: GET
- name: join_subscription
  endpoint:
    path: /v1/subscription/invite/{joinCode}
    method: POST
- name: subscription_payment_history
  endpoint:
    path: /v1/activity/payment/subscription
    method: GET
- name: set_user_role
  endpoint:
    path: /v1/subscription/setrole/{userId}
    method: POST
- name: remove_user
  endpoint:
    path: /v1/subscription/remove/{userId}
    method: POST
- name: subscription_info
  endpoint:
    path: /v1/subscription
    method: GET
    data_selector: response
- name: leave_subscription
  endpoint:
    path: /v1/subscription/leave
    method: POST
- name: subscription_users
  endpoint:
    path: /subscription/users
    method: GET
    data_selector: users
- name: current_subscription_balance
  endpoint:
    path: /v1/subscription/balance
    method: GET
    data_selector: balance
- name: set_subscription_name
  endpoint:
    path: /v1/subscription/name
    method: PUT
- name: subscription_usage_config
  endpoint:
    path: /v1/subscription/usage-config
    method: GET
- name: create_subscription_invite
  endpoint:
    path: /v1/subscription/invite
    method: POST
- name: set_subscription_usage_configuration
  endpoint:
    path: /v1/subscription/usage-config
    method: PUT
- name: credit_offerings
  endpoint:
    path: /v1/subscription/credit-offerings
    method: GET
- name: join_subscription
  endpoint:
    path: /v1/subscription/invite/{joinCode}
    method: POST
- name: current_subscription_free_query_count
  endpoint:
    path: /v1/subscription/free-queries
    method: GET
    data_selector: ''
- name: set_user_role
  endpoint:
    path: /v1/subscription/setrole/{userId}
    method: POST
- name: remove_user
  endpoint:
    path: /v1/subscription/remove/{userId}
    method: POST
- name: default_free_query_count
  endpoint:
    path: /v1/subscription/default-free-queries
    method: GET
    data_selector: response
- name: Register
  endpoint:
    path: /auth/register
    method: POST
- name: leave_subscription
  endpoint:
    path: /v1/subscription/leave
    method: POST
- name: biscuits
  endpoint:
    path: /biscuits
    method: GET
    data_selector: response
- name: current_subscription_balance
  endpoint:
    path: /v1/subscription/balance
    method: GET
    data_selector: RESPONSE
- name: set_resource_permissions
  endpoint:
    path: /permissions
    method: PUT
- name: subscription_usage_configuration
  endpoint:
    path: /v1/subscription/usage-config
    method: GET
- name: get_all_api_keys
  endpoint:
    path: /apikeys
    method: GET
    data_selector: API keys
- name: subscription_usage_config
  endpoint:
    path: /v1/subscription/usage-config
    method: PUT
- name: execute_sql
  endpoint:
    path: /v1/sql
    method: POST
- name: subscription_credit_offerings
  endpoint:
    path: /v1/subscription/credit-offerings
    method: GET
    data_selector: RESPONSE
- name: authentication_code
  endpoint:
    path: /v1/auth/code
    method: POST
- name: current_subscription_free_query_count
  endpoint:
    path: /v1/subscription/free-queries
    method: GET
    data_selector: response
- name: Wallet Authentication Code
  endpoint:
    path: /v1/auth/wallet/code
    method: POST
- name: current_keychain
  endpoint:
    path: /v1/auth/keys
    method: GET
    data_selector: public_keys
- name: register
  endpoint:
    path: /auth/register
    method: POST
- name: execute_sql
  endpoint:
    path: /v1/sql
    method: POST
- name: biscuits
  endpoint:
    path: /biscuits
    method: GET
- name: zk_query_plan
  endpoint:
    path: /v1/zkquery/build-plan
    method: POST
- name: set_resource_permissions
  endpoint:
    path: /permissions
    method: PUT
- name: schema
  endpoint:
    path: /v2/discover/schema
    method: GET
    data_selector: metadata
- name: get_all_api_keys
  endpoint:
    path: /apikeys
    method: GET
    data_selector: API keys
- name: aggregate
  endpoint:
    path: /v1/chain-meta/aggregate
    method: GET
- name: execute_sql
  endpoint:
    path: /execute-proxy-sql-generic
    method: POST
- name: supported_chains
  endpoint:
    path: /v1/sci/supported-chains
    method: GET
    data_selector: response
- name: authentication_code
  endpoint:
    path: /v1/auth/code
    method: POST
- name: wallet_authentication_code
  endpoint:
    path: /v1/auth/wallet/code
    method: POST
- name: recent_query_activity
  endpoint:
    path: /activity/queries/recent
    method: GET
    data_selector: content
    params:
      pageNo: 1
      pageSize: 10
- name: keys
  endpoint:
    path: /v1/auth/keys
    method: GET
- name: subscription
  endpoint:
    path: /subscription
    method: GET
    data_selector: ''
- name: zkquery_plan
  endpoint:
    path: /v1/zkquery/build-plan
    method: POST
- name: schema
  endpoint:
    path: /v2/discover/schema
    method: GET
    data_selector: schema
- name: aggregate_blockchain_info
  endpoint:
    path: /v1/chain-meta/aggregate
    method: GET
- name: supported_chains
  endpoint:
    path: /v1/sci/supported-chains
    method: GET
- name: recent_query_activity
  endpoint:
    path: /activity/queries/recent
    method: GET
    data_selector: content
    params:
      pageNo: 1
      pageSize: 10
- name: subscription_info
  endpoint:
    path: /subscription
    method: GET
    data_selector: ''
notes:
- The Gateway sits outside of the core network and provides custodial secrets management.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Authenticate with Web2 username/password and let the Gateway handle the ED25519
  authentication with the network on your behalf.
- Dreamspace already has first-class integration with the Gateway, so you won't have
  to manually enter biscuits every time you want to execute a query (they'll be automatically
  injected as needed).
- MakeInfinite Labs is building the data foundation of crypto.
- These services are all accessible through a comprehensive REST API.
- Some endpoints may have rate limits.
- Data may be paginated depending on the request.
- You can create a trial user today which has 100 free queries.
- Copy and save your API Key - it will never be shown again!
- 'To trade your API Key for an Access Token, call the Proxy endpoint: Authenticate
  with API Key.'
- Users can authenticate with a UserID or API Key.
- It uses Java to allow cross-platform support, running on Windows, MacOS, or Linux.
- Add your Dreamspace UserName and Password in the supplied JDBC setup screen
- publicKey needs to be configured manually, as this field does not exist by default
- privateKey needs to be configured manually, as this field does not exist by default
- Both public and private keys need to be in base64 encoding
- Blockchain tables are all public_read tables, meaning no biscuits are required to
  SELECT from them.
- If you are only querying onchain data, you can skip biscuits setup entirely.
- Space and Time use biscuits to manage the secure authorization between users and
  tables on a decentralized network.
- Most API endpoints available through MakeInfinite Labs require a more-secure Access
  Token.
- One biscuit is required per permissioned table.
- Some MakeInfinite APIs for Space and Time Managed DB can use the API Key directly
  to perform simple operations.
- Space and Time is an ANSI-Compliant database, meaning normal SQL will work as expected.
- Trial users cannot submit SCI requests, since it becomes an ongoing part of the
  network.
- Not all chains have been added to the SCI program yet, but stay tuned! We are updating
  frequently!
- This allows for, essentially, infinite precision for big number computations.
- Take great care when creating Immutable tables - they cannot be dropped or modified.
- The minimum refresh_interval value is 1440, which is one refresh per day.
- Use VARCHAR – unlike the older CHAR type, VARCHAR only allocates storage for bytes
  as needed.
- Use DECIMAL(S,0) for Web3 – many Web3 concepts like gas, token values, etc. can
  range from 60 to 72 digits.
- Treat biscuits like the sensitive keys they are! Do not let them get out into the
  wild, there is no way to revoke, except to recreate your table with a brand new
  keypair.
- Always add a check if sxt:subscription("<Your_Subiction>"); so that the biscuit
  will only work if the user belongs to your Space and Time Managed DB subscription.
- Space and Time Managed DB data types are very standard, with only a few differences
  based on the unique nature of Web3 use-cases.
- JoinCode expires 24 hours after generation and is consumed once used
- Force key rotation by setting expiration dates on all biscuits.
- JoinCodes are only good for 24 hours. After that expires, the user will need to
  request a new JoinCode.
- Space and Time Managed DB uses biscuits as a self-managing, self-expiring authorization
  key for accessing private data.
- If you want to access private data, you're going to be attaching a biscuit to your
  request for authorization.
- Creating a new subscription is extremely simple using Dreamspace.
- Autopay features are disabled by default.
- The JoinCode expires 24 hours after generation and is consumed once used.
- Dreamspace is built to empower every creator, from hobbyists experimenting with
  their first app to professionals publishing full projects.
- Securely configure API keys in Dreamspace.
- Ensure all API keys are linked to the miniapp for usage.
- Usage limits apply across various features.
- Requires explicit configuration of authentication and authorization tokens.
- If the validate flag is specified, the request will be validated against provided
  authorization inputs and referenced resource configuration.
- Request a manual refresh (re-execution) of a materialized view
- Retrieve the last time a materialized view was refreshed
- Execute a query created via the Content APIs
- 'Credentials required: Bearer JWT'
- Retrieve the addresses of all indexed smart contracts for a given blockchain
- Retrieve all smart contract indexed schemas owned by the requesting user's subscription
- Retrieve users tied to your subscription
- Create a new subscription invite with the specified role
- Retrieve the current balance for a usage-based subscription
- This API goes through the Gateway (Secrets Proxy) and handles authentication and
  authorization tokens required by the SxT Network.
- Value is updated every 15 minutes and might be slightly out of sync
- If the `validate` flag is specified, the request will be validated against provided
  authorization inputs and referenced resource configuration.
- Unlike the Proxy SQL API, this API is executed directly against the SxT Network
  and requires explicit configuration of authentication and authorization tokens.
- Build a ZK-proven query plan from the provided SQL statement
- 'Credentials: Bearer'
- 'Authentication type: JWT'
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Ensure your credentials are correct.'
- '404 Not Found: Verify the endpoint URL.'
- '401 Unauthorized: Recheck API key or token expiration'
- 400 Bad Request
- 500 Internal Server Error
- '400 Bad Request: Defines the error type'
- '500 Internal Server Error: Defines the error type'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '500 Internal Server Error: A detailed explanation of the problem'
- '500 Internal Server Error: Check server status'
- 401 Unauthorized
- 403 Forbidden
- '500 Internal Server Error: Check server status or contact support'
- '500 Internal Server Error: Check server logs for more details'
- '500 Internal Server Error: Check server logs for details'
- '401 Unauthorized: Defines the error type'
- '403 Forbidden: Defines the error type'
- '500 Internal Server Error: Check the server logs for details'
- '404 Not Found: Check if the biscuit name is correct'
- '500 Internal Server Error: Check the server status'
- '404 Not Found: Defines the error type'
- '403 Forbidden: Check user permissions'
- '404 Not Found: Resource does not exist'
- '404 Not Found: Check the biscuit name'
- 404 Not Found
- '404 Not Found: Verify resource ID'
- '500 Internal Server Error: Check the URI reference for more details'
- '403 Forbidden: Check your permissions'
- '404 Not Found: Verify the resource identifier'
- '500 Internal Server Error: An unexpected error occurred'
- '404 Not Found: Check the resource URL'
- '403 Forbidden: Access denied to the resource'
- '404 Not Found: Resource not found'
- '404 Not Found: Check if the endpoint is correct'
- '422 Unprocessable Entity: Returned with details about the original request and
  specifics on missing inputs.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - UserID
  - Subscription
  - Biscuit
client:
  base_url: https://api.makeinfinite.dev
  auth:
    type: oauth2
source_metadata: null
