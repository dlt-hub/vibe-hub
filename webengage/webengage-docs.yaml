resources:
- name: user
  endpoint:
    path: /v1/accounts/<YOUR_WEBENGAGE_LICENSE_CODE>/users
    method: POST
    data_selector: user
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: transaction
  endpoint:
    path: /transaction
    method: GET
- name: survey_response
  endpoint:
    path: /survey/response/
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: system_attributes
  endpoint:
    path: /users/system-attributes
    method: GET
    data_selector: attributes
- name: custom_attributes
  endpoint:
    path: /users/custom-attributes
    method: GET
    data_selector: attributes
- name: system_attributes
  endpoint:
    path: /users/system_attributes
    method: GET
    data_selector: attributes
    params: {}
- name: custom_attributes
  endpoint:
    path: /users/custom_attributes
    method: GET
    data_selector: attributes
    params: {}
- name: system_events
  endpoint:
    path: /system/events
    method: GET
    data_selector: events
    params: {}
- name: custom_events
  endpoint:
    path: /custom/events
    method: GET
    data_selector: events
    params: {}
- name: system_events
  endpoint:
    path: /system/events
    method: GET
    data_selector: events
- name: custom_events
  endpoint:
    path: /custom/events
    method: GET
    data_selector: events
- name: system_attributes
  endpoint:
    path: /system/attributes
    method: GET
    data_selector: attributes
- name: custom_attributes
  endpoint:
    path: /custom/attributes
    method: GET
    data_selector: attributes
- name: hotel_booking_events
  endpoint:
    path: /hotel_booking_events
    method: GET
    data_selector: events
    params: {}
- name: flight_booking_events
  endpoint:
    path: /flight_booking_events
    method: GET
    data_selector: events
    params: {}
- name: gaming_events
  endpoint:
    path: /gaming_events
    method: GET
    data_selector: events
    params: {}
- name: insurance_events
  endpoint:
    path: /insurance_events
    method: GET
    data_selector: events
    params: {}
- name: hotel_booking
  endpoint:
    path: /hotel_booking/events
    method: GET
    data_selector: events
    params: {}
- name: flight_booking
  endpoint:
    path: /flight_booking/events
    method: GET
    data_selector: events
    params: {}
- name: insurance
  endpoint:
    path: /insurance/events
    method: GET
    data_selector: events
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
- name: system_attributes
  endpoint:
    path: /setAttribute
    method: POST
    data_selector: attributes
    params: {}
- name: custom_attributes
  endpoint:
    path: /setAttribute
    method: POST
    data_selector: attributes
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: POST
    data_selector: data
- name: tracking_events
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: events
    params: {}
- name: on-site_notification
  endpoint:
    path: /api/on-site-notification
    method: POST
    data_selector: notification
    params: {}
- name: web_push_opt_in_configuration
  endpoint:
    path: /docs/web-push
    method: GET
    data_selector: web_push_options
- name: survey_properties
  endpoint:
    path: /api/on-site-survey
    method: GET
    data_selector: surveyProperties
    params: {}
- name: on_site_notification
  endpoint:
    path: /on-site-notification
    method: GET
    data_selector: notifications
    params: {}
- name: survey_render
  endpoint:
    path: /survey/render
    method: POST
    data_selector: response
    params: {}
- name: survey_clear
  endpoint:
    path: /survey/clear
    method: POST
    data_selector: response
    params: {}
- name: survey_render
  endpoint:
    path: /survey/render
    method: POST
    data_selector: surveyId
- name: survey_clear
  endpoint:
    path: /survey/clear
    method: POST
    data_selector: ''
- name: survey_opened
  endpoint:
    path: /survey/opened
    method: POST
    data_selector: data
- name: survey_closed
  endpoint:
    path: /survey/closed
    method: POST
    data_selector: data
- name: survey_submit
  endpoint:
    path: /survey/submit
    method: POST
    data_selector: data
- name: survey_complete
  endpoint:
    path: /survey/complete
    method: POST
    data_selector: data
- name: feedback_opened
  endpoint:
    path: /feedback/opened
    method: POST
    data_selector: data
- name: feedback_closed
  endpoint:
    path: /feedback/closed
    method: POST
    data_selector: data
- name: feedback_submitted
  endpoint:
    path: /feedback/submitted
    method: POST
    data_selector: data
- name: web_push_notification_permission_prompt_viewed
  endpoint:
    path: /webpush/permission/prompt_viewed
    method: POST
    data_selector: data
- name: web_push_notification_permission_granted
  endpoint:
    path: /webpush/permission/granted
    method: POST
    data_selector: data
- name: web_push_notification_permission_denied
  endpoint:
    path: /webpush/permission/denied
    method: POST
    data_selector: data
- name: web_push_notification_permission_granted_first_time
  endpoint:
    path: /webpush/permission/granted_first_time
    method: POST
    data_selector: data
- name: web_push_notification_permission_revoked
  endpoint:
    path: /webpush/permission/revoked
    method: POST
    data_selector: data
- name: amp_analytics
  endpoint:
    path: /amp-analytics
    method: GET
    data_selector: events
    params: {}
- name: survey_opened
  endpoint:
    path: /survey/opened
    method: POST
    data_selector: data
    params: {}
- name: survey_closed
  endpoint:
    path: /survey/closed
    method: POST
    data_selector: data
    params: {}
- name: survey_submit
  endpoint:
    path: /survey/submit
    method: POST
    data_selector: data
    params: {}
- name: survey_complete
  endpoint:
    path: /survey/complete
    method: POST
    data_selector: data
    params: {}
- name: feedback_opened
  endpoint:
    path: /feedback/opened
    method: POST
    data_selector: data
    params: {}
- name: feedback_closed
  endpoint:
    path: /feedback/closed
    method: POST
    data_selector: data
    params: {}
- name: feedback_submitted
  endpoint:
    path: /feedback/submit
    method: POST
    data_selector: data
    params: {}
- name: web_push_permission_prompt_viewed
  endpoint:
    path: /webpush/permission_prompt_viewed
    method: POST
    data_selector: data
    params: {}
- name: web_push_permission_granted
  endpoint:
    path: /webpush/permission_granted
    method: POST
    data_selector: data
    params: {}
- name: web_push_permission_denied
  endpoint:
    path: /webpush/permission_denied
    method: POST
    data_selector: data
    params: {}
- name: web_push_permission_granted_first_time
  endpoint:
    path: /webpush/permission_granted_first_time
    method: POST
    data_selector: data
    params: {}
- name: web_push_permission_revoked
  endpoint:
    path: /webpush/permission_revoked
    method: POST
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
- name: events_tracking
  endpoint:
    path: /events/tracking
    method: POST
    data_selector: events
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: tracking_events
  endpoint:
    path: /rest-api/tracking-events
    method: POST
    data_selector: events
    params: {}
- name: Added to Cart
  endpoint:
    path: /tracking/added_to_cart
    method: POST
    data_selector: attributes
    params: {}
- name: Order Placed
  endpoint:
    path: /tracking/order_placed
    method: POST
    data_selector: attributes
    params: {}
- name: Checkout Started
  endpoint:
    path: /tracking/checkout_started
    method: POST
    data_selector: attributes
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: user
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
- name: Push Notifications
  endpoint:
    path: /docs/android-push-messaging
    method: GET
    data_selector: messages
    params: {}
- name: MIPushReceiver
  endpoint:
    path: /path/to/mipushreceiver
    method: POST
    data_selector: command_result
    params: {}
- name: Push Kit
  endpoint:
    path: /docs/push
    method: GET
    data_selector: messages
- name: HMS SDK
  endpoint:
    path: /docs/hms-sdk
    method: GET
    data_selector: sdk
- name: push_kit
  endpoint:
    path: /push
    method: GET
    data_selector: records
- name: unread_notification_count
  endpoint:
    path: /getUserNotificationCount
    method: GET
    data_selector: count
- name: notification_messages
  endpoint:
    path: /getNotificationList
    method: GET
    data_selector: messages
- name: weInboxMessage
  endpoint:
    path: /weInboxMessage
    method: GET
    data_selector: messageList
- name: weInboxMessage
  endpoint:
    path: /weInboxMessage
    method: GET
    data_selector: weInboxMessageList
    params: {}
- name: push_notification_channel
  endpoint:
    path: /api/v1/notification/channels
    method: POST
    data_selector: channel
    params: {}
- name: push_channel_configuration
  endpoint:
    path: /notification/channels
    method: POST
    data_selector: channel
    params: {}
- name: push_channel
  endpoint:
    path: /setNotificationChannelGroup
    method: POST
    data_selector: value
    params:
      ID: we_wk_push_channel
      Name: Marketing
      Description: Not assigned
      Importance: IMPORTANCE_DEFAULT
      Light color: Light is disabled
      Lock screen visibility: VISIBILITY_PUBLIC
      Show badge: 'true'
      Sound: System default
      Vibration: 'true'
      Group: Not assigned
- name: push_channel_configuration
  endpoint:
    path: /setNotificationChannelGroup
    method: POST
    data_selector: properties
    params:
      ID: we_wk_push_channel
      Name: Marketing
      Importance: IMPORTANCE_DEFAULT
      Lock screen visibility: VISIBILITY_PUBLIC
      Show badge: true
      Sound: System default
      Vibration: true
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
- name: push_notifications
  endpoint:
    path: /api/v1/push_notifications
    method: POST
- name: placeholder
  endpoint:
    path: /docs/android-app-in-line-content#placeholders
    method: GET
    data_selector: placeholders
    params: {}
- name: campaign
  endpoint:
    path: /docs/android-app-in-line-content#campaigns
    method: GET
    data_selector: campaigns
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: events
    params: {}
- name: WebEngage SDK
  endpoint:
    path: /docs/rest-api-getting-started
    method: GET
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: WebEngage Core
  endpoint:
    path: /WebEngage/Core
    method: GET
    data_selector: records
- name: WebEngage Location
  endpoint:
    path: /WebEngage/Location
    method: GET
    data_selector: records
- name: track_event
  endpoint:
    path: /track_event
    method: POST
    data_selector: attributes
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: tracking_events
  endpoint:
    path: /rest-api/tracking-events
    method: POST
    data_selector: data
- name: tracking_custom_events
  endpoint:
    path: /rest-api/tracking-custom-events
    method: POST
    data_selector: data
- name: ContentExtension
  endpoint:
    path: /wecontentextension
    method: GET
    data_selector: records
- name: push_notifications
  endpoint:
    path: /push/notifications
    method: POST
    data_selector: notification
    params: {}
- name: NotificationService
  endpoint:
    path: /NotificationService
    method: POST
    data_selector: notifications
    params: {}
- name: ContentExtension
  endpoint:
    path: /ContentExtension
    method: POST
    data_selector: content
    params: {}
- name: notification_messages
  endpoint:
    path: /notifications/inbox
    method: GET
    data_selector: data
- name: unread_notification_count
  endpoint:
    path: /notifications/unread_count
    method: GET
    data_selector: count
- name: NotificationViewController
  endpoint:
    path: /services/data/vXX.X/sobjects/NotificationViewController
    method: GET
    data_selector: records
    params: {}
- name: notification_messages
  endpoint:
    path: /notification/messages
    method: GET
- name: notification_count
  endpoint:
    path: /notification/unread/count
    method: GET
- name: inline_campaigns
  endpoint:
    path: /webengage/inline_campaigns
    method: POST
    data_selector: campaigns
    params: {}
- name: message
  endpoint:
    path: /message
    method: GET
    data_selector: messageList
- name: location_tracking
  endpoint:
    path: /location/tracking
    method: POST
    data_selector: tracking_data
- name: User Data Encryption
  endpoint:
    path: /WEGUserDataEncryption
    method: POST
    data_selector: response
    params: {}
- name: session_started
  endpoint:
    method: POST
    data_selector: sessionType
    params:
      sessionType: WEGSessionTypeForeground
      newUser: true
- name: state_change
  endpoint:
    method: POST
    data_selector: state
- name: anonymous_id_changed
  endpoint:
    method: POST
    data_selector: anonymousID
- name: inline_campaigns
  endpoint:
    path: /sdk/inline-campaigns
    method: GET
    data_selector: campaigns
- name: iOS Auth Key
  endpoint:
    path: /upload/auth_key
    method: POST
- name: iOS Certificate
  endpoint:
    path: /upload/push_certificate
    method: POST
- name: screens
  endpoint:
    path: /screens
    method: GET
    data_selector: screens
- name: screen_data
  endpoint:
    path: /screen_data
    method: POST
    data_selector: screen_data
- name: in-app notifications
  endpoint:
    path: /in-app
    method: POST
    data_selector: notifications
    params: {}
- name: SMS
  endpoint:
    path: /docs/sms
    method: GET
- name: WEGManualIntegration
  endpoint:
    path: /WEGManualIntegration
    method: GET
    data_selector: records
- name: WEGUserDataEncryption
  endpoint:
    path: /WEGUserDataEncryption
    method: GET
    data_selector: records
- name: dlt_registration
  endpoint:
    path: /dlt/registration
    method: POST
    data_selector: registration_data
- name: whitelist_templates
  endpoint:
    path: /dlt/whitelist/templates
    method: POST
    data_selector: template_data
- name: Content Template Registration
  endpoint:
    path: /dlt/content-template-registration
    method: POST
    data_selector: template_id
    params: {}
- name: DLT Scrubbing
  endpoint:
    path: /dlt/scrubbing
    method: POST
    data_selector: scrubbing_status
    params: {}
- name: credentials
  endpoint:
    path: /push/credentials
    method: GET
- name: push_campaign
  endpoint:
    path: /push/campaigns
    method: POST
- name: in-app_notifications
  endpoint:
    path: /api/in-app/notifications
    method: POST
    data_selector: notifications
- name: SMS Campaign
  endpoint:
    path: /sms/campaigns
    method: POST
    data_selector: campaigns
    params: {}
- name: Business Registration
  endpoint:
    path: /sms/register-business-entity
    method: POST
    data_selector: data
    params: {}
- name: Sender ID Registration
  endpoint:
    path: /sms/register-sender-id
    method: POST
    data_selector: data
    params: {}
- name: Template Whitelisting
  endpoint:
    path: /sms/whitelist-templates
    method: POST
    data_selector: data
    params: {}
- name: Helo Promo
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Helo Promo Pipeline
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Kinesis Data Firehose
  endpoint:
    path: /tracking/amazon-pinpoint-events
    method: POST
- name: SMS Campaign
  endpoint:
    path: /sms/campaigns
    method: POST
    data_selector: campaigns
    params: {}
- name: SMS Campaign
  endpoint:
    path: /eocean/sms
    method: POST
    data_selector: response
    params: {}
- name: SMS
  endpoint:
    path: /sms
    method: POST
    data_selector: message
    params: {}
- name: gupshup_sms_integration
  endpoint:
    path: /api/v1/gupshup/integration
    method: POST
- name: Kavenegar Configuration
  endpoint:
    path: /kavenegar/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: Helo Promo
  endpoint:
    path: /helo/campaigns
    method: POST
- name: SMS
  endpoint:
    path: /api/sms
    method: POST
- name: IMImobile
  endpoint:
    path: /imimobile
    method: GET
- name: SMS
  endpoint:
    path: /sms/send
    method: POST
- name: SMS
  endpoint:
    path: /send-sms
    method: POST
- name: Future SMS Service Provider
  endpoint:
    path: /sms/future
    method: POST
    data_selector: response
    params: {}
- name: SMS Service Provider
  endpoint:
    path: /api/netcore/sms
    method: POST
    data_selector: data
    params: {}
- name: sms_configuration
  endpoint:
    path: /sms/configuration
    method: POST
- name: SSP Configuration
  endpoint:
    path: /pinnacle/ssp/configuration
    method: POST
    data_selector: response
    params: {}
- name: SMS Service Provider
  endpoint:
    path: /karix/sms
    method: POST
    data_selector: response
    params: {}
- name: Precise Communication Promo
  endpoint:
    path: /portal/tobeprecisesms.com/
    method: GET
- name: SMS Service Provider
  endpoint:
    path: /api/messagebird
    method: POST
    data_selector: data
- name: Rahyab Configuration
  endpoint:
    path: /sms/rahyab
    method: POST
    data_selector: configuration
    params: {}
- name: mGage Integration
  endpoint:
    path: /mgage/integration
    method: POST
    data_selector: data
    params: {}
- name: MOB texting API key
  endpoint:
    path: /Developer/Access tokens
    method: GET
    data_selector: API Keys section
    params: {}
- name: Webhook URL
  endpoint:
    path: /Access Tokens/Webhook URL
    method: POST
    data_selector: Webhook URL
    params: {}
- name: SMS Campaign
  endpoint:
    path: /sms/send
    method: POST
    data_selector: response
    params: {}
- name: Monty Mobile Configuration
  endpoint:
    path: /monty-mobile/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: SMS
  endpoint:
    path: /api/send-sms
    method: POST
    data_selector: data
    params: {}
- name: configuration
  endpoint:
    path: /trustsignal/configuration
    method: POST
    data_selector: result
- name: SMS Campaigns
  endpoint:
    path: /sms-campaigns
    method: POST
    data_selector: data
- name: SMS Service Provider
  endpoint:
    path: /services/tubelight
    method: POST
- name: SMS Campaign
  endpoint:
    path: /sms/campaigns
    method: POST
    data_selector: response
    params: {}
- name: SMS Campaign
  endpoint:
    path: /vconnect/sms/campaigns
    method: POST
- name: Plivo Configuration
  endpoint:
    path: /plivo/configuration
    method: POST
    data_selector: configuration
    params:
      account_id: your_account_id
      auth_token: your_auth_token
- name: Precise Communication Promo
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: Valueleaf SSP Configuration
  endpoint:
    path: /valueleaf/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: SMS Service Provider
  endpoint:
    path: /sms/rahyab
    method: POST
- name: Webhook
  endpoint:
    path: /your-webhook-url
    method: POST
- name: SMS Configuration
  endpoint:
    path: /sms/configure
    method: POST
- name: Private SSP API
  endpoint:
    path: /private-ssp
    method: POST
    data_selector: response
    params: {}
- name: SmartPing
  endpoint:
    path: /smartping
    method: POST
- name: Telecard Configuration
  endpoint:
    path: /telecard/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: delivery_status_notification
  endpoint:
    path: /your/path/to/delivery/status
    method: POST
    data_selector: status
    params: {}
- name: TextNation Configuration
  endpoint:
    path: /textnation/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: TrustSignal Configuration
  endpoint:
    path: /trustsignal/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: sms_service_provider
  endpoint:
    path: /sms/setup
    method: POST
    data_selector: response
    params: {}
- name: SMS Configuration
  endpoint:
    path: /sms/configuration
    method: POST
    data_selector: response
    params: {}
- name: Twilio Configuration
  endpoint:
    path: /twilio/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: On-site Notifications
  endpoint:
    path: /on-site-notification
    method: GET
    data_selector: notifications
- name: Surveys
  endpoint:
    path: /on-site-survey
    method: GET
    data_selector: surveys
- name: SMS Service Provider
  endpoint:
    path: /vconnect
    method: POST
- name: survey_responses
  endpoint:
    path: /api/survey/responses
    method: POST
    data_selector: responses
- name: SMS Service Provider
  endpoint:
    path: /sms-service-provider/valueleaf
    method: POST
- name: sms_campaign
  endpoint:
    path: /api/sms/campaigns
    method: POST
- name: SMS Service Provider
  endpoint:
    path: /v3/?at_category=2factor&at_event_action=spr&service=BULK-SMS-OTP-SERVICE-PROVIDER
    method: POST
- name: Private SSP API
  endpoint:
    path: /private-ssp
    method: POST
    data_selector: response
    params: {}
- name: amp-web-push
  endpoint:
    path: /amp-web-push
    method: POST
    data_selector: records
    params:
      incremental: updated_at
- name: delivery_status_notification
  endpoint:
    path: /path/to/delivery/status
    method: POST
    data_selector: status
    params: {}
- name: SMPP Configuration
  endpoint:
    path: /smpp/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: service_worker
  endpoint:
    path: /service-worker.js
    method: GET
    data_selector: service_worker_code
    params: {}
- name: web_sdk
  endpoint:
    path: /web-sdk
    method: POST
    data_selector: web_sdk_code
    params: {}
- name: pwa_manifest
  endpoint:
    path: /manifest.json
    method: GET
    data_selector: manifest_data
    params: {}
- name: SMS Service Provider
  endpoint:
    path: /sms/service
    method: POST
- name: email_service_provider
  endpoint:
    path: /docs/email
    method: GET
    data_selector: ESPs
    params: {}
- name: on_site_notifications
  endpoint:
    path: /on-site/notifications
    method: GET
    data_selector: notifications
- name: surveys
  endpoint:
    path: /on-site/surveys
    method: GET
    data_selector: surveys
- name: email_campaign
  endpoint:
    path: /email/campaigns
    method: POST
    data_selector: campaign_data
- name: Kenscio Configuration
  endpoint:
    path: /api/kenscio/configuration
    method: POST
- name: Mailgun Configuration
  endpoint:
    path: /mailgun/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: email_campaign
  endpoint:
    path: /v1/email/campaigns
    method: POST
    data_selector: data
    params: {}
- name: web_push
  endpoint:
    path: /amp-web-push
    method: POST
    data_selector: notifications
    params: {}
- name: service_worker
  endpoint:
    path: /service-worker.js
    method: GET
    data_selector: ''
    params: {}
- name: web_sdk
  endpoint:
    path: /web-sdk
    method: POST
    data_selector: ''
    params: {}
- name: pwa_manifest
  endpoint:
    path: /manifest.json
    method: GET
    data_selector: ''
    params: {}
- name: ESP Configuration
  endpoint:
    path: /email/configuration
    method: POST
- name: email_service_providers
  endpoint:
    path: /docs/email
    method: GET
    data_selector: esps
- name: email_campaign
  endpoint:
    path: /api/email_campaigns
    method: POST
    data_selector: campaign
    params: {}
- name: PII Hashing
  endpoint:
    path: /private-esp
    method: POST
    data_selector: hashed_values
    params: {}
- name: Kenscio Transactional
  endpoint:
    path: /your-config-path
    method: POST
    data_selector: response
    params: {}
- name: Mailgun
  endpoint:
    path: /
    method: POST
- name: Infobip Configuration
  endpoint:
    path: /api/v1/infobip/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: SMTP Configuration
  endpoint:
    path: /smtp/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: mGage Promo
  endpoint:
    path: /email-campaigns
    method: POST
    data_selector: campaigns
    params: {}
- name: Email Campaigns
  endpoint:
    path: /v3/smtp/email
    method: POST
    data_selector: data
- name: whatsapp_templates
  endpoint:
    path: /templates/list
    method: GET
    data_selector: templates
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp/templates
    method: POST
    data_selector: templates
    params: {}
- name: SMTP Configuration
  endpoint:
    path: /docs/smtp
    method: POST
    data_selector: configuration
    params: {}
- name: whatsapp_templates
  endpoint:
    path: /whatsapp/templates
    method: POST
- name: WhatsApp Service Provider
  endpoint:
    path: /add-whatsapp-service-provider
    method: POST
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp-templates
    method: POST
- name: WhatsApp Service Provider
  endpoint:
    path: /whatsapp/service-provider
    method: POST
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp/templates
    method: POST
- name: WhatsApp Service Provider
  endpoint:
    path: /gupshup/whatsapp
    method: POST
    data_selector: data
    params: {}
- name: WhatsApp Templates
  endpoint:
    path: /gupshup/templates
    method: POST
    data_selector: data
    params: {}
- name: whatsapp_templates
  endpoint:
    path: /templates/list
    method: GET
    data_selector: templates
    params: {}
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp/templates
    method: POST
    data_selector: templates
    params: {}
- name: WhatsApp Service Provider
  endpoint:
    path: /vconnect/whatsapp
    method: POST
- name: PII Hashing
  endpoint:
    path: /private-wsp#pii-hashing
    method: POST
    data_selector: hashed_values
    params: {}
- name: Webhook Configuration
  endpoint:
    path: /webhook-configuration
    method: POST
    data_selector: delivery_status_notifications
    params: {}
- name: WhatsApp Campaigns
  endpoint:
    path: /api/v1/whatsapp/campaigns
    method: POST
- name: WhatsApp Templates
  endpoint:
    path: /api/v1/whatsapp/templates
    method: POST
- name: send_personalization_variables
  endpoint:
    path: /send-personalization-variables
    method: POST
    data_selector: whatsAppData
    params: {}
- name: send_entire_message
  endpoint:
    path: /send-entire-message
    method: POST
    data_selector: whatsAppData
    params: {}
- name: WhatsApp Service Provider
  endpoint:
    path: /whatsapp/service-provider
    method: POST
    data_selector: data
    params: {}
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp/templates
    method: POST
    data_selector: data
    params: {}
- name: delivery_status_notification
  endpoint:
    path: <STATIC-DSN-END-POINT-OF-WEBENGAGE>
    method: POST
    data_selector: status
    params: {}
- name: send_whatsapp_message
  endpoint:
    path: <PRIVATE-WSP-API-END-POINT>
    method: POST
    data_selector: whatsAppData
    params: {}
- name: WhatsApp Service Provider
  endpoint:
    path: /addWhatsAppServiceProvider
    method: POST
    data_selector: response
    params: {}
- name: WhatsApp Templates
  endpoint:
    path: /createWhatsAppTemplate
    method: POST
    data_selector: response
    params: {}
- name: RCS campaign
  endpoint:
    path: /docs/creating-rcs-campaigns
    method: GET
- name: Analyze RCS campaign
  endpoint:
    path: /docs/analyzing-rcs-campaign
    method: GET
- name: Schedule reports
  endpoint:
    path: /schedule-reports#section-how-to-schedule-channel-reports
    method: GET
- name: WhatsApp Service Provider
  endpoint:
    path: /add-whatsapp-service-provider
    method: POST
    data_selector: response
    params: {}
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp-templates
    method: POST
    data_selector: response
    params: {}
- name: Private RSP API Endpoint
  endpoint:
    path: /your-api-endpoint
    method: POST
    data_selector: result
- name: RCS Request
  endpoint:
    path: <PRIVATE-RSP-API-END-POINT>
    method: POST
    data_selector: rcsData
    params: {}
- name: Delivery Status Notification
  endpoint:
    path: <STATIC-DSN-END-POINT-OF-WEBENGAGE>
    method: POST
    data_selector: messageId
    params: {}
- name: WhatsApp Service Provider
  endpoint:
    path: /add/whatsapp/service/provider
    method: POST
    data_selector: response
    params: {}
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp/templates
    method: POST
    data_selector: response
    params: {}
- name: RSP
  endpoint:
    path: /tanla/platforms/rsp
    method: POST
- name: WhatsApp Service Provider
  endpoint:
    path: /whatsapp/service-provider/trustsignal
    method: POST
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp/templates
    method: POST
- name: RCS Service Provider
  endpoint:
    path: /rcs/karix
    method: POST
- name: PII Hashing
  endpoint:
    path: /private-wsp#pii-hashing
    method: POST
    data_selector: hashed_data
    params: {}
- name: Webhooks Configuration
  endpoint:
    path: /webhook-configuration
    method: POST
    data_selector: webhooks
    params: {}
- name: Ad Account
  endpoint:
    path: /business/{business_id}/adaccounts
    method: GET
    data_selector: data
    params: {}
- name: send_personalization_variables
  endpoint:
    path: /send/personalization
    method: POST
    data_selector: whatsAppData
    params: {}
- name: send_entire_message
  endpoint:
    path: /send/entireMessage
    method: POST
    data_selector: whatsAppData
    params: {}
- name: TikTok Accounts
  endpoint:
    path: /integrations/channels/tiktok
    method: POST
- name: WebEngageSDK
  endpoint:
    path: /cordova/plugin/add
    method: POST
    data_selector: plugin
    params: {}
- name: RCS campaign
  endpoint:
    path: /docs/creating-rcs-campaigns
    method: POST
    data_selector: campaign
    params: {}
- name: RCS campaign analysis
  endpoint:
    path: /docs/analyzing-rcs-campaign
    method: GET
    data_selector: analysis
    params: {}
- name: RSP Configuration
  endpoint:
    path: /configuring/rsp/infobip
    method: POST
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: data
    params: {}
- name: Private RSP Endpoint
  endpoint:
    path: /api/private_rsp
    method: POST
    data_selector: response
- name: webengage_request
  endpoint:
    path: <PRIVATE-RSP-API-END-POINT>
    method: POST
    data_selector: rcsData
    params: {}
- name: delivery_status_notification
  endpoint:
    path: <STATIC-DSN-END-POINT-OF-WEBENGAGE>
    method: POST
    data_selector: version
    params: {}
- name: email_campaign
  endpoint:
    path: /email/campaigns
    method: POST
- name: RSP Configuration
  endpoint:
    path: /configuring/rsp/tanla-platforms
    method: POST
- name: RCS
  endpoint:
    path: /trustsignal
    method: POST
- name: Push Notifications
  endpoint:
    path: /docs/push
    method: GET
    data_selector: records
    params: {}
- name: User Tracking
  endpoint:
    path: /docs/users
    method: GET
    data_selector: records
    params: {}
- name: Tracking Events
  endpoint:
    path: /docs/events
    method: GET
    data_selector: records
    params: {}
- name: RCS Service Provider
  endpoint:
    path: /rcs/karix
    method: POST
- name: ad_account
  endpoint:
    path: /vXX.X/adaccounts
    method: GET
    data_selector: data
- name: integration_status
  endpoint:
    path: /facebook/integration/status
    method: GET
    data_selector: status
    params: {}
- name: react_native_sdk
  endpoint:
    path: /docs/react-native
    method: GET
    data_selector: content
- name: android_sdk
  endpoint:
    path: /docs/android-getting-started
    method: GET
    data_selector: content
- name: ios_sdk
  endpoint:
    path: /docs/ios-getting-started
    method: GET
    data_selector: content
- name: user
  endpoint:
    path: /api/user
    method: POST
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: POST
    data_selector: data
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
- name: in_app_payload
  endpoint:
    path: /in-app/payload
    method: POST
    data_selector: actions
- name: push_payload
  endpoint:
    path: /push/payload
    method: POST
    data_selector: userData
- name: app_inline_content
  endpoint:
    path: /docs/react-native-app-in-line-content
    method: GET
    data_selector: content
    params: {}
- name: tracking_users
  endpoint:
    path: /docs/rest-api-tracking-users
    method: GET
    data_selector: records
- name: tracking_events
  endpoint:
    path: /docs/rest-api-tracking-events
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: data
- name: Android Initialization
  endpoint:
    path: /android/initialization
    method: GET
    data_selector: initialization_steps
    params: {}
- name: iOS Initialization
  endpoint:
    path: /ios/initialization
    method: GET
    data_selector: initialization_steps
    params: {}
- name: tracking_events
  endpoint:
    path: /api/v1/events
    method: POST
    data_selector: events
    params: {}
- name: user_attributes
  endpoint:
    path: /setUserAttribute
    method: POST
    data_selector: attributes
    params: {}
- name: custom_event
  endpoint:
    path: /api/v1/track_event
    method: POST
    data_selector: event
    params: {}
- name: push_notifications
  endpoint:
    path: /push/notifications
    method: POST
    data_selector: notifications
    params: {}
- name: push_notifications
  endpoint:
    path: /push-notifications
    method: POST
    data_selector: data
    params: {}
- name: callbacks
  endpoint:
    path: /docs/react-native-callbacks
    method: GET
    data_selector: callbacks
    params: {}
- name: notification_count
  endpoint:
    path: /getNotificationCount
    method: GET
    data_selector: notificationCount
- name: notification_list
  endpoint:
    path: /getNotificationList
    method: GET
    data_selector: notificationData
- name: push_notification_callbacks
  endpoint:
    path: /docs/web-callbacks
    method: GET
    data_selector: callbacks
    params: {}
- name: app_inline_content
  endpoint:
    path: /docs/react-native-app-in-line-content
    method: GET
    data_selector: content
    params: {}
- name: In-line Content
  endpoint:
    path: /docs/flutter
    method: GET
    data_selector: records
    params: {}
- name: custom_view
  endpoint:
    path: /we_personalization_flutter/WEInlineWidget
    method: POST
    data_selector: customData
    params: {}
- name: WebEngage
  endpoint:
    path: /xamarin/android/
    method: GET
- name: user
  endpoint:
    path: /api/user
    method: POST
    data_selector: records
    params: {}
- name: webengage_android
  endpoint:
    path: /android/initialization
    method: GET
    data_selector: data
- name: webengage_ios
  endpoint:
    path: /ios/initialization
    method: GET
    data_selector: data
- name: user
  endpoint:
    path: /api/user
    method: POST
    data_selector: user_data
- name: custom_event
  endpoint:
    path: /api/v1/events
    method: POST
    data_selector: event
    params: {}
- name: Push Setup
  endpoint:
    path: /Data Platform/Integrations/Push Setup
    method: POST
    data_selector: data
    params: {}
- name: firebase_messaging_service
  endpoint:
    path: /webengage/firebase/messaging
    method: POST
    data_selector: data
    params: {}
- name: push_notification_callbacks
  endpoint:
    path: /api/push_callbacks
    method: POST
    data_selector: callbacks
    params: {}
- name: in_app_message_callbacks
  endpoint:
    path: /api/in_app_callbacks
    method: POST
    data_selector: callbacks
    params: {}
- name: in_app_notification_data
  endpoint:
    data_selector: canClose,layoutAttributes,posX,posY,TITLE_ALIGN,image_url,TITLE_WRAP,wvWidth,type,wvHeight,fullScreen,showTitle,notificationEncId,description,canMinimize,id,isActive,title,actions,config,direction
- name: event_reporting_strategy
  endpoint:
    path: /docs/event-reporting-strategy
    method: GET
    data_selector: data
    params: {}
- name: fetch_webengage_configuration
  endpoint:
    path: /docs/fetch-webengage-configuration
    method: GET
    data_selector: data
    params: {}
- name: logging
  endpoint:
    path: /docs/logging
    method: GET
    data_selector: data
    params: {}
- name: location_tracking
  endpoint:
    path: /docs/location-tracking
    method: GET
    data_selector: data
    params: {}
- name: markRead
  endpoint:
    path: /markRead
    method: POST
    data_selector: notificationItem
    params: {}
- name: markUnread
  endpoint:
    path: /markUnread
    method: POST
    data_selector: notificationItem
    params: {}
- name: markDelete
  endpoint:
    path: /markDelete
    method: POST
    data_selector: notificationItem
    params: {}
- name: readAll
  endpoint:
    path: /readAll
    method: POST
    data_selector: notificationList
    params: {}
- name: unReadAll
  endpoint:
    path: /unReadAll
    method: POST
    data_selector: notificationList
    params: {}
- name: deleteAll
  endpoint:
    path: /deleteAll
    method: POST
    data_selector: notificationList
    params: {}
- name: trackClick
  endpoint:
    path: /trackClick
    method: POST
    data_selector: notificationItem
    params: {}
- name: trackView
  endpoint:
    path: /trackView
    method: POST
    data_selector: notificationItem
    params: {}
- name: WEGLicenseCode
  endpoint:
    path: /docs/ios-troubleshooting#section-1-where-do-i-find-webengage-license-code-required-for-sdk-integration
    method: GET
    data_selector: license_code
    params: {}
- name: push_notification_callbacks
  endpoint:
    path: /docs/web-push
    method: GET
    data_selector: callbacks
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: In-line Content
  endpoint:
    path: /docs/flutter-app-in-line-content
    method: GET
    data_selector: records
    params: {}
- name: custom_event
  endpoint:
    path: /api/custom_event
    method: POST
    data_selector: data
    params: {}
- name: Push Notifications
  endpoint:
    path: /docs/push
    method: GET
    data_selector: records
- name: Rich Push Notifications
  endpoint:
    path: /docs/push/rich-notifications
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: tracking_events
  endpoint:
    path: /docs/rest-api-tracking-events
    method: GET
    data_selector: events
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: data
- name: events
  endpoint:
    path: /api/v1/events
    method: POST
    data_selector: data
- name: custom_event
  endpoint:
    path: /api/v1/events
    method: POST
    data_selector: data
    params: {}
- name: Event Reporting Strategy
  endpoint:
    path: /event/reporting/strategy
    method: POST
    data_selector: strategy
    params: {}
- name: Fetch WebEngage Configuration
  endpoint:
    path: /configuration
    method: GET
    data_selector: configuration
    params: {}
- name: WEGLicenseCode
  endpoint:
    path: /docs/ios-troubleshooting#section-1-where-do-i-find-webengage-license-code-required-for-sdk-integration
    method: GET
    data_selector: properties
    params: {}
- name: UIBackgroundModes
  endpoint:
    path: /docs/ios-troubleshooting
    method: GET
    data_selector: properties
    params: {}
- name: WEGEnableLocationAuthorizationRequest
  endpoint:
    path: /docs/ios-troubleshooting
    method: GET
    data_selector: properties
    params: {}
- name: NSLocationAlwaysUsageDescription
  endpoint:
    path: /docs/ios-troubleshooting
    method: GET
    data_selector: properties
    params: {}
- name: NSLocationWhenInUseUsageDescription
  endpoint:
    path: /docs/ios-troubleshooting
    method: GET
    data_selector: properties
    params: {}
- name: WEGLogLevel
  endpoint:
    path: /docs/ios-troubleshooting
    method: GET
    data_selector: properties
    params: {}
- name: WEGEnvironment
  endpoint:
    path: /docs/ios-troubleshooting
    method: GET
    data_selector: properties
    params: {}
- name: WEGAlternateAppSupport
  endpoint:
    path: /docs/ios-troubleshooting
    method: GET
    data_selector: properties
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: userData
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: eventData
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: custom_events
  endpoint:
    path: /api/v1/events
    method: POST
    data_selector: data
    params: {}
- name: tracking_events
  endpoint:
    path: /analytics/events
    method: POST
    data_selector: events
- name: Custom Event
  endpoint:
    path: /track_event
    method: POST
    data_selector: attributes
- name: push_notifications
  endpoint:
    path: /push/notifications
    method: POST
    data_selector: notifications
    params: {}
- name: WebEngage Plugin Installation
  endpoint:
    path: /docs/ionic-capacitor/installation
    method: GET
    data_selector: records
    params: {}
- name: WebEngage Initialization
  endpoint:
    path: /docs/ionic-capacitor/initialization
    method: GET
    data_selector: records
    params: {}
- name: iOS Project Configuration
  endpoint:
    path: /docs/ionic-capacitor/ios-configuration
    method: GET
    data_selector: records
    params: {}
- name: Android Project Configuration
  endpoint:
    path: /docs/ionic-capacitor/android-configuration
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: user_data
- name: event
  endpoint:
    path: /event
    method: POST
    data_selector: event_data
- name: in_app_messaging
  endpoint:
    path: /api/in_app_messaging
    method: GET
    data_selector: messages
    params: {}
- name: user_attributes
  endpoint:
    path: /docs/user_attributes
    method: POST
    data_selector: setAttribute
- name: opt_in_status
  endpoint:
    path: /docs/opt_in_status
    method: POST
    data_selector: setUserOptIn
- name: in_app_notification_callbacks
  endpoint:
    path: /callbacks/in_app
    method: POST
    data_selector: Notification
    params: {}
- name: push_message_callbacks
  endpoint:
    path: /callbacks/push
    method: POST
    data_selector: PushMessage
    params: {}
- name: custom_event
  endpoint:
    path: /track/custom_event
    method: POST
    data_selector: data
    params: {}
- name: webengage_license
  endpoint:
    path: /assets/plugins/android/androidmanifest.xml
    method: GET
    data_selector: meta-data
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: response
    params: {}
- name: events
  endpoint:
    path: /v1/accounts/<YOUR_WEBENGAGE_LICENSE_CODE>/events
    method: POST
    data_selector: null
    params: {}
- name: events
  endpoint:
    path: /v1/accounts/<YOUR_WEBENGAGE_LICENSE_CODE>/events
    method: POST
    data_selector: response
    params: {}
- name: WebEngageSDK
  endpoint:
    path: /WebEngageSDK
    method: GET
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: ''
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: response.data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/v1/events
    method: POST
    data_selector: records
- name: survey_response
  endpoint:
    path: /survey/response/<ResponseId>
    method: GET
    data_selector: response_data
- name: survey_response
  endpoint:
    path: /survey/response/
    method: GET
    data_selector: response.data
    params: {}
- name: tracking_events
  endpoint:
    path: /api/tracking/events
    method: POST
    data_selector: event_data
- name: bulk_users
  endpoint:
    path: /bulk-users
    method: POST
    data_selector: response
    params:
      eventName: String
      eventTime: String
      eventData: String
- name: bulk_events
  endpoint:
    path: /bulk-events
    method: POST
    data_selector: response
    params: {}
- name: manual recommendation upload
  endpoint:
    path: /api/v1/accounts/{{licenseCode}}/recommendation/manual/upload
    method: POST
    data_selector: recommendationMeta
    params: {}
- name: push_notification_callbacks
  endpoint:
    path: /webengage/push/callbacks
    method: POST
    data_selector: callbacks
- name: in_app_notifications_callbacks
  endpoint:
    path: /webengage/inapp/callbacks
    method: POST
    data_selector: callbacks
- name: webhook_requests
  endpoint:
    path: /webhooks
    method: POST
    params:
      eventType: Event for which data is being sent
      licenseCode: Your WebEngage account license code
      secret: This secret key is to be used to identify the webhook POST requests
        from WebEngage.
- name: user_attributes
  endpoint:
    path: /docs/user_attributes
    method: POST
    data_selector: attributes
    params: {}
- name: push_notification_accepted
  endpoint:
    path: /events/push_notification_accepted
    method: POST
    data_selector: event_data
    params: {}
- name: push_notification_rejected
  endpoint:
    path: /events/push_notification_rejected
    method: POST
    data_selector: event_data
    params: {}
- name: journey_activated
  endpoint:
    path: /events/journey_activated
    method: POST
    data_selector: event_data
    params: {}
- name: custom_events
  endpoint:
    path: /events
    method: POST
    data_selector: event_data
    params: {}
- name: tracked_user_attributes
  endpoint:
    path: /tracked_user_attributes
    method: GET
    data_selector: attributes
- name: tracked_events
  endpoint:
    path: /tracked_events
    method: GET
    data_selector: events
- name: order_completed
  endpoint:
    path: /order_completed
    method: GET
    data_selector: records
- name: order_updated
  endpoint:
    path: /order_updated
    method: GET
    data_selector: records
- name: order_fulfilled
  endpoint:
    path: /order_fulfilled
    method: GET
    data_selector: records
- name: order_partially_fulfilled
  endpoint:
    path: /order_partially_fulfilled
    method: GET
    data_selector: records
- name: order_cancelled
  endpoint:
    path: /order_cancelled
    method: GET
    data_selector: records
- name: newsletter_subscribed
  endpoint:
    path: /newsletter_subscribed
    method: GET
    data_selector: records
- name: cart_viewed
  endpoint:
    path: /cart_viewed
    method: GET
    data_selector: records
- name: cart_updated
  endpoint:
    path: /cart_updated
    method: GET
    data_selector: records
- name: track
  endpoint:
    path: /track
    method: POST
- name: identify
  endpoint:
    path: /identify
    method: POST
- name: page
  endpoint:
    path: /page
    method: POST
- name: push_notification_clicked
  endpoint:
    path: /callbacks/push_notification_clicked
    method: POST
    data_selector: callback_data
- name: in_app_notification_prepared
  endpoint:
    path: /callbacks/in_app_notification_prepared
    method: POST
    data_selector: inAppData
- name: in_app_notification_shown
  endpoint:
    path: /callbacks/in_app_notification_shown
    method: POST
    data_selector: inAppData
- name: in_app_notification_dismissed
  endpoint:
    path: /callbacks/in_app_notification_dismissed
    method: POST
    data_selector: inAppData
- name: in_app_notification_clicked
  endpoint:
    path: /callbacks/in_app_notification_clicked
    method: POST
    data_selector: inAppData
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: response
    params: {}
- name: user_attributes
  endpoint:
    path: /users/attributes
    method: POST
    data_selector: attributes
    params: {}
- name: event_tracking
  endpoint:
    path: /events/track
    method: POST
    data_selector: events
    params: {}
- name: users
  endpoint:
    path: /docs/users
    method: GET
    data_selector: users
    params: {}
- name: events
  endpoint:
    path: /docs/events
    method: GET
    data_selector: events
    params: {}
- name: events
  endpoint:
    path: /v1/accounts/<YOUR_WEBENGAGE_LICENSE_CODE>/events
    method: POST
- name: events
  endpoint:
    path: /v1/accounts/<YOUR_WEBENGAGE_LICENSE_CODE>/events
    method: POST
    data_selector: response
    params: {}
- name: Custom Event
  endpoint:
    path: /events/custom
    method: POST
    data_selector: events
    params: {}
- name: Screen Tracking
  endpoint:
    path: /events/screen
    method: POST
    data_selector: screens
    params: {}
- name: users
  endpoint:
    path: /docs/users
    method: GET
    data_selector: users
    params: {}
- name: events
  endpoint:
    path: /docs/events
    method: GET
    data_selector: events
    params: {}
- name: transaction
  endpoint:
    path: /v2/accounts/<YOUR_WEBENGAGE_LICENSE_CODE>/experiments/<EXPERIMENT_ID>/transaction
    method: POST
    data_selector: ''
    params:
      userId: peter
      ttl: 1200
      dedupe.ttl: 1800
      overrideData.email: ''
      overrideData.phone: ''
- name: webengage_api
  endpoint:
    path: /data-platform/integrations/rest-api
    method: POST
    data_selector: data
    params:
      api_key: '{{ dlt.secrets[''webengage_api_key''] }}'
      region: US
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: response.data
    params: {}
- name: survey_response
  endpoint:
    path: /survey/response/<ResponseId>
    method: GET
    data_selector: response_data
    params: {}
- name: survey_response
  endpoint:
    path: /survey/response/
    method: GET
    data_selector: response.data
    params: {}
- name: bulk_users
  endpoint:
    path: /bulk-users
    method: POST
    data_selector: response
    params: {}
- name: connection
  endpoint:
    path: /data/destinations/mixpanel
    method: POST
    data_selector: connection_details
    params: {}
- name: export
  endpoint:
    path: /data/exports/mixpanel
    method: POST
    data_selector: export_details
    params: {}
- name: bulk_events
  endpoint:
    path: /bulk-events
    method: POST
    data_selector: response
    params: {}
- name: Cohorts
  endpoint:
    path: /api/cohorts
    method: POST
    data_selector: cohorts
- name: Events
  endpoint:
    path: /api/events
    method: POST
    data_selector: events
- name: manual_upload
  endpoint:
    path: /api/v1/accounts/{{licenseCode}}/recommendation/manual/upload
    method: POST
    data_selector: recommendationMeta
- name: events
  endpoint:
    path: /data_exports
    method: POST
- name: webhook_requests
  endpoint:
    path: /webhooks
    method: POST
    data_selector: event-specific data
    params: {}
- name: Delivery Status Notifications
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: payload
    params: {}
- name: push_notification_accepted
  endpoint:
    path: /push_notification_accepted
    method: POST
    data_selector: event_data
- name: push_notification_rejected
  endpoint:
    path: /push_notification_rejected
    method: POST
    data_selector: event_data
- name: journey_activated
  endpoint:
    path: /journey_activated
    method: POST
    data_selector: event_data
- name: tracked_user_attributes
  endpoint:
    path: /tracked_user_attributes
    method: GET
    data_selector: attributes
- name: tracked_events
  endpoint:
    path: /tracked_events
    method: GET
    data_selector: events
- name: Delivery Status Notifications
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: body
- name: send_email
  endpoint:
    path: /send
    method: POST
    data_selector: email
    params: {}
- name: Order Completed
  endpoint:
    path: /orders/completed
    method: GET
    data_selector: records
- name: Order updated
  endpoint:
    path: /orders/updated
    method: GET
    data_selector: records
- name: Order fulfilled
  endpoint:
    path: /orders/fulfilled
    method: GET
    data_selector: records
- name: Order partially fulfilled
  endpoint:
    path: /orders/partially_fulfilled
    method: GET
    data_selector: records
- name: Order cancelled
  endpoint:
    path: /orders/cancelled
    method: GET
    data_selector: records
- name: Newsletter Subscribed
  endpoint:
    path: /newsletter/subscribed
    method: GET
    data_selector: records
- name: Cart Viewed
  endpoint:
    path: /cart/viewed
    method: GET
    data_selector: records
- name: Cart Updated
  endpoint:
    path: /cart/updated
    method: GET
    data_selector: records
- name: WhatsApp Message
  endpoint:
    path: /wsp/message
    method: POST
- name: whatsapp_message
  endpoint:
    path: /api/send
    method: POST
    data_selector: whatsAppData
    params: {}
- name: track
  endpoint:
    path: /track
    method: POST
    data_selector: data
    params: {}
- name: identify
  endpoint:
    path: /identify
    method: POST
    data_selector: data
    params: {}
- name: page
  endpoint:
    path: /page
    method: POST
    data_selector: data
    params: {}
- name: whatsapp_request
  endpoint:
    path: <WSP-API-END-POINT>
    method: POST
    data_selector: status
    params: {}
- name: Delivery Status Notification
  endpoint:
    path: /tracking/events
    method: POST
- name: rcs_payload
  endpoint:
    path: /path/to/endpoint
    method: POST
    data_selector: rcsData
    params: {}
- name: dsn_payload
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: status
    params: {}
- name: sso_configuration
  endpoint:
    path: /sso/configuration
    method: POST
    data_selector: configuration_details
- name: User Attributes
  endpoint:
    path: /user/attributes
    method: POST
    data_selector: attributes
    params: {}
- name: Event Tracking
  endpoint:
    path: /event/track
    method: POST
    data_selector: events
    params: {}
- name: gdpr_requests
  endpoint:
    path: /rest-api/gdpr-requests
    method: POST
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /rest-api/users
    method: GET
    data_selector: records
    params: {}
- name: opengdpr_requests
  endpoint:
    path: /opengdpr_requests
    method: POST
    data_selector: null
    params: {}
- name: opengdpr_request_status
  endpoint:
    path: /opengdpr_requests/{requestId}
    method: GET
    data_selector: null
    params: {}
- name: delete_opengdpr_request
  endpoint:
    path: /opengdpr_requests/{requestId}
    method: DELETE
    data_selector: null
    params: {}
- name: webengage_integration
  endpoint:
    path: /data-platform/integrations/rest-api
    method: POST
    data_selector: integration_data
    params: {}
- name: opengdpr_requests
  endpoint:
    path: /opengdpr_requests/{requestId}
    method: DELETE
    data_selector: null
    params: {}
- name: widget
  endpoint:
    path: /js/widget/webengage-min-v-3.0.js
    method: GET
    data_selector: widget
    params: {}
- name: notification_render
  endpoint:
    path: /webengage/notification/render
    method: POST
    data_selector: options
    params: {}
- name: notification_clear
  endpoint:
    path: /webengage/notification/clear
    method: POST
    data_selector: ''
    params: {}
- name: webengage_api_key
  endpoint:
    path: /data-platform/integrations/rest-api
    method: GET
    data_selector: API Key
    params: {}
- name: cohort_export
  endpoint:
    path: /api/cohort/export
    method: POST
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /data_exports
    method: POST
    data_selector: exports
    params: {}
- name: widget_configuration
  endpoint:
    path: /widget/config
    method: GET
    data_selector: configuration
    params: {}
- name: survey_settings
  endpoint:
    path: /survey/settings
    method: GET
    data_selector: settings
    params: {}
- name: Cohorts
  endpoint:
    path: /{project_id}/cohorts
    method: POST
    data_selector: cohorts
- name: Events
  endpoint:
    path: /{project_id}/events
    method: POST
    data_selector: events
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedbackData
- name: notification
  endpoint:
    path: /notification
    method: GET
    data_selector: notificationData
- name: events
  endpoint:
    path: /path/to/events
    method: POST
    data_selector: events
    params: {}
- name: notification_render
  endpoint:
    path: /webengage.notification.render
    method: POST
    data_selector: options
- name: notification_clear
  endpoint:
    path: /webengage.notification.clear
    method: POST
    data_selector: ''
- name: Delivery Status Notifications
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: status
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
    params: {}
- name: Delivery Status Notifications
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: ''
    params: {}
- name: email_send
  endpoint:
    path: /sendEmail
    method: POST
    data_selector: status
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: data
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: data
- name: whatsapp_message
  endpoint:
    path: /WSP-API-END-POINT
    method: POST
    data_selector: whatsAppData
    params: {}
- name: in_app_notification
  endpoint:
    path: /webengage/notification/onClick
    method: POST
    data_selector: inAppData
    params: {}
- name: whatsapp_request
  endpoint:
    path: <WSP-API-END-POINT>
    method: POST
    data_selector: whatsAppData
- name: users
  endpoint:
    path: /api/users
    method: GET
- name: events
  endpoint:
    path: /api/events
    method: GET
- name: rcs_campaign
  endpoint:
    path: /path/to/rcs_campaign
    method: POST
    data_selector: rcsData
    params: {}
- name: dsn
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: messageId
    params: {}
- name: feedback_responses
  endpoint:
    path: /api/v1/feedback/responses
    method: POST
    data_selector: responses
    params: {}
- name: survey_responses
  endpoint:
    path: /api/v1/survey/responses
    method: POST
    data_selector: responses
    params: {}
- name: export_user_profile
  endpoint:
    path: /rest-api/gdpr-requests
    method: GET
    data_selector: user_profile
- name: rectify_user_data
  endpoint:
    path: /rest-api/users
    method: POST
    data_selector: rectification
- name: erase_user_data
  endpoint:
    path: /rest-api/gdpr-requests
    method: DELETE
    data_selector: erasure
- name: restrict_user_data_processing
  endpoint:
    path: /rest-api/gdpr-requests
    method: PATCH
    data_selector: restriction
- name: data_portability
  endpoint:
    path: /rest-api/gdpr-requests
    method: GET
    data_selector: data_portability
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: opengdpr_requests
  endpoint:
    path: /opengdpr_requests
    method: POST
    data_selector: ''
    params: {}
- name: get_opengdpr_requests
  endpoint:
    path: /opengdpr_requests/{requestId}
    method: GET
    data_selector: ''
    params: {}
- name: delete_opengdpr_requests
  endpoint:
    path: /opengdpr_requests/{requestId}
    method: DELETE
    data_selector: ''
    params: {}
- name: opengdpr_requests
  endpoint:
    path: /opengdpr_requests/{requestId}
    method: DELETE
    data_selector: ''
    params: {}
- name: tracking_events
  endpoint:
    path: /edit/rest-api-tracking-events
    method: GET
- name: notification_render
  endpoint:
    path: /webengage.notification.render
    method: POST
    data_selector: options
- name: notification_clear
  endpoint:
    path: /webengage.notification.clear
    method: POST
- name: widget_configuration
  endpoint:
    path: /widget/configuration
    method: GET
- name: survey_configuration
  endpoint:
    path: /survey/configuration
    method: GET
- name: push_notifications
  endpoint:
    path: /api/v1/push
    method: GET
    data_selector: notifications
    params: {}
- name: notification_render
  endpoint:
    path: webengage.notification.render
    method: POST
    data_selector: options
    params: {}
- name: notification_clear
  endpoint:
    path: webengage.notification.clear
    method: POST
    data_selector: options
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: feedback
  endpoint:
    path: /api/v1/feedback
    method: POST
    data_selector: responses
- name: survey
  endpoint:
    path: /api/v1/survey
    method: POST
    data_selector: responses
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Octane
  endpoint:
    path: /edit/octane
    method: GET
- name: ValueFirst WhatsApp
  endpoint:
    path: /edit/valuefirst-whatsapp
    method: GET
notes:
- Bearer Authentication Scheme is used for API access
- Unique REST API key is created for each WebEngage Account Admin
- Some objects like Contact may return nulls in deeply nested fields
- Connect your platforms with WebEngage through an SDK Integration.
- Configure Push, In-app, SMS, On-site, Web Push, Email, WhatsApp & Facebook Retargeting
  to start engaging users.
- Custom User Attribute names are case sensitive and must be less than 50 characters
  long.
- Values of attributes can be of one of Boolean, Number, String, Date, Map and Array.
- Attribute names are case sensitive and must be less than 50 characters long.
- The first datapoint synced defines the data type for that user attribute.
- User Login and User Logout events are not automatically tracked.
- User Login and User Logout are not automatically tracked; SDK functions must be
  called.
- Uses WebEngage SDK for tracking user data and sessions.
- WebEngage assigns a unique ID (LUID) for each user visit.
- Uses asynchronous loading to prevent affecting page load time.
- SDK tracks user sessions and engagement automatically.
- User Attribute names are case sensitive and must be less than 50 characters long.
- String attribute values must be less than 1000 characters long.
- You can create a maximum of 25 Custom User Attributes of each data type.
- userAttributeName must not start with we_. Names starting with we_ are reserved
  exclusively for internal use.
- WebEngage SDK automatically creates a unique ID (LUID) for users.
- User profiles are merged when a CUID is assigned.
- If set to true, an unsubscribed visitor will not be automatically shown any opt-in
  prompts.
- The value of `String` type attributes must be less than 1000 characters long. Additional
  characters will be truncated.
- User Attribute names are case sensitive and must be less than 50 characters long.
  `String` attribute values must be less than 1000 characters long. Any characters
  beyond that will be truncated.
- '`userAttributeName` must not start with `we_`. Names starting with `we_` are reserved
  exclusively for internal use at WebEngage.'
- The first datapoint synced to WebEngage defines the data type for that user attribute.
- Custom Event names are case sensitive must be less than 50 characters long.
- Custom Event Attribute names are case sensitive too and must be less than 50 characters
  long. String attribute values must be less than 1000 characters long.
- You can configure various notification properties using the provided options.
- If set to `true`, an unsubscribed visitor will not be automatically shown any opt-in
  prompts.
- Set to `false` if your website is registering the service worker script by itself.
- The surveyId is used to identify a specific survey.
- Skip rules can be set to true to show all active surveys.
- Notification properties allow customization on how notifications behave and appear.
- Uses JavaScript for interaction with surveys
- WebEngage Web SDK is integrated
- SDK authentication is enabled
- Callbacks are useful for understanding the lifecycle stages of WebEngage messages.
- Please scroll down a bit to see this in effect.
- WebEngage Web SDK is required to be integrated.
- SDK authentication must be enabled.
- All WebEngage callbacks are called on the main thread.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- All AMP Page visitors will be treated as anonymous users.
- You will not be able to track any System User Attributes or Custom User Attributes
  for AMP Page visitors.
- Uses OAuth2 with refresh token — requires setup of connected app in WebEngage
- Your License Code might start with tilde (`~`).
- Please ensure that you replace `YOUR_PROJECT_LICENSE_CODE` with your WebEngage license
  code. It can be found under the *Account Setup* section of your dashboard.
- Session inactivity time limit can be configured up to 60 min.
- This capability is currently supported for Native - Android and iOS, React native
  and Flutter.
- Ensure that the WebEngage amp-analytics tag is added only once on an AMP page.
- User related APIs are part of WebEngage Android SDK's User object.
- The value of String type attributes must be less than 1000 characters long. Additional
  characters will be truncated.
- User Attribute names are case sensitive and must be less than 50 characters long.
  String attribute values must be less than 1000 characters long. Additional characters
  will be truncated.
- userAttributeName must not start with we_. Names starting with we_ are reserved
  exclusively for internal use at WebEngage.
- If your WebEngage dashboard URL starts with dashboard.webengage.com, then it means
  you're using our Global Data Center.
- If you have specifically asked for your data to be stored in India or Saudi Arabia
  Data Center, please refer to the documentation for setup.
- Events accumulate over time and are sent in batches.
- High priority events can drain battery faster.
- User ID can have maximum 100 characters
- Once assigned, a user ID cannot be changed
- Please ensure that you have completed all the platform integration steps listed
  under Getting started before proceeding.
- If you want to do customization on push, kindly follow the doc.
- FCM’s 'Server Key' for authorization purposes will be deprecated in June 2024.
- To avoid exceeding the rate limit, spread out campaigns over a longer period.
- WebEngage sends all events data periodically in batches to minimize network usage
  and maximize mobile battery life.
- Mi Push service outside Mainland China has been shut down by Xiaomi from 12:00 AM
  on April 2, 2024. Upon that time, you will no longer be able to use the Mi Push
  service.
- Integrate Mi Push SDK v5.0.6 or above
- Integrate WebEngage core Android SDK v.4.2.0 or above
- Event priority allows overriding the behavior of batching events.
- For few devices, MI SDK throws an error asking the app to register a region first
  for MI SDK.
- The region set does not decide the token region. However, to avoid the error, set
  the default region to either Global or India based on your app geography.
- FCM’s 'Server Key' for authorization purposes is deprecated and will be removed
  in June 2024.
- Mi Push service outside Mainland China has been shut down by Xiaomi from 12:00 AM
  on April 2, 2024.
- Requires setup of Huawei developer account and project in App Gallery Connect
- Push Kit allows sending messages to apps on a user's device
- For few devices, we have found that MI SDK throws an error asking the app to register
  a region first for MI SDK.
- During our testing, we have found that this region set does not decide the token
  region.
- To avoid the error, we suggest you to set the default region to either Global or
  India based on your app geography.
- In Android 11, if targetSdkVersion is 30 or later, add the queries element in the
  manifest element in AndroidManifest.xml to allow your app to access HMS Core (APK).
- Push Kit is required to send messages to the apps on a user's device through the
  cloud-to-device channel.
- SDK authentication is enabled. The WebEngage Android SDK version 4.4.1 or above
  is required.
- In Android 11, if targetSdkVersion is 30 or later, add the queries element in the
  manifest to access HMS Core.
- Sample Notification Inbox module is provided as a plug-and-play solution.
- WebEngage Android SDK version 4.4.1 or above is integrated
- This object allows you to access the custom key-value pairs.
- You must type cast this message to the appropriate data type based on the channel
  type.
- WebEngage SDKs 2.7.0 and above support Android push notification channels.
- All push notifications sent via WebEngage are bundled in a single channel.
- Push notifications may take up to 15 minutes to be delivered after being triggered
  to be sent.
- Some Xiaomi and Lenovo devices are known to not receive push notifications after
  the app is force killed.
- Any PendingIntents used in the push notification which is not provided by the above
  specified APIs, will not be tracked by the WebEngage Android SDK and hence will
  not be seen on the campaign stats page in your WebEngage dashboard.
- Make sure that WebEngage SDK is successfully integrated.
- Make sure you have integrated FCM.
- Make sure you have entered the correct FCM Server Key and package name under the
  Data Platform > Integrations > Push Steup (Configure) > Push section in your dashboard.
- If testing on an emulator, try cleaning and rebuilding your project, and restarting
  ADB.
- No additional steps are required for enabling In-app Notifications.
- App In-line Content allows you to insert content directly into your app's screen
  without disturbing the user experience.
- The capability is provided in WebEngage Personalization SDK, a child SDK that handles
  Inline campaigns.
- Check if there is a problem with Google Cloud Messaging / Firebase Cloud Messaging
  / Apple Push Notification service settings.
- Tracking Impressions and Clicks for Custom Views are mandatory steps.
- WEPersonalization SDK v1.0.0 requires manual unregistration of callbacks in onStop.
- If push notification is not showing up on your device, check if WebEngage SDK is
  successfully integrated.
- Make sure that you wait for at least 10 minutes after installing your application
  as it takes some time for the device to become push reachable after its first launch.
- Some devices (Xiaomi, Lenovo) do not show push notifications if you force kill the
  app.
- Read operation on PushNotificationData fields can be done from any push notification
  callback function.
- Any changes done to PushNotificationData fields will be reflected only if they are
  called from onPushNotificationReceived callback.
- It is recommended to register StateChangeCallbacks after SDK initialization.
- The parent WebEngage SDK version must be 4.0.0 or higher.
- Make sure you replace `YOUR_WEBENGAGE_LICENSE_CODE` with your WebEngage license
  code.
- If you are seeing 'Events successfully Logged to server, scheduling next sync' in
  your logs, then the events are being successfully reported to WebEngage servers
  and should be reflected on your dashboard within 2-3 mins.
- Default value of meta-data com.webengage.sdk.android.auto_gcm_registration has been
  changed from true to false.
- Ensure to replace __LICENSE_CODE__ with your WebEngage license code.
- Requires setup of connected app in api
- By default, the reporting strategy is set to ReportingStrategy.BUFFER.
- setEventReportingStrategy is to be called only once in a session. The SDK remembers
  this setting unless your app is restarted.
- This is to be used only in development mode.
- Starting from Android SDK version 4.17.1, WebEngage requires play-services-location
  version 21.0.1 or later.
- Maximum number of geofences allowed per app is 100.
- WebEngage provides a pre-built binary XCFramework distribution for users who want
  to integrate WebEngage without using a dependency manager.
- If you do not see data being reflected on the dashboard within 5 minutes, contact
  WebEngage support.
- WebEngage.get().setRegistrationID(String registrationID, String projectNumber) has
  been deprecated.
- User IDs can have a maximum of 100 characters.
- User ID cannot be changed once assigned.
- The NSString type attributes must be less than 1000 characters long. Additional
  characters will be truncated.
- Avoid use_frameworks! declaration in your Podfile. Contact us at support@webengage.com
  if you face any issue.
- WebEngage sends all events data periodically in batches to minimize network usage
  and maximize mobile battery life for your users.
- Custom Event and Custom Event Attribute names are case sensitive and must be less
  than 50 characters long.
- Mandatory if the app makes authorization request to always use location.
- Mandatory if the app makes authorization request to use location when the app is
  in use.
- Available from SDK version 3.2.
- Before continuing, please ensure that you have completed all of the steps in Getting
  started.
- 'We strongly recommend that you create and upload APNs Auth Key for the following
  reasons: One auth key can be used for all your apps.'
- If you already support push notifications in your app, skip to the section about
  uploading your auth key.
- All user related APIs are part of WebEngage iOS SDK's `WEGUser` object.
- Requires iOS 12.0+ & WebEngage SDK Version 5.0.0+
- It's recommended to choose either Swift Package Manager or CocoaPods for integrating
  the library into your Service Extension.
- The NSString phone must be in E.164 format, eg. +551155256325, +917850009678.
- WebEngage push messaging can be integrated using Apple Push Notification service.
- To send push notifications, you must upload your APNs Auth Key or APNs Certificate.
- Choose either Swift Package Manager or CocoaPods for integrating the library into
  your Service Extension.
- Choose Either SPM or CocoaPods
- Mixing both methods might lead to conflicts or inconsistencies in your project setup.
- You will not be able to use complex attributes for creating segments.
- WebEngage uses background modes to track when push messages are received on a user's
  device before the message is opened.
- One auth key can be used for all your apps - hence there is no complication of maintaining
  different certificates for different apps
- There is no need to re-generate the push certificate every year once it expires
- Following requires iOS 12.0+ & WebEngage SDK Version 5.0.0+
- Choose Either SPM or CocoaPods for integrating the library.
- Choose Either SPM or CocoaPods for integrating the library into your Service Extension.
- Uses App Groups for communication between app and extension.
- Push notifications don't work in the simulator. You should use a real device for
  testing the same.
- Make sure the SDK is successfully integrated and initialized.
- Enable Background Modes/Remote notifications to be able to use remote notifications
  properly.
- Choose Either SPM or CocoaPods for integrating the library into your Content Extension.
  Mixing both methods might lead to conflicts or inconsistencies in your project setup.
- UI customizations are only available in the notification content extension due to
  iOS platform restrictions.
- All the notification's impressions will be recorded automatically by WebEngage SDK.
- The Simple click on a Notification will be tracked automatically by WebEngage SDK.
- UNNotificationActions provided to custom categories will be tracked automatically
  by WebEngage SDK.
- Custom buttons and behaviours on custom content extension UI will not be tracked
  automatically by WebEngage SDK; you must manually track these occurrences.
- This will register default CTA's received from the WebEngage dashboard and the list
  won't have dismissed type of button so you need to manually add them as required.
- Choose either Swift Package Manager or CocoaPods for library integration
- WebEngage iOS SDK v6.3.2 or higher is required
- SDK authentication must be enabled
- Uses WEContentExtension for rich push notifications
- Some objects may return nulls in deeply nested fields
- The object contains the message data required to display the details on the screen.
- One can access the custom key-value pairs with this.
- Testing in the Simulator doesn't work. Push notifications don't work in the simulator.
  You should use a real device for testing the same.
- Ensure that Deployment Target is set to iOS 10 or above for Notification Service
  & Content Extension Targets
- The WebEngage iOS SDK does not require APIs to pass the device registration token
  or APNs message.
- All UI customizations like fonts, background colours, and styles will only be available
  in the notification content extension (expanded view); owing to iOS platform restrictions,
  UI stylings will not be considered for standard notifications (non-expanded view).
- Inline Campaigns allow dynamic content insertion without user experience disruption.
- Callback methods available for handling campaign data.
- Make sure you replace YOUR_WEBENGAGE_LICENSE_CODE with your WebEngage license code.
- This feature is supported on iOS SDK version 6.15.0 or above.
- Double-check your license code in the `Info.plist` (`WEGLicenseCode` key) against
  the WebEngage dashboard.
- Requires WebEngage SDK version 6.2.0 or higher
- You need to add the domain according to the environment you will be using, it can
  be Global, IN, KSA.
- Having an FCM integration is mandatory to enable these service for your app.
- Push Notifications can be tested in Development mode before going to Production.
- Screens are the mobile equivalent of web pages, which can have associated properties.
- Please ensure that your apps are integrated with WebEngage before proceeding.
- Ensure to whitelist the message body and personalization tokens with your SSP.
- User Data Encryption strengthens the security of user information by encrypting
  it before storing it on the device.
- Applicable only if you are sending messages to users located in India via domestic
  messaging pipeline.
- TRAI prohibits all kinds of SMS marketing between DND hours from 21:00 Hrs. to 10:00
  Hrs.
- Double-check your license code in the Info.plist (WEGLicenseCode key) against the
  WebEngage dashboard.
- Content Template Registration is mandatory.
- Template ID must be passed in the message payload for each SMS.
- TRAI has set a deadline of Tuesday, 1 October 2024 for compliance with the new guidelines.
- Existing message templates directly, as URLs in templates are passed as variables.
- WebEngage SDK collects contact info by default.
- User can track financial info, location, sensitive info, contacts, search history,
  purchases, and other usage data using WebEngage SDK.
- PE-TM Chain Binding is applicable only for clients sending DLT based SMSs in India
  and have active SMS agreement with WebEngage.
- If TM is not added & approved on your DLT portal, your SMSs will be Rejected from
  1st December 2024.
- Please Ensure That Your App is Integrated with WebEngage Before Proceeding
- Delivery Status Notifications tracked through Amazon Kinesis Data Firehose.
- Link Pinpoint Project with Kinesis Data Firehose Stream for SMS delivery status
  notifications.
- Ensure that your apps are integrated with WebEngage before sending In-app Campaigns.
- Users may need to whitelist message body and personalization tokens for transactional
  messages.
- Please get in touch with your relationship manager at CEQUENS if these authentication
  headers aren't readily available in your CEQUENS dashboard.
- This needs to be added only if you have not added the country code in the user's
  number.
- If the Country Code is not present with SSP credentials settings then there are
  high chances that the message delivery will fail.
- Applicable only for sending messages to users located in India via domestic messaging
  pipeline.
- International messaging routes remain unaffected.
- As per TRAI's latest SMS Marketing regulations for India, you must be registered
  on a DLT portal as a business entity.
- It is mandatory for all SSPs to pass a PE ID in the payload of each SMS message
  being sent to Indian phone numbers.
- 'Brand Name is compulsory in all kinds of SMS content: Promotional, Transactional,
  and OTPs.'
- Please get in touch with your relationship manager at EOcean in case these authentication
  headers aren't readily available in your dashboard.
- SMS CTA Whitelisting Guidelines are applicable to all who send DLT based SMSs in
  India.
- Ensure compliance with TRAI guidelines around the use of URL shortening services
  in SMS campaigns.
- The changes will not affect your existing message templates directly, as URLs in
  templates are passed as variables.
- Please get in touch with your relationship manager at Sinch Mobile if these authentication
  headers aren't readily available in your dashboard.
- All messages will be sent to Pinpoint for final delivery to users.
- Delivery Status Notifications like SMS Sent, Queued, Failed will be tracked through
  the Amazon Kinesis Data Firehose Stream.
- Add your PE ID during configuration - we will ensure that it is relayed to the SSP
  for each SMS sent to your users.
- You can test the integration by creating a test SMS campaign and sending it to a
  group of internal users (aka your teammates).
- Add API Key from CM dashboard to connect your account with WebEngage.
- If Country Code is not present, message delivery may fail.
- Adding the WebEngage Webhook in Future will enable us to receive delivery status
  notifications for each user.
- TRAI has mandated the registration of SMS templates, Business entities, Sender IDs
  & User consent with mobile operator owned DLT portals.
- As per TRAI's latest SMS Marketing regulations for India, you must be registered
  on a DLT portal as a business entity. Once registered, a unique Principle Entity
  ID (PE ID) will be assigned to you.
- Adding the WebEngage Webhook in Karix will enable us to receive delivery status
  notifications for each user.
- A unique Principle Entity ID (PE ID) is required for sending messages to users located
  in India.
- Highly Recommended to add WebEngage Webhook in MOB texting for delivery status notifications.
- Navigate to your Movile Messaging dashboard to find your account details.
- Adding the WebEngage Webhook in Movile Messaging will enable us to receive delivery
  status notifications for each user.
- Please prefix customer phone numbers with country code.
- 'As per MSG91''s Guidelines: Use 91 if you''re only sending messages to users in
  India. Use 1 if you''re only sending messages to users in the US. Use 0 if you''re
  sending messages to international users.'
- Please get in touch with your relationship manager at mTalkz if these authentication
  headers aren't readily available in your mTalkz dashboard.
- Please get in touch with your relationship manager at Pinnacle if these authentication
  headers aren't readily available in your Kavenegar dashboard.
- Adding the WebEngage Webhook in Karix will enable us to receive delivery status
  notifications.
- Please add a user-friendly name that enables you to identify the right SSP for a
  campaign while creating it.
- Navigate to your Plivo dashboard to find and copy your account details.
- Please get in touch with your relationship manager at Kavenegar if these authentication
  headers aren't readily available in your Kavenegar dashboard.
- Must be registered on a DLT portal as a business entity to obtain a unique Principal
  Entity ID for sending messages to users in India.
- Adding the WebEngage Webhook in SmartPing will enable receiving delivery status
  notifications for each user.
- For accounts on the Indian dashboards, there's no need to click Add Header- this
  step is only applicable for accounts in the US and KSA environments.
- Adding the WebEngage Webhook in Netcore will enable us to receive delivery status
  notifications for each user.
- Navigate to your Twilio dashboard to find and copy your account details.
- Messaging Service SID starts with MG and can be found under the Properties page
  for the Messaging Service in Console.
- W.e.f from Nov 19, 2020, it is mandatory for all SSPs to pass a PE ID in the payload
  of each SMS message being sent to Indian phone numbers.
- Please get in touch with your relationship manager at Your SMS App if these authentication
  headers aren't readily available in your dashboard.
- You must be registered on a DLT portal as a business entity for sending messages
  to users located in India.
- It is mandatory for all SSPs to pass a Principal Entity ID (PE ID) in the payload
  of each SMS message being sent to Indian phone numbers.
- Adding the WebEngage Webhook in Telecard will enable us to receive delivery status
  notifications for each user.
- Default header present in all WebEngage POST requests.
- Unifonic requires all clients to pass user's phone numbers prefixed with a country
  code without + sign.
- Ensure that your website is integrated with WebEngage before proceeding.
- You can customize notifications and survey widget behavior.
- Web Push does not work in Incognito Mode, Private Browsing Mode, and Guest Browser
  Mode.
- Ensure that the service-worker.js file is publicly accessible to send Web Push campaigns.
- 'Skip to Step 5: Define When & Where to Show'
- 'Must Read: Please ensure that you have a robust understanding of Events and Event
  Attributes before proceeding.'
- WebEngage expects a JSON response denoting synchronous result (request success/failure).
- Requires setup of SDK for AMP pages.
- Must be hosted on HTTPS websites.
- Default header 'Content-Type' cannot be overridden by you.
- Enter SMSC Host, SMSC Port, System ID, and Password in the configuration modal.
- Requires iOS 16.4 or above and Safari 16+ for compatibility.
- Requires all clients to pass user phone numbers prefixed with a country code without
  + sign.
- Tracking Data Attributes for Advanced Notification & Survey Targeting
- Avoid using your AWS SES account in Sandbox Mode while integrating.
- A mismatch between the Region and the From Email/Domain may cause configuration
  failure.
- Web Push Notifications are clickable media messages that are sent to a user's desktop,
  mobile, or tablet through a website or web app, even when they're inactive your
  the site.
- Please verify all the Sender IDs you'll be using for Email marketing in your Elastic
  Email dashboard before proceeding.
- Please ensure the website is integrated with WebEngage.
- Web Push must be enabled in your dashboard.
- Please verify all the Sender IDs you'll be using for Email marketing in your iCubesPro
  dashboard before proceeding.
- Get in touch with your relationship manager at iCubesPro if authentication headers
  aren't readily available in your dashboard.
- Native Prompt will appear on all browsers except Firefox 72+ due to certain permission
  restrictions.
- If you select Native opt-in prompt type, you will have to complete an additional
  section in the channel configuration for Firefox 72+.
- Web Push Opt-in has been set up for your account
- Please verify all the Sender IDs you'll be using for Email marketing in your Mailercloud
  dashboard before proceeding.
- WebEngage supports tracking of users and events on web pages built using the AMP
  framework.
- This feature requires HTTPS.
- Please verify all the Sender IDs you'll be using for Email marketing in your Madrill
  dashboard before proceeding.
- Ensure that the Mandrill API Key being used to integrate WebEngage has Full Access.
- iOS device should be on version 16.4 or above
- Safari browser version should be 16+
- Website should be PWA (progressive web app)
- Please verify all the Sender IDs you'll be using for Email marketing in your Sendgrid
  dashboard before proceeding.
- If you're using a specific IP for email marketing, then please specify the same
  here.
- You can integrate multiple ESPs with your project by navigating to the left side
  of the dashboard and clicking on Data Platform > Integrations > Email Setup.
- Deleting an integration will cease campaign delivery for all Running and Upcoming
  campaigns where the respective ESP was selected for sending it.
- SendinBlue has a limit of 2,000 API requests per minute.
- Please ensure that the From Email/Domain is verified in your AWS SES dashboard.
- Avoid using your AWS SES account in Sandbox Mode while integrating it with WebEngage.
- Please verify all the Sender IDs you'll be using for Email marketing in your SparkPost
  dashboard before proceeding.
- A mismatch between the account type chosen in the configuration and the actual SparkPost
  account type may cause integration failure.
- You can test the integration by creating a test Email campaign and sending it to
  a group of internal users.
- Private ESP serves as a proxy layer for sending email campaigns without sharing
  actual email addresses.
- Choose a user-friendly name for the configuration to identify the added ESP account.
- Strict guidelines laid down by Facebook control WhatsApp marketing.
- Each template is mapped to a WSP in your dashboard.
- It's extremely important that you opt-in only those users who have explicitly provided
  consent.
- Currently only Infobip WSP supports auto-approval
- Select POST as the Method of Data Transmission when configuring webhooks.
- Please add a user-friendly name that enables you to identify the right ESP for a
  campaign while creating it.
- Restricting access to the aforementioned aspects can cause integration failure.
- You can test the integration by creating a test WhatsApp campaign and sending it
  to a group of internal users (aka your teammates).
- Interakt's default plans currently allows sending 600 messages/minute.
- A mismatch between the account type chosen during setup and the one selected in
  the configuration modal may cause integration failure.
- Please connect with your Kaleyra Account Manager if these authentication headers
  aren't readily available in your dashboard.
- Many businesses are averse to sharing contact details of their users with third-party
  platforms like WebEngage.
- This is why we've made it possible for you to leverage a user's PII for sending
  Email campaigns without actually sharing their email addresses.
- WebEngage hits your Private ESP endpoint with a payload containing the hashed email
  identifiers, the message body, and some other data.
- 'WebEngage also subscribes to your Webhooks and expects later hits, passing the
  subsequent Delivery Status Notifications: delivery (sent, bounced) and interaction
  (opened, clicked).'
- You must follow these steps to ensure that you can use WhatsApp uninterruptedly
  through WebEngage.
- WhatsApp mandates whitelisting for each message that you'd like to send to your
  users.
- Promotional marketing is restricted; messages should focus on customer support and
  lifecycle updates.
- Adding a name enables you to identify the appropriate WSP for a campaign while creating
  it.
- Adding the WebEngage Webhook in ValueFirst will enable us to receive delivery status
  notifications.
- Verloop WhatsApp Plugin is enabled only for selected accounts. If you wish to use
  this plugin, kindly reach out to support@webengage.com to get this plugin enabled
  for your account.
- Kindly refer to the section to note important pointers when using Verloop plugin.
- Verloop plugin has a specific format for creating Template. Kindly refer to [Template
  Name](/docs/verloop#template-name) section to know more.
- If a user blocks your business number, Verloop currently doesnt pass the same to
  WebEngage and you may be get a delivered status for that user.
- This integration only works for Gupshup Enterprise accounts, and not for Gupshup
  self-service accounts.
- Kindly add `Env` as `US` if your WebEngage dashboard is located in the US server
  and `IN` if it is located in the India server or `KSA` if it is located in Saudi
  Arabia server.
- Make sure for all WhatsApp campaigns the throttling limit is set to 1000 messages/minute.
- Kindly add Env as US if your WebEngage dashboard is located in the US server and
  IN if it is located in the India server or KSA for Saudi Arabia server.
- Adding the WebEngage Webhook in Kaleyra will enable us to receive delivery status
  notifications for each user.
- Adding the WebEngage Webhook in TrustSignal is highly recommended for delivery status
  notifications.
- Add Custom headers only for US AND KSA environments.
- Values passed against hashed_phone must be encrypted in a format that you can decrypt
  later through the Private SSP.
- The encrypted value can be a maximum of 512 characters. Additional characters will
  be truncated.
- Ensure that the actual phone number is never passed through this method.
- 'WebEngage will add Content-Type: application/json by default as a header in the
  POST call.'
- Adding the WebEngage Webhook in LimeChat is highly recommended to receive delivery
  status notifications.
- Dynamic CallToAction for buttons using buttonUrlParam.
- Connect with your ValueFirst Account Manager if these authentication headers aren't
  readily available in your dashboard.
- Adding the WebEngage Webhook in ValueFirst will enable receiving delivery status
  notifications.
- Kindly get in touch with Verloop support for further assistance regarding Header
  details.
- All personalization variables are supported in customdata.
- While you can add links in customdata, link wrapping is not supported.
- To configure Delivery Status Notification for Yellow.ai, add the appropriate environment
  (US, IN, KSA) based on your dashboard location.
- Add 'Env' as 'US', 'IN', or 'KSA' based on the server location of your WebEngage
  dashboard to track Delivery Status Notification.
- 'WebEngage will put ContentType: application/json as default header in POST Request
  to Private RSP API.'
- The API requires an Auth token to be included as an Authorization header.
- 'Add ''Env'' header based on account server location: ''US'' for US server, ''IN''
  for India server, ''KSA'' for Saudi Arabia server.'
- Add custom headers only for US and KSA environments.
- Add Custom headers only for US AND KSA environments
- For accounts on the Indian dashboards, there's no need to click Add Header
- Pass hashed PII data to WebEngage from your servers.
- Configure Webhooks to ensure delivery status notifications are relayed from WSP
  to WebEngage dashboard.
- Please contact support@routemobile.com to obtain the AUTH token.
- 'WebEngage will add ''Content-Type'': ''application/json'' by default as a header
  in the POST call.'
- Admin Access to Ads Needed in Facebook Business Account
- Integration status can be Active or Pending based on permissions.
- Please Ensure That Your Website & Apps Are Integrated with WebEngage Before Proceeding
- '''View Campaigns and Use Planning Tools'' Access Needed in Google Ads'
- You must have Read Only / Standard / Admin access in Google Ads to authorize integration.
- Each request must have a 'version' field set to '1.0'.
- All messages require 'whatsAppData' and 'metadata' fields.
- 'Following Access Needed in TikTok: Ad Account Management, Audience Management,
  TikTok Accounts'
- Debug logs from WebEngage SDK are printed if the value of com.webengage.sdk.android.debug
  tag is true for Android.
- The value of the WEGLogLevel tag is VERBOSE for iOS.
- Engage users offline with personalized and actionable messages to create seamless
  brand experiences.
- Pre-requisites for creating highly personalized RCS campaigns include integrating
  your app and website with your WebEngage account.
- All user-related APIs are part of the WebEngage Hybrid SDK's `user` object.
- A user ID cannot be changed once it has been assigned.
- WebEngage requires a synchronous response with predefined format for message requests.
- The `String` we_phone must be in E.164 format, eg. +551155256325, +917850009678.
- User Attribute names are case sensitive and must be less than 50 characters long.
  String attribute values must be less than 1000 characters long. Any characters beyond
  that will be truncated.
- Custom Event names must be less than 50 characters long.
- Custom Event Attribute names are case sensitive and must be less than 50 characters
  long.
- eventName or eventAttributeName must not start with we_.
- You can create a maximum of 25 Event Attributes of each data type for a Custom Event.
- Ensure to provide the Auth token in the Authorization header for DSN requests.
- Before continuing, please ensure that you have added the WebEngage SDK to your app.
- Ensure that you have added the WebEngage SDK to your app
- To connect your account with WebEngage, please contact the support team at support@routemobile.com
  or reach out to your respective Business Manager to obtain the AUTH token.
- All configurations go under the config.xml file in the root directory of your project.
- 'Integration can have statuses: Active, Pending.'
- Segments can be exported to Facebook only once the integration is activated.
- Please ensure that your website & apps are integrated with WebEngage before proceeding.
- Ensure that you have Read Only / Standard / Admin access in Google Ads before proceeding.
- User attributes can be segmented for campaign targeting.
- 'WebEngage needs following access permission to your TikTok account to authenticate
  integration: Ad Account Management, Audience Management, TikTok Accounts.'
- Users who are not authorized for any of the permissions will not be able to authorize
  the integration.
- The String we_phone must be in E.164 format, eg. +551155256325, +917850009678.
- App Installed event and First Acquisition Details data in user profile will not
  be tracked on your Android app unless you follow the attribution tracking step.
- Add the above mentioned snippets inside project's config.xml according to the usage.
- Custom Event Attribute names are case sensitive and must be less than 50 characters
  long. String attribute values must be less than 1000 characters long.
- eventName or eventAttributeName must not start with we_. Names starting with we_
  are reserved exclusively for internal use at WebEngage.
- The first datapoint synced to WebEngage defines the data type for that event attribute.
- User ID can have a maximum of 100 characters
- User ID cannot be changed once assigned
- If you're using multiple Firebase messaging providers, we suggest following Approach
  2.
- Passing Firebase tokens to WebEngage from the onCreate method ensures that changes
  in the user’s Firebase token are communicated to WebEngage.
- Make sure to handle any additional requirements specific to your application.
- Please ensure that the react-native-webengage version is 1.2.2 or above.
- Currently, the iOS SDK requires clients to add the NSLocationAlwaysAndWhenInUseUsageDescription
  & NSLocationWhenInUseUsageDescription keys along with a placeholder purpose string
  in the Info.plist, even if their app does not use location services.
- Location tracking requires configuration in config.xml.
- Supported from React Native SDK v1.3.0
- User attributes can be of 2 types - System User Attributes and Custom User Attributes.
- If you have specifically asked for your data to be stored in our India Data Center
  in your contract with WebEngage, then your dashboard url will start with dashboard.in.webengage.com.
- If you have specifically asked for your data to be stored in our Saudi Arabia Data
  Center in your contract with WebEngage, then your dashboard url will start with
  dashboard.ksa.webengage.com.
- The first datapoint synced to WebEngage defines the data type for that user attribute.
  Thus, data types must be consistent with the value that you want to store against
  the attribute.
- All user-related APIs are part of the WebEngage Hybrid SDK's user object.
- An ID can have a maximum of 100 characters.
- String attribute values must be less than 1000 characters long. Any characters beyond
  that will be truncated.
- Uses Firebase Cloud Messaging for push notifications
- Ensure to handle push permissions for Android 13
- Version should be 1.6.0 or Later
- Clients will have to explicitly ask permissions from end user to send push notifications
  from Android 13 onwards.
- Before proceeding, please ensure that the react-native-webengage version is 1.2.2
  or above.
- Tracking Views and tracking clicks are mandatory steps. If not added then view impression
  and click data for these campaigns will not be recorded.
- 'If your app doesn’t require location tracking, remove the following keys from your
  Info.plist file: NSLocationAlwaysAndWhenInUseUsageDescription, NSLocationWhenInUseUsageDescription.'
- Callbacks will be automatically attached as expected after adding the changes in
  the provided Dart code.
- Assign pushNotificationDelegate before initialising the SDK as shown in above code
  snippet.
- Screen tracking is crucial for ensuring the proper functioning of App-Inline
- Supported from Flutter SDK v1.2.3.
- Callbacks will be available unless the component is unmounted and is deregistered
  from the campaign callbacks.
- Tracking impression and tracking clicks are mandatory steps for Custom View campaigns.
  If not added then impression and click data for these campaigns will not be recorded.
- Tracking Impression and tracking Clicks are mandatory steps for Custom view campaigns.
- WebEngage Plugin 1.0.3 and above supports Flutter 2.2 (null-safety).
- Use 1.0.2, if your application does not support Flutter null-safety.
- All user related APIs are part of WebEngage Xamarin.Android SDK's User object.
- WebEngage dashboard URL determines the data center used.
- For Android 13 and above, declare AD_ID permission in the manifest.
- The phone number must be passed in E.164 format, eg. +551155256325, +917850009678.
- Value of String type attributes must be less than 1000 characters long. Additional
  characters will be truncated.
- Event priority allows you to override the behavior of the SDK.
- Integration requires adding the WebEngage SDK to your app.
- Passing Firebase tokens to WebEngage is highly recommended.
- Changes in the user's Firebase token should be communicated to WebEngage.
- Make sure that SDK authentication is enabled.
- Pagination can be used to access further batches beyond the initial 10.
- Callbacks are invoked on the main thread.
- Customizing push message data is possible through callbacks.
- Mandatory if you have multiple apps, then you can use the same license code for
  all of them.
- Callbacks will be automatically attached as expected after adding the changes.
- Once assigned, a user ID cannot be changed.
- Tracking screen is a mandatory step to make sure In-line campaigns are rendered.
- Complex event attributes cannot be used for creating segments.
- Make sure you replace `YOUR_WEBENGAGE_LICENSE_CODE` with your WebEngage license
  code
- App Installed event and First Acquisition Details data in user profile will not
  be tracked on your Android app unless you follow the above step
- String attribute values must be less than 1000 characters long. Additional characters
  will be truncated.
- Names starting with we_ are reserved exclusively for internal use at WebEngage.
- WebEngage allows you to define location tracking accuracy, or to disable location
  tracking.
- If AutoTrackUserLocationWithAccuracy is not called, then the SDK will track user
  location only if your app has permission to read the device location.
- This Unity Package is only for Android and will not work on any other platform
- Event priority allows you to override the SDK's batch reporting behavior.
- App Installed event and First Acquisition Details data in user profile will not
  be tracked on your Android app unless you follow the above step.
- It may take up to a few minutes for data to reflect in your dashboard.
- Before continuing, please ensure that you have added the WebEngage SDK to your app
- By default, the reporting strategy is set to ReportingStrategy.Buffer.
- Apps targeting Android Marshmallow and above would need to request location permission
  from user.
- Push Notifications will work as expected when the app is in foreground. However,
  they will not be shown when the app is in background.
- Congratulations! You have successfully integrated WebEngage with your app and are
  sending user session data to WebEngage. Please note that it may take up to a few
  minutes for data to reflect in your dashboard.
- If you have multiple apps, then you can use the same license code for all of them.
- Required only if you want to track location updates in background.
- Enables WebEngage SDK to request user to authorize for location on behalf of the
  app.
- 'Mandatory if: The app makes authorization request to always use location.'
- 'Mandatory if: The app makes authorization request to use location when the app
  is in use.'
- If you're using our India data center, please specify 'in' as the value for WEGEnvironment.
- Ensure that you are using Auth Keys instead of APNS Certificates for Push Notifications.
- All user related APIs are part of WebEngage Xamarin.iOS SDK's WEGUser object.
- Value of `String` type attributes must be less than 1000 characters long. Additional
  characters will be truncated.
- User Attribute names are case sensitive and must be less than 50 characters long.
  `String` attribute values must be less than 1000 characters long. Additional characters
  will be truncated.
- Event Attribute names are case sensitive and must be less than 50 characters long.
- Complex attributes cannot be used for creating segments.
- Make sure to replace YOUR_WEBENGAGE_LICENSE_CODE with your actual WebEngage license
  code.
- Depending on your data center location, set ENVIRONMENT_VALUE to either 'us' or
  'in' or 'ksa'.
- WebEngage Xamarin.iOS SDK does not require APIs to pass the device registration
  token or APNs message.
- If AutoTrackUserLocationWithAccuracy is not called, then the SDK will track user
  location only if your app has permission to read the device location, with default
  accuracy WEGLocationAccuracy.ForCity.
- Check your package.json for '@capacitor/push-notifications' dependency
- If you have other push notification providers integrated, please follow Approach
  2
- Clients must explicitly ask permissions from end user to send push notifications
  in Android 13.
- Push permission prompt trigger should be managed by the app.
- This Unity Package is only for Android and will not work on any other platform.
- Make sure you replace 'YOUR_WEBENGAGE_LICENSE_CODE' with your WebEngage license
  code.
- Before continuing, please ensure that you have added the WebEngage library to your
  Application
- All WebEngage callbacks are called on the main thread. All callbacks must be registered
  as soon as the App launches before the `Webengage.engage()` call.
- Additional characters will be truncated in String attribute values that are more
  than 1000 characters long.
- Custom User Attributes must not start with 'we_' as they are reserved for internal
  use.
- String type attributes must be less than 1000 characters long. Additional characters
  will be truncated.
- Replace HOST with the applicable host.
- Replace YOUR_WEBENGAGE_LICENSE_CODE with your WebEngage license code.
- Replace YOUR_API_KEY with your WebEngage API key.
- Default API call rate limit is 5,000 per minute
- Uses FCM Unity Plugin for Push Notifications
- Notifications will not be shown when the app is in background; cached until the
  app is launched next
- This Unity Package is only for iOS and will not work on any other platform.
- This script is for removing unsupported architectures while exporting the build
  OR submitting the app to the app store.
- Replace <HOST> with the host mentioned here.
- Replace <YOUR_WEBENGAGE_LICENSE_CODE> with your WebEngage license code.
- Replace <YOUR_API_KEY> with your WebEngage API key.
- Replace <EXPERIMENT_ID> with the ID of the campaign which you would like to trigger
  via this API.
- User attribute names are case sensitive and must be less than 50 characters long.
- Files can be downloaded by accessing the fileAccessUrl with your API credentials.
- Find your WebEngage License Code and API Key
- Rate limit is 500 requests per minute
- Limit of 25 users/events per API call
- User can add a maximum of 5 recommendations per item or user ID
- file size for uploading is restricted to 200mb
- XML file format is not supported
- All user-related APIs are part of the WebEngage Capacitor library’s user object.
- Although ID can be any String that uniquely identifies users in your system, we
  recommend using system-generated user IDs from your database instead of information
  that can change over time such as email addresses, usernames, or phone numbers.
- Triggers on feedback submission.
- Triggers when a reply is posted to an existing feedback thread.
- Triggers when survey response is submitted.
- Triggers when the specified event gets logged into the system.
- '`eventName` or `eventAttributeName` must not start with `we_`. Names starting with
  `we_` are reserved exclusively for internal use at WebEngage.'
- Check your package.json for "@capacitor/push-notifications" dependency
- Refer to the "Making Your App Compatible with Android 13 Push Changes" section for
  guidance on supporting Android 13 and later devices.
- Clients will have to explicitly ask permissions from end user to send push notifications.
- If the user denies the permission, they will not receive push notifications.
- Our Segment.com integration works only for native iOS and Android apps. It cannot
  be used for integrating mobile apps built on React Native, Flutter, Xamarin and
  Unity.
- Integration does not support Push and In-app Messaging.
- All callbacks must be registered as soon as the App launches before the Webengage.engage()
  call.
- Leave the field, License Code blank.
- Advanced Integration enables you to send user data and events data through your
  website, app, server and leverage all the channels of engagement in your WebEngage
  dashboard including, Push, In-app, SMS, On-site, Web Push, Email, WhatsApp and Facebook
  retargeting.
- User attributes are tracked for both anonymous and known users.
- Replace HOST with the applicable host
- Replace YOUR_WEBENGAGE_LICENSE_CODE with your WebEngage license code
- Replace YOUR_API_KEY with your WebEngage API key
- Must not create System Events through the API to avoid confusion.
- Names starting with 'we_' are reserved exclusively for internal use at WebEngage.
- This API can be used only for triggering Transactional campaigns which are in Running
  state.
- Default API call rate limit is 100 per minute.
- 'Custom Event Attributes can be of these data types: NSString, NSNumber, NSDate,
  NSArray.'
- If an Event Attribute value is NSArray or NSDictionary, then it cannot be used to
  create segments.
- You can use macros in these URLs, which are dynamically populated with the appropriate
  values that Attribution Analytics collects from the device.
- Make sure to replace `ResponseId` with the survey response ID and `YOUR_API_KEY`
  with your WebEngage API key.
- If your WebEngage dashboard URL starts with, dashboard.webengage.com, then it means
  that you're using our US/ Global data center.
- If your WebEngage dashboard link starts with, dashboard.in.webengage.com, then it
  means that you're using our India data center.
- If your WebEngage dashboard link starts with, dashboard.ksa.webengage.com, then
  it means that you're using our Saudi Arabia data center.
- Mixpanel only exports identified user profiles to match to WebEngage - users without
  user profiles will not export.
- The exported users are properly mapped in WebEngage's system only if the distinct_id
  in Mixpanel and the user ID in WebEngage have the same value.
- Rate limit is 500 requests per minute.
- Limit of 25 users/events per API call.
- You must enable this integration in each Amplitude project that you want to use
  it in.
- You need a paid WebEngage plan to enable this integration.
- Clients are asked to ensure the accuracy, quality, and proper formatting as specified.
- File generated would have new-line delimited JSON format - Each exported record’s
  JSON will occupy a single line and separated using a new line.
- Attributes with null values will not be exported. No option to include null values.
- Webhook requests will be posted to a URL configured by you
- Event-specific data will vary based on the registered webhook
- Only one event can be added at a time.
- The service provider will be provided with a security token which needs to be included
  as a Authorization header in the POST request of DSNs.
- Currently, only JSON response format is supported.
- User and event data from your Shopify store has now started flowing into your WebEngage
  project.
- Service provider operates in private beta mode for mutual clients.
- WSP needs to handle the entire message.
- Our Segment.com integration works only for native iOS and Android apps.
- With Basic Integration you will not be able to engage app users through Push Notifications
  and In-app Messages.
- Uses WhatsApp Business Number to send messages
- Template data must follow whitelisted templates
- Uses API version 1.0 for requests
- Must read the concepts related to Users and Events before proceeding.
- Advanced Integration enables sending user data and events data through website,
  app, server.
- DSN Token will be provided once the integration and testing are done by the WebEngage
  team.
- The token should not be shared to ensure security.
- For apps integrated with WebEngage's IN environment, add the appropriate key-value
  under `info.plist` file of your application.
- For apps integrated with WebEngage's KSA environment, add the appropriate key-value
  under `info.plist` file of your application.
- The request authentication method can be either Basic authentication or Bearer authentication.
- CampaignType is always 'PROMOTIONAL'.
- Replace '_YOUR_LICENSE_CODE_' with your account's license code.
- WebEngage supports SSO using the SAML2 protocol.
- Minor misconfigurations in SAML2 might result in the login not working. We do not
  support two-way certificates at this point.
- If an Event Attribute value is List or Map, then it cannot be used to create segments.
- WebEngage is fully GDPR compliant.
- APIs are available to erase personal data and mark user profiles as restricted.
- Default rate limit for GDPR API is 100 per minute.
- Add WebEngage API Key under the field, api_key.
- 'Region field is case-sensitive: IN for India Data Center, US for USA Data Center,
  KSA for Saudi Arabia Data Center.'
- You can use macros in these URLs, which are dynamically populated with the appropriate
  values that Attribution Analytics collects from the device (or receives on click,
  etc.).
- Please ensure that you replace WEBENGAGE_API_KEY (placed at the end of the URL)
  with your WebEngage API Key.
- The API must be initialized before making any calls.
- You will need your WebEngage registered website's licenseCode to initialize the
  API.
- Data can be hosted in the US, Saudi Arabia, or India data centers.
- 'Select the appropriate region for your data center: in for India, ksa for Saudi
  Arabia, us for the US.'
- Only identified user profiles are exported.
- Cohorts can be exported as one-time exports or dynamic sync.
- This code loads and initializes WebEngage Widget asynchronously, so it does not
  block loading of your web page.
- Property used only at the init time, changing this property later will have no effect
- Ensure to set the license code for operations.
- Optimized SDK authentication flow.
- The service provider is required to POST Delivery Status Notifications (DSNs) on
  the static endpoint.
- The security token will be provided and needs to be included as an Authorization
  header in the POST request.
- Handled Runtime Location Permission in Marshmallow.
- Added custom deep link support.
- Handling of SDK version for backward compatibility.
- Added "setAction()" method in "CallToAction" class that allows overriding the deep
  link or external URL received for a particular push or in-app.
- Handling of Doze mode in Marshmallow.
- Added `setEveryActivityIsScreen()` method to "WebEngage" class.
- Ensure to replace YOUR_WEBENGAGE_LICENSE_CODE with your WebEngage license code.
- Uses SDK for tracking user data and sessions
- Support added for `session_timeout` configuration via Info.plist
- Optimized SDK authentication flow
- Changes with respect to Android 13 update
- Collecting Push opt-ins in run time through push permission pop-up
- Debug logs from WebEngage SDK are printed if the value of debug is true. Default
  value of this tag is false.
- WSP needs to reply synchronously to the message with Status Codes provided in the
  documentation.
- WSP will handle the entire message from WebEngage.
- Uses versioning in the payload contract
- Campaign type can be either PROMOTIONAL or TRANSACTIONAL
- Uses WebEngage SDK for in-app notifications
- Location based features will work as long as the app has requisite permissions
- 'Uses Content-Type: application/json in headers'
- WebEngage allows RSP to accept parameters in the payload request.
- The Content-Type header will always be application/json.
- CampaignType is always PROMOTIONAL
- RSP must send DSN to respective server based on location
- Minor misconfigurations in SAML2 might result in the login not working.
- We do not support two-way certificates at this point.
- Data Subjects are the end-users whose personal data is being processed.
- The method provides hooks and options to override the default behaviour.
- Uses JavaScript API for notifications.
- Optimization for App In-line campaigns rendering.
- Supports JWT based optional authentication security layer.
- All callbacks implementation must reside in the main package of the application.
- Renamed ActionButton class to CallToAction.
- Uses event reporting strategy — allows sync behavior adjustments during runtime
- Default reporting strategy is set to BUFFER
- Support added for session_timeout configuration via Info.plist.
- Viber channel dependencies added.
- GAID changes to support for Google Families Policy restriction where advertising
  ID cannot be tracked for users of unknown age and children.
- Fixes and optimizations relation to In-app notifications.
- WebEngage SDK automatically creates a unique ID (LUID) which is used to uniquely
  identify users.
- An ID can be of maximum 100 characters.
- Initial Release.
- Supports WebEngage Android SDK v3.18+
- Supports WebEngage iOS SDK v5.0+
- Ensure to track data attributes for targeted notifications and feedback routing
- Customizing Push Notifications requires specific configuration.
- Step-by-step guide to configuring Push as a channel
errors:
- '404: API call fails if incorrect License Code is used'
- '401: API call fails if incorrect API Key is used or not added'
- '400: Invalid resource/parameters'
- '401: Invalid authentication/access'
- '404: Invalid URL'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your API key or token.'
- '404 Not Found: The requested endpoint does not exist.'
- 'USER_NOT_FOUND: Check if the user ID is correct'
- 'INVALID_CUID: Ensure the CUID is unique and valid'
- 'INVALID_NOTIFICATION_ID: Ensure the notificationId is correct.'
- 'SKIP_RULES_ERROR: Check the skipRules flag if notifications are not showing.'
- '401 Unauthorized: Check your API key and permissions.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: Try again later.'
- 'REQUEST_LIMIT_EXCEEDED: WebEngage automatically retries failed requests due to
  rate limit errors.'
- '400 Bad Request: Invalid event name or attribute.'
- '401 Unauthorized: Check API key or token.'
- 'Rate limit exceeded: WebEngage tries again with a delay. After ten retries, the
  notification will be marked as failed.'
- 'BAD_REQUEST: Invalid parameters supplied'
- 'UNAUTHORIZED: Authentication credentials are missing or invalid'
- 'Invalid credentials: Verify that the Android app Package Name and FCM Server Key
  are correctly entered.'
- 'timeout: Campaign failed to render in set time.'
- 'missingTargetView: Target property missing.'
- 'campaignFetchingFailed: Campaign fetching failed.'
- 'resourceFetchingFailed: Resource fetching failed.'
- Make sure that the user is opted out from receiving push notifications from WebEngage.
- If the status is Failed, contact WebEngage support at support@webengage.com.
- Event Logging failed, scheduling next sync
- Android credentials could not be saved as the values entered are invalid
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify OAuth token'
- '404 Not Found: Endpoint does not exist'
- 'Event Logging failed, scheduling next sync: Indicates that events tracked in SDK
  are not being successfully reported to WebEngage servers.'
- '400 Bad Request: Ensure all required parameters are included.'
- '401 Unauthorized: Check token validity or scopes.'
- 'Not Registered: Ensure users were not created while testing on a simulator.'
- 'APNs Registration Failed: Check the error_description attribute for details.'
- 'Not Registered: Ensure users were not created while testing the integration on
  a simulator.'
- 'APNs Registration Failed: Check the error_description attribute in the APNs Registration
  Failed event.'
- 'timeout: The campaign failed to render in a set time.'
- SDK Integration is not complete. Validations failed
- 'Wrong Content-Type Selected: Ensure SMS content is applied under service implicit
  or explicit category.'
- 'Brand Name not Added: Brand name is mandatory in SMS content template.'
- 'No header associated with the brand name: Ensure you have a Header/Sender Id for
  the brand name.'
- '2001: Pinpoint account is not accessible for the Region specified during configuration.'
- '2002: Pinpoint account is not linked to a Kinesis Firehose Data Stream.'
- '2003: The Kinesis Firehose Data Stream linked to your Pinpoint account was not
  found.'
- '2004: The linked Kinesis Firehose Data Stream is Inactive.'
- '2005: No HTTP destination has been configured in the Kinesis Firehose Data Stream
  linked to your Pinpoint account.'
- '2006: The HTTP destination configured for your Kinesis Firehose Data Stream does
  not match the WebEngage tracker endpoint URL.'
- '2000: Insufficient Credits'
- '2003: Invalid Mobile Number'
- '2006: User Registered for NDNC'
- '2008: Message Expired'
- '2009: Undelivered'
- '2015: Message was Rejected'
- '2016: Time to Live Expired (DND Queue Drop / FC Queue Drop)'
- '2020: Throttling Error'
- '2021: Duplicate'
- '9988: Other Failures'
- Delivery failure due to DLT Scrubbing if PE ID is not included in the message payload.
- 'Wrong Content-Type Selected: Your SMS content should be applied under service implicit
  or explicit category only.'
- 'Brand Name not Added: Adding Brand name in an SMS content template is mandatory
  and should be explicitly mentioned in the SMS body.'
- 'No header associated with the brand name: You do not have a Header/ Sender Id of
  the brand name you wish to have a template of.'
- If your URL contains a query parameter ‘?’ then you may need to whitelist the long
  URL.
- '2003: The Kinesis Firehose Data Stream linked to your Pinpoint account was not
  found (doesn''t exist).'
- '2001: The IP has not been whitelisted'
- '2007: Maximum length of the message body has been exceeded'
- '2010: Unsupported payload version'
- Web Push Notifications cannot be delivered in private browsing sessions.
- '9002: Message sending quota exceeded'
- '9022: Unsupported or unknown version'
- 'Invalid API Key: Ensure that the API Key is correct.'
- 'Rate limit exceeded: Throttle your requests to stay within the limits.'
- '0: Message delivery is successful!'
- '2000: Insufficient credit balance'
- '2002: Empty message body'
- '2003: Invalid mobile number'
- '2004: Invalid Business Number'
- '2005: Authorization failure'
- '2006: User blocked the Business Number'
- '2008: The message has expired'
- '2009: The message was not delivered by the operator'
- '2010: Payload version unsupported'
- '2011: Authentication failure'
- '2014: Maximum number of retries to send the message have been exhausted.'
- '2015: Throttling error.'
- '2019: The message format is invalid'
- '2021: Template Missing'
- '2022: Template Parameter Format Mismatch'
- '2023: Template did not match'
- '2024: User isn''t opted in for template message'
- '2025: User is not Opted in and is inactive'
- '9988: For outcomes not covered above.'
- '0: To be sent in case of success'
- '1000: Insufficient credit balance'
- '1001: Number is RCS Disabled'
- '1002: Entity was not found'
- '1003: Template code with bot doesn’t exist'
- '9988: For outcomes not covered, include the appropriate error description in the
  ''message'' field of the response'
- '2019: Credit Insufficient'
- '2020: Message Empty'
- '2021: Mobile Number Invalid'
- '2022: Sender Id is Invalid'
- '2006: Exceeding max length'
- '2007: Expired'
- '2008: Undelivered'
- '2009: Version Unsupported'
- '2017: Invalid Message Format'
- '2011: Others'
- '2012: DND Time'
- '2013: Maximum Retries Exhausted'
- '2014: Rate Limit Exceeded'
- '2015: TTL Expired'
- '2016: Retries Expired'
- '2023: Template Missing'
- '2024: Template Paramenter Format Mismatch'
- '2025: User not Opted in or Inactive'
- '400 Bad Request: Check the request structure and required fields.'
- '401 Unauthorized: Ensure valid authentication credentials.'
- '500 Internal Server Error: Retry the request after some time.'
- '2010: Payload version unsupported.'
- 'Invalid RCS campaign data: Ensure all required fields are filled correctly.'
- '400: Version not supported'
- '401: Authorization failure'
- '429: Invalid Message Format'
- 'Invalid_User_ID: Check the format of the user ID'
- 'Unauthorized: Ensure API key is valid'
- Custom Event Attribute values of Array or Object cannot be used to create segments.
- 'INVALID_CALLBACK: Ensure the callback methods are correctly implemented.'
- 'CALLBACK_NOT_REGISTERED: Register your callbacks before invoking.'
- '401 Unauthorized: Token may have expired or is invalid.'
- '404 Not Found: The user or resource you are trying to access does not exist.'
- '400 Bad Request: Check if required fields are provided.'
- '401 Unauthorized: Recheck OAuth token.'
- 'USER_NOT_FOUND: Ensure user ID is correct'
- 'INVALID_ATTRIBUTE: Check the attribute name or value length'
- '400 Bad Request: Check for validation errors in event names or attributes.'
- 'Invalid API Key: Check your API key and try again'
- 'Unauthorized: Ensure proper authentication'
- 'Invalid Event Name: Ensure the event name is less than 50 characters.'
- 'Invalid Attribute Name: Event attribute names must not start with ''we_''.'
- userId and anonymousId cannot be empty.
- 'Error: userId and anonymousId cannot be empty.'
- '100 per minute: Default API call rate limit.'
- '400: The request was not in an acceptable format. Possible reasons are missing
  parameters, bad structure etc.'
- '404: The request resources do not exist. Possible reasons are user does not exist,
  invalid campaign ID etc.'
- '408: The TTL of the request expired while calling the WebEngage API.'
- '412: Certain conditional checks failed for this request. One of the reasons can
  be that user is not reachable on that channel.'
- '5xx: Something went wrong at WebEngage''s end. Please reach out to support@webengage.com
  in case you encounter this issue'
- '400 Bad Request: Check the request parameters and payload'
- '400 Bad Request: Check the request body for correct parameters.'
- '404 Not Found: The specified endpoint does not exist.'
- 'Default API call rate limit: 5,000 per minute'
- '400 Bad Request: Check if required parameters are provided.'
- '401 Unauthorized: Recheck API key or authentication method.'
- '5xx: Something went wrong at WebEngage''s end. Please reach out to support@webengage.com
  in case you encounter this issue.'
- queued
- Responses with HTTP Status 200 will be treated as successful posts
- '2004: Invalid Sender ID'
- '2006: User under DND'
- '2008: The message has been expired'
- '3000: Recipient Blacklisted'
- '1000: Success'
- '9022: Unsupported version'
- 'whatsapp_rejected: Not enough credit to send message'
- 'whatsapp_rejected: Version not supported'
- '2011: Authentication failure (e.g. mobile number might be unverified)'
- 'Version not supported: Ensure the payload version matches the API contract.'
- 'Insufficient credit balance: Check account balance.'
- 'Invalid Message Format: Ensure the payload structure is correct.'
- '400 Bad Request: Verify request parameters and body format.'
- '401 Unauthorized: Check OAuth token and permissions.'
- '404 Not Found: Ensure the requested resource exists.'
- '400 Bad request: If the request status is not Pending.'
- '404 Not Found: GDPR request not found.'
- '500 Server error: Unforeseen service issues.'
- '400 Bad request: If the request status is not `Pending`.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify your license code.'
- '2010: Payload version unsupported.   In this case the supportedVersion is to be
  sent mandatorily, i.e., the version supported by the service provider.'
- Bug fixes and optimizations
- '9001: Throttling error'
- '9003: Authentication failure'
- '9004: Recipient address not specified'
- '9005: From field missing'
- '9006: Soft bounce'
- '9007: Hard bounce'
- '9008: Email reported as spam'
- '9009: Email unsubscribed'
- '9010: Email in suppression list'
- '9011: Sender address not verified'
- '9012: ESP rejected message'
- '9013: Request to ESP expired'
- '9014: ESP unavailable'
- '9015: IP not whitelisted with ESP'
- '9016: Subject field empty'
- '9017: Invalid sender address'
- '9018: Invalid email address'
- '9019: Recipient’s mailbox is full'
- '9020: Error processing email at Private ESP'
- '9021: Mailbox was not found on email server'
- '9024: Authorization failure'
- '9452: Message overloading'
- '9512: Host email server not found'
- '9999: Unknown error occurred'
- '0: Success'
- '400 Bad request: If the request status is not Pending'
- '404 Not Found: GDPR request not found'
- '500 Server error: Unforeseen service issues'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: Ensure the endpoint is correct.'
- '400 Bad Request: Check the request parameters and payload structure'
- '404 Not Found: Verify the endpoint path'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - Auth token
  - IPushNotificationCallbacks
  - IInAppNotificationCallbacks
  - NamedCredential
client:
  base_url: https://dashboard.webengage.com
  auth:
    type: oauth2
source_metadata: null
