resources:
- name: firmware_update
  endpoint:
    path: /firmware/update
    method: POST
    data_selector: status
    params:
      image: string
      emergency: bool
      status_callback: callable
      progress_callback: callable
- name: SensorBridgeCmdBaudrate
  endpoint:
    path: /modules/sensirion_shdlc_sensorbridge/commands/baudrate
    method: GET
- name: SensorBridgeCmdSetBaudrate
  endpoint:
    path: /modules/sensirion_shdlc_sensorbridge/commands/baudrate
    method: GET
- name: SensorBridgeCmdSetPortVoltageBase
  endpoint:
    path: /modules/sensirion_shdlc_sensorbridge/commands/set_port_voltage
    method: GET
- name: SensorBridgeCmdSetPortVoltage
  endpoint:
    path: /modules/sensirion_shdlc_sensorbridge/commands/set_port_voltage
    method: GET
- name: port_voltage_on_off
  endpoint:
    path: /commands/port_voltage_on_off
    method: GET
- name: set_i2c_frequency
  endpoint:
    path: /commands/set_i2c_frequency
    method: GET
- name: i2c_scan
  endpoint:
    path: /commands/i2c_scan
    method: GET
    data_selector: data
    params: {}
- name: i2c_repeated_transceive
  endpoint:
    path: /commands/i2c_repeated_transceive
    method: GET
- name: read_buffer
  endpoint:
    path: /commands/read_buffer
    method: GET
- name: spi_transceive
  endpoint:
    path: /commands/spi_transceive
    method: GET
    data_selector: payload
    params: {}
- name: blink
  endpoint:
    path: /commands/blink
    method: GET
    data_selector: payload
    params: {}
- name: analog_measurement
  endpoint:
    path: /commands/analog_measurement
    method: GET
    data_selector: response
    params: {}
- name: device
  endpoint:
    path: /sensorbridge/device
    method: GET
    data_selector: device_data
    params: {}
- name: firmware_update
  endpoint:
    path: /firmware/update
    method: POST
    data_selector: response
    params: {}
- name: get_article_code
  endpoint:
    path: /device/article_code
    method: GET
    data_selector: response
    params: {}
- name: get_product_name
  endpoint:
    path: /device/product_name
    method: GET
    data_selector: response
    params: {}
- name: get_product_type
  endpoint:
    path: /device/product_type
    method: GET
    data_selector: response
    params: {}
- name: get_serial_number
  endpoint:
    path: /device/serial_number
    method: GET
    data_selector: response
    params: {}
- name: get_version
  endpoint:
    path: /device/version
    method: GET
    data_selector: response
    params: {}
- name: last_error_flag
  endpoint:
    path: /device/last_error_flag
    method: GET
    data_selector: response
    params: {}
- name: set_baudrate
  endpoint:
    path: /device/baudrate
    method: POST
    data_selector: response
    params: {}
- name: set_slave_address
  endpoint:
    path: /device/slave_address
    method: POST
    data_selector: response
    params: {}
- name: device_information
  endpoint:
    path: /commands/device_information
    method: GET
    data_selector: data
    params: {}
- name: get_version
  endpoint:
    path: /commands/get_version
    method: GET
    data_selector: data
    params: {}
- name: get_version
  endpoint:
    path: /commands/get_version
    method: GET
    data_selector: interpret_response
    params: {}
- name: set_slave_address
  endpoint:
    path: /commands/slave_address/set
    method: POST
    data_selector: interpret_response
    params: {}
- name: set_baudrate
  endpoint:
    path: /commands/baudrate/set
    method: POST
    data_selector: interpret_response
    params: {}
- name: set_port_voltage
  endpoint:
    path: /commands/set_port_voltage
    method: GET
    data_selector: records
- name: port_voltage_on_off
  endpoint:
    path: /commands/port_voltage_on_off
    method: GET
    data_selector: records
- name: set_i2c_frequency
  endpoint:
    path: /commands/set_i2c_frequency
    method: GET
    data_selector: records
- name: set_i2c_frequency
  endpoint:
    path: /commands/set_i2c_frequency
    method: GET
    data_selector: data
- name: i2c_scan
  endpoint:
    path: /commands/i2c_scan
    method: GET
    data_selector: data
- name: i2c_transceive
  endpoint:
    path: /commands/i2c_transceive
    method: GET
    data_selector: data
- name: SensorBridgeCmdReadBuffer
  endpoint:
    path: /commands/read_buffer
    method: GET
- name: SensorBridgeCmdStopRepeatedTransceive
  endpoint:
    path: /commands/stop_repeated_transceive
    method: GET
- name: SensorBridgeCmdSpiConfig
  endpoint:
    path: /commands/spi_config
    method: GET
- name: SensorBridgeCmdSpiConfig
  endpoint:
    path: /commands/spi_config
    method: POST
    data_selector: parameters
    params: {}
- name: SensorBridgeCmdSpiTransceive
  endpoint:
    path: /commands/spi_transceive
    method: POST
    data_selector: parameters
    params: {}
- name: SensorBridgeCmdBlink
  endpoint:
    path: /commands/blink
    method: POST
    data_selector: parameters
    params: {}
- name: SensorBridgeShdlcDevice
  endpoint:
    path: /modules/sensirion_shdlc_sensorbridge/device
    method: GET
    data_selector: device
    params: {}
- name: device_information
  endpoint:
    path: /commands/device_information
    method: GET
- name: get_version
  endpoint:
    path: /commands/get_version
    method: GET
- name: set_port_voltage
  endpoint:
    path: /commands/set_port_voltage
    method: GET
- name: port_voltage_on_off
  endpoint:
    path: /commands/port_voltage_on_off
    method: GET
- name: set_i2c_frequency
  endpoint:
    path: /commands/set_i2c_frequency
    method: GET
- name: set_i2c_frequency
  endpoint:
    path: /commands/set_i2c_frequency
    method: GET
    data_selector: data
    params: {}
- name: i2c_scan
  endpoint:
    path: /commands/i2c_scan
    method: GET
    data_selector: data
    params: {}
- name: i2c_transceive
  endpoint:
    path: /commands/i2c_transceive
    method: GET
    data_selector: data
    params: {}
- name: read_buffer
  endpoint:
    path: /commands/read_buffer
    method: GET
    data_selector: data
    params: {}
- name: stop_repeated_transceive
  endpoint:
    path: /commands/stop_repeated_transceive
    method: GET
    data_selector: data
    params: {}
- name: spi_config
  endpoint:
    path: /commands/spi_config
    method: GET
    data_selector: data
    params: {}
- name: SensorBridgeCmdSpiConfig
  endpoint:
    path: /commands/spi_config
    method: POST
    data_selector: command_data
- name: SensorBridgeCmdSpiTransceive
  endpoint:
    path: /commands/spi_transceive
    method: POST
    data_selector: command_data
- name: SensorBridgeCmdBlink
  endpoint:
    path: /commands/blink
    method: POST
    data_selector: command_data
- name: SensorBridgeShdlcDevice
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: firmware_update
  endpoint:
    path: /firmware/update
    method: POST
    data_selector: response
    params:
      emergency: 'False'
- name: get_serial_number
  endpoint:
    path: /device/get_serial_number
    method: GET
    data_selector: serial_number
    params: {}
- name: get_version
  endpoint:
    path: /device/get_version
    method: GET
    data_selector: version
    params: {}
- name: device_errors
  endpoint:
    path: /device_errors
    method: GET
    data_selector: error
- name: device_information
  endpoint:
    path: /device_information
    method: GET
    data_selector: information
- name: get_version
  endpoint:
    path: /commands/get_version
    method: GET
    data_selector: response
    params: {}
- name: slave_address
  endpoint:
    path: /commands/slave_address
    method: GET
    data_selector: response
    params: {}
- name: baudrate
  endpoint:
    path: /commands/baudrate
    method: GET
    data_selector: records
    params: {}
- name: set_port_voltage
  endpoint:
    path: /commands/set_port_voltage
    method: GET
    data_selector: records
    params: {}
- name: i2c_scan
  endpoint:
    path: /sensirion_shdlc_sensorbridge/commands/i2c_scan
    method: GET
    data_selector: data
    params: {}
- name: i2c_transceive
  endpoint:
    path: /commands/i2c_transceive
    method: GET
    data_selector: records
- name: i2c_repeated_transceive
  endpoint:
    path: /commands/i2c_repeated_transceive
    method: GET
- name: read_buffer
  endpoint:
    path: /commands/read_buffer
    method: GET
- name: stop_repeated_transceive
  endpoint:
    path: /commands/stop_repeated_transceive
    method: GET
- name: spi_config
  endpoint:
    path: /commands/spi_config
    method: GET
- name: spi_transceive
  endpoint:
    path: /spi/transceive
    method: POST
    data_selector: data
    params: {}
- name: blink
  endpoint:
    path: /blink
    method: POST
    data_selector: data
    params: {}
- name: analog_measurement
  endpoint:
    path: /commands/analog_measurement
    method: POST
    data_selector: data
    params: {}
- name: SensorBridgeCmdFirmwareUpdateBase
  endpoint:
    path: firmware_update
    method: POST
- name: SensorBridgeCmdEnterBootloader
  endpoint:
    path: enter_bootloader
    method: POST
- name: SensorBridgeCmdStartUpdate
  endpoint:
    path: start_update
    method: POST
- name: SensorBridgeCmdUpdateData
  endpoint:
    path: update_data
    method: POST
- name: SensorBridgeCmdStopUpdate
  endpoint:
    path: stop_update
    method: POST
- name: get_serial_number
  endpoint:
    path: /get_serial_number
    method: GET
    data_selector: response
- name: blink_led
  endpoint:
    path: /blink_led
    method: POST
    data_selector: response
- name: measure_voltage
  endpoint:
    path: /measure_voltage
    method: POST
    data_selector: response
- name: set_supply_voltage
  endpoint:
    path: /set_supply_voltage
    method: POST
    data_selector: response
- name: switch_supply_on
  endpoint:
    path: /switch_supply_on
    method: POST
    data_selector: response
- name: switch_supply_off
  endpoint:
    path: /switch_supply_off
    method: POST
    data_selector: response
- name: set_i2c_frequency
  endpoint:
    path: /set_i2c_frequency
    method: POST
    data_selector: response
- name: scan_i2c
  endpoint:
    path: /scan_i2c
    method: POST
    data_selector: response
- name: transceive_i2c
  endpoint:
    path: /transceive_i2c
    method: POST
    data_selector: response
- name: start_repeated_i2c_transceive
  endpoint:
    path: /start_repeated_i2c_transceive
    method: POST
    data_selector: response
- name: stop_repeated_i2c_transceive
  endpoint:
    path: /stop_repeated_i2c_transceive
    method: POST
    data_selector: response
- name: read_buffer
  endpoint:
    path: /read_buffer
    method: POST
    data_selector: response
- name: set_spi_config
  endpoint:
    path: /set_spi_config
    method: POST
    data_selector: response
- name: transceive_spi
  endpoint:
    path: /transceive_spi
    method: POST
    data_selector: response
- name: update_firmware
  endpoint:
    path: /update_firmware
    method: POST
    data_selector: response
- name: firmware_update
  endpoint:
    path: /firmware/update
    method: POST
    data_selector: response
    params: {}
- name: get_article_code
  endpoint:
    path: /device/get_article_code
    method: GET
    data_selector: response
    params: {}
- name: get_product_name
  endpoint:
    path: /device/get_product_name
    method: GET
    data_selector: response
    params: {}
- name: get_product_type
  endpoint:
    path: /device/get_product_type
    method: GET
    data_selector: response
    params: {}
- name: get_serial_number
  endpoint:
    path: /device/get_serial_number
    method: GET
    data_selector: response
    params: {}
- name: get_version
  endpoint:
    path: /device/get_version
    method: GET
    data_selector: response
    params: {}
- name: last_error_flag
  endpoint:
    path: /device/last_error_flag
    method: GET
    data_selector: response
    params: {}
- name: set_baudrate
  endpoint:
    path: /device/set_baudrate
    method: POST
    data_selector: response
    params: {}
- name: set_slave_address
  endpoint:
    path: /device/set_slave_address
    method: POST
    data_selector: response
    params: {}
- name: device_errors
  endpoint:
    path: /device_errors
    method: GET
    data_selector: errors
    params: {}
- name: device_information
  endpoint:
    path: /device_information
    method: GET
    data_selector: information
    params: {}
- name: get_version
  endpoint:
    path: /commands/get_version
    method: GET
    data_selector: data
    params: {}
- name: slave_address
  endpoint:
    path: /commands/slave_address
    method: GET
    data_selector: data
    params: {}
- name: port_voltage_on_off
  endpoint:
    path: /commands/port_voltage_on_off
    method: GET
- name: set_i2c_frequency
  endpoint:
    path: /commands/set_i2c_frequency
    method: GET
- name: i2c_scan
  endpoint:
    path: /sensirion_shdlc_sensorbridge/commands/i2c_scan
    method: GET
    data_selector: data
    params: {}
- name: i2c_transceive
  endpoint:
    path: /commands/i2c_transceive
    method: GET
    data_selector: data
- name: i2c_repeated_transceive
  endpoint:
    path: /sensirion_shdlc_sensorbridge/commands/i2c_repeated_transceive
    method: GET
- name: read_buffer
  endpoint:
    path: /sensirion_shdlc_sensorbridge/commands/read_buffer
    method: GET
- name: stop_repeated_transceive
  endpoint:
    path: /commands/stop_repeated_transceive
    method: POST
- name: spi_config
  endpoint:
    path: /commands/spi_config
    method: POST
- name: spi_transceive
  endpoint:
    path: /commands/spi_transceive
    method: GET
- name: blink
  endpoint:
    path: /commands/blink
    method: GET
- name: analog_measurement
  endpoint:
    path: /commands/analog_measurement
    method: GET
    data_selector: data
    params: {}
notes:
- This is a low-level driver which just provides all SHDLC commands as Python methods.
- There is no (or very few) caching functionality in this driver.
- This can take several minutes, don’t abort it! If aborted, the device stays in the
  bootloader and you need to restart the update with emergency=True to recover.
- If the SEK-SensorBridge is connected through RS485 together with other SHDLC devices
  on the same bus, make sure that no other device has the slave address 0 and baudrate
  115200!
- I2C scan command scans for devices within a specified address range.
- Measured voltage is always positive and in the range of 0-5.5V.
errors:
- 'ShdlcFirmwareImageIncompatibilityError: If the image is not compatible with the
  connected device.'
- 'Exception: On other errors.'
- I2C transceive error.
- I2C transceive NACK error.
- I2C transceive timeout error.
- I2C repeated transceive timing error.
- Functionality not implemented.
- No more periodic measurements possible.
- Frame checksum error.
- Frame size info mismatch.
- I2C NACK.
- I2C timeout.
- 'SensorBridgeFunctionalityNotImplementedError: SHDLC device error for functionality
  not implemented.'
- 'SensorBridgeNoMorePeriodicMeasurementsPossibleError: SHDLC device error for no
  more periodic measurements possible.'
- 'SensorBridgeFrameChecksumError: SHDLC device error for frame checksum error.'
- 'SensorBridgeFrameSizeInfoMismatchError: SHDLC device error for frame size info
  mismatch.'
- 'SensorBridgeI2cNackError: SHDLC device error for I2C NACK.'
- 'SensorBridgeI2cTimeoutError: SHDLC device error for I2C timeout.'
- 'SensorBridgeFatalError: SHDLC device error for fatal errors.'
- SensorBridgeI2cError
- SensorBridgeI2cNackError
- SensorBridgeI2cTimeoutError
- SensorBridgeI2cTimingError
- SensorBridgeFunctionalityNotImplementedError
- SensorBridgeNoMorePeriodicMeasurementsPossibleError
- SensorBridgeFrameChecksumError
- SensorBridgeFrameSizeInfoMismatchError
- 'ShdlcResponseError: If length is wrong'
auth_info:
  mentioned_objects: []
client:
  base_url: https://sensirion.github.io/python-shdlc-driver
  auth:
    type: none
source_metadata: null
