resources:
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: Response
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
- name: threads
  endpoint:
    path: /threads
    method: POST
    data_selector: data
- name: messages
  endpoint:
    path: /threads/{thread_id}/messages
    method: GET
    data_selector: data
- name: cost
  endpoint:
    path: /threads/{thread_id}/cost
    method: GET
    data_selector: data
- name: analytics
  endpoint:
    path: /analytics
    method: POST
    data_selector: data
- name: analytics_summary
  endpoint:
    path: /analytics/summary
    method: POST
    data_selector: summary
- name: total_usage
  endpoint:
    path: /usage/total
    method: POST
    data_selector: total
- name: usage_by_model
  endpoint:
    path: /usage/models
    method: POST
    data_selector: models
- name: pricing
  endpoint:
    path: /pricing
    method: GET
    data_selector: model
- name: list_models
  endpoint:
    path: /models
    method: GET
    data_selector: data
- name: models
  endpoint:
    path: /admin/models
    method: POST
    data_selector: ''
    params: {}
- name: custom_prices
  endpoint:
    path: /projects/{project_id}/custom_prices
    method: POST
    data_selector: ''
    params: {}
- name: auto_router
  endpoint:
    path: /api/v1/auto_router
    method: POST
    data_selector: model
    params: {}
- name: completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
- name: agent_frameworks
  endpoint:
    path: /agent_frameworks
    method: GET
    data_selector: records
- name: weather_time_agent
  endpoint:
    path: /api/v1/weather_time_agent
    method: GET
    data_selector: report
    params: {}
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: data
    params: {}
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: data
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: output
    params: {}
- name: Web Agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: response
- name: Web Agent
  endpoint:
    params: {}
- name: Writer Agent
  endpoint:
    params: {}
- name: Research Team
  endpoint:
    params: {}
- name: crewai
  endpoint:
    path: /crewai
    method: POST
    data_selector: result
    params: {}
- name: research_task
  endpoint:
    path: /tasks/research
    method: POST
    data_selector: results
- name: planning_task
  endpoint:
    path: /tasks/planning
    method: POST
    data_selector: results
- name: crew
  endpoint:
    path: /crews
    method: POST
    data_selector: result
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: result
- name: task
  endpoint:
    path: /tasks
    method: POST
    data_selector: result
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: summary
- name: analytics_summary
  endpoint:
    path: /analytics/summary
    method: POST
    data_selector: summary
- name: research_task
  endpoint:
    path: /research
    method: POST
    data_selector: results
- name: planning_task
  endpoint:
    path: /planning
    method: POST
    data_selector: results
- name: user_analytics_summary
  endpoint:
    path: /analytics/summary
    method: POST
    data_selector: summary
- name: message
  endpoint:
    path: /api/messages
    method: POST
    data_selector: messages
- name: parameters
  endpoint:
    path: /api/v1/parameters
    method: GET
    data_selector: data
    params: {}
- name: trace
  endpoint:
    path: /api/v1/trace
    method: GET
    data_selector: data
    params: {}
- name: virtual_model
  endpoint:
    path: /models
    method: POST
    data_selector: model
    params: {}
- name: router
  endpoint:
    path: /router/auto
    method: POST
    data_selector: messages
- name: provider_routing
  endpoint:
    path: /features/provider-routing
    method: GET
    data_selector: providerRoutingExamples
    params: {}
- name: dynamic_router
  endpoint:
    path: /router/dynamic
    method: POST
    data_selector: model
- name: tracing
  endpoint:
    path: /api/v1/tracing
    method: GET
    data_selector: data
    params: {}
- name: virtual_mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: mcp_servers
- name: usage_total
  endpoint:
    path: /usage/total
    method: GET
    data_selector: total
    params: {}
- name: usage_models
  endpoint:
    path: /usage/models
    method: GET
    data_selector: models
    params: {}
- name: auto_router
  endpoint:
    path: /router/auto
    method: POST
    data_selector: data
- name: auto_router
  endpoint:
    path: /router/auto
    method: POST
    data_selector: model
    params: {}
- name: analytics
  endpoint:
    path: /analytics
    method: POST
    data_selector: summary
    params: {}
- name: analytics_summary
  endpoint:
    path: /analytics/summary
    method: POST
    data_selector: summary
    params: {}
- name: provider_routing
  endpoint:
    path: /api/v1/provider-routing
    method: POST
    data_selector: model
    params: {}
- name: analytics
  endpoint:
    path: /analytics
    method: GET
    data_selector: timeseries
    params: {}
- name: analytics_summary
  endpoint:
    path: /analytics/summary
    method: GET
    data_selector: summary
    params: {}
- name: dynamic_router
  endpoint:
    path: /router/dynamic
    method: POST
    data_selector: model
- name: mcp_server
  endpoint:
    path: /mcp_servers
    method: POST
    data_selector: mcp_servers
    params: {}
- name: usage_total
  endpoint:
    path: /usage/total
    method: GET
- name: usage_models
  endpoint:
    path: /usage/models
    method: GET
- name: analytics
  endpoint:
    path: /analytics
    method: POST
    data_selector: summary
    params: {}
- name: analytics_summary
  endpoint:
    path: /analytics/summary
    method: POST
    data_selector: summary
    params: {}
- name: analytics
  endpoint:
    path: /analytics
    method: GET
    data_selector: timeseries
    params: {}
- name: analytics_summary
  endpoint:
    path: /analytics/summary
    method: GET
    data_selector: summary
    params: {}
- name: chat_completion
  endpoint:
    path: /completions
    method: POST
    data_selector: choices
- name: analytics
  endpoint:
    path: /analytics
    method: GET
    data_selector: data
- name: User Roles
  endpoint:
    path: /user-roles
    method: GET
    data_selector: roles
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: analytics
  endpoint:
    path: /analytics
    method: GET
    data_selector: data
    params: {}
- name: chat_completions
  endpoint:
    path: /api/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: analytics
  endpoint:
    path: /api/analytics
    method: GET
    data_selector: data
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
- name: analytics
  endpoint:
    path: /v1/analytics
    method: GET
    data_selector: data
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: get_messages
  endpoint:
    path: /threads/{thread_id}/messages
    method: GET
    data_selector: messages
    params: {}
- name: get_usage
  endpoint:
    path: /threads/{thread_id}/usage
    method: GET
    data_selector: usage
    params: {}
- name: get_analytics
  endpoint:
    path: /analytics
    method: GET
    data_selector: analytics
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
- name: analytics
  endpoint:
    path: /analytics
    method: GET
    data_selector: data
- name: chat_completions
  endpoint:
    path: /api/chat/completions
    method: POST
    data_selector: choices
- name: analytics
  endpoint:
    path: /api/analytics
    method: GET
    data_selector: data
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: analytics
  endpoint:
    path: /analytics
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: model
  endpoint:
    path: /api/v1/models
    method: GET
    data_selector: data
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
- name: analytics
  endpoint:
    path: /analytics
    method: GET
    data_selector: data
- name: models
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: analytics
  endpoint:
    path: /v1/analytics
    method: GET
    data_selector: data
    params: {}
- name: trace
  endpoint:
    path: /tracing
    method: GET
    data_selector: traces
notes:
- Requires LangDB project ID in the header.
- The UI shows only a few router variations. For all available options and advanced
  configurations, use the API.
- Uses API key for authentication
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Multi-tenancy, advanced cost control, and rate limiting. Contact LangDB for access.
- For large-scale deployments, use ClickHouse Cloud.
- LangDB provides OpenAI-compatible APIs, enabling developers to connect with multiple
  LLMs by changing just two lines of code.
- Uses API key for authentication.
- Enable end-to-end tracing by using LangDBâ€™s init() integration.
- LangDBâ€™s ADK adapter captures request/response metadata, token usage, and latency
  metrics automatically.
- Requires setup of LangDB API key and project ID as environment variables
- Ensure to set your LangDB API key and project ID as environment variables.
- Initialize LangDB before configuring your LangChain/LangGraph.
- All calls to LLM, intermediate steps, tool executions, and nested chains are automatically
  traced and linked under a single session.
- LangDB automatically captures detailed traces of all agent interactions
- Uses OAuth2 with refresh token â€” requires setup of connected app in LangDB
- Some objects may return nulls in deeply nested fields
- Use environment variables for API keys and project ID.
- Requires setup of environment variables for API key and project ID
- Initialize tracing before configuring CrewAI code.
- Make sure to set environment variables for API key and project ID.
- Uses Bearer token for API access
- Messages define roles (`user`, `system`, `assistant`) to organize interactions clearly.
- Different roles (e.g., `system` for instructions, `user` for queries) enable complex
  workflows.
- Manage routing strategies easily in LangDB AI Gatewayâ€™s UI to boost efficiency,
  speed, and reliability in AI workflows.
- Supports parameters like temperature and max_tokens
- All chatCompletions requests to a Virtual Model endpoint automatically target the
  latest published version.
- Drafts and restored drafts never receive live traffic until published.
- LangDB provides a rich library of pre-built MCP servers.
- You can bring your own custom MCP server.
- Virtual models let you save, share, and reuse model configurations.
- Auto Router selects the most cost-effective model for queries
- Use model without provider â†’ LangDB does provider routing.
- Add :mode suffix â†’ pick between balanced, accuracy, cost, latency, or throughput.
- Use provider/model â†’ pin a specific provider directly.
- LangDB provides a rich library of pre-built MCP servers
- You can connect a custom MCP server to leverage all benefits of a Virtual MCP Server
- Provides detailed tracing to monitor, debug, and optimize LLM workflows.
- LangDB simplifies how you work with MCP servers.
- MCP allows models to dynamically process contextual data.
- Uses provider routing for optimal cost, latency, and accuracy.
- LangDB AI Gateway optimizes LLM selection based on cost, speed, and availability,
  ensuring efficient request handling.
- Guardrails cannot be applied to streaming outputs.
- Role Management is only available in Professional, Business, and Enterprise tiers.
- MCP simplifies request orchestration across distributed AI systems, enhancing interoperability
  and context-awareness.
- Available in Business & Enterprise tiers under User Management.
- Set daily, monthly, and total spending limits per project.
- Response caching is designed for faster response times, reduced compute cost, and
  consistent outputs when handling repeated or identical prompts.
- Only Admins can configure model access restrictions
- Restricted models return access denied errors
- API usage metrics are available through the analytics endpoints.
- Only Admins can configure project access - other roles cannot modify these settings
- Users without project access cannot make API calls to restricted projects
- Set your credentials using environment variables LANGDB_API_KEY and LANGDB_PROJECT_ID.
- Provides a detailed timeseries view of API usage metrics.
- Always initialize LangDB before importing any framework-specific classes to ensure
  proper instrumentation.
- Most providers automatically enable prompt caching for large prompts, but some,
  like Anthropic, require you to enable it on a per-message basis.
- Initialize LangDB with API key and project ID.
- Only Admins can set which models are allowed per project
- Only Admins can configure project access - other roles cannot modify these settings.
- Users without project access cannot make API calls to restricted projects.
- API key and project ID are required for authentication.
- Ensure LANGDB_API_KEY and LANGDB_PROJECT_ID are set
- Check that initialization functions are called before creating agents
- Verify collector endpoint is accessible
- Initialize LangDB integration before other instrumentation
- Requires AWS Cognito for authentication.
- Ensure to handle token expiration appropriately.
- Uses API key for authentication â€” set LANGDB_API_KEY environment variable.
- Use LANGDB_API_KEY and LANGDB_PROJECT_ID environment variables for configuration.
- All purchases are non-refundable.
- We offer a 14-day free trial to new users who register with the Services.
- LangDB Gateway provides detailed tracing to monitor, debug, and optimize LLM workflows.
errors:
- '401 Unauthorized: Ensure API key is set correctly.'
- Weather information for '{city}' is not available.
- Sorry, I don't have timezone information for {city}.
- '401 Unauthorized: Check API key or project ID'
- '404 Not Found: Endpoint may not exist or is incorrectly specified'
- '401 Unauthorized: Invalid API key or project ID'
- '429 Too Many Requests: Rate limit exceeded'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check input parameters.'
- '401 Unauthorized: Invalid API key or project ID.'
- '500 Internal Server Error: Try again later.'
- '401 Unauthorized: Check API key'
- '400 Bad Request: Check API parameters'
- '401 Unauthorized: Invalid credentials'
- '401 Unauthorized: Recheck API key or token expiration'
- 'Model not available: Check if the model is in the project''s allowed list'
- 'Can''t modify restrictions: Only Admin role can configure restrictions'
- '401 Unauthorized: Recheck API key or project ID'
- 'Access denied: Check if the user is enabled for the specific project'
- 'Can''t modify project access: Only Admin role can configure project access'
- '400 Bad Request: Check request parameters and payload.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify API key and project ID.'
- '404 Not Found: Ensure the endpoint exists.'
- '401 Unauthorized: Check if API key is correct.'
- '404 Not Found: The requested resource does not exist.'
- '400 Bad Request: The request was malformed or contained invalid parameters.'
- '401 Unauthorized: Check API key and permissions.'
- '404 Not Found: Ensure the endpoint is correct.'
- 'INVALID_CREDENTIALS: Check your client ID and secret.'
- 'ACCESS_DENIED: Verify user permissions.'
- 'RATE_LIMIT_EXCEEDED: Reduce the number of requests.'
- '401 Unauthorized: Check your API key.'
- '401 Unauthorized: Check your API Key and Project ID.'
- '400 Bad Request: Ensure request body is valid.'
auth_info:
  mentioned_objects:
  - LangDB API Key
  - LangDB Project ID
  - LANGDB_API_KEY
  - LANGDB_PROJECT_ID
  - AWS Cognito
  - OAuth2
  - LangDb
  - Agent
client:
  base_url: https://api.us-east-1.langdb.ai
  auth:
    type: BearerAuth
  headers:
    X-Project-Id: string
source_metadata: null
