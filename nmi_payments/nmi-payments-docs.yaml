resources:
- name: surcharge
  endpoint:
    path: /services/data/vXX.X/sobjects/Surcharge
    method: GET
    data_selector: records
- name: payment_link
  endpoint:
    path: /merchants/collect_checkout.php
    method: POST
    data_selector: paymentLink
    params: {}
- name: payment
  endpoint:
    path: /pay.php
    method: POST
    data_selector: result
- name: payment
  endpoint:
    path: /pay.php
    method: POST
    data_selector: response
    params: {}
- name: credit_card
  endpoint:
    path: /customization/credit_card
    method: GET
    data_selector: credit_card_attributes
- name: ach
  endpoint:
    path: /customization/ach
    method: GET
    data_selector: ach_attributes
- name: google_pay
  endpoint:
    path: /customization/google_pay
    method: GET
    data_selector: google_pay_attributes
- name: apple_pay
  endpoint:
    path: /customization/apple_pay
    method: GET
    data_selector: apple_pay_attributes
- name: customer_vault
  endpoint:
    path: /transact.php
    method: POST
    data_selector: null
    params: {}
- name: customer_vault
  endpoint:
    path: /api/transact.php
    method: POST
    data_selector: data
    params:
      customer_vault: add_customer
- name: transaction
  endpoint:
    path: /api/transact.php
    method: POST
    data_selector: data
    params:
      type: sale
- name: subscription
  endpoint:
    path: /api/transact.php
    method: POST
    data_selector: none
    params:
      recurring: add_subscription
      plan_payments: 12
      plan_amount: 30.0
      month_frequency: 1
      day_of_month: 15
      start_date: 20250715
- name: subscription
  endpoint:
    path: /transact.php
    method: POST
    data_selector: ''
    params: {}
- name: account_funding_transactions
  endpoint:
    path: /account_funding_transactions
    method: GET
    data_selector: transactions
    params: {}
- name: account_funding_transactions
  endpoint:
    path: /account_funding_transactions
    method: GET
    data_selector: transactions
- name: account_funding_transactions
  endpoint:
    path: /api/transact.php
    method: POST
    data_selector: response
    params: {}
- name: account_funding_transaction
  endpoint:
    path: /api/transact.php
    method: POST
    data_selector: response
    params: {}
- name: Payment API
  endpoint:
    path: /reference/getting-started
    method: GET
    data_selector: ''
    params: {}
- name: FSA_HSA_Support
  endpoint:
    path: /reference/getting-started
    method: GET
- name: per_transaction_configuration
  endpoint:
    path: /docs/per-transaction-configuration
    method: GET
    data_selector: transactions
    params: {}
- name: Tap to Pay on iPhone
  endpoint:
    path: /mobile-point-of-sale-tap-to-pay-on-iphone
    method: GET
    data_selector: records
- name: Tap to Pay on Android
  endpoint:
    path: /mobile-point-of-sale-tap-to-pay-on-android
    method: GET
    data_selector: records
- name: VP3350
  endpoint:
    path: /mobile-point-of-sale-vp3350
    method: GET
    data_selector: records
- name: Lane/Series
  endpoint:
    path: /countertop-point-of-sale-lane3600
    method: GET
    data_selector: records
- name: Self/Series
  endpoint:
    path: /unattended-point-of-sale-selfseries
    method: GET
    data_selector: records
- name: Tap to Pay on iPhone
  endpoint:
    path: /docs/mobile-point-of-sale-tap-to-pay-on-iphone
    method: GET
    data_selector: records
- name: Tap to Pay on Android
  endpoint:
    path: /docs/mobile-point-of-sale-tap-to-pay-on-android
    method: GET
    data_selector: records
- name: VP3350
  endpoint:
    path: /docs/mobile-point-of-sale-vp3350
    method: GET
    data_selector: records
- name: Lane/Series
  endpoint:
    path: /docs/countertop-point-of-sale-lane3600
    method: GET
    data_selector: records
- name: Self/Series
  endpoint:
    path: /docs/unattended-point-of-sale-selfseries
    method: GET
    data_selector: records
- name: ChipDnaMobileObjectiveCDemo
  endpoint:
    path: /example/objective-c
    method: GET
    data_selector: demo_data
- name: ChipDnaMobileSwiftDemo
  endpoint:
    path: /example/swift
    method: GET
    data_selector: demo_data
- name: ChipDnaMobile
  endpoint:
    path: /api/chipdna/mobile/sdk
    method: GET
    data_selector: sdk_data
- name: CardEaseXML Live
  endpoint:
    path: https://live.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.250 91.197.93.250 91.197.93.251 91.197.94.250 91.197.94.252
        74.120.0.250 74.120.1.250 74.120.1.251 74.120.2.250 74.120.2.252
      Ports: '443'
- name: CardEaseXML Test
  endpoint:
    path: https://tms.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.230 91.197.93.230 91.197.94.203 91.197.95.230
      Ports: '443'
- name: CardEaseTMS Live
  endpoint:
    path: https://live.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.239 91.197.93.239 91.197.94.239 74.120.0.239 74.120.1.239
        74.120.2.239
      Ports: '443'
- name: CardEaseTMS Test
  endpoint:
    path: https://tms.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.219 91.197.93.219 91.197.94.219 91.197.95.219
      Ports: '443'
- name: CardEaseXML Live
  endpoint:
    path: https://live.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.250, 91.197.93.250, 91.197.93.251, 91.197.94.250, 91.197.94.252,
        74.120.0.250, 74.120.1.250, 74.120.1.251, 74.120.2.250, 74.120.2.252
      Ports: '443'
- name: CardEaseXML Test
  endpoint:
    path: https://live.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.230, 91.197.93.230, 91.197.94.203, 91.197.95.230
      Ports: '443'
- name: CardEaseTMS Live
  endpoint:
    path: https://tms.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.239, 91.197.93.239, 91.197.94.239, 74.120.0.239, 74.120.1.239,
        74.120.2.239
      Ports: '443'
- name: CardEaseTMS Test
  endpoint:
    path: https://tms.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.219, 91.197.93.219, 91.197.94.219, 91.197.95.219
      Ports: '443'
- name: tap_to_mobile_only_environment
  endpoint:
    path: /connectAndConfigure
    method: POST
    data_selector: parameters
    params:
      TapToMobilePOI: ParameterValues.TRUE
      PaymentDevicePOI: ParameterValues.FALSE
- name: tap_to_mobile_and_payment_device_environment
  endpoint:
    path: /connectAndConfigure
    method: POST
    data_selector: parameters
    params:
      TapToMobilePOI: ParameterValues.TRUE
      PaymentDevicePOI: ParameterValues.TRUE
- name: default_payment_device_behavior
  endpoint:
    path: /connectAndConfigure
    method: POST
    data_selector: parameters
    params: {}
- name: transaction_processing
  endpoint:
    path: /transaction
    method: POST
    data_selector: parameters
    params:
      TransactionPOI: ParameterKeys.TransactionPOI
- name: TapToMobileOnlyEnvironment
  endpoint:
    path: /api/configure/tapToMobileOnly
    method: POST
    data_selector: configuration
    params:
      ParameterKeys.TapToMobilePOI: ParameterValues.TRUE
      ParameterKeys.PaymentDevicePOI: ParameterValues.FALSE
- name: TapToMobileAndPaymentDeviceEnvironment
  endpoint:
    path: /api/configure/tapToMobileAndPaymentDevice
    method: POST
    data_selector: configuration
    params:
      ParameterKeys.TapToMobilePOI: ParameterValues.TRUE
      ParameterKeys.PaymentDevicePOI: ParameterValues.TRUE
- name: DefaultPaymentDeviceBehavior
  endpoint:
    path: /api/configure/defaultBehavior
    method: POST
    data_selector: configuration
- name: TransactionProcessing
  endpoint:
    path: /api/transaction/start
    method: POST
    data_selector: transaction
    params:
      ParameterKeys.TransactionPOI: SELECT_POI
- name: Parameters
  endpoint:
    path: /parameters
    method: GET
- name: start_transaction
  endpoint:
    path: /startTransaction
    method: POST
- name: start_transaction
  endpoint:
    path: /startTransaction
    method: POST
    data_selector: parameters
- name: receipts
  endpoint:
    path: /receipts
    method: POST
    data_selector: receipt_data
    params: {}
- name: receipts
  endpoint:
    path: /receipts
    method: POST
    data_selector: receipt_data
- name: tap_to_pay_on_iphone
  endpoint:
    path: /tap-to-pay/on-iphone
    method: GET
    data_selector: data
    params: {}
- name: test_card_simulator
  endpoint:
    path: /test-card-simulator
    method: GET
    data_selector: records
    params: {}
- name: Test Card Simulator
  endpoint:
    path: /test-card-simulator
    method: GET
    data_selector: results
    params: {}
- name: test_card_simulator
  endpoint:
    path: /test-card-simulator
    method: GET
    data_selector: records
    params: {}
- name: Card Simulator
  endpoint:
    path: /test-card-simulator
    method: GET
    data_selector: transactions
    params: {}
- name: CardEaseXML Live
  endpoint:
    path: https://live.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.250, 91.197.93.250, 91.197.93.251, 91.197.94.250, 91.197.94.252,
        74.120.0.250, 74.120.1.250, 74.120.1.251, 74.120.2.250, 74.120.2.252
      Ports: '443'
- name: CardEaseXML Test
  endpoint:
    path: https://live.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.230, 91.197.93.230, 91.197.94.203, 91.197.95.230
      Ports: '443'
- name: CardEaseTMS Live
  endpoint:
    path: https://tms.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.239, 91.197.93.239, 91.197.94.239, 74.120.0.239, 74.120.1.239,
        74.120.2.239
      Ports: '443'
- name: CardEaseTMS Test
  endpoint:
    path: https://tms.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.219, 91.197.93.219, 91.197.94.219, 91.197.95.219
      Ports: '443'
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: merchants
  endpoint:
    path: /v1/merchants
    method: GET
    data_selector: data
    params: {}
- name: app_onboarding
  endpoint:
    path: /app/onboarding
    method: POST
    data_selector: attestation
    params: {}
- name: Tap to Pay-Only Environment
  endpoint:
    path: /connectAndConfigure
    method: POST
    data_selector: parameters
    params:
      ParameterKeys.TapToMobilePOI: ParameterValues.TRUE
      ParameterKeys.PaymentDevicePOI: ParameterValues.FALSE
- name: Tap to Pay and Payment Device Environment
  endpoint:
    path: /connectAndConfigure
    method: POST
    data_selector: parameters
    params:
      ParameterKeys.TapToMobilePOI: ParameterValues.TRUE
      ParameterKeys.PaymentDevicePOI: ParameterValues.TRUE
- name: Default Payment Device Behavior
  endpoint:
    path: /connectAndConfigure
    method: POST
    data_selector: parameters
    params: {}
- name: Transaction Processing
  endpoint:
    path: /transaction
    method: POST
    data_selector: parameters
    params:
      ParameterKeys.TransactionPOI:
      - ParameterValues.PaymentDevice
      - ParameterValues.TapToMobile
- name: Tap to Pay
  endpoint:
    path: /tap-to-pay
    method: POST
    data_selector: response
    params: {}
- name: CardEaseXML_Live
  endpoint:
    path: https://live.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.250, 91.197.93.250, 91.197.93.251, 91.197.94.250, 91.197.94.252,
        74.120.0.250, 74.120.1.250, 74.120.1.251, 74.120.2.250, 74.120.2.252
      Ports: '443'
- name: CardEaseXML_Test
  endpoint:
    path: https://live.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.230, 91.197.93.230, 91.197.94.203, 91.197.95.230
      Ports: '443'
- name: CardEaseTMS_Live
  endpoint:
    path: https://tms.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.239, 91.197.93.239, 91.197.94.239, 74.120.0.239, 74.120.1.239,
        74.120.2.239
      Ports: '443'
- name: CardEaseTMS_Test
  endpoint:
    path: https://tms.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.219, 91.197.93.219, 91.197.94.219, 91.197.95.219
      Ports: '443'
- name: start_transaction
  endpoint:
    path: /startTransaction
    method: POST
    data_selector: transactionResponse
    params:
      TransactionPOI: ParameterValues.TapToMobile
- name: Tap to Pay-Only Environment
  endpoint:
    path: /connectAndConfigure
    method: POST
    data_selector: response
    params:
      ParameterKeys.TapToMobilePOI: ParameterValues.TRUE
      ParameterKeys.PaymentDevicePOI: ParameterValues.FALSE
- name: Tap to Pay and Payment Device Environment
  endpoint:
    path: /connectAndConfigure
    method: POST
    data_selector: response
    params:
      ParameterKeys.TapToMobilePOI: ParameterValues.TRUE
      ParameterKeys.PaymentDevicePOI: ParameterValues.TRUE
- name: Default Payment Device Behavior
  endpoint:
    path: /connectAndConfigure
    method: POST
    data_selector: response
    params: {}
- name: Transaction Processing
  endpoint:
    path: /transaction
    method: POST
    data_selector: response
    params:
      ParameterKeys.TransactionPOI:
      - ParameterValues.PaymentDevice
      - ParameterValues.TapToMobile
- name: tap_to_pay
  endpoint:
    path: /connectAndConfigure
    method: POST
- name: start_transaction
  endpoint:
    path: /startTransaction
    method: POST
    data_selector: transaction
    params: {}
- name: receipt_sms_email
  endpoint:
    path: /receipts
    method: POST
    data_selector: receipt
    params: {}
- name: iOS SDK
  endpoint:
    path: /release/ios/4.0.5/ios_4.0.5.197895092.zip
    method: GET
- name: Android SDK
  endpoint:
    path: /release/android/4.0.5/android_4.0.5.197893042.zip
    method: GET
- name: payment_gateway_account
  endpoint:
    path: /merchants/options.php
    method: GET
    data_selector: API Key
    params:
      source_permissions: API
- name: Contactless Symbol Reproduction Requirements
  endpoint:
    path: /contactless-symbol-reproduction-requirements
    method: GET
    data_selector: requirements
- name: Compliance Notes
  endpoint:
    path: /compliance-notes
    method: GET
    data_selector: notes
- name: device_connection
  endpoint:
    path: /docs/mobile-point-of-sale-vp3350
    method: GET
    data_selector: records
- name: CardEaseXML Live
  endpoint:
    path: https://live.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.250, 91.197.93.250, 91.197.93.251, 91.197.94.250, 91.197.94.252,
        74.120.0.250, 74.120.1.250, 74.120.1.251, 74.120.2.250, 74.120.2.252
      Ports: '443'
- name: CardEaseXML Test
  endpoint:
    path: https://tms.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.230, 91.197.93.230, 91.197.94.203, 91.197.95.230
      Ports: '443'
- name: CardEaseTMS Live
  endpoint:
    path: https://live.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.239, 91.197.93.239, 91.197.94.239, 74.120.0.239, 74.120.1.239,
        74.120.2.239
      Ports: '443'
- name: CardEaseTMS Test
  endpoint:
    path: https://tms.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.219, 91.197.93.219, 91.197.94.219, 91.197.95.219
      Ports: '443'
- name: SDK
  endpoint:
    path: /release/ios/4.0.5/ios_4.0.5.197895092.zip
    method: GET
    data_selector: data
    params: {}
- name: SDK
  endpoint:
    path: /release/android/4.0.5/android_4.0.5.197893042.zip
    method: GET
    data_selector: data
    params: {}
- name: start_transaction
  endpoint:
    path: /startTransaction
    method: POST
    data_selector: result
    params: {}
- name: confirm_transaction
  endpoint:
    path: /confirmTransaction
    method: POST
    data_selector: result
    params: {}
- name: void_transaction
  endpoint:
    path: /voidTransaction
    method: POST
    data_selector: result
    params: {}
- name: linked_refund_transaction
  endpoint:
    path: /linkedRefundTransaction
    method: POST
    data_selector: result
    params: {}
- name: terminate_transaction
  endpoint:
    path: /terminateTransaction
    method: POST
    data_selector: result
    params: {}
- name: process_receipt
  endpoint:
    path: /processReceipt
    method: POST
    data_selector: result
    params: {}
- name: deferred_authorization
  endpoint:
    path: /deferred-authorizations
    method: POST
    data_selector: transaction
    params: {}
- name: CardEaseXML Live
  endpoint:
    path: https://live.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.250 91.197.93.250 91.197.93.251 91.197.94.250 91.197.94.252
        74.120.0.250 74.120.1.250 74.120.1.251 74.120.2.250 74.120.2.252
      Ports: '443'
- name: CardEaseXML Test
  endpoint:
    path: https://tms.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.230 91.197.93.230 91.197.94.203 91.197.95.230
      Ports: '443'
- name: CardEaseTMS Live
  endpoint:
    path: https://live.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.239 91.197.93.239 91.197.94.239 74.120.0.239 74.120.1.239
        74.120.2.239
      Ports: '443'
- name: CardEaseTMS Test
  endpoint:
    path: https://tms.cardeasexml.com
    method: GET
    data_selector: IP Addresses
    params:
      IP Addresses: 91.197.92.219 91.197.93.219 91.197.94.219 91.197.95.219
      Ports: '443'
- name: RequestQueueStatus
  endpoint:
    path: /requestQueueStatus
    method: GET
    data_selector: status
    params: {}
- name: TMS Properties
  endpoint:
    path: /docs/tms-properties
    method: GET
    data_selector: properties
    params: {}
- name: receipts
  endpoint:
    path: /receipts
    method: POST
    data_selector: receiptData
    params: {}
- name: start_transaction
  endpoint:
    path: /startTransaction
    method: POST
    data_selector: transactionResult
    params: {}
- name: confirm_transaction
  endpoint:
    path: /confirmTransaction
    method: POST
    data_selector: transactionResult
    params: {}
- name: void_transaction
  endpoint:
    path: /voidTransaction
    method: POST
    data_selector: transactionResult
    params: {}
- name: linked_refund_transaction
  endpoint:
    path: /linkedRefundTransaction
    method: POST
    data_selector: transactionResult
    params: {}
- name: terminate_transaction
  endpoint:
    path: /terminateTransaction
    method: POST
    data_selector: transactionResult
    params: {}
- name: process_receipt
  endpoint:
    path: /processReceipt
    method: POST
    data_selector: receiptResult
    params: {}
- name: TransactionUpdate
  endpoint:
    path: /transaction/update
    method: POST
- name: CardDetails
  endpoint:
    path: /card/details
    method: GET
- name: TransactionFinished
  endpoint:
    path: /transaction/finished
    method: POST
- name: ProcessReceiptFinished
  endpoint:
    path: /process/receipt
    method: POST
- name: SignatureVerification
  endpoint:
    path: /signature/verification
    method: POST
- name: SignatureCapture
  endpoint:
    path: /signature/capture
    method: POST
- name: ApplicationSelection
  endpoint:
    path: /application/selection
    method: POST
- name: UserNotification
  endpoint:
    path: /user/notification
    method: POST
- name: register_device
  endpoint:
    path: /api/v2/devices/register
    method: POST
    data_selector: ''
    params: {}
- name: process_payment
  endpoint:
    path: /api/transact.php
    method: POST
    data_selector: ''
    params: {}
- name: poll_async_transaction
  endpoint:
    path: /api/asyncstatus/{asyncStatusGuid}
    method: GET
    data_selector: ''
    params: {}
- name: deregister_device
  endpoint:
    path: /api/v2/devices/deregister/:poiDeviceId
    method: DELETE
    data_selector: ''
    params: {}
- name: update_device_nickname
  endpoint:
    path: /api/v2/devices/update/:poiDeviceId
    method: POST
    data_selector: ''
    params: {}
- name: list_devices
  endpoint:
    path: /api/v2/devices/list
    method: GET
    data_selector: ''
    params: {}
- name: request_queue
  endpoint:
    path: /request/queue/status
    method: GET
    data_selector: status
    params: {}
- name: receipts
  endpoint:
    path: /receipts
    method: POST
- name: device_registration
  endpoint:
    path: /api/v2/devices/register
    method: POST
    data_selector: poiDevice
    params:
      registrationCode: string
- name: device_deregistration
  endpoint:
    path: /api/v2/devices/deregister/:poiDeviceId
    method: DELETE
    data_selector: ''
    params:
      poiDeviceId: string
- name: update_device_nickname
  endpoint:
    path: /api/v2/devices/update/:poiDeviceId
    method: POST
    data_selector: ''
    params:
      deviceNickname: string
- name: list_all_devices
  endpoint:
    path: /api/v2/devices/list
    method: GET
    data_selector: poiDevices
    params: {}
- name: single_device_request
  endpoint:
    path: /api/v2/devices/list/:poiDeviceId
    method: GET
    data_selector: poiDevices
    params:
      poiDeviceId: string
- name: device_status_request
  endpoint:
    path: /api/v2/devices/list/:poiDeviceId?currentStatus=true
    method: GET
    data_selector: poiDevices
    params:
      poiDeviceId: string
- name: list_devices_disable_connection_info
  endpoint:
    path: /api/v2/devices/list?disableConnectionInfo=true
    method: GET
    data_selector: poiDevices
    params: {}
- name: register_device
  endpoint:
    path: /v2/devices/register
    method: POST
- name: process_payments
  endpoint:
    path: /transact.php
    method: POST
- name: poll_async_transactions
  endpoint:
    path: /asyncstatus/{asyncStatusGuid}
    method: GET
- name: deregister_device
  endpoint:
    path: /v2/devices/deregister/:poiDeviceId
    method: DELETE
- name: update_device_nickname
  endpoint:
    path: /v2/devices/update/:poiDeviceId
    method: POST
- name: list_devices
  endpoint:
    path: /v2/devices/list
    method: GET
- name: signature_capture
  endpoint:
    path: /api/v2/devices/sign/:poiDeviceId
    method: GET
    data_selector: null
    params: {}
- name: yes_no_prompt
  endpoint:
    path: /api/v2/devices/yesno/:poiDeviceId
    method: GET
    data_selector: null
    params: {}
- name: multiple_choice_prompt
  endpoint:
    path: /api/v2/devices/menuselection/:poiDeviceId
    method: GET
    data_selector: null
    params: {}
- name: query_device_input
  endpoint:
    path: /api/asyncdevicestatus/:asyncStatusGuid
    method: GET
    data_selector: null
    params: {}
- name: display_qr_code
  endpoint:
    path: /api/v2/devices/qrcode/:poiDeviceId
    method: POST
    data_selector: null
    params: {}
- name: hide_qr_code
  endpoint:
    path: /api/v2/devices/display/:poiDeviceId
    method: DELETE
    data_selector: null
    params: {}
- name: transaction
  endpoint:
    path: /api/transact.php
    method: POST
    data_selector: response
    params: {}
- name: register_device
  endpoint:
    path: /api/v2/devices/register
    method: POST
    data_selector: poiDevice
    params: {}
- name: deregister_device
  endpoint:
    path: /api/v2/devices/deregister/:poiDeviceId
    method: DELETE
    data_selector: ''
    params: {}
- name: update_device_nickname
  endpoint:
    path: /api/v2/devices/update/:poiDeviceId
    method: POST
    data_selector: ''
    params: {}
- name: async_status
  endpoint:
    path: /api/asyncstatus
    method: GET
- name: devices_list
  endpoint:
    path: /api/v2/devices/list
    method: GET
    data_selector: poiDevices
- name: single_device
  endpoint:
    path: /api/v2/devices/list/:poiDeviceId
    method: GET
    data_selector: poiDevices
- name: async_status
  endpoint:
    path: /api/asyncstatus/:asyncStatusGuid
    method: GET
    data_selector: transaction
    params:
      asyncStatusGuid: string
      responseMethod: string
- name: signature_capture
  endpoint:
    path: /api/v2/devices/sign/:poiDeviceId
    method: GET
    data_selector: async_status_guid
- name: yes_no_prompt
  endpoint:
    path: /api/v2/devices/yesno/:poiDeviceId
    method: GET
    data_selector: async_status_guid
- name: multiple_choice_prompt
  endpoint:
    path: /api/v2/devices/menuselection/:poiDeviceId
    method: GET
    data_selector: async_status_guid
- name: query_device_input
  endpoint:
    path: /api/asyncdevicestatus/:asyncStatusGuid
    method: GET
    data_selector: reference
- name: display_qr_code
  endpoint:
    path: /api/v2/devices/qrcode/:poiDeviceId
    method: POST
    data_selector: success
- name: hide_qr_code
  endpoint:
    path: /api/v2/devices/display/:poiDeviceId
    method: DELETE
    data_selector: success
- name: Keyed Entry
  endpoint:
    path: /poi/device/keyed-entry
    method: GET
    data_selector: default_value
    params: {}
- name: Signature Prompting
  endpoint:
    path: /poi/device/signature-prompting
    method: GET
    data_selector: default_value
    params: {}
- name: Amount Confirmation
  endpoint:
    path: /poi/device/amount-confirmation
    method: GET
    data_selector: default_value
    params: {}
- name: Tipping
  endpoint:
    path: /poi/device/tipping
    method: GET
    data_selector: default_value
    params: {}
- name: poi_device_prompt
  endpoint:
    path: /poi_device_prompt
    method: POST
    data_selector: response
    params: {}
- name: transaction
  endpoint:
    path: /api/transact.php
    method: POST
- name: async_status_polling
  endpoint:
    path: /api/asyncstatus
    method: GET
- name: VPP Registration
  endpoint:
    path: /vpp/registration
    method: POST
    data_selector: registrationResponse
    params:
      registration_code: T00001
- name: Transaction Processing
  endpoint:
    path: /vpp/transaction
    method: POST
    data_selector: transactionResponse
    params:
      amount: greater than or equal to 1.00
- name: async_status
  endpoint:
    path: /api/asyncstatus/:asyncStatusGuid
    method: GET
    data_selector: transaction
    params:
      asyncStatusGuid: asyncStatusGuid
      responseMethod: responseMethod
- name: transaction
  endpoint:
    path: /gw.cex
    method: POST
    data_selector: transaction_result
- name: keyed_entry
  endpoint:
    path: /poi/device/keyed_entry
    method: POST
    data_selector: response
    params:
      cvv_entry: true
- name: signature_prompting
  endpoint:
    path: /poi/device/signature_prompting
    method: POST
    data_selector: response
    params:
      prompt: true
- name: amount_confirmation
  endpoint:
    path: /poi/device/amount_confirmation
    method: POST
    data_selector: response
    params:
      confirm: false
- name: tipping
  endpoint:
    path: /poi/device/tipping
    method: POST
    data_selector: response
    params:
      prompt_tip: true
      quicktip_amounts:
      - 1.0
      - 2.0
      - 3.0
- name: poi_device_prompting
  endpoint:
    path: /poi/device/prompts
    method: POST
    data_selector: response
    params: {}
- name: registration
  endpoint:
    path: /registration
    method: POST
    data_selector: registration_response
    params: {}
- name: transaction_processing
  endpoint:
    path: /transaction
    method: POST
    data_selector: transaction_response
    params: {}
- name: Tap to Pay on iPhone
  endpoint:
    path: /docs/mobile-point-of-sale-tap-to-pay-on-iphone
    method: GET
- name: Tap to Pay on Android
  endpoint:
    path: /docs/mobile-point-of-sale-tap-to-pay-on-android
    method: GET
- name: VP3350
  endpoint:
    path: /docs/mobile-point-of-sale-vp3350
    method: GET
- name: Lane/3600
  endpoint:
    path: /docs/countertop-point-of-sale-lane3600
    method: GET
- name: Self/Series
  endpoint:
    path: /docs/unattended-point-of-sale-selfseries
    method: GET
- name: ChipDNA Server
  endpoint:
    path: /chipdna.config.xml
    method: GET
- name: ChipDNA Client CLI
  endpoint:
    path: /client.config.xml
    method: GET
- name: Test Card Simulator
  endpoint:
    path: /test-card-simulator
    method: GET
    data_selector: transactions
    params: {}
- name: Tap to Pay on iPhone
  endpoint:
    path: /docs/mobile-point-of-sale-tap-to-pay-on-iphone
    method: GET
- name: Tap to Pay on Android
  endpoint:
    path: /docs/mobile-point-of-sale-tap-to-pay-on-android
    method: GET
- name: VP3350
  endpoint:
    path: /docs/mobile-point-of-sale-vp3350
    method: GET
- name: Lane/3600
  endpoint:
    path: /docs/countertop-point-of-sale-lane3600
    method: GET
- name: Self/Series
  endpoint:
    path: /docs/unattended-point-of-sale-selfseries
    method: GET
- name: terminal_management
  endpoint:
    path: /api/query.php
    method: POST
    params:
      security_key: <Security-Key>
      report_type: profile
      processor_details: 'true'
- name: threeDSecure
  endpoint:
    path: /gateway.get3DSecure
    method: POST
- name: 3DS Data
  endpoint:
    path: /reference/process
    method: POST
    data_selector: data
    params: {}
- name: terminal_management
  endpoint:
    path: /query.php
    method: POST
    params:
      security_key: <Security-Key>
      report_type: profile
      processor_details: 'true'
- name: test_card_1
  endpoint:
    path: /test/card/1
    method: POST
    data_selector: result
    params: {}
- name: test_card_2
  endpoint:
    path: /test/card/2
    method: POST
    data_selector: result
    params: {}
- name: test_card_3
  endpoint:
    path: /test/card/3
    method: POST
    data_selector: result
    params: {}
- name: test_card_4
  endpoint:
    path: /test/card/4
    method: POST
    data_selector: result
    params: {}
- name: test_card_5
  endpoint:
    path: /test/card/5
    method: POST
    data_selector: result
    params: {}
- name: test_card_6
  endpoint:
    path: /test/card/6
    method: POST
    data_selector: result
    params: {}
- name: test_card_7
  endpoint:
    path: /test/card/7
    method: POST
    data_selector: result
    params: {}
- name: test_card_8
  endpoint:
    path: /test/card/8
    method: POST
    data_selector: result
    params: {}
- name: test_card_9
  endpoint:
    path: /test/card/9
    method: POST
    data_selector: result
    params: {}
- name: test_card_10
  endpoint:
    path: /test/card/10
    method: POST
    data_selector: result
    params: {}
- name: test_card_11
  endpoint:
    path: /test/card/11
    method: POST
    data_selector: result
    params: {}
- name: payment_api
  endpoint:
    path: /api/transact.php
    method: POST
    data_selector: response
- name: 3DS Data
  endpoint:
    path: /payment/3ds
    method: POST
    data_selector: data
    params: {}
- name: Payment Processing
  endpoint:
    path: /reference/process
    method: POST
- name: Get Merchant List
  endpoint:
    path: /reference/get-merchant-list
    method: POST
- name: Create Merchant
  endpoint:
    path: /reference/create-merchant
    method: POST
- name: Get Merchant List
  endpoint:
    path: /get-merchant-list
    method: POST
    data_selector: merchants
- name: Get Transaction Data
  endpoint:
    path: /get-transaction-data
    method: POST
    data_selector: transactions
- name: payment
  endpoint:
    path: /api/transact.php
    method: POST
    data_selector: response
    params: {}
- name: Test Transaction
  endpoint:
    path: /reference/process
    method: POST
    data_selector: transaction
    params:
      test_mode: enabled
- name: transaction
  endpoint:
    path: /api/transact.php
    method: POST
- name: packages
  endpoint:
    path: /reference/getpackages
    method: GET
    data_selector: data
    params:
      page: 1
      per_page: 10
- name: applications
  endpoint:
    path: /reference/getapplications
    method: GET
    data_selector: data
    params:
      page: 1
      per_page: 10
- name: merchant_reports
  endpoint:
    path: /merchants/reports/{reportId}
    method: GET
    data_selector: results
- name: transactions
  endpoint:
    path: /transactions/reports
    method: POST
    data_selector: transactions
    params: {}
- name: transaction_report
  endpoint:
    path: /transactions/reports
    method: POST
    data_selector: results
- name: invoice
  endpoint:
    path: /api/invoice
    method: POST
    data_selector: response
    params: {}
- name: customer
  endpoint:
    path: /api/customer
    method: POST
    data_selector: response
    params: {}
- name: transaction
  endpoint:
    path: /api/transaction
    method: POST
    data_selector: response
    params: {}
- name: sub_affiliate
  endpoint:
    path: /affiliates/reports
    method: POST
- name: sub_affiliate
  endpoint:
    path: /affiliates/reports
    method: POST
- name: merchant
  endpoint:
    path: /merchants
    method: GET
    data_selector: results
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: results
- name: create_merchant
  endpoint:
    path: /merchants
    method: POST
    data_selector: response
    params: {}
- name: transactions
  endpoint:
    path: /transactions/reports
    method: POST
    data_selector: transactions
    params: {}
- name: create_merchant
  endpoint:
    path: /merchants
    method: POST
- name: transaction_data
  endpoint:
    path: /transactions/reports
    method: POST
- name: assign_fee_schedule
  endpoint:
    path: /merchants/{gateway_id}
    method: PATCH
    data_selector: response
    params: {}
- name: sub_affiliate_list
  endpoint:
    path: /affiliates/reports
    method: POST
    data_selector: response
    params:
      maxResults: '1000'
- name: merchant
  endpoint:
    path: /merchants/gateway_id
    method: PATCH
- name: sub_affiliate
  endpoint:
    path: /reference/get-sub-affiliate-list
    method: POST
    data_selector: results
- name: specific_merchant
  endpoint:
    path: /merchants/{gateway_id}
    method: GET
    data_selector: response
    params: {}
- name: create_merchant
  endpoint:
    path: /merchants
    method: POST
    data_selector: response
    params: {}
- name: merchant
  endpoint:
    path: /merchants/gateway_id
    method: GET
    data_selector: object
    params: {}
- name: merchant
  endpoint:
    path: /merchants
    method: POST
    data_selector: object
- name: create_merchant_api_keys
  endpoint:
    path: /merchants/{gateway_id}/security_keys
    method: POST
    data_selector: null
    params: {}
- name: assign_fee_schedule
  endpoint:
    path: /merchants/{gateway_id}
    method: PATCH
- name: create_merchant_api_keys
  endpoint:
    path: /merchants/gateway_id/security_keys
    method: POST
- name: get_specific_merchant_information
  endpoint:
    path: /reference/get-specific-merchant-information
    method: GET
- name: get_merchant_list
  endpoint:
    path: /reference/get-merchant-list
    method: GET
- name: merchant
  endpoint:
    path: /merchants/gateway_id
    method: PATCH
- name: merchant_info
  endpoint:
    path: /merchants/{gateway_id}
    method: GET
    data_selector: ''
- name: merchant_list
  endpoint:
    path: /merchants/reports
    method: POST
    data_selector: response
    params:
      maxResults: '1000'
- name: merchant
  endpoint:
    path: /merchants/gateway_id
    method: GET
- name: merchant_list
  endpoint:
    path: /merchants/reports
    method: POST
    data_selector: results
- name: create_merchant_api_key
  endpoint:
    path: /api/v4/merchants/{gateway_id}/security_keys
    method: POST
- name: Create Merchant API Keys
  endpoint:
    path: /merchants/gateway_id/security_keys
    method: POST
- name: billing_reports
  endpoint:
    path: /billing/reports
    method: POST
    data_selector: response
    params:
      maxResults: 1-1000
      startDate: string
      endDate: string
      offset: '0'
- name: merchant_list
  endpoint:
    path: /merchants/reports
    method: POST
    data_selector: response
    params:
      maxResults: '1000'
- name: merchant_list
  endpoint:
    path: /billing/reports
    method: POST
- name: merchant_list
  endpoint:
    path: /api/v4/merchants/reports
    method: POST
    data_selector: results
- name: commission_reports
  endpoint:
    path: /commission_reports/reports
    method: POST
    data_selector: response
    params:
      month: string
      year: string
      offset: string
      maxResults: string
- name: billing_reports
  endpoint:
    path: /billing/reports
    method: POST
    params:
      maxResults: 1-1000
      startDate: required
      endDate: required
      offset: '0'
- name: commission_reports
  endpoint:
    path: /commission_reports/reports
    method: POST
    data_selector: results
- name: settlement_time
  endpoint:
    path: /processors/{id}
    method: GET
    data_selector: settlementTime
    params: {}
- name: commission_reports
  endpoint:
    path: /commission_reports/reports
    method: POST
    data_selector: response
    params:
      month: string
      year: string
      offset: string
      maxResults: string
- name: processors
  endpoint:
    path: /processors/id
    method: GET
    data_selector: object
- name: commission_reports
  endpoint:
    path: /commission_reports/reports
    method: POST
- name: updating_settlement_time
  endpoint:
    path: /processors/{id}
    method: PATCH
- name: settlement_time
  endpoint:
    path: /processors/{id}
    method: GET
    data_selector: settlementTime
    params: {}
- name: settlement_time
  endpoint:
    path: /processors/id
    method: PATCH
- name: processors
  endpoint:
    path: /processors/id
    method: GET
    data_selector: object
    params: {}
- name: fee_schedules
  endpoint:
    path: /fee_schedules/search
    method: POST
    data_selector: response
    params:
      maxResults: 1-1000
      includeCustomFeeSchedules: 'true'
- name: updating_settlement_time
  endpoint:
    path: /processors/{id}
    method: PATCH
    data_selector: null
    params:
      settlementTime: required
- name: Get Settlement Time
  endpoint:
    path: /api/v4/processors/id
    method: PATCH
    data_selector: object
    params: {}
- name: fee_schedules
  endpoint:
    path: /fee_schedules/search
    method: POST
    data_selector: results
    params:
      includeCustomFeeSchedules: true
- name: fees
  endpoint:
    path: /fee_schedules/{id}/fees
    method: GET
- name: fee_schedules
  endpoint:
    path: /fee_schedules/search
    method: POST
    data_selector: fee_schedules
    params:
      maxResults: '1000'
      includeCustomFeeSchedules: 'true'
- name: fees
  endpoint:
    path: /fee_schedules/id/fees
    method: GET
    data_selector: array of objects
- name: fee_schedules
  endpoint:
    path: /fee_schedules/search
    method: POST
    data_selector: results
    params:
      includeCustomFeeSchedules: true
- name: get_merchant_or_partner_user_info
  endpoint:
    path: /users/search
    method: POST
    data_selector: users
    params:
      maxResults: '1000'
      merchantId: ''
      affiliateId: ''
- name: fee_schedule
  endpoint:
    path: /fee_schedules/{id}/fees
    method: GET
    data_selector: fees
    params: {}
- name: get_merchant_or_partner_user_info
  endpoint:
    path: /users/search
    method: POST
    data_selector: object
- name: fees
  endpoint:
    path: /fee_schedules/id/fees
    method: GET
- name: username_availability
  endpoint:
    path: /usernames/search
    method: POST
    data_selector: response
    params: {}
- name: user_info
  endpoint:
    path: /users/search
    method: POST
    data_selector: users
    params:
      maxResults: '1000'
- name: check_username_availability
  endpoint:
    path: /usernames/search
    method: POST
    data_selector: object
    params: {}
- name: merchant_or_partner_user_info
  endpoint:
    path: /users/search
    method: POST
    data_selector: array of objects
- name: add_processor
  endpoint:
    path: /processors
    method: POST
- name: get_processor_config
  endpoint:
    path: /services/centinl2/config
    method: GET
- name: get_available_services
  endpoint:
    path: /services/search
    method: GET
- name: username_availability
  endpoint:
    path: /usernames/search
    method: POST
    data_selector: response
    params: {}
- name: Add Processor
  endpoint:
    path: /processors
    method: POST
- name: username_availability
  endpoint:
    path: /usernames/search
    method: POST
    data_selector: object
- name: get_merchant_processors
  endpoint:
    path: /processors/reports
    method: POST
    data_selector: response
    params:
      maxResults: '1000'
- name: add_processor
  endpoint:
    path: /processors
    method: POST
- name: get_merchant_processors
  endpoint:
    path: /get-merchant-processors-value-added-services
    method: POST
- name: check_services
  endpoint:
    path: /services/search
    method: GET
- name: merchant_processors
  endpoint:
    path: /api/v4/processors/reports
    method: POST
    data_selector: results
- name: processors
  endpoint:
    path: /api/v4/processors
    method: POST
    data_selector: object
    params: {}
- name: card_type
  endpoint:
    path: /card_type
    method: POST
    data_selector: result
- name: processor_config
  endpoint:
    path: /services/{id}/config
    method: GET
    data_selector: config
    params: {}
- name: merchant_processors
  endpoint:
    path: /processors/reports
    method: POST
    data_selector: response
    params:
      maxResults: '1000'
- name: processor_config
  endpoint:
    path: /services/id/config
    method: GET
- name: merchant_processors
  endpoint:
    path: /processors/reports
    method: POST
    data_selector: results
- name: apple_pay
  endpoint:
    path: /merchants/{gateway_id}/apple_pay
    method: POST
- name: card_type
  endpoint:
    path: /card_type
    method: POST
    data_selector: result
- name: apple_pay_status
  endpoint:
    path: /merchants/{gateway_id}/apple_pay
    method: GET
- name: processor_config
  endpoint:
    path: /services/{id}/config
    method: GET
    data_selector: response
- name: apple_pay_status
  endpoint:
    path: /merchants/gateway_id/apple_pay
    method: GET
- name: Get Processor Config
  endpoint:
    path: /api/v4/services/id/config
    method: GET
    data_selector: object
- name: apple_pay
  endpoint:
    path: /merchants/{gateway_id}/apple_pay
    method: POST
- name: get_available_services
  endpoint:
    path: /services/search
    method: POST
    data_selector: services
    params:
      maxResults: '1000'
- name: available_services
  endpoint:
    path: /services/search
    method: POST
    data_selector: services
- name: apple_pay_status
  endpoint:
    path: /merchants/{gateway_id}/apple_pay
    method: GET
    data_selector: domains
    params:
      gateway_id: string
- name: apple_pay_status
  endpoint:
    path: /merchants/gateway_id/apple_pay
    method: GET
- name: transaction
  endpoint:
    path: /api/query.php
    method: POST
    data_selector: nm_response
    params:
      security_key: required
      transaction_id: string
- name: query_api
  endpoint:
    params:
      mobile_device_license: D91AC56A-4242-3131-2323-2AE4AA6DB6EB
      mobile_device_nickname: Jim's iPhone
      customer_vault_id: ''
      date_search: created,updated
      result_limit: 100
      page_number: 0
      result_order: standard
      invoice_status: open,closed,paid
- name: get_available_services
  endpoint:
    path: /services/search
    method: POST
    data_selector: services
- name: transactions
  endpoint:
    path: /query.php
    method: POST
    data_selector: response
    params: {}
- name: available_services
  endpoint:
    path: /services/search
    method: POST
- name: Add/Upgrade to Token Vault
  endpoint:
    path: /reference/add-token-vault
    method: POST
- name: payment
  endpoint:
    path: /query.php
    method: POST
- name: transaction
  endpoint:
    path: /api/query.php
    method: POST
    data_selector: nm_response
- name: Add/Upgrade to Token Vault
  endpoint:
    path: /marketplace_app/ctv/onboarding
    method: POST
    data_selector: response
    params:
      merchantId: string
      applications: array of objects
- name: license_manager
  endpoint:
    path: /path/to/license_manager
    method: GET
    data_selector: records
    params: {}
- name: customer_vault
  endpoint:
    path: /path/to/customer_vault
    method: GET
    data_selector: records
    params:
      report_type: customer_vault
      date_search: created,updated
- name: invoicing_report
  endpoint:
    path: /path/to/invoicing_report
    method: GET
    data_selector: records
    params:
      invoice_status: open,closed,paid
- name: create_a_new_conversation
  endpoint:
    path: /reference/post_v4-authvia-conversations
    method: POST
- name: list_and_filter_conversations
  endpoint:
    path: /reference/get_v4-authvia-conversations
    method: GET
- name: get_a_conversation
  endpoint:
    path: /reference/get-v4-authvia-conversations-conversation-id
    method: GET
- name: close_a_conversation
  endpoint:
    path: /reference/delete-v4-authvia-conversations-conversation-id
    method: DELETE
- name: Add/Upgrade to Token Vault
  endpoint:
    path: /reference/add-token-vault
    method: POST
- name: create_conversation
  endpoint:
    path: /authvia/conversations
    method: POST
- name: Add/Upgrade to Token Vault
  endpoint:
    path: /api/v4/marketplace_app/ctv/onboarding
    method: POST
- name: list_and_filter_conversations
  endpoint:
    path: /authvia/conversations
    method: GET
- name: create_a_new_conversation
  endpoint:
    path: /reference/post_v4-authvia-conversations
    method: POST
- name: list_and_filter_conversations
  endpoint:
    path: /reference/get_v4-authvia-conversations
    method: GET
- name: get_a_conversation
  endpoint:
    path: /reference/get-v4-authvia-conversations-conversation-id
    method: GET
- name: close_a_conversation
  endpoint:
    path: /reference/delete-v4-authvia-conversations-conversation-id
    method: DELETE
- name: get_a_conversation
  endpoint:
    path: /authvia/conversations/{conversationId}
    method: GET
- name: create_conversation
  endpoint:
    path: /authvia/conversations
    method: POST
- name: Close a conversation
  endpoint:
    path: /authvia/conversations/{conversationId}
    method: DELETE
- name: list_and_filter_conversations
  endpoint:
    path: /authvia/conversations
    method: GET
- name: Webhook Events
  endpoint:
    path: /reference/webhook-events-2
    method: POST
- name: Webhook Subscriptions
  endpoint:
    path: /reference/subscriptions
    method: GET
- name: get_a_conversation
  endpoint:
    path: /authvia/conversations/{conversationId}
    method: GET
- name: close_conversation
  endpoint:
    path: /api/v4/authvia/conversations/{conversationId}
    method: DELETE
- name: get_merchant_list
  endpoint:
    path: /merchants
    method: GET
- name: create_merchant
  endpoint:
    path: /create-merchant
    method: POST
- name: Webhook Subscriptions
  endpoint:
    path: /reference/subscriptions
    method: GET
- name: Webhook Events
  endpoint:
    path: /reference/webhook-events-2
    method: POST
- name: transaction_events
  endpoint:
    path: /reference/transaction-events
    method: GET
    data_selector: events
    params: {}
- name: transaction.sale.success
  endpoint:
    path: /transaction/sale/success
    method: GET
- name: transaction.sale.failure
  endpoint:
    path: /transaction/sale/failure
    method: GET
- name: transaction.sale.unknown
  endpoint:
    path: /transaction/sale/unknown
    method: GET
- name: transaction.auth.success
  endpoint:
    path: /transaction/auth/success
    method: GET
- name: transaction.auth.failure
  endpoint:
    path: /transaction/auth/failure
    method: GET
- name: transaction.auth.unknown
  endpoint:
    path: /transaction/auth/unknown
    method: GET
- name: transaction.capture.success
  endpoint:
    path: /transaction/capture/success
    method: GET
- name: transaction.capture.failure
  endpoint:
    path: /transaction/capture/failure
    method: GET
- name: transaction.capture.unknown
  endpoint:
    path: /transaction/capture/unknown
    method: GET
- name: transaction.void.success
  endpoint:
    path: /transaction/void/success
    method: GET
- name: transaction.void.failure
  endpoint:
    path: /transaction/void/failure
    method: GET
- name: transaction.void.unknown
  endpoint:
    path: /transaction/void/unknown
    method: GET
- name: transaction.refund.success
  endpoint:
    path: /transaction/refund/success
    method: GET
- name: transaction.refund.failure
  endpoint:
    path: /transaction/refund/failure
    method: GET
- name: transaction.refund.unknown
  endpoint:
    path: /transaction/refund/unknown
    method: GET
- name: transaction.credit.success
  endpoint:
    path: /transaction/credit/success
    method: GET
- name: transaction.credit.failure
  endpoint:
    path: /transaction/credit/failure
    method: GET
- name: transaction.credit.unknown
  endpoint:
    path: /transaction/credit/unknown
    method: GET
- name: transaction.validate.success
  endpoint:
    path: /transaction/validate/success
    method: GET
- name: transaction.validate.failure
  endpoint:
    path: /transaction/validate/failure
    method: GET
- name: transaction.validate.unknown
  endpoint:
    path: /transaction/validate/unknown
    method: GET
- name: transaction_auth_success
  endpoint:
    path: /events/auth/success
    method: POST
    data_selector: event_body
    params: {}
- name: transaction_auth_failure
  endpoint:
    path: /events/auth/failure
    method: POST
    data_selector: event_body
    params: {}
- name: transaction_capture_success
  endpoint:
    path: /events/capture/success
    method: POST
    data_selector: event_body
    params: {}
- name: transaction_sale_success
  endpoint:
    path: /events/transaction/sale/success
    method: POST
    data_selector: event_body
- name: transaction_auth_success
  endpoint:
    path: /events/transaction/auth/success
    method: POST
    data_selector: event_body
- name: transaction_auth_failure
  endpoint:
    path: /events/transaction/auth/failure
    method: POST
    data_selector: event_body
- name: transaction_capture_success
  endpoint:
    path: /events/transaction/capture/success
    method: POST
    data_selector: event_body
- name: transaction_refund
  endpoint:
    path: /transaction/refund
    method: POST
    data_selector: event_body
- name: transaction_void
  endpoint:
    path: /transaction/void
    method: POST
    data_selector: event_body
- name: transaction_refund_success
  endpoint:
    path: /transaction/refund/success
    method: GET
    data_selector: event_body
- name: transaction_void_success
  endpoint:
    path: /transaction/void/success
    method: GET
    data_selector: event_body
- name: transaction_check_status_settle
  endpoint:
    path: /check/status/settle
    method: GET
- name: transaction_check_status_return
  endpoint:
    path: /check/status/return
    method: GET
- name: transaction_check_status_latereturn
  endpoint:
    path: /check/status/latereturn
    method: GET
- name: check_status
  endpoint:
    path: /check-status
    method: GET
    data_selector: events
    params: {}
- name: settle_return
  endpoint:
    path: /transaction/check/status/settle
    method: POST
    data_selector: event_body
- name: return
  endpoint:
    path: /transaction/check/status/return
    method: POST
    data_selector: event_body
- name: late_return
  endpoint:
    path: /transaction/check/status/latereturn
    method: POST
    data_selector: event_body
- name: settle_return
  endpoint:
    path: /transaction/check/status/settle
    method: GET
    data_selector: event_body
- name: return
  endpoint:
    path: /transaction/check/status/return
    method: GET
    data_selector: event_body
- name: late_return
  endpoint:
    path: /transaction/check/status/latereturn
    method: GET
    data_selector: event_body
- name: recurring_plan
  endpoint:
    path: /recurring/plan
    method: GET
    data_selector: events
    params: {}
- name: recurring_subscription
  endpoint:
    path: /recurring/subscription
    method: GET
    data_selector: events
    params: {}
- name: recurring.plan.add
  endpoint:
    path: /recurring/plan/add
    method: POST
    data_selector: event
    params: {}
- name: recurring.plan.update
  endpoint:
    path: /recurring/plan/update
    method: POST
    data_selector: event
    params: {}
- name: recurring.plan.delete
  endpoint:
    path: /recurring/plan/delete
    method: POST
    data_selector: event
    params: {}
- name: recurring.subscription.add
  endpoint:
    path: /recurring/subscription/add
    method: POST
    data_selector: event
    params: {}
- name: recurring.subscription.update
  endpoint:
    path: /recurring/subscription/update
    method: POST
    data_selector: event
    params: {}
- name: recurring.subscription.delete
  endpoint:
    path: /recurring/subscription/delete
    method: POST
    data_selector: event
    params: {}
- name: recurring_plan
  endpoint:
    path: /recurring/plans
    method: GET
    data_selector: records
- name: recurring_subscription
  endpoint:
    path: /recurring/subscriptions
    method: GET
    data_selector: records
- name: recurring_plan_add
  endpoint:
    path: /recurring/plan/add
    method: POST
    data_selector: event_body
    params: {}
- name: recurring_plan_update
  endpoint:
    path: /recurring/plan/update
    method: POST
    data_selector: event_body
    params: {}
- name: recurring_plan_delete
  endpoint:
    path: /recurring/plan/delete
    method: POST
    data_selector: event_body
    params: {}
- name: recurring_subscription_add
  endpoint:
    path: /recurring/subscription/add
    method: POST
    data_selector: event_body
    params: {}
- name: recurring_subscription_update
  endpoint:
    path: /recurring/subscription/update
    method: POST
    data_selector: event_body
    params: {}
- name: recurring_subscription_delete
  endpoint:
    path: /recurring/subscription/delete
    method: POST
    data_selector: event_body
    params: {}
- name: settlement.batch.complete
  endpoint:
    path: /settlement/batch/complete
    method: GET
    data_selector: event_body
    params: {}
- name: settlement.batch.failure
  endpoint:
    path: /settlement/batch/failure
    method: GET
    data_selector: event_body
    params: {}
- name: settlement.batch.complete
  endpoint:
    path: /settlement.batch.complete
    method: GET
    data_selector: event_body
- name: settlement.batch.failure
  endpoint:
    path: /settlement.batch.failure
    method: GET
    data_selector: event_body
- name: chargeback
  endpoint:
    path: /chargeback-events
    method: GET
    data_selector: events
- name: chargeback_event
  endpoint:
    path: /reference/chargeback-events
    method: GET
    data_selector: events
- name: acu_summary
  endpoint:
    path: /acu/events
    method: GET
    data_selector: events
- name: acu_events
  endpoint:
    path: /acu-events
    method: GET
    data_selector: events
    params: {}
- name: automatically_updated
  endpoint:
    path: /acu.summary.automaticallyupdated
    method: GET
    data_selector: event_body
- name: contact_customer
  endpoint:
    path: /acu.summary.contactcustomer
    method: GET
    data_selector: event_body
- name: closed_account
  endpoint:
    path: /acu.summary.closedaccount
    method: GET
    data_selector: event_body
- name: automatically_updated
  endpoint:
    path: /acu.summary.automaticallyupdated
    method: GET
    data_selector: event_body
    params: {}
- name: contact_customer
  endpoint:
    path: /acu.summary.contactcustomer
    method: GET
    data_selector: event_body
    params: {}
- name: closed_account
  endpoint:
    path: /acu.summary.closedaccount
    method: GET
    data_selector: event_body
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: packages
  endpoint:
    path: /packages
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: packages
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: packages
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: records
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: records
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: records
    params: {}
- name: packages
  endpoint:
    path: /getpackages
    method: GET
    data_selector: packages
    params:
      page: 1
      per_page: 10
- name: packages
  endpoint:
    path: /getpackages
    method: GET
    data_selector: packages
    params:
      page: '1'
      per_page: '10'
- name: get_package
  endpoint:
    path: /{package}
    method: GET
    data_selector: object
- name: list_all_packages
  endpoint:
    path: ''
    method: GET
    data_selector: array
- name: packages
  endpoint:
    path: /packages/{package}
    method: GET
    data_selector: object
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
    params:
      status: submitted
      updated_from: YYYY-MM-DD
      updated_to: YYYY-MM-DD
      sort_dir: desc
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: POST
    data_selector: object
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: POST
    data_selector: object
- name: application
  endpoint:
    path: /{application}
    method: GET
    data_selector: object
- name: application
  endpoint:
    path: /{application}
    method: GET
    data_selector: object
    params: {}
- name: applications
  endpoint:
    path: /{application}
    method: PATCH
- name: update_application
  endpoint:
    path: /{application}
    method: PATCH
    data_selector: object
- name: get_application_information
  endpoint:
    path: /{application}
    method: GET
    data_selector: object
- name: list_all_applications
  endpoint:
    path: /getapplications
    method: GET
    data_selector: array
- name: get_legal_consent
  endpoint:
    path: /applications/{application}/legal-consent
    method: GET
    data_selector: url
    params: {}
- name: legal_consent
  endpoint:
    path: /applications/{application}/legal-consent
    method: GET
- name: download_signed_agreement
  endpoint:
    path: /applications/{application}/download-agreement
    method: GET
    data_selector: file
    params: {}
- name: Download Signed Agreement
  endpoint:
    path: /applications/{application}/download-agreement
    method: GET
    data_selector: file
    params: {}
- name: upload_document
  endpoint:
    path: /api/v1/applications/{application}/documents
    method: POST
- name: upload_document
  endpoint:
    path: /api/v1/applications/{application}/documents
    method: POST
    data_selector: object
- name: submit_application
  endpoint:
    path: /{application}/submit
    method: POST
- name: submit_application
  endpoint:
    path: /{application}/submit
    method: POST
- name: Update Application Information
  endpoint:
    path: /{application}/info
    method: POST
- name: update_application_information
  endpoint:
    path: /applications/{application}/info
    method: POST
- name: Webhook Event Notifications
  endpoint:
    path: /reference/subscriptions
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
    params:
      page: 1
      per_page: 10
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
    params:
      page: 1
      per_page: 10
- name: create_subscription
  endpoint:
    path: /subscriptions
    method: POST
- name: list_subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: get_subscription_info
  endpoint:
    path: /subscriptions/{id}
    method: GET
- name: update_subscription
  endpoint:
    path: /subscriptions/{id}
    method: PATCH
- name: delete_subscription
  endpoint:
    path: /subscriptions/{id}
    method: DELETE
- name: subscription
  endpoint:
    path: /subscriptions/{subscription}
    method: GET
    data_selector: object
- name: create_subscription
  endpoint:
    path: /api/v1/subscriptions
    method: POST
- name: list_subscriptions
  endpoint:
    path: /api/v1/subscriptions
    method: GET
- name: get_subscription
  endpoint:
    path: /api/v1/subscriptions/{id}
    method: GET
- name: update_subscription
  endpoint:
    path: /api/v1/subscriptions/{id}
    method: PATCH
- name: delete_subscription
  endpoint:
    path: /api/v1/subscriptions/{id}
    method: DELETE
- name: update_subscription
  endpoint:
    path: /subscriptions/{subscription}
    method: PATCH
    data_selector: object
    params: {}
- name: get_subscription_information
  endpoint:
    path: /subscriptions/{subscription}
    method: GET
    data_selector: object
    params: {}
- name: delete_subscription
  endpoint:
    path: /subscriptions/{subscription}
    method: DELETE
    data_selector: object
    params: {}
- name: get_subscription_information
  endpoint:
    path: /{subscription}
    method: GET
    data_selector: object
    params:
      subscription: string
- name: subscriptions
  endpoint:
    path: /subscriptions/{subscription}
    method: DELETE
    data_selector: object
- name: update_subscription
  endpoint:
    path: /subscriptions/{subscription}
    method: PATCH
- name: get_subscription_information
  endpoint:
    path: /subscriptions/{subscription}
    method: GET
- name: delete_subscription
  endpoint:
    path: /subscriptions/{subscription}
    method: DELETE
- name: Webhook Events
  endpoint:
    path: /reference/webhook-events-2
    method: POST
    data_selector: event
    params: {}
- name: Webhook Events
  endpoint:
    path: /reference/webhook-events-2
    method: POST
- name: subscriptions
  endpoint:
    path: /subscriptions/{subscription}
    method: DELETE
    data_selector: object
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
- name: application_cancelled
  endpoint:
    path: /reference/sendapplicationcancelledevent
    method: POST
- name: Webhook Events
  endpoint:
    path: /reference/webhook-events-2
    method: POST
    data_selector: event
    params: {}
- name: merchant_is_ready_to_process
  endpoint:
    path: /reference/sendapplicationmerchantboardedevent
    method: POST
- name: Merchant
  endpoint:
    path: /create-merchant
    method: POST
- name: Get Merchant List
  endpoint:
    path: /get-merchant-list
    method: POST
- name: Get Specific Merchant's Information
  endpoint:
    path: /get-specific-merchant-information
    method: GET
- name: Get Settlement Time
  endpoint:
    path: /get-settlement-time
    method: GET
- name: See Merchants' Billing
  endpoint:
    path: /see-merchant-billing
    method: POST
- name: merchant_chargeback_added
  endpoint:
    path: /sendmerchantchargebackaddedevent
    method: POST
- name: Underwriter Requested Information
  endpoint:
    path: /webhook-events/underwriter-requested-information
    method: POST
- name: Application is approved
  endpoint:
    path: /webhook-events/application-approved
    method: POST
- name: Application is declined
  endpoint:
    path: /webhook-events/application-declined
    method: POST
- name: Application is cancelled
  endpoint:
    path: /webhook-events/application-cancelled
    method: POST
- name: Merchant is ready to process
  endpoint:
    path: /webhook-events/merchant-boarded
    method: POST
- name: Merchant account is closed
  endpoint:
    path: /webhook-events/application-merchant-closed
    method: POST
- name: 'Merchant: New Chargeback'
  endpoint:
    path: /webhook-events/merchant-chargeback-added
    method: POST
- name: 'Merchant: New Deposit'
  endpoint:
    path: /webhook-events/merchant-deposit-new
    method: POST
- name: 'Merchant: First Batch'
  endpoint:
    path: /webhook-events/merchant-first-batch
    method: POST
- name: 'Merchant: Started Processing'
  endpoint:
    path: /webhook-events/merchant-processing-started
    method: POST
- name: 'Merchant: Stopped Processing'
  endpoint:
    path: /webhook-events/merchant-processing-stopped
    method: POST
- name: 'Merchant: Residual Report Published'
  endpoint:
    path: /webhook-events/merchant-residuals-published
    method: POST
- name: 'Merchant: New Retrieval'
  endpoint:
    path: /webhook-events/merchant-retrieval-added
    method: POST
- name: 'Merchant: New Statement'
  endpoint:
    path: /webhook-events/merchant-statement-new
    method: POST
- name: 'Merchant: New Deposit'
  endpoint:
    path: /reference/sendmerchantdepositnewevent
    method: POST
- name: 'Merchant: First Batch'
  endpoint:
    path: /reference/sendmerchantfirstbatchevent
    method: POST
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: data
    params: {}
- name: 'Merchant: Started Processing'
  endpoint:
    path: /reference/sendmerchantprocessingstartevent
    method: POST
- name: 'Merchant: Stopped Processing'
  endpoint:
    path: /reference/sendmerchantprocessingstopevent
    method: POST
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
- name: Merchant Residual Report Published
  endpoint:
    path: /reference/sendmerchantresidualspublishedevent
    method: POST
    data_selector: event_body
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: merchant_retrieval
  endpoint:
    path: /sendmerchantretrievaladdedevent
    method: POST
- name: merchant_ready_to_process
  endpoint:
    path: /reference/sendapplicationmerchantboardedevent
    method: POST
    data_selector: payload
- name: merchant_new_statement
  endpoint:
    path: /reference/sendmerchantstatementnewevent
    method: POST
- name: LegalConsent
  endpoint:
    path: /reference/getapplicationlegalconsent
    method: GET
- name: Get Merchant List
  endpoint:
    path: /get-merchant-list
    method: POST
- name: Create Merchant
  endpoint:
    path: /create-merchant
    method: POST
- name: merchant_chargeback
  endpoint:
    path: /reference/sendmerchantchargebackaddedevent
    method: POST
- name: Get Legal Consent
  endpoint:
    path: /reference/getapplicationlegalconsent
    method: GET
- name: 'Merchant: New Deposit'
  endpoint:
    path: /reference/sendmerchantdepositnewevent
    method: POST
- name: 'Merchant: First Batch'
  endpoint:
    path: /reference/sendmerchantfirstbatchevent
    method: POST
- name: 'Merchant: Started Processing'
  endpoint:
    path: /reference/sendmerchantprocessingstartevent
    method: POST
- name: 'Merchant: Stopped Processing'
  endpoint:
    path: /reference/sendmerchantprocessingstopevent
    method: GET
    data_selector: event_body
- name: invoice
  endpoint:
    path: /api/invoice
    method: POST
- name: customer
  endpoint:
    path: /api/customer
    method: POST
- name: transaction
  endpoint:
    path: /api/transaction
    method: POST
- name: residual_report
  endpoint:
    path: /sendmerchantresidualspublishedevent
    method: POST
    data_selector: payload
    params: {}
- name: 'Merchant: New Retrieval'
  endpoint:
    path: /reference/sendmerchantretrievaladdedevent
    method: POST
- name: merchant_reports
  endpoint:
    path: /merchants/reports/{reportId}
    method: GET
    data_selector: results
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: results
- name: 'Merchant: New Statement'
  endpoint:
    path: /reference/sendmerchantstatementnewevent
    method: POST
- name: 'Merchant: New Retrieval'
  endpoint:
    path: /reference/sendmerchantretrievaladdedevent
    method: POST
- name: user_info
  endpoint:
    path: /users/search
    method: POST
    data_selector: users
    params:
      maxResults: '1000'
- name: merchant_or_partner_user_info
  endpoint:
    path: /users/search
    method: POST
- name: LegalConsent
  endpoint:
    path: /reference/getapplicationlegalconsent
    method: GET
    data_selector: response
- name: fee_schedules
  endpoint:
    path: /fee_schedules/search
    method: POST
    data_selector: fee_schedules
    params:
      maxResults: '1000'
      includeCustomFeeSchedules: true
- name: fee_schedule
  endpoint:
    path: /fee_schedules/search
    method: POST
    data_selector: results
    params:
      includeCustomFeeSchedules: true
- name: Payment Processing
  endpoint:
    path: /api/transact.php
    method: POST
    data_selector: transaction
    params: {}
- name: settlement_time
  endpoint:
    path: /processors/{id}
    method: GET
- name: settlement_time
  endpoint:
    path: /processors/id
    method: GET
- name: invoice
  endpoint:
    path: /api/invoice
    method: POST
    data_selector: response
    params: {}
- name: customer
  endpoint:
    path: /api/customer
    method: POST
    data_selector: response
    params: {}
- name: transaction
  endpoint:
    path: /api/transaction
    method: POST
    data_selector: response
    params: {}
- name: billing_reports
  endpoint:
    path: /billing/reports
    method: POST
    params:
      maxResults: required
      startDate: required
      endDate: required
      offset: required
- name: payment
  endpoint:
    path: /process
    method: POST
- name: transaction
  endpoint:
    path: /transactions
    method: GET
- name: merchant
  endpoint:
    path: /merchants
    method: GET
- name: create_merchant
  endpoint:
    path: /merchants
    method: POST
    data_selector: merchant
    params: {}
- name: user_info
  endpoint:
    path: /users/search
    method: POST
    data_selector: response
    params:
      maxResults: '1000'
      merchantId: string
      affiliateId: string
- name: merchant
  endpoint:
    path: /api/v4/merchants
    method: POST
    data_selector: object
    params: {}
- name: merchant_or_partner_user_info
  endpoint:
    path: /users/search
    method: POST
    data_selector: object
- name: sub_affiliate_list
  endpoint:
    path: /affiliates/reports
    method: POST
    params:
      maxResults: required
      ids: array of strings
      parentAffiliateId: string
      search: string
      offset: string
- name: fee_schedules
  endpoint:
    path: /fee_schedules/search
    method: POST
    params:
      maxResults: 1-1000
      includeCustomFeeSchedules: 'true'
- name: fee_schedule
  endpoint:
    path: /fee_schedules/search
    method: POST
    data_selector: results
    params:
      includeCustomFeeSchedules: true
- name: sub_affiliate
  endpoint:
    path: /affiliates/reports
    method: POST
    data_selector: results
- name: settlement_time
  endpoint:
    path: /processors/{id}
    method: GET
    data_selector: settlementTime
    params: {}
- name: settlement_time
  endpoint:
    path: /api/v4/processors/id
    method: GET
    data_selector: object
- name: transactions
  endpoint:
    path: /api/v4/transactions/reports
    method: POST
    data_selector: transactions
    params:
      merchantId: string
      merchantIds: array of strings
      maxResults: string
      offset: string
      orderId: string
      par: string
      hmac: string
      serviceId: string
      platformId: string
      firstName: string
      lastName: string
      email: string
      accountNumber: string
      transactionType: string
      customerId: string
      phone: string
      transactionIds: array of strings
      statuses: array of strings
      actionTypes: array of strings
      amount: object
      date: object
- name: transactions
  endpoint:
    path: /api/v4/transactions/reports
    method: POST
    data_selector: results
- name: billing_reports
  endpoint:
    path: /billing/reports
    method: POST
    data_selector: reports
    params:
      maxResults: ''
      startDate: ''
      endDate: ''
      offset: '0'
- name: merchant_list
  endpoint:
    path: /reference/get-merchant-list
    method: POST
- name: see_your_commission
  endpoint:
    path: /reference/see-your-commission
    method: POST
- name: Add Processor / Value-Added Service
  endpoint:
    path: /processors
    method: POST
- name: Get Merchant Processors and Value Added Services Details
  endpoint:
    path: /get-merchant-processors-value-added-services
    method: POST
- name: Card Type Lookup
  endpoint:
    path: /card-type
    method: POST
- name: Get Processor Config
  endpoint:
    path: /get-processor-config
    method: GET
- name: Get Available Services
  endpoint:
    path: /check-services
    method: POST
- name: create_merchant
  endpoint:
    path: /merchants
    method: POST
    data_selector: response
    params: {}
- name: merchants
  endpoint:
    path: /merchants
    method: POST
- name: adding_apple_pay
  endpoint:
    path: /merchants/{gateway_id}/apple_pay
    method: POST
    data_selector: response
    params: {}
- name: sub_affiliate
  endpoint:
    path: /affiliates/reports
    method: POST
    params:
      maxResults: number of max results, any integer number from 1 to 1000
      ids: array of merchant ids
      parentAffiliateId: an affiliate id
      search: case-insensitive search text
      offset: start point for the responses
- name: apple_pay
  endpoint:
    path: /merchants/gateway_id/apple_pay
    method: POST
- name: merchant_apple_pay_status
  endpoint:
    path: /merchants/apple_pay/status
    method: GET
- name: sub_affiliate
  endpoint:
    path: /affiliates/reports
    method: POST
    data_selector: results
- name: transactions
  endpoint:
    path: /transactions/reports
    method: POST
    data_selector: results
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: nm_response/transaction
    params: {}
- name: merchant_profile
  endpoint:
    path: /merchant/profile
    method: POST
    data_selector: nm_response/merchant
    params: {}
- name: customer_vault
  endpoint:
    params:
      report_type: customer_vault
      date_search: created,updated
- name: invoicing_report
  endpoint:
    params:
      invoice_status: open,closed,paid
- name: query
  endpoint:
    path: /query.php
    method: POST
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: packages
    params:
      page: 1
      per_page: 10
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
    params: {}
- name: add_processor_value_added_service
  endpoint:
    path: /processors
    method: POST
- name: apple_pay
  endpoint:
    path: /merchants/{gateway_id}/apple_pay
    method: POST
- name: apple_pay
  endpoint:
    path: /merchants/gateway_id/apple_pay
    method: POST
- name: merchant_apple_pay_status
  endpoint:
    path: /merchants/apple_pay_status
    method: GET
- name: Query
  endpoint:
    path: /query.php
    method: POST
    data_selector: response
    params: {}
- name: transaction
  endpoint:
    path: /api/query.php
    method: POST
    data_selector: nm_response
    params:
      security_key: string
      condition: string
      transaction_type: string
      action_type: string
      source: string
      transaction_id: string
      subscription_id: string
      invoice_id: string
      partial_payment_id: string
      order_id: string
      first_name: string
      last_name: string
      address1: string
      city: string
      state: string
      zip: string
      phone: string
      fax: string
      order_description: string
      drivers_license_number: string
      drivers_license_dob: string
      drivers_license_state: string
      email: string
      cc_number: string
      merchant_defined_field_1: string
      start_date: date-time
      end_date: date-time
      report_type: string
      mobile_device_license: string
- name: customer_vault
  endpoint:
    params:
      report_type: customer_vault
      date_search: created,updated
- name: invoicing
  endpoint:
    params:
      invoice_status: open,closed,paid
- name: profile
  endpoint:
    params:
      report_type: profile
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: packages
    params:
      page: 1
      per_page: 10
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
    params: {}
notes:
- API Keys are used to access Gateway APIs and Products.
- The NMI Payment Component is currently in beta.
- While the core functionality is production-ready, some features may change based
  on user input and ongoing improvements.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Collect Checkout will redirect to specified success or cancel URLs after payment.
- The NMI Payment Component is currently in beta. While the core functionality is
  production-ready, some features may change based on user input and ongoing improvements.
- A random ID will be assigned to the new Vault ID, and you can receive that value
  in the successURL.
- Collect.js authenticates with a public API key that can only be used to generate
  payment tokens.
- Success URL must be on the allowlist in your merchant control panel.
- Customize the appearance of your checkout page.
- Some objects like Contact may return nulls in deeply nested fields
- Some transactions using Digital Wallet (Apple Pay or Google Pay) data can only be
  performed via the API, because the customer must interact with the merchant's website
  to send them the payment data prior to starting the transaction.
- Default values are provided for various configuration attributes.
- Payment data is stored securely on the NMI platform.
- When using Collect.js, it posts data to your server including a payment_token linked
  to the encrypted wallet data.
- Ensure appropriate domains and verification files are set up in the Merchant Portal
  for Apple Pay.
- Ensure that the appropriate domains and verification files are set up in the Merchant
  Portal under Settings > Apple Pay.
- Account Funding Transactions (AFT) are a type of transaction where money is being
  transferred to fund another account.
- aft_recipient_name is required for Mastercard only.
- Requires aft_identifier and aft_recipient_name for Mastercard
- Transactions that use a FSA or HSA card need to be tagged to indicate they contain
  healthcare expenses.
- FSA/HSA transactions return the same response and reporting structure as conventional
  credit card purchases.
- Support for FSA/HSA (Flexible Spending Account / Health Savings Account) cards is
  available for merchants on the Tsys platform.
- Exact eligibility will depend on the individual plans.
- FSA/HSA transactions require specific fields to be included in API requests.
- Uses Tap to Pay technology to enable merchants to accept contactless payments directly
  on a smartphone or tablet.
- NMI is among the first to bring Tap to Pay technology to market—enabling merchants
  to accept contactless payments directly on a smartphone or tablet.
- While in Test Mode, all valid credit cards will be approved; however, no actual
  charges will be processed.
- Test Mode allows you to submit test transactions to the Payment Gateway.
- Your API Key will need to have API source permissions only.
- Security keys allow you to authenticate your account in numerous products and features
  in the gateway.
- You can create public or private keys and each type is for different functionality.
- Tap To Mobile is an always online feature and can not function without an internet
  connection at the point of interaction.
- Offline transactions are not supported as they are restricted by payment industry's
  security standards for Tap To Mobile transactions.
- Compliance and security policy require that live cards should only be used with
  devices purchased as production devices.
- Test cards should only be used with devices purchased as test devices.
- Compliance and security policy require that live cards should only be used with
  devices purchased as production devices. Similarly, test cards should only be used
  with devices purchased as test devices.
- When both POI types are configured, the PaymentDevice will be preferred.
- Requires setup of connected app in api
- connectAndConfigure() can be used to perform a Firmware update.
- Firmware update control feature is currently only supported on ID TECH VP3350 PIN
  pads on iOS.
- Tap To Mobile transactions are currently online only as an auto confirmed sale.
- Tipping is supported when running a Tap to Pay Transaction.
- Receipts must be issued after the transaction result is returned.
- The receipt content has been certified by the schemes and acquirers and its content
  cannot be modified.
- Customer vault tokenization is not supported for Tap to Pay transactions
- Credential on File flagging is not supported
- Custom merchant-defined fields are not supported
- Transactions may be returned with the state Uncommitted, in which case it is the
  responsibility of the integrating application to call confirmTransaction().
- Approved transactions must be confirmed for settlement in order to obtain the funds.
- SMS messages sent from the central servers require an international dialing code.
- An app using Tap to Pay on iPhone must function without additional secondary apps.
- Ensure onboarding takes no longer than 15 minutes for most users.
- An app that uses Tap to Pay on iPhone must function without the need of any additional
  secondary apps.
- Ensure that the onboarding process takes on average no longer than 15 minutes.
- An app that uses Tap to Pay on iPhone must be able to function without the need
  of any additional secondary apps.
- Users must have an obvious, prominent button to invoke a Tap to Pay on iPhone payment
  during checkout.
- The button that invokes Tap to Pay on iPhone must be in a visible location (without
  scrolling) for the user to select at the time of checkout.
- The button that invokes Tap to Pay on iPhone must never be altered, grayed out,
  or otherwise hidden based on whether the user has enabled Tap to Pay on iPhone or
  not.
- When the Tap to Pay on iPhone screen closes after a successful read of the card,
  there must be a 'processing' screen indicating that the transaction is being processed.
- There must be clear communication of the outcome after the processing screen to
  the user.
- When the transaction is processed regardless of outcome (approved or declined),
  it must be possible to send a digital receipt to the customer in a confidential
  way.
- 'When publishing your app in multiple regions include the following regional requirements:'
- In regions where PIN is a common part of the checkout experience you must provide
  PIN entry and accessibility details in the merchant education.
- Transactions in Test Mode never reach the processor.
- Simulator is for testing only. No real payments.
- In order to perform Tap to Pay payments with NMI, you must enable Tap to Pay within
  the NMI Marketplace, both in the Partner Portal and the Merchant Portal.
- When publishing your app in multiple regions include the following regional requirements.
- Once your application is ready for distribution, you will need to request production-level
  entitlements for Apple Tap To Pay. This process involves a review by Apple to ensure
  your application complies with their Tap To Pay user experience standards.
- Testing Only - Not for production use
- No Real Payments - Uses pre-recorded test data for contactless transactions
- Test Terminals Only - Do not use with live POS systems
- Tap to Pay payments use the same security technology offered as EMV chip cards that
  are deployed throughout the world.
- The Payment Device SDK allows developers to create software that integrates with
  Tap to Pay and mobile payment terminals.
- Switching between Test and Production requires reinstall/clear storage.
- Tap to Pay is an always online feature and cannot function without an internet connection
  at the point of interaction.
- Offline transactions are not supported as they are restricted by payment industry's
  security standards for Tap to Pay transactions.
- Ensure that the Base64 encoded SHA256 digest of the keystore certificate used for
  app signing is shared with NMI.
- The SDK abstracts many of the complexities of interacting with terminals
- The application identifier should be a single word or acronym that uniquely identifies
  the application.
- Auto Confirmation for Android Tap to Pay transactions (no manual confirmTransaction
  needed)
- Requires internet connection for all operations.
- Geofencing restrictions may apply based on the API key used.
- The keystore hash must come from the same signing key you use for your app - whether
  for production or testing.
- It is a scheme requirement that the PIN pad can be configured and updated remotely.
- CertificateFingerprint is mandatory for Android Tap to Pay implementations
- Tap to Pay transactions are currently online only as an auto confirmed sale.
- To enable contactless payments with Tap to Pay, register a RequestActivityListener
  before calling startTransaction.
- There are cost implications for sending using the central server so please contact
  support for further information.
- Failure to properly display required symbols and branding may result in compliance
  issues with card schemes and could affect your ability to process contactless payments.
- CertificateFingerprint is mandatory for Android Tap to Pay implementations.
- Test Mode lets you run real hardware tests with no live charges.
- Transactions in Test Mode are not processed for payment.
- iOS devices cannot connect with the VP3350 over the USB-C female port
- When switching between a lightning ID TECH VP3350 and a Bluetooth ID TECH VP3350
  you will need to unplug the lighting device before a connection can be made to the
  Bluetooth device.
- Keep the API Key details safe - you need this to configure the Payment Device SDK
  for processing transactions.
- Tap to Pay is quick, simple and secure.
- Each Tap on Phone transaction is protected through the same technology as dipped
  card transactions.
- The SDK is available for iOS and Android platforms.
- SQLCipher is required for the SDK to compile and run.
- In order to perform in-person payments with NMI, you must enable Encrypted Devices
  within the NMI Marketplace, both in the Partner Portal and the Merchant Portal.
- The minimum supported iOS version is 15.0.
- The minimum supported Android version is 12 (SDK version 31).
- Deferred authorization allows a merchant to simulate an approval offline, without
  processing by the gateway platform.
- Regular reconciliation is critical when Deferred Authorizations are utilized to
  ensure issues are identified and remedied quickly.
- The defaults stated are for the test platform. The values for the live platform
  should be agreed with your payment gateway provider.
- It may be necessary to configure TMS properties specifically for an integrating
  application.
- Protocol strings should be reviewed before submitting an application.
- Review notes should include the MFi Product Plan ID for the supported accessory.
- Deferred authorization carries risks for the merchant.
- Consider adding transaction amount caps, supervisor PIN, and total number of offline
  transaction limits.
- Regular reconciliation is critical when Deferred Authorizations are utilized.
- Device must be connected to the internet for proper registration.
- Check for signs of tampering upon receipt of the terminal.
- To change these properties, please contact Payment Device SDK support. The defaults
  stated are for the test platform. The values for the live platform should be agreed
  with your payment gateway provider.
- Authentication is done via a security key that you can generate in your merchant
  control panel on the 'Security Keys' Settings page.
- Select 'API' for the key type.
- Ensure that the application complies with all regulations in all regions where your
  application will be distributed.
- Every API request must be authenticated using HTTP Bearer Authentication header.
- Ensure device has internet access for registration.
- Authentication is done via a security key that you can generate in your merchant
  control panel on the Security Keys Settings page.
- Response method can be 'synchronous' or 'asynchronous'.
- Every API request must be authenticated using HTTP Bearer Authentication header
  and include a Content-Type header.
- This POI Device Prompt is not supported with Miura devices.
- The Payment API accepts either multipart/form-data or application/x-www-form-urlencoded.
- Every API request must be authenticated using HTTP Bearer Authentication header
- Registration requests using T00001 will return a virtual (fake) POI Device ID.
- VPP does not support handling POI device prompts at this time.
- Always call ConfirmTransaction() after authorization, otherwise the merchant will
  not receive funds.
- Allowlisting is currently supported only via the magnetic stripe reader and is not
  available for chip or contactless transactions.
- The allowlisting process may take several days, as it requires secure approval to
  maintain data integrity.
- All GUIDs returned associated with the VPP will always end in 12 zeroes.
- Payments in your pocket—powered by our SDKs
- Fast to Integrate – Drop-in libraries with clear documentation and sample apps to
  get you live quickly.
- Seamless UX – Native UI components and callbacks make it easy to keep the payment
  flow inside your app.
- Hardware Ready – Out-of-the-box compatibility with supported card readers and payment
  devices.
- Secure & Compliant – PCI-validated and EMV-certified so you don’t have to worry
  about compliance headaches.
- Always call `ConfirmTransaction()` after authorization, otherwise the merchant will
  not receive funds.
- Designed to handle payments in kiosks, vending, EV charging, and other self-service
  use cases.
- Cross-Platform Support – Consistent APIs across Windows and Linux.
- You must disable Test Mode before launching your solution into production.
- You must enable Encrypted Devices within the NMI Marketplace.
- Seamless payments for self-service experiences
- Optimized for continuous operation in demanding, high-traffic environments
- Cloud-Connected Payments — Eliminate heavy device integrations by managing transactions
  through a single cloud API.
- Device Flexibility — Support a wide range of terminals without writing custom code
  for each one.
- Faster Updates — Deploy new features, device support, and compliance updates instantly
  through the cloud.
- Scalable Architecture — Built for modern deployments, from in-store lanes to mobile
  setups and pop-up shops.
- Secure by Design — PCI DSS and EMV compliant, ensuring every transaction is protected
  from the ground up.
- All Direct Connect integrated payment device hardware must be certified with the
  processor in advance of launch to process EMV.
- Gateway.js authenticates with a public API key with Checkout permissions. Create
  this in the Merchant Portal under Settings > Security Keys.
- Payer Authentication is a fraud prevention service that facilitates the authentication
  of transactions before submitting them to the gateway for processing.
- 'If a request data is not correct, the response will contain further information
  at XPath: Response/Result/PaymentProviderError.'
- Payer Authentication attempts to collect device data from the customer's browser,
  but sometimes this process can timeout and cause the request to fail.
- Requires a Merchant Security Key to make requests.
- The payment gateway’s real-time v4 API is a complete API that allows you to build
  any payment features found in your NMI Partner Portal.
- Security is at the core of everything we do.
- Our payments systems exceed industry security standards.
- The script tag must load from the payment gateway. You should not attempt to host
  the file and load it from your own domain.
- Session IDs need to be provided to the payment API. If you don’t pass a Session
  ID, Kount will not run correctly.
- If you do not have your Sandbox credentials, login to guide.nmi.com to access your
  Sandbox API Keys and your Sandbox Partner and Merchant Portals.
- Never use real credit card or bank account information when testing.
- The CardEase 3DS Server is a hosted 3-D Secure Server that allows for E-Commerce
  sites to accept and process Visa Secure, Mastercard Identity Check, Amex SafeKey
  2.0 and Discover ProtectBuy 2.0 authentications.
- Pagination is a common technique used in APIs to retrieve large amounts of data
  in smaller, more manageable chunks.
- API designers should provide clear and consistent documentation for pagination parameters.
- All transactions are simulated; no charges are processed.
- Transaction Approved
- Transaction Declined
- Error in transaction data or system error
- If you receive a response_code of 301 or an HTTP 429 response, do not immediately
  retry the request.
- Repeated authentication failures from your IP may result in temporarily lowered
  rate limits.
- Never use real API Keys when testing. The gateway allows Partners to create Test
  Merchant Accounts.
- Requires setup of connected app in NMI
- This request will activate any and all pending service on a merchant account.
- Updated about 12 hours ago
- Never use real API Keys when testing. Use keys from Test Merchant Accounts.
- Response includes links for querying results.
- Pagination is supported with first, last, next, and previous links.
- Never use real API Keys when testing.
- Use POST request to see commission reports.
- 'The date must be a valid ISO 8601 time string (Example: 13:14:15).'
- Testing should always use keys from the Test Accounts.
- 200 - Get Processor Config
- The Query API can be tested with live credentials or a dedicated test account only.
- Customer Token Vault enables secure, persistent card storage and network tokenization
  for merchants.
- Testing should always use keys from the Test Accounts and never keys from a Standard
  Account.
- The Query API will respond in Universal Time Coordinated (UTC).
- If you are upgrading a merchant gateway account that already has Customer Vault,
  this request will upgrade them to the Customer Token Vault. You do not need to disable
  the old vault extension.
- The conversation customer's phone number must be ten digits, US and CA numbers only.
- The merchant ID from NMI is only required for partners; for merchants it is ignored.
- The Authvia v4 UUID for the conversation is required.
- Each endpoint can be subscribed to specific events that happen in the gateway.
- The retry timing may change in the future.
- All URLs must start with “https” and have valid TLS encryption enabled.
- The retry schedule may change based on current circumstances.
- Your application should not rely on this specific retry schedule, as the retry timing
  may change in the future.
- Some objects may return nulls in deeply nested fields
- Requires test mode for event samples
- Events may include additional fields depending on the transaction.
- Event samples include transaction refund and void events
- Events related to settlement activity.
- Batch settlement events related to successful and failed settlements.
- Designed to handle payments in kiosks, vending, EV charging, and other self-service
  use cases
- The Sign-Up API allows NMI Payments partners to create and manage merchant onboarding
  workflows.
- The token remains valid for 60 minutes.
- 'Required scope: packages:read'
- The application's status is determined by the Monthly Volume Field (fld_monthly_volume).
- 'Required scope: applications:write'
- An application can be updated only when it is in draft status.
- 'Required scope: applications:read'
- Legal consent is required prior to application submission.
- Provide supporting documents for the application. Documents can only be uploaded
  while the application is the draft or underwriter_requested_information status.
- Documents can only be uploaded while the application is the `draft` or `underwriter_requested_information`
  status.
- 'Required scope: `applications:write`'
- 'Path Params: application - required, length between 20 and 20'
- 'Query Params: skip_merchant_email - boolean'
- 'To expedite the merchant application underwriting process it is recommended to
  include the Bank or Processing Statement (3 Months of Statements) if the merchant
  meets any of these criteria: fld_average_ticket ≥ 1000, fld_high_ticket ≥ 2500.'
- Webhook event notifications are sent to a registered callback URL.
- Signature verification uses HMAC-SHA256 hashing algorithm.
- A secure signature is included in the Signature header for authenticity and integrity.
- Total delivery window is approximately 18 minutes.
- 'Webhooks are retried when HTTP response codes: 4xx, 5xx (except 410 Gone), network
  timeouts (10 second timeout per attempt), connection failures (5 second connection
  timeout).'
- After 3 failed delivery attempts over ~18 minutes, the webhook is marked as permanently
  failed and delivery stops.
- 'Required scope: subscriptions:read'
- 'Required scope: subscriptions:write'
- The ID of the subscription to retrieve must be exactly 20 characters.
- The URL for this request expired after 30 days.
- Webhook events provide real-time notifications whenever there is a status update
  in your application.
- This event is triggered when additional information is requested during underwriting
  process.
- Sent when the merchant application is approved.
- This event is triggered when the merchant application is declined.
- This event is triggered when the merchant is boarded and ready to process.
- This event is triggered when a merchant processes their first batch of transactions.
- Requires OAuth2 setup for API access
- This event is triggered when a merchant starts processing transactions.
- This event is triggered when a merchant stops processing transactions.
- Event triggered when the merchant application is declined.
- This event is triggered when merchant residuals reports are published.
- This event is triggered when a retrieval is added for a merchant.
- This event is triggered when a new statement is available for a merchant.
- Merchant account is closed
- The helper script is meant to facilitate the embedding process of the LegalConsent
  widget into your form as a controlled iFrame.
- Requests must include a Content-Type header indicating that the content is JSON
  data.
- You can board merchants under an existing sub-affiliate by providing a parentAffiliateId
  in the create request.
- 200 - Create Standard Merchant Response
- Pagination links for navigating through the report results are available.
- The gateway allows Partners to create Test Merchant Accounts.
- This API allows partners to opt their merchants into Apple Pay.
- Pagination may use offset or null if not used.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'FirmwareUpdateRequired: Update is critical and must be performed.'
- 'APPROVED: both acquirer + terminal approved'
- 'DECLINED: either acquirer or terminal declined'
- 'VOIDED: merchant or SDK voided the transaction'
- 'DELAYED: offline encoded request for later processing'
- 'attestation will fail: Ensure compliance during development with the API key.'
- 'transaction processing is currently restricted: Ensure the API key is associated
  with a registered merchant account in the same location.'
- '401 Unauthorized: Check API key and permissions.'
- '403 Forbidden: API key not permitted for this action.'
- '404 Not Found: Check the endpoint path.'
- '429 Too Many Requests: Rate limit exceeded.'
- 'FirmwareUpdateRequired: An update is critical, please update the firmware'
- 'FirmwareUpdateRequired: A firmware update is required before proceeding'
- 400 → Missing Platform ID / API Key
- 401 → Invalid API Key
- 404 → Device not found
- 300 → Long processing / retry, check connectivity
- 400 - No Platform ID or no API Key was sent in the request.
- 401 - An invalid API Key was sent in the request.
- '400: Missing Platform ID / API Key'
- '401: Invalid API Key'
- '404: Device not found'
- '300: Long processing / retry, check connectivity'
- 300 - Indicates that an issue occurred whilst trying to get the status of a transaction
- 400 - No Platform ID or no API Key was sent in the request
- 401 - An invalid API Key was sent in the request
- 404 - The Platform ID provided was not found
- To cause a declined response, pass an amount less than 1.00.
- To trigger a fatal error message in processing, pass an invalid POI Device ID.
- To cause an unknown AsyncStatus GUID, pass an invalid GUID.
- 300 - Indicates that an issue occurred whilst trying to get the status of a transaction.
- 404 - The Platform ID provided was not found.
- API key required.
- Missing/Invalid Authentication
- 'Missing required field: ''registration code'''
- 'Missing required field: ''poi device id'''
- Encrypted Device service not available
- Invalid registration code. Please try again.
- Device Deregistration Unsuccessful or Invalid poi device id
- I am seeing my device display 'Registered POI Device' instead of the nickname I
  provided.
- I am not seeing any devices in the poiDeviceID object when I ping the /list endpoint.
- Only one authentication method may be used.
- Invalid poi_device_id.
- Communication with the POI device has timed out. Please restart transaction.
- The POI device already in use. Please complete the current transaction and try again.
- The transaction was cancelled on the POI device. Please restart transaction.
- '401 Unauthorized: Recheck API key or permissions'
- To cause an empty Estate Management response, pass an invalid GUID.
- Bit 13 (Enciphered PIN for offline verification) does not match terminal configuration
- Bit 14 (Signature (paper)) does not match terminal configuration
- Bit 15 (Enciphered PIN for online verification) does not match terminal configuration
- Bit 16 (Plaintext PIN for offline ICC verification) does not match terminal configuration
- Bit 22 (IC with contacts) does not match terminal configuration
- Bit 23 (Magnetic stripe) does not match terminal configuration
- Bit 24 (Manual key entry) does not match terminal configuration
- 'Bit at position X incorrect, Expected: Y'
- 'Does not match boarded country code, Expected: X'
- 'Does not match boarded currency code, Expected: X'
- Does not match expected terminal type
- 'Does not match expected value, Expected: X'
- 'Does not match request value, Expected: X'
- Failed to verify cryptogram
- 'Hex character at position X incorrect, Expected: Y'
- Incorrect format
- Incorrect format, Expected ALPHANUM
- Incorrect format, Expected HEX
- Incorrect format, Expected NUM
- 'Invalid length: X, Expected: [Y, Z]'
- Invalid tag value
- No bit at position X (Too short)
- Online pin CVM used on terminal without reported support
- Pin CVM used on terminal without reported support
- Signature CVM used on terminal without reported support
- Tag missing
- Tag should not be present
- Unknown format
- Unknown test case reference
- 'Value length incorrect, Expected: X'
- 'TRANSACTION_STATUS_N: Not Authenticated/Account Not Verified; Transaction denied'
- 'TRANSACTION_STATUS_U: Authentication/Account Verification Could Not Be Performed;
  Technical or other problem'
- 'TRANSACTION_STATUS_R: Authentication/ Account Verification Rejected; Issuer is
  rejecting authentication/verification'
- 'Timeout: Request can fail due to device data collection timeout.'
- '401 Unauthorized: Recheck API key or token expiration'
- 'HTTP 429: Too Many Requests'
- 'response_code=301: Rate limit exceeded'
- '100: Transaction was approved.'
- '200: Transaction was declined by processor.'
- '201: Do not honor.'
- '202: Insufficient funds.'
- '203: Over limit.'
- '204: Transaction not allowed.'
- '220: Incorrect payment information.'
- '221: No such card issuer.'
- '222: No card number on file with issuer.'
- '223: Expired card.'
- '224: Invalid expiration date.'
- '225: Invalid card security code.'
- '226: Invalid PIN.'
- '240: Call issuer for further information.'
- '250: Pick up card.'
- '251: Lost card.'
- '252: Stolen card.'
- '253: Fraudulent card.'
- '260: Declined with further instructions available. (See response text)'
- '261: Declined-Stop all recurring payments.'
- '262: Declined-Stop this recurring program.'
- '263: Declined-Update cardholder data available.'
- '264: Declined-Retry in a few days.'
- '300: Transaction was rejected by gateway.'
- '400: Transaction error returned by processor.'
- '410: Invalid merchant configuration.'
- '411: Merchant account is inactive.'
- '420: Communication error.'
- '421: Communication error with issuer.'
- '430: Duplicate transaction at processor.'
- '440: Processor format error.'
- '441: Invalid transaction information.'
- '460: Processor feature not available.'
- '461: Unsupported card type.'
- '400: Bad Request - The request is not correct. Parse error.'
- '401: Unauthorized - a missing API Key or an invalid API Key was sent in the request.'
- '404: Not Found - The resource (Gateway ID / Processor ID) provided was not found.'
- '500: Internal Server Error.'
- '260: Declined with further instructions available.'
- '503: Service Unavailable.'
- '401 Unauthorized: API key is invalid or missing'
- 'Unauthorized: Your v4 API key is required.'
- Attempting a POST will result in an error.
- 'Unauthorized: Check your API key'
- 'URL Expired: The URL for this request expired after 30 days.'
- '401 Unauthorized: Check your API key'
- 'Unauthorized: Your v4 API key that was generated in the Partner portal is required.'
- 200 - Card Type Lookup - Debit
- 200 - Card Type Lookup - Credit
- 200 - Card Type Lookup - Unknown
- 200 - Card Type Lookup - Unavailable
- '401 Unauthorized: Your API key is invalid or expired.'
- '400 Bad Request: The merchant has not yet enabled Apple Pay'
- '400 Bad Request: Merchant has not enabled Apple Pay'
- '400 Bad Request: If the merchant has not yet enabled Apple Pay'
- 'URL expired: The request URL has expired after 30 days.'
- 200 A success message.
- invalid webhook - signature header missing
- unrecognized webhook signature format
- invalid webhook - invalid signature, cannot verify sender
- 'HTTP 200: Success response required for webhook notifications'
- '200: Decline'
- '100: Success'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify authentication credentials.'
- '404 Not Found: Endpoint does not exist.'
- '401 Unauthorized: Invalid client_id or client_secret'
- '400 Bad Request: Missing required parameters'
- 401 - Client Authentication Failed
- '401 Unauthorized: Client Authentication Failed'
- '422 Bad request (validation error): Invalid Page Size'
- '422 Bad request (validation error): Invalid page size'
- '404: Resource Not Found'
- 422 Bad request (validation error) response for invalid page size
- '404: Error response for resource not found'
- Missing 1 required scope
- 404 Resource Not Found
- 422 Invalid Update
- '422: Invalid Update'
- 422 Validation error
- 404 Error response for resource not found
- '422: Invalid Request'
- '422: Validation error'
- '404: Resource not found'
- 422 Invalid Request
- 'HTTP response codes: 4xx, 5xx (except 410 Gone)'
- Network timeouts (10 second timeout per attempt)
- Connection failures (5 second connection timeout)
- '400 Invalid Subscription: Error code, Error message'
- '400 Invalid Subscription: Error code and message with details.'
- '404 Error: Resource not found'
- 'APPLICATION_DECLINED: The merchant application is declined.'
- '401 Unauthorized: Check your API key or OAuth token'
- '404 Not Found: Verify the endpoint path'
- '500 Internal Server Error: Retry the request'
- Application is cancelled
- '404: Not Found - The resource provided was not found.'
- 'Unauthorized: Recheck API key or token expiration.'
- 200 Success
- Never use real API Keys when testing.
- '401 Unauthorized: Check your API key.'
- '422 Bad request (validation error): Error code and message for invalid page size'
- '422 Bad request (validation error): validation error for invalid page size'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - AccessToken
  - oauth2
  - subscriptions:write
  - ClientCredentials
client:
  base_url: https://secure.nmi.com/api
  headers:
    accept: application/x-www-form-urlencoded
    content-type: application/x-www-form-urlencoded
source_metadata: null
