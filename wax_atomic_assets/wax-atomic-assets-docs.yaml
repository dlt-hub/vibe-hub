resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: atomicassets
  endpoint:
    path: /atomicassets
    method: GET
    data_selector: data
    params: {}
- name: atomicmarket
  endpoint:
    path: /atomicmarket
    method: GET
    data_selector: data
    params: {}
- name: My Cloud Wallet
  endpoint:
    path: https://www.mycloudwallet.com/register
    method: GET
- name: Anchor
  endpoint:
    path: https://www.greymass.com/anchor
    method: GET
- name: Wombat
  endpoint:
    path: https://www.wombat.app/the-app
    method: GET
- name: Cleos
  endpoint:
    path: /build/tools/blockchain_tools#cleos
    method: GET
- name: accounts
  endpoint:
    path: /v1/accounts
    method: GET
    data_selector: accounts
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transactions
    params: {}
- name: contracts
  endpoint:
    path: /v1/contracts
    method: GET
    data_selector: contracts
    params: {}
- name: tokens
  endpoint:
    path: /v1/tokens
    method: GET
    data_selector: tokens
    params: {}
- name: cdt-abidiff
  endpoint:
    path: /cdt/abidiff
    method: GET
    data_selector: output
- name: cdt-cpp
  endpoint:
    path: /cdt/cpp
    method: GET
    data_selector: output
- name: cdt-init
  endpoint:
    path: /cdt/init
    method: GET
    data_selector: output
- name: cdt-ld
  endpoint:
    path: /cdt/ld
    method: GET
    data_selector: output
- name: register_contract
  endpoint:
    path: /account/boost.wax?loadContract=true&tab=Actions&account=boost.wax&scope=boost.wax&limit=100&action=reg
    method: POST
    data_selector: result
    params: {}
- name: deregister_contract
  endpoint:
    path: /account/boost.wax?loadContract=true&tab=Tables&account=boost.wax&scope=boost.wax&limit=100&action=dereg
    method: POST
    data_selector: result
    params: {}
- name: noop_action
  endpoint:
    path: /account/boost.wax?loadContract=true&tab=Tables&account=boost.wax&scope=boost.wax&limit=100&action=noop
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: My Cloud Wallet
  endpoint:
    path: https://mycloudwallet.com
    method: GET
- name: Anchor
  endpoint:
    path: https://github.com/greymass/anchor
    method: GET
- name: traces
  endpoint:
    path: /traces
    method: GET
    data_selector: records
- name: blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: records
- name: traces
  endpoint:
    path: /traces
    method: GET
    data_selector: records
- name: blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: records
- name: token_airdrop
  endpoint:
    path: /disperse
    method: POST
    data_selector: transaction
    params:
      contractName: alien.worlds
      tokenName: TLM
      tokenPrecision: 4
      memo: Disperse
- name: nft_airdrop
  endpoint:
    path: /nft/disperse
    method: POST
    data_selector: transaction
    params:
      contractName: atomicassets
      useTemplateMode: false
      collection_name: ''
      template_id: ''
- name: token_airdrop
  endpoint:
    path: /airdrop/token
    method: POST
    data_selector: transaction
    params:
      rpcApi: https://wax.qaraqol.com
      contractName: alien.worlds
      tokenName: TLM
      tokenPrecision: 4
      memo: Disperse
- name: nft_airdrop
  endpoint:
    path: /airdrop/nft
    method: POST
    data_selector: transaction
    params:
      rpcApi: https://wax.greymass.com
      atomicApi: https://atomic-wax.qaraqol.com
      contractName: atomicassets
      useTemplateMode: false
- name: ricardian_clause
  endpoint:
    path: /build/tools/ricardian_clause
    method: GET
    data_selector: null
    params: {}
- name: Chain API
  endpoint:
    path: /apis/chain-api.htm
    method: GET
- name: AtomicAssets API
  endpoint:
    path: /apis/atomic-api.htm
    method: GET
- name: ricardian_contract
  endpoint:
    path: /build/tools/ricardian_contract
    method: GET
    data_selector: contracts
- name: ricardian_clause
  endpoint:
    path: /build/tools/ricardian_clause
    method: GET
    data_selector: clauses
    params: {}
- name: Chain API
  endpoint:
    path: /apis/chain-api.htm
    method: GET
- name: AtomicAssets API
  endpoint:
    path: /apis/atomic-api.htm
    method: GET
- name: CDT
  endpoint:
    path: /build/api-reference/cdt_api
    method: GET
- name: get_account
  endpoint:
    path: /v1/chain/get_account
    method: POST
    data_selector: 'null'
    params:
      account_name: required
- name: get_block
  endpoint:
    path: /v1/chain/get_block
    method: POST
    data_selector: 'null'
    params:
      block_num_or_id: required
- name: get_block_info
  endpoint:
    path: /v1/chain/get_block_info
    method: POST
    data_selector: 'null'
    params:
      block_num: required
- name: get_info
  endpoint:
    path: /v1/chain/get_info
    method: POST
    data_selector: 'null'
    params: {}
- name: push_transaction
  endpoint:
    path: /v1/chain/push_transaction
    method: POST
    data_selector: 'null'
    params: {}
- name: send_transaction
  endpoint:
    path: /v1/chain/send_transaction
    method: POST
    data_selector: 'null'
    params: {}
- name: push_transactions
  endpoint:
    path: /v1/chain/push_transactions
    method: POST
    data_selector: 'null'
    params: {}
- name: get_block_header_state
  endpoint:
    path: /v1/chain/get_block_header_state
    method: POST
    data_selector: 'null'
    params:
      block_num_or_id: required
- name: get_abi
  endpoint:
    path: /v1/chain/get_abi
    method: POST
    data_selector: 'null'
    params:
      account_name: required
- name: get_currency_balance
  endpoint:
    path: /v1/chain/get_currency_balance
    method: POST
    data_selector: 'null'
    params:
      code: required
      account: required
      symbol: required
- name: get_currency_stats
  endpoint:
    path: /v1/chain/get_currency_stats
    method: POST
    data_selector: 'null'
    params:
      code: optional
      symbol: optional
- name: get_required_keys
  endpoint:
    path: /v1/chain/get_required_keys
    method: POST
    data_selector: 'null'
    params:
      transaction: required
      available_keys: required
- name: get_account
  endpoint:
    path: /v1/chain/get_account
    method: POST
    data_selector: account
    params: {}
- name: get_block
  endpoint:
    path: /v1/chain/get_block
    method: POST
    data_selector: block
    params: {}
- name: get_block_info
  endpoint:
    path: /v1/chain/get_block_info
    method: POST
    data_selector: block_info
    params: {}
- name: get_info
  endpoint:
    path: /v1/chain/get_info
    method: POST
    data_selector: info
    params: {}
- name: push_transaction
  endpoint:
    path: /v1/chain/push_transaction
    method: POST
    data_selector: transaction
    params: {}
- name: send_transaction
  endpoint:
    path: /v1/chain/send_transaction
    method: POST
    data_selector: transaction
    params: {}
- name: push_transactions
  endpoint:
    path: /v1/chain/push_transactions
    method: POST
    data_selector: transactions
    params: {}
- name: get_block_header_state
  endpoint:
    path: /v1/chain/get_block_header_state
    method: POST
    data_selector: header_state
    params: {}
- name: get_abi
  endpoint:
    path: /v1/chain/get_abi
    method: POST
    data_selector: abi
    params: {}
- name: get_currency_balance
  endpoint:
    path: /v1/chain/get_currency_balance
    method: POST
    data_selector: balance
    params: {}
- name: get_currency_stats
  endpoint:
    path: /v1/chain/get_currency_stats
    method: POST
    data_selector: stats
    params: {}
- name: get_required_keys
  endpoint:
    path: /v1/chain/get_required_keys
    method: POST
    data_selector: required_keys
    params: {}
- name: get_producers
  endpoint:
    path: /get_producers
    method: POST
    data_selector: 'null'
    params:
      limit: string
      lower_bound: string
      json: boolean
- name: get_raw_code_and_abi
  endpoint:
    path: /get_raw_code_and_abi
    method: POST
    data_selector: 'null'
    params:
      account_name: string
- name: get_scheduled_transactions
  endpoint:
    path: /get_scheduled_transactions
    method: POST
    data_selector: 'null'
    params:
      lower_bound: string
      limit: integer
      json: boolean
- name: get_table_by_scope
  endpoint:
    path: /get_table_by_scope
    method: POST
    data_selector: 'null'
    params:
      code: string
      table: string
      lower_bound: string
      upper_bound: string
      limit: integer
      reverse: boolean
      show_payer: boolean
- name: get_table_rows
  endpoint:
    path: /get_table_rows
    method: POST
    data_selector: 'null'
    params:
      code: string
      table: string
      scope: string
      index_position: string
      key_type: string
      encode_type: string
      lower_bound: string
      upper_bound: string
      limit: integer
      reverse: boolean
      show_payer: boolean
- name: get_code
  endpoint:
    path: /get_code
    method: POST
    data_selector: 'null'
    params:
      account_name: string
      code_as_wasm: integer
- name: get_raw_abi
  endpoint:
    path: /get_raw_abi
    method: POST
    data_selector: 'null'
    params:
      account_name: string
- name: get_activated_protocol_features
  endpoint:
    path: /get_activated_protocol_features
    method: POST
    data_selector: 'null'
    params:
      lower_bound: integer
      upper_bound: integer
      limit: integer
      search_by_block_num: boolean
      reverse: boolean
- name: get_accounts_by_authorizers
  endpoint:
    path: /get_accounts_by_authorizers
    method: POST
    data_selector: 'null'
    params:
      accounts: Array
      keys: Array
- name: get_transaction_status
  endpoint:
    path: /get_transaction_status
    method: POST
    data_selector: 'null'
    params:
      id: string
- name: push_block
  endpoint:
    path: /push_block
    method: POST
    data_selector: null
    params: {}
- name: get_producers
  endpoint:
    path: /get_producers
    method: POST
    data_selector: null
    params: {}
- name: get_raw_code_and_abi
  endpoint:
    path: /get_raw_code_and_abi
    method: POST
    data_selector: null
    params: {}
- name: get_scheduled_transactions
  endpoint:
    path: /get_scheduled_transactions
    method: POST
    data_selector: null
    params: {}
- name: get_table_by_scope
  endpoint:
    path: /get_table_by_scope
    method: POST
    data_selector: null
    params: {}
- name: get_table_rows
  endpoint:
    path: /get_table_rows
    method: POST
    data_selector: null
    params: {}
- name: get_code
  endpoint:
    path: /get_code
    method: POST
    data_selector: null
    params: {}
- name: get_raw_abi
  endpoint:
    path: /get_raw_abi
    method: POST
    data_selector: null
    params: {}
- name: get_activated_protocol_features
  endpoint:
    path: /get_activated_protocol_features
    method: POST
    data_selector: null
    params: {}
- name: get_accounts_by_authorizers
  endpoint:
    path: /get_accounts_by_authorizers
    method: POST
    data_selector: null
    params: {}
- name: get_transaction_status
  endpoint:
    path: /get_transaction_status
    method: POST
    data_selector: null
    params: {}
- name: push_block
  endpoint:
    path: /v1/chain/push_block
    method: POST
    data_selector: null
    params: {}
- name: compute_transaction
  endpoint:
    path: /v1/chain/push_block
    method: POST
    data_selector: null
    params: {}
- name: get_code_hash
  endpoint:
    path: /v1/chain/push_block
    method: POST
    data_selector: null
    params: {}
- name: get_transaction_id
  endpoint:
    path: /v1/chain/push_block
    method: POST
    data_selector: null
    params: {}
- name: get_producer_schedule
  endpoint:
    path: /v1/chain/push_block
    method: POST
    data_selector: null
    params: {}
- name: send_read_only_transaction
  endpoint:
    path: /v1/chain/push_block
    method: POST
    data_selector: null
    params: {}
- name: assets
  endpoint:
    path: /atomictools/v1/assets
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 100
      order: desc
      sort: asset_id
- name: collections
  endpoint:
    path: /atomictools/v1/collections
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 100
      order: desc
      sort: created
- name: push_block
  endpoint:
    path: /v1/chain/push_block
    method: POST
    data_selector: null
    params: {}
- name: compute_transaction
  endpoint:
    path: /v1/chain/push_block
    method: POST
    data_selector: null
    params: {}
- name: get_code_hash
  endpoint:
    path: /v1/chain/push_block
    method: POST
    data_selector: null
    params: {}
- name: get_transaction_id
  endpoint:
    path: /v1/chain/push_block
    method: POST
    data_selector: null
    params: {}
- name: get_producer_schedule
  endpoint:
    path: /v1/chain/push_block
    method: POST
    data_selector: null
    params: {}
- name: send_read_only_transaction
  endpoint:
    path: /v1/chain/push_block
    method: POST
    data_selector: null
    params: {}
- name: fetch_offers
  endpoint:
    path: /fetch_offers
    method: GET
    params:
      page: 1
      limit: 100
      order: desc
      sort: created
- name: find_offer_by_id
  endpoint:
    path: /find_offer/{offer_id}
    method: GET
- name: fetch_offer_logs
  endpoint:
    path: /fetch_offer_logs/{offer_id}
    method: GET
    params:
      page: 1
      limit: 100
      order: desc
- name: assets
  endpoint:
    path: /atomictools/v1/assets
    method: GET
    data_selector: data
    params:
      limit: 100
      page: 1
      order: desc
      sort: asset_id
- name: collections
  endpoint:
    path: /atomictools/v1/collections
    method: GET
    data_selector: data
    params:
      limit: 100
      page: 1
      order: desc
      sort: created
- name: sales
  endpoint:
    path: /get/atomictools/v1/links/{link_id}/logs
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 100
      order: desc
      sort: created
- name: fetch_offers
  endpoint:
    path: /fetch_offers
    method: GET
    params:
      page: 1
      limit: 100
      order: desc
      sort: created
- name: find_offer_by_id
  endpoint:
    path: /find_offer_by_id/{offer_id}
    method: GET
- name: fetch_offer_logs
  endpoint:
    path: /fetch_offer_logs/{offer_id}
    method: GET
    params:
      page: 1
      limit: 100
      order: desc
- name: sales
  endpoint:
    path: /atomictools/v1/sales
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 100
      order: desc
- name: auctions
  endpoint:
    path: /atomictools/v1/auctions
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 100
      order: desc
- name: buyoffers
  endpoint:
    path: /atomictools/v1/buyoffers
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 100
      order: desc
- name: template_buyoffers
  endpoint:
    path: /atomictools/v1/buyoffers
    method: GET
    data_selector: data
    params: {}
- name: market_collections
  endpoint:
    path: /atomictools/v1/marketcollections
    method: GET
    data_selector: data
    params: {}
- name: sales
  endpoint:
    path: /get/atomictools/v1/sales
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 100
- name: fetch_link_logs
  endpoint:
    path: /atomictools/v1/links/{link_id}/logs
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 100
      order: desc
- name: get_all_links
  endpoint:
    path: /atomictools/v1/links
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 100
      order: desc
- name: get_specific_link
  endpoint:
    path: /atomictools/v1/links/{link_id}
    method: GET
    data_selector: data
    params: {}
- name: sale_logs
  endpoint:
    path: /atomictools/v1/links/{link_id}/logs
    method: GET
    data_selector: data
    params:
      sale_id: integer
- name: auctions
  endpoint:
    path: /atomictools/v1/links/{link_id}/logs
    method: GET
    data_selector: data
    params: {}
- name: buyoffers
  endpoint:
    path: /atomictools/v1/links/{link_id}/logs
    method: GET
    data_selector: data
    params: {}
- name: template_buyoffers
  endpoint:
    path: /atomictools/v1/buyoffers
    method: GET
    data_selector: data
    params: {}
- name: template_buyoffer_logs
  endpoint:
    path: /atomictools/v1/buyoffers/{buyoffer_id}/logs
    method: GET
    data_selector: data
    params: {}
- name: registered_marketplaces
  endpoint:
    path: /atomictools/v1/marketplaces
    method: GET
    data_selector: data
    params: {}
- name: atomicmarket_config
  endpoint:
    path: /atomictools/v1/marketplace/{marketplace_name}
    method: GET
    data_selector: data
    params: {}
- name: price_history
  endpoint:
    path: /atomictools/v1/pricing
    method: GET
    data_selector: data
    params: {}
- name: user_inventory_value
  endpoint:
    path: /atomictools/v1/inventory/value
    method: GET
    data_selector: data
    params: {}
- name: market_collections
  endpoint:
    path: /atomictools/v1/collections
    method: GET
    data_selector: data
    params: {}
- name: chains
  endpoint:
    path: /chains.json
    method: GET
    data_selector: chains
- name: fetch_link_logs
  endpoint:
    path: /atomictools/v1/links/{link_id}/logs
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 100
      order: desc
- name: get_all_links
  endpoint:
    path: /atomictools/v1/links
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 100
      order: desc
      sort: created
- name: get_specific_link_by_id
  endpoint:
    path: /atomictools/v1/links/{link_id}
    method: GET
    data_selector: data
    params: {}
- name: nodes
  endpoint:
    path: /nodes
    method: GET
- name: producerjson
  endpoint:
    path: /push/action/producerjson/set
    method: POST
    data_selector: owner
    params:
      incremental: producerjson
- name: WAX Labs Proposal Process
  endpoint:
    path: /create/wax-labs/
    method: GET
- name: api-wax-mainnet-atomic-1
  endpoint:
    path: /api-wax-mainnet-atomic-1
    method: GET
    data_selector: records
    params: {}
- name: proposal
  endpoint:
    path: /api/proposals
    method: POST
    data_selector: proposals
    params: {}
- name: atomicassets
  endpoint:
    path: /atomicassets
    method: GET
    data_selector: records
- name: atomicmarket
  endpoint:
    path: /atomicmarket
    method: GET
    data_selector: records
- name: atomictools
  endpoint:
    path: /atomictools
    method: GET
    data_selector: records
- name: atomicassets
  endpoint:
    path: /atomicassets
    method: GET
    data_selector: records
    params: {}
- name: atomicmarket
  endpoint:
    path: /atomicmarket
    method: GET
    data_selector: records
    params: {}
- name: atomictools
  endpoint:
    path: /atomictools
    method: GET
    data_selector: records
    params: {}
- name: config
  endpoint:
    path: /config.ini
    method: GET
    data_selector: parameters
- name: block
  endpoint:
    path: /v1/blocks
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: transaction
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: peer_list
  endpoint:
    path: /peer_list
    method: GET
    data_selector: peers
- name: chains
  endpoint:
    path: /chains.json
    method: GET
    data_selector: chains
- name: nodes
  endpoint:
    path: /operate/wax-bp/bp.json
    method: GET
- name: create_account
  endpoint:
    path: /create_account
    method: GET
    data_selector: msg
- name: get_token
  endpoint:
    path: /get_token
    method: GET
    data_selector: msg
- name: producerjson
  endpoint:
    path: /push/action/producerjson/set
    method: POST
- name: block_producer_registration
  endpoint:
    path: /system/regproducer
    method: POST
    data_selector: result
    params: {}
- name: config
  endpoint:
    path: /config
    method: GET
    data_selector: config
- name: genesis
  endpoint:
    path: /genesis
    method: GET
    data_selector: genesis
- name: atomicassets
  endpoint:
    path: /atomicassets
    method: GET
    data_selector: records
- name: atomicmarket
  endpoint:
    path: /atomicmarket
    method: GET
    data_selector: records
- name: atomictools
  endpoint:
    path: /atomictools
    method: GET
    data_selector: records
- name: config
  endpoint:
    path: /config
    method: GET
    data_selector: config_data
- name: atomicassets
  endpoint:
    path: /atomicassets
    method: GET
- name: atomicmarket
  endpoint:
    path: /atomicmarket
    method: GET
- name: atomictools
  endpoint:
    path: /atomictools
    method: GET
- name: snapshot
  endpoint:
    path: /v1/producer/create_snapshot
    method: POST
    data_selector: snapshot
    params: {}
- name: nodeos
  endpoint:
    path: /v1/nodeos
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Prometheus Stats
  endpoint:
    path: /metrics
    method: GET
- name: WAX Node
  endpoint:
    path: /v1/chain/get_info
    method: GET
- name: nodeos
  endpoint:
    path: /nodeos
    method: GET
    data_selector: data
    params: {}
- name: elasticsearch
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: kibana
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: filebeat
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: peer_address
  endpoint:
    path: /p2p-peer-address
    method: GET
    data_selector: peer_list
    params: {}
- name: haproxy
  endpoint:
    path: /var/log/haproxy.log
    method: GET
    data_selector: logs
- name: create_account
  endpoint:
    path: /create_account
    method: GET
    data_selector: msg
- name: get_token
  endpoint:
    path: /get_token
    method: GET
    data_selector: msg
- name: node
  endpoint:
    path: /node
    method: GET
    data_selector: data
    params: {}
- name: blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: data
    params: {}
- name: block_information
  endpoint:
    path: /get/info
    method: GET
    data_selector: server_version
- name: blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: blocks
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
- name: custom_permission
  endpoint:
    path: /set/account/permission
    method: POST
- name: action_permission
  endpoint:
    path: /set/action/permission
    method: POST
- name: push_action
  endpoint:
    path: /push/action
    method: POST
- name: state-history
  endpoint:
    path: /state-history
    method: GET
- name: wax_api_servers
  endpoint:
    path: /v1/chain
    method: GET
- name: wax_api_blocks_servers
  endpoint:
    path: /v1/chain/get_block
    method: GET
- name: wax_hyperion_servers
  endpoint:
    path: /v1/history
    method: GET
- name: wax_hyperion_servers_web
  endpoint:
    path: /v2/docs
    method: GET
- name: wax_atomic_api_servers
  endpoint:
    path: /atomicassets
    method: GET
- name: create_snapshot
  endpoint:
    path: /v1/producer/create_snapshot
    method: POST
    data_selector: ''
    params: {}
- name: http-in
  endpoint:
    path: /frontend/http-in
    method: acl
    data_selector: wax_acl
    params: {}
- name: wax_api_servers
  endpoint:
    path: /backend/wax_api_servers
    method: use_backend
    data_selector: normal v1 API queries
    params: {}
- name: wax_ship_servers
  endpoint:
    path: /backend/wax_ship_servers
    method: use_backend
    data_selector: websocket traffic
    params: {}
- name: wax_api_servers
  endpoint:
    path: /v1/chain
    method: GET
- name: wax_api_servers
  endpoint:
    path: /v1/node/get_supported_apis
    method: GET
- name: elasticsearch
  endpoint:
    path: /elasticsearch
    method: GET
    data_selector: nodes
    params: {}
- name: kibana
  endpoint:
    path: /kibana
    method: GET
    data_selector: status
    params: {}
- name: filebeat
  endpoint:
    path: /filebeat
    method: GET
    data_selector: status
    params: {}
- name: Elasticsearch
  endpoint:
    path: /elasticsearch
    method: GET
    data_selector: data
    params: {}
- name: haproxy_logs
  endpoint:
    path: /var/log/haproxy.log
    method: GET
    data_selector: logs
    params: {}
- name: connections
  endpoint:
    path: /connections
    method: GET
    data_selector: connections
    params: {}
- name: chains
  endpoint:
    path: /chains
    method: GET
    data_selector: chains
    params: {}
- name: blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: blocks
    params: {}
- name: state
  endpoint:
    path: /state
    method: GET
    data_selector: state
    params: {}
- name: blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: blocks
    params: {}
- name: state_database
  endpoint:
    path: /home/eosphere/waxdata/state
    method: mount
    data_selector: mounted
    params: {}
- name: swap
  endpoint:
    path: /swap.img
    method: configure
    data_selector: configured
    params: {}
- name: nodeos
  endpoint:
    path: ~/wax-blockchain/build/programs/nodeos
    method: start
    data_selector: started
    params: {}
- name: price
  endpoint:
    path: /v1/prices
    method: GET
    data_selector: prices
    params: {}
- name: prices
  endpoint:
    path: /data/price
    method: GET
    data_selector: data
    params:
      fsym: WAXP
      tsyms: BTC,USD,ETH,EOS,USDT,USDC
- name: custom_permission
  endpoint:
    path: /set/account/permission
    method: POST
    data_selector: permissions
    params: {}
- name: action_permission
  endpoint:
    path: /set/action/permission
    method: POST
    data_selector: actions
    params: {}
- name: price_data
  endpoint:
    path: /data/price
    method: GET
    data_selector: prices
    params:
      fsym: WAXP
      tsyms: BTC,USD,ETH,EOS,USDT,USDC
- name: price
  endpoint:
    path: /data/price
    method: GET
    data_selector: data
    params:
      fsym: WAXP
      tsyms: BTC,USD,ETH,EOS,USDT,USDC
- name: wax_hyperion_servers_web
  endpoint:
    path: /v2/docs
    method: GET
- name: wax_hyperion_servers
  endpoint:
    path: /v2
    method: GET
- name: wax_api_block_servers
  endpoint:
    path: /v1/chain/get_block
    method: GET
- name: wax_api_servers
  endpoint:
    path: /v1/chain
    method: GET
- name: wax_atomic_api_servers
  endpoint:
    path: /atomicassets
    method: GET
- name: get_actions
  endpoint:
    path: /v2/history/get_actions
    method: GET
    params:
      account: your_account
      filter: delphioracle:write
      sort: desc
      limit: 1000
- name: cryptocurrency_prices
  endpoint:
    path: /data/price
    method: GET
    data_selector: prices
    params:
      fsym: WAXP
      tsyms: BTC,USD,ETH,EOS,USDT,USDC
- name: http-in
  endpoint:
    path: /frontend/http-in
    method: GET
    data_selector: acl
    params: {}
- name: wax_api_servers
  endpoint:
    path: /backend/wax_api_servers
    method: GET
    data_selector: server
    params:
      maxconn: 10000
- name: wax_ship_servers
  endpoint:
    path: /backend/wax_ship_servers
    method: GET
    data_selector: server
    params:
      maxconn: 200
- name: price
  endpoint:
    path: /data/price
    method: GET
    data_selector: data
    params:
      fsym: WAXP
      tsyms: BTC,USD,ETH,EOS,USDT,USDC
- name: elasticsearch
  endpoint:
    path: /elasticsearch
    method: GET
    data_selector: records
    params: {}
- name: monitor_producer
  endpoint:
    path: /path/to/nodeos.log
    method: GET
    data_selector: logs
    params:
      incremental: producer_name
- name: wireguard_configuration
  endpoint:
    path: /etc/wireguard/wg0.conf
    method: GET
    data_selector: configuration
    params: {}
- name: indexer
  endpoint:
    path: /v2/indexer
    method: GET
    data_selector: data
- name: api
  endpoint:
    path: /v2/api
    method: GET
    data_selector: data
- name: create_snapshot
  endpoint:
    path: /v1/producer/create_snapshot
    method: POST
    data_selector: result
    params: {}
- name: blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: blocks
- name: RabbitMQ
  endpoint:
    path: /rabbitmq
    method: GET
    data_selector: version
    params: {}
- name: Redis
  endpoint:
    path: /redis
    method: GET
    data_selector: version
    params: {}
- name: price
  endpoint:
    path: /data/price
    method: GET
    data_selector: data
    params:
      fsym: WAXP
      tsyms: BTC,USD,ETH,EOS,USDT,USDC
- name: kibana
  endpoint:
    path: /_cluster/health
    method: GET
    data_selector: cluster_name
    params: {}
- name: cryptocurrency_prices
  endpoint:
    path: /data/price
    method: GET
    data_selector: prices
    params:
      fsym: WAXP
      tsyms: BTC,USD,ETH,EOS,USDT,USDC
- name: price
  endpoint:
    path: /data/price
    method: GET
    data_selector: data
- name: health
  endpoint:
    path: /v2/health
    method: GET
    data_selector: ''
    params: {}
- name: actions
  endpoint:
    path: /v2/history/get_actions
    method: GET
    params:
      account: your_account
      filter: delphioracle:write
      sort: desc
      limit: '1000'
- name: cryptocurrency_prices
  endpoint:
    path: /data/price
    method: GET
    data_selector: prices
    params:
      fsym: WAXP
      tsyms: BTC,USD,ETH,EOS,USDT,USDC
- name: Node-1
  endpoint:
    path: /etc/elasticsearch/elasticsearch.yml
    method: PUT
    data_selector: ''
    params: {}
- name: Node-2
  endpoint:
    path: /etc/elasticsearch/elasticsearch.yml
    method: PUT
    data_selector: ''
    params: {}
- name: Node-3
  endpoint:
    path: /etc/elasticsearch/elasticsearch.yml
    method: PUT
    data_selector: ''
    params: {}
- name: health
  endpoint:
    path: /v2/health
    method: GET
    data_selector: health
- name: monitor_producer
  endpoint:
    path: /usr/local/bin/monitor_producer.sh
    method: CREATE
    data_selector: logs
    params: {}
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: last_indexed_block, total_indexed_blocks
    params: {}
- name: monitor_producer
  endpoint:
    path: /path/to/nodeos.log
    method: GET
    data_selector: logs
    params:
      incremental: timestamp
- name: unregprod
  endpoint:
    path: /path/to/unregprod.sh
    method: POST
    data_selector: status
    params: {}
- name: indexer_scaling_settings
  endpoint:
    path: /wax.config.json
    method: GET
    data_selector: scaling
    params: {}
- name: historical_data
  endpoint:
    path: /v2/historical_data
    method: GET
    data_selector: data
    params: {}
- name: RabbitMQ
  endpoint:
    path: /path/to/rabbitmq
    method: GET
    data_selector: records
    params: {}
- name: Redis
  endpoint:
    path: /path/to/redis
    method: GET
    data_selector: records
    params: {}
- name: streaming
  endpoint:
    path: /stream/
    method: GET
    data_selector: code
    params: {}
- name: wax_api_servers
  endpoint:
    path: /v1/chain
    method: GET
- name: wax_hyperion_streaming_servers
  endpoint:
    path: /v1/node/get_supported_apis
    method: GET
- name: hyp-repair
  endpoint:
    path: /hyperion-history-api
    method: POST
- name: kibana
  endpoint:
    path: /api/kibana
    method: GET
    data_selector: records
    params: {}
- name: wax-action
  endpoint:
    path: /_cat/indices/wax*
    method: GET
    data_selector: indices
    params: {}
- name: wax-delta
  endpoint:
    path: /wax-action-v1-000023/_settings
    method: GET
    data_selector: settings
    params: {}
- name: set-index-tier
  endpoint:
    path: /wax-action-v1-000023/_settings
    method: PUT
    data_selector: settings
    params: {}
- name: ABI Scan Phase
  endpoint:
    path: /abi/scan
    method: POST
    data_selector: data
    params: {}
- name: Indexing Phase
  endpoint:
    path: /indexing
    method: POST
    data_selector: data
    params: {}
- name: Indexing Catchup Phase
  endpoint:
    path: /indexing/catchup
    method: POST
    data_selector: data
    params: {}
- name: API Enable Phase
  endpoint:
    path: /api/enable
    method: POST
    data_selector: data
    params: {}
- name: shards
  endpoint:
    path: _cat/shards/wax-action-v1-000023
    method: GET
    data_selector: shards
    params:
      v: ''
      s: index
      h: index,node
- name: health
  endpoint:
    path: /v2/health
    method: GET
    data_selector: ''
    params: {}
- name: elasticsearch_node_1
  endpoint:
    path: /_cluster/state
    method: GET
    data_selector: cluster_state
- name: elasticsearch_node_2
  endpoint:
    path: /_cluster/state
    method: GET
    data_selector: cluster_state
- name: elasticsearch_node_3
  endpoint:
    path: /_cluster/state
    method: GET
    data_selector: cluster_state
- name: health
  endpoint:
    path: /v2/health
    method: GET
    data_selector: health
- name: health
  endpoint:
    path: /v2/health
    method: GET
    data_selector: last_indexed_block
    params: {}
- name: scaling
  endpoint:
    path: /hyperion/scaling
    method: GET
    data_selector: scaling_settings
    params: {}
- name: stream
  endpoint:
    path: /stream
    method: GET
    data_selector: code
    params: {}
- name: wax_api_servers
  endpoint:
    path: /v1/chain
    method: GET
- name: wax_hyperion_streaming_servers
  endpoint:
    path: /v1/node/get_supported_apis
    method: GET
- name: scan
  endpoint:
    path: /hyperion-history-api/hyp-repair
    method: GET
    data_selector: blocks
    params:
      incremental: output_path
- name: wax-action
  endpoint:
    path: /_cat/indices/wax*
    method: GET
    data_selector: indices
    params: {}
- name: wax-delta
  endpoint:
    path: /wax-action-v1-000023/_settings
    method: GET
    data_selector: settings
    params: {}
- name: Cloud Wallet
  endpoint:
    path: https://all-access.wax.io/
    method: GET
- name: Anchor
  endpoint:
    path: https://greymass.com/en/anchor/
    method: GET
- name: Wombat
  endpoint:
    path: https://www.wombat.app/
    method: GET
- name: Ledger
  endpoint:
    path: https://www.ledger.com/eos-wallet/
    method: GET
- name: Foundry
  endpoint:
    path: https://foundry.qaraqol.com/
    method: GET
- name: WaxBlock
  endpoint:
    path: https://waxblock.io
    method: GET
- name: Eosauthority
  endpoint:
    path: https://eosauthority.com/?network=wax
    method: GET
- name: Eoseye
  endpoint:
    path: https://wax.eoseyes.com/
    method: GET
- name: AtomicHub
  endpoint:
    path: https://wax.atomichub.io/
    method: GET
- name: Neftyblocks
  endpoint:
    path: https://neftyblocks.com/
    method: GET
- name: Nfthive
  endpoint:
    path: https://nfthive.io/
    method: GET
- name: chainchamps
  endpoint:
    path: https://www.chainchamps.com/
    method: GET
- name: vIRL
  endpoint:
    path: https://virl.com/
    method: GET
- name: Alcor Exchange
  endpoint:
    path: https://alcor.exchange/
    method: GET
- name: Validationcore.io
  endpoint:
    path: https://wax.validationcore.io/reports/nodes/api
    method: GET
- name: EOS Nation Validator
  endpoint:
    path: https://validate.eosnation.io/wax/reports/endpoints.html
    method: GET
- name: NftHive
  endpoint:
    path: https://nfthive.io/cpu
    method: GET
- name: WaxZilla
  endpoint:
    path: https://waxzilla.io/
    method: GET
- name: Waxmarketcap
  endpoint:
    path: https://waxmarketcap.com/
    method: GET
- name: Neftyblocks Embed Marketplace
  endpoint:
    path: https://neftyblocks.me/
    method: GET
- name: WaxDetective
  endpoint:
    path: https://waxdetective.io/network
    method: GET
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- WAX Blockchain is heavily focused on NFTs and AtomicAssets standard has became the
  defacto standard on WAX for NFTs.
- Redis can be used for multiple chains without further action.
- Each chain needs its own postgres database but multiple readers of the same chain
  can use the same database if they are non-conflicting.
- WAX is a leading layer-1 blockchain redefining digital commerce across games, collectibles,
  tokens, meme coins, and more.
- Includes CMake build scripts by default for contract templates.
- No complicated onboarding process - just a 2 step login
- Customers don't have to connect MetaMask or any other third-party wallet to log
  in or execute transactions
- Offers an option to sign a proof as part of the standard identity proof request.
- Both My Cloud Wallet and Anchor offer an option to sign a proof that can be validated
  on the backend.
- Proofs can be validated using ECDSA and are ideal for Unity/.NET backend applications.
- StateReceiver allows us to create other types of handles to receive data.
- Batch processing of token transfers from CSV files
- Automatic batching of up to 15 NFTs per transaction
- 'WAX currently supports the following operating systems: Ubuntu 22.04 Jammy, Ubuntu
  20.04 Focal, Ubuntu 18.04 Bionic.'
- The quickest, easiest way to run the WAX Blockchain on Windows is to use our Docker
  images.
- Ricardian contracts are defined per action.
- Each <h1> tag must have the 'contract' class.
- To communicate with the WAX Blockchain, create a local development environment,
  and locally deploy your smart contracts, use keosd, nodeos, and cleos.
- 'Each <h1> tag must have the ''clause'' class: <h1 class=''clause''>.'
- WAX currently supports Ubuntu 22.04 Jammy, Ubuntu 20.04 Focal, Ubuntu 18.04 Bionic
- For Windows users, Docker images are recommended to run the WAX Blockchain
- Each Ricardian contract must have the same name as the smart contract.
- The <h1> tag must have the 'contract' class.
- Create a markdown file with the same name as your smart contract.
- Each <h1> tag must have the 'clause' class.
- You can filter the result by specific asset / template data fields.
- WAX mainnet
- You will have to set up the Access-Control-Allow-Origin Header properly.
- For added security, use a dedicated key for pushing the bp.json.
- Public Atomic API nodes are extremely utilised on the WAX Mainnet.
- A solid mainnet node may be run in docker or via PM2.
- Proposals must include a clear description, milestones, and acceptance criteria.
- 'Pay special attention to the rate limit : requests this policy is based on the
  number request per IP address.'
- Ensure the server is configured for resilience to heavy public use.
- Rate limiting is adjusted to prioritize expensive queries.
- This node won’t be providing historical data query support.
- Uses OAuth2 with refresh token — requires setup of connected app in WAX
- Some objects may return nulls in deeply nested fields
- Uses WAX Testnet configuration parameters
- Ensure proper setup of genesis.json and config.ini files
- The bp.json contains important information about the block producer and their nodes.
- It is important to use the name that you also have used for the action 'regproducer'.
- Ensure you use the 5.x version of cleos and keosd with Leap 5.x nodes.
- You don’t have to execute this action on your own Nodes.
- WAX Mainnet has heavy infrastructure requirements.
- Use a high endurance enterprise SSD or NVMe for state files.
- 'Pay special attention to the rate limit: requests this policy is based on the number
  request per IP address.'
- Uses Ubuntu 22.04 for the operating system
- Requires 128GB+ RAM
- Disk space for blocks and state-history is currently about 14TB
- Nodeos requires config.ini and genesis.json to operate.
- Node can take up to 2 months to sync from genesis.
- Uses features like 'bill_execution_time' for rate limiting and 'disable_v1_sales'
  to improve performance
- Common use for a snapshot is recovering from an incorrectly stopped node.
- Exposing the producer_api_plugin publicly is a security risk.
- Uses HAProxy for load balancing — supports Prometheus for metrics
- HAProxy server will now accept requests to the statistics dashboard powered by Prometheus.
- The test request will have to be made using the DNS name and not an IP address.
- Node will connect to other network peers and offer a P2P Seed Node service.
- Node won't be providing historical data query support.
- Uses WAX Testnet configuration parameters.
- Initial state parameters required by every new starting node.
- Set custom paths for the log files. If left empty, Filebeat will choose the paths
  depending on your OS.
- HTTP Error 429 is an HTTP response status code that indicates the client application
  has surpassed its rate limit or number of requests they can send in a given period
  of time.
- Ensure to use the 5.x version of cleos and keosd with Leap 5.x nodes.
- WAX software has a great tool for managing the blocks.log called leap-util.
- Uses specific key-pair for signing blocks
- Ensure nodes are in sync with the network
- Mapped_private mode better utilises memory and reduces disk IO.
- The WAX Mainnet requires a heavy infrastructure.
- ZFS can mitigate the disk space requirements for multiple WAX nodes on a single
  server using deduplication.
- Disk 1 should be a high speed enterprise grade SSD or NVMe for OS and state files.
- Disk 2 should be a SAS disk array of 4 x 4TB drives for the blocks directory.
- ZFS Dedup is often disregarded due to being CPU, RAM and Disk IO intensive.
- In our experience it works very well to alleviate unnecessary disk usage of the
  /blocks directory especially in Virtual Machine environments on larger servers.
- The overhead appears to be quite manageable with the largest being RAM which is
  around 1GB / Disk TB, CPU and Disk IO were unaffected.
- Requires Ubuntu 22.04 for optimal performance
- Uses ZFS with LZ4 compression on blocks directory
- Custom permissions can be used to execute actions without exposing the active key.
- Node is accessible via http port 8888 for queries and ws port 8080 for state-history.
- The now depreciated V1 History functionality is not preserved in a snapshot and
  will require a full replay.
- Exposing the producer_api_plugin publicly is a security risk and can be exploited.
- Websockets create a full duplex connection between client and server over a single
  TCP connection.
- HAProxy has a very neat automated ability to upgrade an existing HTTP connection
  to a TCP websocket.
- Uses HAProxy for load balancing
- Prometheus enabled for metric tracking
- Normal v1 API queries are sent to the wax_api_servers backend
- Websocket traffic is sent to the wax_ship_servers backend
- balance leastconn is used for the SHIP servers in this example
- Uses wildcard SSL certificates from Comodo.
- Access-list is configured to match requests to specific domains.
- Uses Elasticsearch version 8.5.0
- Kibana should be paired with the installed Elasticsearch version
- 'API node Hardware(minimum specs): Multi-threaded CPU with at-least 4gHZ CPU speed
  or above, 64GB RAM, 14TB SSD(currenyly disk size is increasing around 25-30GB/day
  so plan accordingly)'
- 'Full State-History node Hardware(recommended specs): i9 CPU, 128GB RAM, 6TB NVME
  SSD'
- Filebeat will choose the paths depending on your OS.
- 200 API requests per source IP address allowed over a period of 5 seconds.
- HTTP Error 429 indicates the client application has surpassed its rate limit.
- The WAX Mainnet has a backend network facilitated through the use of an Internal
  Wireguard VPN shared between Guilds.
- Check that there is transfer and received traffic which is a good sign and that
  handshakes are in fact taking place.
- The WAX Software data-dir structure by default is made up of 5 directories and 2
  files.
- Configuring blocks-log-stride will break the blocks.log and blocks.index up into
  smaller files.
- If a stride is not configured nodeos will only be looking for the normal blocks.log
  and blocks.index.
- Configured state database size should be at least 128GB.
- 64GB of Physical RAM and 128GB SWAP is sufficient to run a WAX Mainnet node.
- You should test before deploying into production
- WAX software is weighted to only use a single thread and won’t necessarily use all
  resources available.
- Running multiple WAX nodes on a single physical server can be economical using Virtual
  Machines, Containers or Baremetal.
- Deduplication feature offered by ZFS allows for the elimination of redundant data
  within ZFS pools/filesystems.
- Disk space consumption of the blocks and state-history folders will be halved when
  running two nodes on a single server.
- Ensure that prices are accurately published on-chain.
- Dedup is often disregarded due to being CPU, RAM and Disk IO intensive.
- Uses encrypted wallet password for security
- Alerts are set up for failures via SMS and email
- Custom permissions allow actions without sharing active private keys.
- Ensure that prices are accurately published on-chain for apps and exchanges.
- Frontend rules need to be ordered from most specific to least specific.
- 'HAProxy has a very neat automated ability to upgrade an existing HTTP connection
  to a TCP websocket using Connection: Upgrade and Upgrade: websocket HTTP headers.'
- It may be advantageous to configure a specific tunnel timeout. Ours is set to 35
  seconds in the HAProxy defaults section.
- Ensure wallet is unlocked before pushing transactions.
- This method adds an additional layer of integrity to your oracle setup by providing
  real-time verification directly from the blockchain.
- Full/Partial History nodes using Hyperion
- Monitoring a block producer for missed rounds is crucial in maintaining the integrity
  and performance of a blockchain network.
- If a producer misses rounds, it can lead to delays in block creation, potential
  security vulnerabilities, and a loss of reputation within the network.
- For a partial state-history, you can have lower specs or have it on the same server
  as Hyperion.
- Recommended to have multi-node ES clusters for higher throughput.
- Elasticsearch security features are disabled by default. To avoid security problems,
  we recommend enabling the security pack.
- Save the passwords somewhere safe, they'll be necessary for future purpose.
- MAX_COUNT is set to 350, which is larger than 240 but less than 480.
- The first Wireguard Interface is wg0 and can be configured in the wg0.conf file.
- The Interface IP address is for the VPN overlay and is not the anchor point for
  the underlay VPN.
- The wallet password is securely stored in a file with restricted permissions and
  read by the script, ensuring better security and maintainability.
- This setup ensures if your block producer is no longer signing or producing blocks
  it will go ahead and unregister from the top 21 to minimize the network impact and
  give you and your team time to figure out the cause.
- Snapshots will be saved to the /snapshots folder - ensure there is sufficient disk
  space available.
- 'The script is executed as below: ./snapshot.sh'
- 'To run once a day configure as below: 0 12 * * * /home/eosphere/scripts/snapshot.sh'
- Current recommended version for WAX State-History Node is v5.0.1wax01
- Current WAX Hyperion deployment is running on Redis stable version v7.3.1
- Ensure you are running Node.js v22
- Check that you are running the latest PM2 version 5.4.3
- Ensuring that these prices are accurately published on-chain is crucial for apps
  and exchanges.
- API does not require authentication.
- Redundant endpoints are used for reliability.
- Utilising a fresh install of the latest Elasticsearch I was able to connect Hyperion
  with encrypted SSL (HTTPS).
- Ensure that these prices are accurately published on-chain.
- The script requires a wallet password and the wallet must be unlocked before fetching
  prices.
- There are three Indexing phases and an API enable phase when preparing your WAX
  Hyperion Full History service for production.
- Uses encrypted wallet password for authentication
- Multiple endpoints can be used for redundancy
- Highly recommended that the SHIP node is connected on LAN.
- Bulk indexing can be very heavy on hardware resources and can take days.
- Node-1 configured as master for cluster management.
- Use generated enrollment token for Node-2 and Node-3.
- Uses Twilio for SMS and SendGrid for email alerts
- Ensure ENCRYPTION_PASSWORD environment variable is set
- There will always be a 2 block delta on the total vs last block indicators, but
  missing blocks will display the actual number of blocks missing.
- Ensure that 'last_indexed_block' and 'total_indexed_blocks' have the same value.
- MAX_COUNT is set to 350 for monitoring missed rounds.
- These settings can be granularly adjusted to add more readers, queues, pools etc.
  often with positive performance results.
- More is not always better and can end up overwhelming your hardware, network, database
  and deployment in general causing poor performance and crashes.
- Hyperion is a full history solution for indexing, storing and retrieving Antelope
  blockchain’s historical data.
- The current recommendation is to leave the routing mode on `round_robin` and to
  avoid `heatmap` *(heatmap mode is currently experimental and shouldn’t be use in
  production)*
- Current recommended RabbitMQ version is 4.0.5 and Erlang 27.2.
- Current WAX Hyperion deployment is running on Redis stable version v7.3.1.
- Streaming is enabled in the wax.config.json file.
- The default websocket port is :1234 but can be changed.
- Hyperion version '3.5.0' is expected to release in the next few weeks, this guide
  will be updated accordingly.
- It is recommended to disable system Swap space.
- Assigning 25% of the Hyperion Node’s memory to Redis is advised.
- Ensure that you have upgraded to, or deployed Hyperion v3.3.9–5 or above.
- The control_port field is configured port 7002.
- It's a good idea to then re-run the scan to ensure you have successfully fixed any
  undesirable missing data conditions and the Index Repair Tool has worked it’s magic.
- Ensure the Elasticsearch service can lock the required JVM memory on the server.
- Elasticsearch may require the use of a specific user and password for connections.
- The new node will utilise cheaper consumer based SSD’s as there won’t be many writes
  affecting endurance.
- Slower older gen CPU as there won’t be as many queries and less RAM as not as much
  cache will be used.
- Live reader is enabled during Indexing Catchup Phase
- Blocks are ingested in batches during Indexing Phase
- Caching is enabled during Indexing Catchup Phase
- Uses PM2 to manage processes
- Recommended to connect SHIP node on LAN
- Cluster of three Elasticsearch 8.x nodes configured.
- Ensure xpack.security.http is enabled on master node temporarily for enrolment.
- Be sure to ask any questions in the EOSphere Telegram
- Identifying gaps in the full history indexed blocks set requires a health query
  of the Hyperion API.
- There will always be a 2 block delta on the total vs last block indicators.
- Ensure that “last_indexed_block:” and “total_indexed_blocks:” have the same value.
- The WAX Hyperion Indexer scaling settings are located in the wax.config.json file.
- These settings can be granularly adjusted to add more readers, queues, pools etc.
- The current recommendation is to leave the routing mode on round_robin and to avoid
  heatmap (heatmap mode is currently experimental and shouldn’t be use in production)
- Streaming is enabled in the wax.config.json file
- The default streaming websocket port is :1234
- The 'hyp-repair' tool is located in the '/hyperion-history-api' directory.
- Before running the repair check that the tool has access to the Hyperion Indexer.
- Index Repair will then delete these forked blocks and request the indexer to specifically
  fill these now missing blocks again.
- It's a good idea to then re-run the scan to ensure you have successfully fixed any
  undesirable missing data conditions and the Index Repair Tool has worked its magic.
- This node will utilise cheaper consumer based SSD’s as there won’t be many writes
  effecting endurance, slower older gen CPU as there won’t be as many queries and
  less RAM as not as much cache will be used.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 500 Internal Server Error
- '500 Internal Server Error: Check the request parameters'
- '500: Internal Server Error'
- 200 OK
- '400 Bad Request: Ensure all required fields are filled out correctly.'
- '403 Forbidden: Check your permissions or authentication tokens.'
- 'REQUEST_LIMIT_EXCEEDED: Too many requests made in a short time.'
- 'SLOW_QUERY: Query took too long to execute.'
- 'Node connection failure: Check peer addresses and network status'
- '429: Rate limit exceeded'
- '429: User is denied due to surpassing rate limit.'
- 'Failed to fetch prices from API: {e}'
- 'Missing key in API response: {e}'
- 'Failed to fetch prices from API: Check if the API is down or not responding.'
- 'Missing key in API response: Check if the expected keys are returned by the API.'
- 'Permission Denied: Ensure the account has the correct permissions set.'
- Log file not found. Exiting.
- Failed to unlock the wallet.
- '401 Unauthorized: Recheck user credentials or password.'
- 'Error: One or more fetched values are empty'
- Failed to decrypt wallet password
- API is down or not returning data
- 'Missing blocks: displayed as actual number of blocks missing.'
- If any of these queues are above the limit, the readers will be paused.
- '401 Unauthorized: Recheck user credentials or permissions'
- 'Connection Error: Verify Elasticsearch is running and accessible'
- 'missing_blocks: Indicates the actual number of blocks missing from the Full History
  Index.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://min-api.cryptocompare.com
  headers:
    Accept: application/json
source_metadata: null
