resources:
- name: DriftEvents
  endpoint:
    path: Client-side event listeners
    method: JavaScript Event Handling
    data_selector: window.adobeDataLayer.push
    params: {}
- name: app_uninstall
  endpoint:
    path: /app/uninstall
    method: POST
- name: country_attributes
  endpoint:
    path: /
    method: GET
    data_selector: .
- name: retrieval
  endpoint:
    method: GET
- name: deletion
  endpoint:
    method: DELETE
- name: bulk_conversation_statuses
  endpoint:
    path: /conversations/stats
    method: GET
    data_selector: conversationCount
- name: conversations
  endpoint:
    path: /reports/conversations
    method: POST
    data_selector: data
    params:
      limit: 50
      next: '{{ next }}'
      statusId:
      - 1
      - 2
      - 3
- name: conversation_details
  endpoint:
    path: /conversations/{conversationId}
    method: GET
    data_selector: data
- name: conversation_transcript
  endpoint:
    path: /conversations/{conversationId}/transcript
    method: GET
    data_selector: data
- name: conversations
  endpoint:
    path: /ExportFiles/DriftCSV
    method: GET
    data_selector: body
- name: capture_query_strings
  endpoint:
    path: /docs/capture-url-query-strings-as-attributes
    method: GET
    data_selector: setUserAttributes
- name: contact
  endpoint:
    path: /contacts
    method: GET
    data_selector: attributes
- name: contact_properties
  endpoint:
    path: /docs/contact-properties
    method: GET
- name: user_attributes
  endpoint:
    path: /setUserAttributes
    method: POST
- name: track_event
  endpoint:
    path: /track
    method: POST
- name: page_event
  endpoint:
    path: /page
    method: POST
- name: contact_updates
  endpoint:
    method: POST
    data_selector: data.diff
- name: conversation
  endpoint:
    path: /
    method: GET
    data_selector: .
- name: convert_epoch_time
  endpoint:
    path: /scheduling/meetingBooked
    method: POST
    data_selector: meeting.time
- name: contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: data
- name: contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: data.id
- name: new_conversation
  endpoint:
    path: /conversations/new
    method: POST
    data_selector: .
- name: create_message
  endpoint:
    path: /conversations/<conversationId>/messages
    method: POST
    data_selector: data.messages
- name: account_create
  endpoint:
    path: /accounts/create
    method: POST
- name: conversation_push
  endpoint:
    method: POST
- name: conversation
  endpoint:
    path: /conversations/
    method: GET
    data_selector: data
- name: contact
  endpoint:
    path: /contacts/
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /users/list
    method: GET
- name: conversation_transcript
  endpoint:
    path: /conversations//transcript
    method: GET
- name: generic_success
  endpoint:
    data_selector: data
- name: generic_error
  endpoint:
    data_selector: error
- name: delete_account
  endpoint:
    path: /accounts/{accountId}
    method: DELETE
- name: user_deprovision
  endpoint:
    path: /Users/{userId}
    method: DELETE
- name: user_deprovision_patch
  endpoint:
    path: /Users/{userId}
    method: PATCH
- name: widget_ready_event
  endpoint:
    path: /settings/teams/{teamId}
    method: GET
- name: start_conversation_event
  endpoint:
    method: POST
- name: chat_open_event
  endpoint:
    method: POST
- name: chat_close_event
  endpoint:
    method: POST
- name: welcome_message_open_event
  endpoint:
    method: POST
- name: welcome_message_close_event
  endpoint:
    method: POST
- name: away_message_open_event
  endpoint:
    method: POST
- name: away_message_close_event
  endpoint:
    method: POST
- name: campaign_events
  endpoint:
    path: /campaign/events
    method: POST
- name: slider_message_events
  endpoint:
    path: /sliderMessage/events
    method: POST
- name: conversation_events
  endpoint:
    path: /conversation/events
    method: POST
- name: meetingBooked
  endpoint:
    data_selector: teamMember; meeting; conversationId; playbookId; campaignId; interactionId
- name: playbookFired
  endpoint:
    data_selector: createdAt; authorId; interactionId; playbookId; campaignId
- name: playbookClicked
  endpoint:
    data_selector: campaignId; playbookId
- name: playbookDismissed
  endpoint:
    data_selector: campaignId; playbookId
- name: buttonClicked
  endpoint:
    data_selector: authorId; buttonBody; campaignId; conversationId; createdAt; messageId;
      playbookId; questionId
- name: first_interaction
  endpoint:
    path: /conversation:firstInteraction
    method: GET
    data_selector: data
    params:
      authorId: '{{ authorId }}'
      campaignId: '{{ campaignId }}'
      conversationId: '{{ conversationId }}'
      createdAt: '{{ createdAt }}'
      messageId: '{{ messageId }}'
      playbookId: '{{ playbookId }}'
      interactionId: '{{ interactionId }}'
- name: gdpr_clicked
  endpoint:
    path: /gdprClicked
    method: GET
    data_selector: data
    params:
      accepted: '{{ accepted }}'
      endUser: '{{ endUser }}'
- name: new_conversation
  endpoint:
    path: /event/new_conversation
    method: POST
    data_selector: properties
- name: button_clicked
  endpoint:
    path: /event/button_clicked
    method: POST
    data_selector: properties
- name: conversation_push
  endpoint:
    path: /webhook/conversation_push
    method: POST
- name: contact_updated
  endpoint:
    path: /webhook/contact_updated
    method: POST
- name: new_meeting
  endpoint:
    path: /webhook/new_meeting
    method: POST
- name: meeting_updated
  endpoint:
    path: /webhook/meeting_updated
    method: POST
- name: conversation_participant_removed
  endpoint:
    path: /webhook/conversation_participant_removed
    method: POST
- name: conversation_participant_added
  endpoint:
    path: /webhook/conversation_participant_added
    method: POST
- name: playbook_goal_met
  endpoint:
    path: /events/playbook_goal_met
    method: POST
    data_selector: properties
- name: phone_captured
  endpoint:
    path: /events/phone_captured
    method: POST
    data_selector: traits
- name: drift_events
  endpoint:
    method: POST
- name: contacts
  endpoint:
    path: /contacts/
    method: GET
- name: drift_identify
  endpoint:
    method: GET
    params:
      uniqueId: externalId
- name: contact
  endpoint:
    method: PATCH
- name: contact
  endpoint:
    path: /end_users/<contactId>
    method: GET
- name: ada_embed
  endpoint:
    path: /embed2.js
    method: GET
- name: widget_script
  endpoint:
    path: /
    method: GET
- name: form_submission
  endpoint:
    method: POST
- name: connect_form
  endpoint:
    path: /js/forms2/js/forms2.min.js
    method: GET
    data_selector: script
- name: commit_form_data
  endpoint:
    path: /js/forms2/js/forms2.min.js
    method: GET
    data_selector: script
- name: stage_form_data
  endpoint:
    path: /docs/fastlane-deferred-form-submissions-with-react
    method: POST
    data_selector: script
- name: commit_form_data
  endpoint:
    path: /docs/fastlane-deferred-form-submissions-with-react
    method: POST
    data_selector: script
- name: gdpr_deletion
  endpoint:
    path: /gdpr/delete
    method: POST
    data_selector: data
- name: retrieve_gdpr_data
  endpoint:
    path: /retrieve
    method: POST
    data_selector: data
    params:
      email: '{{ email }}'
- name: booked_meetings
  endpoint:
    path: /users/meetings/org
    method: GET
    data_selector: data
    params:
      min_start_time: '{{ required }}'
      max_start_time: '{{ required }}'
- name: playbooks
  endpoint:
    path: /playbooks/list
    method: GET
    data_selector: .
- name: token_information
  endpoint:
    path: /app/token_info
    method: POST
    data_selector: ''
- name: conversations
  endpoint:
    path: /ConversationList
    method: GET
- name: conversation_details
  endpoint:
    path: /Conversations
    method: GET
- name: transcript
  endpoint:
    path: /Transcript
    method: GET
- name: messages
  endpoint:
    path: /Messages
    method: GET
- name: attachments
  endpoint:
    path: /Attachments
    method: GET
- name: playbook
  endpoint:
    path: /Playbook
    method: GET
- name: user
  endpoint:
    path: /User
    method: GET
- name: drift_events
  endpoint:
    method: POST
    data_selector: data
- name: conversations
  endpoint:
    path: /list
    method: GET
    data_selector: data
    params:
      limit:
        default: 25
        max: 100
      statusId:
        repeatable: true
        type: int
      page_token:
        required: true
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: data.accounts
    params:
      index: '{{ index }}'
      size: '{{ size }}'
- name: custom_attributes
  endpoint:
    path: /contacts/attributes
    method: GET
    data_selector: properties
- name: teams_by_user
  endpoint:
    path: /teams/users/{userId}
    method: GET
    data_selector: data
- name: teams_org
  endpoint:
    path: /teams/org
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /users/list
    method: GET
    data_selector: data
- name: drift_widget_loader
  endpoint:
    path: /include/{{timestamp}}/{{embedId}}.js
    method: GET
- name: contact
  endpoint:
    path: /GET contact
    method: GET
- name: users
  endpoint:
    path: /GET users
    method: GET
- name: message
  endpoint:
    path: /docs/message-model
    method: GET
    data_selector: messages
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: conversations
  endpoint:
    path: /conversations
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: playbooks
  endpoint:
    path: /playbooks
    method: GET
- name: app_admin
  endpoint:
    path: /app_admin
    method: GET
- name: gdpr_data_privacy
  endpoint:
    path: /gdpr_data_privacy
    method: GET
- name: scim
  endpoint:
    path: /scim
    method: GET
- name: playbook
  endpoint:
    path: /playbooks
    method: GET
    data_selector: goals
- name: joke_retrieval
  endpoint:
    path: /
    method: GET
- name: contact_timeline_event
  endpoint:
    path: /contacts/timeline
    method: POST
    data_selector: .
- name: contact_deletion
  endpoint:
    path: /contacts/{contactId}
    method: DELETE
- name: conversation_messages
  endpoint:
    path: /conversations/<conversationId>/messages
    method: GET
    data_selector: messages
- name: conversation
  endpoint:
    path: /conversations/<conversationId>
    method: GET
    data_selector: data
- name: conversational_landing_pages
  endpoint:
    path: /playbooks/clp
    method: GET
    data_selector: .
- name: attachment
  endpoint:
    path: /attachments/{DOC_ID}/data
    method: GET
- name: conversation_transcript
  endpoint:
    path: /conversations/<conversationId>/transcript
    method: GET
- name: conversation_json_transcript
  endpoint:
    path: /conversations/<conversationId>/json_transcript
    method: GET
- name: account
  endpoint:
    path: /accounts/{accountId}
    method: GET
    data_selector: data
- name: contact_by_id
  endpoint:
    path: /contacts/{contactId}
    method: GET
    data_selector: data
- name: contact_by_email
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params:
      email: '{email}'
      limit: '{limit}'
- name: contact_by_external_id
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params:
      idType: external
      id: '{external_id}'
- name: single_user
  endpoint:
    path: /users/{userId}
    method: GET
    data_selector: data
- name: multiple_users
  endpoint:
    path: /users
    method: GET
    data_selector: data
- name: user
  endpoint:
    path: /Users
    method: POST
    data_selector: User Schema
- name: users
  endpoint:
    path: /Users
    method: GET
    data_selector: Resources
    params:
      filter: ''
      startIndex: 1
      itemsPerPage: 0
- name: user
  endpoint:
    path: /Users/{userId}
    method: GET
    data_selector: user
- name: user_jwt
  endpoint:
    path: /path/to/user/data
    method: GET
    data_selector: userJwt
- name: ga_events
  endpoint:
    path: /docs/sending-ga-events
    method: GET
- name: start_interaction
  endpoint:
    method: POST
    data_selector: interactionId
    params:
      goToConversation: true
      replaceActiveConversation: true
- name: button_click_event_listener
  endpoint:
    path: /docs/switch-playbooks-on-a-button-click
    method: GET
    data_selector: window.drift.on
- name: start_chat_programmatically
  endpoint:
    path: /docs/switch-playbooks-on-a-button-click
    method: GET
    data_selector: window.drift.api.startInteraction
- name: team
  endpoint:
    path: /team-model
    method: GET
    data_selector: properties
- name: unsubscribe_contacts
  endpoint:
    path: /emails/unsubscribe
    method: POST
- name: contact_patch_non_drift_id
  endpoint:
    path: /contacts/normalize
    method: PATCH
    params:
      idType: '{type}'
      id: '{id}'
- name: contact
  endpoint:
    path: /contacts/{contactId}
    method: PATCH
    data_selector: data
- name: accounts_update
  endpoint:
    path: /accounts/update
    method: PATCH
    data_selector: .
    params:
      accountId: required
- name: update_user
  endpoint:
    path: /users/update
    method: PATCH
    params:
      userId: '{{ userId }}'
- name: user
  endpoint:
    path: /Users/{userId}
    method: PUT
- name: user
  endpoint:
    path: /Users/{userId}
    method: PATCH
- name: task
  endpoint:
    path: /services/data/vXX.X/sobjects/Task
    method: POST
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
- name: lead
  endpoint:
    path: /services/data/vXX.X/sobjects/Lead
    method: GET
- name: user
  endpoint:
    path: /docs/user-model
    method: GET
    data_selector: User
- name: user
  endpoint:
    path: /Users
    method: POST
    data_selector: schemas
- name: form_submission
  endpoint:
    path: /form/endpoint/here
    method: POST
- name: retrieve_campaigns_v2
  endpoint:
    path: /campaign-eval/retrieve_campaigns_v2/
    method: GET
- name: gdpr_retrieval
  endpoint:
    path: /gdpr_retrieval
    method: GET
- name: gdpr_deletion
  endpoint:
    path: /gdpr_deletion
    method: POST
- name: webhook_events
  endpoint:
    method: POST
    data_selector: data
- name: users
  endpoint:
    path: /users
    method: GET
- name: conversation_manual_push
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: conversation_push
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: conversation_participant_added
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: conversation_participant_removed
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: button_clicked
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: contact_email_captured
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: playbook_goal_met
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: user_unsubscribed
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: new_meeting
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: meeting_updated
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: contact_updated
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: gdpr_delete_requested
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: app_disconnected
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: user_availability_updated
  endpoint:
    path: /sync
    method: POST
    data_selector: data
- name: phone_captured
  endpoint:
    path: /webhook/phone_captured
    method: POST
    data_selector: data
- name: chat_to_call
  endpoint:
    path: /webhook/chat_to_call
    method: POST
    data_selector: data
- name: welcome_message
  endpoint:
    method: POST
    data_selector: message
- name: widget_configuration
  endpoint:
    path: /docs/widget-configuration
    method: GET
- name: widget_control
  endpoint:
    path: /docs/widget-start
    method: GET
- name: conversation
  endpoint:
    method: GET
    params: {}
- name: contact
  endpoint:
    method: GET
    params: {}
- name: user
  endpoint:
    method: GET
    params: {}
- name: conversation_transcript
  endpoint:
    path: /conversations/{conversationId}/json_transcript
    method: GET
- name: contact
  endpoint:
    path: /contacts
    method: GET
- name: user
  endpoint:
    path: /users
    method: GET
- name: conversation
  endpoint:
    path: /conversations
    method: GET
- name: account
  endpoint:
    path: /accounts
    method: GET
- name: contact_identified
  endpoint:
    path: /reference/event-types
    method: GET
    data_selector: events
    params:
      scopes: contact_read
- name: new_message
  endpoint:
    path: /reference/event-types
    method: GET
    data_selector: events
    params:
      scopes: conversation_read
- name: new_conversation
  endpoint:
    path: /reference/event-types
    method: GET
    data_selector: events
    params:
      scopes: conversation_read
- name: conversation_participant_added
  endpoint:
    path: /reference/event-types
    method: GET
    data_selector: events
    params:
      scopes: conversation_read
- name: conversation_participant_removed
  endpoint:
    path: /reference/event-types
    method: GET
    data_selector: events
    params:
      scopes: conversation_read
- name: button_action
  endpoint:
    path: /reference/event-types
    method: GET
    data_selector: events
    params:
      scopes: conversation_read
- name: event
  endpoint:
    method: POST
    data_selector: data
notes:
- Client-side integration; ensure Drift and Adobe Analytics scripts are fully installed
  and published on your website before setting up event listeners.
- Event data pushed to Adobe data layer from client-side interactions with Drift widget.
- Client's access token is invalidated after successful uninstallation
- Re-enable integration via OAuth protocol
- GEO-IP lookup is a third-party platform for geolocation, use at your own risk.
- For customers implementing this tag through Google Tag Manager, the 'let' declaration
  is not supported, so this implementation will be preferred as it uses the 'var'
  declaration.
- Uses OAuth 2.0 Authorization Code flow
- Use TLS protocol instead of SSL for secure connections
- Access restricted to apps created by an organization; third-party apps blocked
- Designed for GDPR compliance activities
- Requires OAuth Access Token to access Drift API
- Needed scopes for authentication: conversation_read, user_read, contact_read
- Drift API uses bearer token for authorization; ensure it is securely stored and
  handled.
- Pagination is handled via a cursor parameter "next".
- CSV file creation using csv-writer npm package
- Export includes multiple conversation-related fields such as convo_id, assignee_id,
  and more
- Custom JavaScript needed to capture URL query strings
- Requires 'ready' event before API can be called
- Properties are case-sensitive
- Email is not a unique identifier in Drift
- Attributes are case-sensitive
- setUserAttributes may lead to duplicate contact records if the site visitor is anonymous
- Requires elevated scope `all_contact_read` which is manageable in app settings
- Webhook is an event that triggers on contact updates
- Provides a function to convert epoch time to standard time
- 'Warning: Using guessable values for ''externalId'' can be misused. Ensure use of
  signed identities for security.'
- 'Important: ''externalId'' must be explicitly provided; otherwise, it defaults to
  null and affects usage of ''drift.identify()'' method.'
- Drift cookies will not be attached to contacts created through the endpoint.
- If no 'integrationSource' is provided, a generic header message is used.
- Requires the `account_write` scope for creating accounts
- Accounts must have a unique domain to avoid conflicts and errors
- Requires OAuth with refresh token flow
- Events are sent as POST requests with payloads
- By default, fields within Drift are of text data type.
- If incorrect or invalid values are sent, the contact update may be ignored.
- 'Deletes are not true deletes; the account is hidden but can still be queried and
  will return with ''deleted: true'''
- Integration uses API key for authentication.
- Events include 'new_conversation', 'button_clicked', among others linked to specific
  user interactions.
- Requires integration with Segment and Drift APIs
- Event tracking is client-side, depending on JavaScript execution in the browser
- Identifies or creates a contact record in Drift associated with a unique externalId
- Timing of calling drift.identify() is crucial, especially around login flows to
  ensure correct data association.
- Domain differences between public and login-protected areas can prevent cookies
  from being carried over, affecting data tracking.
- Ensure CSP rules include script-src and frame-src directives to allow Drift's JavaScript
  SDK
- Full API use is free for all customers
- Rate limit is generally 600 requests per minute
- Custom attributes created via the API are immutable for indexing and querying purposes
- Requires JavaScript to manually handle form submission and redirection
- API methods include connectForm and commitFormData, which are used in conjunction
  with JavaScript event handling.
- Requires adding scripts manually in React lifecycle methods
- WARNING: Data erasure is permanent
- This endpoint only retrieves enabled and active playbooks.
- Responses may be cached up to 10 minutes.
- Ensure Drift is loaded before pushing events to GTM
- Listeners must be placed inside the drift.ready function to avoid premature execution
- Interactions are based on messages between agents and site visitors using specific
  commands.
- Pagination uses "next" link provided in response for continuous data retrieval
- Pagination might end without "next" field once all accounts are listed
- Requires enabling 'all_contact_read' scope explicitly in the Drift app portal
- Drift JavaScript loads tracking cookies and creates a server-side record of visitor's
  IP address
- Meetings cannot be deleted or created via the API
- API documentation specifies message model but does not provide explicit endpoint
  details or authentication methods
- Using Tray.io as a proxy server to handle Playbook Webhooks
- Webhook configured to await workflow response before proceeding
- Required OAuth scope: contact_write
- Attributes in the events are stringified
- Event type string is converted to lower case in the timeline view
- OAuth 2.0 is required for public integrations on the Drift App Store
- Private integrations within an organization's own Drift instance can use a simple
  API token
- The non-expiring access token provided works for the user's own Drift account but
  not for other accounts
- Bearer token method recommended for private apps; OAuth not required for private
  applications.
- Requires the 'playbook_read' scope on the drift app token for access
- Conversational Landing Page urls are configurable by the customer
- If a customer doesn't have bot playbooks enabled, no results may be returned
- HTTPS redirect required for landing page urls, currently not automated
- Requires conversation_read scope
- Fields like accountId and domain are always set; other fields may be absent if unset
- SCIM API and SSO are only available on Drift's paid plans
- Requires JWT for user authentication
- JWT must include a 'sub' claim with userId and can optionally include 'exp' claim
  for setting expiration
- Requires specific iframe sandbox attributes for functionality
- Sandbox attributes include: allow-scripts, allow-same-origin, allow-popups, allow-popups-to-escape-sandbox,
    allow-forms
- Requires handling of iframe specific behaviors for integration
- Custom event handling and data messaging between iframes necessary
- startInteraction ignores online or offline logic and always fires when called.
- Interaction ID and button text must match exactly as specified in the Drift playbook
  configuration.
- Team model schema does not specify authentication requirement
- No pagination details provided
- We will only return success if an update occurred
- Requires 'account_write' scope for updating accounts
- Account id must be provided to update an account
- Requires active Salesforce integration to trigger flows
- Assumes no automation conflicts or duplicate record issues
- Drift uses cookies for user identification, which can be lost if cookies are cleared
  or users change devices.
- Using unguessable IDs is advised for security. If guessable IDs are used, Signed
  Identities feature must be enabled for secure identification.
- Users can't be deleted or created via the API
- Role Based Access Control is available for Enterprise Plan customers
- Because of Marketo limitations, emojis in conversation transcripts may cause issues.
- Installed tokens never expire, tokens are regenerated upon reinstalling the app
  if compromised
- Webhooks provide real-time data
- Verification Token used to secure webhook data integrity
- JavaScript-based widget interaction; not a traditional REST API endpoint
- Privacy policy adherence required when sharing personal information
- Widget customization options are controlled via JavaScript configuration
- API methods should only be called after the 'ready' event has fired to ensure the
  widget is fully loaded.
- Requires bearer token with specific scopes for Contact Read, Conversation Read,
  and User Read
- Integration setup involves configuring webhooks and tokens through a developer application
  in Drift
- Uses Zapier for webhook configuration and data integration
- Integration with Zapier for workflow automation
- Uses Drift's data models for CRM or MAP integration
errors:
- CONTACT-1: Unauthorized to view contact or not found
- CONTACT-2: Unauthorized to view contact or not found
- CONTACT-4: Malformed contact; Bad http payload construction for updating or creating
    a new contact
- CONTACT-5: Drift had an unexpected issue processing the request, perhaps check the
    payload body for formatting or bad field values
- CONTACT-6: Conflict when creating contact. Typically results from a contact already
    existing with a given id
- CONTACT-7: Attempted to create a contact without email
- CONTACT-8: Attempted to create or update contact without attributes
- CONTACT-9: Bad format of contact tags in payload. Common case is that a provided
    tag name didn't map to known a know tag id
- CONTACT-10: Unrecognized query parameter
- CONTACT-11: Generic Bad Request from contact service. Includes custom message
- Duplicate Contact Records: Ensure unique identification to avoid duplicates
- Duplicate domain: Attempting to create an account with an identical domain will
    result in an API error
- OAuth Scopes Changed: Uninstall then reinstall your app for a new token
- validation_error: One or more fields are invalid
- authentication_error: Missing proper authorization
- not_found: The requested resource was not found
- internal_error: Something went wrong in our system
- rate_limit: You have maxed your number of API calls for the provided time window
- CSP_VIOLATION: Add 'https://js.driftt.com' and 'https://widget.drift.com' to CSP
    rules
- Duplicate webhook requests: Check for multiple connected apps
- If no bot playbooks are enabled or configured, no results may be returned.
- 'No "next" field: Indicates no more data to paginate'
- SNIPPET_VERSION: Ensure the Drift SNIPPET_VERSION is correct and up-to-date
- Unauthorized: Recheck OAuth scopes or token expiration
- 401 Unauthorized: Check OAuth token validity and permissions
- 200: Successful receipt of the event
- not_found: Check if the conversation ID exists in the organization
- RESPONSE_EMPTY: If no bot playbooks are configured, no results may be returned
- Data not received: Check if event listeners are properly set up and postMessage
    is correctly implemented
- No owner assigned: Ensure Drift can assign an owner to the task
- 401 Unauthorized: Check if accessToken is valid or expired
- Incorrect token scopes: Ensure the bearer token has the necessary scopes for Contact
    Read, Conversation Read, and User Read.
- REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency
- 401 Unauthorized: Recheck OAuth scopes or token expiration
auth_info:
  mentioned_objects:
  - OAuth & Permissions
  - Scopes
  - OAuth Access Token
  - all_contact_read scope
  - OAuth Access token
  - conversation_push
  - account_write
  - Drift Admin account
  - Segment write key
  - Oauth
  - account_read
  - all_contact_read
  - team_read
  - OauthToken
  - playbook_read
  - drift app token
  - Account
  - SCIM
  - SSO
  - JWT
  - secretKey
  - Team
  - Integrations User
  - accessToken
  - token
  - Verification Token
  - Bearer Token
  - Conversation
  - Transcript
  - Contact
  - Meeting Model
  - User
client:
  auth:
    type: oauth2
    flow: refresh_token
    location: header
    header_name: Authorization
    token_url: https://driftapi.com/oauth2/token
    required_scopes:
    - conversation_write
  base_url: Not applicable - client-side integration
  headers:
    Accept: application/json
    Content-Type: application/json
    User-Agent: Recommended User-Agent
  paginator:
    type: cursor
    page_size_param: limit
    default_page_size: 100
    cursor_path: links.next
    cursor_param: page_token
source_metadata: null
