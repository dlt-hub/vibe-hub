resources:
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: ''
    params: {}
- name: collected-data
  endpoint:
    path: /sessions/{sessionId}/collected-data
    method: POST
    data_selector: ''
    params: {}
- name: media
  endpoint:
    path: /sessions/{sessionId}/media
    method: POST
    data_selector: ''
    params: {}
- name: update-session
  endpoint:
    path: /sessions/{sessionId}
    method: PATCH
    data_selector: ''
    params: {}
- name: validate-registry
  endpoint:
    path: /sessions/validate-registry
    method: POST
    data_selector: ''
    params: {}
- name: delete-session
  endpoint:
    path: /sessions/{sessionId}
    method: DELETE
    data_selector: ''
    params: {}
- name: verification_sessions
  endpoint:
    path: /v1/verificationSessions
    method: POST
    data_selector: data
    params: {}
- name: decision
  endpoint:
    path: /sessions/{sessionId}/decision
    method: GET
- name: sessions
  endpoint:
    path: /sessions
    method: POST
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: verification.url
- name: session
  endpoint:
    path: /sessions
    method: POST
- name: media
  endpoint:
    path: /sessions/{sessionId}/media
    method: POST
- name: update_session
  endpoint:
    path: /sessions/{sessionId}
    method: PATCH
- name: decision
  endpoint:
    path: /sessions/{sessionId}/decision
    method: GET
- name: sessions
  endpoint:
    path: /sessions/{sessionId}/media
    method: POST
    data_selector: verification
    params: {}
- name: session_decision
  endpoint:
    path: /sessions/{sessionId}/decision
    method: GET
    data_selector: verification
    params: {}
- name: session_attempts
  endpoint:
    path: /sessions/{sessionId}/attempts
    method: GET
    data_selector: verifications
- name: session_decision
  endpoint:
    path: /sessions/{sessionId}/decision
    method: GET
    data_selector: decision
- name: session_person
  endpoint:
    path: /sessions/{sessionId}/person
    method: GET
    data_selector: person
- name: session_media
  endpoint:
    path: /sessions/{sessionId}/media
    method: GET
    data_selector: media
- name: attempt_media
  endpoint:
    path: /attempts/{attemptId}/media
    method: GET
    data_selector: media
- name: media_file
  endpoint:
    path: /media/{mediaId}
    method: GET
    data_selector: media_file
- name: verification_session
  endpoint:
    path: /sessions
    method: POST
    data_selector: verification
    params: {}
- name: decision
  endpoint:
    path: /sessions/{sessionId}/decision
    method: GET
    data_selector: verification
    params: {}
- name: media
  endpoint:
    path: /sessions/{sessionId}/media
    method: GET
    data_selector: media
    params: {}
- name: verification_session
  endpoint:
    path: /sessions
    method: POST
    data_selector: verification.url
- name: sessions
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: verification
    params: {}
- name: media
  endpoint:
    path: /v1/sessions/{sessionId}/media
    method: POST
    data_selector: image
    params: {}
- name: update_session
  endpoint:
    path: /v1/sessions/{sessionId}
    method: PATCH
    data_selector: verification
    params: {}
- name: session
  endpoint:
    path: /sessions/{sessionId}/media
    method: POST
    data_selector: verification
    params: {}
- name: decision
  endpoint:
    path: /sessions/{sessionId}/decision
    method: GET
    data_selector: verification
    params: {}
- name: database_verification
  endpoint:
    path: /api/v1/database-verifications
    method: POST
    data_selector: data
    params: {}
- name: verification_session
  endpoint:
    path: /v1/docs/how-to-generate-sessions-manually
    method: POST
- name: session_events_webhook
  endpoint:
    path: /v1/docs/event-webhook
    method: POST
- name: session_decision_webhook
  endpoint:
    path: /v1/docs/full-auto-webhook
    method: POST
- name: sessions
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: data
    params: {}
- name: decision
  endpoint:
    path: /v1/sessions/{sessionId}/decision/fullauto
    method: GET
    data_selector: data
    params:
      version: 1.0.0
- name: document_verification
  endpoint:
    path: /verification
    method: POST
    data_selector: document
    params: {}
- name: proof_of_address_verification
  endpoint:
    path: /proof_of_address
    method: POST
    data_selector: proofOfAddress
    params: {}
- name: custom_intro_screen
  endpoint:
    path: /api/custom_intro_screen
    method: POST
    data_selector: configuration
    params: {}
- name: language_locale
  endpoint:
    path: /api/language_locale
    method: POST
    data_selector: configuration
    params: {}
- name: verification_session
  endpoint:
    path: /launchVeriff
    method: POST
    data_selector: result
    params:
      sessionUrl: SESSION_URL
      locale: et
      customIntroScreen: true
- name: verification_session
  endpoint:
    path: /sessions
    method: POST
    data_selector: session
    params: {}
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: verification
    params: {}
- name: sessions
  endpoint:
    path: /sessions
    method: POST
- name: media
  endpoint:
    path: /sessions/{sessionId}/media
    method: GET
- name: media_file
  endpoint:
    path: /media/{mediaId}
    method: GET
- name: media_file_mimetypes
  endpoint:
    path: /media/file/mimetypes
    method: GET
    data_selector: mimetype
    params: {}
- name: verification_session
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: session
    params: {}
- name: user_sessions
  endpoint:
    path: /api/v1/sessions
    method: GET
    data_selector: data
- name: verification
  endpoint:
    path: /v1/verifications
    method: POST
    data_selector: verificationId
    params: {}
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: verification
    params: {}
- name: attempts
  endpoint:
    path: /sessions/{sessionId}/attempts
    method: GET
    data_selector: attempts
    params: {}
- name: validate_registry
  endpoint:
    path: /v1/validate-registry
    method: POST
    data_selector: verification
    params: {}
- name: validate-registry
  endpoint:
    path: /v1/validate-registry
    method: POST
- name: sync-validate-registry
  endpoint:
    path: /sync-api/v1/validate-registry
    method: POST
- name: fraud_categories
  endpoint:
    path: /v1/feedback/fraud-categories
    method: GET
    data_selector: categories
- name: validate_registry
  endpoint:
    path: /v1/validate-registry
    method: POST
    data_selector: status
    params: {}
- name: fraud_report
  endpoint:
    path: /v1/feedback/fraud-reports
    method: POST
    data_selector: reports
- name: fraud_categories
  endpoint:
    path: /v1/feedback/fraud-categories
    method: GET
    data_selector: categories
- name: event_webhook
  endpoint:
    path: /event-webhook
    method: POST
    data_selector: payload
    params: {}
- name: INE+CURP webhook
  endpoint:
    path: /v1/docs/inecurp-webhook
    method: POST
    data_selector: data
    params: {}
- name: user_defined_statuses
  endpoint:
    path: /v1/docs/user-defined-statuses-webhook
    method: POST
    data_selector: data
    params: {}
- name: session
  endpoint:
    path: /sessions
    method: POST
    data_selector: verification.url
- name: media
  endpoint:
    path: /sessions/{sessionId}/media
    method: POST
    data_selector: media
- name: decision
  endpoint:
    path: /sessions/{sessionId}/decision/curp-registry
    method: GET
    data_selector: decision
- name: session
  endpoint:
    path: /sessions/{sessionId}/decision/curp-registry
    method: GET
    params:
      version: 1.0.0
- name: verification_session
  endpoint:
    path: /sessions
    method: POST
    data_selector: verification
    params: {}
- name: decision
  endpoint:
    path: /sessions/{sessionId}/decision
    method: GET
    data_selector: verification
    params: {}
- name: media_upload
  endpoint:
    path: /sessions/{sessionId}/media
    method: POST
    data_selector: verification
    params: {}
- name: patch_session
  endpoint:
    path: /sessions/{sessionId}
    method: PATCH
    data_selector: verification
    params: {}
- name: session_attempts
  endpoint:
    path: /sessions/{sessionId}/attempts
    method: GET
- name: session_decision
  endpoint:
    path: /sessions/{sessionId}/decision
    method: GET
- name: session_person
  endpoint:
    path: /sessions/{sessionId}/person
    method: GET
- name: session_media
  endpoint:
    path: /sessions/{sessionId}/media
    method: GET
- name: attempt_media
  endpoint:
    path: /attempts/{attemptId}/media
    method: GET
- name: media_file
  endpoint:
    path: /media/{mediaId}
    method: GET
- name: verification_session_decisions
  endpoint:
    path: /v1/verification/session/decisions
    method: GET
    data_selector: verification
    params: {}
- name: verification_session
  endpoint:
    path: /sessions
    method: POST
    data_selector: verification.status
    params: {}
- name: verifications
  endpoint:
    path: /verifications
    method: GET
- name: verification_session_status
  endpoint:
    path: /sessions
    method: GET
    data_selector: verification.status
    params: {}
- name: person
  endpoint:
    path: /v1/sessions/{id}/person
    method: GET
    data_selector: person
- name: sessions
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: verification
    params: {}
- name: validate-registry
  endpoint:
    path: /v1/validate-registry
    method: POST
    data_selector: verification
    params: {}
- name: watchlist_screening
  endpoint:
    path: /v1/sessions/{id}/watchlist-screening
    method: GET
    data_selector: data
    params: {}
- name: media_in_session
  endpoint:
    path: /v1/sessions/{id}/media
    method: GET
    data_selector: objects
- name: media_in_session
  endpoint:
    path: /v1/sessions/{id}/media
    method: post
    data_selector: object
    params:
      id: Required
- name: media
  endpoint:
    path: /v1/attempts/{id}/media
    method: GET
    data_selector: objects
- name: generate_otp
  endpoint:
    path: /sessions/{id}/mfa/generate
    method: POST
- name: verify_otp
  endpoint:
    path: /sessions/{id}/mfa/verify
    method: POST
- name: upload_selfie
  endpoint:
    path: /sessions/{sessionId}/media
    method: POST
- name: update_session_status
  endpoint:
    path: /sessions/{sessionId}
    method: PATCH
- name: get_decision
  endpoint:
    path: /sessions/{sessionId}/decision
    method: GET
- name: sessions
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: verification
    params: {}
- name: sessions
  endpoint:
    path: /v1/sessions/
    method: POST
    data_selector: verification
    params: {}
- name: decision
  endpoint:
    path: /sessions/{sessionId}/decision
    method: GET
    data_selector: verification
    params: {}
- name: sessions
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: verification
- name: decision_webhook
  endpoint:
    path: /v1/docs/decision-webhook
    method: POST
- name: event_webhook
  endpoint:
    path: /v1/docs/event-webhook
    method: POST
- name: watchlist_screening_webhook
  endpoint:
    path: /v1/docs/watchlist-screening-webhook
    method: POST
- name: ine_webhook
  endpoint:
    path: /v1/docs/ine-webhook
    method: POST
- name: curp_webhook
  endpoint:
    path: /v1/docs/curp-webhook
    method: POST
- name: ine_curp_webhook
  endpoint:
    path: /v1/docs/inecurp-webhook
    method: POST
- name: user_defined_statuses_webhook
  endpoint:
    path: /v1/docs/user-defined-statuses-webhook
    method: POST
- name: full_auto_webhook
  endpoint:
    path: /v1/docs/full-auto-webhook
    method: POST
- name: curp_registry
  endpoint:
    path: /v1/docs/curp-webhook
    method: POST
    data_selector: data
    params: {}
- name: full_auto_verification
  endpoint:
    path: /v1/docs/full-auto-webhook
    method: POST
    data_selector: data
    params: {}
- name: verification_sessions
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: data
    params: {}
- name: session_decision
  endpoint:
    path: /v1/sessions/{sessionId}/decision/fullauto
    method: GET
    data_selector: data
    params:
      version: 1.0.0
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: verification
    params: {}
- name: media
  endpoint:
    path: /sessions/{sessionId}/media
    method: POST
    data_selector: media
    params:
      context: face
- name: decision
  endpoint:
    path: /sessions/{sessionId}/decision
    method: GET
    data_selector: verification
    params: {}
- name: sessions
  endpoint:
    path: /sessions/{sessionId}/media
    method: POST
    data_selector: verification.additionalVerifiedData
    params:
      image.context: face
- name: decision
  endpoint:
    path: /sessions/{sessionId}/decision
    method: GET
    data_selector: verification
    params: {}
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: verification
    params: {}
- name: sessions
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: verification
    params: {}
- name: decision
  endpoint:
    path: /v1/sessions/{sessionId}/decision
    method: GET
    data_selector: verification
    params: {}
- name: media
  endpoint:
    path: /sessions/{sessionId}/media
    method: POST
    data_selector: media
    params: {}
- name: mfa_generate
  endpoint:
    path: /v1/sessions/{id}/mfa/generate
    method: POST
    data_selector: application/json
    params: {}
- name: mfa_verify
  endpoint:
    path: /v1/sessions/{id}/mfa/verify
    method: POST
    data_selector: application/json
    params: {}
- name: mfa_verify
  endpoint:
    path: /v1/sessions/{id}/mfa/verify
    method: POST
    data_selector: application/json
- name: generate_otp
  endpoint:
    path: /generate-otp
    method: POST
    data_selector: verification.reason
    params: {}
- name: verify_otp
  endpoint:
    path: /verify-otp
    method: POST
    data_selector: verification.reason
    params: {}
- name: session
  endpoint:
    path: /v1/sessions/{id}
    method: DELETE
- name: ine-registry
  endpoint:
    path: /v1/sessions/{id}/decision/ine-registry
    method: GET
    data_selector: active
    params:
      version: string
notes:
- Requires API key for authentication.
- X-HMAC-SIGNATURE header is required for signing requests.
- Uses OAuth2 with refresh token — requires setup of connected app in Veriff
- Bug fixes and improvements
- New AI-powered address verification solution that verifies a user's current residential
  address accurately in seconds.
- Ensure you have an integration with Veriff and a webhook set up to receive replies.
- Verification sessions generated for test integrations are not billed and not verified
  by Veriff
- One end-user can resubmit their data up to 9 times. The 10th attempt is automatically
  declined.
- Review verification sessions through the Verifications page or Webhooks tab.
- Veriff strongly recommends using vendorData or endUserId to create a unique identifier
  for end-users.
- Batch testing without prior agreement with Veriff is not allowed.
- X-HMAC-SIGNATURE is generated for API requests and webhook listeners to ensure data
  integrity.
- Different API endpoints require you to sign different parts of the request.
- Ensure that you use the raw body payload, otherwise the values may not match.
- To ensure uninterrupted access to our services, it is important that your network
  firewall configurations permit communication with our servers.
- All changes listed are considered to be backwards compatible by Veriff.
- Contact your Solutions Engineer for configuration and setup.
- A separate integration is needed to do this verification, please contact your solutions
  engineer for info and configuration.
- Veriff strongly recommends that you create and send the endUserId.
- Only captures the submitted document. No further analysis is performed.
- You need to send Veriff images of the end-user’s proof of address document.
- You have configured the decision webhook to get responses from Veriff.
- Requires setup of OAuth2 for authentication
- Full Auto sessions do not return reason codes.
- Document types include PASSPORT, ID_CARD, DRIVERS_LICENSE, RESIDENCE_PERMIT, VISA,
  and OTHER.
- Veriff requires camera, microphone, photo library and optionally NFC reader permissions
  for capturing photos, video and scanning passports or ID cards during identification.
- Adding the configuration alone in your app is not enough to enable the custom intro
  screen. Make sure to contact your solutions engineer so they can enable the feature
  for your integration.
- Integration with Veriff React Native SDK requires the project to target iOS minimum
  version 15.1 or higher
- Integration with Veriff React Native SDK requires the project to target Android
  minimum version 8.0 (api 26) or higher
- Veriff requires camera, microphone, photo library and optionally NFC reader permissions
  for capturing photos, video and scanning passports or ID cards.
- Integration with Cordova plugin requires the project to target at least iOS version
  13.0 and Android version 5.0 (API level 21) or higher.
- Minimum 600x680 width/height for embedded mode
- On mobile devices, embedded mode will not be applied due to UI/UX degradation
- You need to have a Veriff session URL generated before initializing the SDK.
- When a session is canceled or finished, we try to redirect the end-user to the callback
  URL.
- A separate request will have to be made for each media file
- Uses HMAC authentication for signing requests
- Different API endpoints require you sign different parameters
- Requires setup of API keys in Veriff account
- 'New feature: Hosted Verification Page available for all Enterprise clients.'
- Requires setup of connected app in Veriff
- The `base_url` is unique for each customer.
- This endpoint is not available by default. Contact your Solutions Engineer to set
  it up.
- Media upload is not used for registry verification.
- Webhook is optional and requires configuration in the Veriff Customer Portal.
- The data.details.ine field returns either ifeIdentifier or ineIdentifier. Both are
  not present at the same time.
- Webhook URL for sessions statuses set in Station must be configured in the Veriff
  Customer Portal.
- These Full Auto sessions do not return session reason or decision codes.
- Veriff strongly recommends you create and send the 'endUserId' or 'vendorData'.
- Make sure to add the mandatory query parameter 'version=1.0.0' to the API URL.
- Veriff strongly recommends you create and send the endUserId or vendorData
- Veriff strongly recommends you collect and send additional session/device data via
  POST sessions/{sessionid}/collected-data for improved fraud detection
- Additional end-user flow events tracking is not available by default.
- They can be received only when you are using the Veriff’s web flow, and these require
  some additional configuration on Veriff side.
- Webhooks are used to return decision and session related data.
- Ensure you are able to handle backward compatible changes and comply with data collection
  purposes.
- All verification sessions expire after 7 days.
- The granular reason codes mentioned here are subject to custom configuration on
  integration level, meaning that you may or may not receive the reason codes listed
  here.
- For detailed verification review, access the Verifications page and navigate to
  the relevant session.
- You can make up to three calls to generate/regenerate OTP via POST sessions/{id}/mfa/generate
  endpoint.
- You can call the POST sessions/{id}/mfa/generate endpoint once every 60 seconds.
- 'Always required: firstName, lastName'
- 'Optional: dateOfBirth, fullAddress, phoneNumber'
- The SSN must be passed via verification.document.number parameter.
- 'Maximum limit for session creation: 600 sessions per minute for Enterprise customers,
  30 sessions per minute for Self-Serve customers.'
- Each verification session receives a unique ID, aka the session ID.
- The session-specific token for a verification session is a JSON Web Token (JWT).
- Veriff sends the watch-list screening webhook for AML screening
- Webhook delivery is at-least-once
- Be mindful of the personally identifiable information you may be sending during
  testing!
- The CURP webhook is sent after the verification session is done and after the registry
  checks have been completed.
- The Full Auto webhook needs to be configured separately in the Veriff Customer Portal.
- Decision webhook is not used.
- An environment created according to customer's needs to carry out, manage and observe
  verifications.
- Depending on your setup, you may be required to access the environment via station.veriff.com
  or hub.veriff.com.
- Sending the address on session creation is optional for M1A.
- Sending the address on session creation is mandatory for M1B.
- End-user must provide consent to send their image for verification.
- Ensure to configure the decision webhook to receive results.
- Ensure proper configuration of OAuth2 for API access.
errors:
- '401 Unauthorized: Check API key or permissions.'
- '404 Not Found: Verify the endpoint path and parameters.'
- '500 Internal Server Error: Contact support.'
- '401 Unauthorized: Check client credentials or token expiration.'
- 539 - Resubmission limit exceeded
- 'Unauthorized: Check API key or shared secret key.'
- '9001: Positive: end-user was verified.'
- '9102: Negative: end-user has not been verified.'
- '9103: Resubmission has been requested.'
- 'INVALID_CREDENTIALS: Check client_id and client_secret'
- 'SESSION_NOT_FOUND: Ensure the session ID is correct'
- Not adding required permissions will cause the system to shut down the application
  when it requests the permissions.
- 'Error.cameraUnavailable: User did not give permission for the camera'
- 'Error.microphoneUnavailable: User did not give permission for the microphone.'
- 'Error.networkError: Network error occurred.'
- 'Error.sessionError: A local error happened before submitting the session.'
- 'Error.deprecatedSDKVersion: Version of Veriff SDK used in plugin has been deprecated.
  Please update to the latest version.'
- 'Error.unknown: Unknown error occurred.'
- 'Error.nfcError: Error with NFC'
- 'Error.setupError: Error with setup'
- 'Error.none: No error.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'X-HMAC-signature not working: Check parameters signed for each endpoint'
- '401 Unauthorized: Check your API key or OAuth token'
- '404 Not Found: Verify the endpoint path'
- '429 Too Many Requests: Rate limit exceeded'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify your credentials.'
- '404 Not Found: Ensure the endpoint is correct.'
- '400 Bad Request: Check the request payload for errors.'
- '401 Unauthorized: Verify API key and permissions.'
- '404 Not Found: Check the endpoint path.'
- 400 Address data missing
- 400 Date of birth OR address data missing
- 400 ID number data missing
- 400 Name data missing
- '401'
- 'invalidApiKey: Integration with the API key ''6ee9e344-20a6-439d-bf21-b6610db63ad6''
  was not found.'
- 'RATE_LIMIT_EXCEEDED: Limit exceeded: 1000 per minute'
- 'INTERNAL_SERVER_ERROR: An unexpected error occurred.'
- '400: Validation failed'
- '401: Mandatory X-AUTH-CLIENT header containing the API key is missing from the
  request.'
- 'invalidApiKey: Integration with the API key was not found.'
- 'UNPROCESSABLE_ENTITY: Validation failed: reports: Field required'
- 'verification.session_not_found: Check the session ID.'
- 'verification.invalid_parameter: Verify the parameters sent.'
- '401 Unauthorized: Recheck API keys or token expiration'
- '7001: The end-user has started their session and landed in Veriff’s verification
  flow.'
- '7002: End-user’s required data has been submitted.'
- '9104: Verification has been expired.'
- '9121: This status is issued whenever the automation engine could not issue a conclusive
  decision.'
- '101: Physical document not used'
- '102: Suspected document tampering'
- '103: Person showing the document does not appear to match document photo'
- '105: Suspicious behaviour'
- '106: Known fraud'
- '108: Velocity/abuse duplicated end-user'
- '109: Velocity/abuse duplicated device'
- '110: Velocity/abuse duplicated ID'
- '112: Restricted IP location'
- '113: Suspicious behaviour - Identity Farming'
- '200: success  data'
- '201: created  data'
- '400: fail'
- '401: fail'
- '404: fail'
- '500: fail'
- '1801: Mandatory X-AUTH-CLIENT header containing the API key is missing from the
  request'
- '1802: API key is not a valid UUID'
- '1803: Integration with the API key was not found'
- '1804: Integration with the API key is not active'
- '1812: Signature is not a valid SHA256 hash'
- '1813: Signature does not match the SHA256 hash of query ID and integration API
  secret'
- '1814: Signature does not match the SHA256 hash of request body and integration
  API secret'
- '1818: Signature does not match the HMAC-SHA256 of query ID and integration API
  secret'
- '1819: Signature does not match the HMAC-SHA256 of request body and integration
  API secret'
- '1001: Query ID must be between 20 and 40 symbols.'
- '1002: Query ID must be a valid UUID V4'
- '1003: Query ID must be unique, it has already been used.'
- '1102: Mandatory parameters are missing from the request.'
- '1104: Request includes invalid parameters.'
- '1201: Invalid timestamp. Timestamp must not be older than one hour.'
- '1202: Timestamp format is incorrect. YYYY-MM-DDTHH:MM:S+Timezone Offset|Z or UTC.'
- '1203: Invalid ISO 8601 date. Date needs to be in format YYYY-MM-DD.'
- '1301: Requested features are not supported.'
- '1302: Only HTTPS return URLs are allowed.'
- '1303: Invalid status.'
- '1304: Cannot transition to "$STATUS" status.'
- '1308: ID number is missing.'
- '1309: SSN validation requires person `firstName` + `lastName` OR `fullName` to
  be provided.'
- '1310: SSN validation requires `person.dateOfBirth` or address data to be provided.'
- '1400: Image data not found.'
- '1401: Image is not in valid `base64`.'
- '1402: Image context is not supported.'
- '1403: Image property is missing.'
- '1500: `vendorData` field cannot be more than 1000 symbols. We require only non-semantic
  data to be submitted (UUID-s etc., that can not be resolved or used outside the
  customer''s domain)'
- '1501: `vendorData` must be a string. We require only non-semantic data to be submitted
  (UUID-s etc., that can not be resolved or used outside the customer''s domain)'
- '1804: Integration with API key is not active. This error occurs when your integration
  has been deactivated. This can happen due to account suspension, billing issues,
  or manual deactivation. Contact Veriff support to reactivate your integration or
  verify your account status.'
- '1815: Could not authenticate request. This error occurs when the system cannot
  validate the request signature or authentication headers. Check that the headers
  to not have typos and includes correct values. Check that you use the correct and
  full request body to create the signature.'
- '1818: Signature does not match the hmac-sha256 of query id and integration api
  secret. This error occurs when making API calls to retrieve session data. Unlike
  session creation requests, data retrieval endpoints require a different signature
  calculation method. Ensure you''re generating the HMAC signature using the correct
  parameters for the specific endpoint you are calling (see the endpoint’s documentation
  for info), and using your integration''s shared secret key (not the public API key)'
- '1819: Signature does not match the hmac-sha256. This error indicates that while
  the request format is correct, the HMAC-SHA256 signature computed by Veriff does
  not match the signature provided in your `X-HMAC-SIGNATURE` header. Ensure you are
  using your integration''s shared secret key (not the public API key) and the exact
  raw request body when generating the signature.'
- '2003: Date of birth is not a valid date.'
- '2101: Document number has to be between 6 and 9 characters.'
- '2102: Document number may contain only characters and numbers A-Z, 0-9.'
- '2103: Document type is not supported.'
- '2104: Document from provided country is not supported.'
- '9121: Verification session needs to be reviewed by a human.'
- '1101: Mandatory X-AUTH-CLIENT header containing the API key is missing from the
  request.'
- '1101: Resource not found'
- '1101: Something went wrong'
- '1004: Too many requests.'
- '1101: Validation failed'
- '401 Unauthorized: Mandatory X-AUTH-CLIENT header containing the API key is missing
  from the request.'
- '404: Resource not found'
- '500: Something went wrong'
- 429 - OTP_REQUEST_TOO_SOON
- '401 Unauthorized: Check API key validity'
- '400 Bad Request: Verify input data formats'
- '400 Bad Request: Check the input data format.'
- '404 Not Found: Ensure sessionId is correct.'
- '500 Internal Server Error: Retry the request later.'
- 'Invalid API key: Ensure you are using a valid API key.'
- 'Quota exceeded: Throttle requests to stay within your limits.'
- '9001: Positive verification'
- '9102: Negative verification - investigate session'
- '9103: Resubmission requested'
- CIFAS registry detected a potential match.
- Registry check did not result in a match.
- Person detected to be potentially a PEP.
- '401 Unauthorized: Ensure the API key is valid and included in requests.'
- '401 Unauthorized: Check your API key and permissions.'
- '403 Forbidden: You do not have access to this resource.'
- '404 Not Found: The requested resource could not be found.'
- '400: Bad request'
- '401: Unauthorized'
- '500: Internal server error'
- 'INVALID_SESSION_DETAILS: Invalid session Id'
- 'INVALID_RESEND_ATTEMPT: Invalid attempt to resend the OTP'
- 'OTP_GENERATION_LIMIT_REACHED: OTP generation limit reached'
- 'MFA_ALREADY_COMPLETED: The MFA process has already been completed for the end-user'
- 'API_ERROR: Internal server error'
- 'INVALID_INPUT_AADHAR: Document number provided is not correct, check format'
- 'INVALID_AADHAR: Document number does not match any actual Aadhaar entries'
- 'INVALID_PHONE_NUMBER: Invalid phone number tied to document number'
- 'OTP_REQUEST_TOO_SOON: A new request to generate an OTP was done within 60 seconds
  of the last OTP generation'
- 'INVALID_INPUT_OTP: The OTP entered is not valid, it needs to be a 6-digit number'
- 'OTP_NOT_GENERATED: An OTP was not generated for the Aadhaar identifier'
- 'INVALID_OTP: The OTP entered is incorrect, check the number and format'
- 'OTP_SUBMISSION_LIMIT_REACHED: Maximum number of OTP attempts reached, session will
  be submitted'
- '400: Session is not in a completed status.'
- '400 Bad Request: Validation failed'
- '404 Not Found: Resource not found'
- '500 Internal Server Error: Something went wrong'
auth_info:
  mentioned_objects:
  - Integration ID
  - API key
  - shared secret key
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.veriff.com
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
