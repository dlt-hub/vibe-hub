resources:
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: POST
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
- name: tts
  endpoint:
    path: /v1/audio/speech
    method: POST
- name: stt
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
- name: imgGen
  endpoint:
    path: /v1/images/generations
    method: POST
- name: imgEdit
  endpoint:
    path: /v1/images/edits
    method: POST
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: records
    params: {}
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
    data_selector: records
    params: {}
- name: rerank
  endpoint:
    path: /v1/rerank
    method: GET
    data_selector: records
    params: {}
- name: tts
  endpoint:
    path: /v1/audio/speech
    method: GET
    data_selector: records
    params: {}
- name: stt
  endpoint:
    path: /v1/audio/transcriptions
    method: GET
    data_selector: records
    params: {}
- name: imgGen
  endpoint:
    path: /v1/images/generations
    method: GET
    data_selector: records
    params: {}
- name: imgEdit
  endpoint:
    path: /v1/images/edits
    method: GET
    data_selector: records
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
- name: rerank
  endpoint:
    path: /v1/rerank
    method: GET
- name: tts
  endpoint:
    path: /v1/audio/speech
    method: GET
- name: stt
  endpoint:
    path: /v1/audio/transcriptions
    method: GET
- name: imgGen
  endpoint:
    path: /v1/images/generations
    method: GET
- name: imgEdit
  endpoint:
    path: /v1/images/edits
    method: GET
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: records
- name: chat
  endpoint:
    path: /v1/chat/completions
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: records
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: records
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
    data_selector: records
- name: rerank
  endpoint:
    path: /v1/rerank
    method: GET
    data_selector: records
- name: tts
  endpoint:
    path: /v1/audio/speech
    method: GET
    data_selector: records
- name: stt
  endpoint:
    path: /v1/audio/transcriptions
    method: GET
    data_selector: records
- name: imgGen
  endpoint:
    path: /v1/images/generations
    method: GET
    data_selector: records
- name: imgEdit
  endpoint:
    path: /v1/images/edits
    method: GET
    data_selector: records
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: ''
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: ''
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
- name: rerank
  endpoint:
    path: /v1/rerank
    method: GET
- name: tts
  endpoint:
    path: /v1/audio/speech
    method: GET
- name: stt
  endpoint:
    path: /v1/audio/transcriptions
    method: GET
- name: imgGen
  endpoint:
    path: /v1/images/generations
    method: GET
- name: imgEdit
  endpoint:
    path: /v1/images/edits
    method: GET
- name: security
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: configprops
  endpoint:
    path: /actuator/configprops
    method: GET
    data_selector: config
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
- name: metrics
  endpoint:
    path: /actuator/metrics
    method: GET
- name: configprops
  endpoint:
    path: /actuator/configprops
    method: GET
- name: 更新日志
  endpoint:
    path: changelog/
    method: GET
    data_selector: ''
    params: {}
- name: 发展路线图
  endpoint:
    path: roadmap/
    method: GET
    data_selector: ''
    params: {}
- name: 常见问题解答
  endpoint:
    path: faq/
    method: GET
    data_selector: ''
    params: {}
- name: 术语表
  endpoint:
    path: glossary/
    method: GET
    data_selector: ''
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{type}
    method: POST
- name: view_instance
  endpoint:
    path: /api/config/instance/type/{type}
    method: GET
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: success
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: success
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: success
- name: instance_type
  endpoint:
    path: /api/config/instance/type/{type}
    method: GET
    data_selector: success
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: success
    params: {}
- name: view_instance
  endpoint:
    path: /api/config/instance/type/{type}
    method: GET
    data_selector: instances
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{type}
    method: POST
- name: view_instance
  endpoint:
    path: /api/config/instance/type/{type}
    method: GET
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: ''
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: ''
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: ''
    params: {}
- name: get_instance
  endpoint:
    path: /api/config/instance/type/chat
    method: GET
    data_selector: ''
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: success
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: success
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: success
    params: {}
- name: view_instance
  endpoint:
    path: /api/config/instance/type/{type}
    method: GET
    data_selector: success
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: null
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: null
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{type}
    method: POST
    data_selector: null
    params: {}
- name: get_instances
  endpoint:
    path: /api/config/instance/type/{type}
    method: GET
    data_selector: null
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: ''
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: ''
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: ''
    params: {}
- name: view_instance
  endpoint:
    path: /api/config/instance/type/{type}
    method: GET
    data_selector: ''
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: ''
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: ''
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{type}
    method: POST
    data_selector: ''
    params: {}
- name: get_instance
  endpoint:
    path: /api/config/instance/type/{type}
    method: GET
    data_selector: ''
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: ''
    params: {}
- name: app_info
  endpoint:
    path: /actuator/info
    method: GET
    data_selector: ''
    params: {}
- name: metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: ''
    params: {}
- name: http_requests_metrics
  endpoint:
    path: /actuator/metrics/http.server.requests
    method: GET
    data_selector: ''
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: instance_add
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: success
    params: {}
- name: instance_type
  endpoint:
    path: /api/config/instance/type/chat
    method: GET
    data_selector: instances
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: ''
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
    params: {}
- name: instance_add
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: success
    params: {}
- name: instance_type
  endpoint:
    path: /api/config/instance/type/chat
    method: GET
    data_selector: instances
    params: {}
- name: metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: info
  endpoint:
    path: /actuator/info
    method: GET
    data_selector: app
    params: {}
- name: scan
  endpoint:
    path: /merge/scan
    method: GET
- name: preview
  endpoint:
    path: /merge/preview
    method: GET
- name: execute
  endpoint:
    path: /merge/execute
    method: POST
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: services.chat.instances
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: success
    params: {}
- name: get_instances
  endpoint:
    path: /api/config/instance/type/chat
    method: GET
    data_selector: instances
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: app_info
  endpoint:
    path: /actuator/info
    method: GET
    data_selector: app
    params: {}
- name: metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: responses
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: config_merge_scan
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: config_merge_preview
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: config_merge_execute
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: server
  endpoint:
    path: /server
    method: GET
    data_selector: server
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: server
  endpoint:
    path: /server
    method: GET
    data_selector: records
- name: webclient
  endpoint:
    path: /webclient
    method: GET
    data_selector: records
- name: monitoring
  endpoint:
    path: /monitoring
    method: GET
    data_selector: records
- name: server
  endpoint:
    path: /server/config
    method: GET
    data_selector: config
- name: metrics
  endpoint:
    path: /actuator
    method: GET
    data_selector: metrics
- name: server-base
  endpoint:
    path: /config/base/server-base.yml
    method: GET
- name: model-services-base
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
- name: monitoring-base
  endpoint:
    path: /config/base/monitoring-base.yml
    method: GET
- name: tracing-base
  endpoint:
    path: /config/tracing/tracing-base.yml
    method: GET
- name: security-base
  endpoint:
    path: /config/security/security-base.yml
    method: GET
- name: slow-query-alerts
  endpoint:
    path: /config/monitoring/slow-query-alerts.yml
    method: GET
- name: error-tracking
  endpoint:
    path: /config/monitoring/error-tracking.yml
    method: GET
- name: server-base
  endpoint:
    path: /config/base/server-base.yml
    method: GET
- name: model-services-base
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
- name: monitoring-base
  endpoint:
    path: /config/base/monitoring-base.yml
    method: GET
- name: tracing-base
  endpoint:
    path: /config/tracing/tracing-base.yml
    method: GET
- name: security-base
  endpoint:
    path: /config/security/security-base.yml
    method: GET
- name: slow-query-alerts
  endpoint:
    path: /config/monitoring/slow-query-alerts.yml
    method: GET
- name: error-tracking
  endpoint:
    path: /config/monitoring/error-tracking.yml
    method: GET
- name: server-base
  endpoint:
    path: /config/base/server-base.yml
    method: GET
- name: model-services-base
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
- name: monitoring-base
  endpoint:
    path: /config/base/monitoring-base.yml
    method: GET
- name: tracing-base
  endpoint:
    path: /config/tracing/tracing-base.yml
    method: GET
- name: security-base
  endpoint:
    path: /config/security/security-base.yml
    method: GET
- name: slow-query-alerts
  endpoint:
    path: /config/monitoring/slow-query-alerts.yml
    method: GET
- name: error-tracking
  endpoint:
    path: /config/monitoring/error-tracking.yml
    method: GET
- name: server-base
  endpoint:
    path: /config/base/server-base.yml
    method: GET
    data_selector: server
    params: {}
- name: model-services-base
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: model
    params: {}
- name: monitoring-base
  endpoint:
    path: /config/base/monitoring-base.yml
    method: GET
    data_selector: monitoring
    params: {}
- name: tracing-base
  endpoint:
    path: /config/tracing/tracing-base.yml
    method: GET
    data_selector: jairouter.tracing
    params: {}
- name: security-base
  endpoint:
    path: /config/security/security-base.yml
    method: GET
    data_selector: jairouter.security
    params: {}
- name: slow-query-alerts
  endpoint:
    path: /config/monitoring/slow-query-alerts.yml
    method: GET
    data_selector: jairouter.monitoring.slow-query-alert
    params: {}
- name: error-tracking
  endpoint:
    path: /config/monitoring/error-tracking.yml
    method: GET
    data_selector: jairouter.monitoring.error-tracking
    params: {}
- name: application-dev
  endpoint:
    path: /application-dev.yml
    method: GET
    data_selector: logging
    params: {}
- name: application-staging
  endpoint:
    path: /application-staging.yml
    method: GET
    data_selector: logging
    params: {}
- name: application-prod
  endpoint:
    path: /application-prod.yml
    method: GET
    data_selector: logging
    params: {}
- name: application-legacy
  endpoint:
    path: /application-legacy.yml
    method: GET
    data_selector: logging
    params: {}
- name: server-base
  endpoint:
    path: /config/base/server-base.yml
    method: GET
    data_selector: server
    params: {}
- name: model-services-base
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: model
    params: {}
- name: monitoring-base
  endpoint:
    path: /config/base/monitoring-base.yml
    method: GET
    data_selector: monitoring
    params: {}
- name: server-base
  endpoint:
    path: /config/base/server-base.yml
    method: GET
    data_selector: server
    params: {}
- name: model-services-base
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: model
    params: {}
- name: monitoring-base
  endpoint:
    path: /config/base/monitoring-base.yml
    method: GET
    data_selector: monitoring
    params: {}
- name: tracing-base
  endpoint:
    path: /config/tracing/tracing-base.yml
    method: GET
    data_selector: jairouter.tracing
    params: {}
- name: security-base
  endpoint:
    path: /config/security/security-base.yml
    method: GET
    data_selector: jairouter.security
    params: {}
- name: slow-query-alerts
  endpoint:
    path: /config/monitoring/slow-query-alerts.yml
    method: GET
    data_selector: jairouter.monitoring.slow-query-alert
    params: {}
- name: error-tracking
  endpoint:
    path: /config/monitoring/error-tracking.yml
    method: GET
    data_selector: jairouter.monitoring.error-tracking
    params: {}
- name: server-base
  endpoint:
    path: /config/base/server-base.yml
    method: GET
- name: model-services-base
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
- name: monitoring-base
  endpoint:
    path: /config/base/monitoring-base.yml
    method: GET
- name: tracing-base
  endpoint:
    path: /config/tracing/tracing-base.yml
    method: GET
- name: security-base
  endpoint:
    path: /config/security/security-base.yml
    method: GET
- name: slow-query-alerts
  endpoint:
    path: /config/monitoring/slow-query-alerts.yml
    method: GET
- name: error-tracking
  endpoint:
    path: /config/monitoring/error-tracking.yml
    method: GET
- name: application-dev
  endpoint:
    path: /application-dev.yml
    method: GET
- name: application-staging
  endpoint:
    path: /application-staging.yml
    method: GET
- name: application-prod
  endpoint:
    path: /application-prod.yml
    method: GET
- name: application-legacy
  endpoint:
    path: /application-legacy.yml
    method: GET
- name: server-base
  endpoint:
    path: /config/base/server-base.yml
    method: GET
- name: model-services-base
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
- name: monitoring-base
  endpoint:
    path: /config/base/monitoring-base.yml
    method: GET
- name: tracing-base
  endpoint:
    path: /config/tracing/tracing-base.yml
    method: GET
- name: security-base
  endpoint:
    path: /config/security/security-base.yml
    method: GET
- name: slow-query-alerts
  endpoint:
    path: /config/monitoring/slow-query-alerts.yml
    method: GET
- name: error-tracking
  endpoint:
    path: /config/monitoring/error-tracking.yml
    method: GET
- name: application-dev
  endpoint:
    path: /application-dev.yml
    method: GET
- name: application-staging
  endpoint:
    path: /application-staging.yml
    method: GET
- name: application-prod
  endpoint:
    path: /application-prod.yml
    method: GET
- name: application-legacy
  endpoint:
    path: /application-legacy.yml
    method: GET
- name: instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: scan_config_files
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: preview_merge
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: batch_operations
  endpoint:
    path: /api/config/merge/batch
    method: POST
- name: validate_config
  endpoint:
    path: /api/config/merge/validate
    method: GET
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: ''
    params: {}
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: ''
    params: {}
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: ''
    params: {}
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: ''
    params: {}
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: ''
    params: {}
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: ''
    params: {}
- name: instance_list
  endpoint:
    path: /api/config/instance/type/chat
    method: GET
- name: instance_detail
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    params:
      modelName: llama3.2:3b
      baseUrl: http://localhost:11434
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/chat
    method: DELETE
- name: instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
    data_selector: data
    params: {}
- name: instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
    data_selector: data
    params: {}
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
    data_selector: data
    params: {}
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
    data_selector: data
    params: {}
- name: scan_config_versions
  endpoint:
    path: /api/config/merge/scan
    method: GET
    data_selector: data
    params: {}
- name: preview_merge
  endpoint:
    path: /api/config/merge/preview
    method: GET
    data_selector: data
    params: {}
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
    data_selector: data
    params: {}
- name: batch_operations
  endpoint:
    path: /api/config/merge/batch
    method: POST
    data_selector: data
    params: {}
- name: validate_config
  endpoint:
    path: /api/config/merge/validate
    method: GET
    data_selector: data
    params: {}
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: ''
    params: {}
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: ''
    params: {}
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: ''
    params: {}
- name: instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: get_instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: get_instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: scan_version_files
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: preview_merge_results
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: batch_operations
  endpoint:
    path: /api/config/merge/batch
    method: POST
- name: validate_configuration
  endpoint:
    path: /api/config/merge/validate
    method: GET
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: null
- name: get_instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: null
- name: update_instance_weight
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: null
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/chat
    method: DELETE
    params:
      modelName: qwen2:7b
      baseUrl: http://gpu-server:8080
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_service_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
    params: {}
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
    params: {}
- name: update_instance_weight
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
    params: {}
- name: instance
  endpoint:
    path: /api/config/instance/del/chat
    method: DELETE
- name: get_instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
    data_selector: data
    params: {}
- name: get_instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
    data_selector: data
    params: {}
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
    data_selector: data
    params: {}
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
    data_selector: data
    params: {}
- name: scan_config_files
  endpoint:
    path: /api/config/merge/scan
    method: GET
    data_selector: data
    params: {}
- name: preview_merge_results
  endpoint:
    path: /api/config/merge/preview
    method: GET
    data_selector: data
    params: {}
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
    data_selector: data
    params: {}
- name: batch_operations
  endpoint:
    path: /api/config/merge/batch
    method: POST
    data_selector: data
    params: {}
- name: validate_config
  endpoint:
    path: /api/config/merge/validate
    method: GET
    data_selector: data
    params: {}
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
- name: get_instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
- name: scan_version_file
  endpoint:
    path: /scan
    method: GET
    data_selector: ''
    params: {}
- name: preview_merge_result
  endpoint:
    path: /preview
    method: GET
    data_selector: ''
    params: {}
- name: execute_merge
  endpoint:
    path: /execute
    method: POST
    data_selector: ''
    params: {}
- name: backup_configuration
  endpoint:
    path: /backup
    method: POST
    data_selector: ''
    params: {}
- name: batch_operation
  endpoint:
    path: /batch
    method: POST
    data_selector: ''
    params: {}
- name: cleanup_file
  endpoint:
    path: /cleanup
    method: DELETE
    data_selector: ''
    params: {}
- name: validate_configuration
  endpoint:
    path: /validate
    method: GET
    data_selector: ''
    params: {}
- name: statistics
  endpoint:
    path: /statistics
    method: GET
    data_selector: ''
    params: {}
- name: service_status
  endpoint:
    path: /status
    method: GET
    data_selector: ''
    params: {}
- name: instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
    data_selector: data
- name: instance_detail
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
    data_selector: data
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
    data_selector: data
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
    data_selector: data
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
    data_selector: data
- name: scan_config_files
  endpoint:
    path: /api/config/merge/scan
    method: GET
    data_selector: data
- name: preview_merge_result
  endpoint:
    path: /api/config/merge/preview
    method: GET
    data_selector: data
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
    data_selector: data
- name: batch_operation
  endpoint:
    path: /api/config/merge/batch
    method: POST
    data_selector: data
- name: validate_config
  endpoint:
    path: /api/config/merge/validate
    method: GET
    data_selector: data
- name: instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
    data_selector: data
    params: {}
- name: instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
    data_selector: data
    params: {}
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
    data_selector: data
    params: {}
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
    data_selector: data
    params: {}
- name: scan_config_versions
  endpoint:
    path: /api/config/merge/scan
    method: GET
    data_selector: data
    params: {}
- name: preview_merge
  endpoint:
    path: /api/config/merge/preview
    method: GET
    data_selector: data
    params: {}
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
    data_selector: data
    params: {}
- name: batch_operations
  endpoint:
    path: /api/config/merge/batch
    method: POST
    data_selector: data
    params: {}
- name: validate_config
  endpoint:
    path: /api/config/merge/validate
    method: GET
    data_selector: data
    params: {}
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_instance_chat
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
    params: {}
- name: update_instance_chat
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
    params: {}
- name: instance_info_chat
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
    params: {}
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
    params: {}
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
    params: {}
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
    params: {}
- name: instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: scan_versions
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: preview_merge
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: backup_config
  endpoint:
    path: /api/config/merge/backup
    method: POST
- name: batch_operation
  endpoint:
    path: /api/config/merge/batch
    method: POST
- name: cleanup_files
  endpoint:
    path: /api/config/merge/cleanup
    method: DELETE
- name: validate_config
  endpoint:
    path: /api/config/merge/validate
    method: GET
- name: statistics_info
  endpoint:
    path: /api/config/merge/statistics
    method: GET
- name: merge_status
  endpoint:
    path: /api/config/merge/status
    method: GET
- name: 获取实例列表
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: 获取实例详情
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: 添加实例
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: 更新实例
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: 删除实例
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: scan_config_versions
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: preview_merge_results
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: backup_config
  endpoint:
    path: /api/config/merge/backup
    method: POST
- name: batch_operation
  endpoint:
    path: /api/config/merge/batch
    method: POST
- name: cleanup_files
  endpoint:
    path: /api/config/merge/cleanup
    method: DELETE
- name: validate_config
  endpoint:
    path: /api/config/merge/validate
    method: GET
- name: statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
- name: status
  endpoint:
    path: /api/config/merge/status
    method: GET
- name: statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
- name: instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
    data_selector: data
- name: instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
    data_selector: data
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
    data_selector: data
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
    data_selector: data
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
    data_selector: data
- name: scan_config
  endpoint:
    path: /api/config/merge/scan
    method: GET
    data_selector: data
- name: preview_merge
  endpoint:
    path: /api/config/merge/preview
    method: GET
    data_selector: data
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
    data_selector: data
- name: batch_operations
  endpoint:
    path: /api/config/merge/batch
    method: POST
    data_selector: data
- name: validate_config
  endpoint:
    path: /api/config/merge/validate
    method: GET
    data_selector: data
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: null
    params: {}
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: null
    params: {}
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: null
    params: {}
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
- name: get_instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: get_instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: scan_config_files
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: preview_merge_results
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: backup_and_merge
  endpoint:
    path: /api/config/merge/batch
    method: POST
- name: validate_config
  endpoint:
    path: /api/config/merge/validate
    method: GET
- name: config_merge_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: config_merge_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_chat_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: ''
    params: {}
- name: update_chat_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: ''
    params: {}
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: ''
    params: {}
- name: statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: ''
    params: {}
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: ''
    params: {}
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: ''
    params: {}
- name: merge_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: scan_config_files
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: preview_merge
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: backup_and_merge
  endpoint:
    path: /api/config/merge/batch
    method: POST
- name: validate_config
  endpoint:
    path: /api/config/merge/validate
    method: GET
- name: merge_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: merge_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
- name: merge_status
  endpoint:
    path: /config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: ''
    params: {}
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: ''
    params: {}
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: ''
    params: {}
- name: merge_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: ''
    params: {}
- name: 获取实例列表
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: 获取实例详情
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: 添加实例
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: 更新实例
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: 删除实例
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: null
    params: {}
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: null
    params: {}
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: null
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: 获取实例列表
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: 获取实例详情
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: 添加实例
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: 更新实例
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: 删除实例
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: 扫描配置文件版本
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: 预览合并结果
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: 执行合并
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: 批量操作
  endpoint:
    path: /api/config/merge/batch
    method: POST
- name: 验证配置
  endpoint:
    path: /api/config/merge/validate
    method: GET
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: merge_service_status
  endpoint:
    path: /config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
    params: {}
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
    params: {}
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
    params: {}
- name: get_instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: get_instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: scan_config_files
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: preview_merge_result
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: batch_operations
  endpoint:
    path: /api/config/merge/batch
    method: POST
- name: validate_config
  endpoint:
    path: /api/config/merge/validate
    method: GET
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    params:
      modelName: qwen2:7b
      baseUrl: http://gpu-server:8080
- name: instance_update
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: instance
    params: {}
- name: merge_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: merge_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: instance_add_chat
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
- name: instance_info_chat
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
- name: instance_update_chat
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: get_instance_list
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: get_instance_details
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: add_instance
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: update_instance
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: scan_version_files
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: preview_merge_results
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: batch_operations
  endpoint:
    path: /api/config/merge/batch
    method: POST
- name: validate_configuration
  endpoint:
    path: /api/config/merge/validate
    method: GET
- name: merge_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: merge_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: null
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: null
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: null
- name: instance_type_chat
  endpoint:
    path: /instance/type/chat
    method: GET
    data_selector: ''
    params: {}
- name: remove_faulty_instance
  endpoint:
    path: /instance/del/chat
    method: DELETE
    data_selector: ''
    params:
      modelName: faulty-model
      baseUrl: http://faulty-server:8080
- name: 获取实例列表
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: 获取实例详情
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: 添加实例
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: 更新实例
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: 删除实例
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: 扫描版本文件
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: 预览合并结果
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: 执行合并
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: 备份配置
  endpoint:
    path: /api/config/merge/backup
    method: POST
- name: 批量操作
  endpoint:
    path: /api/config/merge/batch
    method: POST
- name: 清理文件
  endpoint:
    path: /api/config/merge/cleanup
    method: DELETE
- name: 验证配置
  endpoint:
    path: /api/config/merge/validate
    method: GET
- name: 获取配置统计信息
  endpoint:
    path: /api/config/merge/statistics
    method: GET
- name: 获取合并服务状态
  endpoint:
    path: /api/config/merge/status
    method: GET
- name: merge_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: merge_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    params:
      modelName: qwen2:7b
      baseUrl: http://gpu-server:8080
- name: update_instance_weight
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: instance
    params: {}
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
    params: {}
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
    params: {}
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
    params: {}
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/chat
    method: DELETE
    data_selector: data
    params: {}
- name: scan_config
  endpoint:
    path: /merge/scan
    method: GET
    data_selector: ''
    params: {}
- name: preview_merge
  endpoint:
    path: /merge/preview
    method: GET
    data_selector: ''
    params: {}
- name: execute_merge
  endpoint:
    path: /merge/execute
    method: POST
    data_selector: ''
    params: {}
- name: cleanup_old_versions
  endpoint:
    path: /merge/cleanup
    method: DELETE
    data_selector: ''
    params:
      deleteOriginals: 'true'
- name: add_instance
  endpoint:
    path: /instance/add/chat
    method: POST
    data_selector: ''
    params: {}
- name: update_instance_weight
  endpoint:
    path: /instance/update/chat
    method: PUT
    data_selector: ''
    params: {}
- name: merge_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: merge_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
- name: instance_info
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
- name: update_instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
- name: 获取实例列表
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: 获取实例详情
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: 添加实例
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: 更新实例
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: 删除实例
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: 扫描版本文件
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: 预览合并结果
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: 执行配置合并
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: 批量操作
  endpoint:
    path: /api/config/merge/batch
    method: POST
- name: 验证配置
  endpoint:
    path: /api/config/merge/validate
    method: GET
- name: service_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
    params: {}
- name: update_instance_weight
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
    params: {}
- name: delete_instance
  endpoint:
    path: /api/config/instance/del/chat
    method: DELETE
    data_selector: data
    params: {}
- name: scan
  endpoint:
    path: /merge/scan
    method: GET
- name: preview
  endpoint:
    path: /merge/preview
    method: GET
- name: execute
  endpoint:
    path: /merge/execute
    method: POST
- name: cleanup
  endpoint:
    path: /merge/cleanup
    method: DELETE
    params:
      deleteOriginals: 'true'
- name: merge_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: merge_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: instance_add_chat
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
- name: instance_info_chat
  endpoint:
    path: /api/config/instance/info/chat
    method: GET
    data_selector: data
- name: instance_update_chat
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
- name: instance_del_chat
  endpoint:
    path: /api/config/instance/del/chat
    method: DELETE
    data_selector: data
- name: merge_backup
  endpoint:
    path: /api/config/merge/backup
    method: POST
    data_selector: data
- name: merge_scan
  endpoint:
    path: /api/config/merge/scan
    method: GET
    data_selector: data
- name: merge_preview
  endpoint:
    path: /api/config/merge/preview
    method: GET
    data_selector: data
- name: merge_execute
  endpoint:
    path: /api/config/merge/execute
    method: POST
    data_selector: data
- name: merge_cleanup
  endpoint:
    path: /api/config/merge/cleanup
    method: DELETE
    data_selector: data
- name: 获取实例列表
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
- name: 获取实例详情
  endpoint:
    path: /api/config/instance/info/{serviceType}
    method: GET
- name: 添加实例
  endpoint:
    path: /api/config/instance/add/{serviceType}
    method: POST
- name: 更新实例
  endpoint:
    path: /api/config/instance/update/{serviceType}
    method: PUT
- name: 删除实例
  endpoint:
    path: /api/config/instance/del/{serviceType}
    method: DELETE
- name: 扫描版本文件
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: 预览合并结果
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: 执行配置合并
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: 批量操作
  endpoint:
    path: /api/config/merge/batch
    method: POST
- name: 验证配置
  endpoint:
    path: /api/config/merge/validate
    method: GET
- name: merge_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: merge_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: instance_add_chat
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
- name: instance_update_chat
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
- name: instance_del_chat
  endpoint:
    path: /api/config/instance/del/chat
    method: DELETE
    data_selector: data
- name: merge_backup
  endpoint:
    path: /api/config/merge/backup
    method: POST
    data_selector: data
- name: merge_scan
  endpoint:
    path: /api/config/merge/scan
    method: GET
    data_selector: data
- name: merge_preview
  endpoint:
    path: /api/config/merge/preview
    method: GET
    data_selector: data
- name: merge_execute
  endpoint:
    path: /api/config/merge/execute
    method: POST
    data_selector: data
- name: merge_cleanup
  endpoint:
    path: /api/config/merge/cleanup
    method: DELETE
    data_selector: data
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
- name: add_instance_chat
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
- name: update_instance_chat
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
- name: delete_instance_chat
  endpoint:
    path: /api/config/instance/del/chat
    method: DELETE
- name: backup_config
  endpoint:
    path: /api/config/merge/backup
    method: POST
- name: scan_config_files
  endpoint:
    path: /api/config/merge/scan
    method: GET
- name: preview_merge_result
  endpoint:
    path: /api/config/merge/preview
    method: GET
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
- name: cleanup_old_versions
  endpoint:
    path: /api/config/merge/cleanup
    method: DELETE
- name: load_balance
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: model.load-balance
    params: {}
- name: global_load_balance_config
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: model.load-balance
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: instances
    params: {}
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
    data_selector: instances
    params: {}
- name: config_statistics
  endpoint:
    path: /api/config/merge/statistics
    method: GET
    data_selector: data
    params: {}
- name: service_status
  endpoint:
    path: /api/config/merge/status
    method: GET
    data_selector: data
    params: {}
- name: add_instance
  endpoint:
    path: /api/config/instance/add/chat
    method: POST
    data_selector: data
    params: {}
- name: update_instance_weight
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: data
    params: {}
- name: remove_instance
  endpoint:
    path: /api/config/instance/del/chat
    method: DELETE
    data_selector: data
    params: {}
- name: backup_config
  endpoint:
    path: /api/config/merge/backup
    method: POST
    data_selector: data
    params: {}
- name: scan_config_files
  endpoint:
    path: /api/config/merge/scan
    method: GET
    data_selector: data
    params: {}
- name: preview_merge_results
  endpoint:
    path: /api/config/merge/preview
    method: GET
    data_selector: data
    params: {}
- name: execute_merge
  endpoint:
    path: /api/config/merge/execute
    method: POST
    data_selector: data
    params: {}
- name: cleanup_old_versions
  endpoint:
    path: /api/config/merge/cleanup
    method: DELETE
    data_selector: data
    params:
      deleteOriginals: 'true'
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
- name: chat
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: instance
    params: {}
- name: load_balance
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: load-balance
    params: {}
- name: 负载均衡指标
  endpoint:
    path: /actuator/metrics/jairouter.loadbalancer.requests
    method: GET
- name: 实例请求分布
  endpoint:
    path: /actuator/metrics/jairouter.instance.requests
    method: GET
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: instances
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
    data_selector: instances
- name: chat
  endpoint:
    path: /v1-openai/chat/completions
    method: GET
    data_selector: instances
    params: {}
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
    data_selector: instances
    params: {}
- name: load_balance_strategy
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: instance
    params: {}
- name: load_balance_metrics
  endpoint:
    path: /actuator/metrics/jairouter.loadbalancer.requests
    method: GET
    data_selector: metrics
    params: {}
- name: instance_requests
  endpoint:
    path: /actuator/metrics/jairouter.instance.requests
    method: GET
    data_selector: metrics
    params: {}
- name: active_connections
  endpoint:
    path: /actuator/metrics/jairouter.connections.active
    method: GET
    data_selector: metrics
    params: {}
- name: load_balancer_requests_total
  endpoint:
    path: /jairouter/loadbalancer_requests_total
    method: GET
    data_selector: requests_total
    params:
      service: chat
      strategy: round-robin
- name: instance_requests_total
  endpoint:
    path: /jairouter/instance_requests_total
    method: GET
    data_selector: requests_total
    params:
      service: chat
      instance: model-1
      status: success
- name: chat
  endpoint:
    path: /v1-openai/chat/completions
    method: GET
    data_selector: instances
    params: {}
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
    data_selector: instances
    params: {}
- name: chat_service
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: instance
    params: {}
- name: chat
  endpoint:
    path: /v1-openai/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
- name: instance_update
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: null
    params: {}
- name: load_balancer_requests
  endpoint:
    path: /actuator/metrics/jairouter.loadbalancer.requests
    method: GET
    data_selector: null
    params: {}
- name: instance_requests
  endpoint:
    path: /actuator/metrics/jairouter.instance.requests
    method: GET
    data_selector: null
    params: {}
- name: 服务
  endpoint:
    path: /services
    method: GET
- name: 实例健康状态
  endpoint:
    path: /实例健康状态
    method: GET
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: instances
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
    data_selector: instances
- name: chat
  endpoint:
    path: /v1-openai/chat/completions
    method: POST
    data_selector: instances
    params: {}
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: instances
    params: {}
- name: instance_update
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: null
    params: {}
- name: load_balancer_metrics
  endpoint:
    path: /actuator/metrics/jairouter.loadbalancer.requests
    method: GET
    data_selector: null
    params: {}
- name: instance_requests_metrics
  endpoint:
    path: /actuator/metrics/jairouter.instance.requests
    method: GET
    data_selector: null
    params: {}
- name: active_connections_metrics
  endpoint:
    path: /actuator/metrics/jairouter.connections.active
    method: GET
    data_selector: null
    params: {}
- name: primary-model
  endpoint:
    path: /api/config/instance/type/chat
    method: GET
- name: secondary-model
  endpoint:
    path: /actuator/metrics/jairouter.instance.requests
    method: GET
- name: backup-model
  endpoint:
    path: /actuator/metrics/jairouter.connections.active
    method: GET
- name: health-check
  endpoint:
    path: /actuator/health
    method: GET
- name: load_balancer_requests
  endpoint:
    path: /jairouter/loadbalancer_requests_total
    method: GET
    data_selector: requests_total
    params:
      service: chat
      strategy: round-robin
- name: instance_requests
  endpoint:
    path: /jairouter/instance_requests_total
    method: GET
    data_selector: requests_total
    params:
      service: chat
      instance: model-1
      status: success
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
- name: chat
  endpoint:
    path: /v1-openai/chat/completions
    method: POST
    data_selector: responses
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: embeddings
- name: session-model-1
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: instance
    params: {}
- name: session-model-2
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: instance
    params: {}
- name: session-model-3
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: instance
    params: {}
- name: gpu-model
  endpoint:
    path: http://gpu-server:8080
    method: GET
    data_selector: ''
    params: {}
- name: cpu-model
  endpoint:
    path: http://cpu-server:8080
    method: GET
    data_selector: ''
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: POST
- name: chat
  endpoint:
    path: /v1-openai/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
- name: session-model-1
  endpoint:
    path: /v1/chat/completions
    method: PUT
    data_selector: instance
    params: {}
- name: session-model-2
  endpoint:
    path: /v1/chat/completions
    method: PUT
    data_selector: instance
    params: {}
- name: session-model-3
  endpoint:
    path: /v1/chat/completions
    method: PUT
    data_selector: instance
    params: {}
- name: chat-1
  endpoint:
    path: http://chat-server-1:8080
    method: ''
    data_selector: ''
    params: {}
- name: chat-2
  endpoint:
    path: http://chat-server-2:8080
    method: ''
    data_selector: ''
    params: {}
- name: chat-3
  endpoint:
    path: http://chat-server-3:8080
    method: ''
    data_selector: ''
    params: {}
- name: chat
  endpoint:
    path: /v1-openai/chat/completions
    method: GET
    data_selector: instances
    params: {}
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
    data_selector: instances
    params: {}
- name: session-model-1
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: instance
    params: {}
- name: session-model-2
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: instance
    params: {}
- name: session-model-3
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: instance
    params: {}
- name: chat
  endpoint:
    path: /model/services/chat/rate-limit
    method: POST
    data_selector: services.chat.rateLimit
    params: {}
- name: chat
  endpoint:
    path: /v1-openai/chat/completions
    method: GET
    data_selector: instances
    params: {}
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
    data_selector: instances
    params: {}
- name: instance
  endpoint:
    path: /api/config/instance/update/chat
    method: PUT
    data_selector: instance
    params: {}
- name: chat
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: chat-1
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: chat-2
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: chat-3
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: chat
  endpoint:
    path: /services/chat
    method: GET
    data_selector: records
    params:
      rate-limit:
        enabled: true
        algorithm: token-bucket
        capacity: 100
        rate: 10
        scope: service
        client-ip-enable: true
- name: embedding
  endpoint:
    path: /services/embedding
    method: GET
    data_selector: records
    params:
      rate-limit:
        enabled: true
        algorithm: leaky-bucket
        capacity: 50
        rate: 5
        scope: service
        client-ip-enable: true
- name: tts
  endpoint:
    path: /services/tts
    method: GET
    data_selector: records
    params:
      rate-limit:
        enabled: true
        algorithm: sliding-window
        window-size: 60
        max-requests: 100
        scope: service
        client-ip-enable: true
- name: chat
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      enabled: true
      algorithm: token-bucket
      capacity: 100
      rate: 10
      scope: service
      client-ip-enable: true
- name: embedding
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      enabled: true
      algorithm: leaky-bucket
      capacity: 50
      rate: 5
      scope: service
      client-ip-enable: true
- name: tts
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      enabled: true
      algorithm: sliding-window
      window-size: 60
      max-requests: 100
      scope: service
      client-ip-enable: true
- name: chat
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      rate-limit:
        enabled: true
        algorithm: token-bucket
        capacity: 100
        rate: 10
        scope: service
        client-ip-enable: true
- name: embedding
  endpoint:
    path: /services/embedding
    method: GET
    data_selector: rateLimit
    params: {}
- name: chat
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      rate-limit:
        enabled: true
        algorithm: token-bucket
        capacity: 100
        rate: 10
        scope: service
        client-ip-enable: true
- name: embedding
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      rate-limit:
        enabled: true
        algorithm: leaky-bucket
        capacity: 50
        rate: 5
        scope: service
        client-ip-enable: true
- name: tts
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      rate-limit:
        enabled: true
        algorithm: sliding-window
        window-size: 60
        max-requests: 100
        scope: service
        client-ip-enable: true
- name: chat
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: rate-limit
    params: {}
- name: embedding
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: rate-limit
    params: {}
- name: tts
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: rate-limit
    params: {}
- name: chat
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: rate-limit
    params: {}
- name: embedding
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: rate-limit
    params: {}
- name: tts
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: rate-limit
    params: {}
- name: chat
  endpoint:
    path: /services/chat
    method: POST
    data_selector: rateLimit
    params: {}
- name: sensitive-api
  endpoint:
    path: /services/sensitive-api
    method: POST
    data_selector: rateLimit
    params: {}
- name: new-service
  endpoint:
    path: /services/new-service
    method: POST
    data_selector: rateLimit
    params: {}
- name: chat
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      enabled: true
      algorithm: token-bucket
      capacity: 100
      rate: 10
      scope: service
      client-ip-enable: true
- name: embedding
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      enabled: true
      algorithm: leaky-bucket
      capacity: 50
      leakRate: 5
      client-ip-enable: true
- name: tts
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      enabled: true
      algorithm: sliding-window
      window-size: 60
      max-requests: 100
      client-ip-enable: true
- name: chat
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: ''
    params: {}
- name: embedding
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: ''
    params: {}
- name: tts
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: ''
    params: {}
- name: client_ip_rate_limit
  endpoint:
    path: /rate-limit/client-ip
    method: POST
    data_selector: services.tts.rateLimit
    params: {}
- name: service_rate_limit
  endpoint:
    path: /rate-limit/services/chat
    method: POST
    data_selector: services.chat.rateLimit
    params: {}
- name: client_ip_rate_limit
  endpoint:
    path: /services/client-ip-rate-limit
    method: GET
    data_selector: ''
    params: {}
- name: service_rate_limit
  endpoint:
    path: /services/service-rate-limit
    method: GET
    data_selector: ''
    params: {}
- name: client_ip_rate_limit
  endpoint:
    path: /services/client-ip/rate-limit
    method: GET
    data_selector: services.tts.rateLimit
    params: {}
- name: service_warm_up
  endpoint:
    path: /services/chat/rate-limit
    method: GET
    data_selector: services.chat.rateLimit
    params: {}
- name: chat
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      enabled: true
      algorithm: token-bucket
      capacity: 100
      rate: 10
      scope: service
      client-ip-enable: true
- name: embedding
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      enabled: true
      algorithm: leaky-bucket
      capacity: 50
      rate: 5
      scope: service
      client-ip-enable: true
- name: tts
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      enabled: true
      algorithm: sliding-window
      window-size: 60
      max-requests: 100
      scope: service
      client-ip-enable: true
- name: chat
  endpoint:
    path: /services/chat
    method: GET
- name: chat
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: model.services.chat.rate-limit
    params: {}
- name: embedding
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: model.services.embedding.rate-limit
    params: {}
- name: tts
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: model.services.tts.rate-limit
    params: {}
- name: rate-limit
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: model
    params: {}
- name: client_ip_rate_limit
  endpoint:
    path: /actuator/metrics/jairouter.ratelimit.clients
    method: GET
- name: ip_limit_cleanup
  endpoint:
    path: /actuator/metrics/jairouter.ratelimit.cleanup
    method: GET
- name: chat
  endpoint:
    path: /services/chat
    method: GET
    data_selector: rateLimit
    params: {}
- name: model-1
  endpoint:
    path: /services/model-1
    method: GET
    data_selector: rateLimit
    params: {}
- name: instance_rate_limit
  endpoint:
    path: /model/services/chat/instances
    method: GET
    data_selector: instances
    params: {}
- name: chat
  endpoint:
    path: /services/chat
    method: GET
    data_selector: records
    params:
      enabled: true
      algorithm: token-bucket
      capacity: 100
      rate: 10
      scope: service
      client-ip-enable: true
- name: embedding
  endpoint:
    path: /services/embedding
    method: GET
    data_selector: records
    params:
      enabled: true
      algorithm: leaky-bucket
      capacity: 50
      rate: 5
      scope: service
      client-ip-enable: true
- name: tts
  endpoint:
    path: /services/tts
    method: GET
    data_selector: records
    params:
      enabled: true
      algorithm: sliding-window
      window-size: 60
      max-requests: 100
      scope: service
      client-ip-enable: true
- name: chat
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: model.services.chat.rate-limit
    params: {}
- name: embedding
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: model.services.embedding.rate-limit
    params: {}
- name: tts
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: model.services.tts.rate-limit
    params: {}
- name: chat
  endpoint:
    rate_limit:
      enabled: true
      algorithm: warm-up
      capacity: 100
      rate: 10
      warm-up-period: 300
      cold-factor: 3
      client-ip-enable: true
- name: sensitive-api
  endpoint:
    rate_limit:
      enabled: true
      algorithm: sliding-window
      window-size: 300
      max-requests: 50
      client-ip-enable: true
      client-ip:
        window-size: 60
        max-requests: 10
- name: new-service
  endpoint:
    rate_limit:
      enabled: true
      algorithm: warm-up
      capacity: 1000
      rate: 100
      warm-up-period: 600
      cold-factor: 5
- name: chat
  endpoint:
    rate_limit:
      enabled: true
      algorithm: token-bucket
      capacity: 5000
      rate: 500
      client_ip_enable: true
      client_ip:
        capacity: 50
        rate: 5
- name: sensitive-api
  endpoint:
    rate_limit:
      enabled: true
      algorithm: sliding-window
      window_size: 300
      max_requests: 50
      client_ip_enable: true
      client_ip:
        window_size: 60
        max_requests: 10
- name: new-service
  endpoint:
    rate_limit:
      enabled: true
      algorithm: warm-up
      capacity: 1000
      rate: 100
      warm_up_period: 600
      cold_factor: 5
- name: chat
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      rate-limit:
        enabled: true
        algorithm: token-bucket
        capacity: 100
        rate: 10
        scope: service
        client-ip-enable: true
- name: embedding
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      rate-limit:
        enabled: true
        algorithm: leaky-bucket
        capacity: 50
        rate: 5
        scope: service
        client-ip-enable: true
- name: tts
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      rate-limit:
        enabled: true
        algorithm: sliding-window
        window-size: 60
        max-requests: 100
        scope: service
        client-ip-enable: true
- name: rate-limit
  endpoint:
    params:
      max_clients: 5000
- name: services
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: services
- name: chat
  endpoint:
    path: /services/data/chat
    method: GET
    data_selector: records
- name: chat
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      enabled: true
      algorithm: token-bucket
      capacity: 100
      rate: 10
      scope: service
      client-ip-enable: true
- name: embedding
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      enabled: true
      algorithm: leaky-bucket
      capacity: 50
      rate: 5
      scope: service
      client-ip-enable: true
- name: tts
  endpoint:
    path: config/base/model-services-base.yml
    method: ''
    data_selector: ''
    params:
      enabled: true
      algorithm: sliding-window
      window-size: 60
      max-requests: 100
      scope: service
      client-ip-enable: true
- name: chat
  endpoint:
    path: /services/chat
    method: GET
    data_selector: rateLimit
    params: {}
- name: sensitive-api
  endpoint:
    path: /services/sensitive-api
    method: GET
    data_selector: rateLimit
    params: {}
- name: new-service
  endpoint:
    path: /services/new-service
    method: GET
    data_selector: rateLimit
    params: {}
- name: chat
  endpoint:
    path: config/base/model-services-base.yml
    method: GET
    data_selector: ''
    params:
      enabled: true
      algorithm: token-bucket
      capacity: 100
      rate: 10
      scope: service
      client-ip-enable: true
- name: embedding
  endpoint:
    path: config/base/model-services-base.yml
    method: GET
    data_selector: ''
    params:
      enabled: true
      algorithm: leaky-bucket
      capacity: 50
      rate: 5
      scope: service
      client-ip-enable: true
- name: tts
  endpoint:
    path: config/base/model-services-base.yml
    method: GET
    data_selector: ''
    params:
      enabled: true
      algorithm: sliding-window
      window-size: 60
      max-requests: 100
      scope: service
      client-ip-enable: true
- name: chat
  endpoint:
    path: config/base/model-services-base.yml
    method: GET
    data_selector: model.services.chat.rate-limit
    params: {}
- name: embedding
  endpoint:
    path: config/base/model-services-base.yml
    method: GET
    data_selector: model.services.embedding.rate-limit
    params: {}
- name: tts
  endpoint:
    path: config/base/model-services-base.yml
    method: GET
    data_selector: model.services.tts.rate-limit
    params: {}
- name: rate_limit
  endpoint:
    path: /actuator/metrics/jairouter.ratelimit.clients
    method: GET
    data_selector: clients
    params: {}
- name: chat
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: ''
    params:
      enabled: true
      algorithm: token-bucket
      capacity: 100
      rate: 10
      scope: service
      client-ip-enable: true
- name: embedding
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: ''
    params:
      enabled: true
      algorithm: leaky-bucket
      capacity: 50
      rate: 5
      scope: service
      client-ip-enable: true
- name: tts
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: ''
    params:
      enabled: true
      algorithm: sliding-window
      window-size: 60
      max-requests: 100
      scope: service
      client-ip-enable: true
- name: chat
  endpoint:
    path: /services/chat
    method: POST
    data_selector: rateLimit
    params:
      enabled: true
      algorithm: token-bucket
      capacity: 100
      rate: 10
      scope: service
      client-ip-enable: true
- name: embedding
  endpoint:
    path: /services/embedding
    method: POST
    data_selector: rateLimit
    params:
      enabled: true
      algorithm: leaky-bucket
      capacity: 50
      leakRate: 5
      client-ip-enable: true
- name: tts
  endpoint:
    path: /services/tts
    method: POST
    data_selector: rateLimit
    params:
      enabled: true
      algorithm: sliding-window
      window-size: 60
      max-requests: 100
      client-ip-enable: true
- name: chat
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      rate-limit:
        enabled: true
        algorithm: token-bucket
        capacity: 100
        rate: 10
        scope: service
        client-ip-enable: true
- name: embedding
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      rate-limit:
        enabled: true
        algorithm: leaky-bucket
        capacity: 50
        leakRate: 5
        scope: service
        client-ip-enable: true
- name: tts
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      rate-limit:
        enabled: true
        algorithm: sliding-window
        window-size: 60
        max-requests: 100
        scope: service
        client-ip-enable: true
- name: chat
  endpoint:
    path: /services/chat/rate-limit
    method: GET
    data_selector: services.chat.rateLimit
    params: {}
- name: sensitive-api
  endpoint:
    path: /services/sensitive-api/rate-limit
    method: GET
    data_selector: services.sensitive-api.rateLimit
    params: {}
- name: new-service
  endpoint:
    path: /services/new-service/rate-limit
    method: GET
    data_selector: services.new-service.rateLimit
    params: {}
- name: chat
  rate_limit:
    enabled: true
    algorithm: token-bucket
    capacity: 5000
    rate: 500
    clientIpEnable: true
    client-ip:
      capacity: 50
      rate: 5
- name: image-generation
  rate_limit:
    algorithm: leaky-bucket
    capacity: 100
    rate: 10
    clientIpEnable: true
    client-ip:
      capacity: 5
      rate: 1
- name: chat
  endpoint:
    path: config/base/model-services-base.yml
    method: POST
    data_selector: rate-limit
    params:
      enabled: true
      algorithm: token-bucket
      capacity: 100
      rate: 10
      scope: service
      client-ip-enable: true
- name: embedding
  endpoint:
    path: config/base/model-services-base.yml
    method: POST
    data_selector: rate-limit
    params:
      enabled: true
      algorithm: leaky-bucket
      capacity: 50
      rate: 5
      scope: service
      client-ip-enable: true
- name: tts
  endpoint:
    path: config/base/model-services-base.yml
    method: POST
    data_selector: rate-limit
    params:
      enabled: true
      algorithm: sliding-window
      window-size: 60
      max-requests: 100
      scope: service
      client-ip-enable: true
- name: chat
  endpoint:
    path: /services/data/v1.0/chat
    method: POST
    data_selector: response
    params:
      rate-limit:
        enabled: true
        algorithm: token-bucket
        capacity: 100
        rate: 10
        scope: service
        client-ip-enable: true
- name: embedding
  endpoint:
    path: /services/data/v1.0/embedding
    method: POST
    data_selector: response
    params:
      rate-limit:
        enabled: true
        algorithm: leaky-bucket
        capacity: 50
        rate: 5
        scope: service
        client-ip-enable: true
- name: tts
  endpoint:
    path: /services/data/v1.0/tts
    method: POST
    data_selector: response
    params:
      rate-limit:
        enabled: true
        algorithm: sliding-window
        window-size: 60
        max-requests: 100
        scope: service
        client-ip-enable: true
- name: chat
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      rate-limit:
        enabled: true
        algorithm: token-bucket
        capacity: 100
        rate: 10
        scope: service
        client-ip-enable: true
- name: embedding
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      rate-limit:
        enabled: true
        algorithm: leaky-bucket
        capacity: 50
        rate: 5
        scope: service
        client-ip-enable: true
- name: tts
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      rate-limit:
        enabled: true
        algorithm: sliding-window
        window-size: 60
        max-requests: 100
        scope: service
        client-ip-enable: true
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: records
- name: embedding
  endpoint:
    path: /v1/embedding
    method: GET
    data_selector: records
- name: chat
  rateLimit:
    enabled: true
    algorithm: token-bucket
    capacity: 1000
    rate: 100
    clientIpEnable: true
    client-ip:
      capacity: 50
      rate: 5
- name: sensitive-api
  rateLimit:
    enabled: true
    algorithm: sliding-window
    window-size: 300
    max-requests: 50
    clientIpEnable: true
    client-ip:
      window-size: 60
      max-requests: 10
- name: new-service
  rateLimit:
    enabled: true
    algorithm: warm-up
    capacity: 1000
    rate: 100
    warm-up-period: 600
    cold-factor: 5
- name: circuit-breaker
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.state
    method: GET
    data_selector: metrics
    params: {}
- name: circuit-breaker-calls
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.calls
    method: GET
    data_selector: metrics
    params: {}
- name: circuit-breaker-failures
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.failures
    method: GET
    data_selector: metrics
    params: {}
- name: chat
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: services.chat.rate-limit
    params: {}
- name: embedding
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: services.embedding.rate-limit
    params: {}
- name: tts
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: services.tts.rate-limit
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: ''
    params: {}
- name: embedding
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: records
    params: {}
- name: embedding
  endpoint:
    path: /v1/embedding/completions
    method: GET
    data_selector: records
    params: {}
- name: client-ip
  endpoint:
    path: /actuator/metrics/jairouter.ratelimit.clients
    method: GET
- name: cleanup
  endpoint:
    path: /actuator/metrics/jairouter.ratelimit.cleanup
    method: GET
- name: circuit-breaker
  endpoint:
    path: /config/base/model-services-base.yml
    method: GET
    data_selector: circuit-breaker
    params: {}
- name: circuitbreaker_state
  endpoint:
    path: /metrics
    method: GET
    data_selector: jairouter_circuitbreaker_state
    params: {}
- name: circuitbreaker_calls_total
  endpoint:
    path: /metrics
    method: GET
    data_selector: jairouter_circuitbreaker_calls_total
    params: {}
- name: circuitbreaker_failure_rate
  endpoint:
    path: /metrics
    method: GET
    data_selector: rate(jairouter_circuitbreaker_calls_total{result="failure"}[5m])
      / rate(jairouter_circuitbreaker_calls_total[5m])
    params: {}
- name: circuitbreaker_opened_total
  endpoint:
    path: /metrics
    method: GET
    data_selector: jairouter_circuitbreaker_opened_total
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: records
- name: embedding
  endpoint:
    path: /v1/embedding/completions
    method: GET
    data_selector: records
- name: 熔断器状态
  endpoint:
    path: /jairouter_circuitbreaker_state
    method: GET
    data_selector: targets
- name: 熔断器失败率
  endpoint:
    path: /circuitbreaker_calls_total
    method: GET
    data_selector: targets
- name: 熔断器开启次数
  endpoint:
    path: /circuitbreaker_opened_total
    method: GET
    data_selector: targets
- name: circuit-breaker
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker
    method: GET
    data_selector: state
- name: circuit-breaker
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.state
    method: GET
    data_selector: state
    params: {}
- name: circuit-breaker-calls
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.calls
    method: GET
    data_selector: calls
    params: {}
- name: circuit-breaker-failures
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.failures
    method: GET
    data_selector: failures
    params: {}
- name: circuit_breaker_state
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data
    params: {}
- name: circuit_breaker_calls_total
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data
    params: {}
- name: circuit_breaker_opened_total
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: circuit-breaker
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.state
    method: GET
    data_selector: state
- name: circuit-breaker-calls
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.calls
    method: GET
    data_selector: calls
- name: circuit-breaker-failures
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.failures
    method: GET
    data_selector: failures
- name: circuit-breaker-recovery
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.recovery
    method: GET
    data_selector: recovery
- name: circuit_breaker_state
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data.result
    params:
      expr: jairouter_circuitbreaker_state
- name: circuit_breaker_failure_rate
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data.result
    params:
      expr: rate(jairouter_circuitbreaker_calls_total{result="failure"}[5m]) / rate(jairouter_circuitbreaker_calls_total[5m])
- name: circuit_breaker_opened_count
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data.result
    params:
      expr: increase(jairouter_circuitbreaker_opened_total[1h])
- name: circuit_breaker_state
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data.result
    params:
      query: jairouter_circuitbreaker_state{service="chat",instance="model-1"}
- name: circuit_breaker_calls_total
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data.result
    params:
      query: jairouter_circuitbreaker_calls_total{service="chat",instance="model-1",result="success"}
- name: circuit_breaker_failure_rate
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data.result
    params:
      query: rate(jairouter_circuitbreaker_calls_total{result="failure"}[5m]) / rate(jairouter_circuitbreaker_calls_total[5m])
- name: circuit_breaker_opened_total
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data.result
    params:
      query: jairouter_circuitbreaker_opened_total{service="chat",instance="model-1"}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embedding
    method: GET
- name: 熔断器状态
  endpoint:
    path: jairouter_circuitbreaker_state
    method: GET
    data_selector: ''
    params: {}
- name: 熔断器失败率
  endpoint:
    path: rate(jairouter_circuitbreaker_calls_total{result="failure"}[5m]) / rate(jairouter_circuitbreaker_calls_total[5m])
    method: GET
    data_selector: ''
    params: {}
- name: 熔断器开启次数
  endpoint:
    path: increase(jairouter_circuitbreaker_opened_total[1h])
    method: GET
    data_selector: ''
    params: {}
- name: circuit_breaker_state
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.state
    method: GET
    data_selector: state
- name: circuit_breaker_calls
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.calls
    method: GET
    data_selector: calls
- name: circuit_breaker_opened
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.opened
    method: GET
    data_selector: opened
- name: circuit-breaker
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.state
    method: GET
    data_selector: state
- name: circuit_breaker_state
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.state
    method: GET
- name: circuit_breaker_calls
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.calls
    method: GET
- name: circuit_breaker_failures
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.failures
    method: GET
- name: circuit_breaker_test
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: circuit_breaker_state
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data.result
    params:
      query: jairouter_circuitbreaker_state
- name: circuit_breaker_calls_total
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data.result
    params:
      query: jairouter_circuitbreaker_calls_total
- name: circuit_breaker_opened_total
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data.result
    params:
      query: jairouter_circuitbreaker_opened_total
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: records
- name: embedding
  endpoint:
    path: /v1/embedding/completions
    method: GET
    data_selector: records
- name: circuit-breaker
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: ''
- name: 熔断器状态
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.state
    method: GET
    data_selector: null
    params: {}
- name: 熔断器调用统计
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.calls
    method: GET
    data_selector: null
    params: {}
- name: 熔断器失败统计
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.failures
    method: GET
    data_selector: null
    params: {}
- name: circuit_breaker_state
  endpoint:
    path: /jairouter_circuitbreaker_state
    method: GET
    data_selector: records
- name: circuit_breaker_calls_total
  endpoint:
    path: /jairouter_circuitbreaker_calls_total
    method: GET
    data_selector: records
- name: circuit_breaker_opened_total
  endpoint:
    path: /jairouter_circuitbreaker_opened_total
    method: GET
    data_selector: records
- name: store
  endpoint:
    path: /store
    method: GET
    data_selector: configurations
    params: {}
- name: config
  endpoint:
    path: /var/lib/jairouter/config/
    method: GET
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embedding/completions
    method: GET
- name: circuit_breaker_state
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.state
    method: GET
    data_selector: state
    params: {}
- name: circuit_breaker_calls
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.calls
    method: GET
    data_selector: calls
    params: {}
- name: API Key
  endpoint:
    path: /api-key
    method: POST
    data_selector: keys
    params: {}
- name: prod-admin
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: prod-service
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embedding/completions
    method: GET
- name: 熔断器状态
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.state
    method: GET
    data_selector: ''
- name: 熔断器调用统计
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.calls
    method: GET
    data_selector: ''
- name: 熔断器失败统计
  endpoint:
    path: /actuator/metrics/jairouter.circuitbreaker.failures
    method: GET
    data_selector: ''
- name: login
  endpoint:
    path: /api/auth/jwt/login
    method: POST
    data_selector: data.token
- name: jwt-token
  endpoint:
    path: /auth/login
    method: POST
    data_selector: access_token
- name: refresh-token
  endpoint:
    path: /auth/refresh
    method: POST
    data_selector: refresh_token
- name: logout
  endpoint:
    path: /auth/logout
    method: POST
- name: revoke-all
  endpoint:
    path: /auth/revoke-all
    method: POST
- name: store
  endpoint:
    path: /var/lib/jairouter/config/
    method: GET
    data_selector: ''
    params: {}
- name: sanitization
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: messages
    params: {}
- name: request_sanitization
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: messages
    params: {}
- name: prod-admin
  endpoint:
    params:
      permissions:
      - admin
      - read
      - write
      - delete
- name: prod-service
  endpoint:
    params:
      permissions:
      - read
      - write
- name: sanitization_request
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: model
    params: {}
- name: sanitization_request
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: messages
    params: {}
- name: login
  endpoint:
    path: /api/auth/jwt/login
    method: POST
    data_selector: data.token
- name: whitelist-users
  endpoint:
    path: /admin/security/whitelist/users
    method: POST
- name: whitelist-ips
  endpoint:
    path: /admin/security/whitelist/ips
    method: POST
- name: jwt-token
  endpoint:
    path: /auth/login
    method: POST
    data_selector: access_token
    params: {}
- name: refresh-token
  endpoint:
    path: /auth/refresh
    method: POST
    data_selector: access_token
    params: {}
- name: logout
  endpoint:
    path: /auth/logout
    method: POST
    data_selector: 'null'
    params: {}
- name: revoke-all
  endpoint:
    path: /auth/revoke-all
    method: POST
    data_selector: 'null'
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: model
    params: {}
- name: sanitization
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: model
    params: {}
- name: whitelist_users
  endpoint:
    path: /admin/security/whitelist/users
    method: POST
    data_selector: user_id
    params: {}
- name: whitelist_ips
  endpoint:
    path: /admin/security/whitelist/ips
    method: POST
    data_selector: ip
    params: {}
- name: sanitization
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: messages
- name: whitelist-users
  endpoint:
    path: /admin/security/whitelist/users
    method: POST
- name: whitelist-ips
  endpoint:
    path: /admin/security/whitelist/ips
    method: POST
- name: sanitization_request
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: model
    params: {}
- name: whitelist_users
  endpoint:
    path: /admin/security/whitelist/users
    method: POST
- name: whitelist_ips
  endpoint:
    path: /admin/security/whitelist/ips
    method: POST
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: security_status
  endpoint:
    path: /admin/security/status
    method: GET
    data_selector: ''
- name: authentication_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: ''
- name: sanitization_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: ''
- name: reload_config
  endpoint:
    path: /admin/config/reload
    method: POST
    data_selector: ''
- name: clear_auth_cache
  endpoint:
    path: /admin/security/cache/authentication
    method: DELETE
    data_selector: ''
- name: sanitization_metrics
  endpoint:
    path: /sanitization/metrics
    method: GET
- name: logging
  endpoint:
    path: /admin/logging/org.unreal.modelrouter.security
    method: POST
    data_selector: null
    params: {}
- name: logs
  endpoint:
    path: /admin/logs/security-audit.log
    method: GET
    data_selector: null
    params: {}
- name: clear_auth_cache
  endpoint:
    path: /admin/security/cache/authentication
    method: DELETE
    data_selector: null
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: id
    params: {}
- name: text_embedding
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: object
    params: {}
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
    data_selector: id
    params: {}
- name: text_to_speech
  endpoint:
    path: /v1/audio/speech
    method: POST
    data_selector: data
    params: {}
- name: speech_to_text
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
    data_selector: text
    params: {}
- name: image_generation
  endpoint:
    path: /v1/images/generations
    method: POST
    data_selector: created
    params: {}
- name: image_editing
  endpoint:
    path: /v1/images/edits
    method: POST
    data_selector: created
    params: {}
- name: authentication_performance
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: authentication_duration
    params: {}
- name: sanitization_performance
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: sanitization_duration
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: text_embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
    params: {}
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
    data_selector: data
    params: {}
- name: audio_speech
  endpoint:
    path: /v1/audio/speech
    method: POST
    data_selector: data
    params: {}
- name: audio_transcriptions
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
    data_selector: data
    params: {}
- name: image_generations
  endpoint:
    path: /v1/images/generations
    method: POST
    data_selector: data
    params: {}
- name: image_edits
  endpoint:
    path: /v1/images/edits
    method: POST
    data_selector: data
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: security_status
  endpoint:
    path: /admin/security/status
    method: GET
    data_selector: ''
- name: authentication_performance_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: ''
- name: sanitization_performance_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: ''
- name: reload_configuration
  endpoint:
    path: /admin/config/reload
    method: POST
    data_selector: ''
- name: clear_authentication_cache
  endpoint:
    path: /admin/security/cache/authentication
    method: DELETE
    data_selector: ''
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
    params: {}
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
    data_selector: results
    params: {}
- name: audio_speech
  endpoint:
    path: /v1/audio/speech
    method: POST
    data_selector: audio
    params: {}
- name: audio_transcriptions
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
    data_selector: text
    params: {}
- name: image_generations
  endpoint:
    path: /v1/images/generations
    method: POST
    data_selector: data
    params: {}
- name: image_edits
  endpoint:
    path: /v1/images/edits
    method: POST
    data_selector: data
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: POST
- name: instance
  endpoint:
    path: /api/config/instance
    method: GET
    data_selector: data
- name: monitoring_config
  endpoint:
    path: /api/monitoring/config
    method: GET
    data_selector: enabled
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
    params: {}
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
    data_selector: results
    params: {}
- name: audio_speech
  endpoint:
    path: /v1/audio/speech
    method: POST
    data_selector: audio
    params: {}
- name: audio_transcriptions
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
    data_selector: text
    params: {}
- name: image_generations
  endpoint:
    path: /v1/images/generations
    method: POST
    data_selector: data
    params: {}
- name: image_edits
  endpoint:
    path: /v1/images/edits
    method: POST
    data_selector: data
    params: {}
- name: service_type
  endpoint:
    path: /config/type
    method: GET
- name: service_instance
  endpoint:
    path: /config/instance
    method: GET
- name: monitoring
  endpoint:
    path: /monitoring
    method: GET
- name: config
  endpoint:
    path: /api/monitoring/config
    method: GET
    data_selector: enabled
    params: {}
- name: health
  endpoint:
    path: /api/monitoring/health
    method: GET
    data_selector: status
    params: {}
- name: overview
  endpoint:
    path: /api/monitoring/overview
    method: GET
    data_selector: enabled
    params: {}
- name: degradation_status
  endpoint:
    path: /api/monitoring/degradation/status
    method: GET
    data_selector: level
    params: {}
- name: cache_stats
  endpoint:
    path: /api/monitoring/cache/stats
    method: GET
    data_selector: currentSize
    params: {}
- name: circuit_breaker_stats
  endpoint:
    path: /api/monitoring/circuit-breaker/stats
    method: GET
    data_selector: state
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: text_embedding
  endpoint:
    path: /v1/embeddings
    method: POST
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
- name: text_to_speech
  endpoint:
    path: /v1/audio/speech
    method: POST
- name: speech_to_text
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
- name: image_generation
  endpoint:
    path: /v1/images/generations
    method: POST
- name: image_editing
  endpoint:
    path: /v1/images/edits
    method: POST
- name: service_type
  endpoint:
    path: /api/config/type
    method: GET
    data_selector: data
- name: service_instance
  endpoint:
    path: /api/config/instance
    method: GET
    data_selector: data
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
    params: {}
- name: monitoring_config
  endpoint:
    path: /api/monitoring/config
    method: GET
    data_selector: data
- name: monitoring_overview
  endpoint:
    path: /api/monitoring/overview
    method: GET
    data_selector: data
- name: monitoring_health
  endpoint:
    path: /api/monitoring/health
    method: GET
    data_selector: data
- name: error_stats
  endpoint:
    path: /api/monitoring/errors/stats
    method: GET
    data_selector: data
- name: degradation_status
  endpoint:
    path: /api/monitoring/degradation/status
    method: GET
    data_selector: data
- name: cache_stats
  endpoint:
    path: /api/monitoring/cache/stats
    method: GET
    data_selector: data
- name: circuit_breaker_stats
  endpoint:
    path: /api/monitoring/circuit-breaker/stats
    method: GET
    data_selector: data
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: text_embedding
  endpoint:
    path: /v1/embeddings
    method: POST
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
- name: text_to_speech
  endpoint:
    path: /v1/audio/speech
    method: POST
- name: audio_transcription
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
- name: image_generation
  endpoint:
    path: /v1/images/generations
    method: POST
- name: image_edit
  endpoint:
    path: /v1/images/edits
    method: POST
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: text_embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: response
- name: re_rank
  endpoint:
    path: /v1/rerank
    method: POST
    data_selector: response
- name: text_to_speech
  endpoint:
    path: /v1/audio/speech
    method: POST
    data_selector: response
- name: speech_to_text
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
    data_selector: response
- name: image_generations
  endpoint:
    path: /v1/images/generations
    method: POST
    data_selector: response
- name: image_edits
  endpoint:
    path: /v1/images/edits
    method: POST
    data_selector: response
- name: service_types
  endpoint:
    path: /config/type
    method: GET
    data_selector: data
- name: service_instances
  endpoint:
    path: /config/instance
    method: GET
    data_selector: data
- name: monitoring
  endpoint:
    path: /monitoring
    method: GET
    data_selector: data
- name: models
  endpoint:
    path: /models
    method: GET
    data_selector: data
- name: config_version
  endpoint:
    path: /config/version
    method: GET
    data_selector: data
- name: instance
  endpoint:
    path: /api/config/instance/type/{serviceType}
    method: GET
    data_selector: data
- name: monitoring
  endpoint:
    path: /api/monitoring/config
    method: GET
    data_selector: enabled
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: text_embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: response
    params: {}
- name: text_to_speech
  endpoint:
    path: /v1/audio/speech
    method: POST
    data_selector: response
    params: {}
- name: speech_to_text
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
    data_selector: response
    params: {}
- name: image_generation
  endpoint:
    path: /v1/images/generations
    method: POST
    data_selector: response
    params: {}
- name: image_editing
  endpoint:
    path: /v1/images/edits
    method: POST
    data_selector: response
    params: {}
- name: service_type_management
  endpoint:
    path: /api/config/type
    method: GET
- name: service_instance_management
  endpoint:
    path: /api/config/instance
    method: GET
- name: monitoring_management
  endpoint:
    path: /api/monitoring
    method: GET
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: text_embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
    params: {}
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
    data_selector: data
    params: {}
- name: audio_speech
  endpoint:
    path: /v1/audio/speech
    method: POST
    data_selector: data
    params: {}
- name: audio_transcriptions
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
    data_selector: data
    params: {}
- name: image_generations
  endpoint:
    path: /v1/images/generations
    method: POST
    data_selector: data
    params: {}
- name: image_edits
  endpoint:
    path: /v1/images/edits
    method: POST
    data_selector: data
    params: {}
- name: config
  endpoint:
    path: /api/monitoring/config
    method: GET
    data_selector: enabled
    params: {}
- name: health
  endpoint:
    path: /api/monitoring/health
    method: GET
    data_selector: status
    params: {}
- name: overview
  endpoint:
    path: /api/monitoring/overview
    method: GET
    data_selector: enabled
    params: {}
- name: errors_stats
  endpoint:
    path: /api/monitoring/errors/stats
    method: GET
    data_selector: ''
    params: {}
- name: degradation_status
  endpoint:
    path: /api/monitoring/degradation/status
    method: GET
    data_selector: ''
    params: {}
- name: cache_stats
  endpoint:
    path: /api/monitoring/cache/stats
    method: GET
    data_selector: ''
    params: {}
- name: circuit_breaker_stats
  endpoint:
    path: /api/monitoring/circuit-breaker/stats
    method: GET
    data_selector: ''
    params: {}
- name: service_type_management
  endpoint:
    path: /api/config/type
    method: GET
- name: service_instance_management
  endpoint:
    path: /api/config/instance
    method: GET
- name: monitoring_management
  endpoint:
    path: /api/monitoring
    method: GET
- name: 生产镜像
  endpoint:
    path: latest
    method: GET
- name: 开发镜像
  endpoint:
    path: dev
    method: GET
- name: 中国镜像
  endpoint:
    path: china
    method: GET
- name: config
  endpoint:
    path: /api/monitoring/config
    method: GET
    data_selector: enabled
    params: {}
- name: health
  endpoint:
    path: /api/monitoring/health
    method: GET
    data_selector: status
    params: {}
- name: overview
  endpoint:
    path: /api/monitoring/overview
    method: GET
    data_selector: enabled
    params: {}
- name: errors_stats
  endpoint:
    path: /api/monitoring/errors/stats
    method: GET
    data_selector: success
    params: {}
- name: degradation_status
  endpoint:
    path: /api/monitoring/degradation/status
    method: GET
    data_selector: level
    params: {}
- name: cache_stats
  endpoint:
    path: /api/monitoring/cache/stats
    method: GET
    data_selector: currentSize
    params: {}
- name: circuit_breaker_stats
  endpoint:
    path: /api/monitoring/circuit-breaker/stats
    method: GET
    data_selector: state
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: response
    params: {}
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
    data_selector: response
    params: {}
- name: speech
  endpoint:
    path: /v1/audio/speech
    method: POST
    data_selector: response
    params: {}
- name: transcriptions
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
    data_selector: response
    params: {}
- name: image_generations
  endpoint:
    path: /v1/images/generations
    method: POST
    data_selector: response
    params: {}
- name: image_edits
  endpoint:
    path: /v1/images/edits
    method: POST
    data_selector: response
    params: {}
- name: 生产镜像
  endpoint:
    path: latest
    method: GET
- name: 开发镜像
  endpoint:
    path: dev
    method: GET
- name: 中国镜像
  endpoint:
    path: china
    method: GET
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
- name: text_embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
    data_selector: data
- name: audio_speech
  endpoint:
    path: /v1/audio/speech
    method: POST
    data_selector: data
- name: audio_transcriptions
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
    data_selector: data
- name: image_generations
  endpoint:
    path: /v1/images/generations
    method: POST
    data_selector: data
- name: image_edits
  endpoint:
    path: /v1/images/edits
    method: POST
    data_selector: data
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: text_embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
- name: text_to_speech
  endpoint:
    path: /v1/audio/speech
    method: POST
- name: speech_to_text
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
- name: image_generation
  endpoint:
    path: /v1/images/generations
    method: POST
- name: image_editing
  endpoint:
    path: /v1/images/edits
    method: POST
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: 生产镜像
  endpoint:
    path: latest
    method: GET
    data_selector: 镜像信息
    params: {}
- name: 开发镜像
  endpoint:
    path: dev
    method: GET
    data_selector: 镜像信息
    params: {}
- name: 中国镜像
  endpoint:
    path: china
    method: GET
    data_selector: 镜像信息
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: records
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: ''
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- limits:
    cpus: '2.0'
    memory: 2G
  reservations:
    cpus: '1.0'
    memory: 1G
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter-network
  endpoint:
    path: jairouter-network
    method: GET
    data_selector: networks
    params: {}
- name: 桥接网络
  endpoint:
    path: /networks/jairouter-network
    method: GET
- name: 主机网络
  endpoint:
    path: /network_mode/host
    method: GET
- name: 自定义网络
  endpoint:
    path: /networks/custom-network
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: logs
  endpoint:
    path: /app/logs/jairouter.log
    method: GET
    data_selector: logs
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: structured_logging
  endpoint:
    path: /structured
    method: POST
    data_selector: structured
    params: {}
- name: container_stats
  endpoint:
    path: docker/stats
    method: GET
- name: container_info
  endpoint:
    path: docker/inspect
    method: GET
- name: image_history
  endpoint:
    path: docker/history
    method: GET
- name: healthcheck
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: structured_logging
  endpoint:
    path: /app/logs/jairouter.log
    method: GET
    data_selector: logs
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
- name: jairouter
  endpoint:
    path: /app/logs/jairouter.log
    method: GET
    data_selector: records
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: logging
  endpoint:
    path: /app/logs/jairouter.log
    method: GET
    data_selector: structured
    params: {}
- name: services
  endpoint:
    path: /services/data/vXX.X/sobjects/jairouter
    method: GET
    data_selector: resources
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: structured_logs
  endpoint:
    path: /structured
    method: GET
    data_selector: logs
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: structured_logs
  endpoint:
    path: /app/logs/jairouter.log
    method: GET
    data_selector: logs
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /app/logs/jairouter.log
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: health
  endpoint:
    path: /actuator/health
    method: GET
- name: logging
  endpoint:
    path: /app/logs/jairouter.log
    method: GET
    data_selector: logs
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health_status
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: ''
    params: {}
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: jairouter-hpa
  endpoint:
    path: /jairouter/hpa
    method: POST
    data_selector: spec
    params:
      minReplicas: 3
      maxReplicas: 10
      metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 70
      - type: Resource
        resource:
          name: memory
          target:
            type: Utilization
            averageUtilization: 80
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: ConfigMap
  endpoint:
    path: /configmap
    method: POST
    data_selector: data
    params: {}
- name: Secret
  endpoint:
    path: /secret
    method: POST
    data_selector: data
    params: {}
- name: PVC
  endpoint:
    path: /pvc
    method: POST
    data_selector: data
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: logging
  endpoint:
    path: /app/logs/jairouter.log
    method: GET
    data_selector: logs
    params: {}
- name: jairouter-service
  endpoint:
    path: /api/v1/jairouter-service
    method: GET
    data_selector: service
- name: jairouter-nodeport
  endpoint:
    path: /api/v1/jairouter-nodeport
    method: GET
    data_selector: nodeport
- name: jairouter-ingress
  endpoint:
    path: /api/v1/jairouter-ingress
    method: GET
    data_selector: ingress
- name: jairouter-hpa
  endpoint:
    path: /api/v1/jairouter-hpa
    method: GET
    data_selector: hpa
- name: VerticalPodAutoscaler
  endpoint:
    path: /vpa.yaml
    method: POST
    data_selector: spec
    params: {}
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: jairouter-service
  endpoint:
    path: /api/v1/namespaces/jairouter/services/jairouter-service
    method: GET
- name: jairouter-nodeport
  endpoint:
    path: /api/v1/namespaces/jairouter/services/jairouter-nodeport
    method: GET
- name: jairouter-ingress
  endpoint:
    path: /networking.k8s.io/v1/namespaces/jairouter/ingresses/jairouter-ingress
    method: GET
- name: jairouter-hpa
  endpoint:
    path: /autoscaling/v2/namespaces/jairouter/horizontalpodautoscalers/jairouter-hpa
    method: GET
- name: jairouter-vpa
  endpoint:
    path: /autoscaling.k8s.io/v1/namespaces/jairouter/verticalpodautoscalers/jairouter-vpa
    method: GET
- name: jairouter-monitor
  endpoint:
    path: /monitoring.coreos.com/v1/namespaces/jairouter/servicemonitors/jairouter-monitor
    method: GET
- name: jairouter-prod
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: ''
    params: {}
- name: jairouter-dev
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: ''
    params: {}
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: jairouter
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: jairouter-hpa
  endpoint:
    path: jairouter
    method: POST
    data_selector: spec
    params:
      minReplicas: 3
      maxReplicas: 10
      metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 70
      - type: Resource
        resource:
          name: memory
          target:
            type: Utilization
            averageUtilization: 80
- name: ConfigMap
  endpoint:
    path: /configmap
    method: POST
    data_selector: data
    params: {}
- name: Secret
  endpoint:
    path: /secret
    method: POST
    data_selector: data
    params: {}
- name: PersistentVolumeClaim
  endpoint:
    path: /pvc
    method: POST
    data_selector: data
    params: {}
- name: jairouter
  endpoint:
    path: /
    method: GET
- name: jairouter-vpa
  endpoint:
    path: /autoscaling.k8s.io/v1/VerticalPodAutoscaler/jairouter-vpa
    method: POST
    data_selector: metadata
    params: {}
- name: jairouter-service
  spec:
    type: ClusterIP
    ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
- name: jairouter-nodeport
  spec:
    type: NodePort
    ports:
    - name: http
      port: 80
      targetPort: 8080
      nodePort: 30080
      protocol: TCP
- name: jairouter-service
  endpoint:
    path: /api/v1/namespaces/jairouter/services/jairouter-service
    method: GET
    data_selector: spec
    params: {}
- name: jairouter-nodeport
  endpoint:
    path: /api/v1/namespaces/jairouter/services/jairouter-nodeport
    method: GET
    data_selector: spec
    params: {}
- name: jairouter-ingress
  endpoint:
    path: /networking.k8s.io/v1/namespaces/jairouter/ingresses/jairouter-ingress
    method: GET
    data_selector: spec
    params: {}
- name: jairouter-hpa
  endpoint:
    path: /autoscaling/v2/namespaces/jairouter/horizontalpodautoscalers/jairouter-hpa
    method: GET
    data_selector: spec
    params: {}
- name: jairouter-vpa
  endpoint:
    path: /autoscaling.k8s.io/v1/namespaces/jairouter/verticalpodautoscalers/jairouter-vpa
    method: GET
    data_selector: spec
    params: {}
- name: jairouter-monitor
  endpoint:
    path: /monitoring.coreos.com/v1/namespaces/jairouter/servicemonitors/jairouter-monitor
    method: GET
    data_selector: spec
    params: {}
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
- name: jairouter-secret
  endpoint:
    path: /v1/secret
    method: GET
    data_selector: data
- name: jairouter-service
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: jairouter-nodeport
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: jairouter-logs
  endpoint:
    path: /logs
    method: GET
    data_selector: logs
    params: {}
- name: service
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: jairouter-service
  endpoint:
    path: /jairouter-service
    method: GET
    data_selector: records
    params: {}
- name: jairouter-monitor
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: records
    params: {}
- name: jairouter-config
  endpoint:
    path: /config
    method: GET
    data_selector: data
    params: {}
- name: jairouter-secret
  endpoint:
    path: /secret
    method: GET
    data_selector: data
    params: {}
- name: jairouter-pvc
  endpoint:
    path: /pvc
    method: GET
    data_selector: data
    params: {}
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: jairouter-service
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: records
- name: config
  endpoint:
    path: /app/config
    method: GET
- name: logs
  endpoint:
    path: /app/logs
    method: GET
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi
- name: jairouter-service
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: jairouter-monitor
  endpoint:
    path: /actuator/health/liveness
    method: GET
- name: jairouter-rules
  endpoint:
    path: /actuator/health/readiness
    method: GET
- name: network_policy
  endpoint:
    path: /networkpolicy
    method: POST
    data_selector: spec
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: http
    params: {}
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: jairouter
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: configmap
  endpoint:
    path: /configmap
    method: POST
    data_selector: data
    params: {}
- name: secret
  endpoint:
    path: /secret
    method: POST
    data_selector: data
    params: {}
- name: pvc
  endpoint:
    path: /pvc
    method: POST
    data_selector: data
    params: {}
- name: deployment
  endpoint:
    path: /deployment
    method: POST
    data_selector: data
    params: {}
- name: jairouter-secret
  endpoint:
    path: /api/v1/namespaces/jairouter/secrets/jairouter-secret
    method: GET
    data_selector: data
    params: {}
- name: jairouter-tls
  endpoint:
    path: /api/v1/namespaces/jairouter/secrets/jairouter-tls
    method: GET
    data_selector: data
    params: {}
- name: service
  endpoint:
    path: /services/data/v1/service
    method: GET
    data_selector: records
    params: {}
- name: hpa
  endpoint:
    path: /services/data/v1/hpa
    method: GET
    data_selector: records
    params: {}
- name: application_security
  endpoint:
    path: /api/security
    method: GET
    data_selector: security
- name: cors_config
  endpoint:
    path: /api/cors
    method: GET
    data_selector: cors
- name: https_config
  endpoint:
    path: /api/https
    method: GET
    data_selector: server.ssl
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: jairouter-secret
  endpoint:
    path: /v1/jwt-token
    method: POST
    data_selector: data
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
- name: jairouter-service
  endpoint:
    path: /api/v1/namespaces/jairouter/services/jairouter-service
    method: GET
- name: jairouter-nodeport
  endpoint:
    path: /api/v1/namespaces/jairouter/services/jairouter-nodeport
    method: GET
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
- name: api-key
  endpoint:
    path: /api/key
    method: GET
    data_selector: keys
    params: {}
- name: jairouter-security-config
  endpoint:
    path: /app/config/application-security.yml
    method: GET
- name: jairouter-config
  endpoint:
    path: /app/config/application.yml
    method: GET
- name: jairouter-fluentd-config
  endpoint:
    path: /var/log/containers/jairouter-*_jairouter_*.log
    method: GET
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: application.yml
    params: {}
- name: jairouter-secret
  endpoint:
    path: /v1/secrets
    method: POST
    data_selector: data
    params: {}
- name: jairouter-logs-pvc
  endpoint:
    path: /v1/pvc/jairouter-logs
    method: GET
    data_selector: storage
    params: {}
- name: jairouter-config-pvc
  endpoint:
    path: /api/v1/persistentvolumeclaims/jairouter-config-pvc
    method: GET
    data_selector: status
    params: {}
- name: jairouter-logs-pvc
  endpoint:
    path: /api/v1/persistentvolumeclaims/jairouter-logs-pvc
    method: GET
    data_selector: status
    params: {}
- name: jairouter-log-cleanup
  endpoint:
    path: /api/batch/v1/cronjobs/jairouter-log-cleanup
    method: GET
    data_selector: status
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health/readiness
    method: GET
    data_selector: status
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: jairouter-fluentd-config
  endpoint:
    path: /var/log/containers/jairouter-*_jairouter_*.log
    method: GET
    data_selector: records
    params: {}
- name: jairouter-config
  endpoint:
    path: /app/config
    method: GET
    data_selector: records
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: jairouter-config-pvc
  endpoint:
    path: /pvc/jairouter-config-pvc
    method: GET
    data_selector: storage
    params: {}
- name: jairouter-logs-pvc
  endpoint:
    path: /pvc/jairouter-logs-pvc
    method: GET
    data_selector: storage
    params: {}
- name: jairouter-log-cleanup
  endpoint:
    path: /cronjob/jairouter-log-cleanup
    method: GET
    data_selector: schedule
    params: {}
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
- name: jairouter-fluentd-config
  endpoint:
    path: /var/log/containers/jairouter-*_jairouter_*.log
    method: GET
    data_selector: logs
    params: {}
- name: jairouter-service
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: jairouter-config
  endpoint:
    path: /app/config
    method: GET
    data_selector: config
    params: {}
- name: jairouter-logs-pvc
  endpoint:
    path: /app/logs
    method: GET
    data_selector: logs
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health/liveness
    method: GET
    data_selector: status
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health/readiness
    method: GET
    data_selector: status
    params: {}
- name: jairouter-config
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: data
    params: {}
- name: jairouter-fluentd-config
  endpoint:
    path: /var/log/containers/jairouter-*_jairouter_*.log
    method: tail
    data_selector: json
- name: jairouter-service
  endpoint:
    path: /actuator/health/liveness
    method: GET
- name: jairouter-nodeport
  endpoint:
    path: /actuator/health/readiness
    method: GET
- name: jairouter-security-config
  data:
    application-security.yml:
      security:
        api-key:
          enabled: true
          header: X-API-Key
          keys:
          - key-id: prod-admin
            key-value: ${PROD_ADMIN_API_KEY:}
            permissions:
            - admin
            - read
            - write
            - delete
            enabled: true
          - key-id: prod-service
            key-value: ${PROD_SERVICE_API_KEY:}
            permissions:
            - read
            - write
            enabled: true
          - key-id: prod-readonly
            key-value: ${PROD_READONLY_API_KEY:}
            permissions:
            - read
            enabled: true
        jwt:
          enabled: true
          secret: ${PROD_JWT_SECRET:}
          algorithm: HS256
          expiration-minutes: 15
          issuer: jairouter-prod
          accounts:
          - username: admin
            password: '{bcrypt}your-bcrypt-hashed-password'
            roles:
            - ADMIN
            - USER
            enabled: true
          - username: user
            password: '{bcrypt}your-bcrypt-hashed-password'
            roles:
            - USER
            enabled: true
        cors:
          allowed-origins: '*'
          allowed-methods: '*'
          allowed-headers: '*'
          allow-credentials: false
      server:
        port: 8443
        ssl:
          enabled: true
          key-store: /app/config/tls/keystore.p12
          key-store-password: ${SSL_KEYSTORE_PASSWORD}
          key-store-type: PKCS12
          key-alias: jairouter
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: web.hook
  endpoint:
    path: http://webhook-server:5001/webhook
    method: POST
- name: critical-alerts
  endpoint:
    path: http://webhook-server:5001/critical
    method: POST
- name: jaRouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
- name: web.hook
  endpoint:
    path: http://webhook-server:5001/webhook
    method: POST
- name: critical-alerts
  endpoint:
    path: http://webhook-server:5001/critical
    method: POST
- name: audit
  endpoint:
    path: /config/application-audit.yml
    method: GET
    data_selector: events
    params: {}
- name: logging
  endpoint:
    path: /config/application-logging.yml
    method: GET
    data_selector: level
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: prometheus_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: healthy
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: JAiRouterDown
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: ''
    params: {}
- name: JAiRouterHighErrorRate
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: ''
    params: {}
- name: JAiRouterHighLatency
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: ''
    params: {}
- name: JAiRouterHighMemoryUsage
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: ''
    params: {}
- name: JAiRouterHighRateLimitRejection
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: ''
    params: {}
- name: JAiRouterCircuitBreakerOpen
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: ''
    params: {}
- name: structured_logging
  endpoint:
    path: /config/application-structured-logging.yml
    method: GET
    data_selector: logging
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: healthy
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: audit
  endpoint:
    path: /app/logs/audit.log
    method: GET
    data_selector: events
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: structured_logging
  endpoint:
    path: /app/logs/jairouter.log
    method: POST
    data_selector: structured
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: structured_logging
  endpoint:
    path: config/application-structured-logging.yml
    method: GET
    data_selector: logging
    params: {}
- name: log_rotation
  endpoint:
    path: /etc/logrotate.d/jairouter
    method: GET
    data_selector: logs
    params: {}
- name: monitoring_rules
  endpoint:
    path: monitoring/rules/jairouter-logging.yml
    method: GET
    data_selector: groups
    params: {}
- name: backup_config
  endpoint:
    path: backup-config.sh
    method: GET
    data_selector: backup
    params: {}
- name: backup_data
  endpoint:
    path: backup-data.sh
    method: GET
    data_selector: backup
    params: {}
- name: structured_logging
  endpoint:
    path: /config/application-structured-logging.yml
    method: GET
    data_selector: logging
    params: {}
- name: log_rotation
  endpoint:
    path: /etc/logrotate.d/jairouter
    method: GET
    data_selector: logrotate
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: healthy
- name: audit_logs
  endpoint:
    path: /audit/logs
    method: GET
    data_selector: logs
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: application_servers
  endpoint:
    path: /actuator
    method: GET
    data_selector: health
- name: jairouter_health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: jairouter_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
    params: {}
- name: JAiRouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: jairouter_logging
  endpoint:
    path: /path/to/jairouter/logs/*.log
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: health
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: qwen-turbo
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    method: POST
    headers:
      Authorization: Bearer ${DASHSCOPE_API_KEY}
- name: ernie-bot
  endpoint:
    path: /rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions
    method: POST
    headers:
      Content-Type: application/json
- name: hunyuan
  endpoint:
    path: /v1/chat/completions
    method: POST
    headers:
      Authorization: Bearer ${TENCENT_API_KEY}
- name: chatglm
  endpoint:
    path: /api/paas/v4/chat/completions
    method: POST
    headers:
      Authorization: Bearer ${ZHIPU_API_KEY}
- name: jairouter
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
    params: {}
- name: chat
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    method: POST
    headers:
      Authorization: Bearer ${DASHSCOPE_API_KEY}
- name: ernie-bot
  endpoint:
    path: /rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions
    method: POST
    headers:
      Content-Type: application/json
- name: hunyuan
  endpoint:
    path: /v1/chat/completions
    method: POST
    headers:
      Authorization: Bearer ${TENCENT_API_KEY}
- name: chatglm
  endpoint:
    path: /api/paas/v4/chat/completions
    method: POST
    headers:
      Authorization: Bearer ${ZHIPU_API_KEY}
- name: text-embedding-v1
  endpoint:
    path: /api/v1/services/embeddings/text-embedding/text-embedding
    method: POST
    headers:
      Authorization: Bearer ${DASHSCOPE_API_KEY}
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: records
- name: maven_mirror
  endpoint:
    path: /repository/central
    method: GET
    data_selector: mirrors
    params: {}
- name: docker_mirror
  endpoint:
    path: /repository/central
    method: GET
    data_selector: mirrors
    params: {}
- name: qwen-turbo
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    method: POST
    headers:
      Authorization: Bearer ${DASHSCOPE_API_KEY}
- name: ernie-bot
  endpoint:
    path: /rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions
    method: POST
    headers:
      Content-Type: application/json
- name: hunyuan
  endpoint:
    path: /v1/chat/completions
    method: POST
    headers:
      Authorization: Bearer ${TENCENT_API_KEY}
- name: chatglm
  endpoint:
    path: /api/paas/v4/chat/completions
    method: POST
    headers:
      Authorization: Bearer ${ZHIPU_API_KEY}
- name: text-embedding-v1
  endpoint:
    path: /api/v1/services/embeddings/text-embedding/text-embedding
    method: POST
    headers:
      Authorization: Bearer ${DASHSCOPE_API_KEY}
- name: 阿里云通义千问
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    base_url: https://dashscope.aliyuncs.com
    headers:
      Authorization: Bearer ${DASHSCOPE_API_KEY}
- name: 百度文心一言
  endpoint:
    path: /rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions
    base_url: https://aip.baidubce.com
    headers:
      Content-Type: application/json
- name: 腾讯混元
  endpoint:
    path: /v1/chat/completions
    base_url: https://hunyuan.tencentcloudapi.com
    headers:
      Authorization: Bearer ${TENCENT_API_KEY}
- name: 智谱 ChatGLM
  endpoint:
    path: /api/paas/v4/chat/completions
    base_url: https://open.bigmodel.cn
    headers:
      Authorization: Bearer ${ZHIPU_API_KEY}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
- name: qwen-turbo
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    method: POST
    headers:
      Authorization: Bearer ${DASHSCOPE_API_KEY}
    timeout: 60s
- name: ernie-bot
  endpoint:
    path: /rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions
    method: POST
    headers:
      Content-Type: application/json
    timeout: 60s
- name: hunyuan
  endpoint:
    path: /v1/chat/completions
    method: POST
    headers:
      Authorization: Bearer ${TENCENT_API_KEY}
    timeout: 60s
- name: chatglm
  endpoint:
    path: /api/paas/v4/chat/completions
    method: POST
    headers:
      Authorization: Bearer ${ZHIPU_API_KEY}
    timeout: 60s
- name: text-embedding-v1
  endpoint:
    path: /api/v1/services/embeddings/text-embedding/text-embedding
    method: POST
    headers:
      Authorization: Bearer ${DASHSCOPE_API_KEY}
- name: chat
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    base-url: https://dashscope.aliyuncs.com
- name: ernie-bot
  endpoint:
    path: /rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions
    base-url: https://aip.baidubce.com
- name: hunyuan
  endpoint:
    path: /v1/chat/completions
    base-url: https://hunyuan.tencentcloudapi.com
- name: chatglm
  endpoint:
    path: /api/paas/v4/chat/completions
    base-url: https://open.bigmodel.cn
- name: text-embedding-v1
  endpoint:
    path: /api/v1/services/embeddings/text-embedding/text-embedding
    base-url: https://dashscope.aliyuncs.com
- name: chat
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    method: POST
    data_selector: instances
- name: text-embedding
  endpoint:
    path: /api/v1/services/embeddings/text-embedding/text-embedding
    method: POST
    data_selector: instances
- name: qwen-turbo
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    method: POST
    data_selector: instances
    params: {}
- name: ernie-bot
  endpoint:
    path: /rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions
    method: POST
    data_selector: instances
    params: {}
- name: hunyuan
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: instances
    params: {}
- name: chatglm
  endpoint:
    path: /api/paas/v4/chat/completions
    method: POST
    data_selector: instances
    params: {}
- name: text-embedding-v1
  endpoint:
    path: /api/v1/services/embeddings/text-embedding/text-embedding
    method: POST
    data_selector: instances
    params: {}
- name: chat
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    method: POST
- name: text-embedding
  endpoint:
    path: /api/v1/services/embeddings/text-embedding/text-embedding
    method: POST
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: api_documentation
  endpoint:
    path: /swagger-ui/index.html
    method: GET
    data_selector: documentation
    params: {}
- name: sms
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: sms
    params: {}
- name: email
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: email
    params: {}
- name: chat
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    method: POST
    data_selector: instances
- name: embedding
  endpoint:
    path: /api/v1/services/embeddings/text-embedding/text-embedding
    method: POST
    data_selector: instances
- name: chat
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    method: POST
    data_selector: instances
    params: {}
- name: embedding
  endpoint:
    path: /api/v1/services/embeddings/text-embedding/text-embedding
    method: POST
    data_selector: instances
    params: {}
- name: sms
  endpoint:
    path: /sms/send
    method: POST
    data_selector: response.data
    params:
      provider: aliyun
      access-key-id: ${ALIYUN_SMS_ACCESS_KEY_ID}
      access-key-secret: ${ALIYUN_SMS_ACCESS_KEY_SECRET}
      sign-name: JAiRouter
      template-code: SMS_123456789
- name: email
  endpoint:
    path: /email/send
    method: POST
    data_selector: response.data
    params:
      provider: tencent
      smtp-host: smtp.exmail.qq.com
      smtp-port: 465
      username: ${TENCENT_EMAIL_USERNAME}
      password: ${TENCENT_EMAIL_PASSWORD}
- name: cdn
  endpoint:
    path: /cdn/configure
    method: POST
    data_selector: response.data
    params:
      provider: aliyun
      access-key-id: ${ALIYUN_CDN_ACCESS_KEY_ID}
      access-key-secret: ${ALIYUN_CDN_ACCESS_KEY_SECRET}
      domain: jairouter.example.com
- name: qwen-turbo
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    method: POST
- name: ernie-bot
  endpoint:
    path: /rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions
    method: POST
- name: hunyuan
  endpoint:
    path: /v1/chat/completions
    method: POST
    headers:
      Authorization: Bearer ${TENCENT_API_KEY}
- name: chatglm
  endpoint:
    path: /api/paas/v4/chat/completions
    method: POST
    headers:
      Authorization: Bearer ${ZHIPU_API_KEY}
- name: text-embedding-v1
  endpoint:
    path: /api/v1/services/embeddings/text-embedding/text-embedding
    method: POST
    headers:
      Authorization: Bearer ${DASHSCOPE_API_KEY}
- name: sms
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: sms
    params: {}
- name: email
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: email
    params: {}
- name: cdn
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: cdn
    params: {}
- name: sms
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: sms
    params: {}
- name: email
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: email
    params: {}
- name: audit
  endpoint:
    path: /app/logs/audit
    method: GET
- name: aliyun-sls
  endpoint:
    path: cn-hangzhou.log.aliyuncs.com
    method: GET
- name: security
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: security
- name: logging
  endpoint:
    path: /config/logging-china.yml
    method: GET
    data_selector: logging
- name: sms
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: security.sms
    params: {}
- name: email
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: security.email
    params: {}
- name: cdn
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: security.cdn
    params: {}
- name: maven_mirror
  endpoint:
    path: /repository/central
    method: GET
    data_selector: mirrors
    params: {}
- name: docker_mirror
  endpoint:
    path: /repository/public
    method: GET
    data_selector: mirrors
    params: {}
- name: sms
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: sms
    params: {}
- name: email
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: email
    params: {}
- name: cdn
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: cdn
    params: {}
- name: audit
  endpoint:
    path: /app/logs/audit
    method: GET
    data_selector: logs
    params:
      retention-days: 180
- name: aliyun-sls
  endpoint:
    path: cn-hangzhou.log.aliyuncs.com
    method: POST
    data_selector: logs
    params:
      project: jairouter-logs
      logstore: application-logs
- name: chat
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    method: POST
- name: embedding
  endpoint:
    path: /api/v1/services/embeddings/text-embedding/text-embedding
    method: POST
- name: aliyun-sls
  endpoint:
    path: /config/logging-china.yml
    method: GET
    data_selector: logging
    params: {}
- name: tencent-cls
  endpoint:
    path: /config/logging-china.yml
    method: GET
    data_selector: logging
    params: {}
- name: china_logging_alerts
  endpoint:
    path: /monitoring/alertmanager-china-logging.yml
    method: POST
    data_selector: receivers
    params: {}
- name: china_logging_rules
  endpoint:
    path: /monitoring/rules/china-logging-rules.yml
    method: POST
    data_selector: groups
    params: {}
- name: sms
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: sms
    params: {}
- name: email
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: email
    params: {}
- name: cdn
  endpoint:
    path: /config/security-china.yml
    method: GET
    data_selector: cdn
    params: {}
- name: data-protection
  endpoint:
    path: /config/application-security-compliance.yml
    method: GET
    data_selector: data-protection
    params: {}
- name: audit
  endpoint:
    path: /config/application-security-compliance.yml
    method: GET
    data_selector: audit
    params: {}
- name: access-control
  endpoint:
    path: /config/application-security-compliance.yml
    method: GET
    data_selector: access-control
    params: {}
- name: logging
  endpoint:
    path: /config/logging-china.yml
    method: GET
    data_selector: logging
    params: {}
- name: monitoring
  endpoint:
    path: /monitoring
    method: GET
    data_selector: metrics
    params: {}
- name: chat
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
- name: embedding
  endpoint:
    path: /api/v1/services/embeddings/text-embedding/text-embedding
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
    params: {}
- name: aliyun-sls
  endpoint:
    path: /aliyun-sls
    method: POST
    data_selector: logs
    params: {}
- name: tencent-cls
  endpoint:
    path: /tencent-cls
    method: POST
    data_selector: logs
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
- name: query
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data
    params:
      query: up
- name: chat
  endpoint:
    path: /api/v1/services/aigc/text-generation/generation
    method: POST
    data_selector: results
- name: embedding
  endpoint:
    path: /api/v1/services/embeddings/text-embedding/text-embedding
    method: POST
    data_selector: results
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
    params: {}
- name: aliyun-sls
  endpoint:
    path: /aliyun-sls
    method: POST
    data_selector: logs
    params: {}
- name: tencent-cls
  endpoint:
    path: /tencent-cls
    method: POST
    data_selector: logs
    params: {}
- name: metrics
  endpoint:
    path: /api/v1/query
    method: GET
    params:
      query: up
- name: jairouter_security_logs
  endpoint:
    path: jairouter_security_logs_total
    method: GET
    data_selector: alerts
    params:
      incremental: rate
- name: jairouter_error_logs
  endpoint:
    path: jairouter_error_logs_total
    method: GET
    data_selector: alerts
    params:
      incremental: rate
- name: jairouter_access_logs
  endpoint:
    path: jairouter_access_logs_total
    method: GET
    data_selector: alerts
    params:
      incremental: rate
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
- name: prometheus
  endpoint:
    path: /api/v1/targets
    method: GET
    data_selector: targets
- name: grafana
  endpoint:
    path: /
    method: GET
    data_selector: dashboards
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
    params: {}
- name: system_overview
  endpoint:
    path: /system/overview
    method: GET
- name: business_metrics
  endpoint:
    path: /business/metrics
    method: GET
- name: infrastructure_monitoring
  endpoint:
    path: /infrastructure/monitoring
    method: GET
- name: performance_analysis
  endpoint:
    path: /performance/analysis
    method: GET
- name: alert_overview
  endpoint:
    path: /alert/overview
    method: GET
- name: metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
- name: 负载均衡策略分布
  endpoint:
    path: /jairouter_loadbalancer_selections_total
    method: GET
    data_selector: strategy
    params: {}
- name: 后端实例健康状态
  endpoint:
    path: /jairouter_backend_health
    method: GET
    data_selector: 健康状态
    params: {}
- name: 请求分发均匀度
  endpoint:
    path: /jairouter_backend_calls_total
    method: GET
    data_selector: instance
    params: {}
- name: 限流器状态
  endpoint:
    path: /jairouter_rate_limit_tokens
    method: GET
    data_selector: 可用令牌数
    params: {}
- name: 限流事件统计
  endpoint:
    path: /jairouter_rate_limit_events_total
    method: GET
    data_selector: result
    params: {}
- name: 熔断器状态
  endpoint:
    path: /jairouter_circuit_breaker_state
    method: GET
    data_selector: 状态
    params: {}
- name: 熔断事件
  endpoint:
    path: /jairouter_circuit_breaker_events_total
    method: GET
    data_selector: event
    params: {}
- name: 请求吞吐量
  endpoint:
    path: /jairouter_requests_total
    method: GET
    data_selector: 请求数
    params: {}
- name: 后端调用吞吐量
  endpoint:
    path: /jairouter_backend_calls_total
    method: GET
    data_selector: adapter
    params: {}
- name: 内存使用趋势
  endpoint:
    path: /memory_usage
    method: GET
    data_selector: 内存使用情况
    params: {}
- name: 连接池监控
  endpoint:
    path: /connection_pool
    method: GET
    data_selector: 连接数
    params: {}
- name: prometheus_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: ''
    params: {}
- name: jairouter_health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: ''
    params: {}
- name: metrics
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data
    params:
      query: up
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
- name: monitoring_metrics
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: metrics
    params:
      enabled: 'true'
      enabled-categories:
      - system
      - business
      - infrastructure
- name: backend_health
  endpoint:
    path: jairouter_backend_health
    method: GET
- name: backend_calls_distribution
  endpoint:
    path: sum by (instance) (rate(jairouter_backend_calls_total[5m]))
    method: GET
- name: rate_limit_tokens
  endpoint:
    path: jairouter_rate_limit_tokens
    method: GET
- name: rate_limit_events
  endpoint:
    path: sum by (result) (rate(jairouter_rate_limit_events_total[5m]))
    method: GET
- name: circuit_breaker_state
  endpoint:
    path: jairouter_circuit_breaker_state
    method: GET
- name: circuit_breaker_events
  endpoint:
    path: sum by (event) (rate(jairouter_circuit_breaker_events_total[5m]))
    method: GET
- name: requests_throughput
  endpoint:
    path: sum(rate(jairouter_requests_total[1m]))
    method: GET
- name: backend_calls_throughput
  endpoint:
    path: sum by (adapter) (rate(jairouter_backend_calls_total[1m]))
    method: GET
- name: memory_usage_trend
  endpoint:
    path: jvm_memory_usage
    method: GET
- name: connection_pool_monitoring
  endpoint:
    path: connection_pool_stats
    method: GET
- name: current_alerts
  endpoint:
    path: alerts_current_status
    method: GET
- name: alert_details
  endpoint:
    path: alerts_detail_table
    method: GET
- name: alert_frequency_statistics
  endpoint:
    path: alert_frequency_statistics
    method: GET
- name: average_recovery_time
  endpoint:
    path: average_recovery_time
    method: GET
- name: jairouter_alerts
  endpoint:
    path: /monitoring/prometheus/rules/jairouter-alerts.yml
    method: GET
    data_selector: rules
    params: {}
- name: jairouter_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
    params: {}
- name: default
  endpoint:
    path: /alerts/default
    method: POST
    data_selector: email_configs
    params: {}
- name: critical-alerts
  endpoint:
    path: /alerts/critical
    method: POST
    data_selector: email_configs
    params: {}
- name: warning-alerts
  endpoint:
    path: /alerts/warning
    method: POST
    data_selector: email_configs
    params: {}
- name: business-alerts
  endpoint:
    path: /alerts/business
    method: POST
    data_selector: email_configs
    params: {}
- name: email-alerts
  endpoint:
    path: /api/v1/status
    method: GET
    data_selector: receivers
    params: {}
- name: slack-alerts
  endpoint:
    path: /api/v1/status
    method: GET
    data_selector: receivers
    params: {}
- name: dingtalk-alerts
  endpoint:
    path: /api/v1/status
    method: GET
    data_selector: receivers
    params: {}
- name: sms-alerts
  endpoint:
    path: /api/v1/status
    method: GET
    data_selector: receivers
    params: {}
- name: jairouter.critical
  endpoint:
    path: monitoring/prometheus/rules/jairouter-alerts.yml
    method: GET
    data_selector: groups
    params:
      interval: 30s
- name: jairouter.warning
  endpoint:
    path: monitoring/prometheus/rules/jairouter-alerts.yml
    method: GET
    data_selector: groups
    params:
      interval: 60s
- name: jairouter.business
  endpoint:
    path: monitoring/prometheus/rules/jairouter-alerts.yml
    method: GET
    data_selector: groups
    params:
      interval: 60s
- name: jairouter.business-specific
  endpoint:
    path: monitoring/prometheus/rules/jairouter-alerts.yml
    method: GET
    data_selector: groups
    params:
      interval: 60s
- name: 负载均衡策略分布
  endpoint:
    path: /负载均衡策略分布
    method: GET
    data_selector: records
    params: {}
- name: 后端实例健康状态
  endpoint:
    path: /后端实例健康状态
    method: GET
    data_selector: records
    params: {}
- name: 请求分发均匀度
  endpoint:
    path: /请求分发均匀度
    method: GET
    data_selector: records
    params: {}
- name: 限流器状态
  endpoint:
    path: /限流器状态
    method: GET
    data_selector: records
    params: {}
- name: 限流事件统计
  endpoint:
    path: /限流事件统计
    method: GET
    data_selector: records
    params: {}
- name: 熔断器状态
  endpoint:
    path: /熔断器状态
    method: GET
    data_selector: records
    params: {}
- name: 熔断事件
  endpoint:
    path: /熔断事件
    method: GET
    data_selector: records
    params: {}
- name: 响应时间分析
  endpoint:
    path: /响应时间分析
    method: GET
    data_selector: records
    params: {}
- name: 请求吞吐量
  endpoint:
    path: /请求吞吐量
    method: GET
    data_selector: records
    params: {}
- name: 后端调用吞吐量
  endpoint:
    path: /后端调用吞吐量
    method: GET
    data_selector: records
    params: {}
- name: 内存使用趋势
  endpoint:
    path: /内存使用趋势
    method: GET
    data_selector: records
    params: {}
- name: 连接池监控
  endpoint:
    path: /连接池监控
    method: GET
    data_selector: records
    params: {}
- name: 当前告警状态
  endpoint:
    path: /当前告警状态
    method: GET
    data_selector: records
    params: {}
- name: 告警历史分析
  endpoint:
    path: /告警历史分析
    method: GET
    data_selector: records
    params: {}
- name: 自定义仪表板
  endpoint:
    path: /自定义仪表板
    method: GET
    data_selector: records
    params: {}
- name: default-alerts
  endpoint:
    path: /alertmanager/api/v1/alerts
    method: GET
    data_selector: alerts
- name: critical-alerts
  endpoint:
    path: /alertmanager/api/v1/alerts/critical
    method: GET
    data_selector: alerts
- name: warning-alerts
  endpoint:
    path: /alertmanager/api/v1/alerts/warning
    method: GET
    data_selector: alerts
- name: business-alerts
  endpoint:
    path: /alertmanager/api/v1/alerts/business
    method: GET
    data_selector: alerts
- name: inhibit_rules
  endpoint:
    path: /api/v1/status
    method: GET
    data_selector: alert_rules
    params: {}
- name: email-alerts
  endpoint:
    path: /alertmanager/email-alerts
    method: POST
    data_selector: email_configs
    params: {}
- name: slack-alerts
  endpoint:
    path: /alertmanager/slack-alerts
    method: POST
    data_selector: slack_configs
    params: {}
- name: dingtalk-alerts
  endpoint:
    path: /alertmanager/dingtalk-alerts
    method: POST
    data_selector: webhook_configs
    params: {}
- name: sms-alerts
  endpoint:
    path: /alertmanager/sms-alerts
    method: POST
    data_selector: webhook_configs
    params: {}
- name: backend_health
  endpoint:
    path: jairouter_backend_health
    method: GET
- name: backend_calls_distribution
  endpoint:
    path: sum by (instance) (rate(jairouter_backend_calls_total[5m]))
    method: GET
- name: rate_limit_tokens
  endpoint:
    path: jairouter_rate_limit_tokens
    method: GET
- name: rate_limit_events
  endpoint:
    path: sum by (result) (rate(jairouter_rate_limit_events_total[5m]))
    method: GET
- name: circuit_breaker_state
  endpoint:
    path: jairouter_circuit_breaker_state
    method: GET
- name: circuit_breaker_events
  endpoint:
    path: sum by (event) (rate(jairouter_circuit_breaker_events_total[5m]))
    method: GET
- name: request_throughput
  endpoint:
    path: sum(rate(jairouter_requests_total[1m]))
    method: GET
- name: backend_calls_throughput
  endpoint:
    path: sum by (adapter) (rate(jairouter_backend_calls_total[1m]))
    method: GET
- name: memory_usage_trend
  endpoint:
    path: jvm_memory_usage
    method: GET
- name: connection_pool_monitoring
  endpoint:
    path: connection_pool_stats
    method: GET
- name: current_alerts
  endpoint:
    path: current_alerts_summary
    method: GET
- name: alert_details
  endpoint:
    path: alert_details_table
    method: GET
- name: alert_frequency_statistics
  endpoint:
    path: alert_frequency_statistics
    method: GET
- name: average_recovery_time
  endpoint:
    path: average_recovery_time
    method: GET
- name: custom_dashboard
  endpoint:
    path: custom_dashboard_creation
    method: GET
- name: alert_status
  endpoint:
    path: /api/v1/status
    method: GET
    data_selector: status
    params: {}
- name: alert_query
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: silence_query
  endpoint:
    path: /api/v1/silences
    method: GET
    data_selector: silences
    params: {}
- name: alerts
  endpoint:
    path: /monitoring/prometheus/rules/jairouter-alerts.yml
    method: GET
    data_selector: rules
    params: {}
- name: jairouter_alerts
  endpoint:
    path: /monitoring/prometheus/rules/jairouter-alerts.yml
    method: GET
    data_selector: groups
- name: default
  endpoint:
    path: /api/v1/alerts
    method: GET
- name: critical-alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
- name: warning-alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
- name: business-alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
- name: default
  endpoint:
    path: /monitoring/alertmanager/default
    method: POST
    data_selector: email_configs
    params: {}
- name: critical-alerts
  endpoint:
    path: /monitoring/alertmanager/critical-alerts
    method: POST
    data_selector: email_configs
    params:
      api_url: YOUR_SLACK_WEBHOOK_URL
      channel: '#alerts-critical'
- name: warning-alerts
  endpoint:
    path: /monitoring/alertmanager/warning-alerts
    method: POST
    data_selector: email_configs
    params:
      api_url: YOUR_SLACK_WEBHOOK_URL
      channel: '#alerts-warning'
- name: business-alerts
  endpoint:
    path: /monitoring/alertmanager/business-alerts
    method: POST
    data_selector: email_configs
    params:
      url: http://your-webhook-endpoint/alerts
- name: alert_status
  endpoint:
    path: /api/v1/status
    method: GET
    data_selector: status
    params: {}
- name: slow_query_stats
  endpoint:
    path: /api/monitoring/slow-queries/stats
    method: GET
    data_selector: stats
- name: slow_query_alerts_stats
  endpoint:
    path: /api/monitoring/slow-queries/alerts/stats
    method: GET
    data_selector: alerts_stats
- name: slow_query_alerts_status
  endpoint:
    path: /api/monitoring/slow-queries/alerts/status
    method: GET
    data_selector: alerts_status
- name: email-alerts
  endpoint:
    path: /email-alerts
    method: POST
    data_selector: email_configs
    params: {}
- name: slack-alerts
  endpoint:
    path: /slack-alerts
    method: POST
    data_selector: slack_configs
    params: {}
- name: dingtalk-alerts
  endpoint:
    path: /dingtalk-alerts
    method: POST
    data_selector: webhook_configs
    params: {}
- name: sms-alerts
  endpoint:
    path: /sms-alerts
    method: POST
    data_selector: webhook_configs
    params: {}
- name: slow_query_stats
  endpoint:
    path: /api/monitoring/slow-queries/stats
    method: GET
    data_selector: all operations slow query statistics
- name: alert_stats
  endpoint:
    path: /api/monitoring/slow-queries/alerts/stats
    method: GET
    data_selector: alert system statistics
- name: alert_status
  endpoint:
    path: /api/monitoring/slow-queries/alerts/status
    method: GET
    data_selector: current alert system status
- name: inhibit_rules
  endpoint:
    path: /api/v1/status
    method: GET
    data_selector: alert_rules
    params: {}
- name: error_tracking
  endpoint:
    path: /api/error-tracking
    method: GET
    data_selector: errors
    params: {}
- name: jairouter.critical
  endpoint:
    path: /monitoring/prometheus/rules/jairouter-alerts.yml
    method: GET
    data_selector: groups
    params: {}
- name: jairouter.warning
  endpoint:
    path: /monitoring/prometheus/rules/jairouter-alerts.yml
    method: GET
    data_selector: groups
    params: {}
- name: jairouter.business-specific
  endpoint:
    path: /monitoring/prometheus/rules/jairouter-alerts.yml
    method: GET
    data_selector: groups
    params: {}
- name: error_stats
  endpoint:
    path: /api/monitoring/errors/stats
    method: GET
    data_selector: totalErrors
- name: error_details
  endpoint:
    path: /api/monitoring/errors/details
    method: GET
    data_selector: errorType
- name: email-alerts
  endpoint:
    path: receivers/email-alerts
    method: POST
    data_selector: email_configs
    params: {}
- name: slack-alerts
  endpoint:
    path: receivers/slack-alerts
    method: POST
    data_selector: slack_configs
    params: {}
- name: dingtalk-alerts
  endpoint:
    path: receivers/dingtalk-alerts
    method: POST
    data_selector: webhook_configs
    params: {}
- name: sms-alerts
  endpoint:
    path: receivers/sms-alerts
    method: POST
    data_selector: webhook_configs
    params: {}
- name: AlertManager状态
  endpoint:
    path: /api/v1/status
    method: GET
    data_selector: status
- name: 告警规则
  endpoint:
    path: /prometheus/rules
    method: POST
    data_selector: rules
- name: jairouter.critical
  endpoint:
    path: /monitoring/prometheus/rules/jairouter-alerts.yml
    method: POST
    data_selector: rules
    params: {}
- name: jairouter.business-specific
  endpoint:
    path: /monitoring/prometheus/rules/jairouter-business.yml
    method: POST
    data_selector: rules
    params: {}
- name: email-alerts
  endpoint:
    path: /email-alerts
    method: POST
    data_selector: email_configs
    params: {}
- name: slack-alerts
  endpoint:
    path: /slack-alerts
    method: POST
    data_selector: slack_configs
    params: {}
- name: dingtalk-alerts
  endpoint:
    path: /dingtalk-alerts
    method: POST
    data_selector: webhook_configs
    params: {}
- name: sms-alerts
  endpoint:
    path: /sms-alerts
    method: POST
    data_selector: webhook_configs
    params: {}
- name: performance
  endpoint:
    path: /actuator/jairouter-metrics/performance
    method: GET
    data_selector: metrics
    params: {}
- name: jvm_gc_pause
  endpoint:
    path: /actuator/metrics/jvm.gc.pause
    method: GET
    data_selector: metrics
    params: {}
- name: slow_query_stats
  endpoint:
    path: /api/monitoring/slow-queries/stats
    method: GET
    data_selector: ''
    params: {}
- name: slow_query_alerts_stats
  endpoint:
    path: /api/monitoring/slow-queries/alerts/stats
    method: GET
    data_selector: ''
    params: {}
- name: slow_query_alerts_status
  endpoint:
    path: /api/monitoring/slow-queries/alerts/status
    method: GET
    data_selector: ''
    params: {}
- name: slow_query_stats
  endpoint:
    path: /api/monitoring/slow-queries/stats
    method: GET
    data_selector: stats
    params: {}
- name: slow_query_alerts_stats
  endpoint:
    path: /api/monitoring/slow-queries/alerts/stats
    method: GET
    data_selector: alerts_stats
    params: {}
- name: slow_query_alerts_status
  endpoint:
    path: /api/monitoring/slow-queries/alerts/status
    method: GET
    data_selector: alerts_status
    params: {}
- name: error_stats
  endpoint:
    path: /api/monitoring/errors/stats
    method: GET
    data_selector: totalErrors
    params: {}
- name: error_details
  endpoint:
    path: /api/monitoring/errors/details
    method: GET
    data_selector: errorType
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: null
    params: {}
- name: prometheus_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: null
    params: {}
- name: tracing
  endpoint:
    path: /api/traces
    method: POST
    data_selector: traces
    params: {}
- name: tracing
  endpoint:
    path: /api/v1/chat/completions
    method: POST
    data_selector: message
    params: {}
- name: query
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data.result
    params: {}
- name: metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: data.metrics
    params: {}
- name: tracing
  endpoint:
    path: /tracing
    method: GET
    data_selector: metrics
    params: {}
- name: tracing
  endpoint:
    path: /api/v1/chat/completions
    method: POST
    data_selector: message
- name: jairouter-tracing
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: scrape_configs
    params:
      scrape_interval: 30s
- name: jairouter
  endpoint:
    path: /services/data/vXX.X/sobjects/JAiRouter
    method: GET
    data_selector: records
- name: tracing
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: jairouter-tracing
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
- name: tracing
  endpoint:
    path: /actuator/tracing
    method: GET
    data_selector: active-spans
    params: {}
- name: configprops
  endpoint:
    path: /actuator/configprops
    method: GET
    data_selector: jairouter.tracing
    params: {}
- name: metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
    params: {}
- name: tracing
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: ''
    params: {}
- name: jairouter_tracing
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: tracing
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
    params: {}
- name: configprops
  endpoint:
    path: /actuator/configprops
    method: GET
    data_selector: properties
    params: {}
- name: health
  endpoint:
    path: /actuator/health/tracing
    method: GET
    data_selector: status
    params: {}
- name: jairouter-tracing
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
    params: {}
- name: tracing_sampling_rate
  endpoint:
    path: /api/admin/tracing/sampling-rate
    method: PUT
    data_selector: null
    params: {}
- name: tracing_emergency_config
  endpoint:
    path: /api/admin/tracing/emergency-config
    method: PUT
    data_selector: null
    params: {}
- name: tracing_disable
  endpoint:
    path: /api/admin/tracing/disable
    method: POST
    data_selector: null
    params: {}
- name: tracing
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
- name: tracing
  endpoint:
    path: /actuator/tracing
    method: GET
    data_selector: data
    params: {}
- name: configprops
  endpoint:
    path: /actuator/configprops
    method: GET
    data_selector: properties
    params: {}
- name: tracing
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
    params: {}
- name: jairouter
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: tracing
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
    params: {}
- name: tracing
  endpoint:
    path: /actuator/tracing
    method: GET
    data_selector: tracing
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
- name: emergency_config
  endpoint:
    path: /api/admin/tracing/emergency-config
    method: PUT
    data_selector: ''
    params: {}
- name: disable_tracing
  endpoint:
    path: /api/admin/tracing/disable
    method: POST
    data_selector: ''
    params: {}
- name: tracing
  endpoint:
    path: /actuator/tracing
    method: GET
    data_selector: tracing
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
- name: configprops
  endpoint:
    path: /actuator/configprops
    method: GET
    data_selector: configprops
- name: emergency_config
  endpoint:
    path: /api/admin/tracing/emergency-config
    method: PUT
    data_selector: null
    params: {}
- name: disable_tracing
  endpoint:
    path: /api/admin/tracing/disable
    method: POST
    data_selector: null
    params: {}
- name: force_gc
  endpoint:
    path: /actuator/gc
    method: POST
    data_selector: null
    params: {}
- name: force_cleanup
  endpoint:
    path: /api/admin/tracing/force-cleanup
    method: POST
    data_selector: null
    params: {}
- name: LoadBalancer
  endpoint:
    path: /LoadBalancer
    method: GET
    data_selector: instances
    params: {}
- name: LoadBalanceConfig
  endpoint:
    path: /LoadBalanceConfig
    method: GET
    data_selector: configs
    params: {}
- name: code_quality
  endpoint:
    path: /quality/check
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: result
    params: {}
- name: model-1
  endpoint:
    path: /
    method: GET
- name: model-2
  endpoint:
    path: /
    method: GET
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: responses
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: model-1
  endpoint:
    path: /api/config/rate-limit/status
    method: GET
- name: model-2
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: model-1
  endpoint:
    path: /model-1
    method: GET
- name: model-2
  endpoint:
    path: /model-2
    method: GET
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: responses
    params: {}
- endpoint:
    params:
      incremental: updated_at
- name: chat
  endpoint:
    path: /api/config/rate-limit/status
    method: GET
- name: prometheus
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: performance_monitoring
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: alert_rules
  endpoint:
    path: /prometheus-alerts.yml
    method: GET
    data_selector: rules
    params: {}
- name: performance_benchmark
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: response
    params: {}
- name: request_duration
  endpoint:
    path: /actuator/metrics/jairouter.request.duration
    method: GET
    data_selector: ''
    params: {}
- name: total_requests
  endpoint:
    path: /actuator/metrics/jairouter.requests.total
    method: GET
    data_selector: ''
    params: {}
- name: jvm_memory_used
  endpoint:
    path: /actuator/metrics/jvm.memory.used
    method: GET
    data_selector: ''
    params: {}
- name: jvm_gc_pause
  endpoint:
    path: /actuator/metrics/jvm.gc.pause
    method: GET
    data_selector: ''
    params: {}
- name: system_cpu_usage
  endpoint:
    path: /actuator/metrics/system.cpu.usage
    method: GET
    data_selector: ''
    params: {}
- name: executor_active
  endpoint:
    path: /actuator/metrics/executor.active
    method: GET
    data_selector: ''
    params: {}
- name: executor_queue_remaining
  endpoint:
    path: /actuator/metrics/executor.queue.remaining
    method: GET
    data_selector: ''
    params: {}
- name: performance_metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: alerts
    params: {}
- name: performance_monitor
  endpoint:
    path: /metrics
    method: GET
    data_selector: records
- name: alert_rules
  endpoint:
    path: /prometheus-alerts.yml
    method: GET
    data_selector: rules
- name: performance_metrics
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: http.server.requests
    params: {}
- name: metrics_request_duration
  endpoint:
    path: /actuator/metrics/jairouter.request.duration
    method: GET
    data_selector: ''
    params: {}
- name: metrics_requests_total
  endpoint:
    path: /actuator/metrics/jairouter.requests.total
    method: GET
    data_selector: ''
    params: {}
- name: metrics_jvm_memory_used
  endpoint:
    path: /actuator/metrics/jvm.memory.used
    method: GET
    data_selector: ''
    params: {}
- name: metrics_jvm_gc_pause
  endpoint:
    path: /actuator/metrics/jvm.gc.pause
    method: GET
    data_selector: ''
    params: {}
- name: metrics_system_cpu_usage
  endpoint:
    path: /actuator/metrics/system.cpu.usage
    method: GET
    data_selector: ''
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: responses
- name: actuator_health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: HighResponseTime
  endpoint:
    path: /prometheus-alerts.yml
    method: GET
    data_selector: rules
    params: {}
- name: HighCPUUsage
  endpoint:
    path: /prometheus-alerts.yml
    method: GET
    data_selector: rules
    params: {}
- name: HighMemoryUsage
  endpoint:
    path: /prometheus-alerts.yml
    method: GET
    data_selector: rules
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: instances
- name: performance_benchmark
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: performance_metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
- name: rerank
  endpoint:
    path: /v1/rerank
    method: GET
- name: tts
  endpoint:
    path: /v1/audio/speech
    method: GET
- name: stt
  endpoint:
    path: /v1/audio/transcriptions
    method: GET
- name: imgGen
  endpoint:
    path: /v1/images/generations
    method: GET
- name: imgEdit
  endpoint:
    path: /v1/images/edits
    method: GET
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: ''
    params: {}
- name: prometheus_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: ''
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
- name: rerank
  endpoint:
    path: /v1/rerank
    method: GET
- name: tts
  endpoint:
    path: /v1/audio/speech
    method: GET
- name: stt
  endpoint:
    path: /v1/audio/transcriptions
    method: GET
- name: imgGen
  endpoint:
    path: /v1/images/generations
    method: GET
- name: imgEdit
  endpoint:
    path: /v1/images/edits
    method: GET
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: prometheus_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: ''
    params: {}
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
    data_selector: ''
    params: {}
- name: rerank
  endpoint:
    path: /v1/rerank
    method: GET
    data_selector: ''
    params: {}
- name: tts
  endpoint:
    path: /v1/audio/speech
    method: GET
    data_selector: ''
    params: {}
- name: stt
  endpoint:
    path: /v1/audio/transcriptions
    method: GET
    data_selector: ''
    params: {}
- name: imgGen
  endpoint:
    path: /v1/images/generations
    method: GET
    data_selector: ''
    params: {}
- name: imgEdit
  endpoint:
    path: /v1/images/edits
    method: GET
    data_selector: ''
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
- name: rerank
  endpoint:
    path: /v1/rerank
    method: GET
- name: tts
  endpoint:
    path: /v1/audio/speech
    method: GET
- name: stt
  endpoint:
    path: /v1/audio/transcriptions
    method: GET
- name: imgGen
  endpoint:
    path: /v1/images/generations
    method: GET
- name: imgEdit
  endpoint:
    path: /v1/images/edits
    method: GET
- name: security_features
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: responses
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
- name: readiness_check
  endpoint:
    path: /actuator/health/readiness
    method: GET
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: records
    params: {}
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
    data_selector: records
    params: {}
- name: rerank
  endpoint:
    path: /v1/rerank
    method: GET
    data_selector: records
    params: {}
- name: tts
  endpoint:
    path: /v1/audio/speech
    method: GET
    data_selector: records
    params: {}
- name: stt
  endpoint:
    path: /v1/audio/transcriptions
    method: GET
    data_selector: records
    params: {}
- name: imgGen
  endpoint:
    path: /v1/images/generations
    method: GET
    data_selector: records
    params: {}
- name: imgEdit
  endpoint:
    path: /v1/images/edits
    method: GET
    data_selector: records
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: metrics
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
- name: rerank
  endpoint:
    path: /v1/rerank
    method: GET
- name: tts
  endpoint:
    path: /v1/audio/speech
    method: GET
- name: stt
  endpoint:
    path: /v1/audio/transcriptions
    method: GET
- name: imgGen
  endpoint:
    path: /v1/images/generations
    method: GET
- name: imgEdit
  endpoint:
    path: /v1/images/edits
    method: GET
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
- name: readiness_check
  endpoint:
    path: /actuator/health/readiness
    method: GET
- name: prometheus_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: chat
  endpoint:
    path: /v1/chat/completions
    method: GET
    data_selector: ''
    params: {}
- name: embedding
  endpoint:
    path: /v1/embeddings
    method: GET
    data_selector: ''
    params: {}
- name: rerank
  endpoint:
    path: /v1/rerank
    method: GET
    data_selector: ''
    params: {}
- name: tts
  endpoint:
    path: /v1/audio/speech
    method: GET
    data_selector: ''
    params: {}
- name: stt
  endpoint:
    path: /v1/audio/transcriptions
    method: GET
    data_selector: ''
    params: {}
- name: imgGen
  endpoint:
    path: /v1/images/generations
    method: GET
    data_selector: ''
    params: {}
- name: imgEdit
  endpoint:
    path: /v1/images/edits
    method: GET
    data_selector: ''
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: null
    params: {}
- name: detailed_health_check
  endpoint:
    path: /actuator/health/detailed
    method: GET
    data_selector: null
    params: {}
- name: readiness_probe
  endpoint:
    path: /actuator/health/readiness
    method: GET
    data_selector: null
    params: {}
- name: liveness_probe
  endpoint:
    path: /actuator/health/liveness
    method: GET
    data_selector: null
    params: {}
- name: prometheus_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: null
    params: {}
- name: json_metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: null
    params: {}
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
- name: readiness_check
  endpoint:
    path: /actuator/health/readiness
    method: GET
- name: health
  endpoint:
    path: /actuator/health
    method: GET
- name: detailed_health
  endpoint:
    path: /actuator/health/detailed
    method: GET
- name: readiness_probe
  endpoint:
    path: /actuator/health/readiness
    method: GET
- name: liveness_probe
  endpoint:
    path: /actuator/health/liveness
    method: GET
- name: prometheus_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: json_metrics
  endpoint:
    path: /actuator/metrics
    method: GET
- name: specific_metric
  endpoint:
    path: /actuator/metrics/http.server.requests
    method: GET
- name: environment_details
  endpoint:
    path: /actuator/env
    method: GET
- name: configuration_properties
  endpoint:
    path: /actuator/configprops
    method: GET
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: readiness_check
  endpoint:
    path: /actuator/health/readiness
    method: GET
    data_selector: status
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
- name: metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: metrics
- name: info
  endpoint:
    path: /actuator/info
    method: GET
    data_selector: info
- name: env
  endpoint:
    path: /actuator/env
    method: GET
    data_selector: env
- name: configprops
  endpoint:
    path: /actuator/configprops
    method: GET
    data_selector: configprops
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: null
    params: {}
- name: metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: null
    params: {}
- name: info
  endpoint:
    path: /actuator/info
    method: GET
    data_selector: null
    params: {}
- name: env
  endpoint:
    path: /actuator/env
    method: GET
    data_selector: null
    params: {}
- name: configprops
  endpoint:
    path: /actuator/configprops
    method: GET
    data_selector: null
    params: {}
- name: health
  endpoint:
    path: /actuator/health
    method: GET
- name: detailed_health
  endpoint:
    path: /actuator/health/detailed
    method: GET
- name: readiness_probe
  endpoint:
    path: /actuator/health/readiness
    method: GET
- name: liveness_probe
  endpoint:
    path: /actuator/health/liveness
    method: GET
- name: prometheus_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
- name: json_metrics
  endpoint:
    path: /actuator/metrics
    method: GET
- name: application_info
  endpoint:
    path: /actuator/info
    method: GET
- name: environment_details
  endpoint:
    path: /actuator/env
    method: GET
- name: configuration_properties
  endpoint:
    path: /actuator/configprops
    method: GET
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: ''
- name: detailed_health
  endpoint:
    path: /actuator/health/detailed
    method: GET
    data_selector: ''
- name: readiness_probe
  endpoint:
    path: /actuator/health/readiness
    method: GET
    data_selector: ''
- name: liveness_probe
  endpoint:
    path: /actuator/health/liveness
    method: GET
    data_selector: ''
- name: prometheus_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: ''
- name: json_metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: ''
- name: application_info
  endpoint:
    path: /actuator/info
    method: GET
    data_selector: ''
- name: environment_details
  endpoint:
    path: /actuator/env
    method: GET
    data_selector: ''
- name: configuration_properties
  endpoint:
    path: /actuator/configprops
    method: GET
    data_selector: ''
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: metrics
- name: configprops
  endpoint:
    path: /actuator/configprops
    method: GET
    data_selector: config
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
- name: detailed_health
  endpoint:
    path: /actuator/health/detailed
    method: GET
    data_selector: detailed_health
- name: readiness_probe
  endpoint:
    path: /actuator/health/readiness
    method: GET
    data_selector: readiness_probe
- name: liveness_probe
  endpoint:
    path: /actuator/health/liveness
    method: GET
    data_selector: liveness_probe
- name: prometheus_metrics
  endpoint:
    path: /actuator/prometheus
    method: GET
    data_selector: prometheus_metrics
- name: json_metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: json_metrics
- name: application_info
  endpoint:
    path: /actuator/info
    method: GET
    data_selector: application_info
- name: environment_details
  endpoint:
    path: /actuator/env
    method: GET
    data_selector: environment_details
- name: configuration_properties
  endpoint:
    path: /actuator/configprops
    method: GET
    data_selector: configuration_properties
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
- name: metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: metrics
- name: info
  endpoint:
    path: /actuator/info
    method: GET
    data_selector: info
- name: env
  endpoint:
    path: /actuator/env
    method: GET
    data_selector: env
- name: configprops
  endpoint:
    path: /actuator/configprops
    method: GET
    data_selector: configprops
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: health
- name: metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: metrics
- name: info
  endpoint:
    path: /actuator/info
    method: GET
    data_selector: info
- name: health_check
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: metrics
- name: config_props
  endpoint:
    path: /actuator/configprops
    method: GET
    data_selector: config
notes:
- Supports runtime configuration updates without service restart
- JAiRouter 提供灵活的配置选项以满足各种部署场景
- 支持静态配置和动态配置
- 从 v1.0.0 版本开始，JAiRouter 采用模块化配置结构，将不同功能的配置分离到独立的配置文件中，以提高可维护性和可读性。
- 支持静态和动态配置
- 使用 YML 文件进行配置
- 使用环境变量和命令行参数覆盖配置
- 使用有意义的名称
- 设置适当的超时
- JAiRouter 支持两种主要配置方式：静态配置和动态配置
- 配置按以下顺序加载（后面的源会覆盖前面的）
- Uses OAuth2 with refresh token — requires setup of connected app in api
- API Key认证支持多级权限控制和过期时间管理
- JWT认证支持标准JWT令牌和刷新机制
- 部署简单，一键启动
- 环境隔离，依赖管理简单
- 支持多环境配置
- 内置健康检查和监控
- Deployment supports various methods including Docker and Kubernetes
- Health check available at /actuator/health
- 支持多级权限控制和过期时间管理
- JWT 认证支持标准 JWT 令牌和刷新机制
- 支持从开发环境到生产环境的完整部署方案
- 使用非 root 用户运行
- 定期更新依赖
- JAiRouter 提供了全面的监控功能，包括系统指标收集、Prometheus 集成、Grafana 仪表板和告警配置。
- 监控功能会对系统性能产生一定影响，建议在生产环境中根据实际需求调整采样率和缓存配置。
- Docker 部署（推荐）适用于开发、测试、生产
- 支持多环境配置，内置健康检查和监控
- 推荐使用项目内置的 Maven Wrapper
- 中国用户推荐使用 -Pchina 进行构建
- Check service basic status and connectivity.
- Logs and error information should be reviewed.
- 使用版本控制管理配置文件
- 建立配置变更审核流程
- 定期备份重要配置数据
- 中国用户推荐使用 ./mvnw clean package -Pchina
- Docker installation is recommended for most users.
- Traditional installation is suitable for development and debugging.
- 中国用户使用阿里云镜像
- 或配置代理
- 我们致力于提供准确、及时、有用的参考资料，帮助用户更好地使用 JAiRouter。
- Docker installation is the simplest and fastest way, suitable for most users.
- 使用阿里云Maven镜像，依赖下载速度提升5-10倍
- '推荐使用以下 IDE： - IntelliJ IDEA: 推荐，内置 Spring Boot 支持 - Eclipse: 需要安装 Spring Tools
  Suite - VS Code: 需要安装 Java 和 Spring Boot 扩展'
- 项目集成了多种代码质量工具
- '阿里云Maven镜像: 使用 https://maven.aliyun.com/repository/public'
- '完整仓库支持: Central、Spring、Plugin等仓库镜像'
- '自动配置: 内置settings.xml，无需手动配置'
- '显著提速: 依赖下载速度提升5-10倍'
- Docker installation is the easiest and fastest way for most users.
- 常见问题包括 Java 版本不兼容、端口被占用、内存不足、依赖下载失败和 Docker 构建失败
- Traditional installation requires Java environment setup.
- Docker installation is the recommended method for most users.
- '推荐使用以下 IDE： - **IntelliJ IDEA**: 推荐，内置 Spring Boot 支持 - **Eclipse**: 需要安装 Spring
  Tools Suite - **VS Code**: 需要安装 Java 和 Spring Boot 扩展'
- 在浏览器中打开 Swagger UI 进行 API 测试
- 如果端口 8080 被占用，可以使用 -p 8081:8080 映射到其他端口
- Docker安装是最简单快捷的方式，适合大多数用户。
- 传统安装方式直接在系统上运行 JAR 文件，适合开发和调试。
- Mock services are only for testing routing functionality and will not return real
  AI responses.
- If port 8080 is occupied, use -p 8081:8080 to map to another port.
- 服务启动后可以通过 /actuator/health 检查健康状态
- 使用 Swagger UI 进行 API 文档交互
- 服务启动成功标志为状态为 'UP'
- 如果端口 8080 被占用，可以使用 -p 8081:8080 进行映射
- 支持多种 AI 服务类型（Chat、Embedding、TTS等）
- 实现智能负载均衡和流量分发
- 支持的服务类型包括 Chat、Embedding、TTS等。
- 支持静态和动态配置方式。
- Supports multiple AI service types including chat, embedding, TTS, and more.
- Dynamic configuration can be managed via REST API.
- Uses REST API for configuration and management
- No authentication required for accessing endpoints
- Uses HTTP requests to access metrics
- 支持的服务类型包括 Chat、Embedding、TTS等
- Supports multiple AI service types (Chat, Embedding, TTS, etc.)
- Configuration can be done via static or dynamic methods
- Supports static and dynamic configuration methods
- 动态 API 配置：立即生效
- 配置文件更新：需要重启服务
- Logging level for org.unreal.modelrouter is INFO
- Logging level for org.springframework is WARN
- Log file is located at logs/jairouter.log
- Uses WebClient for backend service calls
- Supports detailed connection configuration
- 支持多种 AI 服务类型
- 使用配置管理 API 备份当前配置
- JAiRouter 使用 WebClient 进行后端服务调用
- 支持详细的连接配置
- 使用模块化的配置管理方式，提高了配置的可维护性、可读性和可重用性
- Some objects like Contact may return nulls in deeply nested fields
- 检查配置文件路径是否正确
- 确认环境配置文件是否正确加载
- 验证配置优先级顺序
- 检查是否有语法错误
- Uses modular configuration for improved maintainability and readability
- 模块化配置提高了配置的可维护性、可读性和可重用性
- Uses modular configuration management for improved maintainability and readability.
- Uses modular configuration for improved maintainability and readability.
- Configuration is modular, allowing for independent configuration files.
- 模块化配置提高了可维护性、可读性和可重用性
- Dynamic configuration API allows for runtime updates of instance configurations.
- Dynamic configuration API allows runtime updates of instance configurations.
- 动态配置 API 可用于运行时更新实例配置，不影响模块化结构
- 动态配置 API 仍然可以用于运行时更新实例配置，不影响模块化结构。
- 配置文件命名规则包括版本号和备份目录。
- JAiRouter provides flexible configuration options for various deployment scenarios.
- 从 v1.0.0 版本开始，JAiRouter 采用模块化配置结构，负载均衡相关配置已移至独立的配置文件中
- '全局默认策略: round-robin'
- 'IP Hash 策略的哈希算法: md5'
- 启用客户端IP限流
- 启用连接跟踪
- 启用动态权重调整
- 支持的负载均衡策略包括 Random, Round Robin, Least Connections, IP Hash
- 全局默认策略为 round-robin
- 同一客户端总是路由到同一实例
- 支持会话保持
- 实例变化时会影响路由
- 可能导致负载不均衡
- '全局默认策略: random'
- 配置不生效
- 检查 API 响应是否成功
- 验证配置文件是否正确保存
- 确认服务实例是否健康
- 实例添加失败
- 检查网络连通性
- 验证 URL 格式是否正确
- 确认后端服务是否可用
- 配置合并失败
- 检查配置文件格式是否正确
- 验证磁盘空间是否充足
- 确认文件权限是否正确
- '四种负载均衡策略: Random, Round Robin, Least Connections, IP Hash'
- 支持全局、服务级别和实例级别的配置
- JAiRouter 采用模块化配置结构，负载均衡相关配置已移至独立的配置文件中
- Supports dynamic configuration API to update instance configuration.
- 支持四种负载均衡策略：随机、轮询、最少连接、IP哈希
- 'Supports four load balancing strategies: Random, Round Robin, Least Connections,
  IP Hash.'
- 支持动态配置 API 更新实例配置
- JAiRouter provides four load balancing strategies.
- Supports global, service-level, and instance-level configuration.
- Supports dynamic configuration API for updating instance configurations.
- Uses a modular configuration structure
- Supports dynamic updates through an API
- JAiRouter adopts a modular configuration structure from v1.0.0.
- Load balancing configurations are moved to separate configuration files.
- 启用故障转移
- 全局配置和服务级配置均可设置负载均衡策略
- JAiRouter 提供多种限流算法，支持全局、服务级别和实例级别的限流配置，以及基于客户端 IP 的独立限流。
- 动态配置API更新限流配置
- JAiRouter supports four load balancing strategies.
- Dynamic configuration API can be used to update instance configurations.
- 当前版本不支持直接通过 API 更新负载均衡策略，需要通过配置文件更新后重启服务
- 支持全局、服务级和实例级的限流配置，以及基于客户端 IP 的独立限流。
- 从 v1.0.0 版本开始，JAiRouter 采用模块化配置结构，限流相关配置已移至独立的配置文件中
- 您可以在 config/base/model-services-base.yml 文件中找到所有限流相关配置，包括全局配置、各服务类型配置和实例配置
- 需要平稳输出：要求后端接收到的请求速率平稳
- 消息队列：需要控制消息处理速率
- 数据库保护：保护数据库免受突发流量冲击
- JAiRouter 提供多种限流算法，支持全局、服务级别和实例级别的限流配置，以及基于客户端 IP 的独立限流
- 限流相关配置已移至独立的配置文件中
- 使用滑动窗口算法来实现精确限流控制
- 支持基于客户端IP的动态限流配置
- JAiRouter provides multiple rate limiting algorithms and configurations.
- Uses sliding-window and token-bucket algorithms for rate limiting.
- Global rate limit enabled with a capacity of 10000 and rate of 1000
- Service-level rate limit enabled with a capacity of 1000 and rate of 100
- Client IP rate limiting enabled
- Service level rate limiting with various algorithms
- Client IP rate limit enabled
- Warm-up algorithm helps avoid performance issues during cold starts
- 全局限流：保护整个系统
- 服务级限流：保护特定服务
- JAiRouter 支持通过动态配置 API 更新限流配置
- 支持全局、服务级别和实例级别的限流配置
- JAiRouter 采用模块化配置结构
- 客户端IP限流启用
- 服务级别和实例级别的限流配置支持
- Enables client IP rate limiting
- Supports sliding-window and token-bucket algorithms
- 根据监控结果调整配置
- 如果拒绝率过高，增加容量或速率
- 如果后端压力大，减少容量或速率
- 启用异步处理
- 批量处理大小
- 缓存大小
- 线程池大小
- 更频繁的清理
- 更短的空闲时间
- 限制最大客户端数
- 支持全局、服务级别和实例级别的限流配置，以及基于客户端 IP 的独立限流
- Dynamic rate limiting configuration supported via API
- Supports dynamic configuration of rate limiting.
- '批量处理大小: 100'
- '缓存大小: 1000'
- '线程池大小: 4'
- Supports global, service-level, and instance-level rate limiting configurations.
- 精确流量控制：需要精确控制时间窗口内的请求数量
- 防刷接口：防止短时间内大量重复请求
- '限流过于严格: 检查拒绝率'
- 解决：增加容量或速率
- 从 v1.0.0 版本开始，JAiRouter 采用模块化配置结构，限流相关配置已移至独立的配置文件中。
- 查看限流配置
- 查看限流指标
- 测试限流效果
- 限流过于严格
- 内存使用过高
- JAiRouter 内置熔断器机制，用于防止服务雪崩和级联故障。
- 熔断器有三种状态：CLOSED, OPEN, HALF_OPEN
- 熔断器配置在独立的配置文件中
- JAiRouter 内置熔断器机制，用于防止服务雪崩和级联故障
- 当后端服务出现故障时，熔断器会自动切断请求，并在服务恢复后自动恢复
- 全局限流配置支持多种算法，包括 Token Bucket 和 Leaky Bucket。
- 可以使用 JSON 配置动态更新限流设置。
- Uses circuit breaker mechanism to prevent cascading failures.
- 完成限流配置后，您可以继续了解熔断器配置、监控指南、故障排查和性能调优
- 熔断器机制用于防止服务雪崩和级联故障
- 从 v1.0.0 版本开始，JAiRouter 采用模块化配置结构
- Uses circuit breaker mechanism to prevent service avalanche and cascading failures.
- Configurations are modular and stored in separate YAML files.
- '一般服务：标准配置: failure-threshold: 5, recovery-timeout: 60000, success-threshold: 3'
- '敏感服务：快速熔断: failure-threshold: 3'
- '稳定服务：宽松熔断: failure-threshold: 10'
- '实验性服务：极敏感熔断: failure-threshold: 1'
- '快速恢复服务: recovery-timeout: 30000'
- '慢速恢复服务: recovery-timeout: 300000'
- '自适应恢复: recovery-timeout: 60000, adaptive-recovery: enabled: true, min-timeout:
  30000, max-timeout: 600000, backoff-multiplier: 2'
- '严格恢复: success-threshold: 5'
- '快速恢复: success-threshold: 1'
- 熔断器配置已移至独立的配置文件中
- Alerts are configured for circuit breaker state and failure rate.
- 统计窗口优化包括窗口大小、最小请求数和滑动窗口设置
- 并发优化包括线程安全、无锁实现和批量处理
- JAiRouter implements a circuit breaker mechanism to prevent service failures.
- 'Circuit breaker has three states: CLOSED, OPEN, and HALF_OPEN.'
- Prometheus metrics require correct endpoint configuration.
- 一般服务：标准配置 includes a circuit-breaker with failure-threshold of 5, recovery-timeout
  of 60000, and success-threshold of 3.
- Adjustments to circuit-breaker parameters include increasing failure-threshold to
  10, reducing recovery-timeout to 30000, and decreasing success-threshold to 2.
- To ensure circuit-breaker is enabled, set enabled to true, reduce failure-threshold
  to 3, and set timeout to 10000.
- JAiRouter has a built-in circuit breaker mechanism to prevent service cascades and
  failures.
- '一般服务：标准配置 - failure-threshold: 5, recovery-timeout: 60000, success-threshold: 3'
- '敏感服务：快速熔断 - failure-threshold: 3'
- '稳定服务：宽松熔断 - failure-threshold: 10'
- '实验性服务：极敏感熔断 - failure-threshold: 1'
- '快速恢复服务 - recovery-timeout: 30000'
- '慢速恢复服务 - recovery-timeout: 300000'
- '自适应恢复 - recovery-timeout: 60000, adaptive-recovery: enabled: true, min-timeout:
  30000, max-timeout: 600000, backoff-multiplier: 2'
- '严格恢复 - success-threshold: 5'
- '快速恢复 - success-threshold: 1'
- Uses Prometheus metrics for monitoring circuit breaker status.
- Monitoring and alerting are configured through Prometheus and Grafana.
- '统计窗口优化: 窗口大小 100, 最小请求数 10, 使用滑动窗口'
- '内存优化: 最大统计记录数 1000, 清理间隔 300s'
- '并发优化: 线程安全, 无锁实现, 批量处理'
- Uses Prometheus for monitoring circuit breaker metrics
- Uses file storage by default for configuration data
- Ensure circuit-breaker enabled
- Test fallback response
- 确保存储路径具有适当的读写权限
- 在生产环境中，建议使用绝对路径以避免路径问题
- 配置目录应定期备份以防止数据丢失
- 不同环境应使用不同的存储路径以避免配置冲突
- API Key authentication enabled in application.yml
- Supports multi-level permission control
- Ensure circuit breaker is enabled for it to function correctly.
- 'Supports multi-level permission control: admin, read, write, delete.'
- API Key expiration management is supported.
- 根据服务特性配置不同的熔断策略
- API keys are enabled with permissions for admin, read, write, and delete.
- 支持令牌刷新和黑名单功能
- 可以与 API Key 认证同时使用
- 服务频繁熔断，影响正常使用
- 确保熔断器启用
- Supports JWT authentication with token refresh and blacklist features.
- JAiRouter 使用存储管理器来持久化配置数据和版本控制
- Uses JWT for authentication
- 多级权限控制支持 admin, read, write, delete 等不同权限级别
- 支持设置 API Key 的过期时间
- 双向脱敏：支持请求和响应数据脱敏
- 多种脱敏策略：支持掩码、替换、删除、哈希等策略
- 正则表达式支持：支持复杂的模式匹配
- 白名单机制：支持用户和 IP 白名单
- 性能优化：支持并行处理和缓存优化
- 多级权限控制：支持 admin、read、write、delete 等不同权限级别
- 过期时间管理：支持设置 API Key 的过期时间
- 使用统计：记录每个 API Key 的使用情况
- 缓存优化：支持 Redis 和本地缓存，提升认证性能
- 动态管理：支持运行时添加、删除和更新 API Key
- 支持复杂的模式匹配
- Supports runtime dynamic addition of whitelists
- API Key 认证功能为系统提供了安全的访问控制机制
- 建议通过环境变量设置 API Key
- Uses API key authentication
- 双向脱敏 — 支持请求和响应数据脱敏
- 支持多种脱敏策略
- 支持运行时动态添加白名单
- Supports token refresh and blacklist functionality
- Can coexist with API Key authentication
- Supports token refresh and blacklisting functionality
- JWT authentication must be enabled for use.
- 本文档提供了 JAiRouter 安全功能常见问题的诊断和解决方案，包括认证失败、脱敏问题、性能问题等。
- JWT tokens expire after a specified duration
- Refresh tokens are required to obtain new access tokens
- Supports bidirectional data sanitization
- Multiple sanitization strategies available including masking, replacing, deleting,
  and hashing
- 认证耗时过长
- 系统响应缓慢
- 不同的 AI 服务可以使用不同的脱敏规则
- 启用并行处理
- 脱敏操作耗时过长
- 某些配置需要重启才能生效
- 支持请求和响应数据脱敏
- 通过配置脱敏规则，确保敏感数据不会泄露
- 启用缓存
- 优化线程池
- 减少 API Key 数量
- 优化正则表达式
- 启用流式处理
- 重启应用
- 检查配置优先级
- 验证 YAML 格式
- 使用 OAuth2 进行身份验证 — 需要设置 api 中的连接应用
- 检查环境变量格式
- 检查配置引用
- 重新加载环境变量
- 启用监控功能
- 检查 Actuator 配置
- 验证指标端点
- 检查告警配置
- 测试告警通知
- 检查通知配置
- 启用详细日志
- 使用调试端点
- 一些配置需要重启才能生效
- 确保配置在正确的环境文件中
- Batch size is configurable with a default of 100.
- '文档版本: 1.0.0'
- Checks system health status via /actuator/health
- Checks security configuration status via /admin/security/status
- Ensure correct API Key configuration
- Enable sanitization function for sensitive data
- 认证响应慢可能由于认证耗时过长或系统响应缓慢
- 检查认证性能指标、缓存命中率和线程池状态
- 环境变量值未被读取
- 使用了默认值而非环境变量值
- 日志分析脚本
- 健康检查脚本
- 重新加载配置
- 验证配置
- 备份配置
- Uses API Key for authentication — requires setup of admin token
- 所有管理接口都使用 /api 前缀
- 所有接口都使用 /v1 前缀，确保与 OpenAI API 的兼容性
- 使用 Bearer Token 进行认证
- 使用Bearer Token进行认证
- 使用 OAuth2 认证
- 确保在 Swagger UI 中配置正确的 Bearer Token
- 多阶段构建：优化镜像大小，生产镜像约 200MB
- 多环境支持：开发、测试、生产环境独立配置
- 中国网络优化：专门优化的阿里云 Maven 镜像构建
- 安全最佳实践：非 root 用户，最小权限运行
- 健康检查：内置应用健康监控和自动恢复
- 监控集成：完整的 Prometheus + Grafana 监控栈
- 日志管理：结构化日志和日志轮转
- 配置管理：支持动态配置和热更新
- JWT authentication is enabled by default
- 默认开启JWT认证
- 关闭JWT认证
- 使用中国优化构建脚本
- 或者手动构建
- 提供兼容 OpenAI 格式的统一模型服务接口
- API documentation is available at http://localhost:8080/swagger-ui.html
- OpenAPI JSON can be accessed at http://localhost:8080/v3/api-docs
- Uses Docker for deployment.
- Ensure to map necessary ports for application and debugging.
- JWT_SECRET must be at least 32 characters long
- Production environment requires API keys for access
- JAiRouter API provides a unified model service interface compatible with OpenAI
  format.
- 健康检查的测试命令是 'curl -f http://localhost:8080/actuator/health'
- 健康检查的间隔为 30s，超时为 10s，重试次数为 3，启动周期为 60s
- 使用 JWT 认证 - 需要至少 32 个字符长的密钥
- 使用JWT认证
- '健康检查命令: curl -f http://localhost:8080/actuator/health'
- 关闭JWT认证时需设置JAIROUTER_SECURITY_JWT_ENABLED=false
- Default开启JWT认证
- 建议使用构建脚本进行构建
- 使用多阶段构建减小镜像大小
- 使用 .dockerignore 排除不必要文件
- 最简单的运行方式 默认开启JWT认证
- 最简单的运行方式 关闭JWT认证
- Uses Docker to run the jairouter service
- Uses JWT authentication
- Some configurations may require Docker setup
- 启用健康检查
- JWT认证开启或关闭可通过环境变量JAIROUTER_SECURITY_JWT_ENABLED配置
- Some objects may return nulls in deeply nested fields
- 支持多种构建方式
- 使用自定义网络
- JAiRouter 提供完整的 Docker 化部署方案，支持多环境配置和容器编排。
- Default JWT authentication enabled
- 使用非 root 用户运行容器
- 设置只读文件系统（除必要目录外）
- 限制容器能力
- 设置安全选项
- 结构化日志配置文件路径为 config/application-structured-logging.yml
- JSON 格式日志配置已启用
- 文档详细介绍如何使用 Docker 部署 JAiRouter，包括单机部署、集群部署和监控集成。
- Uses JWT authentication for secure access
- Ensure to set the correct JWT_SECRET for production and development
- Requires setup of connected app in api
- 常见问题
- JWT_SECRET should be at least 32 characters long
- Default Spring profile is prod
- Uses JWT authentication — requires a strong JWT secret key
- 定期扫描镜像漏洞
- 配置网络隔离
- 使用密钥管理工具
- 本文档详细介绍如何使用 Docker 部署 JAiRouter，包括单机部署、集群部署和监控集成。
- 定期更新基础镜像
- 使用镜像扫描工具检查漏洞
- 为不同环境构建不同镜像
- Uses JWT for authentication — requires setup of JWT secret key
- Health check endpoint available at /actuator/health
- 使用阿里云 Maven 镜像，速度提升 5-10 倍
- 使用 Maven Central，稳定可靠
- Uses JWT authentication — requires setup of secret key
- 配置合适的资源限制
- 检查配置文件挂载
- Development environment has a different JWT secret
- 支持在 Kubernetes 集群中部署，提供高可用、自动扩缩容和滚动更新等企业级特性
- 支持高可用性，多实例部署，自动故障转移
- 支持自动扩缩容，基于 CPU/内存/自定义指标自动扩缩
- 使用阿里云镜像
- JAiRouter supports high availability and automatic scaling.
- Ensure proper configuration management using ConfigMap and Secret.
- 生产环境需要配置JWT密钥
- 支持多阶段构建减小镜像大小
- Uses Vertical Pod Autoscaler with auto update mode
- Resource policies include minimum and maximum allowed CPU and memory
- Supports high availability with multi-instance deployment and automatic failover.
- Automatically scales based on CPU/memory/custom metrics.
- Default JWT secret must be at least 32 characters long.
- Uses Docker with different configurations for production and development environments
- 支持在 Kubernetes 集群中部署，提供高可用、自动扩缩容和滚动更新等企业级特性。
- 使用 ConfigMap 和 Secret 管理配置
- 高可用性：多实例部署，自动故障转移
- 支持 PVC 持久化配置和日志
- Uses ConfigMap and Secret for configuration management
- Supports PVC for persistent storage
- Uses Kubernetes Deployments, Services, Ingress, HPA, VPA, and ServiceMonitor.
- ServiceMonitor scrapes metrics from /actuator/prometheus.
- 基于 CPU/内存/自定义指标自动扩缩容
- Uses Prometheus for monitoring.
- Service is accessible at jairouter.example.com
- Metrics available at /actuator/prometheus
- Supports high availability, auto-scaling, and rolling updates.
- 自动扩缩容：基于 CPU/内存/自定义指标自动扩缩容
- 滚动更新：零停机时间更新
- Uses API key for authentication
- Service running on HTTP port 8080
- 服务发现：内置服务发现和负载均衡
- 配置管理：使用 ConfigMap 和 Secret 管理配置
- 持久化存储：支持 PVC 持久化配置和日志
- 设置合适的资源请求和限制
- 使用 HPA 和 VPA 自动扩缩容
- 配置 Pod 中断预算
- 使用反亲和性分散 Pod
- 支持高可用性，自动扩缩容和滚动更新等特性
- 创建命名空间、ConfigMap、Secret、PVC 和 Deployment 是基础部署步骤
- Base64 encoded values for api-key, jwt-secret, and database-password in jairouter-secret
- TLS certificate and key are stored in jairouter-tls
- Uses API Key authentication.
- CORS configuration allows all origins, methods, and headers.
- 支持高可用、自动扩缩容和滚动更新等企业级特性
- 在 Kubernetes 集群中部署
- 支持 Kubernetes 集群中部署
- 推荐使用环境变量配置生产环境的密钥
- Uses Helm for deployment
- Requires setup of secrets for API key and JWT secret
- 生产环境使用环境变量配置
- Production environment uses environment variable configuration for API keys.
- JWT secret and database password are managed through Kubernetes secrets.
- Uses API Key for authentication.
- Prometheus metrics available at /actuator/prometheus
- Uses API Key for authentication
- CORS configuration allows all origins, methods, and headers
- Some configurations may return nulls in deeply nested fields
- Prometheus metrics enabled on port 8080
- Requires setup of connected app for authentication
- 负载均衡：多层负载均衡，流量分发
- 监控告警：全方位监控，及时告警
- 安全加固：多层安全防护
- 备份恢复：完整的备份和恢复策略
- High availability with multi-instance deployment
- 生产环境安全功能（默认关闭，需要显式启用）
- 生产环境 API Key 特定配置
- 生产环境 JWT 配置
- 生产环境数据脱敏配置（严格模式）
- 生产环境审计配置
- 生产环境监控配置
- 生产环境性能配置
- 生产环境监控配置覆盖
- 日志配置
- 部署实例依赖于docker-compose
- 验证集群状态使用HTTP健康检查
- Deploys JAiRouter cluster with multiple instances
- Deployment requires configuration of multiple instances.
- Production environment requires explicit API key configuration
- 部署各个实例需要显式启用生产环境安全功能
- 生产环境监控配置仅授权用户可见健康详情
- Audit logging is enabled with log-level set to INFO
- Logs are stored in /app/logs/audit.log and /app/logs/jairouter.log
- 多实例部署，自动故障转移
- 确保负载均衡器配置正确
- Deploys multiple instances for load balancing
- 支持高可用性和负载均衡配置
- 监控告警功能集成
- 高可用性和负载均衡架构需要配置负载均衡器和多实例部署
- 使用 Docker Compose 部署应用服务器
- Production environment API Key specific configuration is enabled.
- 集群部署完成
- API Key configuration requires a file at /app/config/api-keys.yml
- 结构化日志输出示例提供了 JSON 格式的日志配置
- 生产环境API Key通过环境变量配置
- 日志轮转配置
- 审计日志轮转配置
- JAiRouter 错误日志过多
- JAiRouter 安全事件
- Audit log file is located at /app/logs/audit.log
- Sensitive operations include CONFIG_UPDATE, SERVICE_MANAGEMENT, USER_MANAGEMENT
- Uses API Key authentication for security.
- Ensure to set the correct environment variables for Docker.
- Requires configuration of security settings
- Production environment security features are enabled by default.
- API keys are configured via environment variables.
- 创建 config/application-structured-logging.yml
- Uses API keys for authentication.
- Requires configuration of SSL for secure connections.
- Uses JSON format for structured logging
- JAiRouter 实例 {{ $labels.instance }} 错误日志速率超过 10 条/分钟
- JAiRouter 实例 {{ $labels.instance }} 安全事件速率超过 5 条/分钟
- 至少 2 台负载均衡器
- Production environment requires enabling security features explicitly.
- API keys are managed through environment variables.
- 生产环境需要显式启用安全功能
- JWT和API Key都需要配置
- API Key must be provided in the header for authentication.
- 使用API密钥进行身份验证
- 生产环境需要安全配置
- '用法: $0 <backup_file>'
- JAiRouter 集群健康检查
- 日志轮转配置示例
- 监控脚本示例
- High availability with multiple instances
- Load balancing using HAProxy or Nginx
- JWT token can be used for session management
- 应用程序启动成功
- 使用结构化日志配置
- Production environment requires setup of API keys and JWT.
- 使用阿里云 Maven 镜像，依赖下载速度提升 5-10 倍
- 配置国内 Docker 镜像源，镜像拉取更快
- 针对中国网络环境的连接超时和重试配置
- 使用国内 CDN 服务加速静态资源访问
- 配置国内 DNS 服务器，提升域名解析速度
- API Key required for accessing resources.
- JWT must be provided for secure endpoints.
- 创建备份目录
- 保留最近 30 天的备份
- 文档专门针对中国网络环境提供优化的部署方案，包括网络加速、镜像优化、依赖加速等配置，帮助中国用户获得更好的部署和运行体验。
- JAiRouter 集群健康检查 - 检查各实例健康状态
- 日志轮转 - 处理日志文件的创建和轮转
- 中国网络环境优化部署提供网络加速、镜像优化、依赖加速等配置
- 适用于中国用户的优化方案
- 健康检查缓存时间为30秒
- 使用 API 密钥进行身份验证
- 生产环境安全功能需要显式启用
- JAiRouter 集群健康检查 - $(date)
- '总实例数: ${#INSTANCES[@]}'
- '健康实例: $((${#INSTANCES[@]} - FAILED))'
- '异常实例: $FAILED'
- 使用 JWT 认证，需确保 JWT 密钥长度至少为 32 个字符
- 支持多实例部署，建议使用 Docker Compose
- 针对中国网络环境提供优化的部署方案，包括网络加速、镜像优化、依赖加速等配置
- 启用 JWT 以提高安全性
- 创建恢复目录
- JAiRouter 提供专门的中国优化构建配置
- 针对中国网络环境提供优化的部署方案，包括网络加速、镜像优化、依赖加速等配置，帮助中国用户获得更好的部署和运行体验。
- 优化超时和重试配置
- 健康检查缓存时间设置为30秒
- 使用阿里云 Maven 镜像加速构建
- 针对中国网络环境的 JVM 参数优化
- JAiRouter provides optimized deployment solutions for the Chinese network environment,
  including network acceleration, image optimization, and dependency acceleration
  configurations.
- 应用健康检查通过
- 配置使用国内 AI 服务提供商，减少跨境网络延迟
- 企业微信告警配置需要使用环境变量
- JAiRouter provides optimized deployment solutions for China's network environment,
  including network acceleration, image optimization, and dependency acceleration
  configurations.
- Uses Aliyun Maven mirror for dependency download speed improvement
- Docker image optimization for faster pulls
- 中国网络环境 JVM 优化参数
- 网络优化
- 连接池优化
- Docker 镜像已针对中国网络环境进行了优化
- 国内 DNS 服务器配置为 223.5.5.5, 119.29.29.29, 114.114.114.114, 8.8.8.8
- Docker 容器 DNS 配置使用阿里云 DNS, 腾讯 DNS, 114 DNS
- 使用国内 AI 服务提供商，减少跨境网络延迟
- 国内 SMTP 服务配置为 smtp.qq.com:587
- Checks network connectivity using ping, nslookup, and dig commands
- Checks port connectivity using telnet and nc commands
- JAiRouter provides optimization configurations specifically for the Chinese network
  environment.
- 符合国内法规要求
- JAiRouter provides optimized deployment solutions for network environments in China.
- Uses Aliyun Maven mirrors for faster dependency retrieval.
- 国内短信服务配置使用阿里云
- 国内邮件服务配置使用腾讯
- Provides optimization for China network environments.
- 应用日志保留 90 天
- 安全日志保留 180 天
- 审计日志保留 365 天
- 文档修改后会自动触发部署：推送到 main 分支，GitHub Actions 自动构建文档，部署到 GitHub Pages
- JAiRouter 提供专门的中国优化构建配置。
- 针对中国网络环境的连接超时和重试配置。
- 监控指标配置的启用监控功能
- 指标前缀为 jairouter
- 指标收集间隔为 10s
- 启用的指标类别包括 system, business, infrastructure
- Uses Docker for deployment
- Monitoring enabled in application.yml
- Uses Aliyun for SMS and CDN services
- Logging integrated with Aliyun and Tencent services
- JAiRouter使用内置的Prometheus进行监控
- 确保Docker和Java环境设置正确
- '指标端点无法访问: 访问 `/actuator/prometheus` 返回 404'
- 'Grafana 无法连接 Prometheus: 仪表板显示 ''No data'''
- 监控指标配置启用，前缀为 'jairouter'
- Prometheus 配置的 scrape_interval 为 15s
- Prometheus endpoint may return empty data
- JAiRouter provides optimized deployment solutions for the Chinese network environment.
- 检查 JAiRouter 日志
- 检查 Prometheus 日志
- 检查 Grafana 日志
- 备份配置文件
- Health check endpoint is /actuator/health
- Uses Aliyun and Tencent for logging services
- Prometheus endpoint may return empty data if monitoring metrics are not correctly
  configured.
- 在生产环境中部署前，请确保已经配置了适当的安全措施和资源限制。
- 监控指标配置包含启用监控功能、指标前缀和指标收集间隔等
- Requires Docker for deployment
- Monitor metrics are enabled by default
- 监控指标配置包括启用监控功能和设置指标前缀
- Prometheus 配置中设置了抓取间隔
- 监控功能启用时，指标收集间隔为10秒
- 支持Prometheus和Grafana的配置
- 访问 /actuator/prometheus 返回 404
- 仪表板显示 'No data'
- Requires setup of monitoring stack including Prometheus and Grafana.
- '访问 Grafana URL: http://localhost:3000'
- '用户名: admin'
- '密码: jairouter2024'
- '监控数据为空: Prometheus 端点返回空数据'
- Monitoring metrics collection interval is set to 10s
- Prometheus scrape interval is set to 15s
- 建议定期备份重要的仪表板配置，并建立仪表板变更的审核流程
- Some metrics may return nulls in deeply nested fields
- 服务不可用时抑制其他告警
- 严重告警抑制警告告警
- 严重错误率告警抑制慢查询告警（因为慢查询可能导致错误率升高）
- Prometheus 端点返回空数据
- '访问 Grafana 时使用默认用户名和密码: admin/jairouter2024'
- 本指南详细介绍如何使用 JAiRouter 的 Grafana 仪表板进行系统监控、性能分析和故障诊断。
- '最后更新: 2025-08-19'
- Uses email configuration for alerts
- Supports multiple notification channels including Slack and Dingtalk
- 告警路由配置 includes group_by, group_wait, group_interval, repeat_interval, receiver.
- 抑制规则 defines source_match and target_match criteria.
- 告警配置指南介绍如何配置和管理 JAiRouter 的告警系统，包括告警规则设置、通知配置和告警处理流程。
- Documentation version 1.0.0
- Last updated on 2025-08-19
- 使用 OAuth2 with refresh token — requires setup of connected app in api
- 定期回顾和优化告警规则，确保告警的有效性和准确性。避免告警疲劳，保持团队对告警的敏感度。
- Enabled slow query alerts by default.
- Configuration is separated into modular files.
- The slow query alert configuration is modular and can be imported from separate
  YAML files.
- Error tracking is enabled by default.
- Sensitive information is automatically sanitized.
- Enabled error tracking is configurable through error-tracking.yml
- Different environments can override settings in respective application-{profile}.yml
  files
- 告警静默和抑制规则可以通过 amtool 创建或管理
- '自助排查: 使用本文档进行初步诊断'
- '收集信息: 运行诊断脚本收集相关信息'
- Prometheus targets 页面显示 JAiRouter 为 down 状态
- 某些指标缺失
- 指标值与实际情况不符
- 确认告警真实性
- 评估业务影响范围
- 降低采样率
- 优化缓存
- 告警配置指南包括告警规则设置、通知配置和告警处理流程
- 监控影响应用性能
- 指标数据不一致
- 监控健康检查命令可用于快速诊断
- 使用 Prometheus 进行指标收集
- '启用异步处理 — async-thread-pool-size: 4, batch-size: 500, buffer-size: 2000'
- '降低采样率 — request-metrics: 0.1, backend-metrics: 0.5, infrastructure-metrics: 0.1'
- 慢查询告警功能支持自动检测
- 支持按操作类型设置不同的检测阈值
- 查询响应时间长
- Grafana仪表板加载缓慢
- 使用 Prometheus 监控
- 确保指标端点配置正确
- 慢查询告警功能集成了分布式追踪、结构化日志记录和 Prometheus 指标导出
- 可以为不同的操作类型配置不同的告警策略
- Enable asynchronous processing with a thread pool size of 4 and batch size of 500.
- Memory cache size is set to 5000 with a cache expiry of 2m.
- 'Sampling rates are set to request-metrics: 0.1, backend-metrics: 0.5, and infrastructure-metrics:
  0.1.'
- Enable error tracking in error-tracking.yml
- Configure sanitization for stack traces
- 使用本文档进行初步诊断
- 运行诊断脚本收集相关信息
- 在项目 Issues 中搜索相似问题
- 联系开发团队，提供诊断信息
- Error tracking requires configuration in the error-tracking.yml file
- Different environments can override configurations through their respective profiles
- 增加抓取间隔为30s
- 针对重要服务保持较短间隔为15s
- Uses standard HTTP endpoints for monitoring
- Ensure actuator endpoints are enabled in application configuration
- 监控系统常见问题的诊断和解决方案，帮助快速定位和修复监控相关问题
- 使用监控健康检查命令进行快速健康检查
- Prometheus 端点用于获取指标
- 增加抓取间隔
- 针对重要服务保持较短间隔
- 建议建立监控问题处理的知识库，记录常见问题和解决方案，提高团队的问题处理效率。
- Uses tracing configuration in application.yml
- '启用异步处理 — async-processing: true'
- Uses Jaeger for distributed tracing — recommended for production
- Ensure tracing is enabled in configuration
- Uses module-based configuration for tracing
- Supports multiple environments with specific configurations
- 监控开销可能影响应用性能
- 系统会自动检测超过阈值的请求
- 临时提高采样率进行调试
- '社区支持: 在项目 Issues 中搜索相似问题'
- '技术支持: 联系开发团队，提供诊断信息'
- 推荐配置包括基础采样率、每秒最大追踪数、错误采样率等
- 监控健康检查通过 /actuator/health
- Prometheus 端点通过 /actuator/prometheus
- Increase scrape interval
- Use shorter intervals for critical services
- 监控 Prometheus 自身
- 监控 AlertManager
- 监控指标收集延迟
- 将采样率临时设置为1.0进行调试
- 启用调试日志
- Uses monitoring system for health checks and metrics collection
- Uses tracing features for distributed tracing.
- Common issues include missing traceId and spanId.
- Java 17 或更高版本
- JAiRouter 服务已正常运行
- 对 YAML 配置文件有基本了解
- 追踪未启用 | 设置 `jairouter.tracing.enabled=true`
- 采样率过低 | 临时设置 `sampling.ratio=1.0` 进行测试
- 导出器配置错误 | 检查导出器端点和认证配置
- 过滤器顺序问题 | 确保 TracingWebFilter 在过滤器链前端
- Enable tracing by setting jairouter.tracing.enabled=true in application.yml
- 设置 `jairouter.tracing.enabled=true`
- 临时设置 `sampling.ratio=1.0` 进行测试
- 确保 TracingWebFilter 在过滤器链前端
- 'Service version: 1.0.0'
- 'Service name: jairouter'
- Uses tracing features with sampling configuration
- Debug logging can be enabled for tracing
- 1. 追踪数据缺失
- 2. 部分数据丢失
- 3. 追踪导致性能下降
- 4. 内存泄漏
- 5. 配置不生效
- 6. 动态配置更新失败
- 7. Jaeger 连接失败
- 8. OTLP 导出错误
- 9. 响应式流中上下文丢失
- 10. 线程池中上下文丢失
- 根据实际负载调整采样率
- 启用异步处理减少阻塞
- 定期清理过期数据
- 监控系统资源使用
- 追踪未启用时，设置 `jairouter.tracing.enabled=true`
- 每个 Span 平均占用内存：约 2KB
- 每秒 1000 个请求，采样率 10%，Span TTL 5分钟
- 追踪未启用，设置 `jairouter.tracing.enabled=true`
- Sensitive headers include Authorization, Cookie, X-API-Key
- 追踪系统需要开启相关配置
- Check if tracing feature is enabled using /actuator/health/tracing
- Ensure TracingWebFilter is at the front of the filter chain
- 追踪未启用时需要设置 `jairouter.tracing.enabled=true`
- 采样率过低时可以临时设置 `sampling.ratio=1.0` 进行测试
- 建议配置内存 max-spans 为 100000
- 本文档为生产环境中 JAiRouter 分布式追踪系统的运维提供完整指南。
- Uses environment variables for sensitive configuration management.
- Uses adaptive sampling strategy with a base sample rate of 0.01 and a max of 100
  traces per second
- Monitoring and alerting features are available
- Requires setup of sensitive headers for security.
- Configuration should be regularly backed up.
- Requires setup of JAiRouter with proper configuration.
- Sensitive headers include Authorization, Cookie, and X-API-Key
- Java 17 or higher version required
- Maven 3.8+ recommended using the project's built-in Maven Wrapper
- Git 2.20+ required
- 'IDE recommended: IntelliJ IDEA or Eclipse'
- Requires setup for API Key management
- Supports tracing metrics collection
- JAiRouter 采用多层次的测试策略，确保代码质量和系统稳定性。
- 本指南涵盖了单元测试、集成测试、性能测试等各个方面。
- Regularly check sensitive data for proper sanitization
- Requires JVM 17 or higher
- 测试覆盖率不低于 80%
- 所有测试必须通过
- 无 Checkstyle 和 SpotBugs 警告
- 该类是线程安全的，可以在多线程环境中使用。
- 使用环境变量管理敏感配置
- 支持的日志存储配置
- GitHub Actions quality check includes steps for Checkstyle, SpotBugs, and tests
  with coverage
- 通过遵循这些代码质量标准，JAiRouter 项目能够保持高质量的代码库，提高开发效率和系统稳定性。
- 测试文档能够正确构建和发布到 GitHub Pages
- 每月性能审计
- 依赖包更新
- 安全漏洞扫描
- 确保使用 Java 17 或更高版本
- JAiRouter 项目采用严格的代码质量标准，通过自动化工具和人工审查相结合的方式，确保代码的可读性、可维护性和安全性。
- 如果配置中指定的类型不支持，将抛出 IllegalArgumentException 异常。
- JAiRouter项目采用严格的代码质量标准，通过自动化工具和人工审查相结合的方式，确保代码的可读性、可维护性和安全性。
- 后端服务正常运行
- Ensure application.yml format is correct
- Application requires Java 17 or higher
- 增加权重
- 使用GitHub Pages内置全球CDN
- 支持HTTP/2和HTTPS
- 正常请求被限流或者限流不起作用
- Prometheus无法抓取指标，Grafana显示"No data"
- 使用 Lighthouse CLI
- 使用 WebPageTest API
- 日志文件过大
- 重要信息被淹没
- Ensure application has write permissions for config files
- 仅开发环境下信任所有证书
- 支持代理头
- 容器被 OOM Killer 终止
- 应用异常退出
- Ensure application.yml format is correct.
- Increase heap memory size if OutOfMemoryError occurs.
- Check if backend service is running
- Check that the backend service is running.
- '如果以上解决方案无法解决您的问题，请查看详细日志: 启用 DEBUG 级别日志获取更多信息'
- '搜索已知问题: 在 GitHub Issues 中搜索类似问题'
- Load balance type is round-robin
- Prometheus 无法抓取指标，Grafana 显示 'No data'
- API 响应时间超过 5 秒
- 用户反馈系统响应缓慢
- P95 响应时间持续上升
- 仅开发环境中信任所有证书
- JVM 参数已优化
- 连接池配置合理
- 监控指标已启用
- 告警规则已设置
- 文档版本：1.0.0
- 最后更新：2025-08-19
- 缓存策略已配置
- 生产环境推荐配置
- 固定堆大小，避免动态调整
- 使用 G1 垃圾收集器
- 最大 GC 暂停时间
- G1 区域大小
- 新生代比例
- 新生代最大比例
- GC 触发阈值
- 启用实验性选项
- 字符串去重
- '查看详细日志: 启用 DEBUG 级别日志获取更多信息'
- '提交新问题: 创建新的 Issue，包含详细的错误信息和环境描述'
- '参与社区讨论: 在项目讨论区寻求帮助'
- GC日志配置
- 根据后端服务数量调整
- 空闲连接保持时间
- 连接最大生命周期
- 获取连接超时
- 等待队列大小
- JAiRouter 性能基准测试
- 性能监控指标包括响应时间、吞吐量、错误率、CPU使用率、内存使用率和活跃连接数。
- 使用Apache Bench和wrk进行压力测试。
- API 响应时间超过 5 秒可能导致性能问题
- 使用 Apache Bench 和 wrk 进行压力测试
- Performance metrics collection interval is 30s
- Alerts are triggered based on defined rules
- 响应时间在正常范围
- CPU 使用率 < 80%
- 内存使用率 < 85%
- GC 暂停时间 < 200ms
- 错误率 < 1%
- 分析性能趋势
- 识别性能瓶颈
- 调整配置参数
- 更新优化策略
- 验证优化效果
- 性能监控配置中启用响应时间直方图
- 告警规则中，P95 响应时间过高将触发警报
- 'Git 提交: c1aa5b0f'
- '作者: Lincoln'
- 性能监控指标包括响应时间、吞吐量、错误率等
- 提供多种性能优化策略
- Provides diagnostic methods and optimization strategies for performance issues.
- -Xlog:gc*:gc.log:time,tags
- -XX:+UseGCLogFileRotation
- -XX:NumberOfGCLogFiles=5
- -XX:GCLogFileSize=10M
- 工作线程数 = CPU 核数 * 2
- 初始缓冲区
- 最大缓冲区
- 连接超时
- 指标收集间隔
- 启用响应时间直方图
- 百分位数
- 文档提供 JAiRouter 性能问题的诊断方法和优化策略
- 根据后端服务数量调整最大连接数
- 空闲连接保持时间为30秒
- 连接最大生命周期为300秒
- 获取连接超时时间为10秒
- 等待队列大小上限为1000
- API response time exceeds 5 seconds
- User feedback indicates system responsiveness issues
- 获取连接超时为10秒
- 等待队列大小为1000
- 启用调试模式需要设置 Spring profiles active 为 dev
- 使用 Docker 部署时可配置调试端口
- Logs are stored in logs/jairouter-debug.log
- Debug mode can be enabled via application-dev.yml
- 启用内存泄漏检测需要使用特定的Java参数
- 使用DEBUG级别日志进行调试
- 启用内存泄漏检测
- 分析 GC 日志
- 监控功能默认启用，可能会增加少量性能开销
- JAiRouter 响应时间过高
- JAiRouter CPU 使用率过高
- JAiRouter 内存使用率过高
- 性能优化检查清单包含部署前检查、运行时监控、定期优化
- 性能测试工具使用 Apache Bench (ab)
- 在极高并发场景下（>10k RPS），监控指标可能出现轻微延迟
- Docker 容器在某些网络环境下可能出现 DNS 解析缓慢
- 性能监控指标获取方法提供了多种API调用
- 核心功能永久免费
- 社区支持
- 基础文档和教程
- JAiRouter 是完全开源免费的项目，采用 MIT 许可证
- JAiRouter is fully open source and free under the MIT license.
- 高并发优化策略包括水平扩展和负载均衡
- 常见启动问题包括端口被占用和配置文件错误
- 系统无法处理高并发请求可能导致吞吐量不足
- JAiRouter 是完全开源免费的项目，采用 MIT 许可证。
- 常见启动问题和解决方案
- 端口被占用
- 配置文件错误
- Java 版本不兼容
- 预热阶段...
- 基准测试...
- 压力测试...
- 生成性能报告...
- 'Document version: 1.0.0'
- 'Last updated: 2025-08-19'
- 性能监控配置使用 Prometheus 来收集指标
- 告警规则设置针对高响应时间、高 CPU 使用率和高内存使用率
- JAiRouter 采用 MIT 许可证，允许商业使用。
- 启用调试模式
- 使用 curl 调试
- 使用 httpie 调试
- 启用内存泄漏检测 involves various Java options to enable heap dump and GC logging
- Logging level for org.unreal.modelrouter is set to DEBUG
- Debug mode is enabled
- 每分钟检查一次线程状态
- JAiRouter 项目将继续秉承开源精神，致力于为用户提供最优秀的 AI 模型服务路由解决方案。
- 我们欢迎社区的参与和贡献，共同推动项目的发展和进步。
- JAiRouter is open-source and free under MIT license.
- 高并发优化策略包括水平扩展、负载均衡、增加连接池大小、启用响应缓存、合理设置限流参数、实时监控性能指标
- 常见启动问题包括端口被占用、配置文件错误、Java 版本不兼容
- JAiRouter is open-source and free to use under MIT license.
- 作为代理服务和负载均衡器的集成方式
- Uses MIT license, allows commercial use.
- JAiRouter is a Spring Boot-based AI model service routing and load balancing gateway
  that provides unified access to various AI model services through OpenAI-compatible
  APIs.
- Enable security features in application.yml
- Use strong API Keys (at least 32 characters)
- Docker Deployment is recommended
- Containerized deployment available
- Docker deployment is recommended
- Environment variables can be used for configuration
- JAiRouter adopts a modular configuration structure, separating different functional
  configurations into independent configuration files to improve maintainability and
  readability.
- Supports Docker and Kubernetes deployment.
- Exposes metrics for Prometheus integration.
- Uses API Key Authentication for service-to-service communication.
- Supports JWT Authentication for user authentication.
- 'JAiRouter supports two main configuration approaches: Static Configuration and
  Dynamic Configuration'
- Uses Docker for deployment — recommended method.
- Supports multiple deployment strategies
- Uses multiple authentication mechanisms including API Key and JWT.
- Containerized deployment supports multiple strategies
- JAiRouter provides comprehensive monitoring capabilities to help you track performance,
  health, and usage patterns of your AI model routing gateway.
- Use environment variables for configuration
- Prometheus metrics are exposed for monitoring
- Use HTTPS in production
- Implement proper firewall rules
- Supports Docker and Kubernetes deployment strategies.
- Environment variables can be used for configuration.
- JAiRouter provides multiple health check endpoints and metrics collection.
- Metrics can be accessed in Prometheus or JSON format.
- Uses multi-layered security mechanisms to protect your deployment
- Uses API Key authentication for service-to-service communication
- Ensure to configure proper firewall rules
- JAiRouter provides multiple health check endpoints.
- Metrics are exposed in multiple formats.
- Integrates OpenTelemetry-based distributed tracing system
- Recommended for users in China to use './mvnw clean package -Pchina' to build the
  project.
- Service started normally (`curl http://localhost:8080/actuator/health`)
- Port listening normally (`netstat -tlnp | grep :8080`)
- JAiRouter provides comprehensive monitoring capabilities to track performance, health,
  and usage patterns.
- Metrics are exposed in multiple formats like Prometheus and JSON.
- Metrics are available in multiple formats.
- 'Java: Version 17 or higher'
- 'Maven: 3.8+ (It is recommended to use the Maven Wrapper included in the project)'
- 'Git: 2.20+'
- 'IDE: IntelliJ IDEA (recommended) or Eclipse'
- Service health status can be checked via the health check endpoint.
- Request statistics and response time can be monitored through specific metrics endpoints.
- Service health status can be checked at /actuator/health
- Monitoring metrics are available at /actuator/metrics
errors:
- '400: invalid_request: Malformed request'
- '404: not_found: Resource not found'
- '429: rate_limit_exceeded: Rate limit exceeded'
- '500: internal_error: Internal server error'
- '503: service_unavailable: No available instances'
- '503: circuit_breaker_open: Circuit breaker is open'
- 缺少必需字段
- 无效配置值
- '缺少必需字段: baseUrl'
- '缺少必需字段: 无效 - 缺少 baseUrl'
- '无效配置值: 不支持的负载均衡类型'
- ❌ 无效 - 缺少 baseUrl
- ❌ 无效 - 不支持的负载均衡类型
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: invalid_request: 请求格式错误'
- '404: not_found: 资源未找到'
- '429: rate_limit_exceeded: 超出限流限制'
- '500: internal_error: 内部服务器错误'
- '503: service_unavailable: 无可用实例'
- '503: circuit_breaker_open: 熔断器已打开'
- '401 Unauthorized: Recheck API Key permissions'
- '403 Forbidden: Check permissions for the key used'
- 'APPLICATION_STARTUP_FAILED: 检查端口占用'
- 'HEALTH_CHECK_FAILED: 手动健康检查'
- 应用启动失败
- 健康检查失败
- 性能问题
- 启动失败和配置错误
- 连接超时和网络问题
- 内存泄漏和性能下降
- 负载均衡和限流配置问题
- '常见问题: 发现问题请及时报告'
- 'UnsupportedClassVersionError: 升级到 JDK 17+'
- 'Port 8080 was already in use: 更改端口或停止占用进程'
- 'OutOfMemoryError: 增加 JVM 内存'
- '依赖下载失败: 使用阿里云镜像或配置代理'
- 'Docker 构建失败: 检查 Docker 版本或清理 Docker 缓存'
- 'Docker 构建失败: 检查 Docker 版本'
- Ensure JDK 17 or higher is installed.
- Check if the port 8080 is occupied.
- 中国用户使用阿里云镜像或配置代理
- '服务启动失败: 查看安装指南故障排查'
- 'API 调用返回错误: 查看故障排查文档'
- '429 Too Many Requests: 请求过多，检查限流配置'
- '404 Not Found: 检查API路径是否正确'
- '429 Too Many Requests: Rate limiting in effect'
- '404 Not Found: Check if the endpoint path is correct'
- '500 Internal Server Error: Server-side issue, check logs'
- 服务暂时不可用，请稍后重试。
- 'CONFIG_LOAD_FAILED: Check configuration file paths and syntax.'
- '配置不生效: 检查 API 响应是否成功'
- '实例添加失败: 检查网络连通性'
- '配置合并失败: 检查配置文件格式是否正确'
- '连接跟踪配置: 启用连接跟踪'
- 请求处理时间变化大导致的负载不均衡可能会影响性能
- 未能根据客户端IP保持会话可能导致状态丢失
- '429 Too Many Requests: Recheck rate limit settings'
- '连接超时: 检查服务实例的健康状态'
- '配置错误: 确保配置文件符合要求'
- '连接数超过限制: 减少连接数'
- '请求超时: 检查请求处理时间'
- '401 未授权: 检查 OAuth 范围或令牌过期'
- '500 Internal Server Error: Please check the server logs.'
- '429 Too Many Requests: Rate limit exceeded.'
- '500 Internal Server Error: Check server logs for details'
- '404 Not Found: Verify endpoint URL and service availability'
- '429 Too Many Requests: Rate limit exceeded'
- '限流过于严格: 检查拒绝率和配置'
- '内存使用过高: 检查客户端数量和清理策略'
- '限流不生效: 检查配置是否正确加载'
- 失败次数超过阈值
- 恢复检测时间到
- 'Circuit breaker is OPEN: Request will be rejected'
- 'REQUEST_LIMIT_EXCEEDED: Throttle requests or reduce frequency'
- 'QUERY_TIMEOUT: Increase timeout or reduce request complexity'
- '500 Internal Server Error: Indicates a failure in the backend service'
- '503 Service Unavailable: Indicates the service is currently unavailable due to
  overload or maintenance'
- '503 Service Unavailable: Service temporarily unavailable'
- 熔断状态，直接拒绝请求，返回熔断错误
- 请求超时：请检查请求参数
- 熔断器状态错误：请检查熔断器配置
- 'ALERT_TOO_MANY: Too many alerts fired, reduce alerting frequency.'
- '熔断错误: 直接拒绝请求，返回熔断错误'
- '5xx Server Error: Indicates a failure in the backend service being called.'
- 'Timeout: Indicates that the request to the backend service has exceeded the timeout
  limit.'
- '400 Bad Request: Check your query syntax.'
- '404 Not Found: The requested metrics may not exist.'
- 'service_unavailable: External AI service temporarily unavailable'
- '500 Internal Server Error: 服务不可用'
- 半开状态，允许少量请求测试服务恢复
- 失败次数超过阈值时，熔断器会直接拒绝请求
- '503 Service Unavailable: Check if Prometheus server is running'
- '存储目录不存在: 确保目录存在并具有适当的权限'
- '权限问题: 检查应用程序运行用户对存储目录的读写权限'
- 超过失败阈值时熔断
- '404 Not Found: Check the endpoint URL.'
- '500 Internal Server Error: Check the server logs for details.'
- '认证失败: Check API Key permissions.'
- '权限不足: Check permissions assigned to the API Key.'
- '401 Unauthorized: API Key 不正确或已过期或已被禁用或请求头名称不正确'
- '403 Forbidden: API Key 权限不足'
- 失败次数超过失败阈值时熔断
- 请求超时时间已达到
- '503 Service Unavailable: 熔断器已开启'
- 'LOGIN_FAILED: 登录失败: 用户名或密码错误'
- Invalid JWT token
- JWT token has expired
- JWT token has been revoked
- '磁盘空间不足: 确保有足够的空间存储配置数据和版本历史'
- '自动合并功能未生效: 检查store.auto-merge配置是否设置为true'
- 1. Token validation failed
- 2. Token expired
- 3. Blacklist issue
- '脱敏不生效: 检查配置是否正确'
- '性能问题: 优化正则表达式'
- 'LOGIN_FAILED: Check username or password.'
- 认证失败
- 脱敏不生效
- 权限不足
- '401 Unauthorized: Invalid API Key or API Key not found'
- '401 Unauthorized: Invalid JWT token or JWT signature verification failed'
- '403 Forbidden: Insufficient permissions'
- '401 Unauthorized: Invalid API Key or JWT token'
- 脱敏不生效：检查敏感词或正则表达式配置
- 性能问题：优化规则或减少请求频率
- '401 Unauthorized: Invalid API Key'
- '401 Unauthorized: Invalid JWT token'
- 脱敏不生效：请检查配置
- 性能问题：请优化正则表达式
- 误脱敏：检查敏感词和模式配置
- 'Unauthorized: Check API Key or JWT token'
- '401 Unauthorized: Invalid API Key or token'
- 'invalid_request_error: 请求参数错误'
- 'authentication_error: 认证失败'
- 'permission_error: 权限不足'
- 'not_found_error: 资源不存在'
- 'rate_limit_error: 请求频率超限'
- 'api_error: API 内部错误'
- 'overloaded_error: 服务过载'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Invalid authentication credentials'
- '401 Unauthorized: Invalid API Key or not found'
- '400: 请求参数错误'
- '404: 资源不存在'
- '500: 服务器内部错误'
- '501: 功能未实现'
- 常见错误类型
- '401: 认证失败'
- '400 Bad Request: 请求参数错误'
- '401 Unauthorized: 检查 Bearer Token'
- '400: Bad Request - Invalid parameters'
- '401: Unauthorized - Invalid or missing token'
- '500: Internal Server Error - Unexpected error occurred'
- '401 Unauthorized: Check JWT_SECRET and API keys'
- '500 Internal Server Error: Check service configuration'
- '400: Bad Request - Check request parameters'
- '401: Unauthorized - Verify Bearer Token'
- '健康检查失败: curl -f http://localhost:8080/actuator/health || exit 1'
- '404 Not Found: Check the endpoint and parameters'
- '500 Internal Server Error: Review server logs for details'
- '401 Unauthorized: Recheck JWT token expiration'
- '401 Unauthorized: Check your JWT token'
- '401 Unauthorized: Check your JWT secret and permissions'
- '500 Internal Server Error: Check server logs for more details'
- '401 Unauthorized: Recheck JWT secret or token expiration'
- '401 Unauthorized: Recheck JWT token or expiration'
- '容器启动失败: 查看容器状态'
- '健康检查失败: 手动执行健康检查'
- '401 Unauthorized: 检查JWT密钥'
- '401 Unauthorized: Check JWT token validity.'
- '请求超出限制: 限制 API 调用或减少频率'
- '查询超时: 拆分过滤器或增加选择性'
- '401 Unauthorized: Check API key or authentication method.'
- '401 Unauthorized: Check API key configuration'
- '500 Internal Server Error: Check service status'
- '404 Not Found: Check if the service is deployed correctly'
- '403 Forbidden: Ensure you have the right permissions'
- 'Unauthorized: Recheck API key or secret'
- '401 Unauthorized: Check API Key validity'
- '404 Not Found: Verify endpoint path'
- '500 Internal Server Error: Check service health'
- '401 Unauthorized: Recheck API Key'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Recheck API key or permissions'
- 'HTTP 500: 服务器内部错误'
- 'HTTP 404: 找不到指定的路径'
- '404 Not Found: Check the endpoint path'
- '401 Unauthorized: Invalid API key or authorization header'
- '404 Not Found: Validate the endpoint path'
- '403 Forbidden: Insufficient permissions for the requested resource'
- '503 Service Unavailable: 检查应用服务器是否正常运行'
- '401 Unauthorized: 检查 API 密钥是否正确'
- 'AUTHENTICATION_FAILURE: 检查API密钥或JWT配置'
- '404 Not Found: Verify the endpoint path'
- '503 Service Unavailable: 检查后端服务运行状态'
- '401 Unauthorized: 检查API密钥或JWT配置'
- '401 Unauthorized: Recheck API Key or token expiration'
- '403 Forbidden: Check user permissions'
- '401 Unauthorized: Check API key validity.'
- '503 Service Unavailable: Check service health.'
- '401 Unauthorized: Check API Key or JWT configuration'
- JAiRouter 实例宕机
- JAiRouter 错误率过高
- JAiRouter 响应时间过长
- JAiRouter 内存使用率过高
- JAiRouter 限流拒绝率过高
- JAiRouter 熔断器开启
- '429 Too Many Requests: 请求频率过高，请求被拒绝'
- '500 Internal Server Error: 服务器内部错误'
- '401 Unauthorized: Recheck API keys or access permissions'
- '401 Unauthorized: Check API key or JWT.'
- '401 Unauthorized: Check API key or JWT token.'
- '404 Not Found: Ensure the endpoint is correct.'
- '500 Internal Server Error: Check server logs for more details.'
- '500 Internal Server Error: 服务异常，请稍后重试'
- '404 Not Found: 请求的资源不存在'
- '401 Unauthorized: Check API Key or JWT token.'
- 请求超出限制：限制API调用或减少频率
- 查询超时：分解过滤器或增加选择性
- '401 Unauthorized: Recheck API Key or JWT configuration'
- 'AUTHENTICATION_FAILURE: Check credentials'
- 'ACCESS_DENIED: Check permissions'
- '401 Unauthorized: Check your API key'
- '401 Unauthorized: Check API Key and permissions.'
- '403 Forbidden: 检查API密钥的权限'
- '404 Not Found: 检查端点路径'
- '408 Request Timeout: Check server health or increase timeout settings'
- '400 Bad Request: Check your request parameters'
- '404 Not Found: Verify the endpoint URL'
- '401 Unauthorized: Invalid API key'
- '404 Not Found: Endpoint does not exist'
- '500 Internal Server Error: Unexpected server error'
- '401 Unauthorized: Recheck API key'
- '401 Unauthorized: Recheck API keys or token expiration'
- '401 Unauthorized: Check API Key or JWT validity'
- '网络连接不稳定: 服务调用失败率高'
- 'Maven 依赖下载慢: 构建时间长，经常超时'
- 'Docker 镜像拉取慢: 部署时间长，可能失败'
- '401 Unauthorized: 检查 API 密钥是否有效'
- '401 Unauthorized: 检查 API 密钥或 JWT 令牌是否有效'
- '500 Internal Server Error: 后端服务故障，检查服务日志'
- '401 Unauthorized: 检查 API 密钥或 JWT'
- 'ERROR: Docker not running or not installed'
- '404: 指标端点无法访问'
- '404: Resource not found'
- 'No data: Check Grafana connection to Prometheus'
- '404 Not Found: Check if the endpoint is correctly set up'
- 'No data: Verify Prometheus connection in Grafana'
- '401 Unauthorized: Recheck credentials or permissions'
- '404 Not Found: Check endpoint paths or configuration'
- '404: Endpoint not found - Check if the correct path is used.'
- '404: Accessing /actuator/prometheus returns 404'
- '404 Not Found: Check if the endpoint is correct'
- '401 Unauthorized: Recheck basic auth credentials'
- '400 Bad Request: Check query parameters for correctness.'
- '404 Not Found: Verify the endpoint path.'
- 'Invalid request: Check the endpoint path and parameters.'
- Prometheus targets 页面显示 JAiRouter 为 down 状态
- '空数据: Prometheus 端点返回空数据'
- '告警未触发: 满足告警条件但未收到通知'
- '404: Endpoint not found'
- '500: Internal server error'
- '200: 指标数据为空或不完整'
- '200: 指标数据不准确'
- '指标不准确: 指标值与实际情况不符'
- '存储错误: Prometheus 日志显示存储错误'
- 'INTERNAL_SERVER_ERROR: Check the service logs for more details'
- 'INVALID_REQUEST: Ensure that the request parameters are correct'
- '503: Service unavailable'
- '空数据: 指标数据为空或不完整'
- '不准确: 指标数据不准确'
- '延迟: 指标更新延迟'
- '404: Not Found'
- '500: Internal Server Error'
- 'Q: 追踪数据没有导出: Check if tracing is enabled and exporter configuration'
- 'Q: 性能影响过大: Reduce sampling rate and enable asynchronous export'
- '追踪未启用: 设置 `jairouter.tracing.enabled=true`'
- '采样率过低: 临时设置 `sampling.ratio=1.0` 进行测试'
- '导出器配置错误: 检查导出器端点和认证配置'
- '过滤器顺序问题: 确保 TracingWebFilter 在过滤器链前端'
- 'OutOfMemoryError: Check for memory leaks.'
- 'Invalid configuration: Verify YAML syntax.'
- 'Failed to export spans to Jaeger: Connection refused'
- Check if jairouter.tracing.enabled=true
- Verify exporter configuration
- Check network connectivity to Jaeger/OTLP endpoints
- 'UNAUTHENTICATED: 认证失败'
- 'RESOURCE_EXHAUSTED: 降低采样率或联系服务提供商'
- 'DEADLINE_EXCEEDED: 增加导出超时时间'
- 'UNAUTHENTICATED: Check API Key configuration'
- 'RESOURCE_EXHAUSTED: Reduce sampling rate or contact service provider'
- 'DEADLINE_EXCEEDED: Increase export timeout'
- 'TRACING_001: 追踪服务未初始化'
- 'TRACING_002: 采样策略配置错误'
- 'TRACING_003: 导出器连接失败'
- 'TRACING_004: 内存不足'
- 'TRACING_005: 上下文传播失败'
- 'UNAUTHENTICATED: Check API key configuration'
- '401 Unauthorized: Recheck API Key.'
- 'UNAUTHENTICATED: 认证失败，检查 API 密钥配置'
- 'RESOURCE_EXHAUSTED: 配额不足，降低采样率或联系服务提供商'
- 'DEADLINE_EXCEEDED: 超时，增加导出超时时间'
- 'TRACING_001: 追踪服务未初始化 — 检查配置并重启服务'
- 'TRACING_002: 采样策略配置错误 — 验证采样配置语法'
- 'TRACING_003: 导出器连接失败 — 检查网络和端点配置'
- 'TRACING_004: 内存不足 — 增加内存或调整配置'
- 'TRACING_005: 上下文传播失败 — 检查异步操作实现'
- '404 Not Found: Check the endpoint path or resource availability.'
- '500 Internal Server Error: Review server logs for details.'
- '404 Not Found: Check the endpoint path.'
- '500 Internal Server Error: Review server logs for more information.'
- '401 Unauthorized: Check API Key'
- '500 Internal Server Error: Check the logs for more details'
- '测试超时: 测试逻辑'
- '内存泄漏: 清理资源'
- '并发问题: 使用 CountDownLatch 同步多线程测试'
- 测试超时
- 内存泄漏
- 并发问题
- 'Connection refused: localhost/127.0.0.1:9090'
- Read timeout on GET http://localhost:9090/v1/chat/completions
- 'PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException'
- 'Could not resolve placeholder: Check configuration file format'
- 'Connection refused: Ensure backend service is running'
- 'Read timeout on GET: Adjust timeout configuration'
- Error starting ApplicationContext. To display the conditions report re-run your
  application with 'debug' enabled.
- '限流配置不当: 调整限流参数'
- '监控指标缺失: 启用监控端点'
- 4xx/5xx 错误率 > 5%
- CPU 使用率 > 85%
- 内存使用率 > 90%
- '400 Bad Request: 检查请求格式'
- '404 Not Found: 确认路径正确'
- '500 Internal Server Error: 后端服务异常'
- 响应时间在正常范围
- CPU 使用率 < 80%
- 内存使用率 < 85%
- GC 暂停时间 < 200ms
- 错误率 < 1%
- 'HighResponseTime: P95 响应时间超过5秒'
- 'HighCPUUsage: CPU 使用率超过0.85'
- 'HighMemoryUsage: 内存使用率超过90%'
- 'ERROR: Connection refused'
- 'WARN: Potential performance issue detected'
- '性能瓶颈: 大规模部署下的性能挑战'
- '兼容性: 多版本 API 兼容性维护'
- '安全性: 安全漏洞和攻击防护'
- 'Missing Required Fields: Ensure baseUrl is provided for service instances.'
- 'Permission Issues: Check user permissions for accessing resources.'
- '401 Unauthorized: Recheck API key or JWT token.'
- '401 Unauthorized: Recheck API key or JWT token expiration'
- '401 Unauthorized: Recheck authentication settings'
- 'Port Already in Use: Check what''s using the port'
- 'Permission Issues: Fix file permissions'
- 'Memory Issues: Monitor memory usage'
- 'High Response Times: Investigate potential bottlenecks'
- 'High Error Rates: Check application logs for details'
- 'Memory Issues: Monitor memory usage patterns'
- Critical Issues - Service completely unavailable, affecting all users
- Major Issues - Partial functionality abnormal, affecting some users
- Minor Issues - Performance degradation or occasional exceptions
- Trivial Issues - Log warnings or configuration suggestions
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - JWT_SECRET
  - JWT_PUBLIC_KEY
  - JWT_PRIVATE_KEY
  - X-API-Key
  - admin-token
  - api-key
  - jwt
  - API Key
  - JWT
  - bearerAuth
  - PROD_JWT_SECRET
  - JAIROUTER_SECURITY_JWT_ENABLED
  - jairouter-secret
  - jairouter-tls
  - jwt-secret
  - database-password
  - JAIROUTER_SECURITY_API_KEY_ENABLED
  - LoadBalancer
  - LoadBalanceConfig
client:
  base_url: http://localhost:8080
source_metadata: null
