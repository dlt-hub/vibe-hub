resources:
- name: guild_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
- name: guilds
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
    params:
      limit: '100'
- name: guild
  endpoint:
    path: /guilds/{id}
    method: GET
    data_selector: guild
    params: {}
- name: guilds
  endpoint:
    path: /guilds
    method: GET
    data_selector: Guild
    params:
      limit: 100
- name: PartialAppInfo
  endpoint:
    path: /applications/{application.id}
    method: GET
    data_selector: data
- name: Team
  endpoint:
    path: /teams/{team.id}
    method: GET
    data_selector: data
- name: TeamMember
  endpoint:
    path: /teams/{team.id}/members
    method: GET
    data_selector: data
- name: PartialAppInfo
  endpoint:
    path: /applications/{application.id}
    method: GET
    data_selector: application
    params: {}
- name: Team
  endpoint:
    path: /applications/{application.id}/team
    method: GET
    data_selector: team
    params: {}
- name: TeamMember
  endpoint:
    path: /team/members
    method: GET
    data_selector: members
    params: {}
- name: guild
  endpoint:
    path: /guilds/{guild_id}
    method: GET
    data_selector: guild
    params: {}
- name: user
  endpoint:
    path: /users/{user_id}
    method: GET
    data_selector: user
    params: {}
- name: team
  endpoint:
    path: /teams
    method: GET
    data_selector: teams
- name: voice_client
  endpoint:
    path: /voice_client
    method: GET
    data_selector: clients
- name: audit_log_diff
  endpoint:
    path: /audit-log-diff
    method: GET
    data_selector: attributes
    params: {}
- name: edit
  endpoint:
    path: /edit
    method: POST
    data_selector: content
    params: {}
- name: delete
  endpoint:
    path: /delete
    method: DELETE
    data_selector: content
    params: {}
- name: SyncWebhook
  endpoint:
    path: /discord/syncWebhook
    method: GET
    data_selector: records
- name: webhook
  endpoint:
    path: /webhooks
    method: DELETE
    data_selector: message
    params: {}
- name: AuditLogDiff
  endpoint:
    path: /audit-log-diff
    method: GET
    data_selector: attributes
- name: GuildChannel
  endpoint:
    path: /discord/abc/GuildChannel
    method: GET
    data_selector: attributes
- name: Messageable
  endpoint:
    path: /discord/abc/Messageable
    method: GET
    data_selector: methods
- name: webhook
  endpoint:
    path: /webhooks/{guild_id}/{webhook.id}
    method: POST
    data_selector: content
- name: messages
  endpoint:
    params:
      limit: null
      before: null
      after: null
      around: null
      oldest_first: true
- name: edit
  endpoint:
    path: /discord/webhook/message/edit
    method: POST
- name: delete
  endpoint:
    path: /discord/webhook/message/delete
    method: DELETE
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
    params: {}
- name: webhook
  endpoint:
    path: /webhooks/{webhook.id}/{webhook.token}
    method: POST
    data_selector: Webhook
    params: {}
- name: guilds
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
    params:
      limit: 100
- name: webhook
  endpoint:
    path: /webhooks/{webhook.id}/{webhook.token}
    method: DELETE
    data_selector: message
    params:
      message_id: int
- name: guild
  endpoint:
    path: /guilds/{guild_id}
    method: GET
    data_selector: guild
    params: {}
- name: user
  endpoint:
    path: /users/{user_id}
    method: GET
    data_selector: user
    params: {}
- name: messages
  endpoint:
    params:
      limit: Optional[int]
      before: Optional[Union[Snowflake, datetime.datetime]]
      after: Optional[Union[Snowflake, datetime.datetime]]
      around: Optional[Union[Snowflake, datetime.datetime]]
      oldest_first: Optional[bool]
- name: global_application_commands
  endpoint:
    path: /applications/{application.id}/commands
    method: GET
    data_selector: commands
- name: global_application_command
  endpoint:
    path: /applications/{application.id}/commands/{command_id}
    method: GET
    data_selector: command
- name: create_global_application_command
  endpoint:
    path: /applications/{application.id}/commands
    method: POST
    data_selector: command
- name: edit_global_application_command
  endpoint:
    path: /applications/{application.id}/commands/{command_id}
    method: PATCH
    data_selector: command
- name: delete_global_application_command
  endpoint:
    path: /applications/{application.id}/commands/{command_id}
    method: DELETE
- name: bulk_create_global_application_commands
  endpoint:
    path: /applications/{application.id}/commands/bulk
    method: POST
    data_selector: commands
- name: guilds
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: guild
  endpoint:
    path: /guilds/{id}
    method: GET
    data_selector: guild
- name: Team
  endpoint:
    path: /teams
    method: GET
- name: TeamMember
  endpoint:
    path: /teammembers
    method: GET
- name: VoiceClient
  endpoint:
    path: /voiceclient
    method: GET
- name: guild
  endpoint:
    path: /guilds/{guild_id}
    method: GET
    data_selector: guild
    params: {}
- name: user
  endpoint:
    path: /users/{user_id}
    method: GET
    data_selector: user
    params: {}
- name: AudioSource
  endpoint:
    path: /discord/audiosource
    method: GET
    data_selector: audio_data
    params: {}
- name: PCMAudio
  endpoint:
    path: /discord/pcmaudio
    method: GET
    data_selector: pcm_data
    params: {}
- name: FFmpegAudio
  endpoint:
    path: /discord/ffmpegaudio
    method: GET
    data_selector: ffmpeg_data
    params: {}
- name: FFmpegPCMAudio
  endpoint:
    path: /discord/ffmpegpcmaudio
    method: GET
    data_selector: ffmpeg_pcm_data
    params: {}
- name: FFmpegOpusAudio
  endpoint:
    path: /discord/ffmpegopusaudio
    method: GET
    data_selector: ffmpeg_opus_data
    params: {}
- name: PCMVolumeTransformer
  endpoint:
    path: /discord/pcmvolumetransformer
    method: GET
    data_selector: pcm_volume_data
    params: {}
- name: messages
  endpoint:
    path: /channel/messages
    method: GET
    data_selector: Message
    params:
      limit: null
      before: null
      after: null
      around: null
      oldest_first: true
- name: Webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: webhook_message
  endpoint:
    path: /webhook/message
    method: POST
    data_selector: message
- name: guilds
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
    params:
      limit: 100
- name: PrivateChannel
  endpoint:
    path: /private_channels
    method: GET
- name: GuildChannel
  endpoint:
    path: /guild_channels
    method: GET
- name: Messageable
  endpoint:
    path: /messageable
    method: GET
- name: global_application_commands
  endpoint:
    path: /applications/{application.id}/commands
    method: GET
    data_selector: commands
- name: global_application_command
  endpoint:
    path: /applications/{application.id}/commands/{command_id}
    method: GET
    data_selector: command
- name: create_global_application_command
  endpoint:
    path: /applications/{application.id}/commands
    method: POST
    data_selector: command
- name: edit_global_application_command
  endpoint:
    path: /applications/{application.id}/commands/{command_id}
    method: PATCH
    data_selector: command
- name: delete_global_application_command
  endpoint:
    path: /applications/{application.id}/commands/{command_id}
    method: DELETE
- name: bulk_create_global_application_commands
  endpoint:
    path: /applications/{application.id}/commands/bulk
    method: POST
    data_selector: commands
- name: guilds
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: application_command
  endpoint:
    path: /applications/{application.id}/commands
    method: GET
    data_selector: commands
    params: {}
- name: user
  endpoint:
    path: /users/@me
    method: GET
    data_selector: user
- name: audit_log_action
  endpoint:
    path: /audit/logs
    method: GET
    data_selector: actions
    params: {}
- name: AuditLogDiff
  endpoint:
    path: /audit/logs/diff
    method: GET
    data_selector: changes
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
- name: StandardSticker
  endpoint:
    path: /standard_sticker
    method: GET
    data_selector: stickers
- name: GuildSticker
  endpoint:
    path: /guild_sticker
    method: GET
    data_selector: stickers
- name: guilds
  endpoint:
    path: /guilds
    method: GET
    data_selector: guild
    params:
      limit: 100
- name: private_channel
  endpoint:
    path: /private_channel
    method: GET
- name: guild_channel
  endpoint:
    path: /guild_channel
    method: GET
- name: messageable
  endpoint:
    path: /messageable
    method: GET
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: StandardSticker
  endpoint:
    path: /standard_sticker
    method: GET
    data_selector: records
- name: GuildSticker
  endpoint:
    path: /guild_sticker
    method: GET
    data_selector: records
- name: audit_log
  endpoint:
    path: /audit-log
    method: GET
    data_selector: audit_log
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: global_application_commands
  endpoint:
    path: /applications/{application.id}/commands
    method: GET
    data_selector: commands
    params: {}
- name: create_global_application_command
  endpoint:
    path: /applications/{application.id}/commands
    method: POST
    data_selector: command
    params: {}
- name: edit_global_application_command
  endpoint:
    path: /applications/{application.id}/commands/{command.id}
    method: PATCH
    data_selector: command
    params: {}
- name: delete_global_application_command
  endpoint:
    path: /applications/{application.id}/commands/{command.id}
    method: DELETE
    data_selector: {}
    params: {}
- name: fetch
  endpoint:
    path: /fetch
    method: GET
- name: delete
  endpoint:
    path: /delete
    method: DELETE
- name: edit
  endpoint:
    path: /edit
    method: PATCH
- name: send
  endpoint:
    path: /send
    method: POST
- name: fetch_message
  endpoint:
    path: /fetch_message
    method: GET
- name: edit_message
  endpoint:
    path: /edit_message
    method: PATCH
- name: delete_message
  endpoint:
    path: /delete_message
    method: DELETE
- name: PrivateChannel
  endpoint:
    path: /private_channel
    method: GET
    data_selector: data
- name: GuildChannel
  endpoint:
    path: /guild_channel
    method: GET
    data_selector: data
- name: opus
  endpoint:
    path: /opus
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: user
  endpoint:
    path: /users/@me
    method: GET
    data_selector: user
    params: {}
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: audit_log
  endpoint:
    path: /guilds/{guild.id}/audit-logs
    method: GET
    data_selector: audit_logs
- name: message
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: audit_log_action
  endpoint:
    path: /audit-log/actions
    method: GET
    data_selector: actions
    params: {}
- name: AuditLogDiff
  endpoint:
    path: /audit-log-diff
    method: GET
    data_selector: changes
    params: {}
- name: guild
  endpoint:
    path: /guilds/{guild.id}
    method: GET
    data_selector: guild
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
    params:
      limit: 100
- name: guild
  endpoint:
    path: /guilds/{guild_id}
    method: GET
    data_selector: guild
    params: {}
- name: user
  endpoint:
    path: /users/{user_id}
    method: GET
    data_selector: user
    params: {}
- name: user
  endpoint:
    path: /users/@me
    method: GET
    data_selector: user
- name: Message
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: audit_log
  endpoint:
    path: /guilds/{guild.id}/audit-logs
    method: GET
    data_selector: audit_log
    params: {}
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhooks
    params: {}
- name: team
  endpoint:
    path: /teams
    method: GET
    data_selector: teams
- name: teammember
  endpoint:
    path: /team_members
    method: GET
    data_selector: members
- name: PrivateChannel
  endpoint:
    path: /private-channel
    method: GET
    data_selector: data
    params: {}
- name: GuildChannel
  endpoint:
    path: /guild-channel
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: message
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: guild_integration_update
  endpoint:
    path: /guilds/{guild_id}/integrations
    method: POST
- name: invite_create
  endpoint:
    path: /invites
    method: POST
- name: invite_delete
  endpoint:
    path: /invites/{invite_code}
    method: DELETE
- name: member_join
  endpoint:
    path: /guilds/{guild_id}/members
    method: POST
- name: member_remove
  endpoint:
    path: /guilds/{guild_id}/members/{member_id}
    method: DELETE
- name: member_update
  endpoint:
    path: /guilds/{guild_id}/members/{member_id}
    method: PATCH
- name: presence_update
  endpoint:
    path: /presence
    method: PATCH
- name: role_create
  endpoint:
    path: /guilds/{guild_id}/roles
    method: POST
- name: role_delete
  endpoint:
    path: /guilds/{guild_id}/roles/{role_id}
    method: DELETE
- name: role_update
  endpoint:
    path: /guilds/{guild_id}/roles/{role_id}
    method: PATCH
- name: stage_instance_create
  endpoint:
    path: /stage-instances
    method: POST
- name: stage_instance_delete
  endpoint:
    path: /stage-instances/{stage_instance_id}
    method: DELETE
- name: stage_instance_update
  endpoint:
    path: /stage-instances/{stage_instance_id}
    method: PATCH
- name: stickers_update
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: PATCH
- name: thread_join
  endpoint:
    path: /threads/{thread_id}/members
    method: PUT
- name: thread_delete
  endpoint:
    path: /threads/{thread_id}
    method: DELETE
- name: thread_remove
  endpoint:
    path: /threads/{thread_id}/members/{member_id}
    method: DELETE
- name: thread_update
  endpoint:
    path: /threads/{thread_id}
    method: PATCH
- name: guild
  endpoint:
    path: /guilds/{guild.id}
    method: GET
    data_selector: guild
    params: {}
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: audit_logs
  endpoint:
    path: /guilds/{guild.id}/audit-logs
    method: GET
    data_selector: audit_logs
- name: audit_log
  endpoint:
    path: /audit-logs
    method: GET
    data_selector: logs
    params: {}
- name: bans
  endpoint:
    path: /guilds/{guild.id}/bans
    method: GET
    data_selector: BanEntry
- name: channels
  endpoint:
    path: /guilds/{guild.id}/channels
    method: GET
    data_selector: abc.GuildChannel
- name: members
  endpoint:
    path: /guilds/{guild.id}/members
    method: GET
    data_selector: Member
- name: webhooks
  endpoint:
    path: /guilds/{guild.id}/webhooks
    method: GET
    data_selector: Webhook
- name: templates
  endpoint:
    path: /guilds/{guild.id}/templates
    method: GET
    data_selector: Template
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhooks
    params: {}
- name: emoji
  endpoint:
    path: /guilds/{guild_id}/emojis
    method: GET
    data_selector: emojis
- name: roles
  endpoint:
    path: /guilds/{guild_id}/roles
    method: GET
    data_selector: roles
- name: welcome_screen
  endpoint:
    path: /guilds/{guild_id}/welcome-screen
    method: GET
    data_selector: welcome_screen
- name: widget
  endpoint:
    path: /guilds/{guild_id}/widget
    method: GET
    data_selector: widget
- name: PrivateChannel
  endpoint:
    path: /private/channel
    method: GET
- name: GuildChannel
  endpoint:
    path: /guild/channel
    method: GET
- name: Messageable
  endpoint:
    path: /messageable
    method: GET
- name: create_scheduled_event
  endpoint:
    path: /create_scheduled_event
    method: POST
    data_selector: event
- name: fetch_scheduled_event
  endpoint:
    path: /fetch_scheduled_event
    method: GET
    data_selector: event
- name: fetch_scheduled_events
  endpoint:
    path: /fetch_scheduled_events
    method: GET
    data_selector: events
    params:
      with_user_count: 'false'
- name: fetch_application_commands
  endpoint:
    path: /fetch_application_commands
    method: GET
    data_selector: application_commands
- name: fetch_application_command
  endpoint:
    path: /fetch_application_command/{command_id}
    method: GET
    data_selector: application_command
- name: create_application_command
  endpoint:
    path: /create_application_command
    method: POST
    data_selector: application_command
- name: edit_application_command
  endpoint:
    path: /edit_application_command
    method: PATCH
    data_selector: application_command
- name: delete_application_command
  endpoint:
    path: /delete_application_command/{command_id}
    method: DELETE
    data_selector: result
- name: bulk_create_application_commands
  endpoint:
    path: /bulk_create_application_commands
    method: POST
    data_selector: application_commands
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: integration
  endpoint:
    path: /guilds/{guild_id}/integrations
    method: GET
    data_selector: integrations
- name: guild_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
- name: message
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: records
- name: members
  endpoint:
    path: /members
    method: GET
    data_selector: Member
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
    params: {}
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: audit_logs
  endpoint:
    path: /guilds/{guild_id}/audit-logs
    method: GET
    data_selector: audit_log_entries
    params:
      limit: '10'
      before: datetime
      after: datetime
      oldest_first: 'true'
      user: user_id
      action: action_type
- name: application_commands
  endpoint:
    path: /applications/{application.id}/commands
    method: GET
    data_selector: commands
- name: team
  endpoint:
    path: /api/v1/teams
    method: GET
    data_selector: teams
- name: team_member
  endpoint:
    path: /api/v1/teams/members
    method: GET
    data_selector: members
- name: opus
  endpoint:
    path: /opus
    method: GET
    data_selector: data
    params: {}
- name: fetch_emoji
  endpoint:
    path: /guilds/{guild_id}/emojis/{emoji_id}
    method: GET
    data_selector: Emoji
- name: create_custom_emoji
  endpoint:
    path: /guilds/{guild_id}/emojis
    method: POST
    data_selector: Emoji
- name: delete_emoji
  endpoint:
    path: /guilds/{guild_id}/emojis/{emoji_id}
    method: DELETE
    data_selector: Emoji
- name: fetch_roles
  endpoint:
    path: /guilds/{guild_id}/roles
    method: GET
    data_selector: Role
- name: create_role
  endpoint:
    path: /guilds/{guild_id}/roles
    method: POST
    data_selector: Role
- name: edit_role_positions
  endpoint:
    path: /guilds/{guild_id}/roles
    method: PATCH
    data_selector: Role
- name: welcome_screen
  endpoint:
    path: /guilds/{guild_id}/welcome-screen
    method: GET
    data_selector: WelcomeScreen
- name: edit_welcome_screen
  endpoint:
    path: /guilds/{guild_id}/welcome-screen
    method: PATCH
    data_selector: WelcomeScreen
- name: kick
  endpoint:
    path: /guilds/{guild_id}/members/{user_id}
    method: DELETE
    data_selector: User
- name: ban
  endpoint:
    path: /guilds/{guild_id}/bans/{user_id}
    method: PUT
    data_selector: Ban
- name: unban
  endpoint:
    path: /guilds/{guild_id}/bans/{user_id}
    method: DELETE
    data_selector: Ban
- name: vanity_invite
  endpoint:
    path: /guilds/{guild_id}/vanity-url
    method: GET
    data_selector: Invite
- name: widget
  endpoint:
    path: /guilds/{guild_id}/widget
    method: GET
    data_selector: Widget
- name: edit_widget
  endpoint:
    path: /guilds/{guild_id}/widget
    method: PATCH
    data_selector: Widget
- name: chunk
  endpoint:
    path: /guilds/{guild_id}/members
    method: GET
    data_selector: Member
- name: query_members
  endpoint:
    path: /guilds/{guild_id}/members/search
    method: GET
    data_selector: Member
- name: change_voice_state
  endpoint:
    path: /guilds/{guild_id}/voice-states/{user_id}
    method: PATCH
    data_selector: VoiceState
- name: create_scheduled_event
  endpoint:
    path: /create_scheduled_event
    method: POST
- name: fetch_scheduled_event
  endpoint:
    path: /fetch_scheduled_event
    method: GET
- name: fetch_scheduled_events
  endpoint:
    path: /fetch_scheduled_events
    method: GET
- name: fetch_application_commands
  endpoint:
    path: /fetch_application_commands
    method: GET
- name: fetch_application_command
  endpoint:
    path: /fetch_application_command
    method: GET
- name: create_application_command
  endpoint:
    path: /create_application_command
    method: POST
- name: edit_application_command
  endpoint:
    path: /edit_application_command
    method: PATCH
- name: delete_application_command
  endpoint:
    path: /delete_application_command
    method: DELETE
- name: bulk_create_application_commands
  endpoint:
    path: /bulk_create_application_commands
    method: POST
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhooks
    params: {}
- name: member
  endpoint:
    path: /discord/members
    method: GET
    data_selector: members
- name: member
  endpoint:
    path: /api/members
    method: GET
    data_selector: members
- name: message
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: application_commands
  endpoint:
    path: /applications/commands
    method: GET
    data_selector: commands
- name: opus
  endpoint:
    path: /opus/load
    method: POST
    data_selector: result
- name: create_voice_channel
  endpoint:
    path: /create_voice_channel
    method: POST
- name: create_stage_channel
  endpoint:
    path: /create_stage_channel
    method: POST
- name: create_forum_channel
  endpoint:
    path: /create_forum_channel
    method: POST
- name: create_category
  endpoint:
    path: /create_category
    method: POST
- name: create_category_channel
  endpoint:
    path: /create_category_channel
    method: POST
- name: leave
  endpoint:
    path: /leave
    method: POST
- name: delete
  endpoint:
    path: /delete
    method: POST
- name: edit
  endpoint:
    path: /edit
    method: POST
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
- name: fetch_channels
  endpoint:
    path: /guilds/{guild_id}/channels
    method: GET
    data_selector: channels
- name: active_threads
  endpoint:
    path: /guilds/{guild_id}/threads/active
    method: GET
    data_selector: threads
- name: fetch_member
  endpoint:
    path: /guilds/{guild_id}/members/{member_id}
    method: GET
    data_selector: member
- name: fetch_ban
  endpoint:
    path: /guilds/{guild_id}/bans/{user}
    method: GET
    data_selector: ban
- name: fetch_channel
  endpoint:
    path: /channels/{channel_id}
    method: GET
    data_selector: channel
- name: bans
  endpoint:
    path: /guilds/{guild_id}/bans
    method: GET
    data_selector: bans
- name: prune_members
  endpoint:
    path: /guilds/{guild_id}/prune
    method: POST
    data_selector: pruned_count
- name: templates
  endpoint:
    path: /guilds/{guild_id}/templates
    method: GET
    data_selector: templates
- name: webhooks
  endpoint:
    path: /guilds/{guild_id}/webhooks
    method: GET
    data_selector: webhooks
- name: estimate_pruned_members
  endpoint:
    path: /guilds/{guild_id}/prune
    method: GET
    data_selector: pruned_count
- name: invites
  endpoint:
    path: /guilds/{guild_id}/invites
    method: GET
    data_selector: invites
- name: create_template
  endpoint:
    path: /guilds/{guild_id}/templates
    method: POST
    data_selector: template
- name: create_integration
  endpoint:
    path: /guilds/{guild_id}/integrations
    method: POST
    data_selector: integration
- name: fetch_stickers
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
- name: fetch_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers/{sticker_id}
    method: GET
    data_selector: sticker
- name: create_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: POST
    data_selector: sticker
- name: delete_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers/{sticker}
    method: DELETE
    data_selector: deleted
- name: fetch_emojis
  endpoint:
    path: /guilds/{guild_id}/emojis
    method: GET
    data_selector: emojis
- name: guild_scheduled_event
  endpoint:
    path: /guilds/{guild_id}/scheduled-events
    method: GET
    data_selector: events
- name: application_commands
  endpoint:
    path: /applications/{application_id}/commands
    method: GET
    data_selector: commands
- name: private_channel
  endpoint:
    path: /channels/{channel.id}
    method: GET
    data_selector: data
    params: {}
- name: guild_channel
  endpoint:
    path: /guilds/{guild.id}/channels
    method: GET
    data_selector: channels
    params: {}
- name: member
  endpoint:
    path: /member
    method: GET
    data_selector: records
- name: members
  endpoint:
    path: /members
    method: GET
- name: members
  endpoint:
    path: /members
    method: POST
    data_selector: message
    params: {}
- name: message
  endpoint:
    path: /messages
    method: GET
- name: PartialEmoji
  endpoint:
    path: /PartialEmoji
    method: GET
    data_selector: attributes
    params: {}
- name: Role
  endpoint:
    path: /Role
    method: GET
    data_selector: attributes
    params: {}
- name: Sticker
  endpoint:
    path: /Sticker
    method: GET
    data_selector: attributes
    params: {}
- name: StandardSticker
  endpoint:
    path: /standard_stickers
    method: GET
    data_selector: stickers
- name: GuildSticker
  endpoint:
    path: /guild_stickers
    method: GET
    data_selector: stickers
- name: channels
  endpoint:
    path: /guilds/{guild_id}/channels
    method: GET
- name: threads
  endpoint:
    path: /guilds/{guild_id}/threads
    method: GET
- name: voice_channels
  endpoint:
    path: /guilds/{guild_id}/voice_channels
    method: GET
- name: text_channels
  endpoint:
    path: /guilds/{guild_id}/text_channels
    method: GET
- name: members
  endpoint:
    path: /guilds/{guild_id}/members
    method: GET
- name: create_voice_channel
  endpoint:
    path: /create_voice_channel
    method: POST
- name: create_stage_channel
  endpoint:
    path: /create_stage_channel
    method: POST
- name: create_forum_channel
  endpoint:
    path: /create_forum_channel
    method: POST
- name: create_category
  endpoint:
    path: /create_category
    method: POST
- name: leave
  endpoint:
    path: /leave
    method: POST
- name: delete
  endpoint:
    path: /delete
    method: POST
- name: edit
  endpoint:
    path: /edit
    method: POST
- name: fetch_channels
  endpoint:
    path: /guilds/{guild_id}/channels
    method: GET
    data_selector: channels
- name: active_threads
  endpoint:
    path: /guilds/{guild_id}/threads/active
    method: GET
    data_selector: threads
- name: fetch_member
  endpoint:
    path: /guilds/{guild_id}/members/{member_id}
    method: GET
    data_selector: member
- name: fetch_ban
  endpoint:
    path: /guilds/{guild_id}/bans/{user_id}
    method: GET
    data_selector: ban_entry
- name: fetch_channel
  endpoint:
    path: /channels/{channel_id}
    method: GET
    data_selector: channel
- name: bans
  endpoint:
    path: /guilds/{guild_id}/bans
    method: GET
    data_selector: bans
- name: prune_members
  endpoint:
    path: /guilds/{guild_id}/prune
    method: POST
    data_selector: pruned_count
- name: templates
  endpoint:
    path: /guilds/{guild_id}/templates
    method: GET
    data_selector: templates
- name: webhooks
  endpoint:
    path: /guilds/{guild_id}/webhooks
    method: GET
    data_selector: webhooks
- name: estimate_pruned_members
  endpoint:
    path: /guilds/{guild_id}/prune
    method: GET
    data_selector: estimated_pruned_count
- name: invites
  endpoint:
    path: /guilds/{guild_id}/invites
    method: GET
    data_selector: invites
- name: create_template
  endpoint:
    path: /guilds/{guild_id}/templates
    method: POST
    data_selector: template
- name: create_integration
  endpoint:
    path: /guilds/{guild_id}/integrations
    method: POST
    data_selector: integration
- name: fetch_stickers
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
- name: fetch_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers/{sticker_id}
    method: GET
    data_selector: sticker
- name: create_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: POST
    data_selector: sticker
- name: delete_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers/{sticker_id}
    method: DELETE
    data_selector: deleted_sticker
- name: fetch_emojis
  endpoint:
    path: /guilds/{guild_id}/emojis
    method: GET
    data_selector: emojis
- name: guild_integrations_update
  endpoint:
    path: /guilds/{guild_id}/integrations
    method: POST
    data_selector: integrations
- name: invite_create
  endpoint:
    path: /invites
    method: POST
    data_selector: invite
- name: invite_delete
  endpoint:
    path: /invites/{invite_code}
    method: DELETE
    data_selector: invite
- name: member_join
  endpoint:
    path: /guilds/{guild_id}/members
    method: POST
    data_selector: member
- name: member_remove
  endpoint:
    path: /guilds/{guild_id}/members/{member_id}
    method: DELETE
    data_selector: member
- name: member_update
  endpoint:
    path: /guilds/{guild_id}/members/{member_id}
    method: PATCH
    data_selector: member
- name: presence_update
  endpoint:
    path: /guilds/{guild_id}/presences
    method: PATCH
    data_selector: presence
- name: role_create
  endpoint:
    path: /guilds/{guild_id}/roles
    method: POST
    data_selector: role
- name: role_delete
  endpoint:
    path: /guilds/{guild_id}/roles/{role_id}
    method: DELETE
    data_selector: role
- name: role_update
  endpoint:
    path: /guilds/{guild_id}/roles/{role_id}
    method: PATCH
    data_selector: role
- name: thread_join
  endpoint:
    path: /threads/{thread_id}/members
    method: PUT
    data_selector: thread
- name: thread_delete
  endpoint:
    path: /threads/{thread_id}
    method: DELETE
    data_selector: thread
- name: thread_update
  endpoint:
    path: /threads/{thread_id}
    method: PATCH
    data_selector: thread
- name: message_create
  endpoint:
    path: /channels/{channel_id}/messages
    method: POST
    data_selector: message
- name: message_delete
  endpoint:
    path: /channels/{channel_id}/messages/{message_id}
    method: DELETE
    data_selector: message
- name: message_edit
  endpoint:
    path: /channels/{channel_id}/messages/{message_id}
    method: PATCH
    data_selector: message
- name: guild_scheduled_event
  endpoint:
    path: /guilds/{guild_id}/scheduled_events
    method: GET
    data_selector: events
- name: integration
  endpoint:
    path: /guilds/{guild_id}/integrations
    method: GET
    data_selector: integrations
- name: InteractionResolved
  endpoint:
    path: /interactions/resolved
    method: GET
    data_selector: members
    params: {}
- name: audit_log_diff
  endpoint:
    path: /audit-log/diff
    method: GET
    data_selector: changes
    params: {}
- name: webhook
  endpoint:
    path: /webhooks/{webhook.id}/{webhook.token}
    method: POST
    data_selector: content
    params: {}
- name: member
  endpoint:
    path: /guilds/{guild_id}/members/{user_id}
    method: GET
    data_selector: member
    params: {}
- name: members
  endpoint:
    path: /guilds/{guild_id}/members
    method: GET
    data_selector: members
- name: private_channel
  endpoint:
    path: /private_channel
    method: GET
    data_selector: data
    params: {}
- name: guild_channel
  endpoint:
    path: /guild_channel
    method: GET
    data_selector: data
    params: {}
- name: PartialEmoji
  endpoint:
    path: /discord/PartialEmoji
    method: GET
    data_selector: records
- name: Role
  endpoint:
    path: /discord/Role
    method: GET
    data_selector: records
- name: Sticker
  endpoint:
    path: /discord/Sticker
    method: GET
    data_selector: records
- name: StandardSticker
  endpoint:
    path: /discord/StandardSticker
    method: GET
    data_selector: attributes
- name: GuildSticker
  endpoint:
    path: /discord/GuildSticker
    method: GET
    data_selector: attributes
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
    params:
      limit: 100
- name: message
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: PCMAudio
  endpoint:
    method: read
- name: FFmpegAudio
  endpoint:
    method: cleanup
- name: FFmpegPCMAudio
  endpoint:
    method: read
- name: FFmpegOpusAudio
  endpoint:
    method: read
- name: PCMVolumeTransformer
  endpoint:
    method: read
- name: guild
  endpoint:
    path: /api/v10/guilds
    method: GET
    data_selector: guilds
    params: {}
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
- name: threads
  endpoint:
    path: /threads
    method: GET
    data_selector: threads
- name: voice_channels
  endpoint:
    path: /voice_channels
    method: GET
    data_selector: voice_channels
- name: stage_channels
  endpoint:
    path: /stage_channels
    method: GET
    data_selector: stage_channels
- name: text_channels
  endpoint:
    path: /text_channels
    method: GET
    data_selector: text_channels
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: categories
- name: create_text_channel
  endpoint:
    path: /channels
    method: POST
    data_selector: channel
- name: create_voice_channel
  endpoint:
    path: /channels
    method: POST
    data_selector: channel
- name: create_stage_channel
  endpoint:
    path: /channels
    method: POST
    data_selector: channel
- name: create_forum_channel
  endpoint:
    path: /channels
    method: POST
    data_selector: channel
- name: create_category
  endpoint:
    path: /channels
    method: POST
    data_selector: channel
- name: leave
  endpoint:
    path: /guilds/{guild.id}/leave
    method: POST
- name: delete
  endpoint:
    path: /guilds/{guild.id}
    method: DELETE
- name: edit
  endpoint:
    path: /guilds/{guild.id}
    method: PATCH
- name: guild
  endpoint:
    path: /guilds/{guild.id}
    method: GET
    data_selector: guild
- name: audit_log
  endpoint:
    path: /guilds/{guild.id}/audit-logs
    method: GET
    data_selector: audit_logs
- name: channels
  endpoint:
    path: /guilds/{guild_id}/channels
    method: GET
    data_selector: channels
- name: bans
  endpoint:
    path: /guilds/{guild_id}/bans
    method: GET
    data_selector: bans
- name: members
  endpoint:
    path: /guilds/{guild_id}/members
    method: GET
    data_selector: members
- name: webhooks
  endpoint:
    path: /guilds/{guild_id}/webhooks
    method: GET
    data_selector: webhooks
- name: templates
  endpoint:
    path: /guilds/{guild_id}/templates
    method: GET
    data_selector: templates
- name: webhook
  endpoint:
    path: /webhooks/{webhook.id}/{webhook.token}
    method: POST
- name: emoji
  endpoint:
    path: /guilds/{guild_id}/emojis/{emoji_id}
    method: GET
- name: roles
  endpoint:
    path: /guilds/{guild_id}/roles
    method: GET
- name: welcome_screen
  endpoint:
    path: /guilds/{guild_id}/welcome-screen
    method: GET
- name: widget
  endpoint:
    path: /guilds/{guild_id}/widget
    method: GET
- name: scheduled_event
  endpoint:
    path: /guilds/{guild_id}/scheduled-events
    method: POST
    data_selector: event
    params: {}
- name: fetch_scheduled_events
  endpoint:
    path: /guilds/{guild_id}/scheduled-events
    method: GET
    data_selector: events
    params:
      with_user_count: 'false'
- name: PrivateChannel
  endpoint:
    path: /private_channel
    method: GET
    data_selector: attributes
- name: GuildChannel
  endpoint:
    path: /guild_channel
    method: GET
    data_selector: attributes
- name: member
  endpoint:
    path: /guilds/{guild.id}/members/{user.id}
    method: GET
    data_selector: member
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: message
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: text_channel
  endpoint:
    path: /discord/api/text_channel
    method: GET
    data_selector: attributes
    params: {}
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: guilds
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
    params:
      limit: 150
- name: Interaction
  endpoint:
    path: /interaction
    method: POST
    data_selector: data
    params: {}
- name: member
  endpoint:
    path: /members
    method: GET
- name: guild_integration_update
  endpoint:
    path: /guild/integration/update
    method: POST
- name: invite_create
  endpoint:
    path: /invite/create
    method: POST
- name: invite_delete
  endpoint:
    path: /invite/delete
    method: DELETE
- name: member_join
  endpoint:
    path: /member/join
    method: POST
- name: member_remove
  endpoint:
    path: /member/remove
    method: DELETE
- name: message_create
  endpoint:
    path: /message/create
    method: POST
- name: message_delete
  endpoint:
    path: /message/delete
    method: DELETE
- name: member
  endpoint:
    path: /guilds/{guild_id}/members/{member_id}
    method: GET
    data_selector: member
- name: audit_log
  endpoint:
    path: /audit-log
    method: GET
    data_selector: audit_log
    params: {}
- name: text_channel
  endpoint:
    path: /discord/text_channel
    method: GET
    data_selector: attributes
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
- name: user
  endpoint:
    path: /users/@me
    method: GET
    data_selector: null
    params: {}
- name: PCMAudio
  endpoint:
    path: /discord/PCMAudio
    method: GET
    data_selector: stream
- name: FFmpegAudio
  endpoint:
    path: /discord/FFmpegAudio
    method: GET
    data_selector: source
- name: FFmpegPCMAudio
  endpoint:
    path: /discord/FFmpegPCMAudio
    method: GET
    data_selector: source
- name: FFmpegOpusAudio
  endpoint:
    path: /discord/FFmpegOpusAudio
    method: GET
    data_selector: source
- name: PCMVolumeTransformer
  endpoint:
    path: /discord/PCMVolumeTransformer
    method: GET
    data_selector: original
- name: message
  endpoint:
    path: /messages
    method: GET
    data_selector: message
- name: opus
  endpoint:
    path: /discord/opus
    method: GET
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
    params: {}
- name: AuditLogDiff
  endpoint:
    path: /audit/logs
    method: GET
    data_selector: changes
    params: {}
- name: guild
  endpoint:
    path: /guilds/{guild.id}
    method: GET
    data_selector: guild
    params: {}
- name: audit_logs
  endpoint:
    path: /guilds/{guild.id}/audit-logs
    method: GET
    data_selector: audit_logs
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: channels
  endpoint:
    path: /guilds/{guild_id}/channels
    method: GET
    data_selector: channels
- name: members
  endpoint:
    path: /guilds/{guild_id}/members
    method: GET
    data_selector: members
- name: bans
  endpoint:
    path: /guilds/{guild_id}/bans
    method: GET
    data_selector: bans
- name: webhooks
  endpoint:
    path: /guilds/{guild_id}/webhooks
    method: GET
    data_selector: webhooks
- name: IntegrationAccount
  endpoint:
    path: /discord/integration/account
    method: GET
- name: BotIntegration
  endpoint:
    path: /discord/bot/integration
    method: GET
- name: StreamIntegration
  endpoint:
    path: /discord/stream/integration
    method: GET
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: InteractionResolved
  endpoint:
    path: /interaction/resolved
    method: GET
    data_selector: users
- name: InteractionResponse
  endpoint:
    path: /interaction/response
    method: POST
    data_selector: response
- name: member
  endpoint:
    path: /guilds/{guild_id}/members/{user_id}
    method: GET
    data_selector: member
    params: {}
- name: member
  endpoint:
    path: /guilds/{guild_id}/members/{user_id}
    method: GET
    data_selector: member
- name: channel
  endpoint:
    path: /channels/{channel.id}
    method: GET
    data_selector: channel
- name: send_message
  endpoint:
    path: /messages
    method: POST
    data_selector: message
    params: {}
- name: set_permissions
  endpoint:
    path: /channels/{channel.id}/permissions/{overwrite.id}
    method: PUT
    data_selector: permissions
    params: {}
- name: bans
  endpoint:
    path: /guilds/{guild_id}/bans
    method: GET
    data_selector: BanEntry
- name: channels
  endpoint:
    path: /guilds/{guild_id}/channels
    method: GET
    data_selector: abc.GuildChannel
- name: members
  endpoint:
    path: /guilds/{guild_id}/members/{member_id}
    method: GET
    data_selector: Member
- name: templates
  endpoint:
    path: /guilds/{guild_id}/templates
    method: GET
    data_selector: Template
- name: webhooks
  endpoint:
    path: /guilds/{guild_id}/webhooks
    method: GET
    data_selector: Webhook
- name: stickers
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: GuildSticker
- name: emojis
  endpoint:
    path: /guilds/{guild_id}/emojis
    method: GET
    data_selector: Emoji
- name: thread
  endpoint:
    path: /discord/threads
    method: GET
    data_selector: threads
- name: store_channel
  endpoint:
    path: /store_channel
    method: GET
    data_selector: records
    params: {}
- name: member
  endpoint:
    path: /guilds/{guild_id}/members/{user_id}
    method: GET
    data_selector: member
    params: {}
- name: sticker
  endpoint:
    path: /stickers
    method: GET
    data_selector: stickers
- name: guild_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
- name: standard_sticker
  endpoint:
    path: /stickers/standard
    method: GET
    data_selector: stickers
- name: stage_channel
  endpoint:
    path: /stagechannels
    method: GET
    data_selector: channels
- name: stage_instance
  endpoint:
    path: /stage_instance
    method: GET
    data_selector: records
- name: sticker
  endpoint:
    path: /sticker
    method: GET
    data_selector: records
- name: standard_sticker
  endpoint:
    path: /standard_sticker
    method: GET
    data_selector: records
- name: guild_sticker
  endpoint:
    path: /guild_sticker
    method: GET
    data_selector: records
- name: guild_avatar
  endpoint:
    path: /guild_avatar
    method: GET
    data_selector: Asset
- name: activity
  endpoint:
    path: /activity
    method: GET
    data_selector: Activity
- name: mentioned_in
  endpoint:
    path: /mentioned_in
    method: GET
    data_selector: bool
- name: top_role
  endpoint:
    path: /top_role
    method: GET
    data_selector: Role
- name: guild_permissions
  endpoint:
    path: /guild_permissions
    method: GET
    data_selector: Permissions
- name: voice
  endpoint:
    path: /voice
    method: GET
    data_selector: VoiceState
- name: timed_out
  endpoint:
    path: /timed_out
    method: GET
    data_selector: bool
- name: ban
  endpoint:
    path: /ban
    method: POST
    data_selector: null
- name: unban
  endpoint:
    path: /unban
    method: POST
    data_selector: null
- name: kick
  endpoint:
    path: /kick
    method: POST
    data_selector: null
- name: disable_communication_until
  endpoint:
    path: /disable_communication_until
    method: POST
    data_selector: null
- name: disable_communication_for
  endpoint:
    path: /disable_communication_for
    method: POST
    data_selector: null
- name: enable_communication
  endpoint:
    path: /enable_communication
    method: POST
    data_selector: null
- name: edit
  endpoint:
    path: /edit
    method: POST
    data_selector: Member
- name: request_to_speak
  endpoint:
    path: /request_to_speak
    method: POST
    data_selector: null
- name: move_to
  endpoint:
    path: /move_to
    method: POST
    data_selector: null
- name: add_roles
  endpoint:
    path: /add_roles
    method: POST
    data_selector: null
- name: fetch_message
  endpoint:
    path: /fetch_message
    method: GET
    data_selector: Message
- name: pins
  endpoint:
    path: /pins
    method: GET
    data_selector: Message
- name: remove_roles
  endpoint:
    path: /remove_roles
    method: POST
    data_selector: null
- name: send
  endpoint:
    path: /send
    method: POST
    data_selector: null
- name: guilds
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
    params:
      limit: 100
- name: Role
  endpoint:
    path: /roles
    method: GET
    data_selector: roles
- name: TextChannel
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
- name: team
  endpoint:
    path: /team
    method: GET
    data_selector: members
    params: {}
- name: teammember
  endpoint:
    path: /teammember
    method: GET
    data_selector: members
    params: {}
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
- name: thread
  endpoint:
    path: /discord/threads
    method: GET
    data_selector: threads
- name: sticker
  endpoint:
    path: /discord/stickers
    method: GET
    data_selector: stickers
- name: standard_sticker
  endpoint:
    path: /discord/standard_stickers
    method: GET
    data_selector: standard_stickers
- name: sticker
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
- name: store_channel
  endpoint:
    path: /store_channel
    method: GET
    data_selector: records
- name: webhook
  endpoint:
    path: /webhooks/{webhook.id}/{webhook.token}
    method: POST
    data_selector: 'null'
    params: {}
- name: Sticker
  endpoint:
    path: /stickers
    method: GET
    data_selector: stickers
    params: {}
- name: StandardSticker
  endpoint:
    path: /standard_stickers
    method: GET
    data_selector: standard_stickers
    params: {}
- name: GuildSticker
  endpoint:
    path: /guild_stickers
    method: GET
    data_selector: guild_stickers
    params: {}
- name: stage_channel
  endpoint:
    path: /discord/api/stage_channels
    method: GET
    data_selector: channels
- name: StageInstance
  endpoint:
    path: /stage-instances
    method: GET
    data_selector: records
- name: Sticker
  endpoint:
    path: /stickers
    method: GET
    data_selector: records
- name: StandardSticker
  endpoint:
    path: /standard-stickers
    method: GET
    data_selector: records
- name: GuildSticker
  endpoint:
    path: /guild-stickers
    method: GET
    data_selector: records
- name: PrivateChannel
  endpoint:
    path: /private_channel
    method: GET
    data_selector: attributes
- name: GuildChannel
  endpoint:
    path: /guild_channel
    method: GET
    data_selector: attributes
- name: User
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: guilds
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: message
  endpoint:
    path: /messages
    method: GET
    data_selector: content
    params: {}
- name: application_command
  endpoint:
    path: /applications/{application.id}/commands
    method: GET
    data_selector: commands
- name: global_application_command
  endpoint:
    path: /applications/{application.id}/commands/{command.id}
    method: GET
    data_selector: command
- name: audit_log
  endpoint:
    path: /api/v9/audit-logs
    method: GET
    data_selector: audit_log_entries
    params: {}
- name: guild_scheduled_event
  endpoint:
    path: /guilds/{guild_id}/scheduled-events
    method: GET
    data_selector: events
- name: application_command
  endpoint:
    path: /applications/{application_id}/commands
    method: GET
    data_selector: commands
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: member
  endpoint:
    path: /guilds/{guild_id}/members/{member_id}
    method: GET
    data_selector: member
    params: {}
- name: member
  endpoint:
    path: /guilds/{guild_id}/members/{member_id}
    method: GET
    data_selector: member
    params: {}
- name: PrivateChannel
  endpoint:
    path: /api/private_channel
    method: GET
    data_selector: data
- name: GuildChannel
  endpoint:
    path: /api/guild_channel
    method: GET
    data_selector: data
- name: Messageable
  endpoint:
    path: /api/messageable
    method: GET
    data_selector: data
- name: RoleTags
  endpoint:
    path: /discord/roletags
    method: GET
- name: PartialMessageable
  endpoint:
    path: /discord/partialmessageable
    method: GET
- name: TextChannel
  endpoint:
    path: /discord/textchannel
    method: GET
- name: channel
  endpoint:
    path: /channels/{channel_id}
    method: GET
    data_selector: channel
- name: message
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: guild
  endpoint:
    path: /guilds/{guild.id}
    method: GET
    data_selector: guild
    params: {}
- name: audit_logs
  endpoint:
    path: /guilds/{guild.id}/audit-logs
    method: GET
    data_selector: audit_log_entries
    params: {}
- name: guild_channels
  endpoint:
    path: /guilds/{guild.id}/channels
    method: GET
    data_selector: channels
    params: {}
- name: create_text_channel
  endpoint:
    path: /create_text_channel
    method: POST
- name: create_voice_channel
  endpoint:
    path: /create_voice_channel
    method: POST
- name: create_stage_channel
  endpoint:
    path: /create_stage_channel
    method: POST
- name: create_forum_channel
  endpoint:
    path: /create_forum_channel
    method: POST
- name: create_category
  endpoint:
    path: /create_category
    method: POST
- name: edit_guild
  endpoint:
    path: /edit_guild
    method: PATCH
- name: leave_guild
  endpoint:
    path: /leave
    method: POST
- name: delete_guild
  endpoint:
    path: /delete
    method: DELETE
- name: history
  endpoint:
    path: history
    method: GET
    data_selector: messages
    params:
      limit: 100
- name: IntegrationAccount
  endpoint:
    path: /discord/integration/account
    method: GET
- name: BotIntegration
  endpoint:
    path: /discord/bot/integration
    method: GET
- name: StreamIntegration
  endpoint:
    path: /discord/stream/integration
    method: GET
- name: ApplicationCommandInteractionDataOption
  endpoint:
    path: /discord/application/command/interaction/data/option
    method: GET
- name: Interaction
  endpoint:
    path: /discord/interaction
    method: GET
- name: guilds
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
    params:
      limit: 100
- name: InteractionResolved
  endpoint:
    path: /discord/InteractionResolved
    method: GET
    data_selector: users
- name: InteractionResponse
  endpoint:
    path: /discord/InteractionResponse
    method: GET
    data_selector: messages
- name: member
  endpoint:
    path: /guilds/{guild_id}/members
    method: GET
    data_selector: members
- name: member
  endpoint:
    path: /guilds/{guild_id}/members/{member_id}
    method: GET
- name: PCMAudio
  endpoint:
    method: read
- name: FFmpegAudio
  endpoint:
    method: cleanup
- name: FFmpegPCMAudio
  endpoint:
    method: read
- name: FFmpegOpusAudio
  endpoint:
    method: read
- name: PCMVolumeTransformer
  endpoint:
    method: read
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: message
    params: {}
- name: voice_state
  endpoint:
    path: /voice_states
    method: GET
    data_selector: voice_states
    params: {}
- name: emoji
  endpoint:
    path: /emojis
    method: GET
    data_selector: emojis
    params: {}
- name: emoji
  endpoint:
    path: /emojis
    method: GET
- name: partial_emoji
  endpoint:
    path: /partial_emojis
    method: GET
- name: role
  endpoint:
    path: /roles
    method: GET
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
- name: audit_log
  endpoint:
    path: /audit-log
    method: GET
    data_selector: audit_logs
    params: {}
- name: thread
  endpoint:
    path: /threads
    method: GET
    data_selector: threads
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: StageInstance
  endpoint:
    path: /stage-instances
    method: GET
    data_selector: instances
- name: CategoryChannel
  endpoint:
    path: /category-channels
    method: GET
    data_selector: categories
- name: forum_channel
  endpoint:
    path: /channels
    method: POST
- name: invite
  endpoint:
    path: /invites
    method: POST
- name: dm_channel
  endpoint:
    path: /users/@me/channels
    method: POST
- name: message
  endpoint:
    path: /discord/message
    method: GET
    data_selector: content
- name: pinned_messages
  endpoint:
    path: /channels/{channel.id}/pins
    method: GET
    data_selector: messages
- name: send_message
  endpoint:
    path: /channels/{channel.id}/messages
    method: POST
    data_selector: message
- name: trigger_typing
  endpoint:
    path: /channels/{channel.id}/typing
    method: POST
    data_selector: typing_triggered
- name: history
  endpoint:
    method: GET
    params:
      limit: 100
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
    params:
      limit: '100'
- name: bans
  endpoint:
    path: /guilds/{guild_id}/bans
    method: GET
    data_selector: BanEntry
- name: channels
  endpoint:
    path: /guilds/{guild_id}/channels
    method: GET
    data_selector: abc.GuildChannel
- name: members
  endpoint:
    path: /guilds/{guild_id}/members
    method: GET
    data_selector: Member
- name: invites
  endpoint:
    path: /guilds/{guild_id}/invites
    method: GET
    data_selector: Invite
- name: webhooks
  endpoint:
    path: /guilds/{guild_id}/webhooks
    method: GET
    data_selector: Webhook
- name: application_commands
  endpoint:
    path: /applications/{application_id}/commands
    method: GET
    data_selector: commands
- name: global_application_command
  endpoint:
    path: /applications/{application_id}/commands/{command_id}
    method: GET
    data_selector: command
- name: create_global_application_command
  endpoint:
    path: /applications/{application_id}/commands
    method: POST
    data_selector: command
- name: edit_global_application_command
  endpoint:
    path: /applications/{application_id}/commands/{command_id}
    method: PATCH
    data_selector: command
- name: delete_global_application_command
  endpoint:
    path: /applications/{application_id}/commands/{command_id}
    method: DELETE
- name: bulk_create_global_application_commands
  endpoint:
    path: /applications/{application_id}/commands/bulk
    method: PUT
    data_selector: commands
- name: emojis
  endpoint:
    path: /guilds/{guild.id}/emojis
    method: GET
    data_selector: emojis
- name: roles
  endpoint:
    path: /guilds/{guild.id}/roles
    method: GET
    data_selector: roles
- name: welcome_screen
  endpoint:
    path: /guilds/{guild.id}/welcome-screen
    method: GET
    data_selector: welcome_screen
- name: widget
  endpoint:
    path: /guilds/{guild.id}/widget
    method: GET
    data_selector: widget
- name: member
  endpoint:
    path: /member
    method: GET
- name: guild_avatar
  endpoint:
    path: /guild_avatar
    method: GET
    data_selector: Asset
- name: activity
  endpoint:
    path: /activity
    method: GET
    data_selector: Activity
- name: mentioned_in
  endpoint:
    path: /mentioned_in
    method: POST
    data_selector: bool
- name: top_role
  endpoint:
    path: /top_role
    method: GET
    data_selector: Role
- name: guild_permissions
  endpoint:
    path: /guild_permissions
    method: GET
    data_selector: Permissions
- name: voice
  endpoint:
    path: /voice
    method: GET
    data_selector: VoiceState
- name: timed_out
  endpoint:
    path: /timed_out
    method: GET
    data_selector: bool
- name: PartialEmoji
  endpoint:
    path: /api/v10/emoji
    method: GET
- name: Role
  endpoint:
    path: /api/v10/guilds/{guild_id}/roles
    method: GET
- name: guild_integration_update
  endpoint:
    path: /guilds/integrations/update
    method: POST
- name: invite_create
  endpoint:
    path: /invites/create
    method: POST
- name: invite_delete
  endpoint:
    path: /invites/delete
    method: DELETE
- name: member_join
  endpoint:
    path: /members/join
    method: POST
- name: member_remove
  endpoint:
    path: /members/remove
    method: DELETE
- name: member_update
  endpoint:
    path: /members/update
    method: PATCH
- name: presence_update
  endpoint:
    path: /presence/update
    method: PATCH
- name: role_create
  endpoint:
    path: /roles/create
    method: POST
- name: role_delete
  endpoint:
    path: /roles/delete
    method: DELETE
- name: role_update
  endpoint:
    path: /roles/update
    method: PATCH
- name: stage_instance_create
  endpoint:
    path: /stage-instances/create
    method: POST
- name: stage_instance_delete
  endpoint:
    path: /stage-instances/delete
    method: DELETE
- name: stage_instance_update
  endpoint:
    path: /stage-instances/update
    method: PATCH
- name: guild_stickers_update
  endpoint:
    path: /guilds/stickers/update
    method: PATCH
- name: thread_join
  endpoint:
    path: /threads/join
    method: POST
- name: thread_delete
  endpoint:
    path: /threads/delete
    method: DELETE
- name: thread_remove
  endpoint:
    path: /threads/remove
    method: DELETE
- name: thread_update
  endpoint:
    path: /threads/update
    method: PATCH
- name: integration_create
  endpoint:
    path: /integrations/create
    method: POST
- name: integration_update
  endpoint:
    path: /integrations/update
    method: PATCH
- name: raw_integration_delete
  endpoint:
    path: /integrations/delete
    method: DELETE
- name: webhooks_update
  endpoint:
    path: /webhooks/update
    method: PATCH
- name: interaction
  endpoint:
    path: /interactions
    method: POST
- name: modal_submit
  endpoint:
    path: /modal/submit
    method: POST
- name: message
  endpoint:
    path: /messages
    method: POST
- name: message_delete
  endpoint:
    path: /messages/delete
    method: DELETE
- name: bulk_message_delete
  endpoint:
    path: /messages/bulk-delete
    method: DELETE
- name: raw_message_delete
  endpoint:
    path: /messages/raw/delete
    method: DELETE
- name: raw_bulk_message_delete
  endpoint:
    path: /messages/raw/bulk-delete
    method: DELETE
- name: message_edit
  endpoint:
    path: /messages/edit
    method: PATCH
- name: raw_message_edit
  endpoint:
    path: /messages/raw/edit
    method: PATCH
- name: channel
  endpoint:
    path: /channel
    method: GET
    data_selector: channel
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: channel_invite
  endpoint:
    path: /channels/{channel_id}/invites
    method: POST
    data_selector: invite
    params: {}
- name: archived_threads
  endpoint:
    path: /channels/{channel_id}/threads/archived
    method: GET
    data_selector: threads
    params:
      limit: 50
- name: audit_log_action
  endpoint:
    path: /audit-log
    method: GET
    data_selector: actions
    params: {}
- name: AuditLogDiff
  endpoint:
    path: /audit-log
    method: GET
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
- name: stage_channel
  endpoint:
    path: /api/vX.X/stage_channels
    method: GET
    data_selector: channels
- name: StageInstance
  endpoint:
    path: /stage-instances
    method: GET
    data_selector: instances
- name: CategoryChannel
  endpoint:
    path: /category-channels
    method: GET
    data_selector: categories
- name: message
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: pinned_messages
  endpoint:
    path: /channels/{channel_id}/pins
    method: GET
    data_selector: messages
- name: send_message
  endpoint:
    path: /channels/{channel_id}/messages
    method: POST
    data_selector: message
- name: fetch_message
  endpoint:
    path: /channels/{channel_id}/messages/{message_id}
    method: GET
    data_selector: message
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: message
- name: guild
  endpoint:
    path: /guilds/{guild.id}
    method: GET
    data_selector: guild
- name: audit_log
  endpoint:
    path: /guilds/{guild_id}/audit-logs
    method: GET
    data_selector: audit_log_entries
    params:
      limit: limit
      before: before
      after: after
      oldest_first: oldest_first
      user: user
      action: action
- name: sticker
  endpoint:
    path: /sticker
    method: GET
    data_selector: records
    params: {}
- name: standard_sticker
  endpoint:
    path: /standard_sticker
    method: GET
    data_selector: records
    params: {}
- name: guild_sticker
  endpoint:
    path: /guild_sticker
    method: GET
    data_selector: records
    params: {}
- name: template
  endpoint:
    path: /template
    method: GET
    data_selector: records
    params: {}
- name: sticker
  endpoint:
    path: /stickers
    method: GET
    data_selector: stickers
- name: guild_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
- name: application_command
  endpoint:
    path: /applications/{application_id}/commands
    method: GET
    data_selector: commands
- name: RawReactionClearEmojiEvent
  endpoint:
    path: /on_raw_reaction_clear_emoji
    method: GET
    data_selector: payload
- name: RawIntegrationDeleteEvent
  endpoint:
    path: /on_raw_integration_delete
    method: GET
    data_selector: payload
- name: PartialWebhookGuild
  endpoint:
    path: /partial_webhook_guild
    method: GET
    data_selector: data
- name: PartialWebhookChannel
  endpoint:
    path: /partial_webhook_channel
    method: GET
    data_selector: data
- name: Object
  endpoint:
    path: /object
    method: GET
    data_selector: data
- name: bans
  endpoint:
    path: /guilds/{guild_id}/bans
    method: GET
    data_selector: BanEntry
    params: {}
- name: templates
  endpoint:
    path: /guilds/{guild_id}/templates
    method: GET
    data_selector: Template
    params: {}
- name: webhooks
  endpoint:
    path: /guilds/{guild_id}/webhooks
    method: GET
    data_selector: Webhook
    params: {}
- name: stickers
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: GuildSticker
    params: {}
- name: emojis
  endpoint:
    path: /guilds/{guild_id}/emojis
    method: GET
    data_selector: Emoji
    params: {}
- name: message_reference
  endpoint:
    path: /discord/message/reference
    method: GET
    data_selector: attributes
    params: {}
- name: scheduled_event
  endpoint:
    path: /guilds/{guild_id}/scheduled-events
    method: GET
    data_selector: events
- name: application_command
  endpoint:
    path: /applications/{application_id}/commands
    method: GET
    data_selector: commands
- name: partial_message
  endpoint:
    path: /discord/partial_message
    method: GET
    data_selector: message
    params: {}
- name: IntegrationAccount
  endpoint:
    path: /discord/IntegrationAccount
    method: GET
    data_selector: records
- name: BotIntegration
  endpoint:
    path: /discord/BotIntegration
    method: GET
    data_selector: records
- name: StreamIntegration
  endpoint:
    path: /discord/StreamIntegration
    method: GET
    data_selector: records
- name: ApplicationCommandInteractionDataOption
  endpoint:
    path: /discord/ApplicationCommandInteractionDataOption
    method: GET
    data_selector: records
- name: Interaction
  endpoint:
    path: /discord/Interaction
    method: GET
    data_selector: records
- name: Activity
  endpoint:
    path: /Activity
    method: GET
    data_selector: records
- name: Game
  endpoint:
    path: /Game
    method: GET
    data_selector: records
- name: Streaming
  endpoint:
    path: /Streaming
    method: GET
    data_selector: records
- name: CustomActivity
  endpoint:
    path: /CustomActivity
    method: GET
    data_selector: records
- name: member
  endpoint:
    path: /guilds/{guild_id}/members
    method: GET
    data_selector: members
    params: {}
- name: guild_avatar
  endpoint:
    path: /guild_avatar
    method: GET
    data_selector: Asset
- name: activity
  endpoint:
    path: /activity
    method: GET
    data_selector: Union[Activity, Game, CustomActivity, Streaming, Spotify]
- name: mentioned_in
  endpoint:
    path: /mentioned_in
    method: GET
    data_selector: bool
- name: top_role
  endpoint:
    path: /top_role
    method: GET
    data_selector: Role
- name: guild_permissions
  endpoint:
    path: /guild_permissions
    method: GET
    data_selector: Permissions
- name: voice
  endpoint:
    path: /voice
    method: GET
    data_selector: VoiceState
- name: timed_out
  endpoint:
    path: /timed_out
    method: GET
    data_selector: bool
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: message
- name: role
  endpoint:
    path: /roles/{role_id}
    method: GET
    data_selector: role
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
    params: {}
- name: reaction
  endpoint:
    path: /api/v1/messages/reactions
    method: POST
    data_selector: reaction
    params: {}
- name: invites
  endpoint:
    path: /channel/invites
    method: GET
- name: create_thread
  endpoint:
    path: /channels/{channel_id}/threads
    method: POST
- name: delete_channel
  endpoint:
    path: /channels/{channel_id}
    method: DELETE
- name: thread
  endpoint:
    path: /threads
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: stage_instance
  endpoint:
    path: /stage_instance
    method: GET
    data_selector: instance
- name: channel
  endpoint:
    path: /channels
    method: POST
    data_selector: channel
- name: StageInstance
  endpoint:
    path: /stage_instance
    method: GET
    data_selector: data
    params: {}
- name: CategoryChannel
  endpoint:
    path: /category_channel
    method: GET
    data_selector: data
    params: {}
- name: pinned_messages
  endpoint:
    path: /channels/{channel.id}/pins
    method: GET
    data_selector: messages
- name: send_message
  endpoint:
    path: /channels/{channel.id}/messages
    method: POST
    data_selector: message
- name: message_send
  endpoint:
    path: /send_message
    method: POST
    data_selector: message
    params: {}
- name: trigger_typing
  endpoint:
    path: /trigger_typing
    method: POST
    data_selector: typing_indicator
    params: {}
- name: sticker
  endpoint:
    path: /stickers
    method: GET
    data_selector: stickers
- name: standard_sticker
  endpoint:
    path: /standard_stickers
    method: GET
    data_selector: standard_stickers
- name: guild_sticker
  endpoint:
    path: /guild_stickers
    method: GET
    data_selector: guild_stickers
- name: template
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
- name: sticker
  endpoint:
    path: /sticker
    method: GET
- name: standard_sticker
  endpoint:
    path: /standard_sticker
    method: GET
- name: guild_sticker
  endpoint:
    path: /guild_sticker
    method: GET
- name: application_command
  endpoint:
    path: /application_command
    method: GET
- name: RawReactionClearEmojiEvent
  endpoint:
    path: /on_raw_reaction_clear_emoji
    method: POST
    data_selector: message_id
    params: {}
- name: RawIntegrationDeleteEvent
  endpoint:
    path: /on_raw_integration_delete
    method: POST
    data_selector: integration_id
    params: {}
- name: PartialWebhookGuild
  endpoint:
    path: /webhook/guild
    method: GET
    data_selector: id
    params: {}
- name: PartialWebhookChannel
  endpoint:
    path: /webhook/channel
    method: GET
    data_selector: id
    params: {}
- name: message_reference
  endpoint:
    path: /discord/message_reference
    method: GET
    data_selector: message_id
- name: partial_message
  endpoint:
    path: /discord/PartialMessage
    method: GET
- name: Activity
  endpoint:
    path: /discord/activity
    method: GET
    data_selector: activities
- name: Game
  endpoint:
    path: /discord/game
    method: GET
    data_selector: games
- name: Streaming
  endpoint:
    path: /discord/streaming
    method: GET
    data_selector: streams
- name: CustomActivity
  endpoint:
    path: /discord/custom_activity
    method: GET
    data_selector: custom_activities
- name: add_reaction
  endpoint:
    path: /api/v1/messages/{message_id}/reactions
    method: POST
    data_selector: reaction
    params: {}
notes:
- This module uses the Python logging module to log diagnostic and errors in an output
  independent way.
- This returns only up to 128 most recent private channels due to an internal working
  on how Discord deals with private channels.
- Bot accounts in more than 10 guilds are not allowed to create guilds.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Ensure correct permissions are set for application.
- This class allows you to implement a protocol to allow for an external method of
  sending voice.
- This method is an API call. For general usage, consider guilds instead.
- Requires a valid application ID to access
- Data may return nulls for optional fields
- This method is an API call. For general usage, consider `get_guild()` instead.
- Uses FFmpeg for audio processing.
- Just because you receive a GuildChannel does not mean that you can communicate in
  said channel.
- Intents.guilds must be enabled for guild-related events
- Intents.bans must be enabled for ban-related events
- Intents.emojis_and_stickers must be enabled for emoji and sticker events
- Intents.integrations must be enabled for integration events
- Intents.members must be enabled for member-related events
- Intents.webhooks must be enabled for webhook events
- This requires [`Intents.messages`](#discord.Intents.messages "discord.Intents.messages")
  to be enabled.
- Uses OAuth2 with authorization code flow — requires setup of application in Discord
  Developer Portal
- Webhooks are a form to send messages to channels in Discord without a bot user or
  authentication.
- There are two main ways to use Webhooks.
- This requires Intents.guilds to be enabled.
- This requires Intents.bans to be enabled.
- This requires Intents.emojis_and_stickers to be enabled.
- This requires Intents.integrations to be enabled.
- This requires Intents.invites to be enabled.
- This requires Intents.members to be enabled.
- This requires Intents.presences to be enabled.
- This requires Intents.webhooks to be enabled.
- Uses Intents for various events and requires specific ones to be enabled.
- Working with Guild.audit_logs() is a complicated process with a lot of machinery
  involved.
- This allows you to edit or delete a message sent by your webhook.
- Webhook cannot be used to make requests if the authentication token is None.
- Abstract base classes should not be instantiated.
- Requires OAuth2 setup for bot applications.
- May encounter rate limits on API calls.
- All parameters for fetching guilds are optional.
- The audio source reads are done in a separate thread.
- You must have the ffmpeg or avconv executable in your path environment variable
  in order for this to work.
- Requires OAuth2 token for accessing user and guild data
- This requires Intents.messages to be enabled.
- Requires setup of connected app in Discord
- This function propagates the exceptions thrown.
- The bitness of the library must match the bitness of your python interpreter.
- When fetching with an unauthenticated webhook, the returned webhook does not contain
  any user information.
- This requires [`Intents.reactions`](#discord.Intents.reactions) to be enabled.
- This requires both [`Intents.reactions`](#discord.Intents.reactions) and [`Intents.members`](#discord.Intents.members)
  to be enabled.
- This requires [`Intents.members`](#discord.Intents.members) to be enabled.
- This requires [`Intents.voice_states`](#discord.Intents.voice_states) to be enabled.
- You must have read_message_history permissions to use this.
- If None, it retrieves every guild you have access to. Note, however, that this would
  make it a slow operation.
- Uses OAuth2 for authentication.
- All parameters are optional.
- If a datetime is provided, it is recommended to use a UTC aware datetime.
- If the datetime is naive, it is assumed to be local time.
- When using the around argument, the maximum limit is 101.
- If the limit is an even number then this will return at most limit + 1 messages.
- This method is an API call.
- Webhooks allow sending messages to channels without a bot user.
- On Windows, this function should not need to be called as the binaries are automatically
  loaded.
- On Windows, the .dll extension is not necessary. However, on Linux the full extension
  is required to load the library.
- Requires Intents to be enabled for various events
- Actions in the audit log can be categorized as create, delete, or update.
- Accessing an attribute that does not match the specified action will lead to an
  attribute error.
- This requires Intents.reactions to be enabled.
- This requires Intents.members within a guild context.
- This requires Intents.voice_states to be enabled.
- API provides actions related to audit logs including create, delete, and update.
- Requires setup of a Discord application to obtain client credentials.
- Must have the ffmpeg or avconv executable in your path environment variable in order
  for this to work.
- Voice channels will always be sorted below text channels.
- Requires specific Intents to be enabled for various events.
- Certain actions have specific attributes that may be retrieved.
- You must have the `send_messages` permission to do this.
- You must have `manage_messages` permission to edit messages.
- Represents a Discord guild, referred to as a 'server' in the official Discord UI.
- This method is an API call. For general usage, consider `guilds` instead.
- When fetching with an unauthenticated webhook, returned webhook does not contain
  any user information.
- Uses OAuth2 for authentication — requires setup of application in Discord Developer
  Portal.
- API responses may vary based on permissions and scopes granted.
- The audio stream can be Opus encoded or not, however if the audio stream is not
  Opus encoded then the audio format must be 16-bit 48KHz stereo PCM.
- Not all actions have attributes.
- Certain actions are limited to specific permission levels.
- Requires setup of connected app in api
- Uses OAuth2 for authentication
- On Windows, the .dll extension is not necessary.
- On Linux the full extension is required to load the library.
- You must have `manage_messages` permission to suppress a message.
- Requires specific intents to be enabled for various events.
- Requires setup of connected app in discord
- Some properties may return nulls
- Requires manage_guild permission to delete or edit integrations and stickers.
- Messages may include rich content such as embeds and attachments.
- Some messages may not include all attributes depending on the context.
- This module uses the Python logging module to log diagnostic and errors.
- You must have the manage_channels permission to receive invite events.
- Due to technical limitations, some events might not be called as soon as one expects.
- Must have proper permissions to perform actions like creating or managing emojis
  and roles.
- This requires [`Intents.members`](#discord.Intents.members) within a guild context.
- Requires OAuth2 authentication to access the API
- Some objects may return nulls in deeply nested fields
- Ensure logging is configured properly.
- Bot accounts in more than 10 guilds are not allowed to create guilds
- Requires setup of OAuth2 application in Discord.
- Webhooks can be used to send messages to channels without a bot user.
- Requires `manage_guild` permissions for certain endpoints.
- When fetching with an unauthenticated webhook, returned webhook does not contain
  user information.
- Requires user to have appropriate permissions to access certain endpoints.
- The message ID is an integer.
- The content of the message is a string.
- The guild must have `COMMUNITY` in `features`.
- Requires enabling specific intents for different functionalities.
- Be cautious of event recursion when handling messages.
- Requires proper permissions to access member details.
- Some member attributes may be null based on their status.
- Due to a Discord API limitation, this may be None if the user is listening to a
  song on Spotify with a title longer than 128 characters.
- Represents a sticker that is found in a standard sticker pack.
- Represents a sticker that belongs to a guild.
- Messages can have system content that may differ from standard message content.
- All the events must be a coroutine.
- If the library is 64-bit then your python interpreter must be 64-bit as well.
- Due to a Discord API limitation, some properties may return null values.
- Uses OAuth2 with refresh token — requires setup of connected app in discord
- You must have manage_emojis permission to do this.
- Requires the `manage_channels` permission to create channels.
- You must have the `manage_emojis` permission to do this.
- You must have the `manage_roles` permission to do this.
- You must have the `manage_guild` permission to use this as well.
- Requires setting `enable_debug_events` in the Client for debugging.
- Due to a Discord API limitation, some properties may return None.
- Some objects like Contact may return nulls in deeply nested fields
- The API supports various actions related to audit logs.
- When fetching with an unauthenticated webhook, i.e. is_authenticated() returns False,
  then the returned webhook does not contain any user information.
- Requires setup of OAuth2 application in Discord Developer Portal
- Requires OAuth2 authorization setup in Discord developer portal.
- This requires `Intents.integrations` to be enabled.
- This requires `Intents.invites` to be enabled.
- This requires `Intents.members` to be enabled.
- This requires `Intents.presences` to be enabled.
- This requires `Intents.emojis_and_stickers` to be enabled.
- This requires `Intents.guilds` to be enabled.
- This requires `Intents.webhooks` to be enabled.
- This requires `Intents.messages` to be enabled.
- You must have the [`send_messages`](#discord.Permissions.send_messages "discord.Permissions.send_messages")
  permission to do this.
- You must have [`manage_messages`](#discord.Permissions.manage_messages "discord.Permissions.manage_messages")
  permission to use this.
- This is referred to as a 'server' in the official Discord UI.
- Requires OAuth2 authentication for access.
- Supports creating, editing, and executing webhooks.
- This webhook does not have a token associated with it.
- You must have the [`manage_messages`](#discord.Permissions.manage_messages "discord.Permissions.manage_messages")
  permission to do this in a non-private channel context.
- Due to a Discord API limitation, the activity may be None if the user is listening
  to a song on Spotify with a title longer than 128 characters.
- Some objects may have attributes that are optional and can be None.
- Requires setup of OAuth2 application on Discord
- You must have `manage_emojis` permission to do this.
- This is mutually exclusive with beginning, end, before, and after.
- You must have the [`manage_channels`](#discord.Permissions.manage_channels "discord.Permissions.manage_channels")
  permission to do this.
- Requires permissions to manage channels and emojis.
- Uses OAuth2 with refresh token — requires setup of application in Discord developer
  portal
- Requires `manage_channels` permission to edit and create channels.
- Requires `manage_webhooks` permission to create and manage webhooks.
- You must have `manage_channels` permission to use this.
- Requires Intents.reactions to be enabled
- Requires Intents.members within a guild context for direct messages
- A role was deleted.
- An invite was created.
- An invite was updated.
- An invite was deleted.
- A webhook was created.
- A webhook was updated.
- A webhook was deleted.
- An emoji was created.
- An emoji was updated.
- An emoji was deleted.
- A message was deleted by a moderator.
- Messages were bulk deleted by a moderator.
- A message was pinned in a channel.
- A message was unpinned in a channel.
- A guild integration was created.
- A guild integration was updated.
- A guild integration was deleted.
- A stage instance was started.
- A stage instance was updated.
- A stage instance was ended.
- A sticker was created.
- A sticker was updated.
- A sticker was deleted.
- A thread was created.
- A thread was updated.
- A thread was deleted.
- Voice channels will always be sorted below text channels. This is a Discord limitation.
- This API has specific permission requirements for certain actions.
- Responses may vary based on user roles and permissions.
- You need the manage_messages permission to use this.
- Requires enabling specific intents for various events
- This requires Intents.members within a guild context for direct messages.
- You must have the manage_guild permission to get this information.
- Requires appropriate permissions to access different channels.
- You must have `manage_roles` permission to use this.
- You must have manage_channels permission to perform certain actions.
- Consider using read_message_history permission to access message history.
- You must have `manage_channels` permission to use this API.
- Defaults to 0 for max_age, max_uses, and temporary.
- If unique is set to False, it will return a previously created invite.
- Ensure the appropriate permissions are granted for API calls.
- Requires permissions set for managing channels and fetching audit logs.
- You must have the manage_emojis permission to do this.
- You must have the manage_roles permission to do this.
- You must have the manage_guild permission to use this as well.
- Due to a limitation with the Discord API, the Message objects returned by this method
  do not contain complete Message.reactions data.
- Due to a Discord API limitation, a user’s Spotify activity may not appear if they
  are listening to a song with a title longer than 128 characters.
- Due to a Discord API limitation, the activity field may be None if the user is listening
  to a song on Spotify with a title longer than 128 characters.
- This requires [`Intents.integrations`](#discord.Intents.integrations "discord.Intents.integrations")
  to be enabled.
- This requires [`Intents.invites`](#discord.Intents.invites "discord.Intents.invites")
  to be enabled.
- This requires [`Intents.members`](#discord.Intents.members "discord.Intents.members")
  to be enabled.
- This requires [`Intents.presences`](#discord.Intents.presences "discord.Intents.presences")
  to be enabled.
- This requires [`Intents.emojis_and_stickers`](#discord.Intents.emojis_and_stickers
  "discord.Intents.emojis_and_stickers") to be enabled.
- This requires [`Intents.guilds`](#discord.Intents.guilds "discord.Intents.guilds")
  to be enabled.
- This requires [`Intents.webhooks`](#discord.Intents.webhooks "discord.Intents.webhooks")
  to be enabled.
- You must have the manage_roles permission to use this.
- Due to a limitation with the Discord API, the Message objects returned by the pins
  method do not contain complete Message.reactions data.
- Requires `manage_channels` permission to edit or clone channels.
- Requires `manage_webhooks` permission to create or get webhooks.
- You must have manage_channels permission to use this API.
- The API provides various audit log actions such as create, update, delete.
- Invite creation failed.
- You do not have permissions to create a thread.
- You must have manage_channels permission to use this.
- The webhook's token must not be None to make requests.
- You must have `send_messages` and `use_threads` to add a user to a public thread.
- If the thread is private then `send_messages` and either `use_private_threads` or
  `manage_messages` is required to add a user to the thread.
- You must have the `manage_channels` permission to use this.
- User properties such as avatar and banner are only available via specific methods.
- Requires correct permissions to manage messages
- You are not allowed to fetch audit logs
- General usage for retrieving guilds should use guilds endpoint.
- All the events must be a coroutine to avoid unexpected errors.
- Requires Intents for various events to be enabled.
- You must have appropriate permissions to create webhooks and manage channels.
- Certain actions map to specific attributes being set.
- Webhook support is available for sending messages without a bot user.
- This API does not require authentication.
- Due to a limitation with the Discord API, the Message objects returned by the pinned
  messages method do not contain complete Message.reactions data.
- Requires OAuth2 authentication to access member data.
- You must have manage_channels permission to edit or delete channels.
- The number of messages to delete must not exceed 100.
- You must have `manage_channels` permission to use channel-related endpoints.
- If you want to use unicode emoji, you must pass a valid unicode code point in a
  string.
- You cannot send ':thumbsup:' style shorthands.
- Requires permissions such as manage_threads and read_message_history to interact
  with threads.
- It is strongly recommended that the logging module is configured, as no errors or
  warnings will be output if it is not set up.
- For more information, check the documentation and tutorial of the logging module.
- If intents are not passed, then the library defaults to every intent being enabled
  except the privileged intents, currently Intents.members and Intents.presences.
- Enabling privileged intents requires manual steps in the developer portal.
- Privileged intents require manual enabling in the developer portal.
- The message referenced may not exist.
- The resolved message can be of type DeletedReferencedMessage if deleted.
- Currently, this requires opting in explicitly via the developer portal as well.
- Bots in over 100 guilds will need to apply to Discord for verification.
- You must pass a valid unicode code point in a string to add a reaction.
- This token is essentially your bot’s password. You should never share this with
  someone else.
- If you accidentally leaked your token, click the 'Regenerate' button as soon as
  possible.
- Enabling privileged intents when your bot is in over 100 guilds requires going through
  bot verification.
- Even if you enable intents through the developer portal, you still have to enable
  the intents through code as well.
- OAuth2 is required for accessing the Discord API
errors:
- 'HTTPException: Retrieving the information failed somehow.'
- 'HTTPException: Guild creation failed.'
- 'NotFound: A user with this ID does not exist.'
- 'discord.Forbidden: You don’t have the applications.commands scope in the guild
  you’re trying to add commands to.'
- 'discord.HTTPException: Upserting the application commands failed.'
- 'discord.NotFound: There is no globally added command with the ID provided.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404 Not Found: Check if the resource exists or if the ID is correct.'
- '403 Forbidden: Check if your token has the right permissions.'
- 'HTTPException: Getting the guilds failed.'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Ensure valid token or ID'
- '404 Not Found: Verify the application ID'
- 'Forbidden: You do not have permissions to revoke invites.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'ClientException: The subprocess failed to be created.'
- '400 Bad Request: Invalid parameters provided'
- '401 Unauthorized: Invalid token or missing scopes'
- '404 Not Found: Resource does not exist'
- 'discord.Forbidden: You don’t have the `applications.commands` scope in the guild
  you’re trying to add commands to.'
- 'HTTPException: Sending the message failed.'
- 'NotFound: This webhook was not found.'
- 'Forbidden: The authorization token for the webhook is incorrect.'
- 'HTTPException: Editing the message failed'
- 'Forbidden: Edited a message that is not yours'
- 'TypeError: You specified both embed and embeds or file and files'
- 'ValueError: The length of embeds was invalid'
- 'InvalidArgument: There was no token associated with this webhook or the webhook
  had no state'
- 'InvalidArgument: There was no token associated with this webhook'
- 'HTTPException: Deleting the message failed'
- 'Forbidden: Deleted a message that is not yours'
- 'HTTPException: Editing the message failed.'
- 'Forbidden: Edited a message that is not yours.'
- 'InvalidArgument: There was no token associated with this webhook.'
- 'Forbidden: You do not have permissions to get channel message history.'
- 'HTTPException: The request to get message history failed.'
- '401 Unauthorized: Check the provided token.'
- '404 Not Found: Resource does not exist.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Invalid token provided'
- '404 Not Found: The resource could not be found'
- '429 Too Many Requests: Rate limit exceeded'
- 'TypeError: You specified both `embed` and `embeds` or `file` and `files`.'
- 'ValueError: The length of `embeds` was invalid.'
- 'InvalidArgument: There was no token associated with this webhook or `ephemeral`
  was passed with the improper webhook type or there was no state attached with this
  webhook when giving it components.'
- 'HTTPException: Could not fetch the webhook'
- 'NotFound: Could not find the webhook by this ID'
- 'InvalidArgument: This webhook does not have a token associated with it.'
- 'HTTPException: General error retrieving information from Discord.'
- '403 Forbidden: You don’t have the applications.commands scope in the guild you’re
  trying to add commands to.'
- 'HTTPException: Upserting the application commands failed.'
- 'TypeError: You specified both embed and embeds or file and files.'
- 'ValueError: The length of embeds was invalid.'
- 'HTTPException: Deleting the webhook failed.'
- 'NotFound: This webhook does not exist.'
- 'Forbidden: You do not have permissions to delete this webhook.'
- 'NotFound: The specified message was not found.'
- 'Forbidden: You do not have the permissions required to get a message.'
- 'HTTPException: Retrieving the message failed.'
- 'InvalidArgument: There was no token associated with this webhook or ephemeral was
  passed with the improper webhook type or there was no state attached with this webhook
  when giving it components.'
- 'InvalidArgument: This webhook does not have a token associated with it'
- 'LoginFailure: The wrong credentials are passed.'
- 'GatewayNotFound: If the gateway to connect to Discord is not found.'
- '404 Not Found: Check the ID or URL provided'
- '403 Forbidden: Ensure you have the necessary permissions'
- 'discord.Forbidden: You don’t have the `applications.commands` scope'
- 'discord.HTTPException: Upserting the application commands failed'
- 'InvalidArgument: The asset had an invalid format.'
- 'DiscordException: There was no internal connection state.'
- 'HTTPException: Downloading the asset failed.'
- 'NotFound: The asset was deleted.'
- 'Forbidden: Tried to suppress a message without permissions.'
- 'InvalidArgument: You specified both `embed` and `embeds`.'
- 'HTTPException: Clearing the reaction failed.'
- 'Forbidden: You do not have the proper permissions to clear the reaction.'
- 'NotFound: The emoji you specified was not found.'
- 'InvalidArgument: The emoji parameter is invalid.'
- '401 Unauthorized: Check your access token and scopes.'
- '403 Forbidden: You do not have permission to perform this action.'
- '404 Not Found: The requested resource could not be found.'
- 'Forbidden: Tried to suppress a message without permissions or edited a message’s
  content or embed that isn’t yours.'
- 'InvalidArgument: You specified both `embed` and `embeds`'
- '403 Forbidden: You lack the permission to view this resource.'
- '404 Not Found: The specified guild does not exist.'
- 'Forbidden: You do not have the proper permissions to publish this message.'
- 'FORBIDDEN: You are not allowed to fetch audit logs'
- 'HTTPException: An error occurred while fetching the audit logs'
- 'Forbidden: You do not have permissions to access this resource.'
- 'HTTPException: An error occurred while processing the request.'
- 'InvalidArgument: The provided argument is invalid.'
- 'Forbidden: You do not have the proper permissions'
- 'HTTPException: An error occurred'
- 'Forbidden: You do not have permissions to create an event.'
- 'HTTPException: Creating the event failed.'
- 'InvalidArgument: The arguments provided aren’t valid for creating an event.'
- 'NotFound: There is no globally added command with the ID provided.'
- 'FORBIDDEN: You do not have permission to perform this action.'
- 'HTTPException: An error occurred during the request.'
- 'InvalidArgument: You specified both embed and embeds'
- 'Forbidden: You are not allowed to fetch audit logs'
- 'Forbidden: You do not have permissions to edit the guild.'
- 'HTTPException: Editing the guild failed.'
- 'InvalidArgument: The image format passed in to `icon` is invalid. It must be PNG
  or JPG.'
- 'HTTPException: An error occurred fetching or manipulating resources.'
- 'Forbidden: You do not have permissions to perform this action.'
- 'HTTPException: Invite creation failed'
- 'Forbidden: You do not have proper permissions'
- 'Rate limit exceeded: Reduce the frequency of API calls.'
- 'Unauthorized: Check your credentials.'
- 'HTTPException: Invalid request or error occurred'
- 'Forbidden: You do not have permission'
- 'NotFound: Resource does not exist'
- 'HTTPException: An error occurred while fetching the audit logs.'
- 'Forbidden: You do not have the required permissions.'
- 'NotFound: The emoji requested could not be found.'
- 'Forbidden: You are not allowed to create emojis.'
- 'Forbidden: You do not have permissions to create the role.'
- 'Forbidden: You do not have the proper permissions to get this.'
- 'Forbidden: You do not have permission to edit the widget.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Recheck OAuth token.'
- '404 Not Found: Ensure the channel or guild ID is valid.'
- 'Forbidden: You do not have the proper permissions to send the message.'
- 'InvalidArgument: The files list is not of the appropriate size.'
- 'HTTPException: Creating the role failed.'
- 'InvalidArgument: An invalid keyword argument was given.'
- '403 Forbidden: Insufficient permissions to access this member.'
- '404 Not Found: The member does not exist.'
- 'Forbidden: You do not have permissions to alter this member’s communication.'
- 'HTTPException: Timeout failed.'
- 'InvalidArgument: The files list is not of the appropriate size, you specified both
  file and files, or you specified both embed and embeds, or the reference object
  is not a Message, MessageReference or PartialMessage.'
- 'Forbidden: You do not have the proper permissions to create this channel.'
- 'HTTPException: Creating the channel failed.'
- 'InvalidArgument: The permission overwrite information is not in proper form.'
- 'InvalidArgument: The image format passed in to `icon` is invalid.'
- 'HTTPException: An error occurred fetching the emojis.'
- '403 Forbidden: You do not have permissions to alter this member’s communication.'
- '404 Not Found: The specified message or member was not found.'
- 'HTTPException: Sending the message failed'
- 'Forbidden: You do not have the proper permissions to send the message'
- 'InvalidArgument: The files list is not of the appropriate size'
- 'Forbidden: You are not allowed to delete emojis.'
- 'HTTPException: An error occurred deleting the emoji.'
- 'Forbidden: You do not have permissions to change the role.'
- 'HTTPException: Editing the role failed.'
- 'InvalidArgument: An invalid position was given or the default role was asked to
  be moved.'
- 'Forbidden: You do not have the proper permissions to create emojis.'
- 'Forbidden: You do not have permissions to move the roles.'
- 'discord.HTTPException: Getting the application commands failed.'
- 'HTTPException: The operation failed.'
- 'FORBIDDEN: You do not have the proper permissions to send the message.'
- 'INVALID_ARGUMENT: The `files` list is not of the appropriate size.'
- 'Forbidden: You do not have permissions to delete the role.'
- 'HTTPException: Deleting the role failed.'
- '401 Unauthorized: Invalid token or insufficient permissions'
- '404 Not Found: Resource not found'
- NotFound – The specified message was not found.
- Forbidden – You do not have the permissions required to get a message.
- HTTPException – Retrieving the message failed.
- 'Forbidden: You do not have proper permissions to delete the message.'
- '403 Forbidden: You are not allowed to fetch audit logs'
- '403 Forbidden: You do not have permissions to perform this action.'
- '404 Not Found: The specified resource was not found.'
- 'Forbidden: You do not have the proper permissions to kick.'
- 'Forbidden: You do not have the proper permissions to ban.'
- 'Forbidden: You do not have the proper permissions to unban.'
- '403 Forbidden: Insufficient permissions for the action'
- 'InvalidArgument: Issues with file uploads or references.'
- 'InvalidArgument: An invalid position was given or a bad mix of arguments were passed.'
- 'Forbidden: You do not have permissions to move the channel.'
- 'HTTPException: Moving the channel failed.'
- 'Forbidden: You do not have permissions to edit channel specific permissions.'
- 'HTTPException: Editing channel specific permissions failed.'
- 'NotFound: The role or member being edited is not part of the guild.'
- 'InvalidArgument: The overwrite parameter invalid or the target type was not Role
  or Member.'
- '**InvalidArgument**: An invalid position was given or a bad mix of arguments were
  passed.'
- '**Forbidden**: You do not have permissions to move the channel.'
- '**HTTPException**: Moving the channel failed.'
- 'Forbidden: You do not have permissions to edit the stage instance.'
- 'HTTPException: Editing a stage instance failed.'
- 'InvalidArgument: The `files` list is not of the appropriate size'
- 'HTTPException: Getting the template failed.'
- 'Forbidden: You do not have permission to revoke invites.'
- 'NotFound: Invalid webhook ID.'
- 'HTTPException: The request failed due to an HTTP error.'
- 'HTTPException: Creating the webhook failed.'
- 'Forbidden: You do not have permissions to create a webhook.'
- '403 Forbidden: You do not have the required permissions to perform this action.'
- '404 NotFound: The requested resource was not found.'
- 'NotFound: The template is invalid.'
- 'Missing intents: Ensure required intents are enabled'
- 'HTTPException: An error occurred while fetching the information.'
- 'InvalidArgument: An integer was not passed for days.'
- '403 Forbidden: You do not have permissions to access this resource.'
- '404 Not Found: The requested resource was not found.'
- 'HTTPException: The request failed.'
- '403 Forbidden: You do not have permissions to create a webhook.'
- 'HTTPException: Invite creation failed.'
- 'NotFound: The channel that was passed is a category or an invalid channel.'
- 'HTTPException: General error occurred with the API request.'
- 'Forbidden: Insufficient permissions to perform the action.'
- 'NotFound: The specified resource was not found.'
- 'InvalidArgument: If the privacy_level parameter is not the proper type.'
- 'Forbidden: You do not have permissions to create a stage instance.'
- 'HTTPException: Creating a stage instance failed.'
- 'NotFound: The stage instance or channel could not be found.'
- 'HTTPException: Getting the stage instance failed.'
- 'Forbidden: You do not have permissions to edit the channel.'
- 'HTTPException: Editing the channel failed.'
- 'Forbidden: You do not have proper permissions to delete the channel.'
- 'NotFound: The channel was not found or was already deleted.'
- 'HTTPException: Deleting the channel failed.'
- 'HTTPException: Retrieving the pinned messages failed.'
- 'Forbidden: You do not have proper permissions to create a thread.'
- 'HTTPException: Starting the thread failed.'
- 'Forbidden: You do not have permissions to add the user to the thread.'
- 'HTTPException: Adding the user to the thread failed.'
- 'Forbidden: You do not have permissions to remove the user from the thread.'
- 'HTTPException: Removing the user from the thread failed.'
- 'HTTPException: Retrieving the members failed.'
- 'HTTPException: Deleting the thread failed.'
- 'InvalidArgument: The `files` list is not of the appropriate size, you specified
  both `file` and `files`, or you specified both `embed` and `embeds`, or the `reference`
  object is not a Message, MessageReference or PartialMessage.'
- 'HTTPException: General error occurred during request'
- 'InvalidArgument: Provided argument is invalid'
- 'NotFound: The message was deleted already'
- 'HTTPException: Deleting the message failed.'
- 'InvalidArgument: The `files` list is not of the appropriate size.'
- '403 Forbidden: You don’t have the `applications.commands` scope'
- 'HTTPException: Upserting the application commands failed'
- 'InvalidArgument: The image format passed in is invalid.'
- '401 Unauthorized: Invalid access token.'
- '403 Forbidden: Insufficient permissions.'
- 'Forbidden: You do not have the proper permissions.'
- 'HTTPException: Operation failed.'
- 'Forbidden: You do not have permissions to create a thread.'
- 'InvalidArgument: If position is less than 0 or greater than the number of channels,
  or if the permission overwrite information is not in proper form.'
- 'Forbidden: You do not have proper permissions to get the information.'
- 'Rate limit exceeded: Reduce the number of requests.'
- 'HTTPException: Retrieving the pinned messages failed'
- 'InvalidArgument: The `files` list is not of the appropriate size, you specified
  both `file` and `files`, or you specified both `embed` and `embeds`, or the `reference`
  object is not a `Message`, `MessageReference` or `PartialMessage`.'
- 'NotFound: The message was deleted already.'
- Rate limit of 120 requests per 60 seconds when retrieving members.
- '401 Unauthorized: Verify your OAuth2 token and scopes'
- '404 Not Found: Check the endpoint URL and parameters'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuth2
  - Application
  - User
  - Guild
  - Intents.reactions
  - Intents.members
  - Intents.voice_states
  - Intents.messages
  - AuditLogEntry
  - AuditLogDiff
  - Role
  - Invite
  - Webhook
  - Emoji
  - TextChannel
  - Member
  - GuildSticker
  - Thread
  - Intents
  - ClientCredentials
  - AuthorizationCode
  - Intents.integrations
  - Intents.invites
  - Intents.presences
  - Intents.emojis_and_stickers
  - Intents.guilds
  - abc.GuildChannel
  - ClientUser
  - Message
  - Intents.webhooks
  - manage_emojis
  - Permissions.manage_emojis
  - discord.Forbidden
  - discord.HTTPException
  - discord.NotFound
  - DMChannel
  - Client
  - AutoShardedClient
  - AutoShardedBot
  - Bot
  - BotConfig
  - WebsiteConfig
client:
  base_url: https://discord.com/api/v10
  auth:
    type: oauth2
    flow: authorization_code
    token_url: https://discord.com/api/oauth2/token
    client_id: '{{ dlt.secrets[''discord_client_id''] }}'
    client_secret: '{{ dlt.secrets[''discord_client_secret''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
