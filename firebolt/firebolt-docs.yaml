resources:
- name: Standard
  endpoint:
    path: /overview/billing
    method: GET
    data_selector: editions
    params: {}
- name: Enterprise
  endpoint:
    path: /overview/billing
    method: GET
    data_selector: editions
    params: {}
- name: Dedicated
  endpoint:
    path: /overview/billing
    method: GET
    data_selector: editions
    params: {}
- name: Firebolt Core
  endpoint:
    path: /self-managed-edition/firebolt-core
    method: GET
    data_selector: features
    params: {}
- name: engine_billing
  endpoint:
    path: /information_schema/engines_billing
    method: GET
    data_selector: records
    params:
      incremental: usage_date
- name: storage_billing
  endpoint:
    path: /information_schema/storage_billing
    method: GET
    data_selector: records
    params:
      incremental: usage_date
- name: rankings
  endpoint:
    path: /reference-sql/commands/data-definition/create-fact-dimension-table
    method: POST
    data_selector: records
    params: {}
- name: read_iceberg
  endpoint:
    path: /reference-sql/functions-reference/table-valued/read_iceberg
    method: GET
- name: read_parquet
  endpoint:
    path: /reference-sql/functions-reference/table-valued/read_parquet
    method: GET
- name: external tables
  endpoint:
    path: /guides/loading-data/working-with-external-tables
    method: GET
- name: COPY FROM statement
  endpoint:
    path: /reference-sql/commands/data-management/copy-from
    method: GET
- name: available_regions
  endpoint:
    path: /reference/available-regions
    method: GET
- name: insert_sharding
  endpoint:
    path: /insert_sharding
    method: POST
    data_selector: settings
    params: {}
- name: partitioned_table
  endpoint:
    path: /firebolt/publish_table
    method: POST
    data_selector: '*'
    params:
      insert_sharding: shard_on_read
- name: playstats
  endpoint:
    path: /firebolt/playstats
    method: INSERT
    data_selector: '*'
    params:
      tablet_min_size_bytes: 4294967296
      tablet_max_size_bytes: 4294967296
- name: status_page
  endpoint:
    path: /status
    method: GET
- name: release_notes
  endpoint:
    path: /release-notes
    method: GET
- name: contact_support
  endpoint:
    path: /contact-support
    method: POST
- name: firebolt_support_access
  endpoint:
    path: /support-access
    method: POST
- name: documentation
  endpoint:
    path: /documentation
    method: GET
- name: synchronous_query
  endpoint:
    path: /api/v1/synchronous_query
    method: POST
- name: service_account
  endpoint:
    path: /sql_reference/commands/access-control/drop-service-account
    method: POST
    data_selector: service_account_name
    params: {}
- name: accounts
  endpoint:
    path: /information_schema/accounts
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
- name: service_accounts
  endpoint:
    path: /service_accounts
    method: POST
- name: Load Data
  endpoint:
    path: /guides/loading-data/loading-data-wizard
    method: GET
    data_selector: records
- name: tutorial_database
  endpoint:
    path: /databases
    method: POST
    data_selector: database
    params:
      name: tutorial_database
- name: tutorial_engine
  endpoint:
    path: /engines
    method: POST
    data_selector: engine
    params:
      name: tutorial_engine
- name: roles
  endpoint:
    path: /roles
    method: GET
    data_selector: roles
- name: organization_roles
  endpoint:
    path: /organization_roles
    method: GET
    data_selector: organization_roles
- name: applicable_roles
  endpoint:
    path: /org_db/information_schema/applicable_roles
    method: GET
    data_selector: '*'
- name: transitive_applicable_roles
  endpoint:
    path: /org_db/information_schema/transitive_applicable_roles
    method: GET
    data_selector: '*'
- name: enabled_roles
  endpoint:
    path: /org_db/information_schema/enabled_roles
    method: GET
    data_selector: '*'
- name: object_privileges
  endpoint:
    path: /org_db/information_schema/object_privileges
    method: GET
    data_selector: '*'
- name: location
  endpoint:
    path: /guides/security/location
    method: GET
    data_selector: locations
- name: users
  endpoint:
    path: /information_schema/users
    method: GET
    data_selector: users
- name: catalogs
  endpoint:
    path: /information_schema/catalogs
    method: GET
    data_selector: catalogs
- name: engines
  endpoint:
    path: /information_schema/engines
    method: GET
    data_selector: engines
- name: schemata
  endpoint:
    path: /information_schema/schemata
    method: GET
    data_selector: schemata
- name: tables
  endpoint:
    path: /information_schema/tables
    method: GET
    data_selector: tables
- name: views
  endpoint:
    path: /information_schema/views
    method: GET
    data_selector: views
- name: organization
  endpoint:
    path: /information_schema/organization
    method: GET
    data_selector: organization
- name: accounts
  endpoint:
    path: /information_schema/accounts
    method: GET
    data_selector: accounts
- name: logins
  endpoint:
    path: /information_schema/logins
    method: GET
    data_selector: logins
- name: service_accounts
  endpoint:
    path: /information_schema/service_accounts
    method: GET
    data_selector: service_accounts
- name: network_policies
  endpoint:
    path: /information_schema/network_policies
    method: GET
    data_selector: network_policies
- name: network_policies
  endpoint:
    path: /information_schema/network_policies
    method: SELECT
    data_selector: '*'
- name: jaffle-shop
  endpoint:
    params: {}
- name: firebolt_external
  endpoint:
    path: /external
    method: POST
    data_selector: tables
    params: {}
- name: s3
  endpoint:
    path: /s3
    method: POST
    data_selector: tables
    params: {}
- name: firebolt_connection
  endpoint:
    path: /api/v1/connections
    method: POST
    data_selector: data
- name: my_taxi_trip_data
  endpoint:
    path: /query
    method: POST
    data_selector: results
- name: my_taxi_trip_data
  endpoint:
    path: /services/data/vXX.X/sobjects/my_taxi_trip_data
    method: GET
    data_selector: records
- name: source_table
  endpoint:
    path: /path/to/source_table
    method: GET
    data_selector: records
    params: {}
- name: processed_files_table
  endpoint:
    path: s3://your-bucket/jars/firebolt-jdbc-3.x.x.jar
    method: POST
    data_selector: records
- name: staging_data
  endpoint:
    path: /staging.cdc_data
    method: POST
    data_selector: data
    params: {}
- name: s3_event_notification
  endpoint:
    path: /
    method: POST
    data_selector: detail
    params:
      bucket:
        name:
        - your_bucket_name
- name: Firebolt
  endpoint:
    path: /firebolt
    method: GET
- name: workspace
  endpoint:
    path: /workspaces
    method: POST
    data_selector: workspace
- name: database
  endpoint:
    path: /databases
    method: POST
    data_selector: database
- name: levels
  endpoint:
    path: /services/data/vXX.X/sobjects/levels
    method: GET
- name: products
  endpoint:
    params: {}
- name: firebolt_connection
  endpoint:
    path: /connections
    method: POST
    data_selector: connection
    params: {}
- name: database
  endpoint:
    path: <account_name>@<database_name>@<engine_name>
    method: CONNECT
    data_selector: records
- name: database
  endpoint:
    path: /databases
    method: GET
- name: schema
  endpoint:
    path: /schemas
    method: GET
- name: Firebolt
  endpoint:
    path: /api/connection
    method: POST
    data_selector: data
- name: Firebolt Database
  endpoint:
    path: /
    method: POST
- name: Amazon S3
  endpoint:
    path: /sources/new_capture
    method: POST
    data_selector: records
- name: Firebolt
  endpoint:
    path: /destinations/new_materialization
    method: POST
    data_selector: records
- name: queries
  endpoint:
    path: /api/v1/queries
    method: POST
    data_selector: data
    params: {}
- name: database
  endpoint:
    path: /databases
    method: GET
    data_selector: databases
- name: engine
  endpoint:
    path: /engines
    method: GET
    data_selector: engines
- name: firebolt
  endpoint:
    path: /api/firebolt
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: CREATE
    data_selector: records
- name: database
  endpoint:
    path: /<database>
    method: GET
    data_selector: records
notes:
- Use a service account and a driver to connect to the Firebolt API which returns
  a result.
- Firebolt is a next-generation cloud data warehouse designed for organizations that
  require lightning-fast analytics at scale.
- Firebolt supports ingesting data efficiently through ELT tools, making it easy to
  move data from data lakes, relational databases, and other source systems into Firebolt.
- Firebolt is designed specifically to address the demands of modern data workloads.
- Firebolt's platform is optimized for integration within modern data workflows.
- Firebolt Core is a free, self-hosted edition of Fireboltâ€™s distributed query engine
  available as a project on GitHub.
- Firebolt supports both parallel and pipelined data processing.
- Defining primary indexes on all tables is encouraged.
- Disabling compression with NONE is not supported.
- Firebolt always compresses data using one of the supported algorithms.
- Firebolt supports caching of both metadata and data of Iceberg tables on local SSDs
  as well as in-memory snapshot caching of metadata.
- Always use secure AWS credentials.
- Use IAM roles instead setting credentials directly in the code for better security.
- 'No Nested Transactions: Starting a new transaction within an existing one will
  cause an error.'
- 'Transaction Lifetime: An idle or active transaction will be automatically aborted
  after 24 hours.'
- 'Number of Statement: The number of statements which can be executed in a single
  explicit transaction is limited to 100.'
- Subqueries allow complex data retrieval by enabling a query to filter results based
  on the outcome of another query.
- Subquery operators are crucial in constructing nested queries, especially within
  the WHERE clause.
- This setting overrides default load-based sharding of input files. Be cautious as
  a single partition with heavy data could overload a single shard.
- This setting is only available via the WITH SETTINGS syntax, not with SET.
- Larger target tablet sizes may require more memory during ingestion.
- Firebolt currently offers limited cross-region data transfer and will throttle requests
  if the limit is exceeded. The current limit is 100 GB per hour per node.
- Identifiers must contain at least one character, and no more than 255 characters
  total.
- Unquoted identifiers must adhere to specific syntax rules.
- Synchronous queries complete within a single request-response cycle.
- Queries running longer than one hour may experience connectivity interruptions.
- You must have access to an active Firebolt account.
- You must have access to an active Firebolt service account.
- You must associate a user with your service account.
- You must have sufficient permissions on the engine, as well as on any tables and
  databases you access.
- To submit an asynchronous query via a raw HTTP request, you must use Firebolt protocol
  version 2.3 or later.
- You can load data into Firebolt from an Amazon S3 bucket using two different workflows.
- You can load data in CSV, Parquet, TSV, AVRO, JSON Lines or ORC formats.
- Each service account requires a secret to access Firebolt programmatically.
- Organization names are globally unique â€” no two organizations can have the same
  name.
- Firebolt does not support usernames with personal email addresses, such as `me@gmail.com`
  or `you@outlook.com`.
- There can be up to 20 accounts per organization and you can use CREATE ACCOUNT 25
  times.
- Managing logins requires the org_admin role.
- Users authenticate via logins or service accounts.
- Managing roles requires the account_admin role.
- Create a login if you want to associate a user with human access to Firebolt.
- A user must have organization administrative privileges to manage logins and service
  accounts.
- Invoices for Firebolt engines and data are submitted through the AWS Marketplace.
- Your account should now be associated with AWS Marketplace.
- A service account is required to access the API.
- New accounts receive credits ($200) to get started exploring Fireboltâ€™s capabilities.
- 'Each FBU is related to the amount of time as follows: Ingest initial data: 4-16
  FBU; Run test queries: 8-32 FBU; Find optimal query performance: 32-240 FBU; Find
  optimal test integrations: 32-240 FBU.'
- Data is stored in units of data storage called tablets.
- Managing network policies requires the org_admin role.
- Role-Based Access Control (RBAC) allows you to manage user permissions by controlling
  who can access or perform operations on specific objects in Firebolt.
- LOCATION objects are secure, reusable objects that store connection details and
  credentials for external data sources.
- LOCATION objects eliminate the need to repeatedly specify credentials across SQL
  scripts, making your data workflows more secure, maintainable, and scalable.
- Enabling MFA for a login requires the org_admin role.
- Ownership transfer using the Firebolt Workspace is not available for Schema, Table,
  and View objects.
- AWS PrivateLink for Firebolt is in public preview and available in all Firebolt
  regions.
- Your security group should allow inbound traffic on port 443 in order to interact
  with the Firebolt API.
- Ensure you have a Firebolt account and a Firebolt database.
- Client ID and secret are obtained by registering a service account.
- The Firebolt Airflow provider package currently supports Apache Airflow 2.x only.
- Task will not fail if query times out, and will proceed to the next task
- Firebolt JDBC driver required for connections
- Ensure IAM permissions are in place for AWS Glue jobs
- A workspace is an organizational unit, accessible by team members, that is created
  for a specific purpose.
- Contact Firebolt Support to enable Looker Cloud connectivity.
- Upload only the public key to Firebolt. Do not share the private key.
- Service account must have necessary permissions and the ID/secret must be correct.
- Firebolt does not support Tableau Cloud.
- Once you have set up a connection to Firebolt, you cannot change the database that
  you specified during setup.
- Active Firebolt account is required
- Service account must be associated with a user with USAGE and SELECT permissions
- This integration is compatible with LangChain 0.1.0 and later versions.
- Consider using appropriate filters and limits in your natural language prompts to
  optimize query performance.
- Uses SQLAlchemy for connection to Firebolt.
- Credentials should be stored as environment variables.
- Pandas 2.2+ is only compatible with SQLAlchemy 2.0+
- Create access credentials in AWS to load data from S3 into Firebolt.
- The Rust SDK does not currently support streaming queries for processing large result
  sets.
- A service account, which is used for programmatic access to Firebolt, uses a client_id
  and a client_secret for identification.
- The Firebolt .NET SDK is designed to facilitate integration with Fireboltâ€™s database
  capabilities.
- Must have access to an active Firebolt service account
- User should have USAGE permission to query your database
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Connection loss: The HTTP connection is interrupted.'
- 'Engine does not exist or you donâ€™t have permission to access it: Ensure the user
  has USAGE permission on the engine.'
- 'Protocol version mismatch: Using an outdated Firebolt protocol version.'
- 'Query failure: The query encounters an execution error.'
- 'Token not found: The provided async query token is invalid or expired.'
- 'Engine does not exist or you donâ€™t have permission to access it: The specified
  Firebolt engine is not running or you donâ€™t have permission to access it.'
- You canâ€™t delete a service account if it is linked to users.
- '401 Unauthorized: User will receive this response if a network policy does not
  allow access.'
- 'Unauthorized: Check credentials or permissions'
- '401 Unauthorized: If a network policy does not allow access'
- '401 Unauthorized: Check client ID and secret'
- 'File not found: Ensure correct S3 path is used'
- 'Rate limit exceeded: New connections or Queries limit reached.'
- 'Configuration error: client_id is required'
- 'Authentication error: Invalid credentials'
- 'Network error: Failed to get engine URL'
- 'Query error: relation "table_name" does not exist'
- 'invalid connection string format: URI format is invalid or it contains illegal
  characters'
- 'unknown parameter name database: Attempted to pass database as a query parameter'
- 'error opening database connection: Incorrect connection credentials'
auth_info:
  mentioned_objects:
  - service account
  - account
  - database
  - engine
  - user
client:
  base_url: https://www.firebolt.io
  auth:
    type: oauth2
source_metadata: null
