resources:
- name: todos
  endpoint:
    path: /todos
    method: GET
    data_selector: response
    params: {}
- name: todos
  endpoint:
    path: /todos
    method: GET
    data_selector: todos
    params: {}
- name: todos
  endpoint:
    path: /todos
    method: GET
    data_selector: '[]'
- name: todo
  endpoint:
    path: /todos/{id}
    method: GET
    data_selector: '{}'
- name: create_todo
  endpoint:
    path: /todos
    method: POST
    data_selector: '{}'
- name: update_todo
  endpoint:
    path: /todos/{id}
    method: PUT
    data_selector: '{}'
- name: patch_todo
  endpoint:
    path: /todos/{id}
    method: PATCH
    data_selector: '{}'
- name: delete_todo
  endpoint:
    path: /todos/{id}
    method: DELETE
    data_selector: '{}'
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: ''
- name: add_country
  endpoint:
    path: /countries
    method: POST
    data_selector: ''
- name: countries
  endpoint:
    path: /countries/
    method: GET
    data_selector: ''
    params: {}
- name: country_detail
  endpoint:
    path: /countries/<country_id>/
    method: GET
    data_selector: ''
    params: {}
- name: create_country
  endpoint:
    path: /countries/
    method: POST
    data_selector: ''
    params: {}
- name: update_country
  endpoint:
    path: /countries/<country_id>/
    method: PUT
    data_selector: ''
    params: {}
- name: patch_country
  endpoint:
    path: /countries/<country_id>/
    method: PATCH
    data_selector: ''
    params: {}
- name: delete_country
  endpoint:
    path: /countries/<country_id>/
    method: DELETE
    data_selector: ''
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: customer
  endpoint:
    path: /customers/<customer_id>
    method: GET
- name: create_customer
  endpoint:
    path: /customers
    method: POST
- name: update_customer
  endpoint:
    path: /customers/<customer_id>
    method: PUT
- name: partial_update_customer
  endpoint:
    path: /customers/<customer_id>
    method: PATCH
- name: delete_customer
  endpoint:
    path: /customers/<customer_id>
    method: DELETE
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: records
- name: add_country
  endpoint:
    path: /countries
    method: POST
    data_selector: country
- name: todos
  endpoint:
    path: /todos
    method: GET
    data_selector: records
    params: {}
- name: country
  endpoint:
    path: /countries/
    method: GET
    data_selector: records
    params: {}
- name: country_detail
  endpoint:
    path: /countries/{id}/
    method: GET
    data_selector: record
    params: {}
- name: country_create
  endpoint:
    path: /countries/
    method: POST
    data_selector: record
    params: {}
- name: country_update
  endpoint:
    path: /countries/{id}/
    method: PUT
    data_selector: record
    params: {}
- name: country_partial_update
  endpoint:
    path: /countries/{id}/
    method: PATCH
    data_selector: record
    params: {}
- name: country_delete
  endpoint:
    path: /countries/{id}/
    method: DELETE
    data_selector: record
    params: {}
- name: todos
  endpoint:
    path: /todos
    method: GET
    data_selector: todos
    params: {}
- name: todo
  endpoint:
    path: /todos/{id}
    method: PUT
    data_selector: todo
    params: {}
- name: todos
  endpoint:
    path: /todos
    method: GET
    data_selector: ''
    params: {}
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: countries
    params: {}
- name: add_country
  endpoint:
    path: /countries
    method: POST
    data_selector: country
    params: {}
- name: countries
  endpoint:
    path: /countries/
    method: GET
    data_selector: ''
    params: {}
- name: country_detail
  endpoint:
    path: /countries/<country_id>/
    method: GET
    data_selector: ''
    params: {}
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: records
    params: {}
- name: add_country
  endpoint:
    path: /countries
    method: POST
    data_selector: country
    params: {}
- name: Episode 269
  endpoint:
    path: /podcasts/rpp/269/
    method: GET
- name: Episode 268
  endpoint:
    path: /podcasts/rpp/268/
    method: GET
- name: Episode 267
  endpoint:
    path: /podcasts/rpp/267/
    method: GET
- name: Episode 266
  endpoint:
    path: /podcasts/rpp/266/
    method: GET
- name: Episode 265
  endpoint:
    path: /podcasts/rpp/265/
    method: GET
- name: Episode 264
  endpoint:
    path: /podcasts/rpp/264/
    method: GET
- name: Episode 263
  endpoint:
    path: /podcasts/rpp/263/
    method: GET
- name: Episode 262
  endpoint:
    path: /podcasts/rpp/262/
    method: GET
- name: Episode 261
  endpoint:
    path: /podcasts/rpp/261/
    method: GET
- name: Episode 260
  endpoint:
    path: /podcasts/rpp/260/
    method: GET
- name: Episode 259
  endpoint:
    path: /podcasts/rpp/259/
    method: GET
- name: Episode 258
  endpoint:
    path: /podcasts/rpp/258/
    method: GET
- name: Episode 257
  endpoint:
    path: /podcasts/rpp/257/
    method: GET
- name: Episode 256
  endpoint:
    path: /podcasts/rpp/256/
    method: GET
- name: Episode 255
  endpoint:
    path: /podcasts/rpp/255/
    method: GET
- name: Episode 254
  endpoint:
    path: /podcasts/rpp/254/
    method: GET
- name: Episode 253
  endpoint:
    path: /podcasts/rpp/253/
    method: GET
- name: Episode 252
  endpoint:
    path: /podcasts/rpp/252/
    method: GET
- name: Episode 251
  endpoint:
    path: /podcasts/rpp/251/
    method: GET
- name: Episode 250
  endpoint:
    path: /podcasts/rpp/250/
    method: GET
- name: Episode 249
  endpoint:
    path: /podcasts/rpp/249/
    method: GET
- name: Episode 248
  endpoint:
    path: /podcasts/rpp/248/
    method: GET
- name: Episode 247
  endpoint:
    path: /podcasts/rpp/247/
    method: GET
- name: Episode 246
  endpoint:
    path: /podcasts/rpp/246/
    method: GET
- name: Episode 245
  endpoint:
    path: /podcasts/rpp/245/
    method: GET
- name: Episode 244
  endpoint:
    path: /podcasts/rpp/244/
    method: GET
- name: Episode 243
  endpoint:
    path: /podcasts/rpp/243/
    method: GET
- name: Episode 242
  endpoint:
    path: /podcasts/rpp/242/
    method: GET
- name: Episode 241
  endpoint:
    path: /podcasts/rpp/241/
    method: GET
- name: Episode 240
  endpoint:
    path: /podcasts/rpp/240/
    method: GET
- name: Episode 239
  endpoint:
    path: /podcasts/rpp/239/
    method: GET
- name: Episode 238
  endpoint:
    path: /podcasts/rpp/238/
    method: GET
- name: Episode 237
  endpoint:
    path: /podcasts/rpp/237/
    method: GET
- name: Episode 236
  endpoint:
    path: /podcasts/rpp/236/
    method: GET
- name: learning_paths
  endpoint:
    path: /learning-paths/
    method: GET
    data_selector: resources
    params: {}
- name: tutorials
  endpoint:
    path: /tutorials/all/
    method: GET
    data_selector: tutorials
    params: {}
- name: quizzes
  endpoint:
    path: /quizzes/
    method: GET
    data_selector: quizzes
    params: {}
- name: podcasts
  endpoint:
    path: /podcasts/rpp/
    method: GET
    data_selector: podcasts
    params: {}
- name: books
  endpoint:
    path: /books/
    method: GET
    data_selector: books
    params: {}
- name: episodes
  endpoint:
    path: /podcasts/rpp
    method: GET
    data_selector: episodes
    params: {}
- name: episodes
  endpoint:
    path: /podcasts/rpp
    method: GET
    data_selector: episodes
    params: {}
- name: episodes
  endpoint:
    path: /podcasts/rpp/
    method: GET
    data_selector: episodes
    params: {}
- name: tutorials
  endpoint:
    path: /tutorials
    method: GET
    data_selector: tutorials
    params: {}
- name: video_courses
  endpoint:
    path: /video-courses
    method: GET
    data_selector: video_courses
    params: {}
- name: episodes
  endpoint:
    path: /podcasts/rpp/
    method: GET
    data_selector: episodes
    params: {}
- name: Python Basics
  endpoint:
    path: /learning-paths/python-basics/
    method: GET
    data_selector: resources
    params: {}
- name: Revisit Python Fundamentals
  endpoint:
    path: /learning-paths/python3-introduction/
    method: GET
    data_selector: resources
    params: {}
- name: I/O Operations and String Formatting
  endpoint:
    path: /learning-paths/input-output-operations-and-string-formatting/
    method: GET
    data_selector: resources
    params: {}
- name: Python Control Flow and Loops
  endpoint:
    path: /learning-paths/python-control-flow-and-loops/
    method: GET
    data_selector: resources
    params: {}
- name: Python Data Structures
  endpoint:
    path: /learning-paths/basic-python-data-structures/
    method: GET
    data_selector: resources
    params: {}
- name: Functions and Scopes
  endpoint:
    path: /learning-paths/functions-and-scopes/
    method: GET
    data_selector: resources
    params: {}
- name: Perfect Your Python Development Setup
  endpoint:
    path: /learning-paths/perfect-your-python-development-setup/
    method: GET
    data_selector: resources
    params: {}
- name: Modules and Packages
  endpoint:
    path: /learning-paths/modules-and-packages/
    method: GET
    data_selector: resources
    params: {}
- name: Object-Oriented Programming (OOP)
  endpoint:
    path: /learning-paths/object-oriented-programming-oop-python/
    method: GET
    data_selector: resources
    params: {}
- name: Files and File Streams
  endpoint:
    path: /learning-paths/files-and-file-streams-in-python/
    method: GET
    data_selector: resources
    params: {}
- name: Exceptions, Logging, and Debugging
  endpoint:
    path: /learning-paths/exception-handling-logging-debugging/
    method: GET
    data_selector: resources
    params: {}
- name: Classic Data Structures and Algorithms
  endpoint:
    path: /learning-paths/classic-data-structures-and-algorithms-with-python/
    method: GET
    data_selector: resources
    params: {}
- name: Important Standard Library Modules
  endpoint:
    path: /learning-paths/standard-library-modules-you-should-know/
    method: GET
    data_selector: resources
    params: {}
- name: Functional Programming With Python
  endpoint:
    path: /learning-paths/functional-programming/
    method: GET
    data_selector: resources
    params: {}
- name: Generators and Generator Expressions
  endpoint:
    path: /learning-paths/generators-and-generator-expressions/
    method: GET
    data_selector: resources
    params: {}
- name: Write More Pythonic Code
  endpoint:
    path: /learning-paths/writing-pythonic-code/
    method: GET
    data_selector: resources
    params: {}
- name: Testing and Continuous Integration
  endpoint:
    path: /learning-paths/test-your-python-apps/
    method: GET
    data_selector: resources
    params: {}
- name: Concurrency and Async Programming
  endpoint:
    path: /learning-paths/python-concurrency-parallel-programming/
    method: GET
    data_selector: resources
    params: {}
- name: Database Access With Python
  endpoint:
    path: /learning-paths/database-access-in-python/
    method: GET
    data_selector: resources
    params: {}
- name: Python Metaprogramming
  endpoint:
    path: /learning-paths/metaprogramming-in-python/
    method: GET
    data_selector: resources
    params: {}
- name: Network Programming and Security
  endpoint:
    path: /learning-paths/network-programming-and-security/
    method: GET
    data_selector: resources
    params: {}
- name: Create Graphical User Interfaces (GUI)
  endpoint:
    path: /learning-paths/python-gui-programming/
    method: GET
    data_selector: resources
    params: {}
- name: Understand CPython
  endpoint:
    path: /learning-paths/understand-cpython/
    method: GET
    data_selector: resources
    params: {}
- name: Ace Your Python Coding Interview
  endpoint:
    path: /learning-paths/python-interview/
    method: GET
    data_selector: resources
    params: {}
- name: episodes
  endpoint:
    path: /podcasts/rpp
    method: GET
    data_selector: episodes
    params: {}
- name: quizzes
  endpoint:
    path: /quizzes
    method: GET
    data_selector: quizzes
    params: {}
- name: episodes
  endpoint:
    path: /podcasts/rpp
    method: GET
    data_selector: episodes
    params: {}
- name: quizzes
  endpoint:
    path: /quizzes
    method: GET
    data_selector: quizzes
    params: {}
- name: episodes
  endpoint:
    path: /podcasts/rpp/
    method: GET
    data_selector: episodes
    params: {}
- name: office_hours
  endpoint:
    path: /office-hours/
    method: GET
    data_selector: sessions
- name: episode
  endpoint:
    path: /podcasts/rpp/{episode_number}
    method: GET
    data_selector: episode_data
- name: episodes
  endpoint:
    path: /podcasts/rpp
    method: GET
    data_selector: episodes
- name: episodes
  endpoint:
    path: /podcasts/rpp/
    method: GET
    data_selector: episodes
    params: {}
- name: episode
  endpoint:
    path: /podcasts/rpp
    method: GET
    data_selector: episodes
    params: {}
- name: podcast_episodes
  endpoint:
    path: /podcasts/rpp
    method: GET
    data_selector: episodes
    params: {}
- name: membership_options
  endpoint:
    path: /membership/options
    method: GET
    data_selector: options
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: decorators_examples
  endpoint:
    path: /decorators/examples
    method: GET
    data_selector: examples
- name: episode_269
  endpoint:
    path: /podcasts/rpp/269/
    method: GET
    data_selector: episode
    params: {}
- name: episode_268
  endpoint:
    path: /podcasts/rpp/268/
    method: GET
    data_selector: episode
    params: {}
- name: episode_267
  endpoint:
    path: /podcasts/rpp/267/
    method: GET
    data_selector: episode
    params: {}
- name: episode_266
  endpoint:
    path: /podcasts/rpp/266/
    method: GET
    data_selector: episode
    params: {}
- name: episode_265
  endpoint:
    path: /podcasts/rpp/265/
    method: GET
    data_selector: episode
    params: {}
- name: episode_264
  endpoint:
    path: /podcasts/rpp/264/
    method: GET
    data_selector: episode
    params: {}
- name: episode_263
  endpoint:
    path: /podcasts/rpp/263/
    method: GET
    data_selector: episode
    params: {}
- name: episode_262
  endpoint:
    path: /podcasts/rpp/262/
    method: GET
    data_selector: episode
    params: {}
- name: episode_261
  endpoint:
    path: /podcasts/rpp/261/
    method: GET
    data_selector: episode
    params: {}
- name: episode_260
  endpoint:
    path: /podcasts/rpp/260/
    method: GET
    data_selector: episode
    params: {}
- name: episode_259
  endpoint:
    path: /podcasts/rpp/259/
    method: GET
    data_selector: episode
    params: {}
- name: episode_258
  endpoint:
    path: /podcasts/rpp/258/
    method: GET
    data_selector: episode
    params: {}
- name: episode_257
  endpoint:
    path: /podcasts/rpp/257/
    method: GET
    data_selector: episode
    params: {}
- name: episode_256
  endpoint:
    path: /podcasts/rpp/256/
    method: GET
    data_selector: episode
    params: {}
- name: episode_255
  endpoint:
    path: /podcasts/rpp/255/
    method: GET
    data_selector: episode
    params: {}
- name: episode_254
  endpoint:
    path: /podcasts/rpp/254/
    method: GET
    data_selector: episode
    params: {}
- name: episode_253
  endpoint:
    path: /podcasts/rpp/253/
    method: GET
    data_selector: episode
    params: {}
- name: episode_252
  endpoint:
    path: /podcasts/rpp/252/
    method: GET
    data_selector: episode
    params: {}
- name: episode_251
  endpoint:
    path: /podcasts/rpp/251/
    method: GET
    data_selector: episode
    params: {}
- name: episode_250
  endpoint:
    path: /podcasts/rpp/250/
    method: GET
    data_selector: episode
    params: {}
- name: episode_249
  endpoint:
    path: /podcasts/rpp/249/
    method: GET
    data_selector: episode
    params: {}
- name: episode_248
  endpoint:
    path: /podcasts/rpp/248/
    method: GET
    data_selector: episode
    params: {}
- name: episode_247
  endpoint:
    path: /podcasts/rpp/247/
    method: GET
    data_selector: episode
    params: {}
- name: episode_246
  endpoint:
    path: /podcasts/rpp/246/
    method: GET
    data_selector: episode
    params: {}
- name: episode_245
  endpoint:
    path: /podcasts/rpp/245/
    method: GET
    data_selector: episode
    params: {}
- name: episode_244
  endpoint:
    path: /podcasts/rpp/244/
    method: GET
    data_selector: episode
    params: {}
- name: episode_243
  endpoint:
    path: /podcasts/rpp/243/
    method: GET
    data_selector: episode
    params: {}
- name: episode_242
  endpoint:
    path: /podcasts/rpp/242/
    method: GET
    data_selector: episode
    params: {}
- name: episode_241
  endpoint:
    path: /podcasts/rpp/241/
    method: GET
    data_selector: episode
    params: {}
- name: episode_240
  endpoint:
    path: /podcasts/rpp/240/
    method: GET
    data_selector: episode
    params: {}
- name: episode_239
  endpoint:
    path: /podcasts/rpp/239/
    method: GET
    data_selector: episode
    params: {}
- name: episode_238
  endpoint:
    path: /podcasts/rpp/238/
    method: GET
    data_selector: episode
    params: {}
- name: episode_237
  endpoint:
    path: /podcasts/rpp/237/
    method: GET
    data_selector: episode
    params: {}
- name: episode_236
  endpoint:
    path: /podcasts/rpp/236/
    method: GET
    data_selector: episode
    params: {}
- name: episodes
  endpoint:
    path: /podcasts/rpp
    method: GET
    data_selector: episodes
    params: {}
- name: episodes
  endpoint:
    path: /podcasts/rpp/
    method: GET
    data_selector: episodes
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: do_twice
  endpoint:
    path: /decorators/do_twice
    method: POST
    data_selector: function
- name: decorator_example
  endpoint:
    path: /decorator/example
    method: GET
    data_selector: records
- name: inner_functions_example
  endpoint:
    path: /inner/functions/example
    method: GET
    data_selector: records
- name: do_twice
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: timer
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: debug
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: slow_down
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: decorators
  endpoint:
    path: /decorators
    method: GET
    data_selector: examples
    params: {}
- name: Setting Up Python
  endpoint:
    path: /courses/setting-up-python/
    method: GET
    data_selector: course
- name: Code Your First Python Program
  endpoint:
    path: /courses/python-basics-first-program/
    method: GET
    data_selector: course
- name: Strings and String Methods
  endpoint:
    path: /courses/python-basics-strings-string-methods/
    method: GET
    data_selector: course
- name: Numbers and Math
  endpoint:
    path: /courses/python-basics-numbers-and-math/
    method: GET
    data_selector: course
- name: Functions and Loops
  endpoint:
    path: /courses/python-basics-functions-loops/
    method: GET
    data_selector: course
- name: Scopes
  endpoint:
    path: /courses/python-basics-scopes/
    method: GET
    data_selector: course
- name: Conditional Logic and Control Flow
  endpoint:
    path: /courses/basics-conditional-logic-control-flow/
    method: GET
    data_selector: course
- name: Finding and Fixing Code Bugs
  endpoint:
    path: /courses/python-basics-code-bugs/
    method: GET
    data_selector: course
- name: Lists and Tuples
  endpoint:
    path: /courses/python-basics-lists-tuples/
    method: GET
    data_selector: course
- name: Dictionaries
  endpoint:
    path: /courses/python-basics-dictionaries/
    method: GET
    data_selector: course
- name: Object-Oriented Programming (OOP)
  endpoint:
    path: /courses/python-basics-oop/
    method: GET
    data_selector: course
- name: Modules and Packages
  endpoint:
    path: /courses/python-basics-modules-packages/
    method: GET
    data_selector: course
- name: File System Operations
  endpoint:
    path: /courses/python-basics-file-system-operations/
    method: GET
    data_selector: course
- name: Reading and Writing Files
  endpoint:
    path: /courses/python-reading-and-writing-files/
    method: GET
    data_selector: course
- name: Installing Packages With pip
  endpoint:
    path: /courses/python-pip-install/
    method: GET
    data_selector: course
- name: software_development
  endpoint:
    path: /software-development
    method: GET
    data_selector: projects
    params: {}
- name: data_science
  endpoint:
    path: /data-science
    method: GET
    data_selector: projects
    params: {}
- name: workflow_automation
  endpoint:
    path: /workflow-automation
    method: GET
    data_selector: projects
    params: {}
- name: embedded_systems
  endpoint:
    path: /embedded-systems
    method: GET
    data_selector: projects
    params: {}
- name: do_twice
  endpoint:
    path: /decorators/do_twice
    method: GET
    data_selector: records
- name: timer
  endpoint:
    path: /decorators/timer
    method: GET
    data_selector: records
- name: debug
  endpoint:
    path: /decorators/debug
    method: GET
    data_selector: records
- name: slow_down
  endpoint:
    path: /decorators/slow_down
    method: GET
    data_selector: records
- name: register
  endpoint:
    path: /decorators/register
    method: GET
    data_selector: records
- name: login_required
  endpoint:
    path: /decorators/login_required
    method: GET
    data_selector: records
- name: Circle
  endpoint:
    path: /circle
    method: GET
    data_selector: data
- name: course_materials
  endpoint:
    path: /course_materials
    method: GET
    data_selector: materials
    params: {}
- name: live_sessions
  endpoint:
    path: /live_sessions
    method: GET
    data_selector: sessions
    params: {}
- name: Circle
  endpoint:
    path: /circle
    method: GET
    data_selector: records
- name: Email Newsletter Sponsorships
  endpoint:
    path: /sponsorships/newsletter
    method: GET
    data_selector: sponsorships
    params: {}
- name: Website Display Ads
  endpoint:
    path: /sponsorships/website
    method: GET
    data_selector: sponsorships
    params: {}
- name: Job Posts
  endpoint:
    path: /sponsorships/job-posts
    method: GET
    data_selector: sponsorships
    params: {}
- name: Sponsored Social Media Posts
  endpoint:
    path: /sponsorships/social-media
    method: GET
    data_selector: sponsorships
    params: {}
- name: Podcast Sponsorships
  endpoint:
    path: /sponsorships/podcast
    method: GET
    data_selector: sponsorships
    params: {}
- name: orders
  endpoint:
    path: /online_retail.parquet
    method: GET
    data_selector: records
    params: {}
- name: data_generation
  endpoint:
    path: /data/generation
    method: POST
    data_selector: data
    params: {}
- name: benchmark
  endpoint:
    path: /benchmark
    method: POST
    data_selector: benchmark_results
    params: {}
- name: sales_data
  endpoint:
    path: /generate_data
    method: POST
    data_selector: data
    params:
      incremental: number_of_rows
- name: Setting Up Python
  endpoint:
    path: /courses/setting-up-python/
    method: GET
- name: Code Your First Python Program
  endpoint:
    path: /courses/python-basics-first-program/
    method: GET
- name: Strings and String Methods
  endpoint:
    path: /courses/python-basics-strings-string-methods/
    method: GET
- name: Numbers and Math
  endpoint:
    path: /courses/python-basics-numbers-and-math/
    method: GET
- name: Functions and Loops
  endpoint:
    path: /courses/python-basics-functions-loops/
    method: GET
- name: Scopes
  endpoint:
    path: /courses/python-basics-scopes/
    method: GET
- name: Conditional Logic and Control Flow
  endpoint:
    path: /courses/basics-conditional-logic-control-flow/
    method: GET
- name: Finding and Fixing Code Bugs
  endpoint:
    path: /courses/python-basics-code-bugs/
    method: GET
- name: Lists and Tuples
  endpoint:
    path: /courses/python-basics-lists-tuples/
    method: GET
- name: Dictionaries
  endpoint:
    path: /courses/python-basics-dictionaries/
    method: GET
- name: Object-Oriented Programming (OOP)
  endpoint:
    path: /courses/python-basics-oop/
    method: GET
- name: Modules and Packages
  endpoint:
    path: /courses/python-basics-modules-packages/
    method: GET
- name: File System Operations
  endpoint:
    path: /courses/python-basics-file-system-operations/
    method: GET
- name: Reading and Writing Files
  endpoint:
    path: /courses/python-reading-and-writing-files/
    method: GET
- name: Installing Packages With pip
  endpoint:
    path: /courses/python-pip-install/
    method: GET
- name: polars_pandas_comparison
  endpoint:
    path: /polars-vs-pandas
    method: GET
    data_selector: results
    params: {}
- name: software_development
  endpoint:
    path: /software-development
    method: GET
    data_selector: resources
    params: {}
- name: data_science
  endpoint:
    path: /data-science
    method: GET
    data_selector: resources
    params: {}
- name: cli_development
  endpoint:
    path: /cli-development
    method: GET
    data_selector: resources
    params: {}
- name: gui_development
  endpoint:
    path: /gui-development
    method: GET
    data_selector: resources
    params: {}
- name: sales_data
  endpoint:
    path: /generate_data
    method: GET
    data_selector: data
    params:
      rows: number_of_rows
- name: orders
  endpoint:
    path: /path/to/online_retail.parquet
    method: GET
    data_selector: records
    params: {}
- name: email_newsletter_sponsorships
  endpoint:
    path: /sponsorships/email-newsletter
    method: GET
    data_selector: sponsorships
- name: website_display_ads
  endpoint:
    path: /sponsorships/website-display-ads
    method: GET
    data_selector: ads
- name: job_posts
  endpoint:
    path: /sponsorships/job-posts
    method: GET
    data_selector: job_posts
- name: sponsored_social_media_posts
  endpoint:
    path: /sponsorships/social-media
    method: GET
    data_selector: social_media
- name: podcast_sponsorships
  endpoint:
    path: /sponsorships/podcast
    method: GET
    data_selector: podcast
- name: data_generation
  endpoint:
    path: /data_generation
    method: GET
    data_selector: records
- name: online_retail
  endpoint:
    path: online_retail.parquet
    method: GET
    data_selector: data
    params: {}
- name: data_exploration_analysis
  endpoint:
    path: /data_exploration_analysis
    method: GET
    data_selector: records
- name: data_visualization
  endpoint:
    path: /data_visualization
    method: GET
    data_selector: records
- name: classical_machine_learning
  endpoint:
    path: /classical_machine_learning
    method: GET
    data_selector: records
- name: deep_learning
  endpoint:
    path: /deep_learning
    method: GET
    data_selector: records
- name: data_storage_big_data
  endpoint:
    path: /data_storage_big_data
    method: GET
    data_selector: records
- name: odds_and_ends
  endpoint:
    path: /odds_and_ends
    method: GET
    data_selector: records
- name: sales_data
  endpoint:
    path: /generate_data
    method: POST
    data_selector: data
    params: {}
- name: data_generation_script
  endpoint:
    path: /data_generation.py
    method: GET
    data_selector: script
    params: {}
- name: online_retail_data
  endpoint:
    path: /online_retail.parquet
    method: GET
    data_selector: data
    params: {}
- name: sales_data
  endpoint:
    path: /generate_data
    method: POST
    data_selector: data
    params: {}
- name: online_retail
  endpoint:
    path: /path/to/online_retail.parquet
    method: GET
    data_selector: records
- name: sales_data
  endpoint:
    path: /generate/data
    method: POST
    data_selector: sales_records
- name: sales_data
  endpoint:
    path: /sales/data
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /data_generation
    method: GET
    data_selector: records
    params: {}
- name: dataframe
  endpoint:
    path: /pandas-docs/stable/reference/frame.html
    method: GET
    data_selector: data
    params: {}
- name: data_statistics
  endpoint:
    path: /data/statistics
    method: GET
    data_selector: statistics
    params: {}
- name: missing_data
  endpoint:
    path: /data/missing
    method: GET
    data_selector: missing
    params: {}
- name: buildings
  endpoint:
    path: /buildings
    method: GET
    data_selector: records
    params: {}
- name: Django Project Setup
  endpoint:
    path: /get-started-with-django
    method: GET
    data_selector: project_setup
- name: Django REST API
  endpoint:
    path: /build-rest-api-with-django
    method: GET
    data_selector: api_building
- name: electric_car_data
  endpoint:
    path: /api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD
    method: GET
    data_selector: rows
    params: {}
- name: rides
  endpoint:
    path: rides.parquet
    method: GET
    data_selector: records
    params: {}
- name: LazyFrame
  endpoint:
    path: /lazyframe/index.html
    method: GET
    data_selector: instructions
- name: podcasts
  endpoint:
    path: /podcasts/
    method: GET
    data_selector: podcasts
- name: tutorials
  endpoint:
    path: /tutorials/
    method: GET
    data_selector: tutorials
- name: courses
  endpoint:
    path: /courses/
    method: GET
    data_selector: courses
- name: rides
  endpoint:
    path: /scan_parquet
    method: GET
    data_selector: records
    params: {}
- name: taxi_rides
  endpoint:
    path: /scan_csv
    method: GET
    data_selector: records
    params: {}
- name: web scraping
  endpoint:
    path: /web-scraping/
    method: GET
    data_selector: tutorials
- name: Polars vs pandas
  endpoint:
    path: /polars-vs-pandas/
    method: GET
    data_selector: records
- name: Python Descriptors
  endpoint:
    path: /courses/python-descriptors/
    method: GET
    data_selector: records
- name: 'The Real Python Podcast – Episode #269: Python 3.14: Exploring the New Features'
  endpoint:
    path: /podcasts/rpp/269/
    method: GET
    data_selector: records
- name: 'Python 3.14: Cool New Features for You to Try'
  endpoint:
    path: /python314-new-features/
    method: GET
    data_selector: records
- name: 'Python MCP: Connect Your LLM With the World'
  endpoint:
    path: /python-mcp/
    method: GET
    data_selector: records
- name: Modern Python Linting With Ruff
  endpoint:
    path: /courses/modern-python-linting-ruff/
    method: GET
    data_selector: records
- name: 'Astral''s ty: A New Blazing-Fast Type Checker for Python'
  endpoint:
    path: /python-ty/
    method: GET
    data_selector: records
- name: 'The Real Python Podcast – Episode #267: Managing Feature Flags & Comparing
    Python Visualization Libraries'
  endpoint:
    path: /podcasts/rpp/267/
    method: GET
    data_selector: records
- name: Get Started With FastAPI
  endpoint:
    path: /get-started-with-fastapi/
    method: GET
    data_selector: records
- name: 'Sorting Dictionaries in Python: Keys, Values, and More'
  endpoint:
    path: /quizzes/sorting-dictionaries-keys-values-more/
    method: GET
    data_selector: records
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: GET
    data_selector: hashes
    params: {}
- name: seq
  endpoint:
    path: /seq
    method: GET
    data_selector: numbers
    params: {}
- name: data_frame_creation
  endpoint:
    path: /pandas/data_frame_creation
    method: GET
    data_selector: examples
    params: {}
- name: data_retrieval
  endpoint:
    path: /pandas/data_retrieval
    method: GET
    data_selector: examples
    params: {}
- name: data_modification
  endpoint:
    path: /pandas/data_modification
    method: GET
    data_selector: examples
    params: {}
- name: data_types
  endpoint:
    path: /pandas/data_types
    method: GET
    data_selector: examples
    params: {}
- name: data_size
  endpoint:
    path: /pandas/data_size
    method: GET
    data_selector: examples
    params: {}
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: GET
    data_selector: records
- name: seq
  endpoint:
    path: /seq
    method: GET
    data_selector: records
- name: temperature_data
  endpoint:
    path: /temperature
    method: GET
    data_selector: temp_c
    params: {}
- name: arguments
  endpoint:
    path: /
    method: GET
    data_selector: sys.argv
    params: {}
- name: buildings
  endpoint:
    path: /buildings
    method: GET
    data_selector: records
- name: command_line_arguments
  endpoint:
    path: /parse_arguments
    method: POST
    data_selector: args
    params: {}
- name: electric_cars
  endpoint:
    path: /electric_cars.csv
    method: GET
    data_selector: records
- name: data_csv
  endpoint:
    path: scan_csv
    method: GET
    data_selector: schema
    params: {}
- name: data_json
  endpoint:
    path: scan_ndjson
    method: GET
    data_selector: schema
    params: {}
- name: data_parquet
  endpoint:
    path: scan_parquet
    method: GET
    data_selector: schema
    params: {}
- name: rides
  endpoint:
    path: rides.parquet
    method: GET
    data_selector: records
- name: seq
  endpoint:
    path: /seq
    method: GET
    data_selector: output
    params: {}
- name: rides
  endpoint:
    path: /scan_parquet
    method: GET
    data_selector: records
    params: {}
- name: taxi_trip_data
  endpoint:
    path: /scan_csv
    method: GET
    data_selector: records
    params:
      streaming: 'True'
- name: sha1sum_file
  endpoint:
    path: /sha1sum_file
    method: POST
    data_selector: hashes
    params: {}
- name: sha1sum_stdin
  endpoint:
    path: /sha1sum_stdin
    method: POST
    data_selector: hashes
    params: {}
- name: interactive_shell
  endpoint:
    path: /python/repl
    method: GET
    data_selector: session_data
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: GET
    data_selector: hashes
- name: command_line_interface
  endpoint:
    path: /command-line-interface
    method: GET
    data_selector: arguments
    params: {}
- name: c_legacy
  endpoint:
    path: /c-legacy
    method: GET
    data_selector: examples
    params: {}
- name: python_standard_library
  endpoint:
    path: /python-standard-library
    method: GET
    data_selector: libraries
    params: {}
- name: sha1sum_file
  endpoint:
    path: /sha1sum_file
    method: POST
    data_selector: hash
    params: {}
- name: sha1sum_stdin
  endpoint:
    path: /sha1sum_stdin
    method: POST
    data_selector: hash
    params: {}
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: GET
    data_selector: hash
- name: seq
  endpoint:
    path: /seq
    method: GET
    data_selector: numbers
- name: command_line_interface
  endpoint:
    path: /python/command-line-interface
    method: GET
    data_selector: commands
    params: {}
- name: seq
  endpoint:
    path: /seq
    method: GET
    data_selector: sequence
    params: {}
- name: command_line_arguments
  endpoint:
    path: /seq
    method: GET
    data_selector: arguments
    params: {}
- name: sha1sum_file
  endpoint:
    path: /sha1sum_file
    method: POST
    data_selector: records
- name: sha1sum_stdin
  endpoint:
    path: /sha1sum_stdin
    method: POST
    data_selector: records
- name: main_win
  endpoint:
    path: /main_win
    method: POST
    data_selector: records
- name: seq_parse
  endpoint:
    path: /seq_parse
    method: POST
    data_selector: records
- name: val_type_dc
  endpoint:
    path: /val_type_dc
    method: POST
    data_selector: records
- name: command_line_interface
  endpoint:
    path: /command-line-interface
    method: GET
    data_selector: arguments
- name: c_legacy
  endpoint:
    path: /c-legacy
    method: GET
    data_selector: arguments
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: GET
    data_selector: hashes
- name: seq
  endpoint:
    path: /seq
    method: GET
    data_selector: sequence
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: GET
    data_selector: records
    params: {}
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: POST
    data_selector: hash
    params: {}
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: GET
    data_selector: hash
    params: {}
- name: seq
  endpoint:
    path: /seq
    method: GET
    data_selector: numbers
    params: {}
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: POST
    data_selector: result
- name: seq
  endpoint:
    path: /seq
    method: GET
    data_selector: numbers
    params: {}
- name: file_hash
  endpoint:
    path: /sha1sum
    method: POST
    data_selector: hashes
    params: {}
- name: seq
  endpoint:
    path: /seq
    method: GET
    data_selector: output
    params: {}
- name: files
  endpoint:
    path: /sha1sum_val
    method: GET
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: GET
    data_selector: hashes
    params: {}
- name: latest_tutorial
  endpoint:
    path: /latest_tutorial
    method: GET
    data_selector: tutorial
    params: {}
- name: sha1sum
  endpoint:
    path: /hash
    method: POST
    data_selector: hash_results
    params: {}
- name: Timer
  endpoint:
    path: /timer
    method: GET
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: GET
    data_selector: hash
    params: {}
- name: seq
  endpoint:
    path: /seq
    method: GET
    data_selector: sequence
    params: {}
- name: Timer
  endpoint:
    path: /timer
    method: GET
    data_selector: data
    params: {}
- name: sha1sum_file
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: sha1sum_stdin
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: seq_parse
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: val_type_dc
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: POST
    data_selector: output
    params: {}
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: GET
    data_selector: hash
    params: {}
- name: seq
  endpoint:
    path: /seq
    method: GET
    data_selector: sequence
    params: {}
- name: random_bytes
  endpoint:
    path: /os/urandom
    method: GET
    data_selector: bytes
    params: {}
- name: sha1sum_file
  endpoint:
    path: /sha1sum_file.py
    method: GET
    data_selector: hashes
    params: {}
- name: sha1sum_stdin
  endpoint:
    path: /sha1sum_stdin.py
    method: GET
    data_selector: hashes
    params: {}
- name: create_virtual_environment
  endpoint:
    path: /create-virtual-environment
    method: POST
    data_selector: data
    params: {}
- name: activate_virtual_environment
  endpoint:
    path: /activate-virtual-environment
    method: POST
    data_selector: data
    params: {}
- name: install_packages
  endpoint:
    path: /install-packages
    method: POST
    data_selector: data
    params: {}
- name: venv_structure
  endpoint:
    path: /venv_structure
    method: GET
    data_selector: records
- name: sha1sum
  endpoint:
    path: /sha1sum
    method: POST
    data_selector: hash
    params: {}
- name: sequence
  endpoint:
    path: /seq_prompt.py
    method: GET
    data_selector: records
    params: {}
- name: folder_structure
  endpoint:
    path: /path/to/folder_structure
    method: GET
    data_selector: structure
    params: {}
- name: latest_tutorial
  endpoint:
    path: /latest_tutorial.py
    method: GET
    data_selector: tutorial
- name: timer
  endpoint:
    path: /timer.py
    method: GET
    data_selector: Timer
- name: pip_upgrade
  endpoint:
    path: /pip/upgrade
    method: GET
    data_selector: warnings
    params: {}
- name: create_virtualenv
  endpoint:
    path: /virtualenv/create
    method: POST
    data_selector: result
    params:
      argument: --upgrade-deps
- name: create_virtualenv_without_pip
  endpoint:
    path: /virtualenv/create_without_pip
    method: POST
    data_selector: result
    params:
      argument: --without-pip
- name: create_virtualenv_with_system_site_packages
  endpoint:
    path: /virtualenv/create_with_system_site_packages
    method: POST
    data_selector: result
    params:
      argument: --system-site-packages
- name: upgrade_virtualenv
  endpoint:
    path: /virtualenv/upgrade
    method: POST
    data_selector: result
    params:
      argument: --upgrade
- name: timer_function
  endpoint:
    path: /python-timer
    method: GET
    data_selector: tutorials
    params: {}
- name: Timer
  endpoint:
    path: /timer
    method: GET
    data_selector: records
- name: Timer
  endpoint:
    path: /timer
    method: GET
    data_selector: records
- name: james_bond_data
  endpoint:
    path: /data/james_bond_data.csv
    method: GET
    data_selector: records
    params: {}
- name: james_bond_data
  endpoint:
    path: james_bond_data.json
    method: GET
    data_selector: data
- name: james_bond_data
  endpoint:
    path: james_bond_data.csv
    method: GET
    data_selector: ''
    params: {}
- name: james_bond_data
  endpoint:
    path: james_bond_data
    method: GET
    data_selector: data
    params: {}
- name: timer
  endpoint:
    path: /timer
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /data
    method: GET
    data_selector: records
    params: {}
- name: bond_actor
  endpoint:
    params: {}
- name: car_manufacturer
  endpoint:
    params: {}
- name: film_length
  endpoint:
    params: {}
- name: martinis_consumed
  endpoint:
    params: {}
- name: latest_tutorial
  endpoint:
    path: /latest_tutorial
    method: GET
    data_selector: tutorial
- name: Timer
  endpoint:
    path: /timer
    method: POST
    data_selector: timer_data
    params: {}
- name: Timer
  endpoint:
    path: /timer
    method: GET
    data_selector: records
- name: Timer
  endpoint:
    path: /timer
    method: GET
    data_selector: records
    params: {}
- name: notebook
  endpoint:
    path: /notebooks
    method: GET
    data_selector: records
- name: iris
  endpoint:
    path: /static/public/53/iris.zip
    method: GET
    data_selector: records
    params: {}
- name: random_module
  endpoint:
    path: /random/module
    method: GET
    data_selector: module_info
- name: numpy_random
  endpoint:
    path: /numpy/random
    method: GET
    data_selector: numpy_info
- name: os_module
  endpoint:
    path: /os
    method: GET
    data_selector: os_info
- name: secrets_module
  endpoint:
    path: /secrets
    method: GET
    data_selector: secrets_info
- name: uuid_module
  endpoint:
    path: /uuid
    method: GET
    data_selector: uuid_info
- name: iris_dataset
  endpoint:
    path: /datasets/53
    method: GET
    data_selector: variables
    params: {}
- name: random_data
  endpoint:
    path: /random/data
    method: GET
    data_selector: records
    params: {}
- name: iris
  endpoint:
    path: /datasets/iris
    method: GET
    data_selector: data
    params: {}
- name: iris
  endpoint:
    path: /datasets/iris
    method: GET
    data_selector: data
    params: {}
- name: iris
  endpoint:
    path: /fetch_iris
    method: GET
    data_selector: data
    params: {}
- name: venv_creation
  endpoint:
    path: /tutorials/python/virtual-environments/create
    method: GET
    data_selector: content
    params: {}
- name: venv_activation
  endpoint:
    path: /tutorials/python/virtual-environments/activate
    method: GET
    data_selector: content
    params: {}
- name: package_installation
  endpoint:
    path: /tutorials/python/virtual-environments/install-packages
    method: GET
    data_selector: content
    params: {}
- name: array_example
  endpoint:
    path: /services/data/vXX.X/sobjects/ArrayExample
    method: GET
    data_selector: records
- name: virtual_environment
  endpoint:
    path: /create-activate-venv
    method: POST
    data_selector: environment
    params: {}
- name: venv_structure
  endpoint:
    path: /venv/
    method: GET
    data_selector: structure
- name: pyvenv_cfg
  endpoint:
    path: /pyvenv.cfg
    method: GET
    data_selector: config
- name: vectorization_functionality
  endpoint:
    path: /vectorization
    method: GET
    data_selector: examples
    params: {}
- name: existing_vectorization_functionality
  endpoint:
    path: /existing_vectorization
    method: GET
    data_selector: examples
    params: {}
- name: testing_skills
  endpoint:
    path: /testing_skills
    method: GET
    data_selector: exercise
    params: {}
- name: activate_script
  endpoint:
    path: /path/to/venv/Scripts/activate
    method: GET
    data_selector: scripts
    params: {}
- name: activate_script
  endpoint:
    path: /path/to/venv/bin/activate
    method: GET
    data_selector: scripts
    params: {}
- name: creating_dictionaries
  endpoint:
    path: /tutorials/creating-dictionaries
    method: GET
    data_selector: content
    params: {}
- name: accessing_dictionary_values
  endpoint:
    path: /tutorials/accessing-dictionary-values
    method: GET
    data_selector: content
    params: {}
- name: populating_dictionaries_incrementally
  endpoint:
    path: /tutorials/populating-dictionaries-incrementally
    method: GET
    data_selector: content
    params: {}
- name: exploring_dict_class_methods
  endpoint:
    path: /tutorials/exploring-dict-class-methods
    method: GET
    data_selector: content
    params: {}
- name: using_operators_with_dictionaries
  endpoint:
    path: /tutorials/using-operators-with-dictionaries
    method: GET
    data_selector: content
    params: {}
- name: using_built_in_functions_with_dictionaries
  endpoint:
    path: /tutorials/use-built-in-functions-with-dictionaries
    method: GET
    data_selector: content
    params: {}
- name: iterating_over_dictionaries
  endpoint:
    path: /tutorials/iterating-over-dictionaries
    method: GET
    data_selector: content
    params: {}
- name: exploring_existing_dictionary_like_classes
  endpoint:
    path: /tutorials/exploring-existing-dictionary-like-classes
    method: GET
    data_selector: content
    params: {}
- name: creating_custom_dictionary_like_classes
  endpoint:
    path: /tutorials/creating-custom-dictionary-like-classes
    method: GET
    data_selector: content
    params: {}
- name: james_bond_data
  endpoint:
    path: /james_bond_data.csv
    method: GET
    data_selector: records
- name: james_bond_data
  endpoint:
    path: james_bond_data.json
    method: GET
    data_selector: records
    params: {}
- name: james_bond_data
  endpoint:
    path: james_bond_data.csv
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: james_bond_data
  endpoint:
    path: james_bond_data
    method: GET
- name: dictionaries
  endpoint:
    path: /tutorials/python/dictionaries
    method: GET
    data_selector: content
    params: {}
- name: bond_actor
  endpoint:
    path: /bond_actor
    method: GET
- name: car_manufacturer
  endpoint:
    path: /car_manufacturer
    method: GET
- name: film_length
  endpoint:
    path: /film_length
    method: GET
- name: martinis_consumed
  endpoint:
    path: /martinis_consumed
    method: GET
- name: Colorado
  endpoint:
    path: /services/data/vXX.X/sobjects/Colorado
    method: GET
    data_selector: records
    params: {}
- name: Chicago
  endpoint:
    path: /services/data/vXX.X/sobjects/Chicago
    method: GET
    data_selector: records
    params: {}
- name: Boston
  endpoint:
    path: /services/data/vXX.X/sobjects/Boston
    method: GET
    data_selector: records
    params: {}
- name: Minnesota
  endpoint:
    path: /services/data/vXX.X/sobjects/Minnesota
    method: GET
    data_selector: records
    params: {}
- name: Milwaukee
  endpoint:
    path: /services/data/vXX.X/sobjects/Milwaukee
    method: GET
    data_selector: records
    params: {}
- name: Seattle
  endpoint:
    path: /services/data/vXX.X/sobjects/Seattle
    method: GET
    data_selector: records
    params: {}
- name: dictionary
  endpoint:
    path: /dictionaries
    method: GET
    data_selector: records
- name: high_cards
  endpoint:
    path: /create_high_cards
    method: GET
    data_selector: array
    params: {}
- name: poisson_samples
  endpoint:
    path: /poisson
    method: GET
    data_selector: samples
    params:
      lam: 5
      size: 10000
- name: iris_dataset
  endpoint:
    path: /static/public/53/iris.zip
    method: GET
    data_selector: dataset
    params: {}
- name: iris
  endpoint:
    path: /datasets/iris
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: bridge_crossings
  endpoint:
    path: /cycle_crossings_apr_jun.csv
    method: GET
    data_selector: records
    params: {}
- name: iris_dataset
  endpoint:
    path: /datasets/53
    method: GET
    data_selector: variables
    params: {}
- name: iris_data
  endpoint:
    path: /datasets/iris
    method: GET
    data_selector: data
    params: {}
- name: multidimensional_arrays
  endpoint:
    path: /examples/multidimensional_arrays
    method: GET
    data_selector: records
- name: structured_arrays
  endpoint:
    path: /examples/structured_arrays
    method: GET
    data_selector: records
- name: hierarchical_data
  endpoint:
    path: /examples/hierarchical_data
    method: GET
    data_selector: records
- name: vectorized_functions
  endpoint:
    path: /examples/vectorized_functions
    method: GET
    data_selector: records
- name: player_stats
  endpoint:
    path: /2017-18_playerBoxScore.csv
    method: GET
    data_selector: records
- name: team_stats
  endpoint:
    path: /2017-18_teamBoxScore.csv
    method: GET
    data_selector: records
- name: standings
  endpoint:
    path: /2017-18_standings.csv
    method: GET
    data_selector: records
- name: array_from_files
  endpoint:
    path: /path/to/your/array_from_files
    method: POST
    data_selector: array_data
    params: {}
- name: handling_different_sizes
  endpoint:
    path: /path/to/your/handling_different_sizes
    method: POST
    data_selector: size_data
    params: {}
- name: standings
  endpoint:
    path: /standings
    method: GET
    data_selector: data
- name: player_stats
  endpoint:
    path: /player_stats
    method: GET
    data_selector: data
- name: issued_checks
  endpoint:
    path: /issued_checks.csv
    method: GET
    data_selector: records
- name: cashed_checks
  endpoint:
    path: /cashed_checks.csv
    method: GET
    data_selector: records
- name: three_takers
  endpoint:
    path: /play3PA
    method: GET
    data_selector: sample
    params: {}
- name: portfolio
  endpoint:
    path: /portfolio
    method: GET
    data_selector: records
- name: visualization_steps
  endpoint:
    path: /visualization/steps
    method: GET
    data_selector: steps
- name: first_glyphs
  endpoint:
    path: /visualization/first_glyphs
    method: GET
    data_selector: glyphs
- name: portfolio
  endpoint:
    path: /full_portfolio
    method: GET
    data_selector: records
    params: {}
- name: playerBoxScore
  endpoint:
    path: /2017-18_playerBoxScore.csv
    method: GET
    data_selector: data
    params: {}
- name: teamBoxScore
  endpoint:
    path: /2017-18_teamBoxScore.csv
    method: GET
    data_selector: data
    params: {}
- name: standings
  endpoint:
    path: /2017-18_standings.csv
    method: GET
    data_selector: data
    params: {}
- name: visualization_steps
  endpoint:
    path: /visualization_steps
    method: GET
    data_selector: steps
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: phi_gm_stats_2
  endpoint:
    path: /gm_stats_2
    method: GET
    data_selector: records
    params: {}
- name: player_gm_stats
  endpoint:
    path: /player_gm_stats
    method: GET
    data_selector: records
    params: {}
- name: visualization_steps
  endpoint:
    path: /visualization/steps
    method: GET
    data_selector: records
- name: glyphs
  endpoint:
    path: /visualization/glyphs
    method: GET
    data_selector: records
- name: Colorado
  endpoint:
    path: /Colorado
    method: GET
    data_selector: Rockies
- name: Chicago
  endpoint:
    path: /Chicago
    method: GET
    data_selector: White Sox
- name: Boston
  endpoint:
    path: /Boston
    method: GET
    data_selector: Red Sox
- name: Minnesota
  endpoint:
    path: /Minnesota
    method: GET
    data_selector: Twins
- name: Milwaukee
  endpoint:
    path: /Milwaukee
    method: GET
    data_selector: Brewers
- name: Seattle
  endpoint:
    path: /Seattle
    method: GET
    data_selector: Mariners
- name: phi_gm_stats
  endpoint:
    path: /services/data/vXX.X/sobjects/phi_gm_stats
    method: GET
    data_selector: records
    params: {}
- name: examples
  endpoint:
    path: /examples/index.html
    method: GET
- name: faq
  endpoint:
    path: /faq/usage_faq.html
    method: GET
- name: tutorials
  endpoint:
    path: /tutorials/index.html
    method: GET
- name: lifecycle
  endpoint:
    path: /tutorials/introductory/lifecycle.html
    method: GET
- name: style_sheets
  endpoint:
    path: /examples/style_sheets/plot_fivethirtyeight.html
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: jupyterlab_projects
  endpoint:
    path: /tutorials/jupyterlab
    method: GET
    data_selector: projects
    params: {}
- name: random_numbers
  endpoint:
    path: /random/numbers
    method: GET
    data_selector: numbers
    params: {}
- name: random_floating_point_numbers
  endpoint:
    path: /random/floating-point
    method: GET
    data_selector: floating_points
    params: {}
- name: random_integer_numbers
  endpoint:
    path: /random/integer
    method: GET
    data_selector: integers
    params: {}
- name: random_numpy_arrays
  endpoint:
    path: /random/arrays
    method: GET
    data_selector: arrays
    params: {}
- name: population_data
  endpoint:
    path: /world-population/world-population-by-year/
    method: GET
    data_selector: population
- name: population_changes
  endpoint:
    path: /population_changes
    method: GET
    data_selector: records
    params: {}
- name: tips
  endpoint:
    path: /datasets/tips
    method: GET
    data_selector: records
- name: file_browser
  endpoint:
    path: /file_browser
    method: GET
    data_selector: files
- name: terminal
  endpoint:
    path: /terminal
    method: GET
    data_selector: terminal_sessions
- name: bridge_crossings
  endpoint:
    path: /cycle_crossings_apr_jun.csv
    method: GET
    data_selector: data
    params: {}
- name: cycle_crossings
  endpoint:
    path: /cycle_crossings_apr_jun.csv
    method: GET
    data_selector: data
    params: {}
- name: cereals_data
  endpoint:
    path: /cereals_data.csv
    method: GET
    data_selector: data
    params: {}
- name: lebron_view
  endpoint:
    path: /lebron_view
    method: GET
    data_selector: records
    params: {}
- name: durant_view
  endpoint:
    path: /durant_view
    method: GET
    data_selector: records
    params: {}
- name: standings
  endpoint:
    path: /standings
    method: GET
    data_selector: records
- name: visualization
  endpoint:
    path: /docs/user_guide/index.html
    method: GET
    data_selector: content
    params: {}
- name: game_stats
  endpoint:
    path: /phi_gm_stats_2
    method: GET
    data_selector: records
- name: visualization
  endpoint:
    path: /visualization
    method: GET
    data_selector: records
    params: {}
- name: game_stats
  endpoint:
    path: /services/data/v1/gamestats
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: figures
  endpoint:
    path: /figures
    method: GET
- name: axes
  endpoint:
    path: /axes
    method: GET
- name: tutorials
  endpoint:
    path: /python/tutorials
    method: GET
    data_selector: tutorials
    params: {}
- name: courses
  endpoint:
    path: /python/courses
    method: GET
    data_selector: courses
    params: {}
- name: population_data
  endpoint:
    path: /population-data
    method: GET
    data_selector: records
    params: {}
- name: Population Changes
  endpoint:
    path: /population_changes
    method: GET
    data_selector: records
    params: {}
- name: podcast_episodes
  endpoint:
    path: /podcasts/rpp
    method: GET
    data_selector: episodes
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: 'SimPy: Simulating Real-World Processes With Python'
  endpoint:
    path: /simpy-simulating-with-python/
    method: GET
    data_selector: tutorials
    params: {}
- name: The Ultimate List of Data Science Podcasts
  endpoint:
    path: /data-science-podcasts/
    method: GET
    data_selector: tutorials
    params: {}
- name: Writing Comments in Python (Guide)
  endpoint:
    path: /python-comments-guide/
    method: GET
    data_selector: tutorials
    params: {}
- name: Python Descriptors
  endpoint:
    path: /courses/python-descriptors/
    method: GET
- name: What's New in Python 3.14
  endpoint:
    path: /courses/whats-new-python-314/
    method: GET
- name: Modern Python Linting With Ruff
  endpoint:
    path: /courses/modern-python-linting-ruff/
    method: GET
- name: Strip Characters From a Python String
  endpoint:
    path: /courses/strip-characters-from-string/
    method: GET
- name: Python Project Management With uv
  endpoint:
    path: /courses/python-project-management-with-uv/
    method: GET
- name: A History of Python Versions and Features
  endpoint:
    path: /courses/history-python-versions-features/
    method: GET
- name: Profiling Performance in Python
  endpoint:
    path: /courses/profiling-performance/
    method: GET
- name: Deep vs Shallow Copies in Python
  endpoint:
    path: /courses/deep-vs-shallow-copies/
    method: GET
- name: Working With Python's .__dict__ Attribute
  endpoint:
    path: /courses/working-dict-attributes/
    method: GET
- name: Exploring Python T-Strings
  endpoint:
    path: /courses/exploring-t-strings/
    method: GET
- name: Working With Python's Built-in Exceptions
  endpoint:
    path: /courses/working-builtin-exceptions/
    method: GET
- name: 'Exploring Python Closures: Examples and Use Cases'
  endpoint:
    path: /courses/closures-examples-use-cases/
    method: GET
- name: Getting Started With marimo Notebooks
  endpoint:
    path: /courses/getting-started-with-marimo-notebooks/
    method: GET
- name: Exploring Protocols in Python
  endpoint:
    path: /courses/exploring-protocols-python/
    method: GET
- name: Implementing the Factory Method Pattern in Python
  endpoint:
    path: /courses/factory-method-pattern/
    method: GET
- name: Starting With DuckDB and Python
  endpoint:
    path: /courses/starting-duckdb-python/
    method: GET
- name: 'Python Project: Build a Word Count Command-Line App'
  endpoint:
    path: /courses/word-count-app-project/
    method: GET
- name: Exploring Python's list Data Type With Examples
  endpoint:
    path: /courses/list-data-type-with-examples/
    method: GET
- name: Python Continuous Integration and Deployment Using GitHub Actions
  endpoint:
    path: /courses/cicd-github-actions/
    method: GET
- name: Execute Your Python Scripts With a Shebang
  endpoint:
    path: /courses/execute-python-scripts-with-shebang/
    method: GET
- name: The LEGB Rule & Understanding Python Scope
  endpoint:
    path: /courses/legb-rule-python-scope/
    method: GET
- name: First Steps With LangChain
  endpoint:
    path: /courses/first-steps-langchain/
    method: GET
- name: Working With Missing Data in Polars
  endpoint:
    path: /courses/missing-data-polars/
    method: GET
- name: Using the Python subprocess Module
  endpoint:
    path: /courses/python-subprocess-module/
    method: GET
- name: 'Thread Safety in Python: Locks and Other Techniques'
  endpoint:
    path: /courses/thread-safety-locks-other-techniques/
    method: GET
- name: MySQL Databases and Python
  endpoint:
    path: /courses/mysql-databases-python/
    method: GET
- name: Creating a Python Dice Roll Application
  endpoint:
    path: /courses/creating-dice-roll-application/
    method: GET
- name: Checking for Membership Using Python's "in" and "not in" Operators
  endpoint:
    path: /courses/checking-membership-in-not-in-operators/
    method: GET
- name: Building a Code Image Generator With Python
  endpoint:
    path: /courses/code-image-generator/
    method: GET
- name: What Can You Do With Python?
  endpoint:
    path: /courses/what-can-you-do-with-python/
    method: GET
- name: Using Structural Pattern Matching in Python
  endpoint:
    path: /courses/structural-pattern-matching/
    method: GET
- name: Getting to Know Duck Typing in Python
  endpoint:
    path: /courses/duck-typing-python/
    method: GET
- name: Working With Python Polars
  endpoint:
    path: /courses/working-with-python-polars/
    method: GET
- name: Single and Double Underscore Naming Conventions in Python
  endpoint:
    path: /courses/single-double-underscore-naming-conventions/
    method: GET
- name: Concatenating Strings in Python Efficiently
  endpoint:
    path: /courses/concatenating-strings-efficiently/
    method: GET
- name: Building a Python Command-Line To-Do App With Typer
  endpoint:
    path: /courses/build-command-line-todo-app-typer/
    method: GET
- name: NumPy Techniques and Practical Examples
  endpoint:
    path: /courses/numpy-techniques-practical-examples/
    method: GET
- name: Creating a Scalable Flask Web Application From Scratch
  endpoint:
    path: /courses/create-scalable-flask-web-app/
    method: GET
- name: Exploring Python's tuple Data Type With Examples
  endpoint:
    path: /courses/exploring-tuple-data-type-examples/
    method: GET
- name: Building Dictionary Comprehensions in Python
  endpoint:
    path: /courses/building-dictionary-comprehensions/
    method: GET
- name: Ways to Start Interacting With Python
  endpoint:
    path: /courses/interactive-python/
    method: GET
- name: Programming Sockets in Python
  endpoint:
    path: /courses/programming-sockets/
    method: GET
- name: 'Handling or Preventing Errors in Python: LBYL vs EAFP'
  endpoint:
    path: /courses/handling-preventing-errors-lbyl-eafp/
    method: GET
- name: Managing Dependencies With Python Poetry
  endpoint:
    path: /courses/managing-dependencies-with-poetry/
    method: GET
- name: Working With TOML and Python
  endpoint:
    path: /courses/working-with-toml-python/
    method: GET
- name: Formatting Floats Inside Python F-Strings
  endpoint:
    path: /courses/format-floats-f-strings/
    method: GET
- name: Introduction to Web Scraping With Python
  endpoint:
    path: /courses/introduction-to-web-scraping-with-python/
    method: GET
- name: Python's Magic Methods in Classes
  endpoint:
    path: /courses/magic-methods-classes/
    method: GET
- name: Understanding Python's Global Interpreter Lock (GIL)
  endpoint:
    path: /courses/understanding-global-interpreter-lock-gil/
    method: GET
- name: Using Type Hints for Multiple Return Types in Python
  endpoint:
    path: /courses/type-hints-multiple-return-types/
    method: GET
- name: What's New in Python 3.13
  endpoint:
    path: /courses/new-features-python-313/
    method: GET
- name: Differences Between Python's Mutable and Immutable Types
  endpoint:
    path: /courses/differences-mutable-immutable-types/
    method: GET
- name: Advanced Python import Techniques
  endpoint:
    path: /courses/advanced-import-techniques/
    method: GET
- name: Customizing VS Code Through Color Themes
  endpoint:
    path: /courses/custom-vs-code-color-themes/
    method: GET
- name: Using Pydantic to Simplify Python Data Validation
  endpoint:
    path: /courses/pydantic-simplify-data-validation/
    method: GET
- name: Using Astropy for Astronomy With Python
  endpoint:
    path: /courses/astropy-astronomy/
    method: GET
- name: Exploring Astrophysics in Python With pandas and Matplotlib
  endpoint:
    path: /courses/astrophysics-pandas-matplotlib/
    method: GET
- name: 'Sorting Dictionaries in Python: Keys, Values, and More'
  endpoint:
    path: /courses/sorting-dictionaries-keys-values-more/
    method: GET
- name: Interacting With REST APIs and Python
  endpoint:
    path: /courses/interacting-rest-apis-python/
    method: GET
- name: Simulate a Text File in Python
  endpoint:
    path: /courses/simulate-text-file/
    method: GET
- name: 'pandas GroupBy: Grouping Real World Data in Python'
  endpoint:
    path: /courses/pandas-groupby-real-world-data/
    method: GET
- name: 'Exercises Course: Introduction to Web Scraping With Python'
  endpoint:
    path: /courses/exercises-introduction-web-scraping/
    method: GET
- name: Customize VS Code Settings
  endpoint:
    path: /courses/customize-vscode-settings/
    method: GET
- name: Defining Python Constants for Code Maintainability
  endpoint:
    path: /courses/defining-constants-code-maintainability/
    method: GET
- name: Build a GUI Calculator With PyQt and Python
  endpoint:
    path: /courses/build-gui-calculator-pyqt/
    method: GET
- name: Rounding Numbers in Python
  endpoint:
    path: /courses/rounding-numbers-python/
    method: GET
- name: Listing All Files in a Directory With Python
  endpoint:
    path: /courses/listing-all-files-directory/
    method: GET
- name: 'Python Interfaces: Object-Oriented Design Principles'
  endpoint:
    path: /courses/interfaces-object-oriented-design-principles/
    method: GET
- name: Efficient Iterations With Python Iterators and Iterables
  endpoint:
    path: /courses/efficient-iterations-iterators-iterables/
    method: GET
- name: Building a Python GUI Application With Tkinter
  endpoint:
    path: /courses/building-gui-application-tkinter/
    method: GET
- name: HTML and CSS Foundations for Python Developers
  endpoint:
    path: /courses/html-css-foundations/
    method: GET
- name: Flattening a List of Lists in Python
  endpoint:
    path: /courses/flatten-list-of-lists/
    method: GET
- name: Working With Global Variables in Python Functions
  endpoint:
    path: /courses/global-variables-in-python-functions/
    method: GET
- name: 'Python Basics Exercises: Scopes'
  endpoint:
    path: /courses/python-basics-exercises-scopes/
    method: GET
- name: Using raise for Effective Exceptions
  endpoint:
    path: /courses/using-raise-for-effective-exceptions/
    method: GET
- name: tutorials
  endpoint:
    path: /tutorials
    method: GET
    data_selector: records
- name: courses
  endpoint:
    path: /courses
    method: GET
    data_selector: records
- name: installation_guide
  endpoint:
    path: /install-python
    method: GET
    data_selector: installation_info
    params: {}
- name: python_syntax
  endpoint:
    path: /python-syntax
    method: GET
    data_selector: syntax_info
    params: {}
- name: course_overview
  endpoint:
    path: /courses/python-descriptors/continue/
    method: GET
    data_selector: course_details
- name: course_slides
  endpoint:
    path: /courses/python-descriptors/downloads/python-descriptors-slides/
    method: GET
    data_selector: slides
- name: sample_code
  endpoint:
    path: /courses/python-descriptors/downloads/python-descriptors-code/
    method: GET
    data_selector: code
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Creating a Descriptor Class
  endpoint:
    path: /courses/python-descriptors/
    method: GET
    data_selector: records
    params: {}
- name: installation_guide
  endpoint:
    path: /downloads/
    method: GET
    data_selector: downloads
- name: tutorials
  endpoint:
    path: /tutorials/
    method: GET
    data_selector: tutorials
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: installation_guide
  endpoint:
    path: /install/python
    method: GET
    data_selector: installation
- name: syntax_guide
  endpoint:
    path: /syntax/python
    method: GET
    data_selector: syntax
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: python_basics
  endpoint:
    path: /tutorials/basics
    method: GET
    data_selector: tutorials
    params: {}
- name: intermediate_python
  endpoint:
    path: /tutorials/intermediate
    method: GET
    data_selector: tutorials
    params: {}
- name: Python 3.14’s New Interpreter and More Python News for February 2025
  endpoint:
    path: /python-news-february-2025/
    method: GET
- name: Build a Quiz Application With Python
  endpoint:
    path: /python-quiz-application/
    method: GET
- name: 'Python and TOML: New Best Friends'
  endpoint:
    path: /python-toml/
    method: GET
- name: 'Python''s pathlib Module: Taming the File System'
  endpoint:
    path: /python-pathlib/
    method: GET
- name: 'The Walrus Operator: Python''s Assignment Expressions'
  endpoint:
    path: /python-walrus-operator/
    method: GET
- name: Primer on Python Decorators
  endpoint:
    path: /primer-on-python-decorators/
    method: GET
- name: 'Python Timer Functions: Three Ways to Monitor Your Code'
  endpoint:
    path: /python-timer/
    method: GET
- name: 'Python range(): Represent Numerical Ranges'
  endpoint:
    path: /python-range/
    method: GET
- name: 'Python News Roundup: October 2024'
  endpoint:
    path: /python-news-october-2024/
    method: GET
- name: 'Python 3.13: Cool New Features for You to Try'
  endpoint:
    path: /python313-new-features/
    method: GET
- name: 'Python 3.13 Preview: A Modern REPL'
  endpoint:
    path: /python313-repl/
    method: GET
- name: 'Python News Roundup: July 2024'
  endpoint:
    path: /python-news-july-2024/
    method: GET
- name: 'Python News: What''s New From March 2024'
  endpoint:
    path: /python-news-march-2024/
    method: GET
- name: 'Python News: What''s New From October 2023'
  endpoint:
    path: /python-news-october-2023/
    method: GET
- name: 'Python 3.12: Cool New Features for You to Try'
  endpoint:
    path: /python312-new-features/
    method: GET
- name: 'Python 3.12 Preview: Static Typing Improvements'
  endpoint:
    path: /python312-typing/
    method: GET
- name: Why Are Membership Tests So Fast for range() in Python?
  endpoint:
    path: /python-range-membership-test/
    method: GET
- name: 'Python News: What''s New From May 2023'
  endpoint:
    path: /python-news-may-2023/
    method: GET
- name: How to Get Normally Distributed Random Numbers With NumPy
  endpoint:
    path: /numpy-random-normal/
    method: GET
- name: Build a Wordle Clone With Python and Rich
  endpoint:
    path: /python-wordle-clone/
    method: GET
- name: Learn From 2022's Most Popular Python Tutorials and Courses
  endpoint:
    path: /popular-python-tutorials-2022/
    method: GET
- name: 'Advent of Code: Solving Your Puzzles With Python'
  endpoint:
    path: /python-advent-of-code/
    method: GET
- name: Should You Update to the Latest Python Bugfix Version?
  endpoint:
    path: /python-bugfix-version/
    method: GET
- name: 'Python 3.11: Cool New Features for You to Try'
  endpoint:
    path: /python311-new-features/
    method: GET
- name: 'Minimax in Python: Learn How to Lose the Game of Nim'
  endpoint:
    path: /python-minimax-nim/
    method: GET
- name: How Can You Install a Pre-Release Version of Python?
  endpoint:
    path: /python-pre-release/
    method: GET
- name: 'Python 3.11 Preview: TOML and tomllib'
  endpoint:
    path: /python311-tomllib/
    method: GET
- name: How to Publish an Open-Source Python Package to PyPI
  endpoint:
    path: /pypi-publish-python-package/
    method: GET
- name: 'Python News: What''s New From April 2022'
  endpoint:
    path: /python-news-april-2022/
    method: GET
- name: 'Python 3.11 Preview: Task and Exception Groups'
  endpoint:
    path: /python311-exception-groups/
    method: GET
- name: 'Python 3.11 Preview: Even Better Error Messages'
  endpoint:
    path: /python311-error-messages/
    method: GET
- name: 'Python News: What''s New From December 2021'
  endpoint:
    path: /python-news-december-2021/
    method: GET
- name: 'Python News: What''s New From October 2021'
  endpoint:
    path: /python-news-october-2021/
    method: GET
- name: 'Python 3.10: Cool New Features for You to Try'
  endpoint:
    path: /python310-new-features/
    method: GET
- name: 'Python 3.9: Cool New Features for You to Try'
  endpoint:
    path: /python39-new-features/
    method: GET
- name: 'Python import: Advanced Techniques and Tips'
  endpoint:
    path: /python-import/
    method: GET
- name: 'Run Python Versions in Docker: How to Try the Latest Python Release'
  endpoint:
    path: /python-versions-docker/
    method: GET
- name: 'Python 3.8: Cool New Features for You to Try'
  endpoint:
    path: /python38-new-features/
    method: GET
- name: Python Type Checking (Guide)
  endpoint:
    path: /python-type-checking/
    method: GET
- name: 'Python 3.7: Cool New Features for You to Try'
  endpoint:
    path: /python37-new-features/
    method: GET
- name: Data Classes in Python 3.7+ (Guide)
  endpoint:
    path: /python-data-classes/
    method: GET
- name: Building a Python GUI Application With Tkinter
  endpoint:
    path: /courses/building-gui-application-tkinter/
    method: GET
- name: Python GUI Programming With Tkinter
  endpoint:
    path: /quizzes/python-gui-programming-with-tkinter/
    method: GET
- name: Build a Tic-Tac-Toe Game With Python and Tkinter
  endpoint:
    path: /tic-tac-toe-python/
    method: GET
- name: 'Python and PyQt: Creating Menus, Toolbars, and Status Bars'
  endpoint:
    path: /python-menus-toolbars/
    method: GET
- name: Build a GUI Calculator With PyQt and Python
  endpoint:
    path: /courses/build-gui-calculator-pyqt/
    method: GET
- name: Creating PyQt Layouts for GUI Applications
  endpoint:
    path: /courses/creating-pyqt-layouts-gui-applications/
    method: GET
- name: 'Handling SQL Databases With PyQt: The Basics'
  endpoint:
    path: /python-pyqt-database/
    method: GET
- name: 'Qt Designer and Python: Build Your GUI Applications Faster'
  endpoint:
    path: /qt-designer-python/
    method: GET
- name: Use PyQt's QThread to Prevent Freezing GUIs
  endpoint:
    path: /python-pyqt-qthread/
    method: GET
- name: Build a Contact Book With Python, PyQt, and SQLite
  endpoint:
    path: /python-contact-book/
    method: GET
- name: Build a Bulk File Rename Tool With Python and PyQt
  endpoint:
    path: /bulk-file-rename-tool-python/
    method: GET
- name: How to Build a Python GUI Application With wxPython
  endpoint:
    path: /python-gui-with-wxpython/
    method: GET
- name: Build Cross-Platform GUI Apps With Kivy
  endpoint:
    path: /courses/cross-platform-gui-apps-kivy/
    method: GET
- name: ArgumentParser
  endpoint:
    path: /ArgumentParser
    method: GET
    data_selector: class
    params: {}
- name: tutorials
  endpoint:
    path: /tutorials
    method: GET
    data_selector: tutorials
- name: articles
  endpoint:
    path: /articles
    method: GET
    data_selector: articles
- name: keywords
  endpoint:
    path: /ref/keywords
    method: GET
    data_selector: keywords
    params: {}
- name: soft_keywords
  endpoint:
    path: /ref/soft_keyword
    method: GET
    data_selector: soft_keywords
    params: {}
- name: Pygame Installation
  endpoint:
    path: /install
    method: GET
    data_selector: installation
    params: {}
- name: Pygame Examples
  endpoint:
    path: /examples
    method: GET
    data_selector: examples
    params: {}
- name: basic_application
  endpoint:
    path: /pygame_basic.py
    method: GET
    data_selector: source
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: script
  endpoint:
    path: /renpy/script
    method: GET
    data_selector: records
    params: {}
- name: town
  endpoint:
    path: /renpy/town
    method: GET
    data_selector: records
    params: {}
- name: path
  endpoint:
    path: /renpy/path
    method: GET
    data_selector: records
    params: {}
- name: giant
  endpoint:
    path: /renpy/giant
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: script
  endpoint:
    path: /renpy/script
    method: GET
    data_selector: records
- name: town
  endpoint:
    path: /renpy/town
    method: GET
    data_selector: records
- name: path
  endpoint:
    path: /renpy/path
    method: GET
    data_selector: records
- name: giant
  endpoint:
    path: /renpy/giant
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: script
  endpoint:
    path: /renpy/script.rpy
    method: GET
    data_selector: lines
    params: {}
- name: town
  endpoint:
    path: /renpy/town.rpy
    method: GET
    data_selector: lines
    params: {}
- name: path
  endpoint:
    path: /renpy/path.rpy
    method: GET
    data_selector: lines
    params: {}
- name: giant
  endpoint:
    path: /renpy/giant.rpy
    method: GET
    data_selector: lines
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: script
  endpoint:
    path: /renpy/script
    method: GET
    data_selector: records
- name: town
  endpoint:
    path: /renpy/town
    method: GET
    data_selector: records
- name: path
  endpoint:
    path: /renpy/path
    method: GET
    data_selector: records
- name: giant
  endpoint:
    path: /renpy/giant
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: script
  endpoint:
    path: /renpy_sample/giant_quest/script.rpy
    method: GET
    data_selector: lines
    params: {}
- name: town
  endpoint:
    path: /renpy_sample/giant_quest/town.rpy
    method: GET
    data_selector: lines
    params: {}
- name: path
  endpoint:
    path: /renpy_sample/giant_quest/path.rpy
    method: GET
    data_selector: lines
    params: {}
- name: giant
  endpoint:
    path: /renpy_sample/giant_quest/giant.rpy
    method: GET
    data_selector: lines
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Using Jupyter Notebooks
  endpoint:
    path: /courses/using-jupyter-notebooks/
    method: GET
- name: Explore Your Dataset With pandas
  endpoint:
    path: /courses/explore-dataset-with-pandas/
    method: GET
- name: Reading and Writing CSV Files
  endpoint:
    path: /courses/reading-and-writing-csv-files/
    method: GET
- name: Working With JSON in Python
  endpoint:
    path: /courses/working-json-data-python/
    method: GET
- name: 'The pandas DataFrame: Working With Data Efficiently'
  endpoint:
    path: /courses/pandas-dataframe-working-with-data/
    method: GET
- name: Python Plotting With Matplotlib
  endpoint:
    path: /courses/python-plotting-matplotlib/
    method: GET
- name: Data Cleaning With pandas and NumPy
  endpoint:
    path: /courses/data-cleaning-with-pandas-and-numpy/
    method: GET
- name: 'Idiomatic pandas: Tricks & Features You May Not Know'
  endpoint:
    path: /courses/idiomatic-pandas-tricks-features-you-may-not-know/
    method: GET
- name: Interactive Data Visualization With Bokeh and Python
  endpoint:
    path: /courses/interactive-data-visualization-python-bokeh/
    method: GET
- name: 'Histogram Plotting in Python: NumPy, Matplotlib, Pandas & Seaborn'
  endpoint:
    path: /courses/python-histograms/
    method: GET
- name: 'Python Statistics Fundamentals: How to Describe Your Data'
  endpoint:
    path: /python-statistics/
    method: GET
- name: Generating Random Data in Python
  endpoint:
    path: /courses/generating-random-data-python/
    method: GET
- name: 'NumPy, SciPy, and pandas: Correlation With Python'
  endpoint:
    path: /numpy-scipy-pandas-correlation-python/
    method: GET
- name: Data Engineer Interview Questions With Python
  endpoint:
    path: /data-engineer-interview-questions-python/
    method: GET
- name: 'Look Ma, No for Loops: Array Programming With NumPy'
  endpoint:
    path: /numpy-array-programming/
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: 'Getting Started With Django: Building a Portfolio App'
  endpoint:
    path: /courses/django-portfolio-project/
    method: GET
    data_selector: course
    params: {}
- name: Django Migrations 101
  endpoint:
    path: /courses/django-migrations-101/
    method: GET
    data_selector: course
    params: {}
- name: Digging Deeper Into Django Migrations
  endpoint:
    path: /digging-deeper-into-migrations/
    method: GET
    data_selector: tutorial
    params: {}
- name: Build a Location-Based Web App With Django and GeoDjango
  endpoint:
    path: /courses/make-location-based-web-app-django-and-geodjango/
    method: GET
    data_selector: course
    params: {}
- name: Django Redirects
  endpoint:
    path: /courses/django-redirects/
    method: GET
    data_selector: course
    params: {}
- name: Working With JSON in Python
  endpoint:
    path: /courses/working-json-data-python/
    method: GET
    data_selector: course
    params: {}
- name: Building HTTP APIs With Django REST Framework
  endpoint:
    path: /courses/django-rest-framework/
    method: GET
    data_selector: course
    params: {}
- name: Python REST APIs With Flask, Connexion, and SQLAlchemy – Part 1
  endpoint:
    path: /flask-connexion-rest-api/
    method: GET
    data_selector: tutorial
    params: {}
- name: Python REST APIs With Flask, Connexion, and SQLAlchemy – Part 2
  endpoint:
    path: /flask-connexion-rest-api-part-2/
    method: GET
    data_selector: tutorial
    params: {}
- name: Python REST APIs With Flask, Connexion, and SQLAlchemy – Part 3
  endpoint:
    path: /flask-connexion-rest-api-part-3/
    method: GET
    data_selector: tutorial
    params: {}
- name: Build a JavaScript Front End for a Flask API
  endpoint:
    path: /flask-javascript-frontend-for-rest-api/
    method: GET
    data_selector: tutorial
    params: {}
- name: Sending Emails Using Python
  endpoint:
    path: /courses/sending-emails-python/
    method: GET
    data_selector: course
    params: {}
- name: What You Need to Know to Manage Users in Django Admin
  endpoint:
    path: /manage-users-in-django-admin/
    method: GET
    data_selector: tutorial
    params: {}
- name: Django Admin Customization
  endpoint:
    path: /courses/django-admin-customization/
    method: GET
    data_selector: course
    params: {}
- name: Building a Python GUI Application With Tkinter
  endpoint:
    path: /courses/building-gui-application-tkinter/
    method: GET
- name: Build a Tic-Tac-Toe Game With Python and Tkinter
  endpoint:
    path: /tic-tac-toe-python/
    method: GET
- name: 'Python and PyQt: Creating Menus, Toolbars, and Status Bars'
  endpoint:
    path: /python-menus-toolbars/
    method: GET
- name: Build a GUI Calculator With PyQt and Python
  endpoint:
    path: /courses/build-gui-calculator-pyqt/
    method: GET
- name: Creating PyQt Layouts for GUI Applications
  endpoint:
    path: /courses/creating-pyqt-layouts-gui-applications/
    method: GET
- name: 'Handling SQL Databases With PyQt: The Basics'
  endpoint:
    path: /python-pyqt-database/
    method: GET
- name: 'Qt Designer and Python: Build Your GUI Applications Faster'
  endpoint:
    path: /qt-designer-python/
    method: GET
- name: Use PyQt's QThread to Prevent Freezing GUIs
  endpoint:
    path: /python-pyqt-qthread/
    method: GET
- name: Build a Contact Book With Python, PyQt, and SQLite
  endpoint:
    path: /python-contact-book/
    method: GET
- name: Build a Bulk File Rename Tool With Python and PyQt
  endpoint:
    path: /bulk-file-rename-tool-python/
    method: GET
- name: How to Build a Python GUI Application With wxPython
  endpoint:
    path: /python-gui-with-wxpython/
    method: GET
- name: Build Cross-Platform GUI Apps With Kivy
  endpoint:
    path: /courses/cross-platform-gui-apps-kivy/
    method: GET
- name: 'Getting Started With Django: Building a Portfolio App'
  endpoint:
    path: /courses/django-portfolio-project/
    method: GET
- name: Building a Django User Management System
  endpoint:
    path: /courses/building-a-django-user-management-system/
    method: GET
- name: 'Django View Authorization: Restricting Access'
  endpoint:
    path: /courses/django-view-authorization/
    method: GET
- name: Structuring a Python Application
  endpoint:
    path: /courses/structuring-python-application/
    method: GET
- name: Django Migrations 101
  endpoint:
    path: /courses/django-migrations-101/
    method: GET
- name: Digging Deeper Into Django Migrations
  endpoint:
    path: /digging-deeper-into-migrations/
    method: GET
- name: Build a Location-Based Web App With Django and GeoDjango
  endpoint:
    path: /courses/make-location-based-web-app-django-and-geodjango/
    method: GET
- name: How to Provide Test Fixtures for Django Models in Pytest
  endpoint:
    path: /django-pytest-fixtures/
    method: GET
- name: Django Redirects
  endpoint:
    path: /courses/django-redirects/
    method: GET
- name: Modeling Polymorphism in Django With Python
  endpoint:
    path: /modeling-polymorphism-django-python/
    method: GET
- name: What You Need to Know to Manage Users in Django Admin
  endpoint:
    path: /manage-users-in-django-admin/
    method: GET
- name: Django Admin Customization
  endpoint:
    path: /courses/django-admin-customization/
    method: GET
- name: How to Create an Index in Django Without Downtime
  endpoint:
    path: /create-django-index-without-downtime/
    method: GET
- name: How to Write an Installable Django App
  endpoint:
    path: /installable-django-app/
    method: GET
- name: How to Move a Django Model to Another App
  endpoint:
    path: /move-django-model/
    method: GET
- name: Building HTTP APIs With Django REST Framework
  endpoint:
    path: /courses/django-rest-framework/
    method: GET
- name: command_line_interfaces
  endpoint:
    path: /command-line-interfaces
    method: GET
    data_selector: content
    params: {}
- name: contribution_guide
  endpoint:
    path: /contributing
    method: GET
    data_selector: content
    params: {}
- name: issue_tracker
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params: {}
- name: Dog
  endpoint:
    path: /services/data/vXX.X/sobjects/Dog
    method: GET
    data_selector: records
    params: {}
- name: divide
  endpoint:
    path: /divide.py
    method: GET
    data_selector: args
    params: {}
- name: point
  endpoint:
    path: /point.py
    method: GET
    data_selector: args
    params: {}
- name: sum
  endpoint:
    path: /sum.py
    method: GET
    data_selector: args
    params: {}
- name: files
  endpoint:
    path: /files.py
    method: GET
    data_selector: args
    params: {}
- name: cooking
  endpoint:
    path: /cooking.py
    method: GET
    data_selector: args
    params: {}
- name: ls
  endpoint:
    path: /ls.py
    method: GET
    data_selector: args
    params: {}
- name: map_single_iterable
  endpoint:
    path: /map/single
    method: POST
    data_selector: results
    params: {}
- name: map_multiple_iterables
  endpoint:
    path: /map/multiple
    method: POST
    data_selector: results
    params: {}
- name: general_output
  endpoint:
    path: general
    method: GET
    data_selector: output
    params:
      default: .
- name: detailed_output
  endpoint:
    path: detailed
    method: GET
    data_selector: output
    params: {}
- name: install
  endpoint:
    path: /install.ps1
    method: GET
    data_selector: script
- name: bulk_crap_uninstaller
  endpoint:
    path: /packages/bulk-crap-uninstaller
    method: GET
    data_selector: package
- name: winaero_tweaker
  endpoint:
    path: /packages/winaero-tweaker
    method: GET
    data_selector: package
- name: Pygame
  endpoint:
    path: /pygame
    method: GET
    data_selector: records
    params: {}
- name: Arcade
  endpoint:
    path: /arcade
    method: GET
    data_selector: records
    params: {}
- name: Ren’Py
  endpoint:
    path: /renpy
    method: GET
    data_selector: records
    params: {}
- name: adventurelib
  endpoint:
    path: /adventurelib
    method: GET
    data_selector: records
    params: {}
- name: bulk-crap-uninstaller
  endpoint:
    path: /packages/bulk-crap-uninstaller
    method: GET
    data_selector: records
- name: powershell-core
  endpoint:
    path: /packages/powershell-core
    method: GET
    data_selector: records
- name: 7zip
  endpoint:
    path: /packages/7zip
    method: GET
    data_selector: records
- name: script
  endpoint:
    path: /renpy/script.rpy
    method: GET
    data_selector: data
    params: {}
- name: town
  endpoint:
    path: /renpy/town.rpy
    method: GET
    data_selector: data
    params: {}
- name: path
  endpoint:
    path: /renpy/path.rpy
    method: GET
    data_selector: data
    params: {}
- name: giant
  endpoint:
    path: /renpy/giant.rpy
    method: GET
    data_selector: data
    params: {}
- name: sprites_and_images
  endpoint:
    path: /sprites_and_images
    method: GET
    data_selector: sprites
    params: {}
- name: bulk-crap-uninstaller
  endpoint:
    path: /packages/bulk-crap-uninstaller
    method: GET
    data_selector: package
    params: {}
- name: powershell-core
  endpoint:
    path: /packages/powershell-core
    method: GET
    data_selector: package
    params: {}
- name: 7zip
  endpoint:
    path: /packages/7zip
    method: GET
    data_selector: package
    params: {}
- name: script
  endpoint:
    path: /renpy/script
    method: GET
    data_selector: records
- name: town
  endpoint:
    path: /renpy/town
    method: GET
    data_selector: records
- name: path
  endpoint:
    path: /renpy/path
    method: GET
    data_selector: records
- name: giant
  endpoint:
    path: /renpy/giant
    method: GET
    data_selector: records
- name: install
  endpoint:
    path: /install
    method: GET
    data_selector: instructions
    params: {}
- name: install_python_versions
  endpoint:
    path: /install
    method: GET
    data_selector: available_versions
- name: check_installed_versions
  endpoint:
    path: /versions
    method: GET
    data_selector: installed_versions
- name: create_virtual_environment
  endpoint:
    path: /virtualenv
    method: POST
    data_selector: virtualenv_created
- name: list_virtual_environments
  endpoint:
    path: /virtualenvs
    method: GET
    data_selector: available_virtualenvs
- name: script
  endpoint:
    path: /renpy/script
    method: GET
    data_selector: script_data
- name: town
  endpoint:
    path: /renpy/town
    method: GET
    data_selector: town_data
- name: path
  endpoint:
    path: /renpy/path
    method: GET
    data_selector: path_data
- name: giant
  endpoint:
    path: /renpy/giant
    method: GET
    data_selector: giant_data
- name: script
  endpoint:
    path: /script.rpy
    method: GET
    data_selector: lines
    params: {}
- name: town
  endpoint:
    path: /town.rpy
    method: GET
    data_selector: lines
    params: {}
- name: path
  endpoint:
    path: /path.rpy
    method: GET
    data_selector: lines
    params: {}
- name: giant
  endpoint:
    path: /giant.rpy
    method: GET
    data_selector: lines
    params: {}
- name: Ren’Py Installation
  endpoint:
    path: /latest.html
    method: GET
    data_selector: installation_steps
- name: Basic Concepts
  endpoint:
    path: /basic_concepts.html
    method: GET
    data_selector: basic_concepts
- name: macOS Official Installer
  endpoint:
    path: /downloads/macos/installer
    method: GET
    data_selector: installer_info
    params: {}
- name: macOS Homebrew Installer
  endpoint:
    path: /downloads/macos/homebrew
    method: GET
    data_selector: homebrew_info
    params: {}
- name: Linux Installation
  endpoint:
    path: /downloads/linux/installation
    method: GET
    data_selector: linux_install_info
    params: {}
- name: iOS Pythonista
  endpoint:
    path: /downloads/ios/pythonista
    method: GET
    data_selector: pythonista_info
    params: {}
- name: Android Pydroid
  endpoint:
    path: /downloads/android/pydroid
    method: GET
    data_selector: pydroid_info
    params: {}
- name: script
  endpoint:
    path: renpy_sample/giant_quest/script.rpy
    method: GET
    data_selector: lines
    params: {}
- name: town
  endpoint:
    path: renpy_sample/giant_quest/town.rpy
    method: GET
    data_selector: lines
    params: {}
- name: path
  endpoint:
    path: renpy_sample/giant_quest/path.rpy
    method: GET
    data_selector: lines
    params: {}
- name: giant
  endpoint:
    path: renpy_sample/giant_quest/giant.rpy
    method: GET
    data_selector: lines
    params: {}
- name: Wasabi 2D
  endpoint:
    path: https://wasabi2d.readthedocs.io/
    method: GET
    data_selector: records
- name: cocos2d
  endpoint:
    path: https://los-cocos.github.io/cocos-site/
    method: GET
    data_selector: records
- name: Panda 3D
  endpoint:
    path: https://www.panda3d.org/
    method: GET
    data_selector: records
- name: Ursina
  endpoint:
    path: https://www.ursinaengine.org/
    method: GET
    data_selector: records
- name: PursuedPyBear
  endpoint:
    path: https://ppb.dev/
    method: GET
    data_selector: records
- name: repository
  endpoint:
    path: /initiate
    method: POST
    data_selector: repository
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: status
    params: {}
- name: add
  endpoint:
    path: /add
    method: POST
    data_selector: added_files
    params: {}
- name: commit
  endpoint:
    path: /commit
    method: POST
    data_selector: commit_info
    params:
      message: commit message
- name: Using Jupyter Notebooks
  endpoint:
    path: /courses/using-jupyter-notebooks/
    method: GET
- name: Explore Your Dataset With pandas
  endpoint:
    path: /courses/explore-dataset-with-pandas/
    method: GET
- name: Reading and Writing CSV Files
  endpoint:
    path: /courses/reading-and-writing-csv-files/
    method: GET
- name: Working With JSON in Python
  endpoint:
    path: /courses/working-json-data-python/
    method: GET
- name: 'The pandas DataFrame: Working With Data Efficiently'
  endpoint:
    path: /courses/pandas-dataframe-working-with-data/
    method: GET
- name: Python Plotting With Matplotlib
  endpoint:
    path: /courses/python-plotting-matplotlib/
    method: GET
- name: Data Cleaning With pandas and NumPy
  endpoint:
    path: /courses/data-cleaning-with-pandas-and-numpy/
    method: GET
- name: 'Idiomatic pandas: Tricks & Features You May Not Know'
  endpoint:
    path: /courses/idiomatic-pandas-tricks-features-you-may-not-know/
    method: GET
- name: Interactive Data Visualization With Bokeh and Python
  endpoint:
    path: /courses/interactive-data-visualization-python-bokeh/
    method: GET
- name: 'Histogram Plotting in Python: NumPy, Matplotlib, Pandas & Seaborn'
  endpoint:
    path: /courses/python-histograms/
    method: GET
- name: 'Python Statistics Fundamentals: How to Describe Your Data'
  endpoint:
    path: /python-statistics/
    method: GET
- name: Generating Random Data in Python
  endpoint:
    path: /courses/generating-random-data-python/
    method: GET
- name: 'NumPy, SciPy, and pandas: Correlation With Python'
  endpoint:
    path: /numpy-scipy-pandas-correlation-python/
    method: GET
- name: Data Engineer Interview Questions With Python
  endpoint:
    path: /data-engineer-interview-questions-python/
    method: GET
- name: 'Look Ma, No for Loops: Array Programming With NumPy'
  endpoint:
    path: /numpy-array-programming/
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: print_function
  endpoint:
    path: /python-print
    method: GET
    data_selector: content
    params: {}
- name: 'Getting Started With Django: Building a Portfolio App'
  endpoint:
    path: /courses/django-portfolio-project/
    method: GET
- name: Django Migrations 101
  endpoint:
    path: /courses/django-migrations-101/
    method: GET
- name: Digging Deeper Into Django Migrations
  endpoint:
    path: /digging-deeper-into-migrations/
    method: GET
- name: Build a Location-Based Web App With Django and GeoDjango
  endpoint:
    path: /courses/make-location-based-web-app-django-and-geodjango/
    method: GET
- name: Django Redirects
  endpoint:
    path: /courses/django-redirects/
    method: GET
- name: Working With JSON in Python
  endpoint:
    path: /courses/working-json-data-python/
    method: GET
- name: Building HTTP APIs With Django REST Framework
  endpoint:
    path: /courses/django-rest-framework/
    method: GET
- name: Python REST APIs With Flask, Connexion, and SQLAlchemy – Part 1
  endpoint:
    path: /flask-connexion-rest-api/
    method: GET
- name: Python REST APIs With Flask, Connexion, and SQLAlchemy – Part 2
  endpoint:
    path: /flask-connexion-rest-api-part-2/
    method: GET
- name: Python REST APIs With Flask, Connexion, and SQLAlchemy – Part 3
  endpoint:
    path: /flask-connexion-rest-api-part-3/
    method: GET
- name: Build a JavaScript Front End for a Flask API
  endpoint:
    path: /flask-javascript-frontend-for-rest-api/
    method: GET
- name: Sending Emails Using Python
  endpoint:
    path: /courses/sending-emails-python/
    method: GET
- name: What You Need to Know to Manage Users in Django Admin
  endpoint:
    path: /manage-users-in-django-admin/
    method: GET
- name: Django Admin Customization
  endpoint:
    path: /courses/django-admin-customization/
    method: GET
- name: pprint
  endpoint:
    path: /pprint
    method: GET
    data_selector: records
    params: {}
- name: 'Getting Started With Django: Building a Portfolio App'
  endpoint:
    path: /courses/django-portfolio-project/
    method: GET
- name: Building a Django User Management System
  endpoint:
    path: /courses/building-a-django-user-management-system/
    method: GET
- name: 'Django View Authorization: Restricting Access'
  endpoint:
    path: /courses/django-view-authorization/
    method: GET
- name: Structuring a Python Application
  endpoint:
    path: /courses/structuring-python-application/
    method: GET
- name: Django Migrations 101
  endpoint:
    path: /courses/django-migrations-101/
    method: GET
- name: Digging Deeper Into Django Migrations
  endpoint:
    path: /digging-deeper-into-migrations/
    method: GET
- name: Build a Location-Based Web App With Django and GeoDjango
  endpoint:
    path: /courses/make-location-based-web-app-django-and-geodjango/
    method: GET
- name: How to Provide Test Fixtures for Django Models in Pytest
  endpoint:
    path: /django-pytest-fixtures/
    method: GET
- name: Django Redirects
  endpoint:
    path: /courses/django-redirects/
    method: GET
- name: Modeling Polymorphism in Django With Python
  endpoint:
    path: /modeling-polymorphism-django-python/
    method: GET
- name: What You Need to Know to Manage Users in Django Admin
  endpoint:
    path: /manage-users-in-django-admin/
    method: GET
- name: Django Admin Customization
  endpoint:
    path: /courses/django-admin-customization/
    method: GET
- name: How to Create an Index in Django Without Downtime
  endpoint:
    path: /create-django-index-without-downtime/
    method: GET
- name: How to Write an Installable Django App
  endpoint:
    path: /installable-django-app/
    method: GET
- name: How to Move a Django Model to Another App
  endpoint:
    path: /move-django-model/
    method: GET
- name: Building HTTP APIs With Django REST Framework
  endpoint:
    path: /courses/django-rest-framework/
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Dog
  endpoint:
    path: /tutorials/object-oriented-programming/dog
    method: GET
    data_selector: objects
    params: {}
- name: print_tutorial
  endpoint:
    path: /tutorials/python-print/
    method: GET
    data_selector: content
    params: {}
- name: Dog
  endpoint:
    path: /Dog
    method: GET
    data_selector: attributes
- name: functional_programming
  endpoint:
    path: /tutorials/python-functional-programming
    method: GET
    data_selector: content
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: bulk-crap-uninstaller
  endpoint:
    path: /packages/bulk-crap-uninstaller
    method: GET
    data_selector: records
- name: powershell-core
  endpoint:
    path: /packages/powershell-core
    method: GET
    data_selector: records
- name: 7zip
  endpoint:
    path: /packages/7zip
    method: GET
    data_selector: records
- name: install_script
  endpoint:
    path: /install.ps1
    method: GET
    data_selector: script
    params: {}
- name: package_search
  endpoint:
    path: /packages
    method: GET
    data_selector: packages
    params: {}
- name: install_7zip
  endpoint:
    path: /7zip/install
    method: POST
    data_selector: install_result
    params: {}
- name: install_bulk_crap_uninstaller
  endpoint:
    path: /bulk-crap-uninstaller/install
    method: POST
    data_selector: install_result
    params: {}
- name: install_winaero_tweaker
  endpoint:
    path: /winaero-tweaker/install
    method: POST
    data_selector: install_result
    params: {}
- name: install_dependencies_linux
  endpoint:
    path: /install/linux
    method: POST
    data_selector: response
    params: {}
- name: install_dependencies_mac
  endpoint:
    path: /install/mac
    method: POST
    data_selector: response
    params: {}
- name: install_pyenv
  endpoint:
    path: /install/pyenv
    method: POST
    data_selector: response
    params: {}
- name: install_pyenv_win
  endpoint:
    path: /install/pyenv-win
    method: POST
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: windows_installation
  endpoint:
    path: /install/windows
    method: GET
    data_selector: installation_steps
    params: {}
- name: macos_installation
  endpoint:
    path: /install/macos
    method: GET
    data_selector: installation_steps
    params: {}
- name: linux_installation
  endpoint:
    path: /install/linux
    method: GET
    data_selector: installation_steps
    params: {}
- name: ios_installation
  endpoint:
    path: /install/ios
    method: GET
    data_selector: installation_steps
    params: {}
- name: android_installation
  endpoint:
    path: /install/android
    method: GET
    data_selector: installation_steps
    params: {}
- name: print_function
  endpoint:
    path: /tutorials/python/print
    method: GET
    data_selector: content
    params: {}
- name: countdown
  endpoint:
    path: /countdown
    method: GET
    data_selector: output
    params: {}
- name: macOS Official Installer
  endpoint:
    path: /downloads/mac-osx/
    method: GET
    data_selector: install_steps
    params: {}
- name: macOS Homebrew Installer
  endpoint:
    path: /install/mac-osx/
    method: GET
    data_selector: install_steps
    params: {}
- name: Linux Installation
  endpoint:
    path: /install/linux/
    method: GET
    data_selector: install_steps
    params: {}
- name: iOS Pythonista App
  endpoint:
    path: /install/ios/
    method: GET
    data_selector: install_steps
    params: {}
- name: Android Pydroid 3
  endpoint:
    path: /install/android/
    method: GET
    data_selector: install_steps
    params: {}
- name: Online Python Playground
  endpoint:
    path: /playground/
    method: GET
    data_selector: tools
    params: {}
- name: print_overview
  endpoint:
    path: /tutorials/python-print/
    method: GET
    data_selector: content
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: print_function
  endpoint:
    path: /python/print-function
    method: GET
    data_selector: content
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: countdown
  endpoint:
    path: /countdown
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: print_job
  endpoint:
    path: /v1/print_jobs
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: settings
  endpoint:
    path: /config
    method: GET
    data_selector: parameters
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Circle
  endpoint:
    path: /circle
    method: GET
    data_selector: instances
- name: Python Keywords
  endpoint:
    path: /keywords/python
    method: GET
    data_selector: keywords
    params: {}
- name: basic_data_types
  endpoint:
    path: /python-data-types
    method: GET
    data_selector: data_types
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Car
  endpoint:
    path: /car
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: SampleClass
  endpoint:
    path: __dict__
    method: GET
    data_selector: __dict__
    params: {}
- name: Car
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Employee
  endpoint:
    path: /employee
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: SampleClass
  endpoint:
    path: /SampleClass/__dict__
    method: GET
    data_selector: __dict__
    params: {}
- name: Car
  endpoint:
    path: /car
    method: GET
    data_selector: records
- name: Employee
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: args_kwargs
  endpoint:
    path: /using_keyword_arguments
    method: GET
    data_selector: examples
    params: {}
- name: positional_only_arguments
  endpoint:
    path: /positional_only_arguments
    method: GET
    data_selector: examples
    params: {}
- name: keyword_only_arguments
  endpoint:
    path: /keyword_only_arguments
    method: GET
    data_selector: examples
    params: {}
- name: unpacking_iterable
  endpoint:
    path: /unpacking_iterable
    method: GET
    data_selector: examples
    params: {}
- name: unpacking_keyword_arguments
  endpoint:
    path: /unpacking_keyword_arguments
    method: GET
    data_selector: examples
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: modules
  endpoint:
    path: /modules
    method: GET
    data_selector: modules
    params: {}
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: packages
    params: {}
- name: modules
  endpoint:
    path: /modules
    method: GET
    data_selector: modules
    params: {}
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: packages
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: structure
  endpoint:
    path: /structure
    method: GET
    data_selector: files
- name: circle
  endpoint:
    path: /circle
    method: GET
    data_selector: attributes
    params: {}
- name: car
  endpoint:
    path: /car
    method: GET
    data_selector: attributes
    params: {}
- name: modules
  endpoint:
    path: /tutorials/python/modules
    method: GET
    data_selector: modules
- name: packages
  endpoint:
    path: /tutorials/python/packages
    method: GET
    data_selector: packages
- name: dynamic_imports
  endpoint:
    path: /tutorials/python/dynamic-imports
    method: GET
    data_selector: dynamic_imports
- name: import_system
  endpoint:
    path: /tutorials/python/import-system
    method: GET
    data_selector: import_system
- name: import_tips
  endpoint:
    path: /tutorials/python/import-tips
    method: GET
    data_selector: import_tips
- name: files
  endpoint:
    path: structure/files.py
    method: IMPORT
    data_selector: functions
    params: {}
- name: structure
  endpoint:
    path: structure/structure.py
    method: IMPORT
    data_selector: functions
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: setup_config
  endpoint:
    path: /setup.cfg
    method: GET
    data_selector: metadata
    params: {}
- name: setup_py
  endpoint:
    path: /setup.py
    method: GET
    data_selector: scripts
    params: {}
- name: Circle
  endpoint:
    path: /tutorials/python/classes
    method: GET
    data_selector: circle_data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: SampleClass
  endpoint:
    path: /SampleClass
    method: GET
    data_selector: __dict__
- name: Car
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: population_data
  endpoint:
    path: /data/WPP2019_TotalPopulationBySex.csv
    method: GET
    data_selector: rows
    params: {}
- name: SampleClass
  endpoint:
    path: /SampleClass
    method: GET
    data_selector: __dict__
- name: Car
  endpoint:
    path: /services/data/vXX.X/sobjects/Car
    method: GET
    data_selector: records
- name: import
  endpoint:
    path: import
    method: GET
    data_selector: module
    params: {}
- name: employee
  endpoint:
    path: /api/v1/employees
    method: GET
    data_selector: records
    params: {}
- name: json_serializer
  endpoint:
    path: /serializers/json
    method: GET
    data_selector: JsonSerializer
    params: {}
- name: xml_serializer
  endpoint:
    path: /serializers/xml
    method: GET
    data_selector: XmlSerializer
    params: {}
- name: yaml_serializer
  endpoint:
    path: /serializers/yaml
    method: GET
    data_selector: YamlSerializer
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Circle
  endpoint:
    path: /circle
    method: GET
    data_selector: attributes
    params: {}
- name: SampleClass
  endpoint:
    path: /SampleClass/__dict__
    method: GET
    data_selector: __dict__
    params: {}
- name: Employee
  endpoint:
    path: /employee
    method: GET
    data_selector: records
    params: {}
- name: ThreeDPoint
  endpoint:
    path: /three_d_point
    method: GET
    data_selector: records
    params: {}
- name: WeekDay
  endpoint:
    path: /week_day
    method: GET
    data_selector: records
    params: {}
- name: module
  endpoint:
    path: /import/module
    method: GET
    data_selector: module_info
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: modules
  endpoint:
    path: /modules
    method: GET
    data_selector: records
    params: {}
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: records
    params: {}
- name: dynamic_imports
  endpoint:
    path: /dynamic_imports
    method: GET
    data_selector: records
    params: {}
- name: module_doc
  endpoint:
    path: /module/doc
    method: GET
    data_selector: doc
- name: csv_importer
  endpoint:
    path: /csv_importer
    method: GET
    data_selector: records
- name: debug_importer
  endpoint:
    path: /debug_importer
    method: GET
    data_selector: records
- name: ban_importer
  endpoint:
    path: /ban_importer
    method: GET
    data_selector: records
- name: pip_importer
  endpoint:
    path: /pip_importer
    method: GET
    data_selector: records
- name: modules
  endpoint:
    path: /modules
    method: GET
    data_selector: records
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: records
- name: structure
  endpoint:
    path: /structure/structure.py
    method: GET
    data_selector: records
- name: structure
  endpoint:
    path: /structure/structure.py
    method: GET
- name: files
  endpoint:
    path: /structure/files.py
    method: GET
- name: setup.cfg
  endpoint:
    path: /setup.cfg
    method: GET
    data_selector: metadata
    params: {}
- name: setup.py
  endpoint:
    path: /setup.py
    method: GET
    data_selector: metadata
    params: {}
- name: structure
  endpoint:
    path: /structure
    method: GET
    data_selector: files
    params: {}
- name: population_data
  endpoint:
    path: /data/WPP2019_TotalPopulationBySex.csv
    method: GET
    data_selector: rows
    params: {}
- name: modules
  endpoint:
    path: /modules
    method: GET
    data_selector: records
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: records
- name: basic_python_import
  endpoint:
    path: /basic-python-import
    method: GET
    data_selector: records
    params: {}
- name: resource_imports
  endpoint:
    path: /resource-imports
    method: GET
    data_selector: records
    params: {}
- name: dynamic_imports
  endpoint:
    path: /dynamic-imports
    method: GET
    data_selector: records
    params: {}
- name: python_import_system
  endpoint:
    path: /python-import-system
    method: GET
    data_selector: records
    params: {}
- name: import_tips_and_tricks
  endpoint:
    path: /import-tips-and-tricks
    method: GET
    data_selector: records
    params: {}
- name: import_module
  endpoint:
    path: input
    method: GET
    data_selector: module object
    params: {}
- name: json
  endpoint:
    path: /serializers/json
    method: GET
- name: xml
  endpoint:
    path: /serializers/xml
    method: GET
- name: yaml
  endpoint:
    path: /serializers/yaml
    method: GET
- name: module
  endpoint:
    path: /module
    method: GET
    data_selector: modules
    params: {}
- name: plugin
  endpoint:
    path: /plugin
    method: GET
    data_selector: plugins
    params: {}
- name: modules
  endpoint:
    path: /tutorials/python/import
    method: GET
    data_selector: modules
- name: packages
  endpoint:
    path: /tutorials/python/packages
    method: GET
    data_selector: packages
- name: dynamic_imports
  endpoint:
    path: /tutorials/python/dynamic-imports
    method: GET
    data_selector: dynamic_imports
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: population_data
  endpoint:
    path: /WPP2019_TotalPopulationBySex.csv
    method: GET
    data_selector: rows
- name: module
  endpoint:
    path: /import_module
    method: GET
    data_selector: module_details
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: population_data
  endpoint:
    path: /data/population
    method: GET
    data_selector: records
    params: {}
- name: module
  endpoint:
    path: /module
    method: GET
    data_selector: module_data
- name: colorama_mock
  endpoint:
    path: /optional/color
    method: GET
    data_selector: mock
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: modules
  endpoint:
    path: /modules
    method: GET
    data_selector: records
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: records
- name: dynamic_imports
  endpoint:
    path: /dynamic_imports
    method: GET
    data_selector: records
- name: import_system
  endpoint:
    path: /import_system
    method: GET
    data_selector: records
- name: import_tips
  endpoint:
    path: /import_tips
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: population_data
  endpoint:
    path: /data/WPP2019_TotalPopulationBySex.csv
    method: GET
    data_selector: rows
    params: {}
- name: gui_resources
  endpoint:
    path: /hello_gui/gui_resources
    method: GET
    data_selector: images
    params: {}
- name: creating_strings
  endpoint:
    path: /tutorials/api/creating_strings
    method: GET
    data_selector: content
    params: {}
- name: standard_string_literals
  endpoint:
    path: /tutorials/api/standard_string_literals
    method: GET
    data_selector: content
    params: {}
- name: escape_sequences
  endpoint:
    path: /tutorials/api/escape_sequences
    method: GET
    data_selector: content
    params: {}
- name: raw_string_literals
  endpoint:
    path: /tutorials/api/raw_string_literals
    method: GET
    data_selector: content
    params: {}
- name: formatted_string_literals
  endpoint:
    path: /tutorials/api/formatted_string_literals
    method: GET
    data_selector: content
    params: {}
- name: built_in_str_function
  endpoint:
    path: /tutorials/api/built_in_str_function
    method: GET
    data_selector: content
    params: {}
- name: plugins
  endpoint:
    path: /plugins
    method: GET
    data_selector: plugins_list
- name: greeter
  endpoint:
    path: /greeter
    method: GET
    data_selector: greetings_list
- name: modules
  endpoint:
    path: /modules
    method: GET
    data_selector: records
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: records
- name: list
  endpoint:
    path: /list
    method: GET
    data_selector: items
- name: employees
  endpoint:
    path: employees.csv
    method: GET
    data_selector: data
    params: {}
- name: basic_import
  endpoint:
    path: /tutorials/basic-python-import
    method: GET
    data_selector: content
    params: {}
- name: resource_imports
  endpoint:
    path: /tutorials/resource-imports
    method: GET
    data_selector: content
    params: {}
- name: dynamic_imports
  endpoint:
    path: /tutorials/dynamic-imports
    method: GET
    data_selector: content
    params: {}
- name: import_system
  endpoint:
    path: /tutorials/python-import-system
    method: GET
    data_selector: content
    params: {}
- name: import_tips
  endpoint:
    path: /tutorials/import-tips-and-tricks
    method: GET
    data_selector: content
    params: {}
- name: set_comprehensions
  endpoint:
    path: /set_comprehensions
    method: GET
    data_selector: set_comprehension_examples
- name: common_set_operations
  endpoint:
    path: /common_set_operations
    method: GET
    data_selector: common_operations_examples
- name: public_interfaces
  endpoint:
    path: /public/interfaces
    method: GET
    data_selector: records
- name: naming_conventions
  endpoint:
    path: /naming/conventions
    method: GET
    data_selector: records
- name: math_related_functions
  endpoint:
    path: /math-related-functions
    method: GET
    data_selector: functions
    params: {}
- name: Format Numbers
  endpoint:
    path: /format/numbers
    method: GET
    data_selector: examples
    params: {}
- name: Complex Numbers
  endpoint:
    path: /complex/numbers
    method: GET
    data_selector: examples
    params: {}
- name: absolute_value
  endpoint:
    path: /abs
    method: GET
    data_selector: results
    params: {}
- name: divmod_function
  endpoint:
    path: /divmod
    method: GET
    data_selector: results
    params: {}
- name: min_max_functions
  endpoint:
    path: /min_max
    method: GET
    data_selector: results
    params: {}
- name: pow_function
  endpoint:
    path: /pow
    method: GET
    data_selector: results
    params: {}
- name: round_function
  endpoint:
    path: /round
    method: GET
    data_selector: results
    params: {}
- name: sum_function
  endpoint:
    path: /sum
    method: GET
    data_selector: results
    params: {}
- name: int_function
  endpoint:
    path: /int
    method: GET
    data_selector: results
    params: {}
- name: bin_function
  endpoint:
    path: /bin
    method: GET
    data_selector: results
    params: {}
- name: oct_function
  endpoint:
    path: /oct
    method: GET
    data_selector: results
    params: {}
- name: hex_function
  endpoint:
    path: /hex
    method: GET
    data_selector: results
    params: {}
- name: float_function
  endpoint:
    path: /float
    method: GET
    data_selector: results
    params: {}
- name: complex_function
  endpoint:
    path: /complex
    method: GET
    data_selector: results
    params: {}
- name: str_function
  endpoint:
    path: /str
    method: GET
    data_selector: results
    params: {}
- name: repr_function
  endpoint:
    path: /repr
    method: GET
    data_selector: results
    params: {}
- name: bool_function
  endpoint:
    path: /bool
    method: GET
    data_selector: results
    params: {}
- name: ord_function
  endpoint:
    path: /ord
    method: GET
    data_selector: results
    params: {}
- name: chr_function
  endpoint:
    path: /chr
    method: GET
    data_selector: results
    params: {}
- name: bytes_function
  endpoint:
    path: /bytes
    method: GET
    data_selector: results
    params: {}
- name: bytearray_function
  endpoint:
    path: /bytearray
    method: GET
    data_selector: results
    params: {}
- name: Creating Strings
  endpoint:
    path: /tutorials/python/creating-strings
    method: GET
    data_selector: content
    params: {}
- name: escape_sequences
  endpoint:
    path: /escape_sequences
    method: GET
    data_selector: records
- name: raw_string_literals
  endpoint:
    path: /raw_string_literals
    method: GET
    data_selector: records
- name: formatted_string_literals
  endpoint:
    path: /formatted_string_literals
    method: GET
    data_selector: records
- name: string_processing_functions
  endpoint:
    path: /string_processing_functions
    method: GET
    data_selector: records
- name: all_function
  endpoint:
    path: /all
    method: GET
    data_selector: examples
- name: any_function
  endpoint:
    path: /any
    method: GET
    data_selector: examples
- name: range_function
  endpoint:
    path: /range
    method: GET
    data_selector: examples
- name: enumerate_function
  endpoint:
    path: /enumerate
    method: GET
    data_selector: examples
- name: zip_function
  endpoint:
    path: /zip
    method: GET
    data_selector: examples
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: list_operations
  endpoint:
    path: /tutorials/python/list
    method: GET
    data_selector: operations
- name: colors
  endpoint:
    path: /colors
    method: GET
    data_selector: records
- name: list_creation
  endpoint:
    path: /list_creation
    method: GET
    data_selector: examples
    params: {}
- name: list_access
  endpoint:
    path: /list_access
    method: GET
    data_selector: examples
    params: {}
- name: list_comprehensions
  endpoint:
    path: /list_comprehensions
    method: GET
    data_selector: examples
    params: {}
- name: GradeList
  endpoint:
    path: /grades
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: tuple_tutorial
  endpoint:
    path: /tutorials/python/tuple
    method: GET
    data_selector: content
    params: {}
- name: tuple_constructor
  endpoint:
    path: /tuple
    method: GET
    data_selector: examples
    params: {}
- name: tuple_indexing
  endpoint:
    path: /tuple/indexing
    method: GET
    data_selector: examples
    params: {}
- name: tuple_slicing
  endpoint:
    path: /tuple/slicing
    method: GET
    data_selector: examples
    params: {}
- name: tuple_immutability
  endpoint:
    path: /tuple/immutability
    method: GET
    data_selector: examples
    params: {}
- name: tuple_unpacking
  endpoint:
    path: /tuple/packing_unpacking
    method: GET
    data_selector: examples
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: set_comprehensions
  endpoint:
    path: /set_comprehensions
    method: GET
    data_selector: content
    params: {}
- name: common_set_operations
  endpoint:
    path: /common_set_operations
    method: GET
    data_selector: content
    params: {}
- name: augmented_set_operations
  endpoint:
    path: /augmented_set_operations
    method: GET
    data_selector: content
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: complex_number_literal
  endpoint:
    path: /tutorials/creating-complex-numbers-in-python
    method: GET
    data_selector: tutorials
    params: {}
- name: using_complex_numbers
  endpoint:
    path: /tutorials/getting-to-know-python-complex-numbers
    method: GET
    data_selector: tutorials
    params: {}
- name: complex_numbers
  endpoint:
    path: /complex/numbers
    method: GET
    data_selector: records
- name: constants
  endpoint:
    path: /math/constants
    method: GET
    data_selector: constants
    params: {}
- name: arithmetic_functions
  endpoint:
    path: /math/arithmetic
    method: GET
    data_selector: functions
    params: {}
- name: lists_and_tuples
  endpoint:
    path: /api/lists_and_tuples
    method: GET
    data_selector: data
    params: {}
- name: dictionaries
  endpoint:
    path: /api/dictionaries
    method: GET
    data_selector: data
    params: {}
- name: sets_and_frozen_sets
  endpoint:
    path: /api/sets_and_frozen_sets
    method: GET
    data_selector: data
    params: {}
- name: iterables_and_iterators
  endpoint:
    path: /api/iterables_and_iterators
    method: GET
    data_selector: data
    params: {}
- name: exponential_function
  endpoint:
    path: /math/exp
    method: GET
    data_selector: results
- name: logarithmic_function
  endpoint:
    path: /math/log
    method: GET
    data_selector: results
- name: getattr
  endpoint:
    path: /getattr
    method: GET
    data_selector: records
    params: {}
- name: setattr
  endpoint:
    path: /setattr
    method: GET
    data_selector: records
    params: {}
- name: delattr
  endpoint:
    path: /delattr
    method: GET
    data_selector: records
    params: {}
- name: math_related_functions
  endpoint:
    path: /functions/math
    method: GET
    data_selector: functions
    params: {}
- name: collection_data_types
  endpoint:
    path: /functions/collections
    method: GET
    data_selector: functions
    params: {}
- name: input_output_functions
  endpoint:
    path: /functions/input_output
    method: GET
    data_selector: functions
    params: {}
- name: examples
  endpoint:
    path: /examples
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: len_usage
  endpoint:
    path: /len-function
    method: GET
    data_selector: examples
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: sequence_iterator
  endpoint:
    path: /sequence_iter
    method: GET
    data_selector: data
    params: {}
- name: square_iterator
  endpoint:
    path: /square_iter
    method: GET
    data_selector: data
    params: {}
- name: fibonacci_iterator
  endpoint:
    path: /fib_iter
    method: GET
    data_selector: data
    params: {}
- name: infinite_fibonacci_iterator
  endpoint:
    path: /inf_fib
    method: GET
    data_selector: data
    params: {}
- name: CSVProcessor
  endpoint:
    path: /products.csv
    method: GET
    data_selector: records
    params: {}
- name: JSONProcessor
  endpoint:
    path: /products.json
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: string_formatting
  endpoint:
    path: /tutorials/python-string-formatting
    method: GET
    data_selector: content
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: pizza
  endpoint:
    path: /pizza
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Creating Complex Numbers in Python
  endpoint:
    path: /tutorials/python/creating-complex-numbers
    method: GET
    data_selector: content
    params: {}
- name: Getting to Know Python Complex Numbers
  endpoint:
    path: /tutorials/python/getting-to-know-python-complex-numbers
    method: GET
    data_selector: content
    params: {}
- name: Complex Numbers Arithmetic
  endpoint:
    path: /tutorials/python/complex-numbers-arithmetic
    method: GET
    data_selector: content
    params: {}
- name: Using Python Complex Numbers as 2D Vectors
  endpoint:
    path: /tutorials/python/using-python-complex-numbers-as-2d-vectors
    method: GET
    data_selector: content
    params: {}
- name: 'Exploring the Math Module for Complex Numbers: cmath'
  endpoint:
    path: /tutorials/python/exploring-the-math-module-for-complex-numbers-cmath
    method: GET
    data_selector: content
    params: {}
- name: Dissecting a Complex Number in Python
  endpoint:
    path: /tutorials/python/dissecting-a-complex-number-in-python
    method: GET
    data_selector: content
    params: {}
- name: Calculating the Discrete Fourier Transform With Complex Numbers
  endpoint:
    path: /tutorials/python/calculating-the-discrete-fourier-transform-with-complex-numbers
    method: GET
    data_selector: content
    params: {}
- name: public_methods
  endpoint:
    path: /public_methods
    method: GET
    data_selector: methods
    params: {}
- name: supported_operators
  endpoint:
    path: /supported_operators
    method: GET
    data_selector: operators
    params: {}
- name: polar_coordinates
  endpoint:
    path: /polar
    method: GET
    data_selector: coordinates
- name: rectangular_coordinates
  endpoint:
    path: /rectangular
    method: GET
    data_selector: coordinates
- name: assignment_statements
  endpoint:
    path: /tutorials/python/assignment-operator
    method: GET
    data_selector: content
    params: {}
- name: exponential_function
  endpoint:
    path: /math/exp
    method: GET
    data_selector: results
    params: {}
- name: logarithmic_function
  endpoint:
    path: /math/log
    method: GET
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: string_concatenation
  endpoint:
    path: /efficient-string-concatenation
    method: GET
    data_selector: tutorials
- name: concatenation_examples
  endpoint:
    path: /examples/string/concatenation
    method: GET
    data_selector: examples
    params: {}
- name: array
  endpoint:
    path: /array
    method: GET
    data_selector: array_items
    params: {}
- name: built_in_sequences
  endpoint:
    path: /len/built-in/sequences
    method: GET
    data_selector: items
- name: built_in_collections
  endpoint:
    path: /len/built-in/collections
    method: GET
    data_selector: items
- name: third_party_types
  endpoint:
    path: /len/third-party/types
    method: GET
    data_selector: items
- name: SomeClass
  endpoint:
    path: /path/to/someclass
    method: GET
    data_selector: records
- name: Point
  endpoint:
    path: /path/to/point
    method: GET
    data_selector: records
- name: A
  endpoint:
    path: /path/to/a
    method: GET
    data_selector: records
- name: B
  endpoint:
    path: /path/to/b
    method: GET
    data_selector: records
- name: class_constructor
  endpoint:
    path: /python-class-constructor
    method: GET
    data_selector: content
    params: {}
- name: sequence_iterator
  endpoint:
    path: /3/glossary.html#term-sequence
    method: GET
    data_selector: sequence_iterator
    params: {}
- name: fibonacci_iterator
  endpoint:
    path: /fibonacci-sequence-python/
    method: GET
    data_selector: fibonacci_iterator
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Iterable
  endpoint:
    path: /iterable/protocol
    method: GET
    data_selector: records
- name: OrderedDict
  endpoint:
    path: /api/ordereddict
    method: GET
    data_selector: items
- name: numbers
  endpoint:
    path: /collections/OrderedDict/numbers
    method: GET
    data_selector: items
    params: {}
- name: Queue
  endpoint:
    path: /queue
    method: GET
    data_selector: items
    params: {}
- name: namedtuple
  endpoint:
    path: /tutorials/namedtuple
    method: GET
    data_selector: records
- name: deque
  endpoint:
    path: /tutorials/deque
    method: GET
    data_selector: records
- name: defaultdict
  endpoint:
    path: /tutorials/defaultdict
    method: GET
    data_selector: records
- name: OrderedDict
  endpoint:
    path: /tutorials/OrderedDict
    method: GET
    data_selector: records
- name: Counter
  endpoint:
    path: /tutorials/Counter
    method: GET
    data_selector: records
- name: ChainMap
  endpoint:
    path: /tutorials/ChainMap
    method: GET
    data_selector: records
- name: ChainMap
  endpoint:
    path: /chainmap
    method: GET
    data_selector: records
- name: UserString
  endpoint:
    path: /userstring
    method: GET
    data_selector: records
- name: UserList
  endpoint:
    path: /userlist
    method: GET
    data_selector: records
- name: UserDict
  endpoint:
    path: /userdict
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: bytearray
  endpoint:
    path: /bytearray
    method: GET
    data_selector: records
- name: bytearray
  endpoint:
    path: /tutorials/python/bytearray
    method: GET
    data_selector: content
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: mutable_sequence_operations
  endpoint:
    path: /mutable/sequence/operations
    method: GET
    data_selector: operations
    params: {}
- name: byte_specific_operations
  endpoint:
    path: /byte/specific/operations
    method: GET
    data_selector: operations
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Point
  endpoint:
    path: /point
    method: GET
    data_selector: records
- name: A and B Classes
  endpoint:
    path: /ab_classes
    method: GET
    data_selector: records
- name: hello_world
  endpoint:
    path: /hello
    method: GET
    data_selector: message
- name: QHBoxLayout
  endpoint:
    path: /api/qhboxlayout
    method: GET
    data_selector: records
    params: {}
- name: QVBoxLayout
  endpoint:
    path: /api/qvboxlayout
    method: GET
    data_selector: records
    params: {}
- name: QGridLayout
  endpoint:
    path: /api/qgridlayout
    method: GET
    data_selector: records
    params: {}
- name: QFormLayout
  endpoint:
    path: /api/qformlayout
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: return_statement
  endpoint:
    path: /tutorials/python-return-statement
    method: GET
    data_selector: content
- name: queue
  endpoint:
    path: /queue
    method: POST
    data_selector: items
- name: deque
  endpoint:
    path: /collections/deque
    method: GET
    data_selector: records
- name: defaultdict
  endpoint:
    path: /collections/defaultdict
    method: GET
    data_selector: records
- name: namedtuple
  endpoint:
    path: /collections/namedtuple
    method: GET
    data_selector: records
- name: OrderedDict
  endpoint:
    path: /collections/OrderedDict
    method: GET
    data_selector: records
- name: Counter
  endpoint:
    path: /collections/Counter
    method: GET
    data_selector: records
- name: ChainMap
  endpoint:
    path: /collections/ChainMap
    method: GET
    data_selector: records
- name: UserDict
  endpoint:
    path: /collections/UserDict
    method: GET
    data_selector: records
- name: UserList
  endpoint:
    path: /collections/UserList
    method: GET
    data_selector: records
- name: UserString
  endpoint:
    path: /collections/UserString
    method: GET
    data_selector: records
- name: OrderedDict
  endpoint:
    path: /collections/OrderedDict
    method: GET
    data_selector: examples
    params: {}
- name: Counter
  endpoint:
    path: /collections/Counter
    method: GET
    data_selector: examples
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: dictionary_iteration
  endpoint:
    path: /iterate-through-dictionary-python
    method: GET
    data_selector: tutorials
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PlatformException
  endpoint:
    path: /linux_interaction
    method: GET
    data_selector: traceback
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: employee
  endpoint:
    path: /load/employee.py
    method: GET
    data_selector: contents
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: 'Python while Loops: Repeating Tasks Conditionally'
  endpoint:
    path: /quizzes/python-while-loop/
    method: GET
- name: gist
  endpoint:
    path: /gists
    method: POST
    data_selector: html_url
    params: {}
- name: QApplication
  endpoint:
    path: /QApplication
    method: GET
    data_selector: instance
- name: QWidget
  endpoint:
    path: /QWidget
    method: GET
    data_selector: instance
- name: QLabel
  endpoint:
    path: /QLabel
    method: GET
    data_selector: instance
- name: QPushButton
  endpoint:
    path: /QPushButton
    method: GET
    data_selector: instance
- name: QLineEdit
  endpoint:
    path: /QLineEdit
    method: GET
    data_selector: instance
- name: QComboBox
  endpoint:
    path: /QComboBox
    method: GET
    data_selector: instance
- name: QRadioButton
  endpoint:
    path: /QRadioButton
    method: GET
    data_selector: instance
- name: main_window_example
  endpoint:
    path: /main_window
    method: GET
    data_selector: components
    params: {}
- name: signals_slots_example
  endpoint:
    path: /signals_slots
    method: GET
    data_selector: examples
    params: {}
- name: better-defaults
  endpoint:
    path: /better-defaults
    method: GET
    data_selector: records
    params: {}
- name: material-theme
  endpoint:
    path: /material-theme
    method: GET
    data_selector: records
    params: {}
- name: elpy
  endpoint:
    path: /elpy
    method: GET
    data_selector: records
    params: {}
- name: flycheck
  endpoint:
    path: /flycheck
    method: GET
    data_selector: records
    params: {}
- name: py-autopep8
  endpoint:
    path: /py-autopep8
    method: GET
    data_selector: records
    params: {}
- name: blacken
  endpoint:
    path: /blacken
    method: GET
    data_selector: records
    params: {}
- name: PyCalc
  endpoint:
    path: /pycalc
    method: GET
    data_selector: app
    params: {}
- name: elpy
  endpoint:
    path: /elpy
    method: GET
    data_selector: records
- name: ein
  endpoint:
    path: /ein
    method: GET
    data_selector: records
- name: magit
  endpoint:
    path: /magit
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: factorial
  endpoint:
    path: /factorial
    method: POST
    data_selector: result
    params: {}
- name: simplecalculator
  endpoint:
    path: /pypi/simplecalculator
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: clipboard_data
  endpoint:
    path: /read_clipboard
    method: GET
    data_selector: data
    params: {}
- name: asyncio_overview
  endpoint:
    path: /asyncio/overview
    method: GET
    data_selector: overview
    params: {}
- name: asyncio_patterns
  endpoint:
    path: /asyncio/patterns
    method: GET
    data_selector: patterns
    params: {}
- name: coroutine_example
  endpoint:
    path: /coroutine/example
    method: GET
    data_selector: records
- name: file_navigation
  endpoint:
    path: /navigate/file
    method: GET
    data_selector: commands
- name: bookmarking_directories
  endpoint:
    path: /bookmark/directories
    method: GET
    data_selector: commands
- name: loading_file_inputs
  endpoint:
    path: /load/file
    method: GET
    data_selector: commands
- name: listing_variables
  endpoint:
    path: /list/variables
    method: GET
    data_selector: commands
- name: clearing_variables
  endpoint:
    path: /clear/variables
    method: GET
    data_selector: commands
- name: scanning_code_history
  endpoint:
    path: /history/scanning
    method: GET
    data_selector: commands
- name: salary_increment
  endpoint:
    path: /services/data/vXX.X/sobjects/salary_increment
    method: GET
    data_selector: records
    params: {}
- name: employee_birthday
  endpoint:
    path: employee_birthday.csv
    method: GET
    data_selector: records
    params: {}
- name: employee_file
  endpoint:
    path: employee_file.csv
    method: POST
    data_selector: records
    params: {}
- name: employee_file2
  endpoint:
    path: employee_file2.csv
    method: POST
    data_selector: records
    params: {}
- name: hrdata
  endpoint:
    path: /hrdata.csv
    method: GET
    data_selector: records
    params: {}
- name: swimmers
  endpoint:
    path: /swimmers.csv
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /swimmers.csv
    method: GET
    data_selector: records
    params: {}
- name: cards
  endpoint:
    path: /cards
    method: GET
    data_selector: deck
    params: {}
- name: swimmers
  endpoint:
    path: /swimmers.csv
    method: GET
    data_selector: records
- name: prices
  endpoint:
    path: /SP500.csv
    method: GET
    data_selector: records
    params: {}
- name: grouper
  endpoint:
    path: /recipes/grouper
    method: GET
    data_selector: records
    params: {}
- name: zip
  endpoint:
    path: /recipes/zip
    method: GET
    data_selector: records
    params: {}
- name: daily_price_data
  endpoint:
    path: /SP500.csv
    method: GET
    data_selector: rows
    params: {}
- name: prices
  endpoint:
    path: /SP500.csv
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /swimmers.csv
    method: GET
    data_selector: records
    params: {}
- name: myPackages
  endpoint:
    path: /packages
    method: GET
    data_selector: packages
    params: {}
- name: path_operations
  endpoint:
    path: /path/operations
    method: GET
    data_selector: operations
    params: {}
- name: re_module
  endpoint:
    path: /re/
    method: GET
    data_selector: regexes
    params: {}
- name: installing_pycharm
  endpoint:
    path: /installing-pycharm
    method: GET
    data_selector: records
- name: writing_code
  endpoint:
    path: /writing-code-in-pycharm
    method: GET
    data_selector: records
- name: running_code
  endpoint:
    path: /running-code-in-pycharm
    method: GET
    data_selector: records
- name: debugging
  endpoint:
    path: /debugging-in-pycharm
    method: GET
    data_selector: records
- name: unit_tests
  endpoint:
    path: /testing/unit_tests
    method: GET
    data_selector: tests
    params: {}
- name: version_control
  endpoint:
    path: /vcs/integration
    method: GET
    data_selector: vc_features
    params: {}
- name: plugins
  endpoint:
    path: /plugins/marketplace
    method: GET
    data_selector: plugin_list
    params: {}
- name: magic_number
  endpoint:
    path: /magic_number
    method: GET
    data_selector: number
- name: reaction_game
  endpoint:
    path: /reaction_game
    method: POST
    data_selector: result
- name: Tkinter
  endpoint:
    path: /tutorials/gui/
    method: GET
    data_selector: widgets
    params: {}
- name: label
  endpoint:
    path: /label
    method: GET
    data_selector: text
    params: {}
- name: button
  endpoint:
    path: /button
    method: GET
    data_selector: text
    params: {}
- name: entry
  endpoint:
    path: /entry
    method: GET
    data_selector: text
    params: {}
- name: Text Widget
  endpoint:
    path: /text_widget
    method: GET
    data_selector: records
    params: {}
- name: Frame Widget
  endpoint:
    path: /frame_widget
    method: GET
    data_selector: records
    params: {}
- name: Label
  endpoint:
    path: /Label
    method: GET
    data_selector: widget
    params: {}
- name: Button
  endpoint:
    path: /Button
    method: GET
    data_selector: widget
    params: {}
- name: Entry
  endpoint:
    path: /Entry
    method: GET
    data_selector: widget
    params: {}
- name: Text
  endpoint:
    path: /Text
    method: GET
    data_selector: widget
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: grid
  endpoint:
    path: /geometry/grid
    method: GET
    data_selector: widgets
    params: {}
- name: Label
  endpoint:
    path: /Label
    method: GET
    data_selector: widgets
    params: {}
- name: Button
  endpoint:
    path: /Button
    method: GET
    data_selector: widgets
    params: {}
- name: Entry
  endpoint:
    path: /Entry
    method: GET
    data_selector: widgets
    params: {}
- name: Text
  endpoint:
    path: /Text
    method: GET
    data_selector: widgets
    params: {}
- name: code_formatting
  endpoint:
    path: /docs/ruff/formatting
    method: GET
    data_selector: content
- name: code_linting
  endpoint:
    path: /docs/ruff/linting
    method: GET
    data_selector: content
- name: frame_widget
  endpoint:
    path: /widgets/frame
    method: GET
    data_selector: widgets
    params: {}
- name: label_widget
  endpoint:
    path: /widgets/label
    method: GET
    data_selector: widgets
    params: {}
- name: button_widget
  endpoint:
    path: /widgets/button
    method: GET
    data_selector: widgets
    params: {}
- name: entry_widget
  endpoint:
    path: /widgets/entry
    method: GET
    data_selector: widgets
    params: {}
- name: text_widget
  endpoint:
    path: /widgets/text
    method: GET
    data_selector: widgets
    params: {}
- name: Tkinter
  endpoint:
    path: /tutorials/gui/
    method: GET
    data_selector: widgets
    params: {}
- name: Label
  endpoint:
    path: /widgets/Label
    method: GET
    data_selector: text
    params: {}
- name: Button
  endpoint:
    path: /widgets/Button
    method: GET
    data_selector: text
    params: {}
- name: Entry
  endpoint:
    path: /widgets/Entry
    method: GET
    data_selector: text
    params: {}
- name: Text
  endpoint:
    path: /widgets/Text
    method: GET
    data_selector: text
    params: {}
- name: frame_widget
  endpoint:
    path: /widgets/frame
    method: GET
    data_selector: widgets
    params: {}
- name: frame
  endpoint:
    path: /frame
    method: CREATE
    data_selector: widgets
    params:
      width: 150
      height: 150
- name: label
  endpoint:
    path: /label
    method: CREATE
    data_selector: widgets
    params:
      text: I'm at (0, 0)
      bg: red
      position:
        x: 0
        y: 0
- name: label
  endpoint:
    path: /label
    method: CREATE
    data_selector: widgets
    params:
      text: I'm at (75, 75)
      bg: yellow
      position:
        x: 75
        y: 75
- name: employee_birthday
  endpoint:
    path: /employee_birthday.csv
    method: GET
    data_selector: rows
    params: {}
- name: address_entry_form
  endpoint:
    path: /address_entry_form
    method: GET
    data_selector: form_fields
    params: {}
- name: hrdata
  endpoint:
    path: /hrdata.csv
    method: GET
    data_selector: records
    params: {}
- name: temperature_conversion
  endpoint:
    path: /temperature/conversion
    method: POST
    data_selector: result
- name: grouper
  endpoint:
    path: /itertools/grouper
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: unittest_tests
  endpoint:
    path: /unittest/tests
    method: GET
    data_selector: tests
    params: {}
- name: cards
  endpoint:
    path: /cards
    method: GET
    data_selector: deck
    params: {}
- name: swimmers
  endpoint:
    path: /swimmers.csv
    method: GET
    data_selector: rows
- name: game
  endpoint:
    path: /game
    method: POST
    data_selector: result
    params: {}
- name: SP500
  endpoint:
    path: /quote/%5EGSPC
    method: GET
    data_selector: historical data
    params: {}
- name: test_case
  endpoint:
    path: /test_case
    method: GET
    data_selector: records
- name: grouper
  endpoint:
    path: /library/itertools.html#itertools-recipes
    method: GET
    data_selector: recipes
    params: {}
- name: TestIntegerList
  endpoint:
    path: /test_integer_list
    method: GET
    data_selector: records
- name: TestRockPaperScissors
  endpoint:
    path: /test_rock_paper_scissors
    method: GET
    data_selector: records
- name: calculations
  endpoint:
    path: /calculations
    method: GET
    data_selector: records
- name: prices
  endpoint:
    path: /read_prices
    method: GET
    data_selector: DataPoint
    params: {}
- name: test_case
  endpoint:
    path: /test_case
    method: GET
    data_selector: tests
    params: {}
- name: test_suite
  endpoint:
    path: /test_suite
    method: GET
    data_selector: suites
    params: {}
- name: test_fixture
  endpoint:
    path: /test_fixture
    method: GET
    data_selector: fixtures
    params: {}
- name: events
  endpoint:
    path: /swimmers.csv
    method: GET
    data_selector: records
    params: {}
- name: TestCollections
  endpoint:
    path: /test_collections
    method: GET
    data_selector: tests
    params: {}
- name: TestMembership
  endpoint:
    path: /test_membership
    method: GET
    data_selector: tests
    params: {}
- name: TestVehicles
  endpoint:
    path: /test_vehicles
    method: GET
    data_selector: tests
    params: {}
- name: TestIsPrime
  endpoint:
    path: /test_prime_v2
    method: GET
    data_selector: tests
    params: {}
- name: TestCalculations
  endpoint:
    path: /test_calculations
    method: GET
    data_selector: tests
    params: {}
- name: arithmetic_tests
  endpoint:
    path: /test/arithmetic
    method: GET
- name: dog_data
  endpoint:
    path: /hello_frieda.json
    method: GET
    data_selector: dog_data
    params: {}
- name: rock_paper_scissors_tests
  endpoint:
    path: /tests/rock_paper_scissors
    method: GET
    data_selector: tests
    params: {}
- name: Path
  endpoint:
    path: /pathlib
    method: GET
    data_selector: records
- name: shopping_list
  endpoint:
    path: /shopping_list.md
    method: GET
    data_selector: content
    params: {}
- name: regex_matching
  endpoint:
    path: /regexes-in-python
    method: GET
    data_selector: tutorials
    params: {}
- name: requests
  endpoint:
    path: /pypi/requests/json
    method: GET
    data_selector: info
- name: rptree
  endpoint:
    path: /pypi/rptree/json
    method: GET
    data_selector: info
- name: codetiming
  endpoint:
    path: /pypi/codetiming/json
    method: GET
    data_selector: info
- name: requirements_dev
  endpoint:
    path: /requirements_dev.txt
    method: GET
    data_selector: records
    params: {}
- name: requirements
  endpoint:
    path: /requirements.txt
    method: GET
    data_selector: records
    params: {}
- name: requirements_lock
  endpoint:
    path: /requirements_lock.txt
    method: GET
    data_selector: records
    params: {}
- name: cats
  endpoint:
    path: /v1/breeds
    method: GET
    data_selector: breeds
- name: rpcats
  endpoint:
    path: /services/data/vXX.X/sobjects/rpcats
    method: GET
    data_selector: records
    params: {}
- name: rpcats
  endpoint:
    path: /legacy/
    method: POST
- name: uv
  endpoint:
    path: /uv/management
    method: GET
    data_selector: metrics
    params: {}
- name: pip
  endpoint:
    path: /pip/management
    method: GET
    data_selector: metrics
    params: {}
- name: label
  endpoint:
    path: /label
    method: GET
    data_selector: text
    params: {}
- name: button
  endpoint:
    path: /button
    method: GET
    data_selector: text
    params: {}
- name: entry
  endpoint:
    path: /entry
    method: GET
    data_selector: text
    params: {}
- name: feed
  endpoint:
    path: /feed
    method: GET
- name: Text Widget
  endpoint:
    path: /widgets/text
    method: GET
    data_selector: methods
    params: {}
- name: Frame Widget
  endpoint:
    path: /widgets/frame
    method: GET
    data_selector: methods
    params: {}
- name: reader
  endpoint:
    path: /atom.xml
    method: GET
    data_selector: records
    params: {}
- name: Label
  endpoint:
    path: /Label
    method: GET
    data_selector: text
    params: {}
- name: Button
  endpoint:
    path: /Button
    method: GET
    data_selector: text
    params: {}
- name: Entry
  endpoint:
    path: /Entry
    method: GET
    data_selector: text
    params: {}
- name: Text
  endpoint:
    path: /Text
    method: GET
    data_selector: text
    params: {}
- name: frame_widget
  endpoint:
    path: /frame_widget
    method: GET
    data_selector: widgets
    params: {}
- name: feed
  endpoint:
    path: /atom.xml
    method: GET
    data_selector: feed
- name: entry_widget
  endpoint:
    path: /widgets/entry
    method: POST
    data_selector: widgets
    params:
      width: 40
      bg: white
      fg: black
      text: What is your name?
- name: dependencies
  endpoint:
    path: /dependencies
    method: GET
    data_selector: records
    params: {}
- name: optional-dependencies
  endpoint:
    path: /optional-dependencies
    method: GET
    data_selector: records
    params: {}
- name: Tkinter Introduction
  endpoint:
    path: /tutorials/gui/
    method: GET
    data_selector: content
    params: {}
- name: Tkinter Widgets
  endpoint:
    path: /tutorials/gui/#working-with-widgets
    method: GET
    data_selector: widgets
    params: {}
- name: Label
  endpoint:
    path: /Label
    method: GET
    data_selector: records
- name: Button
  endpoint:
    path: /Button
    method: GET
    data_selector: records
- name: Entry
  endpoint:
    path: /Entry
    method: GET
    data_selector: records
- name: Text
  endpoint:
    path: /Text
    method: GET
    data_selector: records
- name: tutorials
  endpoint:
    path: /atom.xml
    method: GET
    data_selector: feed
    params: {}
- name: feed
  endpoint:
    path: /atom.xml
    method: GET
    data_selector: entries
- name: frame
  endpoint:
    path: /create_frame
    method: POST
- name: label
  endpoint:
    path: /create_label
    method: POST
- name: entry
  endpoint:
    path: /create_entry
    method: POST
- name: dist
  endpoint:
    path: /realpython-reader-1.0.0-py3-none-any.whl
    method: GET
- name: dist
  endpoint:
    path: /realpython-reader-1.0.0.tar.gz
    method: GET
- name: realpython
  endpoint:
    path: /realpython-reader
    method: GET
    data_selector: records
- name: postal_code
  endpoint:
    path: /postal_code
    method: POST
    data_selector: postal_code_data
- name: country
  endpoint:
    path: /country
    method: POST
    data_selector: country_data
- name: nba_results
  endpoint:
    path: /fivethirtyeight/data/master/nba-elo/nbaallelo.csv
    method: GET
    data_selector: data
    params: {}
- name: Label
  endpoint:
    path: /label
    method: GET
    data_selector: records
- name: Button
  endpoint:
    path: /button
    method: GET
    data_selector: records
- name: Entry
  endpoint:
    path: /entry
    method: GET
    data_selector: records
- name: Text
  endpoint:
    path: /text
    method: GET
    data_selector: records
- name: nba
  endpoint:
    path: /nba/data
    method: GET
    data_selector: records
    params: {}
- name: nba_stats
  endpoint:
    path: /nba/stats
    method: GET
    data_selector: data
    params: {}
- name: frame
  endpoint:
    path: /frame
    method: CREATE
    data_selector: properties
    params:
      width: 150
      height: 150
- name: label
  endpoint:
    path: /label
    method: CREATE
    data_selector: properties
    params:
      text: I'm at (0, 0)
      bg: red
- name: label2
  endpoint:
    path: /label
    method: CREATE
    data_selector: properties
    params:
      text: I'm at (75, 75)
      bg: yellow
- name: course_overview
  endpoint:
    path: /courses/python-for-beginners
    method: GET
    data_selector: course_details
- name: temperature_conversion
  endpoint:
    path: /convert
    method: POST
    data_selector: result
    params: {}
- name: TestCase
  endpoint:
    path: /unittest/TestCase
    method: GET
    data_selector: methods
    params: {}
- name: TestSuite
  endpoint:
    path: /unittest/TestSuite
    method: GET
    data_selector: methods
    params: {}
- name: Introduction
  endpoint:
    path: /introduction
    method: GET
    data_selector: content
- name: Setting Up Python
  endpoint:
    path: /setting-up-python
    method: GET
    data_selector: content
- name: Your First Python Program
  endpoint:
    path: /your-first-python-program
    method: GET
    data_selector: content
- name: Strings and Methods
  endpoint:
    path: /strings-and-methods
    method: GET
    data_selector: content
- name: Numbers in Python
  endpoint:
    path: /numbers-in-python
    method: GET
    data_selector: content
- name: Functions and Loops
  endpoint:
    path: /functions-and-loops
    method: GET
    data_selector: content
- name: Finding and Fixing Code Bugs
  endpoint:
    path: /finding-and-fixing-code-bugs
    method: GET
    data_selector: content
- name: Conditional Logic and Control Flow
  endpoint:
    path: /conditional-logic-and-control-flow
    method: GET
    data_selector: content
- name: Tuples, Lists, and Dictionaries
  endpoint:
    path: /tuples-lists-dictionaries
    method: GET
    data_selector: content
- name: Object-Oriented Programming
  endpoint:
    path: /object-oriented-programming
    method: GET
    data_selector: content
- name: Modules and Packages
  endpoint:
    path: /modules-and-packages
    method: GET
    data_selector: content
- name: File Input and Output
  endpoint:
    path: /file-input-output
    method: GET
    data_selector: content
- name: Installing Packages With Pip
  endpoint:
    path: /installing-packages-with-pip
    method: GET
    data_selector: content
- name: Creating and Modifying PDF Files
  endpoint:
    path: /creating-modifying-pdf-files
    method: GET
    data_selector: content
- name: Working With Databases
  endpoint:
    path: /working-with-databases
    method: GET
    data_selector: content
- name: Interacting With the Web
  endpoint:
    path: /interacting-with-the-web
    method: GET
    data_selector: content
- name: Scientific Computing and Graphing
  endpoint:
    path: /scientific-computing-graphing
    method: GET
    data_selector: content
- name: Graphical User Interfaces
  endpoint:
    path: /graphical-user-interfaces
    method: GET
    data_selector: content
- name: Final Thoughts and Next Steps
  endpoint:
    path: /final-thoughts-next-steps
    method: GET
    data_selector: content
- name: arithmetic_tests
  endpoint:
    path: /tests/arithmetic
    method: GET
- name: rock_paper_scissors
  endpoint:
    path: /rock_paper_scissors
    method: POST
    data_selector: result
    params: {}
- name: is_weekday
  endpoint:
    path: /is_weekday
    method: GET
    data_selector: result
    params: {}
- name: math_module
  endpoint:
    path: /python/math
    method: GET
    data_selector: functions
    params: {}
- name: Namespaces
  endpoint:
    path: /tutorials/python/namespaces
    method: GET
    data_selector: content
- name: What's New in Python 3.14
  endpoint:
    path: /courses/whats-new-python-314/
    method: GET
- name: Exploring REPL Features
  endpoint:
    path: /videos/exploring-repl-features/
    method: GET
- name: Improving Error Messages
  endpoint:
    path: /videos/improving-error-messages/
    method: GET
- name: Adding Syntax
  endpoint:
    path: /lessons/adding-syntax/
    method: GET
- name: Dealing With Numbers
  endpoint:
    path: /lessons/dealing-with-numbers/
    method: GET
- name: Using functools.Placeholder
  endpoint:
    path: /lessons/using-functoolsplaceholder/
    method: GET
- name: Introducing Python T-Strings
  endpoint:
    path: /lessons/314-introducing-t-strings/
    method: GET
- name: Miscellaneous
  endpoint:
    path: /lessons/miscellaneous/
    method: GET
- name: What's New in Python 3.14 (Summary)
  endpoint:
    path: /lessons/whats-new-python-314-summary/
    method: GET
- name: requests
  endpoint:
    path: /project/requests/
    method: GET
    data_selector: metadata
    params: {}
- name: requirements
  endpoint:
    path: /requirements/
    method: GET
    data_selector: requirements_list
    params: {}
- name: tutorials
  endpoint:
    path: /installable-django-app/
    method: GET
    data_selector: tutorials
    params: {}
- name: courses
  endpoint:
    path: /courses/whats-new-python-314/
    method: GET
    data_selector: courses
    params: {}
- name: breeds
  endpoint:
    path: /breeds
    method: GET
    data_selector: breeds
    params: {}
- name: rpcats
  endpoint:
    path: /rpcats
    method: GET
    data_selector: records
- name: tutorials
  endpoint:
    path: /tutorials
    method: GET
    data_selector: resources
    params: {}
- name: video_courses
  endpoint:
    path: /video_courses
    method: GET
    data_selector: resources
    params: {}
- name: quizzes
  endpoint:
    path: /quizzes
    method: GET
    data_selector: resources
    params: {}
- name: podcast_episodes
  endpoint:
    path: /podcasts
    method: GET
    data_selector: resources
    params: {}
- name: image
  endpoint:
    path: /image
    method: GET
    data_selector: image_data
    params: {}
- name: image_manipulation
  endpoint:
    path: /image/manipulation
    method: GET
    data_selector: records
    params: {}
- name: image_filters
  endpoint:
    path: /image/filters
    method: GET
    data_selector: records
    params: {}
- name: image_processing
  endpoint:
    path: /image_processing
    method: GET
    data_selector: images
    params: {}
- name: reader
  endpoint:
    path: /realpython-reader/
    method: GET
    data_selector: tutorials
    params: {}
- name: image_segmentation
  endpoint:
    path: /cat_segmented.jpg
    method: GET
    data_selector: image
- name: image_watermark
  endpoint:
    path: /cat_monastery_final.jpg
    method: GET
    data_selector: image
- name: image_animation
  endpoint:
    path: /animation.gif
    method: GET
    data_selector: image
- name: reader
  endpoint:
    path: /api/v1/reader
    method: GET
- name: job_listings
  endpoint:
    path: /fake-jobs/
    method: GET
    data_selector: job_postings
- name: job_postings
  endpoint:
    path: /fake-jobs/
    method: GET
    data_selector: ResultsContainer
    params: {}
- name: feed
  endpoint:
    path: /atom.xml
    method: GET
    data_selector: feed
- name: job_posting
  endpoint:
    path: /jobs
    method: GET
    data_selector: job_cards
    params: {}
- name: job_listings
  endpoint:
    path: /fake-jobs/
    method: GET
    data_selector: job_postings
- name: feed
  endpoint:
    path: /feed
    method: GET
    data_selector: entries
- name: job_postings
  endpoint:
    path: /
    method: GET
    data_selector: card-content
- name: dependencies
  endpoint:
    path: /dependencies
    method: GET
- name: optional-dependencies
  endpoint:
    path: /optional-dependencies
    method: GET
- name: feed
  endpoint:
    path: /atom.xml
    method: GET
    data_selector: feed
    params: {}
- name: train_test_split
  endpoint:
    path: /train_test_split
    method: GET
    data_selector: records
    params: {}
- name: realpython_reader
  endpoint:
    path: /dist/realpython_reader-1.0.0-py3-none-any.whl
    method: GET
- name: realpython_reader_source_archive
  endpoint:
    path: /dist/realpython-reader-1.0.0.tar.gz
    method: GET
- name: realpython-reader
  endpoint:
    path: /services/data/vXX.X/sobjects/realpython-reader
    method: GET
    data_selector: records
- name: nba_all_elo
  endpoint:
    path: /nbaallelo.csv
    method: GET
    data_selector: data
    params: {}
- name: games
  endpoint:
    path: /nba/games
    method: GET
    data_selector: records
- name: teams
  endpoint:
    path: /nba/teams
    method: GET
    data_selector: records
- name: nba
  endpoint:
    path: /nba
    method: GET
    data_selector: records
- name: python_source
  endpoint:
    path: /archive/refs/tags/v3.13.0rc1.zip
    method: GET
    data_selector: source_code
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: course_overview
  endpoint:
    path: /api/course_overview
    method: GET
    data_selector: data
    params: {}
- name: course_dates
  endpoint:
    path: /api/course_dates
    method: GET
    data_selector: dates
    params: {}
- name: jit_compiler
  endpoint:
    path: /services/data/vXX.X/sobjects/JitCompiler
    method: GET
    data_selector: records
- name: Python Basics
  endpoint:
    path: /python-basics
    method: GET
    data_selector: content
    params: {}
- name: greeter
  endpoint:
    path: /greeter
    method: GET
    data_selector: greeting
- name: tutorials
  endpoint:
    path: /tutorials
    method: GET
    data_selector: records
    params: {}
- name: contributed_tutorials
  endpoint:
    path: /contributed_tutorials
    method: GET
    data_selector: records
    params: {}
- name: fputs
  endpoint:
    path: /fputs
    method: POST
    data_selector: result
- name: get_number_of_titles
  endpoint:
    path: /tutorials/python/get_number_of_titles
    method: GET
    data_selector: records
- name: get_game_recommendation
  endpoint:
    path: /tutorials/python/get_game_recommendation
    method: GET
    data_selector: records
- name: find_keyword_in_titles
  endpoint:
    path: /tutorials/python/find_keyword_in_titles
    method: GET
    data_selector: records
- name: get_highest_stock_games
  endpoint:
    path: /tutorials/python/get_highest_stock_games
    method: GET
    data_selector: records
- name: Podcast Episodes
  endpoint:
    path: /podcasts/rpp/
    method: GET
- name: books
  endpoint:
    path: /books
    method: GET
    data_selector: books
    params:
      limit: optional
- name: book
  endpoint:
    path: /books/{book_id}
    method: GET
    data_selector: book
    params: {}
- name: create_book
  endpoint:
    path: /books
    method: POST
    data_selector: new_book
    params: {}
- name: python_news
  endpoint:
    path: /python-news-october-2025
    method: GET
    data_selector: articles
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: CUSTOMERS_TABLE
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: ORDERS_TABLE
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: PRODUCTS_TABLE
- name: tutorials
  endpoint:
    path: /tutorials
    method: GET
    data_selector: tutorials
    params: {}
- name: video_courses
  endpoint:
    path: /video_courses
    method: GET
    data_selector: video_courses
    params: {}
- name: quizzes
  endpoint:
    path: /quizzes
    method: GET
    data_selector: quizzes
    params: {}
- name: coding_challenges
  endpoint:
    path: /coding_challenges
    method: GET
    data_selector: coding_challenges
    params: {}
- name: podcast_episodes
  endpoint:
    path: /podcasts
    method: GET
    data_selector: podcast_episodes
    params: {}
- name: image_processing
  endpoint:
    path: /image-processing/
    method: GET
    data_selector: content
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: CUSTOMERS_TABLE
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: ORDERS_TABLE
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: PRODUCTS_TABLE
    params: {}
- name: Image Manipulation
  endpoint:
    path: /image/manipulation
    method: GET
    data_selector: records
- name: Image Filters
  endpoint:
    path: /image/filters
    method: GET
    data_selector: records
- name: image_processing
  endpoint:
    path: /image_processing
    method: POST
    data_selector: results
    params: {}
- name: get_customer_info
  endpoint:
    path: /get_customer_info
    method: POST
    data_selector: customer_info
- name: get_order_details
  endpoint:
    path: /get_order_details
    method: POST
    data_selector: order
- name: check_inventory
  endpoint:
    path: /check_inventory
    method: POST
    data_selector: matches
- name: get_customer_ids_by_name
  endpoint:
    path: /get_customer_ids_by_name
    method: POST
    data_selector: customer_ids
- name: get_orders_by_customer_id
  endpoint:
    path: /get_orders_by_customer_id
    method: POST
    data_selector: orders
- name: get_customer_info
  endpoint:
    path: /get_customer_info
    method: GET
- name: get_order_details
  endpoint:
    path: /get_order_details
    method: GET
- name: check_inventory
  endpoint:
    path: /check_inventory
    method: GET
- name: get_customer_ids_by_name
  endpoint:
    path: /get_customer_ids_by_name
    method: GET
- name: get_orders_by_customer_id
  endpoint:
    path: /get_orders_by_customer_id
    method: GET
- name: job_listings
  endpoint:
    path: /fake-jobs/
    method: GET
    data_selector: job_postings
- name: job_postings
  endpoint:
    path: /fake-jobs/
    method: GET
    data_selector: results
    params: {}
- name: job_postings
  endpoint:
    path: /jobs
    method: GET
    data_selector: results
- name: job_postings
  endpoint:
    path: /
    method: GET
    data_selector: job_postings
- name: train_test_split
  endpoint:
    path: /model_selection/train_test_split
    method: GET
    data_selector: function
    params: {}
- name: train_test_split
  endpoint:
    path: /train_test_split
    method: GET
    data_selector: records
    params: {}
- name: python_source_code
  endpoint:
    path: /archive/refs/tags/v3.13.0rc1.zip
    method: GET
    data_selector: source_code
    params: {}
- name: annotations_vs_type_hints
  endpoint:
    path: /annotations/vs/type/hints
    method: GET
    data_selector: content
- name: module_annotations
  endpoint:
    path: __annotations__
    method: GET
    data_selector: annotations
- name: function_annotations
  endpoint:
    path: __annotations__
    method: GET
    data_selector: annotations
- name: class_annotations
  endpoint:
    path: __annotations__
    method: GET
    data_selector: annotations
- name: greeter
  endpoint:
    path: /greeter
    method: IMPORT
    data_selector: greet
- name: CPython Source Code
  endpoint:
    path: /cpython-source-code
    method: GET
    data_selector: source_code
- name: Development Environment Setup
  endpoint:
    path: /development-environment
    method: GET
    data_selector: setup_guide
- name: Compiling CPython
  endpoint:
    path: /compiling-cpython
    method: GET
    data_selector: compilation_guide
- name: Memory Management
  endpoint:
    path: /memory-management
    method: GET
    data_selector: memory_management
- name: fputs
  endpoint:
    path: /fputs
    method: POST
    data_selector: result
    params: {}
- name: fputs
  endpoint:
    path: fputs
    method: POST
    data_selector: result
- name: Exceptions
  endpoint:
    path: /library/exceptions.html
    method: GET
    data_selector: ''
    params: {}
- name: books
  endpoint:
    path: /books
    method: GET
    data_selector: books
    params: {}
- name: book
  endpoint:
    path: /books/{book_id}
    method: GET
    data_selector: book
    params: {}
- name: create_book
  endpoint:
    path: /books
    method: POST
    data_selector: new_book
    params: {}
- name: customers
  endpoint:
    path: /CUSTOMERS_TABLE
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /ORDERS_TABLE
    method: GET
    data_selector: records
- name: products
  endpoint:
    path: /PRODUCTS_TABLE
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: CUSTOMERS_TABLE
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: ORDERS_TABLE
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: PRODUCTS_TABLE
    params: {}
- name: get_customer_info
  endpoint:
    path: /path/to/your/file/main.py
    method: GET
    data_selector: tools
    params: {}
- name: get_order_details
  endpoint:
    path: /path/to/your/file/main.py
    method: GET
    data_selector: tools
    params: {}
- name: check_inventory
  endpoint:
    path: /path/to/your/file/main.py
    method: GET
    data_selector: tools
    params: {}
- name: get_customer_ids_by_name
  endpoint:
    path: /path/to/your/file/main.py
    method: GET
    data_selector: tools
    params: {}
- name: get_orders_by_customer_id
  endpoint:
    path: /path/to/your/file/main.py
    method: GET
    data_selector: tools
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: author_book_publisher
  endpoint:
    path: /project/data/author_book_publisher.csv
    method: GET
    data_selector: data
    params: {}
- name: author
  endpoint:
    path: /author
    method: GET
    data_selector: records
- name: book
  endpoint:
    path: /book
    method: GET
    data_selector: records
- name: publisher
  endpoint:
    path: /publisher
    method: GET
    data_selector: records
- name: author
  endpoint:
    path: /author
    method: GET
    data_selector: records
- name: book
  endpoint:
    path: /book
    method: GET
    data_selector: records
- name: publisher
  endpoint:
    path: /publisher
    method: GET
    data_selector: records
- name: author_publisher
  endpoint:
    path: /author_publisher
    method: GET
    data_selector: records
- name: book_publisher
  endpoint:
    path: /book_publisher
    method: GET
    data_selector: records
- name: books_by_publisher
  endpoint:
    path: /get_books_by_publishers
    method: GET
    data_selector: total_books
    params:
      ascending: 'false'
- name: authors_by_publisher
  endpoint:
    path: /get_authors_by_publishers
    method: GET
    data_selector: total_authors
    params: {}
- name: hierarchical_authors
  endpoint:
    path: /get_authors
    method: GET
    data_selector: Author
    params: {}
- name: artists
  endpoint:
    path: /artists
    method: GET
    data_selector: artists
    params: {}
- name: Create Your First HTML File
  endpoint:
    path: /create-your-first-html-file
    method: GET
    data_selector: content
    params: {}
- name: Style Your Content With CSS
  endpoint:
    path: /style-your-content-with-css
    method: GET
    data_selector: content
    params: {}
- name: Handle HTML With Python
  endpoint:
    path: /handle-html-with-python
    method: GET
    data_selector: content
    params: {}
- name: index
  endpoint:
    path: index.html
    method: GET
    data_selector: body
- name: emoji
  endpoint:
    path: emoji.html
    method: GET
    data_selector: body
- name: gallery
  endpoint:
    path: images/gallery.html
    method: GET
    data_selector: body
- name: annotations
  endpoint:
    path: /python-annotations
    method: GET
    data_selector: content
    params: {}
- name: events
  endpoint:
    path: /repos/{org}/{repo}/events
    method: GET
    data_selector: '[]'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: interpret_code
  endpoint:
    path: /interpret
    method: POST
    data_selector: result
    params: {}
- name: events
  endpoint:
    path: /repos/{org}/{repo}/events
    method: GET
    data_selector: '[]'
- name: ImportError
  endpoint:
    path: /library/exceptions.html#ImportError
    method: GET
    data_selector: exceptions
    params: {}
- name: ModuleNotFoundError
  endpoint:
    path: /library/exceptions.html#ModuleNotFoundError
    method: GET
    data_selector: exceptions
    params: {}
- name: NameError
  endpoint:
    path: /library/exceptions.html#name-errors-nameerror
    method: GET
    data_selector: exceptions
    params: {}
- name: AttributeError
  endpoint:
    path: /library/exceptions.html#attributeerror
    method: GET
    data_selector: exceptions
    params: {}
- name: IndexError
  endpoint:
    path: /library/exceptions.html#indexerror
    method: GET
    data_selector: exceptions
    params: {}
- name: KeyError
  endpoint:
    path: /library/exceptions.html#keyerror
    method: GET
    data_selector: exceptions
    params: {}
- name: ZeroDivisionError
  endpoint:
    path: /library/exceptions.html#zerodivisionerror
    method: GET
    data_selector: exceptions
    params: {}
- name: TypeError
  endpoint:
    path: /library/exceptions.html#typeerror
    method: GET
    data_selector: exceptions
    params: {}
- name: ValueError
  endpoint:
    path: /library/exceptions.html#valueerror
    method: GET
    data_selector: exceptions
    params: {}
- name: interpret
  endpoint:
    path: /interpret
    method: POST
    data_selector: result
- name: events
  endpoint:
    path: /repos/{org}/{repo}/events
    method: GET
    data_selector: '[]'
    params: {}
- name: raising_exceptions
  endpoint:
    path: /tutorials/python-raise-exception/
    method: GET
    data_selector: content
    params: {}
- name: events
  endpoint:
    path: /repos/{org}/{repo}/events
    method: GET
    data_selector: '[]'
- name: command
  endpoint:
    path: /interpret
    method: POST
    data_selector: result
- name: events
  endpoint:
    path: /repos/{org}/{repo}/events
    method: GET
    data_selector: '[]'
    params: {}
- name: InvalidPasswordError
  endpoint:
    path: InvalidPasswordError
    method: N/A
    data_selector: N/A
    params: {}
- name: ShortPasswordError
  endpoint:
    path: ShortPasswordError
    method: N/A
    data_selector: N/A
    params: {}
- name: NoNumbersInPasswordError
  endpoint:
    path: NoNumbersInPasswordError
    method: N/A
    data_selector: N/A
    params: {}
- name: NoSpecialInPasswordError
  endpoint:
    path: NoSpecialInPasswordError
    method: N/A
    data_selector: N/A
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: expression_statement
  endpoint:
    path: /python/expression_statement
    method: GET
    data_selector: content
    params: {}
- name: pure_statement
  endpoint:
    path: /python/pure_statement
    method: GET
    data_selector: content
    params: {}
- name: events
  endpoint:
    path: /repos/{org}/{repo}/events
    method: GET
    data_selector: events
- name: author_book_publisher
  endpoint:
    path: /author_book_publisher.csv
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: command
  endpoint:
    path: /commands
    method: POST
    data_selector: response
    params: {}
- name: author
  endpoint:
    path: /author
    method: GET
    data_selector: records
- name: book
  endpoint:
    path: /book
    method: GET
    data_selector: records
- name: publisher
  endpoint:
    path: /publisher
    method: GET
    data_selector: records
- name: author
  endpoint:
    path: /author
    method: GET
    data_selector: records
- name: book
  endpoint:
    path: /book
    method: GET
    data_selector: records
- name: publisher
  endpoint:
    path: /publisher
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: books_by_publisher
  endpoint:
    path: /get_books_by_publishers
    method: GET
    data_selector: books
    params: {}
- name: authors_by_publisher
  endpoint:
    path: /get_authors_by_publishers
    method: GET
    data_selector: authors
    params: {}
- name: authors
  endpoint:
    path: /get_authors
    method: GET
    data_selector: authors
    params: {}
- name: events
  endpoint:
    path: /repos/{org}/{repo}/events
    method: GET
    data_selector: '[]'
- name: HTML and CSS for Python Developers
  endpoint:
    path: /courses/html-css-foundations/
    method: GET
    data_selector: content
    params: {}
- name: index
  endpoint:
    path: /index.html
    method: GET
    data_selector: body
- name: emoji
  endpoint:
    path: /emoji.html
    method: GET
    data_selector: body
- name: gallery
  endpoint:
    path: /images/gallery.html
    method: GET
    data_selector: body
- name: index
  endpoint:
    path: index.html
    method: GET
- name: style
  endpoint:
    path: style.css
    method: GET
- name: gallery
  endpoint:
    path: images/gallery.html
    method: GET
- name: emoji
  endpoint:
    path: emoji.html
    method: GET
- name: context_management
  endpoint:
    path: /testing/context_management
    method: GET
    data_selector: examples
    params: {}
- name: exception_handling
  endpoint:
    path: /testing/exception_handling
    method: GET
    data_selector: examples
    params: {}
- name: REST API Overview
  endpoint:
    path: /interacting-rest-apis-python/overview
    method: GET
- name: Consuming APIs
  endpoint:
    path: /interacting-rest-apis-python/consuming-apis
    method: GET
- name: Building REST APIs
  endpoint:
    path: /interacting-rest-apis-python/building-rest-apis
    method: GET
- name: What Are CRUD Operations?
  endpoint:
    path: /crud-operations/
    method: GET
- name: Interacting With REST APIs and Python
  endpoint:
    path: /courses/interacting-rest-apis-python/
    method: GET
- name: Exploring HTTPS and Cryptography in Python
  endpoint:
    path: /courses/exploring-https-cryptography/
    method: GET
- name: Programming Sockets in Python
  endpoint:
    path: /courses/programming-sockets/
    method: GET
- name: bird
  endpoint:
    path: /birds
    method: GET
    data_selector: Bird
    params: {}
- name: delete_bird
  endpoint:
    path: /birds/{bird_id}
    method: DELETE
    data_selector: message
- name: events
  endpoint:
    path: /repos/{org}/{repo}/events
    method: GET
    data_selector: events
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: todos
  endpoint:
    path: /todos
    method: GET
    data_selector: data
    params: {}
- name: todos
  endpoint:
    path: /todos
    method: PUT
    data_selector: todos
    params: {}
- name: events
  endpoint:
    path: /repos/{org}/{repo}/events
    method: GET
    data_selector: '[].type'
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: list of countries
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: records
    params: {}
- name: command
  endpoint:
    path: /interpret
    method: POST
    data_selector: output
    params: {}
- name: countries
  endpoint:
    path: /api/countries/
    method: GET
    data_selector: results
    params: {}
- name: events
  endpoint:
    path: /repos/{org}/{repo}/events
    method: GET
    data_selector: '[*]'
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: countries
- name: countries
  endpoint:
    path: /countries
    method: POST
    data_selector: countries
    params: {}
- name: events
  endpoint:
    path: /repos/{org}/{repo}/events
    method: GET
    data_selector: events
    params: {}
- name: Build a GUI Calculator With PyQt and Python
  endpoint:
    path: /courses/build-gui-calculator-pyqt/
    method: GET
    data_selector: lessons
    params: {}
- name: command
  endpoint:
    path: /command
    method: GET
    data_selector: records
- name: Getting Started
  endpoint:
    path: /courses/building-gui-application-tkinter/continue/
    method: GET
    data_selector: lessons
    params: {}
- name: Working With Widgets
  endpoint:
    path: /courses/building-gui-application-tkinter/continue/
    method: GET
    data_selector: lessons
    params: {}
- name: Controlling Layout
  endpoint:
    path: /courses/building-gui-application-tkinter/continue/
    method: GET
    data_selector: lessons
    params: {}
- name: Adding Interactivity
  endpoint:
    path: /courses/building-gui-application-tkinter/continue/
    method: GET
    data_selector: lessons
    params: {}
- name: Creating Apps
  endpoint:
    path: /courses/building-gui-application-tkinter/continue/
    method: GET
    data_selector: lessons
    params: {}
- name: game_engine
  endpoint:
    path: /courses/python-tic-tac-toe-ai/
    method: GET
    data_selector: lessons
    params: {}
- name: events
  endpoint:
    path: /repos/{org}/{repo}/events
    method: GET
    data_selector: '[]'
    params: {}
- name: Getting to Know min() and max()
  endpoint:
    path: /courses/python-min-max/continue/
    method: GET
    data_selector: lessons
- name: Coding Practical min() and max() Examples
  endpoint:
    path: /lessons/min-max-in-action/
    method: GET
    data_selector: lessons
- name: Diving Deeper Into min() and max()
  endpoint:
    path: /lessons/lt-gt-min-max/
    method: GET
    data_selector: lessons
- name: first_match_tutorial
  endpoint:
    path: /courses/python-first-match/
    method: GET
    data_selector: lessons
    params: {}
- name: Getting the Most Out of the Python Standard REPL
  endpoint:
    path: /courses/python-repl/continue/
    method: GET
    data_selector: lessons
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /repos/{org}/{repo}/events
    method: GET
    data_selector: '[]'
- name: Manipulating ZIP Files
  endpoint:
    path: /videos/zipfile-python-overview/
    method: GET
- name: Getting Started With ZIP Files
  endpoint:
    path: /videos/start-zip-files-python/
    method: GET
- name: Manipulating Existing ZIP Files
  endpoint:
    path: /lessons/manipulate-zip-files-python/
    method: GET
- name: Reading Information From ZIP Files
  endpoint:
    path: /lessons/read-zip-files-python/
    method: GET
- name: Using Other Methods to Open and Read Member Files
  endpoint:
    path: /lessons/open-and-read-member-zip-files/
    method: GET
- name: Extracting Member Files and Closing ZIP Files
  endpoint:
    path: /lessons/extract-member-files-and-close/
    method: GET
- name: Creating and Populating ZIP Files
  endpoint:
    path: /lessons/create-and-populate-zip-files/
    method: GET
- name: Compressing and Extracting Member Files
  endpoint:
    path: /lessons/compress-and-extract-member-files/
    method: GET
- name: Exploring Additional Classes From zipfile
  endpoint:
    path: /lessons/additional-classes-zipfile/
    method: GET
- name: Running zipfile From the Command Line
  endpoint:
    path: /lessons/zipfile-from-command-line/
    method: GET
- name: Using Other Libraries to Manage ZIP Files
  endpoint:
    path: /lessons/zip-file-libraries-python/
    method: GET
- name: Manipulating ZIP Files With Python (Summary)
  endpoint:
    path: /lessons/zipfile-python-summary/
    method: GET
- name: Getters and Setters in Python (Overview)
  endpoint:
    path: /videos/getters-and-setters-overview/
    method: GET
- name: Getter and Setter Methods
  endpoint:
    path: /videos/getter-and-setter-methods/
    method: GET
- name: Using Properties Instead of Getters and Setters
  endpoint:
    path: /lessons/using-properties-instead-of-getters-and-setters/
    method: GET
- name: Replacing Getters and Setters With More Advanced Tools
  endpoint:
    path: /lessons/replacing-with-advanced-tools/
    method: GET
- name: Choosing Between Getters and Setters or Properties
  endpoint:
    path: /lessons/choosing-getters-setters-properties/
    method: GET
- name: Getters and Setters in Python (Quiz)
  endpoint:
    path: /lessons/getters-and-setters-in-python-quiz/
    method: GET
- name: Getters and Setters in Python (Summary)
  endpoint:
    path: /lessons/getters-and-setters-in-python-summary/
    method: GET
- name: events
  endpoint:
    path: /repos/python/cpython/events
    method: GET
    data_selector: '[]'
- name: game_play
  endpoint:
    path: /play_game
    method: POST
    data_selector: game_status
    params: {}
- name: URL
  endpoint:
    path: /api/urls
    method: POST
    data_selector: data
    params: {}
- name: Managing Attributes With Python's property()
  endpoint:
    path: /courses/property-python/continue/
    method: GET
    data_selector: lessons
    params: {}
- name: context_manager
  endpoint:
    path: /managing-external-resources
    method: GET
    data_selector: resource_details
- name: Speech Recognition With Python
  endpoint:
    path: /courses/speech-recognition-python/
    method: GET
    data_selector: lessons
- name: simplify_python_gui
  endpoint:
    path: /courses/simplify-gui-dev-pysimplegui/
    method: GET
    data_selector: lessons
    params: {}
- name: 'Django View Authorization: Restricting Access'
  endpoint:
    path: /videos/django-view-auth-overview/
    method: GET
- name: Python Turtle for Beginners
  endpoint:
    path: /courses/python-turtle-beginners/
    method: GET
    data_selector: lessons
    params: {}
- name: StandardOutputRedirector
  endpoint:
    path: /redirect
    method: POST
    data_selector: output
    params: {}
- name: Timer
  endpoint:
    path: /timer
    method: GET
    data_selector: elapsed_time
    params: {}
- name: Indenter
  endpoint:
    path: /indenter
    method: PUT
    data_selector: indented_text
    params: {}
- name: Getting Started With MicroPython
  endpoint:
    path: /courses/getting-started-micropython/
    method: GET
- name: basic_data_types
  endpoint:
    path: /courses/python-data-types/
    method: GET
    data_selector: lessons
    params: {}
- name: beginner_tips
  endpoint:
    path: /courses/python-beginner-tips/
    method: GET
    data_selector: lessons
    params: {}
- name: concurrency_overview
  endpoint:
    path: /tutorials/api/concurrency_overview
    method: GET
    data_selector: content
    params: {}
- name: io_bound_program
  endpoint:
    path: /tutorials/api/io_bound_program
    method: GET
    data_selector: content
    params: {}
- name: cpu_bound_program
  endpoint:
    path: /tutorials/api/cpu_bound_program
    method: GET
    data_selector: content
    params: {}
- name: Installing Python on Windows
  endpoint:
    path: /lessons/installing-python-windows-pythonorg-installer/
    method: GET
    data_selector: ''
    params: {}
- name: Installing Python on Windows Using the Microsoft Store
  endpoint:
    path: /lessons/installing-python-windows-microsoft-store/
    method: GET
    data_selector: ''
    params: {}
- name: Installing Python on macOS
  endpoint:
    path: /lessons/installing-python-macos/
    method: GET
    data_selector: ''
    params: {}
- name: Installing Python on Ubuntu Linux 16.04
  endpoint:
    path: /lessons/installing-python-ubuntu-linux-1604/
    method: GET
    data_selector: ''
    params: {}
- name: Installing Python on Ubuntu Linux 18.04
  endpoint:
    path: /lessons/installing-python-ubuntu-linux-1804/
    method: GET
    data_selector: ''
    params: {}
- name: Installing Python on Ubuntu Linux 19.04
  endpoint:
    path: /lessons/installing-python-ubuntu-linux-1904/
    method: GET
    data_selector: ''
    params: {}
- name: 'Installing Python: Summary & Recap'
  endpoint:
    path: /lessons/installing-python-summary-recap/
    method: GET
    data_selector: ''
    params: {}
- name: Django Migrations 101
  endpoint:
    path: /courses/django-migrations-101/
    method: GET
- name: What Are CRUD Operations?
  endpoint:
    path: /crud-operations/
    method: GET
- name: Interacting With REST APIs and Python
  endpoint:
    path: /courses/interacting-rest-apis-python/
    method: GET
- name: Exploring HTTPS and Cryptography in Python
  endpoint:
    path: /courses/exploring-https-cryptography/
    method: GET
- name: Programming Sockets in Python
  endpoint:
    path: /courses/programming-sockets/
    method: GET
- name: Introduction to Python Exceptions
  endpoint:
    path: /courses/introduction-python-exceptions/
    method: GET
    data_selector: lessons
    params: {}
- name: birds
  endpoint:
    path: /birds/{bird_id}
    method: DELETE
    data_selector: message
    params: {}
- name: delete_bird
  endpoint:
    path: /birds/{bird_id}
    method: DELETE
    data_selector: message
    params: {}
- name: is_even
  endpoint:
    path: /is_even
    method: GET
    data_selector: records
- name: is_odd
  endpoint:
    path: /is_odd
    method: GET
    data_selector: records
- name: split_names_into_rows
  endpoint:
    path: /split_names_into_rows
    method: GET
    data_selector: records
- name: draw_with_cyclic_iteration
  endpoint:
    path: /draw_with_cyclic_iteration
    method: GET
    data_selector: records
- name: todos
  endpoint:
    path: /todos
    method: GET
    data_selector: records
- name: todos
  endpoint:
    path: /todos
    method: PUT
    data_selector: response
    params: {}
- name: cars
  endpoint:
    path: /cars
    method: GET
    data_selector: list
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Raspberry Pi Setup
  endpoint:
    path: /setting-up-the-raspberry-pi
    method: GET
    data_selector: setup_resources
    params: {}
- name: Raspberry Pi Hardware
  endpoint:
    path: /required-hardware
    method: GET
    data_selector: hardware_resources
    params: {}
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: list
- name: raspbian_installation
  endpoint:
    path: /documentation/installation/installing-images/README.md
    method: GET
    data_selector: instructions
    params: {}
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: records
- name: add_country
  endpoint:
    path: /countries
    method: POST
    data_selector: records
- name: button
  endpoint:
    path: /python-projects/button.py
    method: GET
    data_selector: button_press_events
    params: {}
- name: led
  endpoint:
    path: /python-projects/led.py
    method: GET
    data_selector: led_blink_events
    params: {}
- name: buzzer
  endpoint:
    path: /python-projects/buzzer.py
    method: GET
    data_selector: buzzer_beep_events
    params: {}
- name: motion_sensor
  endpoint:
    path: /python-projects/pir.py
    method: GET
    data_selector: motion_detection_events
    params: {}
- name: Country
  endpoint:
    path: /countries/
    method: GET
    data_selector: records
- name: detected_motion
  endpoint:
    path: detected_motion.csv
    method: GET
    data_selector: ''
    params: {}
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: records
    params: {}
- name: countries
  endpoint:
    path: /countries
    method: POST
    data_selector: response
    params: {}
- name: Getting Started
  endpoint:
    path: /courses/build-gui-calculator-pyqt/continue/
    method: GET
    data_selector: lessons
    params: {}
- name: Learning the Basics
  endpoint:
    path: /lessons/learning-basics-pyqt/
    method: GET
    data_selector: lessons
    params: {}
- name: Creating an App
  endpoint:
    path: /lessons/creating-calculator-app-pyqt/
    method: GET
    data_selector: lessons
    params: {}
- name: Getting Started
  endpoint:
    path: /courses/building-gui-application-tkinter/continue/
    method: GET
- name: Working With Widgets
  endpoint:
    path: /courses/building-gui-application-tkinter/continue/
    method: GET
- name: Controlling Layout
  endpoint:
    path: /courses/building-gui-application-tkinter/continue/
    method: GET
- name: Adding Interactivity
  endpoint:
    path: /courses/building-gui-application-tkinter/continue/
    method: GET
- name: Creating Apps
  endpoint:
    path: /courses/building-gui-application-tkinter/continue/
    method: GET
- name: tic_tac_toe_game_engine
  endpoint:
    path: /courses/python-tic-tac-toe-ai/
    method: GET
    data_selector: lessons
    params: {}
- name: Getting to Know min() and max()
  endpoint:
    path: /courses/python-min-max/continue/
    method: GET
    data_selector: lessons
- name: Coding Practical min() and max() Examples
  endpoint:
    path: /courses/python-min-max/continue/
    method: GET
    data_selector: lessons
- name: Diving Deeper Into min() and max()
  endpoint:
    path: /courses/python-min-max/continue/
    method: GET
    data_selector: lessons
- name: sentiment_analysis
  endpoint:
    path: /data/sentiment_analysis
    method: GET
    data_selector: sentences
    params: {}
- name: Getting the Most Out of the Python Standard REPL
  endpoint:
    path: /courses/python-repl/continue/
    method: GET
    data_selector: lessons
    params: {}
- name: neural_network
  endpoint:
    path: /models/sequential
    method: GET
    data_selector: records
    params: {}
- name: Manipulating ZIP Files With Python (Overview)
  endpoint:
    path: /videos/zipfile-python-overview/
    method: GET
- name: Getting Started With ZIP Files
  endpoint:
    path: /videos/start-zip-files-python/
    method: GET
- name: Manipulating Existing ZIP Files
  endpoint:
    path: /lessons/manipulate-zip-files-python/
    method: GET
- name: Reading Information From ZIP Files
  endpoint:
    path: /lessons/read-zip-files-python/
    method: GET
- name: Using Other Methods to Open and Read Member Files
  endpoint:
    path: /lessons/open-and-read-member-zip-files/
    method: GET
- name: Extracting Member Files and Closing ZIP Files
  endpoint:
    path: /lessons/extract-member-files-and-close/
    method: GET
- name: Creating and Populating ZIP Files
  endpoint:
    path: /lessons/create-and-populate-zip-files/
    method: GET
- name: Compressing and Extracting Member Files
  endpoint:
    path: /lessons/compress-and-extract-member-files/
    method: GET
- name: Exploring Additional Classes From zipfile
  endpoint:
    path: /lessons/additional-classes-zipfile/
    method: GET
- name: Running zipfile From the Command Line
  endpoint:
    path: /lessons/zipfile-from-command-line/
    method: GET
- name: Using Other Libraries to Manage ZIP Files
  endpoint:
    path: /lessons/zip-file-libraries-python/
    method: GET
- name: Manipulating ZIP Files With Python (Summary)
  endpoint:
    path: /lessons/zipfile-python-summary/
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Getters and Setters in Python (Overview)
  endpoint:
    path: /videos/getters-and-setters-overview/
    method: GET
- name: Getter and Setter Methods
  endpoint:
    path: /videos/getter-and-setter-methods/
    method: GET
- name: Using Properties Instead of Getters and Setters
  endpoint:
    path: /lessons/using-properties-instead-of-getters-and-setters/
    method: GET
- name: Replacing Getters and Setters With More Advanced Tools
  endpoint:
    path: /lessons/replacing-with-advanced-tools/
    method: GET
- name: Choosing Between Getters and Setters or Properties
  endpoint:
    path: /lessons/choosing-getters-setters-properties/
    method: GET
- name: Getters and Setters in Python (Quiz)
  endpoint:
    path: /lessons/getters-and-setters-in-python-quiz/
    method: GET
- name: Getters and Setters in Python (Summary)
  endpoint:
    path: /lessons/getters-and-setters-in-python-summary/
    method: GET
- name: buckets
  endpoint:
    path: /
    method: GET
    data_selector: Buckets
- name: objects
  endpoint:
    path: /{bucket_name}/{object_key}
    method: GET
    data_selector: Body
- name: bucket
  endpoint:
    path: /
    method: GET
    data_selector: buckets
- name: Kivy Widgets
  endpoint:
    path: /kivy/widgets
    method: GET
    data_selector: widgets
- name: User Interface
  endpoint:
    path: /kivy/ui
    method: GET
    data_selector: ui
- name: Events
  endpoint:
    path: /kivy/events
    method: GET
    data_selector: events
- name: KV Language
  endpoint:
    path: /kivy/kv
    method: GET
    data_selector: kv
- name: Calculator Application
  endpoint:
    path: /kivy/calculator
    method: GET
    data_selector: calculator
- name: Packaging
  endpoint:
    path: /kivy/packaging
    method: GET
    data_selector: packaging
- name: django_app
  endpoint:
    path: /deploy/django/app
    method: POST
    data_selector: deployment_status
    params: {}
- name: Building Python Project Documentation With MkDocs
  endpoint:
    path: /videos/build-project-docs-mkdocs-overview/
    method: GET
    data_selector: records
- name: Writing and Formatting Your Docstrings
  endpoint:
    path: /videos/write-format-your-docstrings/
    method: GET
    data_selector: records
- name: Preparing, Building, and Deploying Your Documentation
  endpoint:
    path: /lessons/preparing-documenation-mkdocs/
    method: GET
    data_selector: records
- name: url_shortener
  endpoint:
    path: /url-shortener
    method: POST
    data_selector: data
    params: {}
- name: Managing Attributes With Python's property()
  endpoint:
    path: /courses/property-python/continue/
    method: GET
    data_selector: lessons
    params: {}
- name: 'Refactoring Python: Why and How to Restructure Your Code'
  endpoint:
    path: /pycon/2016/talks/refactoring-python-why-and-how-to-restructure-your-code
    method: GET
    data_selector: records
    params: {}
- name: Solve Your Problems With Sloppy Python
  endpoint:
    path: /pycon/2018/talks/solve-your-problems-with-sloppy-python
    method: GET
    data_selector: records
    params: {}
- name: Awesome Command Line Tools
  endpoint:
    path: /pycon/2017/talks/awesome-command-line-tools
    method: GET
    data_selector: records
    params: {}
- name: Discovering Python
  endpoint:
    path: /pycon/2014/talks/discovering-python
    method: GET
    data_selector: records
    params: {}
- name: 'Big-O: How Code Slows as Data Grows'
  endpoint:
    path: /pycon/2018/talks/big-o-how-code-slows-as-data-grows
    method: GET
    data_selector: records
    params: {}
- name: Hidden Treasures in the Standard Library
  endpoint:
    path: /pycon/2011/talks/hidden-treasures-in-the-standard-library
    method: GET
    data_selector: records
    params: {}
- name: 'Memory Management in Python: The Basics'
  endpoint:
    path: /pycon/2016/talks/memory-management-in-python-the-basics
    method: GET
    data_selector: records
    params: {}
- name: 'All Your Ducks in a Row: Data Structures in the Standard Library and Beyond'
  endpoint:
    path: /pycon/2014/talks/all-your-ducks-in-a-row-data-structures-in-the-standard-library-and-beyond
    method: GET
    data_selector: records
    params: {}
- name: 'Beyond PEP 8: Best Practices for Beautiful Intelligible Code'
  endpoint:
    path: /pycon/2015/talks/beyond-pep-8-best-practices-for-beautiful-intelligible-code
    method: GET
    data_selector: records
    params: {}
- name: PyCon 2016 Keynote
  endpoint:
    path: /pycon/2016/talks/pycon-2016-keynote
    method: GET
    data_selector: records
    params: {}
- name: Building a Site Connectivity Checker (Overview)
  endpoint:
    path: /videos/python-site-connectivity-checker-overview/
    method: GET
- name: Understanding the Project Details
  endpoint:
    path: /videos/connectivity-checker-details/
    method: GET
- name: Setting Up the Development Environment
  endpoint:
    path: /lessons/connectivity-checker-environment/
    method: GET
- name: Checking a Website's Connectivity
  endpoint:
    path: /lessons/check-website-connectivity/
    method: GET
- name: Creating the Command-Line Interface
  endpoint:
    path: /lessons/connectivity-checker-cli/
    method: GET
- name: Putting Everything Together
  endpoint:
    path: /lessons/putting-connectivity-checker-together/
    method: GET
- name: Coding the Missing Pieces
  endpoint:
    path: /lessons/coding-missing-pieces/
    method: GET
- name: Checking Sites Asynchronously
  endpoint:
    path: /lessons/asynchronously-check-sites/
    method: GET
- name: Completing Asynchronous Support
  endpoint:
    path: /lessons/asynchronous-support/
    method: GET
- name: Building a Site Connectivity Checker (Summary)
  endpoint:
    path: /lessons/python-site-connectivity-checker-summary/
    method: GET
- name: redirect_view
  endpoint:
    path: /redirect/
    method: GET
    data_selector: redirect_success
    params: {}
- name: contact_view
  endpoint:
    path: /contact/
    method: POST
    data_selector: success
    params: {}
- name: search_redirect
  endpoint:
    path: /search/<term>/
    method: GET
- name: product_view
  endpoint:
    path: /products/
    method: GET
- name: Building a Django User Management System (Overview)
  endpoint:
    path: /videos/building-a-django-user-management-system-overview/
    method: GET
    data_selector: records
- name: Setting Up Your Django App
  endpoint:
    path: /videos/setting-up-your-django-app/
    method: GET
    data_selector: records
- name: Creating a Dashboard View
  endpoint:
    path: /lessons/creating-dashboard-view/
    method: GET
    data_selector: records
- name: Working With Django User Management
  endpoint:
    path: /lessons/working-with-django-user-management/
    method: GET
    data_selector: records
- name: Logging In and Out
  endpoint:
    path: /lessons/logging-in-and-out/
    method: GET
    data_selector: records
- name: Managing Passwords
  endpoint:
    path: /lessons/managing-passwords/
    method: GET
    data_selector: records
- name: Handling Password Reset Emails
  endpoint:
    path: /lessons/handling-password-reset-emails/
    method: GET
    data_selector: records
- name: Registering New Users
  endpoint:
    path: /lessons/registering-new-users/
    method: GET
    data_selector: records
- name: Sending Emails to the Outside World
  endpoint:
    path: /lessons/sending-emails-to-outside-world/
    method: GET
    data_selector: records
- name: Setting Up Social Auth
  endpoint:
    path: /lessons/setting-up-social-auth/
    method: GET
    data_selector: records
- name: Creating a GitHub App
  endpoint:
    path: /lessons/creating-github-app/
    method: GET
    data_selector: records
- name: Selecting Auth Backend
  endpoint:
    path: /lessons/selecting-auth-backend/
    method: GET
    data_selector: records
- name: Building a Django User Management System (Summary)
  endpoint:
    path: /lessons/building-a-django-user-management-system-summary/
    method: GET
    data_selector: records
- name: Starting With Python IDLE
  endpoint:
    path: /courses/starting-python-idle/
    method: GET
    data_selector: lessons
    params: {}
- name: histogram
  endpoint:
    path: /histogram
    method: GET
    data_selector: data
    params: {}
- name: Speech Recognition With Python
  endpoint:
    path: /videos/speech-recognition-python-overview/
    method: GET
- name: KDE Plotting
  endpoint:
    path: /kde/plotting
    method: GET
    data_selector: plots
    params: {}
- name: simplify_python_gui_development
  endpoint:
    path: /courses/simplify-gui-dev-pysimplegui/
    method: GET
    data_selector: lessons
    params: {}
- name: Django View Authorization Overview
  endpoint:
    path: /videos/django-view-auth-overview/
    method: GET
    data_selector: lessons
    params: {}
- name: Getting the Project Started
  endpoint:
    path: /videos/get-project-started/
    method: GET
    data_selector: lessons
    params: {}
- name: Templates and Setup
  endpoint:
    path: /videos/templates-setup/
    method: GET
    data_selector: lessons
    params: {}
- name: Detecting Logged-in Users
  endpoint:
    path: /lessons/detect-logged-in-users/
    method: GET
    data_selector: lessons
    params: {}
- name: Implementing Django View Authorization
  endpoint:
    path: /lessons/implement-view-auth/
    method: GET
    data_selector: lessons
    params: {}
- name: Restricting Views to Admin and Staff
  endpoint:
    path: /lessons/restrict-views-admin-staff/
    method: GET
    data_selector: lessons
    params: {}
- name: Messaging a Logged-in User
  endpoint:
    path: /lessons/message-logged-in-user/
    method: GET
    data_selector: lessons
    params: {}
- name: Django View Authorization Summary
  endpoint:
    path: /lessons/django-view-auth-summary/
    method: GET
    data_selector: lessons
    params: {}
- name: Python Turtle for Beginners
  endpoint:
    path: /courses/python-turtle-beginners/
    method: GET
    data_selector: lessons
    params: {}
- name: Getting Started With MicroPython
  endpoint:
    path: /courses/getting-started-micropython/
    method: GET
    data_selector: lessons
    params: {}
- name: Al Sweigart
  endpoint:
    path: /youtube/al-sweigart
    method: GET
    data_selector: videos
- name: Anaconda Inc.
  endpoint:
    path: /youtube/anaconda-inc
    method: GET
    data_selector: videos
- name: Christian Thompson
  endpoint:
    path: /youtube/christian-thompson
    method: GET
    data_selector: videos
- name: Clever Programmer
  endpoint:
    path: /youtube/clever-programmer
    method: GET
    data_selector: videos
- name: CodingEntrepreneurs
  endpoint:
    path: /youtube/codingentrepreneurs
    method: GET
    data_selector: videos
- name: Corey Schafer
  endpoint:
    path: /youtube/corey-schafer
    method: GET
    data_selector: videos
- name: Chris Hawkes
  endpoint:
    path: /youtube/chris-hawkes
    method: GET
    data_selector: videos
- name: CS Dojo
  endpoint:
    path: /youtube/cs-dojo
    method: GET
    data_selector: videos
- name: Data School (Kevin Markham)
  endpoint:
    path: /youtube/data-school
    method: GET
    data_selector: videos
- name: David Beazley
  endpoint:
    path: /youtube/david-beazley
    method: GET
    data_selector: videos
- name: Enthought
  endpoint:
    path: /youtube/enthought
    method: GET
    data_selector: videos
- name: Michael Kennedy (Talk Python)
  endpoint:
    path: /youtube/michael-kennedy
    method: GET
    data_selector: videos
- name: PrettyPrinted
  endpoint:
    path: /youtube/prettyprinted
    method: GET
    data_selector: videos
- name: PyData
  endpoint:
    path: /youtube/pydata
    method: GET
    data_selector: videos
- name: Reuven Lerner
  endpoint:
    path: /youtube/reuven-lerner
    method: GET
    data_selector: videos
- name: Sentdex (Harrison Kinsley)
  endpoint:
    path: /youtube/sentdex
    method: GET
    data_selector: videos
- name: Socratica
  endpoint:
    path: /youtube/socratica
    method: GET
    data_selector: videos
- name: TheNewBoston (Bucky Roberts)
  endpoint:
    path: /youtube/thenewboston
    method: GET
    data_selector: videos
- name: Command-Line Project Ideas
  endpoint:
    path: /lessons/contact-book/
    method: GET
    data_selector: lessons
    params: {}
- name: Web Project Ideas
  endpoint:
    path: /lessons/content-aggregator/
    method: GET
    data_selector: lessons
    params: {}
- name: GUI Project Ideas
  endpoint:
    path: /lessons/audio-player/
    method: GET
    data_selector: lessons
    params: {}
- name: Basic Data Types in Python
  endpoint:
    path: /courses/python-data-types/continue/
    method: GET
    data_selector: lessons
    params: {}
- name: beginner_tips
  endpoint:
    path: /courses/python-beginner-tips/
    method: GET
    data_selector: lessons
    params: {}
- name: Installing Python on Windows
  endpoint:
    path: /lessons/installing-python-windows-pythonorg-installer/
    method: GET
    data_selector: ''
    params: {}
- name: Installing Python on Windows Using the Microsoft Store
  endpoint:
    path: /lessons/installing-python-windows-microsoft-store/
    method: GET
    data_selector: ''
    params: {}
- name: Installing Python on macOS
  endpoint:
    path: /lessons/installing-python-macos/
    method: GET
    data_selector: ''
    params: {}
- name: Installing Python on Ubuntu Linux 16.04
  endpoint:
    path: /lessons/installing-python-ubuntu-linux-1604/
    method: GET
    data_selector: ''
    params: {}
- name: Installing Python on Ubuntu Linux 18.04
  endpoint:
    path: /lessons/installing-python-ubuntu-linux-1804/
    method: GET
    data_selector: ''
    params: {}
- name: Installing Python on Ubuntu Linux 19.04
  endpoint:
    path: /lessons/installing-python-ubuntu-linux-1904/
    method: GET
    data_selector: ''
    params: {}
- name: 'Installing Python: Summary & Recap'
  endpoint:
    path: /lessons/installing-python-summary-recap/
    method: GET
    data_selector: ''
    params: {}
- name: Django Migrations
  endpoint:
    path: /courses/django-migrations-101/
    method: GET
    data_selector: lessons
    params: {}
- name: introduction_to_python_exceptions
  endpoint:
    path: /courses/introduction-python-exceptions/
    method: GET
    data_selector: lessons
    params: {}
- name: EuroPython
  endpoint:
    path: https://www.youtube.com/channel/UC98CzaYuFNAA_gOINFB0e4Q
    method: GET
- name: EuroSciPy
  endpoint:
    path: https://www.youtube.com/channel/UCruMegFU9dg2doEGOUaAWTg
    method: GET
- name: Kiwi PyCon
  endpoint:
    path: https://www.youtube.com/channel/UCJ_gIPLffA7ZTYc5gOV6MgA
    method: GET
- name: PyCascades
  endpoint:
    path: https://www.youtube.com/channel/UCtWI06j1EADmEOGj2iJhSyA
    method: GET
- name: PyCon Argentina (Ar)
  endpoint:
    path: https://www.youtube.com/channel/UCa8tmvBoe5L6BGmRcQHF8qw
    method: GET
- name: PyCon Australia (AU)
  endpoint:
    path: https://www.youtube.com/channel/UCS9sdEyduD9K83K3GkvQlOA
    method: GET
- name: PyCon Canada
  endpoint:
    path: https://www.youtube.com/channel/UCclkPrurwUP_ajqi3vDTNDg
    method: GET
- name: PyCon Czech (CZ)
  endpoint:
    path: https://www.youtube.com/channel/UCRC2Vu7p4SJxhhuRdl8rQ6g
    method: GET
- name: PyCon Finland
  endpoint:
    path: https://www.youtube.com/channel/UCztHeKs0ZU6T0Cy7VjA_RgA
    method: GET
- name: PyCon Germany (DE)
  endpoint:
    path: https://www.youtube.com/channel/UCji5VWDkGzuRenyRQZ9OpFQ
    method: GET
- name: PyCon Hong Kong (HG)
  endpoint:
    path: https://www.youtube.com/channel/UCQJEx-ZrVjpB7dYWnO4EecA
    method: GET
- name: PyCon Ireland (IE)
  endpoint:
    path: https://www.youtube.com/channel/UCXlA9u2VPI9nIALNUBF0Nzw
    method: GET
- name: PyCon Italy (Nove)
  endpoint:
    path: https://www.youtube.com/user/pyconitalia
    method: GET
- name: PyCon Japan (JP)
  endpoint:
    path: https://www.youtube.com/channel/UCxNoKygeZIE1AwZ_NdUCkhQ
    method: GET
- name: PyCon Korea (KR)
  endpoint:
    path: https://www.youtube.com/channel/UC26x6D5xpKx6io4ShfXa_Ow
    method: GET
- name: PyCon Malaysia (MY)
  endpoint:
    path: https://www.youtube.com/channel/UCHbZFEch7FdQbK3ZXsTw0Cw
    method: GET
- name: PyCon Phillipines (PH)
  endpoint:
    path: https://www.youtube.com/channel/UCkq4w29wjhNCdNegMecivqg
    method: GET
- name: PyCon Poland (PL)
  endpoint:
    path: https://www.youtube.com/user/pyconpl
    method: GET
- name: PyCon Singapore (SG)
  endpoint:
    path: https://www.youtube.com/channel/UCVN315m23vfiVuU4Ov51tDw
    method: GET
- name: PyCon Slovakia (SK)
  endpoint:
    path: https://www.youtube.com/channel/UC8Tzn82aG4zdvtqlrfsLgSA
    method: GET
- name: PyCon Ukraine (UA)
  endpoint:
    path: https://www.youtube.com/channel/UCJ2lwx-pNVF_EoWlHAmNNtQ
    method: GET
- name: PyCon United Kingdom (UK)
  endpoint:
    path: https://www.youtube.com/channel/UChA9XP_feY1-1oSy2L7acog
    method: GET
- name: PyGotham 2017
  endpoint:
    path: https://www.youtube.com/channel/UCKWYZNMRBRuecwgZMLy-8gw
    method: GET
- name: PyOhio
  endpoint:
    path: https://www.youtube.com/channel/UCYqdrfvhGxNW3vXebypqXoQ
    method: GET
- name: Modulo in Mathematics
  endpoint:
    path: /modulo-in-mathematics
    method: GET
    data_selector: content
- name: Python Modulo Operator Basics
  endpoint:
    path: /python-modulo-operator-basics
    method: GET
    data_selector: content
- name: Modulo Operator With int
  endpoint:
    path: /modulo-operator-with-int
    method: GET
    data_selector: content
- name: Modulo Operator With float
  endpoint:
    path: /modulo-operator-with-float
    method: GET
    data_selector: content
- name: Modulo Operator With a Negative Operand
  endpoint:
    path: /modulo-operator-with-negative-operand
    method: GET
    data_selector: content
- name: Modulo Operator and divmod()
  endpoint:
    path: /modulo-operator-and-divmod
    method: GET
    data_selector: content
- name: Modulo Operator Precedence
  endpoint:
    path: /modulo-operator-precedence
    method: GET
    data_selector: content
- name: Python Modulo Operator in Practice
  endpoint:
    path: /python-modulo-operator-in-practice
    method: GET
    data_selector: content
- name: python_modulo_basics
  endpoint:
    path: /python/modulo/basics
    method: GET
    data_selector: records
- name: python_modulo_advanced
  endpoint:
    path: /python/modulo/advanced
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Raspbian Installation
  endpoint:
    path: /installation/raspbian
    method: GET
    data_selector: installation_steps
    params: {}
- name: NOOBS Installation
  endpoint:
    path: /installation/noobs
    method: GET
    data_selector: installation_steps
    params: {}
- name: button
  endpoint:
    path: /button.py
    method: POST
    data_selector: button_events
- name: led
  endpoint:
    path: /led.py
    method: POST
    data_selector: led_status
- name: buzzer
  endpoint:
    path: /buzzer.py
    method: POST
    data_selector: buzzer_status
- name: motion_sensor
  endpoint:
    path: /pir.py
    method: POST
    data_selector: motion_events
- name: motion
  endpoint:
    path: /detected_motion.csv
    method: GET
    data_selector: records
- name: split_method
  endpoint:
    path: /how-to-split-string-in-python
    method: GET
    data_selector: content
    params: {}
- name: split
  endpoint:
    path: /api/v1/split
    method: POST
    data_selector: result
- name: rsplit
  endpoint:
    path: /api/v1/rsplit
    method: POST
    data_selector: result
- name: splitlines
  endpoint:
    path: /api/v1/splitlines
    method: POST
    data_selector: result
- name: resplit
  endpoint:
    path: /api/v1/resplit
    method: POST
    data_selector: result
- name: rounding_methods
  endpoint:
    path: /rounding/methods
    method: GET
    data_selector: methods
    params: {}
- name: round_up
  endpoint:
    path: /rounding/round_up
    method: POST
    data_selector: result
    params: {}
- name: round_down
  endpoint:
    path: /rounding/round_down
    method: POST
    data_selector: result
    params: {}
- name: round_half_up
  endpoint:
    path: /rounding/round_half_up
    method: POST
    data_selector: result
    params: {}
- name: range
  endpoint:
    path: /range
    method: GET
    data_selector: results
- name: django_project_setup
  endpoint:
    path: /startproject
    method: POST
    data_selector: setup
    params: {}
- name: django_app_start
  endpoint:
    path: /startapp
    method: POST
    data_selector: example
    params: {}
- name: Sentiment Labelled Sentences Data Set
  endpoint:
    path: https://archive.ics.uci.edu/ml/datasets/Sentiment+Labelled+Sentences
    method: GET
    data_selector: data
    params: {}
- name: model
  endpoint:
    path: /model
    method: POST
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: segment_fish
  endpoint:
    path: /segment_fish
    method: POST
    data_selector: result
- name: talks
  endpoint:
    path: /api/talks
    method: GET
    data_selector: talks
    params: {}
- name: SearchRedirectView
  endpoint:
    path: /search/<term>/
    method: GET
    data_selector: redirect
    params: {}
- name: SearchRedirectView
  endpoint:
    path: /search/<term>/
    method: GET
    data_selector: redirect
    params: {}
- name: Python YouTube Channels
  endpoint:
    path: /python-youtube-channels/
    method: GET
    data_selector: channels
    params: {}
- name: command_line_application_layouts
  endpoint:
    path: /command-line-application-layouts
    method: GET
    data_selector: layouts
    params: {}
- name: web_application_layouts
  endpoint:
    path: /web-application-layouts
    method: GET
    data_selector: layouts
    params: {}
notes:
- FastAPI is designed to build APIs with modern Python features.
- Successful PUT requests will always return 200 instead of 201 because you aren’t
  creating a new resource but just updating an existing one.
- Uses JSON format for data interchange.
- FastAPI responds with a JSON array containing a list of countries.
- FastAPI returns a JSON list including the new country you just added.
- Offers a variety of learning resources including tutorials, courses, and podcasts.
- A weekly Python podcast hosted by Christopher Bailey with interviews, coding tips,
  and conversation with guests from the Python community.
- Practical use cases for decorators include logging, enforcing access control, caching
  results, and measuring execution time.
- Custom decorators are written by defining a function that takes another function
  as an argument, defines a nested wrapper function, and returns the wrapper.
- Current Office Hours sessions are not recorded anymore.
- Office Hours are currently one-time events where you can ask whatever you want in
  a safe space.
- The @do_twice decorator adds behavior that can apply to many different functions.
- The @timer decorator prints the runtime of the decorated function.
- The @debug decorator prints a function’s arguments and its return value every time
  you call the function.
- The @slow_down decorator sleeps 1 second before calling the function.
- Code Mentor is a new feature we’re releasing for testing to Real Python members.
- Available functionality may change as we continue to develop and improve the feature.
- Not a full-time job, but requires a consistent commitment.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- This is not a full-time job, but we are looking for a consistent commitment.
- This is a part-time position you can do in the evenings/weekends.
- Some commonly used decorators are built-ins in Python like @classmethod, @staticmethod,
  and @property.
- Singleton classes aren’t really used as often in Python as in other languages. The
  effect of a singleton is usually better implemented as a global variable inside
  a module.
- Python decorators allow you to modify or extend the behavior of functions and methods
  without changing their actual code.
- The `@functools.wraps` decorator uses `functools.update_wrapper()` to update special
  attributes like `__name__` and `__doc__` that are used in the introspection.
- Decorators allow you to modify or extend the behavior of functions and methods without
  changing their actual code.
- The `@timer` decorator is great for getting an idea about the runtime of functions.
- The `@debug` decorator prints function's arguments and its return value.
- Python is a highly versatile language.
- Python has trouble interacting with low-level devices.
- 'Course Dates & Registration: Jan 12–Mar 6, 2026'
- $2,000
- Singleton classes aren’t really used as often in Python as in other languages.
- Course materials are available in advance.
- All live sessions are recorded and made available within 24 hours.
- Effective Online Python Training for All Skill Levels & Roles
- All-Access to Python Tutorials, Video Courses, Learning Paths, Quizzes
- 24/7 Access to Community Chat
- Weekly Office Hours Q&A With a Python Expert
- New & Updated Training Resources Released Regularly
- Downloadable Source Code with Commercial Use License
- Priority Support
- Single Billing Account
- Team License Management
- Team Progress Analytics
- No Ads
- The effect of a singleton is usually better implemented as a global variable inside
  a module.
- Uses online_retail.parquet file for analysis
- Polars supports method chaining for clear and optimized queries
- Ensure NumPy is installed in your Python environment for data generation.
- Much of the data you’ll use will be random and self-generated.
- You’ll also use a cleansed and reformatted Apache Parquet version of some freely
  available retail data from the UC Irvine Machine Learning Repository.
- The NumPy data types will be removed from pandas version 3 and replaced with the
  more efficient PyArrow types.
- While you might think LazyFrames are always preferred over DataFrames, this isn’t
  always true.
- Uses NumPy for random data generation
- Performance differences will depend on the type of analysis you perform
- Python is a versatile programming language with many use cases in a variety of different
  fields.
- Before using your Python skills for web scraping, you should check the use policy
  of your target website to make sure that scraping it with automated tools isn’t
  a violation of its terms of use.
- Uses NumPy for data generation
- Python is a highly versatile language, and there’s a lot you can do with it.
- Python has some of the best tools when it comes to testing.
- Uses Polars and pandas for data analysis.
- The dataset is contained in the online_retail.parquet file.
- Uses NumPy for generating random data
- Pandas DataFrames can create faster than Polars
- Polars is significantly faster for data analysis compared to pandas
- Streaming only works on a LazyFrame, so you pass polars_lf to analyze_polars_streaming()
  for timing.
- Certain operations don’t support streaming, so even if you request it, it may not
  be possible.
- Course materials are available in advance, allowing you to preview upcoming content.
- You’ll retain permanent access to all course materials, including written tutorials
  and video lessons.
- Easy License Management
- Only Pay for Learners
- Display ads are served via an in-house ethical ads platform that is not affected
  by ad blockers and EU GDPR compliant.
- This document was last updated on June 1, 2019.
- The tutorial uses a cleansed and reformatted Apache Parquet version of some freely
  available retail data.
- Uses NumPy for data generation.
- DataFrame creation time may vary based on the number of rows.
- Parquet files are optimized to store data and analyze it efficiently.
- Using NumPy for random data generation.
- 'DataFrames will contain five columns: order_id, region, sales_person, product,
  sales_income.'
- DataFrames created with pandas and Polars for performance comparison.
- Polars expressions and contexts allow you to build clear, optimized query pipelines
  without mutating your original data.
- LazyFrames with query optimization in Polars can outperform pandas for grouped and
  aggregated workloads.
- Streaming in Polars enables processing datasets that don’t fit in memory, which
  pandas can’t handle natively.
- Scraping can be legal, but it depends on what data you collect and how you access
  it.
- Avoid personal or sensitive data, respect rate limits, and use public endpoints
  where possible.
- Streaming only works on a LazyFrame.
- Certain operations don’t support streaming.
- DataFrames are similar to SQL tables or spreadsheets.
- They can be created using dictionaries, lists, or NumPy arrays.
- Uses OAuth2 with JWTs over HTTPS and set short expirations. Validate tokens on every
  request and scope permissions.
- Not copying data values can save you a significant amount of time and processing
  power when working with large datasets.
- pandas represents missing data with NaN (not a number) values.
- Polars is a high-performance DataFrame library.
- Supports Python versions 3.7 and above.
- Uses NumPy for random data generation.
- Polars' lazy API allows processing large datasets without reading all data into
  memory.
- Use Docker to create reproducible environments and ship Python apps.
- Learn how to use docker compose for local development, set up volumes and networks,
  cache builds for speed, and push images to Docker Hub.
- Polars can handle data sources like JSON, Parquet, Avro, Excel, and various databases.
- Polars supports scanning multiple files with the same schema as if they were a single
  file.
- Parquet format is excellent for LazyFrames to use.
- LazyFrames contain a set of instructions that define operations to carry out on
  data.
- LazyFrames are optimized for efficient analysis of the data source before any data
  is analyzed.
- The API does not require authentication.
- Streaming must be activated within collect() by setting its streaming parameter
  to True.
- When working with large files, avoid using a Jupyter notebook because notebooks
  are configured to use a small amount of RAM.
- LazyFrames may not solve every data analysis problem, but they do provide an efficient
  solution for many.
- The Python standard REPL is available in every Python installation.
- The standard REPL is relatively minimal and doesn’t provide many features to help
  you code and make you more productive.
- You need to be aware of its limitations.
- Displays help information at the command line
- May need to accommodate for wildcard expansion on Windows
- Python command-line arguments are loose strings
- Error handling could be addressed in the scripts
- pandas usually represents missing data with NaN (not a number) values
- The default setting for inplace is False
- Uses pandas for data manipulation and analysis
- A command-line interface provides a way for a user to interact with a program running
  in a text-based shell interpreter.
- The use of Python command-line arguments is strongly influenced by the C language.
- Polars supports Python versions 3.7 and above.
- To use features with external data sources, install Polars with optional dependencies.
- A similar notation can be used to display the usage of a particular command when
  you invoke it with the option -h or --help.
- You don’t need to follow those standards rigorously. Instead, follow the conventions
  that have been used successfully for years since the advent of UNIX.
- The behavior is consistent with the Unix Philosophy, as the output of ps is transformed
  by two grep filters.
- Polars DataFrames can handle large datasets efficiently with the lazy API.
- Adding the capability of processing Python command-line arguments provides a user-friendly
  interface to your text-based command line program.
- Python exposes a mechanism to capture and extract your Python command-line arguments.
- Polars supports lazy queries, which is preferred over reading entire files into
  memory.
- Uses Unix-like conventions for command-line arguments
- Options can take arguments specified after a space or equals sign
- LazyFrames are optimized for efficient analysis of data before any data is analyzed.
- Mandatory arguments to long options are mandatory for short options too.
- Streaming allows processing of large datasets without loading everything into RAM.
- Happy Pythoning!
- The Python standard REPL allows for interactive coding and immediate feedback.
- When you run a piece of code in an interactive session, you typically get immediate
  feedback as an output on your screen.
- When you use the -i command-line option with the python command, keep in mind that
  the PYTHONSTARTUP environment variable won’t be read.
- The -b flag is another command-line option to consider when you run Python in interactive
  mode.
- The concept of subcommands isn’t documented in the POSIX or GNU standards, but it
  does appear in docopt.
- Python command-line arguments are captured using sys.argv
- The name of the program is the first item in sys.argv
- The standard REPL is a great tool that you can use to try out your code and get
  immediate feedback.
- The GNU standards add long options prefixed with two hyphens.
- Windows uses forward slash (/) for options instead of hyphen (-).
- This tutorial covers the basics of Python command-line arguments.
- Handles one or more files as arguments for SHA1 hash calculation
- Expects standard input if no file arguments are provided
- Python command-line arguments directly inherit from the C programming language.
- Displaying the help of a command line program is a common feature exposed in the
  command-line interface.
- On Mac OS and Linux, sha1sum and seq should come pre-installed, though the features
  and the help information may sometimes differ slightly between systems or distributions.
- All options should be preceded with a hyphen or minus (`-`) delimiter character.
- Python command-line arguments are loose strings and may raise errors if not handled
  properly.
- Handles one or more files as arguments
- Supports reading from standard input
- Uses wildcard expansion on Windows
- Python command-line arguments provide a user-friendly interface to text-based command
  line programs.
- Python's command-line arguments are influenced by C programming language.
- Uses the Python standard library for command-line argument parsing
- You don’t need to follow those standards rigorously.
- Stay consistent across the different utilities.
- Handles standard input when no arguments are provided
- Supports wildcard expansion using glob
- Uses argparse for command-line argument parsing
- Handles file arguments to compute SHA1 hash
- Supports standard input using '-' as a file argument
- SHA1 hash values are calculated based on file contents.
- The code may take a little while to run depending on your network.
- On Mac OS and Linux, sha1sum and seq should come pre-installed
- If you’re using Windows 10, the most convenient method is to run sha1sum and seq
  in a Linux environment installed on the WSL
- Uses time.perf_counter() for accurate timing
- You don’t need to follow those standards rigorously. Instead, follow the conventions
  that have been used successfully for years since the advent of UNIX. If you write
  a set of utilities for you or your team, then ensure that you stay consistent across
  the different utilities.
- Timer can be used as a context manager
- Timer is available on PyPI
- Uses time.perf_counter() for accurate timing in Python.
- By the end of this tutorial, you’ll know the origins of Python command-line arguments,
  the underlying support for Python command-line arguments, the standards guiding
  the design of a command-line interface, the basics to manually customize and handle
  Python command-line arguments, and the libraries available in Python to ease the
  development of a complex command-line interface.
- Handles command-line arguments for hash calculation
- Requires proper argument formatting to avoid errors
- '`time.perf_counter()` is the best choice for accurate timing in Python due to its
  high resolution.'
- Using decorators lets you seamlessly add timing functionality to existing functions
  without altering their code.
- Uses context manager for timing operations
- Handles non-existing files passed at the command line
- Outputs error messages to stderr
- Uses a timer class to encapsulate timing logic.
- Provides high resolution timing suitable for performance testing.
- Jupyter Notebook is an open source web application.
- Jupyter Notebook is useful for learning and teaching programming languages.
- You can turn your Notebook into a slideshow or share it online with GitHub.
- If using Windows 10, run sha1sum and seq in a Linux environment installed on WSL
- Handles standard input using sys.stdin
- Supports wildcard expansion on non-Windows platforms
- NumPy is specialized for building and manipulating large, multidimensional arrays.
- The usual arguments list minus the script name, sys.argv[1:]
- Working with virtual environments is a common and effective practice in Python development.
- On Mac OS and Linux, sha1sum and seq should come pre-installed.
- Error handling could be addressed in the scripts.
- A virtual environment aims to provide a lightweight, isolated Python environment.
- The folder structure includes a copy or symlink of the Python binary, a pyvenv.cfg
  file, and a site-packages directory.
- Handles one or more files as arguments.
- Expects data from standard input when no arguments are provided.
- Uses dialog boxes for user interaction
- Interactive input validation
- On Windows, you may notice that python.exe in your base Python installation isn’t
  in Scripts\ but is one folder level up.
- This small change to the folder structure means that you only need to add a single
  directory to your shell PATH variable to activate the virtual environment.
- If the interpreter doesn’t find a pyvenv.cfg file, then it determines that it’s
  not running within a virtual environment.
- Uses Timer class to monitor performance.
- Uses class variable to accumulate timers
- Timer can be used as a context manager or decorator
- The installation of pip in a virtual environment may be outdated due to the use
  of ensurepip.
- Using --upgrade-deps updates pip automatically.
- Uses time.perf_counter for accurate timing in Python.
- Virtual environments are disposable folder structures that you should be able to
  safely delete and re-create at any time.
- If you run multiple projects on a server that you host yourself, then you might
  benefit from setting up virtual environments on that server.
- Uses context manager to simplify timer usage
- Some objects may return nulls in deeply nested fields
- The income_usa, income_world, movie_budget, and film_length columns should be numeric
  types.
- The release column should be a date type.
- You can use the code yourself by saving it to a file named timer.py and importing
  it into your program
- Parquet is a great format for storing your intermediate files, because they’re compressed
  and support the different data types you’re working with.
- 'NumPy is a Python library that provides a simple yet powerful data structure: the
  n-dimensional array.'
- Uses Python classes to encapsulate timer behavior
- Supports context management for simplified usage
- Uses context manager capabilities to simplify timing code.
- Timer can be used as a class, context manager, or decorator.
- Uses perf_counter for timing.
- Transitioning from interactive environments to structured scripts helps promote
  readability, enabling better collaboration and more robust development practices.
- By following these steps, you’ll see how structure transforms a basic script into
  something more robust, readable, and shareable.
- Script uses urllib.request to download the dataset.
- The dataset can be fetched using the ucimlrepo library.
- Most random data generated with Python is not fully random in the scientific sense,
  it is pseudorandom.
- The pseudo-random generators of the random module should not be used for security
  purposes.
- Uses ucimlrepo library for fetching datasets.
- Uses Python's random module for generating random data.
- Fetches Iris dataset from UCI ML Repository
- If you’re looking to create normally distributed random numbers, then you’re in
  luck!
- Fetches the Iris dataset from UCI ML Repository.
- Uses os.urandom() for generating secure random bytes and strings.
- Iris dataset fetched successfully
- NumPy library is used for scientific computing.
- Requires Matplotlib library for charting data.
- Uses Python’s venv module to create virtual environments
- Best practice to manage dependencies separately
- Uses NumPy to create arrays from file data.
- Files must have uniform dimensions to populate arrays correctly.
- Uses structured arrays for data manipulation.
- A virtual environment folder contains a lot of files and folders.
- Starting with Python 3.12, your virtual environment comes preinstalled with only
  one dependency, pip.
- NumPy facilitates working with multidimensional arrays.
- You can customize the command prompt using the --prompt argument when creating a
  virtual environment.
- Using the --clear argument allows you to overwrite existing virtual environments.
- Virtual environments are disposable folder structures that you should be able to
  safely delete and re-create at any time without losing information about your code
  project.
- You can set up conda on your system using the Miniconda installer, which brings
  along the minimal requirements for running conda on your system.
- Dictionaries are a mutable collection of key-value pairs.
- Dictionaries are implemented as hash tables for fast key lookups.
- Starting with Python 3.7, dictionaries maintain the order of items as inserted.
- Don’t push the `venv/` folder to GitHub.
- Don’t include your virtual environment folder in your continuous integration or
  continuous delivery pipelines.
- Don’t set up a virtual environment on your deployment server unless you manage that
  server yourself and run multiple separate projects on it.
- You’ll need to read up on these specific files in the documentation of the hosting
  service that you’re planning to use.
- Data is provided in a CSV file named 'james_bond_data.csv'
- The movie_budget data is in thousands, whereas the other financial columns are actual
  figures.
- Calling the .clear() method on an existing dictionary will remove all the current
  key-value pairs from the dictionary.
- This documentation is focused on NumPy usage and does not mention any specific API.
- NumPy arrays are used for manipulating images
- Using the dot product for grayscale conversion provides better results
- Uses NumPy methods for generating random integers and shuffling arrays.
- This tutorial transforms messy scripts into well-organized, shareable code.
- Follow Python script structure recommendations for enhanced readability and maintainability.
- Uses the ucimlrepo library to fetch datasets.
- Uses sample datasets provided for you by the creators of seaborn
- Uses pandas to load datasets
- DeprecationWarning may occur regarding PyArrow
- The objects interface allows you to create more complex plots without needing to
  use more complicated code to do so.
- Uses ucimlrepo for dataset fetching
- Seaborn is a Python data visualization library based on matplotlib.
- Uses structured logging for script communication about progress and runtime events
- Assertions are used for internal sanity checks
- Uses Rich library for enhanced terminal output.
- Requires Python version >= 3.11.
- Seaborn is a library that allows you to create statistical analysis visualizations
  of data.
- Fetches the Iris dataset from the UCI ML Repository.
- Requires installation of NumPy and Matplotlib libraries.
- Data from Kaggle related to the NBA 2017-18 season
- Ensure files are properly ordered for loading into arrays.
- Use natsort for natural sorting of file names.
- Format the y-axis tick labels as percentages
- Uses structured arrays to handle hierarchical data
- Data contains share prices for each company across the week.
- Bokeh is an interactive visualization library that targets modern web browsers for
  presentation.
- Bokeh renders its graphics using HTML and JavaScript.
- 'Multiple ways to output your visualization: to a static HTML file or inline in
  a Jupyter Notebook.'
- Interactive legends allow hiding or muting data.
- The initial view will only show the first 10 games of the 76ers’ season.
- Uses ColumnDataSource for handling data in visualizations.
- Uses interactive legends with click policies for visualizations
- JupyterLab enhances notebooks with a browser-based interface
- Supports multiple notebooks together effectively
- JupyterLab enhances your notebooks by providing a browser-based interface.
- You can access your operating system from within JupyterLab.
- Uses PCG64 for random number generation
- Not suitable for cryptographic purposes
- The .integers() method produces 64-bit integers by default.
- Setting endpoint=True makes the interval inclusive.
- The .permutation() method creates a new array of results, while .shuffle() updates
  the original array.
- Markdown files can contain code that can be run and tested.
- Allows access to command-line environment directly from JupyterLab.
- PyArrow will become a required dependency of pandas in the future.
- Bokeh renders graphics using HTML and JavaScript.
- The visualization can be rendered to a static HTML file or inline in a Jupyter Notebook.
- Uses ColumnDataSource to isolate relevant data within a DataFrame.
- Note that mute_fig has an extra parameter called muted_alpha. This parameter controls
  the opacity of the markers when mute is used as the click_policy.
- Bokeh renders graphics using HTML and JavaScript
- Bokeh is a library for interactive data visualization using HTML and JavaScript.
- gridplot allows the passing of None values, which are interpreted as blank subplots.
- The OO approach is more customizable and helps with complex graphs.
- Multiple Axes can be enclosed in a Figure.
- Uses a virtual environment named jl_venv for installation
- To install JupyterLab, use python -m pip install jupyterlab
- JupyterLab enhances notebooks by providing a browser-based interface.
- Data available from various decades.
- Markdown preview synchronizes with Markdown file.
- JavaScript Object Notation, or JSON, is an open standard file and data interchange
  format for storing data and passing it between different systems.
- This course is for members only.
- Python is free and open source.
- 'To learn more about keywords, check out the Python Keywords: An Introduction tutorial.'
- Python is a high-level, interpreted programming language.
- Installation can be done on various platforms including Windows, macOS, and Linux.
- Use a naming scheme that makes your variables intuitive and readable.
- Includes video subtitles and full transcripts
- Certificate of completion provided
- Syntax errors occur when the syntax of your code isn’t valid in Python.
- This lesson is for members only.
- Python doesn’t have a do-while loop.
- You can emulate this type of loop using a while.
- The else clause is optional, and you’ll commonly use it with a break statement in
  the loop’s code block.
- Errors can frustrate programmers at every level of experience, and identifying and
  handling them is a core skill.
- You can run a Python script by double-clicking it in a file manager.
- On Unix systems, ensure the script has execution permissions and includes a shebang.
- Automatically generates usage and help messages for CLI apps
- Handles both positional and optional arguments
- Python is a high-level, interpreted, interactive, and object-oriented programming
  language.
- Strings are sequences of characters.
- Lists are mutable sequences that group various objects together.
- This basic program demonstrates the basic capabilities of Pygame.
- Uses Python for game logic and interactions
- Pygame Zero is available on PyPI and installs Pygame as a dependent library
- Pygame Zero is installed by default on the Raspberry Pi platform
- To learn more about the tasks you can perform with Python, check out the What Can
  I Do With Python? tutorial.
- Arcade is under constant development, is well supported in the community.
- adventurelib is a single file, so it can also be downloaded from the GitHub repo.
- Python doesn’t have a do-while loop. However, you can emulate this type of loop
  using a while.
- Variable names should provide some indication as to what the values assigned to
  it are.
- Avoid single-character names in contexts other than math.
- Use 'lower_case_with_underscores' naming convention.
- Python offers readable, beginner-friendly syntax that is accessible to all ages.
- Uses Python modules and libraries extensively.
- Most of these learning resources are free.
- Others cost a modest fee that supports the site and helps maintain high-quality
  content.
- Running a Python script is a fundamental task for any Python developer.
- You can execute a Python .py file through various methods depending on your environment
  and platform.
- The interpreter can run code in script or interactive mode.
- Interactive mode allows immediate feedback on code execution.
- Open source projects rely on contributions from volunteers.
- map() returns an iterator that yields the results.
- You can apply a function to each element in an iterable.
- Using lambda allows for concise function definitions.
- help messages support format specifiers like %(prog)s
- metavar argument can improve usage messages
- Uses argparse module for creating command-line interfaces.
- Ensure to check the sources for remote scripts before running them.
- Chocolatey requires elevated privileges for installations.
- Most of the steps here will work equally well on Windows 11.
- You should install the Terminal app from the Microsoft Store.
- Disabling the auto-restart function is still not watertight.
- Creating mobile games with Python game engines isn’t straightforward and requires
  additional effort for optimization and compatibility.
- Using Python, and a host of great Python game engines, makes crafting great computer
  games much easier than in the past.
- Be careful when removing registry entries, as this can affect other programs!
- Pygame Zero is built on Pygame, which is installed as a dependent library.
- All images used in a Pygame Zero program must be located in a subfolder called './images/'
  and be named using lowercase letters, numbers, and underscores only.
- Always check the sources for remote scripts before running them.
- Be careful when removing registry entries, as this can affect other programs.
- PowerShell, like Windows in general, is case insensitive.
- Uses Chocolatey to bulk install key software
- Generating SSH key
- pyenv allows you to manage multiple Python versions independently of your system
  installation.
- Use pyenv to avoid conflicts with your system Python
- Manage project dependencies and interpreters
- adventurelib is a single file, so it can also be downloaded from the GitHub repo,
  saved in the same folder as your game, and used directly.
- Uses official installer for Python installation.
- Microsoft Store package is intended mainly for interactive use.
- You can recognize hidden items in the terminal by a dot (`.`) at the start of their
  name.
- Be careful when redirecting the `stdout` to existing files. Any content that the
  file contains will be overwritten without warning.
- Use 'git init' to create a new repository.
- Use 'git status' to check the current status of your repository.
- Use 'git add' to track files.
- Use 'git commit' to take a snapshot of your changes.
- venv is built on the wonderful work and successes of the independent virtualenv
  project
- You can probably get pretty far with it if you’re working mostly in a single Python
  version in your Python environment
- In this learning path you’ll cover a range of core skills that any Python data scientist
  worth their salt should know.
- Uses pprint for pretty-printing data structures
- This tutorial covers the Python print() function.
- Attributes include species, name, and age.
- Instances of Dog can be created with name and age.
- The differences between print() and pp() become more apparent with complex data
  structures.
- If you’re going to be following along, you’ll be restarting your computer various
  times during this whole process.
- Printing isn’t thread-safe in Python.
- A context switch means that one thread halts its execution, either voluntarily or
  not, so that another one can take over.
- You aren’t required to use Windows Terminal for this tutorial, but it’s recommended.
- 'Get Your Code: Click here to download the free sample code that shows you how to
  use the print() function in Python.'
- Uses variadic function capabilities for multiple arguments
- Handles different types by calling str() implicitly
- The function applies reasonable formatting to improve readability.
- The ordinary print() function uses ellipses for displaying recursive data structures.
- The atomic nature of the standard output in Python is a byproduct of the Global
  Interpreter Lock.
- Chocolatey is a package manager for Windows.
- To install packages, run commands in an administrator terminal.
- Asking the user for a password with input() is a bad idea because it’ll show up
  in plaintext as they’re typing it. In this case, you should be using the getpass()
  function instead, which masks typed characters.
- The getpass module has another function for getting the user’s name from an environment
  variable. You might find it useful for prefilling a questionnaire.
- Make sure to disable the Python-related app execution aliases before running scripts
- pyenv allows you to install and switch between multiple Python versions without
  interfering with your OS's Python installation.
- Requires specific build dependencies on Linux and macOS systems.
- Asking the user for a password with input() is a bad idea because it’ll show up
  in plaintext as they’re typing it.
- You should be using the getpass() function instead, which masks typed characters.
- The getpass module has another function for getting the user’s name from an environment
  variable.
- Python comes preinstalled on macOS.
- The Microsoft Store package is intended mainly for interactive use.
- Uses print() function for output
- Standard output is both line-buffered and block-buffered depending on which event
  comes first.
- You can complete the installation using alternative Python distributions, such as
  Anaconda.
- Homebrew Python distribution doesn’t include the Tcl/Tk dependency required by Tkinter.
- Terminal bell emulation can be enabled for audible alerts.
- The terminal can be intimidating to work with when you’re used to working with graphical
  user interfaces (GUIs).
- Understanding how to integrate the terminal, `pip`, and Git into your workflows
  is essential for you as a Python developer.
- The logging module is thread-safe by design.
- Uses Git commands to manage repositories and track changes
- Good practice to check the status of your repository often
- If you’re setting up a brand-new Python environment on Windows, then you may want
  to check out this comprehensive guide that walks you through the entire process.
- It’s important that you leave the system Python as the default, because many parts
  of the system rely on the default Python being a specific version.
- Uses Python's built-in print function for output
- The `print()` function displays the output to the console.
- The `pprint()` function formats output for better readability.
- This tutorial provides an in-depth guide to using the print() function in Python.
- print() is a built-in function in Python.
- Standard output is both line-buffered and block-buffered.
- Uses ANSI escape codes for text formatting and color.
- Uses backspace and carriage return for text animations
- sys.stdout.write() itself is an atomic operation.
- Python 3.13 was originally planned to be released on October 1, 2024. The developers
  found some issues during testing and decided to push back the release to October
  7.
- Print function is a built-in function in Python.
- Recursive or very large datasets can be dealt with using the reprlib module as well.
- Color is added to the tracebacks shown when you encounter a runtime error.
- More kinds of error messages provide you with suggestions on how to fix errors.
- Improvements to static typing introduced in Python 3.13
- The garbage collector was rewritten to be incremental in pre-release versions of
  Python 3.13.
- Comments are an integral part of any program.
- Writing comments as you go is a great way to prevent confusion later.
- The print() function can handle multiple arguments and custom separators to format
  output effectively.
- You can redirect print() output to files or memory buffers using the file argument,
  enhancing flexibility.
- Mocking print() in unit tests helps verify code behavior without altering the original
  function.
- Using the flush argument ensures immediate output, overcoming buffering delays in
  certain environments.
- Thread-safe printing is achievable by implementing locks to prevent output interleaving.
- Allows creating console user interfaces and games.
- Even though sys.stdout.write() itself is an atomic operation, a single call to the
  print() function can yield more than one write.
- Comments should be short, sweet, and to the point.
- Inline comments should be used sparingly to clear up bits of code that aren’t obvious
  on their own.
- Python is dynamically typed, allowing type changes through reassignment.
- Variables exist in different scopes (global, local, non-local, or built-in).
- You can have an unlimited number of variables in Python, limited only by computer
  memory.
- Python currently has full Unicode support, and you can use many unicode characters
  in variable names.
- Variables are case-sensitive.
- It's common to use letters like i, j, and k to represent indices.
- When naming lists and dictionaries, use plural nouns in most situations.
- Uses Python's built-in print() function.
- Uses print() function for output.
- Standard output is the primary output stream.
- A truly thread-safe version of the print() function would leverage explicit locking.
- Using print() for all output is not always advisable.
- Python keywords are reserved words with specific functions and restrictions in the
  language.
- Currently, Python has thirty-five keywords and four soft keywords.
- Python data types are fundamental to the language, enabling you to represent various
  kinds of data.
- The most essential data types in Python can be categorized as numeric, sequence,
  binary, and Boolean.
- Error messages have become friendlier and more helpful in Python 3.13.
- You can turn off colored tracebacks by setting the PYTHON_COLORS environment variable
  to 0.
- In Python 3.13, the suggestions for misspelled keywords include keyword arguments
  in function calls.
- The GIL has become more of a troublemaker than a hero as the number of CPUs available
  in computers has increased.
- You may be able to get a free-threaded version of Python from your platform’s regular
  distribution channel.
- The garbage collector was rewritten to be incremental in pre-release versions of
  Python 3.13. This reduced maximum pause times when collecting larger memory heaps.
  However, it also caused much worse performance in some examples.
- A new Python release is always great news!
- You probably won’t be able to take advantage of the new features right away, but
  you should install Python 3.13 on your system and play with it.
- Uses control structures for conditional execution
- Python's `for` loop allows you to iterate over the items in a collection.
- To iterate from `0` to `10`, you use the `for index in range(11):` construct.
- Your comments should be D.R.Y. The acronym stands for the programming maxim “Don’t
  Repeat Yourself.”
- W.E.T. comments can be a simple mistake, especially if you used comments to plan
  out your code before writing it.
- Comments should support your code, not try to explain it away.
- This code is quite unruly.
- Python variables are symbolic names pointing to objects or values in memory.
- You define variables by assigning them a value using the assignment operator.
- Python variables are dynamically typed, allowing type changes through reassignment.
- Functions help organize your code and make it more modular, reusable, and easier
  to maintain.
- Variables should be descriptive to improve code readability.
- Use snake case for multi-word variable names.
- Avoid using keywords as variable names.
- Avoid using built-in names to prevent shadowing.
- Python is a dynamically typed language, which means that variable types are determined
  and checked at runtime rather than during compilation.
- Python doesn’t enforce type hints at runtime. They’re just type-related metadata.
- Annotations don’t impose any restrictions on the code whatsoever.
- You can create variables inside custom Python classes when using object-oriented
  programming tools.
- Class attributes are variables that you create at the class level, while instance
  attributes are variables that you attach to instances of a given class.
- 'To dive deeper into object-oriented programming in Python, check out the following
  tutorials: Object-Oriented Programming (OOP) in Python, Python Classes: The Power
  of Object-Oriented Programming.'
- In practice, you can have class and instance attributes.
- It’s important to note that you can access instance attributes like .name or .position
  using the dot notation on the target instance.
- Instance attributes are specific to one instance, so you can’t access them through
  the class.
- Classes encapsulate data and behavior into a single entity.
- Instance attributes are unique to each object, while class attributes are shared
  across all instances.
- There are 35 keywords and four soft keywords in Python.
- The `print` and `exec` keywords have been deprecated and turned into functions in
  Python 3.
- Data classes are pretty flexible when it comes to defining their fields or attributes.
- Python follows a convention known as the off-side rule for indentation.
- Blocks can be nested to arbitrary depth.
- Using a lengthy `if`/`elif`/`else` series can be a little inelegant, especially
  when the actions are simple statements like `print()`.
- Python’s `for` loop allows you to iterate over the items in a collection, such as
  lists, tuples, strings, and dictionaries.
- Uses advanced looping techniques — breaks, continues, and else clauses.
- Modifying a mutable iterable like a list while iterating raises a warning.
- Creating a copy of the input list isn’t enough for certain modifications.
- Python doesn’t allow adding or removing items from a dictionary during iteration.
- Instance methods should act on instance attributes by either accessing them or changing
  their values.
- Learning to define and call functions is a fundamental skill for any Python developer.
- Inheritance in OOP goes in a single direction, from the parents to the children.
- You should define and initialize instance attributes in .__init__().
- Positional-only arguments are introduced in Python 3.8.
- Keyword-only arguments require use of '*' or must be after '*args'.
- This tutorial will provide a thorough overview of Python’s import statement and
  how it works.
- The main functionality of the app is defined in structure.py
- The app will re-create a given file structure by creating directories and empty
  files
- Python follows snake_case naming convention for functions and methods.
- Python uses PascalCase naming convention for classes.
- You can access the same dictionary by calling the built-in vars() function on your
  class or instance.
- Using .__dict__ to change the value of instance attributes will allow you to avoid
  RecursionError exceptions when you’re wiring descriptors in Python.
- This tutorial provides a thorough overview of Python's import statement and how
  it works.
- The import system is powerful, and you’ll learn how to harness this power.
- Be careful with module names to avoid shadowing built-in modules.
- Use unique top-level module and package names.
- Python classes form the backbone of object-oriented programming, enabling you to
  encapsulate data and behavior into a single entity.
- While all the code is shown in the tutorial, you can also download it.
- In the original example, the choice of serializer was made more dynamically.
- You can either run Python from the proper directory or use pip to install the local
  library as a normal package.
- Requires Python 3.7 or later for standard library access
- Backport available for older versions as importlib_resources
- Data classes are like regular classes but with superpowers.
- Data classes specialize in storing data.
- Namespace packages can be split across multiple directories.
- To avoid shadowing built-in modules, top-level module names should be unique.
- importlib.resources became part of the standard library in Python 3.7
- The Employee class allows for the representation of employees, access to their attributes,
  and computation of their ages.
- Provides access to resources within packages.
- Built-in modules aren’t shadowed by local ones.
- You can extend the Python import system by implementing your own finder and, if
  necessary, your own loader.
- Classes in Python encapsulate data and behavior.
- Relative imports are resolved differently in scripts than in imported modules.
- Most Python programmers follow the snake_case naming convention for functions and
  methods.
- The recommended naming convention for Python classes is PascalCase, where each word
  is capitalized.
- Python does not distinguish between private, protected, and public attributes.
- Non-public members use a leading underscore to indicate they are not intended for
  use outside their containing class.
- Name mangling adds two leading underscores to attribute names, triggering automatic
  name transformation.
- Uses importlib for dynamic imports and resource management.
- To initialize attributes in Car, use super() to access the Vehicle class.
- Reload function requires a module object, not a string
- Built-in modules are not shadowed by local ones
- This tutorial covers the Python import system and related tips.
- This tutorial provides a thorough overview of Python’s import statement and how
  it works.
- No spam. We take your privacy seriously.
- Handles missing packages by falling back to alternatives.
- Uses optional imports with error handling.
- Imports in Python are important for structuring your code effectively.
- Using imports properly will make you more productive, allowing you to reuse code.
- Namespaces allow adding new functionality without modifying existing packages.
- The app will re-create a given file structure by creating directories and empty
  files.
- You can simulate installing a third-party package locally.
- importlib.resources gives access to resources within packages
- Resource files must be available inside a regular package
- Uses Python's import system for code organization and structure
- 'Warning: In most cases, it really wouldn’t be great to have Python install modules
  automatically.'
- The documentation provides examples of dynamic imports using the importlib package.
- Having two or more modules importing each other is often a sign that you can improve
  the design of your modules.
- Keep your modules free of side effects at import time.
- Do your imports locally inside functions to avoid issues with cyclical imports.
- Namespace packages allow adding serializers without modifying third-party libraries.
- Introduces a standard way of dealing with resource files in packages.
- Uses dynamic imports for plugins.
- Namespace packages are not allowed to use __init__.py.
- Built-in modules are compiled into the Python interpreter. Typically, they’re foundational
  modules like builtins, sys, and time.
- You can customize sys.meta_path to your liking.
- Python does not enforce public or private names with access restrictions.
- It relies on naming conventions, where public names have no underscores and non-public
  names start with a single underscore.
- Uses importlib.resources to access resources within packages
- Dynamic module importation using importlib.
- Modules are loaded once and stored in sys.modules.
- This article is Python 3-centric. Specifically, all code examples in this tutorial
  were generated from a CPython 3.7.2 shell, although all minor versions of Python
  3 should behave (mostly) the same in their treatment of text.
- Handles resource files within packages.
- Unicode encompasses a way, way bigger set of code points.
- Always check the encoding of external data.
- In most cases, it really wouldn’t be great to have Python install modules automatically.
- The most authoritative source on the Python import system is the official documentation
- Uses importlib.resources to handle resource files within packages
- The module provides access to the mathematical functions defined by the C standard.
- The module is always available.
- Built-in modules are compiled into the Python interpreter and aren't shadowed by
  local ones.
- Using pip to automatically install missing packages can have unintended consequences.
- Strings in Python are immutable.
- Single characters are strings of length one.
- The import system is powerful, allowing for dynamic imports and customization.
- Use namespace packages in a proper factory method pattern.
- Python bytes objects are immutable sequences of unsigned bytes used for handling
  binary data.
- The difference between bytes and bytearray is that bytes objects are read-only,
  while bytearray objects are mutable.
- Dynamic imports using importlib
- Handles plugin architecture
- Uses Python's import system for loading modules.
- Uses try...except for handling missing packages
- Uses low-level binary processing in Python for digital steganography
- Namespace packages have been available in Python since version 3.3.
- Lists are ordered, zero-based, mutable, heterogeneous, growable, dynamic, nestable,
  iterable, sliceable, combinable, and copyable.
- List literals are a common way to create lists in Python.
- Lists can store heterogeneous objects.
- CSV field names can contain spaces and other characters that aren’t allowed in Python
  attribute names.
- Slicing is an operation that’s common to all Python sequence data types.
- Creating shallow and deep copies of lists are common needs in Python code.
- Uses importlib.resources on Python 3.7 and newer while falling back to importlib_resources
  on older versions of Python.
- If you really need modules with import cycles and side effects, do your imports
  locally inside functions.
- Lists are mutable data types that can be changed without altering their identity.
- The .append() method adds a single item to the end of a list.
- The .extend() method adds multiple items to the end of a list.
- The .insert() method adds an item at a specified index.
- .remove(item) removes the first occurrence of item from the list.
- .pop([index]) removes the item at index and returns it.
- .clear() removes all items from the list.
- Using the del statement can remove items from a list.
- Confusing aliases of a list with copies can cause issues because changes to one
  alias affect others.
- Forgetting that most list methods mutate the list in place and return None rather
  than a new list can lead to issues.
- Confusing .append() with .extend() can cause issues because .append() adds a single
  item to the end of the list, while the .extend() method unpacks and adds multiple
  items.
- Using an empty list as a default argument value in function definitions can lead
  to unexpected behaviors.
- Make sure that your local library is available like a normal package.
- You can simulate a third-party package by installing it locally.
- To dive deeper into how to flatten a list of lists, check out [How to Flatten a
  List of Lists in Python](https://realpython.com/python-flatten-list/).
- For a complete walk-through of splitting a list or iterable into chunks, check out
  [How to Split a Python List or Iterable Into Chunks](https://realpython.com/how-to-split-a-python-list-into-chunks/).
- For a deep dive into what stacks are and how to create them in Python, check out
  [How to Implement a Python Stack](https://realpython.com/how-to-implement-python-stack/).
- Check out [Python Stacks, Queues, and Priority Queues in Practice](https://realpython.com/queue-in-python/)
  for a complete walk-through of stacks and queues in Python.
- Built-in modules aren’t shadowed by local modules.
- Reloading modules requires using importlib.reload()
- The easiest time to fix cyclical imports is before you implement them. If you see
  cycles in your architecture sketches, have a closer look and try to break the cycles.
- If you need modules with import cycles and side effects, do your imports locally
  inside functions.
- Tuples are immutable sequences that provide a reliable container for data that’s
  likely to remain unmodified during your code’s lifetime.
- Use tuples when you need to ensure data integrity, reduce memory consumption, or
  improve performance.
- In this article, 'Python' will refer to the reference implementation of Python in
  C, otherwise known as CPython.
- Understanding pointers in Python requires a short detour into Python’s implementation
  details.
- Set comprehensions automatically remove duplicates.
- Python doesn't have dedicated keywords for public or private members.
- Naming conventions signal intent for public and non-public names.
- Sets provide efficient ways to handle collections of unique items, perform membership
  tests, and execute set operations.
- Unicode encompasses a way bigger set of code points than ASCII.
- ASCII is a perfect subset of Unicode.
- Floating-point representation errors can occur in arithmetic operations.
- Python supports both integers and floating-point numbers.
- Python has built-in support for complex numbers.
- None can be useful in combination with short-circuit evaluation.
- Some comparisons on floating-point numbers can lead to surprising results.
- Functions for creating and manipulating data types in Python.
- Escape sequences are used to suppress or apply special meanings to characters in
  strings.
- Raw strings help avoid issues with escape sequences.
- Formatted string literals allow for easy interpolation of variables.
- Methods are functions that you define inside classes.
- 'The syntax for invoking a method on an object is shown below: object.method([arg_0,
  arg_2, ..., arg_n])'
- Includes several built-in functions in Python
- The bytes data type is an immutable sequence of unsigned bytes used for handling
  binary data in Python.
- You convert a Python string to bytes using the str.encode() method, the bytes()
  function, or the codecs module.
- Uses Python's buffer protocol for efficient data handling
- Supports interoperability between libraries using bytes-like objects
- The `bytes` data type is an immutable sequence of unsigned bytes used for handling
  binary data in Python.
- The difference between `bytes` and `bytearray` is that `bytes` objects are read-only,
  while `bytearray` objects are mutable.
- Unless you have a compelling reason, it’s generally preferable to stick to the available
  high-level abstractions rather than reinvent the wheel.
- Uses Python for handling binary data
- Lists can contain heterogeneous objects.
- Using list comprehensions is a common practice for creating lists.
- Lists are mutable data types allowing in-place mutations.
- Using the indexing operator allows access to target items.
- Negative indices also work for accessing elements.
- You can only concatenate a list with another list.
- The concatenation operator raises a TypeError exception when you try to concatenate
  a list with a different data type.
- Python lists are versatile, flexible, and powerful data structures.
- Modifying a list during iteration can lead to unexpected behavior.
- Confusing aliases of a list with copies can cause issues.
- Most `list` methods mutate the list in place and return `None`.
- Lists are powerful, flexible, versatile, and full-featured data structures.
- Lists maintain the order of insertion of their items.
- Lists are mutable data types that support multiple mutations.
- Tuples are immutable and cannot be changed in place.
- Tuples can be used as dictionary keys if all items are hashable.
- Python’s built-in set data type is a mutable and unordered collection of unique
  and hashable elements.
- You can create sets using literals, the set() constructor, or comprehensions.
- Set operations are fundamental for data manipulation in Python.
- You can’t sort a set in place because they’re unordered data types.
- To get the most out of this tutorial, you should have a basic understanding of Python
  programming concepts
- To learn more about concatenating string objects, check out Efficient String Concatenation
  in Python.
- 'To learn more about concatenating lists, check out the Concatenating Lists section
  in the tutorial Python’s list Data Type: A Deep Dive With Examples.'
- 'For a deep dive into how the walrus operator works, check out The Walrus Operator:
  Python’s Assignment Expressions.'
- For a deep dive into the bitwise operators, check out Bitwise Operators in Python.
- You can also check out Build a Maze Solver in Python Using Graphs for an example
  of using bitwise operators to construct a binary file format.
- Python has many built-in functions that you can use directly without importing anything.
- To get correct amplitude values, you must double the number and divide the resulting
  magnitude by the sample count.
- If you only care about a frequency histogram, then you can normalize magnitudes
  by their sum or the maximum frequency.
- Uses Python's built-in functions for data manipulation
- The math module comes packaged with the standard Python release.
- Python’s built-in types include list, tuple, dict, set, and frozenset.
- Lists are mutable, while tuples are immutable.
- Dictionaries store key-value pairs, and sets only allow unique elements.
- factorial() accepts only positive integer values
- math.ceil() returns the smallest integer greater than or equal to the given number
- math.floor() returns the closest integer less than or equal to the given number
- math.trunc() rounds towards zero
- math.isclose() has default relative tolerance of 1e-09 and absolute tolerance of
  0.0
- math.pow() is more efficient than built-in pow() and x ** y
- The `input()` function reads the user’s input as a string.
- Using `open()` function allows reading from and writing to files.
- The math module provides a function, exp(), that lets you calculate the natural
  exponent of a number.
- To dive deeper into using the print() function, check out the Your Guide to the
  Python print() Function tutorial.
- To dive deeper into flushing the output of print(), check out the How to Flush the
  Output of the Python Print Function tutorial.
- To learn more about format specifiers, check out the Python’s Format Mini-Language
  for Tidy Strings tutorial.
- For a deeper dive into instance, class, and static methods, check out the Python’s
  Instance, Class, and Static Methods Demystified tutorial.
- Functions come in handy when you need to manipulate attributes using their names
  as strings.
- String concatenation can be achieved using +, +=, and .join() methods.
- Efficiently concatenate strings using various methods.
- Remember that .join() is a string method, which means that you’ll need to call it
  on a single string object.
- When using .join(), ensure that the iterable consists only of strings.
- The len() function in Python returns the number of items in an object, such as strings,
  lists, or dictionaries.
- Asynchronous iterators allow you to iterate over items asynchronously using async
  for loops.
- This tutorial serves as an introduction to instance, class, and static methods in
  Python.
- F-strings offer a concise and efficient way to interpolate variables, objects, and
  expressions directly into strings.
- F-strings are evaluated at runtime.
- Python’s bytearray is a mutable sequence of bytes that allows you to manipulate
  binary data efficiently.
- Complex numbers can be visualized as points or vectors on a complex plane.
- Complex numbers have a magnitude calculated by the abs() function.
- bytearray is mutable and extends the functionality of bytes.
- Uses the cmath module for complex number operations.
- Some operations may raise exceptions if not handled properly.
- Inputting a negative value will result in a ValueError
- Inputting a decimal value results in a ValueError
- Functions return float values.
- Input must be a numerical value for exp() and log().
- Python's concatenation operators can only concatenate string objects.
- The .join() method is a more efficient tool for concatenating multiple strings.
- Uses StringIO for string concatenation
- Python doesn't have constants in the strict sense of the word.
- To tell other Python programmers that a given variable should be treated as a constant,
  you must write your variable’s name in capital letters with underscores separating
  the words.
- Demonstrates various techniques for string concatenation in Python
- Values in array must be of the same data type
- Uses sorted() and .sort() for sorting in Python
- The sorted() function returns a new sorted list without modifying the original iterable
- The len() function operates in constant time, O(1), as it accesses a length attribute
  in most cases.
- Iterators control loops, allowing you to traverse arbitrary data containers one
  item at a time.
- Iterators are memory-efficient and can handle infinite data streams.
- Generator functions allow you to create iterators using a functional style.
- Asynchronous iterators, async for loops, and asynchronous comprehensions don’t make
  the iteration process parallel.
- The .__anext__() method must raise StopAsyncIteration instead of StopIteration at
  the end to signal that the data is over.
- OrderedDict is a dict subclass that preserves the order of items.
- Uses OrderedDict to maintain order of items in queue
- F-strings joined the party in Python 3.6 with PEP 498
- An f-string in Python is a string literal prefixed with 'f' or 'F', allowing for
  the embedding of expressions within curly braces {}
- Python’s collections provides specialized container data types for common programming
  problems.
- Python's bytearray is a mutable sequence of bytes that allows you to manipulate
  binary data efficiently.
- You can create a bytearray using the bytearray() constructor with various arguments
  or from a string of hexadecimal digits.
- bytearray is a mutable sequence of bytes
- You can modify a bytearray by changing, appending, or inserting individual bytes
- Python's assignment operators allow you to define assignment statements.
- Assignment statements are a fundamental part of the language.
- Control flow in Python refers to the order in which code statements are executed
  or evaluated.
- Common control flow statements in Python include conditionals with the if, elif,
  else keywords, loops with for and while, exception handling with try … except, and
  structural pattern matching with match … case.
- Using nested loops is sometimes a good solution.
- More than two levels of nesting might make your code hard to read and understand.
- Nested loops can increase the time complexity of your code, potentially affecting
  performance.
- Assignment expressions with the walrus operator have several practical use cases.
- They also have a few restrictions, such as being illegal in certain contexts.
- Keep the code block under the try keyword short and focused.
- The except keyword catches the specified exception type if it occurs during the
  execution of your error-prone code.
- The order of the declared exceptions matters because Python stops at the first matching
  except clause.
- Keywords cannot be used as variable names in assignment statements.
- Python does not have constants in the strict sense; variables can be reassigned.
- To denote a variable as a constant, use capital letters with underscores.
- Uses break statement to exit loops early.
- The break statement doesn't exit all loops, only the innermost loop that contains
  it.
- Uses built-in functions for sorting without modifying original data structures.
- Uses key functionality for sorting strings and numbers.
- Avoids in-place modification with sorted() to preserve original data.
- PyQt6 is compatible with Windows, Unix, Linux, macOS, iOS, and Android.
- For PyQt6 to work, you need Python 3.6.1 or later.
- The __init__() method attempts to return an integer, which raises a TypeError exception
  at run time.
- __init__() should return None, not 'int'.
- Methods and functions without an explicit return statement just return None implicitly
  in Python.
- Attributes can be validated before initializing instance attributes.
- A more Pythonic technique to tackle attribute validation is to turn attributes into
  properties.
- You should create your app instance before you create any GUI object in PyQt.
- If your application needs to accept command-line arguments, then you should use
  sys.argv.
- Layout managers can help increase productivity and improve code maintainability.
- Dialog windows can be modal or modeless.
- You can’t create a main window without a central widget.
- If you’re running this example on macOS, then you may have issues with the app’s
  main menu.
- This script implements all the boilerplate code that you’ll need to run a basic
  GUI application.
- 'To dive deeper into Qt Designer and better understand how to use this tool to create
  graphical user interfaces, check out Qt Designer and Python: Build Your GUI Applications
  Faster.'
- Graphical user interface (GUI) applications still hold a substantial share of the
  software development market.
- Python offers a handful of frameworks and libraries that can help you develop modern
  and robust GUI applications.
- Regular dictionaries have kept their items in the same order that they were inserted
  since Python 3.6.
- Uses OrderedDict to maintain the order of items.
- Be aware that Python’s import system presents some significant security risks.
- OrderedDict preserves the order of items based on insertion.
- Counter is a dict subclass designed for counting hashable objects.
- Dictionaries are a cornerstone of Python.
- From Python 3.6 onward, dictionaries are compact ordered data structures.
- Function can only run on Linux systems.
- Conditional statements are how you make decisions in your code.
- Dealing with errors and exceptional situations is a common requirement in programming.
- Python is flexible and efficient enough that you can select the right strategy to
  deal with errors and exceptional situations in your code.
- LBYL coding style introduces the risk of race conditions.
- EAFP coding style can prevent race conditions.
- The Zen of Python is a humorous poem listing Python philosophies.
- The Zen of Python is a humorous poem listing opinionated Python philosophies authored
  by Tim Peters.
- IPython comes installed with the Anaconda package.
- If you’ve installed the full Anaconda package, then you already have IPython.
- IPython offers enhanced functionalities over the standard Python shell.
- For beginners, it’s a good idea to use the percentage prefix with magic commands
  to ensure clarity in code flow.
- If a path that you wish to bookmark contains spaces, then you’ll need to use quotation
  marks around it.
- Common mistakes include unintended infinite loops, conditions that are always true
  or false, and wrong order of conditions.
- bpython is a pure-Python package serving as a lightweight wrapper around a chosen
  Python interpreter.
- bpython isn’t natively supported on Windows because it depends on the curses library,
  which is only available on Unix-like systems.
- Uses GNU Readline for command history
- Copy to clipboard requires installation of pyperclip
- Uses while loops for executing blocks of code repeatedly based on conditions.
- bpython doesn’t work on Windows without tweaking; best option is to use WSL.
- To use the GitHub API, you must create a GitHub personal access token with the gist
  scope selected.
- Uses break statement to exit loops early
- The else clause triggers if you don’t hit a break statement inside the loop
- Using continue incorrectly may result in skipping necessary code.
- You can’t use continue in a function or class that’s nested in a loop.
- bpython is not natively supported on Windows due to dependency on the curses library
- It is recommended to use the Windows Subsystem for Linux (WSL) to run bpython on
  Windows
- bpython provides several code editing features that are missing from the vanilla
  Python REPL.
- The language doesn’t have this loop construct, which you can find in languages like
  C, C++, Java, and JavaScript.
- To use the GitHub API, you must create a GitHub personal access token with the gist
  scope selected if you want to create gists programmatically.
- bpython doesn’t work on Windows without a bit of tweaking
- There are small differences in presentation and behavior between the regular Python
  REPL and bpython
- PyQt6 is based on Qt v6 and requires Python 3.6.1 or later.
- ptpython is a feature-rich and user-friendly Python REPL that enhances the interactive
  coding experience.
- Uses automatic indentation for Python code.
- Clears workspace while retaining variables using Ctrl + L.
- Create your app instance before creating any GUI object in PyQt.
- Use sys.argv to handle command-line arguments if needed.
- Emacs packages can be installed from MELPA.
- You can configure elpy and other packages interactively.
- Developed a fully functional GUI desktop application with Python and PyQt.
- Use IPython for REPL
- Enable Flycheck for on the fly syntax checking
- Use 'Ctrl' + 'C' 'Ctrl' + 'C' to execute cells in Jupyter Notebooks
- Python IDLE is completely free and comes packaged with the Python language itself.
- Python IDLE is an IDE included with Python installations, designed for basic editing,
  execution, and debugging of Python code.
- Python IDLE is free and comes included in Python installations on Windows and macOS.
- IDLE stands for 'Integrated Development and Learning Environment.'
- Avoid complex return expressions.
- Prefer self-contained functions over those that modify global variables.
- Thonny is designed for beginner Python programmers.
- Built-in debugger is available to help with code errors.
- Offers a package manager for installing third-party packages.
- 'PyCharm comes in three editions: Edu (free), Community (free), and Professional
  (paid).'
- Only the section about the professional features will use PyCharm Professional Edition
  2019.1.
- Examples in this article are tested with pandas version 0.23.2 and Python 3.6.6.
- If your code is syntactically correct, then you may get other exceptions raised
  that are not a SyntaxError.
- Ruff works out of the box, so no complicated installation instructions or configurations
  are needed to start using it.
- Ruff is a modern linter that’s extremely fast and has a simple interface.
- PEP 8 exists to improve the readability of Python code.
- Following PEP 8 is particularly important if you’re looking for a development job.
- You can’t handle invalid syntax in Python like other exceptions.
- PEP 8 suggests lines should be limited to 79 characters.
- Use four consecutive spaces to indicate indentation.
- Prefer spaces over tabs.
- PEP 8 recommends that you always use four consecutive spaces to indicate indentation.
- PEP 8 is a guide for writing clean, readable, and consistent Python code.
- PEP 8 is still relevant in modern Python development.
- Following PEP 8 is recommended for all Python developers.
- Uses four consecutive spaces to indicate indentation.
- Python 3 doesn’t allow mixing of tabs and spaces.
- Limit the line length of comments and docstrings to 72 characters.
- Use complete sentences, starting with a capital letter.
- Make sure to update comments if you change your code.
- Python exceptions provide a mechanism for handling errors that occur during the
  execution of a program.
- It's bad practice to catch all exceptions at once using except Exception or the
  bare except clause.
- Using assertions can be helpful when debugging your code, but you should never use
  assertions to set crucial constraints for your program.
- PEP 8 provides guidelines for writing Python code.
- Indentation is crucial in Python and should be consistent.
- Python supports both LBYL and EAFP coding styles for error handling.
- In a multi-threaded environment, the LBYL approach can risk introducing a race condition
  between 'the looking' and 'the leaping'.
- Python's exception-handling mechanisms are pretty efficient when no exception is
  raised.
- Avoid trailing whitespace in Python code
- PEP 8 outlines style guidelines for Python code
- The LBYL coding style can risk introducing a race condition.
- Race conditions can occur when different programs, processes, or threads access
  a given computational resource at the same time.
- Ruff acts as both a linter and an autoformatter.
- By default, Ruff omits flagging most E type errors.
- This documentation emphasizes best practices for high-quality code in Python.
- The Zen of Python consists of nineteen aphorisms that promote Pythonic code.
- The standard library covers a wide variety of use cases, including system scripting
  and automation, web development, text and data processing, basic networking and
  client-server communication, concurrency and multithreading, data storage and serialization.
- IPython offers an enhanced version of interactive Python with magic commands.
- It can be embedded into existing Python scripts.
- Python’s asyncio library enables you to write concurrent code using the async and
  await keywords.
- Uses Python's async I/O model for better performance in I/O-bound tasks.
- Uses asyncio for asynchronous programming
- Async I/O is ideal for I/O-bound tasks
- Uses IPython commands to manage session variables and code
- bpython isn’t natively supported on Windows because it depends on the curses library.
- The csv library is designed to work with Excel-generated CSV files.
- Pandas library is recommended for handling large datasets.
- Uses GNU Readline or emulation for command history.
- Editing features allow for quick fixes and code sharing.
- pandas automatically recognizes the first line of the CSV as column names.
- pandas uses zero-based integer indices in the DataFrame.
- bpython doesn’t work on Windows without a bit of tweaking.
- Pasting a piece of code into bpython may freeze the REPL until the entire code has
  finished executing.
- Printing certain ANSI escape codes can completely crash bpython.
- Uses a custom configuration file for settings
- Default configuration path is ~/.config/bpython/config
- Times are recorded in MM:SS:mmmmmm format and the accepted time for an event is
  the median of the recorded times.
- You must create a GitHub personal access token with the gist scope selected if you
  want to create gists programmatically.
- Make sure to set the GITHUB_TOKEN environment variable before running the script.
- Despite its relatively long history, bpython hasn’t technically reached version
  1.0 yet.
- There are small differences in presentation and behavior between the regular Python
  REPL and bpython.
- The *pt* part of ptpython refers to Prompt Toolkit which is a library for building
  interactive command line applications that ptpython uses under the hood.
- The recipes section is an excellent source of inspiration for ways to use itertools.
- Uses automatic indentation for functions and classes in Python shell
- Impressive power lies in augmented interactive Python shells.
- Ptpython is a powerful companion that you can readily modify and tailor to your
  specific needs.
- VS Code supports development in multiple programming languages through a well-documented
  extension model.
- Visual Studio Code is highly configurable through user and workspace settings.
- VS Code can automatically recognize existing Python tests written in the unittest
  framework.
- Debugging code in a single Python file is as simple as starting the debugger using
  F5.
- You can add packages interactively after the packaging infrastructure is set up.
- Python provides robust tools to facilitate the process and help manage JSON data
  efficiently.
- Python IDLE is free and comes included with every Python installation.
- The only current default extension is ZzDummy, an example also used for testing.
- Thonny is actively maintained, and new features are being added all the time.
- The ASCII and LOCALE flags are available in case you need them for special circumstances.
- In general, the best strategy is to use the default Unicode encoding.
- 'PyCharm comes in three editions: Edu, Community, and Professional.'
- subprocess isn’t a GUI automation module or a way to achieve concurrency.
- PyCharm supports various testing frameworks such as unittest, pytest, and others.
- VCS integration supports Git, Mercurial, Perforce, and Subversion.
- Plugins can add functionality to enhance productivity.
- Uses subprocess for process communication
- Ensure proper handling of stdin and stdout
- The subprocess module allows you to launch and interact with child processes.
- Using Popen can be tricky and is prone to errors.
- Ruff works out of the box, no complicated installation instructions or configurations
  needed.
- Width and height are measured in text units, not pixels.
- Widgets can be assigned to Frames for layout organization.
- Tkinter is Python’s standard GUI framework
- Tkinter is included with most Python installations, so separate installation is
  often unnecessary
- Tkinter is still a relevant choice for building simple, cross-platform GUI applications
- Width and height are measured in text units, relative to the default font.
- Frames are best thought of as containers for other widgets.
- PEP 8 encourages breaking lines after binary operators for better readability.
- Indentation level of lines of code determines how Python groups statements together.
- Layout can be difficult to manage with `.place()`.
- Layouts created with `.place()` aren’t responsive.
- .grid() offers flexibility in widget placement
- Widgets can be configured to span multiple rows and columns
- PEP 8 encourages breaking before binary operators for readability.
- Indentation is crucial in Python, with four spaces being the standard.
- Use spaces instead of tabs for indentation.
- Python 3 does not allow mixing tabs and spaces.
- PEP 8 recommends using four consecutive spaces for indentation.
- Label widgets display text with default system text color and background.
- Width and height for Label are measured in text units.
- Entry widgets capture small amounts of text; Text widgets capture larger text.
- PEP 8 provides guidelines for writing clean and readable Python code.
- Indentation using four spaces is widely recommended.
- Avoid trailing whitespace at the end of a line.
- PEP 8 outlines clear examples where whitespace is inappropriate.
- Ruff is both a linter and an autoformatter.
- The default setting omits flagging most E type errors.
- Widgets can be assigned to frames using the master attribute.
- Frames are containers for organizing widget layout.
- Uses Tkinter for GUI applications
- Layout may not be responsive across different operating systems
- Good Python code is characterized by readability, maintainability, efficiency, and
  adherence to standards like PEP 8.
- This documentation covers best practices for writing high-quality Python code.
- Writing high-quality code is crucial for you as a Python developer.
- High-quality code reduces development costs, minimizes errors, and facilitates collaboration
  between coworkers.
- Tkinter is Python’s standard GUI framework, making it convenient for developing
  graphical user interfaces.
- Tkinter is included with most Python installations, so separate installation is
  often unnecessary.
- The standard library is designed to be both broad and deep.
- It helps you do more with less by reducing the need for external dependencies while
  encouraging idiomatic, readable code.
- Async I/O isn’t a new concept. It exists in—or is being built into—other languages.
- Width and height are measured in text units based on the default font.
- For Text widgets, indices must contain line numbers and character positions.
- Frame widgets are important for organizing the layout of your widgets in an application.
- Uses asyncio for asynchronous programming.
- Suitable for non-blocking operations.
- Mastering asyncio is essential when building scalable network servers, web APIs,
  or applications that perform many simultaneous I/O-bound operations.
- Utilizes tkinter for GUI development
- Each Entry has the same width, set to 50.
- Labels are created from a list of field strings.
- pandas recognizes the first line of the CSV as column names
- pandas uses zero-based integer indices in the DataFrame
- Application allows conversion from Fahrenheit to Celsius
- The grouper function can be found in the Recipes section of the itertools docs.
- Uses median of three times for event times.
- The 'Times' field in the CSV is stored as a list.
- The count() function also accepts non-integer arguments.
- The first value in the iterator returned by accumulate() is always the first value
  in the input sequence.
- The unittest package provides a unit test framework inspired by JUnit.
- The framework uses an object-oriented approach and supports essential concepts for
  test creation and automation.
- The `random.shuffle()` function uses the Fisher-Yates shuffle to shuffle a list
  (or any mutable sequence) in place in O(n) time.
- Uses a test-driven development approach.
- Data is provided in a CSV format.
- Code testing using test-driven development (TDD) methodology
- Avoid brute force algorithms when possible.
- Infinite iterators can be powerful but need to be used with care.
- The unittest framework supports test discovery based on naming conventions.
- Historical daily price data of the S&P500 index can be found in SP500.csv
- The data improves for later dates.
- 'Percent change between two values is calculated using the formula: ((new_value
  - old_value) / old_value) * 100.'
- The unittest package is directly available in the standard library.
- JSON in Python is handled using the standard-library json module, which allows for
  data interchange between JSON and Python data types.
- JSON is a good data format to use with Python as it’s human-readable and straightforward
  to serialize and deserialize, which makes it ideal for use in APIs and data storage.
- Uses json.dumps() and json.load() for serialization and deserialization
- Python can work with JSON files no matter how they’re indented.
- When you set the indentation level when serializing JSON data, then you end up with
  prettified JSON data.
- Tests validate function behavior for input ranges from 0 to 2
- Pathlib provides a modern way of working with file paths.
- Regex syntax takes a little getting used to.
- Uses raw strings for regex to avoid double escaping.
- pip stands for 'pip installs packages', indicating its primary function.
- pip manages Python packages that aren’t part of the standard library.
- You should use pip whenever you need external Python packages for your projects.
- To install packages, use 'pip install <package_name>' command.
- The `MULTILINE` flag only modifies the `^` and `$` anchors.
- The `DEBUG` flag displays debugging information about the regex parsing process.
- In general, the best strategy is to use the default Unicode encoding. This should
  handle any world language correctly.
- As of Python 3.7, it’s deprecated to specify (?<flags>) anywhere in a regex other
  than at the beginning.
- Having two requirements files allows for separate production and development dependencies.
- Use the -r switch in requirements_dev.txt to include production requirements.
- uv is a high-speed package and project manager for Python.
- uv integrates multiple functionalities into one tool.
- Beware of command injections when dynamically building user inputs for subprocess
  calls.
- Using subprocess can be a quick and efficient way to solve a problem.
- Uses subprocess to launch and interact with child processes
- For complex processing, consider using asyncio subprocess functionality
- You must also change the name key to something unique that doesn’t exist in TestPyPI.
- If you’re unable to get a working Python installation on your flavor of Linux, then
  you can build Python with the correct version of Tcl/Tk from the source code.
- It’s possible to pip install a package from a Git repository or directly install
  a Python wheel you find online.
- Any third-party package worth considering should have a project link to the project’s
  source code.
- Be cautious of files downloaded from the web and external packages.
- uv supports reproducible installs based on native locking
- pip needs pip-tools for reproducibility
- Uses MIT license
- Written in Rust
- Text widgets can contain multiple lines of text and support operations like retrieving,
  deleting, and inserting text.
- Frame widgets are used to organize the layout of other widgets in an application.
- A configuration file might be overkill for this simple package.
- You could instead define the URL as a module level constant directly in your source
  code.
- Tkinter is still a relevant choice for building simple, cross-platform GUI applications.
- Uses TOML for configuration
- Requires installation of third-party libraries for some features
- Width and height are measured in text units in Tkinter.
- If you omit the master argument when creating a new widget instance, then it’ll
  be placed inside of the top-level window by default.
- Uses a configuration file to specify the URL of the feed.
- Uses .pack() geometry manager for widget placement.
- The .place() geometry manager is not responsive.
- An event is any action that occurs during the event loop that might trigger some
  behavior in the application, such as when a key or mouse button is pressed.
- The default version of Python on Ubuntu Linux 20.04 has no support for Tkinter.
- Editable installs work around this by linking directly to your source code.
- You may get an error message saying 'Project file has a ‘pyproject.toml’ and its
  build backend is missing the ‘build_editable’ hook.'
- Width and height are measured in text units.
- To insert text onto a new line, insert a newline character manually.
- The package can be used to read Real Python tutorials in your console.
- Widgets can be added to a Frame for better organization.
- Each Frame widget can have different properties.
- Widgets can be placed using .pack(), .grid(), or .place()
- Use .grid() for responsive layouts.
- Poetry does not currently support PEP 621
- The event loop is maintained by Tkinter's mainloop method.
- Each tutorial at Real Python is created by a team of developers so that it meets
  our high quality standards.
- Creating a window with Tkinter only takes a couple of lines of code.
- The examples have been tested with Python 3.7 and pandas 0.25.0.
- Width and height are measured in text units, not pixels or inches.
- Widgets like Label, Button, Entry, Text, and Frame are available in Tkinter.
- Invalid values can be even more dangerous than missing values.
- Be prepared for surprises whenever you’re working with raw datasets.
- When combining datasets, ensure to validate the ranges of your data.
- .place() can lead to unresponsive layouts
- .grid() is more flexible and easier to manage than .place()
- Cohort-based course designed to build real Python skills.
- Participants will engage with live classes and Q&A sessions.
- Course is designed for a commitment of around 90 minutes per day.
- Application performs conversion from Fahrenheit to Celsius
- Uses Tkinter for GUI creation
- The unittest package is part of the Python standard library.
- Supports test discovery and grouping through TestSuite class
- No prior programming experience necessary
- Free updates for life
- The `main()` function allows you to load and run a set of tests.
- The verbosity argument can be set to 0 for quiet, 1 for normal, or 2 for detailed
  output.
- The TestSuite class allows you to create test suites.
- Utilizes test-driven development methodology.
- The unittest framework comes with the Python standard library, so you don’t have
  to install third-party packages to start writing your tests.
- The `math` module includes the Python square root function, `sqrt()`.
- The Python installer gives you the option to install pip when installing Python
  on your system.
- Uses PyPI as a package index
- Packages can also be installed from Git repositories
- Uses flexible version specifiers in requirements files
- Freezing dependencies is important for production
- pip stands for 'pip installs packages', highlighting its primary function as a package
  manager in Python.
- pip has been included with Python installers since version 3.4.
- Uses a dedicated virtual environment located at .venv
- To keep PyPI unpolluted, you shouldn’t upload rpcats to the index.
- Pillow is a fork of the Python Imaging Library (PIL)
- Pillow supports image formats like JPEG, PNG, and more
- Be careful about files downloaded from the Web.
- Even when using a virtual environment, Python packages can access other parts of
  your operating system.
- Stay updated with trusted packages to avoid unexpected bugs.
- Pay attention to typos when installing packages with pip.
- Beware of typosquatting where similar-sounding packages may be malicious.
- Choosing the right package installer can greatly affect your workflow as a Python
  developer.
- This library provides various image manipulation techniques including rotation,
  flipping, and filtering.
- Different operating systems may yield slightly different results when processing
  images due to varying JPEG decoders.
- Real-life job boards may quickly change in structure and availability.
- Uses @cache to avoid reading from the web feed more than necessary
- Class names are used to identify elements of interest.
- Job postings are wrapped in a div with class 'card-content'.
- Uses caching to avoid reading the web feed more than once
- The website serves static HTML content.
- The linked websites return their search results as static HTML responses.
- If you’re sharing your package with others, then you need to add a license to your
  package that explains how others are allowed to use your package.
- Editable installs have been formalized in PEP 660.
- You should add a file named 'LICENSE' to your project that contains the text of
  the license you choose.
- Web scraping is the automated process of extracting data from websites.
- Challenges include handling dynamic content generated by JavaScript and accessing
  login-protected pages.
- A configuration file might be overkill for this simple package. You could instead
  define the URL as a module level constant directly in your source code.
- While this tutorial is tested with this specific version of scikit-learn, the features
  that you’ll use are core to the library and should work equivalently in other versions
  of scikit-learn as well.
- Function allows for splitting datasets into training and test sets.
- Can specify train_size, test_size, random_state, shuffle, and stratify options.
- train_test_split() is a function from scikit-learn that splits your dataset into
  training and test subsets.
- Free threading and JIT compiler are experimental features aimed at power users
- Do not use Python 3.13 with experimental features in a production environment
- You can’t configure your package with both Setuptools and Poetry at the same time.
- Users must have an earlier version of Python to build Python 3.13 with JIT support.
- Compiling Python with free threading and JIT support requires specific configuration
  flags.
- Data is available in CSV format for download.
- Uses environment variable PYTHON_GIL to toggle GIL status.
- Experimental JIT compiler may provide slight performance boosts.
- Free threading and JIT compiler are experimental features aimed at power users.
- Do not use Python 3.13 with experimental features in a production environment.
- Only the column notes contains null values for the majority of its rows.
- Python 3.13 includes experimental features like free threading and JIT support
- Source code can be downloaded from GitHub or python.org
- Inconsistent values should be checked to ensure they fit with the values in other
  columns.
- The JIT compiler's status is determined by the presence of the _Py_JIT macro.
- In Python 3.13 or above, the _testinternalcapi module can be used to check if the
  JIT is enabled.
- To eliminate bias, you should run this benchmark against a Python build with JIT
  but no free-threading support.
- This problem only affects C extension modules as opposed to pure-Python packages.
- Uses experimental JIT compiler for Python 3.13
- Free threading support requires --disable-gil configuration
- 'Course Dates & Registration: Oct 13–Dec 5, 2025'
- 'Investment: $2,999 $2,000 (Sold Out/Waitlist Only)'
- JIT is an experimental feature in Python 3.13
- You must always specify the `-n` parameter for the `fib()` function when you run
  the `jit.py` script.
- Uses Python 3.13 with free threading — requires setup of connected app in api
- Some performance may vary depending on specific task and hardware
- Completely up to date for Python 3, the latest version of the Python programming
  language
- Extension modules must be named according to Python ABI.
- The book is aimed at intermediate to advanced Python developers.
- You do not need to be proficient in C to use this book.
- Uses custom exceptions for error handling in C extension
- Uses pandas for handling null values in DataFrames
- The `how` and `thresh` parameters are mutually exclusive.
- Type hints help your code to be more self-documenting.
- The standard Python interpreter doesn’t enforce type hints.
- Autocompleting module names during import statements makes interactive coding smoother
  and faster.
- The REPL highlights Python syntax in real time if your terminal supports ANSI colors.
- You can disable syntax highlighting by setting NO_COLOR=1 or PYTHON_COLORS=0 in
  your environment.
- Every new Python release is a chance to reflect on how far the language has come
  and to thank the countless contributors who keep pushing it forward.
- Python 3.14 added a few language features.
- Syntax highlighting has been added to the REPL.
- FastAPI automatically generates documentation for your API.
- MCP is a protocol for AI language models that standardizes interactions with external
  systems.
- Some objects might return nulls in deeply nested fields
- Pillow is a fork of the Python Imaging Library (PIL) that supports image formats
  like JPEG, PNG, and more.
- Pillow is often used for high-level image processing tasks and exploratory work.
- Uses image processing techniques for filtering and segmentation
- Uses Pillow for image processing and manipulation.
- Pillow is a modern fork of the original Python Imaging Library (PIL) that supports
  Python 3 and includes additional features and improvements.
- Web scraping is legal if you respect a website’s terms of service and copyright
  laws.
- WARN ty is pre-release software and not ready for production use.
- Expect to encounter bugs, missing features, and fatal errors.
- Job postings are wrapped in a <div> element with the class 'card-content'.
- The job title is found in an <h2> element with the class 'title'.
- The company name is found in an <h3> element with the class 'company'.
- The location is found in a <p> element with the class 'location'.
- Web scraping should respect website terms of service.
- 'Not production-ready: Stick to mature tools like mypy, Microsoft''s Pyright, or
  Meta''s Pyre for mission-critical projects.'
- 'Bugs and missing features: Core functionality is still evolving, and quirks are
  inevitable.'
- 'Incomplete ecosystem support: IDE integration is limited outside of VS Code, and
  some typing features aren''t fully implemented yet.'
- 'Rapid changes: The tool is moving fast, so behavior and features may shift between
  versions.'
- Python 3.14 brings a fresh batch of improvements to error messages that’ll make
  debugging feel less like detective work and more like having a helpful colleague
  point out exactly what went wrong.
- The Requests library provides a user-friendly way to scrape static HTML from the
  internet with Python.
- You can then parse the HTML with another package called Beautiful Soup.
- Some challenges include handling dynamic content generated by JavaScript, accessing
  login-protected pages, dealing with changes in website structure that could break
  your scraper, and navigating legal issues related to the terms of service of the
  websites you’re scraping.
- Python t-strings enhance both security and flexibility in string processing tasks.
- Version 1.5.0 of scikit-learn is required.
- PEP 750 defines only the syntax for t-string literals, allowing developers to create
  template strings. However, it doesn’t provide template processors to handle them.
- The default value for test_size is 0.25.
- Setting random_state provides reproducibility.
- Python t-strings allow you to intercept and transform input values before assembling
  them into a final representation.
- T-strings are a generalization of f-strings, designed to safely handle and process
  input values.
- PEP 750 defines only the syntax for t-string literals, allowing developers to create
  template strings.
- It doesn’t provide template processors to handle them.
- The fundamental difference between f-strings and t-strings is that while f-strings
  evaluate expressions immediately, t-strings provide a clean way to intercept and
  transform input values before they’re combined into the final string or object.
- Uses train_test_split() to split datasets for machine learning.
- T-strings are designed to safely handle and process input values.
- They provide a way to intercept and transform input values before combining them
  into a final string.
- Don’t try to use Python 3.13 with the experimental features in a production environment!
- Developers need to use a third-party processor or build their own for handling t-strings.
- T-strings use the well-known f-string syntax and rules, differing only by their
  prefix.
- T-strings support values, variables, function calls, and any other Python expressions
  or objects.
- Template strings are evaluated eagerly from left to right, just like f-strings.
- To enable JIT, use PYTHON_CONFIGURE_OPTS='--enable-experimental-jit'
- Free threading requires --disable-gil option during configuration
- Experimental features include free threading and JIT compiler
- Using the environment variable has a slight advantage over the -X gil switch, which
  earlier Python versions won’t recognize and will report an error.
- Lazy annotations in Python 3.14 defer evaluation until needed, enhancing performance
  and reducing startup time.
- Forward references work out of the box without needing string literals or 'from
  __future__ import annotations'.
- Free threading and JIT compiler are experimental features and are not part of the
  official Python distribution.
- Free Threading requires --disable-gil option.
- JIT Compiler requires --enable-experimental-jit option.
- 'Recent Python releases have introduced several small improvements to the type hinting
  system, but Python 3.14 brings a single major change: lazy annotations.'
- These changes make type hinting faster, safer, and easier to use, mostly without
  breaking backward compatibility.
- Python's dynamic nature doesn’t mean you have to sacrifice structure or clarity.
- Lazy annotations help bring the best of both worlds—maintainable code that’s easier
  to reason about and faster to load.
- The support for JIT is independent of its runtime status.
- To check if the JIT is enabled, use `_testinternalcapi.get_optimizer()` in Python
  3.13 or above.
- Free threading and JIT compiler are experimental features and not part of the official
  distribution.
- Annotations are evaluated lazily in Python 3.14.
- 'Free Threading: To compile Python with free-threading support, you need to configure
  the build with the --disable-gil option.'
- 'JIT Compiler: To compile Python with the experimental JIT compiler, you need to
  configure the build using the --enable-experimental-jit option.'
- Python 3.14 introduces lazy evaluation for annotations.
- Alpha versions are previews of upcoming features. While most features will work
  well, you shouldn’t depend on any Python 3.11 alpha version in production or anywhere
  else where bugs will have serious consequences.
- Python 3.13 will come in two flavors due to the incompatible application binary
  interface (ABI) of the stock and free-threaded builds.
- You're not doing any validation or error handling in dict_to_person(), so you'll
  run into issues when you try to process some of the scientists with incomplete data.
- The error message points out that you're missing the 'last' field.
- You're told that some object is None and that you're trying to get some item from
  it.
- The extension module must match the Python ABI for compatibility.
- Alpha versions are previews of upcoming features.
- You shouldn’t depend on any Python 3.11 alpha version in production or anywhere
  else where bugs will have serious consequences.
- Book includes a chapter on changes to the CPython code base.
- Intermediate Python knowledge is recommended for readers.
- Python 3.11 improves all the error messages from the previous section.
- Python 3.12 will be released in October 2023.
- Improved error messages include suggestions for unimported standard library modules.
- When Python 3.12 raises a NameError in an instance method, it suggests that you
  prepend 'self.' when referencing the name.
- When Python 3.12 encounters 'import ... from ...', it triggers a SyntaxError with
  a new error message suggesting that you use 'from ... import ...' instead.
- Uses pandas to handle missing data with the .dropna() method.
- Improvements in readability and actionable messaging of NameError, SyntaxError,
  and ImportError
- The -> notation indicates a function’s return type in Python.
- Python has over sixty built-in exceptions that represent a wide range of common
  errors and exceptional situations.
- Autocompletion is on by default for import statements.
- Syntax highlighting is enabled by default in color-capable terminals.
- FastAPI provides automatic API documentation at /docs and /redoc
- Uses a client-server architecture for interaction.
- Resources are read-only and represented via URIs.
- MCP allows AI models to interact with external systems in a standardized way.
- The `pass` statement is useful in Python for creating empty blocks of code.
- This example is purely to illustrate Python semantics and techniques.
- Uses asynchronous programming for handling requests.
- Uses pass keyword to create valid syntax without functional code.
- MCP client connects to servers hosted in various applications.
- 'Not production-ready: Stick to mature tools for mission-critical projects.'
- 'Bugs and missing features: Core functionality is still evolving.'
- 'Incomplete ecosystem support: IDE integration is limited outside of VS Code.'
- Better error messages accelerate your learning and development process.
- Understanding the distinction between expressions and statements is crucial for
  Python developers.
- Python 3.14 improves error messages for common syntax errors, string and bytes literals,
  unpacking and assignment operations, type-related operations, and context manager
  usage.
- None is a powerful tool in the Python toolbox.
- None is an immutable keyword.
- Flat files are often human-readable text files.
- Large files can become difficult to manage and edit.
- Using SQLite to persist data
- Database normalization is important to reduce redundancy
- Developers like you will need to use a third-party processor or build your own.
- The .interpolations attribute holds a tuple of Interpolation objects, each representing
  the content of a specific replacement field.
- The .strings attribute holds a tuple containing the static string components of
  a given t-string.
- The .values attribute holds a tuple of input values.
- The attributes of Template are read-only.
- T-strings are designed specifically for templating, and they build on many of the
  ideas behind f-strings.
- Template processing code can process conversion flags.
- The .strings, .interpolations, and .values attributes are read-only.
- Handles many-to-many relationships between authors and publishers, as well as books
  and publishers.
- Uses t-strings for safer string handling and templating.
- Uses SQLAlchemy to interface with SQLite database
- Lazy annotations defer evaluation until needed, enhancing performance and reducing
  startup time.
- Forward references work out of the box without needing string literals or from __future__
  import annotations.
- Circular imports are no longer an issue for type hints because annotations don’t
  trigger immediate name resolution.
- Uses Flask with SQLAlchemy for database interaction
- Python 3.14 introduces lazy evaluation of annotations, solving long-standing pain
  points with type hints.
- The content of `<style>` isn’t HTML code, but CSS.
- When you start focusing on designing your website, it’s worth having a look at these
  units and playing around with different types of units.
- If you want to start your CSS designs from scratch, you can also load an external
  **reset style sheet**.
- Forward references work without needing string literals or from __future__ import
  annotations.
- Annotations are evaluated lazily in Python 3.14, reducing computational cost.
- Uses forward references for type hints in Python.
- Circular imports can lead to ImportError.
- Using raw strings is considered a best practice even when you don’t necessarily
  need them.
- Lazy annotations address issues with forward references, allowing types to be defined
  later.
- Uses structural pattern matching introduced in Python 3.10
- Deferred evaluation solves many of the annotation-related issues that plagued codebases
  before Python 3.14.
- The deferred evaluation of annotations in Python 3.14 has a minimal direct impact
  on your code.
- Python 3.14 introduces lazy evaluation of annotations
- Python 3.10 or later is required to use structural pattern matching.
- Uses pattern matching for command handling
- Supports execution of Python code and commands
- Some error messages are ambiguous and imprecise.
- Uses soft keywords for pattern matching — includes match, case, and _
- Error message improvements have primarily focused on more precisely pinpointing
  where an error occurred and then more clearly communicating that information.
- Structural pattern matching is a powerful control flow construct.
- Python supports several types of structural patterns.
- Improved error messages for NameError and SyntaxError in Python 3.12
- Improved readability and actionable messaging of ImportError
- The interpreter processes the Brainfuck code and outputs results directly.
- You can’t reuse the name of a capture pattern within the same class pattern.
- The datetime.date class doesn’t accept any positional subpatterns.
- Pattern matching was introduced in Python 3.10.
- This API interprets Brainfuck code and outputs the result.
- Python has exceptions that deal with program termination such as SystemExit and
  KeyboardInterrupt.
- In this tutorial, you’ve learned about Python’s built-in exceptions.
- This knowledge will help you efficiently debug your code.
- Capture patterns define their own local variable.
- Plain capture patterns make subsequent case clauses unreachable.
- Raising exceptions is a popular way to deal with errors and exceptional situations
  in Python.
- Raising exceptions early is considered a best practice.
- Raising an exception interrupts the normal flow of the program.
- Raising and throwing an exception refer to the same action in Python.
- The pass keyword is an entire statement in itself.
- It is used to fulfill the requirement that a suite include at least one statement.
- Uses pass statement to indicate empty function bodies or exception handling
- Expressions are statements with values.
- Statements can cause side effects.
- Whether a piece of syntax is an expression or a statement isn’t set in stone.
- None is the value a function returns when there is no return statement.
- None is falsy, meaning not None is True.
- The data files used in the examples are available in the project/data directory.
- There’s also a program file in the project/build_data directory that generates the
  data.
- Handles commands in a REPL environment
- Supports basic error handling
- Uses SQLAlchemy to connect to SQLite database
- Database file is author_book_publisher.db located in project.data
- Uses Flask SQLAlchemy for database interactions
- Classes like datetime.date don’t accept any positional subpatterns.
- Combining HTML, CSS, and Python equips you to build dynamic, interactive websites.
- HTML provides the structure, CSS adds styling, and Python can be used to interact
  with and manipulate the HTML content.
- The player has at most five attempts to guess the number.
- The `with` statement automates the process of setting up and tearing down computational
  resources using context managers.
- Using `with` reduces code complexity and prevents resource leaks by ensuring proper
  resource release, even if exceptions occur.
- The changes in your developer tools don’t persist.
- Copy and paste the code into a <style> tag in your HTML file.
- You can load custom web fonts from either your server or external resources.
- Use a reset style sheet before loading your styles for full control.
- Path is a class that represents concrete paths to physical files on your computer.
- You should consider using Path.open() in your with statements as a best practice
  in Python.
- Raw strings ignore escape character sequences.
- Commonly used for regular expressions and Windows file paths.
- Check out the corresponding section in the tutorial on the print() function to learn
  more about using ANSI escape codes in Python.
- Concurrency refers to the ability of a program to manage multiple tasks at once,
  improving performance and responsiveness.
- Efficient concurrency management can significantly enhance a program’s performance
  by reducing wait times and better utilizing system resources.
- Asynchronous approach is the slowest for a CPU-bound problem, yet it was the fastest
  for an I/O-bound one.
- Multiprocessing is explicitly designed to share heavy CPU workloads across multiple
  CPUs.
- Understanding concurrency is vital for Python developers seeking to improve application
  efficiency, particularly in scenarios involving intensive I/O operations or computational
  workloads.
- Pattern matching is a feature introduced in Python 3.10.
- No specific API details or endpoints provided.
- Uses pattern matching for command handling.
- Supports execution of Python expressions and statements.
- FastAPI comes with interactive API documentation out of the box.
- Structural pattern matching is a powerful control flow construct introduced in Python
  3.10.
- JSON is more popular with REST APIs.
- Always set the correct Content-Type header on your response.
- Structural pattern matching was introduced in Python 3.10
- A REST API needs to validate incoming data.
- Responding to requests, both successful and erroneous, is one of the most important
  jobs of a REST API.
- Uses JSON as data format
- Uses a REPL structure for user input and command execution.
- Django REST Framework is a Django plugin that adds REST API functionality.
- Most classes don’t come with a special attribute to support positional subpatterns.
- A plain capture pattern makes subsequent case clauses unreachable.
- Multiple assignments to the same name in a pattern are not allowed.
- Pattern matching was introduced in Python 3.10
- The name structural pattern matching is often shortened to just pattern matching
- Structural pattern matching is available in Python 3.10 or later.
- Pattern matching introduced in Python 3.10
- Python doesn’t have built-in mobile development capabilities, but you can create
  mobile applications by using libraries like Kivy.
- Not only will your application look the same on all platforms, but you also won’t
  need to compile your code after every change.
- Most classes don’t come with a special attribute for positional arguments.
- Python’s `with` statement automates the process of setting up and tearing down computational
  resources using context managers.
- Managing files with 'with' ensures file descriptors are closed.
- Consider using Path.open() for managing file paths.
- Python’s with statement automates the process of setting up and tearing down computational
  resources using context managers.
- Using with reduces code complexity and prevents resource leaks by ensuring proper
  resource release, even if exceptions occur.
- The pathlib package provides an elegant, straightforward, and Pythonic way to manipulate
  file system paths.
- A common mistake you might encounter is trying to use a closed file in a with statement.
- Whenever you load an external file, check for possible issues, such as a missing
  file, writing and reading access.
- pytest.raises() allows you to assert that a block of code or a function call raises
  a specific exception.
- Context managers handle resource management automatically.
- Understanding concurrency is crucial for optimizing programs, especially those that
  are I/O-bound or CPU-bound.
- Asynchronous approach is the slowest for a CPU-bound problem.
- Process-based parallelism is best for sharing heavy CPU workloads across multiple
  CPUs.
- CRUD operations are at the heart of nearly every application you interact with.
- Understanding CRUD will give you an actionable blueprint when you build applications.
- FastAPI provides interactive API documentation at /docs
- Stick to comparing a Python modulo operation with 0 for even and odd checks.
- Avoid comparing modulo results with 1 due to sign issues with negative divisors.
- Comparing with 0 is reliable for checking even and odd numbers.
- Successful PUT requests will always return 200 instead of 201 because you aren’t
  creating a new resource, but just updating an existing one.
- API uses JSON as the data interchange format.
- The Raspberry Pi comes with a variety of software preinstalled, including a web
  browser, an office suite, a terminal, and even Minecraft.
- Different Raspberry Pi models have different HDMI cable requirements.
- Uses JSON as the data format
- Raspbian is preinstalled with Python.
- You can use the Mu editor or SSH to write Python code.
- GPIO4 is used for button, LED, buzzer, and motion sensor.
- Ensure correct wiring to avoid false positives with motion sensor.
- Uses Django REST framework to convert models to JSON for a REST API.
- Uses maxsplit parameter to limit the number of splits when working with strings
  in Python.
- Obey Local Currency Regulations
- Better Rounding Strategies in Python
- Python uses the rounding half to even strategy, where ties round to the nearest
  even number.
- Python’s default rounding strategy minimizes rounding bias in large datasets.
- Check local laws and regulations in users’ locations.
- Uses various rounding strategies in Python.
- Best practices for rounding with real-world data.
- A range in Python is an object representing an interval of integers.
- Includes a minimax algorithm for AI player
- You need to have Python installed and understand how to work with virtual environments
  and Python’s package manager, pip.
- You can avoid creating the additional top-level project folder by adding a dot (.)
  at the end of the django-admin startproject command.
- You should have some previous knowledge of Python programming, including topics
  like for loops, functions, list comprehensions, and generator expressions.
- Keras is a model-level library, providing high-level building blocks for developing
  deep-learning models.
- Bucket names must be unique across all of AWS.
- Use UUIDs for generating unique bucket names.
- Bucket names must be unique throughout the whole AWS platform.
- Familiarity with object-oriented programming is required.
- The generated bucket name must be between 3 and 63 chars long.
- If you’re planning on hosting a large number of files in your S3 bucket, keep in
  mind the performance issues related to deterministic prefixes.
- Uses UUID for randomizing file names to efficiently distribute data.
- The generated bucket name must be between 3 and 63 chars long
- Course includes 10 lessons and downloadable resources.
- Requires understanding of Python and Django.
- OpenCV uses BGR by default for image reading.
- A Gaussian blur is an image filter that uses a kind of function called a Gaussian
  to transform each pixel in the image.
- Provides stable APIs to avoid breaking user code.
- In HTTP 1.0, the message for status code 302 was 'Temporary Redirect'. The message
  was changed to 'Found' in HTTP 1.1.
- Permanent redirects can have unintended consequences. Finish this guide before using
  a permanent redirect or jump straight to the section 'Permanent redirects are permanent'.
- 'Hard-coding URLs is bad practice: if the URL ever changes, you have to search through
  all your code and change any occurrences.'
- Redirects are an essential instrument to guide users through a web application.
- Some redirects may be temporary or permanent.
- Class-based views are a powerful concept but can be a bit difficult to wrap your
  head around.
- 'Permanent redirects can be like bad tattoos: they might seem like a good idea at
  the time, but once you realize they were a mistake, it can be quite hard to get
  rid of them.'
- Course includes 22 lessons, video subtitles, and downloadable resources.
- Each tutorial at Real Python is created by a team of developers to meet high quality
  standards.
- Using the modulo operator with a modulus of 2 allows checking if a number is even
  or odd.
- Python modulo operator can be used with int and float types.
- Avoid comparing the result of a modulo operation with 1 as not all modulo operations
  in Python will return the same remainder.
- Compare the modulo operation with 0 for checking even and odd numbers or other multiples.
- Avoid comparing modulo operations with 1, as not all will return the same remainder.
- Comparing modulo with 0 ensures consistent results for even and odd checks.
- Raspbian is the officially supported Raspberry Pi operating system, based on Debian
  Linux.
- Ensure to format the SD card to FAT32 before installation.
- Occasionally, a motion sensor and a Raspberry Pi 3 will not work together correctly,
  resulting in false positives.
- For buzzer, if the tone continues when stopping the program, remove the GND wire
  to break the circuit.
- The CSV file stores timestamps for motion detection.
- Using maxsplit requires consistent delimiters and number of expected splits.
- For complex splitting scenarios, use re.split for advanced patterns.
- Python's built-in round() function uses the rounding half to even strategy.
- Truncating is the simplest method for rounding a number.
- When you order a cup of coffee for $2.40 at the coffee shop, the merchant typically
  adds the required tax.
- Situations like this can also arise when you’re converting one currency to another.
- A country’s government typically determines how to handle situations like this.
- Python uses the rounding half to even strategy, which rounds numbers like 2.5 to
  2 and 3.5 to 4.
- Check local laws and regulations in users' locations for currency calculations.
- The range() function is built in.
- Ranges represent half-open intervals.
- Range is a sequence used for looping.
- Uses integer-like parameters to create ranges.
- Create a virtual environment using 'python -m venv env'
- Activate the virtual environment using 'source env/bin/activate'
- Install Django using 'python -m pip install django'
- Pin dependencies with 'python -m pip freeze > requirements.txt'
- Uses a Bag-of-words (BOW) model for text classification.
- Logistic regression achieved accuracy of 79.6% on Yelp and Amazon datasets.
- When training neural networks, you should use a separate testing and validation
  set.
- Uses pretrained word embeddings from GloVe or Word2Vec.
- Uses Keras for building and training models
- Convolutional Neural Networks are effective for text classification
- Bucket names must be unique across all AWS accounts.
- Requires setup of IAM user with AmazonS3FullAccess policy
- If you’re planning on hosting a large number of files in your S3 bucket, there’s
  something you should keep in mind.
- OpenCV by default reads images in BGR format.
- Segmentation method may not generalize well to all images.
- Selected talks are from PyCon US in 2009 or later.
- Redirects are used to guide the user through a web application.
- In HTTP 1.0, the message for status code 302 was Temporary Redirect. The message
  was changed to Found in HTTP 1.1.
- Permanent redirects can have unintended consequences. Finish this guide before using
  a permanent redirect or jump straight to the section "Permanent redirects are permanent."
- Redirects are an essential instrument to guide the user through a web application.
- After performing some kind of operation with side effects, like creating or deleting
  an object, it’s a best practice to redirect to another URL to prevent accidentally
  performing the operation twice.
- Make sure to validate any data you read from query strings.
- KDE is a means of data smoothing.
- This reference guide assumes a working knowledge of Python modules and packages.
- Keep in mind that these are just layouts. If a directory or file doesn’t make sense
  for your specific use case, feel free to leave it out.
- Not seeing it? A quick tip for spotting packages is by looking for an __init__.py
  file.
- In this layout, everything lives in the flaskr package except for your tests, a
  directory for your virtual environments, and your usual top-level files.
errors:
- '400: Bad Request'
- '401: Unauthorized'
- '404: Not Found'
- '500: Internal Server Error'
- '404 Not Found: The requested resource was not found.'
- '400 Bad Request: This request was not properly formatted. Please send again.'
- '415 Unsupported Media Type: The application/xml mediatype is not supported.'
- '422 Unprocessable Entity: Request had invalid or missing data.'
- '401 Unauthorized: The client is not authorized to perform the requested action.'
- '400 Bad Request: The request was malformed.'
- '500 Internal Server Error: The server threw an error when processing the request.'
- '422 Unprocessable Entity: Field required'
- '200 OK: Successful request'
- '204 No Content: Successful DELETE request, no content returned'
- '201 Created: Successful POST request, new resource created'
- '400: Bad Request - The request was malformed.'
- '401: Unauthorized - The client is not authorized to perform the requested action.'
- '404: Not Found - The requested resource was not found.'
- '422 Unprocessable Entity: Returned when the incoming JSON doesn''t match the Pydantic
  model.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404 Not Found: Check the URL or resource path.'
- 'IndexError: list index out of range — Usage: reverse.py <string_to_reverse>'
- SystemExit — Process exits with a status code of 1 after printing the usage
- 'Argument count exceeded: Check the number of arguments passed.'
- 'Invalid argument: Ensure correct options and arguments are provided.'
- 'Usage: command_name (-c | -u | -l) <arguments>...'
- 'IndexError: list index out of range - Occurs when no argument is passed.'
- 'Type Error: Argument type mismatch'
- 'FileNotFoundError: No such file or directory'
- 'INVALID_INPUT: Ensure the file names are correct.'
- 'FILE_NOT_FOUND: Check if the specified file exists.'
- 'IndexError: list index out of range: Ensure arguments are provided'
- 'Usage: reverse.py <string_to_reverse>: Provide correct usage in error handling'
- 'IsADirectoryError: Expected a file but received a directory'
- Timer is running. Use .stop() to stop it
- Timer is not running. Use .start() to start it
- 'TimerError: Raised when timer is not running or already running'
- 'TimerError: Timer is running. Use .stop() to stop it'
- 'TimerError: Timer is not running. Use .start() to start it'
- 'CRITICAL: Failed to correctly fetch Iris dataset'
- 'ValueError: The truth value of an array with more than one element is ambiguous.'
- 'AssertionError: Object does not have expected structure'
- 'MemoryError: Close each figure after use to avoid memory issues.'
- 'SyntaxError: expected '':'''
- 'ZeroDivisionError: division by zero'
- 'error: the following arguments are required: path'
- 'error: unrecognized arguments: other_dir/'
- 'TypeError: ''float'' object is not subscriptable'
- 'TypeError: sequence item 0: expected str instance, int found'
- 'Installation failed: Check if you are running as administrator.'
- 'Package not found: Ensure the package name is correct.'
- 'Error: ''git'' command not found — download and install Git.'
- 'Error: No commits yet — add files to commit.'
- 'TypeError: sort() got an unexpected keyword argument ''reversed''. Did you mean
  ''reverse''?'
- 'AttributeError: module ''random'' has no attribute ''randint'' (consider renaming
  your script)'
- 'ZeroDivisionError: Raised when inverse(0) is called.'
- 'AttributeError: module ''random'' has no attribute ''randint''. Consider renaming
  your script to avoid clashes with standard library modules.'
- 'ValueError: list.remove(x): x not in list'
- 'RuntimeError: dictionary changed size during iteration'
- 'AttributeError: Occurs when trying to access an attribute or method that doesn’t
  exist.'
- 'TypeError: Occurs when applying an operation or function to an object that doesn’t
  support that operation.'
- 'AttributeError: ''Point'' object has no attribute ''z'''
- 'TypeError: invalid argument type for len()'
- 'ImportError: Check if the module name is correct.'
- 'AttributeError: Ensure the requested attribute exists.'
- 'ValueError: grade must be between 0 and 100'
- 'TypeError: grades must be numeric'
- 'ModuleNotFoundError: No module named ''math'''
- 'ModuleNotFoundError: ''re'' is banned'
- 'TypeError: unsupported operand type(s) for |: ''set'' and ''list'''
- 'ZeroDivisionError: integer division or modulo by zero'
- 'TypeError: ''float'' object cannot be interpreted as an integer'
- 'TypeError: can only concatenate list (not "tuple") to list'
- 'IndexError: tuple index out of range'
- 'TypeError: ''tuple'' object does not support item assignment'
- 'ValueError: factorial() not defined for negative values'
- 'ValueError: factorial() only accepts integral values'
- 'TypeError: must be real number, not str'
- 'ValueError: math domain error'
- 'TypeError: can only join an iterable'
- 'TypeError: object of type ''int'' has no len()'
- 'TypeError: can''t take floor of complex number.'
- O(n^2) time complexity, making it unusable in practice.
- 'TypeError: can only concatenate str (not "int") to str'
- 'TypeError: integer argument expected, got float'
- 'TypeError: __init__() should return None, not ''int'''
- 'ValueError: positive width expected, got -21'
- f-string error in Python often occurs due to syntax issues, such as unmatched braces
  or invalid expressions within the string
- 'ValueError: byte must be in range(0, 256)'
- 'TypeError: ''bytes'' object cannot be interpreted as an integer'
- 'IndexError: list index out of range'
- 'SyntaxError: Attempting to use break outside of a loop.'
- 'TypeError: ''<'' not supported between instances of ''int'' and ''NoneType'''
- 'SyntaxError: invalid syntax'
- 'SyntaxError: can''t assign to function call'
- 'SyntaxError: can''t assign to literal'
- 'SyntaxError: ''break'' outside loop'
- 'SyntaxError: ''continue'' not properly in loop'
- 'SyntaxError: EOL while scanning string literal'
- 'SyntaxError: f-string: unterminated string'
- 'PlatformException: Function can only run on Linux systems.'
- Confusing continue and break
- EOL while scanning string literal
- F401 `os` imported but unused
- F821 Undefined name `name`
- 'TabError: inconsistent use of tabs and spaces in indentation'
- 'SyntaxError: unmatched '')'''
- 'RuntimeError: Function can only run on Linux systems.'
- 'KeyError: Handle missing keys appropriately.'
- E231 missing whitespace after ','
- E502 the backslash is redundant between brackets
- 'E999 SyntaxError: unexpected character after line continuation character'
- 'F401: `math` imported but unused'
- 'NameError: name ''itertools'' is not defined'
- 'NameError: name ''it'' is not defined'
- CalledProcessError for Non-Zero Exit Code
- TimeoutExpired for Processes That Take Too Long
- FileNotFoundError for Programs That Don’t Exist
- 'CalledProcessError: Command returned non-zero exit status'
- 'TimeoutExpired: Command timed out after specified duration'
- 'FileNotFoundError: The system cannot find the file specified'
- 'F401: `os` imported but unused'
- 'F821: Undefined name `name`'
- 'SyntaxError: unexpected character after line continuation character'
- 'AssertionError: Indicates that an assertion has failed during the test execution.'
- 'ValueError: choice must be 0, 1, or 2'
- '''pip'' is not recognized as an internal or external command, operable program
  or batch file.'
- 'bash: pip: command not found'
- 'zsh: command not found: pip'
- 'CalledProcessError: Command ''[''python'', ''timer.py'']'' returned non-zero exit
  status 2.'
- 'TimeoutExpired: Command ''[''python'', ''timer.py'', ''5'']'' timed out after 1.0
  seconds.'
- '404 Not Found: Check the endpoint for correctness.'
- '500 Internal Server Error: Try again later.'
- 'INVALID_WIDGET: Ensure widget types are correct'
- 'LAYOUT_ERROR: Check geometry manager usage'
- '404 Not Found: Course may not be available or URL is incorrect.'
- Threshold value may need adjustment for desired results.
- 'ModuleNotFoundError: Ensure required libraries are installed'
- 'error[invalid-syntax]: Cannot use `type` alias statement on Python 3.7 (syntax
  was added in Python 3.12)'
- 'SyntaxError: invalid syntax. Did you mean ''for''?'
- 'SyntaxError: ''elif'' block follows an ''else'' block'
- 'SyntaxError: expected expression after ''else'', but statement is given'
- Compiling Python requires essential build tools and libraries
- 'NameError: Name referenced in annotation is not defined.'
- 'KeyError: ''last'''
- 'TypeError: ''NoneType'' object is not subscriptable'
- 'KeyError: ''year'''
- 'NameError: name ''sys'' is not defined. Did you forget to import ''sys''?'
- 'NameError: name ''message'' is not defined. Did you mean: ''self.message''?'
- 'SyntaxError: invalid syntax. Did you mean to use ''from … import …'' instead?'
- 'ImportError: cannot import name ''path'' from ''pathlib''. Did you mean: ''Path''?'
- 'SyntaxError: Did you mean to use ''from ... import ...'' instead?'
- 'SyntaxError: cannot assign to function call here. Maybe you meant ''=='' instead
  of ''=''?'
- 'ValueError: empty grades not allowed'
- 'ImportError: Appears when an import statement can’t load a module'
- 'ModuleNotFoundError: Happens when import can’t locate a given module'
- 'NameError: Appears when a name isn’t defined in the global or local scope'
- 'AttributeError: Happens when an attribute reference or assignment fails'
- 'IndexError: Occurs when an indexing operation on a sequence uses an out-of-range
  index'
- 'KeyError: Occurs when a key is missing in a dictionary or another mapping'
- 'ZeroDivisionError: Appears when the second operand in a division or modulo operation
  is 0'
- 'TypeError: Happens when an operation, function, or method operates on an object
  of inappropriate type'
- 'ValueError: Occurs when an operation, function, or method receives the right type
  of argument but the wrong value'
- 'KeyError: ''grape'''
- 'ValueError: could not convert string to float: ''one'''
- 'AttributeError: ''RainbowColor'' object has no attribute ''as_hsl'''
- 'OverflowError: (34, ''Result too large'')'
- 'RecursionError: maximum recursion depth exceeded'
- 'ImportError: Appears when an import statement has trouble loading a module'
- 'NameError: Appears when a global or local name isn’t defined'
- 'KeyError: Occurs when a key is missing in a dictionary'
- 'Not production-ready: Stick to mature tools for mission-critical projects.'
- 'Bugs and missing features: Core functionality is still evolving.'
- 'Incomplete ecosystem support: IDE integration is limited outside of VS Code.'
- 'NameError: name ''pint'' is not defined. Did you mean: ''print''?'
- 'ImportError: cannot import name ''path'' from ''pathlib'''
- 'SystemExit: Raised when sys.exit() is called.'
- 'KeyboardInterrupt: Raised when the user interrupts program execution with Ctrl+C.'
- 'TypeError: list or tuple expected, got ''set'''
- 'GradeValueError: grade values must be between 0 and 100 inclusive'
- 'AttributeError: ''NoneType'' object has no attribute ''append'''
- 'KeyboardInterrupt: Interrupted by user'
- 'EOFError: End of input'
- 'ValueError: I/O operation on closed file.'
- 'OSError: Writing to file failed due to permission denied'
- '204 No Content: The operation was successful, but no content was returned.'
- '200 OK: The request was processed as expected.'
- '201 Created: A new resource was created.'
- '404 Not Found: The resource does not exist.'
- '400 Bad Request: The request is not formatted correctly.'
- '415 Unsupported Media Type: The request included a data format that’s not supported
  by the API.'
- '422 Unprocessable Entity: The data is invalid even if it’s in the correct format.'
- '422 Unprocessable Entity: JSON request does not match the Pydantic model'
- 'TypeError: datetime.date() accepts 0 positional sub-patterns (3 given)'
- 'TypeError: User() accepts 0 positional sub-patterns (2 given)'
- 'OSError: Writing to file failed due to permission denied.'
- 'IndexError: string index out of range'
- 'KeyError: ''car'''
- '204 No Content: Operation was successful but no content was returned.'
- '200 OK: Request was processed as expected.'
- '201 Created: New resource was created successfully.'
- '404 Not Found: Resource does not exist'
- '400 Bad Request: User needs to fix the request'
- '415 Unsupported Media Type: Data format not supported'
- '422 Unprocessable Entity: Data was invalid'
- '422 Unprocessable Entity: JSON request validation failed'
- 'BucketAlreadyExists: The specified bucket already exists.'
- '302 Found: Indicates a temporary redirect.'
- '301 Moved Permanently: Indicates a permanent redirect.'
- Rounding errors have swayed elections and resulted in loss of life.
- 'Training Accuracy: 1.0000'
- 'Testing Accuracy:  0.7700'
- '302 Found: Indicates that the target resource resides temporarily under a different
  URI.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://realpython.com
  headers:
    Accept: application/json
source_metadata: null
