resources:
- name: attributes
  endpoint:
    path: /api/v1/attributes
    method: GET
    data_selector: attributes
- name: configuration
  endpoint:
    path: /api/v1/configuration
    method: GET
    data_selector: configuration
- name: configurator
  endpoint:
    path: /configurator
    method: GET
    data_selector: attributes
    params: {}
- name: Configurator API
  endpoint:
    path: /reference/configurator-api
    method: GET
    data_selector: attributes
- name: assets
  endpoint:
    path: /api/assets
    method: GET
    data_selector: assets
- name: fast_compositor
  endpoint:
    path: /api/fast-compositor/
    method: GET
- name: assets
  endpoint:
    path: /api/assets
    method: GET
    data_selector: assets
- name: report
  endpoint:
    path: /api/analytics/report
    method: GET
    data_selector: output
    params: {}
- name: job
  endpoint:
    path: /api/catalog/jobs/{JOB_ID}
    method: GET
    data_selector: output
    params: {}
- name: create_item
  endpoint:
    path: /reference/importproducts
    method: POST
    data_selector: product
- name: update_item
  endpoint:
    path: /reference/importproducts-1
    method: POST
    data_selector: query
- name: report
  endpoint:
    path: /api/analytics/report
    method: GET
    data_selector: output
    params:
      orgId: 1d7bc227-2ea7-434e-8281-65958b03f41b
      eventType: configuration_change
      startDate: '2024-01-01'
      endDate: '2024-01-19'
- name: job_results
  endpoint:
    path: /api/catalog/jobs/{JOB_ID}
    method: GET
    data_selector: output
    params: {}
- name: create_item
  endpoint:
    path: /reference/importproducts
    method: POST
    data_selector: product
- name: update_item
  endpoint:
    path: /reference/importproducts-1
    method: POST
    data_selector: query
- name: saved_configurations
  endpoint:
    path: /saved-configurations
    method: GET
- name: pricebooks
  endpoint:
    path: /pricebooks
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: threekit_player
  endpoint:
    path: /threekit/player
    method: GET
    data_selector: playerData
    params:
      assetId: required
      authToken: required
      customId: optional
      el: required
- name: saved_configurations
  endpoint:
    path: /saved-configurations
    method: GET
- name: file_linked_to_configuration
  endpoint:
    path: /fetchattachment
    method: GET
- name: thumbnail_of_configuration
  endpoint:
    path: /fetchthumbnail
    method: GET
- name: configuration_by_id
  endpoint:
    path: /fetchconfiguration
    method: GET
- name: configurations_by_sku
  endpoint:
    path: /fetchconfigurationbysku
    method: GET
- name: configurations
  endpoint:
    path: /listconfigurations
    method: GET
- name: save_configuration
  endpoint:
    path: /saveconfiguration
    method: POST
- name: pricebooks
  endpoint:
    path: /listpricebooks
    method: GET
- name: create_pricebook
  endpoint:
    path: /create-pricebooks
    method: POST
- name: orders
  endpoint:
    path: /listorders
    method: GET
- name: create_order
  endpoint:
    path: /ordercreation
    method: POST
- name: get_layer
  endpoint:
    path: /fetchlayer
    method: GET
- name: create_layer
  endpoint:
    path: /layercreation
    method: POST
- name: asset
  endpoint:
    path: /assets
    method: GET
    data_selector: records
- name: player
  endpoint:
    path: /app/js/threekit-player.js
    method: GET
    data_selector: playerData
- name: player_2d
  endpoint:
    path: /app/js/threekit-player-2d.js
    method: GET
    data_selector: playerData
- name: player
  endpoint:
    params:
      authToken: public access token
      el: HTML element that will contain the player
      assetId: UUID of the asset to be loaded
      customId: custom ID of the asset to be loaded
      initialConfiguration: initial configuration object
      publishStage: published or draft
      showConfigurator: true or false
      showAR: true or false
- name: Analytics
  endpoint:
    path: /reference/analytics
    method: GET
    data_selector: records
- name: Assets & Catalog - Simple
  endpoint:
    path: /reference/assets-catalog-simple-asset-management
    method: GET
    data_selector: records
- name: Assets & Catalog - Granular
  endpoint:
    path: /reference/assets-catalog-granular-asset-management
    method: GET
    data_selector: records
- name: Assets & Catalog - Bulk
  endpoint:
    path: /reference/assets-catalog-bulk-management
    method: GET
    data_selector: records
- name: Assets & Catalog - Legacy
  endpoint:
    path: /reference/assets-catalog-legacy-catalog-management
    method: GET
    data_selector: records
- name: Branches
  endpoint:
    path: /reference/branches
    method: GET
    data_selector: records
- name: Data Tables
  endpoint:
    path: /reference/data-tables
    method: GET
    data_selector: records
- name: Jobs Service
  endpoint:
    path: /reference/jobs
    method: GET
    data_selector: records
- name: Orders
  endpoint:
    path: /reference/orders
    method: GET
    data_selector: records
- name: Tags
  endpoint:
    path: /reference/tags
    method: GET
    data_selector: records
- name: Threekit Player
  endpoint:
    path: /threekit/player
    method: POST
    data_selector: player
    params: {}
- name: asset
  endpoint:
    path: /path/to/asset
    method: GET
    data_selector: assetData
    params:
      assetId: your_asset_id
      authToken: your_auth_token
- name: threekit_player
  endpoint:
    path: /app/js/threekit-player.js
    method: GET
- name: threekit_player_2d
  endpoint:
    path: /app/js/threekit-player-2d.js
    method: GET
- name: Analytics
  endpoint:
    path: /reference/analytics
    method: GET
    data_selector: events
    params: {}
- name: Assets & Catalog - Simple
  endpoint:
    path: /reference/assets-catalog-simple-asset-management
    method: GET
    data_selector: assets
    params: {}
- name: Assets & Catalog - Granular
  endpoint:
    path: /reference/assets-catalog-granular-asset-management
    method: GET
    data_selector: assets
    params: {}
- name: Assets & Catalog - Bulk
  endpoint:
    path: /reference/assets-catalog-bulk-management
    method: GET
    data_selector: assets
    params: {}
- name: Assets & Catalog - Legacy
  endpoint:
    path: /reference/assets-catalog-legacy-catalog-management
    method: GET
    data_selector: products
    params: {}
- name: Orders
  endpoint:
    path: /reference/orders
    method: GET
    data_selector: orders
    params: {}
- name: threekit_player
  endpoint:
    path: /threekit/player
    method: GET
    data_selector: attributes
    params: {}
- name: player
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: threekit
  endpoint:
    path: /reference/threekit-sdk
    method: GET
- name: events
  endpoint:
    path: /reference/events
    method: GET
- name: set_active_camera
  endpoint:
    path: /reference/set-active-camera
    method: POST
- name: set_locale
  endpoint:
    path: /reference/setlocale
    method: POST
- name: save_configuration
  endpoint:
    path: /reference/save-configuration
    method: POST
- name: snapshot
  endpoint:
    path: /reference/snapshot
    method: GET
- name: languages_translations
  endpoint:
    path: /reference/languages-translations
    method: GET
- name: image_upload
  endpoint:
    path: /reference/image-upload
    method: POST
- name: Unload Player
  endpoint:
    path: /reference/unload-player
    method: GET
- name: Set Active Camera
  endpoint:
    path: /reference/set-active-camera
    method: GET
- name: Save Configuration
  endpoint:
    path: /reference/save-configuration
    method: POST
- name: Snapshot
  endpoint:
    path: /reference/snapshot
    method: GET
- name: Image Upload
  endpoint:
    path: /reference/image-upload
    method: POST
- name: setActiveCamera
  endpoint:
    path: /reference/set-active-camera
    method: POST
    data_selector: cameraId
- name: camera
  endpoint:
    path: /reference/scene
    method: GET
    data_selector: cameraDetails
    params: {}
- name: saved_configuration
  endpoint:
    path: /reference/saved-configurations
    method: POST
- name: Analytics
  endpoint:
    path: /reference/analytics
    method: GET
    data_selector: records
- name: Assets & Catalog - Simple
  endpoint:
    path: /reference/assets-catalog-simple-asset-management
    method: GET
    data_selector: records
- name: Assets & Catalog - Granular
  endpoint:
    path: /reference/assets-catalog-granular-asset-management
    method: GET
    data_selector: records
- name: Assets & Catalog - Bulk
  endpoint:
    path: /reference/assets-catalog-bulk-management
    method: GET
    data_selector: records
- name: Assets & Catalog - Legacy
  endpoint:
    path: /reference/assets-catalog-legacy-catalog-management
    method: GET
    data_selector: records
- name: Catalog 2.0 - Items
  endpoint:
    path: /reference/catalog-20-items
    method: GET
    data_selector: records
- name: Catalog 2.0 - Attributes
  endpoint:
    path: /reference/catalog-20-attributes
    method: GET
    data_selector: records
- name: Catalog 2.0 - Options
  endpoint:
    path: /reference/catalog-20-options
    method: GET
    data_selector: records
- name: Catalog 2.0 - Variants
  endpoint:
    path: /reference/catalog-20-variants
    method: GET
    data_selector: records
- name: Catalog 2.0 - AI Discovery
  endpoint:
    path: /reference/catalog-20-ai-discovery
    method: GET
    data_selector: records
- name: Catalog 2.0 - Prompts
  endpoint:
    path: /reference/catalog-20-prompts
    method: GET
    data_selector: records
- name: Catalog 2.0 - Bulk Management
  endpoint:
    path: /reference/catalog-20-bulk-management
    method: GET
    data_selector: records
- name: Catalog 2.0 - Transactions
  endpoint:
    path: /reference/listtransactions
    method: GET
    data_selector: records
- name: Branches
  endpoint:
    path: /reference/branches
    method: GET
    data_selector: records
- name: Data Tables
  endpoint:
    path: /reference/data-tables
    method: GET
    data_selector: records
- name: Fast Compositor
  endpoint:
    path: /reference/fast-compositor
    method: GET
    data_selector: records
- name: File Service
  endpoint:
    path: /reference/file-service
    method: GET
    data_selector: records
- name: Jobs Service
  endpoint:
    path: /reference/jobs
    method: GET
    data_selector: records
- name: Job Tasks
  endpoint:
    path: /reference/job-tasks
    method: GET
    data_selector: records
- name: Job Runs
  endpoint:
    path: /reference/job-runs
    method: GET
    data_selector: records
- name: Layers Service (Renders & AR)
  endpoint:
    path: /reference/layers-service-renders-ar
    method: GET
    data_selector: records
- name: Orders
  endpoint:
    path: /reference/orders
    method: GET
    data_selector: records
- name: Orgs
  endpoint:
    path: /reference/listorgs-1
    method: GET
    data_selector: records
- name: PDF Service
  endpoint:
    path: /reference/post_pdf
    method: GET
    data_selector: records
- name: Pricebooks
  endpoint:
    path: /reference/pricebooks
    method: GET
    data_selector: records
- name: Saved Configurations
  endpoint:
    path: /reference/saved-configurations
    method: GET
    data_selector: records
- name: Tags
  endpoint:
    path: /reference/tags
    method: GET
    data_selector: records
- name: Translations
  endpoint:
    path: /reference/translations
    method: GET
    data_selector: records
- name: Webhooks
  endpoint:
    path: /reference/webhooks
    method: GET
    data_selector: records
- name: save_configuration
  endpoint:
    path: /saveConfiguration
    method: POST
    data_selector: shortId
    params:
      saveSceneGraphState: true
      customerId: 9e7d9691-3001-47dd-9645-ba981eb29e53
      metadata:
        hello: world
      productVersion: v1
      attachments: {}
- name: threekit
  endpoint:
    path: /reference/embedding-the-threekit-player
    method: GET
- name: configurator
  endpoint:
    path: /reference/configurator-api#get-display-attributes
    method: GET
- name: setConfiguration
  endpoint:
    path: /reference/configurator-api#set-configuration
    method: POST
- name: create_snapshot
  endpoint:
    path: /snapshot
    method: POST
    data_selector: snapshotData
- name: uploadImage
  endpoint:
    path: /uploadImage
    method: POST
    data_selector: assetId
- name: asset
  endpoint:
    path: /assets
    method: GET
    data_selector: records
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: records
- name: frameBoundingSphere
  endpoint:
    path: /frameBoundingSphere
    method: GET
    data_selector: assetIds, direction, options
- name: getPosition
  endpoint:
    path: /getPosition
    method: GET
    data_selector: target
- name: setPosition
  endpoint:
    path: /setPosition
    method: POST
    data_selector: position
- name: getQuaternion
  endpoint:
    path: /getQuaternion
    method: GET
    data_selector: ''
- name: setQuaternion
  endpoint:
    path: /setQuaternion
    method: POST
    data_selector: quaternion
- name: events
  endpoint:
    path: /reference/events
    method: GET
- name: set_active_camera
  endpoint:
    path: /reference/set-active-camera
    method: POST
- name: save_configuration
  endpoint:
    path: /reference/save-configuration
    method: POST
- name: snapshot
  endpoint:
    path: /reference/snapshot
    method: GET
- name: languages_translations
  endpoint:
    path: /reference/languages-translations
    method: GET
- name: image_upload
  endpoint:
    path: /reference/image-upload
    method: POST
- name: configuration_event_response
  endpoint:
    path: /configuration/event/response
    method: GET
    data_selector: appliedConfiguration
- name: translations
  endpoint:
    path: /reference/translations
    method: GET
    data_selector: translations
- name: translations
  endpoint:
    path: /getTranslations
    method: GET
    data_selector: translations
- name: Unload Player
  endpoint:
    path: /reference/unload-player
    method: GET
- name: Set Active Camera
  endpoint:
    path: /reference/set-active-camera
    method: GET
- name: Save Configuration
  endpoint:
    path: /reference/save-configuration
    method: POST
- name: Snapshot
  endpoint:
    path: /reference/snapshot
    method: GET
- name: Image Upload
  endpoint:
    path: /reference/image-upload
    method: POST
- name: Languages & Translations
  endpoint:
    path: /reference/languages-translations
    method: GET
- name: Camera
  endpoint:
    path: /reference/camera
    method: GET
- name: Events
  endpoint:
    path: /reference/events
    method: GET
- name: Scene
  endpoint:
    path: /reference/scene
    method: GET
- name: unload
  endpoint:
    path: /reference/unload-player
    method: POST
- name: set_active_camera
  endpoint:
    path: /reference/set-active-camera
    method: POST
    data_selector: cameraId
    params: {}
- name: addTool
  endpoint:
    path: addTool
    method: inner method
    data_selector: parameter
    params: {}
- name: addTools
  endpoint:
    path: addTools
    method: inner method
    data_selector: parameter
    params: {}
- name: setTool
  endpoint:
    path: setTool
    method: inner method
    data_selector: parameter
    params: {}
- name: setTools
  endpoint:
    path: setTools
    method: inner method
    data_selector: parameter
    params: {}
- name: removeTool
  endpoint:
    path: removeTool
    method: inner method
    data_selector: parameter
    params: {}
- name: removeTools
  endpoint:
    path: removeTools
    method: inner method
    data_selector: parameter
    params: {}
- name: setPrimary
  endpoint:
    path: setPrimary
    method: inner method
    data_selector: parameter
    params: {}
- name: getPrimaryTool
  endpoint:
    path: getPrimaryTool
    method: inner method
    data_selector: Returns
    params: {}
- name: camera
  endpoint:
    path: /reference/scene
    method: GET
    data_selector: cameras
- name: saved_configurations
  endpoint:
    path: /reference/saved-configurations
    method: POST
- name: getConnected
  endpoint:
    path: /connectors/getConnected
    method: GET
    data_selector: 'null'
    params:
      nodeId: string
- name: save_configuration
  endpoint:
    path: /saveConfiguration
    method: POST
    data_selector: res
    params:
      saveSceneGraphState: true
      customerId: 9e7d9691-3001-47dd-9645-ba981eb29e53
      metadata:
        hello: world
      productVersion: v1
      attachments: {}
- name: on_event
  endpoint:
    path: /on
    method: POST
    data_selector: event
    params: {}
- name: create_snapshot
  endpoint:
    path: /snapshot
    method: POST
    data_selector: snapshot
    params: {}
- name: uploadImage
  endpoint:
    path: /uploadImage
    method: POST
    data_selector: assetId
- name: frameBoundingSphere
  endpoint:
    path: /frameBoundingSphere
    method: GET
    data_selector: records
    params: {}
- name: getPosition
  endpoint:
    path: /getPosition
    method: GET
    data_selector: records
    params: {}
- name: setPosition
  endpoint:
    path: /setPosition
    method: POST
    data_selector: records
    params: {}
- name: getQuaternion
  endpoint:
    path: /getQuaternion
    method: GET
    data_selector: records
    params: {}
- name: setQuaternion
  endpoint:
    path: /setQuaternion
    method: POST
    data_selector: records
    params: {}
- name: Get Attributes
  endpoint:
    path: /reference/get_attributes
    method: GET
    data_selector: attributes
    params: {}
- name: Player Events
  endpoint:
    path: /reference/events
    method: GET
    data_selector: events
    params: {}
- name: Configuration Event Response
  endpoint:
    path: /configuration/event/response
    method: GET
    data_selector: appliedConfiguration
- name: Interaction Events
  endpoint:
    path: /interaction/events
    method: GET
    data_selector: events
- name: translations
  endpoint:
    path: /reference/translations
    method: GET
    data_selector: translations
    params: {}
- name: setLocale
  endpoint:
    path: /reference/setLocale
    method: POST
    data_selector: locale
    params: {}
- name: Body Main
  endpoint:
    path: /reference/sandbox/body-main
    method: POST
    data_selector: assetId
    params: {}
- name: Side Mesh
  endpoint:
    path: /reference/sandbox/side-mesh
    method: POST
    data_selector: assetId
    params: {}
- name: Back Mesh
  endpoint:
    path: /reference/sandbox/back-mesh
    method: POST
    data_selector: assetId
    params: {}
- name: Back Detail
  endpoint:
    path: /reference/sandbox/back-detail
    method: POST
    data_selector: assetId
    params: {}
- name: Wrap Side
  endpoint:
    path: /reference/sandbox/wrap-side
    method: POST
    data_selector: assetId
    params: {}
- name: Wrap Sole
  endpoint:
    path: /reference/sandbox/wrap-sole
    method: POST
    data_selector: assetId
    params: {}
- name: Sole
  endpoint:
    path: /reference/sandbox/sole
    method: POST
    data_selector: assetId
    params: {}
- name: Laces
  endpoint:
    path: /reference/sandbox/laces
    method: POST
    data_selector: assetId
    params: {}
- name: Interior
  endpoint:
    path: /reference/sandbox/interior
    method: POST
    data_selector: assetId
    params: {}
- name: translations
  endpoint:
    path: /getTranslations
    method: GET
    data_selector: translations
- name: addTool
  endpoint:
    path: /addTool
    method: POST
    data_selector: tool
- name: addTools
  endpoint:
    path: /addTools
    method: POST
    data_selector: tools
- name: setTool
  endpoint:
    path: /setTool
    method: POST
    data_selector: key
- name: setTools
  endpoint:
    path: /setTools
    method: POST
    data_selector: tools
- name: removeTool
  endpoint:
    path: /removeTool
    method: DELETE
    data_selector: toolName
- name: removeTools
  endpoint:
    path: /removeTools
    method: DELETE
    data_selector: toolNames
- name: setPrimary
  endpoint:
    path: /setPrimary
    method: POST
    data_selector: toolName
- name: getPrimaryTool
  endpoint:
    path: /getPrimaryTool
    method: GET
    data_selector: primaryTool
- name: getConnected
  endpoint:
    path: /connectors/getConnected
    method: GET
    data_selector: null
    params:
      nodeId: string
- name: 'on'
  endpoint:
    path: /on
    method: POST
    data_selector: event
    params: {}
- name: ExporterSettings
  endpoint:
    path: /exporter/settings
    method: GET
- name: nested_configurator
  endpoint:
    path: /getConfigurator
    method: GET
    data_selector: configurator
    params: {}
- name: display_attributes
  endpoint:
    path: /getDisplayAttributes
    method: GET
    data_selector: attributes
    params: {}
- name: set_configuration
  endpoint:
    path: /setConfiguration
    method: POST
    data_selector: response
    params: {}
- type: item
  assetId: 319635b7-735b-437c-b4ec-4e28789f89a2
- type: item
  assetId: 7dd1c8a9-e0e0-4a22-8e3c-a29a37a6d68e
- name: MyScene
  endpoint:
    path: /MyScene
    method: GET
    data_selector: assetId
- name: Asset
  endpoint:
    path: /Asset
    method: GET
    data_selector: assetId
- name: TurntableControls
  endpoint:
    path: /TurntableControls
    method: GET
    data_selector: controls
- name: Body Main
  endpoint:
    path: /set_configuration
    method: POST
    data_selector: assetId
    params: {}
- name: Side Mesh
  endpoint:
    path: /set_configuration
    method: POST
    data_selector: assetId
    params: {}
- name: Back Mesh
  endpoint:
    path: /set_configuration
    method: POST
    data_selector: assetId
    params: {}
- name: Back Detail
  endpoint:
    path: /set_configuration
    method: POST
    data_selector: assetId
    params: {}
- name: Wrap Side
  endpoint:
    path: /set_configuration
    method: POST
    data_selector: assetId
    params: {}
- name: Wrap Sole
  endpoint:
    path: /set_configuration
    method: POST
    data_selector: assetId
    params: {}
- name: Sole
  endpoint:
    path: /set_configuration
    method: POST
    data_selector: assetId
    params: {}
- name: Laces
  endpoint:
    path: /set_configuration
    method: POST
    data_selector: assetId
    params: {}
- name: Interior
  endpoint:
    path: /set_configuration
    method: POST
    data_selector: assetId
    params: {}
- name: asset
  endpoint:
    path: /path/to/asset
    method: GET
    data_selector: assetData
    params:
      assetId: required
- name: Analytics
  endpoint:
    path: /reference/analytics
    method: GET
    data_selector: records
- name: Assets & Catalog - Simple
  endpoint:
    path: /reference/assets-catalog-simple-asset-management
    method: GET
    data_selector: records
- name: Assets & Catalog - Granular
  endpoint:
    path: /reference/assets-catalog-granular-asset-management
    method: GET
    data_selector: records
- name: Assets & Catalog - Bulk
  endpoint:
    path: /reference/assets-catalog-bulk-management
    method: GET
    data_selector: records
- name: Assets & Catalog - Legacy
  endpoint:
    path: /reference/assets-catalog-legacy-catalog-management
    method: GET
    data_selector: records
- name: Branches
  endpoint:
    path: /reference/branches
    method: GET
    data_selector: records
- name: sao
  endpoint:
    path: /sao
    method: GET
    data_selector: SAOProps
- name: bloom
  endpoint:
    path: /bloom
    method: GET
    data_selector: BloomProps
- name: exposure
  endpoint:
    path: /exposure
    method: GET
    data_selector: ExposureProps
- name: toneMapping
  endpoint:
    path: /toneMapping
    method: GET
    data_selector: ToneMappingProps
- name: antiAliasing
  endpoint:
    path: /antiAliasing
    method: GET
    data_selector: AntiAliasingProps
- name: colorCorrection
  endpoint:
    path: /colorCorrection
    method: GET
    data_selector: ColorCorrectionProps
- name: background
  endpoint:
    path: /background
    method: GET
    data_selector: BackgroundProps
- name: snapshot_capture
  endpoint:
    path: /api/snapshot/capture
    method: GET
    data_selector: ''
    params: {}
- name: snapshot
  endpoint:
    path: /api/snapshot/capture
    method: GET
    data_selector: ''
    params: {}
- name: assets
  endpoint:
    path: /reference/assets-catalog-simple-asset-management
    method: GET
- name: orders
  endpoint:
    path: /reference/orders
    method: GET
- name: snapshot_capture
  endpoint:
    path: /api/snapshot/capture
    method: GET
    data_selector: ''
    params:
      sourceUrl: ''
      width: ''
      height: ''
      cacheScope: v12
- name: product
  endpoint:
    path: /configurator
    method: GET
    data_selector: product
    params: {}
- name: product
  endpoint:
    path: /api/configurator/products
    method: GET
    data_selector: assets
    params: {}
- name: Configuration
  endpoint:
    path: /ExporterSettings
    method: GET
    data_selector: attributes
    params: {}
- name: configurations
  endpoint:
    path: /reference/saved-configurations
    method: GET
    data_selector: configurations
    params: {}
- name: configuration
  endpoint:
    path: /setConfiguration
    method: POST
- name: Fabric
  endpoint:
    path: /attributes/Fabric
    method: GET
    data_selector: attributes
    params: {}
- name: Legs
  endpoint:
    path: /attributes/Legs
    method: GET
    data_selector: attributes
    params: {}
- name: MyScene
  endpoint:
    path: /MyScene
    method: GET
    data_selector: assetId
- name: Asset
  endpoint:
    path: /Asset
    method: GET
    data_selector: assetId
- name: TurntableControls
  endpoint:
    path: /TurntableControls
    method: GET
    data_selector: controls
- name: StandardPostProcessing
  endpoint:
    path: /reference/standardpostprocessing
    method: GET
- name: snapshot_capture
  endpoint:
    path: /api/snapshot/capture
    method: GET
    data_selector: image
    params: {}
- name: snapshot
  endpoint:
    path: /snapshots
    method: POST
    data_selector: snapshotData
    params: {}
- name: snapshot_capture
  endpoint:
    path: /api/snapshot/capture
    method: GET
    data_selector: ''
    params: {}
- name: snapshot_capture
  endpoint:
    path: /api/snapshot/capture
    method: GET
    data_selector: ''
    params:
      sourceUrl: ''
      width: ''
      height: ''
      cacheScope: ''
- name: Saved Configurations
  endpoint:
    path: /reference/saved-configurations
    method: GET
- name: Tags
  endpoint:
    path: /reference/tags
    method: GET
- name: product
  endpoint:
    path: /useConfigurator
    method: GET
    data_selector: product
    params: {}
- name: embed_script
  endpoint:
    path: https://treble-app.com/threekit-embed.js
    method: GET
- name: multi_html_elements
  endpoint:
    path: https://treble-app.com/treble-app.js
    method: GET
- name: Saved Configurations
  endpoint:
    path: /saved-configurations
    method: GET
- name: Tags
  endpoint:
    path: /tags
    method: GET
- name: Translations
  endpoint:
    path: /translations
    method: GET
- name: saved_configurations
  endpoint:
    path: /reference/saved-configurations
    method: GET
    data_selector: configurations
- name: tags
  endpoint:
    path: /reference/tags
    method: GET
    data_selector: tags
- name: translations
  endpoint:
    path: /reference/translations
    method: GET
    data_selector: translations
- name: attributes
  endpoint:
    path: /attributes
    method: GET
    data_selector: attributes
- name: configuration
  endpoint:
    path: /configuration
    method: GET
    data_selector: configuration
- name: asset
  endpoint:
    path: /api/v2/assets
    method: GET
    data_selector: data
    params:
      assetId: required
- name: Fabric
  endpoint:
    data_selector: attributes
    params: {}
- name: Legs
  endpoint:
    data_selector: attributes
    params: {}
- name: player_config
  endpoint:
    path: /reference/embedding-the-threekit-player
    method: GET
    data_selector: parameters
    params: {}
- name: ProductLayout
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: theme
  endpoint:
    path: /theme
    method: POST
    data_selector: theme
    params: {}
- name: embed_script
  endpoint:
    path: https://treble-app.com/threekit-embed.js
    method: GET
- name: credentials
  endpoint:
    path: /credentials
    method: GET
    data_selector: records
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: records
    params: {}
- name: zoom_widget
  endpoint:
    path: /widgets/zoom
    method: GET
    data_selector: zoom
- name: player_portal
  endpoint:
    path: /reference/treble-hooks-use-player-portal
    method: GET
    data_selector: records
- name: credentials
  endpoint:
    path: /threekit/credentials
    method: GET
- name: player_loading_status
  endpoint:
    path: /reference/treble-hooks-use-player-loading-status
    method: GET
    data_selector: boolean
    params: {}
- name: saved_configurations
  endpoint:
    path: /saved-configurations
    method: GET
    data_selector: configurations
- name: Saved Configurations
  endpoint:
    path: /saved-configurations
    method: GET
- name: Get Configuration by ID
  endpoint:
    path: /fetchconfiguration
    method: GET
- name: Save Configuration
  endpoint:
    path: /saveconfiguration
    method: POST
- name: usePrice
  endpoint:
    path: /reference/treble-hooks-use-price
    method: GET
    data_selector: price
    params: {}
- name: threekit_config
  endpoint:
    path: /threekit.config.js
    method: GET
    data_selector: config
    params: {}
- name: index_html
  endpoint:
    path: /public/index.html
    method: GET
    data_selector: html
    params: {}
- name: index_js
  endpoint:
    path: /src/index.js
    method: GET
    data_selector: js
    params: {}
- name: snapshots
  endpoint:
    path: /snapshot
    method: POST
    data_selector: snapshot_data
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: metadata
    params: {}
- name: cache
  endpoint:
    data_selector: cache
- name: products
  endpoint:
    data_selector: products
- name: PlayerProps
  endpoint:
    path: /props
    method: GET
    data_selector: properties
    params: {}
- name: credentials
  endpoint:
    path: /credentials
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
- name: product
  endpoint:
    path: /src/products
    method: GET
    data_selector: products
    params: {}
- name: attribute
  endpoint:
    path: /reference/hooks/use-attribute
    method: GET
    data_selector: attribute
- name: ProductLayout
  endpoint:
    path: /products
    method: GET
    data_selector: products
- name: TrebleApp
  endpoint:
    path: /treble
    method: GET
    data_selector: productId
- name: RoomBuilder
  endpoint:
    path: /reference/space-builder
    method: GET
- name: attributes
  endpoint:
    path: /attributes
    method: GET
    data_selector: attributes
    params: {}
- name: player_loading_status
  endpoint:
    path: /reference/treble-hooks-use-player-loading-status
    method: GET
    data_selector: hook
    params: {}
- name: saved_configurations
  endpoint:
    path: /reference/saved-configurations
    method: GET
- name: tags
  endpoint:
    path: /reference/tags
    method: GET
- name: translations
  endpoint:
    path: /reference/translations
    method: GET
- name: Catalog Item
  endpoint:
    path: /reference/treble-form-components-strips
    method: GET
    data_selector: Catalog Item
    params: {}
- name: price
  endpoint:
    path: /reference/treble-hooks-use-price
    method: GET
    data_selector: totalPrice
- name: takeSnapshot
  endpoint:
    path: /snapshot
    method: POST
- name: upload_assets
  endpoint:
    path: /uploadcatalogassets
    method: POST
- name: saved_configurations
  endpoint:
    path: /reference/saved-configurations
    method: GET
    data_selector: records
    params: {}
- name: snapshots
  endpoint:
    path: /reference/snapshots
    method: GET
    data_selector: records
    params: {}
- name: TilesGroup
  endpoint:
    path: /reference/treble-form-components-tiles-group
    method: GET
    data_selector: records
- name: cache
  endpoint:
    path: /useProductCache/cache
    method: GET
    data_selector: cache
    params: {}
- name: products
  endpoint:
    path: /useProductCache/products
    method: GET
    data_selector: products
    params: {}
- name: Snapshots
  endpoint:
    path: /snapshots
    method: POST
- name: Player
  endpoint:
    path: /Player
    method: GET
    data_selector: records
- name: snapshots
  endpoint:
    path: /snapshots
    method: GET
    data_selector: snapshots
- name: project
  endpoint:
    path: threekit.config.js
    method: GET
- name: playerConfig
  endpoint:
    path: .treble/player.config.js
    method: GET
- name: product
  endpoint:
    path: /src/products
    method: GET
    data_selector: products
    params:
      productId: productId
- name: assets_catalog
  endpoint:
    path: /reference/assets-catalog
    method: GET
- name: analytics
  endpoint:
    path: /reference/analytics
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: Room Builder
  endpoint:
    path: /reference/space-builder
    method: GET
- name: Total Price
  endpoint:
    path: /reference/treble-display-total-price
    method: GET
- name: Attribute Value
  endpoint:
    path: /reference/treble-display-attribute-value
    method: GET
- name: AttributeValue
  endpoint:
    path: /attributes/value
    method: GET
    data_selector: value
    params: {}
- name: FlatForm
  endpoint:
    path: /reference/treble-forms-flat-form
    method: GET
- name: attributes
  endpoint:
    path: /attributes
    method: GET
    data_selector: attributes
    params: {}
- name: props
  endpoint:
    path: /reference/treble-forms-flat-form
    method: GET
    data_selector: props
    params: {}
- name: Strips
  endpoint:
    path: /reference/treble-form-components-strips
    method: GET
    data_selector: ''
- name: Catalog Item
  endpoint:
    path: /catalog/item
    method: GET
    data_selector: CatalogItems
    params: {}
- name: props
  endpoint:
    path: /props
    method: GET
    data_selector: properties
    params: {}
- name: upload
  endpoint:
    path: /reference/treble-form-components-upload
    method: GET
- name: upload_assets
  endpoint:
    path: /uploadcatalogassets
    method: POST
- name: modal_props
  endpoint:
    path: /reference/treble-layouts-modal
    method: GET
    data_selector: props
    params: {}
- name: Tiles
  endpoint:
    path: /reference/treble-form-components-tiles
    method: GET
    data_selector: Tiles
- name: TabPane
  endpoint:
    path: /tabs/tabpane
    method: GET
    data_selector: items
    params: {}
- name: AccordionItem
  endpoint:
    path: /AccordionItem
    method: GET
    data_selector: items
    params: {}
- name: Catalog Item
  endpoint:
    path: /reference/treble-form-components-cards
    method: GET
    data_selector: Catalog Items
- name: saveConfiguration
  endpoint:
    path: /saveConfiguration
    method: POST
    data_selector: id
- name: Zoom
  endpoint:
    path: /reference/treble-widgets-zoom
    method: GET
- name: Snapshots
  endpoint:
    path: /reference/snapshots
    method: GET
- name: snapshotsConfig
  endpoint:
    data_selector: format
- name: event
  endpoint:
    path: /createevent
    method: POST
- name: event
  endpoint:
    path: /api/analytics/events
    method: POST
- name: Price
  endpoint:
    path: /reference/treble-display-total-price
    method: GET
- name: event
  endpoint:
    path: /analytics/events/{id}
    method: GET
    data_selector: details
    params: {}
- name: analytics_events
  endpoint:
    path: /reference/get_analytics-events-views
    method: GET
- name: total_price
  endpoint:
    path: /reference/treble-display-total-price
    method: GET
- name: attribute_value
  endpoint:
    path: /reference/treble-display-attribute-value
    method: GET
- name: AttributeValue
  endpoint:
    path: /reference/treble-display-attribute-value
    method: GET
    data_selector: records
- name: event_views
  endpoint:
    path: /analytics/events/views
    method: GET
    params:
      bearer_token: string
      orgId: string
      metadata: string
      device: string
      referer: string
      subStartDate: string
      endDate: string
      range: month
      eventType: string
- name: Props
  endpoint:
    path: /props
    method: GET
    data_selector: records
- name: event_views
  endpoint:
    path: /analytics/events/views
    method: GET
    params:
      range: month
- name: ProductDescription
  endpoint:
    path: /reference/product-description
    method: GET
- name: generate_report
  endpoint:
    path: /analytics/report
    method: GET
- name: PortalToElement
  endpoint:
    path: /reference/treble-wrappers-portal-to-element
    method: GET
    data_selector: records
    params: {}
- name: props
  endpoint:
    path: /props
    method: GET
    data_selector: props
    params: {}
- name: Get Assets
  endpoint:
    path: /reference/listassets
    method: GET
- name: Get Asset by ID
  endpoint:
    path: /reference/fetchasset-1
    method: GET
- name: Update Asset
  endpoint:
    path: /reference/updateasset
    method: PUT
- name: Delete an Asset
  endpoint:
    path: /reference/deleteasset-1
    method: DELETE
- name: Get Asset Details by ID
  endpoint:
    path: /reference/assetexport
    method: GET
- name: Get Tags
  endpoint:
    path: /reference/fetchtags
    method: GET
- name: Get Keywords
  endpoint:
    path: /reference/fetchkeywords
    method: GET
- name: Clone an Asset
  endpoint:
    path: /reference/assetclone
    method: POST
- name: Restore an Asset
  endpoint:
    path: /reference/restoreasset
    method: POST
- name: assets
  endpoint:
    path: /api/assets
    method: GET
    data_selector: assets
- name: asset
  endpoint:
    path: /api/assets/{assetId}
    method: GET
    data_selector: asset
    params: {}
- name: TabPane
  endpoint:
    path: /TabPane
    method: GET
    data_selector: label
    params: {}
- name: Update Asset
  endpoint:
    path: /assets/{assetId}
    method: PUT
- name: Drawer
  endpoint:
    path: /reference/drawer
    method: GET
- name: delete_asset
  endpoint:
    path: /api/assets/{assetId}
    method: DELETE
- name: saveConfiguration
  endpoint:
    path: /saveConfiguration
    method: POST
    data_selector: configuration
    params: {}
- name: asset_details
  endpoint:
    path: /assets/export/{assetId}
    method: GET
    data_selector: asset
    params:
      branch: main
      bearer_token: ''
- name: asset
  endpoint:
    path: /assets/export/assetId
    method: GET
- name: tags
  endpoint:
    path: /assets/tags
    method: GET
    data_selector: tags
- name: keywords
  endpoint:
    path: /assets/keywords
    method: GET
    data_selector: keywords
- name: clone_asset
  endpoint:
    path: /api/assets/{assetId}/clone
    method: POST
- name: restore_asset
  endpoint:
    path: /restoreasset
    method: POST
- name: restore_asset
  endpoint:
    path: /api/assets/{assetId}/restore
    method: POST
    data_selector: json
- name: restore_asset
  endpoint:
    path: /api/assets/assetId/restore
    method: POST
- name: Create Assets
  endpoint:
    path: /post_v2-assets
    method: POST
- name: Get Catalog
  endpoint:
    path: /listcatalog
    method: GET
- name: Get Asset by ID
  endpoint:
    path: /fetchasset
    method: GET
- name: Overwrite Asset
  endpoint:
    path: /updateasset
    method: PUT
- name: Update Asset
  endpoint:
    path: /updateassetpatch
    method: PATCH
- name: Delete Asset
  endpoint:
    path: /deleteasset
    method: DELETE
- name: Analytics
  endpoint:
    path: /reference/analytics
    method: GET
- name: Assets & Catalog - Simple
  endpoint:
    path: /reference/assets-catalog-simple-asset-management
    method: GET
- name: Assets & Catalog - Granular
  endpoint:
    path: /reference/assets-catalog-granular-asset-management
    method: GET
- name: Assets & Catalog - Bulk
  endpoint:
    path: /reference/assets-catalog-bulk-management
    method: GET
- name: Catalog 2.0 - Items
  endpoint:
    path: /reference/catalog-20-items
    method: GET
- name: Catalog 2.0 - Attributes
  endpoint:
    path: /reference/catalog-20-attributes
    method: GET
- name: Catalog 2.0 - Options
  endpoint:
    path: /reference/catalog-20-options
    method: GET
- name: Catalog 2.0 - Variants
  endpoint:
    path: /reference/catalog-20-variants
    method: GET
- name: Catalog 2.0 - AI Discovery
  endpoint:
    path: /reference/catalog-20-ai-discovery
    method: GET
- name: Catalog 2.0 - Transactions
  endpoint:
    path: /reference/catalog-20-transactions
    method: GET
- name: Branches
  endpoint:
    path: /reference/branches
    method: GET
- name: Data Tables
  endpoint:
    path: /reference/data-tables
    method: GET
- name: Fast Compositor
  endpoint:
    path: /reference/fast-compositor
    method: GET
- name: File Service
  endpoint:
    path: /reference/file-service
    method: GET
- name: Jobs Service
  endpoint:
    path: /reference/jobs
    method: GET
- name: Job Tasks
  endpoint:
    path: /reference/job-tasks
    method: GET
- name: Job Runs
  endpoint:
    path: /reference/job-runs
    method: GET
- name: Layers Service (Renders & AR)
  endpoint:
    path: /reference/layers-service-renders-ar
    method: GET
- name: Orders
  endpoint:
    path: /reference/orders
    method: GET
- name: Orgs
  endpoint:
    path: /reference/listorgs-1
    method: GET
- name: PDF Service
  endpoint:
    path: /reference/post_pdf
    method: GET
- name: Pricebooks
  endpoint:
    path: /reference/pricebooks
    method: GET
- name: Saved Configurations
  endpoint:
    path: /reference/saved-configurations
    method: GET
- name: Tags
  endpoint:
    path: /reference/tags
    method: GET
- name: Translations
  endpoint:
    path: /reference/translations
    method: GET
- name: Webhooks
  endpoint:
    path: /reference/webhooks
    method: GET
- name: event
  endpoint:
    path: /createevent
    method: POST
- name: restore_asset
  endpoint:
    path: /reference/restoreasset
    method: POST
- name: create_assets
  endpoint:
    path: /reference/post_v2-assets
    method: POST
- name: create_event
  endpoint:
    path: /analytics/events
    method: POST
- name: assets
  endpoint:
    path: /reference/assets-catalog-simple-asset-management
    method: GET
- name: catalog
  endpoint:
    path: /reference/assets-catalog-granular-asset-management
    method: GET
- name: bulk_management
  endpoint:
    path: /reference/assets-catalog-bulk-management
    method: POST
- name: legacy_management
  endpoint:
    path: /reference/assets-catalog-legacy-catalog-management
    method: GET
- name: event
  endpoint:
    path: /api/analytics/events/{id}
    method: GET
    data_selector: details
- name: assets
  endpoint:
    path: /assets
    method: POST
    data_selector: catalogItemInfo
    params: {}
- name: Get Analytics for Events
  endpoint:
    path: /reference/get_analytics-events-views
    method: GET
- name: event_views
  endpoint:
    path: /analytics/events/views
    method: GET
    params:
      bearer_token: public_access_token
      orgId: string
      metadata: string
      device: string
      referer: string
      subStartDate: YYYY/MM/DD
      endDate: YYYY/MM/DD
      range: month
      eventType: string
- name: catalog
  endpoint:
    path: /assets
    method: GET
- name: event_views
  endpoint:
    path: /analytics/events/views
    method: GET
    params:
      range: month
- name: asset
  endpoint:
    path: /api/v2/assets/{assetId}
    method: GET
    data_selector: ''
- name: generate_reports
  endpoint:
    path: /analytics/report
    method: GET
- name: overwrite_asset
  endpoint:
    path: /assets/{assetId}
    method: PUT
    data_selector: catalog item information
    params: {}
- name: Get Assets
  endpoint:
    path: /reference/listassets
    method: GET
- name: Get Asset by ID
  endpoint:
    path: /reference/fetchasset-1
    method: GET
- name: Update Asset
  endpoint:
    path: /reference/updateasset
    method: PUT
- name: Delete an Asset
  endpoint:
    path: /reference/deleteasset-1
    method: DELETE
- name: Get Asset Details by ID
  endpoint:
    path: /reference/assetexport
    method: GET
- name: Get Tags
  endpoint:
    path: /reference/fetchtags
    method: GET
- name: Get Keywords
  endpoint:
    path: /reference/fetchkeywords
    method: GET
- name: Clone an Asset
  endpoint:
    path: /reference/assetclone
    method: POST
- name: Restore an Asset
  endpoint:
    path: /reference/restoreasset
    method: POST
- name: update_asset
  endpoint:
    path: /updateasset
    method: PUT
- name: assets
  endpoint:
    path: /api/assets
    method: GET
    data_selector: ''
- name: asset
  endpoint:
    path: /api/assets/{assetId}
    method: GET
- name: asset
  endpoint:
    path: /assets/{assetId}
    method: PATCH
    data_selector: catalog item information
    params: {}
- name: update_asset
  endpoint:
    path: /assets/{assetId}
    method: PUT
- name: delete_asset
  endpoint:
    path: /assets/{assetId}
    method: DELETE
- name: delete_asset
  endpoint:
    path: /assets/{assetId}
    method: DELETE
- name: asset_details
  endpoint:
    path: /assets/export/{assetId}
    method: GET
    data_selector: asset
    params:
      branch: main
- name: global_attribute
  endpoint:
    path: /attributes
    method: POST
    data_selector: catalog item information
    params: {}
- name: asset
  endpoint:
    path: /assets/export/assetId
    method: GET
    data_selector: json
- name: tags
  endpoint:
    path: /assets/tags
    method: GET
- name: global_attribute
  endpoint:
    path: /attributes/{attributeId}
    method: GET
    data_selector: attribute
    params:
      bearer_token: ''
      branch: main
- name: keywords
  endpoint:
    path: /api/assets/keywords
    method: GET
    data_selector: keywords
- name: global_attribute
  endpoint:
    path: /attributes/{attributeId}
    method: PUT
- name: clone_asset
  endpoint:
    path: /api/assets/{assetId}/clone
    method: POST
- name: global_attribute
  endpoint:
    path: /attributes/{attributeId}
    method: PATCH
    data_selector: attribute
    params: {}
- name: restore_asset
  endpoint:
    path: /restoreasset
    method: POST
- name: restore_asset
  endpoint:
    path: /assets/{assetId}/restore
    method: POST
    data_selector: json
    params:
      orgId: required
- name: delete_attribute
  endpoint:
    path: /attributes/{attributeId}
    method: DELETE
- name: create_attribute_on_asset
  endpoint:
    path: /api/v2/assets/{assetId}/attributes
    method: POST
- name: restore_asset
  endpoint:
    path: /api/assets/assetId/restore
    method: POST
- name: asset_attribute
  endpoint:
    path: /api/v2/assets/{assetId}/attributes/{assetAttributeId}
    method: GET
- name: update_attribute_on_asset
  endpoint:
    path: /reference/updateattributeput
    method: PUT
- name: Create Assets
  endpoint:
    path: /reference/post_v2-assets
    method: POST
    data_selector: null
    params: {}
- name: Get Catalog
  endpoint:
    path: /reference/listcatalog
    method: GET
    data_selector: null
    params: {}
- name: Get Asset by ID
  endpoint:
    path: /reference/fetchasset
    method: GET
    data_selector: null
    params: {}
- name: Overwrite Asset
  endpoint:
    path: /reference/updateasset
    method: PUT
    data_selector: null
    params: {}
- name: Update Asset
  endpoint:
    path: /reference/updateassetpatch
    method: PATCH
    data_selector: null
    params: {}
- name: Delete Asset
  endpoint:
    path: /reference/deleteasset
    method: DELETE
    data_selector: null
    params: {}
- name: update_attribute_on_asset
  endpoint:
    path: /assets/{assetId}/attributes/{assetAttributeId}
    method: PUT
    data_selector: json
    params: {}
- name: Restore an Asset
  endpoint:
    path: /reference/restoreasset
    method: POST
- name: Create Assets
  endpoint:
    path: /reference/post_v2-assets
    method: POST
- name: assets
  endpoint:
    path: /reference/assets
    method: GET
    data_selector: records
- name: catalog
  endpoint:
    path: /reference/catalog
    method: GET
    data_selector: records
- name: assets
  endpoint:
    path: /assets
    method: POST
    data_selector: asset
    params: {}
- name: update_attribute_on_asset
  endpoint:
    path: /api/v2/assets/{assetId}/attributes/{assetAttributeId}
    method: PATCH
- name: catalog
  endpoint:
    path: /assets
    method: POST
    data_selector: json
- name: delete_attribute_from_asset
  endpoint:
    path: /assets/{assetId}/attributes/{assetAttributeId}
    method: DELETE
- name: add_metadata_to_asset
  endpoint:
    path: /assets/{assetId}/metadata
    method: POST
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: ''
- name: asset
  endpoint:
    path: /assets/{assetId}
    method: GET
    data_selector: response
- name: metadata_entry
  endpoint:
    path: /assets/{assetId}/metadata/{metadataId}
    method: GET
    data_selector: json
    params: {}
- name: Overwrite Asset
  endpoint:
    path: /reference/updateassetput
    method: PUT
- name: metadata_entry
  endpoint:
    path: /assets/assetId/metadata/metadataId
    method: GET
- name: overwrite_asset
  endpoint:
    path: /{assetId}
    method: PUT
    params: {}
- name: overwrite_metadata
  endpoint:
    path: /assets/{assetId}/metadata/{metadataId}
    method: PUT
- name: update_metadata_on_asset
  endpoint:
    path: /api/v2/assets/{assetId}/metadata/{metadataId}
    method: PATCH
- name: Update Asset
  endpoint:
    path: /reference/updateasset
    method: PUT
- name: delete_metadata_on_asset
  endpoint:
    path: /assets/{assetId}/metadata/{metadataId}
    method: DELETE
    data_selector: response
    params: {}
- name: asset
  endpoint:
    path: /assets/{assetId}
    method: PATCH
    data_selector: json
    params: {}
- name: delete_metadata_on_asset
  endpoint:
    path: /assets/assetId/metadata/metadataId
    method: DELETE
- name: delete_asset
  endpoint:
    path: /assets/{assetId}
    method: DELETE
- name: Create or Update Assets (file input)
  endpoint:
    path: /reference/importproducts-1
    method: POST
- name: Create or Update Assets (JSON input)
  endpoint:
    path: /reference/importproducts
    method: POST
- name: Export Asset List
  endpoint:
    path: /reference/exportproducts
    method: GET
- name: global_attribute
  endpoint:
    path: /attributes
    method: POST
    data_selector: ''
    params: {}
- name: create_or_update_assets
  endpoint:
    path: /products/import
    method: POST
- name: Create or Update Assets
  endpoint:
    path: /reference/importproducts
    method: POST
    data_selector: null
    params: {}
- name: global_attribute
  endpoint:
    path: /attributes/{attributeId}
    method: GET
    data_selector: attribute
    params:
      bearer_token: required
      branch: main
- name: assets
  endpoint:
    path: /api/products/import
    method: POST
    data_selector: json
    params:
      orgId: required
- name: global_attribute
  endpoint:
    path: /attributes/{attributeId}
    method: PUT
- name: Export Asset List
  endpoint:
    path: /reference/exportproducts
    method: GET
- name: global_attribute
  endpoint:
    path: /attributes/{attributeId}
    method: PATCH
    data_selector: attribute
    params: {}
- name: assets
  endpoint:
    path: /export/:format
    method: GET
    params:
      orgId: required
      tags: optional
      keywords: optional
      type: optional
- name: delete_attribute
  endpoint:
    path: /attributes/{attributeId}
    method: DELETE
- name: products
  endpoint:
    path: /api/products/export/:format
    method: GET
- name: Create Attribute on Asset
  endpoint:
    path: /api/v2/assets/{assetId}/attributes
    method: POST
- name: products
  endpoint:
    path: /reference/listproducts
    method: GET
- name: product
  endpoint:
    path: /reference/fetchproduct
    method: GET
- name: job
  endpoint:
    path: /reference/fetchjob
    method: GET
- name: upload_assets
  endpoint:
    path: /reference/uploadcatalogassets
    method: POST
- name: asset_attribute
  endpoint:
    path: /api/v2/assets/{assetId}/attributes/{assetAttributeId}
    method: GET
- name: products
  endpoint:
    path: /reference/listproducts
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: json
    params: {}
- name: update_attribute_on_asset
  endpoint:
    path: /assets/{assetId}/attributes/{assetAttributeId}
    method: PUT
    data_selector: json
    params: {}
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: application/json
- name: product
  endpoint:
    path: /catalog/products/{id}
    method: GET
    data_selector: response
- name: update_attribute_on_asset
  endpoint:
    path: /assets/{assetId}/attributes/{assetAttributeId}
    method: PATCH
- name: job
  endpoint:
    path: /catalog/jobs/{id}
    method: GET
    data_selector: output
- name: delete_attribute_from_asset
  endpoint:
    path: /assets/{assetId}/attributes/{assetAttributeId}
    method: DELETE
- name: add_metadata_to_asset
  endpoint:
    path: /api/v2/assets/{assetId}/metadata
    method: POST
- name: upload_assets
  endpoint:
    path: /catalog/assets/upload
    method: POST
- name: metadata_entry
  endpoint:
    path: /assets/{assetId}/metadata/{metadataId}
    method: GET
    data_selector: json
    params: {}
- name: Import Assets
  endpoint:
    path: /reference/importassets
    method: POST
- name: Export Asset
  endpoint:
    path: /reference/exportasset
    method: POST
- name: Render an Asset with WebGL
  endpoint:
    path: /reference/renderassetwebgl
    method: POST
- name: Render an Asset with VRay
  endpoint:
    path: /reference/renderassetvray
    method: POST
- name: Get Asset Thumbnail PNG
  endpoint:
    path: /reference/thumbnailasset
    method: GET
- name: metadata_entry
  endpoint:
    path: /assets/assetId/metadata/metadataId
    method: GET
- name: upload_assets
  endpoint:
    path: /reference/uploadcatalogassets
    method: POST
- name: import_assets
  endpoint:
    path: /reference/importassets
    method: POST
- name: overwrite_metadata
  endpoint:
    path: /assets/{assetId}/metadata/{metadataId}
    method: PUT
- name: import_assets
  endpoint:
    path: /asset-jobs/import
    method: POST
- name: import_asset
  endpoint:
    path: /import/asset
    method: POST
    data_selector: jobId
    params:
      fileId: string
      orgId: string
      sync: boolean
      settings:
        parentFolderId: string
        targetId: string
- name: update_metadata_on_asset
  endpoint:
    path: /api/v2/assets/{assetId}/metadata/{metadataId}
    method: PATCH
- name: delete_metadata
  endpoint:
    path: /assets/{assetId}/metadata/{metadataId}
    method: DELETE
- name: asset_export
  endpoint:
    path: /api/asset-jobs/{assetId}/export/{format}
    method: POST
    data_selector: json
    params: {}
- name: delete_metadata_on_asset
  endpoint:
    path: /assets/assetId/metadata/metadataId
    method: DELETE
- name: render_asset_webgl
  endpoint:
    path: /api/asset-jobs/{assetId}/render/webgl/image
    method: POST
- name: Create or Update Assets (file input)
  endpoint:
    path: /reference/importproducts-1
    method: POST
- name: Create or Update Assets (JSON input)
  endpoint:
    path: /reference/importproducts
    method: POST
- name: Export Asset List
  endpoint:
    path: /reference/exportproducts
    method: GET
- name: Render an Asset with VRay
  endpoint:
    path: /reference/renderassetvray
    method: POST
- name: create_or_update_assets
  endpoint:
    path: /products/import
    method: POST
- name: render_asset
  endpoint:
    path: /api/asset-jobs/{assetId}/render/vray/image
    method: POST
    params: {}
- name: Create or Update Assets (JSON input)
  endpoint:
    path: /importproducts
    method: POST
- name: asset_jobs
  endpoint:
    path: /api/asset-jobs/assetId/render/vray/image
    method: POST
- name: assets
  endpoint:
    path: /api/products/import
    method: POST
    data_selector: response
    params:
      orgId: string
      bearer_token: string
      sync: string
- name: Render all Combinations of an Asset
  endpoint:
    path: /virtualphotographerrenders
    method: POST
- name: export_asset_list
  endpoint:
    path: /exportproducts
    method: GET
- name: render_all_combinations_of_an_asset
  endpoint:
    path: /api/asset-jobs/{assetId}/renders
    method: POST
- name: export_assets
  endpoint:
    path: /:format
    method: GET
    params:
      orgId: required
      tags: optional
      keywords: optional
      type: optional
- name: renders
  endpoint:
    path: /renders
    method: POST
    data_selector: jobs
    params:
      assetId: required
      orgId: string
      configuration: object
      stageId: string
      stageConfiguration: object
      type: string
      layerId: string
      configurations: array of objects
      subset: object
- name: products
  endpoint:
    path: /reference/listproducts
    method: GET
- name: product_by_id
  endpoint:
    path: /reference/fetchproduct
    method: GET
- name: job_by_id
  endpoint:
    path: /reference/fetchjob
    method: GET
- name: create_composites
  endpoint:
    path: /api/asset-jobs/composites
    method: POST
    data_selector: ''
    params: {}
- name: products
  endpoint:
    path: /reference/listproducts
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: json
    params: {}
- name: export_all_combinations
  endpoint:
    path: /api/asset-jobs/exports
    method: POST
    data_selector: response
    params: {}
- name: exports
  endpoint:
    path: /asset-jobs/exports
    method: POST
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: json
- name: job_results_download
  endpoint:
    path: /reference/jobdownloads
    method: POST
- name: product
  endpoint:
    path: /catalog/products/{id}
    method: GET
    data_selector: response
- name: job_results_download
  endpoint:
    path: /api/asset-jobs/downloads
    method: POST
    data_selector: json
- name: job
  endpoint:
    path: /api/catalog/jobs/{id}
    method: GET
    data_selector: output
    params: {}
- name: upload_assets
  endpoint:
    path: /catalog/assets/upload
    method: POST
- name: Import Assets
  endpoint:
    path: /reference/importassets
    method: POST
- name: Export Asset
  endpoint:
    path: /reference/exportasset
    method: POST
- name: Render an Asset with WebGL
  endpoint:
    path: /reference/renderassetwebgl
    method: POST
- name: Get Asset Thumbnail PNG
  endpoint:
    path: /reference/thumbnailasset
    method: GET
- name: asset_job
  endpoint:
    path: /asset-jobs/{assetId}/composite
    method: POST
    params: {}
- name: Upload Assets (Images)
  endpoint:
    path: /reference/uploadcatalogassets
    method: POST
- name: Import Assets
  endpoint:
    path: /reference/importassets
    method: POST
- name: Get Asset Thumbnail PNG
  endpoint:
    path: /reference/thumbnailasset
    method: GET
- name: import_assets
  endpoint:
    path: /asset-jobs/import
    method: POST
- name: asset_thumbnail
  endpoint:
    path: /assets/thumbnail/{assetId}
    method: GET
    data_selector: Thumbnail retrieved.
- name: Export Vector Paths
  endpoint:
    path: /exportassetpaths
    method: POST
- name: export_paths
  endpoint:
    path: /api/asset-jobs/{assetId}/export-paths
    method: POST
- name: asset_export
  endpoint:
    path: /api/asset-jobs/{assetId}/export/{format}
    method: POST
    data_selector: json
    params:
      cache: boolean
      wait: boolean
      bearer_token: string
- name: asset_jobs
  endpoint:
    path: /asset-jobs/assetId/export-paths
    method: POST
    data_selector: data
    params: {}
- name: render_asset_webgl
  endpoint:
    path: /api/asset-jobs/{assetId}/render/webgl/image
    method: POST
- name: items
  endpoint:
    path: /reference/catalog-20-items
    method: GET
- name: attributes
  endpoint:
    path: /reference/catalog-20-attributes
    method: GET
- name: options
  endpoint:
    path: /reference/catalog-20-options
    method: GET
- name: variants
  endpoint:
    path: /reference/catalog-20-variants
    method: GET
- name: Render an Asset with VRay
  endpoint:
    path: /reference/renderassetvray
    method: POST
- name: Get All Items
  endpoint:
    path: /reference/get_items
    method: GET
- name: asset_render
  endpoint:
    path: /api/asset-jobs/{assetId}/render/vray/image
    method: POST
    data_selector: job
    params: {}
- name: Get All Items
  endpoint:
    path: /reference/get_items
    method: GET
- name: Render all Combinations of an Asset
  endpoint:
    path: /reference/virtualphotographerrenders
    method: POST
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: items
    params:
      page: '1'
      perPage: '50'
- name: items
  endpoint:
    path: /
    method: GET
    data_selector: items
    params: {}
- name: item
  endpoint:
    path: /catalog/items
    method: POST
    data_selector: responses
    params: {}
- name: asset_render
  endpoint:
    path: /render
    method: POST
    data_selector: renders
    params:
      assetId: required
      cache: boolean
      orgId: string
      stageId: string
      type: string
      layerId: string
      configurations: array of objects
      subset: object
- name: create_composites
  endpoint:
    path: /asset-jobs/composites
    method: POST
- name: item
  endpoint:
    path: /catalog/items/{id}
    method: GET
    data_selector: response
    params: {}
- name: entity
  endpoint:
    path: /api/v1/entities
    method: GET
    data_selector: object
    params: {}
- name: export_all_combinations
  endpoint:
    path: /api/asset-jobs/exports
    method: POST
    data_selector: json
- name: item
  endpoint:
    path: /catalog/items/id
    method: GET
    data_selector: object
    params: {}
- name: Job Results Download
  endpoint:
    path: /reference/jobdownloads
    method: POST
- name: job_results_download
  endpoint:
    path: /api/asset-jobs/downloads
    method: POST
    data_selector: results
    params: {}
- name: items
  endpoint:
    path: /catalog-20-items
    method: GET
    data_selector: items
- name: attributes
  endpoint:
    path: /catalog-20-attributes
    method: GET
    data_selector: attributes
- name: options
  endpoint:
    path: /catalog-20-options
    method: GET
    data_selector: options
- name: variants
  endpoint:
    path: /catalog-20-variants
    method: GET
    data_selector: variants
- name: item
  endpoint:
    path: /catalog/items/{id}
    method: PATCH
- name: item
  endpoint:
    path: /catalog/items/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: Create Composite Layered Renders into Image
  endpoint:
    path: /reference/composite
    method: POST
- name: Get Asset Thumbnail PNG
  endpoint:
    path: /reference/thumbnailasset
    method: GET
- name: items
  endpoint:
    path: /catalog/items
    method: DELETE
- name: composite_image
  endpoint:
    path: /asset-jobs/{assetId}/composite
    method: POST
    data_selector: json
    params: {}
- name: attributes_of_item
  endpoint:
    path: /catalog/items/{itemId}/attributes
    method: GET
    data_selector: attributes
    params:
      uuid: required
- name: Get Asset Thumbnail PNG
  endpoint:
    path: /reference/thumbnailasset
    method: GET
- name: attributes
  endpoint:
    path: /attributes
    method: GET
    data_selector: attributes
    params: {}
- name: asset_thumbnail
  endpoint:
    path: /assets/thumbnail/{assetId}
    method: GET
    data_selector: thumbnail
    params: {}
- name: item_attributes
  endpoint:
    path: /catalog/items/itemId/attributes
    method: GET
- name: Export Vector Paths
  endpoint:
    path: /exportassetpaths
    method: POST
- name: add_attribute_to_item
  endpoint:
    path: /catalog/items/{itemId}/attributes
    method: POST
    data_selector: responses
    params: {}
- name: export_paths
  endpoint:
    path: /asset-jobs/{assetId}/export-paths
    method: POST
    params:
      cache: boolean
      bearer_token: string
- name: delete_attribute_from_item
  endpoint:
    path: /catalog/items/{itemId}/attributes/{attributeId}
    method: DELETE
- name: items
  endpoint:
    path: /reference/catalog-20-items
    method: GET
    data_selector: items
- name: attributes
  endpoint:
    path: /reference/catalog-20-attributes
    method: GET
- name: Get All Items
  endpoint:
    path: /reference/get_items
    method: GET
- name: attributes
  endpoint:
    path: /api/v2/catalog/attributes
    method: GET
    data_selector: attributes
    params: {}
- name: items
  endpoint:
    path: /reference/get_items
    method: GET
- name: attribute
  endpoint:
    path: /api/v2/catalog/attributes
    method: POST
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: items
    params: {}
- name: attributes
  endpoint:
    path: /catalog/attributes/{id}
    method: GET
- name: items
  endpoint:
    path: /catalog/items
    method: GET
    data_selector: items
    params:
      page: 1
      perPage: 50
- name: Update Attribute
  endpoint:
    path: /api/v2/catalog/attributes/{id}
    method: PATCH
- name: item
  endpoint:
    path: /catalog/items
    method: POST
    data_selector: responses
    params: {}
- name: delete_attribute
  endpoint:
    path: /catalog/attributes/{id}
    method: DELETE
- name: entity
  endpoint:
    path: /api/v1/entities
    method: GET
    data_selector: object
    params: {}
- name: add_option_to_attribute
  endpoint:
    path: /api/v2/catalog/attributes/{attributeId}/options
    method: POST
- name: item
  endpoint:
    path: /catalog/items/{id}
    method: GET
    data_selector: item
    params: {}
- name: delete_option_from_attribute
  endpoint:
    path: /catalog/attributes/{attributeId}/options/{optionId}
    method: DELETE
- name: item
  endpoint:
    path: /items
    method: GET
    data_selector: object
    params: {}
- name: options
  endpoint:
    path: /reference/catalog-20-options
    method: GET
    data_selector: options
- name: items
  endpoint:
    path: /catalog/items
    method: GET
    data_selector: items
- name: get_all_options
  endpoint:
    path: /reference/get_options
    method: GET
    data_selector: options
- name: delete_option
  endpoint:
    path: /reference/delete_options-id
    method: DELETE
    data_selector: result
- name: update_option
  endpoint:
    path: /reference/patch_options-id
    method: PATCH
    data_selector: result
- name: create_option
  endpoint:
    path: /reference/post_options
    method: POST
    data_selector: result
- name: options
  endpoint:
    path: /reference/get_options
    method: GET
- name: item
  endpoint:
    path: /catalog-20-items
    method: GET
    data_selector: items
- name: attribute
  endpoint:
    path: /catalog-20-attributes
    method: GET
    data_selector: attributes
- name: option
  endpoint:
    path: /catalog-20-options
    method: GET
    data_selector: options
- name: variant
  endpoint:
    path: /catalog-20-variants
    method: GET
    data_selector: variants
- name: options
  endpoint:
    path: /options
    method: GET
    data_selector: options
    params:
      incremental: updatedAt
- name: item
  endpoint:
    path: /catalog/items/{id}
    method: PATCH
- name: options
  endpoint:
    path: /options
    method: GET
    data_selector: results
    params:
      page: 1
      perPage: 50
- name: delete_item
  endpoint:
    path: /catalog/items/{id}
    method: DELETE
    data_selector: null
    params:
      uuid: required
- name: option
  endpoint:
    path: /catalog/options
    method: POST
- name: items
  endpoint:
    path: /catalog/items
    method: DELETE
    data_selector: object
- name: option
  endpoint:
    path: /catalog/options/{id}
    method: GET
- name: update_option
  endpoint:
    path: /catalog/options/{id}
    method: PATCH
- name: item_attributes
  endpoint:
    path: /catalog/items/{itemId}/attributes
    method: GET
    data_selector: attributes
    params:
      bearer_token: required
      uuid: required
- name: attributes
  endpoint:
    path: /attributes
    method: GET
    data_selector: item
    params: {}
- name: delete_option
  endpoint:
    path: /catalog/options/{id}
    method: DELETE
- name: item_attributes
  endpoint:
    path: /catalog/items/itemId/attributes
    method: GET
- name: variants
  endpoint:
    path: /reference/catalog-20-variants
    method: GET
    data_selector: variants
- name: add_attribute_to_item
  endpoint:
    path: /catalog/items/{itemId}/attributes
    method: POST
    data_selector: responses
    params: {}
- name: variants
  endpoint:
    path: /catalog/items/{itemId}/variants
    method: GET
- name: generate_variants
  endpoint:
    path: /api/v2/catalog/items/{itemId}/variants/generate
    method: POST
- name: delete_attribute_from_item
  endpoint:
    path: /catalog/items/{itemId}/attributes/{attributeId}
    method: DELETE
- name: update_variant
  endpoint:
    path: /catalog/items/{itemId}/variants/{variantId}
    method: PATCH
- name: attributes
  endpoint:
    path: /api/v2/catalog/attributes
    method: GET
    data_selector: attributes
    params: {}
- name: set_prices
  endpoint:
    path: /api/v2/catalog/items/{itemId}/variants/{variantId}/prices
    method: PUT
- name: attribute
  endpoint:
    path: /catalog/attributes
    method: POST
- name: attributes
  endpoint:
    path: /catalog/attributes/{id}
    method: GET
- name: create_update_price
  endpoint:
    path: /catalog/items/{itemId}/variants/{variantId}/prices/{currency}
    method: PUT
- name: update_attribute
  endpoint:
    path: /api/v2/catalog/attributes/{id}
    method: PATCH
- name: delete_attribute
  endpoint:
    path: /catalog/attributes/{id}
    method: DELETE
- name: variant_content
  endpoint:
    path: /catalog/items/{itemId}/variants/{variantId}/content
    method: GET
    data_selector: content
    params: {}
- name: get_options_of_attribute
  endpoint:
    path: /catalog/attributes/{attributeId}/options
    method: GET
- name: attach_content_to_variant
  endpoint:
    path: /api/v2/catalog/items/{itemId}/variants/{variantId}/content
    method: POST
- name: add_option_to_attribute
  endpoint:
    path: /catalog/attributes/{attributeId}/options
    method: POST
- name: variant_content
  endpoint:
    path: /catalog/items/{itemId}/variants/{variantId}/content/{contentKey}
    method: GET
- name: delete_option_from_attribute
  endpoint:
    path: /catalog/attributes/{attributeId}/options/{optionId}
    method: DELETE
- name: options
  endpoint:
    path: /reference/catalog-20-options
    method: GET
    data_selector: records
- name: Get All Options
  endpoint:
    path: /reference/get_options
    method: GET
- name: Delete Option from Attribute
  endpoint:
    path: /reference/delete_attributes-attributeid-options-optionid
    method: DELETE
- name: experience
  endpoint:
    path: /reference/catalog-20-ai-discovery/get_experiences
    method: GET
    data_selector: experiences
- name: item
  endpoint:
    path: /reference/catalog-20-items/get_items
    method: GET
    data_selector: items
- name: attribute
  endpoint:
    path: /reference/catalog-20-attributes/get_attributes
    method: GET
    data_selector: attributes
- name: option
  endpoint:
    path: /reference/catalog-20-options/get_options
    method: GET
    data_selector: options
- name: variant
  endpoint:
    path: /reference/catalog-20-variants/listvariants
    method: GET
    data_selector: variants
- name: catalog_options
  endpoint:
    path: /reference/catalog-20-options
    method: GET
- name: filters
  endpoint:
    path: /filters
    method: POST
    data_selector: filters
- name: options
  endpoint:
    path: /catalog/options
    method: GET
    data_selector: options
    params:
      page: 1
      perPage: 50
- name: experiences
  endpoint:
    path: /api/experiences
    method: GET
    data_selector: experiences
- name: options
  endpoint:
    path: /catalog/options
    method: GET
    data_selector: records
    params:
      page: 1
      perPage: 50
- name: experience
  endpoint:
    path: /experiences
    method: POST
- name: experience
  endpoint:
    path: /experiences/{id}
    method: GET
    params:
      bearer_token: ''
      uuid: ''
- name: create_option
  endpoint:
    path: /catalog/options
    method: POST
- name: experience
  endpoint:
    path: /experiences/id
    method: GET
    data_selector: object
    params: {}
- name: update_option
  endpoint:
    path: /catalog/options/{id}
    method: PATCH
- name: update_experience
  endpoint:
    path: /api/experiences/{id}
    method: PATCH
- name: query_experience
  endpoint:
    path: /api/experiences/{id}/query
    method: POST
- name: variants
  endpoint:
    path: /reference/catalog-20-variants
    method: GET
    data_selector: variants
- name: prompts
  endpoint:
    path: /reference/get_prompts
    method: GET
- name: get_all_prompts
  endpoint:
    path: /reference/get_prompts
    method: GET
- name: get_prompt_versions
  endpoint:
    path: /reference/get_prompts-id-versions
    method: GET
- name: create_prompt_version
  endpoint:
    path: /reference/post_prompts-id
    method: POST
- name: update_prompt
  endpoint:
    path: /reference/patch_prompts-id
    method: PATCH
- name: get_prompt
  endpoint:
    path: /reference/get_prompts-id
    method: GET
- name: create_prompt
  endpoint:
    path: /reference/post_prompts
    method: POST
- name: prompts
  endpoint:
    path: /api/prompts
    method: GET
    data_selector: prompts
- name: update_variant
  endpoint:
    path: /api/v2/catalog/items/{itemId}/variants/{variantId}
    method: PATCH
- name: create_prompt
  endpoint:
    path: /api/prompts
    method: POST
- name: prompt
  endpoint:
    path: /api/prompts/{id}
    method: GET
- name: set_prices
  endpoint:
    path: /catalog/items/{itemId}/variants/{variantId}/prices
    method: PUT
    data_selector: ''
    params: {}
- name: update_prompt
  endpoint:
    path: /api/prompts/{id}
    method: PATCH
    data_selector: responses
    params: {}
- name: prompts
  endpoint:
    path: /prompts/id
    method: PATCH
    data_selector: object
    params: {}
- name: create_prompt_version
  endpoint:
    path: /api/prompts/{id}
    method: POST
- name: price
  endpoint:
    path: /catalog/items/{itemId}/variants/{variantId}/prices/{currency}
    method: PUT
- name: prompt_versions
  endpoint:
    path: /api/prompts/{id}/versions
    method: GET
- name: Bulk Create Catalog
  endpoint:
    path: /reference/importcatalog
    method: POST
- name: Parse CSV Catalog
  endpoint:
    path: /reference/parsecatalogcsv
    method: POST
- name: variant_content
  endpoint:
    path: /catalog/items/{itemId}/variants/{variantId}/content
    method: GET
- name: bulk_create_catalog
  endpoint:
    path: /catalog/import
    method: POST
    data_selector: data
    params: {}
- name: attach_content_to_variant
  endpoint:
    path: /api/v2/catalog/items/{itemId}/variants/{variantId}/content
    method: POST
- name: get_variant_content
  endpoint:
    path: /catalog/items/{itemId}/variants/{variantId}/content/{contentKey}
    method: GET
    data_selector: content
- name: Bulk Create Catalog
  endpoint:
    path: /reference/importcatalog
    method: POST
- name: delete_variant_content
  endpoint:
    path: /api/v2/catalog/items/{itemId}/variants/{variantId}/content/{contentKey}
    method: DELETE
- name: catalog_import
  endpoint:
    path: /catalog/import
    method: POST
    data_selector: object
    params: {}
- name: catalog_import
  endpoint:
    path: /api/v2/catalog/import
    method: POST
    headers:
      accept: application/json
      content-type: multipart/form-data
    params:
      type: new-catalog-import
      dryRun: 'false'
- name: experiences
  endpoint:
    path: /reference/catalog-20-ai-discovery/get_experiences
    method: GET
    data_selector: experiences
- name: experience
  endpoint:
    path: /reference/catalog-20-ai-discovery/get_experiences-id
    method: GET
    data_selector: experience
- name: create_experience
  endpoint:
    path: /reference/catalog-20-ai-discovery/post_experiences
    method: POST
    data_selector: experience
- name: update_experience
  endpoint:
    path: /reference/catalog-20-ai-discovery/patch_experiences-id
    method: PATCH
    data_selector: experience
- name: query_experience
  endpoint:
    path: /reference/catalog-20-ai-discovery/post_experiences-id-query
    method: POST
    data_selector: query_result
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
- name: filters
  endpoint:
    path: /filters
    method: POST
    data_selector: filters
    params: {}
- name: transactions
  endpoint:
    path: /reference/listtransactions
    method: GET
    data_selector: records
- name: create_transactions
  endpoint:
    path: /reference/createtransaction
    method: POST
    data_selector: records
- name: get_transaction_by_id
  endpoint:
    path: /reference/gettransaction
    method: GET
    data_selector: records
- name: update_transaction
  endpoint:
    path: /reference/updatetransaction
    method: PATCH
    data_selector: records
- name: get_cart_details
  endpoint:
    path: /reference/cartgetcartdetails
    method: GET
    data_selector: records
- name: add_or_update_item_in_cart
  endpoint:
    path: /reference/cartupsertcart
    method: POST
    data_selector: records
- name: delete_item_from_cart
  endpoint:
    path: /reference/cartremovefromcart
    method: DELETE
    data_selector: records
- name: experiences
  endpoint:
    path: /api/experiences
    method: GET
    data_selector: experiences
- name: transactions
  endpoint:
    path: /api/transactions
    method: POST
- name: experience
  endpoint:
    path: /experiences/{id}
    method: GET
    data_selector: Experience
    params: {}
- name: transaction
  endpoint:
    path: /api/transactions/{id}
    method: PATCH
- name: cart_details
  endpoint:
    path: /api/transactions/{transactionId}/cart
    method: GET
    data_selector: details
    params: {}
- name: update_experience
  endpoint:
    path: /api/experiences/{id}
    method: PATCH
- name: add_or_update_item_in_cart
  endpoint:
    path: /api/transactions/{transactionId}/cart
    method: POST
- name: query_experience
  endpoint:
    path: /api/experiences/{id}/query
    method: POST
    data_selector: results
    params: {}
- name: branches
  endpoint:
    path: /reference/branches
    method: GET
    data_selector: records
    params: {}
- name: prompts
  endpoint:
    path: /catalog-20-prompts
    method: GET
    data_selector: records
    params: {}
- name: org_branches
  endpoint:
    path: /branches
    method: GET
    data_selector: branches
- name: branch
  endpoint:
    path: /branches/{branchId}
    method: GET
- name: Get All Prompts
  endpoint:
    path: /reference/get_prompts
    method: GET
    data_selector: prompts
    params: {}
- name: Get All Prompt Versions
  endpoint:
    path: /reference/get_prompts-id-versions
    method: GET
    data_selector: promptVersions
    params: {}
- name: Create Prompt
  endpoint:
    path: /reference/post_prompts
    method: POST
    data_selector: createdPrompt
    params: {}
- name: Update Prompt
  endpoint:
    path: /reference/patch_prompts-id
    method: PATCH
    data_selector: updatedPrompt
    params: {}
- name: Get Prompt
  endpoint:
    path: /reference/get_prompts-id
    method: GET
    data_selector: prompt
    params: {}
- name: Create Prompt Version
  endpoint:
    path: /reference/post_prompts-id
    method: POST
    data_selector: createdPromptVersion
    params: {}
- name: prompts
  endpoint:
    path: /api/prompts
    method: GET
    data_selector: Prompts
- name: delete_branch
  endpoint:
    path: /branches/{branchId}
    method: DELETE
- name: create_prompt
  endpoint:
    path: /api/prompts
    method: POST
- name: branch_diff
  endpoint:
    path: /branches/{branchId}/diff
    method: GET
- name: prompt
  endpoint:
    path: /api/prompts/{id}
    method: GET
- name: merge_branch
  endpoint:
    path: /branches/{branchId}/merge
    method: POST
- name: update_prompt
  endpoint:
    path: /api/prompts/{id}
    method: PATCH
    data_selector: null
    params: {}
- name: datatable
  endpoint:
    path: /reference/data-tables
    method: GET
    data_selector: datatables
- name: prompts
  endpoint:
    path: /prompts/id
    method: PATCH
- name: create_prompt_version
  endpoint:
    path: /api/prompts/{id}
    method: POST
- name: Bulk Create Catalog
  endpoint:
    path: /reference/importcatalog
    method: POST
    data_selector: null
    params: {}
- name: Parse CSV Catalog
  endpoint:
    path: /reference/parsecatalogcsv
    method: POST
    data_selector: null
    params: {}
- name: datatable
  endpoint:
    path: /reference/importdatatable
    method: POST
- name: datatables
  endpoint:
    path: /reference/listdatatables
    method: GET
- name: datatable_by_id
  endpoint:
    path: /reference/getdatatable
    method: GET
- name: update_datatable
  endpoint:
    path: /reference/updatedatatable
    method: PUT
- name: delete_datatable
  endpoint:
    path: /reference/deletedatatable
    method: DELETE
- name: restore_datatable
  endpoint:
    path: /reference/restoredatatable
    method: POST
- name: download_datatable
  endpoint:
    path: /reference/downloaddatatable
    method: GET
- name: get_row_value
  endpoint:
    path: /reference/getrowvalue
    method: GET
- name: get_list_of_rows
  endpoint:
    path: /reference/getrowvalues
    method: GET
- name: update_rows
  endpoint:
    path: /reference/updaterows
    method: POST
- name: bulk_create_catalog
  endpoint:
    path: /catalog/import
    method: POST
    data_selector: data
    params: {}
- name: parse_csv_catalog
  endpoint:
    path: /catalog/parse
    method: POST
    data_selector: response
- name: datatable
  endpoint:
    path: /api/datatables
    method: POST
    data_selector: datatable
    params:
      orgId: required
      branch: main
      bearer_token: private token
- name: Bulk Create Catalog
  endpoint:
    path: /reference/importcatalog
    method: POST
- name: catalog_import
  endpoint:
    path: /catalog/import
    method: POST
    data_selector: object
    params: {}
- name: datatables
  endpoint:
    path: /datatables
    method: GET
    data_selector: list
    params: {}
- name: datatable
  endpoint:
    path: /datatables/{datatableId}
    method: GET
- name: catalog_import
  endpoint:
    path: /catalog/import
    method: POST
    data_selector: response
    params:
      type: new-catalog-import
      dryRun: 'false'
- name: datatable
  endpoint:
    path: /reference/data-tables
    method: GET
    data_selector: datatables
- name: datatable
  endpoint:
    path: /datatables/{datatableId}
    method: PUT
    data_selector: datatable
    params:
      orgId: required
      branch: main
      bearer_token: required
- name: datatable
  endpoint:
    path: /datatables/{datatableId}
    method: DELETE
- name: transactions
  endpoint:
    path: /listtransactions
    method: GET
    data_selector: transactions
- name: create_transactions
  endpoint:
    path: /createtransaction
    method: POST
    data_selector: transaction
- name: transaction
  endpoint:
    path: /gettransaction
    method: GET
    data_selector: transaction
- name: update_transaction
  endpoint:
    path: /updatetransaction
    method: PATCH
    data_selector: transaction
- name: cart_details
  endpoint:
    path: /cartgetcartdetails
    method: GET
    data_selector: cart
- name: cart_upsert
  endpoint:
    path: /cartupsertcart
    method: POST
    data_selector: cart
- name: cart_remove
  endpoint:
    path: /cartremovefromcart
    method: DELETE
    data_selector: cart
- name: Restore Datatable
  endpoint:
    path: /api/datatables/{datatableId}/restore
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: object
    params: {}
- name: datatable
  endpoint:
    path: /datatables/{datatableId}/download
    method: GET
- name: row_value
  endpoint:
    path: /api/datatables/{datatableId}/row
    method: GET
- name: get_list_of_rows
  endpoint:
    path: /api/datatables/{datatableId}/rows
    method: GET
- name: transaction
  endpoint:
    path: /api/transactions/{id}
    method: PATCH
- name: update_rows
  endpoint:
    path: /api/datatables/{datatableId}/rows
    method: POST
- name: composite_image
  endpoint:
    path: /reference/fast-compositor
    method: GET
- name: cart_details
  endpoint:
    path: /api/transactions/{transactionId}/cart
    method: GET
    data_selector: details
    params: {}
- name: composite_image
  endpoint:
    path: /createcomposite
    method: GET
- name: Add or Update Item in Cart
  endpoint:
    path: /api/transactions/{transactionId}/cart
    method: POST
    data_selector: null
    params: {}
- name: upload_files
  endpoint:
    path: /uploadfiles
    method: POST
- name: get_file_by_id
  endpoint:
    path: /getfile
    method: GET
- name: get_files_report
  endpoint:
    path: /getorgfilereport
    method: GET
- name: branches
  endpoint:
    path: /reference/branches
    method: GET
- name: upload_files
  endpoint:
    path: /files
    method: POST
    data_selector: files
- name: file
  endpoint:
    path: /api/files/{id}
    method: GET
- name: org_branches
  endpoint:
    path: /branches
    method: GET
    data_selector: branches
    params: {}
- name: files_report
  endpoint:
    path: /files/report
    method: GET
- name: branch
  endpoint:
    path: /branches/{branchId}
    method: GET
    data_selector: response
- name: jobs
  endpoint:
    path: /reference/listjobs
    method: GET
- name: job_by_id
  endpoint:
    path: /reference/fetchjob-1
    method: GET
- name: retry_job
  endpoint:
    path: /reference/retryjob
    method: POST
- name: cancel_job
  endpoint:
    path: /reference/canceljob
    method: POST
- name: resume_job
  endpoint:
    path: /reference/resumejob
    method: POST
- name: pause_job
  endpoint:
    path: /reference/pausejob
    method: POST
- name: branch_diff
  endpoint:
    path: /branches/{branchId}/diff
    method: GET
- name: Get Files Report
  endpoint:
    path: /reference/getorgfilereport
    method: GET
- name: Get Jobs
  endpoint:
    path: /reference/listjobs
    method: GET
- name: branches
  endpoint:
    path: /api/branches/{branchId}/merge
    method: POST
- name: jobs
  endpoint:
    path: /jobs
    method: GET
- name: datatables
  endpoint:
    path: /reference/data-tables
    method: GET
    data_selector: datatables
    params: {}
- name: job
  endpoint:
    path: /api/jobs/{jobId}
    method: GET
    data_selector: response
- name: retry_job
  endpoint:
    path: /api/jobs/{jobId}/retry
    method: POST
- name: job
  endpoint:
    path: /api/jobs/jobId/retry
    method: POST
- name: job_by_id
  endpoint:
    path: /api/jobs/jobId
    method: GET
- name: datatable
  endpoint:
    path: /reference/importdatatable
    method: POST
    data_selector: null
    params: {}
- name: datatables
  endpoint:
    path: /reference/listdatatables
    method: GET
    data_selector: null
    params: {}
- name: datatable_by_id
  endpoint:
    path: /reference/getdatatable
    method: GET
    data_selector: null
    params: {}
- name: update_datatable
  endpoint:
    path: /reference/updatedatatable
    method: PUT
    data_selector: null
    params: {}
- name: delete_datatable
  endpoint:
    path: /reference/deletedatatable
    method: DELETE
    data_selector: null
    params: {}
- name: restore_datatable
  endpoint:
    path: /reference/restoredatatable
    method: POST
    data_selector: null
    params: {}
- name: download_datatable
  endpoint:
    path: /reference/downloaddatatable
    method: GET
    data_selector: null
    params: {}
- name: cancel_job
  endpoint:
    path: /api/jobs/{jobId}/cancel
    method: POST
- name: datatable_creation
  endpoint:
    path: /api/datatables
    method: POST
    data_selector: datatable
    params:
      orgId: required
      branch: main
      bearer_token: private token
- name: resume_job
  endpoint:
    path: /api/jobs/{jobId}/resume
    method: POST
- name: pause_job
  endpoint:
    path: /api/jobs/{jobId}/pause
    method: POST
- name: datatables
  endpoint:
    path: /datatables
    method: GET
- name: datatable
  endpoint:
    path: /datatables/{datatableId}
    method: GET
- name: Get Tasks
  endpoint:
    path: /reference/listtasks
    method: GET
- name: Pause Job
  endpoint:
    path: /reference/pausejob
    method: POST
- name: datatable
  endpoint:
    path: /reference/data-tables
    method: GET
- name: tasks
  endpoint:
    path: /reference/listtasks
    method: GET
- name: datatable_update
  endpoint:
    path: /datatables/{datatableId}
    method: PUT
    data_selector: datatable
    params:
      orgId: string
      branch: main
      bearer_token: string
- name: tasks
  endpoint:
    path: /api/jobs/tasks
    method: GET
    params:
      orgId: ''
      jobId: ''
      runStatus: ''
      perPage: 30
      page: 1
      sort: -createdAt
- name: datatable
  endpoint:
    path: /datatables/{datatableId}
    method: DELETE
- name: job_tasks
  endpoint:
    path: /jobs/tasks
    method: GET
- name: get_task_by_id
  endpoint:
    path: /fetchtask
    method: GET
- name: Restore Datatable
  endpoint:
    path: /datatables/{datatableId}/restore
    method: POST
- name: task
  endpoint:
    path: /jobs/tasks/{taskId}
    method: GET
    data_selector: json
    params: {}
- name: datatable
  endpoint:
    path: /datatables/{datatableId}/download
    method: GET
- name: tasks
  endpoint:
    path: /jobs/tasks/taskId
    method: GET
- name: get_row_value
  endpoint:
    path: /api/datatables/{datatableId}/row
    method: GET
- name: retry_task
  endpoint:
    path: /api/jobs/tasks/{taskId}/retry
    method: POST
    data_selector: json
    params: {}
- name: datatable_rows
  endpoint:
    path: /api/datatables/{datatableId}/rows
    method: GET
- name: update_rows
  endpoint:
    path: /api/datatables/{datatableId}/rows
    method: POST
- name: task
  endpoint:
    path: /jobs/tasks/taskId/retry
    method: POST
- name: Create Composite Image
  endpoint:
    path: /reference/fast-compositor/createcomposite
    method: GET
- name: job_runs
  endpoint:
    path: /reference/job-runs
    method: GET
    data_selector: listruns
- name: composite_image
  endpoint:
    path: /createcomposite
    method: GET
- name: Get Runs
  endpoint:
    path: /reference/listruns
    method: GET
- name: Get Run by ID
  endpoint:
    path: /reference/fetchrun
    method: GET
- name: Retry Task by ID
  endpoint:
    path: /reference/retrytask
    method: POST
- name: upload_files
  endpoint:
    path: /uploadfiles
    method: POST
- name: get_file_by_id
  endpoint:
    path: /getfile
    method: GET
- name: get_files_report
  endpoint:
    path: /getorgfilereport
    method: GET
- name: job_runs
  endpoint:
    path: /reference/listruns
    method: GET
- name: upload_files
  endpoint:
    path: /files
    method: POST
- name: runs
  endpoint:
    path: /api/jobs/runs
    method: GET
    data_selector: runs
    params:
      jobId: ''
      taskId: ''
      orgId: ''
      perPage: 30
      page: 1
      sort: -createdAt
- name: file
  endpoint:
    path: /files/{id}
    method: GET
    data_selector: ''
    params: {}
- name: job_runs
  endpoint:
    path: /jobs/runs
    method: GET
- name: files_report
  endpoint:
    path: /files/report
    method: GET
- name: run
  endpoint:
    path: /jobs/runs/{runId}
    method: GET
    data_selector: run
    params: {}
- name: jobs
  endpoint:
    path: /reference/jobs
    method: GET
    data_selector: listjobs
- name: job
  endpoint:
    path: /reference/jobs/{id}
    method: GET
    data_selector: fetchjob-1
- name: retry_job
  endpoint:
    path: /reference/jobs/retry
    method: POST
    data_selector: retryjob
- name: cancel_job
  endpoint:
    path: /reference/jobs/cancel
    method: POST
    data_selector: canceljob
- name: resume_job
  endpoint:
    path: /reference/jobs/resume
    method: POST
    data_selector: resumejob
- name: pause_job
  endpoint:
    path: /reference/jobs/pause
    method: POST
    data_selector: pausejob
- name: runs
  endpoint:
    path: /api/jobs/runs/runId
    method: GET
- name: Get Jobs
  endpoint:
    path: /reference/listjobs
    method: GET
- name: run_reports
  endpoint:
    path: /jobs/reports
    method: GET
    params:
      orgId: string
- name: jobs
  endpoint:
    path: /jobs
    method: GET
    data_selector: jobs
- name: job
  endpoint:
    path: /api/jobs/{jobId}
    method: GET
    data_selector: job
- name: layers
  endpoint:
    path: /reference/listlayers
    method: GET
- name: create_layer
  endpoint:
    path: /reference/layercreation
    method: POST
- name: get_layer_by_id
  endpoint:
    path: /reference/fetchlayer
    method: GET
- name: get_layer_by_query_parameters
  endpoint:
    path: /reference/fetchlayerquery
    method: GET
- name: get_layers_in_groups_by_query_parameters
  endpoint:
    path: /reference/fetchgroup
    method: POST
- name: retry_job
  endpoint:
    path: /jobs/{jobId}/retry
    method: POST
    data_selector: job_info
    params: {}
- name: Get Run Reports
  endpoint:
    path: /reference/getreports
    method: GET
- name: Get List of Layers
  endpoint:
    path: /reference/listlayers
    method: GET
- name: layers
  endpoint:
    path: /reference/listlayers
    method: GET
- name: job
  endpoint:
    path: /api/jobs/jobId/retry
    method: POST
    data_selector: response
    params: {}
- name: get_job
  endpoint:
    path: /api/jobs/jobId
    method: GET
    data_selector: response
    params: {}
- name: layers
  endpoint:
    path: /layers
    method: GET
    data_selector: json
    params:
      perPage: 30
      page: 1
- name: cancel_job
  endpoint:
    path: /api/jobs/{jobId}/cancel
    method: POST
- name: resume_job
  endpoint:
    path: /api/jobs/{jobId}/resume
    method: POST
- name: layer
  endpoint:
    path: /reference/layers-service-renders-ar
    method: POST
- name: pause_job
  endpoint:
    path: /api/jobs/{jobId}/pause
    method: POST
- name: tasks
  endpoint:
    path: /reference/job-tasks
    method: GET
    data_selector: tasks
- name: layer
  endpoint:
    path: /api/layers
    method: POST
    data_selector: layer
    params:
      branch: main
- name: Get Tasks
  endpoint:
    path: /reference/listtasks
    method: GET
- name: Pause Job
  endpoint:
    path: /reference/pausejob
    method: POST
- name: layer
  endpoint:
    path: /reference/fetchlayer
    method: GET
    data_selector: records
- name: tasks
  endpoint:
    path: /reference/job-tasks/listtasks
    method: GET
    data_selector: tasks
- name: layer
  endpoint:
    path: /layers/{id}
    method: GET
    data_selector: json
    params:
      bearer_token: ''
      resultType: ''
      branch: main
- name: tasks
  endpoint:
    path: /jobs/tasks
    method: GET
    data_selector: json
    params:
      orgId: ''
      jobId: ''
      runStatus: ''
      perPage: 30
      page: 1
      sort: -createdAt
- name: layer
  endpoint:
    path: /reference/fetchlayerquery
    method: GET
- name: job_tasks
  endpoint:
    path: /jobs/tasks
    method: GET
- name: get_task_by_id
  endpoint:
    path: /fetchtask
    method: GET
- name: layer
  endpoint:
    path: /layers/layer
    method: GET
    params:
      bearer_token: string
      assetId: string
      assetLayer: string
      assetLayerConfiguration: string
      assetLayerConfigurationHash: string
      stageId: string
      stageConfiguration: string
      stageConfigurationHash: string
      metadata: string
      resultType: string
      optimization: string
      branch: string
- name: task
  endpoint:
    path: /api/jobs/tasks/{taskId}
    method: GET
    data_selector: task
- name: layers_in_groups
  endpoint:
    path: /reference/fetchgroup
    method: POST
- name: retry_task
  endpoint:
    path: /api/jobs/tasks/{taskId}/retry
    method: POST
    data_selector: json
- name: layers
  endpoint:
    path: /layers/groups/{groupBy}
    method: POST
    data_selector: groups
    params:
      perPage: 30
      page: 1
- name: job_runs
  endpoint:
    path: /reference/job-runs
    method: GET
    data_selector: runs
- name: orders
  endpoint:
    path: /reference/orders
    method: GET
    data_selector: listorders
- name: Get Runs
  endpoint:
    path: /reference/listruns
    method: GET
- name: Get Run by ID
  endpoint:
    path: /reference/fetchrun
    method: GET
- name: Retry Task by ID
  endpoint:
    path: /reference/retrytask
    method: POST
- name: orders
  endpoint:
    path: /reference/orders
    method: GET
    data_selector: orders
    params: {}
- name: job_runs
  endpoint:
    path: /reference/listruns
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: runs
  endpoint:
    path: /api/jobs/runs
    method: GET
    params:
      jobId: ''
      taskId: ''
      orgId: ''
      perPage: 30
      page: 1
      sort: -createdAt
- name: orders
  endpoint:
    path: /reference/orders
    method: GET
- name: order
  endpoint:
    path: /orders
    method: POST
    data_selector: order
    params:
      bearer_token: string
- name: run
  endpoint:
    path: /jobs/runs/{runId}
    method: GET
    data_selector: run
    params:
      bearer_token: string
- name: order
  endpoint:
    path: /orders/{id}
    method: GET
    data_selector: order
    params: {}
- name: run_reports
  endpoint:
    path: /api/jobs/reports
    method: GET
    data_selector: reports
    params:
      orgId: required
- name: order
  endpoint:
    path: /orders/{id}
    method: PUT
- name: add_items_to_order
  endpoint:
    path: /reference/additems
    method: POST
- name: get_orders
  endpoint:
    path: /reference/listorders
    method: GET
- name: add_items_to_order
  endpoint:
    path: /orders/{id}/items
    method: POST
    data_selector: modified_order
    params:
      bearer_token: string
- name: list_layers
  endpoint:
    path: /reference/listlayers
    method: GET
- name: layer_creation
  endpoint:
    path: /reference/layercreation
    method: POST
- name: fetch_layer
  endpoint:
    path: /reference/fetchlayer
    method: GET
- name: fetch_layer_query
  endpoint:
    path: /reference/fetchlayerquery
    method: GET
- name: fetch_group
  endpoint:
    path: /reference/fetchgroup
    method: POST
- name: Get List of Layers
  endpoint:
    path: /reference/listlayers
    method: GET
- name: Get Run Reports
  endpoint:
    path: /reference/getreports
    method: GET
- name: remove_items_from_order
  endpoint:
    path: /reference/removeitems
    method: PUT
- name: layers
  endpoint:
    path: /reference/listlayers
    method: GET
- name: layers
  endpoint:
    path: /layers
    method: GET
    data_selector: layers
    params:
      perPage: 30
      page: 1
- name: remove_items_from_order
  endpoint:
    path: /orders/{id}/items
    method: PUT
    data_selector: json
- name: layers
  endpoint:
    path: /layers
    method: GET
- name: order_items
  endpoint:
    path: /api/orders/id/items
    method: PUT
- name: layers
  endpoint:
    path: /reference/layers-service-renders-ar
    method: GET
- name: orders
  endpoint:
    path: /reference/orders
    method: GET
- name: tags
  endpoint:
    path: /reference/tags
    method: GET
- name: public_orgs
  endpoint:
    path: /orgs
    method: GET
    data_selector: organizations
- name: create_layer
  endpoint:
    path: /layers
    method: POST
    params:
      branch: main
- name: layers
  endpoint:
    path: /layers
    method: POST
- name: list_layers
  endpoint:
    path: /listlayers
    method: GET
- name: fetch_layer
  endpoint:
    path: /fetchlayer
    method: GET
- name: org
  endpoint:
    path: /orgs/{id}
    method: GET
    data_selector: org
    params: {}
- name: layer
  endpoint:
    path: /reference/fetchlayer
    method: GET
- name: public_orgs
  endpoint:
    path: /orgs/id
    method: GET
- name: layer
  endpoint:
    path: /layers/{id}
    method: GET
    data_selector: json
    params:
      bearer_token: string
      resultType: string
      branch: main
- name: pdf_creation
  endpoint:
    path: /api/pdf
    method: POST
- name: pricebook
  endpoint:
    path: /pricebooks
    method: GET
- name: layer
  endpoint:
    path: /reference/fetchlayerquery
    method: GET
    data_selector: records
- name: pricebook
  endpoint:
    path: /api/orgs/{orgId}/pricebooks
    method: POST
- name: layer
  endpoint:
    path: /layers/layer
    method: GET
    data_selector: json
    params: {}
- name: pricebooks
  endpoint:
    path: /orgs/{orgId}/pricebooks
    method: GET
    data_selector: list
- name: layers_in_groups
  endpoint:
    path: /reference/fetchgroup
    method: POST
- name: layers
  endpoint:
    path: /layers/groups/{groupBy}
    method: POST
    params:
      perPage: 30
      page: 1
- name: pricebook
  endpoint:
    path: /orgs/{orgId}/pricebooks/{pricebookId}
    method: PUT
- name: orders
  endpoint:
    path: /reference/orders
    method: GET
    data_selector: listorders
    params: {}
- name: pricebook
  endpoint:
    path: /orgs/{orgId}/pricebooks/{pricebookId}
    method: DELETE
- name: Get Orders
  endpoint:
    path: /reference/listorders
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: saved_configuration
  endpoint:
    path: /reference/saved-configurations
    method: GET
- name: order
  endpoint:
    path: /reference/orders
    method: post
- name: save_configuration
  endpoint:
    path: /configurations
    method: POST
- name: configurations
  endpoint:
    path: /api/configurations
    method: GET
    data_selector: configurations
- name: order
  endpoint:
    path: /orders
    method: POST
    data_selector: order
    params:
      bearer_token: string
- name: configurations_by_sku
  endpoint:
    path: /configurations/sku
    method: GET
    data_selector: configurations
    params:
      sku: required
- name: configurations
  endpoint:
    path: /configurations/sku
    method: GET
- name: order
  endpoint:
    path: /orders/{id}
    method: GET
    data_selector: order
    params:
      bearer_token: string
- name: configuration
  endpoint:
    path: /api/configurations/{id}
    method: GET
    data_selector: configuration
- name: thumbnail
  endpoint:
    path: /api/configurations/{id}/thumbnail
    method: GET
    data_selector: null
    params: {}
- name: update_order
  endpoint:
    path: /orders/{id}
    method: PUT
- name: Get File Linked to Configuration
  endpoint:
    path: /reference/fetchattachment
    method: GET
- name: add_items_to_order
  endpoint:
    path: /reference/orders/add_items
    method: POST
- name: get_file
  endpoint:
    path: /api/configurations/{id}/files/{key}
    method: GET
    params:
      orgId: ''
- name: order_items
  endpoint:
    path: /orders/{id}/items
    method: POST
    data_selector: null
    params:
      bearer_token: string
- name: Tag
  endpoint:
    path: /reference/tags
    method: GET
    data_selector: tags
    params: {}
- name: tag
  endpoint:
    path: /api/tags
    method: POST
- name: remove_items_from_order
  endpoint:
    path: /reference/removeitems
    method: PUT
- name: remove_items
  endpoint:
    path: /orders/{id}/items
    method: PUT
    data_selector: orders
    params:
      bearer_token: string
- name: public_organizations
  endpoint:
    path: /orgs
    method: GET
    data_selector: organizations
    params:
      bearer_token: string
- name: org
  endpoint:
    path: /orgs/{id}
    method: GET
    data_selector: '200'
    params: {}
- name: org
  endpoint:
    path: /orgs/id
    method: GET
- name: public_orgs
  endpoint:
    path: /orgs
    method: GET
- name: create_pdf
  endpoint:
    path: /api/pdf
    method: POST
- name: pricebook
  endpoint:
    path: /pricebooks
    method: GET
    data_selector: pricebooks
- name: pricebook
  endpoint:
    path: /api/orgs/{orgId}/pricebooks
    method: POST
- name: pricebook
  endpoint:
    path: /orgs/{orgId}/pricebooks
    method: GET
    data_selector: pricebooks
- name: pricebook
  endpoint:
    path: /api/orgs/{orgId}/pricebooks/{pricebookId}
    method: GET
- name: pricebooks
  endpoint:
    path: /orgs/orgId/pricebooks/pricebookId
    method: GET
- name: pricebook
  endpoint:
    path: /orgs/{orgId}/pricebooks/{pricebookId}
    method: PUT
- name: Save Configuration
  endpoint:
    path: /reference/saveconfiguration
    method: POST
- name: Get Configurations
  endpoint:
    path: /reference/listconfigurations
    method: GET
- name: Get Configurations by SKU
  endpoint:
    path: /reference/fetchconfigurationbysku
    method: GET
- name: Get Configuration by ID/ShortID
  endpoint:
    path: /reference/fetchconfiguration
    method: GET
- name: Get Thumbnail of Configuration by ID/shortID
  endpoint:
    path: /reference/fetchthumbnail
    method: GET
- name: Get File Linked to Configuration
  endpoint:
    path: /reference/fetchattachment
    method: GET
- name: saved_configuration
  endpoint:
    path: /api/configurations
    method: POST
- name: configurations
  endpoint:
    path: /api/configurations
    method: GET
    data_selector: configurations
- name: configurations_by_sku
  endpoint:
    path: /configurations/sku
    method: GET
    data_selector: configurations
    params:
      sku: required
      orgId: ''
- name: configurations
  endpoint:
    path: /configurations/sku
    method: GET
- name: configuration_by_id_shortid
  endpoint:
    path: /fetchconfiguration
    method: GET
- name: configuration
  endpoint:
    path: /api/configurations/{id}
    method: GET
- name: thumbnail_configuration
  endpoint:
    path: /api/configurations/{id}/thumbnail
    method: GET
- name: File Linked to Configuration
  endpoint:
    path: /reference/fetchattachment
    method: GET
- name: file_linked_to_configuration
  endpoint:
    path: /configurations/{id}/files/{key}
    method: GET
    params:
      orgId: ''
- name: tags
  endpoint:
    path: /reference/tags
    method: GET
- name: tag
  endpoint:
    path: /api/tags
    method: POST
notes:
- Always use `await` with setConfiguration to ensure the configuration is passed fully.
- A public authorization token is required.
- Use the `getDisplayAttributes()` method to retrieve item attributes.
- Use the `setConfiguration()` method to change item configurations.
- A Threekit account & a catalog item to embed
- Uses public tokens for authentication
- This is a high-level introduction into using the Threekit Configurator API.
- A public token is required for API access.
- Public tokens can be used for GET requests from the client-side.
- Private tokens are used for server-side requests.
- Cookie tokens require orgId to be passed in requests.
- Please ensure you test a build of your app locally first prior to deploy.
- With NextJS you can run the `npm run build` command to test for build errors.
- When you create content in Threekit, there is a good chance you'll want to use that
  content in places other than a product detail page.
- Cookie tokens are provided when the app is embedded into an org.
- To provide this custom ID to Threekit and Advanced Buyer Analytics, you must populate
  the optional embed parameter analyticsCustomId.
- To provide custom ID to Threekit and Advanced Buyer Analytics, populate the optional
  embed parameter analyticsCustomId.
- A job may take several minutes to complete.
- Ensure to check for the job's successful completion before downloading the result.
- 'Check for the job''s successful completion by checking for ''status'': ''stopped''
  in the JSON return.'
- Best practice is to use a Catalog Item's ID for assetId.
- It is recommended that you use the threekit-player.js script, which will load dependencies
  as needed.
- For use within China, use the URLs with .sanzujian.cn.
- When there is need for increased control over Ul in the mobile environment, one
  option is to make a native app for the configurator instead of using the browser.
- Please refrain from targeting this content for direct editing.
- The Threekit iOS SDK can be used to add a Threekit 2D/3D Player into an iOS app.
- Requires setup of connected app in Threekit domain
- When there is need for increased control over UI in the mobile environment, one
  option is to make a native app for the configurator instead of using the browser.
- The ThreeKit Player can be embedded natively on a mobile app by using a component
  that supports web content.
- Avoid trying to embed multiple players, especially when it comes to using the same
  item assetId. This will likely cause several issues, both in terms of performance
  and functionality.
- Transitioning from one camera position to another will happen instantly using this
  method.
- This method would not be suitable in case where a gradual animated transition is
  necessary.
- Ensure browser compatibility with .webp filetype when using Snapshot feature.
- Requires an API key for authentication
- Transitioning from one camera position to another will happen instantly using this
  method. This method would not be suitable in case where a gradual animated transition
  is necessary.
- If you are using the Snapshot feature to create .webp files please ensure browser
  compatibility with that filetype.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The Composable Player supports only a single cache scope on player embed.
- Cache keys generated by the Publish feature for individual catalog items are ignored
  by the composable player.
- Some objects like Contact may return nulls in deeply nested fields
- In order to use the Viewer within a Next.JS implementation, we need to implement
  it within a separate component.
- The focal target of the <TurntableControls> is currently locked at the world (0,
  0, 0) location.
- This control mode is not currently compatible with the Camera Switching method that
  uses the camera prop on the <MyScene> component.
- Hooks are context-sensitive and depend on the ThreeKit authentication provided by
  the <Viewer> component.
- The initial load will take significantly longer when the glTF file has not yet been
  created and cached.
- Refreshing the cache requires a new cacheScope string to invalidate the cache and
  generate a new cached version of the assets.
- The Composable Player is in a very early stage of development.
- If changes are made to the assets in the Platform, then a new cacheScope string
  is required in order to invalidate the cache.
- Service for generating snapshots of the composable player.
- You will need to implement your own loading visual for users to be aware that something
  is happening while the new glTF files are being fetched, as the load time can be
  several seconds in case the glTF has to be created from scratch.
- The type definition of this return is rather complex, as not all attribute types
  share the same properties.
- This hook can only be used within a <ConfiguratorProvider> context.
- The type definition of the return is rather complex, as not all attribute types
  share the same properties.
- You will need to rely on Type Guards or Type Assertions in order to get around this
  issue.
- Hooks are context-sensitive and depend on the ThreeKit authentication provided by
  the `<Viewer>` component.
- Use public token for your org in front-end app
- All product UIs built using the ProductLayouts must be place in the src/products
  folder.
- The player component is required to have a height above 0px at all times.
- Project specific configurations are stored in the threekit.config.js file and the
  .treble directory.
- 'Product Layout files must be named to match the following pattern: *.product.jsx.'
- Requires a public token for Treble Launchpad
- Capture key user decisions during their interactions with your application.
- Ensure consistent naming for stages to maintain clarity.
- Determines whether to use the 3D Player (`webgl`) or the 2D Player (`image`)
- The caching options for the player contain the maxAge and scope for assets caching
- Before deploying, thoroughly test your analytics implementation to ensure all events
  are captured accurately.
- 'Files must exist with exact filenames: public/index.html, src/index.js, threekit.config.js,
  and .treble directory with Treble Apps config files.'
- Credentials should be stored in the .env file to avoid being checked into the git
  repository.
- For projects that will require embedding into an existing webpages or hosting with
  Threekit, it is strongly recommended that you follow this guide for project setup.
- Your app is ready for deployment!
- To learn more about the Player's widget containers you can click here, or head over
  to the Player component page.
- Requires setup of Threekit credentials
- Sample code includes orgId and publicToken
- The default increment value is 1.
- Determines whether to use the 3D Player (webgl) or the 2D Player (image).
- The caching options for the player. It contains the maxAge and scope for assets
  caching.
- Determines if we render the default Threekit configurator.
- An override for the configuration to initialize our asset with.
- Parameter to show/hide the built-in AR Button.
- Parameter to show/hide the built-in Share Button.
- Toggles vertical orbit on mobile devices on or off.
- Determines whether to display a snapshot while the player is loading.
- Determines if we show the progress bar during load.
- Takes a callback as its value. The callback's only argument is a number, representing
  the progress ratio (from 0.0 to 1.0).
- Store credentials in the .env file to avoid checking them into the git repository.
- If no Threekit environment is explicitly provided the scripts will default to using
  the Threekit Preview environment.
- To update any of the theme's values you just have to pass in the value you want
  to use into the theme object in the ThreekitProvider's props.
- Player needs a height
- Default height is 70vh
- Default width is 100%
- Default minimum height is 600px
- Requires setup of connected app in Threekit
- Using the Threekit Provider is required as it initializes the Threekit API.
- There can only be one Threekit Provider in your app.
- The Flat Form component is used to render out the configurator for the initialized
  asset.
- The component will not manage your selection state, and will require the selected
  value be passed in as well.
- The useMetadata hook provides the metadata present on the item used to initialize
  the player.
- The hook will initially return false. Once the Threekit API has loaded it will continue
  to return true.
- Used to set an overwrite of the message presented to the user when the share URL
  has been successfully copied.
- Player needs a height — always have a defined height 1px or greater.
- The height for the Player component is set to '70vh'.
- The width for the Player component is set to '100%'.
- The minimum height for the Player component messaging is set to '600px'.
- These cameras must be setup to the configurator using the reserved camera attribute.
- The Threekit Provider is required as it initializes the Threekit API.
- Using query-parameter tkProduct for product selection is not recommended in production.
- Currently the component can only show the price from the first pricing schema. Support
  for multiple Pricebooks and Currencies coming soon.
- Strict property controls rendering behavior if the HTML element is not found.
- All other API endpoints can only be accessed from the server-side.
- The only time the orgId is required is when a Cookie token is used for authentication.
- 'Embedded apps will receive the following info through the URL query params: appid,
  token, orgId, hostname and branch.'
- All GET API endpoints can be used both on the client-side as well as on server side
  applications.
- Requests may only come from the token's allowed domains.
- All GET API endpoints can be used both on the client-side as well as on server side
  applications. When using them on the client-side, care must be taken to use only
  public tokens.
- When using the API endpoints with a Bearer authentication token, there is no need
  to provide the orgId.
- This endpoint only works with private tokens.
- The URL for this request expired after 30 days.
- Public access token used to authorize the request.
- This endpoint is only accessible using a private token.
- Credentials are required as Bearer token.
- This endpoint is only accessible using a private token
- Requires setup of connected app in api
- Specify only one of 'archived' or 'includeArchived'.
- The request must originate from a domain added to the authentication token.
- UUIDs are used for unique identification of entities.
- Refer to the specific endpoint documentation for detailed usage.
- UUIDs are required for various entities.
- Public or Private Threekit authentication token required.
- Update an Attribute from the Catalog given the Attribute's ID or Custom ID.
- Public or Private Threekit authentication token is required.
- Get all of the Attributes that are associated with an Item given the Item's ID or
  Custom ID.
- Delete an Option from the Catalog given the Option's ID or Custom ID.
- Simple `=` comparisons is probably all you need.
- Public or Private Threekit authentication token must be used.
- The code generated in the example for the Bulk Create Catalog API endpoint will
  not function correctly due to limitations in website functionality.
- Also see Simple Example above. Simple `=` comparisons is probably all you need.
- Results may vary even when using the same query.
- This will delete all the content in the branch. NOTE - This is a permanent action
  and cannot be reversed.
- Download a datatable.
- Retrieves a job by its ID.
- Only works for orders belonging to the token's organization.
- This service will allow you to create PDFs from a Liquid File with JSON inputs.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Error fetching data
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 404 - A user asking for a non-existent asset
- 422 - Cannot restore an active asset
- 401 User is not authenticated. They must be authenticated to use this service.
- 401 - A user making a request without any valid auth token.
- 403 - The token being used does not belong to the org being queried or does not
  have enough permissions to make the request.
- 403 The token being used does not belong to the org being queried or does not have
  enough permissions to make the request.
- 404 No asset was found for the given ID
- 403 - A user makes a request with insufficient permissions.
- 404 - A user asking for a non-existent asset.
- 422 - A user passing the wrong data.
- 422 - A user passing a the wrong data.
- '401 Unauthorized: Check if the bearer token is provided and valid.'
- 'URL Expired: The URL for this request expired after 30 days.'
- 422 The request body was missing required fields or contained invalid fields.
- 404 - No asset was found for the given ID
- 404 No attribute with the given name/ID was found on the asset.
- 422 - Invalid data provided in the request body.
- 404 - A user is requesting non-existent metadata entry on a asset.
- 404 - A user is requesting metadata entry on a non-existent asset.
- 200 Successfully delete the catalog item/attribute
- '401 Unauthorized: A user making a request without any valid auth token.'
- '403 Forbidden: The token being used does not belong to the org being queried or
  does not have enough permissions to make the request.'
- '422 Unprocessable Entity: The request body was missing required fields or contained
  invalid fields.'
- 401 User is unauthorized to make the request
- 401 - Unauthorized to make the request
- 422 - Format or information in imported file is not valid.
- '401: User is not authenticated. They must be authenticated to use this service.'
- '403: The token being used does not belong to the org being queried or does not
  have enough permissions to make the request.'
- '404: No asset was found for the given ID'
- '422: The request body was missing required fields or contained invalid fields.'
- 422 - An error occurred fetching the specified product(s)
- 401 The token provided is not authorized to make the request or the token is invalid.
- 403 No token was provided in the query string of the request
- 401 - A user making a request with an invalid token
- 403 - A user makes a request without provided an access token in the query string
  of the request
- 422 - A user makes a request without converting the metadata object to string
- 422 Invalid data provided in the request body.
- 401 Unauthorized to make the request.
- 422 - Malformed request, import couldn't start.
- 401 Unauthorized to make the request
- 404 - A user is attempting to delete non-existent metadata entry on an asset.
- 404 - A user is attempting to delete metadata entry on a non-existent asset.
- 422 - Malformed request, export job couldn't start.
- 422 An error occurred fetching the specified product(s).
- 422 - Malformed request, render job couldn't start.
- 422 Malformed request, render job couldn't start.
- 422 - JobId not provided in the request
- 422 - Malformed request, export job could not start
- '401 Unauthorized: Recheck access token'
- 422 - Malformed request, render job couldn't start
- '400: Bad request - check request format and parameters'
- '422: Length ≥ 1'
- '400: Invalid request — check request parameters'
- '404: Not Found'
- 422 JobId not provided in the request
- '400: Bad Request'
- '401 Unauthorized: to make the request'
- '401 Unauthorized: Recheck credentials'
- '400'
- '404'
- '422'
- '401 Unauthorized: Recheck authentication token'
- '400 Bad Request: Invalid request parameters'
- '422 Unprocessable Entity: Request was well-formed but unable to be followed due
  to semantic errors'
- '422: Unprocessable Entity'
- '401 Unauthorized: Check your authentication token.'
- '401: Unauthorized'
- '403: Forbidden'
- '401 Unauthorized: Check bearer token or JWT token'
- '403 Forbidden: Ensure proper permissions'
- '404 Not Found: Verify endpoint and resource path'
- '403 Forbidden: Check permissions for the requested resource'
- '404 Not Found: Verify the endpoint or resource ID'
- '401 Unauthorized: If using a public token the request must originate from a domain
  added to the authentication token.'
- 422 - malformedFormat
- 422 - uploadFileError
- '403 Forbidden: Insufficient permissions to access the resource'
- '404 Not Found: The requested resource could not be found'
- 403 - A user makes a request without provided an access token in the query string
  of the request.
- 404 - A user asking for a non-existent job.
- 404 - A user asking for a non-existent task.
- 404 - A user asking for a non-existent run.
- 404 - A user forgot to pass the organization ID.
- 403 - A user makes a request without providing an access token in the query string
  of the request.
- 422 - A user makes a request with the invalid query fields.
- 422 - A user passing a parameter with invalid format
- 422 - A user passing a parameter with invalid format.
- '401: The token provided is not authorized to make the request or the token is invalid.'
- 403 User provides the ID of an order which cannot be edited using a public token
- 404 No order was found for the given ID
- '403: User provides the ID of an order which cannot be edited using a public token.'
- 403 - Unpublished Order
- 404 - A user asking for a non-existent order
- 401 - A user making a request without any valid auth token
- 422 - A user makes a request with the invalid query fields
- '403: The token provided is not authorized to make the request.'
- 403 - A user makes a request to retrieve an organization which is not set to Public
  and is not the organization linked to the token
- 404 - A user asking for a non-existent organization
- '401 Unauthorized: Unauthorized to make the request'
- 200 Successful get request, response body will include the list of orders
- 404 - noConfigurationFound
- '403: User provides the ID of an order which cannot be edited using a public token'
- '404: No order was found for the given ID'
- 404 - configurationNotFound
- 404 - AttachmentNotFound
- 404 No organization was found for the given ID
auth_info:
  mentioned_objects:
  - Player API
  - Configurator API
  - Public Tokens
  - Private Tokens
  - Cookie Tokens
  - OauthToken
  - AuthProvider
  - NamedCredential
  - ThreekitAuthProps
  - Session
  - OptionsType
  - ARStage
  - orgId
  - publicToken
client:
  base_url: https://preview.threekit.com/api
  auth:
    type: Bearer
source_metadata: null
