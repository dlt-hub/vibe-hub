resources:
- name: accounts
  endpoint:
    path: /auth/v1/customer/services/accounts
    method: GET
    data_selector: content
    params:
      page: '0'
      limit: '50'
- name: create_account
  endpoint:
    path: /auth/v1/customer/services/accounts
    method: POST
    data_selector: content
    params: {}
- name: policies
  endpoint:
    path: /policies
    method: GET
    data_selector: records
- name: configurations
  endpoint:
    path: /config
    method: GET
    data_selector: records
- name: credentials
  endpoint:
    path: /credentials
    method: GET
    data_selector: records
- name: personas
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: sessions
  endpoint:
    path: /sessions
    method: GET
    data_selector: records
- name: tasks
  endpoint:
    path: /notifications
    method: GET
    data_selector: records
- name: user_profile
  endpoint:
    path: /idhub/admin/users
    method: POST
    data_selector: user
    params: {}
- name: persona
  endpoint:
    path: /idhub/admin/personas
    method: POST
    data_selector: persona
    params: {}
- name: consent
  endpoint:
    path: /idhub/admin/consents
    method: POST
    data_selector: consent
    params: {}
- name: rules
  endpoint:
    path: /access-management/rules
    method: GET
- name: policies
  endpoint:
    path: /access-management/policies
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: userinfo
  endpoint:
    path: /userinfo
    method: GET
    data_selector: records
- name: personas
  endpoint:
    path: /directory/persona-definitions
    method: GET
    data_selector: personas
- name: personas
  endpoint:
    path: /api/personas
    method: POST
    data_selector: persona
    params: {}
- name: user_attributes
  endpoint:
    path: /v1/user_attributes
    method: GET
    data_selector: attributes
- name: policies
  endpoint:
    path: /access-management/policies
    method: POST
    data_selector: policies
- name: rules
  endpoint:
    path: /access-management/rules
    method: POST
    data_selector: rules
- name: newLpta2Encoder
  endpoint:
    path: /newLpta2Encoder
    method: POST
    data_selector: LptaTokenEncoder
    params: {}
- name: decodeLTPAToken
  endpoint:
    path: /decodeLTPAToken
    method: POST
    data_selector: LtpaToken
    params: {}
- name: encodeLTPAToken
  endpoint:
    path: /encodeLTPAToken
    method: POST
    data_selector: encodedToken
    params: {}
- name: ltpa2TokenBuilder
  endpoint:
    path: /ltpa2TokenBuilder
    method: POST
    data_selector: TokenBuilder
    params: {}
- name: servers
  endpoint:
    path: /servers
    method: GET
    data_selector: servers
    params: {}
- name: configurations
  endpoint:
    path: /configurations
    method: GET
    data_selector: configurations
    params: {}
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
    params: {}
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: services
    params: {}
- name: workflow_tests
  endpoint:
    path: /workflow_tests
    method: GET
    data_selector: workflow_tests
    params: {}
- name: scripts
  endpoint:
    path: /scripts
    method: GET
    data_selector: scripts
    params: {}
- name: library_files
  endpoint:
    path: /library_files
    method: GET
    data_selector: library_files
    params: {}
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
    params: {}
- name: properties
  endpoint:
    path: /properties
    method: GET
    data_selector: properties
    params: {}
- name: logging
  endpoint:
    path: /logging
    method: GET
    data_selector: logging
    params: {}
- name: authorization_policies
  endpoint:
    path: /authorization_policies
    method: GET
    data_selector: authorization_policies
    params: {}
- name: security_stores
  endpoint:
    path: /security_stores
    method: GET
    data_selector: security_stores
    params: {}
- name: jdbcSelectRequest
  endpoint:
    path: /api/jdbcSelectRequest
    method: POST
    data_selector: resultSet
    params: {}
- name: jdbcSelectRequest
  endpoint:
    path: /api/jdbcSelectRequest
    method: POST
    data_selector: results
    params: {}
- name: configuration_file
  endpoint:
    path: /configurations
    method: POST
    data_selector: configurations
    params: {}
- name: workflow_file
  endpoint:
    path: /workflows
    method: POST
    data_selector: workflows
    params: {}
- name: upload_configuration
  endpoint:
    path: /upload
    method: POST
    data_selector: upload
    params: {}
- name: trustbuilder_server
  endpoint:
    path: /api/v1/servers
    method: POST
    data_selector: server
    params: {}
- name: Add New Template
  endpoint:
    path: /configuration/templates/add
    method: POST
    data_selector: template
    params: {}
- name: Import Template
  endpoint:
    path: /configuration/templates/import
    method: POST
    data_selector: imported_template
    params: {}
- name: Edit Template
  endpoint:
    path: /configuration/templates/edit
    method: PUT
    data_selector: edited_template
    params: {}
- name: Delete Template
  endpoint:
    path: /configuration/templates/delete
    method: DELETE
    data_selector: deleted_template
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: component
  endpoint:
    path: /components
    method: GET
    data_selector: components
    params: {}
- name: library_file
  endpoint:
    path: /services/data/vXX.X/sobjects/LibraryFile
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: soap
  endpoint:
    path: /soap/<Workflow_ID>
    method: GET
    data_selector: ''
    params: {}
- name: xml
  endpoint:
    path: /xml/<Workflow_ID>
    method: GET
    data_selector: ''
    params: {}
- name: html
  endpoint:
    path: /html/<Workflow_ID>
    method: GET
    data_selector: ''
    params: {}
- name: generic
  endpoint:
    path: /generic/<Workflow_ID>
    method: GET
    data_selector: ''
    params: {}
- name: ocsp
  endpoint:
    path: /ocsp/<Workflow_ID>
    method: GET
    data_selector: ''
    params: {}
- name: helloworld
  endpoint:
    path: /helloworld
    method: GET
- name: Memory / Session service
  endpoint:
    path: /services/memory-session
    method: GET
- name: MemCached / Session service
  endpoint:
    path: /services/memcached-session
    method: GET
- name: DateService
  endpoint:
    path: /services/date
    method: GET
- name: EncryptionService
  endpoint:
    path: /services/encryption
    method: GET
- name: StoreEncryptionService
  endpoint:
    path: /services/store-encryption
    method: GET
- name: Radius Endpoint Service
  endpoint:
    path: /services/radius
    method: GET
- name: Ldap Endpoint Service
  endpoint:
    path: /services/ldap
    method: GET
- name: Domtai Service
  endpoint:
    path: /services/domtai
    method: GET
- name: AMQProducerService
  endpoint:
    path: /services/amq-producer
    method: GET
- name: AMQConsumerService
  endpoint:
    path: /services/amq-consumer
    method: GET
- name: sessionService
  endpoint:
    path: /session
    method: GET
- name: ldapService
  endpoint:
    path: /ldap
    method: GET
    params:
      port: '1389'
      workflow: ldapworkflow
- name: encryptionService
  endpoint:
    path: /encryption
    method: POST
- name: Logging
  endpoint:
    path: /product/logging
    method: GET
- name: memory_service
  endpoint:
    path: /service/memory
    method: GET
    data_selector: records
- name: date_service
  endpoint:
    path: /service/date
    method: GET
    data_selector: records
- name: encryption_service
  endpoint:
    path: /service/encryption
    method: GET
    data_selector: records
- name: bind_request
  endpoint:
    path: /bind
    method: POST
    data_selector: input
- name: search_request
  endpoint:
    path: /search
    method: POST
    data_selector: input
- name: Digipass
  endpoint:
    path: /digipass
    method: GET
    data_selector: data
    params: {}
- name: QR
  endpoint:
    path: /qr
    method: POST
    data_selector: data
    params: {}
- name: InternalApiPublicService
  endpoint:
    path: /admin/api/v1/gateway/loggingformats
    method: POST
    headers:
      Content-Type: application/json
- name: MobileAuthenticatorScriptService
  endpoint:
    path: /admin/api/v1/
    method: GET
- name: LoadBalancingSettings
  endpoint:
    path: /LoadBalancing
    method: GET
    data_selector: LoadBalancing
    params: {}
- name: ldapAuthenticateRequest
  endpoint:
    path: /ldap/authenticate
    method: POST
    data_selector: response
    params:
      DN: required
      Password: required
- name: ldapSearchRequest
  endpoint:
    path: /ldap/search
    method: POST
    data_selector: response
    params:
      baseDN: required
      filter: required
      scope: required
- name: certificateRequest
  endpoint:
    path: /certificateRequest
    method: POST
    data_selector: response
    params: {}
- name: link_token_request
  endpoint:
    path: /digipassDBLinkTokenRequest
    method: POST
    data_selector: response
    params:
      Application: required
      Serial number: required
      Loginid: required
      Principal: optional
      Login Policy: optional
      Token: optional
      User: optional
- name: unlink_token_request
  endpoint:
    path: /digipassDBUnlinkTokenRequest
    method: POST
    data_selector: response
    params:
      Serialnr: optional
      Application: required
      Loginid: required
      Principal: optional
- name: unlock_token_request
  endpoint:
    path: /digipassDBUnlockTokenRequest
    method: POST
    data_selector: response
    params:
      Application: required
      Serialnr: optional
      Principal: optional
      Loginid: required
      Randomnr: required
- name: change_static_password_request
  endpoint:
    path: /digipassDBChangeStaticPasswordRequest
    method: POST
    data_selector: response
    params:
      Application: required
      Loginid: optional
      Serialnr: required
      Principal: optional
      Pwd1: required
      Pwd2: required
- name: delete_token_request
  endpoint:
    path: /digipassDBDeleteTokenRequest
    method: POST
    data_selector: response
    params:
      Application: required
      Serialnr: required
- name: find_free_token_request
  endpoint:
    path: /digipassDBFindFreeTokenRequest
    method: POST
    data_selector: response
    params:
      Application: required
      Type: optional
- name: find_tokens_request
  endpoint:
    path: /digipassDBFindTokensRequest
    method: POST
    data_selector: response
    params:
      Principal: optional
- name: find_users_request
  endpoint:
    path: /digipassDBFindUsersRequest
    method: POST
    data_selector: response
    params:
      Serialnr: required
- name: force_pin_change_request
  endpoint:
    path: /digipassDBForcePinChangeRequest
    method: POST
    data_selector: response
    params:
      Application: required
      Serialnr: required
- name: reset_static_password_request
  endpoint:
    path: /digipassDBResetStaticPasswordRequest
    method: POST
    data_selector: response
    params:
      Application: required
      Serialnr: required
- name: reset_token_request
  endpoint:
    path: /digipassDBResetTokenRequest
    method: POST
    data_selector: response
    params:
      Application: required
      Serialnr: required
- name: sync_token_request
  endpoint:
    path: /digipassDBSyncTokenRequest
    method: POST
    data_selector: response
    params:
      Application: required
      Serialnr: required
      Pwd1: required
      Chl1: required
      Pwd2: required
      Chl2: required
- name: token_info_request
  endpoint:
    path: /digipassDBTokenInfoRequest
    method: POST
    data_selector: response
    params:
      Application: required
      Serialnr: required
- name: jdbc/auth
  endpoint:
    path: java:comp/env/jdbc/auth
    method: GET
- name: authentication
  endpoint:
    path: /auth
    method: POST
- name: search
  endpoint:
    path: /search
    method: GET
- name: add
  endpoint:
    path: /add
    method: POST
- name: delete
  endpoint:
    path: /delete
    method: DELETE
- name: modify
  endpoint:
    path: /modify
    method: PUT
- name: password_manipulations
  endpoint:
    path: /password
    method: POST
- name: ldap_search
  endpoint:
    path: /ldap/search
    method: POST
    data_selector: entries
    params: {}
- name: ldap_add
  endpoint:
    path: /ldap/add
    method: POST
    data_selector: result
    params: {}
- name: ldap_modify
  endpoint:
    path: /ldap/modify
    method: POST
    data_selector: result
    params: {}
- name: ldap_delete
  endpoint:
    path: /ldap/delete
    method: POST
    data_selector: result
    params: {}
- name: ldap_change_password
  endpoint:
    path: /ldap/change_password
    method: POST
    data_selector: result
    params: {}
- name: ldap_set_password
  endpoint:
    path: /ldap/set_password
    method: POST
    data_selector: result
    params: {}
- name: totpGenerateSecret
  endpoint:
    path: /totpGenerateSecret
    method: POST
    data_selector: generated
    params: {}
- name: totpValidate
  endpoint:
    path: /totpValidate
    method: POST
    data_selector: status
    params: {}
- name: hotpValidate
  endpoint:
    path: /hotpValidate
    method: POST
    data_selector: status
    params: {}
- name: ocraValidate
  endpoint:
    path: /ocraValidate
    method: POST
    data_selector: status
    params: {}
- name: ocspRequest
  endpoint:
    path: /ocspRequest
    method: POST
    data_selector: workItem.ocspInput
    params: {}
- name: ocspResponse
  endpoint:
    path: /ocspResponse
    method: GET
    data_selector: workItem.ocspOutput
    params: {}
- name: push_notification
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: radiusRequest
  endpoint:
    path: /radiusRequest
    method: POST
    data_selector: response
    params: {}
- name: SamlGenerateRequest
  endpoint:
    path: /samlGenerateRequest
    method: POST
    data_selector: template
    params: {}
- name: SamlMetadataRequest
  endpoint:
    path: /samlMetadataRequest
    method: POST
    data_selector: template
    params: {}
- name: SamlValidateRequest
  endpoint:
    path: /samlValidateRequest
    method: POST
    data_selector: token
    params: {}
- name: sms
  endpoint:
    path: /smppRequest
    method: POST
    data_selector: response
    params: {}
- name: smtpRequest
  endpoint:
    path: /smtpRequest
    method: POST
    data_selector: mailInput
    params: {}
- name: checkEmail
  endpoint:
    path: /checkEmail
    method: POST
    data_selector: mailOutput
    params: {}
- name: user
  endpoint:
    path: /isam-admin/users
    method: POST
    data_selector: createdUser
- name: group
  endpoint:
    path: /isam-admin/groups
    method: POST
    data_selector: createdGroup
- name: create_user
  endpoint:
    path: /tamCreateUserRequest
    method: POST
    data_selector: response
    params: {}
- name: delete_user
  endpoint:
    path: /tamDeleteUserRequest
    method: DELETE
    data_selector: response
    params: {}
- name: modify_user
  endpoint:
    path: /tamModifyUserRequest
    method: PUT
    data_selector: response
    params: {}
- name: merge_user
  endpoint:
    path: /tamMergeUserRequest
    method: POST
    data_selector: response
    params: {}
- name: import_user
  endpoint:
    path: /tamImportUserRequest
    method: POST
    data_selector: response
    params: {}
- name: create_group
  endpoint:
    path: /tamCreateGroupRequest
    method: POST
    data_selector: response
    params: {}
- name: delete_group
  endpoint:
    path: /tamDeleteGroupRequest
    method: DELETE
    data_selector: response
    params: {}
- name: set_password
  endpoint:
    path: /tamSetPasswordRequest
    method: POST
    data_selector: response
    params: {}
- name: change_password
  endpoint:
    path: /tamChangePasswordRequest
    method: POST
    data_selector: response
    params: {}
- name: authenticate
  endpoint:
    path: /tamAuthenticateRequest
    method: POST
    data_selector: response
    params: {}
- name: create_gso
  endpoint:
    path: /tamCreateSSOCred
    method: POST
    data_selector: response
    params: {}
- name: update_gso
  endpoint:
    path: /tamSetSSOCred
    method: PUT
    data_selector: response
    params: {}
- name: delete_gso
  endpoint:
    path: /tamDeleteSSOCred
    method: DELETE
    data_selector: response
    params: {}
- name: iv_creds
  endpoint:
    path: /tamIVCredsRequest
    method: POST
    data_selector: response
    params: {}
- name: transactionalRequest
  endpoint:
    path: /transactionalRequest
    method: POST
    data_selector: responses
    params: {}
- name: session_state
  endpoint:
    path: /product/user-sessions
    method: GET
    data_selector: session_state
- name: authorization_engine
  endpoint:
    path: /authorization_engine
    method: GET
- name: sms_authentication
  endpoint:
    path: /api/sms/authentication
    method: POST
    data_selector: result
    params: {}
- name: AZN
  endpoint:
    path: /services/data/vXX.X/sobjects/AZN
    method: GET
- name: IDP Push
  endpoint:
    path: /idhub/authenticate/push
    method: GET
    data_selector: assertion
    params:
      entityId: required
      relayState: optional
      authenticationContext: optional
      comparison: optional
      forceAuthentication: optional
- name: Proxy Locations
  endpoint:
    path: /services/data/vXX.X/proxy-locations
    method: GET
    data_selector: records
- name: token_servers
  endpoint:
    path: /idhub/protected/api/self/users/{principal_UUID}/tokenservers
    method: GET
    data_selector: tokenServers
- name: backend
  endpoint:
    path: /backend
    method: GET
    data_selector: records
    params: {}
- name: development
  endpoint:
    path: /development.jsp
    method: GET
    data_selector: records
    params: {}
- name: sales
  endpoint:
    path: /sales.jsp
    method: GET
    data_selector: records
    params: {}
- name: Identity Providers
  endpoint:
    path: /product/identity-providers
    method: GET
    data_selector: providers
    params: {}
- name: custom_saml_idp
  endpoint:
    path: /identity-providers/custom-saml-idp
    method: POST
    data_selector: idp
    params: {}
- name: upload_saml_idp
  endpoint:
    path: /identity-providers/upload-saml-idp
    method: POST
    data_selector: idp
    params: {}
- name: Custom AD IDP
  endpoint:
    path: /integrations/identity-providers/custom-ad-idp
    method: GET
- name: branding_templates
  endpoint:
    path: /templates/branding
    method: GET
    data_selector: templates
- name: email_templates
  endpoint:
    path: /templates/email
    method: GET
    data_selector: templates
- name: authentication_workflow_templates
  endpoint:
    path: /templates/authentication
    method: GET
    data_selector: templates
- name: event_logs
  endpoint:
    path: /auditor-guide
    method: GET
    data_selector: events
- name: admin_access
  endpoint:
    path: /admin/access/events
    method: GET
    data_selector: events
    params: {}
- name: user_changes
  endpoint:
    path: /user/changes/events
    method: GET
    data_selector: events
    params: {}
- name: config_change_events
  endpoint:
    path: /config/change/events
    method: GET
    data_selector: events
    params: {}
- name: server_events
  endpoint:
    path: /server/events
    method: GET
    data_selector: events
    params: {}
- name: user
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: SAML connector
  endpoint:
    path: /api/saml/connectors
    method: POST
    data_selector: connector
    params: {}
- name: Identity Provider
  endpoint:
    path: /api/identity-providers
    method: POST
    data_selector: identityProvider
    params: {}
- name: user_profile
  endpoint:
    path: /user/profiles
    method: GET
    data_selector: profiles
- name: user_management
  endpoint:
    path: /user/management
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: admin
  endpoint:
    path: /admin/api/v1/*
    method: GET
- name: installation
  endpoint:
    path: /installation/*
    method: GET
- name: login
  endpoint:
    path: /login
    method: POST
- name: public
  endpoint:
    path: /public/api/v1/*
    method: GET
- name: self-service
  endpoint:
    path: /selfservice/api/v1/*
    method: GET
- name: TBLoginService
  endpoint:
    path: /TBLoginService
    method: POST
    data_selector: result
    params: {}
- name: TBOnboardingService
  endpoint:
    path: /TBOnboardingService
    method: POST
    data_selector: result
    params: {}
- name: TBLoginService
  endpoint:
    path: /authenticateWithBrowser
    method: POST
    data_selector: result
- name: TBOnboardingService
  endpoint:
    path: /onboarding
    method: POST
    data_selector: result
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: records
    params: {}
- name: persona-definitions
  endpoint:
    path: /persona-definitions
    method: POST
    data_selector: records
    params: {}
- name: mfa_users
  endpoint:
    path: /mfa/users
    method: GET
    data_selector: users
    params: {}
- name: mfa_methods
  endpoint:
    path: /mfa/methods
    method: GET
    data_selector: methods
    params: {}
- name: radius-a
  endpoint:
    path: /radius-a.myinwebo.com
    method: UDP
    params:
      Primary IP address: 95.131.139.137
- name: radius-b
  endpoint:
    path: /radius-b.myinwebo.com
    method: UDP
    params:
      Secondary IP address: 217.180.130.59
- name: user_states
  endpoint:
    path: /mfa/inwebo-users-states
    method: GET
    data_selector: user_states
    params: {}
- name: loginCreate
  endpoint:
    path: /mfa/loginCreate
    method: POST
    data_selector: codes
    params: {}
- name: user_management
  endpoint:
    path: /api/v2/users
    method: GET
    data_selector: data
    params: {}
- name: transaction_audit
  endpoint:
    path: /api/v2/audit
    method: GET
    data_selector: auditRecords
    params: {}
- name: API Token
  endpoint:
    path: /api/token
    method: GET
- name: theme
  endpoint:
    path: /themes
    method: POST
    data_selector: theme
    params: {}
- name: Provision Microsoft Entra ID Users
  endpoint:
    path: /provisioning/users
    method: POST
    data_selector: users
    params: {}
- name: inwebo
  endpoint:
    path: /getinwebo
    method: GET
    data_selector: inwebo_users
- name: ldap
  endpoint:
    path: /getldap
    method: GET
    data_selector: ldap_users
- name: diff
  endpoint:
    path: /diff
    method: GET
    data_selector: diff_transactions
- name: sync
  endpoint:
    path: /sync
    method: POST
    data_selector: sync_results
- name: inWebo user file
  endpoint:
    path: inwebo.xml
    method: GET
    data_selector: inwebo-users
- name: inWebo groupmembership file
  endpoint:
    path: iwgroupmemberships.xml
    method: GET
    data_selector: inwebo-group-memberships
- name: inWebo group file
  endpoint:
    path: iwgroups.xml
    method: GET
    data_selector: inwebo-groups
- name: inWebo role file
  endpoint:
    path: iwroles.xml
    method: GET
    data_selector: inwebo-roles
- name: LDAP user file
  endpoint:
    path: <LDAP source name>_ldap.xml
    method: GET
    data_selector: ldap-users
- name: LDAP group membership file
  endpoint:
    path: <LDAP source name>_ldapgrpmb.xml
    method: GET
    data_selector: ldap-group-memberships
- name: User Diff file
  endpoint:
    path: diff.xml
    method: GET
    data_selector: transactions
- name: Group Diff file
  endpoint:
    path: diff_grp.xml
    method: GET
    data_selector: transactions
- name: User Synchronization result file
  endpoint:
    path: result.xml
    method: GET
    data_selector: transactions
- name: Group Membership synchronization result file
  endpoint:
    path: result_grp.xml
    method: GET
    data_selector: transactions
- name: TrustBuilder Metadata
  endpoint:
    path: /connector/metadata
    method: GET
    data_selector: metadata
- name: RADIUS Authentication
  endpoint:
    path: /radius/authentication
    method: POST
    data_selector: response
- name: Basic TrustBuilder LDAP Proxy configuration
  endpoint:
    path: /config/config.properties
    method: GET
    data_selector: parameters
    params: {}
- name: ldap_configuration
  endpoint:
    path: /config/config.properties
    method: GET
    data_selector: properties
    params: {}
- name: ldap_proxy_service
  endpoint:
    path: /bin/ldap_proxy_service.exe
    method: install
- name: ldap_configuration
  endpoint:
    path: /ldap/configuration
    method: POST
    data_selector: configuration
- name: ldap_proxy
  endpoint:
    path: /bin/ldap_proxy_service.exe
    method: INSTALL
    data_selector: status
    params: {}
- name: ldap_proxy
  endpoint:
    path: /ldap/proxy
    method: POST
    data_selector: response
    params: {}
- name: ldap_proxy
  endpoint:
    path: /bin/ldap_proxy_service.exe
    method: POST
    data_selector: ''
    params: {}
- name: TrustBuilder MFA Azure AD connector
  endpoint:
    path: /authentication-oidc/
    method: POST
- name: TrustBuilder Authentication Method
  endpoint:
    path: /authentication/methods/trustbuilder
    method: POST
    data_selector: methods
    params: {}
- name: Windows Logon
  endpoint:
    path: /mfa/inwebo-windows-logon
    method: GET
- name: RADIUS Connector
  endpoint:
    path: /add-connector
    method: POST
    data_selector: result
    params: {}
- name: TrustBuilder RADIUS Server
  endpoint:
    path: /add-radius-server
    method: POST
    data_selector: result
    params: {}
- name: authentication
  endpoint:
    path: /authentication
    method: POST
- name: inWebo Secure Site
  endpoint:
    path: /console
    method: POST
    data_selector: properties
    params:
      Called URL: https://<your_CAS_APEREO_server>/
      Authentication page: //<your_CAS_APEREO_server>/*
      Wildcard used in path: 'Yes'
      Form name: form
      Login field name: login
      Password field name: pwd
- name: inWebo_configuration
  endpoint:
    path: /cas/authn/mfa/inwebo
    method: POST
    data_selector: configuration
- name: LDAP Authentication Policy
  endpoint:
    path: /NetscalerGateway/Policies/Authentication
    method: POST
    data_selector: policy
    params:
      expression: ns_true
- name: LDAP Server Configuration
  endpoint:
    path: /NetscalerGateway/Authentication/LDAP
    method: POST
    data_selector: server
    params:
      timeout: 60
- name: secure_site
  endpoint:
    path: /RASHTML5Gateway
    method: GET
    data_selector: records
    params: {}
- name: RADIUS Policy
  endpoint:
    path: /services/data/vXX.X/sobjects/RADIUSPolicy
    method: POST
    data_selector: records
    params:
      incremental: updated_at
- name: SAML Connector
  endpoint:
    path: /console/c/XXXXXX/saml2/XXXXXX/metadata
    method: GET
    data_selector: metadata
    params: {}
- name: inWebo SAML connector
  endpoint:
    path: /console/c/XXXX/saml2/XXXX
    method: POST
    data_selector: SAML Assertion
    params: {}
- name: TrustBuilder SAML connector
  endpoint:
    path: /connectors
    method: POST
    data_selector: metadata
    params: {}
- name: saml_metadata
  endpoint:
    path: /cdn-cgi/access/saml-metadata
    method: GET
- name: SAML connector
  endpoint:
    path: /connectors
    method: POST
    data_selector: connector
    params: {}
- name: saml_configuration
  endpoint:
    path: /saml/configuration
    method: POST
    data_selector: configuration
    params:
      LogoffUrl: URL of your IdP logoff page
- name: web.config
  endpoint:
    path: /console/c/XXXX/cyberark/XXXX
    method: GET
    data_selector: parameters
    params: {}
- name: saml.config
  endpoint:
    path: /console/c/***SID***/saml2/**ID**/metadata
    method: GET
    data_selector: elements
    params: {}
- name: inWebo Radius Server
  endpoint:
    path: /radius
    method: POST
    data_selector: server
    params:
      Primary: radius-a.myinwebo.com
      Secondary: radius-b.myinwebo.com
      Port: 1812
      Secret: The radius secret you previously configured in the inWebo Radius connector
- name: SAML Domain
  endpoint:
    path: /saml/domain
    method: POST
    data_selector: domain
    params:
      name: inWebo IDP
      activated: true
      saml_domain_type: SAML 2
      profile_used: HTTP Redirect
      user_identity: Subject (NameID)
      ldap_attribute: mail
      domain_name: evidian.com
- name: Authentication Policy
  endpoint:
    path: /authentication/policy
    method: POST
    data_selector: policy
    params:
      name: InWebo Auth
      auth_method: HTTP Basic
      user_directory: Built-In Multi User's Directory
      injection_data_base: SAML
- name: Authentication Server
  endpoint:
    path: /authentication/server
    method: POST
    data_selector: server
    params:
      name: WAM Authentication Server
      protocol: HTTPS
      host_name: WAM server hostname
      key_and_certificates: selected_key_and_certificates
      saml_identity: issuer_value
      dedicated_to_inter_domain: true
- name: SAML Connector
  endpoint:
    path: /SAML/connector
    method: POST
    data_selector: metadata
    params: {}
- name: SAML
  endpoint:
    path: /EasyConnect/Authentication/SAML
    method: GET
    data_selector: SAML configuration
- name: TrustBuilder
  endpoint:
    path: /services/data/vXX.X/sobjects/TrustBuilder
    method: POST
    data_selector: metadata
    params: {}
- name: radius_server
  endpoint:
    path: /services/radius/servers
    method: POST
    data_selector: servers
    params:
      servers:
      - address: radius-a.myinwebo.com
        secret: '{{ dlt.secrets[''radius_secret''] }}'
      - address: radius-b.myinwebo.com
        secret: '{{ dlt.secrets[''radius_secret''] }}'
- name: saml_idp_connector
  endpoint:
    path: /services/saml/idp
    method: POST
    data_selector: idp_connectors
    params:
      name: '{{ dlt.secrets[''saml_connector_name''] }}'
      metadata: '{{ dlt.secrets[''saml_metadata''] }}'
- name: Secure Site
  endpoint:
    path: /secure_sites
    method: POST
    data_selector: result
    params: {}
- name: IdP Certificate
  endpoint:
    path: /certificates
    method: POST
    data_selector: result
    params: {}
- name: SAML Configuration
  endpoint:
    path: /saml_configuration
    method: POST
    data_selector: result
    params: {}
- name: LDAP Proxy Configuration
  endpoint:
    path: /mfa/ldap-proxy
    method: GET
    data_selector: ldap.proxy.configuration
    params: {}
- name: ldap_proxy
  endpoint:
    path: /ldap/proxy
    method: GET
- name: TrustBuilder MFA SAML Connector
  endpoint:
    path: /mfa/saml-connector
    method: POST
- name: SAML Metadata
  endpoint:
    path: /samlrp/XXXXXXXXXXXX
    method: POST
- name: openid-authorization-endpoint
  endpoint:
    path: /YOUR_CONNECTOR_ALIAS/authorize
    method: POST
    data_selector: parameters
    params:
      client_id: '{YOUR_CLIENT_ID}'
      response_type: id_token
      scope: openid
- name: openid-jwks-endpoint
  endpoint:
    path: /YOUR_CONNECTOR_ALIAS/jwks
    method: GET
    data_selector: keys
- name: openid-issuer
  endpoint:
    path: /YOUR_CONNECTOR_ALIAS/
    method: GET
    data_selector: issuer
- name: SAML Connector
  endpoint:
    path: /mfa/inwebo-saml-integration
    method: POST
    data_selector: connector_properties
- name: Audience URI
  endpoint:
    path: /mfa/hubspot-saml-integration
    method: GET
    data_selector: audience_uri
- name: Sign on URL
  endpoint:
    path: /mfa/hubspot-saml-integration
    method: GET
    data_selector: sign_on_url
- name: Secure Sites
  endpoint:
    path: /nidp/app/login
    method: POST
    data_selector: Secure Sites
- name: inWeboAuthModuleClass
  endpoint:
    path: /inwebo/auth/uri
    method: GET
- name: inWebo
  endpoint:
    path: /SecureSites/CONNECTORS
    method: POST
    data_selector: connector
    params: {}
- name: RADIUS Configuration
  endpoint:
    path: /radius/configuration
    method: GET
    data_selector: radius_properties
    params: {}
- name: inWebo RADIUS servers
  endpoint:
    path: /inwebo/radius/servers
    method: GET
    data_selector: servers
    params: {}
- name: authentication
  endpoint:
    path: /RASHTML5Gateway
    method: POST
    data_selector: response
    params:
      login: email
      password: inWebOTP
- name: Secure Sites
  endpoint:
    path: /console
    method: GET
    data_selector: SecureSites
    params: {}
- name: inwebo_login_template
  endpoint:
    path: /pingfederate/server/default/conf/template/inwebo.form.login.template.html
    method: EDIT
    data_selector: template
    params: {}
- name: RADIUS Server
  endpoint:
    path: /mfa/radius-integration-and-redundancy
    method: GET
- name: LDAP Server
  endpoint:
    path: /authentication/auth-servers
    method: POST
    data_selector: new_server
    params: {}
- name: Radius Secure site
  endpoint:
    path: /secure-site
    method: POST
    data_selector: form
    params:
      form_name: frmLogin
      login_field_name: username
      password_field_name: password
      login_automatically_inserted: true
- name: RADIUS
  endpoint:
    path: /services/data/vXX.X/RADIUS
    method: POST
    data_selector: records
    params: {}
- name: inWebo LDAP Proxy
  endpoint:
    path: /mfa/inwebo-ldap-proxy
    method: GET
    data_selector: records
    params: {}
- name: ProveIT Authentication server
  endpoint:
    path: /mfa/authentication-servers
    method: POST
    data_selector: records
    params:
      timeout: '30'
      login_attribute: cn
- name: SAML Metadata
  endpoint:
    path: /saml2/metadata
    method: GET
    data_selector: metadata
- name: SAML Authentication
  endpoint:
    path: /console/c/XXXX/saml2/7666
    method: GET
- name: SAML Connector
  endpoint:
    path: /secure_sites
    method: POST
    data_selector: connectors
    params: {}
- name: SAML Connector
  endpoint:
    path: /console
    method: POST
    data_selector: SAML
    params: {}
- name: TrustBuilder MFA
  endpoint:
    path: /mfa/
    method: GET
- name: radius_connector
  endpoint:
    path: /secure-site/connector
    method: POST
    data_selector: connector
    params: {}
- name: ldap_authentication_server
  endpoint:
    path: /Configure/Authentication/Servers
    method: POST
    data_selector: parameters
    params:
      server_type: LDAP server
      server_name: Connection Name
      server_ip_domain: IP of your inWebo LDAP Proxy Server
      version: '3'
      connection_security: Plaintext
      port: LDAP proxy port
      bind_dn: Service account authorized to request LDAP server
      password: Password associated with the service account
      base_dn: Entry point in your domain for performing user and group lookups
      authentication_attribute: sAMAccountName
      display_name_attribute: DisplayName
      email_address_attribute: gidNumber
      expiry_date_attribute: Date
- name: radius_connector
  endpoint:
    path: /console
    method: GET
    data_selector: settings
    params: {}
- name: sophos_xg_radius_server
  endpoint:
    path: /Authentication/Servers
    method: POST
    data_selector: servers
    params:
      server_type: RADIUS server
      server_name: inWebo_RADIUS
      server_ip:
      - radius-a.myinwebo.com
      - radius-b.myinwebo.com
      shared_secret: <inWebo RADIUS server shared secret>
      group_name_attribute: any
- name: RADIUS Servers
  endpoint:
    path: /objects/network
    method: POST
    data_selector: radius_objects
    params: {}
- name: VPN SSL
  endpoint:
    path: /vpn/ssl-vpn
    method: PUT
    data_selector: vpn_ssl_config
    params: {}
- name: Users and Groups
  endpoint:
    path: /users/authentication
    method: POST
    data_selector: user_groups
    params: {}
- name: radius_configuration
  endpoint:
    path: /path/to/radius/configuration
    method: POST
    data_selector: configuration
    params:
      radius_server_ip: 95.131.139.137
      radius_server_port: 1812
      radius_shared_secret: secret
      timeout: 60
      failover_radius_server_ip: 217.180.130.59
      failover_radius_server_port: 1812
      failover_radius_shared_secret: secret
      failover_timeout: 60
- name: RADIUS
  endpoint:
    path: /mfa/vmware-horizon-7-connection-server-radius-configur
    method: GET
- name: RADIUS_authentication
  endpoint:
    path: /mfa/radius-integration-and-redundancy
    method: GET
    data_selector: RADIUS server details
    params: {}
- name: RADIUS Authentication
  endpoint:
    path: /radius/authentication
    method: POST
    data_selector: results
    params:
      authentication_type: PAP
      radius_server_hostname: radius-a.myinwebo.com
      authentication_port: 1812
- name: inWebo SAML connector
  endpoint:
    path: /console/c/xxxx/saml2/yyyyyy
    method: POST
    data_selector: metadata
    params: {}
- name: saml_connector
  endpoint:
    path: /saml-connector
    method: POST
    data_selector: records
    params: {}
- name: identity_provider
  endpoint:
    path: /console/c/XXXXXX/saml2/XXXXXX/metadata
    method: POST
    data_selector: metadata
    params: {}
- name: external_ad_authentication
  endpoint:
    path: /Configuration/ExternalAuthentication
    method: POST
    data_selector: response
    params: {}
- name: ad_domain
  endpoint:
    path: /Configuration/LDAP/ADdomains
    method: POST
    data_selector: response
    params: {}
- name: user_group
  endpoint:
    path: /Users/Groups
    method: POST
    data_selector: response
    params: {}
- name: radius_authentication
  endpoint:
    path: /Configuration/ExternalAuthentications
    method: POST
    data_selector: authentication
    params: {}
- name: AuthenticateExtended
  endpoint:
    path: /mfa/authentication-api-soap-and-rest
    method: POST
- name: myStart
  endpoint:
    path: /myStart
    method: GET
    data_selector: data
    params: {}
- name: myStartActivate
  endpoint:
    path: /myStartActivate
    method: GET
    data_selector: data
    params: {}
- name: inweboDetect
  endpoint:
    path: /inweboDetect
    method: GET
- name: heliumDesign
  endpoint:
    path: /heliumDesign
    method: GET
- name: heliumAuthenticate
  endpoint:
    path: /helium/authenticate
    method: POST
- name: heliumActivate
  endpoint:
    path: /helium/activate
    method: POST
- name: push_authenticate
  endpoint:
    path: /helium/push_authenticate
    method: POST
- name: mAccess
  endpoint:
    path: /mfa/maccess
    method: GET
    data_selector: records
- name: mAccess
  endpoint:
    path: /mfa/maccess
    method: GET
    data_selector: records
    params: {}
- name: biometric_registration
  endpoint:
    path: /biometric/registration
    method: POST
    data_selector: response
    params: {}
- name: otp_generation
  endpoint:
    path: /otp/generate
    method: POST
    data_selector: response
    params: {}
- name: push_registration
  endpoint:
    path: /push/registration
    method: POST
    data_selector: response
    params: {}
- name: seal_generation
  endpoint:
    path: /seal/generate
    method: POST
    data_selector: response
    params: {}
- name: mAccess
  endpoint:
    path: /mAccess
    method: GET
- name: activation
  endpoint:
    path: /IWActivationStart
    method: POST
    data_selector: response
    params: {}
- name: unlock
  endpoint:
    path: /IWResetStart
    method: POST
    data_selector: response
    params: {}
- name: synchronization
  endpoint:
    path: /IWSynchronizeStart
    method: POST
    data_selector: response
    params: {}
- name: pin_update
  endpoint:
    path: /IWPwdUpdateStart
    method: POST
    data_selector: response
    params: {}
- name: biometrics_registration
  endpoint:
    path: /IWSetBiokeyStart
    method: POST
    data_selector: response
    params: {}
- name: IWVersionGet
  endpoint:
    path: /IWVersionGet
    method: GET
    data_selector: version
- name: IWHostVersionSet
  endpoint:
    path: /IWHostVersionSet
    method: POST
    data_selector: version
- name: IWWsTimeoutSet
  endpoint:
    path: /IWWsTimeoutSet
    method: POST
    data_selector: timeout
- name: IWWsServerSet
  endpoint:
    path: /IWWsServerSet
    method: POST
    data_selector: server
- name: IWLangSet
  endpoint:
    path: /IWLangSet
    method: POST
    data_selector: language
- name: IWMaccessSet
  endpoint:
    path: /IWMaccessSet
    method: POST
    data_selector: macid
- name: user_management
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
    params: {}
- name: audit_trail
  endpoint:
    path: /api/v1/audit_trail
    method: GET
    data_selector: records
    params: {}
- name: Reset
  endpoint:
    path: /reset/start
    method: POST
    data_selector: result
    params: {}
- name: Activation Code Request
  endpoint:
    path: /activation/code/request
    method: POST
    data_selector: result
    params: {}
- name: Password Update
  endpoint:
    path: /password/update
    method: POST
    data_selector: result
    params: {}
- name: Upgrade
  endpoint:
    path: /upgrade/start
    method: POST
    data_selector: result
    params: {}
- name: Push Registration
  endpoint:
    path: /push/registration/start
    method: POST
    data_selector: result
    params: {}
- name: Push Notification Check
  endpoint:
    path: /push/check
    method: GET
    data_selector: result
    params: {}
- name: Push Activate
  endpoint:
    path: /push/activate
    method: POST
    data_selector: result
    params: {}
- name: Push OTP
  endpoint:
    path: /push/otp/start
    method: POST
    data_selector: result
    params: {}
- name: User Management with REST API
  endpoint:
    path: /mfa/user-management-with-rest-api
    method: GET
- name: Authentication API
  endpoint:
    path: /mfa/authentication-api-soap-and-rest
    method: GET
- name: Audit Trail API v2
  endpoint:
    path: /mfa/audit-trail-api-v2-rest
    method: GET
- name: Transaction sealing API
  endpoint:
    path: /mfa/transaction-sealing-api-operations-rest
    method: GET
- name: loginsQuery
  endpoint:
    path: /loginsQuery
    method: GET
    data_selector: LoginsQueryResult
    params:
      offset: offset
      nmax: nmax
- name: loginQuery
  endpoint:
    path: /loginQuery
    method: GET
    data_selector: LoginQueryResult
    params: {}
- name: loginSearch
  endpoint:
    path: /loginSearch
    method: GET
    data_selector: LoginSearchResult
    params:
      exactmatch: exactmatch
      offset: offset
      nmax: nmax
- name: loginDeleteTool
  endpoint:
    path: /loginDeleteTool
    method: POST
    data_selector: loginDeleteToolResponse
- name: loginGetGroups
  endpoint:
    path: /loginGetGroups
    method: POST
    data_selector: loginGetGroupsResponse
- name: loginsQueryByGroup
  endpoint:
    path: /loginsQueryByGroup
    method: POST
    data_selector: loginsQueryByGroupResponse
- name: serviceGroupsQuery
  endpoint:
    path: /serviceGroupsQuery
    method: POST
    data_selector: serviceGroupsQueryResponse
- name: groupAccountCreate
  endpoint:
    path: /groupAccountCreate
    method: POST
    data_selector: groupAccountCreateResponse
- name: groupAccountDelete
  endpoint:
    path: /groupAccountDelete
    method: POST
    data_selector: groupAccountDeleteResponse
- name: groupAccountQuery
  endpoint:
    path: /groupAccountQuery
    method: POST
    data_selector: groupAccountQueryResponse
- name: groupAccountUpdate
  endpoint:
    path: /groupAccountUpdate
    method: POST
    data_selector: groupAccountUpdateResponse
- name: IWDS_check
  endpoint:
    path: /IWDS_check
    method: POST
    data_selector: IWDS_checkResponse
- name: loginCreateBySource
  endpoint:
    path: /loginCreateBySource
    method: POST
    data_selector: LoginCreateResult
- name: authenticateExtended
  endpoint:
    path: /FS?action=authenticateExtended
    method: GET
    params:
      serviceId: <id of the service>
      userId: <login name>
      token: <otp generated>
- name: pushAuthenticate
  endpoint:
    path: /FS?action=pushAuthenticate
    method: GET
    params:
      serviceId: <service id>
      userId: <login of the previously authenticated user>
- name: checkPushResult
  endpoint:
    path: /FS?action=checkPushResult
    method: GET
    params:
      serviceId: <service id>
      sessionId: <session id>
      userId: <login>
- name: logs
  endpoint:
    path: /customer/logs/archive
    method: GET
    data_selector: results
    params:
      months: '202003'
      page: 0
- name: available_months
  endpoint:
    path: /customer/logs/archive/month
    method: GET
    data_selector: months
    params: {}
- name: sealVerify
  endpoint:
    path: /FS
    method: GET
    data_selector: sealVerify
    params:
      serviceId: <id of the service>
      userId: <login>
      token: <OTP received from the client app>
      data: <sealed data>
      format: json
- name: sealDeferredVerify
  endpoint:
    path: /FS?action=sealDeferredVerify
    method: GET
    data_selector: sealDeferredVerify
    params:
      serviceId: <id of the service>
      userId: <login>
      token: <OTP received from the client app>
      data: <sealed data>
      date: <seal date>
- name: pushSeal
  endpoint:
    path: /FS?action=pushSeal
    method: GET
    data_selector: pushSeal
    params:
      serviceId: <service id>
      userId: <userId>
      data: <data>
- name: user_management
  endpoint:
    path: /api/v1/user_management
    method: GET
    data_selector: users
- name: mAccess Library
  endpoint:
    path: /mfa/maccess-library
    method: GET
- name: activateWithPin
  endpoint:
    path: /activities/activateWithPin
    method: POST
    data_selector: login
- name: getActivationCodeWithPin
  endpoint:
    path: /activities/getActivationCodeWithPin
    method: POST
    data_selector: code
- name: getOnlineOtpWithPin
  endpoint:
    path: /activities/getOnlineOtpWithPin
    method: POST
    data_selector: otp
- name: getOfflineOtpWithPin
  endpoint:
    path: /activities/getOfflineOtpWithPin
    method: POST
    data_selector: otp
- name: unlockTokenWithPin
  endpoint:
    path: /activities/unlockTokenWithPin
    method: POST
    data_selector: success
- name: changePin
  endpoint:
    path: /activities/changePin
    method: POST
    data_selector: success
- name: resetPin
  endpoint:
    path: /activities/resetPin
    method: POST
    data_selector: success
- name: sealDataWithPin
  endpoint:
    path: /activities/sealDataWithPin
    method: POST
    data_selector: otp
- name: activate
  endpoint:
    path: /mfa/maccess-web-version-3-13-0#activate
    method: POST
- name: getActivationCodeWithPin
  endpoint:
    path: /mfa/maccess-web-version-3-13-0#getActivationCodeWithPin
    method: POST
- name: getOnlineOtp
  endpoint:
    path: /mfa/maccess-web-version-3-13-0#getOnlineOtp
    method: POST
- name: getAccessTokenWithPin
  endpoint:
    path: /mfa/maccess-web-version-3-13-0#getAccessTokenWithPin
    method: POST
- name: unlockTokenWithPin
  endpoint:
    path: /mfa/maccess-web-version-3-13-0#unlockTokenWithPin
    method: POST
- name: changePin
  endpoint:
    path: /mfa/maccess-web-version-3-13-0#changePin
    method: POST
- name: resetPin
  endpoint:
    path: /mfa/maccess-web-version-3-13-0#resetPin
    method: POST
- name: sealDataWithPin
  endpoint:
    path: /mfa/maccess-web-version-3-13-0#sealDataWithPin
    method: POST
- name: getRemoteOtpByPush
  endpoint:
    path: /mfa/maccess-web-version-3-13-0#getRemoteOtpByPush
    method: POST
- name: setBioKey
  endpoint:
    path: /mfa/maccess-web-version-3-13-0#setBioKey
    method: POST
- name: mAccess Library
  endpoint:
    path: /simple-neon-lib.js
    method: GET
- name: mAccess Library
  endpoint:
    path: /simple-neon-lib.js
    method: GET
- name: SHA256 for version 3.6.0
  endpoint:
    path: /simple-neon-lib.js.sha256.txt
    method: GET
- name: activateWithPin
  endpoint:
    path: /activateWithPin
    method: POST
    data_selector: result
    params: {}
- name: getOnlineOtpWithPin
  endpoint:
    path: /getOnlineOtpWithPin
    method: POST
    data_selector: result
    params: {}
- name: getActivationCodeWithPin
  endpoint:
    path: /getActivationCodeWithPin
    method: POST
    data_selector: result
    params: {}
- name: getAccessTokenWithPin
  endpoint:
    path: /getAccessTokenWithPin
    method: POST
    data_selector: result
    params: {}
- name: unlockTokenWithPin
  endpoint:
    path: /unlockTokenWithPin
    method: POST
    data_selector: result
    params: {}
- name: changePin
  endpoint:
    path: /changePin
    method: POST
    data_selector: result
    params: {}
- name: resetPin
  endpoint:
    path: /resetPin
    method: POST
    data_selector: result
    params: {}
- name: sealDataWithPin
  endpoint:
    path: /sealDataWithPin
    method: POST
    data_selector: result
    params: {}
- name: getRemoteOtpByPush
  endpoint:
    path: /getRemoteOtpByPush
    method: POST
    data_selector: result
    params: {}
- name: activateWithPin
  endpoint:
    path: /activateWithPin
    method: POST
    data_selector: result
    params: {}
- name: getActivationCodeWithPin
  endpoint:
    path: /getActivationCodeWithPin
    method: POST
    data_selector: result
    params: {}
- name: getOnlineOtpWithPin
  endpoint:
    path: /getOnlineOtpWithPin
    method: POST
    data_selector: result
    params: {}
- name: getOfflineOtpWithPin
  endpoint:
    path: /getOfflineOtpWithPin
    method: POST
    data_selector: result
    params: {}
- name: getAccessTokenWithPin
  endpoint:
    path: /getAccessTokenWithPin
    method: POST
    data_selector: result
    params: {}
- name: unlockTokenWithPin
  endpoint:
    path: /unlockTokenWithPin
    method: POST
    data_selector: result
    params: {}
- name: changePin
  endpoint:
    path: /changePin
    method: POST
    data_selector: result
    params: {}
- name: resetPin
  endpoint:
    path: /resetPin
    method: POST
    data_selector: result
    params: {}
- name: sealDataWithPin
  endpoint:
    path: /sealDataWithPin
    method: POST
    data_selector: result
    params: {}
- name: mAccess inWebo Library
  endpoint:
    path: /simple-neon-lib.js
    method: GET
    data_selector: logins
    params: {}
- name: Library SHA
  endpoint:
    path: /simple-neon-lib.js.sha256.txt
    method: GET
    data_selector: sha
    params: {}
- name: activateWithPin
  endpoint:
    path: activateWithPin
    method: POST
    data_selector: ''
    params: {}
- name: getOnlineOtpWithPin
  endpoint:
    path: getOnlineOtpWithPin
    method: POST
    data_selector: ''
    params: {}
- name: getOfflineOtpWithPin
  endpoint:
    path: getOfflineOtpWithPin
    method: POST
    data_selector: ''
    params: {}
- name: getActivationCodeWithPin
  endpoint:
    path: getActivationCodeWithPin
    method: POST
    data_selector: ''
    params: {}
- name: getAccessTokenWithPin
  endpoint:
    path: getAccessTokenWithPin
    method: POST
    data_selector: ''
    params: {}
- name: unlockTokenWithPin
  endpoint:
    path: unlockTokenWithPin
    method: POST
    data_selector: ''
    params: {}
- name: changePin
  endpoint:
    path: changePin
    method: POST
    data_selector: ''
    params: {}
- name: resetPin
  endpoint:
    path: resetPin
    method: POST
    data_selector: ''
    params: {}
- name: sealDataWithPin
  endpoint:
    path: sealDataWithPin
    method: POST
    data_selector: ''
    params: {}
- name: activateWithPin
  endpoint:
    path: /activateWithPin
    method: POST
    data_selector: result
    params: {}
- name: getActivationCodeWithPin
  endpoint:
    path: /getActivationCodeWithPin
    method: POST
    data_selector: result
    params: {}
- name: getOnlineOtpWithPin
  endpoint:
    path: /getOnlineOtpWithPin
    method: POST
    data_selector: result
    params: {}
- name: getOfflineOtpWithPin
  endpoint:
    path: /getOfflineOtpWithPin
    method: POST
    data_selector: result
    params: {}
- name: getAccessTokenWithPin
  endpoint:
    path: /getAccessTokenWithPin
    method: POST
    data_selector: result
    params: {}
- name: unlockTokenWithPin
  endpoint:
    path: /unlockTokenWithPin
    method: POST
    data_selector: result
    params: {}
- name: changePin
  endpoint:
    path: /changePin
    method: POST
    data_selector: result
    params: {}
- name: resetPin
  endpoint:
    path: /resetPin
    method: POST
    data_selector: result
    params: {}
- name: sealDataWithPin
  endpoint:
    path: /sealDataWithPin
    method: POST
    data_selector: result
    params: {}
- name: mAccess Library
  endpoint:
    path: /simple-neon-lib-3.1.0.js
    method: GET
    data_selector: script
    params: {}
- name: activateWithPin
  endpoint:
    path: /activateWithPin
    method: POST
    data_selector: activationResult
- name: getActivationCodeWithPin
  endpoint:
    path: /getActivationCodeWithPin
    method: POST
    data_selector: activationCode
- name: getOnlineOtpWithPin
  endpoint:
    path: /getOnlineOtpWithPin
    method: POST
    data_selector: otpResult
- name: getOfflineOtpWithPin
  endpoint:
    path: /getOfflineOtpWithPin
    method: POST
    data_selector: offlineOtpResult
- name: getAccessTokenWithPin
  endpoint:
    path: /getAccessTokenWithPin
    method: POST
    data_selector: accessToken
- name: unlockTokenWithPin
  endpoint:
    path: /unlockTokenWithPin
    method: POST
    data_selector: unlockTokenResult
- name: changePin
  endpoint:
    path: /changePin
    method: POST
    data_selector: changePinResult
- name: resetPin
  endpoint:
    path: /resetPin
    method: POST
    data_selector: resetPinResult
- name: sealDataWithPin
  endpoint:
    path: /sealDataWithPin
    method: POST
    data_selector: sealDataResult
- name: user_management
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: auth_logs
  endpoint:
    path: /api/v1/auth/logs
    method: GET
    data_selector: logs
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: devices
  endpoint:
    path: /api/devices
    method: GET
    data_selector: data
    params: {}
- name: user_management
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: transaction_sealing
  endpoint:
    path: /api/v1/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: user_management
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: push_parameters
  endpoint:
    path: /push/parameters
    method: POST
    data_selector: parameters
notes:
- API tokens must be transported through a secure channel such as Transport Layer
  Security (HTTPS).
- To retrieve accounts, check the value 'hasMore' in the result JSON for pagination.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The user must have administrative privileges to access the Admin Portal.
- Password can be any combination of letters, numbers, and symbols.
- The rule must be defined first. In a later release it will be possible to create
  a rule when creating a policy.
- Some objects like Contact may return nulls in deeply nested fields
- User profiles can be created independently of any back office system.
- Users can self-register from the self-service portal.
- Each persona in a user profile corresponds to one of the roles a user can assume.
- A TrustBuilder persona embodies attributes that are specific for that mandate or
  capacity and can be self-declared.
- Custom attributes operate as secondary storage to maintain additional user info.
- Delegated Admin is a system persona, its properties cannot be modified.
- The scope values added must match the scope values defined in the personas of the
  users to be managed.
- User attributes consist of different elements including identifiers and value formats.
- Attributes can be managed via the TrustBuilder admin portal or TrustBuilder Admin
  API.
- Uses OAuth2 with refresh token — requires setup of connected app in TrustBuilder
- TrustBuilder uses the XACML standard for access control.
- PBAC evaluates dynamic data like user attributes and context in real-time.
- The OpenID Context field is mandatory, even if no OpenID Context is needed.
- Workflow execution routes are determined by returned values from scripts.
- A workflow can be created to handle any kind of HTTP request.
- Basic mode provides a wizard to guide the user through the steps required to create
  an adapter activity node.
- Advanced mode requires the TBAGAdvanced role.
- Only one Initial State Activity is allowed in a workflow.
- Only one Final State activity is allowed per workflow.
- Only one Error State activity is allowed per workflow.
- To set advanced mode ensure that the authenticated user has the TBAGAdvanced role.
- At least one workflow file is required.
- Configurations can be uploaded as zip files.
- The TrustBuilder Administrator does not currently provide any interface to these
  key stores.
- Both stores must be of the same protocol and format.
- Management Port is default 8888.
- Deleting a template is final there is no undo for this action.
- Deleting a script is final there is no undo.
- Any password fields will be encrypted locally within TB.Connect so no passwords
  are stored or transmitted over the wire in plain text.
- Services are comprised of Java code that can be used in scripts enabling more complex
  functionality.
- Mocks allow for mocking responses so that a real adapter does not need to be called
  to run the test.
- For instance if there is an LDAP adapter in the workflow a mock adapter can be created
  that will return a specific user in the adapter response which the workflow can
  then process.
- Scripts must have a .js extension.
- JS and JSON files can be uploaded.
- The logging configuration is a configuration file that is provided by the logging
  mechanism that the TB engine uses called Logback.
- A trust store only contains public certificates making it ideal to share with other
  people.
- A key store contains private keys, which must be kept private.
- The key store is also used as the trust store if no trust store has been defined.
- Components are supplied as .tbc files and are uploaded into the TrustBuilder Administrator.
- File size limit for uploads is 6MB
- Export and Import buttons are only shown if a configuration is related to at least
  one TB Server and the authenticated user has the TBAGExporter role.
- If no layout file is supplied then the workflow will be converted by TBA as per
  a usual import.
- If there is a layout file already within the folder, in TBA, related to this configuration
  then that will be used if no layout file is supplied.
- Requires OAuth2 setup for API access
- The parallel requests are limited to 100 requests. All requests above this limit
  will drop and a 503 Server busy will be returned.
- The OAuth adapter introduced in Trustbuilder 6.0 allows to use Trustbuilder as an
  OAuth client to a Service Provider like Google or Facebook.
- Ensure knowledge of TrustBuilder options and functions before setting up the validation
  server.
- The validation policy may differ for user certificates and CA certificates.
- Best practice with conditions is to always have an otherwise connection which can
  go to a script to handle unknown or unexpected conditions.
- Session service provider requires application server restart to enable/change.
- If you running your as non-root user you can't open ports under 1024.
- We recommend setting the ldap port higher and if you want to use port 389 for ldap
  make usage of software that forwards the connection from port 389 to your trustbuilder
  ldap endpoint.
- The adapter may specify multiple servers. Servers with equal priorities are grouped
  into server pools.
- If a server is temporarily down, the load-balancer will try another server.
- The offending server is penalized, which may cause it to be skipped a number of
  times.
- Connection Pool size is set at the JVM level.
- Selected SSL protocol may not be supported by a specific provider.
- A truststore is required to validate the certificate.
- AdapterUniqueID must start with a letter or underscore and can include certain characters.
- The Digipass DB adapter uses a specific database schema.
- Inserting data and updating data in the PERSON table is not part of the Digipass
  DB adapter.
- To use HTTPS a configured truststore is mandatory.
- TrustRemote is set to false by default.
- The adapter does not support load balancing.
- A truststore is required if SSL is used for communication to the LDAP.
- Using SSL requires proper configuration of the truststore.
- A keystore is required in your TB_HOME in order to generate secure private keys
- The secret is auto generated and not reversable
- The OCSP-Adapter allows TrustBuilder to validate X509-certificates against a third-party
  OCSP-provider.
- A valid OCSP-response is returned by the adapter if the certificate's issuer is
  found in the trust store.
- The OCSP-provider must approve the certificate serial number / certificate issuer
  combination.
- The adapter provides options to validate the time of the approval.
- Currently only android and IOS are supported, but others should be feasible.
- Adapter supports load balancing
- A keystore with privatekey is required for signing and decrypting tokens.
- A truststore is required for validation.
- The adapter requires an SMPP-server.
- If both predefinedMsg and msg are defined, the smsc decides what takes precedence.
- Only a subset of the administrative tasks exposed by the ISAM-Administration API
  are made available by TrustBuilder
- A secure connection must be setup to communicate with the ISAM Policy Server.
- A keystore is required in your TB_HOME in order to generate secure private keys.
- 'The ID has following requirements: START with a letter or _ (underscore), FOLLOWED
  by a combination of following characters: Letter, Number, ''.'' (dot), ''-'' (dash),
  ''_'' (underscore).'
- TrustBuilder will only recalculate the session state when a policy decision requires
  a most accurate view of the session state.
- The session state may be reflected in the access token sent to the client app in
  case it is being refreshed or in case a new access token is requested.
- A ‘local logout’ is the act of signing the user out of the app (or Service Provider
  in general) and terminating the Service Provider Layer session.
- A ‘Single Logout’ is the act of signing the user out of TrustBuilder and signing
  out of all the apps with the same credentials.
- Token-based Dynamic Authorization has big advantages when implementing authorization
  at scale
- Access tokens can be revoked when a security compromise is suspected, but this requires
  a call to the introspection endpoint for real-time verification of the revocation
  status.
- The client credentials grant only relies on the client’s own identity rather than
  requesting authorization through a user.
- Once a client app requests and obtains an access token, it should keep it around
  in a safe place for the duration of its useful lifetime and re-use it whenever it
  needs to call the same API.
- Client-level access documentation is available.
- The authorization engine supports attribute-based authorization.
- Requires configuration for SMS Authentication
- Ensure company attributes are configured in the system
- The index property can be used as a reference to a text file listing the rule suites
  to be loaded or as a reference to a directory containing the rule suites to be loaded.
- The login user must have the TBAGPolicies role.
- OAuth 2.0 policy version is supported.
- IDP Push is an Identity Provider initiated Single Sign-On.
- Authorization is required for access to the /backend URL
- Multi valued attributes are sent as multiple HTTP headers with the same name
- Starting from 2024.9.0 release, the tenants will include a system TrustBuilder FIDO2
  IDP linked to the TrustBuilder FIDO2 server (OIDC-based).
- To ensure access to the Admin portal, manipulate the default schema and methods
  with care.
- TrustBuilder will act as a Service Provider when sending an Authentication Request
  to the Identity Provider.
- The Active Directory can be used for authentications and queried for additional
  user data.
- The settings of this IDP cannot be changed, with the exception of 'Page Setting'.
- We are progressively reworking the interface and user experience of our platforms.
  You may encounter difficulties in using features that are not fully operational.
- Hosted Login provides SSO out-of-the-box for all your apps and web pages.
- Hosted Login is intrinsically more secure than native login.
- Starting from version 2024.9.0, 'Sign up' button is hidden by default for some templates.
- Starting from version 2024.8.0, 'Register' button is hidden by default for the user
  password login page.
- Events are passed in a JSON-like format to the selected workflow.
- Date and time are represented in the epoch format.
- Ensure to configure your OAuth client properly.
- Requires setup of SAML connectors to link TrustBuilder.io tenant and MFA tenant
- User emails must match in both tenants for authentication
- This setting is disabled by default in new tenants.
- The user must already exist in the TrustBuilder tenant for this to work.
- Uses OAuth2 with Client Credentials grant — requires setup of OAuth Client SP in
  TrustBuilder.
- Access tokens are JWT and have a TTL of up to 7 days.
- TrustBuilder ID SDK supports both hosted and native login flows.
- The SDK follows best practices for OAuth 2.0 as outlined in RFC 8252.
- The SDK requires a bearer token for onboarding flow.
- Sessions might expire if the user takes too long to complete the flow.
- The SDK supports both hosted and native login flows.
- Ensure to set callback URLs and logout URLs in the TrustBuilder Dashboard.
- In order to start the onboarding flow you need a bearer token of an authenticated
  user with the correct claims.
- 'Version names follow a new format: Year.ReleaseNumber.HotfixNumber.'
- Improved handling of missing user consent.
- Protect your applications with TrustBuilder MFA with standard connectors
- Requires proper setup of OAuth2 credentials.
- API responses may vary based on user permissions.
- Always have two active TrustBuilder MFA token (your browser and your mobile phone
  by example).
- Always have at least 2 different administrators for your TrustBuilder MFA service.
- It's strongly recommended to generate an API certificate and to keep it carefully
  in a secure place.
- Access to the API is protected by an SSL certificate authentication.
- Generate and keep a TrustBuilder MFA API certificate for emergency use.
- For security reasons, links and codes are for single use only
- An expired code or link is no longer usable
- This option is blocked by default
- We do not recommend activating the “returning” option for safety reasons
- Once an activation link has been used in a browser, the user has only 15 minutes
  to activate it (duration of a short code).
- Users receive a push notification through TrustBuilder Authenticator app. Push notifications
  can be sent automatically or triggered manually, depending on configuration.
- QR code authentication is only available for OpenID Connect and Microsoft Azure
  AD connectors.
- Users should use TrustBuilder Authenticator from version 6.31 to see the 'Scan a
  QR code' menu.
- Activation emails can be configured via the Admin Console, Service Users, Customize
  email templates.
- 'Important: Customizing Email usage is not granted by default with trial accounts.
  It can be unlocked simply by requesting it to your Partner or Reseller.'
- The admin console v2 is currently under continuous development to gradually replace
  the inWebo console.
- If a user tries to activate Authenticator mobile, the activation will be blocked
  by the platform and the user will receive an error.
- If a user tries to activate Authenticator desktop, the activation will be blocked
  by the platform and the user will receive an error.
- Customizing Email Templates usage is not granted by default with Trial accounts.
  It can be unlocked simply by requesting it to your Partner or Reseller.
- Ensure proper OAuth setup before integration.
- Rate limits apply on API usage.
- White Label services are not supported
- Custom roles feature is not fully operational for now
- Only connectors of type OIDC and OIDC Azure AD are supported for now
- Secure sites section is not yet available
- The console v2 is has a preview status
- The admin console v2 does not support Internet Explorer 11 (IE11)
- Minimum TrustBuilder Authenticator 6.5 activated with this Administrator login
- The character "_" is a wildcard character that replaces or represents any character.
- The theme editor is available for versions 6.16 and higher of the TrustBuilder Authenticator
  app.
- There can be a maximum of 4 custom themes.
- Think about accessibility when setting colors.
- White label service creation is only available to Enterprise or Safe Transactions
  clients
- Group synchronization from Entra ID is not supported.
- Provisioning occurs every 40 minutes.
- IWDS will never write anything in your LDAP directory. IWDS will only read the LDAP.
- 'Known Issue: message “origin unknown” is displayed during installation'
- IWDS is a specific service option that is not included by default in the standard
  or trial offer.
- IWDS application will be blocked if the option is not detected on your service when
  accessing the TrustBuilder platform.
- IWDS is only able to read your LDAP directory. All creation/modification operations
  will only be done on your TrustBuilder online service via our API.
- If you have to retrieve more than 1500 users Active directory will return no users
  but also no error.
- In graphical mode, to avoid mass deletion, the synchronization operation is blocked
  if it is about to delete more than 25 users.
- Scripts must include the additional option -Djdk.tls.client.protocols=TLSv1.2 -Dhttps.protocols=TLSv1.2
  to be added in each java command line.
- To get an activation code, contact your administrator or generate it by yourself.
- Uses various methods for authentication including push notifications, QR code scanning,
  and OTP generation.
- Minimum requirements are the minimum version of the device operating system on which
  the Authenticator application can be installed.
- 'Supported OS version: Android 8; Recommended: Android 12 and higher; iOS 13.4;
  Recommended: iOS 16 and higher.'
- Current version is actively maintained and updated at least twice a year.
- TrustBuilder Authenticator maintains an open session with FCM to receive notifications.
- Notifications do not contain sensitive or secure data.
- Windows version 7.6 is current until 28-Jul-2027
- MacOS version 7.5.3 is current until 21-May-2027
- Linux version 7.6.1 is current until 30-Jul-2027
- One-Time Password generator App that supports push notifications as well a fully
  offline mode.
- Notifications are not working for new installations of Authenticator 6 on Desktop,
  for versions below 6.38
- The deeplinking (direct link to an application page) is not yet available on Linux
- Authenticator 4 application is no longer supported on recent versions of operating
  systems.
- For the following procedure, we consider that you are an active user of the Authenticator
  4 application, meaning that you have a service running with enrolled devices.
- Users need an activation code to migrate from Authenticator 4 to Authenticator 6.
- The migration process involves generating an activation code from Authenticator
  4.
- Ensure to configure entityID and Location with your SP Entity ID URL.
- Copy and paste the SP certificate if needed in the X509Certificate field.
- openid scope must be included for all requests.
- A problem has been reported that has an impact on the Authorization Code flow.
- Uses OIDC implicit flow with response_type=id_token
- Any modification made to your radius configuration will be applied within the next
  15 minutes.
- It is strongly recommended to enforce validation of the Message-Authenticator attribute,
  as advised by network and security solution providers.
- Timeout should be below 28s to avoid UDP idle timeout.
- 'Retries recommended: 2 for 28s timeout, 3 for 20s timeout.'
- The machine hosting the proxy must have access to the LDAP server that will be connected
  to the TrustBuilder proxy.
- Internet access to reach the TrustBuilder MFA API is required.
- The machine hosting the proxy must have access to the LDAP server that will be connected
  to the inWebo proxy
- Internet access to reach the InWebo API
- LDAP proxy listens on port 389 by default.
- LDAP server must be specified in the configuration.
- Support of TLSv1.2
- Adding a LDAP server connection timeout
- Management of expired AD passwords
- The service number of the proxy LDAP is listening to accept requests/default is
  389.
- The path of the inWebo P12 certificate is C:\ProxyLDAP\inWebo_Certificate12 or ./proxyLDAP/inWebo_Certificate12.
- The password/passphrase of the inWebo certificate is PASSPHRASE.
- The path of the inWebo P12 certificate generated by your inWebo Administration console
  is required.
- The machine hosting the proxy must have access to the LDAP server
- For LDAPS / SSL, a .P12 certificate and passphrase from LDAP server is required
- The following settings are in the config / config.properties file
- 'LDAP proxy listens on the address '':: 0'' by default'
- Authentication via InWebo can be conditioned by user, group, all, or none
- The machine hosting the proxy must have access to the LDAP server that will need
  to be synchronized with the inWebo proxy
- Windows or Linux required with a 64-bit environment and JAVA 8 64 bits for the version
  without JRE
- Requires administrator rights for service installation
- The machine must have internet access to reach the InWebo API
- The machine hosting the proxy must have access to the LDAP server that will need
  to be synchronized with the inWebo proxy.
- The machine must have Internet access to reach the InWebo API.
- The service number of the proxy LDAP is listening to accept requests is 389
- LDAP server port is 389
- Entra ID uses the UPN (UserPrincipalName) attribute as a login for the authentication
  process.
- TrustBuilder MFA user login must be in UPN format (e.g. name.firstname@domain.com).
- To protect users from attacks such as Push Bombing, we recommend selecting the QR
  code authentication.
- The Microsoft status for the EAM feature is still Preview.
- Admins are recommended to create parallel set of Conditional Access policies during
  this migration period.
- We recommend that you create a new connector for the EAM configuration.
- The EAM compatibility is included in OIDC Azure AD connectors created after June
  20, 2024.
- Users will see the name of the TrustBuilder authentication method during Entra ID
  login.
- This integration requires an OIDC Azure AD connector created on or after June 20,
  2024, to ensure compatibility with the latest updates.
- We recommend trying TrustBuilder Windows Logon on a few workstations to make sure
  it covers all your use cases and your Windows configuration, prior to activating
  it massively and removing the Windows password credential provider.
- TrustBuilder supports manual installation, silent installation and mass deployment.
- The offline mode is supported from TrustBuilder Authenticator version 6.20 and later.
  For standard mode, all TrustBuilder Authenticator versions are supported.
- The user should have a local or domain account in order to log in.
- Microsoft accounts are not supported.
- ADFS 2019 is fully integrated in Windows Server 2019 as a role to be activated on
  Server Manager.
- TLS 1.2 is required.
- Ensure the ADFS service account has write rights in the plugin directory.
- ADFS 3.0 is fully integrated in Windows Server 2012 as a role to be activated on
  Server Manager.
- ADFS 4.0 is fully integrated in Windows Server 2016 as a role to be activated on
  Server Manager.
- Ensure the service account that runs ADFS Federation Service has write rights in
  the plugin directory.
- If you are running ADFS v3, you can skip this HowTo and use our InWebo_ADFSv3_Connector
  component for the integration.
- The SAML InWebo response contains the InWebo's login within a 'uid' claim type.
- Any configuration or modification made to your RADIUS connector will be applied
  at the start of the next hour.
- Configure NPS to send authentication requests every 30 seconds and fallback to another
  server after 1 failed attempts.
- Users on TrustBuilder MFA are set-up without the domain.
- CAS Apereo minimum version must be 6.6.2
- A bookmark alias will be generated after adding a secure site.
- Users can connect to the Apereo CAS by first performing a basic login/pwd authentication,
  and then an inWebo MFA authentication.
- The Administrator/Read account is whitelisted and does not trigger a Push notification.
- You have to activate the Browser token to create the Bookmark Alias
- The portal will automatically display the inWebo authentication frame
- Only a registered Device and a correct PIN code can generate the right OTP for a
  specific service.
- 'For standard radius mode with a server pair: the OTP is sent in the request, so
  we recommend configuring a ''Server timeout period'' of 5 seconds.'
- A configured Netscaler Gateway Virtual server with a valid certificate is required.
- Ensure the Netscaler Gateway Virtual Server has a valid certificate installed.
- Redirect URL should be set to https://www.myinwebo.com/console/c/XXXX/saml2/XXXX
- Single Logout URL should be set to https://www.myinwebo.com/console/c/XXXX/saml2/XXXX/logout
- User Field should be set to NameID
- Reject Unsigned Assertion should be set to ON
- SAML Binding should be set to POST
- The Called URL setting is only used to set a bookmark for the user on My account
  portal, it has no impact on the security.
- This is not a standard feature so you have to contact the inWebo team to activate
  the CyberArk SAML connector for your service.
- Modify web.config to include IdentityProviderLoginURL, IdentityProviderCertificate,
  Issuer.
- For CyberArk 11.6 and later, update saml.config with ServiceProvider Name, Description,
  PartnerIdentityProvider Name, SingleSignOnServiceUrl, Certificate String.
- Administrator access to your EvObserve by EASYVISTA tenant is required.
- Administrator access to your TrustBuilder account is required.
- Users can download and manage InWebo tokens by themselves.
- Ensure the 'Authentication' mode is ticked when configuring the radius server.
- Validate the configuration by clicking the 'Update' button.
- Your access policy should at least look like this one
- OpenAM version 13.0.0 required
- SSOAdminTools and Tomcat 7 are prerequisites
- Oracle Sun JDK 1.7 is required
- Requires setup of certificate in the inWebo administration console
- These plugins support the OTP and Push functions of inWebo authentication only.
- If you want to install both plugins, be sure to use the same version for the plugins.
- Remember to set the Certificate Authentication option to Yes.
- Requires Fortigate version 6.4.0 or superior to deploy SAML implementation
- Administrator access to Fortigate environment is needed
- Ensure the Called URL setting is correctly configured in the Secure Site setup.
- Configure your Fortinet with RADIUS (5 to 10 min)
- Create an inWebo account (2 min)
- Download, install and activate one of inWebo tokens (4 min)
- Configure RADIUS in your inWebo account (2 min)
- Perform a test authentication (1 min)
- You need to increase the Fortinet timeout value (5 seconds by default are not enough
  for MFA authentication). We advise you to configure a timeout with at least 28 seconds.
- 64-bit VM provisioned to support the LDAP Proxy
- Configured Fortinet VPN
- An LDAP server (e.g., Active Directory) for user authentication
- User groups defined in the LDAP server for MFA access control
- Java 8 64-bit or OpenJDK 8 64-bit
- SSL certificates to secure LDAPS connections if necessary
- Whitelist of users to bypass InWebo authentication (useful for service accounts)
- Condition to authenticate users with InWebo
- Requires Google Workspace admin access
- Requires TrustBuilder MFA admin access
- Generate SAML metadata manually as Google does not provide it automatically.
- Ensure to copy and paste the SP certificate from Google.
- Guacamole’s OpenID Connect support implements the implicit flow.
- The default validity period of the token is 300 seconds.
- The recommended authentication method is QR code authentication.
- Users can log in by clicking on 'Log in with SSO', entering their email, and satisfying
  the inWebo authentication request.
- To secure users' accounts, login/password authentication must be disabled.
- inWebo MFA can be enabled as an authentication layer combined with Kemp to verify
  users identities before they access the application server protected.
- Create a new SAML connector in the inWebo Administration console.
- Make sure to configure entityID, Location, and X509Certificate as per your environment.
- An inWebo service with administrator rights is required.
- You should contact Kyriba to activate the SSO feature on your Kiriba environment.
- 'To access the SSO login page, ensure the SSO parameter is present in the URL as
  follows: https://{platform}.treasury-factory.com/SSO'
- inwebo.auth.service.id is required
- inwebo.auth.cert.path is required
- inwebo.auth.cert.password is required
- inwebo.netiq.service.bookmark.alias is required
- inwebo.proxy.https should be set to true if using HTTPS proxy
- Choose Factor only as IDP Usage.
- IdP factor can now be enabled in a Sign-On policy.
- The requirement can be applied to all users, every time, for a specific group, from
  a specific zone, or after a session duration.
- The Authentication Protocol must be set to PAP
- If your policies use LDAP user groups you'll need to keep an LDAP authentication
  to retrieve the user group membership.
- InWebo acts as an Identity Provider for SAML integration.
- Ensure the metadata file name meets Palo Alto requirements for import.
- If your firewall policies uses LDAP user groups you'll need to keep an LDAP authentication
  to retrieve the user group membership.
- For inWebo the Radius authentication time (Timeout*(Retries+1)) should be below
  the 30s duration of an OTP
- A 'Radius Authentication time' of 60 seconds is recommended for 'push' radius mode
- Wildcard used in path
- Mandatory values include Called URL, Authentication page, Wildcard used in path,
  Form name, Login field name, and Password field name.
- For RADIUS "Push" configuration you have to indicate a 60 seconds timeout with no
  (0) retries.
- It's highly recommended to fill the "Backup Server" information.
- A 'Radius Authentication time' of 60 seconds is recommended.
- Ignore the 'Service provider' configuration and ADD the connector without any settings
- Check 'Accept Unsigned Metadata'
- Check 'Identity Provider' as role
- Please Do not forget complete the 'Role mapping' of this inWebo 'User Realm' to
  enable the access you want to your ressources.
- You can hide the Login Form in the LoginPage.thtml / id="table_LoginPage_6" (style="visibility:hidden"
  ...)
- Change the default timeout to 20sec and Max retries to 3.
- The whole system can be up and running in 15-20 minutes.
- Entity ID (Issuer) URL is based on the Metadata from the inWebo web admin console
- Identity Provider SSO Service URL and SAML URL are the same as the SSO URL
- Public X.509 Certificate needs to be copied from the inWebo web admin console
- SAML Correlation Rule uses the default seri one
- InWebo strong authentication service supports many built-in interfaces such as Radius,
  SAML 2.0, Web Services API, Google Apps and many more.
- Enforce SSO login by preventing login from https://login.salesforce.com
- Ensure to upload the TrustBuilder certificate file.
- SentinelOne uses the Mail attribute for authentication.
- This document refers to an 'inWebo Shibboleth plugin' - This component is no longer
  supported.
- We recommend using integrations based on standard protocols such as SAML or OIDC.
- 'You have to input the following details in inwebo.properties: inwebo.api.certificate.path,
  inwebo.api.certificate.password, inwebo.api.service.id.'
- You have to add ', /conf/inwebo.properties' at the end of idp.additionalProperties.
- You have to add '|inWebo' in idp.authn.flows.
- You have to uncomment the line and change idp.authn.flows.initial to inWebo.
- You have to add 'classpath*:/META-INF/shibboleth-idp/inwebo-global-config.xml,'
  in contextConfigLocation <param-value> in web.xml.
- You have to add 'classpath*:/META-INF/shibboleth-idp/inwebo-webflow-config.xml,'
  in contextConfigLocation <param-value> in web.xml.
- You have to add properties for inWebo messages in authn-messages.properties.
- You need to rebuild the shibboleth IdP war file using ./build.sh.
- Ensure to configure the entityID and Location with the URL 'https://saml.wgcs.mcafee-cloud.com/saml'.
- Attributes such as email address and group membership are required from TrustBuilder.
- Users do not need to be manually created in the Directory section; they are automatically
  added after a successful authentication.
- An administrator account of SonicWall firewall admin portal
- An administrator account of TrustBuilder MFA admin portal
- Allow UDP traffic in port 812 from SonicWall firewall to TrustBuilder MFA radius
  server
- Modifications to TrustBuilder radius connector will be applied within the next 15
  minutes.
- This documentation is designed for IT administrators within a security context.
- The goal is to configure Multi-Factor Authentication (MFA) using the inWebo LDAP
  Proxy integration for Sophos XG hardware.
- This ensures enhanced security for your organization’s network access.
- The following configuration and screenshots are based on Sophos UTM 9.5
- Navigate to Remote Access > SSL > Profile to configure.
- User and Groups should be set to LDAP Users.
- Users must be enrolled in inWebo for authentication
- Notifications will be sent to mobile/desktop devices in push mode
- RADIUS timeout set to 30000 ms and retry set to 0
- 'Group name example: inwebo-users'
- Must enable RADIUS two-factor authentication for each user.
- The uploaded SAML certificate requires a .pfx file format.
- 'For on-premises instances: the uploaded certificate should match the one used for
  Secret Server''s HTTPS configuration, OR it can be created as a self-signed certificate
  using the Powershell script.'
- 'For Secret Server Cloud users: you will need to generate your own certificate using
  the Powershell script.'
- Remove the SAML Attributes in section 4.
- 'If locked out, use the URL string: https://yoursecretserver.com/YourSecretServer/login.aspx?preventautologin=true.
  Role Permission needed is Bypass SAML Login.'
- 'Primary: radius-a.myinwebo.com (95.131.139.137)'
- 'Secondary: radius-b.myinwebo.com (217.180.130.59)'
- 'Authentication type: PAP'
- 'Server Timeout: 3 seconds (60s in Push Mode)'
- We advise you to add a secondary radius server by enabling 'secondary server'
- Match Windows Username can be activated so users will not have to enter their login
  on second step
- You need a VMware UAG version >= 3.8 (version beginning 2020)
- You need an access as an administrator to an inWebo environment
- 'Warning: that will apply inWebo Strong authentication based on SAML, be sure to
  have at least an enrolled and valid inWebo token and still have local access to
  your UAG in case of issue.'
- You should have created an 'Organisation' on your Wallix AM or use the default 'global'
  organisation (the latter is not recommended).
- In the field 'WAB-AM Entity Id', indicate your future WAB Access Manager portal
  Address.
- Attributes must match the inWebo Administration console SAML connector configuration.
- Make sure to provide a Distinguished Name for the 'User' parameter.
- Set a 30 seconds timeout or more for MFA notification validation.
- Ensure to download IdP Metadata and Service Provider Metadata
- Choose User login or User email for NameID value based on your configuration
- If developing locally, use 127.0.0.1 instead of localhost.
- The URL in the 'Authentication Page' must match exactly what users will enter in
  their web browser.
- If you are developing locally on you PC, 'localhost' is not permitted in the 'Authentication
  Page field'. Use 127.0.0.1 instead.
- When developing/testing, it's a common mistake that prevent Virtual Authenticator
  to be displayed.
- The default behavior of Helium in case of successful authentication is to insert
  the OTP in the HTML form.
- Best practices for securing browser enrollments.
- TrustBuilder Backup browser extension is available for Chrome, Chromium based browsers
  (e.g. Edge), Firefox, Safari and Internet Explorer.
- Chrome controls local storage in exactly the same way as cookies.
- If a user chooses to clear their cookies, it will also clear local storage.
- The best practice is to set the Tools > Settings > Confidentiality and security
  as follow.
- 'Clear browsing data: make sure the ''Cookies and other site and plugin data'' option
  is not checked.'
- Exceptions need to be added for domains https://ult-inwebo.com and https://www.myinwebo.com.
- Safari should have access to third party cookies.
- Firefox needs to be configured to authorize Third Party Cookies, at least for domain
  https://ult-inwebo.com.
- This zone configuration must be executed BEFORE Helium/VA/mAccess activation.
- Security level of the zone must not be set to 'High'.
- Preferably, the compatibility view should be disabled for sites using Helium/VA/mAccess.
- TrustBuilder Backup ensures Helium/VA persistence by permanently maintaining a copy
  of the local storage data for the domain 'ult-inwebo.com'.
- Some objects may return nulls in deeply nested fields
- MFA Mobile SDK integrates with existing applications for authentication.
- The TrustBuilder MFA SDK for Android allows to integrate the TrustBuilder MFA mAccess
  library.
- 'The current version of the TrustBuilder MFA SDK for Android requires minimum SDK:
  Android Nougat (API 24) or higher'
- If you use sealing feature, ask the admin to set the ‘Transaction sealing’ option
  to ‘Yes’
- Use HTTPS when contacting the TrustBuilder web services.
- Uses Firebase for push notifications
- Firebase Cloud Messaging (FCM) Legacy API was officially deprecated on June 2024
- Ensure the application is synchronized before generating OTP or seals.
- Biometric registration will fail if no biometrics are available.
- 'The SN is provided to the System variable Settings.Secure.ANDROID_ID: according
  to the documentation ‘a 64-bit number (expressed a 64-bit number hexadecimal string),
  unique to each combination of app-signing key, user, and device.’'
- The TrustBuilder MFA SDK for iOS has been released on October 2022 with a new sample
  application and a new documentation.
- The Legacy API will be deprecated in June 2024
- The InweboService constructor is responsible for the library initialization, setting
  the SN to the identifierForVendor UUID, the server to the Build Config SERVER, and
  the host version set to ‘demo_ios-' + version.
- Error codes are directly returned by the library to indicate if an error occurred.
- Before using sealing feature, be sure that the 'Transaction sealing' option is set
  to 'Yes'
- The Activation Code was formerly called 'Secure Site ID' in some authentication
  tools or in the documentation.
- Enable the QR code authentication in the Administration console.
- To configure your website properties click on 'manage service parameters' and then
  on the 'connector setup wizard' button. Follow the steps.
- To add users, simply click on 'manage service users' and then on 'add a new user'.
  Adding users can also be done using the provisioning functions of the API.
- Input parameters 'offset' and 'nmax' are used to page requests.
- Accessing the audit trail for a given service requires a valid certificate.
- Standard offers are restricted to a 1 Year limit
- Results are paginated, check 'hasMore' in the response to determine if more pages
  exist.
- Requires setup of connected app in TrustBuilder
- Some API calls may have rate limits
- This library is intended for mobile integrations use only like Ionic / Apache Cordova
  / Adobe Phonegap.
- Switching between mAccess Web with an iFrame and mAccess Web without iFrame will
  cause the loss of all users enrollments.
- If you are about to perform a first mAccess Web integration, we recommend that you
  use the activate function.
- If you have already integrated mAccess Web, the activateWithPin function is still
  available.
- A valid 'Alias' for a secure site is required for this service.
- An TrustBuilder MFA service is required.
- Uses PIN or password for authentication.
- An inWebo service is required for operation.
- Known issue - Notifications not received on Authenticator Desktop
- Fixed an issue that caused sporadic 401 unauthorized errors on REST API calls
- Previous version was in Beta status.
- The 7th version of TrustBuilder Authenticator is a major release, offering a completely
  redesigned user experience.
- It complies with the WCAG 2.1 Level AA accessibility standards, ensuring greater
  accessibility for all users.
- Authenticator 7.0 complies with the WCAG 2.1 Level AA accessibility standards
- The registration for receiving notifications does not work correctly for new installations
  of Authenticator for Windows, Linux, and macOS since approximately August 8th.
- Upgrade your users to 6.38.0
- For the users that cannot upgrade, or did not upgrade yet, make sure to provide
  the above information about 'Authorize a connection' so they are able to authenticate
- This topic is still under investigation and research; please check this page regularly
  for updates.
- TrustBuilder Backup is a browser extension developed by TrustBuilder. It allows
  the user to keep his browser enrollment token in the event of an unintentional or
  intentional deletion of browser site data.
- If any future Chrome upgrade causes a loss of enrollment, it will be transparently
  restored by TrustBuilder Backup.
- Changing the mode will cause a loss of enrollment for users already enrolled.
- Fixed an issue with notifications when more than one account is activated in the
  application
- Fixed hidden PIN input field on small screens
- Resolved an issue where a field remained filled after entering an incorrect PIN
- Cosmetic updates
- New Authentication Method via QR code scanning. This method is an alternative to
  Push notification.
- Improved the error message when the account is locked
- Updated brand identity from inWebo to TrustBuilder
- Fixed a bug where sync would halt after a transaction error
- Resolved an issue where the provisioning ID wasn’t used for deletion with multiple
  IWDS instances
- Fixed a log rotation bug causing logs to be written to the same file
- New parameter ldap.proxy.max.simultaneous.push for managing parallelization
- Optimization of the send notification mechanism
- Adding an optional Heartbeat to detect network failures
- New parameters to optimize HTTPS API communications
- Adding TLS 1.2
- addition of a new mode for running the lib in the same domain, without iframe, so
  the enrollment data are considered primary and not third-party data.
- fix of an issue that prevented helium backup from saving the enrollment data
- Support of biokey for mAccess Web on mobile application
- Disabling the offline operations to improve security
- Adding a function to activate a user with pin or without pin
- Adding a function to generate OTP for a user with pin or without pin
- Permanent link to the latest available version of the library. The latest current
  version is available at https://ult-inwebo.com/neon/current/simple-neon-lib.js
- Adding a function to send a push notification to be received on Authenticator mobile
  or desktop
- fix of a duplicate profile issue after restoring a user account
- compatible with Helium Backup for persistence of enrollment data
- Requires setup of connected app in TrustBuilder.
- Ensure to handle expired tokens appropriately.
- Available via the Apple app Store
- Fixes the detection of TrustBuilder Backup in the https://www.myinwebo.com/hbckup/install
  page
- Fixes browser token blocked when using multiple domains with 2 tabs
- API token management includes expiration date and last used date.
- Some endpoints may have rate limits.
- compatibility issue with Microsoft desktop applications in IE11 compatibility mode
  (Teams and OneDrive) is solved
- authentication page is defined automatically based on service parameters
- Selfcare feature will be enabled by default in the service parameters upon the update,
  but can be disabled.
- Audit feature will be disabled by default.
- Selfcare 'ON' by default. Users will still be able to activate a new device.
- Audit Off by default. No impact on users.
- Selfcare functionality allows users to manage their trusted tools.
- Audit feature lets users view their recent actions.
- La fonction Audit sera désactivée par défaut lors de la mise à jour.
- 'Sur Android 8-11: la flèche de retour vers la home, en haut à gauche dans les menus
  Mes Outils et Audit n’est pas opérationnelle.'
- 'Expiration de session: après 5 minutes sans activité dans les menus Mes Outils,
  Mon Compte ou Audit, la flèche de retour vers la home devient inopérante.'
- 'Sur Android: quand on entre l’email de récupération de compte, le clavier masque
  le champ email, ce qui rend difficile de voir ce qui est entré.'
- 'Quand on saisit un email incorrect dans le champ récupération de compte, un message
  est visible en haut: ‘invalid json’. Ce message devrait être plus explicite.'
- 'iOS: la couleur de certains boutons d’action doit être harmonisée.'
- These changes do not impact the use of inWebo products.
- Rebranding inWebo to TrustBuilder
- No functional impact from rebranding
- Feel free to use them to update your documentations.
- Selfcare feature allows users to manage their trusted tools.
- Audit feature enables users to view their recent actions.
- Visual elements modified due to branding changes.
- 'Attention: les utilisateurs et administrateurs n’auront plus accès à la fonction
  “Activer un nouvel outil”, en cas de perte ou de blocage navigateur il ne pourront
  donc pas le réactiver à l’aide de leur application Authenticator.'
- Audit Off par défaut. Pas d’impact utilisateurs. Vous pouvez l’activer.
- The Audit feature will be disabled by default.
- Only the standard Authenticator 6 is impacted by the update.
- Selfcare 'ON' by default for Authenticator 6 mobile or desktop.
- Requires OAuth2 authentication configuration in TrustBuilder.
- Apple a fait évoluer sa méthode d’envoi de notifications push et l'ancienne méthode
  par certificat sera dépréciée fin mars 2021.
- Avoir un certificat APNs valide au format p.12 généré pour l’App Id de l’application.
- Le paramétrage diffère peu de l’actuel exceptée la saisie de l’App Id de l’application.
- La clé privée de signature du token de connexion fournie sous la forme d’un fichier
  .p8 à télécharger
- 'La clé privée de signature aura cette forme: AuthKeyABCD1234.p8, la chaîne de caractère
  ABCD1234 est la Key ID de 10 caractères correspondante'
- Requires OAuth2 authentication for access
- Apple has made evolutions in the way of sending push notifications, and the previous
  certificate-based method is to be deprecated by end of March 2021.
- Only if you have an mAccess based application that runs on iOs and use APNs notifications,
  your are impacted.
- An authentication token signing key is required, specified as a text file with a
  .p8 file extension.
- The Key ID is a 10-character identifier required for configuration.
- On Windows, upgrading from Authenticator 6.12 to 6.14 is possible.
- Upgrading directly from Authenticator 6.8 or lower to 6.14 is not possible, you
  have to upgrade to 6.12 and then to 6.14.
- On Windows, an upgrade from Authenticator 6.12 to 6.14 is possible.
- A direct upgrade from Authenticator 6.8 or earlier to 6.14 is not possible, you
  must upgrade to 6.12 then 6.14.
- The API currently in use is known as 'LEGACY', and will be decommissioned by Google
  at the end of June 2024.
- Your service account requires some permissions.
- You may create a specific role such as 'FCM Push Notification Role' containing 'cloudmessaging.messages.create'.
- User journey for validating operations on mobile Authenticator via push notifications
  and fingerprints will change to increase security.
- 'Customers using the specialized Authenticator enroll page with such a link in their
  activation email templates: https://www.myinwebo.com/enroll/?activationCode=_CODE_'
- With Authenticator 6.32 and older, the scan of the QR code will insert the full
  URL in the activation field and not only the code.
- Authenticator 6.33 will fix the issue and allow the scan of this QR code.
- Legacy features or components that are obsolete have to be deprecated.
- Customers are advised to begin transitioning away from deprecated features.
- Uses OAuth2 with refresh token — requires setup of connected app in TrustBuilder.
errors:
- '401 Unauthorized: Recheck Authorization header or token validity'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'USER_NOT_FOUND: Ensure the user ID is correct.'
- 'INVALID_TOKEN: Refresh the access token or check credentials.'
- 'DUPLICATE_USER: The username or email already exists.'
- '400 Bad Request: Check input parameters and format.'
- '404 Not Found: Verify the requested resource exists.'
- '401 Unauthorized: Ensure valid authentication credentials.'
- '400 Bad Request: Check the JSON structure for policy or rule creation.'
- '401 Unauthorized: Ensure proper authentication to access management endpoints.'
- '401 Unauthorized: Check credentials'
- '429 Too Many Requests: Rate limit exceeded'
- If an authenticate request does not succeed because the HTTP server does not accept
  the credentials, the response is considered technically correct.
- '0: Request was valid'
- '1: Request was not valid'
- '2: Challenge was sent by the Ldap server'
- '0: OK'
- '>0: Certificate not valid'
- '2: Certificate expired'
- '3: Certificate not yet valid'
- '4: No AKI or issuer'
- '5: Invalid AKI or issuer'
- '6: Signer certificate not found'
- '7: Keystore error'
- '8: Signature invalid'
- '9: Invalid Base64'
- 'Connection timeout error: The host / port is not valid, unreachable.'
- 'Socket timeout error: The request could not be handled within the required time.'
- 'SSL error: SSL handshake error.'
- '1: LDAP error'
- '2: LDAP Authentication error'
- '3: No permission'
- '4: Not Found'
- '5: Invalid name'
- '6: Schema violation'
- '7: Existing name'
- '8: Invalid Attribute value'
- '9: No such attribute'
- '10: Attribute in use'
- '11: Attribute modification error'
- '100: Unsupported'
- '101: No results'
- '102: Communication error'
- '103: Service unavailable'
- '104: Connection error'
- '105: Socket timeout'
- '106: SSL Handshake error'
- 1 Radius error
- 2 Access challenge error
- 3 Access reject error
- 4 Unknown attribute error
- 5 Unknown response error
- 1 = Internal Error
- 2 = Token is malformed
- 3 = Not before assertion failed
- 4 = Not after assertion failed
- 5 = Invalid signature structure
- 6 = Invalid signature
- 7 = Invalid certificate
- 8 = Status no success
- 9 = Error decrypting attribute
- '1: Unreachable SMSC'
- '2: PDU exception generally an invalid character'
- '3: Invalid response received from SMSC'
- '4: Negative response received'
- '5: Timeout while waiting for response'
- '1: Invalid Address'
- '2: No such provider The application server doesn''t support an SMTP provider'
- '3: Messaging problem'
- '1: POOL_DEPLETED Maximum number of connections exceeded'
- '2: POOL_CREATION_ERROR Error creating a connection'
- '401 Unauthorized: Recheck authentication method or token expiration'
- '401 Unauthorized: Check your credentials or permissions'
- '403 Forbidden: User is not allowed to access this resource'
- '0: No error'
- '1000: Empty rule suite XML'
- '1001: Error while creating rule suite'
- '1002: A rule suite with the same resource exists'
- '1003: A rule suite with the same name exists'
- '1100: The rule suite did not validate correctly'
- '1200: Engine not active'
- '1201: Attempt to save when using rule suite index file'
- '1202: Error while saving rule suite'
- '1203: The rule suite file could be not deleted'
- 'ACCESS_DENIED: Access denied'
- 'ACCOUNT_BLOCKED: Account is blocked'
- 'AUTHN_FAILED: The responding provider was unable to successfully authenticate the
  principal.'
- 'BAD_REQUEST: Bad request'
- 'CERTIFICATE_NOT_FOUND: A required certificate was not found'
- 'INSTALL_NOT_OK: Installation is not completed, complete installation and retry'
- 'INTERNAL_SERVER_ERROR: Internal server error'
- 'INVALID_ATTR_NAME_OR_VALUE: Unexpected or invalid content was encountered within
  a <saml:Attribute> or <saml:AttributeValue> element.'
- 'INVALID_NAME_ID_POLICY: The responding provider cannot or will not support the
  requested name identifier policy.'
- 'INVALID_PARAMETERS: There are some parameters with invalid values in the request.'
- 'MESSAGE_VALIDATION_FAILED: The parsing of a third party message has failed.'
- 'MISSING_PARAMETERS: There are some parameters missing in the request.'
- 'NO_AUTHN_CONTEXT: The specified authentication context requirements cannot be met
  by the responder.'
- 'NO_AVAILABLE_IDP: Used by an intermediary to indicate that none of the supported
  identity provider <Loc> elements in an <IDPList> can be resolved or that none of
  the supported identity providers are available.'
- 'NO_PASSIVE: Indicates that the responding provider cannot authenticate the principal
  passively, as has been requested.'
- 'NO_PROXY_SP: No Gateway Service Provider found'
- 'NO_SUBJECT: There is no value present for the attribute used as subject for the
  Service Provider you are trying to access'
- 'NO_SUPPORTED_IDP: Used by an intermediary to indicate that none of the identity
  providers in an <IDPList> are supported by the intermediary.'
- 'PROXY_COUNT_EXCEEDED: Indicates that a responding provider cannot authenticate
  the principal directly and is not permitted to proxy the request further.'
- 'REQUEST_DENIED: The SAML responder or SAML authority is able to process the request
  but has chosen not to respond.'
- 'REQUEST_UNSUPPORTED: The SAML responder or SAML authority does not support the
  request.'
- 'REQUEST_VERSION_DEPRECATED: The SAML responder cannot process any requests with
  the protocol version specified in the request.'
- 'REQUEST_VERSION_TOO_HIGH: The SAML responder cannot process the request because
  the protocol version specified in the request message is a major upgrade from the
  highest protocol version supported by the responder.'
- 'REQUEST_VERSION_TOO_LOW: The SAML responder cannot process the request because
  the protocol version specified in the request message is too low.'
- 'RESOURCE_NOT_RECOGNIZED: The resource value provided in the request message is
  invalid or unrecognized.'
- 'TOO_MANY_RESPONSES: The response message would contain more elements than the SAML
  responder is able to return.'
- 'UNKNOWN_ATTR_PROFILE: An entity that has no knowledge of a particular attribute
  profile has been presented with an attribute drawn from that profile.'
- 'UNKNOWN_PRINCIPAL: The responding provider does not recognize the principal specified
  or implied by the request.'
- 'UNKNOWN_ARTIFACT_ISSUER: The issuer of a SAML artifact response could not be identified.'
- 'UNKNOWN_SP: The Service Provider is not known to us.'
- 'UNSUPPORTED_BINDING: The SAML responder cannot properly fulfill the request using
  the protocol binding specified in the request.'
- 'WRONG_AUTHENTICATION_METHOD: There was a problem finding the authentication method'
- 'WRONG_USER: Mismatch between logged on user and incoming user'
- 'NO_IDPS: Used by an intermediary to indicate that none of the supported identity
  provider <Loc> elements in an <IDPList> can be resolved or that none of the supported
  identity providers are available.'
- 'UNKNOWN_SP: The Service provider that sent the message is not known to us.'
- '401 Unauthorized: Check your authentication credentials.'
- '401 Unauthorized: Check token validity.'
- '403 Forbidden: Ensure you have permission.'
- '401 Unauthorized: Check client credentials or token expiration'
- 'AuthorizationException: Code: 1, User canceled flow'
- 'SessionExpiredException: Session has expired.'
- 'User cancellation: User canceled the authentication process.'
- 'Invalid client secret: Check that the client secret is correct.'
- 'TBError.notSignedIn: Will be returned when we do not have information about any
  signed in user.'
- 'TBError.incorrectTokenInformation: Will be returned when we could not retrieve
  the user information from the stored token.'
- 'TBError.sessionExpired: Will be returned when the session has expired.'
- '200 OK: Successful request.'
- '201 CREATED: Resource successfully created.'
- '400 BAD REQUEST: Invalid request format.'
- 'INVALID_CREDENTIALS: Check client_id and client_secret'
- 'ACCESS_DENIED: Ensure the user has the right permissions'
- 'TOKEN_EXPIRED: Refresh the token before making requests'
- Unable to activate the TrustBuilder authentication service. This link is not or
  no longer valid
- Authentication and Provisioning logs are available in the ‘Service Reports’ tab.
  This can become handy for troubleshooting purposes.
- 'INVALID_CLIENT: Check client credentials.'
- 'INVALID_GRANT: Verify authorization code.'
- '403 Forbidden: Check user permissions.'
- 'User deletion: Soft-deleted user in Entra is blocked in TrustBuilder.'
- 'Provisioning ID conflict: IWDS and SCIM should not be used together.'
- 0 - Normal execution (no error)
- 1 - Installation aborted by user (cancel button)
- 2 - Installation aborted by script
- 'Access-Reject: Invalid OTP.'
- 'Timeout: Exceeded server timeout period.'
- 'Authentication to LDAP failed : < information>'
- Timeout setting of 0 disables operation timeout limits
- 'AADSTS5001258: Failed to validate external id_token: ''acr'' claim has unexpected
  value.'
- 'AADSTS550166: Request to External OIDC endpoint failed'
- 'Unauthorized Client: Verify the Azure AD connector client ID and client secret.'
- 'invalid_request: Check for typographical errors or omissions in the configuration.'
- Minor cosmetic issues in the credential administration
- 'UnauthorizedAccessException: Access to the path ''C:\inwebo\inWebo.config'' is
  denied.'
- 'Invalid OTP: Recheck the OTP generated from the inWebo application'
- 'Unauthorized: Verify that the username is in UPN format'
- 'Error during authentication : External authentication server did not reply'
- 'Ensure all fields are completed: Certificate, Sign-On URL and IdP Entity ID'
- 'unsupported_browser: browser is not supported, typically IE8'
- 'va_unreachable: VA servers could not be reached'
- 'no_profile: no profile found for the current action and the current Secure Site'
- 'no_localstorage: Helium can''t write in localStorage - Allow third-party cookies
  in your browser settings'
- 'no_profile: no profile found for request, x profiles exist in localstorage'
- 'Wrong code: Activation code is incorrect'
- 'user blocked: The user is blocked'
- 'no profile found for request: No profile found for the request'
- 'forbidden operation: The operation is forbidden'
- 'nok:noprofile: Browser not enrolled'
- 'RESPONSE_CODE_NOT_ZERO: Check for valid response codes from the webservice'
- 'NO_BIOMETRICS_AVAILABLE: User must register biometrics'
- 'APPLICATION_NOT_SYNCHRONIZED: User must synchronize the application'
- 'ERR_OK: no error'
- 'ERR_NETWORK: network or server unreachable'
- 'ERR_CODE: The Activation code is incorrect'
- 'ERR_SN: one argument does not have the right syntax'
- 'ERR_ACCESS: access refused'
- 'ERR_VERSION: version error'
- 'ERR_BLOCKED: account is blocked'
- 'ERR_STATE: internal state not correct'
- 'ERR_NODEVICE: device is disabled or unknown'
- 'ERR_NOCA: User must activate helium or Desktop Token before achieving this operation'
- 'ERR_NOSRV: No service is available'
- 'ERR_PINREUSED: the new password equals the previous one'
- 'ERR_SYNCHROFAILED: the operation succeeded but it required a post-synchronization
  which failed'
- 'ERR_FORBIDDEN: forbidden operation (due to activated state/blocked state/upgradable
  state)'
- 'ERR_PINREFUSED: the password is refused (bad format)'
- 'ERR_TIMEOUT: timeout expired between xxxStart and xxxFinalize'
- 'ERR_BIOKEY: device is locked due to biokey errors'
- 'DESYNCHRONIZED: device desynchronized'
- 'ERR_OTHER: any other error'
- '0: Success'
- 'Non-zero: Error occurred'
- 'IW_ERR_OK: no error'
- 'IW_ERR_NETWORK: network or server unreachable'
- 'IW_ERR_CODE: The Activation code is incorrect'
- 'IW_ERR_SN: one argument does not have the right syntax'
- 'IW_ERR_ACCESS: access refused'
- 'IW_ERR_VERSION: version error'
- 'IW_ERR_BLOCKED: account is blocked'
- 'IW_ERR_STATE: internal state not correct'
- 'IW_ERR_NODEVICE: device is disabled or unknown'
- 'IW_ERR_NOCA: User must activate helium or Desktop Token before achieving this operation'
- 'IW_ERR_NOSRV: No service is available'
- 'IW_ERR_PINREUSED: the new password equals the previous one'
- 'IW_ERR_SYNCHROFAILED: the operation succeeded but it required a post-synchronization
  which failed'
- 'IW_ERR_FORBIDDEN: forbidden operation (due to activated state/blocked state/upgradable
  state)'
- 'IW_ERR_PINREFUSED: the password is refused (bad format)'
- 'IW_ERR_TIMEOUT: timeout expired between xxxStart and xxxFinalize'
- 'IW_ERR_BIOKEY: device is locked due to biokey errors'
- 'IW_DESYNCHRONIZED: device desynchronized'
- 'IW_ERR_OTHER: any other error'
- 'IW_ERR_OTHER: Could be returned by any function, but not in normal behavior.'
- 'IW_ERR_NOCA: User must activate inWebo helium or inWebo Desktop Token before achieving
  this operation'
- 'ERR_DESYNCHRONIZED: device desynchronized'
- 'IW_ERR_NETWORK: network error'
- 'IW_ERR_FORBIDDEN: device is not activated or not blocked or to be upgraded'
- 'IW_ERR_NODEVICE: the device is unknown or has been permanently disabled'
- 'IW_ERR_VERSION: version error, user must upgrade the device'
- 'IW_ERR_FORBIDDEN: device is not activated or blocked or to be upgraded'
- NOK:REFUSED ==> user refused authentication
- NOK:TIMEOUT ==> user did not authenticate in time (1 minute)
- NOK:SN ==> syntax error in input parameters
- NOK:srv unknown ==> serviceId is wrong
- NOK ==> sessionId does not exist or has expired
- 'NOK:full: Maximum number of users for the service has been reached'
- 'NOK:loginexists: The login already exists'
- 'NOK:no device found: OTP does not match any of the user''s devices'
- 'NOK:NOLOGIN: User has not activated a token yet'
- 'NOK:account unknown: Unknown user'
- 'NOK:account disabled: User is blocked'
- 'NOK:ACCESS: Wrong pin'
- 'NOK_BLOCKED: Device is locked'
- 'NOK:no secret: Device needs to be synchronized'
- 'NOK:SN: Syntax Error'
- 'NOK:TIMEOUT: Request timeout'
- 'NOK:Access Forbidden: Client certificate is absent/not valid or IP not whitelisted'
- 'NOK:Ooops: Other error. Retry'
- 'NOK:HSMERROR: Internal server error'
- 'NOK:NO_MATCHING_DEVICE: The OTP may be expired'
- 'NOK:srv unknown: If the ID of the service set in the URL is not valid'
- 'NOK:account unknown: If the login set is not a valid login of the service'
- 'NOK:NoKey: user does not have a sealing key. This means that he has not activated
  your app'
- 'NOK:BadData: The data sealing in the OTP is different from the one sent in as an
  input parameter. Potential MITM.'
- 'NOK:FORBIDDEN: Sealing option is not authorized for your account. Contact TrustBuilder
  Sales.'
- NOK:srv unknown
- NOK:NoKey
- NOK:BadData
- NOK:FORBIDDEN
- NOK:NOPUSH
- NOK:NOMA
- NOK:NOLOGIN
- NOK:SN
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Verify authentication credentials'
- USER_IS_BLOCKED
- USER_IS_NOT_BLOCKED
- USER_MULTI_CUSTOMER
- USER_NOT_MONO_SERVICE
- USER_ENTRY_DOES_NOT_EXIST
- APP_ALIAS_ENTRY_DOES_NOT_EXIST
- PUSH_ALIAS_ENTRY_DOES_NOT_EXIST
- TOKEN_IS_BLOCKED
- TOKEN_IS_NOT_BLOCKED
- TOKEN_TYPE_IS_NOT_SUPPORTED
- TOKEN_HAS_NO_BIO_KEY_AND_SERVICE_MUST_USE_BIOKEY
- THIS_KEYTYPE_IS_NOT_ALLOWED
- STATIC_TOKEN_KEY_IS_INVALID
- DYNAMIC_TOKEN_KEY_IS_INVALID
- MAX_NB_TOOLS
- NO_ACTIVE_SERVICE_FOR_USER
- NO_PASSWORD
- PASSWORD_IS_WRONG
- BIO_KEY_IS_WRONG
- BIO_KEY_ALREADY_EXIST
- NO_DEVICE_FOUND
- NOT_MACHINE
- DEVICE_LOCKED
- NO_ACCESS
- MACID_IS_UNKNOWN
- CODE_TYPE_NOT_SUPPORTED
- CODE_ENTRY_DOES_NOT_EXIST
- CODE_IS_NOT_ALLOWED_FOR_THIS_TOKEN
- ACCOUNT_DATA_DOES_NOT_EXIST
- TOKEN_DATA_DOES_NOT_EXIST
- SEALING_IS_NOT_ALLOWED
- SEALDATA_IS_NOT_VALID
- 'BIO_KEY_ALREADY_EXIST: A BioKey already exists for this user.'
- 'BIO_KEY_IS_WRONG: The biokey is wrong.'
- 'CODE_ENTRY_DOES_NOT_EXIST: The entered code is invalid.'
- 'CODE_IS_NOT_ALLOWED_FOR_THIS_TOKEN: The entered code is is not allowed for this
  token/device.'
- 'CODE_TYPE_NOT_SUPPORTED: The code type used is not supported.'
- 'DEVICE_LOCKED: The token/device is locked.'
- 'DYNAMIC_TOKEN_KEY_IS_INVALID: Dynamic key is invalid.'
- 'MACID_IS_UNKNOWN: The macId is unknown.'
- 'MAX_NB_TOOLS: The maximum number of devices has been reached for this user.'
- 'NO_ACTIVE_SERVICE_FOR_USER: The service is no longer active.'
- 'NO_DEVICE_FOUND: The device is not found.'
- 'NO_PASSWORD: No password for this user.'
- 'PASSWORD_IS_WRONG: The PIN/password is wrong.'
- 'PIN_REFUSED: The PIN/password is refused.'
- 'PUSH_ALIAS_ENTRY_DOES_NOT_EXIST: Push alias for this login doesn’t exist.'
- 'SEALDATA_IS_NOT_VALID: The seal data is invalid.'
- 'SEALING_IS_NOT_ALLOWED: The sealing operation is not allowed.'
- 'STATIC_TOKEN_KEY_IS_INVALID: The static key token does not match the static key
  that the TrustBuilder server knows.'
- 'SERVICE_ACCOUNT_STATUS_DISABLED: The user account has been blocked by an administrator.'
- 'TOKEN_IS_BLOCKED: The token/device is blocked.'
- 'TOKEN_IS_NOT_BLOCKED: The token/device is not blocked.'
- 'TOKEN_HAS_NO_BIO_KEY_AND_SERVICE_MUST_USE_BIOKEY: The service configuration required
  a biokey but no biokey is registered.'
- 'USER_IS_NOT_BLOCKED: The user is not blocked.'
- 'USER_IS_BLOCKED: The user is blocked because he has exceeded the wrong password/PIN
  entry limit.'
- 'USER_ENTRY_DOES_NOT_EXIST: The login value does not exist.'
- 'STATIC_TOKEN_KEY_IS_INVALID: The static key token does not match the static key
  that the TrustBuilderserver knows.'
- 'BIO_KEY_ALREADY_EXIST: A BioKey already exists for this user.  This error is returned
  on attempting update a biometric key. The BioKey cannot be update: it should be
  revoked and then created again.'
- 'BIO_KEY_IS_WRONG: The biokey is wrong.  This error is returned when a user authenticates
  with a BioKey that doesn’t match the stored biokey.'
- 'CODE_ENTRY_DOES_NOT_EXIST: The entered code is invalid.  This error is returned
  on attempting to enter a code (any type of code) that has already been consumed.'
- 'CODE_IS_NOT_ALLOWED_FOR_THIS_TOKEN: The entered code is is not allowed for this
  token/device.  This error is returned when a user attempts to use a token/device
  that is not associated with its service `macId`. This can only happen in a white
  label multi-service case.'
- 'CODE_TYPE_NOT_SUPPORTED: The code type used is not supported.  This error may be
  returned when an activation code, for example, is used to reset a Secret Code instead
  of activate a device: the code type is not matching the action.'
- 'DEVICE_LOCKED: The token/device is locked.  This error is returned when a user
  attempts to perform an action with a device/token that has been locked. The device/token
  can be locked if it has not been used or locked by users themselves.'
- 'DYNAMIC_TOKEN_KEY_IS_INVALID: Dynamic key is invalid.  This error is returned when
  the dynamic key does not match the key in the TrustBuilder server: the token/device
  has been out of synchronization. The token/device should be deleted then enrolled.'
- 'MACID_IS_UNKNOWN: The `macId`is unknown.  This error is returned when the `macId`
  specified in the initialization script does not match the TrustBuilder MFA service
  configuration.'
- 'MAX_NB_TOOLS: The maximum number of devices has been reached for this user.  This
  error is returned when a user attempts to enroll a new device, while the maximum
  number of devices set for this service has been reached.'
- 'NO_ACTIVE_SERVICE_FOR_USER: The service is no longer active.  This error is returned
  when a user attempts to perform an action, while the service has been deleted.'
- 'NO_DEVICE_FOUND: The device is not found.  This error is returned when a user attempts
  to authenticate with a device that is not stored in the service.'
- 'NO_PASSWORD: No password for this user.  This error is returned when a user attempts
  to perform an action but has not defined their PIN/password.'
- 'PASSWORD_IS_WRONG: The PIN/password is wrong.  This error is returned when entering
  the PIN/password if the PIN/password is wrong.'
- 'PIN_REFUSED: The PIN/password is refused.  This error is returned when defining
  the PIN/password if the two PIN/passwords entered do not match.'
- 'PUSH_ALIAS_ENTRY_DOES_NOT_EXIST: Push alias for this login doesn’t exist  This
  error is returned when a user attempts to perform an action on a push notification
  that has already been consumed.'
- 'SEALDATA_IS_NOT_VALID: The seal data is invalid.  This error is returned on a sealing
  operation, when the data does not match the seal data.'
- 'SEALING_IS_NOT_ALLOWED: The sealing operation is not allowed.  To perform a sealing
  operation, the Sealing feature has to be activated at the service level.'
- 'STATIC_TOKEN_KEY_IS_INVALID: The static key token does not match the static key
  that the TrustBuilder server knows.  This error message may be returned for security
  reasons, when a user changes its device/token: data stored are cloned in the application
  but the static key of the new token/device is not the same as the older device/token.'
- 'SERVICE_ACCOUNT_STATUS_DISABLED: The user account has been blocked by an administrator.  This
  error is returned when a blocked user attempts to perform an action, such as authentication.'
- 'TOKEN_IS_BLOCKED: The token/device is blocked.  This error is returned when a user
  attempt to use a blocked token/device.'
- 'TOKEN_IS_NOT_BLOCKED: The token/device is not blocked.  This error is returned
  on attempting to unlock a token/device that is not blocked.'
- 'TOKEN_HAS_NO_BIO_KEY_AND_SERVICE_MUST_USE_BIOKEY: The service configuration required
  a biokey but no biokey is registered.  This error is returned when, in a no pin
  service with biokey forced, a user has no biokey registered.'
- 'USER_IS_NOT_BLOCKED: The user is not blocked.  This error is returned on attempting
  to unlock a user.'
- 'USER_IS_BLOCKED: The user is blocked because he has exceeded the wrong password/PIN
  entry limit.  This error is returned when a blocked user attempts to perform an
  action, such as authentication.'
- 'USER_ENTRY_DOES_NOT_EXIST: The login value does not exist.  This error may be returned
  when a deleted user attempts to perform an action, such as authentication.'
- PIN_REFUSED
- 'INVALID_TOKEN: Recheck token validity.'
- 'RESOURCE_NOT_FOUND: Verify the endpoint path.'
- '401 Unauthorized: Check your credentials.'
- '429 Too Many Requests: Rate limit exceeded.'
- 'invalid json: should be more explicit'
- '401 Unauthorized: Check your API key or token'
- '404 Not Found: Check the endpoint URL'
- '500 Internal Server Error: Try again later'
- 'invalid json: Quand on saisit un email incorrect dans le champ récupération de
  compte, un message est visible en haut.'
- '401 Unauthorized: Check your API credentials and token.'
- '429 Too Many Requests: You have hit the API rate limit.'
- '401 Unauthorized: Check client credentials'
- '400 Bad Request: Validate request parameters'
- 'Selfcare: renaming a device is not applied to the device'
- Remaining spinner after entering wrong pin, and in some other cases
- After switching account when having more than 6 accounts, the current account is
  not updated properly; workaround is to close and restart the app
- Notifications on Windows do not have the proper title
- Message “trying to connect” is improperly displayed when generating an OTP in “no
  pin” mode
- Some translation issues for messages in My Account, Antiphishing and Account recovery
  page
- and other minor cosmetic issues
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - UserProfile
  - OAuthToken
  - AZN
  - IDHub UserID
  - TBLoginService
  - AuthorizationService
  - User
  - Method
  - Token
  - OAuth2
  - AccessToken
  - AuthorizationCode
  - Service ID
  - Bookmark Alias
  - inWebo Certificate
client:
  base_url: https://www.trustbuilder.com
  auth:
    type: oauth2
source_metadata: null
