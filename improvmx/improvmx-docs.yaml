resources:
- name: account
  endpoint:
    path: /account
    method: GET
    data_selector: account
    params: {}
- name: domains
  endpoint:
    path: /domains
    method: GET
    data_selector: domains
    params: {}
- name: whitelabels
  endpoint:
    path: /account/whitelabels
    method: GET
    data_selector: whitelabels
    params: {}
- name: aliases
  endpoint:
    path: /domains/:domain/aliases
    method: GET
    data_selector: aliases
    params: {}
- name: list_alias_logs
  endpoint:
    path: /domains/:domain/logs/:alias
    method: GET
    data_selector: logs
    params: {}
- name: list_credentials
  endpoint:
    path: /domains/:domain/credentials
    method: GET
    data_selector: credentials
    params: {}
- name: add_credential
  endpoint:
    path: /domains/:domain/credentials
    method: POST
    data_selector: credential
    params: {}
- name: update_credential
  endpoint:
    path: /domains/:domain/credentials/:username
    method: PUT
    data_selector: credential
    params: {}
- name: delete_credential
  endpoint:
    path: /domains/:domain/credentials/:username
    method: DELETE
    data_selector: success
    params: {}
- name: delete_all_aliases
  endpoint:
    path: /domains/:domain/aliases/aliases-all
    method: DELETE
- name: bulk_modify_aliases
  endpoint:
    path: /domains/:domain/aliases/bulk
    method: POST
- name: list_rules
  endpoint:
    path: /domains/:domain/rules
    method: GET
- name: add_rule
  endpoint:
    path: /domains/:domain/rules
    method: POST
- name: get_rule
  endpoint:
    path: /domains/:domain/rules/:rule
    method: GET
- name: update_rule
  endpoint:
    path: /domains/:domain/rules/:rule
    method: PUT
- name: delete_rule
  endpoint:
    path: /domains/:domain/rules/:rule
    method: DELETE
- name: delete_all_rules
  endpoint:
    path: /domains/:domain/rules-all
    method: DELETE
- name: bulk_modify_rules
  endpoint:
    path: /domains/:domain/rules/bulk
    method: POST
- name: list_domain_logs
  endpoint:
    path: /domains/:domain/logs
    method: GET
- name: MX Records
  endpoint:
    path: /guides/mx-spf-records
    method: GET
    data_selector: records
    params: {}
- name: SPF Records
  endpoint:
    path: /guides/mx-spf-records
    method: GET
    data_selector: records
    params: {}
- name: MX Records
  endpoint:
    path: /guides/mx-spf-records
    method: GET
    data_selector: records
    params: {}
- name: SPF Records
  endpoint:
    path: /guides/mx-spf-records
    method: GET
    data_selector: records
    params: {}
- name: MX Records
  endpoint:
    path: /api/mx-records
    method: GET
    data_selector: records
- name: SPF Records
  endpoint:
    path: /api/spf-records
    method: GET
    data_selector: records
- name: MX Records
  endpoint:
    path: /api/mx-records
    method: GET
    data_selector: records
- name: SPF Records
  endpoint:
    path: /api/spf-records
    method: GET
    data_selector: records
- name: MX Records
  endpoint:
    path: /guides/mx-spf-records
    method: GET
    data_selector: records
    params: {}
- name: SPF Records
  endpoint:
    path: /guides/spf-records
    method: GET
    data_selector: records
    params: {}
- name: generic_dns_configuration
  endpoint:
    path: /guides/generic-dns-configuration
    method: GET
    data_selector: records
    params: {}
- name: mx_records
  endpoint:
    path: /api/mx_records
    method: GET
    data_selector: records
- name: spf_records
  endpoint:
    path: /api/spf_records
    method: GET
    data_selector: records
- name: email_logs
  endpoint:
    path: /logs
    method: GET
    data_selector: logs
    params: {}
- name: mx_records
  endpoint:
    path: /guides/mx-spf-records
    method: GET
    data_selector: records
- name: spf_records
  endpoint:
    path: /guides/mx-spf-records
    method: GET
    data_selector: records
- name: MX Records
  endpoint:
    path: /guides/mx-spf-records
    method: GET
    data_selector: records
- name: SPF Records
  endpoint:
    path: /guides/mx-spf-records
    method: GET
    data_selector: records
- name: SPF_Record_Combination
  endpoint:
    path: /guides/combining-spf-records
    method: GET
    data_selector: records
    params: {}
- name: mail_route
  endpoint:
    path: /api/mail_route
    method: POST
    data_selector: mail_route
    params: {}
- name: routing_policy
  endpoint:
    path: /api/routing_policy
    method: POST
    data_selector: routing_policy
    params: {}
- name: MX Records
  endpoint:
    path: /api/mx
    method: POST
    data_selector: records
    params: {}
- name: SPF Records
  endpoint:
    path: /api/spf
    method: POST
    data_selector: records
    params: {}
- name: email_logs
  endpoint:
    path: /api/email_logs
    method: GET
    data_selector: logs
    params: {}
- name: error_codes
  endpoint:
    path: /api/error_codes
    method: GET
    data_selector: error_codes
    params: {}
- name: MX Records
  endpoint:
    path: /api/mx
    method: POST
    data_selector: records
    params: {}
- name: SPF Records
  endpoint:
    path: /api/spf
    method: POST
    data_selector: records
    params: {}
- name: mx_records
  endpoint:
    path: /guides/mx-spf-records
    method: GET
    data_selector: records
- name: spf_record
  endpoint:
    path: /guides/mx-spf-records
    method: GET
    data_selector: records
- name: DNS Records
  endpoint:
    path: /api/dns
    method: GET
    data_selector: records
    params: {}
- name: dkim_records
  endpoint:
    path: /guides/create-smtp-credentials
    method: GET
    data_selector: dkim_records
- name: dmarc_records
  endpoint:
    path: /guides/create-smtp-credentials
    method: GET
    data_selector: dmarc_records
- name: smtp_credentials
  endpoint:
    path: /create-smtp-credentials
    method: POST
    data_selector: credentials
    params: {}
- name: Email
  endpoint:
    path: /api/v1/send
    method: POST
    data_selector: response
    params: {}
- name: smtp_credentials
  endpoint:
    path: /guides/create-smtp-credentials
    method: POST
- name: smtp_incompatibility
  endpoint:
    path: /guides/microsoft-outlook-smtp
    method: GET
    data_selector: content
- name: smtp_server
  endpoint:
    path: /smtp
    method: POST
    data_selector: smtp_settings
    params: {}
- name: mx_records
  endpoint:
    path: /api/mx-records
    method: GET
    data_selector: records
- name: limits
  endpoint:
    path: /api/limits
    method: GET
    data_selector: limits
    params: {}
- name: download_email
  endpoint:
    path: /v3/emails/UNIQUEID.eml
    method: GET
- name: logs
  endpoint:
    path: /api/#logs
    method: GET
- name: Email Forwarding
  endpoint:
    path: /api
    method: POST
- name: domain
  endpoint:
    path: /api/domains
    method: GET
    data_selector: domains
- name: alias
  endpoint:
    path: /api/aliases
    method: GET
    data_selector: aliases
notes:
- SMTP is a premium feature.
- When setting up SMTP for the first time, two new DKIM CNAME entries and a new DMARC
  TXT entry in DNS settings are required.
- ImprovMX is fully compliant with GDPR
- We do not read your emails and never will.
- We have a 99.99% SLA over the past 90 days.
- DNS changes can take up to 24-48 hours to propagate, though usually much faster.
- DNS changes can take up to 24-48 hours to propagate.
- Advanced options available for aliases include Catch-all / Wildcard Aliases, Null
  Destination, Multiple Destinations, Webhook Destinations, and Regex Aliases.
- Rules Routing is a paid-account feature.
- ImprovMX isn't suited for mass-mailing list use cases. This feature has a default
  limit of 5 maximum recipients.
- Webhooks are a premium feature.
- All ImprovMX hosted accounts run over a secure connection using the HTTPS protocol.
- 'API Security: ImprovMX REST API is restricted to accredited users-based API tokens,
  which you can request from your dashboard.'
- We never ever log the content of the emails we forward.
- We delete debugging data points after 7 days.
- A catch-all alias in ImprovMX receives all emails sent to your domain, even if the
  address doesn’t exist.
- Setting an alias destination to null in ImprovMX lets you silently drop emails without
  forwarding or bounce-backs.
- Emails to that alias are accepted but then discarded, with no delivery or error.
- Priority Delivery is a feature included with all premium ImprovMX subscriptions.
- Occasionally, new email activity such as forwarding can be treated with suspicion
  by providers and it can take a few messages until the algorithm recognises the new
  forwarding behaviour.
- Emails may be refused if the sender's domain or IP is listed on Spamhaus or SpamCop.
- DNS changes can take up to 24-48 hours to propagate
- Users need to create individual Google accounts that won’t be tied to their organization.
- You need to have two factor authentication enabled for your Google account.
- Google's 'Send mail as' is an old, unsupported feature. It may stop working in the
  future, and we offer limited support for it.
- This feature relies on an older Google functionality that could be discontinued
  at any time.
- It also lacks proper email authentication (SPF, DKIM, and DMARC), which many mail
  providers now require.
- As a result, some providers - such as Yahoo - may reject messages sent this way
  entirely, while others may send them to spam.
- Ensure your domain’s MX records are pointing to Google with a higher priority than
  ImprovMX.
- It's recommended to disable Strict MX Verification.
- Ensure your domain’s MX records are pointing to Microsoft with a higher priority
  than ImprovMX.
- It's recommended to disable the Strict MX Verification feature.
- Access Logs show when account modifications were made, what they were, and which
  IP address performed them.
- The Access Logs are stored for 12 months, after which they are automatically deleted.
- All data related to emails are kept for 7 days and then automatically deleted.
- Strict MX Verification setting is enabled by default to ensure correct prioritization
  of MX records.
- SMTP credentials allow your email clients to authenticate with our mail servers
  and send messages on your behalf.
- DMARC/DKIM is only applicable to users who are utilizing ImprovMX SMTP.
- ImprovMX SMTP is a feature available to premium and business-tier users.
- 2-Step Verification enabled on Gmail required for use with IMAP
- Use a Gmail App Password for SMTP
- 2-Step Verification is enabled on your Gmail account.
- A Gmail App Password is created for use with IMAP.
- Requires setup of SMTP credentials in ImprovMX dashboard
- Microsoft Outlook does not work properly with ImprovMX’s SMTP service.
- You must be a premium or business member to use ImprovMX SMTP.
- POP3 downloads emails and then often deletes them from the server.
- POP3 is ideal for users who prefer to access their emails from a single device.
- ImprovMX set rate limits on API methods. These limits are set across the entire
  account.
- We forward emails with attachments for up to 10Mb per email and up to 50Mb for our
  premium members.
- Supports a broad set of ciphers and protocols, which range from SSLv3 to TLSv1.3
- ImprovMX has limitations on certain free top-level-domains associated with abuse
  and spam.
- Our spam protection measures run system-wide and are not manipulatable on a per-domain
  or per-account basis.
- The spam filter can't be adjusted on a per-account basis.
- ImprovMX employs a basic layer of spam protection using Spam Assassin.
- ImprovMX SMTP is not designed for bulk mailing or creating mailing lists.
- ImprovMX doesn't support having multiple services' MX records set for a single domain
  at one time.
- Mail often ignores priority which subsequently causes email drops and delivery failures
  with our service.
- We support ARC by signing emails that are forwarded through our service.
- We do not validate emails that arrive with an existing ARC signature.
- SRS helps fix SPF for forwarded emails, and our custom SRS implementation is one
  of the reasons your messages arrive where they’re supposed to.
- Requires setting logging levels to 'Highest log data' to download rejected emails.
- Emails are kept in the logs for 7 days.
- 'Occasionally, some emails may hard-bounce with the following error: Line too long
  (see RFC5321 4.5.3.1.6) - ImprovMX'
- The 'Too much mail data' error is triggered when an email's size surpasses the maximum
  limit allowed by your current subscription tier.
- 'Free Tier: The maximum email size is 10MB.'
- 'Premium / Enterprise Tiers: The maximum email size is increased to 50MB.'
- ImprovMX doesn't host mail, it only forwards and sends it.
- Requires setup of connected app in ImprovMX
- When utilizing ImprovMX SMTP, we require that DMARC / DKIM authentication is active
  on the domain.
- Common causes for emails landing in spam include misconfigured DNS records, improper
  alias setup, and email content issues.
- DNS additions and alterations go through a propagation period.
- Utilizing external MX services in tandem with ImprovMX on a single domain is not
  supported.
- Users cannot redirect emails to the same domain during account signup.
- These hosts are inbound MX servers used to receive and forward your mail, not to
  send mail outward.
- If you test your email that way and haven’t received the email back, this is normal.
- We never ever log your communications.
errors:
- '200: Success'
- '400: Bad Request'
- '401: Authentication required'
- '403: Forbidden'
- '500: Server error'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'Line too long: error occurred due to exceeding allowed line length'
- 'Too Much Mail Data: error occurred due to excessive mail data'
- '4xx: Client errors, retry attempts will be made'
- '5xx: Server errors, retry attempts will be made'
- '5.9.0: Loop detected: Email is sent and forwarded from/to improvmx.com. We block
  these messages in order to avoid loops'
- '5.9.1: Bounces sents from ImprovMX are not really sent and blocked here.'
- '5.9.2: The domain was not found.'
- '5.9.3: Our database returned invalid pieces of information about the requested
  recipient’s domain'
- '5.9.4: Our anti-spam check failed. We need the sender to retry sending.'
- '5.9.5: Unable to correctly read the forwarding recipient (where to forward the
  email to)'
- 571 Your IP is blacklisted on Spamhaus. To best protect our users from spam, we
  will ignore all incoming emails from you until the matter is resolved.
- 571 Your IP is blacklisted on SpamCop. To best protect our users from spam, we will
  ignore all incoming emails from you until the matter is resolved.
- 571 The IP from the domain "example.com" is listed on Spamhaus. To best protect
  our users from spam, the message has been blocked.
- 571 The IP from the domain "example.com" is listed on SpamCop. To best protect our
  users from spam, the message has been blocked.
- 5.1.9 Domain <domain> is not configured to send emails
- 'Can''t connect to account: Check your SMTP credentials'
- 'Line too long: Reduce the size of the message'
- 'Too Much Mail Data: Simplify your request'
- 'Line too long: Reduce the length of your input.'
- 'Too Much Mail Data: Split your data into smaller chunks.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Some file types are forbidden.
- 'Line too long: Check the length of the email data being sent.'
- 'Too Much Mail Data: Reduce the size of the email data.'
- 'Line too long: Ensure email and headers are correctly formatted'
- 'Too much mail data: Email size exceeds the limit.'
- '401 Unauthorized: Recheck API key or token expiration'
- Check if your mail is passing DKIM and SPF.
- Run your domain and origin IP address through common block lists.
- 'SPF validation failure: domain has multiple SPF records set.'
- SPF record is set as an SPF-type record, which is no longer supported.
auth_info:
  mentioned_objects: []
client:
  base_url: http://app.improvmx.com
  headers:
    Accept: application/json
source_metadata: null
