resources:
- name: credential_revocation_status
  endpoint:
    path: /api-reference/latest/tag/JSON-credentials-management#operation/getWebSemanticCredentialRevocationStatusV2
    method: GET
- name: revocation_list
  endpoint:
    path: /api-reference/latest/tag/JSON-credentials-management#operation/retrieveWebSemanticCredentialRevocationListV2
    method: GET
- name: create_revocation_message
  endpoint:
    path: /api-reference/latest/tag/JSON-credentials-management#operation/createWebSemanticCredentialRevNotificationV2
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: create_ecosystem
  endpoint:
    path: /api-reference/latest/tag/Ecosystems#operation/createEcosystem
    method: POST
- name: create_participant
  endpoint:
    path: /api-reference/latest/tag/Participants#operation/createEcosystemParticipant
    method: POST
- name: configure_credential_types
  endpoint:
    path: /api-reference/latest/tag/Credential-types#operation/createEcosystemCredential
    method: POST
- name: create_issuer_assignment
  endpoint:
    path: /api-reference/latest/tag/Issuer-assignment#operation/createEcosystemIssuerPolicy
    method: POST
- name: create_verifier_assignment
  endpoint:
    path: /api-reference/latest/tag/Verifier-assignment#operation/createEcosystemVerifierPolicy
    method: POST
- name: retrieve_policy
  endpoint:
    path: /api-reference/latest/tag/Policy#operation/getEcosystemPolicy
    method: GET
- name: VICAL metadata
  endpoint:
    path: /vical/metadata
    method: GET
    data_selector: records
- name: VICAL records
  endpoint:
    path: /vical/records
    method: GET
    data_selector: records
- name: DTS root CA
  endpoint:
    path: /api-reference/latest/tag/DTS-root-CA-certificates#operation/createDtsCaCertificate
    method: POST
- name: VICAL Signer
  endpoint:
    path: /api-reference/latest/tag/VICAL-signers#operation/createVicalSigner
    method: POST
- name: custom_domain_configuration
  endpoint:
    path: /guides/configure-custom-domain#create-custom-domain-configuration
    method: POST
    data_selector: configuration
    params: {}
- name: verify_domain_ownership
  endpoint:
    path: /api-reference/latest/tag/Custom-Domain#operation/verifyCustomDomain
    method: POST
    data_selector: verification
    params: {}
- name: credential
  endpoint:
    path: /credentials
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /api-reference/latest/tag/Analytics#operation/getEvents
    method: GET
    data_selector: events
- name: create_inbox
  endpoint:
    path: /api-reference/latest/tag/Messaging#operation/createInbox
    method: POST
- name: sign_message
  endpoint:
    path: /api-reference/latest/tag/Messaging#operation/signMessage
    method: POST
- name: verify_message
  endpoint:
    path: /api-reference/latest/tag/Messaging#operation/verifyJws
    method: POST
- name: encrypt_message
  endpoint:
    path: /api-reference/latest/tag/Messaging#operation/encryptMessage
    method: POST
- name: decrypt_message
  endpoint:
    path: /api-reference/latest/tag/Messaging#operation/decryptMessage
    method: POST
- name: send_message
  endpoint:
    path: /api-reference/latest/tag/Messaging#operation/sendMessage
    method: POST
- name: register_inbox_did
  endpoint:
    path: /api-reference/latest/tag/Inboxes#operation/registerInboxDid
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: credential
  endpoint:
    path: /v1/credential
    method: GET
    data_selector: data
- name: verifier
  endpoint:
    path: /v1/verifier
    method: POST
    data_selector: verificationResult
- name: status_list_distribution
  endpoint:
    path: /v2/credentials/mobile/status-lists/distribution
    method: GET
    data_selector: status_lists
- name: VICAL metadata
  endpoint:
    path: /vical/metadata
    method: GET
    data_selector: records
    params: {}
- name: VICAL records
  endpoint:
    path: /vical/records
    method: GET
    data_selector: records
    params: {}
- name: CWT credential
  endpoint:
    path: /api-reference/latest/tag/CWT-credentials-issuance#operation/sign-compact-credential
    method: POST
    data_selector: id
    params: {}
- name: did_key
  endpoint:
    path: /api-reference/latest/tag/DIDs#operation/createDid
    method: POST
    data_selector: records
    params: {}
- name: did_web
  endpoint:
    path: /api-reference/latest/tag/DIDs#operation/createDid
    method: POST
    data_selector: records
    params: {}
- name: credential
  endpoint:
    path: /credentials
    method: GET
    data_selector: credential
    params: {}
- name: credential_status
  endpoint:
    path: /v2/revocation-lists/{revocationListId}
    method: GET
    data_selector: credentialStatus
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: didKey
  endpoint:
    path: /api/did/key
    method: POST
    data_selector: data
    params: {}
- name: didWeb
  endpoint:
    path: /api/did/web
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: credentials
  endpoint:
    path: /v2/credentials/mobile/iacas
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: ecosystem
  endpoint:
    path: /v1/ecosystems
    method: POST
    data_selector: id
    params: {}
- name: create_participant
  endpoint:
    path: /v1/ecosystems/{ecosystemId}/participants
    method: POST
    data_selector: id
    params: {}
- name: participant
  endpoint:
    path: /create-participants
    method: POST
- name: credential_type
  endpoint:
    path: /v1/ecosystems/{ecosystemId}/credentials
    method: POST
    data_selector: id
    params: {}
- name: verifier_credentials
  endpoint:
    path: /v1/ecosystems/{ecosystemId}/participants/{participantId}/verifier/credentials
    method: POST
    data_selector: id
    params: {}
- name: policy
  endpoint:
    path: /v1/ecosystems/{ecosystemId}/policies
    method: POST
- name: credential
  endpoint:
    path: /services/data/vXX.X/sobjects/Credential
    method: GET
    data_selector: records
- name: policy
  endpoint:
    path: /v1/ecosystems/{ecosystemId}/policies/public/latest
    method: GET
- name: create_vical
  endpoint:
    path: /v1/ecosystems/{ecosystemId}/vicals
    method: POST
    data_selector: vicalIssueID
    params: {}
- name: credential
  endpoint:
    path: /services/data/vXX.X/sobjects/Credential
    method: GET
    data_selector: records
- name: latest_vical
  endpoint:
    path: /v1/ecosystems/{ecosystemId}/vicals/public/latest
    method: GET
    data_selector: cbor
- name: specific_vical
  endpoint:
    path: /v1/ecosystems/{ecosystemId}/vicals/public/{vicalIssueId}
    method: GET
    data_selector: cbor
- name: create_unmanaged_dts_root_ca
  endpoint:
    path: /v1/ecosystems/certificates/ca
    method: POST
    data_selector: null
    params: {}
- name: create_vical_signer
  endpoint:
    path: /v1/ecosystems/certificates/vical-signers
    method: POST
    data_selector: null
    params: {}
- name: update_vical_signer
  endpoint:
    path: /v1/ecosystems/certificates/vical-signers/{vicalSignerId}
    method: PUT
    data_selector: null
    params: {}
- name: update_dts_root_ca
  endpoint:
    path: /v1/ecosystems/certificates/ca/{dtsCaCertificateId}
    method: PUT
    data_selector: null
    params: {}
- name: create_vical
  endpoint:
    path: /api-reference/latest/tag/VICAL#operation/createVical
    method: POST
    data_selector: null
    params: {}
- name: sign_compact_credential
  endpoint:
    path: /v2/credentials/compact/sign
    method: POST
    data_selector: payload
- name: sign_compact_semantic_credential
  endpoint:
    path: /v2/credentials/compact-semantic/sign
    method: POST
    data_selector: payload
- name: sign_web_semantic_credential
  endpoint:
    path: /v2/credentials/web-semantic/sign
    method: POST
    data_selector: credential
    params: {}
- name: encrypt_credential
  endpoint:
    path: /v1/messaging/encrypt
    method: POST
    data_selector: jwe
    params: {}
- name: send_message
  endpoint:
    path: /v1/messaging/send
    method: POST
    data_selector: response
    params: {}
- name: generate_credential_offer
  endpoint:
    path: /v1/openid/offers
    method: POST
- name: send_encrypted_offer
  endpoint:
    path: /v1/messaging/send
    method: POST
- name: encrypt_offer
  endpoint:
    path: /v1/messaging/encrypt
    method: POST
- name: authentication_providers
  endpoint:
    path: /v1/users/authentication-providers
    method: POST
    data_selector: response
    params: {}
- name: mDocs_credentials_configuration
  endpoint:
    path: /v2/credentials/mobile/configurations
    method: POST
    data_selector: response
    params: {}
- name: credential_offers
  endpoint:
    path: /v1/openid/offers
    method: POST
    data_selector: response
    params: {}
- name: claims_source
  endpoint:
    path: /oid4vci/claims-source
    method: GET
- name: claim_source
  endpoint:
    path: /v1/claim-sources
    method: POST
    data_selector: id
    params: {}
- name: mDoc_credentials_configuration
  endpoint:
    path: /v2/credentials/mobile/configurations
    method: POST
    data_selector: id
    params: {}
- name: credential_offer
  endpoint:
    path: /v1/openid/offers
    method: POST
    data_selector: uri
    params: {}
- name: interaction_hook
  endpoint:
    path: /v1/openid/configuration
    method: PUT
    data_selector: interactionHook
    params: {}
- name: myclaims
  endpoint:
    path: /myclaims
    method: GET
    data_selector: user
    params:
      email: john@example.com
      userType: student
      credentialProfile: web-semantic
- name: create_a_new_JSON_credentials_configuration
  endpoint:
    path: /v2/credentials/web-semantic/configurations
    method: POST
    data_selector: id
- name: mobile_credential_configuration
  endpoint:
    path: /v2/credentials/mobile/configurations
    method: POST
    data_selector: id
- name: compact_credential_configuration
  endpoint:
    path: /v2/credentials/compact/configurations
    method: POST
    data_selector: id
- name: semantic_compact_credential_configuration
  endpoint:
    path: /v2/credentials/compact-semantic/configurations
    method: POST
    data_selector: id
- name: status_list_configuration
  endpoint:
    path: /v2/credentials/mobile/status-lists/configurations
    method: POST
    data_selector: status
    params: {}
- name: revocation_status
  endpoint:
    path: /v2/credentials/compact/{id}/revocation-status
    method: GET
    data_selector: isRevoked
    params: {}
- name: revocation_status_semantic
  endpoint:
    path: /v2/credentials/compact-semantic/{id}/revocation-status
    method: POST
    data_selector: isRevoked
    params: {}
- name: revocation_status
  endpoint:
    path: /v2/credentials/web-semantic/{id}/revocation-status
    method: GET
    data_selector: isRevoked
- name: create_revocation_message
  endpoint:
    path: /v2/credentials/web-semantic/{id}/revocation-status/notification
    method: POST
    data_selector: message
    params: {}
- name: encrypt_message
  endpoint:
    path: /v1/messaging/encrypt
    method: POST
    data_selector: jwe
    params: {}
- name: send_message
  endpoint:
    path: /v1/messaging/send
    method: POST
    data_selector: response
    params: {}
- name: all_credentials
  endpoint:
    path: /web-semantic
    method: GET
    data_selector: records
    params: {}
- name: credentials_by_tag
  endpoint:
    path: /web-semantic
    method: GET
    data_selector: records
    params:
      tag: external-identifier
- name: credentials_by_type
  endpoint:
    path: /web-semantic
    method: GET
    data_selector: records
    params:
      type: Course
- name: credential_offer
  endpoint:
    path: /credentials/offers
    method: GET
    data_selector: offers
- name: retrieve_credentials
  endpoint:
    path: /credentials/retrieve
    method: POST
    data_selector: results
- name: credential
  endpoint:
    path: /api/credentials
    method: GET
    data_selector: data
    params: {}
- name: unmanaged Verifier root CA
  endpoint:
    path: /v2/presentations/certificates/ca
    method: POST
    data_selector: null
    params: {}
- name: Verification Request Signer
  endpoint:
    path: /v2/presentations/certificates/verifier-signers
    method: POST
    data_selector: null
    params: {}
- name: update Verification Request Signer
  endpoint:
    path: /v2/presentations/certificates/verifier-signers/{verifierSignerId}
    method: PUT
    data_selector: null
    params: {}
- name: update unmanaged Verifier root CA
  endpoint:
    path: /v2/presentations/certificates/ca/{certificateId}
    method: PUT
    data_selector: null
    params: {}
- name: claims
  endpoint:
    params:
      email:
        mapFrom: claims.email
- name: verifier_application
  endpoint:
    path: /verifier/applications
    method: POST
    data_selector: application
    params: {}
- name: trusted_issuers
  endpoint:
    path: /verifier/trusted-issuers
    method: POST
    data_selector: issuer
    params: {}
- name: verification_results
  endpoint:
    path: /v2/presentations/sessions/{id}/result
    method: GET
    data_selector: results
- name: create_tenant
  endpoint:
    path: /v1/tenants
    method: POST
    data_selector: id
    params: {}
- name: create_tenant_client
  endpoint:
    path: /v1/tenants/{tenantId}/clients
    method: POST
    data_selector: clientId
    params: {}
- name: create_tenant
  endpoint:
    path: /v1/tenants
    method: POST
    data_selector: id
    params: {}
- name: custom_domain_configuration
  endpoint:
    path: /v1/config/domain
    method: POST
    data_selector: name
    params: {}
- name: verify_custom_domain
  endpoint:
    path: /v1/config/domain/verify
    method: POST
    data_selector: ''
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: data
    params:
      requestIds: 0QdK3jkDSPbOu1Sx9K2lM9
- name: webhook
  endpoint:
    path: /v1/webhooks
    method: POST
    data_selector: events
    params: {}
- name: webhook_jwks
  endpoint:
    path: /v1/webhooks/jwks
    method: GET
    data_selector: keys
    params: {}
- name: tenants
  endpoint:
    path: /v1/tenants
    method: GET
    data_selector: data
    params: {}
- name: clients
  endpoint:
    path: /v1/tenants/{tenantId}/clients
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: delete_tenant_membership
  endpoint:
    path: /delete/v1/tenants/{tenantId}/memberships/{userId}
    method: DELETE
    data_selector: null
    params: {}
- name: retrieve_tenant_members
  endpoint:
    path: /retrieve/v1/tenants/{tenantId}/memberships
    method: GET
    data_selector: null
    params: {}
- name: retrieve_tenant_member
  endpoint:
    path: /retrieve/v1/tenants/{tenantId}/memberships/{userId}
    method: GET
    data_selector: null
    params: {}
- name: update_tenant_membership
  endpoint:
    path: /update/v1/tenants/{tenantId}/memberships/{userId}
    method: PUT
    data_selector: null
    params: {}
- name: invite_tenant_member
  endpoint:
    path: /invite/v1/tenants/{tenantId}/memberships
    method: POST
    data_selector: null
    params: {}
- name: credential
  endpoint:
    path: /credentials
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: request
  endpoint:
    path: /request
    method: POST
    data_selector: challenge
- name: results
  endpoint:
    path: /results/{id}
    method: GET
    data_selector: results
- name: presentation_session_result
  endpoint:
    path: /v2/presentations/sessions/{id}/result
    method: GET
    data_selector: results
    params: {}
- name: verifier_application
  endpoint:
    path: /v2/presentations/applications
    method: POST
    data_selector: id
    params: {}
- name: wallet_provider
  endpoint:
    path: /v2/presentations/wallet-providers
    method: POST
    data_selector: id
    params: {}
- name: trusted_issuer
  endpoint:
    path: /v2/credentials/mobile/trusted-issuers
    method: POST
    data_selector: id
    params: {}
- name: credential revocation status
  endpoint:
    path: /api-reference/latest/tag/JSON-credentials-management#operation/getWebSemanticCredentialRevocationStatusV2
    method: get
- name: revocation list
  endpoint:
    path: /api-reference/latest/tag/JSON-credentials-management#operation/retrieveWebSemanticCredentialRevocationListV2
    method: get
- name: create revocation message
  endpoint:
    path: /api-reference/latest/tag/JSON-credentials-management#operation/createWebSemanticCredentialRevNotificationV2
    method: post
- name: credential revocation status
  endpoint:
    path: /api-reference/latest/tag/JSON-credentials-management#operation/getWebSemanticCredentialRevocationStatusV2
    method: get
- name: revocation list
  endpoint:
    path: /api-reference/latest/tag/JSON-credentials-management#operation/retrieveWebSemanticCredentialRevocationListV2
    method: get
- name: revocation message payload
  endpoint:
    path: /api-reference/latest/tag/JSON-credentials-management#operation/createWebSemanticCredentialRevNotificationV2
    method: post
notes:
- Bearer token must be used as an authorization header for all requests to protected
  endpoints.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- A collection of sample apps, API tools and templates and branding tools that you
  can use to get started with MATTR VII quickly and easily.
- Some objects like Contact may return nulls in deeply nested fields
- Requires setup of connected app in api
- Relying parties can download the VICAL directly from the provider’s website or retrieve
  it via an API.
- MATTR VII supports both workflows, allowing you to choose the one that best fits
  your use case.
- The mDocs Holder SDKs are available for React Native, iOS, and Android.
- Some objects may return nulls in deeply nested fields
- Credential verification requires in-person steps
- CWT and Semantic CWT credentials are verified via Direct verification.
- Requires setup of connected app in MATTR
- MATTR VII provisions and manages all required certificates
- MATTR VII provides tools to assist verifiers in managing their own certificates
- MATTR VII automatically generates and signs certificates required for signing verification
  requests
- MATTR VII integrates external certificates provided by the verifier into verification
  workflows
- MATTR VII handles all certificate lifecycle management tasks
- Ensure to handle various credential issuance methods
- The Self Service Portal is available to selected cloud environments.
- Partial support or not available for users using MATTR Portal; users or clients
  using MATTR VII API are not affected.
- The Management APIs use machine-to-machine authentication through its own credentials,
  which are different from the client credentials used to access specific MATTR VII
  tenants.
- Custom domains don’t change how you interact with your tenant for administration
  functions.
- You must have control over this web domain DNS records.
- Some endpoints may return nulls in deeply nested fields
- Events are generated in scenarios like START, SUCCESS, and FAIL.
- Sanitized versions of events can be configured per endpoints.
- OAuth2 authentication is required for access to the API
- MATTR VII does not guarantee the delivery of events in the exact order that they
  are generated or that no duplicate events will be received by the Webhook endpoint.
- By default, the Webhook has a response timeout of three seconds.
- Uses OAuth2 with authorization code flow — requires setup of connected app in MATTR
- mDocs adhere to a very specific and well-defined suite of data structures, procedures
  and cryptographic algorithms defined in the ISO 18013-5 standard.
- mDocs can include a portrait picture of their holder, enabling the verifier to compare
  it with the person presenting them in person.
- mDocs use COSE to sign CBOR data structures, verifying the validity of the signed
  credential by authenticating both the issuer and the device.
- mDocs are high assurance identity credentials.
- Requires setup of authorization code flow in the OAuth2 provider.
- The mDoc is constructed in a way that the verifier only needs the IACA’s certificate
  of the issuer to verify a presented credential.
- OAuth2 is required for authentication.
- MATTR VII provides tools to assist issuers in managing their own certificates
- Issuer must ensure their certificates meet MATTR’s validation requirements
- MATTR VII will validate the uploaded certificate to ensure it is signed by the expected
  IACA
- VICAL can be consumed via an API endpoint exposed by the provider.
- Currently our APIs only support the ECDSA with P-256 (ES256) algorithm for issuer
  and device authentication.
- CWT credentials are bearer credentials, where all the assurance is fully self-contained
  within the QR code, with no need for complex dynamic presentation capability from
  the holder.
- CWT credentials reduce the digital divide by supporting offline or paper-based contexts
  alongside digital-first channels.
- The choice between CWT credentials and Semantic CWT credentials comes down to how
  compact you need the credential to be versus how openly you intend to share and
  exchange credentials across different domains and jurisdictions.
- CWT credentials are represented as QR codes, signed using CBOR Web Token (CWT) format.
- Revocation lists are automatically created and managed when you use your MATTR VII
  tenant to issue revocable credentials.
- The issuer cannot tell what credential they are checking the status for, maintaining
  holder's privacy.
- MATTR VII automatically registers created DIDs when applicable.
- DIDs must be publicly discoverable by verifiers.
- We currently only offer support for Latin-based languages, however other scripts
  (such as Cyrillic, Hebrew, Arabic) may still work.
- Credentials by nature tend to hold Personally Identifying Information (PII). Before
  storing credential data, familiarize yourself with compliance to any PII restrictions
  that may apply to your use-case.
- MATTR VII does not support the required attribute in JSON-LD, so it cannot enforce
  the presence of specific claims during credential issuance or verification.
- OAuth2 authentication is required for accessing API.
- DIDs offer a different trust model to centralized identifiers.
- Last updated on July 24, 2025
- OAuth2 is required for access.
- Data Processing Terms take priority over the MATTR Customer Agreement in case of
  conflict.
- Data sub-processors may be used to process Customer Data.
- This MATTR Pi SDK Trial Licence Agreement applies to use of all or any part of any
  software development kits specified in Annex A.
- Uses OAuth2 with authorization code flow
- You do not need your own AWS account to use MATTR’s provided AWS credentials.
- Participants must be created within a specific ecosystem
- Only active participants are included in the ecosystem policy
- Uses OAuth2 with refresh token — requires setup of connected app in MATTR
- Relying parties can retrieve Ecosystem policies to check permissions.
- Direct issuance of CWT credentials.
- JSON credentials are based on the W3C Verifiable Credential data model.
- Must use DIDs with a ed25519 or bls12381g2 key type.
- Some operations may have specific requirements or limitations
- MATTR is not affiliated with any of the service providers mentioned in this guide
  and cannot vouch for their offerings.
- Make sure the QR code is large enough in size to be resolvable by a phone camera;
  200px square is generally sufficient.
- Make sure the mobile device is connected to the internet
- Make sure you have the GO Hold example app setup with your device biometric authentication
  method.
- Make sure the QR is large enough to be read by your phone; try creating a larger
  QR Code (e.g., 300 x 300 px).
- Uses OAuth2 with client credentials for obtaining access token
- Make sure to replace placeholders in the URLs with actual values
- Integration into OID4VCI workflow
- Uses OAuth2 with authorization code — requires setup of connected app in MATTR
- Interaction hook URL must use the HTTPS protocol and not include query parameters.
- Session duration can be defined in seconds.
- MATTR VII connects to claims sources using IPv4 only.
- Credential expiry is determined by the expiresIn value, but it can never exceed
  the validity period of the IACA used as the root certificate when signing the credential.
- Credential revocation guides available
- Status change notification is not currently available for mDocs.
- Uses OAuth2 with authorization code — requires setup of connected app in api
- In production implementations, the transaction code is generated by the issuer and
  shared with the intended holder by a separate secure channel.
- In production implementations this must be replaced by a proper Authentication provider
  to comply with the ISO/IEC 18013-5:2021 standard and the OID4VCI specification.
- Requires user consent for credential retrieval.
- The verification workflow described is based on ISO/IEC 18013-7:2025 and OID4VP.
- Uses the mDocs Holder SDK to present a claimed mDoc via a proximity presentation
  workflow as per ISO/IEC 18013-5:2021.
- Ensure to set up OAuth2 correctly before proceeding.
- The proximity verification workflow is based on ISO/IEC 18013-5:2021 standard.
- MATTR VII does not manage or monitor these certificates on the issuer’s behalf.
- Requires setup of Auth0 application for user authentication
- The IACA certificate must be activated before issuing credentials
- In Production environments, it is strongly recommended to use a more secure API
  key.
- Uses OAuth2 for authentication
- The Forwarding URL from ngrok is needed for testing
- Ensure verification results are not returned directly to the web application’s front
  channel.
- Uses OAuth2 with refresh token — requires setup of connected app in management API
- The returned access_token must be used as a bearer token for all subsequent requests
  to the management API.
- Your clientSecret is only available in this response and cannot be retrieved later.
- Use the access token as a bearer token in the header of all subsequent requests
  to protected resources.
- All parameters support comma separated lists.
- If no parameters are provided, the most recent 100 events are returned by default.
- Webhook events may not be delivered in order or without duplicates.
- Server response timeout is three seconds.
- Uses machine-to-machine authentication with JWT bearer tokens.
- MATTR VII API includes all events generated by the API.
- MATTR Management API defines a set of capabilities beyond the scope of a single
  tenant.
- Support for externally managed Verifier and DTS root CA certificates now available
  in MATTR VII
- Management API Domain Migration requires migration to the new domain before 1 March
  2026
- HSM usage incurs additional costs and requires a commercial agreement.
- The use of the DCC extension during a trial of the MATTR VII platform may be subject
  to change.
- The creation of ION DIDs during a trial of the MATTR VII platform may be subject
  to change.
- Authorization requests for online presentation workflows must now include the client_id
  as a subject alternative name record.
- The minimum deployment target is now set to iOS 13.
- The SDK no longer supports credentials with the BbsBlsSignature2020 proof type.
- Improved data availability while maintaining platform security guarantees.
- Support for various authentication flows.
- Dynamic trusted issuer information is now dynamically updatable
- The interaction should look the same, but behind the scenes it will actually be
  handled by your backend.
- resultAvailableInFrontChannel set to false to prevent direct return of verification
  results
- Always validate session_id and challenge for security
- Uses ngrok for testing — ensure tunnel is up before making requests.
- The returned bearer token will only enable access to endpoints as per your client's
  defined role.
- Access to the API is granted by our authorization provider.
- MATTR is built and operated as a privacy-first company.
- We carefully comply with all privacy and data protection laws applicable to our
  business.
- We do not guarantee the accuracy, currency or completeness of the information provided.
- You must not use our Website or copy, reproduce, modify or transmit its contents
  without our prior written permission.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '413: Larger files are rejected'
- '401 Unauthorized: Check client credentials or token expiration'
- '400 Bad Request: Invalid request parameters.'
- '401 Unauthorized: Ensure valid access token.'
- '404 Not Found: Check endpoint path.'
- '401 Unauthorized: Recheck Auth0 credentials or token expiration'
- 'Identity assurance failed: Indicates user should not continue with the issuance
  journey.'
- 'INVALID_OFFER: Check if the credential offer is valid.'
- 'NETWORK_ERROR: Ensure you have a stable internet connection.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify your credentials.'
- '404 Not Found: Check the endpoint URL.'
- '400 Bad Request: The request was malformed or missing required parameters.'
- '401 Unauthorized: The client is not recognized by authorization server.'
- '403 Forbidden: The client is recognized by authorization server but is not allowed
  to access this resource.'
- '500 Internal Server Error: An unexpected error occurred.'
- 204 User removed from tenant
- 400 Bad Request. The request was malformed or missing required parameters.
- 401 Unauthorized. The client is not recognized by authorization server.
- 403 Forbidden. The client is recognized by authorization server but is not allowed
  to access this resource.
- 500 Internal Server Error. An unexpected error occurred.
- 'TrustedIssuerCertificateNotFound: When no matching trusted issuer certificate is
  found.'
- 'TrustedIssuerCertificateExpired: When the matching trusted issuer certificate has
  expired.'
- 'TrustedIssuerCertificateNotYetValid: When the matching trusted issuer certificate
  is not yet valid.'
- 'INVALID_CREDENTIAL: Check the provided credentials.'
- 'ACCESS_DENIED: Ensure you have the right permissions.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Authentication provider
  - DiscoveredCredentialOffer
  - MobileCredential
  - OAuth2
  - API key
  - bearerAuth
client:
  base_url: https://learn.mattr.global/api-reference/
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://learn.mattr.global/management-api-reference/
source_metadata: null
