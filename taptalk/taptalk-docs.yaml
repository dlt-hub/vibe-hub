resources:
- name: create_verification
  endpoint:
    path: /request-create-verification
    method: POST
    data_selector: payload
- name: create_whatsapp_verification
  endpoint:
    path: /api/v1/verification/create_whatsapp_verification
    method: POST
    data_selector: data
    params: {}
- name: create_whatsapp_verification
  endpoint:
    path: /api/v1/verification/create_whatsapp_verification
    method: POST
    data_selector: data
    params: {}
- name: Inbox
  endpoint:
    path: /api/v1/inbox
    method: GET
    data_selector: data
- name: User
  endpoint:
    path: /api/v1/user
    method: GET
    data_selector: data
- name: organization
  endpoint:
    path: /organization
    method: GET
- name: topics
  endpoint:
    path: /topics
    method: GET
- name: Organization
  endpoint:
    path: /onetalk/organization
    method: GET
- name: Topics
  endpoint:
    path: /onetalk/topics
    method: GET
- name: broadcast_message
  endpoint:
    path: /onetalk-omnichannel-documentation/getting-started/paid-proactive-chat#broadcast-message
    method: POST
- name: start_new_conversation
  endpoint:
    path: /onetalk-omnichannel-documentation/getting-started/paid-proactive-chat#start-new-conversation
    method: POST
- name: send_message_api
  endpoint:
    path: /onetalk-omnichannel-documentation/getting-started/paid-proactive-chat#send-message-api
    method: POST
- name: top_up_history
  endpoint:
    path: /organization/top_up_history
    method: GET
- name: balance_statement
  endpoint:
    path: /organization/balance_statement
    method: GET
- name: telegram_bot
  endpoint:
    path: /bot{{bot_token}}/sendMessage
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Instagram DM
  endpoint:
    path: /instagram/dm
    method: POST
- name: Instagram Comment
  endpoint:
    path: /instagram/comment
    method: POST
- name: WhatsApp SME Channel
  endpoint:
    path: /integration/whatsapp_sme
    method: POST
    data_selector: channel_created
    params: {}
- name: iOS Live Chat
  endpoint:
    path: /onetalk-omnichannel-documentation/onetalk-channel-integration/live-chat#setup-live-chat-for-ios
    method: POST
    data_selector: channel_details
- name: Android Live Chat
  endpoint:
    path: /onetalk-omnichannel-documentation/onetalk-channel-integration/live-chat#setup-live-chat-for-android
    method: POST
    data_selector: channel_details
- name: Web Live Chat
  endpoint:
    path: /onetalk-omnichannel-documentation/onetalk-channel-integration/live-chat#setup-live-chat-for-web
    method: POST
    data_selector: channel_details
- name: live_chat
  endpoint:
    path: /onetalk-channel-integration/live-chat
    method: GET
    data_selector: records
- name: Live Chat for iOS
  endpoint:
    path: /onetalk-omnichannel-documentation/onetalk-channel-integration/live-chat#setup-live-chat-for-ios
    method: GET
    data_selector: details
    params: {}
- name: Live Chat for Android
  endpoint:
    path: /onetalk-omnichannel-documentation/onetalk-channel-integration/live-chat#setup-live-chat-for-android
    method: GET
    data_selector: details
    params: {}
- name: Live Chat for Web
  endpoint:
    path: /onetalk-omnichannel-documentation/onetalk-channel-integration/live-chat#setup-live-chat-for-web
    method: GET
    data_selector: details
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Tokopedia Channel
  endpoint:
    path: /tokopedia/channel
    method: POST
    data_selector: channel
    params: {}
- name: Channel Profile
  endpoint:
    path: /api/channel/profile
    method: POST
    data_selector: data
    params: {}
- name: Entry Points
  endpoint:
    path: /api/entry/points
    method: POST
    data_selector: data
    params: {}
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: records
- name: user_contact
  endpoint:
    path: /user/contact
    method: GET
    data_selector: records
- name: tokopedia_channel
  endpoint:
    path: /integration/tokopedia
    method: POST
    data_selector: response
    params:
      shop_url: your_shop_url
      topic: assigned_topic
- name: messages
  endpoint:
    path: /inbox/messages
    method: GET
    data_selector: messages
- name: inbox
  endpoint:
    path: /onetalk/inbox
    method: GET
- name: user_contact
  endpoint:
    path: /onetalk/user/contact
    method: GET
- name: send_message_whatsapp
  endpoint:
    path: /api/integration/v1/inbox/send_message_whatsapp
    method: POST
    data_selector: data
    params: {}
- name: send_templated_message_whatsappba
  endpoint:
    path: /api/integration/v1/inbox/send_templated_message_whatsappba
    method: POST
    data_selector: data
    params: {}
- name: get_updated_case_list
  endpoint:
    path: /api/integration/v1/inbox/case/get_updated_list
    method: GET
    data_selector: data.cases
    params: {}
- name: update_case
  endpoint:
    path: /api/integration/v1/inbox/case/update
    method: POST
    data_selector: data
    params: {}
- name: send_message_whatsapp
  endpoint:
    path: /api/integration/v1/inbox/send_message_whatsapp
    method: POST
    data_selector: data
    params: {}
- name: send_templated_message_whatsappba
  endpoint:
    path: /api/integration/v1/inbox/send_templated_message_whatsappba
    method: POST
    data_selector: data
    params: {}
- name: get_updated_case_list
  endpoint:
    path: /api/integration/v1/inbox/case/get_updated_list
    method: GET
    data_selector: data.cases
    params: {}
- name: update_case
  endpoint:
    path: /api/integration/v1/inbox/case/update
    method: POST
    data_selector: data
    params: {}
- name: request_auth_ticket
  endpoint:
    path: /api/integration/v1/user/request_auth_ticket
    method: POST
    data_selector: data
- name: sync_user_contact
  endpoint:
    path: /sync-user-contact
    method: POST
- name: sync_contact
  endpoint:
    path: /api/integration/v1/user/sync_contact
    method: POST
    data_selector: data
- name: request_auth_ticket
  endpoint:
    path: /api/integration/v1/user/request_auth_ticket
    method: POST
    data_selector: data
    params: {}
- name: sync_contact
  endpoint:
    path: /api/integration/v1/user/sync_contact
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: chatbot
  endpoint:
    path: /api/chatbot
    method: POST
    data_selector: data
- name: channel
  endpoint:
    path: /api/channel
    method: GET
    data_selector: channels
- name: social_channel_button
  endpoint:
    path: /onetalk-omnichannel-documentation/social-channel-button
    method: GET
- name: Chatbot Details
  endpoint:
    path: /chatbot/details
    method: GET
- name: Chatbot Configs
  endpoint:
    path: /chatbot/configs
    method: GET
- name: chatbot
  endpoint:
    path: /api/v1/chatbot
    method: POST
    data_selector: data
    params: {}
- name: inbound_messages
  endpoint:
    path: /api/inbound_messages
    method: GET
    data_selector: messages
- name: webhooks
  endpoint:
    path: /api/webhooks
    method: GET
    data_selector: webhook_events
- name: chatbot
  endpoint:
    path: /chatbots
    method: POST
    data_selector: chatbot
    params: {}
- name: channel
  endpoint:
    path: /channels
    method: POST
    data_selector: channel
    params: {}
- name: chatbot_details
  endpoint:
    path: /chatbot/details
    method: GET
- name: chatbot_configs
  endpoint:
    path: /chatbot/configs
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: API Call
  endpoint:
    path: /qna/api
    method: POST
    data_selector: response
    params: {}
- name: integration_message_status
  endpoint:
    path: /integration/message/status
    method: POST
    data_selector: integrationMessageStatus
- name: case_resolved
  endpoint:
    path: /case/resolved
    method: POST
    data_selector: caseResolved
    params: {}
- name: integration_message_status
  endpoint:
    path: /integration/message/status
    method: POST
    data_selector: integrationMessageStatus
- name: case_resolved
  endpoint:
    path: /case/resolved
    method: POST
    data_selector: caseResolved
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: records
    params: {}
- name: user_contact
  endpoint:
    path: /api/v1/user_contact
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: pending_messages_queue
  endpoint:
    path: /pending_messages_queue
    method: GET
    data_selector: messages
    params: {}
- name: file_downloads
  endpoint:
    path: /file_downloads
    method: GET
    data_selector: downloads
    params: {}
- name: file_uploads
  endpoint:
    path: /file_uploads
    method: GET
    data_selector: uploads
    params: {}
- name: Event Listener
  endpoint:
    path: /event/listener
    method: GET
- name: TapUIChatProfileListener
  endpoint:
    path: /TapUIChatProfileListener
    method: GET
    data_selector: events
    params: {}
- name: TapUIMyAccountListener
  endpoint:
    path: /TapUIMyAccountListener
    method: GET
    data_selector: events
    params: {}
- name: TapUICustomKeyboardListener
  endpoint:
    path: /TapUICustomKeyboardListener
    method: GET
    data_selector: events
    params: {}
- name: TapCoreMessageListener
  endpoint:
    path: /TapCoreMessageListener
    method: GET
    data_selector: events
    params: {}
- name: TapCoreRoomListListener
  endpoint:
    path: /TapCoreRoomListListener
    method: GET
    data_selector: events
    params: {}
- name: TapCoreChatRoomListener
  endpoint:
    path: /TapCoreChatRoomListener
    method: GET
    data_selector: events
    params: {}
- name: TapCoreContactListener
  endpoint:
    path: /TapCoreContactListener
    method: GET
    data_selector: events
    params: {}
- name: TapListener
  endpoint:
    path: /event-listener/taplistener
    method: GET
- name: TapUIRoomListListener
  endpoint:
    path: /event-listener/tapuiroomlistlistener
    method: GET
- name: TapUIChatRoomListener
  endpoint:
    path: /event-listener/tapuichatroomlistener
    method: GET
- name: TapUIChatProfileListener
  endpoint:
    path: /event-listener/tapuichatprofilelistener
    method: GET
- name: TapUIMyAccountListener
  endpoint:
    path: /event-listener/tapuimyaccountlistener
    method: GET
- name: TapCustomKeyboardListener
  endpoint:
    path: /event-listener/tapcustomkeyboardlistener
    method: GET
- name: TapCoreMessageListener
  endpoint:
    path: /event-listener/tapcoremessagelistener
    method: GET
- name: TapCoreRoomListListener
  endpoint:
    path: /event-listener/tapcoreroomlistlistener
    method: GET
- name: TapCoreChatRoomListener
  endpoint:
    path: /event-listener/tapcorechatroomlistener
    method: GET
- name: TapCoreContactListener
  endpoint:
    path: /event-listener/tapcorecontactlistener
    method: GET
- name: active_user
  endpoint:
    path: /v1/active_user
    method: GET
    data_selector: data
    params: {}
- name: active_user
  endpoint:
    path: /getTaptalkActiveUser
    method: GET
    data_selector: user
    params: {}
- name: refresh_active_user
  endpoint:
    path: /refreshActiveUser
    method: POST
    data_selector: user
    params: {}
- name: update_active_user_bio
  endpoint:
    path: /updateActiveUserBio
    method: POST
    data_selector: user
    params: {}
- name: room_list
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-android/room-list
    method: GET
    data_selector: records
- name: core_configs
  endpoint:
    params:
      chatMediaMaxFileSize: Number of maximum allowed chat media file size in bytes
      roomPhotoMaxFileSize: Number of maximum allowed group chat room profile picture
        file size in bytes
      userPhotoMaxFileSize: Number of maximum allowed user profile picture file size
        in bytes
      groupMaxParticipants: Number of maximum allowed participants in a group chat
        room
      channelMaxParticipants: Number of maximum allowed participants in a channel
- name: project_configs
  endpoint:
    params:
      usernameIgnoreCase:
        '0': case sensitive
        '1': case insensitive
- name: chat_room
  endpoint:
    path: /chat/room
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /chat/messages
    method: GET
    data_selector: records
- name: active_user
  endpoint:
    path: /active_user
    method: GET
    data_selector: data
- name: user_contacts
  endpoint:
    path: /api/v1/user_contacts
    method: GET
    data_selector: contacts
- name: contact_detail
  endpoint:
    path: /api/v1/contact_detail
    method: GET
    data_selector: contact
- name: room_list
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-android/room-list
    method: GET
- name: user_contact
  endpoint:
    path: /api/contact
    method: GET
    data_selector: contacts
- name: chat_room
  endpoint:
    path: /services/data/vXX.X/sobjects/ChatRoom
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /services/data/vXX.X/sobjects/Messages
    method: GET
    data_selector: records
- name: groups_in_common
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-android/contact#get-groups-in-common
    method: GET
- name: user_contact
  endpoint:
    path: /api/user/contact
    method: GET
    data_selector: contacts
    params: {}
- name: user_contacts
  endpoint:
    path: /getAllUserContacts
    method: GET
    data_selector: users
- name: fetch_user_contacts
  endpoint:
    path: /fetchAllUserContactsFromServer
    method: GET
    data_selector: users
- name: contact_detail_by_user_id
  endpoint:
    path: /getUserDataWithUserID
    method: GET
    data_selector: user
- name: contact_detail_by_xc_user_id
  endpoint:
    path: /getUserDataWithXCUserID
    method: GET
    data_selector: user
- name: add_user_contact_by_user_id
  endpoint:
    path: /addToTapTalkContactsWithUserID
    method: POST
    data_selector: user
- name: add_user_contact_by_phone_number
  endpoint:
    path: /addToTapTalkContactsWithPhoneNumber
    method: POST
    data_selector: user
- name: remove_user_contact
  endpoint:
    path: /removeFromTapTalkContacts
    method: DELETE
    data_selector: successMessage
- name: save_user_data
  endpoint:
    path: /saveUserData
    method: POST
    data_selector: success
- name: search_local_contact
  endpoint:
    path: /searchLocalContactByName
    method: GET
    data_selector: users
- name: report_user
  endpoint:
    path: /reportUser
    method: POST
    data_selector: success
- name: report_message
  endpoint:
    path: /reportMessage
    method: POST
    data_selector: success
- name: block_user
  endpoint:
    path: /blockUser
    method: POST
    data_selector: user
- name: unblock_user
  endpoint:
    path: /unblockUser
    method: POST
    data_selector: user
- name: get_blocked_user_list
  endpoint:
    path: /getBlockedUserList
    method: GET
    data_selector: blockedUsers
- name: get_blocked_user_ids
  endpoint:
    path: /getBlockedUserIDs
    method: GET
    data_selector: blockedUserIDs
- name: get_groups_in_common
  endpoint:
    path: /getGroupsInCommon
    method: GET
    data_selector: rooms
- name: all_user_contacts
  endpoint:
    path: /getAllUserContacts
    method: GET
    data_selector: contacts
- name: fetch_all_user_contacts
  endpoint:
    path: /fetchAllUserContacts
    method: GET
    data_selector: contacts
- name: get_contact_detail_info_taptalk_user_id
  endpoint:
    path: /getContactDetailInfoWithTapTalkUserID
    method: GET
    data_selector: contact_info
- name: get_contact_detail_info_client_user_id
  endpoint:
    path: /getContactDetailInfoWithClientUserID
    method: GET
    data_selector: contact_info
- name: add_user_to_contact_user_id
  endpoint:
    path: /addUserToContactWithUserID
    method: POST
    data_selector: result
- name: add_user_to_contact_phone_number
  endpoint:
    path: /addUserToContactWithPhoneNumber
    method: POST
    data_selector: result
- name: remove_user_from_contact
  endpoint:
    path: /removeUserFromContact
    method: DELETE
    data_selector: result
- name: save_user_data
  endpoint:
    path: /saveUserData
    method: POST
    data_selector: result
- name: search_local_contact
  endpoint:
    path: /searchLocalContact
    method: GET
    data_selector: contacts
- name: report_user
  endpoint:
    path: /reportUser
    method: POST
    data_selector: result
- name: report_message
  endpoint:
    path: /reportMessage
    method: POST
    data_selector: result
- name: block_user
  endpoint:
    path: /blockUser
    method: POST
    data_selector: result
- name: unblock_user
  endpoint:
    path: /unblockUser
    method: POST
    data_selector: result
- name: get_blocked_user_list
  endpoint:
    path: /getBlockedUserList
    method: GET
    data_selector: blocked_users
- name: get_blocked_user_ids
  endpoint:
    path: /getBlockedUserIDs
    method: GET
    data_selector: blocked_user_ids
- name: message_type
  endpoint:
    path: /message/type
    method: GET
    data_selector: records
- name: groups_in_common
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-android/contact#get-groups-in-common
    method: GET
- name: user_contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: users
- name: blocked_users
  endpoint:
    path: /blocked_users
    method: GET
    data_selector: blockedUsers
- name: blocked_user_ids
  endpoint:
    path: /blocked_user_ids
    method: GET
    data_selector: blockedUserIDs
- name: groups_in_common
  endpoint:
    path: /groups_in_common
    method: GET
    data_selector: rooms
- name: message_type
  endpoint:
    path: /message/type
    method: GET
    data_selector: message_types
- name: Default Components
  endpoint:
    path: /colors.xml
    method: GET
    data_selector: colors
    params: {}
- name: Chat Bubble
  endpoint:
    path: /colors.xml
    method: GET
    data_selector: colors
    params: {}
- name: Text Field
  endpoint:
    path: /colors.xml
    method: GET
    data_selector: colors
    params: {}
- name: Button
  endpoint:
    path: /colors.xml
    method: GET
    data_selector: colors
    params: {}
- name: Switch
  endpoint:
    path: /colors.xml
    method: GET
    data_selector: colors
    params: {}
- name: Popup Dialog
  endpoint:
    path: /colors.xml
    method: GET
    data_selector: colors
    params: {}
- name: Unread Badge
  endpoint:
    path: /colors.xml
    method: GET
    data_selector: colors
    params: {}
- name: Chat Room Page
  endpoint:
    path: /colors.xml
    method: GET
    data_selector: colors
    params: {}
- name: Media Preview
  endpoint:
    path: /colors.xml
    method: GET
    data_selector: colors
    params: {}
- name: Search
  endpoint:
    path: /colors.xml
    method: GET
    data_selector: colors
    params: {}
- name: Default Avatar Background Color
  endpoint:
    path: /colors.xml
    method: GET
    data_selector: colors
    params: {}
- name: tapFontFamilyLight
  endpoint:
    path: /font/tapFontFamilyLight
    method: GET
    data_selector: item
    params: {}
- name: tapFontFamilyRegular
  endpoint:
    path: /font/tapFontFamilyRegular
    method: GET
    data_selector: item
    params: {}
- name: tapFontFamilyMedium
  endpoint:
    path: /font/tapFontFamilyMedium
    method: GET
    data_selector: item
    params: {}
- name: tapFontFamilyBold
  endpoint:
    path: /font/tapFontFamilyBold
    method: GET
    data_selector: item
    params: {}
- name: tapFontFamilyItalic
  endpoint:
    path: /font/tapFontFamilyItalic
    method: GET
    data_selector: item
    params: {}
- name: Default Components
  endpoint:
    path: /colors/tapDefaultNavBarBackgroundColor
    method: GET
    data_selector: colors
    params: {}
- name: Chat Bubble
  endpoint:
    path: /colors/tapDefaultRightBubbleBackgroundColor
    method: GET
    data_selector: colors
    params: {}
- name: Text Field
  endpoint:
    path: /colors/tapTextFieldCursorColor
    method: GET
    data_selector: colors
    params: {}
- name: Button
  endpoint:
    path: /colors/tapButtonInactiveBackgroundGradientLightColor
    method: GET
    data_selector: colors
    params: {}
- name: Switch
  endpoint:
    path: /colors/tapSwitchActiveBackgroundColor
    method: GET
    data_selector: colors
    params: {}
- name: Popup Dialog
  endpoint:
    path: /colors/tapPopupDialogPrimaryButtonBackgroundSuccessColor
    method: GET
    data_selector: colors
    params: {}
- name: Unread Badge
  endpoint:
    path: /colors/tapUnreadBadgeBackgroundColor
    method: GET
    data_selector: colors
    params: {}
- name: Chat Room Page
  endpoint:
    path: /colors/tapChatComposerBackgroundColor
    method: GET
    data_selector: colors
    params: {}
- name: Media Preview
  endpoint:
    path: /colors/tapSelectedMediaPreviewThumbnailBorderColor
    method: GET
    data_selector: colors
    params: {}
- name: Search
  endpoint:
    path: /colors/tapSearchConnectionLostInfoBackgroundColor
    method: GET
    data_selector: colors
    params: {}
- name: Default Avatar Background Color
  endpoint:
    path: /colors/tapDefaultAvatarBackgroundColor1
    method: GET
    data_selector: colors
    params: {}
- name: Default Icons
  endpoint:
    path: /colors/tapIconLoadingProgressPrimary
    method: GET
    data_selector: colors
    params: {}
- name: Navigation Bar Icons
  endpoint:
    path: /colors/tapIconNavigationBarBackButton
    method: GET
    data_selector: colors
    params: {}
- name: Room List Page Icons
  endpoint:
    path: /colors/tapIconRoomListSettingUp
    method: GET
    data_selector: colors
    params: {}
- name: New Chat Page Icons
  endpoint:
    path: /colors/tapIconMenuNewContact
    method: GET
    data_selector: colors
    params: {}
- name: Chat / Group Profile Page Icons
  endpoint:
    path: /colors/tapIconChatProfileMenuNotificationActive
    method: GET
    data_selector: colors
    params: {}
- name: Media / Image Detail Preview Icons
  endpoint:
    path: /colors/tapIconMediaPreviewAdd
    method: GET
    data_selector: colors
    params: {}
- name: Bottom Sheet Icons
  endpoint:
    path: /colors/tapIconLongPressActionCopy
    method: GET
    data_selector: colors
    params: {}
- name: Chat Room Page Icons
  endpoint:
    path: /colors/tapIconChatComposerSend
    method: GET
    data_selector: colors
    params: {}
- name: Location Picker Icons
  endpoint:
    path: /colors/tapIconLocationPickerMarker
    method: GET
    data_selector: colors
    params: {}
- name: Scan Result
  endpoint:
    path: /colors/tapIconCloseScanResult
    method: GET
    data_selector: colors
    params: {}
- name: tapFontFamilyLight
  endpoint:
    path: /styles/tapFontFamilyLight
    method: GET
- name: tapFontFamilyRegular
  endpoint:
    path: /styles/tapFontFamilyRegular
    method: GET
- name: tapFontFamilyMedium
  endpoint:
    path: /styles/tapFontFamilyMedium
    method: GET
- name: tapFontFamilyBold
  endpoint:
    path: /styles/tapFontFamilyBold
    method: GET
- name: tapFontFamilyItalic
  endpoint:
    path: /styles/tapFontFamilyItalic
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: TapDeepLinkActivity
  endpoint:
    path: /chat
    method: GET
- name: TapDeepLinkActivity
  endpoint:
    path: /chat
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: app_key
  endpoint:
    path: /apps
    method: GET
    data_selector: apps
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: event_delegate
  endpoint:
    path: /event/delegate
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: TapTalkDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#taptalkdelegate
    method: GET
- name: TapUIRoomListDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapuiroomlistdelegate
    method: GET
- name: TapUIChatRoomDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapuichatroomdelegate
    method: GET
- name: TapUIChatProfileDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapuichatprofiledelegate
    method: GET
- name: TapUIMyAccountDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapuimyaccountdelegate
    method: GET
- name: TapUICustomKeyboardDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapuicustomkeyboarddelegate
    method: GET
- name: TAPCoreMessageManagerDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapcoremessagemanagerdelegate
    method: GET
- name: TAPCoreRoomListManagerDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapcoreroomlistmanagerdelegate
    method: GET
- name: TAPCoreChatRoomManagerDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapcorechatroommanagerdelegate
    method: GET
- name: TAPCoreContactManagerDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapcorecontactmanagerdelegate
    method: GET
- name: TapUIRoomListViewControllerLifecycleDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapuiroomlistviewcontrollerlifecycledelegate
    method: GET
- name: TapTalkDelegate
  endpoint:
    path: /taptalkdelegate
    method: GET
- name: TapUIRoomListDelegate
  endpoint:
    path: /tapuiroomlistdelegate
    method: GET
- name: TapUIChatRoomDelegate
  endpoint:
    path: /tapuichatroomdelegate
    method: GET
- name: TapUIChatProfileDelegate
  endpoint:
    path: /tapuichatprofiledelegate
    method: GET
- name: TapUIMyAccountDelegate
  endpoint:
    path: /tapuimyaccountdelegate
    method: GET
- name: TapUICustomKeyboardDelegate
  endpoint:
    path: /tapuicustomkeyboarddelegate
    method: GET
- name: TAPCoreMessageManagerDelegate
  endpoint:
    path: /tapcoremessagemanagerdelegate
    method: GET
- name: TAPCoreRoomListManagerDelegate
  endpoint:
    path: /tapcoreroomlistmanagerdelegate
    method: GET
- name: TAPCoreChatRoomManagerDelegate
  endpoint:
    path: /tapcorechatroommanagerdelegate
    method: GET
- name: TAPCoreContactManagerDelegate
  endpoint:
    path: /tapcorecontactmanagerdelegate
    method: GET
- name: TapUIRoomListViewControllerLifecycleDelegate
  endpoint:
    path: /tapuiroomlistviewcontrollerlifecycledelegate
    method: GET
- name: TapTalkDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#taptalkdelegate
- name: TapUIRoomListDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapuiroomlistdelegate
- name: TapUIChatRoomDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapuichatroomdelegate
- name: TapUIChatProfileDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapuichatprofiledelegate
- name: TapUIMyAccountDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapuimyaccountdelegate
- name: TapUICustomKeyboardDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapuicustomkeyboarddelegate
- name: TAPCoreMessageManagerDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapcoremessagemanagerdelegate
- name: TAPCoreRoomListManagerDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapcoreroomlistmanagerdelegate
- name: TAPCoreChatRoomManagerDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapcorechatroommanagerdelegate
- name: TAPCoreContactManagerDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapcorecontactmanagerdelegate
- name: TapUIRoomListViewControllerLifecycleDelegate
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/event-delegate#tapuiroomlistviewcontrollerlifecycledelegate
- name: active_user
  endpoint:
    path: /getTapTalk.ioActiveUser
    method: GET
    data_selector: user
    params: {}
- name: refresh_active_user
  endpoint:
    path: /refreshTapTalk.ioActiveUser
    method: POST
    data_selector: user
    params: {}
- name: update_active_user_bio
  endpoint:
    path: /updateActiveUserBio
    method: PUT
    data_selector: user
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: active_user
  endpoint:
    path: /user
    method: GET
- name: Room List
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/room-list
    method: GET
- name: active_user
  endpoint:
    path: /get_taptalk_active_user
    method: GET
    data_selector: user_data
- name: refresh_active_user
  endpoint:
    path: /refresh_taptalk_active_user
    method: GET
    data_selector: user_data
- name: update_active_user_bio
  endpoint:
    path: /update_active_user_bio
    method: POST
    data_selector: user_data
- name: chat_room
  endpoint:
    path: /chat_room
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: groups_in_common
  endpoint:
    path: /powertalk-ios/contact#get-groups-in-common
    method: GET
- name: contact
  endpoint:
    path: /getAllUserContacts
    method: GET
- name: Get Contact List
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#get-contact-list
    method: GET
- name: Fetch All User Contacts
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#fetch-all-user-contacts-from-server
    method: GET
- name: Get Contact Detail Info with TapTalk User ID
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#get-contact-detail-info-with-taptalk-user-id
    method: GET
- name: Get Contact Detail Info with Client User ID
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#get-contact-detail-info-with-client-user-id
    method: GET
- name: Add User to Contacts with User ID
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#add-user-to-contact-with-user-id
    method: POST
- name: Add User to Contacts with Phone Number
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#add-user-to-contact-with-phone-number
    method: POST
- name: Remove User from Contacts
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#remove-user-from-contact
    method: DELETE
- name: Save User Data
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#save-user-data
    method: POST
- name: Search Local Contact
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#search-local-contact
    method: GET
- name: Report User
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#report-user
    method: POST
- name: Report Message
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#report-message
    method: POST
- name: Block User
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#block-user
    method: POST
- name: Unblock User
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#unblock-user
    method: POST
- name: Get Blocked User List
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#get-blocked-user-list
    method: GET
- name: Get Blocked User IDs
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-ios/contact#get-blocked-user-ids
    method: GET
- name: groups_in_common
  endpoint:
    path: /powertalk-ios/contact#get-groups-in-common
    method: GET
- name: contact
  endpoint:
    path: /fetchAllUserContactsFromServer
    method: GET
    data_selector: userArray
- name: blocked_user_list
  endpoint:
    path: /getBlockedUserList
    method: GET
    data_selector: blockedUserList
- name: blocked_user_ids
  endpoint:
    path: /getBlockedUserIDs
    method: GET
    data_selector: blockedUserIDs
- name: component_colors
  endpoint:
    path: /setComponentColor
    method: POST
- name: icon_colors
  endpoint:
    path: /setComponentColor
    method: POST
- name: default_font_style
  endpoint:
    path: /setDefaultFont
    method: POST
- name: message_type
  endpoint:
    path: /message/type
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: customize_chat_features
  endpoint:
    path: /customize/chat/features
    method: GET
    data_selector: features
    params: {}
- name: chat_room
  endpoint:
    path: /getPersonalChatRoom
    method: GET
    data_selector: room
    params: {}
- name: custom_message
  endpoint:
    path: /sendCustomMessage
    method: POST
    data_selector: message
    params: {}
- name: custom_navigation_bar
  endpoint:
    path: /custom/navigation/bar
    method: POST
    data_selector: data
    params: {}
- name: PowerTalk
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-server-api/base-url
    method: GET
- name: PowerTalkWrapperActivity
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-android
    method: GET
- name: PowerTalkStarterModule
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-android
    method: GET
- name: PowerTalk
  endpoint:
    path: /navigateToPowerTalk
    method: POST
- name: PowerTalkStarterModule
  endpoint:
    path: /path/to/powertalk
    method: GET
    data_selector: records
- name: inbox
  endpoint:
    path: /api/inbox
    method: GET
    data_selector: messages
    params: {}
- name: TapListener
  endpoint:
    path: /taplistener
    method: GET
- name: TapCoreMessageListener
  endpoint:
    path: /tapcoremessagelistener
    method: GET
- name: TapCoreRoomListListener
  endpoint:
    path: /tapcoreroomlistlistener
    method: GET
- name: TapCoreChatRoomListener
  endpoint:
    path: /tapcorechatroomlistener
    method: GET
- name: TapCoreContactListener
  endpoint:
    path: /tapcorecontactlistener
    method: GET
- name: chat_room_status
  endpoint:
    path: /chat/room/status
    method: POST
    data_selector: roomStatusEvents
- name: contact_events
  endpoint:
    path: /contact/events
    method: POST
    data_selector: contactEvents
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: TapListener
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-javascript-sdk/event-listener#taplistener
    method: GET
- name: TapCoreMessageListener
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-javascript-sdk/event-listener#tapcoremessagelistener
    method: GET
- name: TapCoreRoomListListener
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-javascript-sdk/event-listener#tapcoreroomlistlistener
    method: GET
- name: TapCoreChatRoomListener
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-javascript-sdk/event-listener#tapcorechatroomlistener
    method: GET
- name: TapCoreContactListener
  endpoint:
    path: /powertalk-chat-sdk-documentation/powertalk-javascript-sdk/event-listener#tapcorecontactlistener
    method: GET
- name: room_status
  endpoint:
    path: /tapcore/chat/room/status
    method: POST
    data_selector: events
- name: contact_events
  endpoint:
    path: /tapcore/contact/events
    method: POST
    data_selector: events
- name: room_list
  endpoint:
    path: /get-updated-room-list
    method: GET
- name: personal_chat_room
  endpoint:
    path: /get-personal-chat-room-with-user-model
    method: GET
- name: user_by_id
  endpoint:
    path: /get-user-by-id
    method: GET
- name: remove_chat_room
  endpoint:
    path: /remove-chat-room-by-room-id
    method: DELETE
- name: muted_room
  endpoint:
    path: /get-muted-room
    method: GET
- name: set_muted_room
  endpoint:
    path: /set-muted-room
    method: POST
- name: pinned_room
  endpoint:
    path: /get-pinned-room
    method: GET
- name: set_pin_room
  endpoint:
    path: /set-pin-room
    method: POST
- name: room_list
  endpoint:
    path: /room/list
    method: GET
- name: user
  endpoint:
    path: /user/{userID}
    method: GET
- name: Get Pinned Room
  endpoint:
    path: /getPinnedRoom
    method: GET
    data_selector: res
    params: {}
- name: Set Pin Room
  endpoint:
    path: /setPinRoom
    method: POST
    data_selector: res
    params:
      ROOM_ID: Array
- name: Unset Pinned Room
  endpoint:
    path: /unsetPinnedRoom
    method: POST
    data_selector: res
    params:
      ROOM_ID: Array
- name: room_list
  endpoint:
    path: /room-list
    method: GET
    data_selector: roomLists
- name: user_by_id
  endpoint:
    path: /user
    method: GET
    data_selector: response
- name: pinned_room
  endpoint:
    path: /getPinnedRoom
    method: GET
    data_selector: res
    params: {}
- name: set_pin_room
  endpoint:
    path: /setPinRoom
    method: POST
    data_selector: res
    params:
      ROOM_ID: array
- name: unset_pinned_room
  endpoint:
    path: /unsetPinRoom
    method: POST
    data_selector: res
    params:
      ROOM_ID: array
- name: personal_chat_room
  endpoint:
    path: /getPersonalChatRoomWithRecipientUser
    method: GET
- name: group_chat_room
  endpoint:
    path: /createGroupChatRoom
    method: POST
- name: personal_chat_room_with_recipient_user_model
  endpoint:
    path: /api/personal/chat/room/recipient/user/model
    method: GET
- name: create_group_chat_room
  endpoint:
    path: /api/group/chat/room
    method: POST
- name: remove_members
  endpoint:
    path: /powertalk/chat/remove_members
    method: POST
- name: promote_group_admin
  endpoint:
    path: /powertalk/chat/promote_admin
    method: POST
- name: demote_group_admin
  endpoint:
    path: /powertalk/chat/demote_admin
    method: POST
- name: start_typing
  endpoint:
    path: /powertalk/chat/start_typing
    method: POST
- name: stop_typing
  endpoint:
    path: /powertalk/chat/stop_typing
    method: POST
- name: get_room_medias
  endpoint:
    path: /powertalk/chat/get_room_medias
    method: GET
- name: mark_chat_room_as_unread
  endpoint:
    path: /powertalk/chat/mark_as_unread
    method: POST
- name: get_marked_as_unread_chat_room_list
  endpoint:
    path: /powertalk/chat/get_unread_rooms
    method: GET
- name: delete_all_chat_room_messages
  endpoint:
    path: /powertalk/chat/delete_all_messages
    method: DELETE
- name: personal_chat_room
  endpoint:
    path: /get_personal_chat_room
    method: POST
    data_selector: data
- name: group_chat_room
  endpoint:
    path: /create_group_chat_room
    method: POST
    data_selector: data
- name: personal_chat_room_with_recipient_user
  endpoint:
    path: /createRoomWithOtherUser
    method: POST
    data_selector: roomModel
    params:
      RECIPIENT_USER: TAPUserModel
- name: personal_chat_room_with_recipient_user_id
  endpoint:
    path: /createRoomWithuserID
    method: POST
    data_selector: roomModel
    params:
      RECIPIENT_ID: String
- name: personal_chat_room_with_recipient_xc_user_id
  endpoint:
    path: /createRoomWithXCuserID
    method: POST
    data_selector: roomModel
    params:
      XC_USER_ID: String
- name: create_group_chat_room
  endpoint:
    path: /createGroupChatRoom
    method: POST
    data_selector: roomModel
    params:
      GROUP_NAME: String
      PARTICIPANT_LIST: List
- name: create_group_chat_room_with_image
  endpoint:
    path: /createGroupChatRoomWithPicture
    method: POST
    data_selector: roomModel
    params:
      GROUP_NAME: String
      PARTICIPANT_LIST: List
      IMAGE_FILE: File
- name: get_group_chat_room
  endpoint:
    path: /getGroupChatRoom
    method: GET
    data_selector: response
    params:
      GROUP_ID: String
- name: update_group_chat_room_details
  endpoint:
    path: /updateGroupChatRoomDetails
    method: POST
    data_selector: roomModel
    params:
      GROUP_ID: String
      GROUP_NAME: String
- name: update_group_image
  endpoint:
    path: /updateGroupPicture
    method: POST
    data_selector: roomModel
    params:
      GROUP_ID: String
      IMAGE_FILE: File
- name: delete_group_chat_room
  endpoint:
    path: /deleteGroupChatRoom
    method: DELETE
    data_selector: response
    params:
      ROOM_ID: String
- name: leave_group_chat
  endpoint:
    path: /leaveGroupChatRoom
    method: POST
    data_selector: isSuccess
    params:
      GROUP_ID: String
- name: add_members_to_group_chat
  endpoint:
    path: /addGroupChatMembers
    method: POST
    data_selector: roomModel
    params:
      GROUP_ID: String
      USER_IDs: List
- name: remove_members_from_group_chat
  endpoint:
    path: /removeGroupChatMembers
    method: POST
    data_selector: roomModel
    params:
      GROUP_ID: String
      USER_IDs: List
- name: promote_group_admin
  endpoint:
    path: /promoteGroupAdmins
    method: POST
    data_selector: roomModel
    params:
      GROUP_ID: String
      USER_IDs: List
- name: demote_group_admin
  endpoint:
    path: /demoteGroupAdmins
    method: POST
    data_selector: roomModel
    params:
      GROUP_ID: String
      USER_IDs: List
- name: send_start_typing
  endpoint:
    path: /sendStartTypingEmit
    method: POST
    data_selector: ''
    params:
      ROOM_ID: String
- name: send_stop_typing
  endpoint:
    path: /sendStopTypingEmit
    method: POST
    data_selector: ''
    params:
      ROOM_ID: String
- name: get_room_media
  endpoint:
    path: /getRoomMedia
    method: GET
    data_selector: response
    params:
      ROOM_ID: String
      MIN_CREATED: Long
- name: mark_chat_room_as_unread
  endpoint:
    path: /markChatRoomAsUnread
    method: POST
    data_selector: res
    params:
      ROOM_ID: Number
- name: get_marked_as_unread_chat_room_list
  endpoint:
    path: /getMarkedAsUnreadChatRoomList
    method: GET
    data_selector: res
    params: {}
- name: delete_all_chat_room_messages
  endpoint:
    path: /deleteAllChatRoomMessages
    method: DELETE
    data_selector: res
    params:
      ROOM_IDS: Array<Number>
- name: get_group_in_common
  endpoint:
    path: /fetchGroupInCommon
    method: GET
    data_selector: res
    params:
      USER_ID: Number
- name: personal_chat_room_with_recipient_user
  endpoint:
    path: /createRoomWithOtherUser
    method: POST
    data_selector: roomModel
    params:
      RECIPIENT_USER: TAPUserModel
- name: personal_chat_room_with_recipient_user_id
  endpoint:
    path: /createRoomWithuserID
    method: POST
    data_selector: roomModel
    params:
      RECIPIENT_ID: String
- name: personal_chat_room_with_recipient_XC_user_id
  endpoint:
    path: /createRoomWithXCuserID
    method: POST
    data_selector: roomModel
    params:
      XC_USER_ID: String
- name: group_chat_room
  endpoint:
    path: /createGroupChatRoom
    method: POST
    data_selector: roomModel
    params:
      GROUP_NAME: String
      PARTICIPANT_LIST: List
- name: group_chat_room_with_image
  endpoint:
    path: /createGroupChatRoomWithPicture
    method: POST
    data_selector: roomModel
    params:
      GROUP_NAME: String
      PARTICIPANT_LIST: List
      IMAGE_FILE: File
- name: get_group_chat_room
  endpoint:
    path: /getGroupChatRoom
    method: GET
    data_selector: response
    params:
      GROUP_ID: String
- name: update_group_chat_room_details
  endpoint:
    path: /updateGroupChatRoomDetails
    method: POST
    data_selector: roomModel
    params:
      GROUP_ID: String
      GROUP_NAME: String
- name: update_group_image
  endpoint:
    path: /updateGroupPicture
    method: POST
    data_selector: roomModel
    params:
      GROUP_ID: String
      IMAGE_FILE: File
- name: delete_group_chat_room
  endpoint:
    path: /deleteGroupChatRoom
    method: DELETE
    data_selector: response
    params:
      ROOM_ID: String
- name: leave_group_chat
  endpoint:
    path: /leaveGroupChatRoom
    method: POST
    data_selector: isSuccess
    params:
      GROUP_ID: String
- name: add_members_to_group_chat
  endpoint:
    path: /addGroupChatMembers
    method: POST
    data_selector: roomModel
    params:
      GROUP_ID: String
      USER_IDs: List
- name: remove_members_from_group_chat
  endpoint:
    path: /removeGroupChatMembers
    method: POST
    data_selector: roomModel
    params:
      GROUP_ID: String
      USER_IDs: List
- name: promote_group_admin
  endpoint:
    path: /promoteGroupAdmins
    method: POST
    data_selector: roomModel
    params:
      GROUP_ID: String
      USER_IDs: List
- name: demote_group_admin
  endpoint:
    path: /demoteGroupAdmins
    method: POST
    data_selector: roomModel
    params:
      GROUP_ID: String
      USER_IDs: List
- name: send_start_typing
  endpoint:
    path: /sendStartTypingEmit
    method: POST
    data_selector: null
    params:
      ROOM_ID: String
- name: send_stop_typing
  endpoint:
    path: /sendStopTypingEmit
    method: POST
    data_selector: null
    params:
      ROOM_ID: String
- name: get_room_media
  endpoint:
    path: /getRoomMedia
    method: GET
    data_selector: response
    params:
      ROOM_ID: String
      MIN_CREATED: Long
- name: mark_chat_room_as_unread
  endpoint:
    path: /markChatRoomAsUnread
    method: POST
    data_selector: null
    params:
      ROOM_ID: Number
- name: get_marked_as_unread_chat_room_list
  endpoint:
    path: /getMarkedAsUnreadChatRoomList
    method: GET
    data_selector: response
    params: {}
- name: delete_all_chat_room_messages
  endpoint:
    path: /deleteAllChatRoomMessages
    method: DELETE
    data_selector: response
    params:
      ROOM_IDS: Array<Number>
- name: get_group_in_common
  endpoint:
    path: /fetchGroupInCommon
    method: GET
    data_selector: response
    params:
      USER_ID: Number
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: data
- name: DeleteMessage
  endpoint:
    path: /path/to/DeleteMessage
    method: POST
    data_selector: data
    params: {}
- name: SendTextMessage
  endpoint:
    path: /path/to/SendTextMessage
    method: POST
    data_selector: data
    params: {}
- name: forward_message
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#send-forward-messages
    method: POST
- name: construct_message_model
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#authenticate-to-taptalk-io-server-with-an-authentication-ticket-2
    method: POST
- name: send_custom_message
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#authenticate-to-taptalk-io-server-with-an-authentication-ticket-4
    method: POST
- name: edit_message
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#edit-message
    method: PUT
- name: search_local_messages
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#authenticate-to-taptalk-io-server-with-an-authentication-ticket-5
    method: GET
- name: star_unstar_message
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#authenticate-to-taptalk-io-server-with-an-authentication-ticket-7
    method: POST
- name: get_starred_messages
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#authenticate-to-taptalk-io-server-with-an-authentication-ticket-9
    method: GET
- name: pin_unpin_message
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#pin-message
    method: POST
- name: get_pinned_messages
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#fetch-pinned-messages
    method: GET
- name: get_shared_content_messages
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#fetch-shared-content-messages
    method: GET
- name: download_message_file
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#download-message-file
    method: GET
- name: mark_message_as_read
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#mark-message-as-read
    method: POST
- name: mark_message_as_delivered
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#mark-message-as-read-1
    method: POST
- name: get_older_messages
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#get-older-messages-from-chat-room
    method: GET
- name: get_newer_messages
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#get-newer-messages-from-chat-room
    method: GET
- name: get_room_media
  endpoint:
    path: /powertalk-chat-sdk/documentation/powertalk-javascript-sdk/messages#get-newer-messages-from-chat-room-1
    method: GET
- name: DeleteMessage
  endpoint:
    path: /markMessageAsDeleted
    method: POST
    data_selector: message
    params:
      room_id: ROOM_ID
      message_ids: MESSAGE_IDs
      for_everyone: FOR_EVERYONE
- name: SendTextMessage
  endpoint:
    path: /sendTextMessage
    method: POST
    data_selector: message
    params:
      message_body: MESSAGE_BODY
      room: ROOM
      quoted_message: QUOTED_MESSAGE
      forward_message: FORWARD_MESSAGE
      forward_only: FORWARD_ONLY
      quote_title: QUOTE_TITLE
- name: SendImageMessage
  endpoint:
    path: /sendImageMessage
    method: POST
    data_selector: message
    params:
      file: FILE
      caption: CAPTION
      room: ROOM
      quoted_message: QUOTED_MESSAGE
      forward_message: FORWARD_MESSAGE
      forward_only: FORWARD_ONLY
      quote_title: QUOTE_TITLE
- name: SendVideoMessage
  endpoint:
    path: /sendVideoMessage
    method: POST
    data_selector: message
    params:
      file: FILE
      caption: CAPTION
      room: ROOM
      quoted_message: QUOTED_MESSAGE
      forward_message: FORWARD_MESSAGE
      forward_only: FORWARD_ONLY
      quote_title: QUOTE_TITLE
- name: SendFileMessage
  endpoint:
    path: /sendFileMessage
    method: POST
    data_selector: message
    params:
      file: FILE
      room: ROOM
      quoted_message: QUOTED_MESSAGE
      forward_message: FORWARD_MESSAGE
      forward_only: FORWARD_ONLY
      quote_title: QUOTE_TITLE
- name: SendLocationMessage
  endpoint:
    path: /sendLocationMessage
    method: POST
    data_selector: message
    params:
      latitude: LATITUDE
      longitude: LONGITUDE
      address: ADDRESS
      room: ROOM
      quoted_message: QUOTED_MESSAGE
      forward_message: FORWARD_MESSAGE
      forward_only: FORWARD_ONLY
      quote_title: QUOTE_TITLE
- name: SendVoiceMessage
  endpoint:
    path: /sendVoiceMessage
    method: POST
    data_selector: message
    params:
      file: FILE
      duration: DURATION
      room: ROOM
      quoted_message: QUOTED_MESSAGE
      forward_message: FORWARD_MESSAGE
      forward_only: FORWARD_ONLY
      quote_title: QUOTE_TITLE
- name: SendLinkMessage
  endpoint:
    path: /sendLinkMessage
    method: POST
    data_selector: message
    params:
      message_body: MESSAGE_BODY
      room: ROOM
      urls: URLS
      title: TITLE
      description: DESCRIPTION
      image: IMAGE
      site_name: SITE_NAME
      type: TYPE
      quoted_message: QUOTED_MESSAGE
      forward_message: FORWARD_MESSAGE
      forward_only: FORWARD_ONLY
      quote_title: QUOTE_TITLE
- name: SendForwardMessage
  endpoint:
    path: /sendForwardMessage
    method: POST
    data_selector: message
    params:
      room_model: ROOM_MODEL
      forward_messages: FORWARD_MESSAGES
- name: SearchLocalRoomMessageWithKeyword
  endpoint:
    path: /searchLocalRoomMessageWithKeyword
    method: POST
    data_selector: message
    params:
      keyword: KEYWORD
      room_id: ROOM_ID
- name: StarMessage
  endpoint:
    path: /starMessage
    method: POST
    data_selector: message
    params:
      room_id: ROOM_ID
      message_ids: MESSAGE_IDs
- name: UnstarMessage
  endpoint:
    path: /unstarMessage
    method: POST
    data_selector: message
    params:
      room_id: ROOM_ID
      message_ids: MESSAGE_IDs
- name: Contact
  endpoint:
    path: /sendtalk-api-documentation/contact
    method: GET
    data_selector: records
    params: {}
- name: user_contact
  endpoint:
    path: /getAllUserContact
    method: GET
    data_selector: records
    params: {}
- name: contact_detail
  endpoint:
    path: /getContactDetailInfoWithTapTalkUserID
    method: GET
    data_selector: records
    params: {}
- name: get_all_user_contacts
  endpoint:
    path: /getAllUserContacts
    method: GET
- name: get_user_data_with_user_id
  endpoint:
    path: /getUserDataWithUserID
    method: GET
- name: get_user_data_with_xc_user_id
  endpoint:
    path: /getUserDataWithXCUserID
    method: GET
- name: add_to_tap_talk_contacts_with_user_id
  endpoint:
    path: /addToTapTalkContactsWithUserID
    method: POST
- name: add_to_tap_talk_contacts_with_phone_number
  endpoint:
    path: /addToTapTalkContactsWithPhoneNumber
    method: POST
- name: remove_from_tap_talk_contacts
  endpoint:
    path: /removeFromTapTalkContacts
    method: DELETE
- name: get_user_by_username
  endpoint:
    path: /getUserByUsername
    method: GET
- name: get_filtered_user_contacts
  endpoint:
    path: /getFilterUserContacts
    method: GET
- name: report_user
  endpoint:
    path: /reportUser
    method: POST
- name: report_message
  endpoint:
    path: /reportMessage
    method: POST
- name: block_user
  endpoint:
    path: /blockUser
    method: POST
- name: unblock_user
  endpoint:
    path: /unblockUser
    method: POST
- name: get_blocked_user_list
  endpoint:
    path: /getBlockedUserList
    method: GET
- name: get_blocked_user_ids
  endpoint:
    path: /getBlockedUserIDs
    method: GET
- name: message_type
  endpoint:
    path: /api/message/type
    method: GET
    data_selector: types
- name: DeleteMessage
  endpoint:
    path: /markMessageAsDeleted
    method: POST
    data_selector: response
    params: {}
- name: SendTextMessage
  endpoint:
    path: /sendTextMessage
    method: POST
    data_selector: response
    params: {}
- name: SendImageMessage
  endpoint:
    path: /sendImageMessage
    method: POST
    data_selector: response
    params: {}
- name: SendVideoMessage
  endpoint:
    path: /sendVideoMessage
    method: POST
    data_selector: response
    params: {}
- name: SendFileMessage
  endpoint:
    path: /sendFileMessage
    method: POST
    data_selector: response
    params: {}
- name: SendLocationMessage
  endpoint:
    path: /sendLocationMessage
    method: POST
    data_selector: response
    params: {}
- name: SendVoiceMessage
  endpoint:
    path: /sendVoiceMessage
    method: POST
    data_selector: response
    params: {}
- name: SendLinkMessage
  endpoint:
    path: /sendLinkMessage
    method: POST
    data_selector: response
    params: {}
- name: SendForwardedMessage
  endpoint:
    path: /sendForwardMessage
    method: POST
    data_selector: response
    params: {}
- name: SendForwardedMessagesToMultipleRooms
  endpoint:
    path: /sendForwardMessagesOnMultipleRooms
    method: POST
    data_selector: response
    params: {}
- name: ConstructTapTalkMessageModel
  endpoint:
    path: /constructTapTalkMessageModel
    method: POST
    data_selector: response
    params: {}
- name: ConstructTapTalkMessageModelWithQuote
  endpoint:
    path: /constructTapTalkMessageModelWithQuote
    method: POST
    data_selector: response
    params: {}
- name: EditMessage
  endpoint:
    path: /sendEmitWithEditedMessage
    method: POST
    data_selector: response
    params: {}
- name: SearchLocalRoomMessageWithKeyword
  endpoint:
    path: /searchLocalRoomMessageWithKeyword
    method: POST
    data_selector: response
    params: {}
- name: SearchLocalMessageWithKeyword
  endpoint:
    path: /searchLocalMessageWithKeyword
    method: POST
    data_selector: response
    params: {}
- name: StarMessage
  endpoint:
    path: /starMessage
    method: POST
    data_selector: response
    params: {}
- name: UnstarMessage
  endpoint:
    path: /unstarMessage
    method: POST
    data_selector: response
    params: {}
- name: GetStarredMessageIds
  endpoint:
    path: /getStarredMessageIds
    method: POST
    data_selector: response
    params: {}
- name: FetchStarredMessages
  endpoint:
    path: /fetchStarredMessages
    method: POST
    data_selector: response
    params: {}
- name: FetchSharedContentMessages
  endpoint:
    path: /fetchSharedContentMessages
    method: POST
    data_selector: response
    params: {}
- name: FetchPinnedMessages
  endpoint:
    path: /fetchPinnedMessages
    method: POST
    data_selector: response
    params: {}
- name: GetPinnedMessageIds
  endpoint:
    path: /getPinnedMessageIds
    method: POST
    data_selector: response
    params: {}
- name: PinMessage
  endpoint:
    path: /pinMessage
    method: POST
    data_selector: response
    params: {}
- name: UnpinMessage
  endpoint:
    path: /unpinMessage
    method: POST
    data_selector: response
    params: {}
- name: DownloadMessageFile
  endpoint:
    path: /downloadMessageFile
    method: POST
    data_selector: response
    params: {}
- name: MarkMessageAsRead
  endpoint:
    path: /markMessageAsRead
    method: POST
    data_selector: response
    params: {}
- name: MarkMessageAsDelivered
  endpoint:
    path: /markMessageAsDelivered
    method: POST
    data_selector: response
    params: {}
- name: GetOlderMessagesFromChatRoom
  endpoint:
    path: /getOlderMessagesBeforeTimestamp
    method: POST
    data_selector: response
    params: {}
- name: GetNewerMessagesFromChatRoom
  endpoint:
    path: /getNewerMessagesAfterTimestamp
    method: POST
    data_selector: response
    params: {}
- name: GetTotalReadCount
  endpoint:
    path: /getTotalReadCount
    method: POST
    data_selector: response
    params: {}
- name: FetchMessageInfo
  endpoint:
    path: /fetchMessageInfo
    method: POST
    data_selector: response
    params: {}
- name: user_contact
  endpoint:
    path: /api/v1/user/contact
    method: GET
    data_selector: contacts
- name: user_contact
  endpoint:
    path: /contact
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: get_all_user_contacts
  endpoint:
    path: /getAllUserContacts
    method: GET
- name: get_user_data_with_user_id
  endpoint:
    path: /getUserDataWithUserID
    method: GET
- name: get_user_data_with_xc_user_id
  endpoint:
    path: /getUserDataWithXCUserID
    method: GET
- name: add_to_tap_talk_contacts_with_user_id
  endpoint:
    path: /addToTapTalkContactsWithUserID
    method: POST
- name: add_to_tap_talk_contacts_with_phone_number
  endpoint:
    path: /addToTapTalkContactsWithPhoneNumber
    method: POST
- name: remove_from_tap_talk_contacts
  endpoint:
    path: /removeFromTapTalkContacts
    method: DELETE
- name: get_user_by_username
  endpoint:
    path: /getUserByUsername
    method: GET
- name: get_filtered_user_contacts
  endpoint:
    path: /getFilterUserContacts
    method: GET
- name: report_user
  endpoint:
    path: /reportUser
    method: POST
- name: report_message
  endpoint:
    path: /reportMessage
    method: POST
- name: block_user
  endpoint:
    path: /blockUser
    method: POST
- name: unblock_user
  endpoint:
    path: /unblockUser
    method: POST
- name: get_blocked_user_list
  endpoint:
    path: /getBlockedUserList
    method: GET
- name: get_blocked_user_ids
  endpoint:
    path: /getBlockedUserIDs
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: update_user
  endpoint:
    path: /v1/server/user/update
    method: POST
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: sync_contacts
  endpoint:
    path: /contact/sync
    method: POST
    data_selector: data
    params: {}
- name: send_custom_message
  endpoint:
    path: /message/send/custom
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: auth_ticket
  endpoint:
    path: /v1/server/auth_ticket/request
    method: POST
- name: Room
  endpoint:
    path: /api/room
    method: POST
    data_selector: data
    params: {}
- name: Participants
  endpoint:
    path: /api/participants
    method: GET
    data_selector: data
    params: {}
- name: create_or_update_room
  endpoint:
    path: /api/room/create_or_update
    method: POST
- name: get_room_details
  endpoint:
    path: /api/room/get_details
    method: GET
- name: add_participants
  endpoint:
    path: /api/room/add_participants
    method: POST
- name: remove_participants
  endpoint:
    path: /api/room/remove_participants
    method: POST
- name: get_list_by_user
  endpoint:
    path: /api/room/get_list_by_user
    method: GET
- name: lock_room
  endpoint:
    path: /api/room/lock
    method: POST
- name: unlock_room
  endpoint:
    path: /api/room/unlock
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: update_user
  endpoint:
    path: /v1/server/user/update
    method: POST
- name: create_or_update_room
  endpoint:
    path: room/create_or_update
    method: POST
    data_selector: data.room
    params:
      xcRoomID: required
      type: integer
      name: string
      photoThumbnailURL: string
      photoFullsizeURL: string
      tags: string[]
      participantXCUserIDs: string[]
      participantUserRoles: string[]
- name: get_room_details
  endpoint:
    path: room/get
    method: POST
    data_selector: data.room
    params:
      xcRoomID: required
- name: add_participants
  endpoint:
    path: room/participants/add
    method: POST
    data_selector: data.room
    params:
      xcRoomID: required
      participantXCUserIDs: string[]
- name: remove_participants
  endpoint:
    path: room/participants/remove
    method: POST
    data_selector: data.room
    params:
      xcRoomID: required
      participantXCUserIDs: string[]
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: sync_contacts
  endpoint:
    path: /v1/server/contact/sync
    method: POST
    data_selector: data
    params: {}
- name: get_list_by_user
  endpoint:
    path: /get_list_by_user
    method: GET
    data_selector: rooms
    params:
      xcUserID: ''
      xcRoomIDs: []
- name: lock_room
  endpoint:
    path: /lock
    method: POST
    data_selector: success
    params:
      xcRoomID: ''
      xcUserID: ''
- name: unlock_room
  endpoint:
    path: /unlock
    method: POST
    data_selector: success
    params:
      xcRoomID: ''
      xcUserID: ''
- name: inbox
  endpoint:
    path: /sendtalk-api/inbox
    method: GET
    data_selector: records
    params: {}
- name: send_custom_message
  endpoint:
    path: /message/send/custom
    method: POST
- name: message
  endpoint:
    path: /powertalk/message
    method: POST
    data_selector: data
- name: webhook_payload
  endpoint:
    path: /webhook/payload
    method: POST
- name: message
  endpoint:
    path: /webhook/payload
    method: POST
    data_selector: payload
    params: {}
- name: room
  endpoint:
    path: /create_or_update_room
    method: POST
    data_selector: data
- name: participant
  endpoint:
    path: /add_participants
    method: POST
    data_selector: data
- name: MeetTalk
  endpoint:
    path: /meettalk
    method: POST
- name: create_or_update_room
  endpoint:
    path: /room/create_or_update
    method: POST
    data_selector: room
    params:
      xcRoomID: 6A02C41D
      type: 2
      name: 'Order #6A02C41D'
      tags:
      - category:1
- name: get_room_details
  endpoint:
    path: /room/get
    method: POST
    data_selector: room
    params:
      xcRoomID: 6A02C41D
- name: add_participants
  endpoint:
    path: /room/participants/add
    method: POST
    data_selector: room
    params:
      xcRoomID: 6A02C41D
      participantXCUserIDs:
      - '6'
- name: remove_participants
  endpoint:
    path: /room/participants/remove
    method: POST
    data_selector: room
    params:
      xcRoomID: 6A02C41D
      participantXCUserIDs:
      - '6'
- name: event_listener
  endpoint:
    path: /event/listener
    method: POST
    data_selector: data
    params: {}
- name: get_list_by_user
  endpoint:
    path: /room/get_list_by_user
    method: POST
    data_selector: data.rooms
    params:
      xcUserID: ''
      xcRoomIDs: ''
- name: lock_room
  endpoint:
    path: /room/lock
    method: POST
    data_selector: data.success
    params:
      xcRoomID: ''
      xcUserID: ''
- name: unlock_room
  endpoint:
    path: /room/unlock
    method: POST
    data_selector: data.success
    params:
      xcRoomID: ''
      xcUserID: ''
- name: event_listener
  endpoint:
    path: /meettalk-sdk-documentation/event-listener
    method: GET
- name: message
  endpoint:
    path: /webhook/payload
    method: POST
    data_selector: payload
- name: initializeGooglePlacesApiKey
  endpoint:
    path: /initializeGooglePlacesApiKey
    method: POST
    data_selector: response
    params:
      GOOGLE_PLACES_API_KEY: (String) Google Places API Key
- name: initiateNewConferenceCall
  endpoint:
    path: /initiateNewConferenceCall
    method: POST
    data_selector: response
    params:
      ROOM: (TAPRoomModel) the chat room where the call will be initiated
      START_WITH_AUDIO_MUTED: (BOOL) initial state of the participants' microphone
      START_WITH_VIDEO_MUTED: (BOOL) initial state of the participants' front camera
      RECIPIENT_DISPLAY_NAME: (NSString) custom display name/nickname for the recipient
        that will be displayed during the call
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Clients should save verification ID and status in their database.
- Webhook URL must be registered to receive verification status updates.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Clients are suggested to save the verification ID along with a verification status.
- Clients can redirect users to a WhatsApp message link after receiving it from SendTalk's
  server.
- Please check your spam folders for the invitation email if you can't find it in
  your inbox.
- Assigning agents to topics can only be done if your role is Owner or Admin
- Once confirmed, your newly assigned agent will show up under the section Assigned
  Agents
- This feature can be accessed by the administrator or the member with sufficient
  permission.
- Create a Telegram bot and obtain the Bot token.
- Integrating WhatsApp SME can only be done if your role is Owner or Admin.
- Please allow up to 24 hours for our team to setup your channel after your payment
  has been verified.
- Some objects like Contact may return nulls in deeply nested fields
- Create Telegram Bot and obtain Bot Token before integration.
- There will be a syncing process time up to 48 hours, this entirely depends on the
  volume of messages you have on your WhatsApp account and also your internet connection.
  This may cause up to a 10 minute delay in receiving messages.
- You must monitor the mobile phone connected with WhatsApp SME. We recommend you
  keep charge of the mobile phone at all times and make sure it has a stable internet
  connection.
- You cannot use WhatsApp Web/Desktop on the same account of WhatsApp SME. You can
  still reply messages through WhatsApp mobile app but we highly recommend you download
  OneTalk's Mobile agent app on Google Play Store instead.
- You will need an Instagram Business Account or Instagram Creator Account, not a
  personal Instagram Account.
- You will also need a Facebook Page connected to your Instagram account.
- Integrating Instagram DM can only be done if your role is Owner or Admin.
- Make sure you login with the Facebook account which has the access to the Facebook
  Page
- Please note that you have to connect your Instagram Account to Facebook Page
- After you've successfully connected your Instagram account to OneTalk, please make
  sure you activate Allow Access to Messages on your Instagram account.
- 'Manual Payments: Please allow up to 24 hours for our team to setup your channel
  after your payment has been verified.'
- 'Annual Payments: Please allow up to 24 hours for our team to setup your channel
  after your payment has been verified.'
- Congrats! You've successfully connected your Facebook account to OneTalk.
- Integrating OneTalk Live Chat will allow you to receive and reply incoming messages
  from your website or mobile app in your inbox.
- Integrating OneTalk Live Chat can only be done if your role is Owner or Admin.
- Once created, you will be redirected to the channel's details.
- You can change the widgets color according to your brand color.
- Integrating Google Business Messages can only be done if you have a verified location
  managed with your Google email.
- Some fields cannot be modified once you have verified your channel
- Please refer to OneTalk Live Chat for iOS once you have created this channel.
- Please refer to OneTalk Live Chat for Android once you have created this channel.
- Please refer to OneTalk Live Chat for Web once you have created this channel.
- Congrats! You've successfully connected your Location to OneTalk.
- Integrating Tokopedia can only be done if you have a Power Merchant, Power Merchant
  PRO and Official Store as your shop status.
- Some fields cannot be modified once the channel is verified.
- Integrating Google Business Profile can only be done if you have a verified location
  connected to your Google Account.
- API provides set of methods that can be used when integrating into OneTalk
- Requires setup of connected app in api
- Requires an Auth Ticket for API access
- This documentation provides a flexible set of methods that can be used in your web
  projects.
- To invoke one of the methods below, please be sure to call a method after the embed
  code on your page.
- Please make sure you already implement OneTalk's Live Chat Widget.
- Integrate a custom chatbot into your channel at OneTalk by TapTalk.io
- Make sure you already implement OneTalk's Live Chat Widget
- Uses OAuth2 with refresh token — requires setup of connected app in TapTalk.io
- Uses OAuth2 with refresh token — requires setup of connected app in TapTalk
- Some endpoints may have rate limits
- To develop Inbound messages and Webhooks please refer to the official documentation.
- Webhook endpoint for your chatbot engine to receive a message.
- API must return response with a specific payload format.
- Status 'acknowledge' is updated when WhatsApp has received OneTalk's request to
  send the message.
- Status 'delivered' is updated when WhatsApp recipient has received the message.
- Status 'read' is updated when WhatsApp recipient has read the message.
- Status 'failed' is updated when there's an error either from TapTalk.io's system
  or WhatsApp's system.
- If the API call failed, our system will not send the error to your recipients.
- Updates your system about the changed in case status to 'Resolved' in your organization.
- Enable the webhook and input 'Webhook URL' field
- Choose a minimum of 1 event on 'Subscribed Events' and click 'Save Changes' to finalize
  your webhook.
- Payload includes organizationID, type, and caseResolved object with various fields.
- PowerTalk is an In-app chat framework for you to integrate the chat features into
  your apps.
- No server-side implementation is required because our reliable infra management
  service is delivered with the SDK.
- Please remember to save your App Key ID & your App Key Secret because it will only
  be shown once and will be used in TapTalk.io initialization.
- Some of TapTalk.io's chat feature may require permissions to be added to your app.
- Starting from version 2.16.0, chat room location attachment will be enabled by default
  even when Google Places API Key is not provided, but location search will be hidden.
- Your key also needs to be defined in your application's AndroidManifest.xml file,
  under the <application> tag.
- authentication should only be called once before the user is logged in or when the
  callback `onTapTalkRefreshTokenExpired()` is triggered in TapListener
- Ensure that the connected app is properly configured for OAuth2.
- TapUI is the manager class that is used to manage the user interface in UI implementation
  method.
- TapCore is the manager class to manage chat functions for applications that use
  TapTalk.io core implementation method.
- An application integrated with TapTalk.io framework will keep executing some certain
  tasks even when the app is on the background if the conditions are met, this is
  done to make sure that the users' chat experience proceed smoothly.
- The background services will be automatically terminated once all the tasks are
  completed or reached a timeout.
- Please make sure that you have finished authentication by calling `authenticate()`
  method, otherwise, it will return an error
- Background services will be automatically terminated once all the tasks are completed
  or reached a timeout.
- The Android SDK provides interfaces to listen to various events on the client app.
- TapTalk will also show its default notification if your do not override the onNotificationReceived
  method in TapListener
- The application will exit once the user closes the chat room
- The default value for auto contact sync is enabled.
- Ensure google-service.json file is in your application project
- Register the FCM Server Key and Sender ID on the Taptalk.io dashboard
- TapTalk will also show its default notification if your do not override the `onNotificationReceived`
  method in TapListener
- Uses methods to retrieve and update active user data.
- You can implement Room List with TapUI or TapCore.
- The default value for auto contact sync is enabled
- You can obtain current TapTalk.io active user data by using the getTaptalkActiveUser()
  method.
- You can retrieve the latest TapTalk.io active user data from the server with the
  refreshActiveUser() method.
- Some endpoints may require additional parameters.
- Requires setup of connected app in TapTalk.io
- you can override the default color values partially, but it is recommended to change
  all of them accordingly to make sure the color theme within the chat UI matches
- TapTalk.io use a predefined type for each chat message bubble.
- Calling `setAllTapTalkActivityActionBarEnabled` will enable/disable action bar in
  all TapTalk activities.
- Calling `setTapTalkChatActivityActionBarEnabled` will only enable/disable action
  bar in TapTalk default chat room (**TapUIChatActivity**).
- Setting `setAllTapTalkActivityActionBarEnabled` to `true` and `setTapTalkChatActivityActionBarEnabled`
  to `false` will **disable** action bar in TapTalk default chat room, but **enable**
  it in other TapTalk activities, and vice versa.
- Location attachment will be disabled by default when Google Places API Key is not
  set from TapTalk class.
- Delete account button is hidden and does nothing if pressed by default, its action
  needs to be handled manually using TapUIMyAccountListener.
- The report button is hidden by default, and the report button in group profile currently
  does nothing by default when pressed, its action needs to be handled manually using
  TapUIChatProfileListener.
- By default, TapTalk activities will follow your project's app theme to show/hide
  action bar in activities.
- Setting `setAllTapTalkActivityActionBarEnabled` to true and `setTapTalkChatActivityActionBarEnabled`
  to false will disable action bar in TapTalk default chat room, but enable it in
  other TapTalk activities, and vice versa.
- TapTalk.io's default message bubble layouts generally have a 8dp bottom margin and
  no top margin.
- The message type for custom bubbles should start with 3 as the prefix.
- 'Disabling add contact feature will also hide the following: Add to Contacts button
  in chat room, Add to Contacts button in user profile, New Contact button in start
  new chat page, Scan QR Code button in start new chat page.'
- Disabling this feature when the user has previously used it will not remove the
  user's existing messages that has been sent to the Saved Messages chat room.
- When TapTalk.io framework is integrated to your app with the UI implementation method,
  you can add customized chat message bubbles to be used in chat.
- To add a custom bubble, you need to implement recyclerView dependency to your app-level
  build.gradle file.
- When TapTalk.io framework is integrated to your app with the UI/combine implementation
  method, you can customize chat room's navigation bar layout to your preferences.
- To customize chat rooms' navigation bar layout, create a custom navigation bar XML
  layout.
- Extend TapBaseChatRoomCustomNavigationBarFragment to create a custom navigation
  bar fragment.
- Implement callbacks from the base navigation fragment class to update UI.
- Starting in Android 12 (API level 31), a generic web intent resolves to an activity
  in your app only if your app is approved for the specific domain contained in that
  web intent.
- Requires setup of assetlinks.json under .well-known directory for Android 12+
- Remember to save your App Key ID & your App Key Secret because it will only be shown
  once.
- Please remember to save your App Key ID & your App Key Secret because it will only
  be shown once.
- Make sure to install git-lfs before pod install, otherwise the pod install / pod
  update will return an error.
- To get BASE_URL you can follow our documentation on how to get Base URL.
- Starting from version 2.16.0, location attachment will be enabled by default even
  when Google Places API Key is not provided, but location search will be hidden.
- An application integrated with TapTalk.io framework will keep executing certain
  tasks even when the app is on the background if the conditions are met.
- You have to implement `application:didRegisterForRemoteNotificationsWithDeviceToken`
  and `application:didReceiveRemoteNotification` to handle and receive notification
  from TapTalk.io.
- Don't forget to register for exception handler inside `application:didFinishLaunchingWithOptions:`
  method and implement `handleExceptions` method in **appDelegate** class to make
  sure TapTalk.io able to handle exceptions.
- authentication should only be called once before the user is logged in or when the
  callback tapTalkRefreshTokenExpired is triggered
- You have to implement application:didRegisterForRemoteNotificationsWithDeviceToken
  and application:didReceiveRemoteNotification to handle and receive notification
  from TapTalk.io.
- 'Don''t forget to register for exception handler inside application:didFinishLaunchingWithOptions:
  method and implement handleExceptions method in appDelegate class to make sure TapTalk.io
  able to handle exceptions.'
- Please make sure that you have finished authentication by calling `authenticateWithAuthTicket:connectWhenSuccess:`
  method, otherwise, it will return an error
- The default value for auto connect is enabled
- An authenticated user account allows the instance to communicate and interact with
  the server
- Requires setup of OAuth2 credentials in TapTalk console.
- Please make sure that you have finished authentication by calling `authenticateWithAuthTicket:connectWhenSuccess:`
  method
- 'Make sure to add #import <TapTalk/TapTalk.h> before registering the delegate'
- 'Make sure to add #import <TapUI.h> before registering the delegate'
- 'Make sure to add #import <TapCoreMessageManager.h> before registering the delegate'
- 'Make sure to add #import <TapCoreRoomListManager.h> before registering the delegate'
- 'Make sure to add #import <TapCoreChatRoomManager.h> before registering the delegate'
- 'Make sure to add #import <TapCoreContactManager.h> before registering the delegate'
- Push notification is a very important aspect in a chat application.
- If you implement Taptalk.io with the UI implementation method, incoming notifications
  will be handled within our library.
- If you prefer having full control over the push notifications, the core implementation
  method can be used.
- A .p8 key file is required to send push notifications.
- Remember the Key ID provided in the information or from the downloaded file.
- Push notification for iOS client apps are sent using Apple Push Notification service
  (APNs).
- default value is enabled for auto contact sync
- Ensure the user has the correct permissions for the actions performed.
- 'TapTalkImplementationType consists of 3 types which are: TapTalkImplementationTypeUI,
  TapTalkImplementationTypeCore, TapTalkImplementationTypeCombine'
- You can customize the appearance of the chat UI.
- It is recommended to change all default color values accordingly.
- You can choose to specified one of the following methods. If you wish to change
  just the font, just use `setComponentFont` method, and if you wish to change just
  the text color, you can use `setTextColor` method.
- You can customize the appearance of the chat UI using the TAPStyleManager.
- Uses UIColor for setting colors
- Set default font in TapStyleManager method
- You can choose to specify one of the following methods. If you wish to change just
  the font, just use setComponentFont method, and if you wish to change just the text
  color, you can use setTextColor method.
- Read status is enabled by default.
- Disabling add contact feature will hide several buttons.
- Delete account button is hidden and does nothing if pressed by default, its action
  needs to be handled manually using TapUIMyAccountDelegate.
- The report button is hidden by default, and the report button in group profile currently
  does nothing by default when pressed, its action needs to be handled manually using
  TapUIChatProfileDelegate.
- Your table view cell needs to have height constraint or top & bottom constraint
  to able to display the cell because TapTalk.io implements automatic row height.
- Please note that the message type for custom bubbles should start with 3 as the
  prefix.
- Construct TAPMessageModel before sending custom messages
- YourCustomNavBarManager is a singleton class, means its properties are retained
  until the app is closed.
- You should reset any state contained in YourCustomNavBarManager class inside the
  tapTalkNavigationBarManagerChatRoomDidClose callback.
- iOS will only attempt to fetch the AASA file over a secure connection (HTTPS).
- Uses application/json MIME type.
- You may set up a deep link for your preferred URL so that when users taps the defined
  URL from anywhere outside your app in their iOS device, they will be redirected
  to your app for a smoother experience.
- Our Android SDK provides you with various methods to initialize, configure, and
  build the chat from the client-side - no server-side implementation is required.
- Please remember to save your App Key ID & your App Key Secret because it will only
  be shown once and will be used in TapTalk.io initialization
- For SDK version 1.4.1 and above, use_modular_headers! is replaced with use_frameworks!
  to handle some compatibility issues.
- Please make sure you implement ios version 11.0 for minimum deployment target to
  obtain latest update of TapTalk.io SDK.
- Please make sure you implement ios version 11.0 for minimum deployment target to
  obtain latest update of TapTalk.io SDK
- You can change Information Property Value based on your own words and will be appears
  when the application needs the permission.
- To get BASE_URL you can follow our documentation on how to get Base URL on TapTalk.io.
- To enable location search result preview while sending location message, a Google
  Places API Key is required.
- An authenticated user account allows the instance to communicate and interact with
  the server.
- Requires setup of TapTalk connected app
- Predefined types for each chat message bubble.
- Custom message bubble types should start with '3' as prefix.
- Please remember to save your Server Key ID & your Server Key Secret because it will
  only be shown once.
- Server Key ID and Server Key Secret will be used to construct a request and add
  as a HTTP Header.
- The auth ticket can be used to request an access token from the chat server.
- Can't use both `recipientXCUserID` and `xcRoomID` parameters at the same time in
  one request. Use `recipientXCUserID` for sending to personal room type and `xcRoomID`
  for sending to other room type.
- Authentication Ticket is valid for 1 hour before it expires.
- Some objects may return nulls in deeply nested fields
- API calls may be rate-limited
- MeetTalk SDK is an extension of PowerTalk, which includes the ability to initiate
  a voice/video call.
- Not all of the listener callbacks are required to be handled, but we strongly suggest
  to override onTapTalkRefreshTokenExpired to handle authentication when the user's
  session has expired.
- Create a new application from your dashboard
- Login to TapTalk.io Dashboard, then choose Development -> Apps
- Make sure to install git-lfs before pod install, otherwise the pod install / pod
  update will return an error
- MeetTalk iOS SDK currently requires bitcode to be disabled in the project target's
  Build Settings
- Payload includes message fields such as messageID, localID, type, typeName, body,
  and more.
- Field types include string, integer, boolean, and object.
- Initiating a call is currently only available in personal chat rooms.
- MeetTalk iOS SDK listens to various events on the client app.
- 'Make sure to add #import <MeetTalk/MeetTalk.h> before registering the delegate'
- Not all of the delegate callbacks are required to be handled, but we strongly suggest
  to override tapTalkRefreshTokenExpired to handle authentication when the user's
  session has expired.
- Not all of the listener callbacks are required to be handled, but we strongly suggest
  to override `onTapTalkRefreshTokenExpired` to handle authentication when the user's
  session has expired.
- MeetTalk iOS SDK currently requires bitcode to be disabled in the project target's
  Build Settings.
errors:
- '40002: User phone is required'
- '40001: Request headers are required (API-Key)'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '40002 (ParamValidationFailed): The parameter validation failed.'
- '40002 (HeaderValidationFailed): The request header validation failed.'
- '49900 (TierNotSelected): The organization has not selected the tier.'
- 'ParamValidationFailed: The parameter validation failed.'
- 'HeaderValidationFailed: The request header validation failed.'
- 'TierNotSelected: The organization has not selected the tier.'
- '400 Bad Request: Check your request format'
- '401 Unauthorized: Ensure you have a valid Auth Ticket'
- '40002: Customer user ID is required'
- '49900: Please select a tier'
- '401 Unauthorized: Check client credentials'
- '429 Too Many Requests: Slow down your requests'
- '401 Unauthorized: Recheck Authentication Ticket or user ID'
- '401 Unauthorized: Check that the client ID and secret are correct.'
- 'onError: Error handling for user update failures.'
- 'onError: Error code and error message may be provided.'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Verify your authentication credentials'
- '40001: HTTP request header validation failed.'
- '40002: API request parameter validation failed.'
- '40101: The request failed because HTTP request header Authorization is not provided
  when required.'
- '40102: The request failed because HTTP request header Authorization format is invalid.'
- '40103: The request failed because the server failed to parse the token or the token
  is not found or invalid. Client should get a new token.'
- '40104: The request failed because the token has expired. Client should get a new
  token.'
- '40105: The request failed because the token owner does not belong to the client''s
  info. Client should get a new token.'
- '40106: The request failed because the user is not found for the specified token.'
- '49101: The authentication request failed because the app key is not provided.'
- '49102: The authentication request failed because server failed to parse the app
  key, or the app key is invalid.'
- '49103: The authentication request failed because the provided app key is not found.'
- '49104: The authentication request failed because the provided app key is not intended
  to be used with the client''s platform.'
- '49106: The authentication request failed because the app key has expired.'
- '49201: The authentication request failed because the app is not enabled by the
  customer.'
- '49202: The authentication request failed because the app is not available because
  either the app, project, or customer is currently suspended.'
- '49203: The authentication request failed because the app is not found.'
- '50001: The authentication request failed because an error occurred while validating
  the app key.'
- '90001: The request failed because TapTalk.io active user is not found.'
- '90002: The request failed because access token is not available, authentication
  is needed.'
- '90003: The request failed because user already connected to TapTalk.io.'
- '90004: The request failed because the device is not connected to the server.'
- '90005: The request failed because provided authentication ticket is invalid.'
- '90006: The request failed because user is not authenticated.'
- '90101: The request failed because the selected group chat has already been deleted.'
- '90102: The request failed because another admin needs to be assigned before leaving
  the group.'
- '90301: The request failed because file URI data was not found.'
- '90302: The request failed because maximum file size was exceeded.'
- '90303: The server failed to process the file upload due to user cancellation.'
- '90304: The request failed because image compression was unsuccessful.'
- '90305: The request failed because an invalid message type was provided.'
- '90306: The request failed because media caption exceeds the character limit.'
- '401 Unauthorized: Invalid access token.'
- '403 Forbidden: Insufficient permissions for this access.'
- 'USER_NOT_FOUND: Check if the user ID is correct.'
- 'INVALID_TOKEN: Ensure the OAuth token is valid and not expired.'
- Failed to get room data
- Failed to send custom message
- '40002: Param ''xcUserID'' is required'
- '40001: Request headers are required (Server-Key)'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Check the authentication credentials'
- 'RoomNotFound: The room is not found'
- '40002: Param ''contacts'' cannot be empty'
- '40401: Room is not found'
- 'ParamValidationFailed: Param ''xcRoomID'' is required'
- 'HeaderValidationFailed: Request headers are required (Server-Key)'
- 'RoomNotFound: Room is not found'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Authentication Ticket
  - TapTalk
  - TapTalkDelegate
  - TapUIRoomListDelegate
  - TapUIChatRoomDelegate
  - TAPMessageModel
  - TAPRoomModel
  - TAPUserModel
  - TAPCustomKeyboardItemModel
  - TapCoreContactManager
client:
  base_url: https://taptalk.io
  auth:
    type: oauth2
source_metadata: null
