resources:
- name: cookies
  endpoint:
    path: /features/cookies
    method: GET
    data_selector: cookies
    params: {}
- name: collections
  endpoint:
    path: /list/collections
    method: GET
- name: requests
  endpoint:
    path: /list/requests
    method: GET
- name: environments
  endpoint:
    path: /list/environments
    method: GET
notes:
- Use // @ts-check at the top of the script to enable TypeScript validation.
- Copy tc-types.d.ts to your project and reference it at the top for VS Code autocomplete
  suggestions.
- Lightweight and easy to use REST API Client.
- Supports Collections and Environment variables.
- 'Scriptless Testing: Easily test API responses with a GUI-based interface.'
- 'Local Storage: The extension saves all data locally on the user''s device.'
- 'Git Sync: Save requests data in your Git repository for team collaboration.'
- 'Advanced CLI: Run requests, collections from the terminal and integrate with CI
  & CD.'
- Please restart VS Code after updating the settings.
- Requests created before enabling the Git sync feature are not saved automatically.
  To save them, create a thunder-tests folder and copy the collections and environments
  folders from the default storage into it.
- If you use both settings, the Save to Workspace option will take precedence.
- 'Common Variables: The following variables are available for all the requests {{request_name}},
  {{collection_name}} and {{folder_name}}'
- Setting Environment variables is supported in the Tests tab using UI and scripting.
- Thunder Client integrates with secret managers like Azure Key Vault and AWS Secrets
  Manager to fetch secrets and use variables in your requests with the format {{variable}}.
- OAuth 2.0's callback url needs to be entered into your oauth server trusted redirect
  url list.
- OAuth authentication credentials are sent via header or body.
- OAuth 2.0's callback url, when grant type is Authorization Code, needs to be entered
  into your oauth server trusted redirect url list.
- You can use the provided callback url to get access code from auth server to extension.
- This feature is available only in the paid version.
- You can chain requests at request, folder & collection level
- Run multiple pre requests in sequence
- Run pre-request based on condition
- Re-order pre requests using drag & drop
- To view the logs, select `Show Logs` from the 'More Actions' menu.
- To view the logs open `Output` Window and select `Thunder Client` in filter dropdown.
- You need to set in `workspace -> .vscode -> settings.json` for CLI to use proxy.
- VS Code proxy setting - https://code.visualstudio.com/docs/setup/network#_proxy-server-support
- When the response of the request is xml, the menu will show Convert To Json option
- Click Convert To Json to see json converted value in Output window
- Array can tested using array filters
- The following filter operations are supported `*, =, !=, <=, <, >=, >, *=, ^=, $=`
- '*=` filters using `contains` operation'
- '`^=` filters using `startsWith` operation'
- '`$=` filters using `endsWith` operation'
- To access array items from the end use negative index number `json.items[-2].id`
- To set a variable in the local environment use {{variable, local}}.
- To set a variable in the global environment use {{variable, global}}.
- The feature is in Beta, please test and let us know feedback
- Now you can see json and perform tests using Json Query dropdown option
- You can also use Set Env Variable dropdown option to save response properties to
  environment.
- Execute the request again after adding tests to see the results
- Scripting feature is available only in the paid version.
- The default location will be the Active Environment when you use {{variable}}.
- You can use a scope to explicitly control which environment variable to set.
- Environment variables can be set for active, local, and global environments.
- The feature is useful for Response Data Visualisation
- The scripting feature is available only in the paid version.
- This feature is available in the paid version.
- You can set collection and request specific env variables in scripting using request
  scope.
- These variable values are available during the execution of the request only. The
  data is not saved to a file.
- Comprehensive guide for converting Postman scripts to Thunder Client scripts.
- Custom Filters feature is deprecated and not recommended.
- Migrate to Inline scripting from Custom Filters.
- License management feature available for community and paid plans only.
- CLI feature is available only in the paid version.
- Function filters are useful to perform advanced data manipulation and the syntax
  is inspired from Jinja Filters.
- The filters can be used in Environment Variables and Tests.
- CLI feature is available in the paid version.
- Please make sure the commands are run from the root of the project.
- This feature is deprecated and will be removed in future releases. Please use Import
  JS Files instead.
- CLI and Extension are integrated seamlessly, so you can access requests data from
  the terminal without any additional configuration.
- License management is available for the community and paid plans only.
- The input file can be in csv, json formats.
- CLI can generate reports in cli, csv, html, json, xml and nunit formats.
- This step is not necessary for users of the free version.
- The list command is used to display the list of collections, requests, and environments.
- This feature is only available in the Business and Enterprise plans.
- The CLI will use the current working directory as workspace directory, but if the
  data is in different workspace directory then use the --ws 'fullpathToGitWorkspace'
  to specify the workspace path.
- The CLI can generate reports in cli, csv, html, json, xml and nunit formats.
- The CLI will use the current working directory as workspace directory, but if the
  data is in different workspace directory then use the '--ws 'fullpathToGitWorkspace''
  to specify the workspace path.
- If you want to stop collection execution of other requests when a request test fails
  then use the argument '--stop-on-fail'.
errors: []
auth_info:
  mentioned_objects: []
client:
  base_url: https://www.thunderclient.com
source_metadata: null
