resources:
- name: channelData
  endpoint:
    path: /services/data/vXX.X/sobjects/channelData
    method: GET
    data_selector: records
    params: {}
- name: AgentPresence
  endpoint:
    path: /services/data/vXX.X/sobjects/AgentPresence
    method: GET
    data_selector: records
    params: {}
- name: Conversations API
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: data
    params: {}
- name: test_results
  endpoint:
    path: /test/results
    method: GET
    data_selector: results
- name: load_test_1
  endpoint:
    path: /load_test/1
    method: GET
    data_selector: test_results
    params: {}
- name: soak_test_2
  endpoint:
    path: /soak_test/2
    method: GET
    data_selector: test_results
    params: {}
- name: load_test_3
  endpoint:
    path: /load_test/3
    method: GET
    data_selector: test_results
    params: {}
- name: soak_test_4
  endpoint:
    path: /soak_test/4
    method: GET
    data_selector: test_results
    params: {}
- name: soak_test_5
  endpoint:
    path: /soak_test/5
    method: GET
    data_selector: test_results
    params: {}
- name: soak_test_6
  endpoint:
    path: /soak_test/6
    method: GET
    data_selector: test_results
    params: {}
- name: soak_test_7
  endpoint:
    path: /soak_test/7
    method: GET
    data_selector: test_results
    params: {}
- name: soak_test_8
  endpoint:
    path: /soak_test/8
    method: GET
    data_selector: test_results
    params: {}
- name: cisco_contact_center_integration
  endpoint:
    path: /services/data/v4.5/cisco_contact_center_integration
    method: GET
    data_selector: records
    params: {}
- name: channelData
  endpoint:
    path: /cx/4.5/channeldata
    method: GET
    data_selector: records
    params: {}
- name: ChannelConnector
  endpoint:
    path: /cx/4.5/channelconnector
    method: GET
    data_selector: records
    params: {}
- name: load_test
  endpoint:
    path: /load_test
    method: GET
    data_selector: results
    params: {}
- name: soak_test
  endpoint:
    path: /soak_test
    method: GET
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: chat_volume
  endpoint:
    path: /chat/volume
    method: GET
    data_selector: totalChats
    params: {}
- name: agent_participation
  endpoint:
    path: /agent/participation
    method: GET
    data_selector: numberOfAgents
    params: {}
- name: agent
  endpoint:
    path: /services/data/vXX.X/sobjects/Agent
    method: GET
    data_selector: records
    params: {}
- name: conversation
  endpoint:
    path: /services/data/vXX.X/sobjects/Conversation
    method: GET
    data_selector: records
    params: {}
- name: initial_processor_node
  endpoint:
    path: /api/initial_processor
    method: POST
    data_selector: intents
    params: {}
- name: action_node
  endpoint:
    path: /api/action_node
    method: POST
    data_selector: actions
    params: {}
- name: condition_node
  endpoint:
    path: /api/condition_node
    method: POST
    data_selector: conditions
    params: {}
- name: text_message_node
  endpoint:
    path: /api/text_message_node
    method: POST
    data_selector: messages
    params: {}
- name: final_processor_node
  endpoint:
    path: /api/final_processor
    method: POST
    data_selector: responses
    params: {}
- name: Conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
- name: Media Routing Domains
  endpoint:
    path: /media-routing-domains
    method: GET
- name: Queues
  endpoint:
    path: /queues
    method: GET
- name: Agents
  endpoint:
    path: /agents
    method: GET
- name: Tasks
  endpoint:
    path: /tasks
    method: GET
- name: Routing Policies
  endpoint:
    path: /routing-policies
    method: GET
- name: Media Routing Domain
  endpoint:
    path: /cx/4.5/media-routing-domain
    method: GET
    data_selector: records
- name: Channel Type
  endpoint:
    path: /cx/4.5/channel-related-terms
    method: GET
    data_selector: records
- name: Queue
  endpoint:
    path: /cx/4.5/queue
    method: GET
    data_selector: records
- name: Channel
  endpoint:
    path: /cx/4.5/channel-related-terms
    method: GET
    data_selector: records
- name: Routing Attributes
  endpoint:
    path: /cx/4.5/routing-attribute
    method: GET
    data_selector: records
- name: Pull Mode Requests
  endpoint:
    path: /cx/4.5/pull-mode-requests
    method: GET
    data_selector: records
- name: List
  endpoint:
    path: /cx/4.5/unified-admin-guide
    method: GET
    data_selector: records
- name: Conversations API
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
- name: Routing Attributes
  endpoint:
    path: /routing-attributes
    method: GET
    data_selector: attributes
    params: {}
- name: Media Routing Domains
  endpoint:
    path: /media-routing-domains
    method: GET
    data_selector: domains
    params: {}
- name: Routing Queues
  endpoint:
    path: /routing-queues
    method: GET
    data_selector: queues
    params: {}
- name: Agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
    params: {}
- name: Tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
    params: {}
- name: cisco_contact_center
  endpoint:
    path: /api/v1/cisco/contact-center
    method: GET
    data_selector: records
- name: agent_desk
  endpoint:
    path: /api/v1/agent/desk
    method: GET
    data_selector: records
- name: conversation
  endpoint:
    path: /services/data/vXX.X/sobjects/Conversation
    method: GET
    data_selector: records
    params: {}
- name: media_routing_domain
  endpoint:
    path: /media/routing/domains
    method: GET
    data_selector: domains
- name: Push Routing
  endpoint:
    path: /push-routing
    method: GET
    data_selector: requests
    params: {}
- name: Pull Routing
  endpoint:
    path: /pull-routing
    method: GET
    data_selector: requests
    params: {}
- name: channelData
  endpoint:
    path: /api/channelData
    method: GET
    data_selector: records
- name: Agent
  endpoint:
    path: /api/agent
    method: GET
    data_selector: records
- name: Routing Attribute
  endpoint:
    path: /routing_attributes
    method: GET
    data_selector: attributes
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: cim_messages
  endpoint:
    path: /api/v1/cim/messages
    method: GET
    data_selector: records
    params: {}
- name: CIM Messages
  endpoint:
    path: /api/v1/cim/messages
    method: GET
    data_selector: messages
    params: {}
- name: Channel Session Data
  endpoint:
    path: /api/v1/channel/session
    method: GET
    data_selector: sessionData
    params: {}
- name: media_routing_domain
  endpoint:
    path: /media/routing/domain
    method: GET
    data_selector: data
    params: {}
- name: Conversations API
  endpoint:
    path: /services/data/vXX.X/conversations
    method: GET
    data_selector: records
    params: {}
- name: Media Routing Domain
  endpoint:
    path: /cx/4.5/media-routing-domain
    method: GET
- name: Channel Type
  endpoint:
    path: /cx/4.5/channel-related-terms
    method: GET
- name: Queue
  endpoint:
    path: /cx/4.5/queue
    method: GET
- name: Channel
  endpoint:
    path: /cx/4.5/channel-related-terms
    method: GET
- name: Routing Attributes
  endpoint:
    path: /cx/4.5/routing-attribute
    method: GET
- name: Queue Steps
  endpoint:
    path: /cx/4.5/unified-admin-guide
    method: GET
- name: Agent States
  endpoint:
    path: /cx/4.5/agent-states
    method: GET
- name: channelData
  endpoint:
    path: /cx/4.5/channeldata
    method: GET
    data_selector: records
- name: ChannelConnector
  endpoint:
    path: /cx/4.5/channelconnector
    method: GET
    data_selector: records
- name: routing_attribute
  endpoint:
    path: /routing_attributes
    method: GET
    data_selector: attributes
- name: Conversations API
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
- name: Conversations API
  endpoint:
    path: /cx/4.5/conversations-api
    method: GET
    data_selector: records
    params: {}
- name: cim_messages
  endpoint:
    path: /cim/messages
    method: GET
    data_selector: records
- name: CIM Messages
  endpoint:
    path: /cim/messages
    method: GET
    data_selector: records
- name: Channel Session Data
  endpoint:
    path: /channel/session/data
    method: GET
    data_selector: records
- name: Channel
  endpoint:
    path: /services/data/vXX.X/sobjects/Channel
    method: POST
    data_selector: records
    params:
      name: C1
      type: WhatsApp
      default_queue: Q1
- name: Queue
  endpoint:
    path: /services/data/vXX.X/sobjects/Queue
    method: POST
    data_selector: records
    params:
      name: Q1
      linked_mrd: xyz
- name: Routing Attributes
  endpoint:
    path: /services/data/vXX.X/sobjects/RoutingAttribute
    method: POST
    data_selector: records
    params:
      attributes:
      - name: English
        type: Boolean
      - name: Los Angeles
        type: Boolean
      - name: Broadband
        type: Proficiency
- name: Conversations API
  endpoint:
    path: /conversations
    method: GET
    data_selector: records
- name: customer_labels
  endpoint:
    path: /cx/4.5/supervisor-guide/Customer-Labels
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Conversations API
  endpoint:
    path: /cx/4.5/conversations-api
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Conversations API
  endpoint:
    path: /services/data/vXX.X/conversations
    method: GET
    data_selector: records
    params: {}
- name: web_widget
  endpoint:
    path: /web/widget
    method: GET
    data_selector: widget_data
- name: Conversations API
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
    params: {}
- name: CIM Messages
  endpoint:
    path: /cim/messages
    method: GET
    data_selector: messages
- name: Channel Config
  endpoint:
    path: /channel/config
    method: GET
    data_selector: config
- name: web_widget
  endpoint:
    path: /web/widget
    method: GET
    data_selector: widget_data
- name: chat_transcript
  endpoint:
    path: /widget-assets/chat-transcript/
    method: GET
    data_selector: transcript
- name: widgetConfigs
  endpoint:
    path: /widgetConfigs
    method: GET
    data_selector: response
    params: {}
- name: establishConnection
  endpoint:
    path: /establishConnection
    method: POST
    data_selector: response
    params: {}
- name: chatRequest
  endpoint:
    path: /chatRequest
    method: POST
    data_selector: response
    params: {}
- name: chat_transcript
  endpoint:
    path: /widget-assets/chat-transcript/
    method: GET
- name: plain_text_message
  endpoint:
    path: /cim-plain-text-message
    method: GET
- name: interactive_messages
  endpoint:
    path: /cim-button-message
    method: GET
- name: media_messages
  endpoint:
    path: /cim-media-messages
    method: GET
- name: file_message
  endpoint:
    path: /cim-media-messages
    method: GET
- name: url_message
  endpoint:
    path: /cim-url-message
    method: GET
- name: contact_message
  endpoint:
    path: /cim-contact-message
    method: GET
- name: location_message
  endpoint:
    path: /cim-location-message
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: widgetConfigs
  endpoint:
    path: /widgetConfigs
    method: GET
    data_selector: data
    params: {}
- name: establishConnection
  endpoint:
    path: /establishConnection
    method: POST
    data_selector: data
    params: {}
- name: chatRequest
  endpoint:
    path: /chatRequest
    method: POST
    data_selector: data
    params: {}
- name: sendMessage
  endpoint:
    path: /sendMessage
    method: POST
    data_selector: data
    params: {}
- name: chatEnd
  endpoint:
    path: /chatEnd
    method: POST
    data_selector: data
    params: {}
- name: uploadToFileEngine
  endpoint:
    path: /uploadToFileEngine
    method: POST
    data_selector: data
    params: {}
- name: Facebook Social Media Posts/Comments
  endpoint:
    path: /services/data/vXX.X/facebook-posts-comments
    method: GET
    data_selector: comments
    params: {}
- name: webhook
  endpoint:
    path: /facebook-connector/webhook/{{PAGE-ID}}
    method: POST
- name: agent
  endpoint:
    path: /api/v1/agent
    method: GET
    data_selector: data
    params: {}
- name: customer
  endpoint:
    path: /api/v1/customer
    method: GET
    data_selector: data
    params: {}
- name: Webhook
  endpoint:
    path: /instagram-connector/webhook/{{INSTAGRAM-USER-ID}}
    method: POST
    data_selector: data
    params: {}
- name: Facebook Social Media Posts/Comments
  endpoint:
    path: /facebook/social-media/posts-comments
    method: GET
    data_selector: comments
    params: {}
- name: webhook
  endpoint:
    path: /pa/set_webhook
    method: POST
    data_selector: status
    params: {}
- name: webhook
  endpoint:
    path: /facebook-connector/webhook/{{PAGE-ID}}
    method: POST
    data_selector: data
    params:
      verify_token: '{{FACEBOOK-PAGE-ACCESS-TOKEN}}'
- name: webhook
  endpoint:
    path: /instagram-connector/webhook/{{INSTAGRAM-USER-ID}}
    method: POST
- name: accounts
  endpoint:
    path: /me/accounts
    method: GET
    data_selector: data
- name: webhook
  endpoint:
    path: /pa/set_webhook
    method: POST
    data_selector: ''
    params: {}
- name: register_webhook
  endpoint:
    path: /telegram-connector/register-webhook
    method: POST
    data_selector: result
    params: {}
- name: getMe
  endpoint:
    path: /bot<telegram-botToken>/getMe
    method: GET
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: channelData
  endpoint:
    path: /api/v1/channelData
    method: GET
    data_selector: records
- name: Conversations API
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
    params: {}
- name: bots
  endpoint:
    path: /bot{token}/
    method: GET
    data_selector: result
    params: {}
- name: cisco_contact_center
  endpoint:
    path: /services/data/vXX.X/sobjects/CiscoContactCenter
    method: GET
    data_selector: records
    params: {}
- name: Conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
- name: register_webhook
  endpoint:
    path: /telegram-connector/register-webhook
    method: POST
    data_selector: result
- name: get_account_id
  endpoint:
    path: /2/users/by/username/<username>
    method: GET
    data_selector: data
- name: get_existing_webhook
  endpoint:
    path: /1.1/account_activity/all/{{DEV_ENV_LABEL}}/webhooks.json
    method: GET
    data_selector: webhooks
- name: delete_webhook
  endpoint:
    path: /1.1/account_activity/all/{{DEV_ENV_LABEL}}/webhooks/{{webhook_id}}.json
    method: DELETE
    data_selector: null
- name: register_subscribe_webhook
  endpoint:
    path: /twitter-connector/webhook/twitter/register-and-subscribe
    method: POST
    data_selector: null
- name: whatsapp_messages
  endpoint:
    path: /twilio-connector/twilio-msg/receive
    method: POST
- name: whatsapp_status
  endpoint:
    path: /twilio-connector/twilio-msg/status
    method: POST
- name: cisco_contact_center_integration
  endpoint:
    path: /cx/4.5/cisco-contact-center-integration
    method: GET
    data_selector: records
- name: Register Webhook
  endpoint:
    path: /configs/webhook
    method: POST
    params:
      url: '{FQDN}/360notifications'
      hostUrl: https://waba.360dialog.io
      apiKey: the key/token of the WhatsApp account
      authorization: WhatsApp number used for authentication
- name: Get Webhook
  endpoint:
    path: /configs/webhook
    method: GET
    params:
      hostUrl: https://waba.360dialog.io
      apiKey: the key/token of the WhatsApp number
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Conversations API
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
- name: Push Recording Link
  endpoint:
    path: /api/pushRecording
    method: POST
    data_selector: response
- name: Twitter Channel
  endpoint:
    path: /twitter-connector
    method: POST
- name: cim-messages
  endpoint:
    path: /cim-messages
    method: POST
- name: channel_type
  endpoint:
    path: /new_channel_type
    method: POST
    data_selector: channel_type_data
    params: {}
- name: channel_provider
  endpoint:
    path: /new_channel_provider
    method: POST
    data_selector: channel_provider_data
    params: {}
- name: channel_connector
  endpoint:
    path: /create_connector
    method: POST
    data_selector: channel_connector_data
    params: {}
- name: channel
  endpoint:
    path: /new_channel
    method: POST
    data_selector: channel_data
    params: {}
- name: customer_schema
  endpoint:
    path: /create_new_attribute
    method: POST
    data_selector: customer_schema_data
    params: {}
- name: get_account_id
  endpoint:
    path: /2/users/by/username/<username>
    method: GET
    data_selector: data
    params: {}
- name: get_existing_webhook
  endpoint:
    path: /1.1/account_activity/all/{{DEV_ENV_LABEL}}/webhooks.json
    method: GET
    data_selector: webhooks
    params: {}
- name: delete_existing_webhook
  endpoint:
    path: /1.1/account_activity/all/{{DEV_ENV_LABEL}}/webhooks/{{webhook_id}}.json
    method: DELETE
    data_selector: null
    params: {}
- name: register_subscribe_webhook
  endpoint:
    path: /twitter-connector/webhook/twitter/register-and-subscribe
    method: POST
    data_selector: null
    params: {}
- name: Conversations API
  endpoint:
    path: /cx/4.5/conversations-api-3rd-party-apps
    method: GET
    data_selector: records
- name: CRM Connectors
  endpoint:
    path: /cx/4.5/crm-connectors
    method: GET
    data_selector: records
- name: Add Channel Configuration
  endpoint:
    path: /connector-configurations
    method: POST
    data_selector: ''
    params: {}
- name: Get Channel Configuration
  endpoint:
    path: /ccm/channel-connectors/configurations/:serviceIdentifier
    method: GET
    data_selector: ''
    params: {}
- name: whatsapp_sandbox
  endpoint:
    path: /twilio-connector/twilio-msg/receive
    method: POST
- name: whatsapp_status
  endpoint:
    path: /twilio-connector/twilio-msg/status
    method: POST
- name: Conversations API
  endpoint:
    path: /services/data/vXX.X/conversations
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /api/v1/agents
    method: GET
    data_selector: data
- name: session
  endpoint:
    path: /api/v1/sessions
    method: GET
    data_selector: data
- name: webhook
  endpoint:
    path: /configs/webhook
    method: POST
    params:
      url: '{FQDN}/360notifications'
      hostUrl: https://waba.360dialog.io
      apiKey: the key/token of the WhatsApp account
      authorization: WhatsApp number format
- name: get_webhook
  endpoint:
    path: /configs/webhook
    method: GET
    params:
      hostUrl: https://waba.360dialog.io
      apiKey: the key/token of the WhatsApp number
- name: cim-messages
  endpoint:
    path: /message
    method: POST
- name: channel_data
  endpoint:
    path: /api/v1/channels
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
    params: {}
- name: channel_type
  endpoint:
    path: /channel/type
    method: POST
    data_selector: channelType
    params: {}
- name: channel_provider
  endpoint:
    path: /channel/provider
    method: POST
    data_selector: channelProvider
    params: {}
- name: channel_connector
  endpoint:
    path: /channel/connector
    method: POST
    data_selector: channelConnector
    params: {}
- name: channel
  endpoint:
    path: /channel
    method: POST
    data_selector: channel
    params: {}
- name: customer_attribute
  endpoint:
    path: /customer/attribute
    method: POST
    data_selector: customerAttribute
    params: {}
- name: Add Channel Configuration
  endpoint:
    path: /connector-configurations
    method: POST
    data_selector: none
    params: {}
- name: Get Channel Configuration
  endpoint:
    path: /ccm/channel-connectors/configurations/:serviceIdentifier
    method: GET
    data_selector: none
    params: {}
- name: asynchronous_communication
  endpoint:
    path: /custom-connector-bot-communication
    method: POST
    data_selector: response
    params:
      conversationId: required
      botId: required
      BotMessage: required
- name: Conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: records
- name: agent_sla_thresholds
  endpoint:
    path: /conversation-manager/agent-sla-thresholds
    method: POST
- name: view_agent_sla_thresholds
  endpoint:
    path: /conversation-manager/agent-sla-thresholds
    method: GET
- name: message
  endpoint:
    path: /cim/message
    method: POST
    data_selector: message
    params: {}
- name: intent
  endpoint:
    path: /cim/intent
    method: POST
    data_selector: intent
    params: {}
- name: cisco_contact_center_integration
  endpoint:
    path: /cisco/contact/center/integration
    method: GET
- name: Conversations API
  endpoint:
    path: /services/data/v4.5/conversations
    method: GET
    data_selector: records
- name: asynchronous_communication
  endpoint:
    path: /custom_connector/asynchronous_communication
    method: POST
    data_selector: response
    params:
      conversationId: REQUIRED
      botId: REQUIRED
      BotMessage: REQUIRED
- name: Conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
    params: {}
- name: customer_message
  endpoint:
    path: /cim/message
    method: POST
    data_selector: message
    params: {}
- name: intent
  endpoint:
    path: /cim/intent
    method: POST
    data_selector: intent
    params: {}
- name: cim_messages
  endpoint:
    path: /api/v1/cim/messages
    method: GET
    data_selector: messages
- name: mod_rayo
  endpoint:
    path: https://developer.signalwire.com/freeswitch/FreeSWITCH-Explained/Modules/mod_rayo_3375450/
    method: GET
- name: mod_amd
  endpoint:
    path: https://github.com/seanbright/mod_amd
    method: GET
- name: mod_avmd
  endpoint:
    path: https://developer.signalwire.com/freeswitch/FreeSWITCH-Explained/Modules/mod_avmd_1049372/
    method: GET
- name: Conversations API
  endpoint:
    path: /services/data/vXX.X/conversations
    method: GET
    data_selector: records
- name: mod_rayo
  endpoint:
    path: https://developer.signalwire.com/freeswitch/FreeSWITCH-Explained/Modules/mod_rayo_3375450/
    method: GET
- name: mod_amd
  endpoint:
    path: https://github.com/seanbright/mod_amd
    method: GET
- name: mod_avmd
  endpoint:
    path: https://developer.signalwire.com/freeswitch/FreeSWITCH-Explained/Modules/mod_avmd_1049372/
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: cim_messages
  endpoint:
    path: /api/v1/cim_messages
    method: GET
    data_selector: messages
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: CREATE
    data_selector: CREATE TABLE contacts (id varchar(40) PRIMARY KEY NOT NULL, customer_number
      varchar(20) NOT NULL, campaign_type varchar(20) NOT NULL, ivr varchar(20), gateway_id
      varchar(40) NOT NULL, status varchar(20), call_result varchar(40), received_time
      timestamp with time zone, dial_time timestamp with time zone, campaign_id varchar(40)
      NOT NULL, campaign_contact_id varchar(40), start_time timestamp with time zone,
      end_time timestamp with time zone, priority integer, dialing_mode varchar(20),
      routing_mode varchar(20), resource_id varchar(40), queue_name varchar(20));
- name: voice-connector
  endpoint:
    path: /services/data/v4.5/voice-connector
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /contacts
    method: CREATE
    data_selector: contacts
    params: {}
- name: CxIvr
  endpoint:
    path: /path/to/IVR
    method: POST
    data_selector: data
    params: {}
- name: CxQueue
  endpoint:
    path: /path/to/Queue
    method: POST
    data_selector: data
    params: {}
- name: webrtc
  endpoint:
    path: /path/to/WebRTC
    method: POST
    data_selector: data
    params: {}
- name: Progressive Outbound Agent Transfer
  endpoint:
    path: /path/to/ProgressiveOutbound
    method: POST
    data_selector: data
    params: {}
- name: local_extension
  endpoint:
    path: /path/to/local_extension
    method: POST
    data_selector: data
    params: {}
- name: global_variables
  endpoint:
    path: /global-variables
    method: POST
    data_selector: global_variables
    params: {}
- name: sip_trunk
  endpoint:
    path: /sip-trunk
    method: POST
    data_selector: sip_trunk
    params: {}
- name: outbound_routes
  endpoint:
    path: /outbound-routes
    method: POST
    data_selector: outbound_routes
    params: {}
- name: inbound_routes
  endpoint:
    path: /inbound-routes
    method: POST
    data_selector: inbound_routes
    params: {}
- name: acl
  endpoint:
    path: /acl
    method: POST
    data_selector: acl
    params: {}
- name: event_socket
  endpoint:
    path: /etc/freeswitch/autoload_configs/event_socket.conf.xml
    method: POST
    data_selector: settings
    params:
      listen-ip: 0.0.0.0
      listen-port: '8021'
      apply-inbound-acl: esl
- name: switch_config
  endpoint:
    path: /etc/freeswitch/autoload_configs/switch.conf.xml
    method: POST
    data_selector: params
    params:
      max-sessions: '100000'
      sessions-per-second: '100000'
- name: Dialplan
  endpoint:
    path: /dialplan
    method: POST
    data_selector: dialplans
- name: global-variables
  endpoint:
    path: /dialplan/global-variables
    method: POST
    data_selector: variables
    params: {}
- name: sip-trunk
  endpoint:
    path: /sip-trunk
    method: POST
    data_selector: trunk
    params: {}
- name: outbound-routes
  endpoint:
    path: /dialplan/outbound-routes
    method: POST
    data_selector: routes
    params: {}
- name: inbound-routes
  endpoint:
    path: /dialplan/inbound-routes
    method: POST
    data_selector: inboundRoutes
    params: {}
- name: acl
  endpoint:
    path: /acl
    method: POST
    data_selector: acls
    params: {}
- name: CIMEvents
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: event_socket
  endpoint:
    path: /etc/freeswitch/autoload_configs/event_socket.conf.xml
    method: POST
    data_selector: settings
    params:
      listen_ip: 0.0.0.0
      listen_port: '8021'
      apply_inbound_acl: esl
- name: switch_config
  endpoint:
    path: /etc/freeswitch/autoload_configs/switch.conf.xml
    method: PUT
    data_selector: params
    params:
      max_sessions: '100000'
      sessions_per_second: '100000'
- name: CIMEvents
  endpoint:
    path: /cim/events
    method: GET
    data_selector: events
- name: channel_session_detail
  endpoint:
    path: /cx/4.5/channel-session-detail
    method: GET
    data_selector: records
- name: ivr_summary_report
  endpoint:
    path: /cx/4.5/ivr-summary-report
    method: GET
    data_selector: records
- name: ivr_detail_report
  endpoint:
    path: /cx/4.5/ivr-detail-report
    method: GET
    data_selector: records
- name: conversation_volume_by_disposition
  endpoint:
    path: /cx/4.5/conversation-volume-by-disposition
    method: GET
    data_selector: records
- name: queue_wise_stats_summary
  endpoint:
    path: /cx/4.5/queue-wise-stats-summary
    method: GET
    data_selector: records
- name: wrap_up_summary
  endpoint:
    path: /cx/4.5/wrap-up-summary
    method: GET
    data_selector: records
- name: queue_stats_today
  endpoint:
    path: /cx/4.5/queue-stats-today
    method: GET
    data_selector: records
- name: historical_conversation_summary
  endpoint:
    path: /cx/4.5/historical-conversation-summary
    method: GET
    data_selector: records
- name: agent_availability_report
  endpoint:
    path: /cx/4.5/agent-availability-report
    method: GET
    data_selector: records
- name: agent_state_analysis_report
  endpoint:
    path: /cx/4.5/agent-state-analysis-report
    method: GET
    data_selector: records
- name: agent_productivity_by_queue
  endpoint:
    path: /cx/4.5/agent-productivity-by-queue
    method: GET
    data_selector: records
- name: conversation_detail
  endpoint:
    path: /cx/4.5/conversation-detail
    method: GET
    data_selector: records
- name: transferred_tasks_per_queue
  endpoint:
    path: /cx/4.5/transferred-tasks-per-queue
    method: GET
    data_selector: records
- name: agent_task_detail
  endpoint:
    path: /cx/4.5/agent-task-detail
    method: GET
    data_selector: records
- name: channel_stats_summary
  endpoint:
    path: /cx/4.5/channel-stats-summary
    method: GET
    data_selector: records
- name: channel_stats_graph
  endpoint:
    path: /cx/4.5/channel-stats-graph
    method: GET
    data_selector: records
- name: queue_flushed_conversation_count
  endpoint:
    path: /cx/4.5/queue-flushed-conversation-count
    method: GET
    data_selector: records
- name: queue_flushed_conversation_count
  endpoint:
    path: /cx/4.5/queue-flushed-conversation-count
    method: GET
- name: flushed_conversations
  endpoint:
    path: /flushed_conversations
    method: GET
    data_selector: records
- name: Channel Vol by Disposition
  endpoint:
    path: /path/to/channel/vol/by/disposition
    method: GET
    data_selector: data
    params: {}
- name: Channel Vol by Disposition and Channel type
  endpoint:
    path: /path/to/channel/vol/by/disposition/and/type
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: channel_stats
  endpoint:
    path: /reports/channel_stats
    method: GET
    data_selector: data
    params: {}
- name: Channel Stats
  endpoint:
    path: /channel/stats/summary
    method: GET
    data_selector: report_data
- name: channel_session
  endpoint:
    path: /path/to/channel_session_endpoint
    method: GET
    data_selector: records
    params: {}
- name: Conversations API
  endpoint:
    path: /cx/4.5/conversations-api
    method: GET
    data_selector: records
- name: CIM Messages
  endpoint:
    path: /cx/4.5/cim-messages
    method: GET
    data_selector: records
- name: channel_session
  endpoint:
    path: /channel/session
    method: GET
    data_selector: channel_sessions
    params: {}
- name: agent_task
  endpoint:
    path: /agent/task/detail
    method: GET
    data_selector: conversation_tasks
- name: agent_task
  endpoint:
    path: /report/agent_task
    method: GET
    data_selector: records
    params: {}
- name: conversation_detail
  endpoint:
    path: /cx/4.5/conversation-detail
    method: GET
    data_selector: records
    params: {}
- name: conversation
  endpoint:
    path: /services/data/vXX.X/sobjects/Conversation
    method: GET
    data_selector: records
- name: conversation
  endpoint:
    path: /api/v1/conversation
    method: GET
    data_selector: conversations
- name: agent_productivity
  endpoint:
    path: /agent_productivity
    method: GET
    data_selector: report_data
- name: agent_productivity
  endpoint:
    path: /agent/productivity
    method: GET
    data_selector: report_data
    params: {}
- name: Agent State Analysis Report
  endpoint:
    path: /cx/4.5/agent-state-analysis-report
    method: GET
    data_selector: ''
    params: {}
- name: agent_state_analysis_report
  endpoint:
    path: /cx/4.5/agent-state-analysis-report
    method: GET
- name: agent_availability_report
  endpoint:
    path: /cx/4.5/agent-availability-report
    method: GET
- name: agent_state_report
  endpoint:
    path: /api/agent_state_report
    method: GET
    data_selector: records
    params: {}
- name: agent_state_analysis
  endpoint:
    path: /agent_state_analysis_report
    method: GET
    data_selector: report_data
    params: {}
- name: Agent Availability Report
  endpoint:
    path: /cx/4.5/agent-availability-report
    method: GET
- name: agent_availability
  endpoint:
    path: /agent/availability/report
    method: GET
    data_selector: report_data
    params: {}
- name: agent_availability
  endpoint:
    path: /agent_availability/report
    method: GET
    data_selector: availability_stats
- name: historical_conversation_summary
  endpoint:
    path: /historical/conversation/summary
    method: GET
    data_selector: report_data
    params: {}
- name: report_summary
  endpoint:
    path: /historical_conversation_summary
    method: GET
    data_selector: summary
    params: {}
- name: Queue Stats Today
  endpoint:
    path: /cx/4.5/queue-stats-today
    method: GET
- name: queue_stats_today
  endpoint:
    path: /queue/stats/today
    method: GET
    data_selector: report
    params: {}
- name: queue_stats
  endpoint:
    path: /api/queue_stats_today
    method: GET
    data_selector: stats
    params: {}
- name: wrap_up_summary
  endpoint:
    path: /wrap-up-summary
    method: GET
    data_selector: conversations
    params:
      date: selected_date
      wrap_up_category: selected_category
      wrap_up_reason: selected_reason
- name: wrap_up_summary
  endpoint:
    path: /wrap-up-summary
    method: GET
    data_selector: data
    params: {}
- name: channel_type
  endpoint:
    path: /channel_type
    method: GET
    data_selector: records
- name: channel
  endpoint:
    path: /channel
    method: GET
    data_selector: records
- name: channel_session
  endpoint:
    path: /channel_session
    method: GET
    data_selector: records
- name: conversation
  endpoint:
    path: /conversation
    method: GET
    data_selector: records
- name: conversation_data
  endpoint:
    path: /conversation_data
    method: GET
    data_selector: records
- name: conversation_participant
  endpoint:
    path: /conversation_participant
    method: GET
    data_selector: records
- name: wrapup_detail
  endpoint:
    path: /wrapup_detail
    method: GET
    data_selector: records
- name: room
  endpoint:
    path: /room
    method: GET
    data_selector: records
- name: bot
  endpoint:
    path: /bot
    method: GET
    data_selector: records
- name: agent
  endpoint:
    path: /agent
    method: GET
    data_selector: records
- name: agent_mrd_state
  endpoint:
    path: /services/data/vXX.X/sobjects/AgentMrdState
    method: GET
    data_selector: records
- name: agent_state
  endpoint:
    path: /services/data/vXX.X/sobjects/AgentState
    method: GET
    data_selector: records
- name: agent_team
  endpoint:
    path: /services/data/vXX.X/sobjects/AgentTeam
    method: GET
    data_selector: records
- name: queue
  endpoint:
    path: /services/data/vXX.X/sobjects/Queue
    method: GET
    data_selector: records
- name: agent_task
  endpoint:
    path: /services/data/vXX.X/sobjects/AgentTask
    method: GET
    data_selector: records
- name: media_routing_domain
  endpoint:
    path: /services/data/vXX.X/sobjects/MediaRoutingDomain
    method: GET
    data_selector: records
- name: ivr
  endpoint:
    path: /services/data/vXX.X/sobjects/Ivr
    method: GET
    data_selector: records
- name: list
  endpoint:
    path: /services/data/vXX.X/sobjects/List
    method: GET
    data_selector: records
- name: report_configs
  endpoint:
    path: /report_configs
    method: GET
    data_selector: records
- name: reports_offset
  endpoint:
    path: /reports_offset
    method: GET
    data_selector: records
- name: weekdays
  endpoint:
    path: /weekdays
    method: GET
    data_selector: records
- name: queue_stats
  endpoint:
    path: /queue-wise-stats
    method: GET
    data_selector: stats
    params: {}
- name: Conversations API
  endpoint:
    path: /cx/4.5/conversations-api-3rd-party-apps
    method: GET
- name: task_disposition
  endpoint:
    path: /api/v1/task_disposition
    method: GET
    data_selector: dispositions
    params: {}
- name: ivr_detail
  endpoint:
    path: /ivr/detail/report
    method: GET
    data_selector: records
    params: {}
- name: ivr_summary
  endpoint:
    path: /ivr_summary
    method: GET
    data_selector: data
    params: {}
- name: Conversations API
  endpoint:
    path: /cx/4.5/conversations-api-3rd-party-apps
    method: GET
    data_selector: records
- name: channel_type
  endpoint:
    path: /channel_type
    method: GET
    data_selector: records
- name: channel
  endpoint:
    path: /channel
    method: GET
    data_selector: records
- name: channel_session
  endpoint:
    path: /channel_session
    method: GET
    data_selector: records
- name: conversation
  endpoint:
    path: /conversation
    method: GET
    data_selector: records
- name: conversation_data
  endpoint:
    path: /conversation_data
    method: GET
    data_selector: records
- name: conversation_participant
  endpoint:
    path: /conversation_participant
    method: GET
    data_selector: records
- name: wrapup_detail
  endpoint:
    path: /wrapup_detail
    method: GET
    data_selector: records
- name: room
  endpoint:
    path: /room
    method: GET
    data_selector: records
- name: bot
  endpoint:
    path: /bot
    method: GET
    data_selector: records
- name: agent
  endpoint:
    path: /agent
    method: GET
    data_selector: records
- name: agent_mrd_state
  endpoint:
    path: /agent_mrd_state
    method: GET
    data_selector: records
    params: {}
- name: agent_state
  endpoint:
    path: /agent_state
    method: GET
    data_selector: records
    params: {}
- name: agent_team
  endpoint:
    path: /agent_team
    method: GET
    data_selector: records
    params: {}
- name: queue
  endpoint:
    path: /queue
    method: GET
    data_selector: records
    params: {}
- name: agent_task
  endpoint:
    path: /agent_task
    method: GET
    data_selector: records
    params: {}
- name: media_routing_domain
  endpoint:
    path: /media_routing_domain
    method: GET
    data_selector: records
    params: {}
- name: ivr
  endpoint:
    path: /ivr
    method: GET
    data_selector: records
    params: {}
- name: list
  endpoint:
    path: /list
    method: GET
    data_selector: records
    params: {}
- name: report_configs
  endpoint:
    path: /path/to/report_configs
    method: GET
    data_selector: records
    params: {}
- name: reports_offset
  endpoint:
    path: /path/to/reports_offset
    method: GET
    data_selector: records
    params: {}
- name: weekdays
  endpoint:
    path: /path/to/weekdays
    method: GET
    data_selector: records
    params: {}
- name: cisco_contact_center_integration
  endpoint:
    path: /services/data/v4.5/cisco-contact-center-integration
    method: GET
    data_selector: records
- name: queue_stats
  endpoint:
    path: /path/to/queue/stats
    method: GET
    data_selector: queue_stats_records
- name: conversation_volume
  endpoint:
    path: /api/conversation_volume
    method: GET
    data_selector: data
    params:
      date_time: selected_date
- name: Conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: data
    params: {}
- name: ivr_detail
  endpoint:
    path: /ivr/detail/report
    method: GET
    data_selector: records
    params: {}
- name: channelData
  endpoint:
    path: /cx/4.5/channeldata
    method: GET
    data_selector: records
- name: ChannelConnector
  endpoint:
    path: /cx/4.5/channelconnector
    method: GET
    data_selector: records
- name: customer
  endpoint:
    path: /cx/4.5/customer
    method: GET
    data_selector: records
- name: IVR_Summary
  endpoint:
    path: /path/to/IVR/Summary/Report
    method: GET
    data_selector: report_data
    params:
      filters:
      - Date
      - Language
- name: mysql
  endpoint:
    path: /Metadata/Db connections/mysql 1.0
    method: GET
- name: mongoDb
  endpoint:
    path: /Metadata/NoSQL connections/adminPanel 1.0
    method: GET
- name: transfer_conversation
  endpoint:
    path: /transfer/conversation
    method: POST
    data_selector: transferDetails
- name: add_agents_to_conference
  endpoint:
    path: /add/agents/conference
    method: POST
    data_selector: conferenceDetails
- name: conversation
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
    data_selector: data
    params: {}
- name: Conversations API
  endpoint:
    path: /services/conversations
    method: GET
    data_selector: records
    params: {}
- name: cisco_contact_center_integration
  endpoint:
    path: /cisco/contact/center/integration
    method: GET
    data_selector: records
- name: Conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: data
- name: conversation
  endpoint:
    path: /api/conversation
    method: POST
    data_selector: conversationData
- name: customer_profile
  endpoint:
    path: /api/customer/profile
    method: GET
    data_selector: profileData
- name: conversation_history
  endpoint:
    path: /api/conversation/history
    method: GET
    data_selector: historyData
- name: active_channels
  endpoint:
    path: /api/active/channels
    method: GET
    data_selector: channelData
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: conversations
  endpoint:
    path: /services/data/v4.5/conversations
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: team_announcements
  endpoint:
    path: /api/v1/announcements
    method: GET
    data_selector: announcements
    params: {}
- name: announcement
  endpoint:
    path: /api/v1/announcements
    method: POST
    data_selector: announcement
    params: {}
- name: customer_attributes
  endpoint:
    path: /customer/attributes
    method: GET
    data_selector: attributes
    params: {}
- name: cisco_contact_center_integration
  endpoint:
    path: /cisco/contact/center/integration
    method: GET
- name: Conversations API
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
- name: cim_messages
  endpoint:
    path: /services/data/vXX.X/sobjects/CIMMessages
    method: GET
    data_selector: records
    params: {}
- name: Conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
- name: CTI Controls
  endpoint:
    path: /cti/call-controls
    method: GET
    data_selector: controls
    params: {}
- name: transfer_conversation
  endpoint:
    path: /transfer/conversation
    method: POST
    data_selector: transferDetails
    params: {}
- name: add_agents_to_conference
  endpoint:
    path: /conference/add_agents
    method: POST
    data_selector: conferenceDetails
    params: {}
- name: rke2-ingress-nginx
  endpoint:
    path: /var/lib/rancher/rke2/server/manifests/rke2-ingress-nginx-config.yaml
    method: POST
    data_selector: metadata
    params: {}
- name: config
  endpoint:
    path: /etc/rancher/rke2/config.yaml
    method: POST
    data_selector: etcd
    params: {}
- name: Manual Outbound Contact
  endpoint:
    path: /cx/v4.5/make-a-manual-outbound-contact
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: channel
  endpoint:
    path: /api/v1/channels
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: conversations
  endpoint:
    path: /services/data/vXX.X/conversations
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /services/data/vXX.X/messages
    method: GET
    data_selector: records
- name: Control Plane Node Requirements
  endpoint:
    path: /install/control-plane
    method: GET
    data_selector: node_requirements
    params:
      vCPU: 2
      vRAM: 4
      vDisk: 50
- name: Worker Node Requirements
  endpoint:
    path: /install/worker-nodes
    method: GET
    data_selector: node_requirements
    params:
      vCPU: 2
      vRAM: 4
      vDisk: 250
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: cisco_contact_center_integration
  endpoint:
    path: /api/v1/contact_center
    method: GET
    data_selector: records
- name: RKE2 Control Plane
  endpoint:
    path: /etc/rancher/rke2/config.yaml
    method: CREATE
    data_selector: tls-san
    params: {}
- name: Summary Dashboard
  endpoint:
    path: /summary/dashboard
    method: GET
    data_selector: summaryStats
    params: {}
- name: Detail Dashboard
  endpoint:
    path: /detail/dashboard
    method: GET
    data_selector: detailStats
    params: {}
- name: Queue Stats
  endpoint:
    path: /queue/stats
    method: GET
    data_selector: queueStats
    params: {}
- name: Active Conversations Detail
  endpoint:
    path: /active/conversations/detail
    method: GET
    data_selector: activeConversations
    params: {}
- name: Queued Conversations Detail
  endpoint:
    path: /queued/conversations/detail
    method: GET
    data_selector: queuedConversations
    params: {}
- name: Active Agents Detail
  endpoint:
    path: /active/agents/detail
    method: GET
    data_selector: activeAgents
    params: {}
- name: customer_attributes
  endpoint:
    path: /customer/schema/attributes
    method: GET
    data_selector: attributes
- name: customer_labels
  endpoint:
    path: /customer_labels
    method: GET
    data_selector: labels
    params: {}
- name: agent
  endpoint:
    path: /api/v1/agents
    method: GET
    data_selector: data
    params: {}
- name: conversation
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: data
    params: {}
- name: kube-vip
  endpoint:
    path: /manifests/kube-vip.yaml
    method: GET
- name: pull_based_requests
  endpoint:
    path: /end/pull-based-requests
    method: GET
- name: Conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: data
- name: rke2_server
  endpoint:
    path: /install
    method: POST
    data_selector: response
    params: {}
- name: rke2_agent
  endpoint:
    path: /install/agent
    method: POST
    data_selector: response
    params: {}
- name: Conversations API
  endpoint:
    path: /services/data/vXX.X/sobjects/Conversations
    method: GET
    data_selector: records
    params: {}
- name: longhorn
  endpoint:
    path: /longhorn.yaml
    method: GET
- name: longhorn-iscsi
  endpoint:
    path: /prerequisite/longhorn-iscsi-installation.yaml
    method: GET
- name: longhorn-nfs
  endpoint:
    path: /prerequisite/longhorn-nfs-installation.yaml
    method: GET
- name: uninstall_script
  endpoint:
    path: /usr/bin/rke2-uninstall.sh
    method: POST
- name: cleanup_command
  endpoint:
    path: /var/lib/rancher
    method: DELETE
- name: reboot_command
  endpoint:
    path: /reboot
    method: POST
- name: pvc
  endpoint:
    path: /pvc
    method: GET
    data_selector: records
    params: {}
- name: datadir-mongo-mongodb-0-clone
  endpoint:
    path: /v1/namespaces/ef-external/persistentvolumeclaims/datadir-mongo-mongodb-0-clone
    method: GET
    data_selector: status
    params: {}
- name: PersistentVolumeClaim
  endpoint:
    path: /api/v1/persistentvolumeclaims
    method: GET
    data_selector: items
- name: pvc
  endpoint:
    path: /get/pvc
    method: GET
    data_selector: items
    params: {}
- name: Control Plane
  endpoint:
    path: /var/lib/rancher/rke2/server/node-token
    method: GET
- name: MetalLB
  endpoint:
    path: https://raw.githubusercontent.com/metallb/metallb/v0.14.3/config/manifests/metallb-native.yaml
    method: GET
- name: nginx-ingress-controller
  endpoint:
    path: nginx-values.yaml
    method: POST
- name: Control Plane
  endpoint:
    path: /rke2/control-plane
    method: GET
- name: Worker Nodes
  endpoint:
    path: /rke2/worker-nodes
    method: GET
- name: nfs_server_installation
  endpoint:
    path: /install-nfs-server
    method: POST
    data_selector: installation_steps
    params: {}
- name: kubernetes_worker_nodes_setup
  endpoint:
    path: /kubernetes-worker-nodes-setup
    method: POST
    data_selector: setup_steps
    params: {}
- name: nfs_storage_preparation
  endpoint:
    path: /prepare-kubernetes-cluster-for-nfs-storage
    method: POST
    data_selector: preparation_steps
    params: {}
- name: conversations
  endpoint:
    path: /services/data/vXX.X/conversations
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /create_user
    method: POST
    data_selector: result
    params:
      username: sa
      password: Randomized string
- name: keycloak_database
  endpoint:
    path: /create_database
    method: POST
    data_selector: result
    params:
      database_name: keycloak_db
- name: license_manager_schema
  endpoint:
    path: /import_schema
    method: POST
    data_selector: result
    params:
      schema_path: pre-deployment/licensemanager/licensemanager.sql
- name: RKE2 Control Plane
  endpoint:
    path: /etc/rancher/rke2/config.yaml
    method: POST
    data_selector: tls-san
    params: {}
- name: RKE2 Control Plane Deployment
  endpoint:
    path: /cx/4.5/rke2-single-node-installation-without-ha
    method: GET
- name: Deploy NGINX as an ELB
  endpoint:
    path: /cx/4.5/deploy-nginx-as-an-elb
    method: GET
- name: Deploy HAProxy as an ELB
  endpoint:
    path: /cx/4.5/deploy-haproxy-as-an-elb
    method: GET
- name: file-engine
  endpoint:
    path: /cim/Deployments/ef-routing-engine-deployment.yaml
    method: GET
    data_selector: records
    params:
      MONGO_HOST: mongo-mongodb.ef-external.svc.cluster.local:27017
- name: conversation-controller
  endpoint:
    path: /cim/Deployments/ef-conversation-controller-deployment.yaml
    method: GET
    data_selector: records
    params:
      MONGO_HOST: mongo-mongodb.ef-external.svc.cluster.local:27017
- name: connections
  endpoint:
    path: /cim/ConfigMaps/ef-connection-env-configmap.yaml
    method: GET
    data_selector: records
    params:
      MONGODB_HOST: mongodb://mongo-mongodb.ef-external.svc.cluster.local
- name: reporting-connector
  endpoint:
    path: /pre-deployment/reportingConnector/reporting-connector.conf
    method: GET
    data_selector: records
    params:
      mongo_host1: mongodb-0.mongo-mongodb-headless.ef-external.svc.cluster.local
      mongo_host2: mongodb-1.mongo-mongodb-headless.ef-external.svc.cluster.local
      mongo_host3: mongodb-2.mongo-mongodb-headless.ef-external.svc.cluster.local
      mongo_host4: mongodb-3.mongo-mongodb-headless.ef-external.svc.cluster.local
      mongo_host5: mongodb-4.mongo-mongodb-headless.ef-external.svc.cluster.local
      mongo_host6: <empty>
- name: cim_messages
  endpoint:
    path: /api/v1/cim/messages
    method: GET
    data_selector: messages
    params: {}
- name: nginx_configuration
  endpoint:
    path: /etc/nginx/nginx.conf
    method: POST
    data_selector: configurations
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: KeyCloak
  endpoint:
    path: /pre-deployment/keycloak/ef-keycloak-configmap.yaml
    method: POST
- name: MongoDB
  endpoint:
    path: /external/bitnami/mongodb/values.yaml
    method: POST
- name: MinIO
  endpoint:
    path: /external/bitnami/minio/values.yaml
    method: POST
- name: Redis
  endpoint:
    path: /external/bitnami/redis/values.yaml
    method: POST
- name: ActiveMQ
  endpoint:
    path: /cim/StatefulSet/ef-amq-statefulset.yaml
    method: POST
- name: rke2-ingress-nginx-config
  endpoint:
    path: /var/lib/rancher/rke2/server/manifests/rke2-ingress-nginx-config.yaml
    method: CREATE
    data_selector: valuesContent
- name: kube-vip
  endpoint:
    path: /var/lib/rancher/rke2/server/manifests/kube-vip.yaml
    method: CREATE
    data_selector: kube-vip manifest
- name: CustomerTopicEvents
  endpoint:
    path: /conversation-manager_db/CustomerTopicEvents
    method: DELETE
    data_selector: drop
- name: cisco_contact_center_integration
  endpoint:
    path: /cisco/contact/center/integration
    method: GET
    data_selector: records
- name: ef-reporting-connector
  endpoint:
    path: /services/data/vXX.X/sobjects/ef-reporting-connector
    method: GET
    data_selector: records
- name: ef-360-connector
  endpoint:
    path: /services/data/vXX.X/sobjects/ef-360-connector
    method: GET
    data_selector: records
- name: local_storage
  endpoint:
    path: /local/storage
    method: GET
    data_selector: storage_options
    params: {}
- name: cloud_native_storage
  endpoint:
    path: /cloud/native/storage
    method: GET
    data_selector: storage_options
    params: {}
- name: longhorn-installation
  endpoint:
    path: /deploy/longhorn.yaml
    method: GET
- name: longhorn-prerequisites-iscsi
  endpoint:
    path: /deploy/prerequisite/longhorn-iscsi-installation.yaml
    method: GET
- name: longhorn-prerequisites-nfs
  endpoint:
    path: /deploy/prerequisite/longhorn-nfs-installation.yaml
    method: GET
- name: longhorn-pod-status
  endpoint:
    path: /longhorn-system/get/pod
    method: GET
- name: longhorn-environment-check
  endpoint:
    path: /scripts/environment_check.sh
    method: GET
- name: pvc
  endpoint:
    path: /kubectl/namespaces/ef-external/pvc
    method: GET
    data_selector: items
- name: ConfigMaps
  endpoint:
    path: /cx-voice-recording/ConfigMaps/
    method: POST
- name: Services
  endpoint:
    path: /cx-voice-recording/Services/
    method: POST
- name: Deployments
  endpoint:
    path: /cx-voice-recording/Deployments/
    method: POST
- name: Ingresses Traefik
  endpoint:
    path: /cx-voice-recording/Ingresses/traefik/
    method: POST
- name: Ingresses Nginx
  endpoint:
    path: /cx-voice-recording/Ingresses/nginx/
    method: POST
- name: datadir-mongo-mongodb-0-clone
  endpoint:
    path: /api/v1/namespaces/ef-external/persistentvolumeclaims
    method: POST
    data_selector: metadata.name
    params:
      storageClassName: longhorn
      dataSource:
        name: datadir-mongo-mongodb-0
        kind: PersistentVolumeClaim
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
- name: pvc
  endpoint:
    path: /get/pvc
    method: GET
    data_selector: records
- name: replicated_clone
  endpoint:
    path: /apply/replicated-clone.yaml
    method: POST
    data_selector: status
- name: pvc
  endpoint:
    path: /namespaces/ef-external/pvc
    method: GET
    data_selector: items
- name: requirements
  endpoint:
    path: /nfs/storage/requirements
    method: GET
    data_selector: requirements
    params: {}
- name: nfs_server_installation
  endpoint:
    path: /install/nfs-server
    method: POST
    data_selector: installation_steps
- name: kubernetes_worker_nodes
  endpoint:
    path: /kubernetes/worker-nodes
    method: POST
    data_selector: installation_steps
- name: nfs_storage_class
  endpoint:
    path: /nfs/storage-class
    method: POST
    data_selector: class_details
- name: CX-Voice Deployment
  endpoint:
    path: /cx/voice/deployment
    method: GET
- name: ConfigMap
  endpoint:
    path: /voice/cx-voice/ConfigMaps
    method: GET
    data_selector: config
    params: {}
- name: Services
  endpoint:
    path: /voice/cx-voice/Services
    method: GET
    data_selector: services
    params: {}
- name: Deployments
  endpoint:
    path: /voice/cx-voice/Deployments
    method: GET
    data_selector: deployments
    params: {}
- name: user
  endpoint:
    path: /create_user
    method: POST
    data_selector: user_creation
    params:
      username: sa
      password: Randomized string
- name: database_schema
  endpoint:
    path: /import_schema
    method: POST
    data_selector: schema_import
    params:
      schema_file: pre-deployment/licensemanager/licensemanager.sql
- name: keycloak_database
  endpoint:
    path: /create_database
    method: POST
    data_selector: database_creation
    params:
      database_name: keycloak_db
- name: expertflow_cx_environment
  endpoint:
    path: /update_config
    method: POST
    data_selector: config_update
    params:
      config_file: cim/ConfigMaps/ef-license-manager-configmap.yaml
      DB_URL: localized_db_url
      DB_USER: localized_db_user
      DB_PASS: localized_db_pass
- name: cisco_voice
  endpoint:
    path: /api/cisco/voice
    method: GET
    data_selector: data
    params: {}
- name: file-engine
  endpoint:
    path: /cim/Deployments/ef-routing-engine-deployment.yaml
    method: GET
- name: conversation-controller
  endpoint:
    path: /cim/Deployments/ef-conversation-controller-deployment.yaml
    method: GET
- name: connections
  endpoint:
    path: /cim/ConfigMaps/ef-connection-env-configmap.yaml
    method: GET
- name: reporting-connector
  endpoint:
    path: /pre-deployment/reportingConnector/reporting-connector.conf
    method: GET
- name: cisco_outbound_connector
  endpoint:
    path: /voice/cisco/ConfigMaps/ef-cisco-outbound-connector-configmap.yaml
    method: GET
    data_selector: records
    params: {}
- name: cisco_outbound_connector
  endpoint:
    path: /voice/cisco/ConfigMaps/ef-cisco-outbound-connector-configmap.yaml
    method: GET
    data_selector: configurations
- name: KeyCloak
  endpoint:
    path: /pre-deployment/keycloak/ef-keycloak-configmap.yaml
    method: POST
- name: MongoDB
  endpoint:
    path: /external/bitnami/mongodb/values.yaml
    method: POST
- name: MinIO
  endpoint:
    path: /external/bitnami/minio/values.yaml
    method: POST
- name: Redis
  endpoint:
    path: /external/bitnami/redis/values.yaml
    method: POST
- name: cisco_voice
  endpoint:
    path: /cisco-voice
    method: POST
    data_selector: components
    params: {}
- name: ef-reporting-connector
  endpoint:
    path: /services/data/vXX.X/sobjects/ef-reporting-connector
    method: GET
    data_selector: records
- name: ef-360-connector
  endpoint:
    path: /services/data/vXX.X/sobjects/ef-360-connector
    method: GET
    data_selector: records
- name: supervisor_dashboard_mysql
  endpoint:
    path: /post-deployment/config/grafana/supervisor-dashboards/Supervisor_Dashboard_CIM-mysql.json
    method: CREATE
    data_selector: configmap
    params:
      name: ef-grafana-supervisor-dashboard-mysql
      namespace: ef-external
- name: agent_dashboard_mysql
  endpoint:
    path: /post-deployment/config/grafana/supervisor-dashboards/Agent_Dashboard_CIM-mysql.json
    method: CREATE
    data_selector: configmap
    params:
      name: ef-grafana-agent-dashboard-mysql
      namespace: ef-external
- name: supervisor_dashboard_mssql
  endpoint:
    path: /post-deployment/config/grafana/supervisor-dashboards/Supervisor_Dashboard_CIM-mssql.json
    method: CREATE
    data_selector: configmap
    params:
      name: ef-grafana-supervisor-dashboard-mssql
      namespace: ef-external
- name: agent_dashboard_mssql
  endpoint:
    path: /post-deployment/config/grafana/supervisor-dashboards/Agent_Dashboard_CIM-mssql.json
    method: CREATE
    data_selector: configmap
    params:
      name: ef-grafana-agent-dashboard-mssql
      namespace: ef-external
- name: grafana_ini
  endpoint:
    path: /pre-deployment/grafana/grafana.ini
    method: CREATE
    data_selector: configmap
    params:
      name: ef-grafana-ini-cm
      namespace: ef-external
- name: Conversations API
  endpoint:
    path: /services/data/vXX.X/conversations
    method: GET
    data_selector: records
- name: Conversations API
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
- name: widget_configuration
  endpoint:
    path: /init_widget.js
    method: GET
    data_selector: __cim
    params: {}
- name: 360-connector
  endpoint:
    path: /360connector
    method: GET
    data_selector: ''
    params: {}
- name: file-engine
  endpoint:
    path: /file-engine
    method: GET
    data_selector: ''
    params: {}
- name: ccm
  endpoint:
    path: /ccm
    method: GET
    data_selector: ''
    params: {}
- name: bot-framework
  endpoint:
    path: /bot-framework
    method: GET
    data_selector: ''
    params: {}
- name: routing-engine
  endpoint:
    path: /routing-engine
    method: GET
    data_selector: ''
    params: {}
- name: cim-customer
  endpoint:
    path: /cim-customer
    method: GET
    data_selector: ''
    params: {}
- name: agent-manager
  endpoint:
    path: /agent-manager
    method: GET
    data_selector: ''
    params: {}
- name: unified-admin
  endpoint:
    path: /unified-admin
    method: GET
    data_selector: ''
    params: {}
- name: license-manager
  endpoint:
    path: /license-manager
    method: GET
    data_selector: ''
    params: {}
- name: business-calendar
  endpoint:
    path: /business-calendar
    method: GET
    data_selector: ''
    params: {}
- name: web-channel-manager
  endpoint:
    path: /web-channel-manager
    method: GET
    data_selector: ''
    params: {}
- name: customer-widget
  endpoint:
    path: /customer-widget
    method: GET
    data_selector: ''
    params: {}
- name: twillio-connector
  endpoint:
    path: /twilio-connector
    method: GET
    data_selector: ''
    params: {}
- name: unified-agent
  endpoint:
    path: /unified-agent
    method: GET
    data_selector: ''
    params: {}
- name: conversation-controller
  endpoint:
    path: /conversation-controller
    method: GET
    data_selector: ''
    params: {}
- name: conversation-manager
  endpoint:
    path: /conversation-manager
    method: GET
    data_selector: ''
    params: {}
- name: facebook-connector
  endpoint:
    path: /facebook-connector
    method: GET
    data_selector: ''
    params: {}
- name: realtime-reports
  endpoint:
    path: /realtime-reports
    method: GET
    data_selector: ''
    params: {}
- name: reporting-connector
  endpoint:
    path: /reporting-connector
    method: GET
    data_selector: ''
    params: {}
- name: state-event-logger
  endpoint:
    path: /state-event-logger
    method: GET
    data_selector: ''
    params: {}
- name: web-widget
  endpoint:
    path: /web-widget
    method: GET
    data_selector: ''
    params: {}
- name: Expertflow Live Chat
  endpoint:
    path: /cim-web-init-widget
    method: GET
- name: filebeat
  endpoint:
    path: /kubernetes/logging/syslog-ELK/filebeat.yaml
    method: apply
    data_selector: ''
    params: {}
- name: logstash
  endpoint:
    path: /kubernetes/logging/syslog-ELK/logstash-values.yaml
    method: upgrade
    data_selector: ''
    params:
      namespace: logging
- name: kibana
  endpoint:
    path: /kubernetes/logging/syslog-ELK/kibana/values-small.yaml
    method: upgrade
    data_selector: ''
    params:
      namespace: logging
- name: install_superset
  endpoint:
    path: /cx/4.5/install-superset
    method: GET
- name: setup_reporting_connector
  endpoint:
    path: /cx/4.5/setup-reporting-connector
    method: GET
- name: conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: data
    params: {}
- name: performance_check
  endpoint:
    path: /check/perf
    method: GET
    data_selector: performance
- name: endpoint_status
  endpoint:
    path: /endpoint/status
    method: GET
    data_selector: status
- name: health_status
  endpoint:
    path: /endpoint/health
    method: GET
    data_selector: health
- name: alarm_list
  endpoint:
    path: /alarm/list
    method: GET
    data_selector: alarms
- name: compact
  endpoint:
    path: /compact
    method: POST
    data_selector: compact
- name: defrag
  endpoint:
    path: /defrag
    method: POST
    data_selector: defrag
- name: get_cluster_keys
  endpoint:
    path: /get
    method: GET
    data_selector: keys
- name: Conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: data
    params: {}
- name: cisco_contact_center_integration
  endpoint:
    path: /services/data/v4.5/cisco-contact-center-integration
    method: GET
    data_selector: records
- name: cisco_outbound_connector
  endpoint:
    path: /voice/cisco/ConfigMaps/ef-cisco-outbound-connector-configmap.yaml
    method: GET
    data_selector: CISCO_FQDN, CISCO_TYPE, CISCO_USERNAME, CISCO_PASS
- name: check_performance
  endpoint:
    path: /check/perf
    method: GET
- name: endpoint_status
  endpoint:
    path: /endpoint/status
    method: GET
- name: health_status
  endpoint:
    path: /endpoint/health
    method: GET
- name: alarm_list
  endpoint:
    path: /alarm/list
    method: GET
- name: compact
  endpoint:
    path: /compact
    method: POST
- name: defrag
  endpoint:
    path: /defrag
    method: POST
- name: get_cluster_keys
  endpoint:
    path: /get
    method: GET
- name: cisco_call_center
  endpoint:
    path: /cisco/call_center
    method: GET
- name: cisco_outbound_connector
  endpoint:
    path: /voice/cisco/ConfigMaps/ef-cisco-outbound-connector-configmap.yaml
    method: GET
- name: cisco_outbound_connector
  endpoint:
    path: /voice/cisco/ConfigMaps/ef-cisco-outbound-connector-configmap.yaml
    method: GET
    data_selector: config
    params: {}
- name: Grafana Setup
  endpoint:
    path: /setup/grafana
    method: GET
- name: Conversations API
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
    params: {}
- name: setup_grafana
  endpoint:
    path: /setup/grafana
    method: GET
    data_selector: data
    params: {}
- name: Conversations API
  endpoint:
    path: /cx/4.5/conversations-api-3rd-party-apps
    method: GET
    data_selector: records
    params: {}
- name: Push Recording Link
  endpoint:
    path: /cx/4.5/push-recording-link
    method: POST
    data_selector: records
    params: {}
- name: reporting_stats_datasource
  endpoint:
    path: /datasource
    method: POST
    data_selector: datasource
    params:
      url: 192.168.1.182
      type: mysql
      password: '12345'
      user: user123
      database: testdb
      host: 192.168.1.182
- name: supervisor_dashboard_cim_json_api
  endpoint:
    path: /supervisor_dashboard
    method: GET
    data_selector: dashboard
    params:
      url: https://cim.expertflow.com
- name: monitoring_namespace
  endpoint:
    path: /kubectl/create/namespace/monitoring
    method: GET
    data_selector: namespace
    params: {}
- name: helm_installation_single_node
  endpoint:
    path: /helm/upgrade/namespace/monitoring/install=true/kube-stack-prometheus
    method: POST
    data_selector: installation
    params:
      values: kube-prometheus-stack/values-small.yaml
- name: helm_installation_multi_node
  endpoint:
    path: /helm/upgrade/namespace/monitoring/install=true/kube-stack-prometheus
    method: POST
    data_selector: installation
    params:
      values: kube-prometheus-stack/values-large.yaml
- name: supervisor_dashboard_mysql
  endpoint:
    path: /post-deployment/config/grafana/supervisor-dashboards/Supervisor_Dashboard_CIM-mysql.json
    method: CREATE
    data_selector: configmap
    params:
      namespace: ef-external
- name: agent_dashboard_mysql
  endpoint:
    path: /post-deployment/config/grafana/supervisor-dashboards/Agent_Dashboard_CIM-mysql.json
    method: CREATE
    data_selector: configmap
    params:
      namespace: ef-external
- name: supervisor_dashboard_mssql
  endpoint:
    path: /post-deployment/config/grafana/supervisor-dashboards/Supervisor_Dashboard_CIM-mssql.json
    method: CREATE
    data_selector: configmap
    params:
      namespace: ef-external
- name: agent_dashboard_mssql
  endpoint:
    path: /post-deployment/config/grafana/supervisor-dashboards/Agent_Dashboard_CIM-mssql.json
    method: CREATE
    data_selector: configmap
    params:
      namespace: ef-external
- name: grafana_ini
  endpoint:
    path: /pre-deployment/grafana/grafana.ini
    method: CREATE
    data_selector: configmap
    params:
      namespace: ef-external
- name: datasource
  endpoint:
    path: /post-deployment/config/grafana/supervisor-dashboards/datasource.yml
    method: UPDATE
    data_selector: values
    params:
      tlsAuthWithCACert: true
      tlsAuth: true
      tlsCACert: <replace with Customers Datasource ca.pem file>
      tlsClientCert: <replace with Customers Datasource client-cert.pem file>
      tlsClientKey: <replace with Customers Datasource client-key.pem file>
- name: conversations
  endpoint:
    path: /services/data/vCX4.5/sobjects/conversations
    method: GET
- name: CustomerTopicEvents
  endpoint:
    path: /services/data/vCX4.5/sobjects/CustomerTopicEvents
    method: GET
- name: ConversationActivities
  endpoint:
    path: /services/data/vCX4.5/sobjects/ConversationActivities
    method: GET
- name: rooms
  endpoint:
    path: /services/data/vCX4.5/sobjects/rooms
    method: GET
- name: mrdTypes
  endpoint:
    path: /mrdTypes
    method: GET
    data_selector: records
    params: {}
- name: mediaRoutingDomains
  endpoint:
    path: /mediaRoutingDomains
    method: GET
    data_selector: records
    params: {}
- name: precisionQueues
  endpoint:
    path: /precisionQueues
    method: GET
    data_selector: records
    params: {}
- name: pullmodelists
  endpoint:
    path: /pullmodelists
    method: GET
    data_selector: records
    params: {}
- name: agentdesksettings
  endpoint:
    path: /agentdesksettings
    method: GET
    data_selector: records
    params: {}
- name: agent_dashboard
  endpoint:
    path: /grafana/d/AGEdiaunk/agent_dashboard_cim
    method: GET
    params:
      orgId: 1
      refresh: 10s
      var-agentUserName: <userName>
- name: widget_configuration
  endpoint:
    path: /init_widget.js
    method: GET
    data_selector: __cim
    params: {}
- name: cstor-csi-disk
  endpoint:
    path: /storageclasses/cstor-csi-disk
    method: GET
    data_selector: metadata.name
    params: {}
- name: openebs-device
  endpoint:
    path: /storageclasses/openebs-device
    method: GET
    data_selector: metadata.name
    params: {}
- name: openebs-hostpath
  endpoint:
    path: /storageclasses/openebs-hostpath
    method: GET
    data_selector: metadata.name
    params: {}
- name: postgresql
  endpoint:
    path: /external/bitnami/postgresql-ha
    method: GET
    data_selector: records
    params:
      replicaCount: 3
- name: keycloak
  endpoint:
    path: /external/bitnami/keycloak
    method: GET
    data_selector: records
    params:
      replicaCount: 3
      auth:
        username: bn_keycloak
        password: Expertflow123
        database: bitnami_keycloak
- name: mongodb
  endpoint:
    path: /external/bitnami/mongodb
    method: GET
    data_selector: records
    params:
      replicaCount: 3
      replicaSetName: expertflow
      arbiter: true
- name: minio
  endpoint:
    path: /external/bitnami/minio
    method: GET
    data_selector: records
    params:
      mode: distributed
      replicaCount: 4
      zones: 1
      drivesPerNode: 1
- name: filebeat
  endpoint:
    path: /kubernetes/logging/syslog-ELK/filebeat.yaml
    method: apply
    data_selector: logs
    params: {}
- name: logstash
  endpoint:
    path: /kubernetes/logging/syslog-ELK/logstash-values.yaml
    method: upgrade
    data_selector: logs
    params:
      namespace: logging
- name: kibana
  endpoint:
    path: /kubernetes/logging/syslog-ELK/kibana/values-small.yaml
    method: upgrade
    data_selector: logs
    params:
      namespace: logging
- name: sentinel
  endpoint:
    path: /sentinel
    method: POST
- name: member_list
  endpoint:
    path: /member/list
    method: GET
    data_selector: members
    params: {}
- name: PostgreSQL
  endpoint:
    path: /postgresql
    method: GET
    data_selector: replicaCount
    params:
      replicaCount: 3
- name: Keycloak
  endpoint:
    path: /keycloak
    method: GET
    data_selector: externalDatabase
    params:
      host: ef-postgresql-postgresql-ha-pgpool.ef-external.svc.cluster.local
- name: Mongo DB
  endpoint:
    path: /mongodb
    method: GET
    data_selector: arbiter
    params:
      enabled: true
      replicaCount: 3
      replicaSetHostnames: true
      replicaSetName: expertflow
- name: MinIO
  endpoint:
    path: /minio
    method: GET
    data_selector: mode
    params:
      mode: distributed
      replicaCount: 4
      zones: 1
      drivesPerNode: 1
- name: Redis Sentinel
  endpoint:
    path: /redis-sentinel
    method: GET
    data_selector: sentinel
    params:
      enabled: true
      replicaCount: 3
- name: etcd_status
  endpoint:
    path: /version
    method: GET
    data_selector: version
    params: {}
- name: ClusterIssuer
  endpoint:
    path: /cert-manager.io/v1/ClusterIssuer
    method: POST
    data_selector: clusters
    params: {}
- name: Certificate
  endpoint:
    path: /cert-manager.io/v1/Certificate
    method: POST
    data_selector: certificates
    params: {}
- name: ETCD Server Administration in RKE2
  endpoint:
    path: /cx/4.5/etcd-server-administration-in-rke2
    method: GET
- name: minio-default
  endpoint:
    path: /helm/install/minio-default
    method: POST
    data_selector: output
    params:
      namespace: velero
      create-namespace: true
      resources.requests.memory: 1Gi
      persistence.size: 32Gi
      auth.rootUser: minio
      auth.rootPassword: minio123
      service.type: NodePort
      service.nodePorts.api: 30100
      service.nodePorts.console: 30200
      provisioning.enabled: true
      provisioning.buckets[0].name: velero
      provisioning.buckets[0].policy: public
      provisioning.buckets[0].purge: true
- name: minio-primary
  endpoint:
    path: /helm/install/minio-primary
    method: POST
    data_selector: output
    params:
      namespace: velero
      create-namespace: true
      resources.requests.memory: 1Gi
      persistence.size: 32Gi
      auth.rootUser: minio
      auth.rootPassword: minio123
      service.type: NodePort
      service.nodePorts.api: 30101
      service.nodePorts.console: 30201
      provisioning.enabled: true
      provisioning.buckets[0].name: velero
      provisioning.buckets[0].policy: public
      provisioning.buckets[0].purge: true
- name: minio-secondary
  endpoint:
    path: /helm/install/minio-secondary
    method: POST
    data_selector: output
    params:
      namespace: velero
      create-namespace: true
      resources.requests.memory: 1Gi
      persistence.size: 32Gi
      auth.rootUser: minio
      auth.rootPassword: minio123
      service.type: NodePort
      service.nodePorts.api: 30102
      service.nodePorts.console: 30202
      provisioning.enabled: true
      provisioning.buckets[0].name: velero
      provisioning.buckets[0].policy: public
      provisioning.buckets[0].purge: true
- name: etcd_performance
  endpoint:
    path: /check/perf
    method: GET
    data_selector: performance_metrics
- name: etcd_status
  endpoint:
    path: /endpoint/status
    method: GET
    data_selector: status_metrics
- name: etcd_health
  endpoint:
    path: /endpoint/health
    method: GET
    data_selector: health_metrics
- name: etcd_alarm_list
  endpoint:
    path: /alarm/list
    method: GET
    data_selector: alarms
- name: etcd_compact
  endpoint:
    path: /compact
    method: POST
    data_selector: compact_response
- name: etcd_defrag
  endpoint:
    path: /defrag
    method: POST
    data_selector: defrag_response
- name: etcd_get_keys
  endpoint:
    path: /get
    method: GET
    data_selector: keys
- name: velero
  endpoint:
    path: /velero
    method: GET
    data_selector: records
    params: {}
- name: backup_location
  endpoint:
    path: /velero/backup-location
    method: GET
    data_selector: backup_locations
    params: {}
- name: logs
  endpoint:
    path: /velero/logs
    method: GET
    data_selector: logs
    params: {}
- name: backup_location_primary
  endpoint:
    path: /backup-location/create/primary
    method: POST
    data_selector: null
    params:
      provider: aws
      bucket: velero
      config: region=minio-primary,s3ForcePathStyle=true,s3Url=http://minio-primary.velero.svc.cluster.local:9000,publicUrl=http://localhost:30201
- name: backup_location_secondary
  endpoint:
    path: /backup-location/create/secondary
    method: POST
    data_selector: null
    params:
      provider: aws
      bucket: velero
      config: region=minio-secondary,s3ForcePathStyle=true,s3Url=http://minio-secondary.velero.svc.cluster.local:9000,publicUrl=http://localhost:30202
- name: minio
  endpoint:
    path: /minio
    method: POST
    data_selector: buckets
    params: {}
- name: backup-locations
  endpoint:
    path: /velero/get/backup-locations
    method: GET
    data_selector: backup-locations
- name: backup_locations
  endpoint:
    path: /backups
    method: GET
    data_selector: locations
    params: {}
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: schedules
    params: {}
- name: grafana
  endpoint:
    path: /monitoring
    method: GET
    data_selector: resources
    params: {}
- name: mongo_backup
  endpoint:
    path: /mongo/backup
    method: POST
    data_selector: backup_data
    params: {}
- name: postgres_backup
  endpoint:
    path: /postgres/backup
    method: POST
    data_selector: backup_data
    params: {}
- name: conversations
  endpoint:
    path: /services/data/vXX.X/sobjects/Conversations
    method: GET
    data_selector: records
- name: CustomerTopicEvents
  endpoint:
    path: /services/data/vXX.X/sobjects/CustomerTopicEvents
    method: GET
    data_selector: records
- name: ConversationActivities
  endpoint:
    path: /services/data/vXX.X/sobjects/ConversationActivities
    method: GET
    data_selector: records
- name: rooms
  endpoint:
    path: /services/data/vXX.X/sobjects/Rooms
    method: GET
    data_selector: records
- name: keycloak_db
  endpoint:
    path: /tmp/keycloak_db.backup
    method: POST
    data_selector: backup
    params: {}
- name: licenseManager
  endpoint:
    path: /tmp/licenseManager.backup
    method: POST
    data_selector: backup
    params: {}
- name: task_enqueued
  endpoint:
    path: /api/task_enqueued
    method: GET
    data_selector: data.task
    params: {}
- name: activity
  endpoint:
    path: /api/activity
    method: GET
    data_selector: activity.data
    params: {}
- name: mongo_restore
  endpoint:
    path: /mongo/restore
    method: POST
- name: postgresql_restore
  endpoint:
    path: /postgresql/restore
    method: POST
- name: mrdTypes
  endpoint:
    path: /mrdTypes
    method: GET
    data_selector: records
- name: mediaRoutingDomains
  endpoint:
    path: /mediaRoutingDomains
    method: GET
    data_selector: records
- name: precisionQueues
  endpoint:
    path: /precisionQueues
    method: GET
    data_selector: records
- name: pullmodelists
  endpoint:
    path: /pullmodelists
    method: GET
    data_selector: records
- name: agentdesksettings
  endpoint:
    path: /agentdesksettings
    method: GET
    data_selector: records
- name: mongo_backup
  endpoint:
    path: /backup/mongo
    method: POST
    data_selector: backup
    params: {}
- name: postgresql_backup
  endpoint:
    path: /backup/postgresql
    method: POST
    data_selector: backup
    params: {}
- name: keycloak_db
  endpoint:
    path: /tmp/keycloak_db.backup
    method: POST
    data_selector: backup
    params: {}
- name: licenseManager
  endpoint:
    path: /tmp/licenseManager.backup
    method: POST
    data_selector: backup
    params: {}
- name: cstorPoolCluster
  endpoint:
    path: /cspc
    method: GET
    data_selector: cspc
    params: {}
- name: storageClass
  endpoint:
    path: /sc
    method: GET
    data_selector: sc
    params: {}
- name: blockDevice
  endpoint:
    path: /bd
    method: GET
    data_selector: bd
    params: {}
- name: cstor-csi-disk
  endpoint:
    path: /storageclasses/cstor-csi-disk
    method: GET
    data_selector: metadata.name
    params: {}
- name: primary_node_deployment
  endpoint:
    path: /install/
    method: POST
    data_selector: deployment
    params:
      timeout: 10m0s
- name: standby_node_deployment
  endpoint:
    path: /postgres/
    method: POST
    data_selector: deployment
    params:
      timeout: 10m0s
- name: Cisco Contact Center Integration
  endpoint:
    path: /cx/4.5/cisco-contact-center-integration
    method: GET
- name: CRM Connectors
  endpoint:
    path: /cx/4.5/crm-connectors
    method: GET
- name: redis_sentinel
  endpoint:
    path: /sentinel
    method: GET
    data_selector: sentinels
    params: {}
- name: PostgreSQL
  endpoint:
    path: /helm/charts/postgresql
    method: GET
    data_selector: replicaCount
    params:
      replicaCount: 3
- name: Keycloak
  endpoint:
    path: /helm/charts/keycloak
    method: GET
    data_selector: externalDatabase
    params:
      host: ef-postgresql-postgresql-ha-pgpool.ef-external.svc.cluster.local
- name: Mongo DB
  endpoint:
    path: /helm/charts/mongodb
    method: GET
    data_selector: arbiter
    params:
      enabled: true
      replicaCount: 3
      replicaSetHostnames: true
      replicaSetName: expertflow
- name: MinIO
  endpoint:
    path: /helm/charts/minio
    method: GET
    data_selector: mode
    params:
      mode: distributed
      replicaCount: 4
      zones: 1
      drivesPerNode: 1
- name: Redis Sentinel
  endpoint:
    path: /helm/charts/redis-sentinel
    method: GET
    data_selector: sentinel
    params:
      enabled: true
      replicaCount: 3
- name: customer_widget
  endpoint:
    path: /secure-link
    method: POST
    data_selector: AUTHENTICATOR_URL
    params: {}
- name: unified_agent
  endpoint:
    path: /secure-link
    method: POST
    data_selector: SECURE_LINK_URL
    params:
      ENABLE_SECURE_LINK: 'true'
- name: channelData
  endpoint:
    path: /cx/4.5/channeldata
    method: GET
    data_selector: records
- name: conversationParticipant
  endpoint:
    path: /cx/4.5/conversationparticipant
    method: GET
    data_selector: records
- name: conversations
  endpoint:
    path: /services/data/vXX.X/conversations
    method: GET
    data_selector: records
- name: Conversations API
  endpoint:
    path: /services/data/v4.5/conversations
    method: GET
    data_selector: records
- name: minio_deployment
  endpoint:
    path: /helm/install/minio-default
    method: POST
    data_selector: deployment
    params:
      namespace: velero
      create_namespace: true
      resources_requests_memory: 1Gi
      persistence_size: 32Gi
      auth_rootUser: minio
      auth_rootPassword: minio123
      service_type: NodePort
      service_nodePorts_api: 30100
      service_nodePorts_console: 30200
      provisioning_enabled: true
      provisioning_buckets_0_name: velero
      provisioning_buckets_0_policy: public
      provisioning_buckets_0_purge: true
- name: minio_primary_deployment
  endpoint:
    path: /helm/install/minio-primary
    method: POST
    data_selector: deployment
    params:
      namespace: velero
      create_namespace: true
      resources_requests_memory: 1Gi
      persistence_size: 32Gi
      auth_rootUser: minio
      auth_rootPassword: minio123
      service_type: NodePort
      service_nodePorts_api: 30101
      service_nodePorts_console: 30201
      provisioning_enabled: true
      provisioning_buckets_0_name: velero
      provisioning_buckets_0_policy: public
      provisioning_buckets_0_purge: true
- name: minio_secondary_deployment
  endpoint:
    path: /helm/install/minio-secondary
    method: POST
    data_selector: deployment
    params:
      namespace: velero
      create_namespace: true
      resources_requests_memory: 1Gi
      persistence_size: 32Gi
      auth_rootUser: minio
      auth_rootPassword: minio123
      service_type: NodePort
      service_nodePorts_api: 30102
      service_nodePorts_console: 30202
      provisioning_enabled: true
      provisioning_buckets_0_name: velero
      provisioning_buckets_0_policy: public
      provisioning_buckets_0_purge: true
- name: backup_locations
  endpoint:
    path: /velero/backup-location
    method: GET
    data_selector: locations
    params: {}
- name: backup_location
  endpoint:
    path: /backup-locations
    method: GET
    data_selector: backup-locations
    params: {}
- name: reports_offset
  endpoint:
    path: /reports_offset
    method: UPDATE
    data_selector: offset_in_minutes
    params:
      offset_in_minutes: '-120'
- name: minio_primary
  endpoint:
    path: /helm/install/minio-primary
    method: GET
    data_selector: ''
    params: {}
- name: minio_secondary
  endpoint:
    path: /helm/install/minio-secondary
    method: GET
    data_selector: ''
    params: {}
- name: minio_default
  endpoint:
    path: /helm/install/minio-default
    method: GET
    data_selector: ''
    params: {}
- name: backup_location
  endpoint:
    path: /backup-location
    method: GET
    data_selector: backup-locations
    params: {}
- name: backup
  endpoint:
    path: /backup
    method: POST
    data_selector: backups
    params:
      include_namespaces: ef-external
- name: schedule
  endpoint:
    path: /schedule
    method: POST
    data_selector: schedules
    params:
      include_namespaces: expertflow
      schedule: '@every 24h'
- name: restore
  endpoint:
    path: /restore
    method: POST
    data_selector: restores
    params:
      from_backup: <BACKUP-NAME>
- name: keycloak_db
  endpoint:
    path: /tmp/keycloak_db.backup
    method: POST
    data_selector: ''
    params: {}
- name: licenseManager
  endpoint:
    path: /tmp/licenseManager.backup
    method: POST
    data_selector: ''
    params: {}
- name: realm
  endpoint:
    path: /auth/realms
    method: POST
    data_selector: realm
    params: {}
- name: user
  endpoint:
    path: /auth/admin/realms/{realm}/users
    method: GET
    data_selector: users
    params: {}
- name: mongo_restore
  endpoint:
    path: /path/to/mongo/restore
    method: POST
    data_selector: results
- name: postgres_restore
  endpoint:
    path: /path/to/postgres/restore
    method: POST
    data_selector: results
- name: keycloak_db
  endpoint:
    path: /tmp/keycloak_db.backup
    method: POST
    data_selector: backup
    params: {}
- name: licenseManager
  endpoint:
    path: /tmp/licenseManager.backup
    method: POST
    data_selector: backup
    params: {}
- name: client_secret
  endpoint:
    path: /app/docker/pythonpath_dev/client_secret.json
    method: GET
    data_selector: web
- name: primary_node
  endpoint:
    path: /install
    method: POST
    data_selector: deployment
    params:
      namespace: postgres-operator
- name: standby_node
  endpoint:
    path: /install
    method: POST
    data_selector: deployment
    params:
      namespace: postgres-operator
- name: routing-engine
  endpoint:
    path: /routing-engine
    method: GET
    data_selector: resources
    params: {}
- name: channel-manager
  endpoint:
    path: /channel-manager
    method: GET
    data_selector: resources
    params: {}
- name: bot-settings
  endpoint:
    path: /bot-settings
    method: GET
    data_selector: resources
    params: {}
- name: general-settings
  endpoint:
    path: /general-settings
    method: GET
    data_selector: resources
    params: {}
- name: web-widget
  endpoint:
    path: /web-widget
    method: GET
    data_selector: resources
    params: {}
- name: forms
  endpoint:
    path: /forms
    method: GET
    data_selector: resources
    params: {}
- name: pull-mode-list
  endpoint:
    path: /pull-mode-list
    method: GET
    data_selector: resources
    params: {}
- name: reason-code
  endpoint:
    path: /reason-code
    method: GET
    data_selector: resources
    params: {}
- name: Conversations API
  endpoint:
    path: /cx/4.5/conversations-api
    method: GET
    data_selector: records
    params: {}
- name: Conversations API
  endpoint:
    path: /cx/4.5/conversations-api
    method: GET
- name: Keycloak Error Responses
  endpoint:
    path: /cx/4.5/keycloak-error-responses-guide
    method: GET
- name: default
  endpoint:
    path: /Groups/default
    method: GET
- name: Team-1
  endpoint:
    path: /Groups/Team-1
    method: GET
- name: Team-2
  endpoint:
    path: /Groups/Team-2
    method: GET
- name: user-1
  endpoint:
    path: /Users/user-1
    method: GET
- name: user-2
  endpoint:
    path: /Users/user-2
    method: GET
- name: user-3
  endpoint:
    path: /Users/user-3
    method: GET
- name: user-4
  endpoint:
    path: /Users/user-4
    method: GET
- name: secure_link_generation
  endpoint:
    path: /secure-link
    method: GET
    data_selector: records
    params: {}
- name: customer_widget
  endpoint:
    path: /ef-customer-widget-configmaps.yaml
    method: GET
    data_selector: records
    params: {}
- name: unified_agent
  endpoint:
    path: /ef-unified-agent-configmaps.yaml
    method: GET
    data_selector: records
    params: {}
- name: routing-manager
  endpoint:
    path: /routing-manager
    method: POST
    data_selector: settings
    params: {}
- name: demo-auth-client
  endpoint:
    path: /auth/admin/realms/{realm}/clients
    method: POST
    data_selector: client
- name: roles
  endpoint:
    path: /auth/admin/realms/{realm}/roles
    method: GET
    data_selector: roles
- name: users
  endpoint:
    path: /auth/admin/realms/{realm}/users
    method: GET
    data_selector: users
- name: reporting_connector
  endpoint:
    path: /reporting-connector.conf
    method: SET
    data_selector: mysql_dbms_additional_params
    params:
      mysql_dbms_additional_params: noDatetimeStringSync=true&useSSL=true&requireSSL=true&trustServerCertificate=true&clientCertificateKeyStoreUrl=file:///root/config/certs/mykeystore.jks&clientCertificateKeyStorePassword={KEYSTORE_PASSWORD}
- name: MySQL_reports
  endpoint:
    path: /historical-reports/mysql
    method: GET
    data_selector: reports
- name: MsSQL_reports
  endpoint:
    path: /historical-reports/mssql
    method: GET
    data_selector: reports
- name: reports_offset
  endpoint:
    path: /reports_offset
    method: UPDATE
    data_selector: offset_in_minutes
    params:
      offset_in_minutes: -120
- name: secure_link_verification
  endpoint:
    path: /secure-link
    method: POST
    data_selector: session_code
- name: secure_link_generation
  endpoint:
    path: /secure-link/generate
    method: POST
    data_selector: link
- name: customer_list
  endpoint:
    path: /customer/list
    method: GET
    data_selector: records
- name: customer_labels
  endpoint:
    path: /customer/labels
    method: GET
    data_selector: records
- name: team_announcements
  endpoint:
    path: /team/announcements
    method: GET
    data_selector: records
- name: Conversations API
  endpoint:
    path: /cx/4.5/conversations-api-3rd-party-apps
    method: GET
    data_selector: records
- name: ChannelManager
  endpoint:
    path: /smppconnector
    method: GET
    data_selector: configs
- name: web_widget
  endpoint:
    path: /api/web/widget
    method: POST
    data_selector: widget
- name: channel
  endpoint:
    path: /api/channel
    method: POST
    data_selector: channel
- name: customer_conversations
  endpoint:
    path: /v1/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: keycloak
  endpoint:
    path: /auth/realms/Superset
    method: GET
- name: global_state_change
  endpoint:
    path: /agent/state/global
    method: POST
    data_selector: state_changes
    params: {}
- name: mrd_state_change
  endpoint:
    path: /agent/state/mrd
    method: POST
    data_selector: state_changes
    params: {}
- name: CIM Messages
  endpoint:
    path: /cim/messages
    method: GET
    data_selector: records
- name: routing-engine
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: channel-manager
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: bot-settings
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: general-settings
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: web-widget
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: forms
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: pull-mode-list
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: reason-code
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: activities
  endpoint:
    path: /forms
    method: POST
    data_selector: body
    params: {}
- name: default
  endpoint:
    path: /groups/default
    method: CREATE
    data_selector: group
    params: {}
- name: Team-1
  endpoint:
    path: /groups/Team-1
    method: CREATE
    data_selector: group
    params:
      supervisor: user-1
- name: Team-2
  endpoint:
    path: /groups/Team-2
    method: CREATE
    data_selector: group
    params:
      supervisor: user-1,user-4
- name: user-1
  endpoint:
    path: /users/user-1
    method: CREATE
    data_selector: user
    params: {}
- name: user-2
  endpoint:
    path: /users/user-2
    method: CREATE
    data_selector: user
    params: {}
- name: user-3
  endpoint:
    path: /users/user-3
    method: CREATE
    data_selector: user
    params: {}
- name: user-4
  endpoint:
    path: /users/user-4
    method: CREATE
    data_selector: user
    params: {}
- name: CIM Messages
  endpoint:
    path: /cim/messages
    method: GET
    data_selector: records
- name: Participant
  endpoint:
    path: /cx/4.5/participant
    method: GET
- name: Tenant
  endpoint:
    path: /cx/4.5/tenant
    method: GET
- name: ParticipantRole
  endpoint:
    path: /cx/4.5/participantrole
    method: GET
- name: conversationParticipant
  endpoint:
    path: /cx/4.5/conversationparticipant
    method: GET
- name: ParticipantType
  endpoint:
    path: /cx/4.5/participanttype
    method: GET
- name: customer
  endpoint:
    path: /cx/4.5/customer
    method: GET
- name: ChannelType
  endpoint:
    path: /cx/4.5/channeltype
    method: GET
- name: Channel
  endpoint:
    path: /cx/4.5/channel
    method: GET
- name: ChannelConfig
  endpoint:
    path: /cx/4.5/channelconfig
    method: GET
- name: CC User
  endpoint:
    path: /cx/4.5/cc-user
    method: GET
- name: AgentPresence
  endpoint:
    path: /cx/4.5/agentpresence
    method: GET
- name: channelSessionState
  endpoint:
    path: /cx/4.5/channelsessionstate
    method: GET
- name: ChannelConnector
  endpoint:
    path: /cx/4.5/channelconnector
    method: GET
- name: channelData
  endpoint:
    path: /cx/4.5/channeldata
    method: GET
- name: routing-engine
  endpoint:
    path: /routing-engine-attr-authz-config.json
    method: POST
- name: channelData
  endpoint:
    params:
      channelCustomerIdentifier: REQUIRED
      serviceIdentifier: REQUIRED
- name: change_log_level
  endpoint:
    path: /{COMPONENT}/actuator/loggers/com.ef.ccm
    method: POST
    data_selector: configuredLevel
    params: {}
- name: channelSessionState
  endpoint:
    path: /channelSessionState
    method: GET
    data_selector: properties
- name: Conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
- name: agent
  endpoint:
    path: /cc/user
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: secure_link
  endpoint:
    path: /secure-link
    method: GET
- name: ChannelConfig
  endpoint:
    path: /ChannelConfig
    method: GET
    data_selector: attributes
    params: {}
- name: channel
  endpoint:
    path: /services/data/vXX.X/sobjects/Channel
    method: GET
    data_selector: records
    params: {}
- name: channelData
  endpoint:
    path: /services/data/vXX.X/sobjects/channelData
    method: GET
    data_selector: records
    params: {}
- name: customer
  endpoint:
    path: /customer
    method: GET
    data_selector: attributes
    params: {}
- name: conversationParticipant
  endpoint:
    path: /services/data/vXX.X/sobjects/conversationParticipant
    method: GET
    data_selector: records
- name: ParticipantType
  endpoint:
    path: /ParticipantType
    method: GET
    data_selector: properties
- name: Conversations API
  endpoint:
    path: /cx/4.5/conversations-api-3rd-party-apps
    method: GET
    data_selector: records
    params: {}
- name: ParticipantRole
  endpoint:
    path: /ParticipantRole
    method: GET
    data_selector: records
    params: {}
- name: global_state_change
  endpoint:
    path: /change/global
    method: POST
    data_selector: state_transitions
    params: {}
- name: mrd_state_change
  endpoint:
    path: /change/mrd
    method: POST
    data_selector: state_transitions
    params: {}
- name: Conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
    params: {}
- name: participant
  endpoint:
    path: /participants
    method: GET
    data_selector: records
    params: {}
- name: channelSession
  endpoint:
    path: /channel/session
    method: GET
    data_selector: records
- name: activities
  endpoint:
    path: /forms
    method: POST
    data_selector: body
- name: channelData
  endpoint:
    path: /api/channelData
    method: GET
    data_selector: records
- name: AgentPresence
  endpoint:
    path: /api/AgentPresence
    method: GET
    data_selector: records
- name: tenant
  endpoint:
    path: /tenants
    method: GET
    data_selector: data
    params: {}
- name: activities
  endpoint:
    path: /activities
    method: POST
    data_selector: null
    params: {}
- name: User Login
  endpoint:
    path: /UserLogin
    method: POST
- name: Socket Events
  endpoint:
    path: /SocketEvents
    method: GET
- name: Participant
  endpoint:
    path: /cx/4.5/participant
    method: GET
- name: Tenant
  endpoint:
    path: /cx/4.5/tenant
    method: GET
- name: ParticipantRole
  endpoint:
    path: /cx/4.5/participantrole
    method: GET
- name: conversationParticipant
  endpoint:
    path: /cx/4.5/conversationparticipant
    method: GET
- name: ParticipantType
  endpoint:
    path: /cx/4.5/participanttype
    method: GET
- name: customer
  endpoint:
    path: /cx/4.5/customer
    method: GET
- name: ChannelType
  endpoint:
    path: /cx/4.5/channeltype
    method: GET
- name: Channel
  endpoint:
    path: /cx/4.5/channel
    method: GET
- name: ChannelConfig
  endpoint:
    path: /cx/4.5/channelconfig
    method: GET
- name: CC User
  endpoint:
    path: /cx/4.5/cc-user
    method: GET
- name: AgentPresence
  endpoint:
    path: /cx/4.5/agentpresence
    method: GET
- name: channelSessionState
  endpoint:
    path: /cx/4.5/channelsessionstate
    method: GET
- name: ChannelConnector
  endpoint:
    path: /cx/4.5/channelconnector
    method: GET
- name: channelData
  endpoint:
    path: /cx/4.5/channeldata
    method: GET
- name: agent_events
  endpoint:
    path: /cx/4.5/agent_events
    method: GET
    data_selector: events
    params: {}
- name: channelData
  endpoint:
    path: /channelData
    method: GET
    data_selector: data
    params: {}
- name: event
  endpoint:
    path: /addPullModeSubscribedListRequests
    method: POST
    data_selector: records
- name: cisco_contact_center_integration
  endpoint:
    path: /services/data/vXX.X/sobjects/CiscoContactCenterIntegration
    method: GET
    data_selector: records
- name: agentPresence
  endpoint:
    path: /agent-presence
    method: POST
    data_selector: agentPresence
    params: {}
- name: channelSessionState
  endpoint:
    path: /channelSessionState
    method: GET
    data_selector: records
- name: Conversations API
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
- name: CCUser
  endpoint:
    path: /path/to/CCUser/endpoint
    method: GET
    data_selector: records
- name: agentState
  endpoint:
    path: /agentState
    method: POST
    data_selector: agentState
    params: {}
- name: agentMRDState
  endpoint:
    path: /agentMRDState
    method: POST
    data_selector: agentMRDState
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: agent_presence
  endpoint:
    path: /path/to/agentpresence
    method: GET
    data_selector: records
- name: Conversations API
  endpoint:
    path: /services/data/vXX.X/conversations
    method: GET
    data_selector: records
- name: conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: data
    params: {}
- name: ChannelConfig
  endpoint:
    path: /ChannelConfig
    method: GET
    data_selector: attributes
    params:
      id: UUID
      conversationBot: String
      responseSla: int
      customerActivityTimeout: int
      routingPolicy: RoutingPolicy
- name: channel
  endpoint:
    path: /path/to/channel/endpoint
    method: GET
    data_selector: attributes
    params: {}
- name: channel_type
  endpoint:
    path: /path/to/channelType
    method: GET
    data_selector: records
- name: customer
  endpoint:
    path: /customer
    method: GET
    data_selector: attributes
    params: {}
- name: conversationParticipant
  endpoint:
    path: /services/data/vXX.X/sobjects/conversationParticipant
    method: GET
    data_selector: records
- name: ParticipantType
  endpoint:
    path: /ParticipantType
    method: GET
- name: ParticipantRole
  endpoint:
    path: /ParticipantRole
    method: GET
    data_selector: records
- name: participant
  endpoint:
    path: /services/data/vXX.X/sobjects/Participant
    method: GET
    data_selector: records
- name: channelSession
  endpoint:
    path: /channelSession
    method: GET
- name: tenant
  endpoint:
    path: /tenants
    method: GET
    data_selector: data
    params: {}
- name: channels_interface
  endpoint:
    path: /channels
    method: POST
- name: agent_desk
  endpoint:
    path: /agent_desk
    method: POST
- name: bot_connector
  endpoint:
    path: /bot_connector
    method: POST
- name: cim_messages
  endpoint:
    path: /cim_messages
    method: POST
- name: cim_events
  endpoint:
    path: /cim_events
    method: POST
- name: agent_events
  endpoint:
    path: /agent/events
    method: GET
    data_selector: events
    params: {}
- name: event_payload
  endpoint:
    path: /addPullModeSubscribedListRequests
    method: POST
    data_selector: payload
    params: {}
- name: cim_messages
  endpoint:
    path: /api/v1/cim/messages
    method: GET
    data_selector: messages
    params: {}
- name: agentPresence
  endpoint:
    path: /agentPresence
    method: POST
    data_selector: ''
    params: {}
- name: agentState
  endpoint:
    path: /changeAgentState
    method: POST
    data_selector: payload
- name: agentMRDState
  endpoint:
    path: /changeAgentMRDState
    method: POST
    data_selector: payload
- name: Conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: records
    params: {}
- name: CIM Messages
  endpoint:
    path: /api/cim_messages
    method: GET
    data_selector: records
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Webhook URL must match the WHATSAPP-PAGE-ACCESS-TOKEN variable in unified-admin
  configuration.
- EF CX can be connected to/configured with only one voice(Cisco, FS) platform at
  any given time.
- Customer Rooms have been tested using API endpoints as frontend interface was not
  available for testing purposes.
- Uses OAuth2 with refresh token — requires setup of connected app in Expertflow
- Some objects may return nulls in deeply nested fields
- Anonymous Users Profile Information is tested with Customer Widget, Telegram, 360
  WhatsApp, Facebook & Viber.
- Anonymous Users Profile Information is not tested with Instagram, Twilio WhatsApp
  and twitter.
- 'Environment: EF CX can be connected to/configured with only one voice(Cisco, FS)
  platform at any given time.'
- Geographical Disaster Recovery for EF-CX on Kubernetes
- Backup and Restore Strategies and Recommendations for Expertflow CX
- Some endpoints may have rate limits.
- Ensure API keys are kept secure.
- Expertflow CX provides centralized Identity and Access Management Solution for security
  backed by Keycloak.
- Users are managed in Keycloak Admin Console.
- Includes multi-level pagination, infinite scroll in wrap-up forms, and adds a keyword
  search bar for quicker wrap-up code selection.
- Introduces message-level ETL for comprehensive extraction and reporting of all communication
  data.
- No issues noticed
- Halted cause of issues
- Will be updated here for an HA cluster
- Stopped cause of Agent Manager's performance deterioration
- Stopped cause of application disconnection from Redis
- Stopped again because of application disconnection from Redis
- Stopped cause all of the APIs suddenly stopped responding. It was caused by an NGINX
  proxy at the DNS server.
- 'Info: Test # 3 was stopped cause of Agent Manager''s performance deterioration.
  The following tests are executed after fixing the issues.'
- 'Info: Test # 4 was stopped cause of application disconnection from Redis. Tuned
  some Redis parameters before executing the following tests.'
- 'Info: Test # 5 stopped again because of application disconnection from Redis. Tuned
  Redis further before executing further tests.'
- 'Info: Test # 6 stopped cause all of the APIs suddenly stopped responding. It was
  caused by an NGINX proxy at the DNS server. Resolved the issues before the following
  tests.'
- The cron-job exhibited robust performance, efficiently distributing the workload
  among the 100 agents.
- Chat processing and response times were well within acceptable limits, ensuring
  a smooth and responsive customer experience.
- The cron-job logs were monitored in real-time, and no critical errors or issues
  were detected during the execution.
- Requires setup of connected app in API
- Some objects like Contact may return nulls in deeply nested fields
- Chat processing and response times were well within acceptable limits.
- Requires setup of connected app in api
- Agents can be synchronized with the client's Active Directory and/or can be created
  and managed within Keycloak manually.
- Agents can be synchronized with the client's Active Directory or managed within
  Keycloak manually.
- OAuth2 is required for API access.
- Uses OAuth2 with refresh token — requires setup of connected app in Expertflow CX
- All agents are associated to all MRDs configured in the Unified-admin.
- The Interruptible feature is not implemented yet in the routing engine.
- Push Routing lets the system push a customer request to an eligible agent.
- Pull Routing allows agents to choose to join or dismiss incoming requests.
- This Agent states only matters for PUSH mode routing. An agent can cater to PULL
  mode requests in any state given that it is logged in and has subscribed to the
  correct List
- The Interruptible feature is not implemented yet in the routing engine and hence
  this field is not being used yet.
- The Routing Engine looks for an available agent in the queue based on the routing
  logic defined in the Queue Steps.
- If a customer has no label, the priority will be considered '1' as the default priority.
- If multiple labels are assigned to any customer, the highest priority will be considered
  for routing the request to the agent.
- Certain API features may vary across different versions.
- A conversation can have a maximum of 10 Conversation Data key-value pairs.
- Supports a maximum file size of 5 MB.
- The maximum character limit for messages is 4096 characters.
- Only Arabic is the supported RTL language for now.
- Customer is identified by a unique customer identifier fetched from the browser
  cookie.
- GA Unique ID can only be available if a Google Analytics account is integrated.
- Supporting file types have a maximum file size of 5 MB.
- Customer identification via GA Unique ID from browser cookie.
- The customer is identified by the customer channel identifier field created in unified-admin’s
  pre-chat form.
- Ensure to pass required configurations from the config file to SDK
- Maximum character limit for plain text messages is 4096 characters.
- Customers cannot select more than one option at the same time from a list or button
  message.
- List Messages or Reply Buttons can only be sent within the 24-hour timeframe.
- Multiple file attachments from messenger are currently not supported.
- Make sure to pass the required configurations from the config file to SDK.
- Support for video comments is not provided as of now.
- Nested comments of multimedia photos, stickers and GIFs) are not supported as of
  now.
- Profile photo of the user is not shown in Full View Post.
- The Page Access Token is required for API calls to Facebook.
- Ensure the Facebook App has the necessary permissions approved to access page comments
  and messenger messages.
- Requires setup of OAuth2 authentication.
- Support for Emoji is not provided as of now.
- INSTAGRAM_BASIC permission can be used without ADVANCED level access. However, PAGES_MANAGE_METADATA,
  INSTAGRAM_MANAGE_MESSAGES & INSTAGRAM_MANAGE_COMMENTS must be used with ADVANCED
  level access.
- Multiple file attachments (from messenger) are currently not supported in Facebook
  Connector - As of now, if a user attaches multiple files (in a single chat), the
  Facebook connector will picks only one file out of the multiple files that were
  attached and relay that to CCM while the rest of the other files attachment are
  ignored.
- Twilio SMS/MMS enables the business to send and receive text and multi-media messaging
  services to any phone, anywhere in the world.
- Maximum character limit for SMS is 160 characters.
- MMS can contain multimedia messages with a maximum media size of 5 MB.
- Token is obtained from Viber Admin Panel → Bot Account → Info.
- Webhook URL must combine the FQDN and the Account URI.
- Requires a Facebook App with appropriate permissions.
- Ensure to store the Page Access Token securely.
- Specify the Telegram Bot Token in CX Telegram connector configurations.
- Requires setup of Facebook App and permissions for access.
- Webhook must be verified before it can receive updates.
- This token should be secretly stored and only share with people who need direct
  access to the bot.
- Webhook URL is composed of FQDN and the Account URI.
- To set up webhook, use the token from the Viber Admin Panel.
- Each bot has a unique token that can be used to control your bot.
- Only https urls are supported for webhook registration.
- Create and manage Telegram bots using BotFather.
- Ensure you understand and comply with Twitter's API usage policies, including rate
  limits and guidelines specific to Twitter API v2.
- Twitter APIs require a Twitter Developer Account and App setup
- Ensure the Twitter Connector App is deployed and accessible publicly
- Size less than 5MB supported
- Twilio provides free Whatsapp Sandbox for testing.
- A PAID Twilio account is required for SMS/MMS functionalities.
- Twitter only supports social media for now.
- Bot responses will not be handled.
- Uses OAuth 1.0 for webhook management — requires API keys and tokens from Twitter
  Developer Portal
- Uses Twilio API for messaging via SMS, MMS, and WhatsApp.
- WhatsApp sandbox usage is free of cost.
- Ensure proper OAuth scopes are set for API access.
- Requires OAuth2 authentication setup.
- Rasa-X deployment on same node is not recommended. Install it on a separate node
  to deploy a production ready system. Deploying on the same node severely degrades
  the overall performance.
- 'Rasa-x deployment may take longer than expected due to dependency on huge image
  sizes and may throw warning like `Error: timed out waiting for the condition`, however
  the deployment continues.'
- The bot needs to expose a Webhook to communicate with the connector.
- Agent SLA is disabled for voice channels.
- In case no thresholds are defined in the system, the agent sla will run for the
  complete duration specified on the queue/list without any intermediate action.
- OAuth2 authentication is required for API access.
- CX-Voice is under active development.
- Administrative privileges (root) on the host machine are required to proceed with
  installation.
- These configurations are essential for ensuring proper routing and security of SIP-based
  calls in a Cisco network environment.
- Certificates from a valid signing authority or Domain signed certificate required
  for https protocol support.
- Complicated to set up with little to no guide on usage.
- May be CPU intensive.
- Requires much testing to configure the parameters for required cases.
- The settings in CUBE, CVP, and CUCM need to be precisely configured to ensure seamless
  communication between these components and the SIP Proxy.
- Agent To Agent Manual OB Call is not supported.
- Special characters are not supported in OB dialing.
- Unable to Minimize or Dock CX Voice Call Toolbar, Hindering Conversation View Visibility.
- Delay in Agent Notification/Dropped Event After Customer Declines Manual Outbound
  Call.
- Conversation get stucks when Agent1 is on call with customer and another Agent joins
  with Agent1 credentials while call is active.
- When an agent performs a direct transfer call on a queue with a service identifier
  different from the one configured in the script, the system enters an unstable state.
- CX Rona is not yet integrated with the CX Voice (FreeSWITCH) solution.
- Optional note in the notification & requesting agent info option is not available
  for CX-Voice as incoming request notification.
- Silent monitoring and Barge In features are not yet implemented for CX Voice.
- Direct extension to extension calls are not supported.
- Any private browser window is not supported, as the system is using the browser
  cache for state maintenance.
- The conversation will be closed after the configured customer activity timer expires
  and the requested agent will remain reserved in case the transfer request fails
  on FS.
- When a customer initiates a CX-Voice Call and a RONA event occurs on the voice call,
  the voice ringing vanishes as expected, but the Agent-State remains in Ready state
  instead of transitioning to Not-Ready state.
- When the CX-Voice MRD is ready, a chat request is still being received. Issue arise
  when Chat channel and Voice channel both are assigned same Queue.
- When a voice call request is enqueued and a customer simultaneously starts a web
  chat, if the customer attempts to talk to an agent from the web chat interface and
  receives a response from RASA stating that an agent is already requested, the system
  behaves as expected. However, if the customer leaves the voice call while the web
  chat is still active and upon pressing 'talk to agent' from the web chat interface
  after ending the voice call, the RASA response incorrectly states that an agent
  is requested but in real chat is not routed to agent.
- Some API endpoints may have limitations or specific requirements
- Free Switch and Expertflow CX Server Time should be synced.
- Special characters are not supported in OB dialing are not supported.
- When the CX-Voice MRD is ready, a chat request is still being received.
- When a voice call request is enqueued and a customer simultaneously starts a web
  chat, if the customer attempts to talk to an agent from the web chat interface and
  receives a response from RASA stating that an agent is already requested, the system
  behaves as expected.
- The extension will only be reflected once the user re-logins after the extension
  setup.
- Only one extension is to be configured per user.
- Same extension should not be assigned to multiple users
- The minimum value for AUTO_CALL_ANSWER_TIMER should be 2 seconds.
- Some objects may return nulls in deeply nested fields.
- Direct ext to ext calls are not supported.
- For voice channel provider configuration we have hidden the ProviderWebhook parameter,
  but for EF-Switch this parameter is required.
- For voice channel type, we are adding the VOICE MRD on bootstrap in the system but
  it is configured by default for CISCO, to use the same mrd for EF-Switch we need
  to enable the ManagedByReas check for the VOICE MRD in the mrd configurations.
- We cannot use the system simultaneously for both CISCO(routing is handled by an
  external party) and EF-Switch(routing is handled by internal RE) due to these limitations
  with the same channel type and mrd.
- The voice connector is deployed as a docker image.
- Uses Docker version 3.8 or higher.
- We cannot use the system simultaneously for both CISCO and EF-Switch due to these
  limitations with the same channel type and mrd.
- This value must always be less than the maximum concurrent calls allowed on the
  EFSwitch SIP trunk in use for outbound calls.
- The ports must be open on the server for the voice connector to function.
- The maximum concurrent calls allowed must always be less than the maximum concurrent
  calls allowed on the EFSwitch SIP trunk.
- The maximum calls per second must always be less than the sessions-per-second value
  in EFSwitch.
- SSH into the Debian server onto which the database will be deployed.
- Ensure the SIP trunk IP address is added to the EFSwitch ACL.
- The username and password for EFSwitch must be set during installation.
- CX Voice Configuration Guide
- Requires installation of EFSwitch and EFCX.
- Ensure proper Lua libraries are installed.
- Version 3.8 of docker-compose is used.
- For detailed logs set LOG_LEVEL to DEBUG.
- Activities are always stateless.
- CIMEvents contain the smallest amount of valuable information representing change
  of state in the publishing application resource.
- Remove fields CCM_API, SPRING_PORT, DB_DIALECT and DB_DRIVER
- Default log level is INFO, for more detailed logs use DEBUG
- Some objects may have limitations in data retrieval.
- Expertflow CX comes with various tabular and graphical historical reports that are
  available out of the box as part of the release.
- All reports listed in the document are historical reports. Data in the reports are
  only updated once a conversation or channel session becomes a part of the history.
- By default, this is set to 5-minute intervals.
- Uses OAuth2 for authentication
- This is not split Date-wise. By default, this bar chart shows all the transferred
  task data and its count at the top of each bar. Administrators can apply the filters
  on date and queue as per their requirements.
- This is not split Date-wise.
- Administrators can apply the filters on date and queue as per their requirements.
- Limitation/Issues in Cisco Integration For CX4.0,CX4.1
- Limitation/Issues in Cisco Integration in CX4.2
- Data is date-oriented.
- Administrators can apply filters for category, reasons, and date as per requirement.
- Ensure that the reports_offset table contains only one record; refrain from adding
  multiple entries to it.
- The week's starting day differs from country to country.
- Consult SLA Calculations for further details.
- Configure reporting components connection with MySQL over SSL. Optional
- 'You can specify the schedule for your cron job by setting the parameter schedule:
  ''*/5 * * * *'' in the above downloaded yaml file where the value ''5'' is a default
  time which corresponds to the interval in minutes.'
- Enables agents to receive a conversation from queues, handle an ongoing conversation,
  link customer profiles, view conversation history, view active channels, and view
  conversation data.
- Agents can pause / resume an active Conversation to temporarily stop SLA and Inactivity
  timers.
- Enables agents to view browser notifications along with a beep on receiving a new
  conversation and whenever agents receive new message from the customer.
- Ensure that reports_offset contains only one record; refrain from adding multiple
  entries.
- Queue-based reports are developed based on agent tasks created for conversations.
- After logging in, agents are in a Not-Ready state by default.
- Agents can log out while in the Ready state as well as when in the Not Ready state.
- This feature is only integrated for non-voice sessions; voice sessions have their
  own hold/resume button.
- As of the 4.5 release, when an agent applies wrap-up to a conversation, that wrap-up
  is sent as an agent message in the system.
- Currently, on CONVERSATION_HOLD and CONVERSATION_RESUMED, the customer is notified
  in the form of a BOT message.
- Configure reporting components connection with MySQL over SSL is optional.
- Update the 'fqdn, browser_language, connection_type and Database server connection
  parameters' in the file pre-deployment/reportingConnector/reporting-connector.conf.
- Agents must specify Cisco login credentials when integrated with Cisco Finesse.
- Global states are the high-level states that serve as the basis for setting MRD
  states.
- Auto-answer is not yet available for Cisco Voice channel.
- By default, past conversations are hidden behind a Load More button.
- Manual Outbound conversations are only supported on the WhatsApp channel for now.
- Agents can initiate conversations with customers at any time. In future updates,
  this will be restricted for agents not to initiate a conversation with a customer
  after 24 hours to align with the WhatsApp 24-hour session limit policy.
- To initiate after 24 hours, the businesses would need to buy template messages from
  WhatsApp. Outbound via WhatsApp template message support will be added in future
  releases.
- If the customer does not join the conversation within the set activity timeout of
  the channel (as defined by the system administrator in Unified Admin), the conversation
  will automatically be closed.
- Pull-based requests land on the list instead of the queue.
- Agents must subscribe to lists to receive notifications.
- Requires setup of connected app for API access
- An Expertflow CX Supervisor has default access to all agent features and additional
  features explained in the documentation.
- Agent Dashboard is not yet embedded inside Agent Desk. For now, it can only be accessed
  via A URL.
- Each agent/member of the team receives the announcement except the supervisor who
  has created the announcement.
- Will not receive the announcement if she is logged out.
- Attributes like First Name, Phone number, Web, and Voice are system-created and
  cannot be deleted.
- The conversation can be expired if the customer's inactivity timeout is expired.
- The agent will automatically be out on expiring the SLA time.
- One can only end a conversation if he/she is granted the relevant permissions to
  do that. Users having supervisor roles by default have these permissions.
- Expertflow CX requires a Kubernetes distribution for most of its core solution components.
- Deployment requires intermediate knowledge of Linux and Kubernetes.
- Agents can transfer conversations either to a queue or directly to another agent.
- When adding agents to a conference, the first agent's permissions dictate the conference
  behavior.
- Expertflow is not responsible for managing or supporting the underlying Kubernetes
  distribution.
- RKE2 server requires 10-15 minutes to bootstrap completely
- Ensure NTP is enabled for all nodes
- Clean up the existing installation + volume data ( DATA deletion warning ).
- Requires setup of connected app in Expertflow CX
- By default, a control plane node can manage application workloads as well.
- This is okay for a lighter workload (~50 concurrent conversations) and CX Single
  Node Deployment.
- For a higher workload or a multi-cluster setup, all control plane nodes should be
  tainted to schedule control-plane pods only.
- Requires setup of connected app in Expertflow
- Some endpoints may return nulls in deeply nested fields
- See RKE2 installation requirements for hardware sizing, the underlying operating
  system, and the networking requirements.
- For the conversation management and up to 50 concurrent conversations
- For reporting using Superset
- Requires a single Control Plane node while workload is distributed across multiple
  Worker nodes.
- Temporary failure of Control Plane is acceptable for high availability.
- Manual intervention required to re-bootstrap the Control Plane from the last known
  good backup in case of failure.
- At least three nodes (typically virtual machines) - one for Control Plane and two
  or more for worker nodes.
- One free additional IP for loadbalancer.
- Full network connectivity between all nodes.
- After a node goes down if pod remain terminating state you need to force full delete
  all the terminating pods after 5 mins by using the following command.
- Do not delete terminating pods from 'nfs-client' and 'ingress-nginx' namespaces.
  It may lead to potential failure.
- Out of three control plane nodes, at least two nodes must always be up and connected
  for the cluster to function.
- If Cloud Native Storage is not available, then 2 worker nodes are required on both
  site-A and site-B. However, if CloudNative Storage is accessible from both sites,
  1 worker node can sustain workload on each site.
- Load Balancer without HA is single point of failure in the cluster setup.
- Assuming that the Load balancer is running on 1.1.1.1 with the FQDN cx.customer-x.com.
- Saved filters only work for AgentDesk dashboards and not on the Summary dashboards.
- Load Balancer without HA is single point of failure in the cluster setup and customers
  are required to setup either of above in a failover cluster.
- The actual announcement text should not exceed more than 500 characters
- By default, the announcement expires in ten minutes. It can be changed and at maximum,
  it expires within five days from the date of creation.
- Replace the WORKER_NODE and CP_NODE with appropriate values.
- Default attributes such as First Name, Phone number, Web, and Voice cannot be deleted.
- The default value of the First Name field is set to 'John Doe'.
- CHANGE ME acl host_ef_cx hdr(host) -i FQDN
- acl is_websocket hdr(Upgrade) -i WebSocket
- acl is_websocket hdr_beg(Host) -i wss
- Kube-VIP works exactly as keepalive except that it has some additional flexibilities
  to configure depending upon the environment.
- End PULL-based Requests
- The DNS server should perform health checks on the Control-Plane nodes availability
  on ports `6443`, `9345`, `80` and `443`.
- A Kubernetes deployment requires one or multiple Worker nodes and one or more Control
  Plane nodes.
- In some cases you might need multiple clusters running on multiple sites and synced
  to each other.
- Default binaries are deployed in /var/lib/rancher/rke2/bin.
- Expertflow recommends using RKE2 for an on-premise production deployment.
- By default Kubernetes applies labels to its nodes to define their roles and environments.
- Make sure in the key parameter you pass in the unique key you assigned during the
  node label and assign the appropriate value you gave to that variable while label.
- RKE2 supported OS list is subject to frequent updates, to verify whether your OS
  is supported visit this link RKE2 supported OS
- If your environment restricts external connectivity through an HTTP proxy, follow
  Configure an HTTP proxy to configure your proxy as per RKE2 recommendations.
- This guide is developed for reference to deployment only and may be outdated.
- This procedure is only valid for the ability to create CSI Clone of the existing
  PVCs.
- It may take some time to finish cloning based on the dataset size of the source
  PVC.
- Once the clone is up and in Bound State, create a new Mongo-DB deployment and configure
  the helm command to use an already existing PVC.
- Volumes are expanded in two stages.
- Longhorn supports offline expansion only.
- Rebuilding and adding replicas is not allowed during the expansion.
- There is no way to suspend a daemonset.
- There is no way to suspend a pod not managed by a workload controller.
- In the case of the Control Plane failure, a manual intervention will be required
  to re-bootstrap the control-plane from last known good backup.
- If a site hosting Control Plane and one or more Worker nodes is down then the solution
  may be partially or completely down.
- Rescheduling of the worker node cannot be done until the Control Plane node is up
  again.
- After a node goes down if pod remain terminating state you need to force full delete
  all the terminating pods after 5 mins by using the provided command.
- 'Be aware of the following points: there is no space between the IP address and
  the options.'
- The name of OpenEBS storage class is 'openebs-hostpath'.
- Control Plane HA is a complete high availability Kubernetes cluster. This deployment
  requires three Control Plane nodes and two or more Worker nodes.
- Load Balancer without HA is single point of failure in the cluster setup
- Assuming that the Load balancer is running on 1.1.1.1 with the FQDN cx.customer-x.com
- In case the managed mongoDB is running in replicaSet configuration, please enable
  the relevant parameters for the replicaSet.
- When using single node MongoDB, please use the same value of the URL for all the
  variables.
- Some API responses may contain deprecated fields
- Replace WORKER_NODE and CP_NODE with appropriate values in configurations.
- Expertflow CX requires a fully qualified domain name for accessibility.
- Uses Helm for deployment of various components.
- During node failure time lapse, the workload migrates to remaining available worker
  nodes.
- Only new workload is scheduled on the newly recovered worker node.
- This process will involve downtime, please execute with outage announced beforehand.
- Kube-VIP requires at least one working RKE2 Control Plane node before deploying
  other nodes.
- Use 'kubectl exec' to access mongoDB pod
- The DNS server should perform health checks on the Control-Plane nodes availability
  on ports 6443, 9345, 80 and 443.
- Config-Maps are meant to provide variable data which must be kept external to the
  container image.
- 'Environment variables can be configured in key: value format and are extended to
  the container process via config-maps.'
- Default path for RKE2 binaries is '/var/lib/rancher/rke2/bin'
- RKE2 agent installation requires disabling firewall on all worker nodes
- it is a destructive command and will result in data loss.
- Add a unique label to a node to differentiate based on requirements.
- Node affinity restricts scheduling pods on labeled nodes.
- Node selector is a simpler operation to assign node.
- Ensure iscsid.service is running before installation.
- NFSv4 support is required for backup feature.
- Run All Commands in cim-solution/Kubernetes Directory
- 'This procedure can be applied to any of these components to re-claim the PV+PVC
  pair and replicate in case there are problems in accessing the PVC or PV: activeMQ,
  redis, mongo, minio, postgres.'
- Deploy Superset on a dedicated node for a production deployment.
- It may take some time to finish cloning; it will remain in 'PENDING' state until
  fully cloned.
- Access Superset via nodePort or FQDN
- Requires separate FQDN for FQDN access
- SSL/TLS access requires server.key and server.crt
- Once the clone is up and in Bound State, create a new Mongo-DB deployment.
- Once the mongodb instance comes up as ready, you can check the data as complete
  copy of the original PVC.
- Volumes are expanded in two stages. First, Longhorn expands the frontend (the block
  device), then it expands the filesystem.
- To prevent the frontend expansion from interference by unexpected data R/W, Longhorn
  supports offline expansion only.
- Rebuilding and adding replicas is not allowed during the expansion, and expansion
  is not allowed while replicas are rebuilding or being added.
- Shut down all Kubernetes Pods using Longhorn volumes in order to detach the volumes.
- Some workloads may be suspended.
- Create the database in target Database Management System using the scripts from
  cim-solution/kubernetes/pre-deployment/reportingConnector/SQLScripts/dbcreation
  directory.
- Update the fqdn, browser_language, connection_type and Database server connection
  parameters in the file pre-deployment/reportingConnector/reporting-connector.conf
- 'You can specify the schedule for your cron job by setting the parameter schedule:
  "*/5 * * * *" in cim-solution/kubernetes/pre-deployment/reportingConnector/ef-reporting-connector-cron.yaml
  file where the value ''5'' is a default time which corresponds to the interval in
  minutes.'
- cx deployment on Kubernetes, see CX Voice Deployment on Kubernetes
- Uses Kubernetes for deployment of CX-Voice components
- Substitute the NFS-SERVER-IP and EXPORT_PATH with actual values
- 'Be aware of the following points: there is no space between the IP address and
  the options'
- cx deployment on Kubernetes
- Do not install OpenEBS using kubectl because this will cause issues later in upgrading
  the system to a newer version of CX.
- Skip the StorageClass step as you are setting up OpenEBS for local volume provisioning.
- CX-voice should be accessible by a fully qualified domain name.
- Ensure to wait for all solution components to be up and ready.
- Deployment of Expertflow Cisco Voice on Kubernetes requires namespace creation.
- 'For Connections env: Ensure the managed mongoDB is running in replicaSet configuration.'
- 'For file-engine and conversation-controller: Only verify that mongoDB is available
  and properly booted up as a precondition to run.'
- 'For Reporting-Connector: Use the same value of the URL for all variables in single
  node MongoDB.'
- Set CISCO_FQDN to the Fully Qualified Domain Name of the EF CX.
- Set CISCO_TYPE to CCX or CCE depending on the type of Cisco call center in use (UCCX/UCCE).
- 'CISCO_FQDN: The Fully Qualified Domain Name of the EF CX.'
- 'CISCO_TYPE: Set to CCX or CCE depending on the type of Cisco call center in use
  (UCCX/UCCE).'
- 'CISCO_USERNAME: The administrator username of the Cisco call center.'
- 'CISCO_PASS: The administrator password of the Cisco call center.'
- Expertflow CX requires PostgreSQL for storing configuration data.
- Expertflow CX uses Redis for storing active system state.
- It is necessary to restart the workloads based on their deployment models.
- To use your own SSL certificates you will need to generate a secret with the certificate
  files.
- You must have private.key and server.crt files in pre-deployment/certificates.
- Use conversation-manager_db to perform operations.
- Replace <fqdn> with your machines actual fqdn
- Replace <userName> with the agents username
- Make sure the Template Editors Console is error-free before saving the Template.
- Services must be created before Deployments
- Superset will be deployed in ef-bi namespace.
- Data migration from CX4.4.x to CX4.5 requires careful planning and execution.
- Accessing Superset can be done using nodePort or FQDN.
- SSL/TLS access requires server.key and server.crt files.
- ETCD cluster environment can not add more control-plane nodes if the cluster is
  in unhealthy status.
- This situation is seen when one of the 3 control-plane nodes goes down and the ETCD
  goes into unhealthy status.
- The 4.4 release, support the reporting components connection with MySQL on SSL.
- These steps will effectively deploy the Kubernetes cron job for the reporting connector
  in the specified namespace expertflow.
- Check performance should not run on a busy production
- Get cluster keys should not run on a busy production env
- Defrag should not run in degraded cluster mode
- The commands above will only work if the user executing the script has the appropriate
  permissions to access the k3s cluster, export and import images, and push images
  to the specified gitlab repository.
- CX Voice should be accessible by a fully qualified domain name.
- Set LOG_LEVEL to INFO for basic logging and DEBUG for in-depth logs.
- 'ESL_IP: IP of the EFSwitch server.'
- 'ESL_PORT: ESL port of the EFSwitch server, set here.'
- 'ESL_PASSWORD: ESL password of the EFSwitch server, set here.'
- cx deployment on Kubernetes, see https://expertflow-docs.atlassian.net/l/cp/6ufqN94G
- Expertflow cisco should be accessible by a fully qualified domain name.
- If a majority of control plane nodes failed permanently, for example the instance
  has been terminated, then a new etcd cluster must be created.
- 'CISCO_TYPE: Set to CCX or CCE depending on the type of Cisco call center in use
  (UCCX/UCCE)'
- Apply Domain-signed SSL Certificates
- Expertflow CX ships with self-signed certificates for all the ingresses.
- The upgrade must be done while the system is inactive.
- Destructive command. Make sure the upgrade is successful before removing the old
  release files.
- This API requires authentication with OAuth2.
- Metrics Server is a required component; stats are incomplete unless the metrics
  server is deployed and running.
- Installation of monitoring solution requires Helm and Metrics Server.
- The values for the certificates needs to be stringified before they are applied.
- In conversations collection, roomInfo is added in each conversation document at
  root level.
- In CustomerTopicEvents collection, roomId and roomInfo are added at different points
  of the document.
- Use kubectl apply -f cstor-csi-disk.yaml to create the cStor storage class.
- 'To set the storage class as default, use kubectl patch storageclass openebs-hostpath
  -p ''{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'''
- Set the enabled flag as True to allow a replica to become a master in case one of
  the pods gets affected in a node.
- Set the amount of replicas as needed based on the number of nodes.
- 'If you try to add another control plane node without removing the NotReady node,
  you will get the error message ''ETCD join failed: etcdserver: unhealthy cluster''.'
- Get the list of Members using 'etcdctl member list'.
- Drain the workload on the node from the k3s cluster using 'kubectl drain <node_name>
  --delete-emptydir-data --ignore-daemonsets'.
- 'Check ETCD Performance: don''t run on a busy production'
- Don't run etcd get cluster keys on a busy production env
- Requires setup of cert-manager.
- Ensure ClusterIssuer is in ready state before proceeding.
- It is important to note that the commands above will only work if the user executing
  the script has the appropriate permissions to access the k3s cluster, export and
  import images, and push images to the specified gitlab repository.
- For an HA based deployments, the velero should be deployed on any of the Control-Plane
  nodes
- If the customer can provide S3, compatible storage, please use this link to configure
  Velero accordingly.
- Don't run performance checks on a busy production environment
- Avoid getting cluster keys in a busy production environment
- Backups using Velero requires at least one of the storage location available where
  backup can be saved.
- Backups using Velero require at least one storage location.
- For HA deployments, Velero should be deployed on Control-Plane nodes.
- Logout and then Login all agents again before using the application after upgrade.
- There is an actively developed guide for backups using Velero for EF-CX solution
  on kubernetes.
- This procedure requires that the end-user is comfortable with the common interfacing
  with the Kubernetes and understands basics of the kubernetes operations.
- The procedure is only valid for manual backup, and doesn't ascertain the continued
  approach for backup.
- Deployment of cStor in our scenario is done using Helm.
- All control plane nodes should be tainted to schedule control-plane pods only.
- The path of the backup has to under /tmp folder.
- The deployment of cStor in our scenario is done using Helm.
- Make sure that all the worker nodes have block devices present as this is what will
  be used when deploying a replicated storage pool.
- Ensure the replicas of stateful set components are applied with Pod anti-affinity.
- Label worker nodes appropriately for Node Affinity.
- Use Helm commands to deploy the Postgres operator for both primary and standby nodes.
- Adjust values file for failover scenarios.
- All Expertflow components are deployed in a separate namespace inside the Kubernetes
  called 'expertflow'.
- All external components will be deployed in 'ef-external' namespace.
- 'Helm command for postgreSQL for clusters as given below: helm upgrade --install=true
  --wait=true --timeout=10m0s --debug --namespace=ef-external --values=external/bitnami/postgresql-ha/values.yaml
  ef-postgresql external/bitnami/postgresql-ha'
- 'The Helm command for Keycloak is given below: helm upgrade --install=true --wait=true
  --timeout=10m0s --debug --namespace=ef-external --values=external/bitnami/keycloak/values-ha.yaml
  keycloak external/bitnami/keycloak/'
- 'Helm deployment for Mongo command is given below: helm upgrade --install=true --wait=true
  --timeout=10m0s --debug --namespace=ef-external --values=external/bitnami/mongodb/values-ha.yaml
  mongo external/bitnami/mongodb/'
- 'Helm command for MinIO deployment: helm upgrade --install=true --wait=true --timeout=10m0s
  --debug --namespace=ef-external --values=external/bitnami/minio/values-ha.yaml minio
  external/bitnami/minio/'
- Set the enabled flag as True this will allow a replica to become a master in case
  one of the pods gets affected in a node.
- Logout, then Login all agents again before using the application after upgrade.
- Some objects may have limitations.
- Uses LetsEncrypt based SSL for securing traffic using HTTPS.
- Uses Role Based authorization to secure APIs.
- Choose `Yes` to send the WhatsApp structure list message as a text message. Choose
  `No` to send a WhatsApp structure list message as the default structure message.
  The default value is `NO`.
- Choose `Yes` if you want to integrate solution with Cisco Finesse. Choose `No` if
  you want to deploy the solution in standalone mode.
- For an HA based deployments, the velero should be deployed on any of the Control-Plane
  nodes.
- Make sure the backup location is added and made available by looking through logs
- Be cautious when using the report file.
- Remove all the current dashboards, charts, databases, and datasets from your Superset
  when uploading the report file.
- This is where all your backups will be saved in case you don't provide any specific
  location.
- Minio can be deployed in different regions to make a complete DR fault tolerant
  backup/restore solution.
- The realm expertflow must not exist previously for this script to work properly.
- Replace the mongo-backup-$(date +%Y-%m-%d) with the actual path if the above command
  does not work.
- Velero based backups are considered more appropriate for continuous and effective
  back solutions.
- Default username is admin and password is admin.
- This procedure is only valid for manual backup, and doesn't ascertain the continued
  approach for backup.
- The path of the backup has to be under /tmp folder.
- Keycloak configs will be imported from .env file placed.
- Changes in keycloak-config.py file should also be added to config.py file.
- Configure client_secret.json file by following the process given above.
- Provide valid data for all the Keycloak Configurations in env-file.
- Requires setup of load balancer service provider
- Helm commands are used for deployment
- Resources and scopes of Unified Admin are automatically added within Keycloak when
  importing the expertflow realm.
- A user in Keycloak can be made a part of multiple groups
- Any updation in user teams will only be reflected once the user re-logins the system.
- Each user must always be made a part of a Keycloak Group.
- If supervisors are not added to their relevant Teams/Groups, they must be added
  in the default group.
- FQDN and Widgetidentifier must be the same as the EFCX WebRTC widget.
- Expertflow CX should be accessible by a fully qualified domain name.
- A user can only be assigned one team at a time.
- agents_permission & senior_agents_permission groups are not part of teams.
- Please Use the updated model. If the model is not the same as this one, download
  it in your local computer and upload it in the models tab in rasa-x UI.
- Each component includes a rest endpoint that enables users to switch to a different
  log level without having to restart the pods.
- Role Based authorization mechanism for securing APIs
- Requires setup of Realm, Client, Roles, and Users in KeyCloak
- Replace the {KEYSTORE_PASSWORD} with your original keystore password. Use 'changeit'
  in case of default password.
- Don't import both MsSQL & MySQL reports on the same Apache superset server.
- Now set the UTC offset for reports by the following document UTC Offset - Reports.
- UCCX instance must contain PORT of instance i.e 8445 at end of its url. Dont place
  / at end of url i.e https://uccx12-5p.ucce.ipcc:8445/ . It will cause an error.
- Procedure to mount the crm-service folder in unified agent POD.
- Ensure that you download the SR Wise file for MySQL and avoid adding MsSQL reports.
- All reports have undergone some configuration changes.
- Generated link is valid for 30 minutes.
- Session expired error will be shown after link expiration.
- Adding or removing agents from a team in Keycloak will take effect upon the agent's
  next login, not in real-time on dashboards.
- Users are created and managed within Keycloak.
- At least one admin user must be created within Keycloak, with an admin role, to
  use the Unified Admin application.
- SMPP channel type must be already created as part of the bootstrapping of the Channels
  Connector.
- Every User must be assigned atleast one Team apart from Permission Groups (agents_permission,
  senior_agents_permission).
- Uses Keycloak for managing agent privileges
- Agent-initiated conversations are only supported on WhatsApp channel for now.
- To initiate after 24 hours, businesses would need to buy template messages from
  WhatsApp.
- Using KeyCloak for Superset Authentication
- Uses Keycloak as Authentication solution for Superset.
- Configure the env-file by providing valid data for all the Keycloak Configurations.
- Each user must be made a part of a Keycloak Group.
- If a user is not supposed to be a part of any specific Group, add them to a default
  Group named 'default'.
- Every team must have a supervisor.
- Each component includes a rest end point that enables users to switch to a different
  log level without having to restart the pods.
- Uses Keycloak for authentication
- Ensure Finesse URL ends with PORT and does not have a trailing slash
- We want to place the crm-service.js in the skeleton project for the unified agent.
- We want to update/replace all files inside the assets/cti/crm/ of the unified-agent
  pod with the crm-service.js updated in the skeleton project during run time.
- Once the pod restarts, the file should be replaced.
- The Generated Link will be valid for the next 30 minutes allowing the customer to
  rejoin if mistaken disconnect any active video call session.
- Once the secure link expires, will through Session Expired error on the screen.
- At least one admin user must be created within Keycloak, with an `admin` role.
- Agents receive browser notifications along with a beep on receiving new conversations.
- The agent receives the Delivery Notification in the form of the customer's name
  display right under the message.
- In future updates, this will be restricted for agents not to initiate a conversation
  with a customer after 24 hours to align with WhatsApp 24-hour session limit policy.
- Agents are set to the Not Ready state by default after logging in.
- The state timer does not apply to the MRD state change.
- The message body can change with respect to the type of activity being defined by
  3rd-party.
- The version of socket.io-client should be 4.4.0.
- Events emitted by the custom Agent Desk and Agent Manager.
- Events emitted by the Agent/custom Agent Desk and listened by events on Agent Manager.
- Events emitted by the Agent Manager and listened by events on custom Agent Desk.
- Event is triggered when an agent subscribes to a list.
- Event is triggered to notify the agent whenever any error occurs during handshake
  of socket connection establishment e.g, unauthorized user, invalid data etc.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check your API key or token.'
- '404 Not Found: The requested resource does not exist.'
- '500 Internal Server Error: Try again later.'
- Halted cause of issues
- No critical errors or issues were detected during the execution.
- '401 Unauthorized: Check if the Page Access Token is valid or has the necessary
  permissions.'
- '401 Unauthorized: Invalid credentials or token expired.'
- '403 Forbidden: Insufficient permissions.'
- If status not equals to 0 then there is some issue with webhook configuration.
- 'Unauthorized: Check your access token.'
- 'Invalid Permission: Ensure your app has the necessary permissions.'
- 'Invalid Token: Check that your Page Access Token is correct.'
- 'Permission Denied: Ensure the app has required permissions.'
- '200 Ok: Successful registration of webhook.'
- '401 Unauthorized: Check API keys and tokens'
- '403 Forbidden: Ensure permissions are set correctly'
- '404 Not Found: Check the endpoint URL or resource availability'
- 'Authentication error: Check TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN'
- 'Message delivery failure: Check number capabilities or geo restrictions'
- '204 No Content: Successful deletion of webhook'
- '401 Unauthorized: Check TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN.'
- '401 Unauthorized: Check if the OAuth token is valid.'
- 'INVALID_CREDENTIALS: Check your client ID and secret.'
- 'TOKEN_EXPIRED: Refresh your access token.'
- 'Error: timed out waiting for the condition'
- '400 Bad Request: Check request parameters'
- '404 Not Found: Verify endpoint URL'
- '500 Internal Server Error: Try again later'
- Excess calls created by the dialer will be stuck in the database on the dialed state.
- Stuck calls can only be removed by directly interacting with the database.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'unknown: If the agent state is unknown, then it means that the state is not determined.'
- Control Plane failure may cause the solution to be partially or completely down.
- 'A POD is down: Some features of the application may fail to work.'
- 'A component/service running inside the POD is down: This will affect the interworking
  of the application, it might not be able to query or save data.'
- 'A worker-node is down: This will cause a 5 minute downtime for some features within
  the application.'
- 'Pending: PVC is in ''PENDING'' state until fully cloned.'
- 'INVALID_CREDENTIALS: Check client ID and secret'
- '403 Forbidden: Ensure proper permissions for the API'
- Pod Security Policy may need to be applied for Kubernetes < v1.25.
- '400 Bad Request: Check the request syntax'
- '401 Unauthorized: Verify your token and permissions'
- 'ETCD join failed: etcdserver: unhealthy cluster'
- 'k3s.service: Main process exited, code=exited, status=1/FAILURE'
- 'k3s.service: Failed with result ''exit-code''.'
- Failed to start Lightweight Kubernetes.
- '401 Unauthorized: Check your credentials and permissions.'
- 'Grafana Password Problem: Sometimes, the password is not picked by the grafana
  pod.'
- 'NoSchedule: Tainting control plane nodes may prevent scheduling of workloads.'
- '400 Bad Request: Check the request format and parameters.'
- '404 Not Found: Verify the resource exists.'
- '500 Internal Server Error: Check server logs for details.'
- '401 Unauthorized: Check authentication setup'
- '404 Not Found: Verify endpoint paths and resources'
- 'Grafana Password Problem: Sometimes, the password is not picked by the grafana
  pod which can be modified by executing the command inside the grafana pod'
- No specific errors mentioned in the documentation.
- 'Node Failure: After a node goes down kubernetes pods start shifting after a 5 minute
  wait window.'
- If the primary pod is affected the either of the two replica becomes primary and
  starts its normal function this has been successful.
- 'Internal Server Error: Clash of unique username causes issues if a deleted user
  is recreated with a different email.'
- '403 Forbidden: Check user permissions'
- '404 Not Found: Resource or role does not exist'
- '400 Bad Request: Invalid request parameters'
- No agents were available
- 'error: Agents won''t be assigned any new tasks while in NOT_READY state.'
- 'error: Agents will receive no new tasks from the particular MRD when in BUSY state.'
- 'error: The agent state will transition to NOT_READY automatically after all active
  tasks are cleared.'
- '200: Code 200 implies that the activity has been accepted.'
- 'connect_error: Notify the agent whenever any error occurs during handshake of socket
  connection establishment'
auth_info:
  mentioned_objects:
  - Keycloak
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Page Access Token
  - User Access Token
  - App
  - Bearer Token
  - Api Key
  - Api Secret Key
  - Access Token
  - Access Token Secret
  - TWILIO_ACCOUNT_SID
  - TWILIO_AUTH_TOKEN
  - API Key
  - API Key Secret
  - ETCDCTL_ENDPOINTS
  - ETCDCTL_CACERT
  - ETCDCTL_CERT
  - ETCDCTL_KEY
  - ETCDCTL_API
  - Role
  - Scope
  - Resource
client:
  base_url: https://api.expertflow.com
  auth:
    type: oauth2
source_metadata: null
