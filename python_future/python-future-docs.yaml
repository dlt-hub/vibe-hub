resources:
- name: map_function
  endpoint:
    path: /map_function
    method: GET
    data_selector: functionality
    params: {}
- name: zip_function
  endpoint:
    path: /zip_function
    method: GET
    data_selector: functionality
    params: {}
- name: filter_function
  endpoint:
    path: /filter_function
    method: GET
    data_selector: functionality
    params: {}
- name: file_io
  endpoint:
    path: /file_io
    method: GET
    data_selector: functionality
    params: {}
- name: reduce_function
  endpoint:
    path: /reduce_function
    method: GET
    data_selector: functionality
    params: {}
- name: input_function
  endpoint:
    path: /input_function
    method: GET
    data_selector: functionality
    params: {}
- name: map_function
  endpoint:
    path: /map_function
    method: GET
    data_selector: data
    params: {}
- name: zip_function
  endpoint:
    path: /zip_function
    method: GET
    data_selector: data
    params: {}
- name: filter_function
  endpoint:
    path: /filter_function
    method: GET
    data_selector: data
    params: {}
- name: map
  endpoint:
    path: /map
    method: GET
    data_selector: records
    params: {}
- name: filter
  endpoint:
    path: /filter
    method: GET
    data_selector: records
    params: {}
- name: map_function
  endpoint:
    path: /imap/map_function
    method: GET
    data_selector: results
    params: {}
- name: filter_function
  endpoint:
    path: /imap/filter_function
    method: GET
    data_selector: results
    params: {}
- name: map_function
  endpoint:
    path: /map_function
    method: GET
    data_selector: records
- name: map_function
  endpoint:
    path: /imap/map
    method: GET
    data_selector: mynewlist
    params: {}
- name: zip_function
  endpoint:
    path: /zip/zip
    method: GET
    data_selector: myziplist
    params: {}
- name: filter_function
  endpoint:
    path: /filter/filter
    method: GET
    data_selector: filteredlist
    params: {}
- name: myiter
  endpoint:
    path: imap
    method: GET
    data_selector: myiter
    params: {}
- name: builtins_map
  endpoint:
    path: /builtins/map
    method: GET
    data_selector: records
- name: itertools_imap
  endpoint:
    path: /itertools/imap
    method: GET
    data_selector: records
- name: map_functionality
  endpoint:
    path: /imap/map
    method: GET
    data_selector: records
- name: zip_functionality
  endpoint:
    path: /imap/zip
    method: GET
    data_selector: records
- name: filter_functionality
  endpoint:
    path: /imap/filter
    method: GET
    data_selector: records
- name: map_function
  endpoint:
    path: /imap/map_function
    method: GET
    data_selector: records
- name: reduce_function
  endpoint:
    path: /imap/reduce_function
    method: GET
    data_selector: records
- name: myiter
  endpoint:
    path: /imap
    method: GET
    data_selector: records
    params: {}
- name: map
  endpoint:
    path: /map
    method: GET
    data_selector: records
- name: filter
  endpoint:
    path: /filter
    method: GET
    data_selector: records
- name: imap_resource
  endpoint:
    path: /imap
    method: GET
    data_selector: records
    params: {}
- name: futurize
  endpoint:
    path: /futurize
    method: GET
    data_selector: records
    params: {}
- name: pasteurize
  endpoint:
    path: /pasteurize
    method: GET
    data_selector: records
    params: {}
notes:
- This page is still a work in progress… We need to go through our docstrings and
  make them sphinx-compliant, and figure out how to improve formatting with the sphinx-bootstrap-theme
  plugin. Pull requests would be very welcome.
- The python-future package should no longer be necessary.
- 'Minimum versions: Python 2: 2.7+, Python 3: 3.4+'
- Easy, clean, reliable Python 2/3 compatibility
- Uses built-in functions for mapping and filtering collections
- The documentation provides idioms for writing future-proof code compatible with
  both Python 2 and 3.
- 'Python 2 only: uses imap'
- 'Python 3 only: uses map'
- 'A PDF version is here: https://python-future.org/compatible_idioms.pdf'
- See https://python-future.org and https://pythonhosted.org/six/ for more information.
- Python 2 uses imap, Python 3 uses map.
- 'This notebook shows you idioms for writing future-proof code that is compatible
  with both versions of Python: 2 and 3.'
- 'Warning: using raw_input and input is unsafe with untrusted input.'
- Python 2 and 3 examples provided for compatibility.
- 'Python 2 only: uses imap from itertools'
- 'Python 2 and 3: option 1 uses builtins'
- Python 2 requires import from itertools for imap.
- Python 3 uses built-in map function.
- 'This documentation provides idioms for writing future-proof code that is compatible
  with both versions of Python: 2 and 3.'
- Python 2 and 3 support various built-in functions.
- 'Warning: using either of these is unsafe with untrusted input.'
- 'Writing future-proof code that is compatible with both versions of Python: 2 and
  3.'
- Using 'from future import standard_library' to ensure compatibility with Python
  2 and 3.
- This documentation provides information on writing Python 2-3 compatible code.
- The future package can be used with or without unicode_literals imports.
- The `future` package can be used with or without `unicode_literals` imports.
- C extension modules and Cython code are not supported.
- The `future` source tree includes scripts called `futurize` and `pasteurize` to
  aid in making Python 2 code or Python 3 code compatible.
- '`futurize` and `pasteurize` are useful to automate much of the work of porting,
  particularly the boring repetitive text substitutions.'
- Nevertheless, `futurize` and `pasteurize` are still incomplete and make some mistakes,
  like 2to3, on which they are based.
- '`futurize` doesn’t currently make the following change automatically: Strings containing
  `\U` produce a `SyntaxError` on Python 3.'
- '`futurize` and `pasteurize` are still incomplete and make some mistakes, like 2to3,
  on which they are based.'
- python-future is still in beta. After version 1.0 is released, the API will not
  change in backward-incompatible ways until a hypothetical version 2.0.
- Python 2.7 is the end of the Python 2 line.
- The language and standard libraries are improving only in Python 3.x.
- Some standard library interfaces have changed in ways that require different code
  than normal Py3 code in order to achieve Py2/3 compatibility.
- This is a minor bug-fix release containing a number of fixes
- Uses OAuth2 with refresh token — requires setup of connected app in api
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects: []
client:
  base_url: https://python-future.org
  auth: {}
  headers: {}
  paginator: {}
source_metadata: null
