resources:
- name: billing_plans
  endpoint:
    path: /api/v1/plans/
    method: GET
- name: organization_invoices
  endpoint:
    path: /api/v1/organization/{orgname}/invoices
    method: GET
- name: organization_skus
  endpoint:
    path: /api/v1/organization/{orgname}/marketplace
    method: GET
- name: bind_sku_to_org
  endpoint:
    path: /api/v1/organization/{orgname}/marketplace
    method: POST
- name: batch_remove_sku
  endpoint:
    path: /api/v1/organization/{orgname}/marketplace/batchremove
    method: POST
- name: remove_sku_from_org
  endpoint:
    path: /api/v1/organization/{orgname}/marketplace/{subscription_id}
    method: DELETE
- name: user_marketplace_subscriptions
  endpoint:
    path: /api/v1/user/marketplace
    method: GET
- name: repository_builds
  endpoint:
    path: /api/v1/repository/{repository}/build/
    method: GET
- name: request_repo_build
  endpoint:
    path: /api/v1/repository/{repository}/build/
    method: POST
- name: cancel_repo_build
  endpoint:
    path: /api/v1/repository/{repository}/build/{build_uuid}
    method: DELETE
- name: get_repo_build
  endpoint:
    path: /api/v1/repository/{repository}/build/{build_uuid}
    method: GET
- name: get_repo_build_status
  endpoint:
    path: /api/v1/repository/{repository}/build/{build_uuid}/status
    method: GET
- name: getRepoBuildLogs
  endpoint:
    path: /api/v1/repository/{repository}/build/{build_uuid}/logs
    method: GET
- name: getGlobalMessages
  endpoint:
    path: /api/v1/messages
    method: GET
- name: createGlobalMessage
  endpoint:
    path: /api/v1/messages
    method: POST
- name: logs
  endpoint:
    path: /api/v1/repository/{repository}/logs
    method: GET
    data_selector: ''
    params:
      repository: The full path of the repository. e.g. namespace/name
      next_page: The page token for the next page
      endtime: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
      starttime: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
- name: user_logs
  endpoint:
    path: /api/v1/user/logs
    method: GET
    data_selector: ''
    params:
      next_page: The page token for the next page
      performer: Username for which to filter logs.
      endtime: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
      starttime: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
- name: organization_logs
  endpoint:
    path: /api/v1/organization/{orgname}/logs
    method: GET
    data_selector: ''
    params:
      orgname: The name of the organization
      next_page: The page token for the next page
      performer: Username for which to filter logs.
      endtime: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
      starttime: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
- name: aggregate_repo_logs
  endpoint:
    path: /api/v1/repository/{repository}/aggregatelogs
    method: GET
    data_selector: ''
    params:
      repository: The full path of the repository. e.g. namespace/name
      endtime: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
      starttime: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
- name: aggregate_user_logs
  endpoint:
    path: /api/v1/user/aggregatelogs
    method: GET
    data_selector: ''
    params:
      performer: Username for which to filter logs.
      endtime: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
      starttime: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
- name: aggregated_logs
  endpoint:
    path: /api/v1/organization/{orgname}/aggregatelogs
    method: GET
    data_selector: logs
    params: {}
- name: export_repo_logs
  endpoint:
    path: /api/v1/repository/{repository}/exportlogs
    method: POST
    data_selector: export_logs
    params: {}
- name: export_user_logs
  endpoint:
    path: /api/v1/user/exportlogs
    method: POST
    data_selector: export_logs
    params: {}
- name: export_org_logs
  endpoint:
    path: /api/v1/organization/{orgname}/exportlogs
    method: POST
    data_selector: export_logs
    params: {}
- name: repo_manifest
  endpoint:
    path: /api/v1/repository/{repository}/manifest/{manifestref}
    method: GET
    data_selector: manifest
    params: {}
- name: create_organization
  endpoint:
    path: /api/v1/organization/
    method: post
    data_selector: string
    params: {}
- name: getOrganizationMember
  endpoint:
    path: /api/v1/organization/{orgname}/members/{membername}
    method: get
- name: getApplicationInformation
  endpoint:
    path: /api/v1/app/{client_id}
    method: get
- name: getOrganizationApplications
  endpoint:
    path: /api/v1/organization/{orgname}/applications
    method: get
- name: createOrganizationApplication
  endpoint:
    path: /api/v1/organization/{orgname}/applications
    method: post
- name: deleteOrganizationApplication
  endpoint:
    path: /api/v1/organization/{orgname}/applications/{client_id}
    method: delete
- name: permissions_team
  endpoint:
    path: /api/v1/repository/{repository}/permissions/team/{teamname}
    method: PUT
- name: organization_prototypes
  endpoint:
    path: /api/v1/organization/{orgname}/prototypes
    method: GET
- name: create_prototype_permission
  endpoint:
    path: /api/v1/organization/{orgname}/prototypes
    method: POST
- name: delete_prototype_permission
  endpoint:
    path: /api/v1/organization/{orgname}/prototypes/{prototypeid}
    method: DELETE
- name: update_prototype_permission
  endpoint:
    path: /api/v1/organization/{orgname}/prototypes/{prototypeid}
    method: PUT
- name: list_repos
  endpoint:
    path: /api/v1/repository
    method: GET
- name: repository
  endpoint:
    path: /api/v1/repository
    method: POST
- name: listRepoNotifications
  endpoint:
    path: /api/v1/repository/{repository}/notification/
    method: GET
- name: createRepoNotification
  endpoint:
    path: /api/v1/repository/{repository}/notification/
    method: POST
- name: deleteRepoNotification
  endpoint:
    path: /api/v1/repository/{repository}/notification/{uuid}
    method: DELETE
- name: getRepoNotification
  endpoint:
    path: /api/v1/repository/{repository}/notification/{uuid}
    method: GET
- name: resetRepositoryNotificationFailures
  endpoint:
    path: /api/v1/repository/{repository}/notification/{uuid}
    method: POST
- name: getUserRobots
  endpoint:
    path: /api/v1/user/robots
    method: GET
    data_selector: ''
    params: {}
- name: deleteUserRobot
  endpoint:
    path: /api/v1/user/robots/{robot_shortname}
    method: DELETE
    data_selector: ''
    params: {}
- name: getUserRobot
  endpoint:
    path: /api/v1/user/robots/{robot_shortname}
    method: GET
    data_selector: ''
    params: {}
- name: createUserRobot
  endpoint:
    path: /api/v1/user/robots/{robot_shortname}
    method: PUT
    data_selector: ''
    params: {}
- name: getOrgRobots
  endpoint:
    path: /api/v1/organization/{orgname}/robots
    method: GET
    data_selector: ''
    params: {}
- name: robot
  endpoint:
    path: /api/v1/organization/{orgname}/robots/{robot_shortname}
    method: DELETE
- name: robot_permissions
  endpoint:
    path: /api/v1/user/robots/{robot_shortname}/permissions
    method: GET
- name: org_robot_permissions
  endpoint:
    path: /api/v1/organization/{orgname}/robots/{robot_shortname}/permissions
    method: GET
- name: repo_manifest_security
  endpoint:
    path: /api/v1/repository/{repository}/manifest/{manifestref}/security
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: repo_tags
  endpoint:
    path: /api/v1/repository/{repository}/tag/
    method: GET
    data_selector: tags
    params: {}
- name: delete_full_tag
  endpoint:
    path: /api/v1/repository/{repository}/tag/{tag}
    method: DELETE
    data_selector: ''
    params: {}
- name: change_tag
  endpoint:
    path: /api/v1/repository/{repository}/tag/{tag}
    method: PUT
    data_selector: ''
    params: {}
- name: restore_tag
  endpoint:
    path: /api/v1/repository/{repository}/tag/{tag}/restore
    method: POST
    data_selector: ''
    params: {}
- name: activateBuildTrigger
  endpoint:
    path: /api/v1/repository/{repository}/trigger/{trigger_uuid}/activate
    method: POST
    data_selector: response
    params: {}
- name: manuallyStartBuildTrigger
  endpoint:
    path: /api/v1/repository/{repository}/trigger/{trigger_uuid}/start
    method: POST
    data_selector: response
    params: {}
- name: listTriggerRecentBuilds
  endpoint:
    path: /api/v1/repository/{repository}/trigger/{trigger_uuid}/builds
    method: GET
    data_selector: response
    params:
      limit: integer
- name: getLoggedInUser
  endpoint:
    path: /api/v1/user/
    method: GET
    data_selector: response
    params: {}
- name: listStarredRepos
  endpoint:
    path: /api/v1/user/starred
    method: GET
    data_selector: response
    params:
      next_page: string
- name: builds
  endpoint:
    path: /builds
    method: GET
    data_selector: builds
    params: {}
- name: build_triggers
  endpoint:
    path: /build_triggers
    method: GET
    data_selector: triggers
    params: {}
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: payload
- name: repository
  endpoint:
    path: /repository
    method: POST
    data_selector: repository
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: repository_notifications
  endpoint:
    path: /notifications/repositories
    method: POST
    data_selector: notifications
    params: {}
- name: robot_accounts
  endpoint:
    path: /v1/robot_accounts
    method: GET
    data_selector: accounts
notes:
- Quay.io only supports docker version 1.0 or greater
- Requires admin access on the SCM repository to setup build triggers.
- The Dockerfile must not appear in the .dockerignore file.
- This request requires an `Content-Type` header containing `application/json` in
  order to be valid.
- The repository will start out empty unless a Dockerfile is uploaded.
- Quay.io supports the ability to build repositories that use submodules, however
  some manual setup is required to use this feature.
- These keys will not have access to private git submodule repositories.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- GitHub does not provide a way for us to create webhooks without granting read/write
  permissions.
- Users can revoke their granted GitHub read/write permissions after a trigger has
  been setup without breaking the Quay.io build trigger.
- The 'Run Trigger Now' command on the build trigger requires read access to the GitHub
  repository and will not work if these permissions have been revoked.
- adding notifications requires repository admin permission
- pushing to a repository requires Repository Write Access
- pulling from a repository requires Repository Read Access for private repositories
- viewing and changing permissions requires repository admin permission
- To authenticate with a robot account, either download the .dockercfg file from the
  robot account’s panel or use docker login.
- When the first pull of a squashed image occurs, the registry streams the image as
  it is being flattened in real time.
- It is recommended to pull the first squashed image on a developer machine before
  deploying.
- Robot account credentials are required to use a private base image as the FROM line
  in a Build Trigger.
- The Dockerfile must not appear in .dockerignore file.
- Verify the Dockerfile location and the branch/tag value specified in the build trigger.
- You are attempting to pull a non-existant tag (probably 'latest')
- If you do not specify a tag, newer versions of docker will attempt to pull the 'latest'
  tag regardless of its existance.
- ECS_ENGINE_AUTH_DATA is the contents of the auths attribute in .docker/config.json
  starting at Docker version 1.7.0 or the contents of .dockercfg before that.
- Ensure that there are no proxies in between the client and the registry and that
  the two are geographically close.
- Docker has defined as maximum timeout of five seconds before a timeout will occur.
- There is a known issue with Vagrant whereby networking connections can sometimes
  become extremely slow.
- If you are using docker on OSX via boot2docker, the networking stack can sometimes
  get out of sync.
- Linux kernel bug on Ubuntu Precise Pangolin (12.04 LTS) (64-bit) requires update
  and reboot to use docker
- Missing AUFS on Raring 13.04 and Saucy 13.10 (64-bit) may require installation of
  linux-image-extra
- To get Marathon/Mesos to pull from a private repository, we need to copy the docker
  configuration file’s credentials onto the worker machines.
- When using mesos app definitions, credentials must be provided as a URI that must
  be accessible by all nodes that may start your application.
- It is worth considering the security implications of each approach.
- Access tokens are currently deprecated and should not be used. Robot Accounts are
  their replacement.
errors:
- '400: Bad Request'
- '401: Session required'
- '403: Unauthorized access'
- '404: Not found'
- '400 Bad Request: Check request parameters'
- '401 Session required: Ensure valid session or authentication'
- '403 Unauthorized access: Verify permissions'
- '404 Not found: Check repository or build UUID'
- '400 Bad Request: Check the request parameters'
- '401 Session required: Ensure the session is active'
- '404 Not found: Confirm the resource exists'
- '400 Bad Request: Invalid request parameters.'
- '401 Session required: Authentication is necessary.'
- '403 Unauthorized access: Permission denied.'
- '404 Not found: Requested resource does not exist.'
- 400 Bad Request
- 401 Session required
- 403 Unauthorized access
- 404 Not found
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403: You do not have permission on the repository'
- '403: Attempting to use a private base image results in a 403 error.'
- 'A build step failed: API error (500): Cannot locate specified Dockerfile: Dockerfile'
- Could not reach any registry endpoint
- 'Status 403 trying to pull repository: "{\"error\": \"Permission Denied\"}"'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://quay.io
  auth:
    type: basic
    location: header
    header_name: Authorization
source_metadata: null
