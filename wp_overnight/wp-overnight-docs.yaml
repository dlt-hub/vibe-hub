resources:
- name: retrieve_order
  endpoint:
    path: /orders/<id>
    method: GET
    data_selector: documents
    params: {}
- name: create_regenerate_document
  endpoint:
    path: /orders/<id>/documents
    method: POST
    data_selector: ''
    params:
      type: document_type
      regenerate: 'false'
- name: download_document
  endpoint:
    path: /orders/<id>/documents
    method: GET
    data_selector: ''
    params:
      type: document_type
      generate: 'false'
- name: delete_document
  endpoint:
    path: /orders/<id>/documents
    method: DELETE
    data_selector: ''
    params:
      type: document_type
- name: using_the_rest_api
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: configuring_tax_classifications
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/configuring-tax-classifications-for-e-documents-en16931/
    method: GET
- name: download_link_settings
  endpoint:
    path: /woocommerce-pdf-invoices/documents
    method: GET
    data_selector: documents
    params: {}
- name: Using the REST API
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: Using the REST API
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: Tax Classifications for E-Documents
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/configuring-tax-classifications-for-e-documents-en16931/
    method: GET
- name: Supported E-Document Formats
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/supported-edocument-formats/
    method: GET
- name: Display a PDF download link in WooCommerce emails
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/display-a-pdf-download-link-in-woocommerce-emails/
    method: GET
- name: Document pretty link incompatibility with Plain permalinks structure
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/document-pretty-link-incompatibility-with-plain-permalinks-structure/
    method: GET
- name: Removal of the Pro tab
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/removal-of-the-pro-tab/
    method: GET
- name: Settings compatible with multilingual plugins
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/settings-compatible-with-multilingual-plugins/
    method: GET
- name: Display a payment link on PDFs
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/display-a-payment-link-on-pdfs/
    method: GET
- name: UBL Tax Classification Filter Hooks
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/ubl-tax-classification-filter-hooks/
    method: GET
- name: CSS tips with the PDF Customizer
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/css-tips-with-the-pdf-customizer/
    method: GET
- name: Authorizing Google Drive
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/authorizing-google-drive/
    method: GET
- name: Troubleshooting Logo Issues
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/troubleshooting-logo-issues/
    method: GET
- name: payment_link
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/display-a-payment-link-on-pdfs
    method: GET
    data_selector: results
- name: ubl_tax_schemes
  endpoint:
    path: /wpo_wcpdf_ubl_tax_schemes
    method: GET
    data_selector: tax_schemes
- name: ubl_tax_categories
  endpoint:
    path: /wpo_wcpdf_ubl_tax_categories
    method: GET
    data_selector: tax_categories
- name: ubl_tax_reasons
  endpoint:
    path: /wpo_wcpdf_ubl_tax_reasons
    method: GET
    data_selector: tax_reasons
- name: Using the REST API
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api
    method: GET
- name: PDF Invoices
  endpoint:
    path: /woocommerce/pdf-invoices
    method: GET
    data_selector: invoices
- name: PDF Documents
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/
    method: GET
- name: woocommerce_batch_numbers
  endpoint:
    path: /woocommerce-batch-numbers
    method: GET
    data_selector: records
- name: woocommerce_postcode_checker
  endpoint:
    path: /woocommerce-postcode-checker
    method: GET
    data_selector: records
- name: woocommerce_print_address_labels
  endpoint:
    path: /woocommerce-print-address-labels
    method: GET
    data_selector: records
- name: woocommerce_print_order_list
  endpoint:
    path: /woocommerce-print-order-list
    method: GET
    data_selector: records
- name: woocommerce_quick_manual_products
  endpoint:
    path: /woocommerce-quick-manual-products
    method: GET
    data_selector: records
- name: woocommerce_smart_reminder_emails
  endpoint:
    path: /woocommerce-smart-reminder-emails
    method: GET
    data_selector: records
- name: woocommerce_automatic_order_printing
  endpoint:
    path: /woocommerce-automatic-order-printing
    method: GET
    data_selector: records
- name: woocommerce_customer_manager
  endpoint:
    path: /woocommerce-customer-manager
    method: GET
    data_selector: records
- name: Using the REST API
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: PDF Customizer Placeholders
  endpoint:
    path: /woocommerce/pdf-customizer/placeholders
    method: GET
    data_selector: placeholders
- name: WooCommerce Batch Numbers
  endpoint:
    path: /woocommerce/batch-numbers
    method: GET
    data_selector: batch_numbers
- name: WooCommerce Postcode Checker
  endpoint:
    path: /woocommerce/postcode-checker
    method: GET
    data_selector: postcode_checker
- name: WooCommerce Print Address Labels
  endpoint:
    path: /woocommerce/print-address-labels
    method: GET
    data_selector: print_address_labels
- name: WooCommerce Print Order List
  endpoint:
    path: /woocommerce/print-order-list
    method: GET
    data_selector: print_order_list
- name: WooCommerce Quick Manual Products
  endpoint:
    path: /woocommerce/quick-manual-products
    method: GET
    data_selector: quick_manual_products
- name: WooCommerce Smart Reminder Emails
  endpoint:
    path: /woocommerce/smart-reminder-emails
    method: GET
    data_selector: smart_reminder_emails
- name: WooCommerce Automatic Order Printing
  endpoint:
    path: /woocommerce/automatic-order-printing
    method: GET
    data_selector: automatic_order_printing
- name: WooCommerce Customer Manager
  endpoint:
    path: /woocommerce/customer-manager
    method: GET
    data_selector: customer_manager
- name: product_bundle_compatibility
  endpoint:
    path: /woocommerce/pdf-invoices/compatibility
    method: GET
    data_selector: plugins
    params: {}
- name: settings
  endpoint:
    path: /woocommerce/pdf-invoices/customizer
    method: GET
    data_selector: settings
    params: {}
- name: archive_folder_location
  endpoint:
    path: /wp-content/uploads/wpo_wcpdf_xxx/archive
    method: GET
    data_selector: archive_folder
    params: {}
- name: Proforma Invoice
  endpoint:
    path: /woocommerce-pdf-invoices/proforma-invoice
    method: GET
    data_selector: documents
    params: {}
- name: Receipt
  endpoint:
    path: /woocommerce-pdf-invoices/receipt
    method: GET
    data_selector: documents
    params: {}
- name: Credit Note
  endpoint:
    path: /woocommerce-pdf-invoices/credit-note
    method: GET
    data_selector: documents
    params: {}
- name: Order Proposal
  endpoint:
    path: /woocommerce-order-proposal
    method: GET
    data_selector: documents
    params: {}
- name: Order Confirmation
  endpoint:
    path: /woocommerce-order-proposal/order-confirmation
    method: GET
    data_selector: documents
    params: {}
- name: Using the REST API
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: paypal_fees
  endpoint:
    path: /function/wcpdf_show_paypal_fees
    method: GET
    data_selector: return
    params: {}
- name: Using the REST API
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: document_management
  endpoint:
    path: /woocommerce/pdf-invoices/document-management
    method: POST
    data_selector: data
    params: {}
- name: using_the_rest_api
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: Polylang settings
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/polylang-settings
    method: GET
    data_selector: settings
    params: {}
- name: multilingual_pdf_documents
  endpoint:
    path: /using-gtranslate-to-generate-multilingual-pdf-documents
    method: GET
    data_selector: records
- name: PDF Invoices
  endpoint:
    path: /woocommerce-pdf-invoices
    method: GET
    data_selector: invoices
    params: {}
- name: Using the REST API
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: Settings compatible with multilingual plugins
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/settings-compatible-with-multilingual-plugins/
    method: GET
- name: document_language_setting
  endpoint:
    path: /woocommerce/pdf-invoices/general/multilingual/document-language
    method: GET
    data_selector: settings
    params: {}
- name: set_order_language_manually
  endpoint:
    path: /woocommerce/orders
    method: GET
    data_selector: orders
    params: {}
- name: files
  endpoint:
    path: /2/files/list_folder
    method: POST
    data_selector: entries
    params: {}
- name: receipt
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/creating-a-receipt-document/
    method: POST
- name: Receipt
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/creating-a-receipt-document
    method: GET
    data_selector: documents
    params: {}
- name: UBL Document
  endpoint:
    path: /pdf-invoices/documents/ubl
    method: POST
    data_selector: document
    params: {}
- name: Multilingual Options
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/multilingual-options
    method: GET
    data_selector: settings
    params: {}
- name: String Translation
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/string-translation
    method: GET
    data_selector: strings
    params: {}
- name: bulk_export
  endpoint:
    path: /bulk_export
    method: GET
    data_selector: documents
    params: {}
- name: HTML output setting
  endpoint:
    path: /woocommerce/pdf-invoices/advanced/settings/output-to-html
    method: GET
    data_selector: settings
- name: PDF document access permissions
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/pdf-documents-view-permissions
    method: GET
    data_selector: permissions
    params: {}
- name: watermark
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/adding-a-watermark-to-pdf-documents
    method: GET
    data_selector: document
    params: {}
- name: postcode_checker
  endpoint:
    path: /woocommerce-postcode-checker/address-check-using-woocommerce-rest-api/
    method: GET
    data_selector: records
- name: batch_numbers
  endpoint:
    path: /woocommerce-batch-numbers/manually-modify-consumed-batch/
    method: GET
    data_selector: records
- name: Using the REST API
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: Download Invoice
  endpoint:
    path: /wp-admin/admin-ajax.php
    method: GET
    data_selector: document
    params:
      action: generate_wpo_wcpdf
      document_type: invoice
      order_ids: '123'
      access_key: '1234567890'
      shortcode: 'true'
- name: Tax Classifications
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/configuring-tax-classifications-for-e-documents-en16931/
    method: GET
- name: Supported E-Document Formats
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/supported-edocument-formats/
    method: GET
- name: invoice_number
  endpoint:
    path: /woocommerce_email_before_order_table
    method: POST
    data_selector: invoice_number
    params: {}
- name: email_bcc
  endpoint:
    path: /woocommerce/email/bcc
    method: POST
    data_selector: emails
    params: {}
- name: order_notification
  endpoint:
    path: /wp-json/wc/v3/orders
    method: GET
    data_selector: orders
    params: {}
- name: custom_pdf_filenames
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/custom-pdf-filenames
    method: GET
    data_selector: records
    params: {}
- name: custom_filename
  endpoint:
    path: /wpo_wcpdf_filename
    method: ADD_FILTER
    data_selector: filename
    params: {}
- name: product_variation_description
  endpoint:
    path: /wpo_wcpdf_after_item_meta
    method: POST
    data_selector: product_description
    params: {}
- name: purchase_notes
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/displaying-product-purchase-notes
    method: GET
    data_selector: purchase_notes
    params: {}
- name: custom_page_size
  endpoint:
    path: /custom_page_size
    method: POST
    data_selector: response
    params: {}
- name: landscape_orientation
  endpoint:
    path: /landscape_orientation
    method: POST
    data_selector: response
    params: {}
- name: custom_translations
  endpoint:
    path: /wp-content/plugins/woocommerce-pdf-invoices-packing-slips/languages/
    method: GET
    data_selector: translations
    params: {}
- name: premium_templates
  endpoint:
    path: /wp-content/plugins/woocommerce-pdf-ips-templates/languages/
    method: GET
    data_selector: templates
    params: {}
- name: professional_extension
  endpoint:
    path: /wp-content/plugins/woocommerce-pdf-ips-pro/languages/
    method: GET
    data_selector: professional
    params: {}
- name: refund
  endpoint:
    path: /refunds
    method: POST
    data_selector: refunds
    params: {}
- name: credit_note
  endpoint:
    path: /credit-notes
    method: POST
    data_selector: credit_notes
    params: {}
- name: order_notes
  endpoint:
    path: /order-notes
    method: GET
    data_selector: notes
    params: {}
- name: Configuring Tax Classifications for E-Documents
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/configuring-tax-classifications-for-e-documents-en16931/
    method: GET
- name: Supported E-Document Formats
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/supported-edocument-formats/
    method: GET
- name: Display a PDF download link in WooCommerce emails
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/display-a-pdf-download-link-in-woocommerce-emails/
    method: GET
- name: Document pretty link incompatibility with Plain permalinks structure
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/document-pretty-link-incompatibility-with-plain-permalinks-structure/
    method: GET
- name: Removal of the Pro tab
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/removal-of-the-pro-tab/
    method: GET
- name: template_action_hooks
  endpoint:
    path: /woocommerce/pdf-invoices-packing-slips/template-action-hooks
    method: GET
    data_selector: hooks
- name: delivery_date
  endpoint:
    path: /wpo_wcpdf_after_order_data
    method: POST
    data_selector: delivery_date
    params: {}
- name: custom_text
  endpoint:
    path: /wpo_wcpdf_after_order_details
    method: POST
    data_selector: custom_text
    params: {}
- name: tax_exempt
  endpoint:
    path: /wpo_wcpdf_after_order_details
    method: POST
    data_selector: tax_exempt
    params: {}
- name: product_categories
  endpoint:
    path: /wpo_wcpdf_after_item_meta
    method: POST
    data_selector: product_categories
    params: {}
- name: due_date
  endpoint:
    path: /wpo_wcpdf_after_order_data
    method: POST
    data_selector: due_date
    params: {}
- name: payment_instructions
  endpoint:
    path: /wpo_wcpdf_after_order_details
    method: POST
    data_selector: payment_instructions
    params: {}
- name: using_the_rest_api
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: custom_pdf_template
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/templates/Simple
    method: GET
- name: cart_block
  endpoint:
    path: /cart
    method: GET
    data_selector: cart_items
    params: {}
- name: Configuring Tax Classifications for E-Documents
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/configuring-tax-classifications-for-e-documents-en16931/
    method: GET
- name: Supported E-Document Formats
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/supported-edocument-formats/
    method: GET
- name: Display a PDF download link in WooCommerce emails
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/display-a-pdf-download-link-in-woocommerce-emails/
    method: GET
- name: Document pretty link incompatibility with Plain permalinks structure
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/document-pretty-link-incompatibility-with-plain-permalinks-structure/
    method: GET
- name: menu_cart
  endpoint:
    path: /wp-json/wc/v3/menu_cart
    method: GET
    data_selector: data
    params: {}
- name: empty_cart
  endpoint:
    path: /wp-json/wc/v3/cart/empty
    method: POST
    data_selector: result
- name: full_cart
  endpoint:
    path: /wp-json/wc/v3/cart/full
    method: POST
    data_selector: result
- name: menu_cart_pro_shortcode
  endpoint:
    path: /wpmenucart
    method: GET
    data_selector: shortcode
    params: {}
- name: order_picking
  endpoint:
    path: /woocommerce-ultimate-barcodes/order-picking/
    method: GET
    data_selector: records
    params: {}
- name: epc_qr_code
  endpoint:
    path: /woocommerce/epc-qr-code
    method: GET
    data_selector: data
    params: {}
- name: ZATCA QR Code for WooCommerce Invoice
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/zatca-qr-code-for-woocommerce-invoice/
    method: GET
- name: European Payments Council QR Code
  endpoint:
    path: /woocommerce-ultimate-barcodes/european-payments-council-epc-qr-code-for-woocommerce/
    method: GET
- name: ZATCA QR Code
  endpoint:
    path: /zatca-qr-code
    method: GET
    data_selector: QR_Code_Data
    params: {}
- name: order_picking
  endpoint:
    path: /woocommerce-ultimate-barcodes/order-picking/
    method: GET
- name: epc_qr_code
  endpoint:
    path: /woocommerce-ultimate-barcodes/european-payments-council-epc-qr-code-for-woocommerce/
    method: GET
- name: zatca_qr_code
  endpoint:
    path: /woocommerce-ultimate-barcodes/zatca-qr-code-for-woocommerce-invoice/
    method: GET
- name: display_barcode_shortcode
  endpoint:
    path: /woocommerce-ultimate-barcodes/display-a-barcode-using-a-shortcode/
    method: GET
- name: supported_barcode_types
  endpoint:
    path: /woocommerce-ultimate-barcodes/supported-barcode-types/
    method: GET
- name: product_barcode
  endpoint:
    path: /woocommerce/ultimate-barcodes/product_barcode
    method: GET
    data_selector: barcode
    params:
      id: product_id
- name: order_barcode
  endpoint:
    path: /woocommerce/ultimate-barcodes/order_barcode
    method: GET
    data_selector: barcode
    params:
      id: order_id
- name: document_barcode
  endpoint:
    path: /woocommerce/ultimate-barcodes/document_barcode
    method: GET
    data_selector: barcode
    params:
      order_id: order_id
      type: document_type
- name: document_barcodes
  endpoint:
    path: /woocommerce-ultimate-barcodes/how-do-create-document-barcodes/
    method: GET
- name: order_barcodes
  endpoint:
    path: /woocommerce-ultimate-barcodes/how-to-create-order-barcodes/
    method: GET
- name: product_barcodes
  endpoint:
    path: /woocommerce-ultimate-barcodes/how-to-create-product-barcodes/
    method: GET
- name: order_barcodes
  endpoint:
    path: /woocommerce-ultimate-barcodes/how-do-create-order-barcodes/
    method: GET
    data_selector: order_barcodes
    params: {}
- name: product_barcodes
  endpoint:
    path: /woocommerce-ultimate-barcodes/how-to-create-product-barcodes/
    method: GET
    data_selector: product_barcodes
    params: {}
- name: order_barcodes
  endpoint:
    path: /woocommerce/ultimate-barcodes/orders
    method: GET
    data_selector: barcodes
    params: {}
- name: product_barcodes
  endpoint:
    path: /woocommerce-ultimate-barcodes/how-to-create-product-barcodes
    method: GET
- name: order_barcodes
  endpoint:
    path: /woocommerce-ultimate-barcodes/how-to-create-order-barcodes
    method: GET
- name: product_barcodes
  endpoint:
    path: /woocommerce-ultimate-barcodes/
    method: GET
    data_selector: records
- name: order_barcode
  endpoint:
    path: /woocommerce-ultimate-barcodes/how-to-customize-the-order-barcode-data/
    method: GET
- name: Styling order barcode
  endpoint:
    path: /woocommerce-ultimate-barcodes/how-to-change-the-order-barcode-styles/
    method: GET
    data_selector: content
    params: {}
- name: PDF Invoices
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips
    method: GET
- name: product_barcodes
  endpoint:
    path: /woocommerce-ultimate-barcodes/display-product-barcode-in-pdf-documents
    method: GET
    data_selector: barcodes
    params: {}
- name: order
  endpoint:
    path: /woocommerce/orders
    method: GET
    data_selector: orders
- name: product
  endpoint:
    path: /woocommerce/products
    method: GET
    data_selector: products
- name: invoice
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/invoice
    method: GET
    data_selector: records
- name: receipt
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/receipt
    method: GET
    data_selector: records
- name: using_improved_external_products_with_wp_all_import
  endpoint:
    path: /improved-external-products-pro/using-improved-external-products-with-wp-all-import/
    method: GET
- name: setting_up_custom_button_html
  endpoint:
    path: /improved-external-products-pro/setting-up-custom-button-html/
    method: GET
- name: using_the_rest_api
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: single_product_button_html
  endpoint:
    path: /setting-up-custom-button-html/single-product-button-html
    method: GET
    data_selector: button_html
- name: variable_product_button_html
  endpoint:
    path: /setting-up-custom-button-html/variable-product-button-html
    method: GET
    data_selector: button_html
- name: bulk_order_form
  endpoint:
    path: /woocommerce/bulk-order-form
    method: GET
    data_selector: records
- name: bulk_order
  endpoint:
    path: /woocommerce-bulk-order-form
    method: GET
    data_selector: products
    params: {}
- name: Order Proposal
  endpoint:
    path: /order-proposal
    method: GET
    data_selector: data
    params: {}
- name: order_proposal
  endpoint:
    path: /wc_order_proposal
    method: POST
    data_selector: data
    params: {}
- name: order_proposal
  endpoint:
    path: /order-proposal
    method: GET
    data_selector: records
    params: {}
- name: order_proposal
  endpoint:
    path: /woocommerce/order-proposal
    method: POST
    data_selector: proposal_data
    params: {}
- name: Using the REST API
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: product_serial_numbers
  endpoint:
    path: /woocommerce/product_serial_numbers
    method: GET
- name: Using the REST API
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: product_serial_number
  endpoint:
    path: /product-serial-numbers
    method: GET
- name: supplier_shipment
  endpoint:
    path: /supplier-shipment
    method: GET
- name: Product Serial Number
  endpoint:
    path: /product-serial-number
    method: GET
    data_selector: records
- name: Supplier Shipment
  endpoint:
    path: /supplier-shipment
    method: GET
    data_selector: records
- name: import_serial_numbers
  endpoint:
    path: /products/serial-numbers/import
    method: POST
    data_selector: imported_records
- name: supplier_shipment
  endpoint:
    path: /product-serial-numbers/supplier-shipment
    method: POST
- name: supplier_shipment
  endpoint:
    path: /products/supplier_shipments
    method: POST
    data_selector: shipment
    params: {}
- name: batches
  endpoint:
    path: /wp-json/wc/v3/batch-numbers
    method: GET
    data_selector: data
    params: {}
- name: Get a product
  endpoint:
    path: /products/{{product_id}}
    method: GET
- name: Get all batches
  endpoint:
    path: /products/batches
    method: GET
- name: Insert a batch through a product
  endpoint:
    path: /products/{{product_id}}
    method: PUT
- name: Update a batch through a product
  endpoint:
    path: /products/{{product_id}}
    method: PUT
- name: Update a batch directly
  endpoint:
    path: /products/batches/{{batch_id}}
    method: PUT
- name: Delete a batch through a product
  endpoint:
    path: /products/{{product_id}}
    method: PUT
- name: Force delete a batch through a product
  endpoint:
    path: /products/{{product_id}}
    method: PUT
- name: Delete a PO through a product
  endpoint:
    path: /products/{{product_id}}
    method: PUT
- name: Get a product
  endpoint:
    path: /products/{{product_id}}
    method: GET
- name: Get all batches
  endpoint:
    path: /products/batches
    method: GET
- name: Insert a batch through a product
  endpoint:
    path: /products/{{product_id}}
    method: PUT
- name: Update a batch through a product
  endpoint:
    path: /products/{{product_id}}
    method: PUT
- name: Update a batch directly
  endpoint:
    path: /products/batches/{{batch_id}}
    method: PUT
- name: Delete a batch through a product
  endpoint:
    path: /products/{{product_id}}
    method: PUT
- name: Force delete a batch through a product
  endpoint:
    path: /products/{{product_id}}
    method: PUT
- name: Delete a PO through a product
  endpoint:
    path: /products/{{product_id}}
    method: PUT
- name: batches
  endpoint:
    path: /products/batches
    method: GET
    data_selector: batches
    params: {}
- name: update_batch
  endpoint:
    path: /products/<product_id>
    method: PUT
    data_selector: batches
    params: {}
- name: delete_batch
  endpoint:
    path: /products/<product_id>
    method: PUT
    data_selector: batches
    params: {}
- name: delete_batch_purchase_order
  endpoint:
    path: /products/<product_id>
    method: PUT
    data_selector: batches
    params: {}
- name: ATUM Inventory Logs
  endpoint:
    path: /atum/inventory-logs
    method: GET
    data_selector: logs
    params: {}
- name: Batch Numbers
  endpoint:
    path: /products/batch-numbers
    method: GET
    data_selector: batch_numbers
    params: {}
- name: export_batch_customers
  endpoint:
    path: /export/batch/customers
    method: GET
    data_selector: customers
    params: {}
- name: export_orders_items_with_batches
  endpoint:
    path: /export/orders/items/batches
    method: GET
    data_selector: order_items
    params: {}
- name: export_batches
  endpoint:
    path: /export/batches
    method: GET
    data_selector: batches
    params: {}
- name: export_order_batches
  endpoint:
    path: /export/order/batches
    method: GET
    data_selector: order_batches
    params: {}
- name: Purchase Order
  endpoint:
    path: /woocommerce-batch-numbers/creating-a-purchase-order/
    method: GET
- name: import_update_product_batch
  endpoint:
    path: /woocommerce-batch-numbers/import-update-product-batch-data-using-wp-all-import-add-on
    method: GET
- name: synchronize_product_stock
  endpoint:
    path: /woocommerce-batch-numbers/synchronize-product-main-stock-with-batches-total-stock
    method: GET
    data_selector: stock
    params: {}
- name: batch_number
  endpoint:
    path: /woocommerce-batch-numbers
    method: GET
    data_selector: records
    params: {}
- name: PDF Invoices
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/
    method: GET
    data_selector: invoices
    params: {}
- name: batch_numbers
  endpoint:
    path: /woocommerce-batch-numbers
    method: GET
    data_selector: batch_data
    params: {}
- name: batch_stock_reduction_priority
  endpoint:
    path: /woocommerce-batch-numbers/define-batch-stock-reduction-priority/
    method: GET
    data_selector: content
    params: {}
- name: Invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
- name: Packing Slips
  endpoint:
    path: /packing_slips
    method: GET
    data_selector: packing_slips
- name: Batch Numbers
  endpoint:
    path: /woocommerce-batch-numbers
    method: GET
    data_selector: data
    params: {}
- name: batch_expiry_date_shortcode
  endpoint:
    path: /woocommerce-batch-numbers/batch-expiry-date-shortcode/
    method: GET
    data_selector: shortcode
    params: {}
- name: Check postcode
  endpoint:
    path: /wp-json/wc/wpo/wcpc/v1/wc-postcode-checker
    method: GET
    params:
      house_number: '30'
      postcode: 2012ES
- name: postcode_checker
  endpoint:
    path: /wc-postcode-checker
    method: GET
    data_selector: address
    params:
      house_number: string
      postcode: string
- name: address_check
  endpoint:
    path: /woocommerce-postcode-checker/address-check-using-woocommerce-rest-api/
    method: GET
    data_selector: records
- name: full_settings
  endpoint:
    path: /woocommerce-postcode-checker/full-settings/
    method: GET
    data_selector: records
- name: postcode_lookup
  endpoint:
    path: /address-check
    method: GET
- name: postcode_checker
  endpoint:
    path: /woocommerce-postcode-checker/address-check
    method: GET
    data_selector: data
    params: {}
- name: using_the_rest_api
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: postcode_checker
  endpoint:
    path: /woocommerce-postcode-checker/address-check-using-woocommerce-rest-api/
    method: GET
    data_selector: records
- name: postcode_checker
  endpoint:
    path: /woocommerce/postcode-checker
    method: GET
    data_selector: records
- name: address_labels
  endpoint:
    path: /woocommerce-print-address-labels
    method: GET
    data_selector: labels
    params: {}
- name: address_formatting
  endpoint:
    path: /woocommerce-print-address-labels/formatting-the-address
    method: GET
    data_selector: address_format
    params: {}
- name: address_labels
  endpoint:
    path: /woocommerce-print-address-labels
    method: GET
    data_selector: labels
    params: {}
- name: Print Address Labels
  endpoint:
    path: /woocommerce-address-labels/templates/
    method: GET
    data_selector: templates
    params: {}
- name: Print Order List
  endpoint:
    path: /woocommerce-print-order-list/
    method: GET
    data_selector: orders
    params: {}
- name: Print custom checkout fields
  endpoint:
    path: /woocommerce-print-order-list/print-custom-checkout-fields/
    method: GET
- name: order_notes
  endpoint:
    path: /woocommerce-print-order-list/show-order-notes
    method: GET
    data_selector: notes
    params: {}
- name: order_list
  endpoint:
    path: /woocommerce-order-list/templates/
    method: GET
- name: product_emulation
  endpoint:
    path: /woocommerce/settings/products
    method: GET
    data_selector: settings
    params: {}
- name: quick_manual_products
  endpoint:
    path: /woocommerce-quick-manual-products
    method: GET
    data_selector: products
    params: {}
- name: add_manual_product
  endpoint:
    path: /add-item
    method: POST
    data_selector: result
    params: {}
- name: email_placeholders
  endpoint:
    path: /woocommerce/email_placeholders
    method: GET
    data_selector: placeholders
    params: {}
- name: payment_reminder
  endpoint:
    path: /woocommerce-smart-reminder-emails/payment-reminders
    method: POST
    data_selector: reminder_emails
    params: {}
- name: using_the_rest_api
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: job_options
  endpoint:
    path: /woocommerce/printorders/printnode/printing/job/options
    method: POST
    data_selector: options
    params: {}
- name: using_the_rest_api
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: print_order
  endpoint:
    path: /woocommerce/print-order
    method: POST
    data_selector: result
    params: {}
- name: order
  endpoint:
    path: /woocommerce/automatic-order-printing
    method: GET
    data_selector: orders
- name: custom_fonts
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-custom-fonts/
    method: GET
    data_selector: custom_fonts_data
- name: order_status_changes
  endpoint:
    path: /woocommerce-automatic-order-printing-printnode/how-can-i-automatically-print-when-the-order-status-changes/
    method: GET
    data_selector: article
    params: {}
- name: using_the_rest_api
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
    data_selector: records
- name: printers
  endpoint:
    path: /printers
    method: GET
    data_selector: printers
- name: print_jobs
  endpoint:
    path: /printjobs
    method: POST
    data_selector: print_jobs
- name: Using the REST API
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
- name: WooCommerce add-ons compatibility
  endpoint:
    path: /woocommerce-automatic-order-printing-printnode/what-other-woocommerce-add-ons-is-this-plugin-compatible-with/
    method: GET
    data_selector: content
    params: {}
- name: using_the_rest_api
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/using-the-rest-api/
    method: GET
    data_selector: ''
    params: {}
- name: print_jobs
  endpoint:
    path: /printjobs
    method: GET
    data_selector: printJobs
- name: printers
  endpoint:
    path: /printers
    method: GET
    data_selector: printers
- name: supported_e_document_formats
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/supported-edocument-formats/
    method: GET
- name: configuring_tax_classifications
  endpoint:
    path: /woocommerce-pdf-invoices-packing-slips/configuring-tax-classifications-for-e-documents-en16931/
    method: GET
- name: customer
  endpoint:
    path: /customers
    method: GET
    data_selector: data
    params: {}
- name: customer_data
  endpoint:
    path: /customer/tools/export
    method: GET
    data_selector: customers
    params: {}
- name: create_customer
  endpoint:
    path: /customers/add
    method: POST
    data_selector: customer_data
- name: import_csv
  endpoint:
    path: /customers/tools/import
    method: POST
    data_selector: import_data
- name: import_existing_orders
  endpoint:
    path: /customers/tools/import/orders
    method: POST
    data_selector: import_orders_data
- name: order_proposal
  endpoint:
    path: /order-proposal
    method: GET
    data_selector: proposals
    params: {}
- name: customer_data
  endpoint:
    path: /woocommerce-customer-manager/display-customer-data/
    method: GET
- name: export_customer_data
  endpoint:
    path: /woocommerce-customer-manager/export-customer-data/
    method: GET
- name: create_import_customers
  endpoint:
    path: /woocommerce-customer-manager/create-and-import-customers/
    method: POST
- name: Product Serial Numbers
  endpoint:
    path: /product-serial-numbers
    method: GET
- name: customer_data
  endpoint:
    path: /woocommerce-customer-manager/display-customer-data
    method: GET
- name: export_customer_data
  endpoint:
    path: /woocommerce-customer-manager/export-customer-data
    method: GET
- name: create_import_customers
  endpoint:
    path: /woocommerce-customer-manager/create-and-import-customers
    method: POST
- name: customer_data
  endpoint:
    path: /woocommerce-customer-manager/display-customer-data/
    method: GET
    data_selector: customer_data
    params: {}
- name: export_customer_data
  endpoint:
    path: /woocommerce-customer-manager/export-customer-data/
    method: GET
    data_selector: export_data
    params: {}
- name: create_import_customers
  endpoint:
    path: /woocommerce-customer-manager/create-and-import-customers/
    method: POST
    data_selector: import_data
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Accurate tax classification ensures compliance with EU invoicing standards (EN16931).
- Incorrect or missing classifications may lead to rejected invoices or compliance
  issues in cross-border transactions.
- PDF/A-3 support is required to generate hybrid documents
- All supported formats are compliant with the EN16931 European standard
- Document link access type setting must be set to 'Full' to allow download link in
  emails.
- Specific settings for document types are available in the Documents tab.
- When adding either a new tax scheme, category or reason, only key/value pairs with
  keys that don’t conflict with existing defaults will be allowed.
- Some plugins may convert your images into an incompatible file type.
- Translation plugins like WPML, Polylang, TranslatePress could be a possible culprit.
- Requires the Premium Templates extension of the PDF Invoices and Packing Slips Plus
  Bundle.
- base64_decode() has been disabled for security reasons
- 'Supports plugins: YITH WooCommerce Product Bundle, WooCommerce Product Bundles,
  WPC Product Bundle'
- Documents will be saved in the ‘archive’ folder.
- Users of the plugin with an active license can receive a Custom Font extension.
- No need to fiddle with code in regards to installing custom fonts for PDF documents.
- The changes as described in this document cannot be undone!
- Editing of invoice number and date is currently disabled. If you need to enable
  this feature, you can do so in the Advanced settings section under Enable document
  data editing.
- While Polylang by itself allows for PDF translations, managing multilingual content
  efficiently is difficult without the Polylang WooCommerce addon.
- GTranslate will not work for local sites. A domain is required upon registration.
- Changing the target language may take up to five minutes to take effect.
- In the free version of WeGlot, only one target language can be used.
- A new order must be placed after the WeGlot API key is entered into the WordPress
  website.
- The free version of WeGlot only allows for the translation of 2000 words.
- If there was some sort of site migration, then the font folder could have been left
  non-copied.
- If there was some sort of site scanning plugin, it is very possible it emptied temporary
  folders, which in turn would delete our plugin’s font files.
- Requires setup of Dropbox App for API access
- This code is only usable once
- Receipt document has its own number sequence.
- Receipt Number can be overridden under the 'Next receipt number' setting.
- The UBL document requires the PDF Invoice of the order to have already been generated.
- All multilingual document settings are saved in the WooCommerce order meta.
- Setting to enable HTML output for PDF documents.
- Documents can be accessed by logged-in users only.
- Documents can be accessed by everyone with the link.
- Adding a watermark text is simple and straightforward.
- A code snippet is required for the free version.
- Custom styles can be added through the Customizer.
- Administrative changes should be documented separately.
- Shortcodes can be used on any editable page in WordPress, but the 'Thank You' page
  is not editable by default.
- Replace 'custom-template' with your custom template name or default names like 'invoice',
  'packing-slip', etc.
- Replace 'gift_message' with your own custom field name
- Technically, you could edit the order and add the taxes manually and then the PDF
  invoice plugin will also show the taxes.
- Some objects may return nulls in deeply nested fields
- Ensure an invoice number is generated before sending the email.
- This is recommended for experienced users only, if you want full control over the
  address format per country.
- PDF creation is a memory intensive job, especially if it includes several pages
  with images.
- We recommend setting the WP Memory Limit to 128mb or more.
- Settings for the Order Notification email are located under WooCommerce email settings.
- You can change filenames simply via the plugin settings.
- To change the filename of the PDF attachments / downloads in the free version of
  the plugin, you can use the `wpo_wcpdf_filename` filter.
- Has to be in the order items table
- If using the Professional extension and the Document title setting is used in combination
  with code snippets (custom code), the priority of the code snippet must be increased
  to a higher number, like 99.
- Many countries require invoice numbers to be sequential (gaps are not allowed).
- Invoice numbers are assigned at the moment a PDF invoice is created, either manually
  or automatically.
- Some objects like Contact may return nulls in deeply nested fields
- Translations can be stored in the WordPress Language folder (`wp-content/languages`
  unless overridden with the `WP_LANG_DIR` constant).
- Ensure proper configuration of plurals for translation files.
- Error caused by HTML source of template
- Check the HTML source of the document to find issues
- Requires WooCommerce 2.2.7 or later for refunds.
- You can attach the credit note to the WooCommerce Refund email.
- Repeating headers & footers does not work if you also want to print the invoices
  in bulk.
- JPG is almost always preferable over PNG, because it is much lighter to process
  for the server.
- Only TTF fonts are supported.
- If you use numeric font weights, make sure to include the font files corresponding
  to those font weights in your CSS declaration (one file per @font-face declaration,
  setting the numeric value for the font-weight property).
- Avoid spaces or special characters in the font filenames.
- This particular example shows the custom field after the order data on the packing
  slip.
- The template engine includes several action hooks where you can output custom content.
- Delivery date may be saved as a UNIX timestamp which needs conversion.
- Copy template files to child theme to prevent plugin updates from overwriting changes.
- Ensure to select the new template in the plugin settings.
- Caching plugins and plugins that use caching for certain features cause the menu
  cart to fail to update.
- Ensure to clear your cache after making changes.
- Accepts CSS styles in the shortcode.
- Supports flyout display options.
- Enable to use a barcode scanner to pick the order items.
- Choose if you want to allow partial order picking. If disabled, the order must be
  fully picked.
- Enable this if you don’t have a scanner but still want to input the picking quantities
  manually.
- The EPC QR Code provides an easy way to initiate a SEPA credit transfer by scanning
  it.
- Integration with WooCommerce PDF Invoices & Packing Slips plugin required for ZATCA
  implementation
- Enable the order barcodes creation in the WooCommerce menu under 'Barcodes'.
- Multiple options for barcode generation are available.
- Integrates with WooCommerce PDF Invoices & Packing Slips plugin.
- Provides a simple solution to display the product barcodes in the order details.
- Customers are able to scan for additional information, to go directly to the product
  page or even add it to the cart.
- To create an order with the status Proposal Requested, navigate to WooCommerce →
  Orders and change its status to Proposal.
- This API allows manipulation of order proposals.
- Order status can be changed programmatically based on actions.
- The PDF functionality in this plugin requires the WooCommerce PDF Invoices & Packing
  Slips plugin.
- Debugging registers errors and detailed information in a log file at WooCommerce
  > Status > Logs.
- You can only upload 500 serial numbers in one CSV file.
- The terms ‘WooCommerce Store API’ and ‘WooCommerce REST API‘ will be used in a synonymous
  manner.
- 'This documentation can also be found in the plugin settings at: Products > Batch
  Numbers > REST.'
- Setting up email notifications can be configured for batch numbers.
- Uses REST API for retrieving invoices and packing slips.
- Uses the default WooCommerce date format by calling the function wc_date_format()
- Set the default date format under the plugin options or using the filter wpo_wcpbn_date_format
- Enable the option Include in formatted item meta to display batch number and expiration
  date in PDF.
- Job runs every day at midnight automatically, by searching into the database looking
  for rows that are already expired.
- 'show_days_before_expiry accepts a number. Ex: 60'
- 'hide_days_before_expiry accepts a number. Ex: 30'
- The address auto-complete field should not appear when the selected country is the
  Netherlands.
- The address auto-complete setting is not yet compatible with the Woo checkout blocks.
- The plugin cannot begin to function without an API source.
- Free for up to 50.000 calls per day for Het Kadaster/BAG.
- Compatibility with the Woo Checkout Blocks is still in a beta/preview stage.
- The Checkout Field Editor only supports fields that span half or full width of the
  form.
- Uses WooCommerce for printing address labels
- This is recommended for experienced users only, if you want full control over the
  address format per country, woocommerce wide.
- You can add custom CSS within the settings of WooCommerce Print Address Labels.
- Custom templates allow for maximum freedom of where the custom field should be printed.
- Product emulation allows turning invalid order objects into actual order item products.
- When dealing with plugins, all plugins should be disabled one-by-one, until the
  issue visually disappears.
- Introducing a new placeholder to display all product descriptions.
- Payment reminders can be sent 5 days after the order has been placed.
- The default status after an order is placed with the BACS payment method is 'On
  hold'.
- WordPress’s scheduled task system runs on a best effort basis.
- Customisations of job options are outside of the scope of standard support.
- Plugin sends a print job to PrintNode until your printer is actually connected to
  PrintNode.
- In WordPress/WooCommerce developer terms, this means 'when the woocommerce_checkout_order_processed
  action is called, rather than the woocommerce_payment_complete action'
- Uses built in 'simple' template for PDFs.
- Standard Windows core fonts and Deja Vu are available.
- You can choose as many printers as you like, using the settings in your WordPress
  dashboard in WooCommerce -> PrintNode -> Settings.
- Uses REST API for integration.
- Manual orders are not automatically printed. Users must press the button on the
  order page in the back-end to print them.
- A competent PHP developer will easily be able to adapt the code to fulfill other
  requirements (e.g. sort differently, or omit unwanted items).
- Follow all instructions for the ordinary setup of this plugin.
- If you had any customisations applied via PHP code using WordPress action/filter
  hooks, then you will need to change the references of all these.
- API requests are subject to rate limits.
- PrintNode have a free service-level offering.
- You need to connect your website to PrintNode by entering your PrintNode API key.
- This plugin is quite large (over 7Mb), because it contains a lot of code for creating
  PDF files.
- Uses ImgBB for image uploads
- 'The following headers will be exported: number, name, email, billing address (all
  address fields combined), shipping address (all address fields combined), phone.'
- Custom fields will be exported with a prefix of '_' added in front of their value.
- Customers created & managed by our plugin only appear in Customers > Customers.
- A sample file can be downloaded at Customers > Tools > Download sample.
errors:
- Check the WooCommerce logs to see if there are errors with the `wpo-wcpdf` or `fatal-errors`.
- 'Failed to load the PDF document: This could mean that something is interfering
  with the permalinks and breaking the pretty PDF links.'
- '401 Unauthorized: Invalid access token'
- '403 Forbidden: Insufficient permissions'
- '429 Too Many Requests: Rate limit exceeded'
- Invoice numbers cannot be changed from invoices that have already been issued.
- 'Fatal error: Call to undefined method DOMText::getAttribute()'
- '400 Bad Request: Ensure all required fields are filled out.'
- '401 Unauthorized: Check API credentials.'
- 'woocommerce_rest_authentication_error: Invalid signature - provided signature does
  not match.'
- Error during status transition. JSON partial matching not supported in your environment.
  Please check your MySQL/MariaDB version.
- '401 Unauthorized: Invalid API key.'
- '404 Not Found: Resource does not exist.'
- '500 Internal Server Error: An unexpected error occurred.'
auth_info:
  mentioned_objects:
  - OAuth2
  - Consumer key
  - Consumer secret
client:
  base_url: https://docs.wpovernight.com
  headers:
    Accept: application/json
source_metadata: null
