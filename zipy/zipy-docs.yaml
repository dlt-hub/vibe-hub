resources:
- name: session_data
  endpoint:
    path: /sessions
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Screen Transition Capture
  endpoint:
    path: /zipy-for-mobile/react-native-setup/screen-transition-capture
    method: GET
    data_selector: records
    params: {}
- name: gesture_capture
  endpoint:
    path: /zipy-for-mobile/gesture-capturing
    method: GET
    data_selector: gestureData
- name: custom_logging
  endpoint:
    path: /zipy-for-mobile/react-native-setup/custom-logging
    method: GET
    data_selector: logging
    params: {}
- name: profiling
  endpoint:
    path: /profiling
    method: GET
- name: device_information
  endpoint:
    path: /zipy-for-mobile/device-information-capture
    method: GET
    data_selector: device_info
- name: identify_users
  endpoint:
    path: /identify_users
    method: POST
    data_selector: userInfo
- name: anonymize_users
  endpoint:
    path: /anonymize_users
    method: POST
    data_selector: 'null'
- name: zipy_flutter
  endpoint:
    path: /zipy_flutter
    method: POST
    data_selector: dependencies
    params: {}
- name: profiling
  endpoint:
    path: /profiling
    method: GET
    data_selector: data
    params: {}
- name: device_information
  endpoint:
    path: /device-information
    method: GET
    data_selector: device_records
- name: session_url_retrieval
  endpoint:
    path: /zipy-for-mobile/react-native-setup/session-url-retrieval
    method: GET
    data_selector: session_url
- name: identify_users
  endpoint:
    path: /configure/identifying-users
    method: GET
- name: session_control
  endpoint:
    path: /zipy-for-mobile/flutter-setup/session-recording-control
    method: GET
- name: data_sanitization
  endpoint:
    path: /data/sanitization
    method: POST
    data_selector: sanitized_data
    params: {}
- name: identify_user
  endpoint:
    path: /identify_user
    method: POST
    data_selector: userInfo
    params: {}
- name: anonymize_user
  endpoint:
    path: /anonymize_user
    method: POST
    data_selector: session
    params: {}
- name: screen_tracking
  endpoint:
    path: /screen_tracking
    method: POST
    data_selector: data
    params: {}
- name: custom_logging
  endpoint:
    path: /ios-setup/custom-logging
    method: GET
- name: log_message
  endpoint:
    path: /log/message
    method: POST
    data_selector: logs
    params: {}
- name: log_error
  endpoint:
    path: /log/error
    method: POST
    data_selector: errors
    params: {}
- name: log_exception
  endpoint:
    path: /log/exception
    method: POST
    data_selector: exceptions
    params: {}
- name: session_url
  endpoint:
    path: /getCurrentSessionUrl
    method: GET
    data_selector: sessionURL
- name: zipy_android
  endpoint:
    path: /android-setup/install-in-an-android-app
    method: POST
    data_selector: dependencies
    params: {}
- name: log_message
  endpoint:
    path: /log/message
    method: POST
    data_selector: logs
    params: {}
- name: log_error
  endpoint:
    path: /log/error
    method: POST
    data_selector: logs
    params: {}
- name: log_exception
  endpoint:
    path: /log/exception
    method: POST
    data_selector: logs
    params: {}
- name: session_url
  endpoint:
    path: /android-setup/session-url-retrieval
    method: GET
    data_selector: sessionUrl
- name: recording_control
  endpoint:
    path: /zipy/record
    method: POST
    data_selector: recording
    params: {}
- name: release_version
  endpoint:
    path: /configure/release-version
    method: GET
- name: user_identifiers
  endpoint:
    path: /configure/adding-custom-identifiers
    method: POST
    data_selector: userInfo
    params: {}
- name: anonymize_users
  endpoint:
    path: /anonymize
    method: POST
    data_selector: session
    params: {}
- name: session_url
  endpoint:
    path: /getCurrentSessionURL
    method: GET
    data_selector: url
- name: source_maps
  endpoint:
    path: /upload/sourcemaps
    method: POST
- name: zipy-block
  endpoint:
    path: /blocking-pii-data
    method: GET
    data_selector: sensitive_data
    params: {}
- name: session_stitching
  endpoint:
    path: /configure/session-stitching-rootdomain
    method: GET
    data_selector: rootDomain
- name: custom_events
  endpoint:
    path: /product-features/custom-events
    method: POST
    data_selector: event_data
    params: {}
- name: session_replay
  endpoint:
    path: /api/session-replay
    method: GET
    data_selector: data
    params: {}
- name: stack_trace
  endpoint:
    path: /api/v1/stack_trace
    method: GET
    data_selector: data
    params: {}
- name: custom_logs
  endpoint:
    path: /api/custom-logs
    method: POST
- name: custom_logs
  endpoint:
    path: /custom-logs
    method: POST
    data_selector: logs
    params: {}
- name: live_users
  endpoint:
    path: /live_users
    method: GET
    data_selector: users
- name: alerts
  endpoint:
    path: /product-features/alerts
    method: GET
    data_selector: alerts
- name: slack_alerts
  endpoint:
    path: /api/v1/slack_alerts
    method: POST
    data_selector: alerts
    params: {}
- name: email_alerts
  endpoint:
    path: /api/email_alerts
    method: GET
    data_selector: alerts
- name: live_alerts
  endpoint:
    path: /alerts/live
    method: POST
    data_selector: alert
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: heatmap_data
  endpoint:
    path: /api/heatmaps
    method: GET
    data_selector: data
    params: {}
- name: page_performance
  endpoint:
    path: /page-performance
    method: GET
    data_selector: performance_data
- name: session
  endpoint:
    path: /api/v1/sessions
    method: GET
    data_selector: sessions
    params:
      incremental: updated_at
- name: slack_alerts
  endpoint:
    path: /alerts/slack
    method: POST
    data_selector: data
    params: {}
- name: identify_users
  endpoint:
    path: /identify/users
    method: GET
    data_selector: records
- name: session_url
  endpoint:
    path: /integration/factors
    method: POST
    data_selector: User Properties
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
    params: {}
- name: Zipy Session URL
  endpoint:
    path: /getCurrentSessionURL
    method: GET
    data_selector: sessionURL
- name: Log Zipy Event
  endpoint:
    path: /logEvent
    method: POST
    data_selector: eventPayload
- name: zipy_session_url
  endpoint:
    path: /logs
    method: GET
    data_selector: zipySessionUrl
    params: {}
- name: session
  endpoint:
    path: /api/v1/sessions
    method: POST
    data_selector: sessionData
- name: session_url_metadata
  endpoint:
    path: /session/url
    method: POST
    data_selector: meta
- name: zipy_session_url
  endpoint:
    path: /api/v1/zipy_session_url
    method: POST
    data_selector: response
    params: {}
- name: zipy_event
  endpoint:
    path: /gtag/event
    method: POST
    data_selector: event
    params: {}
- name: HelpScout Support Requests
  endpoint:
    path: /api/v1/support_requests
    method: POST
    data_selector: request
    params: {}
- name: contact
  endpoint:
    path: /contacts/v1/contact
    method: POST
    data_selector: results
    params: {}
- name: zipy_session_url
  endpoint:
    path: /update
    method: POST
    data_selector: results
- name: BrowserInteraction
  endpoint:
    path: /query
    method: GET
    data_selector: results
- name: session_replay
  endpoint:
    path: /api/session_replay
    method: GET
    data_selector: data.records
- name: user_data
  endpoint:
    path: /api/user_data
    method: GET
    data_selector: data.records
- name: Shopify
  endpoint:
    path: /integration/shopify
    method: GET
- name: SumoLogger
  endpoint:
    path: /sumo-logger
    method: POST
    data_selector: logs
- name: zipy_session_url
  endpoint:
    path: /zipy/getCurrentSessionURL
    method: GET
    data_selector: zipySessionUrl
- name: Zipy Session URL
  endpoint:
    path: /admin/conversation/fields
    method: POST
    data_selector: responses
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- If you are using lazy loading for external scripts on your website, please ensure
  that the Zipy script is downloaded before calling the zipy.init() function.
- Requires setup of connected app in Zipy
- All recorded data is transferred over https ( Data security in transit)
- All recorded data is stored in encrypted format in separate customer partitions
  ( Data security in store)
- Data privacy and security is of utmost importance to us.
- By default, our tool will disable the capture of all sensitive and Personal Identifiable
  Information of the users.
- Some objects like Contact may return nulls in deeply nested fields
- To view session replays, it is necessary to implement Gesture Capturing.
- Input masking is enabled by default.
- To view session replay, it is necessary to implement Gesture Capturing.
- Add storage and internet permissions to your AndroidManifest.xml for Zipy’s session
  replay and initialization.
- Gesture Capture requires wrapping the application with the withGestureCapture wrapper.
- Automatic Logging captures exceptions not handled by the app.
- For custom logging, if maxLength is not provided, it will default to capturing the
  full length.
- Monitor and log Fetch and XHR network calls seamlessly with Zipy for enhanced debugging
  and performance optimization.
- Automatically log all network requests, capturing details such as URLs, request
  methods, headers, bodies (if applicable), and response information.
- To identify users, call zipy.identify(uuid, {userInfo})
- To anonymize users, call zipy.anonymize()
- Zipy adds much more information to crashes and ANRs or freezes in your application
  with a seamless integration.
- 'Important: To view session replays, it is necessary to implement Gesture Capturing.'
- Gesture Capture is a feature provided by Zipy that allows you to capture gestures
  within your Flutter application.
- 'Automatic Logging: Captures exceptions not handled by the app.'
- Logging Messages and Capturing Handled Exceptions enhances app reliability by recording
  key events and errors during app execution.
- Monitor and log Dio calls seamlessly with Zipy for enhanced debugging and performance
  optimization.
- Device information is automatically collected upon Zipy initialization.
- Previously identified users of your application can be anonymized by calling the
  zipy.anonymize() method. This will automatically split the session and associate
  the new session with a new anonymous user.
- Zipy adds much more information to crashes captured by Firebase.
- Sanitizes both payloads and responses
- Sanitizes up to 3 levels deep in nested objects
- Swift Protobuf will be automatically installed as a dependency when you add the
  ZipyiOS package.
- We recommend calling `Zipy.anonymize()` when the user logs out.
- Requires setup of connected app in api
- Use Zipy.pause() to temporarily stop capturing events while keeping the session
  active.
- Use Zipy.resume() to continue capturing events after a pause.
- Use Zipy.stop() to end the current session and stop all event recording.
- Use Zipy.init("YOUR_API_KEY") to start a new session.
- Masks sensitive information to prevent unauthorized viewing
- Automatically protects input fields like passwords and personal data
- Maintains compliance with data security standards
- Ensures user privacy in session recordings
- Initialize Zipy as early as possible (typically inside Application class).
- Call Zipy.identify(uuid, {userInfo}) to identify users.
- Call Zipy.anonymize() to clear user-identifying information.
- Monitor and log Network calls seamlessly with Zipy for enhanced debugging and performance
  optimization.
- Zipy plug and play supports AI Resolve feature powered by OpenAI, that suggests
  fixes for all the frontend and javascript errors in your web application.
- Zipy plug and play extension throws up the below message whenever the extension
  is reloaded or the page in which you are triggering a record is downloaded before
  the extension is installed. Reloading the page again will ensure that you can record
  the session
- Zipy plug and play extension shall stop the session recording if you navigate from
  one domain into a different domain on the same tab. Refresh page and restart the
  recording
- Zipy plug and play extension shall record the sessions for a maximum of 5 mins.
- Zipy plug and play shall not record the videos present inside any website
- The stop functionality does not persist across page refreshes.
- Users can be identified using zipy.identify(uuid, {userInfo}) method.
- To anonymize a user, use zipy.anonymize() method when users sign out.
- Allows a maximum of 10 custom identifiers per project.
- Previously identified users can be anonymized by calling zipy.anonymize() method.
- If you don’t pass any option, withCurrentTimestamp defaults to false (regular session
  URL).
- You can upload only up to 100 and a maximum of 100 MB files at once.
- Zipy allows you to block your sensitive data using the zipy-block class.
- By default, we do not capture errors and events from 3rd party APIs to reduce noise.
- Event names and Property names are strings that should be under 250 characters
- Maximum of 5 properties can be set per event.
- Session replay is a powerful way to view all your user journeys through session
  replay.
- By default, the sessions are sorted by latest session first.
- Time filters allow you to view session replay or errors by any custom dates.
- This feature allows you to quickly search a session or error based on multiple different
  parameters.
- 'Use Specific Selectors: Narrow down your focus by providing unique identifiers
  or detailed selector patterns to avoid noise in your data.'
- 'Combine Filters: Pair Clicked Element or CSS Selector filters with other session
  filters like user details, location, or device for deeper insights.'
- Requires proper authentication setup for API access.
- Network request payload and response capture can be enabled or disabled for Enterprise
  Plan users. By default the network payload and response is not captured.
- Uses zipy.logError method to log custom application errors.
- Alerts that turn raw stream into actionable pings so the right person can jump in
  on the issue.
- Get proactive alerting on your email. These can be easily enabled or disabled in
  the Alert Settings.
- Alerts are triggered only for the upcoming data from the point of activation.
- You will be able to update any conditions set live anytime, and the new changes
  will be reflected for the upcoming sessions.
- Zipy AI Resolve is a paid feature and you can only try it 3 times in the free/trial
  plan.
- Your code snippet of the stack trace will be shared with OpenAI and would only be
  done if you accept to share the code snippet.
- Please note the labels may be visible after 30 minutes after adding labels, as they
  are not applied immediately to incoming live sessions.
- Iframe recording in such a case is not Supported
- Uses OAuth2 with refresh token — requires setup of connected app in Zipy
- Requires authentication via OAuth2
- Ensure to handle rage clicks and dead clicks for user experience insights
- Zipy captures all important web vitals related to the performance of a page from
  your application.
- Some features may require additional configuration.
- By default Zipy will not record a session without any user activity.
- If you are behind a firewall OR using VPN where access to all the third party domains
  are restricted, you will need to whitelist zipy.ai.
- A session replay is a series of user interactions on your web app, beginning with
  the first page they visit and ending with a period of inactivity lasting longer
  than 30 minutes.
- Zipy doesn’t provide support to track mobile apps. It can only be installed on web
  based applications.
- Capture of network request payload and response is disabled by default while network
  request and response headers are captured by default.
- High DNS resolution times can contribute to overall latency of API connections.
- Implement caching mechanisms in your webapp to store resolved IP addresses locally.
- High SSL connection times indicate that the time taken to complete the SSL handshake
  and establish a secure connection is longer than expected.
- 'Increased latency: Lengthy SSL connection times directly contribute to the overall
  latency of your API connections.'
- 'Performance impact: If your webapp relies on multiple API connections, each with
  its own SSL handshake process, the cumulative delay can significantly impact the
  overall performance and responsiveness of your application.'
- 'User experience: Slow SSL connection times can lead to user frustration, as they
  perceive the webapp as slow or unresponsive.'
- High API connection setup time refers to a prolonged duration required for any of
  the aforementioned steps.
- 'Increased latency: Lengthy connection setup times contribute to higher latency,
  leading to delays in sending requests and receiving responses from the API server.'
- 'Reduced throughput: Slow connection setups can limit the number of API calls your
  webapp can make within a given time frame.'
- 'Performance impact: If your webapp relies on multiple API calls, each with its
  own connection setup time delay, it can cumulatively impact the performance and
  efficiency of your application.'
- 'User experience: Slow API connection setups may result in user frustration due
  to longer waiting times and slower interactions with your webapp.'
- Large API response sizes can consume significant bandwidth and slow down response
  times.
- Implement pagination or partial responses to reduce data load.
- High API latency can lead to delays in rendering or updating data in your webapp.
- It's crucial to monitor and optimize the API latency for critical API dependencies.
- 'Not compressing large API responses can have several implications for you as a
  webapp developer: Increased Network Bandwidth Usage, Slower Response Times, Higher
  Network Latency, Mobile Data Usage.'
- To mitigate the impact of not compressing medium and large API responses, consider
  enabling compression, supporting compression on the client, setting appropriate
  Content-Encoding headers, and testing and optimizing performance.
- Ensure that your API calls are made over HTTPS, which provides encryption and authentication.
- Make sure that the SSL/TLS configuration on your server is up to date and follows
  best practices.
- Zipy npm module is used in the client’s browser and it uses browser features to
  capture the Frontend errors and the DOM.
- The above error occurs as NextJS renders code using Server-Side Rendering(SSR) to
  compile the code that runs on the browser.
- Verify that the server at your end has listed the headers with the Access-Control-Expose-Headers
  header.
- By default Zipy does not capture your user data or identifies it.
- You may be behind a VPN and hence all Zipy sessions are being dropped
- Your current Zipy billing plan may have expired and you may have run out of your
  quota of session replays
- To enable extended data collection for cross-origin resources, include the 'Timing-Allow-Origin'
  HTTP response header.
- Uses OAuth2 with refresh token.
- Ensure proper permissions are set in Slack for the integration
- Email and Slack Alerts for daily New Error Digest in Zipy
- We respect data privacy rights and are committed to protecting personal information
  collected on this Platform.
- 'Effective from Date: 1st December 2024'
- Refunds are processed within 10 business days of approval.
- Make sure your new token has either 'full access' or 'read and write access' to
  work items.
- The session url will then be visible as part of User Properties in the Session details
  page.
- Requires a valid Zipy account and API key
- Put below code in the <head> tag of your site to include Zipy session url in the
  metadata.
- Ensure to pass session token generated to the init method.
- You should have a DevRev user identification setup on your site.
- The cf_zipy_session_url is the internal name given by Freshchat for the custom field.
- Simplify error tracking in Honeybadger with Zipy session URLs for better context
  and effortless debugging.
- To store Zipy session link for a user we need to first identify it then update its
  Zipy session link property.
- A record for user will be created in hubspot only after the email is supplied by
  user in chat or set up by us in code.
- Make sure you have Zipy and New Relic installed on your site.
- For better user behavior analysis use Zipy session recordings in Segment
- Requires setup of zipy connected app for OAuth
- Ensure to manage user data following privacy policies
- Use Zipy session URLs with Sumo Logic logs for efficient troubleshooting.
- If you are using Web Widget (Classic), it does not allow you to update conversation
  field.
errors:
- '400 Bad Request: Check for missing or incorrect parameters'
- '401 Unauthorized: Ensure valid credentials are provided'
- '404 Not Found: Verify the requested resource exists'
- '405 Method Not Allowed: Confirm the HTTP method used is correct'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Error posting data: $e'
- '401 Unauthorized: Check credentials and token validity.'
- '401 Unauthorized: Check your authentication credentials'
- '404 Not Found: Verify the endpoint path'
- '500 Internal Server Error: Try again later or contact support'
- ERR_NAME_NOT_RESOLVED
- ERR_CONNECTION_TIMEDOUT
- ERR_CONNECTION_RESET
- 403-FORBIDDEN
- 502 BadGateway
- blocked:csp
- net::ERR_BLOCKED_BY_CSP
- '4xx: Check request parameters and authentication'
- '5xx: Internal server error, retry later'
- '500 Internal Server Error: Indicates a server-side issue.'
- '502 Bad Gateway: The server received an invalid response from the upstream server.'
- '503 Service Unavailable: The server is currently unable to handle the request due
  to temporary overload or maintenance.'
- '504 Gateway Timeout: The server did not receive a timely response from the upstream
  server.'
- 'ReferenceError: window is not defined'
- '400 Bad Request: Check the request format and required fields'
- '401 Unauthorized: Validate the authentication credentials'
- '403 Forbidden: Ensure the app has permissions for the requested action'
- '401 Unauthorized: Invalid API key or token'
- '401 Unauthorized: Check your credentials'
- '429 Too Many Requests: Rate limit exceeded, try again later'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.zipy.ai
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://api.zipy.ai/oauth/token
    client_id: '{{ dlt.secrets[''zipy_client_id''] }}'
    client_secret: '{{ dlt.secrets[''zipy_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''zipy_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
