resources:
- name: total_supply
  endpoint:
    path: /pokt/api/v1/supply/total
    method: GET
    data_selector: total_supply
    params: {}
- name: circulating_supply
  endpoint:
    path: /pokt/api/v1/supply/circulating
    method: GET
    data_selector: circulating_supply
    params: {}
- name: grove
  endpoint:
    path: /grove
    method: GET
- name: nodies
  endpoint:
    path: /nodies
    method: GET
- name: gateways
  endpoint:
    path: /api/v1/gateways
    method: GET
    data_selector: data
    params: {}
- name: arbitrum
  endpoint:
    path: /
    method: GET
- name: avalanche_core
  endpoint:
    path: /
    method: GET
- name: avalanche_c_chain
  endpoint:
    path: /ext/bc/C/
    method: GET
- name: bnb_smart_chain
  endpoint:
    path: /
    method: GET
- name: ethereum
  endpoint:
    path: /
    method: GET
- name: evmos
  endpoint:
    path: /
    method: GET
- name: fantom
  endpoint:
    path: /
    method: GET
- name: fuse
  endpoint:
    path: /
    method: GET
- name: gnosis_chain
  endpoint:
    path: /
    method: GET
- name: kava_mainnet
  endpoint:
    path: /
    method: GET
- name: klaytn
  endpoint:
    path: /
    method: GET
- name: metis
  endpoint:
    path: /
    method: GET
- name: optimism
  endpoint:
    path: /
    method: GET
- name: polygon
  endpoint:
    path: /
    method: GET
- name: polygon_mumbai
  endpoint:
    path: /
    method: GET
- name: harmony
  endpoint:
    path: /
    method: GET
- name: Arbitrum
  endpoint:
    path: /
    method: GET
- name: Avalanche Core
  endpoint:
    path: /
    method: GET
- name: Avalanche C-chain
  endpoint:
    path: /ext/bc/C/
    method: GET
- name: BNB Smart Chain
  endpoint:
    path: /
    method: GET
- name: Ethereum
  endpoint:
    path: /
    method: GET
- name: Evmos
  endpoint:
    path: /
    method: GET
- name: Fantom
  endpoint:
    path: /
    method: GET
- name: FUSE
  endpoint:
    path: /
    method: GET
- name: Gnosis Chain
  endpoint:
    path: /
    method: GET
- name: Kava Mainnet
  endpoint:
    path: /
    method: GET
- name: Klaytn
  endpoint:
    path: /
    method: GET
- name: Metis
  endpoint:
    path: /
    method: GET
- name: Optimism
  endpoint:
    path: /
    method: GET
- name: Polygon
  endpoint:
    path: /
    method: GET
- name: Polygon Mumbai
  endpoint:
    path: /
    method: GET
- name: Harmony
  endpoint:
    path: /
    method: GET
- name: linode_instance
  endpoint:
    path: /create/linode
    method: POST
    data_selector: results
    params:
      image: Ubuntu 20.04 LTS
      region: Atlanta, GA
      plan: Dedicated 16 GB - 8 CPU, 320 GB Storage, 16 GB RAM
      label: pokt001
- name: storage_volume
  endpoint:
    path: /create/volume
    method: POST
    data_selector: results
    params:
      label: poktuserdir
      size: 1500GB
      region: Atlanta, GA
      linode: pokt001
- name: linode_instance
  endpoint:
    path: /api/linode/instances
    method: POST
    data_selector: data
    params:
      image: Ubuntu 20.04 LTS
      region: Atlanta, GA
      plan: Dedicated 16 GB - 8 CPU, 320 GB Storage, 16 GB RAM
      label: pokt001
- name: storage_volume
  endpoint:
    path: /api/volumes
    method: POST
    data_selector: data
    params:
      label: poktuserdir
      size: 1500GB
      region: Atlanta, GA
      linode: pokt001
- name: snapshot
  endpoint:
    path: /files/latest.txt
    method: GET
    data_selector: snapshot_data
    params: {}
- name: account
  endpoint:
    path: /accounts
    method: POST
    data_selector: account_data
    params: {}
- name: chains
  endpoint:
    path: /chains
    method: GET
    data_selector: chains
- name: snapshot
  endpoint:
    path: /snapshot
    method: GET
    data_selector: snapshot
- name: pocket_service
  endpoint:
    path: /home/pocket/go/bin/pocket
    method: start
    data_selector: service
    params: {}
- name: app_stake
  endpoint:
    path: /relay/0007
    method: POST
    data_selector: result
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: N/A
    params: {}
- name: poktapp
  endpoint:
    path: /poktapp
    method: POST
    data_selector: N/A
    params:
      private_key: private_key
- name: poktapp_delete
  endpoint:
    path: /poktapp
    method: DELETE
    data_selector: N/A
    params:
      app_id: app_id
- name: poktapp_list
  endpoint:
    path: /poktapp
    method: GET
    data_selector: N/A
    params: {}
- name: dispatch
  endpoint:
    path: /v1/client/dispatch
    method: POST
    data_selector: ''
    params: {}
- name: relay
  endpoint:
    path: /relay/{chain_id}
    method: ANY
    data_selector: N/A
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: N/A
    params: {}
- name: poktapp
  endpoint:
    path: /poktapp
    method: POST
    data_selector: N/A
    params:
      private_key: private_key
- name: poktapp_delete
  endpoint:
    path: /poktapp
    method: DELETE
    data_selector: N/A
    params:
      app_id: app_id
- name: poktapp_list
  endpoint:
    path: /poktapp
    method: GET
    data_selector: N/A
    params: {}
- name: relay
  endpoint:
    path: /relay
    method: POST
    data_selector: ''
    params: {}
- name: dispatch
  endpoint:
    path: /v1/client/dispatch
    method: POST
    data_selector: ''
    params: {}
- name: relay
  endpoint:
    path: /relay
    method: POST
    data_selector: payload
    params: {}
- name: api_endpoints
  endpoint:
    path: /v1/endpoints
    method: GET
    data_selector: data
    params: {}
- name: bounties
  endpoint:
    path: /api/v1/bounties
    method: GET
    data_selector: data
    params: {}
- name: quick_grants
  endpoint:
    path: /api/v1/quick_grants
    method: GET
    data_selector: data
    params: {}
- name: grant_request
  endpoint:
    path: /request/grant
    method: POST
    data_selector: grantDetails
    params: {}
- name: governance_dashboard
  endpoint:
    path: /governance/dashboard
    method: GET
    data_selector: data
    params: {}
- name: maintainers
  endpoint:
    path: /maintainers
    method: GET
    data_selector: maintainers
    params: {}
- name: gateway
  endpoint:
    path: /api/v1/gateway
    method: GET
    data_selector: data
    params: {}
- name: node
  endpoint:
    path: /v1/nodes
    method: GET
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: relay
  endpoint:
    path: /v1/relay
    method: POST
    data_selector: data
    params: {}
- name: Farmer Tasks
  endpoint:
    path: /farmer/tasks
    method: GET
    data_selector: tasks
- name: Shepherd Tasks
  endpoint:
    path: /shepherd/tasks
    method: GET
    data_selector: tasks
- name: Regen Tasks
  endpoint:
    path: /regen/tasks
    method: GET
    data_selector: tasks
- name: Voting
  endpoint:
    path: /community/retro-pokt-goods-funding/voters-and-voting
    method: GET
- name: Eligibility Criteria
  endpoint:
    path: /community/retro-pokt-goods-funding/eligibility-criteria
    method: GET
- name: Rules of Conduct
  endpoint:
    path: /community/retro-pokt-goods-funding/rules-of-conduct
    method: GET
- name: categories
  endpoint:
    path: /community/retro-pokt-goods-funding/categories
    method: GET
    data_selector: categories
- name: rewards
  endpoint:
    path: /community/retro-pokt-goods-funding/rewards
    method: GET
    data_selector: rewards
- name: categories
  endpoint:
    path: /community/retro-pokt-goods-funding/categories
    method: GET
    data_selector: categories
    params: {}
- name: rewards
  endpoint:
    path: /community/retro-pokt-goods-funding/rewards
    method: GET
    data_selector: rewards
    params: {}
- name: event
  endpoint:
    path: /api/events
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: event_funding
  endpoint:
    path: /forum/pokt.network/c/build/events/123
    method: GET
    data_selector: proposal
    params: {}
- name: account
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/account
    method: POST
    data_selector: Responseobject · BaseAccountVal
    params: {}
- name: accounts
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/accounts
    method: POST
    data_selector: Responseobject · QueryAccountsResponse
    params:
      per_page: 100
- name: balance
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/balance
    method: POST
    data_selector: Responseobject · QueryBalanceResponse
    params: {}
- name: account_txs
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/accounttxs
    method: POST
    data_selector: Responseobject · QueryAccountTXsResponse
    params:
      per_page: 100
- name: block
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/block
    method: POST
    data_selector: Responseobject · QueryBlockResponse
    params: {}
- name: event
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: events
    params: {}
- name: blocktxs
  endpoint:
    path: /v1/query/blocktxs
    method: POST
    data_selector: txs
    params: {}
- name: height
  endpoint:
    path: /v1/query/height
    method: POST
    data_selector: height
    params: {}
- name: state
  endpoint:
    path: /v1/query/state
    method: POST
    data_selector: app_state
    params: {}
- name: supply
  endpoint:
    path: /v1/query/supply
    method: POST
    data_selector: total
    params: {}
- name: supported_chains
  endpoint:
    path: /v1/query/supportedchains
    method: POST
    data_selector: supported_chains
    params: {}
- name: upgrade
  endpoint:
    path: /v1/query/upgrade
    method: POST
    data_selector: Height
    params: {}
- name: param
  endpoint:
    path: /v1/query/param
    method: POST
    data_selector: param_value
    params: {}
- name: allParams
  endpoint:
    path: /v1/query/allParams
    method: POST
    data_selector: app_params
    params: {}
- name: single_app
  endpoint:
    path: /v1/query/app
    method: POST
    data_selector: address
    params: {}
- name: apps
  endpoint:
    path: /v1/query/apps
    method: POST
    data_selector: result
    params: {}
- name: node
  endpoint:
    path: /v1/query/node
    method: POST
    data_selector: address
    params: {}
- name: nodes
  endpoint:
    path: /v1/query/nodes
    method: POST
    data_selector: result
    params: {}
- name: signing_info
  endpoint:
    path: /v1/query/signinginfo
    method: POST
    data_selector: result
    params: {}
- name: account
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/account
    method: POST
    data_selector: Responseobject · BaseAccountVal
    params: {}
- name: accounts
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/accounts
    method: POST
    data_selector: Responseobject · QueryAccountsResponse
    params:
      per_page: 100
- name: balance
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/balance
    method: POST
    data_selector: Responseobject · QueryBalanceResponse
    params: {}
- name: account_txs
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/accounttxs
    method: POST
    data_selector: Responseobject · QueryAccountTXsResponse
    params:
      per_page: 100
      order: desc
- name: block
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/block
    method: POST
    data_selector: Responseobject · QueryBlockResponse
    params: {}
- name: node_claim
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/nodeclaim
    method: POST
    data_selector: Response
    params: {}
- name: node_claims
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/nodeclaims
    method: POST
    data_selector: QueryNodeClaimsResponse
    params:
      per_page: 100
- name: transaction
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/tx
    method: POST
    data_selector: Transaction
    params: {}
- name: unconfirmed_transaction
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/unsupportedtx
    method: POST
    data_selector: UnconfirmedTransaction
    params: {}
- name: unconfirmed_transactions
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/unsupportedtxs
    method: POST
    data_selector: QueryUnconfirmedTXResponse
    params:
      per_page: 100
- name: version
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1
    method: GET
    data_selector: Response
    params: {}
- name: blocktxs
  endpoint:
    path: /v1/query/blocktxs
    method: POST
    data_selector: txs
    params:
      height: height
      page: page
      per_page: per_page
      prove: prove
      order: order
- name: height
  endpoint:
    path: /v1/query/height
    method: POST
    data_selector: height
    params:
      height: height
- name: state
  endpoint:
    path: /v1/query/state
    method: POST
    data_selector: app_state
    params:
      height: height
- name: supply
  endpoint:
    path: /v1/query/supply
    method: POST
    data_selector: total
    params:
      height: height
- name: supportedchains
  endpoint:
    path: /v1/query/supportedchains
    method: POST
    data_selector: supported_chains
    params:
      height: height
- name: upgrade
  endpoint:
    path: /v1/query/upgrade
    method: POST
    data_selector: Height
    params:
      height: height
- name: param
  endpoint:
    path: /v1/query/param
    method: POST
    data_selector: param_value
    params:
      height: height
      key: key
- name: allParams
  endpoint:
    path: /v1/query/allParams
    method: POST
    data_selector: app_params
    params:
      height: height
- name: app
  endpoint:
    path: /v1/query/app
    method: POST
    data_selector: address
    params:
      height: height
      address: address
- name: apps
  endpoint:
    path: /v1/query/apps
    method: POST
    data_selector: result
    params:
      opts:
        height: height
        page: page
        per_page: per_page
        staking_status: staking_status
        blockchain: blockchain
- name: node
  endpoint:
    path: /v1/query/node
    method: POST
    data_selector: address
    params:
      height: height
      address: address
- name: nodes
  endpoint:
    path: /v1/query/nodes
    method: POST
    data_selector: result
    params:
      opts:
        height: height
        page: page
        per_page: per_page
        staking_status: staking_status
        jailed_status: jailed_status
        blockchain: blockchain
- name: signinginfo
  endpoint:
    path: /v1/query/signinginfo
    method: POST
    data_selector: result
    params:
      height: height
      address: address
      page: page
      per_page: per_page
- name: nodeclaim
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/nodeclaim
    method: POST
    data_selector: Responseobject
    params: {}
- name: nodeclaims
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/nodeclaims
    method: POST
    data_selector: Responseobject
    params: {}
- name: tx
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/tx
    method: POST
    data_selector: Responseobject
    params: {}
- name: unsupportedtx
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/unsupportedtx
    method: POST
    data_selector: Responseobject
    params: {}
- name: unsupportedtxs
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1/query/unsupportedtxs
    method: POST
    data_selector: Responseobject
    params: {}
- name: version
  endpoint:
    path: /v1/lb/YourPortalIdHere/v1
    method: GET
    data_selector: Responseany
    params: {}
notes:
- Provides open data access to anyone
- With the Shannon upgrade, the wPOKT bridge token will no longer be required.
- No matter your technical expertise or available resources, there are multiple paths
  to start earning $POKT rewards and supporting the growth of decentralized infrastructure.
- With the Shannon upgrade, the wPOKT bridge token will no longer be required. wPOKT
  will be phased out as POKT will be able to go between all chains natively.
- By running a POKT node yourself, or using a Node Provider, POKT holders are able
  to generate rewards.
- Another way to earn $POKT is by supplying liquidity to official POKT liquidity pools
  on decentralized exchanges (DEXs).
- POKT coordinates ecosystem actors and powers the decentralized RPC network.
- In order to stake a node with your $POKT, you need to hold $POKT on POKT Network,
  POKT's native Tendermint based blockchain.
- Once Shannon is deployed to mainnet, POKT holders will have access to all Cosmos
  wallets.
- The Shannon upgrade is already live on public testnet and dates for Mainnet will
  be shared soon.
- Requires setup of connected app in POKT
- Validators must stake enough POKT to become one of the 1,000 validators, a protocol-defined
  cap.
- The original genesis distribution of POKT was 650,000,000 POKT.
- The Application Authentication Token is the key mechanism for Applications to balance
  the security of their stake and UX of clients during servicing.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Shannon upgrade will transform POKT Network from a leading DePIN with full supply-side
  decentralization and an empowered community into the first true sharing economy
  for any open data-source.
- The Shannon upgrade will enter POKT Network into the full Cosmos ecosystem by being
  built entirely off the Cosmos SDK.
- All numbers are for exemplary purposes only and it is all subject to the passing
  of a DAO proposal.
- The Shannon upgrade will make POKT Network infinitely scalable, enables permissionless
  access, brings full interoperability with Cosmos and EVM, and supports improved
  tokenomics.
- The Shannon upgrade is not only the next era of the POKT Protocol, but also the
  next stage of growth for the POKT Network community.
- Free but rate-limited endpoint hosted by a third party
- Web interface hosted by a third party
- Self-hosted access point
- Nodies is the sole provider of public RPC on behalf of Pocket Network.
- Free Plan enables developers to create dedicated endpoints with very high throughput.
- Uses OAuth2 with refresh token for authentication
- Grove is an RPC service designed for decentralized access.
- As of November 2023, Nodies is now the sole provider of public RPC on behalf of
  Pocket Network.
- For Free Plan users, we offer direct support via contact form, email, Discord, and
  Telegram.
- Grove is an RPC service designed to provide seamless access across multiple blockchains.
- Setting up nodes for other blockchains such as Harmony, Ethereum, or any of the
  other supported blockchains is beyond the scope of this guide.
- For the DNS record, use 'pokt001.pokt.run' as the DNS name.
- Using an SSH key provides a more secure means of accessing your server.
- Without access to the SSH key you won’t be able to log into your node.
- Atlanta, GA region supports NVMe storage which is preferable for running Pocket
  nodes.
- Ensure to check the latest version of Go from the official site before installation.
- If you intend on accessing your node from multiple computers, it’s recommended to
  generate and upload the SSH key from each computer.
- Requires setup of connected app in api
- Downloading a snapshot will likely take a few hours.
- Make sure the User is set to the user that will be running the Pocket service.
- Make sure the ExecStart and ExecStop paths are set to the path for the Pocket binary.
- Use the Pocket CLI to generate chains.json
- Increase ulimit to 16384 for the pocket user
- Pocket requires that nodes have an SSL certificate for secure communications.
- To get a certificate, we’ll be using Let’s Encrypt, which is a service that issues
  SSL certificates for free.
- The custodial method is used in the staking example.
- There is a cost for every transaction you execute, currently a flat fee of 0.01
  POKT.
- To get a certificate, we’ll be using Let’s Encrypt.
- We’ll also be using software called certbot to register, install, and renew the
  certificate.
- Test everything
- The Gateway Server abstracts away the complexities of directly interfacing with
  the POKT Network protocol.
- Under the current Morse protocol, the risk of stake slashing for service nodes is
  exceedingly remote.
- The CLI uses µPOKT (the smallest unit of POKT) for its calculations.
- Each Gateway is a distinct entity with its unique requirements and team dynamics.
- Application stakes in Morse are permissioned, therefore you must receive application
  stakes through the Pocket Network Foundation.
- Caching is an optimization given that a session only changes periodically (4 blocks/60
  mins).
- The Gateway Server determines if a set of nodes are healthy based off a simple weight
  formula with heuristics like Latency, Success Responses, Correctness in regard to
  other node operators, and Liveliness.
- Application stakes provides Gateway Operators access to the POKT Network for sending
  traffic.
- The Gateway Server determines if a set of nodes are healthy based off a simple weight
  formula.
- Ordering of the JSON object matters because the values are hashed. If the ordering
  changes, so will the hash.
- AATs are non-revocable and do not have a time expiration date. The only way to revoke
  a token is to unstake the entire application.
- Given that retrieving a session requires a full node, this means staked applications
  will need to source full nodes or run one themselves!
- Authentication requires client ID and secret from the POKT network
- Rate limits apply to API calls
- This is an evolving and possibly incomplete record of the DAO's OS.
- Requires setup of connected app in API
- Quick Grants are fully self-directed.
- PNF uses a new impact evaluation and reporting tool called Karma Gap.
- Uses OAuth2 authentication
- Bounties are tasks that meet specific Pocket Network needs.
- Payment is made monthly.
- The applicant should propose a pay rate; there is no ceiling.
- You’ll need a tiny amount of ETH to pay for set-up on the Optimism network (typically
  under $0.50 per transaction).
- As there’s no option in Karma to create a Maintainer role, you’ll need to set it
  up as a grant.
- Quick Grants need regular reporting and regular reviews to be effective.
- Your historical impact affects payment structure.
- The value of a Quick Grant is evaluated and approved by the Foundation.
- The POKTDAO token is non-transferable.
- Requires setup of connected app
- Payment is made monthly. The applicant should propose a pay rate; there is no ceiling.
- Node Runner assignments require various tasks to be completed in the Pocket testnet
  or mainnet.
- Uses Ethereum for transaction fees in the Optimism network
- Requires setup of a Pocket Portal endpoint.
- 1 person 1 vote - a Gini coefficient of 0 (perfect equality).
- You don’t need a vote in the DAO to submit proposals or participate in discussions.
- Complete tasks to ascend ranks within the community.
- Ensure proper scopes are configured for API access
- Implementation of CREDS requires DAO approval; the vote is expected to take place
  in May or June 2024.
- Requires API key for authentication.
- Retroactive POKT Goods Funding is open to any contributions to the POKT ecosystem
  that meet the Eligibility Criteria and follow the Rules of Conduct.
- The first round of Retroactive POKT Goods Funding will take place in May and June
  of 2024.
- The Sentinel quest is not attainable at the moment as the proposal challenge system
  is pending activation.
- Participation in the Aragon Court is currently unavailable as it is not yet live.
- Successful applicants may be asked to complete KYC by the POKT Network Foundation
  (PNF) for ongoing risk-based assessment. Failure to comply will result in rewards
  reverting back to the RetroPGF Treasury for future funding rounds.
- 'Deadline for Voting: 12:00 midnight Pacific Daylight Time on June 21, 2024 (3 AM
  Eastern Daylight Time on June 22)'
- Further details will be provided here shortly in a FAQ.
- This is a retroactive funding round and only applicants who have created impact
  before the submission deadline are eligible.
- Applications will be assessed by PNF before voting begins and after voting concludes.
- Violating any of the rules may result in disqualification.
- Easiest to host, ideal for 8-30 attendees.
- Ideal if you have some events experience with 31-100 attendees.
- For events with more than 100 attendees. Must be pre-approved by Pocket Network
  Foundation.
- Effective speaker selection is guided by themes of project sharing, skill learning,
  and ideological discussions.
- Ecosystem calls are held every Wednesday at noon EST on the POKT Discord server.
- We're here to help you create and host an event that empowers your audience to learn
  about POKT Network and about DePIN (Decentralized Physical Infrastructure) in general.
- Hosting an event is a great way to boost your network and build your profile, while
  bringing value to your local community and helping us grow awareness about POKT
  Network and the global DePIN movement.
- Some objects like Contact may return nulls in deeply nested fields
- All events follow the same general agenda.
- Uses OAuth2 with refresh token — requires setup of connected app in POKT
- Some objects may return nulls in deeply nested fields
- Select a couple of target event dates in case your speakers are not available or
  there is another event being held on the same date in the area.
- Grants will start on the 1st and 15th of the month, and will be paid in stables.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- Contact form - https://www.nodies.app/contact-us
- Email - support@nodies.org
- Discord - https://nodies.app/discord
- '401 Unauthorized: Check your credentials'
- '403 Forbidden: Access denied'
- Ensure that all necessary ports are open for the Pocket node to function correctly.
- '400 Bad Request: validator not found for [YOUR_VALIDATOR_ADDRESS]'
- If you encounter issues, ensure that the Nginx configuration is correct and that
  the necessary ports are open.
- '429 Too Many Requests: Implement exponential backoff'
- '401 Unauthorized: Check if credentials are correct'
- Failure to report will result in automatic closure of the grant during the review
  cycle.
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Check OAuth token validity'
- '404 Not Found: Verify the endpoint path'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Transaction failed: Check if you have enough ETH for gas fees'
- '401 Unauthorized: Check your API keys or tokens.'
- '429 Too Many Requests: Throttle your requests.'
- '401 Unauthorized: Check your API key and permissions'
- '429 Too Many Requests: Rate limit exceeded, try again later'
- '500 Internal Server Error: An unexpected error occurred, please try again'
- '401 Unauthorized: Check your API key and permissions.'
- '429 Too Many Requests: Rate limit exceeded.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'APPLICATION_DISQUALIFIED: Violating rules may lead to disqualification'
- 'KYC_REQUIRED: Applicants may be asked to complete KYC for ongoing assessment'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
auth_info:
  mentioned_objects:
  - OAuth2
  - APIKey
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://pokt.network
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
