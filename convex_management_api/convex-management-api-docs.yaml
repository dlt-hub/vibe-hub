resources:
- name: list_projects
  endpoint:
    path: /teams/41/list_projects
    method: GET
- name: get_token_details
  endpoint:
    path: /get-token-details
    method: GET
- name: tasks
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: records
- name: tasks
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: tasks
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
    params: {}
- name: tasks
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: data
    params: {}
- name: tasks
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: records
- name: tasks
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: records
    params: {}
- name: tasks
  endpoint:
    path: /convex/tasks
    method: GET
    data_selector: data
    params: {}
- name: tasks
  endpoint:
    path: /api/tasks:get
    method: GET
    data_selector: records
    params: {}
- name: tasks
  endpoint:
    path: /tasks:get
    method: GET
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
    params: {}
- name: tasks
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: records
    params: {}
- name: tasks
  endpoint:
    path: /api/tasks/get
    method: GET
    data_selector: records
- name: tasks
  endpoint:
    path: /tasks:get
    method: GET
- name: scheduled_functions
  endpoint:
    path: /scheduling/scheduled-functions
    method: GET
- name: cron_jobs
  endpoint:
    path: /scheduling/cron-jobs
    method: GET
- name: OpenAI
  endpoint:
    path: /openai
    method: POST
    data_selector: response
    params: {}
- name: Resend
  endpoint:
    path: /resend
    method: POST
    data_selector: response
    params: {}
- name: colors:get
  endpoint:
    path: /functions/colors:get
    method: subscribe
- name: colors:put
  endpoint:
    path: /functions/colors:put
    method: mutation
- name: colors
  endpoint:
    path: /colors:get
    method: GET
- name: generated_code
  endpoint:
    path: /generated-code
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: args
- name: _scheduled_functions
  endpoint:
    path: /api/_scheduled_functions
    method: GET
    data_selector: records
- name: tasks
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: records
- name: purchases
  endpoint:
    path: /api/purchases
    method: GET
    data_selector: records
- name: cron_jobs
  endpoint:
    path: /api/crons
    method: GET
    data_selector: jobs
    params: {}
- name: create_project
  endpoint:
    path: /teams/:team_id/create_project
    method: POST
- name: tasks
  endpoint:
    path: /mutations
    method: POST
    data_selector: newTaskId
- name: list_projects
  endpoint:
    path: /teams/:team_id/list_projects
    method: GET
    data_selector: Array
    params:
      team_id: required
- name: delete_project
  endpoint:
    path: /projects/:project_id/delete
    method: POST
    params:
      project_id: int64
- name: create_deploy_key
  endpoint:
    path: /deployments/:deployment_name/create_deploy_key
    method: POST
- name: scheduled_functions
  endpoint:
    path: /_scheduled_functions
    method: GET
    data_selector: records
    params: {}
- name: token_details
  endpoint:
    path: /token_details
    method: GET
    data_selector: records
- name: cron_jobs
  endpoint:
    path: /api/crons
    method: GET
    data_selector: jobs
    params: {}
- name: create_project
  endpoint:
    path: /management-api/create-project
    method: POST
- name: delete_custom_domain
  endpoint:
    path: /deployments/:deployment_name/delete_custom_domain
    method: POST
    data_selector: null
    params: {}
- name: list_projects
  endpoint:
    path: /teams/:team_id/list_projects
    method: GET
    data_selector: '[]'
- name: custom_domains
  endpoint:
    path: /deployments/:deployment_name/custom_domains
    method: GET
    data_selector: domains
    params:
      deployment_name: anyrequired
- name: delete_project
  endpoint:
    path: /projects/:project_id/delete
    method: POST
    params:
      project_id: int64
- name: create_deploy_key
  endpoint:
    path: /deployments/:deployment_name/create_deploy_key
    method: POST
- name: get_canonical_urls
  endpoint:
    path: /get_canonical_urls
    method: GET
    data_selector: convexCloudUrl, convexSiteUrl
- name: token_details
  endpoint:
    path: /token_details
    method: GET
    data_selector: records
- name: delete_custom_domain
  endpoint:
    path: /deployments/:deployment_name/delete_custom_domain
    method: POST
    data_selector: ''
- name: json_schemas
  endpoint:
    path: /api/json_schemas
    method: GET
    data_selector: values
    params: {}
- name: list_snapshot
  endpoint:
    path: /api/list_snapshot
    method: GET
    data_selector: values
    params: {}
- name: document_deltas
  endpoint:
    path: /api/document_deltas
    method: GET
    data_selector: values
    params:
      cursor: snapshot
- name: custom_domains
  endpoint:
    path: /deployments/:deployment_name/custom_domains
    method: GET
    data_selector: domains
    params:
      deployment_name: anyrequired
- name: primary_key_indexes_ready
  endpoint:
    path: /api/streaming_import/primary_key_indexes_ready
    method: GET
    data_selector: indexesReady
- name: add_primary_key_indexes
  endpoint:
    path: /api/streaming_import/add_primary_key_indexes
    method: PUT
- name: clear_tables
  endpoint:
    path: /api/streaming_import/clear_tables
    method: PUT
- name: import_airbyte_records
  endpoint:
    path: /api/streaming_import/import_airbyte_records
    method: POST
- name: list_environment_variables
  endpoint:
    path: /list_environment_variables
    method: GET
- name: canonical_urls
  endpoint:
    path: /get_canonical_urls
    method: GET
    data_selector: convexCloudUrl,convexSiteUrl
- name: update_environment_variables
  endpoint:
    path: /update_environment_variables
    method: POST
- name: environment_variables
  endpoint:
    path: /list_environment_variables
    method: GET
    data_selector: environmentVariables
- name: json_schemas
  endpoint:
    path: /api/json_schemas
    method: GET
- name: list_snapshot
  endpoint:
    path: /api/list_snapshot
    method: GET
- name: document_deltas
  endpoint:
    path: /api/document_deltas
    method: GET
- name: update_canonical_url
  endpoint:
    path: /update_canonical_url
    method: POST
    data_selector: body
- name: primary_key_indexes_ready
  endpoint:
    path: /api/streaming_import/primary_key_indexes_ready
    method: GET
    data_selector: indexesReady
- name: add_primary_key_indexes
  endpoint:
    path: /api/streaming_import/add_primary_key_indexes
    method: PUT
- name: clear_tables
  endpoint:
    path: /api/streaming_import/clear_tables
    method: PUT
- name: import_airbyte_records
  endpoint:
    path: /api/streaming_import/import_airbyte_records
    method: POST
- name: update_environment_variables
  endpoint:
    path: /update_environment_variables
    method: POST
- name: environment_variables
  endpoint:
    path: /list_environment_variables
    method: GET
    data_selector: environmentVariables
- name: update_canonical_url
  endpoint:
    path: /update_canonical_url
    method: POST
    data_selector: response
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses OAuth2 with refresh token — requires setup of connected app in Convex
- Uses OAuth2
- TanStack Start is in Release Candidate
- To use Clerk with Convex and TanStack Start, see the TanStack Start + Clerk guide
- Convex stores environment variables in .env.local
- SvelteKit doesn't like referencing code outside of source, so customize the convex
  functionsDir to be under `src/`.
- Exporting a query function from this file declares an API function named after the
  file and the export name, `api.tasks.get`.
- Requires setup of connected app in Convex
- Project setup requires npm and Convex library installation.
- Environment variable CONVEX_URL is needed in HTML file.
- The app will update with changes in real-time.
- Uses Convex client for real-time data updates
- Uses OAuth2 authentication.
- The Convex database is automatically provisioned when you create your project.
- Convex provides the strictest possible transactional guarantees, and you never see
  inconsistent data.
- You do not have to specify a schema upfront or create tables explicitly.
- Convex Auth is currently a beta feature
- All file types are supported.
- Convex provides easy apis to create powerful AI and search enabled products.
- Convex provides easy APIs to create powerful AI and search-enabled products.
- Remote cloud-based coding agents can use Convex deployments when the CLI is in Agent
  Mode.
- Chef works off a singular template with Convex, Convex Auth and React powered by
  Vite. Switching these technologies is not supported by Chef.
- At the top right of the Chef UI there is a download code button.
- Unzip the file and put the folder in your desired location.
- We recommend renaming the folder to the name of your app for convenience.
- Convex Platform APIs are in openly available in Beta.
- Retrieve the token after logging in as this service account.
- Chef projects don’t come with a build script.
- You have now taken over from Chef for development of this app.
- These tokens are owned by the team member that's logged into the Convex dashboard
  when you retrieve them.
- The `convex-vue` library is community-maintained.
- See the Python Quickstart for more details.
- Requires setup of Auth0 for authentication
- You can use ConvexClientWithAuth in place of ConvexClient to configure authentication
  with Auth0.
- It should also be possible to integrate other similar OpenID Connect authentication
  providers.
- You can use ConvexClientWithAuth in place of ConvexClient to configure authentication
  with Auth0
- You will need the convex-android-auth0 library to do that, as well as an Auth0 account
  and application configuration
- The `convex/` directory is the home for your query and mutation functions.
- .env.local with `CONVEX_DEPLOYMENT` variable is the main configuration for your
  Convex project.
- Argument and return value validators are not required, but they will enrich the
  types of your OpenAPI spec.
- You cannot call internal functions from outside of your Convex deployment.
- We currently do not support bigints or bytes.
- Code generation isn't required to use Convex, but using the generated code will
  give you better autocompletion in your editor.
- Public functions can be called by anyone, including potentially malicious attackers
  trying to break your app, and should be carefully audited to ensure they can't be
  used maliciously.
- Some objects like Contact may return nulls in deeply nested fields
- Use `ctx.runQuery` and `ctx.runMutation` sparingly in queries and mutations
- Most logic should be written as plain TypeScript functions
- Convex is an opinionated framework designed to pull developers into the pit of success.
- Use the `v.id` validator to avoid exposing data from unintended tables.
- This system error is thrown when a mutation repeatedly fails due to conflicting
  changes from parallel mutation executions.
- Make sure that your mutations only read the data they need. Consider reducing the
  amount of data read by using indexed queries with selective index range expressions.
- Make sure you are not calling a mutation an unexpected number of times, perhaps
  from an action inside a loop.
- Design your data model such that it doesn't require making many writes to the same
  document.
- The Convex database is automatically provisioned when you create your project. There
  is no connection setup or cluster management.
- Convex provides a database, a place to write your server functions, and client libraries.
  It makes it easy to build and scale dynamic live-updating apps.
- Queries fetch data from the database and return results to the client.
- Mutations run transactionally.
- Mutations can call helpers that take a QueryCtx as argument.
- Public functions can be called by anyone, including potentially malicious attackers
  trying to break your app and should be carefully audited to ensure they can't be
  used maliciously.
- Actions timeout after 10 minutes.
- Node.js and Convex runtime have 512MB and 64MB memory limit respectively.
- A single function can schedule up to 1000 functions with total argument size of
  8MB.
- Scheduled function results are available for 7 days after they have completed.
- Filtering in Convex is best done using indexes.
- Convex queries always return documents ordered by _creationTime.
- Transaction atomicity is guaranteed.
- No need to worry about conflicts, locking, or atomicity when making changes.
- Cron jobs can run with seconds-level granularity.
- At most one run of each cron job can be executing at any moment.
- Queries cannot fetch from third party APIs.
- Mutations insert, update and remove data from the database, check authentication
  or perform other business logic.
- Actions can do up to 1000 concurrent operations, such as executing queries, mutations
  or performing fetch requests.
- Actions time out after 10 minutes.
- Runs functions on a specified schedule using crons.
- All application tokens are scoped to the permissions of the member that authorized
  usage.
- A code can only be exchanged once for an access token.
- When access to the deployment is granted through an OAuth token this deploy key
  will use the same OAuth-granted token.
- Returns the team ID for team tokens.
- Streaming Export HTTP APIs are currently a beta feature.
- Authorization requires a Bearer token obtained through a Convex OAuth application.
- Convex provides a database, a place to write your server functions, and client libraries.
- Uses OAuth 2.0 Authorization Code Grant flow with PKCE support
- Tokens are scoped to the permissions of the member that authorized usage
- The Deployment Management API requires a Authorization header with a key that grants
  admin access to that deployment.
- Streaming import into Convex via Fivetran is not supported at the moment.
- Streaming export requires a Convex Pro plan.
- Streaming export requests require deployment admin authorization via the HTTP header
  'Authorization'.
- Deployment keys created in the dashboard or by API calls can be used for these APIs.
- Streaming import is included with all Convex plans.
- This will invalidate all subscriptions, since environment variables are accessible
  in queries but are not part of the cache key of a query result.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- ConvexError
- ServerError
- 'Write conflict: Optimistic concurrency control'
- 'Unauthorized: User is not authorized to perform this action.'
- 'Write conflict: Documents read from or written to the table changed while this
  mutation was being run and on every subsequent retry.'
- Actions may have side-effects and therefore can't be automatically retried by Convex
  when errors occur.
- Skipping a scheduled run of a cron job due to the previous run still executing logs
  a message visible in the logs view.
- '401 Unauthorized: Obtained through a Convex OAuth application'
- Convex will automatically retry any internal Convex errors, and only fail on developer
  errors.
- At most one run of each cron job can be executing at any moment.
- 'Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API Key'
auth_info:
  mentioned_objects:
  - Auth0
  - ConvexClient
  - ConvexClientWithAuth
  - AuthProvider
  - OauthToken
  - NamedCredential
  - OAuth Team Token
  - Team Token
  - OAuth Project Token
  - Application Tokens
client:
  base_url: https://convex.dev
  auth:
    type: oauth2
source_metadata: null
