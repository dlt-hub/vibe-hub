resources:
- name: simulateTransaction
  endpoint:
    path: /reference/rpc-algorand-simulatetransaction
    method: POST
- name: getApplicationLogs
  endpoint:
    path: /reference/rpc-algorand-getapplicationlogs
    method: GET
- name: getApplication
  endpoint:
    path: /reference/rpc-algorand-getapplication
    method: GET
- name: getAccounts
  endpoint:
    path: /reference/rpc-algorand-getaccounts
    method: GET
- name: getTransaction
  endpoint:
    path: /reference/rpc-algorand-gettransaction
    method: GET
- name: getAccountApplications
  endpoint:
    path: /reference/rpc-algorand-getaccountapplications
    method: GET
- name: getHealth
  endpoint:
    path: /reference/rpc-algorand-gethealth
    method: GET
- name: getApplicationBoxes
  endpoint:
    path: /reference/rpc-algorand-getapplicationboxes
    method: GET
- name: getTransactionParams
  endpoint:
    path: /reference/rpc-algorand-gettransactionparams
    method: GET
- name: getGenesis
  endpoint:
    path: /reference/rpc-algorand-getgenesis
    method: GET
- name: getAccountAssets
  endpoint:
    path: /reference/rpc-algorand-getaccountassets
    method: GET
- name: getBlock
  endpoint:
    path: /reference/rpc-algorand-getblock
    method: GET
- name: getNodeStatusAfterRound
  endpoint:
    path: /reference/rpc-algorand-getnodestatusafterround
    method: GET
- name: getNodeStatus
  endpoint:
    path: /reference/rpc-algorand-getnodestatus
    method: GET
- name: isHealthy
  endpoint:
    path: /reference/rpc-algorand-ishealthy
    method: GET
- name: getAccountTransactions
  endpoint:
    path: /reference/rpc-algorand-getaccounttransactions
    method: GET
- name: getBlockHash
  endpoint:
    path: /reference/rpc-algorand-getblockhash
    method: GET
- name: getAccountApssLocalState
  endpoint:
    path: /reference/rpc-algorand-getaccountapsslocalstate
    method: GET
- name: getLedgerStateDelta
  endpoint:
    path: /reference/rpc-algorand-getledgerstatedelta
    method: GET
- name: getAccountCreatedAssets
  endpoint:
    path: /reference/rpc-algorand-getaccountcreatedassets
    method: GET
- name: getApplicationBox
  endpoint:
    path: /reference/rpc-algorand-getapplicationbox
    method: GET
- name: getAssetTransactions
  endpoint:
    path: /reference/rpc-algorand-getassettransactions
    method: GET
- name: getAccountInfo
  endpoint:
    path: /reference/rpc-algorand-getaccountinfo
    method: GET
- name: getAssets
  endpoint:
    path: /reference/rpc-algorand-getassets
    method: GET
- name: getAsset
  endpoint:
    path: /reference/rpc-algorand-getasset
    method: GET
- name: getAssetInformation
  endpoint:
    path: /reference/rpc-algorand-getassetinformation
    method: GET
- name: getTransactions
  endpoint:
    path: /reference/rpc-algorand-gettransactions
    method: GET
- name: isReady
  endpoint:
    path: /reference/rpc-algorand-isready
    method: GET
- name: getApplicationDetails
  endpoint:
    path: /reference/rpc-algorand-getapplicationdetails
    method: GET
- name: getPendingTransactions
  endpoint:
    path: /reference/rpc-algorand-getpendingtransactions
    method: GET
- name: getTransactionProof
  endpoint:
    path: /reference/rpc-algorand-gettransactionproof
    method: GET
- name: getAccountApplicationInfo
  endpoint:
    path: /reference/rpc-algorand-getaccountapplicationinfo
    method: GET
- name: getApplications
  endpoint:
    path: /reference/rpc-algorand-getapplications
    method: GET
- name: broadcastTransaction
  endpoint:
    path: /reference/rpc-algorand-broadcasttransaction
    method: POST
- name: getLedgerSupply
  endpoint:
    path: /reference/rpc-algorand-getledgersupply
    method: GET
- name: getAccount
  endpoint:
    path: /reference/rpc-algorand-getaccount
    method: GET
- name: getAssetBalances
  endpoint:
    path: /reference/rpc-algorand-getassetbalances
    method: GET
- name: getAccountAssetInfo
  endpoint:
    path: /reference/rpc-algorand-getaccountassetinfo
    method: GET
- name: eth_blocknumber
  endpoint:
    path: /reference/rpc-berachain-eth_blocknumber
    method: GET
- name: eth_call
  endpoint:
    path: /reference/rpc-berachain-eth_call
    method: GET
- name: eth_chainId
  endpoint:
    path: /reference/rpc-berachain-eth_chainid
    method: GET
- name: eth_estimateGas
  endpoint:
    path: /reference/rpc-berachain-eth_estimategas
    method: GET
- name: eth_feeHistory
  endpoint:
    path: /reference/rpc-berachain-eth_feehistory
    method: GET
- name: eth_gasPrice
  endpoint:
    path: /reference/rpc-berachain-eth_gasprice
    method: GET
- name: eth_getBalance
  endpoint:
    path: /reference/rpc-berachain-eth_getbalance
    method: GET
- name: eth_getBlockByHash
  endpoint:
    path: /reference/rpc-berachain-eth_getblockbyhash
    method: GET
- name: eth_getBlockByNumber
  endpoint:
    path: /reference/rpc-berachain-eth_getblockbynumber
    method: GET
- name: eth_getBlockReceipts
  endpoint:
    path: /reference/rpc-berachain-eth_getblockreceipts
    method: GET
- name: eth_getBlockTransactionCountByHash
  endpoint:
    path: /reference/rpc-berachain-eth_getblocktransactioncountbyhash
    method: GET
- name: eth_getBlockTransactionCountByNumber
  endpoint:
    path: /reference/rpc-berachain-eth_getblocktransactioncountbynumber
    method: GET
- name: eth_getCode
  endpoint:
    path: /reference/rpc-berachain-eth_getcode
    method: GET
- name: eth_getLogs
  endpoint:
    path: /reference/rpc-berachain-eth_getlogs
    method: GET
- name: eth_getProof
  endpoint:
    path: /reference/rpc-berachain-eth_getproof
    method: GET
- name: eth_getStorageAt
  endpoint:
    path: /reference/rpc-berachain-eth_getstorageat
    method: GET
- name: eth_getTransactionByBlockHashAndIndex
  endpoint:
    path: /reference/rpc-berachain-eth_gettransactionbyblockhashandindex
    method: GET
- name: eth_getTransactionByBlockNumberAndIndex
  endpoint:
    path: /reference/rpc-berachain-eth_gettransactionbyblocknumberandindex
    method: GET
- name: eth_getTransactionByHash
  endpoint:
    path: /reference/rpc-berachain-eth_gettransactionbyhash
    method: GET
- name: eth_getTransactionCount
  endpoint:
    path: /reference/rpc-berachain-eth_gettransactioncount
    method: GET
- name: eth_getTransactionReceipt
  endpoint:
    path: /reference/rpc-berachain-eth_gettransactionreceipt
    method: GET
- name: eth_getUncleCountByBlockHash
  endpoint:
    path: /reference/rpc-berachain-eth_getunclecountbyblockhash
    method: GET
- name: eth_getUncleCountByBlockNumber
  endpoint:
    path: /reference/rpc-berachain-eth_getunclecountbyblocknumber
    method: GET
- name: eth_maxPriorityFeePerGas
  endpoint:
    path: /reference/rpc-berachain-eth_maxpriorityfeepergas
    method: GET
- name: eth_sendRawTransaction
  endpoint:
    path: /reference/rpc-berachain-eth_sendrawtransaction
    method: POST
- name: trace_block
  endpoint:
    path: /reference/rpc-berachain-trace_block
    method: GET
- name: txpool_content
  endpoint:
    path: /reference/rpc-berachain-txpool_content
    method: GET
- name: txpool_inspect
  endpoint:
    path: /reference/rpc-berachain-txpool_inspect
    method: GET
- name: txpool_status
  endpoint:
    path: /reference/rpc-berachain-txpool_status
    method: GET
- name: web3_clientVersion
  endpoint:
    path: /reference/rpc-berachain-web3_clientversion
    method: GET
- name: Generate Cronos wallet
  endpoint:
    path: /reference/cronosgeneratewallet
    method: GET
- name: Get current block number
  endpoint:
    path: /reference/cronosgetcurrentblock
    method: GET
- name: Get Cronos block by hash
  endpoint:
    path: /reference/cronosgetblock
    method: GET
- name: Get the CRO balance of an Cronos account
  endpoint:
    path: /reference/cronosgetbalance
    method: GET
- name: Get Cronos Transaction
  endpoint:
    path: /reference/cronosgettransaction
    method: GET
- name: Send CRO or fungible tokens (ERC-20) from account to account
  endpoint:
    path: /reference/cronosblockchaintransfer
    method: POST
- name: Broadcast signed Cronos transaction
  endpoint:
    path: /reference/cronosbroadcast
    method: POST
- name: Get Blockchain information
  endpoint:
    path: /reference/adagetblockchaininfo
    method: GET
- name: Generate Ada wallet
  endpoint:
    path: /reference/adageneratewallet
    method: GET
- name: Generate Ada deposit address from Extended public key
  endpoint:
    path: /reference/adagenerateaddress
    method: GET
- name: Generate Ada private key
  endpoint:
    path: /reference/adagenerateaddressprivatekey
    method: POST
- name: Get Block by hash or height
  endpoint:
    path: /reference/adagetblock
    method: GET
- name: Get transaction by hash
  endpoint:
    path: /reference/adagetrawtransaction
    method: GET
- name: Get transactions by address
  endpoint:
    path: /reference/adagettxbyaddress
    method: GET
- name: Get UTXOs by address
  endpoint:
    path: /reference/adagetutxobyaddress
    method: GET
- name: Send ADA to Cardano addresses
  endpoint:
    path: /reference/adatransferblockchain
    method: POST
- name: Broadcast signed Ada transaction
  endpoint:
    path: /reference/adabroadcast
    method: POST
- name: Gets an Ada account by address
  endpoint:
    path: /reference/adagetaccount
    method: GET
- name: node_version
  endpoint:
    path: /rpc-ethereum-getnodeversion
    method: GET
- name: syncing_status
  endpoint:
    path: /rpc-ethereum-getsyncingstatus
    method: GET
- name: health_check
  endpoint:
    path: /rpc-ethereum-gethealth
    method: GET
- name: fork_schedule
  endpoint:
    path: /rpc-ethereum-getforkschedule
    method: GET
- name: spec_params
  endpoint:
    path: /rpc-ethereum-getspec
    method: GET
- name: deposit_contract_address
  endpoint:
    path: /rpc-ethereum-getdepositcontract
    method: GET
- name: current_block_number
  endpoint:
    path: /reference/kcsgetcurrentblock
    method: GET
- name: account_balance
  endpoint:
    path: /reference/kcsgetbalance
    method: GET
- name: transaction
  endpoint:
    path: /reference/kcsgettransaction
    method: GET
- name: transaction_count
  endpoint:
    path: /reference/kcsgettransactioncount
    method: GET
- name: block_by_hash
  endpoint:
    path: /reference/kcsgetblock
    method: GET
- name: blockchain_transfer
  endpoint:
    path: /reference/kcsblockchaintransfer
    method: POST
- name: get_block_by_hash
  endpoint:
    path: /reference/rpc-haqq-eth_getblockbyhash
    method: GET
- name: block_number
  endpoint:
    path: /reference/rpc-haqq-eth_blocknumber
    method: GET
- name: get_logs
  endpoint:
    path: /reference/rpc-haqq-eth_getlogs
    method: GET
- name: get_uncle_count_by_block_number
  endpoint:
    path: /reference/rpc-haqq-eth_getunclecountbyblocknumber
    method: GET
- name: get_transaction_by_block_number_and_index
  endpoint:
    path: /reference/rpc-haqq-eth_gettransactionbyblocknumberandindex
    method: GET
- name: send_raw_transaction
  endpoint:
    path: /reference/rpc-haqq-eth_sendrawtransaction
    method: POST
- name: get_block_by_number
  endpoint:
    path: /reference/rpc-haqq-eth_getblockbynumber
    method: GET
- name: get_uncle_count_by_block_hash
  endpoint:
    path: /reference/rpc-haqq-eth_getunclecountbyblockhash
    method: GET
- name: get_balance
  endpoint:
    path: /reference/rpc-haqq-eth_getbalance
    method: GET
- name: get_block_transaction_count_by_number
  endpoint:
    path: /reference/rpc-haqq-eth_getblocktransactioncountbynumber
    method: GET
- name: txpool_content
  endpoint:
    path: /reference/rpc-haqq-txpool_content
    method: GET
- name: fee_history
  endpoint:
    path: /reference/rpc-haqq-eth_feehistory
    method: GET
- name: Retrieve a Transaction's Effects
  endpoint:
    path: /reference/rpc-stellar-retrieveatransactionseffects
    method: GET
- name: Retrieve a Transaction's Payments
  endpoint:
    path: /reference/rpc-stellar-retrieveatransactionspayments
    method: GET
- name: List All Transactions
  endpoint:
    path: /reference/rpc-stellar-listalltransactions
    method: GET
- name: Submit a Transaction
  endpoint:
    path: /reference/rpc-stellar-submitatransaction
    method: POST
- name: Submit a Transaction Asynchronously
  endpoint:
    path: /reference/rpc-stellar-submitasynctransaction
    method: POST
- name: Generate XRP account
  endpoint:
    path: /reference/xrpwallet
    method: GET
- name: Get XRP Blockchain Information
  endpoint:
    path: /reference/xrpgetlastclosedledger
    method: GET
- name: Get actual Blockchain fee
  endpoint:
    path: /reference/xrpgetfee
    method: GET
- name: Get Account transactions
  endpoint:
    path: /reference/xrpgetaccounttx
    method: GET
- name: Get Ledger
  endpoint:
    path: /reference/xrpgetledger
    method: GET
- name: Get XRP Transaction by hash
  endpoint:
    path: /reference/xrpgettransaction
    method: GET
- name: Get Account info
  endpoint:
    path: /reference/xrpgetaccountinfo
    method: GET
- name: Get Account Balance
  endpoint:
    path: /reference/xrpgetaccountbalance
    method: GET
- name: Send XRP from address to address
  endpoint:
    path: /reference/xrptransferblockchain
    method: POST
- name: Create / Update / Delete XRP trust line
  endpoint:
    path: /reference/xrptrustlineblockchain
    method: POST
- name: Modify XRP account
  endpoint:
    path: /reference/xrpaccountsettings
    method: POST
- name: Broadcast signed XRP transaction
  endpoint:
    path: /reference/xrpbroadcast
    method: POST
- name: GetBlockByLatestNum
  endpoint:
    path: /rpc-tron-solidity-getblockbylatestnum
    method: GET
- name: GetAccount
  endpoint:
    path: /rpc-tron-solidity-walletsolidity-getaccount
    method: POST
- name: GetTransactionById
  endpoint:
    path: /rpc-tron-solidity-gettransactionbyid
    method: POST
- name: eth_chainid
  endpoint:
    path: /reference/rpc-celo-eth_chainid
    method: GET
- name: eth_blocknumber
  endpoint:
    path: /reference/rpc-celo-eth_blocknumber
    method: GET
- name: eth_gasprice
  endpoint:
    path: /reference/rpc-celo-eth_gasprice
    method: GET
- name: eth_getbalance
  endpoint:
    path: /reference/rpc-celo-eth_getbalance
    method: GET
- name: eth_gettransactionbyhash
  endpoint:
    path: /reference/rpc-celo-eth_gettransactionbyhash
    method: GET
- name: internal_transactions
  endpoint:
    path: /reference/ethgetinternaltransactionbyaddress
    method: GET
- name: smart_contract_invocation
  endpoint:
    path: /reference/ethblockchainsmartcontractinvocation
    method: POST
- name: transfer
  endpoint:
    path: /reference/ethblockchaintransfer
    method: POST
- name: transaction_count
  endpoint:
    path: /reference/ethgettransactioncount
    method: GET
- name: transaction
  endpoint:
    path: /reference/ethgettransaction
    method: GET
- name: balance
  endpoint:
    path: /reference/ethgetbalance
    method: GET
- name: block
  endpoint:
    path: /reference/ethgetblock
    method: GET
- name: current_block_number
  endpoint:
    path: /reference/ethgetcurrentblock
    method: GET
- name: health_check
  endpoint:
    path: /reference/rpc-ethereum-gethealth
    method: GET
- name: generate_klaytn_private_key
  endpoint:
    path: /reference/klaytngenerateaddressprivatekey
    method: POST
    data_selector: result
- name: generate_klaytn_account_address
  endpoint:
    path: /reference/klaytngenerateaddress
    method: GET
    data_selector: result
- name: generate_klaytn_wallet
  endpoint:
    path: /reference/klaytngeneratewallet
    method: GET
    data_selector: result
- name: eth_call
  endpoint:
    path: /rpc/eth_call
    method: POST
- name: eth_getblocktransactioncountbynumber
  endpoint:
    path: /rpc/eth_getblocktransactioncountbynumber
    method: POST
- name: debug_tracetransaction
  endpoint:
    path: /rpc/debug_tracetransaction
    method: POST
- name: eth_getUncleCountByBlockHash
  endpoint:
    path: /reference/rpc-fantom-eth_getunclecountbyblockhash
    method: GET
- name: eth_getTransactionReceipt
  endpoint:
    path: /reference/rpc-fantom-eth_gettransactionreceipt
    method: GET
- name: eth_getTransactionCount
  endpoint:
    path: /reference/rpc-fantom-eth_gettransactioncount
    method: GET
- name: eth_getTransactionByHash
  endpoint:
    path: /reference/rpc-fantom-eth_gettransactionbyhash
    method: GET
- name: eth_getTransactionByBlockNumberAndIndex
  endpoint:
    path: /reference/rpc-fantom-eth_gettransactionbyblocknumberandindex
    method: GET
- name: eth_getTransactionByBlockHashAndIndex
  endpoint:
    path: /reference/rpc-fantom-eth_gettransactionbyblockhashandindex
    method: GET
- name: eth_getStorageAt
  endpoint:
    path: /reference/rpc-fantom-eth_getstorageat
    method: GET
- name: eth_getProof
  endpoint:
    path: /reference/rpc-fantom-eth_getproof
    method: GET
- name: eth_getLogs
  endpoint:
    path: /reference/rpc-fantom-eth_getlogs
    method: GET
- name: eth_getCode
  endpoint:
    path: /reference/rpc-fantom-eth_getcode
    method: GET
- name: eth_getBlockTransactionCountByNumber
  endpoint:
    path: /reference/rpc-fantom-eth_getblocktransactioncountbynumber
    method: GET
- name: eth_getBlockTransactionCountByHash
  endpoint:
    path: /reference/rpc-fantom-eth_getblocktransactioncountbyhash
    method: GET
- name: eth_getBlockByNumber
  endpoint:
    path: /reference/rpc-fantom-eth_getblockbynumber
    method: GET
- name: eth_getBlockByHash
  endpoint:
    path: /reference/rpc-fantom-eth_getblockbyhash
    method: GET
- name: eth_getBalance
  endpoint:
    path: /reference/rpc-fantom-eth_getbalance
    method: GET
- name: eth_gasPrice
  endpoint:
    path: /reference/rpc-fantom-eth_gasprice
    method: GET
- name: eth_feeHistory
  endpoint:
    path: /reference/rpc-fantom-eth_feehistory
    method: GET
- name: eth_estimateGas
  endpoint:
    path: /reference/rpc-fantom-eth_estimategas
    method: GET
- name: eth_chainId
  endpoint:
    path: /reference/rpc-fantom-eth_chainid
    method: GET
- name: eth_call
  endpoint:
    path: /reference/rpc-fantom-eth_call
    method: GET
- name: eth_blockNumber
  endpoint:
    path: /reference/rpc-fantom-eth_blocknumber
    method: GET
- name: debug_traceTransaction
  endpoint:
    path: /reference/rpc-fantom-debug_tracetransaction
    method: GET
- name: debug_traceCall
  endpoint:
    path: /reference/rpc-fantom-debug_tracecall
    method: GET
- name: debug_traceBlockByNumber
  endpoint:
    path: /reference/rpc-fantom-debug_traceblockbynumber
    method: GET
- name: debug_traceBlockByHash
  endpoint:
    path: /reference/rpc-fantom-debug_traceblockbyhash
    method: GET
- name: debug_storageRangeAt
  endpoint:
    path: /reference/rpc-fantom-debug_storagerangeat
    method: GET
- name: getbestblockhash
  endpoint:
    path: /reference/rpc-zcash-getbestblockhash
    method: GET
- name: getmempoolentry
  endpoint:
    path: /reference/rpc-zcash-getmempoolentry
    method: GET
- name: getblockheader
  endpoint:
    path: /reference/rpc-zcash-getblockheader
    method: GET
- name: getblockcount
  endpoint:
    path: /reference/rpc-zcash-getblockcount
    method: GET
- name: getblockchaininfo
  endpoint:
    path: /reference/rpc-zcash-getblockchaininfo
    method: GET
- name: gettxout
  endpoint:
    path: /reference/rpc-zcash-gettxout
    method: GET
- name: getrawtransaction
  endpoint:
    path: /reference/rpc-zcash-getrawtransaction
    method: GET
- name: getchaintips
  endpoint:
    path: /reference/rpc-zcash-getchaintips
    method: GET
- name: getmempooldescendants
  endpoint:
    path: /reference/rpc-zcash-getmempooldescendants
    method: GET
- name: estimatesmartfee
  endpoint:
    path: /reference/rpc-zcash-estimatesmartfee
    method: GET
- name: getmempoolancestors
  endpoint:
    path: /reference/rpc-zcash-getmempoolancestors
    method: GET
- name: sendrawtransaction
  endpoint:
    path: /reference/rpc-zcash-sendrawtransaction
    method: GET
- name: getmempoolinfo
  endpoint:
    path: /reference/rpc-zcash-getmempoolinfo
    method: GET
- name: validateaddress
  endpoint:
    path: /reference/rpc-zcash-validateaddress
    method: GET
- name: Zilliqa
  endpoint:
    path: /reference/rpc-zilliqa
    method: GET
- name: ZKsync
  endpoint:
    path: /reference/rpc-zksync
    method: GET
- name: ZKsync - JSON-RPC
  endpoint:
    path: /reference/rpc-zksync-jsonrpc
    method: GET
- name: simulateTransaction
  endpoint:
    path: /reference/rpc-algorand-simulatetransaction
    method: POST
    data_selector: records
- name: getApplicationLogs
  endpoint:
    path: /reference/rpc-algorand-getapplicationlogs
    method: GET
    data_selector: records
- name: getAccounts
  endpoint:
    path: /reference/rpc-algorand-getaccounts
    method: GET
    data_selector: records
- name: getTransaction
  endpoint:
    path: /reference/rpc-algorand-gettransaction
    method: GET
    data_selector: records
- name: Get Blockchain information
  endpoint:
    path: /reference/adagetblockchaininfo
    method: GET
- name: Generate Ada wallet
  endpoint:
    path: /reference/adageneratewallet
    method: GET
- name: Get Block by hash or height
  endpoint:
    path: /reference/adagetblock
    method: GET
- name: Get transaction by hash
  endpoint:
    path: /reference/adagetrawtransaction
    method: GET
- name: Send ADA to Cardano addresses
  endpoint:
    path: /reference/adatransferblockchain
    method: POST
- name: Generate Cronos wallet
  endpoint:
    path: /reference/cronosgeneratewallet
    method: GET
- name: Generate Cronos account address from Extended public key
  endpoint:
    path: /reference/cronosgenerateaddress
    method: GET
- name: Generate Cronos private key
  endpoint:
    path: /reference/cronosgenerateaddressprivatekey
    method: POST
- name: Web3 HTTP driver
  endpoint:
    path: /reference/cronosweb3driver
    method: POST
- name: Get current block number
  endpoint:
    path: /reference/cronosgetcurrentblock
    method: GET
- name: Get Cronos block by hash
  endpoint:
    path: /reference/cronosgetblock
    method: GET
- name: Get the CRO balance of an Cronos account
  endpoint:
    path: /reference/cronosgetbalance
    method: GET
- name: Get Cronos Transaction
  endpoint:
    path: /reference/cronosgettransaction
    method: GET
- name: Get count of outgoing Cronos transactions
  endpoint:
    path: /reference/cronosgettransactioncount
    method: GET
- name: Send CRO or fungible tokens (ERC-20) from account to account
  endpoint:
    path: /reference/cronosblockchaintransfer
    method: POST
- name: Invoke a method in a smart contract on Cronos
  endpoint:
    path: /reference/cronosblockchainsmartcontractinvocation
    method: POST
- name: Broadcast signed Cronos transaction
  endpoint:
    path: /reference/cronosbroadcast
    method: POST
- name: eth_blocknumber
  endpoint:
    path: /reference/rpc-berachain-eth_blocknumber
    method: POST
- name: eth_call
  endpoint:
    path: /reference/rpc-berachain-eth_call
    method: POST
- name: eth_chainId
  endpoint:
    path: /reference/rpc-berachain-eth_chainid
    method: POST
- name: eth_estimateGas
  endpoint:
    path: /reference/rpc-berachain-eth_estimategas
    method: POST
- name: eth_feeHistory
  endpoint:
    path: /reference/rpc-berachain-eth_feehistory
    method: POST
- name: eth_gasPrice
  endpoint:
    path: /reference/rpc-berachain-eth_gasprice
    method: POST
- name: eth_getBalance
  endpoint:
    path: /reference/rpc-berachain-eth_getbalance
    method: POST
- name: eth_getBlockByHash
  endpoint:
    path: /reference/rpc-berachain-eth_getblockbyhash
    method: POST
- name: eth_getBlockByNumber
  endpoint:
    path: /reference/rpc-berachain-eth_getblockbynumber
    method: POST
- name: eth_getBlockReceipts
  endpoint:
    path: /reference/rpc-berachain-eth_getblockreceipts
    method: POST
- name: eth_getBlockTransactionCountByHash
  endpoint:
    path: /reference/rpc-berachain-eth_getblocktransactioncountbyhash
    method: POST
- name: eth_getBlockTransactionCountByNumber
  endpoint:
    path: /reference/rpc-berachain-eth_getblocktransactioncountbynumber
    method: POST
- name: eth_getCode
  endpoint:
    path: /reference/rpc-berachain-eth_getcode
    method: POST
- name: eth_getLogs
  endpoint:
    path: /reference/rpc-berachain-eth_getlogs
    method: POST
- name: eth_getProof
  endpoint:
    path: /reference/rpc-berachain-eth_getproof
    method: POST
- name: eth_getStorageAt
  endpoint:
    path: /reference/rpc-berachain-eth_getstorageat
    method: POST
- name: eth_getTransactionByBlockHashAndIndex
  endpoint:
    path: /reference/rpc-berachain-eth_gettransactionbyblockhashandindex
    method: POST
- name: eth_getTransactionByBlockNumberAndIndex
  endpoint:
    path: /reference/rpc-berachain-eth_gettransactionbyblocknumberandindex
    method: POST
- name: eth_getTransactionByHash
  endpoint:
    path: /reference/rpc-berachain-eth_gettransactionbyhash
    method: POST
- name: eth_getTransactionCount
  endpoint:
    path: /reference/rpc-berachain-eth_gettransactioncount
    method: POST
- name: eth_getTransactionReceipt
  endpoint:
    path: /reference/rpc-berachain-eth_gettransactionreceipt
    method: POST
- name: eth_getUncleCountByBlockHash
  endpoint:
    path: /reference/rpc-berachain-eth_getunclecountbyblockhash
    method: POST
- name: eth_getUncleCountByBlockNumber
  endpoint:
    path: /reference/rpc-berachain-eth_getunclecountbyblocknumber
    method: POST
- name: eth_maxPriorityFeePerGas
  endpoint:
    path: /reference/rpc-berachain-eth_maxpriorityfeepergas
    method: POST
- name: eth_sendRawTransaction
  endpoint:
    path: /reference/rpc-berachain-eth_sendrawtransaction
    method: POST
- name: trace_block
  endpoint:
    path: /reference/rpc-berachain-trace_block
    method: POST
- name: txpool_content
  endpoint:
    path: /reference/rpc-berachain-txpool_content
    method: POST
- name: txpool_inspect
  endpoint:
    path: /reference/rpc-berachain-txpool_inspect
    method: POST
- name: txpool_status
  endpoint:
    path: /reference/rpc-berachain-txpool_status
    method: POST
- name: web3_clientVersion
  endpoint:
    path: /reference/rpc-berachain-web3_clientversion
    method: POST
- name: getBlockByHash
  endpoint:
    path: /reference/rpc-haqq-eth_getblockbyhash
    method: GET
- name: getBlockNumber
  endpoint:
    path: /reference/rpc-haqq-eth_blocknumber
    method: GET
- name: getLogs
  endpoint:
    path: /reference/rpc-haqq-eth_getlogs
    method: GET
- name: getUncleCountByBlockNumber
  endpoint:
    path: /reference/rpc-haqq-eth_getunclecountbyblocknumber
    method: GET
- name: getTransactionByBlockNumberAndIndex
  endpoint:
    path: /reference/rpc-haqq-eth_gettransactionbyblocknumberandindex
    method: GET
- name: sendRawTransaction
  endpoint:
    path: /reference/rpc-haqq-eth_sendrawtransaction
    method: POST
- name: getBlockByNumber
  endpoint:
    path: /reference/rpc-haqq-eth_getblockbynumber
    method: GET
- name: getUncleCountByBlockHash
  endpoint:
    path: /reference/rpc-haqq-eth_getunclecountbyblockhash
    method: GET
- name: getBalance
  endpoint:
    path: /reference/rpc-haqq-eth_getbalance
    method: GET
- name: getBlockTransactionCountByNumber
  endpoint:
    path: /reference/rpc-haqq-eth_getblocktransactioncountbynumber
    method: GET
- name: txpoolContent
  endpoint:
    path: /reference/rpc-haqq-txpool_content
    method: GET
- name: feeHistory
  endpoint:
    path: /reference/rpc-haqq-eth_feehistory
    method: GET
- name: node_version
  endpoint:
    path: /reference/rpc-ethereum-getnodeversion
    method: GET
- name: syncing_status
  endpoint:
    path: /reference/rpc-ethereum-getsyncingstatus
    method: GET
- name: health_check
  endpoint:
    path: /reference/rpc-ethereum-gethealth
    method: GET
- name: fork_schedule
  endpoint:
    path: /reference/rpc-ethereum-getforkschedule
    method: GET
- name: spec_params
  endpoint:
    path: /reference/rpc-ethereum-getspec
    method: GET
- name: deposit_contract_address
  endpoint:
    path: /reference/rpc-ethereum-getdepositcontract
    method: GET
- name: attester_duties
  endpoint:
    path: /reference/rpc-ethereum-getattesterduties
    method: POST
- name: block_proposers_duties
  endpoint:
    path: /reference/rpc-ethereum-getproposerduties
    method: GET
- name: sync_committee_duties
  endpoint:
    path: /reference/rpc-ethereum-getsynccommitteeduties
    method: POST
- name: produce_block
  endpoint:
    path: /reference/rpc-ethereum-produceblockv3
    method: GET
- name: produce_attestation_data
  endpoint:
    path: /reference/rpc-ethereum-produceattestationdata
    method: GET
- name: aggregated_attestation
  endpoint:
    path: /reference/rpc-ethereum-getaggregatedattestation
    method: GET
- name: aggregated_attestation_v2
  endpoint:
    path: /reference/rpc-ethereum-getaggregatedattestationv2
    method: GET
- name: publish_multiple_aggregate_and_proofs
  endpoint:
    path: /reference/rpc-ethereum-publishaggregateandproofs
    method: POST
- name: publish_multiple_aggregate_and_proofs_v2
  endpoint:
    path: /reference/rpc-ethereum-publishaggregateandproofsv2
    method: POST
- name: prepare_beacon_committee_subnet
  endpoint:
    path: /reference/rpc-ethereum-preparebeaconcommitteesubnet
    method: POST
- name: subscribe_to_sync_committee_subnets
  endpoint:
    path: /reference/rpc-ethereum-preparesynccommitteesubnets
    method: POST
- name: submit_beacon_committees_selections
  endpoint:
    path: /reference/rpc-ethereum-submitbeaconcommitteeselections
    method: POST
- name: produce_sync_committee_contribution
  endpoint:
    path: /reference/rpc-ethereum-producesynccommitteecontribution
    method: GET
- name: submit_sync_committee_contributions
  endpoint:
    path: /reference/rpc-ethereum-submitsynccommitteeselections
    method: POST
- name: publish_multiple_contribution_and_proofs
  endpoint:
    path: /reference/rpc-ethereum-publishcontributionandproofs
    method: POST
- name: prepare_beacon_proposer
  endpoint:
    path: /reference/rpc-ethereum-preparebeaconproposer
    method: POST
- name: register_validator
  endpoint:
    path: /reference/rpc-ethereum-registervalidator
    method: POST
- name: get_liveness
  endpoint:
    path: /reference/rpc-ethereum-getliveness
    method: POST
- name: subscribe_to_beacon_node_events
  endpoint:
    path: /reference/rpc-ethereum-eventstream
    method: GET
- name: current_block_number
  endpoint:
    path: /v1/blocks/current
    method: GET
- name: account_balance
  endpoint:
    path: /v1/accounts/balance
    method: GET
- name: transaction
  endpoint:
    path: /v1/transactions
    method: GET
- name: Retrieve a Transaction's Effects
  endpoint:
    path: /reference/rpc-stellar-retrieveatransactionseffects
    method: GET
- name: Retrieve a Transaction's Payments
  endpoint:
    path: /reference/rpc-stellar-retrieveatransactionspayments
    method: GET
- name: List All Transactions
  endpoint:
    path: /reference/rpc-stellar-listalltransactions
    method: GET
- name: Submit a Transaction
  endpoint:
    path: /reference/rpc-stellar-submitatransaction
    method: POST
- name: Submit a Transaction Asynchronously
  endpoint:
    path: /reference/rpc-stellar-submitasynctransaction
    method: POST
- name: Generate XRP account
  endpoint:
    path: /reference/xrpwallet
    method: GET
- name: Get XRP Blockchain Information
  endpoint:
    path: /reference/xrpgetlastclosedledger
    method: GET
- name: Get actual Blockchain fee
  endpoint:
    path: /reference/xrpgetfee
    method: GET
- name: Get Account transactions
  endpoint:
    path: /reference/xrpgetaccounttx
    method: GET
- name: Get Ledger
  endpoint:
    path: /reference/xrpgetledger
    method: GET
- name: Get XRP Transaction by hash
  endpoint:
    path: /reference/xrpgettransaction
    method: GET
- name: Get Account info
  endpoint:
    path: /reference/xrpgetaccountinfo
    method: GET
- name: Get Account Balance
  endpoint:
    path: /reference/xrpgetaccountbalance
    method: GET
- name: Send XRP from address to address
  endpoint:
    path: /reference/xrptransferblockchain
    method: POST
- name: Create / Update / Delete XRP trust line
  endpoint:
    path: /reference/xrptrustlineblockchain
    method: POST
- name: Modify XRP account
  endpoint:
    path: /reference/xrpaccountsettings
    method: POST
- name: Broadcast signed XRP transaction
  endpoint:
    path: /reference/xrpbroadcast
    method: POST
- name: GetAccount
  endpoint:
    path: /rpc-tron-solidity-walletsolidity-getaccount
    method: GET
- name: GetBlockByLatestNum
  endpoint:
    path: /rpc-tron-solidity-getblockbylatestnum
    method: POST
- name: GetTransactionById
  endpoint:
    path: /rpc-tron-solidity-gettransactionbyid
    method: POST
- name: estimate_gas
  endpoint:
    path: /reference/estimategas
    method: POST
- name: deploy_nft
  endpoint:
    path: /reference/nftdeployerc721
    method: POST
- name: create_virtual_account
  endpoint:
    path: /reference/createaccount
    method: POST
- name: send_transaction
  endpoint:
    path: /reference/sendtransaction
    method: POST
- name: getAccount
  endpoint:
    path: /getAccount
    method: GET
- name: getTransactions
  endpoint:
    path: /getTransactions
    method: GET
- name: internal_transactions
  endpoint:
    path: /reference/ethgetinternaltransactionbyaddress
    method: GET
- name: smart_contract_invocation
  endpoint:
    path: /reference/ethblockchainsmartcontractinvocation
    method: POST
- name: transfer
  endpoint:
    path: /reference/ethblockchaintransfer
    method: POST
- name: transactions_by_address
  endpoint:
    path: /reference/ethgettransactionbyaddress
    method: GET
- name: transaction_count
  endpoint:
    path: /reference/ethgettransactioncount
    method: GET
- name: eth_balance
  endpoint:
    path: /reference/ethgetbalance
    method: GET
- name: block_by_hash
  endpoint:
    path: /reference/ethgetblock
    method: GET
- name: current_block_number
  endpoint:
    path: /reference/ethgetcurrentblock
    method: GET
- name: health_check
  endpoint:
    path: /reference/rpc-ethereum-gethealth
    method: GET
- name: generate_klaytn_private_key
  endpoint:
    path: /reference/klaytngenerateaddressprivatekey
    method: POST
- name: generate_klaytn_account_address_from_extended_public_key
  endpoint:
    path: /reference/klaytngenerateaddress
    method: GET
- name: generate_klaytn_wallet
  endpoint:
    path: /reference/klaytngeneratewallet
    method: GET
- name: Get current block number
  endpoint:
    path: /rpc/polygongetcurrentblock
    method: GET
- name: Get Polygon Account balance
  endpoint:
    path: /rpc/polygongetbalance
    method: GET
- name: Get Polygon transactions by address
  endpoint:
    path: /rpc/polygongettransactionbyaddress
    method: GET
- name: eth_getUncleCountByBlockHash
  endpoint:
    path: /rpc/eth_getUncleCountByBlockHash
    method: POST
- name: eth_getTransactionReceipt
  endpoint:
    path: /rpc/eth_getTransactionReceipt
    method: POST
- name: eth_getTransactionCount
  endpoint:
    path: /rpc/eth_getTransactionCount
    method: POST
- name: eth_getTransactionByHash
  endpoint:
    path: /rpc/eth_getTransactionByHash
    method: POST
- name: eth_getTransactionByBlockNumberAndIndex
  endpoint:
    path: /rpc/eth_getTransactionByBlockNumberAndIndex
    method: POST
- name: eth_getTransactionByBlockHashAndIndex
  endpoint:
    path: /rpc/eth_getTransactionByBlockHashAndIndex
    method: POST
- name: eth_getStorageAt
  endpoint:
    path: /rpc/eth_getStorageAt
    method: POST
- name: eth_getProof
  endpoint:
    path: /rpc/eth_getProof
    method: POST
- name: eth_getLogs
  endpoint:
    path: /rpc/eth_getLogs
    method: POST
- name: eth_getCode
  endpoint:
    path: /rpc/eth_getCode
    method: POST
- name: eth_getBlockTransactionCountByNumber
  endpoint:
    path: /rpc/eth_getBlockTransactionCountByNumber
    method: POST
- name: eth_getBlockTransactionCountByHash
  endpoint:
    path: /rpc/eth_getBlockTransactionCountByHash
    method: POST
- name: eth_getBlockByNumber
  endpoint:
    path: /rpc/eth_getBlockByNumber
    method: POST
- name: eth_getBlockByHash
  endpoint:
    path: /rpc/eth_getBlockByHash
    method: POST
- name: eth_getBalance
  endpoint:
    path: /rpc/eth_getBalance
    method: POST
- name: eth_gasPrice
  endpoint:
    path: /rpc/eth_gasPrice
    method: POST
- name: eth_feeHistory
  endpoint:
    path: /rpc/eth_feeHistory
    method: POST
- name: eth_estimateGas
  endpoint:
    path: /rpc/eth_estimateGas
    method: POST
- name: eth_chainId
  endpoint:
    path: /rpc/eth_chainId
    method: POST
- name: eth_call
  endpoint:
    path: /rpc/eth_call
    method: POST
- name: eth_blockNumber
  endpoint:
    path: /rpc/eth_blockNumber
    method: POST
- name: debug_traceTransaction
  endpoint:
    path: /rpc/debug_traceTransaction
    method: POST
- name: debug_traceCall
  endpoint:
    path: /rpc/debug_traceCall
    method: POST
- name: debug_traceBlockByNumber
  endpoint:
    path: /rpc/debug_traceBlockByNumber
    method: POST
- name: debug_traceBlockByHash
  endpoint:
    path: /rpc/debug_traceBlockByHash
    method: POST
- name: debug_storageRangeAt
  endpoint:
    path: /rpc/debug_storageRangeAt
    method: POST
- name: eth_getStorageAt
  endpoint:
    path: /reference/rpc-sonic-eth_getstorageat
    method: GET
- name: eth_getProof
  endpoint:
    path: /reference/rpc-sonic-eth_getproof
    method: GET
- name: eth_getLogs
  endpoint:
    path: /reference/rpc-sonic-eth_getlogs
    method: GET
- name: eth_getCode
  endpoint:
    path: /reference/rpc-sonic-eth_getcode
    method: GET
- name: eth_getBlockTransactionCountByNumber
  endpoint:
    path: /reference/rpc-sonic-eth_getblocktransactioncountbynumber
    method: GET
- name: eth_getBlockTransactionCountByHash
  endpoint:
    path: /reference/rpc-sonic-eth_getblocktransactioncountbyhash
    method: GET
- name: eth_getBlockByNumber
  endpoint:
    path: /reference/rpc-sonic-eth_getblockbynumber
    method: GET
- name: eth_getBlockByHash
  endpoint:
    path: /reference/rpc-sonic-eth_getblockbyhash
    method: GET
- name: eth_getBalance
  endpoint:
    path: /reference/rpc-sonic-eth_getbalance
    method: GET
- name: eth_gasPrice
  endpoint:
    path: /reference/rpc-sonic-eth_gasprice
    method: GET
- name: eth_feeHistory
  endpoint:
    path: /reference/rpc-sonic-eth_feehistory
    method: GET
- name: eth_estimateGas
  endpoint:
    path: /reference/rpc-sonic-eth_estimategas
    method: GET
- name: eth_chainId
  endpoint:
    path: /reference/rpc-sonic-eth_chainid
    method: GET
- name: eth_call
  endpoint:
    path: /reference/rpc-sonic-eth_call
    method: GET
- name: eth_blockNumber
  endpoint:
    path: /reference/rpc-sonic-eth_blocknumber
    method: GET
- name: debug_traceTransaction
  endpoint:
    path: /reference/rpc-sonic-debug_tracetransaction
    method: GET
- name: debug_traceCall
  endpoint:
    path: /reference/rpc-sonic-debug_tracecall
    method: GET
- name: debug_traceBlockByNumber
  endpoint:
    path: /reference/rpc-sonic-debug_traceblockbynumber
    method: GET
- name: debug_traceBlockByHash
  endpoint:
    path: /reference/rpc-sonic-debug_traceblockbyhash
    method: GET
- name: eth_getStorageAt
  endpoint:
    path: /reference/rpc-tron-eth_getstorageat
    method: GET
- name: eth_getProof
  endpoint:
    path: /reference/rpc-tron-eth_getproof
    method: GET
- name: eth_getLogs
  endpoint:
    path: /reference/rpc-tron-eth_getlogs
    method: GET
- name: eth_getCode
  endpoint:
    path: /reference/rpc-tron-eth_getcode
    method: GET
- name: eth_getBlockTransactionCountByNumber
  endpoint:
    path: /reference/rpc-tron-eth_getblocktransactioncountbynumber
    method: GET
- name: eth_getBlockTransactionCountByHash
  endpoint:
    path: /reference/rpc-tron-eth_getblocktransactioncountbyhash
    method: GET
- name: eth_getBlockByNumber
  endpoint:
    path: /reference/rpc-tron-eth_getblockbynumber
    method: GET
- name: eth_getBlockByHash
  endpoint:
    path: /reference/rpc-tron-eth_getblockbyhash
    method: GET
- name: eth_getBalance
  endpoint:
    path: /reference/rpc-tron-eth_getbalance
    method: GET
- name: eth_gasPrice
  endpoint:
    path: /reference/rpc-tron-eth_gasprice
    method: GET
- name: eth_feeHistory
  endpoint:
    path: /reference/rpc-tron-eth_feehistory
    method: GET
- name: estimate_fee
  endpoint:
    path: /estimate/fee
    method: POST
    data_selector: fee
- name: malicious_address
  endpoint:
    path: /malicious-address
    method: GET
    data_selector: invalid
- name: malicious_addresses
  endpoint:
    path: /v3/security/malicious-addresses
    method: GET
    data_selector: data
- name: supported_faucets
  endpoint:
    path: /faucets
    method: GET
- name: popular_faucets
  endpoint:
    path: /popular-faucets
    method: GET
- name: getBalance
  endpoint:
    path: /address/balance
    method: GET
    data_selector: data
- name: blockNumber
  endpoint:
    path: /rpc/block/number
    method: GET
    data_selector: blockNumber
- name: balance
  endpoint:
    path: /v3/address/balance
    method: GET
    data_selector: data
    params: {}
- name: get_all_assets
  endpoint:
    path: /v3/asset
    method: GET
    data_selector: assets
- name: get_all_transactions
  endpoint:
    path: /v3/transaction
    method: GET
    data_selector: transactions
- name: Mnemonic Derivation Paths
  endpoint:
    path: /mnemonic/derivation-paths
    method: GET
    data_selector: derivationPaths
- name: latest_finalized_block
  endpoint:
    path: ''
    method: POST
    data_selector: result
    params:
      method: eth_getBlockByNumber
      params:
      - finalized
      - true
- name: subscription
  endpoint:
    path: /v4/subscription
    method: POST
    data_selector: id
    params:
      type: mainnet
- name: subscription
  endpoint:
    path: /v4/subscription
    method: POST
    data_selector: data
    params:
      type: mainnet
- name: subscription
  endpoint:
    path: /v4/subscription
    method: POST
    data_selector: data
    params:
      type: ADDRESS_EVENT
- name: get_all_sent_notifications
  endpoint:
    path: /v3/notification
    method: GET
    data_selector: notifications
- name: webhook_notifications
  endpoint:
    path: /v4/subscription/webhook
    method: GET
    data_selector: data
- name: subscription
  endpoint:
    path: /subscription
    method: GET
    data_selector: data
    params:
      pageSize: 10
      offset: 0
- name: monitoring_subscriptions
  endpoint:
    path: /notifications/monitoring-subscriptions
    method: GET
    data_selector: subscriptions
- name: v3_subscriptions
  endpoint:
    path: /v3/subscription
    method: GET
- name: v4_subscriptions
  endpoint:
    path: /v4/subscription
    method: DELETE
    params:
      type: mainnet
- name: subscription
  endpoint:
    path: /v4/subscription
    method: PUT
    data_selector: null
    params:
      hmacSecret: c354b83b-d31b-4dda-9bab-d6a67715a1ed
- name: create_subscription
  endpoint:
    path: /v4/subscription
    method: POST
    data_selector: null
    params:
      type: ADDRESS_EVENT
      attr:
        chain: TRON
        address: TVf3RVEtzKtMfqQaCAWs9d4HKbC4bZGaWP
        url: https://eo1tfamse2vfgpm.m.pipedream.net
- name: notifications
  endpoint:
    path: /reference/createsubscription
    method: POST
- name: notifications_v4
  endpoint:
    path: /reference/createsubscriptionv4
    method: POST
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: notification
  endpoint:
    path: /notifications
    method: POST
    data_selector: notifications
    params: {}
- name: v3_notifications
  endpoint:
    path: /reference/createsubscription
    method: POST
- name: v4_notifications
  endpoint:
    path: /reference/createsubscriptionv4
    method: POST
- name: subscription
  endpoint:
    path: /subscription
    method: GET
    data_selector: data
- name: subscriptions
  endpoint:
    path: /subscription
    method: GET
    data_selector: subscriptions
    params:
      type: mainnet
- name: mempool_notifications
  endpoint:
    path: /reference/updatesubscription
    method: GET
    data_selector: webhookBody
    params: {}
- name: btc_confirmations
  endpoint:
    path: /v3/utxo/confirmations
    method: GET
    data_selector: data
    params: {}
- name: transaction_details
  endpoint:
    path: /v3/bitcoin/transaction/{TXID}
    method: GET
    data_selector: blockNumber
    params: {}
- name: block_hash
  endpoint:
    path: /v3/bitcoin/block/hash/{blockNumber}
    method: GET
    data_selector: hash
    params: {}
- name: block_details
  endpoint:
    path: /reference/rpc-btc-getblock
    method: POST
    data_selector: result
    params: {}
- name: ethereum_balance
  endpoint:
    path: /v3/ethereum/address/balance
    method: GET
    data_selector: data
    params: {}
- name: bitcoin_balance
  endpoint:
    path: /v3/bitcoin/address/balance
    method: GET
    data_selector: data
    params: {}
- name: get_all_assets
  endpoint:
    path: /v3/ledger/asset
    method: GET
    data_selector: assets
    params: {}
- name: get_all_transactions
  endpoint:
    path: /v3/wallet/transactions
    method: GET
- name: wallet_transactions
  endpoint:
    path: /v3/address/transactions
    method: GET
    data_selector: data
    params: {}
- name: address_transactions
  endpoint:
    path: /getAddressTransactions
    method: GET
    data_selector: data
    params: {}
- name: fungible_tokens
  endpoint:
    path: /get-all-fungible-tokens
    method: GET
    data_selector: tokens
    params: {}
- name: fungible_tokens
  endpoint:
    path: /v4/data/balances
    method: GET
    data_selector: data
    params:
      chain: ethereum
      addresses: '0x78E851C35326c9296485E9720D85CB3Bd153b428'
      tokenTypes: fungible
- name: fungible_token_history
  endpoint:
    path: /v3/blockchain/data/fungible-token-history
    method: GET
    data_selector: data
- name: fungible_token_transactions
  endpoint:
    path: /v4/data/transactions
    method: GET
    data_selector: data
    params:
      transactionTypes: fungible
- name: get_all_fungible_tokens
  endpoint:
    path: /docs/get-all-fungible-tokens-the-wallet-holds
    method: GET
    data_selector: data
    params: {}
- name: get_metadata_of_fungible_token
  endpoint:
    path: /docs/get-metadata-of-a-fungible-token
    method: GET
    data_selector: data
    params: {}
- name: fungible_token_metadata
  endpoint:
    path: /v3/tokens/metadata
    method: GET
    data_selector: data
- name: token_metadata
  endpoint:
    path: /v4/data/tokens
    method: GET
    data_selector: data
    params:
      tokenAddress: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'
      chain: ethereum
- name: nfts
  endpoint:
    path: /v3/nft/wallet
    method: GET
    data_selector: data
    params: {}
- name: nft_balance
  endpoint:
    path: /v4/data/balances
    method: GET
    data_selector: data
    params:
      chain: ethereum
      addresses: '0x727EA45B2EB6abb2badD3dC7106d146E0Dc0450d'
      tokenTypes: nft
      excludeMetadata: 'true'
      pageSize: '50'
      offset: '0'
- name: nft_address_balance
  endpoint:
    path: /get_all_nfts_wallet_holds
    method: GET
    data_selector: data
    params: {}
- name: nfts_in_collection
  endpoint:
    path: /v3/nft/collection
    method: GET
    data_selector: data
    params: {}
- name: nft_collection
  endpoint:
    path: /collections
    method: GET
    data_selector: ''
    params:
      chain: ethereum
      collectionAddresses: '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'
      excludeMetadata: 'false'
      pageSize: 50
      offset: 0
- name: get_all_nfts
  endpoint:
    path: /docs/get-all-nfts-the-wallet-holds
    method: GET
    data_selector: data
    params: {}
- name: nft_transactions
  endpoint:
    path: /v4/data/transactions
    method: GET
    data_selector: data
    params: {}
- name: nft_history
  endpoint:
    path: /nft/history
    method: GET
    data_selector: records
- name: nft_transaction
  endpoint:
    path: /nft/transactions
    method: GET
    data_selector: data
    params: {}
- name: nft_transactions
  endpoint:
    path: /v4/data/transactions
    method: GET
    data_selector: data
    params: {}
- name: nft_history
  endpoint:
    path: /v3/nft/history
    method: GET
    data_selector: data
    params: {}
- name: nft_transaction
  endpoint:
    path: /nft/transactions
    method: GET
    data_selector: data
- name: retrieve_owner_of_nft
  endpoint:
    path: /nft/owner
    method: GET
- name: nft_owner
  endpoint:
    path: /v4/data/owners
    method: GET
    data_selector: data
    params:
      tokenAddress: '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'
      tokenId: '1'
      chain: ethereum
- name: nft_owner_check
  endpoint:
    path: /v4/data/owners/address
    method: GET
    data_selector: data
    params: {}
- name: check_nft_ownership
  endpoint:
    path: /v3/nft/ownership
    method: GET
    data_selector: data
    params: {}
- name: nft_metadata
  endpoint:
    path: /v3/nft/{id}/metadata
    method: GET
    data_selector: metadata
- name: nft_metadata
  endpoint:
    path: /v4/data/metadata
    method: GET
    data_selector: data
    params:
      chain: ethereum
- name: wallet_operations
  endpoint:
    path: /docs/wallet-operations
    method: GET
- name: fee_estimation
  endpoint:
    path: /docs/fee-estimation
    method: GET
- name: exchange_rate
  endpoint:
    path: /docs/exchange-rate
    method: GET
- name: transaction_management
  endpoint:
    path: /docs/transaction-management
    method: GET
- name: storage
  endpoint:
    path: /docs/storage
    method: GET
- name: contract_deployment
  endpoint:
    path: /docs/contract-deployment
    method: GET
- name: wallet_operations
  endpoint:
    path: /wallet-operations
    method: GET
    data_selector: operations
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: txId
- name: transaction_details
  endpoint:
    path: /transaction/{transactionHash}
    method: GET
    data_selector: transactionHash
- name: wallet
  endpoint:
    path: /v3/ethereum/wallet
    method: POST
    data_selector: xpub
    params: {}
- name: private_key
  endpoint:
    path: /v3/ethereum/wallet/priv
    method: POST
    data_selector: key
    params: {}
- name: address
  endpoint:
    path: /v3/ethereum/address/{xpub}/{index}
    method: GET
    data_selector: address
    params: {}
- name: balance
  endpoint:
    path: /v3/ethereum/account/balance/{address}
    method: GET
    data_selector: balance
    params: {}
- name: gas_estimate
  endpoint:
    path: /v3/ethereum/gas
    method: POST
    data_selector: gasLimit
    params: {}
- name: transaction_count
  endpoint:
    path: /v3/ethereum/transaction/count/{address}
    method: GET
    data_selector: nonce
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: txId
- name: transaction_details
  endpoint:
    path: /transaction/{transactionHash}
    method: GET
    data_selector: transactionHash
- name: wallet
  endpoint:
    path: /wallet
    method: GET
    data_selector: xpub
    params: {}
- name: private_key
  endpoint:
    path: /wallet/priv
    method: POST
    data_selector: key
    params: {}
- name: address
  endpoint:
    path: /address/{xpub}/{index}
    method: GET
    data_selector: address
    params: {}
- name: balance
  endpoint:
    path: /account/balance/{address}
    method: GET
    data_selector: celo
    params: {}
- name: gas
  endpoint:
    path: /gas
    method: POST
    data_selector: gasLimit
    params: {}
- name: nonce
  endpoint:
    path: /transaction/count/{address}
    method: GET
    data_selector: nonce
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: txId
- name: transaction_details
  endpoint:
    path: /transaction/{transactionHash}
    method: GET
    data_selector: null
- name: generate_wallet
  endpoint:
    path: /wallet
    method: POST
    data_selector: xpub
    params: {}
- name: generate_private_key
  endpoint:
    path: /wallet/priv
    method: POST
    data_selector: key
    params: {}
- name: generate_address
  endpoint:
    path: /address/{xpub}/{index}
    method: GET
    data_selector: address
    params: {}
- name: check_balance
  endpoint:
    path: /account/balance/{address}
    method: GET
    data_selector: balance
    params: {}
- name: estimate_gas
  endpoint:
    path: /gas
    method: POST
    data_selector: gasLimit
    params: {}
- name: get_transaction_count
  endpoint:
    path: /transaction/count/{address}
    method: GET
    data_selector: nonce
    params: {}
- name: generate_wallet
  endpoint:
    path: /v3/bitcoin/wallet
    method: POST
    data_selector: mnemonic
- name: generate_private_key
  endpoint:
    path: /v3/bitcoin/wallet/priv
    method: POST
    data_selector: key
- name: generate_address
  endpoint:
    path: /v3/bitcoin/address/{xpub}/{index}
    method: GET
    data_selector: address
- name: check_balance
  endpoint:
    path: /v3/bitcoin/address/balance/{address}
    method: GET
    data_selector: incoming
- name: utxos
  endpoint:
    path: /v4/data/utxos
    method: GET
    data_selector: UTXOs
    params:
      chain: bitcoin-testnet
- name: estimate_fee
  endpoint:
    path: /v3/blockchain/estimate
    method: GET
    data_selector: fee
    params: {}
- name: sign_and_broadcast_transaction
  endpoint:
    path: /v3/bitcoin/transaction
    method: POST
    data_selector: transaction
    params: {}
- name: transaction_details
  endpoint:
    path: /v3/bitcoin/transaction/{txId}
    method: GET
    data_selector: transaction_details
    params: {}
- name: address_generation
  endpoint:
    path: /generateAddress
    method: POST
    data_selector: address
- name: transaction_signing
  endpoint:
    path: /signAndBroadcast
    method: POST
    data_selector: txHash
- name: transaction
  endpoint:
    path: /transaction/{transaction_hash}
    method: GET
    data_selector: ret
    params: {}
- name: wallet
  endpoint:
    path: /v3/tron/wallet
    method: POST
    data_selector: mnemonic
    params: {}
- name: private_key
  endpoint:
    path: /v3/tron/wallet/priv
    method: POST
    data_selector: key
    params: {}
- name: address
  endpoint:
    path: /v3/tron/address/{xpub}/{index}
    method: GET
    data_selector: address
    params: {}
- name: account_balance
  endpoint:
    path: /v3/tron/account/{address}
    method: GET
    data_selector: balance
    params: {}
- name: transaction
  endpoint:
    path: /v3/tron/transaction
    method: POST
    data_selector: txId
    params: {}
- name: mnemonic_generation
  endpoint:
    path: /generate/mnemonic
    method: POST
    data_selector: mnemonic
    params: {}
- name: private_key_derivation
  endpoint:
    path: /derive/private_key
    method: POST
    data_selector: private_key
    params: {}
- name: transaction_signing
  endpoint:
    path: /sign/transaction
    method: POST
    data_selector: transaction
    params: {}
- name: get_wallet
  endpoint:
    path: /wallet-provider-metamask
    method: GET
    data_selector: defaultAccount
- name: assets
  endpoint:
    path: /v3/asset
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v3/transaction
    method: GET
    data_selector: data
    params: {}
- name: transfer_nft
  endpoint:
    path: /v3/nft/transfer
    method: POST
    data_selector: data
    params: {}
- name: nft_transfer
  endpoint:
    path: /nft/transfer
    method: POST
    data_selector: txId
    params:
      recipient: '0x4675C7e5BaAFBFFbca748158bEcBA61ef3b0a263'
      tokenId: '123'
      tokenAddress: '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'
- name: nft_collection
  endpoint:
    path: /createNftCollection
    method: POST
    data_selector: txId
    params: {}
- name: createFungibleToken
  endpoint:
    path: /create-fungible-token
    method: POST
    data_selector: transaction
    params: {}
- name: create_fungible_token
  endpoint:
    path: /create-your-fungible-token
    method: POST
- name: erc1155_nft_collection
  endpoint:
    path: /v3/erc1155/nft/collection
    method: POST
    data_selector: txId
    params: {}
- name: transfer_fungible_tokens
  endpoint:
    path: /transfer/fungible-tokens
    method: POST
- name: usdt_transaction
  endpoint:
    path: /transfer/erc20
    method: POST
    data_selector: txId
    params:
      recipient: '0x4675C7e5BaAFBFFbca748158bEcBA61ef3b0a263'
      amount: '1.5'
      tokenAddress: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
- name: approve_transaction
  endpoint:
    path: /approve
    method: POST
    data_selector: txId
    params:
      spender: '0x4675C7e5BaAFBFFbca748158bEcBA61ef3b0a263'
      amount: '1.5'
      tokenAddress: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
- name: transaction
  endpoint:
    path: /prepare-transaction
    method: POST
    data_selector: txId
    params: {}
- name: transaction
  endpoint:
    path: /transaction/{transaction_hash}
    method: GET
    data_selector: transaction
    params: {}
- name: generate_wallet
  endpoint:
    path: /wallet
    method: POST
    data_selector: address
    params: {}
- name: generate_address
  endpoint:
    path: /wallet/{priv}
    method: GET
    data_selector: address
    params: {}
- name: check_balance
  endpoint:
    path: /account/{address}
    method: GET
    data_selector: balance
    params: {}
- name: sign_and_broadcast_transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: txId
    params: {}
- name: generate_wallet
  endpoint:
    path: /wallet
    method: POST
    data_selector: response
    params: {}
- name: check_balance
  endpoint:
    path: /account/balance/{address}
    method: GET
    data_selector: balance
    params: {}
- name: send_sol
  endpoint:
    path: /transaction
    method: POST
    data_selector: txId
    params: {}
- name: get_transaction_details
  endpoint:
    path: /transaction/{txId}
    method: GET
    data_selector: response
    params: {}
- name: get_all_fungible_tokens
  endpoint:
    path: /v3/tokens
    method: GET
    data_selector: tokens
- name: get_token_balance
  endpoint:
    path: /v3/tokens/balance
    method: GET
    data_selector: balance
- name: create_fungible_token
  endpoint:
    path: /v3/token
    method: POST
    data_selector: token
    params: {}
- name: get_contract_address
  endpoint:
    path: /v3/blockchain/sc/address/ETH/{transaction_hash}
    method: GET
    data_selector: contractAddress
- name: mint_tokens
  endpoint:
    path: /v3/blockchain/token/mint
    method: POST
    data_selector: txId
- name: burn_tokens
  endpoint:
    path: /v3/blockchain/token/burn
    method: POST
    data_selector: txId
- name: generate_wallet
  endpoint:
    path: /ethereum/wallet/
    method: GET
    data_selector: xpub
- name: generate_address
  endpoint:
    path: /ethereum/address/{xpub}/{index}
    method: GET
    data_selector: address
- name: generate_private_key
  endpoint:
    path: /ethereum/wallet/priv
    method: POST
    data_selector: key
- name: get_balance
  endpoint:
    path: /ethereum/account/balance/{address}
    method: GET
    data_selector: balance
- name: estimate_fee
  endpoint:
    path: /blockchain/estimate
    method: POST
    data_selector: gasLimit
    params:
      chain: ETH
      type: DEPLOY_ERC20
      sender: '{address}'
- name: deploy_token
  endpoint:
    path: /blockchain/token/deploy
    method: POST
    data_selector: txId
- name: get_balance_native
  endpoint:
    path: /v3/ethereum/account/balance/{address}
    method: GET
    data_selector: balance
- name: get_balance_token
  endpoint:
    path: /v4/data/balances
    method: GET
    data_selector: result
- name: estimate_transfer_fee
  endpoint:
    path: /v3/blockchain/estimate
    method: POST
    data_selector: gasPrice
- name: get_nonce
  endpoint:
    path: /v3/ethereum/transaction/count/{address}
    method: GET
    data_selector: nonce
- name: transfer_transaction
  endpoint:
    path: /v3/blockchain/token/transaction
    method: POST
    data_selector: txId
- name: transaction_details
  endpoint:
    path: /v4/data/transactions/hash
    method: GET
    data_selector: '[].hash'
    params:
      chain: ethereum-sepolia
- name: create_fungible_token
  endpoint:
    path: /v3/tokens/fungible
    method: POST
- name: generate_wallet
  endpoint:
    path: /wallet
    method: GET
    data_selector: response
- name: get_balance
  endpoint:
    path: /account/balance/{address}
    method: GET
    data_selector: balance
- name: deploy_token
  endpoint:
    path: /blockchain/token/deploy
    method: POST
    data_selector: response
    params:
      chain: SOL
      supply: '200000'
      digits: 6
      address: BWmkpRBdW6EvQcsQLEaAbRMvn3VxXxo83su2HZT3fPqh
      from: BWmkpRBdW6EvQcsQLEaAbRMvn3VxXxo83su2HZT3fPqh
- name: account_balance
  endpoint:
    path: /v3/solana/account/balance/{address}
    method: GET
    data_selector: balance
    params: {}
- name: token_transaction
  endpoint:
    path: /v3/blockchain/token/transaction
    method: POST
    data_selector: txId
    params: {}
- name: transaction
  endpoint:
    path: /v3/solana/transaction/{transactionId}
    method: GET
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /transaction/{transaction_id}
    method: GET
    data_selector: ret
    params: {}
- name: get_tron_address
  endpoint:
    path: /v3/tron/account/{address}
    method: GET
    data_selector: ''
    params: {}
- name: send_trc10
  endpoint:
    path: /v3/tron/trc10/transaction
    method: POST
    data_selector: ''
    params: {}
- name: send_trc20
  endpoint:
    path: /v3/tron/trc20/transaction
    method: POST
    data_selector: ''
    params: {}
- name: token_balance
  endpoint:
    path: /v4/data/balances
    method: GET
    data_selector: result
    params:
      chain: celo-testnet
      addresses: '0xa57628beccedc2089acd8ed5399398cb74d856f0'
      offset: 0
- name: get_token_balance
  endpoint:
    path: /v3/erc20/balance
    method: GET
    data_selector: balance
- name: token_balance
  endpoint:
    path: /jsonrpc
    method: POST
    data_selector: result
    params: {}
- name: balance_of
  endpoint:
    path: ''
    method: POST
    data_selector: result
    params:
      jsonrpc: '2.0'
      method: eth_call
      params:
      - to: '0xa614f803B6FD780986A42c78Ec9c7f77e6DeD13C'
        data: '0x70a082310000000000000000000000415a67fa7cc56bd6d043a98e17d329c1dc9e14753f'
      - latest
      id: 1
- name: transfer_tokens
  endpoint:
    path: /v3/tron/trc20/transaction
    method: POST
    data_selector: null
    params: {}
- name: token_decimals
  endpoint:
    path: /v3/blockchain/token/transaction
    method: POST
    data_selector: result
    params: {}
- name: getTokenSupply
  endpoint:
    path: /v3/blockchain/token/supply
    method: POST
    data_selector: result
    params: {}
- name: nft_collection
  endpoint:
    path: /nft/collection
    method: GET
    data_selector: data
    params: {}
- name: nft_metadata
  endpoint:
    path: /nft/metadata
    method: GET
    data_selector: data
    params: {}
- name: add_minter
  endpoint:
    path: /v3/nft/mint/add
    method: POST
    data_selector: txId
- name: estimate_gas_fees
  endpoint:
    path: /v3/blockchain/estimate
    method: POST
    data_selector: gasLimit
    params: {}
- name: check_nonce
  endpoint:
    path: /v3/celo/transaction/count/{sender_address}
    method: GET
    data_selector: nonce
    params: {}
- name: deploy_smart_contract
  endpoint:
    path: /v3/nft/deploy
    method: POST
    data_selector: txId
    params: {}
- name: retrieve_smart_contract_address
  endpoint:
    path: /v3/blockchain/sc/address/CELO/{transaction_hash}
    method: GET
    data_selector: contractAddress
    params: {}
- name: create_nft_collection
  endpoint:
    path: /v4/contract/deploy
    method: POST
    data_selector: data
    params: {}
- name: store_ipfs
  endpoint:
    path: /v3/ipfs
    method: POST
    data_selector: ipfsHash
- name: mint_nft
  endpoint:
    path: /v3/nft/mint
    method: POST
    data_selector: url
- name: mint_nft
  endpoint:
    path: /nft/mint/
    method: POST
    data_selector: txId
    params: {}
- name: upload_metadata
  endpoint:
    path: /v3/ipfs
    method: POST
    data_selector: ipfsHash
- name: estimate_gas_fees
  endpoint:
    path: /v3/blockchain/estimate
    method: POST
    data_selector: gasLimit
    params: {}
- name: check_nonce
  endpoint:
    path: /v3/celo/transaction/count/{address}
    method: GET
    data_selector: response
    params: {}
- name: nft_mint
  endpoint:
    path: /v3/nft/mint
    method: POST
    data_selector: data
    params: {}
- name: nft_receive
  endpoint:
    path: /v3/algorand/asset/receive
    method: POST
    data_selector: data
    params: {}
- name: nft_transfer
  endpoint:
    path: /v3/nft/transaction
    method: POST
    data_selector: data
    params: {}
- name: generate_flow_wallet
  endpoint:
    path: /v3/flow/wallet
    method: GET
    data_selector: mnemonic,xpub
- name: generate_flow_address
  endpoint:
    path: /v3/flow/pubkey/{xpub}/{index}
    method: GET
    data_selector: address
- name: generate_flow_private_key
  endpoint:
    path: /v3/flow/wallet/priv
    method: POST
    data_selector: privateKey
- name: deploy_nft_smart_contract
  endpoint:
    path: /v3/nft/deploy/
    method: POST
    data_selector: txId
- name: get_smart_contract_address
  endpoint:
    path: /v3/blockchain/sc/address/FLOW/{txId}
    method: GET
    data_selector: contractAddress
- name: upload_metadata
  endpoint:
    path: /v3/ipfs
    method: POST
    data_selector: ipfsHash
- name: mint_nft
  endpoint:
    path: /v3/nft/mint/
    method: POST
    data_selector: txId
    params: {}
- name: transfer_nft
  endpoint:
    path: /v3/nft/transaction/
    method: POST
    data_selector: txId
    params: {}
- name: get_nft_balance
  endpoint:
    path: /v3/nft/balance/FLOW/{contract_address}/{account}
    method: GET
    data_selector: tokenIds
- name: get_nft_metadata
  endpoint:
    path: /v3/nft/metadata/FLOW/{contract_address}/{token_id}
    method: GET
    data_selector: data
- name: mint_nft
  endpoint:
    path: /v3/nft/mint/
    method: POST
    data_selector: nftAccountAddress
    params: {}
- name: transfer_nft
  endpoint:
    path: /v3/nft/transaction
    method: POST
    data_selector: txId
    params: {}
- name: nft_collection
  endpoint:
    path: /v3/nft/collection
    method: GET
    data_selector: data
- name: nft_history
  endpoint:
    path: /v3/nft/history
    method: GET
    data_selector: data
- name: nft_metadata
  endpoint:
    path: /v3/nft/metadata
    method: GET
    data_selector: data
- name: create_nft_marketplace
  endpoint:
    path: /reference/generatemarketplace
    method: POST
    data_selector: response
    params: {}
- name: deploy_multitoken
  endpoint:
    path: /v3/multitoken/deploy/
    method: POST
    data_selector: txId
    params: {}
- name: get_contract_address
  endpoint:
    path: /v3/blockchain/sc/address/CELO/{txId}
    method: GET
    data_selector: contractAddress
    params: {}
- name: create_multi_token_nft_collection
  endpoint:
    path: /v4/contract/deploy
    method: POST
    data_selector: data
    params:
      contractType: multitoken
      chain: ethereum-sepolia
      owner: '0x727ea45b2eb6abb2badd3dc7106d146e0dc0450d'
- name: mint_multi_token
  endpoint:
    path: /v3/multitoken/mint/
    method: POST
- name: mint_multi_token_batch
  endpoint:
    path: /v3/multitoken/mint/batch
    method: POST
- name: transfer_multi_token
  endpoint:
    path: /v3/multitoken/transaction/
    method: POST
    data_selector: txId
    params: {}
- name: transfer_multi_token_batch
  endpoint:
    path: /v3/multitoken/transaction/batch
    method: POST
    data_selector: txId
    params: {}
- name: transferFrom
  endpoint:
    path: /invoke
    method: POST
    data_selector: result
- name: deploy_smart_contract
  endpoint:
    path: /v3/blockchain/token/deploy
    method: POST
    data_selector: txId
- name: read_smart_contract
  endpoint:
    path: /v3/blockchain/smartcontract/invoke
    method: POST
    data_selector: data
- name: write_smart_contract
  endpoint:
    path: /v3/blockchain/smartcontract/invoke
    method: POST
    data_selector: txId
- name: contract_address
  endpoint:
    path: /v3/blockchain/contract-address
    method: GET
    data_selector: data
- name: contract_address
  endpoint:
    path: /getContractAddress
    method: GET
- name: token_address
  endpoint:
    path: /getTokenAddress
    method: GET
- name: contract_address
  endpoint:
    path: /v3/blockchain/sc/address/MATIC/{transaction_hash}
    method: GET
    data_selector: contractAddress
    params: {}
- name: transaction
  endpoint:
    path: /v3/ethereum/transaction
    method: POST
    data_selector: ''
    params: {}
- name: fee_estimate
  endpoint:
    path: /v4/blockchainOperations/gas
    method: POST
    data_selector: ''
    params: {}
- name: fee_estimate
  endpoint:
    path: /blockchain/fee/BTC
    method: GET
    data_selector: fast
    params: {}
- name: rpc_node_fee_estimate
  endpoint:
    path: /blockchain/node/BTC/
    method: POST
    data_selector: result.feerate
    params:
      jsonrpc: '1.0'
      id: curltext
      method: estimatesmartfee
      params:
      - 2
- name: estimate_fee
  endpoint:
    path: /estimatefee
    method: POST
    data_selector: result
- name: fee_estimate
  endpoint:
    path: /blockchain/fee/LTC
    method: GET
    data_selector: result
    params: {}
- name: node_fee_estimate
  endpoint:
    path: /blockchain/node/LTC/
    method: POST
    data_selector: result
    params: {}
- name: current_fee
  endpoint:
    path: /fee/current
    method: GET
    data_selector: data.gasPrice
    params: {}
- name: Common Relay Fees for UTXO-Based Blockchains
  endpoint:
    path: /docs/common-relay-fees-for-utxo-based-blockchains
    method: GET
    data_selector: table
    params: {}
- name: exchange_rate
  endpoint:
    path: /v3/exchange-rates
    method: GET
    data_selector: data
- name: exchange_rate
  endpoint:
    path: /getExchangeRate
    method: GET
    data_selector: current_rate
    params: {}
- name: exchange_rate
  endpoint:
    path: /v3/rate
    method: GET
    data_selector: data
    params: {}
- name: current_exchange_rates
  endpoint:
    path: /get/exchange/rates
    method: GET
    data_selector: rates
- name: current_rates
  endpoint:
    path: /v3/crypto/rates
    method: GET
    data_selector: data
- name: exchange_rate
  endpoint:
    path: /v1/exchange-rates
    method: GET
    data_selector: rates
- name: store_log_record
  endpoint:
    path: /reference/storelog
    method: POST
- name: get_log_record
  endpoint:
    path: /reference/getlog
    method: GET
- name: upload_file
  endpoint:
    path: /ipfs/uploadFile
    method: POST
    data_selector: data
    params: {}
- name: account
  endpoint:
    path: /v3/ledger/account
    method: POST
    data_selector: currency
    params: {}
- name: ledger_account
  endpoint:
    path: /v3/ledger/account
    method: POST
    data_selector: currency
    params: {}
- name: create_account
  endpoint:
    path: /v3/ledger/account
    method: POST
    data_selector: ''
    params: {}
- name: assign_deposit_address
  endpoint:
    path: /v3/offchain/account/{id}/address/{address}
    method: POST
    data_selector: ''
    params: {}
- name: xrp_account
  endpoint:
    path: /v3/xrp/account
    method: GET
    data_selector: address
- name: create_xrp_virtual_account
  endpoint:
    path: /v3/ledger/account
    method: POST
    data_selector: xpub
    params:
      currency: XRP
- name: generate_deposit_address
  endpoint:
    path: /v3/offchain/account/{Virtual_Account_ID}/address
    method: POST
    data_selector: address
- name: create_virtual_currency
  endpoint:
    path: /ledger/virtualCurrency
    method: POST
    data_selector: balance
    params: {}
- name: mint_virtual_currency
  endpoint:
    path: /ledger/virtualCurrency/mint
    method: PUT
    data_selector: reference
    params: {}
- name: revoke_virtual_currency
  endpoint:
    path: /ledger/virtualCurrency/revoke
    method: PUT
    data_selector: reference
    params: {}
- name: transactions
  endpoint:
    path: /ledger/transaction/account
    method: POST
    data_selector: transactions
    params:
      pageSize: 50
- name: generate_wallet
  endpoint:
    path: /v3/bitcoin/wallet
    method: GET
    data_selector: mnemonic, xpub
    params: {}
- name: generate_deposit_address
  endpoint:
    path: /v3/offchain/account/{Virtual_Account_ID}/address
    method: POST
    data_selector: address
    params: {}
- name: assign_address
  endpoint:
    path: /v3/offchain/account/{id}/address/{address}
    method: POST
    data_selector: address
- name: deposit_addresses
  endpoint:
    path: /v3/offchain/account/{account_id}/address
    method: GET
    data_selector: ''
- name: deposit_addresses
  endpoint:
    path: /v3/va/deposit-address
    method: GET
    data_selector: data
- name: find_all_deposits
  endpoint:
    path: /v3/va/deposit
    method: GET
- name: deposits
  endpoint:
    path: /v3/ledger/deposits
    method: GET
    data_selector: records
    params:
      pageSize: 50
      sort: desc
      accountId: '{Virtual_Account_Id}'
- name: get_account_by_account_id
  endpoint:
    path: /reference/getaccountbyaccountid
    method: GET
- name: get_all_deposit_addresses
  endpoint:
    path: /reference/getalldepositaddresses
    method: GET
- name: polygon_transfer
  endpoint:
    path: /reference/polygontransfer
    method: POST
- name: create_account
  endpoint:
    path: /reference/createaccount
    method: POST
- name: generate_deposit_address
  endpoint:
    path: /reference/generatedepositaddress
    method: POST
- name: deactivate_account
  endpoint:
    path: /reference/deactivateaccount
    method: POST
- name: Add Token to Virtual Account
  endpoint:
    path: /v3/offchain/token/ETH
    method: POST
    data_selector: accountId
    params: {}
- name: Verify Virtual Account
  endpoint:
    path: /v3/ledger/account/{accountId}
    method: GET
    data_selector: balance
    params: {}
- name: Register New Token
  endpoint:
    path: /v3/offchain/token/{symbol}/{tokenAddress}
    method: POST
    data_selector: ''
    params: {}
- name: ledger_account
  endpoint:
    path: /ledger/account
    method: POST
    data_selector: response
- name: generate_deposit_address
  endpoint:
    path: /offchain/account/{account_id}/address
    method: POST
    data_selector: response
- name: trade
  endpoint:
    path: /trade
    method: POST
    data_selector: id
- name: blockage
  endpoint:
    path: /ledger/account/block/{accountId}
    method: GET
    data_selector: ''
- name: open_trades
  endpoint:
    path: /va/listing-open-trades
    method: GET
    data_selector: trades
- name: buy_trades
  endpoint:
    path: /v3/trade/buy
    method: POST
    data_selector: records
    params:
      pageSize: 50
      offset: 0
      tradeType: BUY
- name: closed_trades
  endpoint:
    path: /v3/trade/history
    method: POST
    data_selector: '[]'
    params: {}
- name: order_book
  endpoint:
    path: /va/order-book/future-trade/sealDate
    method: GET
    data_selector: data
    params: {}
- name: send_transaction
  endpoint:
    path: /v3/ledger/transaction
    method: POST
    data_selector: reference
- name: payment_log
  endpoint:
    path: /v3/ledger/transaction/reference/{reference}
    method: GET
    data_selector: '[]'
- name: payment_log
  endpoint:
    path: /v3/va/payment/log
    method: GET
    data_selector: data
- name: store_withdrawal
  endpoint:
    path: /reference/storewithdrawal
    method: POST
- name: complete_withdrawal
  endpoint:
    path: /reference/completewithdrawal
    method: POST
- name: withdrawal
  endpoint:
    path: /v3/offchain/withdrawal/{Withdrawal_ID}
    method: DELETE
    data_selector: null
    params:
      revert: 'true'
- name: assign_gas_pump_address
  endpoint:
    path: /v3/offchain/account/{id}/address/{address}
    method: POST
    data_selector: address
- name: withdraw_from_gas_pump
  endpoint:
    path: /v3/gas-pump/withdraw
    method: POST
    data_selector: transaction
    params: {}
- name: transfer
  endpoint:
    path: /v3/blockchain/sc/custodial/transfer
    method: POST
    data_selector: txId
- name: withdrawal
  endpoint:
    path: /v3/offchain/withdrawal
    method: POST
    data_selector: reference
    params: {}
- name: complete_withdrawal
  endpoint:
    path: /v3/offchain/withdrawal/{id}/{txId}
    method: PUT
    data_selector: id
- name: cancel_withdrawal
  endpoint:
    path: /v3/offchain/withdrawal
    method: DELETE
    data_selector: result
- name: account_details
  endpoint:
    path: /v3/account
    method: GET
    data_selector: data
- name: accounts_by_customer_id
  endpoint:
    path: /v3/ledger/account/customer/{customerId}
    method: GET
    data_selector: '[]'
    params:
      pageSize: 50
- name: account_by_account_id
  endpoint:
    path: /v3/ledger/account/{accountId}
    method: GET
    data_selector: '[]'
- name: accounts_within_va_ledger
  endpoint:
    path: /v3/ledger/account
    method: GET
    data_selector: '[]'
- name: deposit_addresses
  endpoint:
    path: /v3/ledger/account/{accountId}/deposit-addresses
    method: GET
    data_selector: '[]'
- name: transactions
  endpoint:
    path: /v3/transaction
    method: GET
    data_selector: transactions
    params: {}
- name: withdrawals
  endpoint:
    path: /v3/withdrawal
    method: GET
    data_selector: withdrawals
    params: {}
- name: transactions_by_customer_id
  endpoint:
    path: /v3/ledger/transaction/customer
    method: POST
    params:
      pageSize: 50
      offset: 0
- name: transactions
  endpoint:
    path: /v3/ledger/transaction/ledger
    method: POST
    params:
      pageSize: 50
      offset: 0
- name: withdrawals
  endpoint:
    path: /v3/offchain/withdrawal
    method: GET
    params:
      currency: BTC
      status: InProgress
      pageSize: 50
      offset: 0
- name: block_funds
  endpoint:
    path: /v3/ledger/account/block/{account_id}
    method: POST
    data_selector: id
    params:
      amount: amount
      type: DEBIT_CARD_OP
      description: description
- name: get_account_by_id
  endpoint:
    path: /v3/ledger/account/{account_id}
    method: GET
    data_selector: currency
    params: {}
- name: get_blocked_amounts
  endpoint:
    path: /v3/ledger/account/block/{account_id}
    method: GET
    data_selector: ''
    params:
      pageSize: 50
- name: unblock_funds
  endpoint:
    path: /v3/ledger/account/block/{blockage_id}
    method: DELETE
    data_selector: ''
    params: {}
- name: Deleting Unused Virtual Accounts
  endpoint:
    path: /va/deleting-unused-virtual-accounts
    method: DELETE
- name: subscription
  endpoint:
    path: /v3/subscription
    method: POST
    data_selector: id
    params: {}
- name: precalculate_gas_pump_addresses
  endpoint:
    path: /v3/gas-pump
    method: POST
    data_selector: records
    params:
      chain: ETH
      owner: '0xc1eb70a67e8fd5ff1863c22d4f2856cc7953a7d2'
      from: 0
      to: 3
- name: activate_gas_pump
  endpoint:
    path: /gas-pump/activate
    method: POST
    data_selector: txId
- name: activated_addresses
  endpoint:
    path: /gas-pump/address/{chain}/{txId}
    method: GET
    data_selector: valid
- name: check_activation
  endpoint:
    path: /gas-pump/activated/{chain}/{owner}/{index}
    method: GET
    data_selector: activated
- name: transfer_out
  endpoint:
    path: /blockchain/sc/custodial/transfer
    method: POST
    data_selector: txId
- name: estimate_fee
  endpoint:
    path: /blockchain/estimate
    method: POST
    data_selector: gasPrice
    params: {}
- name: check_master_balance
  endpoint:
    path: /ethereum/account/balance/{master_gp_address}
    method: GET
    data_selector: balance
    params: {}
- name: check_slave_balance
  endpoint:
    path: /blockchain/token/balance/{chain}/{contractAddress}/{custodialAddress}
    method: GET
    data_selector: balance
    params: {}
- name: transfer_custodial_wallet
  endpoint:
    path: /blockchain/sc/custodial/transfer
    method: POST
    data_selector: txId
    params: {}
- name: generate_wallet
  endpoint:
    path: /generatemanagedwallet
    method: POST
    data_selector: signatureId
- name: get_private_key
  endpoint:
    path: /getprivatekey
    method: POST
    data_selector: privateKey
- name: get_address
  endpoint:
    path: /getaddress
    method: POST
    data_selector: address
- name: Get Pending Transactions to Sign
  endpoint:
    path: /reference/getpendingtransactionstosign
    method: GET
    data_selector: pendingTransactions
    params: {}
- name: Create Subscription
  endpoint:
    path: /reference/createsubscription
    method: POST
    data_selector: subscription
    params:
      type: KMS_FAILED_TX
- name: Create Completed Transaction Subscription
  endpoint:
    path: /reference/createsubscription
    method: POST
    data_selector: subscription
    params:
      type: KMS_COMPLETED_TX
- name: btc_transaction
  endpoint:
    path: /v3/bitcoin/transaction
    method: POST
- name: get_pending_transaction
  endpoint:
    path: /v3/kms/{transaction_id}
    method: GET
- name: erc20_token_transfer
  endpoint:
    path: /simulateTransferErc20
    method: POST
    data_selector: transactionDetails
- name: simulateTransfer
  endpoint:
    path: /simulateTransfer
    method: POST
    data_selector: transactionDetails
- name: simulateTransferErc20
  endpoint:
    path: /simulate/transfer/erc20
    method: POST
    data_selector: transactionDetails
    params: {}
- name: simulate_transfer_erc20
  endpoint:
    path: /v3/erc20/transfer
    method: POST
    data_selector: data
    params: {}
- name: txfeecap
  endpoint:
    path: /v3/rpc/txfeecap
    method: POST
    data_selector: data
- name: trace_transaction
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: eth_getTransactionReceipt
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: eth_getTransactionByHash
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: trace_transaction
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: debug_traceTransaction
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: transaction_receipt
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      method: eth_getTransactionReceipt
      jsonrpc: '2.0'
      id: 1
- name: blocks
  endpoint:
    path: /v3/blockchain/node/iota-testnet/api/core/v2/blocks
    method: POST
    data_selector: request.body
- name: debug_traceBlockByHash
  endpoint:
    path: /debug_traceBlockByHash
    method: POST
    data_selector: result
    params:
      jsonrpc: '2.0'
      method: debug_traceBlockByHash
      params:
      - '0xc2e5cad4cf8082512c3053e698997ff2fc9e85511ad011b46fea29cb2f99cb62'
      - tracer: callTracer
        timeout: 90s
      id: 1
- name: debug_traceBlockByHash
  endpoint:
    path: /debug_traceBlockByHash
    method: POST
    data_selector: result
    params: {}
- name: eth_getBlockByNumber
  endpoint:
    path: /eth_getBlockByNumber
    method: POST
    data_selector: result.transactions
    params: {}
- name: debug_traceTransaction
  endpoint:
    path: /debug_traceTransaction
    method: POST
    data_selector: result
    params: {}
- name: block_hash
  endpoint:
    path: /v3/blockchain/node/dot-mainnet/
    method: POST
    data_selector: result
    params:
      jsonrpc: '2.0'
      method: chain_getBlockHash
      params:
      - 21453172
      id: 1
- name: block
  endpoint:
    path: /v3/blockchain/node/dot-mainnet/
    method: POST
    data_selector: result
    params:
      jsonrpc: '2.0'
      method: chain_getBlock
      params:
      - '0xe45599f512e6487668031b0ef0d1df79ccdfc3eea4f7b6987eb2e64cb5acd5e1'
      id: 1
- name: internal_transactions
  endpoint:
    path: /v3/transaction/internal/{hash}
    method: GET
    data_selector: transactions
- name: internal_transactions
  endpoint:
    path: /debug_traceTransaction
    method: POST
    data_selector: result.calls
    params:
      tracer: callTracer
      timeout: 90s
- name: block
  endpoint:
    path: /block
    method: POST
    data_selector: block
    params: {}
- name: block_transaction
  endpoint:
    path: /block/transaction
    method: POST
    data_selector: transaction
    params: {}
- name: get_account
  endpoint:
    path: /chain/get_account
    method: POST
    data_selector: account_name
- name: get_block
  endpoint:
    path: /trace_api/get_block
    method: POST
    data_selector: block_num
- name: get_block_info
  endpoint:
    path: /chain/get_block_info
    method: POST
    data_selector: block_num
- name: get_info
  endpoint:
    path: /chain/get_info
    method: GET
- name: push_transaction
  endpoint:
    path: /chain/push_transaction
    method: POST
- name: send_transaction
  endpoint:
    path: /chain/send_transaction
    method: POST
- name: push_transactions
  endpoint:
    path: /chain/push_transactions
    method: POST
- name: get_transaction_trace
  endpoint:
    path: /trace_api/get_transaction_trace
    method: POST
    data_selector: id
- name: getTransaction
  endpoint:
    path: /v3/transaction
    method: GET
- name: getTransactions
  endpoint:
    path: /getTransactions
    method: GET
    data_selector: result
    params:
      address: UQA6FPupjsjSsTIWrP_j8l0kbVCfl-bAYWhfkBDdyFdWPf1x
      limit: 50
      archival: 'true'
- name: token_transaction
  endpoint:
    path: /v3/ton/transaction
    method: GET
    data_selector: transactions
- name: jetton_transfers
  endpoint:
    path: /api/v3/jetton/transfers
    method: GET
    data_selector: jetton_transfers
    params:
      owner_address: UQDQE50D-x9pjfzk5H4cj14k1HD44TC1AtqHBjmqupeQGkSU
      limit: '50'
      offset: '0'
      sort: desc
- name: wallet_operations
  endpoint:
    path: /v1/wallet
    method: POST
    data_selector: data
    params: {}
- name: ethereum_transaction
  endpoint:
    path: /v3/ethereum/transaction/{transaction_hash}
    method: GET
    data_selector: response
    params: {}
- name: polygon_transaction
  endpoint:
    path: /v3/polygon/transaction/{transaction_hash}
    method: GET
    data_selector: response
    params: {}
- name: bitcoin_transaction
  endpoint:
    path: /v3/bitcoin/transaction/{transaction_hash}
    method: GET
    data_selector: response
    params: {}
- name: transaction
  endpoint:
    path: /v3/{chain}/transaction
    method: POST
- name: Send BEP2 over BNB
  endpoint:
    path: /tag/BNB-Beacon-Chain/#operation/BnbBlockchainTransfer
    method: POST
- name: Send BEP20 over BSC
  endpoint:
    path: /tag/BNB-Smart-Chain/#operation/BscBlockchainTransfer
    method: POST
- name: Send BEP20 token via compatible ERC-20
  endpoint:
    path: /tag/Fungible-Tokens-(ERC-20-or-compatible)/#operation/Erc20Transfer
    method: POST
- name: BSC Transfer
  endpoint:
    path: /v3/bsc/transaction
    method: POST
- name: BNB Transfer
  endpoint:
    path: /v3/bnb/transaction
    method: POST
- name: multi_tokens
  endpoint:
    path: /docs/multi-tokens-erc-1155
    method: GET
    data_selector: records
    params: {}
- name: deploy_multitoken
  endpoint:
    path: /v3/multitoken/deploy
    method: POST
    data_selector: uri
    params: {}
- name: account_transactions
  endpoint:
    path: /v1/accounts/{address}/transactions
    method: GET
    data_selector: transactions
- name: account_transactions
  endpoint:
    path: /v2/accounts/{account-id}/transactions
    method: GET
    params:
      nodeType: INDEXER
- name: blockchain_data
  endpoint:
    path: /blockchain/data
    method: GET
    data_selector: data
    params: {}
- name: blockchain_notifications
  endpoint:
    path: /blockchain/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: KMS_FAILED_TX
  endpoint:
    path: /docs/solana-kms_failed_tx-with-successful-transactions
    method: GET
    data_selector: notification
    params: {}
- name: get_account
  endpoint:
    path: /wallet/getaccount
    method: GET
    data_selector: data
    params:
      visible: true
- name: freeze_balance
  endpoint:
    path: /wallet/freezebalancev2
    method: POST
    data_selector: data
    params:
      visible: true
- name: broadcast_transaction
  endpoint:
    path: /wallet/broadcasttransaction
    method: POST
    data_selector: data
- name: get_account_resource
  endpoint:
    path: /wallet/getaccountresource
    method: GET
    data_selector: data
    params:
      visible: true
- name: unfreeze_balance
  endpoint:
    path: /wallet/unfreezebalancev2
    method: POST
    data_selector: data
    params:
      visible: true
- name: Estimate ETH Fee
  endpoint:
    path: /ethereum/gas
    method: POST
    data_selector: estimations
- name: Send ETH Transaction
  endpoint:
    path: /ethereum/transaction
    method: POST
    data_selector: transaction
- name: deposit_identifiers
  endpoint:
    path: /docs/va-deposit-not-detected-with-bnb-xlm-or-xrp
    method: GET
    data_selector: required_identifiers
    params: {}
- name: ledger_account
  endpoint:
    path: /v3/ledger/account/{id}
    method: GET
    data_selector: accountBalance
    params: {}
- name: offchain_account_address
  endpoint:
    path: /v3/offchain/account/{id}/address
    method: GET
    data_selector: address
    params: {}
- name: ledger_block_amount
  endpoint:
    path: /v3/ledger/account/block/{id}
    method: GET
    data_selector: blockedAmount
    params: {}
- name: offchain_withdrawal
  endpoint:
    path: /v3/offchain/withdrawal
    method: GET
    data_selector: withdrawals
    params: {}
- name: withdrawal_logs
  endpoint:
    path: /v3/withdrawal/logs
    method: GET
    data_selector: logs
- name: withdrawals
  endpoint:
    path: /reference/getwithdrawals
    method: GET
- name: withdrawal
  endpoint:
    path: /v3/offchain/withdrawal
    method: GET
    data_selector: response
    params:
      currency: BTC
      pageSize: 50
      offset: 0
- name: Gas Pump Addresses Activated
  endpoint:
    path: /reference/gaspumpaddressesactivatedornot
    method: GET
- name: Activate Gas Pump Address
  endpoint:
    path: /reference/activategaspumpaddresses
    method: POST
- name: Store Withdrawal
  endpoint:
    path: /reference/storewithdrawal#operation/storeWithdrawal
    method: POST
- name: Transfer Custodial Wallet
  endpoint:
    path: /reference/transfercustodialwallet
    method: POST
- name: Complete Withdrawal
  endpoint:
    path: /reference/storewithdrawal#operation/completeWithdrawal
    method: POST
- name: Polygon Amoy NFT (ERC-721) Smart Contract
  endpoint:
    path: /address/0x62356504be1d345481414f152214afd1b9a20320
    method: GET
    data_selector: NFTs minted
notes:
- Uses OAuth2 with refresh token - requires setup of connected app in Klaytn
- Requires setup of connected app in the API.
- Uses OAuth2 with refresh token — requires setup of connected app in Tatum
- Tatum offers a flexible blockchain development platform.
- The API simplifies complex blockchain interactions into single requests.
- Uses OAuth2 with refresh token
- No authentication required for accessing public endpoints.
- Requires API key to access endpoints
- Including API keys in URLs poses significant security risks and should be avoided.
- Requires API key for authentication.
- Ensure API keys are kept secure to prevent compromise.
- This functionality is reserved for paid plans.
- All Team Members can create API keys
- When regenerating an API Key, keep special attention to KMS since it requires a
  1:1 match with the auth API Key that broadcasts transactions for signature.
- All Team Members can regenerate API keys
- Deleting an API key deletes all Virtual Accounts and Subscriptions to notifications.
  This action is irreversible.
- If you suspect or are sure that your API Keys have been compromised or exposed,
  you can regenerate or expire them.
- Tatum does not store mnemonics and or private keys. This means you are solely responsible
  for keeping them safe and ensuring you can retrieve access to them.
- No legitimate Tatum staff member will ever ask for your private keys or mnemonics.
- Ensure to handle API key securely.
- You must keep your privateKey(s) and mnemonics/seed phrases confidential and secure
  at all times.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Tatum does not log, store, or retain private keys.
- Users are responsible for securing their mnemonics and private keys.
- SOC 2 reports and other security certifications contain highly sensitive data about
  our internal controls and processes.
- List of supported testnet faucets available for claiming tokens.
- Tatum SDK simplifies blockchain application development.
- Tatum Dashboard provides a user-friendly interface to manage your API keys, create
  notifications, and much more.
- Tatum SDK simplifies blockchain development.
- Each instance of the TatumSDK is tied to one specific network.
- To use the Tatum API's you would need an API key.
- Get higher limits and use debugging tools.
- Enables quiet mode, overriding the provided or builtin logger. Disables logging
  from inside the SDK.
- Uses OAuth2 with refresh token – requires setup of connected app in api
- Tatum comes with a built-in logger which can help you debug your application, display
  errors and warnings from the inner workings of TatumSDK.
- By default, Tatum will use of the development loggers if you are running in development
  mode, and TatumProductionLogger if you are running in production mode.
- API key required for access
- Ensure to include your API key in the header for authentication.
- 'Tatum accounts come for Free with x2 API keys: Mainnet, Testnet'
- We strongly encourage new users to start their operations over testnet, where coins
  hold no real value.
- Requires API key for access
- Blockchain transactions cannot be reversed, so recovering assets sent to the wrong
  address is almost impossible all the time.
- API supports various blockchains
- Rate limits apply based on subscription plans
- 'Gas Fees Fluctuate: The cost of gas can vary depending on network congestion. During
  high demand, fees increase as users compete for transaction priority.'
- 'Sufficient Native Asset Balance: Ensure that the wallet signing the transaction
  has enough of the blockchain''s native asset to cover gas fees; otherwise, the transaction
  will fail.'
- Automatic nonce management by Tatum is not suitable for high-throughput or parallel
  transaction systems.
- Manually specifying the nonce is strongly recommended in production environments.
- Use "latest" to base your own nonce queue logic.
- Don’t rely solely on "pending" unless your tx history is 100% controlled.
- Verify each transaction after broadcasting using eth_getTransactionReceipt.
- Build retry and reconciliation logic for dropped txs.
- Tatum wallets use specific Mnemonic derivation paths per chain. These derivation
  paths are the same for API, SDKs, and KMS.
- API key is required for authentication
- The recommended batch call payload is 50 items per request.
- There is a hard limit of 400 calls per batch for most chains.
- The Polygon chain has a hard limit of 100 calls per batch.
- The NEAR chain does not support batch calls by default but has a limit of 5 calls
  per batch when enabled.
- Performance degradation is observed when querying blocks older than ~19,000,000
  (approximately February 2022 and earlier) for Algorand.
- Only the most recent ~60 days of data is available for HAQQ.
- Only the most recent 12 months of data is available for Stellar.
- Only the most recent 3 days (epoch) of data is available for SUI.
- API Key is required for authentication
- Transactions included in pending or latest blocks may be reversed or re-ordered
  if the block is re-orged.
- Most applications can consider a transaction final when it is in a safe block.
- Transactions included in a finalized block are virtually guaranteed to be permanent.
- 'Tatum as a vendor stores sent Notification Events for the following period based
  on the plans: Free - 1 Day, PayGo - 7 Days, Business - 30 Days'
- Requires an API key to access the endpoints.
- If you do not use it explicitly mainnet is set by default.
- One (1) confirmation is required to trigger the webhook for EVM Chains.
- Two (2) confirmations are required to trigger the webhook for UTXO Chain.
- Stopping the monitoring of an address means that the Tatum system will no longer
  push notifications via webhooks for any changes related to that address.
- In the context of Ethereum or any other EVM chains, stopping the monitoring of an
  address means that Tatum will no longer track the Ethereum blockchain for transactions
  involving the given address.
- To stop monitoring an address, you can unsubscribe from the webhook notification
  by calling `tatum.notification.unsubscribe(id)` using the subscription identifier.
- The method returns a collection of webhook events triggered by monitoring specified
  blockchain addresses.
- If you do not use it explicitly `mainnet` is set by default.
- Ensure API key is valid and has the necessary permissions.
- Stopping the monitoring of an address will stop notifications via webhooks for any
  changes related to that address.
- Tatum supports HMAC webhook digest for those who want to verify their origin.
- Using HMAC is a much more reliable approach compared to IP whitelisting.
- Authenticating with HMAC and Whitelisting IPs
- Webhook authentication uses HMAC.
- Ensure the IPs are whitelisted for receiving notifications.
- If the webhooks coming from Tatum are suddenly missing x-payload-hash in the header,
  it means that you used a different API key to create new subscriptions.
- Webhook URL must be whitelisted for notifications to be sent.
- 'URLs used to receive Tatum webhook notifications must meet these criteria: Use
  a public domain registered under an allowed public top-level domain (TLD).'
- Verify allowed TLDs against the Public Suffix List.
- 'Tatum blocks webhook notifications to the following: Domains using private or internal
  TLDs. URLs resolving to private IP addresses (localhost, link-local, or private
  network addresses).'
- Verify the list of private IP address ranges used by Tatum in the standard Node
  IP package documentation.
- Use domains with publicly accessible DNS records.
- Verify your domain resolves to a public IP address.
- Regularly monitor webhook delivery status from the Tatum Dashboard.
- Notifications for EVM chains return the parameters 'address' and 'counterAddress'
  as well as 'amount' with some particularities.
- Notifications related to tokens (ERC-20 or compatible) may be delivered with the
  parameter 'contractAddress' containing a symbol rather than the intended blockchain
  Contract Address.
- Future improvements to notifications will deprecate the current behavior. The response
  will instead return the token address in the 'contractAddress' field.
- Attribute 'contractAddress' returning a symbol
- These tokens only exist in Mainnet.
- Authentication requires an API key.
- Possible type values include 'native', 'token', 'erc721', 'erc1155', 'internal',
  'fee', 'trc10', 'trc20', 'failed', 'sol_nft'
- V3 subscriptions incur in 'daily charges', variable per subscription type.
- The credit pricing is subject to change.
- Some objects may return nulls in deeply nested fields
- Tatum staff does not troubleshoot code.
- Ensure to use the correct API key for access
- Rate limits may apply to API calls
- Notifications impacted by reorgs may have slight delays (up to several minutes)
  depending on the blockchain, due to waiting for confirmation of stable blockchain
  state (typically 10-20 blocks).
- Tatum Notification service ignores all transactions that involve Multisig (multi-signature)
  addresses.
- Tatum strongly encourages redundancy checks on the user side.
- Supports various blockchain operations and notifications.
- Requires setup of API key in dashboard
- Mempool notifications are in Proof of Concept stage.
- When a transaction fails to be included in a block, Gas Fees are not refunded.
- 'Ensure your server is highly available: Use a robust hosting setup to minimize
  downtime.'
- 'Scale for high-traffic subscriptions: If subscribing to addresses with high activity,
  prepare for large webhook volumes.'
- 'Log incoming requests: Ensure you log all requests from Tatum for troubleshooting.'
- 'Whitelist Tatum IPs (if using firewalls): Ensure Tatum can reach your endpoint.'
- Make sure to replace API key in headers
- For high-value transactions, it's recommended to wait for 6 confirmations.
- For low-value transactions, 1 or 2 confirmations may be sufficient.
- Supports multiple blockchains for on-chain data access.
- Users must sign up for an API key at the Tatum Dashboard.
- The same request and response is used for different blockchain networks.
- Requires API Key for authentication
- Some filters are in alpha for UTXO chains, thus you may experience inconsistencies.
- Ensure to check the correct endpoint for fetching fungible tokens.
- Up to 10 addresses can be fetched as a comma separated string.
- Ensure to have a valid API key for requests.
- Ensure to include your API key in the header for authentication
- Default page size is 10 if not specified.
- Optional transaction type. If not specified, both incoming and outgoing transactions
  are returned.
- Optional from block. If not specified, all transactions are returned from the beginning
  of the blockchain.
- Optional to block. If not specified, all transactions are returned up till now.
- Optional transaction type can be specified.
- Ensure to provide the correct wallet address to retrieve NFT history.
- This endpoint checks if a wallet owns a specific NFT.
- Endpoint requires valid API key in header.
- Ensure to replace {id} with the actual NFT ID.
- Ensure to manage your API keys securely.
- Always write down your mnemonic phrase on paper and store it in a secure location.
  Avoid saving it digitally to protect against hacking and malware.
- Consider creating multiple copies of your mnemonic phrase and storing them in different
  secure locations to protect against loss or damage.
- Never share your mnemonic phrase with anyone. Anyone with access to your mnemonic
  phrase can control your funds.
- Requires API Key for authentication.
- The EVM Wallet Provider submodule helps with mnemonic generation, extended public
  key creation, private key and address derivation, transaction signing and broadcasting,
  and cross-blockchain development.
- API key must be included in all requests
- Fee Estimates may fluctuate one way or the other, within seconds.
- The Testnet Fee Estimate is generally unreliable.
- Tatum does not store Mnemonics and or Private Keys.
- The responsibility of keeping your Mnemonics and Private Keys secure rests solely
  with you, the User.
- Tatum Mainnet Fee Estimates are generally in line with other providers.
- The Testnet Fee Estimate is generally unreliable. Since testnet coins have 'no value',
  users tend to set random amounts greatly skewing the estimates.
- The UTXO Wallet Provider Submodule helps you create wallets locally for UTXO-based
  blockchains.
- Its extensive functionalities make it a reliable and potent toolkit for advanced
  wallet management and blockchain interaction.
- For rapid transaction firing from the same address (less than 25 seconds per broadcast
  attempt), confirm the UTXOs were not spent already via the v3 REST API endpoint.
- Testnet Fee Estimate is generally unreliable.
- Ensure to use valid API key for authentication
- Be mindful of Tatum's derivation path.
- Some API limits may apply based on the plan selected.
- Newly created Tron addresses need to be activated before they can be found via API
  queries or on the chain explorer.
- When you create a Tron address, it will be disregarded by the Tron Blockchain until
  you send funds to it.
- Generating a private key is crucial for accessing and controlling your funds.
- API key required for authentication.
- Browser wallets like MetaMask or Phantom provide a user-friendly, secure, and versatile
  solution for managing digital assets and interacting with dApps.
- Connecting from Node.js is not supported because MetaMask focuses on end-user interactions
  within web browsers.
- Ensure to set up API keys for access.
- Ensure to have the correct API key for access.
- Use TatumSDK to prepare, sign and broadcast the transaction using MetaMask.
- Use of API key is required for authentication
- MetaMask is designed as a browser extension to provide a user-friendly interface
  and secure key management for interacting with dApps and web services.
- API requires an API key for authentication
- API key is required for authentication.
- MetaMask is designed as a browser extension for user interactions.
- There can only be one address per wallet
- ERC-1155 is ideal for gaming platforms and digital marketplaces where both fungible
  items (e.g., in-game currency) and non-fungible items (e.g., unique weapons or skins)
  coexist.
- API requires API key for authentication
- Make sure to handle API key securely.
- API key is required in the header for all requests
- Ensure the sender's blockchain address has enough native assets to cover gas fees.
- Token transfers are paid with Native chain assets.
- Mind the Token decimals.
- Familiarize yourself with the Safety & Security Basics.
- Be mindful of Tatum's derivation path. Find additional information in the following
  article.
- Familiarize yourself with the Safety & Security Basics in the following article.
- Ensure you have the correct API key for access.
- Fee Estimates for Tron Token transfers are challenging to calculate.
- Tron addresses with no TRX will return an error in fetching balance. The address
  must be 'activated' first.
- Tatum endpoints provide token balances from 'finalized' blocks.
- Tatum endpoints return values at an average of 20 blocks behind the tip.
- Depending on the Smart Contract code, the method to fetch the balance may vary.
- Tatum staff generally does not troubleshoot RPC requests, unless there's an error
  explicitly related to our infrastructure.
- The token supports 6 decimals
- To determine token decimals, use RPC method eth_call or consult a blockchain explorer
  for ERC-20 tokens.
- For SPL tokens, use RPC method getTokenSupply or check with a blockchain explorer.
- API requires an API key for access.
- Adding a Minter Address into an NFT Collection SmartContract is non-reversible.
- Ensure to check API limits and pricing plans.
- Gas cost is paid from the Tatum Plan.
- IPFS file limit size is up to 50MB. File batch upload is unsupported.
- Use the appropriate Tatum Minter role address based on the environment and chain.
- Requires an API key for authentication.
- Gas fees and nonce must be checked before minting.
- IPFS and max size for tokens may have specific limitations.
- When minting NFTs with Algorand, the metadata URL of the NFT must use the IPFS format.
- As of the writing of this article, no other formats than IPFS are supported by Algorand.
- Furthermore, the token URI max size is 96 bytes.
- The token URI returned SHOULD be an `ipfs://...` URI so the metadata can’t expire
  or be changed by a lapse or takeover of a DNS registration.
- The token URI SHOULD NOT be an `http://` URI due to security concerns.
- API requires an API key for authentication.
- A Flow address can be used only once to deploy a new NFT contract.
- Broadcasting transactions on Flow requires a paid plan.
- Exceptionally, Tatum pays for Flow transaction gas fees, and your account is charged
  in credits in exchange.
- Minting NFTs on Solana does not require deploying a smart contract.
- Metadata for NFTs is stored on the blockchain, not on IPFS.
- You must buy and hold crypto to pay for the gas fees.
- You need to hold crypto on every blockchain on which you want to mint NFTs.
- You need to deploy smart contracts to mint NFTs on each blockchain.
- You need to deal with security issues with private keys to mint NFTs.
- You need to address performance issues.
- ERC-1155 is a standard for smart contracts on the Ethereum blockchain, which encompasses
  the functionality of both ERC-20 and ERC-721 within a single smart contract.
- API requires an API key to access.
- Uses API key for authentication
- API requires API key to access.
- Optional base URI can be specified for the tokens.
- The amount cannot be fractional
- API key required for access.
- BSC - Our contract uses the compiler available at the time of publication. Newer
  versions have fixed some minor bugs. The impact of these bugs, however, is low and
  not significant.
- SOL - Verifying an NFT on Solana means that the NFT is a part of the collection
  (setting the `Verified` parameter to `true` for the NFT).
- Ensure to use valid API keys for authentication.
- Ensure to get your API key from the Tatum dashboard.
- Tatum staff does not troubleshoot issues related to invoke a method in an SC.
- Some operations may have rate limits.
- Gas fees fluctuate based on network demand and congestion.
- Tatum uses its proprietary system to closely monitor and estimate fees for Bitcoin
  and Ethereum mainnets.
- Transactions broadcasted with an insufficient Fee will be rejected by the blockchain.
- Tatum EVM REST API transaction broadcast endpoints expect GasPrice in 'Gwei' units.
- Analysing trace calls requires in-depth blockchain knowledge.
- Fee Estimates are only 'valid' for a very short time, in seconds.
- Gas Fees can be extremely volatile depending on blockchain congestion.
- Make sure the blockchain address that sends the funds holds sufficient balance to
  pay for the transaction.
- Transaction Size (in bytes) = (Number of Inputs x 148) + (Number of Outputs x 34)
  + 10
- Estimate fee per kilobyte based on transaction size.
- API key required for authentication
- This function currently works with the previous version of our api & requires an
  explicit version initialisation for the main object to be called.
- When a transaction is rejected due to being below the minimum relay fee, it will
  fail to broadcast across the network.
- To resolve this, you will need to resubmit the transaction with a higher fee that
  meets or exceeds the minimum relay fee.
- 'Exchange rate data source: https://www.coingecko.com/'
- Ensure to check API rate limits.
- API key is required for all requests.
- Always be mindful of the data you store on IPFS. Once published, it becomes permanent
  and may be retrievable by anyone.
- The file is to be uploaded in binary format.
- API requires an API key for access
- Gas-less experience where you can pay the gas costs for your users
- Implementing Tatum's Virtual Accounts requires a strong foundational understanding
  of blockchain technology.
- Ensure to replace x-api-key with your actual API key.
- A custodial wallet is a wallet where a third party holds the private keys, not the
  crypto assets owner. The provider has full control over crypto assets, while end
  Users only have permission to send or receive payments.
- Every Exchange must have wallets for every crypto asset it supports.
- Every end-user of the Exchange must obtain accounts for every asset they are trading.
- The exchange operator defines the trading pairs that can be traded by users and
  usually charges a fee for every trade performed.
- Virtual Accounts can only handle one (1) single currency per Virtual Account.
- Tatum does not hold custody of mnemonics or private keys. As a result, it is technically
  possible to sign transactions using VA ledger deposit addresses outside the VA ledger
  and Tatum endpoints.
- The blockchain’s on-chain balance takes precedence over the VA ledger. If unregistered
  transactions occur, the VA ledger will become misaligned, leading to liquidity inconsistencies
  between the on-chain balance and the off-chain VA ledger.
- Virtual Accounts are designed to hold a limited number of deposit addresses (1-5).
  While adding many more deposit addresses may appear functional, this setup often
  leads to unrecoverable synchronisation issues across users over time.
- Any on-chain assets already present in a blockchain address to bind to a Virtual
  Account will be ignored.
- Deposits are only recognized as long as the currency of the VA matches the on-chain
  asset deposited.
- If a mistake occurs when creating or storing a withdrawal in the VA ledger, it can
  be deleted and retried.
- Withdrawals from a VA deposit address can be automated using VA Blockchain Operations
  endpoints, ensuring they are properly logged in the VA ledger.
- You are expected to hold 1:1 asset liquidity between the VA off-chain ledger and
  your end-users on-chain assets.
- To avoid potential disruptions and ensure consistent performance, we recommend adhering
  to the intended usage of 1-5 deposit addresses per Virtual Account.
- Be mindful of Tatum Derivation Path.
- All withdrawals must be registered and executed through VA-specific endpoints.
- Using standard blockchain transaction methods to sign and broadcast a transaction
  from a VA-linked deposit address bypasses the VA ledger, leading to balance discrepancies.
- Every Virtual Account can belong to a specific customer in Tatum.
- The customer's externalId should be a unique identifier of the user in your database.
- Never share your Mnemonics and/or Private Keys with anyone.
- Requires API key for authentication
- Virtual Accounts should be assigned to 'customers' at creation.
- Virtual Accounts can only handle one (1) single currency per account.
- It is strongly encouraged that a Virtual Account only holds one (1) single deposit
  address at a time.
- Never share your mnemonic(s) and/or private key(s) with anyone. It is your responsibility
  to keep this information safe.
- On XRP and XLM, you must freeze a specific amount of assets for each deposit address
  you create.
- For Mainnet and/or a Production Environment, it is recommended to use KMS.
- Virtual Accounts (VA) can support FIAT currencies in the VA ledger.
- FIAT currencies are registered as Virtual Currencies (VC).
- It is not possible to integrate the Tatum VA ledger directly into a specific bank
  or card processor to read and perform bank transactions due to legislative restrictions.
- Ensure to replace placeholder values with actual API keys.
- Assigning a blockchain address to a Virtual Account created with an XPUB is impossible.
- Any on-chain assets already present in the blockchain address to bind to the Virtual
  Account will be ignored.
- Ensure to replace placeholder values with actual data.
- 'Migration Deadline: Ensure that you complete the migration process before the deadline
  provided by Polygon to avoid issues with token support.'
- 'Transaction Fees: Be mindful of network fees both for withdrawing from MATIC_ETH
  and swapping MATIC to POL.'
- 'Adding additional tokens is supported on a limited amount of chains: Ethereum,
  Celo, Polygon, Binance Smart Chain, KuCoin, Arbitrum One, XDC, Klaytn, Tron, Solana.'
- Virtual Accounts support a limited amount of chains. This means that if a token
  you want to support is from a chain that's unsupported, you won't be able to add
  it.
- Every trade must be filled and closed at some point.
- It is possible to fill only the part of the trade.
- It is your responsibility to ensure on-chain asset liquidity.
- API key is required for accessing the endpoints.
- The fee can be executed by providing a fee and feeAccountId property when opening
  a trade.
- Ensure API key is kept secure and not exposed publicly.
- sealDate acts as the timestamp on which the buyer and seller finalize the transaction
  and enter into the contractual obligation to buy or sell the underlying asset at
  a specified amount and price in the future.
- 'Order Book: Future Trade and sealDate'
- Some API calls may require specific permissions or account settings.
- The response will contain details about both virtual account transactions.
- Ensure to monitor API usage to avoid exceeding limits.
- Withdrawals from Deposit addresses are the most cost-effective because the only
  blockchain transactions you are paying gas fees for are for when users withdraw
  funds to their deposit addresses from their virtual accounts.
- You must keep track of which private key is associated with which assets at all
  times to allow your users to withdraw assets to their deposit addresses.
- Virtual Accounts are designed to hold a limited number of deposit addresses (1-5).
- Ensure to include the API key in the header for all requests.
- The intended use case for Virtual Accounts (VA) is as a Self-Custodial Exchange,
  meaning all withdrawals are expected to be tracked in the VA ledger.
- Tatum does not hold custody of mnemonics or private keys.
- The blockchain’s on-chain balance takes precedence over the VA ledger.
- Withdrawals from a VA deposit address can be automated using the VA Blockchain Operations
  endpoints, ensuring they are properly logged in the VA ledger.
- Ensure that the asset amount, fees, and all parameters match the expected values
  on both the blockchain and the VA ledger.
- Deleting a withdrawal from the VA ledger to the blockchain should only be done when
  the associated blockchain transaction failed and or it was dropped from the mempool.
- When deleting a withdrawal, be mindful of the optional parameter 'revert', where
  it defines IF the fee should be reverted to the account balance as well as with
  the amount. Defaults is true.
- Revert == true would be typically used when withdrawal was not broadcast to the
  blockchain.
- Revert == false is usually used for tokens, where gas was consumed but the transaction
  was reverted.
- Deleting a withdrawal successfully processed by the blockchain will likely break
  your Virtual Account ledger.
- You pay for the activation of the Slave GP Contract Address.
- On-chain cost charged by the blockchain due to Smart Contract Activation.
- The transfer fees from the Slave GP Contract Address are paid by your Master GP
  Address.
- You avoid Dust management.
- You may rotate and reassign an activated Slave GP Contract Address, as needed, across
  your End-users.
- You may add an external address to a VA, as long as said account was created without
  an XPUB.
- Assets that may be already present in the 'Slave GP Contract Addresses' to be bound
  to the VA won't be considered to update the available balance.
- Ensure proper API key management to avoid unauthorized access.
- Should the blockchain transaction fail and you already executed Step_2, you may
  delete the withdrawal from the VA ledger.
- Withdrawals from a VA deposit address can be automated using the VA Blockchain Operations
  endpoints.
- 'After an End User successfully registers in your Exchange or Application, your
  customer has successfully walked through: Sign up, Virtual Accounts were created,
  Deposit Addresses were created (optional), End User can deposit from outside the
  Exchange (optional), End User can perform a withdrawal from the Exchange to outside
  the Exchange (optional)'
- API key is required for accessing account details and balances.
- Check the rate limits on the API to avoid throttling.
- The available balance can even be negative when there are blockages in the account.
- When the balance is below zero, transactions cannot be performed, but new blockages
  can be made.
- Most blockchains do not allow the blocking or freezing of assets at blockchain addresses.
- This endpoint allows for the deletion of unused virtual accounts.
- You can remove unused Virtual Accounts.
- Ensure to check API limits to avoid throttling.
- It is strongly encouraged to track and log your 'Subscription_ID'
- For deposits and withdrawals, it is strongly recommended to verify effective on-chain
  assets liquidity as well as the legitimacy of the operation.
- Tatum does not store PrivateKeys and or Mnemonics.
- The steps outlined in this article are general suggestions based on best practices.
  Additional security measures and verifications may apply depending on a specific
  Use Case or User's country legal entity.
- Ensuring on-chain asset liquidity is the responsibility of the user.
- NFTs and MultiTokens are not supported.
- In a non-custodial wallet application, you have to create a blockchain wallet for
  each customer.
- Requires setup of connected app in Tatum
- Gas Pump is a Smart Contract Chain dependant. An activated 'Slave GP Contract Address'
  in for example the ETH chain won't work to transfer out assets from another chain.
- You pay for the activation of the 'Slave GP Contract Address'. On-chain cost charged
  by the blockchain due to Smart Contract Activation.
- Precalculating a gas pump address means generating an address that follows the blockchain's
  requirements for the address format. At this point, no changes are made to the blockchain
  itself; therefore, no gas fees apply.
- Master GP Address covers the gas fees for sending assets.
- Ensure that Master GP Address always has enough funds to cover gas fees.
- Only activated Slave GP Contract Address can transfer out assets.
- Gas Pump is a Smart Contract.
- Use dedicated GP Fee Estimate endpoint for transfer fee calculation.
- When transferring a token, please check the Contract code to verify the maximum
  allowed amount of digits.
- API keys are required for authentication
- Losing `wallet.dat` can be catastrophic
- Losing your KMS password means permanent loss
- The KMS must run in daemon mode to periodically check for new unsigned transactions.
- Mind the KMS flag "--testnet" for testnet operations.
- The password is required whenever you start the Daemon or restart the Daemon after
  it stops.
- If you lose your password, you will lose access to your Mnemonics and PrivateKeys.
  Tatum cannot help you.
- Tatum KMS should be installed in the Deny-From-All environment to meet the highest
  security standards.
- Mind the KMS flag '--testnet' for testnet operations.
- Ensure to set up API keys properly in the dashboard.
- Always use webhook subscriptions for real-time updates on transaction statuses.
- Implement robust error handling for scenarios like insufficient gas fees or low
  balances.
- Use the Get Pending Transactions to Sign endpoint for periodic checks if webhook
  notifications are not viable.
- 'You can encrypt your KMS wallets using one of the following ways: Password-based
  encryption, VGS account that holds the encryption/decryption key, MS Azure account
  that holds the encryption/decryption key, AWS account that holds the encryption/decryption
  key.'
- The most straightforward option is to encrypt the wallets with a password.
- KMS in Daemon mode periodically checks for pending transactions every 5 seconds
  by default, costing 4 credits per minute.
- To lower the baseline credit consumption, you may increase the periodicity checks.
- Ensure to use valid API key for access.
- By default, KMS checks for the pending transactions every 5 seconds.
- The API key registered in KMS must match 1:1 with the API key registered to broadcast
  transactions from your Production environment.
- Users have to generate their signature_IDs before a transaction broadcast attempt
  can happen.
- When working with KMS, Solana, and Virtual Accounts, you may assign these addresses.
- Mnemonics are generally stored in KMS, while the public addresses are generated
  via the XPUB. Unfortunately, KMS does not support this method with Solana.
- Ensure to manage API keys securely.
- Find additional information about password issues in [this article](/docs/kms-malformed-utf-8-data-error)
- If you lost your password, refer to [this article](/docs/kms-security-basics#important-information)
- KMS requires an API key for access.
- AWS credentials expire per session. To avoid interruptions, use AWS Long-Term Access
  Keys.
- You must use different .env files (.env for dev and .env-pre-prod for pre-production).
- Each instance must have a unique wallet.dat file (e.g., wallet-dev.dat and wallet-preProd.dat).
- Each instance should have its own API key to avoid conflicts.
- Ensure access to keys is restricted
- Ensure the 4-eye principle is enabled (Mandatory in Mainnet)
- Ensure KMS runs in Docker within a secure Cloud or on-premise environment, separate
  from the Application
- Ensure regular withdrawals to Cold/Hardware Wallet and managed in local Database
  as a custodial solution
- Enforce access policy to the KMS environment
- Ensure backups and due diligence at handling "wallet.dat"
- Set up access system to KMS via hardware devices. E.g., Yubikey
- Create a monitoring and alert system for unusual activity
- Create Reporting Systems for withdrawals and anomalies
- Simulating transactions allows developers to anticipate and catch potential errors
  or vulnerabilities in transaction logic.
- Methods accept gasPrice as a parameter. If you don't provide it, the gas price will
  be estimated using the eth_gasPrice method.
- Methods accept gas as a parameter. If you don't provide it, the gas limit will be
  estimated using the eth_estimateGas method.
- Ensure API keys are securely managed.
- Simulate transactions to test smart contracts, DApps, and other blockchain functionalities
  in a safe and controlled environment.
- Enhance hands-on blockchain education by simulating real-world transaction scenarios.
- Simulates ERC20 token transfers on EVM-based blockchains without interacting with
  the live blockchain.
- Requires a valid API key to access endpoints.
- The articles within this section include guides, answers to general questions, and
  workarounds for blockchain developers using Tatum services.
- Tatum does not own or influence the blockchain source code.
- Issues like network congestion, unexpected transaction delays, or sudden protocol
  changes reflect the inherent decentralized nature of blockchain networks.
- Requires setup of API key in Tatum dashboard
- The Arbitrum chain went through a hard-fork from Classic to Nitro on August 31,
  2022.
- As a result of this, it is only possible to use `debug` methods from block 22.207.818
  to the current one.
- This error originates from the BASE sequencer, not from Tatum infrastructure.
- Frequent 429 Too Many Requests responses.
- Transactions not appearing on-chain.
- Broadcast failures even with retry logic.
- Dbug and Tracer calls are highly resource-consuming.
- Add the optional timeout parameter on your debug and tracer requests.
- When attempting to broadcast a transaction using the RPC method eth_sendRawTransaction
  on Ethereum or other EVM-compatible chains, the blockchain may return an error that
  states, "already known".
- This message indicates that the transaction hash provided already exists in the
  node’s memory pool (mempool) and has been previously broadcasted.
- The eth_getProof method does not support historical proofs on Erigon v3 for the
  time being.
- Only fetching proofs for latest block will work.
- This error means the transaction is underpriced and has been rejected by the network.
- 'Max Fee Per Gas: The maximum amount you''re willing to pay per unit of gas for
  the transaction.'
- 'Block Base Fee: A dynamically adjusted minimum fee per gas that all transactions
  must meet or exceed to be processed. This value changes dynamically with network
  congestion.'
- Max Fee Per Gas Less Than Block Base Fee
- 'Tracing Failed: Insufficient Funds for Gas * Price + Value Error on EVM Chains'
- Chains not listed in the table use the default 'TxFeeCap' settings, which is generally
  set to '1'.
- Ensure API key is set in headers for all requests
- Tatum offers support for multiple chains and RPC nodes, allowing developers to interact
  with the blockchain network and perform various operations such as checking balances,
  submitting transactions, and more.
- While Tatum supports a wide range of methods, there are a few that are not currently
  supported.
- Response may indicate that the transaction trace contains errors marked as 'Reverted'.
- trace_transaction method is only available on Erigon based nodes.
- Debug and Trace methods may require access to Archival Data
- Some methods may be only available on Mainnet chains
- When querying pre-Bedrock blocks using the debug_traceBlockByHash method, the response
  does not include the txHash.
- Transaction hashes must be retrieved first before tracing.
- Pre-Bedrock blocks do not return txHash.
- Older blocks exhibit worse response/performance than the latest blocks (if you follow
  the tip).
- Large batches result in worse response/performance compared to running a simple
  call multiple times.
- It's usually not possible to achieve more than 5 requests per second (rps) using
  the debug_traceBlockByNumber method when fetching old data.
- We are transitioning Optimism (Mainnet) from Geth to Erigon to leverage improved
  stability and performance benefits that Erigon offers.
- None of the affected methods are actively used by our customers. As a result, we
  anticipate no disruption to existing workflows during this transition.
- Tatum staff does not troubleshoot 3rd party code.
- totalDifficulty no longer holds relevance in PoS
- Calls to Ethereum and other EVM-compatible chains via JSON-RPC will no longer return
  the totalDifficulty parameter
- Ensure valid transaction hash is provided
- The callTracer is efficient for extracting internal transactions but may still be
  resource-intensive for large transactions
- A Timeout flag may be required in your request
- API Key required for access.
- The maximum weight for transactions we're willing to relay/mine is 400000.
- This list is subject to change as Tatum continues to evolve and add new features.
  Developers are encouraged to check the latest documentation for an up-to-date list
  of supported methods.
- Transaction details may be omitted for performance reasons.
- Receiving a response from Solana nodes sometimes takes several seconds.
- One of the primary reasons for long response times is the response size. Depending
  on which block you may be querying, the response can be rather large (5-10MB).
- Tokenkeg####### excluded from account secondary indexes; this RPC method unavailable
  for key
- Pagination support is available for certain endpoints.
- Pagination requires the logical time parameter 'lt' to fetch transactions that occurred
  before a specific point in time.
- Start with the maximum value for 'lt' and subtract one to get the next batch of
  transactions.
- Ensure to handle token expiration properly.
- Jettons are tokenized assets on TON, similar to ERC-20 tokens on Ethereum.
- 'Find the official TON v3 endpoints HERE: https://toncenter.com/api/v3/index.html#/jettons/api_v3_get_jetton_transfers.'
- The address format must be in Ethereum-style hexadecimal format, prefixed with 0x.
- Only supported Ethereum-compatible methods will work. For unsupported features,
  refer to native TRON APIs.
- Uses OAuth2 with refresh token - requires setup of connected app in Tatum
- Check this page if your transaction is stuck on chain.
- Confirmed blockchain transactions cannot be canceled or reverted. Once a transaction
  has been confirmed and added into a block, it's final.
- Incorrectly executed transactions may result in the loss of funds.
- For pending or unconfirmed transactions, there's no guarantee of success in canceling
  or replacing them.
- Refer to the documentation for specific API key management guidelines.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Confirming a transaction can take from seconds to minutes, to many hours.
- Factors such as the total network activity or congestion, hash rate, and transaction
  fees impact the time it takes for a transaction to get confirmed.
- Once a transaction is broadcasted to the blockchain and you receive a 'tx_hash'
  or 'tx_id,' its status is entirely determined by the blockchain.
- Ensure KMS is up to date. Engineering support is only provided for the latest releases.
- Ensure to follow the API documentation for authentication setup.
- The native token balance should be sufficient to pay for gas, especially if the
  transaction involves contract deployment, which is typically more costly than regular
  transactions.
- The error message occurs because the gasFeeCap (max fee per gas) specified for the
  transaction is less than the block base fee required for processing it.
- On EVM chains, the base fee is a dynamic minimum fee per gas unit that fluctuates
  depending on network demand.
- In Tatum based REST API endpoints, we use GasPrice as gasFeeCap.
- By definition, name and symbol found in the ERC-20 and ERC-721 standards are not
  available.
- Ensure to use valid API keys and follow rate limits.
- Horizon has not received a confirmation from the Stellar Core server that the transaction
  you are trying to submit to the network was included in a ledger on time.
- If you are using KMS, make sure it's checking for pending transactions faster (default
  5 seconds).
- Blockchain congestion.
- Keep resubmitting the same transaction (with the same sequence number) and wait
  until it finally is added to a new ledger.
- Increase the fee to prioritize your transaction vs others.
- Some endpoints may have rate limits
- Ensure you have enough native assets to pay for the transaction.
- Some conditions within the Smart Contract may not be met.
- Verify enough assets are present in the sender's account.
- Double-check the recipient address and asset details.
- Gas Fees are not refunded.
- Ensure that the API key is kept secure and not exposed in public repositories.
- Always double-check the network before sending funds, even if the address format
  looks identical.
- Use trusted cross-chain bridges for transferring tokens between different blockchains.
- Verify token compatibility on the destination chain before sending.
- Ensure sufficient gas tokens (ETH for Ethereum, BNB for BSC, etc.) to process transactions
  on each network.
- Ensure to handle API rate limits effectively.
- BTC supports a maximum of eight (8) decimals.
- Refer to the API documentation for specific endpoint usage.
- CPFP is just an incentive scheme that can be used for transaction selection by miners.
  There might be reasons that the child can't be selected to be put into a block,
  and this will prevent the parent UTXO from ever being put into a block.
- 'More information about CPFP is available at the following link: https://github.com/BlockchainCommons/Learning-Bitcoin-from-the-Command-Line/blob/master/05_3_Funding_a_Transaction_with_CPFP.md'
- RBF is particularly useful during times of network congestion when transactions
  might take longer to get confirmed due to high demand.
- Only transactions submitted through RPC calls can enable RBF.
- Ensure to keep your API key secure.
- Tatum adheres to the default Bitcoin setting of a 2-week mempool expiry time.
- Dust refers to a small amount of coins within a UTXO that is smaller than the transaction
  fees required to transfer it.
- For UTXO-based chains like Bitcoin, Dogecoin, Litecoin, and similar, small UTXOs
  can accumulate.
- Any output smaller than approximately 0.0000054 BTC will be flagged as 'dust' by
  nodes in the network and rejected for processing.
- Any output smaller than approximately 0.444 DOGE will be flagged as 'dust' by nodes
  in the network and rejected for processing.
- Allow 25 seconds in between transactions from the same address to let Tatum indexers
  ingest up-to-date blockchain data.
- You may use FromUTXO to hard control from which UTXOs you are building a transaction.
- Tatum uses default node settings set by the chain consortiums. These settings is
  not subject to change.
- Ensure to include API key in the request header.
- Algorand RPC node method /v2/accounts/{account-id}/transactions looks up account
  transactions, returning newest to oldest.
- It's recommended to query blocks with a 'finalized' state. These should take about
  2-3 minutes.
- Ensure the API key is kept secure and not exposed in public repositories.
- Tatum users are encouraged to attempt sending their transactions over Solana, in
  sequence, one by one.
- Sending transactions in parallel can cause duplicated transaction IDs.
- A check on Tatum's side loops 'x' times up to 60s waiting for a transaction confirmation.
- Tatum core-API and SDK wait limit is 60 seconds, where at this point you will get
  an error 403.
- Beyond this moment, the Solana network can still accept or drop the transaction.
- If you get an error, you will have to manually check if the transaction was accepted
  or rejected by the Solana network beyond the moment we returned the error.
- Some endpoints may have rate limits.
- Solana errors are usually documented in the error definition file located in the
  Official Solana GitHub repository.
- If you cannot find the error in the Solana Program Library's token program, the
  error may be coming from the Metaplex Program Library's Token Metadata program.
- Always keep extra SOL above the minimum to avoid failed transactions.
- The minimum balance (rent) is enforced by the Solana network, not by Tatum. Contacting
  Tatum Support will not change this behavior.
- Error "Too many accounts requested, limit is 10,000,000"
- Uses API key for authentication.
- Ensure you keep your API key secure and do not expose it in public repositories.
- mempool size limit could have been reached (low-priority transactions fall victim
  to mempool pruning first)
- The transaction could have reached the set mempool expiration time (Time-To-Live)
- Double-spending
- if this issue happens to you only during certain periods during the day, it might
  be during higher traffic hours when fees get bloated. In this case, we recommend
  increasing the fee so that your transactions will be less likely to be dropped or
  timed out.
- Ensure you have an API key for access
- Ensure that your API key is valid and has the necessary permissions.
- To create an XRP Ledger account, send at least 1 XRP to the address.
- Addresses typically start with an r and are case-sensitive.
- Ensure to use valid API keys to avoid authentication errors.
- Ensure to set proper API keys in the header.
- The sender address must have enough ETH (native asset) balance to cover the gas
  fees.
- Ensure the sender address has at least enough ETH to cover the transaction fees.
- If the balance is insufficient, the fee estimation may fail with the error 'eth.fees.not.found'.
- Fee estimation will fail if an unsupported address type, such as Native SegWit (P2TR),
  is used.
- The sender's address must have available UTXOs (Unspent Transaction Outputs) for
  estimation to work.
- Sometimes, errors occur due to temporary issues with Tatum nodes or connectivity
  to blockchain networks.
- High congestion on the blockchain can impact fee estimation.
- Tatum Bitcoin Nodes are set with a default `maxfeerate` limit of `0.10 BTC/kb`.
- It is possible to bypass the `maxfeerate` limit via the RPC node call method `sendrawtransaction`.
- Tron Addresses require a mandatory Activation Fee set by the Tron protocol.
- Gas fees are the amount of native coins paid to the miners, so they include a transaction
  in a block to be accepted by the blockchain.
- Due to the nature of the blockchain network, Gas Fees are not refunded. Tatum has
  no say.
- Ensure to use a valid API key to authenticate requests.
- 'Delivery error: networkError: true'
- 'Delivery error: ''networkError: true'''
- 'Getting the notification delivery error `networkError: true` occurs when the webhook
  delivery attempts fail to reach your assigned URL with your subscription.'
- This error can appear when our notification service is unable to verify the certificate
  of your domain.
- Notifications based on UTXO chains (like Bitcoin) and Solana return with no counterAddress.
- 'UTXO chains and Solana transactions can be built with the transaction logic: many-to-many.'
- Because of this behavior, tracking an exact counterAddress is not always possible.
  This parameter will therefore be missing in the notification payload.
- However, in Solana there will be counterAddresses containing multiple addresses
  involved in said transaction.
- HMAC configuration depends on the API key used to create the subscription for notifications.
  Only subscriptions created under an API key with HMAC enabled will include the `x-payload-hash`
  parameter.
- Missing 'x-payload-hash' in Notification Response Headers
- XRP transactions can exhibit a discrepancy where a transaction seemingly fails yet
  becomes part of the blockchain due to the node's response structure.
- Understanding the distinct failure types and associated notifications is required
  for the accurate interpretation and handling of these scenarios within the XRP blockchain
  ecosystem.
- 'VA: Base Sepolia and Internal Transactions - Not Supported'
- Virtual Accounts (VA) created on the Base Sepolia testnet do not support internal
  transactions.
- This means that if funds are sent to a VA deposit address via an internal transaction,
  the Virtual Account balance will not be updated, even though the transaction is
  visible on-chain.
- Base Sepolia nodes in Tatum's infrastructure do not support the methods debug_traceBlockByNumber
  and debug_traceTransaction that are required to fetch and process internal transactions.
  Due to this, it technically impossible to track internal transfers for this testnet.
- When testing deposits to Base Sepolia Virtual Accounts, ensure that the transaction
  is a direct transfer to the deposit address (i.e., not internal or contract-based
  forwarding). This guarantees correct balance updates within the Virtual Account.
- Other chains and environments may support internal transactions depending on node
  capabilities.
- If you need to validate or test balances based on internal transactions, consider
  using Base Mainnet or another supported testnet where full transaction tracing is
  available.
- The time required for a blockchain transaction to get confirmed varies from chain
  to chain and chain load.
- The Virtual Account balance is updated with confirmed blockchain transaction, with
  an additional delay of approximately 1 minute.
- XLM and XRP require a matching 'message' and 'destinationTag' to identify deposits.
- Not all blockchains provide xpub for wallets, or Tatum may not support wallets on
  some blockchains. In those cases, use the wallet address or the account address
  instead. In the case of Solana as well as a few others, you need to use the address
  you got from Generated Wallet.
- Adding XPUB to the VA does not connect any specific blockchain address to the account.
  XPUB is a generator of addresses, not an address by itself.
- Always process deposits and withdrawals through VA-specific endpoints to maintain
  ledger integrity.
- Periodically compare VA ledger balances with on-chain balances to identify and rectify
  discrepancies promptly.
- Make sure Tatum KMS and other tools are in their latest versions to benefit from
  improvements and fixes.
- Ensure the blockchain fees are sufficient for the transaction to be accepted on-chain.
- Check for API rate limits and adjust calls accordingly.
- API key must be included in the header for all requests.
- 'Verify the status of the withdrawal via the parameter: ''status''. Possible state:
  ''InProgress'', ''Cancelled'', ''Done''.'
- On-chain balance has prevalence over the VA ledger balance. Balance desync on a
  VA ledger can be 'fixed'. On-chain operations are permanent and non-reversible.
- It is the responsability of the user to ensure on-chain balance liquidity.
- Ensure to handle withdrawal errors appropriately.
- Ensure to include the API key in the request header.
- Ensure to have a valid API key in the header for requests.
- 'Getting this error message could mean the following: A previous withdrawal is stuck
  ''inProgress'' in the mempool, where said blockchain transaction still exists but
  it''s unconfirmed. You need to wait. The blockchain transaction related to the withdrawal
  id: ''####'' mentioned in the error was dropped by the blockchain OR accepted (confirmed
  transaction) but the Virtual Account ledger did not acknowledge this.'
- If the transaction was accepted (confirmed in the blockchain), you should Complete
  the Withdrawal. If the transaction failed (dropped by the blockchain), you should
  Cancel the withdrawal.
- Implementing The four-eye principle mechanism is mandatory for signing transactions
  on Mainnet.
- Make sure the password you are using in KMS is correct.
- The default TRON transaction expiration time is 60 seconds.
- KMS users need to be mindful of their configuration to check for pending transactions
  at a rate below 60 seconds.
- The Harmony ONE explorer cannot display NFT tokens as of this article's writing.
- Customers who mint NFT over Harmony ONE are encouraged to use an alternative Explorer
  or wallet service to see the NFT.
- MetaMask is able to display NFT over Harmony ONE addresses.
- Ensure to use valid API keys in the header.
- This txn hash was found in our secondary node and should be picked up by our indexer
  in a short while.
- Sorry, We are unable to locate this TxnHash
- This happens when the transaction didn’t make it through, most likely because you
  used the wrong nonce or wrong sequence index.
- If you didn’t use a manual gas or nonce, the node dropped your transaction from
  the Mempool TTL for our nodes.
- Ensure to set up your API key in the dashboard.
- Before reaching out to support, please review our documentation and troubleshooting
  guides to find solutions to common issues.
- If your account was originally created via Google, GitHub, LinkedIn, or Facebook,
  you must use the same method to log in again. Email and password login will not
  work for accounts created with SSO (Single Sign-On).
- If you don’t receive a password reset email within a few minutes, check your spam
  folder.
- Sometimes local browser data can cause issues. Try logging in using Incognito/Private
  mode, clearing your browser’s cache and cookies, or switching to a different browser
  or device.
- Ensure to manage your API keys carefully.
- Tatum accounts are bound to a single user identity and cannot be reassigned or transferred
  between users directly.
- This process is only available for Business and Pay-as-you-go accounts.
- Tatum plans, billing, and API keys are bound to the original account. These cannot
  be reassigned to another user, and ownership is not transferable via Teams or role
  delegation.
- Ensure to keep your API key safe and not expose it in client-side code.
- Account deletion is irreversible. All data associated with the account, including
  API keys, subscriptions to notifications, usage history and more will be permanently
  removed.
- Only the account owner can request account deletion.
- We do not support partial deletions or anonymization requests. If your intent is
  to pause usage, consider downgrading to the Free plan instead.
- The availability of Monthly or Yearly subscription options may vary depending on
  your region or country.
- Monitor your credit usage in your Tatum Dashboard to avoid overage charges.
- Tatum reserves the right to change its payment provider at any time.
- Each deposit address associated with your Virtual Accounts is automatically monitored
  for incoming transactions. This monitoring incurs a daily cost of 20 credits per
  address.
- The 'Paid as you go' Paid Plan comes with a baseline usage allocation of 4M credits/month.
- RPC calls - Especially archival with debug/tracer - these are more expensive than
  normal calls.
- DATA API - Recurrent or automatized queries can rack up costs.
- Once Stripe cancels your subscription, it cannot be reinstated. You will need to
  subscribe again through the Tatum dashboard.
- Even small errors can prevent your payment from going through.
- Ensure to use the correct API key for access.
- API keys can be managed in the Tatum Dashboard.
- When you cancel your subscription, your plan remains active until the end of the
  current billing period. You will continue to have access to all features until that
  date
- Canceling a subscription (either for 'Overage' or 'Subscription') cancels your paid
  plan.
- If your Tatum account has unpaid invoices, it may be blocked, restricting access
  to all services except the dashboard.
- Once Stripe cancels your subscription, it cannot be reinstated.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Invalid API key'
- '429 Too Many Requests: Rate limit exceeded'
- '429 Too Many Requests: Reduce request frequency.'
- '403: You have reached the limit of ### credits with your free plan for ''####''.
  Upgrade your plan at https://co.tatum.io/3JjG5Ih'
- '401: Authentication required. Make sure your requests are authenticated with a
  Tatum API key. Find out how at: https://docs.tatum.io/docs/authentication.'
- '401 Unauthorized: Check your API key.'
- '401 Unauthorized: Check API key validity.'
- Unauthorized access may lead to data breaches and potential financial loss.
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Recheck API key'
- 'Key Exposure: Data transmitted via REST API can be intercepted or leaked due to
  insecure storage, logging, or compromised network connections on the user’s side.'
- 'Logging Risks: If API requests are logged at any point within the user’s system,
  mnemonics and private keys may be exposed.'
- 'Unauthorized Access: Any party with access to a mnemonic or private key can take
  full control of the associated wallet and its assets.'
- 'Error 429: Too many requests'
- 'HTTP Error 429: Too Many Requests'
- 'Unauthorized: Invalid API Key or Token'
- Rate limitations may occur.
- '400 Bad Request: Check request parameters'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: API key is missing or invalid.'
- '429 Too Many Requests: You have exceeded your rate limit.'
- '400 Bad Request: Invalid parameters'
- '401 Unauthorized: Check API key'
- HTTP Error 429
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: API key is missing or invalid'
- '429 Too Many Requests: You have exceeded your API rate limit'
- Some blockchain networks experience degraded performance when using batch calls.
- Ensure that each request in the batch has a unique ID.
- Verify the format and parameters of each request to avoid errors.
- 'DB Not Found Error: Skipped blocks are not displayed in the explorer.'
- '401 Unauthorized: Check your API key'
- '403 Forbidden: Access denied for this resource'
- Subscription for type ADDRESS_EVENT on the address id {address_id} and currency
  ETH already exists.
- address must be a valid ETH address. Address must start with 0x and must contain
  40 hexadecimal characters after and have the correct checksum.
- 'Invalid subscription id: id should be valid id and 24 characters long, e.g. 6398ded68bfa23a9709b1b17'
- '404 NOT FOUND: Check the subscription id or URL for correctness.'
- '401 Unauthorized: Check API key.'
- '404 Not Found: Verify endpoint path.'
- '500 Internal Server Error: Try again later.'
- 'Error 429: Over Rate Limit'
- 'Error ''Already Known'': Transaction already exists'
- '401 Unauthorized: Recheck API key or token expiration'
- 'Unknown Error: Your server does not accept or process the webhook.'
- 'Server unavailability: Your server or endpoint may have been down or unreachable
  when the webhook was sent.'
- 'High traffic volume: Subscribing to addresses with many transactions can generate
  a very high webhook volume, potentially overloading your server.'
- 'Firewall or network rules: Restrictions blocking Tatum’s requests.'
- 'Timeouts: Your server took too long to respond to our webhook delivery.'
- '404 Not Found: The requested resource does not exist'
- '429 Too Many Requests: Reduce the frequency of API calls.'
- Error fetching wallet balance
- 'HTTP Error 429: Too many requests.'
- '401 Unauthorized: Invalid API key or not provided.'
- Error fetching token metadata
- Error fetching wallet history
- Error fetching NFT owner
- '401 Unauthorized: Invalid API key.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify your API key.'
- 'Error 429: Too many requests - Rate limit exceeded'
- 'INVALID_API_KEY: Check if the API key is correct'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of requests'
- '401 Unauthorized: Check API key validity'
- '404 Not Found: Endpoint does not exist'
- Error fetching default account from MetaMask
- '403 Forbidden: Invalid API key'
- '400 Bad Request: Missing required parameters'
- Error signing a transaction using MetaMask
- '401 Unauthorized: Recheck API key validity'
- 'Error 403: Transaction has not been confirmed yet'
- 'Error: Too many accounts requested, limit is 10,000,000'
- '400 Bad Request: Check the parameters you sent'
- '401 Unauthorized: API key is incorrect or missing'
- 'Error 429: Too Many Requests'
- 'Error 403: Forbidden'
- 'HTTP 429: Over Rate Limit'
- Transaction Simulation could be required for Complex Smart Contracts.
- Replacement transaction underpriced
- Execution Reverted Errors
- Insufficient funds for gas fees.
- Error 403 - Transaction not confirmed
- Callback is not defined
- Transaction could not be found
- tron.tx.expired
- 'Error: Cannot send TRC-20 callback is not defined'
- 'Error: Transaction could not be found'
- 'Error: Unable to find account'
- '400 Bad Request: Check the input parameters.'
- '401 Unauthorized: Validate API key and permissions.'
- '404 Not Found: Verify endpoint and resource.'
- '429: Over Rate Limit'
- '404: Token Not Found'
- '500: Internal Server Error'
- '404 Not Found: The requested resource does not exist.'
- 'Error creating NFT collection: Check the provided parameters.'
- '429 Too Many Requests: Limit the number of API calls.'
- '400 Bad Request: Check the request payload and parameters.'
- '400 Bad Request: Check the request parameters and data format.'
- '401 Unauthorized: Ensure API key is valid and included in the request.'
- '403: Permission Denied'
- 'Transaction not confirmed: Ensure that the correct nftAddress is used for transfer.'
- Error - 'Contract Creation Code Storage Out of Gas'
- Error - 'Fee cap less than block base fee'
- Error - 'Transaction could not be found'
- 'Error 429: Rate limit exceeded'
- 'Returned error: gas required exceeds allowance (####)'
- '400 Bad Request: Invalid parameters.'
- 'ERROR: This field contains the error message and detailed description.'
- 'Error 429: Too many requests.'
- 'account.xpub.bnb: For BNB, XLM and XRP, only 1 xpub is allowed for API Key. For
  your ledger account, use already defined xpub and memo field for address differentiation.'
- 'HTTP Error 429: Rate limit exceeded'
- 'HTTP Error 500: Internal server error'
- All withdrawals must be registered and executed through VA-specific endpoints.
- Using standard blockchain transaction methods to sign and broadcast a transaction
  from a VA-linked deposit address bypasses the VA ledger, leading to balance discrepancies.
- '404 Not Found: The endpoint does not exist.'
- '401 Unauthorized: Invalid API Key'
- '204 No content: Token registered successfully'
- '401 Unauthorized: Check API key or permissions'
- '400 Bad Request: Check input parameters and data format'
- '404 Not Found: Ensure the endpoint is correct.'
- '429 Too Many Requests: Rate limit exceeded, slow down your API calls.'
- Withdrawals must be registered manually if bypassing the VA ledger.
- Balance desync within the VA ledger may be fixable. However, on-chain operations
  are permanent and non-reversible.
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Ensure API key is valid.'
- '401 Unauthorized: Ensure that your API key is correct.'
- '500 Internal Server Error: An error occurred on the server.'
- 'API_KEY_INVALID: Check your API key.'
- 'API_LIMIT_EXCEEDED: Reduce the number of requests or upgrade your plan.'
- 'REQUEST_LIMIT_EXCEEDED: Make several API calls if you need more addresses than
  one API call can precalculate.'
- 'HTTP Error 429: Too many requests'
- 'Error: Insufficient funds for gas * price + value'
- '403: Unable to transfer assets. Please check, that your address contains all the
  tokens you want to transfer.'
- Error 500 Internal Server Error
- Error message from the KMS
- 'INVALID_API_KEY: Check your API key.'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of requests.'
- 'malformed UTF-8: Check the format of your input data'
- '500 Internal Server Error: Check service status or retry later'
- 'Malformed UTF-8 data error: Ensure data is properly encoded'
- If you lose your KMS password, you will lose access to the Mnemonics and PrivateKeys
  stored in wallet.dat
- If wallet.dat is lost or becomes irrecoverable, you will lose access to your Mnemonics
  and PrivateKeys.
- The responsibility for keeping the file wallet.dat secure and accessible rests solely
  with you, the User.
- Contacting Tatum Staff over issues to recover the password or wallet.dat won't provide
  a positive outcome. Tatum cannot help you.
- 'Error 429: Too many requests, please slow down.'
- 'Error 500: Internal server error, please try again later.'
- missing trie node 0000000000000000000000000000000000000000000000000000000000000000
  (path ) <nil>
- 429 Over Rate Limit
- over rate limit
- 'reexec=128: This error may occur on your Node RPC calls.'
- '400 Bad Request: Check the request parameters'
- 'Already Known: The transaction hash provided already exists in the node’s memory
  pool and has been previously broadcasted.'
- 'hash sort failed: loadIntoTable : subTrieRoot(...) != cellHash(...)'
- 'Max Fee Per Gas Less Than Block Base Fee: The maxFeePerGas value in the transaction
  payload is lower than the network''s base fee at the time of submission.'
- Max Fee Per Gas Less Than Block Base Fee
- 'tracing failed: insufficient funds for gas * price + value'
- 'Error: tracing failed: insufficient funds for gas * price + value'
- '401 Unauthorized: Ensure API key is valid'
- 'Reverted: Indicates the transaction has failed.'
- 'Method not found: eth_newFilter'
- '400: invalid parameter, error: failed to attach block: protocolVersion invalid:
  0: invalid block: code=400, message=invalid parameter'
- 'Invalid API key: Ensure you are using a valid API key.'
- 'Timeout: Increase timeout parameter if needed.'
- '404 Not Found: Transaction not found'
- execution timeout
- '403: Unable to broadcast transaction - 64: tx-size'
- 'Error 64: tx-size'
- 'Dogecoin: Error 64: tx-size'
- 'Invalid API Key: Ensure the API key is correct.'
- 'Transaction not found: Verify the transaction hash.'
- 'Network Error: Check your network connection.'
- '-32010: Tokenkeg####### excluded from account secondary indexes; this RPC method
  unavailable for key'
- 'Error: Transaction not found'
- 'Error: Rate limit exceeded'
- '401 Unauthorized: Check your API key and secret.'
- 'Invalid API key: Ensure that your API key is correct and has not expired.'
- 'eth.tx.not.found: Transaction not found. Possible not exists or is still pending.'
- 'btc.tx.not.found: Transaction not found. Possible not exists or is still pending.'
- 'Contract creation code storage out of gas: Ensure enough gas is available for the
  transaction.'
- 'Fee cap less than block base fee: Verify the fee cap against the current block
  base fee.'
- 'Returned error: fee cap less than block base fee: address ###, gasFeeCap: 14597473823
  baseFee: 15146212371'
- Unable to broadcast transaction.
- replacement transaction underpriced [-32000]
- 'RATE_LIMIT_EXCEEDED: Too many requests in a short time.'
- '403: Unable to broadcast transaction. Cause: Timeout. Detail: Your request timed
  out before completing. Please try your request again.'
- xlm.account.not.found
- '404: Account ##### not found on mainnet. Probably there were no assets sent there
  before.'
- 'xlm.account.not.found: The resource at the url requested was not found.'
- 'Insufficient Gas Fees: Ensure you have enough native assets to pay for the transaction.'
- 'Insufficient assets: Ensure you have enough native and token assets for the transaction.'
- 'Invalid Parameters: Incorrect data inputs.'
- 'REQUEST_LIMIT_EXCEEDED: Reduce the request frequency.'
- Error - "Contract Creation Code Storage Out of Gas"
- Error - "Fee cap less than block base fee"
- Error - "Already Known"
- '40X: Unable to broadcast transaction. Transaction already exists in mempool'
- 'btc.blockchain.broadcast.error: Unable to broadcast transaction. Transaction already
  exists in mempool'
- '403: Unable to broadcast transaction.'
- '500: Request failed with status code 500'
- '-32000: Server error'
- 'statusCode: 403, errorCode: ###.blockchain.broadcast.error, message: Unable to
  broadcast transaction, cause: dust (code 64)'
- 'statusCode: 403'
- 'errorCode: ###.blockchain.broadcast.error'
- 'message: Unable to broadcast transaction.'
- 'cause: too-long-mempool-chain'
- Transaction has not been confirmed yet (Error 403)
- '403 Forbidden: Transaction has not been confirmed yet'
- '403: Transaction has not been confirmed yet. The transaction could still be accepted
  by the Solana network.'
- 'errorCode: sol.broadcast.failed'
- 'cause: failed to send transaction: failed to deserialize solana_sdk::transaction::versioned::VersionedTransaction:
  io error: failed to fill whole buffer'
- 'Error processing Instruction 0: custom program error: 0x1'
- 'Error processing Instruction 0: Provided owner is not allowed'
- InsufficientFundsForRent
- '400 Bad Request: Invalid request parameters'
- Too many accounts requested, limit is 10,000,000
- 'KMS_FAILED_TX: Transaction not confirmed.'
- 'Invalid API key: Check your API key and try again.'
- 'Rate limit exceeded: Too many requests in a given time period.'
- '403: Cannot send TRC-20 transaction. Cause: callback is not defined'
- '404 Not Found: Verify the endpoint URL.'
- 'INVALID_PARAMETER: Ensure the address is in Base58 format and the freeze amount
  is valid'
- 'ACCOUNT_PERMISSION_ERROR: Double-check the private key used for signing'
- 'NO_FROZEN_BALANCE: Verify the resource type and inspect staked balances'
- 'UNFREEZE_NOT_READY: Wait at least 72 hours after freezing before unfreezing'
- 'tron.blockchain.broadcast.error: Unable to broadcast transaction, cause: Tapos
  check error.'
- 'tron.account.not.found: No such account for address: <address>'
- '401 Unauthorized: Invalid API key or insufficient permissions.'
- '403: Account not found. Code: 19'
- '401 Unauthorized: Invalid API key provided.'
- '400 Bad Request: Check the request parameters or body.'
- '404 Not Found: Ensure the endpoint exists.'
- '403: Can''t estimate gas price at the moment, please try again later.'
- 'eth.fees.not.found: Can''t estimate gas price at the moment, please try again later.'
- 'btc.fees.not.found: Can''t estimate gas price at the moment, please try again later.'
- '403: Transaction preparation failure.'
- 'eth.tx.preparation: Insufficient funds send transaction'
- 'bsc.tx.preparation: Insufficient funds to send transaction'
- '403: Unable to broadcast transaction. Set lower fee or check change address to
  be present'
- 'FAILED - Out of Energy: When sending TRC-10 / TRC-20 tokens, the wallet may have
  insufficient TRX or lack energy and bandwidth.'
- '401 Unauthorized: Check if the API key is valid.'
- 'networkError: true'
- 'KMS_FAILED_TX: Triggered due to the error in broadcasting but inclusion in the
  chain.'
- 'ADDRESS_EVENT: Triggered despite the apparent failure indication, owing to XRP''s
  design.'
- Transactions sent with an incorrect or missing 'message' or 'destinationTag' cannot
  be credited.
- 'errorCode: account.xpub.incompatible'
- 'message: Xpub not compatible with account currency.'
- VA - Error XPUB not compatible
- '403: btc.tx.preparation: Transaction preparation failure.'
- 'offchain.tron.tx.failed: TRON withdrawal error.'
- '403: Insufficient balance for account ######### and payment amount 9. Sender balance
  is 0.2.'
- '403: offchain.tron.tx.failed: Unable to prepare transaction.'
- 'offchain.tron.tx.failed: Error in TRON withdrawal'
- '400 Bad Request: Check if the request parameters are correct.'
- '401 Unauthorized: Verify API key validity.'
- '403: Unable to prepare withdrawal, last withdrawal with id "####" is not yet processed
  by blockchain.'
- '500 Internal Server Error: Transaction not found on external system. ID: ####'
- Malformed UTF-8 data
- '403: Transaction expired and cannot be broadcast after 1705324314000.'
- 'Invalid API Key: Check your API key and try again.'
- 'Rate limit exceeded: Reduce the frequency of API calls.'
- 'Attention: Be mindful of Daily Charges.'
- 'Attention: Legacy yearly plans apply to all subscriptions started before January
  7, 2025.'
- '"Card Declined": Your bank rejected the transaction.'
- '"Insufficient Funds": Your card doesn’t have enough balance.'
- '"Expired Card": Your card has expired.'
- Refund requests must be made within 15 calendar days of the original purchase date.
- Refunds are available only if less than 50% of the purchased monthly credits or
  API quota has been used.
- This guarantee applies only to self-service subscription plans purchased via the
  Tatum.io website. It does not apply to custom Business contracts or off-platform
  agreements.
- If a refund is requested due to a service issue (e.g., uptime, latency, or feature
  unavailability), we may request logs or supporting evidence.
- Refunds are not available for legacy or discontinued pricing plans.
- '401 Unauthorized: Check API key and permissions'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
client:
  base_url: https://api.tatum.io
source_metadata: null
