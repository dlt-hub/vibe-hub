Hereâ€™s a YAML configuration for the `tempo_time_tracking` REST API source based on the provided documentation:

client:
  base_url: "https://api.tempo.io/"
  auth:
    type: "bearer"
    # Additional auth parameters if needed

resources:
  - name: "accounts"
    endpoint: "/api/v2/accounts"  # Hypothetical endpoint based on common API practices
    method: "GET"
    params:
      # No specific query parameters mentioned in the documentation
    data_selector: "$"  # Selects all data from the response

  - name: "customers"
    endpoint: "/api/v2/customers"  # Hypothetical endpoint
    method: "GET"
    params:
      # No specific query parameters mentioned in the documentation
    data_selector: "$"

  - name: "worklogs"
    endpoint: "/api/v2/worklogs"  # Hypothetical endpoint
    method: "GET"
    params:
      # No specific query parameters mentioned in the documentation
    data_selector: "$"

  - name: "workload_schemes"
    endpoint: "/api/v2/workload-schemes"  # Hypothetical endpoint
    method: "GET"
    params:
      # No specific query parameters mentioned in the documentation
    data_selector: "$"

notes:
  - "Ensure that the API token generated has the necessary permissions to access the resources."
  - "Check for rate limits on the API; typically, APIs limit the number of requests per minute."
  - "Refer to the official documentation for specific requirements related to each endpoint."

errors:
  - 401  # Unauthorized
  - 403  # Forbidden
  - 429  # Too Many Requests

auth_info:
  mentioned_objects:
    - "API token must be generated from Tempo settings under Data Access."
    - "Authentication is based on OAuth 2.0 with a bearer token flow."

source_metadata:
  description: "The Tempo Time Tracking API provides access to account information, customer details, worklogs, and workload scheme configurations."
### Explanation:
1. **Base URL**: Extracted from the documentation as `https://api.tempo.io/`.
2. **Authentication**: Identified as Bearer token.
3. **Endpoints**: Included four main resources (`accounts`, `customers`, `worklogs`, and `workload_schemes`). Hypothetical endpoints are used for demonstration; actual endpoints should be confirmed with the API documentation.
4. **Query Parameters**: No specific query parameters are mentioned in the provided documentation, hence left empty.
5. **Notes**: Included helpful notes regarding authentication, permissions, and rate limits.
6. **Errors**: Listed common HTTP error codes relevant to API interactions.
7. **Source Metadata**: Provided a brief description of what the API offers based on the documentation context.