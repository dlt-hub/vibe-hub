resources:
- name: documents
  endpoint:
    path: /documents
    method: POST
    data_selector: null
    params: {}
- name: retrievals
  endpoint:
    path: /retrievals
    method: GET
    data_selector: null
    params: {}
- name: Create Document
  endpoint:
    path: /documents
    method: POST
- name: documents
  endpoint:
    path: /documents
    method: POST
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: results
    params: {}
- name: create_document_raw
  endpoint:
    path: /documents/raw
    method: POST
- name: Create Document From Url
  endpoint:
    path: /documents/url
    method: POST
- name: get_document
  endpoint:
    path: /documents/{document_id}
    method: GET
- name: delete_document
  endpoint:
    path: /documents/{document_id}
    method: DELETE
- name: update_document_file
  endpoint:
    path: /documents/{document_id}/file
    method: PUT
- name: update_document_raw
  endpoint:
    path: /documents/{document_id}/raw
    method: PUT
- name: update_document_url
  endpoint:
    path: /documents/{document_id}/url
    method: PUT
- name: patch_document_metadata
  endpoint:
    path: /documents/{document_id}/metadata
    method: PATCH
- name: document_chunks
  endpoint:
    path: /documents/{document_id}/chunks
    method: GET
    data_selector: chunks
- name: Get Document Chunk
  endpoint:
    path: /documents/{document_id}/chunks/{chunk_id}
    method: GET
- name: get_document_chunk_content
  endpoint:
    path: /documents/{document_id}/chunks/{chunk_id}/content
    method: GET
- name: get_document_content
  endpoint:
    path: /documents/{document_id}/content
    method: GET
- name: get_document_source
  endpoint:
    path: /documents/{document_id}/source
    method: GET
- name: Get Document Summary
  endpoint:
    path: /documents/{document_id}/summary
    method: GET
- name: retrieve
  endpoint:
    path: /retrievals
    method: POST
- name: list_instructions
  endpoint:
    path: /instructions
    method: GET
- name: create_instruction
  endpoint:
    path: /instructions
    method: POST
- name: update_instruction
  endpoint:
    path: /instructions/{instruction_id}
    method: PUT
- name: Delete Instruction
  endpoint:
    path: /instructions/{instruction_id}
    method: DELETE
- name: instruction_extracted_entities
  endpoint:
    path: /instructions/{instruction_id}/entities
    method: GET
    data_selector: entities
    params: {}
- name: Get Document Extracted Entities
  endpoint:
    path: /documents/{document_id}/entities
    method: GET
- name: connections
  endpoint:
    path: /connections
    method: GET
    data_selector: results
- name: create_connection
  endpoint:
    path: /connection
    method: POST
- name: Create Oauth Redirect Url
  endpoint:
    path: /connections/oauth
    method: POST
- name: connection_source_types
  endpoint:
    path: /connections/source-type
    method: GET
- name: Set Connection Enabled
  endpoint:
    path: /connections/{connection_id}/enabled
    method: PUT
- name: update_connection
  endpoint:
    path: /connections/{connection_id}
    method: PUT
- name: connections
  endpoint:
    path: /connections/{connection_id}
    method: GET
- name: get_connection_stats
  endpoint:
    path: /connections/{connection_id}/stats
    method: GET
- name: Set Connection Limits
  endpoint:
    path: /connections/{connection_id}/limit
    method: PUT
- name: Delete Connection
  endpoint:
    path: /connections/{connection_id}/delete
    method: POST
- name: connections
  endpoint:
    path: /connections/{connection_id}/sync
    method: POST
- name: partitions
  endpoint:
    path: /partitions
    method: GET
    data_selector: results
- name: partitions
  endpoint:
    path: /partitions
    method: POST
- name: Get Partition
  endpoint:
    path: /partitions/{partition_id}
    method: GET
- name: Delete Partition
  endpoint:
    path: /partitions/{partition_id}
    method: DELETE
- name: set_partition_limits
  endpoint:
    path: /partitions/{partition_id}/limits
    method: PUT
- name: authenticators
  endpoint:
    path: /authenticators
    method: POST
- name: authenticators
  endpoint:
    path: /authenticators
    method: GET
    data_selector: results
- name: authenticators
  endpoint:
    path: /authenticators/{authenticator_id}/connection
    method: POST
- name: delete_authenticator
  endpoint:
    path: /authenticators/{authenticator_id}
    method: DELETE
- name: event
  endpoint:
    path: /reference/eventevent_post
    method: POST
- name: documents
  endpoint:
    path: /documents
    method: POST
- name: retrievals
  endpoint:
    path: /retrievals
    method: GET
- name: documents
  endpoint:
    path: /documents
    method: POST
    data_selector: response
    params: {}
- name: retrieve_chunks
  endpoint:
    path: /reference/retrieve
    method: GET
    data_selector: scored_chunks
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: result.documents
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: result.documents
- name: create_document
  endpoint:
    path: /documents/create
    method: POST
- name: get_document_chunks
  endpoint:
    path: /documents/docId/chunks
    method: GET
- name: get_document_chunk
  endpoint:
    path: /documents/docId/chunks/chunkId
    method: GET
- name: get_document_chunk_content
  endpoint:
    path: /documents/docId/chunks/chunkId/content
    method: GET
- name: retrievals
  endpoint:
    path: /documents/retrieve
    method: POST
- name: documents
  endpoint:
    path: /documents
    method: POST
    data_selector: result
- name: document_chunks
  endpoint:
    path: /documents/{documentId}/chunks
    method: GET
    data_selector: chunks
- name: document_chunk
  endpoint:
    path: /documents/{documentId}/chunks/{chunkId}
    method: GET
    data_selector: chunk
- name: document_chunk_content
  endpoint:
    path: /documents/{documentId}/chunks/{chunkId}/content
    method: GET
    data_selector: content
- name: retrievals
  endpoint:
    path: /documents/docId/chunks/chunkId
    method: GET
    data_selector: scored_chunks
- name: retrievals
  endpoint:
    path: /retrievals
    method: GET
    data_selector: scored_chunks
- name: pages
  endpoint:
    path: /rest/api/content
    method: GET
    data_selector: results
- name: dropbox_files
  endpoint:
    path: /dropbox/files
    method: GET
    data_selector: files
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: files
- name: articles
  endpoint:
    path: /api/v2/articles
    method: GET
    data_selector: articles
- name: tickets
  endpoint:
    path: /api/v2/tickets
    method: GET
    data_selector: tickets
- name: articles
  endpoint:
    path: /articles
    method: GET
- name: tickets
  endpoint:
    path: /tickets
    method: GET
- name: files
  endpoint:
    path: /sync/files
    method: GET
    data_selector: files
    params: {}
- name: service_account
  endpoint:
    path: /service_accounts
    method: POST
    data_selector: serviceAccount
    params: {}
- name: service_account_key
  endpoint:
    path: /service_accounts/{account_id}/keys
    method: POST
    data_selector: key
    params:
      key_type: JSON
- name: email
  endpoint:
    path: /gmail/v1/users/me/messages
    method: GET
- name: companies
  endpoint:
    path: /companies/v2/companies
    method: GET
- name: contacts
  endpoint:
    path: /contacts/v1/contact
    method: GET
- name: deals
  endpoint:
    path: /deals/v1/deal
    method: GET
- name: emails
  endpoint:
    path: /emails/v1/emails
    method: GET
- name: feedback_submissions
  endpoint:
    path: /feedback/v1/submissions
    method: GET
- name: goal_targets
  endpoint:
    path: /goals/v1/targets
    method: GET
- name: leads
  endpoint:
    path: /leads/v1/leads
    method: GET
- name: line_items
  endpoint:
    path: /line_items/v1/line_items
    method: GET
- name: meetings
  endpoint:
    path: /meetings/v1/meetings
    method: GET
- name: notes
  endpoint:
    path: /notes/v1/notes
    method: GET
- name: products
  endpoint:
    path: /products/v1/products
    method: GET
- name: tasks
  endpoint:
    path: /tasks/v1/tasks
    method: GET
- name: tickets
  endpoint:
    path: /tickets/v1/tickets
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: issues
  endpoint:
    path: /issues
    method: GET
- name: companies
  endpoint:
    path: /companies/v2/companies
    method: GET
- name: contacts
  endpoint:
    path: /contacts/v1/lists/all/contacts/all
    method: GET
- name: deals
  endpoint:
    path: /deals/v1/deal/
    method: GET
- name: emails
  endpoint:
    path: /email/public/v1/singleEmail
    method: GET
- name: feedback_submissions
  endpoint:
    path: /feedback/v1/submissions
    method: GET
- name: goal_targets
  endpoint:
    path: /goals/v1/goals
    method: GET
- name: leads
  endpoint:
    path: /lead/v1/leads
    method: GET
- name: line_items
  endpoint:
    path: /line_items/v1/line_items
    method: GET
- name: meetings
  endpoint:
    path: /meetings/v1/meetings
    method: GET
- name: notes
  endpoint:
    path: /notes/v1/notes
    method: GET
- name: products
  endpoint:
    path: /products/v1/products
    method: GET
- name: tasks
  endpoint:
    path: /tasks/v1/tasks
    method: GET
- name: tickets
  endpoint:
    path: /tickets/v1/tickets
    method: GET
- name: admins
  endpoint:
    path: /admins
    method: GET
    data_selector: admins
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
- name: help_center_articles
  endpoint:
    path: /help_center_articles
    method: GET
    data_selector: articles
- name: tickets
  endpoint:
    path: /tickets
    method: GET
    data_selector: tickets
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: issues
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
    params: {}
- name: pages
  endpoint:
    path: /sync/pages
    method: GET
    data_selector: block_elements
    params: {}
- name: admins
  endpoint:
    path: /admins
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: records
- name: help_center_articles
  endpoint:
    path: /help_center_articles
    method: GET
    data_selector: records
- name: tickets
  endpoint:
    path: /tickets
    method: GET
    data_selector: records
- name: sync_folder
  endpoint:
    path: /sync/folder
    method: POST
    data_selector: files
    params: {}
- name: files
  endpoint:
    path: /files
    method: GET
- name: s3_bucket
  endpoint:
    path: /s3/bucket
    method: GET
- name: s3_bucket_prefix
  endpoint:
    path: /s3/bucket/prefix
    method: GET
- name: Contacts
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Cases
  endpoint:
    path: /services/data/vXX.X/sobjects/Case
    method: GET
    data_selector: records
- name: Accounts
  endpoint:
    path: /services/data/vXX.X/sobjects/Account
    method: GET
    data_selector: records
- name: Opportunities
  endpoint:
    path: /services/data/vXX.X/sobjects/Opportunity
    method: GET
    data_selector: records
- name: Contacts
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
- name: Cases
  endpoint:
    path: /services/data/vXX.X/sobjects/Case
    method: GET
- name: Accounts
  endpoint:
    path: /services/data/vXX.X/sobjects/Account
    method: GET
- name: Opportunities
  endpoint:
    path: /services/data/vXX.X/sobjects/Opportunity
    method: GET
- name: messages
  endpoint:
    path: /api/conversations.history
    method: GET
    data_selector: messages
    params: {}
- name: files
  endpoint:
    path: /api/files
    method: GET
    data_selector: records
- name: articles
  endpoint:
    path: /articles
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /api/conversations.history
    method: GET
    data_selector: messages
    params: {}
- name: articles
  endpoint:
    path: /hc/en-us/articles
    method: GET
    data_selector: articles
- name: Import Mode
  endpoint:
    path: /docs/mode
    method: GET
    data_selector: content
    params: {}
- name: connections
  endpoint:
    path: /connections/oauth
    method: POST
    data_selector: url
    params:
      source_type: google_drive
      redirect_uri: https://example.com/link/to/your/application
- name: webhook_events
  endpoint:
    path: /webhooks/events
    method: POST
    data_selector: webhook_events
    params: {}
- name: connections
  endpoint:
    path: /connections
    method: GET
    data_selector: ''
- name: enable_disable_connection
  endpoint:
    path: /connections/{connection_id}/enabled
    method: PUT
    data_selector: ''
- name: update_connection
  endpoint:
    path: /connections/{connection_id}
    method: PUT
    data_selector: ''
- name: get_connection_statistics
  endpoint:
    path: /connections/{connection_id}/stats
    method: GET
    data_selector: ''
- name: delete_connection
  endpoint:
    path: /connections/{connection_id}
    method: POST
    data_selector: ''
- name: list_connections
  endpoint:
    path: /connections
    method: GET
- name: enable_disable_connection
  endpoint:
    path: /connections/{connection_id}/enabled
    method: PUT
- name: update_connection
  endpoint:
    path: /connections/{connection_id}
    method: PUT
- name: get_connection_statistics
  endpoint:
    path: /connections/{connection_id}/stats
    method: GET
- name: delete_connection
  endpoint:
    path: /connections/{connection_id}
    method: POST
- name: create_instruction
  endpoint:
    path: /reference/createinstruction
    method: POST
    data_selector: instruction
    params: {}
- name: upload_documents
  endpoint:
    path: /reference/createdocument
    method: POST
    data_selector: document
    params: {}
- name: retrieve_entities_by_document
  endpoint:
    path: /reference/listentitiesbydocument
    method: GET
    data_selector: entities
    params: {}
- name: retrieve_entities_by_instruction
  endpoint:
    path: /reference/listentitiesbyinstruction
    method: GET
    data_selector: entities
    params: {}
- name: partitions
  endpoint:
    path: /reference/partitions
    method: GET
    data_selector: partitions
    params: {}
- name: create_partition
  endpoint:
    path: /reference/create_partition_partitions_post
    method: POST
    data_selector: partition
    params: {}
- name: get_partition
  endpoint:
    path: /reference/get_partition_partitions__partition_id__get
    method: GET
    data_selector: usage_information
    params: {}
- name: set_partition_limits
  endpoint:
    path: /reference/set_partition_limits_partitions__partition_id__limits_put
    method: PUT
    data_selector: limits
    params: {}
- name: delete_partition
  endpoint:
    path: /reference/delete_partition_partitions__partition_id__delete
    method: DELETE
    data_selector: delete_status
    params: {}
- name: create_instruction
  endpoint:
    path: /reference/createinstruction
    method: POST
    data_selector: instruction
    params: {}
- name: create_documents
  endpoint:
    path: /reference/createdocument
    method: POST
    data_selector: document
    params: {}
- name: list_entities_by_document
  endpoint:
    path: /reference/listentitiesbydocument
    method: GET
    data_selector: entities
    params: {}
- name: list_entities_by_instruction
  endpoint:
    path: /reference/listentitiesbyinstruction
    method: GET
    data_selector: entities
    params: {}
- name: webhook_events
  endpoint:
    path: /webhooks
    method: POST
    data_selector: events
    params: {}
- name: partitions
  endpoint:
    path: /reference/create_partition_partitions_post
    method: POST
    data_selector: partitions
    params: {}
- name: get_partition
  endpoint:
    path: /reference/get_partition_partitions__partition_id__get
    method: GET
    data_selector: usage_info
    params: {}
- name: set_partition_limits
  endpoint:
    path: /reference/set_partition_limits_partitions__partition_id__limits_put
    method: PUT
    data_selector: limits
    params: {}
- name: delete_partition
  endpoint:
    path: /reference/delete_partition_partitions__partition_id__delete
    method: DELETE
    data_selector: delete_info
    params: {}
- name: delete_document
  endpoint:
    path: /documents/123
    method: DELETE
    data_selector: null
    params:
      async: 'true'
- name: patch_document_metadata
  endpoint:
    path: /documents/123/metadata
    method: PATCH
    data_selector: null
    params:
      async: 'true'
- name: document_status_updated
  endpoint:
    path: /webhooks/document_status_updated
    method: POST
    data_selector: payload
- name: document_deleted
  endpoint:
    path: /webhooks/document_deleted
    method: POST
    data_selector: payload
- name: entity_extracted
  endpoint:
    path: /webhooks/entity_extracted
    method: POST
    data_selector: payload
- name: connection_sync_started
  endpoint:
    path: /webhooks/connection_sync_started
    method: POST
    data_selector: payload
- name: connection_sync_progress
  endpoint:
    path: /webhooks/connection_sync_progress
    method: POST
    data_selector: payload
- name: connection_sync_finished
  endpoint:
    path: /webhooks/connection_sync_finished
    method: POST
    data_selector: payload
- name: connection_limit_exceeded
  endpoint:
    path: /webhooks/connection_limit_exceeded
    method: POST
    data_selector: payload
- name: partition_limit_exceeded
  endpoint:
    path: /webhooks/partition_limit_exceeded
    method: POST
    data_selector: payload
- name: youtube
  endpoint:
    path: /import/youtube
    method: POST
- name: wordpress
  endpoint:
    path: /import/wordpress
    method: POST
- name: readmeio
  endpoint:
    path: /import/readmeio
    method: POST
- name: files
  endpoint:
    path: /import/files
    method: POST
- name: zip
  endpoint:
    path: /import/zip
    method: POST
- name: delete_document
  endpoint:
    path: /documents/{document_id}
    method: DELETE
    data_selector: status
    params:
      async: 'true'
- name: patch_document_metadata
  endpoint:
    path: /documents/{document_id}/metadata
    method: PATCH
    data_selector: status
    params:
      async: 'true'
notes:
- API keys should never be checked into source code repositories or used directly
  in a client such as a web browser.
- Results are paginated with a max limit of 100. When more documents are available,
  a cursor will be provided.
- Ragie can process documents in different modes depending on the file type.
- Uses API key for authentication
- By default, chunks are retrieved with rerank=true
- Ragie searches for semantic similarity and the options to use will vary depending
  on your data and the queries you're making.
- The response from the Create Document API is the same for any file type.
- For audio and video files, the response includes `end_time` and `start_time` in
  the `metadata` field in each chunk.
- The API may return nulls in deeply nested fields.
- You need to use a proxy URL to provide Bearer authentication using your Ragie API
  key.
- You need to use a proxy URL in the src prop to provide Bearer authentication using
  your Ragie API key.
- Ragie supports various audio and video file types
- Ragie needs permissions to this data.
- To keep your files up to date, Ragie performs a sync for all connections every 4
  hours.
- If you need to see the changes immediately, you can manually trigger a Sync now.
- The Confluence connection will sync all of the pages you have access to.
- Spaces with Page content that are not in 'draft' status
- The Backblaze connection will keep a Backblaze Bucket Folder and everything in it,
  including subfolders, in sync.
- Spaces with Page content that are not in 'draft' status are synced.
- 'Fill out the Bucket you want to connect under: Allow access to Bucket(s):'
- For Type of Access, select 'Read Only'
- Everything in the dropbox folder you selected, including subfolders.
- Each Dropbox file includes metadata such as folder, folder_path, file_path_array,
  and file_path.
- The domain is the 'acme' part of https://acme.freshdesk.com
- All documents created by the connection will be attributed to the selected API key.
- The S3 connection will keep a GCS Bucket Folder and everything in it, including
  subfolders, in sync.
- To use the GCS connector, we need to create a User with the appropriate permissions.
- Ragie won't sync emails that aren't labeled.
- The Gmail connector will automatically provide set a labels metadata that match
  the labels in Gmail.
- Non-Google Files - all files supported by Ragie are synced.
- Calendar invites are NOT supported and do not sync.
- The Jira connection will keep Projects, Issues and their comments in sync.
- You are only allowed one Notion connector per account per workspace.
- Notion OAuth has a strange flow where the same token is returned for the same integration
  and workspace.
- Databases are currently **NOT** synced.
- The S3 connection will keep a S3 Bucket Folder and everything in it, including subfolders,
  in sync.
- The Onedrive connection will keep a Onedrive folder and everything in it, including
  subfolders, in sync.
- Create a User with the appropriate permissions to access a bucket.
- The Sharepoint connection will keep Sharepoint folder(s) and everything in them,
  including subfolders, in sync.
- You must have permissions to add a Slack App to create a Slack Connection
- Our Slack App is currently undergoing review, you will see a warning at the moment
  when you connect
- All published Zendesk articles are synced. Drafts are not synced.
- A Ragie app will be added to your workspace. This allows us to interact with Slack
  to pull data.
- Our Slack App is currently undergoing review, you will see a warning at the moment
  when you connect.
- At the moment our Zendesk Connector requires an API Token.
- The domain is at the top of the last screenshot. It is also the ragieai of https://ragieai.zendesk.com.
- The Webcrawler connection will crawl a url and any links it finds, creating a page
  per url.
- This feature is currently in beta and subject to change
- 'Static import mode for non audio/video files includes options: None, Fast, Hi-res.'
- Audio import mode can be On or Off.
- Video import mode options include None, Audio, Video, Audio and Video.
- You will need to contact Ragie to set up a subdomain.
- The Project Number is an optional field for creating an Authenticator, make sure
  you add it.
- If you change your GCP credentials or OAuth data, it can take a few minutes for
  the changes to propagate. Try waiting five minutes before any further attempts.
- If your Google OAuth app is not in production mode and gone through the verification
  process, your app name will not show.
- Redirect URL is required for OAuth connection.
- Optional parameters include metadata, mode, page_limit, and partition.
- Redirects users to authenticate with the integration provider.
- This feature is disabled by default.
- Document summarization is automatic for all compatible document types.
- MCP support also standardizes how Ragie integrates with external AI applications.
- This feature is disabled by default. It can be enabled in Partitions page of the
  web dashboard or programmatically through the API.
- Webhook calls include a signature of the request body in the X-Signature http header.
- Each webhook will have actions to test, delete, and activate or deactivate the endpoint.
- Partitions can be created implicitly or explicitly.
- Documents created without a partition will be in the 'default' partition.
- Requests may be scoped to a partition using the 'partition' http header or a parameter.
- Webhook handling should be idempotent, a nonce is provided to facilitate this.
- Ragie webhooks guarantee at least once delivery up to the retry limit.
- Set your API key as an environment variable before using Ragie CLI.
- Custom rate limits are available on the Enterprise plan.
- 'Configure API Key as an environment variable: export RAGIE_API_KEY=your_api_key_here'
errors:
- 401 Unauthorized
- 402 Payment Required
- 422 Validation Error
- 429 Too Many Requests
- 'Rate Limits: Check rate limits on API usage.'
- 'Document Processing Errors: Ensure documents are in supported formats.'
- 'RateLimitExceeded: Please reduce the frequency of requests'
- 'InvalidQuery: Check the structure of your query'
- '401 Unauthorized: Recheck API key or token expiration'
- Failed to retrieve or process documents
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Error fetching transcription stream
- 'Rate limit exceeded: Reduce the frequency of requests.'
- 'Unauthorized: Check API key and permissions.'
- Rate limits may apply.
- 'access_denied: Error occurred during authentication.'
- '400: Bad request'
- '401: Authentication failure'
- '402: Pages processed exceeded'
- '402: Retrievals exceeded'
- '402: Media processed exceeded'
- '402: Media streamed exceeded'
- '403: Document count limit exceeded'
- '403: Ragie Connect not enabled'
- '403: Feature flag disabled'
- '404: Resource not found'
- '429: Rate limit exceeded'
- '500: Internal server error'
- Document is empty
- Exceeded page processing limit
- Unable to download file
- Unsupported mime type
- PDF file exceeds maximum page limit
- An unknown error occurred.
- '400: Bad request: The request was invalid or cannot be otherwise served.'
- '401: Authentication failure: Your request did not provide a valid or well-formatted
  API key.'
- '402: Pages processed exceeded: Exceeded page processing limit.'
- '402: Retrievals exceeded: Exceeded retrieval limit.'
- '402: Media processed exceeded: Exceeded media processing limit.'
- '402: Media streamed exceeded: Exceeded media streaming limit.'
- '403: Document count limit exceeded: The document limit for your current plan has
  been exceeded.'
- '403: Ragie Connect not enabled: You do not have the connector enabled.'
- '403: Feature flag disabled: The feature flag has not been enabled for the user.'
- '404: Resource not found: The specified resource was not found.'
- '429: Rate limit exceeded: The rate limit for your current plan has been exceeded.'
- '500: Internal server error: An unexpected error occurred on the server.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.ragie.ai
  auth:
    type: Bearer
source_metadata: null
