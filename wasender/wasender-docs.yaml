resources:
- name: Get All WhatsApp Sessions
  endpoint:
    path: /api/whatsapp-sessions
    method: GET
- name: Create WhatsApp Session
  endpoint:
    path: /api/whatsapp-sessions
    method: POST
- name: Get WhatsApp Session Details
  endpoint:
    path: /api/whatsapp-sessions/{whatsappSession}
    method: GET
- name: Get WhatsApp Session Status
  endpoint:
    path: /api/status
    method: GET
- name: Get All Contacts
  endpoint:
    path: /api/contacts
    method: GET
- name: Get Contact Info
  endpoint:
    path: /api/contacts/{contactPhoneNumber}
    method: GET
- name: Send Text Message
  endpoint:
    path: /api/send-message
    method: POST
- name: Send Image Message
  endpoint:
    path: /api/send-message
    method: POST
- name: Send Document Message
  endpoint:
    path: /api/send-message
    method: POST
- name: Get Group Metadata
  endpoint:
    path: /api/groups/{groupJid}/metadata
    method: GET
- name: Create a New Group
  endpoint:
    path: /api/groups
    method: POST
- name: whatsapp_sessions
  endpoint:
    path: /api/whatsapp-sessions
    method: GET
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
- name: messages
  endpoint:
    path: /api/messages
    method: POST
- name: groups
  endpoint:
    path: /api/groups
    method: GET
- name: send_message
  endpoint:
    path: /send-message
    method: POST
    data_selector: response
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: payload
    params: {}
- name: messages.upsert
  endpoint:
    path: /messages/upsert
    method: POST
    data_selector: data.messages
    params: {}
- name: send_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
- name: send_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: success
    params: {}
- name: webhook
  endpoint:
    path: /whatsapp-in
    method: POST
    data_selector: ''
    params: {}
- name: send_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: success
- name: send_message
  endpoint:
    path: /send-message
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /messages/upsert
    method: POST
    data_selector: data.messages
- name: contacts
  endpoint:
    path: /contacts/get-all-contacts
    method: GET
    data_selector: contacts
- name: groups
  endpoint:
    path: /groups/get-all-groups
    method: GET
    data_selector: groups
- name: sessions
  endpoint:
    path: /sessions
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: POST
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: groups
  endpoint:
    path: /groups
    method: GET
- name: whatsapp_sessions
  endpoint:
    path: /api/whatsapp-sessions
    method: GET
    data_selector: data
- name: whatsapp_sessions
  endpoint:
    path: /api/whatsapp-sessions
    method: GET
    data_selector: data
- name: whatsapp_session
  endpoint:
    path: /api/whatsapp-sessions
    method: POST
    data_selector: data
    params: {}
- name: whatsapp_session
  endpoint:
    path: /api/whatsapp-sessions
    method: POST
    data_selector: data
    params: {}
- name: whatsapp_session
  endpoint:
    path: /api/whatsapp-sessions/{whatsappSession}
    method: GET
    data_selector: data
    params:
      whatsappSession: integer
- name: whatsapp_session
  endpoint:
    path: /api/whatsapp-sessions/{whatsappSession}
    method: GET
    data_selector: data
    params:
      whatsappSession: integer
- name: whatsapp_session
  endpoint:
    path: /api/whatsapp-sessions/{whatsappSession}
    method: PUT
    data_selector: data
    params:
      whatsappSession: integer
- name: whatsapp_session
  endpoint:
    path: /api/whatsapp-sessions/{whatsappSession}
    method: PUT
    data_selector: data
    params:
      whatsappSession: integer
- name: session_status
  endpoint:
    path: /status
    method: GET
    data_selector: status
    params: {}
- name: delete_whatsapp_session
  endpoint:
    path: /api/whatsapp-sessions/{whatsappSession}
    method: DELETE
    data_selector: null
    params:
      whatsappSession: integer
- name: delete_whatsapp_session
  endpoint:
    path: /api/whatsapp-sessions/{whatsappSession}
    method: DELETE
    data_selector: ''
    params:
      whatsappSession: integer
- name: connect_whatsapp_session
  endpoint:
    path: /api/whatsapp-sessions/{whatsappSession}/connect
    method: POST
    data_selector: data
    params:
      whatsappSession: integer
- name: connect_whatsapp_session
  endpoint:
    path: /api/whatsapp-sessions/{whatsappSession}/connect
    method: POST
- name: qr_code
  endpoint:
    path: /api/whatsapp-sessions/{whatsappSession}/qrcode
    method: GET
    params:
      whatsappSession: integer
- name: whatsapp_session_qrcode
  endpoint:
    path: /api/whatsapp-sessions/{whatsappSession}/qrcode
    method: GET
    data_selector: data.qrCode
    params:
      whatsappSession: integer
- name: disconnect_whatsapp_session
  endpoint:
    path: /api/whatsapp-sessions/{whatsappSession}/disconnect
    method: POST
    params:
      whatsappSession: integer
- name: disconnect_whatsapp_session
  endpoint:
    path: /api/whatsapp-sessions/{whatsappSession}/disconnect
    method: POST
    data_selector: data
    params:
      whatsappSession: integer
- name: session_user_info
  endpoint:
    path: /api/user
    method: GET
    data_selector: data
- name: session_user_info
  endpoint:
    path: /api/user
    method: GET
    data_selector: data
- name: check_if_number_is_on_whatsapp
  endpoint:
    path: /api/on-whatsapp/{jid}
    method: GET
    data_selector: data
    params:
      jid: string
- name: check_if_number_is_on_whatsapp
  endpoint:
    path: /api/on-whatsapp/{jid}
    method: GET
    data_selector: data
    params:
      jid: string
- name: regenerate_api_key
  endpoint:
    path: /api/whatsapp-sessionsv/{whatsappSession}/regenerate-key
    method: POST
    data_selector: success
- name: regenerate_api_key
  endpoint:
    path: /api/whatsapp-sessionsv/{whatsappSession}/regenerate-key
    method: POST
    params:
      whatsappSession: integer
- name: send_presence_update
  endpoint:
    path: /send-presence-update
    method: POST
    data_selector: data
    params:
      jid: string
      type: string
- name: decrypt_media
  endpoint:
    path: /api/decrypt-media
    method: POST
    data_selector: success
    params: {}
- name: upload_media_file
  endpoint:
    path: /api/upload
    method: POST
- name: upload_media_file
  endpoint:
    path: /api/upload
    method: POST
    data_selector: success
    params: {}
- name: send_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: recipient phone number in E.164 format or Group JID or Community Channel
        JID
      text: text content of the message
- name: send_image_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: recipient phone number in E.164 format or, Group JID
      text: optional caption text
      imageUrl: URL of the image to send
- name: send_image_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: recipient phone number in E.164 format or Group JID
      text: optional caption text
      imageUrl: URL of the image to send
- name: send_video_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: recipient phone number
      text: optional text
      videoUrl: URL of the video
- name: send_video_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: recipient phone number in E.164 format or, Group JID
      text: The text content of the message
      videoUrl: URL of the video to send
- name: send_document_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: string
      text: string
      documentUrl: string
      fileName: string
- name: send_document_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params: {}
- name: send_audio_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: recipient phone number in E.164 format or, Group JID
      audioUrl: URL of the audio file to send
- name: send_audio_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: recipient phone number in E.164 format or, Group JID
      audioUrl: URL of the audio file to send
- name: send_sticker_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: recipient phone number in E.164 format or Group JID
      text: text content of the message
      stickerUrl: URL of the sticker (.webp) to send
- name: send_sticker_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: '+1234567890'
      stickerUrl: https://example.com/sticker.webp
- name: send_contact_card
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: recipient_phone_number
      contact: contact_object
- name: send_contact_card
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: recipient_phone_number
      contact: contact_object
- name: send_location
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params: {}
- name: send_location
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: recipient phone number in E.164 format or, Group JID
      text: The text content of the message.
      location: Location object.
- name: send_poll_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params: {}
- name: send_poll_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: recipient_phone_number
      poll:
        question: poll_question
        options:
        - option_1
        - option_2
        multiSelect: false
- name: send_quoted_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params: {}
- name: edit_message
  endpoint:
    path: /api/messages/{msgId}
    method: PUT
    data_selector: success
    params:
      msgId: integer
      text: string
- name: edit_message
  endpoint:
    path: /api/messages/{msgId}
    method: PUT
    data_selector: data
    params:
      msgId: integer
      text: string
- name: get_message_info
  endpoint:
    path: /messages/{msgId}/info
    method: GET
    data_selector: data
    params:
      msgId: integer
- name: delete_message
  endpoint:
    path: /api/messages/{msgId}
    method: DELETE
    data_selector: success
    params:
      msgId: integer
- name: contact
  endpoint:
    path: /api/contacts/{contactPhoneNumber}
    method: GET
    data_selector: data
    params:
      contactPhoneNumber: string
- name: contact_info
  endpoint:
    path: /api/contacts/{contactPhoneNumber}
    method: GET
    data_selector: data
    params:
      contactPhoneNumber: string
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
- name: contact_profile_picture
  endpoint:
    path: /api/contacts/{contactPhoneNumber}/picture
    method: GET
    data_selector: data.imgUrl
    params:
      contactPhoneNumber: string
- name: contact_profile_picture
  endpoint:
    path: /api/contacts/{contactPhoneNumber}/picture
    method: GET
    data_selector: data.imgUrl
    params:
      contactPhoneNumber: string
- name: block_contact
  endpoint:
    path: /api/contacts/{contactPhoneNumber}/block
    method: POST
    data_selector: data
    params:
      contactPhoneNumber: string
- name: block_contact
  endpoint:
    path: /api/contacts/{contactPhoneNumber}/block
    method: POST
    data_selector: data
    params:
      contactPhoneNumber: string
- name: unblock_contact
  endpoint:
    path: /api/contacts/{contactPhoneNumber}/unblock
    method: POST
    data_selector: data
    params:
      contactPhoneNumber: string
- name: unblock_contact
  endpoint:
    path: /api/contacts/{contactPhoneNumber}/unblock
    method: POST
    data_selector: data
    params:
      contactPhoneNumber: string
- name: group_profile_picture
  endpoint:
    path: /api/groups/{groupJid}/picture
    method: GET
    data_selector: data.imgUrl
    params:
      groupJid: required
- name: group_profile_picture
  endpoint:
    path: /api/groups/{groupJid}/picture
    method: GET
    data_selector: data.imgUrl
    params:
      groupJid: string
- name: create_group
  endpoint:
    path: /api/groups
    method: POST
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/groups
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /api/groups
    method: GET
    data_selector: data
- name: group_metadata
  endpoint:
    path: /api/groups/{groupJid}/metadata
    method: GET
    data_selector: data
    params:
      groupJid: string
- name: group_metadata
  endpoint:
    path: /api/groups/{groupJid}/metadata
    method: GET
    data_selector: data
    params:
      groupJid: string
- name: update_group_participants
  endpoint:
    path: /api/groups/{groupId}/participants/update
    method: PUT
    data_selector: data.participants
- name: send_group_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params:
      to: Group ID
      text: Text content of the message
- name: send_group_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params: {}
- name: send_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params: {}
- name: group_participants
  endpoint:
    path: /api/groups/{groupJid}/participants
    method: GET
    data_selector: data
    params:
      groupJid: string
- name: group_participants
  endpoint:
    path: /api/groups/{groupJid}/participants
    method: GET
    data_selector: data
    params:
      groupJid: string
- name: add_group_participants
  endpoint:
    path: /api/groups/{groupJid}/participants/add
    method: POST
- name: add_group_participants
  endpoint:
    path: /api/groups/{groupJid}/participants/add
    method: POST
    data_selector: data
    params: {}
- name: remove_group_participants
  endpoint:
    path: /api/groups/{groupJid}/participants/remove
    method: POST
    data_selector: data
    params:
      groupJid: string
      participants: array
- name: remove_group_participants
  endpoint:
    path: /api/groups/{groupJid}/participants/remove
    method: POST
    data_selector: success
    params:
      groupJid: string
      participants: array
- name: update_group_settings
  endpoint:
    path: /api/groups/{groupJid}/settings
    method: PUT
    data_selector: data
    params:
      groupJid: string
- name: Update Group Settings
  endpoint:
    path: /api/groups/{groupJid}/settings
    method: PUT
- name: get_group_invite_link
  endpoint:
    path: /api/groups/{groupJid}/invite-link
    method: GET
    data_selector: success
    params:
      groupJid: string
- name: group_invite_info
  endpoint:
    path: /api/groups/invite/{inviteCode}
    method: GET
    params:
      inviteCode: string
- name: get_group_invite_info
  endpoint:
    path: /api/groups/invite/{inviteCode}
    method: GET
    data_selector: data
    params:
      inviteCode: string
- name: accept_group_invite
  endpoint:
    path: /api/groups/invite/accept
    method: POST
    data_selector: data
    params:
      code: string
- name: accept_group_invite
  endpoint:
    path: /api/groups/invite/accept
    method: POST
    data_selector: data
    params:
      code: string
- name: leave_group
  endpoint:
    path: /api/groups/{groupId}/leave
    method: POST
    data_selector: success
    params:
      groupId: string
- name: leave_group
  endpoint:
    path: /api/groups/{groupId}/leave
    method: POST
    params:
      groupId: string
- name: send_channel_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params: {}
- name: Group Update
  endpoint:
    path: /webhooks/groups.update
    method: POST
    data_selector: data
- name: webhook_group_update
  endpoint:
    path: /api-docs/webhooks/webhook-group-update
    method: POST
- name: group_participants_update
  endpoint:
    path: /webhooks/group-participants-update
    method: POST
    data_selector: data
    params: {}
- name: group_participants_update
  endpoint:
    path: /webhooks/webhook-group-participants-update
    method: POST
    data_selector: data
- name: contact_upsert
  endpoint:
    path: /webhooks/contact-upsert
    method: POST
    data_selector: data
- name: contact_upsert
  endpoint:
    path: /webhooks/contact-upsert
    method: POST
    data_selector: data
    params: {}
- name: contact_update
  endpoint:
    path: /webhooks/contacts.update
    method: POST
    data_selector: data
- name: contact_update
  endpoint:
    path: /webhooks/webhook-contact-update
    method: POST
    data_selector: data
    params: {}
- name: chat_update
  endpoint:
    path: /webhook/chat-update
    method: POST
    data_selector: data
- name: webhook_chat_update
  endpoint:
    path: /api-docs/webhooks/webhook-chat-update
    method: POST
    data_selector: data
- name: message_sent
  endpoint:
    path: /webhooks/webhook-message-sent
    method: POST
    data_selector: data
    params: {}
- name: webhook_group_upsert
  endpoint:
    path: /webhooks/group-upsert
    method: POST
    data_selector: data
- name: webhook_group_upsert
  endpoint:
    path: /api-docs/webhooks/webhook-group-upsert
    method: POST
- name: Webhook Chat Upsert
  endpoint:
    path: /webhooks/chat/upsert
    method: POST
    data_selector: data
- name: Webhook Chat Upsert
  endpoint:
    path: /api-docs/webhooks/webhook-chat-upsert
    method: POST
    data_selector: data
- name: session_status
  endpoint:
    path: /api-docs/webhooks/webhook-session-status
    method: POST
    data_selector: data
    params: {}
- name: chat_delete
  endpoint:
    path: /webhooks/chat-delete
    method: POST
    data_selector: data
- name: chat_delete
  endpoint:
    path: /webhooks/webhook-chat-delete
    method: POST
    data_selector: data
- name: qrcode_updated
  endpoint:
    path: /webhooks/webhook-qrcode-updated
    method: POST
- name: messages.received
  endpoint:
    path: /webhook/message-received
    method: POST
    data_selector: data
- name: messages.upsert
  endpoint:
    path: /webhooks/webhook-message-upsert
    method: POST
- name: webhook_group_message_received
  endpoint:
    path: /webhooks/webhook-group-message-received
    method: POST
    data_selector: data
- name: message_status_update
  endpoint:
    path: /webhooks/webhook-message-update
    method: POST
    data_selector: data
    params: {}
- name: messages-newsletter.received
  endpoint:
    path: /webhooks/messages-newsletter.received
    method: POST
    data_selector: data
    params: {}
- name: message_deleted
  endpoint:
    path: /webhooks/messages.delete
    method: POST
    data_selector: data.keys
- name: personal_message_received
  endpoint:
    path: /webhooks/messages-personal.received
    method: POST
    data_selector: data
- name: webhook_message_receipt_update
  endpoint:
    path: /webhooks/message-receipt-update
    method: POST
    data_selector: data
    params: {}
- name: call_received
  endpoint:
    path: /webhooks/webhook-call-received
    method: POST
    data_selector: data.call
- name: messages.reaction
  endpoint:
    path: /webhooks/message-reaction
    method: POST
- name: poll_results
  endpoint:
    path: /webhooks/poll-results
    method: POST
    data_selector: data.pollResult
- name: poll_results
  endpoint:
    path: /webhooks/poll-results
    method: POST
    data_selector: data
    params: {}
- name: WhatsApp Sessions
  endpoint:
    path: /api/sessions
    method: GET
- name: Messages
  endpoint:
    path: /api/messages
    method: POST
- name: Contacts
  endpoint:
    path: /api/contacts
    method: GET
notes:
- To login using passkeys, ensure that JavaScript is enabled in your browser.
- The most powerful WhatsApp API platform for businesses of all sizes. Send unlimited
  messages with no per-message fees.
- You are solely responsible for all messages and content sent through your WhatsApp
  number.
- WasenderApi is not responsible for any bans or blocks imposed by WhatsApp on your
  number and cannot assist in unblocking accounts.
- We do not sell or rent your personal information to third parties for their marketing
  purposes without your explicit consent.
- We offer a simple, no-questions-asked 7-day refund policy for all our services.
- Refunds are typically processed within 3-5 business days.
- WasenderApi only supports linking via WhatsApp QR code. Pairing code (OTP) linking
  is not supported.
- Each session requires a unique phone number.
- WhatsApp may prioritize notifications to the device that is most active (your phone
  or the API connection).
- Some notifications may be suppressed on your phone when messages are read or processed
  by the API.
- If you see the message 'Waiting for this message. This may take a while' in WhatsApp,
  it means the app is unable to decrypt a message because the encryption keys are
  not yet available on your device.
- If your webhook is not receiving READ status updates for WhatsApp messages, it means
  the recipient has not opened or read the message, or there is a delay in WhatsApp's
  delivery of read receipts.
- Ensure your webhook endpoint is secure and can handle the expected volume of payloads
- Always respond with 200 OK to acknowledge receipt
- Adhering to WhatsApp's policies is crucial to maintain your account's health and
  avoid potential flags or blocks.
- Media files in WhatsApp are encrypted and require proper decryption before they
  can be used in your application.
- There is a known issue on Android where polls sent in one-to-one chats may not appear
  on the sender’s phone, but the recipient will still receive and see them.
- Monthly plans have no long-term commitment. You can cancel at any time.
- No refunds are provided for canceled subscriptions.
- Paddle E-403 error indicates unsupported transactions from certain countries.
- Offers a unique opportunity for developers, agencies, and businesses to leverage
  WhatsApp API infrastructure.
- To authenticate API requests using Bearer Tokens.
- You can ignore webhooks with no message content.
- Media files received are encrypted and need to be decrypted.
- API Keys are tied to a specific session. If the session is deleted, the key becomes
  invalid.
- This endpoint requires an access token to be included in the Authorization header.
- Requires an active subscription and is subject to session limits.
- The session must be previously initialized and authenticated.
- If the session is connected, it will attempt to disconnect from the WhatsApp API
  server first.
- Retrieves information about the WhatsApp user associated with the current API key
  session.
- Uses API key for authentication
- Verifies if a given JID (WhatsApp ID) is registered on WhatsApp.
- Sends a presence update to a specific JID (e.g., typing... or recording...) to indicate
  user activity.
- The URL returned is valid for one hour.
- The file is validated, stored temporarily, and made accessible via a unique URL
  that is active for 24-hours.
- 'Supported video formats: MP4, 3GPP. Maximum file size: 16MB.'
- 'Supported audio formats: AAC, MP3, OGG, AMR. Maximum file size: 16MB.'
- Only the WEBP format is supported for stickers.
- 'Maximum file size: 100KB.'
- Sends a message containing a contact card (vCard).
- Provide the latitude and longitude within the location object parameter.
- This is usually only possible for a short period after the message was sent.
- The JID (Jabber ID) of the contact should be in E.164 format (international phone
  number) e.g., 1234567890.
- Blocks a specific contact.
- Retrieves metadata for a specific group (e.g., subject, description, creation date,
  owner).
- This action requires that your session has admin privileges in the target group.
- You can perform the action on multiple participants in a single API call.
- Use the /api/groups endpoint to find the IDs of the groups you are in.
- To use mentions, the 'to', 'text', and 'mentions' parameters are required.
- If the list is empty, it may mean no participants are currently synced or available,
  or the initial sync is still in progress.
- If you connected your session before 5/8/2025, you must reconnect it to sync them
  correctly.
- Requires admin privileges in the group.
- Requires admin privileges.
- Webhooks allow your application to receive real-time notifications about events
  happening in your WhatsApp session.
- Always respond to webhook requests with a `200 OK` status code quickly to acknowledge
  receipt.
- Triggered when participants are added, removed, promoted, or demoted in a group.
- Triggered when a new contact is added or an existing contact is updated in your
  session's contact list.
- Triggered for other contact updates, such as a contact changing their profile picture
  or status (if available).
- Triggered when your session joins a new group or when metadata of an existing group
  is updated.
- Triggered when your session joins a new group or when metadata of an existing group
  (subject, description, etc.) is updated.
- Triggered when a chat is created or updated (e.g., new message, read status change).
- Event triggered when the connection status of your WhatsApp session changes.
- Event triggered when a new QR code is generated for linking your session.
- Event is triggered for incoming messages, to listen for both incoming and outgoing,
  please refer to messages.upsert.
- Event is triggered for all messages in your session, both incoming and outgoing.
- Event is triggered when a message is received in any group the session is a part
  of.
- Event triggered when a message is deleted.
- Event is triggered for an incoming voice or video call.
- Payload contains a unique call ID required for rejecting the call.
- Triggered when a user votes in a poll that was created using the Send Poll Message
  API endpoint.
- This webhook provides updates on the poll's results as votes are cast.
- API responses include standard HTTP headers. Some important headers, especially
  related to rate limiting.
- API responses include standard HTTP headers related to rate limiting.
- To ensure fair usage and protect your account, WasenderAPI applies rate limits based
  on your plan and account protection settings.
- Repeated abuse of rate limits may lead to temporary API suspension or account review.
- Use Bearer tokens for authentication
errors:
- 'Invalid signature: Ensure you''re using the correct webhook secret for verification'
- 'Webhook not receiving payloads: Verify that your endpoint is publicly accessible
  and that webhooks are enabled for your session'
- 'Timeout errors: Make sure your webhook responds within a reasonable time (under
  60 seconds)'
- 'Failed to download file: Ensure the URL is still valid and accessible. WhatsApp
  media URLs may expire after some time.'
- 'Failed to decrypt media: Verify that you''re using the correct media key and media
  type.'
- 'Paddle E-403: Country Not Supported'
- 401 – invalid or missing key
- 422 – validation failed (e.g., unknown field)
- 429 – you hit the protection limit
- 401 – wrong or missing Bearer token.
- 422 – JSON body failed validation; Make shows the error object returned by WasenderApi.
- 429 – hit the rate limit; add a sleep module or Queue router.
- '400 Bad Request: Check the JSON payload format.'
- '401 Unauthorized: Verify your Bearer token.'
- '404 Not Found: Ensure the endpoint URL is correct.'
- API key is required
- Invalid JID
- '400 Bad Request: Check the request format and required parameters'
- '413 Payload Too Large: Ensure the file size is within the allowed limits'
- '400 Bad Request: Check required parameters'
- '401 Unauthorized: Invalid API key'
- '500 Internal Server Error: Try again later'
- '400 Bad Request: Check if required parameters are included.'
- '401 Unauthorized: Ensure the API key is valid.'
- '500 Internal Server Error: Try again later.'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Invalid API Key'
- '400 Bad Request: Missing required parameters'
- '0: ERROR - The message failed to send due to an error.'
- '1: PENDING - The message is queued and waiting to be sent.'
- '2: SENT - The message has been sent from the server but not yet delivered.'
- '3: DELIVERED - The message has reached the recipient’s device.'
- '4: READ - The recipient has opened and read the message.'
- '5: PLAYED - The recipient has played the media message (e.g., audio or video).'
- Message deletion is only possible for a short period after the message was sent.
- '401 Unauthorized: Recheck API key or token'
- '404 Not Found: Check contact phone number format'
- '401 Unauthorized: Check your API key'
- '400 Bad Request: Ensure contactPhoneNumber is valid'
- '401 Unauthorized: Recheck your API key or token'
- '401 Unauthorized: Recheck your API key or session privileges.'
- '401 Unauthorized: Check API key or token'
- '403: not-authorized'
- 'Unauthorized: Invalid API Key or Token'
- 'Unauthorized: Check your API key'
- 'Not Found: Invalid invite code'
- '404 Not Found: Group does not exist or user is not a member'
- '401 Unauthorized: Recheck API Key'
- '401 Unauthorized: Recheck API Key or token expiration'
- '401 Unauthorized: Invalid signature'
- '0: The message failed to send due to an error.'
- '1: The message is queued and waiting to be sent.'
- '2: The message has been sent from the server but not yet delivered.'
- '3: The message has reached the recipient’s device.'
- '4: The recipient has opened and read the message.'
- '5: The recipient has played the media message (e.g., audio or video).'
- 'X-RateLimit-Limit: The maximum number of requests allowed per time window.'
- 'X-RateLimit-Remaining: The number of requests remaining in the current time window.'
- 'X-RateLimit-Reset: The time in seconds until the rate limit resets.'
- 'Rate limit exceeded: Check the X-RateLimit-Limit and X-RateLimit-Remaining headers.'
- Validation failed
- Authentication Error
- No Active Subscription Error
- Trial Bulk Limit Error
- Rate Limit Error (Trial)
- Rate Limit Error (Account Protection)
- Session is not Connected
- 'Validation failed: The to field is required.'
- 'Validation failed: The text field is required when no media is present.'
- 'Rate Limit Error (Trial): You are on a free trial. You can only send 1 message
  every 1 minute.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://www.wasenderapi.com
  auth:
    type: Bearer
    location: header
    header_name: Authorization
source_metadata: null
