resources:
- name: tracks
  endpoint:
    path: /api/external-metadata/tracks
    method: GET
    data_selector: data
    params: {}
- name: buckets
  endpoint:
    path: /reference/console-api/buckets
    method: GET
- name: base_projects
  endpoint:
    path: /reference/console-api/base-projects
    method: GET
- name: dedup_files
  endpoint:
    path: /reference/console-api/buckets/dedup-files
    method: POST
- name: buckets
  endpoint:
    path: /reference/console-api/buckets
    method: GET
- name: projects
  endpoint:
    path: /reference/console-api/base-projects
    method: GET
- name: dedup_files
  endpoint:
    path: /reference/console-api/buckets/dedup-files
    method: POST
- name: file_scanning
  endpoint:
    path: /reference/console-api/file-scanning
    method: GET
- name: broadcast_monitoring
  endpoint:
    path: /reference/console-api/bm-projects/broadcast-database-projects
    method: GET
- name: custom_streams
  endpoint:
    path: /reference/console-api/bm-projects/custom-streams-projects
    method: GET
- name: broadcast_monitoring
  endpoint:
    path: /reference/console-api/bm-projects
    method: GET
    data_selector: projects
    params: {}
- name: custom_streams
  endpoint:
    path: /reference/console-api/bm-projects/custom-streams-projects
    method: GET
    data_selector: streams
    params: {}
- name: broadcast_monitoring_custom_content
  endpoint:
    path: /reference/console-api/bm-projects/custom-streams-projects
    method: GET
    data_selector: records
    params: {}
- name: stream_monitoring_results
  endpoint:
    path: /reference/console-api/bm-projects/custom-streams-projects/streams-results
    method: GET
- name: buckets
  endpoint:
    path: /reference/console-api/buckets
    method: GET
- name: offline_dbs
  endpoint:
    path: /reference/console-api/offlinedbs
    method: GET
- name: broadcast_monitoring
  endpoint:
    path: /reference/console-api/bm-projects
    method: GET
    data_selector: projects
- name: custom_streams
  endpoint:
    path: /reference/console-api/bm-projects/custom-streams-projects
    method: GET
    data_selector: streams
- name: live_channels
  endpoint:
    path: /reference/console-api/buckets/live-channels
    method: GET
- name: custom_content
  endpoint:
    path: /reference/console-api/buckets/custom-files
    method: GET
- name: Monitoring Results
  endpoint:
    path: /reference/console-api/bm-projects/custom-streams-projects/streams-results
    method: GET
- name: UCF Projects
  endpoint:
    path: /ucf-projects
    method: GET
    data_selector: projects
- name: Streams
  endpoint:
    path: /ucf-projects/streams
    method: GET
    data_selector: streams
- name: buckets
  endpoint:
    path: /reference/console-api/buckets
    method: GET
    data_selector: records
- name: offline_dbs
  endpoint:
    path: /reference/console-api/offlinedbs
    method: GET
    data_selector: records
- name: live_channels
  endpoint:
    path: /reference/console-api/buckets/live-channels
    method: GET
- name: custom_content
  endpoint:
    path: /reference/console-api/buckets/custom-files
    method: GET
- name: UCF Projects
  endpoint:
    path: /ucf/projects
    method: POST
    data_selector: data
    params: {}
- name: Add Streams
  endpoint:
    path: /ucf/projects/{project_id}/streams
    method: POST
    data_selector: data
    params: {}
- name: audio_recognition
  endpoint:
    path: /reference/identification-api
    method: POST
    data_selector: result
    params: {}
- name: RecognizeByFileBuffer
  endpoint:
    params:
      data: '[]byte'
      startSeconds: int
      lenSeconds: int
      userParams: map[string]string
- name: RecognizeByFpBuffer
  endpoint:
    params:
      data: '[]byte'
      startSeconds: int
      lenSeconds: int
      userParams: map[string]string
- name: GetDurationMsByFile
  endpoint:
    params:
      filePath: string
- name: GetDurationMsByFpBuffer
  endpoint:
    params:
      fpBufferData: '[]byte'
- name: identify
  endpoint:
    path: /v1/identify
    method: POST
    data_selector: sample
    params: {}
- name: Access Token
  endpoint:
    path: /reference/console-api/accesstoken
    method: GET
- name: Buckets
  endpoint:
    path: /reference/console-api/buckets
    method: GET
- name: identify
  endpoint:
    path: /v1/identify
    method: POST
    data_selector: response
    params: {}
- name: identify
  endpoint:
    path: /v1/identify
    method: POST
- name: identify_audio
  endpoint:
    path: /v1/identify
    method: POST
    data_selector: sample
- name: buckets
  endpoint:
    path: /api/buckets
    method: GET
- name: create_bucket
  endpoint:
    path: /api/buckets
    method: POST
- name: get_bucket
  endpoint:
    path: /api/buckets/:id
    method: GET
- name: identify
  endpoint:
    path: /v1/identify
    method: POST
    data_selector: response
    params: {}
- name: buckets
  endpoint:
    path: /api/buckets/:id
    method: PUT
    data_selector: data
    params: {}
- name: delete_bucket
  endpoint:
    path: /api/buckets/:id
    method: DELETE
    data_selector: data
    params: {}
- name: identify
  endpoint:
    path: /v1/identify
    method: POST
    data_selector: metadata
- name: base_projects
  endpoint:
    path: /api/base-projects
    method: POST
    data_selector: data
    params: {}
- name: list_projects
  endpoint:
    path: /api/base-projects
    method: GET
    data_selector: data
    params: {}
- name: base_projects
  endpoint:
    path: /api/base-projects/:id
    method: GET
    data_selector: data
    params: {}
- name: buckets_status
  endpoint:
    path: /api/base-projects/:id/buckets-status
    method: GET
    data_selector: ACRCloudFile
    params: {}
- name: day_stat
  endpoint:
    path: /api/base-projects/:id/day-stat
    method: GET
    data_selector: data
    params:
      start: YYYY-MM-DD
      end: YYYY-MM-DD
- name: buckets
  endpoint:
    path: /api/buckets
    method: GET
    data_selector: data
- name: create_bucket
  endpoint:
    path: /api/buckets
    method: POST
    data_selector: data
- name: get_bucket
  endpoint:
    path: /api/buckets/:id
    method: GET
    data_selector: data
- name: create_offline_db
  endpoint:
    path: /api/offlinedbs
    method: POST
- name: rebuild_offline_db
  endpoint:
    path: /api/offlinedbs/:id
    method: PUT
- name: delete_offline_db
  endpoint:
    path: /api/offlinedbs/:id
    method: DELETE
- name: download_offline_db
  endpoint:
    path: /api/offlinedbs/:id
    method: GET
- name: bucket
  endpoint:
    path: /api/buckets/:id
    method: PUT
    data_selector: data
    params: {}
- name: bucket_delete
  endpoint:
    path: /api/buckets/:id
    method: DELETE
    data_selector: data
    params: {}
- name: fs_containers
  endpoint:
    path: /api/fs-containers
    method: POST
    data_selector: data
    params: {}
- name: get_all_containers
  endpoint:
    path: /api/fs-containers
    method: GET
    data_selector: data
    params: {}
- name: show_one_container
  endpoint:
    path: /api/fs-containers/:container_id
    method: GET
    data_selector: data
    params: {}
- name: delete_one_container
  endpoint:
    path: /api/fs-containers/:container_id
    method: DELETE
    data_selector: null
    params: {}
- name: base_projects
  endpoint:
    path: /api/base-projects
    method: POST
    data_selector: data
    params: {}
- name: list_projects
  endpoint:
    path: /api/base-projects
    method: GET
    data_selector: data
    params:
      region: eu-west-1
      type: AVR
- name: ucf_project
  endpoint:
    path: /api/ucf-projects
    method: POST
    data_selector: data
    params: {}
- name: list_ucf_projects
  endpoint:
    path: /api/ucf-projects
    method: GET
    data_selector: data
    params:
      region: ''
- name: update_ucf_project
  endpoint:
    path: /api/ucf-projects/:id
    method: PUT
    data_selector: data
    params: {}
- name: delete_ucf_project
  endpoint:
    path: /api/ucf-projects/:id
    method: DELETE
    data_selector: ''
    params: {}
- name: base_projects
  endpoint:
    path: /api/base-projects/:id
    method: GET
    data_selector: data
    params: {}
- name: update_project
  endpoint:
    path: /api/base-projects/:id
    method: PUT
    data_selector: data
    params: {}
- name: delete_project
  endpoint:
    path: /api/base-projects/:id
    method: DELETE
    data_selector: data
    params: {}
- name: buckets_status
  endpoint:
    path: /api/base-projects/:id/buckets-status
    method: GET
    data_selector: ACRCloudFile
    params: {}
- name: day_stat
  endpoint:
    path: /api/base-projects/:id/day-stat
    method: GET
    data_selector: data
    params: {}
- name: broadcast_monitoring
  endpoint:
    path: /reference/console-api/bm-projects
    method: GET
    data_selector: records
- name: identification
  endpoint:
    path: /reference/identification-api
    method: GET
    data_selector: records
- name: offline_db
  endpoint:
    path: /api/offlinedbs
    method: POST
- name: rebuild_offline_db
  endpoint:
    path: /api/offlinedbs/:id
    method: PUT
- name: delete_offline_db
  endpoint:
    path: /api/offlinedbs/:id
    method: DELETE
- name: download_offline_db
  endpoint:
    path: /api/offlinedbs/:id
    method: GET
- name: music
  endpoint:
    path: /metadata/music
    method: GET
    data_selector: metadata.music
    params: {}
- name: fs_containers
  endpoint:
    path: /api/fs-containers
    method: POST
    data_selector: data
    params: {}
- name: get_all_containers
  endpoint:
    path: /api/fs-containers
    method: GET
    data_selector: data
    params: {}
- name: show_one_container
  endpoint:
    path: /api/fs-containers/:container_id
    method: GET
    data_selector: data
    params: {}
- name: delete_one_container
  endpoint:
    path: /api/fs-containers/:container_id
    method: DELETE
    data_selector: data
    params: {}
- name: Broadcast Monitoring
  endpoint:
    path: /reference/console-api/bm-projects
    method: GET
    data_selector: result
    params: {}
- name: custom_files
  endpoint:
    path: /reference/console-api/buckets/custom-files
    method: GET
    data_selector: custom_files
    params: {}
- name: ucf_projects
  endpoint:
    path: /api/ucf-projects
    method: POST
    data_selector: data
    params: {}
- name: list_ucf_projects
  endpoint:
    path: /api/ucf-projects
    method: GET
    data_selector: data
    params:
      region: eu-west-1
- name: update_ucf_project
  endpoint:
    path: /api/ucf-projects/:id
    method: PUT
    data_selector: data
    params: {}
- name: delete_ucf_project
  endpoint:
    path: /api/ucf-projects/:id
    method: DELETE
    data_selector: data
    params: {}
- name: humming
  endpoint:
    path: /reference/metadata-api
    method: GET
    data_selector: humming
- name: identify_audio_file
  endpoint:
    path: /v1/identify
    method: POST
    data_selector: sample
    params: {}
- name: identify
  endpoint:
    path: /v1/identify
    method: POST
    data_selector: response
    params: {}
- name: music
  endpoint:
    path: /reference/console-api/bm-projects/broadcast-database-projects/channels
    method: GET
    data_selector: metadata.music
    params: {}
- name: identify
  endpoint:
    path: /v1/identify
    method: POST
    data_selector: metadata
- name: custom_files
  endpoint:
    path: /reference/metadata/custom-files
    method: GET
    data_selector: custom_files
- name: live_channels
  endpoint:
    path: /reference/console-api/buckets/live-channels
    method: GET
    data_selector: custom_streams
- name: humming
  endpoint:
    path: /humming
    method: POST
    data_selector: metadata.humming
- name: identify_audio
  endpoint:
    path: /v1/identify
    method: POST
    data_selector: sample
    params: {}
- name: identify
  endpoint:
    path: /v1/identify
    method: POST
    data_selector: response
    params: {}
- name: identify
  endpoint:
    path: /v1/identify
    method: POST
    data_selector: metadata
    params: {}
notes:
- 'The default value for platforms parameter is: spotify,deezer,youtube,applemusic'
- The number of platforms in the platforms parameter of a single request cannot exceed
  5.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses API key for authentication
- You will have 14 days for the free trial after registration
- You will have 14 days for the free trial after registration.
- You need to take care of stream availabilities with Custom Streams option
- Cover Song Identification requires the Timemap to be enabled on those channels
- You need to create a custom bucket for online or offline recognition projects.
- Timemap may incur additional costs.
- Offline Recognition Service enables apps to recognize audios without the need for
  internet connections.
- Monitor live streams, radio or TV stations with your custom database.
- UCF helps find potential detections in repeated content not detected in audio recognition.
- 14 days for the free trial after registration.
- Unknown Content Filter (UCF) helps find potential detections in repeated content.
- Obtain Access Key, Access Secret, and Host from ACRCloud Developer Platform.
- Some objects like Contact may return nulls in deeply nested fields
- The SDK currently only supports Linux and macOS
- The SDK only offers to identify the content of a specified section of the file
- Requests to ACRCloud server must be signed.
- 'File size: < 1M , You''de better cut large file to small file, within 15 seconds
  data size is better'
- Signature is required for API requests.
- Requires setup of connected app in ACRCloud
- The results number per page for List Buckets is default 20.
- 'File size: < 1M, You''d better cut large file to small file, within 15 seconds
  data size is better.'
- Before you delete the bucket, you need to clean the bucket first.
- AVR is detecting music or custom content
- LCD is detecting live channels and time-shifting channels
- HR is detecting both live channel and custom contents
- Bearer token is required for Authorization
- Authorization requires a Bearer token
- Requires setup of Bearer token for authorization.
- Default project type is BM.
- Configuration defaults to {"days":3,"min_ms":5000,"max_ms":300000}.
- Bearer token required for all endpoints
- Local Broadcast Monitoring System is used to monitor live radio streams on your
  own local server.
- Before using this tool, you must register on our platform and log into your dashboard.
- Create a 'Live Channel' bucket and add the url of your streams into it.
- Some objects may return nulls in deeply nested fields
- Requires Bearer token for authorization.
- Only ACRID, Track Title, Artists Name and Album Name fields are required, other
  fields are optional.
- Only Title, ARCID, Audio_ID are required fields.
- Only ACRID, Title, Artist and Score are required fields.
- You should register an account on the ACRCloud platform and create a Broadcast Monitoring
  project with local monitoring type.
- These config can be set in 'acrcloud_config.py'
- Uses OAuth2 for authentication
- Create a console access key pairs on account page
- Input your Live Bucket Name to the client.conf file
- Requires signature for requests using access key and secret.
- 'Example of JSON result: Live Channel or Timeshift buckets with Live Channel Detection
  and Hybrid Recognition projects'
- 'File size: < 1M, You''d better cut large file to small file, within 15 seconds
  data size is better'
- Requires access key and access secret for authentication.
errors:
- '200: OK'
- '401 Unauthorized: Check your access token.'
- '429 Too Many Requests: Rate limit exceeded.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Project not found: Ensure the project ID is correct.'
- 'Stream not found: Verify the selected streams exist.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '1001: No recognition result'
- '2000: Recording error (device may not have permission)'
- '2004: Unable to generate fingerprint'
- '3000: Recognition service Error (HTTP error, check your network or wrong host in
  configuration file）'
- '3001: Wrong Access Key'
- '3002: Invalid Http Request'
- '3003: Request count limit exceeded, please upgrade your account'
- '3006: Invalid arguments'
- '3010: Recognition service error'
- '3014: Invalid signature'
- '3015: QpS limit exceeded, please upgrade your account'
- '401 Unauthorized: Check if the Bearer token is valid'
- '200: The project successfully created.'
- '401: Unauthorized'
- '204: No Content'
- '200: Success'
- '4XX: Client Error'
- '5XX: Server Error'
auth_info:
  mentioned_objects:
  - Access Key
  - Access Secret
  - Host
  - access_key
  - access_secret
client:
  base_url: https://console.acrcloud.com
  auth:
    type: oauth2
  headers:
    Accept: application/json
source_metadata: null
