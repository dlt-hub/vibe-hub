resources:
- name: form_submission
  endpoint:
    path: /api-reference/connection/README.html#mock
    method: POST
    data_selector: response
    params: {}
- name: signup_confirmation
  endpoint:
    path: /api-reference/authentication/signup-confirmation
    method: POST
    data_selector: confirmation
    params:
      signup_confirmation: /path/to/your/success/page
- name: resend_signup_confirmation
  endpoint:
    path: /api-reference/authentication/resendSignupConfirmation
    method: POST
    data_selector: resend
    params: {}
- name: forgot_password
  endpoint:
    path: /api-reference/authentication/README.html#forgotpassword
    method: POST
    data_selector: Verification code has been sent.
- name: reset_password
  endpoint:
    path: /api-reference/authentication/README.html#resetpassword
    method: POST
    data_selector: New password has been set.
- name: openidLogin
  endpoint:
    path: /api-reference/authentication/openidLogin
    method: POST
- name: clientSecretRequest
  endpoint:
    path: /api-bridge/client-secret-request
    method: POST
- name: verify_email
  endpoint:
    path: /api-reference/user/README.html#verifyemail
    method: POST
    data_selector: response
    params: {}
- name: user_profile
  endpoint:
    path: /api-reference/user/README.html#updateprofile
    method: POST
    data_selector: UserProfile
- name: disableAccount
  endpoint:
    path: /api-reference/user/README.html#disableaccount
    method: POST
    data_selector: Promise(string)
- name: recoverAccount
  endpoint:
    path: /api-reference/user/README.html#recoveraccount
    method: POST
    data_selector: Promise(string)
- name: users
  endpoint:
    path: /api-reference/user/README.html#getusers
    method: GET
- name: my_collection
  endpoint:
    path: /api-reference/database/README.html#postrecord
    method: POST
    data_selector: data
    params:
      table:
        name: my_collection
        access_group: public
- name: my_collection
  endpoint:
    path: /api-reference/database/README.html#getrecords
    method: GET
    data_selector: list
- name: record
  endpoint:
    path: /api-reference/database/README.html#postrecord
    method: POST
    data_selector: data
    params: {}
- name: fetch_record
  endpoint:
    path: /api-reference/database/README.html#getrecords
    method: GET
    data_selector: list
    params:
      unique_id: My Unique ID %$#@
- name: fetch_unique_id_list
  endpoint:
    path: /api-reference/database/README.html#getuniqueid
    method: GET
    data_selector: list
    params:
      unique_id: guitar_
      condition: '>='
- name: ForAuthorizedUsers
  endpoint:
    path: /database/ForAuthorizedUsers
    method: POST
    data_selector: record
    params:
      access_group: authorized
- name: PrivateCollection
  endpoint:
    path: /database/PrivateCollection
    method: POST
    data_selector: record
    params:
      access_group: private
- name: record_can_be_granted
  endpoint:
    path: /database/record_can_be_granted
    method: POST
    data_selector: record
    params:
      access_group: private
- name: delete_records
  endpoint:
    path: /api-reference/database/deleteRecords
    method: POST
    data_selector: response
    params:
      record_id: array of record IDs
      unique_id: array of unique IDs
      table:
        name: A
        access_group: public
- name: table_information
  endpoint:
    path: /api-reference/database/getTables
    method: GET
    data_selector: response
- name: tags
  endpoint:
    path: /api-reference/database/tags
    method: GET
    data_selector: tags
- name: Posts
  endpoint:
    path: /api-reference/database/README.html#postrecord
    method: POST
    data_selector: null
    params:
      is_subscription_record: true
      upload_to_feed: true
- name: Subscriptions
  endpoint:
    path: /api-reference/database/README.html#getsubscriptions
    method: GET
    data_selector: list
    params: {}
- name: Feed
  endpoint:
    path: /api-reference/database/README.html#getfeed
    method: GET
    data_selector: list
    params:
      access_group: 1
- name: posts
  endpoint:
    path: /post
    method: POST
    data_selector: records
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: records
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: records
- name: likes
  endpoint:
    path: /likes
    method: POST
    data_selector: records
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: records
- name: postRealtime
  endpoint:
    path: /api-reference/realtime/README.html#postrealtime
    method: POST
- name: realtime_groups
  endpoint:
    path: /api-reference/realtime/README.html#getrealtimegroups
    method: GET
- name: realtime_users
  endpoint:
    path: /api-reference/realtime/README.html#getrealtimeusers
    method: GET
- name: secureRequest
  endpoint:
    path: /myapi
    method: POST
    data_selector: response
    params: {}
- name: signup_confirmation
  endpoint:
    path: /email/signup-confirmation
    method: POST
- name: welcome_email
  endpoint:
    path: /email/welcome
    method: POST
- name: verification_email
  endpoint:
    path: /email/verification
    method: POST
- name: invitation_email
  endpoint:
    path: /email/invitation
    method: POST
- name: fetch_sent_emails
  endpoint:
    path: /api-reference/email/getNewsletters
    method: GET
    data_selector: newsletters.list
- name: sendInquiry
  endpoint:
    path: /api-reference/email/README.html#sendinquiry
    method: POST
    data_selector: inquiry
    params: {}
- name: inviteUser
  endpoint:
    path: /api-reference/admin/inviteUser
    method: POST
    data_selector: 'SUCCESS: Invitation has been sent.'
- name: resendInvitation
  endpoint:
    path: /api-reference/admin/resendInvitation
    method: POST
    data_selector: 'SUCCESS: Invitation has been re-sent.'
- name: getInvitations
  endpoint:
    path: /api-reference/admin/getInvitations
    method: GET
    data_selector: list
- name: cancelInvitation
  endpoint:
    path: /api-reference/admin/cancelInvitation
    method: POST
    data_selector: 'SUCCESS: Invitation has been cancelled.'
- name: grantAccess
  endpoint:
    path: /api-reference/admin/README.html#grantaccess
    method: POST
- name: createAccount
  endpoint:
    path: /api-reference/admin/README.html#createaccount
    method: POST
- name: deleteAccount
  endpoint:
    path: /api-reference/admin/README.html#deleteaccount
    method: POST
- name: blockAccount
  endpoint:
    path: /api-reference/admin/README.html#blockaccount
    method: POST
- name: unblockAccount
  endpoint:
    path: /api-reference/admin/README.html#unblockaccount
    method: POST
- name: updateProfile
  endpoint:
    path: /api/user/updateProfile
    method: POST
    data_selector: UserProfile
    params: {}
- name: changePassword
  endpoint:
    path: /api/user/changePassword
    method: POST
    data_selector: 'SUCCESS: Password has been changed.'
    params: {}
- name: verifyEmail
  endpoint:
    path: /api/user/verifyEmail
    method: POST
    data_selector: 'SUCCESS: Verification code has been sent.'
    params: {}
- name: disableAccount
  endpoint:
    path: /api/user/disableAccount
    method: POST
    data_selector: 'SUCCESS: account has been disabled.'
    params: {}
- name: getUsers
  endpoint:
    path: /api/user/getUsers
    method: GET
    data_selector: UserPublic
    params: {}
- name: recoverAccount
  endpoint:
    path: /api/user/recoverAccount
    method: POST
    data_selector: 'SUCCESS: Recovery e-mail has been sent.'
    params: {}
- name: postRecord
  endpoint:
    path: /api/database/postRecord
    method: POST
    data_selector: data
    params: {}
- name: getRecords
  endpoint:
    path: /api/database/getRecords
    method: GET
    data_selector: records
    params: {}
- name: grantPrivateAccess
  endpoint:
    path: /api/database/grantPrivateAccess
    method: POST
    data_selector: success
    params: {}
- name: removePrivateAccess
  endpoint:
    path: /api/database/removePrivateAccess
    method: POST
    data_selector: success
    params: {}
- name: deleteRecords
  endpoint:
    path: /api/database/deleteRecords
    method: DELETE
    data_selector: success
    params: {}
- name: getTables
  endpoint:
    path: /api/database/getTables
    method: GET
    data_selector: tables
    params: {}
- name: getIndex
  endpoint:
    path: /api/database/getIndex
    method: GET
    data_selector: indexes
    params: {}
- name: getTags
  endpoint:
    path: /api/database/getTags
    method: GET
    data_selector: tags
    params: {}
- name: getUniqueId
  endpoint:
    path: /api/database/getUniqueId
    method: GET
    data_selector: uniqueId
    params: {}
- name: subscribe
  endpoint:
    path: /api/database/subscribe
    method: POST
    data_selector: subscription
    params: {}
- name: unsubscribe
  endpoint:
    path: /api/database/unsubscribe
    method: POST
    data_selector: success
    params: {}
- name: blockSubscriber
  endpoint:
    path: /api/database/blockSubscriber
    method: POST
    data_selector: success
    params: {}
- name: unblockSubscriber
  endpoint:
    path: /api/database/unblockSubscriber
    method: POST
    data_selector: success
    params: {}
- name: getSubscriptions
  endpoint:
    path: /api/database/getSubscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: getFeed
  endpoint:
    path: /api/database/getFeed
    method: GET
    data_selector: feed
    params: {}
- name: getFile
  endpoint:
    path: /api/database/getFile
    method: GET
    data_selector: file
    params: {}
- name: subscribeNewsletter
  endpoint:
    path: /subscribeNewsletter
    method: POST
    data_selector: response
    params: {}
- name: unsubscribeNewsletter
  endpoint:
    path: /unsubscribeNewsletter
    method: POST
    data_selector: response
    params: {}
- name: adminNewsletterRequest
  endpoint:
    path: /adminNewsletterRequest
    method: POST
    data_selector: response
    params: {}
- name: getNewsletterSubscription
  endpoint:
    path: /getNewsletterSubscription
    method: GET
    data_selector: response
    params: {}
- name: getNewsletters
  endpoint:
    path: /getNewsletters
    method: GET
    data_selector: response
    params: {}
- name: sendInquiry
  endpoint:
    path: /sendInquiry
    method: POST
    data_selector: response
    params: {}
- name: getRealtimeGroups
  endpoint:
    path: /api-reference/realtime/getRealtimeGroups
    method: GET
- name: getRealtimeUsers
  endpoint:
    path: /api-reference/realtime/getRealtimeUsers
    method: GET
- name: signup
  endpoint:
    path: /api-reference/authentication/README.md#signup
    method: POST
    data_selector: user
    params: {}
- name: unsubscribeNewsletter
  endpoint:
    path: /api-reference/email/README.md#unsubscribenewsletter
    method: POST
    data_selector: response
    params: {}
- name: user_profile
  endpoint:
    path: /api-reference/authentication/README.md#getprofile
    method: GET
    data_selector: UserProfile
- name: forgot_password
  endpoint:
    path: /api-reference/authentication/README.md#forgotpassword
    method: POST
    data_selector: string
- name: reset_password
  endpoint:
    path: /api-reference/authentication/README.md#resetpassword
    method: POST
    data_selector: string
- name: verify_email
  endpoint:
    path: /api-reference/user/README.md#verifyemail
    method: POST
    data_selector: string
- name: getProfile
  endpoint:
    path: /api-reference/authentication/README.md#getprofile
    method: GET
- name: forgotPassword
  endpoint:
    path: /api-reference/authentication/README.md#forgotpassword
    method: POST
- name: resetPassword
  endpoint:
    path: /api-reference/authentication/README.md#resetpassword
    method: POST
- name: verifyEmail
  endpoint:
    path: /api-reference/user/README.md#verifyemail
    method: POST
- name: updateProfile
  endpoint:
    path: /api-reference/user/README.md#updateprofile
    method: POST
- name: changePassword
  endpoint:
    path: /api-reference/user/README.md#changepassword
    method: POST
- name: disableAccount
  endpoint:
    path: /api-reference/user/README.md#disableaccount
    method: POST
- name: users
  endpoint:
    path: /api-reference/user/README.md#getusers
    method: GET
    data_selector: list
    params: {}
- name: signup
  endpoint:
    path: /api-reference/authentication/README.md#signup
    method: POST
- name: login
  endpoint:
    path: /api-reference/authentication/README.md#login
    method: POST
- name: logout
  endpoint:
    path: /api-reference/authentication/README.md#logout
    method: POST
- name: resendSignupConfirmation
  endpoint:
    path: /api-reference/authentication/README.md#resendsignupconfirmation
    method: POST
- name: my_collection
  endpoint:
    path: /api-reference/database/README.md#getrecords
    method: GET
    data_selector: list
    params:
      table:
        name: my_collection
        access_group: public
- name: my_table
  endpoint:
    path: /api-reference/database/README.md#postrecord
    method: POST
    data_selector: record
    params:
      table:
        name: my_table
        access_group: public
      unique_id: My Unique ID %$#@
- name: ForAuthorizedUsers
  endpoint:
    path: /api-reference/database/README.md#postrecord
    method: POST
    data_selector: record
    params:
      table:
        name: ForAuthorizedUsers
        access_group: authorized
- name: PrivateCollection
  endpoint:
    path: /api-reference/database/README.md#postrecord
    method: POST
    data_selector: record
    params:
      table:
        name: PrivateCollection
        access_group: private
- name: signup
  endpoint:
    path: /api-reference/authentication/README.md#signup
    method: POST
    data_selector: user
    params: {}
- name: login
  endpoint:
    path: /api-reference/authentication/README.md#login
    method: POST
    data_selector: user
    params: {}
- name: logout
  endpoint:
    path: /api-reference/authentication/README.md#logout
    method: POST
    data_selector: user
    params: {}
- name: ForAuthorizedUsers
  endpoint:
    path: /ForAuthorizedUsers
    method: GET
    data_selector: list
    params:
      access_group: authorized
- name: PrivateCollection
  endpoint:
    path: /PrivateCollection
    method: POST
    data_selector: record_id
    params:
      access_group: private
- name: my_photos
  endpoint:
    path: /my_photos
    method: POST
    data_selector: record_id
    params:
      access_group: authorized
- name: new_table_name
  endpoint:
    path: /new_table_name
    method: POST
    data_selector: record_id
    params:
      access_group: private
- name: A
  endpoint:
    path: /A
    method: DELETE
    data_selector: response
    params:
      access_group: public
- name: Albums
  endpoint:
    path: /api/albums
    method: GET
    data_selector: records
- name: Comments
  endpoint:
    path: /api/comments
    method: GET
    data_selector: records
- name: Posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: records
- name: Posts
  endpoint:
    path: /api-reference/database/README.md#postrecord
    method: POST
    data_selector: null
    params:
      table.subscription.is_subscription_record: true
      table.subscription.upload_to_feed: true
- name: posts
  endpoint:
    path: /posts
    method: POST
    data_selector: records
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: records
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: records
    params: {}
- name: likes
  endpoint:
    path: /likes
    method: POST
    data_selector: records
    params: {}
- name: send_inquiry
  endpoint:
    path: /api-reference/email/README.md#sendinquiry
    method: POST
    data_selector: inquiry
    params: {}
- name: subscribe_newsletter
  endpoint:
    path: /api-reference/email/README.md#subscribenewsletter
    method: POST
    data_selector: subscription
    params: {}
- name: get_newsletters
  endpoint:
    path: /api-reference/email/README.md#getnewsletters
    method: GET
    data_selector: newsletters
    params: {}
- name: subscribe
  endpoint:
    path: /api/subscribe
    method: POST
    data_selector: Subscription
    params: {}
- name: unsubscribe
  endpoint:
    path: /api/unsubscribe
    method: POST
    data_selector: '''SUCCESS: The user has unsubscribed.'''
    params: {}
- name: blockSubscriber
  endpoint:
    path: /api/blockSubscriber
    method: POST
    data_selector: '''SUCCESS: Blocked user id "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".'''
    params: {}
- name: unblockSubscriber
  endpoint:
    path: /api/unblockSubscriber
    method: POST
    data_selector: '''SUCCESS: Unblocked user id "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".'''
    params: {}
- name: getSubscriptions
  endpoint:
    path: /api/getSubscriptions
    method: GET
    data_selector: DatabaseResponse<Subscription>
    params: {}
- name: getFeed
  endpoint:
    path: /api/getFeed
    method: GET
    data_selector: DatabaseResponse<RecordData>
    params: {}
- name: sendInquiry
  endpoint:
    path: /api/sendInquiry
    method: POST
    data_selector: '''SUCCESS: Inquiry has been sent.'''
    params: {}
- name: connectRealtime
  endpoint:
    path: /api/connectRealtime
    method: POST
    data_selector: WebSocket
    params: {}
- name: postRealtime
  endpoint:
    path: /api/postRealtime
    method: POST
    data_selector: '{ type: ''success'', message: ''Message sent.'' }'
    params: {}
- name: joinRealtime
  endpoint:
    path: /api/joinRealtime
    method: POST
    data_selector: '{ type: ''success'', message: string }'
    params: {}
- name: getRealtimeGroups
  endpoint:
    path: /api/getRealtimeGroups
    method: GET
    data_selector: 'DatabaseResponse<{ group: string; number_of_users: number; }>'
    params: {}
- name: getRealtimeUsers
  endpoint:
    path: /api/getRealtimeUsers
    method: GET
    data_selector: DatabaseResponse<{ user_id:string; cid:string; }[]>
    params: {}
- name: closeRealtime
  endpoint:
    path: /api/closeRealtime
    method: POST
    data_selector: void
    params: {}
- name: connectRTC
  endpoint:
    path: /api/connectRTC
    method: POST
    data_selector: RTCConnector
    params: {}
- name: vapidPublicKey
  endpoint:
    path: /api/vapidPublicKey
    method: GET
    data_selector: '{ VAPIDPublicKey: string }'
    params: {}
- name: subscribeNotification
  endpoint:
    path: /api/subscribeNotification
    method: POST
    data_selector: '''SUCCESS: Subscribed to receive notifications.'''
    params: {}
- name: unsubscribeNotification
  endpoint:
    path: /api/unsubscribeNotification
    method: POST
    data_selector: '''SUCCESS: Unsubscribed from notifications.'''
    params: {}
- name: pushNotification
  endpoint:
    path: /api/pushNotification
    method: POST
    data_selector: '''SUCCESS: Notification sent.'''
    params: {}
- name: secureRequest
  endpoint:
    path: /api/secureRequest
    method: POST
    data_selector: any
    params: {}
- name: clientSecretRequest
  endpoint:
    path: /api/clientSecretRequest
    method: POST
    data_selector: any
    params: {}
- name: inviteUser
  endpoint:
    path: /api/inviteUser
    method: POST
    data_selector: '''SUCCESS: Invitation has been sent. (User ID: xxx...)'''
    params: {}
- name: resendInvitation
  endpoint:
    path: /api/resendInvitation
    method: POST
    data_selector: '''SUCCESS: Invitation has been re-sent. (User ID: xxx...)'''
    params: {}
- name: getInvitations
  endpoint:
    path: /api/getInvitations
    method: GET
    data_selector: DatabaseResponse<UserProfile>
    params: {}
- name: cancelInvitation
  endpoint:
    path: /api/cancelInvitation
    method: POST
    data_selector: '''SUCCESS: Invitation has been canceled.'''
    params: {}
- name: grantAccess
  endpoint:
    path: /api/grantAccess
    method: POST
    data_selector: '''SUCCESS: Access has been granted to the user.'''
    params: {}
- name: createAccount
  endpoint:
    path: /api/createAccount
    method: POST
    data_selector: UserProfile
    params: {}
- name: deleteAccount
  endpoint:
    path: /api/deleteAccount
    method: POST
    data_selector: '''SUCCESS: Account has been deleted.'''
    params: {}
- name: blockAccount
  endpoint:
    path: /api/blockAccount
    method: POST
    data_selector: '''SUCCESS: The user has been blocked.'''
    params: {}
- name: unblockAccount
  endpoint:
    path: /api/unblockAccount
    method: POST
    data_selector: '''SUCCESS: The user has been unblocked.'''
    params: {}
- name: record_data
  endpoint:
    path: /recorddata
    method: GET
    data_selector: records
- name: binary_file
  endpoint:
    path: /binaryfile
    method: GET
    data_selector: files
notes:
- Skapi can handle HTML onsubmit events directly by passing the SubmitEvent as the
  first argument to Skapi methods.
- If the user have not logged in to your service after account creation, they will
  NOT appear on your user list in Skapi's admin page.
- If 7 days have passed since the account creation, and the user still have not logged
  in to your service, user's signup will be automatically invalidated.
- If signup_confirmation option was set to true during signup, users will not be able
  to log in until they have confirmed their account.
- Requires setup of both Client Secret Keys and OpenID Loggers
- User must be logged in to call this method
- User's email is automatically verified if signup confirmation was requested in signup.
- When the user changes their email, they will also be changing their login email
  as well
- User must be logged in to call this method.
- Any attribute that is not set to public will not be retrieved
- Currently the service is running on Trial Mode.
- All the user data will be deleted every 14 days.
- Skapi database has completely different approach to database management compared
  to traditional databases.
- Both authenticated and anonymous users can upload data to your service using the
  postRecord() method.
- Anonymous users can only create records in the public access group.
- By default, 50 sets of the data will be fetched per call.
- You can adjust the limit to your preference, allowing up to 1000 sets of data.
- Users must be logged in to update a record.
- Only the owner of the record can update a record.
- If the file is uploaded in a record where the access group is not 'public', the
  URL value in the BinaryFile objects can expire for security reasons.
- You can only delete up to 100 record ID at a time.
- You can only delete up to 100 unique ID at a time.
- When deleting multiple records, the promise will return success immediately, but
  it may take some time for the deleted records to be reflected in the database.
- User will not delete records that they do not own, or records that are uploaded
  as read-only.
- 'index.name should NOT have special characters. Only allowed special characters
  are: [ ] ^ _ ` : ; < = > ? @ and period.'
- 'index.value should NOT have special characters. Only allowed special characters
  are: [ ] ^ _ ` : ; < = > ? @ and white space.'
- 'Tags should NOT have special characters. Only allowed special characters are: [
  ] ^ \_ ` : ; < = > ? @ and white space.'
- A user cannot reference a record with a higher access group or 'private' access.
- Users who have private access granted to a record will also have access to all other
  private/higher access group records that is referenced.
- Users must be logged in to call subscription methods.
- Subscribers will not get feeds that are posted prior to the subscription.
- Anonymous users cannot create subscription records.
- Some objects may return nulls in deeply nested fields.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- Skapi's realtime features include WebSocket data exchange, WebRTC, and notifications.
- HTTPS REQUIRED.
- WebRTC only works on HTTPS environment.
- Notifications only works on HTTPS environment.
- The secureRequest method does not support HTML Forms.
- DO NOT share your email endpoint address with anyone. This endpoint is unique to
  your service and should be kept private.
- All the public newsletters will have unsubscribe link at the bottom of the email.
- Inquires do not require the user to be logged in.
- If you are not planning to use the sendInquiry() method, be sure to turn on the
  Prevent Inquiry option in the Service Settings page to prevent spam.
- Password must be between 6 and 60 characters.
- Users will need to confirm their signup via email.
- Users must have at least one login attempt to resend confirmation emails.
- Ensure to replace 'service_id' and 'owner_id' in Skapi initialization with actual
  values from your service.
- User must be logged in to call verifyEmail method
- If your service does not allow users to signup, the users will not be able to disable
  their account.
- All data related to the account will be deleted after 90 days
- When building a static website, you can use the action attribute to redirect users
  to a new page after a successful request.
- Disabled accounts can be reactivated within 90 days using the recoverAccount() method.
- User must be logged in to call the getUsers() method.
- If the user has not logged in to your service after account creation, they will
  NOT appear on your user list in Skapi's admin page.
- If 7 days have passed since the account creation, and the user still has not logged
  in to your service, user's signup will be automatically invalidated.
- User should know their password, and have their account email verified. Otherwise
  user's account cannot be recovered.
- Conditional query does not work on user_id, email, phone_number, approved. It must
  be searched with the '=' condition.
- The range parameter cannot be used with the condition parameter.
- When deleting records by database query, user will not delete records that they
  do not own, or records that are uploaded as read-only. However, if the user is an
  admin, they can delete any records in the database.
- Ensure to replace 'service_id' and 'owner_id' with actual values.
- User must be logged in to call methods related to profile updates, email verification,
  changing password, and account management.
- Users cannot search for attributes that are not set to public.
- 'Tags should NOT have special characters. Only allowed special characters are: [
  ] ^ _ ` : ; < = > ? @ and white space.'
- Anonymous (unsigned) users cannot create subscription records.
- When unsubscribed, subscription information may need some time to be updated. (Usually
  almost immediate)
- The posts can be queried alongside with all other peoples posts in the table.
- Allows posting only one reference per user.
- Uses OAuth2 with refresh token — requires setup of connected app in skapi
- HTTPS REQUIRED. WebRTC only works on HTTPS environment.
- HTTPS REQUIRED. Notifications only works on HTTPS environment.
- Users must be logged in to subscribe to service newsletters.
- Users must have their email verified to subscribe to service newsletters.
errors:
- 'SIGNUP_CONFIRMATION_NEEDED: User''s signup confirmation is required.'
- User's email verified state will be lost if the user had changed their email address.
- '400 Bad Request: Check the parameters provided'
- 'USER_IS_DISABLED: User account is disabled'
- 'endOfList: true, means there are no more records to fetch.'
- Record is readonly.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: api key mismatch'
- 'NOT_EXISTS: Service does not exists. Register your service at skapi.com'
- user already exists.
- Least one login attempt is required.
- User's signup confirmation is required.
- This account is disabled.
- Incorrect username or password.
- Too many attempts. Please try again later.
- Attempt limit exceeded, please try after some time.
- 'LimitExceededException: Attempt limit exceeded, please try after some time.'
- 'CodeMismatchException: Invalid verification code provided, please try again.'
- 'INVALID_REQUEST: Callback must be a function.'
- 'INVALID_REQUEST: No realtime connection. Execute connectRealtime() before this
  method.'
- 'INVALID_REQUEST: User has not joined to the recipient group. Run joinRealtime(''...'')'
- 'INVALID_REQUEST: Realtime connection is not open. Try reconnecting with connectRealtime().'
- 'DEVICE_NOT_FOUND: Requested media device not found.'
- 'INVALID_REQUEST: Data channel with the protocol "{protocol name}$" already exists.'
- 'SUCCESS: Verification code has been sent.'
- 'SUCCESS: New password has been set.'
- 'USER_IS_DISABLED: User''s account is disabled'
- 'USER_IS_DISABLED: User can choose to recover their account.'
- 'Invalid password: Check the password entered.'
- 'USER_IS_DISABLED: User account is disabled.'
- '401 Unauthorized: Recheck email and password.'
- 'USER_IS_DISABLED: Account is disabled.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'EXISTS: user already exists.'
- 'INVALID_REQUEST: Least one login attempt is required.'
- 'USER_IS_DISABLED: This account is disabled.'
- 'INCORRECT_USERNAME_OR_PASSWORD: Incorrect username or password.'
- 'REQUEST_EXCEED: Too many attempts. Please try again later.'
- 'INVALID_REQUEST: Private access cannot be granted to service owners.'
- 'INVALID_REQUEST: Record should be owned by the user.'
- 'INVALID_REQUEST: cannot process more than 100 users at once.'
- 'INVALID_REQUEST: At least 1 user id is required.'
auth_info:
  mentioned_objects:
  - OpenID Logger
  - Client Secret Key
  - UserProfile
  - OauthToken
  - AuthProvider
client:
  base_url: https://docs.skapi.com
  auth:
    type: oauth2
source_metadata: null
