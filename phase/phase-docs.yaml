resources:
- name: secrets
  endpoint:
    path: /v1/secrets
    method: GET
    data_selector: secrets
    params:
      app_id: string
      env: string
- name: delete_secrets
  endpoint:
    path: /v1/secrets
    method: DELETE
    data_selector: message
    params:
      app_id: string
      env: string
- name: create_secrets
  endpoint:
    path: /v1/secrets
    method: POST
    data_selector: secrets
    params:
      app_id: string
      env: string
- name: update_secrets
  endpoint:
    path: /v1/secrets
    method: PUT
    data_selector: secrets
    params:
      app_id: string
      env: string
- name: organisation
  endpoint:
    path: /console/organisation
    method: GET
- name: apps
  endpoint:
    path: /console/apps
    method: GET
- name: members
  endpoint:
    path: /console/members
    method: GET
- name: settings
  endpoint:
    path: /console/settings
    method: GET
- name: users
  endpoint:
    path: /console/users
    method: GET
- name: environments
  endpoint:
    path: /console/environments
    method: GET
    data_selector: environments
    params: {}
- name: secrets
  endpoint:
    path: /api/secrets
    method: GET
    data_selector: secrets
    params: {}
- name: secrets
  endpoint:
    path: /public-api/secrets
    method: GET
    data_selector: records
    params: {}
- name: secrets
  endpoint:
    path: /secrets
    method: GET
    data_selector: secrets
- name: secrets
  endpoint:
    path: /secrets
    method: GET
    data_selector: secrets
- name: dynamic_secrets
  endpoint:
    path: /v1/secrets/dynamic/
    method: GET
    data_selector: message
    params:
      app_id: string
      env: string
      path: string
      name: string
      lease: boolean
- name: leases
  endpoint:
    path: /v1/secrets/dynamic/leases/
    method: GET
    data_selector: message
    params:
      secret_id: string
- name: revoke_lease
  endpoint:
    path: /v1/secrets/dynamic/leases/
    method: DELETE
    data_selector: message
    params:
      app_id: 72b9ddd5-8fce-49ab-89d9-c431d53a9552
      env: development
- name: authenticate
  endpoint:
    path: /identities/external/v1/aws/iam/auth/
    method: POST
    data_selector: authentication
- name: dynamic_secrets
  endpoint:
    path: /v1/secrets/dynamic/
    method: GET
    data_selector: secrets
    params:
      app_id: 72b9ddd5-8fce-49ab-89d9-c431d53a9552
      env: development
      path: /backend
      name: AWS IAM credentials
      lease: true
- name: leases
  endpoint:
    path: /v1/secrets/dynamic/leases/
    method: GET
    data_selector: leases
    params:
      secret_id: 72b9ddd5-8fce-49ab-89d9-c431d53a9552
- name: revoke_lease
  endpoint:
    path: /v1/secrets/dynamic/leases/
    method: DELETE
    data_selector: message
    params:
      app_id: 72b9ddd5-8fce-49ab-89d9-c431d53a9552
      env: development
- name: authenticate_with_aws_iam
  endpoint:
    path: /identities/external/v1/aws/iam/auth/
    method: POST
- name: external_identity
  endpoint:
    path: /identities/external/v1/aws/iam/auth
    method: POST
- name: roles
  endpoint:
    path: /access-control/roles
    method: GET
    data_selector: roles
    params: {}
- name: phase_secret
  endpoint:
    path: /secrets
    method: POST
    data_selector: secrets
- name: my-app-deployment
  endpoint:
    path: /integrations/platforms/kubernetes#using-init-container
    method: GET
    data_selector: ''
    params: {}
- name: my-app-autoredeploy
  endpoint:
    path: /integrations/platforms/kubernetes#4-auto-redeploying-deployments-when-secrets-change
    method: GET
    data_selector: ''
    params: {}
- name: phase_secret
  endpoint:
    path: /integrations/platforms/kubernetes#using-the-phase-kubernetes-operator
    method: POST
    data_selector: spec
    params: {}
- name: my-app-deployment
  endpoint:
    path: /integrations/platforms/kubernetes#using-init-container
    method: POST
    data_selector: deployment
    params: {}
- name: my-application-secret
  endpoint:
    path: /integrations/platforms/kubernetes#2-using-env-from-to-inject-all-secrets
    method: POST
    data_selector: secret
    params: {}
- name: AWS IAM Dynamic Secret
  endpoint:
    path: /integrations/platforms/aws-iam#create-an-aws-iam-dynamic-secret
    method: POST
- name: secrets-init
  endpoint:
    path: /secrets/init
    method: POST
    data_selector: secrets
    params:
      app-id: 00000000-0000-0000-0000-000000000000
      env: production
- name: app
  endpoint:
    path: /app/start
    method: POST
    data_selector: application
    params: {}
- name: secrets-init
  endpoint:
    path: /secrets/init
    method: POST
    data_selector: secrets
    params:
      app-id: 00000000-0000-0000-0000-000000000000
      env: production
- name: secrets
  endpoint:
    path: /v1/phase-console-kv-sync
    method: GET
    data_selector: data
    params: {}
- name: secrets
  endpoint:
    path: /v1/phase-console-kv-sync
    method: GET
    data_selector: data
    params: {}
- name: sync_secrets
  endpoint:
    path: /integrations/platforms/hashicorp-vault#sync-secrets-from-phase
    method: GET
    data_selector: secrets
    params: {}
- name: Cloudflare Pages Sync
  endpoint:
    path: /sync/cloudflare-pages
    method: POST
- name: prepare_phase_cli
  endpoint:
    path: /install.sh
    method: POST
    data_selector: secrets
- name: build_and_push_image
  endpoint:
    path: /docker
    method: POST
    data_selector: image
- name: secrets
  endpoint:
    path: /secrets/export
    method: POST
    data_selector: secrets
- name: docker
  endpoint:
    path: /docker/login
    method: POST
    data_selector: login
- name: environment_variables
  endpoint:
    path: /integrations/platforms/vercel#system-environment-variables
    method: GET
    data_selector: variables
    params: {}
- name: system_environment_variables
  endpoint:
    path: /integrations/platforms/vercel#system-environment-variables
    method: GET
    data_selector: variables
- name: framework_environment_variables
  endpoint:
    path: /integrations/platforms/vercel#framework-environment-variables
    method: GET
    data_selector: variables
- name: pipeline
  endpoint:
    path: /integrations/platforms/drone-ci
    method: GET
- name: secrets
  endpoint:
    path: /secrets
    method: GET
- name: package.json
  endpoint:
    path: /
    method: GET
    data_selector: scripts
- name: McLaren
  endpoint:
    path: /
    method: GET
- name: initialize_phase
  endpoint:
    path: /integrations/frameworks/ruby-on-rails#initialize-phase-for-your-svelte-app
    method: GET
    data_selector: ''
- name: start_app
  endpoint:
    path: /integrations/frameworks/ruby-on-rails#start-your-app-with-phase
    method: GET
    data_selector: ''
- name: McLaren
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: cert-manager
  endpoint:
    path: /cert-manager
    method: GET
    data_selector: records
- name: ingress-nginx
  endpoint:
    path: /ingress-nginx
    method: GET
    data_selector: records
- name: EKS Cluster
  endpoint:
    path: /self-hosting/aws-eks#1-create-an-eks-cluster
    method: POST
    data_selector: cluster-config.yaml
    params: {}
- name: cert-manager
  endpoint:
    path: /self-hosting/aws-eks#3-install-cert-manager
    method: POST
    data_selector: cert-manager.yaml
    params: {}
- name: ClusterIssuer
  endpoint:
    path: /self-hosting/aws-eks#4-configure-cluster-issuer
    method: POST
    data_selector: cluster-issuer.yaml
    params: {}
- name: StorageClass
  endpoint:
    path: /self-hosting/aws-eks#5-create-default-storage-class-for-postgre-sql
    method: POST
    data_selector: storage-class.yaml
    params: {}
- name: NGINX Ingress Controller
  endpoint:
    path: /self-hosting/aws-eks#6-install-nginx-ingress-controller
    method: POST
    data_selector: ingress-nginx
    params: {}
- name: Phase Console
  endpoint:
    path: /self-hosting/aws-eks#9-deploy-phase-console
    method: POST
    data_selector: phase-values.yaml
    params: {}
- name: cert-manager
  endpoint:
    path: /github.com/cert-manager/cert-manager/releases/download/v1.17.2/cert-manager.yaml
    method: GET
- name: ClusterIssuer
  endpoint:
    path: /cluster-issuer.yaml
    method: POST
- name: NGINX Ingress Controller
  endpoint:
    path: /ingress-nginx
    method: POST
- name: EKS Cluster
  endpoint:
    path: /self-hosting/aws-eks#1-create-an-eks-cluster
    method: POST
    data_selector: eks-cluster
    params:
      name: phase-eks-cluster
      region: eu-central-1
- name: GITHUB_INTEGRATION_CLIENT_ID
  endpoint:
    path: /service/oauth/github/callback
    method: POST
- name: GITHUB_INTEGRATION_CLIENT_SECRET
  endpoint:
    path: /service/oauth/github/callback
    method: POST
- name: GITHUB_ENTERPRISE_INTEGRATION_CLIENT_ID
  endpoint:
    path: /service/oauth/github/callback
    method: POST
- name: GITHUB_ENTERPRISE_INTEGRATION_CLIENT_SECRET
  endpoint:
    path: /service/oauth/github/callback
    method: POST
- name: postgresql
  endpoint:
    path: /databases/postgresql
    method: POST
    data_selector: database
    params:
      database: phase_db
      user: phase_api
- name: redis
  endpoint:
    path: /databases/redis
    method: POST
    data_selector: redis
    params: {}
- name: GITHUB_INTEGRATION_CLIENT_ID
  endpoint:
    path: /service/oauth/github/callback
    method: POST
    data_selector: client_id
- name: GITHUB_INTEGRATION_CLIENT_SECRET
  endpoint:
    path: /service/oauth/github/callback
    method: POST
    data_selector: client_secret
- name: GITHUB_ENTERPRISE_INTEGRATION_CLIENT_ID
  endpoint:
    path: /service/oauth/github/callback
    method: POST
    data_selector: enterprise_client_id
- name: GITHUB_ENTERPRISE_INTEGRATION_CLIENT_SECRET
  endpoint:
    path: /service/oauth/github/callback
    method: POST
    data_selector: enterprise_client_secret
notes:
- Deploy Phase on your own infrastructure, maintain full control over your data.
- You can login to the Phase Console with Google, GitHub or GitLab.
- Once the CLI is installed, you need to authenticate it with your Phase account and
  App.
- The Phase Console is 'Mission Control' for your application secrets.
- Organisation names must be unique.
- Phase is end-to-end encrypted, which means that each member of an Organisation has
  a unique set of encryption keys.
- Users must create a sudo password to secure account keys.
- Invited members will not have access to any Apps or Environments after joining.
- Server-Side Encryption (SSE) must be enabled for the App to use secret syncing integrations.
- To use certain features of Phase such as third-party integrations or the public
  REST API, you will need to enable server-side encryption (SSE).
- Phase Apps are secured with end-to-end encryption (E2EE) by default.
- Environment names must match the pattern ^[a-zA-Z0-9\-_]{1,32}$.
- All Organisation Admins will have access to this Environment.
- Changing the environment name will affect how you construct references to secrets.
- Secrets are key/value pairs used to store application secrets and configuration
  for your applications across environments.
- Requires setup of app secrets in Phase
- Dynamic Secrets reduce the attack surface of your secrets by limiting the lifespan
  of active credentials and ensuring that each user has their own set of credentials.
- The ability to create and manage Dynamic Secrets is available for organizations
  with an Enterprise tier subscription.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses OAuth2 with refresh token — requires setup of connected app in Phase
- Some API calls may require specific authentication methods
- This feature is currently in BETA and is being tested for performance, usage, and
  reliability across different platforms.
- When using zsh with modifications like powerline10k, command suggestions and tab
  completions might be affected in certain cases. This is not due to the Phase CLI
  - you can verify this by launching zsh directly.
- Secrets are only available within the shell session and are automatically cleared
  when you exit.
- Uses OAuth2 with refresh token — requires setup of connected app in phase
- Update a secret by manually entering a new value
- Update a secret by piping a value via stdin
- Update a secret with a randomly generated hexadecimal value of 32 characters
- Update a secret with a personal override value
- This automated method opens the Phase Console in your default browser for authentication.
- Specify the application name to override the .phase.json file or when it's not present
  in your project directory.
- The environment 'prod' for key 'PROD_AWS_SECRET_ACCESS_KEY' either does not exist
  or you do not have access to it.
- Disable TLS certificate verification is dangerous and can expose you to risks of
  MITM attacks.
- The database connection string postgresql:// is referencing DB_USER, DB_PASSWORD,
  DB_HOST, DB_PORT and DB_NAME from the same environment (dev/development)
- Lightweight, secure, and open-source SDKs for managing secrets in your stack.
- Requires setup of service account token or user token (PAT)
- All API requests must be authenticated with a bearer token in the Authorization
  header of each request, followed by the type of token used and the token.
- The secret management tools are only available in SDK version 3.0.0 or higher.
- All API requests must be authenticated with a bearer token in the Authorization
  header of each request.
- Use AWS SigV4 to sign an STS GetCallerIdentity request.
- Phase employs a Role-Based Access Control (RBAC) system to manage permissions for
  both human users and programmatic access via Service Accounts.
- Programmatic access to secrets in Phase is facilitated by Service Accounts.
- Supports third-party authentication systems for access control
- 'Ensure that the redirect URI configured in Authentik exactly matches: https://[YOUR_PHASE_HOST]/api/auth/callback/authentik'
- OIDC SSO as an authentication method is only available for organizations with an
  Enterprise tier subscription.
- Valid email address is a requirement to sign up or log in to the Phase Console
- Save this token securely - it's required for API authentication.
- Service accounts provide a secure and controlled method for programmatic access
  to the Phase platform.
- Service accounts must be manually provisioned access to Apps and Environments in
  order to access secrets.
- A valid email address is a requirement to sign up or log in to the Phase Console.
- Uses External Identities to establish a trusted relationship with identity providers.
- Service accounts share many of the properties and behavior of human user accounts.
- Server-side encryption (SSE) enabled for the Service Account you want to use the
  External Identity with.
- A third-party platform or service that supported by Phase
- The ability to create and manage network access policies is available for organizations
  with a Pro or an Enterprise tier subscription.
- Phase enforces two-factor authentication (2FA) using U2F / YubiKey for all system
  access.
- Strict password policies are enforced across all systems within Phase.
- The ability to create and manage custom roles is available for organizations with
  a Pro or an Enterprise tier subscription.
- Phase uses t=n XOR based secret sharing.
- ChaCha20-Poly1305 is currently being used in TLS 1.3, Wireguard and others.
- Curve25519 is currently being used in TLS 1.3, Signal, Wireguard, Tor and others.
- Phase implements comprehensive security measures at every level.
- Ensure the PHASE_SERVICE_TOKEN is securely provided to your container for authentication
  with Phase services.
- The operator automatically synchronizes secrets every 60 seconds.
- Docker by default does not support multi-line secrets when using the --env-file
  flag.
- Using secrets mitigates these risks. Instead of passing sensitive data as environment
  variables, secrets are mounted as files inside the container.
- Ensure applications have access only to the secrets they need.
- 'RBAC Policies: Implement Role-Based Access Control policies to restrict access
  to secrets.'
- Each time a credential is generated, a new IAM user is created, and credentials
  are created for this user.
- The template must include the {{random}} variable, which will be replaced with a
  random string when the user is created.
- The AWS IAM Path is optional and defaults to /phase/<org_name>/<app_name>/<environment_name>/<secret_path>.
- Implement Role-Based Access Control policies to restrict access to secrets.
- Requires setup of IAM Role with External ID for dynamic secrets.
- Use PHASE_SERVICE_TOKEN for authentication.
- Be cautious with special characters in secret keys or values.
- When secret syncing is enabled, secrets stored inside Phase will be treated as the
  source of truth. Any secrets on the target service will be overwritten or deleted.
- Make a note of the Policy ARN (e.g., arn:aws:iam::YOUR_ACCOUNT_ID:policy/phase-console-aws-secrets-manager-integration-policy).
  You will need this ARN in Step 3.
- An External ID is a security measure that helps prevent the 'confused deputy' problem.
- Service tokens require manual provisioning and rotation to maintain security best
  practices.
- Some objects like Contact may return nulls in deeply nested fields
- Phase encrypts your credentials directly in the browser and only decrypts them in
  memory to perform sync operations.
- Secrets stored inside Phase will be treated as the source of truth.
- Your credentials are kept secure with robust application-layer encryption.
- For security reasons Phase sets the secret type in Cloudflare Workers environment
  variables as type `Encrypted` for additional protection.
- For security reasons Phase sets the secret type in Cloudflare Workers environment
  variables as type 'Encrypted' for additional protection.
- Phase will encrypt your secrets via libsodium's `SealedBox` using your GitHub repository's
  public key before sending them to GitHub.
- Group Access Tokens are available for users with the Premium or Ultimate license
  tiers. They are not available with a trial license.
- Phase will encrypt your secrets via libsodium's SealedBox using your GitHub repository's
  public key before sending them to GitHub.
- For security reasons, secrets in your source Phase Environment will be synced to
  your GitHub repository as type Secrets, whether it's at a repository level or an
  Environment level.
- Secrets stored inside Phase will be treated as the source of truth. Any secrets
  on the target service will be overwritten or deleted.
- Requires setup of connected app in phase
- Environment variables that you may have already created in Vercel scoped to 'All
  Environments' will remain untouched and not managed by Phase. This may lead to unwanted
  duplication of environment variables, if the same secret key exists in Phase.
- If you select 'All' Target Environments in Phase as the sync destination, your secrets
  will be synced to each of your environments in the Vercel project individually.
- Requires setup of connected app in api
- When secret syncing is enabled, secrets stored inside Phase will be treated as the
  source of truth.
- Environment variables that you may have already created in Vercel scoped to 'All
  Environments' will remain untouched and not managed by Phase.
- Have signed up for the Phase Console and created an application
- PHASE_SERVICE_TOKEN
- Have signed up for the Phase Console and created an application.
- Your credentials will be encrypted and saved. You can view and manage these credentials
  under *Service Credentials* in the *Integrations* screen.
- If you are using a Self-Hosted instance of the Phase Console, you may supply PHASE_HOST
  environment variable with your URL (https://<HOST>).
- If using a Self-Hosted instance of the Phase Console, supply PHASE_HOST environment
  variable with your URL.
- If you are using a Self-Hosted instance of the Phase Console, you may supply PHASE_HOST
  environment variable with your URL.
- PHASE_SERVICE_TOKEN must be set in the repository on Drone CI as a secret.
- For environment variables to be exposed to the client, you'll have to prefix them
  with NEXT_PUBLIC.
- You can use Phase run to inject secrets to your application process during runtime.
- There is no need for you to change any code or add a dependency.
- React environment variables must be prefixed with REACT_APP_
- You can use Phase run to inject secrets to your application process during runtime.
  There is no need for you to change any code or add a dependency.
- Vue.js client side environment variables must be prefixed with `VUE_APP`.
- Svelte client side environment variables must be prefixed with PUBLIC_
- In production, Laravel applications typically run using PHP-FPM managed by supervisor.
- PHP-FPM can read environment variables from the host system when properly configured.
- Gatsby client side environment variables must be prefixed with `GATSBY_`
- Vue.js client side environment variables must be prefixed with VUE_APP
- You must use an SSO provider.
- You must provision a TLS certificate and access Phase over HTTPS.
- It's recommended to run the Phase Service behind a VPN or within a VPC, rather than
  exposing it directly to the internet.
- You may need to configure additional components such as TLS certificates, web application
  firewalls, database backups and replication, DDoS protection, rate limiting, and
  SSO.
- Ensure to replace 'phase.your-domain.com' with your actual domain.
- You can use external databases if preferred.
- You must have an AWS Account with necessary permissions to create EKS clusters,
  IAM roles, and related resources.
- For external databases, you will need to adjust the Helm chart values accordingly.
- For production use, please configure a valid TLS certificate for your domain.
- Choose to run the Phase Console components on managed services (PaaS) or alternative
  container orchestration tools like Kubernetes instead of Docker Compose.
- Consider running the Phase Service behind a VPN or a VPC and not to expose it the
  internet directly.
- Need to set up things like TLS certificates, web application firewall, database
  backups and replication, DDoS protection, rate limiting, SSOs etc.
- Uses OAuth2 with refresh token — requires setup of connected app in Phase Console
- Remember to secure your environment and not expose sensitive data or configurations
  in production.
- By default Phase will provision a self-signed TLS certificate using nginx. Please
  use a valid TLS certificate for your own domain in production.
- This guide assumes you are setting up Phase Console with in-cluster databases.
- The entire guide can be completed in a CloudShell in the AWS Console in 30 minutes.
- You should now be able to access the Phase console at https://your-ec2-ip-address.
- Some Environment variables need to be set across multiple services
- Ensure you have selected Monitoring.
- Block public incoming connections to your database by restricting access.
- Add your user to the Docker group.
- You may consider running the Phase Service behind a VPN and not exposing it to the
  internet directly.
- For production use, you may need to set up additional components such as TLS certificates,
  web application firewall, database backups and replication, DDoS protection, rate
  limiting, SSOs, etc.
- Requests to https://your-vm-public-ip/* are routed to the frontend service at http://frontend:3000.
- Requests to https://your-vm-public-ip/service/* are routed to the backend service
  at http://backend:8000, with the /service path prefix stripped.
- Redeployment of services may be necessary due to configuration changes.
- Secret references are resolved only during a service deployment.
- A custom message to display on the login screen can be up to 512 characters long.
- Ensure you have selected Monitoring for your Droplet.
- Block public incoming connections to your database.
- For enhanced security, Phase services support mounting secrets from files.
- You can enable debug mode by setting DEBUG=True to view logs indicating the source
  of each loaded secret.
- The base console URL for NextAuth is referenced from `${HTTP_PROTOCOL}${HOST}`.
- The base console URI for OAuth redirection is referenced from `${HTTP_PROTOCOL}${HOST}`.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Warning: The environment ''prod'' for key ''PROD_AWS_KEY'' either does not exist
  or you do not have access to it.'
- '401 Unauthorized: Recheck API key or token expiration'
- Lease revoked successfully
- '400: A bad request, typically due to missing data required to process the request'
- '403: An authentication or access error, check your credentials'
- '409: A conflict in your secret configuration, due to attempting to set a key that
  already exists'
- '5xx: A server error, something went wrong with the Phase API'
- '403: An authentication or access error, check your authentication credentials and
  token scope'
- '409: A conflict in your secret configuration due to attempting to set a key that
  already exists'
- '5xx: A server error — something went wrong with the Phase API'
- '403: Access Denied: a network access policy restricts access from your IP address.'
- 'Unauthorized access: Check 2FA settings or password policies.'
- '403: Access denied: a network access policy restricts access from your IP address.'
- 'SERVICE_TOKEN_EXPIRED: Rotate your service token.'
- 'EXPORT_FAILURE: Check special characters in secret keys.'
- '/bin/sh: export: line 0: SECRET_KEY?: bad variable name'
- '403 Forbidden: Check your permissions and policies.'
- '403 Forbidden: Check your policy permissions.'
- Binding name 'PLAIN_TEXT_ENVIRONMENT_VARIABLE' already in use. Please use a different
  name and try again.
- GITHUB_INTEGRATION_CLIENT_ID and GITHUB_INTEGRATION_CLIENT_SECRET have not been
  configured for your self-hosted deployment.
- AWS_SECRET_KEY is reserved by Vercel and will not sync with Phase.
- AWS_EXECUTION_ENV is reserved by Vercel and will not sync with Phase.
- AWS_LAMBDA_LOG_GROUP_NAME is reserved by Vercel and will not sync with Phase.
- AWS_LAMBDA_LOG_STREAM_NAME is reserved by Vercel and will not sync with Phase.
- AWS_LAMBDA_FUNCTION_NAME is reserved by Vercel and will not sync with Phase.
- AWS_LAMBDA_FUNCTION_MEMORY_SIZE is reserved by Vercel and will not sync with Phase.
- AWS_LAMBDA_FUNCTION_VERSION is reserved by Vercel and will not sync with Phase.
- NOW_REGION is reserved by Vercel and will not sync with Phase.
- TZ is reserved by Vercel and will not sync with Phase.
- LAMBDA_TASK_ROOT is reserved by Vercel and will not sync with Phase.
- LAMBDA_RUNTIME_DIR is reserved by Vercel and will not sync with Phase.
- Check your DNS records and ensure they point to your load balancer public IP address.
- If you visit your domain and see a self-signed certificate or errors after DNS propagation,
  check the cert-manager pod logs.
- Check the health of the services using curl.
- '401 Unauthorized: Recheck SSH keys or access rights'
auth_info:
  mentioned_objects:
  - OauthToken
  - App
  - AuthProvider
  - Personal Access Token
  - Service Account Token
  - AUTHENTIK_CLIENT_ID
  - AUTHENTIK_CLIENT_SECRET
  - AUTHENTIK_URL
  - AUTHENTIK_APP_SLUG
  - NamedCredential
  - Entra ID
  - Enterprise Applications
  - Permissions
  - Users
  - OAuth client ID
  - Client secret
  - Redirect URI
  - Role ID
  - Secret ID
  - policy
  - AppRole
  - Policy
  - Google
  - GitHub
  - GitLab
client:
  base_url: https://console.phase.dev
  auth:
    type: oauth2
source_metadata: null
