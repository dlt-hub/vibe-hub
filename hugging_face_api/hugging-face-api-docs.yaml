resources:
- name: Hugging Face Inference API
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: bar_progress
  endpoint:
    path: /bar-progress
    method: GET
    data_selector: data
    params: {}
- name: Save to ILLA Drive
  endpoint:
    path: /save-to-illa-drive
    method: POST
    data_selector: File data
    params:
      File name with extension: String
      File Type: String
      Folder: String
      Allow anonymous: Boolean
      Replace: Boolean
- name: Download from ILLA Drive
  endpoint:
    path: /download-from-illa-drive
    method: GET
    data_selector: Download info
    params:
      Save as Zip: Boolean
- name: Download
  endpoint:
    path: /download
    method: GET
    data_selector: Data
    params:
      File type: String
      File name: String
- name: Set global data
  endpoint:
    path: /set-global-data
    method: POST
    data_selector: value
    params:
      key: String
      value: String
- name: Set global data in
  endpoint:
    path: /set-global-data-in
    method: POST
    data_selector: value
    params:
      key: String
      path: String
      value: String
- name: Set local storage
  endpoint:
    path: /set-local-storage
    method: POST
    data_selector: value
    params:
      key: String
      value: String
- name: Action
  endpoint:
    path: /trigger/action
    method: POST
- name: Control component
  endpoint:
    path: /control/component
    method: POST
- name: setValue
  endpoint:
    path: /set/value
    method: POST
- name: clearValue
  endpoint:
    path: /clear/value
    method: POST
- name: focus
  endpoint:
    path: /focus
    method: POST
- name: validate
  endpoint:
    path: /validate
    method: POST
- name: clearValidation
  endpoint:
    path: /clear/validation
    method: POST
- name: setSelectedValue
  endpoint:
    path: /set/selected/value
    method: POST
- name: submit
  endpoint:
    path: /submit
    method: POST
- name: toggle
  endpoint:
    path: /toggle
    method: POST
- name: reset
  endpoint:
    path: /reset
    method: POST
- name: openModal
  endpoint:
    path: /open/modal
    method: POST
- name: closeModal
  endpoint:
    path: /close/modal
    method: POST
- name: setImageUrl
  endpoint:
    path: /set/image/url
    method: POST
- name: setPrimaryValue
  endpoint:
    path: /set/primary/value
    method: POST
- name: setFileUrl
  endpoint:
    path: /set/file/url
    method: POST
- name: play
  endpoint:
    path: /play
    method: POST
- name: pause
  endpoint:
    path: /pause
    method: POST
- name: setVideoUrl
  endpoint:
    path: /set/video/url
    method: POST
- name: setAudioUrl
  endpoint:
    path: /set/audio/url
    method: POST
- name: setSrc
  endpoint:
    path: /set/src
    method: POST
- name: setMarkers
  endpoint:
    path: /set/markers
    method: POST
- name: bar_progress
  endpoint:
    path: /bar-progress
    method: GET
    data_selector: properties
    params: {}
- name: bar_progress
  endpoint:
    path: /bar-progress
    method: GET
    data_selector: records
- name: project
  endpoint:
    path: /project
    method: GET
    data_selector: data
    params: {}
- name: therapist
  endpoint:
    path: /therapist
    method: GET
    data_selector: data
    params: {}
- name: circle_progress
  endpoint:
    path: /circle-progress
    method: GET
- name: project
  endpoint:
    path: /project
    method: GET
- name: therapist
  endpoint:
    path: /therapist
    method: GET
- name: circle_progress
  endpoint:
    path: /circle-progress
    method: GET
    data_selector: properties
    params: {}
- name: Data
  endpoint:
    path: /data
    method: GET
    data_selector: data
    params: {}
- name: filter
  endpoint:
    path: /set/filter
    method: POST
    data_selector: items
    params: {}
- name: column_visibility
  endpoint:
    path: /set/column_visibility
    method: POST
    data_selector: columnName
    params: {}
- name: page
  endpoint:
    path: /set/page
    method: POST
    data_selector: page
    params: {}
- name: page_size
  endpoint:
    path: /set/page_size
    method: POST
    data_selector: value
    params: {}
- name: row_selection
  endpoint:
    path: /set/row_selection
    method: POST
    data_selector: selected_rows
    params: {}
- name: promoteCodes
  endpoint:
    path: /promoteCodes
    method: GET
    data_selector: data.promoteCodes
    params: {}
- name: promoteCodes
  endpoint:
    path: /restapi/promoteCodes
    method: GET
    data_selector: data.promoteCodes
    params: {}
- name: promoteCodes
  endpoint:
    path: /restapi/promoteCodes
    method: GET
    data_selector: data.promoteCodes
    params: {}
- name: promoteCodes
  endpoint:
    path: /restapi/promoteCodes
    method: GET
    data_selector: data.promoteCodes
    params: {}
- name: promoteCodes
  endpoint:
    path: /promoteCodes
    method: GET
    data_selector: data.promoteCodes
- name: restapi
  endpoint:
    path: /restapi
    method: GET
    data_selector: data
    params:
      id: 1
- name: promoteCodes
  endpoint:
    path: /promoteCodes
    method: GET
    data_selector: data.promoteCodes
    params: {}
- name: events
  endpoint:
    path: /supabase/events
    method: GET
    data_selector: data
    params: {}
- name: restapi
  endpoint:
    path: /restapi
    method: GET
    data_selector: data
    params:
      id: '1'
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: data
    params: {}
- name: form
  endpoint:
    path: /form
    method: GET
    data_selector: records
- name: image
  endpoint:
    method: GET
- name: input
  endpoint:
    path: /input
    method: GET
    data_selector: properties
    params: {}
- name: data_source
  endpoint:
    path: /data/source
    method: GET
    data_selector: data
    params: {}
- name: menu
  endpoint:
    path: /menu
    method: GET
    data_selector: items
    params: {}
- name: menu
  endpoint:
    path: /menu
    method: GET
    data_selector: items
    params: {}
- name: modal
  endpoint:
    path: /modal
    method: GET
    data_selector: properties
    params: {}
- name: modal
  endpoint:
    path: /modal
    method: GET
- name: selection
  endpoint:
    path: /selection
    method: GET
    data_selector: data
    params: {}
- name: number_input
  endpoint:
    path: /number-input
    method: GET
    data_selector: data
    params: {}
- name: pdf_source
  endpoint:
    path: /pdf/source
    method: GET
    data_selector: url
    params: {}
- name: selection
  endpoint:
    path: /selection
    method: GET
    data_selector: data
    params: {}
- name: numberInput
  endpoint:
    path: /number-input
    method: GET
    data_selector: properties
    params: {}
- name: s31
  endpoint:
    path: /s31
    method: GET
    data_selector: data
    params: {}
- name: pdf_source
  endpoint:
    path: /pdf
    method: GET
    data_selector: pdf
    params: {}
- name: selection
  endpoint:
    path: /select
    method: GET
    data_selector: records
    params: {}
- name: selection
  endpoint:
    path: /selection
    method: GET
    data_selector: data
    params: {}
- name: selection
  endpoint:
    path: /selection
    method: GET
    data_selector: data
    params: {}
- name: employee_profile
  endpoint:
    path: /employee_profile
    method: GET
    data_selector: employees
    params: {}
- name: Rate
  endpoint:
    path: /rate
    method: GET
- name: tabs_component
  endpoint:
    path: /tabs
    method: GET
    data_selector: data
    params: {}
- name: selection
  endpoint:
    path: /selection
    method: GET
    data_selector: data
    params: {}
- name: text_area_input
  endpoint:
    path: /text-area-input
    method: GET
    data_selector: properties
- name: statistics_component
  endpoint:
    path: /statistics
    method: GET
    data_selector: data
    params: {}
- name: promoteCodes
  endpoint:
    path: /restapi/promoteCodes
    method: GET
    data_selector: data.promoteCodes
    params: {}
- name: employee_profile
  endpoint:
    path: /employee_profile
    method: GET
    data_selector: employees
- name: promoteCodes
  endpoint:
    path: /promoteCodes
    method: GET
    data_selector: data.promoteCodes
    params: {}
- name: tabs_component
  endpoint:
    path: /tabs
    method: GET
    data_selector: tabs
- name: upload
  endpoint:
    path: /upload
    method: POST
    data_selector: files
    params: {}
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: video
    params: {}
- name: text_area_input
  endpoint:
    path: /text-area-input
    method: GET
- name: Hugging Face Inference API
  endpoint:
    path: /models
    method: GET
- name: promoteCodes
  endpoint:
    path: /promoteCodes
    method: GET
    data_selector: data.promoteCodes
    params: {}
- name: Hugging Face Inference API
  endpoint:
    params: {}
- name: promoteCodes
  endpoint:
    path: /promoteCodes
    method: GET
    data_selector: data.promoteCodes
    params: {}
- name: timeline
  endpoint:
    path: /timeline
    method: GET
    data_selector: milestones
    params: {}
- name: upload
  endpoint:
    path: /upload
    method: POST
    data_selector: value
    params: {}
- name: records
  endpoint:
    path: /v0/{base_id}/{table_name}
    method: GET
    data_selector: records
- name: create_record
  endpoint:
    path: /v0/{base_id}/{table_name}
    method: POST
    data_selector: records
- name: update_record
  endpoint:
    path: /v0/{base_id}/{table_name}/{record_id}
    method: PATCH
    data_selector: records
- name: delete_record
  endpoint:
    path: /v0/{base_id}/{table_name}/{record_id}
    method: DELETE
    data_selector: records
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: videoData
- name: Hugging Face Inference API
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: list_objects
  endpoint:
    path: /list_objects
    method: GET
    data_selector: objects
    params: {}
- name: read_object
  endpoint:
    path: /read_object
    method: GET
    data_selector: content
    params: {}
- name: download_object
  endpoint:
    path: /download_object
    method: GET
    data_selector: content
    params: {}
- name: delete_object
  endpoint:
    path: /delete_object
    method: DELETE
    data_selector: deleted_object
    params: {}
- name: delete_multiple_objects
  endpoint:
    path: /delete_multiple_objects
    method: DELETE
    data_selector: deleted_objects
    params: {}
- name: upload_data
  endpoint:
    path: /upload_data
    method: POST
    data_selector: upload_result
    params: {}
- name: upload_multiple_data
  endpoint:
    path: /upload_multiple_data
    method: POST
    data_selector: upload_results
    params: {}
- name: Hugging Face Inference API
  endpoint:
    path: /models
    method: GET
- name: documents
  endpoint:
    path: /v1/database/collections/{collectionId}/documents
    method: GET
    data_selector: documents
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: data
    params: {}
- name: list_records
  endpoint:
    path: /v0/{baseId}/{tableName}
    method: GET
    data_selector: records
- name: get_record
  endpoint:
    path: /v0/{baseId}/{tableName}/{recordId}
    method: GET
    data_selector: fields
- name: create_records
  endpoint:
    path: /v0/{baseId}/{tableName}
    method: POST
    data_selector: records
- name: update_record
  endpoint:
    path: /v0/{baseId}/{tableName}/{recordId}
    method: PATCH
    data_selector: fields
- name: delete_record
  endpoint:
    path: /v0/{baseId}/{tableName}/{recordId}
    method: DELETE
    data_selector: {}
- name: insert_document
  endpoint:
    path: /_doc
    method: PUT
    data_selector: result
- name: update_document
  endpoint:
    path: /_update
    method: POST
    data_selector: result
- name: search_documents
  endpoint:
    path: /_search
    method: GET
    data_selector: hits.hits
- name: get_document
  endpoint:
    path: /_doc/{id}
    method: GET
    data_selector: found
- name: delete_document
  endpoint:
    path: /_doc/{id}
    method: DELETE
    data_selector: found
- name: list_objects
  endpoint:
    path: /list
    method: GET
    data_selector: objects
- name: read_object
  endpoint:
    path: /read
    method: GET
    data_selector: content
- name: download_object
  endpoint:
    path: /download
    method: GET
    data_selector: content
- name: delete_object
  endpoint:
    path: /delete
    method: DELETE
    data_selector: deleted
- name: delete_multiple_objects
  endpoint:
    path: /delete_multiple
    method: DELETE
    data_selector: deleted_multiple
- name: upload_data
  endpoint:
    path: /upload
    method: POST
    data_selector: upload_status
- name: upload_multiple_data
  endpoint:
    path: /upload_multiple
    method: POST
    data_selector: upload_status_multiple
- name: documents
  endpoint:
    path: /v1/database/collections/{collectionId}/documents
    method: GET
    data_selector: documents
- name: Get user by UID
  endpoint:
    path: /getUserByUID
    method: GET
- name: Get user by email
  endpoint:
    path: /getUserByEmail
    method: GET
- name: Get user by phone number
  endpoint:
    path: /getUserByPhoneNumber
    method: GET
- name: Create a user
  endpoint:
    path: /createUser
    method: POST
- name: Update a user
  endpoint:
    path: /updateUser
    method: PUT
- name: Delete a user
  endpoint:
    path: /deleteUser
    method: DELETE
- name: List users
  endpoint:
    path: /listUsers
    method: GET
- name: Query Firebase
  endpoint:
    path: /queryFirebase
    method: POST
- name: Insert Document
  endpoint:
    path: /insertDocument
    method: POST
- name: Update Document
  endpoint:
    path: /updateDocument
    method: PUT
- name: Get Document by ID
  endpoint:
    path: /getDocumentByID
    method: GET
- name: Delete a Document
  endpoint:
    path: /deleteDocument
    method: DELETE
- name: Get Collections
  endpoint:
    path: /getCollections
    method: GET
- name: Query Collection Group
  endpoint:
    path: /queryCollectionGroup
    method: POST
- name: Query database
  endpoint:
    path: /queryDatabase
    method: POST
- name: Set data
  endpoint:
    path: /setData
    method: POST
- name: Update data
  endpoint:
    path: /updateData
    method: PUT
- name: Append data to a list
  endpoint:
    path: /appendDataToList
    method: POST
- name: Hugging Face Endpoint
  endpoint:
    path: /new
    method: POST
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: SQL
    data_selector: records
- name: Get user by UID
  endpoint:
    path: /getUserByUID
    method: GET
    data_selector: user
    params:
      UID: required
- name: Get user by email
  endpoint:
    path: /getUserByEmail
    method: GET
    data_selector: user
    params:
      email: required
- name: Get user by phone number
  endpoint:
    path: /getUserByPhoneNumber
    method: GET
    data_selector: user
    params:
      phone number: required
- name: Create a user
  endpoint:
    path: /createUser
    method: POST
    data_selector: user
    params:
      User object: required
- name: Update a user
  endpoint:
    path: /updateUser
    method: PUT
    data_selector: user
    params:
      UID: required
      User object: required
- name: Delete a user
  endpoint:
    path: /deleteUser
    method: DELETE
    data_selector: user
    params:
      UID: required
- name: List users
  endpoint:
    path: /listUsers
    method: GET
    data_selector: users
    params:
      Length of list: optional
      Next page token: optional
- name: Query Firebase
  endpoint:
    path: /queryFirebase
    method: POST
    data_selector: queryResults
    params:
      Collection: required
      where: required
      limit: optional
      Order by: optional
      Ordering direction: optional
- name: ms_sql
  endpoint:
    path: /services/data/vXX.X/sobjects/MS_SQL
    method: GET
    data_selector: records
- name: MongoDB Query Resource
  endpoint:
    path: /mongodb/query
    method: POST
- name: Hugging Face Endpoint
  endpoint:
    path: /new
    method: POST
- name: users
  endpoint:
    path: /users
    method: SELECT
    data_selector: records
- name: Hydra
  endpoint:
    path: /hydra
    method: GET
- name: users
  endpoint:
    path: /users
    method: SQL
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: SQL
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: SQL
    data_selector: data
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: records
    params: {}
- name: PostgreSQL
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: redis_resource
  endpoint:
    path: /path/to/redis/endpoint
    method: GET
    data_selector: data
- name: aggregate
  endpoint:
    method: POST
    data_selector: result
- name: bulkwrite
  endpoint:
    method: POST
- name: count
  endpoint:
    method: POST
    data_selector: count
- name: deleteMany
  endpoint:
    method: POST
    data_selector: result.DeletedCount
- name: deleteOne
  endpoint:
    method: POST
    data_selector: result.DeletedCount
- name: distinct
  endpoint:
    method: POST
    data_selector: result
- name: find
  endpoint:
    method: POST
    data_selector: result
- name: findOne
  endpoint:
    method: POST
    data_selector: result
- name: user
  endpoint:
    path: /user
    method: SELECT
    data_selector: '*'
    params: {}
- name: database
  endpoint:
    path: /databases
    method: GET
    data_selector: databases
- name: Oracle DB
  endpoint:
    path: /oracledb
    method: POST
- name: employee_profile
  endpoint:
    path: /employee_profile
    method: GET
    data_selector: result
- name: users
  endpoint:
    path: /users
    method: SQL
    data_selector: records
    params: {}
- name: redis_commands
  endpoint:
    path: /redis/commands
    method: POST
    data_selector: results
- name: IP Address
  endpoint:
    path: /add-illa-ip-to-your-allow-list
    method: GET
    data_selector: ip_addresses
    params: {}
- name: snowflake_resource
  endpoint:
    path: /snowflake
    method: POST
    data_selector: data
    params: {}
- name: list_records
  endpoint:
    path: /v0/{base_id}/{table_name}
    method: GET
- name: get_record
  endpoint:
    path: /v0/{base_id}/{table_name}/{record_id}
    method: GET
- name: create_records
  endpoint:
    path: /v0/{base_id}/{table_name}
    method: POST
- name: update_record
  endpoint:
    path: /v0/{base_id}/{table_name}/{record_id}
    method: PATCH
- name: delete_record
  endpoint:
    path: /v0/{base_id}/{table_name}/{record_id}
    method: DELETE
- name: user
  endpoint:
    path: /user
    method: SELECT
    data_selector: '*'
- name: users
  endpoint:
    path: /users
    method: SQL
    data_selector: records
- name: list_all_objects
  endpoint:
    path: /list
    method: GET
    data_selector: objects
- name: read_object
  endpoint:
    path: /read
    method: GET
    data_selector: content
- name: download_object
  endpoint:
    path: /download
    method: GET
    data_selector: content
- name: delete_object
  endpoint:
    path: /delete
    method: DELETE
    data_selector: deleted
- name: delete_multiple_objects
  endpoint:
    path: /delete_multiple
    method: DELETE
    data_selector: deleted
- name: upload_data
  endpoint:
    path: /upload
    method: POST
    data_selector: upload_status
- name: upload_multiple_data
  endpoint:
    path: /upload_multiple
    method: POST
    data_selector: upload_status
- name: document
  endpoint:
    path: /v1/database/{databaseId}/collections/{collectionId}/documents
    method: GET
    data_selector: documents
- name: employee_profile
  endpoint:
    path: /employee_profile
    method: GET
    data_selector: result
- name: ClickHouse
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: document
  endpoint:
    path: /{index}/_doc/{id}
    method: GET
    data_selector: document
    params: {}
- name: list_records
  endpoint:
    path: /v0/{base_id}/{table_name}
    method: GET
- name: get_record
  endpoint:
    path: /v0/{base_id}/{table_name}/{record_id}
    method: GET
- name: create_records
  endpoint:
    path: /v0/{base_id}/{table_name}
    method: POST
- name: update_record
  endpoint:
    path: /v0/{base_id}/{table_name}/{record_id}
    method: PATCH
- name: delete_record
  endpoint:
    path: /v0/{base_id}/{table_name}/{record_id}
    method: DELETE
- name: user_by_uid
  endpoint:
    path: /getUserByUID
    method: GET
    data_selector: user
    params:
      uid: required
- name: user_by_email
  endpoint:
    path: /getUserByEmail
    method: GET
    data_selector: user
    params:
      email: required
- name: user_by_phone
  endpoint:
    path: /getUserByPhoneNumber
    method: GET
    data_selector: user
    params:
      phone_number: required
- name: create_user
  endpoint:
    path: /createUser
    method: POST
    data_selector: user
    params:
      user_object: required
- name: update_user
  endpoint:
    path: /updateUser
    method: PUT
    data_selector: user
    params:
      uid: required
      user_object: required
- name: delete_user
  endpoint:
    path: /deleteUser
    method: DELETE
    data_selector: user
    params:
      uid: required
- name: list_users
  endpoint:
    path: /listUsers
    method: GET
    data_selector: users
    params:
      length_of_list: optional
      next_page_token: optional
- name: list_objects
  endpoint:
    path: /list-objects
    method: GET
    data_selector: objects
- name: read_object
  endpoint:
    path: /read-object
    method: GET
    data_selector: content
- name: download_object
  endpoint:
    path: /download-object
    method: GET
    data_selector: content
- name: delete_object
  endpoint:
    path: /delete-object
    method: DELETE
    data_selector: deleted_content
- name: delete_multiple_objects
  endpoint:
    path: /delete-multiple-objects
    method: DELETE
    data_selector: deleted_contents
- name: upload_data
  endpoint:
    path: /upload-data
    method: POST
    data_selector: upload_message
- name: upload_multiple_data
  endpoint:
    path: /upload-multiple-data
    method: POST
    data_selector: upload_message
- name: Hugging Face Endpoint
  endpoint:
    path: /new
    method: GET
- name: documents
  endpoint:
    path: /v1/database
    method: POST
    data_selector: documents
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: data
    params: {}
- name: MongoDB_query_resource
  endpoint:
    path: /mongo/resource
    method: POST
    data_selector: data
    params: {}
- name: insert_document
  endpoint:
    path: /_doc
    method: PUT
    data_selector: result
    params: {}
- name: update_document
  endpoint:
    path: /_doc/{id}
    method: POST
    data_selector: result
    params: {}
- name: search_document
  endpoint:
    path: /_search
    method: GET
    data_selector: hits.hits
    params: {}
- name: get_document
  endpoint:
    path: /_doc/{id}
    method: GET
    data_selector: _source
    params: {}
- name: delete_document
  endpoint:
    path: /_doc/{id}
    method: DELETE
    data_selector: result
    params: {}
- name: adminPanel
  endpoint:
    path: /adminPanel
    method: POST
    data_selector: data
    params: {}
- name: Oracle DB
  endpoint:
    path: /oracledb
    method: GET
- name: PostgreSQL
  endpoint:
    path: /postgresql
    method: POST
    data_selector: data
    params: {}
- name: redis_resource
  endpoint:
    path: /services/data/vXX.X/redis
    method: GET
    data_selector: records
    params: {}
- name: Get user by UID
  endpoint:
    path: /getUserByUID
    method: GET
    data_selector: user
    params:
      UID: required
- name: Get user by email
  endpoint:
    path: /getUserByEmail
    method: GET
    data_selector: user
    params:
      email: required
- name: Get user by phone number
  endpoint:
    path: /getUserByPhoneNumber
    method: GET
    data_selector: user
    params:
      phone number: required
- name: Create a user
  endpoint:
    path: /createUser
    method: POST
    data_selector: user
    params:
      User object: required
- name: Update a user
  endpoint:
    path: /updateUser
    method: PUT
    data_selector: user
    params:
      UID: required
      User object: required
- name: Delete a user
  endpoint:
    path: /deleteUser
    method: DELETE
    data_selector: user
    params:
      UID: required
- name: List users
  endpoint:
    path: /listUsers
    method: GET
    data_selector: users
    params:
      Length of list: optional
      Next page token: optional
- name: Query Firebase
  endpoint:
    path: /queryFirebase
    method: GET
    data_selector: queryResults
    params:
      Collection: required
      where: required
      limit: optional
      Order by: optional
      Ordering direction: optional
- name: Insert Document
  endpoint:
    path: /insertDocument
    method: POST
    data_selector: document
    params:
      Collection: required
      Document ID: optional
      value: required
- name: Update Document
  endpoint:
    path: /updateDocument
    method: PUT
    data_selector: document
    params:
      Collection: required
      Document ID: optional
      value: required
- name: Get Document by ID
  endpoint:
    path: /getDocumentByID
    method: GET
    data_selector: document
    params:
      Collection: required
      Document ID: optional
- name: Delete a Document
  endpoint:
    path: /deleteDocument
    method: DELETE
    data_selector: document
    params:
      Collection: required
      Document ID: optional
- name: Get Collections
  endpoint:
    path: /getCollections
    method: GET
    data_selector: collections
    params:
      Parent Document ID: optional
- name: Query Collection Group
  endpoint:
    path: /queryCollectionGroup
    method: GET
    data_selector: queryResults
    params:
      Collection: required
      where: required
      limit: optional
      Order by: optional
      Ordering direction: optional
- name: Query database
  endpoint:
    path: /queryDatabase
    method: GET
    data_selector: queryResults
    params:
      Database ref: required
- name: Set data
  endpoint:
    path: /setData
    method: POST
    data_selector: data
    params:
      Database ref: required
      Object to set: required
- name: Update data
  endpoint:
    path: /updateData
    method: PUT
    data_selector: data
    params:
      UID: required
      User object: required
- name: Append data to a list
  endpoint:
    path: /appendDataToList
    method: POST
    data_selector: data
    params:
      Database ref: required
      Object to set: required
- name: Snowflake
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /user
    method: SELECT
    data_selector: records
    params: {}
- name: Hugging Face Endpoint
  endpoint:
    path: /new
    method: POST
- name: TiDB
  endpoint:
    path: /
    method: SQL
    data_selector: results
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: Creative Transformers
  endpoint:
    path: /transformer/creative
    method: GET
- name: Query Transformer
  endpoint:
    path: /transformer/query
    method: GET
- name: MariaDB
  endpoint:
    path: /mariadb
    method: POST
    data_selector: data
    params: {}
- name: employee_profile
  endpoint:
    path: /employee_profile
    method: GET
    data_selector: result
- name: users
  endpoint:
    path: /users
    method: SQL
    data_selector: records
- name: MongoDB Query Resource
  endpoint:
    path: /mongo/query
    method: POST
    data_selector: result
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: adminPanel
  endpoint:
    path: /projects/adminPanel
    method: GET
    data_selector: data
- name: Oracle DB
  endpoint:
    path: /oracle/db
    method: GET
    data_selector: records
- name: PostgreSQL
  endpoint:
    path: /postgresql
    method: POST
    data_selector: data
    params:
      Hostname: required
      Port: '5432'
      Database: required
      Username: required
      Password: required
- name: redis_data
  endpoint:
    path: /redis/data
    method: GET
    data_selector: data
    params: {}
- name: Snowflake Resource
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /user
    method: SELECT
    data_selector: records
    params: {}
- name: TiDB
  endpoint:
    path: /
    method: SQL
    data_selector: result
    params: {}
- name: employee_profile
  endpoint:
    path: /employee_profile
    method: GET
    data_selector: result
notes:
- You can freely access models and datasets shared by other industry experts or host
  and deploy your models on Hugging Face.
- The port which ILLA Builder can be accessed on can be changed
- 'Username: root'
- 'Password: password (self-host mode only)'
- The Bar Progress component is a visual element that represents the progress or completion
  of a task or process.
- The Button component allows users to trigger an action or perform a function by
  clicking on the button.
- Each option must be JSON format and contain two keys, value and label.
- You can dynamically change the initial value by typing JavaScript in {{}}.
- The Circle Progress component visually represents progress or completion status.
- Default start date value is taken from the first promote code's startedAt time.
- Default end date value is taken from the first promote code's expiredAt time.
- Button labeled 'Update' sets the end date to today's date.
- Default value of the date component is set as the last update time of first promote
  code from the rest api data.
- Pagination can be configured to display data in a paginated manner.
- When pagination is enabled, you can configure the number of items to be displayed
  per page.
- Default value of the rate component is 0
- Allows half-star increments
- The Table component allows users to display, organize, and manipulate tabular data.
- Default value can be set using {{restapi1.data.promoteCodes[0].updatedAt}}
- The Table component allows users to display and manipulate tabular data.
- Enables server-side pagination.
- The Tabs component allows users to organize and present content in a tabbed layout.
- Default value for time picker can be set using the last update time of the first
  promote code from the REST API data.
- Please check whether your resources are publicly accessible.
- Update your network or firewall setting to add ILLA's IP addresses to the allowlist.
- You can get the API token in your Hugging Face profile settings.
- You can get your token in https://huggingface.co/settings/tokens.
- API key is required for making API requests to the Appwrite server.
- Before connect to your resources, please check whether your resources are publicly
  accessible.
- Ensure to configure the hostname, port, username, and password correctly.
- Requires valid access key and secret access key for authentication.
- Requires setup of project and API key in Appwrite
- Double check the hostname, port, username, and password is correct
- Requires valid hostname, port, username, and password for connection.
- The organization token is required and can be obtained from https://huggingface.co/settings/tokens.
- Default port is '3306'.
- Requires setup of Firebase project with valid Private Key.
- Get the organization API token in profile settings.
- Use this password for authentication.
- The default port is '3306' if not specified.
- SQL commands include select, insert, update, delete.
- The server host's default port is '1433'.
- Test connection after providing hostname, port, username, and password.
- Requires account name, warehouse, database, username, and password for connection.
- Neon is a popular open-source relational database management system.
- 'Requires connection parameters: hostname, port, username, password.'
- You can only have ONE database in the free tier.
- It is recommended to enable SSL.
- Commands like KEYS, GET, HGETALL, ZRANGE, LRANGE, EXISTS, and TTL can be used to
  interact with Redis.
- If not, please update your network or firewall setting to add ILLA's IP addresses
  to the allowlist so that ILLA can connect to your resources.
- Default port is '4000'.
- If you don't specify a CA Certificate, a default certificate is filled in.
- Requires API key for authentication
- Ensure to provide Database ID and Project ID
- If not, please update your network or firewall setting to add ILLA's IP addresses
  to the allowlist.
- Ensure correct hostname, port, username, and password for connection.
- Default port is '5432' if not specified.
- API key is required to authenticate requests.
- Default port is '9440' if not specified.
- MongoDB is designed to be flexible, scalable, and fast, and is particularly well-suited
  for handling large amounts of unstructured or semi-structured data.
- Ensure to provide the correct hostname, port, username, and password to connect.
- The server host's port number defaults to '3306' if not specified.
- The organization token is required.
- Endpoint URL must be created and retrieved from the provided link.
- It's recommended to enable SSL.
- Default port is '1433' if not specified.
- MongoDB is designed to be flexible, scalable, and fast, particularly for handling
  large amounts of unstructured or semi-structured data.
- You can use the query editor to write queries in MongoDB's native query language.
- Default port is '6379' if not specified.
- Double check hostname, port, username, and password for connection.
- Supabase provides an open-source Firebase alternative with real-time databases and
  user authentication.
- Default port is '4000' if not specified.
- CA Certificate is required for establishing a secure connection.
- SSL is recommended to enable.
errors:
- For any questions or assistance, feel free to join our Discord community or reach
  out to us at support@illasoft.com.
- '401 Unauthorized: Double check hostname, port, username, and password.'
- For any questions or assistance, feel free to join our Discord community or reach
  out to us at support@illasoft.com
- Check hostname, port, username, and password is correct.
auth_info:
  mentioned_objects:
  - Token
  - API Key
  - Project ID
  - Database ID
client:
  base_url: https://Appwrite.io
  auth:
    type: apikey
source_metadata: null
