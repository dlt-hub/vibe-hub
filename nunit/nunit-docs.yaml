resources:
- name: runsettings
  endpoint:
    path: /runsettings
    method: GET
    data_selector: settings
    params: {}
- name: project_properties
  endpoint:
    path: /changing-a-project-to-use-mtp
    method: GET
    data_selector: properties
    params: {}
- name: switching_platform
  endpoint:
    path: /switching-from-vstest-to-dotnet-test
    method: GET
    data_selector: properties
    params: {}
- name: embedded_engine_version
  endpoint:
    path: /adapter/version/embedded_engine
    method: GET
    data_selector: embedded_engine
- name: features_and_enhancements
  endpoint:
    path: /features/enhancements
    method: GET
- name: resolved_issues
  endpoint:
    path: /resolved/issues
    method: GET
- name: internal_development_info
  endpoint:
    path: /internal/development
    method: GET
- name: test_runner
  endpoint:
    path: /nunit.engine.api
    method: GET
    data_selector: ITestRunner
- name: NUnit 3 Test Project (Android)
  endpoint:
    path: /NUnit/Android
    method: GET
    data_selector: projects
    params: {}
- name: NUnit 3 Test Project (iOS)
  endpoint:
    path: /NUnit/iOS
    method: GET
    data_selector: projects
    params: {}
- name: NUnit 3 Test Project (Universal Windows)
  endpoint:
    path: /NUnit/UniversalWindows
    method: GET
    data_selector: projects
    params: {}
- name: StructureRules
  endpoint:
    path: /nunit/structure/rules
    method: GET
    data_selector: rules
    params: {}
- name: AssertionRules
  endpoint:
    path: /nunit/assertion/rules
    method: GET
    data_selector: rules
    params: {}
- name: SuppressorRules
  endpoint:
    path: /nunit/suppressor/rules
    method: GET
    data_selector: rules
    params: {}
- name: StyleRules
  endpoint:
    path: /nunit/style/rules
    method: GET
    data_selector: rules
    params: {}
- name: Configure severity
  endpoint:
    path: /Configure/severity
    method: GET
    data_selector: values
    params: {}
- name: async_test_method
  endpoint:
    path: /async/test/method
    method: GET
    data_selector: violations
    params: {}
- name: TestMethodUsageAnalyzer
  endpoint:
    path: https://github.com/nunit/nunit.analyzers/blob/4.9.2/src/nunit.analyzers/TestMethodUsage/TestMethodUsageAnalyzer.cs
    method: GET
    data_selector: none
    params: {}
- name: severity
  endpoint:
    path: /configure/severity
    method: GET
    data_selector: parameters
    params:
      Id: NUnit1023
      Severity: Error
      Enabled: 'True'
      Category: Structure
      Code: '[ValueSourceUsageAnalyzer](https://github.com/nunit/nunit.analyzers/blob/4.9.2/src/nunit.analyzers/ValueSourceUsage/ValueSourceUsageAnalyzer.cs)'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: severity
  endpoint:
    path: /NUnit1034
    method: GET
    data_selector: Severity
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: ClassicModelAssertUsageAnalyzer
  endpoint:
    path: https://github.com/nunit/nunit.analyzers/blob/4.9.2/src/nunit.analyzers/ClassicModelAssertUsage/ClassicModelAssertUsageAnalyzer.cs
    method: GET
    data_selector: records
    params: {}
- name: severity
  endpoint:
    path: /configure/severity
    method: GET
    data_selector: severity
    params: {}
- name: severity
  endpoint:
    path: /ruleset/severity
    method: GET
    data_selector: Severity
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: severity
  endpoint:
    path: /configure/severity
    method: GET
    data_selector: severity
    params: {}
- name: severity
  endpoint:
    path: /configure/severity
    method: GET
    data_selector: severity
    params: {}
- name: severity
  endpoint:
    path: /configure/severity
    method: GET
    data_selector: severity
    params: {}
- name: Constraint
  endpoint:
    path: /constraints
    method: GET
    data_selector: constraints
    params: {}
- name: TestCase
  endpoint:
    path: /testcases
    method: GET
    data_selector: testcases
    params: {}
- name: NUnit1001
  endpoint:
    path: /nunit-analyzers/NUnit1001.html
    method: GET
- name: NUnit1002
  endpoint:
    path: /nunit-analyzers/NUnit1002.html
    method: GET
- name: NUnit1003
  endpoint:
    path: /nunit-analyzers/NUnit1003.html
    method: GET
- name: NUnit1004
  endpoint:
    path: /nunit-analyzers/NUnit1004.html
    method: GET
- name: NUnit1005
  endpoint:
    path: /nunit-analyzers/NUnit1005.html
    method: GET
- name: NUnit1006
  endpoint:
    path: /nunit-analyzers/NUnit1006.html
    method: GET
- name: NUnit1007
  endpoint:
    path: /nunit-analyzers/NUnit1007.html
    method: GET
- name: NUnit1008
  endpoint:
    path: /nunit-analyzers/NUnit1008.html
    method: GET
- name: NUnit1009
  endpoint:
    path: /nunit-analyzers/NUnit1009.html
    method: GET
- name: NUnit1010
  endpoint:
    path: /nunit-analyzers/NUnit1010.html
    method: GET
- name: NUnit1011
  endpoint:
    path: /nunit-analyzers/NUnit1011.html
    method: GET
- name: NUnit1012
  endpoint:
    path: /nunit-analyzers/NUnit1012.html
    method: GET
- name: NUnit1013
  endpoint:
    path: /nunit-analyzers/NUnit1013.html
    method: GET
- name: NUnit1014
  endpoint:
    path: /nunit-analyzers/NUnit1014.html
    method: GET
- name: NUnit1015
  endpoint:
    path: /nunit-analyzers/NUnit1015.html
    method: GET
- name: NUnit1016
  endpoint:
    path: /nunit-analyzers/NUnit1016.html
    method: GET
- name: NUnit1017
  endpoint:
    path: /nunit-analyzers/NUnit1017.html
    method: GET
- name: NUnit1018
  endpoint:
    path: /nunit-analyzers/NUnit1018.html
    method: GET
- name: NUnit1019
  endpoint:
    path: /nunit-analyzers/NUnit1019.html
    method: GET
- name: NUnit1020
  endpoint:
    path: /nunit-analyzers/NUnit1020.html
    method: GET
- name: NUnit1021
  endpoint:
    path: /nunit-analyzers/NUnit1021.html
    method: GET
- name: NUnit1022
  endpoint:
    path: /nunit-analyzers/NUnit1022.html
    method: GET
- name: NUnit1023
  endpoint:
    path: /nunit-analyzers/NUnit1023.html
    method: GET
- name: NUnit1024
  endpoint:
    path: /nunit-analyzers/NUnit1024.html
    method: GET
- name: NUnit1025
  endpoint:
    path: /nunit-analyzers/NUnit1025.html
    method: GET
- name: NUnit1026
  endpoint:
    path: /nunit-analyzers/NUnit1026.html
    method: GET
- name: NUnit1027
  endpoint:
    path: /nunit-analyzers/NUnit1027.html
    method: GET
- name: NUnit1028
  endpoint:
    path: /nunit-analyzers/NUnit1028.html
    method: GET
- name: NUnit1029
  endpoint:
    path: /nunit-analyzers/NUnit1029.html
    method: GET
- name: NUnit1030
  endpoint:
    path: /nunit-analyzers/NUnit1030.html
    method: GET
- name: NUnit1031
  endpoint:
    path: /nunit-analyzers/NUnit1031.html
    method: GET
- name: NUnit1032
  endpoint:
    path: /nunit-analyzers/NUnit1032.html
    method: GET
- name: NUnit1033
  endpoint:
    path: /nunit-analyzers/NUnit1033.html
    method: GET
- name: NUnit1034
  endpoint:
    path: /nunit-analyzers/NUnit1034.html
    method: GET
- name: NUnit1035
  endpoint:
    path: /nunit-analyzers/NUnit1035.html
    method: GET
- name: NUnit1036
  endpoint:
    path: /nunit-analyzers/NUnit1036.html
    method: GET
- name: NUnit1037
  endpoint:
    path: /nunit-analyzers/NUnit1037.html
    method: GET
- name: NUnit1038
  endpoint:
    path: /nunit-analyzers/NUnit1038.html
    method: GET
- name: NUnit2001
  endpoint:
    path: /nunit-analyzers/NUnit2001.html
    method: GET
- name: NUnit2002
  endpoint:
    path: /nunit-analyzers/NUnit2002.html
    method: GET
- name: NUnit2003
  endpoint:
    path: /nunit-analyzers/NUnit2003.html
    method: GET
- name: NUnit2004
  endpoint:
    path: /nunit-analyzers/NUnit2004.html
    method: GET
- name: NUnit2005
  endpoint:
    path: /nunit-analyzers/NUnit2005.html
    method: GET
- name: NUnit2006
  endpoint:
    path: /nunit-analyzers/NUnit2006.html
    method: GET
- name: NUnit2007
  endpoint:
    path: /nunit-analyzers/NUnit2007.html
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: SomeItemsIncompatibleTypesAnalyzer
  endpoint:
    path: https://github.com/nunit/nunit.analyzers/blob/4.9.2/src/nunit.analyzers/SomeItemsIncompatibleTypes/SomeItemsIncompatibleTypesAnalyzer.cs
    method: GET
    data_selector: ''
    params: {}
- name: severity
  endpoint:
    path: /configure/severity
    method: GET
    data_selector: severity
    params: {}
- name: ClassicModelAssertUsageAnalyzer
  endpoint:
    path: https://github.com/nunit/nunit.analyzers/blob/4.9.2/src/nunit.analyzers/ClassicModelAssertUsage/ClassicModelAssertUsageAnalyzer.cs
    method: GET
- name: ClassicModelAssertUsageAnalyzer
  endpoint:
    path: https://github.com/nunit/nunit.analyzers/blob/4.9.2/src/nunit.analyzers/ClassicModelAssertUsage/ClassicModelAssertUsageAnalyzer.cs
    method: GET
- name: ClassicModelAssertUsageAnalyzer
  endpoint:
    path: https://github.com/nunit/nunit.analyzers/blob/4.9.2/src/nunit.analyzers/ClassicModelAssertUsage/ClassicModelAssertUsageAnalyzer.cs
    method: GET
    data_selector: content
    params: {}
- name: severity
  endpoint:
    path: /configure/severity
    method: GET
    data_selector: Value
    params:
      Id: NUnit2033
- name: severity
  endpoint:
    path: /Configure/severity
    method: GET
    data_selector: Value
    params:
      Id: NUnit2034
- name: NUnit2036
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: ClassicModelAssertUsageAnalyzer
  endpoint:
    path: https://github.com/nunit/nunit.analyzers/blob/4.9.2/src/nunit.analyzers/ClassicModelAssertUsage/ClassicModelAssertUsageAnalyzer.cs
    method: GET
    data_selector: content
    params: {}
- name: comparison_constraint
  endpoint:
    path: /nunit2042/comparison/constraint
    method: GET
    data_selector: comparison_results
- name: severity
  endpoint:
    path: /configure/severity
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: severity
  endpoint:
    path: /NUnit2050/severity
    method: GET
    data_selector: severity
    params: {}
- name: ClassicModelAssertUsageAnalyzer
  endpoint:
    path: https://github.com/nunit/nunit.analyzers/blob/4.9.2/src/nunit.analyzers/ClassicModelAssertUsage/ClassicModelAssertUsageAnalyzer.cs
    method: GET
    data_selector: 'null'
    params: {}
- name: severity
  endpoint:
    path: /NUnit4001/severity
    method: GET
    data_selector: severity
    params: {}
- name: current_teams
  endpoint:
    path: /teams/current
    method: GET
    data_selector: teams
    params: {}
- name: membership_matrix
  endpoint:
    path: /teams/membership
    method: GET
    data_selector: members
    params: {}
- name: issues
  endpoint:
    path: /repos/{owner}/{repo}/issues
    method: GET
    data_selector: issues
    params: {}
- name: DebugTests
  endpoint:
    path: DebugTests
    method: GET
    data_selector: records
    params: {}
- name: DefaultCulture
  endpoint:
    path: DefaultCulture
    method: GET
    data_selector: records
    params: {}
- name: DefaultTestNamePattern
  endpoint:
    path: DefaultTestNamePattern
    method: GET
    data_selector: records
    params: {}
- name: DefaultTimeout
  endpoint:
    path: DefaultTimeout
    method: GET
    data_selector: records
    params: {}
- name: DefaultUICulture
  endpoint:
    path: DefaultUICulture
    method: GET
    data_selector: records
    params: {}
- name: InternalTraceLevel
  endpoint:
    path: InternalTraceLevel
    method: GET
    data_selector: records
    params: {}
- name: InternalTraceWriter
  endpoint:
    path: InternalTraceWriter
    method: GET
    data_selector: records
    params: {}
- name: LOAD
  endpoint:
    path: LOAD
    method: GET
    data_selector: records
    params: {}
- name: NumberOfTestWorkers
  endpoint:
    path: NumberOfTestWorkers
    method: GET
    data_selector: records
    params: {}
- name: PauseBeforeRun
  endpoint:
    path: PauseBeforeRun
    method: GET
    data_selector: records
    params: {}
- name: RandomSeed
  endpoint:
    path: RandomSeed
    method: GET
    data_selector: records
    params: {}
- name: RunOnMainThread
  endpoint:
    path: RunOnMainThread
    method: GET
    data_selector: records
    params: {}
- name: StopOnError
  endpoint:
    path: StopOnError
    method: GET
    data_selector: records
    params: {}
- name: SynchronousEvents
  endpoint:
    path: SynchronousEvents
    method: GET
    data_selector: records
    params: {}
- name: TestParameters
  endpoint:
    path: TestParameters
    method: GET
    data_selector: records
    params: {}
- name: TestParametersDictionary
  endpoint:
    path: TestParametersDictionary
    method: GET
    data_selector: records
    params: {}
- name: ThrowOnEachFailureUnderDebugger
  endpoint:
    path: ThrowOnEachFailureUnderDebugger
    method: GET
    data_selector: records
    params: {}
- name: WorkDirectory
  endpoint:
    path: WorkDirectory
    method: GET
    data_selector: records
    params: {}
- name: ColorEnabled
  endpoint:
    path: /ColorEnabled
    method: GET
    data_selector: ColorEnabled
    params: {}
- name: Format
  endpoint:
    path: /Format
    method: GET
- name: OutputPath
  endpoint:
    path: /OutputPath
    method: GET
- name: Parse
  endpoint:
    path: /Parse
    method: GET
    data_selector: returns
    params: {}
- name: Parse
  endpoint:
    path: /Parse(string)
    method: GET
    data_selector: returns
- name: ParseFilterElement
  endpoint:
    path: /ParseFilterElement()
    method: GET
    data_selector: returns
- name: ParseFilterExpression
  endpoint:
    path: /ParseFilterExpression()
    method: GET
    data_selector: returns
- name: ParseFilterTerm
  endpoint:
    path: /ParseFilterTerm()
    method: GET
    data_selector: returns
- name: Tokenizer
  endpoint:
    path: /Tokenizer
    method: GET
    data_selector: Token
    params: {}
- name: GetCustomAttributes
  endpoint:
    path: /GetCustomAttributes
    method: GET
    data_selector: attributes
    params: {}
- name: Default
  endpoint:
    path: /fields/default
    method: GET
    data_selector: description
    params: {}
- name: Suite
  endpoint:
    path: /fields/suite
    method: GET
    data_selector: description
    params: {}
- name: Test
  endpoint:
    path: /fields/test
    method: GET
    data_selector: description
    params: {}
- name: ApartmentAttribute
  endpoint:
    path: /api/apartment_attribute
    method: GET
    data_selector: attributes
    params: {}
- name: ApartmentAttribute
  endpoint:
    path: /ApartmentAttribute
    method: GET
    data_selector: parameters
    params: {}
- name: That
  endpoint:
    path: /nunit/That
    method: GET
    data_selector: parameters
    params: {}
- name: Throws
  endpoint:
    path: /nunit/Throws
    method: GET
    data_selector: parameters
    params: {}
- name: Throws
  endpoint:
    path: /Throws
    method: GET
    data_selector: records
- name: ThrowsAsync
  endpoint:
    path: /ThrowsAsync
    method: GET
    data_selector: records
- name: Assume
  endpoint:
    path: /NUnitFramework/framework/Assume
    method: GET
    data_selector: methods
- name: delegate
  endpoint:
    path: /public/delegate/AsyncTestDelegate
    method: GET
    data_selector: Task
    params: {}
- name: BeginInvoke
  endpoint:
    path: /BeginInvoke
    method: POST
    data_selector: result
- name: EndInvoke
  endpoint:
    path: /EndInvoke
    method: POST
    data_selector: result
- name: Invoke
  endpoint:
    path: /Invoke
    method: POST
    data_selector: result
- name: cancel_after_attribute
  endpoint:
    path: /attributes/cancel_after
    method: GET
    data_selector: timeout
    params: {}
- name: CategoryAttribute
  endpoint:
    path: /CategoryAttribute
    method: GET
    data_selector: records
- name: Category
  endpoint:
    path: /CategoryAttribute
    method: GET
    data_selector: categoryName
    params: {}
- name: Inheritance
  endpoint:
    path: /dotnet/api/system/object
    method: GET
- name: Implements
  endpoint:
    path: /dotnet/api/nunit.framework.interfaces.itestbuilder
    method: GET
- name: CultureAttribute
  endpoint:
    path: /NUnitFramework/framework/Attributes/CultureAttribute
    method: GET
    data_selector: attributes
    params: {}
- name: DefaultFloatingPointToleranceAttribute
  endpoint:
    path: /DefaultFloatingPointToleranceAttribute
    method: GET
    data_selector: attributes
    params: {}
- name: Description
  endpoint:
    path: /attributes/Description
    method: GET
    data_selector: description
    params: {}
- name: Exist
  endpoint:
    path: /Exist
    method: GET
    data_selector: FileOrDirectoryExistsConstraint
- name: Not
  endpoint:
    path: /Not
    method: GET
    data_selector: ConstraintExpression
- name: ContainObject
  endpoint:
    path: /ContainObject
    method: GET
    data_selector: SomeItemsConstraint
- name: ContainString
  endpoint:
    path: /ContainString
    method: GET
    data_selector: ContainsConstraint
- name: ContainKey
  endpoint:
    path: /ContainKey
    method: GET
    data_selector: DictionaryContainsKeyConstraint
- name: ContainValue
  endpoint:
    path: /ContainValue
    method: GET
    data_selector: DictionaryContainsValueConstraint
- name: EndWith
  endpoint:
    path: /EndWith
    method: GET
    data_selector: EndsWithConstraint
- name: MatchString
  endpoint:
    path: /MatchString
    method: GET
    data_selector: RegexConstraint
- name: MatchRegex
  endpoint:
    path: /MatchRegex
    method: GET
    data_selector: RegexConstraint
- name: StartWith
  endpoint:
    path: /StartWith
    method: GET
    data_selector: StartsWithConstraint
- name: ExplicitAttribute
  endpoint:
    path: /ExplicitAttribute
    method: GET
    data_selector: records
- name: LifeCycle
  endpoint:
    path: /NUnit.Framework.LifeCycle
    method: GET
    data_selector: ''
    params: {}
- name: Test
  endpoint:
    path: /NUnit.Framework.Internal.Test
    method: GET
    data_selector: ''
    params: {}
- name: Include
  endpoint:
    path: /IncludeExcludeAttribute/Include
    method: GET
    data_selector: Include
    params: {}
- name: Exclude
  endpoint:
    path: /IncludeExcludeAttribute/Exclude
    method: GET
    data_selector: Exclude
    params: {}
- name: Reason
  endpoint:
    path: /IncludeExcludeAttribute/Reason
    method: GET
    data_selector: Reason
    params: {}
- name: InconclusiveException
  endpoint:
    path: /nunit/framework/exceptions/inconclusiveexception
    method: GET
    data_selector: properties
    params: {}
- name: All
  endpoint:
    path: /All
    method: GET
    data_selector: ConstraintExpression
    params: {}
- name: Default
  endpoint:
    path: /Default
    method: GET
    data_selector: DefaultConstraint
    params: {}
- name: Empty
  endpoint:
    path: /Empty
    method: GET
    data_selector: EmptyConstraint
    params: {}
- name: Even
  endpoint:
    path: /Even
    method: GET
    data_selector: MultipleOfConstraint
    params: {}
- name: 'False'
  endpoint:
    path: /False
    method: GET
    data_selector: FalseConstraint
    params: {}
- name: NaN
  endpoint:
    path: /NaN
    method: GET
    data_selector: NaNConstraint
    params: {}
- name: Negative
  endpoint:
    path: /Negative
    method: GET
    data_selector: LessThanConstraint
    params: {}
- name: Not
  endpoint:
    path: /Not
    method: GET
    data_selector: ConstraintExpression
    params: {}
- name: 'Null'
  endpoint:
    path: /Null
    method: GET
    data_selector: NullConstraint
    params: {}
- name: Odd
  endpoint:
    path: /Odd
    method: GET
    data_selector: MultipleOfConstraint
    params: {}
- name: Ordered
  endpoint:
    path: /Ordered
    method: GET
    data_selector: CollectionOrderedConstraint
    params: {}
- name: Positive
  endpoint:
    path: /Positive
    method: GET
    data_selector: GreaterThanConstraint
    params: {}
- name: 'True'
  endpoint:
    path: /True
    method: GET
    data_selector: TrueConstraint
    params: {}
- name: Unique
  endpoint:
    path: /Unique
    method: GET
    data_selector: UniqueItemsConstraint
    params: {}
- name: WhiteSpace
  endpoint:
    path: /WhiteSpace
    method: GET
    data_selector: WhiteSpaceConstraint
    params: {}
- name: XmlSerializable
  endpoint:
    path: /XmlSerializable
    method: GET
    data_selector: XmlSerializableConstraint
    params: {}
- name: Zero
  endpoint:
    path: /Zero
    method: GET
    data_selector: EqualConstraint
    params: {}
- name: LevelOfParallelismAttribute
  endpoint:
    path: /LevelOfParallelismAttribute
    method: GET
    data_selector: parameters
    params:
      level: int
- name: InstancePerTestCase
  endpoint:
    path: /fields/InstancePerTestCase
    method: GET
    data_selector: description
    params: {}
- name: SingleInstance
  endpoint:
    path: /fields/SingleInstance
    method: GET
    data_selector: description
    params: {}
- name: MaxTimeAttribute
  endpoint:
    path: /MaxTimeAttribute
    method: GET
    data_selector: milliseconds
    params: {}
- name: ITestResult
  endpoint:
    path: /NUnit.Framework.Interfaces.ITestResult
    method: GET
    data_selector: result
    params: {}
- name: ResultState
  endpoint:
    path: /NUnit.Framework.MultipleAssertException
    method: GET
    data_selector: resultState
    params: {}
- name: NetPlatformAttribute
  endpoint:
    path: /NetPlatformAttribute
    method: GET
    data_selector: records
- name: NetPlatformAttribute
  endpoint:
    path: /NetPlatformAttribute
    method: GET
    data_selector: attributes
    params: {}
- name: OrderAttribute
  endpoint:
    path: /nunit/framework/orderattribute
    method: GET
    data_selector: attributes
    params: {}
- name: Order
  endpoint:
    path: /OrderAttribute
    method: GET
    data_selector: Order
    params: {}
- name: ParallelScope
  endpoint:
    path: /NUnit.Framework.ParallelScope.html
    method: GET
    data_selector: scope
    params: {}
- name: PlatformAttribute
  endpoint:
    path: /PlatformAttribute
    method: GET
    data_selector: platforms
    params: {}
- name: RandomAttribute_byte_byte_int
  endpoint:
    path: /RandomAttribute(byte, byte, int)
    method: POST
    data_selector: parameters
- name: RandomAttribute_double_double_int
  endpoint:
    path: /RandomAttribute(double, double, int)
    method: POST
    data_selector: parameters
- name: RandomAttribute_short_short_int
  endpoint:
    path: /RandomAttribute(short, short, int)
    method: POST
    data_selector: parameters
- name: RandomAttribute_int
  endpoint:
    path: /RandomAttribute(int)
    method: POST
    data_selector: parameters
- name: RandomAttribute_int_int_int
  endpoint:
    path: /RandomAttribute(int, int, int)
    method: POST
    data_selector: parameters
- name: RandomAttribute_long_long_int
  endpoint:
    path: /RandomAttribute(long, long, int)
    method: POST
    data_selector: parameters
- name: RandomAttribute_sbyte_sbyte_int
  endpoint:
    path: /RandomAttribute(sbyte, sbyte, int)
    method: POST
    data_selector: parameters
- name: RandomAttribute_float_float_int
  endpoint:
    path: /RandomAttribute(float, float, int)
    method: POST
    data_selector: parameters
- name: RandomAttribute_ushort_ushort_int
  endpoint:
    path: /RandomAttribute(ushort, ushort, int)
    method: POST
    data_selector: parameters
- name: RandomAttribute_uint_uint_int
  endpoint:
    path: /RandomAttribute(uint, uint, int)
    method: POST
    data_selector: parameters
- name: RandomAttribute_ulong_ulong_int
  endpoint:
    path: /RandomAttribute(ulong, ulong, int)
    method: POST
    data_selector: parameters
- name: RangeAttribute_double
  endpoint:
    path: /RangeAttribute(double,double,double)
    method: GET
    data_selector: parameters
    params: {}
- name: RangeAttribute_int
  endpoint:
    path: /RangeAttribute(int,int)
    method: GET
    data_selector: parameters
    params: {}
- name: RangeAttribute_int_step
  endpoint:
    path: /RangeAttribute(int,int,int)
    method: GET
    data_selector: parameters
    params: {}
- name: RangeAttribute_long
  endpoint:
    path: /RangeAttribute(long,long)
    method: GET
    data_selector: parameters
    params: {}
- name: RangeAttribute_long_step
  endpoint:
    path: /RangeAttribute(long,long,long)
    method: GET
    data_selector: parameters
    params: {}
- name: RangeAttribute_float
  endpoint:
    path: /RangeAttribute(float,float,float)
    method: GET
    data_selector: parameters
    params: {}
- name: RangeAttribute_uint
  endpoint:
    path: /RangeAttribute(uint,uint)
    method: GET
    data_selector: parameters
    params: {}
- name: RangeAttribute_uint_step
  endpoint:
    path: /RangeAttribute(uint,uint,uint)
    method: GET
    data_selector: parameters
    params: {}
- name: RangeAttribute_ulong
  endpoint:
    path: /RangeAttribute(ulong,ulong)
    method: GET
    data_selector: parameters
    params: {}
- name: RangeAttribute_ulong_step
  endpoint:
    path: /RangeAttribute(ulong,ulong,ulong)
    method: GET
    data_selector: parameters
    params: {}
- name: RepeatAttribute
  endpoint:
    path: /NUnit/Framework/RepeatAttribute
    method: GET
    data_selector: records
- name: RepeatAttribute(int)
  endpoint:
    path: /RepeatAttribute/int
    method: GET
    data_selector: parameters
    params: {}
- name: RepeatAttribute(int, bool)
  endpoint:
    path: /RepeatAttribute/int,bool
    method: GET
    data_selector: parameters
    params: {}
- name: RepeatedTestCommand
  endpoint:
    path: /NUnit.Framework.RepeatAttribute.RepeatedTestCommand
    method: GET
    data_selector: TestCommand
    params: {}
- name: Execute
  endpoint:
    path: /NUnit.Framework.RepeatAttribute.Execute
    method: GET
    data_selector: TestExecutionContext
    params: {}
- name: RequiresThreadAttribute
  endpoint:
    path: /nunit/framework/RequiresThreadAttribute
    method: GET
- name: ResultState
  endpoint:
    path: /framework/Exceptions/ResultStateException
    method: GET
    data_selector: ResultState
    params: {}
- name: RetryAttribute
  endpoint:
    path: /RetryAttribute
    method: GET
    data_selector: parameters
    params:
      tryCount: int
- name: SetUICultureAttribute
  endpoint:
    path: /nunit/SetUICultureAttribute
    method: GET
    data_selector: attributes
    params: {}
- name: TestSuite
  endpoint:
    path: /BuildFrom(ITypeInfo)
    method: GET
    data_selector: IEnumerable<TestSuite>
- name: TestExecutionContext
  endpoint:
    path: /SingleThreadedAttribute/ApplyToContext
    method: POST
    data_selector: context
- name: SuccessException
  endpoint:
    path: /SuccessException
    method: GET
    data_selector: ResultState
    params: {}
- name: TestActionAttribute
  endpoint:
    path: /NUnitFramework/framework/Attributes/TestActionAttribute
    method: GET
    data_selector: Properties
    params: {}
- name: TestAttribute
  endpoint:
    path: /NUnitFramework/framework/Attributes/TestAttribute
    method: GET
    data_selector: properties
    params: {}
- name: Arguments
  endpoint:
    data_selector: Arguments
- name: Author
  endpoint:
    data_selector: Author
- name: Category
  endpoint:
    data_selector: Category
- name: Description
  endpoint:
    data_selector: Description
- name: ExcludePlatform
  endpoint:
    data_selector: ExcludePlatform
- name: ExpectedResult
  endpoint:
    data_selector: ExpectedResult
- name: Explicit
  endpoint:
    data_selector: Explicit
- name: HasExpectedResult
  endpoint:
    data_selector: HasExpectedResult
- name: Ignore
  endpoint:
    data_selector: Ignore
- name: IgnoreReason
  endpoint:
    data_selector: IgnoreReason
- name: IncludePlatform
  endpoint:
    data_selector: IncludePlatform
- name: Properties
  endpoint:
    data_selector: Properties
- name: Reason
  endpoint:
    data_selector: Reason
- name: RunState
  endpoint:
    data_selector: RunState
- name: TestName
  endpoint:
    data_selector: TestName
- name: TestOf
  endpoint:
    data_selector: TestOf
- name: TypeArgs
  endpoint:
    data_selector: TypeArgs
- name: Until
  endpoint:
    data_selector: Until
- name: TestCaseAttribute
  endpoint:
    path: /nunit/framework/testcaseattribute
    method: GET
    data_selector: attributes
    params: {}
- name: TestCase
  endpoint:
    path: /TestCaseAttribute
    method: GET
    data_selector: arguments
    params: {}
- name: TestCaseAttribute
  endpoint:
    path: /NUnit/Framework/TestCaseAttribute
    method: GET
    data_selector: records
- name: TestCaseAttribute
  endpoint:
    path: /TestCaseAttribute
    method: GET
    data_selector: records
    params: {}
- name: TestCaseAttribute
  endpoint:
    path: /TestCaseAttribute
    method: GET
    data_selector: attributes
    params: {}
- name: TestCase
  endpoint:
    path: /nunit/framework/testcase
    method: GET
- name: TestCaseAttribute
  endpoint:
    path: /NUnitFramework/framework/Attributes/TestCaseAttribute
    method: GET
    data_selector: parameters
    params: {}
- name: TestCaseData
  endpoint:
    path: /NUnitFramework/framework/TestCaseData
    method: GET
    data_selector: records
- name: TestCaseData
  endpoint:
    path: /TestCaseData
    method: GET
    data_selector: records
    params: {}
- name: TestCaseData
  endpoint:
    path: /TestCaseData
    method: GET
    data_selector: records
- name: TestCaseData
  endpoint:
    path: /TestCaseData
    method: GET
    data_selector: TestCaseData
    params: {}
- name: TestCaseData
  endpoint:
    path: /TestCaseData
    method: GET
    data_selector: parameters
    params: {}
- name: Constructors
  endpoint:
    path: /Constructors
    method: GET
    data_selector: records
- name: Properties
  endpoint:
    path: /Properties
    method: GET
    data_selector: records
- name: Methods
  endpoint:
    path: /Methods
    method: GET
    data_selector: records
- name: Error
  endpoint:
    path: /Error
    method: GET
    data_selector: TextWriter
- name: Parameters
  endpoint:
    path: /Parameters
    method: GET
    data_selector: TestParameters
- name: Progress
  endpoint:
    path: /Progress
    method: GET
    data_selector: TextWriter
- name: AssertCount
  endpoint:
    path: /AssertCount
    method: GET
    data_selector: int
- name: CancellationToken
  endpoint:
    path: /CancellationToken
    method: GET
    data_selector: CancellationToken
- name: CurrentContext
  endpoint:
    path: /CurrentContext
    method: GET
    data_selector: TestContext
- name: CurrentRepeatCount
  endpoint:
    path: /CurrentRepeatCount
    method: GET
    data_selector: int
- name: Out
  endpoint:
    path: /Out
    method: GET
    data_selector: TextWriter
- name: Random
  endpoint:
    path: /Random
    method: GET
    data_selector: Randomizer
- name: Result
  endpoint:
    path: /Result
    method: GET
    data_selector: ResultAdapter
- name: Test
  endpoint:
    path: /Test
    method: GET
    data_selector: TestAdapter
- name: TestDirectory
  endpoint:
    path: /TestDirectory
    method: GET
    data_selector: string
- name: WorkDirectory
  endpoint:
    path: /WorkDirectory
    method: GET
    data_selector: string
- name: WorkerId
  endpoint:
    path: /WorkerId
    method: GET
    data_selector: string
- name: AddFormatter_ValueFormatterFactory
  endpoint:
    path: /AddFormatter(ValueFormatterFactory)
    method: public static void
    data_selector: ''
    params: {}
- name: AddFormatter_TSupported_ValueFormatter
  endpoint:
    path: /AddFormatter<TSupported>(ValueFormatter)
    method: public static void
    data_selector: ''
    params: {}
- name: AddTestAttachment
  endpoint:
    path: /AddTestAttachment(string, string?)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_bool
  endpoint:
    path: /Write(bool)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_char
  endpoint:
    path: /Write(char)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_charArray
  endpoint:
    path: /Write(char[]?)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_decimal
  endpoint:
    path: /Write(decimal)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_double
  endpoint:
    path: /Write(double)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_int
  endpoint:
    path: /Write(int)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_long
  endpoint:
    path: /Write(long)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_object
  endpoint:
    path: /Write(object?)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_float
  endpoint:
    path: /Write(float)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_string
  endpoint:
    path: /Write(string?)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_string_object
  endpoint:
    path: /Write(string, object?)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_string_object_object
  endpoint:
    path: /Write(string, object?, object?)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_string_object_object_object
  endpoint:
    path: /Write(string, object?, object?, object?)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_string_params_objectArray
  endpoint:
    path: /Write(string, params object?[])
    method: public static void
    data_selector: ''
    params: {}
- name: Write_uint
  endpoint:
    path: /Write(uint)
    method: public static void
    data_selector: ''
    params: {}
- name: Write_ulong
  endpoint:
    path: /Write(ulong)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine
  endpoint:
    path: /WriteLine()
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_bool
  endpoint:
    path: /WriteLine(bool)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_char
  endpoint:
    path: /WriteLine(char)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_charArray
  endpoint:
    path: /WriteLine(char[]?)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_decimal
  endpoint:
    path: /WriteLine(decimal)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_double
  endpoint:
    path: /WriteLine(double)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_int
  endpoint:
    path: /WriteLine(int)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_long
  endpoint:
    path: /WriteLine(long)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_object
  endpoint:
    path: /WriteLine(object?)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_float
  endpoint:
    path: /WriteLine(float)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_string
  endpoint:
    path: /WriteLine(string?)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_string_object
  endpoint:
    path: /WriteLine(string, object?)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_string_object_object
  endpoint:
    path: /WriteLine(string, object?, object?)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_string_object_object_object
  endpoint:
    path: /WriteLine(string, object?, object?, object?)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_string_params_objectArray
  endpoint:
    path: /WriteLine(string, params object?[])
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_uint
  endpoint:
    path: /WriteLine(uint)
    method: public static void
    data_selector: ''
    params: {}
- name: WriteLine_ulong
  endpoint:
    path: /WriteLine(ulong)
    method: public static void
    data_selector: ''
    params: {}
- name: PropertyBagAdapter
  endpoint:
    path: /TestContext/PropertyBagAdapter
    method: GET
    data_selector: properties
- name: Level
  endpoint:
    path: /Level
    method: GET
    data_selector: string
    params: {}
- name: Name
  endpoint:
    path: /Name
    method: GET
    data_selector: string
    params: {}
- name: PropertyValueHierarchyItem
  endpoint:
    path: /NUnitFramework/framework/TestContext/PropertyValueHierarchyItem
    method: GET
    data_selector: Values
    params: {}
- name: ResultAdapter
  endpoint:
    path: /tests/resultAdapter
    method: GET
    data_selector: Assertions
    params: {}
- name: Arguments
  endpoint:
    path: /Arguments
    method: GET
    data_selector: Arguments
- name: ClassName
  endpoint:
    path: /ClassName
    method: GET
    data_selector: ClassName
- name: DisplayName
  endpoint:
    path: /DisplayName
    method: GET
    data_selector: DisplayName
- name: ExpectedResult
  endpoint:
    path: /ExpectedResult
    method: GET
    data_selector: ExpectedResult
- name: FullName
  endpoint:
    path: /FullName
    method: GET
    data_selector: FullName
- name: ID
  endpoint:
    path: /ID
    method: GET
    data_selector: ID
- name: Method
  endpoint:
    path: /Method
    method: GET
    data_selector: Method
- name: MethodName
  endpoint:
    path: /MethodName
    method: GET
    data_selector: MethodName
- name: Name
  endpoint:
    path: /Name
    method: GET
    data_selector: Name
- name: Namespace
  endpoint:
    path: /Namespace
    method: GET
    data_selector: Namespace
- name: Parent
  endpoint:
    path: /Parent
    method: GET
    data_selector: Parent
- name: Properties
  endpoint:
    path: /Properties
    method: GET
    data_selector: Properties
- name: Type
  endpoint:
    path: /Type
    method: GET
    data_selector: Type
- name: TestDelegate
  endpoint:
    path: /NUnitFramework/framework/Assert.cs
    method: GET
    data_selector: methods
- name: TestFixture
  endpoint:
    path: /NUnitFramework/framework/Attributes/TestFixtureAttribute
    method: GET
    data_selector: properties
- name: TestFixtureData
  endpoint:
    path: /TestFixtureData
    method: GET
    data_selector: records
    params: {}
- name: MUST_BE_STATIC
  endpoint:
    path: MUST_BE_STATIC
    method: GET
    data_selector: string
- name: Category
  endpoint:
    path: Category
    method: GET
    data_selector: string
- name: SourceName
  endpoint:
    path: SourceName
    method: GET
    data_selector: string
- name: SourceType
  endpoint:
    path: SourceType
    method: GET
    data_selector: Type
- name: TestOfAttribute
  endpoint:
    path: /TestOfAttribute
    method: GET
    data_selector: records
- name: TestOfAttribute_string
  endpoint:
    path: /TestOfAttribute(string)
    method: GET
    data_selector: parameters
    params: {}
- name: TestOfAttribute_Type
  endpoint:
    path: /TestOfAttribute(Type)
    method: GET
    data_selector: parameters
    params: {}
- name: Count
  endpoint:
    path: /Count
    method: GET
    data_selector: Count
    params: {}
- name: Names
  endpoint:
    path: /Names
    method: GET
    data_selector: Names
    params: {}
- name: Throws
  endpoint:
    path: /api/NUnit.Framework.Throws.html
    method: GET
- name: ArgumentException
  endpoint:
    path: /ArgumentException
    method: GET
    data_selector: ExactTypeConstraint
- name: ArgumentNullException
  endpoint:
    path: /ArgumentNullException
    method: GET
    data_selector: ExactTypeConstraint
- name: Exception
  endpoint:
    path: /Exception
    method: GET
    data_selector: ResolvableConstraintExpression
- name: InnerException
  endpoint:
    path: /InnerException
    method: GET
    data_selector: ResolvableConstraintExpression
- name: InvalidOperationException
  endpoint:
    path: /InvalidOperationException
    method: GET
    data_selector: ExactTypeConstraint
- name: Nothing
  endpoint:
    path: /Nothing
    method: GET
    data_selector: ThrowsNothingConstraint
- name: TargetInvocationException
  endpoint:
    path: /TargetInvocationException
    method: GET
    data_selector: ExactTypeConstraint
- name: TimeoutAttribute
  endpoint:
    path: /Constructors/TimeoutAttribute(int)
    method: GET
- name: SourceName
  endpoint:
    path: /NUnit_Framework_ValueSourceAttribute_SourceName
    method: GET
    data_selector: properties
    params: {}
- name: SourceType
  endpoint:
    path: /NUnit_Framework_ValueSourceAttribute_SourceType
    method: GET
    data_selector: properties
    params: {}
- name: data
  endpoint:
    path: /data
    method: GET
    data_selector: data
    params: {}
- name: If
  endpoint:
    path: /If
    method: POST
    data_selector: condition
    params: {}
- name: Unless
  endpoint:
    path: /Unless
    method: POST
    data_selector: condition
    params: {}
- name: BuildAssembly
  endpoint:
    path: /Build(Assembly,IDictionary<string,object>)
    method: POST
    data_selector: ITest
    params: {}
- name: BuildAssemblyByNameOrPath
  endpoint:
    path: /Build(string,IDictionary<string,object>)
    method: POST
    data_selector: ITest
    params: {}
- name: Load
  endpoint:
    path: /Load
    method: POST
- name: Explore
  endpoint:
    path: /Explore
    method: GET
- name: Count
  endpoint:
    path: /Count
    method: GET
- name: Run
  endpoint:
    path: /Run
    method: POST
- name: CountTests
  endpoint:
    path: CountTests
    method: GET
    data_selector: int
    params: {}
- name: ExploreTests
  endpoint:
    path: ExploreTests
    method: GET
    data_selector: string
    params: {}
- name: LoadTests
  endpoint:
    path: LoadTests
    method: GET
    data_selector: string
    params: {}
- name: RunTests
  endpoint:
    path: RunTests
    method: POST
    data_selector: string
    params: {}
- name: StopRun
  endpoint:
    path: StopRun
    method: POST
    data_selector: void
    params: {}
- name: CountTestsAction
  endpoint:
    path: /CountTestsAction
    method: GET
    data_selector: results
    params: {}
- name: RunAsyncAction
  endpoint:
    path: /RunAsyncAction
    method: POST
    data_selector: results
    params: {}
- name: RunTestsAction
  endpoint:
    path: /src/NUnitFramework/framework/Api/FrameworkController.cs
    method: GET
    data_selector: parameters
    params: {}
- name: StopRunAction
  endpoint:
    path: /StopRunAction
    method: POST
    data_selector: results
    params: {}
- name: BuildAssembly
  endpoint:
    path: /Build/Assembly
    method: POST
    data_selector: ITest
    params: {}
- name: BuildString
  endpoint:
    path: /Build/String
    method: POST
    data_selector: ITest
    params: {}
- name: IsTestComplete
  endpoint:
    path: /IsTestComplete
    method: GET
    data_selector: bool
- name: IsTestLoaded
  endpoint:
    path: /IsTestLoaded
    method: GET
    data_selector: bool
- name: IsTestRunning
  endpoint:
    path: /IsTestRunning
    method: GET
    data_selector: bool
- name: LoadedTest
  endpoint:
    path: /LoadedTest
    method: GET
    data_selector: ITest
- name: Result
  endpoint:
    path: /Result
    method: GET
    data_selector: ITestResult
- name: CountTestCases
  endpoint:
    path: /CountTestCases
    method: POST
    data_selector: int
- name: ExploreTests
  endpoint:
    path: /ExploreTests
    method: POST
    data_selector: ITest
- name: LoadAssembly
  endpoint:
    path: /Load
    method: POST
    data_selector: ITest
- name: LoadString
  endpoint:
    path: /Load
    method: POST
    data_selector: ITest
- name: Run
  endpoint:
    path: /Run
    method: POST
    data_selector: ITestResult
- name: RunAsync
  endpoint:
    path: /RunAsync
    method: POST
    data_selector: void
- name: StopRun
  endpoint:
    path: /StopRun
    method: POST
    data_selector: void
- name: WaitForCompletion
  endpoint:
    path: /WaitForCompletion
    method: GET
    data_selector: bool
- name: CountTestCases
  endpoint:
    path: /CountTestCases
    method: GET
    data_selector: testCasesCount
- name: ExploreTests
  endpoint:
    path: /ExploreTests
    method: GET
    data_selector: exploredTests
- name: LoadAssembly
  endpoint:
    path: /LoadAssembly
    method: POST
    data_selector: loadedTests
- name: RunTests
  endpoint:
    path: /RunTests
    method: POST
    data_selector: testResults
- name: AndConstraint
  endpoint:
    path: /NUnitFramework/framework/Constraints/AndConstraint
    method: GET
    data_selector: description
    params: {}
- name: AndOperator
  endpoint:
    path: /AndOperator
    method: GET
    data_selector: records
    params: {}
- name: MatchesMethod
  endpoint:
    path: /Matches
    method: POST
    data_selector: result
    params: {}
- name: Matches
  endpoint:
    path: /Matches
    method: GET
    data_selector: actual
    params: {}
- name: AttributeExistsConstraint
  endpoint:
    path: /NUnitFramework/framework/Constraints/AttributeExistsConstraint
    method: GET
    data_selector: properties
    params: {}
- name: BinaryConstraint
  endpoint:
    path: /NUnitFramework/framework/Constraints/BinaryConstraint
    method: GET
    data_selector: fields
    params: {}
- name: BinaryOperator
  endpoint:
    path: /NUnitFramework/framework/Constraints/Operators/BinaryOperator
    method: GET
    data_selector: properties
    params: {}
- name: CollectionConstraint
  endpoint:
    path: /nunit/constraints/collection
    method: GET
    data_selector: records
- name: CollectionEquivalentConstraint
  endpoint:
    path: /NUnitFramework/framework/Constraints/CollectionEquivalentConstraint
    method: GET
    data_selector: records
- name: FrameworkPackageSettings
  endpoint:
    path: /FrameworkPackageSettings
    method: GET
- name: Common
  endpoint:
    path: /Common
    method: GET
- name: Compatibility
  endpoint:
    path: /Compatibility
    method: GET
- name: Framework
  endpoint:
    path: /Framework
    method: GET
- name: Api
  endpoint:
    path: /Api
    method: GET
- name: Constraints
  endpoint:
    path: /Constraints
    method: GET
- name: CollectionSubsetConstraint
  endpoint:
    path: /framework/Constraints/CollectionSubsetConstraint
    method: GET
    data_selector: properties
notes:
- Breaking change regarding assert messages in NUnit. The previous format with params
  args is no longer supported.
- This is the first beta release of the NUnit Console able to run .NET Core Tests.
- We're particularly interested in this beta release being tested by users of the
  .NET Core console and users running tests on Mono.
- NUnit agents now monitor the running engine process and will terminate themselves
  if the parent runner process is killed or dies.
- Tests may be grouped by Duration and Outcome under VS2012 RTM and also by Traits
  and Project using Update 1 or later, and Class using Update 2 or later.
- NUnit translates any Categories and Properties used on your tests to Visual Studio
  as Traits.
- Tests may be filtered in Visual Studio under Update 1 or later by Trait, Project,
  Error Message, File Path, Fully Qualified Name, Output and Outcome.
- Tests may be organized by play lists in Visual Studio under Update 2 or later.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- 'Using both the VSIX adapter and nuget adapters at the same time can lead to discovery
  issues; see nunit3-vs-adapter/issues #769. The resolution is to uninstall the VSIX
  adapter, and only use the nuget adapters. The VSIX adapters are being deprecated
  in later VS versions.'
- 'Support for Explicit keyword: Adapter versions in the 4.XX series support the `explicit`
  keyword in all Visual Studio versions. Adapter versions in the 3.XX series: From
  version 16.2 (Visual Studio 2019) the `Explicit` keyword is no longer explicitly
  supported by Visual Studio. If you want to use it, it does exist as a Category,
  so you can use it as a category filter.'
- There is no test status in Visual Studio corresponding to NUnit's Inconclusive result,
  so tests with this result are reported as Not Run. Click on the individual test
  to see the result.
- Theories are reported as individual cases, rather as a single unit.
- In NUnit, tests have names, which are not necessarily unique. Visual Studio wants
  the names to be unique. So if two tests have the same name, VS displays a warning
  message in the output window. The message may be ignored. Two separate results will
  be shown under the single test in the explorer pane.
- Startup performance is substantially improved but is still slower than using NUnit
  directly.
- 'Applies to pre-VS2017: When using a VSIX adapter and the NuGet adapter, the VSIX
  adapter will be used regardless of the NuGet adapter version. Workaround: Make sure
  you have upgraded VSIX adapter to latest version, or uninstalled it if you have
  the NuGet adapter in a solution. The adapter will display its version number in
  the Output window under Tests. Avoid using the VSIX adapter for VS2017 and upwards.
  It is being deprecated, but is still supported optionally in VS2019.'
- Visual Studio 2017 Live Unit Testing require NUnit3. The NUnit2 adapter doesn't
  support Live Unit Testing.
- '`Exception: Could not load file or assembly ''nunit.engine''` - Is caused by an
  incomplete copy of the adapter in the Visual Studio cache. Close Visual Studio and
  delete C:\Users\username\AppData\Local\Temp\VisualStudioTestExplorerExtensions\NUnit3TestAdapter.{{version}}'
- Certain NUnit Test Adapter settings are configurable using a .runsettings file.
- NUnit 2.X does not support runsettings.
- By default NUnit no longer uses shadowcopy. If this causes an issue for you shadowcopy
  can be enabled by setting the DWORD value UseShadowCopy to 1.
- By default the NUnit adapter will 'Kill' the Visual Studio Test Execution engine
  after each run. In some cases it can be useful to have the engine running, e.g.
  during debugging of the adapter itself. You can then set the adapter to follow the
  VS setting by setting the DWORD value UseVsKeepEngineRunning to 1.
- Normally the adapter reports exceptions using a short format, consisting of the
  message only. You can change it to report a verbose format that includes the stack
  trace, by setting a the DWORD value Verbosity to 1.
- Microsoft.NET.Test.Sdk 17.4.0 is not compatible with .NET Framework lower than 4.6.2
- You should never add an extra reference to the NUnit.Engine when using the adapter
  in a project.
- Version 4.4.1 use an engine version that is not released yet.
- Enable tracing by setting DumpXmlTestDiscovery and DumpXmlTestResults to true in
  runsettings.
- Debugging is enabled by creating a debug version of the adapter and passing NUnit
  debug settings.
- The lowest .net version is .net 8.0, so netcore 3.1 is no longer supported.
- 'This is a bug fix release, with the following fixes: Known Vulnerability in System.Xml.XPath.XmlDocument,
  Explicit runs when using NUnit-filters ''cat!=FOO'', AddTestAttachment does not
  work anymore in VS2022, New DiscoveryMode doesn''t play nicely with TestFixtureSource
  - Missing GenericFixture, VSTest test case filter does not work with parentheses,
  Lots of warnings logged when filter matches no tests ''cat=BAZ'', including other
  issues in the same.'
- This release has a series of enhancements and bugfixes.
- The ability to set custom paths for the test code can be useful with data driven
  tests.
- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
  PURPOSE AND NONINFRINGEMENT.
- The engine is designed to be accessed through the methods exposed in the nunit.engine.api
  assembly.
- The actual engine itself is contained within the nunit.engine assembly and its dependencies.
- This guide explains how to set up NUnit for Xamarin projects.
- Ensure you reference the same version of NUnit as the version of nunit.xamarin you
  are using.
- This will load all tests within the current project.
- This document provides an overview of implemented NUnit diagnostics and code fixes.
- The individual arguments provided by a TestCaseAttribute must match the type of
  the corresponding parameter of the method.
- To prevent tests that will fail at runtime due to improper construction.
- The individual arguments provided by a TestCaseAttribute must match the type of
  the corresponding parameter of the method
- The TestCaseSource should use nameof operator to specify target.
- Prevent test rot by ensuring that future renames don't accidentally break tests
  in an unexpected way.
- The TestCaseSource should use nameof operator to specify target
- The number of arguments provided by a TestCaseAttribute must match the number of
  parameters of the method.
- The TestCaseAttribute provided too few arguments
- 'Disable all instances via #pragma directive'
- Use [SuppressMessage] attribute to suppress specific violations
- The type of the value specified via ExpectedResult must match the return type of
  the method.
- The type of the value specified via ExpectedResult must match the return type of
  the method
- ExpectedResult must not be specified when the method returns void.
- ExpectedResult must not be specified when the method returns void. This will lead
  to an error at run-time.
- The method has non-void return type, but no result is expected in ExpectedResult.
- The method has non-void return type, but no result is expected in ExpectedResult
- Specifying ParallelScope.Self on assembly level has no effect.
- Bring developers' attention to a scenario in which they may believe they are parallelizing
  something when in fact they are not.
- Specifying ParallelScope.Self on assembly level has no effect
- One may not specify ParallelScope.Children on a non-parameterized test method
- To prevent tests that will fail at runtime due to improper construction
- One may not specify ParallelScope.Children on a non-parameterized test method.
- NUnit uses various attributes for setup and teardown.
- Support for parallel test execution is available.
- One may not specify ParallelScope.Fixtures on a test method
- One may not specify ParallelScope.Fixtures on a test method.
- The TestCaseSource argument does not specify an existing member. This will lead
  to an error at run-time.
- The TestCaseSource argument does not specify an existing member
- The async test method must have a non-void return type.
- The async test method must have a non-void return type
- The async test method must have a non-generic Task return type when no result is
  expected.
- The async test method must have a non-generic Task return type when no result is
  expected
- The async test method must have a Task<T> return type when a result is expected.
- The async test method must have a Task<T> return type when a result is expected
- The source type must implement I(Async)Enumerable in order to provide test cases.
- The source type does not implement I(Async)Enumerable
- The source type does not have a default constructor
- The specified source must be static.
- The number of parameters provided by the TestCaseSource must match the number of
  parameters in the target method.
- Or put this at the top of the file to disable all instances.
- The source specified by the TestCaseSource must return an I(Async)Enumerable or
  a type that implements I(Async)Enumerable.
- 'Uses #pragma directive to disable warning NUnit1019'
- Can also use attribute [SuppressMessage] to suppress the message
- The TestCaseSource must not provide any parameters when the source is a field or
  a property.
- The ValueSource should use nameof operator to specify target.
- The target method expects parameters which cannot be supplied by the ValueSource
- The source specified by the ValueSource must return an I(Async)Enumerable or a type
  that implements I(Async)Enumerable.
- Some objects may return nulls in deeply nested fields
- The source specified by the ValueSource does not return an I(Async)Enumerable or
  a type that implements I(Async)Enumerable
- The ValueSource argument does not specify an existing member.
- The ValueSource argument does not specify an existing member. This will lead to
  an error at run-time.
- To prevent tests that will fail at runtime, as NUnit only runs public test methods.
- The test or setup/teardown method is not public
- The test method has parameters, but no arguments are supplied by attributes.
- The test method has parameters, but no arguments are supplied by attributes
- A fixture should not contain any public non-test methods.
- 'There are two exceptions: A public constructor and an IDispose.Dispose method implementation.'
- A fixture should be self-contained and not have methods callable by other classes.
- 'There are two exceptions: A public constructor and an `IDisposable.Dispose` method
  implementation.'
- The number of parameters provided by the TestCaseSource must match the number of
  parameters in the Test method.
- Note that the current implementation only works for single parameters.
- The number of parameters provided by the TestCaseSource does not match the number
  of parameters in the Test method
- The type of parameters provided by the TestCaseSource must match the type of parameters
  in the Test method.
- The current implementation only works for single parameters.
- The type of parameter provided by the TestCaseSource does not match the type of
  the parameter in the Test method
- The individual arguments provided by a ValuesAttribute must match the type of the
  corresponding parameter of the method
- An IDisposable field/property should be Disposed in a TearDown method.
- Not Disposing fields/properties can cause memory leaks or failing tests.
- An IDisposable field/property should be Disposed in a TearDown method
- Direct Write calls should be replaced with Out.Write.
- Future version of NUnit will first mark the .Write methods on TestContext as Obsolete
  and eventually remove them.
- Direct `Write` calls should be replaced with `Out.Write`.
- The Write methods on TestContext will be marked as Obsolete and eventually removed
- Base TestFixtures should be abstract to prevent base class tests executing separately.
- No specific authentication setup required.
- When a base class is not `abstract` it will also be run as a standalone test which
  is most times not the intention.
- The 'step' parameter to Range cannot be zero.
- The 'step' parameter to Range cannot be zero
- Ensure that 'to' is greater than 'from' when 'step' is positive.
- The value for 'from' must be less than 'to' when 'step' is positive
- Ensure that 'from' is greater than 'to' when 'step' is negative.
- The value for 'from' must be greater than 'to' when 'step' is negative
- Ensure that the attribute and parameter types match.
- The classic Assert model contains less flexibility than the constraint model
- Consider using Assert.That(expr, Is.False) instead of ClassicAssert.False(expr)
- Consider using Assert.That(expr, Is.False) instead of ClassicAssert.IsFalse(expr)
- Consider using Assert.That(expr, Is.True) instead of ClassicAssert.IsTrue(expr)
- Consider using Assert.That(expr, Is.True) instead of ClassicAssert.True(expr)
- Consider using Assert.That(actual, Is.EqualTo(expected)) instead of ClassicAssert.AreEqual(expected,
  actual)
- Consider using the constraint model, `Assert.That(actual, Is.EqualTo(expected))`,
  instead of the classic model, `ClassicAssert.AreEqual(expected, actual)`.
- Consider using Assert.That(actual, Is.Not.EqualTo(expected)) instead of ClassicAssert.AreNotEqual(expected,
  actual)
- The actual value should not be a constant.
- Bring developers' attention to a scenario in which their test is most likely testing
  the wrong thing, or to cases where their actual and expected values may be accidentally
  swapped.
- The actual value should not be a constant. This indicates that the actual value
  and the expected value have switched places.
- The actual value should not be a constant
- The IgnoreCase modifier should only be used for string or char arguments. Using
  it on another type will not have any effect.
- The IgnoreCase modifier should only be used for string or char arguments.
- Incorrect IgnoreCase usage
- The same value has been provided as both the actual and the expected argument. This
  indicates a coding error.
- Using EqualConstraint will lead to better assertion messages in case of failure.
- Use EqualConstraint for better assertion messages in case of failure
- Using constraints instead of boolean methods will lead to better assertion messages
  in case of failure.
- Use ContainsConstraint for better assertion messages in case of failure
- Use StartsWithConstraint for better assertion messages in case of failure
- Use EndsWithConstraint for better assertion messages in case of failure
- Using SomeItemsConstraint will lead to better assertion messages in case of failure.
- Use SomeItemsConstraint for better assertion messages in case of failure
- Consider using Assert.That(actual, Is.SameAs(expected)) instead of ClassicAssert.AreSame(expected,
  actual)
- Consider using the constraint model, `Assert.That(actual, Is.SameAs(expected))`,
  instead of the classic model, `ClassicAssert.AreSame(expected, actual)`.
- The assert `ClassicAssert.AreSame` from the classic Assert model makes it easy to
  confuse the `expected` and the `actual` argument, so this analyzer marks usages
  of `ClassicAssert.AreSame`.
- Consider using Assert.That(expr, Is.Null) instead of ClassicAssert.Null(expr)
- The classic Assert model contains less flexibility than the constraint model, so
  this analyzer marks usages of ClassicAssert.Null from the classic Assert model.
- NUnit requires .NET Framework 4.5 or higher
- Consider using the constraint model, `Assert.That(expr, Is.Null)`, instead of the
  classic model, `ClassicAssert.Null(expr)`.
- Consider using the constraint model, `Assert.That(expr, Is.Null)` instead of the
  classic model, `ClassicAssert.IsNull(expr)`.
- The classic Assert model contains less flexibility than the constraint model, so
  this analyzer marks usages of `ClassicAssert.IsNull` from the classic Assert model.
- Consider using Assert.That(expr, Is.Null) instead of ClassicAssert.IsNull(expr)
- Consider using the constraint model, `Assert.That(expr, Is.Not.Null)`, instead of
  the classic model, `ClassicAssert.NotNull(expr)`.
- The classic Assert model contains less flexibility than the constraint model, so
  this analyzer marks usages of `ClassicAssert.NotNull` from the classic Assert model.
- Consider using Assert.That(expr, Is.Not.Null) instead of ClassicAssert.NotNull(expr)
- Consider using Assert.That(expr, Is.Not.Null) instead of ClassicAssert.IsNotNull(expr)
- The classic Assert model contains less flexibility than the constraint model, so
  this analyzer marks usages of ClassicAssert.IsNotNull from the classic Assert model.
- Consider using the constraint model, `Assert.That(expr, Is.Not.Null)` instead of
  the classic model, `ClassicAssert.IsNotNull(expr)`.
- The classic Assert model contains less flexibility than the constraint model, so
  this analyzer marks usages of `ClassicAssert.IsNotNull` from the classic Assert
  model.
- The SameAs constraint always fails because the actual and expected values have mutually
  exclusive types.
- The EqualTo constraint always fails as the actual and the expected value cannot
  be equal.
- The actual argument should have the required property for the constraint.
- Using property constraints makes sense only when provided actual argument has those
  properties defined.
- Missing property required for constraint
- NullConstraint is allowed only for reference types or nullable value types.
- Non-nullable value types cannot have `null` value, therefore `Is.Null` assertions
  will always fail (or will always pass for `Is.Not.Null`).
- The type of the actual argument is not a string and hence cannot be used with a
  String Constraint.
- Assertions with string constraints and non-string actual value will fail with error.
- Code violating the rule here
- The ContainsConstraint requires the type of the actual value to be either a string
  or a collection of strings.
- Using a ContainsConstraint with an actual argument, which is neither a string nor
  a collection of strings, leads to an assertion error.
- The SomeItemsConstraint with EqualConstraint requires the actual argument to be
  a collection where the element type can match the type of the expected argument.
- Using Does.Contain or Contains.Item constraints with actual argument, which is either
  not a collection, or has wrong element type, leads to assertion error.
- Consider using Assert.That(actual, Is.GreaterThan(expected)) instead of ClassicAssert.Greater(actual,
  expected)
- The assert ClassicAssert.GreaterOrEqual from the classic Assert model makes it easy
  to confuse the expected and the actual argument.
- Consider using the constraint model, `Assert.That(actual, Is.GreaterThanOrEqualTo(expected))`,
  instead of the classic model, `ClassicAssert.GreaterOrEqual(actual, expected)`.
- The assert `ClassicAssert.GreaterOrEqual` from the classic Assert model makes it
  easy to confuse the `expected` and the `actual` argument.
- Consider using Assert.That(actual, Is.GreaterThanOrEqualTo(expected)) instead of
  ClassicAssert.GreaterOrEqual(actual, expected)
- Consider using the constraint model, `Assert.That(actual, Is.LessThan(expected))`,
  instead of the classic model, `ClassicAssert.Less(actual, expected)`.
- The assert `ClassicAssert.Less` from the classic Assert model makes it easy to confuse
  the `expected` and the `actual` argument.
- Consider using Assert.That(actual, Is.LessThan(expected)) instead of ClassicAssert.Less(actual,
  expected)
- The assert ClassicAssert.LessOrEqual from the classic Assert model makes it easy
  to confuse the expected and the actual argument.
- Consider using the constraint model, `Assert.That(actual, Is.LessThanOrEqualTo(expected))`,
  instead of the classic model, `ClassicAssert.LessOrEqual(actual, expected)`.
- The assert `ClassicAssert.LessOrEqual` from the classic Assert model makes it easy
  to confuse the `expected` and the `actual` argument.
- Consider using Assert.That(actual, Is.LessThanOrEqualTo(expected)) instead of ClassicAssert.LessOrEqual(actual,
  expected)
- Consider using the constraint model, `Assert.That(actual, Is.Not.SameAs(expected))`,
  instead of the classic model, `ClassicAssert.AreNotSame(expected, actual)`.
- Consider using Assert.That(actual, Is.Not.SameAs(expected)) instead of ClassicAssert.AreNotSame(expected,
  actual)
- Consider using the constraint model, Assert.That(expr, Is.Zero), instead of the
  classic model, ClassicAssert.Zero(expr).
- The classic Assert model contains less flexibility than the constraint model.
- Consider using Assert.That(expr, Is.Zero) instead of ClassicAssert.Zero(expr)
- Consider using Assert.That(expr, Is.Not.Zero) instead of ClassicAssert.NotZero(expr)
- Consider using the constraint model, `Assert.That(expr, Is.Not.Zero)`, instead of
  the classic model, `ClassicAssert.NotZero(expr)`.
- The classic Assert model contains less flexibility than the constraint model, so
  this analyzer marks usages of `ClassicAssert.NotZero` from the classic Assert model.
- Consider using Assert.That(expr, Is.NaN) instead of ClassicAssert.IsNaN(expr)
- Consider using Assert.That(collection, Is.Empty) instead of ClassicAssert.IsEmpty(collection)
- Consider using the constraint model, Assert.That(collection, Is.Empty) instead of
  the classic model, ClassicAssert.IsEmpty(collection).
- Consider using Assert.That(collection, Is.Not.Empty) instead of ClassicAssert.IsNotEmpty(collection)
- Consider using the constraint model, `Assert.That(collection, Is.Not.Empty)`, instead
  of the classic model, `ClassicAssert.IsNotEmpty(collection)`.
- The assert ClassicAssert.Contains from the classic Assert model makes it easy to
  confuse the instance and the collection argument.
- Consider using the constraint model, Assert.That(collection, Does.Contain(instance)),
  instead of the classic model, ClassicAssert.Contains(instance, collection).
- The assert ClassicAssert.Contains from the classic Assert model makes it easy to
  confuse the instance and the collection argument, so this analyzer marks usages
  of ClassicAssert.Contains.
- Consider using Assert.That(collection, Does.Contain(instance)) instead of ClassicAssert.Contains(instance,
  collection)
- Consider using the constraint model, `Assert.That(actual, Is.InstanceOf(expected))`,
  instead of the classic model, `ClassicAssert.IsInstanceOf(expected, actual)`.
- The assert `ClassicAssert.IsInstanceOf` from the classic Assert model makes it easy
  to confuse the `expected` and the `actual` argument, so this analyzer marks usages
  of `ClassicAssert.IsInstanceOf`.
- Consider using the constraint model, `Assert.That(actual, Is.Not.InstanceOf(expected))`,
  instead of the classic model, `ClassicAssert.IsNotInstanceOf(expected, actual)`.
- Consider using Assert.That(actual, Is.Not.InstanceOf(expected)) instead of ClassicAssert.IsNotInstanceOf(expected,
  actual)
- NUnit does not require authentication.
- The SameAs constraint always fails on value types as the actual and the expected
  value cannot be the same reference.
- Non-reference types for SameAs constraint
- The comparison constraint always fails as the actual and the expected value are
  not comparable.
- The comparison constraint might fail as the actual and the expected value might
  not implement IComparable.
- Using ComparisonConstraint will lead to better assertion messages in case of failure.
- Use ComparisonConstraint for better assertion messages in case of failure
- The actual argument needs to be evaluated by the Assert to catch any exceptions.
- In order for the Assert.That to catch an exception or a timeout, the code must be
  a delegate so it can be evaluated by the method. If the parameter is not a delegate,
  it will be evaluated before the call to Assert.That and stop further execution.
- Hosting Asserts inside an Assert.EnterMultipleScope or Assert.Multiple allows detecting
  more than one failure.
- Use Has.Length/Has.Count/Is.Empty instead of testing property directly.
- Use CollectionConstraint for better assertion messages in case of failure
- The `Within` modifier should only be used for numeric or Date/Time arguments or
  tuples containing only these element types. Using it on other types will not have
  any effect.
- The `Within` modifier should only be used for numeric or Date/Time arguments or
  tuples containing only these element types.
- Consider using Assert.That(...) instead of StringAssert(...)
- Consider using Assert.That(...) instead of CollectionAssert(...)
- NUnit 4 no longer supports string.Format specification
- Replace format specification with interpolated string.
- In order to get better failure messages, NUnit4 uses CallerArgumentExpression to
  include the expression passed in for the actual and constraint parameters.
- Consider using Assert.That(expr, Is.Positive) instead of ClassicAssert.Positive(expr)
- Consider using the constraint model, Assert.That(expr, Is.Positive) instead of the
  classic model, ClassicAssert.Positive(expr).
- The classic Assert model contains less flexibility than the constraint model, so
  this analyzer marks usages of ClassicAssert.Positive from the classic Assert model.
- Consider using the constraint model, Assert.That(expr, Is.Negative), instead of
  the classic model, ClassicAssert.Negative(expr).
- Consider using Assert.That(expr, Is.Negative) instead of ClassicAssert.Negative(expr)
- Consider using the constraint model, `Assert.That(actual, Is.AssignableFrom(expected))`,
  instead of the classic model, `ClassicAssert.IsAssignableFrom(expected, actual)`.
- The assert `ClassicAssert.IsAssignableFrom` from the classic Assert model makes
  it easy to confuse the `expected` and the `actual` argument, so this analyzer marks
  usages of `ClassicAssert.IsAssignableFrom`.
- Consider using the constraint model, Assert.That(actual, Is.AssignableFrom(expected))
  instead of the classic model, ClassicAssert.IsAssignableFrom(expected, actual).
- The assert ClassicAssert.IsAssignableFrom from the classic Assert model makes it
  easy to confuse the expected and the actual argument.
- Consider using Assert.That(actual, Is.AssignableFrom(expected)) instead of ClassicAssert.IsAssignableFrom(expected,
  actual)
- Consider using Assert.That(actual, Is.Not.AssignableFrom(expected)) instead of ClassicAssert.IsNotAssignableFrom(expected,
  actual)
- The assert ClassicAssert.IsNotAssignableFrom from the classic Assert model makes
  it easy to confuse the expected and the actual argument
- Consider using the constraint model, `Assert.That(actual, Is.Not.AssignableFrom(expected))`,
  instead of the classic model, `ClassicAssert.IsNotAssignableFrom(expected, actual)`.
- The assert `ClassicAssert.IsNotAssignableFrom` from the classic Assert model makes
  it easy to confuse the `expected` and the `actual` argument.
- Consider using Is.InstanceOf<T> constraint instead of 'is T' expression for better
  assertion messages.
- Consider using Is.InstanceOf<T> constraint instead of an 'is T' expression
- Consider using Assert.EnterMultipleScope statement instead of Assert.Multiple/Assert.MultipleAsync
- The rule has no severity, but can be disabled.
- The rule suppresses the error for non-nullable fields/properties initialized in
  SetUp or OneTimeSetUp methods.
- Field/Property is Disposed in TearDown or OneTimeTearDown method
- Many NUnit tests initialize fields in tests or a SetUp method and then Dispose them
  in the TearDown method.
- Consider removing unnecessary parameters from the ValuesAttribute.
- Simplify the Values attribute
- Replace 'EqualTo' with a keyword in the corresponding specific constraint.
- The analyzer comes with a code fix that will replace the constraint `Is.EqualTo(x)`
  with the matching `Is.X` constraint.
- The NUnit project is made up of several teams with their own focus and responsibilities.
- All team members are volunteers.
- Polished and informative XML documentation provides a noticeably positive experience.
- NUnit is licensed under the MIT license.
- All but the TeamCityEventListener are built and shipped by the NUnit team.
- These extensions must be built and released before building and releasing the Console/Engine,
  but only if they are changed and a release is planned.
- For the 3.5 release, all extensions will be built and released with the console.
- Future releases of each extension will be on an as-needed basis and the version
  numbers of the extensions and the console/engine will diverge over time.
- This documentation was copied from the original packaging info and needs to be updated
  for packaging just the Console and Engine.
- The Engine API AssemblyVersion is fixed and will not be changed unless it becomes
  necessary to modify the API in a non-additive manner.
- All work on releases should be done on a branch.
- Ensure that the release build is up to date.
- The release should not be built on a developers machine, it should be built by the
  build servers.
- The release branch in this project is not like the release branches in other projects,
  we don't save it.
- Publishing the release requires access to various online accounts, which are mentioned
  above.
- Visual Studio 2022 is required in order to build and develop the adapter.
- '.Net SDKs: You need at least the .Net Core 3.1, .net 5, 6 and 7 SDKs installed.'
- Preventing throwing PlatformNotSupportedException
- Marks a test as needing to be run in a particular threading apartment state.
- You must pass in a valid apartment state.
- Verifies that a delegate throws a particular exception when called.
- The ReferenceEquals method throws an InvalidOperationException. This is done to
  make sure there is no mistake by calling this function.
- No known quirks or limitations.
- The user has to monitor this cancellation token.
- Allows multiple categories for tests
- The attribute is optional.
- Marks an assembly, test fixture or test method as being ignored. Ignored tests result
  in a warning message when the tests are run.
- This class is a replacement for the PlatformAttribute class, the platform names
  are based on the values in the TargetFramework.
- Defines the order that the test will run in
- Valid on classes and parameterized methods
- Valid on assemblies and classes but not on non-parameterized methods
- Valid on assemblies and classes but not on methods
- Valid on classes and methods but has no effect on assemblies
- Attaches information to a test assembly, fixture or method as a name/value pair.
- Specifies that a test should be run multiple times.
- Marks a test that must run on a separate thread.
- Provides error message for exception handling
- Identifies a method to be called immediately before each test is run.
- Identifies a method to be called immediately after each test is run.
- The method is guaranteed to be called, even if an exception is thrown.
- Marks a test assembly as needing a special assembly resolution hook that will explicitly
  search the test assembly's directory for dependent assemblies.
- Marks the method as callable from the NUnit test runner.
- Marks a method as a parameterized test suite and provides arguments for each test
  case.
- Construct a TestCaseAttribute with a list of arguments
- Default constructor available
- Construct with a object[] representing a set of arguments.
- Indicates the method or class the assembly, test fixture or test method is testing.
- The theory attribute allows a test to be executed with a variety of data sets.
- .NET No longer supports aborting threads as it is not a safe thing to do. Update
  your tests to use CancelAfterAttribute instead
- Filter used to control which tests are included (NYI)
- Construct a RunTestsAction and run all tests in the loaded TestSuite.
- A forced stop will cause threads and processes to be killed as needed.
- Implements IConstraint and IResolveConstraint
errors:
- 'CS0121: Null values no longer being allowed for messages'
- Versions of ReSharper earlier than the 8.2 version has an issue with the NuGet adapter,
  which will prevent NUnit tests from running. Make sure you have updated Reshaper
  to at least version 8.2.
- ReSharper version 2018.1 are not able to work with adapter versions >= 3.12. This
  is fixed in 2018.3.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 13 Adapter will not load as a NuGet package
- 17 Can't read app.config settings within test methods
- 18 Separate NUnit3TestDemo from NUnitTestAdapter solution
- Improper construction can lead to runtime failures.
- 'none: No severity specified'
- 'NUnit1019: The source specified by the TestCaseSource does not return an I(Async)Enumerable
  or a type that implements I(Async)Enumerable'
- 'NUnit1022: The specified source is not static'
- 'ValueSourceUsageAnalyzer: The source specified by the ValueSource does not return
  an I(Async)Enumerable or a type that implements I(Async)Enumerable.'
- 'Error: The ValueSource argument does not specify an existing member.'
- 'NUnit1025: The ValueSource argument does not specify an existing member'
- Match the number of parameters between the test data and the test method.
- Match the type of parameters between the test data and the test method.
- Specify a non-zero value for the 'step' parameter in the Range attribute.
- Specify a non-zero value for the 'step' parameter in the 'Range' attribute.
- 'NUnit1035: The ''step'' parameter to Range cannot be zero'
- Ensure that 'to' is greater than 'from' when 'step' is positive.
- NUnit will throw an exception at runtime if 'from' is greater than 'to' when 'step'
  is positive.
- The value for 'from' must be greater than 'to' when 'step' is negative
- 'NUnit1037: The value for ''from'' must be greater than ''to'' when ''step'' is
  negative'
- Both asserts above will trigger this warning. That's because the actual value should
  be the value produced by your code, not a constant value that you're expecting.
- dotnet_diagnostic.NUnit2015.severity = chosenSeverity
- 'TEST_NOT_FOUND: Ensure the test case ID is correct'
- 'INVALID_CONSTRAINT: Check the constraint syntax'
- Fix your property name, or use another constraint.
- Configure the severity per project, for more info see MSDN.
- Fix actual value or use appropriate constraint.
- Consider using Assert.That(actual, Is.GreaterThanOrEqualTo(expected)) instead of
  ClassicAssert.GreaterOrEqual(actual, expected)
- 'NUnit2040: Non-reference types for SameAs constraint'
- Code fix needed when moving from NUnit3 to NUnit4
- Expected value ({0}) to be multiple of 3
- 'Expected ''{0}'', but got: ''{1}'''
- The rule has no severity, but can be disabled.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - IDisposable
  - IAsyncDisposable
  - IApplyToTest
  - IApplyToContext
  - ITypeInfo
  - IFixtureBuilder
  - IConstraint
  - IResolveConstraint
  - PrefixConstraint
  - Constraint
client:
  base_url: https://docs.nunit.org/api/NUnit.html
source_metadata: null
