resources:
- name: exampleOffset
  endpoint:
    path: /web/SimplePriceOffset
    method: GET
    data_selector: records
- name: offset
  endpoint:
    path: /exampleOffset
    method: GET
    data_selector: calculator
    params: {}
- name: exampleEma
  endpoint:
    path: /web/ExponentialMovingAverage
    method: GET
    data_selector: records
    params: {}
- name: exampleEma
  endpoint:
    path: /docs/web/HumanFriendlierEMA
    method: GET
    data_selector: records
    params: {}
- name: doubleEma
  endpoint:
    path: /web/DoubleEMA
    method: GET
    data_selector: records
    params: {}
- name: doubleEma
  endpoint:
    path: /web/Plotters
    method: GET
    data_selector: plots
    params: {}
- name: exampleATR
  endpoint:
    path: /api/exampleATR
    method: GET
    data_selector: records
    params:
      period: 14
      threshold: 10
- name: fourierMA
  endpoint:
    path: /docs/web/FourierMovingAverage
    method: GET
    data_selector: records
- name: fourierMA
  endpoint:
    path: /fourierMA
    method: GET
    data_selector: records
    params:
      period: 64
      filterFreqStart: 16
- name: spectrogram
  endpoint:
    path: /spectrogram
    method: GET
    data_selector: records
    params:
      period: 64
- name: substantialGain
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: graphics
    params: {}
- name: Alligator
  endpoint:
    path: /docs/web/Alligator
    method: GET
    data_selector: data
    params: {}
- name: ThreePointTool
  endpoint:
    path: /docs/web/DrawingTools
    method: GET
    data_selector: items
    params: {}
- name: Trender
  endpoint:
    path: /api/trender
    method: POST
    data_selector: response
    params: {}
- name: Trender
  endpoint:
    path: /tools/trender
    method: POST
    data_selector: result
    params: {}
- name: Indicators
  endpoint:
    path: /products/indicators
    method: GET
- name: Strategies
  endpoint:
    path: /products/strategies
    method: GET
- name: Chart Components
  endpoint:
    path: /products/chart-experiences
    method: GET
- name: Add-On Development
  endpoint:
    path: /products/user-experiences
    method: GET
- name: APIs
  endpoint:
    path: /products/api
    method: GET
- name: Charting
  endpoint:
    path: /docs/desktop/defaultchartstyle
    method: GET
notes:
- Custom indicators allow you to personalize your trading experience.
- Familiarity with JavaScript is recommended.
- The application expects the definition implements Indicator interface.
- 'The application calls the map function with four arguments: the current item, index
  of the item in the input series, input series, and a series with previously calculated
  values.'
- Expected parameter named 'offset' of type 'number' with default value '2.0' and
  restrictions on value.
- The application calls the optional function before the calculation loop.
- By default, it will have a red color.
- Uses two moving averages with different periods.
- Each EMA has its own parameter and output value.
- Custom plotters can be implemented.
- Highlight places where ATR is larger than threshold
- Uses Fast Fourier Transform for calculations.
- Uses Fourier Analysis for calculations
- The vertical axis shows frequency as a divider of the period of the indicator.
- Uses magicNumber parameter to track substantial gains
- GraphicsObject can contain various shapes and text elements
- The Alligator is a classic indicator based on the idea that markets spend most of
  their time in a horizontal motion and about 15-30% of the time trending.
- 'When defining or calculating measurements in chart space, consider the unit type:
  *px* for pixels and *du* for domain units.'
- 'Functions provided include: px, du, op, min, max for working with Scale Bound values.'
- Defines a custom drawing tool that allows for user-defined parameters.
- Minimum number of anchors is 2 and maximum number of anchors is 2.
- Custom drawing tools allow for advanced math and graphics placement.
- Includes tooltips for price points and tick deltas.
- This website is designed solely for platform-related and educational purposes, providing
  non-regulated services.
- One of the advantages of using a Draw.Method is the returned Draw Objects contains
  metadata which could be used later (such as for obtain the bar index or price value
  of the dot later on). If you would use this metadata later on, using a Draw method
  would be in your best interests. However, if you are solely looking to render figures
  on a chart, favoring your custom SharpDX methods can drastically improve performance.
- NinjaTrader has no specific way to update your locally stored order references.
- Checking that an object has been configured ensures that values not destroyed prematurely.
- OnStateChange() runs asynchronously to other NinjaScript events.
errors: []
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.ninjatrader.com
  auth:
    type: oauth2
source_metadata: null
