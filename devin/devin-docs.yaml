resources:
- name: sessions
  endpoint:
    path: /api-reference/sessions/list-sessions
    method: GET
- name: secrets
  endpoint:
    path: /api-reference/sessions/list-secrets
    method: GET
- name: knowledge
  endpoint:
    path: /api-reference/knowledge/list-knowledge
    method: GET
- name: playbooks
  endpoint:
    path: /api-reference/playbooks/list-playbooks
    method: GET
- name: Consumption Cycles
  endpoint:
    path: /consumption/consumption-cycles
    method: GET
- name: Daily Consumption
  endpoint:
    path: /consumption/daily-consumption
    method: GET
- name: User Daily Consumption
  endpoint:
    path: /consumption/user-daily-consumption
    method: GET
- name: PR Metrics
  endpoint:
    path: /metrics/pr-metrics
    method: GET
- name: Usage Metrics
  endpoint:
    path: /metrics/usage-metrics
    method: GET
- name: List Enterprise Members
  endpoint:
    path: /members/list-enterprise-members
    method: GET
- name: Get Member Details
  endpoint:
    path: /members/get-member-details
    method: GET
- name: List Enterprise Groups
  endpoint:
    path: /groups/list-enterprise-groups
    method: GET
- name: Get Group Details
  endpoint:
    path: /groups/get-group-details
    method: GET
- name: List Organizations
  endpoint:
    path: /organizations/list-organizations
    method: GET
- name: Create Organization
  endpoint:
    path: /organizations/create-organization
    method: POST
- name: repo_notes
  endpoint:
    path: /repo_notes
    method: GET
    data_selector: notes
    params: {}
- name: pages
  endpoint:
    path: /pages
    method: GET
    data_selector: pages
    params: {}
- name: read_wiki_structure
  endpoint:
    path: /sse
    method: GET
- name: read_wiki_contents
  endpoint:
    path: /sse
    method: GET
- name: ask_question
  endpoint:
    path: /sse
    method: GET
- name: pull_request_template
  endpoint:
    path: /pull_request_template
    method: GET
    data_selector: templates
    params: {}
- name: code_coverage
  endpoint:
    path: /coverage
    method: GET
    data_selector: results
    params: {}
- name: sessions
  endpoint:
    path: /api-reference/sessions
    method: GET
- name: secrets
  endpoint:
    path: /api-reference/secrets
    method: GET
- name: knowledge
  endpoint:
    path: /api-reference/knowledge
    method: GET
- name: playbooks
  endpoint:
    path: /api-reference/playbooks
    method: GET
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: session_id
- name: attachments
  endpoint:
    path: /attachments
    method: POST
    data_selector: file_url
- name: knowledge
  endpoint:
    path: /knowledge
    method: GET
    data_selector: knowledge
- name: playbooks
  endpoint:
    path: /playbooks
    method: GET
    data_selector: playbooks
- name: session
  endpoint:
    path: /sessions
    method: POST
    data_selector: session_id
- name: attachment
  endpoint:
    path: /attachments
    method: POST
    data_selector: file_url
- name: knowledge
  endpoint:
    path: /knowledge
    method: GET
    data_selector: knowledge
- name: playbook
  endpoint:
    path: /playbooks
    method: GET
    data_selector: playbooks
- name: sessions
  endpoint:
    path: /v1/sessions
    method: GET
    data_selector: sessions
    params:
      limit: 100
      offset: 0
- name: sessions
  endpoint:
    path: /v1/sessions
    method: GET
    data_selector: sessions
    params:
      limit: 100
      offset: 0
- name: session
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: session_id
    params: {}
- name: session
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: session_id
    params: {}
- name: sessions
  endpoint:
    path: /v1/sessions/{session_id}
    method: GET
    data_selector: session_id
- name: session
  endpoint:
    path: /v1/sessions/{session_id}
    method: GET
    data_selector: session
    params: {}
- name: send_message
  endpoint:
    path: /v1/sessions/{session_id}/message
    method: POST
- name: send_message
  endpoint:
    path: /v1/sessions/{session_id}/message
    method: POST
    data_selector: null
    params: {}
- name: upload_files
  endpoint:
    path: /v1/attachments
    method: POST
    data_selector: response
    params: {}
- name: create_session
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: response
    params: {}
- name: attachments
  endpoint:
    path: /v1/attachments
    method: POST
    data_selector: ''
    params: {}
- name: sessions
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: ''
    params: {}
- name: download_attachment
  endpoint:
    path: /v1/attachments/{uuid}/{name}
    method: GET
    data_selector: null
    params: {}
- name: attachments
  endpoint:
    path: /v1/attachments/{uuid}/{name}
    method: GET
    data_selector: null
    params: {}
- name: update_session_tags
  endpoint:
    path: /v1/sessions/{session_id}/tags
    method: PUT
    data_selector: detail
- name: update_session_tags
  endpoint:
    path: /v1/sessions/{session_id}/tags
    method: PUT
    data_selector: detail
    params: {}
- name: secrets
  endpoint:
    path: /v1/secrets
    method: GET
    data_selector: secrets
- name: secrets
  endpoint:
    path: /v1/secrets
    method: GET
    data_selector: secrets
- name: secrets
  endpoint:
    path: /v1/secrets
    method: POST
    data_selector: id
- name: create_secret
  endpoint:
    path: /v1/secrets
    method: POST
    data_selector: id
- name: delete_secret
  endpoint:
    path: /v1/secrets/{secret_id}
    method: DELETE
- name: delete_secret
  endpoint:
    path: /v1/secrets/{secret_id}
    method: DELETE
- name: knowledge
  endpoint:
    path: /v1/knowledge
    method: GET
    data_selector: knowledge
- name: folders
  endpoint:
    path: /v1/knowledge
    method: GET
    data_selector: folders
- name: knowledge
  endpoint:
    path: /v1/knowledge
    method: GET
    data_selector: knowledge
- name: folders
  endpoint:
    path: /v1/knowledge
    method: GET
    data_selector: folders
- name: knowledge
  endpoint:
    path: /v1/knowledge
    method: POST
    data_selector: id
- name: update_knowledge
  endpoint:
    path: /v1/knowledge/{note_id}
    method: PUT
    data_selector: body
- name: create_knowledge
  endpoint:
    path: /v1/knowledge
    method: POST
    data_selector: id
    params: {}
- name: list_knowledge
  endpoint:
    path: /v1/knowledge
    method: GET
    data_selector: knowledge
    params: {}
- name: delete_knowledge
  endpoint:
    path: /v1/knowledge/{note_id}
    method: DELETE
- name: knowledge
  endpoint:
    path: /v1/knowledge/{note_id}
    method: PUT
    data_selector: body
- name: playbooks
  endpoint:
    path: /v1/playbooks
    method: GET
    data_selector: records
- name: knowledge
  endpoint:
    path: /v1/knowledge/{note_id}
    method: DELETE
- name: playbooks
  endpoint:
    path: /v1/playbooks
    method: GET
    data_selector: ''
- name: playbook
  endpoint:
    path: /v1/playbooks
    method: POST
    data_selector: playbook
    params: {}
- name: playbook
  endpoint:
    path: /v1/playbooks
    method: POST
    data_selector: playbook_id
- name: playbook
  endpoint:
    path: /v1/playbooks/{playbook_id}
    method: GET
    data_selector: playbook
    params: {}
- name: playbook
  endpoint:
    path: /v1/playbooks/{playbook_id}
    method: GET
- name: playbook
  endpoint:
    path: /v1/playbooks/{playbook_id}
    method: PUT
    data_selector: status
    params: {}
- name: playbook
  endpoint:
    path: /v1/playbooks/{playbook_id}
    method: PUT
    data_selector: status
    params: {}
- name: playbook
  endpoint:
    path: /v1/playbooks/{playbook_id}
    method: DELETE
    data_selector: status
    params: {}
- name: Delete Playbook
  endpoint:
    path: /v1/playbooks/{playbook_id}
    method: DELETE
notes:
- Devin is a junior engineer and has lots to learn.
- For more complex edits, we recommend breaking up the project into smaller, isolated
  tasks.
- Source Code Integrations need to happen first in Enterprise Settings and then permissions
  to these repositories can be granted to any sub-organization by an Enterprise Admin.
- Enterprise API is currently in beta.
- Connect your GitHub account to allow Devin to access, create pull requests and contribute
  to your existing repositories.
- Connect Devin to your company Slack and kick off runs directly via Slack by tagging
  @Devin.
- Frame tasks with enough structure and clarity to get reliable, satisfying outcomes.
- Devin operates by loading a snapshot of a virtual machine at the start of each session.
- Setting up Devin’s workspace correctly will significantly improve Devin’s performance.
- Using a service account to authenticate is recommended. Credentials can be securely
  stored via Devin’s Secrets functionality.
- Devin will wait thirty seconds for feedback from you before automatically proceeding
  with its plan.
- Devin does its work in an interactive VSCode environment loaded with your repos.
- Devin automatically indexes your codebase in the background.
- Devin MCP server requires authentication and supports private repository access.
- Session Insights is available for all completed Devin sessions at no additional
  cost.
- If Session Insights isn’t available for a session, it might be because the session
  is still in progress, the session was too short to generate meaningful analysis,
  or there was an error during the analysis process.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Playbooks are easily shareable, reusable prompts for repeated tasks
- Writing playbooks requires skill and trial and error
- Devin is able to deploy small applications that it builds from scratch.
- Devin has limitations when it comes to deploying pre-existing applications.
- 'Devin requires the following permissions: Read access to dependabot alerts, actions,
  checks, commit statuses, deployments, metadata, packages, pages, repository advisories,
  repository hooks, repository projects. Read and write access to code, discussions,
  issues, pull requests, workflows.'
- If your user account is not properly connecting, ensure that your Slack email is
  the same as your email in https://app.devin.ai/settings.
- Create a dedicated GitLab account for Devin
- Enable branch protections on main/master branches
- Azure DevOps is only supported for users on our Enterprise plan
- The user with AAD Global Admin privileges must be logged into the browser during
  the integration setup process.
- Make sure to use the name 'Devin', not your personal name. This name will show up
  in all the comments the integration makes.
- Make sure to only add this new Jira account to 1 Jira workspace.
- Cognition obtained SOC 2 Type II certification and conducted Security Training in
  March 2024 for all employees at Cognition.
- ACUs must be purchased to start using Devin. Each ACU costs $2.25.
- For users on the Teams plan, your $500/month subscription includes 250 ACUs each
  month.
- 'If you need to whitelist Devin’s services, please add the following IP addresses:
  100.20.50.251, 44.238.19.62, 52.10.84.81, 52.183.72.253.'
- If you enable auto-reload, you can set the minimum ACU balance and the amount of
  ACUs to reload to your account.
- 'If you need to whitelist Devin’s services, please add the following IP addresses:
  100.20.50.251, 44.238.19.62, 52.10.84.81, 52.183.72.253. (Please note these IPs
  may change in future updates.)'
- Devin can analyze your codebase’s test suite and write additional tests to increase
  code coverage.
- Devin can analyze your codebase’s test suite and write additional tests to increase
  code coverage for your team.
- Requires setup of API key as environment variable DEVIN_API_KEY
- Authorization requires Bearer token
- Bearer authentication header of the form `Bearer <token>`
- The secret will be available to all sessions created after the secret is added.
- Create a new encrypted secret that can be used in Devin sessions.
- Uses OAuth2 Bearer token for authorization
- Authorization header of the form `Bearer <token>` is required.
- Requires ManageOrgPlaybooks permission.
- Requires ManageOrgPlaybooks permission. Only team playbooks can be updated.
- Update an existing team playbook. Requires ManageOrgPlaybooks permission. Only team
  playbooks can be updated.
- Requires ManageOrgPlaybooks permission. This marks the playbook as deleted and removes
  any associated macro.
errors:
- 'limit: ensure this value is less than or equal to 1000'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: Bad Request'
- '401: Unauthorized'
- '500: Internal Server Error'
- 400 Bad Request
- 401 Unauthorized
- 500 Internal Server Error
- '400'
- '401'
- '404'
- '500'
- '307: Temporary redirect to presigned URL for file download'
- '404: Not Found'
- '307'
- 404 Not Found
- '204: Secret successfully deleted'
- '401 Unauthorized: Bearer authentication header required'
- '403 Forbidden: Check permissions for the requested resource'
- '403 Forbidden: Ensure proper permissions are set'
- '204: Knowledge successfully deleted'
- '401 Unauthorized: Recheck authorization token'
- 'Unauthorized: Check if you have ManageOrgPlaybooks permission.'
auth_info:
  mentioned_objects:
  - Bearer authentication
client:
  base_url: https://api.devin.ai
  auth:
    location: header
    header_name: Authorization
  paginator:
    type: page
    page_size_param: limit
    default_page_size: 100
source_metadata: null
