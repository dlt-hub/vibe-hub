resources:
- name: transcription
  endpoint:
    path: /audio/transcription
    method: POST
    data_selector: documents
- name: audio_transcription
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
    data_selector: documents
- name: chat_prompt_builder
  endpoint:
    path: /chat_prompt_builder
    method: POST
    data_selector: prompt
- name: cache_checker
  endpoint:
    path: /caching
    method: GET
    data_selector: hits
    params: {}
- name: document_classifier
  endpoint:
    params: {}
- name: document_classifier
  endpoint:
    path: /zero-shot-classification
    method: POST
    data_selector: documents
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: service_response
    params: {}
- name: documents
  endpoint:
    path: /convert/pdf
    method: POST
    data_selector: documents
- name: documents
  endpoint:
    path: /run
    method: POST
    data_selector: documents
- name: AzureOCRDocumentConverter
  endpoint:
    path: /azure/ocr/document
    method: POST
    data_selector: documents
    params: {}
- name: CSVToDocument
  endpoint:
    path: /csv/document
    method: POST
    data_selector: documents
    params: {}
- name: DOCXToDocument
  endpoint:
    path: /docx/document
    method: POST
    data_selector: documents
    params: {}
- name: HTMLToDocument
  endpoint:
    path: /html/document
    method: POST
    data_selector: documents
    params: {}
- name: JSONConverter
  endpoint:
    path: /json/document
    method: POST
    data_selector: documents
    params: {}
- name: image_contents
  endpoint:
    path: /pdf_to_image
    method: POST
    data_selector: image_contents
- name: image_contents
  endpoint:
    method: POST
- name: DocumentToImageContent
  endpoint:
    path: /api/document_to_image
    method: POST
    data_selector: image_contents
- name: ImageFileToDocument
  endpoint:
    path: /api/image_file_to_document
    method: POST
    data_selector: documents
- name: ImageFileToImageContent
  endpoint:
    path: /api/image_file_to_image_content
    method: POST
    data_selector: image_contents
- name: ChatMessage
  endpoint:
    path: /chat/message
    method: GET
    data_selector: messages
    params: {}
- name: StreamingChunk
  endpoint:
    path: /streaming_chunk
    method: POST
    data_selector: content
    params: {}
- name: documents
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: documents
- name: document_embedding
  endpoint:
    path: null
    method: POST
    data_selector: documents
    params: {}
- name: documents
  endpoint:
    path: /documents
    method: POST
    data_selector: documents
- name: SentenceTransformers
  endpoint:
    path: /sentence_transformers
    method: POST
    data_selector: documents
    params: {}
- name: SASEvaluator
  endpoint:
    path: /sas/evaluator
    method: POST
    data_selector: results
    params: {}
- name: AnswerExactMatchEvaluator
  endpoint:
    path: /reference/evaluators-api
    method: GET
    data_selector: results
- name: ContextRelevanceEvaluator
  endpoint:
    path: /reference/evaluators-api
    method: GET
    data_selector: results
- name: DocumentMAPEvaluator
  endpoint:
    path: /reference/evaluators-api
    method: GET
    data_selector: results
- name: DocumentMRREvaluator
  endpoint:
    path: /reference/evaluators-api
    method: GET
    data_selector: results
- name: DocumentRecallEvaluator
  endpoint:
    path: /reference/evaluators-api
    method: GET
    data_selector: results
- name: DocumentNDCGEvaluator
  endpoint:
    path: /reference/evaluators-api
    method: GET
    data_selector: results
- name: HuggingFaceLocalGenerator
  endpoint:
    path: /huggingface/local/generator
    method: POST
    data_selector: generated_text
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
- name: chat_response
  endpoint:
    path: /chat
    method: POST
    data_selector: replies
- name: chat_message
  endpoint:
    path: /chat
    method: POST
    data_selector: replies
- name: joiners
  endpoint:
    path: /joiners
    method: GET
    data_selector: joiners
    params: {}
- name: string_joiner
  endpoint:
    path: /string_joiner
    method: POST
    data_selector: strings
- name: Pipeline
  endpoint:
    path: /reference/pipeline-api
    method: GET
    data_selector: records
    params: {}
- name: AsyncPipeline
  endpoint:
    path: /reference/experimental-pipeline-api
    method: GET
    data_selector: records
    params: {}
- name: text_cleaner
  endpoint:
    path: /text_cleaner
    method: POST
    data_selector: texts
- name: TextCleaner
  endpoint:
    path: /text_cleaner
    method: POST
    data_selector: texts
- name: csv_document_cleaner
  endpoint:
    path: /api/csv_document_cleaner
    method: POST
    data_selector: documents
    params: {}
- name: csv_document_splitter
  endpoint:
    path: /api/csv_document_splitter
    method: POST
    data_selector: documents
    params: {}
- name: document_cleaner
  endpoint:
    path: /api/document_cleaner
    method: POST
    data_selector: documents
    params: {}
- name: document_preprocessor
  endpoint:
    path: /api/document_preprocessor
    method: POST
    data_selector: documents
    params: {}
- name: document_splitter
  endpoint:
    path: /api/document_splitter
    method: POST
    data_selector: documents
    params: {}
- name: FileTypeRouter
  endpoint:
    path: /file_type_router
    method: GET
    data_selector: files
    params: {}
- name: LLMMessagesRouter
  endpoint:
    path: /llm_messages_router
    method: GET
    data_selector: messages
    params: {}
- name: MetadataRouter
  endpoint:
    path: /metadata_router
    method: GET
    data_selector: metadata
    params: {}
- name: TextLanguageRouter
  endpoint:
    path: /text_language_router
    method: GET
    data_selector: text
    params: {}
- name: conditional_router
  endpoint:
    path: /conditional_router
    method: GET
    data_selector: routes
    params: {}
- name: document_length_router
  endpoint:
    path: /document_length_router
    method: GET
    data_selector: documents
    params: {}
- name: llm_messages_router
  endpoint:
    path: /llm_messages_router
    method: GET
    data_selector: messages
    params: {}
- name: TopPSampler
  endpoint:
    path: /reference/samplers/top-p
    method: GET
    data_selector: documents
    params: {}
- name: amazon_bedrock_document_embedder
  endpoint:
    path: /amazon/bedrock/document/embedder
    method: POST
    data_selector: documents
- name: amazon_bedrock_text_embedder
  endpoint:
    path: /amazon/bedrock/text/embedder
    method: POST
    data_selector: embedding
- name: amazon_bedrock_generator
  endpoint:
    path: /amazon/bedrock/generator
    method: POST
    data_selector: generated_text
- name: documents
  endpoint:
    path: /run
    method: POST
    data_selector: documents
- name: SagemakerGenerator
  endpoint:
    path: /generators/sagemaker
    method: POST
    data_selector: replies
    params: {}
- name: AnthropicVertexChatGenerator
  endpoint:
    path: /v1/anthropic/generate
    method: POST
- name: AnthropicGenerator
  endpoint:
    path: /v2/anthropic/generator
    method: POST
    data_selector: replies
- name: AnthropicChatGenerator
  endpoint:
    path: /v2/anthropic/chat/generator
    method: POST
    data_selector: replies
- name: AstraDocumentStore
  endpoint:
    path: /your/api/endpoint
    method: POST
    data_selector: documents
    params: {}
- name: CohereDocumentEmbedder
  endpoint:
    path: /embed
    method: POST
    data_selector: documents
- name: CohereGenerator
  endpoint:
    path: /generate
    method: POST
    data_selector: replies
- name: text_embedding
  endpoint:
    path: /v1/embed
    method: POST
    data_selector: embedding
- name: CohereGenerator
  endpoint:
    path: /generate
    method: POST
- name: CohereChatGenerator
  endpoint:
    path: /chat
    method: POST
- name: cohere_document_embedder
  endpoint:
    path: /v2/embed
    method: POST
    data_selector: documents
- name: cohere_document_image_embedder
  endpoint:
    path: /v2/image/embed
    method: POST
    data_selector: documents
- name: cohere_text_embedder
  endpoint:
    path: /v2/text/embed
    method: POST
    data_selector: embedding
- name: CohereChatGenerator
  endpoint:
    path: /chat
    method: POST
    data_selector: replies
- name: CohereRanker
  endpoint:
    path: /rerank
    method: POST
    data_selector: documents
- name: GoogleAIGeminiGenerator
  endpoint:
    path: /googleai/gemini
    method: POST
    data_selector: replies
- name: GoogleAIGeminiChatGenerator
  endpoint:
    path: /googleai/chat/gemini
    method: POST
    data_selector: replies
- name: text_embedder
  endpoint:
    path: /embed
    method: POST
    data_selector: embedding
- name: document_embedder
  endpoint:
    path: /embedders/google_genai
    method: POST
    data_selector: documents
- name: GoogleGenAITextEmbedder
  endpoint:
    path: GoogleGenAITextEmbedder
    method: POST
- name: GoogleGenAIDocumentEmbedder
  endpoint:
    path: GoogleGenAIDocumentEmbedder
    method: POST
- name: GoogleGenAIChatGenerator
  endpoint:
    path: /generators/google/genai/chat
    method: POST
    data_selector: replies
- name: GoogleGenAIDocumentEmbedder
  endpoint:
    path: /embedders/google/genai/document
    method: POST
    data_selector: documents
- name: GoogleGenAITextEmbedder
  endpoint:
    path: /embedders/google/genai/text
    method: POST
    data_selector: documents
- name: VertexAIImageQA
  endpoint:
    method: POST
- name: VertexAITextGenerator
  endpoint:
    method: POST
- name: VertexAIGeminiChatGenerator
  endpoint:
    method: POST
- name: VertexAIDocumentEmbedder
  endpoint:
    method: POST
- name: VertexAITextEmbedder
  endpoint:
    method: POST
- name: VertexAIGeminiGenerator
  endpoint:
    path: /vertex-ai/gemini
    method: POST
- name: VertexAIImageCaptioner
  endpoint:
    path: /vertex-ai/imagetext
    method: POST
- name: VertexAICodeGenerator
  endpoint:
    path: /vertex-ai/code
    method: POST
- name: VertexAIImageGenerator
  endpoint:
    path: /vertex-ai/image
    method: POST
- name: embedding
  endpoint:
    path: /run
    method: POST
    data_selector: embedding
- name: ChineseDocumentSplitter
  endpoint:
    path: /reference/integrations-hanlp
    method: GET
    data_selector: documents
    params: {}
- name: InstructorTextEmbedder
  endpoint:
    path: /module/haystack_integrations.components.embedders/instructor_embedders/instructor_text_embedder
    method: GET
- name: document
  endpoint:
    path: /document/embed
    method: POST
    data_selector: embedding
- name: LlamaCppGenerator
  endpoint:
    path: /reference/integrations-llama-cpp
    method: GET
    data_selector: generator
- name: get_current_time
  endpoint:
    method: POST
- name: documents
  endpoint:
    path: /services/data/vXX.X/sobjects/Documents
    method: GET
    data_selector: documents
    params:
      top_k: 10
- name: MongoDBAtlasDocumentStore
  endpoint:
    path: /mongodb/atlas/document_store
    method: POST
    data_selector: document_store
    params: {}
- name: MongoDBAtlasEmbeddingRetriever
  endpoint:
    path: /mongodb/atlas/embedding_retriever
    method: POST
    data_selector: retriever
    params: {}
- name: ranker
  endpoint:
    path: /ranker
    method: POST
- name: OpenSearchBM25Retriever
  endpoint:
    path: /reference/retrievers/opensearch-bm25-retriever
    method: GET
    data_selector: documents
- name: OpenSearchEmbeddingRetriever
  endpoint:
    path: /OpenSearchEmbeddingRetriever
    method: POST
    data_selector: documents
- name: OpenSearchHybridRetriever
  endpoint:
    path: /OpenSearchHybridRetriever
    method: POST
    data_selector: documents
- name: documents
  endpoint:
    path: /documents
    method: POST
    data_selector: records
- name: PineconeEmbeddingRetriever
  endpoint:
    path: /pinecone/embedding_retriever
    method: GET
    data_selector: documents
    params:
      top_k: 10
- name: RagasEvaluator
  endpoint:
    path: /reference/evaluators/ragas
    method: POST
    data_selector: result
- name: UnstructuredFileConverter
  endpoint:
    path: /general/v0/general
    method: POST
    data_selector: documents
- name: InMemoryChatMessageStore
  endpoint:
    path: /reference/experimental-chatmessage-store-api
    method: GET
    data_selector: chat_messages
    params: {}
- name: ImageContent
  endpoint:
    path: /experimental/image/content
    method: POST
    data_selector: content
    params: {}
- name: OpenAIChatGenerator
  endpoint:
    path: /experimental/generators/chat/openai
    method: POST
    data_selector: replies
    params: {}
notes:
- Requires OpenAI API key setup
- Supports various audio formats and languages
- Uses API key for authentication
- The component uses a Hugging Face pipeline for zero-shot classification.
- Classification is run on the document's content field by default.
- The parameters argument is required for this component.
- Various converters to transform data from one format to another.
- Converts PDF files to ImageContent objects.
- Various converters to transform image data from one format to another.
- Uses OAuth2 for authentication.
- Uses SentenceTransformers for embedding documents.
- Uses a pre-trained model from the Hugging Face model hub.
- Model can be either a Bi-Encoder or a Cross-Encoder.
- Generates text using OpenAI's large language models (LLMs)
- Supports streaming responses from OpenAI API
- Generates images using OpenAI's DALL-E model.
- Generates text using OpenAI's models on Azure.
- Supports streaming responses from OpenAI API.
- Uses OpenAI API key for authentication
- 'Supports different join modes: concatenate, merge, reciprocal_rank_fusion, distribution_based_rank_fusion.'
- Synchronous version of the orchestration engine.
- Asynchronous version of the Pipeline orchestration engine.
- Converts text to lowercase if specified.
- Can remove punctuation and numbers based on parameters.
- Uses routes to determine output based on conditions in ConditionalRouter
- DocumentLengthRouter can handle empty or low-content documents
- LLMMessagesRouter classifies messages based on LLM output
- Implements top-p (nucleus) sampling for document filtering based on cumulative probability
  scores.
- If True, the component will raise an exception in case of errors
- If False, the component will return a ChatMessage object with error=True and a description
  of the error in result.
- AWS credentials are not required if the AWS environment is configured correctly.
- Make sure the region you set supports Amazon Bedrock.
- AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_REGION_NAME must be provided if
  not configured.
- If the AWS environment is configured correctly, the AWS credentials are not required
  as they're loaded automatically from the environment or the AWS configuration file.
- Make sure your AWS credentials are set up correctly.
- For guidance on how to deploy a model to SageMaker, refer to the SageMaker JumpStart
  foundation models documentation.
- Enables text generation using state-of-the-art Claude 3 LLMs via the Anthropic Vertex
  AI API.
- You must have a GCP project with Vertex AI enabled.
- Ensure that the desired Anthropic model is activated in the Vertex AI Model Garden.
- Supports Claude family of models.
- For more complete support, consider using the AnthropicChatGenerator.
- The required credentials (api endpoint and application token) can be generated through
  the UI.
- Uses API key for authentication.
- Cohere discontinued the `generate` API, so this generator is a mere wrapper around
  `CohereChatGenerator`.
- Requires valid API key from Cohere.
- Cohere API requires setup of API keys.
- Google API key is required and can be set via environment variables.
- Go to https://aistudio.google.com/app/apikey for a Gemini API key.
- Go to https://cloud.google.com/vertex-ai/generative-ai/docs/start/api-keys for a
  Vertex AI API key.
- Supports both Gemini Developer API and Vertex AI.
- Authenticates using Google Cloud Application Default Credentials (ADCs).
- Chinese words can consist of multiple characters.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- 'The instruction follows the unified template of the form: ''Represent the ''domain''
  ''text_type'' for ''task_objective'''
- If token is set to True, the token generated when running 'transformers-cli login'
  will be used.
- 'LANGFUSE_SECRET_KEY and LANGFUSE_PUBLIC_KEY: Required Langfuse API credentials.'
- 'HAYSTACK_CONTENT_TRACING_ENABLED: Must be set to ''true'' to enable tracing.'
- 'HAYSTACK_LANGFUSE_ENFORCE_FLUSH: (Optional) If set to ''false'', disables flushing
  after each component.'
- Provides an interface to generate text using LLM via llama.cpp.
- Employs the quantized GGUF format, suitable for running these models on standard
  machines.
- Supports streaming responses from the Llama API Chat Completion endpoint.
- Currently only supports json_schema response format.
- Users must provide both a vector_search_index and a full_text_search_index for search
  operations.
- Creating databases and collections is beyond the scope of MongoDBAtlasDocumentStore.
- API key is required for hosted NVIDIA NIMs.
- Must be connected to the OpenSearchDocumentStore to run.
- The embeddings_dim, method, mappings, and settings arguments are only used if the
  index does not exist and needs to be created.
- The index will be created if it does not exist.
- The namespace will be created at the first write.
- Uses API Key for authentication
- API key can be explicitly passed or read from environment variable UNSTRUCTURED_API_KEY.
errors:
- '401 Unauthorized: Invalid API key'
- '422 Unprocessable Entity: Check audio file format or parameters'
- 'ValueError: If invalid inputs are provided to the pipeline.'
- 'PipelineRuntimeError: If the Pipeline contains cycles with unsupported connections
  that would cause it to get stuck and fail running.'
- 'PipelineMaxComponentRuns: If a Component reaches the maximum number of times it
  can be run in this Pipeline.'
- 'RuntimeError: If called from within an async context. Use run_async instead.'
- 'PipelineMaxComponentRuns: If a component exceeds the maximum number of allowed
  executions within the pipeline.'
- '400 Bad Request: Check input format and required fields.'
- 'NoRouteSelectedException: If no condition in the routes is True'
- 'RouteConditionException: If there is an error parsing or evaluating the condition
  expression'
- 'ValueError: If output_names and output_patterns are not non-empty lists of the
  same length'
- 'ToolNotFoundException: If the tool is not found in the list of available tools
  and raise_on_failure is True.'
- 'ToolInvocationError: If the tool invocation fails and raise_on_failure is True.'
- 'StringConversionError: If the conversion of the tool result to a string fails and
  raise_on_failure is True.'
- 'ToolOutputMergeError: If merging tool outputs into state fails and raise_on_failure
  is True.'
- 'AmazonBedrockConfigurationError: If the AWS environment is not configured correctly
  or the model is not supported.'
- 'AmazonBedrockInferenceError: If the Bedrock inference API call fails.'
- 'AWSConfigurationError: Exception raised when AWS is not configured correctly.'
- 'AmazonBedrockConfigurationError: Exception raised when AmazonBedrock node is not
  configured correctly.'
- 'AmazonBedrockInferenceError: Exception for issues that occur in the Bedrock inference
  node.'
- 'ValueError: If `top_k` is not > 0.'
- 'AstraDocumentStoreFilterError: Raised when an invalid filter is passed to AstraDocumentStore.'
- 'MCPConnectionError: If connection to the server fails'
- 'MCPToolNotFoundError: If no tools are available or the requested tool is not found'
- 'MCPInvocationError: If the tool invocation fails'
- 'ValueError: If document_store is not an instance of PineconeDocumentStore.'
auth_info:
  mentioned_objects:
  - Secret
  - HF_API_TOKEN
  - HF_TOKEN
  - GOOGLE_API_KEY
  - GEMINI_API_KEY
client:
  base_url: https://api.cohere.com
  auth:
    type: apikey
    api_key: Secret.from_env_var(['COHERE_API_KEY', 'CO_API_KEY'])
  headers:
    Accept: application/json
source_metadata: null
