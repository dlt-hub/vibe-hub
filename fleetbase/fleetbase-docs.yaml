resources:
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: ''
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
    params:
      status: active
- name: places
  endpoint:
    path: /places
    method: GET
    data_selector: places
    params:
      limit: '10'
- name: places
  endpoint:
    path: /places
    method: GET
    data_selector: results
    params:
      limit: '10'
- name: application
  endpoint:
    path: /application
    method: GET
- name: application
  endpoint:
    path: /services/data/vXX.X/sobjects/Application
    method: GET
    data_selector: records
- name: console
  endpoint:
    path: /services/data/vXX.X/sobjects/Console
    method: GET
    data_selector: records
- name: fleetbase
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: fleetbase_api
  endpoint:
    path: /api
    method: GET
- name: fleetbase_console
  endpoint:
    path: /console
    method: GET
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
    params:
      status: active
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: records
    params:
      status: active
- name: webhook
  endpoint:
    path: /webhook
    method: POST
notes:
- All API requests must be made over HTTPS.
- Authentication to the API is performed via HTTP Basic Auth.
- Various environment variables and services are required to successfully run Fleetbase
  depending on your setup.
- Prepare a production environment, preferably a virtual or dedicated server.
- Have domain names ready for the API and console, and ensure they are pointed to
  your server.
- Prepare SSL certificates for HTTPS.
- Fleetbase is built with PHP and MySQL.
- Ensure Docker Compose is also available for managing multi-container Docker applications.
- Ensure all services mentioned in the .env file are properly installed and running,
  such as Redis, MySQL, and any external services like Twilio or Sentry.
- Fleetbase is built with PHP and MySQL
- This guide provides a structured approach to upgrading Fleetbase, whether you are
  using Docker or a traditional source installation.
- Environment variables are key-value pairs that influence the behavior of running
  processes in an application.
- For Docker environments, environment variables are usually set in the `docker-compose.yml`
  file or a separate .env file that Docker Compose can reference.
- Check the application logs for any errors or warnings.
- Test the functionality to ensure all components are working as expected.
- Verify that the API and console are accessible and responsive.
- Authentication to the API is performed via HTTP Basic Auth. Provide your API key
  as the basic auth username value. You do not need to provide a password.
- Ensure that all communications are secured using HTTPS and WSS, and that authentication
  tokens are managed securely.
- Ensure that your endpoint is secured with HTTPS to protect the data transmitted
  between Fleetbase and your server.
- API requests without authentication will fail.
- 'Error Handling: Implement robust error handling, especially for connection issues
  and failed subscriptions.'
- 'Security: Ensure that all communications are secured using HTTPS and WSS, and that
  authentication tokens are managed securely.'
- 'Resource Management: Unsubscribe from channels when no longer needed to prevent
  memory leaks and unnecessary data traffic.'
- Webhooks in Fleetbase provide a powerful way to integrate real-time event-driven
  functionalities into your external applications or services.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API key or token expiration'
- '4xx: Error that failed given the information provided'
- '5xx: Error with Fleetbase''s servers'
- '4xx: Error that failed given the information provided (e.g., a required parameter
  was omitted, an order failed, etc.)'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.fleetbase.io
  auth:
    type: apikey
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
    Content-Type: application/json
source_metadata: null
