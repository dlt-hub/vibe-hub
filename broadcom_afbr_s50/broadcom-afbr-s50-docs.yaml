resources:
- name: S2PI
  endpoint:
    path: /Device/Lib/S2PI
    method: GET
    data_selector: records
    params: {}
- name: Timer
  endpoint:
    path: /Device/Lib/Timer
    method: GET
    data_selector: records
    params: {}
- name: Timer_SetInterval
  endpoint:
    path: Timer_SetInterval
    method: void
    data_selector: status_t
    params:
      dt_microseconds: uint32_t
      param: void*
- name: IRQ_LOCK
  endpoint:
    path: IRQ_LOCK
    method: void
    data_selector: void
    params: {}
- name: Timer_GetCounterValue
  endpoint:
    path: Timer_GetCounterValue
    method: void
    data_selector: void
    params:
      hct: uint32_t*
      lct: uint32_t*
- name: IRQ_UNLOCK
  endpoint:
    path: IRQ_UNLOCK
    method: void
    data_selector: void
    params: {}
- name: Timer_SetCallback
  endpoint:
    path: Timer_SetCallback
    method: status_t
    data_selector: void
    params:
      f: timer_cb_t
- name: measurements
  endpoint:
    path: /measurements
    method: GET
    data_selector: results
- name: measurement_mode
  endpoint:
    path: /argus/SetMeasurementMode
    method: POST
    data_selector: status
- name: configuration
  endpoint:
    path: /argus/SetConfigurationFrameTime
    method: POST
    data_selector: status
- name: calibration_global_range_offsets
  endpoint:
    path: /api/calibration/global_range_offsets
    method: GET
    data_selector: global_range_offsets
    params: {}
- name: data_evaluation_pending
  endpoint:
    path: /api/data/evaluation/pending
    method: GET
    data_selector: evaluation_pending
    params: {}
- name: measurement_ready_callback
  endpoint:
    path: /api/measurement/ready/callback
    method: GET
    data_selector: measurement_ready
    params: {}
- name: simple_example
  endpoint:
    path: /example/simple
    method: GET
    data_selector: data
    params: {}
- name: advanced_example
  endpoint:
    path: /example/advanced
    method: GET
    data_selector: data
    params: {}
- name: high_speed_example
  endpoint:
    path: /example/high_speed
    method: GET
    data_selector: data
    params: {}
- name: multi_device_example
  endpoint:
    path: /example/multi_device
    method: GET
    data_selector: data
    params: {}
- name: simple_debug_example
  endpoint:
    path: /example/simple_debug
    method: GET
    data_selector: data
    params: {}
- name: low_power_battery_example
  endpoint:
    path: /example/low_power_battery
    method: GET
    data_selector: data
    params: {}
- name: High-Speed Example
  endpoint:
    path: /services/data/vXX.X/sobjects/HighSpeedExample
    method: GET
    data_selector: records
    params: {}
- name: Multi-Device Example
  endpoint:
    path: /services/data/vXX.X/sobjects/MultiDeviceExample
    method: GET
    data_selector: records
    params: {}
- name: Simple Debug Example
  endpoint:
    path: /services/data/vXX.X/sobjects/SimpleDebugExample
    method: GET
    data_selector: records
    params: {}
- name: Low Power & Battery Example
  endpoint:
    path: /services/data/vXX.X/sobjects/LowPowerExample
    method: GET
    data_selector: records
    params: {}
- name: 1D data
  endpoint:
    path: /data/1D
    method: GET
    data_selector: records
    params: {}
- name: Measurement Data Set (1D + 3D)
  endpoint:
    path: /measurement_data_set
    method: GET
    data_selector: data
- name: Calibration Commands
  endpoint:
    path: /calibration_commands
    method: GET
    data_selector: commands
- name: Software Version
  endpoint:
    path: /software/version
    method: GET
    data_selector: version_info
- name: Module Type / Version
  endpoint:
    path: /module/type/version
    method: GET
    data_selector: module_info
- name: Module UID
  endpoint:
    path: /module/uid
    method: GET
    data_selector: module_uid
- name: measurement_data_set
  endpoint:
    path: /measurement/data/set
    method: GET
    data_selector: data
    params: {}
- name: trigger_single_shot
  endpoint:
    path: /measurement/trigger/single_shot
    method: POST
    data_selector: data
    params: {}
- name: start_auto_measurement
  endpoint:
    path: /measurement/start/auto
    method: POST
    data_selector: data
    params: {}
- name: stop_measurement
  endpoint:
    path: /measurement/stop
    method: POST
    data_selector: data
    params: {}
- name: abort_measurement
  endpoint:
    path: /measurement/abort
    method: POST
    data_selector: data
    params: {}
- name: run_calibration
  endpoint:
    path: /measurement/calibration
    method: POST
    data_selector: data
    params: {}
- name: device_reinitialize
  endpoint:
    path: /device/reinitialize
    method: POST
    data_selector: data
    params: {}
- name: 1D Measurement Data
  endpoint:
    path: /1d_measurement_data
    method: GET
    data_selector: measurement_data
    params: {}
- name: 3D Measurement Data
  endpoint:
    path: /3d_measurement_data
    method: GET
    data_selector: measurement_data
    params: {}
- name: 3D Measurement Data - Debug
  endpoint:
    path: /3d_measurement_data_debug
    method: GET
    data_selector: measurement_data
    params: {}
- name: 1D Measurement Data - Debug
  endpoint:
    path: /1d_measurement_data_debug
    method: GET
    data_selector: measurement_data
    params: {}
- name: Measurement Data
  endpoint:
    path: /measurement/data
    method: GET
    data_selector: data
    params: {}
- name: Data Output Mode
  endpoint:
    path: /measurement/data/output/mode
    method: GET
    data_selector: data
    params: {}
- name: Measurement Mode
  endpoint:
    path: /measurement/mode
    method: GET
    data_selector: data
    params: {}
- name: Frame Time
  endpoint:
    path: /measurement/frame/time
    method: GET
    data_selector: data
    params: {}
- name: Dual Frequency Mode
  endpoint:
    path: /measurement/dual/frequency/mode
    method: GET
    data_selector: data
    params: {}
- name: Smart Power Save Mode
  endpoint:
    path: /measurement/smart/power/save
    method: GET
    data_selector: data
    params: {}
- name: Shot Noise Monitor Mode
  endpoint:
    path: /measurement/shot/noise/monitor
    method: GET
    data_selector: data
    params: {}
- name: Crosstalk Monitor Mode
  endpoint:
    path: /measurement/crosstalk/monitor
    method: GET
    data_selector: data
    params: {}
- name: Dynamic Configuration Adaption
  endpoint:
    path: /measurement/dynamic/config/adaption
    method: GET
    data_selector: data
    params: {}
- name: Pixel Binning
  endpoint:
    path: /measurement/pixel/binning
    method: GET
    data_selector: data
    params: {}
- name: SPI Configuration
  endpoint:
    path: /measurement/spi/configuration
    method: GET
    data_selector: data
    params: {}
- name: UART Configuration
  endpoint:
    path: /uart/configuration
    method: GET
    data_selector: baud_rate
    params:
      available_baud_rates:
      - 115200
      - 500000
      - 1000000
      - 2000000
- name: Global Range Offset
  endpoint:
    path: /global/range/offset
    method: GET
    data_selector: range_offset
    params: {}
- name: Pixel Range Offsets
  endpoint:
    path: /pixel/range/offsets
    method: GET
    data_selector: offset_values
    params: {}
- name: Pixel Range Offsets - Reset Offset Table
  endpoint:
    path: /pixel/range/offsets/reset
    method: POST
    data_selector: reset_offset_table
    params: {}
- name: Range Offsets Calibration Sequence - Sample Time
  endpoint:
    path: /range/offsets/calibration/sample/time
    method: GET
    data_selector: sample_time
    params: {}
- name: Crosstalk Compensation - Vector Table
  endpoint:
    path: /crosstalk/compensation/vector
    method: GET
    data_selector: vector_table
    params: {}
- name: Crosstalk Compensation - Reset Vector Table
  endpoint:
    path: /crosstalk/compensation/vector/reset
    method: POST
    data_selector: reset_vector_table
    params: {}
- name: Crosstalk Calibration Sequence - Sample Time
  endpoint:
    path: /crosstalk/calibration/sample/time
    method: GET
    data_selector: sample_time
    params: {}
- name: Crosstalk Calibration Sequence - Maximum Amplitude Threshold
  endpoint:
    path: /crosstalk/calibration/amplitude/threshold
    method: GET
    data_selector: max_amplitude_threshold
    params: {}
- name: Pixel-2-Pixel Crosstalk Compensation Parameters
  endpoint:
    path: /crosstalk/pixel2pixel/parameters
    method: GET
    data_selector: crosstalk_parameters
    params: {}
- name: Argus_Deinit
  endpoint:
    path: /Deinit
    method: POST
    data_selector: status
    params: {}
- name: Argus_DestroyHandle
  endpoint:
    path: /DestroyHandle
    method: POST
    data_selector: status
    params: {}
- name: Argus_GetAPIVersion
  endpoint:
    path: /GetAPIVersion
    method: GET
    data_selector: version
    params: {}
- name: Argus_GetBuildNumber
  endpoint:
    path: /GetBuildNumber
    method: GET
    data_selector: build_number
    params: {}
- name: Argus_GetChipID
  endpoint:
    path: /GetChipID
    method: GET
    data_selector: chip_id
    params: {}
- name: Argus_GetChipVersion
  endpoint:
    path: /GetChipVersion
    method: GET
    data_selector: chip_version
    params: {}
- name: Argus_GetLaserType
  endpoint:
    path: /GetLaserType
    method: GET
    data_selector: laser_type
    params: {}
- name: Argus_GetModuleName
  endpoint:
    path: /GetModuleName
    method: GET
    data_selector: module_name
    params: {}
- name: Argus_GetModuleVersion
  endpoint:
    path: /GetModuleVersion
    method: GET
    data_selector: module_version
    params: {}
- name: Argus_GetSPISlave
  endpoint:
    path: /GetSPISlave
    method: GET
    data_selector: spi_slave
    params: {}
- name: Argus_Init
  endpoint:
    path: /Init
    method: POST
    data_selector: status
    params: {}
- name: Argus_InitMode
  endpoint:
    path: /InitMode
    method: POST
    data_selector: status
    params: {}
- name: Argus_Reinit
  endpoint:
    path: /argus/reinit
    method: POST
    data_selector: status
- name: Argus_ReinitMode
  endpoint:
    path: /argus/reinitMode
    method: POST
    data_selector: status
- name: Argus_RestoreDeviceState
  endpoint:
    path: /argus/restoreDeviceState
    method: POST
    data_selector: status
- name: HAL Self Test
  endpoint:
    path: /group__argus__test.html
    method: GET
- name: Argus_VerifyHALImplementation
  endpoint:
    path: /argus/verifyHALImplementation
    method: GET
    data_selector: tests
- name: HAL Self Test
  endpoint:
    path: /group__argus__test.html
    method: GET
- name: GpioInterruptTest
  endpoint:
    path: /GpioInterruptTest
    method: GET
    data_selector: status
- name: GpioModeTest
  endpoint:
    path: /GpioModeTest
    method: GET
    data_selector: status
- name: MeasurementCallback
  endpoint:
    path: /MeasurementCallback
    method: GET
    data_selector: status
- name: PIT_Callback
  endpoint:
    path: /PIT_Callback
    method: GET
    data_selector: status
- name: PITTest
  endpoint:
    path: /PITTest
    method: GET
    data_selector: status
- name: ReadEEPROM
  endpoint:
    path: /ReadEEPROM
    method: GET
    data_selector: status
- name: error_log
  endpoint:
    path: /error_log
    method: GET
    data_selector: error_log
    params: {}
- name: HAL_TEST_VERSION
  endpoint:
    path: /HAL_TEST_VERSION
    method: GET
    data_selector: HAL_TEST_VERSION
    params: {}
- name: Argus_VerifyHALImplementation
  endpoint:
    path: /Argus_VerifyHALImplementation
    method: GET
    data_selector: Argus_VerifyHALImplementation
    params: {}
- name: RunMeasurement
  endpoint:
    path: /RunMeasurement
    method: GET
    data_selector: status
    params: {}
- name: RunPITTest
  endpoint:
    path: /RunPITTest
    method: GET
    data_selector: status
    params: {}
- name: SpiConnectionTest
  endpoint:
    path: /SpiConnectionTest
    method: GET
    data_selector: status
    params: {}
- name: SpiMaxLengthTest
  endpoint:
    path: /SpiMaxLengthTest
    method: GET
    data_selector: status
    params: {}
- name: SpiTransferFromGpioInterrupt
  endpoint:
    path: /SpiTransferFromGpioInterrupt
    method: GET
    data_selector: status
    params: {}
- name: GpioInterruptTest
  endpoint:
    path: /GpioInterruptTest
    method: GET
    data_selector: status
    params:
      slave: s2pi_slave_t
- name: GpioModeTest
  endpoint:
    path: /GpioModeTest
    method: GET
    data_selector: status
    params:
      slave: s2pi_slave_t
- name: MeasurementCallback
  endpoint:
    path: /MeasurementCallback
    method: GET
    data_selector: status
    params:
      param: void*
- name: PIT_Callback
  endpoint:
    path: /PIT_Callback
    method: GET
    data_selector: status
    params:
      param: void*
- name: PITTest
  endpoint:
    path: /PITTest
    method: GET
    data_selector: status
    params: {}
- name: ReadEEPROM
  endpoint:
    path: /ReadEEPROM
    method: GET
    data_selector: status
    params:
      slave: s2pi_slave_t
      eeprom: uint8_t*
- name: SpiTransferFromGpioInterruptCallback
  endpoint:
    path: /SpiTransferFromGpioInterruptCallback
    method: GET
    data_selector: param
    params: {}
- name: SpiTransferFromInterruptTest
  endpoint:
    path: /SpiTransferFromInterruptTest
    method: GET
    data_selector: slave
    params: {}
- name: SpiTransferFromPitInterrupt
  endpoint:
    path: /SpiTransferFromPitInterrupt
    method: GET
    data_selector: slave
    params: {}
- name: SpiTransferFromPitInterruptCallback
  endpoint:
    path: /SpiTransferFromPitInterruptCallback
    method: GET
    data_selector: param
    params: {}
- name: SpiTransferFromSpiInterrupt
  endpoint:
    path: /SpiTransferFromSpiInterrupt
    method: GET
    data_selector: slave
    params: {}
- name: SpiTransferFromSpiInterruptCallback
  endpoint:
    path: /SpiTransferFromSpiInterruptCallback
    method: GET
    data_selector: status
    params: {}
- name: SpiTransferInterruptCallback
  endpoint:
    path: /SpiTransferInterruptCallback
    method: GET
    data_selector: status
    params: {}
- name: ReadRcoTrim
  endpoint:
    path: /ReadRcoTrim
    method: GET
    data_selector: status
- name: RunMeasurement
  endpoint:
    path: /RunMeasurement
    method: GET
    data_selector: status
- name: RunPITTest
  endpoint:
    path: /RunPITTest
    method: GET
    data_selector: status
- name: SpiConnectionTest
  endpoint:
    path: /SpiConnectionTest
    method: GET
    data_selector: status
- name: SpiMaxLengthTest
  endpoint:
    path: /SpiMaxLengthTest
    method: GET
    data_selector: status
- name: SpiTransferFromGpioInterrupt
  endpoint:
    path: /SpiTransferFromGpioInterrupt
    method: GET
    data_selector: status
- name: SPITransferSync
  endpoint:
    path: /api/spi_transfer_sync
    method: POST
    data_selector: status
    params: {}
- name: TimerPlausibilityTest
  endpoint:
    path: /api/timer_plausibility_test
    method: POST
    data_selector: status
    params: {}
- name: TimerTest
  endpoint:
    path: /api/timer_test
    method: POST
    data_selector: status
    params: {}
- name: TimerWraparoundTest
  endpoint:
    path: /api/timer_wraparound_test
    method: POST
    data_selector: status
    params: {}
- name: TriggerMeasurement
  endpoint:
    path: /api/trigger_measurement
    method: POST
    data_selector: status
    params: {}
- name: VerifyHALImplementation
  endpoint:
    path: /api/verify_hal_implementation
    method: POST
    data_selector: status
    params: {}
- name: SpiTransferFromGpioInterruptCallback
  endpoint:
    path: /callback/SpiTransferFromGpioInterrupt
    method: GET
    data_selector: callback_param
    params: {}
- name: SpiTransferFromInterruptTest
  endpoint:
    path: /test/SpiTransferFromInterrupt
    method: GET
    data_selector: test_param
    params: {}
- name: SpiTransferFromPitInterrupt
  endpoint:
    path: /test/SpiTransferFromPitInterrupt
    method: GET
    data_selector: pit_param
    params: {}
- name: SpiTransferFromPitInterruptCallback
  endpoint:
    path: /callback/SpiTransferFromPitInterrupt
    method: GET
    data_selector: pit_callback_param
    params: {}
- name: SpiTransferFromSpiInterrupt
  endpoint:
    path: /test/SpiTransferFromSpiInterrupt
    method: GET
    data_selector: spi_param
    params: {}
- name: SpiTransferFromSpiInterruptCallback
  endpoint:
    path: /callback/SpiTransferFromSpiInterrupt
    method: GET
    data_selector: spi_callback_param
    params: {}
- name: SpiTransferInterruptCallback
  endpoint:
    path: /callback/SpiTransferInterrupt
    method: GET
    data_selector: interrupt_callback_param
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: status
- name: crosstalk_calibration
  endpoint:
    path: /crosstalk/calibration
    method: POST
    data_selector: results
- name: device_status
  endpoint:
    path: /device/status
    method: GET
    data_selector: status
- name: User_Query
  endpoint:
    path: /user_query
    method: GET
    data_selector: results
- name: Device_Query
  endpoint:
    path: /device_query
    method: GET
    data_selector: results
- name: Set_DCA_to_MaxState
  endpoint:
    path: /set_dca_max_state
    method: POST
    data_selector: status
- name: Exec_SingleMeasurement
  endpoint:
    path: /exec_single_measurement
    method: POST
    data_selector: measurement_results
- name: Exec_XtalkMeasurement
  endpoint:
    path: /exec_xtalk_measurement
    method: POST
    data_selector: xtalk_results
- name: Print_BinnedResults
  endpoint:
    path: /print_binned_results
    method: GET
    data_selector: binned_results
- name: Print_PixelAmplResults
  endpoint:
    path: /print_pixel_ampl_results
    method: GET
    data_selector: pixel_ampl_results
- name: Print_PixelSatResults
  endpoint:
    path: /print_pixel_sat_results
    method: GET
    data_selector: pixel_sat_results
- name: Print_PixelMapCoordinates
  endpoint:
    path: /print_pixel_map_coordinates
    method: GET
    data_selector: pixel_coordinates
- name: Print_XtalkMap
  endpoint:
    path: /print_xtalk_map
    method: GET
    data_selector: xtalk_map
- name: Print_XtalkVectorTable
  endpoint:
    path: /print_xtalk_vector_table
    method: GET
    data_selector: xtalk_vector_table
- name: Print_FP_XtalkVectorTable
  endpoint:
    path: /print_fp_xtalk_vector_table
    method: GET
    data_selector: fp_xtalk_vector_table
- name: Print_TotalXtalkMap
  endpoint:
    path: /print_total_xtalk_map
    method: GET
    data_selector: total_xtalk_map
- name: Print_IntegrationEnergyInfo
  endpoint:
    path: /print_integration_energy_info
    method: GET
    data_selector: integration_energy_info
- name: Get_GoldenPixel
  endpoint:
    path: /get_golden_pixel
    method: GET
    data_selector: golden_pixel
- name: Interpolate_ActivePixels
  endpoint:
    path: /interpolate_active_pixels
    method: POST
    data_selector: interpolated_pixel_values
- name: Set_Xtalk_AmplitudeThreshold
  endpoint:
    path: /set_xtalk_amplitude_threshold
    method: POST
    data_selector: amplitude_threshold_status
- name: Handle_Error
  endpoint:
    path: /handle_error
    method: POST
    data_selector: error_handling_status
- name: Get_UARTRxdata
  endpoint:
    path: /get_uart_rxdata
    method: GET
    data_selector: uart_data
- name: UART_Rx_Callback
  endpoint:
    path: /uart_rx_callback
    method: POST
    data_selector: uart_callback_status
- name: Argus_XtalkCalibration_CLI
  endpoint:
    path: /argus_xtalk_calibration_cli
    method: POST
    data_selector: xtalk_calibration_status
- name: crosstalk_calibration
  endpoint:
    path: /crosstalk/calibration
    method: POST
    data_selector: results
- name: s2pi_transfer_frame
  endpoint:
    path: /s2pi/transfer_frame
    method: GET
    data_selector: transfer_status
- name: s2pi_irq_callback
  endpoint:
    path: /s2pi/irq_callback
    method: GET
    data_selector: callback_status
- name: s2pi_capture_gpio_control
  endpoint:
    path: /s2pi/capture_gpio_control
    method: POST
    data_selector: gpio_control_status
- name: s2pi_release_gpio_control
  endpoint:
    path: /s2pi/release_gpio_control
    method: POST
    data_selector: gpio_release_status
- name: SetIrqCallback
  endpoint:
    path: /S2PI_SetIrqCallback
    method: POST
    data_selector: status
    params: {}
- name: TransferFrame
  endpoint:
    path: /S2PI_TransferFrame
    method: POST
    data_selector: status
    params: {}
- name: TryGetMutex
  endpoint:
    path: /S2PI_TryGetMutex
    method: POST
    data_selector: status
    params: {}
- name: WriteGpioPin
  endpoint:
    path: /S2PI_WriteGpioPin
    method: POST
    data_selector: status
    params: {}
- name: S2PI_GetStatus
  endpoint:
    path: /s2pi/status
    method: GET
    data_selector: status
    params: {}
- name: S2PI_TryGetMutex
  endpoint:
    path: /s2pi/tryGetMutex
    method: GET
    data_selector: status
    params: {}
- name: S2PI_ReleaseMutex
  endpoint:
    path: /s2pi/releaseMutex
    method: GET
    data_selector: status
    params: {}
- name: S2PI_TransferFrame
  endpoint:
    path: /s2pi/transferFrame
    method: POST
    data_selector: status
    params: {}
- name: S2PI_Abort
  endpoint:
    path: /s2pi/abort
    method: POST
    data_selector: status
    params: {}
- name: S2PI_SetIrqCallback
  endpoint:
    path: /s2pi/setIrqCallback
    method: POST
    data_selector: status
    params: {}
- name: S2PI_ReadIrqPin
  endpoint:
    path: /s2pi/readIrqPin
    method: GET
    data_selector: uint32_t
    params: {}
- name: S2PI_CycleCsPin
  endpoint:
    path: /s2pi/cycleCsPin
    method: GET
    data_selector: status
    params: {}
- name: S2PI_CaptureGpioControl
  endpoint:
    path: /s2pi/captureGpioControl
    method: POST
    data_selector: status
    params: {}
- name: S2PI_ReleaseGpioControl
  endpoint:
    path: /s2pi/releaseGpioControl
    method: POST
    data_selector: status
    params: {}
- name: S2PI_WriteGpioPin
  endpoint:
    path: /s2pi/writeGpioPin
    method: POST
    data_selector: status
    params: {}
- name: S2PI_ReadGpioPin
  endpoint:
    path: /s2pi/readGpioPin
    method: GET
    data_selector: uint32_t
    params: {}
- name: transfer_frame
  endpoint:
    path: /s2pi/transfer_frame
    method: POST
    data_selector: status
    params: {}
- name: gpio_control
  endpoint:
    path: /s2pi/gpio_control
    method: POST
    data_selector: status
    params: {}
- name: Timer_GetCounterValue
  endpoint:
    path: /Timer_GetCounterValue
    method: GET
    data_selector: lifetime counter value
- name: Timer_SetCallback
  endpoint:
    path: /Timer_SetCallback
    method: POST
    data_selector: callback function
- name: Timer_SetInterval
  endpoint:
    path: /Timer_SetInterval
    method: POST
    data_selector: interval settings
- name: SetIrqCallback
  endpoint:
    path: /S2PI_SetIrqCallback
    method: GET
    data_selector: status
    params: {}
- name: TransferFrame
  endpoint:
    path: /S2PI_TransferFrame
    method: GET
    data_selector: status
    params: {}
- name: TryGetMutex
  endpoint:
    path: /S2PI_TryGetMutex
    method: GET
    data_selector: status
    params: {}
- name: WriteGpioPin
  endpoint:
    path: /S2PI_WriteGpioPin
    method: GET
    data_selector: status
    params: {}
- name: Timer
  endpoint:
    path: /Timer
    method: GET
    data_selector: TimerInfo
- name: SetCalibrationGlobalRangeOffsets
  endpoint:
    path: /set/calibration/global/range/offsets
    method: POST
    data_selector: status
- name: GetCalibrationGlobalRangeOffsets
  endpoint:
    path: /get/calibration/global/range/offsets
    method: GET
    data_selector: status
- name: SetCalibrationPixelRangeOffsets
  endpoint:
    path: /set/calibration/pixel/range/offsets
    method: POST
    data_selector: status
- name: GetCalibrationPixelRangeOffsets
  endpoint:
    path: /get/calibration/pixel/range/offsets
    method: GET
    data_selector: status
- name: ResetCalibrationPixelRangeOffsets
  endpoint:
    path: /reset/calibration/pixel/range/offsets
    method: POST
    data_selector: status
- name: SetCalibrationCrosstalkPixel2Pixel
  endpoint:
    path: /set/calibration/crosstalk/pixel2pixel
    method: POST
    data_selector: status
- name: GetCalibrationCrosstalkPixel2Pixel
  endpoint:
    path: /get/calibration/crosstalk/pixel2pixel
    method: GET
    data_selector: status
- name: SetCalibrationCrosstalkVectorTable
  endpoint:
    path: /set/calibration/crosstalk/vector/table
    method: POST
    data_selector: status
- name: GetCalibrationCrosstalkVectorTable
  endpoint:
    path: /get/calibration/crosstalk/vector/table
    method: GET
    data_selector: status
- name: ResetCalibrationCrosstalkVectorTable
  endpoint:
    path: /reset/calibration/crosstalk/vector/table
    method: POST
    data_selector: status
- name: ClearUserCalibration
  endpoint:
    path: /clear/user/calibration
    method: POST
    data_selector: status
- name: Argus_ClearUserCalibration
  endpoint:
    path: /Argus_ClearUserCalibration
    method: POST
    data_selector: status
    params: {}
- name: Argus_GetCalibrationCrosstalkPixel2Pixel
  endpoint:
    path: /Argus_GetCalibrationCrosstalkPixel2Pixel
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold
  endpoint:
    path: /Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationCrosstalkSequenceSampleTime
  endpoint:
    path: /Argus_GetCalibrationCrosstalkSequenceSampleTime
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationCrosstalkVectorTable
  endpoint:
    path: /Argus_GetCalibrationCrosstalkVectorTable
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationGlobalRangeOffsets
  endpoint:
    path: /Argus_GetCalibrationGlobalRangeOffsets
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationGoldenPixel
  endpoint:
    path: /Argus_GetCalibrationGoldenPixel
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationPixelRangeOffsets
  endpoint:
    path: /Argus_GetCalibrationPixelRangeOffsets
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationRangeOffsetSequenceSampleTime
  endpoint:
    path: /Argus_GetCalibrationRangeOffsetSequenceSampleTime
    method: GET
    data_selector: status
    params: {}
- name: Argus_ClearUserCalibration
  endpoint:
    path: /Argus_ClearUserCalibration
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationCrosstalkPixel2Pixel
  endpoint:
    path: /Argus_GetCalibrationCrosstalkPixel2Pixel
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold
  endpoint:
    path: /Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationCrosstalkSequenceSampleTime
  endpoint:
    path: /Argus_GetCalibrationCrosstalkSequenceSampleTime
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationCrosstalkVectorTable
  endpoint:
    path: /Argus_GetCalibrationCrosstalkVectorTable
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationGlobalRangeOffsets
  endpoint:
    path: /Argus_GetCalibrationGlobalRangeOffsets
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationGoldenPixel
  endpoint:
    path: /Argus_GetCalibrationGoldenPixel
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationPixelRangeOffsets
  endpoint:
    path: /Argus_GetCalibrationPixelRangeOffsets
    method: GET
    data_selector: status
    params: {}
- name: Argus_GetCalibrationRangeOffsetSequenceSampleTime
  endpoint:
    path: /Argus_GetCalibrationRangeOffsetSequenceSampleTime
    method: GET
    data_selector: status
    params: {}
- name: crosstalk_vector_table
  endpoint:
    path: /api/crosstalk_vector_table
    method: GET
    data_selector: crosstalk
    params: {}
- name: pixel_range_offsets
  endpoint:
    path: /api/pixel_range_offsets
    method: GET
    data_selector: offsets
    params: {}
- name: GetCrosstalkVectorTable
  endpoint:
    path: /Argus/GetCrosstalkVectorTable
    method: GET
- name: GetPixelRangeOffsets
  endpoint:
    path: /Argus/GetPixelRangeOffsets
    method: GET
- name: ResetCalibrationCrosstalkVectorTable
  endpoint:
    path: /Argus/ResetCalibrationCrosstalkVectorTable
    method: POST
- name: ResetCalibrationPixelRangeOffsets
  endpoint:
    path: /Argus/ResetCalibrationPixelRangeOffsets
    method: POST
- name: SetCalibrationCrosstalkPixel2Pixel
  endpoint:
    path: /Argus/SetCalibrationCrosstalkPixel2Pixel
    method: POST
- name: SetCalibrationCrosstalkSequenceAmplitudeThreshold
  endpoint:
    path: /Argus/SetCalibrationCrosstalkSequenceAmplitudeThreshold
    method: POST
- name: SetCalibrationCrosstalkSequenceSampleTime
  endpoint:
    path: /Argus/SetCalibrationCrosstalkSequenceSampleTime
    method: POST
- name: SetCalibrationCrosstalkVectorTable
  endpoint:
    path: /Argus/SetCalibrationCrosstalkVectorTable
    method: POST
- name: SetCalibrationGlobalRangeOffsets
  endpoint:
    path: /Argus/SetCalibrationGlobalRangeOffsets
    method: POST
- name: SetCalibrationPixelRangeOffsets
  endpoint:
    path: /Argus/SetCalibrationPixelRangeOffsets
    method: POST
- name: SetCalibrationRangeOffsetSequenceSampleTime
  endpoint:
    path: /Argus/SetCalibrationRangeOffsetSequenceSampleTime
    method: POST
- name: GetDefaultMeasurementMode
  endpoint:
    path: /argus/GetDefaultMeasurementMode
    method: GET
    data_selector: mode
- name: SetMeasurementMode
  endpoint:
    path: /argus/SetMeasurementMode
    method: POST
    data_selector: status
- name: ResetMeasurementMode
  endpoint:
    path: /argus/ResetMeasurementMode
    method: POST
    data_selector: status
- name: GetMeasurementMode
  endpoint:
    path: /argus/GetMeasurementMode
    method: GET
    data_selector: mode
- name: SetConfigurationFrameTime
  endpoint:
    path: /argus/SetConfigurationFrameTime
    method: POST
    data_selector: status
- name: GetConfigurationFrameTime
  endpoint:
    path: /argus/GetConfigurationFrameTime
    method: GET
    data_selector: value
- name: SetConfigurationSmartPowerSaveEnabled
  endpoint:
    path: /argus/SetConfigurationSmartPowerSaveEnabled
    method: POST
    data_selector: status
- name: GetConfigurationSmartPowerSaveEnabled
  endpoint:
    path: /argus/GetConfigurationSmartPowerSaveEnabled
    method: GET
    data_selector: value
- name: SetConfigurationDFMMode
  endpoint:
    path: /argus/SetConfigurationDFMMode
    method: POST
    data_selector: status
- name: GetConfigurationDFMMode
  endpoint:
    path: /argus/GetConfigurationDFMMode
    method: GET
    data_selector: value
- name: SetConfigurationShotNoiseMonitorMode
  endpoint:
    path: /argus/SetConfigurationShotNoiseMonitorMode
    method: POST
    data_selector: status
- name: GetConfigurationShotNoiseMonitorMode
  endpoint:
    path: /argus/GetConfigurationShotNoiseMonitorMode
    method: GET
    data_selector: value
- name: SetConfigurationCrosstalkMonitorMode
  endpoint:
    path: /argus/SetConfigurationCrosstalkMonitorMode
    method: POST
    data_selector: status
- name: GetConfigurationCrosstalkMonitorMode
  endpoint:
    path: /argus/GetConfigurationCrosstalkMonitorMode
    method: GET
    data_selector: value
- name: SetConfigurationDynamicAdaption
  endpoint:
    path: /argus/SetConfigurationDynamicAdaption
    method: POST
    data_selector: status
- name: GetConfigurationDynamicAdaption
  endpoint:
    path: /argus/GetConfigurationDynamicAdaption
    method: GET
    data_selector: value
- name: SetConfigurationPixelBinning
  endpoint:
    path: /argus/SetConfigurationPixelBinning
    method: POST
    data_selector: status
- name: GetConfigurationPixelBinning
  endpoint:
    path: /argus/GetConfigurationPixelBinning
    method: GET
    data_selector: value
- name: GetConfigurationUnambiguousRange
  endpoint:
    path: /argus/GetConfigurationUnambiguousRange
    method: GET
    data_selector: range_mm
- name: Crosstalk Monitor Mode
  endpoint:
    path: /Argus_GetConfigurationCrosstalkMonitorMode
    method: GET
    data_selector: value
- name: Dual Frequency Mode
  endpoint:
    path: /Argus_GetConfigurationDFMMode
    method: GET
    data_selector: value
- name: Dynamic Adaption
  endpoint:
    path: /Argus_GetConfigurationDynamicAdaption
    method: GET
    data_selector: value
- name: Frame Time
  endpoint:
    path: /Argus_GetConfigurationFrameTime
    method: GET
    data_selector: value
- name: Pixel Binning
  endpoint:
    path: /Argus_GetConfigurationPixelBinning
    method: GET
    data_selector: value
- name: Shot Noise Monitor Mode
  endpoint:
    path: /Argus_GetConfigurationShotNoiseMonitorMode
    method: GET
    data_selector: value
- name: Smart Power Save Enabled
  endpoint:
    path: /Argus_GetConfigurationSmartPowerSaveEnabled
    method: GET
    data_selector: value
- name: Unambiguous Range
  endpoint:
    path: /Argus_GetConfigurationUnambiguousRange
    method: GET
    data_selector: range_mm
- name: Default Measurement Mode
  endpoint:
    path: /Argus_GetDefaultMeasurementMode
    method: GET
    data_selector: mode
- name: Measurement Mode
  endpoint:
    path: /Argus_GetMeasurementMode
    method: GET
    data_selector: mode
- name: Reset Measurement Mode
  endpoint:
    path: /Argus_ResetMeasurementMode
    method: POST
    data_selector: status
- name: Set Crosstalk Monitor Mode
  endpoint:
    path: /Argus_SetConfigurationCrosstalkMonitorMode
    method: POST
    data_selector: status
- name: Set DFM Mode
  endpoint:
    path: /Argus_SetConfigurationDFMMode
    method: POST
    data_selector: status
- name: Set Dynamic Adaption
  endpoint:
    path: /Argus_SetConfigurationDynamicAdaption
    method: POST
    data_selector: status
- name: SetConfigurationFrameTime
  endpoint:
    path: /Argus/SetConfigurationFrameTime
    method: POST
    data_selector: status
- name: SetConfigurationPixelBinning
  endpoint:
    path: /Argus/SetConfigurationPixelBinning
    method: POST
    data_selector: status
- name: SetConfigurationShotNoiseMonitorMode
  endpoint:
    path: /Argus/SetConfigurationShotNoiseMonitorMode
    method: POST
    data_selector: status
- name: SetConfigurationSmartPowerSaveEnabled
  endpoint:
    path: /Argus/SetConfigurationSmartPowerSaveEnabled
    method: POST
    data_selector: status
- name: SetMeasurementMode
  endpoint:
    path: /Argus/SetMeasurementMode
    method: POST
    data_selector: status
- name: Crosstalk Monitor Mode
  endpoint:
    path: Argus_GetConfigurationCrosstalkMonitorMode
    method: GET
    data_selector: value
- name: Dual Frequency Mode
  endpoint:
    path: Argus_GetConfigurationDFMMode
    method: GET
    data_selector: value
- name: Dynamic Adaption
  endpoint:
    path: Argus_GetConfigurationDynamicAdaption
    method: GET
    data_selector: value
- name: Frame Time
  endpoint:
    path: Argus_GetConfigurationFrameTime
    method: GET
    data_selector: value
- name: Pixel Binning
  endpoint:
    path: Argus_GetConfigurationPixelBinning
    method: GET
    data_selector: value
- name: Shot Noise Monitor Mode
  endpoint:
    path: Argus_GetConfigurationShotNoiseMonitorMode
    method: GET
    data_selector: value
- name: Smart Power Save
  endpoint:
    path: Argus_GetConfigurationSmartPowerSaveEnabled
    method: GET
    data_selector: value
- name: Unambiguous Range
  endpoint:
    path: Argus_GetConfigurationUnambiguousRange
    method: GET
    data_selector: range_mm
- name: Default Measurement Mode
  endpoint:
    path: Argus_GetDefaultMeasurementMode
    method: GET
    data_selector: mode
- name: Measurement Mode
  endpoint:
    path: Argus_GetMeasurementMode
    method: GET
    data_selector: mode
- name: Reset Measurement Mode
  endpoint:
    path: Argus_ResetMeasurementMode
    method: POST
- name: Set Crosstalk Monitor Mode
  endpoint:
    path: Argus_SetConfigurationCrosstalkMonitorMode
    method: POST
    data_selector: value
- name: Set Dual Frequency Mode
  endpoint:
    path: Argus_SetConfigurationDFMMode
    method: POST
    data_selector: value
- name: Set Dynamic Adaption
  endpoint:
    path: Argus_SetConfigurationDynamicAdaption
    method: POST
    data_selector: value
- name: ARGUS_CFG_DCA_ATH_MAX
  endpoint:
    path: /define/ARGUS_CFG_DCA_ATH_MAX
    method: GET
    data_selector: value
    params: {}
- name: ARGUS_CFG_DCA_ATH_MIN
  endpoint:
    path: /define/ARGUS_CFG_DCA_ATH_MIN
    method: GET
    data_selector: value
    params: {}
- name: ARGUS_CFG_DCA_DEPTH_MAX
  endpoint:
    path: /define/ARGUS_CFG_DCA_DEPTH_MAX
    method: GET
    data_selector: value
    params: {}
- name: ARGUS_CFG_DCA_DEPTH_MIN
  endpoint:
    path: /define/ARGUS_CFG_DCA_DEPTH_MIN
    method: GET
    data_selector: value
    params: {}
- name: ARGUS_CFG_DCA_PXTH_MAX
  endpoint:
    path: /define/ARGUS_CFG_DCA_PXTH_MAX
    method: GET
    data_selector: value
    params: {}
- name: ARGUS_CFG_DCA_PXTH_MIN
  endpoint:
    path: /define/ARGUS_CFG_DCA_PXTH_MIN
    method: GET
    data_selector: value
    params: {}
- name: ARGUS_DCA_GAIN_STAGE_COUNT
  endpoint:
    path: /define/ARGUS_DCA_GAIN_STAGE_COUNT
    method: GET
    data_selector: value
    params: {}
- name: ARGUS_DCA_POWER_STAGE_COUNT
  endpoint:
    path: /define/ARGUS_DCA_POWER_STAGE_COUNT
    method: GET
    data_selector: value
    params: {}
- name: Pixel Channel Mapping
  endpoint:
    path: /services/data/v1.6/pixel_channel_mapping
    method: GET
    data_selector: records
- name: ARGUS_PIXELS_X
  endpoint:
    path: /define/ARGUS_PIXELS_X
    method: GET
- name: ARGUS_PIXELS_Y
  endpoint:
    path: /define/ARGUS_PIXELS_Y
    method: GET
- name: ARGUS_PIXELS_X
  endpoint:
    path: /define/ARGUS_PIXELS_X
    method: GET
    data_selector: value
- name: ARGUS_PIXELS_Y
  endpoint:
    path: /define/ARGUS_PIXELS_Y
    method: GET
    data_selector: value
- name: CHANNEL_COUNT
  endpoint:
    path: /define/CHANNEL_COUNT
    method: GET
    data_selector: value
- name: Measurement/Device Control
  endpoint:
    path: /api/measurement_device_control
    method: GET
    data_selector: measurements
    params: {}
- name: Argus_Abort
  endpoint:
    path: /api/Argus_Abort
    method: POST
    data_selector: status
    params: {}
- name: Argus_EvaluateData
  endpoint:
    path: /api/Argus_EvaluateData
    method: POST
    data_selector: status
    params: {}
- name: Argus_EvaluateDataDebug
  endpoint:
    path: /api/Argus_EvaluateDataDebug
    method: POST
    data_selector: status
    params: {}
- name: Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence
  endpoint:
    path: /api/Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence
    method: POST
    data_selector: status
    params: {}
- name: Argus_ExecuteRelativeRangeOffsetCalibrationSequence
  endpoint:
    path: /api/Argus_ExecuteRelativeRangeOffsetCalibrationSequence
    method: POST
    data_selector: status
    params: {}
- name: Argus_ExecuteXtalkCalibrationSequence
  endpoint:
    path: /api/Argus_ExecuteXtalkCalibrationSequence
    method: POST
    data_selector: status
    params: {}
- name: GetStatus
  endpoint:
    path: Argus_GetStatus
    method: GET
    data_selector: status
- name: IsDataEvaluationPending
  endpoint:
    path: Argus_IsDataEvaluationPending
    method: GET
    data_selector: evaluation_pending
- name: IsTimerMeasurementActive
  endpoint:
    path: Argus_IsTimerMeasurementActive
    method: GET
    data_selector: timer_active
- name: Ping
  endpoint:
    path: Argus_Ping
    method: GET
    data_selector: ping_status
- name: StartMeasurementTimer
  endpoint:
    path: Argus_StartMeasurementTimer
    method: POST
    data_selector: measurement_status
- name: StartTeachInMode
  endpoint:
    path: Argus_StartTeachInMode
    method: POST
    data_selector: teach_in_status
- name: StopMeasurementTimer
  endpoint:
    path: Argus_StopMeasurementTimer
    method: POST
    data_selector: stop_measurement_status
- name: StopTeachInMode
  endpoint:
    path: Argus_StopTeachInMode
    method: POST
    data_selector: stop_teach_in_status
- name: measurement
  endpoint:
    path: /argus/measurement
    method: POST
    data_selector: status
    params: {}
- name: Pixel Binning Algorithm
  endpoint:
    path: /pba
    method: GET
- name: StartMeasurementTimer
  endpoint:
    path: /group/argus/meas/StartMeasurementTimer
    method: GET
    data_selector: status_t
    params: {}
- name: StopMeasurementTimer
  endpoint:
    path: /group/argus/meas/StopMeasurementTimer
    method: GET
    data_selector: status_t
    params: {}
- name: TriggerMeasurement
  endpoint:
    path: /group/argus/meas/TriggerMeasurement
    method: GET
    data_selector: status_t
    params: {}
- name: StartTeachInMode
  endpoint:
    path: /group/argus/meas/StartTeachInMode
    method: GET
    data_selector: status_t
    params: {}
- name: StopTeachInMode
  endpoint:
    path: /group/argus/meas/StopTeachInMode
    method: GET
    data_selector: status_t
    params: {}
- name: IsDataEvaluationPending
  endpoint:
    path: /group/argus/meas/IsDataEvaluationPending
    method: GET
    data_selector: bool
    params: {}
- name: IsTimerMeasurementActive
  endpoint:
    path: /group/argus/meas/IsTimerMeasurementActive
    method: GET
    data_selector: bool
    params: {}
- name: Abort
  endpoint:
    path: /group/argus/meas/Abort
    method: GET
    data_selector: status_t
    params: {}
- name: GetStatus
  endpoint:
    path: /group/argus/meas/GetStatus
    method: GET
    data_selector: status_t
    params: {}
- name: Ping
  endpoint:
    path: /group/argus/meas/Ping
    method: GET
    data_selector: status_t
    params: {}
- name: EvaluateData
  endpoint:
    path: /group/argus/meas/EvaluateData
    method: GET
    data_selector: status_t
    params: {}
- name: EvaluateDataDebug
  endpoint:
    path: /group/argus/meas/EvaluateDataDebug
    method: GET
    data_selector: status_t
    params: {}
- name: ExecuteXtalkCalibrationSequence
  endpoint:
    path: /group/argus/meas/ExecuteXtalkCalibrationSequence
    method: GET
    data_selector: status_t
    params: {}
- name: ExecuteRelativeRangeOffsetCalibrationSequence
  endpoint:
    path: /group/argus/meas/ExecuteRelativeRangeOffsetCalibrationSequence
    method: GET
    data_selector: status_t
    params: {}
- name: ExecuteAbsoluteRangeOffsetCalibrationSequence
  endpoint:
    path: /group/argus/meas/ExecuteAbsoluteRangeOffsetCalibrationSequence
    method: GET
    data_selector: status_t
    params: {}
- name: measurement_data
  endpoint:
    path: /api/measurement/data
    method: GET
    data_selector: results
- name: Argus_Abort
  endpoint:
    path: /argus/abort
    method: POST
    data_selector: status
    params: {}
- name: Argus_EvaluateData
  endpoint:
    path: /argus/evaluate_data
    method: POST
    data_selector: status
    params: {}
- name: Argus_EvaluateDataDebug
  endpoint:
    path: /argus/evaluate_data_debug
    method: POST
    data_selector: status
    params: {}
- name: Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence
  endpoint:
    path: /argus/execute_absolute_range_offset_calibration_sequence
    method: POST
    data_selector: status
    params: {}
- name: Argus_ExecuteRelativeRangeOffsetCalibrationSequence
  endpoint:
    path: /argus/execute_relative_range_offset_calibration_sequence
    method: POST
    data_selector: status
    params: {}
- name: Argus_ExecuteXtalkCalibrationSequence
  endpoint:
    path: /argus/execute_xtalk_calibration_sequence
    method: POST
    data_selector: status
    params: {}
- name: Shot Noise Monitor
  endpoint:
    path: /api/snm
    method: GET
    data_selector: parameters
    params: {}
- name: Argus_GetStatus
  endpoint:
    path: /Argus/GetStatus
    method: GET
    data_selector: status
- name: Argus_IsDataEvaluationPending
  endpoint:
    path: /Argus/IsDataEvaluationPending
    method: GET
    data_selector: evaluation_pending
- name: Argus_IsTimerMeasurementActive
  endpoint:
    path: /Argus/IsTimerMeasurementActive
    method: GET
    data_selector: timer_active
- name: Argus_Ping
  endpoint:
    path: /Argus/Ping
    method: GET
    data_selector: ping_status
- name: Argus_StartMeasurementTimer
  endpoint:
    path: /Argus/StartMeasurementTimer
    method: POST
    data_selector: start_timer
- name: Argus_StartTeachInMode
  endpoint:
    path: /Argus/StartTeachInMode
    method: POST
    data_selector: start_teach_in
- name: Argus_StopMeasurementTimer
  endpoint:
    path: /Argus/StopMeasurementTimer
    method: POST
    data_selector: stop_timer
- name: Argus_StopTeachInMode
  endpoint:
    path: /Argus/StopTeachInMode
    method: POST
    data_selector: stop_teach_in
- name: measurement
  endpoint:
    path: /argus/TriggerMeasurement
    method: POST
    data_selector: status
- name: measurement_data
  endpoint:
    path: /measurement/data
    method: GET
    data_selector: results
    params: {}
- name: AmplitudeMode
  endpoint:
    path: /argus_dca/amplitude_mode
    method: GET
- name: Atarget
  endpoint:
    path: /argus_dca/atarget
    method: GET
- name: AthHigh
  endpoint:
    path: /argus_dca/ath_high
    method: GET
- name: AthLow
  endpoint:
    path: /argus_dca/ath_low
    method: GET
- name: DepthMax
  endpoint:
    path: /argus_dca/depth_max
    method: GET
- name: DepthMin_HighPower
  endpoint:
    path: /argus_dca/depth_min_high_power
    method: GET
- name: DepthMin_LowPower
  endpoint:
    path: /argus_dca/depth_min_low_power
    method: GET
- name: DepthNom
  endpoint:
    path: /argus_dca/depth_nom
    method: GET
- name: DisablePowerSaveInLowPowerStage
  endpoint:
    path: /argus_dca/disable_power_save_low_power_stage
    method: GET
- name: Enabled
  endpoint:
    path: /argus_dca/enabled
    method: GET
- name: GainMax
  endpoint:
    path: /argus_dca/gain_max
    method: GET
- name: GainMin
  endpoint:
    path: /argus_dca/gain_min
    method: GET
- name: GainNom
  endpoint:
    path: /argus_dca/gain_nom
    method: GET
- name: Power
  endpoint:
    path: /argus_dca/power
    method: GET
- name: PowerSavingRatio
  endpoint:
    path: /argus_dca/power_saving_ratio
    method: GET
- name: SatPxThExp
  endpoint:
    path: /argus_dca/sat_px_th_exp
    method: GET
- name: SatPxThLin
  endpoint:
    path: /argus_dca/sat_px_th_lin
    method: GET
- name: SatPxThRst
  endpoint:
    path: /argus_dca/sat_px_th_rst
    method: GET
- name: shot_noise_monitor
  endpoint:
    path: /api/shot_noise_monitor
    method: GET
    data_selector: parameters
- name: argus_cfg_pba_t
  endpoint:
    path: /argus/cfg/pba
    method: GET
    data_selector: settings
    params: {}
- name: argus_cfg_dca_t
  endpoint:
    path: /argus/cfg/dca
    method: GET
    data_selector: parameters
    params: {}
- name: AbsoluteAmplitudeExclusion
  endpoint:
    path: /argus_cfg_pba/AbsoluteAmplitudeExclusion
    method: GET
- name: AbsoluteAmplitudeInclusion
  endpoint:
    path: /argus_cfg_pba/AbsoluteAmplitudeInclusion
    method: GET
- name: AbsoluteDistanceScopeExclusion
  endpoint:
    path: /argus_cfg_pba/AbsoluteDistanceScopeExclusion
    method: GET
- name: AbsoluteDistanceScopeInclusion
  endpoint:
    path: /argus_cfg_pba/AbsoluteDistanceScopeInclusion
    method: GET
- name: AbsoluteMinimumDistanceThreshold
  endpoint:
    path: /argus_cfg_pba/AbsoluteMinimumDistanceThreshold
    method: GET
- name: AveragingMode
  endpoint:
    path: /argus_cfg_pba/AveragingMode
    method: GET
- name: Enabled
  endpoint:
    path: /argus_cfg_pba/Enabled
    method: GET
- name: GoldenPixelOutOfSyncAgeThreshold
  endpoint:
    path: /argus_cfg_pba/GoldenPixelOutOfSyncAgeThreshold
    method: GET
- name: GoldenPixelPriorityAmplitudeExclusion
  endpoint:
    path: /argus_cfg_pba/GoldenPixelPriorityAmplitudeExclusion
    method: GET
- name: GoldenPixelPriorityAmplitudeInclusion
  endpoint:
    path: /argus_cfg_pba/GoldenPixelPriorityAmplitudeInclusion
    method: GET
- name: GoldenPixelSaturationFilterPixelThreshold
  endpoint:
    path: /argus_cfg_pba/GoldenPixelSaturationFilterPixelThreshold
    method: GET
- name: PrefilterMask
  endpoint:
    path: /argus_cfg_pba/PrefilterMask
    method: GET
- name: RelativeAmplitudeExclusion
  endpoint:
    path: /argus_cfg_pba/RelativeAmplitudeExclusion
    method: GET
- name: LowPower
  endpoint:
    path: /argus/lowpower
    method: GET
- name: HighPower
  endpoint:
    path: /argus/highpower
    method: GET
- name: DCA_Power_Stage
  endpoint:
    path: /argus/dca_power_stage
    method: GET
- name: Enabled
  endpoint:
    path: group__argus__cfg__dca__t.html#a7ce7ab1c1f0b93065b812441fdeb487a
- name: SatPxThLin
  endpoint:
    path: structargus__cfg__dca__t.html#ab11dcd89f98b7629faff9f6389b576c9
- name: SatPxThExp
  endpoint:
    path: structargus__cfg__dca__t.html#ae97dae6ab6665545d70ea90f176d2dae
- name: SatPxThRst
  endpoint:
    path: structargus__cfg__dca__t.html#a17c6d600a267ac7bf9eab091a430fd0f
- name: Atarget
  endpoint:
    path: structargus__cfg__dca__t.html#aaa8a6b9deabce8d1f6c23521545671e0
- name: AthLow
  endpoint:
    path: structargus__cfg__dca__t.html#ab4389df420746c4189b721b4774fd8f8
- name: AthHigh
  endpoint:
    path: structargus__cfg__dca__t.html#a61a15fe1d4975e829b89b968268cc31a
- name: AmplitudeMode
  endpoint:
    path: structargus__cfg__dca__t.html#af19edb2c33ed1564b8e7513c656b3304
- name: Power
  endpoint:
    path: structargus__cfg__dca__t.html#af366e7ba3e2c4a7ae80fdaef5f993aa3
- name: DepthNom
  endpoint:
    path: structargus__cfg__dca__t.html#a089916ee1563d6d5b1161de79a97675a
- name: DepthMin_LowPower
  endpoint:
    path: structargus__cfg__dca__t.html#a6c7bd38c83fe15181abc26ea82fff940
- name: DepthMin_HighPower
  endpoint:
    path: structargus__cfg__dca__t.html#a0cf54b45b887f40451d8851d0faa8532
- name: DepthMax
  endpoint:
    path: structargus__cfg__dca__t.html#ac2a96cf9c3d20c12da8d46fcb34abf50
- name: GainNom
  endpoint:
    path: structargus__cfg__dca__t.html#af2c2305d2d4b9d20885b12db2407d817
- name: GainMin
  endpoint:
    path: structargus__cfg__dca__t.html#acac44d7912bd6112ae8120810176ddf7
- name: GainMax
  endpoint:
    path: structargus__cfg__dca__t.html#a7f815d2cd78eb2327764c12504894d26
- name: PowerSavingRatio
  endpoint:
    path: structargus__cfg__dca__t.html#acc776da7a4920d53f4e19035435b2c89
- name: DisablePowerSaveInLowPowerStage
  endpoint:
    path: structargus__cfg__dca__t.html#a5622d96cdb5230d51e33e5b1a2bc4c17
- name: argus_cal_optical_p2pxtalk_t
  endpoint:
    path: /argus/calibration/optical_p2pxtalk
    method: GET
    data_selector: parameters
- name: AbsoluteAmplitudeExclusion
  endpoint:
    path: /argus_cfg_pba/AbsoluteAmplitudeExclusion
    method: GET
- name: AbsoluteAmplitudeInclusion
  endpoint:
    path: /argus_cfg_pba/AbsoluteAmplitudeInclusion
    method: GET
- name: AbsoluteDistanceScopeExclusion
  endpoint:
    path: /argus_cfg_pba/AbsoluteDistanceScopeExclusion
    method: GET
- name: AbsoluteDistanceScopeInclusion
  endpoint:
    path: /argus_cfg_pba/AbsoluteDistanceScopeInclusion
    method: GET
- name: AbsoluteMinimumDistanceThreshold
  endpoint:
    path: /argus_cfg_pba/AbsoluteMinimumDistanceThreshold
    method: GET
- name: AveragingMode
  endpoint:
    path: /argus_cfg_pba/AveragingMode
    method: GET
- name: Enabled
  endpoint:
    path: /argus_cfg_pba/Enabled
    method: GET
- name: GoldenPixelOutOfSyncAgeThreshold
  endpoint:
    path: /argus_cfg_pba/GoldenPixelOutOfSyncAgeThreshold
    method: GET
- name: GoldenPixelPriorityAmplitudeExclusion
  endpoint:
    path: /argus_cfg_pba/GoldenPixelPriorityAmplitudeExclusion
    method: GET
- name: GoldenPixelPriorityAmplitudeInclusion
  endpoint:
    path: /argus_cfg_pba/GoldenPixelPriorityAmplitudeInclusion
    method: GET
- name: GoldenPixelSaturationFilterPixelThreshold
  endpoint:
    path: /argus_cfg_pba/GoldenPixelSaturationFilterPixelThreshold
    method: GET
- name: PrefilterMask
  endpoint:
    path: /argus_cfg_pba/PrefilterMask
    method: GET
- name: RelativeAmplitudeExclusion
  endpoint:
    path: /argus_cfg_pba/RelativeAmplitudeExclusion
    method: GET
- name: measurement_results
  endpoint:
    path: /api/measurement_results
    method: GET
    data_selector: results
- name: argus_cal_offset_table_t
  endpoint:
    path: argus_cal_offset_table_t
    method: GET
- name: measurement_results
  endpoint:
    path: /measurement/results
    method: GET
    data_selector: results
    params: {}
- name: device_info
  endpoint:
    path: /device/info
    method: GET
    data_selector: info
    params: {}
- name: xtalk_t
  endpoint:
    path: /argus_xtalk.h
    method: GET
    data_selector: Pixel Crosstalk Compensation Vector
    params: {}
- name: argus_cal_xtalk_table_t
  endpoint:
    path: /argus/cal/xtalk
    method: GET
    data_selector: crosstalk
- name: measurement_results
  endpoint:
    path: /measurement/results
    method: GET
    data_selector: results
- name: device_info
  endpoint:
    path: /device/info
    method: GET
    data_selector: info
- name: argus_cal_electrical_p2pxtalk_t
  endpoint:
    path: /argus/cal/electrical/p2pxtalk
    method: GET
    data_selector: parameters
- name: results
  endpoint:
    path: /results
    method: GET
    data_selector: measurements
    params: {}
- name: device_info
  endpoint:
    path: /device_info
    method: GET
    data_selector: device
    params: {}
- name: argus_cal_optical_p2pxtalk_t
  endpoint:
    path: /argus/calibration/optical_p2pxtalk
    method: GET
    data_selector: parameters
- name: measurement_results
  endpoint:
    path: /measurements/results
    method: GET
    data_selector: results
- name: device_info
  endpoint:
    path: /devices/info
    method: GET
    data_selector: info
- name: argus_cal_p2pxtalk_t
  endpoint:
    path: /argus/calibration/p2pxtalk
    method: GET
    data_selector: parameters
    params: {}
- name: argus_results
  endpoint:
    path: /argus/results
    method: GET
    data_selector: results
- name: device_info
  endpoint:
    path: /argus/device_info
    method: GET
    data_selector: device_info
- name: argus_results
  endpoint:
    path: /argus/results
    method: GET
    data_selector: data
- name: argus_debug_results
  endpoint:
    path: /argus/debug/results
    method: GET
    data_selector: debug_data
- name: measurement_results
  endpoint:
    path: /measurement/results
    method: GET
    data_selector: results
- name: device_info
  endpoint:
    path: /device/info
    method: GET
    data_selector: info
- name: argus_results
  endpoint:
    path: /argus/results
    method: GET
    data_selector: res_arr
- name: argus_measurement
  endpoint:
    path: /argus/measurement
    method: POST
    data_selector: res
- name: argus_results
  endpoint:
    path: /argus/results
    method: GET
    data_selector: res
- name: device_info
  endpoint:
    path: /argus/device/info
    method: GET
    data_selector: device
- name: argus_results_t
  endpoint:
    path: /argus/results
    method: GET
    data_selector: data
- name: measurement_results
  endpoint:
    path: /api/v1/measurement/results
    method: GET
    data_selector: results
- name: device_info
  endpoint:
    path: /api/v1/device/info
    method: GET
    data_selector: info
- name: HAL Self Test
  endpoint:
    path: /argus/hal/test
    method: GET
- name: measurement_results
  endpoint:
    path: /api/measurement_results
    method: GET
    data_selector: results
- name: device_info
  endpoint:
    path: /api/device_info
    method: GET
    data_selector: devices
- name: device_instance
  endpoint:
    path: /initialize_device
    method: POST
    data_selector: results
- name: measurement_cycle
  endpoint:
    path: /trigger_measurement
    method: POST
    data_selector: results
- name: S2PI_GetStatus
  endpoint:
    path: /s2pi/getStatus
    method: GET
    data_selector: status
- name: S2PI_TransferFrame
  endpoint:
    path: /s2pi/transferFrame
    method: POST
    data_selector: status
- name: S2PI_ReleaseMutex
  endpoint:
    path: /s2pi/releaseMutex
    method: POST
    data_selector: status
- name: S2PI_Abort
  endpoint:
    path: /s2pi/abort
    method: POST
    data_selector: status
- name: S2PI_SetIrqCallback
  endpoint:
    path: /s2pi/setIrqCallback
    method: POST
    data_selector: status
- name: S2PI_ReadIrqPin
  endpoint:
    path: /s2pi/readIrqPin
    method: GET
    data_selector: irqStatus
- name: S2PI_CycleCsPin
  endpoint:
    path: /s2pi/cycleCsPin
    method: POST
    data_selector: status
- name: S2PI_CaptureGpioControl
  endpoint:
    path: /s2pi/captureGpioControl
    method: POST
    data_selector: status
- name: S2PI_ReleaseGpioControl
  endpoint:
    path: /s2pi/releaseGpioControl
    method: POST
    data_selector: status
- name: S2PI_WriteGpioPin
  endpoint:
    path: /s2pi/writeGpioPin
    method: POST
    data_selector: status
- name: S2PI_ReadGpioPin
  endpoint:
    path: /s2pi/readGpioPin
    method: GET
    data_selector: value
- name: device_info
  endpoint:
    path: /api/device/info
    method: GET
    data_selector: device_info
    params: {}
- name: measurement_results
  endpoint:
    path: /api/measurement/results
    method: POST
    data_selector: results
    params: {}
- name: measurement_results
  endpoint:
    path: /api/v1/results
    method: GET
    data_selector: data
    params: {}
- name: device_info
  endpoint:
    path: /api/v1/devices
    method: GET
    data_selector: data
    params: {}
- name: argus_results
  endpoint:
    path: /argus/results
    method: GET
    data_selector: res_arr
- name: argus_measurement
  endpoint:
    path: /argus/measurement
    method: POST
    data_selector: measurement_data
- name: argus_results_t
  endpoint:
    path: /argus_results_t
    method: GET
    data_selector: results
- name: Auxiliary
  endpoint:
    data_selector: argus_results_t::Auxiliary
- name: Bin
  endpoint:
    data_selector: argus_results_t::Bin
- name: Frame
  endpoint:
    data_selector: argus_results_t::Frame
- name: Pixel
  endpoint:
    data_selector: argus_results_t::Pixel
- name: Pixels
  endpoint:
    data_selector: argus_results_t::Pixels
- name: Status
  endpoint:
    data_selector: argus_results_t::Status
- name: TimeStamp
  endpoint:
    data_selector: argus_results_t::TimeStamp
- name: Debug
  endpoint:
    data_selector: argus_results_t::Debug
- name: Argus_EvaluateData
  endpoint:
    path: /EvalData
    method: GET
    data_selector: result
    params: {}
- name: Argus_EvaluateDataDebug
  endpoint:
    path: /EvalDataDebug
    method: GET
    data_selector: result
    params: {}
- name: Argus_ExecuteXtalkCalibrationSequence
  endpoint:
    path: /XtalkCalibration
    method: POST
    data_selector: status
    params: {}
- name: Argus_ExecuteRelativeRangeOffsetCalibrationSequence
  endpoint:
    path: /RelativeRangeOffsetCalibration
    method: POST
    data_selector: status
    params: {}
- name: Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence
  endpoint:
    path: /AbsoluteRangeOffsetCalibration
    method: POST
    data_selector: status
    params: {}
- name: Argus_GetDefaultMeasurementMode
  endpoint:
    path: /GetDefaultMeasurementMode
    method: GET
    data_selector: mode
    params: {}
- name: Argus_SetMeasurementMode
  endpoint:
    path: /SetMeasurementMode
    method: POST
    data_selector: status
    params: {}
- name: Argus_ResetMeasurementMode
  endpoint:
    path: /ResetMeasurementMode
    method: POST
    data_selector: status
    params: {}
- name: Argus_GetMeasurementMode
  endpoint:
    path: /GetMeasurementMode
    method: GET
    data_selector: mode
    params: {}
- name: Argus_SetConfigurationFrameTime
  endpoint:
    path: /SetConfigurationFrameTime
    method: POST
    data_selector: status
    params: {}
- name: Argus_GetConfigurationFrameTime
  endpoint:
    path: /GetConfigurationFrameTime
    method: GET
    data_selector: value
    params: {}
- name: Argus_SetConfigurationSmartPowerSaveEnabled
  endpoint:
    path: /SetConfigurationSmartPowerSaveEnabled
    method: POST
    data_selector: status
    params: {}
- name: Argus_GetConfigurationSmartPowerSaveEnabled
  endpoint:
    path: /GetConfigurationSmartPowerSaveEnabled
    method: GET
    data_selector: value
    params: {}
- name: Argus_SetConfigurationDFMMode
  endpoint:
    path: /SetConfigurationDFMMode
    method: POST
    data_selector: status
    params: {}
- name: Argus_GetConfigurationDFMMode
  endpoint:
    path: /GetConfigurationDFMMode
    method: GET
    data_selector: value
    params: {}
- name: Argus_SetConfigurationShotNoiseMonitorMode
  endpoint:
    path: /SetConfigurationShotNoiseMonitorMode
    method: POST
    data_selector: status
    params: {}
- name: Argus_GetConfigurationShotNoiseMonitorMode
  endpoint:
    path: /GetConfigurationShotNoiseMonitorMode
    method: GET
    data_selector: value
    params: {}
- name: Argus_SetConfigurationCrosstalkMonitorMode
  endpoint:
    path: /SetConfigurationCrosstalkMonitorMode
    method: POST
    data_selector: status
    params: {}
- name: Argus_GetConfigurationCrosstalkMonitorMode
  endpoint:
    path: /GetConfigurationCrosstalkMonitorMode
    method: GET
    data_selector: value
    params: {}
- name: Argus_SetConfigurationDynamicAdaption
  endpoint:
    path: /SetConfigurationDynamicAdaption
    method: POST
    data_selector: status
    params: {}
- name: Argus_GetConfigurationDynamicAdaption
  endpoint:
    path: /GetConfigurationDynamicAdaption
    method: GET
    data_selector: value
    params: {}
- name: Argus_SetConfigurationPixelBinning
  endpoint:
    path: /SetConfigurationPixelBinning
    method: POST
    data_selector: status
    params: {}
- name: Argus_GetConfigurationPixelBinning
  endpoint:
    path: /GetConfigurationPixelBinning
    method: GET
    data_selector: value
    params: {}
- name: argus_cfg_dca_t
  endpoint:
    path: /argus/api/dca
    method: GET
    data_selector: parameters
    params: {}
- name: S2PI_GetStatus
  endpoint:
    path: /s2pi/status
    method: GET
    data_selector: status
    params: {}
- name: S2PI_TryGetMutex
  endpoint:
    path: /s2pi/tryGetMutex
    method: GET
    data_selector: status
    params: {}
- name: S2PI_ReleaseMutex
  endpoint:
    path: /s2pi/releaseMutex
    method: GET
    data_selector: status
    params: {}
- name: S2PI_TransferFrame
  endpoint:
    path: /s2pi/transferFrame
    method: GET
    data_selector: status
    params: {}
- name: S2PI_Abort
  endpoint:
    path: /s2pi/abort
    method: GET
    data_selector: status
    params: {}
- name: S2PI_SetIrqCallback
  endpoint:
    path: /s2pi/setIrqCallback
    method: GET
    data_selector: status
    params: {}
- name: S2PI_ReadIrqPin
  endpoint:
    path: /s2pi/readIrqPin
    method: GET
    data_selector: status
    params: {}
- name: S2PI_CycleCsPin
  endpoint:
    path: /s2pi/cycleCsPin
    method: GET
    data_selector: status
    params: {}
- name: S2PI_CaptureGpioControl
  endpoint:
    path: /s2pi/captureGpioControl
    method: GET
    data_selector: status
    params: {}
- name: S2PI_ReleaseGpioControl
  endpoint:
    path: /s2pi/releaseGpioControl
    method: GET
    data_selector: status
    params: {}
- name: S2PI_WriteGpioPin
  endpoint:
    path: /s2pi/writeGpioPin
    method: GET
    data_selector: status
    params: {}
- name: S2PI_ReadGpioPin
  endpoint:
    path: /s2pi/readGpioPin
    method: GET
    data_selector: status
    params: {}
- name: time_functions
  endpoint:
    path: /api/time/functions
    method: GET
    data_selector: functions
    params: {}
- name: IRQ_LOCK
  endpoint:
    path: /argus/IRQ_LOCK
    method: void
    data_selector: null
    params: {}
- name: IRQ_UNLOCK
  endpoint:
    path: /argus/IRQ_UNLOCK
    method: void
    data_selector: null
    params: {}
- name: Argus_EvaluateData
  endpoint:
    path: /group__argus__meas.html#ga2f130afc115837409b99efaaaf5baedf
    method: GET
- name: Argus_EvaluateDataDebug
  endpoint:
    path: /group__argus__meas.html#ga6f20ea0283d90ba59625869eb1b302d8
    method: GET
- name: Argus_ExecuteXtalkCalibrationSequence
  endpoint:
    path: /group__argus__meas.html#gacf958246edbcb6812994ca63c072fe5c
    method: GET
- name: Argus_ExecuteRelativeRangeOffsetCalibrationSequence
  endpoint:
    path: /group__argus__meas.html#gabfbc2d139e090be5e06930814c4bf48e
    method: GET
- name: Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence
  endpoint:
    path: /group__argus__meas.html#ga9ce494f75f6c54e1eebec6e1f0ec89d0
    method: GET
- name: Argus_GetDefaultMeasurementMode
  endpoint:
    path: /group__argus__cfg.html#ga91f7f5de4952604b7babb07275f9d3de
    method: GET
- name: Argus_SetMeasurementMode
  endpoint:
    path: /group__argus__cfg.html#ga7a8b1f2d5ef7af38016e4cdf32bb864a
    method: GET
- name: Argus_ResetMeasurementMode
  endpoint:
    path: /group__argus__cfg.html#ga3848efc6d2629e8e974b8b40833a08ba
    method: GET
- name: Argus_GetMeasurementMode
  endpoint:
    path: /group__argus__cfg.html#ga53012ad46eb4cef690e9f7011ea0c5e5
    method: GET
- name: Argus_SetConfigurationFrameTime
  endpoint:
    path: /group__argus__cfg.html#gaa6d970c42ac21e56907247f58a029472
    method: GET
- name: Argus_GetConfigurationFrameTime
  endpoint:
    path: /group__argus__cfg.html#ga210026e703f70594366957a3414e6fe5
    method: GET
notes:
- The AFBR-S50 Core Library is built and tested using the NXP FRDM-KL46Z development
  platform
- 'Minimum memory requirements: RAM: 8kByte (4kByte Heap + 4kByte Stack), ROM/Flash:
  128 kByte'
- The lifetime counter is mandatory to ensure laser safety within Class 1.
- The periodic interrupt timer is required for autonomous measurements.
- All AFBR-S50 API related functions, definitions and constants have a prefix Argus_
  which is essentially an alias or working title for the AFBR-S50 Time-of-Flight Sensor
  device.
- The AFBR-S50 Reference Board is quite new and thus the corresponding documentation
  and code projects are still under construction and will be periodically updated.
- Memory footprint reduction due to removal of second measurement mode
- New measurement modes allow for frame rates up to 3000 frames per second
- API supports simultaneous usage of multiple devices per microcontroller
- The new API must set the measurement mode as the first change as it reloads the
  default parameters from ROM and overwrites all previous made changes.
- Using the Argus_Init function will load the corresponding default measurement mode.
- This API provides access to Argus measurement and calibration functionalities.
- Please make sure the installation adds a recent version of the Renesas FSP (Flexible
  Software Package).
- In order to observe the values, open a connection via a terminal using 115200 bps,
  8N1, no handshake.
- From SDK version v1.4.4 onwards, the Explorer App is able to connect to multiple
  devices at the same time.
- Uses UART interface for communication
- The start byte is 0x02, stop byte is 0x03, escape byte is 0x1B
- This command can be used to determine the current software version of the connected
  device. However, the command has changed over time, e.g. the build number was added
  to the command for v1.2.0 and newer versions.
- The device responds with an acknowledge before changing the UART baud rate.
- The UART configuration is only available for the STM32F401RE Evaluation Board. The
  board is initialized with 1 Mbps upon reset.
- The address byte is ignored as all devices share the same UART connection. Thus,
  changing the UART baud rate for one device will affect all other device too!
- If a full re-initialization is not desired, refer to the Argus_RestoreDeviceState
  function.
- The test utilizes already the timer HAL in order to implement a rudimentary timeout.
- The test assumes the device is in a fresh power on state and no additional reset
  is required.
- The test locks the interrupts for a quite long period of time in order to simulate
  a delayed GPIO interrupt.
- Uses SPI communication for data transfer.
- Requires specific hardware setup for testing.
- The callback requires a correct implementation for function invocation from interrupt
  context.
- Interactive Xtalk Calibration Procedure CLI.
- This interactive procedure guides through the steps needed to compensate the application
  specific crosstalk (xtalk) using the AFBR-S50 API.
- 'Maximizing the integration energy is automatically done when calling #Argus_ExecuteXtalkCalibrationSequence,
  however, it does not return any pixel which amplitude is above the threshold!'
- The IRQ locking mechanism is used to create atomic sections (within the scope of
  the AFBR-S50 API) that are very few processor instruction only. It does NOT lock
  interrupts for considerable amounts of time.
- The IRQ_LOCK might get called multiple times. Therefore, the API expects that the
  IRQ_UNLOCK must be called as many times as the IRQ_LOCK was called before the interrupts
  are enabled.
- The interrupts utilized by the AFBR-S50 API can be interrupted by other, higher
  prioritized interrupts, e.g. some system critical interrupts.
- GPIO mode is only required to readout the EEPROM upon initialization of the device.
- The implementation of Timer_GetCounterValue function is mandatory for the correct
  execution of the API.
- The implementation of Timer_SetCallback function is optional for the correct execution
  of the API.
- The implementation of this function is optional for the correct execution of the
  API.
- If not implemented, a weak implementation within the API will be used that disable
  the periodic timer callback and thus the automatic starting of measurements from
  the background.
- The implementation of Timer_GetCounterValue is mandatory for the correct execution
  of the API.
- The implementation of Timer_SetCallback is optional for the correct execution of
  the API.
- The relative pixel offset values are meant to be with respect to the average range
  of all pixels, i.e. the average of all relative offsets should be 0!
- Since the range offset calibration is executed twice (once for low and once for
  high laser power stages), the actual calibration time will be twice as long as set
  by the sample time parameter.
- The DFM is an algorithm to extend the unambiguous range of the sensor by utilizing
  two detuned measurement frequencies.
- Starts the timer based measurement cycle asynchronously.
- Stops the timer based measurement cycle.
- Triggers a single measurement frame asynchronously.
- Starts the teach-in measurement mode.
- Stops the teach-in measurement mode.
- Determines whether a data evaluation is pending.
- Determines if the device if active with timer based measurements.
- Checks the state of the device/driver.
- Tests the connection to the device by sending a ping message.
- Triggers a single measurement frame asynchronously if all pre-conditions are met.
- API and library core version number.
- Must be greater than or equal to the RelativeAmplitudeExclusion.
- Must be larger than or equal to the RelativeDistanceScopeInclusion.
- Must be smaller than or equal to the RelativeDistanceScopeExclusion.
- Pixel Crosstalk Compensation Vector
- Pixel-To-Pixel Crosstalk Compensation Parameters.
- The maximum frame rate is limited by the amount of data sent via UART.
- Sending data via UART creates a large delay which might prevent the API from reaching
  the full frame rate.
- The callback is invoked every time a measurement has been finished.
- Do not call the Argus_EvaluateMeasurement method from within the callback since
  it is invoked in an interrupt service routine.
- The API provides functions with debug information printed on a cli.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Provides an interactive crosstalk calibration CLI to the AFBR-S50 API.
- The CRC is calculated on the original data, i.e. 0x43 00 03 0D 40 => 0x85
- Optional Debug Data. If the pointer is set to an argus_results_debug_t data structure
  before passing it to the Argus_EvaluateData function, the data structure is filled
  with internal parameters for debugging purposes.
- The API is designed for high-speed measurements.
- Ensure proper initialization of devices before usage.
- Uses SPI communication for device interaction.
- Timer based measurement is not implemented for multiple instances yet.
- Uses SPI for communication with the device.
- Uses a blocking call for measurement triggering.
- Device initialization is required before usage.
- Ensure to implement proper error handling for device communication
- This API provides measurement data for devices.
- Care must be taken when handling multiple measurements.
- The 0x03 byte must be escaped and inverted (i.e. use 0x1BFC instead of 0x03)
- A series of automated tests can be executed to verify the implementation of the
  HAL required by the API.
- The IRQ locking mechanism is used to create atomic sections within the scope of
  the AFBR-S50 API that are very few processor instruction only.
- The dynamic configuration algorithm enable flags.
- The DCA amplitude evaluation method.
- The dynamic configuration algorithm Optical Output Power stages enumerator.
- The dynamic configuration algorithm Pixel Input Gain stages enumerator.
- State flags for the current frame.
errors:
- set measurement mode failed!
- set DFM failed!
- set smart power save mode failed!
- set frame time failed!
- Invalid data frame received (start or stop byte missing)
- No data was read from the RX line
- 'ERROR_FAIL: The operation failed'
- 'ERROR_ABORTED: The operation was aborted'
- 'ERROR_READ_ONLY: Attempted to write to a read-only resource'
- 'ERROR_OUT_OF_RANGE: Value is out of the allowed range'
- 'ERROR_INVALID_ARGUMENT: An invalid argument was provided'
- 'ERROR_TIMEOUT: The operation timed out'
- 'ERROR_NOT_INITIALIZED: The system is not initialized'
- 'ERROR_NOT_SUPPORTED: The operation is not supported'
- 'ERROR_NOT_IMPLEMENTED: The operation is not implemented'
- 'ERROR_S2PI_RX_ERROR: Receive error on S2PI'
- 'ERROR_S2PI_TX_ERROR: Transmit error on S2PI'
- 'ERROR_S2PI_INVALID_STATE: S2PI is in an invalid state'
- 'ERROR_S2PI_INVALID_BAUDRATE: Invalid baud rate for S2PI'
- 'ERROR_S2PI_INVALID_SLAVE: Invalid slave address for S2PI'
- 'ERROR_NVM_EMPTY: NVM is empty'
- 'ERROR_NVM_OUT_OF_RANGE: NVM operation out of range'
- 'ERROR_ARGUS_NOT_CONNECTED: Not connected to Argus'
- 'ERROR_ARGUS_INVALID_CFG: Invalid configuration for Argus'
- 'ERROR_ARGUS_BUFFER_EMPTY: Argus buffer is empty'
- 'ERROR_ARGUS_INVALID_SLAVE: Invalid slave for Argus'
- 'ERROR_ARGUS_INVALID_MODE: Invalid mode for Argus'
- 'ERROR_ARGUS_BUSY: Argus is busy'
- 'ERROR_ARGUS_UNKNOWN_MODULE: Unknown module in Argus'
- 'ERROR_ARGUS_UNKNOWN_CHIP: Unknown chip in Argus'
- 'ERROR_ARGUS_UNKNOWN_LASER: Unknown laser in Argus'
- 'ERROR_FAIL: Error for generic fail/error.'
- 'ERROR_ABORTED: Error for process aborted by user/external.'
- 'ERROR_READ_ONLY: Error for invalid read only operations.'
- 'ERROR_OUT_OF_RANGE: Error for out of range parameters.'
- 'ERROR_INVALID_ARGUMENT: Error for invalid argument passed to a function.'
- 'ERROR_TIMEOUT: Error for timeout occurred.'
- 'ERROR_NOT_INITIALIZED: Error for not initialized modules.'
- 'ERROR_NOT_SUPPORTED: Error for not supported.'
- 'ERROR_NOT_IMPLEMENTED: Error for yet not implemented functions.'
- 'ERROR_S2PI_RX_ERROR: Error occurred on the Rx line.'
- 'ERROR_S2PI_TX_ERROR: Error occurred on the Tx line.'
- 'ERROR_S2PI_INVALID_STATE: Called a function at a wrong driver state.'
- 'ERROR_S2PI_INVALID_BAUDRATE: The specified baud rate is not valid.'
- 'ERROR_S2PI_INVALID_SLAVE: The specified slave identifier is not valid.'
- 'ERROR_NVM_EMPTY: Flash Error: The read memory block was not written previously
  and contains no data.'
- 'ERROR_NVM_OUT_OF_RANGE: Flash Error: The memory is out of range.'
- 'ERROR_ARGUS_NOT_CONNECTED: AFBR-S50 Error: No device connected. Initial SPI tests
  failed.'
- 'ERROR_ARGUS_INVALID_CFG: AFBR-S50 Error: Inconsistent configuration parameters.'
- 'ERROR_ARGUS_BUFFER_EMPTY: AFBR-S50 Error: The evaluation function has been called
  but no raw data is available yet.'
- 'ERROR_ARGUS_INVALID_SLAVE: AFBR-S50 Error: Invalid slave identifier is passed to
  the module.'
- 'ERROR_ARGUS_INVALID_MODE: AFBR-S50 Error: Invalid measurement mode configuration
  parameter.'
- 'ERROR_ARGUS_BIAS_VOLTAGE_REINIT: AFBR-S50 Error: The APD bias voltage is re-initializing
  due to a dropout.'
- 'ERROR_ARGUS_LASER_MONITOR_INACTIVE: AFBR-S50 Error: The laser safety monitoring
  is currently not active due to a APD bias voltage dropout.'
- 'ERROR_ARGUS_EEPROM_FAILURE: AFBR-S50 Error: The EEPROM readout has failed.'
- 'ERROR_ARGUS_STALLED: AFBR-S50 Error: The measurement signals of all active pixels
  are invalid and thus the 1D range is also invalid and stalled.'
- 'ERROR_ARGUS_BGL_EXCEEDANCE: AFBR-S50 Error: The background light is too bright.'
- 'ERROR_ARGUS_XTALK_AMPLITUDE_EXCEEDANCE: AFBR-S50 Error: The crosstalk vector amplitude
  is too high.'
- 'ERROR_ARGUS_LASER_FAILURE: AFBR-S50 Error: Laser malfunction! Laser Safety may
  not be given!'
- 'ERROR_ARGUS_DATA_INTEGRITY_LOST: AFBR-S50 Error: Register data integrity is lost.'
- 'ERROR_ARGUS_RANGE_OFFSET_CALIBRATION_FAILED: AFBR-S50 Error: The range offsets
  calibration failed!'
- 'ERROR_ARGUS_VSUB_CALIBRATION_FAILED: AFBR-S50 Error: The VSUB calibration failed!'
- 'ERROR_ARGUS_BUSY: AFBR-S50 Error: The device is currently busy and cannot execute
  the requested command.'
- 'ERROR_ARGUS_UNKNOWN_MODULE: AFBR-S50 Error: Unknown module number.'
- 'ERROR_ARGUS_UNKNOWN_CHIP: AFBR-S50 Error: Unknown chip version number.'
- 'ERROR_ARGUS_UNKNOWN_LASER: AFBR-S50 Error: Unknown laser type number.'
- 'ERROR_TIMEOUT: The SPI operation did not finish within a specified time.'
- 'ERROR_FAIL: Check the error log for more information.'
- 'ERROR_TIMEOUT: Check timer HAL implementation.'
- 'ERROR_FAIL: If GPIO test fails.'
- 'ERROR_NOT_IMPLEMENTED: If the PIT functionality is not implemented.'
- 'ERROR_FAIL: If the measured interval does not match the expectations.'
- 'ERROR_TIMEOUT: If the SPI operation did not finish within a specified time.'
- 'STATUS_OK: on success'
- 'ERROR_TIMEOUT: if the operation did not finish within a specified time'
- 'ERROR_FAIL: if the device access failed and the read data did not match the expected
  values'
- 'ERROR_TIMEOUT: Check timer HAL implementation'
- 'ERROR_FAIL: Check GPIO test results'
- 'STATUS_ARGUS_EEPROM_BIT_ERROR: Check Hamming weight results'
- ERROR_TIMEOUT
- ERROR_FAIL
- 'ERROR_TIMEOUT: If the operation did not finish within a specified time.'
- 'ERROR_FAIL: If the device access failed and data did not match expected values.'
- 'ERROR_FAIL: Check the error log for more information'
- 'STATUS_BUSY: another transfer is ongoing'
- 'ERROR_INVALID_ARGUMENT: an invalid parameter has been passed'
- 'ERROR_S2PI_INVALID_SLAVE: a wrong slave identifier is provided'
- 'STATUS_BUSY: An SPI transfer is in progress.'
- 'STATUS_OK: The operation was successful.'
- 'STATUS_BUSY: another transfer is ongoing, the caller must not access the bus'
- 'ERROR_S2PI_INVALID_SLAVE: A wrong slave identifier is provided'
- 'ERROR_INVALID_ARGUMENT: An invalid parameter has been passed'
- 'STATUS_FAIL: Check device initialization or configuration.'
- 'STATUS_OK: Measurement successful.'
- 'ERROR_FAIL: Operation failed.'
- 'ERROR_FAIL: Check the error message for more details.'
- 'STATUS_BUSY: The device is currently busy. Retry later.'
- 'STATUS_OK: Operation completed successfully.'
- 'STATUS_OK: Successful operation'
- 'ERROR_FAIL: Operation failed'
- 'STATUS_ARGUS_POWERLIMIT: Measurement trigger refused due to power limits'
- 'STATUS_BUSY: Measurement is still in progress'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'ERROR_ARGUS_STALLED: Device is stalled, check power and connections.'
- 'ERROR_FAIL: General failure, check device status.'
- 'ERROR_FAIL: A general error occurred.'
- 'ERROR_FAIL: Handle creation failed.'
- 'STATUS_OK: Successful operation.'
- 'STATUS_FAIL: Check the device connections or configurations'
- 'ERROR_FAIL: Check device connection and initialization.'
- 'STATUS_BUSY: Device is currently busy, try again later.'
- 'DEVICE_NOT_FOUND: Check if the device ID is correct'
- 'INVALID_RESPONSE: Ensure the API response is valid JSON'
- 'TIMEOUT: Increase the timeout settings for slower devices'
auth_info:
  mentioned_objects: []
client:
  base_url: C:\Program Files (x86)\Broadcom\AFBR-S50 SDK\Device\Examples\
  headers:
    Accept: application/json
source_metadata: null
