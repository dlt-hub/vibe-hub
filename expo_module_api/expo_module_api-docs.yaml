resources:
- name: privacyManifests
  endpoint:
    path: /guides/apple-privacy
    method: GET
    data_selector: privacyManifests
    params: {}
- name: android.permissions
  endpoint:
    path: /versions/latest/config/app#permissions
    method: GET
    data_selector: permissions
    params: {}
- name: android.blockedPermissions
  endpoint:
    path: /versions/latest/config/app#blockedpermissions
    method: GET
    data_selector: blockedPermissions
    params: {}
- name: ios.infoPlist
  endpoint:
    path: /versions/latest/config/app#infoplist
    method: GET
    data_selector: infoPlist
    params: {}
- name: app_config
  endpoint:
    path: /app.json
    method: GET
    data_selector: scheme
    params: {}
- name: babel_config
  endpoint:
    path: /babel.config.js
    method: GET
    data_selector: presets
    params: {}
- name: create_local_module
  endpoint:
    path: /modules/get-started#create-a-new-module-in-isolation
    method: GET
    data_selector: modules
    params: {}
- name: edit_module_android
  endpoint:
    path: /modules/get-started/#edit-the-module
    method: GET
    data_selector: android
    params: {}
- name: edit_module_ios
  endpoint:
    path: /modules/get-started/#edit-the-module
    method: GET
    data_selector: ios
    params: {}
- name: push_notifications
  endpoint:
    path: /push-notifications
    method: POST
    data_selector: notifications
    params: {}
- name: push_notifications
  endpoint:
    path: /push/send
    method: POST
    data_selector: data
    params: {}
- name: send_notifications
  endpoint:
    path: /--/api/v2/push/send
    method: POST
    data_selector: data
    params: {}
- name: get_receipts
  endpoint:
    path: /--/api/v2/push/getReceipts
    method: POST
    data_selector: data
    params: {}
- name: notification
  endpoint:
    path: /push-notifications/receiving-notifications
    method: GET
    data_selector: notification
    params: {}
- name: deep_linking
  endpoint:
    path: /linking/into-your-app
    method: GET
    data_selector: linking_data
    params: {}
- name: Link
  endpoint:
    path: /router/link
    method: GET
    data_selector: LinkProps
    params: {}
- name: Redirect
  endpoint:
    path: /router/redirect
    method: GET
    data_selector: RedirectProps
    params: {}
- name: sign-in
  endpoint:
    path: /sign-in
    method: GET
    data_selector: session
    params: {}
- name: protected_routes
  endpoint:
    path: /app
    method: GET
    data_selector: session
    params: {}
- name: renderRouter
  endpoint:
    path: /router/renderRouter
    method: GET
    data_selector: docs
    params: {}
- name: create_project
  endpoint:
    path: /get-started/create-a-project
    method: GET
- name: jest
  endpoint:
    path: /jest
    method: GET
    data_selector: records
    params: {}
- name: preview_update
  endpoint:
    path: /eas/update
    method: POST
    data_selector: updates
    params:
      branch: current
- name: production_builds
  endpoint:
    path: /deploy/build-project
    method: GET
    data_selector: builds
    params: {}
- name: apple_app_store_submission
  endpoint:
    path: /deploy/submit-to-app-stores/apple
    method: POST
    data_selector: submission_result
- name: google_play_store_submission
  endpoint:
    path: /deploy/submit-to-app-stores/google
    method: POST
    data_selector: submission_result
- name: send_updates
  endpoint:
    path: /deploy/send-over-the-air-updates
    method: POST
    data_selector: updates
    params:
      channel: production
- name: deploy_web
  endpoint:
    path: /eas/deploy
    method: POST
    data_selector: deployment
    params:
      prod: 'true'
- name: llms
  endpoint:
    path: /llms.txt
    method: GET
- name: llms_full
  endpoint:
    path: /llms-full.txt
    method: GET
- name: llms_eas
  endpoint:
    path: /llms-eas.txt
    method: GET
- name: llms_sdk
  endpoint:
    path: /llms-sdk.txt
    method: GET
- name: llms_sdk_v52
  endpoint:
    path: /llms-sdk-v52.0.0.txt
    method: GET
- name: llms_sdk_v51
  endpoint:
    path: /llms-sdk-v51.0.0.txt
    method: GET
- name: MyFirstExpoModule
  endpoint:
    path: /modules/module-api/#name
    method: GET
    data_selector: records
- name: apple.appDelegateSubscribers
  endpoint:
    path: /modules/module-config
    method: GET
    data_selector: ''
    params: {}
- name: platforms
  endpoint:
    path: /modules/module-config
    method: GET
    data_selector: properties
- name: apple_platform
  endpoint:
    path: /modules/additional-platform-support
    method: GET
    data_selector: platforms
    params: {}
- name: ExpoSettings
  endpoint:
    path: /expo-settings
    method: GET
    data_selector: records
- name: ExpoWebView
  endpoint:
    path: /modules/native-view-tutorial
    method: GET
    data_selector: records
- name: ExpoNativeConfiguration
  endpoint:
    path: /nativeconfiguration
    method: GET
    data_selector: api-key
- name: expo-settings
  endpoint:
    path: /modules/expo-settings
    method: GET
    data_selector: records
    params: {}
- name: ExpoRadialChart
  endpoint:
    path: /modules/expo-radial-chart
    method: GET
    data_selector: records
- name: expo-module.config.json
  endpoint:
    path: /modules/module-config
    method: GET
    data_selector: modules
    params: {}
- name: build.gradle
  endpoint:
    path: /modules/existing-library/#add-the-expo-modules-core-native-dependency
    method: GET
    data_selector: dependencies
    params: {}
- name: MyModule
  endpoint:
    path: /modules/existing-library/#create-a-native-module
    method: GET
    data_selector: modules
    params: {}
notes:
- Expo SDK provides access to device and system functionality such as contacts, camera,
  gyroscope, GPS location, and so on.
- EAS provides deep integration between services, such as the deployments page for
  monitoring app version adoption.
- Avoid importing app.json or app.config.js directly in your JavaScript code, because
  this will import the entire file rather than a processed version of it.
- Prebuild is optional and works seamlessly with all Expo tools and services.
- The convenience change to the scripts field is the only side effect that alters
  how a developer works on their app before/after prebuild.
- Prebuild streamlines CNG processing.
- Cross-platform configurations are handled at the config plugin level.
- Many complex native packages require additional setup beyond installing.
- The only side effect is the config plugin in a project's Expo config.
- Uses Expo CLI to install packages
- Always use npx expo install instead of npm install or yarn add directly
- The information and steps included in this guide are still in development and may
  change due to new tools built for this purpose or new requirements from Apple.
- Permissions must be configured for accessing sensitive information on user's device.
- Configuration is not required when testing projects in the Expo Go app.
- Do not store sensitive info, such as private keys, in EXPO_PUBLIC_ variables. These
  variables will be visible in plain-text in your compiled application.
- Ensure you use babel-preset-expo as the preset, in the babel.config.js file or delete
  the file.
- Adding the Expo Modules API to your app has a negligible impact on your app size,
  it may increase the size by a few hundred kilobytes.
- If you encounter any performance bottlenecks with the Expo Modules API, file an
  issue and we'd be happy to discuss it with you.
- You must reinstall the pods if you add new native files to the module or when you
  modify expo-module.config.json.
- Uses Expo Push Service for notifications
- Push notifications are not supported on Android Emulators and iOS Simulators. A
  real device is required.
- Expo makes a best effort to deliver notifications to the push notification services
  operated by Google and Apple.
- Users can set certain OS-level settings that can prevent notifications from being
  delivered when the app is closed.
- We recommend upgrading SDK versions incrementally, one at a time.
- Read the SDK changelogs for important information about breaking changes, deprecations,
  and other changes that may affect your app.
- If a user does not have your app installed, deep links to your app will not work.
- Development features like Fast Refresh, debugging, environment variables, and bundling
  are fully universal.
- Uses a React Context provider for authentication
- Splash screen is displayed until authentication state is loaded
- Supports a number of different redirection patterns.
- When using Expo Router, do not put your test files inside the app directory. All
  files inside your app directory must be either routes or layout files.
- The tutorial is self-paced and can take up to two hours to complete.
- Using the Tunnel connection type will make the app reloads considerably slower than
  on LAN or Local
- Not recommended for building and distributing production apps to the app stores.
  Instead, use development builds.
- Auth is hard. If you want to skip the complexity, jump to the Auth solutions section
  for ready-made solutions.
- Magic links and passcodes are both valid authentication methods for Google Play
  Store and Apple App Store reviews.
- For UI testing, we recommend end-to-end tests instead of snapshot unit tests.
- Uses internal distribution to share both release and development builds.
- Uses EAS CLI for publishing updates.
- Launching updates using Expo Orbit is not supported on physical iOS devices.
- Production builds must be installed through their respective app stores.
- EAS Submit makes it easy to publish your apps to the App Store and Play Store with
  a simple command.
- EAS Metadata is in preview and subject to breaking changes.
- EAS Hosting is in preview and subject to changes.
- All features are free, optional, and can be used independently of each other.
- The listener interfaces may change from time to time between Expo SDK releases.
- Our strategy for backward compatibility is always to add new interfaces and add
  @Deprecated annotation for interfaces we plan to remove.
- Objective-C classes are not supported.
- Before SDK 54, this list defaulted to the your app's node_modules directory, and
  all node_modules directories above it in monorepos.
- Changing this option is only useful if you need to change the path for local Expo
  modules.
- The recommended way to write unit tests for an Expo project is to use Jest and the
  jest-expo preset.
- Maintaining mocks for native modules can be a lot of work if the native module has
  multiple methods.
- The only valid values for the Theme enum are 'light', 'dark', and 'system'.
- Example module with a native view for Android and iOS
- 'The recommended way to create an Expo module in an existing project is described
  in the Expo Modules API: Get Started guide.'
- Ensure you are inside expo-radial-chart directory before running the command below
- Not all Expo features and SDK libraries are available on TV.
- The Expo DevClient library is only supported in SDK 54 and later.
errors:
- 'DeviceNotRegistered: The device cannot receive push notifications anymore and you
  should stop sending messages to the corresponding Expo push token.'
- 'TOO_MANY_REQUESTS: You are exceeding the request limit of 600 notifications per
  second per project.'
- 'PUSH_TOO_MANY_NOTIFICATIONS: You are trying to send more than 100 push notifications
  in one request.'
- 'PUSH_TOO_MANY_RECEIPTS: You are trying to get more than 1000 push receipts in one
  request.'
- 'Message Too Big: The total notification payload sent to Apple and Google must be
  at most 4KiB.'
- 'Common issues to check: Firewall rules blocking outbound HTTPS (port 443) traffic.'
- Deep links will not work if the app is not installed.
- Argument at index '0' couldn't be cast to type Enum<Theme>
- 'EnumNoSuchValueException: ''not-a-real-theme'' is not present in Theme enum'
auth_info:
  mentioned_objects: []
client:
  base_url: https://expo.dev
  headers:
    Accept: application/json
source_metadata: null
