resources:
- name: processes
  endpoint:
    path: /api/v1/processes
    method: GET
- name: HTTP Request
  endpoint:
    path: /api/customers
    method: GET
- name: API Call
  endpoint:
    path: /api/customers
    method: GET
- name: Environment Variables
  endpoint:
    path: /guides/development/how-to-create-and-use-environment-variables
    method: GET
    data_selector: records
    params: {}
- name: SFTP Download
  endpoint:
    path: /SFTP/DownloadFiles
    method: POST
    data_selector: files
    params:
      filename: '#env.ConditionalTrigger.Filename'
      address: '#env.ConditionalTrigger.SftpAddress'
      username: '#env.ConditionalTrigger.SftpUsername'
      password: '#env.ConditionalTrigger.SftpPassword'
- name: SFTP_File_Download
  endpoint:
    path: /download
    method: GET
    data_selector: files
    params:
      filename: '#env.ConditionalTrigger.Filename'
- name: Process
  endpoint:
    path: /processes
    method: GET
    data_selector: processes
    params: {}
- name: Environment
  endpoint:
    path: /api/environments
    method: POST
    data_selector: environment
    params: {}
- name: Agent Group
  endpoint:
    path: /api/agent-groups
    method: POST
    data_selector: agentGroup
    params: {}
- name: Agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: agent
    params: {}
- name: Kubernetes Installation
  endpoint:
    path: /installation/kubernetes
    method: GET
    data_selector: documentation
- name: Docker Installation
  endpoint:
    path: /installation/docker
    method: GET
    data_selector: documentation
- name: Legacy Installation
  endpoint:
    path: /installation/legacy
    method: GET
    data_selector: documentation
- name: Agent Configuration
  endpoint:
    path: /api/navigation/getUIVersion
    method: GET
    data_selector: version
    params: {}
- name: customers
  endpoint:
    path: /api/customers
    method: GET
- name: HTTP Request
  endpoint:
    path: /api/customers
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dashboard
  endpoint:
    path: /management-and-operations/dashboard-and-monitoring/dashboard
    method: GET
    data_selector: widgets
- name: process_instances
  endpoint:
    path: /management-and-operations/dashboard-and-monitoring/process-instances
    method: GET
    data_selector: instances
- name: system_logs
  endpoint:
    path: /management-and-operations/dashboard-and-monitoring/system-logs
    method: GET
    data_selector: logs
- name: dashboard
  endpoint:
    path: /management-and-operations/dashboard-and-monitoring/dashboard
    method: GET
    data_selector: widgets
    params: {}
- name: process_instances
  endpoint:
    path: /management-and-operations/dashboard-and-monitoring/process-instances
    method: GET
    data_selector: instances
    params: {}
- name: system_logs
  endpoint:
    path: /management-and-operations/dashboard-and-monitoring/system-logs
    method: GET
    data_selector: logs
    params: {}
- name: process_executions
  endpoint:
    path: /api/process_executions
    method: GET
    data_selector: executions
    params: {}
- name: error_tracking
  endpoint:
    path: /api/error_tracking
    method: GET
    data_selector: errors
    params: {}
- name: Process Instance
  endpoint:
    path: /management-and-operations/dashboard-and-monitoring/process-instances
    method: GET
    data_selector: results
    params: {}
- name: Agents
  endpoint:
    path: /hybrid-integration-architecture/frends-runtime
    method: GET
- name: Agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
    params: {}
- name: Agent Groups
  endpoint:
    path: /agentGroups
    method: GET
    data_selector: agentGroups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: event_shapes
  endpoint:
    path: /reference/shapes/event-shapes
    method: GET
    data_selector: shapes
    params: {}
- name: decision_shapes
  endpoint:
    path: /reference/shapes/decision-shapes
    method: GET
    data_selector: shapes
    params: {}
- name: activity_shapes
  endpoint:
    path: /reference/shapes/activity-shapes
    method: GET
    data_selector: shapes
    params: {}
- name: scope_shapes
  endpoint:
    path: /reference/shapes/scope-shapes
    method: GET
    data_selector: shapes
    params: {}
- name: artifact_shapes
  endpoint:
    path: /reference/shapes/artifact-shapes
    method: GET
    data_selector: shapes
    params: {}
- name: sequence_flow_shapes
  endpoint:
    path: /reference/shapes/sequence-flow
    method: GET
    data_selector: shapes
    params: {}
- name: Event Shapes
  endpoint:
    path: /reference/shapes/event-shapes
    method: GET
- name: Decision Shapes
  endpoint:
    path: /reference/shapes/decision-shapes
    method: GET
- name: Activity Shapes
  endpoint:
    path: /reference/shapes/activity-shapes
    method: GET
- name: Scope Shapes
  endpoint:
    path: /reference/shapes/scope-shapes
    method: GET
- name: Artifact Shapes
  endpoint:
    path: /reference/shapes/artifact-shapes
    method: GET
- name: Sequence Flow Shape
  endpoint:
    path: /reference/shapes/sequence-flow
    method: GET
- name: trigger
  endpoint:
    path: /reference/shapes/event-shapes/trigger
    method: GET
    data_selector: trigger
    params: {}
- name: return
  endpoint:
    path: /reference/shapes/event-shapes/return
    method: GET
    data_selector: return
    params: {}
- name: intermediate_return
  endpoint:
    path: /reference/shapes/event-shapes/intermediate-return
    method: GET
    data_selector: intermediate_return
    params: {}
- name: throw
  endpoint:
    path: /reference/shapes/event-shapes/throw
    method: GET
    data_selector: throw
    params: {}
- name: catch
  endpoint:
    path: /reference/shapes/event-shapes/catch
    method: GET
    data_selector: catch
    params: {}
- name: exclusive_decision
  endpoint:
    path: /reference/shapes/decision-shapes/exclusive-decision
    method: GET
    data_selector: records
- name: inclusive_decision
  endpoint:
    path: /reference/shapes/decision-shapes/inclusive-decision
    method: GET
    data_selector: records
- name: exclusive_decision
  endpoint:
    path: /reference/shapes/decision-shapes/exclusive-decision
    method: GET
    data_selector: records
    params: {}
- name: inclusive_decision
  endpoint:
    path: /reference/shapes/decision-shapes/inclusive-decision
    method: GET
    data_selector: records
    params: {}
- name: Task
  endpoint:
    path: /reference/shapes/activity-shapes/task
    method: GET
- name: Call Subprocess
  endpoint:
    path: /reference/shapes/activity-shapes/call-subprocess
    method: GET
- name: Assign Variable
  endpoint:
    path: /reference/shapes/activity-shapes/assign-variable
    method: GET
- name: Code Task
  endpoint:
    path: /reference/shapes/activity-shapes/code-task
    method: GET
- name: Shared State Task
  endpoint:
    path: /reference/shapes/activity-shapes/shared-state-task
    method: GET
- name: DMN Task
  endpoint:
    path: /reference/shapes/activity-shapes/dmn-task
    method: GET
- name: Intelligent AI Connector
  endpoint:
    path: /reference/shapes/activity-shapes/ai-connector
    method: GET
- name: Task
  endpoint:
    path: /reference/shapes/activity-shapes/task
    method: GET
    data_selector: records
- name: Call Subprocess
  endpoint:
    path: /reference/shapes/activity-shapes/call-subprocess
    method: GET
    data_selector: records
- name: Assign Variable
  endpoint:
    path: /reference/shapes/activity-shapes/assign-variable
    method: GET
    data_selector: records
- name: Code Task
  endpoint:
    path: /reference/shapes/activity-shapes/code-task
    method: GET
    data_selector: records
- name: Shared State Task
  endpoint:
    path: /reference/shapes/activity-shapes/shared-state-task
    method: GET
    data_selector: records
- name: DMN Task
  endpoint:
    path: /reference/shapes/activity-shapes/dmn-task
    method: GET
    data_selector: records
- name: Intelligent AI Connector
  endpoint:
    path: /reference/shapes/activity-shapes/ai-connector
    method: GET
    data_selector: records
- name: Data Object Reference
  endpoint:
    path: /reference/shapes/artifact-shapes/data-object-reference
    method: GET
    data_selector: records
- name: Data Store Reference
  endpoint:
    path: /reference/shapes/artifact-shapes/data-store-reference
    method: GET
    data_selector: records
- name: Group
  endpoint:
    path: /reference/shapes/artifact-shapes/group
    method: GET
    data_selector: records
- name: Text Annotation
  endpoint:
    path: /reference/shapes/artifact-shapes/text-annotation
    method: GET
    data_selector: records
- name: HTTP Request
  endpoint:
    path: /api/customers
    method: GET
    data_selector: Body
- name: HTTP Request
  endpoint:
    path: /api/customers
    method: GET
- name: file_trigger
  endpoint:
    path: /file/trigger
    method: GET
    data_selector: trigger.data
    params: {}
- name: trigger.data
  endpoint:
    data_selector: Frends.ExecutableProcess.CaseInsensitivePropertyTree
- name: trigger.data.filePaths
  endpoint:
    data_selector: String[]
- name: trigger.data.files
  endpoint:
    data_selector: String[]
- name: Schedule Trigger
  endpoint:
    path: /schedule/trigger
    method: POST
    data_selector: parameters
    params: {}
- name: http_trigger
  endpoint:
    path: myprocesses/test-process
    method: ANY
- name: http_trigger
  endpoint:
    path: myprocesses/test-process
    method: ANY
- name: Queue
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Bus URI
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Reply
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Reply errors
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Default reply queue
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Queue is durable
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Do not log trigger parameters
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Service Bus Trigger Configuration
  endpoint:
    path: /configuration/service-bus-trigger
    method: GET
- name: trigger.data
  endpoint:
    path: '#trigger.data'
    method: GET
- name: event
  endpoint:
    path: /events
    method: GET
- name: persisted-system
  endpoint:
    path: /persisted-system
    method: POST
    data_selector: data
    params: {}
- name: persisted-data
  endpoint:
    path: /persisted-data
    method: POST
    data_selector: data
    params: {}
- name: Blob Storage
  endpoint:
    path: /blob/storage
    method: GET
    data_selector: messages
    params: {}
- name: Message Bus
  endpoint:
    path: /message/bus
    method: GET
    data_selector: message_data
    params: {}
- name: AgentGroups
  endpoint:
    path: /api/agentgroups
    method: GET
    data_selector: records
- name: Agents
  endpoint:
    path: /api/agents
    method: GET
    data_selector: records
- name: AgentDatabaseSettings
  endpoint:
    path: /AgentDatabaseSettings
    method: GET
- name: GenericSettings
  endpoint:
    path: /GenericSettings
    method: GET
- name: OptionalSettings
  endpoint:
    path: /OptionalSettings
    method: GET
- name: GatewayAgentSettings
  endpoint:
    path: /GatewayAgentSettings
    method: GET
- name: MiscellaneousSettings
  endpoint:
    path: /MiscellaneousSettings
    method: GET
- name: Administrator
  endpoint:
    path: /reference/administration/role-based-access-control/administrator
    method: GET
    data_selector: rules
    params: {}
- name: Editor
  endpoint:
    path: /reference/administration/role-based-access-control/editor
    method: GET
    data_selector: rules
    params: {}
- name: Viewer
  endpoint:
    path: /reference/administration/role-based-access-control/viewer
    method: GET
    data_selector: rules
    params: {}
- name: persisted-system
  endpoint:
    path: /persisted-system
    method: POST
    data_selector: data
    params: {}
- name: persisted-data
  endpoint:
    path: /persisted-data
    method: POST
    data_selector: data
    params: {}
- name: Event Shapes
  endpoint:
    path: /reference/shapes/event-shapes
    method: GET
- name: Decision Shapes
  endpoint:
    path: /reference/shapes/decision-shapes
    method: GET
- name: Activity Shapes
  endpoint:
    path: /reference/shapes/activity-shapes
    method: GET
- name: Scope Shapes
  endpoint:
    path: /reference/shapes/scope-shapes
    method: GET
- name: Artifact Shapes
  endpoint:
    path: /reference/shapes/artifact-shapes
    method: GET
- name: Sequence Flow Shape
  endpoint:
    path: /reference/shapes/sequence-flow
    method: GET
- name: UserManagement
  endpoint:
    path: /api/usermanagement
    method: GET
    data_selector: users
    params: {}
- name: ApiManagement
  endpoint:
    path: /api/apimanagement
    method: GET
    data_selector: apis
    params: {}
notes:
- The Platform API is not active out of the box and must be set up.
- Only Azure Active Directory (AAD) is supported for authentication.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Frends version 6.1.0.
- Last updated 3 months ago
- Processes consist of elements such as Triggers, Tasks, Subprocesses, decisions and
  loops.
- An Agent is required in the Agent Group the Process is deployed to.
- Having a Manual Trigger in Process is not required.
- Having a Manual Trigger in Process is not required. In case there is no Manual Trigger
  in a Process, an implicit Manual Trigger with no parameters will be used to trigger
  the Process.
- Environment Variables are optional static configuration information that is attached
  to a specific Environment in Frends.
- Creating and deleting Environment Variables will take effect immediately, but changing
  their value takes effect only after saving.
- Uses Environment Variables for SFTP details.
- Polling occurs every 60 seconds.
- Uses environment variables for SFTP details to allow easy configuration changes.
- Frends Tasks are usually written in C#, and for the best experience you will want
  a compatible integrated development environment (IDE).
- Task libraries are distributed as NuGet packages (.nupkg).
- Frends Tasks are usually written in C#.
- Deploying a Subprocess is done in exactly the same way as shown in this guide for
  Processes.
- Deploying a Process requires Environment Variables and Subprocesses to be set up
  beforehand.
- The Instance list is automatically refreshed by default, to show the current state
  of the executions in almost real time.
- Extended logging has some impact on performance, recommended to be used only temporarily.
- Dashboard provides customizable widgets for monitoring.
- Users can adjust settings to highlight critical alerts.
- Centralized monitoring to your Frends Tenant.
- In order to access Agent logs, you will need to have at least Editor role in Frends.
- Some actions are restricted to Environments.Admin level, but viewing the Agent logs
  is possible with only the View level.
- Users are Tenant-specific and they are specifically for accessing the Control Panel
  and performing actions within.
- Users can be managed using RBAC or Role-Based Access Control model.
- Users are Tenant-specific and controlled using API Policies.
- Only users able to authenticate to your authentication provider may use the SSO
  method.
- Frends mainly supports the OpenAPI specification version 3.0.1, with 2.0 also supported
  for legacy applications.
- Access tokens are required to be set up in Azure AD for implicit flow.
- Implicit OAuth flow requires some settings in the OpenAPI specification.
- Authenticating to the API requires the client id from Azure.
- App-only access uses app roles instead of delegated scopes.
- Client secret is used as 'password' for the token request.
- Environments do not contain any centrally managed settings, name is the only adjustable
  value for them.
- There is also no limit on how many Environments you can have.
- Name is the only adjustable value for Environments.
- There is no limit on how many Environments you can have.
- Ports for REST API define which ports the Agent will listen to for incoming connections
  for API requests.
- Frends versions 5.7 and later only listen for HTTPS connections, with HTTP being
  deprecated.
- Requires outbound access to Frends UI, Azure Service Bus, and Azure Blob Storage
- Use AMQP Websockets if ports 5671 and 5672 cannot be opened outbound
- Outbound connectivity may require configuring AMQP Websockets for Azure Service
  Bus
- Ensure the target Agent Group has cross platform option enabled.
- For containerized deployment, enable the Allow new Agents to connect to the Agent
  Group option.
- In High Availability mode, multiple Agents execute the same Processes with assistance
  from a load balancer.
- High Availability configuration is possible to set up without a shared database
  but limits functionality.
- Enabling the option will allow the Agents to connect to your Agent Group automatically
  after deployment.
- If a central SQL Server or Azure SQL Database instance is available, the Agents
  will use a shared SQL database called Shared State Store.
- High Availability configuration is possible to set up without a shared database
  between the Agents, but it will limit the functionality of the High Availability
  mode.
- Frends is an easy-to-use and powerful integration platform (iPaaS) that is designed
  to support your most critical business needs.
- Frends provides a low-code integration editor.
- Frends at a minimum comes with Development Environment with a Cloud Agent set up.
- If the Process expects some values from an API Trigger for example, the values cannot
  be provided and the Process execution will likely fail.
- Dashboard is a comprehensive tool within the Frends Control Panel designed to provide
  users with a clear and concise overview of their system activities.
- Viewing the Agent logs requires at least Editor role in Frends.
- Environments.View permission is required to access Agent logs.
- Viewing the Agent logs is possible with only the View level permission.
- User roles in Frends are crucial for maintaining a structured and secure access
  environment.
- Contact us via Chat for assistance
- Documentation available for answers and guides
- Frends supports various integration types like cloud-to-cloud, cloud-to-on-premises,
  and on-premises-to-on-premises.
- Frends uses BPMN 2.0 notation to define APIs, integrate systems, and automate processes.
- Tasks can be created and added to your Frends Tenant.
- Tasks are highly configurable and reusable.
- Tasks can be created and added to your Frends Tenant if no suitable tasks are available.
- Templates give a starting point for development for the most common use cases.
- Templates are designed to be flexible, allowing you to modify parameters, add Tasks,
  or adjust conditions to align with your organizational goals.
- Linked Processes should not be deployed separately by themselves, even if they appear
  in the Process list normally.
- API Policies provide settings to authenticate and authorize callers to your endpoints.
- Throttling can be set for each endpoint.
- Monitor all the connections to your tenant.
- Logs include events for all requests made against your tenant.
- AI is not an afterthought.
- Frends includes powerful AI tools to help you with creating your Processes.
- Policies can define logging-specific policies in addition to authentication policies.
- AI Assistant helps in configuring Tasks and generating code.
- AI Assistant provides functional code snippets suitable for embedding into the Process.
- AI is integrated within Frends processes to enhance functionality.
- Automate the least favorite task of all development with AI.
- In addition to providing AI Assistants for helping you create Processes and the
  functionality you require, Frends also includes automatic Process documentation
  generation with AI.
- AI in Frends will help you with configuring Tasks as well as create code.
- Future Frends features will expand the AI steps to do the API calls internally inside
  the AI step and even enable the Computer Use Access to finalize the Agentic AI path.
- API is designed to be used in a RESTful manner specifying Frends elements to be
  accessed by their identifiers.
- Lists use paging or continuation tokens if the data is rapidly changing.
- Dashboard allows customization of widgets for monitoring.
- Integration execution logs contain detailed information about each execution.
- Dashboard offers customizable widgets for monitoring.
- Process Instances logs can be adjusted for detail level.
- Dashboard offers customizable widgets that allow users to tailor the view according
  to their specific monitoring needs.
- Logging for the Process executions.
- Default log level can be adjusted to log more or less information.
- Basis to majority of Frends logging, Process Instances contain information what
  happened during a single integration execution.
- Each Process in Frends can implement their own error handling procedure.
- Common scheme to handle errors is to send an alert by email, optionally having a
  threshold value before or after sending an email.
- The Process execution will have stopped by the time the error handling Subprocess
  is executed, so it is only usable for alerting and possibly for cleanup of the Process.
- User account management and handling is not done within Frends.
- Users are Tenant-specific and access is controlled using API Policies.
- Roles can be customized and new roles can be created.
- Environment Variables are the global values for each environment.
- Using Environment Variables is recommended for example for connection parameters.
- Environment Variables are global values for each environment.
- Environments separate the different sites logically by use purpose and shared values
- Agent Groups define the actual location where the Processes will be executed
- Environment Variables are the global values for each Environment.
- Self-hosted deployment is essential when you require strict data sovereignty, compliance,
  or have security requirements that disallow the data being located outside your
  internal network or geographic location.
- In this deployment type, connections to your Frends Tenant are done through Azure
  Service Bus messaging.
- Agents are defined as part of Agent Groups, which are contained within Environments.
- Multiple agents can be deployed into High Availability configuration.
- Frends can do both wide and tall.
- Vertical scaling through increasing hardware resources is possible.
- Each Process will run only on one thread, but Agents are capable of multithreaded
  performance.
- High Availability configuration can be used to allow single Agent Group to contain
  multiple Agents.
- In this deployment model you are also in full control of the infrastructure, maintenance,
  updates and monitoring, so while it provides more control over the environment,
  it also presents additional required actions to perform.
- HA configuration ensures your services stay available.
- In standard configuration, if your server or Agent is unavailable, the integration
  service will be blocked.
- Frends is built on Azure Cloud and .NET platform.
- Uses Docker to create containers for Agent deployments.
- High Availability configuration ensures services stay available.
- Developers work with Environments and Agent Groups, abstracting the individual Agents.
- Frends targets primarily the latest .NET platform, version 8.
- Frends is an easy-to-use and powerful integration platform (iPaaS) that is designed
  to support your most critical business needs and that developers like to use.
- Triggers define the starting condition for a Process.
- Return shape successfully ends a Process.
- Intermediate Return shape can be used to Return an HTTP response to the caller before
  the Process execution is complete.
- Throw shape is used to interrupt Process's usual execution path by raising an error.
- Catch shape can be used to catch errors from the connected shape.
- Triggers can start Processes based on specific events.
- Return shape indicates successful execution of a Process.
- Intermediate Return returns a response before Process execution completes.
- Throw shape interrupts execution and raises an error.
- Catch shape handles errors without ending the Process.
- Tasks can be used for general actions, such as making HTTP requests and converting
  CSV to JSON.
- Manual Trigger does not contain automation, instead the Trigger is executed only
  when user starts the Process.
- All new Processes have to be created and edited in the Development Environment.
- Monitor specified locally mapped directories for new files to initiate Processes.
- If authentication is required to access the files and directories, provide another
  username.
- Processes are checked according to the given time zone, which also takes possible
  daylight saving time adjustments into account.
- Only one instance of the Subprocess can be running at a time.
- If the execution of the Subprocess takes longer than the polling interval, it is
  allowed to finish before starting the next execution.
- HTTP Trigger does not contain OpenAPI specification or API Management features,
  the Process acts as a standalone API endpoint.
- HTTP Trigger can be configured to allow requests from specified origins.
- The Trigger can be set to be accessible on API Gateway.
- Basic authentication authenticates the user either against the Active Directory
  or the local users.
- Basic authentication is not supported on Cloud Agents by the platform.
- Basic authentication authenticates the user either against the Active Directory
  or the local users, depending on the Frends Agent service user.
- Certificate authentication requires that the client certificate is valid for the
  Frends Agent user on the Agent machine.
- API Policy authentication utilises the API Policies from API Management to authenticate
  the incoming requests.
- Environment Variables can be used here to use different queues for each Environment.
- OAuth2 is the recommended way to connect to Azure Event Hub, requiring slightly
  more set up than the other two methods, while being more secure and as easy to use
  afterwards.
- 0.0.0.0 can be used to listen to all network interfaces.
- 0.0.0.0/0 can be used to allow all clients and connections.
- OAuth2 is the recommended way to connect to Azure Event Hub.
- The Platform API is not active out of the box, and must be set up before it can
  be used.
- Currently only Azure Active Directory (AAD) is supported.
- When setting up a Frends Agent, there are configuration files and options available
  to adjust the Agent's settings.
- The configuration in these files cascade in priority, with latter files overriding
  settings from earlier ones.
- API allows automating management and monitoring tasks
- The Platform API is not active out of the box and must be set up before use.
- Currently only Azure Active Directory (AAD) is supported for authentication.
- This volume mount can store the Frends Agent's internal database and Processes,
  ensuring they are not lost if the pod restarts.
- This is typically recommended only for development and testing environments.
- Agent requires connectivity to Azure or Cleura cloud.
- Uses Azure Service Bus or RabbitMQ for communication.
- Outbound connectivity is required for Frends UI and Azure services.
- API requires setup of connected app in Frends.
- Frends uses a flexible and granular Role-Based Access Control (RBAC) system to manage
  user permissions.
- Each user can have multiple roles given to them.
- This volume mount can store the Frends Agent's internal database and Processes,
  ensuring they are not lost if the pod restarts. This is typically recommended only
  for development and testing environments, and for production use the Shared State
  Store is recommended instead.
- Uses SSL secured connections for Message Bus and Blob Storage
- Limited access connection strings for authentication
- Outbound access to Frends UI on port 443 is required.
- Outbound connectivity to Azure Service Bus requires ports 443, 5671, and 5672.
- Outbound connectivity to Azure Blob Storage requires port 443.
- SQL Server and Azure SQL Database require port 1433 for outbound connectivity.
- API allows automating management and monitoring tasks that otherwise would have
  to be done single piece at a time manually.
- Some responses provide links for further requests
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Common error is that the Process is using Subprocesses or Environment Variables,
  which were not defined and deployed before deploying the Process.
- Error monitoring can be done on a per Process basis.
- Error message details provide C# stack traces as well as the full message for the
  warnings.
- Error messages provide C# stack traces as well as the full message for the warnings.
- .NET v6.0 or later required
- Could not find configuration file
- InstallAgentService failed
- 'Failed to create user: Confirm that the username and password are both correct'
- Check that the Agent user is part of the local 'Administrators' group.
- 'Make sure that in the Windows ''Local Security Policy'' settings under ''User Rights
  Assignment'' the Agent user has the following rights set: Log on as a service and
  Log on as a batch job'
- Most common error is that the Process is using Subprocesses or Environment Variables,
  which were not defined and deployed before deploying the Process.
- Unhandled errors may cause disruptions in Process execution.
- Monitoring Rules can trigger alerts for multiple errors or integration execution
  failures.
- Maximum data size logged is limited to 100 array entries or 8192 characters of textual
  data.
- 'REQUEST_FAILED: Process execution failed due to an unhandled exception.'
- No Tag rules are active for a user, the user can see all Processes.
- Wildcards are not supported.
- '403 Forbidden: Check user permissions for the requested action'
auth_info:
  mentioned_objects:
  - AAD
  - Application ID URI
  - App registrations
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Auth0
  - Microsoft Entra ID
  - App roles
  - client secret
  - Bearer Token
  - AAD App registration
  - Administrator app role
client:
  base_url: https://frends.com
  auth:
    type: oauth2
source_metadata: null
