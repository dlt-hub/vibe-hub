resources:
- name: text_to_image
  endpoint:
    path: /task
    method: POST
    data_selector: data
    params: {}
- name: flux_api
  endpoint:
    path: /flux-api
    method: POST
    data_selector: response
    params: {}
- name: ace_step_api
  endpoint:
    path: /ace-step
    method: POST
    data_selector: response
    params: {}
- name: nano_banana_api
  endpoint:
    path: /nano-banana
    method: POST
    data_selector: response
    params: {}
- name: Flux API
  endpoint:
    path: /flux-api
    method: POST
- name: Ace-step API
  endpoint:
    path: /ace-step
    method: POST
- name: Nano Banana API
  endpoint:
    path: /nano-banana
    method: POST
- name: create_task
  endpoint:
    path: /create_task
    method: POST
- name: get_task
  endpoint:
    path: /get_task
    method: GET
- name: image_generation
  endpoint:
    path: /generate
    method: POST
    data_selector: image
    params: {}
- name: image_generation
  endpoint:
    path: /generate
    method: POST
    data_selector: images
    params: {}
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: ''
    params: {}
- name: video_generation
  endpoint:
    path: /kling-api/video-generation
    method: POST
    data_selector: results
    params: {}
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: response
    params: {}
- name: Flux API
  endpoint:
    path: /flux-api
    method: POST
- name: Ace-step API
  endpoint:
    path: /ace-step
    method: POST
- name: Nano Banana API
  endpoint:
    path: /nano-banana
    method: POST
- name: image_generation
  endpoint:
    path: /generate
    method: POST
    data_selector: image
    params: {}
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: response
    params: {}
- name: task
  endpoint:
    path: /v1/task/
    method: GET
    data_selector: task_results
    params: {}
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: response
    params: {}
- name: task
  endpoint:
    path: /v1/task/
    method: GET
    data_selector: results
- name: create_task
  endpoint:
    path: /v1/task/
    method: POST
    data_selector: task
- name: generate_image_from_image
  endpoint:
    path: /generate/image/from/image
    method: POST
- name: generate_image_from_image_with_lora
  endpoint:
    path: /generate/image/from/image/with/lora
    method: POST
- name: generate_image_from_text
  endpoint:
    path: /generate/image/from/text
    method: POST
- name: generate_image_with_text_based_on_lora
  endpoint:
    path: /generate/image/with/text/based/on/lora
    method: POST
- name: generate_image_with_controlnet_and_lora
  endpoint:
    path: /generate/image/with/controlnet/and/lora
    method: POST
- name: generate_variation_of_image
  endpoint:
    path: /generate/variation/of/image
    method: POST
- name: remove_background_from_image
  endpoint:
    path: /remove/background/from/image
    method: POST
- name: restore_image
  endpoint:
    path: /restore/image
    method: POST
- name: generate_music
  endpoint:
    path: /generate_music
    method: POST
    data_selector: input
- name: generate_image_from_image
  endpoint:
    path: /generate/image
    method: POST
    data_selector: image
- name: generate_image_from_image_with_lora
  endpoint:
    path: /generate/image/lora
    method: POST
    data_selector: image
- name: generate_image_from_text
  endpoint:
    path: /generate/image/text
    method: POST
    data_selector: image
- name: generate_image_with_text_based_on_lora
  endpoint:
    path: /generate/image/text/lora
    method: POST
    data_selector: image
- name: generate_image_with_controlnet_and_lora
  endpoint:
    path: /generate/image/controlnet/lora
    method: POST
    data_selector: image
- name: generate_variation_of_image
  endpoint:
    path: /generate/image/variation
    method: POST
    data_selector: image
- name: remove_background_from_image
  endpoint:
    path: /remove/background
    method: POST
    data_selector: image
- name: restore_image
  endpoint:
    path: /restore/image
    method: POST
    data_selector: image
- name: Udio_Song_Extend
  endpoint:
    path: /udio/song/extend
    method: POST
    data_selector: model
    params: {}
- name: generate_music
  endpoint:
    path: /generate_music
    method: POST
    data_selector: output
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: udio_song_extend
  endpoint:
    path: /udio/song/extend
    method: POST
    data_selector: response
    params: {}
- name: generate_lyrics
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: lipsync
  endpoint:
    path: /api/lip/sync
    method: POST
    data_selector: input
- name: generate_lyrics
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: lip_sync
  endpoint:
    path: /api/lip/sync
    method: POST
    data_selector: input
- name: motion_brush
  endpoint:
    path: /api/v1/motion_brush
    method: POST
    data_selector: motion_brush
    params: {}
- name: motion_brush
  endpoint:
    path: /kling/motion_brush
    method: POST
    data_selector: motion_brush
    params: {}
- name: video_generation
  endpoint:
    path: /kling/elements/video/generation
    method: POST
    data_selector: input
    params: {}
- name: video_generation
  endpoint:
    path: /kling/elements/video_generation
    method: POST
    data_selector: input
    params: {}
- name: kling_effects
  endpoint:
    path: /kling/effects
    method: POST
    data_selector: input
    params: {}
- name: kling_effects
  endpoint:
    path: /kling/effects
    method: POST
    data_selector: input
- name: cancel_tasks
  endpoint:
    path: /api/v1/tasks
    method: DELETE
    params:
      created_before: '1728570429'
      model: kling
- name: cancel_tasks
  endpoint:
    path: /api/v1/tasks
    method: DELETE
    params:
      created_before: '1728570429'
      model: kling
- name: cancel_task
  endpoint:
    path: /api/v1/task/{task_id}
    method: DELETE
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: kling_virtual_try_on
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: ''
    params: {}
- name: kling_virtual_try_on
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: '{}'
- name: kling_effects
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: ''
    params: {}
- name: kling_effects
  endpoint:
    path: /task
    method: POST
    data_selector: ''
    params: {}
- name: video_generation
  endpoint:
    path: /hailuo-api/generate-video
    method: POST
    data_selector: input
- name: Hailuo Director Mode
  endpoint:
    path: /docs/hailuo-api/hailuo-director-mode
    method: POST
    data_selector: input
    params: {}
- name: generate_video
  endpoint:
    path: /hailuo-api/generate-video
    method: POST
- name: get_task
  endpoint:
    path: /hailuo-api/get-task
    method: GET
- name: get_task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: flux_task_creation
  endpoint:
    path: /flux-api/task-creation
    method: POST
    data_selector: task
    params: {}
- name: flux
  endpoint:
    path: /flux-api/task-creation-with-lora-and-controlnet
    method: POST
- name: flux
  endpoint:
    path: /flux-api/create-task
    method: POST
    data_selector: task
    params: {}
- name: Available LoRA Models
  endpoint:
    path: /flux-api/lora-models
    method: GET
    data_selector: models
    params: {}
- name: Available ControlNet Models
  endpoint:
    path: /flux-api/controlnet-models
    method: GET
    data_selector: models
    params: {}
- name: image_to_image
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: flux_task_creation
  endpoint:
    path: /flux-api/create-task
    method: POST
    data_selector: task
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: image_to_image_task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: gemini-2.5-flash-image
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: Create Task
  endpoint:
    path: /docs/flux-api/create-task
    method: POST
- name: Get Task
  endpoint:
    path: /docs/flux-api/get-task
    method: GET
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: veo3_text_to_video
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: gemini-2.5-flash-image
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: veo3_image_to_video
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: veo3_text_to_video
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: text_to_image
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: text_to_image
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: Get Task
  endpoint:
    path: /ai-hug-api/get-task
    method: GET
- name: Create Task
  endpoint:
    path: /ai-hug-api/create-task
    method: POST
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: Get Task
  endpoint:
    path: /docs/ai-hug-api/get-task
    method: GET
- name: Create Task
  endpoint:
    path: /docs/ai-hug-api/create-task
    method: POST
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: gpt-4o-image
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: messages
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: choices
    params: {}
- name: gpt-4o-image
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: messages
- name: Midjourney
  endpoint:
    path: /midjourney-api
    method: GET
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: choices
    params: {}
- name: midjourney
  endpoint:
    path: /midjourney-api
    method: GET
- name: imagine
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: upscale
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: imagine
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: variation
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: upscale
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: reroll
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: variation
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: describe
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: reroll
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: seed
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: describe
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: Create Task
  endpoint:
    path: /docs/midjourney-api/imagine
    method: POST
- name: Get Task
  endpoint:
    path: /docs/midjourney-api/get-task
    method: GET
- name: inpaint
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: seed
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: Create Task
  endpoint:
    path: /midjourney-api/imagine
    method: POST
- name: Get Task
  endpoint:
    path: /midjourney-api/get-task
    method: GET
- name: create_task
  endpoint:
    path: /create-task
    method: POST
- name: get_task
  endpoint:
    path: /get-task
    method: GET
- name: pan
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: inpaint
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: cancel_task
  endpoint:
    path: /api/v1/task/{task_id}
    method: DELETE
    data_selector: ''
- name: Create Task
  endpoint:
    path: /midjourney-api/create-task
    method: POST
- name: Get Task
  endpoint:
    path: /midjourney-api/get-task
    method: GET
- name: pan
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: cancel_tasks
  endpoint:
    path: /api/v1/tasks
    method: DELETE
    data_selector: ''
    params:
      created_before: ''
- name: cancel_task
  endpoint:
    path: /api/v1/task/{task_id}
    method: DELETE
- name: Get Task
  endpoint:
    path: /midjourney-api/get-task
    method: GET
- name: cancel_tasks
  endpoint:
    path: /api/v1/tasks
    method: DELETE
    params:
      created_before: '1728570429'
      model: midjourney
- name: Faceswap
  endpoint:
    path: /multi-face-swap/create-task
    method: POST
- name: Image Faceswap
  endpoint:
    path: /faceswap-api/create-task
    method: POST
- name: Video Faceswap
  endpoint:
    path: /faceswap-api/video-faceswap
    method: POST
- name: Get Task
  endpoint:
    path: /faceswap-api/get-task
    method: GET
- name: Get Task
  endpoint:
    path: /midjourney-api/get-task
    method: GET
- name: faceswap
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: Multi Faceswap
  endpoint:
    path: /docs/multi-face-swap/create-task
    method: POST
- name: Image Faceswap
  endpoint:
    path: /docs/faceswap-api/create-task
    method: POST
- name: Video Faceswap
  endpoint:
    path: /docs/faceswap-api/video-faceswap
    method: POST
- name: Get Task
  endpoint:
    path: /docs/faceswap-api/get-task
    method: GET
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: faceswap_task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: Get Task
  endpoint:
    path: /faceswap-api/get-task
    method: GET
- name: text_to_speech
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: video_faceswap
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: Get Task
  endpoint:
    path: /faceswap-api/get-task
    method: GET
- name: Get Task
  endpoint:
    path: /docs/tts-get-task
    method: GET
- name: task
  endpoint:
    path: /task
    method: POST
    data_selector: null
    params: {}
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: Get Task
  endpoint:
    path: /tts/get-task
    method: GET
- name: task
  endpoint:
    path: /docs/trellis-api/get-task
    method: GET
    data_selector: output
    params: {}
- name: create_task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: null
    params: {}
- name: cancel_tasks
  endpoint:
    path: /api/v1/tasks
    method: DELETE
    data_selector: ''
    params:
      created_before: '1728570429'
      model: luma
- name: task
  endpoint:
    path: /docs/trellis-api/get-task
    method: GET
    data_selector: output
- name: cancel_task
  endpoint:
    path: /docs/kling-api/cancel-task
    method: DELETE
- name: cancel_tasks
  endpoint:
    path: /docs/kling-api/cancel-tasks
    method: DELETE
- name: get_task
  endpoint:
    path: /docs/kling-api/get-task
    method: GET
- name: create_task
  endpoint:
    path: /docs/kling-api/create-task
    method: POST
- name: Get Task
  endpoint:
    path: /docs/trellis-api/get-task
    method: GET
- name: create_task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: Get Task
  endpoint:
    path: /dream-machine/get-task
    method: GET
- name: cancel_tasks
  endpoint:
    path: /api/v1/tasks
    method: DELETE
    data_selector: null
    params:
      created_before: '1728570429'
      model: luma
- name: cancel_task
  endpoint:
    path: /docs/kling-api/cancel-task
    method: DELETE
- name: wanx_task
  endpoint:
    path: /wanx-api/create-task
    method: POST
- name: available_lora_types
  endpoint:
    path: /wanx-lora-type
    method: GET
- name: wanx_lora_use_cases
  endpoint:
    path: /wanx-lora/use-case
    method: GET
- name: create_task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: wanx
  endpoint:
    path: /wanx-api/create-task
    method: POST
    data_selector: input
    params: {}
- name: get_task
  endpoint:
    path: /wanx-api/get-task
    method: GET
    data_selector: input
    params: {}
- name: Get Task
  endpoint:
    path: /dream-machine/get-task
    method: GET
- name: Create Task
  endpoint:
    path: /dream-machine/create-task
    method: POST
- name: Create Task
  endpoint:
    path: /wanx-api/create-task
    method: POST
- name: Get Task
  endpoint:
    path: /wanx-api/get-task
    method: GET
- name: WanX Task
  endpoint:
    path: /wanx-api/create-task
    method: POST
- name: Get Task
  endpoint:
    path: /wanx-api/get-task
    method: GET
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: wanx
  endpoint:
    path: /wanx-lora-type
    method: GET
    data_selector: data
    params: {}
- name: Create Task
  endpoint:
    path: /docs/skyreels-api/create-task
    method: POST
- name: Get Task
  endpoint:
    path: /docs/skyreels-api/get-task
    method: GET
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: Create Task
  endpoint:
    path: /framepack-api/create-task
    method: POST
- name: Get Task
  endpoint:
    path: /framepack-api/get-task
    method: GET
- name: Create Task
  endpoint:
    path: /docs/skyreels-api/create-task
    method: POST
- name: Get Task
  endpoint:
    path: /docs/skyreels-api/get-task
    method: GET
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: Framepack
  endpoint:
    path: /framepack-api/create-task
    method: POST
- name: Get Task
  endpoint:
    path: /framepack-api/get-task
    method: GET
- name: Hunyuan Video
  endpoint:
    path: /hunyuan-video/txt2video-api
    method: POST
- name: Get Task
  endpoint:
    path: /hunyuan-api/get-task
    method: GET
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: hunyuan-txt2video
  endpoint:
    path: /hunyuan/txt2video
    method: POST
    data_selector: ''
    params: {}
- name: hunyuan-txt2video-lora
  endpoint:
    path: /hunyuan/txt2video-lora
    method: POST
    data_selector: ''
    params: {}
- name: hunyuan-fastvideo-txt2video
  endpoint:
    path: /hunyuan/fastvideo/txt2video
    method: POST
    data_selector: ''
    params: {}
- name: hunyuan-img2video-concat
  endpoint:
    path: /hunyuan/img2video/concat
    method: POST
    data_selector: ''
    params: {}
- name: hunyuan-img2video-replace
  endpoint:
    path: /hunyuan/img2video/replace
    method: POST
    data_selector: ''
    params: {}
- name: hunyuan-txt2video
  endpoint:
    path: /hunyuan/txt2video
    method: POST
    data_selector: model
    params: {}
- name: hunyuan-txt2video-lora
  endpoint:
    path: /hunyuan/txt2video-lora
    method: POST
    data_selector: model
    params: {}
- name: hunyuan-fastvideo-txt2video
  endpoint:
    path: /hunyuan/fastvideo/txt2video
    method: POST
    data_selector: model
    params: {}
- name: hunyuan-img2video-concat
  endpoint:
    path: /hunyuan/img2video/concat
    method: POST
    data_selector: model
    params: {}
- name: hunyuan-img2video-replace
  endpoint:
    path: /hunyuan/img2video/replace
    method: POST
    data_selector: model
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: generate_video
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: generate_video
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: generate_audio
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: model
    params: {}
- name: generate_audio
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: ''
    params: {}
- name: generate_audio
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: model
    params: {}
- name: generate_audio
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: model
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: Text to Audio
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: audio_to_audio
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: audio_edit
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: audio_edit
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: audio_extend
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: audio_extend
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: joycaption
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
- name: joycaption
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: ephemeral_resource
  endpoint:
    path: /api/ephemeral_resource
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: ephemeral_resource
  endpoint:
    path: /api/ephemeral_resource
    method: POST
    data_selector: data
    params: {}
- name: Remove Background Task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: remove_background
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: Remove Background Task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
- name: segment_with_prompt
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: image_upscale
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: image_upscale_task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: image_upscale_task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: video_upscale
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: task_id
- name: video_upscale
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: task_id
- name: video_upscale_task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: video_upscale_task
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: video_remove_background
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: video_remove_background
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: Video Remove Background
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: account_info
  endpoint:
    path: /account/info
    method: GET
    data_selector: '{}'
- name: Video Remove Background
  endpoint:
    path: /api/v1/task/{task_id}
    method: GET
    data_selector: data
    params: {}
- name: task_list_info
  endpoint:
    path: /account/active_tasks
    method: GET
    data_selector: ''
- name: account_info
  endpoint:
    path: /account/info
    method: GET
    data_selector: '{}'
- name: User Task History
  endpoint:
    path: /docs/piapi-user-history-query
    method: GET
- name: task_list_info
  endpoint:
    path: /account/active_tasks
    method: GET
    data_selector: records
- name: user_task_history
  endpoint:
    path: /api/open/tasks/histories
    method: GET
    data_selector: ''
    params:
      page: '1'
      page_size: '10'
- name: User Task History
  endpoint:
    path: /docs/piapi-user-history-query
    method: GET
- name: text_to_image_copy
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: user_task_history
  endpoint:
    path: /api/open/tasks/histories
    method: GET
    data_selector: ''
    params:
      page: '1'
      page_size: '10'
- name: text_to_image_copy
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: MidJourney API
  endpoint:
    path: /midjourney
    method: GET
    data_selector: output
    params: {}
- name: Luma Dream Machine API
  endpoint:
    path: /luma-dream-machine
    method: GET
    data_selector: output
    params: {}
- name: Kling API
  endpoint:
    path: /kling
    method: GET
    data_selector: output
    params: {}
- name: Suno API
  endpoint:
    path: /suno
    method: GET
    data_selector: output
    params: {}
- name: Flux API
  endpoint:
    path: /flux
    method: GET
    data_selector: output
    params: {}
- name: Faceswap API
  endpoint:
    path: /faceswap
    method: GET
    data_selector: output
    params: {}
- name: AI Hug Video API
  endpoint:
    path: /ai-hug-video
    method: GET
    data_selector: output
    params: {}
- name: create_task
  endpoint:
    path: /create_task
    method: POST
- name: get_task
  endpoint:
    path: /get_task
    method: GET
- name: webhook
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: MidJourney
  endpoint:
    path: /midjourney-api
    method: GET
    data_selector: outputs
    params:
      storage_duration: 3 days
- name: Luma Dream Machine
  endpoint:
    path: /luma-dream-machine-api
    method: GET
    data_selector: outputs
    params:
      storage_policy: managed by Luma's CDN terms
- name: Kling
  endpoint:
    path: /kling-api
    method: GET
    data_selector: outputs
    params:
      non_watermarked_storage_duration: 3 days
- name: Suno
  endpoint:
    path: /suno-api
    method: GET
    data_selector: outputs
    params:
      storage_policy: managed by Suno's CDN terms
      operation_duration: 3 days
- name: Flux
  endpoint:
    path: /flux-api
    method: GET
    data_selector: outputs
    params:
      storage_duration: 3 days
- name: Faceswap
  endpoint:
    path: /faceswap-api
    method: GET
    data_selector: outputs
    params:
      storage_duration: 3 days
- name: AI Hug Video
  endpoint:
    path: /ai-hug-video-api
    method: GET
    data_selector: outputs
    params:
      storage_duration: 1 day
- name: create_task
  endpoint:
    path: /create_task
    method: POST
- name: get_task
  endpoint:
    path: /get_task
    method: GET
- name: webhook
  endpoint:
    path: /api/v1/task
    method: POST
    data_selector: data
    params: {}
- name: Get Task - Suno API
  endpoint:
    path: /suno-api/get-task
    method: GET
- name: Create Task - Udio
  endpoint:
    path: /music-api/create-task
    method: POST
- name: Generate Lyrics
  endpoint:
    path: /song-api/udio-generate-lyrics
    method: POST
- name: Cancel Multiple Tasks - Kling API
  endpoint:
    path: /kling-api/cancel-tasks
    method: POST
- name: Cancel Single Task - Kling API
  endpoint:
    path: /kling-api/cancel-task
    method: POST
- name: Get Task - Kling API
  endpoint:
    path: /kling-api/get-task
    method: GET
- name: Create Task - Kling API
  endpoint:
    path: /kling-api/create-task
    method: POST
- name: Kling Virtual Try-On
  endpoint:
    path: /kling-api/virtual-try-on-api
    method: POST
- name: Kling Effects
  endpoint:
    path: /kling-api/kling-effects-api
    method: POST
- name: Kling Sound
  endpoint:
    path: /kling-api/kling-sound-api
    method: POST
notes:
- Uses API key for authentication.
- Subscription plan provides you with different rights & features for use; you still
  need to either buy PiAPI credits (Pay-as-you-go) or subscribe to Host-Your-Account
  seats ($5~$10/seat/month depending on which API) to actually use the APIs.
- Currently Luma does not offer video preview feature during the generation process.
- Commercial use is allowed for all images generated from the API.
- All generated images are cleared for commercial use.
- Webhook notifications are available for asynchronous workflows.
- Videos generated can be used commercially if produced under a paid subscription.
- Images generated from the API for FLUX.1-dev model will not be available for commercial
  use since BFL has limited that model to non-commercial use only.
- Currently, Kuaishou does not offer API for their Kling model.
- Webhook support for asynchronous processing.
- Integrating our API is a hassle-free setup process with simple HTTPs calls, making
  it easy to integrate within any tech stack.
- Images generated from the FLUX.1-schnell model will be available for commercial
  use.
- Images generated from the FLUX.1-dev model will not be available for commercial
  use.
- Software is provided 'AS-IS' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND
- All sales are final and non-refundable
- Uses API key for authentication
- Easy Integration
- Consistent Results
- Hassle-free Convenience
- Rapid Scalability
- Easily integrated into your development process, allowing your users to easily create
  creative visual content faster using our unofficial Flux API.
- Our API is compatible with all technology stacks, offers fast setup up process,
  and requires no prior AI experience!
- Commercial use is allowed for 3D models generated from the API.
- According to the current Terms Of Service from Luma Labs, it seems that customers
  can use the outputs for commercial purposes if the outputs were produced under Customer’s
  paid subscription allowing for the commercial use of outputs.
- Given the commercial license of the Trellis model, all images generated from our
  API using that model will be available for commercial use as needed by the creators
  or 3D artists.
- Given the Apache2.0 license of the FLUX.1-schnell model, all images generated from
  our API using that model will be available for commercial use as needed by the developers
  or the end-users.
- Currently Luma does not offer this feature as part of the Dream Machine Web platform,
  but when they do, PiAPI will integrate this feature into our supported features.
- Webhook support for asynchronous processing
- Generated videos will have the Kling watermark.
- An API key is required for authorization.
- We do not process sensitive personal information.
- We store your payment information to process your current and future subscriptions.
- Endpoints include both POST for task creation and GET for retrieving task results.
- Unified API architecture simplifies the process.
- Pay-as-you-go service option consumes PiAPI credits.
- Use POST to create a task and GET to retrieve task results.
- Uses Udio to synthesize lyrics.
- Lipsync is priced at $0.1 per 5 seconds.
- The video that you want to lipsync should have at least one CLEAR AND STEADY HUMAN
  face with a visible mouth.
- The video must have at least one clear and steady human face with a visible mouth.
- This only works in kling v1.0.
- The task must be an image-to-video generation task.
- The image_tail_url must not be present.
- For pay-as-you-go users, the plan must be Pro.
- For host-your-account users, the plan must be at least Creator.
- There are no additional charges other than plain image-to-video task.
- Requires setup of connected app in api
- Supports 1-4 JPG/PNG images with a maximum file size of 10MB per image.
- Minimum dimension for images is 300px.
- Supports 1-4 JPG/PNG images
- 'Maximum file size: 10MB per image'
- 'Minimum dimension: 300px'
- Default mode is std mode, use professional_mode = true in param to switch to pro
  mode.
- Some effects require prompt param to gain better performance.
- Some of the effects require prompt param to gain better performance.
- Only tasks that have not yet started, i.e., tasks in the pending state, can be canceled.
- This service allows you access to APIs for the most advanced video generation model
  - Kuaishou's KlingAI.
- Service allows access to APIs for video generation model.
- 'These effects must input prompt: rocket, hearting, fighting, kissing, hugging,
  birthday, water. Otherwise, it is very likely to fail on generation.'
- For birthday effect, input image should contain one human/dog/cat.
- For water effect, input image should contain one human.
- 'These effects must input prompt: rocket,hearting,fighting,kissing,hugging,birthday,water.
  Otherwise, it is very likely to fail on generation.'
- Camera movement parameters must be enclosed in square brackets []
- No space is allowed between the closing bracket ] and the prompt text
- Multiple camera movements can be combined within a single set of brackets
- Maximum of 3 camera movements per bracket
- Camera movement parameters are only effective with the t2v-01-director and i2v-01-director
- Only model 'Qubico/flux1-dev-advanced' supports LoRA and controlnet.
- This page lists all available LoRA and ControlNet models for PiAPI's Flux API, including
  examples of their settings and image results.
- Check Flux with LoRA and Controlnet to learn how to send Flux with LoRA and Controlnet
  task.
- Check Flux with Redux and Fill to learn how to send Flux with variation, inpaint
  and out paint task.
- Pricing $0.03 per image
- Uses X-API-Key for authentication.
- 'Available models: veo3-video, veo3-video-fast'
- Pricing varies based on model and audio generation.
- This endpoint retrieves the output of a Gemini task.
- We use CloudFlare as our CDN provider and API gateway, which enforces a default
  120-second timeout for all requests.
- Image generation failures that return 4xx or 5xx errors are not charged
- 'To prevent time-out errors and avoid wasting tokens, you can try one of the following
  workarounds: Enable Stream Mode or Use the Alternative Domain proxy.piapi.ai.'
- No image response may indicate content policy violation or downgrade to DALLE-3
- Penalties apply to PiAPI users who submit tasks that Midjourney considers incorrect.
- Many features are not yet supported in v7.
- The personalization parameter is not supported.
- The draft parameter is not supported.
- Niji engine v7 is not yet available.
- Penalties apply to PiAPI users who submit tasks that Midjourney considers incorrect.
  This applies exclusively to Pay-As-You-Go users.
- We have decided to discontinue mj API in our system, and would like to introduce
  an alternative.
- We have decided to discontinue mj API in our system.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Only tasks that have not yet started, i.e., tasks in the `pending` state, can be
  canceled.
- PiAPI Penalties on Midjourney Usage
- Detailed Explaination on Midjourney Task Result
- Maximum 10MB file size
- Supports MP4 format only
- Service allows generation of speech audio using a reference voice sample
- 'File Format: MP4 only'
- 'File Size: Maximum 10MB'
- 'Resolution: Maximum 720p'
- 'Frame Limit: Maximum 600 frames per video'
- 'Image Size Limit: Maximum 2048 x 2048 resolution'
- Service allows you to generate speech audio using a reference voice sample.
- $0.04 per generation
- Prediction process includes generating color, model, and normal.
- Requires setup of connected app in PiAPI
- Hunyuan Video Model Can Do NSFW
- Users could upload their video then use the mmaudio API to generate sound of the
  video based on the prompt provided by users.
- $0.0005 per seconds (duration of generated audio)
- Generates audio based on prompt and reference audio with lyrics.
- Uploaded files are automatically deleted after 24 hours
- The service requires a Creator plan or higher
- This endpoint from PiAPI's Joycaption API retrieves the output of the Joycaption
  task where users could check their task output.
- 'Pricing: $0.001/generation'
- 'Always verify your video meets the requirements before submission: Resolution below
  720p, Frame count between 10-240, File size under 10MB, MP4 format.'
- The service currently only supports 2x upscaling.
- 'Always verify your video meets the requirements before submission: Resolution below
  720p, Frame count between 10-240, File size under 10MB, MP4 format'
- The service currently only supports 2x upscaling
- Maximum video resolution is 1024x2048
- Frame count must be between 10 and 2000 frames
- Maximum file size is 20MB
- Supported format is MP4 only
- 'Resolution: Maximum 1024x2048'
- 'Frame count: Between 10 and 2000 frames'
- 'File size: Maximum 20MB'
- 'Format: MP4 only'
- Images generated are stored for 3 days after creation and automatically deleted
  thereafter.
- Operations on generated images (e.g., upscaling, variations) are valid for 3 hours
  post-creation.
- Non-watermarked videos are stored on our servers for 3 days and automatically deleted
  thereafter.
- Output audios are stored on Suno's CDN. Retention policy is managed by Suno's CDN
  terms.
- Output images are stored on our servers for 3 days after creation and automatically
  deleted thereafter.
- Output images are stored on our servers for 1 day after creation and automatically
  deleted thereafter.
- Webhooks are only supported in the Unified API Schema.
- Ensure that the receiving server is accessible by Cloudflare workers.
- Contact us through discord if you are interested in batch API in the future.
- Unified API has built-in support for webhooks.
- Time-consuming tools like video generation may not complete due to Claude's timeout
  limitations
- Add your back-up account in your HYA settings as you would with any normal HYA account,
  just remember to switch the `backup` on.
- 'The back-up account won''t process any job unless one of the following two scenarios
  occurs: None of the active Midjourney accounts have any more fast hours; There''s
  no active account at that moment.'
- User submit all the task inputs to us
- We do all the generations in a later time
- We send all the results to the user
- All the processes are manual for now, we are going to provide batch API in the future
- Most problems are related to using an invalid Discord Authorization Token.
- 'There are two usage modes: Pay-as-you-go and Host-your-account.'
- In Pay-as-you-go mode, users will need to purchase credits.
errors:
- '1100: Error occurred'
- No refunds are offered.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400 Bad Request: Check the request parameters and structure.'
- '404 Not Found: Ensure the task ID is correct.'
- '401 Unauthorized: Verify your API key.'
- '0: No error'
- '200 Success: tasks created before 2024-10-12 02:38:06 +0000 UTC for model ''kling''
  have been canceled'
- '200 Success: tasks created before specified time point have been canceled'
- '200: task {task_id} canceled'
- '200: Success'
- '400: Bad Request'
- '401: Unauthorized'
- 200 Success
- 'RangeError: Incorrect locale information provided'
- '200: success'
- '200 Success: Task successfully created.'
- '400 Bad Request: Check request parameters and body.'
- '0: No error, but check for additional detail.'
- '0: Success'
- 400 Bad Request
- 401 Unauthorized
- '4xx or 5xx errors: Not charged for failed generations'
- 4xx or 5xx errors are not charged
- '0: error'
- 500 Server Error
- '200 Success: The request was successful'
- '200: tasks created before 2024-10-12 02:38:06 +0000 UTC for model ''midjourney''
  have been canceled'
- '200 Success: task {task_id} canceled'
- '200 Success: tasks created before specified time have been canceled'
- '0: no error'
- '400 Bad Request: Invalid input data'
- '401 Unauthorized: Check API key'
- '500 Internal Server Error: Try again later'
- '200 OK: Successful response'
- '400 Bad Request: Check request body for errors'
- '401 Unauthorized: Invalid API key'
- '200: Successful response'
- '200: tasks created before 2024-10-12 02:38:06 +0000 UTC for model ''luma'' have
  been canceled'
- '200 Success: Successful request'
- '0: No error message provided'
- '0: No error, success'
- '200 Success: The request was successful.'
- Error codes may vary for unsuccessful requests.
- '400: Invalid request parameters'
- '403: Insufficient plan level'
- '413'
- 'Error: Details not provided'
- '1100: error code'
- 'Max: 100 (returns error if exceeded)'
- '"no active bot"'
- '"Subscription expired"'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.piapi.ai
  headers:
    Content-Type: application/json
source_metadata: null
