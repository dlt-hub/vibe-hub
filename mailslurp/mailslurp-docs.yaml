resources:
- name: sent_email
  endpoint:
    path: /emails/sent
    method: GET
    data_selector: emails
    params: {}
- name: email_preview
  endpoint:
    path: /emails/{emailId}/preview
    method: GET
    data_selector: preview
    params: {}
- name: getEmail
  endpoint:
    path: /emails/{emailId}
    method: GET
    data_selector: email
    params: {}
- name: replyToEmail
  endpoint:
    path: /emails/{emailId}
    method: PUT
    data_selector: reply
    params: {}
- name: deleteEmail
  endpoint:
    path: /emails/{emailId}
    method: DELETE
    data_selector: delete
    params: {}
- name: getEmailsPaginated
  endpoint:
    path: /emails
    method: GET
    data_selector: emails
    params: {}
- name: sendEmail
  endpoint:
    path: /emails
    method: POST
    data_selector: send
    params: {}
- name: inbox
  endpoint:
    path: /inboxes
    method: GET
    data_selector: inboxes
    params: {}
- name: getInbox
  endpoint:
    path: /inboxes/{inboxId}
    method: GET
    data_selector: inbox
    params:
      inboxId: required
- name: sendEmail
  endpoint:
    path: /inboxes/{inboxId}
    method: POST
    data_selector: sendEmail
    params:
      inboxId: required
- name: deleteInbox
  endpoint:
    path: /inboxes/{inboxId}
    method: DELETE
    data_selector: deleteInbox
    params:
      inboxId: required
- name: updateInbox
  endpoint:
    path: /inboxes/{inboxId}
    method: PATCH
    data_selector: updateInbox
    params:
      inboxId: required
- name: getLatestEmailInInbox
  endpoint:
    path: /get/emails/latestIn
    method: GET
    data_selector: Email
    params:
      inboxId: string
- name: getGravatarUrlForEmailAddress
  endpoint:
    path: /get/emails/gravatarFor
    method: GET
    data_selector: GravatarUrl
    params:
      emailAddress: string
- name: getEmailCount
  endpoint:
    path: /get/emails/emails/count
    method: GET
    data_selector: CountDto
    params:
      inboxId: string
- name: setInboxFavourited
  endpoint:
    path: /put/inboxes/{inboxId}/favourite
    method: PUT
    data_selector: InboxDto
    params:
      inboxId: string
- name: getInboxes
  endpoint:
    path: /get/inboxes
    method: GET
    data_selector: InboxDto[]
    params: {}
- name: getRawEmailContents
  endpoint:
    path: /get/emails/{emailId}/raw
    method: GET
    data_selector: raw email content
    params:
      emailId: required
- name: getRawEmailJson
  endpoint:
    path: /get/emails/{emailId}/raw/json
    method: GET
    data_selector: raw email in JSON
    params:
      emailId: required
- name: getEmailLinks
  endpoint:
    path: /get/emails/{emailId}/links
    method: GET
    data_selector: links found in email
    params:
      emailId: required
- name: getEmailHTML
  endpoint:
    path: /get/emails/{emailId}/html
    method: GET
    data_selector: HTML content of email
    params:
      emailId: required
- name: getEmailHTMLQuery
  endpoint:
    path: /get/emails/{emailId}/htmlQuery
    method: GET
    data_selector: parsed text of email
    params:
      emailId: required
      htmlSelector: required
- name: getEmailHTMLJson
  endpoint:
    path: /get/emails/{emailId}/html/json
    method: GET
    data_selector: HTML content in JSON
    params:
      emailId: required
- name: getEmailContentPart
  endpoint:
    path: /get/emails/{emailId}/contentPart
    method: GET
    data_selector: email content part by content type
    params:
      emailId: required
      contentType: required
- name: downloadBody
  endpoint:
    path: /get/emails/{emailId}/body
    method: GET
    data_selector: plain text body of email
    params:
      emailId: required
- name: getEmailThreads
  endpoint:
    path: /get/emails/threads
    method: GET
    data_selector: email threads
    params: {}
- name: getUnreadEmailCount
  endpoint:
    path: /get/emails/unreadCount
    method: GET
    data_selector: unread email count
    params: {}
- name: inbox
  endpoint:
    path: /inboxes
    method: GET
    data_selector: inboxes
- name: sent_email
  endpoint:
    path: /sent-emails
    method: GET
    data_selector: sentEmails
- name: sendWithSchedule
  endpoint:
    path: /inboxes/{inboxId}/with-schedule
    method: POST
    data_selector: data
    params: {}
- name: sendEmailWithQueue
  endpoint:
    path: /inboxes/{inboxId}/with-queue
    method: POST
    data_selector: data
    params: {}
- name: sendSmtpEnvelope
  endpoint:
    path: /inboxes/{inboxId}/smtp-envelope
    method: POST
    data_selector: data
    params: {}
- name: sendTestEmail
  endpoint:
    path: /inboxes/{inboxId}/send-test-email
    method: POST
    data_selector: data
    params: {}
- name: listInboxRulesets
  endpoint:
    path: /inboxes/{inboxId}/rulesets
    method: GET
    data_selector: content
    params: {}
- name: createInboxRuleset
  endpoint:
    path: /inboxes/{inboxId}/rulesets
    method: POST
    data_selector: data
    params: {}
- name: searchInboxes
  endpoint:
    path: /inboxes/search
    method: POST
    data_selector: content
- name: isEmailAddressAvailable
  endpoint:
    path: /inboxes/available
    method: POST
    data_selector: available
- name: getSmtpAccess
  endpoint:
    path: /inboxes/smtp-access
    method: GET
    data_selector: secureSmtpServerHost
- name: getImapAccess
  endpoint:
    path: /inboxes/imap-access
    method: GET
    data_selector: secureImapServerHost
- name: getInboxSentEmails
  endpoint:
    path: /inboxes/{inboxId}/sent
    method: GET
    data_selector: content
- name: getInboxSentCount
  endpoint:
    path: /inboxes/{inboxId}/sent/count
    method: GET
    data_selector: totalElements
- name: getScheduledJobsByInboxId
  endpoint:
    path: /inboxes/{inboxId}/scheduled-jobs
    method: GET
    data_selector: content
- name: getInboxPlusAddresses
  endpoint:
    path: /inboxes/{inboxId}/plus-addresses
    method: GET
    data_selector: content
- name: inbox
  endpoint:
    path: /get/inboxes/ids
    method: GET
    data_selector: inboxIds
    params: {}
- name: latest_email
  endpoint:
    path: /get/inboxes/getLatestEmail
    method: GET
    data_selector: email
    params:
      inboxId: required
      timeoutMillis: required
- name: inbox_exists
  endpoint:
    path: /get/inboxes/exists
    method: GET
    data_selector: exists
    params:
      emailAddress: required
- name: inbox_count
  endpoint:
    path: /get/inboxes/count
    method: GET
    data_selector: totalElements
    params: {}
- name: sms_messages
  endpoint:
    path: /sms
    method: GET
    data_selector: content
- name: sent_sms
  endpoint:
    path: /phone/numbers/{phoneNumberId}/sms-sent
    method: GET
    data_selector: content
- name: emergency_addresses
  endpoint:
    path: /phone/emergency-addresses
    method: GET
    data_selector: content
- name: consent_status
  endpoint:
    path: /phone/consent
    method: GET
    data_selector: consented
- name: phone_numbers
  endpoint:
    path: /phone/numbers
    method: GET
    data_selector: content
- name: getTransformers
  endpoint:
    path: /get/ai/transformer
    method: GET
    data_selector: transformers
    params: {}
- name: createTransformer
  endpoint:
    path: /post/ai/transformer
    method: POST
    data_selector: transformer
    params: {}
- name: deleteTransformers
  endpoint:
    path: /delete/ai/transformer
    method: DELETE
    data_selector: result
    params: {}
- name: getAlias
  endpoint:
    path: /get/aliases/{aliasId}
    method: GET
    data_selector: alias
    params: {}
- name: updateAlias
  endpoint:
    path: /put/aliases/{aliasId}
    method: PUT
    data_selector: updatedAlias
    params: {}
- name: deleteAlias
  endpoint:
    path: /delete/aliases/{aliasId}
    method: DELETE
    data_selector: result
    params: {}
- name: deleteSmsMessages
  endpoint:
    path: /delete/sms
    method: DELETE
    data_selector: null
    params:
      phoneNumberId: null
- name: getSmsMessage
  endpoint:
    path: /get/sms/{smsId}
    method: GET
    data_selector: SmsDto
    params:
      smsId: null
- name: deleteSmsMessage
  endpoint:
    path: /delete/sms/{smsId}
    method: DELETE
    data_selector: null
    params:
      smsId: null
- name: getUnreadSmsCount
  endpoint:
    path: /get/sms/unreadCount
    method: GET
    data_selector: UnreadCount
    params: {}
- name: getSentSmsMessagesPaginated
  endpoint:
    path: /get/sms/sent
    method: GET
    data_selector: PageSentSmsProjection
    params:
      phoneNumber: null
      page: null
      size: null
      sort: null
      since: null
      before: null
      search: null
- name: deleteSentSmsMessages
  endpoint:
    path: /delete/sms/sent
    method: DELETE
    data_selector: null
    params:
      phoneNumberId: null
- name: getSentSmsMessage
  endpoint:
    path: /get/sms/sent/{sentSmsId}
    method: GET
    data_selector: SentSmsDto
    params:
      sentSmsId: null
- name: deleteSentSmsMessage
  endpoint:
    path: /delete/sms/sent/{sentSmsId}
    method: DELETE
    data_selector: null
    params:
      sentSmsId: null
- name: getSentSmsCount
  endpoint:
    path: /get/sms/sent/count
    method: GET
    data_selector: CountDto
    params: {}
- name: getSmsCount
  endpoint:
    path: /get/sms/count
    method: GET
    data_selector: CountDto
    params: {}
- name: getEmails
  endpoint:
    path: /get/inboxes/{inboxId}/emails
    method: GET
    data_selector: content
    params:
      inboxId: path
      size: query
      limit: query
      sort: query
      retryTimeout: query
      minCount: query
- name: getInboxEmailsPaginated
  endpoint:
    path: /get/inboxes/{inboxId}/emails/paginated
    method: GET
    data_selector: content
    params:
      inboxId: path
      page: query
      size: query
      sort: query
      since: query
      before: query
- name: getInboxEmailCount
  endpoint:
    path: /get/inboxes/{inboxId}/emails/count
    method: GET
    data_selector: totalElements
    params:
      inboxId: path
- name: getDeliveryStatusesByInboxId
  endpoint:
    path: /get/inboxes/{inboxId}/delivery-status
    method: GET
    data_selector: content
    params:
      inboxId: path
      page: query
      size: query
      sort: query
      since: query
      before: query
- name: getInboxTags
  endpoint:
    path: /get/inboxes/tags
    method: GET
    data_selector: content
    params:
      page: query
      size: query
      sort: query
      searchFilter: query
- name: getInboxTagsPaginated
  endpoint:
    path: /get/inboxes/tags/paginated
    method: GET
    data_selector: content
    params:
      page: query
      size: query
      sort: query
      searchFilter: query
- name: getInboxesByTag
  endpoint:
    path: /get/inboxes/tags/inboxes
    method: GET
    data_selector: content
    params:
      tag: query
      page: query
      size: query
      sort: query
      searchFilter: query
- name: getAllScheduledJobs
  endpoint:
    path: /get/inboxes/scheduled-jobs
    method: GET
    data_selector: content
    params:
      page: query
      size: query
      sort: query
      since: query
      before: query
      inboxId: query
- name: getScheduledJob
  endpoint:
    path: /get/inboxes/scheduled-jobs/{jobId}
    method: GET
    data_selector: id
    params:
      jobId: path
- name: cancelScheduledJob
  endpoint:
    path: /delete/inboxes/scheduled-jobs/{jobId}
    method: DELETE
    data_selector: id
    params:
      jobId: path
- name: getAllPlusAddresses
  endpoint:
    path: /get/inboxes/plus-addresses
    method: GET
    data_selector: content
    params:
      page: query
      size: query
      sort: query
      inboxId: query
- name: getInboxPlusAddressById
  endpoint:
    path: /get/inboxes/plus-addresses/{plusAddressId}
    method: GET
    data_selector: id
    params:
      plusAddressId: path
      inboxId: query
- name: getAllInboxes
  endpoint:
    path: /get/inboxes/paginated
    method: GET
    data_selector: content
    params:
      page: query
      size: query
      sort: query
      favourite: query
      search: query
      tag: query
      since: query
      before: query
- name: getOutboxes
  endpoint:
    path: /get/inboxes/outboxes
    method: GET
    data_selector: content
    params:
      page: query
      size: query
      sort: query
- name: getOrganizationInboxes
  endpoint:
    path: /get/inboxes/organization
    method: GET
    data_selector: content
    params:
      page: query
      size: query
      sort: query
      searchFilter: query
      since: query
      before: query
- name: getAllInboxesOffsetPaginated
  endpoint:
    path: /get/inboxes/offset-paginated
    method: GET
    data_selector: content
    params:
      page: query
      size: query
      sort: query
      favourite: query
      search: query
      tag: query
      since: query
      before: query
- name: uploadAttachment
  endpoint:
    path: /attachments
    method: post
    data_selector: records
    params: {}
- name: deleteAllAttachments
  endpoint:
    path: /attachments
    method: delete
    data_selector: records
    params: {}
- name: getAttachment
  endpoint:
    path: /attachments/{attachmentId}
    method: get
    data_selector: records
    params: {}
- name: downloadAttachmentAsBytes
  endpoint:
    path: /attachments/{attachmentId}/bytes
    method: get
    data_selector: records
    params: {}
- name: getBouncedRecipients
  endpoint:
    path: /bounce/recipients
    method: get
    data_selector: records
    params: {}
- name: getComplaints
  endpoint:
    path: /bounce/complaints
    method: get
    data_selector: records
    params: {}
- name: getAccountBounceBlockStatus
  endpoint:
    path: /bounce/account-block
    method: get
    data_selector: records
    params: {}
- name: getAliases
  endpoint:
    path: /get/aliases
    method: GET
    data_selector: content
    params: {}
- name: createAlias
  endpoint:
    path: /post/aliases
    method: POST
    data_selector: id
    params: {}
- name: getAliasEmails
  endpoint:
    path: /get/aliases/{aliasId}/emails
    method: GET
    data_selector: content
    params:
      aliasId: required
- name: sendAliasEmail
  endpoint:
    path: /post/aliases/{aliasId}/emails
    method: POST
    data_selector: id
    params:
      aliasId: required
- name: getAliasThreads
  endpoint:
    path: /get/aliases/{aliasId}/threads
    method: GET
    data_selector: content
    params:
      aliasId: required
- name: connectorSmtpConnection
  endpoint:
    path: /connectors/{id}/smtp
    method: PATCH
    data_selector: result
    params: {}
- name: connectorImapConnection
  endpoint:
    path: /connectors/{id}/imap
    method: POST
    data_selector: result
    params: {}
- name: sendEmailQuery
  endpoint:
    path: /post/sendEmailQuery
    method: POST
    data_selector: response
- name: createNewEmailAddress
  endpoint:
    path: /post/newEmailAddress
    method: POST
    data_selector: response
- name: createRandomInbox
  endpoint:
    path: /post/createInbox
    method: POST
    data_selector: response
- name: emptyInbox
  endpoint:
    path: /delete/emptyInbox
    method: DELETE
    data_selector: response
- name: deleteEmailAddress
  endpoint:
    path: /delete/deleteEmailAddress
    method: DELETE
    data_selector: response
- name: getConnector
  endpoint:
    path: /get/connectors/{id}
    method: GET
    data_selector: response
- name: updateConnector
  endpoint:
    path: /put/connectors/{id}
    method: PUT
    data_selector: response
- name: deleteConnector
  endpoint:
    path: /delete/connectors/{id}
    method: DELETE
    data_selector: response
- name: getConnectors
  endpoint:
    path: /get/connectors
    method: GET
    data_selector: response
- name: createConnector
  endpoint:
    path: /post/connectors
    method: POST
    data_selector: response
- name: deleteAllConnector
  endpoint:
    path: /delete/connectors
    method: DELETE
    data_selector: response
- name: export
  endpoint:
    path: /export
    method: GET
    data_selector: exportLink
    params:
      exportType: string
      apiKey: string
- name: form
  endpoint:
    path: /forms
    method: POST
    data_selector: response
    params: {}
- name: group
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: guest_portal
  endpoint:
    path: /guest-portal
    method: GET
    data_selector: guestPortals
    params: {}
- name: imap_server
  endpoint:
    path: /imap/server
    method: POST
    data_selector: result
    params: {}
- name: deleteDomain
  endpoint:
    path: /delete/domains/{id}
    method: DELETE
- name: getDomains
  endpoint:
    path: /get/domains
    method: GET
- name: createDomain
  endpoint:
    path: /post/domains
    method: POST
- name: getDomainWildcardCatchAllInbox
  endpoint:
    path: /get/domains/{id}/wildcard
    method: GET
- name: addDomainWildcardCatchAll
  endpoint:
    path: /post/domains/{id}/wildcard
    method: POST
- name: getMailSlurpDomains
  endpoint:
    path: /get/domains/mailslurp-domains
    method: GET
- name: getDomainIssues
  endpoint:
    path: /get/domains/issues
    method: GET
- name: getAvailableDomains
  endpoint:
    path: /get/domains/available-domains
    method: GET
- name: validateEmailAddressList
  endpoint:
    path: /post/email-verification/email-address-list
    method: POST
- name: getValidationRequests
  endpoint:
    path: /get/email-verification/validation-requests
    method: GET
- name: getExpiredInboxes
  endpoint:
    path: /get/expired
    method: GET
- name: getExpiredInboxRecord
  endpoint:
    path: /get/expired/{expiredId}
    method: GET
- name: getExpiredInboxByInboxId
  endpoint:
    path: /get/expired/inbox/{inboxId}
    method: GET
- name: getExpirationDefaults
  endpoint:
    path: /get/expired/defaults
    method: GET
- name: exportEntities
  endpoint:
    path: /get/export
    method: GET
- name: getExportLink
  endpoint:
    path: /post/export
    method: POST
- name: getConnectorEvents
  endpoint:
    path: /connectors/{id}/events
    method: GET
    data_selector: content
    params:
      id: ''
- name: getConnectorProviderSettings
  endpoint:
    path: /connectors/provider-settings
    method: GET
    data_selector: googleSettings
    params: {}
- name: getAllConnectorEvents
  endpoint:
    path: /connectors/events
    method: GET
    data_selector: content
    params: {}
- name: getConnectorEvent
  endpoint:
    path: /connectors/events/{id}
    method: GET
    data_selector: id
    params:
      id: ''
- name: getConnectorByName
  endpoint:
    path: /connectors/by-name
    method: GET
    data_selector: present
    params:
      name: ''
- name: getConnectorByInboxId
  endpoint:
    path: /connectors/by-inbox-id
    method: GET
    data_selector: present
    params:
      inboxId: ''
- name: getConnectorByEmailAddress
  endpoint:
    path: /connectors/by-email-address
    method: GET
    data_selector: present
    params:
      emailAddress: ''
- name: sendOptInConsentForEmailAddress
  endpoint:
    path: /consent/opt-in/send
    method: POST
    data_selector: sent
    params:
      emailAddress: ''
- name: getOptInIdentities
  endpoint:
    path: /consent/opt-in
    method: GET
    data_selector: content
    params: {}
- name: checkSendingConsentForEmailAddress
  endpoint:
    path: /consent/opt-in/sending-consent
    method: GET
    data_selector: verificationCodeSent
    params:
      emailAddress: ''
- name: getContacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: content
    params: {}
- name: getContact
  endpoint:
    path: /contacts/{contactId}
    method: GET
    data_selector: id
    params:
      contactId: ''
- name: deleteContact
  endpoint:
    path: /contacts/{contactId}
    method: DELETE
    data_selector: id
    params:
      contactId: ''
- name: getAllContacts
  endpoint:
    path: /contacts/paginated
    method: GET
    data_selector: content
    params: {}
- name: getDomain
  endpoint:
    path: /domains/{id}
    method: GET
    data_selector: id
    params:
      id: ''
- name: inbox_forwarders
  endpoint:
    path: /forwarders
    method: GET
    data_selector: content
    params: {}
- name: test_inbox_forwarders
  endpoint:
    path: /forwarders
    method: PUT
    data_selector: matches
    params: {}
- name: create_inbox_forwarder
  endpoint:
    path: /forwarders
    method: POST
    data_selector: id
    params: {}
- name: delete_inbox_forwarders
  endpoint:
    path: /forwarders
    method: DELETE
    data_selector: ''
    params: {}
- name: get_inbox_forwarder
  endpoint:
    path: /forwarders/{id}
    method: GET
    data_selector: field
    params: {}
- name: update_inbox_forwarder
  endpoint:
    path: /forwarders/{id}
    method: PUT
    data_selector: id
    params: {}
- name: rulesets
  endpoint:
    path: /rulesets
    method: GET
- name: sentEmails
  endpoint:
    path: /sent
    method: GET
- name: deleteInboxRepliers
  endpoint:
    path: /delete/repliers
    method: DELETE
    data_selector: ''
    params:
      inboxId: ''
- name: getInboxReplierEvents
  endpoint:
    path: /get/repliers/{id}/events
    method: GET
    data_selector: ''
    params:
      id: ''
      page: ''
      size: ''
      sort: ''
- name: getAllInboxReplierEvents
  endpoint:
    path: /get/repliers/events
    method: GET
    data_selector: ''
    params:
      inboxReplierId: ''
      inboxId: ''
      emailId: ''
      sentId: ''
      page: ''
      size: ''
      sort: ''
- name: verifyEmailAddress
  endpoint:
    path: /post/mail-server/verify/email-address
    method: POST
    data_selector: ''
    params:
      mailServerDomain: ''
      emailAddress: ''
      senderEmailAddress: ''
      port: ''
- name: getIpAddress
  endpoint:
    path: /post/mail-server/describe/ip-address
    method: POST
    data_selector: ''
    params:
      name: ''
- name: getAllMissedEmails
  endpoint:
    path: /get/missed-emails
    method: GET
    data_selector: ''
    params:
      page: ''
      size: ''
      sort: ''
      searchFilter: ''
      since: ''
      before: ''
      inboxId: ''
- name: raw_sent_email
  endpoint:
    path: /get/sent/{emailId}/raw/json
    method: GET
    data_selector: content
    params: {}
- name: sent_tracking_pixels
  endpoint:
    path: /get/sent/tracking-pixels
    method: GET
    data_selector: content
    params: {}
- name: sent_queue_results
  endpoint:
    path: /get/sent/queue-results
    method: GET
    data_selector: content
    params: {}
- name: sent_organization_emails
  endpoint:
    path: /get/sent/organization
    method: GET
    data_selector: content
    params: {}
- name: sent_delivery_statuses
  endpoint:
    path: /get/sent/delivery-status
    method: GET
    data_selector: content
    params: {}
- name: sent_delivery_status
  endpoint:
    path: /get/sent/delivery-status/{deliveryId}
    method: GET
    data_selector: content
    params: {}
- name: wait_for_delivery_statuses
  endpoint:
    path: /get/sent/delivery-status/wait-for
    method: GET
    data_selector: content
    params: {}
- name: template
  endpoint:
    path: /get/templates/{templateId}
    method: GET
    data_selector: content
    params: {}
- name: templates
  endpoint:
    path: /get/templates
    method: GET
    data_selector: content
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: WebhookDto
    params: {}
- name: waitForMatchingEmails
  endpoint:
    path: /post/waitForMatchingEmails
    method: POST
    data_selector: matches
    params:
      inboxId: query
      count: query
      before: query
      since: query
      sort: query
      delay: query
      timeout: query
      unreadOnly: query
- name: waitForLatestSms
  endpoint:
    path: /post/waitForLatestSms
    method: POST
    data_selector: phoneNumberId
    params:
      phoneNumberId: query
      timeout: query
      unreadOnly: query
      before: query
      since: query
      sortDirection: query
      delay: query
- name: waitForNthEmail
  endpoint:
    path: /get/waitForNthEmail
    method: GET
    data_selector: index
    params:
      inboxId: query
      index: query
      timeout: query
      unreadOnly: query
      since: query
      before: query
      sort: query
      delay: query
- name: waitForLatestEmail
  endpoint:
    path: /get/waitForLatestEmail
    method: GET
    data_selector: id
    params:
      inboxId: query
      timeout: query
      unreadOnly: query
      before: query
      since: query
      sort: query
      delay: query
- name: waitForEmailCount
  endpoint:
    path: /get/waitForEmailCount
    method: GET
    data_selector: count
    params:
      inboxId: query
      count: query
      timeout: query
      unreadOnly: query
      before: query
      since: query
      sort: query
      delay: query
- name: generateBimiRecord
  endpoint:
    path: /tools/generate-bimi-record
    method: POST
    data_selector: results
- name: getFakeEmailById
  endpoint:
    path: /tools/fake-email
    method: GET
    data_selector: email
    params:
      id: string
- name: createNewFakeEmailAddress
  endpoint:
    path: /tools/fake-email
    method: POST
    data_selector: emailAddress
- name: deleteNewFakeEmailAddress
  endpoint:
    path: /tools/fake-email
    method: DELETE
    data_selector: results
    params:
      emailAddress: string
- name: checkEmailFeaturesClientSupport
  endpoint:
    path: /tools/check-email-features-client-support
    method: POST
    data_selector: result
- name: getFakeEmailsForAddress
  endpoint:
    path: /tools/fake-emails
    method: GET
    data_selector: results
    params:
      emailAddress: string
- name: getFakeEmailRaw
  endpoint:
    path: /tools/fake-email/html
    method: GET
    data_selector: results
    params:
      id: string
- name: getFakeEmailByEmailAddress
  endpoint:
    path: /tools/fake-email/byEmailAddress
    method: GET
    data_selector: email
    params:
      emailAddress: string
- name: getAllTrackingPixels
  endpoint:
    path: /tracking/pixels
    method: GET
    data_selector: content
- name: createTrackingPixel
  endpoint:
    path: /tracking/pixels
    method: POST
    data_selector: id
- name: getTrackingPixel
  endpoint:
    path: /tracking/pixels/{id}
    method: GET
    data_selector: results
- name: getUserInfo
  endpoint:
    path: /user/info
    method: GET
    data_selector: accountState
- name: getEntityFavorites
  endpoint:
    path: /user/favorites
    method: GET
    data_selector: content
- name: getEntityEvents
  endpoint:
    path: /user/events
    method: GET
    data_selector: content
- name: getEntityAutomations
  endpoint:
    path: /user/automations
    method: GET
    data_selector: content
- name: waitFor
  endpoint:
    path: /waitFor
    method: POST
    data_selector: results
- name: waitForSms
  endpoint:
    path: /waitForSms
    method: POST
    data_selector: results
- name: waitForMatchingFirstEmail
  endpoint:
    path: /waitForMatchingFirstEmail
    method: POST
    data_selector: results
- name: webhook_results
  endpoint:
    path: /webhooks/results
    method: GET
    data_selector: content
    params: {}
- name: webhook_endpoints
  endpoint:
    path: /webhooks/endpoints
    method: GET
    data_selector: content
    params: {}
- name: account_webhooks
  endpoint:
    path: /webhooks/account/paginated
    method: GET
    data_selector: content
    params: {}
- name: phone_number_webhooks
  endpoint:
    path: /phone/numbers/{phoneId}/webhooks/paginated
    method: GET
    data_selector: content
    params: {}
- name: getInboxWebhooksPaginated
  endpoint:
    path: /get/inboxes/{inboxId}/webhooks/paginated
    method: GET
    data_selector: content
    params:
      inboxId: ''
- name: deleteWebhook
  endpoint:
    path: /delete/inboxes/{inboxId}/webhooks/{webhookId}
    method: DELETE
    data_selector: ''
    params:
      inboxId: ''
      webhookId: ''
- name: BOUNCE
  endpoint:
    path: /webhooks/bounce
    method: POST
    data_selector: payload
- name: BOUNCE_RECIPIENT
  endpoint:
    path: /webhooks/bounce_recipient
    method: POST
    data_selector: payload
- name: DELIVERY_STATUS
  endpoint:
    path: /webhooks/delivery_status
    method: POST
    data_selector: payload
- name: EMAIL_OPENED
  endpoint:
    path: /webhooks/email_opened
    method: POST
    data_selector: payload
- name: EMAIL_READ
  endpoint:
    path: /webhooks/email_read
    method: POST
    data_selector: payload
- name: EMAIL_RECEIVED
  endpoint:
    path: /webhooks/email_received
    method: POST
    data_selector: payload
- name: createWebhookForAITransformer
  endpoint:
    path: /ai-transformers/{transformerId}/webhooks
    method: POST
    data_selector: ''
    params: {}
- name: getWebhook
  endpoint:
    path: /webhooks/{webhookId}
    method: GET
    data_selector: ''
    params: {}
- name: deleteWebhookById
  endpoint:
    path: /webhooks/{webhookId}
    method: DELETE
    data_selector: ''
    params: {}
- name: updateWebhook
  endpoint:
    path: /webhooks/{webhookId}
    method: PATCH
    data_selector: ''
    params: {}
- name: waitForWebhookResults
  endpoint:
    path: /webhooks/{webhookId}/wait
    method: GET
    data_selector: ''
    params: {}
- name: getWebhookResults
  endpoint:
    path: /webhooks/{webhookId}/results
    method: GET
    data_selector: ''
    params: {}
- name: getWebhookResultsCount
  endpoint:
    path: /webhooks/{webhookId}/results/count
    method: GET
    data_selector: ''
    params: {}
- name: getTestWebhookPayload
  endpoint:
    path: /webhooks/test
    method: GET
    data_selector: ''
    params: {}
- name: getTestWebhookPayloadNewSms
  endpoint:
    path: /webhooks/test/new-sms-payload
    method: GET
    data_selector: ''
    params: {}
- name: getTestWebhookPayloadNewEmail
  endpoint:
    path: /webhooks/test/new-email-payload
    method: GET
    data_selector: ''
    params: {}
- name: getTestWebhookPayloadNewContact
  endpoint:
    path: /webhooks/test/new-contact-payload
    method: GET
    data_selector: ''
    params: {}
- name: new_ai_transform_result
  endpoint:
    path: /webhooks/new_ai_transform_result
    method: POST
    data_selector: payload
- name: new_attachment
  endpoint:
    path: /webhooks/new_attachment
    method: POST
    data_selector: payload
- name: new_contact
  endpoint:
    path: /webhooks/new_contact
    method: POST
    data_selector: payload
- name: new_email
  endpoint:
    path: /webhooks/new_email
    method: POST
    data_selector: payload
- name: new_guest_user
  endpoint:
    path: /webhooks/new_guest_user
    method: POST
    data_selector: payload
- name: NEW_SMS
  endpoint:
    path: /webhooks/new-sms
    method: POST
    data_selector: payload
- name: inbox_emails
  endpoint:
    path: /inboxController/getInboxEmailsPaginated
    method: GET
    data_selector: emails
- name: send_email
  endpoint:
    path: /inboxController/sendEmail
    method: POST
    data_selector: email
- name: wait_for_latest_email
  endpoint:
    path: /waitForController/waitForLatestEmail
    method: GET
    data_selector: email
- name: inbox
  endpoint:
    path: /inboxes
    method: POST
    data_selector: inbox
    params: {}
- name: email
  endpoint:
    path: /emails
    method: GET
    data_selector: emails
    params: {}
- name: sms
  endpoint:
    path: /sms
    method: GET
    data_selector: smsMessages
    params: {}
- name: create_phone_number
  endpoint:
    path: /phone-numbers
    method: POST
    data_selector: phoneNumber
- name: phone_numbers
  endpoint:
    path: /phone/numbers
    method: GET
    data_selector: content
    params:
      size: 1
      phoneCountry: US
- name: sms_messages
  endpoint:
    path: /sms/messages
    method: GET
    data_selector: content
    params: {}
- name: send_sms
  endpoint:
    path: /phone/send-sms
    method: POST
    data_selector: content
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: content
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: email_opened
  endpoint:
    path: /webhooks/email_opened
    method: POST
    data_selector: payload
- name: email_read
  endpoint:
    path: /webhooks/email_read
    method: POST
    data_selector: payload
- name: email_received
  endpoint:
    path: /webhooks/email_received
    method: POST
    data_selector: payload
- name: new_ai_transform_result
  endpoint:
    path: /webhooks/new_ai_transform_result
    method: POST
    data_selector: payload
- name: new_attachment
  endpoint:
    path: /webhooks/new_attachment
    method: POST
    data_selector: payload
- name: new_contact
  endpoint:
    path: /webhooks/new_contact
    method: POST
    data_selector: payload
- name: new_email
  endpoint:
    path: /webhook/new_email
    method: POST
    data_selector: payload
- name: new_guest_user
  endpoint:
    path: /webhook/new_guest_user
    method: POST
    data_selector: payload
- name: new_sms
  endpoint:
    path: /webhook/new_sms
    method: POST
    data_selector: payload
- name: inbox
  endpoint:
    path: /inboxes
    method: POST
    data_selector: inboxId
- name: email
  endpoint:
    path: /emails
    method: GET
    data_selector: emails
- name: sms
  endpoint:
    path: /sms
    method: GET
    data_selector: sms
- name: inbox
  endpoint:
    path: /inboxes
    method: GET
    data_selector: inboxes
- name: email
  endpoint:
    path: /emails
    method: GET
    data_selector: emails
- name: inbox
  endpoint:
    path: /inboxes
    method: POST
    data_selector: inbox
    params: {}
- name: email
  endpoint:
    path: /emails
    method: GET
    data_selector: emails
    params: {}
- name: inbox
  endpoint:
    path: /inboxes
    method: GET
    data_selector: content
- name: email
  endpoint:
    path: /emails
    method: GET
    data_selector: content
- name: inbox
  endpoint:
    path: /inboxes
    method: POST
    data_selector: inbox
    params: {}
- name: email
  endpoint:
    path: /emails
    method: POST
    data_selector: email
    params: {}
- name: inbox
  endpoint:
    path: /inboxes
    method: GET
    data_selector: content
- name: send_email
  endpoint:
    path: /emails
    method: POST
    data_selector: email
- name: email
  endpoint:
    path: /EmailController
    method: GET
- name: inbox
  endpoint:
    path: /InboxController
    method: GET
- name: wait_for
  endpoint:
    path: /WaitForController
    method: GET
- name: attachment
  endpoint:
    path: /AttachmentController
    method: GET
- name: inbox
  endpoint:
    path: /inboxes
    method: GET
    data_selector: content
- name: send_email
  endpoint:
    path: /emails/send
    method: POST
    data_selector: sent
- name: create_inbox
  endpoint:
    path: /inboxes
    method: POST
    data_selector: inbox
    params: {}
- name: get_inbox_by_name
  endpoint:
    path: /inboxes/name/{name}
    method: GET
    data_selector: inbox
    params: {}
- name: get_all_inboxes
  endpoint:
    path: /inboxes
    method: GET
    data_selector: inboxes
    params: {}
- name: send_email
  endpoint:
    path: /emails/send
    method: POST
    data_selector: email
    params: {}
- name: inbox
  endpoint:
    path: /inboxes
    method: GET
    data_selector: inboxes
- name: emails
  endpoint:
    path: /emails
    method: GET
    data_selector: emails
- name: sent_emails
  endpoint:
    path: /sent
    method: GET
    data_selector: content
- name: inbox
  endpoint:
    path: /inboxes
    method: POST
    data_selector: id
- name: email
  endpoint:
    path: /emails
    method: POST
    data_selector: id
- name: inbox
  endpoint:
    path: /inboxes
    method: GET
    data_selector: inboxes
- name: email
  endpoint:
    path: /emails
    method: GET
    data_selector: emails
- name: inbox
  endpoint:
    path: /inboxes
    method: POST
    data_selector: inbox
- name: email
  endpoint:
    path: /emails
    method: GET
    data_selector: emails
- name: sms
  endpoint:
    path: /sms
    method: GET
    data_selector: sms
- name: smtp_server
  endpoint:
    path: /smtp
    method: GET
    data_selector: servers
- name: imap_server
  endpoint:
    path: /imap
    method: GET
    data_selector: servers
- name: imap_smtp_access
  endpoint:
    path: /inboxes/imap-smtp-access
    method: GET
    data_selector: ''
    params: {}
- name: imap_access
  endpoint:
    path: /inboxes/imap-access
    method: GET
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: mailbox
  endpoint:
    path: /LIST
    method: GET
- name: select_mailbox
  endpoint:
    path: /SELECT
    method: GET
- name: search_emails
  endpoint:
    path: /SEARCH
    method: GET
- name: imap-smtp-access
  endpoint:
    path: /inboxes/imap-smtp-access
    method: GET
    data_selector: ''
    params: {}
- name: imap-access
  endpoint:
    path: /inboxes/imap-access
    method: GET
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: smtp_access
  endpoint:
    path: /inboxes/smtp-access
    method: GET
    data_selector: ''
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: imap-smtp-access
  endpoint:
    path: /inboxes/imap-smtp-access
    method: GET
    data_selector: ''
    params: {}
- name: smtp-access
  endpoint:
    path: /inboxes/smtp-access
    method: GET
    data_selector: ''
    params: {}
- name: imap-smtp-access
  endpoint:
    path: /inboxes/imap-smtp-access
    method: GET
    data_selector: ''
    params: {}
- name: smtp-access
  endpoint:
    path: /inboxes/smtp-access
    method: GET
    data_selector: ''
    params: {}
- name: imap-smtp-access
  endpoint:
    path: /inboxes/imap-smtp-access
    method: GET
- name: smtp-access
  endpoint:
    path: /inboxes/smtp-access
    method: GET
- name: smtp_access_details
  endpoint:
    path: /getImapSmtpAccessDetails
    method: GET
    data_selector: access
- name: create_inbox
  endpoint:
    path: /createInboxWithOptions
    method: POST
    data_selector: inbox
- name: send_email
  endpoint:
    path: /sendMail
    method: POST
    data_selector: sent
- name: wait_for_latest_email
  endpoint:
    path: /waitForLatestEmail
    method: GET
    data_selector: email
- name: get_email_preview_urls
  endpoint:
    path: /getEmailPreviewURLs
    method: GET
    data_selector: accessUrls
- name: createConnectorWithOptions
  endpoint:
    path: /api/connector
    method: POST
- name: testConnectorImapConnection
  endpoint:
    path: /api/connector/test
    method: POST
- name: syncConnector
  endpoint:
    path: /api/connector/sync
    method: POST
notes:
- Some emails may not arrive immediately.
- Emails can be large when attachments and content are fetched, responses typically
  include a preview.
- Inboxes can be either SMTP or HTTP mailboxes.
- To get emails in an inbox, use the WaitFor and Inbox Controller methods.
- Inboxes can be used to send and receive emails.
- Emails sent to the alias address will be forwarded to the hidden email address it
  was created for.
- Webhooks can be attached to inboxes and MailSlurp will POST a webhook payload to
  the URL specified whenever the webhook's event is triggered.
- API_KEY is required for authentication.
- Inboxes can be created with randomly assigned email addresses.
- Requires a free account and API Key.
- To enable API phone creation you must first have a paid plan and enable API creation
  on the phone number overview page in the dashboard.
- Each create phone number call bills your account for a phone number rental of one
  month.
- Ensure API key is kept secure and not exposed in client-side code.
- Webhooks are guaranteed to be delivered at least once.
- Use the messageId unique to all payloads to avoid processing a message twice.
- Requires setup of connected app in MailSlurp dashboard
- MailSlurp API requires an API key for access.
- Uses API Key for authentication
- MailSlurp uses 'Keep-Alive' connections for many endpoints to allow your code to
  wait for conditions. It is important to set a connection timeout on the client.
- 'MailSlurp can be used for anything email related: sending and receiving emails,
  creating email addresses, or testing email processes.'
- Create a free account and copy the key from your dashboard.
- No MailServer is required
- Ensure API key is kept secure and not exposed in public repositories
- Inboxes can be created with a random or custom email address.
- Ephemeral inboxes can be created with expiration.
- Emails are stored in the inbox that receives them.
- The best way to receive emails at scale is by using webhooks.
- Sending to non-MailSlurp domains is enabled for free accounts. Paid accounts must
  use double opt-in consent to send external recipients or whitelist domains with
  support.
- Don't load app.mailslurp.com in automated browser tests — instead use the MailSlurp
  SDKs programmatically or the visual test interface.
- MailSlurp requires an API Key.
- Can create unlimited, disposable email addresses for testing.
- No MailServer is required.
- Obtain and configure an API KEY
- You can authenticate IMAP and SMTP request as either an account or a specific inbox.
- MailSlurp mailservers support TLS/SSL and STARTTLS using Let's Encrypt certificates
  issued by ACME.
- IMAP UIDs differ from email IDs in MailSlurp. Use IDs to fetch emails using the
  MailSlurp API and UIDs to fetch emails using IMAP.
- Use an inbox ID when fetching credentials to scope your access.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Use INBOX to list all mailboxes in your account if using account mode access credentials.
- Use an inbox ID when fetching credentials to scope your access so that clients can
  only interact with that inbox.
- MailSlurp SMTP servers support anonymous delivery and sending via AUTH PLAIN, and
  AUTH LOGIN mechanisms.
- SMTP connection are only available on inboxes created with the SMTP_INBOX type.
- Requires setup of API Key
- MailSlurp API endpoints use pagination to return lists of entities.
- The email and inbox endpoints have a fixed page size of 20 items per page.
errors:
- '400 Bad Request: Check the request parameters.'
- '404 Not Found: The specified email ID does not exist.'
- '401 Unauthorized: Check your API key.'
- '400 Bad Request: Check request parameters.'
- '404 Not Found: Ensure email ID exists.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify API key.'
- '404 Not Found: Endpoint does not exist.'
- '401 Unauthorized: Validate your API Key.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Check API key validity.'
- '400 Bad Request: Check the webhook configuration or payload format.'
- '401 Unauthorized: Verify your authentication credentials.'
- '404 Not Found: Ensure the webhook URL is correct.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Ensure your API key is valid.'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Ensure your API key is valid'
- '404 Not Found: Resource does not exist'
- '401 Unauthorized: Check your API key or authentication.'
- '401 Unauthorized: Check if the API key is correctly set.'
- '404 Not Found: Ensure the endpoint exists.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check API Key'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - getImapSmtpAccessDetails
client:
  base_url: https://api.mailslurp.com
  auth:
    type: apikey
    location: header
    header_name: x-api-key
source_metadata: null
