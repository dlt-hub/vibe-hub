resources:
- name: ClusterDomain
  endpoint:
    path: /admin.rio.cattle.io/v1/ClusterDomain
    method: GET
    data_selector: records
    params: {}
- name: PublicDomain
  endpoint:
    path: /admin.rio.cattle.io/v1/PublicDomain
    method: GET
    data_selector: records
    params: {}
- name: RioInfo
  endpoint:
    path: /admin.rio.cattle.io/v1/RioInfo
    method: GET
    data_selector: records
    params: {}
- name: SystemStack
  endpoint:
    path: /admin.rio.cattle.io/v1/SystemStack
    method: GET
    data_selector: records
    params: {}
- name: ExternalService
  endpoint:
    path: /rio.cattle.io/v1/ExternalService
    method: GET
    data_selector: records
    params: {}
- name: Router
  endpoint:
    path: /rio.cattle.io/v1/Router
    method: GET
    data_selector: records
    params: {}
- name: Service
  endpoint:
    path: /rio.cattle.io/v1/Service
    method: GET
    data_selector: records
    params: {}
- name: Stack
  endpoint:
    path: /rio.cattle.io/v1/Stack
    method: GET
    data_selector: records
    params: {}
- name: ClusterDomain
  endpoint:
    path: /admin/rio.cattle.io/v1/ClusterDomain
    method: GET
    data_selector: records
    params: {}
- name: PublicDomain
  endpoint:
    path: /admin/rio.cattle.io/v1/PublicDomain
    method: GET
    data_selector: records
    params: {}
- name: RioInfo
  endpoint:
    path: /admin/rio.cattle.io/v1/RioInfo
    method: GET
    data_selector: records
    params: {}
- name: SystemStack
  endpoint:
    path: /admin/rio.cattle.io/v1/SystemStack
    method: GET
    data_selector: records
    params: {}
- name: ExternalService
  endpoint:
    path: /rio.cattle.io/v1/ExternalService
    method: GET
    data_selector: records
    params: {}
- name: Router
  endpoint:
    path: /rio.cattle.io/v1/Router
    method: GET
    data_selector: records
    params: {}
- name: Service
  endpoint:
    path: /rio.cattle.io/v1/Service
    method: GET
    data_selector: records
    params: {}
- name: Stack
  endpoint:
    path: /rio.cattle.io/v1/Stack
    method: GET
    data_selector: records
    params: {}
- name: Container
  endpoint:
    path: /api/v1/container
    method: GET
    data_selector: records
- name: PodConfig
  endpoint:
    path: /api/v1/podconfig
    method: GET
    data_selector: records
- name: service
  endpoint:
    path: /services
    method: POST
    data_selector: services
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: status
- name: demo@v1
  endpoint:
    path: /services/data/v1/sobjects/demo
    method: GET
- name: demo@v3
  endpoint:
    path: /services/data/v3/sobjects/demo
    method: GET
- name: service
  endpoint:
    path: /run
    method: POST
    data_selector: service
    params: {}
- name: service_info
  endpoint:
    path: /ps
    method: GET
    data_selector: services
    params: {}
- name: cluster_info
  endpoint:
    path: /info
    method: GET
    data_selector: cluster
    params: {}
- name: demo
  endpoint:
    path: /
    method: GET
- name: create_router
  endpoint:
    path: /route/add
    method: POST
    data_selector: router
    params: {}
- name: add_path_based_match
  endpoint:
    path: /route/add/path
    method: POST
    data_selector: path_based_match
    params: {}
- name: point_to_different_port
  endpoint:
    path: /route/add/port
    method: POST
    data_selector: different_port
    params: {}
- name: add_header_based_route
  endpoint:
    path: /route/add/header
    method: POST
    data_selector: header_based_route
    params: {}
- name: route_based_on_http_method
  endpoint:
    path: /route/add/method
    method: POST
    data_selector: http_method
    params: {}
- name: manipulate_headers
  endpoint:
    path: /route/add/header/manipulate
    method: POST
    data_selector: manipulate_headers
    params: {}
- name: rewrite_to_host_path
  endpoint:
    path: /route/add/rewrite
    method: POST
    data_selector: rewrite
    params: {}
- name: redirect
  endpoint:
    path: /route/add/redirect
    method: POST
    data_selector: redirect
    params: {}
- name: timeout
  endpoint:
    path: /route/add/timeout
    method: POST
    data_selector: timeout
    params: {}
- name: fault_injection
  endpoint:
    path: /route/add/fault
    method: POST
    data_selector: fault_injection
    params: {}
- name: retry_logic
  endpoint:
    path: /route/add/retry
    method: POST
    data_selector: retry_logic
    params: {}
- name: split_traffic
  endpoint:
    path: /route/add/split
    method: POST
    data_selector: split_traffic
    params: {}
- name: insert_rules
  endpoint:
    path: /route/add/insert
    method: POST
    data_selector: insert_rules
    params: {}
- name: PublicDomain
  endpoint:
    path: /domain
    method: POST
    data_selector: register
    params: {}
- name: ExternalService
  endpoint:
    path: /external
    method: POST
    data_selector: create
    params: {}
- name: PublicDomain
  endpoint:
    path: /domain/register
    method: POST
    data_selector: result
- name: ExternalService
  endpoint:
    path: /external/create
    method: POST
    data_selector: result
- name: configs
  endpoint:
    path: /configs
    method: POST
    data_selector: configs
- name: externalservices
  endpoint:
    path: /externalservices
    method: POST
    data_selector: externalservices
- name: services
  endpoint:
    path: /services
    method: POST
    data_selector: services
- name: routers
  endpoint:
    path: /routers
    method: POST
    data_selector: routers
- name: configs
  endpoint:
    path: /configs
    method: GET
    data_selector: records
- name: externalservices
  endpoint:
    path: /externalservices
    method: GET
    data_selector: records
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: records
- name: routers
  endpoint:
    path: /routers
    method: GET
    data_selector: records
- name: nginx
  endpoint:
    path: /nginx
    method: GET
    data_selector: ENDPOINTS
- name: guestbook
  endpoint:
    path: /guestbook
    method: GET
    data_selector: ENDPOINTS
- name: guestbook
  endpoint:
    path: /guestbook
    method: GET
- name: redis-master
  endpoint:
    path: /redis-master
    method: GET
- name: redis-slave
  endpoint:
    path: /redis-slave
    method: GET
- name: deployment
  endpoint:
    path: /deployments
    method: POST
    data_selector: result
    params: {}
- name: workload
  endpoint:
    path: /run
    method: POST
    data_selector: deployment
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
notes:
- If you have limited cpu and memory in your k8s cluster, we recommend you to disable
  features that you don't need in order to keep footprint of Rio smaller.
- By default Rio will create a DNS record pointing to your cluster's gateway.
- Rio also uses Let's Encrypt to create a certificate for the cluster domain.
- Linkerd is enabled by default.
- This endpoint will only return versions that have a weight greater than 0%. Versions
  with a higher weight percentage will be returned more often.
- To test a pre-release or alpha build, run the command with INSTALL_RIO_VERSION.
- Rio also uses Let's Encrypt to create a certificate for the cluster domain so that
  all services support HTTPS by default.
- Rio allows you to define services, routes, external services, configs, and secrets
  in a user-friendly config file called Riofile.
- Rio works with standard Kubernetes YAML files.
- Rio additionally supports a more user-friendly docker-compose-style config file
  called Riofile.
- Uses LetsEncrypt certificate for HTTPS access
- Uses Rio to expose the service and provision a LetsEncrypt certificate.
- You can check that the sample service came up by going to the endpoint given by
  `rio ps`.
- Metrics are scraped from the linkerd-proxy sidecar, this requires your application
  to be injected with the linkerd sidecar.
- Concurrency means the maximum in-flight requests each pod can take. If your total
  in-flight request is 60 and concurrency is 10, Rio will scale workloads to 6 replicas.
- When scaling an application to zero, the first request will take longer.
- concurrency means the maximum in-flight requests each pod can take. If your total
  in-flight request is 60 and concurrency is 10, Rio will scale workloads to 6 replicas.
- Uses GitHub for continuous deployment
- This feature requires a Dockerfile.
- Rio enables continuous deployment with GitHub by default.
- If the pull request is merged, it will then update the app endpoint in Rio to point
  to this new version.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Uses Rio CLI for application deployment and management.
- If you enabled rdns feature, you can take the cluster domain and create a CNAME
  record from your own wildcard domain to rio cluster domain.
- If you disabled rdns feature, you won't be able to get `xxxxxx.on-rio.io` domain.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
auth_info:
  mentioned_objects: []
client:
  base_url: https://get.rio.io
  headers:
    Accept: application/json
source_metadata: null
