resources:
- name: recipients
  endpoint:
    path: /reference/viewrecipients
    method: GET
- name: transactions
  endpoint:
    path: /reference/viewtransactions
    method: GET
- name: subscription
  endpoint:
    path: /reference/viewsubscription
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: who_am_i
  endpoint:
    path: /user/v3/account/whoAmI
    method: GET
- name: whoami
  endpoint:
    path: /user/v3/account/whoAmI
    method: GET
    data_selector: ''
- name: create_one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
- name: save_card_token
  endpoint:
    path: /pay/v3/saveCard
    method: POST
- name: run_card_transaction
  endpoint:
    path: /pay/v3/process
    method: POST
- name: create_one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: data.token
- name: save_card_token
  endpoint:
    path: /pay/v3/saveCard
    method: POST
    data_selector: data.token
- name: run_card_transaction
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: transactionStatus
- name: pay
  endpoint:
    path: /pay
    method: GET
- name: card
  endpoint:
    path: /card
    method: GET
- name: auth
  endpoint:
    path: /auth
    method: GET
- name: subscription
  endpoint:
    path: /subscription
    method: GET
- name: apm
  endpoint:
    path: /apm
    method: GET
- name: subscription
  endpoint:
    path: /subscription
    method: GET
- name: apm
  endpoint:
    path: /apm
    method: GET
- name: payout
  endpoint:
    path: /payout
    method: GET
- name: transaction
  endpoint:
    path: /transaction
    method: GET
- name: recovery
  endpoint:
    path: /recovery
    method: GET
- name: chargeback
  endpoint:
    path: /chargeback
    method: GET
- name: ach
  endpoint:
    path: /ach
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
- name: merchant
  endpoint:
    path: /merchant
    method: GET
- name: webhook
  endpoint:
    path: /webhook
    method: GET
- name: onlineapplication
  endpoint:
    path: /onlineapplication
    method: GET
- name: transaction
  endpoint:
    path: /runcardtransaction
    method: POST
    data_selector: transactionData
- name: void_transaction
  endpoint:
    path: /voidtransaction
    method: POST
    data_selector: transactionData
- name: refund_transaction
  endpoint:
    path: /refundtransaction
    method: POST
    data_selector: transactionData
- name: payment_request
  endpoint:
    path: /payment/request
    method: POST
    data_selector: data
    params:
      data.amount: required
      data.currency: required
      processingOptions.paymentType: required
      card.cardHolderName: not required for aci_planet_mcp
- name: payment_request
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: transaction
    params:
      card.expirationMonth: ''
      card.expirationYear: ''
      data.amount: ''
      data.customer.firstName: ''
      data.customer.lastName: ''
      data.customer.email: ''
- name: sale_transaction
  endpoint:
    path: /reference/runcardtransaction
    method: POST
    data_selector: transaction
    params: {}
- name: void_transaction
  endpoint:
    path: /reference/voidtransaction
    method: POST
    data_selector: transaction
    params: {}
- name: refund_transaction
  endpoint:
    path: /reference/refundtransaction
    method: POST
    data_selector: transaction
    params: {}
- name: sale
  endpoint:
    path: /v1/sale
    method: POST
    data_selector: transaction
    params: {}
- name: auth_only
  endpoint:
    path: /v1/auth
    method: POST
    data_selector: transaction
    params: {}
- name: capture
  endpoint:
    path: /v1/capture
    method: POST
    data_selector: transaction
    params: {}
- name: void
  endpoint:
    path: /v1/void
    method: POST
    data_selector: transaction
    params: {}
- name: refund
  endpoint:
    path: /v1/refund
    method: POST
    data_selector: transaction
    params: {}
- name: Run card transaction
  endpoint:
    path: /reference/runcardtransaction
    method: POST
- name: Run card transaction with iframe
  endpoint:
    path: /reference/runcardtransactioniframe
    method: POST
- name: Create one-time-use token
  endpoint:
    path: /reference/createonetimeusetoken
    method: POST
- name: Save card token
  endpoint:
    path: /reference/savecardtoken
    method: POST
- name: Save card token with iframe
  endpoint:
    path: /reference/savecardtokeniframe
    method: POST
- name: sale_transaction
  endpoint:
    path: /reference/runcardtransaction
    method: POST
- name: auth_only_transaction
  endpoint:
    path: /reference/runcardtransaction
    method: POST
- name: capture_transaction
  endpoint:
    path: /reference/capturetransaction
    method: POST
- name: void_transaction
  endpoint:
    path: /reference/voidtransaction
    method: POST
- name: refund_transaction
  endpoint:
    path: /reference/refundtransaction
    method: POST
- name: transaction
  endpoint:
    path: /reference/runcardtransaction
    method: POST
    data_selector: data
    params:
      required_fields:
      - data.amount
      - data.currency
      - processingOptions.paymentType
- name: payment_request
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: data
    params: {}
- name: Run card transaction
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: data
    params: {}
- name: Run echeck transaction
  endpoint:
    path: /pay/v3/processECheck
    method: POST
    data_selector: data
    params: {}
- name: alternative_payment_methods
  endpoint:
    path: /docs/payment-methods
    method: GET
    data_selector: supported_apms
    params: {}
- name: transaction
  endpoint:
    path: /reference/runapmtransaction
    method: POST
- name: auth_only
  endpoint:
    path: /reference/createapmonetimeusetoken
    method: POST
- name: capture
  endpoint:
    path: /reference/captureapmtransaction
    method: POST
- name: refund
  endpoint:
    path: /reference/refundapmtransaction
    method: POST
- name: create_apm_one_time_use_token
  endpoint:
    path: /apm/v3/token
    method: POST
    data_selector: data
- name: one_time_use_token
  endpoint:
    path: /apm/v3/token
    method: POST
    data_selector: data
- name: Create APM one-time-use token
  endpoint:
    path: /reference/createapmonetimeusetoken
    method: POST
    data_selector: data
    params: {}
- name: token
  endpoint:
    path: /apm/v3/token
    method: POST
    data_selector: data
    params: {}
- name: klarnaPayments
  endpoint:
    path: /reference/runapmtransaction
    method: POST
- name: klarnaCheckout
  endpoint:
    path: /reference/createapmonetimeusetoken
    method: POST
- name: one_time_use_token
  endpoint:
    path: /apm/v3/token
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /reference/runapmtransaction
    method: POST
- name: one_time_use_token
  endpoint:
    path: /apm/v3/token
    method: POST
    data_selector: data
    params: {}
- name: create_apm_one_time_use_token
  endpoint:
    path: /reference/createapmonetimeusetoken
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /reference/runapmtransaction
    method: POST
- name: auth_only
  endpoint:
    path: /reference/createapmonetimeusetoken
    method: POST
- name: void
  endpoint:
    path: /reference/voidapmtransaction
    method: POST
- name: capture
  endpoint:
    path: /reference/captureapmtransaction
    method: POST
- name: refund
  endpoint:
    path: /reference/refundapmtransaction
    method: POST
- name: one_time_use_token
  endpoint:
    path: /token
    method: POST
    data_selector: data
- name: transaction
  endpoint:
    path: /docs/run-a-merchant-initiated-recurring-transaction
    method: GET
    data_selector: paymentMethod
    params: {}
- name: webhooks
  endpoint:
    path: /docs/webhooks
    method: GET
    data_selector: eventType
    params: {}
- name: sofort_token
  endpoint:
    path: /apm/v3/token
    method: POST
    data_selector: data
    params: {}
- name: save_card
  endpoint:
    path: /docs/saving-a-card-token-with-the-api
    method: POST
    data_selector: token
- name: save_echeck
  endpoint:
    path: /docs/saving-an-echeck-token-with-the-api
    method: POST
    data_selector: token
- name: create_one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: token
- name: save_card_token_with_iframe
  endpoint:
    path: /pay/v3/saveCard
    method: GET
    data_selector: html
- name: create_one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: token
- name: save_card_token
  endpoint:
    path: /pay/v3/saveCard
    method: POST
    data_selector: token
- name: card_token
  endpoint:
    path: /api/card_token
    method: POST
    data_selector: data
    params: {}
- name: create_one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: token
- name: save_card_token
  endpoint:
    path: /pay/v3/saveCard
    method: POST
    data_selector: token
- name: create_one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: token
    params: {}
- name: save_echeck_token_with_iframe
  endpoint:
    path: /pay/v3/saveECheck
    method: GET
    data_selector: response
    params: {}
- name: create_one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: token
- name: save_echeck_token
  endpoint:
    path: /pay/v3/saveECheck
    method: POST
    data_selector: token
- name: create_one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: null
    params: {}
- name: save_echeck_token
  endpoint:
    path: /pay/v3/saveECheck
    method: POST
    data_selector: null
    params: {}
- name: create_one_time_use_token
  endpoint:
    path: /token
    method: POST
    data_selector: data
    params: {}
- name: run_card_transaction_iframe
  endpoint:
    path: /
    method: GET
    data_selector: html
    params: {}
- name: run_card_transaction
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: data
    params: {}
- name: run_card_transaction
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: data
    params: {}
- name: view_transaction_by_payment_id
  endpoint:
    path: /reference/viewtransactionpaymentid
    method: GET
    data_selector: data
    params: {}
- name: view_transaction_by_transaction_id
  endpoint:
    path: /reference/viewtransactiontransactionid
    method: GET
    data_selector: data
    params: {}
- name: view_transactions
  endpoint:
    path: /reference/viewtransactions
    method: GET
    data_selector: data
    params: {}
- name: run_card_transaction
  endpoint:
    path: /pay/v3/process
    method: POST
- name: view_transaction_by_payment_id
  endpoint:
    path: /reference/viewtransactionpaymentid
    method: GET
- name: view_transaction_by_transaction_id
  endpoint:
    path: /reference/viewtransactiontransactionid
    method: GET
- name: view_transactions
  endpoint:
    path: /reference/viewtransactions
    method: GET
- name: echeck
  endpoint:
    path: /v1/echeck
    method: POST
    data_selector: data
- name: create_one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: token
    params:
      amount: 29.99
      currency: USD
- name: run_echeck_transaction_iframe
  endpoint:
    path: /pay/v3/processECheck
    method: POST
    data_selector: id
    params: {}
- name: echeck_checkout
  endpoint:
    path: /api/echeck/checkout
    method: POST
    data_selector: data
    params: {}
- name: run_echeck_transaction
  endpoint:
    path: /pay/v3/processECheck
    method: POST
    data_selector: data
    params: {}
- name: echeck_transaction
  endpoint:
    path: /api/v1/echeck/transaction
    method: POST
    data_selector: data
    params: {}
- name: process_echeck
  endpoint:
    path: /pay/v3/processECheck
    method: POST
    data_selector: data
    params: {}
- name: view_transaction_payment_id
  endpoint:
    path: /reference/viewtransactionpaymentid
    method: GET
    data_selector: transaction
    params: {}
- name: view_transaction_transaction_id
  endpoint:
    path: /reference/viewtransactiontransactionid
    method: GET
    data_selector: transaction
    params: {}
- name: view_transactions
  endpoint:
    path: /reference/viewtransactions
    method: GET
    data_selector: transactions
    params: {}
- name: data
  endpoint:
    params:
      isAuthOnly: 'false'
      shouldUpdateCard: 'true'
- name: processingOptions
  endpoint:
    params:
      saveCardToken: 'true'
      retryOnSoftDecline: 'false'
      checkFraud: 'true'
      shouldUseFingerprint: 'true'
      verifyAvs: '0'
      verifyCvc: 'false'
      verboseResponse: 'false'
- name: uiOptions
  endpoint:
    params:
      hideAuthOnly: 'true'
      hideCustomerInfo: 'true'
      hideBilling: 'false'
      hideShipping: 'true'
      hideOrderInfo: 'true'
- name: create_simple_login
  endpoint:
    path: /auth/v3/createSimpleLogin
    method: POST
    data_selector: response
- name: pair_terminal
  endpoint:
    path: /pay/v3/processFromTerminal
    method: POST
    data_selector: ''
    params: {}
- name: view_terminal_list
  endpoint:
    path: /pay/v3/getTerminalList
    method: GET
    data_selector: ''
    params: {}
- name: register_terminal
  endpoint:
    path: /pay/v3/registerTerminal
    method: POST
    data_selector: terminalId
    params: {}
- name: get_terminal_list
  endpoint:
    path: /pay/v3/getTerminalList
    method: GET
    data_selector: '[]'
    params: {}
- name: deregister_terminal
  endpoint:
    path: /pay/v3/deregisterTerminal
    method: POST
    data_selector: terminalRegistrationStatus
    params: {}
- name: get_terminal_list
  endpoint:
    path: /pay/v3/getTerminalList
    method: GET
    data_selector: '[]'
- name: process_transaction
  endpoint:
    path: /pay/v3/processFromTerminal
    method: POST
    data_selector: terminalRequestStatus
- name: view_terminal_transaction_status
  endpoint:
    path: /reference/viewterminaltransactionstatus
    method: GET
    data_selector: terminalRequestStatus
- name: one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: data
- name: lodging
  endpoint:
    path: /process
    method: POST
    data_selector: data
- name: run_card_transaction
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Afterpay
  endpoint:
    path: /docs/citcon-through-afterpay-integration-guide
    method: GET
    data_selector: Sale, Auth only, Capture, Refund
    params: {}
- name: Apple Pay
  endpoint:
    path: /docs/apple-pay-integration-guide
    method: GET
    data_selector: Sale, Auth only, Capture, Void, Refund
    params: {}
- name: Google Pay
  endpoint:
    path: /docs/google-pay-integration-guide
    method: GET
    data_selector: Sale, Auth only, Capture, Void, Refund
    params: {}
- name: Klarna
  endpoint:
    path: /docs/klarna-integration-guide
    method: GET
    data_selector: Sale, Auth only, Capture, Refund
    params: {}
- name: Paynet
  endpoint:
    path: /docs/paynet-integration-guide
    method: GET
    data_selector: Sale
    params: {}
- name: PayPal
  endpoint:
    path: /docs/paypal-integration-guide
    method: GET
    data_selector: Sale, Auth only, Capture, Void, Refund
    params: {}
- name: Sofort
  endpoint:
    path: /docs/sofort-integration-guide
    method: GET
    data_selector: Sale, Refund
    params: {}
- name: Create APM one-time-use token
  endpoint:
    path: /reference/createapmonetimeusetoken
    method: POST
    data_selector: data
    params: {}
- name: customer
  endpoint:
    path: /data/customer
    method: GET
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /data/payment
    method: POST
    data_selector: data
    params: {}
- name: Afterpay
  endpoint:
    path: /events/afterpay
    method: POST
    data_selector: TRANSACTION_AUTHORIZED, TRANSACTION_CAPTURED, TRANSACTION_REFUNDED,
      TRANSACTION_SETTLED
    params: {}
- name: ApplePay
  endpoint:
    path: /events/applepay
    method: POST
    data_selector: TRANSACTION_AUTHORIZED, TRANSACTION_CAPTURED, TRANSACTION_REFUNDED,
      TRANSACTION_SETTLED, TRANSACTION_VOIDED
    params: {}
- name: GooglePay
  endpoint:
    path: /events/googlepay
    method: POST
    data_selector: TRANSACTION_SETTLED, TRANSACTION_REFUNDED
    params: {}
- name: Klarna
  endpoint:
    path: /events/klarna
    method: POST
    data_selector: TRANSACTION_AUTHORIZED, TRANSACTION_CAPTURED, TRANSACTION_SETTLED,
      TRANSACTION_REFUNDED
    params: {}
- name: Paynet
  endpoint:
    path: /events/paynet
    method: POST
    data_selector: TRANSACTION_SETTLED, TRANSACTION_PENDING
    params: {}
- name: PayPal
  endpoint:
    path: /events/paypal
    method: POST
    data_selector: TRANSACTION_AUTHORIZED, TRANSACTION_CAPTURED, TRANSACTION_REFUNDED,
      TRANSACTION_SETTLED, TRANSACTION_VOIDED
    params: {}
- name: Sofort
  endpoint:
    path: /events/sofort
    method: POST
    data_selector: TRANSACTION_AUTHORIZED, TRANSACTION_SETTLED, TRANSACTION_REFUNDED
    params: {}
- name: Create APM one-time-use token
  endpoint:
    path: /apm/v3/token
    method: POST
    data_selector: data
    params: {}
- name: create_apm_token
  endpoint:
    path: /apm/v3/token
    method: POST
    data_selector: buttonIFrameUrls
- name: create_apm_token
  endpoint:
    path: /apm/v3/token
    method: POST
    data_selector: redirectUrls
    params: {}
- name: Create APM one-time-use token
  endpoint:
    path: /apm/v3/token
    method: POST
    data_selector: buttonIFrameUrls
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: data
    params: {}
- name: token
  endpoint:
    path: /apm/v3/token
    method: POST
- name: run_merchant_initiated_payment
  endpoint:
    path: /apm/v3/process
    method: POST
- name: capture_apm_transaction
  endpoint:
    path: /apm/v3/capture
    method: POST
    data_selector: message
    params: {}
- name: view_transactions
  endpoint:
    path: /reference/viewtransactions
    method: GET
    data_selector: transactions
    params:
      transactionStatus: '11'
      plugin: ''
- name: void_apm_transaction
  endpoint:
    path: /apm/v3/void
    method: POST
    data_selector: message
    params: {}
- name: view_transactions
  endpoint:
    path: /reference/viewtransactions
    method: GET
    data_selector: transactions
    params:
      transactionStatus: 11
      plugin: ''
- name: refund_transaction
  endpoint:
    path: /apm/v3/refund
    method: POST
    data_selector: message
    params: {}
- name: payout
  endpoint:
    path: /payouts
    method: POST
    data_selector: records
    params: {}
- name: spendback
  endpoint:
    path: /spendback
    method: GET
    data_selector: records
    params: {}
- name: view_recipient
  endpoint:
    path: /reference/viewrecipient
    method: GET
- name: view_spendbacks
  endpoint:
    path: /reference/viewspendbacks
    method: GET
- name: spendback
  endpoint:
    path: /payout/v3/spendback
    method: POST
    data_selector: ''
    params: {}
- name: payment_routing
  endpoint:
    path: /settings/payment-routing
    method: GET
- name: payment_routing
  endpoint:
    path: /settings/payment-routing
    method: GET
- name: payment_request
  endpoint:
    path: /payment/request
    method: POST
    data_selector: data
    params:
      data.amount: ''
      data.currency: ''
      processingOptions.paymentOptionTag: ''
      data.cart.items[n]: ''
- name: transaction_request
  endpoint:
    path: /transactions
    method: POST
    data_selector: data
    params:
      data.amount: amount
      data.currency: currency
      processingOptions.paymentOptionTag: paymentOptionTag
      processingOptions.merchantId: merchantId
- name: transaction
  endpoint:
    path: /reference/runcardtransaction
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: POST
    data_selector: transaction
    params:
      processingOptions.merchantId: '100000000041'
- name: one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: data
    params:
      check3ds: true
      paymentType: initialUnscheduled
- name: save_card_token
  endpoint:
    path: /pay/v3/saveCard
    method: POST
    data_selector: token
    params: {}
- name: run_card_transaction
  endpoint:
    path: /process
    method: POST
- name: run_card_transaction
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
- name: one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: null
    params: {}
- name: one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: processingOptions
    params: {}
- name: avsResults
  endpoint:
    path: /api/avs_results
    method: GET
    data_selector: avsResults
- name: avs_test
  endpoint:
    path: /api/avs/test
    method: POST
    data_selector: response
    params: {}
- name: run_card_transaction
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: data
- name: token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: response
    params: {}
- name: saveCard
  endpoint:
    path: /pay/v3/saveCard
    method: POST
    data_selector: response
    params: {}
- name: process
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: response
    params: {}
- name: one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: data
- name: save_card_token
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: data
- name: run_card_transaction
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: data
    params: {}
- name: kount_response
  endpoint:
    path: /kount/verify
    method: POST
    data_selector: kountResponse
    params: {}
- name: Kount verification
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: data
    params: {}
- name: one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: null
    params: {}
- name: one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: null
    params: {}
- name: save_card
  endpoint:
    path: /pay/v3/saveCard
    method: POST
    data_selector: null
    params: {}
- name: one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: processingOptions
    params:
      processingOptions:
        verifyCvc: true
- name: run_card_transaction
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: data
    params: {}
- name: view_chargeback
  endpoint:
    path: /reference/viewchargeback
    method: GET
- name: view_chargebacks
  endpoint:
    path: /reference/viewchargebacks
    method: GET
- name: view_chargeback_summary
  endpoint:
    path: /reference/viewchargebacksummary
    method: GET
- name: view_dispute
  endpoint:
    path: /reference/viewdispute
    method: GET
- name: view_disputes
  endpoint:
    path: /reference/viewdisputes
    method: GET
- name: create_disputed_chargeback
  endpoint:
    path: /reference/disputechargeback
    method: POST
- name: transaction
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: payout
  endpoint:
    path: /api/v1/payouts
    method: GET
    data_selector: data
    params: {}
- name: run_card_transaction
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: data
    params: {}
- name: view_decline_recovery_record
  endpoint:
    path: /recovery/v3/retry/{retryId}
    method: GET
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /api/transactions
    method: POST
    data_selector: data
- name: subscription
  endpoint:
    path: /api/subscriptions
    method: GET
    data_selector: data
- name: decline_recovery
  endpoint:
    path: /subscription/v3
    method: POST
    data_selector: payment
    params: {}
- name: view_recovery
  endpoint:
    path: /recovery/v3/retry/{retryId}
    method: GET
    data_selector: transaction
    params: {}
- name: transaction_list
  endpoint:
    path: /decline-recovery/transactions
    method: GET
    data_selector: transactions
- name: view_recoveries
  endpoint:
    path: /recovery/v3
    method: GET
    data_selector: rows
    params:
      limit: '10'
      offset: '0'
- name: enable_or_disable_retries_single_transaction
  endpoint:
    path: /reference/enableordisableretriesforasingletransaction
    method: POST
- name: enable_or_disable_retries_multiple_transactions
  endpoint:
    path: /reference/enableordisableretriesformultipletransactions
    method: POST
- name: cancel_single_transaction
  endpoint:
    path: /recovery/v3/enable
    method: PUT
    data_selector: ''
    params: {}
- name: cancel_multiple_transactions
  endpoint:
    path: /recovery/v3/bulkEnable
    method: PUT
    data_selector: ''
    params: {}
- name: Account Updater
  endpoint:
    path: /working-with-account-updater
    method: GET
    data_selector: records
    params: {}
- name: card_token_details
  endpoint:
    path: /pay/v3/vault/card/{cardToken}
    method: GET
    data_selector: records
- name: Account Updater
  endpoint:
    path: /tagging-an-existing-card-for-registration
    method: POST
- name: update_card_token
  endpoint:
    path: /pay/v3/vault/card/{cardToken}
    method: PUT
    data_selector: null
    params:
      shouldUpdateCard: 'true'
- name: view_card_token_details
  endpoint:
    path: /pay/v3/vault/card/{cardToken}
    method: GET
    data_selector: null
    params: {}
- name: account_updater
  endpoint:
    path: /v1/account-updater
    method: POST
    data_selector: data
    params: {}
- name: update_card_token
  endpoint:
    path: /pay/v3/vault/card/{cardToken}
    method: PUT
    data_selector: null
    params: {}
- name: view_card_token_details
  endpoint:
    path: /pay/v3/vault/card/{cardToken}
    method: GET
    data_selector: null
    params: {}
- name: one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: results
    params:
      shouldUpdateCard: 'false'
- name: one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: null
    params: {}
- name: save_card
  endpoint:
    path: /pay/v3/saveCard
    method: POST
    data_selector: null
    params:
      shouldUpdateCard: 'false'
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: payment_plans
  endpoint:
    path: /payment-plans
    method: GET
- name: create_subscription
  endpoint:
    path: /subscription/v3
    method: POST
    data_selector: id
    params: {}
- name: run_card_transaction
  endpoint:
    path: /reference/runcardtransaction
    method: POST
- name: run_echeck_transaction
  endpoint:
    path: /running-an-echeck-transaction-with-the-api
    method: POST
- name: run_apm_transaction
  endpoint:
    path: /paypal-with-braintree-integration-guide
    method: POST
- name: subscription
  endpoint:
    path: /subscription/v3
    method: POST
    data_selector: data
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
    data_selector: methods
- name: schedule_responsibility
  endpoint:
    path: /schedule_responsibility
    method: GET
    data_selector: responsibility
- name: payment_schedule
  endpoint:
    path: /payment_schedule
    method: GET
    data_selector: schedule
- name: subscription
  endpoint:
    path: /subscription/v3
    method: POST
    data_selector: id
    params: {}
- name: run_card_transaction
  endpoint:
    path: /reference/runcardtransaction
    method: POST
- name: run_echeck_transaction
  endpoint:
    path: /docs/running-an-echeck-transaction-with-the-api
    method: POST
- name: paypal_braintree_transaction
  endpoint:
    path: /docs/paypal-with-braintree-integration-guide
    method: POST
- name: payment_plan
  endpoint:
    path: /api/payment_plan
    method: POST
    data_selector: data
    params: {}
- name: subscription
  endpoint:
    path: /subscription/v3
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: create_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: token
- name: save_card_iframe
  endpoint:
    path: /pay/v3/saveCard
    method: GET
- name: create_one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: token
    params: {}
- name: checkout_with_card_iframe
  endpoint:
    path: /pay/v3
    method: GET
    data_selector: iframe
    params: {}
- name: loader
  endpoint:
    path: '#loader'
    method: default
    data_selector: default
    params: {}
- name: spin
  endpoint:
    path: '@keyframes spin'
    method: default
    data_selector: default
    params: {}
- name: FormLeftColumn
  endpoint:
    path: '@media screen and (min-width: 768px)'
    method: default
    data_selector: default
    params: {}
- name: input
  endpoint:
    path: input
    method: default
    data_selector: default
    params: {}
- name: button
  endpoint:
    path: button
    method: default
    data_selector: default
    params: {}
- name: create_one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: token
- name: checkout_with_card_iframe
  endpoint:
    path: /pay/v3
    method: GET
    data_selector: iframe
- name: transaction
  endpoint:
    path: /transaction/v3
    method: GET
    params:
      plugin.originalId: eyJuYW1lIjoidXNhZXBheSIsInJlZk51bWJlciI6IjMxMDA5MDc4MTkiLCJtZXJjaGFudElkIjoiMTAwMDM5IiwicmFuZG9tIjoiMzEwMDkwNzgxOSIsImN1cnJlbmN5IjoiVVNEIn0
- name: Payments
  endpoint:
    params:
      merchantId: merchantId
      customerRef: customerRef
      cardType: cardType
      cardHolderName: cardHolderName
      firstSix: firstSix
      lastFour: lastFour
      expirationMonth: expirationMonth
      expirationYear: expirationYear
      createdAt: createdAt
      updatedAt: updatedAt
      shouldUpdateCard: shouldUpdateCard
      accountupdaterstatus: accountupdaterstatus
      lastAccountUpdaterUpdate: lastAccountUpdaterUpdate
- name: Payouts
  endpoint:
    params:
      recipientIdNumbers: recipientIdNumbers
      governmentId: governmentId
      passportId: passportId
      driversLicenseId: driversLicenseId
      employerIId: employerIId
- name: Transactions
  endpoint:
    params:
      customer: customer.
      kount: kount.
      bankTransfer: bankTransfer.
      plugin: plugin.
      foreignProcessingCurrency: foreignProcessingCurrency.
      gateway: gateway.
      processor: processor.
      customerAddresses: customerAddresses.
      transactionDetails: transactionDetails.
      subscription: subscription.
- name: one_time_use_token
  endpoint:
    path: /reference/createonetimeusetoken
    method: POST
    data_selector: token
    params: {}
- name: card_token
  endpoint:
    path: /reference/savecardtoken
    method: POST
    data_selector: token
    params: {}
- name: echeck_token
  endpoint:
    path: /reference/saveechecktoken
    method: POST
    data_selector: token
    params: {}
- name: webhook
  endpoint:
    path: /v1/webhooks
    method: POST
    data_selector: data
    params: {}
- name: webhook_urls
  endpoint:
    path: /webhook/v3/webhookUrls/{id}/{webhook_type}
    method: GET
    data_selector: webhookUrls
- name: register_webhook_urls
  endpoint:
    path: /webhook/v3/webhookUrls
    method: POST
    data_selector: webhookUrls
- name: account_events
  endpoint:
    path: /webhooks/account_events
    method: POST
    data_selector: eventType
    params: {}
- name: transaction_events
  endpoint:
    path: /webhooks/transaction_events
    method: POST
    data_selector: eventType
    params: {}
- name: payout_events
  endpoint:
    path: /webhooks/payout_events
    method: POST
    data_selector: eventType
    params: {}
- name: spendback_events
  endpoint:
    path: /webhooks/spendback_events
    method: POST
    data_selector: eventType
    params: {}
- name: webhooks
  endpoint:
    path: /legacy/webhooks
    method: POST
- name: create_legacy_merchant_webhooks
  endpoint:
    path: /webhook/v3/config
    method: POST
    data_selector: webhooks
- name: view_legacy_merchant_webhook_configuration
  endpoint:
    path: /webhook/v3/config/{merchantId}
    method: GET
    data_selector: webhooks
- name: create_webhook_secret
  endpoint:
    path: /webhook/v3/secret
    method: POST
- name: webhook
  endpoint:
    path: /legacy/webhooks
    method: POST
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: data
    params: {}
- name: legacy_webhook_configuration
  endpoint:
    path: /reference/viewmerchantwebhookconfiguration
    method: GET
    data_selector: webhooks
- name: create_legacy_webhooks
  endpoint:
    path: /reference/createmerchantwebhooks
    method: POST
    data_selector: response
- name: create_legacy_merchant_webhooks
  endpoint:
    path: /reference/createmerchantwebhooks
    method: POST
    data_selector: webhooks
    params: {}
- name: account_updater_account_closed
  endpoint:
    path: /reference/deletecardtokens
    method: POST
    data_selector: data
    params: {}
- name: card_data_updated
  endpoint:
    path: /reference/savecardtoken
    method: POST
    data_selector: data
    params: {}
- name: card_saved
  endpoint:
    path: /reference/savecardtoken
    method: POST
    data_selector: data
    params: {}
- name: echeck_saved
  endpoint:
    path: /reference/saveechecktoken
    method: POST
    data_selector: data
    params: {}
- name: payout
  endpoint:
    path: /reference/viewpayout
    method: POST
    data_selector: data
    params: {}
- name: spendback
  endpoint:
    path: /reference/viewspendback
    method: POST
    data_selector: data
    params: {}
- name: subscription_details
  endpoint:
    path: /reference/createsubscription
    method: POST
    data_selector: data
    params: {}
- name: Save card token
  endpoint:
    path: /reference/savecardtoken
    method: GET
- name: Run card transaction
  endpoint:
    path: /reference/runcardtransaction
    method: GET
- name: Save echeck token
  endpoint:
    path: /reference/saveechecktoken
    method: GET
- name: Run echeck transaction
  endpoint:
    path: /reference/runechecktransaction
    method: GET
- name: Retail save card
  endpoint:
    path: /docs/creating-a-retail-card-page-with-the-iframe
    method: GET
- name: Retail run card transaction
  endpoint:
    path: /docs/processing-a-transaction-with-a-terminal
    method: GET
- name: Alternative Payment Methods (APMs)
  endpoint:
    path: /reference/createapmonetimeusetoken
    method: GET
- name: event
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params: {}
- name: constant_ach_transaction_values
  endpoint:
    path: /constant-ach-transaction-values
    method: GET
    data_selector: values
- name: transaction_status
  endpoint:
    path: /transaction-status
    method: GET
    data_selector: statuses
- name: payout_status
  endpoint:
    path: /payouts/status
    method: GET
    data_selector: payoutStatus
    params: {}
- name: spendback_status
  endpoint:
    path: /spendback/status
    method: GET
    data_selector: spendbackStatus
    params: {}
- name: transaction
  endpoint:
    path: /reference/viewtransactions
    method: GET
    data_selector: transactions
- name: view_chargeback
  endpoint:
    path: /reference/viewchargeback
    method: GET
- name: view_chargebacks
  endpoint:
    path: /reference/viewchargebacks
    method: GET
- name: view_transactions
  endpoint:
    path: /reference/viewtransactions
    method: GET
- name: run_card_transaction_iframe
  endpoint:
    path: /reference/runcardtransactioniframe
    method: POST
- name: create_subscription
  endpoint:
    path: /reference/createsubscription
    method: POST
- name: run_card_transaction
  endpoint:
    path: /reference/runcardtransaction
    method: POST
- name: view_transaction_by_transaction_id
  endpoint:
    path: /reference/viewtransactiontransactionid
    method: GET
- name: view_transaction_by_payment_id
  endpoint:
    path: /reference/viewtransactionpaymentid
    method: GET
- name: payouts
  endpoint:
    path: /payouts
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
- name: one_time_use_token
  endpoint:
    path: /pay/v3/token
    method: POST
    data_selector: null
    params: {}
- name: save_card_token_with_iframe
  endpoint:
    path: /pay/v3/saveCard
    method: GET
    data_selector: HTML form
    params:
      shouldReturnHtml: 'false'
      token: string
- name: view_echeck_token_details
  endpoint:
    path: /reference/viewechecktokendetails
    method: GET
- name: delete_card_tokens
  endpoint:
    path: /reference/deletecardtokens
    method: POST
- name: update_card_token
  endpoint:
    path: /reference/updatecardtoken
    method: PUT
- name: view_card_token_details
  endpoint:
    path: /reference/viewcardtokendetails
    method: GET
- name: view_card_tokens
  endpoint:
    path: /reference/viewcardtokens
    method: GET
- name: refund_a_transaction
  endpoint:
    path: /reference/refundtransaction
    method: POST
- name: void_a_transaction
  endpoint:
    path: /reference/voidtransaction
    method: POST
- name: capture_a_transaction
  endpoint:
    path: /reference/capturetransaction
    method: POST
- name: view_currency_conversion_rates
  endpoint:
    path: /reference/conversionrates
    method: GET
- name: run_echeck_transaction
  endpoint:
    path: /reference/runechecktransaction
    method: POST
- name: run_card_transaction
  endpoint:
    path: /reference/runcardtransaction
    method: POST
- name: view_terminal_list
  endpoint:
    path: /reference/viewterminallist
    method: GET
- name: save_card_token
  endpoint:
    path: /pay/v3/saveCard
    method: POST
    data_selector: object
- name: save_card
  endpoint:
    path: /pay/v3/saveCard
    method: POST
- name: surcharge_recommendation
  endpoint:
    path: /pay/v3/surcharge
    method: POST
    data_selector: surchargeAllowed
    params: {}
- name: transactions
  endpoint:
    path: /reference/transactions
    method: GET
- name: view_card_types
  endpoint:
    path: /reference/viewcardtypes
    method: GET
- name: view_transactions_summary
  endpoint:
    path: /reference/viewtransactionsummary
    method: GET
- name: view_daily_transaction_summary
  endpoint:
    path: /reference/viewdailytransactionsummary
    method: GET
- name: view_transaction_total
  endpoint:
    path: /reference/viewtransactiontotal
    method: GET
- name: view_transaction_count
  endpoint:
    path: /reference/viewtransactioncount
    method: GET
- name: view_transaction_by_transaction_id
  endpoint:
    path: /reference/viewtransactiontransactionid
    method: GET
- name: view_transaction_by_payment_id
  endpoint:
    path: /reference/viewtransactionpaymentid
    method: GET
- name: run_card_transaction_with_iframe
  endpoint:
    path: /pay/v3
    method: GET
    data_selector: HTML form
    params: {}
- name: run_card_transaction
  endpoint:
    path: /pay/v3/process
    method: POST
    data_selector: data
    params: {}
- name: view_echeck_token_details
  endpoint:
    path: /reference/viewechecktokendetails
    method: GET
- name: delete_card_tokens
  endpoint:
    path: /reference/deletecardtokens
    method: POST
- name: update_card_token
  endpoint:
    path: /reference/updatecardtoken
    method: PUT
- name: view_card_token_details
  endpoint:
    path: /reference/viewcardtokendetails
    method: GET
- name: view_card_tokens
  endpoint:
    path: /reference/viewcardtokens
    method: GET
- name: refund_a_transaction
  endpoint:
    path: /reference/refundtransaction
    method: POST
- name: void_a_transaction
  endpoint:
    path: /reference/voidtransaction
    method: POST
- name: capture_a_transaction
  endpoint:
    path: /reference/capturetransaction
    method: POST
- name: view_currency_conversion_rates
  endpoint:
    path: /reference/conversionrates
    method: GET
- name: run_echeck_transaction
  endpoint:
    path: /reference/runechecktransaction
    method: POST
- name: run_card_transaction
  endpoint:
    path: /reference/runcardtransaction
    method: POST
- name: create_one_time_use_token
  endpoint:
    path: /reference/createonetimeusetoken
    method: POST
- name: view_transaction_async_status
  endpoint:
    path: /pay/v3/transactionAsyncStatus/{asyncTraceId}
    method: GET
    data_selector: gatewayResponse
    params:
      asyncTraceId: required
- name: transactionAsyncStatus
  endpoint:
    path: /pay/v3/transactionAsyncStatus/asyncTraceId
    method: GET
- name: save_echeck_token
  endpoint:
    path: /pay/v3/saveECheck
    method: GET
    data_selector: HTML form
    params:
      token: string
      shouldReturnHtml: string
- name: save_echeck_token
  endpoint:
    path: /pay/v3/saveECheck
    method: GET
- name: view_transaction_async_status
  endpoint:
    path: /reference/viewtransactionasyncstatus
    method: GET
- name: save_echeck_token
  endpoint:
    path: /pay/v3/saveECheck
    method: POST
    data_selector: token
    params: {}
- name: run_echeck_transaction
  endpoint:
    path: /pay/v3/processECheck
    method: GET
    data_selector: HTML form
    params: {}
- name: run_echeck_transaction
  endpoint:
    path: /pay/v3/processECheck
    method: POST
    data_selector: data
- name: processECheck
  endpoint:
    path: /pay/v3/processECheck
    method: POST
    data_selector: data
    params: {}
- name: viewCurrencyConversionRates
  endpoint:
    path: /reference/conversionrates
    method: GET
    data_selector: rates
    params: {}
- name: currency_conversion_rates
  endpoint:
    path: /pay/v3/conversionRates
    method: GET
    data_selector: rates
- name: view_echeck_token_details
  endpoint:
    path: /reference/viewechecktokendetails
    method: GET
- name: delete_card_tokens
  endpoint:
    path: /reference/deletecardtokens
    method: POST
- name: update_card_token
  endpoint:
    path: /reference/updatecardtoken
    method: PUT
- name: view_card_token_details
  endpoint:
    path: /reference/viewcardtokendetails
    method: GET
- name: view_card_tokens
  endpoint:
    path: /reference/viewcardtokens
    method: GET
- name: refund_transaction
  endpoint:
    path: /reference/refundtransaction
    method: POST
- name: void_transaction
  endpoint:
    path: /reference/voidtransaction
    method: POST
- name: capture_transaction
  endpoint:
    path: /reference/capturetransaction
    method: POST
- name: view_currency_conversion_rates
  endpoint:
    path: /reference/conversionrates
    method: GET
- name: run_echeck_transaction
  endpoint:
    path: /reference/runechecktransaction
    method: POST
- name: run_card_transaction
  endpoint:
    path: /reference/runcardtransaction
    method: POST
- name: view_terminal_list
  endpoint:
    path: /reference/viewterminallist
    method: GET
- name: create_subscription
  endpoint:
    path: /reference/createsubscription
    method: POST
- name: view_transactions
  endpoint:
    path: /reference/viewtransactions
    method: GET
- name: view_recoveries
  endpoint:
    path: /reference/viewrecoverystatus
    method: GET
- name: capture_transaction
  endpoint:
    path: /pay/v3/capture
    method: POST
    data_selector: object
- name: void_transaction
  endpoint:
    path: /pay/v3/void
    method: POST
    data_selector: id
    params: {}
- name: refund_transaction
  endpoint:
    path: /pay/v3/refund
    method: POST
    data_selector: data
    params:
      id: paymentId
      data:
        amount: amount
      refundReason: reason
- name: view_card_tokens
  endpoint:
    path: /card/v3
    method: GET
    data_selector: rows
- name: view_card_token_details
  endpoint:
    path: /card/v3
    method: GET
    params:
      limit: 10
      offset: 0
- name: view_card_token_details
  endpoint:
    path: /pay/v3/vault/card/{cardToken}
    method: GET
    data_selector: object
    params: {}
- name: View transaction async status
  endpoint:
    path: /reference/viewtransactionasyncstatus
    method: GET
- name: View payouts
  endpoint:
    path: /reference/viewpayouts
    method: GET
- name: View recipients
  endpoint:
    path: /reference/viewrecipients
    method: GET
- name: update_card_token
  endpoint:
    path: /pay/v3/vault/card/{cardToken}
    method: PUT
- name: card_token
  endpoint:
    path: /pay/v3/vault/card/cardToken
    method: PUT
- name: delete_card_tokens
  endpoint:
    path: /pay/v3/deleteToken
    method: POST
    data_selector: response
    params: {}
- name: echeck_token_details
  endpoint:
    path: /pay/v3/vault/echeck/{echeckToken}
    method: GET
- name: view_echeck_token_details
  endpoint:
    path: /pay/v3/vault/echeck/echeckToken
    method: GET
- name: create_simple_login
  endpoint:
    path: /auth/v3/createSimpleLogin
    method: POST
- name: view_terminal_list
  endpoint:
    path: /pay/v3/getTerminalList
    method: GET
- name: terminal_list
  endpoint:
    path: /pay/v3/getTerminalList
    method: GET
    data_selector: object
- name: process_transaction
  endpoint:
    path: /pay/v3/processFromTerminal
    method: POST
    data_selector: terminalRequestId
- name: process_transaction
  endpoint:
    path: /pay/v3/processFromTerminal
    method: POST
- name: view_terminal_transaction_status
  endpoint:
    path: /pay/v3/processFromTerminal/{terminalRequestId}
    method: GET
- name: process_transaction
  endpoint:
    path: /pay/v3/processFromTerminal/terminalRequestId
    method: GET
- name: pair_terminal
  endpoint:
    path: /pay/v3/pairTerminal
    method: POST
    data_selector: terminalName
    params: {}
- name: register_terminal
  endpoint:
    path: /pay/v3/registerTerminal
    method: POST
    data_selector: terminalId
    params:
      merchantId: required
      terminalRegistrationCode: required
      terminalName: length ≤ 20
- name: deregister_terminal
  endpoint:
    path: /pay/v3/deregisterTerminal
    method: POST
    data_selector: terminalRegistrationStatus
    params:
      terminalId: string
- name: create_subscription
  endpoint:
    path: /subscription/v3
    method: POST
- name: subscription
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: records
    params: {}
- name: view_subscription
  endpoint:
    path: /subscription/v3/{id}
    method: GET
- name: subscription
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: records
    params: {}
- name: payment_plan
  endpoint:
    path: /payment-plans
    method: GET
    data_selector: records
    params: {}
- name: update_subscription
  endpoint:
    path: /subscription/v3/{id}
    method: PUT
- name: delete_subscription
  endpoint:
    path: /subscription/v3/{id}
    method: DELETE
    data_selector: message
    params:
      id: string
- name: customer_subscriptions
  endpoint:
    path: /subscription/v3/customerRef/{customerRef}
    method: GET
    data_selector: array of objects
    params:
      customerRef: customerRef
- name: one_time_use_token
  endpoint:
    path: /apm/v3/token
    method: POST
    data_selector: token
- name: get_apm_iframe
  endpoint:
    path: /apm/v3
    method: GET
    data_selector: HTML page
    params:
      token: string
- name: run_apm_transaction
  endpoint:
    path: /apm/v3/process
    method: POST
- name: apm_transaction_async_status
  endpoint:
    path: /apm/v3/transactionAsyncStatus/{asyncTraceId}
    method: GET
    data_selector: gatewayResponse
    params: {}
- name: capture_apm_transaction
  endpoint:
    path: /apm/v3/capture
    method: POST
    data_selector: data
- name: void_apm_transaction
  endpoint:
    path: /apm/v3/void
    method: POST
    data_selector: data
    params: {}
- name: refund_apm_transaction
  endpoint:
    path: /apm/v3/refund
    method: POST
    data_selector: data
    params: {}
- name: recipient
  endpoint:
    path: /payout/v3/recipient
    method: POST
    data_selector: recipientRef
- name: recipients
  endpoint:
    path: /payout/v3/recipient
    method: GET
    data_selector: rows
    params: {}
- name: recipient
  endpoint:
    path: /payout/v3/recipient
    method: GET
    data_selector: rows
    params:
      offset: 0
      limit: 10
- name: update_recipient
  endpoint:
    path: /payout/v3/recipient
    method: PUT
    data_selector: recipientId
    params:
      recipientId: ''
      firstName: ''
      lastName: ''
- name: recipients
  endpoint:
    path: /payout/v3/recipient
    method: PUT
- name: view_recipients
  endpoint:
    path: /reference/viewrecipients
    method: GET
- name: recipient
  endpoint:
    path: /payout/v3/recipient/{recipientId}
    method: GET
    data_selector: recipientId
    params: {}
- name: recipient
  endpoint:
    path: /payout/v3/recipient/recipientId
    method: GET
- name: recipient
  endpoint:
    path: /payout/v3/recipient/recipientRef/{recipientRef}
    method: GET
    data_selector: object
    params: {}
- name: submit_payouts
  endpoint:
    path: /payout/v3/pay
    method: POST
    data_selector: message
    params: {}
- name: payout_batch
  endpoint:
    path: /payout/v3/batch
    method: POST
    data_selector: response
    params: {}
- name: payouts
  endpoint:
    path: /payout/v3/batch
    method: POST
- name: view_payout
  endpoint:
    path: /payout/v3/{payoutId}
    method: GET
    data_selector: object
    params:
      payoutId: string
- name: payout
  endpoint:
    path: /payout/v3/payoutId
    method: GET
- name: payouts
  endpoint:
    path: /payout/v3
    method: GET
    data_selector: payouts
    params: {}
- name: payout
  endpoint:
    path: /payout/v3/recipient
    method: GET
    data_selector: rows
    params:
      limit: 10
      offset: 0
- name: payouts
  endpoint:
    path: /payout/v3
    method: GET
    data_selector: response
    params:
      offset: 0
- name: view_payouts_pending
  endpoint:
    path: /payout/v3/pending
    method: GET
    data_selector: rows
    params:
      offset: '0'
      limit: '10'
- name: payouts_pending
  endpoint:
    path: /payout/v3/pending
    method: GET
- name: cancel_pending_payouts
  endpoint:
    path: /payout/v3/pending
    method: DELETE
    data_selector: message
    params: {}
- name: view_payouts_pending_by_id
  endpoint:
    path: /payout/v3/pending/{payoutId}
    method: GET
    data_selector: object
    params:
      payoutId: string
- name: pending_payouts
  endpoint:
    path: /payout/v3/pending/payoutId
    method: GET
- name: spendback
  endpoint:
    path: /payout/v3/spendback
    method: POST
    data_selector: id
- name: spendback
  endpoint:
    path: /payout/v3/spendback
    method: POST
    data_selector: object
- name: spendback
  endpoint:
    path: /payout/v3/spendback
    method: GET
    data_selector: rows
    params: {}
- name: spendback
  endpoint:
    path: /payout/v3/spendback
    method: GET
    params:
      offset: 0
- name: spendback
  endpoint:
    path: /payout/v3/spendback/{spendbackId}
    method: GET
    data_selector: object
    params:
      spendbackId: required
- name: spendback
  endpoint:
    path: /payout/v3/spendback/spendbackId
    method: GET
    data_selector: object
- name: spendback_refund
  endpoint:
    path: /payout/v3/spendbackRefund
    method: POST
    data_selector: spendbackId
    params: {}
- name: spendback_refund
  endpoint:
    path: /payout/v3/spendbackRefund
    method: POST
- name: recipient_balance
  endpoint:
    path: /payout/v3/recipientBalance
    method: GET
    data_selector: recipientBalances
    params:
      recipientRef: required
- name: recipient_balance
  endpoint:
    path: /payout/v3/recipientBalance
    method: GET
- name: view_transaction_by_payment_id
  endpoint:
    path: /transaction/v3/paymentId/{paymentId}
    method: GET
    data_selector: id
- name: transaction
  endpoint:
    path: /transaction/v3/paymentId/paymentId
    method: GET
    data_selector: object
- name: view_card_tokens
  endpoint:
    path: /reference/viewcardtokens
    method: GET
- name: view_transactions
  endpoint:
    path: /reference/viewtransactions
    method: GET
- name: create_subscription
  endpoint:
    path: /reference/createsubscription
    method: POST
- name: transaction
  endpoint:
    path: /transaction/v3/{transactionId}
    method: GET
    data_selector: id
    params:
      transactionId: string
- name: transaction
  endpoint:
    path: /reference/viewtransactions
    method: GET
    data_selector: object
- name: view_transaction_by_payment_id
  endpoint:
    path: /transaction/v3/transactionId
    method: GET
- name: view_transactions
  endpoint:
    path: /transactions
    method: GET
- name: transactions
  endpoint:
    path: /transaction/v3
    method: GET
    data_selector: transactions
    params: {}
- name: transactions
  endpoint:
    path: /transaction/v3
    method: GET
    data_selector: rows
    params:
      limit: '10'
      offset: '0'
      startDate: YYYY-MM-DD
      endDate: YYYY-MM-DD
- name: transactions
  endpoint:
    path: /transaction/v3
    method: GET
    params:
      limit: 10
      offset: 0
      currencyId: '840'
- name: transaction_count
  endpoint:
    path: /transaction/v3/count
    method: GET
    data_selector: integer
    params: {}
- name: view_transaction_total
  endpoint:
    path: /transaction/v3/total
    method: GET
    data_selector: number
    params:
      startDate: string
      endDate: string
- name: daily_transaction_summary
  endpoint:
    path: /transaction/v3/dailyTransactionsSummary
    method: GET
    data_selector: today, yesterday
    params:
      date: YYYY-MM-DD
- name: daily_transactions_summary
  endpoint:
    path: /transaction/v3/dailyTransactionsSummary
    method: GET
- name: transactions_summary
  endpoint:
    path: /transaction/v3/transactionSummary
    method: GET
- name: transactions_summary
  endpoint:
    path: /transaction/v3/transactionsSummary
    method: GET
    data_selector: array of objects
    params:
      startDate: required
      endDate: required
- name: card_types
  endpoint:
    path: /transaction/v3/paymentTypes
    method: GET
    data_selector: array of objects
- name: view_recoveries
  endpoint:
    path: /recovery/v3
    method: GET
    data_selector: rows
    params:
      limit: 10
      offset: 0
- name: recovery
  endpoint:
    path: /recovery/v3
    method: GET
    params:
      limit: '10'
      offset: '0'
- name: recovery
  endpoint:
    path: /recovery/v3/retry/{retryId}
    method: GET
- name: recoveries
  endpoint:
    path: /recovery/v3/retry/retryId
    method: GET
- name: enable_or_disable_retries
  endpoint:
    path: /recovery/v3/enable
    method: PUT
- name: enable_disable_retries_multiple_transactions
  endpoint:
    path: /recovery/v3/bulkEnable
    method: PUT
    data_selector: retries
- name: chargeback
  endpoint:
    path: /chargeback/v3/{id}
    method: GET
- name: chargebacks
  endpoint:
    path: /chargeback/v3
    method: GET
    data_selector: rows
    params:
      limit: '10'
      offset: '0'
      startDate: YYYY-MM-DD
      endDate: YYYY-MM-DD
- name: chargeback
  endpoint:
    path: /chargeback/v3
    method: GET
    params:
      limit: '10'
      offset: '0'
- name: chargeback_summary
  endpoint:
    path: /chargeback/v3/summary
    method: GET
    data_selector: object
    params: {}
- name: dispute
  endpoint:
    path: /chargeback/v3/dispute/{id}
    method: GET
    data_selector: object
    params:
      id: integer
- name: dispute_chargeback
  endpoint:
    path: /chargeback/v3/dispute
    method: POST
- name: dispute
  endpoint:
    path: /chargeback/v3/dispute
    method: GET
    data_selector: rows
    params:
      limit: '10'
      offset: '0'
- name: dispute
  endpoint:
    path: /chargeback/v3/dispute
    method: GET
    params:
      limit: '10'
      offset: '0'
- name: deposit_summary
  endpoint:
    path: /ach/v3
    method: GET
    data_selector: rows
    params:
      limit: limit
      offset: offset
      startDate: startDate
      endDate: endDate
      merchantIds: merchantIds
- name: who_am_i
  endpoint:
    path: /user/v3/account/whoAmI
    method: GET
- name: whoAmI
  endpoint:
    path: /user/v3/account/whoAmI
    method: GET
- name: update_self
  endpoint:
    path: /user/v3/self
    method: PUT
- name: create_user
  endpoint:
    path: /user/v3/account/emvioUser
    method: POST
- name: account
  endpoint:
    path: /user/v3/account/emvioUser
    method: POST
    data_selector: object
- name: refresh_credentials
  endpoint:
    path: /user/v3/account/refresh
    method: POST
    data_selector: object
    params: {}
- name: login
  endpoint:
    path: /user/v3/login
    method: POST
    data_selector: object
    params: {}
- name: merchant
  endpoint:
    path: /merchant/v3
    method: GET
    data_selector: array of objects
    params:
      merchantIds: string
- name: webhook
  endpoint:
    path: /webhook/v3/webhookUrls
    method: POST
- name: webhook_urls
  endpoint:
    path: /webhook/v3/webhookUrls/{id}/{webhook_type}
    method: GET
- name: create_legacy_merchant_webhooks
  endpoint:
    path: /webhook/v3/config
    method: POST
- name: legacy_merchant_webhook_configuration
  endpoint:
    path: /webhook/v3/config/{id}
    method: GET
    data_selector: webhooks
    params:
      id: string
- name: webhook_configuration
  endpoint:
    path: /webhook/v3/config/id
    method: GET
- name: create_webhook_secret
  endpoint:
    path: /webhook/v3/secret
    method: POST
    data_selector: secret
    params: {}
- name: webhook_secret
  endpoint:
    path: /webhook/v3/secret/{id}
    method: GET
    data_selector: secret
    params: {}
- name: online_application
  endpoint:
    path: /onlineapplication/v2/app
    method: POST
- name: online_application
  endpoint:
    path: /onlineapplication/v2/app
    method: POST
    data_selector: object
    params: {}
- name: application
  endpoint:
    path: /processorOnboarding/v2/applications/{onboardingId}
    method: GET
    data_selector: object
    params:
      onboardingId: string
- name: application
  endpoint:
    path: /processorOnboarding/v2/applications/onboardingId
    method: GET
notes:
- Contact Integrations Support to request credentials.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- For the previous version of the documentation, go to https://olddocs.nexiopay.com/
- 'Access to the Nexio Dashboard for sandbox: https://dashboard.nexiopaysandbox.com/'
- You must have a sandbox account to test webhooks, log in to the Nexio Dashboard,
  and use all the Nexio API endpoints.
- CORS requires that every request for a one-time-use token must be sent from a server.
- Each one-time-use token expires after one hour.
- Basic authentication requires generating a Base64 encoded string from 'username:password'.
- 'After you are done with your integration and testing in the sandbox environment,
  you are ready for the next step: moving to a production environment.'
- Some objects may return nulls in deeply nested fields
- Block fraud, not sales.
- Sell with confidence by filtering the legitimate from the fraudulent.
- Update automatically retrieves new information for outdated cards tied to subscription
  payments.
- Designed for sellers and platforms who don’t have built-in functionality for recurring
  or subscription payments.
- 3D Secure 1.x and 2.x supported
- Installments not supported
- Authorize.net does not settle batches immediately.
- '`paymentType` is not supported.'
- Supporting the customer redirect workflow is required.
- Configuring and utilizing webhooks is necessary as part of the 3DS workflow.
- The security code must be present for the first transaction through CKO.
- By default, Cybersource does not block multiple refunds, even if they exceed the
  original amount.
- Cybersource does not settle batches immediately.
- Fortis (Zeamster) does not settle batches immediately.
- Nexio mock gateway is only available in the Nexio sandbox and is for testing purposes.
- Nexio mock gateway does not settle batches immediately. Transaction will automatically
  be settled at 05:00 UTC the following day from the transaction.
- Nexio mock gateway supports security code validation.
- Nexio mock gateway supports Address Verification Service.
- NMI supports the Address Verification Service (AVS) feature.
- NMI supports the Security code verification feature.
- If you will be using cloud-based terminals with NMI, you must provide the security
  key and processor ID values.
- Openpay is a gateway that allows you to collect card payments.
- Openpay requires a unique `orderNumber` for every transaction request.
- Openpay supports partial refunds, but not same-day refunds.
- No external 3D Secure support
- You must support the customer redirect flow for PayU Asia Pacific.
- Amount of zero (`0`) is not supported.
- PayU iyzico supports sale transactions as well as partial, multiple, or full refunds.
- Capture is only allowed up to 10% over the pre-authorized amount.
- You must support the customer redirect flow for PayU iyzico.
- You need to work with Integrations Support to configure PaymentsOS webhooks for
  your account.
- Propay does not support capturing more than the amount from the auth only transaction.
- Includes clientIp parameter in the payment request for fraud prevention.
- USAePay settles batches daily.
- paymentType is not supported.
- 'Supported processing currencies: CAD, USD'
- Make sure all the required parameters are accounted for across all the APMs used.
- You must work with integrations to add Apple Pay to your account.
- When integrating Apple Pay to multiple environments, you need to verify the domain
  for each environment.
- For Apple Pay through Authorize.net, supported currencies are CAD and USD. For Apple
  Pay through Cybersource, supported currencies are AUD, CAD, and USD.
- Required parameters include amount, currency, customer details, and order number.
- If using custom integration, must include customerRedirectUrl in the request.
- Consumers are redirected to Google Pay to complete their transactions.
- The value for data.currency must match data.locale and data.customer.billToCountry.
- Each billing country must be enabled by Klarna for payment acceptance.
- Configuring and utilizing webhooks is necessary as part of the Paynet workflow.
- Paynet only supports MXN for the processing currency.
- 'Successful sale transactions have the following statuses: pending, settled'
- Pending status displays as 'authorized' or 'AUTHORIZED' in the Nexio Dashboard;
  it displays as 10, meaning 'authorized', in the response when querying transactions.
- PayPal does not support merchant-initiated transactions for a subscription or payment
  plan.
- PayPal supports Pay Later messaging, which acts like a subscription or payment plan
  from the customer point of view.
- For the multi iframe integration method, use the expressIFrameUrl value in the steps
  for the transaction.
- For the individual iframe option, use the buttonIFrameUrls.url of the paypal APM
  for the transaction.
- For the custom redirect option, use the redirectUrls.url of the paypal APM for the
  transaction.
- PayPal (with Braintree) allows for customer-not-present transactions via a saved
  token.
- Only supports the AUD, CAD, EUR, GBP, and USD currencies.
- Requires a PayPal Developer Account and a Braintree Account
- Merchant account IDs must be created for each currency supported
- The standard PayPal integration does not support merchant-initiated recurring transactions,
  only the PayPal (with Braintree) integration.
- Nexio responds with transaction results in event messages.
- The response you get depends on the type of webhooks you have configured.
- Sofort through Checkout.com does not support installments or recurring payments.
- Requires setup of APM integration.
- Customer must be redirected to Sofort to complete transactions.
- Each one-time-use token can only be used to submit a single iframe form.
- Although card data never touches your servers, using your own form changes your
  PCI liability from SAQ A to SAQ A-EP.
- If you want to store the token in your own database you must either use a callback
  or use the token returned in the event info.
- Requires setup of connected app in api
- Although bank data never touches your servers, using your own form changes your
  PCI liability from SAQ A to SAQ A-EP.
- Typically, integrators use the own form option with a saved card or echeck token
  because it allows for more flexibility while also being fairly secure.
- Each one-time-use token can only be used to submit a single form.
- You can only get the transactionId after the transaction runs.
- Ensure to set up OAuth2 credentials in the Nexio developer portal.
- Echeck transactions cannot be voided or refunded.
- Requires setup of connected app in nexio
- Some responses may include nested fields
- Ensure to handle token expiration properly.
- Although you can set the isAuthOnly parameter to true, if the Auth Only checkbox
  is set to also display, the system does not automatically select the checkbox.
- The card will not be registered until the merchant account is enrolled.
- Each key can only be used once and expires after one hour.
- The retail iframe uses RSA encryption with no padding in the customer's web browser
  in order to limit your PCI scope.
- If you do not see the Payment Method field, your account is not configured for retail
  transactions.
- Contact Integrations Support for help getting set up before proceeding.
- After pairing completes, the connection is permanent until the device is unpaired
  or the pairing is removed in the USAePay portal.
- When successfully connected to the Wi-Fi network, the terminal display shows both
  the device serial number and the registration code.
- If the terminal does not display a registration code, you may need to force a restart
  by simultaneously holding down the yellow key and the .,#* key (located to the left
  of the green circle key).
- Registration codes come from the terminal and are provided to the Nexio API.
- Registration code T00001 simulates a successful registration.
- Registration code T00002 simulates a failed registration.
- Folio number must be sent in the customer object, labeled orderNumber.
- Nexio's integration guides for alternative payment methods (APM) allow you to offer
  shoppers one or more APMs with a single integration.
- Developers should already have experience using the Nexio APIs and understand how
  to create one-time-use tokens, send and receive requests, and work with the Sale,
  Auth Only, Capture, and Refund transaction types.
- When implementing multiple APMs, it is important to ensure that you include the
  complete set of required parameters when making the request.
- This service is not compatible with embedded browsers in apps.
- Google Pay and PayPal (with Braintree) are not currently supported through Express
  APM.
- Some APMs require additional configuration steps.
- Some APMs like Apple Pay, Google Pay, Klarna, and others are not currently supported
  through Redirect URLs.
- 'Google Pay only: You must use a custom DIV instead of an iframe for Google Pay.'
- If the payment was successful, the message includes the status and payment ID.
- If the payment failed, the message includes the status and an error message.
- Pay Later messaging can be shown for only one payment method on the merchant account.
- Pay Later messaging can be shown for only one payment method on the merchant account.
  If you need to change which payment method is enabled for Pay Later messaging, contact
  Integrations Support.
- Remove any spaces or other problem characters and retry the request for Status 400.
- Change the divId in the script to match one on the page, or add a DIV to the page
  and use the divId indicated in the script as the ID of the DIV for Status 500.
- Auth only transaction(s) are currently only available through specific alternative
  payment methods.
- A successful auth only transaction returns a status of authOnlyPending or authOnly.
- Make sure to include the `processingOptions.saveRecurringToken` parameter in the
  body of your one-time-use token request and set it equal to `true`.
- This `apm.token` value cannot be retrieved through the API at any other time.
- Some payment methods support capturing the full amount, partial amount, or even
  an amount greater than the auth-only amount.
- Paynet is not currently supported in refunds.
- The overall payout experience involves creating a recipient profile and submitting
  a payout request.
- Spendback refunds are not currently supported through Nexio.
- Ensure your account is configured correctly and determine whether your payout provider
  supports spendbacks.
- Uses OAuth2 with refresh token — requires setup of connected app in Nexio
- If you want routing to be equal for all the API user's MIDs that support the transaction
  currency, you do not need to create a target allocation rule because that is the
  default behavior.
- For target allocation, your Nexio account must be configured with a single API user
  account for all the transactions.
- The transaction volume only includes card and e-check transactions. Transactions
  using alternative payment methods (APMs) are not included in this volume amount.
- The transaction volume does not get modified for transactions that were successful
  but then later voided or refunded.
- The transaction volume amount includes the amount for an auth only transaction at
  the time of the transaction (rather than when the transaction is actually captured).
- If you change the target allocations, the change is effective from that change date.
  Thereafter, the system attempts to send transactions based on the new target allocation
  percentages and based on where the current monthly transaction amount is for each
  MID. If the change in allocation percentages is large, or if the change happens
  late in the month, then one MID will get 100% of the transactions for a time during
  the remainder of the month. Therefore, use caution when making changes in the middle
  of the month.
- In general, the Nexio system does what it can to allow payments to succeed.
- A potential unexpected consequence of this method for allocation may happen if there
  are multiple small transaction amounts throughout the month and then a single large
  transaction amount that occurs at the end of the month, resulting in the system
  using the MID with the lower allocation percentage for that transaction and thus
  putting that MID well above the expected allocation percentage.
- Some endpoints may have specific requirements or behaviors that should be considered.
- Updated 11 months ago
- If the value provided for `paymentOptionTag` in the transaction request is invalid
  for the account, Nexio sends an error rather than attempt the transaction
- If the transaction would be disqualified because of the specified parameter, Nexio
  responds with an error message and does not attempt to process the transaction further
- If you specify a value for the `paymentOptionTag` in the request and that tag has
  been assigned to multiple merchant IDs (MIDs) for your API user account, Nexio checks
  for target allocation or item routing rules as well.
- Tags created for MIDs are not visible in the Dashboard.
- When you specify a value for both of these parameters (processingOptions.merchantId
  and processingOptions.paymentOptionTag), Nexio uses only this information to process
  the transaction. The system will not attempt to use any other possible merchant
  IDs (MIDs) or payment option tags.
- Therefore, using a specific value for both of these parameters means that Nexio
  does not attempt any other routing, even if other routing rules have been specified
  in the account.
- If the value provided for either merchantId or paymentOptionTag in the transaction
  request is invalid for the account, Nexio sends an error rather than attempt the
  transaction.
- If the transaction would be disqualified because of the specified parameter, Nexio
  responds with an error message and does not attempt to process the transaction further.
- When you specify a value for processingOptions.merchantId, Nexio uses only this
  information to process the transaction. The system will not attempt to use any other
  possible merchant IDs (MIDs).
- If the value provided for merchantId in the transaction request is invalid for the
  account, Nexio sends an error rather than attempt the transaction.
- Integrations Support sets up the merchant account to default to 3DS when the merchant
  will be handling transactions in 3DS-mandated regions.
- Nexio provides transaction information to the gateway and responds to your system
  with a 3DS redirect URL where required.
- 'Set check3ds: true for all recurring transactions, or ensure that it is enabled
  by default.'
- 'Set check3ds: false for all recurring transactions if your gateway does not support
  paymentType.'
- Nexio strongly recommends including a unique order number with each transaction.
- Nexio highly recommends configuring and using webhooks.
- The response schema will be the same as that of a standard POST request to the Run
  card transaction endpoint.
- The page does not generate a default confirmation page. We recommend using our response
  to create your own confirmation page.
- Requires setup of connected app in Nexio
- Nexio strongly recommends that you include an order number with each transaction.
- Nexio highly recommends that you configure and use webhooks.
- Use the AVS while saving a card token for US-based addresses.
- A gateway AVS error will not prevent the card token from being saved.
- If you received a gateway error during an address verification check, you may want
  to check for and delete the card token.
- Ensure to have valid credentials for authentication.
- Uses only the test postal codes provided in the table
- If you do not want to use a device fingerprint when using the iframe, set the `processingOptions.shouldUseFingerprint`
  parameter to `false` in the one-time-use token request.
- Openpay requires a new device fingerprint to be created with every transaction (included
  by default with the Nexio iframe), while it is strongly recommended for Kount.
- Openpay requires a new device fingerprint to be created with every transaction
- Strongly recommended for Kount
- Kount is strongly recommended for device fingerprinting
- 'When the iframe loads, the following happens: Kount data collector is automatically
  included.'
- If everything is working correctly, you'll see a fingerprintPosted event from the
  web browser.
- Only use this workflow if needed, such as for recurring payments with Openpay.
- Enabling Kount verification with the API
- Uses OAuth2 for authentication
- Contact Integrations Support to ensure Kount is enabled on your merchant account.
- 'Before starting this tutorial, make sure you understand the following topics from
  the Quick start section: Sandbox environments (especially about testing). Authentication
  (about authenticating using your API user and when you need a login versus a one-time-use
  token).'
- 'Include the object ''processingOptions'': { ''checkFraud'': true } in the body
  of your request.'
- The amount values apply for USD currency. If you send a different currency to Kount,
  the system converts it to USD based on the current currency conversion rates.
- Enabling security code verification with the API
- 'Include the object ''processingOptions'': { ''verifyCvc'': true } in the body of
  your request.'
- 'Default settings are ''requireCvc: true'' and ''hideCvc: false''.'
- You will receive a 400 error, because the CVC cannot be verified when the field
  is hidden.
- A gateway error will **not** prevent the card token from being saved.
- The only time a card will not be saved is when the `matchCvv` parameter returns
  `false`.
- Requires setup of connected app in Nexio.
- Some API responses may include nested data structures.
- Decline Recovery does not immediately determine whether the payment will go through
  at a later date.
- Decline Recovery will not attempt to retry transactions classified as hard declines.
- Requires setup of OAuth credentials in the developer portal
- Decline recovery does not immediately determine whether the payment will go through
  at a later date.
- Decline recovery will not attempt to retry transactions classified as hard declines.
- Requires authentication setup for API access
- The success parameter refers to whether the API request was sent successfully. It
  does not mean that the transaction was successfully enabled or disabled for decline
  recovery.
- The card token does not get sent to the Account Updater provider until the merchant
  account is enrolled.
- It usually takes three to four business days for a card token to become registered
  with account updater.
- It usually takes three to four business days for a card token to become de-registered
  with account updater.
- By default, all cards are tagged for enrollment in account updater upon creation.
- Subscriptions set transactions to run for a specified amount on a predefined schedule.
- You can allow customers to choose from several different payment method options
  for a subscription.
- If the initial transaction is declined, the subscription will not be created. It
  must be re-created with a new card token.
- Some alternative payment methods allow you to show messaging to the customer with
  'pay later messaging'.
- Merchant must remember to run the transactions at the appropriate time and date.
- Each transaction must be sent individually.
- If the initial transaction is declined, the subscription will not be created.
- Payment plans start with a balance and include a schedule for transactions to run
  until the pre-specified balance is paid in full.
- You can allow customers to choose from several different payment method options
  for a payment plan.
- Some alternative payment methods allow you to show messaging to the customer with
  'pay later messaging'. This functions as a payment plan for the customer.
- Ensure proper setup of OAuth2 credentials in the Nexio developer portal.
- If the initial transaction is declined, the payment plan will not be created. It
  must be re-created with a new card token or payment method.
- To customize existing or create new translations, see the Customizing iframe labels
  topic.
- Ensure to set up your application in the Nexio developer portal before using the
  API.
- SPAN with text that displays before the iframe loads. It includes the text of 'Establishing
  secure connection to payment engine.'
- SPAN with text that displays when there is an error loading the iframe. It includes
  the text of 'Failed to connect to secure server. Please check your internet connection.'
- Transactions from the Payment Service are added to the Transaction Service every
  minute and not in real-time. Attempting to query the Transaction Service sooner
  than one minute after running a transaction may return no results.
- Use query parameters to filter results in Payments, Reporting, and Payouts API.
- You can also filter the response to only include records that match a specific value
  for one or more parameters.
- You can overwrite values set in the one-time-use token when saving card or echeck
  tokens.
- Nexio caches each one-time-use token for an hour.
- Each one-time-use token can only be used one time.
- Webhook has no additional information or meaning than the initial response to the
  request.
- Webhooks must be registered to receive events.
- Nexio supports only either the legacy webhooks or these new ones.
- You can create webhooks in the sandbox environment for merchant applications, however,
  the system will never send a webhook for account events because the onboarding application
  process only works in the production environment.
- The list of IP addresses that send the webhooks is dynamic and is updated periodically.
- Webhook body contains minimal information.
- For transactions, the body of the webhook contains only a small subset of the possible
  parameters for a transaction.
- For declined transactions, the body of the webhook contains only a small subset
  of the possible parameters for a transaction or the declined information.
- For payouts, the body of the webhook contains only a small subset of the possible
  parameters for a payout.
- For spendbacks, the body of the webhook contains only a small subset of the possible
  parameters for a spendback.
- Webhooks allow you to retrieve real-time information about payment and payout events.
- You may also choose to receive a signature header—allowing you to verify the webhook's
  authenticity.
- Webhook will be sent when the account associated with the card has been closed
- Webhook will be sent when the card brand advises you to contact the cardholder
- Webhook will be sent when card data has been updated
- Webhook will be sent when card data has been saved
- Webhook will be sent when echeck data has been saved
- Webhook will be sent when a payout gets submitted or a payout status changes
- Webhook will be sent when a spendback is submitted or a spendback status changes
- Webhook will be sent when a subscription has been processed
- Webhook will be sent when a transaction is authorized
- Webhook will be sent when a transaction is captured
- Webhook will be sent when a transaction is marked as pending
- Webhook will be sent when a transaction is refunded
- Webhook will be sent when a transaction is settled
- Webhook will be sent when a transaction is voided
- Ensure that you do not have any new webhooks configured before setting up legacy
  ones.
- The list of IP addresses is dynamic and is updated periodically.
- Nexio does not support having the current version of webhooks and the legacy version.
- 'Every webhook will include a body with the following keys: eventType and data.'
- Updated about 3 years ago
- You can only send values for 10, 20, 30, 40, and 50.
- In the response, you will only get those values or null, depending on the card used
  in the transaction.
- To check the status of a chargeback, you should get in direct contact with the chargeback
  department.
- Batch close time is typically at 11pm PDT.
- These steps do not apply to the production environment. Production translation/localization
  files must be hosted by Nexio.
- The gist must be public in order for Nexio to access it.
- Once a token has been used to submit an iframe it cannot be used to load another.
- You must request a new one-time-use token prior to submitting each iframe.
- Processing options must be sent in the request for a one-time-use token.
- In order to use this endpoint, the Surcharging feature must be enabled for the account
  and the new agreement must be accepted.
- Echeck tokens can be used to process through any MID on your account. They are not
  restricted to a specific merchant account or currency.
- To use the Try It feature for this endpoint, you must first request a one-time-use
  token.
- Defaults to USD for currency
- To capture an auth only transaction, run an auth only transaction using the Run
  card transaction endpoint.
- Nexio does not currently support returning terminal tokens from this endpoint.
- Card tokens can be used to process through any MID on your account. They are not
  restricted to a specific merchant account or currency.
- Cards registered with the account updater service may take up to 72 hours to be
  deregistered.
- Cards registered with the account updater service may take up to 72 hours to be
  removed.
- Terminals must be configured before they are available for processing.
- To use the Try It feature for this endpoint, you must use the credentials for your
  Sandbox API user.
- Depending on the merchant account configuration, when you add a terminal, you either
  need to request a pairing code or add a registration code.
- You can only deregister terminals that have already been registered with Nexio.
- Nexio does not currently recommend using the Subscription service for a 3DS flow.
- Card token, currency, and customer reference number cannot be updated.
- For an existing payment plan, none of the schedule parameters can be updated.
- The customer reference number used when creating the subscription or payment plan.
- After a token has been used to submit an iframe it cannot be used to load another.
- 'In order to use this endpoint, the following two things must be true: You must
  have already set processingOptions.saveRecurringToken to true in the APM one-time-use
  token request for the initial transaction. Your customer must have already checked
  out and paid through the alternative payment method for that initial transaction.'
- For the payout provider Interchecks, if you pass a value for one of the recipientIdNumbers
  parameters when creating a new recipient, you cannot update any recipient information
  with Update recipient endpoint.
- The default value for limit is 10
- The default value for offset is 0
- You can only update a recipient record if the request is accepted by the payout
  provider associated with the recipientId.
- You can only use recipientId as the path parameter for this endpoint.
- You can only use recipientRef as the path parameter for this endpoint.
- Payouts can be made to existing recipients or create a recipient simultaneously.
- The batch file must be in a location that is accessible by the server making this
  API request.
- Due to technical limitations, it is not possible to use the Try It feature with
  this endpoint.
- The payoutId parameter is not the same as the payoutRef, payoutProviderRef, or payoutProviderAdditionalRef.
- This is the only endpoint where you can use payoutRef in the request to view a specific
  payout based on that value.
- The default value for limit is 10.
- The default value for offset is 0.
- The request can filter results using query parameters.
- The spendbackId parameter is not the same as the spendbackRef or providerSpendbackRef.
- It may take up to a minute after a transaction is run before you can see it in the
  response for this endpoint.
- Payment ID is not the same as the Nexio Transaction ID.
- You must specify at least one parameter. Failing to submit one results in an Internal
  Server Error.
- The default start date is 30 days prior to today's date.
- The default end date is today's date.
- 'By submitting a chargeback dispute via the Nexio API you agree to the following:
  ''I agree that I am not including sensitive information. Sensitive information includes:
  full credit or debit card numbers, credit or debit card security codes (CVV/CVC),
  social security numbers, driver''s license numbers, health records, and so forth.''
  Your dispute will be rejected if you include sensitive information.'
- If you do not include a parameter for this endpoint, the system uses the default
  value for the request.
- The amounts presented may be different than what was authorized, as the funds may
  not have settled yet.
- Include at least the email address and value for the role of this new user.
- Nexio supports only either the new webhooks or these legacy ones.
- Set up a webhook secret for additional security. After you create a secret, each
  webhook includes a header containing a signature.
- You cannot use this endpoint in the Nexio sandbox environment.
- For authentication with this endpoint, use your CForce credentials.
- You cannot use this endpoint in the sandbox environment.
- For authentication with this endpoint, use your Production API user credentials.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Common errors
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Invalid authentication credentials'
- '404 Not Found: Endpoint does not exist'
- Insufficient funds
- Credit card has expired
- Card number error
- Gateway error
- Do not honor
- Verify CVC failed
- Gateway timeout
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'INVALID_CARD_DETAILS: Ensure card details are correct.'
- '401 Unauthorized: Invalid credentials'
- '403 Forbidden: Access denied'
- '404 Not Found: Endpoint not available'
- '500 Internal Server Error: Server issue'
- Multiple captures are not supported.
- Using the full card number option for running a transaction is not supported.
- '400 Bad Request: Ensure all required fields are filled correctly.'
- '401 Unauthorized: Check your credentials and authentication setup.'
- '401 Unauthorized: Recheck API credentials'
- '400 Bad Request: Check required fields in the request'
- TRANSACTION_PENDING
- TRANSACTION_SETTLED
- 'TRANSACTION_AUTHORIZED: Transaction authorized successfully'
- 'TRANSACTION_CAPTURED: Transaction captured successfully'
- 'TRANSACTION_REFUNDED: Transaction refunded successfully'
- 'TRANSACTION_SETTLED: Transaction settled successfully'
- 'TRANSACTION_VOIDED: Transaction voided successfully'
- '400 Bad Request: Check required parameters in the request.'
- '401 Unauthorized: Ensure correct authentication credentials.'
- '404 Not Found: Verify the endpoint path.'
- 'Non-200 status: Display a failure page to the customer.'
- Error message returned in JSON object if an error occurs while loading an iframe.
- 'If Nexio returns a non-200 status: Display a failure page to the customer.'
- 'INVALID_REQUEST: Check the request parameters for correctness.'
- '401 Unauthorized: Verify your authentication credentials.'
- '404 Not Found: The requested resource does not exist.'
- 'INVALID_REQUEST: Check request parameters'
- 'UNAUTHORIZED_ACCESS: Verify token and permissions'
- '401 Unauthorized: Check if the token is valid.'
- '400 Bad Request: Check the request parameters.'
- 'terminalRegistrationStatus: deregistered'
- '401 Unauthorized: Recheck Basic Auth credentials'
- 'Error Message: error_message'
- '400: The format used for the divId is not valid.'
- '500: There is no matching DIV on the page with the specified divId.'
- Check the providerResponse parameter for details in case of payment failure.
- 'Invalid paymentOptionTag: Nexio sends an error rather than attempt the transaction'
- '401 Unauthorized: Recheck authorization header.'
- '446: Problem with the merchant account.'
- '409: Problem with the merchant account. Routing rules issue.'
- '481: Transaction canceled by customer.'
- '435: Transaction was declined.'
- 'error: 446, message: ''Authentication Failed'''
- 'error: 409, message: ''Either the routing rules filtered out all possible Merchants.'''
- 'INVALID_CREDENTIALS: Check your client_id and client_secret'
- 'UNAUTHORIZED: Ensure token is valid and not expired'
- 'Invalid request: Check parameters sent in the request'
- 'Unauthorized: Check your authentication credentials'
- Verify CVC Failed
- '404 Not Found: Check the endpoint path'
- '401 Unauthorized: Verify client credentials'
- '500 Internal Server Error: Server issue, try again later'
- '435: This transaction has been declined.'
- '401 Unauthorized: Check your token and permissions'
- '404 Not Found: Ensure the endpoint is correct'
- '500 Internal Server Error: Retry the request'
- This transaction has been declined.
- '401 Unauthorized: Check your credentials'
- '404 Not Found: Verify endpoint path'
- '500 Internal Server Error: Contact support'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify OAuth token.'
- '404 Not Found: Check endpoint path.'
- '400 Bad Request: Check required parameters.'
- '401 Unauthorized: Validate your authentication tokens.'
- '404 Not Found: Verify the endpoint.'
- '200: Operation was successful'
- '401: Operation failed'
- '4xx: Operation failed'
- '404: Operation failed'
- '400: Operation failed'
- '500: Operation failed'
- '400: Payment gateway timeout'
- '400: This `merchantId` is not enabled for payment processing. Please check your
  request or contact [Integrations Support](/page/contact-us).'
- '400: Unsupported action or browser, or device does not support Apple Pay.'
- '400: Due to government sanctions we are unable to process the RUB currency. Please
  check your request or contact integration support.'
- '400: No `recurringId` with the attempted gateway on the card token provided. You
  may need to send a different `paymentType` or include the `CVV`.'
- '400: Kount credentials were invalid. Please check your request or contact integration
  support.'
- '400: Kount risk identified.'
- '400: Invalid currency'
- '400: Invalid gateway'
- '400: Invalid TokenEx configuration.'
- '400: TokenEx credentials were invalid. Please check your request or contact integration
  support.'
- '400: Tokenization error, failed to process token: [tokenex.token], please contact
  Support.'
- '400: Unable to process with gateway.'
- '400: Missing one time use token in GET query sting.'
- '400: Missing required fields'
- '400: Unable to capture void or refund'
- '400: Failed card security code check'
- '400: This request is invalid due to the `amount` field. Please check your request.'
- '400: Amount value is not a number'
- '400: Verify AVS Failed'
- '400: Authentication Failed'
- '401: Insufficient access'
- '401: Card merchant is not associated with requesting account'
- '404: The requested item is not found'
- '404: Merchant not found or invalid merchant configuration'
- '409: Either the routing rules (Dashboard Payment Routing or `paymentOptionTag`)
  filtered out all possible merchants or the filtered merchants do not have this `paymentMethod`
  and `currency` combination configured.'
- '500: Unable to load TokenEx'
- '500: Generic server error'
- '500: An internal process failed. There was an error validating the schema.'
- '435: Declined for CVV failure'
- '435: Declined'
- '435: Pickup Card'
- '435: Do not Honor'
- '435: Invalid Transaction'
- '435: Invalid Issuer'
- '435: Unable to locate Record'
- '435: Insufficient funds'
- '435: Invalid Pin'
- '435: Transaction Not Permitted'
- '435: Restricted Card'
- '435: Excess withdrawal count'
- '435: Allowable number of pin tries exceeded'
- '435: No checking account'
- '400: Verify CVC Failed'
- '437: Verify CVC Failed'
- 'P: Not processed'
- 'S: Merchant has indicated that CVV2/CVC2 is not present on card'
- 'U: Issuer is not certified and/or has not provided Visa encryption keys'
- 'X: unknown'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Ensure valid authentication credentials.'
- Common errors related to webhook handling.
- '10: available: Payout money has been transferred. No further action is required
  at this time.'
- '20: completed: The recipient has claimed available funds. Note: This status is
  not available for all payout providers.'
- '90: failed: An error occurred during the transfer.'
- '442 Invalid one-time-use token: A new one-time-use token must be requested prior
  to each iframe submission.'
- '403 Forbidden: A POST request is required to request a one-time-use token.'
- '440 Error when specifying merchant: Ensure merchant ID is correctly entered, you
  have access to the merchant, and send ''merchantId'' as a string.'
- '431 Error from Kount: Ensure test values do not include restricted values or disable
  Kount verification by setting ''processingOptions'': { ''checkFraud'': false }.'
- Authorization header requires 'Credential' parameter. Authorization header requires
  'Signature' parameter. Authorization header requires 'SignedHeaders' parameter.
  Authorization header requires existence of either a 'X-Amz-Date' or a 'Date' header.
- '401 Unauthorized: For help with this error and other error codes, see [Common errors](/docs/common-errors)
  in the Guides area.'
- '400 Bad Request: CVV2/CVC2 no match'
- '400 Bad Request: Reason for the failure to authenticate'
- '401 Unauthorized: A message from Nexio about the state of the request'
- '400 Bad Request: The reason for the failure to authenticate'
- '401 Unauthorized: A message from Nexio about the state of the request.'
- '400: Error with the request'
- '401 Unauthorized: For help with this error and other error codes, see Common errors
  in the Guides area.'
- '200 Success: Indicates successful capture of the transaction.'
- 400 Bad Request
- '400'
- '401'
- 401 Unauthorized
- '404 Not Found: Message indicating the error. For the HTTP 404 error, this means
  the echeck token provided in the request cannot be found or that the authenticated
  user does not have access to that token.'
- '200 Success: The request was successful.'
- '401: Unauthorized'
- '490: Error'
- '400 Bad Request: For help with this error and other error codes, see Common errors
  in the Guides area.'
- '401 Unauthorized: For help with this error and other error codes, see [Common errors](/docs/common-errors)'
- '404 Not Found: Message indicating the error. For the HTTP 404 with the Nexio 400
  error, this means the ID provided in the request cannot be found. To troubleshoot,
  check that the ID is valid (you can use the customerRef for the View customer subscriptions
  endpoint). Also, verify that the merchant ID used to create the subscription is
  available for the user being used to authenticate the request.'
- '404 Not Found: Message indicating the error.'
- '1: Nexio error code number.'
- 'URL Expired: The URL for this request expired after 30 days.'
- 101 Pending payouts with ids nnnn do not exist
- 200 OK
- '401 Unauthorized: Check credentials or permissions'
- '400: Sending a request with all parameters results in a 400 error and the system
  does not return a response.'
- '400: Bad Request'
- 401 Unauthorized. For help with this error and other error codes, see [Common errors](/docs/common-errors)
  in the Guides area.
- 200 Success
- 400 Nexio could not change the status for retries, such as for a retry that is unrecoverable.
  Attempt the request again or check the retry status for the transaction using the
  [View a recovery] or [View recoveries] endpoint.
- 400 Nexio could not change the status for retries, such as for a retry that is unrecoverable.
  Attempt the request again or check the retry status for the transaction using the
  View a recovery or View recoveries endpoint.
- '200 Success: Request was successful'
- '401 Unauthorized: For help with this error and other error codes'
- '401 Unauthorized: For help with this error and other error codes, see [Common errors]'
- '400 Bad Request: Returns as `true` when the error occurred because a required parameter
  is missing from the request.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - basic authentication
client:
  base_url: https://api.nexiopaysandbox.com
  auth:
    type: basic
  headers:
    Content-Type: application/json
source_metadata: null
