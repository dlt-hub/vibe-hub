resources:
- name: transaction
  endpoint:
    path: /transaction
    method: POST
- name: transaction_events
  endpoint:
    path: /api-reference/transactions
    method: GET
    data_selector: events
- name: RtpFedNowTransactionAccepted
  endpoint:
    path: /payments/rtp-fednow/transaction-accepted
    method: POST
    data_selector: transaction
    params: {}
- name: RtpFedNowCreditResponseReceived
  endpoint:
    path: /payments/rtp-fednow/credit-response-received
    method: POST
    data_selector: transaction
    params: {}
- name: RtpFedNowFailedReturnedOrClosedAccount
  endpoint:
    path: /payments/rtp-fednow/failed-returned-or-closed-account
    method: POST
    data_selector: transaction
    params: {}
- name: RtpFedNowFailedRejectedWithReason
  endpoint:
    path: /payments/rtp-fednow/failed-rejected-with-reason
    method: POST
    data_selector: transaction
    params: {}
- name: RtpFedNowFailedTransactionNotAllowed
  endpoint:
    path: /payments/rtp-fednow/failed-transaction-not-allowed
    method: POST
    data_selector: transaction
    params: {}
- name: RtpFedNowFailedGeneralError
  endpoint:
    path: /payments/rtp-fednow/failed-general-error
    method: POST
    data_selector: transaction
    params: {}
- name: RtpFedNowFailedHighRiskOrPotentialFraud
  endpoint:
    path: /payments/rtp-fednow/failed-high-risk-or-potential-fraud
    method: POST
    data_selector: transaction
    params: {}
- name: RtpFedNowFailedInvalidValueForField
  endpoint:
    path: /payments/rtp-fednow/failed-invalid-value-for-field
    method: POST
    data_selector: transaction
    params: {}
- name: RtpFedNowFailedDuplicateTransaction
  endpoint:
    path: /payments/rtp-fednow/failed-duplicate-transaction
    method: POST
    data_selector: transaction
    params: {}
- name: RtpFedNowBankAccountVerificationFailed
  endpoint:
    path: /payments/rtp-fednow/bank-account-verification-failed
    method: POST
    data_selector: transaction
    params: {}
- name: Send & Request
  endpoint:
    path: /payments/interac-e-transfer/send-and-request
    method: GET
- name: Review Transactions
  endpoint:
    path: /payments/interac-e-transfer/review-transactions
    method: GET
- name: transaction
  endpoint:
    path: /api/transaction/{transaction_id}
    method: DELETE
    data_selector: result
- name: get_interac_send_funds_options
  endpoint:
    path: /api/user/GetInteracSendFundsOptions/{user_id}
    method: GET
    data_selector: result
- name: register_interac_auto_deposit
  endpoint:
    path: /api/user/RegisterInteracAutoDeposit/{user_id}
    method: PATCH
    data_selector: result
- name: cancel_interac_auto_deposit
  endpoint:
    path: /api/user/RegisterInteracAutoDepositCancellation/{user_id}
    method: PATCH
    data_selector: result
- name: get_interac_auto_deposit_information
  endpoint:
    path: /api/user/GetInteracAutoDepositInformation/{user_id}
    method: GET
    data_selector: result
- name: interac_review_transactions
  endpoint:
    path: /api-reference/operations/review-transactions
    method: GET
- name: transaction
  endpoint:
    path: /api/transaction
    method: POST
    data_selector: transaction
    params: {}
- name: debit_card
  endpoint:
    path: /payments/card-payments/push-to-debit
    method: POST
    data_selector: transaction
    params: {}
- name: cards
  endpoint:
    path: /api/cards
    method: POST
    data_selector: card
    params: {}
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: authorize
  endpoint:
    path: /api/authorize
    method: GET
- name: create_token
  endpoint:
    path: /api/connect/createtoken
    method: POST
- name: add_payment_profile
  endpoint:
    path: /connect-adduser
    method: POST
    data_selector: response
    params: {}
- name: update_payment_profile
  endpoint:
    path: /connect-updateuser
    method: POST
    data_selector: response
    params: {}
- name: invoice_checkout
  endpoint:
    path: /connect-invoicecheckout
    method: POST
    data_selector: response
    params: {}
- name: products
  endpoint:
    path: /api-reference/products
    method: GET
- name: prices
  endpoint:
    path: /api-reference/product-prices
    method: GET
- name: invoices
  endpoint:
    path: /api-reference/invoices
    method: GET
- name: subscriptions
  endpoint:
    path: /api-reference/subscriptions
    method: GET
- name: invoices
  endpoint:
    path: /api/invoices
    method: GET
    data_selector: invoices
    params: {}
- name: account_verification
  endpoint:
    path: /api/v1/account_verification
    method: GET
    data_selector: data
    params: {}
- name: owner_identification
  endpoint:
    path: /api/v1/owner_identification
    method: GET
    data_selector: data
    params: {}
- name: balance_checks
  endpoint:
    path: /api/v1/balance_checks
    method: GET
    data_selector: data
    params: {}
- name: transaction_data
  endpoint:
    path: /api/v1/transaction_data
    method: GET
    data_selector: data
    params: {}
- name: financial_insights
  endpoint:
    path: /api/v1/financial_insights
    method: GET
    data_selector: data
    params: {}
- name: institutions
  endpoint:
    path: /api/institution/GetInstitutions
    method: GET
    data_selector: result
    params: {}
- name: account_information
  endpoint:
    path: /api/v1/account
    method: GET
    data_selector: result.Accounts
    params: {}
- name: transaction_history
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: result.Transactions
    params: {}
- name: employment_income
  endpoint:
    path: /result/Income/GroupCategory/employmentincome
    method: GET
    data_selector: bonus, employmentpaycheck
- name: other_income
  endpoint:
    path: /result/Income/GroupCategory/otherincome
    method: GET
    data_selector: creditreversals, gamblingincome, loandeposits, offers&rewards,
      otherincomes, savingsandinvestimentsinterestincome, taxrebate, taxrefund
- name: government_income
  endpoint:
    path: /result/Income/GroupCategory/governmentincome
    method: GET
    data_selector: childsupportincome, employmentinsuranceincome, othergovernmentincome,
      pensionincome, reimbursement, socialassistenceincome, wsibincome
- name: transfer
  endpoint:
    path: /result/Income/GroupCategory/transfer
    method: GET
    data_selector: credittransfer
- name: uncategorized_income
  endpoint:
    path: /result/Income/GroupCategory/uncategorized
    method: GET
    data_selector: uncategorizedincome
- name: bills_utilities
  endpoint:
    path: /result/Expenses.GroupCategory.bills&utilities
    method: GET
    data_selector: total
- name: fees_charges
  endpoint:
    path: /result/Expenses.GroupCategory.fees&charges
    method: GET
    data_selector: total
- name: entertainment
  endpoint:
    path: /result/Expenses.GroupCategory.entertainment
    method: GET
    data_selector: total
- name: financial
  endpoint:
    path: /result/Expenses.GroupCategory.financial
    method: GET
    data_selector: total
- name: food_drinking
  endpoint:
    path: /result/Expenses.GroupCategory.food&dining
    method: GET
    data_selector: total
- name: gifts_donations
  endpoint:
    path: /result/Expenses.GroupCategory.gifts&donations
    method: GET
    data_selector: total
- name: health_fitness
  endpoint:
    path: /result/Expenses.GroupCategory.health&fitness
    method: GET
    data_selector: total
- name: home
  endpoint:
    path: /result/Expenses.GroupCategory.home
    method: GET
    data_selector: total
- name: loans
  endpoint:
    path: /result/Expenses.GroupCategory.loans
    method: GET
    data_selector: total
- name: investments
  endpoint:
    path: /result/Expenses.GroupCategory.investments
    method: GET
    data_selector: total
- name: other_expense
  endpoint:
    path: /result/Expenses.GroupCategory.otherexpense
    method: GET
    data_selector: total
- name: pets
  endpoint:
    path: /result/Expenses.GroupCategory.pets
    method: GET
    data_selector: total
- name: shopping
  endpoint:
    path: /result/Expenses.GroupCategory.shopping
    method: GET
    data_selector: total
- name: taxes
  endpoint:
    path: /result/Expenses.GroupCategory.taxes
    method: GET
    data_selector: total
- name: travel
  endpoint:
    path: /result/Expenses.GroupCategory.travel
    method: GET
    data_selector: total
- name: transfer
  endpoint:
    path: /result/Expenses.GroupCategory.transfer
    method: GET
    data_selector: total
- name: uncategorized
  endpoint:
    path: /result.expense.uncategorized
    method: GET
    data_selector: total
- name: user
  endpoint:
    path: /user
    method: POST
- name: AddUser
  endpoint:
    path: /user
    method: POST
- name: UpdateBasicInformation
  endpoint:
    path: /user/UpdateBasicInformation/{user_id}
    method: PATCH
- name: AddPaymentInstrumentInformation
  endpoint:
    path: /user/AddPaymentInstrumentInformation/{user_id}
    method: POST
- name: UpdatePaymentInstrumentInformation
  endpoint:
    path: /user/UpdatePaymentInstrumentInformation/{user_id}/{payment_instrument_id}
    method: PATCH
- name: user
  endpoint:
    path: /user/{user_id}
    method: GET
    data_selector: result
    params: {}
- name: delete_user
  endpoint:
    path: /user/{user_id}
    method: DELETE
    data_selector: result
    params: {}
- name: user_search
  endpoint:
    path: /user/filter
    method: POST
    data_selector: result.Items
    params:
      PageNumber: 1
- name: user_eligibility
  endpoint:
    path: /user/checkuseligibility
    method: POST
    data_selector: result.Routing_numbers
    params: {}
- name: activate_card
  endpoint:
    path: /card/activate-card/{{userId}}
    method: PATCH
- name: change_card_program
  endpoint:
    path: /card/change-card-program
    method: PATCH
- name: get_balance_inquiry
  endpoint:
    path: /card/balance-inquiry/{{userId}}
    method: GET
- name: get_card_accounts
  endpoint:
    path: /card/get-card-accounts/{{userId}}
    method: GET
- name: get_card_status
  endpoint:
    path: /card/get-card-status/{{userId}}
    method: GET
- name: set_card_status
  endpoint:
    path: /card/set-card-status
    method: POST
- name: reissue_card
  endpoint:
    path: /card/reissue-card
    method: POST
- name: get_card_transactions
  endpoint:
    path: /card/get-card-transactions
    method: POST
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: transaction
  endpoint:
    path: /transaction
    method: POST
- name: transaction
  endpoint:
    path: /transaction/{transaction_id}
    method: GET
    data_selector: result
- name: transaction_status
  endpoint:
    path: /transactions/status
    method: GET
    data_selector: statuses
    params: {}
- name: transaction_events
  endpoint:
    path: /transactions/events
    method: GET
    data_selector: events
    params: {}
- name: transaction_filter
  endpoint:
    path: /transaction/filter
    method: POST
    data_selector: result.Items
    params:
      CurrentPage: 1
      PageSize: 1
- name: transaction_validation
  endpoint:
    path: /transaction/ValidateBatchFile
    method: POST
- name: transaction_batch
  endpoint:
    path: /transaction/ProcessBatchFile
    method: POST
- name: cancel_transaction
  endpoint:
    path: /transaction/{transaction_id}
    method: DELETE
- name: upload_batch_file_us
  endpoint:
    path: /transaction/UploadBatchFileUs
    method: POST
    data_selector: result
    params:
      FileName: zumrails_Ach_batch_transaction_template.csv
      SkipFileAlreadyProcessedInLast24Hours: true
      WithdrawSumTotalFromFundingSource: false
      Bytes: Zmlyc3RfbmFtZV9yZXF1aXJlZDtsYXN0X25hbWVfcmVxdWlyZWQ7Y29tcGFueV9uYW1lO2VtYWlsO3Bob25lX251bWJlcjtpZF90eXBlO2lkX251bWJlcjtidXNpbmVzc190YXhfaWQ7YW1vdW50X3JlcXVpcmVkO2FkZHJlc3NMaW5lMV9yZXF1aXJlZDthZGRyZXNzTGluZTI7Y2l0eV9yZXF1aXJlZDtzdGF0ZV9yZXF1aXJlZDt6aXBfcmVxdWlyZWQ7YWNjb3VudF90eXBlX3JlcXVpcmVkO3JvdXRpbmdfbnVtYmVyX3JlcXVpcmVkO2FjY291bnRfbnVtYmVyX3JlcXVpcmVkO21lbW87Y29tbWVudDtzY2hlZHVsZWRfZGF0ZTtjbGllbnRfdXNlcl9pZA0KSm9objtEb2U7Ozs7U1NOOzEyMzQ1Njc4OTs7MTUwO01haW4gU3RyZWV0IDEyMztTdWl0ZSAzMDE7QW55dG93bjtUWDsxMjM0NTY3ODk7Q2hlY2tpbmc7MTIyMDAwNDk2OzEyMzQ1Njc4OTtNZW1vIG1lc3NhZ2U7SW50ZXJuYWwgTWVzc2FnZTsyMDI1LTA1LTA2Ow0KSm9objtEb2U7O2pvaG4uZG9lQGVtYWlsLmNvbTs1NTU1NTU1NTU1O1NTTjsxMjM0NTY3ODk7OzE2MDtNYWluIFN0cmVldCAxMjM7U3VpdGUgMzAxO0FueXRvd247VFg7MTIzNDU2Nzg5O1NhdmluZ3M7MTIyMDAwNDk2OzEyMzQ1Njc4OTtNZW1vIG1lc3NhZ2U7SW50ZXJuYWwgTWVzc2FnZTsyMDI1LTA1LTA2Ow0K
- name: search_transactions_batches_us
  endpoint:
    path: /batch/filter
    method: POST
    data_selector: result
    params:
      ItemsPerPage: 10
      PageNumber: 1
- name: get_batch_file_transactions_us
  endpoint:
    path: /batch/get-batch-transactions{batchId}
    method: POST
    data_selector: result
    params:
      ItemsPerPage: 10
      PageNumber: 1
- name: refund_transaction
  endpoint:
    path: /transaction/{transaction_id}/Refund
    method: POST
    data_selector: result
    params:
      Amount: 9.99
- name: Search Funding Sources
  endpoint:
    path: /fundingsource/filter
    method: POST
    data_selector: result.Items
    params:
      ItemsPerPage: 10
      PageNumber: 1
- name: Get a Specific Funding Source
  endpoint:
    path: /fundingsource/{fundingSourceId}
    method: POST
- name: product
  endpoint:
    path: /product
    method: POST
    data_selector: result
- name: upload_product_image
  endpoint:
    path: /product/{{productId}}/uploadproductimage
    method: PATCH
    data_selector: result
- name: update_product
  endpoint:
    path: /product/{{product_id}}
    method: PUT
    data_selector: result
- name: get_specific_product
  endpoint:
    path: /product/{product_id}
    method: GET
    data_selector: result
- name: product_filter
  endpoint:
    path: /product/filter
    method: POST
    data_selector: result.Items
    params:
      PageNumber: CurrentPage
      ItemsPerPage: PageSize
- name: archive_product
  endpoint:
    path: /product/{{product_id}}/archive
    method: PATCH
- name: unarchive_product
  endpoint:
    path: /product/{{product_id}}/unarchive
    method: PATCH
- name: delete_product
  endpoint:
    path: /product/{{product_id}}
    method: DELETE
- name: get_product_price
  endpoint:
    path: /api/productprice/{product_price_id}
    method: GET
    data_selector: result
- name: delete_product_price
  endpoint:
    path: /api/productprice/{product_price_id}
    method: DELETE
    data_selector: ''
- name: archive_product_price
  endpoint:
    path: /api/productprice/{product_price_id}/archive
    method: PATCH
    data_selector: result
- name: unarchive_product_price
  endpoint:
    path: /api/productprice/{product_price_id}/unarchive
    method: PATCH
    data_selector: result
- name: invoices
  endpoint:
    path: /api-reference/invoices
    method: GET
- name: subscriptions
  endpoint:
    path: /api-reference/subscriptions
    method: GET
- name: create_invoice
  endpoint:
    path: /api/invoice
    method: POST
    data_selector: result
    params: {}
- name: update_invoice
  endpoint:
    path: /api/invoice/{{invoice_id}}
    method: PUT
    data_selector: result
    params: {}
- name: invoice
  endpoint:
    path: /api/invoice/{{invoice_id}}
    method: GET
    data_selector: result
- name: invoice_filter
  endpoint:
    path: /api/invoice/filter
    method: POST
    data_selector: result.Items
- name: invoice_events
  endpoint:
    path: /api/invoice/getinvoiceevents/{{invoice_id}}
    method: GET
    data_selector: result
- name: change_invoice_status
  endpoint:
    path: /api/invoice/changeinvoicestatus/{{invoice_id}}
    method: PATCH
    data_selector: result
- name: subscription
  endpoint:
    path: /subscription
    method: POST
    data_selector: result
    params: {}
- name: update_subscription
  endpoint:
    path: /subscription/{{subscription_id}}
    method: PUT
    data_selector: result
    params: {}
- name: get_subscription
  endpoint:
    path: /subscription/{subscription_id}
    method: GET
    data_selector: result
    params: {}
- name: search_subscription
  endpoint:
    path: /subscription/filter
    method: POST
    data_selector: result.Items
    params:
      PageNumber: 1
      ItemsPerPage: 10
- name: cancel_subscription
  endpoint:
    path: /subscription/cancel/{{subscription_id}}
    method: PUT
    data_selector: result
    params: {}
- name: pause_subscription
  endpoint:
    path: /subscription/pause/{{subscription_id}}
    method: PUT
    data_selector: result
    params: {}
- name: resume_subscription
  endpoint:
    path: /subscription/resume/{{subscription_id}}
    method: PUT
    data_selector: result
    params: {}
- name: get_subscription_events
  endpoint:
    path: /subscription/getsubscriptionevents/{{subscription_id}}
    method: GET
    data_selector: result
    params: {}
- name: get_subscription_invoices
  endpoint:
    path: /subscription/getsubscriptioninvoices/{{subscription_id}}
    method: GET
    data_selector: result
    params: {}
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: GetInformationByRequestId
  endpoint:
    path: /GetInformationByRequestId/<request-id>
    method: GET
    data_selector: result
- name: list_insights_profile
  endpoint:
    path: /insights/Profile/filter
    method: POST
- name: view_user_profile
  endpoint:
    path: /insights/GetInsightsProfile
    method: POST
- name: get_insights
  endpoint:
    path: /insights/GetInsights
    method: POST
- name: get_wallet_details
  endpoint:
    path: /wallet
    method: GET
    data_selector: result
- name: filter_wallet_transactions
  endpoint:
    path: /wallet/transactions/filter
    method: POST
    data_selector: result
- name: transaction_limits
  endpoint:
    path: /api/customer/transactionlimits/{customerId}
    method: GET
    data_selector: result
    params: {}
- name: accept_chargeback
  endpoint:
    path: /api/TransactionChargeback/{{TransactionChargebackId}}/accept
    method: PATCH
    data_selector: result
- name: dispute_chargeback
  endpoint:
    path: /api/TransactionChargeback/{{TransactionChargebackId}}/dispute
    method: PATCH
    data_selector: result
- name: interac_fraud_action
  endpoint:
    path: /api/transaction/takeaction/{transaction_id}
    method: PUT
    data_selector: TransactionInReviewActionChosen
- name: daily_auto_withdrawal_summary
  endpoint:
    path: /wallet/transactions/summary
    method: POST
    data_selector: result
- name: country_codes
  endpoint:
    path: /api-reference/country-and-region-codes
    method: GET
    data_selector: countries
    params: {}
- name: administrative_regions
  endpoint:
    path: /api-reference/country-and-region-codes/administrative-regions
    method: GET
    data_selector: regions
    params: {}
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
notes:
- When limits are exceeded, the IP will be blocked for 5 minutes
- Bearer Token is valid for up to an hour.
- EFT payment method is an electronic funds transfer between banks in Canada that
  takes up to 3 days to complete.
- Transactions can take between 24-48 hours for transactions to complete.
- Zūm Rails offers support for Standard ACH and Same-day ACH.
- Zūm Rails combines RTP and FedNow into one seamless payment method, enabling customers
  to instantly transfer funds.
- Interac transactions may occasionally be placed under-review to pass fraud checks.
- To simulate an Credit Card transaction failure, include an event name from the list
  above in the COMMENT field when creating a transaction.
- 3D Secure adds an extra layer of authentication to card-not-present transactions.
- A chargeback cannot be disputed if it is already accepted or disputed or is past
  due date.
- Available only to US customers
- Push-to-debit transaction are instantaneous
- All API requests use the Bearer Token Authorization.
- Token is valid for 15 minutes and will expire after use.
- User personal details such as first name, last name, email, and phone number are
  pre-filled and not editable during this flow.
- By default, the HostedCheckout response includes the URL to the HostedCheckout endpoint.
  If you only need the token in the response, you can use the ReturnTokenWithoutUrl
  field.
- At least one price is necessary to create a product.
- At this point, we do not have prorate billing for subscriptions.
- Connector UI is the recommended way of integrating with Zum Rails Aggregation for
  most of our clients.
- Uses OAuth2 with refresh token — requires setup of connected app in Zum Rails
- The API provides a comprehensive list of institutions available for connection.
- Some API responses may contain null values for optional fields
- Uses OAuth2.
- If you are using the Connector without a javascript library, you must specify the
  parameter `testinstitution=true` in the url.
- If you are using the javascript library, you must pass the property `testinstitution:true`
  in the config parameter.
- 'Logos must be in JPG, JPEG or PNG format, less than 2Mb in size. Recommended dimensions
  are: 90px by 90px.'
- 'Default color is #28c76f.'
- 'Default background color is #f2f3f4.'
- 'Default foreground color is #ffffff.'
- For Credit Card and Visa Direct, if you want to add a user through API, please contact
  Zūm support to enable this feature.
- This endpoint is only available to US customers.
- This endpoint returns limited user details. To retrieve full information for a specific
  user, use the Get a specific user endpoint.
- Ensure API version compatibility when making requests
- Transaction statuses include InProgress, Completed, Failed, Cancelled, Scheduled,
  InReview, Pending Cancellation.
- Transaction events vary based on methods such as Eft, VisaDirect, Interac, CreditCard,
  ACH, SameDayACH, RtpFedNow, DebitCard, MoneyTransfer.
- For EFT, transactions can only be deleted and cancelled if it's not been transmitted
  to the financial institution.
- For Interac, cancellation requests may take time to process.
- To simulate a Partial refund transaction in Sandbox, use the word PartialRefundTest
  in the field COMMENT while creating a Credit Card transaction.
- The API supports filtering by funding source status and billing account.
- Requires setup of connected app in Zum Rails.
- You can only update invoices that have Draft status
- Differently from invoices, subscriptions only accept one product, which can only
  be of the recurrent type.
- Uses OAuth2 with refresh token — requires setup of connected app in Zum Rails.
- Uses GET method to retrieve user financial data.
- Each customer can have only one wallet.
- A chargeback cannot be accepted or disputed if it is already accepted or disputed
  or is past due date.
- This API call works from the second daily withdrawal onward.
- This endpoint does not work for daily withdrawals that are grouped by batch.
- In the event of a failure to deliver the webhook (!= 200) we will try again 3 times
  every 5 minutes in sandbox. In production we will retry 5 times every 60 minutes.
- All POST requests accept idempotence keys.
- Idempotence keys are persisted for 1 hour.
- Uses RSA 2048-bit with OAEP padding and SHA-256 for encryption
- Integration verification involves a 30-minute call.
- Clients will be able to access the portal, use our APIs and SDK for testing purposes
  while using the sandbox environment.
- Ensure the API key has the necessary permissions.
- All datetime fields are stored and returned in UTC format.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'EftFailedNoDebitAllowed: Account do not allow EFT'
- 'EftFailedTransactionNotAllowed: When the bank account is banned'
- 'AchFailedRejectedWithReason: When transaction is rejected for a reason'
- 'AchFailedGeneralError: When transaction has failed due to general error'
- 'AchFailedDueToNegativeData: When transaction failed due to negative user data'
- Transaction failed due to a closed account or any other reason
- Transaction rejected for a reason
- Transaction is not allowed by the provider
- Transaction failed due to a generic error
- Transaction rejected as high-risk or potential fraud
- Transaction failed due to invalid value for field
- Transaction failed due to duplicated transaction
- Transaction fails because bank account is unverified
- 'InteracFailedRecipientContactInfoMissing: Need to add recipient email or mobile
  phone number'
- 'InteracFailedInvalidEmailFormat: If the email provided is not valid'
- 'InteracFailedInvalidPhoneNumber: If the phone number provided is not valid'
- 'CreditCardInvalidRequest: When transaction has failed due to invalid request'
- 'CreditCardRejectedByIssuingBank: When transaction is rejected by issuing bank'
- 'CreditCardExpiredCard: When transaction has failed due to expired card'
- 'CreditCardSuspectedFraud: When transaction has failed due to suspected fraud'
- 'CreditCardTransactionNotPermitted: When transaction is not permitted'
- 'CreditCardContactSupport: When transaction has failed. Contact support'
- 'CreditCardInvalidMerchantSetUp: When transaction has failed due to invalid merchant
  setup'
- 'CreditCardSecurityViolation: When transaction has failed due to security violation'
- 'CreditCardInvalidCardOrDetails: When transaction has failed due to invalid card
  or card details'
- 'CreditCardLostOrStolenCard: When transaction has failed due to lost ot stolen card'
- 'CreditCardAccountClosedOrBlocked: When transaction has failed due to account closed
  or blocked'
- 'CreditCardDeemedHighRisk: When transaction has failed due to deemed high risk'
- 'CreditCardUnknownResponseFromIssuingBank: When transaction has failed due to unknown
  response from issuing bank'
- 'CreditCardCouldNotLocateOriginalTransaction: When reversal transaction has failed
  due to could not locate original transaction'
- 'CreditCardTransactionAlreadyReversed: When reversal transaction has failed due
  to already reversed'
- 'CreditCardGenericError: When transaction has failed due to generic error'
- 'CreditCardServiceUnavailable: When transaction has failed due to service unavailable'
- 'CreditCardRetryLater: When transaction has failed. Retry later'
- 'CreditCardReversalRejected: When reversal transaction is rejected'
- 'CreditCardDuplicateReversal: When reversal transaction has failed due to duplicated'
- 'CreditCardTransactionAlreadySettled: When reversal transaction has failed due to
  already settled'
- 'CreditCardTimeoutReversal: When reversal transaction has failed due to timeout'
- 'CreditCardDuplicateTransaction: When transaction has failed due to duplicated'
- 'CreditCardNotActivated: When transaction has failed because of inactive card.'
- 'Error: Card not enrolled'
- R - Issuer rejected authentication and requests authorization not to be attempted
- CreditCardInvalidRequest
- CreditCardRejectedByIssuingBank
- CreditCardExpiredCard
- CreditCardSuspectedFraud
- CreditCardTransactionNotPermitted
- CreditCardContactSupport
- CreditCardInvalidMerchantSetUp
- CreditCardSecurityViolation
- CreditCardInvalidCardOrDetails
- CreditCardLostOrStolenCard
- CreditCardAccountClosedOrBlocked
- CreditCardDeemedHighRisk
- CreditCardUnknownResponseFromIssuingBank
- CreditCardCouldNotLocateOriginalTransaction
- CreditCardTransactionAlreadyReversed
- CreditCardGenericError
- CreditCardServiceUnavailable
- CreditCardRetryLater
- CreditCardReversalRejected
- CreditCardDuplicateReversal
- CreditCardTransactionAlreadySettled
- CreditCardTimeoutReversal
- CreditCardDuplicateTransaction
- CreditCardNotActivated
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'QUERY_TIMEOUT: Break down queries or add selectivity'
- 'GENERICERROR: When an unexpected error occurs'
- '400 Bad Request: Invalid input parameters'
- '404 Not Found: User not found'
- '500 Internal Server Error: Try again later'
- 'INVALID_REQUEST: Check request parameters'
- 'UNAUTHORIZED: Verify access token validity'
- 'RATE_LIMIT_EXCEEDED: Reduce request frequency'
- 'CreditCardInvalidRequest: When transaction has failed due to invalid request.'
- 'MoneyTransferInvalidRequest: When transaction has failed due to invalid request.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'statusCode: 200, message: ''POST Request successful.'''
- 'statusCode: 400, message: ''Bad Request.'''
- '401 Unauthorized: Check OAuth token or scopes.'
- '404 Not Found: Verify endpoint URL.'
- '429 Too Many Requests: Slow down API requests.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Validate authentication tokens.'
- '404 Not Found: Ensure the request ID is correct.'
- '400 Bad Request: Check the TransactionChargebackId or transaction_id format.'
- '404 Not Found: Ensure the TransactionChargebackId or transaction_id exists.'
- 'statusCode 400: Check input parameters'
- 'statusCode 401: Unauthorized access'
- '400: Bad Request -- Your request is invalid.'
- '401: Unauthorized -- Your API key is wrong.'
- '403: Forbidden -- The endpoint requested is hidden for administrators only.'
- '404: Not Found -- The specified endpoint or entity could not be found.'
- '429: Too Many Requests -- You reached your quota'
- '500: Internal Server Error -- We had a problem with our server. Try again later.'
- '401 Unauthorized: Verify the API key and authentication method.'
- 'REQUEST_LIMIT_EXCEEDED: When limits are exceeded, the IP will be blocked for 5
  minutes'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - AuthCode
  - OAuth2Token
client:
  base_url: '{{env}}/api'
  auth:
    type: oauth2
source_metadata: null
