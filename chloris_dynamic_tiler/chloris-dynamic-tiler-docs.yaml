resources:
- name: bounds
  endpoint:
    path: /tiles/cog/bounds
    method: GET
- name: info
  endpoint:
    path: /tiles/cog/info
    method: GET
- name: info_geojson
  endpoint:
    path: /tiles/cog/info.geojson
    method: GET
- name: statistics
  endpoint:
    path: /tiles/cog/statistics
    method: GET
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{tileMatrixSetId}/{z}/{x}/{y}@{scale}x.{format}
    method: GET
- name: tilejson
  endpoint:
    path: /tiles/cog/tilejson.json
    method: GET
- name: health_check
  endpoint:
    path: /healthz
    method: GET
- name: personal_information
  endpoint:
    path: /api/personal_information
    method: GET
    data_selector: records
    params: {}
- name: sensitive_information
  endpoint:
    path: /api/sensitive_information
    method: GET
    data_selector: records
    params: {}
- name: reporting_unit
  endpoint:
    path: /api/reportingUnit/
    method: POST
    data_selector: reportingUnits
- name: reporting_unit
  endpoint:
    path: /api/reportingUnit
    method: PUT
    data_selector: reportingUnit
    params: {}
- name: boundary
  endpoint:
    path: /api/boundary
    method: POST
    data_selector: boundaryResponse
    params: {}
- name: boundary
  endpoint:
    path: /api/boundary
    method: POST
    data_selector: boundaryResponse
    params: {}
- name: reporting_unit
  endpoint:
    path: /api/reportingUnit
    method: PUT
    data_selector: reportingUnit
    params: {}
- name: stats
  endpoint:
    path: /api/reportingUnit/
    method: GET
    data_selector: stats
- name: layers_config
  endpoint:
    path: /tiles/cog/layers.json
    method: GET
- name: reporting_unit_entry
  endpoint:
    path: /reporting_units/{reporting_unit_id}
    method: GET
    params:
      include_layers_config: 'true'
- name: info
  endpoint:
    path: /info
    method: GET
- name: organization
  endpoint:
    path: /organization
    method: POST
- name: organization_usage
  endpoint:
    path: /organization/usage
    method: POST
- name: reporting_unit
  endpoint:
    path: /reportingUnit
    method: PUT
- name: reporting_unit_entries
  endpoint:
    path: /reportingUnit
    method: POST
- name: reporting_unit_archive
  endpoint:
    path: /reportingUnit
    method: DELETE
- name: users
  endpoint:
    path: /user
    method: POST
- name: invite
  endpoint:
    path: /invite
    method: POST
- name: boundary_normalization
  endpoint:
    path: /boundary
    method: POST
- name: boundary_result
  endpoint:
    path: /boundary
    method: GET
- name: collection
  endpoint:
    path: /collection
    method: PUT
- name: info
  endpoint:
    path: /info
    method: GET
- name: organization
  endpoint:
    path: /organization
    method: POST
- name: organization_usage
  endpoint:
    path: /organization/usage
    method: POST
- name: reporting_unit
  endpoint:
    path: /reportingUnit
    method: PUT
- name: reporting_unit_entries
  endpoint:
    path: /reportingUnit
    method: POST
- name: delete_reporting_unit
  endpoint:
    path: /reportingUnit
    method: DELETE
- name: user
  endpoint:
    path: /user
    method: POST
- name: invite_user
  endpoint:
    path: /invite
    method: POST
- name: boundary_request
  endpoint:
    path: /boundary
    method: POST
- name: boundary_result
  endpoint:
    path: /boundary
    method: GET
- name: collection
  endpoint:
    path: /collection
    method: PUT
- name: reporting_unit
  endpoint:
    path: /api/reportingUnit/
    method: POST
    data_selector: reportingUnits
- name: boundary
  endpoint:
    path: /api/boundary
    method: POST
    data_selector: boundaryResponse
- name: reporting_unit
  endpoint:
    path: /reportingUnit/
    method: GET
    data_selector: stats
- name: reporting_unit
  endpoint:
    path: /api/reportingUnit/
    method: POST
    data_selector: reportingUnits
- name: boundary
  endpoint:
    path: /api/boundary
    method: POST
    data_selector: ''
- name: reporting_unit
  endpoint:
    path: /reportingUnit/
    method: GET
    data_selector: stats
- name: reporting_unit
  endpoint:
    path: /api/reportingUnit/
    method: POST
    data_selector: reportingUnits
- name: boundary
  endpoint:
    path: /api/boundary
    method: POST
    data_selector: boundaryResponse
- name: stats
  endpoint:
    path: /api/reportingUnit/
    method: GET
- name: reporting_unit
  endpoint:
    path: /reportingUnit/
    method: POST
    data_selector: reportingUnits
- name: stats
  endpoint:
    path: /api/reportingUnit/
    method: GET
    data_selector: stats
    params: {}
- name: downloads
  endpoint:
    path: /api/reportingUnit/
    method: GET
    data_selector: downloads
    params: {}
- name: reportingUnit
  endpoint:
    path: /reportingUnit/
    method: GET
    data_selector: data
    params: {}
- name: bounds
  endpoint:
    path: /tiles/cog/bounds
    method: GET
- name: info
  endpoint:
    path: /tiles/cog/info
    method: GET
- name: info_geojson
  endpoint:
    path: /tiles/cog/info.geojson
    method: GET
- name: statistics
  endpoint:
    path: /tiles/cog/statistics
    method: GET
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{tileMatrixSetId}/{z}/{x}/{y}
    method: GET
- name: tilejson
  endpoint:
    path: /tiles/cog/tilejson.json
    method: GET
- name: health_check
  endpoint:
    path: /healthz
    method: GET
- name: bounds
  endpoint:
    path: /tiles/cog/bounds
    method: GET
- name: info
  endpoint:
    path: /tiles/cog/info
    method: GET
- name: info_geojson
  endpoint:
    path: /tiles/cog/info.geojson
    method: GET
- name: statistics
  endpoint:
    path: /tiles/cog/statistics
    method: GET
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{tileMatrixSetId}/{z}/{x}/{y}@{scale}x.{format}
    method: GET
- name: tilejson
  endpoint:
    path: /tiles/cog/{tileMatrixSetId}/tilejson.json
    method: GET
- name: health_check
  endpoint:
    path: /healthz
    method: GET
- name: dynamic_webtiling
  endpoint:
    path: /dynamic/webtiling
    method: GET
- name: reporting_units
  endpoint:
    path: /reportingUnits
    method: GET
- name: bounds
  endpoint:
    path: /tiles/cog/bounds
    method: GET
    data_selector: '200'
    params:
      url: ''
- name: info
  endpoint:
    path: /tiles/cog/info
    method: GET
    data_selector: '200'
    params:
      url: ''
- name: info_geojson
  endpoint:
    path: /tiles/cog/info.geojson
    method: GET
    data_selector: '200'
    params:
      url: ''
- name: statistics
  endpoint:
    path: /tiles/cog/statistics
    method: GET
    data_selector: '200'
    params:
      url: ''
- name: geojson_statistics
  endpoint:
    path: /tiles/cog/statistics
    method: POST
    data_selector: '200'
    params:
      url: ''
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{tileMatrixSetId}/{z}/{x}/{y}@{scale}x.{format}
    method: GET
    params:
      tileMatrixSetId:
        enum:
        - CDB1GlobalGrid
        - CanadianNAD83_LCC
        - EuropeanETRS89_LAEAQuad
        - GNOSISGlobalGrid
        - LINZAntarticaMapTilegrid
        - NZTM2000Quad
        - UPSAntarcticWGS84Quad
        - UPSArcticWGS84Quad
        - UTM31WGS84Quad
        - WGS1984Quad
        - WebMercatorQuad
        - WorldCRS84Quad
        - WorldMercatorWGS84Quad
      z: required
      x: required
      y: required
      scale: required
      format: required
      url: required
- name: bounds
  endpoint:
    path: /tiles/cog/bounds
    method: GET
    data_selector: application/json
    params:
      url: query
- name: info
  endpoint:
    path: /tiles/cog/info
    method: GET
    data_selector: application/json
    params:
      url: query
- name: info_geojson
  endpoint:
    path: /tiles/cog/info.geojson
    method: GET
    data_selector: application/geo+json
    params:
      url: query
- name: statistics
  endpoint:
    path: /tiles/cog/statistics
    method: GET
    data_selector: application/json
    params:
      url: query
- name: geojson_statistics
  endpoint:
    path: /tiles/cog/statistics
    method: POST
    data_selector: application/json
    params:
      url: query
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{tileMatrixSetId}/{z}/{x}/{y}@{scale}x
    method: GET
    data_selector: image
    params:
      z: integer
      x: integer
      y: integer
      tileMatrixSetId: string
      scale: integer
      url: string
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{tileMatrixSetId}/{z}/{x}/{y}.{format}
    method: GET
    data_selector: image
    params: {}
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{tileMatrixSetId}/{z}/{x}/{y}@{scale}x.{format}
    method: GET
    params:
      tileMatrixSetId:
        enum:
        - CDB1GlobalGrid
        - CanadianNAD83_LCC
        - EuropeanETRS89_LAEAQuad
        - GNOSISGlobalGrid
        - LINZAntarticaMapTilegrid
        - NZTM2000Quad
        - UPSAntarcticWGS84Quad
        - UPSArcticWGS84Quad
        - UTM31WGS84Quad
        - WGS1984Quad
        - WebMercatorQuad
        - WorldCRS84Quad
        - WorldMercatorWGS84Quad
      scale:
        maximum: 4
        exclusiveMinimum: 0
      url:
        required: true
        schema:
          type: string
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{tileMatrixSetId}/{z}/{x}/{y}
    method: GET
    data_selector: image/png
    params: {}
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{tileMatrixSetId}/{z}/{x}/{y}@{scale}x
    method: GET
    data_selector: content
    params: {}
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{z}/{x}/{y}@{scale}x.{format}
    method: GET
    data_selector: image
    params:
      tileMatrixSetId: WebMercatorQuad
      url: ''
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{z}/{x}/{y}@{scale}x
    method: GET
    data_selector: responses.200.content
    params: {}
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{tileMatrixSetId}/{z}/{x}/{y}.{format}
    method: GET
    data_selector: content
    params: {}
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{z}/{x}/{y}.{format}
    method: GET
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{tileMatrixSetId}/{z}/{x}/{y}
    method: GET
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{z}/{x}/{y}
    method: GET
    data_selector: images
- name: tilejson
  endpoint:
    path: /tiles/cog/{tileMatrixSetId}/tilejson.json
    method: GET
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{z}/{x}/{y}@{scale}x.{format}
    method: GET
    data_selector: responses
    params: {}
- name: tilejson
  endpoint:
    path: /tiles/cog/tilejson.json
    method: GET
    data_selector: TileJSON
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{z}/{x}/{y}@{scale}x
    method: GET
    data_selector: tiles
    params:
      tileMatrixSetId: WebMercatorQuad
- name: wmts_tiles_cog
  endpoint:
    path: /tiles/cog/{tileMatrixSetId}/WMTSCapabilities.xml
    method: GET
    data_selector: tileJSON
    params: {}
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{z}/{x}/{y}.{format}
    method: GET
- name: wmts_tiles_cog_WMTSCapabilities_xml
  endpoint:
    path: /tiles/cog/WMTSCapabilities.xml
    method: GET
- name: tile
  endpoint:
    path: /tiles/cog/tiles/{z}/{x}/{y}
    method: GET
- name: tilejson
  endpoint:
    path: /tiles/cog/{tileMatrixSetId}/tilejson.json
    method: GET
    params: {}
- name: point
  endpoint:
    path: /tiles/cog/point/{lon},{lat}
    method: GET
    data_selector: Point value
    params: {}
- name: preview
  endpoint:
    path: /tiles/cog/preview.{format}
    method: GET
    data_selector: Create preview of a dataset.
    params: {}
- name: tilejson
  endpoint:
    path: /tiles/cog/tilejson.json
    method: GET
    data_selector: application/json
    params: {}
- name: preview_tiles_cog_preview
  endpoint:
    path: /tiles/cog/preview
    method: GET
- name: bbox_image
  endpoint:
    path: /tiles/cog/bbox/{minx},{miny},{maxx},{maxy}/{width}x{height}.{format}
    method: GET
    data_selector: responses.200.content
    params: {}
- name: bbox_image
  endpoint:
    path: /tiles/cog/bbox/{minx},{miny},{maxx},{maxy}.{format}
    method: GET
- name: WMTSCapabilities
  endpoint:
    path: /tiles/cog/{tileMatrixSetId}/WMTSCapabilities.xml
    method: GET
    data_selector: responses.200.content.application/json.schema
    params:
      tileMatrixSetId: required
      tile_format: optional
      tile_scale: optional
      minzoom: optional
      maxzoom: optional
      use_epsg: optional
      url: required
      bidx: optional
      expression: optional
      nodata: optional
      unscale: optional
      resampling: optional
      reproject: optional
      buffer: optional
      padding: optional
      algorithm: optional
      algorithm_params: optional
      rescale: optional
- name: feature_image
  endpoint:
    path: /feature/{width}x{height}.{format}
    method: POST
- name: Wmts
  endpoint:
    path: /tiles/cog/WMTSCapabilities.xml
    method: GET
    data_selector: content
    params: {}
- name: feature_image
  endpoint:
    path: /tiles/cog/feature.{format}
    method: POST
- name: point
  endpoint:
    path: /tiles/cog/point/{lon},{lat}
    method: GET
- name: preview
  endpoint:
    path: /tiles/cog/preview.{format}
    method: GET
- name: feature_image
  endpoint:
    path: /tiles/cog/feature
    method: POST
    data_selector: ''
    params:
      url: required
      format: optional
      coord_crs: optional
      dst_crs: optional
      bidx: optional
      expression: optional
      nodata: optional
      unscale: optional
      resampling: optional
      reproject: optional
      max_size: optional
      height: optional
      width: optional
      algorithm: optional
      algorithm_params: optional
      rescale: optional
- name: preview
  endpoint:
    path: /tiles/cog/preview
    method: GET
    data_selector: responses.200.content
    params: {}
- name: bbox_image
  endpoint:
    path: /tiles/cog/bbox/{minx},{miny},{maxx},{maxy}/{width}x{height}.{format}
    method: GET
- name: map_viewer_tiles_cog
  endpoint:
    path: /tiles/cog/{tileMatrixSetId}/map
    method: GET
    data_selector: content
    params:
      url: ''
      tileMatrixSetId: ''
      tile_format: null
      tile_scale: 1
      minzoom: null
      maxzoom: null
      bidx: null
      expression: null
      nodata: null
      unscale: false
      resampling: nearest
      reproject: nearest
      buffer: null
      padding: null
      algorithm: null
      algorithm_params: null
      rescale: null
- name: bbox_image_tiles_cog_bbox__minx___miny___maxx___maxy___format__get
  endpoint:
    path: /tiles/cog/bbox/{minx},{miny},{maxx},{maxy}.{format}
    method: GET
- name: feature_image
  endpoint:
    path: /tiles/cog/feature/{width}x{height}.{format}
    method: POST
    data_selector: image
    params: {}
- name: feature_image
  endpoint:
    path: /tiles/cog/feature.{format}
    method: POST
    data_selector: response
    params: {}
- name: feature_image
  endpoint:
    path: /tiles/cog/feature
    method: POST
    data_selector: responses.200.content
    params: {}
- name: map_viewer_tiles_cog_map
  endpoint:
    path: /tiles/cog/map
    method: GET
    data_selector: '200'
    params:
      url:
        required: true
        schema:
          type: string
      tileMatrixSetId:
        required: false
        schema:
          enum:
          - CDB1GlobalGrid
          - CanadianNAD83_LCC
          - EuropeanETRS89_LAEAQuad
          - GNOSISGlobalGrid
          - LINZAntarticaMapTilegrid
          - NZTM2000Quad
          - UPSAntarcticWGS84Quad
          - UPSArcticWGS84Quad
          - UTM31WGS84Quad
          - WGS1984Quad
          - WebMercatorQuad
          - WorldCRS84Quad
          - WorldMercatorWGS84Quad
          type: string
          default: WebMercatorQuad
      tile_scale:
        required: false
        schema:
          type: integer
          exclusiveMaximum: 4
          exclusiveMinimum: 0
          default: 1
      resampling:
        required: false
        schema:
          enum:
          - nearest
          - bilinear
          - cubic
          - cubic_spline
          - lanczos
          - average
          - mode
          - gauss
          - rms
          type: string
          default: nearest
      reproject:
        required: false
        schema:
          enum:
          - nearest
          - bilinear
          - cubic
          - cubic_spline
          - lanczos
          - average
          - mode
          - sum
          - rms
          type: string
          default: nearest
- name: map_viewer_tiles_cog
  endpoint:
    path: /tiles/cog/{tileMatrixSetId}/map
    method: GET
- name: map_viewer_tiles_cog_map
  endpoint:
    path: /tiles/cog/map
    method: GET
- name: color_formula
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
    params: {}
- name: colormap_name
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
    params: {}
- name: colormap
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
    params: {}
- name: return_mask
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
    params: {}
- name: color_formula
  endpoint:
    path: /color_formula
    method: GET
- name: colormap_name
  endpoint:
    path: /colormap_name
    method: GET
- name: colormap
  endpoint:
    path: /colormap
    method: GET
- name: return_mask
  endpoint:
    path: /return_mask
    method: GET
- name: tileMatrixSets
  endpoint:
    path: /tileMatrixSets
    method: GET
    data_selector: TileMatrixSetList
- name: tileMatrixSet
  endpoint:
    path: /tileMatrixSets/{tileMatrixSetId}
    method: GET
    data_selector: TileMatrixSet
- name: algorithms
  endpoint:
    path: /algorithms
    method: GET
    data_selector: AlgorithmMetadata
- name: algorithm
  endpoint:
    path: /algorithms/{algorithmId}
    method: GET
    data_selector: AlgorithmMetadata
- name: healthCheck
  endpoint:
    path: /healthz
    method: GET
    data_selector: Response Healthcheck
- name: TileMatrix
  endpoint:
    path: /tileMatrix
    method: GET
    data_selector: tileMatrices
    params: {}
- name: TileMatrixSet
  endpoint:
    path: /tileMatrixSet
    method: GET
    data_selector: tileMatrixSets
    params: {}
- name: tileMatrixSets
  endpoint:
    path: /tileMatrixSets
    method: GET
    data_selector: content
    params: {}
- name: tileMatrixSet
  endpoint:
    path: /tileMatrixSets/{tileMatrixSetId}
    method: GET
    data_selector: content
    params:
      tileMatrixSetId: required
- name: algorithms
  endpoint:
    path: /algorithms
    method: GET
    data_selector: content
    params: {}
- name: algorithm
  endpoint:
    path: /algorithms/{algorithmId}
    method: GET
    data_selector: content
    params:
      algorithmId: required
- name: healthCheck
  endpoint:
    path: /healthz
    method: GET
    data_selector: content
    params: {}
- name: TileMatrix
  endpoint:
    path: /tileMatrix
    method: GET
    data_selector: tileMatrices
    params: {}
- name: TileMatrixSetLink
  endpoint:
    path: /tileMatrixSetLink
    method: GET
    data_selector: links
    params: {}
- name: TileMatrixSetList
  endpoint:
    path: /tileMatrixSetList
    method: GET
    data_selector: tileMatrixSets
    params: {}
notes:
- We do not process sensitive personal information.
- California residents have specific rights regarding access to personal information.
- Chloris Geospatial Inc. has not disclosed or sold any personal information to third
  parties.
- The global 5 km data is freely available for all users.
- For premium users, you will receive an invitation email with specific instructions
  to access your organization’s high resolution biomass data.
- The API is only available for use with premium organizations.
- It is recommended to use the refresh_token to obtain a new id_token when the old
  one expires.
- Recommended file types for uploading boundaries include GeoJSON and Zipped Shapefile.
- EPSG 4326 (WGS84) is recommended as the coordinate reference system for boundaries.
- GeoJSON is recommended for uploading boundaries.
- We recommend using EPSG 4326 (WGS84) as the coordinate reference system (CRS) for
  your boundary.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- 'Control sites (or any site marked hidden: true) will not trigger a webhook, but
  will delay the primary site''s webhook notification until the control site is ready.'
- Because there are several scenarios where the webhook will be called multiple times,
  you should ensure that your webhook endpoint is idempotent.
- Dynamic webtiles are provided as XYZ tiles via REST API for sites processed or updated
  since 1.6.0
- The API is only available for use with premium organizations
- The API is only available for use with premium organizations, please contact us
  if you are interested in using the API.
- It is best practice to store your credentials securely and not expose them to the
  public.
- Use EPSG 4326 (WGS84) as the coordinate reference system for boundaries.
- Reporting units can be sites, collections, or tags.
- To filter for just active sites, additional filtering is required.
- Control sites will delay the primary site's webhook notification until the control
  site is ready.
- Webhook endpoint should be idempotent.
- Geospatial data is produced in both vector and raster formats.
- The normalized site boundary is returned after analysis.
- To filter for just active sites, control sites must be excluded.
- To filter for just active sites, remove aggregated entries from collections and
  tags.
- The `nextToken` field is used for pagination.
- Data products are available for download as GeoTiff files.
- Webhook will be called with a POST request with a specific JSON body.
- Ensure your webhook endpoint is idempotent.
- Dynamic webtiles are provided as XYZ tiles via REST API.
- Pre-computed webtile layers are deprecated.
- Improved documentation for integrating dynamic webtiles from the Chloris Platform
  into web maps, now with legends.
- '10 m resolution analysis can now be requested by passing `resolution: 10` when
  submitting sites.'
- Documentation for dynamic webtiling and layers config.
- The source of truth for where data is located for all new reporting units is reportingUnit.dataPath.
- The `/tiles/cog/tiles/{z}/{x}/{y}` endpoint is deprecated.
- This endpoint is deprecated.
- Deprecated endpoint
- Tile Matrix Set Definition follows the Tile Matrix Set standard.
- A description of a tile matrix set is required for offline use.
errors:
- '401 Unauthorized: Change your password to revoke compromised credentials.'
- 'Failed to submit boundary for normalization: {message}'
- 'Failed to submit reporting unit: {message}'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify the OAuth token.'
- '404 Not Found: The requested resource does not exist.'
- 'Failed to submit boundary for normalization: message'
- 'Failed to submit reporting unit: message'
- Failed to submit boundary for normalization
- Failed to submit control boundary for normalization
- Timeout waiting for boundary to be normalized
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '422: Validation Error'
auth_info:
  mentioned_objects:
  - OAuth 2.0
  - AWS Cognito
  - OauthToken
  - AuthProvider
  - NamedCredential
  - APIKeyQuery
client:
  base_url: https://app.chloris.earth/
  headers:
    Accept: application/json
source_metadata: null
