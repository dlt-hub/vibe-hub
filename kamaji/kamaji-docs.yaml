resources:
- name: kamaji_control_plane
  endpoint:
    path: /kamajicontrolplanes
    method: GET
- name: matchExpressions
  endpoint:
    path: /kamajiControlPlane/spec/deployment/affinity/podAffinity/preferredDuringSchedulingIgnoredDuringExecution/index/podAffinityTerm/labelSelector/matchExpressions/index
    method: GET
    data_selector: requirements
    params: {}
- name: matchLabels
  endpoint:
    path: /kamajiControlPlane/spec/deployment/affinity/podAffinity/preferredDuringSchedulingIgnoredDuringExecution/index/podAffinityTerm/labelSelector/matchLabels
    method: GET
    data_selector: pairs
    params: {}
- name: topologyKey
  endpoint:
    path: /kamajiControlPlane/spec/deployment/affinity/podAntiAffinity/preferredDuringSchedulingIgnoredDuringExecution/index/podAffinityTerm/topologyKey
    method: GET
    data_selector: key
    params: {}
- name: podAntiAffinity
  endpoint:
    path: /spec/deployment/affinity/podAntiAffinity/requiredDuringSchedulingIgnoredDuringExecution
    method: GET
    data_selector: items
- name: externalClusterReference
  endpoint:
    path: /spec/deployment/externalClusterReference
    method: GET
    data_selector: items
- name: extraContainers
  endpoint:
    path: /spec/deployment/extraContainers
    method: GET
    data_selector: items
- name: startupProbe
  endpoint:
    path: /startupProbe
    method: GET
- name: tcpSocket
  endpoint:
    path: /tcpSocket
    method: GET
- name: volumeDevice
  endpoint:
    path: /volumeDevice
    method: GET
- name: volumeMount
  endpoint:
    path: /volumeMount
    method: GET
- name: initContainers
  endpoint:
    path: /initContainers
    method: GET
- name: grpc
  endpoint:
    path: KamajiControlPlane.spec.deployment.extraInitContainers[index].readinessProbe.grpc
    method: GET
    data_selector: port
    params: {}
- name: httpGet
  endpoint:
    path: KamajiControlPlane.spec.deployment.extraInitContainers[index].readinessProbe.httpGet
    method: GET
    data_selector: port
    params: {}
- name: tcpSocket
  endpoint:
    path: KamajiControlPlane.spec.deployment.extraInitContainers[index].readinessProbe.tcpSocket
    method: GET
    data_selector: port
    params: {}
- name: containerResizePolicy
  endpoint:
    path: KamajiControlPlane.spec.deployment.extraInitContainers[index].resizePolicy[index]
    method: GET
    data_selector: resourceName
    params: {}
- name: computeResources
  endpoint:
    path: KamajiControlPlane.spec.deployment.extraInitContainers[index].resources
    method: GET
    data_selector: limits
    params: {}
- name: securityContext
  endpoint:
    path: KamajiControlPlane.spec.deployment.extraInitContainers[index].securityContext
    method: GET
    data_selector: allowPrivilegeEscalation
    params: {}
- name: startupProbe
  endpoint:
    path: KamajiControlPlane.spec.deployment.extraInitContainers[index].startupProbe
    method: GET
    data_selector: exec
    params: {}
- name: volumeDevices
  endpoint:
    path: KamajiControlPlane.spec.deployment.extraInitContainers[index].volumeDevices[index]
    method: GET
    data_selector: devicePath
    params: {}
- name: volumeMounts
  endpoint:
    path: KamajiControlPlane.spec.deployment.extraInitContainers[index].volumeMounts[index]
    method: GET
    data_selector: name
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/deployment/extraVolumes
    method: GET
- name: cinder
  endpoint:
    path: /services/data/v1.0/cinder
    method: GET
- name: configMap
  endpoint:
    path: /services/data/v1.0/configMap
    method: GET
- name: dataSourceRef
  endpoint:
    path: /dataSourceRef
    method: GET
- name: volumeClaimTemplate
  endpoint:
    path: /volumeClaimTemplate
    method: GET
- name: KamajiControlPlane
  endpoint:
    path: /v1alpha1
    method: GET
    data_selector: items
- name: KamajiControlPlaneTemplate
  endpoint:
    path: /kamaji/v1alpha1/kamajicontrolplanetemplates
    method: GET
    data_selector: items
    params: {}
- name: podAntiAffinity
  endpoint:
    path: /api/v1alpha1/podAntiAffinity
    method: GET
    data_selector: items
    params: {}
- name: extraContainers
  endpoint:
    path: /v1alpha1/KamajiControlPlaneTemplate/spec/template/spec/deployment/extraContainers
    method: GET
    data_selector: items
- name: readinessProbe
  endpoint:
    path: /kamaji/controlplane/templates/spec/templates/spec/deployment/extraContainers/index/readinessProbe
    method: GET
    data_selector: readinessProbe
    params: {}
- name: startupProbe
  endpoint:
    path: /kamaji/controlplane/templates/spec/templates/spec/deployment/extraContainers/index/startupProbe
    method: GET
    data_selector: startupProbe
    params: {}
- name: startupProbe.grpc
  endpoint:
    path: /KamajiControlPlaneTemplate/spec/template/spec/deployment/extraContainers/index/startupProbe/grpc
    method: GET
    data_selector: port
    params: {}
- name: startupProbe.httpGet
  endpoint:
    path: /KamajiControlPlaneTemplate/spec/template/spec/deployment/extraContainers/index/startupProbe/httpGet
    method: GET
    data_selector: port
    params: {}
- name: startupProbe.tcpSocket
  endpoint:
    path: /KamajiControlPlaneTemplate/spec/template/spec/deployment/extraContainers/index/startupProbe/tcpSocket
    method: GET
    data_selector: port
    params: {}
- name: volumeDevices
  endpoint:
    path: /KamajiControlPlaneTemplate/spec/template/spec/deployment/extraContainers/index/volumeDevices/index
    method: GET
    data_selector: devicePath
    params: {}
- name: volumeMounts
  endpoint:
    path: /KamajiControlPlaneTemplate/spec/template/spec/deployment/extraContainers/index/volumeMounts/index
    method: GET
    data_selector: mountPath
    params: {}
- name: extraInitContainers
  endpoint:
    path: /KamajiControlPlaneTemplate/spec/template/spec/deployment/extraInitContainers/index
    method: GET
    data_selector: name
    params: {}
- name: startupProbe.grpc
  endpoint:
    path: KamajiControlPlaneTemplate.spec.template.spec.deployment.extraInitContainers[index].startupProbe.grpc
    method: GET
    data_selector: port
    params: {}
- name: startupProbe.httpGet
  endpoint:
    path: KamajiControlPlaneTemplate.spec.template.spec.deployment.extraInitContainers[index].startupProbe.httpGet
    method: GET
    data_selector: port
    params: {}
- name: startupProbe.tcpSocket
  endpoint:
    path: KamajiControlPlaneTemplate.spec.template.spec.deployment.extraInitContainers[index].startupProbe.tcpSocket
    method: GET
    data_selector: port
    params: {}
- name: volumeDevice
  endpoint:
    path: KamajiControlPlaneTemplate.spec.template.spec.deployment.extraInitContainers[index].volumeDevices[index]
    method: GET
    data_selector: devicePath
    params: {}
- name: volumeMount
  endpoint:
    path: KamajiControlPlaneTemplate.spec.template.spec.deployment.extraInitContainers[index].volumeMounts[index]
    method: GET
    data_selector: mountPath
    params: {}
- name: volume
  endpoint:
    path: KamajiControlPlaneTemplate.spec.template.spec.deployment.extraVolumes[index]
    method: GET
    data_selector: name
    params: {}
- name: awsElasticBlockStore
  endpoint:
    path: KamajiControlPlaneTemplate.spec.template.spec.deployment.extraVolumes[index].awsElasticBlockStore
    method: GET
    data_selector: volumeID
    params: {}
- name: azureDisk
  endpoint:
    path: KamajiControlPlaneTemplate.spec.template.spec.deployment.extraVolumes[index].azureDisk
    method: GET
    data_selector: volumeID
    params: {}
- name: azureFile
  endpoint:
    path: /azureFile
    method: POST
    data_selector: azureFile
    params:
      secretName: required
      shareName: required
      readOnly: optional
- name: cephfs
  endpoint:
    path: /cephfs
    method: POST
    data_selector: cephfs
    params:
      monitors: required
      path: optional
      readOnly: optional
      secretFile: optional
      secretRef: optional
      user: optional
- name: cinder
  endpoint:
    path: /cinder
    method: POST
    data_selector: cinder
    params:
      volumeID: required
      fsType: optional
      readOnly: optional
      secretRef: optional
- name: dataSource
  endpoint:
    path: /kamajicontrolplanetemplatespectemplatespecdeploymentextravolumesindexephemeralvolumeclaimtemplatespecdatasource
    method: GET
- name: dataSourceRef
  endpoint:
    path: /kamajicontrolplanetemplatespectemplatespecdeploymentextravolumesindexephemeralvolumeclaimtemplatespecdatasourceref
    method: GET
- name: resources
  endpoint:
    path: /kamajicontrolplanetemplatespectemplatespecdeploymentextravolumesindexephemeralvolumeclaimtemplatespecresources
    method: GET
- name: selector
  endpoint:
    path: /kamajicontrolplanetemplatespectemplatespecdeploymentextravolumesindexephemeralvolumeclaimtemplatespecselector
    method: GET
- name: iscsi
  endpoint:
    path: /iscsi
    method: GET
    data_selector: data
    params:
      iqn: string
      lun: integer
      targetPortal: string
- name: quobyte
  endpoint:
    path: quobyte
    method: POST
    data_selector: volume
    params:
      registry: host:port
      volume: volume_name
- name: rbd
  endpoint:
    path: rbd
    method: POST
    data_selector: image
    params:
      monitors:
      - monitor1
      - monitor2
      fsType: ext4
      keyring: /etc/ceph/keyring
      pool: rbd
      readOnly: false
      user: admin
- name: scaleIO
  endpoint:
    path: scaleIO
    method: POST
    data_selector: gateway
    params:
      system: storage_system
      fsType: xfs
      protectionDomain: domain_name
      readOnly: false
      sslEnabled: false
      storageMode: ThinProvisioned
      storagePool: pool_name
      volumeName: volume_name
- name: vsphereVolume
  endpoint:
    path: vsphereVolume
    method: POST
    data_selector: volumePath
    params:
      volumePath: path_to_volume
      fsType: ext4
      storagePolicyID: policy_id
      storagePolicyName: policy_name
- name: topologySpreadConstraints
  endpoint:
    path: /v1alpha1/topologySpreadConstraints
    method: GET
    data_selector: items
    params: {}
- name: DataStore
  endpoint:
    path: /datastore
    method: GET
    data_selector: records
    params: {}
- name: TenantControlPlane
  endpoint:
    path: /tenantcontrolplane
    method: GET
    data_selector: records
    params: {}
- name: TenantControlPlane
  endpoint:
    path: /tenantcontrolplanes
    method: GET
    data_selector: items
- name: livenessProbe.grpc
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalContainers/index/livenessProbe/grpc
    method: GET
    data_selector: port
    params: {}
- name: livenessProbe.httpGet
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalContainers/index/livenessProbe/httpGet
    method: GET
    data_selector: port
    params: {}
- name: livenessProbe.tcpSocket
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalContainers/index/livenessProbe/tcpSocket
    method: GET
    data_selector: port
    params: {}
- name: readinessProbe.grpc
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalContainers/index/readinessProbe/grpc
    method: GET
    data_selector: port
    params: {}
- name: readinessProbe.httpGet
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalContainers/index/readinessProbe/httpGet
    method: GET
    data_selector: port
    params: {}
- name: readinessProbe.tcpSocket
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalContainers/index/readinessProbe/tcpSocket
    method: GET
    data_selector: port
    params: {}
- name: securityContext.appArmorProfile
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalContainers/index/securityContext/appArmorProfile
    method: GET
    data_selector: type
    params: {}
- name: securityContext.capabilities
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalContainers/index/securityContext/capabilities
    method: GET
    data_selector: add
    params: {}
- name: securityContext.seLinuxOptions
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalContainers/index/securityContext/seLinuxOptions
    method: GET
    data_selector: level
    params: {}
- name: securityContext.seccompProfile
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalContainers/index/securityContext/seccompProfile
    method: GET
    data_selector: type
    params: {}
- name: additionalInitContainers
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalInitContainers
    method: GET
- name: securityContext.appArmorProfile
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalInitContainers/securityContext/appArmorProfile
    method: GET
- name: securityContext.capabilities
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalInitContainers/securityContext/capabilities
    method: GET
- name: securityContext.seLinuxOptions
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalInitContainers/securityContext/seLinuxOptions
    method: GET
- name: securityContext.seccompProfile
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalInitContainers/securityContext/seccompProfile
    method: GET
- name: securityContext.windowsOptions
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalInitContainers/securityContext/windowsOptions
    method: GET
- name: startupProbe
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalInitContainers/startupProbe
    method: GET
- name: volumeDevices
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalInitContainers/volumeDevices
    method: GET
- name: volumeMounts
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalInitContainers/volumeMounts
    method: GET
- name: additionalMetadata
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalMetadata
    method: GET
- name: additionalVolumeMounts
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalVolumeMounts
    method: GET
- name: additionalVolumes
  endpoint:
    path: /TenantControlPlane/spec/controlPlane/deployment/additionalVolumes
    method: GET
- name: awsElasticBlockStore
  endpoint:
    path: /tenantControlPlane/spec/controlPlane/deployment/additionalVolumes/index/awsElasticBlockStore
    method: GET
    data_selector: volumeID
    params:
      volumeID: required
- name: azureDisk
  endpoint:
    path: /tenantControlPlane/spec/controlPlane/deployment/additionalVolumes/index/azureDisk
    method: GET
    data_selector: diskName
    params:
      diskName: required
      diskURI: required
- name: azureFile
  endpoint:
    path: /tenantControlPlane/spec/controlPlane/deployment/additionalVolumes/index/azureFile
    method: GET
    data_selector: secretName
    params:
      secretName: required
      shareName: required
- name: cephfs
  endpoint:
    path: /tenantControlPlane/spec/controlPlane/deployment/additionalVolumes/index/cephfs
    method: GET
    data_selector: monitors
    params:
      monitors: required
- name: cinder
  endpoint:
    path: /tenantControlPlane/spec/controlPlane/deployment/additionalVolumes/index/cinder
    method: GET
    data_selector: volumeID
    params:
      volumeID: required
- name: configMap
  endpoint:
    path: /tenantControlPlane/spec/controlPlane/deployment/additionalVolumes/index/configMap
    method: GET
    data_selector: configMap
    params: {}
- name: resources
  endpoint:
    path: /v1alpha1
    method: GET
    data_selector: resources
    params: {}
- name: clusterTrustBundle
  endpoint:
    path: /tenantControlPlane/spec/controlPlane/deployment/additionalVolumes/index/projected/sources/index/clusterTrustBundle
    method: GET
- name: configMap
  endpoint:
    path: /tenantControlPlane/spec/controlPlane/deployment/additionalVolumes/index/projected/sources/index/configMap
    method: GET
- name: downwardAPI
  endpoint:
    path: /tenantControlPlane/spec/controlPlane/deployment/additionalVolumes/index/projected/sources/index/downwardAPI
    method: GET
- name: podCertificate
  endpoint:
    path: /tenantControlPlane/spec/controlPlane/deployment/additionalVolumes/index/projected/sources/index/podCertificate
    method: GET
- name: secret
  endpoint:
    path: /tenantControlPlane/spec/controlPlane/deployment/additionalVolumes/index/projected/sources/index/secret
    method: GET
- name: serviceAccountToken
  endpoint:
    path: /tenantControlPlane/spec/controlPlane/deployment/additionalVolumes/index/projected/sources/index/serviceAccountToken
    method: GET
- name: rbd
  endpoint:
    path: /tenantcontrolplane/spec/controlplane/deployment/additionalVolumes/index/rbd
    method: GET
    data_selector: records
    params:
      image: required
      monitors: required
- name: scaleIO
  endpoint:
    path: /tenantcontrolplane/spec/controlplane/deployment/additionalVolumes/index/scaleIO
    method: GET
    data_selector: records
    params:
      gateway: required
      secretRef: required
      system: required
- name: vsphereVolume
  endpoint:
    path: /tenantcontrolplane/spec/controlplane/deployment/additionalVolumes/index/vsphereVolume
    method: GET
    data_selector: records
    params:
      volumePath: required
- name: TenantControlPlane
  endpoint:
    path: /v1alpha1/TenantControlPlane
    method: GET
    data_selector: status
- name: kubeconfig_admin
  endpoint:
    path: /TenantControlPlane/status/kubeconfig/admin
    method: GET
    data_selector: KubeconfigStatus
    params: {}
- name: kubeconfig_controllerManager
  endpoint:
    path: /TenantControlPlane/status/kubeconfig/controllerManager
    method: GET
    data_selector: KubeconfigStatus
    params: {}
- name: kubeconfig_scheduler
  endpoint:
    path: /TenantControlPlane/status/kubeconfig/scheduler
    method: GET
    data_selector: KubeconfigStatus
    params: {}
- name: kubernetesResources_deployment
  endpoint:
    path: /TenantControlPlane/status/kubernetesResources/deployment
    method: GET
    data_selector: KubernetesDeploymentStatus
    params: {}
- name: kubernetesResources_ingress
  endpoint:
    path: /TenantControlPlane/status/kubernetesResources/ingress
    method: GET
    data_selector: KubernetesIngressStatus
    params: {}
- name: kubernetesResources_service
  endpoint:
    path: /TenantControlPlane/status/kubernetesResources/service
    method: GET
    data_selector: KubernetesServiceStatus
    params: {}
- name: kubernetesResources_version
  endpoint:
    path: /TenantControlPlane/status/kubernetesResources/version
    method: GET
    data_selector: KubernetesVersion
    params: {}
- name: storage_certificate
  endpoint:
    path: /TenantControlPlane/status/storage/certificate
    method: GET
    data_selector: Certificate
    params: {}
- name: storage_config
  endpoint:
    path: /TenantControlPlane/status/storage/config
    method: GET
    data_selector: Config
    params: {}
- name: storage_setup
  endpoint:
    path: /TenantControlPlane/status/storage/setup
    method: GET
    data_selector: Setup
    params: {}
- name: telemetry_payload
  endpoint:
    path: /telemetry
    method: POST
    data_selector: payload
    params: {}
- name: ingress_addon
  endpoint:
    path: /enterprise-addons/ingress
    method: GET
    data_selector: addons
    params: {}
- name: cert-manager
  endpoint:
    path: /cert-manager
    method: GET
    data_selector: pods
    params: {}
- name: metallb
  endpoint:
    path: /metallb
    method: GET
    data_selector: pods
    params: {}
- name: tenant_control_plane
  endpoint:
    path: /api/tenant_control_plane
    method: POST
    data_selector: status
    params: {}
- name: eks_cluster
  endpoint:
    path: /eks-cluster
    method: POST
    data_selector: cluster
    params:
      name: ${KAMAJI_CLUSTER}
      region: ${KAMAJI_REGION}
      version: ${KAMAJI_CLUSTER_VERSION}
      node_group_name: ${KAMAJI_NODE_NG}
      node_type: ${KAMAJI_NODE_TYPE}
      availability_zones: '[${KAMAJI_AZ}]'
- name: eks_cluster
  endpoint:
    path: /create-eks-cluster
    method: POST
    data_selector: cluster_details
    params: {}
- name: tenant_control_plane
  endpoint:
    path: /create-tenant-control-plane
    method: POST
    data_selector: control_plane_details
    params: {}
- name: tenant_control_plane
  endpoint:
    path: /get-tenant-control-plane
    method: POST
    data_selector: spec
    params: {}
- name: management_cluster
  endpoint:
    path: /get-management-cluster
    method: GET
    data_selector: status
    params: {}
- name: TenantControlPlane
  endpoint:
    path: /tenant-control-plane
    method: POST
    data_selector: control_plane_resources
    params: {}
- name: worker_nodes
  endpoint:
    path: /concepts/tenant-worker-nodes
    method: GET
    data_selector: worker_nodes_data
- name: konnectivity
  endpoint:
    path: /konnectivity
    method: GET
    data_selector: data
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster-api/cluster-class/
    method: GET
    data_selector: ClusterClass
    params: {}
- name: Cluster
  endpoint:
    path: /cluster-api/cluster/
    method: GET
    data_selector: Cluster
    params: {}
- name: Cluster
  endpoint:
    path: /cluster-api/cluster-autoscaler/
    method: GET
    data_selector: clusters
    params: {}
- name: tenant_cluster
  endpoint:
    path: /cluster-api/vsphere-infra-provider
    method: POST
    data_selector: cluster_manifests
    params: {}
- name: tenant_cluster
  endpoint:
    path: /vcenter/tenant-clusters
    method: POST
- name: cluster
  endpoint:
    path: /api2/json/nodes
    method: GET
    data_selector: data
    params: {}
- name: tenant_cluster
  endpoint:
    path: /api/tenant_cluster
    method: POST
    data_selector: clusters
    params:
      cluster_name: sample
      namespace: default
- name: datastore
  endpoint:
    path: /guides/alternative-datastore/
    method: GET
    data_selector: datastore
- name: backup
  endpoint:
    path: /backup
    method: POST
    data_selector: backup
- name: restore
  endpoint:
    path: /restore
    method: POST
    data_selector: restore
- name: certificates
  endpoint:
    path: /certificates
    method: GET
    data_selector: certificates
    params: {}
- name: TenantControlPlane
  endpoint:
    path: /guides/pausing/#pausing-tenantcontrolplane-reconciliations
    method: GET
    data_selector: reconciliations
    params: {}
- name: Secret
  endpoint:
    path: /guides/pausing/#pausing-secret-rotation
    method: GET
    data_selector: secret_rotation
    params: {}
- name: datastore
  endpoint:
    path: /kubectl/get/datastore
    method: GET
    data_selector: items
    params: {}
- name: tenant_control_plane
  endpoint:
    path: /tenantcontrolplanes.kamaji.clastix.io
    method: GET
    data_selector: items
    params: {}
- name: helm_release
  endpoint:
    path: /helmreleases.toolkit.fluxcd.io
    method: GET
    data_selector: items
    params: {}
- name: TenantControlPlane
  endpoint:
    path: /apis/kamaji.clastix.io/v1alpha1/tenantcontrolplanes
    method: PATCH
    data_selector: spec.kubernetes.version
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: terraform-kamaji-node-pool
  endpoint:
    path: /github.com/clastix/terraform-kamaji-node-pool
    method: GET
    data_selector: repository
    params: {}
- name: manager
  endpoint:
    path: /manager
    method: GET
    data_selector: flags
    params: {}
- name: tenant_control_plane
  endpoint:
    path: /tenantcontrolplane
    method: GET
    data_selector: items
    params: {}
notes:
- Exec specifies a command to execute in the container.
- GRPC specifies a GRPC HealthCheckRequest.
- HTTPGet specifies an HTTP GET request to perform.
- TCPSocket specifies a connection to a TCP port.
- KamajiControlPlane is reachable using an Ingress object deployed in the management
  cluster.
- Cannot be updated.
- Minimum values are enforced for several parameters.
- MaxSkew is a required field. Default value is 1 and 0 is not allowed.
- Kamaji runs the Control Plane as regular pods in the Management Cluster.
- Kamaji is an open source Kubernetes Operator that transforms any Kubernetes cluster
  into a Management Cluster capable of orchestrating and managing multiple independent
  Tenant Clusters.
- Data is collected through a component within Kamaji, which periodically sends this
  information to our backend.
- Kamaji provides an easy opt-out mechanism.
- Kamaji is designed to be run on production-grade Kubernetes clusters.
- Kind is not a production-grade Kubernetes cluster, and it is not recommended to
  run in production environments.
- Requires a bootstrap machine and a Kubernetes cluster for Management and Tenant
  Control Planes.
- LoadBalancer service type is used to expose the Tenant Control Plane.
- The cluster needs a CNI plugin to get the nodes ready.
- Make sure to adapt the script if you're using a different OS distribution.
- The aws-ebs-csi-driver addon is required to use EBS volumes as persistent volumes.
- A node group with 1 node in one availability zone is created to simplify the setup.
- You can ignore the warning regarding LoadBalancerIP specification on AWS ELB.
- Make sure to replace <REPLACE_WITH_SG> with the security group id that allows the
  worker nodes to communicate with the public IP of the tenant control plane
- Ensure Azure CLI is installed and you are logged in.
- Make sure the appropriate annotations are set for load balancers.
- Kamaji supports multiple approaches to managing worker node lifecycles.
- Worker nodes can run on various infrastructures including bare metal, virtual machines,
  public cloud instances, and edge locations.
- Konnectivity is enabled by default.
- Can be disabled if alternative networking solutions are required.
- Kamaji can act as a Cluster API Control Plane provider using the KamajiControlPlane
  custom resource.
- ClusterClass is an experimental feature of Cluster API.
- All experimental features are not subject to any compatibility or deprecation policy
  and are not yet recommended for production use.
- 'Cluster Autoscaler works on a single cluster: every cluster must have its own Cluster
  Autoscaler instance.'
- Cooldown time must be configured properly on a cluster basis.
- With Cluster Autoscaler, new machines are automatically created in a very short
  time, ending up with some up-provisioning and potentially wasting resources.
- Requires access to a vCenter server
- Ensure vSphere environment is configured with DHCP or IPAM Provider
- A Template VM built using the Proxmox Builder is necessary to create the cluster
  machines.
- To assign IP addresses to nodes, you can use the in-cluster IPAM provider.
- Cluster API requires machine templates based on cloud-init.
- 'The default settings are not production grade: the following scripts are just used
  to test the Kamaji usage of different drivers.'
- NATS support is still experimental, mostly because multi-tenancy is NOT supported.
- Assume the Tenant Control Plane is deployed into the tenant-00 namespace
- All certificates are created with the kubeadm defaults, thus their validity is set
  to 1 year.
- The rotation will occur the day before their expiration.
- The annotation key 'kamaji.clastix.io/paused' disables controller reconciliations.
- During the datastore migration, the Tenant Control Plane is put in read-only mode
  to avoid misalignments between source and destination datastores.
- 'Migration is expected to complete in 5 minutes. However, that timeout can be customized
  at the TenantControlPlane level with the annotation kamaji.clastix.io/migration-timeout
  with a Go-duration value (e.g.: 5m).'
- The annotation kamaji.clastix.io/cleanup-prior-migration=true allows to enforce
  the clean-up of the target DataStore schema in case of collision.
- Admin user has cluster-admin ClusterRole privileges.
- Flux reconciliation controllers run in the Management Cluster.
- Upgrade of Tenant Control Plane requires patching the TenantControlPlane.spec.kubernetes.version
  field.
- 'Default Upgrade Strategy is Blue/Green with maxSurge: 100% and maxUnavailable:
  0.'
- 'Rolling Upgrade Strategy can be configured with maxSurge: 1 and maxUnavailable:
  1.'
- Metrics are exposed in Prometheus format and can be scraped by a Prometheus server
  instance.
- The Terraform modules serve as comprehensive examples and starting points for Kamaji
  integration.
- Production-ready features like security groups, IAM policies, and anti-affinity
  rules should be customized.
- Contributions via pull requests are much appreciated.
- Commit's first line should not exceed 50 columns.
- Kamaji is written in Golang.
- For the benchmark we're not creating a LoadBalancer service, or an Ingress.
- The goal of the benchmark is to monitor resource consumption, and the average time
  required to create the requested resources.
- Currently, Kamaji allows customization using CLI flags for the manager subcommand.
- Usage of the said artefacts is not suggested for production use-case due to missing
  version pinning of artefacts
- Edge Releases may involve partial features that are later modified or backed out
- The routing put in place by the Kubernetes CNI is based on the L4, meaning that
  all the requests will be forwarded to the Ingress Controller with no Host header.
errors:
- 'Error syncing load balancer: failed to ensure load balancer: LoadBalancerIP cannot
  be specified for AWS ELB'
- 'RESOURCE_NOT_FOUND: Check the resource group or name provided.'
- 'INVALID_PARAMETER: Ensure all parameters are correctly specified.'
- 'Error from server (the current Control Plane is in freezing mode due to a maintenance
  mode, all the changes are blocked: removing the webhook may lead to an inconsistent
  state upon its completion): admission webhook "catchall.migrate.kamaji.clastix.io"
  denied the request'
auth_info:
  mentioned_objects: []
client:
  base_url: https://kamaji.clastix.io
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
