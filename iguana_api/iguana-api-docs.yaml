resources:
- name: ack
  endpoint:
    path: /ack
    method: POST
    data_selector: data
- name: chm
  endpoint:
    path: /chm
    method: POST
    data_selector: data
- name: crypto
  endpoint:
    path: /crypto
    method: POST
    data_selector: data
- name: library_ciphers
  endpoint:
    path: /crypto/library/ciphers
    method: GET
    data_selector: Ciphers
    params: {}
- name: library_digests
  endpoint:
    path: /crypto/library/digests
    method: GET
    data_selector: Digests
    params: {}
- name: pbkdf2
  endpoint:
    path: /crypto/pbkdf2
    method: POST
    data_selector: Key
    params: {}
- name: rsa_decrypt
  endpoint:
    path: /crypto/rsa/decrypt
    method: POST
    data_selector: Decrypted
    params: {}
- name: rsa_decryptPublic
  endpoint:
    path: /crypto/rsa/decryptPublic
    method: POST
    data_selector: Decrypted
    params: {}
- name: rsa_encrypt
  endpoint:
    path: /crypto/rsa/encrypt
    method: POST
    data_selector: Encrypted
    params: {}
- name: rsa_encryptPrivate
  endpoint:
    path: /crypto/rsa/encryptPrivate
    method: POST
    data_selector: Encrypted
    params: {}
- name: sign
  endpoint:
    path: /crypto/sign
    method: POST
    data_selector: BinarySignature
    params: {}
- name: verify
  endpoint:
    path: /crypto/verify
    method: POST
    data_selector: IsValid
    params: {}
- name: ciphers
  endpoint:
    path: /crypto/library/ciphers
    method: GET
    data_selector: supported_ciphers
- name: digests
  endpoint:
    path: /crypto/library/digests
    method: GET
    data_selector: supported_digests
- name: version
  endpoint:
    path: /crypto/library/version
    method: GET
    data_selector: version_info
- name: connection
  endpoint:
    path: /db/db_connection
    method: POST
- name: debug
  endpoint:
    path: /debug/debug
    method: GET
    data_selector: data
    params: {}
- name: debug_getfenv
  endpoint:
    path: /debug/getfenv
    method: GET
    data_selector: data
    params: {}
- name: debug_gethook
  endpoint:
    path: /debug/gethook
    method: GET
    data_selector: data
    params: {}
- name: debug_getinfo
  endpoint:
    path: /debug/getinfo
    method: GET
    data_selector: data
    params: {}
- name: debug_getlocal
  endpoint:
    path: /debug/getlocal
    method: GET
    data_selector: data
    params: {}
- name: debug_getmetatable
  endpoint:
    path: /debug/getmetatable
    method: GET
    data_selector: data
    params: {}
- name: debug_getregistry
  endpoint:
    path: /debug/getregistry
    method: GET
    data_selector: data
    params: {}
- name: aes_encrypt
  endpoint:
    path: filter.aes.enc
    method: POST
    data_selector: data
    params: {}
- name: aes_decrypt
  endpoint:
    path: filter.aes.dec
    method: POST
    data_selector: data
    params: {}
- name: base64_encode
  endpoint:
    path: filter.base64.enc
    method: POST
    data_selector: data
    params: {}
- name: base64_decode
  endpoint:
    path: filter.base64.dec
    method: POST
    data_selector: data
    params: {}
- name: bzip2_deflate
  endpoint:
    path: filter.bzip2.deflate
    method: POST
    data_selector: data
    params: {}
- name: bzip2_inflate
  endpoint:
    path: filter.bzip2.inflate
    method: POST
    data_selector: data
    params: {}
- name: gzip_deflate
  endpoint:
    path: filter.gzip.deflate
    method: POST
    data_selector: data
    params: {}
- name: xml_node_tree
  endpoint:
    path: /parse-xml
    method: POST
    data_selector: xml_tree
    params:
      data: XML to be parsed string
- name: xml
  endpoint:
    path: /xml
    method: GET
    data_selector: XML node tree
- name: help_example
  endpoint:
    path: /help/example
    method: GET
    data_selector: example table
- name: help_get
  endpoint:
    path: /help/get
    method: GET
    data_selector: help data
- name: help_reset
  endpoint:
    path: /help/reset
    method: POST
    data_selector: response
    params: {}
- name: help_set
  endpoint:
    path: /help/set
    method: POST
    data_selector: response
    params: {}
- name: help_toHtml
  endpoint:
    path: /help/toHtml
    method: POST
    data_selector: response
    params: {}
- name: iconv_aliases
  endpoint:
    path: /iconv/aliases
    method: GET
    data_selector: response
    params: {}
- name: iconv_ascii_dec
  endpoint:
    path: /iconv/ascii/dec
    method: POST
    data_selector: response
    params: {}
- name: iconv_ascii_enc
  endpoint:
    path: /iconv/ascii/enc
    method: POST
    data_selector: response
    params: {}
- name: iconv_convert
  endpoint:
    path: /iconv/convert
    method: POST
    data_selector: response
    params: {}
- name: iconv_cp1252_dec
  endpoint:
    path: /iconv/cp1252/dec
    method: POST
    data_selector: response
    params: {}
- name: iconv_cp1252_enc
  endpoint:
    path: /iconv/cp1252/enc
    method: POST
    data_selector: response
    params: {}
- name: iconv_iso8859_1_dec
  endpoint:
    path: /iconv/iso8859_1/dec
    method: POST
    data_selector: response
    params: {}
- name: iconv_iso8859_1_enc
  endpoint:
    path: /iconv/iso8859_1/enc
    method: POST
    data_selector: response
    params: {}
- name: iguana_appDir
  endpoint:
    path: /iguana/appDir
    method: GET
    data_selector: response
    params: {}
- name: iguana_channelConfig
  endpoint:
    path: /iguana/channelConfig
    method: POST
    data_selector: response
    params: {}
- name: parse
  endpoint:
    path: /parse
    method: POST
    data_selector: xmlNodeTree
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: xmlNodeTree
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: versionInfo
- name: webInfo
  endpoint:
    path: /webInfo
    method: GET
    data_selector: webInfo
- name: workingDir
  endpoint:
    path: /workingDir
    method: GET
    data_selector: directory
- name: parse_xml
  endpoint:
    path: /xml/parse
    method: POST
    data_selector: parsed_data
    params:
      data: XML to be parsed string
- name: math_abs
  endpoint:
    path: /math/abs
    method: GET
    data_selector: absolute_value
    params:
      data: number
- name: math_cos
  endpoint:
    path: /math/cos
    method: GET
    data_selector: cosine_value
    params:
      data: angle in radians
- name: sqrt
  endpoint:
    path: /sqrt
    method: POST
    data_selector: xml
    params:
      data: The XML to be parsed string
- name: delete
  endpoint:
    path: /net.ftps.delete
    method: POST
    data_selector: data
- name: get
  endpoint:
    path: /net.ftps.get
    method: GET
    data_selector: data
- name: put
  endpoint:
    path: /net.ftps.put
    method: PUT
    data_selector: data
- name: rename
  endpoint:
    path: /net.ftps.rename
    method: POST
    data_selector: data
- name: list
  endpoint:
    path: /net.ftps.list
    method: GET
    data_selector: data
- name: connectionInfo
  endpoint:
    path: /net/http/connectionInfo
    method: GET
    data_selector: xml node tree
- name: delete
  endpoint:
    path: /net/http/delete
    method: DELETE
    data_selector: xml node tree
- name: get
  endpoint:
    path: /net/http/get
    method: GET
    data_selector: xml node tree
- name: head
  endpoint:
    path: /net/http/head
    method: HEAD
    data_selector: xml node tree
- name: options
  endpoint:
    path: /net/http/options
    method: OPTIONS
    data_selector: xml node tree
- name: parseRequest
  endpoint:
    path: /net/http/parseRequest
    method: POST
    data_selector: xml node tree
- name: patch
  endpoint:
    path: /net/http/patch
    method: PATCH
    data_selector: xml node tree
- name: post
  endpoint:
    path: /net/http/post
    method: POST
    data_selector: xml node tree
- name: put
  endpoint:
    path: /net/http/put
    method: PUT
    data_selector: xml node tree
- name: respond
  endpoint:
    path: /net/http/respond
    method: POST
    data_selector: xml node tree
- name: trace
  endpoint:
    path: /net/http/trace
    method: TRACE
    data_selector: xml node tree
- name: append
  endpoint:
    path: /xml/append
    method: POST
    data_selector: parsed_data
    params: {}
- name: capitalize
  endpoint:
    path: /xml/capitalize
    method: POST
    data_selector: parsed_data
    params: {}
- name: child
  endpoint:
    path: /xml/child
    method: POST
    data_selector: parsed_data
    params: {}
- name: childCount
  endpoint:
    path: /xml/childCount
    method: POST
    data_selector: parsed_data
    params: {}
- name: compactWS
  endpoint:
    path: /xml/compactWS
    method: POST
    data_selector: parsed_data
    params: {}
- name: insert
  endpoint:
    path: /xml/insert
    method: POST
    data_selector: parsed_data
    params: {}
- name: isKey
  endpoint:
    path: /xml/isKey
    method: POST
    data_selector: parsed_data
    params: {}
- name: isLeaf
  endpoint:
    path: /xml/isLeaf
    method: POST
    data_selector: parsed_data
    params: {}
- name: isNull
  endpoint:
    path: /xml/isNull
    method: POST
    data_selector: parsed_data
    params: {}
- name: mapRange
  endpoint:
    path: /xml/mapRange
    method: POST
    data_selector: parsed_data
    params: {}
- name: mapTree
  endpoint:
    path: /xml/mapTree
    method: POST
    data_selector: parsed_data
    params: {}
- name: nodeName
  endpoint:
    path: /xml/nodeName
    method: POST
    data_selector: parsed_data
    params: {}
- name: nodeText
  endpoint:
    path: /xml/nodeText
    method: POST
    data_selector: parsed_data
    params: {}
- name: nodeType
  endpoint:
    path: /xml/nodeType
    method: POST
    data_selector: parsed_data
    params: {}
- name: nodeValue
  endpoint:
    path: /xml/nodeValue
    method: POST
    data_selector: parsed_data
    params: {}
- name: remove
  endpoint:
    path: /xml/remove
    method: POST
    data_selector: parsed_data
    params: {}
- name: setInner
  endpoint:
    path: /xml/setInner
    method: POST
    data_selector: parsed_data
    params: {}
- name: setNodeValue
  endpoint:
    path: /xml/setNodeValue
    method: POST
    data_selector: parsed_data
    params: {}
- name: trimLWS
  endpoint:
    path: /xml/trimLWS
    method: POST
    data_selector: parsed_data
    params: {}
- name: trimRWS
  endpoint:
    path: /xml/trimRWS
    method: POST
    data_selector: parsed_data
    params: {}
- name: trimWS
  endpoint:
    path: /xml/trimWS
    method: POST
    data_selector: parsed_data
    params: {}
- name: os.clock
  endpoint:
    path: os.clock
    method: GET
    data_selector: data
- name: os.date
  endpoint:
    path: os.date
    method: GET
    data_selector: data
- name: os.difftime
  endpoint:
    path: os.difftime
    method: GET
    data_selector: data
- name: os.execute
  endpoint:
    path: os.execute
    method: GET
    data_selector: data
- name: os.fs.abspath
  endpoint:
    path: os.fs.abspath
    method: GET
    data_selector: data
- name: os.fs.access
  endpoint:
    path: os.fs.access
    method: GET
    data_selector: data
- name: os.fs.chmod
  endpoint:
    path: os.fs.chmod
    method: GET
    data_selector: data
- name: os.fs.chown
  endpoint:
    path: os.fs.chown
    method: GET
    data_selector: data
- name: os.fs.glob
  endpoint:
    path: os.fs.glob
    method: GET
    data_selector: data
- name: os.fs.mkdir
  endpoint:
    path: os.fs.mkdir
    method: GET
    data_selector: data
- name: os.fs.rmdir
  endpoint:
    path: os.fs.rmdir
    method: GET
    data_selector: data
- name: os.fs.stat
  endpoint:
    path: os.fs.stat
    method: GET
    data_selector: data
- name: os.fs.utime
  endpoint:
    path: os.fs.utime
    method: GET
    data_selector: data
- name: os.getenv
  endpoint:
    path: os.getenv
    method: GET
    data_selector: data
- name: os.remove
  endpoint:
    path: os.remove
    method: GET
    data_selector: data
- name: os.rename
  endpoint:
    path: os.rename
    method: GET
    data_selector: data
- name: xml
  endpoint:
    path: /xml
    method: GET
    data_selector: node tree
    params:
      data: The XML to be parsed string
- name: os
  endpoint:
    path: /os
    method: GET
    data_selector: time functions
    params:
      data: The XML to be parsed string
- name: package
  endpoint:
    path: /package/loadlib
    method: GET
    data_selector: C library linking
    params:
      data: The XML to be parsed string
- name: queue.push
  endpoint:
    path: /queue.push
    method: POST
    data_selector: XML tree containing the parsed data xml node tree
    params:
      data: The XML to be parsed string
- name: xml_module
  endpoint:
    path: /xml
    method: GET
    data_selector: node_tree
    params: {}
- name: xml.parse
  endpoint:
    path: /xml/parse
    method: POST
    data_selector: XML tree
    params:
      data: XML to be parsed string
- name: add_channel
  endpoint:
    path: /add_channel
    method: POST
    data_selector: response
    params:
      config: <value>
- name: current_version
  endpoint:
    path: /current_version
    method: POST
    data_selector: response
    params: {}
- name: export_project
  endpoint:
    path: /export_project
    method: POST
    data_selector: response
    params:
      guid: <value>
- name: get_channel_config
  endpoint:
    path: /get_channel_config
    method: POST
    data_selector: response
    params:
      name: <value>
- name: get_default_config
  endpoint:
    path: /get_default_config
    method: POST
    data_selector: response
    params:
      source: <value>
      destination: <value>
- name: get_server_salt
  endpoint:
    path: /get_server_salt
    method: POST
    data_selector: response
    params: {}
- name: get_server_config
  endpoint:
    path: /get_server_config
    method: POST
    data_selector: configuration
    params: {}
- name: status
  endpoint:
    path: /status
    method: POST
    data_selector: status
    params: {}
- name: api_query
  endpoint:
    path: /api_query
    method: POST
    data_selector: log_entries
    params: {}
- name: monitor_query
  endpoint:
    path: /monitor_query
    method: POST
    data_selector: performance_statistics
    params: {}
- name: cda
  endpoint:
    path: /cda
    method: GET
    data_selector: documents
    params: {}
- name: cda.code
  endpoint:
    path: /cda/code
    method: POST
    data_selector: codes
    params: {}
- name: act
  endpoint:
    path: /cda.codeset.act
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.4
- name: actClass
  endpoint:
    path: /cda.codeset.actClass
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.6
- name: actNoImmunization
  endpoint:
    path: /cda.codeset.actNoImmunization
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.8
- name: actPriority
  endpoint:
    path: /cda.codeset.actPriority
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.7
- name: address
  endpoint:
    path: /cda.codeset.address
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.1119
- name: advancedDirectivesTypes
  endpoint:
    path: /cda.codeset.advancedDirectivesTypes
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.1.11.20.2
- name: confidentiality
  endpoint:
    path: /cda.codeset.confidentiality
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.25
- name: cpt
  endpoint:
    path: /cda.codeset.cpt
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.6.12
- name: cvx
  endpoint:
    path: /cda.codeset.cvx
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.12.292
- name: ethnicGroup
  endpoint:
    path: /cda.codeset.ethnicGroup
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.6.238
- name: healthcareServiceLocation
  endpoint:
    path: /cda.codeset.healthcareServiceLocation
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.6.259
- name: icf
  endpoint:
    path: /cda.codeset.icf
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.6.254
- name: interpretation
  endpoint:
    path: /cda.codeset.interpretation
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.83
- name: language
  endpoint:
    path: /cda.codeset.language
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.1.11.11526
- name: languageAbilityMode
  endpoint:
    path: /cda.codeset.languageAbilityMode
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.60
- name: loinc
  endpoint:
    path: /cda.codeset.loinc
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.6.1
- name: marriage
  endpoint:
    path: /cda.codeset.marriage
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.2
- name: nameUses
  endpoint:
    path: /cda.codeset.nameUses
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.45
- name: nci
  endpoint:
    path: /cda.codeset.nci
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.3.26.1.1
- name: personalRelationshipRole
  endpoint:
    path: /cda.codeset.personalRelationshipRole
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.1.11.19563
- name: proficiencyLevel
  endpoint:
    path: /cda.codeset.proficiencyLevel
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.61
- name: providerCodes
  endpoint:
    path: /cda.codeset.providerCodes
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.6.101
- name: providerRoles
  endpoint:
    path: /cda.codeset.providerRoles
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.12.443
- name: race
  endpoint:
    path: /cda.codeset.race
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.6.238
- name: religion
  endpoint:
    path: /cda.codeset.religion
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.1076
- name: roleClass
  endpoint:
    path: /cda.codeset.roleClass
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.110
- name: rxnorm
  endpoint:
    path: /cda.codeset.rxnorm
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.6.88
- name: sex
  endpoint:
    path: /cda.codeset.sex
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.12.1
- name: signature
  endpoint:
    path: /cda.codeset.signature
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.89
- name: snomedCT
  endpoint:
    path: /cda.codeset.snomedCT
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.6.96
- name: status
  endpoint:
    path: /cda.codeset.status
    method: GET
    data_selector: codes
    params:
      OID: 2.16.840.1.113883.5.14
- name: templates
  endpoint:
    path: /cda.codeset.templates
    method: GET
    data_selector: codes
    params: {}
- name: cat
  endpoint:
    path: /cda/codeset/cat
    method: GET
    data_selector: codesets
- name: act
  endpoint:
    path: /cda/codeset/act
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.4
- name: actClass
  endpoint:
    path: /cda/codeset/actClass
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.6
- name: actNoImmunization
  endpoint:
    path: /cda/codeset/actNoImmunization
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.8
- name: actPriority
  endpoint:
    path: /cda/codeset/actPriority
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.7
- name: address
  endpoint:
    path: /cda/codeset/address
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.1119
- name: advancedDirectivesTypes
  endpoint:
    path: /cda/codeset/advancedDirectivesTypes
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.1.11.20.2
- name: confidentiality
  endpoint:
    path: /cda/codeset/confidentiality
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.25
- name: cpt
  endpoint:
    path: /cda/codeset/cpt
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.6.12
- name: cvx
  endpoint:
    path: /cda/codeset/cvx
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.12.292
- name: ethnicGroup
  endpoint:
    path: /cda/codeset/ethnicGroup
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.6.238
- name: healthcareServiceLocation
  endpoint:
    path: /cda/codeset/healthcareServiceLocation
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.6.259
- name: icf
  endpoint:
    path: /cda/codeset/icf
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.6.254
- name: interpretation
  endpoint:
    path: /cda/codeset/interpretation
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.83
- name: language
  endpoint:
    path: /cda/codeset/language
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.1.11.11526
- name: languageAbilityMode
  endpoint:
    path: /cda/codeset/languageAbilityMode
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.60
- name: loinc
  endpoint:
    path: /cda/codeset/loinc
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.6.1
- name: marriage
  endpoint:
    path: /cda/codeset/marriage
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.2
- name: nameUses
  endpoint:
    path: /cda/codeset/nameUses
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.45
- name: nci
  endpoint:
    path: /cda/codeset/nci
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.3.26.1.1
- name: personalRelationshipRole
  endpoint:
    path: /cda/codeset/personalRelationshipRole
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.1.11.19563
- name: proficiencyLevel
  endpoint:
    path: /cda/codeset/proficiencyLevel
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.61
- name: providerCodes
  endpoint:
    path: /cda/codeset/providerCodes
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.6.101
- name: providerRoles
  endpoint:
    path: /cda/codeset/providerRoles
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.12.443
- name: race
  endpoint:
    path: /cda/codeset/race
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.6.238
- name: religion
  endpoint:
    path: /cda/codeset/religion
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.1076
- name: roleClass
  endpoint:
    path: /cda/codeset/roleClass
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.110
- name: rxnorm
  endpoint:
    path: /cda/codeset/rxnorm
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.6.88
- name: sex
  endpoint:
    path: /cda/codeset/sex
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.12.1
- name: signature
  endpoint:
    path: /cda/codeset/signature
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.89
- name: snomedCT
  endpoint:
    path: /cda/codeset/snomedCT
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.6.96
- name: status
  endpoint:
    path: /cda/codeset/status
    method: GET
    data_selector: codesets
    params:
      oid: 2.16.840.1.113883.5.14
- name: templates
  endpoint:
    path: /cda/codeset/templates
    method: GET
    data_selector: codesets
- name: help
  endpoint:
    path: /cda/help
    method: POST
    data_selector: result
    params: {}
- name: id
  endpoint:
    path: /cda/id
    method: POST
    data_selector: result
    params: {}
- name: time
  endpoint:
    path: /cda/time
    method: POST
    data_selector: result
    params: {}
- name: value
  endpoint:
    path: /cda/value
    method: POST
    data_selector: result
    params: {}
- name: example_resource
  endpoint:
    path: /example/path
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api.xero.com/users
    method: GET
    data_selector: users
    params: {}
- name: monitor_query
  endpoint:
    path: /monitor_query
    method: GET
    data_selector: OverallInformation
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: SummaryDetails
    params: {}
- name: channel_status_data
  endpoint:
    path: /channel_status_data.html
    method: GET
    data_selector: ChannelDetails
    params:
      Channel: <channel name>
- name: trimWS
  endpoint:
    path: string.trimWS
    method: function
    data_selector: returns
    params: {}
- name: trimRWS
  endpoint:
    path: string.trimRWS
    method: function
    data_selector: returns
    params: {}
- name: trimLWS
  endpoint:
    path: string.trimLWS
    method: function
    data_selector: returns
    params: {}
- name: compactWS
  endpoint:
    path: string.compactWS
    method: function
    data_selector: returns
    params: {}
- name: capitalize
  endpoint:
    path: string.capitalize
    method: function
    data_selector: returns
    params: {}
- name: age
  endpoint:
    path: /age
    method: GET
    data_selector: returns
    params: {}
- name: batch
  endpoint:
    path: /batch
    method: POST
    data_selector: messages
- name: codemap.map
  endpoint:
    path: codemap.map
    method: GET
    data_selector: returns
    params: {}
- name: codemap.set
  endpoint:
    path: codemap.set
    method: GET
    data_selector: returns
    params: {}
- name: parseCsv
  endpoint:
    path: /csv_parse
    method: POST
    data_selector: Result
    params: {}
- name: dateparse
  endpoint:
    path: /dateparse
    method: POST
    data_selector: result
    params: {}
- name: node_D
  endpoint:
    path: /dateparse/node/D
    method: GET
    data_selector: returns
    params: {}
- name: node_T
  endpoint:
    path: /dateparse/node/T
    method: GET
    data_selector: returns
    params: {}
- name: node_TS
  endpoint:
    path: /dateparse/node/TS
    method: GET
    data_selector: returns
    params: {}
- name: messages
  endpoint:
    path: /api_query
    method: GET
    data_selector: message
    params:
      limit: LookbackAmount
      type: messages
      deleted: false
      unique: 'true'
      reverse: 'true'
- name: convert_to_hl7
  endpoint:
    path: /convert/to_hl7
    method: POST
    data_selector: output
- name: convert_to_edi
  endpoint:
    path: /convert/to_edi
    method: POST
    data_selector: output
- name: hl7.findSegment
  endpoint:
    path: /hl7/findSegment
    method: GET
    data_selector: hl7 node or table of nodes
    params: {}
- name: hl7_message
  endpoint:
    path: /hl7/serialize
    method: POST
    data_selector: serialized_message
    params: {}
- name: hl7.zsegment.parse
  endpoint:
    path: /hl7/zsegment/parse
    method: POST
    data_selector: ZSegments
    params: {}
- name: listChannels
  endpoint:
    path: /current_version
    method: GET
    data_selector: IguanaStatus
    params:
      live: 'true'
- name: getChannelConfig
  endpoint:
    path: /getChannelConfig
    method: GET
    data_selector: configuration
    params:
      name: string
      guid: string
      live: 'true'
- name: removeChannel
  endpoint:
    path: /removeChannel
    method: POST
    data_selector: configuration
    params:
      name: string
      guid: string
      live: 'false'
- name: startChannel
  endpoint:
    path: /startChannel
    method: POST
    data_selector: IguanaStatus
    params:
      name: string
      guid: string
      live: 'false'
- name: stopChannel
  endpoint:
    path: /stopChannel
    method: POST
    data_selector: IguanaStatus
    params:
      name: string
      guid: string
      live: 'false'
- name: startAllChannels
  endpoint:
    path: /startAllChannels
    method: POST
    data_selector: IguanaStatus
    params:
      live: 'false'
- name: stopAllChannels
  endpoint:
    path: /stopAllChannels
    method: POST
    data_selector: IguanaStatus
    params:
      live: 'false'
- name: getDefaultConfig
  endpoint:
    path: /getDefaultConfig
    method: POST
    data_selector: defaultConfig
    params:
      source: string
      destination: string
      live: 'true'
- name: addChannel
  endpoint:
    path: /addChannel
    method: POST
    data_selector: config
    params: {}
- name: pollChannelStatus
  endpoint:
    path: /pollChannelStatus
    method: GET
    data_selector: status
    params: {}
- name: cloneChannel
  endpoint:
    path: /cloneChannel
    method: POST
    data_selector: config
    params: {}
- name: getServerSalt
  endpoint:
    path: /getServerSalt
    method: GET
    data_selector: salt
    params: {}
- name: updateChannel
  endpoint:
    path: /updateChannel
    method: PUT
    data_selector: config
    params: {}
- name: exportProject
  endpoint:
    path: /exportProject
    method: GET
    data_selector: project_zip
    params: {}
- name: importProject
  endpoint:
    path: /importProject
    method: POST
    data_selector: project_guid
    params: {}
- name: saveProjectMilestone
  endpoint:
    path: /saveProjectMilestone
    method: POST
    data_selector: milestone_name
    params: {}
- name: updateProject
  endpoint:
    path: /updateProject
    method: PUT
    data_selector: milestone
    params: {}
- name: isLive
  endpoint:
    path: /isLive
    method: GET
    data_selector: live_status
    params: {}
- name: export_project
  endpoint:
    path: /export_project
    method: POST
- name: import_project
  endpoint:
    path: /import_project
    method: POST
- name: save_project_milestone
  endpoint:
    path: /save_project_milestone
    method: POST
- name: update_channel
  endpoint:
    path: /update_channel
    method: POST
- name: llp_connection
  endpoint:
    path: /llp.connect
    method: POST
    data_selector: connection
    params:
      host: string
      port: number
- name: mime.send
  endpoint:
    path: /mime/send
    method: POST
    data_selector: results
    params: {}
- name: resubmit_message
  endpoint:
    path: resubmit_message
    method: POST
    data_selector: Result
    params:
      Message: message
      RefMsgId: refid
      RequestId: 1
      Destination: channel
- name: login
  endpoint:
    path: login.html
    method: GET
    data_selector: Headers
    params:
      username: user
      password: password
- name: retry.call
  endpoint:
    method: POST
    params:
      retry: 100
      pause: 10
- name: rtf_toTxt
  endpoint:
    path: /rtf.toTxt
    method: POST
    data_selector: Returns
    params: {}
- name: scheduler.runAt
  endpoint:
    path: /scheduler.runAt
    method: GET
    data_selector: Information on previous and next scheduled runtime
    params: {}
- name: Transformation HL7 to HL7
  endpoint:
    path: /transforming-messages-hl7-to-hl7
    method: GET
    data_selector: messages
    params: {}
- name: Transformation HL7 to HL7
  endpoint:
    path: /v6/introduction-to-channels
    method: GET
    data_selector: ''
    params: {}
- name: Channel
  endpoint:
    path: /v6/introduction-to-channels
    method: GET
    data_selector: channels
    params: {}
- name: Filter
  endpoint:
    path: /v6/using-the-translator
    method: GET
    data_selector: filters
    params: {}
- name: patients
  endpoint:
    path: /patients
    method: POST
    data_selector: patients
- name: Transformation HL7 to JSON
  endpoint:
    path: /transforming-messages-hl7-to-json
    method: GET
- name: transformHL7
  endpoint:
    path: /transformHL7
    method: POST
    data_selector: message
    params: {}
- name: AddPatient
  endpoint:
    path: /test/AddPatient
    method: CALL
    data_selector: records
- name: patient
  endpoint:
    path: ''
    method: INSERT
    data_selector: ''
    params: {}
- name: kin
  endpoint:
    path: ''
    method: INSERT
    data_selector: ''
    params: {}
- name: Patient
  endpoint:
    path: /Patient
    method: SELECT
    data_selector: '*'
    params: {}
- name: main_function
  endpoint:
    path: /dehydrate/serialize
    method: POST
    data_selector: data
    params: {}
- name: embed_binary_file
  endpoint:
    path: /code/details/embed-a-binary-file-in-an-hl7-message
    method: GET
    data_selector: records
    params: {}
- name: filterHL7
  endpoint:
    path: /code/details/filtering-messages
    method: GET
    data_selector: records
- name: CleanPhoneNumber
  endpoint:
    path: /clean_phone_number
    method: GET
    data_selector: result
    params: {}
- name: report_formatting
  endpoint:
    path: /formatting-a-blob-of-text-data-into-a-single-segment-with-a-repeating-field-or-multiple-segments
    method: GET
- name: hl7_message
  endpoint:
    path: /format/hl7
    method: POST
    data_selector: tabDelimited
    params: {}
- name: patient
  endpoint:
    path: /code/details/insert-data-into-a-database
    method: INSERT
    data_selector: patient
    params: {}
- name: patient
  endpoint:
    path: /merge
    method: POST
    data_selector: data
    params: {}
- name: X12 delimiters
  endpoint:
    path: /normalize-x12-delimiters
    method: GET
    data_selector: Data
- name: dateparse
  endpoint:
    path: dateparse.parse
    method: function
    data_selector: return
    params: {}
- name: node_D
  endpoint:
    path: node.D
    method: function
    data_selector: dateNode:D()
    params: {}
- name: node_T
  endpoint:
    path: node.T
    method: function
    data_selector: dateNode:T()
    params: {}
- name: node_TS
  endpoint:
    path: node.TS
    method: function
    data_selector: dateNode:TS()
    params: {}
- name: patient
  endpoint:
    path: /api/patient
    method: POST
    data_selector: records
    params: {}
- name: patient
  endpoint:
    path: /api/patient
    method: INSERT
    data_selector: patient
    params: {}
- name: test_database
  endpoint:
    path: /create-db
    method: POST
    data_selector: records
    params: {}
- name: Patient
  endpoint:
    path: /Patient
    method: INSERT
    data_selector: records
    params: {}
- name: ProcessPatient
  endpoint:
    path: /ProcessPatient
    method: INSERT
    data_selector: records
    params: {}
- name: patient
  endpoint:
    path: /Patient
    method: SELECT
    data_selector: P.*
    params: {}
- name: process_patient
  endpoint:
    path: /ProcessPatient
    method: UPDATE
    data_selector: Processed
    params: {}
- name: Patient
  endpoint:
    path: /Patient
    method: SELECT
    data_selector: records
    params:
      incremental: Processed
- name: ProcessPatient
  endpoint:
    path: /ProcessPatient
    method: SELECT
    data_selector: records
    params: {}
- name: Mapping HL7 to HL7
  endpoint:
    path: /mapping-messages-hl7-to-hl7
    method: GET
    data_selector: messages
    params: {}
- name: X12 270 Real-Time Extract
  endpoint:
    path: /x12_270_extract
    method: GET
    data_selector: records
- name: X12 270 Real-Time Build
  endpoint:
    path: /x12_270_build
    method: GET
    data_selector: records
- name: X12 Transactions
  endpoint:
    path: /x12/transactions
    method: POST
    data_selector: transactions
    params: {}
- name: parse
  endpoint:
    path: /api/x12/parse
    method: POST
    data_selector: result
    params: {}
- name: generate
  endpoint:
    path: /api/x12/generate
    method: POST
    data_selector: result
    params: {}
notes:
- The API provides various modules for processing data and encryption.
- The return format is subject to change. This is meant to be used for interactive
  querying and debugging.
- The XML module contains one function to parse an XML document into an XML node tree.
- Normally scripts are allowed 5 minutes to run.
- The xml module contains one function to parse an XML document into an XML node tree.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- You can easily add code sets to this module! Simply copy the format of the existing
  tables.
- If an existing code set is incomplete, simply extend it by adding extra values to
  the table.
- Both the numerator and denominator are optional fields. If they are not provided,
  they are replaced by the nullFlavor 'UNK' (meaning 'unknown').
- CDA modules provide a wide variety of functions and lookup tables that you can use
  to build and customize your CDA document.
- This API supports various data types including INT, REAL, and PQ.
- OAuth2 requires setup of connected app in API
- Some API responses may contain null values
- You must enable HTTPS in Settings>HTTP(S) Channels and enter the SSL certificate
  file details (no code changes are required).
- If you select Verify Peer you will also need a Certificate Authority File.
- Iguana only supports OpenSSL SSH-2 private keys and certificates in PEM format,
  these must not be password protected.
- For production systems you will need to get SSL certificates from a Certificate
  Authority.
- In order to enable HTTPS support for use with Iguana, you must first generate valid
  public key/private key certificates.
- You must also obtain a certificate file from a certificate authority (CA), such
  as Verisign, which issues digital certificates for use by other parties.
- This API is very helpful when implementing things like OAuth 1 and 2.
- The adapter uses the simple password based authentication technique.
- It is recommended to avoid saving your passwords in the repository.
- Uses OAuth 1.1 with RSA-SHA signing for authentication
- This example requires Iguana 6.0.3 or above since it uses the built in crypto APIs
  which were included in that release of Iguana.
- The code for this channel uses stores the Twitter login information (consumer_key,
  consumer_secret, access_token, token_secret) in plain text this is not best practice.
- Uses OAuth 2.0 via JWT for authentication
- The /channel_status_data.html?Channel=<channel name> is the only way to get the
  active/idle thread numbers.
- A library of helpful extensions to the standard Lua string library.
- The age module uses dateparse so it accepts most common date formats.
- This module performs basic authentication for incoming HTTP web requests.
- This module uses the splitBatch() function to convert a batch of HL7 messages into
  an array of HL7 messages.
- Optionally you can use batch.convertTerminators() to clean up line terminators.
- Create a codemap table to map one set of codes to another.
- The codemap.set() function uses codemap.map() to create a codemap table with known
  values set to true and a default of false for unknown values.
- This module is designed to parse well-formed CSV data.
- Uses from Translator component to read CSV files.
- Uses merge_null parameter to control whether NULLs are written to the database.
- Requires Iguana 5.5.1 or newer.
- Uses a fuzzy date/time parser to automatically translate a wide variety of date/time
  formats.
- A fuzzy date/time parser that translates a wide variety of date/time formats.
- The module filters out duplicate messages based on MD5 hashes.
- This module allows you to convert messages back and forth between EDI and HL7.
- The message passed to hl7.findSegment() must be parsed into a node tree format using
  hl7.parse{}
- Generates an HL7 message with non-standard delimiters and optionally non-standard
  escape characters.
- Parses an HL7/EDI/X12 message and extracts Z segments which it returns in a Lua
  table.
- Using the "Expanded" mode is safer as it gives consistent results for messages with/without
  sub-fields and repeating fields.
- No authentication is needed to access this page.
- We recommend using the guid to identify a channel, because the guid does not change
  when a channel is renamed.
- Requires administrator privileges for certain operations.
- Some functions have default values for optional parameters.
- Provides programmatic access to various operations that can be performed on Iguana
  channels.
- The LLP module enables the use of LLP connections from any module.
- It is best practice to close the connection every time to avoid overloading the
  remote LLP host.
- Sends MIME-encoded email attachments using the SMTP protocol.
- A wrapper around net.smtp.send.
- This function utilizes an existing Iguana web service API call to resubmit a message
  to a specific channel.
- Retries a function, using the specified number of retries and pause time in seconds.
- If the function throws an error this module logs an informational message containing
  the error details, then it sleeps and then retries the operation after the specified
  'pause' time (in seconds).
- Converts an RTF to plain text removing all formatting in the process.
- Schedule jobs to run at a specified time of day, very useful for batch processing
- Use scheduler.runAt() to run your function at the desired time
- This tutorial was written for Iguana 5 and may contain out of date references.
- This tutorial only addresses transforming message data.
- This tutorial shows you how to use auto-completion.
- The tutorial was originally written for Iguana 5.
- An incorrect code of 'Mix' is used for mixed race, it will be changed to 'Mixed'.
- Requires the use of the stringutil module for capitalizing names.
- The process for transforming other message types follows the same general pattern.
- Code works for MySQL but may not work for other databases
- Create a custom ACK by using a script in an LLP Listener component
- This script automatically creates a SQLite database and then generates the tables
  specified in a VMD.
- You can customize the code by changing the database name or using a different VMD
  file.
- Uses conn:merge{} to update or insert patients.
- Demonstrates how to serialize data (in a Lua table) as JSON, by using json.serialize{}.
- How to dehydrate (serialize) raw XML data, this can be useful for storing in a databases
- The code only works for Windows, but there is an attached project for Mac which
  will probably work on Linux.
- How to filter out unwanted HL7 messages (similar principles apply to other message
  types)
- The process for filtering other message types follows the same general pattern.
- This function formats phone numbers nicely with the area code in brackets.
- To switch between options just set the `UseOneNte` flag to 'true' or 'false'.
- Format specified HL7 message fields in a tab delimited string and push the string
  to the queue for further processing
- 'For example: This code would retry a query to a non-existent table, which is not
  what you want. Best practice is to test for the specific errors you want to retry
  and either log an error or stop the channel.'
- This insert statement will fail and raise an error for any duplicate patient record
- Uses a Filter or To Translator script to map HL7 messages.
- The code shows how to map the whole message or part of the message.
- The SQLite database will be created if it does not exist.
- The Translator X12 module expects standard delimiters to be present when parsing
  message data.
- This code shows how to 'normalize' non-standard delimiters prior to processing.
- Use the fuzzy date/time parser to automatically translate a wide variety of date/time
  formats.
- If your date format is not recognized, you can update the list of formats in the
  module, or pass a one-off format as a second parameter to the dateparse.parse()
  function.
- A fuzzy date/time parser that is very useful for automatically translating a wide
  variety of date/time formats.
- The dateparse.lua module contains a fuzzy date/time parser which parses just about
  any date.
- The code in this tutorial executes an INSERT statement for every message that is
  processed.
- If you attempt to insert duplicate records (with the same patient id) the code will
  produce errors.
- This tutorial only addresses the last step, the preparatory steps have already been
  completed for you.
- If you attempt to insert duplicate patient records (with the same patient-id) this
  code will produce errors.
- The code executes an INSERT statement for every message that is processed. It does
  not check if a record already exists.
- The code in this tutorial executes an UPDATE statement for each message that is
  processed. This means that any new records are effectively ignored, because they
  don’t exist in the database, so there is no record to update.
- Iguana automatically passes the message data to the main() function
- No action is needed to access the message using the Data parameter
- Handles large collections of incoming HL7 data by breaking them into individual
  messages.
- Processing X12 messages is straightforward with provided functions.
- Each person that uses Iguana will be issued with their own individual Iguana User.
- Authentication can be further enhanced by using things like key cards or biometrics
  for physical access and/or logging onto computers.
- All data files should have should have only the minimum access granted to allow
  your users to do their jobs.
- We *strongly recommend* not giving full access to a personal user logon to prevent
  accidental file changes or deletions.
- We recommend regularly reviewing Iguana logs for unauthorized or suspicious access
  to data — things like overuse of administrator, unknown users, or unusual access
  patterns.
- Log files are generated per day and named in YYYYMMDD format.
- Log metafiles and indexes are created daily to optimize performance.
- Files can only be uploaded
- Files cannot be listed
- Files cannot be viewed
- Files cannot be downloaded
- Files cannot be deleted (or overwritten by a file of the same name)
- Channels act like pipelines that direct the flow of your data from one location
  to another.
- The Source component pulls data into the channel and the Destination component pushes
  data out of the channel.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Unable to connect: Iguana unavailable – either not running or no network connection'
- 'Unexpected code from server: 503 response: The remote Iguana HTTPS channel ''<channel
  name>'' is not running.'
- '''('' expected near ''='''
- attempt to perform arithmetic on local 'Cnt' (a nil value)
- 'Error encountered while filtering message: Translator error occurred in module
  ''main'', line 23: nCopy of HL7 message does not match the original'
- This is a leaf node without children.
- attempt to compare nil with string
- attempt to concatenate field '?' (a nil value)
- attempt to call method 'S' (a nil value)
- attempt to concatenate local 'smtp' (a table value)
- 'bad argument #1 to ''sub'' (number expected, got nil)'
- attempt to perform arithmetic on a nil value
- attempt to compare two nil values
- attempt to call method '<function name>' (a nil value)
- attempt to index global '<variable name>' (a nil value)
- '''end'' expected (to close ''function'' at line <line no> near ''<eof>'')'
- '401 Unauthorized: Recheck OAuth credentials'
- '429 Too Many Requests: Throttle your requests'
- '401 Unauthorized: Recheck logon credentials'
- '401 Unauthorized: Recheck User and Password'
- 'Missing parameter: ''api'''
- 'Missing parameter: ''name'''
- 'Missing parameter: ''user'''
- 'Missing parameter: ''password'''
- Merge using this database API is not currently supported.
- '401 Unauthorized: Check username and password.'
- '404 Not Found: Ensure the endpoint exists.'
- '500 Internal Server Error: Check server status.'
- 'not connected: Ensure the connection is established before sending or receiving'
- 'timeout: Increase the timeout value if necessary'
- Parameters url, user, password, refid, channel and message are required.
- Unknown parameter
- The 'func' argument is not a function type, or it is missing (nil).
- '2002: retry *only* for failed connection'
- '2006: retry *only* for failed connection'
- 'Duplicate patient record: Insert statement will fail'
- 'constraint failed: Duplicate patient record'
- 'constraint failed: primary key on the Id (which prevents duplicate patient records
  with the same Id)'
- A constraint failed, which basically means that we are not allowed to insert the
  same patient record twice.
- 'constraint failed: cannot insert duplicate records with the same patient Id'
- ‘)’ expected near ‘=’
- attempt to perform arithmetic on local ‘Cnt’ (a nil value)
- "Error encountered while filtering message:\r\nTranslator error occurred in module\
  \ “main”, line 23:nCopy of HL7 message does not match the original"
- Translator error occurred in module “main”, line 112:nattempt to compare nil with
  string
- Translator error occurred in module “main”, line 123:nattempt to concatenate field
  ‘?’ (a nil value)
- Translator error occurred in module “main”, line 147:nattempt to call method ‘S’
  (a nil value)
- Translator error occurred in module “main”, line 147:nattempt to concatenate local
  ‘smtp’ (a table value)
- 'Translator error occurred in module “main”, line 29:nbad argument #1 to ‘sub’ (number
  expected, got nil)'
- Translator error occurred in module “main”, line 328:nattempt to perform arithmetic
  on a nil value
- Translator error occurred in module “main”, line 432:nattempt to compare two nil
  values
- attempt to call method ‘<function name>’ (a nil value)
- attempt to index global ‘<variable name>’ (a nil value)
- end’ expected (to close ‘function’ at line <line no> near ‘<eof>’
- Files that do not follow our naming convention are difficult for our support staff
  to identify
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - consumer_key
  - consumer_secret
  - iguanaServer
client:
  base_url: http://localhost:6543
  auth:
    type: basic
    location: header
    header_name: Authorization
source_metadata: null
