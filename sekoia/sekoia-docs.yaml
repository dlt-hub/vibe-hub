resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: rules
  endpoint:
    path: /sic/conf/rules-catalog/rules
    method: POST
    data_selector: ''
    params: {}
- name: rules_catalog
  endpoint:
    path: /sic/conf/rules-catalog/rules
    method: GET
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /sic/conf/events/search/jobs/{job_uuid}/events
    method: GET
- name: alerts
  endpoint:
    path: /v1/sic/alerts/{alert_id}
    method: GET
    data_selector: alert
- name: rules
  endpoint:
    path: /sic/conf/rules-catalog/rules
    method: POST
    data_selector: ''
    params: {}
- name: rules_catalog
  endpoint:
    path: /sic/conf/rules-catalog/rules
    method: GET
    data_selector: ''
    params: {}
- name: events
  endpoint:
    path: /sic/conf/events/search/jobs/{job_uuid}/events
    method: GET
- name: community_subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
- name: alerts
  endpoint:
    path: /v1/sic/alerts/{alert_id}
    method: GET
    data_selector: alert
    params:
      stix: 'False'
- name: http_intake
  endpoint:
    path: /api/v1/intake-http
    method: GET
- name: current_subscriptions
  endpoint:
    path: /subscriptions/current
    method: GET
    data_selector: subscriptions
    params: {}
- name: expired_subscriptions
  endpoint:
    path: /subscriptions/expired
    method: GET
    data_selector: subscriptions
    params: {}
- name: FRA1
  endpoint:
    path: /
    method: GET
- name: FRA2
  endpoint:
    path: /api/
    method: GET
- name: EUR1
  endpoint:
    path: /
    method: GET
- name: MCO1
  endpoint:
    path: /api/
    method: GET
- name: UAE1
  endpoint:
    path: /api
    method: GET
- name: USA1
  endpoint:
    path: /api
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Sekoia operates in various European and Middle-Eastern regions. Each region is designed
  to meet specific legal and safety requirements.
- The permissions required for your key depend on what you want to achieve.
- The permissions required for your key depend on what you want to achieve. For accessing
  information from Sekoia.io, read-only permissions are adequate; however, executing
  operations on Sekoia.io necessitates additional write permissions.
- Some objects like Contact may return nulls in deeply nested fields
- API key must have the SIC_READ_INTAKES permission
- Access Sekoia.io data in your application.
- Enable third-party applications to execute actions within Sekoia.io.
- Automate actions and tasks via your own scripts.
- Each email recipient can receive up to 10 emails per hour for each notification
  rule.
- Uses API keys for authentication
- Sekoia API keys are permissions-based, not role-based.
- Trial subscription duration is 45 days.
- API keys are permissions-based, not role-based.
- Plan for trial subscription is Defend Prime.
- No intake should have zero events received in the past 7 days.
- Ensure that notifications are configured to alert in the case of an event drop for
  an intake.
- If Sekoia.io can't maintain WebSocket connections on the browser, the web application
  won't automatically refresh with the new contents and a network connectivity error
  is displayed on top of the application.
- Logs are pushed to Sekoia.io using syslog or HTTPS protocols providing the Intake
  key accordingly, or pulled by API.
- IP for intake.sekoia.io is currently 213.32.5.228.
- Logs are available and displayed for 30 days in Sekoia.io, for standard contracts.
- Logs can be pushed to Sekoia.io using syslog or HTTPS protocols.
- Log retention is available for 30 days in Sekoia.io.
- Users sharing the same VPN exit point will be considered as a single user.
- To send your data to Sekoia.io using the Syslog or Relp protocols, you need to add
  a header to each of your messages.
- Sekoia.io accepts any representation of a datetime.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API key'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key or permissions'
- '403 Forbidden: Insufficient permissions'
- '401 Unauthorized: Cannot create the search job. Authentication failed'
- '403: Insufficient permissions'
- '401 Unauthorized: Authentication failed'
- 'Error Code 429: Indicates rate limiting when too many requests are received in
  a short time.'
- '429: Indicates rate limiting when too many requests are received in a short time.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.sekoia.io
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
