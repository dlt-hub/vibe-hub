resources:
- name: ai_chats
  endpoint:
    path: /api/liveblocks-ai-chats
    method: GET
    data_selector: chats
- name: ai_chat_messages
  endpoint:
    path: /api/liveblocks-ai-chat-messages
    method: GET
    data_selector: messages
- name: register_ai_tool
  endpoint:
    path: /api/register_ai_tool
    method: POST
    data_selector: tool
    params: {}
- name: room_provider
  endpoint:
    path: /api/room_provider
    method: GET
    data_selector: room
    params: {}
- name: presence
  endpoint:
    path: /api/presence
    method: GET
    data_selector: presence
    params: {}
- name: storage
  endpoint:
    path: /api/storage
    method: GET
    data_selector: storage
    params: {}
- name: broadcast
  endpoint:
    path: /api/broadcast
    method: POST
    data_selector: broadcast
    params: {}
- name: threads
  endpoint:
    path: /useThreads
    method: GET
    data_selector: threads
    params: {}
- name: create_thread
  endpoint:
    path: /useCreateThread
    method: POST
    data_selector: thread
    params: {}
- name: delete_thread
  endpoint:
    path: /useDeleteThread
    method: DELETE
    data_selector: response
    params: {}
- name: edit_thread_metadata
  endpoint:
    path: /useEditThreadMetadata
    method: PATCH
    data_selector: response
    params: {}
- name: mark_thread_as_resolved
  endpoint:
    path: /useMarkThreadAsResolved
    method: POST
    data_selector: response
    params: {}
- name: mark_thread_as_unresolved
  endpoint:
    path: /useMarkThreadAsUnresolved
    method: POST
    data_selector: response
    params: {}
- name: mark_thread_as_read
  endpoint:
    path: /useMarkThreadAsRead
    method: POST
    data_selector: response
    params: {}
- name: subscribe_to_thread
  endpoint:
    path: /useSubscribeToThread
    method: POST
    data_selector: response
    params: {}
- name: unsubscribe_from_thread
  endpoint:
    path: /useUnsubscribeFromThread
    method: DELETE
    data_selector: response
    params: {}
- name: create_comment
  endpoint:
    path: /useCreateComment
    method: POST
    data_selector: comment
    params: {}
- name: edit_comment
  endpoint:
    path: /useEditComment
    method: PATCH
    data_selector: comment
    params: {}
- name: delete_comment
  endpoint:
    path: /useDeleteComment
    method: DELETE
    data_selector: response
    params: {}
- name: add_reaction
  endpoint:
    path: /useAddReaction
    method: POST
    data_selector: response
    params: {}
- name: remove_reaction
  endpoint:
    path: /useRemoveReaction
    method: DELETE
    data_selector: response
    params: {}
- name: attachment_url
  endpoint:
    path: /useAttachmentUrl
    method: GET
    data_selector: url
    params: {}
- name: inbox_notifications
  endpoint:
    path: /inbox_notifications
    method: GET
    data_selector: inboxNotifications
- name: unread_inbox_notifications_count
  endpoint:
    path: /unread_inbox_notifications_count
    method: GET
    data_selector: count
- name: mark_inbox_notification_as_read
  endpoint:
    path: /mark_inbox_notification_as_read
    method: POST
    data_selector: markInboxNotificationAsRead
- name: mark_all_inbox_notifications_as_read
  endpoint:
    path: /mark_all_inbox_notifications_as_read
    method: POST
    data_selector: markAllInboxNotificationsAsRead
- name: delete_inbox_notification
  endpoint:
    path: /delete_inbox_notification
    method: DELETE
    data_selector: deleteInboxNotification
- name: delete_all_inbox_notifications
  endpoint:
    path: /delete_all_inbox_notifications
    method: DELETE
    data_selector: deleteAllInboxNotifications
- name: inbox_notification_thread
  endpoint:
    path: /inbox_notification_thread
    method: GET
    data_selector: thread
- name: room_subscription_settings
  endpoint:
    path: /room_subscription_settings
    method: GET
    data_selector: settings
- name: update_room_subscription_settings
  endpoint:
    path: /update_room_subscription_settings
    method: POST
    data_selector: updateSettings
- name: notification_settings
  endpoint:
    path: /notification_settings
    method: GET
    data_selector: settings
- name: update_notification_settings
  endpoint:
    path: /update_notification_settings
    method: POST
    data_selector: updateSettings
- name: history_versions
  endpoint:
    path: /history_versions
    method: GET
    data_selector: versions
- name: user_info
  endpoint:
    path: /user_info
    method: GET
    data_selector: user
- name: room_info
  endpoint:
    path: /room_info
    method: GET
    data_selector: info
- name: comments
  endpoint:
    path: /comments
    method: GET
- name: notifications
  endpoint:
    path: /notifications
    method: GET
- name: multiplayer_editing
  endpoint:
    path: /multiplayer-editing
    method: GET
- name: presence
  endpoint:
    path: /presence
    method: GET
- name: monitoring_dashboard
  endpoint:
    path: /monitoring-dashboard
    method: GET
- name: realtime_infrastructure
  endpoint:
    path: /infrastructure
    method: GET
- name: notification
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: records
- name: comments
  endpoint:
    path: /api/comments
    method: GET
    data_selector: records
- name: ai_copilots
  endpoint:
    path: /ai-copilots
    method: GET
    data_selector: records
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: records
- name: multiplayer_editing
  endpoint:
    path: /multiplayer-editing
    method: GET
    data_selector: records
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: records
- name: presence
  endpoint:
    path: /presence
    method: GET
    data_selector: records
- name: comments
  endpoint:
    path: /api/v1/comments
    method: GET
    data_selector: records
- name: threads
  endpoint:
    path: /threads
    method: GET
    data_selector: threads
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
- name: presence
  endpoint:
    path: /presence
    method: GET
    data_selector: presenceData
- name: multiplayer
  endpoint:
    path: /multiplayer
    method: GET
    data_selector: multiplayerData
- name: multiplayer_editing
  endpoint:
    path: /multiplayer-editing
    method: GET
- name: presence
  endpoint:
    path: /presence
    method: GET
- name: presence
  endpoint:
    path: /presence
    method: POST
- name: multiplayer_editing
  endpoint:
    path: /multiplayer-editing
    method: POST
- name: presence
  endpoint:
    path: /api/v1/presence
    method: GET
    data_selector: data
    params: {}
- name: multiplayer_editing
  endpoint:
    path: /api/v1/multiplayer/editing
    method: GET
    data_selector: data
    params: {}
- name: collaborative_editor
  endpoint:
    path: /api/v1/collaborative_editor
    method: GET
    data_selector: records
- name: customer_personal_data
  endpoint:
    path: /api/v1/customer_personal_data
    method: GET
    data_selector: data
    params: {}
- name: Rooms
  endpoint:
    path: /rooms
    method: GET
- name: Projects
  endpoint:
    path: /projects
    method: GET
- name: rooms
  endpoint:
    path: /v2/rooms
    method: POST
    data_selector: metadata
    params: {}
- name: get_rooms
  endpoint:
    path: /v2/rooms
    method: GET
    data_selector: rooms
    params: {}
- name: documents
  endpoint:
    path: /api/documents
    method: GET
- name: room
  endpoint:
    path: /api/room
    method: GET
    data_selector: roomDetails
    params: {}
- name: enterRoom
  endpoint:
    path: /client/enterRoom
    method: GET
    data_selector: room
    params: {}
- name: getRoom
  endpoint:
    path: /client/getRoom
    method: GET
    data_selector: room
    params: {}
- name: getSyncStatus
  endpoint:
    path: /client/getSyncStatus
    method: GET
    data_selector: syncStatus
    params: {}
- name: logout
  endpoint:
    path: /client/logout
    method: POST
    data_selector: null
    params: {}
- name: updatePresence
  endpoint:
    path: /room/updatePresence
    method: POST
    data_selector: null
    params: {}
- name: getPresence
  endpoint:
    path: /room/getPresence
    method: GET
    data_selector: presence
    params: {}
- name: status
  endpoint:
    path: /Room.subscribe/status
    method: GET
- name: lost-connection
  endpoint:
    path: /Room.subscribe/lost-connection
    method: GET
- name: error
  endpoint:
    path: /Room.subscribe/error
    method: GET
- name: history
  endpoint:
    path: /Room.subscribe/history
    method: GET
- name: storage-status
  endpoint:
    path: /Room.subscribe/storage-status
    method: GET
- name: threads
  endpoint:
    path: /Room.getThreads
    method: GET
- name: Room.updateSubscriptionSettings
  endpoint:
    path: /api-reference/liveblocks-client#Room.updateSubscriptionSettings
    method: POST
    data_selector: settings
    params: {}
- name: Client.getNotificationSettingsBeta
  endpoint:
    path: /api-reference/liveblocks-client#Client.getNotificationSettings
    method: GET
    data_selector: settings
    params: {}
- name: Client.updateNotificationSettingsBeta
  endpoint:
    path: /api-reference/liveblocks-client#Client.updateNotificationSettings
    method: POST
    data_selector: settings
    params: {}
- name: Room.getStorage
  endpoint:
    path: /api-reference/liveblocks-client#Room.getStorage
    method: GET
    data_selector: storage
    params: {}
- name: inbox_notifications
  endpoint:
    path: /getInboxNotifications
    method: GET
    data_selector: inboxNotifications
    params: {}
- name: inbox_notifications_since
  endpoint:
    path: /getInboxNotificationsSince
    method: GET
    data_selector: inboxNotifications
    params:
      since: requestedAt
- name: unread_inbox_notifications_count
  endpoint:
    path: /getUnreadInboxNotificationsCount
    method: GET
    data_selector: count
    params: {}
- name: mark_all_inbox_notifications_as_read
  endpoint:
    path: /markAllInboxNotificationsAsRead
    method: POST
    data_selector: 'null'
    params: {}
- name: mark_inbox_notification_as_read
  endpoint:
    path: /markInboxNotificationAsRead
    method: POST
    data_selector: 'null'
    params:
      inboxNotificationId: in_xxx
- name: delete_all_inbox_notifications
  endpoint:
    path: /deleteAllInboxNotifications
    method: POST
    data_selector: 'null'
    params: {}
- name: delete_inbox_notification
  endpoint:
    path: /deleteInboxNotification
    method: POST
    data_selector: 'null'
    params:
      inboxNotificationId: in_xxx
- name: subscription_settings
  endpoint:
    path: /getSubscriptionSettings
    method: GET
    data_selector: settings
    params: {}
- name: FloatingToolbar
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#FloatingToolbar
    method: GET
    data_selector: records
- name: FloatingComposer
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#FloatingComposer
    method: GET
    data_selector: records
- name: FloatingThreads
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#FloatingThreads
    method: GET
    data_selector: records
- name: liveblocksExtension
  endpoint:
    path: /useLiveblocksExtension
    method: GET
    data_selector: returns
    params: {}
- name: Toolbar
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#Toolbar
    method: GET
- name: FloatingComposer
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#FloatingComposer
    method: GET
- name: AnchoredThreads
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#AnchoredThreads
    method: GET
- name: FloatingThreads
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#FloatingThreads
    method: GET
- name: Toolbar.Button
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#Toolbar.Button
    method: GET
- name: Toolbar.Toggle
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#Toolbar.Toggle
    method: GET
- name: Toolbar.BlockSelector
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#Toolbar.BlockSelector
    method: GET
- name: Toolbar.Separator
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#Toolbar.Separator
    method: GET
- name: Toolbar.SectionHistory
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#Toolbar.SectionHistory
    method: GET
- name: Toolbar.SectionInline
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#Toolbar.SectionInline
    method: GET
- name: Toolbar.SectionCollaboration
  endpoint:
    path: /docs/api-reference/liveblocks-react-tiptap#Toolbar.SectionCollaboration
    method: GET
- name: FloatingComposer
  endpoint:
    path: /docs/api-reference/liveblocks-react-blocknote#FloatingComposer
    method: GET
    data_selector: records
- name: FloatingThreads
  endpoint:
    path: /docs/api-reference/liveblocks-react-blocknote#FloatingThreads
    method: GET
    data_selector: records
- name: withProsemirrorDocument
  endpoint:
    path: /api/withProsemirrorDocument
    method: POST
    data_selector: returns
    params:
      roomId: string
      client: Liveblocks
- name: FloatingToolbar
  endpoint:
    path: /docs/api-reference/liveblocks-react-lexical#FloatingToolbar
    method: GET
    data_selector: toolbar
- name: FloatingComposer
  endpoint:
    path: /docs/api-reference/liveblocks-react-lexical#FloatingComposer
    method: GET
    data_selector: composer
- name: FloatingThreads
  endpoint:
    path: /docs/api-reference/liveblocks-react-lexical#FloatingThreads
    method: GET
    data_selector: threads
- name: LiveblocksPlugin
  endpoint:
    path: /docs/api-reference/liveblocks-react-lexical#LiveblocksPlugin
    method: GET
    data_selector: LiveblocksPlugin
    params: {}
- name: liveblocksConfig
  endpoint:
    path: /docs/api-reference/liveblocks-react-lexical#liveblocksConfig
    method: GET
    data_selector: liveblocksConfig
    params: {}
- name: AnchoredThreads
  endpoint:
    path: /docs/api-reference/liveblocks-react-lexical#AnchoredThreads
    method: GET
    data_selector: threads
    params: {}
- name: HistoryVersionPreview
  endpoint:
    path: /docs/api-reference/liveblocks-react-lexical#HistoryVersionPreview
    method: GET
    data_selector: versionHistory
    params: {}
- name: useIsEditorReady
  endpoint:
    path: /docs/api-reference/liveblocks-react-lexical#useIsEditorReady
    method: GET
    data_selector: editorStatus
    params: {}
- name: useIsThreadActive
  endpoint:
    path: /docs/api-reference/liveblocks-react-lexical#useIsThreadActive
    method: GET
    data_selector: threadStatus
    params: {}
- name: Lexical Document
  endpoint:
    path: /api/lexical/document
    method: POST
    data_selector: document
    params: {}
- name: client
  endpoint:
    path: /api/liveblocks-auth
    method: GET
    data_selector: ''
    params: {}
- name: Awareness.setLocalState
  endpoint:
    path: /api-reference/liveblocks-yjs#Awareness.setLocalState
    method: POST
    data_selector: user
    params: {}
- name: Awareness.setLocalStateField
  endpoint:
    path: /api-reference/liveblocks-yjs#Awareness.setLocalStateField
    method: POST
    data_selector: user
    params: {}
- name: Awareness.getStates
  endpoint:
    path: /api-reference/liveblocks-yjs#Awareness.getStates
    method: GET
    data_selector: states
    params: {}
- name: Awareness.states
  endpoint:
    path: /api-reference/liveblocks-yjs#Awareness.states
    method: GET
    data_selector: states
    params: {}
- name: Awareness.meta
  endpoint:
    path: /api-reference/liveblocks-yjs#Awareness.meta
    method: GET
    data_selector: meta
    params: {}
- name: Awareness.destroy
  endpoint:
    path: /api-reference/liveblocks-yjs#Awareness.destroy
    method: POST
    data_selector: cleanup
    params: {}
- name: Awareness.on.destroyed
  endpoint:
    path: /api-reference/liveblocks-yjs#Awareness.on.destroyed
    method: POST
    data_selector: event_listener
    params: {}
- name: Awareness.off.destroyed
  endpoint:
    path: /api-reference/liveblocks-yjs#Awareness.off.destroyed
    method: POST
    data_selector: event_listener
    params: {}
- name: Awareness.once.destroyed
  endpoint:
    path: /api-reference/liveblocks-yjs#Awareness.once.destroyed
    method: POST
    data_selector: event_listener
    params: {}
- name: Awareness.emit.destroyed
  endpoint:
    path: /api-reference/liveblocks-yjs#Awareness.emit.destroyed
    method: POST
    data_selector: event
    params: {}
- name: rooms
  endpoint:
    path: /getRooms
    method: GET
    data_selector: data
- name: active_users
  endpoint:
    path: /getActiveUsers
    method: GET
    data_selector: data
- name: getRoomSubscriptionSettings
  endpoint:
    path: /rooms/{roomId}/users/{userId}/subscription-settings
    method: GET
    data_selector: threads,textMentions
- name: updateRoomSubscriptionSettings
  endpoint:
    path: /rooms/{roomId}/users/{userId}/subscription-settings
    method: POST
    data_selector: threads,textMentions
- name: deleteRoomSubscriptionSettings
  endpoint:
    path: /rooms/{roomId}/users/{userId}/subscription-settings
    method: DELETE
    data_selector: ''
- name: getUserRoomSubscriptionSettings
  endpoint:
    path: /users/{userId}/room/subscription-settings
    method: GET
    data_selector: subscriptionSettings
- name: storage_document
  endpoint:
    path: /rooms/{roomId}/storage
    method: GET
    data_selector: storage
    params: {}
- name: yjs_document
  endpoint:
    path: /rooms/{roomId}/ydoc
    method: GET
    data_selector: yjs
    params: {}
- name: threads
  endpoint:
    path: /rooms/{roomId}/threads
    method: GET
    data_selector: data
    params: {}
- name: thread
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}
    method: GET
    data_selector: data
    params: {}
- name: create_thread
  endpoint:
    path: /rooms/{roomId}/threads
    method: POST
    data_selector: data
    params: {}
- name: participants
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/participants
    method: GET
    data_selector: data
    params: {}
- name: subscriptions
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/subscriptions
    method: GET
    data_selector: data
    params: {}
- name: inbox_notifications
  endpoint:
    path: /api/inboxNotifications
    method: GET
    data_selector: data
    params:
      userId: steven@example.com
- name: notification_settings
  endpoint:
    path: /api/notificationSettings
    method: GET
    data_selector: settings
    params:
      userId: guillaume@liveblocks.io
- name: text_mention_notification
  endpoint:
    path: /api/notifications/text_mention
    method: POST
    data_selector: valueTextMentionNotificationEmailDataAsHtml
- name: prepareThreadNotificationEmailAsHtml
  endpoint:
    path: /emails/prepare-thread-notification
    method: POST
- name: prepareTextMentionNotificationEmailAsReact
  endpoint:
    path: /emails/prepare-text-mention-notification
    method: POST
- name: authorize-user
  endpoint:
    path: /authorize-user
    method: POST
- name: identify-user
  endpoint:
    path: /identify-user
    method: POST
- name: rooms
  endpoint:
    path: /rooms
    method: GET
- name: rooms
  endpoint:
    path: /rooms
    method: GET
    data_selector: data
    params:
      limit: 20
- name: create_room
  endpoint:
    path: /rooms
    method: POST
    data_selector: data
    params: {}
- name: get_room
  endpoint:
    path: /rooms/{roomId}
    method: GET
    data_selector: data
    params: {}
- name: update_room
  endpoint:
    path: /rooms/{roomId}
    method: POST
    data_selector: data
    params: {}
- name: delete_room
  endpoint:
    path: /rooms/{roomId}
    method: DELETE
    data_selector: data
    params: {}
- name: get_active_users
  endpoint:
    path: /rooms/{roomId}/active_users
    method: GET
    data_selector: data
    params: {}
- name: get_storage
  endpoint:
    path: /rooms/{roomId}/storage
    method: GET
    data_selector: data
    params: {}
- name: initialize_storage
  endpoint:
    path: /rooms/{roomId}/storage
    method: POST
    data_selector: data
    params: {}
- name: delete_storage
  endpoint:
    path: /rooms/{roomId}/storage
    method: DELETE
    data_selector: data
    params: {}
- name: get_yjs_document
  endpoint:
    path: /rooms/{roomId}/ydoc
    method: GET
    data_selector: someYText
- name: send_binary_yjs_update
  endpoint:
    path: /rooms/{roomId}/ydoc
    method: PUT
- name: get_yjs_document_binary_update
  endpoint:
    path: /rooms/{roomId}/ydoc-binary
    method: GET
- name: create_schema
  endpoint:
    path: /schemas
    method: POST
- name: get_schema
  endpoint:
    path: /schemas/{id}
    method: GET
- name: update_schema
  endpoint:
    path: /schemas/{id}
    method: PUT
- name: delete_schema
  endpoint:
    path: /schemas/{id}
    method: DELETE
- name: get_schema_by_room_id
  endpoint:
    path: /rooms/{roomId}/schema
    method: GET
- name: attach_schema_to_room
  endpoint:
    path: /rooms/{roomId}/schema
    method: POST
- name: detach_schema_from_room
  endpoint:
    path: /rooms/{roomId}/schema
    method: DELETE
- name: get_room_threads
  endpoint:
    path: /rooms/{roomId}/threads
    method: GET
- name: create_thread
  endpoint:
    path: /rooms/{roomId}/threads
    method: POST
- name: get_thread
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}
    method: GET
- name: delete_thread
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}
    method: DELETE
- name: get_thread_participants
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/participants
    method: GET
- name: edit_thread_metadata
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/metadata
    method: POST
- name: mark_thread_as_resolved
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/mark-as-resolved
    method: POST
- name: mark_thread_as_unresolved
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/mark-as-unresolved
    method: POST
- name: subscribe_to_thread
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/subscribe
    method: POST
- name: authorize_room
  endpoint:
    path: /v2/rooms/{roomId}/authorize
    method: POST
    data_selector: token
- name: public_authorize_room
  endpoint:
    path: /v2/rooms/{roomId}/public/authorize
    method: POST
    data_selector: token
- name: get_notification_settings
  endpoint:
    path: /v2/rooms/{roomId}/users/{userId}/notification-settings
    method: GET
    data_selector: threads
- name: update_notification_settings
  endpoint:
    path: /v2/rooms/{roomId}/users/{userId}/notification-settings
    method: POST
- name: delete_notification_settings
  endpoint:
    path: /v2/rooms/{roomId}/users/{userId}/notification-settings
    method: DELETE
- name: unsubscribe_thread
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/unsubscribe
    method: POST
- name: get_thread_subscriptions
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/subscriptions
    method: GET
- name: create_comment
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/comments
    method: POST
- name: get_comment
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/comments/{commentId}
    method: GET
- name: edit_comment
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/comments/{commentId}
    method: POST
- name: delete_comment
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/comments/{commentId}
    method: DELETE
- name: add_comment_reaction
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/comments/{commentId}/add-reaction
    method: POST
- name: remove_comment_reaction
  endpoint:
    path: /rooms/{roomId}/threads/{threadId}/comments/{commentId}/remove-reaction
    method: POST
- name: get_inbox_notification
  endpoint:
    path: /users/{userId}/inbox-notifications/{inboxNotificationId}
    method: GET
- name: delete_inbox_notification
  endpoint:
    path: /users/{userId}/inbox-notifications/{inboxNotificationId}
    method: DELETE
- name: get_all_inbox_notifications
  endpoint:
    path: /users/{userId}/inbox-notifications
    method: GET
- name: get_notification_settings
  endpoint:
    path: /users/{userId}/notification-settings
    method: GET
- name: update_notification_settings
  endpoint:
    path: /users/{userId}/notification-settings
    method: POST
- name: delete_notification_settings
  endpoint:
    path: /users/{userId}/notification-settings
    method: DELETE
- name: get_room_subscription_settings
  endpoint:
    path: /rooms/{roomId}/users/{userId}/subscription-settings
    method: GET
- name: update_room_subscription_settings
  endpoint:
    path: /rooms/{roomId}/users/{userId}/subscription-settings
    method: POST
- name: delete_room_subscription_settings
  endpoint:
    path: /rooms/{roomId}/users/{userId}/subscription-settings
    method: DELETE
- name: get_user_room_subscription_settings
  endpoint:
    path: /users/{userId}/room-subscription-settings
    method: GET
- name: trigger_inbox_notification
  endpoint:
    path: /inbox-notifications/trigger
    method: POST
- name: emoji_picker
  endpoint:
    path: /r/emoji-picker
    method: GET
    data_selector: emojis
- name: Collaborative Text Editor
  endpoint:
    path: /examples/collaborative-text-editor
    method: GET
- name: todos
  endpoint:
    path: /api/todos
    method: GET
    data_selector: todos
    params: {}
- name: create-support-ticket-button
  endpoint:
    path: /api/support/ticket
    method: POST
    data_selector: data
- name: how-to-change-email
  endpoint:
    path: /api/change-email/guide
    method: GET
    data_selector: guide
- name: avatar_stack
  endpoint:
    path: /examples/live-avatar-stack
    method: GET
    data_selector: data
- name: notification_settings
  endpoint:
    path: /api/notifications/settings
    method: GET
    data_selector: settings
- name: email_notification
  endpoint:
    path: /api/liveblocks-notifications
    method: POST
- name: liveblocks_notifications
  endpoint:
    path: /api/liveblocks-notifications
    method: POST
- name: rooms
  endpoint:
    path: /api/rooms
    method: POST
- name: threads
  endpoint:
    path: /api/rooms/{roomId}/threads
    method: POST
- name: comments
  endpoint:
    path: /api/rooms/{roomId}/threads/{threadId}/comments
    method: POST
- name: reactions
  endpoint:
    path: /api/rooms/{roomId}/threads/{threadId}/comments/{commentId}/reactions
    method: POST
- name: webhook
  endpoint:
    path: /api/liveblocks-notifications
    method: POST
- name: liveblocks_notifications
  endpoint:
    path: /api/liveblocks-notifications
    method: POST
- name: threads
  endpoint:
    path: /v2/rooms/{roomId}/threads
    method: GET
    data_selector: threads
    params:
      query: metadata['status']:'open' AND metadata['priority']:3
- name: liveblocks_webhook
  endpoint:
    path: /api/liveblocks-webhook
    method: POST
    data_selector: body
    params: {}
- name: webhook
  endpoint:
    path: /api/liveblocks-webhook
    method: POST
notes:
- Either authEndpoint or publicApiKey are required.
- Using publicApiKey is generally not recommended for production use.
- Tools allow AI to autonomously run actions, render custom components, and show confirmation
  or human-in-the-loop UIs within the chat.
- Some objects like Contact may return nulls in deeply nested fields
- Pagination for inbox notifications supports fetching more items.
- Uses OAuth2 with refresh token — requires setup of connected app in Liveblocks
- Some objects may return nulls in deeply nested fields
- Liveblocks supports HIPAA compliance for enterprise customers.
- Zero configuration — Scale to millions. No complex configuration required.
- Rock‑solid security
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Requires setup of connected app in API
- Each chat is stored permanently, and is identified by its unique chatId.
- Chats are only visible to the authenticated user who created the chat.
- Requires setup of API key in Liveblocks dashboard
- Requires setup of OAuth2 client for authentication
- Endpoint paths and methods may vary based on the version
- Liveblocks may suspend or terminate your account for any reason, including for lack
  of use or violations of the Terms of Service.
- You may be required to register with Liveblocks or provide information about yourself
  (e.g., name and email address) in order to access and use certain features of the
  Service.
- Public key is only for prototyping and landing pages
- We don’t recommend using your public API key in production
- Access token authentication allows you to handle permissions yourself.
- ID token authentication allows Liveblocks to handle permissions for you.
- Liveblocks provides customizable pre-built features for human and AI collaboration.
- Liveblocks provides a permanent, realtime data store for your collaborative state.
- Metadata can be used within a number of other APIs.
- Our DevTools is currently only available if you are on Liveblocks 1.0 or later.
- Uses NextAuth.js for authentication
- Only for development
- Don’t insert a secret key from your product application, as AI will have direct
  access to modify it.
- Status is a low-level API that exposes the WebSocket’s connectivity status.
- Lost connections events allows you to build high-quality UIs by warning your users.
- 'Storage provides three different conflict-free data structures: LiveObject, LiveList,
  and LiveMap.'
- Pass your Tiptap editor to use the component.
- Each part of our default toolbar is available as blocks which can be slotted together.
- Returns the value you return from the `api` callback.
- The HistoryVersionPreview component is in private beta.
- Requires setup of Liveblocks account and API keys.
- Not recommended to use LiveblocksYjsProvider directly
- The provider is automatically cleaned up when the room is destroyed
- Uses OAuth2 with refresh token — requires setup of connected app in liveblocks
- Some operations may disconnect active users from the room
- Requires setup of OAuth2 for authentication
- Thread IDs and Room IDs are necessary for most endpoints
- Uses API key for authentication.
- '@liveblocks/emails requires the @liveblocks/node package to be installed and for
  react to be a peer dependency in your project.'
- Returns null if the text mention does not exist anymore or has already been read.
- Uses API keys for authentication.
- The emoji picker component was originally created for the Liveblocks Comments default
  components.
- Chat data is deleted by the user or client calling useDeleteAiChat.
- Comment data persists until the room is deleted with deleteRoom or Delete Room REST
  API.
- A project’s environment cannot be changed later.
- Webhook events are triggered 30 minutes after an activity occurs
- The generated URL can be placed directly into the Liveblocks webhooks dashboard
  for testing.
- This approach is particularly useful in enterprise environments where tools like
  localtunnel or ngrok may be blocked by security policies.
- Your endpoint must return a `2xx` (status code `200-299`) to indicate that the event
  was successfully received.
- If all events fail to be delivered to your endpoint for 5 consecutive days, your
  endpoint will automatically be disabled.
- No credit card required for a fully-featured development environment
- Both plans include our first day free policy, meaning you’ll only be charged for
  users who come back after their first visit.
- The Pro plan comes with a free, fully-featured, development environment, allowing
  you to prototype Liveblocks applications before making a purchase.
- To get started with AI Copilots, book a demo with our team.
- Create the LIVEBLOCKS_SECRET_KEY environment variable as a secret
- Chats are stored permanently, and multiple can be created.
- View a history or switch between different chats.
- Create an account on liveblocks.io
- Copy your secret key from the dashboard
- Each user is anonymous until authentication is added.
- Each user is anonymous—the next step is to authenticate each user as they connect,
  and attach their name and avatar to their comments.
- Users will also be able to see who see each other’s cursors in the document.
- Create an account on liveblocks.io to access the API key.
- Create an `.env.local` file and add your **public** key as the `NEXT_PUBLIC_LIVEBLOCKS_PUBLIC_KEY`
  environment variable.
- Copy your public key from the dashboard
- Requires setup of public API key from the Liveblocks dashboard
- Create an `.env.local` file and add your secret key from https://liveblocks.io/dashboard/apikeys
  as the `LIVEBLOCKS_SECRET_KEY` environment variable.
- Add your public key from the dashboard as the NEXT_PUBLIC_LIVEBLOCKS_PUBLIC_KEY
  secret.
- Supports ticket creation through an email form.
- Copy your secret key from the liveblocks.io dashboard
- Requires setup of account on liveblocks.io and usage of secret key.
- Create an account on liveblocks.io and copy your secret key from the dashboard.
- Uses API key for authentication — requires setup of environment variable LIVEBLOCKS_SECRET_KEY
- You need to set up webhooks to make this example run.
- You need your own Resend API key to send the emails.
- 'IMPORTANT: LICENSE REQUIRED to remove the watermark'
- To purchase a business license and remove the watermark, contact sales@tldraw.com
- Users can choose notification preferences individually on channels like email and
  Slack.
- Email notifications are built around the concept of inbox notifications, which can
  group multiple activities together.
- Make sure to read the sections on permissions under access tokens or ID tokens.
- Before publishing your notification settings change, you’ll most likely wish to
  check for channel and kind in your webhook endpoint, and handle it accordingly.
- Email notifications can group multiple activities together to avoid flooding users
  with too many emails.
- Set up webhooks for notifications
- Use your own Resend API key to send emails
- Requires setup of webhook for notifications
- Must set up Resend API key to send emails
- Add your webhook secret key from a project's webhooks dashboard
- Add your secret key from a project's API keys dashboard
errors:
- 'Error loading inbox notifications: {error.message}'
- 'Error loading more inbox notifications: {fetchMoreError.message}'
- 'Error loading notification settings: {error.message}'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your API key'
- '429 Too Many Requests: Throttle your requests'
- '401 Unauthorized: Check your OAuth2 token'
- '404 Not Found: Ensure the endpoint path is correct'
- '429 Too Many Requests: Throttle your API calls'
- 'Authentication error: -1'
- 'Could not connect because you don’t have access to this room: 4001'
- 'Could not connect because room was full: 4005'
- 'The room ID has changed: 4006'
- 'ROOM_NOT_FOUND: The specified room does not exist'
- 'INVALID_SCHEMA: The schema does not match the current storage structure'
- '404 Not Found: Room or thread does not exist'
- '400 Bad Request: Invalid request parameters'
- '401 Unauthorized: Invalid or expired access token'
- '404 Not Found: Check if the resource exists.'
- '400 Bad Request: Verify the request parameters.'
- If your service is unreachable, message retries are automatically re-attempted.
- If your service incurs considerable downtime (over 8 hours), you can replay individual
  messages.
- Liveblocks returns a different error for each limit that a user might reach.
- 'Missing API key: Check your environment variable `LIVEBLOCKS_SECRET_KEY`.'
- '401 Unauthorized: Recheck API key'
auth_info:
  mentioned_objects:
  - OAuth2
  - Client
  - OauthToken
  - AuthProvider
  - NamedCredential
  - User
  - Room
  - Thread
  - LIVEBLOCKS_WEBHOOK_SECRET_KEY
  - RESEND_API_KEY
  - LIVEBLOCKS_SECRET_KEY
client:
  base_url: https://liveblocks.io
  auth:
    type: oauth2
source_metadata: null
