resources:
- name: alert
  endpoint:
    path: /POSTAlert/YOUR ENDPOINT/nagios
    method: POST
    data_selector: response
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: User Profile
  endpoint:
    path: /my-user-profile
    method: GET
    data_selector: user_details
    params: {}
- name: Account Time Zone
  endpoint:
    path: /account/timezone
    method: GET
    data_selector: account_timezone
    params: {}
- name: User Time Zone
  endpoint:
    path: /user/timezone
    method: GET
    data_selector: user_timezone
    params: {}
- name: Schedule Time Zone
  endpoint:
    path: /schedule/timezone
    method: GET
    data_selector: schedule_timezone
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: App Administration
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Audit Trail
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Billing Administration
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Export Users and Groups
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Groups Administration
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Import Users and Groups
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Integrations Administration
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Messages
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Postmortem
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Reports
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Security Administration
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Services
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: UserAPIKey
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Users Administration
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: import_users
  endpoint:
    path: /api/v1/users/import
    method: POST
    data_selector: imported_users
    params: {}
- name: export_users
  endpoint:
    path: /api/v1/users/export
    method: GET
    data_selector: exported_users
    params: {}
- name: group
  endpoint:
    path: /groups
    method: POST
    data_selector: group_import
    params: {}
- name: group_member
  endpoint:
    path: /group_members
    method: POST
    data_selector: group_member_import
    params: {}
- name: group
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: group_members
  endpoint:
    path: /api/v1/groups/members
    method: GET
    data_selector: members
    params: {}
- name: groups_export
  endpoint:
    path: /groups/export
    method: GET
- name: group_members_export
  endpoint:
    path: /group_members/export
    method: GET
- name: Member Roles
  endpoint:
    path: /docs/group-member-roles
    method: GET
    data_selector: roles
    params: {}
- name: Out of Office Set Up
  endpoint:
    path: /out-of-office-setup
    method: GET
    data_selector: records
- name: escalation_policy
  endpoint:
    path: /escalation_policies
    method: POST
    data_selector: data
    params: {}
- name: pre_built_escalation_policies
  endpoint:
    path: /docs/pre-built-escalation-policies
    method: GET
    data_selector: policies
    params: {}
- name: escalation_policy
  endpoint:
    path: /escalation-policy
    method: GET
    data_selector: escalationPolicies
    params: {}
- name: User Settings
  endpoint:
    path: /user-settings
    method: GET
    data_selector: user_settings
    params: {}
- name: Centralized Settings
  endpoint:
    path: /centralized-settings
    method: GET
    data_selector: centralized_settings
    params: {}
- name: SLA Management
  endpoint:
    path: /api/slas
    method: GET
    data_selector: slas
    params: {}
- name: Loop Trigger Workflow
  endpoint:
    path: /configuration/workflows
    method: POST
    data_selector: workflow
    params:
      type: Alert
      alert_type: Standard Alert
      name: Loop Trigger Workflow
      recurrence_interval: 12
      start_conditions:
        alert_status: Open
        time_from_beginning: 11
      stop_conditions:
        alert_status: Closed
      action:
        type: SendMessage
        escalation_policy: Looping Escalation Policy
- name: alerts
  endpoint:
    path: /inbound/alerts
    method: POST
    data_selector: alert_specific_information
- name: inbound_integration
  endpoint:
    path: /api/inbound_integration
    method: POST
    data_selector: data
    params: {}
- name: outbound_integration
  endpoint:
    path: /api/outbound_integration
    method: POST
    data_selector: data
    params: {}
- name: Email Integration
  endpoint:
    path: /integrations/email
    method: POST
    data_selector: data
    params: {}
- name: alert
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: data^essentials^monitorCondition
    params: {}
- name: AlertOps Integration
  endpoint:
    path: /api/integration/alertops
    method: POST
- name: create_jira_servicedesk_issue
  endpoint:
    path: /rest/servicedeskapi/request
    method: POST
    data_selector: issueId
    params:
      serviceDeskId: YourServiceDeskID
      requestTypeId: '15'
      requestFieldValues:
        summary: <>
- name: assign_jira_servicedesk_issue
  endpoint:
    path: /rest/api/latest/issue/*<>*
    method: PUT
    data_selector: issueId
    params:
      fields:
        assignee:
          accountId: 5e4599a9924db10e74b76bee
- name: resolve_jira_servicedesk_issue
  endpoint:
    path: /rest/api/latest/issue/<>/transitions
    method: PUT
    data_selector: issueId
    params:
      transition:
        id: '111'
- name: inbound_integration
  endpoint:
    path: /api/inbound_integration
    method: POST
    data_selector: alert
    params: {}
- name: Webhook
  endpoint:
    path: /api/integration/webhook
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /alerts
    method: POST
    data_selector: alert_specific_information
- name: alert
  endpoint:
    path: /webhook/alert
    method: POST
    data_selector: alert
    params: {}
- name: inbound_integration
  endpoint:
    path: /api/inbound_integration
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /inbound/alerts
    method: POST
    data_selector: alertSpecificInformation
- name: inbound_integration
  endpoint:
    path: /api/inbound/integration
    method: POST
    data_selector: alert
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: CloudTrail
  endpoint:
    path: /services/data/vXX.X/sobjects/CloudTrail
    method: GET
    data_selector: records
    params: {}
- name: AlertOps Integration
  endpoint:
    path: /api/integration
    method: POST
    data_selector: alert
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: alerts
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: AlertOps Integration
  endpoint:
    path: /Configuration/Integrations/Add API Integration
    method: POST
    data_selector: integrationDetails
    params: {}
- name: inbound_alert
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: triggerOutput
    params: {}
- name: alerts
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alerts
    params: {}
- name: Webhook Integration
  endpoint:
    path: /integrations/webhook
    method: POST
    data_selector: alert_specific_information
- name: alert
  endpoint:
    path: /services/data/vXX.X/alerts
    method: POST
    data_selector: payload
    params: {}
- name: inbound_integration
  endpoint:
    path: /api/inbound_integration
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /inbound
    method: POST
    data_selector: alert
    params: {}
- name: Create Incident
  endpoint:
    path: /api/incident/create
    method: POST
    data_selector: response
    params: {}
- name: Resolve Incident
  endpoint:
    path: /api/incident/resolve
    method: POST
    data_selector: response
    params: {}
- name: Add Journal Note
  endpoint:
    path: /api/journal/add
    method: POST
    data_selector: response
    params: {}
- name: alerts
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /api/alert
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
    params: {}
- name: AlertOps Inbound Integration
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
    params: {}
- name: webhook-notifier
  endpoint:
    path: /environments/environment/alarms/alarm-handlers/alarm-handler
    method: POST
    data_selector: alert_specific_information
- name: alerts
  endpoint:
    path: /alerts
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /projects/{project_id}/errors
    method: POST
    data_selector: alert
- name: AlertOps Inbound Integration
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: alerts
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /inbound/alerts
    method: POST
    data_selector: alert
    params: {}
- name: alert_integration
  endpoint:
    path: /api/integration
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: Incident
    params: {}
- name: actions
  endpoint:
    path: /Path to /your /Elastic integration
    method: POST
    data_selector: ctx
    params: {}
- name: alerts
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/v2/alerts
    method: POST
    data_selector: alerts
    params: {}
- name: Create Ticket
  endpoint:
    path: /helpdesk/tickets.json
    method: POST
    data_selector: helpdesk_ticket
- name: Close Ticket
  endpoint:
    path: /helpdesk/tickets/<>.json
    method: PIT
- name: Assign Ticket
  endpoint:
    path: /helpdesk/tickets/<>/conversations/note.json
    method: POST
- name: Add Note
  endpoint:
    path: /helpdesk/tickets/<>/conversations/note.json
    method: POST
- name: Create Ticket
  endpoint:
    path: /helpdesk/tickets.json
    method: POST
    data_selector: helpdesk_ticket
- name: Close Ticket
  endpoint:
    path: /helpdesk/tickets/<<MessageThread.SourceIdentifier>>.json
    method: PIT
- name: Assign Ticket
  endpoint:
    path: /helpdesk/tickets/<<MessageThread.SourceIdentifier>>/conversations/note.json
    method: POST
- name: Add Note
  endpoint:
    path: /helpdesk/tickets/<<MessageThread.SourceIdentifier>>/conversations/note.json
    method: POST
- name: alert
  endpoint:
    path: /api/v1/alerts
    method: POST
    data_selector: alert
    params: {}
- name: inbound_integration
  endpoint:
    path: /api/inbound_integration
    method: POST
    data_selector: inbound_messages
- name: flic_alerts
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: inbound_integration
  endpoint:
    path: /api/inbound_integration
    method: POST
    data_selector: alert_specific_information
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: alert
  endpoint:
    path: /webhooks
    method: POST
- name: alert
  endpoint:
    path: /inbound
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /v1/alerts
    method: GET
    data_selector: data
- name: integrations
  endpoint:
    path: /v1/integrations
    method: GET
    data_selector: data
- name: inbound_alert
  endpoint:
    path: /api/inbound_alert
    method: POST
    data_selector: alert
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params:
      incremental: updated_at
- name: issues
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params: {}
- name: alert
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: logs
  endpoint:
    path: /api/logs
    method: GET
    data_selector: records
    params: {}
- name: AlertOps Inbound Integration
  endpoint:
    path: /api/integration/graylog
    method: POST
    data_selector: alert_specific_information
    params: {}
- name: inbound_integration
  endpoint:
    path: /api/integration/haloitsm
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /inbound
    method: POST
    data_selector: alerts
    params: {}
- name: AlertOps Integration
  endpoint:
    path: /api/integrations/honeybadger
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /inbound/alert
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /v1/alerts
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: POST
    data_selector: alerts
    params: {}
- name: Icinga2 Hosts
  endpoint:
    path: /api/v1/icinga2/hosts
    method: POST
    data_selector: alerts
    params:
      IncidentStatus: DOWN
- name: Icinga2 Services
  endpoint:
    path: /api/v1/icinga2/services
    method: POST
    data_selector: alerts
    params:
      IncidentStatus: CRITICAL
- name: alerts
  endpoint:
    path: /alerts
    method: POST
    data_selector: alert
    params: {}
- name: inbound_integration
  endpoint:
    path: /api/integration
    method: POST
    data_selector: alert
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: resource_name
  endpoint:
    path: /api/resource/path
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: event
  endpoint:
    path: /events
    method: POST
- name: alert_channel
  endpoint:
    path: /alert_channels
    method: POST
- name: alert
  endpoint:
    path: /alerts
    method: POST
- name: alert_open
  endpoint:
    path: /alert/open
    method: GET
    data_selector: alert
    params: {}
- name: alert_close
  endpoint:
    path: /alert/close
    method: GET
    data_selector: alert
    params: {}
- name: inbound_alerts
  endpoint:
    path: /api/inbound_alerts
    method: POST
    data_selector: alert
    params:
      systemLabel: alarm-high/alarm-medium
- name: Email Integration
  endpoint:
    path: /path/to/email/integration
    method: POST
    data_selector: alert
    params: {}
- name: create_ticket
  endpoint:
    path: /ATServicesRest/v1.0/Tickets
    method: POST
    data_selector: item
    params: {}
- name: get_user_role_id
  endpoint:
    path: /ATServicesRest/v1.0/Resources/<<Alert.OwnerExternalID>>
    method: GET
    data_selector: item
    params: {}
- name: update_assign_ticket
  endpoint:
    path: /ATServicesRest/v1.0/Tickets
    method: PATCH
    data_selector: item
    params: {}
- name: close_ticket
  endpoint:
    path: /ATServicesRest/v1.0/Tickets
    method: PATCH
    data_selector: item
    params: {}
- name: add_note_to_ticket
  endpoint:
    path: /ATServicesRest/v1.0/Tickets/<<Attribute.TicketID>>/Notes
    method: POST
    data_selector: item
    params: {}
- name: alert
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
    params: {}
- name: ticket
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: tickets
    params: {}
- name: AlertOps Inbound Integration
  endpoint:
    path: /api/inbound-integration
    method: POST
    data_selector: alert
    params: {}
- name: issue
  endpoint:
    path: /rest/api/2/issue
    method: POST
    data_selector: fields
- name: transition_issue
  endpoint:
    path: /rest/api/2/issue/<<Attribute.JIRAIssueKey>>/transitions
    method: POST
    data_selector: transition
- name: assign_issue
  endpoint:
    path: /rest/api/2/issue/<<Attribute.JIRAIssueKey>>/assignee
    method: PUT
    data_selector: accountId
- name: add_issue_comment
  endpoint:
    path: /rest/api/2/issue/<<Attribute.JIRAIssueKey>>/comment
    method: POST
    data_selector: body
- name: inbound_integration
  endpoint:
    path: /inbound/integration
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /path/to/alert/endpoint
    method: POST
    data_selector: alert_specific_information
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: alert
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alerts
    params: {}
- name: alert
  endpoint:
    path: /api/integration/alertops
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
    params: {}
- name: inbound_integration
  endpoint:
    path: /api/integrations/logrocket
    method: POST
    data_selector: alert
    params: {}
- name: monitors
  endpoint:
    path: /api/v1/monitors
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: alert_data
  endpoint:
    path: /api/v1/alert
    method: POST
    data_selector: alert
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: alerts
  endpoint:
    path: /integration/alerts
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: inbound_messages
  endpoint:
    path: /inbound/messages
    method: POST
    data_selector: alert
    params: {}
- name: webhook
  endpoint:
    path: /api/integration/manageengine
    method: POST
    data_selector: alert
    params: {}
- name: web_api_integration
  endpoint:
    path: /webapi/integration
    method: POST
- name: add_request
  endpoint:
    path: /api/json/request
    method: POST
    data_selector: operation.result
    params:
      scope: sdpodapi
      authtoken: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      OPERATION_NAME: ADD_REQUEST
      INPUT_DATA:
        operation:
          Details:
            SUBJECT: MessageThread.Description
            REQUESTTEMPLATE: Default Request
            PRIORITY: High
            LEVEL: Tier 1
            IMPACT: Affects Network
            URGENCY: High
            DESCRIPTION: Message.MessageText
            GROUP: MessageThread.Topic
            UDF_CHAR1: Test
            UDF_LONG1: '1001'
            UDF_DATE1: '90080098767654'
- name: edit_request
  endpoint:
    path: /api/json/request/[MessageThread.SourceIdentifier]
    method: POST
    data_selector: operation.result
    params:
      scope: sdpodapi
      authtoken: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      OPERATION_NAME: EDIT_REQUEST
      INPUT_DATA:
        operation:
          Details:
            TECHNICIAN: MessageThread.OwnerName
- name: close_request
  endpoint:
    path: /api/json/request/[MessageThread.SourceIdentifier]
    method: POST
    data_selector: operation.result
    params:
      scope: sdpodapi
      authtoken: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      OPERATION_NAME: CLOSE_REQUEST
      INPUT_DATA:
        operation:
          Details:
            CLOSEACCEPTED: 'YES'
            CLOSECOMMENT: MessageThread.Resolution
- name: alert
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: inbound_integration
  endpoint:
    path: /api/inbound_integrations
    method: POST
    data_selector: integration
    params: {}
- name: outbound_webhook
  endpoint:
    path: /api/outbound_webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: SCOM Notification Channel
  endpoint:
    path: /api/scom/notification
    method: POST
    data_selector: notification
    params: {}
- name: inbound_messages
  endpoint:
    path: /api/v1/inbound_messages
    method: GET
    data_selector: messages
    params: {}
- name: alerts
  endpoint:
    path: /inbound/alerts
    method: POST
    data_selector: alerts
- name: alerts
  endpoint:
    path: /RESTAPI.svc/SubmitAlertGet
    method: GET
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alerts
    params:
      IncidentStatus: Opened
- name: RapidSpike Alerts
  endpoint:
    path: /inbound-rapidspike
    method: POST
    data_selector: alerts
    params: {}
- name: Quickbase Alerts
  endpoint:
    path: /inbound-quickbase
    method: POST
    data_selector: alerts
    params: {}
- name: alert
  endpoint:
    path: /api/integration/alert
    method: POST
- name: alert
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
    params:
      status: ALERT
- name: inbound_alerts
  endpoint:
    path: /alert/inbound
    method: POST
    data_selector: alerts
- name: alerts
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
    params: {}
- name: incident
  endpoint:
    path: /api/integration/incidents
    method: POST
    data_selector: incident
    params:
      status: outage event
- name: incident
  endpoint:
    path: /api/v1/incidents
    method: POST
    data_selector: incidentStatus
    params: {}
- name: alert
  endpoint:
    path: /webhooks
    method: POST
    data_selector: alert_specific_information
    params: {}
- name: alerts
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alerts
    params: {}
- name: alert
  endpoint:
    path: /api/v1/alerts
    method: POST
    data_selector: alerts
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: inbound_integration
  endpoint:
    path: /api/integration
    method: POST
    data_selector: alert
    params: {}
- name: InboundIntegration
  endpoint:
    path: /api/integration/pulsetic
    method: POST
    data_selector: alert_specific_information
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /services/data/vXX.X/sobjects/Webhook
    method: POST
    data_selector: records
- name: alert
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
    params: {}
- name: inbound_integration
  endpoint:
    path: /api/integration/radio_mast
    method: POST
    data_selector: alert_specific_information
    params: {}
- name: alert
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /api/integrations/raygun
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /inbound-integration
    method: POST
    data_selector: alert
    params: {}
- name: webhook_notification
  endpoint:
    path: /api/integrations/resmo
    method: POST
    data_selector: alert_specific_information
    params: {}
- name: test
  endpoint:
    path: /v1/tests
    method: GET
    data_selector: tests
    params: {}
- name: alert
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: incident
    params:
      status: fail
- name: alert
  endpoint:
    path: /api/integration
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/integration/alerts
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /inbound_alerts
    method: POST
    data_selector: alert
    params: {}
- name: notifications
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /api/integration
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /v1/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: notifications
  endpoint:
    path: /v1/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: alerts
  endpoint:
    path: /api/integration/alerts
    method: POST
    data_selector: alerts
    params: {}
- name: alert
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: webhook-trigger
  endpoint:
    path: /RESTAPI.svc/POSTAlertV2/generic/xxxxxxxxx/Scalyr/Scalyr/subject/id/status/none/link/subject/subject/none
    method: POST
    data_selector: none
    params: {}
- name: webhook-resolve
  endpoint:
    path: /RESTAPI.svc/POSTAlertV2/generic/xxxxxxxxx/Scalyr/Scalyr/subject/id/status/none/link/subject/subject/none
    method: POST
    data_selector: none
    params: {}
- name: alerts
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alerts
    params: {}
- name: messages
  endpoint:
    path: /api/chat.postMessage
    method: POST
    data_selector: message
    params: {}
- name: channels
  endpoint:
    path: /api/conversations.list
    method: GET
    data_selector: channels
    params: {}
- name: Slack Group Contact
  endpoint:
    path: /incoming-webhooks
    method: POST
    data_selector: message
    params: {}
- name: alert
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: Alert
    params: {}
- name: incident_alert
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: Incident
  endpoint:
    path: /api/now/table/incident
    method: POST
    data_selector: result
- name: incident
  endpoint:
    path: /api/integration/alertops
    method: POST
    data_selector: alert
    params: {}
- name: Create Incident
  endpoint:
    path: /api/now/table/incident
    method: POST
    data_selector: result
    params: {}
- name: Close Incident
  endpoint:
    path: /api/now/v1/table/incident/
    method: PUT
    data_selector: result
    params: {}
- name: Assignment
  endpoint:
    path: /api/now/v1/table/incident/
    method: PUT
    data_selector: result
    params: {}
- name: Generic PUT
  endpoint:
    path: /api/now/v1/table/incident/
    method: PUT
    data_selector: result
    params: {}
- name: case
  endpoint:
    path: /services/data/vXX.X/sobjects/Case
    method: GET
    data_selector: records
    params: {}
- name: Create Ticket
  endpoint:
    path: /services/data/v20.0/sobjects/Case/
    method: POST
    data_selector: Content Data
- name: Close Ticket
  endpoint:
    path: /services/data/v20.0/sobjects/Case/
    method: PATCH
    data_selector: Content Data
- name: Add Case Comment
  endpoint:
    path: /services/data/v20.0/sobjects/CaseComment/
    method: POST
    data_selector: Content Data
- name: Create Ticket
  endpoint:
    path: /services/data/v20.0/sobjects/Case/
    method: POST
    data_selector: NONE
- name: Close Ticket
  endpoint:
    path: /services/data/v20.0/sobjects/Case/
    method: PATCH
    data_selector: NONE
- name: Add Case Comment
  endpoint:
    path: /services/data/v20.0/sobjects/CaseComment/
    method: POST
    data_selector: NONE
- name: case_alert
  endpoint:
    path: /
    method: POST
- name: inbound_alerts
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: inbound_integration
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: AlertOps Inbound Integration
  endpoint:
    path: /api/inbound/integration
    method: POST
    data_selector: alert
    params: {}
- name: create_incident
  endpoint:
    path: /v1/pages/xxx/incidents.json
    method: POST
    data_selector: id
    params:
      api_key: xxxx
- name: close_incident
  endpoint:
    path: /v1/pages/xxx/incidents/<<Attribute.StatuspageID>>.json
    method: PUT
    data_selector: id
    params:
      api_key: xxxx
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: status
    params: {}
- name: AlertOps Integration
  endpoint:
    path: /api/integration
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: data
    params: {}
- name: statuses
  endpoint:
    path: /api/v1/statuses
    method: GET
    data_selector: data
    params: {}
- name: alert
  endpoint:
    path: /api/inbound/alerts
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /alerts
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /api/v1/alerts
    method: POST
    data_selector: alert
    params: {}
- name: inbound_alerts
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: alert_notification
  endpoint:
    path: /api/integration
    method: POST
    data_selector: alert_specific_information
    params: {}
- name: incident
  endpoint:
    path: /inbound/messages
    method: POST
    data_selector: mapped_updated
    params: {}
- name: alert
  endpoint:
    path: /api/integration
    method: POST
    data_selector: alert_specific_information
    params: {}
- name: check
  endpoint:
    path: /v1/checks
    method: GET
    data_selector: data
    params: {}
- name: alert
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: data
    params: {}
- name: alerts
  endpoint:
    path: /alerts
    method: POST
    data_selector: alerts
    params: {}
- name: alert
  endpoint:
    path: /api/v1/alerts
    method: POST
    data_selector: incident
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: alert
  endpoint:
    path: /api/inbound
    method: POST
    data_selector: alert
    params: {}
- name: Create Ticket
  endpoint:
    path: /api/v2/tickets.json
    method: POST
    data_selector: ticket
- name: Close Ticket
  endpoint:
    path: /api/v2/tickets.json
    method: PUT
    data_selector: ticket
- name: Add Comment
  endpoint:
    path: /api/v2/tickets/<ticket_id>
    method: POST
    data_selector: ticket
- name: Post Alert
  endpoint:
    path: /incoming-webhooks-cisco-systems
    method: POST
    data_selector: markdown
    params: {}
- name: Post Alert Update
  endpoint:
    path: /incoming-webhooks-cisco-systems
    method: POST
    data_selector: markdown
    params: {}
- name: inbound_alert
  endpoint:
    path: /api/inbound_alert
    method: POST
    data_selector: alert
    params: {}
- name: inbound_integration
  endpoint:
    path: /api/integration
    method: POST
    data_selector: alert
    params: {}
- name: alert
  endpoint:
    path: /alerts
    method: POST
    data_selector: alert
    params: {}
- name: tickets
  endpoint:
    path: /api/v2/tickets.json
    method: GET
    data_selector: tickets
    params: {}
- name: users
  endpoint:
    path: /api/v2/users.json
    method: GET
    data_selector: users
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
- name: create_ticket
  endpoint:
    path: /tickets.json
    method: POST
    data_selector: ticket
- name: close_ticket
  endpoint:
    path: /tickets.json
    method: PUT
    data_selector: ticket
- name: add_comment
  endpoint:
    path: /tickets/<<Attribute.Ticket ID>>.json
    method: PUT
    data_selector: ticket
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: alerts
  endpoint:
    path: /inbound/alerts
    method: POST
    data_selector: alerts
- name: PHD Events
  endpoint:
    path: /path/to/your/api/endpoint
    method: POST
    data_selector: detail
    params: {}
- name: incident
  endpoint:
    path: /
    method: POST
    data_selector: alerts
- name: SNS Topic
  endpoint:
    path: /services/sns/{region}/{account}/topics
    method: POST
    data_selector: TopicArn
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: data
    params: {}
- name: Integration
  endpoint:
    path: /api/integration
    method: POST
- name: Source
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Source Name
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Source Id
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Source Status
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: inbound_email_alerts
  endpoint:
    path: /api/inbound_email_alerts
    method: POST
    data_selector: alerts
    params: {}
- name: heartbeat_monitoring
  endpoint:
    path: /api/v1/heartbeat
    method: GET
    data_selector: records
- name: heartbeat
  endpoint:
    path: /notify.alertops.com/...........
    method: POST
    data_selector: alerts
    params:
      heartbeat_interval: 5 minutes
- name: heartbeat_integration
  endpoint:
    path: /
    method: POST
- name: Add Maintenance Window
  endpoint:
    path: /add-maintenance-window
    method: POST
    data_selector: data
    params: {}
- name: Edit Maintenance Window
  endpoint:
    path: /edit-maintenance-window
    method: PUT
    data_selector: data
    params: {}
- name: integration_cloning
  endpoint:
    path: /integration/cloning
    method: POST
    data_selector: integration
    params: {}
- name: clone_filters
  endpoint:
    path: /clone/filters
    method: POST
    data_selector: filters
    params: {}
- name: Create Ticket
  endpoint:
    path: /auth/token
    method: POST
- name: Close Ticket
  endpoint:
    path: /auth/token
    method: POST
- name: Change ticket to Complete/In Progress
  endpoint:
    path: /auth/token
    method: POST
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: Create Zoom Access Token
  endpoint:
    path: /oauth/token?grant_type=account_credentials&account_id=YourZoomAppAccountID
    method: POST
    data_selector: access_token
- name: Create a Zoom Meeting
  endpoint:
    path: /v2/users/yourZoomUserId/meetings
    method: POST
    data_selector: meeting
- name: Update Create Meeting Header
  endpoint:
    path: /api/v2/integrations/outbound/IntegrationID/methods/MethodID
    method: PUT
    data_selector: update_meeting
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: alert
  endpoint:
    path: /api/integration
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: service
  endpoint:
    path: /services/create
    method: POST
- name: incident
  endpoint:
    path: /incidents/create
    method: POST
- name: maintenance
  endpoint:
    path: /maintenance/create
    method: POST
- name: alert_status
  endpoint:
    path: /api/alert_status
    method: GET
    data_selector: statuses
    params: {}
- name: response_actions
  endpoint:
    path: /api/response_actions
    method: GET
    data_selector: actions
    params: {}
- name: voip_phone_notifications
  endpoint:
    path: /voip_notifications
    method: GET
    data_selector: notifications
    params: {}
- name: sms_message_notifications
  endpoint:
    path: /sms_notifications
    method: GET
    data_selector: notifications
    params: {}
- name: international_sms_notifications
  endpoint:
    path: /international_sms_notifications
    method: GET
    data_selector: notifications
    params: {}
- name: Notify All Recipients on Status Change
  endpoint:
    path: /workflows/notify_all_recipients_on_status_change
    method: POST
    data_selector: alert
    params: {}
- name: Notify All Recipients When No Acknowledgement After 5 Mins of Notifications
  endpoint:
    path: /workflows/notify_all_recipients_no_acknowledgement
    method: POST
    data_selector: alert
    params: {}
- name: Notify All Recipients When No Assignment After 5 Mins Of Notifications
  endpoint:
    path: /workflows/notify_no_assignment
    method: POST
    data_selector: alert
    params: {}
- name: Notify Manager 1 Hr Before SLA If Not Resolved
  endpoint:
    path: /workflows/notify_manager_1_hr_before_sla
    method: POST
    data_selector: alert
    params: {}
- name: Notify Owner 1 Hr Before SLA If Not Resolved
  endpoint:
    path: /workflows/notify_owner_1_hr_before_sla
    method: POST
    data_selector: alert
    params: {}
- name: Notify Sender On Status Change
  endpoint:
    path: /workflows/notify_sender_on_status_change
    method: POST
    data_selector: alert
    params: {}
- name: Generic Service Desk Create Incident
  endpoint:
    path: /workflows/generic_service_desk_create_incident
    method: POST
    data_selector: alert
    params: {}
- name: Generic Service Desk Close Incident
  endpoint:
    path: /workflows/generic_service_desk_close_incident
    method: POST
    data_selector: alert
    params: {}
- name: Stop Delivery on Assignment or Closed
  endpoint:
    path: /workflows/stop_delivery_on_assignment_or_closed
    method: POST
    data_selector: alert
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: POST
    data_selector: alerts
    params: {}
- name: integration
  endpoint:
    path: /integrations
    method: POST
    data_selector: integration
    params: {}
- name: Workflows
  endpoint:
    path: /workflows
    method: POST
    data_selector: workflow
    params: {}
- name: Escalation Policies
  endpoint:
    path: /escalation_policies
    method: POST
    data_selector: escalation_policy
    params: {}
- name: Workflows
  endpoint:
    path: /api/v1/workflows
    method: POST
    data_selector: workflow
    params: {}
- name: Escalation Policies
  endpoint:
    path: /api/v1/escalation_policies
    method: POST
    data_selector: escalation_policy
    params: {}
- name: Workflows
  endpoint:
    path: /workflows
    method: POST
    data_selector: workflow
    params: {}
- name: Escalation Policies
  endpoint:
    path: /escalation_policies
    method: GET
    data_selector: escalation_policy
    params: {}
- name: Workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
    params: {}
- name: custom_alert_field
  endpoint:
    path: /custom/alert/field
    method: POST
    data_selector: data
    params: {}
- name: workflow
  endpoint:
    path: /workflows
    method: POST
    data_selector: data
    params: {}
- name: escalation_policy
  endpoint:
    path: /escalation/policies
    method: POST
    data_selector: data
    params: {}
- name: Workflows
  endpoint:
    path: /workflows
    method: POST
    data_selector: workflows
    params: {}
- name: custom_field_modified
  endpoint:
    path: /docs/send-a-message-when-a-custom-field-is-modified
    method: GET
    data_selector: records
- name: Custom Alert Fields
  endpoint:
    path: /docs/custom-alert-fields
    method: GET
    data_selector: records
    params: {}
- name: Workflows
  endpoint:
    path: /docs/workflows
    method: GET
    data_selector: records
    params: {}
- name: Escalation Policy
  endpoint:
    path: /docs/escalation-policy
    method: GET
    data_selector: records
    params: {}
- name: initial_description
  endpoint:
    path: /service/tickets/<<MessageThread.SourceIdentifier>>/notes
    method: GET
    data_selector: text
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: data
    params: {}
- name: billing_admin
  endpoint:
    path: /billing/admin
    method: GET
    data_selector: billing_info
- name: subscription
  endpoint:
    path: /subscription
    method: GET
    data_selector: subscription_details
- name: invoice_history
  endpoint:
    path: /invoice/history
    method: GET
    data_selector: invoices
- name: generic_sso_provider
  endpoint:
    path: /api/v2/saml/yourorg
    method: POST
    data_selector: sso_data
    params:
      identifier: https://app.alertops.com/yourorg
      reply_url: https://api.alertops.com/api/v2/saml/yourorg
- name: Relying Party Trust
  endpoint:
    path: /adfs/ls
    method: POST
- name: SSO Configuration
  endpoint:
    path: /sso/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: AlertOps SSO
  endpoint:
    path: /api/v2/saml/yourorg
    method: POST
    data_selector: response
    params: {}
- name: sso_configuration
  endpoint:
    path: /sso/configuration
    method: POST
    data_selector: settings
    params: {}
- name: call_routing
  endpoint:
    path: /api/v1/call_routing
    method: POST
    data_selector: callRoutingDetails
    params: {}
- name: call_activity
  endpoint:
    path: /api/v1/call_activity
    method: GET
    data_selector: callActivityRecords
    params: {}
- name: Allow Callers To Leave Voice Message
  endpoint:
    path: /allow_callers_to_leave_voice_message
    method: POST
    data_selector: alert_settings
- name: Create an Alert
  endpoint:
    path: /create_alert
    method: POST
    data_selector: alert_type
- name: Call Simultaneously
  endpoint:
    path: /call_simultaneously
    method: POST
    data_selector: call_settings
- name: Waiting Time
  endpoint:
    path: /waiting_time
    method: POST
    data_selector: waiting_time
- name: Phone Extensions
  endpoint:
    path: /phone_extensions
    method: POST
    data_selector: dialing_settings
- name: Welcome Message
  endpoint:
    path: /welcome_message
    method: POST
    data_selector: message_settings
- name: Waiting Message
  endpoint:
    path: /waiting_message
    method: POST
    data_selector: message_settings
- name: No Response Message
  endpoint:
    path: /no_response_message
    method: POST
    data_selector: message_settings
- name: Postmortem Report
  endpoint:
    path: /postmortem/reports
    method: POST
    data_selector: report
    params: {}
- name: alert_assignment
  endpoint:
    path: /alert_assignment
    method: GET
    data_selector: alert_assignment_data
    params:
      date_range: 31_days
- name: time_to_acknowledge
  endpoint:
    path: /time_to_acknowledge
    method: GET
    data_selector: time_to_acknowledge_data
    params:
      time_period: current_month
- name: time_to_resolve
  endpoint:
    path: /time_to_resolve
    method: GET
    data_selector: time_to_resolve_data
    params:
      time_period: current_month
- name: on_call
  endpoint:
    path: /on_call
    method: GET
    data_selector: on_call_data
    params:
      time_period: now
- name: alert_summary
  endpoint:
    path: /alert_summary
    method: GET
    data_selector: alert_summary_data
    params:
      date_range: specified_date_range
- name: open_alerts
  endpoint:
    path: /open_alerts
    method: GET
    data_selector: open_alerts_data
    params:
      time_period: 30_days
- name: alert_trend
  endpoint:
    path: /alert_trend
    method: GET
    data_selector: alert_trend_data
    params:
      time_period: specified_timeframe
- name: alert_trend_report
  endpoint:
    path: /alert_trend_report
    method: GET
    data_selector: alerts
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: data
    params: {}
- name: Add Topic
  endpoint:
    path: /topics/add
    method: POST
    data_selector: topic
    params: {}
- name: Edit Topic
  endpoint:
    path: /topics/edit
    method: PUT
    data_selector: topic
    params: {}
- name: Post-mortem Field
  endpoint:
    path: /post-mortem-fields
    method: GET
    data_selector: fields
    params: {}
notes:
- Nagios should be defined with a command object to send out a POST request to the
  HTTPS endpoint defined here.
- Make sure you add the above contact and contact groups to the host and service objects
  you define.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses OAuth2 with refresh token — requires setup of connected app in alertops
- Uses OAuth2 with refresh token — requires setup of connected app in AlertOps
- Reminders become active 15 minutes after you save them.
- Some objects may return nulls in deeply nested fields
- You cannot delete users that are involved in shifts.
- User types cannot be changed once a user is created
- Standard user roles can be changed
- The ability to customize entitlements and create custom roles are only available
  at the enterprise tier. In Lower Tiers, users can be assigned to a role under administration.
- Users must have specific entitlements to make changes to Groups
- Groups can contain standard and stakeholder users
- The Import_GlobalAccess entitlement permits bulk import of users and groups via
  a spreadsheet.
- User roles that have access to this entitlement include Owner and App Admin.
- Ensure proper permissions are set for API access.
- Rate limits apply to API requests.
- An important thing to note when setting up a rotating shift is the Rotation Frequency,
  date of occurrence, and number of users rotated can be configured according to admin
  preferences in the shift details.
- Repeating Shift option allows users to set up a shift once and have it repeat automatically.
- Override Shifts allow for short-term schedule changes that do not disrupt the rotation
  of users over the long-term schedule.
- Individual user schedule exceptions are called out-of-office coverage.
- Webcal Feed will dynamically update as the Schedule changes.
- iCal export is a point in time copy of the Schedule.
- Matching Labels must correspond to user profile contact methods to avoid alert delivery
  failures.
- Escalation Policy Examples provide insights into various escalation policy configurations.
- SLAs are set in Escalation Policies.
- User can use SLAs in Workflows as Start Conditions.
- The Recurrence Interval is set to 12 minutes.
- The TimeFromBeginning is set to 11 minutes.
- AlertOps automatically creates an alert when the status variable (status) contains
  '0' (down).
- The incident will also be closed automatically when the status '1' (Up) is received
  from Xitoring.
- Ensure the ‘Custom Fields’ are created within AlertOps. (SysId, and SNOW Incident
  ID)
- When the ‘Enable Sync to AlertOps’ button is clicked, it may take some time for
  the Sync to be completed.
- Every method is customizable, and you can add more methods as needed.
- Ensure alerts are routed via email to the AlertOps integration address.
- AlertOps will open an alert when the ‘data^essentials^monitorCondition’ field from
  the JSON payload received contains 'Fired'.
- AlertOps will automatically close the same incident when an alert with a data^essentials^monitorCondition
  status contains 'Resolved'.
- AlertOps will automatically create an incident when a new alert is received from
  Airbrake with an IncidentStatus status of 'ERROR.'
- 'Web Security Type: Basic'
- 'UserName: Your JIRA login Email'
- AlertOps will automatically create an incident when a new alert is received from
  AlertSite when the notify_type contains 'error/perf_error'.
- AlertOps will automatically close the same incident when an alert with notify_type
  contains 'clear/perf_clear'.
- AlertOps will automatically create an incident when a new alert is received from
  API Fortress with an eventType status of 'Failure'.
- AlertOps will automatically close the same incident when an alert with an eventType
  status does not contain 'Failure'.
- AlertOps automatically creates an alert when the status variable (result_class)
  contains 'FAIL/WARNING'.
- The incident will also be closed automatically when the status 'PASS' is received
  from APImetrics.
- 1 Minute to read
- Prebuilt integration available for AppDynamics
- AlertOps will automatically create an incident when a new alert is received from
  Apteligent with an IncidentStatus status of 'TRIGGERED.'
- AlertOps will automatically close the same incident when an alert with an IncidentStatus
  status 'RESOLVED' is received.
- AlertOps automatically creates an alert when the Message contains 'FAIL'. The incident
  will also be closed automatically when the status 'PASS' is received.
- AlertOps will automatically create an incident when a new alert is received from
  Atatus when the status contains 'Opened'.
- The alert will be recorded in the Inbound Messages table as 'Mapped Appended.'
- AlertOps will automatically close the same incident when an alert with status contains
  'Closed'.
- Uses webhook to send alerts from Confluence to AlertOps
- Alerts can be triggered based on Page events like creation and updates
- Auvik must be defined with a Webhook integration and a notification channel.
- AlertOps will automatically create an incident when a new alert is received from
  Auvik when the alertStatusString field contains 'Triggered'.
- The incident will also be closed automatically when the status 'Cleared' is received
  from Auvik.
- AlertOps automatically creates an alert when the status variable (status) contains
  'triggered'.
- The incident will also be closed automatically when the status 'ok' is received
  from Automate.io.
- Some objects like Contact may return nulls in deeply nested fields
- AlertOps must be subscribed to the SNS Topic to receive notifications.
- CloudTrail sends notifications to an attached SNS Topic, which connects to an external
  HTTPS endpoint.
- AlertOps will automatically create an incident when a new alert is received from
  AWS with an IncidentStatus status of 'ALARM'.
- If an alert with status 'ALARM' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- Alerts will be sent to AlertOps for incident management.
- AlertOps will automatically create an incident when a new alert is received from
  Azure with an IncidentStatus status of 'ACTIVATED.'
- Uses unique API URL generated for webhook integration
- Triggers alerts based on triggeroutput^statusCode
- Ensure to have a Bitbucket account and API access setup.
- AlertOps will automatically create an incident when a new alert is received from
  Bitbucket when the commit_status^state status field contains 'FAILED'.
- Alerts will be closed when the commit_status^state field contains 'SUCCESSFUL' or
  'INPROGRESS'.
- BigPanda should be defined with an integration and sharing option to send incidents
  to AlertOps.
- AlertOps will automatically create an incident when a new alert is received from
  BigPanda when the incident^status field contains 'Critical/Warning/Unknown'.
- AlertOps will automatically close the same incident when an alert with status contains
  'Ok'.
- AlertOps expects a specific payload structure for alerts
- IncidentStatus values include 'OPEN', 'ACK', 'ASSIGNED', 'CLOSED', 'BLACKOUT'
- AlertOps automatically creates an incident when the build_status field contains
  '2'.
- The incident will also be closed automatically when the status '1' (success) is
  received from Bitrise.
- AlertOps automatically creates an alert when the status variable (result) contains
  'fail'.
- The incident will also be closed automatically when the status 'pass' is received
  from BlazeMeter.
- Any alert will be sent to AlertOps for incident management.
- Prebuilt Integration
- Ensure the AlertOps API user has the necessary permissions.
- The Client ID and api_key must be configured correctly.
- At the Premium Tier, you are limited to one Outbound Integration and two Workflows.
- If you have customized your status values in ConnectWise PSA, please make sure to
  incorporate the relevant keywords into the Open and/or Close conditions.
- Ensure your ConnectWise PSA™ Version is Upgraded to the latest version and has all
  necessary patches installed.
- Ensure that your Server OS is running on the latest version. (Currently Windows
  2019 soon to be Windows Server 2022)
- Ensure that from IIS protocols, only TLS 1.2 is enabled and all prior versions (TLS
  1.0, TLS 1.1) are disabled on the server.
- Ensure that you have no invalid Callback URLs or unused Callbacks configured within
  your ConnectWise PSA™ Environment from a standpoint of API Callbacks and the Legacy
  Integrator Login Callbacks.
- CircleCI should be setup with a Webhook and event notifications.
- AlertOps automatically creates an alert when the status variable (job^status) contains
  the values -'failed/error/unauthorized/canceled'.
- Ensure correct API key is provided for authentication.
- AlertOps automatically creates an alert when the status variable (alert_type) contains
  'ALERT_FAILURE'.
- The incident will also be closed automatically when the status 'ALERT_RECOVERY'
  is received from Checkly.
- AlertOps automatically creates an incident when the alertLevel field contains 'warning'
  or 'critical'.
- The incident will also be closed automatically when the status 'informational' is
  received from Meraki.
- AlertOps automatically creates an alert when the status variable (messagetype) contains
  'problem'.
- The incident will also be closed automatically when the status 'recovery' is received
  from CloudRadar.
- AlertOps will automatically create an incident when a new alert is received from
  CloudMonix when the SeverityName contains 'ERROR/CRITICAL/WARNING'.
- The incident will also be closed automatically when the status 'INFORMATION' is
  received from CloudMonix.
- AlertOps automatically creates an alert when the status variable (Status) contains
  'Suspicious/Confirmed/Reported'.
- The incident will also be closed automatically when the status 'Fixed/Remediated'
  is received from Contrast Security.
- AlertOps automatically creates an alert when the status variable (severity) contains
  'CRITICAL/WARNING/MAJOR'.
- The incident will also be closed automatically when the status 'CLEARED/MINOR' is
  received from Curity.
- AlertOps will automatically create an incident when a new alert is received from
  Dotcom-Monitor with an IncidentStatus status of “Down.”
- If an alert with status “Down” matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- Make sure your API key is active and has the required permissions
- AlertOps will automatically create an incident when a new alert is received from
  Dynatrace with an IncidentStatus status of “OPEN.”
- If an alert with status “OPEN” matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- AlertOps will automatically create an incident when a new alert is received from
  Errorception with an IncidentStatus status of “isInline.”
- Requires setup of connected app in api
- AlertOps automatically creates an alert when the status variable (rule_firing) contains
  'true'.
- The incident will also be closed automatically when the status 'false' is received
  from Datacake.
- Webhook triggers only work in the new UI of Datto RMM
- AlertOps automatically creates an incident when the alertlevel contains 'triggered'
- Alerts can be viewed in the ‘Alerts’ tab in AlertOps
- Ensure API key is kept secure and not exposed in client-side code.
- AlertOps automatically creates an incident when a new alert is received from Detectify
  when the severity field contains 'high' or 'medium'.
- The incident will also be closed automatically when the status 'low' is received
  from Detectify.
- Ensure to use HTTP-JSON delivery method for alerts
- Alerts are created automatically based on specific status values
- Prebuilt integration available for Catchpoint
- AlertOps will automatically create an incident when a new alert is received from
  Catchpoint with an IncidentStatus status of 'CRITICAL.'
- If an alert with status 'CRITICAL' matches an existing Open Alert, AlertOps will
  recognize the new alert as a duplicate and ignore the alert.
- When a watch’s alerts are acknowledged via AlertOps, subsequent messages will stop
  being sent.
- 3 Minutes to read
- Webhook notifications require API URL configuration in Elecard Boro
- Alerts are created when status contains 'Event' and closed when status contains
  'Cleared'
- Updated on 03 May 2024
- Epsagon requires the AlertOps Inbound Integration API URL for sending alerts.
- Some endpoint data may take time to propagate after initial setup.
- AlertOps automatically creates an alert when the status variable (alarm.state) contains
  'ALARM'
- The incident will also be closed automatically when the status 'OK' is received
  from Exoprise
- Requires setup of API key in FreshDesk
- AlertOps will automatically create an incident when a new alert is received from
  Freshdesk with a freshdesk_webhook^ticket_status of 'Open'.
- If an alert with status 'Open' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- Uses API key for authentication
- The FreshDesk user must have permissions to create and modify tickets.
- User must have permissions to create and modify tickets
- Trigger Webhook when a ticket is created or closed.
- AlertOps automatically creates an incident when a new alert is received from FireHydrant
  when the status field contains 'SEV1' or 'SEV2'.
- AlertOps will automatically close the same incident when an alert with a status
  contains 'Resolved'.
- AlertOps creates an incident when flic_state contains 'On'.
- Incident is closed automatically when flic_state contains 'Off'.
- API documentation available at the provided URL
- AlertOps automatically creates an alert when the status variable (payload^severity)
  contains 'warning/critical/error'.
- The incident will also be closed automatically when the status 'info' is received
  from Formant.
- AlertOps will automatically create an incident when a new alert is received from
  Grafana with an IncidentStatus status of “[alerting].”
- If an alert with status “[alerting]” matches an existing Open Alert, AlertOps will
  recognize the new alert as a duplicate and ignore the alert.
- Webhook notifications must be configured in Ghost Inspector to send alerts to AlertOps.
- API rate limits apply
- Ensure to handle token expiration
- Alerts can be sent to AlertOps for incident management.
- Uses OAuth2 with refresh token — requires setup of GitLab application
- Some endpoints may return paginated responses
- GitLab must be defined with a webhook trigger.
- AlertOps automatically creates an alert when the status variable (object_attributes^action)
  contains 'open' or 'reopen'.
- The incident will also be closed automatically when the status 'close' is received
  from GitLab.
- Uses OAuth2 with refresh token — requires setup of connected app in Graylog
- Some responses may have rate limits
- AlertOps will automatically create an incident when a new alert is received from
  Graylog when the priority field contains '3/4'.
- An alert with status '3/4' that matches an existing Open Alert will be recognized
  as a duplicate and ignored.
- The incident will be closed automatically when the status '1/2' is received from
  Graylog.
- AlertOps will automatically create an incident when a new alert is received from
  HaloITSM when the ticket^status^name contains 'New'.
- AlertOps automatically creates an alert when the status variable (notifications_0^trigger)
  contains 'run:errored'.
- The incident will also be closed automatically when the status 'run:completed' is
  received from Terraform.
- AlertOps will automatically create an incident when a new alert is received from
  Honeybadger with an IncidentStatus status of “false.”
- If an alert with status “false” matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- AlertOps automatically creates an alert when the status variable 'operator' contains
  any 'greater'.
- The incident will also be closed automatically when the status other than 'greater'
  is received from Honeycomb.
- AlertOps automatically creates an alert when the status variable (id) contains 'Down/RepeatedlyDown'.
- The incident will also be closed automatically when the status 'Up' is received
  from Host-Tracker.
- Ensure to handle rate limiting when making requests.
- Hyperping has to be defined with an integration webhook.
- AlertOps will automatically create an incident when a new alert is received from
  Icinga.
- AlertOps will automatically create an incident when a new alert is received from
  Icinga1 when the status field contains 'DOWN' or 'CRITICAL'.
- The incident will also be closed automatically when the status 'UP' or 'OK' or 'RECOVERY'
  is received from Icinga1.
- AlertOps will automatically create an incident when a new alert is received from
  Inspector when the payload^title contains 'OpenCondition'.
- The incident will also be closed automatically when the status 'CloseCondition'
  is received from Inspector.
- Requires API key for authentication
- Make a note of the API URL, which will be used in Instana, so it calls a HTTP POST
  request to this URL with the body in JSON format containing the alert specific information.
- Alerts will be recorded in the ‘Inbound Log’ section table.
- AlertOps automatically creates an alert when the status variable (systemLabel) contains
  'alarm-high/alarm-medium'.
- The incident will also be closed automatically when the status 'alarm-low' is received
  from Ixon.
- All incoming tickets will produce an alert if the advanced settings are not configured.
- Uses OAuth2 with refresh token — requires setup of connected app in syncromsp
- A resource (user) must have a default service desk role within their resource profile
  in Autotask to be assigned to tickets.
- AlertOps will automatically create an incident when a new alert is received from
  Healthchecks.io when the STATUS field contains 'down'.
- AlertOps will automatically close the same incident when an alert with a STATUS
  contains 'ok' or 'up'.
- Ensure the email integration captures key ticket details, like ticket ID, status,
  priority, and description.
- Requires setup of API keys in JitBit
- AlertOps automatically creates an alert when the status variable (*status*) contains
  '1'.
- The incident will also be closed automatically when the status '3' is received from
  JitBit.
- Issues coming from JIRA have a SourceStatus that corresponds to transition titles.
- Automatically creates an alert when the status variable (build^status) does not
  contain 'SUCCESS'.
- The alert will be recorded in the Inbound Messages table as 'Mapped Appended'.
- AlertOps will automatically close the same incident when an alert with build^status
  contains 'SUCCESS'.
- AlertOps will automatically create an incident when a new alert is received from
  Kayako when the status field contains 'New'.
- Requires setup of connected app in Kentik API
- AlertOps automatically creates an alert when the status variable (AlarmState) contains
  'ALARM'.
- The incident will also be closed automatically when the status 'CLEAR' is received
  from Kentik.
- AlertOps will automatically create an incident when a new alert is received from
  Librato with an IncidentStatus status of “alert.”
- If an alert with status “alert” matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- AlertOps will automatically create an incident when a new alert is received from
  LibreNMS with an IncidentStatus status of 'open'.
- An alert with status '1' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- AlertOps automatically creates an alert when the status variable (level) contains
  'error/warn'.
- The incident will also be closed automatically when the status 'info' is received
  from LogDNA.
- Alerts are configured when creating or editing a chart. Currently, alerts are only
  supported for Timeseries charts.
- AlertOps will automatically create an incident when a new alert is received from
  LogRocket when the status contains 'triggered'.
- AlertOps will automatically close the same incident when an alert with status contains
  'resolved'.
- AlertOps will automatically create an incident when a new alert is received from
  Logz.io when the alert_severity field contains 'SEVERE' or 'HIGH'.
- AlertOps will automatically close the same incident when an alert with alert_severity
  contains 'LOW' or 'INFO'.
- Uses OAuth2 with refresh token — requires setup of connected app in LogicMonitor
- Some endpoints may have rate limits
- AlertOps will automatically create an incident when a new alert is received from
  LogicMonitor with an IncidentStatus status of “active.”
- If an alert with status “active” matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- Loggly requires an API key for authentication.
- Ensure that the API key is kept secure.
- AlertOps will automatically create an incident when a new alert is received from
  JIRA with an IncidentStatus status of “open.”
- If an alert with status “open” matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert. The alert will be recorded in
  the Inbound Messages table as “Mapped Appended.”
- AlertOps will automatically close the same incident when an alert with an IncidentStatus
  status “closed” is received.
- AlertOps provides Inbound Integrations to integrate with numerous monitoring, chat
  and ITSM tools.
- Make a note of the API URL, which will be used in Lightstep, so it calls a HTTP
  POST request to this URL.
- AlertOps automatically creates an alert when the status variable (status) contains
  ‘Critical’ or ‘Warning’. The incident will also be closed automatically when the
  status ‘Resolved’ is received.
- You can similarly define URL mappings as you want, owing to the flexibility provided
  by AlertOps’ OpenAPI integrations.
- AlertOps will automatically create an incident when a new alert is received from
  ManageEngine SDP when the status_name contains 'Open'.
- Content Type is FORM_URLENCODED
- Response Data Type is JSON
- AlertOps User First Name and Last Name must match Microsoft Teams User First Name
  and Last Name for commands to work.
- No webhook secret is needed.
- Alerts can be viewed in the ‘Alerts’ tab.
- AlertOps will automatically create an incident when a new alert is received from
  Moogsoft when the status field contains 'open', 'in progress' or 'error'.
- If an alert with status 'open', 'in progress' or 'error' matches an existing Open
  Alert, AlertOps will recognize the new alert as a duplicate and ignore the alert.
- AlertOps will automatically create an incident when a new alert is received from
  SCOM with an IncidentStatus status of 'New.'
- If an alert with status 'New' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- AlertOps will automatically close the same incident when an alert with an IncidentStatus
  status 'Resolved' or 'Closed' is received.
- AlertOps will automatically create an incident when a new alert is received from
  Monitis with an IncidentStatus status of 'PROBLEM.'
- If an alert with status 'PROBLEM' matches an existing Open Alert, AlertOps will
  recognize the new alert as a duplicate and ignore the alert.
- AlertOps will automatically create an incident when a new alert is received from
  Nagios with an IncidentStatus status of 'DOWN'.
- AlertOps will automatically create an incident when a new alert is received from
  Nagios with an IncidentStatus status of 'CRITICAL'.
- API-Key authentication is required.
- AlertOps will automatically create an incident when a new alert is received from
  NodePing with an IncidentStatus status of 'down.'
- AlertOps will automatically close the same incident when an alert with an IncidentStatus
  status 'up' is received.
- AlertOps will automatically create an incident when a new alert is received from
  New Relic with an IncidentStatus status of “open.”
- If an alert with status “open” matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- AlertOps will automatically create an incident when a new alert is received from
  NetCrunch with an IncidentStatus status of 'Opened'.
- If an alert with status 'Opened' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- AlertOps automatically creates an alert when the status variable (monitors_0^state)
  is ‘failing’.
- The incident will also be closed automatically when the status ‘passing’ is received.
- AlertOps will automatically create an incident when a new alert is received from
  Quickbase when the recordChange field contains 'Add/Replace/Delete'.
- AlertOps will automatically create an incident when a new alert is received from
  Runscope with an IncidentStatus status of 'fail.'
- If an alert with status 'fail' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- AlertOps will automatically create an incident when a new alert is received from
  Observium with an IncidentStatus status of 'ALERT.'
- If an alert with status 'ALERT' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- AlertOps will automatically create an incident when a new alert is received from
  Orca Security when the state^status field contains 'open'.
- AlertOps will automatically create an incident when a new alert is received from
  Panopta with an IncidentStatus status of 'outage event.'
- If an alert with status 'outage event' matches an existing Open Alert, AlertOps
  will recognize the new alert as a duplicate and ignore the alert.
- AlertOps will automatically create an incident when a new alert is received from
  Pingdom with an IncidentStatus status of 'down'.
- If an alert with status 'down' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- Any sales update event would now send an alert to AlertOps for incident management.
- AlertOps will automatically create an incident when a new alert is received from
  PA Server Monitor when the StatusText contains 'Alert/Error'.
- AlertOps will automatically close the same incident when an alert with StatusText
  contains 'OK'.
- AlertOps will automatically create an incident when a new alert is received from
  Prometheus with an IncidentStatus status of 'firing.'
- If an alert with status 'firing' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- AlertOps will automatically create an incident when a new alert is received from
  PRTG with an IncidentStatus status of “Down.”
- The alert will be recorded in the Inbound Messages table as “Mapped Appended.”
- AlertOps will automatically close the same incident when an alert with an IncidentStatus
  status “Up” is received.
- AlertOps automatically creates an incident when a new alert is received from Prefect
  when the event^data^state contains 'Failed/Timedout/Triggerfailed'.
- The incident will also be closed automatically when the status 'Success/Finished'
  is received from Prefect.
- AlertOps automatically creates an alert when the status variable (alert_type) contains
  'monitor_offline'.
- The incident will also be closed automatically when the status 'monitor_online'
  is received from Pulsetic.
- Uses OAuth2 with refresh token — requires setup of connected app in Quickbase.
- AlertOps automatically creates an alert when the status variable (recordChange)
  contains the values -'Add/Replace/Delete'.
- The incident will also be closed automatically when the recordChange other than
  ‘Add/Replace/Delete’ is received.
- AlertOps will automatically create an incident when a new alert is received from
  Rackspace with an IncidentStatus status of 'CRITICAL', 'ERROR', or 'PROBLEM'.
- AlertOps will automatically close the same incident when an alert with an IncidentStatus
  status 'OK' or 'RESOLVED' is received.
- AlertOps will automatically create an incident when a new alert is received from
  Runscope with an IncidentStatus status of “fail.”
- If an alert with status “fail” matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- AlertOps will automatically close the same incident when an alert with an IncidentStatus
  status “pass” is received.
- AlertOps automatically creates an alert when the status variable (type) contains
  'down'.
- The incident will also be closed automatically when the status 'up' is received
  from Radio Mast.
- AlertOps automatically creates an alert when the status variable (monitors_0^state)
  is 'failing'.
- The incident will also be closed automatically when the status 'passing' is received.
- AlertOps automatically creates an incident when a new alert is received from Raygun
  when the error^status field contains 'Active'.
- Webhook notification method must be associated with an alert.
- AlertOps automatically creates an alert when the status variable (_0^lastEvaluation^status)
  contains 'Warning/Error/Internal Error'.
- The incident will also be closed automatically when the status 'OK' is received
  from Resmo.
- Uses OAuth2 with refresh token — requires setup of connected app in Runscope
- AlertOps automatically creates an alert when the status variable (event_name) contains
  'new_item'.
- The incident will also be closed automatically when the status 'resolved_item' is
  received from Rollbar.
- AlertOps automatically creates an alert when the status variable (alert_status)
  contains 'OPEN'.
- The incident will also be closed automatically when the status 'CLOSED' is received
  from Managed Solr.
- AlertOps automatically creates an alert when the status variable (context^trigger^type)
  contains 'grade_drop'.
- The incident will also be closed automatically when the status 'grade_rise' is received
  from SecurityScorecard.
- AlertOps will automatically create an incident when a new alert is received from
  Segment when the properties^state contains 'triggered'.
- The incident will also be closed automatically when the status 'ok' is received
  from Segment.
- AlertOps has a flexible and simple API/Webhook configuration feature.
- AlertOps will automatically create an incident when a new alert is received from
  Sematext, when the alertConditionNormality field contains 'false'.
- AlertOps will automatically close the same incident when an alert with alertConditionNormality
  contains 'true'.
- AlertOps automatically creates an incident for alerts with data^event^level containing
  'error/fatal/warning'.
- Alerts can be viewed in the ‘Alerts’ tab in AlertOps Dashboard.
- AlertOps will automatically create an incident when a new alert is received from
  Server Density with an IncidentStatus status of 'false'.
- If an alert with status 'false' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- Rate limits apply
- AlertOps automatically creates an alert when the status variable (status) contains
  'CRITICAL'.
- The incident will also be closed automatically when the status 'OK' is received
  from ServerGuard24.
- Scalyr requires both a webhook-trigger and webhook-resolve in the email entry box.
- Enterprise or CWM package accounts have the ability to choose which buttons are
  available in the Slack notification. All other accounts will have the Acknowledge,
  Assign, and Close buttons pre-configured.
- AlertOps will automatically create an incident when a new alert is received from
  SolarWinds with an IncidentStatus status of 'Down.'
- If an alert with status 'Down' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- SMAX has to be configured with an On-premise bridge Agent, Endpoints, Credentials,
  Studio Process rule.
- API key required for authentication.
- AlertOps will automatically create an incident when a new alert is received from
  Service Now with an IncidentStatus status of '1.'
- AlertOps will automatically close the same incident when an alert with an IncidentStatus
  status '7' is received.
- Some objects like Case may return nulls in deeply nested fields
- Web Security Type = OAUTH 2 SessionID
- Action = Outbound Service Notification
- Service Type = REST
- Content Type = JSON
- AlertOps automatically creates an incident when a new alert is received from Salesforce
  when the status field contains 'New' or 'Working'.
- AlertOps will automatically close the same incident when an alert with status contains
  'Closed.'
- Speedway has to be defined with a webhook notification method.
- By default, notifications will be sent out to all users and integrations.
- AlertOps will automatically create an incident when a new alert is received from
  Splunk.
- API requires an API key for authentication.
- AlertOps automatically creates an alert when the status variable (current_state)
  contains 'Identified'.
- The incident will also be closed automatically when the status 'Resolved' is received
  from Status.io.
- AlertOps automatically creates an alert when the status variable (incident^status)
  contains 'investigating/identified'.
- The incident will also be closed automatically when the status 'resolved' is received
  from Statuspage.
- Requires OAuth2 setup for authentication
- Ensure notifications are always enabled.
- AlertOps automatically creates an alert when the status variable (status) contains
  'Started/Identified'.
- The incident will also be closed automatically when the status 'Completed/Resolved'
  is received from StatusDashboard.
- AlertOps automatically creates an alert when the status variable contains 'down'.
- The incident will be closed automatically when the status 'up' is received from
  Statuspal.
- Requires setup of OAuth2 credentials in the AlertOps dashboard
- AlertOps automatically creates an alert when the status variable (Status) contains
  '3'.
- The incident will also be closed automatically when the status '4' (Resolved) is
  received from StatusCast.
- AlertOps will automatically create an incident when a new alert is received from
  StatusCake with an IncidentStatus status of “down.”
- If an alert with status “down” matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- Sysdig has to be configured with a webhook notification channel
- AlertOps automatically creates an alert when the status variable (state) contains
  'ACTIVE'
- The incident will also be closed automatically when the status 'OK' is received
  from Sysdig
- Webhook notification must be defined with a trigger in Terraform Cloud.
- Webhook configuration in Travis CI should point to the unique API URL generated
  in AlertOps.
- AlertOps will automatically create an incident when a new alert is received.
- An incident will be closed automatically when the status 'closed' is received.
- AlertOps automatically creates an alert when the status variable (eventType) contains
  'ALERT_NOTIFICATION_TRIGGER'.
- The incident will also be closed automatically when the status 'ALERT_NOTIFICATION_CLEAR'
  is received from ThousandEyes.
- AlertOps will automatically create an incident when a new alert is received from
  Uptrends with an IncidentStatus status of 'Alert' or 'Reminder'.
- AlertOps will automatically close the same incident when an alert with an IncidentStatus
  status 'Ok' is received.
- Ensure to check API rate limits to prevent throttling.
- AlertOps automatically creates an alert when the status variable (*_0^event*) contains
  'check.down'.
- The incident will also be closed automatically when the status 'check.up' is received
  from Updown.io.
- API supports OAuth2 with refresh token.
- AlertOps automatically creates an alert when the status variable (data^alert^is_up)
  contains 'false'.
- The incident will also be closed automatically when the status 'true' is received
  from Uptime.com.
- AlertOps will automatically create an incident when a new alert is received from
  Uptime Robot with an IncidentStatus status of '1'.
- If an alert with status '1' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- AlertOps will automatically create an incident for every inbound message received
  from VMware.
- AlertOps automatically creates an alert when the status variable (severity) contains
  'SEVERE'.
- The incident will also be closed automatically when the status 'INFO' is received.
- AlertOps will automatically create an incident when a new alert is received from
  Webmon with an IncidentStatus status of 'error'.
- If an alert with status 'error' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- AlertOps automatically creates an alert when the status variable (isrecovery) contains
  '0'.
- The incident will also be closed automatically when the status '1' is received from
  Wormly.
- AlertOps will automatically create an incident when a new alert is received from
  Zabbix with an IncidentStatus status of 'PROBLEM.'
- AlertOps automatically creates an alert when the status variable (alert) contains
  'Triggered'.
- The incident will also be closed automatically when the status 'Ok' is received
  from Zapier.
- AlertOps automatically creates an alert when the status variable (incident_state)
  contains 'open'.
- The incident will also be closed automatically when the status 'muted' is received
  from Zebrium.
- Uses OAuth2 with refresh token — requires setup of connected app in Zendesk
- 'Make sure the following placeholders are there as part of your JSON key-value pairs:
  {"id":"{{ticket.id}}","url":"{{ticket.url}}","status":"{{ticket.status}}","subject":"{{ticket.title}}","description":"{{ticket.description}}"}'
- User must have permission to create and modify tickets.
- Requires OAuth2 with authorization code flow for access token retrieval.
- Alerts will be recorded in the ‘Inbound Log’ or ‘Alerts’ section.
- AlertOps automatically creates an alert when the status variable (event) contains
  ‘meeting.started’.
- The incident will also be closed automatically when the status ‘meeting.ended’ is
  received.
- AlertOps automatically creates an incident when the detail^state field contains
  'stopped' or 'terminated'.
- The incident will also be closed automatically when the status 'running' is received
  from AWS.
- Uses HTTP POST request with JSON payload to create alerts.
- Requires API key for authentication.
- Mentionname in Hipchat should match Username in Alertops for a User
- AlertOps must be subscribed to the ‘SNS Topic’ to receive payload from it.
- Requires OAuth2 authentication setup.
- The InboundIntegrations_GlobalAccess entitlement is necessary for creation, update,
  and deletion of inbound e-mail, API, and chat integration templates in the environment.
- User roles that have access include Owner, App Admin, and Integrations Admin.
- Requires InboundIntegrations_GlobalAccess entitlement for creation, update, and
  deletion of inbound email, API, and chat integration templates.
- User roles that have access to this entitlement include Owner, App Admin, and Integrations
  Admin.
- Requires setup of connected app in AlertOps
- The user roles that have access to this entitlement include Owner, App Admin, and
  Integrations Admin.
- Enter a unique integration name, a Heartbeat interval in minutes, select the Escalation
  Rule to deliver the alert when the heartbeat has missed an interval check, finally,
  enter the Group(s) or User(s) to be notified when there is a missed interval.
- You can include an optional body if needed, or send an empty JSON object.
- Add a log to a file in your PowerShell script for better diagnostics.
- Use Windows Event Logs or custom scripts to trigger the ping only after certain
  services succeed (e.g., backups, batch jobs).
- If you have multiple servers or jobs, create separate Heartbeat integrations in
  AlertOps for each, so you can monitor them independently.
- Temporary pause of integrations during maintenance windows.
- Ensure to replace <PLEASE ADD CATEGORY HERE> in Request Data
- Outbound Integrations can be found on the Integration page.
- Methods are essentially API Calls to trigger an action on a 3rd party system.
- Ensure to configure the Zoom app with appropriate scopes for data access
- OAuth2 requires setup of a connected app in Zoom
- Ensure to replace placeholders with actual values
- AlertOps automatically creates an alert when the status variable (status_name) contains
  'Open'.
- The incident will also be closed automatically when the status 'Closed/Resolved'
  is received from SDP.
- OAuth2 authentication is required to access the API.
- Always use AIOps Test before enabling AutoMerge to validate thresholds
- Run simulations with different date ranges to understand merge behavior
- Test with various similarity scores to find optimal settings
- Set appropriate time windows based on your incident patterns
- Leverages existing AIOps merge configuration, ensuring that historical insights
  are based on the same criteria used for alert grouping.
- Only Short Text and Long Text fields are supported.
- You can create up to 5 custom Intellifields in addition to the 5 built-in ones.
- AI results depend on the quality and completeness of alert data.
- The Messages_Send_GlobalAccess entitlement is required to create and send manual
  alerts.
- Some actions are available only in the Web App.
- Topics are used to build pre-loaded message/alert templates and assign recipient
  groups to it.
- Different types/categories of alerts can be mapped to corresponding topics.
- Topics can be used as start conditions in workflows.
- Calls may originate from different numbers due to service limitations.
- 'The following entitlements are required to make changes to Workflows: Workflows_Update
  - Create, Update, and Delete Workflows Workflows_View - View existing Workflows'
- Workflows are only available for Enterprise Package and Custom Package clients.
- Care should be taken when selecting contact methods in the Escalation Policy, as
  systems such as Phone or SMS may not present HTML as expected. Always test before
  going live.
- HTML offers considerable formatting options to improve readability, and when combined
  with static and dynamic fields messages can deliver more detail in a useful fashion.
- The user roles with access to these integration entitlements are Owner and App Admin.
- 'User roles with access: Owner, App Admin'
- 'Entitlements required: Workflows_Update, Workflows_View'
- Workflows must be enabled before adding to an Escalation Policy.
- Users or Groups must already exist to be selected as recipients.
- Requires setup of OAuth2 in AlertOps
- API may have rate limits on certain endpoints
- Any Escalation Policy already used in a Workflow cannot have additional Workflows
  applied.
- 'Requires specific user roles with integration entitlements: Owner and App Admin.'
- ConnectWise's API does not automatically provide the initial description, it needs
  to be manually retrieved.
- Requires setup of connected app in AlertOps.
- The call routing feature is an add-on for our premium and enterprise packages.
- Owner of the account can login both ways using regular login and SSO login.
- Replace 'yourorg' with your respective AlertOps domain/account.
- Order of Claim Rules is important.
- Both the login URL and Logout URL are the same
- Uses SAML for Single Sign-On (SSO) integration
- Uses SAML for Single Sign On (SSO) configuration
- Ensure the SAML Signature Algorithm is set to SHA256
- Authentication is based on the AlertOps username matching OneLogin username or the
  AlertOps contact email address matching OneLogin email address.
- Requires setup of SSO in OKTA
- Select SHA256 for SAML Signature Algorithm
- The following settings are only available if you have Call Forward toggled on in
  the Call Connection section.
- Postmortem Reports may not be available with all AlertOps price packages.
- Ensure OAuth2 connected app is configured properly.
- Topics can be used for tracking in Reports, and as conditions in Workflows.
- Select Topics when creating a new manual alert to load its pre-set default message
  text.
errors:
- 'notifications_enabled 1: Make sure that notifications are enabled for this configuration.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify authentication credentials.'
- '404 Not Found: Ensure the endpoint is correct.'
- Duplicate alert ignored if status '0' matches an existing Open Alert.
- 'Mapped Appended: Alert is recognized as a duplicate and ignored.'
- Duplicate alerts will be ignored if an alert with status 'Failure' matches an existing
  Open Alert.
- Duplicate alerts with status 'Triggered' are ignored.
- '400 Bad Request: Ensure the JSON body is correctly formatted.'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '500: Internal Server Error'
- '401 Unauthorized: Check your authentication credentials.'
- '403 Forbidden: You do not have permission to access this resource.'
- '404 Not Found: The requested resource could not be found.'
- Duplicate alerts are ignored if they match an existing Open Alert.
- Duplicate alerts will be ignored if they match an existing Open Alert.
- '401 Unauthorized: Recheck API user credentials.'
- '400 Bad Request: Ensure the request data is correctly formatted.'
- '400 Bad Request: Ensure the JSON body format is correct.'
- '401 Unauthorized: Check your API key.'
- '404 Not Found: Verify the endpoint URL.'
- '403 Forbidden: Check your API key and permissions'
- '404 Not Found: Verify the endpoint and request parameters'
- '500 Internal Server Error: Retry after a short delay'
- 'Duplicate alert: AlertOps recognizes new alerts with status ''true'' as duplicates
  if they match an existing Open Alert.'
- '401 Unauthorized: Check API key validity.'
- '404 Not Found: Verify endpoint URL.'
- 'Mapped Ignored - Status Mismatch: This is fine'
- '400 Bad Request: Check the JSON format of the alert body'
- '401 Unauthorized: Verify the API URL and webhook settings'
- '400 Bad Request: Ensure the JSON body is correctly structured.'
- '401 Unauthorized: Check your API key and permissions.'
- '404 Not Found: Verify the endpoint and parameters provided.'
- Duplicate alerts with status 'ALARM' are ignored if they match existing Open Alerts
- '401 Unauthorized: Check API key and permissions'
- '404 Not Found: Verify endpoint URL'
- '401 Unauthorized: Recheck API credentials or access permissions'
- '404 Not Found: Check the endpoint URL or resource availability'
- '400 Bad Request: Verify the request format and parameters'
- '401 Unauthorized: Check API key'
- '404 Not Found: Verify the resource path'
- '429 Too Many Requests: Slow down API requests'
- Duplicate alerts are ignored if status is 'false' and matches an existing Open Alert.
- '401 Unauthorized: Invalid credentials'
- '429 Too Many Requests: Rate limit exceeded'
- '404 Not Found: Check the endpoint path'
- '401 Unauthorized: Recheck OAuth token'
- '403 Forbidden: Ensure you have the necessary permissions'
- '403 Forbidden: Check permissions and roles'
- '404 Not Found: Verify endpoint and resource access'
- Duplicate alerts are ignored by AlertOps if they match an existing Open Alert.
- '429 Too Many Requests: Exceeded rate limit, please retry later.'
- '401 Unauthorized: Ensure your token is valid.'
- '400 Bad Request: Check payload format or required fields'
- '401 Unauthorized: Verify API key or token'
- '404 Not Found: Check the API endpoint URL'
- '401 Unauthorized: Check API key validity'
- '404 Not Found: Verify endpoint and parameters'
- Duplicate alert ignored when status 'New' matches an existing Open Alert.
- '429 Too Many Requests: Rate limit exceeded.'
- '400 Bad Request: Check the payload format and required fields.'
- '401 Unauthorized: Ensure the webhook is configured correctly in ManageEngine.'
- '401 Unauthorized: Recheck API key or token'
- '403 Forbidden: Check API key permissions'
- '404 Not Found: Verify the endpoint and resource'
- '500 Internal Server Error: Try again later'
- If an alert with status 'Opened' matches an existing Open Alert, AlertOps will recognize
  the new alert as a duplicate and ignore the alert.
- Duplicate alerts are ignored.
- Alerts with status 'ALERT_RECOVERY' will close incidents.
- '400 Bad Request: Check the format of the alert payload'
- '404 Not Found: Ensure the endpoint is correct'
- '500 Internal Server Error: Retry the request after a brief wait'
- AlertOps will automatically close the same incident when an alert with recordChange
  does not contain ‘Add/Delete/Replace’.
- '401 Unauthorized: Recheck API key or token expiration'
- 'Duplicate alert: AlertOps will recognize the new alert as a duplicate and ignore
  the alert if it matches an existing Open Alert.'
- '400 Bad Request: Check the incoming JSON format.'
- '401 Unauthorized: Verify API key or credentials.'
- Duplicate alerts are ignored if status 'Raised' matches an existing Open Alert.
- Duplicate alerts are ignored if they match existing Open Alerts.
- Duplicate alert ignored if it matches an existing Open Alert.
- 'Mapped Appended: AlertOps recognizes the new alert as a duplicate and ignores the
  alert.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Invalid API key'
- '400 Bad Request: Check the JSON body for required fields.'
- '401 Unauthorized: Ensure API URL is correct and ServerGuard24 is configured properly.'
- 'channel_not_found: The channel specified could not be found.'
- 'invalid_auth: Authentication token is invalid.'
- 'rate_limited: You are sending requests too quickly.'
- '404 Not Found: Check endpoint URL.'
- '429 Too Many Requests: Reduce request rate.'
- '401 Unauthorized: Verify token and permissions'
- '404 Not Found: Check endpoint and parameters'
- '400 Bad Request: Check the JSON format of the alert payload.'
- '401 Unauthorized: Ensure the API URL is correct and accessible.'
- Duplicate alerts will be ignored.
- '401 Unauthorized: Check your token or OAuth scopes'
- '404 Not Found: Verify the endpoint path'
- 'Duplicate alert: AlertOps will recognize the new alert as a duplicate and ignore
  the alert if it matches an existing Open Alert'
- Ignoring duplicate alerts with status 'run:errored'.
- '400 Bad Request: Check JSON format in the POST body.'
- '401 Unauthorized: Ensure the API URL is correctly configured.'
- '400 Bad Request: Check the payload structure.'
- '401 Unauthorized: Ensure the API URL is correct.'
- '404 Not Found: Verify the API URL.'
- '403 Forbidden: Check API key permissions.'
- 'Duplicate alert: AlertOps will recognize the new alert as a duplicate and ignore
  it if it matches an existing Open Alert.'
- 'IncidentStatus status ''error'': AlertOps will create an incident.'
- 'IncidentStatus status ''reachable'': AlertOps will close the incident.'
- Duplicate alert ignored if matches an existing Open Alert
- '404 Not Found: Check the endpoint path or resource identifier'
- '404 Not Found: Check the endpoint path or parameters.'
- '401 Unauthorized: Verify client credentials and token.'
- Duplicate alert ignored if statusid contains 'OPENED'.
- Incident closed if statusid contains 'RESOLVED/CLOSED/COMPLETED/NO CONTACT'.
- 'INVALID_TOKEN: The token provided is invalid.'
- '403 FORBIDDEN: The request was valid but the server is refusing to respond.'
- 'The message is not found in the Inbound Messages table. Solution: Check to see
  if you have sent the email to the correct email address.'
- 'The message can be found in Inbound Messages, but the status is Mapping Failed.
  Solution: Check that the Source Name data matches the Source Name in the Mapping
  Field.'
- 'The Status is Mapped but you did not receive any notifications. Solution 1: Check
  that the Source Identifier data matches the Source Identifier in the Mapping Field.
  Solution 2: Verify that the notifications were sent out by AlertOps.'
- '404 Not Found: Check the endpoint or resource ID'
- '401 Unauthorized: Verify client ID and secret'
- '401 Unauthorized: Verify client credentials or token.'
- Check similarity thresholds - they may be too high
- Verify exact match fields are not preventing appropriate merges
- Ensure time window is sufficient for your alert patterns
- 'ERROR_INVALID_ENTITLEMENT: Check user permissions for actions'
- 'ERROR_ALERT_NOT_FOUND: Ensure the alert ID is correct'
- '401 Unauthorized: Verify token validity'
- '401 Unauthorized: Recheck API keys or permissions'
- 'INVALID_CREDENTIALS: Check your client_id and client_secret.'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of your API calls.'
- '401 Unauthorized: Recheck your settings.'
- 'Invalid SSO URL: Check the Google IdP SSO URL configuration'
- '401 Unauthorized: Check your credentials and scopes.'
- '500 Internal Server Error: Retry the request later.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuth2
  - API Username
  - API User Secret
  - API Tracking Identifier
  - Token
  - InboundIntegrations_GlobalAccess
  - AD FS
  - Azure Active Directory
  - Ping
  - Google
  - OneLogin
  - OKTA
client:
  base_url: https://api.alertops.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.alertops.com/oauth2/token
    client_id: '{{ dlt.secrets[''alertops_client_id''] }}'
    client_secret: '{{ dlt.secrets[''alertops_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''alertops_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
