resources:
- name: order
  endpoint:
    path: /v3/orders/{id}
    method: POST
    data_selector: v3OrderResponse
- name: Fraud Management
  endpoint:
    path: /fraud-management
    method: GET
- name: Abuse Prevention
  endpoint:
    path: /abuse-prevention
    method: GET
- name: Account Protection
  endpoint:
    path: /account-protection
    method: GET
- name: Chargeback Recovery
  endpoint:
    path: /chargeback-recovery-overview
    method: GET
- name: Elements for PSPs
  endpoint:
    path: /psp-integration-guide
    method: GET
- name: 3DS Recommendations
  endpoint:
    path: /3ds-recommendation
    method: GET
- name: 3DS Execution
  endpoint:
    path: /3ds-execution
    method: GET
- name: Tokenization
  endpoint:
    path: /card-vaulting
    method: GET
- name: Fraud Management
  endpoint:
    path: /fraud-management
    method: GET
- name: Abuse Prevention
  endpoint:
    path: /abuse-prevention
    method: GET
- name: Account Protection
  endpoint:
    path: /account-protection
    method: GET
- name: Chargeback Recovery
  endpoint:
    path: /chargeback-recovery-overview
    method: GET
- name: Elements for PSPs
  endpoint:
    path: /psp-integration-guide
    method: GET
- name: 3DS Recommendations
  endpoint:
    path: /3ds-recommendation
    method: GET
- name: 3DS Execution
  endpoint:
    path: /3ds-execution
    method: GET
- name: Tokenization
  endpoint:
    path: /card-vaulting
    method: GET
- name: application_delegate
  endpoint:
    path: /application/delegate
    method: GET
    data_selector: initialization
    params: {}
- name: forter_orders_api
  endpoint:
    path: /api/data-objects/ConnectionInformation
    method: POST
    data_selector: connectionInformation
- name: Order API
  endpoint:
    path: /order
    method: POST
    data_selector: decision
    params: {}
- name: Order API
  endpoint:
    path: /reference/order-v3
    method: POST
- name: transaction
  endpoint:
    path: /api/v1/transaction
    method: POST
    data_selector: data
    params: {}
- name: Order Status
  endpoint:
    path: /order/status
    method: POST
    data_selector: transaction
    params: {}
- name: Dispute API
  endpoint:
    path: /reference/dispute
    method: POST
    data_selector: notification
    params: {}
- name: order_history
  endpoint:
    path: /historical_data/order_history
    method: POST
    data_selector: data
    params: {}
- name: dispute_history
  endpoint:
    path: /historical_data/dispute_history
    method: POST
    data_selector: data
    params: {}
- name: signup_history
  endpoint:
    path: /historical_data/signup_history
    method: POST
    data_selector: data
    params: {}
- name: login_history
  endpoint:
    path: /historical_data/login_history
    method: POST
    data_selector: data
    params: {}
- name: merchant
  endpoint:
    path: /merchants
    method: POST
    data_selector: merchantId
    params: {}
- name: 3ds-recommendation
  endpoint:
    path: /merchants/[id]/3ds-recommendation
    method: POST
    data_selector: offerings
    params: {}
- name: 3ds-execution
  endpoint:
    path: /merchants/[id]/3ds-execution
    method: POST
    data_selector: offerings
    params: {}
- name: merchant
  endpoint:
    path: /merchants
    method: POST
    data_selector: merchantCreationResponse
- name: 3ds_recommendation_enrollment
  endpoint:
    path: /merchants/{id}/3ds-recommendation
    method: POST
    data_selector: response
    params: {}
- name: 3ds_execution_enrollment
  endpoint:
    path: /merchants/{id}/3ds-execution
    method: POST
- name: 3ds_execution_enrollment_status
  endpoint:
    path: /3ds-execution/enrollment/status
    method: GET
- name: 3ds_recommendation_enrollment_status
  endpoint:
    path: /merchants/{id}/3ds_recommendation/{requestid}/status
    method: GET
- name: 3ds_execution_enrollment_status
  endpoint:
    path: /merchants/{id}/3ds_execution/{requestid}/status
    method: GET
    data_selector: status
- name: ForterSDK
  endpoint:
    path: /fortersdk
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /api/data-objects/Order
    method: POST
    data_selector: order
    params: {}
- name: hybrid_mobile_order
  endpoint:
    path: /api/v1/orders
    method: POST
    data_selector: order
    params: {}
- name: tokenization
  endpoint:
    path: /tokenization
    method: POST
    data_selector: token
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: transactionResult
- name: payments
  endpoint:
    path: /sandbox/ipp/payments-gateway/v2/payments/
    method: POST
    data_selector: ''
    params: {}
- name: client-key
  endpoint:
    path: /client-key
    method: POST
    data_selector: token
- name: card_details
  endpoint:
    path: /collect/card-details
    method: POST
    data_selector: card
    params: {}
- name: cvc
  endpoint:
    path: /collect/cvc
    method: POST
    data_selector: cvc
    params: {}
- name: update_card
  endpoint:
    path: /account-updater/card/update
    method: POST
- name: update_token
  endpoint:
    path: /account-updater/token/update
    method: POST
- name: enroll_token
  endpoint:
    path: /account-updater/token/enroll
    method: POST
notes:
- Javascript snippet version 27 is now available. We recommend upgrading for best
  performance.
- All requests to Forterâ€™s APIs must be made over HTTPS.
- Note that your Site ID and API Key are different for your Forter test site and production
  site.
- Uses connection pooling to maintain persistent connections.
- Reuses TLS sessions to minimize handshake overhead.
- Ensure you use the snippet corresponding to the environment you're working with,
  as a different snippet is provided for your sandbox and your production site.
- The ForterSDK needs to be initialized from the Application Delegate.
- Ensure that the forterMobileUID is passed to the Order API in exactly the same casing
  as returned by the SDK.
- Make sure that the forter javascript is also located within the html of the checkout
  page so that the relevant behavioral and cyber data can be captured
- When the API request is made to Forter, the ordertype of the request body should
  have an enum value of 'web' and not mobile
- Forter decisions are returned as approve or decline for transactions.
- Pre-authorization should call the Order API prior to payment gateway authorization.
- Post-authorization should call the Order API after receiving authorization response.
- Provide five key areas of information about the transaction at checkout.
- Order status updates can be sent for up to 18 months after checkout.
- Notifying Forter of chargebacks and fraud alerts is extremely important.
- Webhook configurations are mandatory for processors that offer webhook capabilities.
- Forter requires 12 months of order data to account for spikes in traffic.
- Forter requires 12 months of historical dispute data covering all of the order data
  provided.
- Forter requires 6 to 12 months of historical account signup data.
- Forter requires 6 months of historical account login data.
- Provide 1 year historical data for returns and INR, where possible, so that INR
  & returns policies can take effect immediately.
- Forter allows up to 10K sites to be created via the API.
- PSP supports 3DS requests
- Verify that you can pass the card's BIN number & last four digits in Forter's Order
  API request.
- Verify that both Forter's and your PSP's integration requirements are met.
- We strongly recommend using a webhook to send notifications about payment authorization
  and disputes if your PSP is supported.
- The ordertype of the request body should have an enum value of 'web' for orders
  placed on a mobile web browser.
- Uses Forter tokenization solution to process payments without handling raw card
  details.
- Must be PCI Level 1 compliant to implement this approach.
- Some Payment Service Providers (PSPs) require HMAC signing to verify request integrity.
- Payment Service Providers (PSPs) employ various signing algorithms.
- The same credentials are used for both the Detokenization Proxy and the Tokenization
  API.
- It is recommended to use the smallest TTL value necessary for the end-user to successfully
  complete the transaction in the frontend.
- CVC token is short-lived, in line with PCI requirements.
- Forter's JS script and the accompanying pixel fall under the category of 'strictly
  necessary' and 'functional' because the script is only functioning to prevent fraud
  and abuse on your website.
- Forter does NOT currently refund payment for any orders it decisions. Please be
  sure to configure the relevant processes in your OMS or Shopify admin for cases
  where customers request or require a refund.
errors:
- '400: Bad Request (Often missing a required parameter)'
- '401: Unauthorized (No valid API key provided)'
- '404: Not Found (The requested item doesn''t exist)'
- '500: Server Error (Something went wrong on Forter''s end)'
- '400: Bad Request'
- '401, 403: Unauthorized'
- '404: Not Found'
- '429: Too Many Requests'
- '500, 503: Internal Server Error'
- 'Invalid request format: Ensure JSON structure is correct.'
- 'Unauthorized: Check API key or access permissions.'
- 400 Bad Request (Often missing a required parameter)
- 401 Unauthorized (No valid API key provided)
- 404 Not Found (The requested item doesn't exist)
- 500 Server Error (Something went wrong on Forter's end)
- bad request (often missing a required parameter)
- unauthorized (no valid api key provided)
- not found (the requested item doesn't exist)
- server error (something went wrong on forter's end)
- 'BAD_REQUEST: Often missing a required parameter'
- 'UNAUTHORIZED: No valid API key provided'
- 'NOT_FOUND: The requested item doesn''t exist'
- 'SERVER_ERROR: Something went wrong on Forter''s end'
- '407: Proxy authentication error (check credentials)'
- '502: Network error while reaching the third-party API'
- '555: Token not found'
- '556: Validation error (check inputs)'
- '565: Unexpected internal error'
- '401 Unauthorized: Recheck OAuth token.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.forter-secure.com
source_metadata: null
