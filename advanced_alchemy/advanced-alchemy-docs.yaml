resources:
- name: Post
  endpoint:
    path: /services/data/vXX.X/sobjects/Post
    method: GET
    data_selector: records
- name: Tag
  endpoint:
    path: /services/data/vXX.X/sobjects/Tag
    method: GET
    data_selector: records
- name: Post
  endpoint:
    path: /repositories/Post
    method: GET
    data_selector: records
    params: {}
- name: Tag
  endpoint:
    path: /repositories/Tag
    method: GET
    data_selector: records
    params: {}
- name: post
  endpoint:
    path: /posts
    method: POST
    data_selector: data
    params: {}
- name: update_post
  endpoint:
    path: /posts/{post_id}
    method: PUT
    data_selector: data
    params: {}
- name: get_trending_posts
  endpoint:
    path: /posts/trending
    method: GET
    data_selector: data
    params: {}
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: show-current-revision
  endpoint:
    path: /alchemy/show-current-revision
    method: GET
    data_selector: current_revision
    params:
      config: path.to.alchemy-config.config
- name: downgrade
  endpoint:
    path: /alchemy/downgrade
    method: GET
    data_selector: downgrade_revision
    params:
      config: path.to.alchemy-config.config
      revision: '[REVISION]'
- name: upgrade
  endpoint:
    path: /alchemy/upgrade
    method: GET
    data_selector: upgrade_revision
    params:
      config: path.to.alchemy-config.config
      revision: '[REVISION]'
- name: init
  endpoint:
    path: /alchemy/init
    method: GET
    data_selector: initialize_migrations
    params:
      config: path.to.alchemy-config.config
      directory: '[DIRECTORY]'
- name: make-migrations
  endpoint:
    path: /alchemy/make-migrations
    method: GET
    data_selector: create_migration
    params:
      config: path.to.alchemy-config.config
- name: drop-all
  endpoint:
    path: /alchemy/drop-all
    method: GET
    data_selector: drop_all_tables
    params:
      config: path.to.alchemy-config.config
- name: dump-data
  endpoint:
    path: /alchemy/dump-data
    method: GET
    data_selector: dump_data
    params:
      config: path.to.alchemy-config.config
      table: TABLE_NAME
      dir: ./fixtures
- name: products
  endpoint:
    path: /fixtures/products.json
    method: GET
    data_selector: items
    params: {}
- name: products
  endpoint:
    path: /fixtures/products.json
    method: GET
    data_selector: records
    params: {}
- name: products
  endpoint:
    path: /products
    method: POST
    data_selector: products
    params: {}
- name: products
  endpoint:
    path: /fixtures/product.json
    method: GET
    data_selector: records
    params: {}
- name: add
  endpoint:
    path: /async/add
    method: POST
    data_selector: data
    params: {}
- name: add_many
  endpoint:
    path: /async/add_many
    method: POST
    data_selector: data
    params: {}
- name: check_health
  endpoint:
    path: /async/check_health
    method: GET
    data_selector: health_status
    params: {}
- name: delete_many
  endpoint:
    path: /repository/delete_many
    method: DELETE
    data_selector: deleted_instances
- name: delete_where
  endpoint:
    path: /repository/delete_where
    method: DELETE
    data_selector: deleted_instances
- name: exists
  endpoint:
    path: /repository/exists
    method: GET
    data_selector: exists
- name: exists
  endpoint:
    path: /advanced_alchemy/repository/SQLAlchemyAsyncRepository/exists
    method: GET
    data_selector: records
    params: {}
- name: get
  endpoint:
    path: /advanced_alchemy/repository/SQLAlchemyAsyncRepository/get
    method: GET
    data_selector: records
    params: {}
- name: get_and_update
  endpoint:
    path: /advanced_alchemy/repository/SQLAlchemyAsyncRepository/get_and_update
    method: GET
    data_selector: records
    params: {}
- name: get_one_or_none
  endpoint:
    path: /advanced_alchemy/repository/get_one_or_none
    method: GET
- name: get_or_upsert
  endpoint:
    path: /advanced_alchemy/repository/get_or_upsert
    method: GET
- name: list
  endpoint:
    path: /advanced_alchemy/repository/list
    method: GET
- name: FilterMap
  endpoint:
    path: /advanced_alchemy/filters/FilterMap
    method: GET
    data_selector: records
- name: InAnyFilter
  endpoint:
    path: /advanced_alchemy/filters/InAnyFilter
    method: GET
    data_selector: records
- name: LimitOffset
  endpoint:
    path: /advanced_alchemy/filters/LimitOffset
    method: GET
    data_selector: records
- name: LogicalOperatorMap
  endpoint:
    path: /advanced_alchemy/filters/LogicalOperatorMap
    method: GET
    data_selector: records
- name: MultiFilter
  endpoint:
    path: /advanced_alchemy/filters/MultiFilter
    method: GET
    data_selector: records
- name: NotExistsFilter
  endpoint:
    path: /advanced_alchemy/filters/NotExistsFilter
    method: GET
    data_selector: records
- name: NotInCollectionFilter
  endpoint:
    path: /advanced_alchemy/filters/NotInCollectionFilter
    method: GET
    data_selector: records
- name: NotInCollectionFilter
  endpoint:
    path: /advanced_alchemy/filters/NotInCollectionFilter
    method: GET
    data_selector: records
- name: NotInSearchFilter
  endpoint:
    path: /advanced_alchemy/filters/NotInSearchFilter
    method: GET
    data_selector: records
- name: OnBeforeAfter
  endpoint:
    path: /advanced_alchemy/filters/OnBeforeAfter
    method: GET
    data_selector: records
- name: get_one_or_none
  endpoint:
    path: /get_one_or_none
    method: async
    data_selector: instance
    params: {}
- name: list
  endpoint:
    path: /list
    method: async
    data_selector: instances
    params: {}
- name: list_and_count
  endpoint:
    path: /list_and_count
    method: async
    data_selector: results
    params: {}
- name: SQLAlchemyAsyncRepositoryService
  endpoint:
    path: /advanced_alchemy/service/SQLAlchemyAsyncRepositoryService
    method: GET
    data_selector: records
- name: SQLAlchemySyncQueryService
  endpoint:
    path: /advanced_alchemy/service/SQLAlchemySyncQueryService
    method: GET
- name: SQLAlchemySyncRepositoryReadService
  endpoint:
    path: /advanced_alchemy/service/SQLAlchemySyncRepositoryReadService
    method: GET
- name: exists
  endpoint:
    path: /exists
    method: GET
    data_selector: records
    params: {}
- name: get
  endpoint:
    path: /get
    method: GET
    data_selector: records
    params: {}
- name: get_one
  endpoint:
    path: /get_one
    method: GET
    data_selector: records
    params: {}
- name: create
  endpoint:
    path: /advanced_alchemy/service/SQLAlchemySyncRepositoryService/create
    method: POST
- name: create_many
  endpoint:
    path: /advanced_alchemy/service/SQLAlchemySyncRepositoryService/create_many
    method: POST
- name: delete
  endpoint:
    path: /advanced_alchemy/service/SQLAlchemySyncRepositoryService/delete
    method: DELETE
- name: delete_many
  endpoint:
    path: /advanced_alchemy/service/SQLAlchemySyncRepositoryService/delete_many
    method: DELETE
- name: delete_where
  endpoint:
    path: /advanced_alchemy/service/SQLAlchemySyncRepositoryService/delete_where
    method: DELETE
- name: filters
  endpoint:
    path: /advanced_alchemy/service/filters
    method: GET
- name: upsert
  endpoint:
    path: /advanced_alchemy/service/upsert
    method: POST
- name: update
  endpoint:
    path: /advanced_alchemy/service/update
    method: PUT
- name: update_many
  endpoint:
    path: /advanced_alchemy/service/update_many
    method: PUT
- name: upsert_many
  endpoint:
    path: /advanced_alchemy/service/upsert_many
    method: POST
notes:
- 'Released: 2025-04-28'
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Advanced Alchemy’s repository pattern provides a clean, consistent interface for
  database operations.
- Both repositories share the same transaction.
- Services provide high-level methods for common operations.
- Uses SQLAlchemy types for database integration.
- Some objects like Contact may return nulls in deeply nested fields
- Keep your fixtures in a dedicated directory (e.g., 'fixtures/')
- Name your fixture files after the corresponding table names
- Always check if data exists before seeding to avoid duplicates or update records
- Seed tables in the correct order to respect foreign key constraints
- Ensure your fixture data meets your model’s constraints
- Consider having different fixtures for development, testing, and production
- Keep your fixtures under version control with your application code
- Keep your fixtures in a dedicated directory (e.g., `fixtures/`).
- Name your fixture files after the corresponding table names.
- Always check if data exists before seeding to avoid duplicates or update records.
- Seed tables in the correct order to respect foreign key constraints.
- Ensure your fixture data meets your model’s constraints.
- Consider having different fixtures for development, testing, and production.
- Keep your fixtures under version control with your application code.
- This module is designed to be database-agnostic where possible, with specialized
  optimizations for specific database backends where appropriate.
- 'Added in version 1.4.14: - added the `cache_ok` flag to allow some configurability
  of caching for `TypeDecorator` classes.'
- 'Added in version 1.4.28: - added the `ExternalType` mixin which generalizes the
  `cache_ok` flag to both the `TypeDecorator` and `UserDefinedType` classes.'
- Requires the pgcrypto extension to be installed in the database.
- added the cache_ok flag to allow some configurability of caching for TypeDecorator
  classes
- added the ExternalType mixin which generalizes the cache_ok flag to both the TypeDecorator
  and UserDefinedType classes
- Check health returns True if healthy.
- Optional dictionary of templates to use for friendlier error messages to clients
- Types for specific filtering operations available.
- Set default order options for queries.
- In most cases, you will want to set match_fields to the combination of attributes,
  excluded the primary key, that define uniqueness for a row.
- Wrap SQLAlchemy exceptions in a RepositoryError. When set to False, the original
  exception will be raised.
errors:
- DuplicateKeyError
- ForeignKeyError
- ImproperConfigurationError
- IntegrityError
- MissingDependencyError
- MultipleResultsFoundError
- NotFoundError
- RepositoryError
- SerializationError
auth_info:
  mentioned_objects: []
client:
  base_url: sqlite+aiosqlite:///db.sqlite3
source_metadata: null
