resources:
- name: simpleJobPostings
  endpoint:
    path: /v2/simpleJobPostings
    method: POST
    data_selector: null
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: open_source_portfolio
  endpoint:
    path: /adiatiayu/how-i-built-a-curated-automated-open-source-portfolio
    method: GET
    data_selector: portfolio_data
- name: pull_requests
  endpoint:
    path: /repos/{owner}/{repo}/pulls
    method: GET
    data_selector: '[]'
    params: {}
- name: issues
  endpoint:
    path: /repos/{owner}/{repo}/issues
    method: GET
    data_selector: '[]'
    params: {}
- name: blog
  endpoint:
    path: /content/blog
    method: GET
    data_selector: posts
    params: {}
- name: Popcorn Movies and TV
  endpoint:
    path: /popcorn.forem.com
    method: GET
- name: DUMB DEV Community
  endpoint:
    path: /dumb.dev
    method: GET
- name: Design Community
  endpoint:
    path: /design.forem.com
    method: GET
- name: Golf Forem
  endpoint:
    path: /golf.forem.com
    method: GET
- name: Security Forem
  endpoint:
    path: /zeroday.forem.com
    method: GET
- name: Maker Forem
  endpoint:
    path: /maker.forem.com
    method: GET
- name: Scale Forem
  endpoint:
    path: /scale.forem.com
    method: GET
- name: Forem Core
  endpoint:
    path: /core.forem.com
    method: GET
- name: Crypto Forem
  endpoint:
    path: /crypto.forem.com
    method: GET
- name: Parenting
  endpoint:
    path: /parenting.forem.com
    method: GET
- name: apps
  endpoint:
    path: /apps
    method: GET
    data_selector: data
- name: activity
  endpoint:
    path: /search/issues
    method: GET
    data_selector: items
    params:
      q: is:pr -author:${GITHUB_USERNAME} ... -user:dependabot -user:github-actions[bot]
        updated:>=${yearStart}
- name: community
  endpoint:
    path: /communities
    method: GET
    data_selector: communities
- name: community_posts
  endpoint:
    path: /api/v1/community_posts
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: blog
  endpoint:
    path: /src/content/blog
    method: GET
    data_selector: records
    params: {}
- name: glossaire
  endpoint:
    path: /locutionis/glossaire
    method: GET
    data_selector: data
    params: {}
- name: definitions
  endpoint:
    path: /locutionis/alliteration
    method: GET
    data_selector: data
    params: {}
- name: quiz
  endpoint:
    path: /locutionis/quiz
    method: GET
    data_selector: data
    params: {}
- name: Royal Achievements
  endpoint:
    path: /royal_achievements
    method: GET
    data_selector: achievements
    params: {}
- name: Royal Dashboard Panels
  endpoint:
    path: /royal_dashboard_panels
    method: GET
    data_selector: dashboard_panels
    params: {}
- name: Classical Stats Table
  endpoint:
    path: /classical_stats
    method: GET
    data_selector: stats
    params: {}
- name: Classical Milestones
  endpoint:
    path: /classical_milestones
    method: GET
    data_selector: milestones
    params: {}
- name: articles
  endpoint:
    path: /api/v1/articles
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: community
  endpoint:
    path: /communities
    method: GET
    data_selector: communities
- name: user
  endpoint:
    path: /users/:id
    method: GET
    data_selector: records
    params: {}
- name: order
  endpoint:
    path: /orders
    method: POST
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /users/:id
    method: GET
    data_selector: user
    params: {}
- name: glossaire
  endpoint:
    path: /locutionis/glossaire
    method: GET
    data_selector: records
    params: {}
- name: definitions
  endpoint:
    path: /locutionis/alliteration
    method: GET
    data_selector: records
    params: {}
- name: quiz
  endpoint:
    path: /locutionis/quiz
    method: GET
    data_selector: records
    params: {}
- name: video
  endpoint:
    path: /sora/videos
    method: POST
    data_selector: job_id
    params: {}
- name: royal_achievements
  endpoint:
    path: /royal/achievements
    method: GET
    data_selector: achievements
- name: classical_stats
  endpoint:
    path: /classical/stats
    method: GET
    data_selector: stats
- name: classical_milestones
  endpoint:
    path: /classical/milestones
    method: GET
    data_selector: milestones
- name: docs
  endpoint:
    path: /docs/*
    method: GET
    data_selector: raw content
- name: user
  endpoint:
    path: /users/:id
    method: GET
    data_selector: user
    params: {}
- name: video
  endpoint:
    path: /videos
    method: POST
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: web_scraping
  endpoint:
    path: /v1/scrape
    method: POST
    data_selector: data
    params: {}
- name: docs
  endpoint:
    path: /docs/*
    method: GET
    data_selector: content
    params: {}
- name: community
  endpoint:
    path: /communities
    method: GET
    data_selector: communities
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: articles
  endpoint:
    path: /articles
    method: GET
    data_selector: articles
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: posts
  endpoint:
    path: /t/discuss
    method: GET
- name: Popcorn Movies and TV
  endpoint:
    path: /popcorn
    method: GET
- name: DUMB DEV Community
  endpoint:
    path: /dumb
    method: GET
- name: Design Community
  endpoint:
    path: /design
    method: GET
- name: Golf Forem
  endpoint:
    path: /golf
    method: GET
- name: Security Forem
  endpoint:
    path: /security
    method: GET
- name: Maker Forem
  endpoint:
    path: /maker
    method: GET
- name: Scale Forem
  endpoint:
    path: /scale
    method: GET
- name: Forem Core
  endpoint:
    path: /core
    method: GET
- name: Crypto Forem
  endpoint:
    path: /crypto
    method: GET
- name: Parenting
  endpoint:
    path: /parenting
    method: GET
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: branch_creation
  endpoint:
    path: /create_branch
    method: POST
    data_selector: branch_info
- name: stash_changes
  endpoint:
    path: /stash
    method: POST
    data_selector: stash_info
- name: commit_changes
  endpoint:
    path: /commit
    method: POST
    data_selector: commit_info
- name: push_changes
  endpoint:
    path: /push
    method: POST
    data_selector: push_info
- name: pull_request
  endpoint:
    path: /pull_request
    method: POST
    data_selector: pull_request_info
- name: posts
  endpoint:
    path: /t/discuss
    method: GET
    data_selector: comments
    params: {}
- name: posts
  endpoint:
    path: /t/discuss
    method: GET
    data_selector: threads
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: upstream_repo
  endpoint:
    path: /upstream
    method: GET
    data_selector: branches
    params: {}
- name: Popcorn Movies and TV
  endpoint:
    path: /popcorn.forem.com
    method: GET
    data_selector: records
- name: DUMB DEV Community
  endpoint:
    path: /dumb.dev.to
    method: GET
    data_selector: records
- name: Design Community
  endpoint:
    path: /design.forem.com
    method: GET
    data_selector: records
- name: Golf Forem
  endpoint:
    path: /golf.forem.com
    method: GET
    data_selector: records
- name: Security Forem
  endpoint:
    path: /zeroday.forem.com
    method: GET
    data_selector: records
- name: Maker Forem
  endpoint:
    path: /maker.forem.com
    method: GET
    data_selector: records
- name: Scale Forem
  endpoint:
    path: /scale.forem.com
    method: GET
    data_selector: records
- name: Forem Core
  endpoint:
    path: /core.forem.com
    method: GET
    data_selector: records
- name: Crypto Forem
  endpoint:
    path: /crypto.forem.com
    method: GET
    data_selector: records
- name: Parenting
  endpoint:
    path: /parenting.forem.com
    method: GET
    data_selector: records
- name: posts
  endpoint:
    path: /api/articles
    method: GET
    data_selector: articles
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: data
    params: {}
- name: pull_requests
  endpoint:
    path: /repos/{owner}/{repo}/pulls
    method: GET
    data_selector: items
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: repositories
  endpoint:
    path: /user/repos
    method: GET
    data_selector: '[]'
    params: {}
- name: collaborators
  endpoint:
    path: /repos/{owner}/{repo}/collaborators
    method: GET
    data_selector: '[]'
    params: {}
- name: issues
  endpoint:
    path: /repos/{owner}/{repo}/issues
    method: GET
    data_selector: '[]'
    params: {}
- name: fetch_branch
  endpoint:
    path: /git/fetch/branch
    method: GET
    data_selector: branches
- name: remote_repo
  endpoint:
    path: /git/remote
    method: POST
    data_selector: remote-repo
    params: {}
- name: fetch_repo
  endpoint:
    path: /git/fetch
    method: POST
    data_selector: fetched-branches
    params: {}
- name: checkout_branch
  endpoint:
    path: /git/checkout
    method: POST
    data_selector: checked-out-branch
    params: {}
- name: Popcorn Movies and TV
  endpoint:
    path: /popcorn.forem.com
    method: GET
- name: DUMB DEV Community
  endpoint:
    path: /dumb.dev.to
    method: GET
- name: Design Community
  endpoint:
    path: /design.forem.com
    method: GET
- name: Golf Forem
  endpoint:
    path: /golf.forem.com
    method: GET
- name: Security Forem
  endpoint:
    path: /zeroday.forem.com
    method: GET
- name: Maker Forem
  endpoint:
    path: /maker.forem.com
    method: GET
- name: Scale Forem
  endpoint:
    path: /scale.forem.com
    method: GET
- name: Forem Core
  endpoint:
    path: /core.forem.com
    method: GET
- name: Crypto Forem
  endpoint:
    path: /crypto.forem.com
    method: GET
- name: Parenting
  endpoint:
    path: /parenting.forem.com
    method: GET
- name: pull_requests
  endpoint:
    path: /repos/{owner}/{repo}/pulls
    method: GET
    data_selector: data
    params: {}
- name: Open Forem
  endpoint:
    path: /open_forem
    method: GET
- name: Popcorn Movies and TV
  endpoint:
    path: /popcorn_movies_and_tv
    method: GET
- name: DUMB DEV Community
  endpoint:
    path: /dumb_dev_community
    method: GET
- name: Design Community
  endpoint:
    path: /design_community
    method: GET
- name: Golf Forem
  endpoint:
    path: /golf_forem
    method: GET
- name: Security Forem
  endpoint:
    path: /security_forem
    method: GET
- name: Maker Forem
  endpoint:
    path: /maker_forem
    method: GET
- name: Scale Forem
  endpoint:
    path: /scale_forem
    method: GET
- name: Forem Core
  endpoint:
    path: /forem_core
    method: GET
- name: Crypto Forem
  endpoint:
    path: /crypto_forem
    method: GET
- name: Parenting
  endpoint:
    path: /parenting
    method: GET
- name: sync_communication
  endpoint:
    path: /sync_communication
    method: GET
    data_selector: topics
    params: {}
- name: essential_things_in_sync_communication
  endpoint:
    path: /essential_things_in_sync_communication
    method: GET
    data_selector: topics
    params: {}
- name: repositories
  endpoint:
    path: /user/repos
    method: GET
    data_selector: repositories
    params: {}
- name: issues
  endpoint:
    path: /repos/{owner}/{repo}/issues
    method: GET
    data_selector: issues
    params: {}
- name: collaborators
  endpoint:
    path: /repos/{owner}/{repo}/collaborators
    method: GET
    data_selector: collaborators
    params: {}
- name: CONTRIBUTING
  endpoint:
    path: /CONTRIBUTING.md
    method: GET
    data_selector: content
    params: {}
- name: README
  endpoint:
    path: /README.md
    method: GET
    data_selector: content
    params: {}
- name: community_posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: accepted_prs
  endpoint:
    path: /accepted_prs
    method: GET
    data_selector: records
    params: {}
- name: podcast_transcripts
  endpoint:
    path: /podcast-transcripts
    method: GET
    data_selector: transcripts
    params: {}
- name: community
  endpoint:
    path: /api/community
    method: GET
    data_selector: communities
    params: {}
- name: community
  endpoint:
    path: /api/v1/community
    method: GET
    data_selector: data
- name: popcorn_movies_and_tv
  endpoint:
    path: /popcorn
    method: GET
    data_selector: records
    params: {}
- name: dumb_dev_community
  endpoint:
    path: /dumb
    method: GET
    data_selector: records
    params: {}
- name: design_community
  endpoint:
    path: /design
    method: GET
    data_selector: records
    params: {}
- name: golf_forems
  endpoint:
    path: /golf
    method: GET
    data_selector: records
    params: {}
- name: security_forems
  endpoint:
    path: /security
    method: GET
    data_selector: records
    params: {}
- name: maker_forems
  endpoint:
    path: /maker
    method: GET
    data_selector: records
    params: {}
- name: scale_forems
  endpoint:
    path: /scale
    method: GET
    data_selector: records
    params: {}
- name: forem_core
  endpoint:
    path: /core
    method: GET
    data_selector: records
    params: {}
- name: crypto_forems
  endpoint:
    path: /crypto
    method: GET
    data_selector: records
    params: {}
- name: parenting
  endpoint:
    path: /parenting
    method: GET
    data_selector: records
    params: {}
- name: community
  endpoint:
    path: /communities
    method: GET
    data_selector: data
    params: {}
- name: podcast_transcripts
  endpoint:
    path: /podcast-transcripts
    method: GET
    data_selector: transcripts
- name: maintainers_guidelines
  endpoint:
    path: /docs/maintainers-guidelines
    method: GET
    data_selector: guidelines
    params: {}
- name: becoming_a_maintainer_course
  endpoint:
    path: /courses/becoming-a-maintainer
    method: GET
    data_selector: course_details
    params: {}
- name: popcorn_movies
  endpoint:
    path: /popcorn
    method: GET
- name: dumb_dev_community
  endpoint:
    path: /dumb
    method: GET
- name: design_community
  endpoint:
    path: /design
    method: GET
- name: golf_forem
  endpoint:
    path: /golf
    method: GET
- name: maker_forem
  endpoint:
    path: /maker
    method: GET
- name: security_forem
  endpoint:
    path: /security
    method: GET
- name: scale_forem
  endpoint:
    path: /scale
    method: GET
- name: forem_core
  endpoint:
    path: /core
    method: GET
- name: crypto_forem
  endpoint:
    path: /crypto
    method: GET
- name: community
  endpoint:
    path: /api/v1/community
    method: GET
    data_selector: communities
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
- name: maintainers_guidelines
  endpoint:
    path: /guidelines
    method: GET
    data_selector: records
- name: becoming_a_maintainer_course
  endpoint:
    path: /course
    method: GET
    data_selector: records
- name: subforem
  endpoint:
    path: /subforems
    method: GET
    data_selector: subforems
- name: Popcorn Movies and TV
  endpoint:
    path: //popcorn.forem.com
    method: GET
- name: DUMB DEV Community
  endpoint:
    path: //dumb.dev.to
    method: GET
- name: Design Community
  endpoint:
    path: //design.forem.com
    method: GET
- name: Golf Forem
  endpoint:
    path: //golf.forem.com
    method: GET
- name: Security Forem
  endpoint:
    path: //zeroday.forem.com
    method: GET
- name: Maker Forem
  endpoint:
    path: //maker.forem.com
    method: GET
- name: Scale Forem
  endpoint:
    path: //scale.forem.com
    method: GET
- name: Forem Core
  endpoint:
    path: //core.forem.com
    method: GET
- name: Crypto Forem
  endpoint:
    path: //crypto.forem.com
    method: GET
- name: Parenting
  endpoint:
    path: //parenting.forem.com
    method: GET
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
    params: {}
- name: comments
  endpoint:
    path: /api/v1/comments
    method: GET
    data_selector: comments
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: posts
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Popcorn Movies and TV
  endpoint:
    path: /popcorn.forem.com
    method: GET
- name: DUMB DEV Community
  endpoint:
    path: /dumb.dev.to
    method: GET
- name: Design Community
  endpoint:
    path: /design.forem.com
    method: GET
- name: Golf Forem
  endpoint:
    path: /golf.forem.com
    method: GET
- name: Security Forem
  endpoint:
    path: /zeroday.forem.com
    method: GET
- name: Maker Forem
  endpoint:
    path: /maker.forem.com
    method: GET
- name: Scale Forem
  endpoint:
    path: /scale.forem.com
    method: GET
- name: Forem Core
  endpoint:
    path: /core.forem.com
    method: GET
- name: Crypto Forem
  endpoint:
    path: /crypto.forem.com
    method: GET
- name: Parenting
  endpoint:
    path: /parenting.forem.com
    method: GET
- name: Popcorn Movies and TV
  endpoint:
    path: //popcorn.forem.com
    method: GET
- name: DUMB DEV Community
  endpoint:
    path: //dumb.dev.to
    method: GET
- name: Design Community
  endpoint:
    path: //design.forem.com
    method: GET
- name: Golf Forem
  endpoint:
    path: //golf.forem.com
    method: GET
- name: Security Forem
  endpoint:
    path: //zeroday.forem.com
    method: GET
- name: Maker Forem
  endpoint:
    path: //maker.forem.com
    method: GET
- name: Scale Forem
  endpoint:
    path: //scale.forem.com
    method: GET
- name: Forem Core
  endpoint:
    path: //core.forem.com
    method: GET
- name: Crypto Forem
  endpoint:
    path: //crypto.forem.com
    method: GET
- name: Parenting
  endpoint:
    path: //parenting.forem.com
    method: GET
- name: community
  endpoint:
    path: /api/v1/communities
    method: GET
    data_selector: data
    params: {}
- name: low-no-code repository
  endpoint:
    path: /low-no-code
    method: POST
    data_selector: contributions
    params: {}
- name: community
  endpoint:
    path: /api/v1/community
    method: GET
    data_selector: communities
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: posts
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: Popcorn Movies and TV
  endpoint:
    path: //popcorn.forem.com
    method: GET
- name: DUMB DEV Community
  endpoint:
    path: //dumb.dev.to
    method: GET
- name: Design Community
  endpoint:
    path: //design.forem.com
    method: GET
- name: Golf Forem
  endpoint:
    path: //golf.forem.com
    method: GET
- name: Security Forem
  endpoint:
    path: //zeroday.forem.com
    method: GET
- name: Maker Forem
  endpoint:
    path: //maker.forem.com
    method: GET
- name: Scale Forem
  endpoint:
    path: //scale.forem.com
    method: GET
- name: Forem Core
  endpoint:
    path: //core.forem.com
    method: GET
- name: Crypto Forem
  endpoint:
    path: //crypto.forem.com
    method: GET
- name: Parenting
  endpoint:
    path: //parenting.forem.com
    method: GET
- name: Hacktoberfest Experience
  endpoint:
    path: /hacktoberfest/experience
    method: GET
    data_selector: records
- name: Contributing Guidelines
  endpoint:
    path: /contributing/guidelines
    method: GET
    data_selector: records
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: forums
  endpoint:
    path: /api/forums
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: posts
    params: {}
- name: titles
  endpoint:
    path: /api/titles
    method: GET
    data_selector: titles
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: weekly_ai_news
  endpoint:
    path: /ai-pulse/weekly-ai-news-and-discussion-thread
    method: GET
    data_selector: comments
    params: {}
- name: body_test
  endpoint:
    path: /peter/body-test-5bh7
    method: GET
    data_selector: comments
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
    params: {}
- name: frontend_challenge
  endpoint:
    path: /frontend/challenge/halloween
    method: GET
    data_selector: records
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: posts
  endpoint:
    path: /articles
    method: GET
    data_selector: articles
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /api/articles
    method: GET
    data_selector: articles
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/articles
    method: GET
    data_selector: articles
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: feed
  endpoint:
    path: /stories/feed/
    method: GET
    data_selector: records
    params:
      page: 1
      type_of: discover
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: Posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: records
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: feed
  endpoint:
    path: /stories/feed/
    method: GET
    data_selector: stories
    params:
      page: 1
      type_of: discover
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /v1/posts
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: Posts
  endpoint:
    path: /posts
    method: GET
    data_selector: records
    params: {}
- name: Posts
  endpoint:
    path: /posts
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: posts
    params: {}
- name: web3_posts
  endpoint:
    path: /api/web3/posts
    method: GET
    data_selector: posts
- name: dev_posts
  endpoint:
    path: /api/dev/posts
    method: GET
    data_selector: posts
- name: posts
  endpoint:
    path: /api/articles
    method: GET
    data_selector: articles
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: records
    params: {}
- name: Posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Frontend Challenge
  endpoint:
    path: /challenges/frontend
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: organizations
  endpoint:
    path: /organizations/
    method: GET
    data_selector: data
- name: repositories
  endpoint:
    path: /repositories/
    method: GET
    data_selector: data
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: app_start_performance
  endpoint:
    path: /api/v1/app/start/performance
    method: GET
    data_selector: data
    params: {}
- name: screen_load_performance
  endpoint:
    path: /api/v1/screen/load/performance
    method: GET
    data_selector: data
    params: {}
- name: screen_rendering_performance
  endpoint:
    path: /api/v1/screen/rendering/performance
    method: GET
    data_selector: data
    params: {}
- name: Contest Rules
  endpoint:
    path: /official-challenges-and-hackathon-rules
    method: GET
    data_selector: rules
    params: {}
- name: Popcorn Movies and TV
  endpoint:
    path: /popcorn.forem.com
    method: GET
- name: DUMB DEV Community
  endpoint:
    path: /dumb.dev.to
    method: GET
- name: Design Community
  endpoint:
    path: /design.forem.com
    method: GET
- name: Golf Forem
  endpoint:
    path: /golf.forem.com
    method: GET
- name: Maker Forem
  endpoint:
    path: /maker.forem.com
    method: GET
- name: Security Forem
  endpoint:
    path: /zeroday.forem.com
    method: GET
- name: Scale Forem
  endpoint:
    path: /scale.forem.com
    method: GET
- name: Forem Core
  endpoint:
    path: /core.forem.com
    method: GET
- name: Crypto Forem
  endpoint:
    path: /crypto.forem.com
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: organizations
  endpoint:
    path: /organizations/
    method: GET
    data_selector: data
- name: repositories
  endpoint:
    path: /repositories/
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: hydration_errors
  endpoint:
    path: /api/hydration_errors
    method: GET
    data_selector: errors
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: posts
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /articles
    method: GET
    data_selector: articles
- name: Function Regression Issues
  endpoint:
    path: /api/functions/regression
    method: GET
    data_selector: data
    params: {}
- name: Web Vitals
  endpoint:
    path: /api/web/vitals
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
    params: {}
- name: esignatures
  endpoint:
    path: /v1/esignatures
    method: GET
    data_selector: data
    params: {}
- name: build_configuration
  endpoint:
    path: /build.gradle
    method: POST
    data_selector: buildFeatures
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /api/0/projects/{organization_slug}/{project_slug}/transactions/
    method: GET
    data_selector: transactions
    params: {}
- name: authentication
  endpoint:
    path: /webauthn/authenticate
    method: POST
- name: registration
  endpoint:
    path: /webauthn/register
    method: POST
- name: eSignatures
  endpoint:
    path: /api/v1/esignatures
    method: GET
    data_selector: data
    params: {}
- name: issues
  endpoint:
    path: /rest/api/2/issue
    method: GET
    data_selector: issues
- name: community
  endpoint:
    path: /subforems
    method: GET
    data_selector: subforems
- name: Posts
  endpoint:
    path: /api/articles
    method: GET
    data_selector: articles
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
    params: {}
- name: SpanAddingClassVisitorFactory
  endpoint:
    path: /plugin-build/src/main/kotlin/io/sentry/android/gradle/SentryPlugin.kt
    method: GET
    data_selector: records
    params: {}
- name: ClassVisitorFactory
  endpoint:
    path: /plugin-build/src/main/kotlin/io/sentry/android/gradle/instrumentation/SpanAddingClassVisitorFactory.kt
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: posts
    params: {}
- name: posts
  endpoint:
    path: /api/articles
    method: GET
    data_selector: articles
- name: posts
  endpoint:
    path: /articles
    method: GET
    data_selector: articles
    params: {}
- name: foundations
  endpoint:
    path: /api/foundations
    method: GET
    data_selector: foundations
    params: {}
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
    params: {}
- name: interns
  endpoint:
    path: /api/interns
    method: GET
    data_selector: interns
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Popcorn Movies and TV
  endpoint:
    path: /popcorn.forem.com
    method: GET
- name: DUMB DEV Community
  endpoint:
    path: /dumb.dev.to
    method: GET
- name: Design Community
  endpoint:
    path: /design.forem.com
    method: GET
- name: Golf Forem
  endpoint:
    path: /golf.forem.com
    method: GET
- name: Security Forem
  endpoint:
    path: /zeroday.forem.com
    method: GET
- name: Maker Forem
  endpoint:
    path: /maker.forem.com
    method: GET
- name: Scale Forem
  endpoint:
    path: /scale.forem.com
    method: GET
- name: Forem Core
  endpoint:
    path: /core.forem.com
    method: GET
- name: Crypto Forem
  endpoint:
    path: /crypto.forem.com
    method: GET
- name: Parenting
  endpoint:
    path: /parenting.forem.com
    method: GET
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: posts
  endpoint:
    path: /api/articles
    method: GET
    data_selector: articles
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: Popcorn Movies and TV
  endpoint:
    path: //popcorn.forem.com
    method: GET
- name: DUMB DEV Community
  endpoint:
    path: //dumb.dev.to
    method: GET
- name: Design Community
  endpoint:
    path: //design.forem.com
    method: GET
- name: Golf Forem
  endpoint:
    path: //golf.forem.com
    method: GET
- name: Security Forem
  endpoint:
    path: //zeroday.forem.com
    method: GET
- name: Maker Forem
  endpoint:
    path: //maker.forem.com
    method: GET
- name: Scale Forem
  endpoint:
    path: //scale.forem.com
    method: GET
- name: Forem Core
  endpoint:
    path: //core.forem.com
    method: GET
- name: Crypto Forem
  endpoint:
    path: //crypto.forem.com
    method: GET
- name: Parenting
  endpoint:
    path: //parenting.forem.com
    method: GET
- name: posts
  endpoint:
    path: /api/posts
    method: GET
- name: documents
  endpoint:
    path: /api/documents
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: job_eligibility
  endpoint:
    path: /employer/job/:id/applications
    method: GET
    data_selector: applications
    params: {}
- name: job_eligibility
  endpoint:
    path: /job/eligibility
    method: POST
    data_selector: proofs
    params: {}
- name: jobs
  endpoint:
    path: /jobs
    method: GET
    data_selector: jobs
    params: {}
- name: job_detail
  endpoint:
    path: /job/:id
    method: GET
    data_selector: job
    params: {}
- name: apply_job
  endpoint:
    path: /job/:id/apply
    method: POST
    data_selector: application_result
    params: {}
- name: jobs
  endpoint:
    path: /api/v1/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: job_details
  endpoint:
    path: /api/v1/job/:id
    method: GET
    data_selector: job_details
    params: {}
- name: apply_job
  endpoint:
    path: /api/v1/job/:id/apply
    method: POST
    data_selector: apply_result
    params: {}
- name: applicant_status
  endpoint:
    path: /status
    method: GET
    data_selector: status
- name: employer_new_job
  endpoint:
    path: /employer/new
    method: POST
    data_selector: job
- name: employer_applications
  endpoint:
    path: /employer/job/:id/applications
    method: GET
    data_selector: applications
- name: review_application
  endpoint:
    path: /employer/application/:applicationId
    method: GET
    data_selector: application
- name: privacy_page
  endpoint:
    path: /privacy
    method: GET
    data_selector: privacy_info
- name: applicant_status
  endpoint:
    path: /status
    method: GET
    data_selector: status
- name: employer_new_job
  endpoint:
    path: /employer/new
    method: POST
    data_selector: job
- name: employer_applications
  endpoint:
    path: /employer/job/:id/applications
    method: GET
    data_selector: applications
- name: review_application
  endpoint:
    path: /employer/application/:applicationId
    method: GET
    data_selector: application
- name: privacy_page
  endpoint:
    path: /privacy
    method: GET
    data_selector: privacy_info
- name: jobs
  endpoint:
    path: /jobs
    method: GET
    data_selector: records
- name: submit_job
  endpoint:
    path: /employer/new
    method: POST
    data_selector: job_id
- name: privacy
  endpoint:
    path: /privacy
    method: GET
    data_selector: privacy_info
- name: applicant_status
  endpoint:
    path: /status
    method: GET
    data_selector: status
    params: {}
- name: employer_new_job
  endpoint:
    path: /employer/new
    method: POST
    data_selector: job
    params: {}
- name: employer_applications
  endpoint:
    path: /employer/job/:id/applications
    method: GET
    data_selector: applications
    params: {}
- name: review_application
  endpoint:
    path: /employer/application/:applicationId
    method: GET
    data_selector: application
    params: {}
- name: job_listings
  endpoint:
    path: /api/job_listings
    method: GET
    data_selector: listings
    params: {}
- name: applicant_status
  endpoint:
    path: /status
    method: GET
    data_selector: status
- name: employer_new_job
  endpoint:
    path: /employer/new
    method: POST
    data_selector: job
- name: employer_applications
  endpoint:
    path: /employer/job/:id/applications
    method: GET
    data_selector: applications
- name: review_application
  endpoint:
    path: /employer/application/:applicationId
    method: GET
    data_selector: application
- name: privacy_page
  endpoint:
    path: /privacy
    method: GET
    data_selector: privacy_info
- name: LinkedIn
  endpoint:
    path: /api/linkedin
    method: GET
- name: Indeed
  endpoint:
    path: /api/indeed
    method: GET
- name: Glassdoor
  endpoint:
    path: /api/glassdoor
    method: GET
- name: LinkedIn Dataset
  endpoint:
    path: /datasets/gd_lpfll7v5hcqtkxl6l
    method: GET
    data_selector: records
    params:
      filters:
        job_title:
          operator: includes
          value: role
        country_code:
          operator: equals
          value: ISO-2 (uppercased)
        application_availability:
          operator: equals
          value: 'true'
        url:
          operator: includes
          value: http
        job_posted_date:
          operator: '>'
          value: '{{ new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString() }}'
- name: Indeed Dataset
  endpoint:
    path: /datasets/gd_l4dx9j9sscpvs7no2
    method: GET
    data_selector: records
    params:
      filters:
        job_title:
          operator: includes
          value: role
        country:
          operator: equals
          value: lowercased
        date_posted:
          operator: '='
          value: Just posted
- name: Glassdoor Dataset
  endpoint:
    path: /datasets/gd_lpfbbndm1xnopbrcr0
    method: GET
    data_selector: records
    params:
      filters:
        job_title:
          operator: includes
          value: role
- name: LinkedIn Dataset
  endpoint:
    path: /gd_lpfll7v5hcqtkxl6l
    method: GET
    data_selector: records
    params:
      job_title: includes role
      country_code: equals ISO-2 (uppercased)
      application_availability: 'true'
      url: includes http
      job_posted_date: within last 24 hours
- name: Indeed Dataset
  endpoint:
    path: /gd_l4dx9j9sscpvs7no2
    method: GET
    data_selector: records
    params:
      job_title: includes role
      country: lowercased
      date_posted: equals Just posted
- name: Glassdoor Dataset
  endpoint:
    path: /gd_lpfbbndm1xnopbrcr0
    method: GET
    data_selector: records
    params:
      job_title: includes role
- name: company_analysis
  endpoint:
    path: /api/company_analysis
    method: POST
    data_selector: data
    params: {}
- name: reports
  endpoint:
    path: /api/reports
    method: POST
    data_selector: data
    params: {}
- name: report
  endpoint:
    path: /api/v1/reports
    method: POST
    data_selector: data
    params: {}
- name: company_analysis
  endpoint:
    path: /services/data/v1/company_analysis
    method: POST
    data_selector: data
    params: {}
- name: moderator
  endpoint:
    path: /moderator
    method: GET
- name: submit_report
  endpoint:
    path: /submit
    method: POST
- name: reports
  endpoint:
    path: /api/reports
    method: POST
    data_selector: data
    params: {}
- name: moderator
  endpoint:
    path: /moderator
    method: GET
- name: submit_report
  endpoint:
    path: /submit
    method: POST
- name: report
  endpoint:
    path: /submit
    method: POST
    data_selector: reportData
- name: moderator
  endpoint:
    path: /moderator
    method: GET
    data_selector: moderatorData
- name: report
  endpoint:
    path: /api/v1/reports
    method: POST
    data_selector: reportData
- name: moderator
  endpoint:
    path: /api/v1/moderators
    method: GET
    data_selector: moderatorData
- name: public_stats
  endpoint:
    path: /public/stats
    method: GET
- name: settings
  endpoint:
    path: /settings
    method: GET
- name: privacy_page
  endpoint:
    path: /privacy
    method: GET
- name: similar_players
  endpoint:
    path: /ft/search/idx:profiles
    method: GET
    data_selector: results
    params:
      query: '*=>[KNN 10 @embedding $vec]'
- name: ai_analysis
  endpoint:
    path: /setex/analysis:{patternHash}
    method: POST
    data_selector: result
    params:
      expiry: 300
- name: move_history
  endpoint:
    path: /xadd/moves:{gameId}
    method: POST
    data_selector: result
    params:
      move: playerMove
      prediction: aiPrediction
      timestamp: Date.now()
- name: leaderboard
  endpoint:
    path: /zadd/leaderboard
    method: POST
    data_selector: result
    params:
      score: winRate * 1000 + totalWins
      value: username
- name: posts
  endpoint:
    path: /t/database
    method: GET
    data_selector: posts
    params: {}
- name: game_updates
  endpoint:
    path: /game/updates
    method: POST
    data_selector: data
- name: ai_accuracy
  endpoint:
    path: /ai/accuracy
    method: POST
    data_selector: data
- name: game_state
  endpoint:
    path: /game/state
    method: POST
    data_selector: data
- name: community
  endpoint:
    path: /communities
    method: GET
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: posts
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workflows
  endpoint:
    path: /api/v1/workflows
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
    params: {}
- name: news_articles
  endpoint:
    path: /news/articles
    method: GET
    data_selector: articles
    params:
      topic: Donald Trump
      timeframe: 72 hours
- name: google_sheets
  endpoint:
    path: /google/sheets
    method: POST
    data_selector: sheet_link
    params: {}
- name: google_docs
  endpoint:
    path: /google/docs
    method: POST
    data_selector: doc_link
    params: {}
- name: gmail_notification
  endpoint:
    path: /gmail/send
    method: POST
    data_selector: notification_status
    params:
      recipient: email@gmail.com
      subject: 'Today''s News: What''s happening with Donald Trump?'
- name: titles
  endpoint:
    path: /api/titles
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: records
    params: {}
- name: news_articles
  endpoint:
    path: /news/articles
    method: GET
    data_selector: articles
    params:
      topic: Donald Trump
      time_frame: 72 hours
      article_count: 10
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
    params: {}
- name: emergency_reports
  endpoint:
    path: /api/emergency_reports
    method: POST
    data_selector: report
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: community
  endpoint:
    path: /communities
    method: GET
    data_selector: communities
    params: {}
- name: group_monitor
  endpoint:
    path: /antileaked
    method: POST
- name: office_experience
  endpoint:
    path: /3d-office-experience
    method: GET
    data_selector: experience
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: report
  endpoint:
    path: /report
    method: POST
    data_selector: report_data
- name: Popcorn Movies and TV
  endpoint:
    path: /popcorn
    method: GET
    data_selector: community
- name: DUMB DEV Community
  endpoint:
    path: /dumb
    method: GET
    data_selector: community
- name: Design Community
  endpoint:
    path: /design
    method: GET
    data_selector: community
- name: Golf Forem
  endpoint:
    path: /golf
    method: GET
    data_selector: community
- name: Maker Forem
  endpoint:
    path: /maker
    method: GET
    data_selector: community
- name: Security Forem
  endpoint:
    path: /security
    method: GET
    data_selector: community
- name: Scale Forem
  endpoint:
    path: /scale
    method: GET
    data_selector: community
- name: Forem Core
  endpoint:
    path: /core
    method: GET
    data_selector: community
- name: Crypto Forem
  endpoint:
    path: /crypto
    method: GET
    data_selector: community
- name: tasks
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: records
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: records
    params: {}
- name: design_assets
  endpoint:
    path: /generateDesignAssets
    method: POST
    data_selector: assets
- name: popcorn_movies_tv
  endpoint:
    path: /popcorn/forem
    method: GET
    data_selector: records
- name: dumb_dev_community
  endpoint:
    path: /dumb/forem
    method: GET
    data_selector: records
- name: design_community
  endpoint:
    path: /design/forem
    method: GET
    data_selector: records
- name: golf_forem
  endpoint:
    path: /golf/forem
    method: GET
    data_selector: records
- name: security_forem
  endpoint:
    path: /security/forem
    method: GET
    data_selector: records
- name: maker_forem
  endpoint:
    path: /maker/forem
    method: GET
    data_selector: records
- name: scale_forem
  endpoint:
    path: /scale/forem
    method: GET
    data_selector: records
- name: forem_core
  endpoint:
    path: /core/forem
    method: GET
    data_selector: records
- name: crypto_forem
  endpoint:
    path: /crypto/forem
    method: GET
    data_selector: records
- name: parenting
  endpoint:
    path: /parenting/forem
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: transcription
  endpoint:
    path: /v2/realtime/transcript
    method: POST
    data_selector: results
- name: transcription
  endpoint:
    path: /v2/realtime/transcript
    method: POST
    data_selector: transcript
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: game
  endpoint:
    path: /game
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /user/signup
    method: POST
    data_selector: user
    params: {}
- name: income
  endpoint:
    path: /income
    method: POST
    data_selector: income
    params: {}
- name: expense
  endpoint:
    path: /expense
    method: POST
    data_selector: expense
    params: {}
- name: report
  endpoint:
    path: /report
    method: GET
    data_selector: report
    params: {}
- name: User Authentication
  endpoint:
    path: /auth
    method: POST
    data_selector: user
    params: {}
- name: Income Management
  endpoint:
    path: /income
    method: GET
    data_selector: income_records
    params: {}
- name: Expense Management
  endpoint:
    path: /expense
    method: GET
    data_selector: expense_records
    params: {}
- name: Report Generation
  endpoint:
    path: /report
    method: GET
    data_selector: report_data
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: POST
    data_selector: user_data
    params: {}
- name: income
  endpoint:
    path: /api/income
    method: POST
    data_selector: income_data
    params: {}
- name: expense
  endpoint:
    path: /api/expense
    method: POST
    data_selector: expense_data
    params: {}
- name: report
  endpoint:
    path: /api/report
    method: GET
    data_selector: report_data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: color_challenge_game
  endpoint:
    path: /services/data/vXX.X/sobjects/ColorChallengeGame
    method: POST
    data_selector: records
    params: {}
- name: S3 Bucket
  endpoint:
    path: /services/s3
    method: POST
    data_selector: bucket
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
    params: {}
- name: Legal Knowledge Agent
  endpoint:
    path: /knowledge
    method: GET
- name: Legal Prosecution Agent
  endpoint:
    path: /prosecution
    method: POST
- name: Legal Defense Agent
  endpoint:
    path: /defense
    method: POST
- name: send_sms
  endpoint:
    path: /send
    method: POST
    data_selector: response
    params: {}
- name: Legal Judge Agent
  endpoint:
    path: /legal/judge/agent
    method: POST
    data_selector: results
    params: {}
- name: Legal Knowledge Agent
  endpoint:
    path: /legal/knowledge/agent
    method: GET
    data_selector: results
    params: {}
- name: Legal Prosecution Agent
  endpoint:
    path: /legal/prosecution/agent
    method: GET
    data_selector: results
    params: {}
- name: Legal Defense Agent
  endpoint:
    path: /legal/defense/agent
    method: GET
    data_selector: results
    params: {}
- name: send_sms
  endpoint:
    path: /send
    method: POST
    data_selector: response
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: time_duration
  endpoint:
    path: /time_duration
    method: GET
    data_selector: time_preferences
- name: user_context
  endpoint:
    path: /user_context
    method: GET
    data_selector: context_preferences
- name: physical_condition
  endpoint:
    path: /physical_condition
    method: GET
    data_selector: condition_levels
- name: time_duration
  endpoint:
    path: /api/time_duration
    method: GET
    data_selector: time_preferences
- name: user_context
  endpoint:
    path: /api/user_context
    method: GET
    data_selector: context_preferences
- name: user_physical_condition
  endpoint:
    path: /api/user_physical_condition
    method: GET
    data_selector: physical_conditions
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Build It
  endpoint:
    path: /build-it
    method: GET
    data_selector: components
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: posts
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: records
- name: inbound-handler
  endpoint:
    path: /inbound-handler
    method: POST
    data_selector: inboundData
    params: {}
- name: inbound-handler
  endpoint:
    path: /inbound-handler
    method: POST
- name: Outbound_Transactional
  endpoint:
    path: /outbound/transactional
    method: POST
    data_selector: messages
- name: Inbound
  endpoint:
    path: /inbound
    method: POST
    data_selector: emails
- name: Outbound_Broadcast
  endpoint:
    path: /outbound/broadcast
    method: POST
    data_selector: broadcasts
- name: candidates
  endpoint:
    path: /candidates
    method: GET
    data_selector: data
    params: {}
- name: recruiters
  endpoint:
    path: /recruiters
    method: GET
    data_selector: data
    params: {}
- name: companies
  endpoint:
    path: /companies
    method: GET
    data_selector: data
    params: {}
- name: jobs
- name: applications
- name: companies
- name: recruiters
- name: candidates
- name: jobs
- name: applications
- name: companies
- name: recruiters
- name: candidates
- name: permissions
  endpoint:
    path: /v1/permissions
    method: GET
    data_selector: data
    params: {}
- name: user_permissions
  endpoint:
    path: /api/v1/user_permissions
    method: GET
    data_selector: permissions
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
    params: {}
- name: dayjs
  endpoint:
    path: /dayjs.min.js
    method: GET
    data_selector: script
- name: dayjs
  endpoint:
    path: /dayjs.min.js
    method: GET
    data_selector: scripts
    params: {}
- name: files
  endpoint:
    path: /files
    method: POST
- name: live-portrait
  endpoint:
    path: /live-portrait
    method: POST
- name: files
  endpoint:
    path: /api/pinning/pinFileToIPFS
    method: POST
    data_selector: data
    params: {}
- name: live-portrait
  endpoint:
    path: /api/live-portrait
    method: POST
    data_selector: data
    params: {}
- name: Posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
    params: {}
- name: images
  endpoint:
    path: /500x500
    method: GET
    data_selector: images
    params: {}
- name: Pinata API
  endpoint:
    path: /files
    method: POST
    data_selector: files
- name: Segmind live-portrait API
  endpoint:
    path: /models/live-portrait/api
    method: POST
    data_selector: live_video
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: records
- name: cube
  endpoint:
    path: /cube
    method: GET
    data_selector: records
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
    params: {}
- name: community
  endpoint:
    path: /api/v1/community
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: records
- name: textArea
  endpoint:
    path: /textarea
    method: GET
    data_selector: elements
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: Posts
  endpoint:
    path: /subforems
    method: GET
    data_selector: posts
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: textarea
  endpoint:
    path: /textareas
    method: GET
    data_selector: textareas
    params: {}
- name: textareas
  endpoint:
    path: /textareas
    method: GET
    data_selector: textareas
    params: {}
- name: progressBars
  endpoint:
    path: /progressBars
    method: GET
    data_selector: progressBars
    params: {}
- name: remainingCharsElements
  endpoint:
    path: /remainingCharsElements
    method: GET
    data_selector: remainingCharsElements
    params: {}
- name: Posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: map
  endpoint:
    path: /mapbox-gl-js
    method: GET
    data_selector: mapData
- name: map
  endpoint:
    path: /mapbox-gl-js
    method: GET
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
    params: {}
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: posts
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: comments
  endpoint:
    path: /api/v1/comments
    method: GET
    data_selector: data
    params: {}
- name: performance_bottlenecks
  endpoint:
    path: /performance/bottlenecks
    method: GET
    data_selector: records
- name: caching_strategy
  endpoint:
    path: /caching/strategy
    method: GET
    data_selector: records
- name: functional_components
  endpoint:
    path: /functional/components
    method: GET
    data_selector: records
- name: posts
  endpoint:
    path: /api/v1/posts
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: posts
    params: {}
- name: Posts
  endpoint:
    path: /posts
    method: GET
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: posts
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: data
- name: shell_commands
  endpoint:
    path: /shell/commands
    method: GET
    data_selector: commands
notes:
- The API allows posting jobs directly into their job slots for customers with paid
  job slots.
- The LinkedIn jobs API is constantly evolving.
- You are granted a limit of 100,000 API calls per day.
- API requests are rate-limited.
- Application throttles limit the number of each API call your application can make
  using its API key.
- User throttles limit the number of calls for any individual user of your application.
- Developer throttles are approximately four times higher than user throttles for
  most calls.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- API calls are limited by rate limits set by GitHub.
- Astro is a TypeScript-first kind of framework, so type safety is totally a thing.
- Every frontmatter or data property of your collection entries must be defined using
  a Zod data type.
- Uses OAuth2 with refresh token — requires setup of connected app in Heroku
- The script is designed to track and categorize activity outside of the owner's own
  repositories.
- Building helps understand Git better than reading docs.
- This year, I also want to know what projects you’re running that need contributors
- API rate limits apply to all requests.
- Some endpoints may require additional permissions.
- Every frontmatter or data property of your collection entries must be defined using
  a Zod data type
- Image type does not work for image frontmatter properties, use string instead
- Uses REST API
- No authentication required for accessing public stats
- Requires setup of OAuth2 credentials in the Forem admin panel
- No HTTP server setup. No manual wiring. No graceful shutdown code. No configuration
  loading boilerplate.
- Hacktoberfest is a celebration of open source contributions run by DigitalOcean.
- API returns a job ID or a URL to the rendered video file.
- A modular microservice framework for Go that brings Spring Boot's developer experience
  while staying true to Go's philosophy.
- Default behavior serves HTML unless specified in Accept header.
- The server will be available at http://localhost:3000 for MCP connections.
- Uses API key for authentication
- Ensure the API key is kept secure
- API key must be included in the header for all requests.
- Uses content negotiation for serving different content types based on Accept header
- Requires OAuth setup for authentication
- Environment variables must be validated with appropriate libraries
- Ensure backups are tested regularly to confirm their integrity.
- API does not require authentication.
- Discussion threads targeting the whole community
- This isn't a complete security solution, but it's a significant step that should
  be taken into account when developing frontend code.
- Whenever code is loaded into the browser, it can be read or scanned. Sensitive information
  can be exposed unintentionally.
- This API is for a community discussions platform.
- Hacktoberfest begins on October 1 and submissions are due by November 2.
- To fetch a branch from the upstream repo, use 'git fetch upstream'.
- Ensure the upstream repo is configured before fetching.
- Navigate to the Pull requests tab to find the contributor's branch.
- API does not require authentication
- Ensure the OAuth app is registered and permissions are correctly set
- The API does not require authentication.
- Requires GitHub OAuth setup for authentication
- Requires OAuth2 authentication for API access
- Ensure you have the correct remote URL configured for upstream.
- Ensure that the emails are associated with the collaborators' GitHub accounts.
- Use the command 'git remote add <remote-name> <fork-repo-url>' to add a remote repository.
- To fetch the branch run 'git fetch <remote-name>'.
- To switch to the target branch use 'git checkout <branch-name>'.
- Requires OAuth2 application setup on GitHub.
- Active listening means being fully present, showing interest in the topics, and
  engaging actively without judgment in a conversation.
- In an international community, not everyone is fluent in English.
- Communication is a skill that you can learn through continuous practice.
- Uses OAuth2 with refresh token — requires setup of OAuth application in GitHub
- Some API endpoints may have rate limits that need to be handled
- Exclude the person who commits and pushes the branch from the 'Co-authored-by:'
- This challenge focuses on growth. So it's about more than just contributing code.
- One of the things worth noting is that this challenge is supposed to be fun.
- 'Participating in the #100DaysOfOSS challenge by OpenSauced.'
- Good communication leads to positive conversations and relationships.
- Most communication in open source happens asynchronously through writing.
- No specific API integration details provided.
- Uses OAuth2 with refresh token — requires setup of application in Forem
- Some objects may have rate limiting based on user activity
- This is not the end of my Hacktoberfest 2023 journey.
- Transcripts are saved in the SRT format.
- This repo contains a tool to help check and fix formatting issues.
- Before resolving conflicts, always recheck your changes before committing.
- Requires OAuth2 authentication setup.
- Asking questions makes me more familiar with our products.
- Clear and detailed information can help you a lot in reviewing PRs and benefit contributors
  in getting their PR reviewed and merged faster.
- Transcripts are automatically generated and may contain mistakes.
- Contains a tool to help fix formatting issues in SRT files.
- This API allows access to guidelines and courses for maintainers.
- You can read my article on freeCodecamp, "How to Keep Branches Up-to-Date and Resolve
  Merge Conflicts in GitHub and VS Code" to learn more about keeping branches up-to-date
  and resolving conflicts on GitHub and VS Code.
- Uses CLI for this repository.
- Open source is for everyone, regardless of their technical background.
- This API does not require authentication.
- Don't forget to sign up on the official Hacktoberfest website to have your PRs counted
  and track your progress.
- Some projects operate with very small maintainer teams.
- More open source projects need to find ways to appreciate and formally recognize
  their no-code contributors.
- Uses OAuth2 with refresh token — requires setup of connected app in OpenSauced
- No authentication required to access the API.
- This year, the legendary swag (yes, the t-shirt is back!) and the tree-planting
  initiative are both making a return.
- Requires user to authenticate via OAuth2
- Contributors must list their contributions in a dedicated Markdown file.
- A general discussion space for the Forem community.
- Users may interact with forums that use DEV's open-source tools but do all their
  hosting and data collection themselves.
- API as a service to detect fake users and bots
- The Services are not directed to children under 13 (or other age as required by
  local law), and we do not knowingly collect personal information from children.
- Users must make a good-faith effort to share content that is on-topic, of high-quality,
  and is not designed primarily for the purposes of promotion or creating backlinks.
- DEV Community reserves the right to remove any content that it deems to be in violation
  of this policy at its sole discretion.
- Requires setup of connected app in Forem API
- Encourages reading the README and contributing guidelines
- Requires submission of an issue before creating a PR
- We're back with another Frontend Challenge, and this time we're getting into the
  Halloween spirit!
- You may now use JavaScript, TypeScript, Dart, WebAssembly, or any other browser-compatible
  language/runtime in your Perfect Landing submissions!
- Requires setup of connected app in DEV
- User data may vary depending on forum settings
- We use your information to fulfill our contract with you and provide you with our
  Services.
- We may send you push notifications through our mobile application.
- No authentication required for accessing posts
- The platform is developer-first and encourages community interaction.
- Uses OAuth2 with Auth0 for authentication
- Data is available via a public REST API.
- The feed and sidebar load substantially faster than before due to optimization.
- No authentication is required to access the posts.
- General discussion space for the Forem community.
- No thorough before/after measurements were taken, but the results are obvious.
- Self-hosting is still a bit too complicated for major adoption.
- This process is something we're always working to improve.
- We're committed to being as transparent as possible about our overall approach.
- Ensure to handle rate limiting as per API guidelines.
- We regularly evaluate what's working well and what could be better.
- General information about various communities and posts.
- No authentication required for public articles.
- Check for API limits and handle errors gracefully.
- Challenge ends soon!
- Participants need to be 18+ in order to participate.
- Participation in the Contest requires acceptance of the Official Rules.
- All entries must be submitted no later than the end of the Entry Period.
- API responses may vary based on user permissions.
- Some endpoints may require specific permissions to access.
- Secure AI agents, humans, and whatever comes next!
- Tracks app start performance, screen load performance, and screen rendering performance.
- Entries that do not meet the requirements set forth in these Official Rules may
  be disqualified at Sponsor's sole discretion.
- Some API calls may require specific permissions.
- Mobile devs know the struggle. Small regressions can cause big issues in production.
- Catching these issues before the 1-star reviews roll in is crucial.
- Mobile Vitals is available to all paying Sentry customers - just turn it on in your
  SDK and give it a shot.
- Hydration error issues in Sentry are generated from Replays and their associated
  data, so have no impact on your error quota.
- Removed canvas recording support by default
- Removed unused code from rrweb
- Web Vitals are available to Sentry customers today.
- Profiling for Browser JavaScript is also now available in beta.
- API latency is the time it takes for the data to be transmitted between the client
  and the backend.
- The API response time is the latency + the time it takes for the backend to process
  the request and return the result.
- The recommended IDE for working with Jetpack Compose is Android Studio.
- Avoid creating 'god' files.
- Stay true to the MVVM.
- Bundle Size matters - this is something we SDK engineers at Sentry are acutely aware
  of.
- Session Replay allows you to capture what's going on in a users' browsers, which
  can help developers debug errors or other problems the user is experiencing.
- Average Response Time (ART) is not a good metric due to outliers.
- Percentiles provide a different view of performance data.
- P50 is the typical performance of your API.
- P75 includes more variable data, suitable for frontend applications.
- P95 and P99 are valuable for backend applications.
- Requires setup of performance monitoring in the Sentry SDK
- Uses OAuth2 with refresh token — requires setup of connected app in Sentry
- Requires OAuth2 authentication setup
- Ensure correct API permissions are granted
- Learning Jetpack Compose is worth the learning curve and challenges.
- Keep a close eye on your errors and performance in production
- Communities are accessible via the subforems endpoint
- Using new AGP transform APIs with ASM looks like an obvious choice for bytecode
  manipulation for Android.
- Building UIs requires a lot less code.
- The declarative approach of building UIs brings us a ton of benefits.
- Instrumenting development environment scripts with Sentry improves productivity.
- Error events are sent to Sentry with context from the Bash script failures.
- In Production you will probably want a smaller number such as 0.5 for 50%
- The API allows access to articles on dev.to
- Google Chrome will no longer support U2F API after February 2022
- Sentry reports on device type, orientation, battery level, GPU state, CPU info,
  and software and OS context.
- Sentry can report errors and performance issues automatically.
- Sentry’s open source funding program aims to contribute meaningfully to community-led
  projects.
- Accessing the transaction from the resolver should also be helpful for Sentry’s
  Distributed Tracing.
- Uses new AGP transform APIs with ASM for bytecode manipulation.
- No authentication required for accessing posts.
- Instrumenting our development environment with Sentry has allowed us to monitor
  the health of our development environment and respond more quickly when someone
  faces an issue.
- AI agents need permission-aware data pipelines, not just API authentication.
- Audit trails are not optional.
- The API allows fetching articles from the dev.to platform.
- Requires user authentication for accessing posts
- 'Essential JWT Security (Part 2): Refresh Tokens and Revocation Made Simple'
- How to future-proof your web app's password authentication
- 'JWT Authentication: How a 10,000-Year-Old Mesopotamian Wisdom Became Your Login
  System'
- 'MedSecureAI: Revolutionary Healthcare AI - From Patient Privacy to Enterprise Compliance'
- SecureDoc AI Assistant - Intelligent Document Management with Auth0 for AI Agents
- Securing Autonomous AI Agents with Auth0 – DEV Challenge Submission
- Full-Stack Authentication Demystified — A Step-by-Step Guide with React, Node.js,
  and Supabase
- GraphQL is a query language and execution engine for client‐server applications
- Requires user authentication for access to document management features
- Authenticate users with Auth0
- Filter documents based on role and department
- Only retrieve authorized content for AI context
- Track every action in a comprehensive audit trail
- User authentication mechanisms are required to access certain resources.
- Privacy isn't an afterthought—it's the foundation of every design decision.
- No PII is ever exposed or stored
- Applicants generate zero-knowledge proofs that validate skills, experience, and
  region without disclosing exact values.
- Uses OAuth2 with refresh token for authentication.
- Privacy signals indicate what data remains private.
- Supports both mock mode and real Midnight integration.
- Uses mock mode by default — requires setup of API key for real integration
- Uses real-time integration with testnet network.
- The current workflow consists of 21 nodes orchestrating the entire job discovery
  and notification process.
- The bot solves time-consuming manual research by automatically analyzing companies
  across 20+ metrics.
- Uses OAuth2 with refresh token — requires setup of connected app in midnight API
- Uses Google Gemini for AI analysis and response generation
- The workflow handles various company formats and implements error handling for pending
  snapshots
- Bright Data's verified node provided consistent, high-quality data that would have
  been impossible with custom scrapers.
- Data lives in IndexedDB by default
- Cloud sync is optional and only moves ciphertext
- Uses a local-first architecture with optional cloud sync
- Platform combines privacy technologies to enable secure reporting.
- Encryption is applied to all reports.
- Your data lives in IndexedDB by default
- Environment variables are auto-configured!
- Utilizes Zero-Knowledge Proofs for anonymity
- All submissions are encrypted locally before being sent
- Uses client-side API keys for secure access.
- 'Client-Side API Keys: Secure, privacy-focused design where players use their own
  Gemini API keys'
- Transforms Redis from a simple cache into a complete application backbone
- Supports 100+ concurrent users per workflow
- Redis is a powerful, multi-model platform capable of powering entire applications.
- Uses Redis for real-time updates and state management.
- No personal data collection.
- Redis is not just a cache - it's a powerful, multi-model platform capable of powering
  entire applications.
- Uses Redis as a complete multi-model platform
- Redis caches frequently accessed data for optimal performance.
- CodeSync demonstrates that Redis isn't just a cache - it's a complete platform for
  building modern, real-time applications.
- Securely sync community feedback from Telegram to Slack and back — all managed with
  Pulumi ESC.
- This has been an exciting and valuable experience—implementing Pulumi ESC and 1Password
  together opened up a new level of automation and security for managing secrets.
- Must write the structured table to Google Sheets.
- Must generate a one-page narrative report in Google Docs.
- Access to your location is necessary to determine your precise position.
- This project showcases modern office culture with diverse teams and realistic animations.
- Access to your location is necessary to determine your precise position, ensuring
  that emergency services or responders can reach you quickly and efficiently.
- The 'No valid license found' warning is normal for KendoReact Free components and
  doesn't affect functionality.
- Production deployment on Google Cloud Run with auto-scaling and high availability
- Intelligent rate limiting for expensive operations
- Uses CSS for animations and layout
- Focus on accessibility and responsive design
- 'Intuitive Input Form: A simple, multi-section form for users to specify their dream
  home parameters.'
- 'Real-time Generation Progress: Dynamic loading interface with stage-by-stage updates
  showing users exactly what''s being generated.'
- API keys managed through secure environment variables
- Designed for accessibility-critical use cases where sub-300ms latency matters most.
- VoiceAccess implements sophisticated audio intelligence
- VoiceAccess is designed for accessibility-critical use cases where sub-300ms latency
  matters most.
- Sub-300ms latency for critical accessibility applications
- VoiceAccess provides multiple installation paths to accommodate different system
  configurations.
- Fallback simulation mode ensures that all application features can be demonstrated
  and tested even without working audio input.
- The audio processing pipeline is optimized for minimal latency while maintaining
  high quality.
- The application is designed to be lightweight and efficient.
- VoiceAccess implements sophisticated audio intelligence.
- VoiceAccess implements comprehensive performance monitoring and optimization.
- VoiceAccess was built from the ground up with accessibility as a primary concern.
- Built with AssemblyAI's Universal-Streaming API, it delivers sub-300ms latency for
  critical accessibility applications.
- Fully responsive design tested across 15+ device sizes
- WCAG 2.1 AA compliant with comprehensive accessibility features
- 'User-Centric Design: Every decision prioritizes user experience over technical
  complexity'
- 'Accessibility Leadership: Goes beyond compliance to create truly inclusive experiences'
- 'Performance Excellence: Optimized for speed without sacrificing functionality'
- 'Scalable Architecture: Built to grow with organizational needs'
- 'Visual Innovation: Pushes the boundaries of modern web design'
- Handles both text-to-image and image-to-image transformations
- AWS credentials configured locally
- Requires AWS account with Bedrock access and AWS credentials configured locally.
- 'AWS Credentials Error: Verify AWS credentials in ~/.aws/credentials'
- 'Image Generation Timeout: Adjust the boto3 client timeout in config, Default timeout
  is 300 seconds for multiple images'
- 'Validation Errors: Ensure all required parameters are provided, Check minimum length
  requirements for text prompts'
- 'AWS Credentials Error: Verify AWS credentials in ~/.aws/credentials and check region
  configuration in ~/.aws/config'
- 'Image Generation Timeout: Adjust the boto3 client timeout in config, default timeout
  is 300 seconds for multiple images'
- 'Validation Errors: Ensure all required parameters are provided and check minimum
  length requirements for text prompts'
- The application provides a user-specific environment where individuals can maintain
  detailed records of their financial transactions.
- The application features user-specific data isolation.
- Supports both light and dark mode.
- Uses Amazon Q for various development tasks including feature addition and debugging.
- User interface should have both light and dark mode with sleek responsive design.
- Uses OAuth2 with refresh token — requires setup of connected app in Pulumi
- This is a simplified policy. In production, consider using more restrictive policies.
- This tutorial assumes a fresh installation of Windows.
- Using Pulumi requires access to cloud platform services.
- Public API access does not require authentication.
- No specific API or data extraction configuration provided.
- No authentication is required to access the API.
- Challenges include ensuring fairness and bias mitigation in decision-making.
- Automates repetitive and time-consuming tasks.
- Challenges with ensuring fairness and bias mitigation in decision-making.
- The app provides users with personalized daily habits to improve productivity.
- Users can select their preferred time period for suggestions.
- GitHub model provided me the OpenAI's API implementation in python specific to Early
  to Rise app requirements which simplified my development burden.
- DEV Community is a space to discuss and keep up software development and manage
  your software career.
- 100% anonymity and confidentiality for users
- Management account is required for onboarding
- Employees are empowered to send anonymous reports, messages or complaints, participate
  in private email-based dialogues with management, and engage in confidential voting.
- All emails are routed through InvisiBox proxy addresses
- Postmark's inbound email parsing plays a crucial role in this application by allowing
  the server to receive and process emails sent to specific Invisibox email addresses.
- Email integration with Postmark ensures reliable message delivery while maintaining
  complete anonymity for employees.
- Uses Permit.io for managing authorization and user roles
- This project uses Permit.io for managing authorization and user roles.
- Used Permit.io's CLI for setup and resource management
- Skipped self-hosted PDP in favor of Permit’s cloud-hosted PDP
- Uses Permit.io CLI for management of resources and permissions.
- Ensure to obtain the necessary scopes for your application.
- Uses OAuth2 with refresh token — requires setup of connected app in Permit.io
- 'Securing AI Document Systems: Implementing the Four-Perimeter Framework with Permit.io'
- 'Smart Doctor: AI-Powered Medical Assistant with Human-in-the-Loop Access Control
  using Permit.io- Permissions Redefined'
- Some objects may return nulls in deeply nested fields
- Requires setup of connected app in Permit.io
- Some responses may include null values in certain fields
- Day.js is a lightweight library, with a file size of just 2KB.
- Utilizes plugins to extend functionalities.
- Bright Data's Scraping Browser made scraping the data from each of these site so
  much more easier than it would been had it been scraped manually.
- Day.js is a lightweight JavaScript library for date and time operations.
- Day.js library is supported in all modern web browsers.
- The library is actively maintained with over 46k github stars.
- Uses Pinata for image file uploads and live-portrait API to transform images to
  live videos.
- Uses Bright Data's Scraping Browser to mimic user interactions.
- The Pinata API is important for generating a live URL for web access to the files.
- Uses JavaScript for dynamic image viewing
- Supports image updates every 7.6 seconds
- Application designed to animate static portraits by adding movement and emotion
  to the image
- Retrieves uploaded files and processes them using the Segmind live-portrait API
- API requires an API key for access.
- Uses CSS for styling and JavaScript for functionality.
- With this guide, you will be able to seamlessly include a character limit indicator
  in your next project, helping to improve the overall user communication experience
  in your application.
- Using process.nextTick() a lot in your code is highly discouraged, as it can starve
  the execution of the rest of the callbacks in the event loop.
- In nodejs, all user written synchronous code, takes priority over any async code.
- Knowledge on how to set up and configure web servers.
- Basic server side scripting with PHP.
- CSV(Comma Separated Value) files for database.
- Coding NEVER before was as hard and counterintuitive as nowadays.
- The nextTick callbacks would always be executed before the promise callbacks.
- nextTick and promise callbacks are always executed inbetween each queue and also
  inbetween each callback execution in the timer and check queues.
- Users must register and obtain Mapbox API credentials.
- Obtain your access token after creating an account with Mapbox.
- Registration and obtaining your Mapbox API credentials is required.
- Obtain access token from Mapbox account after creating it.
- JavaScript provides various built-in methods and libraries for handling different
  types of data formats.
- The Intl object and its properties, such as Collator, NumberFormat, and DateTimeFormat
  are useful for handling different languages and cultures.
- 'Tracking without consent: Some companies may use JavaScript to track user behavior
  without obtaining the user''s consent.'
- 'Misrepresentation of data collection: Some companies may collect and use data for
  purposes other than what they have stated in their privacy policy.'
- 'Selling user data: Some sell their users data to third parties without obtaining
  the user''s consent.'
- 'Not providing an opt-out mechanism: Some companies deliberately choose not to provide
  users with an easy way to opt-out of tracking.'
- 'Not providing clear and conspicuous notice: Some companies may not provide clear
  notice on the data collection, use, and sharing of the user data.'
- Optimizing the performance of your React application is an important aspect of building
  a high-performing and scalable application.
- Uses OAuth2 with refresh token — requires setup of connected app in Forem
- Understanding the Virtual DOM and minimizing re-renders is crucial for performance
  optimization.
- Performance optimization should be an ongoing process, as new issues may arise and
  new techniques may become available.
- The editor always starts up in command mode.
- You can't write text into a file when you are still in command mode.
- Built on Forem — the open source software that powers DEV and other inclusive communities.
errors:
- Throttle limit exceeds
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '403: Not enough permissions to access: POST /simpleJobPostings'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403 Forbidden: Rate limit exceeded. Try again later.'
- '404 Not Found: Check the repository path and owner.'
- '403 Forbidden: Access denied for the requested resource'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: Verify the endpoint path.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check your credentials'
- '404 Not Found: Resource does not exist'
- '401 Unauthorized: Check API key'
- '401 Unauthorized: Verify API key is correct'
- '429 Too Many Requests: Implement rate limiting'
- '401 Unauthorized: Invalid API key.'
- '401 Unauthorized: Check your OAuth token'
- '403 Forbidden: Rate limit exceeded or insufficient permissions'
- '404 Not Found: Check the endpoint path'
- '500 Internal Server Error: Try again later'
- 'Submissions must include the #hacktoberfest tag to be considered.'
- '404 Not Found: Check the repository owner and name'
- '401 Unauthorized: Check if the token is valid'
- '401 Unauthorized: Ensure your token has the correct scopes'
- '403 Forbidden: Check if the rate limit has been exceeded'
- '404 Not Found: Check if the repository exists or if you have access'
- '403 Forbidden: Check your permissions or rate limits'
- '404 Not Found: Check repository owner and name.'
- '401 Unauthorized: Check authentication credentials.'
- '403 Forbidden: Check if you have permission to access the repository'
- '404 Not Found: Verify the repository name and owner'
- '401 Unauthorized: Recheck OAuth token and scopes'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '500 Internal Server Error: Retry the request after a short delay'
- '401 Unauthorized: Recheck OAuth credentials or token expiration'
- Pull/merge requests that have a label containing the word spam won’t be counted
  toward Hacktoberfest, and participants with two or more PR/MRs identified as spam
  will be disqualified.
- '429 Too Many Requests: Slow down your requests or check the rate limits.'
- '401 Unauthorized: Verify client credentials and permissions.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Ensure your token is valid.'
- '404 Not Found: Verify the endpoint URL.'
- Ensure your app requires logging in, please provide testing credentials in your
  submission
- '403 Forbidden: Verify API key permissions.'
- '404 Not Found: Check the resource path.'
- '403 Forbidden: Check user permissions.'
- '404 Not Found: Verify the endpoint and parameters.'
- '403 Forbidden: Check your permissions.'
- Function Regression Issues can be detected on any platform that supports Sentry
  Profiling.
- Increased load might be one of the causes of regression.
- bundle size emergency
- '400: Client error indicating that the request is invalid.'
- '500: Server error indicating that there is an issue with the code.'
- '429 Too Many Requests: Rate limit exceeded'
- Unhandled failures in Bash scripts are reported to Sentry.
- '403 Forbidden: Access Restricted'
- '401 Unauthorized: Check authentication credentials'
- '404 Not Found: Verify the endpoint path'
- '401 Unauthorized: Check your API key or authentication token'
- '401 Unauthorized: Ensure correct authentication token is used.'
- '404 Not Found: Check the endpoint path for accuracy.'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Check token validity and scopes.'
- '404 Not Found: Ensure the job ID is correct.'
- '401 Unauthorized: Check API key and permissions'
- '500 Internal Server Error: Backend processing failure'
- '401 Unauthorized: Check API key validity.'
- 'UNAUTHORIZED: Ensure correct authentication credentials.'
- 'INVALID_REQUEST: Check the format of submitted reports.'
- '401 Unauthorized: Recheck your keys or permissions'
- 'INVALID_REPORT: Ensure the report follows the required format'
- 'UNAUTHORIZED_ACCESS: Check OAuth token validity'
- 'SUBMISSION_LIMIT_EXCEEDED: Reduce the number of submissions'
- '400 Bad Request: Check the request format and required parameters.'
- '401 Unauthorized: Ensure API key is valid and included in the request.'
- 'high_latency: High latency detected'
- 'high_cpu: High CPU usage'
- Failed to initialize AWS Bedrock client
- Read timeout error
- Malformed input request
- 'AccessDenied: Check IAM permissions for the user.'
- 'Sender not recognized as management: Check sender''s email address against records'
- '401 Unauthorized: Check your client_id or client_secret'
- '403 Forbidden: Ensure you have the correct permissions'
- 'ACCESS_DENIED: Check if the user has the necessary permissions'
- 'INVALID_TOKEN: Ensure the token is valid and not expired'
- '401 Unauthorized: Check your token.'
- '401 Unauthorized: Check API key or token validity'
- '404 Not Found: Verify endpoint URL'
- '429 Too Many Requests: Throttle API calls'
- '401 Unauthorized: Invalid API key or token.'
- '401 Unauthorized: Check API credentials or token'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuthApp
  - User
  - AccessToken
  - Post
  - OAuth2
  - RefreshToken
  - Zero-Knowledge Proofs
  - Rate-Limit Nullifiers
  - End-to-End Encryption
  - PublicKey
  - ZKProof
  - AES-GCM
  - OAuthToken
client:
  base_url: https://dev.to
source_metadata: null
