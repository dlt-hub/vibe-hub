resources:
- name: getRecord
  endpoint:
    path: /getRecord
    method: GET
- name: getRecords
  endpoint:
    path: /getRecords
    method: GET
- name: createRecord
  endpoint:
    path: /createRecord
    method: POST
- name: updateRecord
  endpoint:
    path: /updateRecord
    method: PATCH
- name: deleteRecord
  endpoint:
    path: /deleteRecord
    method: DELETE
- name: updateRecord
  endpoint:
    path: /updateRecord
    method: POST
    data_selector: result
    params:
      apiName: Contact
      fields:
        Id: recordId
        FirstName: Updated
      allowSaveOnDuplicate: true
- name: deleteRecord
  endpoint:
    path: /deleteRecord
    method: DELETE
    data_selector: result
    params:
      recordId: recordId
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: contact
  endpoint:
    path: /contacts/:id
    method: GET
- name: create_contact
  endpoint:
    path: /contacts
    method: POST
- name: update_contact
  endpoint:
    path: /contacts/:id
    method: PATCH
- name: delete_contact
  endpoint:
    path: /contacts/:id
    method: DELETE
- name: find_records
  endpoint:
    path: /services/data/vXX.X/sobjects/Record
    method: GET
    data_selector: records
- name: write_records
  endpoint:
    path: /services/data/vXX.X/sobjects/Record
    method: POST
    data_selector: records
- name: records
  endpoint:
    path: /v1/records
    method: GET
    data_selector: data
- name: batch_write
  endpoint:
    path: /api/records/batch
    method: POST
- name: batch_update
  endpoint:
    path: /api/records/batch/update
    method: POST
- name: sync_single_record
  endpoint:
    path: /api/records/sync
    method: POST
- name: remove_record
  endpoint:
    path: /api/records/remove
    method: DELETE
- name: attach_file
  endpoint:
    path: /api/records/attachFile
    method: POST
- name: remove_file
  endpoint:
    path: /api/records/removeFile
    method: DELETE
- name: set_ttl
  endpoint:
    path: /api/records/setTTL
    method: POST
- name: reset_ttl
  endpoint:
    path: /api/records/resetTTL
    method: POST
- name: check_regulated_record
  endpoint:
    path: /api/records/checkRegulated
    method: POST
- name: contact
  endpoint:
    path: /api/records/find
    method: POST
    data_selector: data
- name: delete_history
  endpoint:
    path: /api/records/batch/delete
    method: POST
    data_selector: data
- name: batch_write
  endpoint:
    path: /api/records/batch
    method: POST
    data_selector: records
- name: batch_update
  endpoint:
    path: /api/records/batch/update
    method: POST
    data_selector: records
- name: sync_single_by_id
  endpoint:
    path: /api/records/sync
    method: POST
    data_selector: record
- name: sync_single_by_instance
  endpoint:
    path: /api/records/sync/instance
    method: POST
    data_selector: record
- name: remove_single
  endpoint:
    path: /api/records/remove
    method: POST
    data_selector: result
- name: remove_multiple
  endpoint:
    path: /api/records/remove/multiple
    method: POST
    data_selector: result
- name: redact_records
  endpoint:
    path: /api/records/redact
    method: POST
    data_selector: redactedRecords
- name: delete_records_history
  endpoint:
    path: /api/records/deleteHistory
    method: POST
    data_selector: result
- name: check_sync_records
  endpoint:
    path: /api/records/checkSync
    method: POST
    data_selector: result
- name: Lead
  endpoint:
    path: /api/records/find
    method: POST
    data_selector: data
    params: {}
- name: BatchUpdate
  endpoint:
    path: /api/records/batch/update
    method: POST
    data_selector: records
    params: {}
- name: Lead
  endpoint:
    path: /api/records/find
    method: POST
    data_selector: data
    params: {}
- name: File
  endpoint:
    path: /files
    method: POST
    data_selector: body
    params: {}
- name: data_regulation_policy
  endpoint:
    path: /salesforce/configuring-data/
    method: GET
    data_selector: regulation_policies
    params: {}
- name: data_restriction_levels
  endpoint:
    path: /salesforce/configuring-data/
    method: GET
    data_selector: restriction_levels
    params: {}
- name: data_regulation_policy
  endpoint:
    path: /services/data/vXX.X/sobjects/DataRegulationPolicy
    method: GET
    data_selector: records
- name: environments
  endpoint:
    path: /environments
    method: GET
    data_selector: environments
    params: {}
- name: Salesforce
  endpoint:
    path: /services/data-residency/salesforce
    method: POST
- name: Resident Functions
  endpoint:
    path: /services/data-residency/resident-functions
    method: POST
- name: REST API
  endpoint:
    path: /services/data-residency/rest-api
    method: POST
- name: Web Services
  endpoint:
    path: /services/data-residency/web-services
    method: POST
- name: Salesforce
  endpoint:
    path: /data-residency-as-a-service/rest-api-crud-requests/
    method: GET
- name: Resident Functions
  endpoint:
    path: /data-residency-as-a-service/resident-functions-portal/
    method: GET
- name: REST API
  endpoint:
    path: /data-residency-as-a-service/rest-api/
    method: GET
- name: Web Services
  endpoint:
    path: /data-residency-as-a-service/web-services/
    method: GET
- name: encryption_keys
  endpoint:
    path: /portal/managing/encryption-keys
    method: GET
    data_selector: keys
    params: {}
- name: Usage
  endpoint:
    path: /portal/usage-dashboard
    method: GET
    data_selector: transactions
- name: aggregated_data_transactions
  endpoint:
    path: /portal/usage-dashboard/aggregated-data
    method: GET
    data_selector: transactions
    params: {}
- name: country_records
  endpoint:
    path: /portal/usage-dashboard/country-records
    method: GET
    data_selector: records
    params: {}
- name: files_uploaded
  endpoint:
    path: /portal/usage-dashboard/files
    method: GET
    data_selector: files
    params: {}
- name: users
  endpoint:
    path: /portal/managing-users/
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: records
  endpoint:
    path: /api/records/find
    method: POST
    data_selector: data
- name: records
  endpoint:
    path: /api/records/find
    method: POST
    data_selector: data
    params: {}
- name: InCountry Admin
  endpoint:
    path: /services/data/vXX.X/sobjects/InCountryAdmin
    method: GET
    data_selector: records
- name: InCountry User
  endpoint:
    path: /services/data/vXX.X/sobjects/InCountryUser
    method: GET
    data_selector: records
- name: InCountry Community User
  endpoint:
    path: /services/data/vXX.X/sobjects/InCountryCommunityUser
    method: GET
    data_selector: records
- name: InCountry Admin
  endpoint:
    path: /services/data/vXX.X/sobjects/InCountryAdmin
    method: GET
    data_selector: records
- name: InCountry User
  endpoint:
    path: /services/data/vXX.X/sobjects/InCountryUser
    method: GET
    data_selector: records
- name: InCountry Community User
  endpoint:
    path: /services/data/vXX.X/sobjects/InCountryCommunityUser
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: protected_fields
  endpoint:
    path: /salesforce/managing-protected-fields
    method: GET
    data_selector: protected_fields
    params: {}
- name: User
  endpoint:
    path: /services/data/vXX.X/sobjects/User
    method: GET
    data_selector: records
- name: Contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: User
  endpoint:
    path: /services/data/vXX.X/sobjects/User
    method: GET
    data_selector: records
- name: Contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Account
  endpoint:
    path: /services/data/vXX.X/sobjects/Account
    method: GET
    data_selector: records
- name: regulated_objects
  endpoint:
    path: /services/data/vXX.X/sobjects/RegulatedObjects
    method: GET
    data_selector: records
    params: {}
- name: custom_object_management
  endpoint:
    path: /services/data/vXX.X/sobjects/CustomObjectManagement
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Contact
  endpoint:
    path: /services/data/v54.0/sobjects/Contact
    method: PATCH
    data_selector: ''
    params: {}
- name: Lead
  endpoint:
    path: /services/data/v54.0/sobjects/Lead
    method: PATCH
    data_selector: ''
    params: {}
- name: resident_function
  endpoint:
    path: /data-residency-as-a-service/resident-functions-portal
    method: GET
- name: Contact
  endpoint:
    path: /services/data/v54.0/sobjects/Contact
    method: PATCH
- name: Lead
  endpoint:
    path: /services/data/v54.0/sobjects/Lead
    method: PATCH
- name: data_residency_policy
  endpoint:
    path: /services/data/vXX.X/sobjects/Object_relationship__c
    method: GET
    data_selector: records
- name: regulated_field
  endpoint:
    path: /services/data/vXX.X/sobjects/Object_relationship_fields__c
    method: GET
    data_selector: records
- name: Account
  endpoint:
    path: /services/data/vXX.X/sobjects/Account
    method: GET
    data_selector: records
    params: {}
- name: settings
  endpoint:
    path: /salesforce/settings
    method: GET
    data_selector: settings
    params: {}
- name: data_residency_policy
  endpoint:
    path: /services/data/vXX.X/sobjects/Object_relationship__c
    method: GET
    data_selector: records
- name: regulated_field
  endpoint:
    path: /services/data/vXX.X/sobjects/Object_relationship_fields__c
    method: GET
    data_selector: records
- name: Account
  endpoint:
    path: /services/data/vXX.X/sobjects/Account
    method: GET
- name: NamedCredential
  endpoint:
    path: <InCountry Rest API endpoint>
    method: GET
- name: Frontend Validations
  endpoint:
    path: /services/data/vXX.X/sobjects/Frontend_Validation__c
    method: GET
    data_selector: records
- name: Validation Rules
  endpoint:
    path: /services/data/vXX.X/sobjects/Validation_Rule__c
    method: GET
    data_selector: records
- name: hash_recalculation_job
  endpoint:
    path: /services/data/vXX.X/sobjects/HashRecalculationJob
    method: POST
    data_selector: records
- name: lib-record-edit-form
  endpoint:
    path: /services/data/vXX.X/sobjects/lib-record-edit-form
    method: GET
    data_selector: records
- name: lib-input-field
  endpoint:
    path: /services/data/vXX.X/sobjects/lib-input-field
    method: GET
    data_selector: records
- name: lib-record-form
  endpoint:
    path: /lib-record-form
    method: GET
    data_selector: attributes
    params: {}
- name: NamedCredential
  endpoint:
    path: /services/data/vXX.X/NamedCredential
    method: GET
- name: Case
  endpoint:
    path: /services/apexrest/Cases/
    method: PUT
    data_selector: attributes
    params: {}
- name: InCountryStorage
  endpoint:
    path: /InCountryStorage
    method: POST
    data_selector: payload
    params: {}
- name: lib_record_form
  endpoint:
    path: /lib-record-form
    method: GET
    data_selector: records
    params: {}
- name: record_migration
  endpoint:
    path: /salesforce/migrating-records
    method: POST
    data_selector: migration_records
    params: {}
- name: audit_report
  endpoint:
    path: /services/data/vXX.X/sobjects/AuditReport
    method: GET
    data_selector: records
    params: {}
- name: Search
  endpoint:
    path: /salesforce/configuring-search/
    method: GET
    data_selector: records
- name: Case
  endpoint:
    path: /services/apexrest/Cases/
    method: PUT
    data_selector: attributes
    params: {}
- name: Object Related list
  endpoint:
    path: /services/data/vXX.X/sobjects/ObjectRelatedList
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/models/users/find
    method: POST
    data_selector: data
    params:
      filter: customer_id
- name: analytics
  endpoint:
    path: /analytics.js
    method: GET
    data_selector: script
    params: {}
- name: Import Records
  endpoint:
    path: /salesforce/importing-data-into-salesforce/
    method: GET
- name: record_migration
  endpoint:
    path: /services/data/vXX.X/sobjects/RecordMigration
    method: POST
    data_selector: records
- name: audit_report
  endpoint:
    path: /salesforce/managing-audit-reports
    method: GET
    data_selector: report_data
- name: Salesforce Object Search
  endpoint:
    path: /search/v1/objects
    method: POST
    data_selector: results
- name: reports
  endpoint:
    path: /services/data/vXX.X/sobjects/Report
    method: GET
    data_selector: records
- name: replication_model
  endpoint:
    path: /services/data/vXX.X/sobjects/ReplicationModel
    method: GET
    data_selector: records
- name: redaction_and_restriction_model
  endpoint:
    path: /services/data/vXX.X/sobjects/RedactionAndRestrictionModel
    method: GET
    data_selector: records
- name: web_service
  endpoint:
    path: /v1
    method: POST
    data_selector: data
    params: {}
notes:
- For correct operation of the library, LWS must be enabled in the Salesforce org.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Make sure to copy the API key immediately after creating the MCP Server, as it will
  not be accessible later.
- The InCountry platform uses the testInCountry1 namespace prefix.
- All API endpoints must be registered within the InCountryRestAPIEndpoint custom
  metadata type.
- InCountry platform uses the testInCountry1 namespace for the APEX SDK.
- The Apex SDK will automatically split records by country and will make several callouts
  to different InCountry Points of Presence in the target countries.
- The SDK will perform additional SOQL queries to fetch records from the Salesforce
  database.
- Batch operations automatically split by country.
- Additional SOQL queries may be required for record fetching.
- The Apex SDK requires all the regulated fields and the Source Country Field field
  to use the record-level policy for determining the record originating country.
- Regulated values are synchronized with the InCountry platform only after execution
  of a DML operation.
- Uses OAuth2 with refresh token — requires setup of connected app in InCountry
- Hardcoded country value for tests is 'sa'
- When performing unit tests, you can use only the hardcoded 'sa' country.
- InCountry provides the data residency services to companies looking to comply with
  local country regulations and requirements for storing sensitive and regulated data.
- All the regulated data stored on the InCountry platform is encrypted on the fly
  with the customer-owned key, so the data is kept secure and safe.
- Before implementing the replication model, please check their implementation specifics
  to better understand advantages and disadvantages of each approach.
- One or more fields have an error. Please check and try again.
- Please enable the identity provider only if you encounter the Data Not Available
  error.
- Requires setup of connected app in InCountry.
- Please do not share details of the identity provider setup with InCountry or any
  third party.
- Regulated data is stored within the country of origin and cannot leave it.
- Data is saved to the InCountry platform only.
- Data requests from Salesforce in the country of origin are made directly to the
  REST API of InCountry’s Point-of-Presence in the country of origin.
- Stay on top of global data regulations by subscribing to our newsletter. By submitting
  this form, you acknowledge the Terms of Service and Privacy Policy.
- You can create up to 20 environments per organization.
- Removal of the environment is not performed immediately. It is scheduled for removal
  in 60 days, during this period you can restore the environment with all its data.
- InCountry Data Residency-as-a-Service is available in countries with stringent data
  regulations.
- You can create only one service of each type per country.
- Any use of InCountry REST API methods or Border endpoints in the production mode
  without encryption of records is highly discouraged.
- Usage dashboard of the InCountry Portal may show no data and statistics upon the
  first sign-in to the system.
- Only one user with the Owner role can be within one organization.
- By default, this code requests a RestAPI with no search criteria meaning eventually
  all the records will be returned.
- If you want to send any search criteria to read specific records, please change
  the value of the FIND_PAYLOAD constant.
- Feature flag to toggle progress messages in stderr
- Limited error handling, results are collected in memory
- It is highly recommended to install the package for administrators only (select
  the Admins Only option).
- Please avoid selecting the Install for All Users option.
- UPLOAD OF THE PUBLIC CERTIFICATE TO THE INCOUNTRY PORTAL IS A MANDATORY STEP. IF
  YOU SKIP IT, REQUESTS COMING FROM THE APPLICATION FRONTEND WILL NOT BE PROPERLY
  HANDLED AND REGULATED DATA WILL NOT BE QUERIED FROM THE INCOUNTRY PLATFORM.
- Users not assigned to the InCountry Admin, InCountry User, or InCountry Community
  User account will not be able to load the InCountry interface in Salesforce.
- Some objects like Contact may return nulls in deeply nested fields
- Registration of a CSP Trusted Site is required when you localize and distribute
  sensitive data in China.
- The Lightning Component framework uses Content Security Policy (CSP), which is a
  W3C standard, to control the source of content that can be loaded on a page.
- The Lightning Component framework uses Content Security Policy (CSP) to control
  the source of content that can be loaded on a page.
- Management of protected fields is identical for the three-model package and for
  the legacy package.
- Using the improper parameters for protected fields may result in problems with value
  searchability or record saving.
- Hash functions work only with values, if there are no values, the hash function
  is not applied.
- While configuring fields, please consider the using of the proper hash function
  for a specific data format.
- If you hash the UserName field on the User object, only one user can be created
  at the same time.
- The email field on the User object is not supported for hashing because it is used
  in Salesforce flows.
- Management of custom objects is required for operation of the restriction, redaction,
  and UI-based replication models from the three-model package.
- Please consider that custom objects from other installed packages may not be fully
  supported.
- Requires setup of connected app in api
- The enabling of digital experiences is the first step to create an Experience Cloud
  site whenever you create a new community, portal, help center, or website.
- If the 'Manage Criteria' row action appears grayed out and disabled, it indicates
  that the field is a compound field, and criteria cannot be applied directly to it.
- Management of custom objects is required for operation of the redaction model from
  the three-model package.
- After the resident function execution, PII data will be stored according to the
  policy. This means that the Salesforce database will have hashed values, and the
  origin values will be stored on the InCountry platform.
- Enabling digital experiences is the first step to create an Experience Cloud site.
- Salesforce adds specific actions to your account and contact page layouts in Lightning
  Experience.
- Synchronization of regulated records is supported in the legacy package and in the
  three-model package.
- Initial synchronization is a bit faster than safe synchronization for large amounts
  of data because it does not check for the existence of records on the InCountry
  platform, creating them from scratch or rewriting existing records.
- Initial synchronization may cause the partial or complete corruption of regulated
  records because of saving hashed values on the InCountry platform, so please consider
  this while launching it.
- Safe synchronization is required when using the redaction and restriction data regulation
  policies for Salesforce objects and records. When using the replication policy,
  this option is not needed.
- After the resident function execution, PII data will be stored according to the
  policy.
- The deterministic tokenization key is generated only once and cannot be regenerated
  to preserve the consistency of redacted data.
- Initial synchronization is faster than safe synchronization for large amounts of
  data because it does not check for the existence of records on the InCountry platform.
- Safe synchronization is required when you use the redaction and restriction data
  regulation policies for Salesforce objects and records.
- You can download Setup Audit Trail for the last six months in a CSV or XLS format.
- Stay on top of global data regulations by subscribing to our newsletter.
- To use formula fields with protected fields on a Salesforce object, follow the setup
  instructions.
- Deterministic tokenization key is generated only once and cannot be regenerated
  to preserve the consistency of redacted data.
- You need to disable a native validation rule if you migrate it to InCountry frontend
  validations.
- When using frontend validations in Experience Cloud, ensure that the `Validation_Rule__c`
  object has the Public Read permission for the Default External Access in the sharing
  settings.
- The actual object name may vary depending on the package version.
- If the original Salesforce validation rule is deleted, you cannot edit the rule,
  only activate/deactivate/delete.
- If you delete a synchronized frontend validation, the original validation rule will
  be shown in place of the deleted one.
- If all values are shown as 0, then there is an error when connecting to REST API.
  Error information can be found in the log files.
- We do not recommend to migrate the authentication information from a source Salesforce
  org to a target org, but this is possible as well.
- You can use formula fields to manipulate Salesforce data and perform some basic
  validations and calculations on the basis of protected fields storing regulated
  data.
- These fields allow you to create simple and complex formulas based on PII data from
  a record and from its related records.
- The application does not support the automatic localization of regulated records
  across multiple countries, so you need to perform a separate import of records per
  each country.
- Ensure that the `Validation_Rule__c` object has the Public Read permission for the
  Default External Access in the sharing settings.
- The InCountry duplicate record management feature is based on standard Salesforce
  duplication rules with some restrictions presented below.
- For correct operation, the duplicate record management flag must be enabled and
  should be at least one active duplicate rule for the current object.
- The JavaScript API is supported in the redaction and restriction data regulation
  models only.
- To use JavaScript API from your LWC, you need to enable Lightning Web Security in
  your org.
- Be careful when updating the existing data records and ensure that you have specified
  all the fields for the record you want to update. You may accidentally overwrite
  field values with empty values.
- Job statuses can be tracked on the Hash Recalculation page.
- If all values are shown as 0, then there is an error when connecting to REST API.
- Only Salesforce Duplicate rules are enforced.
- Import of regulated records is performed within their country of origin, so there
  is no cross-border transfer.
- Regulated fields are updated in Case Trigger
- The InCountry Potential Duplicates component is displayed in the record details
  view only.
- The InCountry Potential Duplicates component cannot be used without the InCountry
  Highlights Panel and InCountry Record Detail components, otherwise duplicates are
  not displayed.
- The records cannot be inserted/updated from the batch context. Otherwise, they will
  be hashed and clear-text values will be lost.
- All the protected fields will show the *Redacted* value instead of the actual value.
- The CC/BCC functionality is supported in the legacy replication model only.
- When using the legacy replication model, the entire email message with all its fields
  will be saved on the InCountry platform, as well as its attachments. The email message
  is further replicated to the Salesforce database. The InCountry platform enables
  the storage of attachments that do not exceed 10 megabytes. Larger attachments will
  cause an error when sending emails.
- You cannot import records into Salesforce by using the native import functionality
  when using the redaction and restriction data regulation models.
- The import functionality considers the country attribution of records.
- The `*.JKS` certificate that is currently used for the operation of the InCountry
  Data Residency package will not be appropriate for this operation.
- Please be careful when sharing your InCountry production certificates. These certificates
  grant full read/write access to your data records stored on the InCountry platform.
- This functionality is supported in the legacy package only.
- Selecting a long time period or querying large data volumes may extend the time
  required for the report generation.
- Please make your solution decisions based on generally available functionality only.
- Conversion of leads is supported in the legacy package and in the three-model package
  for the redaction and restrictions models.
- A lead can be converted to regulated and non-regulated objects.
- Regulated fields are Type and Priority.
- The report export batch size can be used to configure the number of records to be
  processed per request during report generation. The default value is set as 100
  records.
- You can set the batch size within the range of 50-500 records per batch.
- Management of Apex triggers is required for operation of the legacy replication
  model only.
- All the information contained in this section is applicable to Salesforce’s Winter
  ’22 release only.
- Attempts to synchronize regulated data records are performed sequentially. Upon
  a failed request, the package performs another request until success or until attempts
  are not exceeded. No timeout between attempts is used.
- InCountry operates seamlessly with Segment to dynamically redact regulated fields.
- You need to enter a non-http/https URL in apiHost.
- Records must be imported using the InCountry Data Residency for Salesforce package
  to comply with regulations.
- You cannot use InCountry REST API (with backend), as unredacted data should not
  reach your application backend which InCountry SDK integrates with.
- Migration of records works only at the record restriction level.
- You need to have multiple countries registered for migration.
- Resolved an issue where an error occurred when users navigated back from an EmailMessage
  record to the parent Case record.
- Records now export properly and are successfully saved to a CSV file.
- Selecting a long time period or querying large data volumes from the InCountry platform
  may extend the time required for the report generation.
- Stay on top of global data regulations by subscribing to our newsletter. By submitting
  this form, you acknowledge the Terms of Service and Privacy Policy. We will not
  share your information and will remove your information upon request.
- The lead must always be a regulated object.
- The InCountry Data Residency for Salesforce package looks up only in the fields
  that were configured as searchable with the selected key.
- All the numbers displayed in this table may vary per host and depends on the amount
  of data stored in your Salesforce, as well as configuration parameters and fields.
- Metadata Dependency API is a beta feature in Salesforce that is not generally available.
- The Sales Price or Quantity number fields can be hashed only by the defaultNumber
  or fixed hash functions.
- Quantity on the Opportunity Product (OpportunityLineItem) object field can not be
  saved to the Salesforce database with 0 value, so if you used the defaultNumber
  hash function for this field, it will be saved to the Salesforce database with value
  1.
- Add at least one regulated field for each object that can be modified by the user
  from UI.
- Policy names must contain only letters and numbers without spaces.
- You can delete a policy only if it is not assigned to the SDK or REST API service.
errors:
- Attempting to reference cross-namespace module testIncountry1-recordApi in c-contactDisplayComponent
- '400: An error occurred while trying to update the record. Please try again.'
- 'FIELD_CUSTOM_VALIDATION_EXCEPTION: Illegal LastName field value. Please, use another
  one.'
- 'FIELD_CUSTOM_VALIDATION_EXCEPTION: Invalid Email field value.'
- 'No records matching the filter: Displayed if no records are found during delete
  operation.'
- SObject was retrieved without a required field. For example, you need to specify
  the Source Country field if you are using a record-level policy set for a current
  SObject.
- '401 Unauthorized: Check OAuth token.'
- '404 Not Found: Record not found in the InCountry platform.'
- SObject was retrieved without a required field.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- One or more fields have an error. Please check and try again.
- User deleted from your organization is still able to log into InCountry Portal,
  but they will no longer have access to your organization.
- Unable to execute find request
- Unable to execute request to
- This function is on our roadmap and is not available yet.
- Duplicate file uploading may occur.
- Error when connecting to REST API.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '500: Server error - retry the request'
- '429: Rate limit exceeded - reduce request frequency'
- Import file must include column with countries for record-level restriction.
- 'Failed request id: error occurred when filtering on a regulated value field.'
- If the allow action is used in duplicate rules then you can convert leads without
  selecting anything, if the block action is used in duplicate rules then you must
  select one of the existing records.
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuthToken
  - clientId
  - clientSecret
client:
  base_url: https://portal.incountry.com
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
