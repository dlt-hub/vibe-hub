resources:
- name: bases
  endpoint:
    path: /meta/bases
    method: GET
    data_selector: bases
    params: {}
- name: tables
  endpoint:
    path: /meta/bases/{id}/tables
    method: GET
    data_selector: tables
    params: {}
- name: base
  endpoint:
    path: /meta/bases
    method: GET
    data_selector: bases
- name: table
  endpoint:
    path: /meta/tables
    method: GET
    data_selector: tables
- name: table
  endpoint:
    path: /v0/{base_id}/{table_name}
    method: GET
    data_selector: records
- name: table
  endpoint:
    path: /v0/{base_id}/{table_name}
    method: GET
    data_selector: records
    params:
      page_size: 100
- name: audit_log
  endpoint:
    path: /audit_log
    method: GET
    data_selector: events
    params:
      page_size: '100'
- name: remove_user
  endpoint:
    path: /remove_user
    method: POST
    data_selector: userRemoved
    params: {}
- name: remove_user_from_enterprise
  endpoint:
    path: /remove-user-from-enterprise
    method: POST
    data_selector: was_user_removed_as_admin
- name: delete_users_by_email
  endpoint:
    path: /delete-users-by-email
    method: POST
    data_selector: deleted_users
- name: manage_user_membership
  endpoint:
    path: /manage-user-membership
    method: POST
    data_selector: errors
- name: move_user_groups
  endpoint:
    path: /move-user-groups
    method: POST
    data_selector: moved_groups
- name: move_workspaces
  endpoint:
    path: /move-workspaces
    method: POST
    data_selector: moved_workspaces
- name: remove_user_from_enterprise
  endpoint:
    path: /remove-user-from-enterprise
    method: POST
    data_selector: was_user_removed_as_admin
    params: {}
- name: delete_users_by_email
  endpoint:
    path: /delete-users-by-email
    method: POST
    data_selector: deleted_users
    params: {}
- name: manage_user_membership
  endpoint:
    path: /manage-user-membership
    method: POST
    data_selector: errors
    params: {}
- name: move_user_groups
  endpoint:
    path: /move-user-groups
    method: POST
    data_selector: moved_groups
    params: {}
- name: move_workspaces
  endpoint:
    path: /move-workspaces
    method: POST
    data_selector: moved_workspaces
    params: {}
- name: Record
  endpoint:
    path: /v0/{base_id}/{table_name}
    method: GET
    data_selector: records
- name: AuditLogResponse
  endpoint:
    path: /audit-log
    method: GET
    data_selector: events
    params: {}
- name: Comment
  endpoint:
    path: /comments
    method: GET
    data_selector: records
    params: {}
- name: Webhook
  endpoint:
    path: /webhooks
    method: GET
    data_selector: records
    params: {}
- name: webhook_payload
  endpoint:
    path: /webhook/payloads
    method: GET
    data_selector: payloads
- name: audit_log
  endpoint:
    path: /api/audit-log
    method: GET
    data_selector: events
- name: webhook
  endpoint:
    path: /api/webhooks
    method: GET
    data_selector: webhooks
- name: webhook_payloads
  endpoint:
    path: /webhook_payloads
    method: GET
    data_selector: records
- name: bases
  endpoint:
    path: /v0/bases
    method: GET
    data_selector: bases
- name: base
  endpoint:
    path: /v0/bases/{base_id}
    method: GET
    data_selector: id
- name: base_collaborators
  endpoint:
    path: /v0/bases/{base_id}/collaborators
    method: GET
    data_selector: collaborators
- name: base_shares
  endpoint:
    path: /v0/bases/{base_id}/shares
    method: GET
    data_selector: shares
- name: base_schema
  endpoint:
    path: /v0/bases/{base_id}/schema
    method: GET
    data_selector: tables
- name: schema
  endpoint:
    path: /schema
    method: GET
    data_selector: fields
    params: {}
- name: bases
  endpoint:
    path: /list-bases
    method: GET
    data_selector: bases
- name: base_info
  endpoint:
    path: /base/{base_id}
    method: GET
    data_selector: id
- name: base_collaborators
  endpoint:
    path: /get-base-collaborators
    method: GET
    data_selector: collaborators
- name: base_schema
  endpoint:
    path: /get-base-schema
    method: GET
    data_selector: tables
- name: base_shares
  endpoint:
    path: /list-shares
    method: GET
    data_selector: shares
- name: table
  endpoint:
    path: Table Name
    method: GET
    data_selector: schema
    params: {}
- name: workspace_invite_link
  endpoint:
    path: /models/schema/WorkspaceInviteLink
    method: GET
    data_selector: records
- name: interface_invite_link
  endpoint:
    path: /models/schema/InterfaceInviteLink
    method: GET
    data_selector: records
- name: enterprise_info
  endpoint:
    path: /models/schema/EnterpriseInfo
    method: GET
    data_selector: records
- name: workspace_collaborators
  endpoint:
    path: /models/schema/WorkspaceCollaborators
    method: GET
    data_selector: records
- name: UserInfo
  endpoint:
    path: /get-user-by-id
    method: GET
    data_selector: records
- name: UserGroup
  endpoint:
    path: /get-user-group
    method: GET
    data_selector: records
- name: workspace_invite_link
  endpoint:
    path: /models/schema/WorkspaceInviteLink
    method: GET
    data_selector: WorkspaceInviteLink
- name: interface_invite_link
  endpoint:
    path: /models/schema/InterfaceInviteLink
    method: GET
    data_selector: InterfaceInviteLink
- name: enterprise_info
  endpoint:
    path: /models/schema/EnterpriseInfo
    method: GET
    data_selector: EnterpriseInfo
- name: workspace_collaborators
  endpoint:
    path: /models/schema/WorkspaceCollaborators
    method: GET
    data_selector: WorkspaceCollaborators
- name: collaborations
  endpoint:
    path: /models/schema/Collaborations
    method: GET
    data_selector: Collaborations
- name: webhook_notification_result
  endpoint:
    path: /webhook/notification/result
    method: GET
    data_selector: success
- name: webhook_error
  endpoint:
    path: /webhook/error
    method: GET
    data_selector: message
- name: create_webhook
  endpoint:
    path: /webhook/create
    method: POST
    data_selector: id
- name: Contact
  endpoint:
    path: /v0/appaPqizdsNHDvlEm/Contact
    method: GET
    data_selector: records
- name: Contact
  endpoint:
    path: /YOUR_ENDPOINT_FOR_CONTACT
    method: GET
    data_selector: records
    params: {}
- name: fields
  endpoint:
    path: /orm/fields
    method: GET
    data_selector: fields
    params: {}
- name: Contact
  endpoint:
    path: /orm/fields/Contact
    method: GET
    data_selector: fields
- name: record
  endpoint:
    path: /v0/{base_id}/{table_name}
    method: GET
    data_selector: records
- name: Contact
  endpoint:
    path: /v0/appaPqizdsNHDvlEm/Contact
    method: GET
    data_selector: records
- name: Contact
  endpoint:
    path: /v0/appaPqizdsNHDvlEm/Contact
    method: GET
    data_selector: records
    params: {}
- name: Contact
  endpoint:
    path: /v0/appaPqizdsNHDvlEm/Contact
    method: GET
    data_selector: records
- name: Contact
  endpoint:
    path: /Contact
    method: GET
    data_selector: records
    params: {}
- name: Contact
  endpoint:
    path: /v0/appaPqizdsNHDvlEm/Contact
    method: GET
    data_selector: records
- name: Contact
  endpoint:
    path: /your-endpoint-path
    method: GET
    data_selector: records
    params: {}
- name: bases
  endpoint:
    path: /bases
    method: GET
    data_selector: records
- name: tables
  endpoint:
    path: /tables
    method: GET
    data_selector: records
- name: webhook
  endpoint:
    path: /airtable-webhook
    method: POST
- name: enterprise_info
  endpoint:
    path: /enterprise/info
    method: GET
    data_selector: info
- name: audit_log
  endpoint:
    path: /enterprise/audit_log
    method: GET
    data_selector: events
    params: {}
- name: collaborators
  endpoint:
    path: /base/collaborators
    method: GET
    data_selector: collaborators
    params: {}
- name: shares
  endpoint:
    path: /base/shares
    method: GET
    data_selector: shares
    params: {}
- name: enterprise_info
  endpoint:
    path: /enterprise/info
    method: GET
- name: base_collaborators
  endpoint:
    path: /base/collaborators
    method: GET
- name: base_shares
  endpoint:
    path: /base/shares
    method: GET
- name: workspace_collaborators
  endpoint:
    path: /workspace/collaborators
    method: GET
- name: audit_log
  endpoint:
    path: /enterprise/audit_log
    method: GET
- name: whoami
  endpoint:
    path: whoami
    method: GET
- name: bases
  endpoint:
    path: bases
    method: GET
- name: base_schema
  endpoint:
    path: base/{BASE_ID}/schema
    method: GET
- name: base_records
  endpoint:
    path: base/{BASE_ID}/table/{ID_OR_NAME}/records
    method: GET
- name: base_table_schema
  endpoint:
    path: base/{BASE_ID}/table/{ID_OR_NAME}/schema
    method: GET
- name: base_collaborators
  endpoint:
    path: base/{BASE_ID}/collaborators
    method: GET
- name: base_shares
  endpoint:
    path: base/{BASE_ID}/shares
    method: GET
- name: base_orm
  endpoint:
    path: base/{BASE_ID}/orm
    method: GET
- name: enterprise_info
  endpoint:
    path: enterprise/{ENTERPRISE_ID}/info
    method: GET
- name: enterprise_user
  endpoint:
    path: enterprise/{ENTERPRISE_ID}/user/{ID_OR_EMAIL}
    method: GET
- name: enterprise_users
  endpoint:
    path: enterprise/{ENTERPRISE_ID}/users
    method: GET
- name: enterprise_group
  endpoint:
    path: enterprise/{ENTERPRISE_ID}/group/{GROUP_ID}
    method: GET
- name: enterprise_groups
  endpoint:
    path: enterprise/{ENTERPRISE_ID}/groups
    method: GET
- name: whoami
  endpoint:
    path: whoami
    method: GET
- name: bases
  endpoint:
    path: bases
    method: GET
- name: base_schema
  endpoint:
    path: base BASE_ID schema
    method: GET
- name: base_table_records
  endpoint:
    path: base BASE_ID table ID_OR_NAME records
    method: GET
- name: base_table_schema
  endpoint:
    path: base BASE_ID table ID_OR_NAME schema
    method: GET
- name: base_collaborators
  endpoint:
    path: base BASE_ID collaborators
    method: GET
- name: base_shares
  endpoint:
    path: base BASE_ID shares
    method: GET
- name: base_orm
  endpoint:
    path: base BASE_ID orm
    method: GET
- name: enterprise_info
  endpoint:
    path: enterprise ENTERPRISE_ID info
    method: GET
- name: enterprise_user
  endpoint:
    path: enterprise ENTERPRISE_ID user
    method: GET
- name: enterprise_users
  endpoint:
    path: enterprise ENTERPRISE_ID users
    method: GET
- name: enterprise_group
  endpoint:
    path: enterprise ENTERPRISE_ID group
    method: GET
- name: enterprise_groups
  endpoint:
    path: enterprise ENTERPRISE_ID groups
    method: GET
notes:
- Airtable-imposed limit on number of records per batch create/update operation is
  10.
- Airtable-imposed limit on the length of a URL is 16000.
- Airtable-imposed limit on the length of a URL (including query parameters) is 16000.
- Airtable API has a limit of 100 records per request.
- The maximum number of records returned in a single request is 100.
- This feature is only available on Enterprise billing plans.
- Uses API key for authentication.
- Models are deeply nested and may require specific handling.
- Webhook management includes enabling/disabling notifications.
- This field is specific to pyAirtable, and is not part of Airtable’s webhook payload
  specification.
- Models may be deeply nested.
- Some fields may have optional properties.
- Check email domain restrictions for invite links.
- Requires API key or personal access token.
- Base ID must be provided.
- pyAirtable does not inspect field configuration at runtime or during type checking.
- If the Airtable API returns null, this field raises MissingValueError.
- Not all API methods are supported; if your test calls a method that would make a
  network request, a RuntimeError will be raised instead.
- Airtable has deprecated API keys and they will stop working with in February 2024.
- Airtable imposes a rate limit of 5 QPS per base.
- By default, pyAirtable will retry 429 errors up to five times.
- pyAirtable lets you construct formulas at runtime using Python syntax.
- Airtable does not have a concept of fields that require values, but pyAirtable allows
  you to enforce that concept within code.
- Airtable does not have a concept of fields that require values, but pyAirtable allows
  you to enforce that concept within code using one of the following field classes.
- Airtable does not have a concept of fields that require values, but pyAirtable allows
  you to enforce that concept within code
- Airtable does not have a concept of fields that require values, but pyAirtable allows
  you to enforce that concept within code using one of the field classes.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses API key for authentication
- pyAirtable does not attempt to recursively save any linked records.
- Field values don’t get refreshed after saving a record.
- Airtable does not have a concept of fields that require values.
- Airtable does not generally have a concept of fields that require values
- In most cases you probably want your code to fail quickly and loudly if there is
  an error value coming back from the Airtable API.
- In the unusual cases where you want to gracefully handle an error and move on, use
  is_airtable_error().
- pyAirtable will not attempt to recursively save any linked records.
- pyAirtable will not refresh models when calling save().
- Type annotations don’t account for possible formula errors
- The API allows listing bases, tables, fields, and views.
- The Airtable API gives you the ability to list all of your bases, tables, fields,
  and views.
- Airtable’s API does not permit retrieving a single webhook
- When using webhooks, you need some way to persist the cursor of the webhook payload.
- Requires setup of connected app in api
- pyAirtable 3.0 is tested on Python 3.9 or higher.
- pyAirtable 3.0 requires Pydantic 2.
- Some objects like Contact may return nulls in deeply nested fields
- pyAirtable will automatically retry requests when throttled by Airtable’s QPS.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check your request parameters.'
- '403 Forbidden: Check your API key and permissions.'
- '404 Not Found: Check the base or table ID.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'CircularFormulaError: A circular dependency was encountered when flattening nested
  conditions.'
- 'InvalidParameterError: Raised when invalid parameters are passed to all(), first(),
  etc.'
- 'MissingValueError: A required field received an empty value, either from Airtable
  or other code.'
- 'MultipleValuesError: SingleLinkField received more than one value from either Airtable
  or calling code.'
- 'ReadonlyFieldError: Attempted to set a value on a readonly field.'
- 'UnsavedRecordError: Attempted to perform an unsupported operation on an unsaved
  record.'
- '429: Too Many Requests - Throttle API calls or reduce frequency'
- '429: Rate limit exceeded'
- '401 Unauthorized: Recheck API key or permissions'
- 'Invalid formula: Check your formula for errors'
- 'Division by zero: Ensure your formula does not divide by zero'
- 'Invalid formula error: Check the formula syntax and referenced fields.'
- 'ValueError: Person.manager contains an unsaved record'
- 'Invalid formula: Check your formula syntax.'
- 'Invalid API key: Recheck your API key and permissions'
- 'MissingValue: MyTable.name does not accept empty values'
- '429: Throttle API calls or reduce frequency'
auth_info:
  mentioned_objects: []
client:
  base_url: https://airtable.com/api
  auth:
    type: oauth2
    flow: refresh_token
  paginator:
    type: page
    page_size_param: page_size
    default_page_size: 100
source_metadata: null
