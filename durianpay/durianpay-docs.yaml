resources:
- name: snap_bank_code_list
  endpoint:
    path: /reference/snap-bank-code-list
    method: GET
    data_selector: bank_code_list
- name: Create Order
  endpoint:
    path: /reference/create-order
    method: POST
- name: Order Fetch
  endpoint:
    path: /reference/fetch-order
    method: GET
- name: Order Fetch by ID
  endpoint:
    path: /reference/fetch-order-by-id
    method: GET
- name: orders
  endpoint:
    path: /v1/orders
    method: POST
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params:
      from: ''
      to: ''
      skip: 0
      limit: 25
- name: order
  endpoint:
    path: /v1/orders/{id}
    method: GET
    data_selector: json
- name: payment
  endpoint:
    path: /reference/payment-object
    method: GET
- name: charge_payment
  endpoint:
    path: /v1/payments/charge
    method: POST
    data_selector: response
    params: {}
- name: payment_charge
  endpoint:
    path: /v1/payments/charge
    method: POST
    data_selector: response
    params: {}
- name: payment_charge_qris
  endpoint:
    path: /payments/charge
    method: POST
    data_selector: object
- name: payment_charge_card
  endpoint:
    path: /v1/payments/charge
    method: POST
    data_selector: response
    params: {}
- name: payment_charge
  endpoint:
    path: /payments/charge
    method: POST
- name: payment_charge
  endpoint:
    path: /payments/charge
    method: POST
    data_selector: data
    params: {}
- name: payment_charge_bnpl
  endpoint:
    path: /v1/payments/charge
    method: POST
    data_selector: json
    params:
      type: BNPL
      request: payment_method_unique_id=INDODANA
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
    params:
      from: YYYY-MM-DD
      to: YYYY-MM-DD
      skip: 0
      limit: 25
- name: payment_fetch_by_id
  endpoint:
    path: /v1/payments/{id}
    method: GET
    data_selector: object
    params: {}
- name: check_payment_status
  endpoint:
    path: /v1/payments/{id}/status
    method: GET
    data_selector: data
    params: {}
- name: verify_payments
  endpoint:
    path: /v1/payments/{id}/verify
    method: POST
    data_selector: data
    params: {}
- name: check_payment_status
  endpoint:
    path: /v1/payments/{id}/status
    method: GET
    data_selector: data
    params: {}
- name: cancel_payment
  endpoint:
    path: /v1/payments/{id}/cancel
    method: PUT
    data_selector: data
    params: {}
- name: create_virtual_account
  endpoint:
    path: /v1/payments/va
    method: POST
    data_selector: data
- name: virtual_account
  endpoint:
    path: /v1/payments/va
    method: GET
    data_selector: data.virtual_accounts
    params:
      from: '2024-09-01'
      to: '2024-09-09'
      skip: 0
      limit: 10
- name: fetch_virtual_account_by_id
  endpoint:
    path: /v1/payments/va/{id}
    method: GET
    data_selector: data
- name: patch_virtual_account
  endpoint:
    path: /v1/payments/va/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: access_token_b2b
  endpoint:
    path: /v1.0/access-token/b2b
    method: POST
    data_selector: response
    params: {}
- name: create_virtual_account
  endpoint:
    path: /transfer-va/create-va
    method: POST
- name: inquiry_virtual_account
  endpoint:
    path: /transfer-va/inquiry-va
    method: POST
- name: update_virtual_account
  endpoint:
    path: /v1.0/transfer-va/update-va
    method: PUT
    params: {}
- name: va_payment_notification
  endpoint:
    path: /transfer-va/payment
    method: POST
    data_selector: response
    params: {}
- name: eWallet Payment
  endpoint:
    path: /v1.0/debit/payment-host-to-host
    method: POST
    data_selector: object
- name: eWallet Payment Status
  endpoint:
    path: /debit/status
    method: POST
    data_selector: object
    params: {}
- name: cancel_ewallet_payment
  endpoint:
    path: /debit/cancel
    method: POST
    data_selector: response
    params: {}
- name: refund_ewallet_payment
  endpoint:
    path: /debit/refund
    method: POST
- name: eWallet Notification
  endpoint:
    path: /v1.0/debit/notify
    method: POST
    data_selector: object
    params: {}
- name: generate_qris
  endpoint:
    path: /qr/qr-mpm-generate
    method: POST
- name: query_qris
  endpoint:
    path: /qr/qr-mpm-query
    method: POST
    data_selector: object
    params: {}
- name: cancel_qris
  endpoint:
    path: /qr/qr-mpm-cancel
    method: POST
- name: refund_qris_payment
  endpoint:
    path: /qr/qr-mpm-refund
    method: POST
    data_selector: object
- name: qris_notification
  endpoint:
    path: /qr/qr-mpm-notify
    method: POST
    data_selector: object
    params: {}
- name: disbursement_status
  endpoint:
    path: /reference/disbursement
    method: GET
    data_selector: records
- name: access_token
  endpoint:
    path: /access-token/b2b
    method: POST
    data_selector: response
    params: {}
- name: account_inquiry
  endpoint:
    path: /account-inquiry-external
    method: POST
- name: bank_transfer
  endpoint:
    path: /transfer-interbank
    method: POST
- name: transfer_status
  endpoint:
    path: /transfer/status
    method: POST
    data_selector: json
    params: {}
- name: account_inquiry
  endpoint:
    path: /emoney/account-inquiry
    method: POST
    data_selector: object
    params: {}
- name: e_wallet_transfer
  endpoint:
    path: /emoney/topup
    method: POST
    data_selector: json
    params: {}
- name: e_wallet_transfer_status
  endpoint:
    path: /emoney/topup-status
    method: POST
    data_selector: json
    params: {}
- name: balance_inquiry
  endpoint:
    path: /balance-inquiry
    method: POST
    data_selector: accountInfos
    params: {}
- name: transfer_bank_notify
  endpoint:
    path: /transfer-bank/notify
    method: POST
    data_selector: payload
- name: sub_account
  endpoint:
    path: /v1/merchants/subaccount
    method: POST
    data_selector: data
    params: {}
- name: update_sub_account
  endpoint:
    path: /merchants/subaccount/{id}
    method: PUT
- name: fetch_sub_account
  endpoint:
    path: /fetch-subaccount
    method: GET
- name: sub_account
  endpoint:
    path: /v1/merchants/subaccount
    method: GET
    data_selector: subaccounts
    params:
      skip: 0
      limit: null
- name: update_sub_account_fees
  endpoint:
    path: /v1/merchants/subaccount/fee
    method: POST
    data_selector: data
    params: {}
- name: fetch_sub_account_fees
  endpoint:
    path: /v1/merchants/subaccount/fee/{id}
    method: GET
    data_selector: data.subaccounts
    params:
      id: mer_123
- name: refund
  endpoint:
    path: /v1/refunds
    method: POST
    data_selector: data
    params: {}
- name: refund
  endpoint:
    path: /refunds
    method: GET
    data_selector: data.refund
    params:
      from: 20204-09-01
      to: '2024-09-10'
      skip: 0
      limit: 1
- name: refund_fetch_by_id
  endpoint:
    path: /v1/refunds/{id}
    method: GET
    data_selector: data
- name: refund_fetch_by_payment_id
  endpoint:
    path: /v1/refunds/payment/{id}
    method: GET
    data_selector: data
    params:
      id: pay_abcdefg1234
- name: create_order
  endpoint:
    path: /reference/create-order
    method: POST
- name: fetch_order
  endpoint:
    path: /reference/fetch-order
    method: GET
- name: fetch_order_by_id
  endpoint:
    path: /reference/fetch-order-by-id
    method: GET
- name: Payment
  endpoint:
    path: /reference/payment-object
    method: GET
- name: payment_charge_virtual_account
  endpoint:
    path: /v1/payments/charge
    method: POST
- name: create_virtual_account
  endpoint:
    path: /v1/payments/va
    method: POST
    data_selector: data
    params: {}
- name: access_token
  endpoint:
    path: /v1.0/access-token/b2b
    method: POST
    data_selector: object
    params: {}
- name: generate_qris
  endpoint:
    path: /qr/qr-mpm-generate
    method: POST
- name: payment
  endpoint:
    path: /debit/payment-host-to-host
    method: POST
- name: create_virtual_account
  endpoint:
    path: /transfer-va/create-va
    method: POST
- name: disbursement_status
  endpoint:
    path: /reference/disbursement
    method: GET
- name: register_sub_account
  endpoint:
    path: /v1/merchants/subaccount
    method: POST
    data_selector: data
    params: {}
- name: fetch_sub_account
  endpoint:
    path: /v1/merchants/subaccount
    method: GET
    data_selector: data
    params: {}
- name: refund
  endpoint:
    path: /v1/refunds
    method: POST
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: POST
    data_selector: id
- name: orders
  endpoint:
    path: /v1/orders
    method: POST
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: POST
    data_selector: data
- name: payments
  endpoint:
    path: /v1/payments/charge
    method: POST
    data_selector: data
- name: access_token
  endpoint:
    path: /v1.0/access-token/b2b
    method: POST
    data_selector: response
    params:
      grantType: AUTHORIZATION_CODE
- name: balance_inquiry
  endpoint:
    path: /v1.0/balance-inquiry
    method: POST
    data_selector: response
- name: access_token
  endpoint:
    path: /v1.0/access-token/b2b
    method: POST
    data_selector: response
    params: {}
- name: balance_inquiry
  endpoint:
    path: /v1.0/balance-inquiry
    method: POST
    data_selector: response
    params: {}
- name: account_inquiry
  endpoint:
    path: /account-inquiry-external
    method: POST
    data_selector: response
    params: {}
- name: account_inquiry
  endpoint:
    path: /emoney/account-inquiry
    method: POST
    data_selector: response
    params: {}
- name: transfer_interbank
  endpoint:
    path: /transfer-interbank
    method: POST
    data_selector: response
    params: {}
- name: emoney_topup
  endpoint:
    path: /emoney/topup
    method: POST
    data_selector: response
    params: {}
- name: transfer_status
  endpoint:
    path: /transfer/status
    method: POST
    data_selector: response
    params: {}
- name: transfer_status
  endpoint:
    path: /transfer/status
    method: POST
    data_selector: response
    params: {}
- name: balance_inquiry
  endpoint:
    path: /v1.0/balance-inquiry
    method: POST
    data_selector: ''
    params: {}
- name: Generate B2B Access Token
  endpoint:
    path: /v1.0/access-token/b2b
    method: POST
- name: Bank Account Inquiry API
  endpoint:
    path: /v1.0/account-inquiry-external
    method: POST
- name: Bank Transfer API
  endpoint:
    path: /v1.0/transfer-interbank
    method: POST
- name: Bank Transfer Inquiry Status API
  endpoint:
    path: /v1.0/transfer-interbank
    method: GET
- name: E-Wallet Account Inquiry API
  endpoint:
    path: /v1.0/emoney/account-inquiry
    method: POST
- name: E-Wallet Transfer API
  endpoint:
    path: /v1.0/emoney/topup
    method: POST
- name: E-Wallet Transfer Inquiry Status API
  endpoint:
    path: /v1.0/emoney/topup-status
    method: GET
- name: Balance Inquiry API
  endpoint:
    path: /v1.0/balance-inquiry
    method: POST
- name: submit_disbursement
  endpoint:
    path: /v1/disbursements/submit
    method: POST
    data_selector: data
    params:
      force_disburse: 'true'
      skip_validation: 'false'
- name: approve_disbursement
  endpoint:
    path: /v1/disbursements/dis_XXXXX/approve
    method: POST
    data_selector: data
    params: {}
- name: disbursement_status
  endpoint:
    path: /v1/disbursements/{dis_id}
    method: GET
    data_selector: ''
    params: {}
- name: cancel_payment
  endpoint:
    path: /v1/payments/{id}/cancel
    method: GET
    data_selector: data
    params: {}
- name: webhook_events
  endpoint:
    path: /webhooks
    method: POST
    data_selector: event
    params: {}
- name: webhook_events
  endpoint:
    path: /webhook/events
    method: POST
    data_selector: data
    params: {}
- name: payment_status
  endpoint:
    path: /v1/payments/{id}
    method: GET
    data_selector: status
    params: {}
- name: refund
  endpoint:
    path: /v1/refunds
    method: POST
    data_selector: data
    params: {}
- name: account_validation
  endpoint:
    path: /account-inquiry-external
    method: POST
    data_selector: response
    params: {}
- name: ewallet_account_validation
  endpoint:
    path: /emoney/account-inquiry
    method: POST
    data_selector: response
    params: {}
- name: disbursement.validation.completed
  endpoint:
    path: /callback/v1.0/transfer/notify
    method: POST
    data_selector: data
    params: {}
- name: disbursement.completed
  endpoint:
    path: /callback/v1.0/transfer/notify
    method: POST
    data_selector: data
    params: {}
- name: subaccount
  endpoint:
    path: /v1/merchants/subaccount
    method: POST
    data_selector: data
    params: {}
- name: subaccount_fee
  endpoint:
    path: /v1/merchants/subaccount/fee
    method: POST
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /reports/orders
    method: GET
- name: payments
  endpoint:
    path: /reports/payments
    method: GET
- name: payouts
  endpoint:
    path: /reports/payouts
    method: GET
- name: settlements
  endpoint:
    path: /reports/settlements
    method: GET
notes:
- Live credentials will be given only after merchant's legal document & functionality
  test is approved by Durianpay.
- B2B Access Token will be used for all transactional APIs. The token itself will
  have 900 seconds (15 minutes) valid time by default.
- There is no refresh access token nor the access token will be auto refreshed, so
  you will need to generate another access token if it has passed its expiry time.
- The following endpoint charges the payment for Card
- The URL for this request expired after 30 days.
- Durianpay triggers events whenever a transaction occurs on your SNAP Virtual Account
  integration.
- Each request includes a signature header that must be verified before processing
  the payload.
- Represents Access Token (B2B) of a request; string starts with keyword 'Bearer '
  followed by Access Token (B2B)
- If your server does not respond with 200 OK, we retry delivery after 2, 5, 10, 90,
  and 210 minutes.
- Represents Access Token (B2B) of a request; string starts with keyword “Bearer ”
  followed by Access Token (B2B)
- Always respond with HTTP 200 OK to acknowledge receipt of the webhook.
- 'Durianpay will retry based on this schedule: 2, 5, 10, 90, 210 minutes.'
- Timestamp in ISO8601 format required for requests.
- Authorization header must start with 'Bearer ' followed by Access Token (B2B).
- URL for this request expired after 30 days.
- Durian Checkout is built on Plain JavaScript, please ensure that your application
  is suitable for this method
- Ensure the is_payment_link parameter is set to true to generate Payment Link
- Use your own Sandbox/Production Server Key to create your API key.
- The API keys for Sandbox and Production are different.
- You need to generate different public-private key pair for sandbox mode and live
  mode.
- Account validation will not immediately return success response but rather Accepted.
- In rare cases, it can take longer to get the final status of a transaction.
- In case of time out or internal server error, merchant can try to submit disbursement
  with the same partnerReferenceNo to see if previous disbursement was submitted or
  not.
- Submit disbursement will not immediately return success response but rather Accepted.
- Use previous referenceNo or partnerReferenceNo from the original request to get
  disbursement status
- 'There are 3 state of disbursement/transfer: success, processing, and failed'
- The HTTP Code itself might show 200, but the transfer status can be failed
- The webhook will be sent for both Bank Transfer & E-Wallet transfer API.
- Request requires specific headers such as X-TIMESTAMP, X-SIGNATURE, X-PARTNER-ID,
  and Authorization.
- Double-check and fill in all mandatory fields like merchant name, date of testing,
  and other key details before submission.
- Webhook events include disbursement.validation.completed and disbursement.completed.
- Use appropriate key if it is a sandbox order please use dp_test key and if it is
  a live order then use dp_live key
- X-Idempotency-Key is a unique token that is submitted alongside each API request.
- When creating new transaction, provide X-Idempotency-Key on the header of each request.
- Sandbox environment is accessible with different API Keys than the LIVE ones.
- This is the starting limit that can be increased upon request.
- Dynamic routing is setup automatically for dynamic QRIS and dynamic closed virtual
  accounts.
- We only send webhooks if the event is marked as primary. Make sure the webhook you
  plan to use has the 'primary' value set to true.
- Currently, Durianpay's Refund only supports E-wallet and QRIS payments
- Refund process happened synchronously.
- account_validation.completed webhook is currently not available in sandbox, it's
  available only in live mode
- Ensure only the right party can use your disburment funds
- We highly recommend you to provide the IP address list to be white-listed especially
  if you are using Pay Out/ Disbursement feature to secure your transactions with
  us.
- Webhook URL should return 200 OK to successfully set up a webhook.
- In case of timeout, We recommend you to always call inquiry status API to check
  the transaction status, before proceeding with changing your internal status.
- 5xx API response means that the server failed to fulfill an apparently valid request.
  We recommend you to always call inquiry status API to check the transaction status,
  before proceeding with changing your internal status.
- 4xx API response means that client error – the request contains bad syntax or cannot
  be fulfilled. Generally it's safe to mark transaction as failed if you receive 4xx
  error.
- Durianpay provides no code pay out transactions via batch upload.
- When the transaction is successfully disbursed to the recipient, Durianpay will
  also send notification via email/WhatsApp if it is set by the merchants.
errors:
- '400'
- '401'
- '400: Bad Request'
- '401: Unauthorized'
- '500: Internal Server Error'
- '404'
- '500'
- '400: error'
- '401: error, error_code'
- '500: error, error_code'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: error_code'
- '401: error_code'
- '500: error_code'
- '404: Not Found'
- 401 Unauthorized - Missing Client Key Header
- 401 Unauthorized - Invalid Signature
- 500 Internal Server Error
- 504 Gateway Timeout
- '400: Requested Amount is Below Minimum'
- '400: Requested Amount is Above Maximum'
- '400: Invalid Mandatory Field Value'
- '400: Invalid Mandatory Field Format'
- '400: General Bad Request'
- '500: External Server Error'
- '400: Invalid Mandatory Field'
- '404: Transaction ID Not Found'
- '404: Invalid VA Number'
- '404: Transaction Not Found'
- '200 OK: Indicates successful processing of the request.'
- '404: ID Not Found'
- '403: Ineligible for Cancel'
- '403: Ineligible for Refund'
- '403: Refund Not Enabled'
- '403: Insufficient Balance'
- '400: Bad Request - Invalid Mandatory Field'
- '401: Unauthorized - Invalid Token'
- '401: Unauthorized - Invalid Signature'
- 400 Bad Request - Invalid Mandatory Field
- 400 Bad Request - Invalid Field Format
- 400 Bad Request - Missing Header
- 401 Unauthorized - Invalid Token
- 409 Conflict - Duplicate partnerReferenceNo
- '400: Bad Request - Invalid Field Format'
- '404: Result'
- '409: Conflict'
- '504: Gateway Timeout'
- '400: Bad Request - Missing Header'
- '409: Conflict - Duplicate partnerReferenceNo'
- 404 Result
- 409 Conflict
- '409: Result'
- '401: Unauthorized [reason]'
- '500: General Error'
- '504: Timeout'
- '400: Invalid payment method ID'
- '400: Invalid Disbursement Fee Type'
- '500: Result'
- '403: Forbidden'
- '400: Client-side error occurred while processing the request.'
- '500: Server-side error occurred while processing the request.'
- '400 Bad Request: Check the request payload for errors'
- '401 Unauthorized: Access token might be invalid or expired'
- '404 Not Found: The requested resource does not exist'
- '400 Bad Request: Check request parameters and payload.'
- '401 Unauthorized: Check your API Key.'
- '404 Not Found: Check the endpoint path or resource.'
- '4091100: Conflict - same X-External-ID or partnerReferenceNo is being used twice'
- '400: Invalid Field Format {field name}'
- '400: Invalid Mandatory Field {field name}'
- '401: Invalid Token (B2B)'
- '401: Token Not Found (B2B)'
- '403: Transaction Expired'
- '403: Inactive Card/Account/Customer'
- '404: Invalid Card/Account/Customer [info]/Virtual Account'
- '409: Duplicate partnerReferenceNo'
- '4091100: Same X-External-ID or partnerReferenceNo is being used twice.'
- '400: Bad Request: General request failed error, including message parsing failed.'
- '401: Unauthorized [reason]: General unauthorized error (No Interface Def, API is
  Invalid, Oauth Failed, Verify Client Secret Fail, Client Forbidden Access API, Unknown
  Client, Key not Found, Invalid Signature)'
- '403: Transaction Expired: Transaction expired'
- '404: Transaction Not Found: Transaction not found'
- '409: Conflict: Cannot use same X-EXTERNAL-ID in same day'
- '500: General Error: General Error'
- '504: Timeout: Timeout from the issue'
- '2021600: Request In Progress'
- '2001600: Successful'
- '4041611: Invalid Card/Account/Customer Info/Virtual Account'
- '2023700: Request In Progress'
- '2003700: Successful'
- '4043711: Invalid Card/Account/Customer Info/Virtual Account'
- '2021800: Request In Progress'
- '2000000: Request has been processed successfully'
- '2003900: Successful'
- '06: The transaction is failed'
- 'Response code: 2001100 indicates success.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'Invalid BankCode/AccountNumber: Ensure correct bank code and account number.'
- '403: Hitting the API with different X-Idempotency-Key but same idempotency_key
  will result in 403.'
auth_info:
  mentioned_objects:
  - Client Key
  - Client Secret Key
  - Merchant ID
  - Public Key
  - Private Key
client:
  base_url: https://api.durianpay.id
  headers:
    accept: application/json
    content-type: application/json
source_metadata: null
