resources:
- name: supported_documents
  endpoint:
    path: /supported-documents
    method: GET
    data_selector: object
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: object
- name: retrieve_session
  endpoint:
    path: /sessions/{sessionId}
    method: GET
    data_selector: object
- name: delete_session
  endpoint:
    path: /sessions/{sessionId}
    method: DELETE
    data_selector: object
- name: media_content
  endpoint:
    path: /sessions/{sessionId}/media/{mediaId}/content
    method: GET
    data_selector: object
- name: delete_media_content
  endpoint:
    path: /sessions/{sessionId}/media/{mediaId}/content
    method: DELETE
    data_selector: object
- name: supported_documents
  endpoint:
    path: /supported-documents
    method: GET
    data_selector: object
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: object
- name: session
  endpoint:
    path: /sessions/{sessionId}
    method: GET
    data_selector: object
- name: delete_session
  endpoint:
    path: /sessions/{sessionId}
    method: DELETE
    data_selector: object
- name: media_content
  endpoint:
    path: /sessions/{sessionId}/media/{mediaId}/content
    method: GET
    data_selector: object
- name: delete_media_content
  endpoint:
    path: /sessions/{sessionId}/media/{mediaId}/content
    method: DELETE
    data_selector: object
- name: retrieve_session
  endpoint:
    path: /sessions/{sessionId}
    method: GET
    data_selector: object
    params: {}
- name: delete_session
  endpoint:
    path: /sessions/{sessionId}
    method: DELETE
    data_selector: null
    params: {}
- name: retrieve_media_content
  endpoint:
    path: /sessions/{sessionId}/media/{mediaId}/content
    method: GET
    data_selector: null
    params: {}
- name: delete_media_content
  endpoint:
    path: /sessions/{sessionId}/media/{mediaId}/content
    method: DELETE
    data_selector: null
    params: {}
- name: response_config
  endpoint:
    path: /apps/{sdkId}/response-config
    method: GET
    params:
      sdkId: string
      timestamp: string
      nonce: string
- name: sessions
  endpoint:
    path: /sessions/{sessionId}
    method: GET
    params:
      sdkId: string
      timestamp: string
      nonce: string
- name: delete_session
  endpoint:
    path: /sessions/{sessionId}
    method: DELETE
    params:
      sdkId: string
      timestamp: string
      nonce: string
- name: media_content
  endpoint:
    path: /sessions/{sessionId}/media/{mediaId}/content
    method: GET
    params:
      sdkId: string
      timestamp: string
      nonce: string
- name: delete_media_content
  endpoint:
    path: /sessions/{sessionId}/media/{mediaId}/content
    method: DELETE
    params:
      sdkId: string
      timestamp: string
      nonce: string
- name: response_config
  endpoint:
    path: /apps/{sdkId}/response-config
    method: GET
- name: response_config
  endpoint:
    path: /apps/{sdkId}/response-config
    method: GET
    params:
      sdkId: string
      timestamp: string
      nonce: string
- name: response_config
  endpoint:
    path: /apps/{sdkId}/response-config
    method: PUT
    params:
      sdkId: '{sdkId}'
      timestamp: '{timestamp}'
      nonce: '{nonce}'
- name: response-config
  endpoint:
    path: /apps/{sdkId}/response-config
    method: PUT
    data_selector: task_results
- name: response_config
  endpoint:
    path: /sessions/{sessionId}/response-config
    method: GET
    params:
      sdkId: string
      timestamp: string
      nonce: string
- name: response_config
  endpoint:
    path: /sessions/{sessionId}/response-config
    method: GET
    params:
      sdkId: string
      timestamp: string
      nonce: string
- name: response_config
  endpoint:
    path: /sessions/{sessionId}/response-config
    method: PUT
    data_selector: null
    params: {}
- name: response-config
  endpoint:
    path: /sessions/{sessionId}/response-config
    method: PUT
- name: accounts
  endpoint:
    path: /accounts
    method: POST
- name: moderations
  endpoint:
    path: /moderations
    method: POST
- name: session_results
  endpoint:
    path: /identity-verification-liveness/retrieve-session-results
    method: GET
    data_selector: session
- name: session
  endpoint:
    path: /identity-verification-liveness/session
    method: POST
    data_selector: session
- name: session_results
  endpoint:
    path: /identity-verification-liveness/session/results
    method: GET
    data_selector: results
- name: webhook_notifications
  endpoint:
    path: webhook-url
    method: POST
- name: supported_documents
  endpoint:
    path: /idverify/v1/supported-documents
    method: GET
- name: supported_documents
  endpoint:
    path: /supported-documents
    method: GET
    data_selector: documents
- name: id_documents
  endpoint:
    path: /id_documents
    method: GET
    data_selector: resources.id_documents
- name: supplementary_documents
  endpoint:
    path: /supplementary_documents
    method: GET
    data_selector: resources.supplementary_documents
- name: antispoofing
  endpoint:
    path: /ai/v1/antispoofing
    method: POST
    data_selector: prediction
- name: age-antispoofing
  endpoint:
    path: /ai/v1/age-antispoofing
    method: POST
    data_selector: age
    params: {}
- name: age
  endpoint:
    path: /ai/v1/age
    method: POST
    data_selector: age
    params: {}
- name: self-checkout-age-antispoofing
  endpoint:
    path: /ai/v1/self-checkout/age-antispoofing
    method: POST
    data_selector: prediction
- name: id_documents
  endpoint:
    path: /id_documents
    method: GET
    data_selector: id_documents
    params: {}
- name: supplementary_documents
  endpoint:
    path: /supplementary_documents
    method: GET
    data_selector: supplementary_documents
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: POST
    data_selector: object
    params: {}
- name: account_id
  endpoint:
    path: /accounts/{accountId}
    method: GET
    data_selector: object
    params: {}
- name: invitations
  endpoint:
    path: /accounts/{accountId}/invitations
    method: GET
    data_selector: invitations
    params: {}
- name: invite_user
  endpoint:
    path: /accounts/{accountId}/invitations
    method: POST
    data_selector: object
    params: {}
- name: perform_a_liveness_check
  endpoint:
    path: /ai/v1/antispoofing
    method: POST
    data_selector: prediction
- name: perform_a_liveness_and_age_estimation_check_on_an_image
  endpoint:
    path: /ai/v1/age-antispoofing
    method: POST
    data_selector: age
- name: perform_an_age_estimation_check_on_an_image
  endpoint:
    path: /ai/v1/age
    method: POST
    data_selector: age
- name: perform_a_liveness_and_age_estimation_check_on_an_image_self_checkout
  endpoint:
    path: /ai/v1/self-checkout/age-antispoofing
    method: POST
    data_selector: antispoofing
- name: account
  endpoint:
    path: /accounts
    method: POST
    data_selector: object
- name: invitation
  endpoint:
    path: /accounts/{accountId}/invitations
    method: POST
    data_selector: object
- name: revoke_pending_invitation
  endpoint:
    path: /accounts/{accountId}/invitations/{invitationId}
    method: DELETE
    data_selector: No response body
    params: {}
- name: list_account_members
  endpoint:
    path: /accounts/{accountId}/members
    method: GET
    data_selector: members
    params: {}
- name: fetch_account_member
  endpoint:
    path: /accounts/{accountId}/members/{memberId}
    method: GET
    data_selector: No response body
    params: {}
- name: update_member_scopes
  endpoint:
    path: /accounts/{accountId}/members/{memberId}
    method: PUT
    data_selector: No response body
    params: {}
- name: remove_account_member
  endpoint:
    path: /accounts/{accountId}/members/{memberId}
    method: DELETE
    data_selector: No response body
    params: {}
- name: list_available_scopes
  endpoint:
    path: /accounts/{accountId}/scopes
    method: GET
    data_selector: No response body
    params: {}
- name: upgrade_account_member_to_admin
  endpoint:
    path: /accounts/{accountId}/admin
    method: POST
    data_selector: No response body
    params: {}
- name: downgrade_account_member
  endpoint:
    path: /accounts/{accountId}/admin/{memberId}
    method: DELETE
    data_selector: No response body
    params: {}
- name: revoke_pending_invitation
  endpoint:
    path: /accounts/{accountId}/invitations/{invitationId}
    method: DELETE
    data_selector: ''
    params: {}
- name: list_account_members
  endpoint:
    path: /accounts/{accountId}/members
    method: GET
    data_selector: members
    params: {}
- name: fetch_account_member
  endpoint:
    path: /accounts/{accountId}/members/{memberId}
    method: GET
    data_selector: ''
    params: {}
- name: update_member_scopes
  endpoint:
    path: /accounts/{accountId}/members/{memberId}
    method: PUT
    data_selector: ''
    params: {}
- name: remove_account_member
  endpoint:
    path: /accounts/{accountId}/members/{memberId}
    method: DELETE
    data_selector: ''
    params: {}
- name: list_available_scopes
  endpoint:
    path: /accounts/{accountId}/scopes
    method: GET
    data_selector: ''
    params: {}
- name: upgrade_member_to_admin
  endpoint:
    path: /accounts/{accountId}/admin
    method: POST
    data_selector: ''
    params: {}
- name: downgrade_member
  endpoint:
    path: /accounts/{accountId}/admin/{memberId}
    method: DELETE
    data_selector: ''
    params: {}
- name: archive_contents
  endpoint:
    path: /accounts/{accountId}/archive/contents
    method: POST
- name: remove_archive_contents
  endpoint:
    path: /accounts/{accountId}/archive/contents/{id}
    method: DELETE
- name: list_records
  endpoint:
    path: /accounts/{accountId}/contents
    method: GET
- name: create_content_record
  endpoint:
    path: /accounts/{accountId}/contents
    method: POST
- name: fetch_content
  endpoint:
    path: /accounts/{accountId}/contents/{id}
    method: GET
- name: add_profile_to_content
  endpoint:
    path: /accounts/{accountId}/contents/{id}/profiles
    method: POST
- name: remove_profile_from_content
  endpoint:
    path: /accounts/{accountId}/contents/{id}/profiles/{profileId}
    method: DELETE
- name: archive_contents
  endpoint:
    path: /accounts/{accountId}/archive/contents
    method: POST
- name: remove_archive_contents
  endpoint:
    path: /accounts/{accountId}/archive/contents/{id}
    method: DELETE
- name: list_records
  endpoint:
    path: /accounts/{accountId}/contents
    method: GET
- name: create_record_of_content
  endpoint:
    path: /accounts/{accountId}/contents
    method: POST
- name: fetch_content
  endpoint:
    path: /accounts/{accountId}/contents/{id}
    method: GET
- name: add_profile_to_content
  endpoint:
    path: /accounts/{accountId}/contents/{id}/profiles
    method: POST
- name: remove_profile_from_content
  endpoint:
    path: /accounts/{accountId}/contents/{id}/profiles/{profileId}
    method: DELETE
- name: moderations
  endpoint:
    path: /accounts/{accountId}/moderations
    method: GET
    data_selector: contents
    params:
      page: 1
      type: VIDEO
- name: reports
  endpoint:
    path: /accounts/{accountId}/contents/{id}/reports
    method: GET
    data_selector: reports
    params:
      page: 1
- name: moderations
  endpoint:
    path: /accounts/{accountId}/moderations
    method: GET
    data_selector: contents
    params:
      page: 1
      type: VIDEO
- name: reports
  endpoint:
    path: /accounts/{accountId}/contents/{id}/reports
    method: GET
    data_selector: reports
    params:
      page: 1
- name: moderation_details
  endpoint:
    path: /accounts/{accountId}/moderations/{moderationId}/details
    method: GET
- name: moderation_results
  endpoint:
    path: /accounts/{accountId}/moderations/{moderationId}/results
    method: GET
- name: moderation_report
  endpoint:
    path: /accounts/{accountId}/moderations/{moderationId}/report
    method: GET
- name: moderation_notifications
  endpoint:
    path: /accounts/{accountId}/moderations/{moderationId}/notifications
    method: GET
- name: stop_moderation
  endpoint:
    path: /accounts/{accountId}/moderations/{moderationId}/stop
    method: POST
- name: moderation_details
  endpoint:
    path: /accounts/{accountId}/moderations/{moderationId}/details
    method: GET
- name: moderation_results
  endpoint:
    path: /accounts/{accountId}/moderations/{moderationId}/results
    method: GET
- name: moderation_report
  endpoint:
    path: /accounts/{accountId}/moderations/{moderationId}/report
    method: GET
- name: moderation_notifications
  endpoint:
    path: /accounts/{accountId}/moderations/{moderationId}/notifications
    method: GET
- name: stop_moderation
  endpoint:
    path: /accounts/{accountId}/moderations/{moderationId}/stop
    method: POST
- name: notifications
  endpoint:
    path: /accounts/{accountId}/notifications
    method: GET
    data_selector: notifications
    params:
      page: 1
- name: profiles
  endpoint:
    path: /accounts/{accountId}/profiles
    method: GET
    data_selector: profiles
    params:
      page: 1
- name: notifications
  endpoint:
    path: /accounts/{accountId}/notifications
    method: GET
    data_selector: notifications
    params:
      page: 1
- name: specific_notification
  endpoint:
    path: /accounts/{accountId}/notifications/{id}
    method: GET
    data_selector: ''
    params: {}
- name: record_notification_incorrect
  endpoint:
    path: /accounts/{accountId}/notifications/{id}/dismiss
    method: POST
    data_selector: ''
    params: {}
- name: reviews_for_notification
  endpoint:
    path: /accounts/{accountId}/notifications/{id}/reviews
    method: GET
    data_selector: reviews
    params:
      page: 1
- name: profiles
  endpoint:
    path: /accounts/{accountId}/profiles
    method: GET
    data_selector: profiles
    params:
      page: 1
- name: create_profile
  endpoint:
    path: /accounts/{accountId}/profiles
    method: POST
    data_selector: schema
    params: {}
- name: fetch_profile_details
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}
    method: GET
    data_selector: schema
    params: {}
- name: delete_profile
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}
    method: DELETE
    data_selector: schema
    params: {}
- name: set_biometric_consent
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/biometric-consent
    method: POST
    data_selector: schema
    params: {}
- name: remove_biometric_consent
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/biometric-consent
    method: DELETE
    data_selector: schema
    params: {}
- name: extend_profile_lifecycle
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/retain
    method: POST
    data_selector: schema
    params: {}
- name: get_faces_in_profile
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/faces
    method: GET
    data_selector: schema
    params: {}
- name: add_face_to_profile
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/faces
    method: POST
    data_selector: schema
    params: {}
- name: delete_face_from_profile
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/faces/{id}
    method: DELETE
    data_selector: schema
    params: {}
- name: create_profile
  endpoint:
    path: /accounts/{accountId}/profiles
    method: POST
- name: fetch_profile_details
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}
    method: GET
- name: delete_profile
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}
    method: DELETE
- name: set_biometric_consent
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/biometric-consent
    method: POST
- name: remove_biometric_consent
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/biometric-consent
    method: DELETE
- name: get_faces_in_profile
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/faces
    method: GET
- name: add_face_to_profile
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/faces
    method: POST
- name: delete_face_from_profile
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/faces/{id}
    method: DELETE
- name: add_face_to_profile
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/faces
    method: POST
    data_selector: object
    params: {}
- name: delete_face_from_profile
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/faces/{id}
    method: DELETE
    data_selector: object
    params: {}
- name: get_groups
  endpoint:
    path: /accounts/{accountId}/groups
    method: GET
    data_selector: groups
    params: {}
- name: create_group
  endpoint:
    path: /accounts/{accountId}/groups
    method: POST
    data_selector: object
    params: {}
- name: get_group
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}
    method: GET
    data_selector: object
    params: {}
- name: add_profile_to_group
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}
    method: POST
    data_selector: object
    params: {}
- name: delete_group
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}
    method: DELETE
    data_selector: object
    params: {}
- name: add_face_to_profile
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/faces
    method: POST
- name: delete_face_from_profile
  endpoint:
    path: /accounts/{accountId}/profiles/{profileId}/faces/{id}
    method: DELETE
- name: get_groups
  endpoint:
    path: /accounts/{accountId}/groups
    method: GET
- name: create_group
  endpoint:
    path: /accounts/{accountId}/groups
    method: POST
- name: get_group
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}
    method: GET
- name: add_profile_to_group
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}
    method: POST
- name: delete_group
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}
    method: DELETE
- name: check_face_exists
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}/challenge
    method: POST
- name: get_historical_face_checks
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}/challenges
    method: GET
- name: retrieve_all_profiles
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}/profiles
    method: GET
- name: remove_profile_from_group
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}/profiles/{profileId}
    method: DELETE
- name: get_policies
  endpoint:
    path: /accounts/{accountId}/policies
    method: GET
- name: create_policy
  endpoint:
    path: /accounts/{accountId}/policies
    method: POST
- name: check_face_in_group
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}/challenge
    method: POST
- name: get_historical_face_checks
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}/challenges
    method: GET
- name: retrieve_all_profiles_in_group
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}/profiles
    method: GET
- name: remove_profile_from_group
  endpoint:
    path: /accounts/{accountId}/groups/{groupId}/profiles/{profileId}
    method: DELETE
- name: get_list_of_policies
  endpoint:
    path: /accounts/{accountId}/policies
    method: GET
- name: create_policy_for_account
  endpoint:
    path: /accounts/{accountId}/policies
    method: POST
- name: Get policy details
  endpoint:
    path: /accounts/{accountId}/policies/{policyId}
    method: GET
    data_selector: policy
    params: {}
- name: Delete a policy
  endpoint:
    path: /accounts/{accountId}/policies/{policyId}
    method: DELETE
    data_selector: null
    params: {}
- name: Tag a policy
  endpoint:
    path: /accounts/{accountId}/policies/{policyId}/version
    method: POST
    data_selector: null
    params: {}
- name: Get policy details for a specific version
  endpoint:
    path: /accounts/{accountId}/policies/{policyId}/version/{version}
    method: GET
    data_selector: policy
    params: {}
- name: Open a websocket connection
  endpoint:
    path: /accounts/{accountId}/sockets/connect
    method: GET
    data_selector: null
    params: {}
- name: Authenticate a websocket connection
  endpoint:
    path: /accounts/{accountId}/sockets/listen
    method: GET
    data_selector: null
    params: {}
- name: get_policy_details
  endpoint:
    path: /accounts/{accountId}/policies/{policyId}
    method: GET
- name: delete_policy
  endpoint:
    path: /accounts/{accountId}/policies/{policyId}
    method: DELETE
- name: tag_policy
  endpoint:
    path: /accounts/{accountId}/policies/{policyId}/version
    method: POST
- name: get_policy_details_version
  endpoint:
    path: /accounts/{accountId}/policies/{policyId}/version/{version}
    method: GET
- name: open_websocket_connection
  endpoint:
    path: /accounts/{accountId}/sockets/connect
    method: GET
- name: authenticate_websocket_connection
  endpoint:
    path: /accounts/{accountId}/sockets/listen
    method: GET
- name: mute_socket
  endpoint:
    path: /accounts/{accountId}/sockets/mute
    method: GET
- name: unmute_socket
  endpoint:
    path: /accounts/{accountId}/sockets/unmute
    method: GET
- name: retrieve_flags
  endpoint:
    path: /accounts/{accountId}/flags
    method: GET
- name: create_flag
  endpoint:
    path: /accounts/{accountId}/flags
    method: POST
- name: delete_flag
  endpoint:
    path: /accounts/{accountId}/flags/{reasonId}
    method: DELETE
- name: list_reports
  endpoint:
    path: /accounts/{accountId}/reports
    method: GET
- name: audit_reports
  endpoint:
    path: /accounts/{accountId}/reports/{date}/{dayRange}
    method: GET
- name: dismiss_report
  endpoint:
    path: /accounts/{accountId}/reports/{id}/dismiss
    method: POST
- name: accept_report
  endpoint:
    path: /accounts/{accountId}/reports/{id}/accept
    method: POST
- name: mute_socket
  endpoint:
    path: /accounts/{accountId}/sockets/mute
    method: GET
- name: unmute_socket
  endpoint:
    path: /accounts/{accountId}/sockets/unmute
    method: GET
- name: retrieve_flags
  endpoint:
    path: /accounts/{accountId}/flags
    method: GET
    params:
      type: string
- name: create_flag
  endpoint:
    path: /accounts/{accountId}/flags
    method: POST
- name: deactivate_flag
  endpoint:
    path: /accounts/{accountId}/flags/{reasonId}
    method: DELETE
- name: list_reports
  endpoint:
    path: /accounts/{accountId}/reports
    method: GET
    params:
      page: integer
- name: audit_reports
  endpoint:
    path: /accounts/{accountId}/reports/{date}/{dayRange}
    method: GET
- name: dismiss_report
  endpoint:
    path: /accounts/{accountId}/reports/{id}/dismiss
    method: POST
- name: accept_report
  endpoint:
    path: /accounts/{accountId}/reports/{id}/accept
    method: POST
- name: verify_proof_of_age
  endpoint:
    path: /poa/v1/verify
    method: POST
    data_selector: result
- name: verify_proof_of_age_result
  endpoint:
    path: /poa/v1/verify/{id}
    method: GET
    data_selector: result
- name: verify_proof_of_age_result_notification
  endpoint:
    path: /poa-verify-result
    method: POST
    data_selector: result
- name: verify_proof_of_age
  endpoint:
    path: /poa/v1/verify
    method: POST
    data_selector: Proof of Age Query
    params: {}
- name: verify_proof_of_age_result
  endpoint:
    path: /poa/v1/verify/{id}
    method: GET
    data_selector: Proof of Age Result
    params: {}
- name: verify_proof_of_age_result_notification
  endpoint:
    path: /poa-verify-result
    method: POST
    data_selector: Proof of Age (Sync) Result
    params: {}
- name: create_session
  endpoint:
    path: /sessions
    method: POST
    data_selector: id
    params: {}
- name: create_session
  endpoint:
    path: /sessions
    method: POST
- name: face_capture
  endpoint:
    path: /age-verification-headless/launch-the-client-side-view
    method: POST
    data_selector: img, secure
    params: {}
- name: age_estimation
  endpoint:
    path: /sessions/<sessionId>/age-estimation
    method: POST
    data_selector: status
    params: {}
- name: session_results
  endpoint:
    path: /api/v1/sessions/<session-id>/result
    method: GET
    data_selector: ''
    params: {}
- name: create_session
  endpoint:
    path: /age-verification-headless/create-session-idv
    method: POST
    data_selector: ''
    params:
      doc_scan: true
- name: age_estimation
  endpoint:
    path: /sessions/<sessionId>/age-estimation
    method: POST
    data_selector: status
    params: {}
- name: create_session
  endpoint:
    path: /sessions
    method: POST
    data_selector: id
    params: {}
- name: session_result
  endpoint:
    path: /sessions/<session-id>/result
    method: GET
    data_selector: records
- name: session
  endpoint:
    path: /api/v1/sessions/<session-id>/doc-scan
    method: GET
    data_selector: token, session_id
    params: {}
- name: create_session
  endpoint:
    path: /age-verification-headless/create-session-idv
    method: POST
- name: session_result
  endpoint:
    path: /api/v1/sessions/<session-id>/result
    method: GET
    data_selector: result
    params: {}
- name: create_session
  endpoint:
    path: /sessions
    method: POST
    data_selector: id
- name: notifications
  endpoint:
    path: /age-verification-headless/notifications
    method: POST
    data_selector: payload
    params: {}
- name: session
  endpoint:
    path: /sessions/<session-id>/doc-scan
    method: GET
    data_selector: token, session_id
    params: {}
- name: send_mobile_otp
  endpoint:
    path: /mobile/otp
    method: POST
    data_selector: success
    params: {}
- name: mobile_check
  endpoint:
    path: /mobile/check
    method: POST
    data_selector: result
    params: {}
- name: session_result
  endpoint:
    path: /sessions/<session-id>/result
    method: GET
- name: database_check
  endpoint:
    path: /address/background
    method: POST
    data_selector: ''
    params: {}
- name: notifications
  endpoint:
    path: /age-verification-headless/notifications
    method: POST
    data_selector: payload
- name: request_session
  endpoint:
    path: /api/v1/electronic-id/start-session
    method: POST
    data_selector: url
    params: {}
- name: retrieve_results
  endpoint:
    path: /api/v1/electronic-id/status/{conversationId}
    method: GET
    data_selector: status
    params: {}
- name: send_mobile_otp
  endpoint:
    path: /mobile/otp
    method: POST
    data_selector: success
- name: mobile_check
  endpoint:
    path: /mobile/check
    method: POST
    data_selector: method
- name: email_address_check
  endpoint:
    path: /api/v2/non-interactive
    method: POST
    data_selector: result
    params: {}
- name: database_check
  endpoint:
    path: /address/background
    method: POST
- name: social_security_number_check
  endpoint:
    path: /social-security-number/check
    method: POST
    data_selector: transaction_id
    params: {}
- name: request_session
  endpoint:
    path: /electronic-id/start-session
    method: POST
    data_selector: url
    params:
      method: CZECH_BANK_ID
      return_url: https://<YourDomain>/return
      enhanced_checks: true
- name: retrieve_results
  endpoint:
    path: /electronic-id/status/{conversationId}
    method: GET
    data_selector: status
- name: session
  endpoint:
    path: /createSession
    method: POST
- name: supported_documents
  endpoint:
    path: /idverify/v1/supported-documents
    method: GET
    data_selector: null
    params:
      includeNonLatin: 'true'
- name: email_address_check
  endpoint:
    path: /api/v2/non-interactive
    method: POST
    data_selector: result
    params: {}
- name: social_security_number_check
  endpoint:
    path: /social-security-number/check
    method: POST
    data_selector: response
    params: {}
- name: liveness
  endpoint:
    path: /identity-verification/liveness
    method: GET
- name: liveness_report
  endpoint:
    path: /identity-verification/liveness-report
    method: GET
    data_selector: ''
    params: {}
- name: session
  endpoint:
    path: /createSession
    method: POST
- name: supported_documents
  endpoint:
    path: /supported-documents
    method: GET
    data_selector: documents
- name: document_report
  endpoint:
    path: /identity-verification/document-report
    method: GET
- name: text_extraction
  endpoint:
    path: /identity-verification/data-extraction
    method: POST
    data_selector: data
    params: {}
- name: liveness
  endpoint:
    path: /identity-verification/liveness
    method: POST
- name: liveness_report
  endpoint:
    path: /identity-verification/liveness-report
    method: GET
    data_selector: results
- name: liveness
  endpoint:
    path: /identity-verification/liveness
    method: GET
    data_selector: resources
    params: {}
- name: face match
  endpoint:
    path: /identity-verification/face-match
    method: GET
    data_selector: resources
    params: {}
- name: face_match_report
  endpoint:
    path: /identity-verification/face-match-report
    method: GET
    data_selector: recommendation
- name: text_extraction
  endpoint:
    path: /identity-verification/data-extraction
    method: POST
    data_selector: data
- name: address_report
  endpoint:
    path: /identity-verification/address-report
    method: GET
    data_selector: report
    params: {}
- name: document_report
  endpoint:
    path: /identity-verification/document-report
    method: GET
    data_selector: report
    params: {}
- name: data_extraction_report
  endpoint:
    path: /identity-verification/data-extraction-report
    method: GET
    data_selector: report
    params: {}
- name: face_match_report
  endpoint:
    path: /identity-verification/face-match-report
    method: GET
    data_selector: report
    params: {}
- name: aml_report
  endpoint:
    path: /identity-verification/aml-report
    method: GET
    data_selector: report
    params: {}
- name: data_extraction_check
  endpoint:
    path: /identity-verification/data-extraction-report
    method: GET
    data_selector: recommendation
- name: AML Check
  endpoint:
    path: /identity-verification/aml
    method: GET
    data_selector: results
- name: liveness
  endpoint:
    path: /identity-verification/liveness
    method: GET
- name: face_match
  endpoint:
    path: /identity-verification/face-match
    method: GET
- name: address_check
  endpoint:
    path: /identity-verification/address
    method: POST
    data_selector: address_check_results
- name: AML Check
  endpoint:
    path: /identity-verification/aml
    method: POST
    data_selector: results
- name: address
  endpoint:
    path: /identity-verification/address
    method: GET
- name: AML
  endpoint:
    path: /identity-verification/aml
    method: GET
    data_selector: records
- name: generate_pdf
  endpoint:
    path: /identity-verification/portal-generatepdf
    method: GET
- name: AML
  endpoint:
    path: /identity-verification/aml
    method: GET
    data_selector: records
- name: sdkConfig
  endpoint:
    path: /identity-verification/sdkConfig
    method: POST
    data_selector: sdkConfig
    params: {}
- name: liveness_check
  endpoint:
    path: /identity-verification/sdk-liveness
    method: POST
    data_selector: report
    params: {}
- name: session_results
  endpoint:
    path: /identity-verification/session-results
    method: GET
    data_selector: sessionDetails
- name: document_authenticity
  endpoint:
    path: /identity-verification/document-checking#document-authenticity
    method: POST
- name: text_extraction
  endpoint:
    path: /identity-verification/document-checking#text-extraction
    method: POST
- name: document_comparison
  endpoint:
    path: /identity-verification/document-checking#document-comparison-check
    method: POST
- name: Generate PDF
  endpoint:
    path: /identity-verification/portal-generatepdf
    method: POST
- name: address
  endpoint:
    path: /identity-verification/address
    method: POST
    data_selector: data
    params:
      thirdpartyidentitycheck: 'true'
- name: Document Resource
  endpoint:
    path: /identity-verification/document-checking
    method: GET
    data_selector: ''
    params: {}
- name: client_preferences
  endpoint:
    path: /identity-verification/client-preferences
    method: GET
    data_selector: preferences
    params: {}
- name: issuing_authority_check
  endpoint:
    path: /identity-verification/issuing-authority
    method: POST
    data_selector: requested_checks
    params:
      requested: true
- name: checks
  endpoint:
    path: /identity-verification/checks
    method: GET
    data_selector: checks
- name: add_applicant_to_session
  endpoint:
    path: /sessions/{sessionID}/resources/face-capture/{resourceID}/applicant
    method: PUT
    data_selector: null
    params: {}
- name: document_authenticity
  endpoint:
    path: /identity-verification/document-authenticity
    method: POST
    data_selector: result
- name: text_extraction
  endpoint:
    path: /identity-verification/text-extraction
    method: POST
    data_selector: result
- name: supporting_documents
  endpoint:
    path: /identity-verification/supporting-documents
    method: POST
    data_selector: result
- name: document_comparison
  endpoint:
    path: /identity-verification/document-comparison
    method: POST
    data_selector: result
- name: create_applicant
  endpoint:
    path: /applicants
    method: POST
    data_selector: id
- name: add_face
  endpoint:
    path: /applicants/{applicantId}/faces
    method: POST
    data_selector: id
- name: address_check
  endpoint:
    path: /identity-verification/address
    method: POST
    data_selector: data
    params:
      thirdpartyidentitycheck: 'true'
- name: applicant_pool
  endpoint:
    path: /pools
    method: POST
    data_selector: null
    params: {}
- name: add_applicant_to_pool
  endpoint:
    path: /pools/{poolId}/applicants
    method: POST
    data_selector: null
    params: {}
- name: Document Resource
  endpoint:
    path: /identity-verification/document-checking
    method: GET
    data_selector: textExtraction
    params: {}
- name: face_check
  endpoint:
    path: /sessions
    method: POST
    data_selector: client_session_token
    params: {}
- name: notifications
  endpoint:
    path: /identity-verification/notifications
    method: POST
- name: results
  endpoint:
    path: /identity-verification/results
    method: GET
    data_selector: session
- name: issuing_authority_check
  endpoint:
    path: /identity-verification/issuing-authority
    method: POST
    data_selector: requested_checks
    params: {}
- name: document_resources
  endpoint:
    path: /identity-verification/retrieve-userdata#document-resources
    method: GET
- name: liveness_resources
  endpoint:
    path: /identity-verification/retrieve-userdata#liveness-resources
    method: GET
- name: retrieve_user_information
  endpoint:
    path: /identity-verification/retrieve-userdata#retrieve-user-information
    method: GET
- name: retrieve_supplementary_documents
  endpoint:
    path: /identity-verification/retrieve-userdata#retrieve-supplementary-documents
    method: GET
- name: checks
  endpoint:
    path: /identity-verification/issuing-authority/checks
    method: GET
    data_selector: checks
    params: {}
- name: address
  endpoint:
    path: /identity-verification/retrieve-userdata#address-formats
    method: GET
    data_selector: address_format
- name: retrieve_images
  endpoint:
    path: /identity-verification/retrieve-image
    method: GET
- name: retrieve_document_id_photo
  endpoint:
    path: /identity-verification/retrieve-image#retrieve-document-id-photo
    method: GET
- name: Add Applicant to session
  endpoint:
    path: /sessions/{sessionID}/resources/face-capture/{resourceID}/applicant
    method: PUT
    data_selector: none
    params: {}
- name: applicant
  endpoint:
    path: /applicants
    method: POST
    data_selector: id
    params: {}
- name: add_face
  endpoint:
    path: /applicants/{applicantId}/faces
    method: POST
    data_selector: id
    params: {}
- name: tracked_devices
  endpoint:
    path: /identity-verification/tracked-devices
    method: GET
    data_selector: device_events
- name: applicant_pool
  endpoint:
    path: /pools
    method: POST
    data_selector: null
    params: {}
- name: add_applicant_to_pool
  endpoint:
    path: /pools/{poolId}/applicants
    method: POST
    data_selector: null
    params: {}
- name: face_check
  endpoint:
    path: /sessions
    method: POST
    data_selector: ''
    params: {}
- name: face_check_results
  endpoint:
    path: /sessions/<session_id>
    method: GET
    data_selector: resources
- name: retrieve_face
  endpoint:
    path: /applicant/<applicant_id>
    method: GET
    data_selector: faces
- name: delete_applicant
  endpoint:
    path: /applicants/<applicant_id>
    method: DELETE
    params:
      sdkId: <YOTI_CLIENT_SDK_ID>
- name: delete_face
  endpoint:
    path: /applicants/<applicant_id>/faces/<face_id>
    method: DELETE
- name: delete_applicant_pool
  endpoint:
    path: /pools/<pool_id>
    method: DELETE
- name: delete_applicant_from_pool
  endpoint:
    path: /pools/<pool_id>/applicants/<applicant_id>
    method: DELETE
- name: user_data
  endpoint:
    path: /identity-verification/retrieve-userdata
    method: GET
- name: share_session
  endpoint:
    path: /create-share-session
    method: POST
- name: retrieve_profile
  endpoint:
    path: /retrieve-profile
    method: GET
- name: address
  endpoint:
    path: /identity-verification/retrieve-userdata#address-formats
    method: GET
    data_selector: address_formats
- name: retrieve_images
  endpoint:
    path: /identity-verification/retrieve-image
    method: GET
- name: retrieve_document_id_photo
  endpoint:
    path: /identity-verification/retrieve-image#retrieve-document-id-photo
    method: GET
- name: session_result
  endpoint:
    path: /identity-verification/session-results
    method: GET
    data_selector: results
- name: user_information
  endpoint:
    path: /identity-verification/user-information
    method: GET
    data_selector: userInfo
- name: id_document_resources
  endpoint:
    path: /identity-verification/id-document-resources
    method: GET
    data_selector: idDocResources
- name: liveness_resources
  endpoint:
    path: /identity-verification/liveness-resources
    method: GET
    data_selector: livenessResources
- name: delete_session
  endpoint:
    path: /identity-verification/delete-a-session
    method: DELETE
- name: delete_media
  endpoint:
    path: /identity-verification/delete-media
    method: DELETE
- name: create_qr_code_application
  endpoint:
    path: /digital-id/create-a-qr-code-application
    method: GET
    data_selector: data
    params: {}
- name: tracked_devices
  endpoint:
    path: /identity-verification/tracked-devices
    method: GET
    data_selector: devices
- name: download_receipts
  endpoint:
    path: /digital-id/receipts#download-receipts
    method: GET
- name: filter_receipts
  endpoint:
    path: /digital-id/receipts#filter-receipts
    method: GET
- name: delete_receipts
  endpoint:
    path: /digital-id/receipts#delete-receipts
    method: POST
- name: view_source_verifier
  endpoint:
    path: /digital-id/receipts#view-source--verifier
    method: GET
- name: render_qr_button
  endpoint:
    path: /digital-id/render-qr-button
    method: GET
    data_selector: data
    params: {}
- name: document_text_data_check
  endpoint:
    path: /data-extraction-check/id-document
    method: POST
    data_selector: text_data_readable
    params: {}
- name: supplementary_document_text_data_check
  endpoint:
    path: /data-extraction-check/supplementary-document
    method: POST
    data_selector: text_data_readable
    params: {}
- name: liveness_check
  endpoint:
    path: /liveness
    method: POST
    data_selector: liveness_auth
    params: {}
- name: face_match_check
  endpoint:
    path: /face-match
    method: POST
    data_selector: ai_face_match
    params: {}
- name: render_qr
  endpoint:
    path: /api/v1/qrcodes/image
    method: POST
    data_selector: ''
    params: {}
- name: Digital ID Connect
  endpoint:
    path: /digital-id-connect
    method: GET
    data_selector: data
- name: matches
  endpoint:
    path: /v1/matches
    method: POST
    data_selector: ''
    params: {}
- name: share_session
  endpoint:
    path: /createShareSession
    method: POST
- name: retrieve_profile
  endpoint:
    path: /getShareReceipt
    method: GET
- name: envelopes
  endpoint:
    path: /v2/envelopes
    method: POST
- name: add_signers
  endpoint:
    path: /eSignatures/add-signers
    method: POST
    data_selector: signers
    params: {}
- name: qr_code_application
  endpoint:
    path: /digital-id/create-a-qr-code-application
    method: GET
- name: receipts
  endpoint:
    path: /digital-id/receipts
    method: GET
    data_selector: receipts
    params: {}
- name: sign_offline
  endpoint:
    path: /eSignatures/sign-offline
    method: GET
- name: documents
  endpoint:
    path: /eSignatures/view-documents
    method: GET
    data_selector: documents
- name: envelope
  endpoint:
    path: /create-envelope
    method: POST
- name: documents
  endpoint:
    path: /get-documents
    method: GET
- name: create_share_session
  endpoint:
    path: /api/v1/qrcodes/image
    method: POST
    data_selector: id
    params: {}
- name: Digital ID Connect button
  endpoint:
    path: /digital-id/digital-id-connect-button
    method: GET
- name: envelope
  endpoint:
    path: /v2/envelopes
    method: POST
    data_selector: envelope_id
- name: embedded_envelopes
  endpoint:
    path: /v2/embedded-envelopes
    method: POST
- name: reminders
  endpoint:
    path: /eSignatures/reminders
    method: GET
    data_selector: reminders
    params: {}
- name: matches
  endpoint:
    path: /v1/matches
    method: POST
    data_selector: result
- name: envelope_otp
  endpoint:
    path: /eSignatures/envelope-otp
    method: POST
    data_selector: ''
    params: {}
- name: recipient
  endpoint:
    path: /eSignatures/recipient-object
    method: GET
    data_selector: recipients
- name: envelope
  endpoint:
    path: /v2/envelopes
    method: POST
- name: tags
  endpoint:
    path: /eSignatures/tags
    method: GET
- name: validation
  endpoint:
    path: /tags/validation
    method: GET
    data_selector: tags
    params: {}
- name: merge_fields
  endpoint:
    path: /tags/merge-fields
    method: GET
    data_selector: tags
    params: {}
- name: add_signers
  endpoint:
    path: /eSignatures/add-signers
    method: GET
- name: auto_tagging
  endpoint:
    path: /eSignatures/auto-tagging
    method: GET
- name: add_a_witness
  endpoint:
    path: /eSignatures/add-a-witness
    method: GET
- name: witness
  endpoint:
    path: /eSignatures/witness
    method: POST
    data_selector: witness
    params: {}
- name: edit_recipient
  endpoint:
    path: /v2/envelopes/{envelope_id}/recipients/{recipient_id}
    method: PATCH
    data_selector: null
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: POST
    data_selector: notifications
    params: {}
- name: view_documents
  endpoint:
    path: /eSignatures/view-documents
    method: GET
- name: create_custom_session_configuration
  endpoint:
    path: /v2/idv/sessions/configs
    method: POST
    data_selector: session_config
- name: draft_documents
  endpoint:
    path: /eSignatures/draft-documents
    method: GET
    data_selector: records
- name: idv_session_result
  endpoint:
    path: /v2/idv/recipients/:recipientID/sessions/signed/json
    method: GET
    data_selector: session_id
    params: {}
- name: create_envelope
  endpoint:
    path: /create-an-envelope-request
    method: POST
- name: get_documents
  endpoint:
    path: /get-documents
    method: GET
- name: Get IDV Session PDF
  endpoint:
    path: /v2/idv/recipients/:recipientID/sessions/signed/pdf
    method: GET
- name: reset_session_limit
  endpoint:
    path: /v2/idv/recipients/:recipientID/sessions/reset-limit
    method: GET
- name: envelopes
  endpoint:
    path: /v2/envelopes
    method: POST
    data_selector: envelope_id
- name: resend_completion_pack
  endpoint:
    path: /v2/envelopes/<envelopeId>/recipients/<recipient_id>/resend-completion-pack
    method: PATCH
    data_selector: body
    params: {}
- name: embedded_envelopes
  endpoint:
    path: /v2/embedded-envelopes
    method: POST
- name: reminders
  endpoint:
    path: /eSignatures/Reminders
    method: GET
    data_selector: reminders
    params: {}
- name: envelope_status
  endpoint:
    path: /v2/envelopes/<envelopeId>/status
    method: GET
    data_selector: status
- name: envelope_otp
  endpoint:
    path: /eSignatures/envelope-otp
    method: POST
    data_selector: has_envelope_otps
- name: recipient
  endpoint:
    path: /eSignatures/recipient-object
    method: GET
    data_selector: recipients
- name: envelope
  endpoint:
    path: /v2/envelopes/<envelopeId>
    method: GET
    data_selector: status
    params: {}
- name: recipient
  endpoint:
    path: /eSignatures/recipient-object
    method: GET
    data_selector: recipient
    params: {}
- name: completed_documents
  endpoint:
    path: /v2/envelopes/<envelopeId>/completed-documents
    method: GET
    data_selector: null
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: POST
- name: archive_envelope
  endpoint:
    path: /v2/envelopes/<envelopeId>
    method: PATCH
- name: validation
  endpoint:
    path: /tags/validation
    method: GET
    data_selector: tags
    params: {}
- name: merge_fields
  endpoint:
    path: /tags/merge-fields
    method: GET
    data_selector: tags
    params: {}
- name: delete_envelope
  endpoint:
    path: /v2/envelopes/{envelope_id}
    method: DELETE
- name: find_envelope
  endpoint:
    path: /v2/organisations/envelopes/find
    method: POST
- name: witness
  endpoint:
    path: /eSignatures/witness
    method: GET
    data_selector: witness
    params: {}
- name: send_reminder
  endpoint:
    path: /v2/envelopes/{envelope_id}/recipients/{recipient_id}/send-reminder
    method: POST
- name: extend_recipient_tokens
  endpoint:
    path: /v2/envelopes/:envelopeId/extend-tokens
    method: POST
    data_selector: recipient_tokens
- name: edit_recipient
  endpoint:
    path: /v2/envelopes/{envelope_id}/recipients/{recipient_id}
    method: PATCH
    data_selector: ''
- name: notifications
  endpoint:
    path: /notifications
    method: POST
    data_selector: notifications
- name: sign_offline
  endpoint:
    path: /v2/envelopes/:envelopeId/recipients/:recipientId/signed-documents
    method: POST
    data_selector: status
- name: create_custom_session_configuration
  endpoint:
    path: /v2/idv/sessions/configs
    method: POST
    data_selector: session_config
- name: age_verification
  endpoint:
    path: /age-verification
    method: POST
- name: idv_session_result
  endpoint:
    path: /v2/idv/recipients/:recipientID/sessions/signed/json
    method: GET
    data_selector: session_id
- name: Get IDV Session PDF
  endpoint:
    path: /v2/idv/recipients/:recipientID/sessions/signed/pdf
    method: GET
- name: create_session
  endpoint:
    path: /sessions
    method: POST
    data_selector: ''
    params: {}
- name: reset_session_limit
  endpoint:
    path: /v2/idv/recipients/:recipientID/sessions/reset-limit
    method: GET
- name: la_wallet
  endpoint:
    path: /age-verification/la-wallet
    method: POST
    data_selector: la_wallet
    params: {}
- name: resend_completion_pack
  endpoint:
    path: /v2/envelopes/<envelopeId>/recipients/<recipient_id>/resend-completion-pack
    method: PATCH
    data_selector: body
    params: {}
- name: email_address_check
  endpoint:
    path: /age-verification/email-address-check
    method: POST
    data_selector: data
    params:
      ttl: 9000
      type: OVER
      resume_enabled: true
- name: envelope_status
  endpoint:
    path: /v2/envelopes/<envelopeId>/status
    method: GET
    data_selector: status
    params: {}
- name: launch_user_view
  endpoint:
    path: /age-verification/launch-the-user-view
    method: GET
- name: envelope
  endpoint:
    path: /v2/envelopes/<envelopeId>
    method: GET
    data_selector: envelope_id
    params: {}
- name: session_result
  endpoint:
    path: /sessions/<sessionId>/result
    method: GET
    data_selector: result
    params: {}
- name: notifications
  endpoint:
    path: /age-verification/notifications
    method: POST
    data_selector: payload
- name: completed_documents
  endpoint:
    path: /v2/envelopes/<envelopeId>/completed-documents
    method: GET
    data_selector: null
    params: {}
- name: create_age_token_rule
  endpoint:
    path: /api/v1/rules
    method: POST
- name: archive_envelope
  endpoint:
    path: /v2/envelopes/<envelopeId>
    method: PATCH
    data_selector: null
    params: {}
- name: delete_envelope
  endpoint:
    path: /v2/envelopes/{envelope_id}
    method: DELETE
    data_selector: null
    params: {}
- name: find_envelope
  endpoint:
    path: /v2/organisations/envelopes/find
    method: POST
    data_selector: ''
- name: send_reminder
  endpoint:
    path: /v2/envelopes/{envelope_id}/recipients/{recipient_id}/send-reminder
    method: POST
- name: extend_recipient_tokens
  endpoint:
    path: /v2/envelopes/:envelopeId/extend-tokens
    method: POST
    data_selector: null
    params: {}
- name: age_estimation
  endpoint:
    path: /age
    method: POST
- name: age_antispoofing
  endpoint:
    path: /age-antispoofing
    method: POST
- name: antispoofing
  endpoint:
    path: /antispoofing
    method: POST
- name: age_verification
  endpoint:
    path: /api/v1/age-verification
    method: POST
- name: sign_offline
  endpoint:
    path: /v2/envelopes/:envelopeId/recipients/:recipientId/signed-documents
    method: POST
- name: anti_spoofing
  endpoint:
    path: /antispoofing
    method: POST
    data_selector: result
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: data
- name: age
  endpoint:
    path: /age
    method: POST
    data_selector: results
    params:
      secure: 'true'
- name: antispoofing
  endpoint:
    path: /antispoofing
    method: POST
    data_selector: results
    params:
      secure: 'true'
- name: age_antispoofing
  endpoint:
    path: /age-antispoofing
    method: POST
    data_selector: results
    params:
      secure: 'true'
- name: id_verification
  endpoint:
    path: /age-verification/identity-verification
    method: POST
    data_selector: data
    params: {}
- name: age_estimation
  endpoint:
    path: /v1/age
    method: GET
    data_selector: null
    params:
      secure: 'true'
- name: age_antispoofing
  endpoint:
    path: /v1/age-antispoofing
    method: GET
    data_selector: null
    params:
      secure: 'true'
- name: antispoofing
  endpoint:
    path: /v1/antispoofing
    method: GET
    data_selector: null
    params:
      secure: 'true'
- name: la_wallet
  endpoint:
    path: /age-verification/la-wallet
    method: POST
    data_selector: la_wallet
    params: {}
- name: email_address_check
  endpoint:
    path: /age-verification/email-address-check
    method: POST
    data_selector: data
    params: {}
- name: digital_id
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: yoti_key
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: double_blind
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: launch_user_view
  endpoint:
    path: /age-verification/launch-the-user-view
    method: GET
    data_selector: sessionId
    params: {}
- name: session_result
  endpoint:
    path: /sessions/<sessionId>/result
    method: GET
    data_selector: results
- name: notifications
  endpoint:
    path: /age-verification/notifications
    method: POST
    data_selector: payload
- name: create_age_token_rule
  endpoint:
    path: /rules
    method: POST
- name: configure_yoti_key_method
  endpoint:
    path: /yoti_keys
    method: POST
- name: us_florida_hb3
  endpoint:
    path: /age-verification/us-partner
    method: POST
    data_selector: us_florida_hb3
    params:
      allowed: true
      threshold: 18
      retry_limit: 1
- name: age_estimation
  endpoint:
    path: /age
    method: POST
- name: age_antispoofing
  endpoint:
    path: /age-antispoofing
    method: POST
- name: antispoofing
  endpoint:
    path: /antispoofing
    method: POST
- name: age_verification
  endpoint:
    path: /age-verification
    method: POST
- name: anti_spoofing_check
  endpoint:
    path: /ai/v1/antispoofing
    method: POST
    data_selector: result
- name: age
  endpoint:
    path: /age
    method: POST
    data_selector: age
- name: antispoofing
  endpoint:
    path: /antispoofing
    method: POST
    data_selector: prediction
- name: age_antispoofing
  endpoint:
    path: /age-antispoofing
    method: POST
    data_selector: age, antispoofing
- name: age
  endpoint:
    path: /v1/age
    method: GET
    params:
      secure: 'true'
- name: age_antispoofing
  endpoint:
    path: /v1/age-antispoofing
    method: GET
    params:
      secure: 'true'
- name: antispoofing
  endpoint:
    path: /v1/antispoofing
    method: GET
    params:
      secure: 'true'
notes:
- Yoti API endpoints are authenticated through signed requests.
- Yoti uses machine learning to train a deep neural network to recognise presentation
  attacks.
- Active liveness check with 3 retries
- Passive (Static) liveness check with 3 retries
- Passive liveness check with 3 retries
- Be transparent about why you're collecting data and only use this data for those
  reasons.
- Only collect the information you actually need. Data minimisation is one of the
  main benefits of Yoti, so people don't have to provide more information than is
  actually necessary.
- Make sure any information you export to your own systems is stored securely. Data
  security is at the heart of what we do and we think it should be important to every
  organisation.
- Yoti offers a free "learn more" page which is included within the button.
- This acts as a short quick start guide for migrating from the original Digital ID
  SDK, to the new 'V2' SDK.
- Scenarios created via the Hub are no longer compatible with the newly launched Digital
  ID SDK.
- Webhook notifications can be configured for a Share v2 session.
- This documentation has recently been revised, the legacy version can be found here.
- This documentation serves as an integration guide for Yoti & Post Office’s new services
- Data minimisation is one of the main benefits of Yoti, so people don't have to provide
  more information than is actually necessary.
- Make sure any information you export to your own systems is stored securely.
- Yoti requires you to use a bearer token required to create an envelope.
- Uses OAuth2 with refresh token — requires setup of connected app in Yoti
- Ensure compliance with data minimization principles
- In-Branch Verification is a service for organisations who require In-person identity
  verification and document validation.
- The sandbox environment bypasses real world checks and tasks.
- A response-config must be set before proceeding with the user view for sandbox setups.
- Authorization header is required for all endpoints
- No response body for successful DELETE requests.
- The age verification API uses an HTTP authentication scheme called ‘bearer authentication’.
  This involves security tokens called ‘bearer tokens’. They are the predominant type
  of access token used with OAuth 2.0.
- API Key for the Yoti Age Verification API should be sent as 'Bearer {{API_TOKEN}}'.
- Ensure your API Key remains confidential.
- API Key to call the Yoti Age Verification API must be sent as a bearer token.
- API Key to call the Yoti Age Verification API must be sent as a bearer token
- allow="camera" is required when using ID verification on mobiles (web or native)
- Webhook notifications should be subscribed to for the ID AV method as this may not
  always return an immediate result.
- Notifications require HTTPS and will be reattempted if a 200 status code is not
  received.
- It is important to acknowledge the notification with a 200 status code to avoid
  receiving repeat notifications.
- allow="camera" is required when using ID verification on mobiles (web or native),
  and is serving the website over HTTPS.
- Email address check requires provisioning through Yoti.
- The social security number check requires provisioning through Yoti.
- Contact Yoti before enabling this method.
- The conversion Id that is returned in the API call to request a session must be
  used as a query parameter in the API call to retrieve results.
- Requires setup of connected app in Yoti.
- Yoti recommends 3 attempts as a max retry number.
- Uses OAuth2 for authentication.
- Yoti performs numerous checks on a document in order to generate this report.
- Last updated on
- Yoti will provide back all images and results from all liveness attempts.
- 'Yoti recommends you have both options available for document upload: image capture
  and upload.'
- Automated AI face match may return a confidence score between 0 and 1.
- The report breakdown will only display sub-checks that have been attempted.
- Yoti will extract data from thousands of ID documents from 200+ countries using
  Optical Character Recognition (OCR).
- Yoti provides a recommendation for the text data extraction.
- Fuzziness will be automatically set at 50% if not stated.
- 'Yoti will need to capture the following user attributes: Name, Date of birth, Country
  ISO code.'
- Yoti performs an automated initial check to confirm the user's face matches the
  face on their ID document.
- Our mobile SDKs (iOS/Android/React Native) do not support Sandbox Keys.
- Yoti recommends that you inform your users that their data might be checked against
  a third party data source as part of the identity check.
- Not all ID documents contain the users address.
- Yoti provides a portal that allows you to use our Identity verification service
  without doing any technical integration.
- A session represents one end-to-end use of the ID verification service.
- Yoti provides ongoing monitoring of a person such that the relying party is notified
  if a particular person appears on a list over time, after the initial screening.
- Fuzziness will be automatically set at 50% and all available sources will be selected
  if not stated.
- We recommend using 'Passive' liveness.
- You must collect the user’s specific consent to collect their biometric details
  for our liveness or face matching feature to be compliant with the US legislation.
- Yoti Hub is only supported on web.
- This check will facilitate an extra verification of a user by searching a person’s
  details against a collated database from various sources worldwide.
- You need to be an admin to assign organisation permissions to users.
- An organisation admin is able to give permissions to a user from the Permissions
  tab on their profile page.
- 'Yoti must be provided with successful data extraction on the ID document with the
  following data: Name, Date of birth, Country ISO code.'
- You will be provided with a list of checks that Identity verification provides.
- Yoti recommends you keep the data only if necessary. By default we set the session
  time to live for 1 week and the retention period to 3 months.
- Hub users are not automatically added to the Identity verification portal so please
  add yourself.
- All users are required to set up 2 factor authentication to access the portal
- We recommend a maximum of 3 retries.
- A liveness check enabled
- A document check enabled
- Yoti will respond with a recommendation for each check.
- If we couldn't extract the data, Yoti suggests you ask the user to try again.
- Yoti strongly recommends you use notifications for each session status.
- If success URL or error URL is supplied, use POST messaging to be notified of errors.
- All users will receive an email from Yoti. They will then need to register on the
  portal at https://identity.yoti.com/iam/create.
- This must be longer than 300s (5 minutes).
- We recommend configuring your session ttl to at least 15 minutes to avoid showing
  this prompt to the user at the start of the process.
- This config may result in additional charges. Please get in touch with support if
  considering a TTL longer than three months.
- Yoti will respond with a recommendation for each check
- A full list of the rejection reasons are located at the respective reports with
  recommended next steps
- Yoti will perform multiple checks on an ID document.
- Yoti does not support non-Latin characters currently.
- If a success URL or error URL is supplied, check Yoti's recommendation on using
  POST messaging to be notified if an error occurs in the flow or completion.
- Each session must be longer than 300 seconds.
- Retention period for uploaded documents/images must be at least 24 hours.
- You can configure this in the sdk_config by specifying which screens to omit.
- Only HTTPS endpoints with TLS 1.2 are supported.
- Exposing the notification endpoint is not mandatory but highly recommended.
- Some checks have additional charges
- Certain documents are required for the checks
- The results of the subcheck will appear in the report breakdown of the Document
  Authenticity check
- 'If the subcheck fails, the overall recommendation will be REJECT, with rejection
  reason: ISSUING_AUTHORITY_INVALID'
- Yoti will perform multiple checks on a ID document.
- The document inspection falls back to a manual process, if automation does not auto
  approve or auto reject.
- Yoti and Post Office EasyID are a certified IDSP, further information regarding
  our certification can be found here.
- You can configure sdk_config by specifying which screens to omit.
- Expanded fields are not returned by default. This must be added to the ID Document
  Text Extraction task.
- Each session has a configured 'time to live' (TTL) which must be above 300 seconds
  (5 minutes).
- The Issuing Authority check can only be run on certain documents.
- If an unsupported document is submitted, the check will be omitted from the results.
- Due to government restrictions Aadhaar numbers cannot be shared and it is mandatory
  to mask them.
- We return to businesses only masked images of Aadhaar cards.
- Unmasked images are deleted from our backend as soon as all checks are done.
- Sessions may contain multiple checks, tasks and resources depending on the requested
  configuration.
- Each endpoint requires an RSA-signed request for Authentication.
- If the register key pair button does not appear as an option, it's likely the key
  has already been registered.
- You will not be able to review old sessions.
- Mobile SDKs (iOS/Android/React Native) do not support sandbox keys.
- Identity Profile checks (RTW and DBS) are also not supported.
- Sandbox requires you to set an expected outcome for your tasks and checks.
- The 'FAMILIAR_FACE_SEARCH' is the check that needs to be configured for the Face
  checking service.
- The user view must be completed.
- Base URL must be updated for sandbox iFrame.
- Review any matches internally to avoid rejecting genuine users.
- Sending your personal details through a third party service can be an unnerving
  experience.
- Customers need to be informed about the verification process.
- Not all fields will be available all the time, as not all of them are mandatory.
- You will need to access your Yoti Hub account with an e-mail & password or using
  the Yoti mobile app and to have registered your business with Yoti.
- Only collect the information you actually need.
- 'Please set the domain to: www.yoti.com'
- 'Please set the callback URL to: www.yoti.com/connect/thankyou'
- Yoti offers the ability to request the devices that interacted with the session
  and some of the devices details.
- 'To successfully integrate you will need the following information about your application
  from Yoti Hub: SDK ID, Application key pair (PEM).'
- Our mobile SDKs (iOS/Android/React Native) do not support sandbox keys.
- The sandbox is an isolated test environment, intended to easily create test cases
  using dummy data where it's not feasible to test your integration with live data.
- The Yoti button requires the hosting page to be accessed via HTTPS.
- Static QR codes have no expiry.
- To use the Digital ID Connect skin, your organisation must operate in the United
  Kingdom, Isle of Man or the Channel Islands.
- Users who choose Yoti Identity Verification will be shown our persistent ‘Powered
  by Yoti’ mark.
- Retrieving a profile involves retrieving a Receipt ID, and decrypting it to get
  the user profile.
- Make sure you understand how a Identity verification works by looking at our guide
- Attributes are independent of each other, so they can be requested separately.
- Users will receive a push notification on their phone that a search has been carried
  out.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Ensure the latest version of the Yoti backend SDK is installed.
- Yoti holds a SOC 2 Type 2 for our technical and organisational security controls
  certification.
- Yoti also holds an ISO/IEC 27001:2013 information security standard.
- Yoti acts as both a data controller and a data processor.
- Request your API keys, please let us know if you want to use sandbox or production.
- Uses bearer token required to create an envelope.
- Different ID documents have different attributes, bear this in mind when requesting
  attributes.
- Bulk upload feature is available upon request.
- This guide is only for configuring the Digital ID service within a no-code portal.
- Following our user experience guidelines makes for a faster and more enjoyable experience
  for your users.
- Offline security features capabilities are limited. You cannot use OTP, Yoti Auth
  or witnessing.
- The sign offline is available upon request.
- You can search for any field in the search tab. It will display the results of all
  entries related to the search.
- Static QR code has no expiry to reload the QR code.
- Yoti Sign uses bearer authentication.
- Authentication is important. Please ensure that any user signing through the embedded
  version are authenticated.
- Yoti will automatically prefix this URL with domain name specified in your Yoti
  Hub app.
- Attributes can be requested independently.
- You can configure reminders to be sent to recipients who still have active documents
  that need signing. There will be 3 reminders (this is not currently configurable).
- You must inform the user that you are carrying out this search.
- Users are able to opt out of the search from within their Digital ID account.
- If you would like to enable an SMS two factor authentication you can enable this
  in your request.
- Yoti have created a dynamic web version of this for you. It's very easy to use with
  our Yoti button.
- A tag is an array of objects used to place signature fields on a given document
  as shown below.
- There is a limit of 200 tags per recipient.
- You can add multiple people to sign the same document.
- The bulk upload feature is available upon request.
- Make sure that your tags are formatted correctly by viewing the auto tagging matrix.
- Yoti requires at least one tag for a witness.
- You will need to have added a document to the portal and at least one signer, and
  added your fields.
- Endpoint for notifications to be sent to must be publicly accessible.
- Your API Key must remains strictly confidential.
- Up to 30 recipients can be added.
- For embedded envelopes this self-reactivation will not be possible, due to security
  reasons.
- Please ensure the correct country code is used and remove the first digit of the
  mobile number.
- A tag can have a maximum of 200 per recipient.
- Conditional logic allows you to specify that certain conditions must be met, before
  triggering an action.
- Both iso_country_code and mobile_number must be specified if at least one of these
  fields is included in the request.
- Ensure that your business is registered with Yoti.
- API Key should be sent as a 'Bearer {{API_TOKEN}}'.
- The API Key must be stored securely.
- ID document checks may not complete by the time the user is returned. Please refer
  to the results page for proper handling, or consider enabling the synchronous_checks
  flag.
- This is a document scan for the purpose of an age verification only.
- Enable the verification method to be available for the user to use.
- The La wallet method is similar to our own digital id method, but instead of a QR
  code that needs to be scanned, we will present a numerical code on the screen which
  the user will need to enter into their LA wallet app.
- retry_enabled must be set to 'true' to allow users to try different methods upon
  failure.
- Notifications will be sent multiple times for cases where retries or the resume
  flow is enabled.
- Tokens are flexible and are accepted entirely at the discretion of the integrating
  party.
- The user interface can be customised to make the UI appear closer to your branding.
- If you wish to customise your integration please fill out the form below.
- A verified organisation through the Yoti Hub is required.
- Age Verification API Key consists of an SDK ID and Bearer Token.
- This integration is in BETA. Please help us improve by providing feedback.
- In order to use the US partner an organisation must be registered with Yoti.
- At least one of Document Scan, Facial Age Estimation or Digital ID Age verification
  methods must be enabled to use this check.
- Requires a higher quality image for version 2
- Can combine age estimation with anti-spoofing check
- The age verification API uses an HTTP authentication scheme called ‘bearer authentication’.
- We store any data captured, such as the ID document and selfie, in our UK data centre.
  Once the session has been completed, we delete all personal information.
- Yoti will send the user’s details to one of our data providers.
- We never store or share the user’s details with anyone other than the provider.
- Yoti offers the additional method of using a LA wallet to verify a users age.
- The user will only be asked to create a Yoti key if the callback url is not configured
  to automatically redirect.
- By default, the document scan and credit card age verification method does not return
  an immediate result upon user redirection.
- Polling the result endpoint every 5 seconds, up to three times, is recommended.
- Tokens are flexible and accepted at the discretion of the integrating party.
- The maximum time that a token can be considered valid is 30 days.
- An organisation must be registered with Yoti.
- This integration is in BETA.
- You will need to have completed Onboarding and generated API keys.
errors:
- '400: Payload validation error or malformed request'
- '401: Unauthorised request (wrong key or signature)'
- '403: Unauthorised request (app is disabled or has no associated organisation_id)'
- '404: The application for provided sdk id does not exist'
- '503: The service is unavailable'
- '400: Invalid payload or request missing headers or query params'
- '404: Session or App not found'
- '404: App not found'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'MANDATORY_DOCUMENT_NOT_PROVIDED: The user does not have sufficient documents to
  reach the target level of identity verification.'
- 'FRAUD_DETECTED: Suspected fraud for the given identity therefore unable to reach
  the required identity profile.'
- 'UNABLE_TO_VALIDATE_DOCUMENT: We have not been able to successfully validate a required
  document.'
- 'MISSING_LIVENESS: Returned if the session does not have a passed liveness check.'
- 'IDENTITY_CHECK_FAILED: Additional checks on a user’s identity have not been successful.'
- 'UNABLE_TO_COMPLETE_CHECKS: Required checks could not be completed.'
- 'COULD_NOT_VERIFY_ADDRESS: Could occur if the address was not verified for any reason.'
- 'FACE_MATCH_VERIFICATION_FAILED: The face match check could not be performed.'
- 'FACE_MATCH_HIGHER_THRESHOLD_VERIFICATION_FAILED: A higher level of confidence in
  the face match is required.'
- 'ACTIVITY_HISTORY_SCORE_INSUFFICIENT: The profile has not reached the required activity
  history score.'
- 'IDENTITY_FRAUD_SCORE_INSUFFICIENT: The profile has not reached the identity fraud
  score.'
- 'IDENTITY_FRAUD_AND_ACTIVITY_HISTORY_SCORES_INSUFFICIENT: The profile has not reached
  both scores.'
- 'MISSING_FRAUD_LIST_CHECK: This error can arise if a technical problem occurs while
  checking the identity against a fraud list.'
- 'ABANDONED: Expired sessions will eventually be set to ABANDONED.'
- 'Mandatory Document Not Provided: The user does not have sufficient documents to
  reach the target level of identity verification.'
- 'FRAUD_DETECTED: Suspected fraud for the given identity therefore unable to reach
  the required identity profile. This should be reviewed.'
- 'UNABLE_TO_VALIDATE_DOCUMENT: We have not been able to successfully validate a required
  document (for reasons other than suspected fraud, e.g. capture error).'
- 'IDENTITY_CHECK_FAILED: Additional checks on a user’s identity, required to meet
  the level of confidence, have not been successful. Will be triggered by a PEP flag
  or deceased flag.'
- 'COULD_NOT_VERIFY_ADDRESS: Could occur if the address was not verified for any reason
  after the applicant leaves the session.'
- 'FACE_MATCH_HIGHER_THRESHOLD_VERIFICATION_FAILED: In some circumstances, a higher
  level of confidence in the face match is required, such as if the presented identity
  is at higher risk of identity fraud. This reason code is returned if such a higher
  threshold could not be met.'
- 'ACTIVITY_HISTORY_SCORE_INSUFFICIENT: The profile has not reached the required activity
  history score for the specified scheme.'
- 'IDENTITY_FRAUD_SCORE_INSUFFICIENT: The profile has not reached the identity fraud
  score for the specified scheme.'
- 'IDENTITY_FRAUD_AND_ACTIVITY_HISTORY_SCORES_INSUFFICIENT: The profile has not reached
  both the identity fraud activity history scores for the specified scheme.'
- 'ABANDONED: Expired sessions will eventually be set to ABANDONED, there is approximately
  a two hour delay between this aborted reason appearing from expiry.'
- 204 OK, completed with no content
- 400 Invalid payload
- 401 Unauthorized
- 500 Server Error
- 503 Temporarily Unavailable
- '400: Image validation error or malformed request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Resource not found'
- '413: Content too large'
- '500: Internal server error'
- '503: Service temporarily unavailable'
- '400: Invalid payload'
- '500: Server Error'
- '503: Temporarily Unavailable'
- '401 Unauthorized: Invalid authorization token'
- '404 Not Found: Resource not found'
- '500 Internal Server Error: Unexpected error'
- 400 Bad request
- 409 Duplicate account name error
- 422 Too many accounts created
- 500 Internal server error
- 404 Specified resource not found
- 422 Pagingation out of range
- 422 Pagination out of range
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403 Forbidden: Check application status or organization suspension'
- '401 Unauthorized: Recheck API key or signature validity'
- '403 Forbidden: Application is disabled or organization is suspended'
- '400 Bad Request: Check request parameters or body format'
- '201: Success'
- '400: Missing field in post body'
- '401: Missing or unknown SDK ID'
- '403: Incorrect API key'
- 'E600408: Spoofing attempt detected'
- 'PAYLOAD_TOO_LARGE: Payload too large.'
- 'IMAGE_NOT_PROVIDED: Image has not been provided.'
- 'INVALID_B64_IMAGE: Base64 image is incorrectly padded.'
- 'UNSUPPORTED_IMAGE_FORMAT: Image format not supported. Please use JPEGs (95 to 100
  quality) and PNGs.'
- 'IMAGE_SIZE_TOO_BIG: Image size too big, the maximum size is 1.5MB.'
- 'IMAGE_SIZE_TOO_SMALL: Image size too small, the minimum size is 50KB.'
- 'MIN_HEIGHT: The image height is incorrect. Image minimum height required is 300
  pixels.'
- 'MAX_HEIGHT: The image height is incorrect. Image maximum height required is 2000
  pixels.'
- 'MIN_WIDTH: The image width is incorrect. Image minimum width required is 300 pixels.'
- 'MAX_WIDTH: The image width is incorrect. Image maximum width required is 2000 pixels.'
- 'MIN_PIXELS: To process the image the minimum number of pixels required is 90,000
  pixels.'
- 'MAX_PIXELS: To process the image the maximum number of pixels required is 2,100,000
  pixels.'
- 'IMAGE_WRONG_CHANNELS: Missing colour channel, the input image must be RGB or RGBA.'
- 'IMAGE_GRAYSCALE_NOT_SUPPORTED: Grayscale images not supported.'
- 'FACE_NOT_FOUND: Face not found.'
- 'MULTIPLE_FACES: Multiple faces in the image provided.'
- 'FACE_BOX_TOO_SMALL: The face in the image provided is too small.'
- 'FACE_TO_IMAGE_RATIO_TOO_LOW: Face ratio is lower than the minimum ratio.'
- 'FACE_TO_IMAGE_RATIO_TOO_HIGH: Face ratio is bigger than the maximum ratio.'
- 'INSUFFICIENT_AREA_AROUND_THE_FACE: Insufficient area around the face in the image
  provided.'
- 'IMAGE_TOO_BRIGHT: Image too bright.'
- 'IMAGE_TOO_DARK: Image too dark.'
- 'INVALID_REQUEST_BODY: Request body is invalid, ''-'' field is invalid.'
- 'UNSPECIFIED_ERROR: An internal server error occurred.'
- 'E200001: Internal server error'
- 'E200003: Unable to get a response from requesting OTP'
- 'E200006: Invalid country code'
- 'E200007: Bad request'
- 'E200008: Unauthorised'
- 'E200009: Not allowed'
- 'E200010: Not found'
- 'E200011: Invalid message template'
- 'E200012: Phone number not whitelisted'
- 'E200013: Error received from supplier'
- 'IN_PROGRESS: User has not yet completed the process.'
- 'COMPLETE: The session has been completed, data has successfully been returned.'
- 'ERROR: We could not provide any Data or an error occurred.'
- 'FAIL: We have only received a partial result.'
- 'COUNTERFEIT: Yoti''s document specialists have deemed that the printed document
  is a counterfeit document.'
- 'EXPIRED_DOCUMENT: The document expiry date is in the past and the document is no
  longer valid.'
- 'FRAUD_LIST_MATCH: The document provided matches the name or document number of
  an existing document on a fraud list.'
- 'FACE_NOT_GENUINE: The user may be trying to spoof the face match.'
- 'LARGE_AGE_GAP: The user looks to be a different age compared to their ID document
  portrait.'
- 'PHOTO_OF_MASK: The user is wearing a mask.'
- 'EXTRACTION_FAILED: Ask the user to try again with a different document.'
- 'MRZ_VALIDATION: Ask the user to try again with a different document.'
- 'PHOTO_OF_PHOTO: The image of the user is a photo. Not the user doing the liveness.'
- 'DIFFERENT_PERSON: Different person is detected from ID.'
- '400: Bad request - there was an error when validating the request payload.'
- '401: Cannot authorize your request for the session with the given token'
- '403: You may only update Resources that you have created'
- '404: No resource found for the sessionId & resourceId provided'
- '409: The session has expired'
- '422: The media provided is not processable'
- '503: The service is unavailable. Further details may be provided in errors array'
- 'Request failed: Invalid document type'
- 'Request failed: Document expired'
- '400: Bad request - there was an error when validating the request payload'
- '401: Unauthorised - the request to the endpoint is not authorised for the API keys
  use'
- '403: Insufficient permission - the sdk id does not have permission to use this
  service'
- '422: Unprocessable entity - cannot handle the content of the payload'
- '404: Not found - applicant can''t be found linked to the supplied id'
- '503: Service unavailable - Yoti services are temporarily unavailable'
- '404: Not found - pool can''t be found linked to the supplied id'
- 'Unsupported document type: The check cannot be performed if the document is not
  supported.'
- '204 NO_CONTENT: The retrieval request will return 204 NO_CONTENT if there is no
  number detected.'
- '400: Bad request - there was an error when validating the request payload. further
  details will be provided in errors array.'
- They cancelled the session for an unknown reason.
- Their session was configured incorrectly.
- Something went wrong during a network request.
- There was a network error
- Their session timed out.
- Your SDK is out of date.
- They did not grant permissions to the camera.
- They do not have a camera on their device.
- The document upload process failed too many times.
- They couldn't pass the liveness test.
- '204 NO_CONTENT: If there is no number detected then you will not be able to retrieve
  the images.'
- '400: Invalid request payload sent'
- '400: One or more of the specified attributes are not known'
- '403: Service is disabled'
- '403: Service does not belong to an organisation'
- '403: Organisation status must be PENDING or VERIFIED to perform shares'
- '403: Service isn’t allowed to request the specified 3rd party attribute'
- '403: Service isn’t allowed to issue the specified 3rd party attribute'
- '400: Missing url field in the request body'
- '406: Empty Accept header'
- '406: An Accept header was sent with an invalid return type'
- 'They cancelled the session for an unknown reason: Start the session again'
- 'Their session was configured incorrectly: Start the session again'
- 'Something went wrong during a network request: Check their connection and try again.'
- 'There was a network error: Check their connection and try again.'
- 'Their session timed out: Start the session again'
- 'Your SDK is out of date: Try a different verification method. Update your SDK to
  the latest version.'
- 'They did not grant permissions to the camera: Start the session again, They will
  be asked to grant permissions again.'
- 'They do not have a camera on their device: Try a different verification method.'
- 'The document upload process failed too many times: Start the session again, or
  offer an alternative verification method.'
- 'They couldn''t pass the liveness test. This is either due to user error or them
  attempting to spoof the check: Try a different verification method.'
- MANDATORY_DOCUMENT_NOT_PROVIDED
- '201: Created'
- '400: Bad Request'
- '400: Bad Request, example: id provided not a UUID'
- '401: Unauthorised request, example: requesting the status on an envelope you are
  not authorised to view'
- '403: Forbidden, requesting user did not create the envelope'
- '413: The combined file sizes have exceeded the 20MB limit'
- '422: The request body did not pass validation'
- '401 Unauthorized: API Key missing or invalid'
- '409: Unable to create a session PDF due to ongoing session status'
- '400: Bad request or invalid payload'
- '409: The envelope is not completed'
- '410: The total number of requests to resend the recipient completion pack has exceeded
  the limit'
- '429: Please wait 5 minutes before retrying'
- '404: The recipient couldn''t be found'
- '401: Unauthorised request, example: requesting the status on an envelope you are
  not authorized to view'
- '404: The envelope ID couldn’t be found'
- '400: Bad Request or invalid payload'
- '401: Unauthorised request, example: invalid API key'
- 'upload_error: If the file_name does not match, the envelope will not be created.'
- '204: Archive Envelope successful'
- Error response code and message if the request is unsuccessful
- If the request is unsuccessful a response code and a message will be sent
- Error codes if the request is unsuccessful
- '401 Unauthorized: Recheck API Key'
- '413: The combined file sizes have exceeded the 75MB limit'
- '200: Successful response'
- Other HTTP codes with detailed messages in the response body
- '200: Success'
- '200: On success, the previous session limit will have been doubled.'
- '204: Successful request'
- Other error codes may apply
- 'Unauthorized: API Key is missing or invalid'
- Error codes will be returned if the request is unsuccessful
- '404: APP_NOT_FOUND'
- '401: INVALID_X_YOTI_AUTH_ID'
- '400: INVALID_APP_ID'
- '404: APP_NOT_FOUND: Application app_id not found.'
- '401: INVALID_X_YOTI_AUTH_ID: X-Yoti-Auth-Id header not provided.'
- '400: INVALID_APP_ID: Application id cannot be empty.'
- '400: INVALID_PUBLIC_KEY: Application public key cannot be empty.'
- '403: DISABLED_APP_STATE: Application must be enabled.'
- 'SECURE_REQUEST_IS_EMPTY: Secure request field is empty.'
- 'SECURE_SESSION_NOT_FOUND: Secure session not found.'
- 'SECURE_SIGNATURE_NOT_FOUND: Secure signature not found.'
- 'SECURE_VERSION_NOT_FOUND: Secure version not found.'
- 'INVALID_SECURE_SIGNATURE: Failed to verify secure session signature.'
- 'SECURE_VERIFICATION_NOT_FOUND: Secure verification not found.'
- 'UNTRUSTED_SECURE_SESSION: Untrusted secure session'
- 'INVALID_SECURE_SESSION: Invalid secure session token.'
- '200: Acknowledge the notification to avoid receiving repeat notifications.'
- '4xx - 5xx: Error responses may occur.'
- 'statusCode: 201 for success.'
- '400: INVALID_PUBLIC_KEY'
- '403: DISABLED_APP_STATE'
- '400: INVALID_ORG_ID'
- '400: INVALID_BILLING_SOURCE_ID'
- '404: ORG_NOT_FOUND'
- '401: INVALID_YOTI_AUTH_DIGEST'
- '401: INVALID_NONCE'
- '401: INVALID_TIMESTAMP'
- '401: INVALID_PUBLIC_KEY_ENCODING'
- '401: UNSUPPORTED_ALGORITHM'
- '401: INVALID_SIGNATURE'
- '403: INVALID_ORG_STATUS'
- '404: INVALID_METADATA_DEVICE'
- '400: INVALID_BODY_ENCODING'
- '404: INVALID_ENDPOINT'
- '413: PAYLOAD_TOO_LARGE'
- '400: IMAGE_NOT_PROVIDED'
- '400: INVALID_B64_IMAGE'
- '400: UNSUPPORTED_IMAGE_FORMAT'
- '400: IMAGE_SIZE_TOO_BIG'
- '400: IMAGE_SIZE_TOO_SMALL'
- '400: MIN_HEIGHT'
- '400: MAX_HEIGHT'
- '400: MIN_WIDTH'
- '400: MAX_WIDTH'
- '400: MIN_PIXELS'
- '400: MAX_PIXELS'
- '400: IMAGE_WRONG_CHANNELS'
- '400: IMAGE_GRAYSCALE_NOT_SUPPORTED'
- '503: SERVICE_UNAVAILABLE'
- '400: FACE_NOT_FOUND'
- '400: MULTIPLE_FACES'
- '400: FACE_BOX_TOO_SMALL'
- '400: FACE_TO_IMAGE_RATIO_TOO_LOW'
- '400: FACE_TO_IMAGE_RATIO_TOO_HIGH'
- '400: INSUFFICIENT_AREA_AROUND_THE_FACE'
- '400: IMAGE_TOO_BRIGHT'
- '400: IMAGE_TOO_DARK'
- '400: INVALID_LEVEL_OF_ASSURANCE'
- '400: INVALID_REQUEST_BODY'
- '400: INVALID_IMG_VALIDATION_LEVEL'
- '401: UNAUTHORIZED'
- '500: UNSPECIFIED_ERROR'
- '500: FAIL_PREDICTION'
auth_info:
  mentioned_objects:
  - Yoti-Sdk-Id
  - Authorization
  - Yoti SDK ID
  - application key pair
client:
  base_url: https://api.yotisign.com
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
