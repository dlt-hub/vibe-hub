resources:
- name: accounts
  endpoint:
    path: /methods/accounts/
    method: GET
    data_selector: records
- name: statuses
  endpoint:
    path: /methods/statuses/
    method: GET
    data_selector: records
- name: statuses
  endpoint:
    path: /api/v1/statuses
    method: POST
    data_selector: status
    params:
      visibility: public
- name: filters
  endpoint:
    path: /methods/filters/
    method: GET
    data_selector: filters
    params: {}
- name: user_actions
  endpoint:
    path: /methods/user_actions/
    method: GET
    data_selector: user_actions
    params: {}
- name: report
  endpoint:
    path: /methods/report/
    method: POST
    data_selector: report
    params: {}
- name: apps
  endpoint:
    path: /methods/apps/
    method: GET
- name: accounts
  endpoint:
    path: /methods/accounts/
    method: GET
- name: profile
  endpoint:
    path: /methods/profile/
    method: GET
- name: statuses
  endpoint:
    path: /methods/statuses/
    method: GET
- name: timelines
  endpoint:
    path: /methods/timelines/
    method: GET
- name: notifications
  endpoint:
    path: /methods/notifications/
    method: GET
- name: search
  endpoint:
    path: /methods/search/
    method: GET
- name: health
  endpoint:
    path: /methods/health/
    method: GET
- name: instance
  endpoint:
    path: /methods/instance/
    method: GET
- name: admin
  endpoint:
    path: /methods/admin/
    method: GET
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: records
- name: statuses
  endpoint:
    path: /api/v1/statuses
    method: GET
    data_selector: records
- name: statuses
  endpoint:
    path: /api/v1/statuses
    method: GET
    data_selector: statuses
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: accounts
- name: accounts
  endpoint:
    path: /methods/accounts/
    method: GET
    data_selector: records
- name: statuses
  endpoint:
    path: /methods/statuses/
    method: GET
    data_selector: records
- name: accounts_approve
  endpoint:
    path: /tootctl/accounts/approve
    method: POST
- name: accounts_prune
  endpoint:
    path: /tootctl/accounts/prune
    method: POST
- name: cache_clear
  endpoint:
    path: /tootctl/cache/clear
    method: POST
- name: cache_recount
  endpoint:
    path: /tootctl/cache/recount
    method: POST
- name: domains_purge
  endpoint:
    path: /tootctl/domains/purge
    method: POST
- name: domains_crawl
  endpoint:
    path: /tootctl/domains/crawl
    method: POST
- name: email_domain_blocks_list
  endpoint:
    path: /tootctl/email-domain-blocks/list
    method: GET
- name: emoji_export
  endpoint:
    path: /tootctl/emoji/export
    method: POST
- name: feeds_build
  endpoint:
    path: /tootctl/feeds/build
    method: POST
- name: maintenance_fix_duplicates
  endpoint:
    path: /tootctl/maintenance/fix-duplicates
    method: POST
- name: media_remove
  endpoint:
    path: /tootctl/media/remove
    method: POST
- name: preview_cards_remove
  endpoint:
    path: /tootctl/preview_cards/remove
    method: POST
- name: search_deploy
  endpoint:
    path: /tootctl/search/deploy
    method: POST
- name: statuses_remove
  endpoint:
    path: /tootctl/statuses/remove
    method: POST
- name: upgrade_storage_schema
  endpoint:
    path: /tootctl/upgrade/storage-schema
    method: POST
- name: PostgreSQL
  endpoint:
    path: /admin/backups/postgresql
    method: GET
    data_selector: backup_info
    params: {}
- name: Application Secrets
  endpoint:
    path: /admin/backups/secrets
    method: GET
    data_selector: secrets_info
    params: {}
- name: User Uploaded Files
  endpoint:
    path: /admin/backups/user_files
    method: GET
    data_selector: files_info
    params: {}
- name: Redis
  endpoint:
    path: /admin/backups/redis
    method: GET
    data_selector: redis_info
    params: {}
- name: pgbouncer
  endpoint:
    path: /etc/pgbouncer/pgbouncer.ini
    method: GET
    data_selector: ''
    params: {}
- name: redis
  endpoint:
    path: /etc/redis/redis.conf
    method: GET
    data_selector: ''
    params: {}
- name: events
  endpoint:
    path: /webhooks/moderation
    method: POST
    data_selector: event
    params: {}
- name: roles
  endpoint:
    path: /admin/roles
    method: GET
    data_selector: roles
- name: public_timelines
  endpoint:
    path: /api/v1/timelines/public
    method: GET
    data_selector: ''
    params:
      limit: '2'
- name: public_instance
  endpoint:
    path: /api/v1/instance
    method: GET
    data_selector: ''
    params: {}
- name: public_trends
  endpoint:
    path: /api/v1/trends
    method: GET
    data_selector: ''
    params: {}
- name: verify_credentials
  endpoint:
    path: /api/v1/apps/verify_credentials
    method: GET
    data_selector: Application
- name: following
  endpoint:
    path: /api/v1/accounts/:id/following
    method: GET
    data_selector: following
- name: followers
  endpoint:
    path: /api/v1/accounts/:id/followers
    method: GET
    data_selector: followers
- name: verify_credentials
  endpoint:
    path: /api/v1/accounts/verify_credentials
    method: GET
- name: statuses
  endpoint:
    path: /api/v1/statuses
    method: POST
- name: timelines
  endpoint:
    path: /api/v1/timelines
    method: GET
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
- name: search
  endpoint:
    path: /api/v2/search
    method: GET
- name: accounts
  endpoint:
    path: /methods/accounts
    method: GET
    data_selector: records
- name: statuses
  endpoint:
    path: /methods/statuses
    method: GET
    data_selector: records
- name: statuses
  endpoint:
    path: /api/v1/statuses
    method: GET
- name: timelines
  endpoint:
    path: /api/v1/timelines
    method: GET
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
- name: statuses
  endpoint:
    path: /api/v1/statuses
    method: GET
    data_selector: statuses
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: accounts
- name: webfinger
  endpoint:
    path: /.well-known/webfinger
    method: GET
    data_selector: aliases
    params:
      resource: acct:username@domain
- name: apps
  endpoint:
    path: /api/v1/apps
    method: POST
    data_selector: id
    params: {}
- name: verify_credentials
  endpoint:
    path: /api/v1/apps/verify_credentials
    method: GET
    data_selector: name
    params: {}
- name: apps
  endpoint:
    path: /api/v1/apps
    method: POST
- name: authorize_user
  endpoint:
    path: /oauth/authorize
    method: GET
    data_selector: query
    params:
      response_type: code
- name: obtain_token
  endpoint:
    path: /oauth/token
    method: POST
    data_selector: access_token
- name: revoke_token
  endpoint:
    path: /oauth/revoke
    method: POST
    data_selector: empty_response
- name: retrieve_user_info
  endpoint:
    path: /oauth/userinfo
    method: GET
    data_selector: user_info
- name: resend_confirmation_email
  endpoint:
    path: /emails/confirmations
    method: POST
    data_selector: ''
    params: {}
- name: verify_credentials
  endpoint:
    path: /accounts/verify_credentials
    method: GET
- name: update_credentials
  endpoint:
    path: /accounts/update_credentials
    method: PATCH
- name: account
  endpoint:
    path: /api/v1/accounts/:id
    method: GET
- name: multiple_accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
- name: account_statuses
  endpoint:
    path: /api/v1/accounts/:id/statuses
    method: GET
- name: account_followers
  endpoint:
    path: /api/v1/accounts/:id/followers
    method: GET
- name: register_account
  endpoint:
    path: /api/v1/accounts
    method: POST
    data_selector: Token
    params: {}
- name: featured_accounts
  endpoint:
    path: /api/v1/accounts/:id/endorsements
    method: GET
    data_selector: Account
    params:
      max_id: ''
      since_id: ''
      limit: 40
- name: unfeature_account
  endpoint:
    path: /api/v1/accounts/:id/unendorse
    method: POST
    data_selector: Relationship
    params: {}
- name: set_private_note
  endpoint:
    path: /api/v1/accounts/:id/note
    method: POST
    data_selector: Relationship
    params: {}
- name: check_relationships
  endpoint:
    path: /api/v1/accounts/relationships
    method: GET
    data_selector: Relationship
    params:
      id[]: ''
      with_suspended: false
- name: find_familiar_followers
  endpoint:
    path: /api/v1/accounts/familiar_followers
    method: GET
    data_selector: FamiliarFollowers
    params:
      id[]: ''
- name: search_accounts
  endpoint:
    path: /api/v1/accounts/search
    method: GET
    data_selector: Account
    params:
      q: ''
      limit: 40
      offset: ''
      resolve: false
      following: false
- name: lookup_account
  endpoint:
    path: /api/v1/accounts/lookup
    method: GET
    data_selector: Account
    params:
      acct: ''
- name: identity_proofs
  endpoint:
    path: /api/v1/accounts/:id/identity_proofs
    method: GET
    data_selector: IdentityProof
    params: {}
- name: following
  endpoint:
    path: /api/v1/accounts/:id/following
    method: GET
    data_selector: Array of Account
    params: {}
- name: featured_tags
  endpoint:
    path: /api/v1/accounts/:id/featured_tags
    method: GET
    data_selector: Array of FeaturedTag
    params: {}
- name: lists
  endpoint:
    path: /api/v1/accounts/:id/lists
    method: GET
    data_selector: Array of List
    params: {}
- name: follow_account
  endpoint:
    path: /api/v1/accounts/:id/follow
    method: POST
    data_selector: Relationship
    params: {}
- name: unfollow_account
  endpoint:
    path: /api/v1/accounts/:id/unfollow
    method: POST
    data_selector: Relationship
    params: {}
- name: remove_from_followers
  endpoint:
    path: /api/v1/accounts/:id/remove_from_followers
    method: POST
    data_selector: Relationship
    params: {}
- name: block_account
  endpoint:
    path: /api/v1/accounts/:id/block
    method: POST
    data_selector: Relationship
    params: {}
- name: unblock_account
  endpoint:
    path: /api/v1/accounts/:id/unblock
    method: POST
    data_selector: Relationship
    params: {}
- name: mute_account
  endpoint:
    path: /api/v1/accounts/:id/mute
    method: POST
    data_selector: Relationship
    params: {}
- name: unmute_account
  endpoint:
    path: /api/v1/accounts/:id/unmute
    method: POST
    data_selector: Relationship
    params: {}
- name: feature_account
  endpoint:
    path: /api/v1/accounts/:id/pin
    method: POST
    data_selector: Relationship
    params: {}
- name: unfeature_account
  endpoint:
    path: /api/v1/accounts/:id/unpin
    method: POST
    data_selector: Relationship
    params: {}
- name: bookmarked_statuses
  endpoint:
    path: /api/v1/bookmarks
    method: GET
    data_selector: statuses
    params:
      limit: 20
- name: favourited_statuses
  endpoint:
    path: /api/v1/favourites
    method: GET
    data_selector: statuses
    params:
      max_id: ''
      min_id: ''
      limit: 20
- name: muted_accounts
  endpoint:
    path: /api/v1/mutes
    method: GET
    data_selector: Array of Account
    params:
      limit: 40
- name: blocked_users
  endpoint:
    path: /api/v1/blocks
    method: GET
    data_selector: records
    params:
      limit: '40'
- name: get_domain_blocks
  endpoint:
    path: /api/v1/domain_blocks
    method: GET
    data_selector: Array of String
    params:
      limit: 100
- name: block_domain
  endpoint:
    path: /api/v1/domain_blocks
    method: POST
    data_selector: Empty
    params: {}
- name: unblock_domain
  endpoint:
    path: /api/v1/domain_blocks
    method: DELETE
    data_selector: Empty
    params: {}
- name: filter_keyword
  endpoint:
    path: /filters/keywords/:id
    method: GET
- name: edit_filter_keyword
  endpoint:
    path: /filters/keywords/:id
    method: PUT
- name: remove_filter_keyword
  endpoint:
    path: /filters/keywords/:id
    method: DELETE
- name: status_filters
  endpoint:
    path: /filters/:filter_id/statuses
    method: GET
- name: add_status_filter
  endpoint:
    path: /filters/:filter_id/statuses
    method: POST
- name: view_status_filter
  endpoint:
    path: /filters/statuses/:id
    method: GET
- name: remove_status_filter
  endpoint:
    path: /filters/statuses/:id
    method: DELETE
- name: filters
  endpoint:
    path: /api/v2/filters
    method: GET
- name: specific_filter
  endpoint:
    path: /api/v2/filters/:id
    method: GET
- name: create_filter
  endpoint:
    path: /api/v2/filters
    method: POST
- name: update_filter
  endpoint:
    path: /api/v2/filters/:id
    method: PUT
- name: delete_filter
  endpoint:
    path: /api/v2/filters/:id
    method: DELETE
- name: view_keywords
  endpoint:
    path: /api/v2/filters/:filter_id/keywords
    method: GET
- name: add_keyword
  endpoint:
    path: /api/v2/filters/:filter_id/keywords
    method: POST
- name: reports
  endpoint:
    path: /api/v1/reports
    method: POST
    data_selector: Report
- name: view_pending_follow_requests
  endpoint:
    path: /follow_requests
    method: GET
    data_selector: Array of [Account]
    params:
      limit: '40'
- name: accept_follow_request
  endpoint:
    path: /follow_requests/:account_id/authorize
    method: POST
    data_selector: '[Relationship]'
    params: {}
- name: reject_follow_request
  endpoint:
    path: /follow_requests/:account_id/reject
    method: POST
    data_selector: '[Relationship]'
    params: {}
- name: endorsements
  endpoint:
    path: /api/v1/endorsements
    method: GET
    data_selector: accounts
    params: {}
- name: view_featured_tags
  endpoint:
    path: /api/v1/featured_tags
    method: GET
    data_selector: FeaturedTag
- name: feature_tag
  endpoint:
    path: /api/v1/featured_tags
    method: POST
    data_selector: FeaturedTag
- name: unfeature_tag
  endpoint:
    path: /api/v1/featured_tags/:id
    method: DELETE
- name: view_suggested_tags
  endpoint:
    path: /api/v1/featured_tags/suggestions
    method: GET
- name: user_preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
- name: followed_tags
  endpoint:
    path: /api/v1/followed_tags
    method: GET
    data_selector: tags
    params:
      limit: 100
- name: view_follow_suggestions_v2
  endpoint:
    path: /v2/suggestions
    method: GET
    data_selector: Array of Suggestion
    params:
      limit: '40'
- name: remove_suggestion
  endpoint:
    path: /v1/suggestions/:account_id
    method: DELETE
    data_selector: Empty
    params: {}
- name: tags
  endpoint:
    path: /api/v1/tags/:name
    method: GET
- name: follow_tag
  endpoint:
    path: /api/v1/tags/:name/follow
    method: POST
- name: unfollow_tag
  endpoint:
    path: /api/v1/tags/:name/unfollow
    method: POST
- name: feature_tag
  endpoint:
    path: /api/v1/tags/:id/feature
    method: POST
- name: unfeature_tag
  endpoint:
    path: /api/v1/tags/:id/unfeature
    method: POST
- name: delete_profile_avatar
  endpoint:
    path: /api/v1/profile/avatar
    method: DELETE
    data_selector: CredentialAccount
- name: delete_profile_header
  endpoint:
    path: /api/v1/profile/header
    method: DELETE
    data_selector: CredentialAccount
- name: post_status
  endpoint:
    path: /api/v1/statuses
    method: POST
- name: get_status
  endpoint:
    path: /api/v1/statuses/:id
    method: GET
- name: preview_card
  endpoint:
    path: /api/v1/statuses/:id/card
    method: GET
- name: statuses
  endpoint:
    path: /api/v1/statuses
    method: GET
    data_selector: '[Status]'
    params: {}
- name: delete_status
  endpoint:
    path: /api/v1/statuses/:id
    method: DELETE
    data_selector: '[Status]'
    params:
      delete_media: Boolean
- name: get_context
  endpoint:
    path: /api/v1/statuses/:id/context
    method: GET
    data_selector: '[Context]'
    params: {}
- name: translate_status
  endpoint:
    path: /api/v1/statuses/:id/translate
    method: POST
    data_selector: '[Translation]'
    params:
      lang: String
- name: reblogged_by
  endpoint:
    path: /api/v1/statuses/:id/reblogged_by
    method: GET
    data_selector: '[Account]'
    params:
      max_id: Integer
      since_id: Integer
      limit: Integer
- name: favourited_by
  endpoint:
    path: /api/v1/statuses/:id/favourited_by
    method: GET
    data_selector: '[Account]'
    params:
      max_id: Integer
      since_id: Integer
      limit: Integer
- name: favourite_status
  endpoint:
    path: /api/v1/statuses/:id/favourite
    method: POST
    data_selector: '[Status]'
    params: {}
- name: unfavourite_status
  endpoint:
    path: /api/v1/statuses/:id/unfavourite
    method: POST
    data_selector: '[Status]'
    params: {}
- name: boost_status
  endpoint:
    path: /statuses/:id/reblog
    method: POST
- name: undo_boost_status
  endpoint:
    path: /statuses/:id/unreblog
    method: POST
- name: bookmark_status
  endpoint:
    path: /statuses/:id/bookmark
    method: POST
- name: undo_bookmark_status
  endpoint:
    path: /statuses/:id/unbookmark
    method: POST
- name: mute_conversation
  endpoint:
    path: /statuses/:id/mute
    method: POST
- name: unmute_conversation
  endpoint:
    path: /statuses/:id/unmute
    method: POST
- name: pin_status
  endpoint:
    path: /statuses/:id/pin
    method: POST
- name: unpin_status
  endpoint:
    path: /statuses/:id/unpin
    method: POST
- name: edit_status
  endpoint:
    path: /statuses/:id
    method: PUT
- name: view_edit_history
  endpoint:
    path: /statuses/:id/history
    method: GET
- name: view_status_source
  endpoint:
    path: /statuses/:id/source
    method: GET
- name: media_attachment
  endpoint:
    path: /api/v1/media
    method: POST
    data_selector: MediaAttachment
- name: media_attachment
  endpoint:
    path: /api/v2/media
    method: POST
    data_selector: MediaAttachment
- name: get_media_attachment
  endpoint:
    path: /api/v1/media/:id
    method: GET
    data_selector: MediaAttachment
- name: delete_media_attachment
  endpoint:
    path: /api/v1/media/:id
    method: DELETE
    data_selector: ''
- name: update_media_attachment
  endpoint:
    path: /api/v1/media/:id
    method: PUT
    data_selector: MediaAttachment
- name: view_poll
  endpoint:
    path: /polls/:id
    method: GET
- name: vote_poll
  endpoint:
    path: /polls/:id/votes
    method: POST
- name: scheduled_statuses
  endpoint:
    path: /scheduled_statuses
    method: GET
    data_selector: ScheduledStatus
    params:
      limit: '20'
- name: single_scheduled_status
  endpoint:
    path: /scheduled_statuses/:id
    method: GET
    data_selector: ScheduledStatus
- name: update_scheduled_status
  endpoint:
    path: /scheduled_statuses/:id
    method: PUT
    data_selector: ScheduledStatus
- name: cancel_scheduled_status
  endpoint:
    path: /scheduled_statuses/:id
    method: DELETE
- name: direct_timeline
  endpoint:
    path: /timelines/direct
    method: GET
    data_selector: statuses
    params:
      max_id: null
      since_id: null
      min_id: null
      limit: null
- name: public_timeline
  endpoint:
    path: /api/v1/timelines/public
    method: GET
    data_selector: statuses
    params:
      limit: 20
- name: hashtag_timeline
  endpoint:
    path: /api/v1/timelines/tag/:hashtag
    method: GET
    data_selector: statuses
    params:
      limit: 20
- name: home_timeline
  endpoint:
    path: /api/v1/timelines/home
    method: GET
    data_selector: statuses
    params:
      limit: 20
- name: link_timeline
  endpoint:
    path: /api/v1/timelines/link?url=:url
    method: GET
    data_selector: statuses
    params:
      limit: 20
- name: list_timeline
  endpoint:
    path: /api/v1/timelines/list/:list_id
    method: GET
    data_selector: statuses
    params:
      limit: 20
- name: conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: conversations
    params:
      max_id: ''
      since_id: ''
      min_id: ''
      limit: 20
- name: remove_conversation
  endpoint:
    path: /api/v1/conversations/:id
    method: DELETE
    data_selector: ''
    params: {}
- name: mark_as_read
  endpoint:
    path: /api/v1/conversations/:id/read
    method: POST
    data_selector: ''
    params: {}
- name: lists
  endpoint:
    path: /api/v1/lists
    method: GET
    data_selector: '[]'
- name: single_list
  endpoint:
    path: /api/v1/lists/:id
    method: GET
    data_selector: '{}'
- name: create_list
  endpoint:
    path: /api/v1/lists
    method: POST
    data_selector: '{}'
- name: update_list
  endpoint:
    path: /api/v1/lists/:id
    method: PUT
    data_selector: '{}'
- name: delete_list
  endpoint:
    path: /api/v1/lists/:id
    method: DELETE
    data_selector: '{}'
- name: view_accounts_in_list
  endpoint:
    path: /api/v1/lists/:id/accounts
    method: GET
    data_selector: '[]'
- name: add_accounts_to_list
  endpoint:
    path: /api/v1/lists/:id/accounts
    method: POST
    data_selector: '{}'
- name: remove_accounts_from_list
  endpoint:
    path: /api/v1/lists/:id/accounts
    method: DELETE
    data_selector: '{}'
- name: Get saved timeline positions
  endpoint:
    path: /markers
    method: GET
    data_selector: notifications,home
- name: Save your position in a timeline
  endpoint:
    path: /markers
    method: POST
    data_selector: home,notifications
- name: health
  endpoint:
    path: /api/v1/streaming/health
    method: GET
    data_selector: ''
    params: {}
- name: home_timeline
  endpoint:
    path: /user
    method: GET
    data_selector: events
- name: notifications
  endpoint:
    path: /user/notification
    method: GET
    data_selector: events
- name: federated_timeline
  endpoint:
    path: /api/v1/streaming/public
    method: GET
    data_selector: update
    params:
      only_media: boolean
- name: local_timeline
  endpoint:
    path: /api/v1/streaming/public/local
    method: GET
    data_selector: update
    params:
      only_media: boolean
- name: public_remote_statuses
  endpoint:
    path: /api/v1/streaming/public/remote
    method: GET
- name: hashtag_statuses
  endpoint:
    path: /api/v1/streaming/hashtag
    method: GET
    params:
      tag: required String
- name: local_hashtag
  endpoint:
    path: /streaming/hashtag/local
    method: GET
- name: list
  endpoint:
    path: /streaming/list
    method: GET
- name: direct_messages
  endpoint:
    path: /streaming/direct
    method: GET
- name: events
  endpoint:
    path: /api/v1/streaming
    method: GET
    data_selector: stream
    params: {}
- name: unread_count
  endpoint:
    path: /notifications/unread_count
    method: GET
    data_selector: count
    params:
      limit: 1000
- name: grouped_notifications
  endpoint:
    path: /api/v2/notifications
    method: GET
    data_selector: notification_groups
    params:
      limit: '40'
- name: single_notification_group
  endpoint:
    path: /api/v2/notifications/:group_key
    method: GET
    data_selector: notification_groups
    params: {}
- name: dismiss_notification_group
  endpoint:
    path: /api/v2/notifications/:group_key/dismiss
    method: POST
    data_selector: ''
    params: {}
- name: group_accounts
  endpoint:
    path: /api/v2/notifications/:group_key/accounts
    method: GET
    data_selector: accounts
    params: {}
- name: filtering_policy
  endpoint:
    path: /api/v2/notifications/policy
    method: GET
    data_selector: NotificationPolicy
- name: notification_requests
  endpoint:
    path: /api/v1/notifications/requests
    method: GET
    data_selector: NotificationRequest
- name: single_notification_request
  endpoint:
    path: /api/v1/notifications/requests/:id
    method: GET
    data_selector: NotificationRequest
- name: accept_notification_request
  endpoint:
    path: /api/v1/notifications/requests/:id/accept
    method: POST
- name: dismiss_notification_request
  endpoint:
    path: /api/v1/notifications/requests/:id/dismiss
    method: POST
- name: check_merged_notifications
  endpoint:
    path: /api/v1/notifications/requests/merged
    method: GET
- name: get_all_notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
    data_selector: notifications
    params:
      limit: 40
- name: get_single_notification
  endpoint:
    path: /api/v1/notifications/:id
    method: GET
    data_selector: notification
- name: dismiss_all_notifications
  endpoint:
    path: /api/v1/notifications/clear
    method: POST
- name: dismiss_single_notification
  endpoint:
    path: /api/v1/notifications/:id/dismiss
    method: POST
- name: get_unread_count
  endpoint:
    path: /api/v1/notifications/unread_count
    method: GET
- name: push_subscription
  endpoint:
    path: /api/v1/push/subscription
    method: POST
    data_selector: WebPushSubscription
- name: get_current_subscription
  endpoint:
    path: /api/v1/push/subscription
    method: GET
    data_selector: WebPushSubscription
- name: change_notification_types
  endpoint:
    path: /api/v1/push/subscription
    method: PUT
    data_selector: WebPushSubscription
- name: remove_current_subscription
  endpoint:
    path: /api/v1/push/subscription
    method: DELETE
    data_selector: ''
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: Search
    params:
      q: ''
      type: ''
      resolve: ''
      following: ''
      account_id: ''
      exclude_unreviewed: ''
      max_id: ''
      min_id: ''
      limit: 20
      offset: 0
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: status
    params: {}
- name: instance
  endpoint:
    path: /api/v1/instance
    method: GET
- name: instance
  endpoint:
    path: /api/v2/instance
    method: GET
    data_selector: Instance
    params: {}
- name: list_of_connected_domains
  endpoint:
    path: /api/v1/instance/peers
    method: GET
- name: weekly_activity
  endpoint:
    path: /api/v1/instance/activity
    method: GET
- name: list_of_rules
  endpoint:
    path: /api/v1/instance/rules
    method: GET
- name: view_moderated_servers
  endpoint:
    path: /api/v1/instance/domain_blocks
    method: GET
- name: view_extended_description
  endpoint:
    path: /api/v1/instance/extended_description
    method: GET
- name: view_privacy_policy
  endpoint:
    path: /api/v1/instance/privacy_policy
    method: GET
- name: view_terms_of_service
  endpoint:
    path: /api/v1/instance/terms_of_service
    method: GET
- name: view_translation_languages
  endpoint:
    path: /api/v1/instance/translation_languages
    method: GET
- name: trending_tags
  endpoint:
    path: /api/v1/trends/tags
    method: GET
    data_selector: tags
    params:
      limit: '10'
- name: trending_statuses
  endpoint:
    path: /api/v1/trends/statuses
    method: GET
    data_selector: statuses
    params:
      limit: '20'
- name: trending_links
  endpoint:
    path: /api/v1/trends/links
    method: GET
    data_selector: links
    params:
      limit: '10'
- name: directory
  endpoint:
    path: /api/v1/directory
    method: GET
    data_selector: accounts
    params:
      offset: ''
      limit: '40'
      order: active
      local: ''
- name: custom_emojis
  endpoint:
    path: /custom_emojis
    method: GET
    data_selector: Array of CustomEmoji
- name: announcements
  endpoint:
    path: /api/v1/announcements
    method: GET
    data_selector: Announcements
- name: dismiss_announcement
  endpoint:
    path: /api/v1/announcements/:id/dismiss
    method: POST
    data_selector: null
- name: add_reaction
  endpoint:
    path: /api/v1/announcements/:id/reactions/:name
    method: PUT
    data_selector: null
- name: remove_reaction
  endpoint:
    path: /api/v1/announcements/:id/reactions/:name
    method: DELETE
    data_selector: null
- name: accounts
  endpoint:
    path: /methods/accounts/
    method: GET
- name: admin_accounts
  endpoint:
    path: /methods/admin/accounts/
    method: GET
- name: admin_reports
  endpoint:
    path: /methods/admin/reports/
    method: GET
- name: admin_trends
  endpoint:
    path: /methods/admin/trends/
    method: GET
- name: identity_proofs
  endpoint:
    path: /api/proofs
    method: GET
    data_selector: custom response defined by provider
    params:
      provider: keybase
      username: String
- name: oembed
  endpoint:
    path: /oembed
    method: GET
    data_selector: metadata
    params:
      url: required
      maxwidth: Number
      maxheight: Number
- name: CredentialAccount
  endpoint:
    path: /accounts
    method: GET
    data_selector: records
- name: account
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: accounts
- name: account_warning
  endpoint:
    path: /entities/AccountWarning/
    method: GET
    data_selector: null
    params: {}
- name: admin_account
  endpoint:
    path: /admin/accounts
    method: GET
- name: canonical_email_block
  endpoint:
    path: /methods/admin/canonical_email_blocks
    method: GET
    data_selector: records
    params: {}
- name: cohort
  endpoint:
    path: /admin/cohort
    method: GET
    data_selector: data
    params: {}
- name: admin_dimensions
  endpoint:
    path: /methods/admin/dimensions/
    method: GET
    data_selector: data
    params: {}
- name: domain_allow
  endpoint:
    path: /admin/domain_allows
    method: GET
    data_selector: domain_allows
- name: domain_blocks
  endpoint:
    path: /admin/domain_blocks
    method: GET
    data_selector: domain_blocks
- name: email_domain_blocks
  endpoint:
    path: /admin/email_domain_blocks
    method: GET
    data_selector: records
- name: ip
  endpoint:
    path: /admin/ip_blocks
    method: GET
    data_selector: ip
    params: {}
- name: ip_block
  endpoint:
    path: /admin/ip_blocks
    method: GET
    data_selector: records
    params: {}
- name: measure
  endpoint:
    path: /admin/measures
    method: GET
    data_selector: data
- name: tag_uses
  endpoint:
    path: /admin/measure/tag_uses
    method: GET
    data_selector: data
    params: {}
- name: tag_servers
  endpoint:
    path: /admin/measure/tag_servers
    method: GET
    data_selector: data
    params: {}
- name: instance_accounts
  endpoint:
    path: /admin/measure/instance_accounts
    method: GET
    data_selector: data
    params: {}
- name: instance_media_attachments
  endpoint:
    path: /admin/measure/instance_media_attachments
    method: GET
    data_selector: data
    params: {}
- name: instance_reports
  endpoint:
    path: /admin/measure/instance_reports
    method: GET
    data_selector: data
    params: {}
- name: instance_statuses
  endpoint:
    path: /admin/measure/instance_statuses
    method: GET
    data_selector: data
    params: {}
- name: instance_follows
  endpoint:
    path: /admin/measure/instance_follows
    method: GET
    data_selector: data
    params: {}
- name: instance_followers
  endpoint:
    path: /admin/measure/instance_followers
    method: GET
    data_selector: data
    params: {}
- name: admin_report
  endpoint:
    path: /admin/reports
    method: GET
    data_selector: reports
- name: announcement
  endpoint:
    path: /methods/announcements/
    method: GET
    data_selector: announcements
- name: appeal
  endpoint:
    path: /entities/Appeal
    method: GET
    data_selector: appeal
    params: {}
- name: apps
  endpoint:
    path: /api/v1/apps
    method: POST
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
- name: context
  endpoint:
    path: /api/v1/statuses/:id/context
    method: GET
    data_selector: ancestors, descendants
- name: conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: conversations
- name: custom_emojis
  endpoint:
    path: /api/v1/custom_emojis
    method: GET
    data_selector: emojis
    params: {}
- name: domain_block
  endpoint:
    path: /api/v1/instance/domain_blocks
    method: GET
    data_selector: domain_blocks
- name: extended_description
  endpoint:
    path: /api/v1/instance/extended_description
    method: GET
    data_selector: content
- name: familiar_followers
  endpoint:
    path: /api/v1/accounts/:id/familiar_followers
    method: GET
    data_selector: accounts
- name: featured_tags
  endpoint:
    path: /methods/featured_tags/
    method: GET
    data_selector: featured_tags
    params: {}
- name: filter
  endpoint:
    path: /api/v2/filters
    method: GET
    data_selector: filters
- name: filter_keyword
  endpoint:
    path: /api/v2/filters
    method: GET
    data_selector: filter_keywords
    params: {}
- name: filter_result
  endpoint:
    path: /api/v2/filters
    method: GET
    data_selector: filter_results
    params: {}
- name: filter_status
  endpoint:
    path: /api/v2/filters
    method: GET
    data_selector: data
    params: {}
- name: identity_proofs
  endpoint:
    path: /api/v1/accounts/:id/identity_proofs
    method: GET
    data_selector: identity_proofs
- name: instance
  endpoint:
    path: /api/v2/instance
    method: GET
    data_selector: instance
    params: {}
- name: instance
  endpoint:
    path: /api/v1/instance
    method: GET
- name: list
  endpoint:
    path: /api/v1/accounts/:id/lists
    method: GET
    data_selector: lists
    params: {}
- name: marker
  endpoint:
    path: /methods/markers/
    method: GET
    data_selector: last_read_id
    params: {}
- name: media_attachment
  endpoint:
    path: /api/media_attachments
    method: GET
    data_selector: media_attachments
    params: {}
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
    data_selector: notifications
- name: notification_policy
  endpoint:
    path: /methods/notifications/
    method: GET
    data_selector: notification_policy
- name: notification_request
  endpoint:
    path: /methods/notifications/
    method: GET
    data_selector: notifications
    params: {}
- name: poll
  endpoint:
    path: /entities/Poll/
    method: GET
    data_selector: data
    params: {}
- name: preferences
  endpoint:
    path: /methods/preferences/
    method: GET
    data_selector: attributes
    params: {}
- name: PreviewCard
  endpoint:
    path: /api/preview_card
    method: GET
    data_selector: preview_cards
    params: {}
- name: preview_card_author
  endpoint:
    path: /entities/PreviewCardAuthor
    method: GET
    data_selector: attributes
- name: privacy_policy
  endpoint:
    path: /api/v1/instance/privacy_policy
    method: GET
    data_selector: privacy_policy
- name: quote
  endpoint:
    path: /api/v1/quotes
    method: GET
    data_selector: quotes
- name: reaction
  endpoint:
    path: /methods/announcements/
    method: PUT
    data_selector: reactions
    params: {}
- name: relationship
  endpoint:
    path: /api/v1/accounts/relationships
    method: GET
    data_selector: relationships
    params: {}
- name: relationship_severance_event
  endpoint:
    path: /api/v1/relationship_severance_event
    method: GET
    data_selector: data
    params: {}
- name: report
  endpoint:
    path: /api/v1/reports
    method: GET
    data_selector: reports
- name: role
  endpoint:
    path: /entities/Role/
    method: GET
    data_selector: records
- name: rules
  endpoint:
    path: /api/v1/instance/rules
    method: GET
    data_selector: rules
- name: scheduled_statuses
  endpoint:
    path: /api/v1/scheduled_statuses
    method: GET
    data_selector: records
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: accounts, statuses, hashtags
- name: shallow_quote
  endpoint:
    path: /api/v1/shallow_quote
    method: GET
    data_selector: state
    params: {}
- name: statuses
  endpoint:
    path: /api/v1/accounts/:id/statuses
    method: GET
- name: search
  endpoint:
    path: /api/v2/search/
    method: POST
- name: status
  endpoint:
    path: /api/v1/statuses
    method: GET
    data_selector: statuses
- name: status_edit
  endpoint:
    path: /api/v1/statuses/:id/history
    method: GET
    data_selector: records
- name: source
  endpoint:
    path: /api/v1/statuses/:id/source
    method: GET
    data_selector: source
- name: suggestion
  endpoint:
    path: /api/v2/suggestions
    method: GET
- name: tags
  endpoint:
    path: /api/v1/tags
    method: GET
    data_selector: tags
- name: terms_of_service
  endpoint:
    path: /api/v1/instance/terms_of_service
    method: GET
    data_selector: terms_of_service
    params: {}
- name: translation
  endpoint:
    path: /api/v1/statuses/:id/translate
    method: POST
    data_selector: translation
    params: {}
- name: filter
  endpoint:
    path: /methods/filters/
    method: GET
    data_selector: filters
    params: {}
- name: notification_policy
  endpoint:
    path: /entities/V1_NotificationPolicy/
    method: GET
    data_selector: notification_policy
- name: web_push_subscription
  endpoint:
    path: /entities/WebPushSubscription
    method: GET
    data_selector: alerts
    params: {}
notes:
- Explicit form-encoded; allows for multipart data
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Character limit for status updates is 500 characters.
- Links must start with http(s):// and are counted as 23 characters.
- Filters can have an expiry date, specific contexts, server-side visibility options,
  and use word boundaries.
- You can choose to feature certain hashtags that you use often.
- You can choose to feature up to 5 of your own public posts at the top of your profile.
- Posts default to public privacy.
- If you opt out of search engine indexing, a noindex flag will be added to your public
  profile and status pages.
- Requesting an archive of your posts and media can be done once every 7 days.
- Mastodon currently does not support importing posts or media due to technical limitations.
- Providing a public internet service involves moderation work and community management.
- Uses OAuth2 authentication.
- You will be running the commands as root.
- Replace example.com with your own domain before running any commands.
- Metrics in the Prometheus format are always enabled for the streaming server, and
  can be accessed at http://streaming-server-host:port/metrics
- Some objects like Contact may return nulls in deeply nested fields
- Mastodon requires careful configuration of domains.
- Mastodon’s full-text search allows logged-in users to find results from public statuses
  from accounts that opted into appearing in search results, their own statuses, their
  mentions, their favourites, their bookmarks, accounts (display name, usernames and
  bios)
- Mastodon supports full-text search when Elasticsearch is available.
- It is strongly recommended to configure Elasticsearch for optimal search functionality.
- Make sure you know exactly what you are doing before running commands.
- Commands may require confirmation.
- Mastodon will automatically check for available updates and notify the users of
  your server that have the DevOps permission.
- The best backups are off-site backups.
- Application secrets are easiest to back up since they never change.
- This guide was written with Ubuntu Server in mind; your mileage may vary for other
  setups.
- Mastodon requires a different pooling mode than the default session-based one.
- Redis is used widely throughout the application, but some uses are more important
  than others.
- Moderation in Mastodon is always applied locally.
- As of v3.5.0, all default user moderation decisions will notify the affected user
  by email.
- The X-Hub-Signature header can be used to verify payload authenticity.
- Specific details of server-side errors are never displayed to the public.
- Each response from Mastodon’s web server carries a header with a unique request
  ID.
- Roles are derived from the values present in ~/config/roles.yml
- Duplicate role names can exist, discerned by their id
- Client ID and secret are required for OAuth authorization.
- The access token must be treated like a password.
- Default value of RAILS_ENV is development
- An admin account with the e-mail admin@localhost:3000 and password mastodonadmin
  is created automatically during db:seed
- Mastodon will run on port 3000 by default.
- You can reset the VM with 'vagrant destroy' and 'vagrant up'.
- Uses OAuth2 for authentication.
- When a Mastodon server runs in secure mode, all cross-server HTTP requests to it
  must be signed.
- Mastodon uses a decentralized protocol based on ActivityPub.
- WebFinger is required for fully interoperating with Mastodon.
- Mastodon requires the use of HTTP signatures in order to validate that any activity
  received was authored by the actor generating it.
- HTTP Message Signatures are supported since version 4.4.0.
- As of v4.0.0, HTML permalinks for statuses and profiles have been deprecated and
  removed from Mastodon.
- Mastodon only supports confidential clients.
- Bearcaps allow for a way to link to a resource with the token included
- Decentralization must be transparent to the user.
- Plain text is not available for content from remote servers.
- We recommend that you request the most limited scopes as possible for your application.
- An API method can be subject to multiple overlapping rate limits. The headers return
  information about the one you are closest to exceeding.
- Mastodon only supports provisioning confidential clients, providing a client_secret.
- Uses OAuth2 with authorization code flow
- Use HTTP Link header for pagination.
- Users must provide a valid Bearer token to access the API methods.
- Use server-sent events for real-time updates via a long-lived HTTP connection.
- User token + read:statuses + read:notifications required for OAuth.
- Changed to require a User token, removing Public and App token access
- Requires a User token, removing Public and App token access
- Requires User token with read:statuses scope
- Requires a user token with 'read' or 'read:statuses' and/or 'read:notifications'
  permissions.
- Notifications are aggregated server-side to reduce payload size.
- Without a valid user token, you cannot use the resolve or offset parameters.
- Responses other than HTTP 200 should be interpreted as some element of the web process
  not being healthy.
- OAuth is public for accessing trends.
- 'OAuth: Public'
- Each site can define and upload its own custom emoji to be attached to profiles
  or statuses.
- Identity proofs have been deprecated in 3.5.0 and newer.
- Public OAuth
- Profile bio is provided in plain text instead of HTML.
- Some fields may return null if not applicable.
- Uses OAuth2 for authentication
- Moderation warning against a particular account.
- Requires setup of connected app in Mastodon
- Represents a canonical email block (hashed)
- Represents a retention metric.
- This API represents qualitative data about the server.
- Represents a domain allowed to federate.
- Domain block represents a domain limited from federating.
- Represents an IP address range that cannot be used to sign up.
- Represents quantitative data about the server.
- Admin-level information about a filed report
- Ensure proper OAuth setup to access announcements.
- Appeal against a moderation action.
- Represents the tree around a given status. Used for reconstructing threads of statuses.
- The ID of the conversation is a string cast from an integer.
- Represents a domain that is blocked by the instance.
- Requires setup of OAuth for API access
- Represents a user-defined filter for determining which statuses should not be shown
  to the user.
- Represents a keyword that, if matched, should cause the filter action to be taken.
- Represents a filter whose keywords matched a given status.
- Uses OAuth2
- Represents a list of some users that the authenticated user follows.
- Represents the last read position within a user's timelines.
- Represents a file or media attachment that can be added to a status.
- Represents a notification of an event relevant to the user.
- Represents the notification filtering policy of the user.
- Represents a group of filtered notifications from a specific user.
- Represents a poll attached to a status.
- Represents a user's preferences.
- Represents a rich preview card that is generated using OpenGraph tags from a URL.
- The original resource author’s name replaces the deprecated author_name attribute.
- A link to the author of the original resource replaces the deprecated author_url
  attribute.
- This document is CC-BY-SA. Originally adapted from the Discourse privacy policy.
- The state of the quote can vary (pending, accepted, rejected, revoked, deleted,
  unauthorized).
- Represents an emoji reaction to an Announcement.
- Represents the relationship between accounts, such as following / blocking / muting
  / etc.
- Summary of a moderation or block event that caused follow relationships to be severed.
- Reports filed against users and/or statuses, to be taken action on by moderators.
- Represents a custom user role that grants permissions.
- Represents a rule that server users should follow.
- Represents a status that will be published at a future scheduled date.
- v1/search deprecated because it returns Array of String. v2/search added which returns
  Array of Tag.
- v1/search removed in version 3.0.0
- Represents a quote or a quote placeholder, with the current authorization status.
- Requires OAuth for accessing user-specific endpoints.
- Represents a revision of a status that has been edited.
- Represents a status's source as plain text.
- API supports OAuth2 for authentication.
- Terms of service may have a content field that is rendered HTML.
- This version of the notification filtering policy API is deprecated and has not
  shipped in any release.
- Represents a subscription to the push streaming server.
- Mastodon使用ActivityPub协议实现站点之间的互动
errors:
- '401 Unauthorized: Your request was not correct'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '403 Forbidden: You do not have permission to perform this action.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify authentication tokens.'
- Elasticsearch crashes if JVM memory allocation is insufficient during index creation.
- Increased load on your server as disconnected clients attempt to reconnect or poll
  the REST API instead.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'ActiveRecord::ConcurrentMigrationError: Failed to release advisory lock'
- Role priority must be <= 999
- Higher role decides conflict resolution in certain situations
- '401 Unauthorized: Check if the access token is valid.'
- '403 Forbidden: Ensure the token has the required scopes.'
- '500 Internal Server Error: Check server logs for details'
- '401 Unauthorized: Recheck OAuth token.'
- '404 Not Found: Check the endpoint URL.'
- '404 Not Found: The requested resource could not be found.'
- '401 Unauthorized: The request requires user authentication.'
- 'REQUIRE_SIGNATURE: Ensure that requests are signed with required HTTP signatures.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- 'X-RateLimit-Limit: Number of requests permitted per time period'
- 'X-RateLimit-Remaining: Number of requests you can still make'
- 'X-RateLimit-Reset: Timestamp when your rate limit will reset'
- '422: Unprocessable entity: Validation failed: Redirect URI must be an absolute
  URI.'
- '401: Unauthorized: The access token is invalid'
- '404 Not Found: Older Mastodon Versions'
- 'invalid_grant: The provided authorization grant is invalid, expired, revoked, does
  not match the redirection URI used in the authorization request, or was issued to
  another client.'
- 'invalid_scope: The requested scope is invalid, unknown, or malformed.'
- 'invalid_client: Client authentication failed due to unknown client, no client authentication
  included, or unsupported authentication method.'
- The access token is invalid
- This action is outside the authorized scopes
- '403: Forbidden: This method is only available to the application the user originally
  signed-up with'
- '403: Forbidden: This method is only available while the e-mail is awaiting confirmation'
- '401: The access token is invalid'
- '403: Your login is currently disabled'
- '403: Your login is missing a confirmed e-mail address'
- '403: Your login is currently pending approval'
- '422: This method requires an authenticated user'
- '401 Unauthorized: This API requires an authenticated user'
- '404 Not found: Record not found'
- '410 Gone: Account is suspended'
- '422: Unprocessable entity: Validation failed'
- 'ERR_BLOCKED: When e-mail provider is not allowed'
- 'ERR_UNREACHABLE: When e-mail address does not resolve'
- 'ERR_TAKEN: When username or e-mail are already taken'
- 'ERR_RESERVED: When a username is reserved'
- 'ERR_ACCEPTED: When agreement has not been accepted'
- 'ERR_BLANK: When a required attribute is blank'
- 'ERR_INVALID: When an attribute is malformed'
- 'ERR_TOO_LONG: When an attribute is over the character limit'
- 'ERR_TOO_SHORT: When an attribute is under the character requirement'
- 'ERR_INCLUSION: When an attribute is not one of the allowed values'
- '429: Rate limited: Too many requests'
- '401 Unauthorized: The access token is invalid'
- '403 Forbidden: This action is outside the authorized scopes'
- '422 Unprocessable entity: This method requires an authenticated user'
- '503 Service Unavailable: Remote data could not be fetched'
- '401 Unauthorized: Invalid or missing Authorization header'
- '404 Not found: Account does not exist'
- '422 Unprocessable entity: Token does not have an authorized user'
- '401 Unauthorized: Invalid or missing Authorization header.'
- '401: Unauthorized'
- '422: Unprocessable entity'
- '404: Not found'
- '401: Unauthorized - The access token is invalid.'
- '404: Not found - Record not found.'
- '422: Unprocessable entity - Validation failed: Keyword can''t be blank.'
- '404 Not found: No pending follow request from that account ID'
- '401: Unauthorized: Invalid or missing Authorization header.'
- '422: Unprocessable entity: Validation failed: Tag is invalid'
- '404: Not found: FeaturedTag is not owned by you or does not exist'
- '422: Unprocessable entity: Tag was already followed'
- '401: Unauthorized: Invalid or missing Authorization header'
- '422 Unprocessable entity: Validation failed: Text can''t be blank.'
- '404 Not found: Status does not exist or is private.'
- '422 Unprocessable entity: Validation failed: File content type is invalid, File
  is invalid'
- '422 Unprocessable entity: File or file type is unsupported or invalid'
- '404 Not found: MediaAttachment is not owned by you or does not exist'
- '404: Record not found'
- '422: Validation failed: The poll has already ended'
- 'Validation failed: You have already voted on this poll'
- '404 Not found: ScheduledStatus is not owned by you or does not exist.'
- '422 Unprocessable entity: Validation failed: Scheduled at The scheduled date must
  be in the future.'
- '404 Not found: The conversation does not exist, or is not owned by you.'
- '404: Not found: List does not exist or is not owned by you.'
- '422: Unprocessable entity: Validation failed: Title can''t be blank.'
- '409: Conflict'
- '401 Unauthorized: Invalid access token provided.'
- '404 Not found: A PushSubscription does not exist for this token.'
- '401 Unauthorized: If the server is in whitelist mode and the Authorization header
  is missing or invalid'
- '404: Not found - No identity proof found for username on provider'
- '400 Bad Request: Check the request parameters.'
- '404 Not Found: Resource does not exist.'
- '400 - Bad request: {string}. Appears when a required parameter is missing from
  the API call.'
- '401 - Unauthorized: This API requires an authenticated user. Appears when the instance
  is in secure mode, which disables all public use of API methods.'
- '403 - Forbidden: This action is not allowed. Appears when trying to call a method
  that you do not have permission for (such as admin or staff methods), or performing
  actions you are not allowed to do (such as following a user that blocks you).'
- '404 - Not found: Record not found. Appears when an entity record does not exist,
  or the authorized user is not within the audience of a private entity.'
- '422 - Unprocessable entity: {string}. May appear when entity creation failed.'
- '429 - Too many requests: {translated string}. Appears when you have exceeded the
  rate limit.'
- '503 - Remote service unavailable: Remote data could not be fetched. Appears when
  Mastodon calls a remote service which returns an error.'
- '401 Unauthorized: The quote cannot be displayed because the user is not authorized
  to see it.'
- '401 Unauthorized: Invalid or expired token.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Ensure your token is valid.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Token
  - Application
  - Account
  - Access Token
  - CredentialApplication
  - UserToken
  - User token
  - Filter
  - FilterKeyword
  - Relationship
  - Poll
  - Conversation
  - Notification
  - NotificationPolicy
  - Appeal
  - Admin::Ip
  - Admin::Account
  - CustomEmoji
  - Status
  - MediaAttachment
  - Quote
  - ShallowQuote
client:
  base_url: https://mastodon.example
  auth:
    type: oauth2
source_metadata: null
