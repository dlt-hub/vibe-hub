resources:
- name: me
  endpoint:
    path: /me
    method: GET
- name: schedules
  endpoint:
    path: /api/schedules
    method: GET
    params:
      location_ids: ''
      space_ids: ''
- name: Groups
  endpoint:
    path: /scim-2/Groups
    method: DELETE
- name: user_events
  endpoint:
    path: /users//events
    method: GET
- name: locations
  endpoint:
    path: /organizations/:id/locations
    method: GET
    data_selector: locations
- name: auth
  endpoint:
    path: /auth
    method: GET
- name: account
  endpoint:
    path: /accounts
    method: GET
    data_selector: accounts
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: Organization
- name: events
  endpoint:
    path: /events/:id
    method: DELETE
- name: seats_settings
  endpoint:
    path: /seats//settings/
    method: GET
    data_selector: setting_slug
    params: {}
- name: Users
  endpoint:
    path: /scim-2/Users
    method: POST
- name: Groups
  endpoint:
    path: /scim-2/Groups/
    method: PATCH
- name: seats
  endpoint:
    path: /spaces//seats
    method: GET
    data_selector: seats
- name: users
  endpoint:
    path: /users/:id
    method: GET
- name: organizations
  endpoint:
    path: /organizations/:id
    method: GET
- name: locations
  endpoint:
    path: /organizations/:id/locations
    method: GET
- name: events
  endpoint:
    path: /spaces/{id}/events
    method: GET
- name: spaces_presence
  endpoint:
    path: /v1.0/spaces/:id/presence
    method: GET
- name: event
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: presence
  endpoint:
    path: /spaces//presence
    method: DELETE
- name: organizations
  endpoint:
    path: /organizations/:id
    method: GET
- name: locations
  endpoint:
    path: /organizations/:id/locations
    method: GET
- name: users
  endpoint:
    path: /organizations/:id/users
    method: GET
- name: events
  endpoint:
    path: /events/:id
    method: GET
- name: spaces
  endpoint:
    path: /locations/:id/spaces
    method: GET
- name: desk
  endpoint:
    path: /desks
    method: GET
    data_selector: desks
- name: desk_settings
  endpoint:
    path: /desk_settings
    method: GET
    data_selector: desk_settings
- name: location
  endpoint:
    path: /locations
    method: GET
    data_selector: records
    params: {}
- name: badge_events
  endpoint:
    path: /v1.0/connectors/YOUR_CONNECTOR_UUID/presence
    method: POST
    data_selector: events
    params: {}
- name: current_presence
  endpoint:
    path: /presence/current
    method: GET
    data_selector: sessions
- name: Users
  endpoint:
    path: /scim-2/Users
    method: GET
- name: groups
  endpoint:
    path: /scim-2/Groups
    method: GET
- name: spaces
  endpoint:
    path: /locations//spaces
    method: GET
    data_selector: spaces
    params:
      include: ''
- name: presence
  endpoint:
    path: /locations//presence
    method: POST
- name: reservation
  endpoint:
    path: /api/v1/reservations
    method: GET
    data_selector: reservations
- name: Users
  endpoint:
    path: /scim-2/Users/
    method: PUT
- name: device
  endpoint:
    path: /devices
    method: GET
    data_selector: devices
    params:
      incremental: updated_at
- name: presence
  endpoint:
    path: /v1.0/spaces//presence
    method: GET
    data_selector: current presence sessions
    params: {}
- name: spaces
  endpoint:
    path: /locations//spaces
    method: POST
- name: spaces
  endpoint:
    path: /spaces/:id
    method: GET
    data_selector: data
    params: {}
- name: Groups
  endpoint:
    path: /scim-2/Groups
    method: POST
- name: space
  endpoint:
    path: /spaces
    method: GET
    data_selector: spaces
    params: {}
- name: presence
  endpoint:
    path: /spaces//presence
    method: DELETE
- name: space_state
  endpoint:
    path: /spaces//state
    method: GET
    data_selector: availability, present, next_busy_change
    params: {}
- name: groups
  endpoint:
    path: /scim-2/Groups/
    method: GET
- name: device
  endpoint:
    path: /devices
    method: GET
    data_selector: devices
    params:
      incremental: updated_at
- name: reservations
  endpoint:
    path: /reservations/seats/
    method: GET
- name: Users
  endpoint:
    path: /scim-2/Users/
    method: GET
- name: devices
  endpoint:
    path: /spaces//devices
    method: GET
- name: organization
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
- name: presence
  endpoint:
    path: /v1.0/me/presence
    method: GET
- name: presence
  endpoint:
    path: /spaces//presence
    method: POST
- name: presence
  endpoint:
    path: /presence
    method: POST
    data_selector: presence
    params: {}
- name: zone
  endpoint:
    path: /api/zones
    method: GET
    data_selector: zones
    params: {}
- name: organizations
  endpoint:
    path: /organizations/:id
    method: GET
- name: locations
  endpoint:
    path: /organizations/:id/locations
    method: GET
- name: users
  endpoint:
    path: /organizations/:id/users
    method: GET
- name: events
  endpoint:
    path: /events/:id
    method: GET
- name: zones
  endpoint:
    path: /zones/:id
    method: GET
- name: events
  endpoint:
    path: /me/events
    method: GET
- name: organization_events_export
  endpoint:
    path: /insights/exports/organizations/[:id]/spaces
    method: POST
- name: organization_desks_export
  endpoint:
    path: /insights/exports/organizations/[:id]/desks
    method: POST
- name: download_export
  endpoint:
    path: /insights/exports/[:id]
    method: GET
- name: seat_setting
  endpoint:
    path: /updates/seat_setting
    method: POST
    data_selector: setting
    params: {}
- name: organizations
  endpoint:
    path: /organizations/:id
    method: GET
- name: locations
  endpoint:
    path: /organizations/:id/locations
    method: GET
- name: users
  endpoint:
    path: /organizations/:id/users
    method: POST
- name: amenities
  endpoint:
    path: /organizations/:id/amenities
    method: GET
- name: events
  endpoint:
    path: /events/:id
    method: GET
- name: seats
  endpoint:
    path: /seats/:id
    method: GET
- name: device_manifests
  endpoint:
    path: /device-manifests
    method: GET
- name: FreeBusySpace
  endpoint:
    path: /freebusy/space
    method: GET
    data_selector: has_presence, space, busy
    params: {}
- name: FreeBusyUser
  endpoint:
    path: /freebusy/user
    method: GET
    data_selector: user, busy
    params: {}
notes:
- This endpoint requires tokens w/ access to the user. Organization tokens do not
  have permission to access their user's events.
- Authorization requires Access-Token
- The started_at and ended_at properties are deprecated and will soon be removed.
- Robin uses the terms desk and seat interchangeably.
- 'Timestamp Format: Ensure that the timestamp is provided in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).'
- 'Validation: The server will validate the structure of the payload. Make sure all
  required fields (email, timestamp, lockId) are present for each event.'
- 'Rate Limiting: Check your API rate limits to avoid hitting the maximum number of
  requests per minute.'
- Many endpoints support the inclusion of child entities (sub-resources) within a
  resource.
- In rare scenarios, sub-resources of sub-resources are allowed to be included as
  well.
- Presence should be posted at a heartbeat interval that is less than the provided
  TTL.
- If this behavior is detected, the access token at fault for the abuse may be revoked.
- Reservations can be of various types including hoteled, hot, assigned, shared, and
  reverse_hoteled.
- Exclusions allow users to share their desks on certain days.
- Events must be longer than five minutes.
- Double-check far future bookings.
- Robin will automatically check for existing scheduling conflicts when trying to
  book a new event.
- Robin will sync up to 3 months worth of events automatically for Google, and about
  a month for Microsoft calendars.
- The maximum allowed TTL is 20 minutes, however for the best results we recommend
  using a value less than 5 minutes.
- Polling should be done at 10 second or greater intervals.
errors:
- '400 BAD_REQUEST: There was an error in the request parameters. This error is most
  commonly send when trying to create or modify a resource with invalid attributes.'
- '401 UNAUTHORIZED: The Authorization header is missing or invalid.'
- '403 FORBIDDEN: The authorized entity is not permitted to view or modify a resource.'
- '404 NOT_FOUND: The resource does not exist.'
- '400 Bad Request: Returned if the specified connector uuid does not exist.'
- '404 Not Found: Returned if the specified connector uuid does not exist.'
- '500 Internal Server Error: Returned if an unexpected error occurs on the server.'
- '400 BAD_REQUEST: There was an error in the request parameters.'
- '201: Session created'
- '200: Session updated'
- '400: There are problems relating to the input parameters'
- '429: the request rate exceeds the prescribed limit of 30 POSTs per minute'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.robinpowered.com/v1.0
  auth:
    type: oauth2
    location: header
    header_name: Authorization
  headers:
    Authorization: Access-Token {{token}}
    Accept: application/json
    Content-Type: application/json
    Content-type: application/json
  resources:
  - name: seats_reservations
    endpoint:
      path: /seats//reservations
      method: POST
source_metadata: null
