resources:
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: id
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: models
  endpoint:
    path: /api-reference/endpoint/models-list
    method: GET
- name: api_keys
  endpoint:
    path: /api-reference/endpoint/manage-api-key-get
    method: GET
- name: organization_info
  endpoint:
    path: /api-reference/endpoint/manage-org-get
    method: GET
- name: chat_completions
  endpoint:
    path: /api/chat/completions
    method: POST
    data_selector: choices
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: data
- name: embeddings
  endpoint:
    path: /api/embeddings
    method: POST
    data_selector: data
- name: models
  endpoint:
    path: /api/models
    method: GET
    data_selector: data
- name: api_keys
  endpoint:
    path: /api/keys
    method: GET
    data_selector: data
- name: chat_completion
  endpoint:
    path: /api/chat/completions
    method: POST
    data_selector: choices
    params:
      stream: 'true'
- name: message
  endpoint:
    path: /api/messages
    method: POST
    data_selector: choices
    params: {}
- name: Fallback Policies
  endpoint:
    path: /api-reference/endpoint/fallback-policies
    method: GET
    data_selector: fallback_policy
    params: {}
- name: Fallback Policy
  endpoint:
    path: /api-keys
    method: GET
- name: Load Balancing Policy
  endpoint:
    path: /api-keys
    method: GET
- name: Load Balancing Policy
  endpoint:
    path: /api-keys
    method: GET
    data_selector: models
    params: {}
- name: api_key_list
  endpoint:
    path: /v1/manage/apikey
    method: GET
    data_selector: keys
    params: {}
- name: create_api_key
  endpoint:
    path: /v1/manage/apikey
    method: POST
    data_selector: key
    params: {}
- name: api_key_usage
  endpoint:
    path: /v1/manage/apikey/{id}
    method: GET
    data_selector: usage
    params: {}
- name: delete_api_key
  endpoint:
    path: /v1/manage/apikey/{id}
    method: DELETE
    data_selector: result
    params: {}
- name: update_api_key_limit
  endpoint:
    path: /v1/manage/apikey/{id}/limit
    method: POST
    data_selector: limit_status
    params: {}
- name: api_key
  endpoint:
    path: /v1/manage/apikey
    method: GET
- name: create_api_key
  endpoint:
    path: /v1/manage/apikey
    method: POST
- name: get_api_key_usage
  endpoint:
    path: /v1/manage/apikey/{id}
    method: GET
- name: delete_api_key
  endpoint:
    path: /v1/manage/apikey/{id}
    method: DELETE
- name: update_api_key_limit
  endpoint:
    path: /v1/manage/apikey/{id}/limit
    method: POST
- name: chat_completions
  endpoint:
    path: /api-reference/endpoint/chat-completions-create
    method: POST
- name: messages
  endpoint:
    path: /api-reference/endpoint/messages-create
    method: POST
- name: embeddings
  endpoint:
    path: /api-reference/endpoint/embeddings-create
    method: POST
- name: models
  endpoint:
    path: /api-reference/endpoint/models-list
    method: GET
- name: api_keys
  endpoint:
    path: /api-reference/endpoint/manage-api-key-get
    method: GET
- name: api_key_usage
  endpoint:
    path: /api-reference/endpoint/manage-api-key-get-usage
    method: GET
- name: organization_info
  endpoint:
    path: /api-reference/endpoint/manage-org-get
    method: GET
- name: prompt_library
  endpoint:
    path: /api/prompt-library
    method: GET
    data_selector: prompts
- name: Create Chat Completion
  endpoint:
    path: /api-reference/endpoint/chat-completions-create
    method: POST
- name: Create Message
  endpoint:
    path: /api-reference/endpoint/messages-create
    method: POST
- name: Create Embedding
  endpoint:
    path: /api-reference/endpoint/embeddings-create
    method: POST
- name: List Models
  endpoint:
    path: /api-reference/endpoint/models-list
    method: GET
- name: Get API Keys
  endpoint:
    path: /api-reference/endpoint/manage-api-key-get
    method: GET
- name: Create API Key
  endpoint:
    path: /api-reference/endpoint/manage-api-key-create
    method: POST
- name: Get API Key Usage
  endpoint:
    path: /api-reference/endpoint/manage-api-key-get-usage
    method: GET
- name: Update API Key Limit
  endpoint:
    path: /api-reference/endpoint/manage-api-key-update-limit
    method: POST
- name: Delete API Key
  endpoint:
    path: /api-reference/endpoint/manage-api-key-delete
    method: DEL
- name: Get Organization Info
  endpoint:
    path: /api-reference/endpoint/manage-org-get
    method: GET
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: feedback
  endpoint:
    path: /feedback/{request_id}
    method: POST
    data_selector: data
- name: feedback
  endpoint:
    path: /feedback/{request_id}
    method: POST
    data_selector: data
- name: user_management
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: group_management
  endpoint:
    path: /api/groups
    method: GET
    data_selector: groups
- name: groups
  endpoint:
    path: /api/groups
    method: GET
    data_selector: groups
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: api_keys
  endpoint:
    path: /api/api_keys
    method: GET
    data_selector: api_keys
- name: chat_completions
  endpoint:
    path: /api-reference/endpoint/chat-completions-create
    method: POST
- name: messages
  endpoint:
    path: /api-reference/endpoint/messages-create
    method: POST
- name: embeddings
  endpoint:
    path: /api-reference/endpoint/embeddings-create
    method: POST
- name: models
  endpoint:
    path: /api-reference/endpoint/models-list
    method: GET
- name: api_keys
  endpoint:
    path: /api-reference/endpoint/manage-api-key-get
    method: GET
- name: create_api_key
  endpoint:
    path: /api-reference/endpoint/manage-api-key-create
    method: POST
- name: api_key_usage
  endpoint:
    path: /api-reference/endpoint/manage-api-key-get-usage
    method: GET
- name: update_api_key_limit
  endpoint:
    path: /api-reference/endpoint/manage-api-key-update-limit
    method: POST
- name: delete_api_key
  endpoint:
    path: /api-reference/endpoint/manage-api-key-delete
    method: DEL
- name: organization_info
  endpoint:
    path: /api-reference/endpoint/manage-org-get
    method: GET
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: create_chat_completion
  endpoint:
    path: /api-reference/endpoint/chat-completions-create
    method: POST
    data_selector: response
    params: {}
- name: create_message
  endpoint:
    path: /api-reference/endpoint/messages-create
    method: POST
    data_selector: response
    params: {}
- name: create_embedding
  endpoint:
    path: /api-reference/endpoint/embeddings-create
    method: POST
    data_selector: response
    params: {}
- name: list_models
  endpoint:
    path: /api-reference/endpoint/models-list
    method: GET
    data_selector: models
    params: {}
- name: get_api_keys
  endpoint:
    path: /api-reference/endpoint/manage-api-key-get
    method: GET
    data_selector: api_keys
    params: {}
- name: create_api_key
  endpoint:
    path: /api-reference/endpoint/manage-api-key-create
    method: POST
    data_selector: api_key
    params: {}
- name: get_api_key_usage
  endpoint:
    path: /api-reference/endpoint/manage-api-key-get-usage
    method: GET
    data_selector: usage
    params: {}
- name: update_api_key_limit
  endpoint:
    path: /api-reference/endpoint/manage-api-key-update-limit
    method: POST
    data_selector: updated_limit
    params: {}
- name: delete_api_key
  endpoint:
    path: /api-reference/endpoint/manage-api-key-delete
    method: DEL
    data_selector: deleted_key
    params: {}
- name: get_organization_info
  endpoint:
    path: /api-reference/endpoint/manage-org-get
    method: GET
    data_selector: organization_info
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
- name: message
  endpoint:
    path: /messages
    method: POST
- name: embedding
  endpoint:
    path: /embeddings
    method: POST
- name: models
  endpoint:
    path: /models
    method: GET
- name: api_keys
  endpoint:
    path: /manage/api-keys
    method: GET
- name: organization_info
  endpoint:
    path: /manage/org
    method: GET
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
- name: create_message
  endpoint:
    path: /messages
    method: POST
    data_selector: content
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
    params: {}
- name: create_message
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
- name: models
  endpoint:
    path: /v1/models
    method: GET
    data_selector: data
- name: create_embedding
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
- name: api_keys
  endpoint:
    path: /v1/manage/apikey
    method: GET
    data_selector: keys
    params: {}
- name: models
  endpoint:
    path: /v1/models
    method: GET
    data_selector: data
- name: create_api_key
  endpoint:
    path: /v1/manage/apikey
    method: POST
    data_selector: ''
    params: {}
- name: api_keys
  endpoint:
    path: /v1/manage/apikey
    method: GET
    data_selector: keys
    params: {}
- name: api_key_usage
  endpoint:
    path: /v1/manage/apikey/{api_key_id}
    method: GET
    data_selector: completions_requests, spend
    params:
      start_date: '2025-01-01'
      end_date: '2025-01-31'
- name: create_api_key
  endpoint:
    path: /v1/manage/apikey
    method: POST
- name: update_api_key_limit
  endpoint:
    path: /v1/manage/apikey/{api_key_id}/limit
    method: POST
    data_selector: null
    params: {}
- name: get_api_key_usage
  endpoint:
    path: /v1/manage/apikey/{api_key_id}
    method: GET
    data_selector: ''
    params:
      start_date: '2025-01-01'
      end_date: '2025-01-31'
- name: delete_api_key
  endpoint:
    path: /v1/manage/apikey/{api_key_id}
    method: DELETE
    data_selector: null
    params: {}
- name: update_api_key_limit
  endpoint:
    path: /v1/manage/apikey/{api_key_id}/limit
    method: POST
    data_selector: null
    params: {}
- name: organization_info
  endpoint:
    path: /v1/manage/org
    method: GET
    data_selector: name
    params: {}
- name: delete_api_key
  endpoint:
    path: /v1/manage/apikey/{api_key_id}
    method: DELETE
- name: organization_info
  endpoint:
    path: /v1/manage/org
    method: GET
    data_selector: name
    params: {}
notes:
- Access any LLM through Requesty router
- More than 150 models available
- Always check if `delta.content` is not None before using it
- Content comes in small chunks that you may want to collect into a full response
- Function calls are also streamed and come through the `delta.function_call` property
- JSON object format works with all models supported by Requesty
- Some models may have different capabilities for complex structured outputs
- JSON schema is available for OpenAI and Anthropic models
- OpenAI does NOT share the actual reasoning tokens. You will not see them in the
  response.
- Deepseek reasoning models enable reasoning automatically, you don’t need to specify
  anything in the request to enable that.
- Use project-based limits for internal teams to maintain control.
- Use per-API key limits for external partners for simpler distribution.
- Requires an enterprise Requesty account and an API key with manage permissions.
- Enterprise Feature requires an enterprise Requesty account and an API key with manage
  permissions.
- 'Explicit control: auto_cache provides explicit control. true attempts to cache,
  false prevent caching for providers where cache writes incur extra costs.'
- 'Default behavior: If auto_cache is not specified in the requesty field, the caching
  behavior reverts to defaults.'
- 'Provider support: This flag is respected by providers/models where cache writes
  incur extra costs, e.g. Anthropic and Gemini.'
- 'Explicit Control: `auto_cache` provides explicit control. `true` attempts to cache,
  `false` prevent caching for providers where cache writes incur extra costs.'
- 'Default Behavior: If `auto_cache` is not specified in the `requesty` field, the
  caching behavior reverts to defaults.'
- 'Provider Support: This flag is respected by providers/models where cache writes
  incur extra costs, e.g. Anthropic and Gemini.'
- Reduce token usage by up to 90% with specialized optimizations
- The Prompt Library is your central hub for managing all prompt-related configurations.
- Establish naming conventions for your tags and metadata fields across your organization.
- You can POST feedback multiple times per request.
- Every subsequent call merges the new values.
- User spending limits help control costs while group assignments enable efficient
  access management and feature distribution.
- User Management allows administrators to manage organization members, control spending,
  and track user activity.
- Users can be organized into groups for easier management.
- Groups provide fine-grained control where admins can organize users logically while
  configuring sophisticated API key behaviors through features and policies.
- Approved Models provide organization-level control over which AI models your team
  members can access.
- Guardrails provide enterprise-grade data protection that automatically prevents
  sensitive information from being exposed through AI interactions.
- Approved Models provide organization-level control over which AI models your team
  members can access, ensuring compliance, cost control, and strategic model usage
  across your organization.
- RBAC provides comprehensive access management across the entire Requesty platform,
  ensuring users only see and access data appropriate to their organizational role
  and responsibilities.
- RBAC ensures that every user has the right level of access for their role while
  maintaining security and compliance across your organization’s AI infrastructure.
- Uses API key for authentication
- API Key must be valid and have access to the model
- Safely load your API key from environment variables
- Many of our users use the Requesty router for the Cline coding agent.
- Set your API key as an environment variable named REQUESTY_API_KEY
- Uses API key for authentication — requires setup of environment variable REQUESTY_API_KEY
- Set your Requesty API key
- Change the model parameter to any model, and you’re done!
- Uses Requesty router to access any LLM.
- For security, you should set your API key as an environment variable named exactly
  REQUESTY_API_KEY
- API key for authentication required
- Uses x-api-key for authentication.
- API key for authentication is required
errors:
- '400 Bad Request: Check the request format and parameters'
- '401 Unauthorized: Verify API key and permissions'
- '400 Bad Request: Check your request data'
- '401 Unauthorized: API key is missing or invalid'
- Wrap streaming code in try/except to handle potential connection issues
- The stream might end early if there are errors
- 'Error parsing response: Handle the error appropriately'
- Error parsing response
- 'Failed to submit feedback: {error_message}'
- 'HTTPError: Raises an HTTPError for bad responses (4xx or 5xx)'
- Some legitimate data may be masked if it contains patterns similar to sensitive
  information.
- 'REQUEST_BLOCKED: Request containing sensitive data was blocked'
- 'MASKING_TRIGGERED: Sensitive data was masked during processing'
- 'MODEL_NOT_FOUND: Ensure model ID format is correct'
- 'CONNECTION_ISSUES: Verify ANTHROPIC_BASE_URL and API key'
- 'Error: REQUESTY_API_KEY environment variable not set.'
- '401 Unauthorized: Recheck API key'
- '400: Bad Request (invalid parameters)'
- '401: Unauthorized (invalid API key)'
- '403: Forbidden (insufficient permissions)'
- '429: Rate Limited'
- '500: Internal Server Error'
- '400 Bad Request: Check input format and required fields'
- '401 Unauthorized: API key may be invalid or missing'
- 200 - Success
- 400 - Bad Request (invalid parameters)
- 401 - Unauthorized (invalid API key)
- 403 - Forbidden (insufficient permissions)
- 429 - Rate Limited
- 500 - Internal Server Error
- '401'
- '400 Bad Request: Check the input data and request format'
- '401 Unauthorized: Verify your API key'
- '403'
- '400 Bad Request: Check that all required fields are provided'
- '401 Unauthorized: Ensure the API key is valid'
- '403 Forbidden: Check permissions for the provided API key'
- '200: Monthly limit updated successfully'
- '403 Forbidden: Check permissions'
auth_info:
  mentioned_objects: []
client:
  base_url: https://router.requesty.ai/v1
  auth:
    type: apikey
  headers:
    HTTP-Referer: <YOUR_SITE_URL>
    X-Title: <YOUR_SITE_NAME>
source_metadata: null
