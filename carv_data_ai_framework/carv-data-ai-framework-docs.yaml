resources:
- name: explorer
  endpoint:
    path: /explorer
    method: GET
- name: wallet_account
  endpoint:
    path: /getAccountInfo
    method: GET
    data_selector: accountInfo
    params:
      address: pg.wallet.publicKey
- name: token_account
  endpoint:
    path: /getTokenAccountsByOwner
    method: GET
    data_selector: tokenAccounts.value
    params:
      owner: pg.wallet.publicKey
      programId: TOKEN_PROGRAM_ID
- name: basic_account
  endpoint:
    path: /getAccountInfo
    method: GET
    data_selector: accountInfo
    params: {}
- name: token_account
  endpoint:
    path: /getTokenAccountsByOwner
    method: GET
    data_selector: tokenAccounts
    params: {}
- name: program_accounts
  endpoint:
    path: /getProgramAccounts
    method: GET
    data_selector: accounts
    params: {}
- name: transfer
  endpoint:
    path: /transfer
    method: POST
    data_selector: transactionSignature
- name: transfer
  endpoint:
    path: /transfer
    method: POST
    data_selector: transaction
    params: {}
- name: Testnet RPC Node
  endpoint:
    path: /rpc
    method: GET
- name: Testnet Bridge
  endpoint:
    path: /bridge
    method: GET
- name: Testnet Explorer
  endpoint:
    path: /explorer
    method: GET
- name: testnet_rpc_node
  endpoint:
    path: /rpc
    method: GET
    data_selector: data
    params: {}
- name: testnet_bridge
  endpoint:
    path: /bridge
    method: GET
    data_selector: data
    params: {}
- name: testnet_explorer
  endpoint:
    path: /explorer
    method: GET
    data_selector: data
    params: {}
- name: token_info
  endpoint:
    path: /api/token/info
    method: GET
    data_selector: data
- name: user_balance
  endpoint:
    path: /api/user/balance
    method: GET
    data_selector: data
- name: token_info
  endpoint:
    path: /api/token/info
    method: GET
    data_selector: data
    params: {}
- name: user_balance
  endpoint:
    path: /api/user/balance
    method: GET
    data_selector: data
    params:
      user_id: query_user_id
- name: carvid
  endpoint:
    path: /v1
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: token_info
  endpoint:
    path: /api/token/info
    method: GET
    data_selector: data
    params: {}
- name: user_balance
  endpoint:
    path: /api/user/balance
    method: GET
    data_selector: data
    params: {}
- name: carvid
  endpoint:
    path: /v1
    method: GET
    data_selector: data
- name: carvid
  endpoint:
    path: /v1
    method: GET
    data_selector: data
    params: {}
- name: data_endpoint
  endpoint:
    path: /api/data
    method: GET
    data_selector: records
- name: token_info
  endpoint:
    path: /api/v1/token/info
    method: GET
    data_selector: data
    params: {}
- name: user_balance
  endpoint:
    path: /api/v1/user/balance
    method: GET
    data_selector: balance
    params: {}
- name: transactions
  endpoint:
    path: /eth/transactions
    method: GET
    data_selector: data
- name: transactions
  endpoint:
    path: /eth/transactions
    method: GET
    data_selector: data
    params:
      time_range: last_24_hours
- name: gas_price
  endpoint:
    path: /eth/gas_price
    method: GET
    data_selector: data
    params:
      time_range: last_3_days
- name: on_chain_data
  endpoint:
    path: /v1/on-chain-data
    method: GET
    data_selector: data
    params: {}
- name: query_execution
  endpoint:
    path: /d.a.t.a/framework/query
    method: POST
    data_selector: dataSources
- name: transactions
  endpoint:
    path: /eth/transactions
    method: POST
    data_selector: results
- name: token_transfers
  endpoint:
    path: /eth/token_transfers
    method: POST
    data_selector: results
- name: on_chain_data
  endpoint:
    path: /api/on-chain-data
    method: POST
    data_selector: dataSources
    params: {}
- name: news
  endpoint:
    path: /api/v1/news
    method: GET
- name: news
  endpoint:
    path: /api/news
    method: GET
- name: news
  endpoint:
    path: /ai-agent-backend/news
    method: GET
    data_selector: data.infos
    params: {}
- name: news
  endpoint:
    path: /api/v1/news
    method: GET
    data_selector: data
    params: {}
- name: sql_query
  endpoint:
    path: /ai-agent-backend/sql_query
    method: POST
    data_selector: data
    params: {}
- name: news
  endpoint:
    path: /news
    method: GET
- name: news
  endpoint:
    path: /ai-agent-backend/news
    method: GET
- name: sql_query_by_llm
  endpoint:
    path: /ai-agent-backend/sql_query_by_llm
    method: POST
    data_selector: data
- name: news
  endpoint:
    path: /news
    method: GET
    data_selector: articles
- name: sql_query
  endpoint:
    path: /ai-agent-backend/sql_query
    method: POST
    data_selector: data
    params: {}
- name: sql_query_by_llm
  endpoint:
    path: /ai-agent-backend/sql_query_by_llm
    method: POST
- name: news
  endpoint:
    path: /news
    method: GET
- name: sql_query_by_llm
  endpoint:
    path: /ai-agent-backend/sql_query_by_llm
    method: POST
- name: news
  endpoint:
    path: /news
    method: GET
- name: sql_query_by_llm
  endpoint:
    path: /ai-agent-backend/sql_query_by_llm
    method: POST
    data_selector: none
    params: {}
- name: sql_query_by_llm
  endpoint:
    path: /ai-agent-backend/sql_query_by_llm
    method: POST
- name: news
  endpoint:
    path: /news
    method: GET
- name: on_chain_transactions
  endpoint:
    path: /api/on_chain/transactions
    method: GET
    data_selector: data.rows
    params: {}
- name: sql_query_by_llm
  endpoint:
    path: /ai-agent-backend/sql_query_by_llm
    method: POST
    data_selector: null
    params:
      question: query
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data.rows
    params: {}
- name: news
  endpoint:
    path: /ai-agent-backend/news
    method: GET
    data_selector: data.infos
    params: {}
- name: news
  endpoint:
    path: /ai-agent-backend/news
    method: GET
    data_selector: data.infos
    params: {}
- name: token_info
  endpoint:
    path: /ai-agent-backend/token_info
    method: GET
    params:
      ticker: query
- name: token_info
  endpoint:
    path: /ai-agent-backend/token_info
    method: GET
    data_selector: data
    params:
      ticker: query
- name: user_balance
  endpoint:
    path: /ai-agent-backend/user_balance_by_twitter_id
    method: GET
    data_selector: data
    params:
      twitter_user_id: string
      chain_name: string
      token_ticker: string
- name: user_balance_by_discord_id
  endpoint:
    path: /ai-agent-backend/user_balance_by_discord_id
    method: GET
    params:
      discord_user_id: query
      chain_name: query
      token_ticker: query
- name: user_balance_by_twitter_id
  endpoint:
    path: /ai-agent-backend/user_balance_by_twitter_id
    method: GET
    params:
      twitter_user_id:
        location: query
        type: string
        required: false
        description: Twitter handle
      chain_name:
        location: query
        type: string
        required: false
        description: Blockchain name, e.g., "ethereum"
      token_ticker:
        location: query
        type: string
        required: false
        description: Token ticker, e.g., "ETH"
- name: user_balance
  endpoint:
    path: /user/balance
    method: GET
    data_selector: data
    params: {}
- name: player_profile
  endpoint:
    path: /player/profile
    method: GET
    data_selector: data
    params: {}
- name: nft_badges
  endpoint:
    path: /nft/badges
    method: GET
    data_selector: badges
    params: {}
- name: user_balance_by_discord_id
  endpoint:
    path: /user_balance_by_discord_id
    method: GET
    params:
      discord_user_id: query
      chain_name: query
      token_ticker: query
- name: API-Verified Quest (RESTFUL)
  endpoint:
    method: POST
- name: API-Verified Quest (GraphQL)
  endpoint:
    method: POST
- name: player_profile
  endpoint:
    path: /api/v1/player/profile
    method: GET
    data_selector: data
- name: nft_badges
  endpoint:
    path: /api/v1/nft/badges
    method: GET
    data_selector: badges
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: events
- name: gem_rewards
  endpoint:
    path: /api/v1/gem/rewards
    method: GET
    data_selector: rewards
- name: contract_addresses
  endpoint:
    path: /contract_addresses
    method: GET
    data_selector: contracts
    params: {}
- name: campaign_traffic
  endpoint:
    path: /api/v1/campaigns/traffic
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: user_insights
  endpoint:
    path: /api/v1/users/insights
    method: GET
    data_selector: data
    params: {}
- name: contract_addresses
  endpoint:
    path: /contract_addresses
    method: GET
    data_selector: contracts
- name: user_insights
  endpoint:
    path: /api/user/insights
    method: GET
    data_selector: data
    params: {}
- name: community_management
  endpoint:
    path: /api/community/management
    method: GET
    data_selector: data
    params: {}
- name: user_identity
  endpoint:
    path: /api/v1/user/identity
    method: GET
    data_selector: records
- name: eligibility
  endpoint:
    path: /eligibility
    method: GET
    data_selector: eligibility_criteria
    params: {}
- name: execution_options
  endpoint:
    path: /execution_options
    method: GET
    data_selector: options
    params: {}
- name: ERC 7231
  endpoint:
    path: /erc-7231
    method: GET
- name: verifier_nodes
  endpoint:
    path: /verifier_nodes
    method: POST
    data_selector: data
    params: {}
- name: verifier_nodes
  endpoint:
    path: /verifier-nodes
    method: GET
- name: verifier_node_sale_dynamics
  endpoint:
    path: /verifier-node-sale-dynamics
    method: GET
- name: node_mainnet_smart_contracts
  endpoint:
    path: /smart-contracts/node-mainnet
    method: GET
    data_selector: contracts
    params: {}
- name: public_node_sale_smart_contracts
  endpoint:
    path: /smart-contracts/public-node-sale
    method: GET
    data_selector: contracts
    params: {}
- name: verifier_nodes
  endpoint:
    path: /verifier_nodes
    method: GET
    data_selector: nodes
    params: {}
- name: verifier_nodes
  endpoint:
    path: /verifier-nodes
    method: GET
- name: delegation
  endpoint:
    path: /carv-ecosystem/verifier-nodes/delegation
    method: GET
    data_selector: delegators
    params: {}
- name: verifier_nodes
  endpoint:
    path: /verifier-nodes
    method: GET
- name: Node Mainnet Smart Contracts
  endpoint:
    path: /node-mainnet-smart-contracts
    method: GET
    data_selector: contracts
    params: {}
- name: Public Node Sale Smart Contract Addresses
  endpoint:
    path: /public-node-sale-smart-contract-addresses
    method: GET
    data_selector: sale_contracts
    params: {}
- name: data
  endpoint:
    path: /api/v1/data
    method: GET
    data_selector: records
    params: {}
- name: identity
  endpoint:
    path: /api/v1/identity
    method: GET
    data_selector: records
    params: {}
- name: verifier_node_rewards
  endpoint:
    path: /carv-ecosystem/verifier-nodes/node-rewards
    method: GET
    data_selector: rewards
    params: {}
- name: attestations
  endpoint:
    path: /attestations
    method: GET
    data_selector: records
- name: verifications
  endpoint:
    path: /verifications
    method: GET
    data_selector: records
- name: api_verified_quest_restful
  endpoint:
    path: /api-verified-quest/restful
    method: GET
    data_selector: records
- name: api_verified_quest_graphql
  endpoint:
    path: /api-verified-quest/graphql
    method: POST
    data_selector: data
- name: node_sales
  endpoint:
    path: /api/node_sales
    method: GET
    data_selector: sales_data
- name: whitelist_info
  endpoint:
    path: /api/whitelist_info
    method: GET
    data_selector: whitelist_data
- name: balanceOf
  endpoint:
    path: /balanceOf
    method: GET
    data_selector: balance
    params: {}
- name: balanceOfAt
  endpoint:
    path: /balanceOfAt
    method: GET
    data_selector: balance
    params: {}
- name: totalSupply
  endpoint:
    path: /totalSupply
    method: GET
    data_selector: supply
    params: {}
- name: totalSupplyAt
  endpoint:
    path: /totalSupplyAt
    method: GET
    data_selector: supply
    params: {}
- name: deposit
  endpoint:
    path: /deposit
    method: POST
    data_selector: transaction
    params: {}
- name: withdraw
  endpoint:
    path: /withdraw
    method: POST
    data_selector: transaction
    params: {}
- name: positions
  endpoint:
    path: /positions
    method: GET
    data_selector: positions
    params: {}
- name: nodes
  endpoint:
    path: /nodes
    method: GET
    data_selector: records
- name: community
  endpoint:
    path: /community
    method: GET
    data_selector: records
- name: balanceOf
  endpoint:
    path: /balanceOf
    method: GET
    data_selector: balance
    params: {}
- name: balanceOfAt
  endpoint:
    path: /balanceOfAt
    method: GET
    data_selector: balanceAt
    params: {}
- name: totalSupply
  endpoint:
    path: /totalSupply
    method: GET
    data_selector: totalSupply
    params: {}
- name: totalSupplyAt
  endpoint:
    path: /totalSupplyAt
    method: GET
    data_selector: totalSupplyAt
    params: {}
- name: deposit
  endpoint:
    path: /deposit
    method: POST
    data_selector: depositStatus
    params: {}
- name: withdraw
  endpoint:
    path: /withdraw
    method: POST
    data_selector: withdrawStatus
    params: {}
- name: positions
  endpoint:
    path: /positions
    method: GET
    data_selector: positionStatus
    params: {}
- name: token_address
  endpoint:
    path: /token/address
    method: GET
    data_selector: address
- name: supported_testnet_blockchains
  endpoint:
    path: /token/supported_blockchains
    method: GET
    data_selector: blockchains
- name: roles
  endpoint:
    path: /api/roles
    method: GET
    data_selector: roles
    params: {}
- name: token_distribution
  endpoint:
    path: /v1/token/distribution
    method: GET
    data_selector: data
    params: {}
- name: vesting_schedule
  endpoint:
    path: /v1/token/vesting
    method: GET
    data_selector: data
    params: {}
- name: token_address
  endpoint:
    path: /carv-token/carv-testnet-token
    method: GET
    data_selector: token_address
    params: {}
- name: bsc_testnet
  endpoint:
    path: /carv-token/carv-testnet-token
    method: GET
    data_selector: bsc_testnet
    params: {}
- name: base_testnet
  endpoint:
    path: /carv-token/carv-testnet-token
    method: GET
    data_selector: base_testnet
    params: {}
- name: ethereum_sepolia_testnet
  endpoint:
    path: /carv-token/carv-testnet-token
    method: GET
    data_selector: ethereum_sepolia_testnet
    params: {}
- name: community_events
  endpoint:
    path: /v1/community/events
    method: GET
    data_selector: events
    params: {}
- name: token_info
  endpoint:
    path: /api/token_info
    method: GET
    data_selector: data
    params: {}
- name: user_balance
  endpoint:
    path: /api/user_balance
    method: GET
    data_selector: data
    params: {}
notes:
- AI agents operate within a secure TEE environment, ensuring data privacy and security.
- AI agents can confidently execute tasks while adhering to strict data privacy and
  usage guarantees.
- Verifier Nodes are designed to validate decentralized identity and data attestations
  across Web2 and Web3 ecosystems.
- They validate both chain-level proofs and data privacy guarantees.
- Verifier Nodes validate decentralized identity and data attestations across Web2
  and Web3 ecosystems.
- They ensure the accuracy of identity claims and the integrity of data used in CARV’s
  decentralized identity solutions.
- You need to prepare a SVM wallet, Backpack wallet is recommended.
- Make sure you have rpc_url=https://rpc.testnet.carv.io/rpc in your URL so you can
  correctly bridge the token to the CARV SVM Chain.
- To withdraw token, you can simply switch the token pair.
- Local mode explorer requires developer mode or manual RPC endpoint setup
- Local mode explorer requires developer mode to be enabled or manual input of CARV's
  RPC endpoint.
- Set the RPC URL to CARV SVM Testnet using the command provided.
- Run the command to set the RPC URL to CARV SVM Testnet.
- Real-time monitoring is essential for responsive applications.
- Real-time monitoring for transaction and account changes is available.
- Transactions consist of instructions just like on Solana, benefiting from CARV’s
  Layer 2 architecture.
- D.A.T.A Framework enables AI agents to access enriched insights.
- Addresses data fragmentation, inefficiency, and lack of trust.
- AGI requires access to meaningful, secure, and actionable data.
- D.A.T.A Framework empowers AI agents with seamless access to high-quality on-chain
  and off-chain data.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- D.A.T.A agents can control their own wallet infrastructure.
- The framework delivers actionable on-chain insights to AI agents for real-time decision-making.
- D.A.T.A integrates off-chain data to enhance AI agents' understanding of on-chain
  activities.
- AI agents can execute on-chain transactions autonomously.
- Integration requires setup of connected app in CARV
- Requires setup of OAuth2 client for access
- Data may be rate-limited based on user account type
- By creating agents that are economically invested in their ecosystem's success
- Establish a new model for responsible AI development that naturally aligns with
  Web3's core principles of decentralization, transparency, and stakeholder value
- Guaranteed Privacy and Trustless Operation
- 'Trusted Execution Environments (TEE): Securely process sensitive data while ensuring
  privacy and preventing unauthorized access.'
- 'CARV Verifier Nodes: Validate the integrity of TEE attestations and zk-proofs,
  guaranteeing the trustworthiness of all AI agent operations and data usage.'
- Config will be overridden by the env vars.
- Some objects like Contact may return nulls in deeply nested fields
- Requires a valid OAuth2 setup for accessing API endpoints.
- Standardized message processing across platforms
- Requires setup of API key for access
- Users have full ownership and control of their data.
- Requires setup of OAuth application in CARV
- Requires setup of OAuth 2.0 credentials in the portal
- GraphQL API may have different query structures
- User queries can be processed to return structured responses.
- Some objects may return nulls in deeply nested fields
- Requires setup of OAuth2 for API access
- Some responses may have rate limiting
- The API supports both on-chain and off-chain data integration.
- Apply for a Test Authentication Token to access data.
- Uses a consistent response format for SQL queries executed against blockchain data
  sources.
- The D.A.T.A Framework empowers AI agents with real-time data-driven capabilities.
- Integrates on-chain and off-chain data.
- Designed to unlock a wide array of use cases, empowering AI agents with seamless
  access to both on-chain and off-chain data.
- Uses consistent response format for SQL queries and data retrieval
- Requires OAuth2 setup for authentication
- Uses OAuth2 with refresh token — requires setup of connected app in CARV
- Requires setup of connected app in CARV
- Requires authentication using OAuth2
- API supports both REST and GraphQL types
- Authentication is required for accessing data.
- Login token is required and should be provided in the Authorization header.
- The API returns on-chain transaction data.
- Requires setup of API access for OAuth2.
- Ensure that the Discord account is properly linked to a blockchain address via CARV
  ID before making a request.
- CARV Portal is the game distribution and data analytics tooling for games.
- Based on the on-chain and off-chain zero & first-party data from over 2.4M users
  across various platforms.
- CARV Play ensures gamer data privacy and sovereignty by converting all your gaming
  achievements into verifiable SBTs (Soul bound Tokens), storing your in-game achievements,
  memories, and journeys across all games and gaming platforms.
- Supports both RESTful API and GraphQL API for maximum compatibility with your current
  system.
- Contains various contract addresses deployed on multiple blockchains
- Allows games to provide their own verification API to check user completion status.
- Requires setup of OAuth 2.0 authentication.
- API rate limits may apply.
- Access to insights dashboard requires configuration through CARV Portal
- For details on contracts related to nodes (veCARV, Node License, etc), please refer
  to Smart Contract Addresses
- Various methods for verifying authenticity of identities, wallets, and accounts.
- Verifier nodes are lightweight nodes managed by the community.
- They play a crucial role in maintaining the protocol's integrity.
- Performance insights can be viewed via Insights Dashboard
- The CARV Verifier Node Sale will be on the Arbitrum Network.
- There will be a 0.1% fee applied to every transfer in addition to the network fees.
- Uses OAuth2 with refresh token — requires setup of connected app
- Participants who delegate their node must delegate only to nodes with a commission
  rate of up to 3% and maintain over 70% uptime.
- Node license holders will keep all airdrops prior to participation in the Program.
- Involves community-operated verifier nodes for security and privacy.
- They primarily check TEE attestations on-chain.
- Some API endpoints may have rate limits.
- 'Eligibility: Pre-Token Generation Event (TGE) Node license holders who have maintained
  70% or higher participation rate, and have not claimed any veCARV rewards will be
  eligible for the buyback program.'
- Participants who delegate their node, instead of running it independently, must
  delegate only to nodes with a commission rate of up to 3% and that maintain over
  70% uptime until the buyback claim is made.
- 'Timeline: From six months post Token Generation Event (TGE), node license holders
  have 7 days to participate in the Program.'
- For details on contracts other than those related to nodes, please refer to Smart
  Contracts & Security
- Community-operated verifier nodes are crucial for protocol security
- Anyone can operate verifiers to validate results for their own use, but only authorized
  verifiers possessing a License Key are entitled to engage in on-chain consensus
  and earn rewards.
- Node licenses are initially non-transferable.
- This is not a token sale. See https://carv.io/node-disclaimer for more details.
- The CARV test verifier is currently operational on the Arbitrum One network.
- Running a verifier node is crucial to maintaining the integrity and security of
  the data processing environment.
- There is an anti-sybil mechanism to protect the rights of users who participate
  honestly in the event.
- Delegators are advised to thoroughly evaluate potential NaaS providers.
- A reputation index is available to assist delegators in comparing node operators.
- API requires authorization for all endpoints
- Rate limits apply to all requests
- Verifier License holders are able to delegate their licenses using the explorer.
- API responses may vary based on user permissions
- veCARV is a non-transferable token.
- Users are required to pay a network channel fee of 1$ CARV each time they initiate
  a Redeem.
- Node sales start on June 3rd, 2024
- Only 100,000 nodes available in total
- The minimum period T should be between 1 day to 1 week.
- Once veCARV enters the redemption period, it will no longer be eligible to participate
  in governance voting.
- Tokens are subject to vesting schedules
- 'The initial amount of veCarv(s) a user receives is calculated as: the amount of
  CARV * staking duration * staking coefficient.'
- A user’s veCarv(s) balance will decay linearly over time.
- This token is strictly for testnet usage and has no real-world or mainnet value
- Faucet distributions or manual airdrops may be arranged upon request
- Ensure you’re connected to the correct testnet before initiating any operations
  with the token
- Requires setup of OAuth2 with CARV
- Ensure proper permissions are granted for API access
- Tokens are distributed over a four-year period
- Members who can’t vote actively can delegate their voting power to others (voting
  delegation).
- Community events are hosted weekly with varying themes.
- This is an early draft and may change based on community feedback.
- Some API calls may have rate limits that need to be considered
- Community events include game nights, beta testing, live streaming, AMAs, townhalls,
  pop-up quizzes, and fan-art competitions.
- Requires setup of connected app in api
- Please ensure that our logos are placed in an appropriate location where they can
  be easily identified. Also, ensure that our logos are not obscured or distorted
  in any way.
- Refer ongoing opportunities to build with CARV here
- AI agents need an identity system to prove who (and what) they are.
- Requires setup of connected app in API.
- CARV provides the habitat in which sovereign AI Beings can live, learn, and evolve.
- The D.A.T.A Framework is designed to empower AI agents with seamless access to high-quality
  on-chain and off-chain data.
- By addressing data fragmentation, inefficiency, and lack of trust, D.A.T.A. redefines
  how AGI interacts with the world.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Verify client credentials'
- '429 Too Many Requests: Slow down API calls'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'INVALID_GRANT: Ensure correct client credentials'
- '401 Unauthorized: Check token validity'
- '401 Unauthorized: Check API key'
- '401 Unauthorized: Check your OAuth token'
- '429 Too Many Requests: Rate limit exceeded'
- '404 Not Found: Verify endpoint paths'
- '500 Internal Server Error: Retry request'
- 'INVALID_REQUEST: Check your request parameters.'
- 'UNAUTHORIZED: Ensure valid authentication credentials.'
- '400 Bad Request: Check request parameters'
- '400 Bad Request: Invalid SQL query.'
- '400 Bad Request: Invalid request parameters'
- '401 Unauthorized: Check your token and permissions'
- '400 Bad Request: Ensure that all required fields are provided'
- '400 Bad Request: none'
- '400: Bad Request'
- '400 Bad Request: Invalid token ticker.'
- '400: Invalid request'
- Invalid request
- '401 Unauthorized: Check your access token.'
- '404 Not Found: Verify the endpoint URL.'
- '400 Bad Request: The request cannot be fulfilled due to bad syntax.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Invalid credentials or token.'
- Delegators are not eligible to claim any remaining rewards beyond what is covered
  by the delegation terms.
- 'INVALID_TOKEN: Ensure the token is valid and not expired'
- '403 FORBIDDEN: Check permissions for the requested resource'
- '404 NOT_FOUND: Verify the endpoint and parameters'
- 'INVALID_REQUEST: Check your request format'
- 'UNAUTHORIZED: Ensure valid credentials'
- 'FORBIDDEN: You do not have permission to access this resource'
- '401 Unauthorized: Check OAuth configuration or token validity'
- Users can cancel redemption requests at any time without being fined.
- '401 Unauthorized: Check your credentials'
- '429 Too Many Requests: Throttle your requests'
- '401 Unauthorized: Check OAuth scopes or token expiration'
- '403 Forbidden: Insufficient permissions'
- '404 Not Found: Resource does not exist'
- 'Invalid staking duration: Must be a multiple of the minimum period T.'
- 'Position not found: Ensure the position ID is correct.'
- '403 Forbidden: You do not have permission to access this resource'
- '404 Not Found: The requested resource does not exist'
- 'TOKEN_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '400 Bad Request: Check request format and parameters'
- '401 Unauthorized: Verify OAuth token and permissions'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '401 Unauthorized: Verify OAuth token or scopes'
auth_info:
  mentioned_objects:
  - OAuth2
  - API Key
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuthToken
  - VerifierNode
client:
  base_url: https://api.carv.io
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
