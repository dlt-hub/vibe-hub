resources:
- name: get_order
  endpoint:
    path: /orders/{orderId}
    method: GET
    data_selector: ''
- name: upload_document
  endpoint:
    path: /orders/{orderId}/documents/{documentType}/upload-links
    method: POST
    data_selector: ''
- name: accept_order
  endpoint:
    path: /orders/{orderId}/accept
    method: PUT
    data_selector: ''
- name: reject_order
  endpoint:
    path: /orders/{orderId}/reject
    method: PUT
    data_selector: ''
- name: mark_order_ready
  endpoint:
    path: /orders/{orderId}/ready
    method: PUT
    data_selector: ''
- name: mark_pickup_completed
  endpoint:
    path: /orders/{orderId}/pickup-completed
    method: PUT
    data_selector: ''
- name: mark_courier_at_customer
  endpoint:
    path: /orders/{orderId}/courier-at-customer
    method: PUT
    data_selector: ''
- name: mark_order_delivered
  endpoint:
    path: /orders/{orderId}/delivered
    method: PUT
    data_selector: ''
- name: upload_link
  endpoint:
    path: /orders/{orderId}/documents/{documentType}/upload-links
    method: POST
    data_selector: upload_url
- name: upload_link
  endpoint:
    path: /orders/{orderId}/documents/{documentType}/upload-links
    method: POST
    data_selector: upload_url
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: records
    params: {}
- name: authorization_code
  endpoint:
    path: /authorization-code-endpoint
    method: POST
    data_selector: authorization_code
- name: order
  endpoint:
    path: /api/order
    method: POST
- name: menu
  endpoint:
    path: /api/menu
    method: POST
- name: order
  endpoint:
    path: /api/order
    method: POST
- name: menu
  endpoint:
    path: /api/menu
    method: POST
- name: venue
  endpoint:
    path: /api/venue
    method: GET
- name: order
  endpoint:
    path: /api/order
    method: POST
- name: menu
  endpoint:
    path: /api/menu
    method: POST
- name: venue
  endpoint:
    path: /api/venue
    method: POST
- name: retrieve_current_delivery_provider
  endpoint:
    path: /api/venue#get-venue-delivery-provider
    method: GET
- name: change_delivery_provider
  endpoint:
    path: /api/venue#update-venue-delivery-provider
    method: POST
- name: shipment_promises
  endpoint:
    path: /shipment-promises
    method: POST
- name: deliveries
  endpoint:
    path: /deliveries
    method: POST
- name: available_venues
  endpoint:
    path: /available-venues
    method: GET
- name: delivery_fee
  endpoint:
    path: /delivery-fee
    method: POST
- name: delivery_order
  endpoint:
    path: /delivery-order
    method: POST
- name: shipment_promises
  endpoint:
    path: /v1/venues/{venue_id}/shipment-promises
    method: POST
- name: deliveries
  endpoint:
    path: /v1/venues/{venue_id}/deliveries
    method: POST
- name: available_venues
  endpoint:
    path: /merchants/{merchant_id}/available-venues
    method: POST
    data_selector: records
    params: {}
- name: delivery_fee
  endpoint:
    path: /merchants/{merchant_id}/delivery-fee
    method: POST
    data_selector: records
    params: {}
- name: delivery_order
  endpoint:
    path: /merchants/{merchant_id}/delivery-order
    method: POST
    data_selector: records
    params: {}
- name: order_cancellation
  endpoint:
    path: /order/{wolt_order_reference_id}/status/cancel
    method: PATCH
    data_selector: records
    params: {}
- name: handshake_delivery
  endpoint:
    path: /order/{wolt_order_reference_id}/status/handshake-delivery
    method: GET
    data_selector: records
    params: {}
- name: create_webhook
  endpoint:
    path: /v1/merchants/{merchant_id}/webhooks
    method: POST
- name: get_webhooks
  endpoint:
    path: /v1/merchants/{merchant_id}/webhooks
    method: GET
- name: get_single_webhook
  endpoint:
    path: /v1/merchants/{merchant_id}/webhooks/{webhook_id}
    method: GET
- name: update_webhook
  endpoint:
    path: /v1/merchants/{merchant_id}/webhooks/{webhook_id}
    method: PATCH
- name: delete_webhook
  endpoint:
    path: /v1/merchants/{merchant_id}/webhooks/{webhook_id}
    method: DELETE
- name: handshake_delivery
  endpoint:
    path: /webhook/handshake_delivery
    method: POST
    data_selector: details
    params: {}
- name: DeliveryStatusV1
  endpoint:
    path: /deliverystatusv1
    method: GET
    data_selector: DeliveryStatusV1
    params: {}
- name: DropoffDetails
  endpoint:
    path: /dropoffdetails
    method: GET
    data_selector: DropoffDetails
    params: {}
- name: DropoffOptionsV1
  endpoint:
    path: /dropoffoptionsv1
    method: GET
    data_selector: DropoffOptionsV1
    params: {}
- name: DropoffResponseDetails
  endpoint:
    path: /dropoffresponsedetails
    method: GET
    data_selector: DropoffResponseDetails
    params: {}
- name: DropoffRestrictionsV1
  endpoint:
    path: /dropoffrestrictionsv1
    method: GET
    data_selector: DropoffRestrictionsV1
    params: {}
- name: DropoffV1
  endpoint:
    path: /dropoffv1
    method: GET
    data_selector: DropoffV1
    params: {}
- name: Estimate
  endpoint:
    path: /estimate
    method: GET
    data_selector: Estimate
    params: {}
- name: Fee
  endpoint:
    path: /fee
    method: GET
    data_selector: Fee
    params: {}
- name: HandshakeDelivery
  endpoint:
    path: /handshakedelivery
    method: GET
    data_selector: HandshakeDelivery
    params: {}
- name: IdentityVerificationV1
  endpoint:
    path: /identityverificationv1
    method: GET
    data_selector: IdentityVerificationV1
    params: {}
- name: LocationV1
  endpoint:
    path: /locationv1
    method: GET
    data_selector: LocationV1
    params: {}
- name: MinMeanMaxEstimate
  endpoint:
    path: /minmeanmaxestimate
    method: GET
    data_selector: MinMeanMaxEstimate
    params: {}
- name: OptionalLocation
  endpoint:
    path: /optionallocation
    method: GET
    data_selector: OptionalLocation
    params: {}
- name: OrderLocation
  endpoint:
    path: /orderlocation
    method: GET
    data_selector: OrderLocation
    params: {}
- name: ParcelDimensionsV1
  endpoint:
    path: /parceldimensionsv1
    method: GET
    data_selector: ParcelDimensionsV1
    params: {}
- name: ParcelV1
  endpoint:
    path: /parcelv1
    method: GET
    data_selector: ParcelV1
    params: {}
- name: PickupDetails
  endpoint:
    path: /pickupdetails
    method: GET
    data_selector: PickupDetails
    params: {}
- name: PickupOptionsV1
  endpoint:
    path: /pickupoptionsv1
    method: GET
    data_selector: PickupOptionsV1
    params: {}
- name: PickupResponseDetails
  endpoint:
    path: /pickupresponsedetails
    method: GET
    data_selector: PickupResponseDetails
    params: {}
- name: PickupV1
  endpoint:
    path: /pickupv1
    method: GET
    data_selector: PickupV1
    params: {}
- name: Price
  endpoint:
    path: /price
    method: GET
    data_selector: Price
    params: {}
- name: RecipientV1
  endpoint:
    path: /recipientv1
    method: GET
    data_selector: RecipientV1
    params: {}
- name: ShipmentPromiseDetailsV1
  endpoint:
    path: /shipmentpromisedetailsv1
    method: GET
    data_selector: ShipmentPromiseDetailsV1
    params: {}
- name: ShipmentPromiseDropoffOptionsV1
  endpoint:
    path: /shipmentpromisedropoffoptionsv1
    method: GET
    data_selector: ShipmentPromiseDropoffOptionsV1
    params: {}
- name: ShipmentPromiseDropoffV1
  endpoint:
    path: /shipmentpromisedropoffv1
    method: GET
    data_selector: ShipmentPromiseDropoffV1
    params: {}
- name: ShipmentPromisePickupOptionsV1
  endpoint:
    path: /shipmentpromisepickupoptionsv1
    method: GET
    data_selector: ShipmentPromisePickupOptionsV1
    params: {}
- name: ShipmentPromisePickupV1
  endpoint:
    path: /shipmentpromisepickupv1
    method: GET
    data_selector: ShipmentPromisePickupV1
    params: {}
- name: SmsNotifications
  endpoint:
    path: /smsnotifications
    method: GET
    data_selector: SmsNotifications
    params: {}
- name: TagV1
  endpoint:
    path: /tagv1
    method: GET
    data_selector: TagV1
    params: {}
- name: Tip
  endpoint:
    path: /tip
    method: GET
    data_selector: Tip
    params: {}
- name: TipType
  endpoint:
    path: /tiptype
    method: GET
    data_selector: TipType
    params: {}
- name: Tracking
  endpoint:
    path: /tracking
    method: GET
    data_selector: Tracking
    params: {}
- name: TrackingInfoV1
  endpoint:
    path: /trackinginfov1
    method: GET
    data_selector: TrackingInfoV1
    params: {}
- name: WebHookDetailsV1
  endpoint:
    path: /webhookdetails/v1
    method: GET
    data_selector: subscribed_events
    params: {}
- name: WebhookCreatePayloadV1
  endpoint:
    path: /webhookcreatepayload/v1
    method: POST
    data_selector: callback_config
    params: {}
- name: WebhookUpdatePayloadV1
  endpoint:
    path: /webhookupdatepayload/v1
    method: PUT
    data_selector: callback_config
    params: {}
- name: get_order_v2
  endpoint:
    path: /get/v2/orders/{orderId}
    method: GET
- name: post_upload_links
  endpoint:
    path: /orders/{orderId}/documents/{documentType}/upload-links
    method: POST
- name: get_order
  endpoint:
    path: /get/orders/{orderId}
    method: GET
- name: put_accept_order
  endpoint:
    path: /put/orders/{orderId}/accept
    method: PUT
- name: put_reject_order
  endpoint:
    path: /put/orders/{orderId}/reject
    method: PUT
- name: put_mark_order_ready
  endpoint:
    path: /put/orders/{orderId}/ready
    method: PUT
- name: put_mark_order_delivered
  endpoint:
    path: /put/orders/{orderId}/delivered
    method: PUT
- name: upload_link
  endpoint:
    path: /orders/{orderId}/documents/{documentType}/upload-links
    method: POST
    data_selector: upload_url
    params: {}
- name: confirm_preorder
  endpoint:
    path: /orders/{orderId}/confirm
    method: POST
    data_selector: confirmation_status
    params: {}
- name: mark_order_sent
  endpoint:
    path: /orders/{orderId}/mark-sent
    method: POST
    data_selector: sent_status
    params: {}
- name: mark_deposits_returned
  endpoint:
    path: /orders/{orderId}/mark-deposits-returned
    method: POST
    data_selector: return_status
    params: {}
- name: refund_items
  endpoint:
    path: /orders/{orderId}/refund-items
    method: POST
    data_selector: refund_status
    params: {}
- name: refund_basket
  endpoint:
    path: /orders/{orderId}/refund-basket
    method: POST
    data_selector: basket_refund_status
    params: {}
- name: send_courier_location
  endpoint:
    path: /orders/{orderId}/courier-location
    method: POST
    data_selector: location_status
    params: {}
- name: send_eta
  endpoint:
    path: /orders/{orderId}/eta
    method: POST
    data_selector: eta_status
    params: {}
- name: upload_link
  endpoint:
    path: /orders/{orderId}/documents/{documentType}/upload-links
    method: POST
- name: venue_special_opening_times
  endpoint:
    path: /venues/{venueId}/special-opening-times
    method: PUT
    params:
      venueId: string
- name: venue_status
  endpoint:
    path: /venues/{venueId}/status
    method: GET
    params:
      venueId: string
- name: venue_delivery_provider
  endpoint:
    path: /venues/{venueId}/delivery-provider
    method: GET
    params:
      venueId: string
- name: update_venue_online_status
  endpoint:
    path: /venues/{venueId}/online
    method: PATCH
    params:
      venueId: string
- name: update_venue_opening_times
  endpoint:
    path: /venues/{venueId}/opening-times
    method: PATCH
    params:
      venueId: string
- name: menu
  endpoint:
    path: /post/v1/restaurants/{venueId}/menu
    method: POST
- name: update_item_inventory
  endpoint:
    path: /patch/venues/{venueId}/items/inventory
    method: PATCH
- name: update_items
  endpoint:
    path: /patch/venues/{venueId}/items
    method: PATCH
- name: update_options
  endpoint:
    path: /patch/venues/{venueId}/options/values
    method: PATCH
- name: menu
  endpoint:
    path: /v2/venues/{venueId}/menu
    method: GET
    data_selector: resource_url
- name: menu
  endpoint:
    path: /v2/venues/{venueId}/menu
    method: GET
    data_selector: resource_url
- name: menu
  endpoint:
    path: /v2/venues/{venueId}/menu
    method: GET
    data_selector: request_id
    params: {}
- name: menu
  endpoint:
    path: /v2/venues/{venueId}/menu
    method: GET
    data_selector: resource_url
- name: menu
  endpoint:
    path: /v2/venues/{venueId}/menu
    method: GET
    data_selector: resource_url
    params:
      venueId: string
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: time_slots
  endpoint:
    path: /v1/venues/{venueId}/time-slots
    method: PATCH
    data_selector: time_slots_configuration
    params:
      venueId: string
- name: retrieve_time_slots
  endpoint:
    path: /v1/venues/{venueId}/time-slots
    method: GET
    data_selector: effective_time_slots
    params:
      venueId: string
- name: shipment_promise
  endpoint:
    path: /merchants/{merchantId}/delivery-order
    method: POST
    data_selector: null
    params: {}
- name: delivery_order
  endpoint:
    path: /merchants/{merchantId}/deliveries
    method: POST
    data_selector: null
    params: {}
- name: delivery_order
  endpoint:
    path: /merchants/{merchantId}/delivery-order
    method: POST
    data_selector: records
    params: {}
- name: delivery_fee
  endpoint:
    path: /merchants/{merchantId}/delivery-fee
    method: POST
    data_selector: records
    params: {}
- name: delivery_order
  endpoint:
    path: /merchants/{merchantId}/delivery-order
    method: POST
    data_selector: pickup
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in Wolt
- Authorization code is single-use and valid for 1 hour.
- Refresh token will expire if unused for 30 days.
- The authorization code is single-use and valid for 1 hour.
- API authentication should be at venue level
- API authentication is done at the merchant level
- The Wolt Marketplace APIs use the bearer token authentication method.
- Webhook server is required to receive order status notifications.
- Auto-confirmation of pre-orders is not supported at the moment.
- Takeaway orders must be marked as picked up using the Wolt Merchant app.
- Support chat is available only through the Wolt Merchant app.
- Self-delivery orders are not currently available - functionality to support self-delivery
  orders will be added soon.
- Order submitter does not offer a device free experience at the moment - functionality
  to support pre-orders will be added soon.
- Partner must provide a client secret that must be different from the API key, cryptographically
  random and at least 128 bits in length.
- The signature is placed to the `WOLT-SIGNATURE` HTTP request header.
- Merchants must contact Wolt for staging credentials before development.
- The API key(s) are meant for secured communication between servers and thus they
  should never reach end user facing client applications.
- Managing both expected and unexpected errors is crucial when integrating with Wolt
  Drive APIs.
- API relies on standard HTTP response codes to indicate the outcome of API requests.
- This operation requires Bearer authentication
- The API must be enabled by Wolt before it can be used.
- Test token will be provided by Wolt when you start the integration development and
  the production token when you successfully complete the testing phase.
errors:
- 400 Bad Request – invalid `orderId` or `documentType`.
- 401 Unauthorized – missing or invalid bearer token.
- 409 Conflict – the last link expired and the document for this `{orderId}` and `{documentType}`
  has already been uploaded. No new link is issued.
- 500 Internal Server Error – an unexpected error occurred while generating or fetching
  the link.
- 400 Bad Request – invalid `orderId` or `documentType`
- 401 Unauthorized – missing or invalid bearer token
- 500 Internal Server Error – an unexpected error occurred while generating or fetching
  the link
- '400: Bad Request – invalid `orderId` or `documentType`'
- '401: Unauthorized – missing or invalid bearer token'
- '409: Conflict – the last link expired and the document for this `{orderId}` and
  `{documentType}` has already been uploaded. No new link is issued.'
- '500: Internal Server Error – an unexpected error occurred while generating or fetching
  the link.'
- '400 (Bad Request): Indicates a client error with request parameters or format'
- '401 (Unauthorized): Indicates incorrect or missing credentials'
- '405 (Method Not Allowed): Indicates wrong HTTP method (should use POST)'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check that you''re using the correct API. Ensure the request payload
  matches the schema for the used API.'
- '401 Unauthorized: Make sure bearer token is present in the request''s Authorization
  header. Ensure the access token has not been expired.'
- '404 Not Found: Check if the correct API method has been used.'
- '409 Conflict: If the merchants wants to send again the same catalog update it can
  be done 24 hours later and they will get a 202 Accepted response.'
- '429 Too Many Requests: Check the rate limits of the venue.'
- '429: If the client system is calling the endpoint(s) with abnormal frequency.'
- '400: Bad Request'
- '401: Unauthorized'
- '404: Not found'
- '422: Unprocessable Entity'
- '500: Internal Server Error'
- '400 Invalid payload: Invalid order state transition'
- '401 Unauthorized: Invalid credentials provided'
- '404 Not found: The requested resource could not be found'
- '422 Unprocessable Entity: The request was well-formed but unable to be followed
  due to semantic errors'
- '500 Internal Server Error: An unexpected error occurred'
- '400 Bad Request: Bad Request'
- '401 Unauthorized: Unauthorized'
- '422 Unprocessable Entity: Validation Error'
- '400: Do not retry - Payload error, or delivery unavailable. See the response payload
  for details.'
- '401: Do not retry - Unauthorized. The Bearer token (''merchant key'') does not
  match with the resource ID in path.'
- '404: Do not retry - Invalid resource ID in path parameters, wrong venue/merchant
  ID. Invalid shipment promise ID.'
- '422: Do not retry - Request payload did not pass validation. Location and reason
  is detailed in the error response.'
- '429: Wait before retry - Abnormally large number of requests was received. Wait
  5 seconds to 1 minute before retrying.'
- '5XX: Retry - General error. Retry the request. If the issue persists, please contact
  your Wolt contact person.'
- 400 Bad Request – invalid orderId or documentType.
- 409 Conflict – the last link expired and the document for this {orderId} and {documentType}
  has already been uploaded. No new link is issued.
- '400: Bad Request – invalid `orderId` or `documentType`.'
- '401: Unauthorized – missing or invalid bearer token.'
- 400 Bad Request — validation failed (e.g., overlaps or bad formats)
- 401 Unauthorized
- 500 An internal error occurred
- 503 Service unavailable — upstream error
- 403 Forbidden
- 500 Something went wrong on Wolt's side
- '400 Bad Request: Wrong slot or capacity or delivery lead time'
- 400 Bad Request
- 422 Unprocessable Content
- 500 Internal Server Error
auth_info:
  mentioned_objects: []
client:
  base_url: https://pos-integration-service.wolt.com
  auth:
    type: oauth2
  headers:
    Authorization: Bearer {{access_token}}
source_metadata: null
