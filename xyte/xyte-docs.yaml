resources:
- name: connectors
  endpoint:
    path: /connectors
    method: GET
- name: Edge
  endpoint:
    path: /edges
    method: GET
    data_selector: edges
    params: {}
- name: Device
  endpoint:
    path: /devices
    method: POST
    data_selector: device
    params: {}
- name: Users & Groups
  endpoint:
    path: /api/users
    method: POST
    data_selector: user
    params: {}
- name: Space Level Access
  endpoint:
    path: /access/space-level
    method: GET
    data_selector: access_levels
    params: {}
- name: Tenant Wide Access
  endpoint:
    path: /access/tenant-wide
    method: GET
    data_selector: tenant_access
    params: {}
- name: Logo
  endpoint:
    path: /api/logo
    method: POST
    data_selector: logo
    params: {}
- name: Background Image
  endpoint:
    path: /api/background
    method: POST
    data_selector: background
    params: {}
- name: spaces
  endpoint:
    path: /spaces
    method: GET
    data_selector: spaces
    params: {}
- name: Space
  endpoint:
    path: /settings/space
    method: GET
    data_selector: space_settings
    params: {}
- name: Incident Routing
  endpoint:
    path: /settings/incident-routing
    method: GET
    data_selector: incident_routing
    params: {}
- name: Access
  endpoint:
    path: /settings/access
    method: GET
    data_selector: access_settings
    params: {}
- name: incidents
  endpoint:
    path: /incidents
    method: GET
    data_selector: incidents
    params: {}
- name: devices
  endpoint:
    path: /devices
    method: GET
    data_selector: devices
- name: warranties
  endpoint:
    path: /warranties
    method: GET
    data_selector: warranties
- name: devices
  endpoint:
    path: /devices
    method: GET
    data_selector: devices
- name: purchased_products
  endpoint:
    path: /products/purchased
    method: GET
    data_selector: records
- name: subscriptions
  endpoint:
    path: /products/subscriptions
    method: GET
    data_selector: records
- name: active_orders
  endpoint:
    path: /products/active_orders
    method: GET
    data_selector: records
- name: invoices
  endpoint:
    path: /products/invoices
    method: GET
    data_selector: records
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: active_orders
  endpoint:
    path: /active_orders
    method: GET
- name: invoices
  endpoint:
    path: /invoices
    method: GET
- name: tickets
  endpoint:
    path: /tickets
    method: GET
    data_selector: tickets
    params: {}
- name: incident_notification
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: notifications
    params: {}
- name: email_integration
  endpoint:
    path: /api/email
    method: POST
    data_selector: emails
    params: {}
- name: incident
  endpoint:
    path: /api/now/table/incident
    method: POST
    data_selector: result
    params: {}
- name: email_notifications
  endpoint:
    path: /notifications/email
    method: GET
- name: webhooks
  endpoint:
    path: /notifications/webhooks
    method: GET
- name: daily_summary_report
  endpoint:
    path: /reports/daily_summary
    method: GET
- name: Organization Overview
  endpoint:
    path: /organization/overview
    method: GET
    data_selector: access_details
    params: {}
- name: groups
  endpoint:
    path: /users-groups/groups
    method: POST
    data_selector: group
    params: {}
- name: Microsoft Teams Rooms
- name: Zoom Rooms
- name: Crestron XiO
- name: Q-SYS Reflect
- name: BSN.Cloud - BrightSign
- name: Domotz
- name: Neat Pulse
- name: Biamp Workplace
- name: Sony
- name: LogiTech Sync
- name: organization_info
  endpoint:
    path: /organization/info
    method: GET
    data_selector: data
    params: {}
- name: Get Devices
  endpoint:
    path: /reference/get-devices
    method: GET
- name: Get Histories
  endpoint:
    path: /reference/get-histories
    method: GET
- name: Claim Device
  endpoint:
    path: /reference/claim-device
    method: POST
- name: Update Device
  endpoint:
    path: /reference/update-device
    method: PATCH
- name: Delete Device
  endpoint:
    path: /reference/delete-device
    method: DELETE
- name: Get Device
  endpoint:
    path: /reference/get-device
    method: GET
- name: histories
  endpoint:
    path: /organization/devices/histories
    method: GET
    data_selector: response
    params: {}
- name: devices
  endpoint:
    path: /organization/devices
    method: GET
    data_selector: devices
- name: claim_device
  endpoint:
    path: /organization/devices/claim
    method: POST
    data_selector: ''
    params:
      space_id: xxxxx
      cloud_id: LelJ5pO...
- name: update_device
  endpoint:
    path: /organization/{device_id}
    method: PATCH
- name: delete_device
  endpoint:
    path: /organization/devices/{device_id}
    method: DELETE
- name: device
  endpoint:
    path: /organization/devices/{device_id}
    method: GET
- name: Get Commands
  endpoint:
    path: /reference/get-commands
    method: GET
    data_selector: ''
    params: {}
- name: Send Command
  endpoint:
    path: /reference/send-command
    method: POST
    data_selector: ''
    params: {}
- name: Cancel Command
  endpoint:
    path: /reference/cancel-command
    method: DELETE
    data_selector: ''
    params: {}
- name: commands
  endpoint:
    path: /organization/devices/{device_id}/commands
    method: GET
    data_selector: commands
    params: {}
- name: send_command
  endpoint:
    path: /organization/devices/{device_id}/commands
    method: POST
- name: cancel_command
  endpoint:
    path: /organization/devices/{device_id}/commands/{command_id}
    method: DELETE
- name: Get Open Tickets
  endpoint:
    path: /reference/get-open-tickets
    method: GET
- name: Get Ticket
  endpoint:
    path: /reference/get-ticket
    method: GET
- name: Update Ticket
  endpoint:
    path: /reference/update-ticket
    method: PUT
- name: Send Message
  endpoint:
    path: /reference/send-message
    method: POST
- name: Mark Resolved
  endpoint:
    path: /reference/mark-resolved
    method: POST
- name: open_tickets
  endpoint:
    path: /organization/tickets
    method: GET
    data_selector: ''
- name: ticket
  endpoint:
    path: /organization/tickets/{ticket_id}
    method: GET
    data_selector: object
    params: {}
- name: ticket
  endpoint:
    path: /organization/tickets/{ticket_id}
    method: PUT
    data_selector: object
    params: {}
- name: send_message
  endpoint:
    path: /organization/tickets/{ticket_id}/message
    method: POST
    data_selector: ''
    params: {}
- name: mark_resolved
  endpoint:
    path: /organization/tickets/{ticket_id}/resolved
    method: POST
- name: spaces
  endpoint:
    path: /organization/spaces
    method: GET
    data_selector: items
- name: create_space
  endpoint:
    path: /organization/spaces
    method: POST
- name: update_space
  endpoint:
    path: /organization/spaces/{space_id}
    method: PUT
- name: delete_space
  endpoint:
    path: /organization/spaces/{space_id}
    method: DELETE
- name: incidents
  endpoint:
    path: /organization/incidents
    method: GET
    data_selector: paginated data
- name: close_incident
  endpoint:
    path: /organization/incidents/{incident_id}
    method: DELETE
- name: organization_info
  endpoint:
    path: /organization/info
    method: GET
    data_selector: items
notes:
- Access control is done via Overview -> Space -> Manage Access menu.
- Any changes to the access levels of a Space, automatically propagate to all the
  Spaces below it.
- The logo should be at a 1:1 size ratio with a recommended size of 100x100 pixels.
- The image is recommended to be at a 10:1 ratio with a recommended size of 2,000x200
  pixels.
- When maintenance mode is enabled, incidents won’t be triggered in support workflows.
- When a device is deleted, all historical data about the device is erased from the
  system and it is not possible to retrieve it in the future.
- This step should only be performed when selling the device or permanently destroying
  it. As the deletion is irreversible.
- ServiceNow instance supports regular user & password login flow.
- NO INCOMING PORTS ARE REQUIRED.
- 'Access to the domain (app.xyte.io or a OEM custom domain) on port: 443.'
- The Xyte platform requires minimal permissions to the tenant, collecting data only
  about 'Zoom Rooms' and not users, calendar or any other aspect of your Zoom tenant.
- The integration only requires basic scopes and collects data only about Microsoft
  Rooms, no access to users, calendars or other data is required or requested by the
  integrations.
- The user will require an Office365 license during the authorization process (can
  be removed afterwards).
- If 2FA is enabled on your Biamp Workplace account, you will need to either temporarily
  disable or coordinate with your XYTE representative to complete a one-time authentication.
- Authorization with Domotz requires an API key and API endpoint URL, the API key
  should have a scope to cover all devices to be monitored.
- Make sure to copy and paste the certificate and the private key with the headers
  and the footers
- Docker is required for installation.
- Recommended to use Ubuntu/Debian for new machines.
- Xyte is committed to keeping our customers’ data secure.
- Xyte runs in multiple zones, providing continuous service with minimal downtime.
- Xyte encrypts all data both in flight and at rest.
- Containers will stop when the user logs out, because Docker Desktop runs as a user-level
  application and shuts down with the session.
- The current versions of the Mac operating systems, only allows Docker to operate
  then a user is logged in.
- Keep a user always logged in.
- 'Prevent the Mac from sleeping with solutions like: https://www.caffeine-app.net/'
- Setup auto-login and auto-launch on boot.
- Requires Restart (complete previous Telnet step before restarting)
- Login to Docker not necessary, ‘skip’ may be selected on launch / setup
- Sony Bravia IP Control documentation - https://pro-bravia.sony.net/develop/integrate/ip-control/
- Sony Bravia Product Line-up - https://pro-bravia.sony.net/resources/
- All Core API Keys have full access to the End Customer tenant.
- It is recommended to create a new key for each integration used.
- To use the API please login to your tenant and navigate to 'Settings->API Keys'
  to generate an API key.
- The URL for this request expired after 30 days.
- This endpoint requires Authorization.
errors:
- '401 Unauthorized: the api_key is not provided or is invalid.'
- '403 Forbidden: the user does not have permission to perform the requested action.'
- '404 Not Found: a device with the specified ID is not found.'
- '422 Unprocessable Entity: a required parameter is missing or invalid.'
- '401 Unauthorized: Ensure the username and password are correct.'
- telnet is not installed. Please install it and try again.
- 'docker: permission denied while trying to connect to the Docker daemon'
- 'Error: telnet is not installed. Telnet is unable to be installed on newer Mac OS'
- '422: Invalid values for page or per_page'
- '401'
- '400'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401: Not authorized'
- '403: Invalid config'
- '404: Space not found'
- '422: Non unique name'
- 401 - If the Incident is not accessible using the API Key
- 422 - If the Incident is already closed
auth_info:
  mentioned_objects:
  - Administrator
  - Q-SYS Integration token
  - Account ID
  - Reflect Organization Owner ID
client:
  base_url: https://hub.xyte.io/core/v1
  headers:
    Authorization: ''
source_metadata: null
