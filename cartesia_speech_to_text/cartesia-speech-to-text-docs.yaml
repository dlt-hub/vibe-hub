resources:
- name: text_to_speech_bytes
  endpoint:
    path: /tts/bytes
    method: POST
    data_selector: null
    params: {}
- name: text_to_speech
  endpoint:
    path: /tts/bytes
    method: POST
    data_selector: ''
    params: {}
- name: access_token
  endpoint:
    path: /access-token
    method: POST
    data_selector: token
- name: tts
  endpoint:
    path: /tts/bytes
    method: GET
- name: stt
  endpoint:
    path: /stt
    method: POST
- name: sonic-2
  endpoint:
    path: /build-with-cartesia/tts-models/sonic-2
    method: GET
    data_selector: model_info
    params: {}
- name: sonic-turbo
  endpoint:
    path: /build-with-cartesia/tts-models/sonic-turbo
    method: GET
    data_selector: model_info
    params: {}
- name: sonic
  endpoint:
    path: /build-with-cartesia/tts-models/sonic
    method: GET
    data_selector: model_info
    params: {}
- name: ink-whisper
  endpoint:
    path: /build-with-cartesia/stt-models/ink-whisper
    method: GET
    data_selector: models
    params: {}
- name: sonic-2
  endpoint:
    path: /build-with-cartesia/tts-models#sonic-2
    method: GET
    data_selector: models
- name: sonic-turbo
  endpoint:
    path: /build-with-cartesia/tts-models#sonic-turbo
    method: GET
    data_selector: models
- name: sonic
  endpoint:
    path: /build-with-cartesia/tts-models#sonic
    method: GET
    data_selector: models
- name: ink-whisper
  endpoint:
    path: /build-with-cartesia/stt-models#ink-whisper
    method: GET
    data_selector: model
    params: {}
- name: ink-whisper-2025-06-04
  endpoint:
    path: /build-with-cartesia/stt-models#ink-whisper-2025-06-04
    method: GET
    data_selector: model
    params: {}
- name: TTS
  endpoint:
    path: /tts/websocket
    method: GET
    data_selector: audio_chunks
- name: twilio_call
  endpoint:
    path: /calls
    method: POST
    data_selector: call
    params: {}
- name: API Status
  endpoint:
    path: /
    method: GET
    data_selector: ok
- name: API Status
  endpoint:
    path: /
    method: GET
    data_selector: ok
- name: TTS Endpoints
  endpoint:
    path: /api-reference/tts/compare-tts-endpoints
    method: GET
- name: TTS WebSocket
  endpoint:
    path: /api-reference/tts/tts
    method: WSS
- name: TTS Bytes
  endpoint:
    path: /api-reference/tts/bytes
    method: POST
- name: text_to_speech_bytes
  endpoint:
    path: /tts/bytes
    method: POST
    data_selector: response
    params: {}
- name: text_to_speech_bytes
  endpoint:
    path: /tts/bytes
    method: POST
    data_selector: response
    params: {}
- name: text_to_speech
  endpoint:
    path: /tts/sse
    method: POST
    data_selector: chunk
- name: text_to_speech_sse
  endpoint:
    path: /tts/sse
    method: POST
    data_selector: chunk
- name: handshake
  endpoint:
    path: /api-reference/tts/tts
    method: GET
- name: handshake
  endpoint:
    path: /api-reference/tts/tts?explorer=true
    method: GET
- name: transcription
  endpoint:
    path: /stt/websocket
    method: GET
    data_selector: transcription
- name: batch_speech_to_text
  endpoint:
    path: /stt
    method: POST
    data_selector: transcription
    params: {}
- name: openai_compatible_transcription
  endpoint:
    path: /audio/transcriptions
    method: POST
    data_selector: transcription
    params: {}
- name: transcription
  endpoint:
    path: /stt/websocket
    method: GET
    data_selector: transcript
- name: voices
  endpoint:
    path: /voices/
    method: GET
    data_selector: data
    params:
      limit: '10'
      gender: null
- name: batch_speech_to_text
  endpoint:
    path: /stt
    method: POST
    data_selector: transcription
    params:
      file: audio file to transcribe
      model: ink-whisper
      language: ISO-639-1 format
      timestamp_granularities: '["word"]'
- name: openai_compatible_transcription
  endpoint:
    path: /audio/transcriptions
    method: POST
    data_selector: transcription
    params:
      file: audio file to transcribe
      model: ink-whisper
      language: ISO-639-1 format
      timestamp_granularities: '["word"]'
- name: clone_voice
  endpoint:
    path: /voices/clone
    method: POST
    data_selector: id
    params: {}
- name: voices
  endpoint:
    path: /voices/
    method: GET
    data_selector: data
    params:
      gender: null
- name: delete_voice
  endpoint:
    path: /voices/:id
    method: DELETE
    data_selector: null
    params: {}
- name: update_voice
  endpoint:
    path: /voices/:id
    method: PATCH
    data_selector: null
    params: {}
- name: clone_voice
  endpoint:
    path: /voices/clone
    method: POST
    data_selector: id
- name: get_voice
  endpoint:
    path: /voices/:id
    method: GET
    data_selector: id
    params: {}
- name: delete_voice
  endpoint:
    path: /voices/:id
    method: DELETE
    data_selector: response
    params: {}
- name: localize_voice
  endpoint:
    path: /voices/localize
    method: POST
    data_selector: ''
    params: {}
- name: update_voice
  endpoint:
    path: /voices/:id
    method: PATCH
    data_selector: id
    params: {}
- name: voice_changer_bytes
  endpoint:
    path: /voice-changer/bytes
    method: POST
    data_selector: file
    params: {}
- name: voice
  endpoint:
    path: /voices/:id
    method: GET
    data_selector: id
    params: {}
- name: voice_changer
  endpoint:
    path: /voice-changer/sse
    method: POST
    data_selector: stream
    params:
      clip: file
      voice: id
      output_format[container]: enum
      output_format[sample_rate]: integer
      output_format[bit_rate]: integer
- name: localize_voice
  endpoint:
    path: /voices/localize
    method: POST
    data_selector: id
    params: {}
- name: access_token
  endpoint:
    path: /access-token
    method: POST
    data_selector: token
- name: voice_changer_bytes
  endpoint:
    path: /voice-changer/bytes
    method: POST
    data_selector: file
- name: datasets
  endpoint:
    path: /datasets/
    method: GET
    data_selector: data
    params: {}
- name: voice_changer
  endpoint:
    path: /voice-changer/sse
    method: POST
    data_selector: stream
    params: {}
- name: datasets
  endpoint:
    path: /datasets/
    method: POST
    data_selector: id
    params: {}
- name: access_token
  endpoint:
    path: /access-token
    method: POST
    data_selector: token
- name: datasets
  endpoint:
    path: /datasets/:id
    method: GET
    data_selector: id
    params: {}
- name: datasets
  endpoint:
    path: /datasets/
    method: GET
    data_selector: data
    params:
      limit: 10
- name: datasets
  endpoint:
    path: /datasets/:id
    method: PATCH
    data_selector: data
    params: {}
- name: datasets
  endpoint:
    path: /datasets/:id
    method: DELETE
    data_selector: null
    params: {}
- name: datasets
  endpoint:
    path: /datasets/
    method: POST
    data_selector: id
    params: {}
- name: datasets
  endpoint:
    path: /datasets/:id
    method: GET
    data_selector: id
    params: {}
- name: list_files
  endpoint:
    path: /datasets/:id/files
    method: GET
    data_selector: data
    params:
      limit: '10'
- name: datasets
  endpoint:
    path: /datasets/:id
    method: PATCH
    data_selector: dataset
    params: {}
- name: upload_file
  endpoint:
    path: /datasets/:id/files
    method: POST
    data_selector: null
    params: {}
- name: datasets
  endpoint:
    path: /datasets/:id
    method: DELETE
    data_selector: null
    params: {}
- name: delete_file
  endpoint:
    path: /datasets/:id/files/:fileID
    method: DELETE
- name: fine_tunes
  endpoint:
    path: /fine-tunes/
    method: GET
    data_selector: data
    params:
      limit: '10'
- name: list_files
  endpoint:
    path: /datasets/:id/files
    method: GET
    data_selector: data
    params:
      limit: 10
- name: fine_tunes
  endpoint:
    path: /fine-tunes/
    method: POST
    data_selector: id
    params: {}
- name: upload_file
  endpoint:
    path: /datasets/:id/files
    method: POST
    data_selector: file
    params:
      id: string
- name: fine_tune
  endpoint:
    path: /fine-tunes/:id
    method: GET
    data_selector: data
    params: {}
- name: delete_file
  endpoint:
    path: /datasets/:id/files/:fileID
    method: DELETE
- name: fine_tunes
  endpoint:
    path: /fine-tunes/:id
    method: DELETE
    data_selector: ''
    params: {}
- name: fine_tunes
  endpoint:
    path: /fine-tunes/
    method: GET
    data_selector: data
    params:
      limit: 10
- name: list_voices
  endpoint:
    path: /fine-tunes/:id/voices
    method: GET
    data_selector: data
    params:
      limit: 10
- name: fine_tunes
  endpoint:
    path: /fine-tunes/
    method: POST
    data_selector: id
    params: {}
- name: infill_bytes
  endpoint:
    path: /infill/bytes
    method: POST
    data_selector: response
    params: {}
- name: fine_tune
  endpoint:
    path: /fine-tunes/:id
    method: GET
    data_selector: id
    params: {}
- name: fine_tunes
  endpoint:
    path: /fine-tunes/:id
    method: DELETE
- name: pronunciation_dicts
  endpoint:
    path: /pronunciation-dicts/
    method: GET
    data_selector: data
- name: pronunciation_dict
  endpoint:
    path: /pronunciation-dicts/
    method: POST
    data_selector: id
- name: voices
  endpoint:
    path: /fine-tunes/:id/voices
    method: GET
    data_selector: data
    params:
      limit: 10
- name: pronunciation_dict
  endpoint:
    path: /pronunciation-dicts/:id
    method: GET
    data_selector: id
    params:
      id: string
- name: infill_bytes
  endpoint:
    path: /infill/bytes
    method: POST
    data_selector: response
    params: {}
- name: pronunciation_dicts
  endpoint:
    path: /pronunciation-dicts/:id
    method: PATCH
    data_selector: id
- name: pronunciation_dicts
  endpoint:
    path: /pronunciation-dicts/
    method: GET
    data_selector: data
- name: pronunciation_dict
  endpoint:
    path: /pronunciation-dicts/:id
    method: DELETE
- name: pronunciation_dict
  endpoint:
    path: /pronunciation-dicts/
    method: POST
    data_selector: id
    params: {}
- name: pronunciation_dicts_pin
  endpoint:
    path: /pronunciation-dicts/:id/pin
    method: POST
- name: pronunciation_dict
  endpoint:
    path: /pronunciation-dicts/:id
    method: GET
    data_selector: id
    params: {}
- name: pronunciation_dicts
  endpoint:
    path: /pronunciation-dicts/:id/unpin
    method: POST
- name: pronunciation_dicts
  endpoint:
    path: /pronunciation-dicts/:id
    method: PATCH
    data_selector: id
- name: pronunciation_dict
  endpoint:
    path: /pronunciation-dicts/:id
    method: DELETE
- name: pronunciation_dicts
  endpoint:
    path: /pronunciation-dicts/:id/pin
    method: POST
- name: pronunciation_dicts
  endpoint:
    path: /pronunciation-dicts/:id/unpin
    method: POST
notes:
- The Cartesia API is the fastest, ultra-realistic voice AI platform.
- Sonic Turbo offers even better performance, streaming out the first byte of audio
  in just 40ms.
- If real-time performance is your top priority, Sonic Turbo offers even better performance,
  streaming out the first byte of audio in just 40ms.
- Line handles the complex audio infrastructure while you focus on your Agent’s reasoning
  and personality.
- All API requests use HTTPS. HTTP is not supported.
- Client apps should use Access Tokens to avoid exposing API Key.
- All endpoints use HTTPS. HTTP is not supported.
- Authentication is handled using API keys.
- Ensure to replace 'YOUR_API_KEY' with your real API key.
- Access Tokens provide a secure way to authenticate client-side requests.
- Generate tokens server-side only
- Use short token lifetimes (minutes)
- Implement automatic token refresh
- Store tokens in HTTP-only cookies
- Enable secure and SameSite cookie flags
- New snapshots are released periodically with improvements in performance, additional
  language support, and new capabilities.
- Uses base model name for stable version.
- New snapshots are released periodically.
- Ensure you have a Cartesia API key
- OUTPUT_DIRECTORY is optional
- Use the base model for prototyping and development, then switch to a date-versioned
  model for production use cases.
- Rasa provides a framework to manage dialogue and conversational agents.
- Ensure all required environment variables are correctly set.
- Verify that your Twilio and Cartesia credentials are valid and have the necessary
  permissions.
- Supports Single-Sign On (SSO) for customers on the Enterprise plan via SAML.
- Organizations must be upgraded to the Startup tier or above before team members
  can be invited.
- Each workspace has its own billing and credit limits.
- We support Single-Sign On (SSO) for customers on the Enterprise plan via SAML.
- WebSocket connections are limited to 10X your concurrency limit.
- Idle WebSocket connections are closed after 5 minutes.
- If you exceed your TTS concurrency limit, you will receive a `429 Too Many Requests`
  error.
- If you exceed your WebSocket limit, you will receive a `429 Too Many Requests` error
  on trying to open a new WebSocket connection.
- For real-time applications, use the WebSocket endpoint.
- Authorization Bearer token is required.
- Bearer authentication of the form Bearer <token>, where token is your auth token.
- Bearer authentication of the form `Bearer <token>` is required.
- The WebSocket API is built around contexts.
- Responses for a context contain the context_id passed in to match requests and responses.
- For best performance, do many generations over a single WebSocket.
- For best performance, it is recommended to resample audio before streaming and send
  audio chunks in pcm_s16le format at 16kHz sample rate.
- Idle WebSocket connections are automatically closed after 20 seconds of inactivity
  (no audio being streamed).
- Update the base URL from https://api.openai.com/v1 to https://api.cartesia.ai
- Replace OpenAI API key with Cartesia API key
- Use ink-whisper as the model name
- For best performance, resample audio before streaming and send audio chunks in pcm_s16le
  format at 16kHz sample rate.
- Idle WebSocket connections are automatically closed after 20 seconds of inactivity.
- Clones are more similar to the source clip, but may reproduce background noise.
- Authorization Bearer authentication of the form `Bearer <token>`.
- This endpoint is priced at 15 characters per second of input audio.
- Bearer authentication of the form `Bearer <token>`, where token is your auth token.
- Tokens are short-lived and should be used to make requests to the API from authenticated
  clients.
- Authorization Bearer authentication of the form Bearer <token>, where token is your
  auth token.
- AuthorizationBearer - Bearer authentication of the form Bearer <token>, where token
  is your auth token.
- Authorization requires Bearer token
- Infilling is only available on `sonic-2` at this time.
- At least one of `left_audio` or `right_audio` must be provided.
errors:
- Standard HTTP response codes apply.
- Standard HTTP response codes are used.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Missing required configuration: TWILIO_ACCOUNT_SID'
- 'Missing required configuration: TWILIO_AUTH_TOKEN'
- 'Missing required configuration: CARTESIA_API_KEY'
- '429 Too Many Requests: You have exceeded your concurrency limit.'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '429: Concurrency limit exceeded - new connections will be rejected.'
- 'Timeout: If no audio data is sent for 20 seconds, the WebSocket will automatically
  disconnect.'
- '401 Unauthorized: Recheck API key or permissions'
- '429: Too Many Requests - Exceeded concurrency limit.'
- Timeout - No audio data sent for 20 seconds.
- '401 Unauthorized: Recheck token'
- '401 Unauthorized: Recheck auth token'
auth_info:
  mentioned_objects:
  - AccessToken
  - Bearer token
  - Bearer
client:
  base_url: https://api.cartesia.ai
  auth:
    type: apikey
    location: header
    header_name: Authorization
  headers:
    Cartesia-Version: YYYY-MM-DD
source_metadata: null
