resources:
- name: flight_duration
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}
    method: GET
    data_selector: duration
- name: flight_duration_by_airline
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}/{airlineCode}
    method: GET
    data_selector: duration
- name: duration_stats_by_airports_all_airlines
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}
    method: GET
    data_selector: stats
- name: duration_stats_by_airports_min_max_percentiles
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}
    method: GET
    data_selector: stats
- name: duration_stats_by_airports_split_by_airline
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}
    method: GET
    data_selector: stats
- name: duration_stats_by_airports_split_by_airline_min_max
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}
    method: GET
    data_selector: stats
- name: duration_stats_by_airports_split_by_airline_min_max_percentiles
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}
    method: GET
    data_selector: stats
- name: duration_stats_by_airports_specific_airline_min_max_percentiles
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}/{airlineCode}
    method: GET
    data_selector: stats
- name: flight_duration
  endpoint:
    path: /duration/v2/{origin}/{destination}
    method: GET
    data_selector: statistics
- name: flight_duration
  endpoint:
    path: /v2/{originAirport}/{destinationAirport}
    method: GET
    data_selector: average_duration
    params: {}
- name: flight_duration_by_airline
  endpoint:
    path: /v2/{originAirport}/{destinationAirport}/{airlineCode}
    method: GET
    data_selector: average_duration
    params: {}
- name: duration_stats_all_airlines
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}
    method: GET
    data_selector: stats
    params:
      version: '2'
- name: duration_stats_with_min_max_percentiles
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}
    method: GET
    data_selector: stats
    params:
      version: '2'
      showMinMax: true
      showPercentiles: true
- name: duration_stats_split_by_airline
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}
    method: GET
    data_selector: stats
    params:
      version: '2'
      split: airline
- name: duration_stats_split_by_airline_and_show_min_max
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}
    method: GET
    data_selector: stats
    params:
      version: '2'
      split: airline
      showMinMax: true
- name: duration_stats_split_by_airline_and_show_min_max_and_percentiles
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}
    method: GET
    data_selector: stats
    params:
      version: '2'
      split: airline
      showMinMax: true
      showPercentiles: true
- name: duration_stats_for_specific_airline
  endpoint:
    path: /duration/v2/{originAirport}/{destinationAirport}/{airlineCode}
    method: GET
    data_selector: stats
    params:
      version: '2'
      showMinMax: true
      showPercentiles: true
- name: bag_history
  endpoint:
    path: /baggage/history/v1.0/tag/{tag}/flightdate/{date}
    method: GET
    data_selector: bag
    params: {}
- name: flight_duration
  endpoint:
    path: /duration/v2/{origin}/{destination}
    method: GET
    data_selector: flight duration statistics
    params: {}
- name: bags_for_flight
  endpoint:
    path: /bagsforflight/v1.0/airport_code/{airport_code}/arr_dep_indicator/{arr_dep_indicator}/airline_code/{airline_code}/flight_no/{flight_no}/dep_flight_date/{dep_flight_date}
    method: GET
- name: bag_history
  endpoint:
    path: /history/v1.0/tag/{bagTag}/flightdate/{flightDate}
    method: GET
- name: world_tracer
  endpoint:
    path: /delayedbags/create/v1.0
    method: POST
- name: bags_for_passenger
  endpoint:
    path: /bagsforpassenger/v1.0/pnr/{pnr}/dep_flight_date/{dep_flight_date}
    method: GET
- name: Allowance
  endpoint:
    path: /api/v2/passenger/allowance/check
    method: POST
- name: BaggageProcessing
  endpoint:
    path: /api/v2/passenger/baggage/confirm-drop
    method: POST
- name: BagProcessing
  endpoint:
    path: /api/v1/passenger/bag/generate
    method: GET
- name: PassengerIdentification
  endpoint:
    path: /api/v2/passenger/identify/by-barcoded-boarding-pass
    method: POST
- name: PassportCheck
  endpoint:
    path: /api/v1/passenger/check-passport
    method: POST
- name: Process
  endpoint:
    path: /api/v1/passenger/end-drop-off
    method: POST
- name: TravelDocumentCheck
  endpoint:
    path: /api/v1/passenger/check-travel-document
    method: POST
- name: VisaVerification
  endpoint:
    path: /api/v2/passenger/verified-visa
    method: POST
- name: device
  endpoint:
    path: /gateaccess/v2/device/{deviceId}
    method: GET
- name: opengate
  endpoint:
    path: /gateaccess/v2/opengate
    method: POST
- name: closegate
  endpoint:
    path: /gateaccess/v2/closegate
    method: POST
- name: acceptpassenger
  endpoint:
    path: /gateaccess/v2/acceptpassenger
    method: POST
- name: rejectpassenger
  endpoint:
    path: /gateaccess/v2/rejectpassenger
    method: POST
- name: bag_history
  endpoint:
    path: /baggage/history/v1.0/tag/{tag}/flightdate/{date}
    method: GET
    data_selector: success
- name: bags_for_flight
  endpoint:
    path: /bagsforflight/v1.0/airport_code/{airport_code}/arr_dep_indicator/{arr_dep_indicator}/airline_code/{airline_code}/flight_no/{flight_no}/dep_flight_date/{dep_flight_date}
    method: GET
- name: bag_history
  endpoint:
    path: /history/v1.0/tag/{bagTag}/flightdate/{flightDate}
    method: GET
- name: world_tracer
  endpoint:
    path: /delayedbags/create/v1.0
    method: POST
- name: bags_for_passenger
  endpoint:
    path: /bagsforpassenger/v1.0/pnr/{pnr}/dep_flight_date/{dep_flight_date}
    method: GET
- name: device
  endpoint:
    path: /print/v2/device/{deviceId}
    method: GET
- name: boardingpass
  endpoint:
    path: /print/v2/boardingpass/{type}
    method: POST
- name: boardingpass_aea
  endpoint:
    path: /print/v2/boardingpass/aea
    method: POST
- name: baggagetag
  endpoint:
    path: /print/v2/baggagetag/{type}
    method: POST
- name: baggagetag_aea
  endpoint:
    path: /print/v2/baggagetag/aea
    method: POST
- name: report
  endpoint:
    path: /print/v2/report
    method: POST
- name: Allowance
  endpoint:
    path: /api/v2/passenger/allowance/check
    method: POST
- name: BaggageProcessing
  endpoint:
    path: /api/v2/passenger/baggage/confirm-drop
    method: POST
- name: BagProcessing
  endpoint:
    path: /api/v1/passenger/bag/generate
    method: GET
- name: PassengerIdentification
  endpoint:
    path: /api/v1/passenger/identify/by-barcoded-boarding-pass
    method: POST
- name: PassportCheck
  endpoint:
    path: /api/v1/passenger/check-passport
    method: POST
- name: Process
  endpoint:
    path: /api/v1/passenger/end-drop-off
    method: POST
- name: TravelDocumentCheck
  endpoint:
    path: /api/v1/passenger/check-travel-document
    method: POST
- name: VisaVerification
  endpoint:
    path: /api/v2/passenger/verified-visa
    method: POST
- name: flight_update
  endpoint:
    path: /update/aidx/flights/update
    method: POST
    data_selector: IATA_AIDX_FlightLegRS
    params: {}
- name: flight_update_put
  endpoint:
    path: /update/aidx/flights/update
    method: PUT
    data_selector: IATA_AIDX_FlightLegRS
    params: {}
- name: flight_delete
  endpoint:
    path: /update/aidx/flights/update
    method: DELETE
    data_selector: IATA_AIDX_FlightLegRS
    params: {}
- name: FlightLegNotification
  endpoint:
    path: /flights/update
    method: POST
- name: UpdateFlight
  endpoint:
    path: /flights/update
    method: PUT
- name: device
  endpoint:
    path: /gateaccess/v2/device/{deviceId}
    method: GET
- name: opengate
  endpoint:
    path: /gateaccess/v2/opengate
    method: POST
- name: closegate
  endpoint:
    path: /gateaccess/v2/closegate
    method: POST
- name: acceptpassenger
  endpoint:
    path: /gateaccess/v2/acceptpassenger
    method: POST
- name: rejectpassenger
  endpoint:
    path: /gateaccess/v2/rejectpassenger
    method: POST
- name: IATA_AIDX_FlightLegNotifRQ
  endpoint:
    path: /flights/update
    method: PUT
    data_selector: IATA_AIDX_FlightLegNotifRQ
- name: IATA_AIDX_FlightLegRS
  endpoint:
    path: /flights/update
    method: GET
    data_selector: IATA_AIDX_FlightLegRS
- name: flight_leg_notif
  endpoint:
    path: /IATA_AIDX_FlightLegNotifRQ
    method: DELETE
    data_selector: IATA_AIDX_FlightLegNotifRQ
    params: {}
- name: device
  endpoint:
    path: /print/v2/device/{deviceId}
    method: GET
- name: boardingpass
  endpoint:
    path: /print/v2/boardingpass/{type}
    method: POST
- name: boardingpass_aea
  endpoint:
    path: /print/v2/boardingpass/aea
    method: POST
- name: baggagetag
  endpoint:
    path: /print/v2/baggagetag/{type}
    method: POST
- name: baggagetag_aea
  endpoint:
    path: /print/v2/baggagetag/aea
    method: POST
- name: report
  endpoint:
    path: /print/v2/report
    method: POST
- name: flight_update
  endpoint:
    path: /update/aidx/flights/update
    method: POST
    data_selector: IATA_AIDX_FlightLegRS
    params: {}
- name: device
  endpoint:
    path: /scan/v2/device/{deviceId}
    method: GET
- name: start_scanning
  endpoint:
    path: /scan/v2/startscanning
    method: POST
- name: stop_scanning
  endpoint:
    path: /scan/v2/stopscanning
    method: POST
- name: FlightLeg
  endpoint:
    path: /IATA_AIDX_FlightLegNotifRQ
    method: POST
    data_selector: IATA_AIDX_FlightLegRS
    params: {}
- name: IATA_AIDX_FlightLegNotifRQ
  endpoint:
    path: /flights/update
    method: PUT
    data_selector: IATA_AIDX_FlightLegNotifRQ
- name: IATA_AIDX_FlightLegRS
  endpoint:
    path: /flights/update
    method: GET
    data_selector: IATA_AIDX_FlightLegRS
- name: incident
  endpoint:
    path: /api/v1/incidents
    method: GET
    data_selector: records
- name: IATA_AIDX_FlightLegNotifRQ
  endpoint:
    path: /flights/update
    method: DELETE
    data_selector: IATA_AIDX_FlightLegNotifRQ
    params: {}
- name: IATA_AIDX_FlightLegRS
  endpoint:
    path: /flights/update
    method: GET
    data_selector: IATA_AIDX_FlightLegRS
    params: {}
- name: Customer Incident
  endpoint:
    path: /GenericAPI_INC/GenericApiInboundSyncPS#CreateCustomerIncident
    method: POST
- name: Retrieve Incident Details
  endpoint:
    path: /GenericAPI_INC/GenericApiInboundSyncPS#ReadActivityLogIncident
    method: POST
- name: Customer Incident
  endpoint:
    path: /GenericAPI_INC/GenericApiInboundSyncPS#CreateCustomerIncident
    method: POST
- name: Retrieve Incident Details
  endpoint:
    path: /GenericAPI_INC/GenericApiInboundSyncPS#ReadActivityLogIncident
    method: POST
- name: device
  endpoint:
    path: /scan/v2/device/{deviceId}
    method: GET
- name: start_scanning
  endpoint:
    path: /scan/v2/startscanning
    method: POST
- name: stop_scanning
  endpoint:
    path: /scan/v2/stopscanning
    method: POST
- name: Customer Service Request
  endpoint:
    path: /GenericAPI_SR/GenericAPIInboundSRSyncPS#CreateCustomerSR
    method: POST
- name: Retrieve Service Request Details
  endpoint:
    path: /GenericAPI_SR/GenericAPIInboundSRSyncPS#ReadActivityLogSR
    method: POST
- name: incident
  endpoint:
    path: /service-management-incident-api
    method: GET
    data_selector: records
- name: SITA Smart Path Mobile
  endpoint:
    path: /contact/smart_path_mobile_product_team
    method: GET
- name: SITA Smart Path Hub
  endpoint:
    path: /contact/smart_path_hub_product_team
    method: GET
- name: Customer Incident
  endpoint:
    path: /GenericAPI_INC/GenericApiInboundSyncPS#CreateCustomerIncident
    method: POST
- name: Retrieve Incident Details
  endpoint:
    path: /GenericAPI_INC/GenericApiInboundSyncPS#ReadActivityLogIncident
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Customer Incident
  endpoint:
    path: /GenericAPI_INC/GenericApiInboundSyncPS#CreateCustomerIncident
    method: POST
- name: Retrieve Incident Details
  endpoint:
    path: /GenericAPI_INC/GenericApiInboundSyncPS#ReadActivityLogIncident
    method: POST
- name: Proactive PUSH payloads
  endpoint:
    path: /CREATE_INCIDENT_PUSH#SitatoCustomerPushCreateIncident
    method: POST
- name: Bag Journey
  endpoint:
    path: /sita-products/sita-bag-journey
    method: GET
- name: Service Request
  endpoint:
    path: /services/data/vXX.X/sobjects/ServiceRequest
    method: GET
    data_selector: records
- name: flight_connections
  endpoint:
    path: /connection/v1/routes/{origin}/{destination}
    method: GET
    data_selector: results
- name: Customer Service Request
  endpoint:
    path: /GenericAPI_SR/GenericAPIInboundSRSyncPS#CreateCustomerSR
    method: POST
- name: Retrieve Service Request Details
  endpoint:
    path: /GenericAPI_SR/GenericAPIInboundSRSyncPS#ReadActivityLogSR
    method: POST
- name: flight_connections
  endpoint:
    path: /v1/routes/{departure}/{arrival}
    method: GET
    data_selector: matchedRoutes
    params: {}
- name: flight_routes
  endpoint:
    path: /routes/{origin}/{destination}
    method: GET
    data_selector: response
    params:
      timeRange: '1440'
      preferredDate: '2022-05-10'
      limit: '50'
- name: routes
  endpoint:
    path: /v1/routes/{departure}/{arrival}
    method: GET
- name: flight_information
  endpoint:
    path: /v1/{departure}/{arrival}/{airline}/{flightNumber}
    method: GET
    data_selector: data
    params: {}
- name: flight_schedule_by_departure_and_arrival
  endpoint:
    path: /route/departure/{departureAirport}/arrival/{arrivalAirport}
    method: GET
- name: flight_schedule_by_airline
  endpoint:
    path: /route/departure/{departureAirport}/arrival/{arrivalAirport}/airline/{airline}
    method: GET
- name: flight_schedule_by_airline_and_flight_number
  endpoint:
    path: /route/departure/{departureAirport}/arrival/{arrivalAirport}/airline/{airline}/flightNumber/{flightNumber}
    method: GET
- name: flight_schedule_by_airport
  endpoint:
    path: /airport/{airportCode}/direction/{adi}
    method: GET
- name: flight_schedule_by_airline_only
  endpoint:
    path: /airline/{airline}
    method: GET
- name: flight_schedule_by_airline_and_flight_number_only
  endpoint:
    path: /airline/{airline}/flightNumber/{flightNumber}
    method: GET
- name: flight_connections
  endpoint:
    path: /connection/v1/routes/{departure}/{arrival}
    method: GET
    data_selector: results
- name: flight_schedule_by_departure_and_arrival
  endpoint:
    path: /route/departure/{departureAirport}/arrival/{arrivalAirport}
    method: GET
    data_selector: schedules
- name: flight_schedule_by_departure_arrival_and_airline
  endpoint:
    path: /route/departure/{departureAirport}/arrival/{arrivalAirport}/airline/{airline}
    method: GET
    data_selector: schedules
- name: flight_schedule_by_departure_arrival_airline_and_flight_number
  endpoint:
    path: /route/departure/{departureAirport}/arrival/{arrivalAirport}/airline/{airline}/flightNumber/{flightNumber}
    method: GET
    data_selector: schedules
- name: flight_schedule_by_airport_and_adi
  endpoint:
    path: /airport/{airportCode}/direction/{adi}
    method: GET
    data_selector: schedules
- name: flight_schedule_by_airline
  endpoint:
    path: /airline/{airline}
    method: GET
    data_selector: schedules
- name: flight_schedule_by_airline_and_flight_number
  endpoint:
    path: /airline/{airline}/flightNumber/{flightNumber}
    method: GET
    data_selector: schedules
- name: flight_connections
  endpoint:
    path: /routes/{origin}/{destination}
    method: GET
    data_selector: response
    params:
      timeRange: '1440'
      preferredDate: '2022-05-10'
      limit: '50'
- name: schedule
  endpoint:
    path: /v1/route/departure/{departure}/arrival/{arrival}
    method: GET
    data_selector: schedules
    params:
      operationDateFrom: '2020-07-06'
      operationDateTo: '2020-07-10'
      groupMarketingCarriers: 'true'
- name: flight_information
  endpoint:
    path: /v1/{departure}/{arrival}/{airline}/{flightNumber}
    method: GET
    data_selector: data
    params: {}
- name: schedule_by_departure_arrival_airline
  endpoint:
    path: /route/departure/{departure}/arrival/{arrival}/airline/{airline}
    method: GET
    data_selector: schedules
    params:
      operationDateFrom: '2020-07-06'
      operationDateTo: '2020-07-10'
      groupMarketingCarriers: 'true'
- name: schedule
  endpoint:
    path: /{version}/route/departure/{departure}/arrival/{arrival}/airline/{airline}/flightNumber/{flightNumber}
    method: GET
    data_selector: schedules
    params:
      operationDateFrom: yyyy-MM-dd
      operationDateTo: yyyy-MM-dd
      groupMarketingCarriers: 'false'
- name: schedule_by_airline
  endpoint:
    path: /schedule/v1/airline/{airline}
    method: GET
    data_selector: schedules
    params:
      operationDateFrom: '2020-07-06'
      operationDateTo: '2020-07-10'
      groupMarketingCarriers: 'true'
- name: route_departure_arrival
  endpoint:
    path: /route/departure/{departureAirport}/arrival/{arrivalAirport}
    method: GET
    data_selector: schedules
- name: route_departure_arrival_airline
  endpoint:
    path: /route/departure/{departureAirport}/arrival/{arrivalAirport}/airline/{airline}
    method: GET
    data_selector: schedules
- name: route_departure_arrival_airline_flightNumber
  endpoint:
    path: /route/departure/{departureAirport}/arrival/{arrivalAirport}/airline/{airline}/flightNumber/{flightNumber}
    method: GET
    data_selector: schedules
- name: airport_adi
  endpoint:
    path: /airport/{airportCode}/direction/{adi}
    method: GET
    data_selector: schedules
- name: airline
  endpoint:
    path: /airline/{airline}
    method: GET
    data_selector: schedules
- name: airline_flightNumber
  endpoint:
    path: /airline/{airline}/flightNumber/{flightNumber}
    method: GET
    data_selector: schedules
- name: schedule_by_airline_and_flight_number
  endpoint:
    path: /{version}/airline/{airline}/flightNumber/{flightNumber}
    method: GET
    data_selector: schedules
    params:
      operationDateFrom: yyyy-MM-dd
      operationDateTo: yyyy-MM-dd
      groupMarketingCarriers: 'false'
- name: flight_schedule
  endpoint:
    path: /route/departure/{departureAirport}/arrival/{arrivalAirport}
    method: GET
- name: flight_schedule_by_airline
  endpoint:
    path: /route/departure/{departureAirport}/arrival/{arrivalAirport}/airline/{airline}
    method: GET
- name: flight_schedule_by_airline_and_flight_number
  endpoint:
    path: /route/departure/{departureAirport}/arrival/{arrivalAirport}/airline/{airline}/flightNumber/{flightNumber}
    method: GET
- name: flight_schedule_by_airport
  endpoint:
    path: /airport/{airportCode}/direction/{adi}
    method: GET
- name: flight_schedule_by_airline_code
  endpoint:
    path: /airline/{airline}
    method: GET
- name: flight_schedule_by_airline_and_flight_number_code
  endpoint:
    path: /airline/{airline}/flightNumber/{flightNumber}
    method: GET
- name: schedule_by_airport_and_adi
  endpoint:
    path: /schedule/v1/airport/{airport}/direction/{adi}
    method: GET
    data_selector: schedules
    params:
      operationDateFrom: '2022-10-17'
      operationDateTo: '2022-10-24'
      groupMarketingCarriers: 'true'
- name: route_departure_arrival
  endpoint:
    path: /schedule/v1/route/departure/{departure}/arrival/{arrival}
    method: GET
    data_selector: records
    params:
      operationDateFrom: '2022-07-30'
      operationDateTo: '2022-07-31'
      groupMarketingCarriers: 'true'
      pageSize: '-1'
- name: schedule_by_departure_and_arrival
  endpoint:
    path: /{version}/route/departure/{departure}/arrival/{arrival}
    method: GET
    data_selector: schedules
    params:
      operationDateFrom: yyyy-MM-dd
      operationDateTo: yyyy-MM-dd
      groupMarketingCarriers: 'false'
- name: flight_by_airline_and_flight_number
  endpoint:
    path: /flightinfo/v2/flights/airline/{airlineCode}/flightNumber/{flightNumber}
    method: GET
    data_selector: errors.error
    params: {}
- name: schedule_by_departure_arrival_and_airline
  endpoint:
    path: /route/departure/{departure}/arrival/{arrival}/airline/{airline}
    method: GET
    data_selector: ''
    params:
      operationDateFrom: yyyy-MM-dd
      operationDateTo: yyyy-MM-dd
      groupMarketingCarriers: 'false'
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: schedule
  endpoint:
    path: /route/departure/{departure}/arrival/{arrival}/airline/{airline}/flightNumber/{flightNumber}
    method: GET
    data_selector: schedules
    params:
      operationDateFrom: '2020-07-06'
      operationDateTo: '2020-07-10'
      groupMarketingCarriers: 'true'
- name: schedule_by_airline
  endpoint:
    path: /airline/{airline}
    method: GET
    data_selector: schedules
    params:
      operationDateFrom: yyyy-MM-dd
      operationDateTo: yyyy-MM-dd
      groupMarketingCarriers: 'false'
- name: flight_by_airline_and_flight_number
  endpoint:
    path: /flifo/flightinfo/v2/flights/airline/{airlineCode}/flightNumber/{flightNumber}
    method: GET
    data_selector: flightRecords
    params:
      operationDate: '2020-01-22'
- name: flights_by_airport_airline_and_direction
  endpoint:
    path: /flightinfo/v2/flights/airport/{airportCode}/airline/{airlineCode}/direction/{direction}
    method: GET
    data_selector: flightRecords
    params:
      operationDate: current UTC date
      pastWindow: '0'
      futureWindow: '4'
      searchByUTC: 'false'
      showCargo: 'false'
      groupMarketingCarriers: 'false'
      departureOrArrivalAirport: ''
      view: local
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: schedule_by_airline_and_flight_number
  endpoint:
    path: /v1/airline/{airline}/flightNumber/{flightNumber}
    method: GET
    data_selector: schedules
    params:
      operationDateFrom: '2020-07-06'
      operationDateTo: '2020-07-10'
      groupMarketingCarriers: 'true'
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flights
  endpoint:
    path: /flifo/flightinfo/v2/flights/airport/{airportCode}/direction/{direction}
    method: GET
    data_selector: flightRecords
    params:
      operationDate: '2020-01-22T12:00:00'
- name: schedule_by_airport_and_adi
  endpoint:
    path: /v1/airport/{airport}/direction/{adi}
    method: GET
    data_selector: schedules
    params:
      operationDateFrom: yyyy-MM-dd
      operationDateTo: yyyy-MM-dd
      groupMarketingCarriers: 'false'
- name: error_response
  endpoint:
    path: /v1/route/departure/{departure}/arrival/{arrival}
    method: GET
    data_selector: errors.error
    params:
      operationDateFrom: yyyy-MM-dd
      operationDateTo: yyyy-MM-dd
      groupMarketingCarriers: 'true'
      pageSize: '-1'
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flights_by_airport_and_direction
  endpoint:
    path: /flights/airport/{airport}/direction/{direction}
    method: GET
    params:
      operationDate: '2020-01-22T12:00:00'
- name: flight_updates
  endpoint:
    path: /flightinfo/v2/flights/updates/airport/{airportCode}/airline/{airlineCode}/flightNumber/{flightNumber}
    method: GET
    params: {}
- name: flight_by_airline_and_flight_number
  endpoint:
    path: /flifo/flightinfo/v2/flights/airline/{airlineCode}/flightNumber/{flightNumber}
    method: GET
    data_selector: records
    params:
      operationDate: current UTC date
      searchByUTC: 'false'
      showCargo: 'false'
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flight_updates
  endpoint:
    path: /flifo/flightinfo/v2/flights/updates/airport/{airportCode}/airline/{airlineCode}
    method: GET
    data_selector: flightRecords
    params:
      from: 2020-01-01T12:00:00-0000
      to: 2020-01-01T12:05:00-0000
      includeUpdates: 'false'
      groupMarketingCarriers: 'false'
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
- name: flights_by_airline_and_flight_number
  endpoint:
    path: /flifo/flightinfo/v2/flights/airline/{airlineCode}/flightNumber/{flightNumber}
    method: GET
    data_selector: flightRecords
    params:
      operationDate: '2020-01-22'
- name: flights_by_airport_airline_and_direction
  endpoint:
    path: /flifo/flightinfo/v2/flights/airport/{airportCode}/airline/{airlineCode}/direction/{direction}
    method: GET
    data_selector: flightRecords
    params:
      operationDate: current UTC date
      pastWindow: 0
      futureWindow: 4
      searchByUTC: false
      showCargo: false
      groupMarketingCarriers: false
      view: local
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flight_updates
  endpoint:
    path: /flifo/flightinfo/v2/flights/updates/airport/AMS/airline/KL
    method: GET
    params:
      from: '2020-01-22T12:00:00.000Z'
      to: '2020-01-22T13:00:00.000Z'
- name: flight_records
  endpoint:
    path: /flight_records
    method: GET
    data_selector: flightRecords
- name: flights
  endpoint:
    path: /flifo/flightinfo/v2/flights/airport/{airportCode}/direction/{direction}
    method: GET
    data_selector: flightRecords
- name: flight_updates_by_airport
  endpoint:
    path: /flightinfo/v2/flights/updates/airport/{airportCode}
    method: GET
    data_selector: ''
    params:
      from: ''
      to: ''
      includeUpdates: ''
      groupMarketingCarriers: 'false'
      groupRecords: ''
      verbose: ''
      showCargo: 'false'
      arrivalDeparture: ''
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flights_by_airport_and_direction
  endpoint:
    path: /flifo/flightinfo/v2/flights/airport/{airport}/direction/{direction}
    method: GET
    data_selector: records
    params:
      operationDate: '2020-01-22T12:00:00'
- name: flight_updates
  endpoint:
    path: /flifo/flightinfo/v2/flights/updates/airport/AMS
    method: GET
    params:
      from: '2020-01-22T12:00:00.000Z'
      to: '2020-01-22T13:00:00.000Z'
- name: flight_records
  endpoint:
    path: /flights
    method: GET
    data_selector: flightRecords
- name: flight_updates
  endpoint:
    path: /flightinfo/v2/flights/updates/airport/{airportCode}/airline/{airlineCode}/flightNumber/{flightNumber}
    method: GET
    params:
      operationDate: yyyy-MM-dd
      from: 2020-01-01T12:00:00-0000
      to: 2020-01-01T12:05:00-0000
      includeUpdates: ''
      groupMarketingCarriers: 'false'
      groupRecords: ''
      verbose: ''
      showCargo: 'false'
- name: flight_updates
  endpoint:
    path: /getFlightUpdates
    method: GET
    params:
      from: current UTC date/time - 2 minutes
      to: current UTC date/time - 1 minutes
      includeUpdates: ''
      groupMarketingCarriers: 'false'
      groupRecords: ''
      verbose: ''
      showCargo: 'false'
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flights_updates
  endpoint:
    path: /flifo/flightinfo/v2/flights/updates
    method: GET
    params:
      from: '2020-01-22T12:00:00.000Z'
      to: '2020-01-22T13:00:00.000Z'
- name: flight_updates
  endpoint:
    path: /flightinfo/v2/flights/updates/airport/{airportCode}/airline/{airlineCode}
    method: GET
    data_selector: flightRecords
    params:
      from: 2020-01-01T12:00:00-0000
      to: 2020-01-01T12:05:00-0000
      includeUpdates: 'false'
      groupMarketingCarriers: 'false'
- name: flight_records
  endpoint:
    path: /flight/records
    method: GET
    data_selector: flightRecords
- name: flights
  endpoint:
    path: /flifo/flightinfo/v2/flights/airport/JFK/airline/B6/direction/D
    method: GET
    data_selector: flightRecords
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flight_details
  endpoint:
    path: /aci-v1/flightDetails/{airlineCode}/{flightNumber}/{operationDate}/{departureAirportCode}/{arrivalAirportCode}
    method: GET
- name: flights_by_airport_and_direction
  endpoint:
    path: /aci-v1/flight/{airportCode}/{direction}
    method: GET
- name: flight_updates
  endpoint:
    path: /flifo/flightinfo/v2/flights/updates/airport/AMS/airline/KL
    method: GET
    params:
      from: '2020-01-22T12:00:00.000Z'
      to: '2020-01-22T13:00:00.000Z'
- name: flight_status
  endpoint:
    path: /flightstatus
    method: GET
    data_selector: '[]'
    params: {}
- name: flight_records
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
- name: flight_updates
  endpoint:
    path: /flightinfo/v2/flights/updates/airport/{airportCode}
    method: GET
    data_selector: updates
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
- name: all_flights_search_for_airport
  endpoint:
    path: /flightinfo/v2/flights/airport/MUC/direction/D
    method: GET
    data_selector: records
    params: {}
- name: all_flights_search_airport_airline_combination
  endpoint:
    path: /flightinfo/v2/flights/airport/MUC/airline/LH/direction/D
    method: GET
    data_selector: records
    params: {}
- name: individual_flight_search_from_airport
  endpoint:
    path: /flightinfo/v2/flights/airport/MUC/airline/LH/flightNumber/2038/direction/D
    method: GET
    data_selector: records
    params: {}
- name: individual_flight_search
  endpoint:
    path: /flightinfo/v2/flights/airline/LH/flightNumber/2038
    method: GET
    data_selector: records
    params: {}
- name: all_flights_search_acris
  endpoint:
    path: /aci-v1/flight/MUC/departure
    method: GET
    data_selector: records
    params: {}
- name: individual_flight_search_acris
  endpoint:
    path: /aci-v1/flightDetails/BA/15/2020-03-04/LHR/SIN
    method: GET
    data_selector: records
    params: {}
- name: flight_status
  endpoint:
    path: /flifo/flightinfo/v2/flights/airline/AC/flightNumber/43
    method: GET
    data_selector: flightRecords
    params:
      operationDate: '2022-05-11'
      view: full
- name: flight_updates
  endpoint:
    path: /flifo/flightinfo/v2/flights/updates/airport/AMS
    method: GET
    data_selector: flights
    params:
      from: '2020-01-22T12:00:00.000Z'
      to: '2020-01-22T13:00:00.000Z'
- name: flight_records
  endpoint:
    path: /flight/records
    method: GET
    data_selector: flightRecords
- name: flight_updates
  endpoint:
    path: /getFlightUpdates
    method: GET
    params:
      from: 2020-01-01T12:00:00-0000
      to: 2020-01-01T12:05:00-0000
      includeUpdates: null
      groupMarketingCarriers: 'false'
      groupRecords: null
      verbose: null
      showCargo: 'false'
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
- name: flight_updates
  endpoint:
    path: /flifo/flightinfo/v2/notifications
    method: POST
    data_selector: ''
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
- name: unsubscribe_flight_updates
  endpoint:
    path: /flifo/flightinfo/v2/notifications
    method: DELETE
    data_selector: subscribedForUpdates
    params: {}
- name: flight_updates
  endpoint:
    path: /flifo/flightinfo/v2/flights/updates
    method: GET
    params:
      from: '2020-01-22T12:00:00.000Z'
      to: '2020-01-22T13:00:00.000Z'
- name: flight_records
  endpoint:
    path: /flight_records
    method: GET
    data_selector: flightRecords
- name: flight_status
  endpoint:
    path: /flights/status
    method: GET
    data_selector: flights
    params: {}
- name: flights
  endpoint:
    path: /flifo/flightinfo/v2/flights/airport/JFK/airline/B6/direction/D
    method: GET
    data_selector: flightRecords
    params:
      view: local
- name: flight_status
  endpoint:
    path: /flight/status
    method: GET
    data_selector: flightRecord
- name: flight_details
  endpoint:
    path: /aci-v1/flightDetails/{airlineCode}/{flightNumber}/{operationDate}/{departureAirportCode}/{arrivalAirportCode}
    method: GET
    data_selector: records
- name: flights_by_airport
  endpoint:
    path: /aci-v1/flight/{airportCode}/{direction}
    method: GET
    data_selector: records
- name: Get Flight by Airline and Flight Number
  endpoint:
    path: /v2/flights/airline/{airlineCode}/flightNumber/{flightNumber}
    method: GET
    data_selector: response
    params:
      operationDate: current UTC date
      searchByUTC: 'false'
      showCargo: 'false'
- name: flight_status
  endpoint:
    path: /flight-status
    method: GET
    data_selector: '[*]'
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: all_departures_airport
  endpoint:
    path: /flightinfo/v2/flights/airport/MUC/direction/D
    method: GET
    data_selector: records
    params: {}
- name: all_departures_airport_airline_combination
  endpoint:
    path: /flightinfo/v2/flights/airport/MUC/airline/LH/direction/D
    method: GET
    data_selector: records
    params: {}
- name: individual_flight_search_airport
  endpoint:
    path: /flightinfo/v2/flights/airport/MUC/airline/LH/flightNumber/2038/direction/D
    method: GET
    data_selector: records
    params: {}
- name: all_flights_search_acris
  endpoint:
    path: /aci-v1/flight/MUC/departure
    method: GET
    data_selector: records
    params: {}
- name: individual_flight_search_acris
  endpoint:
    path: /aci-v1/flightDetails/BA/15/2020-03-04/LHR/SIN
    method: GET
    data_selector: records
    params: {}
- name: flights_by_airline_and_flight_number
  endpoint:
    path: /flights/airline/{airlineCode}/flightNumber/{flightNumber}
    method: GET
    data_selector: flightRecords
- name: flights_by_airport_airline_and_direction
  endpoint:
    path: /flights/airport/{airportCode}/airline/{airlineCode}/direction/{direction}
    method: GET
    data_selector: flightRecords
- name: flight_info
  endpoint:
    path: /flifo/flightinfo/v2/flights/airline/AC/flightNumber/43
    method: GET
    data_selector: flightRecords
    params:
      operationDate: '2022-05-11'
      view: full
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flight_updates
  endpoint:
    path: /flifo/flightinfo/v2/notifications
    method: POST
    data_selector: subscribedForUpdates
    params: {}
- name: flights
  endpoint:
    path: /flights/airport/{airportCode}/direction/{direction}
    method: GET
    data_selector: flightRecords
    params:
      operationDate: yyyy-MM-dd
      searchByUTC: 'false'
      showCargo: 'false'
      departureOrArrivalAirport: ''
      view: local
- name: unsubscribe_flight_updates
  endpoint:
    path: /flifo/flightinfo/v2/notifications
    method: DELETE
    data_selector: subscribedForUpdates
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flight_status_notification
  endpoint:
    path: /flights/status/notification
    method: POST
    data_selector: request
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flight_status_update
  endpoint:
    path: /flights/status
    method: POST
    data_selector: updates
- name: flight_status
  endpoint:
    path: /flight/status
    method: GET
    data_selector: flightRecord
- name: flights_by_airport_and_direction
  endpoint:
    path: /flights/airport/{airportCode}/direction/{direction}
    method: GET
    data_selector: flightRecords
    params:
      operationDate: '2021-04-01'
- name: flight_updates_by_airport_airline_flight_number
  endpoint:
    path: /flights/updates/airport/{airportCode}/airline/{airlineCode}/flightNumber/{flightNumber}
    method: GET
    data_selector: flightRecords
- name: flight_updates_by_airport_and_airline
  endpoint:
    path: /flights/updates/airport/{airportCode}/airline/{airlineCode}
    method: GET
    data_selector: flightRecords
- name: flight_updates_by_airport_and_airline
  endpoint:
    path: /flights/updates/airport/{airportCode}/airline/{airlineCode}
    method: GET
    data_selector: flightRecords
    params:
      from: '2021-04-01T03:00:00.000Z'
      to: '2021-04-01T04:00:00.000Z'
- name: flight_updates_by_airport
  endpoint:
    path: /flights/updates/airport/{airportCode}
    method: GET
    data_selector: flightRecords
    params:
      from: '2021-04-01T03:00:00.000Z'
      to: '2021-04-01T04:00:00.000Z'
- name: flights
  endpoint:
    path: /v2/flights/airline/{airlineCode}/flightNumber/{flightNumber}
    method: GET
    params:
      operationDate: yyyy-MM-dd
      searchByUTC: 'false'
      showCargo: 'false'
- name: flight_records
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flight_updates
  endpoint:
    path: /historical/v2/flights/updates/airport/{airport}
    method: GET
    data_selector: flightRecords
    params: {}
- name: flight_details
  endpoint:
    path: /historical/v2/flights/airport/{airport}/direction/{direction}
    method: GET
    data_selector: flightRecords
    params: {}
- name: flights_by_airline_and_flight_number
  endpoint:
    path: /flights/airline/{airlineCode}/flightNumber/{flightNumber}
    method: GET
    data_selector: flightRecords
    params:
      operationDate: '2021-04-01'
- name: flights_by_airport_airline_and_direction
  endpoint:
    path: /flights/airport/{airportCode}/airline/{airlineCode}/direction/{direction}
    method: GET
    data_selector: flightRecords
    params:
      operationDate: current UTC date
      searchByUTC: 'false'
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flights
  endpoint:
    path: /flights/airport/{airportCode}/direction/{direction}
    method: GET
    data_selector: flightRecords
    params:
      operationDate: '2021-04-01'
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flights_by_airport
  endpoint:
    path: /v1/{airportCode}/{arrivalDeparture}
    method: GET
    data_selector: flightRecords
- name: flightRecords
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
    params: {}
- name: flight_updates_by_airport_and_direction
  endpoint:
    path: /flights/airport/{airportCode}/direction/{direction}
    method: GET
    data_selector: flightRecords
- name: flight_updates_by_airport_airline_flight_number
  endpoint:
    path: /flights/updates/airport/{airportCode}/airline/{airlineCode}/flightNumber/{flightNumber}
    method: GET
    data_selector: flightRecords
- name: flight_updates_by_airport_and_airline
  endpoint:
    path: /flights/updates/airport/{airportCode}/airline/{airlineCode}
    method: GET
    data_selector: flightRecords
- name: flight_updates_by_airport_and_airline
  endpoint:
    path: /v2/flights/updates/airport/{airportCode}/airline/{airlineCode}
    method: GET
    data_selector: flightRecords
    params:
      from: '2021-04-01T03:00:00.000Z'
      to: '2021-04-01T04:00:00.000Z'
- name: flight_updates_by_airport
  endpoint:
    path: /v2/flights/updates/airport/{airportCode}
    method: GET
    data_selector: flightRecords
    params:
      from: '2021-04-01T03:00:00.000Z'
      to: '2021-04-01T04:00:00.000Z'
- name: flight_records
  endpoint:
    path: /flightRecords
    method: GET
    data_selector: flightRecords
- name: airlines
  endpoint:
    path: /data/v1/airlines
    method: GET
    data_selector: airlines
- name: airline_by_code
  endpoint:
    path: /data/v1/airlines/{airlineCode}
    method: GET
    data_selector: airlines
- name: flight_updates
  endpoint:
    path: /historical/v2/flights/updates/airport/{airport}
    method: GET
    data_selector: flightRecords
    params: {}
- name: flight_details
  endpoint:
    path: /historical/v2/flights/airport/{airport}/direction/{direction}
    method: GET
    data_selector: flightRecords
    params: {}
- name: airports_match
  endpoint:
    path: /airports/match/{airportNamePartial}
    method: GET
    data_selector: airports
- name: airport_by_code
  endpoint:
    path: /airports/{airportCode}
    method: GET
    data_selector: airports
- name: all_airports
  endpoint:
    path: /airports
    method: GET
    data_selector: airports
- name: distance_between_airports
  endpoint:
    path: /airports/distance/{airportCode1}/{airportCode2}
    method: GET
    data_selector: success
- name: nearest_airport
  endpoint:
    path: /airports/nearest/{latitude}/{longitude}
    method: GET
    data_selector: airports
- name: same_country_check
  endpoint:
    path: /airports/samecountry/{airportCode1}/{airportCode2}
    method: GET
    data_selector: success
- name: current_weather
  endpoint:
    path: /weather/v2/current/{location}
    method: GET
    data_selector: current_conditions
- name: weather_forecast
  endpoint:
    path: /weather/v2/forecast/{location}
    method: GET
    data_selector: forecast_conditions
- name: combined_weather
  endpoint:
    path: /weather/v2/combined/{location}
    method: GET
    data_selector: combined_conditions
- name: flights_by_airport
  endpoint:
    path: /v1/{airportCode}/{arrivalDeparture}
    method: GET
    data_selector: flightRecords
- name: current_weather
  endpoint:
    path: /v2/current/{location}
    method: GET
    data_selector: currentWeather
    params: {}
- name: forecast_weather
  endpoint:
    path: /v2/forecast/{location}
    method: GET
    data_selector: weatherForecast
    params: {}
- name: combined_weather
  endpoint:
    path: /v2/combined/{location}
    method: GET
    data_selector: currentWeather
    params: {}
- name: Flight Duration Service
  endpoint:
    path: /v2/{originAirport}/{destinationAirport}
    method: GET
- name: Flight Duration Service by Airline
  endpoint:
    path: /v2/{originAirport}/{destinationAirport}/{airlineCode}
    method: GET
- name: airlines
  endpoint:
    path: /v1/airlines
    method: GET
    data_selector: airlines
- name: airline_by_code
  endpoint:
    path: /v1/airlines/{airlineCode}
    method: GET
    data_selector: airlines
- name: airline_match
  endpoint:
    path: /v1/airlines/match/{searchTerm}
    method: GET
    data_selector: airlines
- name: airports_match
  endpoint:
    path: /data/v3/airports/match/{airportNamePartial}
    method: GET
    data_selector: airports
- name: airport_by_code
  endpoint:
    path: /data/v3/airports/{airportCode}
    method: GET
    data_selector: airports
- name: all_airports
  endpoint:
    path: /data/v3/airports
    method: GET
    data_selector: airports
- name: distance_between_airports
  endpoint:
    path: /data/v3/airports/distance/{airportCode1}/{airportCode2}
    method: GET
    data_selector: distance
- name: nearest_airport
  endpoint:
    path: /data/v3/airports/nearest/{latitude}/{longitude}
    method: GET
    data_selector: airports
- name: same_country_check
  endpoint:
    path: /data/v3/airports/samecountry/{airportCode1}/{airportCode2}
    method: GET
    data_selector: sameCountry
- name: current_weather
  endpoint:
    path: /weather/v2/current/{location}
    method: GET
- name: weather_forecast
  endpoint:
    path: /weather/v2/forecast/{location}
    method: GET
- name: combined_weather
  endpoint:
    path: /weather/v2/combined/{location}
    method: GET
- name: current_weather
  endpoint:
    path: /v2/current/{location}
    method: GET
    data_selector: currentWeather
- name: forecast_weather
  endpoint:
    path: /v2/forecast/{location}
    method: GET
    data_selector: weatherForecast
- name: combined_weather
  endpoint:
    path: /v2/combined/{location}
    method: GET
    data_selector: currentWeather
- name: flight_duration
  endpoint:
    path: /v2/{originAirport}/{destinationAirport}
    method: GET
- name: flight_duration_by_airline
  endpoint:
    path: /v2/{originAirport}/{destinationAirport}/{airlineCode}
    method: GET
notes:
- OAuth tokens have an expiry of one hour after retrieval.
- Users are authenticated using their API key.
- OAuth tokens expire after one hour.
- BagJourney API is only available to customers that have an existing association
  with an airline.
- Successful response includes a Success element.
- Requires XML formatted request body.
- OAuth tokens have an expiry of one hour after being retrieved.
- For information related to registering for and accessing an api key, please refer
  to the document linked in the overview.
- Requires setup of connected app in API
- Requires setup of connected app for authentication.
- API allows customers to CREATE new incident records.
- Real-time updates regarding incident records are provided.
- To request access to Service Management APIs, you must first register for a developer.aero
  account.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Access to Service Management APIs can be requested once you have completed account
  registration and authentication on developer.aero.
- API allows customers to CREATE, READ and UPDATE Service Request records.
- Users are authenticated using their OAuth token.
- All incoming requests will be REST over HTTPS.
- OAuth tokens expire after one hour
- OAuth tokens expire after one hour and need to be refreshed.
- Valid IATA/ICAO airport codes must be provided for departure and arrival.
- All incoming requests are subject to a rate limiting restriction.
- If operationDateTo is not defined, a 3 days window will be used based on operationDateFrom.
- Continuation token indicates more results are available.
- If operationDateTo is not defined, a 3 days window will be used based on operationDateFrom
  or the current UTC date.
- Valid IATA/ICAO departure and arrival Airport Codes are required.
- The API key used in the REST call will be included in the response headers.
- Valid formats for operationDateFrom and operationDateTo are 'yyyy-MM-dd'.
- Default value for operationDate is current UTC date
- Default value for pastWindow is 0
- Default value for futureWindow is 4
- Default value for searchByUTC is false
- Default value for showCargo is false
- Default value for groupMarketingCarriers is false
- Default value for view is local
- If the operation date is not provided, the search is based on the current UTC date/time.
- The API provides flight status updates.
- Payload elements are filtered based on permissions associated with the 'x-apikey'
  used in the request.
- Matched records may vary based on the input criteria.
- Flight status data includes information such as operating airline, aircraft type,
  flight number, and status.
- Includes updates for flight status.
- Data includes details about operating and marketing carriers.
- Matched records can vary based on the query parameters provided.
- OAuth tokens expire one hour after retrieval.
- The body of the DELETE request must match exactly with the corresponding POST message
  body used to create the subscription.
- The 'view' parameter can have the value 'local' or 'full' (default value is 'local').
- Group updates and marketing carriers features available.
- OAuth tokens have an expiry of one hour after they are retrieved.
- Payload elements are filtered based on permissions associated with the 'X-apiKey'
  used in the request.
- If operation date is not provided, search is based on the current UTC date/time.
- Default value of 'view' parameter is 'local'.
- Uses view=local or view=full depending on user subscription
- Fields not available will be omitted from the payload
- User requested 'view=full' which returns both departure and arrival details.
- Flight diversions are unforeseen events which can be caused by factors such as Aircraft
  emergency, Passenger emergency, Mechanical failure, Poor weather conditions.
- The date range defined by the 'from' and 'to' query parameters may not exceed 60
  minutes.
- OAuth tokens have an expiry of one hour after retrieval
- The 'view' query parameter can have the value 'local' or 'full' (default value is
  'local').
- If operation date is not provided, the search is based on the current UTC date/time.
- User can adjust the search window by providing values for the pastWindow/futureWindow.
- If the operation date is not provided the search is based on the current UTC date/time.
- The user can adjust the search window by providing values for the pastWindow/futureWindow
  in their request.
- OAuth tokens have an expiry of one hour after the token has been retrieved.
- Authorization header that contains the access token.
- Flight records contain detailed information including departure and arrival slots,
  events, and statistics.
- OAuth tokens expire one hour after retrieval. Re-issue requests are needed for new
  tokens.
- Rate limiting is applied to all incoming requests.
- Certain response payload elements will be filtered based on permissions associated
  with the token
- Authorization header contains the access token.
- OAuth tokens have an expiry of one hour.
errors:
- 'Rate limit exceeded: Check X-RateLimit headers for details.'
- '2020: Airport not found'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- Unexpected EOF at target
- 'Unexpected EOF at target: TARGET_READ_UNEXPECTED_EOF'
- '1007: Service Exception'
- '200 OK: Success indicator'
- 'E001: Apikey Validation Failed'
- 'E004: Schema Validation Exception'
- 'E005: Missing Mandatory fields'
- 'E006: Invalid Mandatory fields'
- 'E007: Ticket Not Found'
- 'E008: Ticket Not Found'
- 'E009: Ticket Not Found'
- 'E010: Ticket Not Found'
- 'E011: Ticket Not Found'
- 'E012: Invalid Status'
- 'E013: Future fromDate cannot be validated'
- 'E014: Future toDate cannot be validated'
- 'E015: FromDate Is Greater Than ToDate'
- 'E016: Date Range Should Not Exceed 12 Months'
- 'E017: FromDate - Invalid date format. Please enter the date in the format YYYY
  - MM - DD'
- 'E018: Incident can not be created - customer/supplier number already exist'
- 'E001: Apikey Validation Failed'
- 'E019: Module Does not Exist'
- 'E017: FromDate - Invalid date format'
- 'E021: Affected End User / User Does Not Exists'
- 'E022: toDate - Invalid date format'
- 'E025: Future FromTimeStamps cannot be validated'
- 'E026: Future ToTimeStamps cannot be validated'
- 'E027: FromTimeStamps Is Greater Than ToTimeStamps'
- 'E028: No Record found for the given timestamps range'
- 'E029: Cannot Update The Incident With Attachment -Incident does not belongs to
  User'
- 'E030: Ticket Not Found - Read Attachment'
- 'E031: Attachment Not Found'
- 'E032: Invalid Request - Attachment Not Exists'
- 'E033: Attachment Not Found - Not Belongs to the company'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'E029: Cannot Update The Incident With Attachment - Incident does not belong to
  User - Internal(getSysID)'
- 'E035: DowntimeEndTime - Invalid date format. Please enter the date in the format
  YYYY - MM - DD'
- 'E036: Please Provide Valid Format For FromTimeStamps As ''YYYY-MM-DD'',''HH:MM:SS'''
- 'E037: Please Provide Valid Format For ToTimeStamps As ''YYYY-MM-DD'',''HH:MM:SS'''
- 'E038: Please Provide Valid Format For FromTimeStamps And ToTimeStamps As ''YYYY-MM-DD'',''HH:MM:SS'''
- 'E043: Affected End User and E-Mail id can not different'
- 'E044: Cannot Resolve - Ticket Not in Work In Progress'
- 'E045: Assignment Group Is Not Valid - HR/Fin/Isdu'
- 'E046: DowntimeEndTime - Invalid date format. Please enter the date in the format
  YYYY - MM - DD'
- '1001: Airport not found'
- 'Rate limit exceeded: Check the rate limit headers in the response'
- 'Rate limit exceeded: Check X-RateLimit-Remaining header.'
- '401 Unauthorized: Ensure valid Authorization token.'
- code: 2028
  description: Invalid page size.
  invalidParam: pageSize
  invalidValue: Please contact API Support
- '400 Bad Request: Check request parameters and headers'
- '401 Unauthorized: Ensure valid API key and token'
- '429 Too Many Requests: Rate limit exceeded'
- '2028: Invalid page size.'
- '400 Bad Request: Check your request parameters or headers.'
- '401 Unauthorized: Ensure your API key is correct and has not expired.'
- 'Rate limiting: Check the response headers for rate limit information.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck API key validity.'
- '400 Bad Request: Error Description'
- '9999: API Internal Error Code'
- '400 Bad Request: Check request format and required fields.'
- '401 Unauthorized: Verify API key and authorization header.'
- 'Rate limit exceeded: Reduce request frequency.'
- '400 Bad Request: Check request parameters and format.'
- '401 Unauthorized: Verify OAuth token and API key.'
- 'Rate Limit Exceeded: Reduce request frequency.'
- '401 Unauthorized: Invalid token'
- '400 Bad Request: Check query parameters or request format.'
- '400 Bad Request: Airport not found.'
- '429 Too Many Requests: Rate limit exceeded.'
- '400 Bad Request: Error description, code, and invalid parameter may be included
  in the response.'
- Rate limiting restrictions are applied to all incoming requests
- '400 Bad Request: Check your request parameters and syntax.'
- '404 Not Found: Ensure the airport code or path is correct.'
- '401 Unauthorized: Verify your access token.'
- '2020: Airport not found.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://flifo.api.aero
  headers:
    Content-Type: application/xml
    Accept: application/xml
source_metadata: null
