resources:
- name: memchr
  endpoint:
    path: /memchr
    method: GET
    data_selector: records
- name: memmem
  endpoint:
    path: /memmem
    method: GET
    data_selector: records
notes:
- Crossbeam Channel supports stable Rust releases going back at least six months,
  and every time the minimum supported Rust version is increased, a new minor version
  is released. Currently, the minimum supported Rust version is 1.60.
- This crate's minimum supported rustc version is 1.60.0.
- This crate's minimum supported rustc version is 1.41.1.
- This library provides heavily optimized routines for string search primitives.
- Dual-licensed under MIT or the UNLICENSE.
- Crate provides its own implementation of memchr that should perform competitively
  with the one found in GNU's libc.
- Minimum Rust version required to use this crate is 1.28.0.
- The current policy is that the minimum Rust version required to use this crate can
  be increased in minor version updates.
- Improvements to the testing infrastructure are very welcome.
- This crate provides its own implementation of memchr that should perform competitively
  with the one found in GNU's libc.
- 'memchr links to the standard library by default, but you can disable the std feature
  if you want to use it in a #![no_std] crate.'
- The minimum supported rustc version is 1.28.0.
- This crate provides fallback implementations when either function is unavailable.
- The crate supports the current and previous stable versions of the Rust compiler.
- To use bytes with no_std environment, disable the std feature.
- To use bytes with no_std environment without atomic CAS, enable the extra-platforms
  feature.
- This library does not tackle as expansive of a range of use cases as pin-project
  does.
- This macro does not handle any invalid input. So error messages are not to be useful
  in most cases.
- Tokio doesn't follow a fixed release schedule, but we typically make one minor release
  each month.
- This crate's minimum supported rustc version (MSRV) is 1.73.
- Requires Rust 1.56 or later
- Futures-rs works without the standard library in bare metal environments
- Dynamic collections implemented with compact bit vectors.
- Futures-rs works without the standard library, such as in bare metal environments.
- A major missing piece of the Rust ecosystem has been how to work with Asynchronous
  I/O and in general composing many I/O tasks together in a lightweight way across
  libraries.
- The purpose of the futures library in this repository is to provide the foundational
  layer to build an ecosystem of futures-generating computations so they can all compose
  with one another.
- Requires Rust 1.56 or later.
- Works without the standard library, such as in bare metal environments.
- 'It has a significantly reduced API surface when used in a #[no_std] environment.'
- works without the standard library, such as in bare metal environments.
- has a significantly reduced API surface.
- The FNV hash function is a custom Hasher implementation that is more efficient for
  smaller hash keys.
- Its disadvantages are that it performs badly on larger inputs, and provides no protection
  against collision attacks.
- This library is an implementation of zero-cost futures in Rust.
- futures-rs is primarily distributed under the terms of both the MIT license and
  the Apache License (Version 2.0), with portions covered by various BSD-like licenses.
- Rayon currently requires rustc 1.63.0 or greater.
- Uses foldhash as the default hasher, which is much faster than SipHash
- Empty hash maps do not allocate any memory
- This version of indexmap requires Rust 1.36 or later.
- This crate's minimum supported rustc version is 1.61.0.
- This version of indexmap requires Rust 1.49 or later.
- The indexmap 1.x release series will use a carefully considered version upgrade
  policy, where in a later 1.x version, we will raise the minimum required Rust version.
- 'memchr links to the standard library by default, but you can disable the std feature
  if you want to use it in a #![no_std] crate'
- This crate allows searching both UTF-8 and arbitrary bytes.
- The minimum supported rustc version is 1.61.0.
- This version of indexmap requires Rust 1.32 or later, or Rust 1.36+ for using with
  alloc (without std)
- The crate allows searching in &[u8] without regard to encoding.
- 'The API is fully documented: https://docs.rs/quickcheck.'
- The `std` feature can be disabled to use it in a `#![no_std]` crate.
- This version of indexmap requires Rust 1.32 or later, or Rust 1.36+ for using with
  `alloc`.
- This version of indexmap requires Rust 1.63 or later.
- This version of indexmap requires Rust 1.32 or later, or Rust 1.36+ for using with
  alloc
- Libraries should link only to the log crate, and use the provided macros to log
  whatever information will be useful to downstream consumers.
- Executables should choose a logger implementation and initialize it early in the
  runtime of the program.
errors:
- zlib-ng will cause breakage if any other crate in your crate graph uses another
  version of zlib/libz.
auth_info:
  mentioned_objects: []
client:
  base_url: ''
  auth:
    type: ''
    location: ''
    flow: ''
    token_url: ''
    client_id: ''
    client_secret: ''
    refresh_token: ''
    header_name: ''
  headers:
    Accept: application/json
  paginator: {}
source_metadata: null
