resources:
- name: user_subscriptions
  endpoint:
    path: /v2/user/subscriptions
    method: GET
- name: images_licenses
  endpoint:
    path: /v2/images/licenses
    method: POST
- name: images_search
  endpoint:
    path: /v2/images/search
    method: GET
    params:
      query: hiking
      image_type: photo
      orientation: vertical
      people_number: 3
- name: editorial_categories
  endpoint:
    path: /v2/editorial/images/categories
    method: GET
    data_selector: data
- name: editorial_image
  endpoint:
    path: /v2/editorial/images/{id}
    method: GET
    data_selector: .
    params:
      country: USA
- name: editorial_images
  endpoint:
    path: /v2/editorial/images
    method: GET
    params:
      country: USA
      search_id: 00000000-0000-0000-0000-000000000000
- name: editorial_image_licenses
  endpoint:
    path: /licenses
    method: GET
    data_selector: data
    params:
      download_availability: all
      page: 1
      sort: newest
- name: license_editorial_image
  endpoint:
    path: /v2/editorial/images/licenses
    method: POST
- name: editorial_livefeed_list
  endpoint:
    path: /v2/editorial/images/livefeeds
    method: GET
    data_selector: data
    params:
      country: USA
      page: 1
      per_page: 20
- name: editorial_livefeed
  endpoint:
    path: /{id}
    method: GET
    params:
      country: USA
- name: editorial_image_livefeed_items
  endpoint:
    path: /v2/editorial/images/livefeeds/{id}/items
    method: GET
    data_selector: data
    params:
      country: USA
- name: editorial_content
  endpoint:
    path: /v2/editorial/{id}
    method: GET
    data_selector: ''
    params:
      country: USA
      search_id: 00000000-0000-0000-0000-000000000000
- name: editorial_license
  endpoint:
    path: /editorial/licenses
    method: POST
- name: editorial_livefeed_list
  endpoint:
    path: /v2/editorial/livefeeds
    method: GET
    data_selector: data
    params:
      country: USA
      page: 1
      per_page: 20
- name: editorial_livefeed
  endpoint:
    path: /editorial/livefeeds/{id}
    method: GET
    data_selector: .
    params:
      country: USA
      id: '{{ id }}'
- name: editorial_livefeed_items
  endpoint:
    path: /{id}/items
    method: GET
    params:
      country: USA
- name: editorial_search
  endpoint:
    path: /search
    method: GET
    data_selector: data
    params:
      country: USA
      sort: newest
      date_start: '2018-10-23'
      date_end: '2020-05-29'
      per_page: 20
      query: football
- name: editorial_categories
  endpoint:
    path: /v2/editorial/categories
    method: GET
    data_selector: data
- name: editorial_updated_images
  endpoint:
    path: /v2/editorial/updated
    method: GET
    data_selector: data
    params:
      type: edit
      country: USA
      date_updated_start: '2020-02-02T13:00:00Z'
      date_updated_end: '2020-02-02T15:00:00Z'
      sort: newest
- name: editorial_videos_search
  endpoint:
    path: /v2/editorial/videos/search
    method: GET
    data_selector: data
    params:
      country: USA
      category: Alone,Performing
      sort: newest
      date_start: 2018-10-23
- name: editorial_video_categories
  endpoint:
    path: /v2/editorial/videos/categories
    method: GET
    data_selector: data
- name: editorial_video
  endpoint:
    path: /v2/editorial/videos/{id}
    method: GET
    data_selector: ''
    params:
      country: USA
      search_id: 00000000-0000-0000-0000-000000000000
- name: editorial_videos
  endpoint:
    path: /v2/editorial/videos
    method: GET
    data_selector: data
    params:
      country: USA
      search_id: 00000000-0000-0000-0000-000000000000
      id: '{{ id_list }}'
- name: editorial_video_licenses
  endpoint:
    path: /v2/editorial/videos/licenses
    method: GET
    data_selector: data
    params:
      download_availability: all
      page: 1
      per_page: 20
      sort: newest
- name: license_editorial_video
  endpoint:
    path: /editorial/videos/licenses
    method: POST
- name: upload_image
  endpoint:
    path: /v2/cv/images
    method: POST
    data_selector: upload_id
- name: upload_image
  endpoint:
    path: /images
    method: POST
    data_selector: upload_id
- name: similar_images
  endpoint:
    path: /similar/images
    method: GET
    data_selector: data
    params:
      asset_id: '{{ asset_id }}'
      language: '{{ language }}'
      license: '{{ license }}'
      page: '{{ page }}'
      per_page: '{{ per_page }}'
      safe: '{{ safe }}'
      view: '{{ view }}'
- name: similar_videos
  endpoint:
    path: /v2/cv/similar/videos
    method: GET
    data_selector: data
    params:
      asset_id: '{{ asset_id }}'
      language: '{{ language }}'
      license: '{{ license }}'
      page: '{{ page }}'
      per_page: '{{ per_page }}'
      safe: '{{ safe }}'
      view: '{{ view }}'
- name: keywords
  endpoint:
    path: /v2/cv/keywords
    method: GET
    params:
      asset_id: '{{ asset_id }}'
- name: images_search
  endpoint:
    path: /v2/images/search
    method: GET
    data_selector: .
    params:
      query: kites
      image_type: photo
      page: 1
      per_page: 5
      sort: popular
      view: minimal
- name: catalog_search
  endpoint:
    path: /catalog/search
    method: GET
    data_selector: data
    params:
      asset_type: image, video, audio, elements, editorial-image, editorial-video
      sort: newest, oldest
- name: catalog_collections
  endpoint:
    path: /catalog/collections
    method: GET
    params:
      page: 1
      per_page: 20
      shared: true
      sort: newest
  paginator:
    type: page
    page_size_param: per_page
    default_page_size: 20
- name: catalog_collection
  endpoint:
    path: /v2/catalog/collections
    method: POST
    data_selector: id
- name: catalog_collection
  endpoint:
    path: /v2/catalog/collections/{collection_id}
    method: PATCH
    data_selector: id
- name: delete_catalog_collection
  endpoint:
    path: /v2/catalog/collections/{collection_id}
    method: DELETE
- name: add_items_to_catalog_collection
  endpoint:
    path: /v2/catalog/collections/{collection_id}/items
    method: POST
    data_selector: items
- name: catalog_collection_items
  endpoint:
    path: /v2/catalog/collections/{collection_id}/items
    method: DELETE
    data_selector: items
- name: contributors
  endpoint:
    path: /v2/contributors
    method: GET
    data_selector: data
    params:
      id: string
- name: contributor_details
  endpoint:
    path: /v2/contributors/{contributor_id}
    method: GET
    data_selector: .
- name: contributor_collections
  endpoint:
    path: /v2/contributors/{contributor_id}/collections
    method: GET
    data_selector: data
    params:
      contributor_id: required
      sort: newest, last_updated, item_count
- name: contributor_collections
  endpoint:
    path: /v2/contributors/{contributor_id}/collections/{id}
    method: GET
    data_selector: .
    params:
      contributor_id: required; string
      id: required; string
- name: contributor_collection_items
  endpoint:
    path: /v2/contributors/{contributor_id}/collections/{id}/items
    method: GET
    data_selector: data
    params:
      page: 1
      per_page: 20
      sort: newest
- name: user
  endpoint:
    path: /v2/user
    method: GET
- name: access_token
  endpoint:
    path: /v2/user/access_token
    method: GET
- name: user_subscriptions
  endpoint:
    path: /v2/user/subscriptions
    method: GET
    data_selector: data
- name: test_echo
  endpoint:
    path: /v2/test
    method: GET
    data_selector: text
    params:
      text: ok
- name: test_validate
  endpoint:
    path: /v2/test/validate
    method: GET
    data_selector: query
    params:
      id: 123
      tag:
      - Test string
- name: authorize
  endpoint:
    path: /v2/oauth/authorize
    method: GET
    params:
      client_id: required
      redirect_uri: required
      response_type: code
      state: required
      realm: customer
      scope: licenses.create licenses.view purchases.view
- name: AccessTokenDetails
  endpoint:
    path: /access_token_details
    method: GET
    data_selector: null
    params: {}
- name: Album
  endpoint:
    path: /albums
    method: GET
    data_selector: null
    params: {}
- name: Allotment
  endpoint:
    path: /allotments
    method: GET
    data_selector: null
    params: {}
- name: Artist
  endpoint:
    path: /artists
    method: GET
    data_selector: null
    params: {}
- name: audio_metadata
  endpoint:
    path: /audio/{id}
    method: GET
    data_selector: .
- name: AudioAssetDetails
  endpoint:
    path: /audioassets
    method: GET
    data_selector: data
- name: AudioAssets
  endpoint:
    path: /audioassets
    method: GET
    data_selector: data
- name: AudioDataList
  endpoint:
    path: /audiodatalist
    method: GET
    data_selector: data
    params:
      page: '{{ page }}'
      per_page: '{{ per_page }}'
- name: images_search
  endpoint:
    path: /images/search
    method: GET
    params:
      query: '{{ query }}'
- name: videos_search
  endpoint:
    path: /videos/search
    method: GET
    params:
      query: '{{ query }}'
- name: audio_search
  endpoint:
    path: /audio/search
    method: GET
    params:
      query: '{{ query }}'
- name: audio_search_results
  endpoint:
    path: /audio/search
    method: GET
    data_selector: data
    params:
      page: 1
- name: audio_license_url
  endpoint:
    path: /audio/license
    method: GET
    data_selector: url
- name: bulk_image_search_results
  endpoint:
    path: /bulkImageSearchResults
    method: GET
    data_selector: results
- name: catalog_collection
  endpoint:
    path: /catalog_collection
    method: GET
    data_selector: data
- name: catalog_collection_item
  endpoint:
    path: /catalog_collection_item
    method: GET
- name: catalog_collection_item_data_list
  endpoint:
    path: /catalog_collection_item_data_list
    method: GET
    data_selector: data
    params:
      page: 1
      per_page: 1
- name: catalog_collection_role
  endpoint:
    path: /catalog_collection_role
    method: GET
    data_selector: roles
- name: catalog_collection_role_assignments
  endpoint:
    path: /catalog_collection_role_assignments
    method: GET
    data_selector: roles
- name: category
  endpoint:
    path: /category
    method: GET
    data_selector: data
- name: category_data_list
  endpoint:
    path: /category_data_list
    method: GET
    data_selector: data
    params:
      page: 1
      per_page: 2
- name: collection
  endpoint:
    path: /collection
    method: GET
    data_selector: items
- name: collection_create_request
  endpoint:
    path: /collection_create_request
    method: POST
- name: collection_create_response
  endpoint:
    data_selector: id
- name: collection_data_list
  endpoint:
    data_selector: data
  paginator:
    type: page
    page_size_param: per_page
    default_page_size: 100
- name: collection_item
  endpoint:
    data_selector: id
- name: collection_item_data_list
  endpoint:
    data_selector: data
  paginator:
    type: page
    page_size_param: per_page
    default_page_size: 2
- name: collection_item_request
  endpoint:
    data_selector: items
- name: collection_update_request
  endpoint:
    data_selector: name
- name: computer_vision_image_create_response
  endpoint:
    data_selector: upload_id
- name: contributor
  endpoint:
    data_selector: id
- name: contributor_profile
  endpoint:
    path: /contributorProfile
    method: GET
    data_selector: data
- name: contributor_profile_data_list
  endpoint:
    path: /contributorProfileDataList
    method: GET
    data_selector: data
    params:
      page: 1
      per_page: 5
- name: cookie
  endpoint:
    data_selector: .
    params:
      name: string
      value: string
- name: create_catalog_collection
  endpoint:
    data_selector: .
    params:
      name: string
      items:
      - CreateCatalogCollectionItem
      visibility: string
- name: create_catalog_collection_item
  endpoint:
    data_selector: .
    params:
      asset: object
- name: create_catalog_collection_items
  endpoint:
    data_selector: .
    params:
      items:
      - CreateCatalogCollectionItem
- name: custom_size_dimensions
  endpoint:
    data_selector: .
    params:
      height: integer
      width: integer
- name: download_history
  endpoint:
    data_selector: .
    params:
      download_time: string
      id: string
      license: string
      audio: DownloadHistoryMediaDetails
      image: DownloadHistoryMediaDetails
      is_downloadable: boolean
      metadata: object
      revshare: DownloadHistoryRevshareDetails
      subscription_id: string
      user: DownloadHistoryUserDetails
      video: DownloadHistoryMediaDetails
- name: download_history_data_list
  endpoint:
    path: /DownloadHistoryDataList
    method: GET
    data_selector: data
    params:
      page: page
      per_page: per_page
- name: download_history_format_details
  endpoint:
    path: /DownloadHistoryFormatDetails
    method: GET
    data_selector: format
- name: download_history_media_details
  endpoint:
    path: /DownloadHistoryMediaDetails
    method: GET
    data_selector: format
- name: download_history_revshare_details
  endpoint:
    path: /DownloadHistoryRevshareDetails
    method: GET
- name: download_history_user_details
  endpoint:
    path: /DownloadHistoryUserDetails
    method: GET
    data_selector: username
- name: editorial_assets
  endpoint:
    path: /editorial/assets
    method: GET
    data_selector: data
- name: editorial_categories
  endpoint:
    path: /editorial/categories
    method: GET
    data_selector: data
- name: editorial_content
  endpoint:
    path: /editorial_content
    method: GET
    data_selector: ''
- name: images_search
  endpoint:
    path: /images/search
    method: GET
    data_selector: data
    params:
      query: conditional expression
- name: editorial_content_data_list
  endpoint:
    path: /editorialcontentdatalist
    method: GET
    data_selector: data
- name: editorial_cover_item
  endpoint:
    path: /editorialcoveritem
    method: GET
    data_selector: data
- name: editorial_image_category_results
  endpoint:
    path: /editorialimagecategoryresults
    method: GET
    data_selector: data
- name: editorial_image_content_data_list
  endpoint:
    path: /editorialImageContentDataList
    method: GET
    data_selector: data
    params:
      page: '{{ page }}'
      per_page: '{{ per_page }}'
- name: editorial_image_livefeed
  endpoint:
    path: /editorialImageLivefeed
    method: GET
    data_selector: data
- name: editorial_livefeed_list
  endpoint:
    path: /editorial/livefeeds
    method: GET
    data_selector: data
    params:
      page: 1
      per_page: 1
- name: editorial_image_results
  endpoint:
    path: /editorial/images
    method: GET
    data_selector: data
- name: editorial_livefeed
  endpoint:
    path: /editorial_livefeed
    method: GET
    data_selector: data
- name: editorial_livefeed_list
  endpoint:
    path: /editorial_livefeed_list
    method: GET
    data_selector: data
- name: EditorialSearchResults
  endpoint:
    path: /editorial/search
    method: GET
    data_selector: data
    params:
      per_page: '{{ per_page }}'
      page: '{{ page }}'
  paginator:
    type: cursor
    cursor_path: next
    cursor_param: next
    page_size_param: per_page
- name: editorial_content
  endpoint:
    path: /editorial_content/{id}
    method: GET
    data_selector: .
    params: {}
- name: editorial_updated_content
  endpoint:
    path: /editorial/updated
    method: GET
    data_selector: data
- name: editorial_video_assets
  endpoint:
    path: /EditorialVideoAssets
    method: GET
    data_selector: original; preview_mp4; preview_webm; thumb_jpg
- name: editorial_video_category_results
  endpoint:
    path: /EditorialVideoCategoryResults
    method: GET
    data_selector: data
- name: video_content
  endpoint:
    path: /wm-preview-mp4/{id}
    method: GET
- name: video_content
  endpoint:
    path: /wm-preview-webm/{id}
    method: GET
- name: video_content
  endpoint:
    path: /thumb-1/{id}
    method: GET
- name: editorial_video_results
  endpoint:
    path: /editorial-video-results
    method: GET
    data_selector: data
- name: bulk_image_search
  endpoint:
    path: /bulk_search/images
    method: POST
    data_selector: .
- name: editorial_video_content
  endpoint:
    path: /editorial-video/search
    method: GET
    data_selector: data
    params:
      per_page: 1
- name: image
  endpoint:
    path: /images/{id}
    method: GET
    data_selector: .
    params:
      id: '{{ id }}'
- name: image_assets
  endpoint:
    path: /ImageAssets
    method: GET
    data_selector: .
    params: {}
- name: image_create
  endpoint:
    path: /ImageCreateRequest
    method: POST
    data_selector: .
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: data
- name: ImageSearchResults
  endpoint:
    path: /ImageSearchResults
    method: GET
    data_selector: data
    params:
      page: page
      per_page: per_page
- name: ImageSizeDetails
  endpoint:
    path: /ImageSizeDetails
    method: GET
    data_selector: N/A
- name: InstrumentList
  endpoint:
    path: /InstrumentList
    method: GET
    data_selector: data
- name: keyword_data_list
  endpoint:
    path: /KeywordDataList
    method: GET
    data_selector: data
- name: language
  endpoint:
    path: /Language
    method: GET
- name: license_audio
  endpoint:
    path: /LicenseAudio
    method: GET
    data_selector: audio_id
- name: license_audio_request
  endpoint:
    path: /LicenseAudioRequest
    method: POST
- name: license_audio_result
  endpoint:
    path: /LicenseAudioResult
    method: GET
    data_selector: audio_id
- name: license_audio_result_data_list
  endpoint:
    path: /LicenseAudioResultDataList
    method: GET
    data_selector: data
    params:
      page: '{{ page }}'
      per_page: '{{ per_page }}'
- name: editorial_content
  endpoint:
    path: /licenseEditorialContent
    method: POST
    data_selector: data
    params:
      size: original
- name: editorial_content_request
  endpoint:
    path: /licenseEditorialContentRequest
    method: POST
    data_selector: editorial
- name: editorial_content_result
  endpoint:
    path: /licenseEditorialContentResult
    method: GET
    data_selector: download
- name: editorial_content_results
  endpoint:
    path: /licenseEditorialContentResults
    method: GET
    data_selector: data
    params:
      page: 1
      per_page: 1
- name: editorial_video_content
  endpoint:
    path: /licenseEditorialVideoContent
    method: POST
    data_selector: metadata
    params:
      size: original
- name: LicenseEditorialVideoContentRequest
  endpoint:
    params:
      country: ISOCountryCode
      editorial: '[LicenseEditorialVideoContent]'
- name: LicenseFormat
  endpoint:
    params:
      description: string
      format: string
      media_type: string
      min_resolution: integer
      size: string
- name: LicenseImage
  endpoint:
    params:
      image_id: string
      editorial_acknowledgement: boolean
      format: string
      metadata: LicenseRequestMetadata
      price: number
      size: string
      subscription_id: string
      show_modal: boolean
- name: LicenseImageRequest
  endpoint:
    params:
      images: '[LicenseImage] or [LicenseImageVector]'
- name: LicenseImageResult
  endpoint:
    path: /license_image_result
    method: GET
    data_selector: image_id
- name: LicenseImageResultDataList
  endpoint:
    path: /license_image_result_data_list
    method: GET
    data_selector: data
    params:
      page: 1
      per_page: 5
- name: LicenseImageVector
  endpoint:
    path: /license_image_vector
    method: GET
    data_selector: image_id
- name: LicenseSFX
  endpoint:
    path: /license_sfx
    method: GET
    data_selector: sfx_id
- name: LicenseSFXRequest
  endpoint:
    path: /LicenseSFXRequest
    method: POST
    data_selector: sound_effects
- name: LicenseSFXResult
  endpoint:
    path: /LicenseSFXResult
    method: GET
    data_selector: ''
- name: LicenseSFXResultDataList
  endpoint:
    path: /LicenseSFXResultDataList
    method: GET
    data_selector: data
- name: LicenseVideo
  endpoint:
    path: /LicenseVideo
    method: POST
    data_selector: ''
- name: LicenseVideoRequest
  endpoint:
    path: /LicenseVideoRequest
    method: POST
    data_selector: videos
- name: LicenseVideoResult
  endpoint:
    path: /LicenseVideoResult
    method: GET
    data_selector: ''
- name: videos_search
  endpoint:
    path: /videos/search
    method: GET
    data_selector: .
    params:
      sort: popular
- name: audio_search
  endpoint:
    path: /audio/search
    method: GET
    data_selector: .
    params:
      sort: bpm
      sort_order: desc
- name: license_video_result_data_list
  endpoint:
    path:
    - Endpoint path not provided
    method: GET
    data_selector: data
    params:
      page: page
      per_page: per_page
- name: model
  endpoint:
    path:
    - Endpoint path not provided
    method: GET
    data_selector: id
- name: model_release
  endpoint:
    path:
    - Endpoint path not provided
    method: GET
    data_selector: id
- name: mood_list
  endpoint:
    path:
    - Endpoint path not provided
    method: GET
    data_selector: data
- name: recommendation_data_list
  endpoint:
    path: /RecommendationDataList
    method: GET
    data_selector: data
    params:
      page: page
      per_page: per_page
      total_count: total_count
- name: redownload_image
  endpoint:
    path: /RedownloadImage
    method: POST
- name: redownload_video
  endpoint:
    path: /RedownloadVideo
    method: POST
- name: remove_catalog_collection_item
  endpoint:
    path: /RemoveCatalogCollectionItem
    method: POST
- name: remove_catalog_collection_items
  endpoint:
    path: /RemoveCatalogCollectionItems
    method: POST
- name: sfx
  endpoint:
    path: /SFX
    method: POST
- name: sfx_asset_details
  endpoint:
    path: /SFXAssetDetails
    method: GET
- name: SFXAssets
  endpoint:
    path: /sfx/assets
    method: GET
    data_selector: .
- name: SFXDataList
  endpoint:
    path: /sfx/data-list
    method: GET
    data_selector: data
- name: SFXSearchResults
  endpoint:
    path: /sfx/search-results
    method: GET
    data_selector: data
- name: SearchEntitiesRequest
  endpoint:
    path: /sfx/search-entities
    method: POST
    data_selector: .
- name: SearchEntitiesResponse
  endpoint:
    path: /sfx/search-entities-response
    method: GET
    data_selector: keywords
- name: SearchImage
  endpoint:
    params:
      added_date: YYYY-MM-DD
      added_date_end: YYYY-MM-DD
      added_date_start: YYYY-MM-DD
      aspect_ratio: positive decimal
      aspect_ratio_max: positive decimal
      aspect_ratio_min: positive decimal
      authentic: boolean
      category: string
      color: hexadecimal or 'grayscale'
      contributor:
      - string
      contributor_country:
      - string
      fields: string
      height_from: integer
      height_to: integer
      image_type:
      - string
      keyword_safe_search: boolean
      license:
      - string
      model:
      - string
      orientation: string
      page: integer
      people_age: string
      people_ethnicity:
      - string
      people_gender: string
      people_model_released: boolean
      people_number: integer
      per_page: integer
      query: string
      region: string
      safe: boolean
      sort: string
      spellcheck_query: boolean
      view: string
      width_from: integer
      width_to: integer
- name: sfx_url
  endpoint:
    path: /sfx_url
    method: GET
    data_selector: url
- name: shorts_loops_stems
  endpoint:
    path: /shorts_loops_stems
    method: GET
    data_selector: shorts
- name: subscription
  endpoint:
    path: /subscription
    method: GET
    data_selector: id
- name: SubscriptionDataList
  endpoint:
    path: /SubscriptionDataList
    method: GET
    data_selector: data
    params:
      page: 1
      per_page: 5
- name: Suggestions
  endpoint:
    path: /Suggestions
    method: GET
    data_selector: data
- name: TestEcho
  endpoint:
    path: /TestEcho
    method: GET
- name: TestValidate
  endpoint:
    path: /TestValidate
    method: GET
- name: urls
  endpoint:
    path: /urls
    method: GET
    data_selector: urls
    params: {}
- name: user_details
  endpoint:
    path: /UserDetails
    method: GET
    data_selector: (not provided)
- name: video
  endpoint:
    path: /videos/{video_id}
    method: GET
    data_selector: data
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: data
- name: video_categories
  endpoint:
    path: /videos/categories
    method: GET
    data_selector: data
- name: video_assets
  endpoint:
    data_selector: .
- name: images_search
  endpoint:
    path: /images/search
    method: GET
    params:
      language: '{{ language_code }}'
      region: '{{ region_code }}'
      query: '{{ search_query }}'
- name: video_data_list
  endpoint:
    path: /VideoDataList
    method: GET
    data_selector: data
    params: {}
  paginator:
    type: page
    page_size_param: per_page
    default_page_size: 5
- name: video_preview
  endpoint:
    path: /video_preview_url
    method: GET
    data_selector: url
- name: video_search_results
  endpoint:
    path: /video_search_results
    method: GET
    data_selector: data
    params:
      page: 1
      per_page: 5
- name: video_size_details
  endpoint:
    path: /video_size_details
    method: GET
    data_selector: height
- name: editorial_image_details
  endpoint:
    path: /services/data/v1.1.40/editorial_image_details
    method: GET
- name: editorial_video_details
  endpoint:
    path: /services/data/v1.1.39/editorial_video_details
    method: GET
- name: sound_effects
  endpoint:
    path: /services/data/v1.1.38/sound_effects
    method: GET
- name: user_subscriptions
  endpoint:
    path: /services/data/v1.1.37/user_subscriptions
    method: GET
- name: video_schema
  endpoint:
    path: /services/data/v1.1.36/video_schema
    method: GET
- name: license_parameter
  endpoint:
    path: /services/data/v1.1.35/license_parameter
    method: GET
- name: sfx_redownloads
  endpoint:
    path: /services/data/v1.1.32/sfx_redownloads
    method: GET
- name: sfx_endpoints
  endpoint:
    path: /services/data/v1.1.31/sfx_endpoints
    method: GET
- name: image_licenses
  endpoint:
    path: /services/data/v1.1.31/image_licenses
    method: POST
- name: license_history
  endpoint:
    path: /services/data/v1.1.30/license_history
    method: GET
- name: multiple_image_searches
  endpoint:
    path: /services/data/v1.1.27/multiple_image_searches
    method: GET
- name: audio_endpoints
  endpoint:
    path: /services/data/v1.1.26/audio_endpoints
    method: GET
- name: catalog_collections
  endpoint:
    path: /services/data/v1.1.19/catalog_collections
    method: GET
    params:
      max_limit: 100
- name: images_licenses
  endpoint:
    path: /v2/images/licenses
    method: GET
    params:
      download_availability: true
- name: videos_licenses
  endpoint:
    path: /v2/videos/licenses
    method: GET
    params:
      download_availability: true
- name: audio_licenses
  endpoint:
    path: /v2/audio/licenses
    method: GET
    params:
      download_availability: true
- name: editorial_images_licenses
  endpoint:
    path: /v2/editorial/images/licenses
    method: GET
    params:
      download_availability: true
- name: editorial_videos_licenses
  endpoint:
    path: /v2/editorial/videos/licenses
    method: GET
    params:
      download_availability: true
- name: catalog_search
  endpoint:
    path: /v2/catalog/search
    method: GET
    params:
      collection_id: true
- name: audio_licenses_new_type
  endpoint:
    path: /v2/audio/licenses
    method: POST
    params:
      asset_all_music: true
- name: catalog_collections_add_item
  endpoint:
    path: /v2/catalog/collections/{collection_id}/items
    method: POST
- name: catalog_collections_delete_item
  endpoint:
    path: /v2/catalog/collections/{collection_id}/items
    method: DELETE
- name: catalog_collections_search
  endpoint:
    path: /v2/catalog/search
    method: GET
- name: catalog_collections_fetch
  endpoint:
    path: /v2/catalog/collections
    method: GET
- name: catalog_collections_create
  endpoint:
    path: /v2/catalog/collections
    method: POST
- name: catalog_collections_update
  endpoint:
    path: /v2/catalog/collections/{collection_id}
    method: PATCH
- name: catalog_collections_delete
  endpoint:
    path: /v2/catalog/collections/{collection_id}
    method: DELETE
- name: featured_video_collections
  endpoint:
    path: /v2/videos/collections/featured
    method: GET
- name: featured_video_collection
  endpoint:
    path: /v2/videos/collections/featured/{id}
    method: GET
- name: featured_video_collection_items
  endpoint:
    path: /v2/videos/collections/featured/{id}/items
    method: GET
- name: editorial_images_updated
  endpoint:
    path: /v2/editorial/images/updated
    method: GET
- name: images_search
  endpoint:
    path: /v2/images/search
    method: GET
    params:
      contributor_country: NOT
- name: editorial_images
  endpoint:
    path: /v2/editorial/images/
    method: GET
- name: editorial_videos
  endpoint:
    path: /v2/editorial/videos/
    method: GET
- name: images_search_suggestions
  endpoint:
    path: /v2/images/search/suggestions
    method: POST
- name: videos_search_suggestions
  endpoint:
    path: /v2/videos/search/suggestions
    method: GET
- name: images_licenses
  endpoint:
    path: /v2/images/licenses
    method: GET
    params:
      username: null
      start_date: null
      end_date: null
- name: videos_licenses
  endpoint:
    path: /v2/videos/licenses
    method: GET
    params:
      username: null
      start_date: null
      end_date: null
- name: editorial_categories
  endpoint:
    path: /v2/editorial/categories
    method: GET
- name: editorial_updated
  endpoint:
    path: /v2/editorial/updated
    method: GET
- name: cv_keywords
  endpoint:
    path: /v2/cv/keywords
    method: GET
- name: cv_images
  endpoint:
    path: /v2/cv/images
    method: POST
- name: cv_similar_images
  endpoint:
    path: /v2/cv/similar/images
    method: GET
    params:
      license: commercial
      safe: true
- name: cv_similar_videos
  endpoint:
    path: /v2/cv/similar/videos
    method: GET
    params:
      license: commercial
      safe: true
- name: similar_images
  endpoint:
    path: /v2/images/{id}/similar
    method: GET
- name: audio_genres
  endpoint:
    path: /v2/audio/genres
    method: GET
- name: audio_instruments
  endpoint:
    path: /v2/audio/instruments
    method: GET
- name: audio_moods
  endpoint:
    path: /v2/audio/moods
    method: GET
- name: audio_search
  endpoint:
    path: /v2/audio/search
    method: GET
- name: updated_images
  endpoint:
    path: /v2/images/updated
    method: GET
- name: updated_videos
  endpoint:
    path: /v2/videos/updated
    method: GET
- name: similar_images
  endpoint:
    path: /v2/images/{id}/similar
    method: GET
- name: reverse_image_search
  endpoint:
    path: /v2/images
    method: POST
- name: list_images
  endpoint:
    path: /v2/images
    method: GET
- name: image_licenses
  endpoint:
    path: /v2/images/licenses
    method: POST
- name: video_licenses
  endpoint:
    path: /v2/videos/licenses
    method: POST
- name: audio_search
  endpoint:
    path: /v2/audio/search
    method: GET
    params:
      deprecated:
      - added_date
      - added_date_start
      - added_date_end
      - album_title
      - bpm
      - duration
      - lyrics
      - safe
      - similar_artists
      - title
      - vocal_description
      - composition_metadata
- name: image_categories
  endpoint:
    path: /images/categories
    method: GET
    params:
      language: es
- name: images_search
  endpoint:
    path: /images/search
    method: GET
    data_selector: data
    params:
      query: query
      sort: sort
      image_type: image_type
      category: category
- name: audio_search
  endpoint:
    path: /audio/search
    method: GET
    data_selector: data
    params:
      instruments: instruments
- name: image_search
  endpoint:
    params:
      aspect_ratio: 1.3333
      aspect_ratio_max: 1.5005
      aspect_ratio_min: 1.4995
- name: video_search
  endpoint:
    params:
      aspect_ratio: '4_3'
- name: audio_search
  endpoint:
    params:
      genre: Blues > Chicago
      moods: Wedding > Classical
- name: upload_image
  endpoint:
    path: /v2/cv/images
    method: POST
    data_selector: upload_id
- name: similar_images
  endpoint:
    path: /v2/cv/similar/images
    method: GET
    params:
      asset_id: upload_id
- name: similar_videos
  endpoint:
    path: /v2/cv/similar/videos
    method: GET
    params:
      asset_id: upload_id
- name: upload_image
  endpoint:
    path: /v2/cv/images
    method: POST
- name: get_keywords
  endpoint:
    path: /v2/cv/keywords
    method: GET
- name: image_search
  endpoint:
    path: /v2/images/search
    method: GET
    data_selector: data
    params:
      view: full
      fields: {}
- name: video_search
  endpoint:
    path: /v2/videos/search
    method: GET
    data_selector: data
    params:
      view: full
      fields: {}
- name: audio_search
  endpoint:
    path: /v2/audio/search
    method: GET
    data_selector: data
    params:
      view: full
      fields: {}
- name: image_previews
  endpoint:
    path: /v2/images/{id}
    method: GET
    data_selector: assets
- name: video_previews
  endpoint:
    path: /v2/videos/{id}
    method: GET
    data_selector: assets
- name: user_subscriptions
  endpoint:
    path: /v2/user/subscriptions
    method: GET
- name: license_images
  endpoint:
    path: /v2/images/licenses
    method: POST
    data_selector: data
- name: images_search
  endpoint:
    path: /v2/images/search
    method: GET
    params:
      license: editorial
- name: images_licenses
  endpoint:
    path: /v2/images/licenses
    method: POST
- name: editorial_images_search
  endpoint:
    path: /v2/editorial/images/search
    method: GET
- name: editorial_videos_search
  endpoint:
    path: /v2/editorial/videos/search
    method: GET
- name: editorial_images_licenses
  endpoint:
    path: /v2/editorial/images/licenses
    method: POST
- name: editorial_videos_licenses
  endpoint:
    path: /v2/editorial/videos/licenses
    method: POST
- name: search_response
  endpoint:
    path: /v2/images/search
    method: GET
    data_selector: data
- name: license_images
  endpoint:
    path: /licenses
    method: POST
    data_selector: images
- name: image_licenses
  endpoint:
    path: /v2/images/licenses
    method: POST
    data_selector: data
- name: license_history
  endpoint:
    path: /v2/images/licenses
    method: GET
    data_selector: data
- name: redownload_image
  endpoint:
    path: /v2/images/licenses/{id}/downloads
    method: POST
    data_selector: data
- name: licensing_request_metadata
  endpoint:
    path: /v2/images/licenses
    method: GET
    data_selector: data
- name: image_licenses
  endpoint:
    path: /v2/images/licenses
    method: GET
    data_selector: data
- name: redownload_image
  endpoint:
    path: /v2/images/licenses/{license_id}/downloads
    method: POST
- name: catalog_collections
  endpoint:
    path: /catalog/collections
    method: POST
    data_selector: id
    params:
      name: name
      visibility: visibility
      items: items
- name: add_assets_to_collection
  endpoint:
    path: /catalog/collections/{catalog_collection_id}/items
    method: POST
    data_selector: id
    params:
      items: items
- name: images
  endpoint:
    path: /images/search
    method: GET
- name: search_images
  endpoint:
    path: /search
    method: GET
    data_selector: data
    params:
      query: null
      sort: popular
      orientation: horizontal
- name: bulk_search_images
  endpoint:
    path: /v2/bulk_search/images
    method: POST
    data_selector: results
- name: video_suggestions
  endpoint:
    path: /v2/videos/search/suggestions
    method: GET
    data_selector: data
    params:
      query: '{{ query }}'
      limit: '{{ limit }}'
- name: image_keyword_suggestions
  endpoint:
    path: /v2/images/search/suggestions
    method: POST
    data_selector: data
- name: images_search
  endpoint:
    path: /images/search
    method: GET
    params:
      query: giraffes
      page: 2
      per_page: 5
- name: image_categories
  endpoint:
    path: /v2/images/categories
    method: GET
    data_selector: data
    params:
      language: es
- name: similar_images
  endpoint:
    path: /v2/cv/similar/images
    method: GET
    data_selector: data
    params:
      asset_id: required
      language: optional
      license: optional
      page: optional
      per_page: optional
      safe: optional
      view: optional
- name: images_recommendations
  endpoint:
    path: /images/recommendations
    method: GET
    data_selector: data
    params:
      id: '465011609'
      max_items: 20
      safe: true
- name: updated_images
  endpoint:
    path: /v2/images/updated
    method: GET
    data_selector: data
    params:
      interval: 30 MINUTE
      sort: newest
      type:
      - addition
      - deletion
      - edit
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: data
    params:
      id: multiple image IDs
      view: minimal or full
      search_id: related search ID
- name: images
  endpoint:
    path: /v2/images/{id}
    method: GET
    data_selector: .
    params:
      language: es
      search_id: 00000000-0000-0000-0000-000000000000
      view: full
- name: licenses_and_downloads
  endpoint:
    path: /v2/images/licenses
    method: POST
    data_selector: data
    params:
      search_id: string
      size: huge
      subscription_id: string
      format: jpg
- name: image_licenses
  endpoint:
    path: /images/licenses
    method: GET
    data_selector: data
    params:
      sort: newest
      download_availability: all
      page: 1
- name: image_license_download
  endpoint:
    path: /v2/images/licenses/{id}/downloads
    method: POST
    data_selector: data
    params:
      size: huge
- name: images_collections
  endpoint:
    path: /images/collections
    method: POST
    data_selector: id
- name: videos_search
  endpoint:
    path: /videos/search
    method: GET
    params:
      sort: popular
- name: audio_search
  endpoint:
    path: /audio/search
    method: GET
    params:
      sort: bpm
      sort_order: desc
- name: image_collections
  endpoint:
    path: /images/collections
    method: GET
    data_selector: data
    params:
      embed: share_code
      page: 1
      per_page: 100
- name: image_collection
  endpoint:
    path: /images/collections/{id}
    method: GET
    params:
      embed: '[string]'
      share_code: string
- name: image_collection_items
  endpoint:
    path: /images/collections/{id}/items
    method: GET
- name: rename_image_collection
  endpoint:
    path: /v2/images/collections/{id}
    method: POST
    data_selector: name
    params: {}
- name: image_collections
  endpoint:
    path: /v2/images/collections/{id}
    method: DELETE
- name: add_image_collection_items
  endpoint:
    path: /v2/images/collections/{id}/items
    method: POST
    data_selector: items
- name: image_collection_items
  endpoint:
    path: /images/collections/{id}/items
    method: GET
    params:
      page: 1
      per_page: 100
      sort: oldest
      share_code: ''
- name: image_collection_items
  endpoint:
    path: /v2/images/collections/{id}/items
    method: DELETE
    params:
      id: Collection ID
      item_id: '[string]'
- name: videos_search
  endpoint:
    path: /search
    method: GET
    data_selector: data
    params:
      query: hot air balloon
      duration_from: 30
      sort: popular
      added_date: YYYY-MM-DD
      added_date_end: YYYY-MM-DD
      added_date_start: YYYY-MM-DD
      aspect_ratio: '16:9'
      category: category name or ID
      contributor_country:
      - ISO 3166 Alpha-2 country code
      duration_to: 0
      fps_from: 0.0
      fps_to: 0.0
      keyword_safe_search: true
      language: Accept-Language header
      license:
      - commercial
      model:
      - model names or IDs
      orientation: horizontal
      page: 1
      people_age: age range
      people_ethnicity:
      - ethnicity
      people_gender: both
      people_model_released: true
      people_number: 4
      per_page: 20
      resolution: 4k
      safe: true
      view: minimal
- name: video_suggestions
  endpoint:
    path: /videos/search/suggestions
    method: GET
    data_selector: data
    params:
      query: '{{ query }}'
      limit: '{{ limit }}'
- name: similar_videos
  endpoint:
    path: /v2/cv/similar/videos
    method: GET
    data_selector: data
    params:
      language: ''
      license: commercial
      page: 1
      per_page: 20
      safe: true
      view: minimal
- name: images_search
  endpoint:
    path: /v2/images/search
    method: GET
    params:
      query: airplane
      view: full
- name: updated_videos
  endpoint:
    path: /v2/videos/updated
    method: GET
    data_selector: data
    params:
      interval: 30 MINUTE
      sort: newest
- name: videos
  endpoint:
    path: /v2/videos
    method: GET
    data_selector: data
    params:
      id: '{{ id }}'
      search_id: '{{ search_id }}'
      view: '{{ view }}'
- name: video_details
  endpoint:
    path: /videos/{id}
    method: GET
    data_selector: .
    params:
      language: es
      search_id: 00000000-0000-0000-0000-000000000000
      view: full
- name: video_categories
  endpoint:
    path: /videos/categories
    method: GET
    params:
      language: es
- name: license_videos
  endpoint:
    path: /videos/licenses
    method: POST
    data_selector: data
    params:
      size: web
- name: video_licenses
  endpoint:
    path: /v2/videos/licenses
    method: GET
    params:
      download_availability: all
      end_date: YYYY-MM-DDTHH:mm:ssZ
      license: ''
      page: 1
      per_page: 20
      sort: newest
      start_date: YYYY-MM-DDTHH:mm:ssZ
      team_history: false
      username: ''
      video_id: ''
- name: videos_download
  endpoint:
    path: /v2/videos/licenses/{id}/downloads
    method: POST
    data_selector: url
    params:
      id: '{{ id }}'
- name: video_collections
  endpoint:
    path: /v2/videos/collections
    method: POST
    data_selector: id
- name: video_collections
  endpoint:
    path: /videos/collections
    method: GET
    data_selector: data
    params:
      embed: share_code
      page: 1
      per_page: 100
- name: video_collection
  endpoint:
    path: /v2/videos/collections/{id}
    method: GET
    data_selector: .
    params:
      embed: share_code, share_url
      share_code: '{{ share_code }}'
- name: images_search
  endpoint:
    path: /search
    method: GET
    data_selector: data
    params:
      query: '{{ query }}'
      fields: '{{ fields }}'
- name: video_collection_rename
  endpoint:
    path: /v2/videos/collections/{id}
    method: POST
    data_selector: name
- name: video_collection
  endpoint:
    path: /v2/videos/collections/{id}
    method: DELETE
    params:
      id: required
- name: add_video_to_collection
  endpoint:
    path: /v2/videos/collections/{id}/items
    method: POST
    data_selector: items
    params:
      id: '{{ id }}'
- name: video_collection_items
  endpoint:
    path: /v2/videos/collections/{id}/items
    method: GET
    params:
      page: 1
      per_page: 100
      sort: oldest
- name: remove_video_from_collection
  endpoint:
    path: /v2/videos/collections/{id}/items
    method: DELETE
    params:
      item_id:
      - string
- name: audio_metadata
  endpoint:
    path: /audio/{id}
    method: GET
    data_selector: ''
    params: {}
- name: audio_search
  endpoint:
    path: /audio/search
    method: GET
    data_selector: ''
    params: {}
- name: audio_search
  endpoint:
    path: /v2/audio/search
    method: GET
    data_selector: data
    params:
      artists: '[string]'
      bpm_from: integer
      bpm_to: integer
      duration: integer
      duration_from: integer
      duration_to: integer
      fields: string
      genre: '[string]'
      instruments: '[string]'
      is_instrumental: boolean
      language: string
      library: string
      moods: '[string]'
      page: integer
      per_page: integer
      query: string
      sort: string
      sort_order: string
      view: string
      vocal_description: string
      bpm: integer
- name: genres
  endpoint:
    path: /genres
    method: GET
    params:
      language: string
- name: instruments
  endpoint:
    path: /instruments
    method: GET
    params:
      language: string
- name: audio_moods
  endpoint:
    path: /audio/moods
    method: GET
    data_selector: data
    params:
      language: '{{ language }}'
- name: audio_tracks
  endpoint:
    path: /v2/audio
    method: GET
    data_selector: data
    params:
      id: 442583,434750
      search_id: 00000000-0000-0000-0000-000000000000
      view: full
- name: audio_track
  endpoint:
    path: /v2/audio/{id}
    method: GET
    params:
      view: full
      search_id: 00000000-0000-0000-0000-000000000000
- name: license_audio_tracks
  endpoint:
    path: /v2/audio/licenses
    method: POST
    data_selector: data
    params:
      license: audio_platform; premier_music_basic; premier_music_extended; premier_music_pro;
        premier_music_comp; asset_all_music
- name: audio_licenses
  endpoint:
    path: /v2/audio/licenses
    method: GET
    data_selector: data
    params:
      audio_id: null
      download_availability: all
      end_date: null
      license: null
      page: 1
      per_page: 20
      sort: newest
      start_date: null
      team_history: null
      username: null
- name: audio_download
  endpoint:
    path: /audio/licenses/{id}/downloads
    method: POST
- name: audio_collection
  endpoint:
    path: /v2/audio/collections
    method: POST
    data_selector: .
- name: audio_collections
  endpoint:
    path: /audio/collections
    method: GET
    data_selector: data
    params:
      page: 1
      per_page: 100
      embed: share_code
- name: audio_collection
  endpoint:
    path: /v2/audio/collections/{id}
    method: GET
    data_selector: .
    params:
      embed: share_code, share_url
      share_code: '{share_code}'
- name: audio_collection_items
  endpoint:
    path: /v2/audio/collections/{id}/items
    method: GET
    data_selector: .
- name: audio_collections_rename
  endpoint:
    path: /audio/collections/{id}
    method: POST
    data_selector: none
    params:
      id: '{{ id }}'
- name: audio_collection
  endpoint:
    path: /{id}
    method: DELETE
- name: add_audio_tracks_to_collection
  endpoint:
    path: /v2/audio/collections/{id}/items
    method: POST
    data_selector: items
    params:
      id: Collection ID
- name: audio_collection_items
  endpoint:
    path: /audio/collections/{id}/items
    method: GET
    params:
      sort: oldest
- name: audio_collections_remove_track
  endpoint:
    path: /audio/collections/{id}/items
    method: DELETE
    params:
      item_id: '[string]'
- name: sound_effects_search
  endpoint:
    path: /v2/sfx/search
    method: GET
    params:
      added_date: YYYY-MM-DD
      added_date_end: YYYY-MM-DD
      added_date_start: YYYY-MM-DD
      duration: 1
      duration_from: 1
      duration_to: 1
      page: 1
      per_page: 20
      query: example search
      safe: true
      sort: popular
      view: minimal
- name: sound_effect_details
  endpoint:
    path: /v2/sfx/{id}
    method: GET
    data_selector: .
    params:
      language: '{language}'
      library: '{library}'
      search_id: '{search_id}'
      view: '{view}'
- name: sound_effects
  endpoint:
    path: /sfx
    method: GET
    data_selector: data
    params:
      id:
      - 18765466
      library: shutterstock
      search_id: 00000000-0000-0000-0000-000000000000
      view: minimal
- name: sfx_licenses
  endpoint:
    path: /sfx/licenses
    method: GET
    data_selector: data
    params:
      download_availability: all
      sort: newest
- name: license_sound_effects
  endpoint:
    path: /sfx/licenses
    method: POST
    data_selector: data
- name: sound_effects_download
  endpoint:
    path: /v2/sfx/licenses/{id}/downloads
    method: POST
- name: search_editorial_images
  endpoint:
    path: /search
    method: GET
    data_selector: data
    params:
      country: USA
      query: musician
      category: Alone,Performing
      sort: newest
      date_start: 2018-10-23
      date_end: 2020-05-29
- name: updated_editorial_images
  endpoint:
    path: /updated
    method: GET
    data_selector: data
    params:
      type: edit
      country: USA
      date_updated_start: '2020-02-02T13:00:00Z'
      date_updated_end: '2020-02-02T15:00:00Z'
notes:
- Authentication is required for all endpoints.
- Supports both HTTP basic and OAuth authentication.
- Environment variables are used for authentication in CLI applications.
- Basic authentication is available for certain endpoints not accessing specific customer
  information
- OAuth 2.0 is required for most endpoints and may involve different scopes
- API requires OAuth2 authentication without specific scope.
- Endpoint uses path parameter {id} which needs to be URI encoded.
- The token is shown only once during generation; copy it immediately
- Token validity is tied to the user account's password or email status
- Deprecated; use POST /v2/editorial/images/licenses instead
- Deprecated; use GET /v2/editorial/images/livefeeds instead to get a list of editorial
  livefeeds
- Endpoint deprecated; use /v2/editorial/images/search instead
- No scope required for Customer OAuth
- API supports pagination using cursor-based method; 'next' cursor provided in API
  response
- Default number of results per page is 20, with a maximum of 50
- Search results can be sorted by 'relevant', 'newest', 'oldest'
- Accepts Customer OAuth for authentication; no specific scope required
- Authentication with Customer OAuth and specific scope 'licenses.view' is required.
- Required scopes for OAuth: licenses.create, purchases.view
- Endpoint for uploading and retrieving visually similar videos
- Supports both Basic and Customer OAuth authentication methods
- Requires specific OAuth scopes: collections.view
- Requires OAuth for authentication with scope 'collections.view'
- Supports sorting by 'newest' and 'oldest'
- Pagination supports a maximum of 50 items per page
- 'Required scopes: collections.view, collections.edit'
- Requires OAuth authentication with specific scopes including collections.view and
  collections.edit
- Requires OAuth token with specific scopes: collections.view, collections.edit
- Supported authentication methods include Customer OAuth and Basic Auth; no specific
  OAuth scope required.
- Token with "expires=true" expires in one hour
- Non-expiring tokens remain valid until user changes password or email
- 'Required OAuth scopes: purchases.view'
- This endpoint returns a redirect URI in the 'Location' header for user authentication
- Search keywords must be URL encoded.
- Searches do not support wildcards such as '*'.
- Metadata about editorial content
- Pagination is supported by page and per_page parameters
- Pagination uses cursors named 'next' and 'prev'
- Base URL inferred from asset URLs in the example data; actual API endpoint paths
  may differ
- Allows up to 5 image searches in a single request
- Pagination is supported with page and per_page parameters.
- Supports sorting by various criteria including popularity and relevance for videos;
  artist name, bpm, and duration for audio.
- Allows specifying sort order for audio searches.
- Pagination uses 'page' and 'per_page' as query parameters
- The base URL and specific endpoint paths are not provided in the documentation
- Supports localization by allowing the specification of language and region in search
  queries.
- Accepts language parameter or Accept-Language header for localizing search keywords
  and category names.
- Removed endpoints and AI search filter in versions v1.1.42 and v1.2.0
- Limited access for non-subscribers
- Restrictions on request volume per hour
- Images must be base64-encoded and in JPG or PNG format
- Image size limit is 10MB and dimension limit is 10,000 pixels in width or height
- For command-line requests, there might be an OS limit on argument size; use programming
  languages like PHP or Node.js for larger images
- Computer vision access needs to be enabled for your application; contact for access
- Download links are valid for 8 hours
- Some API subscriptions return a limited set of results
- To resize images, specify either custom height or width; not both
- The height or width must be at least 100 pixels and has a maximum of the original
  image size
- Contact us for access to enable resizing functionality in your application
- Sandbox mode does not deduct credits or provide actual licenses; returns watermarked
  or sample images
- Sandbox retains license history for at least one week
- Licensing sandbox API mimics main API, including HTTP status codes and subscription
  validation
- Platform licenses requested through the API do not allow redownloads
- Licensing a media item once does not necessarily mean that you can retrieve it later
- Multiple image searches in a single request; returns up to 20 results per search
- Global search parameters can be overridden for each search in the request body
- Customer OAuth does not require specific scope
- No scope required for authentication.
- Basic and Customer OAuth authentication methods are supported; no specific OAuth
  scope is required.
- Endpoint allows filtering by date or interval but not both simultaneously.
- Supports sorting by newest or oldest and filtering by image type (addition, deletion,
  edit).
- Accepted authentication methods include Basic and Customer OAuth with no specific
  scope required.
- Download links in the response are valid for 8 hours
- Values in the body parameter override values in the query parameters
- Requires OAuth for authentication with scope 'licenses.view'
- Requires Customer OAuth with scope 'collections.edit' for editing collections
- Customer OAuth does not require specific scopes
- Supports Basic and Customer OAuth authentication
- Default pagination uses page and per_page parameters
- Authentication supports Basic and Customer OAuth; no scope required.
- Endpoints allow specifying a date range or interval but not both.
- Maximum number of days for date range specification is three days.
- Requires OAuth authentication with specific scopes; licenses.create and purchases.view
- Requires Customer OAuth with scope licenses.view
- Accepted authentication requires Customer OAuth with scope licenses.view
- Requires OAuth authentication with scope 'collections.edit'
- Required scopes: licenses.create
- Download links in responses are valid for 8 hours
- Requires OAuth with specific scope "collections.edit"
- Different subscription levels affect API capabilities such as access to media libraries
  and API request limits
- API key must be included in the `api_key` query parameter for requests
- Requires OAuth with specific scopes for access (collections.view)
- Customer OAuth authentication does not require specific scopes
- No scope required for Customer OAuth.
- Customer OAuth authentication does not require specific scopes.
- Download links in response are valid for 8 hours
- Customer OAuth authentication with no specific scope required
- The API uses AND condition for multiple search parameters
- Results can be sorted by - relevant, newest, oldest
errors:
- 401 Unauthorized: Recheck authentication credentials.
- 400 Bad Request: Check request parameters
- 401 Unauthorized: Validate access token or authentication method
- 403 Forbidden: Confirm permissions and scopes
- 400: Bad Request
- 401: Unauthorized
- 403: Forbidden
- 404: Not Found
- 406: Not Acceptable
- 400 Bad Request: Verify the request parameters
- 401 Unauthorized: Recheck OAuth token or credentials
- 403 Forbidden: Insufficient permissions
- 404 Not Found: Check the livefeed ID or availability in the specified country
- 400 Bad Request: Check request syntax and parameters
- 401 Unauthorized: Validate access token
- 403 Forbidden: Check permissions for the requested resource
- 406 Not Acceptable: Ensure acceptable headers are used
- 400 Bad Request: Check API call parameters
- 401 Unauthorized: Validate or refresh OAuth token
- 403 Forbidden: Check user permissions or scopes
- 400 Bad Request: Check request syntax or parameters
- 401 Unauthorized: Validate credentials or token validity
- 403 Forbidden: Check access permissions for the resource
- 400 Bad Request: ''
- 401 Unauthorized: ''
- 403 Forbidden: ''
- 406 Not Acceptable: ''
- '400 Bad Request: Check request parameters for errors.'
- '401 Unauthorized: Ensure OAuth token is valid and has the required scopes.'
- '403 Forbidden: Confirm permissions for accessing the endpoint.'
- 415: Unsupported Media Type
- 400 Bad Request: Check query parameters for correctness
- 401 Unauthorized: Ensure correct OAuth tokens and scopes
- 403 Forbidden: Verify permissions and scope access
- 400: Invalid status value
- 200: OK
- 204: OK
- 404: Collection not found
- 401 Unauthorized: Check the OAuth token validity and required scopes
- 400 Bad Request: Check request parameters for correctness
- 401 Unauthorized: Ensure valid OAuth token is used
- 403 Forbidden: Verify permissions and scopes for the provided OAuth token
- 404: Contributor not found
- 401 Unauthorized: Check if the token has expired or if scope permissions are adequate
    for the requested endpoint
- 404: Set not found
- 400 Bad Request: Check required parameters and formatting
- 401 Unauthorized: Ensure credentials are correct and valid
- 403 Forbidden: Verify permissions and scopes
- Some API subscriptions return a limited set of results.
- 401 Unauthorized: Recheck OAuth scopes or token expiration
- message: Handle error messages by displaying to the user
- VALIDATION_INVALID_TYPE: 'Invalid type: string should be integer; check data types
    for compliance'
- - Specific error codes and messages not provided
- 401 Unauthorized: Invalid or expired token; reauthenticate or refresh the token
- 403 Forbidden: Access denied; check user permissions and scopes
- 401 Unauthorized: Check if 'purchases.view' scope is included in authentication
    tokens
- Argument list too long: Use smaller image or make the request with PHP or Node.js
- Unauthorized: Check if the access token is correct or expired
- 200: Successful request
- 201: Successful creation
- 204: Successful request with no content to return
- 200 OK: Request was valid and processed in the sandbox
- 401 Unauthorized: Check the validity of the access token or permissions
- 400: Bad Request - Check request parameters
- 401: Unauthorized - Check authentication credentials
- 403: Forbidden - Access denied
- 401 Unauthorized: Validate or refresh the OAuth token
- 403 Forbidden: Check permissions or scopes associated with the token
- 400 Bad Request: Check request parameters and data payload for correctness
- 401 Unauthorized: Ensure that the OAuth token is correct and still valid
- 403 Forbidden: Verify permissions and scopes for the API access
- 401 Unauthorized: Check OAuth credentials
- 403 Forbidden: Ensure appropriate permissions
- 400 Bad Request: Check the request parameters and data format
- 401 Unauthorized: Ensure correct scopes and authentication token
- 401 Unauthorized: Verify OAuth scopes and token validity
- 403 Forbidden: Check user permissions for the action
- 404 Collection not found: Validate collection ID
- 401 Unauthorized: Ensure correct authorization headers or token validity
- 403 Forbidden: Verify permissions and authentication method used
- 200 OK: Standard response for successful HTTP requests where updated videos are
    listed.
- 404: Not found
- 401 Unauthorized: Ensure OAuth token is correct and active
- 403 Forbidden: Check OAuth scopes and user permissions
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- 401 Unauthorized: Ensure correct OAuth scopes and token
- 403 Forbidden: Action not allowed with current user privileges
- 404 Collection not found: Verify collection ID
- 400: Bad Request - Check request format and data
- 401: Unauthorized - Ensure valid OAuth token
- 403: Forbidden - Check user permissions or scope
- 404: Collection not found - Verify collection ID
- 400 Bad Request: Check if request body is formatted correctly and includes all required
    fields
- 401 Unauthorized: Ensure valid OAuth token or basic authentication credentials are
    included
- 403 Forbidden: Verify that the token contains necessary scopes for the endpoint
- 404 Not Found: Confirm the existence of the requested media, license, or collection
- 500 Internal Server Error: Validate request correctness; may also indicate a temporary
    server issue
- Media unavailable: Check if the provided media ID is valid when licensing
- 401 Unauthorized: Ensure valid OAuth token
- 403 Forbidden: Check OAuth scopes or permissions
- 400 Bad Request: Check parameters or request format
- 401 Unauthorized: Verify OAuth credentials or scopes
- 403 Forbidden: Check authorization or scope permissions
- 404 Collection not found: Verify the collection ID is correct
- 401 Unauthorized: Recheck OAuth scopes or token validity
- 403 Forbidden: Access denied due to insufficient permissions
- 404 Collection not found: Verify collection ID is correct
- 503: Service Unavailable
- 400 Bad Request
- 401 Unauthorized
- 403 Forbidden
- 400 Bad Request: Check request body or parameters for inaccuracies
- 401 Unauthorized: Verify the correctness of the OAuth token
- 403 Forbidden: Ensure access rights are correctly configured
- 401 Unauthorized: Verify OAuth token and required scopes
- 403 Forbidden: Check access permissions for the requested resource
auth_info:
  mentioned_objects:
  - OAuth token
  - Consumer key
  - Consumer secret
  - API subscription
  - API application
  - Basic
  - Customer OAuth
  - licenses.view
  - Token
  - OAuthToken
  - Basic Authentication
  - consumer_secret
  - user_id
  - OauthToken
  - AuthorizeResponse
  - OauthAccessTokenResponse
  - purchases.view
  - Bearer Token
  - scopes: collections.view
  - collections.edit
  - collections.view
  - Application
  - Consumer Key
  - Consumer Secret
client:
  base_url: https://api-reference.shutterstock.com
  auth:
    type: oauth2
    location: header
    header_name: Authorization
    flow: authorization_code
    token_url: https://api.shutterstock.com/v2/oauth/access_token
    client_id: '{{ dlt.secrets[''shutterstock_client_id''] }}'
  headers:
    User-Agent: '{{ dlt.secrets[''user_agent''] }}'
    Accept: application/json
    Content-Type: application/json
    Accept-Encoding: gzip
  paginator:
    type: page
    page_size_param: per_page
    default_page_size: 20
    cursor_param: cursor
    cursor_path: next
source_metadata: null
