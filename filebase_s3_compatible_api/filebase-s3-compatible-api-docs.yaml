resources:
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: data
- name: ipfs_rpc_api
  endpoint:
    path: /api-documentation/ipfs-rpc-api
    method: GET
- name: s3_compatible_api
  endpoint:
    path: /api-documentation/s3-compatible-api
    method: GET
- name: ipfs_pinning_service_api
  endpoint:
    path: /api-documentation/ipfs-pinning-service-api
    method: GET
- name: file
  endpoint:
    path: /api/v1/files
    method: GET
    data_selector: files
    params:
      incremental: updated_at
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: fileRecords
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: file_management
  endpoint:
    path: /api/v1/files
    method: GET
    data_selector: files
- name: buckets
  endpoint:
    path: /s3
    method: GET
    data_selector: buckets
- name: objects
  endpoint:
    path: /s3/{bucket-name}/objects
    method: GET
    data_selector: objects
- name: pinning_files
  endpoint:
    path: /api/pinning/files
    method: POST
    data_selector: data
    params: {}
- name: listing_files
  endpoint:
    path: /api/pinning/files
    method: GET
    data_selector: data
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
- name: ipfs_pinning
  endpoint:
    path: /api/v1/pinning
    method: POST
    data_selector: data
    params: {}
- name: listing_files
  endpoint:
    path: /api/v1/files
    method: GET
    data_selector: files
    params: {}
- name: ipfs_pinning
  endpoint:
    path: /api-documentation/ipfs-pinning-service-api
    method: GET
    data_selector: data
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
    params: {}
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
    params: {}
- name: IPFS Pinning
  endpoint:
    path: /api-documentation/ipfs-pinning-service-api
    method: GET
    data_selector: records
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
- name: ipfs_bucket
  endpoint:
    path: /ipfs-bucket
    method: POST
    data_selector: buckets
    params: {}
- name: upload_file
  endpoint:
    path: /upload-file
    method: POST
    data_selector: files
    params: {}
- name: upload_folder
  endpoint:
    path: /upload-folder
    method: POST
    data_selector: folders
    params: {}
- name: pin_cid
  endpoint:
    path: /pin-cid
    method: POST
    data_selector: pins
    params: {}
- name: ipfs_pinning
  endpoint:
    path: /api/v1/pinning
    method: POST
    data_selector: data
    params: {}
- name: file_management
  endpoint:
    path: /api/v1/files
    method: GET
    data_selector: files
    params: {}
- name: upload_file
  endpoint:
    path: /upload
    method: PUT
    data_selector: uploadedObject
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
- name: files
  endpoint:
    path: /list
    method: GET
    data_selector: Contents
    params:
      Bucket: YOUR_BUCKET_NAME
- name: deleting_files
  endpoint:
    path: /api/documentation/ipfs-pinning-service-api
    method: DELETE
- name: upload_file
  endpoint:
    path: /upload
    method: PUT
    data_selector: uploadedObject
    params: {}
- name: files
  endpoint:
    path: /api/v1/files
    method: GET
    data_selector: data
    params: {}
- name: buckets
  endpoint:
    path: /api/v1/buckets
    method: GET
    data_selector: data
    params: {}
- name: file
  endpoint:
    path: /api/v1/files
    method: GET
    data_selector: files
    params:
      incremental: updated_at
- name: files
  endpoint:
    path: /listObjectsV2
    method: GET
    params:
      Bucket: YOUR_BUCKET_NAME
- name: delete_file
  endpoint:
    path: /path/to/your/file
    method: DELETE
    data_selector: data
    params:
      Bucket: YOUR_BUCKET_NAME
      Key: path/to/your/file
- name: event_notifications
  endpoint:
    path: /events
    method: POST
    data_selector: events
    params: {}
- name: delete_file
  endpoint:
    path: /delete-object
    method: DELETE
    data_selector: data
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
- name: name_record
  endpoint:
    path: /ipns/names
    method: POST
    data_selector: nameRecord
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: data
    params: {}
- name: gateways
  endpoint:
    path: /gateways
    method: GET
    data_selector: gateways
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: items
- name: image
  endpoint:
    path: /ipfs
    method: GET
    data_selector: images
    params: {}
- name: pin
  endpoint:
    path: /api/v0/pin/ls
    method: GET
- name: version
  endpoint:
    path: /api/v0/version
    method: GET
- name: cat
  endpoint:
    path: /api/v0/cat
    method: GET
- name: block_get
  endpoint:
    path: /api/v0/block/get
    method: GET
- name: add
  endpoint:
    path: /api/v0/add
    method: POST
- name: pin_add
  endpoint:
    path: /api/v0/pin/add
    method: POST
- name: pin_rm
  endpoint:
    path: /api/v0/pin/rm
    method: POST
- name: pin_ls
  endpoint:
    path: /api/v0/pin/ls
    method: POST
- name: version
  endpoint:
    path: /api/v0/version
    method: POST
- name: cat
  endpoint:
    path: /api/v0/cat
    method: POST
    params:
      arg: CID of the file
- name: block_get
  endpoint:
    path: /api/v0/block/get
    method: POST
    params:
      arg: CID of the block
- name: add
  endpoint:
    path: /api/v0/add
    method: POST
- name: pin_add
  endpoint:
    path: /api/v0/pin/add
    method: POST
    params:
      arg: CID to pin
- name: pin_rm
  endpoint:
    path: /api/v0/pin/rm
    method: POST
    params:
      arg: CID to unpin
- name: pre_signed_urls
  endpoint:
    path: /api-documentation/s3-compatible-api/pre-signed-urls
    method: GET
- name: files
  endpoint:
    path: /api/files
    method: GET
    data_selector: records
- name: image_optimization
  endpoint:
    path: /ipfs/{image_id}
    method: GET
    data_selector: image_data
- name: example_resource
  endpoint:
    path: /services/data/vXX.X/sobjects/ExampleResource
    method: GET
    data_selector: records
    params: {}
- name: Total Storage and Recent Bandwidth
  endpoint:
    path: /total-storage-and-recent-bandwidth
    method: GET
- name: Total Storage for a Specific Bucket
  endpoint:
    path: /total-storage-for-a-specific-bucket
    method: GET
- name: Bandwidth Usage For an IPFS Dedicated Gateway
  endpoint:
    path: /bandwidth-usage-for-an-ipfs-dedicated-gateway
    method: GET
- name: List Gateways
  endpoint:
    path: /list-gateways
    method: GET
- name: Create a Dedicated Gateway
  endpoint:
    path: /create-a-dedicated-gateway
    method: POST
- name: Update a Gateway
  endpoint:
    path: /update-a-gateway
    method: PUT
- name: Delete a Gateway
  endpoint:
    path: /delete-a-gateway
    method: DELETE
- name: List Names
  endpoint:
    path: /list-names
    method: GET
- name: Create a Name
  endpoint:
    path: /create-a-name
    method: POST
- name: Update a Name
  endpoint:
    path: /update-a-name
    method: PUT
- name: Delete a Name Record
  endpoint:
    path: /delete-a-name-record
    method: DELETE
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: total_storage_and_recent_bandwidth
  endpoint:
    path: /v1/usage
    method: GET
    data_selector: ''
- name: total_storage_for_specific_bucket
  endpoint:
    path: /v1/usage/storage/<bucket-name>
    method: GET
    data_selector: ''
- name: bandwidth_usage_for_ipfs_gateway
  endpoint:
    path: /v1/usage/gateway/<gateway-name>
    method: GET
    data_selector: ''
- name: list_gateways
  endpoint:
    path: /v1/gateways
    method: GET
    data_selector: ''
- name: return_gateway_details
  endpoint:
    path: /v1/gateways/<gateway-name>
    method: GET
    data_selector: ''
- name: create_gateway
  endpoint:
    path: /v1/gateways
    method: POST
    data_selector: ''
- name: update_gateway
  endpoint:
    path: /v1/gateways/<gateway-name>
    method: PUT
    data_selector: ''
- name: delete_gateway
  endpoint:
    path: /v1/gateways/<gateway-name>
    method: DELETE
    data_selector: ''
- name: list_names
  endpoint:
    path: /v1/names
    method: GET
    data_selector: ''
- name: return_name_details
  endpoint:
    path: /v1/names/<label>
    method: GET
    data_selector: ''
- name: create_name
  endpoint:
    path: /v1/names
    method: POST
    data_selector: ''
- name: update_name
  endpoint:
    path: /v1/names/<label>
    method: PUT
    data_selector: ''
- name: delete_name_record
  endpoint:
    path: /v1/names/<label>
    method: DELETE
    data_selector: ''
- name: pin_ls
  endpoint:
    path: /api/v0/pin/ls
    method: GET
    data_selector: Keys
    params: {}
- name: version
  endpoint:
    path: /api/v0/version
    method: GET
    data_selector: Version
    params: {}
- name: cat
  endpoint:
    path: /api/v0/cat
    method: GET
    data_selector: Content
    params: {}
- name: block_get
  endpoint:
    path: /api/v0/block/get
    method: GET
    data_selector: Block
    params: {}
- name: add
  endpoint:
    path: /api/v0/add
    method: POST
    data_selector: Hash
    params: {}
- name: pin_add
  endpoint:
    path: /api/v0/pin/add
    method: POST
    data_selector: Success
    params: {}
- name: pin_rm
  endpoint:
    path: /api/v0/pin/rm
    method: DELETE
    data_selector: Success
    params: {}
- name: list_pinned_objects
  endpoint:
    path: /v1/ipfs/pins
    method: GET
    data_selector: results
    params:
      limit: 10
- name: pin_object
  endpoint:
    path: /v1/ipfs/pins
    method: POST
    data_selector: requestid
    params: {}
- name: get_pinned_object
  endpoint:
    path: /v1/ipfs/pins/{requestid}
    method: GET
    data_selector: pin
    params: {}
- name: replace_pinned_object
  endpoint:
    path: /v1/ipfs/pins/{requestid}
    method: POST
    data_selector: requestid
    params: {}
- name: remove_pinned_object
  endpoint:
    path: /v1/ipfs/pins/{requestid}
    method: DELETE
    data_selector: null
    params: {}
- name: pin_ls
  endpoint:
    path: /api/v0/pin/ls
    method: POST
- name: version
  endpoint:
    path: /api/v0/version
    method: POST
- name: cat
  endpoint:
    path: /api/v0/cat
    method: POST
    params:
      arg: CID of the file
- name: block_get
  endpoint:
    path: /api/v0/block/get
    method: POST
    params:
      arg: CID of the block
- name: add
  endpoint:
    path: /api/v0/add
    method: POST
- name: pin_add
  endpoint:
    path: /api/v0/pin/add
    method: POST
    params:
      arg: CID to pin
- name: pin_rm
  endpoint:
    path: /api/v0/pin/rm
    method: POST
    params:
      arg: CID to unpin
- name: buckets
  endpoint:
    path: /v1/buckets
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /v1/files
    method: GET
    data_selector: data
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
    params: {}
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
    params: {}
- name: file
  endpoint:
    path: /files
    method: GET
    data_selector: files
    params: {}
- name: libcloud
  endpoint:
    path: /path/to/file/to/upload
    method: POST
- name: Pre-Signed URLs
  endpoint:
    path: /api/documentation/s3-compatible-api/pre-signed-urls
    method: GET
    data_selector: data
    params: {}
- name: project_creation
  endpoint:
    path: /create-project
    method: POST
    data_selector: project
    params: {}
- name: apostrophe-attachments
  endpoint:
    path: /modules/apostrophe-attachments
    method: POST
    data_selector: uploadfs
    params: {}
- name: create_function
  endpoint:
    path: /2015-03-31/functions
    method: POST
- name: test_function
  endpoint:
    path: /2015-03-31/functions/{functionName}/invocations
    method: POST
- name: PutObject
  endpoint:
    path: /
    method: PUT
    data_selector: response
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
    params: {}
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
    params: {}
- name: Total Storage and Recent Bandwidth Usage
  endpoint:
    path: /storage/usage
    method: GET
    data_selector: usage
- name: Total Storage for a Specific Bucket
  endpoint:
    path: /storage/{bucket}/usage
    method: GET
    data_selector: usage
- name: Bandwidth Usage For an IPFS Dedicated Gateway
  endpoint:
    path: /gateway/{gateway}/bandwidth
    method: GET
    data_selector: bandwidth
- name: List Gateways
  endpoint:
    path: /gateways
    method: GET
    data_selector: gateways
- name: Return details of a specific gateway
  endpoint:
    path: /gateways/{gatewayId}
    method: GET
    data_selector: gateway
- name: Create a dedicated gateway
  endpoint:
    path: /gateways
    method: POST
    data_selector: gateway
- name: Update a gateway
  endpoint:
    path: /gateways/{gatewayId}
    method: PUT
    data_selector: gateway
- name: Delete a gateway
  endpoint:
    path: /gateways/{gatewayId}
    method: DELETE
    data_selector: gateway
- name: List Names
  endpoint:
    path: /names
    method: GET
    data_selector: names
- name: Return details of a specific name record
  endpoint:
    path: /names/{nameId}
    method: GET
    data_selector: name
- name: Create a name
  endpoint:
    path: /names
    method: POST
    data_selector: name
- name: Update a name
  endpoint:
    path: /names/{nameId}
    method: PUT
    data_selector: name
- name: Delete a name record
  endpoint:
    path: /names/{nameId}
    method: DELETE
    data_selector: name
- name: Filebase-PutObject
  endpoint:
    path: /s3.filebase.com
    method: PUT
    data_selector: Put Complete
    params:
      bucket: lambda-bucket
- name: total_storage_recent_bandwidth
  endpoint:
    path: /v1/usage
    method: GET
    data_selector: storage
    params: {}
- name: total_storage_specific_bucket
  endpoint:
    path: /v1/usage/storage/<bucket-name>
    method: GET
    data_selector: storage
    params: {}
- name: bandwidth_usage_ipfs_gateway
  endpoint:
    path: /v1/usage/gateway/<gateway-name>
    method: GET
    data_selector: gateway
    params: {}
- name: list_gateways
  endpoint:
    path: /v1/gateways
    method: GET
    data_selector: ''
    params: {}
- name: specific_gateway
  endpoint:
    path: /v1/gateways/<gateway-name>
    method: GET
    data_selector: ''
    params: {}
- name: create_gateway
  endpoint:
    path: /v1/gateways
    method: POST
    data_selector: ''
    params: {}
- name: update_gateway
  endpoint:
    path: /v1/gateways/<gateway-name>
    method: PUT
    data_selector: ''
    params: {}
- name: delete_gateway
  endpoint:
    path: /v1/gateways/<gateway-name>
    method: DELETE
    data_selector: ''
    params: {}
- name: list_names
  endpoint:
    path: /v1/names
    method: GET
    data_selector: ''
    params: {}
- name: specific_name_record
  endpoint:
    path: /v1/names/<label>
    method: GET
    data_selector: ''
    params: {}
- name: create_name
  endpoint:
    path: /v1/names
    method: POST
    data_selector: ''
    params: {}
- name: update_name
  endpoint:
    path: /v1/names/<label>
    method: PUT
    data_selector: ''
    params: {}
- name: delete_name_record
  endpoint:
    path: /v1/names/<label>
    method: DELETE
    data_selector: ''
    params: {}
- name: create_bucket
  endpoint:
    path: /create/bucket
    method: POST
    data_selector: bucket
    params: {}
- name: upload_object
  endpoint:
    path: /upload/object
    method: PUT
    data_selector: object
    params: {}
- name: download_object
  endpoint:
    path: /download/object
    method: GET
    data_selector: object
    params: {}
- name: delete_object
  endpoint:
    path: /delete/object
    method: DELETE
    data_selector: object
    params: {}
- name: pinning_files
  endpoint:
    path: /api/pinning/files
    method: POST
    data_selector: data
    params: {}
- name: listing_files
  endpoint:
    path: /api/pinning/files
    method: GET
    data_selector: data
    params: {}
- name: create_bucket
  endpoint:
    path: /
    method: POST
    data_selector: bucket
    params: {}
- name: upload_object
  endpoint:
    path: /
    method: PUT
    data_selector: object
    params: {}
- name: download_object
  endpoint:
    path: /
    method: GET
    data_selector: object
    params: {}
- name: delete_object
  endpoint:
    path: /
    method: DELETE
    data_selector: object
    params: {}
- name: list_pinned_objects
  endpoint:
    path: /v1/ipfs/pins
    method: GET
    data_selector: results
    params:
      limit: 10
- name: pin_object
  endpoint:
    path: /v1/ipfs/pins
    method: POST
    data_selector: requestid
- name: get_pinned_object
  endpoint:
    path: /v1/ipfs/pins/{requestid}
    method: GET
- name: replace_pinned_object
  endpoint:
    path: /v1/ipfs/pins/{requestid}
    method: POST
- name: remove_pinned_object
  endpoint:
    path: /v1/ipfs/pins/{requestid}
    method: DELETE
- name: buckets
  endpoint:
    path: /
    method: GET
    data_selector: buckets
    params: {}
- name: list_objects
  endpoint:
    path: /listObjectsV2
    method: GET
    data_selector: objects
    params:
      Bucket: filebase-bucket
      MaxKeys: 20
- name: create_bucket
  endpoint:
    path: /createBucket
    method: POST
    data_selector: bucket
    params:
      Bucket: New-Filebase-Bucket
- name: upload_object
  endpoint:
    path: /putObject
    method: PUT
    data_selector: uploadResult
    params:
      Bucket: filebase-bucket
      Key: /path/to/file/filename.png
      ContentType: image/png
- name: libcloud
  endpoint:
    path: /upload
    method: POST
- name: CreateBucket
  endpoint:
    path: /createBucket
    method: POST
    data_selector: bucketCreationResponse
- name: UploadObject
  endpoint:
    path: /uploadObject
    method: POST
    data_selector: uploadResponse
- name: DownloadObject
  endpoint:
    path: /downloadObject
    method: GET
    data_selector: downloadResponse
- name: apostrophe-attachments
  endpoint:
    path: /modules/apostrophe-attachments
    method: POST
    data_selector: uploadfs
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
- name: objects
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: buckets
  endpoint:
    path: /listBuckets
    method: GET
    data_selector: Buckets
- name: objects
  endpoint:
    path: /listObjects
    method: GET
    data_selector: Contents
- name: data_object
  endpoint:
    path: /services/data/vXX.X/sobjects/DataObject
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: PutObject
  endpoint:
    path: /
    method: PUT
    data_selector: PutObject
    params: {}
- name: buckets
  endpoint:
    path: /
    method: GET
    data_selector: Buckets
- name: create_bucket
  endpoint:
    path: /
    method: PUT
    data_selector: Bucket
- name: upload_object
  endpoint:
    path: /
    method: PUT
    data_selector: object
- name: download_object
  endpoint:
    path: /
    method: GET
    data_selector: object
- name: delete_object
  endpoint:
    path: /
    method: DELETE
    data_selector: object
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: records
- name: folders
  endpoint:
    path: /folders
    method: GET
    data_selector: records
- name: buckets
  endpoint:
    path: /v1/buckets
    method: GET
    data_selector: buckets
    params: {}
- name: files
  endpoint:
    path: /v1/files
    method: GET
    data_selector: files
    params: {}
- name: bucket
  endpoint:
    path: /
    method: PUT
    data_selector: bucket
    params: {}
- name: upload_object
  endpoint:
    path: /{bucket-name}/{object-name}
    method: PUT
    data_selector: object
    params: {}
- name: download_object
  endpoint:
    path: /{bucket-name}/{object-name}
    method: GET
    data_selector: object
    params: {}
- name: delete_object
  endpoint:
    path: /{bucket-name}/{object-name}
    method: DELETE
    data_selector: object
    params: {}
- name: bucket
  endpoint:
    path: /
    method: POST
    data_selector: buckets
    params: {}
- name: object
  endpoint:
    path: /{bucket_name}/{object_name}
    method: PUT
    data_selector: object
    params: {}
- name: nft
  endpoint:
    path: /nft
    method: GET
    data_selector: data
    params: {}
- name: buckets
  endpoint:
    path: /v1/buckets
    method: GET
    data_selector: buckets
- name: files
  endpoint:
    path: /v1/files
    method: GET
    data_selector: files
- name: delete_data
  endpoint:
    path: /archive/content-archive/third-party-tools-and-clients/file-management-client-configurations/cyberduck/how-to-delete-data-with-cyberduck
    method: DELETE
    data_selector: records
- name: create_bucket
  endpoint:
    path: /
    method: PUT
    data_selector: bucket creation
    params: {}
- name: upload_object
  endpoint:
    path: /{bucketName}/{objectName}
    method: PUT
    data_selector: object upload
    params: {}
- name: download_object
  endpoint:
    path: /{bucketName}/{objectName}
    method: GET
    data_selector: object download
    params: {}
- name: delete_object
  endpoint:
    path: /{bucketName}/{objectName}
    method: DELETE
    data_selector: object deletion
    params: {}
- name: buckets
  endpoint:
    path: /list_buckets
    method: GET
    data_selector: buckets
    params: {}
- name: pinning_files
  endpoint:
    path: /api/v1/pinning/files
    method: POST
    data_selector: data
- name: listing_files
  endpoint:
    path: /api/v1/pinning/files
    method: GET
    data_selector: data
- name: pin_files
  endpoint:
    path: /api/pin
    method: POST
    data_selector: data
    params: {}
- name: list_files
  endpoint:
    path: /api/files
    method: GET
    data_selector: files
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: data
- name: bucket
  endpoint:
    path: /create_bucket
    method: POST
    data_selector: response
    params: {}
- name: upload_object
  endpoint:
    path: /put_object
    method: PUT
    data_selector: response
    params: {}
- name: download_object
  endpoint:
    path: /get_object
    method: GET
    data_selector: response
    params: {}
- name: buckets
  endpoint:
    path: /listBuckets
    method: GET
    data_selector: data
- name: create_bucket
  endpoint:
    path: /createBucket
    method: POST
    data_selector: data
- name: list_objects
  endpoint:
    path: /listObjects
    method: GET
    data_selector: data
- name: upload_object
  endpoint:
    path: /putObject
    method: PUT
    data_selector: data
- name: ipfs_pinning
  endpoint:
    path: /api/v1/ipfs/pinning
    method: POST
    data_selector: data
- name: file_management
  endpoint:
    path: /api/v1/file_management
    method: GET
    data_selector: files
- name: static_files
  endpoint:
    path: /s3.filebase.com
    method: GET
    data_selector: files
    params: {}
- name: create_bucket
  endpoint:
    path: /create-bucket
    method: POST
    data_selector: bucket_creation_response
- name: upload_object
  endpoint:
    path: /upload-object
    method: POST
    data_selector: upload_response
- name: download_object
  endpoint:
    path: /download-object
    method: GET
    data_selector: download_response
- name: buckets
  endpoint:
    path: /v1/buckets
    method: GET
    data_selector: buckets
- name: objects
  endpoint:
    path: /v1/objects
    method: GET
    data_selector: objects
- name: list_buckets
  endpoint:
    path: /listBuckets
    method: GET
    data_selector: Buckets
- name: upload_object
  endpoint:
    path: /uploadObject
    method: POST
    data_selector: result
- name: download_object
  endpoint:
    path: /downloadObject
    method: GET
    data_selector: result
- name: list_objects
  endpoint:
    path: /listObjects
    method: GET
    data_selector: Contents
- name: delete_object
  endpoint:
    path: /deleteObject
    method: DELETE
    data_selector: result
- name: generate_presigned_url
  endpoint:
    path: /generatePresignedUrl
    method: GET
    data_selector: presignedUrl
- name: file
  endpoint:
    path: /path/to/file-name
    method: POST
    data_selector: files
    params: {}
- name: directory
  endpoint:
    path: /directory-name
    method: GET
    data_selector: directories
    params: {}
- name: buckets
  endpoint:
    path: /
    method: GET
    data_selector: Buckets
- name: create_bucket
  endpoint:
    path: /
    method: PUT
    data_selector: Bucket
    params: {}
- name: upload_object
  endpoint:
    path: /
    method: PUT
    data_selector: Object
    params: {}
- name: download_object
  endpoint:
    path: /
    method: GET
    data_selector: Object
    params: {}
- name: delete_object
  endpoint:
    path: /
    method: DELETE
    data_selector: Object
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: s3_http_post
  endpoint:
    path: /s3-http-post
    method: POST
    data_selector: files
    params: {}
- name: file
  endpoint:
    path: /services/data/vXX.X/sobjects/File
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: bucket
  endpoint:
    path: /
    method: POST
    data_selector: ''
    params: {}
- name: object
  endpoint:
    path: /{bucket_name}/{object_name}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_data
  endpoint:
    path: /archive/content-archive/third-party-tools-and-clients/file-management-client-configurations/cyberduck/how-to-delete-data-with-cyberduck
    method: DELETE
- name: companies
  endpoint:
    path: /companies
    method: POST
    data_selector: company
    params: {}
- name: fileUpload
  endpoint:
    path: /upload
    method: POST
    data_selector: file
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
- name: IPFS Pinning Service
  endpoint:
    path: /api-documentation/ipfs-pinning-service-api
    method: GET
    data_selector: records
- name: S3-Compatible API
  endpoint:
    path: /api-documentation/s3-compatible-api
    method: GET
    data_selector: records
- name: buckets
  endpoint:
    path: /list-buckets
    method: GET
    data_selector: Buckets
- name: data
  endpoint:
    path: /api/v1/data
    method: GET
    data_selector: items
    params:
      incremental: updated_at
- name: Filebase
  endpoint:
    path: /s3/filebase-bucket
    method: PUT
    data_selector: CORSRules
    params: {}
- name: upload_object
  endpoint:
    path: /fPutObject
    method: POST
    data_selector: result
    params:
      bucket: filebase-sample-bucket
      object: myobject
      path: /path/to/object
- name: get_object
  endpoint:
    path: /getObject
    method: GET
    data_selector: result
    params:
      bucket: filebase-sample-bucket
      object: myobject
- name: filebase_sample_bucket
  endpoint:
    path: /filebase-sample-bucket/my_file.json
    method: GET
    data_selector: Details
- name: static_files
  endpoint:
    path: /static
    method: GET
    data_selector: files
- name: bucket
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: data
- name: storage
  endpoint:
    path: /storage
    method: POST
    data_selector: data
    params:
      AWS Access Key: Your Filebase Access Key
      AWS Secret Key: Your Filebase Secret Key
      AWS Bucket: Your Filebase Bucket Name
      Endpoint: http://s3.filebase.com
      Signature Version: v4
      Region: us-east-1
- name: pinning_files
  endpoint:
    path: /api/v1/pinning/files
    method: POST
    data_selector: data
    params: {}
- name: listing_files
  endpoint:
    path: /api/v1/pinning/files
    method: GET
    data_selector: files
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: pinning_files
  endpoint:
    path: /api/documentation/ipfs-pinning-service-api
    method: GET
- name: ipfs_rpc
  endpoint:
    path: /api/documentation/ipfs-rpc-api
    method: GET
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: data
- name: directory
  endpoint:
    path: /directories
    method: GET
    data_selector: files
- name: users
  endpoint:
    path: /
    method: POST
    data_selector: success
    params: {}
- name: bucket
  endpoint:
    path: /buckets
    method: POST
    data_selector: bucket_name
    params: {}
- name: upload_directory
  endpoint:
    path: /path/to/directory/to/upload
    method: POST
    data_selector: ''
    params: {}
- name: file_download
  endpoint:
    path: /download
    method: POST
    data_selector: download
    params: {}
- name: file_upload
  endpoint:
    path: /upload
    method: POST
    data_selector: upload
    params: {}
- name: file
  endpoint:
    path: /api/v1/files
    method: GET
    data_selector: files
    params: {}
- name: companies
  endpoint:
    path: /companies
    method: GET
    data_selector: company
    params: {}
- name: bucket
  endpoint:
    path: /v1/buckets
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /v1/files
    method: GET
    data_selector: data
- name: upload_object
  endpoint:
    path: /upload
    method: POST
    data_selector: response
    params: {}
- name: pinning_files
  endpoint:
    path: /api/pinning/files
    method: POST
    data_selector: data
- name: listing_files
  endpoint:
    path: /api/pinning/files
    method: GET
    data_selector: data
- name: file_management
  endpoint:
    path: /file-management
    method: GET
    data_selector: files
    params: {}
- name: fileUpload
  endpoint:
    path: /upload
    method: POST
    data_selector: file
    params: {}
- name: pin_file
  endpoint:
    path: /path/to/object/to/upload
    method: PUT
    data_selector: ''
    params: {}
- name: pin_folder
  endpoint:
    path: /path/to/files
    method: PUT
    data_selector: ''
    params: {}
- name: files
  endpoint:
    path: /api/files
    method: GET
    data_selector: files
    params: {}
- name: upload_ipfs_file
  endpoint:
    path: /
    method: PUT
    data_selector: response
    params:
      Bucket: my-ipfs-bucket
      Key: ipfs-car.car
      Body: data
      Metadata:
        import: car
- name: Filebase
  endpoint:
    path: /s3/filebase-bucket
    method: PUT
    data_selector: CORSRules
    params: {}
- name: file
  endpoint:
    path: /files
    method: GET
    data_selector: files
    params: {}
- name: folder
  endpoint:
    path: /folders
    method: GET
    data_selector: folders
    params: {}
- name: upload_file
  endpoint:
    path: /upload
    method: POST
    data_selector: result
    params: {}
- name: files
  endpoint:
    path: /api/v1/files
    method: GET
    data_selector: records
- name: file_management
  endpoint:
    path: /api/v1/files
    method: GET
    data_selector: records
- name: upload_file
  endpoint:
    path: /
    method: PUT
    data_selector: uploaded_file
    params: {}
- name: upload_folder
  endpoint:
    path: /
    method: PUT
    data_selector: uploaded_folder
    params: {}
- name: my_file
  endpoint:
    path: /filebase-sample-bucket/my_file.json
    method: GET
    data_selector: Details
- name: upload_file
  endpoint:
    path: /put_object
    method: PUT
    data_selector: body
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
- name: objects
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: delete_data
  endpoint:
    path: /delete/data
    method: DELETE
- name: Filebase
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: ipfs_pinning_service
  endpoint:
    path: /api/ipfs/pinning
    method: POST
    data_selector: data
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
    params: {}
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: buckets
    params: {}
- name: upload_file
  endpoint:
    path: /upload
    method: PUT
    data_selector: file
    params: {}
- name: s3
  endpoint:
    path: /s3
    method: GET
    data_selector: files
    params:
      maxFileSize: 100000000
- name: users
  endpoint:
    path: /
    method: POST
    data_selector: success
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: file_management
  endpoint:
    path: /api/v1/files
    method: GET
    data_selector: files
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: data
- name: upload_files
  endpoint:
    path: /path/to/directory/to/upload
    method: POST
    data_selector: files
    params:
      Bucket: filebase-bucket-name
- name: pinning_files
  endpoint:
    path: /api-documentation/ipfs-pinning-service-api
    method: POST
- name: listing_files
  endpoint:
    path: /api-documentation/ipfs-pinning-service-api/listing-files
    method: GET
- name: deleting_files
  endpoint:
    path: /api-documentation/ipfs-pinning-service-api/deleting-files
    method: DELETE
- name: data_files
  endpoint:
    path: /services/data/vXX.X/sobjects/DataFiles
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: upload_object
  endpoint:
    path: /upload
    method: POST
    data_selector: response
    params: {}
- name: IPFS Pinning Service API
  endpoint:
    path: /api-documentation/ipfs-pinning-service-api
    method: GET
- name: S3-Compatible API
  endpoint:
    path: /api-documentation/s3-compatible-api
    method: GET
- name: pin_ls
  endpoint:
    path: /api/v0/pin/ls
    method: POST
- name: version
  endpoint:
    path: /api/v0/version
    method: POST
- name: cat
  endpoint:
    path: /api/v0/cat
    method: POST
    params:
      arg: CID of the file
- name: block_get
  endpoint:
    path: /api/v0/block/get
    method: POST
    params:
      arg: CID of the block
- name: add
  endpoint:
    path: /api/v0/add
    method: POST
- name: pin_add
  endpoint:
    path: /api/v0/pin/add
    method: POST
    params:
      arg: CID to pin
- name: pin_rm
  endpoint:
    path: /api/v0/pin/rm
    method: POST
    params:
      arg: CID to unpin
- name: upload_file
  endpoint:
    path: /upload
    method: PUT
    data_selector: response
    params:
      bucket: bucket-name
      key: ipfs-car.car
- name: pin_file
  endpoint:
    path: /upload
    method: PUT
    data_selector: response
    params:
      Bucket: my-ipfs-bucket
      Key: ipfs-car.car
      Body: data
      Metadata:
        import: car
- name: pinning
  endpoint:
    path: /api/pinning
    method: POST
    data_selector: data
    params: {}
- name: listing_files
  endpoint:
    path: /api/files
    method: GET
    data_selector: files
    params: {}
- name: upload_file
  endpoint:
    path: /upload
    method: POST
    data_selector: result
    params: {}
- name: upload_folder
  endpoint:
    path: /upload/folder
    method: POST
    data_selector: result
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: data
- name: pin_file
  endpoint:
    path: /upload
    method: PUT
    data_selector: response
    params:
      bucket_name: filebase-bucket-name
      object_name: ipfs-car.car
- name: pin_folder
  endpoint:
    path: /upload
    method: PUT
    data_selector: response
    params:
      bucket_name: filebase-bucket-name
      object_name: ipfs-car.car
- name: file
  endpoint:
    path: /list
    method: GET
    data_selector: files
    params: {}
- name: folder
  endpoint:
    path: /folders
    method: GET
    data_selector: folders
    params: {}
- name: bucket
  endpoint:
    path: /
    method: PUT
    data_selector: object
    params: {}
- name: file
  endpoint:
    path: /api/v1/files
    method: GET
    data_selector: files
    params: {}
- name: upload_file
  endpoint:
    path: /v1/ipfs/upload
    method: POST
    data_selector: data
    params: {}
- name: pin_file
  endpoint:
    path: /v1/ipfs/pin
    method: POST
    data_selector: data
    params: {}
- name: pinning_service
  endpoint:
    path: /
    method: POST
    data_selector: ''
    params: {}
- name: buckets
  endpoint:
    path: /buckets
    method: GET
- name: upload_folder
  endpoint:
    path: /buckets/upload
    method: POST
- name: object_overview
  endpoint:
    path: /buckets/{bucket_id}/objects/{object_id}
    method: GET
- name: edit_metadata
  endpoint:
    path: /buckets/{bucket_id}/objects/{object_id}/metadata
    method: PUT
- name: download_object
  endpoint:
    path: /buckets/{bucket_id}/objects/{object_id}/download
    method: GET
- name: share_object
  endpoint:
    path: /buckets/{bucket_id}/objects/{object_id}/share
    method: POST
- name: access_keys
  endpoint:
    path: /keys
    method: GET
    data_selector: keys
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: pinning_files
  endpoint:
    path: /api/pinning/files
    method: POST
    data_selector: data
    params: {}
- name: listing_files
  endpoint:
    path: /api/pinning/files
    method: GET
    data_selector: files
    params: {}
- name: pin_ls
  endpoint:
    path: /api/v0/pin/ls
    method: GET
- name: version
  endpoint:
    path: /api/v0/version
    method: GET
- name: cat
  endpoint:
    path: /api/v0/cat
    method: GET
- name: block_get
  endpoint:
    path: /api/v0/block/get
    method: GET
- name: add
  endpoint:
    path: /api/v0/add
    method: POST
- name: pin_add
  endpoint:
    path: /api/v0/pin/add
    method: POST
- name: pin_rm
  endpoint:
    path: /api/v0/pin/rm
    method: POST
- name: pin_ls
  endpoint:
    path: /api/v0/pin/ls
    method: POST
- name: version
  endpoint:
    path: /api/v0/version
    method: POST
- name: cat
  endpoint:
    path: /api/v0/cat
    method: POST
    params:
      arg: CID of the file
- name: block_get
  endpoint:
    path: /api/v0/block/get
    method: POST
    params:
      arg: CID of the block
- name: add
  endpoint:
    path: /api/v0/add
    method: POST
- name: pin_add
  endpoint:
    path: /api/v0/pin/add
    method: POST
    params:
      arg: CID to pin
- name: pin_rm
  endpoint:
    path: /api/v0/pin/rm
    method: POST
    params:
      arg: CID to unpin
notes:
- API key is required for authentication.
- Filebase maintains a strict HTTPS-only standard.
- The Filebase S3 API has an effective rate limit of 100 RPS (requests per second).
- Uses OAuth2 for authentication
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- API requires an API key for authentication
- API supports S3 and IPFS functionality.
- Data stored on Filebase is always encrypted during transit and when the data is
  at rest.
- Filebase does not currently accept payment in cryptocurrencies.
- Customers must clean up and remove all of their data first before closing their
  account.
- API requires an API key for access.
- All buckets are private by default.
- Public bucket functionality is only available to paid subscription users.
- Uses OAuth2 with refresh token — requires setup of connected app in CyberDuck
- Some responses may include metadata fields with null values
- Some APIs may return nulls in fields
- Requires a valid server configuration to access files
- CyberDuck supports various file protocols including S3.
- Bucket names must be unique across all Filebase users, be between 3 and 63 characters
  long, and can contain only lowercase characters, numbers, and dashes.
- Requires authentication via OAuth2.
- API rate limits may apply.
- IPFS uses content addressing rather than location addressing
- Ensure you have the correct API key for authentication.
- Requires API key for authentication.
- Ensure to configure the API key and secret for authentication.
- IPFS uses content addressing to identify files instead of location addressing.
- Requires setup of connected app in Filebase.
- Ensure API key has appropriate permissions set.
- IPFS pinning assures that data is accessible indefinitely, and will not be removed
  during the IPFS garbage collection process.
- Pin by CID is a paid feature that requires a paid Filebase IPFS subscription plan.
- Uses CIDv0 as the default version for a wide variety of IPFS applications and operations.
- New projects are advised to use CIDv1 for future-proofing.
- If you intend to use more than one bucket, you will need to repeat the command with
  the secret access token for each bucket.
- The nickname should be Filebase(Bucket-Name) in order to identify different buckets.
- Some objects may return nulls in deeply nested fields
- Pinning assures that data is accessible indefinitely, and will not be removed during
  the IPFS garbage collection process.
- The Filebase Public IPFS Gateway has an effective rate limit of 200 RPM (requests
  per minute).
- Gateways can serve the CID of a folder instead of just a single file.
- Files uploaded to an IPFS bucket on Filebase are automatically pinned to IPFS and
  stored with 3x replication.
- OAuth2 with refresh token required for authentication
- The Filebase Public IPFS Gateway only serves content stored on Filebase.
- API key is required for authentication
- Rate limits apply to all requests
- Requires setup of connected app in Filebase
- Uses S3 Compatible API for file uploads
- Requires setup of OAuth2 credentials in Filebase
- Some files may return nulls in deeply nested fields
- 'Three methods for deleting files: JavaScript SDK, S3 Compatible API, web application
  dashboard.'
- Requires setup of API key in Filebase dashboard
- 'Deleting files pinned to IPFS using Filebase can be done using three methods: JavaScript
  SDK, S3 Compatible API, and web application dashboard.'
- Events are JSON-based and are sent using an HTTP POST request.
- A 200 OK response code must be returned. If a non-200 code is returned, Filebase
  will consider the event delivery a failure and retry sending.
- Uses OAuth2 with refresh token — requires setup of connected app in Filebase
- API access requires an API key.
- Ensure proper rate limiting when accessing endpoints.
- Each bucket can have its own unique event configuration.
- Requires setup of connected app in api
- API key must be generated from the Filebase dashboard
- Filebase Dedicated IPFS Gateways are a feature only available to paid users. They
  are not available for users on the free tier.
- Gateway names must be lowercase, between 3-63 characters, and unique.
- If a gateway is configured to serve a root CID, it cannot also be configured to
  be restricted to a bucket.
- Uses API key for authentication.
- Filebase simplifies the management of IPNS names through an intuitive dashboard
  and powerful API
- API usage is subject to rate limits.
- Ensure to handle API key securely.
- Supports OAuth2 authentication.
- Rate limiting may apply.
- Filebase includes an image resizing and optimization feature that can be accessed
  through any Filebase dedicated gateway.
- Ensure API key is included in the header for authentication.
- 'Use Appropriate Dimensions: Resize images to the dimensions required for display
  to avoid serving unnecessarily large files.'
- 'Choose Optimal Formats: Use modern formats like WebP for better compression and
  quality.'
- 'Balance Quality and Size: Adjust the quality parameter to find a balance between
  image quality and file size.'
- Filebase Dedicated IPFS Gateways are unique compared to other solutions and come
  with several benefits, such as increased performance and retrieval times.
- No rate limits when accessing content through the dedicated gateway.
- The gateway can serve any public CID, even ones not pinned by Filebase.
- The gateway can only serve CID's that are pinned by Filebase.
- The gateway is tied to a bucket and can only serve content from that specific bucket.
- Gateway names must be lowercase, between 3-63 characters, and must be unique.
- You must have a registered domain name.
- Access to your domain's DNS management settings.
- A dedicated IPFS gateway set up on Filebase.
- Requires setup of connected app in filebase
- API calls may be subject to limits
- Users can append the filebaseGatewayToken query string parameter to the URL when
  making an HTTP request to the dedicated gateway.
- Users can include the x-filebase-gateway-token header in their HTTP request.
- Ensure proper authentication setup for accessing API
- Image compression is automatically applied to optimize the file size.
- This example uses an expiration time of 3600 seconds.
- Requires API key for access
- Requires OAuth2 setup for API access.
- Ensure correct permissions are granted for the application.
- API keys are required for authentication.
- Ensure that the API key has the necessary permissions.
- API usage is subject to rate limiting.
- Ensure correct API key is used for authentication.
- Configure project to store files on Filebase using the provided app.js configuration.
- Pre-signed URLs are only valid until the specified time and date. All actions must
  be completed before expiration.
- Change the ‘Timeout’ value to 30 seconds.
- Rate limits may apply based on the account type.
- Change the timeout to 30 seconds.
- Timeout should be set to 30 seconds.
- Ensure to use the correct OAuth scopes for API access.
- Uses OAuth2 with refresh token — requires setup of connected app in cyberduck
- Configure the project to store files on Filebase using the apostrophe-attachments
  module.
- Hard coding credentials is not recommended for production environments.
- Uses OAuth2 — requires setup of connected app in Filebase
- Timeout set to 30 seconds
- Requires configuration of OAuth tokens prior to use.
- May encounter rate limiting during heavy usage.
- API key required for authentication.
- Requires API key for access.
- Filebase API may have rate limits that could affect data ingestion speed.
- Known quirks, limitations, or behaviors of the API may affect integration or data
  quality.
- Supports S3-compatible API for file management
- Integration requires API key and secret.
- Rate limits apply to API calls.
- Rate limits are applied to API calls
- Ensure API key is kept secure
- Have your Filebase Access and Secret Keys.
- Create a Filebase Bucket.
- Requires an API key for authentication.
- Filebase is unable to provide specific configurations or debugging for custom applications
  due to their individualized nature.
- Configure the settings.py file to reflect your Filebase credentials and bucket information.
- Ensure API key is kept secret and not exposed in client-side code.
- You need to set environment variables that contain your Filebase Access and Secret
  keys.
- Buckets created through this method will be automatically created on the IPFS network.
- Some APIs may have usage limits and require optimization.
- No configuration of Filebase settings or endpoints needed, just your Filebase Access
  and Secret key pair.
- Each file uploaded will be uploaded to your Filebase bucket that you specified in
  the .env file.
- API is rate-limited at 100 requests per minute.
- Enter two variables, FILEBASE_ACCESS_KEY and FILEBASE_SECRET_KEY.
- Configure CORS policy for Filebase bucket to allow connection to Paperspace
- Use S3-compatible storage type for Paperspace integration
- Requires setup of connected app in CyberDuck
- Ensure your API key is kept secure.
- Authentication uses API key — ensure it is securely stored
- Requires setup of API keys in the Filebase dashboard
- API keys must be kept secure to prevent unauthorized access.
- Filebase provides an S3-compatible API for storage services.
- Users need to configure authentication properly to access the APIs.
- Replace ‘bucket-name’ with your Filebase bucket name.
- API keys must be stored securely and not exposed in public repositories.
- Now, when a user submits the form in the Vue app, the image file they include in
  the form will be uploaded to the configured Filebase bucket!
- Requires setup of Google Cloud project and enabling APIs
- Requires an IDE to configure scripts for Google Apps.
- Requires OAuth2 setup in CyberDuck.
- Ensure correct file permissions are set.
- Requires Filebase Access and Secret Keys
- Ensure that API keys are set up correctly to access endpoints.
- Requires setup of OAuth credentials in CyberDuck application.
- Requires Filebase Access and Secret Keys.
- Configure the Filebase bucket to have a CORS policy that allows connection to Paperspace.
- Select 'S3-compatible' as the storage type.
- Some files may return nulls in metadata fields
- Requires setup of OAuth2 in CyberDuck settings
- Select the blue ‘Send’ button to test your configuration.
- API key must be included in the Authorization header.
- Rate limits are enforced on API calls.
- Rate limits apply, please check the documentation.
- Replace the variables in the Paths file to reflect your Filebase Access Key and
  Secret Key.
- Each of these scripts can be repurposed to upload and download different game assets
  to Filebase.
- A token is required to be sent with each request in the HTTP headers.
- Requires API key for authentication
- Temporary email addresses cannot be used to create a Filebase account.
- Public buckets are not available for free accounts. Users will need to have an active
  Filebase premium account to create and enable public buckets.
- Filebase currently does not support multiple access key pairs per account but will
  support this feature in the future.
- Uppy currently does not support Windows NPM environments.
- All buckets are private by default. Public bucket functionality is only available
  to paid subscription users.
- All files stored in IPFS buckets, even if the bucket is private, are publically
  accessible. IPFS files are available through IPFS CIDs and IPFS gateways.
- To share objects using link sharing, the bucket will need to have accessibility
  set to public.
- Deleting a folder will delete all of its contents as well.
- Authentication requires setup of a connected app in Filebase
- Image should be less than 5MB
- Some operations may be subject to rate limits
- Requires OAuth2 setup for authorization
- Requires an API key for authentication
- Filebase supports decentralized networks powered by blockchain.
- customers must clean up and remove all of their data first before closing their
  account.
- Uses AWS SDK for JavaScript to interact with Filebase
- Has been tested with .car archives containing 10,000 or more files
- Ensure to manage your API keys securely.
- Uses AWS SDK for PHP for interactions with Filebase S3-compatible services.
- Ensure that the AWS SDK for PHP Version 3 is installed.
- Rate limits apply to API requests.
- Requires OAuth2 setup for API access
- Potential issues with large file transfers
- Requires setup of Filebase Access and Secret Keys
- Requires OAuth2 setup for access tokens.
- Token is required to be sent with each request in the HTTP headers.
- File sharing is made extremely easy, since all files uploaded to IPFS are publicly
  accessible through their CID value.
- Uses OAuth2 for authentication.
- All files stored in IPFS buckets, even if the bucket is private, are publically
  accessible.
- Some endpoints may have limitations on data retrieval
- Uses OAuth2 with refresh token for authentication
- Uses API key for authentication
errors:
- '401 Unauthorized: Check your API key.'
- '404 Not Found: The resource you requested does not exist.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403 Forbidden: Check API key permissions'
- '404 Not Found: Ensure the endpoint is correct'
- '500 Internal Server Error: Retry the request'
- '401 Unauthorized: Check API key'
- '401 Unauthorized: Recheck access keys or token expiration'
- '404 Not Found: Check the file path or server configuration'
- '500 Internal Server Error: Server issue, try again later'
- '401 Unauthorized: Check your OAuth token.'
- '403 Forbidden: Ensure you have access to the requested resource.'
- 'InvalidAccessKeyId: The AWS Access Key Id you provided does not exist in our records.'
- 'SignatureDoesNotMatch: The request signature we calculated does not match the signature
  you provided.'
- '401 Unauthorized: Recheck your API credentials.'
- '429 Too Many Requests: You have hit the rate limit.'
- '403 Forbidden: Check your API key permissions.'
- '404 Not Found: Verify the bucket or file exists.'
- '401 Unauthorized: Check API key validity.'
- '401 Unauthorized: Check your API key and secret.'
- '404 Not Found: Verify the endpoint path.'
- '403 Forbidden: Check your API key and permissions.'
- '404 Not Found: Verify the endpoint and parameters.'
- '500 Internal Server Error: Try again later.'
- '401 Unauthorized: Check your credentials'
- '403 Forbidden: Insufficient permissions'
- '404 Not Found: The requested resource does not exist'
- '403 Forbidden: Check permissions for the requested resource'
- '404 Not Found: Ensure the endpoint URL is correct'
- '500 Internal Server Error: Try again later or contact support'
- '401 Unauthorized: Check your OAuth2 credentials'
- '404 Not Found: Verify the endpoint and resource existence'
- '401 Unauthorized: Check API key validity'
- '429 Too Many Requests: Rate limit exceeded'
- '403 Forbidden: Check if your API key has the necessary permissions.'
- '404 Not Found: Verify the endpoint path and resource availability.'
- '403 Forbidden: Check your API key permissions'
- '404 Not Found: Verify the endpoint you are trying to access'
- '500 Internal Server Error: Retry the request after some time'
- '403 Forbidden: API key is invalid or insufficient permissions.'
- '404 Not Found: Requested resource does not exist.'
- '401 Unauthorized: Check your credentials.'
- '403 Forbidden: You do not have permission to access this resource.'
- '403 Forbidden: Ensure permissions are correct.'
- '401 Unauthorized: Check authentication credentials'
- '403 Forbidden: Insufficient permissions to access the resource'
- '403 Forbidden: Check your permissions.'
- '404 Not Found: Resource does not exist.'
- '400: Bad Request Bad request'
- '401: Unauthorized Unauthorized request'
- '404: Not Found Resource not found'
- '409: Naming conflict'
- '500: Internal Server Error Internal server error'
- '404 Not Found: Verify the endpoint URL.'
- '404 Not Found: Check the endpoint and resource.'
- '403 Forbidden: Verify API key permissions.'
- '401 Unauthorized: Check your API key and permissions.'
- '404 Not Found: Verify the resource path.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check your API credentials.'
- '404 Not Found: Verify the endpoint path and parameters.'
- '400: Bad Request'
- '401: Unauthorized'
- '404: Not Found'
- '500: Internal Server Error'
- '403 Forbidden: Ensure you have the necessary permissions.'
- '404 Not Found: Resource not found.'
- '404 Not Found: Verify the endpoint and resource path.'
- '403 Forbidden: Check API key and permissions.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '429 Too Many Requests: Slow down your request rate.'
- '500 Internal Server Error: Try again later'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check API key and permissions.'
- '404 Not Found: Ensure the resource exists.'
- '403 Forbidden: Check your API key or permissions.'
- '401 Unauthorized: Check your API key'
- '404 Not Found: Ensure the resource exists'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Verify API key and secret'
- '403 Forbidden: Check your API key and permissions'
- '403 Forbidden: Check API key permissions.'
- '401 Unauthorized: Check your OAuth tokens.'
- '404 Not Found: Verify the requested file path.'
- '401 Unauthorized: Invalid API Key'
- '404 Not Found: Resource not found'
- '401 Unauthorized: Check API key or token validity'
- '404 Not Found: Endpoint does not exist or is incorrectly specified'
- '404 Not Found: Verify the file path.'
- '404 Not Found: Verify the endpoint path'
- '401 Unauthorized: Check token validity'
- '404 Not Found: Check the endpoint URL'
- '404 Not Found: The requested resource does not exist.'
- '404 Not Found: Check the resource path or ID.'
- '403 Forbidden: Verify your API key and permissions.'
- '401 Unauthorized: Recheck API key or permissions'
- '404 Not Found: Check the requested resource or endpoint'
- '403 Forbidden: Check your API key or permissions'
- '404 Not Found: Verify the endpoint or resource ID'
- '429 Too Many Requests: Reduce the frequency of requests'
- '404 Not Found: Verify the endpoint and resource path'
- '401 Unauthorized: Recheck access key credentials'
- Overage charge for the amount of storage and bandwidth used that is over the amount
  included in your new subscription tier.
- '401 Unauthorized: Invalid API key or token.'
- '404 Not Found: Ensure the endpoint is correct.'
- '401 Unauthorized: Check your OAuth credentials'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify client credentials.'
- '401 Unauthorized: Invalid API key.'
- '401 Unauthorized: Check your access token'
- '403 Forbidden: You do not have permission for this resource'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - APIKey
  - APISecret
  - OAuth2
  - FILEBASE_ACCESS_KEY
  - FILEBASE_SECRET_KEY
  - OAuthToken
  - Secret Access Token
client:
  base_url: https://s3.filebase.com
  auth:
    type: aws4
    location: header
source_metadata: null
