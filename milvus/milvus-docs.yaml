resources:
- name: camel_paper
  endpoint:
    path: local_data/camel paper.pdf
    method: GET
    data_selector: content
    params: {}
- name: create_decay_ranker
  endpoint:
    path: /create_decay_ranker
    method: POST
    data_selector: ranker
    params: {}
- name: apply_standard_vector_search
  endpoint:
    path: /apply_standard_vector_search
    method: POST
    data_selector: search_results
    params: {}
- name: apply_hybrid_search
  endpoint:
    path: /apply_hybrid_search
    method: POST
    data_selector: hybrid_results
    params: {}
- name: document
  endpoint:
    path: /similarity_search
    method: POST
    data_selector: documents
    params:
      expr: source == 'https://lilianweng.github.io/posts/2023-06-23-agent/'
      k: 1
- name: campaign_member
  endpoint:
    params:
      incremental: updated_at
- name: contact
  endpoint:
    params: {}
- name: Proxy Node Num
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_proxy_num
- name: Sync Time
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_sync_epoch_time
- name: DDL Request Rate
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_ddl_req_count
- name: DDL Request Latency
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_ddl_req_latency
- name: Sync Timetick Latency
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_sync_timetick_latency
- name: ID Alloc Rate
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_id_alloc_count
- name: Timestamp
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_timestamp
- name: Timestamp Saved
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_timestamp_saved
- name: Collection Num
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_collection_num
- name: Partition Num
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_partition_num
- name: DML Channel Num
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_dml_channel_num
- name: Msgstream Num
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_msgstream_obj_num
- name: Credential Num
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_credential_num
- name: Time Tick Delay
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_rootcoord_time_tick_delay
- name: Collection Loaded Num
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_querycoord_collection_num
- name: Entity Loaded Num
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_querycoord_entitiy_num
- name: Load Request Rate
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_querycoord_load_req_count
- name: Release Request Rate
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_querycoord_release_req_count
- name: Load Request Latency
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_querycoord_load_latency
- name: Release Request Latency
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_querycoord_release_latency
- name: Sub-Load Task
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_querycoord_child_task_num
- name: Parent Load Task
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_querycoord_parent_task_num
- name: Sub-Load Task Latency
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_querycoord_child_task_latency
- name: Query Node Num
  endpoint:
    path: /metrics
    method: GET
    data_selector: milvus_querycoord_querynode_num
- name: query_node_metrics
  endpoint:
    path: /query_node
    method: GET
    data_selector: metrics
- name: data_coordinator_metrics
  endpoint:
    path: /data_coordinator
    method: GET
    data_selector: metrics
- name: flowgraph_num
  endpoint:
    path: /metrics
    method: GET
    data_selector: sum(milvus_datanode_flowgraph_num{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}) by (pod, node_id)
- name: msg_rows_consume_rate
  endpoint:
    path: /metrics
    method: GET
    data_selector: sum(increase(milvus_datanode_msg_rows_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])/120) by (msg_type,
      pod, node_id)
- name: flush_data_size_rate
  endpoint:
    path: /metrics
    method: GET
    data_selector: sum(increase(milvus_datanode_flushed_data_size{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])/120) by (msg_type,
      pod, node_id)
- name: consumer_num
  endpoint:
    path: /metrics
    method: GET
    data_selector: sum(milvus_datanode_consumer_num{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}) by (pod, node_id)
- name: producer_num
  endpoint:
    path: /metrics
    method: GET
    data_selector: sum(milvus_datanode_producer_num{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}) by (pod, node_id)
- name: sync_time
  endpoint:
    path: /metrics
    method: GET
    data_selector: avg(milvus_datanode_sync_epoch_time{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}) by (pod, node_id)
      max(milvus_datanode_sync_epoch_time{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}) by (pod, node_id)
      min(milvus_datanode_sync_epoch_time{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}) by (pod, node_id)
- name: unflushed_segment_num
  endpoint:
    path: /metrics
    method: GET
    data_selector: sum(milvus_datanode_unflushed_segment_num{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}) by (pod, node_id)
- name: encode_buffer_latency
  endpoint:
    path: /metrics
    method: GET
    data_selector: 'p99: histogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_datanode_encode_buffer_latency_bucket{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m]))) avg: sum(increase(milvus_datanode_encode_buffer_latency_sum{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)
      / sum(increase(milvus_datanode_encode_buffer_latency_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)'
- name: save_data_latency
  endpoint:
    path: /metrics
    method: GET
    data_selector: 'p99: histogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_datanode_save_latency_bucket{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m]))) avg: sum(increase(milvus_datanode_save_latency_sum{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)
      / sum(increase(milvus_datanode_save_latency_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)'
- name: flush_operate_rate
  endpoint:
    path: /metrics
    method: GET
    data_selector: sum(increase(milvus_datanode_flush_buffer_op_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])/120) by (status,
      pod, node_id)
- name: autoflush_operate_rate
  endpoint:
    path: /metrics
    method: GET
    data_selector: sum(increase(milvus_datanode_autoflush_buffer_op_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])/120) by (status,
      pod, node_id)
- name: flush_request_rate
  endpoint:
    path: /metrics
    method: GET
    data_selector: sum(increase(milvus_datanode_flush_req_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])/120) by (status,
      pod, node_id)
- name: compaction_latency
  endpoint:
    path: /metrics
    method: GET
    data_selector: 'p99: histogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_datanode_compaction_latency_bucket{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m]))) avg: sum(increase(milvus_datanode_compaction_latency_sum{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)
      / sum(increase(milvus_datanode_compaction_latency_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)'
- name: index_request_rate
  endpoint:
    path: /metrics
    method: GET
    data_selector: sum(increase(milvus_indexcoord_indexreq_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])/120) by (status)
- name: index_task_count
  endpoint:
    path: /metrics
    method: GET
    data_selector: sum(milvus_indexcoord_indextask_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}) by (index_task_status)
- name: index_node_num
  endpoint:
    path: /metrics
    method: GET
    data_selector: sum(milvus_indexcoord_indexnode_num{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}) by (app_kubernetes_io_instance)
- name: index_task_rate
  endpoint:
    path: /metrics
    method: GET
    data_selector: sum(increase(milvus_indexnode_index_task_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])/120) by (status,
      pod, node_id)
- name: load_field_latency
  endpoint:
    path: /metrics
    method: GET
    data_selector: 'p99: histogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_indexnode_load_field_latency_bucket{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m]))) avg: sum(increase(milvus_indexnode_load_field_latency_sum{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)
      / sum(increase(milvus_indexnode_load_field_latency_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)'
- name: decode_field_latency
  endpoint:
    path: /metrics
    method: GET
    data_selector: 'p99: histogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_indexnode_decode_field_latency_bucket{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m]))) avg: sum(increase(milvus_indexnode_decode_field_latency_sum{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)
      / sum(increase(milvus_indexnode_decode_field_latency_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)'
- name: build_index_latency
  endpoint:
    path: /metrics
    method: GET
    data_selector: 'p99: histogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_indexnode_build_index_latency_bucket{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m]))) avg: sum(increase(milvus_indexnode_build_index_latency_sum{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)
      / sum(increase(milvus_indexnode_build_index_latency_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)'
- name: encode_index_latency
  endpoint:
    path: /metrics
    method: GET
    data_selector: 'p99: histogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_indexnode_encode_index_latency_bucket{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m]))) avg: sum(increase(milvus_indexnode_encode_index_latency_sum{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)
      / sum(increase(milvus_indexnode_encode_index_latency_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)'
- name: save_index_latency
  endpoint:
    path: /metrics
    method: GET
    data_selector: 'p99: histogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_indexnode_save_index_latency_bucket{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m]))) avg: sum(increase(milvus_indexnode_save_index_latency_sum{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)
      / sum(increase(milvus_indexnode_save_index_latency_count{app_kubernetes_io_instance=~"$instance",
      app_kubernetes_io_name="$app_name", namespace="$namespace"}[2m])) by(pod, node_id)'
- name: binary_vector
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: null
    params: {}
- name: milvus-eks-cluster
  endpoint:
    path: /services/data/v1/eks-cluster
    method: POST
    data_selector: clusters
    params: {}
- name: embedding_function
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: iterator_collection
  endpoint:
    path: /search_iterator
    method: POST
    data_selector: results
    params:
      topK: 20000
      batchSize: 50
- name: image_collection
  endpoint:
    path: /create_collection
    method: POST
    data_selector: result
    params: {}
- name: tech_articles
  endpoint:
    path: /tech_articles
    method: GET
    data_selector: documents
    params: {}
- name: my_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: data
    params: {}
- name: insert_data
  endpoint:
    path: /v2/vectordb/entities/insert
    method: POST
    data_selector: data
    params: {}
- name: my_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: data
    params: {}
- name: text_dense
  endpoint:
    path: /hybrid_search
    method: POST
    data_selector: data
    params:
      anns_field: text_dense
      limit: 2
      param:
        nprobe: 10
- name: text_sparse
  endpoint:
    path: /hybrid_search
    method: POST
    data_selector: data
    params:
      anns_field: text_sparse
      limit: 2
      param:
        drop_ratio_search: 0.2
- name: collection_schema
  endpoint:
    path: /create_schema
    method: POST
    data_selector: schema
    params:
      auto_id: false
- name: hybrid_search
  endpoint:
    path: /v2/vectordb/entities/advanced_search
    method: POST
    data_selector: results
    params:
      collectionName: my_collection
      limit: 2
- name: add_documents
  endpoint:
    path: /add_documents
    method: POST
- name: similarity_search
  endpoint:
    path: /similarity_search
    method: GET
- name: documents
  endpoint:
    path: /add_documents
    method: POST
    data_selector: results
- name: similarity_search
  endpoint:
    path: /similarity_search
    method: POST
    data_selector: results
- name: delete_documents
  endpoint:
    path: /delete
    method: DELETE
    data_selector: results
- name: product_catalog
  endpoint:
    path: /query
    method: POST
    data_selector: results
- name: customer_profiles
  endpoint:
    path: /query
    method: POST
    data_selector: results
- name: product_catalog
  endpoint:
    path: /query
    method: POST
    data_selector: result
    params: {}
- name: documents
  endpoint:
    path: /load_data
    method: POST
    data_selector: documents
    params: {}
- name: collection_schema
  endpoint:
    path: /v2/vectordb/entities
    method: POST
    data_selector: schema
    params: {}
- name: text_match
  endpoint:
    path: /enable/text_match
    method: POST
    data_selector: results
    params: {}
- name: council_meeting_transcript
  endpoint:
    path: /meetings/council/lopez
    method: GET
    data_selector: transcript
    params: {}
- name: query_node
  endpoint:
    path: /scale/queryNode
    method: POST
    data_selector: pods
    params:
      action: scale_out
      replicas: 3
- name: query_node
  endpoint:
    path: /scale/queryNode
    method: POST
    data_selector: pods
    params:
      action: scale_in
      replicas: 1
- name: import_jobs
  endpoint:
    path: /v2/vectordb/jobs/import/create
    method: POST
    data_selector: data
    params: {}
- name: import_progress
  endpoint:
    path: /v2/vectordb/jobs/import/describe
    method: POST
    data_selector: data
    params: {}
- name: list_import_jobs
  endpoint:
    path: /v2/vectordb/jobs/import/list
    method: POST
    data_selector: data.records
    params: {}
- name: index_params
  endpoint:
    path: /add_index/
    method: POST
    data_selector: index_params
    params:
      field_name: your_vector_field_name
      index_type: IVF_RABITQ
      index_name: vector_index
      metric_type: L2
      params:
        nlist: 1024
        refine: true
        refine_type: SQ8
- name: search_params
  endpoint:
    path: /search/
    method: POST
    data_selector: search_params
    params:
      nprobe: 128
      rbq_query_bits: 0
      refine_k: 1
- name: image_embeddings
  endpoint:
    path: /create_collection
    method: POST
    data_selector: ''
    params:
      collection_name: image_embeddings
      vector_field_name: vector
      dimension: 512
      auto_id: true
      enable_dynamic_field: true
      metric_type: COSINE
- name: birdwatcher
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: text_embedding_function
  endpoint:
    path: /
    method: POST
    data_selector: embedding
    params:
      provider: siliconflow
      model_name: BAAI/bge-large-en-v1.5
- name: movie_embeddings
  endpoint:
    path: /create_collection
    method: POST
    data_selector: collection_name
    params: {}
- name: demo_collection
  endpoint:
    path: /milvus_openai_demo.db
    method: INSERT
    data_selector: insert_count
- name: my_collection
  endpoint:
    path: /v2/vectordb/entities/search
    method: POST
    data_selector: entities
    params: {}
- name: my_collection
  endpoint:
    path: /v2/vectordb/entities/search
    method: POST
    data_selector: data
    params:
      filter: color like "red%" and likes > 50
      limit: 5
      outputFields:
      - color
      - likes
- name: my_collection
  endpoint:
    path: /v2/vectordb/entities/search
    method: POST
    data_selector: results
- name: collection
  endpoint:
    path: /create_collection
    method: POST
    data_selector: response
    params:
      collection_name: attu_tutorial
      dimension: 768
      metric_type: IP
      consistency_level: Bounded
- name: product_catalog
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
- name: insert_product_catalog
  endpoint:
    path: /v2/vectordb/collections/product_catalog/insert
    method: POST
- name: product_catalog
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
- name: insert_product
  endpoint:
    path: /v2/vectordb/collections/product_catalog/insert
    method: POST
- name: product_catalog
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: data
    params: {}
- name: insert_entities
  endpoint:
    path: /v2/vectordb/collections/product_catalog/insert
    method: POST
    data_selector: data
    params: {}
- name: create_index
  endpoint:
    path: /v2/vectordb/collections/product_catalog/index
    method: POST
    data_selector: data
    params: {}
- name: text_embedding
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
    params: {}
- name: milvus
  endpoint:
    path: /settings-ollama.yaml
    method: GET
    data_selector: vectorstore
    params: {}
- name: entity_collection
  endpoint:
    path: /milvus/collections/entity_collection
    method: POST
- name: relation_collection
  endpoint:
    path: /milvus/collections/relation_collection
    method: POST
- name: passage_collection
  endpoint:
    path: /milvus/collections/passage_collection
    method: POST
- name: entity_collection
  endpoint:
    path: /collections/entity_collection
    method: POST
- name: relation_collection
  endpoint:
    path: /collections/relation_collection
    method: POST
- name: passage_collection
  endpoint:
    path: /collections/passage_collection
    method: POST
- name: entity_collection
  endpoint:
    path: /collections/entity_collection
    method: POST
- name: relation_collection
  endpoint:
    path: /collections/relation_collection
    method: POST
- name: passage_collection
  endpoint:
    path: /collections/passage_collection
    method: POST
- name: single_vector_search
  endpoint:
    path: /search
    method: POST
    data_selector: results
    params:
      limit: 3
- name: multiple_vector_search
  endpoint:
    path: /search
    method: POST
    data_selector: results
    params:
      limit: 3
- name: search
  endpoint:
    path: /v2/vectordb/entities/search
    method: POST
    data_selector: data
    params:
      limit: 3
      offset: 10
- name: milvus_cluster
  endpoint:
    path: /milvuscluster_resource.yaml
    method: POST
    data_selector: ''
    params: {}
- name: milvus_cluster_replica
  endpoint:
    path: /milvuscluster.yaml
    method: POST
    data_selector: ''
    params: {}
- name: hybrid_demo
  endpoint:
    path: /hybrid_demo
    method: POST
- name: collection
  endpoint:
    path: /hybrid_demo
    method: CREATE
    data_selector: ''
    params: {}
- name: schema
  endpoint:
    path: /create_schema
    method: POST
    data_selector: schema
    params: {}
- name: add_field
  endpoint:
    path: /add_field
    method: POST
    data_selector: field
    params: {}
- name: my_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: collectionName
    params:
      partitionsNum: 128
- name: dspy_example
  endpoint:
    path: /create_collection
    method: POST
    data_selector: response
    params:
      overwrite: true
      dimension: 1536
      primary_field_name: id
      vector_field_name: embedding
      id_type: int
      metric_type: IP
      max_length: 65535
      enable_dynamic: true
- name: search
  endpoint:
    path: /client/search
    method: POST
- name: text_embedding
  endpoint:
    path: /function/textEmbedding
    method: POST
    data_selector: results
- name: embedding_function
  endpoint:
    path: /functions
    method: POST
    data_selector: results
    params: {}
- name: demo
  endpoint:
    path: /create_collection
    method: POST
    data_selector: collection_name
    params: {}
- name: scalar_field_indexing
  endpoint:
    path: /scalar_field_indexing
    method: GET
    data_selector: results
- name: index_params
  endpoint:
    path: /add_index
    method: POST
    data_selector: params
    params:
      index_type: HNSW_SQ
      metric_type: L2
      params:
        M: 64
        efConstruction: 100
        sq_type: SQ6
        refine: true
        refine_type: SQ8
- name: search_params
  endpoint:
    path: /search
    method: POST
    data_selector: params
    params:
      ef: 10
      refine_k: 1
- name: index_params
  endpoint:
    path: /add_index
    method: POST
    data_selector: index_params
    params: {}
- name: search_params
  endpoint:
    path: /search
    method: POST
    data_selector: search_params
    params: {}
- name: vectorstore
  endpoint:
    path: /from_documents
    method: POST
    data_selector: documents
    params: {}
- name: documents
  endpoint:
    path: /documents
    method: POST
    data_selector: documents
    params: {}
- name: textEmbedding
  endpoint:
    path: https://api.cohere.com/v2/embed
    method: POST
    data_selector: embeddings
- name: list_partitions
  endpoint:
    path: /v2/vectordb/partitions
    method: POST
    data_selector: data
    params:
      collection_name: my_collection
- name: load_partitions
  endpoint:
    path: /v2/vectordb/partitions/load
    method: POST
    data_selector: data
    params:
      collection_name: my_collection
      partition_names:
      - partitionA
- name: drop_partition
  endpoint:
    path: /v2/vectordb/partitions/drop
    method: POST
    data_selector: data
    params:
      collection_name: my_collection
      partition_name: partitionA
- name: release_partitions
  endpoint:
    path: /v2/vectordb/partitions/release
    method: POST
    data_selector: data
    params:
      collection_name: my_collection
      partition_names:
      - partitionA
- name: my_collection
  endpoint:
    path: /v2/vectordb/entities/search
    method: POST
    data_selector: data
    params: {}
- name: milvus-standalone
  endpoint:
    path: /milvus-standalone
    method: GET
    data_selector: status
    params: {}
- name: milvus-minio
  endpoint:
    path: /milvus-minio
    method: GET
    data_selector: status
    params: {}
- name: milvus-etcd
  endpoint:
    path: /milvus-etcd
    method: GET
    data_selector: status
    params: {}
- name: hybrid_search
  endpoint:
    path: /hybrid_search
    method: POST
    data_selector: results
- name: full_text_search
  endpoint:
    path: /client/search
    method: POST
    data_selector: results
    params: {}
- name: term_query
  endpoint:
    path: /client/query
    method: POST
    data_selector: results
    params: {}
- name: knn_query
  endpoint:
    path: /client/search
    method: POST
    data_selector: results
    params: {}
- name: rrf_ranker
  endpoint:
    path: /Function
    method: POST
    data_selector: function
    params:
      input_field_names: []
      function_type: RERANK
      params:
        reranker: rrf
        k: 100
- name: Vector Store
  endpoint:
    path: /VectorStore
    method: POST
- name: similarity_index
  endpoint:
    path: /compute_similarity
    method: POST
    data_selector: milvus_index
    params:
      backend: milvus
      brain_key: milvus_index
- name: vision_search
  endpoint:
    path: /sort_by_similarity
    method: POST
    data_selector: view
    params:
      brain_key: milvus_index
      k: 10
- name: create_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: null
    params: {}
- name: insert_entities
  endpoint:
    path: /v2/vectordb/entities/insert
    method: POST
    data_selector: null
    params: {}
- name: my_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: data
    params:
      enable_dynamic_field: true
      autoID: false
      fields:
      - fieldName: my_id
        dataType: Int64
        isPrimary: true
        autoID: false
      - fieldName: my_vector
        dataType: FloatVector
        elementTypeParams:
          dim: 5
- name: get_entities
  endpoint:
    path: /v2/vectordb/entities/get
    method: POST
    data_selector: data
    params: {}
- name: query_entities
  endpoint:
    path: /v2/vectordb/entities/query
    method: POST
    data_selector: data
    params: {}
- name: my_collection
  endpoint:
    path: /query
    method: POST
    data_selector: queryResults
    params: {}
- name: create_collection
  endpoint:
    path: /create_collection
    method: POST
- name: create_index
  endpoint:
    path: /create_index
    method: POST
- name: insert
  endpoint:
    path: /insert
    method: POST
- name: query
  endpoint:
    path: /query
    method: POST
- name: search
  endpoint:
    path: /search
    method: POST
- name: hybrid_search
  endpoint:
    path: /hybrid_search
    method: POST
- name: test_filter_collection
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: MilvusClient
  endpoint:
    path: ./milvus.db
    method: GET
    data_selector: records
    params: {}
- name: MilvusVectorAdapter
  endpoint:
    path: ./milvus.db
    method: POST
    data_selector: records
    params:
      collection_name: embed_anything_milvus_collection
- name: vector_store
  endpoint:
    path: ./milvus_example.db
    method: POST
    data_selector: vector_store_saved
    params: {}
- name: document_store
  endpoint:
    path: /
    method: GET
    data_selector: documents
    params: {}
- name: grouping_search
  endpoint:
    path: /v2/vectordb/entities/search
    method: POST
    data_selector: results
    params: {}
- name: my_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: data
    params: {}
- name: my_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: data
    params: {}
- name: insert_entities
  endpoint:
    path: /v2/vectordb/entities/insert
    method: POST
    data_selector: data
    params: {}
- name: search_entities
  endpoint:
    path: /v2/vectordb/entities/search
    method: POST
    data_selector: data
    params: {}
- name: query_entities
  endpoint:
    path: /v2/vectordb/entities/query
    method: POST
    data_selector: data
    params: {}
- name: index_building_params
  endpoint:
    path: /add_index
    method: POST
    data_selector: index_params
    params:
      field_name: your_vector_field_name
      index_type: IVF_SQ8
      index_name: vector_index
      metric_type: L2
      params:
        nlist: 64
- name: search_on_index
  endpoint:
    path: /search
    method: POST
    data_selector: search_results
    params:
      collection_name: your_collection_name
      anns_field: vector_field
      data:
      - - 0.1
        - 0.2
        - 0.3
        - 0.4
        - 0.5
      limit: 10
      search_params:
        params:
          nprobe: 8
- name: document_indexing
  endpoint:
    path: /api/document/indexing
    method: POST
- name: document_retrieval
  endpoint:
    path: /api/document/retrieval
    method: POST
- name: document_indexing
  endpoint:
    path: /api/document/index
    method: POST
- name: document_retrieval
  endpoint:
    path: /api/document/retrieve
    method: POST
- name: document_indexing
  endpoint:
    path: /index
    method: POST
    data_selector: documents
    params: {}
- name: document_retrieval
  endpoint:
    path: /retrieve
    method: POST
    data_selector: documents
    params: {}
- name: my_milvus_collection
  endpoint:
    path: /
    method: POST
    data_selector: ''
    params: {}
- name: my_milvus_collection
  endpoint:
    path: /my_milvus_collection
    method: POST
    data_selector: collection
    params:
      create_if_not_exist: 'true'
- name: milvus_vector_store
  endpoint:
    path: /milvus
    method: POST
    data_selector: collection
    params: {}
- name: openai_embedding
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
    params: {}
- name: document_indexing
  endpoint:
    path: /api/document/indexing
    method: POST
    data_selector: indexing_results
- name: document_retrieval
  endpoint:
    path: /api/document/retrieval
    method: POST
    data_selector: retrieval_results
- name: document_indexing
  endpoint:
    path: /api/indexing
    method: POST
    data_selector: documents
    params: {}
- name: document_retrieval
  endpoint:
    path: /api/retrieve
    method: POST
    data_selector: documents
    params: {}
- name: MilvusDocumentWriter
  endpoint:
    path: /milvus
    method: POST
    data_selector: collection
    params: {}
- name: MilvusDocumentRetriever
  endpoint:
    path: /milvus/retrieve
    method: POST
    data_selector: results
    params: {}
- name: my_milvus_collection
  endpoint:
    path: /
    method: POST
    data_selector: documents
    params: {}
- name: Milvus
  endpoint:
    path: /api/v1/milvus
    method: POST
- name: OpenAI
  endpoint:
    path: /api/v1/openai
    method: POST
- name: text_embedding
  endpoint:
    path: /path/to/vertexai/embedding
    method: POST
    data_selector: embedding_results
- name: demo_collection
  endpoint:
    path: /demo_collection
    method: POST
    data_selector: data
    params:
      collection_name: demo_collection
- name: etcd_configuration
  endpoint:
    path: /configs/etcd
    method: GET
    data_selector: etcd
    params: {}
- name: HNSW_index
  endpoint:
    params:
      index_type: HNSW
      metric_type: L2
      params:
        M: 64
        efConstruction: 100
- name: HNSW_search
  endpoint:
    params:
      ef: 10
- name: embedding_function
  endpoint:
    path: /function
    method: POST
    data_selector: embedding
    params: {}
- name: jina_embeddings
  endpoint:
    path: /jina/embeddings
    method: POST
    data_selector: results
- name: milvus_client
  endpoint:
    path: /milvus/client
    method: GET
    data_selector: client_info
- name: collection
  endpoint:
    path: /collections
    method: GET
    data_selector: collections
    params: {}
- name: colpali
  endpoint:
    path: /colpali
    method: POST
    data_selector: records
    params: {}
- name: create_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
- name: insert
  endpoint:
    path: /v2/vectordb/entities/insert
    method: POST
- name: search
  endpoint:
    path: /v2/vectordb/entities/search
    method: POST
- name: textEmbedding
  endpoint:
    path: /textEmbedding
    method: POST
    data_selector: results
    params:
      incremental: document
- name: index_params
  endpoint:
    path: /add_index
    method: POST
    data_selector: index_params
    params:
      index_type: IVF_PQ
      metric_type: L2
      params:
        m: 4
- name: search_params
  endpoint:
    path: /search
    method: POST
    data_selector: search_params
    params:
      nprobe: 10
- name: demo
  endpoint:
    path: /collections/demo
    method: POST
    data_selector: insert_count
    params: {}
- name: alter_collection_field
  endpoint:
    path: /v2/collections/fields/alter_properties
    method: POST
    data_selector: properties
- name: log_file_size
  endpoint:
    path: /max_log_file_size
    method: GET
    data_selector: max_size
    params: {}
- name: log_retention_time
  endpoint:
    path: /log_retention_time
    method: GET
    data_selector: retention_time
    params: {}
- name: backup_log_files
  endpoint:
    path: /backup_log_files
    method: GET
    data_selector: backup_count
    params: {}
- name: stdout_enable
  endpoint:
    path: /stdout_enable
    method: GET
    data_selector: stdout_status
    params: {}
- name: city_data
  endpoint:
    path: /repos/ytang07/bento_octo_milvus_RAG/contents/data
    method: GET
    data_selector: data
    params: {}
- name: image_search
  endpoint:
    path: /collections/image_search
    method: POST
    data_selector: ''
    params: {}
- name: create_database
  endpoint:
    path: /v2/vectordb/databases/create
    method: POST
    data_selector: ''
    params: {}
- name: list_databases
  endpoint:
    path: /v2/vectordb/databases
    method: GET
    data_selector: ''
    params: {}
- name: describe_database
  endpoint:
    path: /v2/vectordb/databases/describe
    method: POST
    data_selector: ''
    params: {}
- name: drop_database
  endpoint:
    path: /v2/vectordb/databases/drop
    method: POST
    data_selector: ''
    params: {}
- name: hybrid_exponential_results
  endpoint:
    path: /hybrid_search
    method: POST
    data_selector: results
    params:
      limit: 7
      output_fields:
      - headline
      - content
      - publish_date
- name: scale_results
  endpoint:
    path: /search
    method: POST
    data_selector: results
    params:
      limit: 7
      output_fields:
      - headline
      - content
      - publish_date
      ranker: scaled_ranker
      consistency_level: Bounded
- name: test_results
  endpoint:
    path: /search
    method: POST
    data_selector: results
    params:
      limit: 4
      output_fields:
      - headline
      - content
      - publish_date
      ranker: gaussian_ranker
      consistency_level: Bounded
- name: news_articles_tutorial
  endpoint:
    path: /collections/news_articles_tutorial
    method: POST
    data_selector: data
- name: news_data
  endpoint:
    path: /{your_endpoint_path}
    method: POST
    data_selector: data
    params: {}
- name: product_catalog
  endpoint:
    path: /add_collection_field
    method: POST
    data_selector: result
    params: {}
- name: product_catalog
  endpoint:
    path: /add_collection_field
    method: POST
    data_selector: result
    params: {}
- name: textEmbedding
  endpoint:
    path: /v1/embeddings
    method: POST
- name: documents
  endpoint:
    path: /load_data
    method: POST
    data_selector: documents
    params: {}
- name: movie_embeddings
  endpoint:
    path: /
    method: CREATE
    data_selector: data
    params: {}
- name: my_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: data
    params: {}
- name: my_collection
  endpoint:
    path: /v2/vectordb/entities/search
    method: POST
    data_selector: data
- name: customized_setup_1
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: null
    params: {}
- name: customized_setup_2
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: null
    params: {}
- name: customized_setup_1
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: collectionName
    params: {}
- name: customized_setup_2
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: collectionName
    params: {}
- name: customized_setup_3
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: collectionName
    params:
      shards_num: 1
- name: customized_setup_4
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: collectionName
    params:
      mmap.enabled: true
- name: customized_setup_5
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: collectionName
    params:
      collection.ttl.seconds: 86400
- name: customized_setup_6
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: collectionName
    params:
      consistencyLevel: Bounded
- name: customized_setup_1
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: collectionName
    params: {}
- name: customized_setup_2
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: collectionName
    params: {}
- name: customized_setup_3
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: collectionName
    params: {}
- name: customized_setup_4
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: collectionName
    params: {}
- name: customized_setup_5
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: collectionName
    params: {}
- name: customized_setup_1
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: response
    params: {}
- name: customized_setup_2
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: response
    params: {}
- name: customized_setup_3
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: response
    params:
      shardsNum: 1
- name: vector_db
  endpoint:
    path: /vector_dbs/register
    method: POST
    data_selector: vector_db_id
    params: {}
- name: rag_tool
  endpoint:
    path: /tool_runtime/rag_tool/insert
    method: POST
    data_selector: response
    params: {}
- name: full_text_demo
  endpoint:
    path: /collection/full_text_demo
    method: CREATE
    data_selector: collection
    params: {}
- name: full_text_demo
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: milvus_cluster
  endpoint:
    path: /config/samples/milvus_cluster_default.yaml
    method: POST
- name: milvus_operator
  endpoint:
    path: /deploy/manifests/deployment.yaml
    method: DELETE
- name: index_params
  endpoint:
    path: add_index
    method: POST
    data_selector: params
    params:
      field_name: your_vector_field_name
      index_type: FLAT
      index_name: vector_index
      metric_type: L2
      params: {}
- name: search
  endpoint:
    path: search
    method: POST
    data_selector: res
    params:
      collection_name: your_collection_name
      anns_field: vector_field
      data:
      - - 0.1
        - 0.2
        - 0.3
        - 0.4
        - 0.5
      limit: 3
      search_params:
        params: {}
- name: my_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: results
    params: {}
- name: my_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: results
    params: {}
- name: Milvus
  endpoint:
    path: /insert
    method: POST
- name: insert_data
  endpoint:
    path: /insert
    method: POST
    data_selector: insert_count
    params: {}
- name: search_questions
  endpoint:
    path: /search
    method: POST
    data_selector: results
    params:
      limit: 3
      output_fields:
      - answer
      - question
- name: search
  endpoint:
    path: /entities/search
    method: POST
    data_selector: data
    params: {}
- name: my_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: data
    params: {}
- name: collection
  endpoint:
    path: /collections
    method: GET
    data_selector: collections
    params: {}
- name: entity
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: task_queue
  endpoint:
    path: /task_queue
    method: GET
    data_selector: tasks
    params: {}
- name: multimodal_rag_demo
  endpoint:
    path: /milvus_demo.db
    method: POST
    data_selector: insert_count
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: milvus-standalone
  endpoint:
    path: /milvus-standalone
    method: GET
    data_selector: containers
    params: {}
- name: milvus-minio
  endpoint:
    path: /milvus-minio
    method: GET
    data_selector: containers
    params: {}
- name: milvus-etcd
  endpoint:
    path: /milvus-etcd
    method: GET
    data_selector: containers
    params: {}
- name: milvus_standalone
  endpoint:
    path: /milvus/configs/milvus.yaml
    method: GET
    data_selector: configs
    params: {}
- name: contextual_retriever
  endpoint:
    path: /contextual_retriever
    method: POST
    data_selector: results
    params: {}
- name: milvus
  endpoint:
    path: /milvus
    method: GET
- name: MilvusCollectionHybridSearchRetriever
  endpoint:
    path: /services/hybrid_search
    method: POST
    data_selector: results
- name: IVF index memory usage
  endpoint:
    path: /index/ivf/memory
    method: GET
    data_selector: memory_usage
    params: {}
- name: Graph-based index memory usage
  endpoint:
    path: /index/graph/memory
    method: GET
    data_selector: memory_usage
    params: {}
- name: knowledge_base
  endpoint:
    path: /path/to/knowledge_base
    method: POST
    data_selector: data
    params: {}
- name: my_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: data
    params: {}
- name: movie_search
  endpoint:
    path: /milvus/collection
    method: POST
    data_selector: data
    params: {}
- name: Milvus Vector Store
  endpoint:
    path: /init_vector_store
    method: POST
    data_selector: collection_name
    params: {}
- name: bucket
  endpoint:
    path: a-bucket
    method: GET
    data_selector: ''
    params: {}
- name: root_prefix
  endpoint:
    path: files
    method: GET
    data_selector: ''
    params: {}
- name: collection_schema
  endpoint:
    path: /create_schema
    method: POST
    data_selector: schema
    params: {}
- name: add_primary_field
  endpoint:
    path: /add_primary_field
    method: POST
    data_selector: field
    params: {}
- name: add_vector_field
  endpoint:
    path: /add_vector_field
    method: POST
    data_selector: field
    params: {}
- name: add_scalar_field
  endpoint:
    path: /add_scalar_field
    method: POST
    data_selector: field
    params: {}
- name: memory_update_history
  endpoint:
    path: /memory/history
    method: GET
    data_selector: records
    params:
      memory_id: memory_id
- name: memory
  endpoint:
    path: /add
    method: POST
    data_selector: results
    params: {}
- name: get_all_memory
  endpoint:
    path: /get_all
    method: GET
    data_selector: results
    params: {}
- name: search_memory
  endpoint:
    path: /search
    method: POST
    data_selector: results
    params: {}
- name: delete_memory
  endpoint:
    path: /delete
    method: DELETE
    data_selector: results
    params: {}
- name: milvus-cluster
  endpoint:
    path: /projects/milvus-testing-nonprod/global/networks/milvus-network
    method: POST
    data_selector: cluster
    params:
      num-nodes: '3'
      zone: us-west1-a
      machine-type: c2-standard-4
      disk-size: '100'
- name: question_answering_db
  endpoint:
    path: /collections
    method: POST
    data_selector: collection
    params: {}
- name: createCollection
  endpoint:
    path: /api/collections
    method: POST
- name: dropCollection
  endpoint:
    path: /api/collections/{collection_name}
    method: DELETE
- name: hasCollection
  endpoint:
    path: /api/collections/{collection_name}/exists
    method: GET
- name: createPartition
  endpoint:
    path: /api/collections/{collection_name}/partitions
    method: POST
- name: insert
  endpoint:
    path: /api/vectors
    method: POST
- name: delete
  endpoint:
    path: /api/vectors
    method: DELETE
- name: upsert
  endpoint:
    path: /api/vectors
    method: PUT
- name: search
  endpoint:
    path: /api/vectors/search
    method: POST
- name: query
  endpoint:
    path: /api/vectors/query
    method: POST
- name: my_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: data
    params: {}
- name: my_collection
  endpoint:
    path: /entities/search
    method: POST
    data_selector: data
    params: {}
- name: minio
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      enabled: 'false'
- name: externalS3
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      enabled: 'true'
      host: <your_s3_endpoint>
      port: <your_s3_port>
      accessKey: <your_s3_access_key_id>
      secretKey: <your_s3_secret_key>
      bucketName: <your_bucket_name>
      useSSL: <true/false>
- name: create_collection
  endpoint:
    path: /v2/vectordb/collections/create
    method: POST
    data_selector: ''
    params:
      consistencyLevel: Bounded
- name: search
  endpoint:
    path: /v2/vectordb/entities/search
    method: POST
    data_selector: ''
    params:
      consistencyLevel: Bounded
- name: query
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params:
      consistencyLevel: Eventually
- name: pulsar
  endpoint:
    path: /pulsar
    method: POST
    data_selector: message
    params:
      address: localhost
      port: 6650
      maxMessageSize: 5242880
- name: kafka
  endpoint:
    path: /kafka
    method: POST
    data_selector: message
    params:
      brokerList: <your_kafka_address>:<your_kafka_port>
      saslUsername: ''
      saslPassword: ''
      saslMechanisms: PLAIN
      securityProtocol: SASL_SSL
- name: rocksmq
  endpoint:
    path: /rocksmq
    method: POST
    data_selector: message
    params:
      path: /var/lib/milvus/rdb_data
      lrucacheratio: 0.06
      rocksmqPageSize: 67108864
      retentionTimeInMinutes: 4320
      retentionSizeInMB: 8192
      compactionInterval: 86400
      compressionTypes:
      - 0
      - 0
      - 7
      - 7
      - 7
- name: natsmq
  endpoint:
    path: /natsmq
    method: POST
    data_selector: message
    params:
      port: 4222
      storeDir: /var/lib/milvus/nats
      maxFileStore: 17179869184
      maxPayload: 8388608
      maxPending: 67108864
      initializeTimeout: 4000
      debug: false
      logTime: true
      logSizeLimit: 0
      maxAge: 4320
- name: rocksmq.path
  endpoint:
    path: /var/lib/milvus/rdb_data
- name: rocksmq.lrucacheratio
  endpoint:
    path: rocksdb cache memory ratio
    default_value: 0.06
- name: rocksmq.rocksmqPageSize
  endpoint:
    path: The maximum size of messages in each page in RocksMQ.
    default_value: 67108864
- name: rocksmq.retentionTimeInMinutes
  endpoint:
    path: The maximum retention time of acked messages in RocksMQ.
    default_value: 4320
- name: rocksmq.retentionSizeInMB
  endpoint:
    path: The maximum retention size of acked messages of each topic in RocksMQ.
    default_value: 8192
- name: rocksmq.compactionInterval
  endpoint:
    path: Time interval to trigger rocksdb compaction to remove deleted data.
    default_value: 86400
- name: rocksmq.compressionTypes
  endpoint:
    path: compaction compression type, only support use 0,7.
    default_value: 0,0,7,7,7
- name: collection
  endpoint:
    path: /collections
    method: GET
    data_selector: collections
- name: insert
  endpoint:
    path: /collections/{collection_name}/entities
    method: POST
    data_selector: insert_count
- name: search
  endpoint:
    path: /collections/{collection_name}/search
    method: POST
    data_selector: results
- name: insert_documents
  endpoint:
    path: /insert
    method: POST
- name: get_documents
  endpoint:
    path: /get
    method: GET
- name: retrieve_documents_chain
  endpoint:
    path: /retrieve/chain
    method: GET
- name: retrieve_documents_tool
  endpoint:
    path: /retrieve/tool
    method: GET
- name: text_embedding
  endpoint:
    path: /compatible-mode/v1
    method: POST
- name: metadata
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: documents
  endpoint:
    path: ./data/
    method: GET
    data_selector: documents
    params: {}
- name: etcd
  endpoint:
    path: /
    method: GET
    data_selector: version
    params:
      version: 3.5.0
- name: MinIO
  endpoint:
    path: /
    method: GET
    data_selector: version
    params:
      version: RELEASE.2023-03-20T20-16-18Z
- name: Pulsar
  endpoint:
    path: /
    method: GET
    data_selector: version
    params:
      version: 2.8.2
- name: milvus_configuration
  endpoint:
    path: /milvus/configuration
    method: GET
    data_selector: configurations
    params: {}
- name: milvus-list-collections
  endpoint:
    path: /milvus-list-collections
    method: GET
- name: milvus-text-search
  endpoint:
    path: /milvus-text-search
    method: POST
- name: milvus-create-collection
  endpoint:
    path: /milvus-create-collection
    method: POST
- name: quick_setup
  endpoint:
    path: /v2/vectordb/entities/insert
    method: POST
    data_selector: data
    params: {}
- name: quick_setup
  endpoint:
    path: /v2/vectordb/entities/insert
    method: POST
    data_selector: data
    params: {}
notes:
- Uses OpenAIEmbedding for embedding model and Milvus for vector storage.
- The primary field in a collection does not have a default value and cannot be null.
- A standard insert operation with a primary key that already exists in the collection
  will not overwrite the old entry.
- Gaussian decay provides a more balanced, intuitive approach that feels natural to
  users.
- If your application requires a natural feeling of declining relevance without harsh
  penalties or strict cutoffs, Gaussian decay is likely your best choice.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- The time unit in this topic is milliseconds.
- Metrics are collected via Prometheus queries.
- Binary vectors must be a multiple of 8 as they are packed into bytes.
- Follow the principle of least privilege for IAM permissions.
- Helm does not support scheduling the order of service creation.
- Use configuration file milvus.yaml for persistent credential management.
- Set dim to match the exact output dimension of the embedding model.
- 'Before running this notebook, make sure you have the following dependencies installed:
  pymilvus, openai, requests, tqdm, pandas, ragas.'
- If you are using Google Colab, to enable dependencies just installed, you may need
  to restart the runtime.
- Set batch_size to 50 and topK to 20,000 for search requests.
- Using local NVMe SSDs is highly recommended to prevent delays and maintain system
  stability.
- The QueryNode pod uses NVMe disks as EmptyDir volumes by default.
- Uses Milvus Lite for convenience with local file storage.
- Enabling phrase matching for a field triggers the creation of an inverted index,
  which consumes storage resources.
- Phrase match performance depends on how text is tokenized.
- Phrase match works with the VARCHAR field type, the string data type in Milvus.
- Phrase matching accuracy depends significantly on the analyzer used to tokenize
  your text data.
- Each collection can accommodate up to 4 vector fields by default, adjustable to
  10.
- Each collection can accommodate up to 4 vector fields by default, adjustable to
  10 if necessary.
- Ensure that the collection is loaded before initiating a Hybrid Search.
- If any vector fields lack an index or are not loaded into memory, an error will
  occur.
- Uses OpenAI models. You should prepare the api key `OPENAI_API_KEY` as an environment
  variable.
- Milvus uses a timestamp oracle (TSO) service to allocate timestamps for events.
- The time synchronization system (timetick) ensures that messages in MsgStream are
  consumed in order.
- 'Default username / password are: admin / admin'
- 'Start small: Begin with smaller sampling factors (0.001-0.01) for initial exploration'
- 'Development workflow: Use sampling during development, remove for production queries'
- 'Statistical validity: Larger samples provide more accurate statistical representations'
- 'Performance testing: Monitor query performance and adjust sampling factors as needed'
- Random sampling operates at the segment level, ensuring efficient performance while
  maintaining the randomness of the sample across your collection’s data distribution.
- The random sampling operator must be combined with other filtering expressions using
  logical AND.
- Full-text search is currently supported in Milvus Standalone, Milvus Distributed,
  and Zilliz Cloud, but not yet in Milvus Lite.
- Enabling term matching for a field triggers the creation of an inverted index, which
  consumes storage resources.
- Text match works on the VARCHAR field type, which is essentially the string data
  type in Milvus.
- To enable text match, set both enable_analyzer and enable_match to True.
- Uses AIMon to calculate quality score and monitor application.
- Councilman Lopez is active in community efforts related to Native American history
  and housing development projects.
- Quality Score improved after using a RAG based QA system.
- AIMon’s re-ranking should not add additional latency overhead since it actually
  reduces the amount of context documents that need to be sent to the LLM for generating
  a response making the operation efficient in terms of network I/O and LLM token
  processing cost (money and time).
- This step will take 2 mins
- Milvus 2.1.0 only supports scaling in and out manually.
- Each import file size should not exceed 16 GB.
- The maximum number of files per import request should not exceed 1024.
- The maximum number of concurrent import requests is limited to 1024.
- To view the Phoenix app in your browser, visit http://localhost:6006/
- For more information on how to use Phoenix, check out https://docs.arize.com/phoenix
- Linear decay creates a straight-line decline that terminates at an absolute zero
  point in your search results.
- Choose linear decay when your application has a natural boundary, deadline, or threshold.
- Setting the uri as a local file, e.g. ./milvus.db, is the most convenient method.
- If the image available on DockerHub is not the latest, you can build an image of
  Birdwatcher using the Dockerfile provided with the source code.
- Set the Docker virtual machine (VM) to use a minimum of 2 virtual CPUs (vCPUs) and
  8 GB of initial memory. Otherwise, installation might fail.
- We recommend that you store source code and other data bind-mounted into Linux containers
  in the Linux file system instead of the Windows file system.
- Zero local storage management eliminates disk volume management, RAID configuration,
  and hardware failures.
- Automatic scaling allows storage to scale with cloud object storage without capacity
  planning.
- Cost efficiency with pay-as-you-go storage with automatic tiering and compression.
- High availability leverages cloud providers’ 11-nines durability with fast recovery.
- Simplified deployment with two deployment modes (MemoryBuffer/QuorumBuffer) to match
  different operational needs.
- Developer-friendly with faster environment setup and consistent architecture across
  all environments.
- On Milvus, proxy.minPasswordLength is set to 6 by default.
- Currently, you can change the following configuration items on the fly.
- Uses API key for authentication
- Search results may not always be correct.
- Iterative filtering can lead to longer processing times.
- JSON fields are schema-defined and must be declared in the schema.
- Dynamic fields are optional and can store undeclared fields.
- JSON field must be explicitly defined in the schema.
- Dynamic fields can store undeclared fields flexibly.
- Each JSON field is limited to 65,536 bytes.
- JSON fields do not support default values.
- Store the API key in milvus.yaml for persistence across restarts.
- Use environment variables for container deployments.
- You can set up a more performant Milvus server on docker or k8s e.g.http://localhost:19530
- Default is set to 'local_data/private_gpt/milvus/milvus_local.db' as a local file
- Setting the uri as a local file is the most convenient method.
- If you have large scale of data, set up a more performant Milvus server.
- Setting the uri as a local file, e.g. './milvus.db', is the most convenient method.
- If you have large scale of data, you can set up a more performant Milvus server
  on docker or kubernetes.
- The naive RAG method may miss significant passages, leading to incorrect answers.
- Filter expression templating allows for dynamic substitution of values in filter
  expressions, improving query performance.
- Using placeholders reduces parsing time and enhances scalability as datasets grow.
- A single ANN search returns a maximum of 16,384 entities.
- The parameter `limit` determines the number of entities to include in the search
  results.
- You can set the `Limit` parameter to the number of Entities you want to include
  in the current query results, and set the `Offset` to the total number of Entities
  that have already been returned.
- The sum of `limit` and `offset` in a single ANN search should be less than 16,384.
- Milvus employs a massively parallel processing (MPP) architecture.
- Object storage has high access latency and charges by the number of queries.
- The Milvus docker image used for configuration.
- Compute resources allocated to each component include limits and requests for CPU
  and memory.
- Milvus supports Dense, Sparse, and Hybrid retrieval methods.
- Setting the uri as a local file, e.g. './milvus.db', is the most convenient method,
  as it automatically utilizes Milvus Lite to store all data in this file.
- If you have large scale of data, say more than a million vectors, you can set up
  a more performant Milvus server on Docker or Kubernetes.
- To enhance data querying capabilities, functions can be incorporated into the schema.
- Define a primary key field as scalar field of integer or string type and marked
  as is_primary=True
- Optionally enable auto_id for primary key
- Milvus automatically creates 16 partitions in the collection when a scalar field
  is designated as the Partition Key.
- Any input field that the Function module embeds must always contain a value; if
  a null is supplied, the module will throw an error.
- The Function module processes only fields that are explicitly defined in the collection
  schema; it does not generate embeddings for dynamic fields.
- Decay ranking cannot be used with grouping searches.
- The field used for decay ranking must be numeric (INT8, INT16, INT32, INT64, FLOAT,
  or DOUBLE). Each decay ranker can only use one numeric field.
- Uses HNSW with PQ for efficient approximate nearest neighbor search.
- The refine parameter controls whether a refinement step is activated.
- Full-text search is currently available in Milvus Standalone, Milvus Distributed,
  and Zilliz Cloud, though not yet supported in Milvus Lite.
- To run MemGPT, you should make sure the Python version >= 3.10.
- If you have large scale of data such as more than a million docs, we recommend setting
  up a more performant Milvus server on docker or kubenetes.
- Milvus must know your Cohere API key before it can request embeddings.
- If an API key for the same provider is present in both the configuration file and
  an environment variable, Milvus always uses the value in milvus.yaml and ignores
  the environment variable.
- 'IMPORTANT: Set dim to match the exact output dimension of the embedding model.'
- Ensure that radius value is smaller than the range_filter value.
- A docker container named milvus-standalone has been started at port 19530.
- An embed etcd is installed along with Milvus in the same container and serves at
  port 2379.
- The Milvus data volume is mapped to volumes/milvus in the current folder.
- Milvus provides advanced vector search capabilities.
- Milvus supports multiple reranking strategies.
- The default value for smoothing parameter k is 60, and it can be adjusted within
  a range of (0, 16384).
- The recommended value for k is between [10, 100].
- Recommended to store Milvus credentials in environment variables.
- The recommended way to configure your Milvus credentials is to store them in the
  environment variables.
- This file will not exist until you create it.
- Dynamic field allows for flexible, evolving structures in entities.
- Dynamic field allows for flexible data structures.
- Indexes can be created on dynamic field keys using JSON path syntax.
- Create an index on your vector field (mandatory for each collection)
- Dynamic field keys are not optimized for high-frequency retrieval and may incur
  performance overhead
- You must choose a single json_cast_type when indexing a dynamic field key
- Supports querying with custom filtering conditions.
- Queries can be paginated.
- Can perform operations within specified partitions.
- While the adapter in EmbedAnything handles insertion into Milvus, it does not support
  search out of the box.
- The embedding model produces 384-dimensional embeddings, aligning with the Milvus
  collection dimension.
- The feature of Partition key is now not available in Milvus Lite, if you want to
  use it, you need to start Milvus server from docker or kubernetes.
- 'This grouping feature works only for collections that are indexed with specific
  index types: FLAT, IVF_FLAT, IVF_SQ8, HNSW, HNSW_PQ, HNSW_PRQ, HNSW_SQ, DISKANN,
  SPARSE_INVERTED_INDEX.'
- Default values for age and status are defined as 18 and 'active' respectively.
- Only scalar fields, excluding the primary field, support default values and the
  nullable attribute.
- Default values or the nullable attribute can only be configured during collection
  creation and cannot be modified afterward.
- We recommend that you choose VMs with a minimum of 16 GB of RAM.
- We recommend that you choose enabled for virtual machine scale sets.
- We recommend that you choose Kubenet for network configuration.
- Load balancer type is Standard.
- Environment variable 'OPENAI_API_KEY' must be set for OpenAI connection.
- Uses OpenAI for embeddings and Milvus for storage.
- Ideal for local prototyping or small-scale data storage.
- Set the uri to a local file path to leverage Milvus Lite.
- Use Milvus for local prototyping with FILE deployment type
- OpenAI API key should be set as an environment variable
- Requires setting up OpenAI API key as an environment variable.
- Milvus can be run using milvus-lite for local prototyping.
- Use './milvus.db' for local prototyping or small-scale data storage.
- Uses OpenAI API key for embedding generation
- Milvus supports FILE and HOST deployment types
- Uses Milvus as the vector database for RAG workflows
- Ideal for local prototyping or small-scale data storage
- Uses OpenAI API key for authentication
- Milvus supports local prototyping with FILE deployment type
- Milvus maintains a considerable number of parameters that configure the system.
- You can modify these parameters flexibly so that Milvus can better serve your application.
- Run Milvus version 2.6 or higher.
- Create a Google Cloud service account with roles like 'Vertex AI User'.
- Download the service account’s JSON key file.
- Milvus Lite is great for getting started with a local python program.
- By default, the scalar fields are not indexed. If you need to perform metadata filtered
  search in large dataset, consider using fixed schema and also turn on the index
  to improve the search performance.
- 'Please adjust in embedded Milvus: /tmp/milvus/etcdData/'
- 'Please adjust in embedded Milvus: /tmp/milvus/logs/etcd.log'
- If you encounter any issues pulling the image, contact us at community@zilliz.com
  with details about the problem, and we’ll provide you with the necessary support.
- Configuration file is recommended for API key storage.
- Must set the vector dimension to match the output of the chosen embedding model.
- Uses Jina AI embeddings for semantic search.
- Integrates with Milvus for vector database functionality.
- Using dimensionality reduction techniques can facilitate the understanding of vectors
  and troubleshooting.
- Uses OpenAI API for embeddings
- Collection name is 'my_rag_collection'
- Dimension of embeddings is 3072
- Metric type for similarity search is 'IP'
- Supports sparse vectors, dense vectors, and binary vectors.
- Exponential decay can be applied to both standard vector search and hybrid search
  operations.
- TEI is enabled by default in Milvus.
- The TEI service must be accessible at the specified endpoint.
- 'The number of sub-vectors should be set within the range: [D/8, D].'
- Uses OpenAI and Milvus as components in the RAG pipeline.
- It is recommended to use debug level under test and development environments, and
  info level in production environment.
- Requires setup of endpoint authorization on BentoCloud
- Milvus is a vector database for efficient similarity search.
- Embedding takes time; consider using Python 3.10 and later versions.
- This tutorial uses Grafana, an open-source platform for time-series analytics, to
  visualize various performance metrics of a Milvus cluster deployed on Kubernetes
  (K8s).
- You need to configure Prometheus to monitor and collect metrics before using Grafana
  to visualize the metrics.
- Default databases cannot be dropped.
- Before dropping a database, you need to drop all collections in the database first.
- Uses decay rankers to boost or penalize documents based on publication timestamps.
- MILVUS_URI uses host.docker.internal:19530 which allows Docker containers to access
  Milvus running on the host machine through Docker’s internal network.
- MILVUS_TOKEN can be left empty for local Milvus deployments.
- Milvus uses Prometheus to monitor metrics and Grafana to visualize metrics and create
  alerts.
- The ServiceMonitor is not enabled for Milvus Helm by default.
- After installing the Prometheus Operator in the Kubernetes cluster, you can enable
  it by adding the parameter metrics.serviceMonitor.enabled=true.
- You can add scalar fields (INT64, VARCHAR, FLOAT, DOUBLE, etc.). Vector fields cannot
  be added to existing collections.
- New fields must be nullable (nullable=True) to accommodate existing entities that
  don’t have values for the new field.
- Adding fields to loaded collections increases memory usage.
- There’s a maximum limit on total fields per collection.
- Use configuration file for persistent API key management.
- Set the environment variable for API key in Docker Compose.
- Full-text search is currently supported in Milvus Standalone, Milvus Distributed,
  and Zilliz Cloud, but not yet in Milvus Lite (planned for future implementation).
- Configure Milvus with Helm Charts
- Configure Milvus via configuration file
- Uses Milvus Lite for local database setup
- Indexing is mandatory for vector fields but optional for scalar fields.
- Example output includes entities with age and price.
- Milvus enables mmap on all collections by default.
- Use Together AI as the LLM service
- The default embedding model is all-MiniLM-L6-v2
- Hybrid search combines the power of sparse BM25 retrieval with dense vector search.
- Milvus is a vector database built for embedding similarity search and AI applications.
- Full-text search in Milvus allows you to search using keywords and phrases.
- Full-text search is available in Milvus Standalone, Milvus Distributed, and Zilliz
  Cloud.
- Full-text search is not supported in Milvus Lite.
- Set up your Twelve Labs API key as an environment variable for security.
- Milvus Operator creates Milvus dependencies, such as etcd, Pulsar, and MinIO
- Dependencies like etcd, Pulsar, and MinIO are not deleted when the Milvus cluster
  is deleted
- The sparse vectors generated by the BM25 function are not directly accessible or
  outputable in full text search.
- Uses local file as connection URI for Milvus.
- Standalone mode suitable for small datasets and low workload.
- Cluster mode suitable for large datasets and high-load scenarios.
- Weighted Ranker is specifically designed for hybrid search scenarios where you need
  to combine results from multiple vector search paths.
- Guarantee_timestamp ensures visibility of data updates before a certain point in
  time.
- Service_timestamp indicates which DML operations are executed by query nodes.
- Graceful_time is a configurable period that can tolerate data invisibility.
- Dynamic fields may increase query complexity and affect performance.
- Creating indexes on specific fields improves search efficiency.
- Loading a collection is a prerequisite to conducting similarity searches and queries.
- The interval that query node publishes the node statistics information is set to
  1000 ms.
- The number of threads in knowhere's thread pool is set to 4.
- Uses Langfuse for tracing queries in RAG applications
- All elements within an array must be the same type, and nested structures within
  arrays are treated as plain strings.
- When working with ARRAY fields, it is advisable to avoid excessively deep nesting
  and ensure that your data structures are as flat as possible for optimal performance.
- Requires setup of Milvus server or local file for storage
- Requires OpenAI API Key for authentication
- Check if the containers are up and running using 'sudo docker-compose ps'.
- Access Milvus WebUI at 'http://127.0.0.1:9091/webui/'
- Map the local path to the container path in volumes section.
- Uses Anthropic's language model for contextual retrieval
- Requires API keys from Cohere, Voyage, and Anthropic
- The archived repo is still available for the charts up to 4.0.31.
- BM25BuiltInFunction does not require the client to pass corpus or training, all
  are automatically processed at the Milvus server’s end.
- BM25BuiltInFunction is a lightweight wrapper class for Function in Milvus.
- Full-text search is available in Milvus Standalone and Milvus Distributed, but not
  in Milvus Lite.
- This approach eliminates the need for users to concern about managing the corpus
  or training a vocabulary.
- MilvusCollectionHybridSearchRetriever is about to be deprecated. Use the approach
  in this document to implement hybrid search.
- When using IVF indexes, consider the memory efficiency and performance trade-offs.
- Graph-based indexes like HNSW may require significant memory due to their structure.
- This tutorial assumes that you have Grafana installed and configured.
- If you only need a local vector database for small scale data or prototyping, setting
  the uri as a local file, e.g. './milvus.db', is the most convenient method.
- If you want to use Zilliz Cloud, adjust the uri and token.
- If you have large scale of data, set up a performant Milvus server on docker or
  kubernetes.
- For Zilliz Cloud, adjust the uri and token.
- Bucket with this name will be created if it does not exist.
- The data will be stored in the local Docker if Docker is used to start the MinIO
  service locally.
- Milvus supports both dense and sparse vector since 2.4.0.
- Woodpecker is a cloud-native WAL system in Milvus 2.6 that replaces Kafka and Pulsar.
- OneAPI typically needs to restart a few times to initially connect to Mysql
- Token value must match the CHAT_API_KEY in the docker-compose.yml file
- A schema defines the data structure of a collection.
- The primary field accepts Int64 or VarChar values.
- Use local vector database for demo purpose
- If you enable the authentication feature on Milvus, use ':' as the token
- Milvus Lite is recommended for smaller datasets, up to a few million vectors.
- Milvus Standalone is suitable for medium-sized datasets, scaling up to 100 million
  vectors.
- Milvus Distributed is designed for large-scale deployments, capable of handling
  datasets from 100 million up to tens of billions of vectors.
- Ensure project exists in GCP and initialized gcloud CLI
- Use minimum memory of 16 GB for service stability
- Uses Cohere for embedding questions
- The output should include the original question and answer
- Node.js v18+ is required
- Advanced Array filtering operators like ARRAY_CONTAINS, ARRAY_CONTAINS_ALL, ARRAY_CONTAINS_ANY,
  and ARRAY_LENGTH are supported.
- Milvus supports advanced Array filtering operators like ARRAY_CONTAINS, ARRAY_CONTAINS_ALL,
  ARRAY_CONTAINS_ANY, and ARRAY_LENGTH.
- IVF_FLAT index is ideal for large-scale datasets that require fast query responses
  and high accuracy.
- JSON fields cannot deal with complex, nested structures and treats all nested structures
  as plain strings.
- It is advisable to avoid excessively deep nesting and ensure that your data structures
  are as flat as possible for optimal performance.
- Milvus uses Bounded Staleness as the default consistency level.
- 'The interval at which proxy synchronizes the time tick, unit: ms.'
- ms, the interval that to do component healthy check
- The maximum number of messages can be buffered in the timeTick message stream of
  the proxy when producing messages.
- The maximum length of the name or alias that can be created in Milvus, including
  the collection name, collection alias, partition name, and field name.
- The maximum number of field can be created when creating in a collection. It is
  strongly DISCOURAGED to set maxFieldNum >= 64.
- 'The maximum number of vector fields that can be specified in a collection. Value
  range: [1, 10].'
- The maximum number of shards can be created when creating in a collection.
- The maximum number of dimensions of a vector can have when creating in a collection.
- 'Whether to produce gin logs. please adjust in embedded Milvus: false'
- skip url path for gin log
- The maximum number of tasks in the task queue of the proxy.
- The concurrent execution number of DDL at proxy.
- The concurrent execution number of DCL at proxy.
- switch for whether proxy must use partition key for the collection
- Whether to enable the access log feature.
- Whether to upload local access log files to MinIO. This parameter can be specified
  when proxy.accessLog.filename is not empty.
- The local folder path where the access log file is stored. This parameter can be
  specified when proxy.accessLog.filename is not empty.
- The name of the access log file. If you leave this parameter empty, access logs
  will be printed to stdout.
- The maximum size allowed for a single access log file. If the log file size reaches
  this limit, a rotation process will be triggered.
- The maximum time interval allowed for rotating a single access log file. Upon reaching
  the specified time interval, a rotation process is triggered.
- The path of the object storage for uploading access log files.
- The time interval allowed for uploading access log files. If the upload time of
  a log file exceeds this interval, the file will be deleted.
- Size of log of write cache, in byte. (Close write cache if size was 0)
- time interval of auto flush write cache, in seconds. (Close auto flush if interval
  was 0)
- the interval time(in seconds) for connection manager to scan inactive client info
- inactive client info TTL duration, in seconds
- the max client info numbers that proxy should manage, avoid too many client infos
- seconds. force stop node without graceful stop
- query whose executed time exceeds the `slowQuerySpanInSeconds` can be considered
  slow, in seconds.
- the size for shardleader(querynode) client pool
- Whether to enable the http server
- Whether to enable http server debug mode
- high-level restful api
- high-level restful api, whether http client can deal with int64
- Whether to enable pprof middleware on the metrics port
- TCP/IP address of proxy. If not specified, use the first unicastable address
- TCP port of proxy
- 'The maximum size of each RPC request that the proxy can send, unit: byte'
- 'The maximum size of each RPC request that the proxy can receive, unit: byte'
- 'The maximum size of each RPC request that the clients on proxy can send, unit:
  byte'
- 'The maximum size of each RPC request that the clients on proxy can receive, unit:
  byte'
- Ensure you have the correct server uri when using Milvus in a production environment.
- You should also consider the machine type when allocating resources.
- It is recommended to set the values before deploying the cluster.
- Use configuration file 'milvus.yaml' to store API keys.
- Use environment variables when running with Docker Compose.
- 'Caution: Changing the sub-prefix after using Milvus for a period of time will affect
  your access to old data.'
- Ensure that the CPU supports at least one of the SIMD extensions listed.
- The size of RAM depends on the data volume.
- The size of hard drive depends on the data volume.
- It is recommended that you run the Kubernetes cluster on Linux platforms.
- Using the latest version of kubectl helps avoid unforeseen issues.
- minikube requires Docker as a dependency.
- DISKANN is disabled by default in Milvus to prioritize the speed of in-memory indexes.
- Recommended to store Milvus data on a fast NVMe SSD for best performance.
- This script only applies to Milvus installed on a K8s cluster.
- Roll back to the previous version with the rollback operation first if an error
  occurs during the process.
- Insert example includes a collection named 'quick_setup' and partition named 'partitionA'
errors:
- 'InvalidAccessKeyId: The AWS Access Key ID you provided does not exist in our records.'
- 'InvalidClientTokenId: The AWS Secret Access Key you provided is invalid.'
- 'InvalidSchemaError: Check schema definitions for correctness.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check the request body and parameters.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: Server-side issue, try again later.'
- '401 Unauthorized: Recheck API key or token expiration'
- 'Missing credential configuration: Milvus will throw an error if neither milvus.yaml
  credentials nor environment variables are configured.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Ensure correct authentication details.'
- '404 Not Found: Ensure the collection exists.'
- '401 Unauthorized: Check API key or token'
- '404 Not Found: Ensure the requested resource exists'
- Environment variable 'MILVUS_API_TOKEN' not found
- '401 Unauthorized: Check API key'
- 'Connection Error: Ensure Milvus is running'
- '400 Bad Request: Check request parameters'
- '404 Not Found: Resource does not exist'
- '500 Internal Server Error: Check server status'
- 'Unauthorized: Recheck username and password'
- 'Database not found: Ensure the database name is correct'
- 'Quota exceeded: Check the database quota limitations'
- '401 Unauthorized: Check the OpenAI API Key'
- '401 Unauthorized: Recheck API keys or permissions'
- '500 Internal Server Error: Server issues, try again later'
auth_info:
  mentioned_objects:
  - AIMON_API_KEY
  - OPENAI_API_KEY
  - LANGFUSE_PUBLIC_KEY
  - LANGFUSE_SECRET_KEY
  - Anthropic
  - VoyageEmbeddingFunction
  - BGEM3EmbeddingFunction
  - CohereRerankFunction
client:
  base_url: http://localhost:19530
  headers:
    Accept: application/json
    VECTOR_STORE: milvus
    MILVUS_URI: '...'
    MILVUS_TOKEN: '...'
    Default-Username: admin
    Default-Password: admin
    Content-Type: application/json
    Default Value: 1024
    Authorization: Bearer root:Milvus
    grpc.gracefulStopTimeout: 10
    LogLevel: info
  auth:
    type: basic
    location: header
    header_name: Authorization
    token: root:Milvus
    username: root
    password: Milvus
    token_url: ''
    client_id: root
    client_secret: Milvus
    access_key_id: minioadmin
    secret_access_key: minioadmin
    use_iam: false
    accessKeyID: <your_s3_access_key_id>
    secretAccessKey: <your_s3_secret_access_key>
  paginator:
    type: none
    default_page_size: 512
  port: 6650
  web_port: 80
  max_message_size: 2097152
  tenant: public
  namespace: default
  request_timeout: 60
  metrics_registration: false
  params:
    M: 30
    efConstruction: 360
    m: 384
    nbits: 8
    nrq: 1
    refine: true
    refine_type: SQ8
  cache:
    warmup: async
  connection_args:
    uri: http://localhost:19530
  localStorage:
    path: /var/lib/milvus/data/
  readTimeout: 10
source_metadata: null
