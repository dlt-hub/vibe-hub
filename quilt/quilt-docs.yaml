resources:
- name: packages
  endpoint:
    path: /api/packages
    method: GET
    data_selector: records
- name: registries
  endpoint:
    path: /api/registries
    method: GET
    data_selector: records
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: schemas
  endpoint:
    path: /schemas
    method: GET
    data_selector: schemas
- name: alpha
  endpoint:
    path: /workflows/alpha
    method: POST
    data_selector: workflows
    params: {}
- name: beta
  endpoint:
    path: /workflows/beta
    method: POST
    data_selector: workflows
    params: {}
- name: gamma
  endpoint:
    path: /workflows/gamma
    method: POST
    data_selector: workflows
    params: {}
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: schemas
  endpoint:
    path: /schemas
    method: GET
    data_selector: schemas
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: schemas
  endpoint:
    path: /schemas
    method: GET
    data_selector: schemas
- name: packages
  endpoint:
    path: /packages
    method: GET
    data_selector: records
- name: bucket
  endpoint:
    path: /bucket
    method: GET
    data_selector: objects
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: bucket
  endpoint:
    path: /api/v1/buckets
    method: GET
    data_selector: files
- name: document_previews
  endpoint:
    path: /document_previews
    method: GET
    data_selector: previews
    params: {}
- name: embed
  endpoint:
    path: /__embed
    method: GET
- name: SQS Parameters
  endpoint:
    path: /sqs
    method: POST
    data_selector: message
    params: {}
- name: SendMessage API
  endpoint:
    path: /send-message
    method: POST
    data_selector: message
    params: {}
- name: indexing
  endpoint:
    path: /indexing
    method: GET
    data_selector: records
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: records
- name: quilt_summarize
  endpoint:
    path: /quilt_summarize.json
    method: GET
    data_selector: files
    params: {}
- name: quilt_summarize
  endpoint:
    path: /quilt_summarize.json
    method: GET
    data_selector: files
    params: {}
- name: quilt_summarize
  endpoint:
    path: /quilt_summarize.json
    method: GET
    data_selector: files
    params: {}
- name: perspective
  endpoint:
    path: quilt_summarize.json
    method: GET
    data_selector: types
    params: {}
- name: igv
  endpoint:
    path: igv-options-file.json
    method: GET
    data_selector: tracks
    params: {}
- name: package_metadata
  endpoint:
    path: /YOUR-BUCKET_objects-view
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
    params: {}
- name: roles
  endpoint:
    path: /api/v1/roles
    method: GET
    data_selector: records
    params: {}
- name: buckets
  endpoint:
    path: /api/v1/buckets
    method: GET
    data_selector: records
    params: {}
- name: ui
  endpoint:
    path: /config
    method: GET
    data_selector: ui
- name: bucket_policy
  endpoint:
    path: /services/data/vXX.X/sobjects/BucketPolicy
    method: PUT
    data_selector: Statement
    params: {}
- name: S3 Bucket Ownership
  endpoint:
    path: /s3/bucket-ownership
    method: PUT
    data_selector: ownership-controls
    params:
      incremental: bucket_name
- name: Cross-Account Bucket Policy
  endpoint:
    path: /s3/bucket-policy
    method: PUT
    data_selector: bucket-policy
    params:
      incremental: bucket_name
- name: Cross-Account SNS Policy
  endpoint:
    path: /sns/topic-policy
    method: PUT
    data_selector: sns-policy
    params:
      incremental: topic_name
- name: data_bucket
  endpoint:
    path: /your-data-bucket
    method: GET
    data_selector: objects
    params: {}
- name: s3_bucket
  endpoint:
    path: /services/data/vXX.X/sobjects/S3Bucket
    method: GET
    data_selector: records
    params: {}
- name: s3_bucket
  endpoint:
    path: /services/data/vXX.X/sobjects/S3Bucket
    method: GET
    data_selector: records
    params: {}
- name: cloudtrail
  endpoint:
    path: /services/data/vXX.X/sobjects/CloudTrail
    method: GET
    data_selector: records
    params: {}
- name: CrossAccountBucketPolicy
  endpoint:
    path: /quilt-platform-administrator/admin-1
    method: GET
    data_selector: Resources
    params: {}
- name: user
  endpoint:
    path: /quilt3.admin.users
    method: GET
    data_selector: users
- name: role
  endpoint:
    path: /quilt3.admin.roles
    method: GET
    data_selector: roles
- name: sso_config
  endpoint:
    path: /quilt3.admin.sso_config
    method: GET
    data_selector: sso_config
- name: tabulator
  endpoint:
    path: /quilt3.admin.tabulator
    method: GET
    data_selector: tabulator
- name: package_revision_event
  endpoint:
    path: /events
    method: POST
    data_selector: detail
    params: {}
- name: s3_events
  endpoint:
    path: /services/data/vXX.X/sobjects/S3Events
    method: POST
    data_selector: records
    params: {}
- name: quilt-s3-events-rule
  endpoint:
    path: /quilt/s3/events
    method: POST
    data_selector: Records
    params:
      bucketName: your-bucket-name
- name: sso_permissions_mapping
  endpoint:
    path: /sso/permissions/mapping
    method: POST
    data_selector: mappings
    params: {}
- name: status_reports
  endpoint:
    path: /admin/status
    method: GET
    data_selector: reports
- name: Auth.Login
  endpoint:
    path: /auth/login
    method: POST
    data_selector: responseElements
    params: {}
- name: Auth.ServiceLogin
  endpoint:
    path: /auth/service-login
    method: POST
    data_selector: responseElements
    params: {}
- name: audit_trail
  endpoint:
    path: /audit_trail
    method: GET
    data_selector: records
    params:
      date: YYYY/mm/dd
- name: package
  endpoint:
    path: /package
    method: GET
    data_selector: records
    params: {}
- name: package
  endpoint:
    path: /packages
    method: GET
    data_selector: records
- name: package
  endpoint:
    path: /quilt-python-sdk/getting-data-from-a-package
    method: GET
    data_selector: records
    params: {}
- name: notebooks
  endpoint:
    path: /notebooks
    method: GET
    data_selector: records
- name: quilt_summarize
  endpoint:
    path: /quilt_summarize.json
    method: GET
    data_selector: records
- name: requirements
  endpoint:
    path: /requirements.txt
    method: GET
    data_selector: records
- name: package
  endpoint:
    path: /quilt/package
    method: GET
    data_selector: records
    params: {}
- name: entry
  endpoint:
    path: /quilt/entry
    method: GET
    data_selector: records
    params: {}
- name: package
  endpoint:
    path: /browse
    method: GET
    data_selector: entries
- name: reef-check
  endpoint:
    path: /quilt-hurdat/data
    method: GET
    data_selector: records
    params: {}
- name: list_packages
  endpoint:
    path: /quilt3/list-packages
    method: GET
    data_selector: packages
    params: {}
- name: Package
  endpoint:
    path: /package
    method: GET
    data_selector: packages
    params: {}
- name: Package.push
  endpoint:
    path: /Package/push
    method: POST
    data_selector: package
    params: {}
- name: Package.rollback
  endpoint:
    path: /Package/rollback
    method: POST
    data_selector: package
    params: {}
- name: Package.diff
  endpoint:
    path: /Package/diff
    method: POST
    data_selector: package
    params: {}
- name: Package.map
  endpoint:
    path: /Package/map
    method: POST
    data_selector: package
    params: {}
- name: Package.filter
  endpoint:
    path: /Package/filter
    method: POST
    data_selector: package
    params: {}
- name: Package.verify
  endpoint:
    path: /Package/verify
    method: POST
    data_selector: package
    params: {}
- name: Bucket.search
  endpoint:
    path: /Bucket/search
    method: POST
    data_selector: results
    params:
      limit: 10
- name: Bucket.put_file
  endpoint:
    path: /Bucket/put_file
    method: POST
    data_selector: none
    params: {}
- name: Bucket.put_dir
  endpoint:
    path: /Bucket/put_dir
    method: POST
    data_selector: none
    params: {}
- name: Bucket.keys
  endpoint:
    path: /Bucket/keys
    method: GET
    data_selector: keys
    params: {}
- name: Bucket.delete
  endpoint:
    path: /Bucket/delete
    method: DELETE
    data_selector: none
    params: {}
- name: Bucket.delete_dir
  endpoint:
    path: /Bucket/delete_dir
    method: DELETE
    data_selector: none
    params: {}
- name: Bucket.ls
  endpoint:
    path: /Bucket/ls
    method: GET
    data_selector: list
    params: {}
- name: Bucket.fetch
  endpoint:
    path: /Bucket/fetch
    method: GET
    data_selector: none
    params: {}
- name: Bucket.select
  endpoint:
    path: /Bucket/select
    method: POST
    data_selector: pandas.DataFrame
    params: {}
- name: example_resource
  endpoint:
    path: /example/endpoint
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: objects
- name: bucket
  endpoint:
    path: /
    method: GET
    data_selector: keys
    params: {}
- name: bucket
  endpoint:
    path: /buckets
    method: GET
    data_selector: objects
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: hits
    params: {}
- name: manifest
  endpoint:
    path: /manifests
    method: GET
    data_selector: entries
    params: {}
- name: Bucket
  endpoint:
    path: /bucket
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: S3 Event Monitoring
  endpoint:
    path: /event-driven-packaging
    method: POST
    data_selector: events
    params: {}
notes:
- All customer data and metadata in Quilt is stored in S3.
- We recommend using S3 encryption and Elasticsearch Service encryption at rest to
  provide maximum protection.
- Metadata are represented as dictionaries that can refer to specific objects or entire
  packages.
- Quilt recommends that users limit each instance of package-level and object-level
  metadata to 1MB or less.
- Only Draft 7 Json Schemas are supported
- Schemas must be in an S3 bucket for which the Quilt user has read permissions
- This feature requires the quilt3 API version 3.3 or higher.
- You must specify a workflow when pushing a package.
- If desired, this tab can be hidden.
- Automated previews of 8-bit depth and higher image files are not currently supported.
- Enabling Permissive HTML allows forms and popups to work from iframes.
- The package creation process is asynchronous, so you may need to wait a few minutes
  before the package is available.
- If you send the same message multiple times before the folder is updated, it will
  not actually create a new revision.
- Quilt uses Elasticsearch 6.8 query string syntax.
- Objects linked via quilt_summarize.json are always the latest version, even when
  browsing an older package version.
- Object titles and image thumbnails link to the file view, even in the package view.
- Several customers have reported that Perspective Datagrids fail to automatically
  render in the Quilt web catalog.
- Metadata lives in a per-package manifest file in a each bucket's .quilt/ directory.
- The table must contain the columns logical_key, physical_keys (or physical_key)
  and size.
- By default, Quilt indexes a limited number of bytes per document for specified file
  formats (100KB).
- If your Quilt stack uses private endpoints for Elasticsearch you will need to connect
  to the cluster from a machine in the same VPC as the cluster.
- By default, Quilt indexes a limited number of bytes per document for specified file
  formats (100KB). Both the max number of bytes per document and which file formats
  to deep index can be customized per Bucket in the Catalog Admin settings.
- Your data in S3 buckets remains accessible.
- You can continue using the Quilt SDK for reading and writing packages.
- Stack-managed resources (Athena tables, Postgres database, audit logs) will be affected.
- The deletion behavior varies between CloudFormation and Terraform deployments.
- The admin page is only accessible to designated administrators.
- Quilt requires at least one admin account per stack.
- You must assign one or more roles to all new users.
- There is one catalog config file per-bucket.
- If there is no config.yaml, defaults are used.
- 'Organizational Separation: Different teams/departments own different accounts'
- 'Security Isolation: Separate sensitive data from application infrastructure'
- 'Compliance Requirements: Regulatory requirements for data segregation'
- 'Cost Management: Separate billing and resource management'
- 'Blast Radius Reduction: Limit impact of security incidents'
- Data Account automatically owns all objects when object ownership is set to bucket
  owner enforced.
- Quilt admins control user access to the bucket through the Quilt Admin Panel's Roles
  and Policies.
- Quilt admins can still control user access to this bucket through the Quilt Admin
  Panel's Roles and Policies.
- Quilt infrastructure is separated from data plane for enhanced security and compliance.
- Requires setup of cross-account bucket policies for access
- CloudTrail must be configured for tracking S3 API calls
- Verify bucket policy is correctly applied
- Check object ownership is set to 'Bucket owner enforced'
- Confirm account IDs in policies are correct
- Test with AWS CLI from Control Account
- Check CloudTrail is logging S3 data events
- Verify SNS configuration if using custom topics
- Review Quilt logs for processing errors
- Manual re-index the bucket in Quilt Admin Panel
- Check Quilt IAM roles have cross-account assume permissions
- Verify bucket policy allows required actions
- Review CloudFormation stack permissions
- Requires setup of cross-account access for S3 buckets
- CloudTrail is required for logging S3 API calls
- Use S3 VPC endpoints to keep traffic within AWS network
- Restrict Lambda function network access
- Ensure both accounts are in compliant regions
- Tag buckets with appropriate data classification
- Enable S3 encryption with appropriate KMS keys
- Enable S3 access logging for detailed audit trails
- Periodically review cross-account permissions
- Maintain documentation of cross-account relationships
- Requires setup of CloudTrail in AWS for auditing
- Ensure S3 permissions are correctly configured for cross-account access
- Additional network-level controls if required
- Be sure to set the default role as indicated above.
- Requires setup of connected app in api
- Events are emitted on the default EventBridge bus when a package is created or revised.
- This page describes a feature that is not enabled by default. You can ask your Quilt
  account manager to enable it.
- Roles for users of the Quilt Catalog's Bucket tab must have full ListBucket permissions,
  whether or not they are allowed to access all folders and objects.
- Catalog users who click on a prefix or object that they are not permitted to access
  will see an Access Denied message.
- Prefix-aware search performs a head request on every object result; this may slow
  search performance in the Catalog.
- 'AWS S3 Limitation: Each S3 bucket can only have one event notification configuration.'
- Each S3 bucket can only have one event notification configuration.
- Bulk deletes may not be reflected in Quilt immediately
- Test thoroughly with your specific use cases
- S3 lifecycle deletions are not captured by CloudTrail or S3 Events
- EventBridge S3 events require CloudTrail data events
- Roles used by configuration can't be removed or renamed.
- The user who sets the configuration will never have their admin flag revoked.
- After configuration is set, any user who logs in via SSO can't be manually assigned
  roles or admin permissions.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- If you have less than 1 million objects in the bucket, you should re-index the bucket.
- If you have more than 1 million objects in the bucket, re-indexing will take much
  longer and potentially become expensive.
- GxP for Security & Compliance
- Organizing S3 Buckets
- Canaries must be enabled in the Quilt instance CloudFormation template
- Events are versioned using SemVer-like versioning scheme.
- UserIdentity variants are stored as JSON objects.
- Quilt requires working knowledge of AWS CloudFormation, AWS S3 and Elasticsearch
  Service.
- An S3 Bucket for your team data should not have any notifications attached to it.
- 'Install Quilt using pip: pip install quilt3'
- Browse available datasets using quilt3.list_packages
- Pushing requires S3 credentials, so we'll just show the package
- Packages support metadata anywhere in the package.
- The first parameter to set functions is the logical key, which will determine where
  the file lives within the package.
- Data in Quilt is organized in terms of data packages.
- Unless this registry is public, you will need to be logged into a user who has read
  access to this registry in order to install from it.
- To install a package, you need to be logged into a user who has read access to the
  registry.
- Use browse to load a package manifest without downloading data.
- Uses a demo package from Quilt
- Example package is located at s3://quilt-example
- You will need either an AWS account, credentials, and an S3 bucket, OR a Quilt enterprise
  stack with at least one bucket.
- Launches a web browser and asks the user for a token.
- By default, any files not currently in the destination bucket are copied to the
  destination S3 bucket at a path matching logical key structure.
- Push will not overwrite an existing package if its top hash does not match the parent
  hash of the package being pushed.
- You can securely and privately run the Quilt catalog in 'single-player mode' on
  your machine.
- Temporary credentials are derived from your default AWS credentials (or active AWS_PROFILE)
  using boto3.sts.get_session_token.
- Neither your AWS credentials nor data requested goes through any third-party cloud
  services aside of S3.
- By design, Quilt is backed by Amazon S3 and scales to billions of objects and petabytes
  of data.
- The underlying limitations of S3 apply.
- When using the quilt3 API or CLI with a client-to-site VPN you may need to trust
  a custom certificate in Python.
- Some objects may return nulls in deeply nested fields
- Requires that the bucket is configured to work with Quilt 3.
- To push an unmaterialized file to a remote registry, use build with a registry.
- It is up to the package author to ensure that any local files in the package remain
  available and accessible to users.
- As of July 25, 2024, Amazon S3 Select is no longer available to new customers.
- QUILT features experimental support for S3 Select queries as part of the Bucket
  interface.
- Some objects like Contact may return nulls in deeply nested fields
- One known issue with installation is that the quilt-navigator package depends on
  iltorb@1.3.10, which may lack prebuilt binaries for your platform.
- If you only have Python 3 in your install environment, it will fail.
- It is strongly recommended that you enable object versioning on the S3 buckets that
  you push Quilt packages to.
- You can disable anonymous usage collection with an environment variable.
- Quilt packages are one level of abstraction above S3 object versions.
- Users created through SSO can only log in through SSO.
- Must disable SSO and enable PasswordAuth if you wish to log in as an admin using
  a password.
- In order to install the benchling packager, you will need to know, and have administrative
  access to your Benchling tenant domain.
- EDP is in private preview. Ask your Quilt account manager for details.
- Each EDP stack monitors one S3 bucket.
- It is strongly recommended that you keep versioning either on or off during the
  entire lifetime of the bucket.
- Highly recommended to set the --on-failure policy to ROLLBACK to avoid incomplete
  rollback and problematic stack states.
- Service Catalog users require a license key.
errors:
- 'unknown keyword: <non-supported keyword>'
- Workflow required, but none specified.
- Commit message is required by workflow, but none was provided.
- 'Metadata failed validation: ''superhero'' is a required property.'
- Autotune is not supported in t2/t3 instance types. Disable autotune or change your
  instance type.
- 'Access Denied: Verify bucket policy and object ownership'
- 'Objects Not Appearing: Check CloudTrail logging and SNS configuration'
- 'Access Denied: Check bucket policy and permissions'
- 'CloudTrail Not Logging: Verify CloudTrail configuration and data events'
- 'SNS Subscription Error: Ensure correct SNS topic permissions'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Session expired: Your browser cache is out of date.'
- 'Session expired: Your Quilt user Role has been corrupted.'
- 'Conflict: Email already taken.'
- 'Unauthorized: Recheck credentials.'
- 'NotFound: Resource not found.'
- '401 Unauthorized: Ensure you are logged in to access the registry.'
- Hash verification failed when deserialization metadata is not present.
- 'QUILT_DISABLE_USAGE_METRICS: Disable anonymous usage collection with an environment
  variable.'
- SSO connector misconfigured. See SSO documentation for details.
- SSL errors are often caused by misspelled names, or incomplete Subject Alternate
  Names.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://www.quilt.bio
  auth:
    type: oauth2
    flow: refresh_token
  headers:
    Accept: application/json
source_metadata: null
