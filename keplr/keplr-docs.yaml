resources:
- name: suggest_chain
  endpoint:
    path: /experimentalSuggestChain
    method: POST
    data_selector: data
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: accounts
    params: {}
- name: enable_connection
  endpoint:
    path: /api/enable
    method: POST
- name: getKey
  endpoint:
    path: /api/guide/get-key
    method: GET
    data_selector: Key
    params: {}
- name: signAmino
  endpoint:
    path: /api/guide/sign-a-message
    method: POST
    data_selector: records
- name: signDirect
  endpoint:
    path: /api/guide/sign-arbitrary
    method: POST
    data_selector: records
- name: send_transaction
  endpoint:
    path: /sendTx
    method: POST
- name: signArbitrary
  endpoint:
    path: /sign/arbitrary
    method: POST
    data_selector: signature
- name: verifyArbitrary
  endpoint:
    path: /verify/arbitrary
    method: POST
    data_selector: isValid
- name: enable_connection
  endpoint:
    path: /enable
    method: POST
    data_selector: result
- name: sign_ethereum
  endpoint:
    path: /sign
    method: POST
    data_selector: result
- name: send_ethereum_tx
  endpoint:
    path: /send
    method: POST
    data_selector: result
- name: suggest_erc20
  endpoint:
    path: /suggest
    method: POST
    data_selector: result
- name: starknet
  endpoint:
    path: /starknet
    method: POST
    data_selector: result
    params: {}
- name: connectWallet
  endpoint:
    path: /connectWallet
    method: POST
    data_selector: address
- name: requestAccounts
  endpoint:
    path: /requestAccounts
    method: POST
    data_selector: address
- name: getAccounts
  endpoint:
    path: /getAccounts
    method: GET
    data_selector: address
- name: getPublicKey
  endpoint:
    path: /getPublicKey
    method: GET
    data_selector: publicKey
- name: getAddress
  endpoint:
    path: /getAddress
    method: GET
    data_selector: address
- name: disconnect
  endpoint:
    path: /disconnect
    method: POST
    data_selector: status
- name: getBalance
  endpoint:
    path: /getBalance
    method: GET
    data_selector: balance
- name: getInscriptions
  endpoint:
    path: /getInscriptions
    method: GET
    data_selector: inscriptions
- name: getNetwork
  endpoint:
    path: /getNetwork
    method: GET
    data_selector: network
- name: switchNetwork
  endpoint:
    path: /switchNetwork
    method: POST
    data_selector: newNetwork
- name: getChain
  endpoint:
    path: /getChain
    method: GET
    data_selector: chain
- name: switchChain
  endpoint:
    path: /switchChain
    method: POST
    data_selector: newChain
- name: signPsbt
  endpoint:
    path: /signPsbt
    method: POST
    data_selector: signedPsbt
- name: signPsbts
  endpoint:
    path: /signPsbts
    method: POST
    data_selector: signedPsbts
- name: signMessage
  endpoint:
    path: /signMessage
    method: POST
    data_selector: signature
- name: sendBitcoin
  endpoint:
    path: /sendBitcoin
    method: POST
    data_selector: txId
- name: pushTx
  endpoint:
    path: /pushTx
    method: POST
    data_selector: txId
- name: pushPsbt
  endpoint:
    path: /pushPsbt
    method: POST
    data_selector: txId
- name: accountsChanged
  endpoint:
    path: /accountsChanged
    method: GET
    data_selector: accounts
- name: networkChanged
  endpoint:
    path: /api/multi-ecosystem-support/bitcoin/networkChanged
    method: GET
    data_selector: network
    params: {}
- name: web-browser
  endpoint:
    path: https://deeplink.keplr.app/web-browser
    method: GET
    data_selector: url
    params: {}
- name: show-address
  endpoint:
    path: https://deeplink.keplr.app/show-address
    method: GET
    data_selector: chainId
    params: {}
notes:
- The handler function passed to the constructor provides an opportunity to warn users
  when they're not interacting with the real Keplr wallet.
- Keplr API may be undefined immediately after the webpage loads.
- It is recommended to enable Keplr before using OfflineSigner.
- The enable method requests Keplr to unlock if it is currently locked.
- Keplr simplifies the process by providing methods for signing messages across various
  blockchain networks.
- Use the `verifyADR36Amino` function from the `@keplr-wallet/cosmos` package or implement
  your own verification logic for more robust use cases.
- Supports native Ethereum signing for EVM-based chains.
- Users must approve suggesting ERC20 tokens.
- This feature is available in Keplr v2.0.63 or later.
- Use the built-in modal client for convenience, or implement a custom scan UI
errors:
- '401 Unauthorized: If the user rejects or cancels the access request.'
- 'Invalid chainId: Ensure the chainId is correct.'
- 'Transaction failed: Check the transaction parameters and try again.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://wallet.keplr.app
  headers:
    Accept: application/json
source_metadata: null
