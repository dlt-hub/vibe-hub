resources:
- name: participant
  endpoint:
    path: /api/participant
    method: GET
    data_selector: participants
- name: row_data
  endpoint:
    path: /row/data
    method: GET
    data_selector: records
    params: {}
- name: column_defs
  endpoint:
    path: /column/definitions
    method: GET
    data_selector: records
    params: {}
- name: charts
  endpoint:
    path: /charts/options/
    method: GET
    data_selector: charts
    params: {}
- name: products
  endpoint:
    path: /api/products
    method: GET
    data_selector: products
    params: {}
- name: employee
  endpoint:
    path: /api/hr/employees
    method: GET
    data_selector: employees
    params: {}
- name: products
  endpoint:
    path: /api/products
    method: GET
    data_selector: records
    params: {}
- name: row_data
  endpoint:
    path: https://www.ag-grid.com/example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: grid_example
  endpoint:
    path: /example/grid
    method: GET
    data_selector: records
    params: {}
- name: GridExample
  endpoint:
    path: /example/GridExample
    method: GET
    data_selector: modules
    params: {}
- name: License Key
  endpoint:
    path: /validate-license
    method: POST
    data_selector: licenseValidation
- name: space_mission_data
  endpoint:
    path: /example-assets/space-mission-data.json
    method: GET
    data_selector: data
    params: {}
- name: mission_data
  endpoint:
    path: /space-mission-data.json
    method: GET
    data_selector: data
    params: {}
- name: themes
  endpoint:
    path: /theming
    method: GET
    data_selector: themes
    params: {}
- name: theme_parameters
  endpoint:
    path: /react-data-grid/theming-parameters/
    method: GET
    data_selector: parameters
    params: {}
- name: theme_parts
  endpoint:
    path: /api/theme_parts
    method: GET
    data_selector: parts
    params: {}
- name: grid_example
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: records
    params: {}
- name: theme_parameters
  endpoint:
    path: /react-data-grid/theming-parameters/
    method: GET
    data_selector: parameters
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: icons
  endpoint:
    path: /theme-icons/quartz/
    method: GET
    data_selector: icons
    params: {}
- name: sidebar_area
  endpoint:
    path: /theme-builder/
    method: GET
    data_selector: themeParameters
    params: {}
- name: columns_tool_panel
  endpoint:
    path: /theme-builder/
    method: GET
    data_selector: themeParameters
    params: {}
- name: text_inputs
  endpoint:
    path: /styling-text-inputs
    method: GET
- name: checkboxes
  endpoint:
    path: /styling-checkboxes
    method: GET
- name: toggle_buttons
  endpoint:
    path: /styling-toggle-buttons
    method: GET
- name: theming_menus_popups
  endpoint:
    path: /react-data-grid/theming-popups/
    method: GET
    data_selector: parameters
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
- name: grid_example
  endpoint:
    path: /createTheme
    method: POST
    data_selector: theme
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: Sparklines
  endpoint:
    path: /react-data-grid/sparklines-installation/
    method: GET
    data_selector: sparklines
- name: sparklines
  endpoint:
    path: /react-data-grid/sparklines-overview/
    method: GET
    data_selector: default
    params: {}
- name: sparklines_area_customisation
  endpoint:
    path: /react-data-grid/sparklines-area-customisation
    method: GET
    data_selector: sparklineOptions
    params: {}
- name: column_sparkline
  endpoint:
    path: /react-data-grid/sparklines-column-customisation
    method: GET
    data_selector: sparklineOptions
    params: {}
- name: sparkline_data
  endpoint:
    path: /sparkline/data
    method: GET
    data_selector: data
    params: {}
- name: sparklines
  endpoint:
    path: /react-data-grid/sparklines-axis-types/
    method: GET
- name: category_axis
  endpoint:
    path: /react-data-grid/sparklines-axis-types/#category-axis
    method: GET
    data_selector: records
- name: number_axis
  endpoint:
    path: /react-data-grid/sparklines-axis-types/#number-axis
    method: GET
    data_selector: records
- name: time_axis
  endpoint:
    path: /react-data-grid/sparklines-axis-types/#time-axis
    method: GET
    data_selector: records
- name: tooltip_renderer
  endpoint:
    path: /tooltip_renderer
    method: GET
    data_selector: records
- name: sparklines_points_of_interest
  endpoint:
    path: /react-data-grid/sparklines-points-of-interest/
    method: GET
    data_selector: null
    params: {}
- name: sparklines
  endpoint:
    path: /sparklines
    method: GET
    data_selector: records
    params: {}
- name: area_sparkline_options
  endpoint:
    path: /react-data-grid/sparklines-area-customisation/
    method: GET
    data_selector: options
    params: {}
- name: line_sparkline_options
  endpoint:
    path: /react-data-grid/sparklines-api-sparkline-line
    method: GET
    data_selector: options
    params: {}
- name: chart_ranges
  endpoint:
    path: /react-data-grid/integrated-charts-range-chart
    method: GET
    data_selector: chart_ranges
    params: {}
- name: categories_and_series
  endpoint:
    path: /react-data-grid/integrated-charts-api-range-chart
    method: GET
    data_selector: categories_and_series
    params: {}
- name: data
  endpoint:
    path: /wide-spread-of-sports.json
    method: GET
    data_selector: data
    params: {}
- name: pivot_chart
  endpoint:
    path: /react-data-grid/integrated-charts-pivot-chart
    method: GET
    data_selector: pivotChartData
    params: {}
- name: range_chart
  endpoint:
    path: /react-data-grid/integrated-charts-api-range-chart/
    method: GET
    data_selector: charts
    params: {}
- name: chart_dashboard
  endpoint:
    path: /react-data-grid/integrated-charts-container/
    method: GET
    data_selector: dashboards
    params: {}
- name: createPivotChart
  endpoint:
    path: /react-data-grid/integrated-charts-api-pivot-chart/#pivot-chart-api
    method: GET
    data_selector: ''
    params: {}
- name: createCrossFilterChart
  endpoint:
    path: /createCrossFilterChart
    method: POST
    data_selector: params
- name: Most Populous Cities
  endpoint:
    path: /example/most-populous-cities
    method: GET
    data_selector: cities
- name: Custom Theme
  endpoint:
    path: /example/custom-theme
    method: GET
    data_selector: themes
- name: column_bar
  endpoint:
    path: /example/column-bar
    method: GET
    data_selector: data
    params: {}
- name: pie_donut
  endpoint:
    path: /example/pie-donut
    method: GET
    data_selector: data
    params: {}
- name: line_area
  endpoint:
    path: /example/line-area
    method: GET
    data_selector: data
    params: {}
- name: scatter_bubble
  endpoint:
    path: /example/scatter-bubble
    method: GET
    data_selector: data
    params: {}
- name: heatmap
  endpoint:
    path: /data/heatmap
    method: GET
    data_selector: rowData
- name: waterfall
  endpoint:
    path: /data/waterfall
    method: GET
    data_selector: rowData
- name: boxPlot
  endpoint:
    path: /data/boxPlot
    method: GET
    data_selector: rowData
- name: histogram
  endpoint:
    path: /data/histogram
    method: GET
    data_selector: rowData
- name: rangeBar
  endpoint:
    path: /data/rangeBar
    method: GET
    data_selector: rowData
- name: rangeArea
  endpoint:
    path: /data/rangeArea
    method: GET
    data_selector: rowData
- name: treemap
  endpoint:
    path: /data/treemap
    method: GET
    data_selector: rowData
- name: sunburst
  endpoint:
    path: /data/sunburst
    method: GET
    data_selector: rowData
- name: funnel_chart
  endpoint:
    path: /charts/funnel
    method: GET
    data_selector: data
- name: combination_chart
  endpoint:
    path: /charts/combination
    method: GET
    data_selector: data
- name: grid_example
  endpoint:
    path: /grid/example
    method: GET
    data_selector: records
    params: {}
- name: Default Chart Menu Items
  endpoint:
    path: /react-data-grid/integrated-charts-chart-tool-panels/
    method: GET
    data_selector: items
- name: Customising the Chart Menu Items
  endpoint:
    path: /react-data-grid/modules/
    method: GET
    data_selector: chartMenuItems
- name: Hiding the Chart Menu
  endpoint:
    path: /react-data-grid/integrated-charts-chart-tool-panels/
    method: GET
    data_selector: getChartToolbarItems
- name: chart_tool_panels
  endpoint:
    path: /react-data-grid/integrated-charts/
    method: GET
    data_selector: toolPanels
- name: chart
  endpoint:
    path: /example-assets/wide-spread-of-sports.json
    method: GET
    data_selector: data
    params: {}
- name: chart
  endpoint:
    path: /api/chart
    method: GET
    data_selector: data
    params: {}
- name: grid
  endpoint:
    path: /react-data-grid
    method: GET
    data_selector: rows
    params: {}
- name: chart_events
  endpoint:
    path: /chart_events
    method: GET
    data_selector: events
    params: {}
- name: time_series
  endpoint:
    path: /react-data-grid/integrated-charts-api-range-chart/#combination-charts
    method: GET
    data_selector: records
    params: {}
- name: Chart Model
  endpoint:
    path: /reference/charts/getChartModels
    method: GET
    data_selector: models
- name: getChartImageDataURL
  endpoint:
    path: /getChartImageDataURL
    method: GET
    data_selector: imageDataURL
- name: downloadChart
  endpoint:
    path: /downloadChart
    method: POST
    data_selector: downloadResponse
- name: columns
  endpoint:
    path: /react-data-grid/column-definitions/
    method: GET
    data_selector: columnDefs
    params: {}
- name: column_ids
  endpoint:
    path: /react-data-grid/column-ids
    method: GET
- name: column_objects
  endpoint:
    path: /react-data-grid/column-objects
    method: GET
- name: updating_columns
  endpoint:
    path: /react-data-grid/updating-columns
    method: GET
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: records
- name: small_olympic_winners
  endpoint:
    path: /small-olympic-winners.json
    method: GET
    data_selector: records
- name: olympic_winners
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: column_definitions
  endpoint:
    path: /getColumnDefs
    method: GET
    data_selector: columns
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
- name: column_state
  endpoint:
    path: /reference-state-getColumnState
    method: GET
    data_selector: column state
    params: {}
- name: apply_column_state
  endpoint:
    path: /reference-state-applyColumnState
    method: POST
    data_selector: column state
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: records
    params: {}
- name: athlete_details
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: grid_example
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: defaultColGroupDef
  endpoint:
    path: /services/data/vXX.X/sobjects/defaultColGroupDef
    method: GET
    data_selector: records
    params: {}
- name: columnDefs
  endpoint:
    path: /services/data/vXX.X/sobjects/columnDefs
    method: GET
    data_selector: records
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: records
    params: {}
- name: column_group
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
- name: column_sizing
  endpoint:
    path: /react-data-grid/column-sizing/
    method: GET
    data_selector: content
    params: {}
- name: autoSizeStrategy
  endpoint:
    path: /api/autosize
    method: GET
    data_selector: strategy
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: moveColumns
  endpoint:
    path: /api/moveColumns
    method: POST
    data_selector: columns
    params: {}
- name: moveColumnByIndex
  endpoint:
    path: /api/moveColumnByIndex
    method: POST
    data_selector: column
    params: {}
- name: grid_columns
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: columns
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: column_spanning
  endpoint:
    path: /react-data-grid/column-spanning/
    method: GET
    data_selector: column spanning configuration examples
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: row_data
  endpoint:
    path: /react-data-grid/row-data
    method: GET
    data_selector: rowData
    params: {}
- name: row_data
  endpoint:
    path: /data/rows
    method: GET
    data_selector: rows
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: records
- name: row_numbers
  endpoint:
    path: /row-numbers
    method: GET
    data_selector: rowNumbersOptions
- name: row_numbers
  endpoint:
    path: /row_numbers
    method: GET
    data_selector: records
- name: cell_selection
  endpoint:
    path: /cell_selection
    method: GET
    data_selector: records
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: records
- name: row_pinning
  endpoint:
    path: /react-data-grid/row-pinning
    method: GET
    data_selector: records
    params: {}
- name: pinned_rows_example
  endpoint:
    path: /example-assets/small-olympic-winners.json
    method: GET
    data_selector: data
- name: pinned_top_row_data
  endpoint:
    path: /pinnedTopRowData
    method: GET
    data_selector: pinnedTopRowData
    params: {}
- name: pinned_bottom_row_data
  endpoint:
    path: /pinnedBottomRowData
    method: GET
    data_selector: pinnedBottomRowData
    params: {}
- name: row_height
  endpoint:
    path: /getRowHeight
    method: GET
    data_selector: rowHeight
- name: text_wrapping
  endpoint:
    path: /textWrapping
    method: GET
    data_selector: wrapText
- name: auto_row_height
  endpoint:
    path: /autoRowHeight
    method: GET
    data_selector: autoHeight
- name: row_style
  endpoint:
    path: /react-data-grid/row-styles/
    method: GET
    data_selector: rowStyle
- name: row_class
  endpoint:
    path: /react-data-grid/row-class/
    method: GET
    data_selector: rowClass
- name: rowClassRules
  endpoint:
    path: /rowClassRules
    method: GET
    data_selector: rules
    params: {}
- name: olympic_winners
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: pagination
  endpoint:
    path: /pagination
    method: GET
    data_selector: records
    params: {}
- name: Row Node
  endpoint:
    path: /react-data-grid/row-object/
    method: GET
    data_selector: RowNode
    params: {}
- name: Row Node API Methods
  endpoint:
    path: /react-data-grid/accessing-data/
    method: GET
    data_selector: RowNodeAPI
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: row_dragging
  endpoint:
    path: /react-data-grid/row-dragging/
    method: GET
    data_selector: rowDrag
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: row_drag_text
  endpoint:
    path: /custom-row-drag-text
    method: GET
    data_selector: drag_text_examples
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: Row Dragging
  endpoint:
    path: /react-data-grid/row-dragging
    method: GET
    data_selector: rows
    params: {}
- name: row_drop_zone
  endpoint:
    path: /row_drop_zone
    method: POST
    data_selector: drop_zone
    params: {}
- name: dragging_between_grids
  endpoint:
    path: /dragging_between_grids
    method: POST
    data_selector: grid_dragging
    params: {}
- name: athletes
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: full_width_rows_example
  endpoint:
    path: /fullWidthRows
    method: GET
    data_selector: rows
- name: Value Getter
  endpoint:
    path: /value-getter
    method: GET
    data_selector: valueGetter
    params: {}
- name: grid_example
  endpoint:
    path: /react-data-grid/example
    method: GET
    data_selector: data
    params: {}
- name: value_formatter
  endpoint:
    path: /value-formatter
    method: GET
    data_selector: valueFormatter
    params: {}
- name: export_formatting
  endpoint:
    path: /formatting-for-export
    method: GET
    data_selector: useValueFormatterForExport
    params: {}
- name: small_company_data
  endpoint:
    path: /small-company-data.json
    method: GET
    data_selector: records
    params: {}
- name: cell_components
  endpoint:
    path: /react-data-grid/cell-components
    method: GET
    data_selector: components
    params: {}
- name: custom_components
  endpoint:
    path: /react-data-grid/custom-components
    method: GET
    data_selector: components
    params: {}
- name: olympic_winners
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: columnDefs
  endpoint:
    path: /example/columnDefs
    method: GET
    data_selector: columnDefs
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: records
    params: {}
- name: cell_styles
  endpoint:
    path: /react-data-grid/cell-styles
    method: GET
    data_selector: cellStyles
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: Flashing Cells
  endpoint:
    path: /react-data-grid/change-cell-renderers/#flashing-cells
    method: GET
    data_selector: records
- name: Animated Cell Renderers
  endpoint:
    path: /react-data-grid/component-cell-renderer/
    method: GET
    data_selector: records
- name: columns
  endpoint:
    path: /api/columns
    method: GET
    data_selector: columns
    params: {}
- name: rows
  endpoint:
    path: /api/rows
    method: GET
    data_selector: rows
    params: {}
- name: tooltips
  endpoint:
    path: /react-data-grid/tooltips
    method: GET
    data_selector: tooltips
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: column_definition_expressions
  endpoint:
    path: /react-data-grid/column-definitions/
    method: GET
    data_selector: columnDefs
    params: {}
- name: refresh_cells
  endpoint:
    path: /api/refreshCells
    method: GET
    data_selector: cells
    params: {}
- name: redraw_rows
  endpoint:
    path: /api/redrawRows
    method: GET
    data_selector: rows
    params: {}
- name: reference_data
  endpoint:
    path: /react-data-grid/reference/
    method: GET
    data_selector: rowData
    params: {}
- name: carMappings
  endpoint:
    path: /car/mappings
    method: GET
    data_selector: records
    params: {}
- name: colourMappings
  endpoint:
    path: /colour/mappings
    method: GET
    data_selector: records
    params: {}
- name: Olympic Winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic-winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: detail_grid
  endpoint:
    path: /example-assets/master-detail-data.json
    method: GET
    data_selector: records
- name: filter_types
  endpoint:
    path: /react-data-grid/filtering/
    method: GET
    data_selector: filters
    params: {}
- name: column_filters
  endpoint:
    path: /react-data-grid/filtering/
    method: GET
    data_selector: filters
    params: {}
- name: olympic_winners
  endpoint:
    path: olympic-winners.json
    method: GET
    data_selector: data
- name: athlete
  endpoint:
    filterParams:
      debounceMs: 200
      maxNumConditions: 1
- name: country
  endpoint:
    filterParams:
      trimInput: true
      debounceMs: 1000
- name: sport
  endpoint:
    filterParams:
      caseSensitive: true
- name: filter_options
  endpoint:
    path: /react-data-grid/filter-conditions/#filter-options
    method: GET
    data_selector: options
- name: default_options
  endpoint:
    path: /react-data-grid/filter-conditions/#text-filter-options
    method: GET
    data_selector: defaultOptions
- name: number_filter
  endpoint:
    path: /react-data-grid/filter-number
    method: GET
    data_selector: filter
    params: {}
- name: number_filter
  endpoint:
    path: /filter/number
    method: GET
    data_selector: params
    params: {}
- name: date_filter
  endpoint:
    path: /react-data-grid/filter-date/
    method: GET
    data_selector: dateFilter
    params: {}
- name: date_filter
  endpoint:
    path: /date-filter-parameters
    method: GET
    data_selector: filterParams
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: records
    params: {}
- name: olympic_winners
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: filter_list
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: Days (Values Provided)
  endpoint:
    filterParams:
      values:
      - Monday
      - Tuesday
      - Wednesday
      - Thursday
      - Friday
      - Saturday
      - Sunday
      suppressSorting: true
- name: Days (Values Not Provided)
  endpoint:
    filterParams:
      comparator: 'function(a, b) { const aIndex = a == null ? -1 : listOfDays.indexOf(a);
        const bIndex = b == null ? -1 : listOfDays.indexOf(b); if (aIndex === bIndex)
        return 0; return aIndex > bIndex ? 1 : -1; }'
- name: Set filter column
  endpoint:
    filterParams:
      values: function(params) { setTimeout(() => { params.success(['value 1', 'value
        2']); }, 3000); }
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: filter_value_tooltips
  endpoint:
    path: /filter/value/tooltips
    method: GET
    data_selector: tooltips
    params: {}
- name: row_updates
  endpoint:
    path: /react-data-grid/data-update-row
    method: POST
    data_selector: records
- name: transaction_updates
  endpoint:
    path: /react-data-grid/data-update-transactions
    method: POST
    data_selector: records
- name: setting_new_data
  endpoint:
    path: /react-data-grid/setting-new-data
    method: POST
    data_selector: records
- name: date
  endpoint:
    path: date
    method: GET
    data_selector: records
    params: {}
- name: gold
  endpoint:
    path: gold
    method: GET
    data_selector: records
    params: {}
- name: complex_objects
  endpoint:
    path: /react-data-grid/filter-set-filter-list/#complex-objects
    method: GET
    data_selector: records
- name: mini_filter_behaviour
  endpoint:
    path: /react-data-grid/filter-set-mini-filter/
    method: GET
    data_selector: records
- name: filter_value_tooltips
  endpoint:
    path: /react-data-grid/tooltips/
    method: GET
    data_selector: records
- name: olympic_winners
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
- name: Set Filter
  endpoint:
    path: /react-data-grid/filter-set/
    method: GET
    data_selector: records
    params: {}
- name: set_filter_model
  endpoint:
    path: /set-filter-model
    method: GET
    data_selector: model
    params: {}
- name: SetFilterHandler
  endpoint:
    path: /getFilterKeys
    method: GET
- name: SetFilterUi
  endpoint:
    path: /getMiniFilter
    method: GET
- name: athlete
  endpoint:
    path: /athlete
    method: GET
    data_selector: records
    params: {}
- name: year
  endpoint:
    path: /year
    method: GET
    data_selector: records
    params: {}
- name: country
  endpoint:
    path: /country
    method: GET
    data_selector: records
    params: {}
- name: sport
  endpoint:
    path: /sport
    method: GET
    data_selector: records
    params: {}
- name: multi_filter
  endpoint:
    path: /multi_filter
    method: GET
    data_selector: filters
    params: {}
- name: Filter Conditions
  endpoint:
    path: /react-data-grid/filter-conditions/
    method: GET
    data_selector: filter_conditions
    params:
      maxNumConditions: 2
      numAlwaysVisibleConditions: 1
- name: olympic_winners
  endpoint:
    path: olympic-winners.json
    method: GET
- name: small_olympic_winners
  endpoint:
    path: small-olympic-winners.json
    method: GET
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: filters
  endpoint:
    path: /react-data-grid/filtering
    method: GET
    data_selector: filters
    params: {}
- name: filters
  endpoint:
    path: /filters
    method: GET
    data_selector: filters
- name: get_filter_model
  endpoint:
    path: /react-data-grid/filter-getFilterModel
    method: GET
    data_selector: filterModel
- name: set_filter_model
  endpoint:
    path: /react-data-grid/filter-setFilterModel
    method: POST
    data_selector: filterModel
- name: filter_model
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: custom_filter
  endpoint:
    path: /custom-filter
    method: GET
    data_selector: filters
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: floating_filters
  endpoint:
    path: /react-data-grid/component-floating-filter/
    method: GET
    data_selector: filters
- name: olympic_winners
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: advanced_filter
  endpoint:
    path: /advanced-filter
    method: GET
    data_selector: records
    params: {}
- name: column_config
  endpoint:
    path: /column-config
    method: GET
    data_selector: records
    params: {}
- name: getAdvancedFilterModel
  endpoint:
    path: /getAdvancedFilterModel
    method: GET
    data_selector: AdvancedFilterModel
- name: setAdvancedFilterModel
  endpoint:
    path: /setAdvancedFilterModel
    method: POST
    data_selector: success
- name: example_assets
  endpoint:
    path: https://www.ag-grid.com/example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: quick_filter
  endpoint:
    path: /api/quick_filter
    method: GET
    data_selector: records
    params: {}
- name: olympic_winners
  endpoint:
    path: /small-olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: rowSelection
  endpoint:
    path: /rowSelection
    method: GET
    data_selector: records
- name: multi_row_selection
  endpoint:
    path: /example-assets/small-olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: row_selection
  endpoint:
    path: /row_selection
    method: GET
    data_selector: records
    params: {}
- name: row_selection
  endpoint:
    path: /row-selection
    method: GET
    data_selector: records
    params: {}
- name: selection_events
  endpoint:
    path: /selection-events
    method: GET
    data_selector: events
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: fill_handle
  endpoint:
    path: /react-data-grid/fill-handle
    method: GET
    data_selector: default_behaviour
    params: {}
- name: olympic_winners
  endpoint:
    path: /small-olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /small-olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: CellSelectionOptions
  endpoint:
    path: /reference/CellSelectionOptions
    method: GET
    data_selector: options
    params: {}
- name: cellSelectionChanged
  endpoint:
    path: /reference-selection-cellSelectionChanged
    method: GET
- name: fillStart
  endpoint:
    path: /reference-selection-fillStart
    method: GET
- name: fillEnd
  endpoint:
    path: /reference-selection-fillEnd
    method: GET
- name: cellEditRequest
  endpoint:
    path: /reference-editing-cellEditRequest
    method: GET
- name: cellSelectionDeleteStart
  endpoint:
    path: /reference-editing-cellSelectionDeleteStart
    method: GET
- name: cellSelectionDeleteEnd
  endpoint:
    path: /reference-editing-cellSelectionDeleteEnd
    method: GET
- name: getCellRanges
  endpoint:
    path: /reference-selection-getCellRanges
    method: GET
- name: addCellRange
  endpoint:
    path: /reference-selection-addCellRange
    method: GET
- name: clearCellSelection
  endpoint:
    path: /reference-selection-clearCellSelection
    method: GET
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: editing_api
  endpoint:
    path: /editing/api
    method: GET
    data_selector: records
- name: value_setters
  endpoint:
    path: /react-data-grid/value-setters/
    method: GET
    data_selector: records
    params: {}
- name: read_only_edit
  endpoint:
    path: /react-data-grid/value-setters/#read-only-edit
    method: GET
    data_selector: records
    params: {}
- name: olympic_winners
  endpoint:
    path: olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: grid_example
  endpoint:
    path: /react-data-grid/example
    method: GET
    data_selector: rowData
    params: {}
- name: custom_components
  endpoint:
    path: /custom/components
    method: GET
    data_selector: components
    params: {}
- name: cell_editor_params
  endpoint:
    path: /cell/editor/params
    method: GET
    data_selector: editorParams
    params: {}
- name: Popup Editor
  endpoint:
    path: /popup-editor
    method: GET
    data_selector: popupEditors
    params: {}
- name: Keyboard Navigation
  endpoint:
    path: /keyboard-navigation
    method: GET
    data_selector: keyboardNavigation
    params: {}
- name: Accessing Instances
  endpoint:
    path: /accessing-instances
    method: GET
    data_selector: editorInstances
    params: {}
- name: text_cell_editor
  endpoint:
    path: /react-data-grid/provided-cell-editors-text/
    method: GET
- name: large_text_cell_editor
  endpoint:
    path: /react-data-grid/provided-cell-editors-large-text/
    method: GET
- name: select_cell_editor
  endpoint:
    path: /react-data-grid/provided-cell-editors-select/
    method: GET
- name: rich_select_cell_editor
  endpoint:
    path: /react-data-grid/provided-cell-editors-rich-select/
    method: GET
- name: number_cell_editor
  endpoint:
    path: /react-data-grid/provided-cell-editors-number/
    method: GET
- name: date_cell_editor
  endpoint:
    path: /react-data-grid/provided-cell-editors-date/
    method: GET
- name: checkbox_cell_editor
  endpoint:
    path: /react-data-grid/provided-cell-editors-checkbox/
    method: GET
- name: provided_cell_editors
  endpoint:
    path: /example/provided-cell-editors
    method: GET
    data_selector: data
- name: cell_data_types_cell_editors
  endpoint:
    path: /example/cell-data-types-cell-editors
    method: GET
    data_selector: data
- name: text_cell_editor
  endpoint:
    path: /react-data-grid/text-cell-editor
    method: GET
    data_selector: editorParams
    params: {}
- name: large_text_cell_editor
  endpoint:
    path: /large-text-cell-editor
    method: GET
    data_selector: editor
    params: {}
- name: large_text_editor
  endpoint:
    path: /api/large-text-editor
    method: GET
    data_selector: editorParams
    params: {}
- name: Select Cell Editor
  endpoint:
    path: /react-data-grid/select-cell-editor
    method: GET
    data_selector: editor
    params: {}
- name: Select Editor
  endpoint:
    path: /api/select-editor
    method: GET
    data_selector: values
    params: {}
- name: Rich Select Cell Editor
  endpoint:
    path: /react-data-grid/reference/rich-select-editor
    method: GET
    data_selector: data
    params: {}
- name: grid_example
  endpoint:
    path: /path/to/grid_example
    method: GET
    data_selector: records
    params: {}
- name: multi_selection
  endpoint:
    path: /api/multi_selection
    method: GET
    data_selector: records
    params: {}
- name: async_values
  endpoint:
    path: /api/async_values
    method: GET
    data_selector: records
    params: {}
- name: number_cell_editor
  endpoint:
    path: /react-data-grid/number-cell-editor
    method: GET
    data_selector: data
    params: {}
- name: number_cell_editor
  endpoint:
    path: /api/number-cell-editor
    method: GET
    data_selector: cellEditorParams
    params: {}
- name: date_cell_editor
  endpoint:
    path: /react-data-grid/date-cell-editor
    method: GET
    data_selector: data
    params: {}
- name: date_string_cell_editor
  endpoint:
    path: /react-data-grid/provided-cell-editors/date-string
    method: GET
    data_selector: records
    params:
      min: '2000-01-01'
      max: '2019-12-31'
- name: checkbox_cell_editor
  endpoint:
    path: /react-data-grid/cell-editing/
    method: GET
    data_selector: records
    params: {}
- name: undo_redo_edits
  endpoint:
    path: /react-data-grid/undo-redo-edits/
    method: GET
    data_selector: undoRedoProperties
    params: {}
- name: undo_redo_events
  endpoint:
    path: /undo-redo-events
    method: GET
    data_selector: events
    params: {}
- name: full_row_editing
  endpoint:
    path: /react-data-grid/full-row-editing
    method: GET
    data_selector: records
- name: grid_example
  endpoint:
    path: /example/grid
    method: GET
    data_selector: records
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: batch_editing
  endpoint:
    path: /react-data-grid/batch-editing
    method: GET
    data_selector: records
- name: batch_editing
  endpoint:
    path: /batch-editing
    method: POST
    data_selector: data
    params: {}
- name: row_data_example
  endpoint:
    path: /row_data
    method: GET
    data_selector: records
- name: row_data
  endpoint:
    path: /data/row
    method: GET
    data_selector: data
    params: {}
- name: row_node_api_methods
  endpoint:
    path: /react-data-grid/reference/
    method: GET
    data_selector: methods
    params: {}
- name: grid_example
  endpoint:
    path: /example/grid
    method: GET
    data_selector: data
    params: {}
- name: transaction_update
  endpoint:
    path: /transaction-update
    method: POST
    data_selector: transaction
    params: {}
- name: transaction_updates
  endpoint:
    path: /transaction/updates
    method: POST
    data_selector: data
    params: {}
- name: high_frequency_updates
  endpoint:
    path: /react-data-grid/high-frequency-updates
    method: GET
    data_selector: updates
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: small_olympic_winners
  endpoint:
    path: /small-olympic-winners.json
    method: GET
    data_selector: records
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: grid_example
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: aligned_grids
  endpoint:
    path: /react-data-grid/aligned-grids
    method: GET
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: locale
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: small_olympic_winners
  endpoint:
    path: /small-olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: groupDisplayType
  endpoint:
    path: /react-data-grid/grouping-group-rows/
    method: GET
    data_selector: options
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: records
    params: {}
- name: small_olympic_winners
  endpoint:
    path: /small-olympic-winners.json
    method: GET
    data_selector: records
    params: {}
- name: olympic_winners
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: autoGroupColumnDef
  endpoint:
    path: /example-path
    method: GET
    data_selector: records
    params: {}
- name: autoGroupColumnDef
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: small_olympic_winners
  endpoint:
    path: /small-olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: row_group_panel
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: column_definitions
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: pivoting_example
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: small_olympic_winners
  endpoint:
    path: /small-olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: pivotColumnGroups
  endpoint:
    path: /pivotColumnGroups
    method: GET
    data_selector: records
- name: grid_example
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: tree_data
  endpoint:
    path: /react-data-grid/tree-data/
    method: GET
    data_selector: data
    params: {}
- name: treeData
  endpoint:
    path: /react-data-grid/tree-data
    method: GET
- name: tree_data_paths
  endpoint:
    path: /react-data-grid/tree-data-paths
    method: GET
    data_selector: data
    params: {}
- name: tree_data_example
  endpoint:
    path: /example/tree_data
    method: GET
    data_selector: data
- name: grid_example
  endpoint:
    path: /grid/example
    method: GET
    data_selector: records
    params: {}
- name: tree_data_example
  endpoint:
    path: /grid/tree-data
    method: GET
    data_selector: records
    params: {}
- name: hierarchical_data
  endpoint:
    path: /react-data-grid/tree-data/
    method: GET
    data_selector: rows
    params: {}
- name: tree_data_example
  endpoint:
    path: /data/tree
    method: GET
    data_selector: records
- name: group_column
  endpoint:
    path: /react-data-grid/tree-data/group-column
    method: GET
    data_selector: records
    params: {}
- name: Tree Data
  endpoint:
    path: /react-data-grid/tree-data
    method: GET
    data_selector: records
    params: {}
- name: tree_data
  endpoint:
    path: /react-data-grid/tree-data
    method: GET
    data_selector: records
    params: {}
- name: grid_example
  endpoint:
    path: /grid/example
    method: GET
    data_selector: records
- name: tree_data
  endpoint:
    path: /react-data-grid/tree-data
    method: GET
    data_selector: records
- name: grid_example
  endpoint:
    path: /example/grid
    method: GET
    data_selector: records
- name: row_dragging
  endpoint:
    path: /react-data-grid/row-dragging/
    method: GET
    data_selector: data
- name: grid_example
  endpoint:
    path: /example/tree/managed-row-drag
    method: GET
    data_selector: records
- name: multi_row_drag_example
  endpoint:
    path: /example/tree/multi-row-drag
    method: GET
    data_selector: records
- name: row_data
  endpoint:
    path: /row-data
    method: GET
    data_selector: records
- name: drag_and_drop_grid
  endpoint:
    path: /tree-data-with-getdatapath
    method: GET
    data_selector: records
- name: master_detail
  endpoint:
    path: /example-assets/master-detail-data.json
    method: GET
    data_selector: data
    params: {}
- name: detail_grid
  endpoint:
    path: /example-assets/master-detail-data.json
    method: GET
    data_selector: data
    params: {}
- name: keepDetailRows
  endpoint:
    path: /reference-masterDetail-keepDetailRows
    method: GET
    data_selector: boolean
    params:
      default: 'false'
- name: keepDetailRowsCount
  endpoint:
    path: /reference-masterDetail-keepDetailRowsCount
    method: GET
    data_selector: number
    params:
      default: 10
- name: master_detail_fixed_height
  endpoint:
    path: /example-assets/master-detail-data.json
    method: GET
    data_selector: data
    params: {}
- name: master_detail_auto_height
  endpoint:
    path: /example-assets/master-detail-data.json
    method: GET
    data_selector: data
    params: {}
- name: master_detail_dynamic_height
  endpoint:
    path: /example-assets/master-detail-dynamic-row-height-data.json
    method: GET
    data_selector: data
    params: {}
- name: refresh_rows
  endpoint:
    path: /refresh-rows
    method: GET
    data_selector: params.data.callRecords
- name: refresh_everything
  endpoint:
    path: /refresh-everything
    method: GET
    data_selector: params.data.callRecords
- name: refresh_nothing
  endpoint:
    path: /refresh-nothing
    method: GET
    data_selector: params.data.callRecords
- name: master_detail_rows
  endpoint:
    path: /master-detail-rows
    method: GET
    data_selector: rows
    params: {}
- name: dynamic_master_rows
  endpoint:
    path: /example-assets/master-detail-dynamic-data.json
    method: GET
    data_selector: data
- name: level_3_detail_grid
  endpoint:
    path: /level3
    method: GET
- name: level_2_master_grid
  endpoint:
    path: /level2
    method: GET
- name: level_1_master_grid
  endpoint:
    path: /level1
    method: GET
- name: MasterDetail
  endpoint:
    path: /react-data-grid/master-detail
    method: GET
    data_selector: records
- name: master_detail_data
  endpoint:
    path: /master-detail-data.json
    method: GET
    data_selector: data
    params: {}
- name: master_detail_data
  endpoint:
    path: https://www.ag-grid.com/example-assets/master-detail-data.json
    method: GET
- name: tool_panels
  endpoint:
    path: /react-data-grid/tool-panel/
    method: GET
- name: Side Bar
  endpoint:
    path: /react-data-grid/side-bar/
    method: GET
    data_selector: sideBar
    params: {}
- name: sideBar
  endpoint:
    path: /sideBar
    method: GET
    data_selector: toolPanels
- name: getSideBar
  endpoint:
    path: /getSideBar
    method: GET
    data_selector: configuration
- name: setSideBarVisible
  endpoint:
    path: /setSideBarVisible
    method: POST
    data_selector: visibility
- name: isSideBarVisible
  endpoint:
    path: /isSideBarVisible
    method: GET
    data_selector: visibilityStatus
- name: setSideBarPosition
  endpoint:
    path: /setSideBarPosition
    method: POST
    data_selector: position
- name: openToolPanel
  endpoint:
    path: /openToolPanel
    method: POST
    data_selector: toolPanelId
- name: closeToolPanel
  endpoint:
    path: /closeToolPanel
    method: POST
    data_selector: toolPanelId
- name: getOpenedToolPanel
  endpoint:
    path: /getOpenedToolPanel
    method: GET
    data_selector: currentToolPanel
- name: isToolPanelShowing
  endpoint:
    path: /isToolPanelShowing
    method: GET
    data_selector: toolPanelVisible
- name: refreshToolPanel
  endpoint:
    path: /refreshToolPanel
    method: POST
    data_selector: refreshStatus
- name: getToolPanelInstance
  endpoint:
    path: /getToolPanelInstance
    method: GET
    data_selector: toolPanelInstance
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: custom_column_layout
  endpoint:
    path: /react-data-grid/custom-column-layout
    method: GET
    data_selector: columnDefs
    params: {}
- name: custom_drag_and_drop_image
  endpoint:
    path: /react-data-grid/custom-drag-and-drop-image
    method: GET
    data_selector: dragAndDropImageComponent
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: filters
  endpoint:
    path: /react-data-grid/filter-applying/#apply-clear-reset-and-cancel-buttons
    method: GET
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: filters
  endpoint:
    path: /filters
    method: GET
    data_selector: toolPanelParams
- name: Filters Tool Panel
  endpoint:
    path: /react-data-grid/filters-tool-panel
    method: GET
    data_selector: filters
    params: {}
- name: customStats
  endpoint:
    path: /customStats
    method: GET
    data_selector: toolPanels
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: column_menu
  endpoint:
    path: /customising-the-column-menu
    method: GET
- name: menu_items
  endpoint:
    path: /customising-the-menu-items
    method: GET
- name: column_chooser
  endpoint:
    path: /customising-the-column-chooser
    method: GET
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: agTotalRowCountComponent
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: agAggregationComponent
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      aggFuncs:
      - avg
      - sum
- name: loading_overlay
  endpoint:
    path: /react-data-grid/overlays/loading
    method: GET
    data_selector: loading
    params: {}
- name: no_rows_overlay
  endpoint:
    path: /react-data-grid/overlays/no-rows
    method: GET
    data_selector: no_rows
    params: {}
- name: no_rows_overlay
  endpoint:
    path: /reference-overlays-showNoRowsOverlay
    method: Function
    data_selector: showNoRowsOverlay
- name: loading_overlay
  endpoint:
    path: /reference-overlays-overlayLoadingTemplate
    method: string
    data_selector: overlayLoadingTemplate
- name: custom_loading_overlay
  endpoint:
    path: /custom-loading-overlay
    method: any
    data_selector: loadingOverlayComponent
- name: custom_no_rows_overlay
  endpoint:
    path: /custom-no-rows-overlay
    method: any
    data_selector: noRowsOverlayComponent
- name: client_side
  endpoint:
    path: /react-data-grid/client-side
    method: GET
- name: infinite
  endpoint:
    path: /react-data-grid/infinite
    method: GET
- name: server_side
  endpoint:
    path: /react-data-grid/server-side
    method: GET
- name: viewport
  endpoint:
    path: /react-data-grid/viewport
    method: GET
- name: server_side_row_model
  endpoint:
    path: /react-data-grid/server-side-row-model
    method: GET
    data_selector: records
    params: {}
- name: datasource
  endpoint:
    path: /server-side-datasource
    method: POST
    data_selector: rowData
- name: datasource
  endpoint:
    path: /serverSideDatasource
    method: GET
    data_selector: rowData
    params:
      startRow: 0
      endRow: 100
- name: serverSideDatasource
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: rows
- name: datasource
  endpoint:
    path: /getRows
    method: GET
    data_selector: rowData
- name: server_side_datasource
  endpoint:
    path: /react-data-grid/server-side-model-datasource/
    method: GET
    data_selector: rows
    params: {}
- name: filtering
  endpoint:
    path: /react-data-grid/filtering/
    method: GET
    data_selector: records
    params: {}
- name: filterModel
  endpoint:
    path: /filterModel
    method: GET
    data_selector: filterModel
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: rows
- name: row_grouping
  endpoint:
    path: /react-data-grid/grouping/
    method: GET
    data_selector: ''
- name: rows
  endpoint:
    path: /getRows
    method: GET
    data_selector: rowData
    params: {}
- name: example-hide-open-parents
  endpoint:
    path: /example-hide-open-parents
    method: GET
- name: example-unbalanced-groups
  endpoint:
    path: /example-unbalanced-groups
    method: GET
- name: example-expand-all
  endpoint:
    path: /example-expand-all
    method: GET
- name: example-child-counts
  endpoint:
    path: /example-child-counts
    method: GET
- name: olympic_winners
  endpoint:
    path: https://www.ag-grid.com/example-assets/olympic-winners.json
    method: GET
    data_selector: rows
- name: pivot_result_columns
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: rows
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: records
- name: pagination
  endpoint:
    path: /react-data-grid/row-pagination/
    method: GET
    data_selector: pagination
    params:
      pagination: true
      paginationPageSize: 10
      paginationPageSizeSelector:
      - 10
      - 20
      - 50
      - 100
- name: server_side_pagination
  endpoint:
    path: /react-data-grid/server-side-model-datasource/
    method: GET
    data_selector: server_side_pagination
    params:
      startRow: number
      endRow: number
- endpoint:
    params:
      paginationPageSize: 10
      cacheBlockSize: 10
- name: row_selection
  endpoint:
    path: /react-data-grid/row-selection/
    method: GET
    data_selector: rowSelection
- name: server_side_row_model
  endpoint:
    path: /react-data-grid/server-side-model/
    method: GET
    data_selector: serverSideRowModel
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: rows
    params: {}
- name: server_side_selection_state
  endpoint:
    path: /api/selection/state
    method: GET
    data_selector: records
- name: group_selection
  endpoint:
    path: /api/group/selection
    method: GET
    data_selector: records
- name: olympic-winners
  endpoint:
    path: https://www.ag-grid.com/example-assets/olympic-winners.json
    method: GET
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: rowData
- name: row_updates
  endpoint:
    path: /server-side-model-updating
    method: GET
    data_selector: updates
    params: {}
- name: refreshServerSide
  endpoint:
    path: /refreshServerSide
    method: POST
    data_selector: result
    params: {}
- name: Refresh Rows
  endpoint:
    path: /refresh
    method: POST
    data_selector: rows
    params: {}
- name: Refresh Group
  endpoint:
    path: /refreshGroup
    method: POST
    data_selector: group
    params: {}
- name: updating_rows
  endpoint:
    path: /updating-rows-api
    method: GET
    data_selector: updates
    params: {}
- name: rows
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: rows
- name: Server-Side Transactions
  endpoint:
    path: /react-data-grid/server-side-transactions
    method: GET
    data_selector: rows
    params: {}
- name: Server Side Transactions
  endpoint:
    path: /transaction/api
    method: POST
    data_selector: transactions
- name: serverSideRowModel
  endpoint:
    path: /api/transactions
    method: POST
    data_selector: transactions
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: rows
- name: dynamic_row_height
  endpoint:
    path: /react-data-grid/row-height/
    method: GET
- name: auto_row_height
  endpoint:
    path: /react-data-grid/row-height/
    method: GET
- name: tree_data
  endpoint:
    path: /react-data-grid/tree-data/
    method: GET
    data_selector: children
    params: {}
- name: tree_data
  endpoint:
    path: /tree-data.json
    method: GET
    data_selector: data
    params: {}
- name: small_tree_data
  endpoint:
    path: /small-tree-data.json
    method: GET
    data_selector: data
    params: {}
- name: tree_data
  endpoint:
    path: /tree-data.json
    method: GET
    data_selector: data
    params: {}
- name: tree_data
  endpoint:
    path: /tree-data.json
    method: GET
    data_selector: rows
- name: master_detail
  endpoint:
    path: /react-data-grid/master-detail/
    method: GET
    data_selector: data
    params: {}
- name: call_data
  endpoint:
    path: /call-data.json
    method: GET
    data_selector: rows
- name: call_data
  endpoint:
    path: /call-data.json
    method: GET
    data_selector: rows
- name: olympic_winners
  endpoint:
    path: /data/olympic_winners
    method: GET
    data_selector: records
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympicWinners
    method: POST
    data_selector: rows
- name: rows
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.rows
    params: {}
- name: server_side_row_model
  endpoint:
    path: /react-data-grid/server-side-model/
    method: GET
    data_selector: records
- name: client_side_row_model
  endpoint:
    path: /react-data-grid/row-models/#client-side
    method: GET
    data_selector: records
- name: trade
  endpoint:
    path: /getRows
    method: POST
    data_selector: data
    params: {}
- name: getRows
  endpoint:
    path: /getRows
    method: POST
    data_selector: data
- name: datasource
  endpoint:
    path: /datasource
    method: GET
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: viewport
  endpoint:
    path: /viewport
    method: GET
    data_selector: rows
    params:
      pagination: true
      viewportRowModelPageSize: 1
      viewportRowModelBufferSize: 0
- name: standard_export
  endpoint:
    path: /standard-export
    method: GET
    data_selector: export
    params: {}
- name: changing_column_separator
  endpoint:
    path: /changing-the-column-separator
    method: GET
    data_selector: export
    params: {}
- name: suppress_quotes
  endpoint:
    path: /suppress-quotes
    method: GET
    data_selector: export
    params: {}
- name: prepending_appending_content
  endpoint:
    path: /prepending-and-appending-content
    method: GET
    data_selector: export
    params: {}
- name: csv_export
  endpoint:
    path: /api/csv_export
    method: GET
    data_selector: data
    params: {}
- name: CsvCellData
  endpoint:
    path: /api/CsvCellData
    method: GET
    data_selector: value
    params: {}
- name: defaultExcelExportParams
  endpoint:
    path: /react-data-grid/excel-export-api/#excelexportparams
    method: GET
    data_selector: defaultExcelExportParams
    params: {}
- name: suppressExcelExport
  endpoint:
    path: /react-data-grid/excel-export-api/#reference-export-suppressExcelExport
    method: GET
    data_selector: suppressExcelExport
    params: {}
- name: excelStyles
  endpoint:
    path: /react-data-grid/excel-export-api/#excelstyle
    method: GET
    data_selector: excelStyles
    params: {}
- name: exportDataAsExcel
  endpoint:
    path: /react-data-grid/excel-export-api/#reference-export-exportDataAsExcel
    method: GET
    data_selector: exportDataAsExcel
    params: {}
- name: getDataAsExcel
  endpoint:
    path: /react-data-grid/excel-export-api/#reference-export-getDataAsExcel
    method: GET
    data_selector: getDataAsExcel
    params: {}
- name: getSheetDataForExcel
  endpoint:
    path: /react-data-grid/excel-export-api/#reference-export-getSheetDataForExcel
    method: GET
    data_selector: getSheetDataForExcel
    params: {}
- name: exportMultipleSheetsAsExcel
  endpoint:
    path: /react-data-grid/excel-export-api/#reference-export-exportMultipleSheetsAsExcel
    method: GET
    data_selector: exportMultipleSheetsAsExcel
    params: {}
- name: getMultipleSheetsAsExcel
  endpoint:
    path: /react-data-grid/excel-export-api/#reference-export-getMultipleSheetsAsExcel
    method: GET
    data_selector: getMultipleSheetsAsExcel
    params: {}
- name: ExcelHeaderFooterImage
  endpoint:
    path: /excel/headerFooterImage
    method: GET
    data_selector: properties
    params: {}
- name: ExcelImage
  endpoint:
    path: /excel/image
    method: GET
    data_selector: properties
    params: {}
- name: ExcelImagePosition
  endpoint:
    path: /excel/imagePosition
    method: GET
    data_selector: properties
    params: {}
- name: ExcelInterior
  endpoint:
    path: /excel/interior
    method: GET
    data_selector: properties
    params: {}
- name: ExcelNumberFormat
  endpoint:
    path: /excel/numberFormat
    method: GET
    data_selector: properties
    params: {}
- name: ExcelProtection
  endpoint:
    path: /excel/protection
    method: GET
    data_selector: properties
    params: {}
- name: ExcelSheetMargin
  endpoint:
    path: /excel/sheetMargin
    method: GET
    data_selector: properties
    params: {}
- name: ExcelSheetPageSetup
  endpoint:
    path: /excel/sheetPageSetup
    method: GET
    data_selector: properties
    params: {}
- name: ExcelTableConfig
  endpoint:
    path: /excel/tableConfig
    method: GET
    data_selector: properties
    params: {}
- name: ExcelStyle
  endpoint:
    path: /excel/style
    method: GET
    data_selector: properties
    params: {}
- name: excel_export_styles
  endpoint:
    path: /react-data-grid/excel-export-styles/
    method: GET
    data_selector: styles
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
- name: Excel Export
  endpoint:
    path: /react-data-grid/excel-export
    method: GET
    data_selector: formulas
    params: {}
- name: columnDefs
  endpoint:
    path: /columnDefs
    method: GET
    data_selector: columnDefs
- name: olympic_winners
  endpoint:
    path: /small-olympic-winners.json
    method: GET
    data_selector: records
    params: {}
- name: ExcelHeaderFooterConfig
  endpoint:
    path: /excel-export/header-footer-config
    method: GET
    data_selector: all
    params: {}
- name: ExcelHeaderFooter
  endpoint:
    path: /excel-export/header-footer
    method: GET
    data_selector: header
    params: {}
- name: ExcelHeaderFooterContent
  endpoint:
    path: /excel-export/header-footer-content
    method: GET
    data_selector: content
    params: {}
- name: ExcelHeaderFooterImage
  endpoint:
    path: /excel-export/header-footer-image
    method: GET
    data_selector: image
    params: {}
- name: ExcelExportParams
  endpoint:
    path: /excel-export
    method: GET
    data_selector: params
    params: {}
- name: Excel Export
  endpoint:
    path: /react-data-grid/excel-export/
    method: GET
    data_selector: exportParameters
    params: {}
- name: olympic_winners
  endpoint:
    path: /small-olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: excel_export
  endpoint:
    path: /react-data-grid/excel-export/
    method: GET
    data_selector: data
    params: {}
- name: excel_export
  endpoint:
    path: /export
    method: GET
    data_selector: data
    params: {}
- name: Excel Export
  endpoint:
    path: /excel-export/multiple-sheets
    method: POST
    data_selector: sheets
    params: {}
- name: excel_export_selected_rows
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: excel_export_filtered_data
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: excel_export_multiple_grids
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: excel_export_rows
  endpoint:
    path: /react-data-grid/excel-export-rows
    method: GET
    data_selector: records
- name: export_selected_rows
  endpoint:
    path: /export-selected-rows
    method: GET
- name: export_multi_line_cells
  endpoint:
    path: /export-multi-line-cells
    method: GET
- name: export_all_unprocessed_rows
  endpoint:
    path: /export-all-unprocessed-rows
    method: GET
- name: pinned_rows
  endpoint:
    path: /pinned-rows
    method: GET
- name: excel_export
  endpoint:
    path: /react-data-grid/excel-export
    method: GET
    data_selector: columns
    params: {}
- name: olympic_winners
  endpoint:
    path: /small-olympic-winners.json
    method: GET
    data_selector: data
- name: olympic_winners_full
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
- name: hyperlinks
  endpoint:
    path: /export/hyperlinks
    method: GET
    data_selector: records
    params: {}
- name: master_detail_data
  endpoint:
    path: /master-detail-data.json
    method: GET
    data_selector: data
    params: {}
- name: copying_cell_ranges
  endpoint:
    path: /react-data-grid/cell-selection/
    method: GET
    data_selector: cellRanges
    params: {}
- name: copying_rows
  endpoint:
    path: /react-data-grid/row-selection/
    method: GET
    data_selector: rowSelection
    params: {}
- name: custom_clipboard_interaction
  endpoint:
    path: /react-data-grid/clipboard/
    method: GET
    data_selector: customClipboard
    params: {}
- name: copying_via_api
  endpoint:
    path: /react-data-grid/copy/
    method: GET
    data_selector: copyAPI
    params: {}
- name: clipboard_processing
  endpoint:
    path: /react-data-grid/modules/ClipboardModule
    method: GET
- name: Clipboard Events
  endpoint:
    path: /clipboard-events
    method: GET
    data_selector: events
    params: {}
- name: Drag and Drop
  endpoint:
    path: /enable-drag-source
    method: GET
    data_selector: 'null'
    params: {}
- name: Dragging Between Grids
  endpoint:
    path: /dragging-between-grids
    method: GET
    data_selector: 'null'
    params: {}
- name: Custom Drag Data
  endpoint:
    path: /custom-drag-data
    method: GET
    data_selector: 'null'
    params: {}
- name: Drag & Drop
  endpoint:
    path: /drag-and-drop
    method: GET
    data_selector: data
    params: {}
- name: print_layout
  endpoint:
    path: /print/layout
    method: GET
    data_selector: records
- name: olympic_data
  endpoint:
    path: /olympic-data.xlsx
    method: GET
    data_selector: records
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: data
    params: {}
- name: monthly_sales
  endpoint:
    path: /monthly-sales.json
    method: GET
    data_selector: data
    params: {}
- name: grid_example
  endpoint:
    path: /example/grid
    method: GET
    data_selector: records
    params: {}
- name: student_records
  endpoint:
    path: /api/student_records
    method: GET
    data_selector: records
    params: {}
- name: grid_example
  endpoint:
    path: /example-assets/olympic-winners.json
    method: GET
- name: Value Cache
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: olympic_winners
  endpoint:
    path: /olympic-winners.json
    method: GET
    data_selector: records
    params: {}
- name: viewport
  endpoint:
    path: /api/viewport
    method: GET
    data_selector: rows
- name: GridExample
  endpoint:
    path: /react-data-grid
    method: GET
    data_selector: rowData
    params: {}
- name: feature_requests_and_active_bugs
  endpoint:
    path: /pipeline
    method: GET
    data_selector: issues
    params: {}
- name: charts
  endpoint:
    path: /charts/options/
    method: GET
    data_selector: charts
    params: {}
- name: row_data
  endpoint:
    path: /api/row-data
    method: GET
    data_selector: rows
    params: {}
- name: column_defs
  endpoint:
    path: /api/column-defs
    method: GET
    data_selector: columns
    params: {}
- name: angular_data_grid
  endpoint:
    path: /angular-data-grid
    method: GET
    data_selector: rows
    params: {}
- name: AllCommunityModule
  endpoint:
    path: /ag-grid/community
    method: GET
    data_selector: modules
    params: {}
- name: AllEnterpriseModule
  endpoint:
    path: /ag-grid/enterprise
    method: GET
    data_selector: modules
    params: {}
- name: AgChartsEnterpriseModule
  endpoint:
    path: /ag-charts/enterprise
    method: GET
    data_selector: modules
    params: {}
- name: ClientSideRowModel
  endpoint:
    path: /modules/ClientSideRowModel
    method: GET
- name: CsvExport
  endpoint:
    path: /modules/CsvExport
    method: GET
- name: ExcelExport
  endpoint:
    path: /modules/ExcelExport
    method: GET
- name: MasterDetail
  endpoint:
    path: /modules/MasterDetail
    method: GET
- name: SetFilter
  endpoint:
    path: /modules/SetFilter
    method: GET
- name: Clipboard
  endpoint:
    path: /modules/Clipboard
    method: GET
- name: NumberFilter
  endpoint:
    path: /modules/NumberFilter
    method: GET
- name: TextFilter
  endpoint:
    path: /modules/TextFilter
    method: GET
- name: ag-grid-angular
  endpoint:
    path: /angular-data-grid/api/
    method: GET
    data_selector: dependencies
- name: ag-grid-enterprise
  endpoint:
    path: /angular-data-grid/api/
    method: GET
    data_selector: dependencies
- name: space_mission_data
  endpoint:
    path: /space-mission-data.json
    method: GET
    data_selector: data
    params: {}
- name: row_data
  endpoint:
    path: /example-assets/space-mission-data.json
    method: GET
    data_selector: data
    params: {}
notes:
- AG Grid is a high-performance React Data Grid library for building React Tables
  with unbeatable performance and hundreds of features.
- Inventory data example to view and manage products.
- AG Grid Community is free for everyone, including production use - no licence required.
- AG Grid Enterprise requires a licence to use in production.
- AG Grid Modules allow you to reduce the bundle size of your application by only
  including the modules you want to use.
- You can test AG Grid Enterprise locally without a licence.
- To test in production, access support and remove the watermark & console warnings.
- As with any automation workflow, we recommend that any changes made by the codemods
  are checked and reviewed before committing updated source files.
- In particular, any automatically-applied changes should always be logically correct,
  however the formatting of the generated code is likely to vary slightly from the
  rest of the codebase and could require minor tweaking.
- Uses a custom cell renderer for displaying company logos and mission results.
- If your application updates row data then it is strongly recommended to implement
  the getRowId callback.
- For all properties that are Objects, e.g. defaultColDef, sideBar and statusBar,
  we recommend useState or useMemo.
- The grid works with CSP, but some basic configuration is necessary to have your
  application load correctly.
- Some optional grid features compile string expressions into code, and if you're
  using these then the script-src 'unsafe-eval' directive is required.
- Themes work by injecting CSS styles into the DOM when the grid initialises. By default
  this requires a style-src 'unsafe-inline' directive in your CSP.
- 'The img-src data: directive is required because the grid uses data urls to embed
  SVG images in CSS files.'
- 'If you are using legacy themes then the font-src data: directive is required.'
- Theming refers to the process of adjusting design elements such as colours, borders
  and spacing to match your applications' design.
- The grid is styled using CSS. It ships with built-in styles that can create a range
  of designs.
- Themes are simply preset configurations of parts and parameters.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- A theme can only have one part for a given feature.
- Uses AG Grid with various themes
- Supports dark and light modes
- Uses Google fonts which must be loaded explicitly.
- Borders are controlled using theme parameters ending in 'Border'.
- Uses ag-grid for rendering data.
- Cell selections can be created by clicking and dragging on the grid.
- Icons have CSS class names in the format ag-icon-{iconName}.
- Material icons are designed to look best at 18, 24, 36 or 48px.
- The grid exposes many theme parameters beginning `input*` for customising text input
  appearance.
- If there is no parameter for the effect that you want to achieve, you can use CSS
  selectors.
- Custom CSS Rules can be applied to grid elements.
- Themes support over a hundred Theme Parameters.
- Uses createTheme function to create a new theme containing core styles
- In v33, the theme grid option has a default value, and if no value is provided the
  quartz theme will be used.
- The old method of styling (now called legacy themes) is still supported, but is
  deprecated and will be removed in a future major version.
- Legacy themes were applied by adding a class name e.g. ag-theme-quartz to the wrapper
  element of the grid.
- Transitional support for applications created before v33
- When using Auto Height, there is a minimum of 150px set to the grid rows section.
- It is not possible to specify a max height when using auto-height.
- Sparklines can be fully customised to application's requirements.
- 'The given fill string can be in one of the following formats: #rgb, #rrggbb, rgb(r,
  g, b), rgba(r, g, b, a), CSS color keyword.'
- The `min` and `max` properties have been set to `0` and `1` respectively, indicating
  that the supplied data across all sparklines will contain values from `0` to `1.
- In order to display a progress bar in a sparkline, the data array should only contain
  a single value.
- Custom column options can be set for sparklines.
- Sparklines are configured on a per-column basis and are supplied data based on their
  column configuration.
- Data for the `rateOfChange` field must be in the correct format.
- Invalid Y values are rendered as gaps in the sparkline.
- The axis type can be set to 'category', 'number', or 'time'.
- The styler is a callback function used to return formatting for individual data
  points based on the given parameters.
- Uses conditional styling for first, last, min, max, positive, and negative points
  in sparklines.
- Uses AG Charts for area sparkline options
- Uses AG Charts for sparkline options
- Built-in charting that seamlessly integrates with the grid.
- User created charts provide an out-of-the-box charting experience, similar to that
  found in spreadsheet applications such as Excel.
- Uses AG Grid for data visualization and manipulation.
- 'High Performance: 100 rows are randomly updated 10 times a second (1,000 updates
  per second).'
- Charts are placed in div elements outside the grid.
- Changes to the grid data are reflected in the charts.
- Cross-filtering charts rely on a theme to derive filtered value colours from existing
  theme colours.
- Uses ag-grid for rendering charts and grids dynamically.
- Uses ag-grid for rendering charts
- The Chart Menu list can be customised via the grid option `chartMenuItems`.
- The Chart Menu can be hidden by returning an empty array from the `getChartToolbarItems()`
  grid callback.
- The Chart Tool Panels allow users to change the selected chart type and customise
  the data and chart formatting.
- Always set the popupParent to be document.body.
- Integrated Charts can be customised via the AG Charts Theme API.
- When using a dark colour scheme for the grid, the application must provide the dark
  equivalents of the chart themes.
- Uses a global formatter for all number values prefixed with £
- Event listeners can be used for chart updates.
- Uses AG Grid for rendering and charting
- Supports multiple chart types including line and area
- Downloaded chart image will be in a PNG format.
- Programmatic use-cases return a base64 encoded image string.
- Download option is available for image formats like PNG and JPEG.
- Width of columns is preserved when changing column definitions.
- Columns can be matched using field or colId.
- Maintain column order by setting maintainColumnOrder to true.
- Uses standard REST API for fetching data.
- Allows saving and restoring of column state.
- Uses autoHeaderHeight to adjust header height based on content
- Can hide padded header rows with hidePaddedHeaderRows option
- Custom Header Component allows for additional functionality.
- Grid provides built-in features for sorting and filtering.
- Custom Header Components require implementation of keyboard navigation.
- Uses JSON data from AG Grid example assets.
- Uses ag-Grid for data presentation
- Supports column grouping and tooltips
- Auto-size columns to fit grid width or cell contents.
- Grid property 'colResizeDefault' can be set to 'shift' for shift resizing.
- Default column move animations are on; consider turning off if performance is an
  issue.
- suppressDragLeaveHidesColumns will prevent columns from being hidden when dragged
  outside the grid.
- Column spanning breaks out of the row / cell calculations that a lot of features
  in the grid are based on.
- Data is provided to the grid via the rowData property.
- Sorting order is ascending -> descending -> none.
- To achieve multi-column sorting, hold down 'Shift' while clicking the column header.
- To enable Row Numbers, set the grid option `rowNumbers = true`.
- The Row Resizer feature does not work when columns are configured with Auto Row
  Height.
- Enabling row spanning by setting gridOption.enableCellSpan to true.
- Pinned rows appear either above or below the normal rows of a table.
- Pinned rows are styled bold by default to visually distinguish them.
- When sorts and filters are applied to the grid, they will also be applied to pinned
  rows.
- Pinned rows cannot be sorted.
- Pinned rows are not filtered.
- Pinned rows cannot be grouped.
- Pinned rows cannot be selected.
- By default, the row height in the grid is based on the theme (42px for Quartz).
  You can change this for each row individually to give each row a different height.
- You cannot use variable row height when using either the Viewport Row Model or Infinite
  Row Model.
- Once set, the grid will not ask you for the row height again.
- 'Using `wrapText` results in the CSS property `white-space: normal` being applied
  to the cell.'
- Setting `autoHeight=true` adds size listeners to cells.
- Uses rowClassRules to apply CSS classes based on conditions.
- To enable pagination set the grid property pagination=true.
- The height of the pagination panel defaults to the grid row height.
- The grid does not manage moving of the rows in unmanaged dragging.
- The property `suppressRowDrag=true` is set by the application depending on whether
  sorting or filtering is active.
- The drag event only starts after the Row Drag Element has been dragged by 4px.
- Custom Row Dragger can be rendered inside Custom Cell Renderers.
- Allows configuring the component with custom parameters.
- Uses internal Managed Row Dragging system combined with row selection
- Drag to external DropZone is supported
- Rows can be dragged from one grid to the other grid. When the row is received, it
  is not removed from the first grid.
- If the row is already present in the grid, it will not be added twice.
- Dragging multiple records at once is supported.
- Rows can be removed from both grids by dragging to the 'Trash' drop zone.
- Full width rows can take any height specified in the getRowHeight function.
- All valueGetters must be pure functions.
- By default, values are formatted using the column's valueFormatter when exporting
  data from the grid.
- Cell data types are enabled by default and inferred from row data.
- For inference to work, rows must contain non-null values.
- Supports custom cell data types.
- Uses functions for cellClassRules
- Cell styles accumulate unless explicitly reset
- You can trigger cells to flash either through the Grid API or by enabling cells
  to flash when the data changes.
- Columns A and B are editable.
- Columns C and D are updated via clicking the button.
- Tooltips will not disappear while being hovered.
- Custom tooltip displays a text input and a Submit button.
- Prefer using refreshCells() over redrawRows() unless necessary.
- For the selection to work correctly, the order of the rows within the DOM must match
  what is displayed.
- Find is only compatible with the Client-Side Row Model.
- Uses Find across Master / Detail with custom detail cells.
- The default option for the Text Filter is `contains`.
- The `empty` filter option is primarily used when creating Custom Filter Options.
- The Number Filter is not affected by data changes.
- The default option for the Date Filter is 'equals'.
- Dates outside the valid ranges will be invalid.
- The Date Filter is not affected by data changes.
- Default state cannot be changed if Excel Mode is enabled.
- Filter values are automatically truncated with ellipses when the values are too
  long.
- Cell editing does not re-execute filtering by default.
- Transaction updates will execute filtering in the grid.
- Tree List is enabled by setting filterParams.treeList = true.
- The Mini Filter applies the filter as the user types if 'applyMiniFilterWhileTyping'
  is set to true.
- Custom text formatter can be used to ignore accents in searches.
- Uses a multi-filter structure to manage child filters effectively.
- Filters can include buttons for apply, clear, reset, and cancel actions.
- Uses custom filter options for data grid
- Filters include conditions for various data types
- 'Supports different action buttons for filters: Apply, Clear, Reset, Cancel'
- Filters maintain a separate unapplied model representing what is shown in the UI.
- Uses a custom filter model for the athlete column.
- Uses a JSON file for row data.
- Filters can be customized and have read-only modes.
- Enabling the grid option 'enableFilterHandlers' is required for custom filters.
- Uses AG Grid for displaying data with custom filter components.
- Floating filters are activated by setting the property `floatingFilter = true` on
  the `colDef`.
- Advanced Filter and Column Filters cannot be active at the same time.
- Enabling Advanced Filter will disable Column Filters.
- Advanced Filter can be displayed outside the grid.
- External filtering allows you to mix your own filtering logic with the grid's inbuilt
  filtering.
- Quick Filter is used to filter rows by comparing against the data in all columns.
- All words must match the row for it to be included.
- The Quick Filter is only supported with the Client-Side Row Model.
- Row selection can be used when using row grouping, tree data and the server-side
  row model.
- Checkboxes can be customized, and their display can be controlled using 'hideDisabledCheckboxes'.
- Click selection can be enabled by setting 'enableClickSelection' to true.
- In certain circumstances, especially in the context of touchscreen devices, users
  may want to select multiple rows without having to use the Ctrl key.
- Allows selection of a row by clicking the row itself.
- Enables deselection of a row by CTRL-clicking the row itself.
- Selection behavior includes multi-row mode and group selection.
- Header checkbox controls selection of all rows.
- By default multiple ranges can be selected.
- If you have a grid with pinned rows and / or columns, then 'flatten out' the grid
  in your head so that all rows and columns are visible.
- 'To enable the Range Handle, set `cellSelection.handle` to `{ mode: ''range'' }`
  in the `gridOptions`.'
- The default Fill Handle behaviour will be as close as possible to other spreadsheet
  applications.
- The grid will fire the fillStart event before it starts filling cells and the fillEnd
  event when all cells have been filled.
- Cell editing is controlled by an editable callback based on the Year.
- Custom column types are used to avoid duplication of the editable callback.
- Editing can be started or stopped based on various user interactions.
- Default is for the grid to enter editing when you Double-Click on a cell.
- To change the default so that a single-click starts editing, set the property gridOptions.singleClickEdit
  = true.
- To suppress editing on click, set suppressClickEdit=true.
- By default, the grid will not stop editing the currently editing cell when the cell
  loses focus, unless another cell is clicked on.
- If you want the grid to stop editing when focus leaves the cell or the grid, set
  the grid property `stopEditingWhenCellsLoseFocus = true`.
- If using Cell Data Types, Value Parsers are automatically set to handle the conversion
  of each of the basic data types.
- Uses readOnlyEdit mode to prevent direct updates to the grid data.
- Custom Cell Editor Components are controlled components.
- The provided props interface for CustomCellEditorProps.
- Popup Editors are not constrained to the Cells dimensions.
- If a custom cell editor creates its own popup, it needs to have the 'ag-custom-component-popup'
  CSS class.
- Uses AG Grid components for rendering.
- Default text cell editor uses standard HTML input.
- Customisation includes setting cols and rows for the editor size.
- The space in pixels between the value display and the list of items is customizable.
- Uses ag-Grid for data grid functionality
- The values property can receive a Promise that resolves an array of values.
- The stepping behaviour to increment/decrement the numeric value can be customised
  using precision and step properties.
- Checkbox Cell Editor can be enabled with agCheckboxCellEditor.
- Undo / redo is enabled through the undoRedoCellEditing property.
- Default number of undo / redo steps is 10.
- Uses built-in undo/redo functionality for cell editing.
- Restricts undo/redo steps to a maximum of 5.
- Full row editing is for when you want all cells in the row to become editable at
  the same time.
- Full row editing is not compatible with popup editors.
- Pressing ⇥ Tab / ⇧ Shift & ⇥ Tab while editing will move the focus between the cells
  on the editing row.
- Grid supports built-in validation for cell editors.
- Custom validation can be implemented using getValidationErrors callback.
- Batch editing is an advanced feature only available via the API to allow you to
  tailor it to your specific needs.
- The grid allows for updates to row data without a full re-render.
- Row IDs can be provided to maintain selection across updates.
- Enables client-side updates for rows and cells.
- Uses delta sorting for performance enhancement.
- Use Async Transactions if you have a high volume of streaming data going into the
  grid and don't want the grid's rendering and recalculating to be a bottleneck.
- Uses a public API to fetch Olympic winners data.
- The example fetches data from a public JSON endpoint.
- Disables viewport zooming by setting <meta name="viewport" content="width=device-width,
  initial-scale=1" />
- Ensure DOM order for accessibility
- Disable group sticky rows for correct announcements
- Disable column and row virtualisation for screen readers
- To get AG Grid to display in RTL format, set the property enableRtl=true.
- Uses CSS classes to handle RTL and LTR layouts.
- Aligning two or more grids means columns will be kept aligned in all grids.
- Column changes to one grid are reflected in the other grid.
- The pivot functionality does not work with aligned grids.
- The grid's displayed text can be customised for localisation.
- Translations are provided as an illustration only and are not guaranteed to be accurate
  or error free.
- Row Grouping is enabled by setting `rowGroup` to `true` on one or more Column Definition.
- Grouping can be configured on multiple columns using rowGroupIndex.
- The groupAllowUnbalanced option allows unbalanced grouping.
- The groupHideParentOfSingleChild option hides parents of individual rows.
- Single Group Column is enabled by default but can be explicitly set.
- The tree filter needs a value for each leaf row.
- In absence of a field or valueGetter on the group column, provide a filterValueGetter
  to the group column definition.
- Example demonstrates enabling multiple group columns using groupDisplayType option.
- Group Rows can be enabled by setting the groupDisplayType grid option to 'groupRows'.
- Uses ag-Grid for rendering data in a grid format
- Prevent columns from being hidden when dragged over the row group panel
- Prevent sorting on the row group panel
- Row keys are only unique within their groups, it is recommended to use the entire
  Row Route to identify the row.
- When scrolling through an expanded group, set the suppressGroupRowsSticky property
  to true to prevent the group row from sticking to the top of the grid.
- Configures row selection with descendants selection option.
- Checkboxes can be rendered in group cells.
- Row Groups are sorted by the column that they are grouped by.
- Aggregations can be configured using the column properties.
- The aggregation function can be applied to a column using the aggFunc grid option.
- To restrict the aggregation functions that can be applied to a column, set the allowedAggFuncs
  column definition property.
- Custom aggregation functions can be registered to the grid by name via the aggFuncs
  grid option.
- 'A grand total row can be included in the grid by setting the grandTotalRow grid
  option to one of: "top", "bottom", "pinnedTop" or "pinnedBottom".'
- A total row can be included in every group by setting the groupTotalRow grid option
  to either "top" or "bottom".
- suppressStickyTotalRow can be set to true or false.
- The suppressAggFilteredOnly option can be enabled for aggregated filtering.
- groupAggFiltering can be configured to apply filters only to group rows.
- Pivoting with Tree Data enabled is currently not supported.
- Pivoting can only be used with Row Grouping.
- When pivot mode is enabled, filtering out rows will not re-aggregate the parent
  rows.
- Pivot Column Groups can be configured to expand by default.
- To prevent expanding groups, set suppressExpandablePivotGroups=true.
- Configuration options include column definitions and pivot mode settings.
- To enable Tree Data set the treeData property to true in the grid options.
- Set to true to enable the Grid to work with Tree Data. You must also implement the
  getDataPath(data) callback.
- Tree Data can be supplied to the grid in multiple ways.
- Supports Transaction Updates with Data Paths and Self-Referential Records.
- Grid will create Filler Groups for any omitted levels in the hierarchy.
- The grid does not support transactions when using treeDataChildrenField.
- Uses aggregation functions for group nodes.
- Custom group values can be defined.
- Each row must contain a unique identifier.
- Ensure no cycles or missing parent rows exist in data.
- The grid will automatically generate a group column to display the hierarchy.
- Uses a custom icon to represent the groups expanded state
- Configure the initial expanded group row state when using Tree Data.
- Row keys are not always unique, so it is recommended to instead use the node ID
  or data path to identify the row.
- Uses ag-grid with tree data filtering options.
- Enables managed row dragging, so the grid handles row movement automatically.
- Prevents the grid from moving rows while dragging, showing a highlight over the
  row instead.
- The grid uses the treeDataParentIdField property.
- Master / Detail can be enabled using the masterDetail grid option.
- The Detail Grid can use any Row Model.
- The Detail Grid fits inside one row of the Master Grid without using any of the
  Master Grid's columns.
- The maximum number of Detail Rows kept is two.
- The default height of each detail section is fixed at 300px. The height does not
  change based on how much data there is to display in the detail section.
- When using Auto Height, the Detail Grid will have a minimum height of 150px for
  the rows section.
- Do not use Auto Height if you have many rows (eg 100+) in the Detail Grids.
- The strategy is set via the refreshStrategy parameter of the Detail Cell Renderer
  params.
- Valid values are rows for Refresh Rows, everything for Refresh Everything and nothing
  for Refresh Nothing.
- The default strategy is Refresh Rows.
- Uses dynamic master rows to control expandable rows based on child records.
- Uses React for rendering the grid components.
- Detail grids can be customized with auto height.
- Uses AgGrid for rendering Master/Detail components
- Custom Tool Panels can be provided.
- Initially the Side Bar is not visible as sideBar.hiddenByDefault=true.
- Visibility Buttons toggle visibility of the Tool Panel.
- Column definitions must have enableRowGroup for grouping, enablePivot for pivoting,
  and enableValue for aggregation.
- To use the new Filters Tool Panel, set enableFilterHandlers = true, and use the
  'filters-new' Side Bar Configuration.
- Items are suppressed by setting one or more of the toolPanelParams to true.
- To remove a particular column / filter from the tool panel, set the column property
  suppressFiltersToolPanel to true.
- When providing a custom layout it is recommended to enable suppressSyncLayoutWithGrid
  in the tool panel params to prevent users changing the layout when moving columns
  in the grid.
- Column menu can be displayed in legacy tabbed format.
- If you want to turn off the context menu completely, set the grid property suppressContextMenu=true.
- The 'paste' operation in the context menu is not possible and hence always disabled.
- Uses a JSON data source for Olympic winners
- Some Status Panels only show when a Cell Selection is present.
- Overlays can be customised by providing either a HTML string or custom component
  via grid properties.
- If you are not sure, use default Client-Side.
- If you do not want to shift all the data from your server to your client, as the
  amount of data is too large to shift over the network or to extract from the underlying
  datasource, then use either Infinite, Server-Side or Viewport.
- The grid will load the top level rows only. Children of groups are only loaded when
  the user expands the group.
- Rows are read back from the server in blocks to provide the experience of infinite
  scrolling.
- 'Default: 100'
- Default is no limit, so every requested block is kept.
- This section covers the Server-Side Cache and configurations available in the Server-Side
  Row Model.
- The grid property cacheBlockSize = 50 sets the block size to 50.
- The grid property maxBlocksInCache = 2 means the grid will keep two blocks in memory
  only.
- The grid property blockLoadDebounceMillis = 1000 delays loading of blocks by 1000ms.
- The serverSideInitialRowCount property is set to 5500.
- Enables debug mode to log block information to console.
- Sorting is enabled by default in the grid and controlled via the sortable column
  definition attribute.
- Supports sorting on both server-side and client-side depending on configuration.
- The server uses the metadata contained in the filterModel to filter the rows.
- Cell Data Types must be supplied in order for the Advanced Filter to display the
  correct filter options, otherwise only 'text' options will be displayed.
- The grand total row is not supported by the SSRM.
- To pivot on a column pivot=true should be set on the column definition.
- The grid needs to be in pivot mode which is set through the grid option pivotMode=true.
- Pivot mode is enabled through the grid option `pivotMode=true`.
- Rows are grouped by `Country` and `Sport` with `rowGroup=true` defined on their
  column definitions.
- Uses React for UI rendering and ag-Grid for data presentation.
- Uses server-side row model with pagination and group selection.
- Selection API allows for row and group selections.
- The example snippets demonstrate how to set initial selection states.
- suppressServerSideFullWidthLoadingRow prevents the grid from defaulting to full
  width loading.
- It is possible to add and remove columns to the Server-Side Row Model without having
  the row model reset.
- Uses polling to refresh data.
- Purge option resets all rows state except row selection.
- Uses a fake server to simulate real server call
- Server-Side Transactions require Row IDs to be supplied to grid.
- Transactions are batched to improve performance.
- Asynchronous updates execute transactions together after a specified delay.
- When a datasource load fails, it is possible to retry loading the rows again at
  a later time.
- Demonstrates load retrying and handling failed loads.
- Ensure maxBlocksInCache is not set when using dynamic row height.
- Ensure maxBlocksInCache is not set when using auto row height.
- Tree Data is defined as data that has parent / child relationships where the parent
  / child relationships are provided as part of the data.
- Tree Data is enabled with the Server-Side Row Model using gridOptions.treeData =
  true.
- Uses server-side row model with tree data.
- Uses Server-Side Row Model for hierarchical data
- Tree data filtering supports asynchronous values
- The detail grid is a fully featured instance of AG Grid, so any configuration can
  be set on it that you would set on any other grid.
- Supports Master/Detail functionality
- Uses a fake server to simulate API responses
- The reference implementation covered in this guide is for demonstration purposes
  only. If you use this in production it comes with no warranty or support.
- This example was tested using ag-grid-enterprise (v18.0.0)
- Java(TM) SE Runtime Environment (build 1.8.0_162-b12)
- Java HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)
- Apache Maven (3.5.2)
- Apache Spark Core 2.11(v2.2.1)
- Apache Spark SQL 2.11(v2.2.1)
- Uses Infinite Row Model for pagination.
- Sorting and filtering must be done server-side.
- Having smaller infinite blocks size than your pagination page size is not supported
- You must have infinite block size greater than or equal to the pagination page size.
- Uses infinite scrolling for pagination
- Use a viewport to manage large live sets of data in the grid, where you only want
  to load a subset of the data into the grid and the data is updating at the source.
- Only server-side sorting is supported.
- Filtering must be done on the server.
- CSV export is enabled by default unless suppressCsvExport is set to true.
- Community version supports api CSV Export but not Context Menu.
- Enterprise version enables CSV Export using right click via the Context Menu.
- By default, hidden columns are not exported.
- The enterprise version of the grid provides an 'Excel Export' option via the grids
  Context Menu by default.
- The current order of the columns is exported and any hidden columns will not be
  exported.
- Filtered out rows are not included in the export, and the sort order is maintained.
- Default file name is export.xlsx
- Default font size is 11
- Excel styles can be applied to cells and headers when exporting to Excel.
- Header and footer content is only visible when printing or exporting from Excel
  to PDF.
- Export to Excel doesn't export group rows as collapsible groups.
- Row groups are exported on the same level and cannot be expanded/collapsed in Excel.
- Images can only be exported as base64 strings
- Image format must be either PNG, GIF or JPG
- Only one image per cell is allowed
- Uses ag-Grid for data representation and exporting features
- Excel Export provides a way to export grid data as an Excel table.
- Excel tables require non-empty and unique table column names.
- Exporting to an Excel table isn’t supported for pivot and for master/detail grids.
- Exporting the grid into different sheets follows a specific process.
- By default, all visible rows are exported, but by using the onlySelected param,
  only the selected rows will be exported.
- If you need to display a cell value on multiple lines, please set the Excel Alignment
  wrapText option.
- By default, the grid exports grid rows after filtering and sorting has been applied.
- If you'd like to exclude pinned top/bottom rows in AG Grid from the Excel export,
  please set the skipPinnedTop and skipPinnedBottom properties to true.
- By default, only visible columns will be exported.
- If `All Columns` is checked, hidden columns will be included in the export.
- The exported sheet will have all column headers frozen in place.
- The URL column of the grid below has URL values.
- In the exported Excel file, the URL column has active links for these URL values.
- Master Detail data is only available for expanded nodes
- RowBuffer was set to 100 so all Detail Grids would be available
- When copying cell ranges, the relative positions of multiple ranges is not preserved.
- The context menu will not show an option to Cut.
- Uses ClipboardModule for processing clipboard operations.
- This is not an enterprise config and can be used at any time to enable cell text
  selection.
- No specific drop zone logic in the grid.
- Consideration was given to exposing callbacks or firing events in the grid for the
  drop zone relevant events.
- Uses custom cell renderer for drag and drop functionality.
- 'When in print layout, all rows will have the CSS property page-break-inside: avoid.'
- Grid state can be saved and restored using the Grid Pre-Destroyed Event.
- The example demonstrates how the context object can be used to update currency.
- The grid shows 'actual vs budget data and yearly total' for widget sales.
- The grid keeps a local copy of all values rendered in each cell.
- Aggregation occurs without changing the underlying data.
- The grid uses DOM virtualisation to vastly improve rendering performance.
- The grid will render a maximum of 500 rows.
- To remove the maximum rendered row restriction set the property suppressMaxRenderedRowRestriction=true.
- suppressColumnVirtualisation=true
- suppressRowVirtualisation=true
- The Value Cache is for advanced users who have time-consuming Value Getters and
  want to reduce the number of times Value Getters get executed.
- The example still works fast when the Value Cache is turned off. This emphasises
  you don't need to turn the Value Cache on if your application is not getting slowed
  down by your Value Getters.
- Uses Value Cache which can be set to never expire.
- The grid uses Row Virtualisation, there is no fixed limit to the number of rows
  the grid can display.
- To see what the grid has determined as the maximum height for a div, set the grid
  property debug=true.
- The grid can display massive amounts of rows.
- Rows appear to scroll faster when the maximum vertical scroll position is reached.
- React in Production Mode works faster than Dev Mode.
- 'If a cell renderer is identified as slow then it can be marked for deferred rendering
  by setting deferRender: true on its cellRendererParams.'
- Auto Height Rows is a great feature that we love. However, it also creates more
  complex DOM inside each Cell.
- By default, rows are highlighted as the mouse hovers over them.
- AG Grid Community is free forever.
- AG Grid Enterprise costs $999 USD per licence.
- Many grid properties such as Cell Class Rules and Value Getters allow using expressions.
  However, this requires script-src 'unsafe-eval'.
- You can avoid the requirement for style-src 'unsafe-inline' using the styleNonce
  grid option.
- CSP nonces are global to a page, so when a page has multiple grids, all grids must
  have the same styleNonce set.
- Applications may be required to pass an Application Security Test prior to being
  put into production.
- AG Grid is tested for a wide variety of security vulnerabilities using the SonarQube
  automatic security testing tool.
- Your privacy is important to us.
- We do not collect any Sensitive Data about you.
- AG Grid is available in Community and Enterprise editions.
- AG Grid Enterprise requires a licence to use in production. Free to test locally,
  or request a trial to test in production.
- AG Grid Community relies on community-driven support through GitHub and public forums.
- AG Grid Enterprise provides dedicated support via Zendesk with guaranteed response
  times.
- AG Grid Modules allow you to reduce the bundle size of your application by including
  only the modules you want to use.
- When using Bundles, the ValidationModule is included by default.
- To test AG Grid Enterprise locally without a licence.
- While we attempt to automate as many upgrade paths as possible, unusual use cases
  may still require some manual intervention.
- Uses Angular framework for grid implementation
errors:
- 'default-src ''self''; style-src ''self'' ''nonce-123xyz''; img-src ''self'' data:'
- 'COLUMN_VIRTUALIZATION: Column is not visible, cannot auto-size.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'Invalid height: Ensure the height provided is a positive number.'
- Row height calculation may cause layout shifts during scrolling.
- 'DUPLICATE_ID: Row ID already exists in the grid.'
- Performance impact due to frequent executions of cellClassRules
- '400 Bad Request: Check the request data structure.'
- '404 Not Found: Ensure the endpoint path is correct.'
- Invalid filter type specified.
- Filter state cannot be restored without a saved state.
- '404 Not Found: Check the endpoint URL.'
- '500 Internal Server Error: Server issue or misconfiguration.'
- 'FILTER_NOT_APPLICABLE: Quick Filter is not applicable for Server-Side Row Models.'
- 'NO_UNDO_REDO_ACTION: No actions to undo/redo'
- 'INVALID_OPERATION: Operation not allowed in current state'
- 'InvalidEditValue: Triggers based on validation modes.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Horizontal Scroll
- Column Hidden / Shown
- Column Moved
- Column Group Opened / Closed
- Column Resized
- Column Pinned
- The limit of 1000 generated columns has been exceeded. Either remove pivot or aggregations
  from some columns or increase the limit.
- 'Invalid structure: missing parent rows.'
- 'Invalid structure: cycles detected.'
- Invalid rowSelection settings when using SSRM.
- 'INVALID_SELECTION_STATE: State does not conform to expected format.'
- 'REQUEST_FAILED: The request for selection state has failed.'
- 'REQUEST_FAILED: Check server response.'
- 'GROUP_NOT_FOUND: Ensure group exists before refresh.'
- '500 Internal Server Error: Check server configuration.'
- '400 Bad Request: Ensure the request format is correct.'
- 'Loading Failed state: No data is shown in these rows as they are not loaded.'
- 'REQUEST_FAILED: Check server response for details'
- 'DATA_NOT_FOUND: Ensure the requested data exists'
- 'FETCH_ERROR: Ensure the endpoint is correct or the server is reachable'
- Pasting is disabled because it's not possible to do so programmatically due to browser
  security restrictions.
- Scroll speed increases when the rows do not fit within the visible area.
- CVE-2017-16009
- CVE-2024-39001
- CVE-2024-38996
- The migrate command will only operate on a git repository and only if the working
  tree is clean.
auth_info:
  mentioned_objects: []
client:
  base_url: https://www.ag-grid.com/example-assets
  headers:
    Accept: application/json
source_metadata: null
