resources:
- name: query_data
  endpoint:
    path: /v1/query-data
    method: POST
    data_selector: data
    params: {}
- name: data_extraction
  endpoint:
    path: /rest-api/api-reference
    method: GET
    data_selector: data
- name: web_elements
  endpoint:
    path: /api/elements
    method: GET
    data_selector: elements
- name: AgentStack
  endpoint:
    path: /integrations/agentstack
    method: GET
- name: Dify
  endpoint:
    path: /integrations/dify
    method: GET
- name: LangChain
  endpoint:
    path: /integrations/langchain
    method: GET
- name: Langflow
  endpoint:
    path: /integrations/langflow
    method: GET
- name: LlamaIndex
  endpoint:
    path: /integrations/llamaindex
    method: GET
- name: MCP
  endpoint:
    path: /integrations/mcp
    method: GET
- name: Zapier
  endpoint:
    path: /integrations/zapier
    method: GET
- name: query_data
  endpoint:
    path: /v1/query-data
    method: POST
    data_selector: data
    params: {}
- name: create_remote_browser_session
  endpoint:
    path: /v1/tetra/sessions
    method: POST
    data_selector: session_id
    params: {}
- name: query_document
  endpoint:
    path: /v1/query-document
    method: POST
    data_selector: data
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: videos
- name: description
  endpoint:
    path: /description
    method: GET
    data_selector: description_text
- name: query_elements
  endpoint:
    path: /query/elements
    method: POST
    data_selector: elements
- name: query_data
  endpoint:
    path: /query/data
    method: POST
    data_selector: data
- name: AQLResponseProxy
  endpoint:
    path: /
    method: GET
    data_selector: query_field
    params: {}
- name: AQLResponseProxy
  endpoint:
    path: /rest-api/api-reference
    method: GET
    data_selector: AQLResponseProxy
    params: {}
- name: AQLResponseProxy
  endpoint:
    path: /rest-api/api-reference
    method: GET
    data_selector: query_elements
    params: {}
- name: AQLResponseProxy
  endpoint:
    path: /python-sdk/api-references/aqlresponse
    method: GET
    data_selector: data
- name: pagination
  endpoint:
    path: /rest-api/api-reference
    method: GET
    data_selector: posts
    params:
      incremental: updated_at
- name: paginate
  endpoint:
    path: /paginate
    method: GET
- name: query_document
  endpoint:
    path: /query_document
    method: GET
- name: use_remote_browser
  endpoint:
    path: /use_remote_browser
    method: GET
- name: queryElements
  endpoint:
    path: /queryElements
    method: POST
    data_selector: data
- name: remote_browser
  endpoint:
    path: /rest-api/api-reference
    method: POST
    data_selector: session
    params: {}
- name: query_data
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: ExtractWebDataTool
  endpoint:
    path: /tools/extract-web-data
    method: GET
- name: ExtractWebDataBrowserTool
  endpoint:
    path: /tools/extract-web-data-browser
    method: GET
- name: GetWebElementBrowserTool
  endpoint:
    path: /tools/get-web-element-browser
    method: GET
- name: close_cookie_dialog
  endpoint:
    path: /examples/js/close-cookie-dialog
    method: GET
- name: close_popup
  endpoint:
    path: /examples/js/close-popup
    method: GET
- name: collect_paginated_bookstore_listing_data
  endpoint:
    path: /examples/js/collect-paginated-ecommerce-data
    method: GET
- name: collect_paginated_data_from_hackernews
  endpoint:
    path: /examples/js/collect-paginated-news-headlines
    method: GET
- name: collect_pricing_data
  endpoint:
    path: /examples/js/collect-pricing-data
    method: GET
- name: get_single_element_by_prompt
  endpoint:
    path: /examples/js/get-by-prompt
    method: GET
- name: compare_product_price
  endpoint:
    path: /examples/js/compare-product-prices
    method: GET
- name: run_script_in_headless_browser
  endpoint:
    path: /examples/js/run-script-in-headless-browser
    method: GET
- name: save_and_load_authenticated_state
  endpoint:
    path: /examples/js/save-and-load-authenticated-session
    method: GET
- name: submit_form
  endpoint:
    path: /examples/js/submit-form
    method: GET
- name: use_remote_browser
  endpoint:
    path: /examples/js/use-remote-browser
    method: GET
- name: wait_for_page_to_load
  endpoint:
    path: /examples/js/wait-for-entire-page-load
    method: GET
- name: products
  endpoint:
    path: /api-references/agentql-page#querydata
    method: POST
    data_selector: products
    params: {}
- name: search_elements
  endpoint:
    path: /api-references/agentql-page#queryelements
    method: POST
    data_selector: search_input_field, search_button
    params: {}
- name: html_data
  endpoint:
    path: /scraping/getting-data-from-html-api
    method: GET
- name: pdf_data
  endpoint:
    path: /scraping/pdfs-images-data-extraction
    method: GET
- name: scraping_jobs
  endpoint:
    path: /scraping/scheduling
    method: GET
- name: query_data
  endpoint:
    path: /scraping/scraping-data-sdk
    method: GET
- name: query_data
  endpoint:
    path: /v1/query-data
    method: POST
    data_selector: response
    params: {}
- name: products
  endpoint:
    path: /scraping/query_data
    method: GET
    data_selector: product
    params: {}
- name: extract_data
  endpoint:
    path: /extract/data
    method: POST
    data_selector: results
- name: scraping_workflow
  endpoint:
    path: /scheduling
    method: GET
    data_selector: workflows
    params: {}
- name: query_element
  endpoint:
    path: /automation/query_element
    method: GET
    data_selector: elements
    params: {}
- name: get_by_prompt
  endpoint:
    path: /automation/get_by_prompt
    method: GET
    data_selector: element
    params: {}
- name: query_elements
  endpoint:
    path: /query_elements
    method: POST
    data_selector: elements
    params: {}
- name: get_by_prompt
  endpoint:
    path: /automation/get_by_prompt
    method: GET
    data_selector: element
    params: {}
- name: form_submission
  endpoint:
    path: /submit_form
    method: POST
    data_selector: response
    params: {}
- name: get_highest_resolution_image
  endpoint:
    path: /rest-api/api-reference
    method: GET
    data_selector: image_url
- name: products
  endpoint:
    path: /shop/
    method: GET
    data_selector: products[]
- name: infinite_scroll
  endpoint:
    path: /demo/full-page/
    method: GET
    data_selector: post_headers
notes:
- Make sure to replace $AGENTQL_API_KEY with your actual API key.
- AgentQL's SDK is integrated with Playwright, which allows you to programmatically
  interact with web sites.
- You need an API key to make AgentQL queries.
- You must define either a `query` or a `prompt` to use AgentQL.
- All requests to the AgentQL API must include an X-API-Key header with your API key.
- Uses API key for authentication
- 'Effective date: 17th of July, 2025'
- Default AgentQL SDK implementation is built on top of Playwright and uses all of
  its functionality for interacting with browser, page and elements on the page.
- Use the AgentQL Chrome Extension in parallel with the AgentQL SDK to test different
  query formats and keywords directly with the webpage.
- AgentQL requires an API key for access.
- The default version of AgentQL Python SDK uses Playwright as a web driver, so Playwright
  dependencies need to be installed.
- Default is True for wait_for_network_idle.
- Defaults to False for include_hidden.
- Defaults to fast mode for ResponseMode.
- AQLResponseProxy allows for intuitive access to web elements using dot notation.
- AQLResponseProxy is a metadata that allows for intuitive access to web elements
  using dot notation.
- Collect data from the first 3 pages using the query
- Remote browser sessions allow you to run browser automation on remote infrastructure
  while maintaining the familiar AgentQL API.
- Set the AGENTQL_API_KEY environment variable with your API key
- 'Configure the API key using `configure({ apiKey: process.env.AGENTQL_API_KEY });`'
- Configure the API key using process.env.AGENTQL_API_KEY
- The AQLResponseProxy class allows intuitive access to web elements using dot notation.
- Session-based API is deprecated. They will be removed in version 1.1.0. For new
  Page-based API, users can refer to [this guide](/getting-started/first-steps).
- Users can now search for keywords in AgentQL Documentation Website.
- This release introduces some breaking changes.
- Please refer to 'Breaking Changes' section for latest information.
- ExtractWebDataTool calls a REST API.
- ExtractWebDataBrowserTool and GetWebElementBrowserTool require a Playwright browser.
- Requires setup of OPENAI_API_KEY and AGENTQL_API_KEY as environment variables
- MCP is a new technology! If your agent complains about loading content from the
  web instead of using AgentQL, try adding 'use tools' or 'use agentql tool' in your
  prompt.
- 'Collect your AgentQL API key here: https://dev.agentql.com/api-keys.'
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- AgentQL is useful for data scraping and extraction, web automation, and testing.
- Queries can be written in plain English.
- 'Experimental feature with limitations: 2 workflows per user, 5 URLs per workflow,
  10 runs per workflow.'
- AgentQL's SDK is integrated with Playwright, which allows programmatic interaction
  with web sites.
- Automating form submission allows you to unlock powerful workflows with AgentQL.
- Playwright automatically waits for an element to be actionable before performing
  the action.
- Many websites have anti-bot systems in place to prevent automated access.
- To avoid detection by these systems, you can use various techniques to make your
  bot appear more like a human user.
- Rotating headers is crucial to prevent detection and blocking in web scraping.
- Simulates requests from different users to avoid detection.
- AgentQL Stealth Mode helps to bypass bot detection measures by simulating real user
  browser environment.
- Fast Mode is enabled by default.
- Fast Mode sacrifices some depth of analysis for speed.
- Fast Mode is enabled by default, but you can switch to Standard Mode for a more
  comprehensive response.
- Standard Mode is ideal when accuracy and detailed extraction are critical or when
  interacting with complex web sites.
- Connect to an open browser tab via WebSocket URL
- AgentQL provides powerful capabilities for allocating a remote browser to simplify
  browser automation.
- Automating the login process allows access to protected content.
- If you have an automation that requires logging into a site, you can save time by
  securely caching and passing your credentials.
- Uses OAuth2 with refresh token â€” requires setup of connected app in AgentQL
- AgentQL queries can slow down significantly as the amount of content on a particular
  page gets longer.
- It's generally a good idea to set a cap on the amount of additional pages to load.
- The `paginate` function only supports web pages that use numerical pagination or
  provide links/buttons to navigate to the next page. It doesn't support other forms
  of pagination, like alphabetically paginated web pages.
- If your script only retrieves data from the webpage without any automation logic,
  you can use the AgentQL Scheduler or Rest API to run your job on a regular basis
  or on demand.
- Make sure to secure your endpoint! Consider adding authentication or only allowing
  private network access if you only use the endpoint internally.
- AgentQL version 0.5.0 with Python 3.9 on Windows 10.
- AgentQL supports providing context to query for formatting instructions.
errors:
- 'APIKeyError: If API key is not set or invalid'
- 'Exception: If session creation fails'
- 'APIKeyError: If API key isn''t set or invalid'
- 'Error: If session creation fails'
- 'Invalid API key: Check if the API key is correct.'
- 'QUERY_TIMEOUT: Ensure the page is fully loaded before querying.'
auth_info:
  mentioned_objects:
  - AQLResponseProxy
  - Playwright Locator
client:
  base_url: https://www.agentql.com
  auth:
    type: apikey
source_metadata: null
