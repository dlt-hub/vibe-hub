resources:
- name: blocking
  endpoint:
    path: /api/dns/blocking
    method: GET
    data_selector: blocking
- name: domains
  endpoint:
    path: /api/domains
    method: GET
    data_selector: error
    params: {}
- name: groups
  endpoint:
    path: /api/groups
    method: GET
    data_selector: groups
- name: installation_script
  endpoint:
    path: /automated/install/
    method: GET
- name: Updating a regular installation
  endpoint:
    path: /main/update/#updating-a-regular-installation
    method: GET
- name: Updating Docker
  endpoint:
    path: /main/update/#updating-docker
    method: GET
- name: core_script
  endpoint:
    path: /main/pihole-command/#pi-hole-core
    method: GET
    data_selector: commands
    params: {}
- name: allowlisting_denylisting_regex
  endpoint:
    path: /main/pihole-command/#allowlisting-denylisting-and-regex
    method: GET
    data_selector: commands
    params: {}
- name: debugger
  endpoint:
    path: /main/pihole-command/#debugger
    method: GET
    data_selector: commands
    params: {}
- name: log_flush
  endpoint:
    path: /main/pihole-command/#log-flush
    method: GET
    data_selector: commands
    params: {}
- name: repair
  endpoint:
    path: /main/pihole-command/#repair
    method: GET
    data_selector: commands
    params: {}
- name: tail
  endpoint:
    path: /main/pihole-command/#tail
    method: GET
    data_selector: commands
    params: {}
- name: gravity
  endpoint:
    path: /main/pihole-command/#gravity
    method: GET
    data_selector: commands
    params: {}
- name: logging
  endpoint:
    path: /main/pihole-command/#logging
    method: GET
    data_selector: commands
    params: {}
- name: query
  endpoint:
    path: /main/pihole-command/#query
    method: GET
    data_selector: commands
    params: {}
- name: update
  endpoint:
    path: /main/pihole-command/#update
    method: GET
    data_selector: commands
    params: {}
- name: version
  endpoint:
    path: /main/pihole-command/#version
    method: GET
    data_selector: commands
    params: {}
- name: uninstall
  endpoint:
    path: /main/pihole-command/#uninstall
    method: GET
    data_selector: commands
    params: {}
- name: status
  endpoint:
    path: /main/pihole-command/#status
    method: GET
    data_selector: commands
    params: {}
- name: enable_disable
  endpoint:
    path: /main/pihole-command/#enable-disable
    method: GET
    data_selector: commands
    params: {}
- name: checkout
  endpoint:
    path: /main/pihole-command/#checkout
    method: GET
    data_selector: commands
    params: {}
- name: gravity
  endpoint:
    path: /opt/pihole/gravity.sh
    method: GET
- name: logging
  endpoint:
    path: /usr/local/bin/pihole
    method: GET
- name: query
  endpoint:
    path: /usr/local/bin/pihole
    method: GET
- name: update
  endpoint:
    path: /opt/pihole/update.sh
    method: GET
- name: version
  endpoint:
    path: /opt/pihole/version.sh
    method: GET
- name: uninstall
  endpoint:
    path: /etc/.pihole/automated install/uninstall.sh
    method: GET
- name: status
  endpoint:
    path: /usr/local/bin/pihole
    method: GET
- name: enable_disable
  endpoint:
    path: /usr/local/bin/pihole
    method: GET
- name: checkout
  endpoint:
    path: /opt/pihole/piholeCheckout.sh
    method: GET
- name: password
  endpoint:
    path: /usr/local/bin/pihole
    method: GET
- name: reload_lists
  endpoint:
    path: /usr/local/bin/pihole
    method: GET
- name: reload_dns
  endpoint:
    path: /usr/local/bin/pihole
    method: GET
- name: query_storage
  endpoint:
    path: /queries
    method: GET
    data_selector: records
- name: counters
  endpoint:
    path: /counters
    method: GET
    data_selector: records
- name: query_types
  endpoint:
    path: /database/query/types
    method: GET
    data_selector: types
    params: {}
- name: status_types
  endpoint:
    path: /database/query/status
    method: GET
    data_selector: statuses
    params: {}
- name: reply_types
  endpoint:
    path: /database/query/reply
    method: GET
    data_selector: replies
    params: {}
- name: dnssec_status
  endpoint:
    path: /database/query/dnssec
    method: GET
    data_selector: dnssec
    params: {}
- name: domainlist
  endpoint:
    path: /database/domainlist
    method: GET
    data_selector: domains
    params: {}
- name: adlist
  endpoint:
    path: /database/adlist
    method: GET
    data_selector: lists
    params: {}
- name: gravity
  endpoint:
    path: /database/gravity
    method: GET
    data_selector: domains
    params: {}
- name: client
  endpoint:
    path: /database/client
    method: GET
    data_selector: clients
    params: {}
- name: info_version
  endpoint:
    path: /api/info/version
    method: GET
- name: dns_blocking
  endpoint:
    path: /api/dns/blocking
    method: GET
- name: configuration
  endpoint:
    path: /ftldns/configfile/
    method: GET
    data_selector: options
- name: dns_cache
  endpoint:
    path: /dns-cache
    method: GET
    data_selector: cache_metrics
    params: {}
- name: privacy_levels
  endpoint:
    path: /ftldns/privacylevels
    method: GET
    data_selector: levels
    params: {}
- name: cache_content
  endpoint:
    path: /ftldns/cache_dump
    method: GET
    data_selector: cache
    params: {}
- name: server_statistics
  endpoint:
    path: /ftldns/server_statistics
    method: GET
    data_selector: server_stats
    params: {}
- name: domainlist
  endpoint:
    path: /domainlist
    method: GET
    data_selector: domains
    params: {}
- name: domainlist_by_group
  endpoint:
    path: /domainlist_by_group
    method: GET
    data_selector: groups
    params: {}
- name: FTL Configuration
  endpoint:
    path: /docker/configuration/FTL
    method: GET
    data_selector: settings
- name: build_script
  endpoint:
    path: /docker/build-image/
    method: GET
    data_selector: script
    params: {}
- name: Distribute Pi-hole as DNS server via DHCP
  endpoint:
    path: /routers/fritzbox/#distribute-pi-hole-as-dns-server-via-dhcp
    method: GET
- name: Pi-hole as upstream DNS server for your Fritz!Box
  endpoint:
    path: /routers/fritzbox/#pi-hole-as-upstream-dns-server-for-your-fritzbox
    method: GET
- name: Using Pi-hole within the Guest Network
  endpoint:
    path: /routers/fritzbox/#using-pi-hole-within-the-guest-network
    method: GET
- name: Hostnames instead of IP addresses in Pi-hole's web interface - Conditional
    forwarding
  endpoint:
    path: /routers/fritzbox/#hostnames-instead-of-ip-addresses-in-pi-holes-web-interface-conditional-forwarding
    method: GET
- name: Distribute Pi-hole as DNS server via IPv6
  endpoint:
    path: /routers/fritzbox/#distribute-pi-hole-as-dns-server-via-ipv6
    method: GET
- name: 'Optional: Increasing the priority of DNS requests'
  endpoint:
    path: /routers/fritzbox/#optional-increasing-the-priority-of-dns-requests
    method: GET
- name: conditional_forwarding
  endpoint:
    path: /routers/fritzbox-de/#hostnamen-in-pi-hole-statt-ip-addressen-conditional-forwarding
    method: GET
    data_selector: records
    params:
      local_network: 192.168.178.0/24
      dhcp_server_ip: 192.168.178.1
      local_domain: fritz.box
- name: IPv4 configuration
  endpoint:
    path: /routers/nokia-g240wb/#ipv4-configuration
    method: GET
    data_selector: records
    params: {}
- name: IPv6 configuration
  endpoint:
    path: /routers/nokia-g240wb/#ipv6-configuration
    method: GET
    data_selector: records
    params: {}
- name: IPv4 Address
  endpoint:
    path: /routers/opnsense/#grab-your-ipv4-and-ipv6-address-from-your-pi-hole
    method: GET
    data_selector: records
- name: IPv6 Address
  endpoint:
    path: /routers/opnsense/#grab-your-ipv4-and-ipv6-address-from-your-pi-hole
    method: GET
    data_selector: records
- name: Ubiquiti USG
  endpoint:
    path: /routers/ubiquiti-usg/
    method: GET
- name: DHCP
  endpoint:
    path: /routers/ubiquiti-usg/#method-1-distribute-pi-hole-as-dns-server-via-dhcp
    method: GET
- name: DNS Forwarding
  endpoint:
    path: /routers/ubiquiti-usg/#method-2-using-your-pi-hole-as-a-resolve-for-your-usg
    method: GET
notes:
- Pi-hole is very lightweight and does not require much processing power
- Pi-hole needs a static IP address to properly function (a DHCP reservation is just
  fine)
- Piping to `bash` is a controversial topic, as it prevents you from reading code
  that is about to run.
- Pi-hole v6 uses a new API for authentication.
- To avoid entering the password every time on CLI, Pi-hole allows users which are
  members of the 'pihole' group to authenticate without manually entering the password.
- FTL DNS uses SQLite3 for long-term storage of query data.
- Database updates can be controlled by the parameter `database.DBinterval`.
- Uses session-based authentication — requires sending SID for API calls
- Pi-hole creates a self-signed certificate during installation.
- The certificate is only valid for the domain that you had configured during certificate
  creation.
- By default, FTL binds the wildcard address.
- This setting accepts DNS queries only from hosts whose address is on a local subnet.
- Respond only to queries arriving on the specified interface.
- This truly allows any traffic to be replied to and is a dangerous thing to do.
- The DNS cache is part of the embedded dnsmasq server.
- Cache size cannot be reduced below 150 when DNSSEC is enabled.
- Users can configure the size of the resolver's name cache. The default is 150 names.
- Setting the cache size to zero disables caching.
- Using privacy levels you can specify which level of detail you want to see in your
  Pi-hole statistics.
- The privacy level may be changed at any time without having to restart the DNS resolver.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Cache size greater than 10000 may cause performance issues, and is unlikely to be
  useful.
- This warning is expected during debug log generation as Pi-hole is trying to request
  a DHCP lease on all available interfaces.
- Serving files outside of the webserver's home directory (admin/) is disabled by
  default for security reasons. It can be enabled by setting webserver.serve_all to
  true.
- Do not run `pihole -up` or `pihole checkout` after building your own binary.
- Real-time signals are not guaranteed to have the same number on all operating systems.
- The blocking cache is cleared with real-time signal 0.
- Cache size is 10000 (Pi-hole's default value).
- Queries answered locally can both be from local configuration, HOSTS files, DHCP
  leases, or from the local cache.
- Pi-hole has its own embedded package dumping.
- 'You can just add the two lines: dumpfile=/etc/pihole/dump.pcap and dumpmask=0x00ff
  to record everything.'
- When running Pi-hole in a Docker container, perform all steps inside the Docker
  container.
- You will need to add the SYS_PTRACE capability to allow gdb to attach to the pihole-FTL
  process inside the container.
- Make sure to terminate any existing FTL process before starting FTL inside valgrind.
- If you are running Pi-hole in a Docker container, you will need to perform all the
  steps described here inside the Docker container.
- Group Default (group_id 0) is special as it is automatically assigned to domains
  and clients not being a member of other groups.
- The domainlist can be modified with SQL commands.
- FTL DNS uses a specific hierarchy to ensure regex filters work as you expect them
  to. Allowlisting always has priority over denylisting.
- FTL DNS reads in regular expression filters from the two regex database views.
- Required if you are using Pi-hole as your DHCP server, else not needed
- Required if you are using Pi-hole as your NTP client to be able to set the host's
  system time
- All FTL settings that are set via environment variables effectively become read-only.
- The web interface password can be set using the FTLCONF_webserver_api_password environment
  variable or using the WEBPASSWORD_FILE environment variable.
- In order to build the image locally, you will first need a copy of the repository
  on your computer.
- Docker's bridge network mode is default and recommended as a more secure setting
  for containers because docker is all about isolation.
- Avoid using the built-in default docker bridge network.
- Be careful when you setting WAN DNS server to Pi-hole and enable conditional forwarding
- This can cause DNS loop between router and Pi-hole for unknown hostnames.
- The Fritz!Box can be Pi-hole's upstream DNS server, as long Pi-hole itself is not
  the upstream server of the Fritz!Box.
- If only Pi-hole is used as upstream DNS server for Fritz!Box, individual clients
  will not appear in Pi-hole's dashboard.
- Some devices or applications use hard-coded DNS servers and may not work as expected
  if they can't reach the desired DNS server.
- Es gibt nicht nur die eine Art, ein funktionierendes DNS-System aufzusetzen.
- Es ist empfehlenswert 'DNSv6-Server auch über Router Advertisement bekanntgeben
  (RFC 5006)' auszuwählen.
- Einige Geräte oder Programme nutzen fest hinterlegte DNS Server und funktionieren
  ggfs. nicht mehr ordnungsgemäß falls sie diesen DNS Server nicht erreichen können.
- This guide is IPv4 and IPv6 compatible, but it is not mandatory to use IPv6.
- This guide was developed using OPNsense 25.1.1.
- 'Beware: This tutorial does not explain on how to block DoH or DoT.'
- Recommended to choose one method for DNS configuration, not both.
- Using USG's IP address as an upstream resolver for Pi-hole may cause a resolver
  loop.
errors:
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Not Found'
- '429: Too Many Requests'
- '500: Server Errors'
- No errors explicitly mentioned.
- '401 - Unauthorized: Verify session ID or password'
- '400 Bad Request: JSON data in the request is not formatted correctly or required
  fields are missing'
- '401 Unauthorized: Password provided is incorrect'
- '500 Internal Server Error: Something went wrong on the server side'
- '429 Too Many Requests: Exceeded login attempts per second'
- 'CACHE_SIZE_TOO_SMALL: Increase the cache size to avoid evictions.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- DHCP packet received on IF_NAME which has no address
- no address range available for DHCP request with subnet selector SUBNET
auth_info:
  mentioned_objects: []
client:
  base_url: https://docs.pi-hole.net/api/
  auth:
    type: oauth2
source_metadata: null
