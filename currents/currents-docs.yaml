resources:
- name: currents_run
  endpoint:
    path: /run
    method: POST
- name: currents_run
  endpoint:
    path: /api/run
    method: POST
- name: cypress_run
  endpoint:
    path: /cypress/run
    method: POST
    data_selector: runId
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: runs
  endpoint:
    path: /runs
    method: GET
    data_selector: records
- name: instances
  endpoint:
    path: /instances
    method: GET
    data_selector: records
- name: spec_files
  endpoint:
    path: /spec_files
    method: GET
    data_selector: records
- name: tests
  endpoint:
    path: /tests
    method: GET
    data_selector: records
- name: test_results
  endpoint:
    path: /test_results
    method: GET
    data_selector: records
- name: cypress_cloud
  endpoint:
    path: /resources/reporters/cypress-cloud
    method: GET
    data_selector: data
    params: {}
- name: currents_cli
  endpoint:
    path: /resources/reporters/currents-cli
    method: GET
    data_selector: data
    params: {}
- name: cypress_run
  endpoint:
    path: /currents/cypress/run
    method: POST
    data_selector: run
    params:
      ci-build-id: hello-currents
- name: project
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: run
  endpoint:
    path: /api/runs
    method: GET
    data_selector: data
    params: {}
- name: cypress-cloud
  endpoint:
    path: /resources/reporters/cypress-cloud
    method: GET
- name: '@currents/cli'
  endpoint:
    path: /resources/reporters/currents-cli
    method: GET
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: runs
  endpoint:
    path: /api/runs
    method: GET
    data_selector: data
    params: {}
- name: detox_tests
  endpoint:
    path: /detox/tests
    method: POST
    data_selector: results
- name: reporter_configuration
  endpoint:
    path: /resources/reporters/currents-jest#configuration
    method: GET
- name: currents_upload
  endpoint:
    path: /resources/reporters/currents-cmd/currents-upload
    method: POST
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
- name: runs
  endpoint:
    path: /api/runs
    method: GET
    data_selector: data
- name: record_key
  endpoint:
    path: /record_keys
    method: GET
    data_selector: keys
    params: {}
- name: Record Key
  endpoint:
    path: /guides/record-key
    method: GET
    data_selector: records
    params: {}
- name: ci_build_id
  endpoint:
    path: /guides/ci-build-id
    method: GET
    data_selector: results
    params: {}
- name: CI Build ID
  endpoint:
    path: /guides/ci-build-id
    method: GET
    data_selector: results
    params: {}
- name: projects
  endpoint:
    path: /resources/api/api-resources/projects
    method: GET
- name: runs
  endpoint:
    path: /resources/api/api-resources/runs
    method: GET
- name: groups
  endpoint:
    path: /resources/api/api-resources/groups
    method: GET
- name: spec_files
  endpoint:
    path: /resources/api/api-resources/spec-files
    method: GET
- name: tests
  endpoint:
    path: /resources/api/api-resources/tests
    method: GET
- name: project
  endpoint:
    path: /projects
    method: GET
- name: run
  endpoint:
    path: /runs
    method: GET
- name: test
  endpoint:
    path: /tests
    method: GET
- name: sharding
  endpoint:
    path: /guides/parallelization-guide/playwright-sharding
    method: GET
    data_selector: reporting
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
- name: runs
  endpoint:
    path: /api/runs
    method: GET
    data_selector: data
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: runs
  endpoint:
    path: /api/runs
    method: GET
    data_selector: data
    params: {}
- name: spec_files
  endpoint:
    path: /api/spec_files
    method: GET
    data_selector: data
    params: {}
- name: code_coverage
  endpoint:
    path: /api/code_coverage
    method: GET
    data_selector: coverage
- name: coverage_reports
  endpoint:
    path: /api/coverage/reports
    method: POST
    data_selector: report
    params: {}
- name: coverage_report
  endpoint:
    path: /.nyc_output/out.json
    method: POST
    data_selector: report
    params: {}
- name: coverage_report
  endpoint:
    path: /coverage
    method: POST
    data_selector: report
    params: {}
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: runs
  endpoint:
    path: /api/runs
    method: GET
    data_selector: data
    params: {}
- name: currents_actions
  endpoint:
    path: /currents/actions
    method: GET
    data_selector: data
    params: {}
- name: actions
  endpoint:
    path: /actions
    method: GET
    data_selector: actions
- name: Visual Comparison
  endpoint:
    path: /api/visual-comparison
    method: GET
    data_selector: results
- name: notify_slack_user
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: notify_slack_team
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: notify_slack_user
  endpoint:
    path: /notify/slack
    method: POST
    data_selector: notification
    params:
      type: notify:slack
      description: user:U01RWNBFGER
- name: notify_slack_team
  endpoint:
    path: /notify/slack
    method: POST
    data_selector: notification
    params:
      type: notify:slack
      description: team:T01S60385HA
- name: run
  endpoint:
    path: /api/runs
    method: GET
    data_selector: runs
- name: project
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
- name: currents-get-projects
  endpoint:
    path: /projects
    method: GET
- name: currents-get-run-details
  endpoint:
    path: /runs/{runId}
    method: GET
- name: currents-get-spec-instances
  endpoint:
    path: /spec-instances
    method: GET
- name: currents-get-spec-files-performance
  endpoint:
    path: /spec-files/performance
    method: GET
- name: currents-get-tests-performance
  endpoint:
    path: /tests/performance
    method: GET
- name: currents-get-tests-signatures
  endpoint:
    path: /tests/signatures
    method: GET
- name: currents-get-test-results
  endpoint:
    path: /test-results
    method: GET
- name: currents-get-projects
  endpoint:
    path: /dashboard/projects
    method: GET
    data_selector: projects
- name: currents-get-run-details
  endpoint:
    path: /resources/api/api-resources/runs
    method: GET
    data_selector: runDetails
- name: currents-get-spec-instances
  endpoint:
    path: /dashboard/tests/spec-file-status
    method: GET
    data_selector: specInstances
- name: currents-get-spec-files-performance
  endpoint:
    path: /resources/api/api-resources/spec-files
    method: GET
    data_selector: specFilesPerformance
- name: currents-get-tests-performance
  endpoint:
    path: /resources/api/api-resources/tests
    method: GET
    data_selector: testsPerformance
- name: currents-get-tests-signatures
  endpoint:
    path: /resources/api/api-resources/test-signature
    method: GET
    data_selector: testsSignatures
- name: currents-get-test-results
  endpoint:
    path: /resources/api/api-resources/test-results
    method: GET
    data_selector: testResults
- name: project_settings
  endpoint:
    path: /api/v1/project/settings
    method: GET
    data_selector: records
    params: {}
- name: run_details
  endpoint:
    path: /api/run_details
    method: GET
    data_selector: data
- name: run_status
  endpoint:
    path: /api/runs/status
    method: GET
    data_selector: runs
    params: {}
- name: runs
  endpoint:
    path: /v1/runs/:runId/cancel
    method: PUT
- name: commit_information
  endpoint:
    path: /dashboard/runs/commit-information
    method: GET
    data_selector: commit_info
    params: {}
- name: cypress_tests
  endpoint:
    path: /cypress/run
    method: POST
- name: cancel_run
  endpoint:
    path: /cancel/run
    method: POST
- name: runs
  endpoint:
    path: /v1/runs/:runId/cancel
    method: PUT
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
- name: runs
  endpoint:
    path: /api/runs
    method: GET
    data_selector: data
- name: instances
  endpoint:
    path: /api/instances
    method: GET
    data_selector: data
- name: spec_files
  endpoint:
    path: /api/spec_files
    method: GET
    data_selector: data
- name: tests
  endpoint:
    path: /api/tests
    method: GET
    data_selector: data
- name: test_signature
  endpoint:
    path: /api/test_signature
    method: GET
    data_selector: data
- name: test_results
  endpoint:
    path: /api/test_results
    method: GET
    data_selector: data
- name: Run Progress
  endpoint:
    path: /dashboard/runs/run-progress
    method: GET
- name: run_progress
  endpoint:
    path: /dashboard/runs/run-progress
    method: GET
- name: spec_files
  endpoint:
    path: /api/spec_files
    method: GET
    data_selector: records
- name: test_status
  endpoint:
    path: /api/test_status
    method: GET
    data_selector: records
- name: test_status
  endpoint:
    path: /api/test/status
    method: GET
    data_selector: status
    params: {}
- name: test_attempt_status
  endpoint:
    path: /api/test/attempt/status
    method: GET
    data_selector: attempts
    params: {}
- name: expected_status
  endpoint:
    path: /api/test/expected/status
    method: GET
    data_selector: expected
    params: {}
- name: test_outcome
  endpoint:
    path: /api/test/outcome
    method: GET
    data_selector: outcome
    params: {}
- name: test_history
  endpoint:
    path: /api/tests/history
    method: GET
- name: Test Explorer Metrics
  endpoint:
    path: /api/test-explorer/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: test_explorer_metrics
  endpoint:
    path: /api/test-explorer/metrics
    method: GET
- name: automated_reports
  endpoint:
    path: /automated-reports
    method: GET
    data_selector: reports
    params: {}
- name: Automated Reports
  endpoint:
    path: /automated-reports
    method: POST
    data_selector: reports
    params: {}
- name: Run Performance
  endpoint:
    path: /reports/run_performance
    method: GET
- name: Spec Files Performance
  endpoint:
    path: /reports/spec_files_performance
    method: GET
- name: Test Performance
  endpoint:
    path: /reports/test_performance
    method: GET
- name: Trends
  endpoint:
    path: /reports/trends
    method: GET
- name: spec_files_performance
  endpoint:
    path: /dashboard/spec-files/performance
    method: GET
    data_selector: performance_data
- name: test_performance
  endpoint:
    path: /dashboard/tests/performance
    method: GET
    data_selector: performance_data
- name: trends
  endpoint:
    path: /dashboard/trends
    method: GET
    data_selector: trends_data
- name: Run Status
  endpoint:
    path: /insights/run-status
    method: GET
    data_selector: overall_runs
    params: {}
- name: Run Duration
  endpoint:
    path: /insights/run-duration
    method: GET
    data_selector: average_duration
    params: {}
- name: Run Completion
  endpoint:
    path: /insights/run-completion
    method: GET
    data_selector: completion_distribution
    params: {}
- name: Test Suite Size
  endpoint:
    path: /insights/test-suite-size
    method: GET
    data_selector: suite_size
    params: {}
- name: Run Status
  endpoint:
    path: /api/run_status
    method: GET
    data_selector: runs
    params: {}
- name: Run Duration
  endpoint:
    path: /api/run_duration
    method: GET
    data_selector: durations
    params: {}
- name: Run Completion
  endpoint:
    path: /api/run_completion
    method: GET
    data_selector: completions
    params: {}
- name: Test Suite Size
  endpoint:
    path: /api/test_suite_size
    method: GET
    data_selector: sizes
    params: {}
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: runs
  endpoint:
    path: /api/runs
    method: GET
    data_selector: data
    params: {}
- name: instances
  endpoint:
    path: /api/instances
    method: GET
    data_selector: data
    params: {}
- name: spec_files
  endpoint:
    path: /api/spec_files
    method: GET
    data_selector: data
    params: {}
- name: tests
  endpoint:
    path: /api/tests
    method: GET
    data_selector: data
    params: {}
- name: test_results
  endpoint:
    path: /api/test_results
    method: GET
    data_selector: data
    params: {}
- name: saml_response_attributes
  endpoint:
    path: /saml_response_attributes
    method: GET
    data_selector: attributes
    params: {}
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: resources
- name: user
  endpoint:
    path: /scim/v2/Users/{id}
    method: GET
    data_selector: resource
- name: create_user
  endpoint:
    path: /scim/v2/Users
    method: POST
    data_selector: resource
- name: update_user
  endpoint:
    path: /scim/v2/Users/{id}
    method: PUT
    data_selector: resource
- name: deactivate_user
  endpoint:
    path: /scim/v2/Users/{id}
    method: DELETE
    data_selector: resource
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
- name: user
  endpoint:
    path: /scim/v2/Users/{id}
    method: GET
- name: create_user
  endpoint:
    path: /scim/v2/Users
    method: POST
- name: update_user
  endpoint:
    path: /scim/v2/Users/{id}
    method: PUT
- name: deactivate_user
  endpoint:
    path: /scim/v2/Users/{id}
    method: DELETE
- name: projects
  endpoint:
    path: /resources/api/api-resources/projects
    method: GET
    data_selector: records
    params: {}
- name: runs
  endpoint:
    path: /resources/api/api-resources/runs
    method: GET
    data_selector: records
    params: {}
- name: instances
  endpoint:
    path: /resources/api/api-resources/instances
    method: GET
    data_selector: records
    params: {}
- name: spec_files
  endpoint:
    path: /resources/api/api-resources/spec-files
    method: GET
    data_selector: records
    params: {}
- name: tests
  endpoint:
    path: /resources/api/api-resources/tests
    method: GET
    data_selector: records
    params: {}
- name: test_signature
  endpoint:
    path: /resources/api/api-resources/test-signature
    method: GET
    data_selector: records
    params: {}
- name: test_results
  endpoint:
    path: /resources/api/api-resources/test-results
    method: GET
    data_selector: records
    params: {}
- name: billing_emails
  endpoint:
    path: /organization/billing-emails
    method: POST
    data_selector: recipients
- name: usage_information
  endpoint:
    path: /organization/usage
    method: GET
    data_selector: usage_records
- name: extra_usage_plans
  endpoint:
    path: /organization/extra-usage-plans
    method: GET
    data_selector: extra_usage
- name: project
  endpoint:
    path: /
    method: POST
    data_selector: projectId
    params: {}
- name: currents_config
  endpoint:
    path: /currents.config.js
    method: GET
    data_selector: projectId, recordKey, cloudServiceUrl
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: results
- name: spawn
  endpoint:
    path: /spawn
    method: POST
    data_selector: void
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: records
- name: runs
  endpoint:
    path: /api/runs
    method: GET
    data_selector: records
- name: playwright
  endpoint:
    path: /resources/reporters/currents-playwright
    method: GET
    data_selector: examples
    params: {}
- name: report
  endpoint:
    path: /report
    method: POST
    data_selector: results
    params: {}
- name: report
  endpoint:
    path: /report
    method: POST
    data_selector: results
    params: {}
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: runs
  endpoint:
    path: /api/runs
    method: GET
    data_selector: data
    params: {}
- name: report
  endpoint:
    path: /upload
    method: POST
    data_selector: report
    params: {}
- name: results
  endpoint:
    path: /results
    method: POST
    data_selector: results
- name: test_results
  endpoint:
    path: /test_results
    method: GET
    data_selector: results
- name: Test cases with same title
  endpoint:
    path: src/same-title.test.ts
    method: UNKNOWN
    data_selector: UNKNOWN
    params: {}
- name: commit_status_checks
  endpoint:
    path: /commit/status
    method: POST
- name: pull_request_comments
  endpoint:
    path: /pulls/comments
    method: POST
- name: GitHub App
  endpoint:
    path: /resources/integrations/github/github-app
    method: GET
- name: GitHub OAuth
  endpoint:
    path: /resources/integrations/github/github-oauth
    method: GET
- name: projects
  endpoint:
    path: /api/v4/projects
    method: GET
    data_selector: projects
    params: {}
- name: projects
  endpoint:
    path: /api/v4/projects
    method: GET
    data_selector: projects
    params: {}
- name: issues
  endpoint:
    path: /api/v4/issues
    method: GET
    data_selector: issues
    params: {}
- name: commit_status
  endpoint:
    path: /api/v4/projects/:id/repository/commits/:sha/statuses
    method: POST
- name: merge_request_comments
  endpoint:
    path: /api/v4/projects/:id/merge_requests/:merge_request_iid/notes
    method: POST
- name: slack_integration
  endpoint:
    path: /services/XXX/YYY/ZZZ
    method: POST
    data_selector: results
    params: {}
- name: slack_integration
  endpoint:
    path: /services/XXX/YYY/ZZZ
    method: POST
- name: Microsoft Teams Integration
  endpoint:
    path: /integrations/microsoft-teams
    method: POST
    data_selector: integration_results
- name: webhook_event
  endpoint:
    path: /webhook/currents.dev
    method: POST
    data_selector: event
    params: {}
- name: integration
  endpoint:
    path: /api/integration/microsoft-teams
    method: POST
    data_selector: results
    params: {}
- name: webhook_events
  endpoint:
    path: /webhook/currents.dev
    method: POST
    data_selector: event
- name: Build Status Update
  endpoint:
    path: /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/build-status
    method: POST
    data_selector: buildStatus
    params: {}
- name: build_status
  endpoint:
    path: /update/build/status
    method: POST
    data_selector: status
    params:
      repository_url: repository URL
      username: your username
      app_password: Bitbucket App Password with repo:write access
      build_name: Build Name (Optional)
- name: projects
  endpoint:
    path: /api/projects
    method: GET
- name: issues
  endpoint:
    path: /api/issues
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Create Issues
  endpoint:
    path: /create-issue
    method: POST
    data_selector: issue
    params: {}
- name: Link Issues
  endpoint:
    path: /link-issue
    method: POST
    data_selector: link
    params: {}
- name: projects
  endpoint:
    path: /resources/api/api-resources/projects
    method: GET
- name: runs
  endpoint:
    path: /resources/api/api-resources/runs
    method: GET
- name: instances
  endpoint:
    path: /resources/api/api-resources/instances
    method: GET
- name: spec_files
  endpoint:
    path: /resources/api/api-resources/spec-files
    method: GET
- name: tests
  endpoint:
    path: /resources/api/api-resources/tests
    method: GET
- name: test_signature
  endpoint:
    path: /resources/api/api-resources/test-signature
    method: GET
- name: test_results
  endpoint:
    path: /resources/api/api-resources/test-results
    method: GET
- name: projects
  endpoint:
    path: /api/projects
    method: GET
- name: runs
  endpoint:
    path: /api/runs
    method: GET
- name: instances
  endpoint:
    path: /api/instances
    method: GET
- name: spec_files
  endpoint:
    path: /api/spec_files
    method: GET
- name: tests
  endpoint:
    path: /api/tests
    method: GET
- name: test_signature
  endpoint:
    path: /api/test_signature
    method: GET
- name: test_results
  endpoint:
    path: /api/test_results
    method: GET
- name: test_results
  endpoint:
    path: /api/test_results
    method: GET
    data_selector: results
    params: {}
- name: team_members
  endpoint:
    path: /api/team_members
    method: GET
    data_selector: members
    params: {}
- name: projects
  endpoint:
    path: /resources/api/api-resources/projects
    method: GET
- name: runs
  endpoint:
    path: /resources/api/api-resources/runs
    method: GET
- name: instances
  endpoint:
    path: /resources/api/api-resources/instances
    method: GET
- name: spec_files
  endpoint:
    path: /resources/api/api-resources/spec-files
    method: GET
- name: tests
  endpoint:
    path: /resources/api/api-resources/tests
    method: GET
- name: test_signature
  endpoint:
    path: /resources/api/api-resources/test-signature
    method: GET
- name: test_results
  endpoint:
    path: /resources/api/api-resources/test-results
    method: GET
- name: projects
  endpoint:
    path: /resources/api/api-resources/projects
    method: GET
- name: runs
  endpoint:
    path: /resources/api/api-resources/runs
    method: GET
- name: instances
  endpoint:
    path: /resources/api/api-resources/instances
    method: GET
- name: spec_files
  endpoint:
    path: /resources/api/api-resources/spec-files
    method: GET
- name: tests
  endpoint:
    path: /resources/api/api-resources/tests
    method: GET
- name: test_signature
  endpoint:
    path: /resources/api/api-resources/test-signature
    method: GET
- name: test_results
  endpoint:
    path: /resources/api/api-resources/test-results
    method: GET
- name: artifacts
  retention_time: 21 days
- name: test_results
  retention_time: 3 months in hot storage, 9 months in cold (archive) storage
- name: tests_details
  retention_time: 30 days in hot storage, 60 days in cold (archive) storage
- name: reports_analytics
  retention_time: 12 months
- name: orchestration
  endpoint:
    path: /orchestration
    method: GET
- name: storage
  endpoint:
    path: /storage
    method: GET
- name: user_api
  endpoint:
    path: /user_api
    method: GET
- name: web_app
  endpoint:
    path: /web_app
    method: GET
- name: authentication
  endpoint:
    path: /authentication
    method: GET
- name: billing
  endpoint:
    path: /billing
    method: GET
- name: third_party_integrations
  endpoint:
    path: /third_party_integrations
    method: GET
- name: documentation
  endpoint:
    path: /documentation
    method: GET
- name: changelog
  endpoint:
    path: /changelog
    method: GET
- name: status_page
  endpoint:
    path: /status_page
    method: GET
- name: alternative_cypress_binaries
  endpoint:
    path: /alternative_cypress_binaries
    method: GET
- name: reporters
  endpoint:
    path: /reporters
    method: GET
    data_selector: data
notes:
- Requires setup of connected app in api
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- Uses the Currents API for real-time test result streaming.
- Requires setup of organization and project in Currents dashboard
- Use `npx envinfo --system --binaries --browsers --npmPackages --duplicates --npmGlobalPackages`
  to print environment information.
- 'Note: The table above refers to support for Playwright''s native features.'
- cypress-cloud requires cypress version 10.0.0+
- Some objects like Contact may return nulls in deeply nested fields
- We are suspending our support of Cypress test runner version 13+
- We recommend using cypress-cloud for all new installations.
- cypress-cloud implements its own parallelization and recording protocol and runs
  cypress in 'offline' mode
- '@currents/jest requires Jest v29.5.0+ and Node.js v18.20.4+'
- Some resources may not return all fields in the response.
- Install @currents/jest and @currents/cmd packages
- Running detox tests with @currents/jest reporter generates results compatible for
  processing by Currents.
- If you are experiencing issues with using `@currents/jest`, please collect more
  information about the failure and submit a support request via our support channels.
- Ensure to set up OAuth2 credentials correctly.
- Integrate Currents with any framework by using JUnit compatible XML reporters
- Running Cypress and Playwright tests in parallel in Azure DevOps and Currents Dashboard
- Running cypress tests in parallel on AWS Code Build and Currents dashboard
- Record key is a secret you use to associate runs with your organization in Currents
  dashboard.
- Requests to create a run for non-existing or deleted Record Key will be rejected.
- You'd treat your Record Key as a secret and not publish it.
- Currents automatically detects CI Build ID for popular CI providers based on the
  presence of environment variables.
- If not explicitly provided, Currents generates a random unique id.
- Most CI providers provide a different set of environment variables for different
  attempts and Currents dashboard can identify it automatically - it will create an
  entirely new run for retries.
- Using commit SHA as a CI Build ID is a valid approach and can work for many setups.
- Most CI providers provide a different set of environment variables for different
  attempts.
- Using commit SHA as a CI Build ID can result in a duplicate CI Build ID.
- Each organization can have multiple projects, there’s no limit on the number of
  projects.
- Test results from different projects remain separate, even for identical tests.
- To implement the variety of possible scenarios you need to use the combination of
  Project, CI build ID, Groups and Tags.
- Each run has its own timeout, both groups will have to finish within the designated
  time to prevent a timeout.
- Integration settings are set on a project level. Each run will activate its own
  notifications.
- Coverage reports are collected on a group level.
- Each run has its own timeout, groups must finish within designated time.
- Each run contains results for run both group and all the included tests.
- Currents collects test results across different machines + workers and presents
  them in the cloud dashboard, using CI Build ID to assign the results to a build/run.
- Running Playwright tests with sharding enabled requires the same CI Build ID across
  different machines.
- Streaming step-level results in Currents reporter for Playwright tests
- Step-level reporting is available because the Playwright team and other contributors
  have designed and provided the necessary APIs to capture the lifecycle events of
  the test execution.
- Speed up CI by running Playwright Tests in Parallel
- Reduce CI costs with Cloud Spot Instances
- Enable Playwright Fully Parallel Mode
- Explore Load Balancing Strategies
- Re-run only failed tests
- Fail-fast
- Running Playwright tests in parallel is most popular technique for speeding up end-to-end
  tests in CI.
- Sharding splits test files based on the lexical order of test file paths.
- Orchestration is especially effective for suites with 20+ files of various duration,
  resulting in up to 40% reduction the CI execution time with minimal changes to configuration.
- Orchestration does come with its own limitations
- Global Setup and Teardown— an orchestrated execution runs `playwright` for each
  iteration.
- Currents uses all the available machines automatically.
- Orchestration helps decrease the duration of Playwright tests in CI pipelines.
- Orchestration works on a file level - i.e. it balances test files (rather than tests)
- Playwright Project dependencies is not supported - i.e. if you have projects that
  depend one on another, orchestration will not consider the dependencies.
- Tests are required to be isolated and not shared in any state.
- Each pull starts a fresh Playwright process, impacting reporters that write output
  files.
- Tests that randomly fail and then pass without any change are considered flaky.
- 'Enabling fullyParallel: true allows running tests from the same spec file in parallel
  on different workers.'
- Cost Efficiency of Spot Instances
- 'Re-run Only Failed Tests: Playwright Shards'
- 'Re-run Failed Playwright Tests: Currents Orchestration'
- Requires @currents/playwright@1.3.0+
- Starting from version 1.44 Playwright supports running only the failed test from
  the last run using --last-failed CLI flag.
- '@playwright/test@1.50+ has an improved support of --last-failed on CI, we recommend
  upgrading the package version accordingly.'
- Automatically cancelling your test suite right after the first failure is called
  a 'fail-fast strategy'.
- Using a 'fail-fast' strategy can be beneficial because it reduces CI resources usage
  by preventing running additional tests after detecting just a single failure.
- Only tests orchestrated with pwc-p can be dynamically reassigned.
- Starting from version 1.3.0 of @currents/playwright set --pwc-reset-signal CLI parameter.
- Running your tests suite in parallel on multiple machines can greatly reduce the
  overall duration.
- Optimal assignment strategy considers the duration of spec files.
- API requires authentication via OAuth2.
- Uses OAuth2 with refresh token — requires setup of connected app in Currents
- Automatically cancelling runs on first failure is called a 'fail-fast strategy'.
- Using a 'fail-fast' strategy can reduce CI resources usage.
- Utilizing a 'fail-fast' strategy has caveats such as not all tests will be executed.
- Code coverage is a popular technique for measuring what parts of the source code
  have been executed while running tests.
- Requires @currents/playwright v1.7.0+
- The current version only shows aggregated cross-file coverage metrics.
- Only finished runs contribute to coverage reports. A run is finished if it reported
  results for all spec files and tests.
- Instrumenting the code and generating the coverage report is done by the cypress
  runner together with Istanbul or any other coverage tool.
- cypress-cloud expects to find the coverage reports at their default location at
  <projectRoot>/.nyc_output/out.json.
- After completing this step, your app's code is instrumented.
- Running Playwright tests `npm run test` will activate a pre-configured Currents
  reporter and will send the code coverage information together with the rest of the
  results.
- Automate workflows by triggering actions based on flexible rules and conditions
- The Dec 2024 release of Currents Actions supports Playwright and implements a basic
  set of actions and conditions
- Run `cypress-cloud` with `--experimental-coverage-recording` CLI flag enabled
- Default location for coverage reports is `<projectRoot>/.nyc_output/out.json`
- Learn how to setup Cypress to start reporting code coverage results
- Setup of connected app is required.
- Only available for Playwright
- Requires @currents/playwright v1.9.0+
- Requires `@currents/playwright` v1.9.0+
- Users with Admin role can create and modify actions.
- Users with Member role can browse actions in read-only mode.
- Playwright support for Component testing is still experimental
- Uses OAuth2 for authentication.
- Requires @currents/playwright 1.5.0+
- 'Types: skip, fixme, fail, slow are reserved by Playwright'
- 32 max distinct annotations per test, extra annotations will be removed
- Version 0.7.0+ is required to use run-level tags
- Uses OAuth2 with refresh token
- Customize project settings within the default Projects Summary view by adjusting
  the lookback period and applying filters.
- Customize how you visualize projects on the Projects page
- Adjust timeout settings based on tests' complexity and expected duration to avoid
  premature terminations.
- Archiving projects allows you to temporarily set aside projects while retaining
  access to essential data and test results.
- Cypress and Playwright run details and metadata - git, environment, execution state
- Runs represent builds in your CI system.
- Using Tags in Currents Dashboard can help manage test executions.
- The default timeout value is 30 minutes.
- The minimum value is 3 minutes, the maximum value is 12 hours.
- Cancelling a run cannot be undone
- If no commit information is available either from .git folder or from environment
  variables, no commit data will be shown in the dashboard.
- Uses GitHub Actions repository secret named CURRENTS_API_KEY
- Tagging is a convenient way to augment your executions with extra data that can
  be helpful for managing your tests.
- Ensure to set up OAuth2 properly for authentication.
- Deleting a run is permanent - once deleted, a run cannot be restored.
- Each machine may display a vertical line along its left border. This line represents
  the idle time between when the run started and when the machine began executing
  tests.
- The view does not represent fullyParallel scenarios, instead it treats each spec
  file as if it was fully executed on just one worker.
- OAuth2 with refresh token is required.
- Ensure to set up the connected app in Currents.
- Playwright test status can be affected by test retries and expected status.
- Enabling Serial Mode for Playwright Tests changes the default behaviour.
- Flaky tests can block a CI/CD pipeline, making feature delivery slower.
- Playwright test status is a composition of the status of its attempts and its expected
  status.
- Metrics may vary based on active filters applied.
- Automated Reports enable periodic reporting based on Test Suite Explorer data
- The Spec Files Explorer allows users to track and analyze spec files performance.
- Affected Tests – A list of tests impacted by the error, sorted by occurrence.
- Recent Executions – A chronologically sorted list of the most recent test runs affected
  by this error.
- Affected Branches – A list of branches where this error occurred, sorted by occurrence
  count.
- Enabling automated reports requires specific configurations in the API.
- Reports configuration is available in the Reports section of the current project.
- Last updated 4 months ago
- Domain binding allows users to automatically join your Currents organization based
  on their email domains.
- SSO integration is only available for customers with an active subscription.
- Enabling SSO will for all the team members.
- Currents only supports IdP-initiated Sessions.
- Custom Roles are not supported - the roles need to be manually configured for each
  user via the dashboard. New accounts will be created with 'member' role.
- User Deletion is available via SCIMv2 - For IdPs that do not support SCIMv2 you
  can manually delete the users on the Currents team page.
- Prefer sending Email in lowercase, to ensure correct integration
- Currents does not guarantee correct SSO operation when your IdP uses mixed-case
  format for emails and/or domains.
- Group resources are not implemented.
- Only users with an email address that matches the domains configured in the SSO
  setup are supported.
- IdP-initiated auth requests are not supported because of potential risks associated
  with spoofing and cross-site request forgery.
- Enabling SSO will affect all users of your organization, users would not be able
  to sign in to Currents using a different authorization method when SSO is enabled.
- Enabling SSO will affect all users of your organization who access Currents, users
  would not be able to sign in to Currents using a different authorization method
  when SSO is enabled for your organization.
- Troubleshooting SSO
- Various IdP use case-sensitive format for email and domain.
- Billing notifications are different from operational notifications.
- Our legacy plans (created before April 2023) do not have extra usage enabled.
- When legacy plan subscribers reach the usage limits, our system automatically increases
  the quota by 10% to safeguard your usage.
- If upgrading is not an option, you can contact us via support@currents.dev or our
  in-app support chat to activate an extra usage plan to accommodate your increased
  usage needs.
- Please remember that if you surpass your usage limits, Currents will cease recording
  tests on your organization dashboard.
- If upgrading is not an option, you can contact us via support@currents.dev or our
  in-app support chat to activate an extra usage plan.
- All the plans incorporate volume discounts - as your usage increases, the cost per
  unit decreases.
- Uses OAuth2 — requires setup of connected app in api
- We are suspending our support of integration with Cypress starting from version
  13.
- Please refer to the most recent documentation published in the GitHub repository
- currents requires cypress to be installed
- currents is designed to be used in CI environments
- The reporter saves the test results in a temporary folder named .currents/[timestamp]-[uuidv4()].
- We recommend adding .currents to .gitignore
- Setup requires NodeJS 14.0.0+ and Playwright 1.22.2+
- OAuth2 with refresh token is required for API access.
- The reporter saves the test results in a temporary folder named '.currents/[timestamp]-[uuidv4()]'.
- We recommend adding '.currents' to '.gitignore'.
- Create an account at https://app.currents.dev
- It is important to set the CI Build ID explicitly using --ci-build-id option, if
  you are using CI sharding or multiple CI machines to parallelize your tests.
- Node.js v18.20.4+ required
- Test cases may fail due to unexpected values.
- Currents can accept results from arbitrary testing frameworks.
- All test results from the Full Test Suite must be submitted before the project's
  specified timeout.
- Some tests may be flaky
- The testId is a hash composed of the test title and the spec file name.
- We recommend using GitHub App based implementation due to its setup simplicity
- Ensure proper OAuth scopes are set for the integration.
- api scope is required for the integration to work correctly. At the time of implementation,
  GitLab didn't allow setting more granular permissions.
- Ensure the GitLab instance is configured to allow API access.
- api scope is required for the integration to work correctly.
- Enabling the Single Notification for All Groups toggle ensures that only one notification
  is sent per run, regardless of how many groups it includes.
- Enabling Microsoft Teams integration requires an Incoming Webhook URL.
- The endpoint should be publicly accessible
- Incoming Webhook URL must be provided for integration setup.
- Enabling the toggle would only send results for failed, timed out or cancelled runs.
- Currents includes an x-timestamp HTTP header with the system's epoch timestamp for
  each webhook request
- Ensure OAuth scopes are set correctly
- All API requests must be made over HTTPS.
- API requests without authentication will also fail.
- Requires setup of API keys in the Currents dashboard
- The integration is powered by Currents for Jira Application that runs on Jira Cloud.
- Your API keys carry many privileges, so be sure to keep them secure! An API key
  provides access to all the resources associated with an organization.
- Listing parameters are mutually exclusive -- only one of `starting_after` or `ending_before`
  may be used.
- API keys carry many privileges, so be sure to keep them secure.
- Uses OAuth2 with refresh token.
- Access to user data is limited to specific use cases and test executions.
- Last updated 2 months ago
- Uses OAuth2 authentication.
- Some resources may require additional permissions.
- Retention periods for different types of data collected by Currents
- Retention plans can be customized per customer upon request
- This customization can affect the standard pricing published on our website
- The actual deletion / rotation of the data can happen after the deadline
- Retention plans can be customized per customer upon request.
- This customization can affect the standard pricing published on our website. The
  actual deletion / rotation of the data can happen after the deadline.
- Currents Support team is available for issues, features requests and general inquiries.
- Users guide for reporting support and troubleshooting issues with Currents systems
- API key required for authentication.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Jest: Got error running globalSetup'
- requests to create a run for non-existing or deleted Record Key will be rejected
- '400 Bad Request: Check request parameters.'
- '404 Not Found: Verify endpoint path.'
- '500 Internal Server Error: Try again later.'
- type field is limited to 256 characters, values are trimmed and truncated
- description field is limited to 2048 characters, values are trimmed and truncated
- If no response is received from a container within a certain period of time, the
  whole run is marked as timed out.
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: Verify the endpoint path.'
- 'TIMEOUT: Test did not finish within the specified time limit'
- 'UNEXPECTED_STATUS: Test status does not match expected status'
- '400 Bad Request: Check the request parameters.'
- '404 Not Found: Ensure the endpoint is correct.'
- 'TimeoutError: Navigation timeout of 30000 ms exceeded'
- 'Invalid SAML response received: Invalid ProviderName/Username combination.'
- 'Integrity check failed: Migrate to cypress-cloud if seeing this error'
- 'DecryptionError: JWE Recipients missing or incorrect type'
- Cypress does not support recording test results to this third party service
- Integrity check failed
- Ensure that Jest version is v29.5.0 or higher.
- Ensure that Node.js version is v18.20.4 or higher.
- 'DEBUG=currents*: Obtain detailed information about the reporter execution process.'
- 'TEST_FAILED: Test case did not pass.'
- 'TIMEOUT: Test execution exceeded time limit.'
- 'failed: Test case example'
- '401 Unauthorized: Check your access token.'
- '403 Forbidden: Ensure that the token has the required permissions.'
- '401 Unauthorized: Check your OAuth token.'
- 'Invalid Webhook URL: Ensure the Incoming Webhook URL is correctly formatted.'
- '400 Bad Request: Check the Incoming Webhook URL and payload format.'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Verify your authentication credentials'
- 'Unauthorized: Recheck API key or token expiration.'
- '401 Unauthorized: Recheck API key validity'
- '400 - Bad Request: The request was unacceptable, often due to missing a required
  parameter.'
- '401 - Unauthorized: No valid API key provided.'
- '402 - Request Failed: The parameters were valid but the request failed.'
- '403 - Forbidden: The API key doesn''t have permissions to perform the request.'
- '404 - Not Found: The requested resource doesn''t exist.'
- '409 - Conflict: The request conflicts with another request.'
- '429 - Too Many Requests: Too many requests hit the API too quickly. We recommend
  an exponential backoff of your requests.'
- '500, 502, 503, 504 - Server Errors: Something went wrong on Currents end.'
- Requests made over plain HTTP will fail.
- API requests without authentication will also fail.
- '409 - Conflict: The request conflicts with another request'
- '403 Forbidden: Check your permissions.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Invalid API key.'
- '404 Not Found: The requested resource could not be found.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - SAML2.0 Configuration
  - IdP-initiated Sessions
  - JumpCloud User provisioning
  - GitLabOAuth
client:
  base_url: https://currents.dev
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
