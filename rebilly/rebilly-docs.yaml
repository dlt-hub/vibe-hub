resources:
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: data
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: data
- name: orders
  endpoint:
    path: /orders
    method: POST
    data_selector: data
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
- name: payment_gateways
  endpoint:
    path: /payment-gateways
    method: GET
- name: gateway_account_requested
  endpoint:
    path: /automations/gateway_account_requested
    method: POST
    data_selector: rules
    params: {}
- name: gateway_account_weights
  endpoint:
    path: /weights
    method: GET
    data_selector: weights
    params: {}
- name: gateway_account
  endpoint:
    path: /gateway/accounts
    method: POST
    data_selector: gateway_account
    params: {}
- name: test_transaction
  endpoint:
    path: /transactions/test
    method: POST
    data_selector: transaction
    params: {}
- name: credit_memo
  endpoint:
    path: /_mock/catalog/all/credit-memos
    method: GET
    data_selector: records
    params: {}
- name: balance_transactions
  endpoint:
    path: /organizations/{organizationId}/balance-transactions
    method: GET
    data_selector: records
    params: {}
- name: balance_transaction
  endpoint:
    path: /organizations/{organizationId}/balance-transactions/{id}
    method: GET
    data_selector: records
    params: {}
- name: quotes
  endpoint:
    path: /_mock/catalog/all/quotes
    method: POST
    data_selector: quote
    params: {}
- name: quotes
  endpoint:
    path: /organizations/{organizationId}/quotes
    method: GET
    data_selector: quote
    params: {}
- name: data_exports
  endpoint:
    path: /organizations/{organizationId}/experimental/data-exports
    method: GET
    data_selector: dataExports
    params: {}
- name: subscriptions
  endpoint:
    path: /_mock/catalog/all/storefront/subscriptions
    method: POST
    data_selector: id
    params: {}
- name: orders
  endpoint:
    path: /_mock/catalog/all/storefront/orders
    method: GET
    data_selector: items
    params: {}
- name: payment_gateways
  endpoint:
    path: /payment_gateways
    method: GET
    data_selector: gateways
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
    data_selector: methods
- name: aml-checks
  endpoint:
    path: /_mock/catalog/all/aml-checks
    method: GET
- name: aml-settings
  endpoint:
    path: /_mock/catalog/all/aml-settings
    method: GET
- name: aml-list-possibly-matched
  endpoint:
    path: /_mock/catalog/all/aml-list-possibly-matched
    method: GET
- name: storefront_account
  endpoint:
    path: /_mock/catalog/all/storefront/account
    method: GET
- name: forgot_password
  endpoint:
    path: /_mock/catalog/all/storefront/account/forgot-password
    method: POST
- name: reset_password
  endpoint:
    path: /_mock/catalog/all/storefront/account/reset-password/{token}
    method: POST
- name: verification
  endpoint:
    path: /_mock/catalog/all/storefront/account/verification/{token}
    method: POST
- name: login
  endpoint:
    path: /_mock/catalog/all/storefront/login
    method: POST
- name: logout
  endpoint:
    path: /_mock/catalog/all/storefront/logout
    method: POST
- name: register
  endpoint:
    path: /_mock/catalog/all/storefront/register
    method: POST
- name: payout_requests
  endpoint:
    path: /_mock/catalog/all/storefront/payout-requests
    method: GET
- name: transactions
  endpoint:
    path: /_mock/catalog/all/storefront/transactions
    method: GET
- name: users
  endpoint:
    path: /_mock/catalog/all/users
    method: GET
- name: subscriptions
  endpoint:
    path: /_mock/catalog/all/subscriptions
    method: GET
    data_selector: subscriptions
    params:
      expand: string
- name: create_subscription
  endpoint:
    path: /_mock/catalog/all/subscriptions
    method: POST
    data_selector: subscription
    params:
      expand: string
- name: DCC offers
  endpoint:
    path: /dcc/offers
    method: GET
- name: Forced conversion
  endpoint:
    path: /dcc/forced-conversion
    method: GET
- name: invoices
  endpoint:
    path: /_mock/catalog/all/storefront/invoices
    method: GET
    data_selector: invoices
    params: {}
- name: invoice
  endpoint:
    path: /_mock/catalog/all/storefront/invoices/{id}
    method: GET
    data_selector: invoice
    params: {}
- name: integrations
  endpoint:
    path: /_mock/catalog/all/integrations
    method: GET
    data_selector: service
- name: data_exports
  endpoint:
    path: /experimental/organizations/your-organization-id/data-exports
    method: POST
    data_selector: id
    params:
      dateRange:
        start: yesterday
        end: today
      resource: transactions
- name: download_file
  endpoint:
    path: /organizations/your-organization-id/files/{file_id}/download
    method: GET
    data_selector: download
    params: {}
- name: transactions
  endpoint:
    path: /_mock/catalog/all/transactions
    method: GET
    data_selector: transactions
- name: ready to pay
  endpoint:
    path: /_mock/catalog/all/ready-to-pay
    method: POST
    data_selector: paymentMethods
- name: checkout_forms
  endpoint:
    path: /_mock/catalog/all/checkout-forms
    method: GET
    data_selector: records
    params: {}
- name: customers
  endpoint:
    path: /organizations/{organizationId}/customers
    method: GET
    data_selector: customers
- name: tax_id_numbers
  endpoint:
    path: /api/tax_id_numbers
    method: GET
    data_selector: tax_id_numbers
- name: automated_tax_calculations
  endpoint:
    path: /api/tax_calculations
    method: GET
    data_selector: tax_calculations
- name: email_notifications
  endpoint:
    path: /api/email_notifications
    method: POST
    data_selector: notifications
- name: email_delivery_settings
  endpoint:
    path: /_mock/catalog/all/email-delivery-settings
    method: GET
    data_selector: settings
    params: {}
- name: email_delivery_setting
  endpoint:
    path: /_mock/catalog/all/email-delivery-settings/{id}
    method: GET
    data_selector: setting
    params: {}
- name: invoices
  endpoint:
    path: /_mock/catalog/all/invoices
    method: GET
    data_selector: invoices
- name: allowlists
  endpoint:
    path: /_mock/catalog/all/allowlists
    method: GET
- name: billing_portal
  endpoint:
    path: /_mock/catalog/all/billing-portals
    method: GET
    data_selector: billing_portals
    params:
      limit: 1000
      offset: 1000
- name: journal_accounts
  endpoint:
    path: /_mock/catalog/all/journal-accounts
    method: GET
    data_selector: records
- name: journal_entries
  endpoint:
    path: /_mock/catalog/all/journal-entries
    method: GET
    data_selector: records
- name: payment_instrument
  endpoint:
    path: /_mock/catalog/all/payment-instruments
    method: GET
    data_selector: records
- name: payment_card_created
  endpoint:
    path: /_mock/catalog/all/payment-card-created
    method: GET
    data_selector: paymentCard
- name: payment_card_expiration_reminder
  endpoint:
    path: /_mock/catalog/all/payment-card-expiration-reminder
    method: GET
    data_selector: paymentCard
- name: payment_card_expired
  endpoint:
    path: /_mock/catalog/all/payment-card-expired
    method: GET
    data_selector: paymentCard
- name: catalog_search
  endpoint:
    path: /_mock/catalog/all/search
    method: GET
    data_selector: searched
    params:
      sort: string
      limit: 1000
      offset: 1000
      q: string
- name: organizations_search
  endpoint:
    path: /organizations/{organizationId}/search
    method: GET
    data_selector: searched
    params: {}
- name: gateway_account
  endpoint:
    path: /organizations/{organizationId}/gateway-accounts
    method: GET
    data_selector: gatewayAccounts
    params: {}
- name: payment_instrument
  endpoint:
    path: /_mock/catalog/all/storefront/payment-instruments
    method: GET
    data_selector: records
- name: broadcast_message
  endpoint:
    path: /_mock/catalog/all/broadcast-messages
    method: GET
    data_selector: messages
- name: email_messages
  endpoint:
    path: /organizations/{organizationId}/email-messages
    method: GET
    data_selector: email_messages
- name: organizations
  endpoint:
    path: /_mock/catalog/all/organizations
    method: GET
- name: create_organization
  endpoint:
    path: /_mock/catalog/all/organizations
    method: POST
- name: update_organization
  endpoint:
    path: /_mock/catalog/all/organizations/{id}
    method: PATCH
- name: retrieve_organization
  endpoint:
    path: /_mock/catalog/all/organizations/{id}
    method: GET
- name: storefront_payment
  endpoint:
    path: /_mock/catalog/all/storefront/payment
    method: POST
- name: storefront_purchase
  endpoint:
    path: /_mock/catalog/all/storefront/purchase
    method: POST
- name: storefront_preview_purchase
  endpoint:
    path: /_mock/catalog/all/storefront/preview-purchase
    method: POST
- name: storefront_ready_to_pay
  endpoint:
    path: /_mock/catalog/all/storefront/ready-to-pay
    method: POST
- name: storefront_ready_to_payout
  endpoint:
    path: /_mock/catalog/all/storefront/ready-to-payout
    method: POST
- name: memberships
  endpoint:
    path: /_mock/catalog/all/memberships
    method: GET
    data_selector: memberships
    params:
      limit: 1000
      offset: 1000
      filter: string
      sort: string
- name: dispute
  endpoint:
    path: /_mock/catalog/all/disputes
    method: GET
    data_selector: data
    params: {}
- name: tracking_api
  endpoint:
    path: /_mock/catalog/all/tracking/api
    method: GET
- name: tracking_taxes
  endpoint:
    path: /_mock/catalog/all/tracking/taxes
    method: GET
- name: tracking_lists
  endpoint:
    path: /_mock/catalog/all/tracking/lists
    method: GET
- name: tracking_webhooks
  endpoint:
    path: /_mock/catalog/all/tracking/webhooks
    method: GET
- name: storefront_products
  endpoint:
    path: /organizations/{organizationId}/storefront/products
    method: GET
    data_selector: items
- name: storefront_product
  endpoint:
    path: /organizations/{organizationId}/storefront/products/{id}
    method: GET
    data_selector: item
- name: websites
  endpoint:
    path: /_mock/catalog/all/websites
    method: GET
    data_selector: websites
- name: website
  endpoint:
    path: /_mock/catalog/all/websites/{id}
    method: GET
    data_selector: website
notes:
- Rebilly is a level 1 PCI-DSS service provider.
- Rebilly is SOC 2 compliant.
- Sandbox environment is pre-configured with a test gateway account.
- Live environment requires payment gateway account credentials.
- No data, including organizations, is shared between the live and sandbox environments.
- If you are testing in the sandbox environment, a test payment gateway called TestProcessor
  is already configured.
- We do not sell or share your personal information with third parties except as outlined
  below.
- Rate limits are applied to the organization, and not to the API key.
- In sandbox environment, rate limits are enforced for non-GET endpoints and are set
  at 3000 requests per 10 minutes.
- Uses weights to configure the probability of a gateway being selected to process
  a transaction.
- 3DS is a security protocol that helps prevent fraud in online credit and debit card
  transactions.
- Mastercard enrollment must be initiated by the acquirer.
- Rate limits are applied to the organization, not to the API key.
- Rebilly follows the error response format proposed in RFC 9457, known as Problem
  Details for HTTP APIs.
- Rate limits are enforced for non-GET endpoints in sandbox environment, set at 3000
  requests per 10 minutes.
- Rebilly enforces rate limits on the API to ensure that no single organization consumes
  too many resources.
- Rebilly follows the error response format proposed in RFC 9457.
- You are not authorized to copy, download, install or otherwise use the Rebilly API
  if you do not agree to all of the terms of this Agreement.
- DCC is a premium Rebilly feature and comes at an additional cost. Before you use
  this feature, contact Rebilly.
- These operations are experimental and may change.
- Rate limits are enforced for non-GET endpoints.
- JWT is required for Storefront operations.
- 'Rebilly offers four forms of authentication: secret key, publishable key, JSON
  Web Tokens, and public signature key.'
- Rate limits are enforced for non-GET endpoints and are set at 3000 requests per
  10 minutes in the sandbox environment.
- Rebilly enforces rate limits on the API.
- All operations are intended to be used directly from an untrusted browser.
- Rate limits are applied to the organization and not to the API key.
- Reduce security related expenses by offloading most of your PCI-DSS compliance burden
  to Rebilly.
- We recommend our FramePay solution to minimize your PCI DSS requirements.
- DCC is a premium Rebilly feature and comes at an additional cost.
- DCC offers are only available for payment card transactions.
- Rebilly follows the error response format proposed in RFC 9457
- Default wait time for data export is up to 10 minutes for large files.
- Rate limits are enforced for non-GET endpoints and are set at 3000 requests per
  10 minutes in sandbox environment.
- Validation is asynchronous, and the status is displayed in the list of tax ID numbers.
- Rebilly supports validation for European VATIN tax ID number types.
- Rate limits are enforced for non-GET endpoints and are set at 3000 requests per
  10 minutes.
- Rebilly will integrate gateways free of charge.
- The integration depends on the urgency level and existing requests.
- Rate limits are applied to the organization, and not to the API key
- Custom domain for the billing portal defaults to portal.secure-payments.app.
- No SDK is required to use the API.
- Rate limits are enforced for non-GET endpoints at 3000 requests per 10 minutes in
  sandbox.
- Rate limits are enforced for non-GET endpoints in the sandbox environment.
- Most values are not partially searched. They must be an exact case-insensitive match.
- Rebilly API follows the error response format proposed in RFC 9457.
- No data is shared between the live and sandbox environments.
- All API responses are in JSON format.
- If the rate limit is exceeded, the API returns a 429 Too Many Requests response.
- Rebilly expects the information to be encrypted.
- Rebilly may use scripts to check the quality of the data before the import.
- Use email delivery settings to configure from which email address notifications
  and broadcast message are sent.
- Rate limits for non-GET endpoints are set at 3000 requests per 10 minutes in the
  sandbox environment.
- Data security is one of our highest priorities at Rebilly.
- We go beyond industry standards to meet a high level of data security at every layer.
- Rebilly offers multiple forms of authentication including API keys.
- Rate limits are enforced for non-GET endpoints in the sandbox environment at 3000
  requests per 10 minutes.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '429 Too Many Requests: Rate limit exceeded.'
- '429 Too Many Requests: Rate limit exceeded. Check X-RateLimit-Retry-After header.'
- '429 Too Many Requests: Rate limit exceeded'
- '429 Too Many Requests: The API returns this response if the rate limit is exceeded.'
- '429 Too Many Requests: The API rate limit has been exceeded.'
- '429 Too Many Requests: If the rate limit is exceeded.'
- '429 Too Many Requests: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- If your subject line does not contain the phrase 'gateway integration request',
  it will be sent to a general mailbox and may cause delays.
- '429 Too Many Requests: The API returns this response when the rate limit is exceeded'
- '429 Too Many Requests: Rate limit exceeded, check X-RateLimit-Retry-After header.'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '429 Too Many Requests: The rate limit is exceeded.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.rebilly.com
  auth:
    type: apikey
    flow: refresh_token
    token_url: https://login.rebilly.com/oauth2/token
    client_id: YourApiKeyHere
    client_secret: '{{ dlt.secrets[''rebilly_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''rebilly_refresh_token''] }}'
    location: header
    header_name: REB-APIKEY
  headers:
    Accept: application/json, text/plain, */*
    Content-Type: application/json;charset=UTF-8
    User-Agent: your-console-library
source_metadata: null
