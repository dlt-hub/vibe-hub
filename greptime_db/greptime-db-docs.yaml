resources:
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: ''
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: ''
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: configuration
  endpoint:
    path: /config
    method: GET
    data_selector: ''
    params: {}
- name: sql_api
  endpoint:
    path: /v1/sql
    method: GET
    data_selector: ''
    params: {}
- name: promql_api
  endpoint:
    path: /v1/promql
    method: GET
    data_selector: ''
    params: {}
- name: influxdb_compatibility
  endpoint:
    path: /v1/influxdb/write
    method: POST
    data_selector: ''
    params: {}
- name: prometheus_remote_write
  endpoint:
    path: /v1/prometheus/write
    method: POST
    data_selector: ''
    params: {}
- name: loki_compatibility
  endpoint:
    path: /v1/loki/api/v1/push
    method: POST
    data_selector: ''
    params: {}
- name: opentsdb_protocol
  endpoint:
    path: /v1/opentsdb/api/put
    method: POST
    data_selector: ''
    params: {}
- name: ingest_logs
  endpoint:
    path: /v1/ingest
    method: POST
- name: pipelines
  endpoint:
    path: /v1/pipelines/{pipeline_name}
    method: DELETE
- name: dryrun_pipeline
  endpoint:
    path: /v1/pipelines/dryrun
    method: POST
- name: grpc_latencies
  endpoint:
    path: /grpc_latencies
    method: INSERT
    data_selector: records
    params: {}
- name: app_logs
  endpoint:
    path: /app_logs
    method: INSERT
    data_selector: records
    params: {}
- name: grpc_latencies
  endpoint:
    path: /v1/prometheus/api/v1/query_range
    method: POST
    data_selector: data.result
    params:
      query: quantile_over_time(0.95, grpc_latencies{host!=""}[1m])
      start: '2024-07-11 20:00:00Z'
      end: '2024-07-11 20:00:20Z'
      step: 1m
- name: grpc_metrics
  endpoint:
    path: /grpc_metrics
    method: POST
    data_selector: data
    params: {}
- name: gtctl_cluster
  endpoint:
    path: /gtctl/cluster
    method: GET
    data_selector: clusters
- name: cpu_metric
  endpoint:
    path: /cpu_metric
    method: GET
    data_selector: records
- name: Mito Engine
  endpoint:
    path: /reference/about-greptimedb-engines/#mito-engine
    method: GET
- name: Metric Engine
  endpoint:
    path: /reference/about-greptimedb-engines/#metric-engine
    method: GET
- name: File Engine
  endpoint:
    path: /reference/about-greptimedb-engines/#file-engine
    method: GET
notes:
- GreptimeDB is an open-source, cloud-native, unified observability database for metrics,
  logs and traces.
- High-Performance Engine built with Rust for high performance and reliability.
- Ordered-set aggregate functions now require a WITHIN GROUP (ORDER BY â€¦) clause
- MySQL protocol incorrect comment styling is no longer allowed; comments must start
  with -- instead of ---
- Implements complete process management system with ProcessManager
- Introducing SimpleBulkMemtable for tables without primary keys to accelerate bulk
  write operations
- Adds pipeline support for Prometheus remote write and Loki API
- GreptimeDB is designed as a unified observability database that natively supports
  metrics, logs, and traces.
- This glossary is a work in progress and will be updated as new features and concepts
  emerge within the GreptimeDB ecosystem.
- You need a properties file to store the DB connection information.
- Use raw SQL to experience the full features of GreptimeDB.
- Telemetry will be enabled by default starting from v0.4.0.
errors: []
auth_info:
  mentioned_objects: []
client:
  base_url: http://127.0.0.1:4000/dashboard
source_metadata: null
