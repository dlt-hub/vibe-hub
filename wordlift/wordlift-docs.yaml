resources:
- name: content_generation
  endpoint:
    path: /content-generation/content-generations
    method: POST
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    params:
      limit: '2147483647'
      can_content_generation: 'true'
- name: graphql
  endpoint:
    path: /graphql
    method: POST
- name: sync_kg_data
  endpoint:
    path: /content-generation/content-generations/<project-id>/syncs
    method: POST
    params: {}
- name: models
  endpoint:
    path: /content-generation/models
    method: GET
    params:
      limit: '2147483647'
- name: get_stats
  endpoint:
    path: /content-generation/content-generations/<project-id>/stats
    method: GET
    data_selector: total
    params: {}
- name: list_completions
  endpoint:
    path: /content-generation/content-generations/<project-id>/records-sse
    method: GET
    data_selector: ''
    params: {}
- name: regenerate_record_completion
  endpoint:
    path: /content-generation/content-generations/608/records/253191
    method: PUT
    data_selector: ''
    params: {}
- name: accept_record
  endpoint:
    path: /content-generation/content-generations/<project-id>/records/<record-id>
    method: PUT
    data_selector: ''
    params: {}
- name: get_record_validation_report
  endpoint:
    path: /content-generation/content-generations/<project-id>/records/<record-id>/validations
    method: POST
    data_selector: ''
    params: {}
- name: content_generation_records
  endpoint:
    path: /content-generation/content-generations/<project-id>/records/<record-id>
    method: PUT
    data_selector: records
- name: content_generation_export
  endpoint:
    path: /content-generation/content-generations/<project-id>/records.tsv
    method: GET
- name: content_generation_rules
  endpoint:
    path: /content-generation/content-generations/<project-id>/rules
    method: POST
- name: list_projects
  endpoint:
    path: /content-generation/content-generations
    method: GET
    params:
      limit: '100000'
      deleted: 'false'
- name: get_project
  endpoint:
    path: /content-generation/content-generations/<project-id>
    method: GET
- name: products
  endpoint:
    path: /graphql
    method: POST
    data_selector: products
    params: {}
- name: render_template
  endpoint:
    path: /content-generation/content-generations/renders
    method: POST
    data_selector: response
    params: {}
- name: render_collection
  endpoint:
    path: /content-generation/content-generations/renders-collection
    method: POST
    data_selector: response
    params: {}
- name: generate_preview_completion
  endpoint:
    path: /content-generation/completions
    method: POST
    data_selector: response
    params: {}
- name: add_word_biases
  endpoint:
    path: /content-generation/content-generations/<project-id>/words/imports
    method: PUT
    data_selector: response
    params: {}
- name: botify_crawl_import
  endpoint:
    path: /botify-crawl-imports
    method: POST
    data_selector: streaming data
    params: {}
- name: sitemap_import
  endpoint:
    path: /sitemap-imports
    method: POST
    data_selector: imported_web_pages
- name: resource_id
- name: authorize_uri
  endpoint:
    path: /google-search-console/oauth2/authorize-uris
    method: POST
    data_selector: authorize_uri
- name: auth_code_exchange
  endpoint:
    path: /google-search-console/oauth2/auth-code-exchanges
    method: POST
    data_selector: ''
    params: {}
- name: update_account
  endpoint:
    path: /accounts
    method: PUT
    data_selector: ''
    params: {}
- name: analytics_import
  endpoint:
    path: /analytics-imports
    method: POST
    data_selector: ''
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: ''
- name: entities_update
  endpoint:
    path: /entities
    method: PUT
    data_selector: ''
- name: entities_delete
  endpoint:
    path: /entities
    method: DELETE
    data_selector: ''
- name: dataset_batch
  endpoint:
    path: /dataset/batch
    method: POST
    data_selector: ''
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: records
    params: {}
- name: entities_update
  endpoint:
    path: /entities
    method: PUT
    data_selector: records
    params: {}
- name: entities_delete
  endpoint:
    path: /entities
    method: DELETE
    data_selector: records
    params: {}
- name: batch_processing
  endpoint:
    path: /dataset/batch
    method: POST
    data_selector: records
    params: {}
- name: data_api
  endpoint:
    path: /data/https/example.org/page.html
    method: GET
    data_selector: structured_data
    params:
      __wl_lang: en
- name: structured_data
  endpoint:
    path: /data/https/example.org/page.html
    method: GET
    data_selector: structured data
    params:
      __wl_lang: en
- name: products
  endpoint:
    path: /products
    method: POST
    data_selector: products
    params:
      page: 0
      rows: 10
- name: products
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.products
    params:
      query: 'query { products(page:0, rows:10) { id: iri url: strings(name: "schema:url")
        material: strings(name: "schema:material") names: strings(name:"schema:name")
        brand: resource(name:"schema:brand"){ brand: string(name: "schema:name") }
        price: resource(name:"schema:offers"){ price: string(name: "schema:price")
        } } } }'
- name: products
  endpoint:
    path: ''
    method: POST
    data_selector: products
    params: {}
- name: faqPages
  endpoint:
    path: ''
    method: POST
    data_selector: faqPages
    params: {}
- name: articles
  endpoint:
    path: ''
    method: POST
    data_selector: articles
    params: {}
notes:
- The `content_generation` query parameter must be set to `true` in order to retrieve
  only Accounts that support Content Generation.
- Almost all of the list API use cursor-based navigation.
- Embeddings are generated asynchronously from a queue, so they may not be immediately
  available for Vector Search.
- Using the Analytics API requires a WordLift Key.
- The redirect_uri must be set to https://developers.google.com/oauthplayground.
- You can only connect one platform at a time.
- Uses OAuth 2.0 for secure authorization.
- To learn more about the WordLift Cloud get in contact with our concierge team and
  request a WordLift access key.
- API Key is required for authentication.
- API Key is required for authentication, included in the Authorization header.
errors: []
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.wordlift.io
  auth:
    type: oauth2
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
    Content-Type: application/json
source_metadata: null
