resources:
- name: ValkeyModule_SetCommandInfo
  endpoint:
    path: /ValkeyModule_SetCommandInfo
    method: GET
- name: ValkeyModule_UpdateRuntimeArgs
  endpoint:
    path: /ValkeyModule_UpdateRuntimeArgs
    method: GET
- name: ValkeyModule_IsModuleNameBusy
  endpoint:
    path: /ValkeyModule_IsModuleNameBusy
    method: GET
- name: ValkeyModule_Milliseconds
  endpoint:
    path: /ValkeyModule_Milliseconds
    method: GET
- name: ValkeyModule_MonotonicMicroseconds
  endpoint:
    path: /ValkeyModule_MonotonicMicroseconds
    method: GET
- name: ValkeyModule_Microseconds
  endpoint:
    path: /ValkeyModule_Microseconds
    method: GET
- name: ValkeyModule_CachedMicroseconds
  endpoint:
    path: /ValkeyModule_CachedMicroseconds
    method: GET
- name: ValkeyModule_BlockedClientMeasureTimeStart
  endpoint:
    path: /ValkeyModule_BlockedClientMeasureTimeStart
    method: GET
- name: ValkeyModule_BlockedClientMeasureTimeEnd
  endpoint:
    path: /ValkeyModule_BlockedClientMeasureTimeEnd
    method: GET
- name: ValkeyModule_Yield
  endpoint:
    path: /ValkeyModule_Yield
    method: GET
- name: ValkeyModule_SetModuleOptions
  endpoint:
    path: /ValkeyModule_SetModuleOptions
    method: GET
- name: ValkeyModule_SignalModifiedKey
  endpoint:
    path: /ValkeyModule_SignalModifiedKey
    method: GET
- name: Heap allocation raw functions
  endpoint:
    path: /heap/allocation
    method: GET
    data_selector: functions
- name: Commands API
  endpoint:
    path: /commands/api
    method: GET
    data_selector: commands
- name: ValkeyModule_AutoMemory
  endpoint:
    path: /ValkeyModule_AutoMemory
    method: void
    data_selector: none
- name: ValkeyModule_CreateString
  endpoint:
    path: /ValkeyModule_CreateString
    method: void
    data_selector: none
- name: ValkeyModule_CreateStringPrintf
  endpoint:
    path: /ValkeyModule_CreateStringPrintf
    method: void
    data_selector: none
- name: ValkeyModule_CreateStringFromLongLong
  endpoint:
    path: /ValkeyModule_CreateStringFromLongLong
    method: void
    data_selector: none
- name: ValkeyModule_CreateStringFromULongLong
  endpoint:
    path: /ValkeyModule_CreateStringFromULongLong
    method: void
    data_selector: none
- name: ValkeyModule_CreateStringFromDouble
  endpoint:
    path: /ValkeyModule_CreateStringFromDouble
    method: void
    data_selector: none
- name: ValkeyModule_CreateStringFromLongDouble
  endpoint:
    path: /ValkeyModule_CreateStringFromLongDouble
    method: void
    data_selector: none
- name: ValkeyModule_CreateStringFromString
  endpoint:
    path: /ValkeyModule_CreateStringFromString
    method: void
    data_selector: none
- name: ValkeyModule_CreateStringFromStreamID
  endpoint:
    path: /ValkeyModule_CreateStringFromStreamID
    method: void
    data_selector: none
- name: ValkeyModule_FreeString
  endpoint:
    path: /ValkeyModule_FreeString
    method: void
    data_selector: none
- name: ValkeyModule_RetainString
  endpoint:
    path: /ValkeyModule_RetainString
    method: void
    data_selector: none
- name: ValkeyModule_HoldString
  endpoint:
    path: /ValkeyModule_HoldString
    method: void
    data_selector: none
- name: ValkeyModule_StringPtrLen
  endpoint:
    path: /ValkeyModule_StringPtrLen
    method: void
    data_selector: none
- name: ValkeyModule_StringToLongLong
  endpoint:
    path: /ValkeyModule_StringToLongLong
    method: int
    data_selector: none
- name: ValkeyModule_StringToULongLong
  endpoint:
    path: /ValkeyModule_StringToULongLong
    method: int
    data_selector: none
- name: ValkeyModule_StringToDouble
  endpoint:
    path: /ValkeyModule_StringToDouble
    method: int
    data_selector: none
- name: ValkeyModule_StringToLongDouble
  endpoint:
    path: /ValkeyModule_StringToLongDouble
    method: int
    data_selector: none
- name: ValkeyModule_StringToStreamID
  endpoint:
    path: /ValkeyModule_StringToStreamID
    method: int
    data_selector: none
- name: ValkeyModule_StringCompare
  endpoint:
    path: /ValkeyModule_StringCompare
    method: int
    data_selector: none
- name: ValkeyModule_StringAppendBuffer
  endpoint:
    path: /ValkeyModule_StringAppendBuffer
    method: int
    data_selector: none
- name: ValkeyModule_TrimStringAllocation
  endpoint:
    path: /ValkeyModule_TrimStringAllocation
    method: void
    data_selector: none
- name: ValkeyModule_AutoMemory
  endpoint:
    path: /ValkeyModule_AutoMemory
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_CreateString
  endpoint:
    path: /ValkeyModule_CreateString
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_CreateStringPrintf
  endpoint:
    path: /ValkeyModule_CreateStringPrintf
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_CreateStringFromLongLong
  endpoint:
    path: /ValkeyModule_CreateStringFromLongLong
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_CreateStringFromULongLong
  endpoint:
    path: /ValkeyModule_CreateStringFromULongLong
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_CreateStringFromDouble
  endpoint:
    path: /ValkeyModule_CreateStringFromDouble
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_CreateStringFromLongDouble
  endpoint:
    path: /ValkeyModule_CreateStringFromLongDouble
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_CreateStringFromString
  endpoint:
    path: /ValkeyModule_CreateStringFromString
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_CreateStringFromStreamID
  endpoint:
    path: /ValkeyModule_CreateStringFromStreamID
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_FreeString
  endpoint:
    path: /ValkeyModule_FreeString
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_RetainString
  endpoint:
    path: /ValkeyModule_RetainString
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_HoldString
  endpoint:
    path: /ValkeyModule_HoldString
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_StringPtrLen
  endpoint:
    path: /ValkeyModule_StringPtrLen
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_StringToLongLong
  endpoint:
    path: /ValkeyModule_StringToLongLong
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_StringToULongLong
  endpoint:
    path: /ValkeyModule_StringToULongLong
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_StringToDouble
  endpoint:
    path: /ValkeyModule_StringToDouble
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_StringToLongDouble
  endpoint:
    path: /ValkeyModule_StringToLongDouble
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_StringToStreamID
  endpoint:
    path: /ValkeyModule_StringToStreamID
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_StringCompare
  endpoint:
    path: /ValkeyModule_StringCompare
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_StringAppendBuffer
  endpoint:
    path: /ValkeyModule_StringAppendBuffer
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_TrimStringAllocation
  endpoint:
    path: /ValkeyModule_TrimStringAllocation
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_WrongArity
  endpoint:
    path: /ValkeyModule_WrongArity
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_ReplyWithLongLong
  endpoint:
    path: /ValkeyModule_ReplyWithLongLong
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_ReplyWithError
  endpoint:
    path: /ValkeyModule_ReplyWithError
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_ReplyWithErrorFormat
  endpoint:
    path: /ValkeyModule_ReplyWithErrorFormat
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_ReplyWithSimpleString
  endpoint:
    path: /ValkeyModule_ReplyWithSimpleString
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_ReplyWithArray
  endpoint:
    path: /ValkeyModule_ReplyWithArray
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_ReplyWithMap
  endpoint:
    path: /ValkeyModule_ReplyWithMap
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_ReplyWithSet
  endpoint:
    path: /ValkeyModule_ReplyWithSet
    method: void
    data_selector: null
    params: {}
- name: ValkeyModule_ReplyWithAttribute
  endpoint:
    path: /ValkeyModule_ReplyWithAttribute
    method: void
    data_selector: null
    params: {}
- name: ReplyWithNullArray
  endpoint:
    path: /ValkeyModule/ReplyWithNullArray
    method: GET
    data_selector: 'null'
    params: {}
- name: ReplyWithEmptyArray
  endpoint:
    path: /ValkeyModule/ReplyWithEmptyArray
    method: GET
    data_selector: empty
    params: {}
- name: ReplySetArrayLength
  endpoint:
    path: /ValkeyModule/ReplySetArrayLength
    method: GET
    data_selector: setLength
    params: {}
- name: ReplyWithStringBuffer
  endpoint:
    path: /ValkeyModule/ReplyWithStringBuffer
    method: GET
    data_selector: stringBuffer
    params: {}
- name: ReplyWithCString
  endpoint:
    path: /ValkeyModule/ReplyWithCString
    method: GET
    data_selector: cString
    params: {}
- name: ReplyWithString
  endpoint:
    path: /ValkeyModule/ReplyWithString
    method: GET
    data_selector: string
    params: {}
- name: ReplyWithEmptyString
  endpoint:
    path: /ValkeyModule/ReplyWithEmptyString
    method: GET
    data_selector: emptyString
    params: {}
- name: ReplyWithVerbatimStringType
  endpoint:
    path: /ValkeyModule/ReplyWithVerbatimStringType
    method: GET
    data_selector: verbatimStringType
    params: {}
- name: ReplyWithVerbatimString
  endpoint:
    path: /ValkeyModule/ReplyWithVerbatimString
    method: GET
    data_selector: verbatimString
    params: {}
- name: ReplyWithNull
  endpoint:
    path: /ValkeyModule/ReplyWithNull
    method: GET
    data_selector: nullReply
    params: {}
- name: ReplyWithBool
  endpoint:
    path: /ValkeyModule/ReplyWithBool
    method: GET
    data_selector: boolean
    params: {}
- name: ReplyWithCallReply
  endpoint:
    path: /ValkeyModule/ReplyWithCallReply
    method: GET
    data_selector: callReply
    params: {}
- name: ReplyWithDouble
  endpoint:
    path: /ValkeyModule/ReplyWithDouble
    method: GET
    data_selector: double
    params: {}
- name: ReplyWithBigNumber
  endpoint:
    path: /ValkeyModule/ReplyWithBigNumber
    method: GET
    data_selector: bigNumber
    params: {}
- name: ReplyWithLongDouble
  endpoint:
    path: /ValkeyModule/ReplyWithLongDouble
    method: GET
    data_selector: longDouble
    params: {}
- name: Replicate
  endpoint:
    path: /ValkeyModule/Replicate
    method: GET
    data_selector: replicate
    params: {}
- name: ReplicateVerbatim
  endpoint:
    path: /ValkeyModule/ReplicateVerbatim
    method: GET
    data_selector: replicateVerbatim
    params: {}
- name: GetClientId
  endpoint:
    path: /ValkeyModule/GetClientId
    method: GET
    data_selector: clientId
    params: {}
- name: GetClientUserNameById
  endpoint:
    path: /ValkeyModule/GetClientUserNameById
    method: GET
    data_selector: clientUserName
    params: {}
- name: MustObeyClient
  endpoint:
    path: /ValkeyModule/MustObeyClient
    method: GET
    data_selector: mustObeyClient
    params: {}
- name: GetClientInfoById
  endpoint:
    path: /ValkeyModule/GetClientInfoById
    method: GET
    data_selector: clientInfo
    params: {}
- name: GetClientNameById
  endpoint:
    path: /ValkeyModule/GetClientNameById
    method: GET
    data_selector: clientName
    params: {}
- name: SetClientNameById
  endpoint:
    path: /ValkeyModule/SetClientNameById
    method: GET
    data_selector: setClientName
    params: {}
- name: PublishMessage
  endpoint:
    path: /ValkeyModule/PublishMessage
    method: GET
    data_selector: publishMessage
    params: {}
- name: PublishMessageShard
  endpoint:
    path: /ValkeyModule/PublishMessageShard
    method: GET
    data_selector: publishMessageShard
    params: {}
- name: GetSelectedDb
  endpoint:
    path: /ValkeyModule/GetSelectedDb
    method: GET
    data_selector: selectedDb
    params: {}
- name: GetContextFlags
  endpoint:
    path: /ValkeyModule/GetContextFlags
    method: GET
    data_selector: contextFlags
    params: {}
- name: AvoidReplicaTraffic
  endpoint:
    path: /ValkeyModule/AvoidReplicaTraffic
    method: GET
- name: SelectDb
  endpoint:
    path: /ValkeyModule/SelectDb
    method: GET
- name: KeyExists
  endpoint:
    path: /ValkeyModule/KeyExists
    method: GET
- name: OpenKey
  endpoint:
    path: /ValkeyModule/OpenKey
    method: GET
- name: CloseKey
  endpoint:
    path: /ValkeyModule/CloseKey
    method: GET
- name: KeyType
  endpoint:
    path: /ValkeyModule/KeyType
    method: GET
- name: ValueLength
  endpoint:
    path: /ValkeyModule/ValueLength
    method: GET
- name: DeleteKey
  endpoint:
    path: /ValkeyModule/DeleteKey
    method: GET
- name: UnlinkKey
  endpoint:
    path: /ValkeyModule/UnlinkKey
    method: GET
- name: GetExpire
  endpoint:
    path: /ValkeyModule/GetExpire
    method: GET
- name: SetExpire
  endpoint:
    path: /ValkeyModule/SetExpire
    method: GET
- name: GetAbsExpire
  endpoint:
    path: /ValkeyModule/GetAbsExpire
    method: GET
- name: SetAbsExpire
  endpoint:
    path: /ValkeyModule/SetAbsExpire
    method: GET
- name: ResetDataset
  endpoint:
    path: /ValkeyModule/ResetDataset
    method: GET
- name: DbSize
  endpoint:
    path: /ValkeyModule/DbSize
    method: GET
- name: RandomKey
  endpoint:
    path: /ValkeyModule/RandomKey
    method: GET
- name: ReplyWithNullArray
  endpoint:
    path: /ValkeyModule_ReplyWithNullArray
    method: GET
    data_selector: 'null'
    params: {}
- name: ReplyWithEmptyArray
  endpoint:
    path: /ValkeyModule_ReplyWithEmptyArray
    method: GET
    data_selector: empty_array
    params: {}
- name: ReplySetArrayLength
  endpoint:
    path: /ValkeyModule_ReplySetArrayLength
    method: GET
    data_selector: set_array_length
    params: {}
- name: ReplySetMapLength
  endpoint:
    path: /ValkeyModule_ReplySetMapLength
    method: GET
    data_selector: set_map_length
    params: {}
- name: ReplySetSetLength
  endpoint:
    path: /ValkeyModule_ReplySetSetLength
    method: GET
    data_selector: set_set_length
    params: {}
- name: ReplySetAttributeLength
  endpoint:
    path: /ValkeyModule_ReplySetAttributeLength
    method: GET
    data_selector: set_attribute_length
    params: {}
- name: ReplyWithStringBuffer
  endpoint:
    path: /ValkeyModule_ReplyWithStringBuffer
    method: GET
    data_selector: string_buffer
    params: {}
- name: ReplyWithCString
  endpoint:
    path: /ValkeyModule_ReplyWithCString
    method: GET
    data_selector: c_string
    params: {}
- name: ReplyWithString
  endpoint:
    path: /ValkeyModule_ReplyWithString
    method: GET
    data_selector: string
    params: {}
- name: ReplyWithEmptyString
  endpoint:
    path: /ValkeyModule_ReplyWithEmptyString
    method: GET
    data_selector: empty_string
    params: {}
- name: ReplyWithVerbatimStringType
  endpoint:
    path: /ValkeyModule_ReplyWithVerbatimStringType
    method: GET
    data_selector: verbatim_string_type
    params: {}
- name: ReplyWithVerbatimString
  endpoint:
    path: /ValkeyModule_ReplyWithVerbatimString
    method: GET
    data_selector: verbatim_string
    params: {}
- name: ReplyWithNull
  endpoint:
    path: /ValkeyModule_ReplyWithNull
    method: GET
    data_selector: 'null'
    params: {}
- name: ReplyWithBool
  endpoint:
    path: /ValkeyModule_ReplyWithBool
    method: GET
    data_selector: boolean
    params: {}
- name: ReplyWithCallReply
  endpoint:
    path: /ValkeyModule_ReplyWithCallReply
    method: GET
    data_selector: call_reply
    params: {}
- name: ReplyWithDouble
  endpoint:
    path: /ValkeyModule_ReplyWithDouble
    method: GET
    data_selector: double
    params: {}
- name: ReplyWithBigNumber
  endpoint:
    path: /ValkeyModule_ReplyWithBigNumber
    method: GET
    data_selector: big_number
    params: {}
- name: ReplyWithLongDouble
  endpoint:
    path: /ValkeyModule_ReplyWithLongDouble
    method: GET
    data_selector: long_double
    params: {}
- name: Replicate
  endpoint:
    path: /ValkeyModule_Replicate
    method: GET
    data_selector: replicate
    params: {}
- name: ReplicateVerbatim
  endpoint:
    path: /ValkeyModule_ReplicateVerbatim
    method: GET
    data_selector: replicate_verbatim
    params: {}
- name: GetClientId
  endpoint:
    path: /ValkeyModule_GetClientId
    method: GET
    data_selector: client_id
    params: {}
- name: GetClientUserNameById
  endpoint:
    path: /ValkeyModule_GetClientUserNameById
    method: GET
    data_selector: client_user_name
    params: {}
- name: MustObeyClient
  endpoint:
    path: /ValkeyModule_MustObeyClient
    method: GET
    data_selector: must_obey_client
    params: {}
- name: GetClientInfoById
  endpoint:
    path: /ValkeyModule_GetClientInfoById
    method: GET
    data_selector: client_info
    params: {}
- name: GetClientNameById
  endpoint:
    path: /ValkeyModule_GetClientNameById
    method: GET
    data_selector: client_name
    params: {}
- name: SetClientNameById
  endpoint:
    path: /ValkeyModule_SetClientNameById
    method: GET
    data_selector: set_client_name
    params: {}
- name: PublishMessage
  endpoint:
    path: /ValkeyModule_PublishMessage
    method: GET
    data_selector: publish_message
    params: {}
- name: PublishMessageShard
  endpoint:
    path: /ValkeyModule_PublishMessageShard
    method: GET
    data_selector: publish_message_shard
    params: {}
- name: GetSelectedDb
  endpoint:
    path: /ValkeyModule_GetSelectedDb
    method: GET
    data_selector: selected_db
    params: {}
- name: GetContextFlags
  endpoint:
    path: /ValkeyModule_GetContextFlags
    method: GET
    data_selector: context_flags
    params: {}
- name: ZsetIncrby
  endpoint:
    path: /ValkeyModule/ZsetIncrby
    method: GET
- name: ZsetRem
  endpoint:
    path: /ValkeyModule/ZsetRem
    method: GET
- name: ZsetScore
  endpoint:
    path: /ValkeyModule/ZsetScore
    method: GET
- name: ZsetRangeStop
  endpoint:
    path: /ValkeyModule/ZsetRangeStop
    method: GET
- name: ZsetRangeEndReached
  endpoint:
    path: /ValkeyModule/ZsetRangeEndReached
    method: GET
- name: ZsetFirstInScoreRange
  endpoint:
    path: /ValkeyModule/ZsetFirstInScoreRange
    method: GET
- name: ZsetLastInScoreRange
  endpoint:
    path: /ValkeyModule/ZsetLastInScoreRange
    method: GET
- name: ZsetFirstInLexRange
  endpoint:
    path: /ValkeyModule/ZsetFirstInLexRange
    method: GET
- name: ZsetLastInLexRange
  endpoint:
    path: /ValkeyModule/ZsetLastInLexRange
    method: GET
- name: ZsetRangeCurrentElement
  endpoint:
    path: /ValkeyModule/ZsetRangeCurrentElement
    method: GET
- name: ZsetRangeNext
  endpoint:
    path: /ValkeyModule/ZsetRangeNext
    method: GET
- name: ZsetRangePrev
  endpoint:
    path: /ValkeyModule/ZsetRangePrev
    method: GET
- name: HashSet
  endpoint:
    path: /ValkeyModule/HashSet
    method: GET
- name: HashGet
  endpoint:
    path: /ValkeyModule/HashGet
    method: GET
- name: StreamAdd
  endpoint:
    path: /ValkeyModule/StreamAdd
    method: GET
- name: StreamDelete
  endpoint:
    path: /ValkeyModule/StreamDelete
    method: GET
- name: StreamIteratorStart
  endpoint:
    path: /ValkeyModule/StreamIteratorStart
    method: GET
- name: StreamIteratorStop
  endpoint:
    path: /ValkeyModule/StreamIteratorStop
    method: GET
- name: StreamIteratorNextID
  endpoint:
    path: /ValkeyModule/StreamIteratorNextID
    method: GET
- name: ZsetIncrby
  endpoint:
    path: /ValkeyModule/ZsetIncrby
    method: POST
    data_selector: result
- name: ZsetRem
  endpoint:
    path: /ValkeyModule/ZsetRem
    method: POST
    data_selector: result
- name: ZsetScore
  endpoint:
    path: /ValkeyModule/ZsetScore
    method: POST
    data_selector: result
- name: HashSet
  endpoint:
    path: /ValkeyModule/HashSet
    method: POST
    data_selector: result
- name: HashGet
  endpoint:
    path: /ValkeyModule/HashGet
    method: POST
    data_selector: result
- name: StreamAdd
  endpoint:
    path: /ValkeyModule/StreamAdd
    method: POST
    data_selector: result
- name: StreamDelete
  endpoint:
    path: /ValkeyModule/StreamDelete
    method: POST
    data_selector: result
- name: StreamIteratorNextField
  endpoint:
    path: /ValkeyModule_StreamIteratorNextField
    method: GET
    data_selector: field_ptr, value_ptr
    params: {}
- name: StreamIteratorDelete
  endpoint:
    path: /ValkeyModule_StreamIteratorDelete
    method: GET
    data_selector: ''
    params: {}
- name: StreamTrimByLength
  endpoint:
    path: /ValkeyModule_StreamTrimByLength
    method: GET
    data_selector: length
    params: {}
- name: StreamTrimByID
  endpoint:
    path: /ValkeyModule_StreamTrimByID
    method: GET
    data_selector: id
    params: {}
- name: Call
  endpoint:
    path: /ValkeyModule_Call
    method: POST
    data_selector: reply
    params: {}
- name: StreamIteratorNextField
  endpoint:
    path: ValkeyModule_StreamIteratorNextField
    method: GET
    data_selector: field_ptr, value_ptr
    params: {}
- name: StreamIteratorDelete
  endpoint:
    path: ValkeyModule_StreamIteratorDelete
    method: GET
    data_selector: key
    params: {}
- name: StreamTrimByLength
  endpoint:
    path: ValkeyModule_StreamTrimByLength
    method: GET
    data_selector: key, flags, length
    params: {}
- name: StreamTrimByID
  endpoint:
    path: ValkeyModule_StreamTrimByID
    method: GET
    data_selector: key, flags, id
    params: {}
- name: Call
  endpoint:
    path: ValkeyModule_Call
    method: POST
    data_selector: ctx, cmdname, fmt, ...
    params: {}
- name: ValkeyModule_CreateDataType
  endpoint:
    path: /ValkeyModule_CreateDataType
    method: POST
    data_selector: moduleType
    params: {}
- name: ValkeyModule_ModuleTypeSetValue
  endpoint:
    path: /ValkeyModule_ModuleTypeSetValue
    method: POST
    data_selector: int
    params: {}
- name: ValkeyModule_ModuleTypeGetType
  endpoint:
    path: /ValkeyModule_ModuleTypeGetType
    method: GET
    data_selector: moduleType
    params: {}
- name: ValkeyModule_ModuleTypeGetValue
  endpoint:
    path: /ValkeyModule_ModuleTypeGetValue
    method: GET
    data_selector: void
    params: {}
- name: ValkeyModule_IsIOError
  endpoint:
    path: /ValkeyModule_IsIOError
    method: GET
    data_selector: int
    params: {}
- name: ValkeyModule_SaveUnsigned
  endpoint:
    path: /ValkeyModule_SaveUnsigned
    method: POST
    data_selector: void
    params: {}
- name: ValkeyModule_LoadUnsigned
  endpoint:
    path: /ValkeyModule_LoadUnsigned
    method: GET
    data_selector: uint64_t
    params: {}
- name: ValkeyModule_SaveSigned
  endpoint:
    path: /ValkeyModule_SaveSigned
    method: POST
    data_selector: void
    params: {}
- name: ValkeyModule_LoadSigned
  endpoint:
    path: /ValkeyModule_LoadSigned
    method: GET
    data_selector: int64_t
    params: {}
- name: ValkeyModule_SaveString
  endpoint:
    path: /ValkeyModule_SaveString
    method: POST
    data_selector: void
    params: {}
- name: ValkeyModule_LoadString
  endpoint:
    path: /ValkeyModule_LoadString
    method: GET
    data_selector: ValkeyModuleString
    params: {}
- name: GetThreadSafeContext
  endpoint:
    path: /ValkeyModule_GetThreadSafeContext
    method: GET
    data_selector: ValkeyModuleCtx
    params: {}
- name: GetDetachedThreadSafeContext
  endpoint:
    path: /ValkeyModule_GetDetachedThreadSafeContext
    method: GET
    data_selector: ValkeyModuleCtx
    params: {}
- name: FreeThreadSafeContext
  endpoint:
    path: /ValkeyModule_FreeThreadSafeContext
    method: POST
    data_selector: void
    params: {}
- name: ThreadSafeContextLock
  endpoint:
    path: /ValkeyModule_ThreadSafeContextLock
    method: POST
    data_selector: void
    params: {}
- name: ThreadSafeContextTryLock
  endpoint:
    path: /ValkeyModule_ThreadSafeContextTryLock
    method: POST
    data_selector: int
    params: {}
- name: ThreadSafeContextUnlock
  endpoint:
    path: /ValkeyModule_ThreadSafeContextUnlock
    method: POST
    data_selector: void
    params: {}
- name: SubscribeToKeyspaceEvents
  endpoint:
    path: /ValkeyModule_SubscribeToKeyspaceEvents
    method: POST
    data_selector: int
    params: {}
- name: AddPostNotificationJob
  endpoint:
    path: /ValkeyModule_AddPostNotificationJob
    method: POST
    data_selector: int
    params: {}
- name: NotifyKeyspaceEvent
  endpoint:
    path: /ValkeyModule_NotifyKeyspaceEvent
    method: POST
    data_selector: int
    params: {}
- name: RegisterClusterMessageReceiver
  endpoint:
    path: /ValkeyModule_RegisterClusterMessageReceiver
    method: POST
    data_selector: void
    params: {}
- name: SendClusterMessage
  endpoint:
    path: /ValkeyModule_SendClusterMessage
    method: POST
    data_selector: int
    params: {}
- name: GetClusterNodesList
  endpoint:
    path: /ValkeyModule_GetClusterNodesList
    method: GET
    data_selector: char**
    params: {}
- name: FreeClusterNodesList
  endpoint:
    path: /ValkeyModule_FreeClusterNodesList
    method: POST
    data_selector: void
    params: {}
- name: GetMyClusterID
  endpoint:
    path: /ValkeyModule_GetMyClusterID
    method: GET
    data_selector: const char*
    params: {}
- name: GetClusterSize
  endpoint:
    path: /ValkeyModule_GetClusterSize
    method: GET
    data_selector: size_t
    params: {}
- name: GetClusterNodeInfo
  endpoint:
    path: /ValkeyModule_GetClusterNodeInfo
    method: GET
    data_selector: int
    params: {}
- name: CreateTimer
  endpoint:
    path: /ValkeyModule_CreateTimer
    method: POST
    data_selector: ValkeyModuleTimerID
    params: {}
- name: StopTimer
  endpoint:
    path: /ValkeyModule_StopTimer
    method: POST
    data_selector: int
    params: {}
- name: GetTimerInfo
  endpoint:
    path: /ValkeyModule_GetTimerInfo
    method: GET
    data_selector: int
    params: {}
- name: EventLoopAdd
  endpoint:
    path: /ValkeyModule_EventLoopAdd
    method: POST
    data_selector: int
    params: {}
- name: EventLoopDel
  endpoint:
    path: /ValkeyModule_EventLoopDel
    method: POST
    data_selector: int
    params: {}
- name: EventLoopAddOneShot
  endpoint:
    path: /ValkeyModule_EventLoopAddOneShot
    method: POST
    data_selector: int
    params: {}
- name: ValkeyModule_GetThreadSafeContext
  endpoint:
    path: /ValkeyModule_GetThreadSafeContext
    method: GET
- name: ValkeyModule_GetDetachedThreadSafeContext
  endpoint:
    path: /ValkeyModule_GetDetachedThreadSafeContext
    method: GET
- name: ValkeyModule_FreeThreadSafeContext
  endpoint:
    path: /ValkeyModule_FreeThreadSafeContext
    method: GET
- name: ValkeyModule_ThreadSafeContextLock
  endpoint:
    path: /ValkeyModule_ThreadSafeContextLock
    method: GET
- name: ValkeyModule_ThreadSafeContextTryLock
  endpoint:
    path: /ValkeyModule_ThreadSafeContextTryLock
    method: GET
- name: ValkeyModule_ThreadSafeContextUnlock
  endpoint:
    path: /ValkeyModule_ThreadSafeContextUnlock
    method: GET
- name: ValkeyModule_SubscribeToKeyspaceEvents
  endpoint:
    path: /ValkeyModule_SubscribeToKeyspaceEvents
    method: GET
- name: ValkeyModule_AddPostNotificationJob
  endpoint:
    path: /ValkeyModule_AddPostNotificationJob
    method: GET
- name: ValkeyModule_GetNotifyKeyspaceEvents
  endpoint:
    path: /ValkeyModule_GetNotifyKeyspaceEvents
    method: GET
- name: ValkeyModule_NotifyKeyspaceEvent
  endpoint:
    path: /ValkeyModule_NotifyKeyspaceEvent
    method: GET
- name: ValkeyModule_RegisterClusterMessageReceiver
  endpoint:
    path: /ValkeyModule_RegisterClusterMessageReceiver
    method: GET
- name: ValkeyModule_SendClusterMessage
  endpoint:
    path: /ValkeyModule_SendClusterMessage
    method: GET
- name: ValkeyModule_GetClusterNodesList
  endpoint:
    path: /ValkeyModule_GetClusterNodesList
    method: GET
- name: ValkeyModule_FreeClusterNodesList
  endpoint:
    path: /ValkeyModule_FreeClusterNodesList
    method: GET
- name: ValkeyModule_GetMyClusterID
  endpoint:
    path: /ValkeyModule_GetMyClusterID
    method: GET
- name: ValkeyModule_GetClusterSize
  endpoint:
    path: /ValkeyModule_GetClusterSize
    method: GET
- name: ValkeyModule_GetClusterNodeInfo
  endpoint:
    path: /ValkeyModule_GetClusterNodeInfo
    method: GET
- name: ValkeyModule_SetClusterFlags
  endpoint:
    path: /ValkeyModule_SetClusterFlags
    method: GET
- name: ValkeyModule_ClusterKeySlot
  endpoint:
    path: /ValkeyModule_ClusterKeySlot
    method: GET
- name: ValkeyModule_ClusterCanonicalKeyNameInSlot
  endpoint:
    path: /ValkeyModule_ClusterCanonicalKeyNameInSlot
    method: GET
- name: ValkeyModule_CreateTimer
  endpoint:
    path: /ValkeyModule_CreateTimer
    method: GET
- name: ValkeyModule_StopTimer
  endpoint:
    path: /ValkeyModule_StopTimer
    method: GET
- name: ValkeyModule_GetTimerInfo
  endpoint:
    path: /ValkeyModule_GetTimerInfo
    method: GET
- name: ValkeyModule_EventLoopAdd
  endpoint:
    path: /ValkeyModule_EventLoopAdd
    method: GET
- name: ValkeyModule_EventLoopDel
  endpoint:
    path: /ValkeyModule_EventLoopDel
    method: GET
- name: ValkeyModule_EventLoopAddOneShot
  endpoint:
    path: /ValkeyModule_EventLoopAddOneShot
    method: GET
- name: CreateModuleUser
  endpoint:
    path: /ValkeyModule_CreateModuleUser
    method: POST
    data_selector: user
- name: FreeModuleUser
  endpoint:
    path: /ValkeyModule_FreeModuleUser
    method: POST
    data_selector: result
- name: SetModuleUserACL
  endpoint:
    path: /ValkeyModule_SetModuleUserACL
    method: POST
    data_selector: result
- name: SetModuleUserACLString
  endpoint:
    path: /ValkeyModule_SetModuleUserACLString
    method: POST
    data_selector: result
- name: GetModuleUserACLString
  endpoint:
    path: /ValkeyModule_GetModuleUserACLString
    method: GET
    data_selector: aclString
- name: GetCurrentUserName
  endpoint:
    path: /ValkeyModule_GetCurrentUserName
    method: GET
    data_selector: username
- name: GetModuleUserFromUserName
  endpoint:
    path: /ValkeyModule_GetModuleUserFromUserName
    method: GET
    data_selector: user
- name: ACLCheckCommandPermissions
  endpoint:
    path: /ValkeyModule_ACLCheckCommandPermissions
    method: POST
    data_selector: result
- name: ACLCheckKeyPermissions
  endpoint:
    path: /ValkeyModule_ACLCheckKeyPermissions
    method: POST
    data_selector: result
- name: ACLCheckChannelPermissions
  endpoint:
    path: /ValkeyModule_ACLCheckChannelPermissions
    method: POST
    data_selector: result
- name: ACLAddLogEntry
  endpoint:
    path: /ValkeyModule_ACLAddLogEntry
    method: POST
    data_selector: result
- name: ACLAddLogEntryByUserName
  endpoint:
    path: /ValkeyModule_ACLAddLogEntryByUserName
    method: POST
    data_selector: result
- name: AuthenticateClientWithUser
  endpoint:
    path: /ValkeyModule_AuthenticateClientWithUser
    method: POST
    data_selector: result
- name: AuthenticateClientWithACLUser
  endpoint:
    path: /ValkeyModule_AuthenticateClientWithACLUser
    method: POST
    data_selector: result
- name: DeauthenticateAndCloseClient
  endpoint:
    path: /ValkeyModule_DeauthenticateAndCloseClient
    method: POST
    data_selector: result
- name: RedactClientCommandArgument
  endpoint:
    path: /ValkeyModule_RedactClientCommandArgument
    method: POST
    data_selector: result
- name: GetClientCertificate
  endpoint:
    path: /ValkeyModule_GetClientCertificate
    method: GET
    data_selector: certificate
- name: DefragCursorGet
  endpoint:
    path: /ValkeyModule/DefragCursorGet
    method: GET
- name: DefragAlloc
  endpoint:
    path: /ValkeyModule/DefragAlloc
    method: GET
- name: DefragValkeyModuleString
  endpoint:
    path: /ValkeyModule/DefragValkeyModuleString
    method: GET
- name: GetKeyNameFromDefragCtx
  endpoint:
    path: /ValkeyModule/GetKeyNameFromDefragCtx
    method: GET
- name: GetDbIdFromDefragCtx
  endpoint:
    path: /ValkeyModule/GetDbIdFromDefragCtx
    method: GET
- name: strings
  endpoint:
    path: /strings
    method: SET
    data_selector: records
    params: {}
- name: hashes
  endpoint:
    path: /hashes
    method: HSET
    data_selector: records
    params: {}
- name: lists
  endpoint:
    path: /lists
    method: GET
    data_selector: records
    params: {}
- name: ACL
  endpoint:
    path: /acl
    method: GET
    data_selector: commands
    params: {}
- name: COMMAND
  endpoint:
    path: /command
    method: GET
    data_selector: commands
    params: {}
- name: CONFIG
  endpoint:
    path: /config
    method: GET
    data_selector: parameters
    params: {}
- name: DBSIZE
  endpoint:
    path: /dbsize
    method: GET
    data_selector: size
    params: {}
- name: INFO
  endpoint:
    path: /info
    method: GET
    data_selector: statistics
    params: {}
- name: LASTSAVE
  endpoint:
    path: /lastsave
    method: GET
    data_selector: timestamp
    params: {}
- name: MEMORY
  endpoint:
    path: /memory
    method: GET
    data_selector: usage
    params: {}
- name: SHUTDOWN
  endpoint:
    path: /shutdown
    method: POST
    data_selector: shutdown
    params: {}
- name: TIME
  endpoint:
    path: /time
    method: GET
    data_selector: server_time
    params: {}
- name: basic_commands
  endpoint:
    path: /commands/#hash
    method: GET
    data_selector: commands
    params: {}
- name: sorted_sets
  endpoint:
    path: /sorted_sets
    method: GET
    data_selector: records
    params: {}
- name: lists
  endpoint:
    path: /lists
    method: GET
    data_selector: records
    params: {}
- name: bloom_filter
  endpoint:
    path: /commands/bf
    method: GET
    data_selector: commands
    params: {}
- name: sorted_set
  endpoint:
    path: /commands/sorted_set
    method: GET
    data_selector: records
    params: {}
- name: bloom_filter_commands
  endpoint:
    path: /commands/bf
    method: GET
    data_selector: commands
    params: {}
- name: bloom_filter
  endpoint:
    path: /commands/bf.add
    method: POST
    data_selector: results
- name: bloom_commands
  endpoint:
    path: /commands/bf.add
    method: POST
    data_selector: commands
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: FT.CREATE
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: FT.DROPINDEX
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: FT.INFO
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: FT._LIST
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: FT.SEARCH
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: ACL
  endpoint:
    path: /ACL
    method: GET
    data_selector: commands
    params: {}
- name: COMMANDLOG
  endpoint:
    path: /COMMANDLOG
    method: GET
    data_selector: logs
    params: {}
- name: CONFIG
  endpoint:
    path: /CONFIG
    method: GET
    data_selector: configuration
    params: {}
- name: INFO
  endpoint:
    path: /INFO
    method: GET
    data_selector: server_info
    params: {}
- name: LATENCY
  endpoint:
    path: /LATENCY
    method: GET
    data_selector: latency_data
    params: {}
- name: MEMORY
  endpoint:
    path: /MEMORY
    method: GET
    data_selector: memory_stats
    params: {}
- name: valkey_cluster
  endpoint:
    path: /valkey/cluster
    method: GET
    data_selector: nodes
    params: {}
- name: BITOP
  endpoint:
    path: /commands/BITOP
    method: GET
- name: bitcount
  endpoint:
    path: /commands/BITCOUNT
    method: GET
- name: GETBIT
  endpoint:
    path: /GETBIT
    method: GET
- name: BITFIELD_RO
  endpoint:
    path: /commands/bitfield_ro
    method: GET
    data_selector: ''
    params: {}
- name: BITOP
  endpoint:
    path: /commands/BITOP
    method: GET
    data_selector: command
    params: {}
- name: BF.CARD
  endpoint:
    path: /BF.CARD
    method: GET
- name: GETBIT
  endpoint:
    path: /GETBIT
    method: GET
- name: BF.EXISTS
  endpoint:
    path: /commands/BF.EXISTS
    method: GET
    data_selector: responses
- name: BF.ADD
  endpoint:
    path: /commands/bf.add
    method: GET
- name: bloom_filter_info
  endpoint:
    path: /BF.INFO
    method: GET
    data_selector: info_fields
    params: {}
- name: BF.CARD
  endpoint:
    path: /BF.CARD
    method: GET
    data_selector: integer reply
- name: BF.MADD
  endpoint:
    path: /BF.MADD
    method: POST
    data_selector: response
    params: {}
- name: BF.INFO
  endpoint:
    path: BF.INFO
    method: GET
- name: BF.INSERT
  endpoint:
    path: /BF.INSERT
    method: GET
    data_selector: records
    params: {}
- name: BF.RESERVE
  endpoint:
    path: /BF.RESERVE
    method: COMMAND
    data_selector: response
    params: {}
- name: BF.MADD
  endpoint:
    path: /commands/bf.madd
    method: GET
- name: BF.MEXISTS
  endpoint:
    path: /BF.MEXISTS
    method: COMMAND
    data_selector: response
- name: cluster_addslots
  endpoint:
    path: /cluster/addslots
    method: POST
    data_selector: ''
    params: {}
- name: BF.RESERVE
  endpoint:
    path: /BF.RESERVE
    method: COMMAND
    data_selector: response
    params: {}
- name: CLUSTER ADDSLOTSRANGE
  endpoint:
    path: /commands/cluster-addslotsrange
    method: GET
    data_selector: OK
- name: CLUSTER ADDSLOTSRANGE
  endpoint:
    path: /commands/cluster-addslotsrange
    method: GET
- name: cluster_count_failure_reports
  endpoint:
    path: /CLUSTER/COUNT-FAILURE-REPORTS
    method: GET
    data_selector: failure_reports
    params: {}
- name: cluster_count_failure_reports
  endpoint:
    path: /CLUSTER/COUNT-FAILURE-REPORTS
    method: GET
    data_selector: integer reply
- name: CLUSTER COUNTKEYSINSLOT
  endpoint:
    path: /CLUSTER COUNTKEYSINSLOT
    method: GET
    data_selector: integer reply
- name: CLUSTER COUNTKEYSINSLOT
  endpoint:
    path: /CLUSTER/COUNTKEYSINSLOT
    method: GET
- name: CLUSTER DELSLOTS
  endpoint:
    path: /commands/cluster/delslots
    method: POST
    data_selector: OK
- name: cluster_delslots
  endpoint:
    path: /commands/cluster-delslots
    method: POST
    data_selector: OK
- name: cluster_get_keys_in_slot
  endpoint:
    path: /CLUSTER/GETKEYSINSLOT
    method: GET
    data_selector: array
- name: get_keys_in_slot
  endpoint:
    path: /cluster/getkeysinslot
    method: GET
    data_selector: array reply
- name: cluster_info
  endpoint:
    path: /CLUSTER/INFO
    method: GET
    data_selector: cluster_info
- name: cluster_info
  endpoint:
    path: /commands/cluster/info
    method: GET
    data_selector: cluster_info
    params: {}
- name: CLUSTER KEYSLOT
  endpoint:
    path: /CLUSTER/KEYSLOT
    method: GET
    data_selector: integer reply
- name: CLUSTER MEET
  endpoint:
    path: /CLUSTER/MEET
    method: COMMAND
    data_selector: OK
    params: {}
- name: cluster_links
  endpoint:
    path: /CLUSTER LINKS
    method: GET
    data_selector: array
- name: CLUSTER REPLICATE
  endpoint:
    path: /cluster/replicate
    method: POST
    data_selector: response
    params: {}
- name: CLUSTER REPLICATE
  endpoint:
    path: /CLUSTER REPLICATE
    method: GET
- name: shards
  endpoint:
    path: /CLUSTER/SHARDS
    method: GET
    data_selector: shards
- name: slot_stats
  endpoint:
    path: /CLUSTER/SLOT-STATS
    method: GET
    data_selector: array
- name: slot_usage_statistics
  endpoint:
    path: /CLUSTER_SLOT-STATS
    method: GET
    data_selector: array
- name: cluster_slots
  endpoint:
    path: /cluster/slots
    method: GET
    data_selector: nested result array
- name: CLIENT UNBLOCK
  endpoint:
    path: /CLIENT UNBLOCK
    method: GET
- name: ECHO
  endpoint:
    path: /ECHO
    method: POST
    data_selector: message
- name: CLIENT SETINFO
  endpoint:
    path: /commands/client-setinfo
    method: GET
    data_selector: attributes
    params: {}
- name: SELECT
  endpoint:
    path: /SELECT
    method: GET
- name: COPY
  endpoint:
    path: /COPY
    method: GET
- name: DEL
  endpoint:
    path: /DEL
    method: DEL
- name: CLIENT UNBLOCK
  endpoint:
    path: /CLIENT/UNBLOCK
    method: GET
- name: EXISTS
  endpoint:
    path: /EXISTS
    method: GET
- name: PING
  endpoint:
    path: /PING
    method: GET
    data_selector: PONG
    params: {}
- name: EXPIREAT
  endpoint:
    path: /commands/EXPIREAT
    method: GET
    data_selector: usage
- name: SELECT
  endpoint:
    path: /SELECT
    method: GET
- name: expiretime
  endpoint:
    path: /commands/expiretime
    method: GET
    data_selector: expiration_timestamp
    params: {}
- name: COPY
  endpoint:
    path: /COPY
    method: SET
    data_selector: ''
    params: {}
- name: DUMP
  endpoint:
    path: /DUMP
    method: GET
    data_selector: serialized value
    params: {}
- name: EXISTS
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: MIGRATE
  endpoint:
    path: /MIGRATE
    method: COMMAND
    data_selector: OK
    params: {}
- name: PERSIST
  endpoint:
    path: /PERSIST
    method: SET
    data_selector: integer reply
    params: {}
- name: expiretime
  endpoint:
    path: /commands/expiretime
    method: GET
    data_selector: expirationTimestamp
    params: {}
- name: PEXPIRETIME
  endpoint:
    path: /commands/pexpiretime
    method: GET
    data_selector: integer reply
    params: {}
- name: PTTL
  endpoint:
    path: /PTTL
    method: GET
    data_selector: ''
    params: {}
- name: PERSIST
  endpoint:
    path: /commands/PERSIST
    method: GET
    data_selector: response
    params: {}
- name: RENAME
  endpoint:
    path: /commands/rename
    method: POST
- name: PEXPIRETIME
  endpoint:
    path: /commands/pexpiretime
    method: GET
    data_selector: integer reply
    params: {}
- name: RESTORE
  endpoint:
    path: /RESTORE
    method: POST
    data_selector: ''
    params: {}
- name: RENAMENX
  endpoint:
    path: /RENAMENX
    method: POST
    data_selector: ''
- name: TOUCH
  endpoint:
    path: /TOUCH
    method: POST
    data_selector: integer reply
- name: TTL
  endpoint:
    path: TTL
    method: COMMAND
    data_selector: integer reply
    params: {}
- name: SCAN
  endpoint:
    path: /scan
    method: GET
    data_selector: elements
- name: TYPE
  endpoint:
    path: TYPE
    method: GET
- name: SORT
  endpoint:
    path: /commands/sort
    method: GET
    data_selector: commands
    params: {}
- name: UNLINK
  endpoint:
    path: /commands/unlink
    method: POST
- name: TOUCH
  endpoint:
    path: TOUCH
    method: GET
- name: TTL
  endpoint:
    path: /commands/ttl
    method: GET
    data_selector: TTL
    params: {}
- name: TYPE
  endpoint:
    path: TYPE
    method: GET
- name: WAITAOF
  endpoint:
    path: /commands/WAITAOF
    method: GET
    data_selector: response
- name: geospatial_distance
  endpoint:
    path: /geodist
    method: GET
    data_selector: distance
    params: {}
- name: geohash
  endpoint:
    path: /geohash
    method: GET
    data_selector: Geohash strings
- name: geopos
  endpoint:
    path: /geopos
    method: GET
    data_selector: array
- name: geodist
  endpoint:
    path: /GEODIST
    method: GET
    data_selector: distance
    params: {}
- name: georadiusbymember
  endpoint:
    path: /GEORADIUSBYMEMBER_RO
    method: GET
- name: GEOHASH
  endpoint:
    path: /GEOHASH
    method: GET
- name: geopos
  endpoint:
    path: GEOPOS
    method: GET
    data_selector: array
- name: GEOSEARCHSTORE
  endpoint:
    path: /GEOSEARCHSTORE
    method: GET
    data_selector: response
    params: {}
- name: GEORADIUSBYMEMBER
  endpoint:
    path: /GEORADIUSBYMEMBER
    method: GET
- name: HDEL Command
  endpoint:
    path: /HDEL
    method: POST
    data_selector: response
    params: {}
- name: HEXISTS
  endpoint:
    path: /HEXISTS
    method: GET
    data_selector: ''
    params: {}
- name: georadiusbymember
  endpoint:
    path: /GEORADIUSBYMEMBER_RO
    method: GET
- name: HEXPIRE
  endpoint:
    path: /HEXPIRE
    method: POST
    data_selector: result
    params: {}
- name: HEXPIREAT
  endpoint:
    path: /commands/hexpireat
    method: GET
    data_selector: fields
    params: {}
- name: HEXPIRETIME
  endpoint:
    path: /commands/HEXPIRETIME
    method: GET
    data_selector: response
- name: geosearchstore
  endpoint:
    path: /GEOSEARCHSTORE
    method: GET
    data_selector: results
    params: {}
- name: HGET
  endpoint:
    path: /HGET
    method: GET
- name: HDEL
  endpoint:
    path: /HDEL
    method: POST
- name: HGETALL
  endpoint:
    path: /HGETALL
    method: GET
    data_selector: fields
    params: {}
- name: HEXISTS
  endpoint:
    path: HEXISTS
    method: GET
    data_selector: field
    params: {}
- name: HEXPIRE
  endpoint:
    path: HEXPIRE
    method: COMMAND
    data_selector: fields
    params: {}
- name: HEXPIREAT
  endpoint:
    path: /commands/hexpireat
    method: GET
    data_selector: ''
    params: {}
- name: HINCRBYFLOAT
  endpoint:
    path: /commands/hincrbyfloat
    method: GET
    data_selector: usage
    params: {}
- name: HEXPIRETIME
  endpoint:
    path: /commands/hexpiretime
    method: GET
- name: HKEYS
  endpoint:
    path: HKEYS
    method: GET
    data_selector: field names
    params: {}
- name: HGET
  endpoint:
    path: /HGET
    method: GET
- name: hlen
  endpoint:
    path: /HLEN
    method: GET
    data_selector: fields_count
- name: HGETALL
  endpoint:
    path: /HGETALL
    method: GET
    data_selector: fields
    params: {}
- name: HMGET
  endpoint:
    path: /commands/hmget
    method: GET
    data_selector: values
    params: {}
- name: HMSET
  endpoint:
    path: HMSET
    method: POST
- name: HPERSIST
  endpoint:
    path: /HPERSIST
    method: COMMAND
    data_selector: results
- name: HINCRBY
  endpoint:
    path: /commands/HINCRBY
    method: GET
    data_selector: usage
- name: HPEXPIRE
  endpoint:
    path: /commands/HPEXPIRE
    method: GET
    data_selector: fields
    params: {}
- name: HPEXPIREAT
  endpoint:
    path: /commands/hpexpire
    method: GET
- name: HINCRBYFLOAT
  endpoint:
    path: /commands/hincrbyfloat
    method: GET
    data_selector: examples
    params: {}
- name: HPTTL
  endpoint:
    path: HPTTL
    method: COMMAND
    data_selector: FIELDS
- name: HKEYS
  endpoint:
    path: /HKEYS
    method: GET
- name: HRANDFIELD
  endpoint:
    path: /HRANDFIELD
    method: GET
- name: HLEN
  endpoint:
    path: /HLEN
    method: GET
    data_selector: fields_count
- name: HSET
  endpoint:
    path: /HSET
    method: POST
    data_selector: fields
    params: {}
- name: HMSET
  endpoint:
    path: /HMSET
    method: GET
- name: HSETEX
  endpoint:
    path: /commands/hsetex
    method: GET
    data_selector: FIELDS
- name: HPERSIST
  endpoint:
    path: HPERSIST
    method: COMMAND
    data_selector: FIELDS
- name: HPEXPIRE
  endpoint:
    path: /commands/hpexpire
    method: POST
- name: HPEXPIREAT
  endpoint:
    path: /commands/hpexpire
    method: GET
- name: HSTRLEN
  endpoint:
    path: /HSTRLEN
    method: GET
    data_selector: returns
    params: {}
- name: HPEXPIRETIME
  endpoint:
    path: /commands/HPEXPIRETIME
    method: GET
    data_selector: result
    params: {}
- name: HPTTL
  endpoint:
    path: /HPTTL
    method: GET
- name: HRANDFIELD
  endpoint:
    path: /HRANDFIELD
    method: GET
- name: PFADD
  endpoint:
    path: /commands/pfadd
    method: GET
    data_selector: integer reply
- name: HSET
  endpoint:
    path: /HSET
    method: COMMAND
    data_selector: usage
- name: PFCOUNT
  endpoint:
    path: /PFCOUNT
    method: GET
    data_selector: cardinality
    params: {}
- name: PFMERGE
  endpoint:
    path: /PFMERGE
    method: COMMAND
    data_selector: response
    params: {}
- name: HSTRLEN
  endpoint:
    path: /HSTRLEN
    method: GET
    data_selector: returns
    params: {}
- name: HVALS
  endpoint:
    path: /HVALS
    method: GET
    data_selector: values
- name: JSON.ARRPOP
  endpoint:
    path: /commands/JSON.ARRPOP
    method: GET
- name: PFMERGE
  endpoint:
    path: /PFMERGE
    method: GET
    data_selector: response
    params: {}
- name: JSON.ARRAPPEND
  endpoint:
    path: /commands/JSON.ARRAPPEND
    method: GET
- name: JSON.ARRPOP
  endpoint:
    path: /JSON/ARRPOP
    method: GET
- name: JSON.SET
  endpoint:
    path: /commands/JSON.SET
    method: POST
- name: JSON.GET
  endpoint:
    path: JSON.GET
    method: GET
- name: JSON.MGET
  endpoint:
    path: JSON.MGET
    method: GET
- name: valkey-json
  endpoint:
    path: /commands/JSON.MSET
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: BLPOP
  endpoint:
    path: /commands/blpop
    method: POST
    data_selector: response
- name: JSON.SET
  endpoint:
    path: /commands/JSON.SET
    method: POST
- name: LINDEX
  endpoint:
    path: /LINDEX
    method: GET
- name: LINSERT
  endpoint:
    path: /LINSERT
    method: GET
- name: JSON.STRLEN
  endpoint:
    path: /JSON.STRLEN
    method: GET
- name: LLEN
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: BLPOP
  endpoint:
    path: BLPOP
    method: GET
- name: LPOP
  endpoint:
    path: /LPOP
    method: POST
- name: LPOS
  endpoint:
    path: /LPOS
    method: COMMAND
    data_selector: results
- name: BRPOPLPUSH
  endpoint:
    path: /BRPOPLPUSH
    method: POST
- name: LINDEX
  endpoint:
    path: /LINDEX
    method: GET
    data_selector: element
    params: {}
- name: LRANGE
  endpoint:
    path: /LRANGE
    method: GET
- name: LLEN
  endpoint:
    path: /LLEN
    method: GET
    data_selector: length
    params: {}
- name: LSET
  endpoint:
    path: /commands/lset
    method: GET
- name: LTRIM
  endpoint:
    path: /LTRIM
    method: COMMAND
    data_selector: OK
    params: {}
- name: LMPOP
  endpoint:
    path: /commands/lmpop
    method: GET
    data_selector: response
- name: RPOP
  endpoint:
    path: /RPOP
    method: GET
- name: LPOP
  endpoint:
    path: /commands/LPOP
    method: GET
- name: RPOPLPUSH
  endpoint:
    path: /commands/RPOPLPUSH
    method: GET
    data_selector: response
    params: {}
- name: LPOS
  endpoint:
    path: /LPOS
    method: GET
- name: RPUSH
  endpoint:
    path: /commands/rpush
    method: GET
    data_selector: usage
    params: {}
- name: LPUSH
  endpoint:
    path: /commands/LPUSH
    method: POST
- name: LRANGE
  endpoint:
    path: /LRANGE
    method: GET
    data_selector: elements
    params: {}
- name: shardnumsub
  endpoint:
    path: /PUBSUB/SHARDNUMSUB
    method: GET
    data_selector: subscribers
    params: {}
- name: shardchannel
  endpoint:
    path: /shardchannel
    method: POST
- name: LSET
  endpoint:
    path: /commands/lset
    method: GET
    data_selector: LSET
    params: {}
- name: shard_channels
  endpoint:
    path: /ssubscribe
    method: POST
    data_selector: ssubscribe
    params: {}
- name: RPOP
  endpoint:
    path: /RPOP
    method: GET
- name: EVAL
  endpoint:
    path: /eval
    method: POST
    data_selector: response
    params: {}
- name: RPOPLPUSH
  endpoint:
    path: /commands/RPOPLPUSH
    method: GET
    data_selector: response
    params: {}
- name: RPUSH
  endpoint:
    path: /commands/RPUSH
    method: POST
    data_selector: records
    params: {}
- name: FUNCTION DELETE
  endpoint:
    path: /FUNCTION DELETE
    method: DELETE
- name: function_dump
  endpoint:
    path: /commands/function-dump
    method: GET
- name: function_flush
  endpoint:
    path: /FUNCTION_FLUSH
    method: POST
- name: shardnumsub
  endpoint:
    path: /pubsub/shardnumsub
    method: GET
    data_selector: subscribers
- name: shardchannel
  endpoint:
    path: /shardchannel
    method: POST
    data_selector: clients_received
    params: {}
- name: shard_channel
  endpoint:
    path: /shardchannel
    method: SSUBSCRIBE
- name: SCRIPT EXISTS
  endpoint:
    path: /commands/script-exists
    method: GET
- name: FCALL
  endpoint:
    path: /commands/FCALL
    method: GET
- name: SCRIPT LOAD
  endpoint:
    path: /SCRIPT LOAD
    method: GET
- name: FUNCTION DELETE
  endpoint:
    path: /FUNCTION DELETE
    method: DELETE
- name: FUNCTION DUMP
  endpoint:
    path: /function/dump
    method: GET
- name: FT.CREATE
  endpoint:
    path: /FT.CREATE
    method: GET
    data_selector: records
    params: {}
- name: function_flush
  endpoint:
    path: /function/flush
    method: POST
- name: function_list
  endpoint:
    path: /commands/function_list
    method: GET
- name: FT.SEARCH
  endpoint:
    path: /FT.SEARCH
    method: GET
    data_selector: results
    params: {}
- name: function_load
  endpoint:
    path: /FUNCTION LOAD
    method: POST
    data_selector: library
    params: {}
- name: function_restore
  endpoint:
    path: /function/restore
    method: POST
- name: ACL_DELUSER
  endpoint:
    path: /acl/deluser
    method: POST
- name: ACL DRYRUN
  endpoint:
    path: /ACL/DRYRUN
    method: GET
- name: script_exists
  endpoint:
    path: SCRIPT EXISTS
    method: GET
- name: ACL GENPASS
  endpoint:
    path: /ACL/GENPASS
    method: POST
- name: get_user
  endpoint:
    path: ACL GETUSER
    method: GET
- name: SCRIPT FLUSH
  endpoint:
    path: /SCRIPT/FLUSH
    method: POST
- name: acl_list
  endpoint:
    path: /acl/list
    method: GET
- name: SCRIPT LOAD
  endpoint:
    path: /commands/script-load
    method: GET
    data_selector: bulk string reply
- name: ACL LOAD
  endpoint:
    path: /ACL/LOAD
    method: GET
- name: FT.CREATE
  endpoint:
    path: /FT.CREATE
    method: POST
    data_selector: ''
- name: acl_log
  endpoint:
    path: /acl/log
    method: GET
    data_selector: entries
- name: FT.INFO
  endpoint:
    path: /FT.INFO
    method: GET
    data_selector: response
    params: {}
- name: acl_setuser_command
  endpoint:
    path: /acl/setuser
    method: POST
    data_selector: response
    params: {}
- name: search
  endpoint:
    path: /FT.SEARCH
    method: GET
    data_selector: results
    params: {}
- name: acl_users
  endpoint:
    path: /acl/users
    method: GET
    data_selector: users
- name: ACL DELUSER
  endpoint:
    path: /commands/ACL DELUSER
    method: DELETE
- name: BGSAVE
  endpoint:
    path: /commands/BGSAVE
    method: POST
    data_selector: response
- name: ACL
  endpoint:
    path: /ACL
    method: DRYRUN
- name: command
  endpoint:
    path: /COMMAND
    method: GET
    data_selector: commands
    params: {}
- name: ACL GENPASS
  endpoint:
    path: /ACL/GENPASS
    method: GET
    data_selector: pseudorandom data
- name: ACL GETUSER
  endpoint:
    path: /ACL/GETUSER
    method: GET
- name: command_count
  endpoint:
    path: /COMMAND COUNT
    method: GET
    data_selector: integer reply
- name: acl_list
  endpoint:
    path: /acl/list
    method: GET
- name: ACL LOAD
  endpoint:
    path: /ACL/LOAD
    method: GET
- name: get_keys_and_flags
  endpoint:
    path: /COMMAND GETKEYSANDFLAGS
    method: GET
    data_selector: '@array-reply'
    params: {}
- name: acl_log
  endpoint:
    path: /acl/log
    method: GET
    data_selector: entries
- name: acl_setuser
  endpoint:
    path: /acl/setuser
    method: POST
    data_selector: response
    params: {}
- name: acl_users
  endpoint:
    path: /acl/users
    method: GET
    data_selector: users
- name: whoami
  endpoint:
    path: /acl/whoami
    method: GET
- name: failover
  endpoint:
    path: /commands/failover
    method: POST
    data_selector: response
- name: BGSAVE
  endpoint:
    path: /commands/bgsave
    method: POST
    data_selector: response
- name: command_count
  endpoint:
    path: /COMMAND COUNT
    method: GET
    data_selector: integer reply
    params: {}
- name: get_keys
  endpoint:
    path: /COMMAND/GETKEYS
    method: GET
- name: get_keys_and_flags
  endpoint:
    path: /COMMAND GETKEYSANDFLAGS
    method: GET
- name: command_log
  endpoint:
    path: /COMMANDLOG/GET
    method: GET
notes:
- This function can be called after creating a command using ValkeyModule_CreateCommand
  and fetching the command pointer using ValkeyModule_GetCommand.
- Available since version 4.0.0 for most functions.
- Stream related functions available since version 6.2.0.
- Available since 6.2.0 for StreamIterator functions.
- Available since 4.0.0 for Call functions.
- Available since 6.2.0
- Handles replies from commands.
- There is no guarantee that the key name is always available, so this may return
  NULL.
- There is no guarantee that this info is always available, so this may return -1.
- Thread safe context must be prepared before making calls.
- Notification callbacks must be fast to avoid slowing down the server.
- Requires authentication setup
- Valkey is not officially supported on Windows. However, you can install Valkey on
  Windows for development using WSL (Windows Subsystem for Linux).
- If you use Valkey in a very controlled environment, separated from the external
  internet and in general from attackers, that's fine. However, if an unhardened Valkey
  is exposed to the internet, it is a big security concern.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Valkey supports various data types including strings, hashes, lists, sets, and sorted
  sets.
- Consider using TTLs for keys representing transient data to prevent them from living
  forever.
- By default, a single String can be a maximum of 512 MB.
- Lists are implemented via Linked Lists.
- The max length of a List is 2^32 - 1 (4,294,967,295) elements.
- Hashes are record types structured as collections of field-value pairs.
- The number of fields you can put inside a hash has no practical limits.
- Valkey does not have authentication by default and binds to all interfaces.
- Valkey is a fully open-source, in-memory data store backed by the Linux Foundation
- Valkey supports many other native data structures
- Sorted sets are implemented via a dual-ported data structure containing both a skip
  list and a hash table.
- Most sorted set operations are O(log(n)), where n is the number of members.
- Valkey JSON provides native JSON support for Valkey.
- The implementation complies with RFC7159 and ECMA-404 JSON data interchange standards.
- Max length of a List is 2^32 - 1 (4,294,967,295) elements.
- Users will need to load this module onto their valkey server in order to use this
  feature.
- The number of fields you can put inside a hash has no practical limits (other than
  available memory).
- Users will need to load the valkey-bloom module onto their valkey server in order
  to use this feature.
- Bloom filters are a space efficient probabilistic data structure that allows adding
  elements and checking whether elements exist.
- False positives are possible where a filter incorrectly indicates that an element
  exists, even though it was not added.
- Valkey JSON is a Valkey module written in C++ that provides native JSON support
  for Valkey.
- Users can natively store, query, and modify JSON data structures using the JSONPath
  query language.
- The performance of JSON operations in Valkey is primarily influenced by the complexity
  of the JSONPath evaluation and the size or depth of the JSON object.
- The memory usage limit per bloom filter by default is defined by the BF.BLOOM-MEMORY-USAGE-LIMIT
  module configuration which has a default value of 128 MB.
- The BF.INFO command's SIZE field can be used to find out the current size of a bloom
  filter.
- The BF.INFO command's MAXSCALEDCAPACITY field can be used to find out the maximum
  capacity that the scalable bloom filter can expand to hold.
- LDAP server is used solely for authenticating users.
- Ensure that your LDAP server is configured to limit access for anonymous users to
  prevent unintended data exposure.
- Valkey-Search is optimized for AI-driven workloads.
- Bloom filters guarantee that false negatives do not occur.
- Scaling bloom filters do not have a fixed capacity, instead they can grow.
- Non-scaling bloom filters will have a fixed capacity.
- Valkey Cluster does not support NATted environments.
- For Docker compatibility, use host networking mode.
- Minimal cluster must contain at least three primary nodes.
- For deployment, a six-node cluster with three primaries and three replicas is recommended.
- If created using the script, nodes may listen on different ports, starting from
  30001 by default.
- Memory usage limit per bloom filter by default is defined by the BF.BLOOM-MEMORY-USAGE-LIMIT
  module configuration which has a default value of 128 MB.
- When a bloom filter scales out, a new sub filter is added.
- The limit on the number of sub filters depends on the false positive rate and tightening
  ratio.
- You can use VALIDATESCALETO as an optional arg of BF.INSERT to help determine whether
  the bloom filter can scale out to the reach the specified capacity without hitting
  either limits mentioned above.
- Manual failovers are supported by Valkey Cluster using the CLUSTER FAILOVER command.
- LDAP authentication through the official valkey-ldap module.
- All module configuration options are prefixed with ldap.
- To promote a replica to primary, it must first be known as a replica by a majority
  of the primaries in the cluster.
- If the replica has just been added to the cluster, you may need to wait a while
  before sending the `CLUSTER FAILOVER` command.
- When adding a new node as a replica, it will be added to a random primary among
  the primaries with fewer replicas.
- You can also specify exactly what primary you want to target with your new replica.
- Valkey Cluster does not support NATted environments and in general environments
  where IP addresses or TCP ports are remapped.
- To make Docker compatible with Valkey Cluster, you need to use Docker's host networking
  mode.
- Non-existent keys are treated as empty strings, so the command will return zero.
- Minimum cluster must contain at least three primary nodes.
- For deployment, a six-node cluster is recommended, with three primaries and three
  replicas.
- The command treats a string as an array of bits.
- Supports multiple bit fields in the same command call.
- Manual failovers are safer compared to failovers resulting from actual primary failures.
- Read-only variant of the BITFIELD command.
- Only accepts GET subcommand and can safely be used in read-only replicas.
- Clients sending write commands to the primary are blocked during the failover.
- To remove a primary node it must be empty. If the primary is not empty, you need
  to reshard data away from it to all the other primary nodes before.
- 'BITOP command supports four bitwise operations: AND, OR, XOR, and NOT'
- When performing operations between strings of different lengths, shorter strings
  are zero-padded
- Non-existent keys are treated as empty strings.
- The command treats a string as an array of bits
- The motivation for this command is that the ability to store many small integers
  as a single large bitmap is extremely memory efficient
- When setting the last possible bit (*offset* equal to 2^32 -1) and the string value
  stored at *key* does not yet hold a string value, or holds a small string value,
  Valkey needs to allocate all intermediate memory which can block the server for
  some time.
- Once this first allocation is done, subsequent calls to `SETBIT` for the same *key*
  will not have the allocation overhead.
- BITOP is a potentially slow command as it runs in O(N) time.
- Care should be taken when running it against long input strings.
- Adds a single item to a bloom filter. If the specified bloom filter does not exist,
  a bloom filter is created with the provided name with default properties.
- This does not update the capacity since the filter already exists. It only adds
  the provided items.
- Determines if the provided item/s have been added to a bloom filter previously.
- 'A Bloom filter has two possible responses when you check if an item exists: 0 -
  The item definitely does not exist, 1 - The item exists with a given false positive
  percentage.'
- If the bloom filter does not exist under the specified name, a bloom filter is created
  with the specified parameters.
- Default properties will be used if the options below are not specified.
- Creates an empty bloom filter with the specified capacity and false positive rate.
- It is invalid to provide both options together.
- This command only works in cluster mode and is useful in order to initially setup
  primary nodes splitting the available hash slots among them.
- The command only works if all the specified slots are, from the point of view of
  the node receiving the command, currently not assigned.
- 'This command only works in cluster mode and is useful in the following Valkey Cluster
  operations: To create a new cluster, CLUSTER ADDSLOTSRANGE is used to initially
  set up primary nodes splitting the available hash slots among them. In order to
  fix a broken cluster where certain slots are unassigned.'
- 'This command only works in cluster mode and is useful in the following Valkey Cluster
  operations: To create a new cluster ADDSLOTS is used in order to initially setup
  primary nodes splitting the available hash slots among them.'
- This command is mainly useful for debugging, when the failure detector of Valkey
  Cluster is not operating as we believe it should.
- This command only works in cluster mode and may be useful for debugging and in order
  to manually orchestrate a cluster configuration when a new cluster is created.
- The command only works if all the specified slots are already associated with the
  node.
- The command fails if the same slot is specified multiple times.
- As a side effect of the command execution, the node may go into down state because
  not all hash slots are covered.
- The default failover timeout is 5000ms.
- The timeout can be configured via the cluster-manual-failover-timeout configuration
  parameter.
- A manual failover is a special kind of failover that is usually executed when there
  are no actual failures, but we wish to swap the current primary with one of its
  replicas.
- The TAKEOVER option should be used with care.
- The command returns an array of key names stored in the contacted node and hashing
  to the specified hash slot in the currently selected database.
- Provides INFO style information about Valkey Cluster vital parameters
- Each node in a Valkey Cluster maintains a pair of long-lived TCP link with each
  peer in the cluster.
- This command is mainly useful for debugging and testing, since it exposes via an
  API the underlying Valkey implementation of the hashing algorithm.
- CLUSTER MEET does not need to be reciprocal.
- CLUSTER NODES provides the current cluster configuration of the node we are contacting.
- Use CLUSTER NODES for administrative tasks, debugging, and configuration inspections.
- CLUSTER MEET is used to connect different Valkey nodes with cluster support enabled.
- The command reconfigures a node as a replica of the specified primary.
- Some objects like Contact may return nulls in deeply nested fields
- Starting from Valkey 8.0, CLUSTER SETSLOT is synchronously replicated to all healthy
  replicas running Valkey version 8.0+.
- If the node receiving the command is an empty primary, the node role is changed
  from primary to replica.
- If the command succeeds, the new replica will immediately try to contact its primary
  in order to replicate from it.
- The command returns an array of shards, with each shard containing three fields,
  'slots', 'nodes' and 'id'.
- A shard may only have a single primary at a given time, but may have multiple or
  no replicas.
- In general a client implementation should just rely on the fact that certain parameters
  are at fixed positions as specified, but more parameters may follow and should be
  ignored.
- Clients may treat the empty string in the same way as NULL, that is the same endpoint
  it used to send the current command to, while '?' should be treated as an unknown
  node, not necessarily the same node as the one serving the current command.
- Because of the high performance nature of Valkey, it is possible to try a lot of
  passwords in parallel in very short time, so make sure to generate a strong and
  very long password.
- Returns an array of slot usage statistics for slots assigned to the current shard.
- The command is suitable for Valkey Cluster users aiming to assess general slot usage
  trends.
- This command controls the tracking of the keys in the next command executed by the
  connection, when tracking is enabled in OPTIN or OPTOUT mode.
- A good way to generate strong passwords is via the ACL GENPASS command.
- Due to the single-threaded nature of Valkey, it is not possible to kill a client
  connection while it is executing a command.
- New fields are regularly added for debugging purpose. Some could be removed in the
  future. A version safe Valkey client using this command should parse the output
  accordingly (i.e. handling gracefully missing fields, skipping unknown fields).
- The command just returns the ID of the current connection.
- 'Every connection ID has certain guarantees: It is never repeated and is monotonically
  incremental.'
- 'Client pause currently supports two modes: ALL and WRITE.'
- The recommended mode for client pause is WRITE.
- Some options may introduce additional complexity.
- Due to the single-threaded nature of Valkey, it is not possible to kill a client
  connection while it is executing a command. From the client point of view, the connection
  can never be closed in the middle of the execution of a command. However, the client
  will notice the connection has been closed only when the next command is sent (and
  results in network error).
- New fields are regularly added for debugging purpose. Some could be removed in the
  future.
- This command can unblock a client blocked in a blocking operation.
- This command is useful as it makes able to switch clients from a Valkey instance
  to another one in a controlled way.
- This command performs a full reset of the connection's server-side context, mimicking
  the effect of disconnecting and reconnecting again.
- Enables tracking feature for server assisted client side caching
- This command can unblock, from a different connection, a client blocked in a blocking
  operation.
- A key with an associated timeout is often said to be volatile in Valkey terminology.
- The timeout can also be cleared, turning the key back into a persistent key.
- EXPIREAT has the same effect and semantic as EXPIRE, but instead of specifying the
  number of seconds representing the TTL, it takes an absolute Unix timestamp.
- A timestamp in the past will delete the key immediately.
- Consider KEYS as a command that should only be used in production environments with
  extreme care.
- It may ruin performance when executed against large databases.
- The command is atomic and blocks the two instances for the time required to transfer
  the key, at any given time the key will appear to exist in a given instance or in
  the other instance, unless a timeout error occurs.
- The timeout can also be cleared, turning the key back into a persistent key, using
  the PERSIST command.
- If a key is renamed with RENAME, the associated time to live is transferred to the
  new key name.
- This command works exactly like EXPIRE but the time to live of the key is specified
  in milliseconds instead of seconds.
- Returns the absolute Unix timestamp in seconds at which the given key will expire.
- PEXPIREAT has the same effect and semantic as EXPIREAT, but the Unix time at which
  the key will expire is specified in milliseconds instead of seconds.
- The GT, LT and NX options are mutually exclusive.
- This command is intended for debugging and special operations, such as changing
  your keyspace layout.
- Returns the absolute Unix expiration timestamp in milliseconds instead of seconds.
- The command is atomic and blocks the two instances for the time required to transfer
  the key.
- When there is an I/O error during the transfer or if the timeout is reached the
  operation is aborted.
- Renames `key` to `newkey`.
- It returns an error when `key` does not exist.
- If `newkey` already exists it is overwritten.
- In Cluster mode, both key and newkey must be in the same hash slot, meaning that
  in practice only keys that have the same hash tag can be reliably renamed in cluster.
- If ttl is 0 the key is created without any expire, otherwise the specified expire
  time (in milliseconds) is set.
- SCAN is a cursor based iterator.
- A full iteration retrieves all elements that were present in the collection from
  start to end.
- In Cluster mode, both key and newkey must be in the same hash slot.
- Read-only variant of the SORT command.
- RESTORE will return a "Target key name is busy" error when key already exists unless
  you use the REPLACE modifier.
- Alters the last access time of a key(s).
- SCAN command and related commands allow incremental iteration over collections.
- SCAN family commands may return duplicate elements.
- Refuses the STORE option.
- A timeout of 0 means to block forever.
- Uses WAITAOF command to block until specified write confirmations are acknowledged.
- Valid longitudes are from -180 to 180 degrees.
- Valid latitudes are from -85.05112878 to 85.05112878 degrees.
- When WAIT returns, all the previous write commands sent in the context of the current
  connection are guaranteed to be received by the number of replicas returned by WAIT.
- When WAITAOF returns, all the previous write commands sent in the context of the
  current connection are guaranteed to be fsynced to the AOF of at least the number
  of primaries and replicas returned by WAITAOF.
- WAITAOF cannot be used on replica instances, and the numlocal argument cannot be
  non-zero if the local Valkey does not have AOF enabled.
- 'The radius is specified in one of the following units: m for meters, km for kilometers,
  mi for miles, ft for feet.'
- 'The command optionally returns additional information using the following options:
  WITHDIST, WITHCOORD, WITHHASH.'
- 'The unit must be one of the following, and defaults to meters: m for meters, km
  for kilometers, mi for miles, ft for feet.'
- The distance is computed assuming that the Earth is a perfect sphere, so errors
  up to 0.5% are possible in edge cases.
- Read-only variant of the GEORADIUSBYMEMBER command.
- Read-only variant of the GEORADIUS command.
- Uses GEOADD to retrieve geospatial items
- Default is to return unsorted items
- This command replaces the now deprecated GEORADIUS and GEORADIUSBYMEMBER.
- This command is exactly like GEORADIUS with the sole difference that instead of
  taking, as the center of the area to query, a longitude and latitude value, it takes
  the name of a member already existing inside the geospatial index represented by
  the sorted set.
- This command is identical to the GEORADIUSBYMEMBER command, except that it doesn't
  support the optional STORE and STOREDIST parameters.
- This command is identical to the GEORADIUS command, except that it doesn't support
  the optional STORE and STOREDIST parameters.
- This command should be used in place of the deprecated GEORADIUS and GEORADIUSBYMEMBER
  commands.
- The EX, PX, EXAT, PXAT, and PERSIST options are mutually exclusive.
- Providing '0' expiration TTL via EX or PX optional arguments will cause the specified
  fields to expire immediately and be removed from the hash.
- Providing past expiration time via EXAT or PXAT optional arguments will cause the
  specified fields to expire immediately and be removed from the hash.
- If key does not exist, a new key holding a hash is created.
- If field does not exist the value is set to 0 before the operation is performed.
- HEXPIREAT has the same effect and semantic as HEXPIRE, but instead of specifying
  the number of seconds representing the TTL (time to live), it takes an absolute
  Unix timestamp (seconds since January 1, 1970).
- If the increment value is negative, the result is to have the hash field value decremented
  instead of incremented.
- An error is returned if the key contains a value of the wrong type (not a hash).
- The command is always propagated in the replication link and the Append Only File
  as a HSET operation.
- Returns the number of fields contained in the hash stored at `key`.
- The EX, PX, EXAT, PXAT, and KEEPTTL options are mutually exclusive.
- Setting a value on a volatile hash field will remove the expiration for that field.
- Providing '0' expiration TTL will result in the specified fields immediately expiring.
- Providing past expiration time will result in the specified fields immediately expiring.
- Sets field in the hash stored at key to value, only if field does not yet exist.
- If field already exists, this operation has no effect.
- When called with a single key, returns the approximated cardinality computed by
  the HyperLogLog data structure stored at the specified variable.
- The returned cardinality of the observed set is not exact, but approximated with
  a standard error of 0.81%.
- EX, PX, EXAT, PXAT, and KEEPTTL options are mutually exclusive.
- Sets `field` in the hash stored at `key` to `value`, only if `field` does not yet
  exist.
- If `key` does not exist, a new key holding a hash is created.
- If `field` already exists, this operation has no effect.
- Out of range errors are treated by rounding the index to the array's start and end.
- If start > end, return -1 (not found).
- Automatically creates an empty HyperLogLog structure if the specified key does not
  exist.
- If the array is empty, do nothing, return 0.
- If start < 0, treat it as 0.
- If end >= size (size of the array), treat it as size-1.
- If start >= size or start > end, empty the array and return 0.
- When called with a single key, returns the approximated cardinality computed by
  the HyperLogLog data structure stored at the specified variable, which is 0 if the
  variable does not exist.
- When called with multiple keys, returns the approximated cardinality of the union
  of the HyperLogLogs passed, by internally merging the HyperLogLogs stored at the
  provided keys into a temporary HyperLogLog.
- The operation is atomic. Either all values are set or none is set.
- 'Complexity: O(N) where N is the number of json values matched by the path.'
- Clear the arrays or objects at the path.
- 'Complexity: O(1)'
- 'Complexity: O(N) where N is the number of json objects matched by the path.'
- When source is empty, Valkey will block the connection until another client pushes
  to it or until timeout is reached.
- A timeout of zero can be used to block indefinitely.
- The index is zero-based, so 0 means the first element, 1 the second element and
  so on.
- Negative indices can be used to designate elements starting at the tail of the list.
- 'Complexity: O(N) where N is the number of string values matched by the path.'
- This command comes in place of the now deprecated RPOPLPUSH.
- Doing LMOVE RIGHT LEFT is equivalent.
- 'Complexity: O(N) where N is the number of elements in the list'
- When COUNT is used and no match is found, an empty array is returned.
- Insert all the specified values at the head of the list stored at key.
- If key does not exist, it is created as empty list before performing the push operations.
- Inserts specified values at the head of the list stored at key, only if key already
  exists and holds a list.
- Inserts `element` in the list stored at `key` either before or after the reference
  value `pivot.
- An error is returned when `key` exists but does not hold a list value.
- Insert all the specified values at the head of the list stored at `key`.
- When `key` holds a value that is not a list, an error is returned.
- Inserts specified values at the tail of the list stored at key, only if key already
  exists and holds a list.
- In contrary to RPUSH, no operation will be performed when key does not yet exist.
- Out of range indexes will not produce an error.
- A common use of LTRIM is together with LPUSH / RPUSH.
- This is very useful when using Valkey to store logs for example.
- To ensure the correct execution of scripts, both in standalone and clustered deployments,
  all names of keys that a script accesses must be explicitly provided as input key
  arguments.
- Starting from Valkey 8.0, scripts loaded with EVAL or EVAL_RO will be deleted from
  Valkey after a certain number (least recently used order).
- 'Important: To ensure the correct execution of functions, both in standalone and
  clustered deployments, all names of keys that a function accesses must be explicitly
  provided as input key arguments.'
- Returns the number of subscribers for the specified shard channels.
- Subscribes the client to the specified shard channels.
- The command receives a single mandatory parameter which is the source code that
  implements the library.
- The library payload must start with Shebang statement that provides a metadata about
  the library (like the engine to use and the library name).
- For the Lua engine, the implementation should declare one or more entry points to
  the library with the server.register_function() API.
- 'APPEND: appends the restored libraries to the existing libraries and aborts on
  collision.'
- 'FLUSH: deletes all existing libraries before restoring the payload.'
- 'REPLACE: appends the restored libraries to the existing libraries, replacing any
  existing ones in case of name collisions.'
- to ensure the correct execution of scripts, both in standalone and clustered deployments,
  all names of keys that a script accesses must be explicitly provided as input key
  arguments.
- Scripts should never access keys with programmatically-generated names or based
  on the contents of data structures stored in the database.
- This is a read-only variant of the EVAL command that cannot execute commands that
  modify data.
- Uses FT.SEARCH for querying indices
- The first entry in the response array represents the count of matching keys
- ACL categories are very useful in order to create ACL rules that include or exclude
  a large set of commands at once, without specifying every single command.
- Avoid debugging Lua scripts using your Valkey production server. Use a development
  server instead.
- This command accepts one or more SHA1 digests and returns a list of ones or zeros
  to signal if the scripts are already defined or not inside the script cache.
- By default, it emits 256 bits (so 64 hex characters).
- The number of bits provided is always rounded to the next multiple of 4.
- By default, SCRIPT FLUSH will synchronously flush the cache.
- Setting the lazyfree-lazy-user-flush configuration directive to 'yes' changes the
  default flush mode to asynchronous.
- If every line in the file is valid, all the ACLs are loaded.
- If one or more line in the file is not valid, nothing is loaded.
- The command shows a list of recent ACL security events.
- 'Complexity: O(N). Where N is the number of rules provided.'
- If the username does not exist, the command creates the username without any privilege.
- Only the resulting key names are returned when NOCONTENT is specified.
- COMMAND GETKEYS is a helper command to let you find the keys from a full Valkey
  command.
- If one or more line in the file is not valid, nothing is loaded, and the old ACL
  rules defined in the server memory continue to be used.
- 'Complexity: O(N) where N is the number of commands to look up'
- If you request details about non-existing commands, their return position will be
  nil
- Entries are displayed starting from the most recent.
- The Command Log system is used to record commands that consume significant resources
  during server operation.
- Each log type has a threshold value that determines when a command is logged.
- Configuration parameters can be read using CONFIG GET command.
- Creates an ACL user with the specified rules or modifies the rules of an existing
  user.
- Using multiple selectors allows you to grant permissions that are different depending
  on what keys are being accessed.
- 'Complexity: O(N). Where N is the number of configured users.'
- The failover command is intended to be safe from data loss and corruption.
- If a multi-primary scenario is encountered, you will need to manually identify which
  primary has the latest data.
- An error is returned if there is already a background save running or if there is
  another non-background-save process running
- If `BGSAVE SCHEDULE` is used, the command will immediately return `OK` when an AOF
  rewrite is in progress and schedule the background save to run at the next opportunity
- If `BGSAVE CANCEL` is used, it will immediately terminate any in-progress RDB save
  or replication full sync process
- An asynchronous FLUSHALL command only deletes keys that were present at the time
  the command was invoked.
- This command is introspective and describes all commands that the server can process.
- The failover command is intended to be safe from data loss and corruption, but can
  encounter some scenarios it can not automatically remediate from and may get stuck.
- If a multi-primary scenario is encountered, you will need to manually identify which
  primary has the latest data and designate it as the primary and have the other replicas.
- By default, FLUSHALL will synchronously flush all the databases.
errors:
- 'EINVAL: Invalid arguments provided.'
- 'ENOTSUP: Operation not supported for the given key type.'
- 'EBADF: Key not opened for writing.'
- 'EINVAL: Invalid arguments'
- 'ENOTSUP: Key type not supported'
- 'EBADF: Key not opened for writing'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'Connection refused: Ensure the Valkey server process is running.'
- 'Keys not found: Check if the key has expired or been evicted.'
- 'Performance issues: Monitor Valkey''s built-in metrics for slowdowns.'
- Exercise some caution when running the ZRANGE command with large returns values
  (e.g., in the tens of thousands or more).
- 'ERR: A general error.'
- 'LIMIT: An error that occurs when the size limit is exceeded.'
- 'NONEXISTENT: A key or path does not exist.'
- 'OUTOFBOUNDARIES: Array index out of bounds.'
- 'SYNTAXERR: Syntax error.'
- 'WRONGTYPE: Wrong value type.'
- WRONGTYPE Operation against a key holding the wrong kind of value
- ERR operation exceeds bloom object memory limit
- ERR provided VALIDATESCALETO causes bloom object to exceed memory limit
- Cluster will not work as expected if both TCP ports are not open.
- An error will occur if input is invalid, if a non bloom filter key with the same
  name already exists, if the bloom filter creation / scale out exceeds limits, or
  if an item is being added to a full non scaling filter.
- ERR cannot use NONSCALING and VALIDATESCALETO options together
- ERR provided VALIDATESCALETO causes false positive to degrade to 0
- ERR not found
- (error) ERR item exists
- ERR Slot 1 is already busy
- 'ERR item exists: occurs if a key with the same name already exists.'
- An error will occur if input is invalid, or if the bloom filter creation exceeds
  limits.
- Invalid address specified.
- If the port or cluster bus port number is out of range, or if an invalid address
  is specified, an error is returned.
- NOREPLICAS Not enough good replicas to write
- -UNBLOCKED client unblocked via CLIENT UNBLOCK
- 0 if the timeout was not set; for example, the key doesn't exist, or the operation
  was skipped because of the provided arguments.
- 1 if the timeout was set.
- 'IOERR: check if the key is also present in the target instance'
- 'NOKEY: returned when no keys were found in the source instance.'
- 'WARNING: May ruin performance when it is executed against large databases.'
- 'Integer reply: -1 if the key exists but has no associated expiration time.'
- 'Integer reply: -2 if the key does not exist.'
- 'IOERR: Returned when there is an I/O error during the transfer.'
- 'NOKEY: Returned when there are no keys to migrate in the source instance.'
- '-2: The key does not exist.'
- '-1: The key exists but has no associated expire.'
- 'KEY_NOT_FOUND: The specified key does not exist.'
- 'KEY_EXISTS: The specified newkey already exists.'
- Returns an error when key does not exist.
- -2 if the key does not exist.
- -1 if the key exists but has no associated expire.
- Target key name is busy
- RDB version and data checksum do not match
- 'Invalid cursor: Calling SCAN with a corrupted cursor will result in undefined behavior.'
- Error when the user attempts to index coordinates outside the specified ranges.
- WAITAOF cannot be used on replica instances, and the numlocal argument cannot be
  non-zero if the local Valkey does not have AOF enabled.
- Coordinates outside the specified ranges will report an error.
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '-2: Field does not exist in the HASH, or key does not exist.'
- '0: The specified NX | XX | GT | LT condition has not been met.'
- '1: The expiration time was applied.'
- The current field content or the specified increment are not parsable as a double
  precision floating point number.
- An error is returned if the key contains a value of the wrong type (not a hash).
- An error is returned if the current field content or the specified increment are
  not parsable as a double precision floating point number.
- '0: if none of the provided fields'' values and/or expiration times were set.'
- '1: if all the fields'' values and/or expiration times were set.'
- 0 if none of the provided fields' values and/or expiration times were set.
- 1 if all the fields' values and/or expiration times were set.
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- If the path does not exist.
- If the value at the path is not an array (only for restricted syntax).
- NONEXISTENT JSON path does not exist
- WRONGTYPE JSON element is not a number
- Returns 0 if clearing an empty array or object.
- Returns 0 if clearing a non-container value.
- Returns 0 if no array or object value is located by the path.
- Returns 0 if the Valkey key does not exist.
- Returns 0 if the JSON path is invalid or does not exist.
- When the value at key is not a list, an error is returned.
- if the input json argument is not a valid JSON string.
- if the path does not exist.
- if the value at the path is not a string (only for restricted syntax).
- An invalid *engine-name* was provided.
- The library's name already exists without the `REPLACE` modifier.
- A function in the library is created with a name that already exists in another
  library (even when `REPLACE` is specified).
- The engine failed in creating the library's functions (due to a compilation error,
  for example).
- No functions were declared by the library.
- 'ERR Error running script (call to b0d697da25b13e49157b2c214a4033546aba2104): @user_script:1:
  @user_script: 1: Write commands are not allowed from read-only scripts.'
- 'ERR /tmp/foo:1: Unknown command or category name in ACL...'
- Command will fail if the server is not configured to use an external ACL file.
- WRONGPASS invalid username-password pair
- The command may fail if the file is not readable, if there is an error inside the
  file.
- 'ERR Error in ACL SETUSER modifier ''heeyyyy'': Syntax error'
- Background saving started
- Background saving scheduled
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://lfprojects.org
  headers:
    Accept: application/json
source_metadata: null
