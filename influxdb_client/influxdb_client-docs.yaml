resources:
- name: invoke_script_data_frame
  endpoint:
    path: /modules/influxdb_client/client/invokable_scripts_api.html#InvokableScriptsApi.invoke_script_data_frame
    method: GET
    data_selector: result
    params: {}
- name: invoke_script_data_frame_stream
  endpoint:
    path: /modules/influxdb_client/client/invokable_scripts_api.html#InvokableScriptsApi.invoke_script_data_frame_stream
    method: GET
    data_selector: result
    params: {}
- name: invoke_script_raw
  endpoint:
    path: /modules/influxdb_client/client/invokable_scripts_api.html#InvokableScriptsApi.invoke_script_raw
    method: GET
    data_selector: result
    params: {}
- name: invoke_script_stream
  endpoint:
    path: /modules/influxdb_client/client/invokable_scripts_api.html#InvokableScriptsApi.invoke_script_stream
    method: GET
    data_selector: result
    params: {}
- name: update_script
  endpoint:
    path: /modules/influxdb_client/client/invokable_scripts_api.html#InvokableScriptsApi.update_script
    method: POST
    data_selector: result
    params: {}
- name: invoke_script_csv
  endpoint:
    path: /modules/influxdb_client/client/invokable_scripts_api.html#InvokableScriptsApi.invoke_script_csv
    method: GET
    data_selector: result
    params: {}
- name: write_api
  endpoint:
    path: /write
    method: POST
    data_selector: records
- name: organizations
  endpoint:
    path: /api/v2/orgs
    method: GET
- name: users
  endpoint:
    path: /api/v2/users
    method: GET
- name: tasks
  endpoint:
    path: /api/v2/tasks
    method: GET
    data_selector: Tasks
    params:
      limit: 500
- name: create_script
  endpoint:
    path: /create_script
    method: POST
- name: delete_script
  endpoint:
    path: /delete_script
    method: DELETE
- name: find_scripts
  endpoint:
    path: /find_scripts
    method: GET
- name: invoke_script
  endpoint:
    path: /invoke_script
    method: POST
- name: update_script
  endpoint:
    path: /update_script
    method: PUT
- name: delete
  endpoint:
    path: /api/v2/delete
    method: DELETE
    data_selector: null
    params: {}
- name: my_measurement
  endpoint:
    path: /my-bucket
    method: POST
    data_selector: ''
    params: {}
- name: write
  endpoint:
    path: /api/v2/write
    method: POST
- name: query
  endpoint:
    path: /api/v2/query
    method: POST
- name: delete
  endpoint:
    path: /api/v2/delete
    method: POST
- name: organizations
  endpoint:
    path: /api/v2/orgs
    method: GET
- name: write
  endpoint:
    path: /api/v2/write
    method: POST
    data_selector: records
- name: query
  endpoint:
    path: /api/v2/query
    method: POST
    data_selector: tables
- name: delete
  endpoint:
    path: /api/v2/delete
    method: POST
    data_selector: result
- name: temperature_data
  endpoint:
    path: /write
    method: POST
    data_selector: records
- name: query_data
  endpoint:
    path: /query
    method: GET
    data_selector: tables
- name: query
  endpoint:
    path: /api/v2/query
    method: GET
    data_selector: FluxTable
    params: {}
- name: WriteApiAsync
  endpoint:
    path: /api/v2/write
    method: POST
- name: delete
  endpoint:
    path: /api/v2/delete
    method: DELETE
    data_selector: null
    params: {}
- name: bucket
  endpoint:
    path: /buckets
    method: POST
    data_selector: buckets
    params: {}
notes:
- For the optimal processing of the query results use the pivot() function which align
  results as a table.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Delete Time series data from InfluxDB.
- It is recommended to use `ciso8601` with client for parsing dates.
- The Flux Profiler package provides performance profiling tools for Flux queries
  and operations.
- When the profiler is enabled, the result of flux query contains additional tables
  'profiler/'.
- The default instance of WriteApi use batching.
- Client does not enable gzip compression for http requests by default.
- The client removes 'Authorization' header on redirects for security.
- The 'username/password' auth is based on the HTTP 'Basic' authentication.
- Client uses Python’s logging facility for logging the library activity.
- Create Bucket with retention policy set to 3600 seconds and name 'bucket-by-python'
- Uses profilers in Flux queries for performance analysis
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'TimeoutError: Increase timeout for handling HTTP requests.'
- 'CancelledError: Ensure proper handling of asynchronous operations.'
- '401 Unauthorized: Recheck token validity or permissions.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '500 Internal Server Error: Check server status or logs.'
auth_info:
  mentioned_objects: []
client:
  base_url: http://localhost:8086
  auth:
    token: my-token
  headers: {}
  paginator: {}
source_metadata: null
