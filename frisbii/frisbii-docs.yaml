resources:
- name: customer_note
  endpoint:
    path: /v1/customer/{handle}/note
    method: POST
- name: charge_session
  endpoint:
    path: /v1/session/charge
    method: POST
    data_selector: order
    params: {}
- name: get_charge
  endpoint:
    path: /v1/charge/{handle}
    method: GET
    data_selector: charge
    params: {}
- name: settle_charge
  endpoint:
    path: /v1/charge/{handle}/settle
    method: POST
    data_selector: charge
    params: {}
- name: subscription
  endpoint:
    path: /v1/subscription
    method: POST
    data_selector: subscription
    params: {}
- name: pending_subscription
  endpoint:
    path: /v1/subscription/prepare
    method: POST
    data_selector: pending_subscription
    params: {}
- name: subscription_session
  endpoint:
    path: /v1/session/subscription
    method: POST
    data_selector: session
    params: {}
- name: Add-Ons
  endpoint:
    path: /reference/add_on
    method: GET
- name: payout
  endpoint:
    path: /payouts
    method: POST
    data_selector: payouts
    params: {}
- name: payout
  endpoint:
    path: /v1/payout/{handle}
    method: GET
- name: payouts
  endpoint:
    path: /v1/payouts
    method: POST
- name: payout
  endpoint:
    path: /v1/payout/{handle}
    method: GET
    data_selector: payout
    params: {}
- name: list_of_payouts
  endpoint:
    path: /v1/payouts
    method: POST
    data_selector: content
    params: {}
- name: create_payout
  endpoint:
    path: /v1/payouts
    method: POST
    data_selector: payout
    params: {}
- name: SSH RSA 4096 bit
  endpoint:
    path: ssh-rsa
    method: GET
    data_selector: public key
    params: {}
- name: SSH EdDSA ED25519
  endpoint:
    path: ssh-ed25519
    method: GET
    data_selector: public key
    params: {}
- name: subscription
  endpoint:
    path: /v1/list/subscription
    method: GET
    data_selector: subscription
    params:
      customer: cust-001
      state: active
- name: subscription_management
  endpoint:
    path: /subscription
    method: GET
- name: subscriptions
  endpoint:
    path: /v1/list/subscription
    method: GET
    data_selector: subscriptions
    params:
      customer: cust-001
      state: active
- name: subscription
  endpoint:
    path: /v1/subscription
    method: POST
    data_selector: response
    params: {}
- name: payment_method
  endpoint:
    path: /v1/list/payment_method
    method: GET
    data_selector: response
    params: {}
- name: cancel_subscription
  endpoint:
    path: /v1/subscription/{handle}/cancel
    method: POST
    data_selector: null
    params: {}
- name: uncancel_subscription
  endpoint:
    path: /v1/subscription/{handle}/uncancel
    method: POST
    data_selector: null
    params: {}
- name: subscription
  endpoint:
    path: /v1/subscription
    method: POST
    data_selector: response
    params: {}
- name: payment_method
  endpoint:
    path: /v1/list/payment_method
    method: GET
    data_selector: response
    params: {}
- name: hosted_page_links
  endpoint:
    path: /paymentinfo/myaccount/4bc5f5f5536146a8b745aeab555162df
    method: GET
    data_selector: payment_info
    params: {}
- name: subscription
  endpoint:
    path: /v1/subscription/{handle}/cancel
    method: POST
    data_selector: null
    params: {}
- name: subscription_reinstate
  endpoint:
    path: /v1/subscription/{handle}/uncancel
    method: POST
    data_selector: null
    params: {}
- name: subscription
  endpoint:
    path: /v1/subscription
    method: POST
    data_selector: null
    params: {}
- name: hosted_page_links
  endpoint:
    path: /paymentinfo/myaccount/4bc5f5f5536146a8b745aeab555162df
    method: GET
    data_selector: payment_info
    params: {}
- name: invoice
  endpoint:
    path: /v1/subscription/{subscription_id}/invoice
    method: POST
    data_selector: invoice
    params: {}
- name: subscription
  endpoint:
    path: /v1/subscription
    method: POST
    data_selector: ''
    params: {}
- name: subscription_add_ons
  endpoint:
    path: /api/v1/subscription-add-ons
    method: GET
    data_selector: add_ons
- name: invoice
  endpoint:
    path: /v1/subscription/{subscription_id}/invoice
    method: POST
    data_selector: ''
    params: {}
- name: subscription_add_ons
  endpoint:
    path: /api/addons
    method: GET
    data_selector: records
- name: add_ons
  endpoint:
    path: /subscription/add-ons
    method: GET
- name: add_on
  endpoint:
    path: /v1/add_on
    method: POST
    data_selector: null
    params: {}
- name: subscription
  endpoint:
    path: /v1/subscription
    method: POST
    data_selector: subscription_add_ons
    params: {}
- name: add_on
  endpoint:
    path: /v1/add_on
    method: POST
    data_selector: add_on
    params: {}
- name: subscription_add_ons
  endpoint:
    path: /v1/subscription/leasing_00425/add_on
    method: GET
    data_selector: ''
- name: subscription
  endpoint:
    path: /v1/subscription
    method: POST
    data_selector: subscription_add_ons
- name: subscription
  endpoint:
    path: /v1/list/subscription
    method: GET
    data_selector: content
    params:
      subscription_add_on_handle: sn764654216
      state: active
- name: subscription_add_ons
  endpoint:
    path: /v1/subscription/leasing_00425/add_on
    method: GET
    data_selector: ''
- name: subscription_change
  endpoint:
    path: /v1/subscription/leasing_00425
    method: PUT
    data_selector: subscription_add_ons
    params: {}
- name: subscription
  endpoint:
    path: /v1/list/subscription
    method: GET
    data_selector: content
    params:
      subscription_add_on_handle: sn764654216
      state: active
- name: charge_session
  endpoint:
    path: /v1/session/charge
    method: POST
    data_selector: recurring
    params: {}
- name: create_subscription
  endpoint:
    path: /v1/subscription
    method: POST
    data_selector: handle
    params: {}
- name: subscription
  endpoint:
    path: /v1/subscription/leasing_00425
    method: PUT
    data_selector: pending_change
    params: {}
- name: charge_session
  endpoint:
    path: /v1/session/charge
    method: POST
    data_selector: null
    params: {}
- name: create_subscription
  endpoint:
    path: /v1/subscription
    method: POST
    data_selector: null
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/session/charge
    method: POST
    data_selector: order
    params: {}
- name: applepay_recurring
  endpoint:
    path: /applepay/recurring
    method: POST
    data_selector: session_data
- name: charge
  endpoint:
    path: /v1/session/charge
    method: POST
    data_selector: order
    params: {}
- name: import_mps_payment_method
  endpoint:
    path: /payment_method/import_mps
    method: POST
    data_selector: reference
    params: {}
- name: apple_pay_recurring
  endpoint:
    path: /apple_pay/recurring
    method: POST
    data_selector: session_data
    params:
      applepay_recurring_payment_start_date: yyyy-MM-dd
      applepay_recurring_payment_end_date: yyyy-MM-dd
      applepay_recurring_payment_interval_unit:
      - year
      - month
      - day
      applepay_recurring_payment_interval_count: count
      applepay_recurring_label: label
      applepay_recurring_amount: amount
      applepay_recurring_trial_label: trial_label
      applepay_recurring_trial_amount: trial_amount
- name: swish_payment
  endpoint:
    path: /swish/payment
    method: POST
- name: charge_session
  endpoint:
    path: /reference/createchargesession
    method: GET
- name: recurring
  endpoint:
    path: /reference/createrecurringsession
    method: GET
- name: subscription
  endpoint:
    path: /reference/createsubscriptionsession
    method: GET
- name: import_mps_payment_method
  endpoint:
    path: /v1/pay/v1/payment_method/import_mps
    method: POST
    data_selector: reference
    params:
      customer_handle: ''
      mobile_pay_id: ''
- name: Swish
  endpoint:
    path: /
    method: GET
- name: klarna_checkout_session
  endpoint:
    path: /v1/session/charge
    method: POST
    data_selector: order
    params: {}
- name: session
  endpoint:
    path: /v1/session/charge
    method: POST
    data_selector: order
    params: {}
- name: Vipps MobilePay Agreement
  endpoint:
    path: /api/vipps-agreement
    method: GET
    data_selector: agreements
    params: {}
- name: create_checkout_session
  endpoint:
    path: /checkout/sessions
    method: POST
    data_selector: data
    params: {}
- name: import_vipps_recurring_payment_method
  endpoint:
    path: /import/vipps/recurring/payment/method
    method: POST
    data_selector: data
    params: {}
- name: create_klarna_checkout_session
  endpoint:
    path: /v1/session/charge
    method: POST
- name: checkout_session
  endpoint:
    path: /v1/session/charge
    method: POST
    data_selector: order
    params: {}
- name: account_info
  endpoint:
    data_selector: account_info
    params: {}
- name: risk_indicator
  endpoint:
    data_selector: risk_indicator
    params: {}
- name: checkout_languages
  endpoint:
    path: /checkout/languages
    method: GET
- name: charge_session
  endpoint:
    path: /v1/session/charge
    method: POST
    data_selector: data
    params: {}
- name: charge_session
  endpoint:
    path: /v1/session/charge
    method: POST
    data_selector: data
    params: {}
- name: recurring_session
  endpoint:
    path: /v1/session/recurring
    method: POST
    data_selector: data
    params: {}
- name: charge_session
  endpoint:
    path: /reference/createchargesession
    method: GET
- name: create_session
  endpoint:
    path: /create/session
    method: POST
    data_selector: sca_data
- name: get_charge
  endpoint:
    path: /get/charge
    method: GET
    data_selector: source
- name: payment_method_metadata_update
  endpoint:
    path: /v1/payment_method/metadata_update
    method: POST
    data_selector: data
- name: payment_method_status_update
  endpoint:
    path: /v1/payment_method/status_update
    method: POST
    data_selector: data
- name: Checkout Languages
  endpoint:
    path: /checkout/languages
    method: GET
    data_selector: locales
    params: {}
- name: charge_session
  endpoint:
    path: /v1/session/charge
    method: POST
    data_selector: data
    params: {}
- name: session_charge
  endpoint:
    path: /v1/session/charge
    method: POST
    data_selector: ''
- name: session_recurring
  endpoint:
    path: /v1/session/recurring
    method: POST
    data_selector: ''
- name: transaction_errors
  endpoint:
    path: /reference/transaction-errors
    method: GET
- name: Init
  endpoint:
    path: /checkout/init
    method: POST
    data_selector: event
    params: {}
- name: Open
  endpoint:
    path: /checkout/open
    method: GET
    data_selector: event
    params: {}
- name: Close
  endpoint:
    path: /checkout/close
    method: POST
    data_selector: event
    params: {}
- name: Accept
  endpoint:
    path: /checkout/accept
    method: POST
    data_selector: event
    params: {}
- name: Cancel
  endpoint:
    path: /checkout/cancel
    method: POST
    data_selector: event
    params: {}
- name: Error
  endpoint:
    path: /checkout/error
    method: POST
    data_selector: event
    params: {}
- name: webhook
  endpoint:
    path: /reference/getwebhooklist
    method: GET
    data_selector: webhooks
- name: payment_method_metadata_update
  endpoint:
    path: /v1/payment_method/metadata_update
    method: POST
    data_selector: data
    params: {}
- name: payment_method_status_update
  endpoint:
    path: /v1/payment_method/status_update
    method: POST
    data_selector: data
    params: {}
- name: webhook_content
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: account
  endpoint:
    path: /reference/account
    method: GET
- name: customer
  endpoint:
    path: /reference/customer
    method: GET
- name: subscription
  endpoint:
    path: /reference/subscription
    method: GET
- name: invoice
  endpoint:
    path: /v1/list/invoice
    method: GET
    data_selector: content
    params:
      range: created
- name: account
  endpoint:
    path: /reference/getcurrentaccount
    method: GET
- name: customer
  endpoint:
    path: /reference/getcustomer
    method: GET
- name: subscription
  endpoint:
    path: /reference/getsubscription
    method: GET
- name: session
  endpoint:
    path: /reference/createchargesession
    method: POST
    data_selector: null
    params: {}
- name: account
  endpoint:
    path: /reference/getcurrentaccount
    method: GET
- name: organisation
  endpoint:
    path: /reference/getorganisation
    method: GET
- name: customer
  endpoint:
    path: /reference/getcustomerlist
    method: GET
- name: subscription
  endpoint:
    path: /reference/getsubscriptionlist
    method: GET
- name: invoice
  endpoint:
    path: /reference/getinvoicelist
    method: GET
- name: transaction
  endpoint:
    path: /reference/gettransactionlist
    method: GET
- name: webhook
  endpoint:
    path: /reference/getwebhooklist
    method: GET
    data_selector: webhooks
- name: account
  endpoint:
    path: /reference/account
    method: GET
- name: customer
  endpoint:
    path: /reference/customer
    method: GET
- name: subscription
  endpoint:
    path: /reference/subscription
    method: GET
- name: account
  endpoint:
    path: /v1/account
    method: GET
    data_selector: account
    params: {}
- name: update_account
  endpoint:
    path: /v1/account
    method: PUT
- name: mail_settings
  endpoint:
    path: /v1/account/mail_settings
    method: GET
    data_selector: response
- name: session
  endpoint:
    path: /reference/createchargesession
    method: POST
    data_selector: records
    params: {}
- name: customer
  endpoint:
    path: /reference/createcustomersessionredirect
    method: POST
    data_selector: records
    params: {}
- name: actions
  endpoint:
    path: /reference/action
    method: POST
    data_selector: records
    params: {}
- name: mail_settings
  endpoint:
    path: /v1/account/mail_settings
    method: PUT
- name: discount_settings
  endpoint:
    path: /v1/account/discount_settings
    method: GET
    data_selector: ''
- name: discount_settings
  endpoint:
    path: /v1/account/discount_settings
    method: PUT
- name: Customer
  endpoint:
    path: /reference/createcustomersessionredirect
    method: POST
- name: webhook_settings
  endpoint:
    path: /v1/account/webhook_settings
    method: GET
- name: webhook_settings
  endpoint:
    path: /v1/account/webhook_settings
    method: PUT
- name: webhook_secret
  endpoint:
    path: /v1/account/webhook_settings/secret
    method: POST
- name: account
  endpoint:
    path: /reference/getcurrentaccount
    method: GET
- name: customer
  endpoint:
    path: /reference/getcustomerlist
    method: GET
- name: subscription
  endpoint:
    path: /reference/getsubscriptionlist
    method: GET
- name: invoice_configuration
  endpoint:
    path: /v1/invoice_configuration
    method: GET
- name: account
  endpoint:
    path: /reference/account
    method: GET
- name: invoice_configuration
  endpoint:
    path: /v1/invoice_configuration
    method: POST
- name: invoice_sequence_configuration
  endpoint:
    path: /v1/invoice_configuration/sequence
    method: GET
    data_selector: sequence_configuration
- name: account
  endpoint:
    path: /v1/account
    method: GET
    data_selector: account
- name: invoice_sequence_configuration
  endpoint:
    path: /v1/invoice_configuration/sequence
    method: POST
- name: update_account
  endpoint:
    path: /v1/account
    method: PUT
- name: private_keys
  endpoint:
    path: /reference/getprivatekeys
    method: GET
- name: mail_settings
  endpoint:
    path: /v1/account/mail_settings
    method: GET
- name: private_key
  endpoint:
    path: /v1/account/privkey
    method: POST
- name: expire_private_key
  endpoint:
    path: /v1/account/privkey/{key}/expire
    method: POST
- name: mail_settings
  endpoint:
    path: /v1/account/mail_settings
    method: PUT
- name: public_keys
  endpoint:
    path: /v1/account/pubkey
    method: GET
    data_selector: public_keys
- name: discount_settings
  endpoint:
    path: /v1/account/discount_settings
    method: GET
    data_selector: response
- name: public_key
  endpoint:
    path: /v1/account/pubkey
    method: POST
- name: discount_settings
  endpoint:
    path: /v1/account/discount_settings
    method: PUT
- name: expire_public_key
  endpoint:
    path: /v1/account/pubkey/{key}/expire
    method: POST
- name: webhook_settings
  endpoint:
    path: /v1/account/webhook_settings
    method: GET
- name: organisation
  endpoint:
    path: /reference/organisation
    method: GET
- name: webhook_settings
  endpoint:
    path: /v1/account/webhook_settings
    method: PUT
- name: organisation
  endpoint:
    path: /v1/organisation
    method: PUT
- name: webhook_secret
  endpoint:
    path: /v1/account/webhook_settings/secret
    method: POST
- name: plan
  endpoint:
    path: /reference/plan
    method: GET
    data_selector: records
    params: {}
- name: invoice_configuration
  endpoint:
    path: /v1/invoice_configuration
    method: GET
    data_selector: configuration
    params: {}
- name: plan
  endpoint:
    path: /v1/list/plan
    method: GET
- name: invoice_configuration
  endpoint:
    path: /v1/invoice_configuration
    method: POST
- name: plan
  endpoint:
    path: /v1/plan/{handle}/current
    method: GET
    data_selector: response
- name: invoice_sequence_configuration
  endpoint:
    path: /v1/invoice_configuration/sequence
    method: GET
- name: plan_versions
  endpoint:
    path: /v1/plan/{handle}
    method: GET
- name: invoice_sequence_configuration
  endpoint:
    path: /v1/invoice_configuration/sequence
    method: POST
- name: delete_plan
  endpoint:
    path: /v1/plan/{handle}
    method: DELETE
- name: private_keys
  endpoint:
    path: /reference/getprivatekeys
    method: GET
- name: undelete_plan
  endpoint:
    path: /v1/plan/{handle}/undelete
    method: POST
- name: private_key
  endpoint:
    path: /v1/account/privkey
    method: POST
- name: get_plan_entitlements
  endpoint:
    path: /v1/plan/{handle}/{version}/entitlement
    method: GET
    data_selector: entitlements
- name: expire_private_key
  endpoint:
    path: /v1/account/privkey/{key}/expire
    method: POST
- name: account
  endpoint:
    path: /reference/account
    method: GET
- name: customer
  endpoint:
    path: /reference/customer
    method: GET
- name: subscription
  endpoint:
    path: /reference/subscription
    method: GET
- name: public_keys
  endpoint:
    path: /v1/account/pubkey
    method: GET
- name: plan_metadata
  endpoint:
    path: /v1/plan/{handle}/metadata
    method: GET
- name: public_key
  endpoint:
    path: /v1/account/pubkey
    method: POST
- name: expire_public_key
  endpoint:
    path: /v1/account/pubkey/{key}/expire
    method: POST
- name: metadata
  endpoint:
    path: /v1/plan/{handle}/metadata
    method: PUT
- name: organisation
  endpoint:
    path: /reference/organisation
    method: GET
    data_selector: organisation
- name: metadata
  endpoint:
    path: /v1/plan/{handle}/metadata
    method: DELETE
- name: organisation
  endpoint:
    path: /v1/organisation
    method: PUT
- name: dunning_plan
  endpoint:
    path: /reference/dunning-plan-1
    method: GET
- name: plan
  endpoint:
    path: /reference/plan
    method: GET
    data_selector: records
    params: {}
- name: customer
  endpoint:
    path: /reference/customer
    method: GET
    data_selector: records
    params: {}
- name: dunning_plan
  endpoint:
    path: /v1/dunning_plan
    method: GET
    data_selector: RESPONSE
- name: dunning_plan
  endpoint:
    path: /v1/dunning_plan/{handle}
    method: GET
- name: list_of_plans
  endpoint:
    path: /v1/list/plan
    method: GET
- name: dunning_plan
  endpoint:
    path: /v1/dunning_plan
    method: POST
- name: plan
  endpoint:
    path: /v1/plan/{handle}/current
    method: GET
- name: dunning_plan
  endpoint:
    path: /v1/dunning_plan/{handle}
    method: PUT
- name: plan_versions
  endpoint:
    path: /v1/plan/{handle}
    method: GET
- name: delete_plan
  endpoint:
    path: /v1/plan/{handle}
    method: DELETE
- name: dunning_plan
  endpoint:
    path: /v1/dunning_plan/{handle}
    method: DELETE
- name: undelete_plan
  endpoint:
    path: /v1/plan/{handle}/undelete
    method: POST
- name: customer
  endpoint:
    path: /reference/getcustomerlist
    method: GET
- name: plan_entitlements
  endpoint:
    path: /v1/plan/{handle}/{version}/entitlement
    method: GET
    data_selector: entitlements
- name: customer
  endpoint:
    path: /v1/list/customer
    method: GET
- name: account
  endpoint:
    path: /reference/account
    method: GET
- name: customer
  endpoint:
    path: /reference/customer
    method: GET
- name: subscription
  endpoint:
    path: /reference/subscription
    method: GET
- name: customer
  endpoint:
    path: /v1/customer/{handle}
    method: GET
    data_selector: response
    params: {}
- name: metadata
  endpoint:
    path: /v1/plan/{handle}/metadata
    method: GET
- name: customer
  endpoint:
    path: /v1/customer
    method: POST
    data_selector: response
- name: metadata
  endpoint:
    path: /v1/plan/{handle}/metadata
    method: PUT
- name: customer
  endpoint:
    path: /v1/customer/{handle}
    method: PUT
    data_selector: null
    params: {}
- name: delete_metadata
  endpoint:
    path: /v1/plan/{handle}/metadata
    method: DELETE
- name: dunning_plan
  endpoint:
    path: /reference/getdunningplans
    method: GET
- name: customer
  endpoint:
    path: /v1/customer/{handle}
    method: DELETE
    data_selector: null
    params: {}
- name: dunning_plan
  endpoint:
    path: /v1/dunning_plan
    method: GET
    data_selector: response
- name: create_invoice_for_customer
  endpoint:
    path: /v1/customer/{handle}/invoice
    method: POST
    data_selector: invoice
    params: {}
- name: dunning_plan
  endpoint:
    path: /v1/dunning_plan/{handle}
    method: GET
- name: customer_notes
  endpoint:
    path: /reference/getcustomernotes
    method: GET
- name: dunning_plan
  endpoint:
    path: /v1/dunning_plan
    method: POST
- name: customer_notes
  endpoint:
    path: /v1/customer/{handle}/note
    method: GET
    data_selector: notes
- name: dunning_plan
  endpoint:
    path: /v1/dunning_plan/{handle}
    method: PUT
- name: customer_metadata
  endpoint:
    path: /v1/customer/{handle}/metadata
    method: GET
    data_selector: metadata
- name: dunning_plan
  endpoint:
    path: /v1/dunning_plan/{handle}
    method: DELETE
- name: customer_metadata
  endpoint:
    path: /v1/customer/{handle}/metadata
    method: PUT
- name: customer
  endpoint:
    path: /reference/customer
    method: GET
    data_selector: records
- name: delete_metadata
  endpoint:
    path: /v1/customer/{handle}/metadata
    method: DELETE
- name: customer
  endpoint:
    path: /v1/list/customer
    method: GET
- name: customer
  endpoint:
    path: /v1/customer/{handle}
    method: GET
- name: customer
  endpoint:
    path: /v1/customer
    method: POST
- name: payment_methods
  endpoint:
    path: /reference/getpaymentmethodlist
    method: GET
- name: payment_method
  endpoint:
    path: /reference/getpaymentmethodv2
    method: GET
- name: payment_method_details
  endpoint:
    path: /reference/getpaymentmethoddetailsv2
    method: GET
- name: add_payment_method
  endpoint:
    path: /reference/addpaymentmethodv2
    method: POST
- name: delete_payment_method
  endpoint:
    path: /reference/deletepaymentmethodv2
    method: DEL
- name: inactivate_payment_method
  endpoint:
    path: /reference/inactivatepaymentmethodv2
    method: POST
- name: activate_payment_method
  endpoint:
    path: /reference/activatepaymentmethodv2
    method: POST
- name: reactivate_failed_card
  endpoint:
    path: /reference/reactivatecardv2
    method: POST
- name: copy_card_payment_method_to_customer
  endpoint:
    path: /reference/copycardpaymentmethodv2
    method: POST
- name: move_card_payment_method
  endpoint:
    path: /reference/movecardpaymentmethodv2
    method: POST
- name: payment_method
  endpoint:
    path: /v1/list/payment_method
    method: GET
    data_selector: response
    params: {}
- name: customer
  endpoint:
    path: /v1/customer/{handle}
    method: PUT
- name: payment_method
  endpoint:
    path: /v1/payment_method/{id}
    method: GET
    data_selector: response
- name: customer
  endpoint:
    path: /v1/customer/{handle}
    method: DELETE
    data_selector: null
    params: {}
- name: payment_method_details
  endpoint:
    path: /v1/payment_method/{id}/details
    method: GET
- name: create_invoice_for_customer
  endpoint:
    path: /v1/customer/{handle}/invoice
    method: POST
- name: customer_notes
  endpoint:
    path: /reference/getcustomernotes
    method: GET
    data_selector: records
- name: payment_method
  endpoint:
    path: /v1/payment_method
    method: POST
- name: customer_notes
  endpoint:
    path: /v1/customer/{handle}/note
    method: GET
    data_selector: notes
- name: payment_method
  endpoint:
    path: /v1/payment_method/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: account
  endpoint:
    path: /reference/account
    method: GET
- name: customer
  endpoint:
    path: /reference/customer
    method: GET
- name: subscription
  endpoint:
    path: /reference/subscription
    method: GET
- name: inactivate_payment_method
  endpoint:
    path: /v1/payment_method/{id}/inactivate
    method: POST
    data_selector: null
    params: {}
- name: customer_metadata
  endpoint:
    path: /v1/customer/{handle}/metadata
    method: GET
    data_selector: metadata
    params: {}
- name: activate_payment_method
  endpoint:
    path: /v1/payment_method/{id}/activate
    method: POST
- name: customer_metadata
  endpoint:
    path: /v1/customer/{handle}/metadata
    method: PUT
- name: reactivate_failed_card
  endpoint:
    path: /v1/payment_method/{id}/card_reactivate
    method: POST
- name: delete_metadata
  endpoint:
    path: /v1/customer/{handle}/metadata
    method: DELETE
- name: copy_card_payment_method
  endpoint:
    path: /v1/payment_method/{id}/card_copy
    method: POST
- name: move_card_payment_method
  endpoint:
    path: /v1/payment_method/{id}/card_move
    method: POST
- name: payment_method
  endpoint:
    path: /reference/getpaymentmethodlist
    method: GET
- name: payment_method_details
  endpoint:
    path: /reference/getpaymentmethoddetailsv2
    method: GET
- name: add_payment_method
  endpoint:
    path: /reference/addpaymentmethodv2
    method: POST
- name: delete_payment_method
  endpoint:
    path: /reference/deletepaymentmethodv2
    method: DELETE
- name: inactivate_payment_method
  endpoint:
    path: /reference/inactivatepaymentmethodv2
    method: POST
- name: activate_payment_method
  endpoint:
    path: /reference/activatepaymentmethodv2
    method: POST
- name: payment_method
  endpoint:
    path: /v1/list/payment_method
    method: GET
    data_selector: response
    params: {}
- name: card_verification
  endpoint:
    path: /v1/payment_method/{id}/card/verify
    method: POST
    data_selector: null
    params: {}
- name: payment_method
  endpoint:
    path: /v1/payment_method/{id}
    method: GET
    data_selector: response
- name: card_enrollment
  endpoint:
    path: /v1/payment_method/{id}/card_enroll
    method: POST
    data_selector: response
    params: {}
- name: payment_method_details
  endpoint:
    path: /v1/payment_method/{id}/details
    method: GET
- name: card_bin_info
  endpoint:
    path: /v1/payment_method/{id}/card_bin_info
    method: GET
    data_selector: response
    params: {}
- name: payment_method
  endpoint:
    path: /v1/payment_method
    method: POST
    data_selector: null
    params: {}
- name: emv_token_update_events
  endpoint:
    path: /reference/getemvtokenupdateevents
    method: GET
    data_selector: events
- name: payment_method
  endpoint:
    path: /v1/payment_method/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: import_vipps_recurring_payment_method
  endpoint:
    path: /v1/payment_method/import_vipps_recurring
    method: POST
    data_selector: ''
- name: import_sepa_payment_method
  endpoint:
    path: /v1/payment_method/import_sepa_ebics
    method: POST
- name: inactivate_payment_method
  endpoint:
    path: /v1/payment_method/{id}/inactivate
    method: POST
- name: import_paypal
  endpoint:
    path: /import_paypal
    method: POST
- name: activate_payment_method
  endpoint:
    path: /v1/payment_method/{id}/activate
    method: POST
- name: subscription
  endpoint:
    path: /reference/getsubscriptionlist
    method: GET
    data_selector: records
    params: {}
- name: subscription
  endpoint:
    path: /v1/list/subscription
    method: GET
    data_selector: subscriptions
    params: {}
- name: reactivate_failed_card
  endpoint:
    path: /v1/payment_method/{id}/card_reactivate
    method: POST
- name: subscription
  endpoint:
    path: /v1/subscription/{handle}
    method: GET
- name: subscription
  endpoint:
    path: /v1/subscription
    method: POST
- name: copy_card_payment_method
  endpoint:
    path: /v1/payment_method/{id}/card_copy
    method: POST
- name: move_card_payment_method
  endpoint:
    path: /v1/payment_method/{id}/card_move
    method: POST
- name: card_verification
  endpoint:
    path: /v1/payment_method/{id}/card/verify
    method: POST
    data_selector: ''
- name: subscription_preview
  endpoint:
    path: /v1/subscription/preview
    method: POST
- name: card_enrollment
  endpoint:
    path: /v1/payment_method/{id}/card_enroll
    method: POST
    data_selector: null
    params: {}
- name: cancel_subscription
  endpoint:
    path: /v1/subscription/{handle}/cancel
    method: POST
- name: card_bin_info
  endpoint:
    path: /v1/payment_method/{id}/card_bin_info
    method: GET
    data_selector: response
- name: uncancel_subscription
  endpoint:
    path: /v1/subscription/{handle}/uncancel
    method: POST
- name: EMV Token update events
  endpoint:
    path: /reference/getemvtokenupdateevents
    method: GET
    data_selector: events
- name: prepare_subscription
  endpoint:
    path: /v1/subscription/prepare
    method: POST
- name: activate_subscription
  endpoint:
    path: /v1/subscription/{handle}/activate
    method: POST
- name: import_vipps_recurring_payment_method
  endpoint:
    path: /v1/payment_method/import_vipps_recurring
    method: POST
- name: delete_pending_subscription
  endpoint:
    path: /v1/subscription/{handle}
    method: DELETE
    data_selector: null
    params: {}
- name: import_sepa_payment_method
  endpoint:
    path: /v1/payment_method/import_sepa_ebics
    method: POST
    data_selector: response
    params: {}
- name: import_paypal_payment_method
  endpoint:
    path: /v1/payment_method/import_paypal
    method: POST
- name: change_subscription
  endpoint:
    path: /v1/subscription/{handle}
    method: PUT
- name: subscription
  endpoint:
    path: /reference/subscription
    method: GET
- name: Change subscription preview
  endpoint:
    path: /v1/subscription/{handle}/preview
    method: PUT
- name: subscription
  endpoint:
    path: /v1/list/subscription
    method: GET
    data_selector: subscriptions
- name: subscription
  endpoint:
    path: /v1/subscription/{handle}
    method: GET
- name: change_next_renewal_date
  endpoint:
    path: /v1/subscription/{handle}/change_next_period_start
    method: POST
- name: subscription
  endpoint:
    path: /v1/subscription
    method: POST
- name: subscription_on_hold
  endpoint:
    path: /v1/subscription/{handle}/on_hold
    method: POST
- name: reactivate_subscription
  endpoint:
    path: /v1/subscription/{handle}/reactivate
    method: POST
- name: subscription_preview
  endpoint:
    path: /v1/subscription/preview
    method: POST
- name: payment_methods
  endpoint:
    path: /v1/subscription/{handle}/pm
    method: GET
    data_selector: PaymentMethod
- name: cancel_subscription
  endpoint:
    path: /v1/subscription/{handle}/cancel
    method: POST
- name: remove_all_payment_methods
  endpoint:
    path: /v1/subscription/{handle}/pm
    method: DELETE
    params: {}
- name: set_payment_method
  endpoint:
    path: /v1/subscription/{handle}/pm
    method: POST
- name: uncancel_subscription
  endpoint:
    path: /v1/subscription/{handle}/uncancel
    method: POST
- name: remove_payment_method
  endpoint:
    path: /v1/subscription/{handle}/pm/{method_id}
    method: DELETE
    data_selector: null
    params: {}
- name: expire_subscription
  endpoint:
    path: /v1/subscription/{handle}/expire
    method: POST
- name: create_invoice_for_subscription
  endpoint:
    path: /v1/subscription/{handle}/invoice
    method: POST
- name: prepare_subscription
  endpoint:
    path: /v1/subscription/prepare
    method: POST
- name: subscription_entitlements
  endpoint:
    path: /v1/subscription/{handle}/entitlement
    method: GET
- name: activate_subscription
  endpoint:
    path: /v1/subscription/{handle}/activate
    method: POST
- name: update_entitlements
  endpoint:
    path: /v1/subscription/{handle}/entitlement
    method: PUT
- name: delete_pending_subscription
  endpoint:
    path: /v1/subscription/{handle}
    method: DELETE
    data_selector: null
    params: {}
- name: subscription_add_on
  endpoint:
    path: /v1/subscription/{handle}/add_on/{saHandle}
    method: GET
    data_selector: ''
- name: subscription_add_ons
  endpoint:
    path: /v1/subscription/{handle}/add_on
    method: GET
    data_selector: subscription_add_ons
- name: subscription_discount
  endpoint:
    path: /v1/subscription/{handle}/discount
    method: GET
    data_selector: response
    params: {}
- name: subscription
  endpoint:
    path: /v1/subscription/{handle}
    method: PUT
- name: subscription_discount
  endpoint:
    path: /v1/subscription/{handle}/discount/{sdHandle}
    method: GET
- name: Change subscription preview
  endpoint:
    path: /v1/subscription/{handle}/preview
    method: PUT
- name: add_subscription_discount
  endpoint:
    path: /v1/subscription/{handle}/discount
    method: POST
- name: delete_subscription_discount
  endpoint:
    path: /v1/subscription/{handle}/discount/{sdHandle}
    method: DELETE
- name: change_next_renewal_date
  endpoint:
    path: /v1/subscription/{handle}/change_next_period_start
    method: POST
    data_selector: Subscription
- name: redeem_coupon_code
  endpoint:
    path: /v1/subscription/{handle}/coupon
    method: POST
- name: period_balance
  endpoint:
    path: /v1/subscription/{handle}/period_balance
    method: GET
    data_selector: response
    params: {}
- name: subscription_on_hold
  endpoint:
    path: /v1/subscription/{handle}/on_hold
    method: POST
- name: next_invoice_preview
  endpoint:
    path: /v1/subscription/{handle}/next_invoice_preview
    method: GET
    data_selector: preview
- name: Usage-based Billing Product
  endpoint:
    path: /reference/metered-billing-product
    method: GET
    data_selector: records
- name: reactivate_subscription
  endpoint:
    path: /v1/subscription/{handle}/reactivate
    method: POST
- name: subscription_usage_based_billing_product
  endpoint:
    path: /v1/subscription/{handle}/metered_billing_product
    method: GET
    data_selector: usage_based_billing_products
- name: payment_method
  endpoint:
    path: /v1/subscription/{handle}/pm
    method: GET
    data_selector: PaymentMethod
- name: remove_all_payment_methods
  endpoint:
    path: /v1/subscription/{handle}/pm
    method: DELETE
    data_selector: null
    params: {}
- name: subscription_usage_based_billing_product
  endpoint:
    path: /v1/subscription/{handle}/metered_billing_product
    method: POST
- name: Delete Subscription Usage-based Billing Product
  endpoint:
    path: /v1/subscription/{handle}/metered_billing_product/{metered_billing_handle}
    method: DELETE
- name: set_payment_method
  endpoint:
    path: /v1/subscription/{handle}/pm
    method: POST
- name: usage_record
  endpoint:
    path: /v1/subscription/{handle}/metered_billing_product/{metered_billing_handle}/metered_usage_record
    method: POST
    data_selector: response
    params: {}
- name: Remove payment method
  endpoint:
    path: /v1/subscription/{handle}/pm/{method_id}
    method: DELETE
- name: update_usage_record
  endpoint:
    path: /v1/subscription/{handle}/metered_billing_product/{metered_billing_handle}/metered_usage_record/{metered_usage_record_uuid}
    method: PUT
- name: create_invoice_for_subscription
  endpoint:
    path: /v1/subscription/{handle}/invoice
    method: POST
- name: session
  endpoint:
    path: /reference/createchargesession
    method: POST
- name: customer
  endpoint:
    path: /reference/createcustomersessionredirect
    method: POST
- name: action
  endpoint:
    path: /reference/action
    method: POST
- name: subscription_entitlements
  endpoint:
    path: /v1/subscription/{handle}/entitlement
    method: GET
- name: subscription_metadata
  endpoint:
    path: /v1/subscription/{handle}/metadata
    method: GET
    data_selector: metadata
- name: update_entitlements
  endpoint:
    path: /v1/subscription/{handle}/entitlement
    method: PUT
- name: subscription_metadata
  endpoint:
    path: /v1/subscription/{handle}/metadata
    method: PUT
- name: subscription_add_on
  endpoint:
    path: /v1/subscription/{handle}/add_on/{saHandle}
    method: GET
- name: delete_metadata
  endpoint:
    path: /v1/subscription/{handle}/metadata
    method: DELETE
- name: add-on
  endpoint:
    path: /reference/add_on
    method: GET
    data_selector: records
- name: subscription_add_ons
  endpoint:
    path: /v1/subscription/{handle}/add_on
    method: GET
    data_selector: add_ons
- name: add_on
  endpoint:
    path: /v1/list/add_on
    method: GET
- name: subscription_discount
  endpoint:
    path: /v1/subscription/{handle}/discount
    method: GET
    data_selector: response
    params: {}
- name: add_on
  endpoint:
    path: /v1/add_on/{handle}
    method: GET
    data_selector: response
- name: subscription_discount
  endpoint:
    path: /v1/subscription/{handle}/discount/{sdHandle}
    method: GET
    data_selector: response
- name: add_on
  endpoint:
    path: /v1/add_on
    method: POST
    data_selector: null
    params: {}
- name: add_subscription_discount
  endpoint:
    path: /v1/subscription/{handle}/discount
    method: POST
- name: update_add_on
  endpoint:
    path: /v1/add_on/{handle}
    method: PUT
- name: delete_subscription_discount
  endpoint:
    path: /v1/subscription/{handle}/discount/{sdHandle}
    method: DELETE
- name: add_on
  endpoint:
    path: /v1/add_on/{handle}
    method: DELETE
- name: redeem_coupon_code
  endpoint:
    path: /v1/subscription/{handle}/coupon
    method: POST
- name: undelete_add_on
  endpoint:
    path: /v1/add_on/{handle}/undelete
    method: POST
- name: period_balance
  endpoint:
    path: /v1/subscription/{handle}/period_balance
    method: GET
    data_selector: records
- name: addon_entitlement
  endpoint:
    path: /v1/add_on/{handle}/entitlement
    method: GET
- name: customer
  endpoint:
    path: /reference/customer
    method: GET
    data_selector: records
    params: {}
- name: invoice
  endpoint:
    path: /reference/invoice
    method: GET
    data_selector: records
    params: {}
- name: next_invoice_preview
  endpoint:
    path: /v1/subscription/{handle}/next_invoice_preview
    method: GET
- name: Usage-based Billing Product
  endpoint:
    path: /reference/metered-billing-product
    method: GET
    data_selector: products
- name: add_on_metadata
  endpoint:
    path: /v1/add_on/{handle}/metadata
    method: GET
- name: subscription_usage_based_billing_product
  endpoint:
    path: /v1/subscription/{handle}/metered_billing_product
    method: GET
- name: add_on_metadata
  endpoint:
    path: /v1/add_on/{handle}/metadata
    method: PUT
- name: subscription_usage_based_billing_product
  endpoint:
    path: /v1/subscription/{handle}/metered_billing_product
    method: POST
    data_selector: null
    params: {}
- name: add_on_metadata
  endpoint:
    path: /v1/add_on/{handle}/metadata
    method: DELETE
- name: additional_cost
  endpoint:
    path: /reference/getadditionalcosts
    method: GET
- name: subscription_usage_based_billing_product
  endpoint:
    path: /subscription/{handle}/metered_billing_product/{metered_billing_handle}
    method: DELETE
- name: additional_cost
  endpoint:
    path: /v1/additional_cost/subscription/{handle}
    method: GET
- name: create_usage_record
  endpoint:
    path: /v1/subscription/{handle}/metered_billing_product/{metered_billing_handle}/metered_usage_record
    method: POST
    data_selector: id
- name: additional_cost
  endpoint:
    path: /v1/additional_cost/{handle}
    method: GET
    data_selector: RESPONSE
    params: {}
- name: additional_cost
  endpoint:
    path: /v1/additional_cost
    method: POST
- name: update_usage_record
  endpoint:
    path: /v1/subscription/{handle}/metered_billing_product/{metered_billing_handle}/metered_usage_record/{metered_usage_record_uuid}
    method: PUT
    data_selector: status
- name: additional_cost
  endpoint:
    path: /v1/additional_cost/{handle}/cancel
    method: POST
- name: session
  endpoint:
    path: /reference/createchargesession
    method: POST
- name: customer
  endpoint:
    path: /reference/createcustomersessionredirect
    method: POST
- name: action
  endpoint:
    path: /reference/action
    method: POST
- name: credit
  endpoint:
    path: /reference/getcredits
    method: GET
- name: subscription_metadata
  endpoint:
    path: /v1/subscription/{handle}/metadata
    method: GET
- name: credit
  endpoint:
    path: /v1/credit/subscription/{handle}
    method: GET
    data_selector: credits
    params: {}
- name: subscription_metadata
  endpoint:
    path: /v1/subscription/{handle}/metadata
    method: PUT
- name: credit
  endpoint:
    path: /v1/credit/{handle}
    method: GET
    data_selector: response
    params: {}
- name: delete_metadata
  endpoint:
    path: /v1/subscription/{handle}/metadata
    method: DELETE
- name: session
  endpoint:
    path: /reference/createchargesession
    method: POST
- name: customer
  endpoint:
    path: /reference/createcustomersessionredirect
    method: POST
- name: actions
  endpoint:
    path: /reference/action
    method: POST
- name: credit
  endpoint:
    path: /v1/credit
    method: POST
- name: add_on
  endpoint:
    path: /v1/list/add_on
    method: GET
    data_selector: response
- name: cancel_credit
  endpoint:
    path: /v1/credit/{handle}/cancel
    method: POST
- name: discount
  endpoint:
    path: /reference/getdiscountlist
    method: GET
- name: add_on
  endpoint:
    path: /v1/add_on/{handle}
    method: GET
    data_selector: response
- name: discount
  endpoint:
    path: /v1/list/discount
    method: GET
- name: discount
  endpoint:
    path: /v1/discount/{handle}
    method: GET
- name: add_on
  endpoint:
    path: /v1/add_on
    method: POST
- name: discount
  endpoint:
    path: /v1/discount
    method: POST
- name: add_on
  endpoint:
    path: /v1/add_on/{handle}
    method: PUT
- name: discount
  endpoint:
    path: /v1/discount/{handle}
    method: PUT
- name: discount
  endpoint:
    path: /v1/discount/{handle}
    method: DELETE
- name: add_on
  endpoint:
    path: /v1/add_on/{handle}
    method: DELETE
- name: discount
  endpoint:
    path: /reference/discount-1
    method: GET
- name: undelete_add_on
  endpoint:
    path: /v1/add_on/{handle}/undelete
    method: POST
- name: coupon
  endpoint:
    path: /reference/coupon
    method: GET
- name: coupon
  endpoint:
    path: /v1/list/coupon
    method: GET
    data_selector: RESPONSE
    params: {}
- name: addon_entitlements
  endpoint:
    path: /v1/add_on/{handle}/entitlement
    method: GET
    data_selector: entitlements
- name: coupon
  endpoint:
    path: /v1/coupon/{handle}
    method: GET
    data_selector: coupon
    params: {}
- name: customer
  endpoint:
    path: /reference/customer
    method: GET
    data_selector: records
    params: {}
- name: payment_method
  endpoint:
    path: /reference/payment_method
    method: GET
    data_selector: records
    params: {}
- name: subscription
  endpoint:
    path: /reference/subscription
    method: GET
    data_selector: records
    params: {}
- name: coupon
  endpoint:
    path: /v1/coupon
    method: POST
- name: add_on_metadata
  endpoint:
    path: /v1/add_on/{handle}/metadata
    method: GET
- name: update_coupon
  endpoint:
    path: /v1/coupon/{handle}
    method: PUT
    data_selector: ''
- name: expire_coupon
  endpoint:
    path: /v1/coupon/{handle}/expire
    method: POST
- name: add_on_metadata
  endpoint:
    path: /v1/add_on/{handle}/metadata
    method: PUT
- name: delete_metadata
  endpoint:
    path: /v1/add_on/{handle}/metadata
    method: DELETE
- name: delete_coupon
  endpoint:
    path: /v1/coupon/{handle}
    method: DELETE
    data_selector: null
    params: {}
- name: additional_cost
  endpoint:
    path: /reference/getadditionalcosts
    method: GET
- name: validate_coupon_code
  endpoint:
    path: /v1/coupon/code/validate
    method: GET
    data_selector: null
    params: {}
- name: additional_cost
  endpoint:
    path: /v1/additional_cost/subscription/{handle}
    method: GET
- name: coupon
  endpoint:
    path: /reference/coupon
    method: GET
- name: customer
  endpoint:
    path: /reference/customer
    method: GET
- name: additional_cost
  endpoint:
    path: /v1/additional_cost/{handle}
    method: GET
- name: coupon_metadata
  endpoint:
    path: /v1/coupon/{handle}/metadata
    method: GET
- name: coupon_metadata
  endpoint:
    path: /v1/coupon/{handle}/metadata
    method: PUT
- name: additional_cost
  endpoint:
    path: /v1/additional_cost
    method: POST
- name: coupon_metadata
  endpoint:
    path: /v1/coupon/{handle}/metadata
    method: DELETE
- name: cancel_pending_additional_cost
  endpoint:
    path: /v1/additional_cost/{handle}/cancel
    method: POST
- name: entitlement
  endpoint:
    path: /reference/getentitlementlist
    method: GET
- name: entitlement
  endpoint:
    path: /v1/list/entitlement
    method: GET
- name: credit
  endpoint:
    path: /reference/getcredits
    method: GET
    data_selector: credits
- name: credit_note
  endpoint:
    path: /reference/getcreditnote
    method: GET
    data_selector: credit_note
- name: entitlement
  endpoint:
    path: /v1/entitlement/{handle}
    method: GET
- name: credit
  endpoint:
    path: /v1/credit/subscription/{handle}
    method: GET
- name: entitlement
  endpoint:
    path: /v1/entitlement
    method: POST
    data_selector: null
    params: {}
- name: credit
  endpoint:
    path: /v1/credit/{handle}
    method: GET
    data_selector: response
- name: entitlement
  endpoint:
    path: /v1/entitlement/{handle}
    method: PUT
- name: credit
  endpoint:
    path: /v1/credit
    method: POST
- name: invoice
  endpoint:
    path: /reference/getinvoicelist
    method: GET
- name: transaction
  endpoint:
    path: /docs/transaction-base
    method: GET
- name: charge
  endpoint:
    path: /docs/charge
    method: GET
- name: refund
  endpoint:
    path: /docs/refund
    method: GET
- name: cancel_credit
  endpoint:
    path: /v1/credit/{handle}/cancel
    method: POST
- name: discount
  endpoint:
    path: /reference/getdiscountlist
    method: GET
    data_selector: discounts
- name: invoice
  endpoint:
    path: /v1/list/invoice
    method: GET
    data_selector: invoices
    params: {}
- name: discounts
  endpoint:
    path: /v1/list/discount
    method: GET
    data_selector: response
- name: invoice
  endpoint:
    path: /v1/invoice/{id}
    method: GET
    data_selector: invoice
    params: {}
- name: discount
  endpoint:
    path: /v1/discount/{handle}
    method: GET
- name: settle_invoice
  endpoint:
    path: /v1/invoice/{id}/settle
    method: POST
    data_selector: Invoice
- name: discount
  endpoint:
    path: /v1/discount
    method: POST
- name: discount
  endpoint:
    path: /v1/discount/{handle}
    method: PUT
- name: cancel_settle_later
  endpoint:
    path: /v1/invoice/{id}/settle/cancel
    method: POST
- name: discount
  endpoint:
    path: /v1/discount/{handle}
    method: DELETE
- name: invoice_manual_settle
  endpoint:
    path: /v1/invoice/{id}/manual_settle
    method: POST
    data_selector: response
    params: {}
- name: account
  endpoint:
    path: /reference/getcurrentaccount
    method: GET
- name: customer
  endpoint:
    path: /reference/getcustomerlist
    method: GET
- name: invoice
  endpoint:
    path: /reference/getinvoicelist
    method: GET
- name: cancel_invoice
  endpoint:
    path: /v1/invoice/{id}/cancel
    method: POST
- name: coupon
  endpoint:
    path: /reference/coupon
    method: GET
- name: force_fail_invoice
  endpoint:
    path: /v1/invoice/{id}/fail
    method: POST
- name: coupon
  endpoint:
    path: /v1/list/coupon
    method: GET
- name: invoice_reactivate
  endpoint:
    path: /v1/invoice/{id}/reactivate
    method: POST
- name: coupon
  endpoint:
    path: /v1/coupon/{handle}
    method: GET
- name: coupon
  endpoint:
    path: /v1/coupon
    method: POST
- name: detach_invoice
  endpoint:
    path: /v1/invoice/{id}/detach
    method: POST
    data_selector: null
    params: {}
- name: cancel_all_dunning_pending
  endpoint:
    path: /v1/invoice/cancel_all_dunning_pending/subscription/{handle}
    method: POST
- name: coupon
  endpoint:
    path: /v1/coupon/{handle}
    method: PUT
- name: expire_coupon
  endpoint:
    path: /v1/coupon/{handle}/expire
    method: POST
- name: billing_address
  endpoint:
    path: /v1/invoice/{id}/billing_address
    method: PUT
    data_selector: response
    params: {}
- name: coupon
  endpoint:
    path: /v1/coupon/{handle}
    method: DELETE
    data_selector: response
    params: {}
- name: validate_coupon_code
  endpoint:
    path: /v1/coupon/code/validate
    method: GET
    data_selector: response
    params: {}
- name: delete_billing_address
  endpoint:
    path: /v1/invoice/{id}/billing_address
    method: DELETE
    data_selector: null
    params: {}
- name: session
  endpoint:
    path: /reference/createchargesession
    method: POST
- name: customer
  endpoint:
    path: /reference/createcustomersessionredirect
    method: POST
- name: action
  endpoint:
    path: /reference/action
    method: POST
- name: delete_shipping_address
  endpoint:
    path: /v1/invoice/{id}/shipping_address
    method: DELETE
- name: coupon_metadata
  endpoint:
    path: /v1/coupon/{handle}/metadata
    method: GET
- name: invoice_metadata
  endpoint:
    path: /reference/invoice_metadata
    method: GET
    data_selector: metadata
- name: coupon_metadata
  endpoint:
    path: /v1/coupon/{handle}/metadata
    method: PUT
- name: invoice_metadata
  endpoint:
    path: /v1/invoice/{handle}/metadata
    method: GET
- name: delete_coupon_metadata
  endpoint:
    path: /v1/coupon/{handle}/metadata
    method: DELETE
- name: metadata
  endpoint:
    path: /v1/invoice/{handle}/metadata
    method: PUT
- name: entitlement
  endpoint:
    path: /reference/getentitlementlist
    method: GET
- name: delete_metadata
  endpoint:
    path: /v1/invoice/{handle}/metadata
    method: DELETE
- name: credit_note
  endpoint:
    path: /reference/getinvoicecreditnotelist
    method: GET
- name: entitlement
  endpoint:
    path: /v1/list/entitlement
    method: GET
    data_selector: response
- name: credit_note
  endpoint:
    path: /v1/list/credit_note
    method: GET
    data_selector: credit_notes
    params: {}
- name: entitlement
  endpoint:
    path: /v1/entitlement/{handle}
    method: GET
- name: credit_note
  endpoint:
    path: /v1/credit_note/{id}
    method: GET
    data_selector: ''
- name: entitlement
  endpoint:
    path: /v1/entitlement
    method: POST
- name: credit_invoice
  endpoint:
    path: /v1/credit_note/invoice/{id}
    method: POST
- name: entitlement
  endpoint:
    path: /v1/entitlement/{handle}
    method: PUT
    data_selector: null
    params: {}
- name: charge
  endpoint:
    path: /reference/charge
    method: GET
- name: invoice
  endpoint:
    path: /reference/invoice
    method: GET
    data_selector: invoices
- name: charge
  endpoint:
    path: /reference/charge
    method: POST
    data_selector: charge
- name: refund
  endpoint:
    path: /reference/refund
    method: POST
    data_selector: refund
- name: charge
  endpoint:
    path: /v1/list/charge
    method: GET
- name: charge
  endpoint:
    path: /reference/getchargelist
    method: GET
    data_selector: charges
- name: invoice
  endpoint:
    path: /v1/list/invoice
    method: GET
    data_selector: records
    params: {}
- name: charge
  endpoint:
    path: /v1/charge/{handle}
    method: GET
    data_selector: response
    params: {}
- name: invoice
  endpoint:
    path: /v1/invoice/{id}
    method: GET
    data_selector: invoice
    params: {}
- name: charge
  endpoint:
    path: /v1/charge
    method: POST
- name: invoice_settle
  endpoint:
    path: /v1/invoice/{id}/settle
    method: POST
- name: cancel_settle_later
  endpoint:
    path: /v1/invoice/{id}/settle/cancel
    method: POST
- name: prepare_charge
  endpoint:
    path: /v1/charge/prepare
    method: POST
- name: offline_manual_settle
  endpoint:
    path: /v1/invoice/{id}/manual_settle
    method: POST
- name: cancel_invoice
  endpoint:
    path: /v1/invoice/{id}/cancel
    method: POST
- name: settle_charge
  endpoint:
    path: /v1/charge/{handle}/settle
    method: POST
- name: force_fail_invoice
  endpoint:
    path: /v1/invoice/{id}/fail
    method: POST
    data_selector: null
    params: {}
- name: cancel_charge
  endpoint:
    path: /v1/charge/{handle}/cancel
    method: POST
- name: invoice_reactivate
  endpoint:
    path: /v1/invoice/{id}/reactivate
    method: POST
- name: charge
  endpoint:
    path: /v1/charge/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: transaction
  endpoint:
    path: /reference/gettransactionlist
    method: GET
    data_selector: transactions
- name: detach_from_subscription
  endpoint:
    path: /v1/invoice/{id}/detach
    method: POST
- name: transaction
  endpoint:
    path: /v1/list/transaction
    method: GET
    data_selector: transactions
    params: {}
- name: cancel_all_dunning_pending
  endpoint:
    path: /v1/invoice/cancel_all_dunning_pending/subscription/{handle}
    method: POST
- name: transaction
  endpoint:
    path: /v1/invoice/{id}/transaction/{transaction}
    method: GET
- name: billing_address
  endpoint:
    path: /v1/invoice/{id}/billing_address
    method: PUT
- name: transaction_details
  endpoint:
    path: /v1/invoice/{id}/transaction/{transaction}/details
    method: GET
    data_selector: unstructured response
    params: {}
- name: shipping_address
  endpoint:
    path: /v1/invoice/{id}/shipping_address
    method: PUT
- name: transaction
  endpoint:
    path: /transaction/details
    method: GET
    data_selector: transactions
- name: cancel_transaction
  endpoint:
    path: /v1/invoice/{id}/transaction/{transaction}/cancel
    method: POST
    data_selector: null
    params: {}
- name: delete_billing_address
  endpoint:
    path: /v1/invoice/{id}/billing_address
    method: DELETE
- name: delete_shipping_address
  endpoint:
    path: /v1/invoice/{id}/shipping_address
    method: DELETE
    data_selector: null
    params: {}
- name: refund
  endpoint:
    path: /reference/refund
    method: GET
    data_selector: refunds
- name: refund
  endpoint:
    path: /v1/refund/{id}
    method: GET
    data_selector: response
- name: account
  endpoint:
    path: /reference/account
    method: GET
- name: customer
  endpoint:
    path: /reference/customer
    method: GET
- name: invoice
  endpoint:
    path: /reference/invoice
    method: GET
- name: invoice_metadata
  endpoint:
    path: /v1/invoice/{handle}/metadata
    method: GET
- name: metadata
  endpoint:
    path: /v1/invoice/{handle}/metadata
    method: PUT
- name: delete_metadata
  endpoint:
    path: /v1/invoice/{handle}/metadata
    method: DELETE
- name: credit_note
  endpoint:
    path: /reference/getinvoicecreditnotelist
    method: GET
- name: credit_note
  endpoint:
    path: /v1/list/credit_note
    method: GET
    data_selector: response
    params: {}
- name: credit_note
  endpoint:
    path: /v1/credit_note/{id}
    method: GET
- name: credit_invoice
  endpoint:
    path: /v1/credit_note/invoice/{id}
    method: POST
- name: charge
  endpoint:
    path: /reference/charge
    method: GET
    data_selector: charges
- name: charge
  endpoint:
    path: /v1/list/charge
    method: GET
- name: charge
  endpoint:
    path: /reference/getchargelist
    method: GET
    data_selector: records
- name: charge
  endpoint:
    path: /v1/charge/{handle}
    method: GET
    data_selector: ''
- name: charge
  endpoint:
    path: /v1/charge
    method: POST
- name: prepare_charge
  endpoint:
    path: /v1/charge/prepare
    method: POST
- name: cancel_charge
  endpoint:
    path: /v1/charge/{handle}/cancel
    method: POST
    data_selector: null
    params: {}
- name: charge
  endpoint:
    path: /v1/charge/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: transaction
  endpoint:
    path: /reference/gettransactionlist
    method: GET
- name: transaction
  endpoint:
    path: /v1/list/transaction
    method: GET
    data_selector: transactions
    params: {}
- name: transaction
  endpoint:
    path: /v1/invoice/{id}/transaction/{transaction}
    method: GET
- name: transaction_details
  endpoint:
    path: /v1/invoice/{id}/transaction/{transaction}/details
    method: GET
    data_selector: unstructured_response
- name: transaction
  endpoint:
    path: /transaction/details
    method: GET
    data_selector: transactions
- name: cancel_transaction
  endpoint:
    path: /v1/invoice/{id}/transaction/{transaction}/cancel
    method: POST
    data_selector: null
    params: {}
- name: refund
  endpoint:
    path: /reference/getrefund
    method: GET
- name: create_refund
  endpoint:
    path: /reference/createrefund
    method: POST
- name: refund
  endpoint:
    path: /v1/refund/{id}
    method: GET
    data_selector: refund
    params: {}
notes:
- The private API key must be provided as the HTTP Basic Auth username.
- Keep your private key secret.
- Keep your private key secret. Only use the private key in server-to-server API calls.
- Frisbii is certified according to the payment card industry standard.
- For added security you can have strong customer authentication by the use of 3D
  Secure and Secured by Nets.
- A reusable payment method can also be created at the same time a one-off payment
  is performed in Checkout.
- Please find more information in our help center article about discounts and in our
  API documentation about the endpoints.
- A dunning plan allows you to set different actions when a payment fails.
- This process does not require any prior settlement or capture, offering a convenient
  and efficient way to disburse funds to your customers.
- For asynchronous payment methods, a processing state may indicate that the result
  of the payout will be delivered via a webhook.
- It is important to monitor, interpret, and respond to errors promptly to ensure
  a smooth payout process.
- PCI Level 1 Certified
- Your page needs to be behind HTTPS.
- It is essential to investigate the specific error details and take appropriate corrective
  actions to ensure successful payouts.
- Files is required to be encrypted using PGP, see GnuPG for more.
- Please use the public PGP key provided below or by requesting a personal public
  PGP key for a specific use case.
- Frisbii Payments Checkout works by an initial server-to-server API call to create
  a checkout session.
- File transfer is expected to be done through SFTP or similar safe mean of file transfer.
- Authentication by SSH is preferred, either by using one of the provided below or
  by requesting a personal public SSH key for a specific use case.
- A common use of Frisbii Billing & Pay Optimize is to have customers in the own system
  and customer subscriptions in Frisbii, where at any time a customer will have at
  most one active subscription.
- Uses OAuth2 with refresh token — requires setup of connected app in Frisbii
- Some objects may return nulls in deeply nested fields
- A page in your own system can provide subscription management for the customer.
- As means of protection we encourage whitelisting IP able to access shared content.
- Authentication by SSH is preferred.
- Active subscriptions can be fetched with a GET request.
- Existing cards can be used as an option for payment method for the new subscription.
- Active subscriptions for the customer can be fetched with the call described above.
- Active cards can be presented to the customer with masked card number.
- Subscriptions can also be used as recurring payment agreements if there is no automatic
  billing.
- Invoices can be created on-demand for the subscription with automatic handling like
  dunning management.
- Uses Basic auth with username and password.
- Customer can choose to use stored payment method or a short-term card token.
- Add-Ons can be used to solve a wide range of use-cases.
- An invoice must be created for the subscription before the first bill can be generated.
- In addition to the base subscription product, a customer can have a number of leased
  computers.
- Add-Ons are generic additional products that can be seen as templates for subscription
  Add-Ons.
- In this use case the base subscription product is computer leasing. In addition
  to the base subscription product, a customer can have a number of leased computers.
  The computers leased are represented by subscription add-Ons referenced by computer
  serial number.
- Add-Ons can be managed in the administration or through the API
- A subscription can optionally be created with a number of subscription Add-Ons.
- To get subscriptions with subscription Add-Ons based on a specific Add-On, the search
  parameter `add_on.handle` can be used.
- The recurring flag indicates that in addition to making a payment, the payment method
  should also be returned and stored for the customer.
- Proration is default for immediate changes.
- Notice that for Subscription sessions, the metod name is WindowSubscription.
- It is not mandatory to subscribe to events, however we strongly encourage it.
- The parent element must be empty once the embedded window is initialized.
- Accept all debit/credit cards with default settings for SCA. For Visa transactions
  it must use 3D Secure or the transaction will fail.
- Never use strong customer authentication for cards.
- Apple Pay is not allowed to be run on iframe unless your domain has been registered
  and verified by Apple.
- Apple Pay will only be supported on window mode unless above requirements are met.
- BANCOMAT Pay only supports EUR in Italy 🇮🇹.
- BANCOMAT Pay requires minimum amount 0,01 EUR.
- Recurring payments (subscriptions) are NOT yet supported via Google Pay.
- Our Google Pay integration is not recurring-ready. It can be used for one-time payments
  only.
- MB Way only supports EUR in Portugal.
- MB Way amount must be between 1 - 5000 EUR.
- Accepts payment methods including Dankort and Visa
- As of 12/3 2024 all new agreements for Vipps Recurring / Mobilepay Recurring will
  be on-boarded to Vipps/Mobilepay's new technical platform.
- MobilePay Subscription authorizations must be settled within 7 days.
- Apple Pay is not allowed to be run on iframe unless the domain has been registered
  and verified by Apple.
- Full customization is currently experimental and only available for Version 2 agreements.
- BANCOMAT Pay only supports EUR in Italy.
- PayPal requires a postal code for a shipping address. If a postal code is not present
  the shipping address will be skipped.
- Some currencies (for example HUF) do not support amounts with decimals.
- Currently supporting one-time payments only
- Recalling payments (subscriptions) are NOT yet supported via Google Pay
- Satispay only supports EUR in EEA (European Economic Area), including Switzerland,
  United Kingdom and Türkiye.
- Satispay max. amount supported is 99999 EUR.
- No liability shift for MobilePay Online payments as there is for card payments with
  3D Secure.
- TWINT only supports CHF in Switzerland.
- TWINT amount must be minimum 0,01 CHF.
- Auto-reserve feature must be enabled for the agreement with MobilePay.
- Payconiq only supports EUR in Belgium and Luxembourg
- Requires existing VippsMobilepay agreement setup correctly in Frisbii.
- Vipps MobilePay only allows a single entity to be registered as a partner.
- 'WeChat Pay only supports currencies: CHF, CNY, EUR, GBP and USD.'
- 'WeChat Pay only supports following countries: China, Germany, France, Hungary,
  Ireland, Luxembourg, Netherlands and Norway.'
- WeChat Pay max. amount is 50000 CNY.
- Some currencies (for example `HUF`) do not support amounts with decimals.
- To enable recurring payments you need to have vaulting enabled on your PayPal account.
- AnyDay payment option is only presented if the currency is DKK and only for amounts
  between 300 - 50000 DKK.
- A billing address is required by Klarna.
- Pending Klarna orders will simply be rejected by the Frisbii Payments system.
- Only Window Checkout supports Santander Installments / Financing
- Instant settle not supported
- Vipps can be enabled in the Frisbii Administration under Configurations > Payment
  Methods by adding a Vipps agreement.
- When using Vipps in Frisbii Checkout there are a number of things you need to be
  aware of and handle in your implementation.
- Bancontact only supports EUR.
- Bancontact max. amount is 1500 EUR.
- Merchants can enable Vipps MobilePay in the Frisbii Administration under Configuration
  and Payment Methods by adding a Vipps MobilePay agreement.
- Vipps MobilePay uses the ePayment APIs to facilitate account-to-account transactions.
- Blik One Click only supports PLN in Poland.
- Blik One Click max. amount is 50000 PLN.
- EPS only supports EUR in Austria.
- EPS minimum amount must be 1 EUR.
- 'Estonia Banks only supports EUR and following banks: AS Citadele Banka, AS Coop
  Pank, AS LHV Pank, AS Luminor, AB SEB, AB Swedbank, Revolut'
- Vipps MobilePay Recurring refers to the new unified Vipps/MobilePay technical platform.
- Existing MobilePay Subscriptions payment methods can be imported into the new Vipps
  MobilePay Recurring.
- Finnish Online Banking Transfer allows merchants to accept payments from several
  Finnish banks that offer an online bank transfer payment method.
- 'Finland Banks only supports EUR and following banks: Aktia, Danske Bank, Handelsbanken,
  Nordea, Osuuspankki, POP Pankki, S-Pankki, Säästöpankki, OmaSP, Ålandsbanken.'
- Only Window Checkout supports iDEAL
- iDEAL only supports EUR
- 'Latvia Banks only supports EUR and following banks: AB Swedbank, AB SEB, Citadele,
  Luminor, Revolut'
- 'Lithuania Banks only supports EUR and following banks: AB Citadele Banka, AB Luminor,
  AB Swedbank, AB SEB Bankas, AB Šiaulių Bankas, Lithuanian Credit Union, UAB Medicinos
  Bankas, Revolut.'
- Klarna payment option is only presented if the currency is supported by Klarna.
- Multibanco only supports EUR.
- MyBank only supports EUR.
- ViaBill payment option is only presented if the currency is supported by ViaBill.
- Blik One Click only supports PLN in Poland 🇵🇱.
- SEPA Direct Debit payment option is only presented if the currency is EUR.
- SEPA Direct Debit only works when amount is between 0,10 - 1000 EUR.
- SEPA Direct Debit is only supported in EU, EEA countries and countries with bilateral
  agreements with EU.
- Only Window Checkout supports SEPA Secure. Notice that when SEPA Secure is enabled,
  SEPA Direct Debit payments will not be supported on Embedded Checkout and Modal
  Checkout.
- Only Window Checkout supports Trustly
- Notice that when using Trustly with Embedded Checkout or Modal Checkout, returning
  from Trustly will result in a full redirect to Frisbii Checkout.
- 'Estonia Banks only supports EUR and following banks: AS Citadele Banka, AS Coop
  Pank, AS LHV Pank, AS Luminor, AB SEB, AB Swedbank, Revolut.'
- 'Paysafecard only supports the following currencies: AUD, CAD, CHF, EUR, GBP, NOK,
  PLN, RON, SEK, USD'
- 'Paysafecard only supports the following countries: Austria, Australia, Belgium,
  Bulgaria, Canada, Switzerland, Cyprus, Czech Republic, Germany, Denmark, Spain,
  Finland, France, United Kingdom, Georgia, Gibraltar, Greece, Croatia, Hungary, Ireland,
  Italy, Liechtenstein, Lithuania, Luxembourg, Malta, Mexico, Netherlands, New Zealand,
  Norway, Peru, Poland, Portugal, Romania, Sweden, Slovenia, Slovakia, Uruguay'
- 'Finland Banks only supports EUR and following banks: Aktia, Danske Bank, Handelsbanken,
  Nordea, Osuuspankki, POP Pankki, S-Pankki, Säästöpankki, OmaSP, Ålandsbanken'
- iDEAL only supports EUR.
- Only Window Checkout supports iDEAL. Notice that when using iDEAL, it will not be
  supported on Embedded Checkout and Modal Checkout.
- SCA will only be enforced for customer-initiated transactions (CIT) within Europe.
- 'Lithuania Banks only supports EUR and following banks: AB Citadele Banka, AB Luminor,
  AB Swedbank, AB SEB Bankas, AB Šiaulių Bankas, Lithuanian Credit Union, UAB Medicinos
  Bankas, Revolut'
- Przelewy24 only supports EUR and PLN.
- Przelewy24 supports max. amount of 10.000 EUR and 55.000 PLN.
- CVV will by default not be required for charge sessions, but will by default required
  for recurring sessions.
- 'Currently, Trustly supports the following currencies and countries: DKK (Denmark),
  NOK (Norway), SEK (Sweden), GBP (United Kingdom), EUR (Austria, Estonia, Finland,
  Germany, Latvia, Lithuania, Netherlands, and Spain).'
- Only Window Checkout supports Trustly.
- Frisbii Checkout can be integrated into a mobile hybrid app in several ways.
- Deep Linking is required when using payment methods that can perform app switch
  such as MobilePay or Vipps.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- API key authentication must be provided as HTTP Basic Auth username. No password
  needed.
- CVV is not required for charge sessions by default but required for recurring sessions.
- All responses will be in JSON.
- Charge session potentially creating customer if not already exists requires handling
  customer data.
- Recurring session can create a customer if not already existing.
- The incoming URL consists of your app scheme URL and query parameter returnUrl.
- Mobile applications must register native bridge communication in WebView to receive
  events.
- WebView must load the checkout session URL created from charge session.
- Webhooks requires you to have a publicly accessible web server listening on port
  80 (HTTP) or 443 (HTTPS).
- Requests are HTTP POSTs.
- Connection timeout towards your HTTP server is 10 seconds.
- Your endpoint must respond within 10 seconds.
- A response with HTTP code `2XX` is considered successful.
- Your endpoint must be idempotent, allowing multiple invocations of the same webhook
  with the same result as one invocation.
- Token of a tokenized card is only active for one hour.
- New parameters might be introduced; webhook reception should ignore unknown parameters.
- To handle potential replay attacks, store the id when a webhook has been processed.
- All API requests must be made over HTTPS
- Your private API keys carry many privileges, so be sure to keep them secret
- Frisbii Billing and Pay follows an open for extension, but closed for modification
  API strategy, meaning that new attributes can be added, but no required attributes
  are removed.
- Old test data will automatically be deleted by Frisbii Billing and Pay. Customers,
  and all customer related data e.g. subscriptions and invoices, will be deleted for
  customers created more than three months ago.
- For test accounts there is a limit of 100 mails per day. In addition, there is a
  limit of 10 unique recipients. Mails passing threshold will still be created and
  shown for invoice and subscriptions, but with a 'not allowed' state.
- Resending and preview functionality for test accounts are limited to 10 requests
  per day.
- Your endpoint must be idempotent.
- An alterntive way to protect the webhook endpoint is to use HTTP Basic Auth.
- Webhook retries will happen every 2 min - 5 min - 10 min - 20 min - 30 min - and
  then every hour for three days.
- 'Frisbii Billing and Pay imposes the following request limits on the usage of API:
  25 req / sec for read requests (`GET`) with the possibility to burst up to 50 req
  / sec for shorter periods of time; 10 req / sec for write requests (`POST` | `PUT`
  | `DELETE`) with the possibility to burst up to 25 req / sec for shorter periods
  of time.'
- It is unlikely to experience request limits with normal usage of the API, even at
  high volume.
- List queries are not intended as a way to continuously synchronize data in own system.
- Webhooks provide a way to keep data in own system in-sync with Frisbii Billing and
  Pay.
- Testing different scenarios in Frisbii Billing and Pay can be done using our Test
  Payment Gateway and a number of test cards.
- You can have multiple accounts for different currencies or regions.
- Note that excessive usage will be considered unfair API usage.
- Organisation resource for managing organisation settings.
- A subscription plan defines subscription product information, subscription terms,
  and when and how much to charge for a subscription.
- Excessive usage will be considered unfair API usage.
- Deleting a plan does not affect any current subscribers to the plan.
- A dunning plan can only be deleted if no subscription plans use the dunning plan,
  and only if the dunning plan is not the only remaining plan.
- If the deleted plan is default, the oldest plan will be made new default.
- Credentials are Basic
- The customer object is core to managing your customers inside of Frisbii Billing
  and Pay.
- Frisbii Checkout API requires specific endpoints for charge sessions.
- Frisbii Customer Portal API provides magic link functionality.
- Uses Basic authentication
- Create or update metadata for a customer
- A subscription creation can be made conditional on a successful payment of the first
  invoice.
- To update a subscription usage-based billing product, you must first remove it from
  the subscription and then re-add it with the new settings.
- Choose the unbilled usage strategy carefully, as it directly affects how customers
  will be billed for their existing usage.
- Amounts must be rounded to the nearest ten units of the smallest denomination
- Add-ons are templates for optional additional products that can be attached to a
  subscription.
- Carefully consider the implications of your chosen unbilled usage and pricing strategies,
  as they will affect how the subscription is billed and how it responds to changes
  in the underlying usage-based billing product.
- Unit ranges and consumed units represent monetary values in their smallest denomination
  (e.g., cents, øre)
- Credentials are required in Basic authentication format.
- This endpoint allows you to update the status of a usage record between active and
  inactive.
- Credits can be added to subscriptions.
- Credits will be collected and deducted from invoice amount at next automatic renewal
  or optionally when a one-time invoice is created.
- Delete add-on.
- Update Metadata for a discount
- Undelete deleted add-on.
- Additional costs can be added to subscriptions.
- A maximum of 100 pending additional costs can be added to a subscription.
- Credentials are Basic and require base64 encoding.
- Credentials are required in Basic Auth format.
- A maximum of 100 pending credits can be added to a subscription.
- Update Metadata for an invoice
- Excessive usage will be considered unfair API usage
- Charges are an abstraction on top of invoices, providing a convenient way to charge
  customers with one-time payments and to pay existing unpaid invoices.
- If the charge is failed it can be retried with the same handle.
- An authorized invoice must normally be settled within seven days before the authorization
  expire.
- The refund resource allows refunds on settled invoices/charges.
- A successful refund will result in a credit note attached to the invoice.
- The refund resource allows the use of an idempotency key to safely retry the same
  request multiple times.
- For an invoice settled with a manual transfer, a refund must be an offline manual
  refund.
- An offline manual refund could be a bank transfer or chargeback handled outside
  Frisbii Billing and Pay.
- For some payment methods, the refund operation can be asynchronous.
errors:
- '404: Customer not found'
- '400: Customer is deleted'
- '404: Provided user not found'
- '401 Unauthorized: Recheck API key or authentication information.'
- '401 Unauthorized: Check your API key or permissions.'
- 'Communication Error (No HTTP Response) or HTTP Server Error (5xx): Retry the operation
  immediately or later.'
- 'HTTP Client Error (4xx): Check your implementation for any issues.'
- 'Other Non-200 HTTP Response: Handle similarly to a communication error, contact
  support if the issue persists.'
- 'state = paid: The operation is considered successful.'
- 'state = processing: Indicates success for payment types with asynchronous payouts.'
- 'error_state = hard_declined: The refund operation has been declined by the acquirer
  or issuer.'
- 'error_state = processing_error: Investigate specific error details to ensure successful
  payouts.'
- 'Other Non-200 HTTP Response: Handle similarly to a communication error, and contact
  support if the issue persists.'
- 'error_state = processing_error: An issue occurred during the processing of the
  payout.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your API key or authentication credentials.'
- '401 Unauthorized: Recheck API key'
- '401 Unauthorized: Check API key or permissions'
- 'RP_SessionTokenNotProvidedError: If the .show method is called without sending
  a session id.'
- 'RP_CheckoutNotInitialized: Trying to access the iframe before it was initialized.'
- 'RP_CallShowWhenAlreadyInitialized: Trying to call .show when the modal is already
  initialized.'
- 'RP_UnknownEventError: Trying to handle an event that isn''t defined.'
- 'RP_HandlerNotAFunction: Passing a handler that isn''t of type function to the .addEventHandler
  function.'
- 'RP_MissingHtmlElementError: The HTML element id provided could not be found on
  the page.'
- 'RP_HtmlElementNotEmptyError: The provided element is not empty (i.e. has child
  elements inside the given element).'
- 'RP_CheckoutNotInitialized: Trying to access the iFrame before it was initialized.'
- 'RP_CallShowWhenAlreadyInitialized: Trying to call .show when the modal is already
  initialized with a session id.'
- 'RP_UnknownEventError: Trying to handle an event that is not defined.'
- 'authorization_expired: Settle attempts after 7 days will result in decline'
- 'hard_declined: Payment method has been cancelled'
- 'soft_declined: Payment was rejected, but may succeed at a later stage'
- Agreements setup with Client Id and Client Secret will not be supported anymore
  by 31.01.2025.
- 'soft_declined: Payment may succeed at a later stage'
- 'Error: Incorrect MSN configuration - ensure the correct merchant serial number
  is used.'
- Pending Klarna orders will simply be rejected by the Frisbii Payments system.
- Error reported as Javascript callback for overlay and embedded, or as an HTTP query
  argument error on the cancel url in window mode.
- '403 Forbidden: Accessed feature is not available on the current plan for your account'
- 'Payment failed: An error will be reported as a Javascript callback or HTTP query
  argument.'
- '200 - OK: Everything worked as expected.'
- '400 - Bad Request: Illegal operation on a resource'
- '401 - Unauthorized: No valid authentication provided'
- '403 - Forbidden: Authentication given but not authorized to resource operation'
- '404 - Not Found: The requested resource or referenced resources could not be found'
- '405 - Method Not Allowed: The used HTTP method is not allowed on the resource'
- '422 - Unprocessable Entity: The request could not be interpreted, often missing
  a required parameter or wrongly formatted parameters'
- '429 - Request limiting exceeded: The request is declined either due to request
  rate limiting (code=122) or concurrent requests limit (code=123).'
- '500-504 - Server Errors: An internal error occurred on Frisbii Billing and Pay''s
  end'
- 'insufficient_funds: Valid payment method but insufficient funds to complete transaction.
  Ususally a soft decline.'
- 'settle_blocked: Settle of authorization blocked. Ususally a soft decline.'
- 'credit_card_expired: Credit card expired'
- 'declined_by_acquirer: Transaction declined by payment provider for some reason'
- 'credit_card_lost_or_stolen: Credit card lost or stolen'
- 'credit_card_suspected_fraud: Credit card suspected fraud'
- 'refund_amount_too_high: The tried refund amount is too high'
- 'authorization_expired: Settle failed because the authorization has expired'
- 'authorization_amount_exceeded: Settle failed because requested amount exceeded
  authorized amount'
- 'authorization_voided: Settle failed because authorization has been voided'
- 'sca_required: Transaction declined by payment provider because strong customer
  authentication (e.g. 3D Secure) is required'
- 'risk_filter_block: Transaction was declined by a Frisbii Billing and Pay Risk Filter
  rule'
- 'fraud_block: Transaction was declined by Frisbii Billing and Pay Fraud Detector'
- 'emv_token_deleted: EMV token deleted by issuer - cannot be active again'
- 'emv_token_suspended: EMV token suspended by issuer - might be activated again'
- 'acquirer_communication_error: Communication with payment provider failed'
- 'acquirer_error: Error at the payment provider'
- 'acquirer_integration_error: There is an error in the integration to the payment
  provider'
- 'acquirer_authentication_error: Provided authentication credentials are not valid'
- 'acquirer_configuration_error: Error in the configuration of the payment provider
  or payment gateway account'
- 'acquirer_rejected_error: Payment provider rejected this specific transaction. E.g.
  amount too low or too high.'
- 'Error occurred: Handle events accordingly.'
- '429: Rate limit exceeded'
- '400: QUERY_TIMEOUT: Use a smaller time range for the operation'
- The credit card is declined with due to credit card expired
- The credit card is declined by the acquirer
- The credit card is declined due to insufficient funds
- The authorization is declined due to errors at the acquirer
- The authorization is declined due to communication problems with the acquirer
- The authorization is declined due to communication problems with the acquirer (60
  second processing time)
- If the same id is received again it can be ignored just responding with a HTTP 200
  OK.
- '122: Rate limit for read requests exceeded'
- '123: Concurrent limit for write requests exceeded'
- '400: Query timeout - use a smaller time range for the operation.'
- '401 Unauthorized: Recheck credentials'
- '10: Subscription plan not found'
- '401 Unauthorized: Check credentials'
- Duplicate handle - already used
- Customer debtor id already used by another existing customer
- '9: Customer not found'
- '71: Customer is deleted'
- '161: Customer debtor id already used by another existing customer'
- '166: Customer debtor id cannot be changed once set'
- '400: Customer has non-expired subscriptions, these must be handled first'
- '400: Customer has pending and/or dunning invoices, these must be handled first'
- '11: Duplicate handle provided'
- '76: Payment method not provided and settle requested'
- '40: Payment method provided not found'
- Excessive usage will be considered unfair API usage
- '11: Duplicate handle - already used'
- '404: Payment method not found'
- '40: Payment method not found'
- '400: Duplicate handle provided'
- '400: Payment method not provided and settle requested'
- '404: Payment method provided not found'
- '400: Invalid card token provided as source'
- '400: Card token already used'
- '400: Card token has expired'
- '400: Payment method not active'
- '41: Payment method not inactive'
- '19: Card not found'
- '7: 403 Unauthorized. Returned if card does not belong to account, and there is
  no link established between accounts.'
- '9: 404 Customer not found'
- '40: 404 Payment method not found'
- '55: 404 Agreement could not be found'
- '404: Agreement could not be found'
- '18: Card not found'
- '138: Card verification not supported by the current acquirer agreements'
- '34: Enrollment not supported - declined by acquirer or tokenization not activated/supported'
- '171: BIN information not found for card'
- '172: Invalid PAN type, must be card'
- '400: Invalid request, must be payment type emv_token'
- '400: EMV token update events disabled on account'
- '56: Multiple agreements'
- '55: Agreement not found'
- '42: Payment method not active'
- '12: Subscription not found'
- '403: Unauthorized. Returned if card does not belong to account, and there is no
  link established between accounts.'
- '55: Agreement could not be found'
- '404: Subscription plan provided not found'
- '400: Duplicate handle - subscription handle, additional cost handle or subscription
  add-on handle already used'
- '400: End date must be in the future'
- '404: Customer card provided as source but cannot be found'
- '400: Start date if provided cannot be more than one period in the past, e.g. one
  month.'
- '400: Subscription not eligible for invoice. This error is returned if the conditional_create
  parameter is set to true, but the subscription does not have a plan resulting in
  an invoice right away. This is the case for subscription plans with fixed day billing.
  E.g. on the first of every month.'
- '404: Discount not found'
- '400: Multiple discounts not allowed'
- '404: Coupon not found or not eligible'
- '400: Coupon already used'
- '400: Unknown or missing source argument'
- '400: Source not allowed for signup method'
- '404: Add-on not found'
- '400: Add-on already added or multiple occurrences of same add-on in request without
  explicit unique subscription add-on handle'
- '400: Add-on quantity not allowed for on-off add-on type'
- '400: Add-on not eligible for subscription plan'
- '404: Entitlement not found'
- '404: Card not found'
- '400: Card verification not supported by the current acquirer agreements'
- The operation can generate the same errors as a subscription create.
- '13: Subscription expired, must be active'
- '95: Subscription on-hold, must be active'
- '22: Subscription already cancelled'
- '93: Cannot expire in current period. A custom expires at has been provided that
  is in the current period.'
- '404: BIN information not found for card'
- '400: Invalid PAN type, must be card'
- '13: Subscription expired'
- '95: Subscription on-hold'
- '94: Cannot uncancel because subscription is in a final partial period.'
- '13: Subscription already expired'
- '63: Subscription has pending or dunning invoices, these needs to be handled first'
- '64: Refund compensation is used but the current billing period invoice is not in
  required state ''settled'''
- '65: Refund compensation is used but the refund amount exceeds the refundable amount
  on the current billing period invoice.'
- '81: Refund compensation is not allowed for asynchronous refund payment method'
- '66: The refund compensation failed because of error at the acquirer.'
- For errors see [Create Subscription](/docs/createsubscriptionjson)
- For errors see [Create Subscription](doc:createsubscriptionjson)
- '119: Subscription not in state pending'
- '125: Subscription has pending payment method'
- '82: Invoice not in state created'
- '30: Invoice has active transactions'
- '404: Subscription not found'
- '400: Duplicate handle - Subscription add-on handle already used or multiple occurrences
  of same handle in request'
- '400: Subscription expired, must be active or on-hold (only if not immediate change)'
- '400: Subscription on-hold and immediate change requested'
- '400: Refund compensation is used but the current billing period invoice is not
  in required state ''settled'''
- '400: Refund compensation is used but the refund amount exceeds the refundable amount
  on the current billing period invoice.'
- '400: Credit compensation is used but the current billing period invoice is not
  in required state ''pending'', ''dunning'' or ''settled'''
- '400: Credit compensation is used but credit amount exceeds the creditable amount
  on the current billing period invoice.'
- '400: Subscription cancelled'
- '404: Subscription plan to change to not found'
- '404: Subscription add-on to remove not found'
- '404: Add-on to add not found'
- '400: Add-on already added to subscription or multiple occurrences of same add-on
  in request without explicit unique subscription add-on handle'
- '400: Duplicate subscription add-on handle'
- '400: Add-on to add not eligible for the subscription plan'
- '400: Quantity provided for an on-off add-on'
- '400: A new start date has been provided that is too far in the past'
- '500: The refund compensation failed because of error at the acquirer.'
- The operation can generate the same errors as for a normal change operation.
- '22: Subscription cancelled with a specific expire date. In this case the next renewal
  date cannot be changed'
- '14: The provided date is not in the future'
- '96: Subscription is in trial, not allowed to put on hold'
- '64: Refund compensation is used but the current billing period invoice is not in
  required state `settled`'
- '82: Credit compensation is used but the current billing period invoice is not in
  required state `pending`, `dunning` or `settled`'
- '120: Credit compensation is used but credit amount exceeds the creditable amount
  on the current billing period invoice.'
- '10: 404 Subscription plan provided not found'
- '11: 400 Duplicate handle - subscription handle, additional cost handle or subscription
  add-on handle already used'
- '14: 400 End date must be in the future'
- '19: 404 Customer card provided as source but cannot be found'
- '34: 400 Invalid card token provided as source'
- '37: 400 Start date if provided cannot be more than one period in the past, e.g.
  one month.'
- '75: 400 Subscription not eligible for invoice. This error is returned if the conditional_create
  parameter is set to true, but the subscription does not have a plan resulting in
  an invoice right away. This is the case for subscription plans with fixed day billing.
  E.g. on the first of every month.'
- '83: 404 Discount not found'
- '85: 400 Multiple discounts not allowed'
- '86: 404 Coupon not found or not eligible'
- '87: 400 Coupon already used'
- '103: 400 Card token already used'
- '104: 400 Card token has expired'
- '110: 400 Unknown or missing source argument'
- '111: 400 Source not allowed for signup method'
- '113: 404 Add-on not found'
- '114: 400 Add-on already added or multiple occurrences of same add-on in request
  without explicit unique subscription add-on handle'
- '115: 400 Add-on quantity not allowed for on-off add-on type'
- '116: 400 Add-on not eligible for subscription plan'
- '169: 404 Entitlement not found'
- '97: Subscription not on-hold'
- '37: Provided start date cannot be before the on-hold date'
- '40: Payment method reference provided not found'
- '34: Invalid card token provided as source'
- '103: Card token already used'
- '104: Card token has expired'
- '110: Unknown or missing source argument'
- '65: Refund compensation is used but the refund amount exceeds the refundable amount
  on the current billing period invoice. The refundable amount is the settled invoice
  amount minus already refunded and credited amounts.'
- '54: The request results in an invoice with no order lines'
- '1: Due argument was given for an instant invoice request'
- For errors see [Create Subscription](d oc:createsubscriptionjson)
- '169: Entitlement not found'
- '119: Subscription not in state `pending`'
- '117: Subscription add-on not found'
- '11: Duplicate handle - Subscription add-on handle already used or multiple occurrences
  of same handle in request'
- '13: Subscription expired, must be active or on-hold (only if not immediate change)'
- '95: Subscription on-hold and immediate change requested'
- '22: Subscription cancelled'
- '10: Subscription plan to change to not found'
- '117: Subscription add-on to remove not found'
- '113: Add-on to add not found'
- '114: Add-on already added to subscription or multiple occurrences of same add-on
  in request without explicit unique subscription add-on handle'
- '11: Duplicate subscription add-on handle'
- '116: Add-on to add not eligible for the subscription plan'
- '115: Quantity provided for an on-off add-on'
- '37: A new start date has been provided that is too far in the past'
- '84: Subscription discount not found'
- '400: Duplicate subscription discount handle given'
- '400: Multiple discounts not allowed. Can be changed in discount settings'
- '86: Coupon not found'
- '87: Coupon already used'
- '400: Subscription expired, must be active'
- '400: Subscription on-hold, must be active'
- '400: Subscription is in trial, not allowed to put on hold'
- '400: Refund compensation is used but the current billing period invoice is not
  in required state `settled`'
- '400: Credit compensation is used but the current billing period invoice is not
  in required state `pending`, `dunning` or `settled`'
- '400: Refund compensation is not allowed for asynchronous refund payment method'
- '179: Subscription has no next invoice'
- '401 Unauthorized: Recheck your credentials'
- '400: Invalid meta data size'
- '404: Subscription plan not found'
- '404: Tax policy not found'
- '83: Discount not found'
- '11: Duplicate subscription discount handle given'
- '85: Multiple discounts not allowed. Can be changed in discount settings'
- '113: Add-on not found'
- '153: Add-on type update from ''quantity'' to ''on-off'' is not allowed'
- '157: Tax policy not found'
- '401 Unauthorized: Check your credentials'
- '11: Duplicate handle'
- '88: Coupon code already exists'
- '10: Plan provided in eligible plans not found'
- '90: Coupon not active'
- '91: Coupon cannot be updated because maximum redemptions is below the current number
  of redemptions'
- '89: Coupon cannot be deleted because it has redemptions'
- 404 Coupon code not found or coupon not eligible for use
- 400 Coupon already used by customer. Can only be returned if customer argument is
  given.
- 404 Customer for provided customer handle cannot be found
- '11: Duplicate entitlement handle'
- '31: Invoice not found'
- '80: Invoice cannot be settled because it has processing transactions'
- '76: Payment method not provided'
- '147: Stored payment method is in failed state and it is not allowed to retry because
  of scheme or payment provider rules'
- '82: Invoice not in state pending'
- '79: Invoice already settled'
- '105: Invoice is authorized'
- '80: Invoice has processing transactions'
- '404: Invoice not found'
- '400: Invoice already settled'
- '400: Invoice has active transactions. All transactions must be failed, cancelled
  or pending'
- '82: Invoice wrong state - must be pending or dunning'
- '30: Invoice has active transactions. All transactions must be failed, cancelled
  or pending'
- '82: Invoice must be failed or cancelled'
- '112: Invoice is a charge which cannot be re-activated'
- Duplicate handle
- Coupon code already exists
- Discount not found
- Plan provided in eligible plans not found
- '112: Invoice is not a subscription invoice'
- '82: Invoice wrong state, it must be pending, dunning or failed'
- '30: Invoice has active transactions, all must be failed, cancelled or pending'
- '404: Coupon not found'
- '400: Coupon not active'
- '400: Coupon cannot be deleted because it has redemptions'
- '86: Coupon code not found or coupon not eligible for use'
- '87: Coupon already used by customer. Can only be returned if customer argument
  is given.'
- '9: Customer for provided customer handle cannot be found'
- '121: Credit amount too high'
- 'Communication error (no HTTP response) or HTTP server error 5xx: Retry operation
  immediately or later, preferably with an idempotency key.'
- 'HTTP 400 client error and error code 147: The stored payment method referenced
  is in state failed and it is not allowed to make charges because of scheme or payment
  provider rules.'
- 'Other HTTP 4xx client errors: Check your implementation.'
- 'Other non 200 HTTP response: Something is wrong. Handle as for communication error
  and contact Frisbii Billing and Pay if the problem persists.'
- '105: Invoice already authorized'
- '29: Invoice already cancelled'
- '71: The customer is deleted'
- '11: Duplicate customer handle provided'
- '18: Customer could not be determined from either reference, create customer object
  or payment method source'
- '99: Customer object given does not match handle of existing customer or handle
  given does not match existing customer reference'
- '34: Invalid card token'
- '24: No amount or order lines was provided'
- '80: Existing charge has processing transactions'
- '100: Amount change is not allowed when charging an existing invoice'
- '72: Currency change not allowed on existing invoice or charge'
- The operation can generate the same errors as a create charge operation.
- 'Communication error (no HTTP response) or HTTP server error 5xx: Retry operation
  immediately or later, preferably with an idempotency key to avoid multiple settles
  if a partial settle is performed.'
- 'HTTP client error 4xx: Check your implementation.'
- '79: Invoice already settled - no remaining authorized amount to settle'
- '106: Invoice not authorized'
- '102: New amount provided is higher than the authorized amount'
- '129: Multiple settles not allowed - invoice has already been settled once and payment
  method does not allow multiple settles'
- '130: Partial settle not allowed - payment method does not allow a partial settle'
- '108: Charge cancel failed because of acquirer error or rejection'
- '400: Invoice must be failed or cancelled'
- '400: Invoice is a charge which cannot be re-activated'
- '31: 404: Invoice not found'
- '82: 400: Invoice wrong state, must be created'
- '400: Invoice is not a subscription invoice'
- '400: Invoice wrong state, it must be pending, dunning or failed'
- '400: Invoice has active transactions, all must be failed, cancelled or pending'
- '70: Transaction not found'
- '404: Transaction not found'
- '109: Transaction wrong state must be pending, authorized or processing (in some
  cases)'
- '108: Transaction cancel failed in case of authorization because of acquirer rejection
  or error.'
- '107: Refund not found'
- 'HTTP 400 client error and error code 147: The stored payment method referenced
  is in state failed, and it is not allowed to make charges.'
- '108: Charge cancel failed because of acquirer error or rejection.'
- '82: Invoice wrong state, must be created'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.frisbii.com
  auth:
    type: Basic
source_metadata: null
