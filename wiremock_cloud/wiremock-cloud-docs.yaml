resources:
- name: scenarios
  endpoint:
    path: /v1/mock-apis/{mockApiId}/scenarios
    method: GET
    data_selector: scenarios
- name: get_self
  endpoint:
    path: /v1/users/self
    method: GET
- name: user
  endpoint:
    path: /v1/users/{userId}
    method: GET
    data_selector: user
    params: {}
- name: update_user
  endpoint:
    path: /v1/users/{userId}
    method: PUT
    data_selector: user
    params: {}
- name: get_user_by_id
  endpoint:
    path: /v1/users/{userId}
    method: GET
    data_selector: user
    params: {}
- name: delete_user_by_id
  endpoint:
    path: /v1/users/{userId}
    method: DEL
    data_selector: user
    params: {}
- name: delete_user
  endpoint:
    path: /v1/users/{userId}
    method: DELETE
    data_selector: null
    params: {}
- name: mock_apis
  endpoint:
    path: /v1/users/{userId}/apis
    method: GET
    data_selector: mockApis
- name: mock_api
  endpoint:
    path: /v1/mock-apis
    method: POST
    data_selector: mockApi
- name: mock_api
  endpoint:
    path: /v1/mock-apis/{mockApiId}
    method: GET
    data_selector: mockApi
    params: {}
- name: mock_api
  endpoint:
    path: /v1/mock-apis/{mockApiId}
    method: PUT
    data_selector: mockApi
    params: {}
- name: Delete mock API
  endpoint:
    path: /v1/mock-apis/{mockApiId}
    method: DELETE
    data_selector: response
- name: teams
  endpoint:
    path: /v1/users/{userId}/teams
    method: GET
    data_selector: teams
- name: teams
  endpoint:
    path: /v1/organisations/{organisationId}/teams
    method: GET
    data_selector: teams
- name: team
  endpoint:
    path: /v1/teams
    method: POST
    data_selector: team
    params: {}
- name: team
  endpoint:
    path: /v1/teams/{teamId}
    method: GET
    data_selector: team
- name: delete_team
  endpoint:
    path: /v1/teams/{teamId}
    method: DELETE
    data_selector: object
    params: {}
- name: team_members
  endpoint:
    path: /v1/teams/{teamId}/members
    method: GET
    data_selector: members
    params: {}
- name: team_members
  endpoint:
    path: /v1/teams/{teamId}/members
    method: GET
    data_selector: members
    params: {}
- name: add_team_member
  endpoint:
    path: /v1/teams/{teamId}/members
    method: POST
    data_selector: member
- name: delete_team_member
  endpoint:
    path: /v1/teams/{teamId}/members/{userId}
    method: DELETE
    data_selector: null
    params: {}
- name: organisation
  endpoint:
    path: /v1/organisations/{organisationId}
    method: GET
    data_selector: organisation
- name: organisation
  endpoint:
    path: /v1/organisations/{organisationId}
    method: PUT
    data_selector: organisation
    params: {}
- name: organisation
  endpoint:
    path: /v1/organisations/{organisationId}
    method: DELETE
- name: users_in_organisation
  endpoint:
    path: /v1/organisations/{organisationId}/users
    method: GET
    data_selector: users
- name: pending_invitations
  endpoint:
    path: /v1/organisations/{organisationId}/invitations
    method: GET
    data_selector: invitations
    params: {}
- name: invite_user
  endpoint:
    path: /v1/organisations/{organisationId}/invitations
    method: POST
    data_selector: invitation
- name: delete_organisation_member_user
  endpoint:
    path: /v1/organisations/{organisationId}/members/{userId}
    method: DELETE
- name: regenerate_user_api_token
  endpoint:
    path: /v1/users/{userId}/regenerate-api-token
    method: POST
    data_selector: '{}'
- name: data_sources
  endpoint:
    path: /v1/users/{userId}/data-sources
    method: GET
    data_selector: dataSources
- name: data_source
  endpoint:
    path: /v1/users/{userId}/data-sources
    method: POST
    data_selector: dataSource
    params: {}
- name: data_source
  endpoint:
    path: /v1/data-sources/{dataSourceId}
    method: GET
    data_selector: dataSource
- name: data_source
  endpoint:
    path: /v1/data-sources/{dataSourceId}
    method: PUT
    data_selector: dataSource
    params: {}
- name: data_source
  endpoint:
    path: /v1/data-sources/{dataSourceId}
    method: DELETE
    params: {}
- name: database_connections
  endpoint:
    path: /v1/users/{userId}/database-connections
    method: GET
    data_selector: databaseConnections
- name: database_connection
  endpoint:
    path: /v1/users/{userId}/database-connections
    method: POST
    data_selector: databaseConnection
- name: database_connection
  endpoint:
    path: /v1/database-connections/{databaseConnectionId}
    method: GET
    data_selector: databaseConnection
- name: delete_database_connection
  endpoint:
    path: /v1/database-connections/{databaseConnectionId}
    method: DELETE
- name: database_connection
  endpoint:
    path: /v1/database-connections/{databaseConnectionId}
    method: PATCH
    data_selector: databaseConnection
    params: {}
- name: test_database_connection
  endpoint:
    path: /v1/users/{userId}/database-connections/test
    method: POST
    data_selector: outcome
    params: {}
- name: usage
  endpoint:
    path: /v1/subscriptions/{subscriptionId}/usage
    method: GET
    data_selector: usage
- name: acl_candidates
  endpoint:
    path: /v1/{entityCollection}/{entityId}/acl/candidates
    method: GET
    data_selector: candidates
- name: update_entity_acl
  endpoint:
    path: /v1/{entityCollection}/{entityId}/acl/{subjectType}/{subjectEntityId}
    method: PUT
    data_selector: grant
    params: {}
- name: access_control
  endpoint:
    path: /v1/{entityCollection}/{entityId}/acl/{subjectType}/{subjectEntityId}
    method: DELETE
- name: stub_mappings
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings
    method: GET
- name: stub_mapping
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings
    method: POST
    data_selector: id
- name: delete_all_stub_mappings
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings
    method: DELETE
- name: reset_stub_mappings
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings/reset
    method: POST
    data_selector: null
    params: {}
- name: persist_stub_mappings
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings/save
    method: POST
- name: stub_mappings
  endpoint:
    path: /api-reference/stub-mappings/get-all-stub-mappings
    method: GET
- name: users
  endpoint:
    path: /api-reference/users/get-self
    method: GET
- name: mock_apis
  endpoint:
    path: /api-reference/mock-apis/get-mock-apis-accessible-to-a-user
    method: GET
- name: invoicing_invoices
  endpoint:
    path: /v2/invoicing/invoices
    method: POST
    data_selector: body
- name: invoicing_invoice_by_id
  endpoint:
    path: /v2/invoicing/invoices/{invoiceId}
    method: GET
    data_selector: body
- name: import_stub_mappings
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings/import
    method: POST
    data_selector: mappings
- name: stub_mapping
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings/{stubMappingId}
    method: GET
    data_selector: stub mapping
- name: stub_mappings
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings/{stubMappingId}
    method: PUT
    data_selector: this
    params: {}
- name: delete_stub_mapping
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings/{stubMappingId}
    method: DELETE
- name: delete_stub_mapping
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings/{stubMappingId}
    method: DELETE
- name: find_stub_mappings_matching_metadata
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings/find-by-metadata
    method: POST
    data_selector: mappings
- name: find_stub_mappings
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings/find-by-metadata
    method: POST
    data_selector: mappings
- name: Delete stub mappings matching metadata
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings/remove-by-metadata
    method: POST
    data_selector: matchesJsonPath
    params: {}
- name: delete_stub_mappings_matching_metadata
  endpoint:
    path: /v1/mock-apis/{mockApiId}/mappings/remove-by-metadata
    method: POST
    data_selector: null
    params: {}
- name: get_all_requests_in_journal
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests
    method: GET
    data_selector: requests
    params: {}
- name: requests
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests
    method: GET
    data_selector: requests
    params: {}
- name: delete_requests
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests
    method: DELETE
- name: delete_requests
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests
    method: DELETE
- name: get_request_by_id
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/{requestId}
    method: GET
    data_selector: data
- name: get_request_by_id
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/{requestId}
    method: GET
    data_selector: request
    params: {}
- name: delete_request
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/{requestId}
    method: DELETE
    data_selector: null
    params: {}
- name: delete_request
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/{requestId}
    method: DELETE
- name: empty_request_journal
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/reset
    method: POST
- name: empty_request_journal
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/reset
    method: POST
    data_selector: null
    params: {}
- name: count_requests_by_criteria
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/count
    method: POST
    data_selector: count
    params: {}
- name: count_requests
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/count
    method: POST
- name: remove_requests
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/remove
    method: POST
    data_selector: any
    params: {}
- name: remove_requests_by_criteria
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/remove
    method: POST
- name: delete_requests_mappings_matching_metadata
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/remove-by-metadata
    method: POST
    data_selector: requests
- name: delete_requests_mappings_matching_metadata
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/remove-by-metadata
    method: POST
- name: find_requests_by_criteria
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/find
    method: POST
- name: find_requests_by_criteria
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/find
    method: POST
- name: unmatched_requests
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/unmatched
    method: GET
- name: unmatched_requests
  endpoint:
    path: /v1/mock-apis/{mockApiId}/requests/unmatched
    method: GET
    data_selector: requests
- name: start_recording
  endpoint:
    path: /v1/mock-apis/{mockApiId}/recordings/start
    method: POST
- name: start_recording
  endpoint:
    path: /v1/mock-apis/{mockApiId}/recordings/start
    method: POST
- name: stop_recording
  endpoint:
    path: /v1/mock-apis/{mockApiId}/recordings/stop
    method: POST
- name: stop_recording
  endpoint:
    path: /v1/mock-apis/{mockApiId}/recordings/stop
    method: POST
- name: recording_status
  endpoint:
    path: /v1/mock-apis/{mockApiId}/recordings/status
    method: GET
    data_selector: status
    params: {}
- name: get_recording_status
  endpoint:
    path: /v1/mock-apis/{mockApiId}/recordings/status
    method: GET
    data_selector: status
    params: {}
- name: snapshot_recording
  endpoint:
    path: /v1/mock-apis/{mockApiId}/recordings/snapshot
    method: POST
    data_selector: mappings
- name: reset_all_state
  endpoint:
    path: /v1/mock-apis/{mockApiId}/scenarios/reset
    method: POST
- name: take_snapshot_recording
  endpoint:
    path: /v1/mock-apis/{mockApiId}/recordings/snapshot
    method: POST
    data_selector: mappings
- name: reset_all_state
  endpoint:
    path: /v1/mock-apis/{mockApiId}/scenarios/reset
    method: POST
    data_selector: '200'
    params:
      mockApiId: string
- name: mock_api
  endpoint:
    path: /v1/mock-apis/{mockApiId}/open-api
    method: GET
    data_selector: openApi
    params: {}
- name: Get OpenAPI document for mock API
  endpoint:
    path: /v1/mock-apis/{mockApiId}/open-api
    method: GET
    data_selector: openApi
- name: update_openapi_document
  endpoint:
    path: /v1/mock-apis/{mockApiId}/open-api
    method: PUT
    data_selector: openApi
    params: {}
- name: update_openapi_document
  endpoint:
    path: /v1/mock-apis/{mockApiId}/open-api
    method: PUT
    data_selector: openApi
    params: {}
- name: pull_openapi_document
  endpoint:
    path: /v1/mock-apis/{mockApiId}/open-api/pull
    method: POST
    data_selector: job
    params: {}
- name: pull_openapi_document
  endpoint:
    path: /v1/mock-apis/{mockApiId}/open-api/pull
    method: POST
- name: push_openapi_document
  endpoint:
    path: /v1/mock-apis/{mockApiId}/open-api/push
    method: PUT
    data_selector: job
    params: {}
- name: push_openapi_document
  endpoint:
    path: /v1/mock-apis/{mockApiId}/open-api/push
    method: PUT
    data_selector: job
    params: {}
- name: Get mock APIs accessible to a user
  endpoint:
    path: /api-reference/mock-apis/get-mock-apis-accessible-to-a-user
    method: GET
- name: Create a new mock API
  endpoint:
    path: /api-reference/mock-apis/create-a-new-mock-api
    method: POST
- name: Get mock API by ID
  endpoint:
    path: /api-reference/mock-apis/get-mock-api-by-id
    method: GET
- name: Update mock API
  endpoint:
    path: /api-reference/mock-apis/update-mock-api
    method: PUT
- name: Delete mock API
  endpoint:
    path: /api-reference/mock-apis/delete-mock-api
    method: DEL
- name: Get mock APIs accessible to a user
  endpoint:
    path: /api-reference/mock-apis/get-mock-apis-accessible-to-a-user
    method: GET
- name: Get users in an organisation
  endpoint:
    path: /api-reference/organisations/get-users-in-an-organisation
    method: GET
- name: Get all teams readable by a user
  endpoint:
    path: /api-reference/teams/get-all-teams-readable-by-a-user
    method: GET
- name: Get v2 invoicing invoices by invoiceId
  endpoint:
    path: /v2/invoicing/invoices/{invoiceId}
    method: GET
    data_selector: body
- name: Create v2 invoicing invoices
  endpoint:
    path: /v2/invoicing/invoices
    method: POST
    data_selector: body
- name: Get v2 invoicing invoices by invoiceId
  endpoint:
    path: /v2/invoicing/invoices/{invoiceId}
    method: GET
    data_selector: body
- name: Create v2 invoicing invoices
  endpoint:
    path: /v2/invoicing/invoices
    method: POST
    data_selector: body
- name: import_mock_api
  endpoint:
    path: /v1/mock-apis/{mockApiId}/imports
    method: POST
    data_selector: mappings
- name: import_mock_api
  endpoint:
    path: /v1/mock-apis/{mockApiId}/imports
    method: POST
    data_selector: mappings
- name: mock_api_versions
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits
    method: GET
    data_selector: versionCommits
    params: {}
- name: mock_api_version_history
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits
    method: GET
- name: version_commit
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}
    method: GET
    data_selector: versionCommit
- name: get_all_entities_in_a_given_version
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}/items
    method: GET
    data_selector: items
- name: mock_api_version
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}
    method: GET
    data_selector: versionCommit
- name: get_all_entities_in_a_given_version
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}/items
    method: GET
    data_selector: items
- name: version_changes
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}/changes
    method: GET
- name: get_all_changes_between_versions
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}/changes
    method: GET
- name: get_change_to_entity
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}/changes/{entityType}/{entityId}
    method: GET
    data_selector: versionChange
- name: get_contents_of_entity
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}/blob/{entityType}/{entityId}
    method: GET
- name: mock_api_changes
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}/changes/{entityType}/{entityId}
    method: GET
    data_selector: versionChange
    params: {}
- name: restore_entity
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}/restore/{entityType}/{entityId}
    method: POST
- name: mock_api_versioning
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}/blob/{entityType}/{entityId}
    method: GET
    data_selector: string
- name: restore_mock_api_entities
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}/restore
    method: POST
- name: restore_entity_version
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}/restore/{entityType}/{entityId}
    method: POST
- name: hello-world
  endpoint:
    path: /hello-world
    method: GET
- name: restore_mock_api_entities
  endpoint:
    path: /v1/mock-apis/{mockApiId}/version-history/commits/{versionCommitId}/restore
    method: POST
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhookRequests
- name: default_response
  endpoint:
    path: /examples/12
    method: GET
    data_selector: null
    params: {}
- name: soap-example
  endpoint:
    path: /soap-example
    method: POST
    data_selector: response
    params: {}
- name: recording_stubs
  endpoint:
    path: /recording-stubs
    method: GET
    data_selector: stubs
    params: {}
- name: simulate_faults
  endpoint:
    path: /simulating-faults
    method: GET
- name: rate_limits
  endpoint:
    path: /__admin/ext/settings/extended/rateLimits
    method: PUT
    data_selector: null
    params: {}
- name: stub_mappings
  endpoint:
    path: /__admin/mappings
    method: POST
    data_selector: null
    params: {}
- name: rate_limits
  endpoint:
    path: /__admin/ext/settings/extended/rateLimits
    method: PUT
    data_selector: rateLimits
    params: {}
- name: stub_mappings
  endpoint:
    path: /__admin/mappings
    method: POST
    data_selector: mappings
    params: {}
- name: users
  endpoint:
    path: /users-federated-graphql
    method: GET
    data_selector: schema
- name: products
  endpoint:
    path: /products-federated-graphql
    method: GET
    data_selector: schema
- name: reviews
  endpoint:
    path: /reviews-federated-graphql
    method: GET
    data_selector: schema
- name: mock_apis
  endpoint:
    path: /mock-apis
    method: GET
    data_selector: results
    params: {}
- name: mock_api
  endpoint:
    path: /mock-apis/{mock_api_id}/stubs
    method: POST
- name: invoicing-api
  endpoint:
    path: /private-endpoint1
    method: GET
- name: payment-api
  endpoint:
    path: /private-endpoint2
    method: GET
- name: mock_apis
  endpoint:
    path: /mock-apis
    method: GET
    data_selector: results
    params:
      limit: '20'
      page: '1'
- name: stubTemplateTransformationRules
  endpoint:
    path: /recording-stubs
    method: POST
    data_selector: stubTemplateTransformationRules
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: import
  endpoint: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: request_matching
  endpoint:
    path: /request-matching
    method: GET
    data_selector: requests
    params: {}
- name: open-api
  endpoint:
    path: /mock-apis/{mock_api_id}/stubs
    method: GET
    data_selector: stubs
- name: graphql
  endpoint:
    path: /mock-apis/{mock_api_id}/graphql
    method: POST
    data_selector: graphql
- name: baskets
  endpoint:
    path: /baskets/{basketId}/items
    method: GET
    data_selector: items
    params: {}
- name: add_item
  endpoint:
    path: /baskets/{basketId}/items
    method: POST
    data_selector: items
    params: {}
- name: remove_item
  endpoint:
    path: /baskets/{basketId}/items/{itemId}
    method: DELETE
    data_selector: items
    params: {}
- name: empty_basket
  endpoint:
    path: /baskets/{basketId}/items
    method: DELETE
    data_selector: items
    params: {}
- name: get_item_by_id
  endpoint:
    path: /baskets/{basketId}/items/{itemId}
    method: GET
    data_selector: items
    params: {}
- name: get_item_by_id_success
  endpoint:
    path: /baskets/{basketId}/items/{itemId}
    method: GET
- name: get_item_by_id_not_found
  endpoint:
    path: /baskets/{basketId}/items/{itemId}
    method: GET
- name: delete_item_by_id
  endpoint:
    path: /baskets/{basketId}/items/{itemId}
    method: DELETE
- name: empty_basket
  endpoint:
    path: /baskets/{basketId}/items
    method: DELETE
- name: todo_items
  endpoint:
    path: /todo-items
    method: GET
    data_selector: items
- name: dynamic_state
  endpoint:
    path: /itemName
    method: POST
    data_selector: state
    params: {}
- name: get_item_name
  endpoint:
    path: /someItemName
    method: GET
    data_selector: state
    params: {}
- name: stateful_endpoint_set
  endpoint:
    path: /dynamic-state/create-stateful-set
    method: POST
    data_selector: stubs
    params: {}
- name: csv_data_source
  endpoint:
    path: /data-sources
    method: POST
    data_selector: dataSources
    params: {}
- name: basket_items
  endpoint:
    path: /baskets/{basketId}/items
    method: GET
    data_selector: items
- name: add_item
  endpoint:
    path: /baskets/{basketId}/items
    method: POST
    data_selector: items
- name: remove_item
  endpoint:
    path: /baskets/{basketId}/items/{itemId}
    method: DELETE
    data_selector: items
- name: empty_basket
  endpoint:
    path: /baskets/{basketId}/items
    method: DELETE
    data_selector: items
- name: get_item_by_id_success
  endpoint:
    path: /baskets/{basketId}/items/{itemId}
    method: GET
- name: get_item_by_id_not_found
  endpoint:
    path: /baskets/{basketId}/items/{itemId}
    method: GET
- name: delete_item_by_id
  endpoint:
    path: /baskets/{basketId}/items/{itemId}
    method: DELETE
- name: empty_basket
  endpoint:
    path: /baskets/{basketId}/items
    method: DELETE
- name: stateful_set
  endpoint:
    path: /dynamic-state/create-stateful-set
    method: POST
- name: csv_data_source
  endpoint:
    path: /data-sources/csv
    method: POST
    data_selector: data_sources
    params: {}
- name: settings
  endpoint:
    path: /__admin/settings
    method: GET
    data_selector: settings.extended.jwt
- name: settings
  endpoint:
    path: /__admin/settings
    method: GET
- name: beer
  endpoint:
    path: /random/beer
    method: GET
    data_selector: records
- name: coffee
  endpoint:
    path: /random/coffee
    method: GET
    data_selector: records
- name: dessert
  endpoint:
    path: /random/dessert
    method: GET
    data_selector: records
- name: food
  endpoint:
    path: /random/food
    method: GET
    data_selector: records
- name: tea
  endpoint:
    path: /random/tea
    method: GET
    data_selector: records
- name: stub_import
  endpoint:
    path: /__admin/ext/imports
    method: POST
- name: stub_export
  endpoint:
    path: /__admin/mappings
    method: GET
- name: Military
  endpoint:
    path: /random/military
    method: GET
    data_selector: random
    params: {}
- name: Money
  endpoint:
    path: /random/money
    method: GET
    data_selector: random
    params: {}
- name: Mood
  endpoint:
    path: /random/mood
    method: GET
    data_selector: random
    params: {}
- name: Mountain
  endpoint:
    path: /random/mountain
    method: GET
    data_selector: random
    params: {}
- name: Mountaineering
  endpoint:
    path: /random/mountaineering
    method: GET
    data_selector: random
    params: {}
- name: Music
  endpoint:
    path: /random/music
    method: GET
    data_selector: random
    params: {}
- name: Name
  endpoint:
    path: /random/name
    method: GET
    data_selector: random
    params: {}
- name: Nation
  endpoint:
    path: /random/nation
    method: GET
    data_selector: random
    params: {}
- name: NatoPhoneticAlphabet
  endpoint:
    path: /random/natoPhoneticAlphabet
    method: GET
    data_selector: random
    params: {}
- name: Nigeria
  endpoint:
    path: /random/nigeria
    method: GET
    data_selector: random
    params: {}
- name: Number
  endpoint:
    path: /random/number
    method: GET
    data_selector: random
    params: {}
- name: Passport
  endpoint:
    path: /random/passport
    method: GET
    data_selector: random
    params: {}
- name: PhoneNumber
  endpoint:
    path: /random/phonenumber
    method: GET
    data_selector: random
    params: {}
- name: Photography
  endpoint:
    path: /random/photography
    method: GET
    data_selector: random
    params: {}
- name: ProgrammingLanguage
  endpoint:
    path: /random/programminglanguage
    method: GET
    data_selector: random
    params: {}
- name: Relationship
  endpoint:
    path: /random/relationship
    method: GET
    data_selector: random
    params: {}
- name: Restaurant
  endpoint:
    path: /random/restaurant
    method: GET
    data_selector: random
    params: {}
- name: Robin
  endpoint:
    path: /random/robin
    method: GET
    data_selector: random
    params: {}
- name: RockBand
  endpoint:
    path: /random/rockband
    method: GET
    data_selector: random
    params: {}
- name: Science
  endpoint:
    path: /random/science
    method: GET
    data_selector: random
    params: {}
- name: Shakespeare
  endpoint:
    path: /random/shakespeare
    method: GET
    data_selector: random
    params: {}
- name: Sip
  endpoint:
    path: /random/sip
    method: GET
    data_selector: random
    params: {}
- name: Size
  endpoint:
    path: /random/size
    method: GET
    data_selector: random
    params: {}
- name: SlackEmoji
  endpoint:
    path: /random/slackemoji
    method: GET
    data_selector: random
    params: {}
- name: Space
  endpoint:
    path: /random/space
    method: GET
    data_selector: random
    params: {}
- name: Stock
  endpoint:
    path: /random/stock
    method: GET
    data_selector: random
    params: {}
- name: Subscription
  endpoint:
    path: /random/subscription
    method: GET
    data_selector: random
    params: {}
- name: Superhero
  endpoint:
    path: /random/superhero
    method: GET
    data_selector: random
    params: {}
- name: Team
  endpoint:
    path: /random/team
    method: GET
    data_selector: random
    params: {}
- name: Text
  endpoint:
    path: /random/text
    method: GET
    data_selector: random
    params: {}
- name: Tron
  endpoint:
    path: /random/tron
    method: GET
    data_selector: random
    params: {}
- name: Twitter
  endpoint:
    path: /random/twitter
    method: GET
    data_selector: random
    params: {}
- name: University
  endpoint:
    path: /random/university
    method: GET
    data_selector: random
    params: {}
- name: Vehicle
  endpoint:
    path: /random/vehicle
    method: GET
    data_selector: random
    params: {}
- name: Verb
  endpoint:
    path: /random/verb
    method: GET
    data_selector: random
    params: {}
- name: Weather
  endpoint:
    path: /random/weather
    method: GET
    data_selector: random
    params: {}
- name: Yoda
  endpoint:
    path: /random/yoda
    method: GET
    data_selector: random
    params: {}
- name: beer
  endpoint:
    path: /beer
    method: GET
    data_selector: records
- name: coffee
  endpoint:
    path: /coffee
    method: GET
    data_selector: records
- name: dessert
  endpoint:
    path: /dessert
    method: GET
    data_selector: records
- name: food
  endpoint:
    path: /food
    method: GET
    data_selector: records
- name: tea
  endpoint:
    path: /tea
    method: GET
    data_selector: records
- name: movie
  endpoint:
    path: /movie
    method: GET
    data_selector: records
- name: keys
  endpoint:
    path: /api/keys
    method: GET
    data_selector: keys
- name: import_stubs
  endpoint:
    path: /__admin/ext/imports
    method: POST
- name: export_stubs
  endpoint:
    path: /__admin/mappings
    method: GET
- name: Audit Events
  endpoint:
    path: /audit-events/overview
    method: GET
    data_selector: auditEvents
    params: {}
- name: usage
  endpoint:
    path: /v1/subscriptions/{subscriptionId}/usage
    method: GET
    data_selector: usage
    params: {}
- name: audit_events
  endpoint:
    path: /audit-events
    method: GET
    data_selector: events
    params: {}
- name: get_self
  endpoint:
    path: /api-reference/users/get-self
    method: GET
- name: update_organisation
  endpoint:
    path: /api-reference/organisations/update-organisation
    method: POST
- name: delete_organisation_member_user
  endpoint:
    path: /api-reference/organisations/delete-organisation-member-user
    method: DELETE
- name: get_users_in_organisation
  endpoint:
    path: /api-reference/users/get-users-in-an-organisation
    method: GET
- name: organisation_info
  endpoint:
    path: /api-reference/organisation-info-and-members
    method: GET
- name: get_all_teams_in_organisation
  endpoint:
    path: /api-reference/teams/get-all-teams-in-an-organisation
    method: GET
- name: get_users_in_organisation
  endpoint:
    path: /api-reference/users/get-users-in-an-organisation
    method: GET
    params:
      q: ''
- name: add_team_member
  endpoint:
    path: /api-reference/teams/add-team-member
    method: POST
- name: delete_team_member
  endpoint:
    path: /api-reference/teams/delete-a-team-member
    method: DELETE
- name: user_info
  endpoint:
    path: /api-reference/users/get-self
    method: GET
- name: users_in_organisation
  endpoint:
    path: /api-reference/users/get-users-in-an-organisation
    method: GET
- name: usage
  endpoint:
    path: /v1/subscriptions/{subscriptionId}/usage
    method: GET
    data_selector: usage
    params: {}
- name: mock_api
  endpoint:
    path: /api-reference/mock-apis/create-a-new-mock-api
    method: POST
- name: acl_candidates
  endpoint:
    path: /api-reference/access-control/get-acl-candidates
    method: GET
- name: update_acl
  endpoint:
    path: /api-reference/access-control/update-an-entitys-acl
    method: POST
- name: get_self
  endpoint:
    path: /api-reference/users/get-self
    method: GET
- name: update_organisation
  endpoint:
    path: /api-reference/organisations/update-organisation
    method: POST
- name: delete_organisation_member_user
  endpoint:
    path: /api-reference/organisations/delete-organisation-member-user
    method: DELETE
- name: get_users_in_organisation
  endpoint:
    path: /api-reference/users/get-users-in-an-organisation
    method: GET
- name: add_team_member
  endpoint:
    path: /api-reference/teams/add-team-member
    method: POST
- name: delete_team_member
  endpoint:
    path: /api-reference/teams/delete-a-team-member
    method: DELETE
- name: get_all_teams_in_organisation
  endpoint:
    path: /api-reference/teams/get-all-teams-in-an-organisation
    method: GET
- name: get_users_in_organisation
  endpoint:
    path: /api-reference/users/get-users-in-an-organisation
    method: GET
- name: get_self
  endpoint:
    path: /api-reference/users/get-self
    method: GET
- name: get_users_in_organisation
  endpoint:
    path: /api-reference/users/get-users-in-an-organisation
    method: GET
- name: mock_api_management
  endpoint:
    path: /mock-api-management
    method: GET
    data_selector: mockApis
    params: {}
- name: stub_management
  endpoint:
    path: /stub-management
    method: GET
    data_selector: stubs
    params: {}
- name: data_sources
  endpoint:
    path: /data-sources
    method: GET
    data_selector: dataSources
    params: {}
- name: mock_api
  endpoint:
    path: /api-reference/mock-apis/create-a-new-mock-api
    method: POST
- name: acl_candidates
  endpoint:
    path: /api-reference/access-control/get-acl-candidates
    method: GET
- name: update_acl
  endpoint:
    path: /api-reference/access-control/update-an-entitys-acl
    method: POST
- name: todo_items
  endpoint:
    path: /todo-items
    method: GET
    data_selector: items
- name: post_todo_item
  endpoint:
    path: /todo-items
    method: POST
    data_selector: message
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: contacts
    params: {}
- name: individual_contact
  endpoint:
    path: /v1/contacts/{id}
    method: GET
    data_selector: contact
    params: {}
- name: contact
  endpoint:
    path: /v1/contacts
    method: POST
    data_selector: contact
- name: companies
  endpoint:
    path: /v1/companies
    method: GET
    data_selector: companies
- name: who_am_i
  endpoint:
    path: /who_am_i
    method: GET
    data_selector: user
    params: {}
- name: list_my_mock_apis
  endpoint:
    path: /list_my_mock_apis
    method: GET
    data_selector: mockApis
    params: {}
- name: search_my_mock_apis
  endpoint:
    path: /search_my_mock_apis
    method: GET
    data_selector: mockApis
    params: {}
- name: create_mock_api
  endpoint:
    path: /create_mock_api
    method: POST
    data_selector: mockApi
    params: {}
- name: delete_mock_api
  endpoint:
    path: /delete_mock_api
    method: DELETE
    data_selector: confirmation
    params: {}
- name: clear_mock_api
  endpoint:
    path: /clear_mock_api
    method: DELETE
    data_selector: confirmation
    params: {}
- name: import_stubs_to_mock_api
  endpoint:
    path: /import_stubs_to_mock_api
    method: POST
    data_selector: confirmation
    params: {}
- name: get_stub_mappings
  endpoint:
    path: /get_stub_mappings
    method: GET
    data_selector: stubMappings
    params: {}
- name: update_stub_mapping
  endpoint:
    path: /update_stub_mapping
    method: PUT
    data_selector: confirmation
    params: {}
- name: delete_stub_mapping
  endpoint:
    path: /delete_stub_mapping
    method: DELETE
    data_selector: confirmation
    params: {}
- name: get_openapi
  endpoint:
    path: /get_openapi
    method: GET
    data_selector: openApiDocument
    params: {}
- name: put_openapi
  endpoint:
    path: /put_openapi
    method: PUT
    data_selector: confirmation
    params: {}
- name: get_graphql
  endpoint:
    path: /get_graphql
    method: GET
    data_selector: graphqlSchemaDocument
    params: {}
- name: put_graphql
  endpoint:
    path: /put_graphql
    method: PUT
    data_selector: confirmation
    params: {}
- name: get_request_journal
  endpoint:
    path: /get_request_journal
    method: GET
    data_selector: requestJournalData
    params: {}
- name: reset_request_journal
  endpoint:
    path: /reset_request_journal
    method: POST
    data_selector: confirmation
    params: {}
- name: start_recording
  endpoint:
    path: /start_recording
    method: POST
    data_selector: recordingSessionDetails
    params: {}
- name: get_recording_status
  endpoint:
    path: /get_recording_status
    method: GET
    data_selector: recordingStatusInfo
    params: {}
- name: stop_recording
  endpoint:
    path: /stop_recording
    method: POST
    data_selector: numberOfRecordedRequests
    params: {}
- name: capture_record_event
  endpoint:
    path: /capture_record_event
    method: POST
    data_selector: confirmation
    params: {}
- name: list_data_sources
  endpoint:
    path: /list_data_sources
    method: GET
    data_selector: dataSources
    params: {}
- name: get_data_source
  endpoint:
    path: /get_data_source
    method: GET
    data_selector: dataSourceMetadata
    params: {}
- name: get_data_source_data
  endpoint:
    path: /get_data_source_data
    method: GET
    data_selector: csvDataContent
    params: {}
- name: create_data_source
  endpoint:
    path: /create_data_source
    method: POST
    data_selector: createdDataSourceDetails
    params: {}
- name: update_data_source
  endpoint:
    path: /update_data_source
    method: PUT
    data_selector: confirmation
    params: {}
- name: update_data_source_data
  endpoint:
    path: /update_data_source_data
    method: PUT
    data_selector: confirmation
    params: {}
- name: delete_data_source
  endpoint:
    path: /delete_data_source
    method: DELETE
    data_selector: confirmation
    params: {}
- name: todo_items
  endpoint:
    path: /todo-items
    method: GET
    data_selector: items
- name: add_todo_item
  endpoint:
    path: /todo-items
    method: POST
    data_selector: message
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: contacts
- name: individual_contact
  endpoint:
    path: /v1/contacts/{id}
    method: GET
    data_selector: contact
- name: hello_world
  endpoint:
    path: /hello-world
    method: GET
notes:
- Authorization requires API key prefixed by 'Token '
- API key must be prefixed by 'Token '
- Your API key prefixed by 'Token '
- Authorization required is your API key prefixed by 'Token '
- Authorization is required with API key prefixed by 'Token '
- Authorization is the API key prefixed by 'Token '
- Authorization header requires the API key prefixed by 'Token '
- entityCollection can be 'mock-apis' or 'data-sources'
- Your API key must be prefixed by 'Token '
- Restores stub mappings to the defaults defined back in the backing store
- Requires setup of API key in headers for authorization.
- Your API key prefixed by 'Token ' is required in the header.
- Authorization header must contain the API key prefixed by 'Token '
- Authorization is your API key prefixed by 'Token '
- mockApiId is required and should be a string length of 5 to 10
- Authorization header requires API key prefixed by 'Token '
- Empty the request journal endpoint is deprecated.
- mockApiId must be a string of length 5 to 10
- Authorization requires an API key prefixed by 'Token '
- 'Authorization required: Your API key prefixed by ''Token '''
- Authorization requires prefix 'Token ' followed by the API key.
- Authorization requires the API key prefixed by 'Token '
- Authorization header must be prefixed by 'Token '
- Resets all scenario and dynamic state
- Authorization string must be prefixed by 'Token '
- Authorization header required with API key prefixed by 'Token '
- Authorization header requires prefix 'Token ' followed by the API key.
- Authorization is required and should be prefixed by 'Token '
- Typically it is a good idea to send a Content-Type header in HTTP responses, so
  add one by clicking New Header and setting Content-Type to application/json.
- Advanced request matching, bodyPatterns matching and response definition.
- Webhooks are triggered when a configured stub is matched.
- Webhook requests can be delayed until some time after the triggering request is
  received.
- Webhook request attributes can be templated using the content of the triggering
  request.
- Typically it is a good idea to send a `Content-Type` header in HTTP responses, so
  add one by clicking New Header and setting `Content-Type` to `application/json`.
- Chaos settings allow introducing failure elements into API requests.
- Each stub may have any number of webhooks configured on it.
- Webhooks are fired asynchronously, outside the lifetime of the request that triggered
  them.
- Fixed or random delays can be added to proxy responses in addition to direct responses,
  however chunked delays cannot at present.
- Chaos settings allow introducing random failures to test client resilience.
- By default WireMock Cloud will serve a generic 404 page if an incoming HTTP request
  is not matched to any stub mapping.
- Proxying is configured per-stub.
- Enable hostname rewriting to replace instances of the proxy target’s domain name.
- SOAP APIs typically use the SOAPAction header to select the appropriate action for
  the call.
- Rate limits are defined in your mock api settings page.
- Rate limits can be applied to a stub in the Response section.
- With the Git integration enabled, changes can still be saved to WireMock Cloud’s
  copy of the OpenAPI document independently of the configured Git repository.
- Once created rate limit names cannot be changed.
- Automatic generation/amendment of a mock API from an existing OpenAPI doc as it
  evolves
- API prototyping - defining API behaviour via stubs and auto-generating OpenAPI +
  documentation
- Most commands require you to have authenticated with WireMock Cloud.
- The key that WireMock Cloud will use to authenticate calls to your Git repository
  must also be configured here.
- Setting your API token using the `config` subcommand is an alternative to the login
  command.
- The CLI’s configured API endpoint is only relevant to customers using WireMock Cloud’s
  on-premise edition.
- Enabling Federation will add the appropriate federation fields to your GraphQL schema.
- API token is used to authenticate with WireMock Cloud when performing actions like
  recording or managing your mock APIs.
- The CLI offers a convenient way to record stubs from endpoints that are accessible
  from the computer running the CLI.
- The CLI can run in non-interactive mode, making it ideal for CI/CD pipelines.
- The environment configuration file specifies all the services you are recording.
- The cloud_id field specifies the Mock API you want to save to.
- The list command shows up to 20 results on the first page by default.
- The WireMock CLI accepts a configuration file to control how stubs are recorded.
- The CLI offers a convenient way to record stubs from endpoints that are accessible
  from the computer running the CLI, but not accessible from the internet.
- By default, all the recorded requests are held in memory, and sent to the destination
  Mock API in WireMock Cloud at the end of the recording session.
- If you don’t already have a Mock API in WireMock Cloud that you are recording to,
  you can omit the cloud_id field from your service definition.
- At present no logic other than replacement of the {{ recordedValue }} macro can
  be applied in the template.
- The {{ recordedValue }} macro cannot currently be used in an equalToJson, equalToXml
  or matching request matcher.
- The filter only contains a request matcher - it is not yet possible to apply rules
  conditionally based on the response.
- The template only contains a request matcher - it is not yet possible to define
  changes to the response definition in these rules.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Non-interactive recording sessions respond to the standard SIGTERM Unix signal.
- Pushing a local Mock API to WireMock Cloud will overwrite the existing Mock API.
- Non-interactive mode is ideal for CI/CD pipelines and automated environments where
  user interaction is not possible or desired.
- Scenarios can be reset to their 'Started' state.
- Dynamic state can be used to mock stateful journeys.
- State values can be managed within a context.
- By default equalToJson will match only if all of the elements in the input JSON
  are the same as the expected JSON, arrays are in the same order and no additional
  attributes are present.
- It is necessary to use contains in this instance as a JSONPath expression containing
  a query part (between the [? and ]) will always return a collection of results.
- WireMock Cloud provides a number of different options for matching the URL of an
  incoming request to a stub.
- Uses XML matching for request bodies with equalToXml and matchesXPath.
- State values are stored in a Least Recently Used cache.
- The default context can be set in the Mock API's Settings.
- The database data source feature is currently in private beta.
- WireMock Cloud applies limits to data sources dependent upon the plan your organisation
  is subscribed to.
- On the WireMock Cloud free plan, an account is limited to a maximum of 3 data sources.
- Each data source can contain up to 100 rows and each row must not exceed 10KB in
  size.
- During the enterprise trial period, this limit is increased to 1000 rows with a
  maximum row size of 100KB.
- Returning dynamic responses using Handlebars templates can be configured in the
  response body and header values.
- JWTs must be cryptographically signed in order to be valid.
- Both HS256 and RS256 signed tokens are supported.
- Clicking on the delete icon will open a confirmation dialog.
- Clicking Confirm will delete the data source, but it will not remove the data source
  from any stubs that are using it.
- Enable templating for a stub by ticking the 'Enable templating' box in the Response
  section.
- API token can be found at https://app.wiremock.cloud/account/security
- Admin API security will be disabled by default for APIs created prior to the security
  feature being released.
- Any member of an organisation can create a mock API.
- Mock APIs can be shared with other members of your organisation.
- Securing your mock API integrations.
- The private key is stored in encrypted form and only decrypted briefly when in use
  via a secure decryption service.
- The `xPath` helper can be used to extract values or sub documents via an XPath 1.0
  expression from an XML string.
- The audit event feature is only available to users on our Enterprise or Enterprise
  Trial plans.
- You will need to be an organisation administrator to create and manage audit event
  destinations.
- Each file saved in your S3 bucket follows the new line delimited JSON specification
- Supports auto-provisioning and SSO for user management via any SAML 2.x capable
  IdP.
- WireMock Cloud applies limits to audit event destinations dependent upon the plan
  your organisation is subscribed to.
- Accounts on the free plan do not have access to audit event destinations.
- Currently the authorization_code (server-side web) OAuth2 flow is supported.
- API Token authentication is the preferred method.
- OAuth 2.0 Device Authorization Flow is available for enterprise customers.
- Securing your mock API integrations requires attaching asymmetric keys.
- Keys can only be attached to a mock API’s OpenAPI Git integration.
- Versioning feature is currently in private beta.
- Usage data is associated with your organisation’s subscription.
- On the enterprise or enterprise trial plans, an account is limited to 1 audit event
  destination.
- Accounts on the free plan do not have access to this feature.
- API Token authentication is preferred.
- Your API key can be retrieved from the web application at https://app.wiremock.cloud/account/security.
- WireMock Cloud’s MCP server will work with any AI-powered tool that supports MCP.
- Ensure you follow the redirect when calling get self
- If admin API security enabled, use ClientTokenAuthenticator for authentication.
- Mock APIs by default don’t store any state
- The scenario can remain in state until manually reset
- Advanced request matching and bodyPatterns matching available.
- Enabling templating can be done by ticking the 'Enable templating' box in the Response
  section.
- WireMock Cloud cannot record by proxying to an endpoint that is not accessible via
  the internet.
- Automatic authentication support for HTTP requests through configurable authenticators
- Mock APIs by default don’t store any state.
- You can simulate lower-level errors with WireMock Cloud such as dropped network
  connections and delays.
- Uses OAuth2 with refresh token — requires setup of connected app in WireMock Cloud
- WireMock Cloud cannot record from an endpoint that requires authentication via mutual
  TLS.
- A current limitation of this approach is that response bodies represented as files
  under the __files directory will not be imported.
- If any of your stubs make use of response templating then you’ll need to ensure
  WireMock is started with the --local-response-templating CLI parameter or Java equivalent.
- It is not currently possible to import stubs that use the JWT and JWKS template
  helpers into WireMock.
errors:
- 307 Temporary redirect response to /v1/users/{userId}
- '401 Unauthorized: Recheck API key'
- '401 Unauthorized: Recheck API key or token'
- '204'
- '401'
- '409'
- '403 Forbidden: Check permissions'
- '422 Unprocessable Entity: Check request body format'
- '500 Internal Server Error: Retry the request'
- '403: Forbidden — Check API key or permissions'
- '403: Forbidden'
- '422: Unprocessable Entity'
- '400'
- '403'
- '404'
- '422'
- '404: Not Found'
- '401 Unauthorized: Recheck API key or permissions'
- '404 Not Found: Ensure the organisationId is correct'
- '500'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '404 Not Found: Verify user ID'
- '201: Success'
- '200: Success'
- 400 Bad Request
- 401 Unauthorized
- 403 Forbidden
- 404 Not Found
- '400: Bad Request'
- '401: Unauthorized'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 204 Success
- '201 Created: The stub mapping has been successfully created'
- '200: Successfully deleted'
- '200: Successfully reset'
- '401 Unauthorized: Recheck API key or token expiration'
- 200 OK
- '200: The stub mappings were successfully removed'
- '404 Not Found: Ensure the mockApiId is correct'
- '404 Not Found: Check if the mockApiId and requestId are correct'
- 200 Successfully reset
- '200: Removed request details'
- 200 - Successfully stopped recording
- 200 - Successfully got the record status
- '200: Successfully took a snapshot recording'
- '401 Unauthorized: Check if API key is correct'
- 204 Successfully updated
- 'NO_LOCAL_HEAD: This is the first time pulling from Git.'
- '200: Successfully imported'
- '403: Authorization required'
- '403: Forbidden - Check API key and permissions.'
- '403: Forbidden - Check your API key'
- '403: Forbidden - Check API key or permissions'
- '403: Forbidden access'
- '403 Forbidden: Invalid API key or insufficient permissions'
- '403: Unauthorized access - ensure valid API key'
- '403: Forbidden - Invalid API key or access denied'
- '200'
- '403 Forbidden: Sorry, you can''t do that'
- '429 Too Many Requests: Rate limit exceeded'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API token or authorization headers'
- 'Status: Audit events are yet to be sent to this destination'
- Failure to send audit events
- '404 Not Found: Request body did not match expected structure'
- '503 Service Unavailable: Simulated error response for specific request'
- '503 Service Unavailable: Triggered by specific contact ID.'
auth_info:
  mentioned_objects:
  - API key
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://wmc.wiremockapi.cloud
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
