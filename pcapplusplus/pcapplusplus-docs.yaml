resources:
- name: ExampleApp
  endpoint:
    path: /Examples/ExampleApp
    method: GET
    data_selector: files
    params: {}
- name: ExampleApp
  endpoint:
    path: /Examples/ExampleApp
    method: GET
    data_selector: files
- name: example_app
  endpoint:
    path: /path/to/your/package/example-app
    method: GET
    data_selector: example_data
    params: {}
- name: ExampleApp
  endpoint:
    path: /Examples/ExampleApp
    method: GET
    data_selector: files
- name: example_app
  endpoint:
    path: /path/to/your/package/example-app
    method: GET
- name: example_app
  endpoint:
    path: /path/to/your/package/example-app
    method: GET
    data_selector: files
    params: {}
- name: source_tutorial
  endpoint:
    path: /path/to/pcapplusplus/source/Tutorials/Tutorial-HelloWorld
    method: GET
    data_selector: files
    params: {}
- name: example_app
  endpoint:
    path: /path/to/your/package/example-app
    method: GET
    data_selector: records
    params: {}
- name: example_app
  endpoint:
    path: /path/to/your/package/example-app
    method: GET
    data_selector: files
    params: {}
- name: source_tutorial
  endpoint:
    path: /path/to/pcapplusplus/source/Tutorials/Tutorial-HelloWorld
    method: GET
    data_selector: files
    params: {}
- name: DPDK Initialization
  endpoint:
    path: /docs/dpdk/initialization
    method: GET
- name: Setup PcapPlusPlus with DPDK
  endpoint:
    path: /docs/dpdk/setup
    method: GET
- name: Supported DPDK versions
  endpoint:
    path: /docs/dpdk/supported_versions
    method: GET
- name: Packet++Test
  endpoint:
    path: /Tests/Packet++Test
    method: GET
    data_selector: tests
    params: {}
- name: Pcap++Test
  endpoint:
    path: /Tests/Pcap++Test
    method: GET
    data_selector: tests
    params: {}
- name: RawPacket
  endpoint:
    path: /docs/tutorials/intro
    method: GET
    data_selector: supported protocols
    params: {}
- name: Packet
  endpoint:
    path: /docs/tutorials/intro
    method: GET
    data_selector: supported protocols
    params: {}
- name: build_examples
  endpoint:
    path: /build/examples_bin
    method: GET
    data_selector: artifacts
- name: build_tests
  endpoint:
    path: /build/tests
    method: GET
    data_selector: test_cases
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: artifacts
    params: {}
- name: build
  endpoint:
    path: install/freebsd
    method: GET
- name: Packet Filtering
  endpoint:
    path: /api-docs/v24.09/_pcap_filter_8h.html
    method: GET
    data_selector: filters
- name: TLS Fingerprinting
  endpoint:
    path: /api-docs/v24.09/TLSFingerprinting
    method: GET
    data_selector: fingerprints
- name: Supported Network Protocols
  endpoint:
    path: /api-docs/v24.09/supported_protocols
    method: GET
    data_selector: protocols
- name: packet_capture
  endpoint:
    path: /packet/capture
    method: GET
    data_selector: packets
    params: {}
- name: packet_parsing
  endpoint:
    path: /packet/parsing
    method: GET
    data_selector: parsed_packets
    params: {}
- name: Data Link Layer (L2)
  endpoint:
    path: /supported-protocols/l2
    method: GET
    data_selector: protocols
    params: {}
- name: Network Layer (L3)
  endpoint:
    path: /supported-protocols/l3
    method: GET
    data_selector: protocols
    params: {}
- name: Transport Layer (L4)
  endpoint:
    path: /supported-protocols/l4
    method: GET
    data_selector: protocols
    params: {}
- name: Session Layer (L5)
  endpoint:
    path: /supported-protocols/l5
    method: GET
    data_selector: protocols
    params: {}
- name: Presentation Layer (L6)
  endpoint:
    path: /supported-protocols/l6
    method: GET
    data_selector: protocols
    params: {}
- name: Application Layer (L7)
  endpoint:
    path: /supported-protocols/l7
    method: GET
    data_selector: protocols
    params: {}
- name: TLS Fingerprinting
  endpoint:
    path: /examples/TLSFingerprinting
    method: GET
    data_selector: fingerprints
    params: {}
- name: Supported network protocols
  endpoint:
    path: /supported_network_protocols
    method: GET
    data_selector: protocols
    params: {}
- name: tls_fingerprinting
  endpoint:
    path: /tls/fingerprinting
    method: GET
    data_selector: fingerprint_data
- name: supported_network_protocols
  endpoint:
    path: /network/protocols
    method: GET
    data_selector: protocols_data
- name: Homebrew
  endpoint:
    path: /homebrew
    method: GET
    data_selector: available
    params: {}
- name: Vcpkg
  endpoint:
    path: /vcpkg
    method: GET
    data_selector: available
    params: {}
- name: Conan
  endpoint:
    path: /conan
    method: GET
    data_selector: available
    params: {}
- name: GitHub Release
  endpoint:
    path: /github-release
    method: GET
    data_selector: available
    params: {}
- name: Build From Source
  endpoint:
    path: /build-from-source
    method: GET
    data_selector: available
    params: {}
- name: DPDK Supported Versions
  endpoint:
    path: /docs/next/dpdk
    method: GET
    data_selector: supported_versions
    params: {}
- name: Windows
  endpoint:
    path: /docs/next/platforms#windows
    method: GET
    data_selector: supported_platforms
    params: {}
- name: Linux
  endpoint:
    path: /docs/next/platforms#linux
    method: GET
    data_selector: supported_platforms
    params: {}
- name: MacOS
  endpoint:
    path: /docs/next/platforms#macos
    method: GET
    data_selector: supported_platforms
    params: {}
- name: Android
  endpoint:
    path: /docs/next/platforms#android
    method: GET
    data_selector: supported_platforms
    params: {}
- name: FreeBSD
  endpoint:
    path: /docs/next/platforms#freebsd
    method: GET
    data_selector: supported_platforms
    params: {}
- name: Packet++Test
  endpoint:
    path: /Tests/Packet++Test
    method: GET
- name: Pcap++Test
  endpoint:
    path: /Tests/Pcap++Test
    method: GET
- name: PcapFilter
  endpoint:
    path: /PcapFilter.h
    method: GET
- name: Homebrew
  endpoint:
    path: /docs/v24.09/install/homebrew
    method: GET
    data_selector: details
    params: {}
- name: Vcpkg
  endpoint:
    path: /docs/v24.09/install/vcpkg
    method: GET
    data_selector: details
    params: {}
- name: Conan
  endpoint:
    path: /docs/v24.09/install/conan
    method: GET
    data_selector: details
    params: {}
- name: GitHub Release
  endpoint:
    path: /docs/v24.09/install/github-release
    method: GET
    data_selector: details
    params: {}
- name: Build From Source
  endpoint:
    path: /docs/v24.09/install/build-from-source
    method: GET
    data_selector: details
    params: {}
- name: DPDK
  endpoint:
    path: /docs/v24.09/dpdk
    method: GET
    data_selector: main_content
- name: benchmark_tcp_parsing
  endpoint:
    path: /docs/v24.09/benchmark/tcp_parsing
    method: GET
- name: benchmark_tcp_options_parsing
  endpoint:
    path: /docs/v24.09/benchmark/tcp_options_parsing
    method: GET
- name: benchmark_dns_parsing
  endpoint:
    path: /docs/v24.09/benchmark/dns_parsing
    method: GET
- name: google_benchmark
  endpoint:
    path: /docs/v24.09/benchmark/google_benchmark
    method: GET
- name: Packet++Test
  endpoint:
    path: /Tests/Packet++Test
    method: GET
    data_selector: records
    params: {}
- name: Pcap++Test
  endpoint:
    path: /Tests/Pcap++Test
    method: GET
    data_selector: records
    params: {}
notes:
- Pre-compiled packages are available for recent versions of Ubuntu, Fedora, RHEL
  and Alpine.
- Pre-compiled packages are available for recent versions of FreeBSD.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- PcapPlusPlus is released under the Unlicense license.
- Pre-compiled packages available for recent versions of Ubuntu, Fedora, RHEL, and
  Alpine.
- Pre-compiled PcapPlusPlus libraries for Android are available on the release page.
- If you have another Linux distribution or GCC version you'll need to build PcapPlusPlus
  from source.
- Make sure to set the appropriate paths in the PcapPlusPlusPropertySheet.props file.
- If you have other versions of FreeBSD you'll need to build PcapPlusPlus from source.
- PcapPlusPlus is a multi-platform C++ library for capturing, parsing and crafting
  of network packets.
- DPDK uses Linux huge-pages for faster virtual to physical page conversion resulting
  in better performance.
- DPDK uses a designated kernel module for kernel bypass.
- Make sure that network traffic is flowing to the device you're running the tests
  on.
- It's important to run the tests from the correct directory.
- This project requires Python 3.7 or newer.
- Some of the tests rely on live network traffic and need access to a network interface.
- If you're running on Windows with MinGW you need to run cmake with `-G "MinGW Makefiles"`
- If PcapPlusPlus is **NOT** installed in the default directory you may need to specify
  `CMAKE_PREFIX_PATH`.
- Assuming you want to build PcapPlusPlus into a build directory
- CMake supports cross compilation out-of-the-box
- PcapPlusPlus is available for both Intel and Apple Silicon processors.
- Optional - install Zstd if you wish to enable PCAPNG streaming compression support.
- Build PcapPlusPlus examples (default value is ON if building the project itself,
  otherwise OFF)
- Build PcapPlusPlus tests (default value is ON if building the project itself, otherwise
  OFF)
- Build PcapPlusPlus tutorials. This option is only available if DPCAPPP_BUILD_EXAMPLES=ON.
  The tutorials binaries will be under build/tutorials_bin (default value is OFF)
- Install PcapPlusPlus (default value is ON if building the project itself, otherwise
  OFF)
- Build shared libs (default value is OFF)
- Build the Pcap++ library (default value is ON). Turning it off will only build Common++
  and Packet++ and avoid third-party dependencies such as libpcap or WinPcap/Npcap
- 'Set compile time log level: Off (0), Error (1), Info (2), Debug (1) (Default value
  is Debug)'
- PcapPlusPlus is no longer actively maintained.
- PcapPlusPlus supports parsing, editing and generation of packets of various protocols,
  including those at Data Link, Network, Transport, Session, Presentation, and Application
  Layers.
- DPDK support requires specific setup for supported NICs.
- Uses TLS fingerprinting to analyze network traffic.
- Supports multiple network protocols across different layers.
- Zstd streaming compression is only supported when working with pcapng files.
- Not every NIC supports DPDK as the NIC needs to support the kernel bypass feature.
- Please note that it's very important to run the tests from the Tests/Pcap++Test
  directory.
- Uses Python 3.7 or newer.
- This project requires a working build of PcapPlusPlus and that the executables are
  under [PcapPlusPlus-Home]/Dist/examples.
- The BPF filter syntax is complicated and poorly documented.
- DPDK is no longer actively maintained.
- Older and newer DPDK versions may not work.
- Not all poll-mode drivers were tested, but the majority should work.
- It is very important to run the tests from the specific directory for accurate results.
errors:
- Device used in this test doesn't exist
- Memory leak detected
- Error opening the pcap file
- Couldn't read the first packet in the file
- Throttle API calls or reduce frequency
- Some tests may fail if sudo is required and not provided.
- Tests relying on network traffic will be skipped if no interface or gateway is provided.
- 'assertion failed: Device used in this test doesn''t exist'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects: []
client:
  base_url: https://github.com/seladb/PcapPlusPlus/releases/tag/v23.09
source_metadata: null
