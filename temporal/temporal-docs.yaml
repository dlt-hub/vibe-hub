resources:
- name: workflows
  endpoint:
    path: /api/v1/namespaces/default/workflows
    method: GET
    data_selector: executions
- name: activity
  endpoint:
    path: /activity
    method: POST
    data_selector: results
- name: account-level-roles
  endpoint:
    path: /api/account-level-roles
    method: GET
    data_selector: roles
- name: namespace-level-permissions
  endpoint:
    path: /api/namespace-level-permissions
    method: GET
    data_selector: permissions
- name: Worker Health Metrics
  endpoint:
    path: /production-deployment/cloud/worker-health
    method: GET
    data_selector: metrics
    params: {}
- name: Task Backlog Detection
  endpoint:
    path: /production-deployment/cloud/task-backlog
    method: GET
    data_selector: metrics
    params: {}
- name: Greedy Worker Resources
  endpoint:
    path: /production-deployment/cloud/greedy-workers
    method: GET
    data_selector: metrics
    params: {}
- name: Misconfigured Workers
  endpoint:
    path: /production-deployment/cloud/misconfigured-workers
    method: GET
    data_selector: metrics
    params: {}
- name: Sticky Execution Cache
  endpoint:
    path: /production-deployment/cloud/sticky-cache
    method: GET
    data_selector: metrics
    params: {}
- name: service_health
  endpoint:
    path: /service/health
    method: GET
    data_selector: metrics
    params: {}
- name: replication_lag
  endpoint:
    path: /replication/lag
    method: GET
    data_selector: metrics
    params: {}
- name: account
  endpoint:
    path: /cloud/tcld/account
    method: GET
    data_selector: records
- name: apikey
  endpoint:
    path: /cloud/tcld/apikey
    method: GET
    data_selector: records
- name: feature
  endpoint:
    path: /production-deployment/cloud/tcld/feature
    method: GET
    data_selector: records
- name: generate-certificates
  endpoint:
    path: /cloud/tcld/generate-certificates
    method: GET
    data_selector: records
- name: login
  endpoint:
    path: /cloud/tcld/login
    method: POST
    data_selector: records
- name: logout
  endpoint:
    path: /cloud/tcld/logout
    method: POST
    data_selector: records
- name: namespace
  endpoint:
    path: /cloud/tcld/namespace
    method: GET
    data_selector: records
- name: nexus
  endpoint:
    path: /cloud/tcld/nexus
    method: GET
    data_selector: records
- name: request
  endpoint:
    path: /cloud/tcld/request
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /cloud/tcld/user
    method: GET
    data_selector: records
- name: version
  endpoint:
    path: /cloud/tcld/version
    method: GET
    data_selector: records
- name: workflows
  endpoint:
    path: /workflows
    method: POST
    data_selector: results
    params: {}
- name: activities
  endpoint:
    path: /activities
    method: POST
    data_selector: results
    params: {}
- name: namespace
  endpoint:
    path: /api/namespace
    method: POST
    data_selector: namespace
    params:
      WorkflowExecutionRetentionPeriod: 1 day
- name: Query
  endpoint:
    path: /sending-messages#sending-queries
    method: GET
- name: Signal
  endpoint:
    path: /sending-messages#sending-signals
    method: GET
- name: Update
  endpoint:
    path: /sending-messages#sending-updates
    method: GET
- name: nexus_endpoint
  endpoint:
    path: /nexus/endpoint
    method: POST
    data_selector: operation
    params: {}
- name: nexus_operation
  endpoint:
    path: /nexus/operation
    method: POST
    data_selector: operation
    params: {}
- name: worker_sessions
  endpoint:
    path: /develop/go/sessions
    method: GET
    data_selector: session_data
    params: {}
- name: temporal_testing
  endpoint:
    path: /temporal-testing
    method: GET
    data_selector: records
    params: {}
- name: workflow_execution
  endpoint:
    path: /cancel
    method: POST
    data_selector: WorkflowExecutionCancelRequested
    params: {}
- name: terminate_workflow
  endpoint:
    path: /terminate
    method: POST
    data_selector: WorkflowExecutionTerminated
    params: {}
- name: asynchronous_activity_completion
  endpoint:
    path: /activity-execution#asynchronous-activity-completion
    method: GET
    data_selector: records
- name: custom_payload_codec
  endpoint:
    path: /custom_payload_codec
    method: POST
    data_selector: payloads
    params: {}
- name: custom_payload_conversion
  endpoint:
    path: /custom_payload_conversion
    method: POST
    data_selector: payloads
    params: {}
- name: Durable Timers
  endpoint:
    path: /develop/java/timers
    method: GET
    data_selector: timers
    params: {}
- name: greet
  endpoint:
    path: /activities/greet
    method: POST
    data_selector: result
    params: {}
- name: async_completion
  endpoint:
    path: /activity-execution#asynchronous-activity-completion
    method: GET
    data_selector: activities
    params: {}
- name: local_activities
  endpoint:
    path: /local-activity
    method: GET
    data_selector: localActivities
    params: {}
- name: Continue-As-New
  endpoint:
    path: /workflow-execution/continue-as-new
    method: GET
    data_selector: workflow
    params: {}
- name: Namespaces
  endpoint:
    path: /namespaces
    method: GET
- name: Recent Workflows
  endpoint:
    path: /workflows/recent
    method: GET
- name: Schedules
  endpoint:
    path: /schedules
    method: GET
- name: Settings
  endpoint:
    path: /settings
    method: GET
- name: Archive
  endpoint:
    path: /archive
    method: GET
- name: Codec Server
  endpoint:
    path: /codec-server
    method: GET
- name: auth
  endpoint:
    path: /auth
    method: GET
    data_selector: auth
    params:
      enabled: true
      providers:
        label: sso
        type: oidc
        providerUrl: https://accounts.google.com
        clientId: xxxxx-xxxx.apps.googleusercontent.com
        clientSecret: xxxxxxxxxxxxxxxxxxxx
        callbackUrl: https://xxxx.com:8080/auth/sso/callback
        scopes:
        - openid
        - profile
        - email
- name: WorkflowExecutionStarted
  endpoint:
    path: /workflow/execution/started
    method: GET
    data_selector: events
- name: WorkflowExecutionCompleted
  endpoint:
    path: /workflow/execution/completed
    method: GET
    data_selector: events
- name: WorkflowExecutionFailed
  endpoint:
    path: /workflow/execution/failed
    method: GET
    data_selector: events
- name: WorkflowExecutionTimedOut
  endpoint:
    path: /workflow/execution/timedout
    method: GET
    data_selector: events
- name: WorkflowExecutionCancelRequested
  endpoint:
    path: /workflow/execution/cancelrequested
    method: GET
    data_selector: events
- name: WorkflowExecutionCanceled
  endpoint:
    path: /workflow/execution/canceled
    method: GET
    data_selector: events
- name: WorkflowExecutionSignaled
  endpoint:
    path: /workflow/execution/signaled
    method: GET
    data_selector: events
- name: WorkflowExecutionTerminated
  endpoint:
    path: /workflow/execution/terminated
    method: GET
    data_selector: events
- name: WorkflowExecutionContinuedAsNew
  endpoint:
    path: /workflow/execution/continuedasnew
    method: GET
    data_selector: events
- name: WorkflowExecutionOptionsUpdated
  endpoint:
    path: /workflow/execution/optionsupdated
    method: GET
    data_selector: events
- name: WorkflowTaskScheduled
  endpoint:
    path: /workflow/task/scheduled
    method: GET
    data_selector: events
- name: WorkflowTaskStarted
  endpoint:
    path: /workflow/task/started
    method: GET
    data_selector: events
- name: WorkflowTaskCompleted
  endpoint:
    path: /workflow/task/completed
    method: GET
    data_selector: events
- name: WorkflowTaskTimedOut
  endpoint:
    path: /workflow/task/timedout
    method: GET
    data_selector: events
- name: WorkflowTaskFailed
  endpoint:
    path: /workflow-execution/event/workflowtaskfailed
    method: GET
    data_selector: details
    params: {}
- name: ActivityTaskScheduled
  endpoint:
    path: /workflow-execution/event/activitytaskscheduled
    method: GET
    data_selector: details
    params: {}
- name: ActivityTaskStarted
  endpoint:
    path: /workflow-execution/event/activitytaskstarted
    method: GET
    data_selector: details
    params: {}
- name: ActivityTaskCompleted
  endpoint:
    path: /workflow-execution/event/activitytaskcompleted
    method: GET
    data_selector: details
    params: {}
- name: ActivityTaskFailed
  endpoint:
    path: /workflow-execution/event/activitytaskfailed
    method: GET
    data_selector: details
    params: {}
- name: ActivityTaskTimedOut
  endpoint:
    path: /workflow-execution/event/activitytasktimedout
    method: GET
    data_selector: details
    params: {}
- name: ActivityTaskCancelRequested
  endpoint:
    path: /workflow-execution/event/activitytaskcancelrequested
    method: GET
    data_selector: details
    params: {}
- name: ActivityTaskCanceled
  endpoint:
    path: /workflow-execution/event/activitytaskcanceled
    method: GET
    data_selector: details
    params: {}
- name: TimerStarted
  endpoint:
    path: /workflow-execution/event/timerstarted
    method: GET
    data_selector: details
    params: {}
- name: TimerFired
  endpoint:
    path: /workflow-execution/event/timerfired
    method: GET
    data_selector: details
    params: {}
- name: TimerCanceled
  endpoint:
    path: /workflow-execution/event/timercanceled
    method: GET
    data_selector: details
    params: {}
- name: RequestCancelExternalWorkflowExecutionInitiated
  endpoint:
    path: /workflow-execution/event/requestcancelexternalworkflowexecutioninitiated
    method: GET
    data_selector: details
    params: {}
- name: RequestCancelExternalWorkflowExecutionFailed
  endpoint:
    path: /workflow-execution/event/requestcancelexternalworkflowexecutionfailed
    method: GET
    data_selector: details
    params: {}
- name: ExternalWorkflowExecutionCancelRequested
  endpoint:
    path: /workflow-execution/event/externalworkflowexecutioncancelrequested
    method: GET
    data_selector: details
    params: {}
- name: ExternalWorkflowExecutionSignaled
  endpoint:
    path: /workflow-execution/event/externalworkflowexecutionsignaled
    method: GET
    data_selector: details
    params: {}
- name: MarkerRecorded
  endpoint:
    path: /workflow-execution/event/markerrecorded
    method: GET
    data_selector: details
    params: {}
- name: StartChildWorkflowExecutionInitiated
  endpoint:
    path: /workflow-execution/event/startchildworkflowexecutioninitiated
    method: GET
    data_selector: details
    params: {}
- name: StartChildWorkflowExecutionFailed
  endpoint:
    path: /workflow-execution/event/startchildworkflowexecutionfailed
    method: GET
    data_selector: details
    params: {}
- name: ChildWorkflowExecutionStarted
  endpoint:
    path: /workflow-execution/event/childworkflowexecutionstarted
    method: GET
    data_selector: details
    params: {}
- name: ChildWorkflowExecutionCompleted
  endpoint:
    path: /workflow-execution/event/childworkflowexecutioncompleted
    method: GET
    data_selector: details
    params: {}
- name: ChildWorkflowExecutionFailed
  endpoint:
    path: /workflow-execution/event/childworkflowexecutionfailed
    method: GET
    data_selector: details
    params: {}
- name: ChildWorkflowExecutionCanceled
  endpoint:
    path: /workflow-execution/event/childworkflowexecutioncanceled
    method: GET
    data_selector: details
    params: {}
- name: ChildWorkflowExecutionTimedOut
  endpoint:
    path: /workflow-execution/event/childworkflowexecutiontimedout
    method: GET
    data_selector: details
    params: {}
- name: ChildWorkflowExecutionTerminated
  endpoint:
    path: /workflow-execution/event/child-workflow-execution-terminated
    method: GET
    data_selector: Event
    params: {}
- name: SignalExternalWorkflowExecutionInitiated
  endpoint:
    path: /workflow-execution/event/signal-external-workflow-execution-initiated
    method: GET
    data_selector: Event
    params: {}
- name: SignalExternalWorkflowExecutionFailed
  endpoint:
    path: /workflow-execution/event/signal-external-workflow-execution-failed
    method: GET
    data_selector: Event
    params: {}
- name: UpsertWorkflowSearchAttributes
  endpoint:
    path: /workflow-execution/event/upsert-workflow-search-attributes
    method: GET
    data_selector: Event
    params: {}
- name: WorkflowExecutionUpdateAcceptedEvent
  endpoint:
    path: /workflow-execution/event/workflow-execution-update-accepted
    method: GET
    data_selector: Event
    params: {}
- name: WorkflowExecutionUpdateCompletedEvent
  endpoint:
    path: /workflow-execution/event/workflow-execution-update-completed
    method: GET
    data_selector: Event
    params: {}
- name: NexusOperationScheduled
  endpoint:
    path: /workflow-execution/event/nexus-operation-scheduled
    method: GET
    data_selector: Event
    params: {}
- name: NexusOperationStarted
  endpoint:
    path: /workflow-execution/event/nexus-operation-started
    method: GET
    data_selector: Event
    params: {}
- name: NexusOperationCompleted
  endpoint:
    path: /workflow-execution/event/nexus-operation-completed
    method: GET
    data_selector: Event
    params: {}
- name: NexusOperationFailed
  endpoint:
    path: /workflow-execution/event/nexus-operation-failed
    method: GET
    data_selector: Event
    params: {}
- name: NexusOperationTimedOut
  endpoint:
    path: /workflow-execution/event/nexus-operation-timed-out
    method: GET
    data_selector: Event
    params: {}
- name: NexusOperationCancelRequested
  endpoint:
    path: /workflow-execution/event/nexus-operation-cancel-requested
    method: GET
    data_selector: Event
    params: {}
- name: NexusOperationCanceled
  endpoint:
    path: /workflow-execution/event/nexus-operation-canceled
    method: GET
    data_selector: Event
    params: {}
- name: Workflow Execution
  endpoint:
    path: /workflow-execution
    method: GET
    data_selector: records
- name: global
  endpoint:
    path: /configuration/global
    method: GET
    data_selector: records
- name: persistence
  endpoint:
    path: /configuration/persistence
    method: GET
    data_selector: records
- name: Docker Compose
  endpoint:
    path: /temporalio/docker-compose
    method: GET
    data_selector: services
    params: {}
- name: Temporal Server binaries
  endpoint:
    path: /temporal-server-binaries
    method: GET
    data_selector: binaries
    params: {}
- name: temporal_service_metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: sdk_metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: primary_visibility
  endpoint:
    path: /self-hosted-guide/visibility
    method: GET
- name: secondary_visibility
  endpoint:
    path: /self-hosted-guide/visibility
    method: GET
- name: CountWorkflowExecutionsRequest
  endpoint:
    path: /temporal/api/workflowservice/v1/CountWorkflowExecutions
    method: POST
    data_selector: namespace
    params: {}
- name: GetClusterInfoResponse
  endpoint:
    path: /temporal/api/workflowservice/v1/GetClusterInfo
    method: GET
    data_selector: cluster_id
    params: {}
- name: GetWorkerTaskReachabilityResponse
  endpoint:
    path: /temporal/api/workflowservice/v1/GetWorkerTaskReachabilityResponse
    method: GET
    data_selector: build_id_reachability
    params: {}
- name: GetWorkflowExecutionHistoryRequest
  endpoint:
    path: /temporal/api/workflowservice/v1/GetWorkflowExecutionHistoryRequest
    method: GET
    data_selector: namespace, execution, maximum_page_size, next_page_token, wait_new_event,
      history_event_filter_type, skip_archival
    params: {}
- name: ListArchivedWorkflowExecutionsRequest
  endpoint:
    path: /temporal/api/workflowservice/v1/ListArchivedWorkflowExecutionsRequest
    method: GET
    data_selector: namespace, page_size, next_page_token, query
    params: {}
- name: ListClosedWorkflowExecutionsRequest
  endpoint:
    path: /temporal/api/workflowservice/v1/ListClosedWorkflowExecutionsRequest
    method: GET
    data_selector: namespace, maximum_page_size, next_page_token, start_time_filter,
      execution_filter, type_filter, status_filter
    params: {}
- name: ListOpenWorkflowExecutionsRequest
  endpoint:
    path: /temporal/api/workflowservice/v1/ListOpenWorkflowExecutionsRequest
    method: GET
    data_selector: namespace, maximum_page_size, next_page_token, start_time_filter,
      execution_filter, type_filter
    params: {}
- name: ListNamespacesRequest
  endpoint:
    path: /temporal/api/workflowservice/v1/ListNamespacesRequest
    method: GET
    data_selector: page_size, next_page_token, namespace_filter
    params: {}
- name: PollActivityTaskQueueRequest
  endpoint:
    path: /temporal/api/workflowservice/v1/PollActivityTaskQueueRequest
    method: GET
    data_selector: namespace, task_queue, identity, task_queue_metadata, worker_version_capabilities
    params: {}
- name: RegisterNamespace
  endpoint:
    path: /RegisterNamespace
    method: POST
- name: DescribeNamespace
  endpoint:
    path: /DescribeNamespace
    method: POST
- name: ListNamespaces
  endpoint:
    path: /ListNamespaces
    method: POST
- name: UpdateNamespace
  endpoint:
    path: /UpdateNamespace
    method: POST
- name: DeprecateNamespace
  endpoint:
    path: /DeprecateNamespace
    method: POST
- name: StartWorkflowExecution
  endpoint:
    path: /StartWorkflowExecution
    method: POST
- name: GetWorkflowExecutionHistory
  endpoint:
    path: /GetWorkflowExecutionHistory
    method: POST
- name: GetWorkflowExecutionHistoryReverse
  endpoint:
    path: /GetWorkflowExecutionHistoryReverse
    method: POST
- name: PollWorkflowTaskQueue
  endpoint:
    path: /PollWorkflowTaskQueue
    method: POST
- name: RespondWorkflowTaskCompleted
  endpoint:
    path: /RespondWorkflowTaskCompleted
    method: POST
- name: RespondWorkflowTaskFailed
  endpoint:
    path: /RespondWorkflowTaskFailed
    method: POST
- name: PollActivityTaskQueue
  endpoint:
    path: /PollActivityTaskQueue
    method: POST
- name: RecordActivityTaskHeartbeat
  endpoint:
    path: /RecordActivityTaskHeartbeat
    method: POST
- name: RecordActivityTaskHeartbeatById
  endpoint:
    path: /RecordActivityTaskHeartbeatById
    method: POST
- name: RespondActivityTaskCompleted
  endpoint:
    path: /RespondActivityTaskCompleted
    method: POST
- name: RespondActivityTaskCompletedById
  endpoint:
    path: /RespondActivityTaskCompletedById
    method: POST
- name: RespondActivityTaskFailed
  endpoint:
    path: /RespondActivityTaskFailed
    method: POST
- name: RespondActivityTaskFailedById
  endpoint:
    path: /RespondActivityTaskFailedById
    method: POST
- name: RespondActivityTaskCanceled
  endpoint:
    path: /RespondActivityTaskCanceled
    method: POST
- name: RespondActivityTaskCanceledById
  endpoint:
    path: /RespondActivityTaskCanceledById
    method: POST
- name: RequestCancelWorkflowExecution
  endpoint:
    path: /RequestCancelWorkflowExecution
    method: POST
- name: SignalWorkflowExecution
  endpoint:
    path: /SignalWorkflowExecution
    method: POST
- name: SignalWithStartWorkflowExecution
  endpoint:
    path: /SignalWithStartWorkflowExecution
    method: POST
- name: ResetWorkflowExecution
  endpoint:
    path: /ResetWorkflowExecution
    method: POST
- name: TerminateWorkflowExecution
  endpoint:
    path: /TerminateWorkflowExecution
    method: POST
- name: DeleteWorkflowExecution
  endpoint:
    path: /DeleteWorkflowExecution
    method: POST
- name: ListOpenWorkflowExecutions
  endpoint:
    path: /ListOpenWorkflowExecutions
    method: POST
- name: ListClosedWorkflowExecutions
  endpoint:
    path: /ListClosedWorkflowExecutions
    method: POST
- name: ListWorkflowExecutions
  endpoint:
    path: /ListWorkflowExecutions
    method: POST
- name: ListArchivedWorkflowExecutions
  endpoint:
    path: /ListArchivedWorkflowExecutions
    method: POST
- name: ScanWorkflowExecutions
  endpoint:
    path: /ScanWorkflowExecutions
    method: POST
- name: CountWorkflowExecutions
  endpoint:
    path: /CountWorkflowExecutions
    method: POST
- name: GetSearchAttributes
  endpoint:
    path: /GetSearchAttributes
    method: POST
- name: RespondQueryTaskCompleted
  endpoint:
    path: /RespondQueryTaskCompleted
    method: POST
- name: ResetStickyTaskQueue
  endpoint:
    path: /ResetStickyTaskQueue
    method: POST
- name: QueryWorkflow
  endpoint:
    path: /QueryWorkflow
    method: POST
- name: DescribeWorkflowExecution
  endpoint:
    path: /DescribeWorkflowExecution
    method: POST
- name: DescribeTaskQueue
  endpoint:
    path: /DescribeTaskQueue
    method: POST
- name: GetClusterInfo
  endpoint:
    path: /GetClusterInfo
    method: POST
- name: GetSystemInfo
  endpoint:
    path: /GetSystemInfo
    method: POST
- name: ListTaskQueuePartitions
  endpoint:
    path: /ListTaskQueuePartitions
    method: POST
- name: CreateSchedule
  endpoint:
    path: /CreateSchedule
    method: POST
- name: DescribeSchedule
  endpoint:
    path: /DescribeSchedule
    method: POST
- name: UpdateSchedule
  endpoint:
    path: /UpdateSchedule
    method: POST
- name: PatchSchedule
  endpoint:
    path: /PatchSchedule
    method: POST
- name: ListScheduleMatchingTimes
  endpoint:
    path: /ListScheduleMatchingTimes
    method: POST
- name: DeleteSchedule
  endpoint:
    path: /DeleteSchedule
    method: POST
- name: ListSchedules
  endpoint:
    path: /ListSchedules
    method: POST
- name: UpdateWorkerBuildIdCompatibility
  endpoint:
    path: /UpdateWorkerBuildIdCompatibility
    method: POST
- name: GetWorkerTaskReachability
  endpoint:
    path: /api/workflowservice/v1/GetWorkerTaskReachability
    method: GET
- name: GetWorkerBuildIdCompatibility
  endpoint:
    path: /api/workflowservice/v1/GetWorkerBuildIdCompatibility
    method: GET
- name: UpdateWorkflowExecution
  endpoint:
    path: /api/workflowservice/v1/UpdateWorkflowExecution
    method: POST
- name: PollWorkflowExecutionUpdate
  endpoint:
    path: /api/workflowservice/v1/PollWorkflowExecutionUpdate
    method: GET
- name: StartBatchOperation
  endpoint:
    path: /api/workflowservice/v1/StartBatchOperation
    method: POST
- name: StopBatchOperation
  endpoint:
    path: /api/workflowservice/v1/StopBatchOperation
    method: POST
- name: DescribeBatchOperation
  endpoint:
    path: /api/workflowservice/v1/DescribeBatchOperation
    method: GET
- name: ListBatchOperations
  endpoint:
    path: /api/workflowservice/v1/ListBatchOperations
    method: GET
- name: PollNexusTaskQueue
  endpoint:
    path: /api/workflowservice/v1/PollNexusTaskQueue
    method: GET
- name: RespondNexusTaskCompleted
  endpoint:
    path: /api/workflowservice/v1/RespondNexusTaskCompleted
    method: POST
- name: RespondNexusTaskFailed
  endpoint:
    path: /api/workflowservice/v1/RespondNexusTaskFailed
    method: POST
- name: PendingActivityInfo
  endpoint:
    path: /api/history/v1/pendingActivityInfo
    method: GET
    data_selector: records
    params: {}
- name: PendingChildExecutionInfo
  endpoint:
    path: /api/history/v1/pendingChildExecutionInfo
    method: GET
    data_selector: records
    params: {}
- name: PendingWorkflowTaskInfo
  endpoint:
    path: /api/history/v1/pendingWorkflowTaskInfo
    method: GET
    data_selector: records
    params: {}
- name: ResetPointInfo
  endpoint:
    path: /api/history/v1/resetPointInfo
    method: GET
    data_selector: records
    params: {}
- name: WorkflowExecutionConfig
  endpoint:
    path: /api/history/v1/workflowExecutionConfig
    method: GET
    data_selector: records
    params: {}
- name: WorkflowExecutionInfo
  endpoint:
    path: /api/history/v1/workflowExecutionInfo
    method: GET
    data_selector: records
    params: {}
- name: StartChildWorkflowExecutionInitiatedEventAttributes
  endpoint:
    path: /temporal/api/history/v1/startChildWorkflowExecution
    method: GET
    data_selector: records
- name: TimerCanceledEventAttributes
  endpoint:
    path: /temporal/api/history/v1/timerCanceled
    method: GET
    data_selector: records
- name: TimerFiredEventAttributes
  endpoint:
    path: /temporal/api/history/v1/timerFired
    method: GET
    data_selector: records
- name: TimerStartedEventAttributes
  endpoint:
    path: /temporal/api/history/v1/timerStarted
    method: GET
    data_selector: records
- name: UpsertWorkflowSearchAttributesEventAttributes
  endpoint:
    path: /temporal/api/history/v1/upsertWorkflowSearchAttributes
    method: GET
    data_selector: records
- name: WorkflowExecutionCancelRequestedEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowExecutionCancelRequested
    method: GET
    data_selector: records
- name: WorkflowExecutionCanceledEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowExecutionCanceled
    method: GET
    data_selector: records
- name: WorkflowExecutionCompletedEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowExecutionCompleted
    method: GET
    data_selector: records
- name: WorkflowExecutionContinuedAsNewEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowExecutionContinuedAsNew
    method: GET
    data_selector: records
- name: WorkflowExecutionFailedEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowExecutionFailed
    method: GET
    data_selector: records
- name: WorkflowExecutionSignaledEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowExecutionSignaled
    method: GET
    data_selector: records
- name: WorkflowExecutionStartedEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowExecutionStarted
    method: GET
    data_selector: records
- name: WorkflowExecutionTerminatedEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowExecutionTerminated
    method: GET
    data_selector: records
- name: WorkflowExecutionTimedOutEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowExecutionTimedOut
    method: GET
    data_selector: records
- name: WorkflowExecutionUpdateAcceptedEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowExecutionUpdateAccepted
    method: GET
    data_selector: records
- name: WorkflowExecutionUpdateAdmittedEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowExecutionUpdateAdmitted
    method: GET
    data_selector: records
- name: WorkflowExecutionUpdateCompletedEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowExecutionUpdateCompleted
    method: GET
    data_selector: records
- name: WorkflowExecutionUpdateRejectedEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowExecutionUpdateRejected
    method: GET
    data_selector: records
- name: WorkflowPropertiesModifiedEventAttributes
  endpoint:
    path: /temporal/api/history/v1/workflowPropertiesModified
    method: GET
    data_selector: records
- name: StartChildWorkflowExecution
  endpoint:
    path: /api/operatorservice/v1/startChildWorkflowExecution
    method: POST
    data_selector: results
    params: {}
- name: StartTimer
  endpoint:
    path: /api/operatorservice/v1/startTimer
    method: POST
    data_selector: results
    params: {}
- name: UpsertWorkflowSearchAttributes
  endpoint:
    path: /api/operatorservice/v1/upsertWorkflowSearchAttributes
    method: POST
    data_selector: results
    params: {}
- name: ListNexusIncomingServices
  endpoint:
    path: /api/v1/namespaces/{namespace}/search-attributes
    method: GET
- name: ScheduleState
  endpoint:
    path: /api/schedule/state
    method: GET
    data_selector: notes
    params: {}
- name: StructuredCalendarSpec
  endpoint:
    path: /api/schedule/structured_calendar
    method: GET
    data_selector: structured_calendar
    params: {}
notes:
- As soon as the HTTP API proposal is implemented, it will be the recommended HTTP
  API.
- Build Temporal Applications with the Java SDK.
- Simulator for Activity Execution times and Retry Policies.
- Access to Temporal Cloud can be authorized through email and password, Google single
  sign-on, Microsoft single sign-on, or SAML, depending on your setup.
- When a user is created in Temporal Cloud, they receive an invitation email with
  a link.
- Accounts with SAML configurations can ignore this email.
- Account Owners and Global Admins have Namespace Admin permissions on all Namespaces.
- Account owners can delete their accounts on the Temporal Cloud Billing page, under
  the Plan tab.
- Permanently deleted accounts will immediately cease billing and be scheduled for
  full deletion within 72 hours.
- Metrics lag real-time performance by about one minute.
- Temporal Cloud retains raw metrics for seven days.
- A CA certificate dedicated to observability is required.
- The Schedule-To-Start metric represents how long Tasks are staying unprocessed,
  in the Task Queues.
- Temporal owns replication lag.
- No SLA for replication lag.
- Enabling this feature adds a charge to your account.
- Rate limits are enforced across all Temporal Cloud control plane operations
- Multiple clients used by the same identity (user or service account) share the same
  rate limit
- Each Namespace has a rate limit, which is measured in Actions per second (APS).
- When your Action rate exceeds your quota, Temporal Cloud throttles Actions until
  the rate matches your quota.
- Temporal Cloud provides 99.99% availability and a contractual service level agreement
  (SLA) of 99.9% guarantee against service errors for standard single-region deployment.
- Temporal Cloud Namespaces that use the High Availability feature provide 99.99%
  availability and contractual service level agreement (SLA) of 99.99% guarantee against
  service errors.
- The content of this page applies to Temporal Cloud customers only.
- All Cloud customers pay for support as part of their plan.
- The Temporal Web UI will be available at http://localhost:8233
- Namespace registration using this API takes up to 10 seconds to complete.
- The test server supports skipping time for tests.
- Replay succeeds only if the Workflow Definition is compatible with the provided
  history from a deterministic point of view.
- Replaying a Workflow Execution locally is a good way to see exactly what code path
  was taken for given input and events.
- Temporal Server version 1.28 is recommended.
- Make sure to set TEMPORAL_DEBUG to true only during debugging.
- Uses a development server for local testing
- Ensure to create separate namespaces for caller and handler
- mTLS client certificates are used for secure connections.
- API keys can also be used for authentication.
- Use Continue-as-New when your Workflow might hit Event History Limits
- Testing Workflows that naturally Continue-as-New may be time-consuming and resource-intensive
- This feature is currently available only in the Go SDK.
- The maximum allowed concurrent sessions is configurable.
- The test server supports skipping time for end-to-end and integration tests.
- Canceling a Workflow provides a graceful way to stop Workflow Execution.
- Terminating a Workflow forcefully stops Workflow Execution.
- Workflow Executions can run for long periods, sometimes months or even years.
- It's common to need to make changes to a Workflow Definition while a Workflow Execution
  is in progress.
- Temporal's security model is designed around client-side encryption of Payloads.
- The server itself never adds encryption over Payloads.
- Side Effects are used to execute non-deterministic code, such as generating a UUID
  or a random number, without compromising determinism in the Workflow.
- A Side Effect does not re-execute during a Replay. Instead, it returns the recorded
  result from the Workflow Execution Event History.
- Activities execute in the standard Node.js environment.
- Each Worker Entity must also associate itself with exactly one Task Queue.
- The Temporal Server should be available on localhost:7233 and the Temporal Web UI
  should be accessible at http://localhost:8233.
- Activities cannot be in the same file as Workflows and must be separately registered.
- Activities may be retried repeatedly, so you may need to use idempotency keys for
  critical side effects.
- The server's startup configuration can be customized using command line options.
- By default, node configures its maximum old-gen memory to 25% of the physical memory
  of the machine on which it is executing, with a maximum of 4 GB.
- It is generally easier to provide the --max-old-space-size node argument through
  the NODE_OPTIONS environment variable.
- Cancellation scopes prevent cancellation from propagating to children.
- The test server supports skipping time for testing.
- 'A Workflow can act like a stateful web service that receives messages: Queries,
  Signals, and Updates.'
- Temporal does not support Continue-as-New functionality within Update handlers.
- Uses async handlers for message processing.
- If you are running Temporal in a monorepo, then your node_modules may be in a different
  location than where Temporal expects to find it by default.
- 'Resetting should only be used to deal with serious logical bugs in your code: it''s
  not for handling transient failures, like a downstream service being unreachable.'
- The Web UI displays a maximum of 1,000 Workflow Executions.
- Nexus uses the Temporal queue-based Worker architecture and built-in Nexus Machinery
  to ensure reliable execution of Nexus Operations.
- Workers authenticate to their Namespace's gRPC endpoint with supported methods including
  mTLS client certificates or API Keys in Temporal Cloud.
- Multiple configuration files can be created for configuring specific areas of the
  UI, such as Auth or TLS.
- A Schedule contains instructions for starting a Workflow Execution at specific times.
- Schedules provide a more flexible and user-friendly approach than Temporal Cron
  Jobs.
- Changing any properties in the development.yaml file requires a process restart
  for changes to take effect.
- Archival is enabled for Visibility data.
- Cluster-level Archival config disabled
- Default values for a Namespace if none are provided at creation.
- Archival is considered experimental and not subject to normal versioning and support
  policy.
- Archival is not supported when running Temporal through Docker.
- Archival is controlled by the server configuration.
- These can be used in many environments, such as with Docker.
- Use Docker for easy local setup of Temporal Service
- Supports PostgreSQL, MySQL, Cassandra databases
- Identifiers have a maximum length of 1000 characters, configurable with the limit.maxIDLength
  dynamic config variable.
- gRPC has a limit of 4 MB for each message received.
- DefaultTransactionSizeLimit is 4 MB for Event batch size.
- Temporal warns at 256 KB and errors at 2 MB for Blob size limit.
- A single Workflow Execution can have a maximum of 10 in-flight Updates and 2000
  total Updates in History.
- Temporal warns at 10 MB and errors at 50 MB for History total size limit.
- Temporal warns after 10,240 Events and errors after 51,200 Events for History total
  count limit.
- The concurrent limit for specific commands is 2000, with optimal performance recommended
  at 500 or fewer.
- Prometheus is configured to scrape at 10-second intervals.
- Set metrics port on WorkflowServiceStubs in your application code.
- Sequential Upgrades are required.
- Backward compatibility is ensured only between two successive minor versions.
- Multi-Cluster Replication is considered experimental and not subject to normal versioning
  and support policy.
- Applications making API calls directly to the Temporal Visibility API continue to
  work even if a Global Namespace is in standby mode.
- The max payload for a single request is 2 MB.
- The max size limit for any given Event History transaction is 4 MB.
- Deploy a Temporal Service using Docker, Kubernetes, or from scratch.
- Requires a database such as Apache Cassandra, MySQL, or PostgreSQL.
- Minimum Retention Period is 1 day.
- On Temporal Service version 1.18 and later, the maximum Retention Period value for
  Namespaces can be set to anything over the minimum requirement of 1 day.
- On Temporal Service versions 1.17 and earlier, the maximum Retention Period you
  can set is 30 days.
- Static configuration values cannot be changed at runtime.
- Dynamic configuration keys can be updated without restarting the server.
- Definition of a time zone can change over time
- If a spec has no matching times after the current time, then the schedule will be
  subject to automatic deletion
- Temporal Cloud's Namespace with High Availability features offers automated failover,
  synchronized data replication, and high availability for workloads requiring disaster-tolerant
  deployment and 99.99% uptime.
- Upgrade to PostgreSQL 12, MySQL 8.0.17, or SQLite 3.31.0 with Temporal Server 1.20+
  for advanced Visibility
- The Workflow Execution's Event History is limited to 51,200 Events or 50 MB and
  will warn you after 10,240 Events or 10 MB.
errors:
- No — each email address can only be associated with a single Temporal Cloud account.
- If you originally signed up for Temporal Cloud using an email and password, you
  won’t be able to log in using Google or Microsoft single sign-on.
- Alert at >200ms for your p99 value
- Alert at <95% for your p99 value
- Alert at <90% for your p99 value
- Increased latency and error rates in API.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Throttling means limiting the rate at which Actions are performed to prevent the
  Namespace from exceeding its APS limit.
- 'UNAVAILABLE: Service errors that occur are recorded against the SLA.'
- 'ClientVersionNotSupported: Not counted against the SLA.'
- 'InvalidArgument: Not counted against the SLA.'
- 'NamespaceAlreadyExists: Not counted against the SLA.'
- 'NamespaceInvalidState: Not counted against the SLA.'
- 'NamespaceNotActive: Not counted against the SLA.'
- 'NamespaceNotFound: Not counted against the SLA.'
- 'NotFound: Not counted against the SLA.'
- 'PermissionDenied: Not counted against the SLA.'
- 'QueryFailed: Not counted against the SLA.'
- 'RetryReplication: Not counted against the SLA.'
- 'StickyWorkerUnavailable: Not counted against the SLA.'
- 'TaskAlreadyStarted: Not counted against the SLA.'
- 'Throttling (resources exhausted; triggers retry): Not counted against the SLA.'
- 'WorkflowExecutionAlreadyStarted: Not counted against the SLA.'
- 'WorkflowNotReady: Not counted against the SLA.'
- The Client can't contact the server
- The Workflow does not exist
- 'PanicError: Potential deadlock detected'
- 'NAMESPACE_NOT_FOUND: Check if the namespace exists'
- 'INVALID_ARGUMENT: Verify the request parameters'
- 'workflow.ErrSessionFailed: Returned if the Session framework detects that the Worker
  executing this Session has died.'
- 'CANCELED: Indicates a cancellation request was made.'
- 'ApplicationFailure: Activity function actC is not registered on this Worker, available
  activities: ["actA", "actB"]'
- 'client.ServiceError: Unable to contact the server.'
- 'common.WorkflowNotFoundError: The workflow does not exist.'
- '4 DEADLINE_EXCEEDED: context deadline exceeded'
- Blob size exceeds limit.
- 'ErrBlobSizeExceedsLimit: Blob data size exceeds limit.'
- History size exceeds warn limit.
- history size exceeds error limit.
- 'BlobSizeLimitError: Occurs when the size of a blob exceeds the maximum size allowed
  by Temporal.'
- A valid retention period is not set on request
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'CANCELATION_ALREADY_REQUESTED: The cancellation has already been requested'
- 'CLIENT_VERSION_NOT_SUPPORTED: The client version is not supported'
- 'NAMESPACE_NOT_FOUND: The specified namespace does not exist'
- 'PERMISSION_DENIED: You do not have permission to perform this operation'
auth_info:
  mentioned_objects: []
client:
  base_url: https://temporal.io
  headers:
    Accept: application/json
source_metadata: null
