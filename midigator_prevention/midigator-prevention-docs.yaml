resources:
- name: resolution
  endpoint:
    path: /prevention/{prevention_guid}/resolution
    method: POST
    data_selector: resolution
    params: {}
- name: Request Bearer Token
  endpoint:
    path: /auth
    method: POST
- name: order
  endpoint:
    path: /order
    method: POST
    data_selector: order
    params: {}
- name: order
  endpoint:
    path: /orders
    method: POST
    data_selector: order
    params: {}
- name: items
  endpoint:
    data_selector: items
- name: notes
  endpoint:
    data_selector: notes
- name: match
  endpoint:
    data_selector: match
- name: event_subscription
  endpoint:
    path: /subscribe
    method: POST
    data_selector: guid
    params: {}
- name: list_subscriptions
  endpoint:
    path: /subscribe
    method: GET
    data_selector: subscriptions
    params: {}
- name: subscription_confirmation
  endpoint:
    path: /subscribe/{event_guid}
    method: GET
    data_selector: subscription_details
    params: {}
- name: update_subscription
  endpoint:
    path: /subscribe/{event_guid}
    method: PUT
    data_selector: updated_subscription
    params: {}
- name: delete_subscription
  endpoint:
    path: /subscribe/{event_guid}
    method: DELETE
    data_selector: delete_status
    params: {}
- name: chargeback_new
  endpoint:
    path: /chargeback-new-event
    method: POST
    data_selector: records
- name: chargeback_match
  endpoint:
    path: /chargeback-match-event
    method: POST
    data_selector: records
- name: chargeback_result
  endpoint:
    path: /chargeback-result-event
    method: POST
    data_selector: records
- name: chargeback_dnf
  endpoint:
    path: /chargeback-dnf-event
    method: POST
    data_selector: records
- name: order_validation_new
  endpoint:
    path: /order-validation-new-event
    method: POST
    data_selector: records
- name: order_validation_match
  endpoint:
    path: /order-validation-match-event
    method: POST
    data_selector: records
- name: prevention_new
  endpoint:
    path: /prevention-new-event
    method: POST
    data_selector: records
- name: prevention_match
  endpoint:
    path: /prevention-match-event
    method: POST
    data_selector: records
- name: rdr_new
  endpoint:
    path: /rdr-new-event
    method: POST
    data_selector: records
- name: rdr_match
  endpoint:
    path: /rdr-match-event
    method: POST
    data_selector: records
- name: get_chargeback_data
  endpoint:
    path: /chargeback/{chargeback_guid}
    method: GET
    data_selector: records
- name: get_prevention_data
  endpoint:
    path: /prevention/{prevention_guid}
    method: GET
    data_selector: records
- name: order_validation
  endpoint:
    path: /order_validation/{order_validation_guid}
    method: GET
    data_selector: order_validation
- name: order
  endpoint:
    path: /order/{order_guid}
    method: GET
    data_selector: order
- name: chargeback_result
  endpoint:
    path: /chargeback/result
    method: POST
    data_selector: event
    params: {}
- name: chargeback_dnf
  endpoint:
    path: /chargeback/dnf
    method: POST
    data_selector: event
    params: {}
- name: order
  endpoint:
    path: /order/{order_guid}
    method: GET
    data_selector: order
    params: {}
- name: order_validation
  endpoint:
    path: /order_validation/{order_guid}
    method: GET
    data_selector: order_validation
    params: {}
- name: order_validation_new
  endpoint:
    path: /order_validation/new
    method: POST
    data_selector: event
    params: {}
- name: order_validation_match
  endpoint:
    path: /order_validation/match
    method: POST
    data_selector: event
    params: {}
- name: ping_response
  endpoint:
    path: /ping/{event_type}
    method: GET
    data_selector: urls
- name: prevention
  endpoint:
    path: /prevention/{prevention_guid}
    method: GET
    data_selector: amount
- name: prevention.new
  endpoint:
    path: /prevention.new
    method: POST
    data_selector: amount
- name: prevention.match
  endpoint:
    path: /prevention.match
    method: POST
    data_selector: amount
- name: rdr.new
  endpoint:
    path: /rdr.new
    method: POST
    data_selector: amount
- name: rdr.match
  endpoint:
    path: /rdr/match
    method: POST
    data_selector: payload
- name: registration.new
  endpoint:
    path: /registration/new
    method: POST
    data_selector: payload
- name: subscribe
  endpoint:
    path: /subscribe
    method: POST
    data_selector: payload
- name: subscription_confirmation
  endpoint:
    path: /subscription/confirmation
    method: GET
    data_selector: payload
- name: subscription_update
  endpoint:
    path: /subscription/update
    method: PATCH
    data_selector: payload
- name: Request Bearer Token
  endpoint:
    path: /auth
    method: POST
    data_selector: token
- name: order
  endpoint:
    path: /order
    method: POST
    data_selector: order
    params: {}
- name: order
  endpoint:
    path: /orders
    method: POST
    data_selector: order_data
    params: {}
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: items
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: notes
- name: match
  endpoint:
    path: /match
    method: GET
    data_selector: match
notes:
- Bearer token received from the /auth/ endpoint will be used as the Authentication
  header in all other Midigator API calls.
- Only application/json content type is allowed for this resource.
- Initial subscription value of 'active' is set to false until validated.
- Midigator recommends sending shipping details for all orders with physical goods.
- Midigator recommends sending proof of use for all service or digital good orders.
errors:
- '400 Bad Request: The request was invalid, usually because of missing or invalid
  parameters or headers.'
- '401 Unauthorized: An invalid authorization header was provided.'
- '400 Bad Request: The request was unacceptable, usually because a required parameter
  was omitted.'
- '401 Unauthorized: A valid API key wasnâ€™t provided.'
- '412 Precondition Failed: One or more conditions in the header were false when tested
  on the server.'
- '422 Unprocessable Entity: The server understands the content type and the syntax
  is correct but was unable to process the instructions.'
- '500 Internal Server Error: Midigator experienced a problem (rare).'
- '504 Gateway Timeout: Midigator experienced a problem (rare).'
- '400 Bad Request: Invalid parameters or headers.'
- '401 Unauthorized: Invalid authorization header provided.'
- '404 Not Found: The data entity was not found.'
auth_info:
  mentioned_objects:
  - BearerToken
client:
  base_url: https://api.midigator.com/auth/v1
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
