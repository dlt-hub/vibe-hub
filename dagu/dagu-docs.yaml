resources:
- name: example_resource
  endpoint:
    path: /services/data/vXX.X/sobjects/ExampleResource
    method: GET
    data_selector: records
    params: {}
- name: dags
  endpoint:
    path: /api/v2/dags
    method: GET
    data_selector: dags
    params: {}
- name: dag_runs
  endpoint:
    path: /api/v2/dag-runs
    method: POST
    data_selector: dagRun
    params: {}
- name: validate_dag
  endpoint:
    path: /api/v2/dags/validate
    method: POST
    data_selector: valid
    params: {}
- name: dags
  endpoint:
    path: /api/v2/dags
    method: GET
    data_selector: dags
- name: dag_runs
  endpoint:
    path: /api/v2/dag-runs
    method: POST
    data_selector: dagRun
- name: validate_dag
  endpoint:
    path: /api/v2/dags/validate
    method: POST
    data_selector: valid
- name: production
  endpoint:
    path: /configurations/production
    method: GET
    data_selector: config
    params: {}
- name: development
  endpoint:
    path: /configurations/development
    method: GET
    data_selector: config
    params: {}
- name: dag
  endpoint:
    path: /dags
    method: GET
    data_selector: dags
    params: {}
- name: workflow
  endpoint:
    path: /start
    method: POST
    data_selector: workflow
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: status
- name: dags
  endpoint:
    path: /dags
    method: GET
    data_selector: dags
    params:
      perPage: 10
- name: dag_details
  endpoint:
    path: /dags/{dag_name}
    method: GET
    data_selector: dag
- name: create_dag
  endpoint:
    path: /dags
    method: POST
    data_selector: dag
- name: validate_dag
  endpoint:
    path: /dags/validate
    method: POST
    data_selector: validation
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: ''
    params: {}
- name: dags
  endpoint:
    path: /dags
    method: GET
    data_selector: ''
    params:
      page: '1'
      perPage: '10'
      name: example
      tag: prod
- name: workflow
  endpoint:
    path: /overview/api
    method: GET
    data_selector: data
    params: {}
- name: retry_policy
  endpoint:
    path: /data
    method: GET
    params:
      limit: 5
      intervalSec: 30
      exitCodes:
      - 429
      - 503
      - 504
- name: retry_on_failure
  endpoint:
    path: /retry
    method: POST
    data_selector: steps
    params:
      limit: 3
      intervalSec: 30
- name: smart_retry_policies
  endpoint:
    path: /smart-retry
    method: POST
    data_selector: steps
    params:
      limit: 5
      intervalSec: 30
      exitCodes:
      - 429
      - 503
      - 504
- name: lock_down_run_inputs
  endpoint:
    path: /lock-down-run-inputs
    method: POST
    data_selector: runConfig
    params:
      disableParamEdit: true
      disableRunIdEdit: true
- name: handlerOn
  endpoint:
    path: /lifecycle/handlers
    method: GET
    data_selector: handlers
    params: {}
- name: container
  endpoint:
    path: /api/container
    method: POST
    data_selector: containerData
- name: docker_executor
  endpoint:
    path: /features/executors/docker
    method: GET
- name: ssh_step
  endpoint:
    path: /health
    method: curl
    data_selector: response
- name: extract-field
  endpoint:
    path: /extract-field
    method: GET
    data_selector: name
- name: transform
  endpoint:
    path: /transform
    method: GET
    data_selector: id, name
- name: filter-active
  endpoint:
    path: /filter-active
    method: GET
    data_selector: email
- name: fetch-data
  endpoint:
    path: /fetch-data
    method: GET
    data_selector: products
- name: sales-by-category
  endpoint:
    path: /sales-by-category
    method: GET
    data_selector: category, total, count
- name: github_actions
  endpoint:
    path: /features/executors/github-actions
    method: GET
    data_selector: actions
    params: {}
- name: scheduler
  endpoint:
    path: /scheduler
    method: GET
    data_selector: records
- name: queue_management
  endpoint:
    path: /queues
    method: GET
    data_selector: queues
    params: {}
- name: errorMail
  endpoint:
    from: foo@bar.com
    to: foo@bar.com
    prefix: '[Error]'
    attachLogs: true
- name: infoMail
  endpoint:
    from: foo@bar.com
    to: foo@bar.com
    prefix: '[Info]'
    attachLogs: true
- name: worker
  endpoint:
    path: /worker
    method: POST
    data_selector: worker
    params:
      labels: gpu=true,cuda=11.8,memory=64G
- name: coordinator
  endpoint:
    path: /coordinator
    method: GET
    data_selector: coordinator
    params: {}
- name: worker
  endpoint:
    path: /worker
    method: POST
    data_selector: workerDetails
- name: worker
  endpoint:
    path: /api/v2/workers
    method: GET
    data_selector: workers
    params: {}
- name: permissions
  endpoint:
    path: /permissions
    method: GET
    data_selector: permissions
- name: production
  endpoint:
    path: /api/v2
    method: GET
- name: staging
  endpoint:
    path: /api/v2
    method: GET
    params:
      authToken: staging-api-token
- name: development
  endpoint:
    path: /api/v2
    method: GET
- name: self-signed
  endpoint:
    path: /api/v2
    method: GET
    params:
      authToken: token
- name: dagu_service
  endpoint:
    path: /etc/systemd/system/dagu.service
    method: CREATE
    data_selector: service
    params: {}
- name: dagu-worker
  endpoint:
    path: /services/data/v1/dagu-worker
    method: POST
- name: healthcheck
  endpoint:
    path: /api/v2/health
    method: GET
- name: metrics
  endpoint:
    path: /api/v2/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: development
  endpoint:
    path: /api/v2
    method: GET
    params:
      basicAuthUsername: dev
      basicAuthPassword: ${DEV_PASSWORD}
- name: staging
  endpoint:
    path: /api/v2
    method: GET
    params:
      authToken: ${STAGING_TOKEN}
- name: production
  endpoint:
    path: /api/v2
    method: GET
    params:
      authToken: ${PROD_TOKEN}
- name: critical
  endpoint:
    path: /api/v2
    method: GET
- name: workflow
  endpoint:
    path: /workflows
    method: GET
- name: file-processor
  endpoint:
    path: ''
    method: call
    data_selector: ''
    params: {}
- name: health_check
  endpoint:
    path: /api/v2/health
    method: GET
    data_selector: status
- name: list_dags
  endpoint:
    path: /api/v2/dags
    method: GET
    data_selector: dags
    params:
      page: 1
      perPage: 50
      remoteNode: local
- name: get_dag_details
  endpoint:
    path: /api/v2/dags/{fileName}
    method: GET
    data_selector: dag
- name: create_dag
  endpoint:
    path: /api/v2/dags
    method: POST
    data_selector: name
- name: delete_dag
  endpoint:
    path: /api/v2/dags/{fileName}
    method: DELETE
- name: get_dag_specification
  endpoint:
    path: /api/v2/dags/{fileName}/spec
    method: GET
    data_selector: spec
- name: update_dag_specification
  endpoint:
    path: /api/v2/dags/{fileName}/spec
    method: PUT
- name: validate_dag
  endpoint:
    path: /dags/validate
    method: POST
    data_selector: valid
    params: {}
- name: rename_dag
  endpoint:
    path: /dags/{fileName}/rename
    method: POST
    data_selector: ''
    params: {}
- name: start_dag
  endpoint:
    path: /dags/{fileName}/start
    method: POST
    data_selector: dagRunId
    params: {}
- name: enqueue_dag
  endpoint:
    path: /dags/{fileName}/enqueue
    method: POST
    data_selector: dagRunId
    params: {}
- name: toggle_dag_suspension
  endpoint:
    path: /dags/{fileName}/suspend
    method: POST
    data_selector: ''
    params: {}
- name: get_dag_run_history
  endpoint:
    path: /dags/{fileName}/dag-runs
    method: GET
    data_selector: dagRuns
    params: {}
- name: get_specific_dag_run
  endpoint:
    path: /dags/{fileName}/dag-runs/{dagRunId}
    method: GET
    data_selector: dagRun
    params: {}
- name: list_all_dag_runs
  endpoint:
    path: /dag-runs
    method: GET
    data_selector: dagRuns
    params: {}
- name: get_dag_run_details
  endpoint:
    path: /dag-runs/{name}/{dagRunId}
    method: GET
    data_selector: dagRun
    params: {}
- name: stop_dag_run
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/stop
    method: POST
    data_selector: ''
    params: {}
- name: stop_all_dag_runs
  endpoint:
    path: /dags/{fileName}/stop-all
    method: POST
    data_selector: ''
    params: {}
- name: retry_dag_run
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/retry
    method: POST
- name: dequeue_dag_run
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/dequeue
    method: GET
- name: get_dag_run_log
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/log
    method: GET
- name: get_step_log
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/steps/{stepName}/log
    method: GET
- name: update_step_status
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/steps/{stepName}/status
    method: PATCH
- name: search_dags
  endpoint:
    path: /dags/search
    method: GET
- name: get_all_tags
  endpoint:
    path: /dags/tags
    method: GET
- name: get_child_dag_run_details
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}
    method: GET
- name: get_child_dag_run_log
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/log
    method: GET
- name: get_child_step_log
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/log
    method: GET
- name: update_child_step_status
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/status
    method: PATCH
- name: list_all_queues
  endpoint:
    path: /api/v2/queues
    method: GET
- name: list_dag_runs_by_name
  endpoint:
    path: /api/v2/dag-runs/{name}
    method: GET
- name: start_dag_with_parameters
  endpoint:
    path: /api/v2/dags/data-processing-pipeline/start
    method: POST
- name: check_dag_run_status
  endpoint:
    path: /api/v2/dag-runs/data-processing-pipeline/latest
    method: GET
- name: search_for_dags
  endpoint:
    path: /api/v2/dags/search
    method: GET
- name: get_metrics_for_monitoring
  endpoint:
    path: /api/v2/metrics
    method: GET
- name: stop_running_dag
  endpoint:
    path: /api/v2/dag-runs/data-pipeline/{dagRunId}/stop
    method: POST
- name: health_check
  endpoint:
    path: /api/v2/health
    method: GET
    data_selector: status
    params: {}
- name: list_dags
  endpoint:
    path: /api/v2/dags
    method: GET
    data_selector: dags
    params:
      page: 1
      perPage: 50
      remoteNode: local
- name: create_dag
  endpoint:
    path: /api/v2/dags
    method: POST
    data_selector: name
    params: {}
- name: get_dag_details
  endpoint:
    path: /api/v2/dags/{fileName}
    method: GET
    data_selector: dag
    params: {}
- name: delete_dag
  endpoint:
    path: /api/v2/dags/{fileName}
    method: DELETE
    data_selector: {}
    params: {}
- name: get_dag_specification
  endpoint:
    path: /api/v2/dags/{fileName}/spec
    method: GET
    data_selector: spec
    params: {}
- name: update_dag_specification
  endpoint:
    path: /api/v2/dags/{fileName}/spec
    method: PUT
    data_selector: {}
    params: {}
- name: validate_dag_specification
  endpoint:
    path: /api/v2/dags/validate
    method: POST
    data_selector: {}
    params: {}
- name: get_dag_run_log
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/log
    method: GET
    data_selector: content
    params: {}
- name: get_step_log
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/steps/{stepName}/log
    method: GET
    data_selector: content
    params: {}
- name: update_step_status
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/steps/{stepName}/status
    method: PATCH
    data_selector: status
    params: {}
- name: search_dags
  endpoint:
    path: /dags/search
    method: GET
    data_selector: results
    params: {}
- name: get_all_tags
  endpoint:
    path: /dags/tags
    method: GET
    data_selector: tags
    params: {}
- name: prometheus_metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: etl-pipeline
  endpoint:
    path: /api/v2/dag-runs/etl-pipeline
    method: GET
    data_selector: dagRuns
- name: backup_job
  endpoint:
    path: /api/v2/dag-runs/backup_job
    method: GET
    data_selector: dagRuns
- name: health_check
  endpoint:
    path: /api/v2/health
    method: GET
    data_selector: status
    params: {}
- name: list_dags
  endpoint:
    path: /api/v2/dags
    method: GET
    data_selector: dags
    params:
      perPage: 50
      remoteNode: local
- name: create_dag
  endpoint:
    path: /api/v2/dags
    method: POST
    data_selector: name
    params: {}
- name: get_dag_details
  endpoint:
    path: /api/v2/dags/{fileName}
    method: GET
    data_selector: dag
    params: {}
- name: delete_dag
  endpoint:
    path: /api/v2/dags/{fileName}
    method: DELETE
    data_selector: ''
    params: {}
- name: validate_dag_specification
  endpoint:
    path: /api/v2/dags/validate
    method: POST
    data_selector: errors
    params: {}
- name: validate_dag
  endpoint:
    path: /api/v2/dags/validate
    method: POST
    data_selector: dag
    params: {}
- name: rename_dag
  endpoint:
    path: /api/v2/dags/{fileName}/rename
    method: POST
    data_selector: ''
    params: {}
- name: start_dag
  endpoint:
    path: /api/v2/dags/{fileName}/start
    method: POST
    data_selector: ''
    params: {}
- name: enqueue_dag
  endpoint:
    path: /api/v2/dags/{fileName}/enqueue
    method: POST
    data_selector: ''
    params: {}
- name: toggle_dag_suspension
  endpoint:
    path: /api/v2/dags/{fileName}/suspend
    method: POST
    data_selector: ''
    params: {}
- name: get_dag_run_history
  endpoint:
    path: /api/v2/dags/{fileName}/dag-runs
    method: GET
    data_selector: dagRuns
    params: {}
- name: get_specific_dag_run
  endpoint:
    path: /api/v2/dags/{fileName}/dag-runs/{dagRunId}
    method: GET
    data_selector: dagRun
    params: {}
- name: list_all_dag_runs
  endpoint:
    path: /api/v2/dag-runs
    method: GET
    data_selector: dagRuns
    params: {}
- name: get_dag_run_details
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}
    method: GET
    data_selector: dagRun
    params: {}
- name: stop_dag_run
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/stop
    method: POST
    data_selector: ''
    params: {}
- name: stop_all_dag_runs
  endpoint:
    path: /api/v2/dags/{fileName}/stop-all
    method: POST
    data_selector: ''
    params: {}
- name: retry_dag_run
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/retry
    method: POST
    data_selector: ''
    params: {}
- name: dequeue_dag_run
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/dequeue
    method: GET
    data_selector: ''
    params: {}
- name: dag_run_log
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/log
    method: GET
    data_selector: content
    params: {}
- name: step_log
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/steps/{stepName}/log
    method: GET
    data_selector: content
    params: {}
- name: update_step_status
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/steps/{stepName}/status
    method: PATCH
    data_selector: status
    params: {}
- name: search_dags
  endpoint:
    path: /dags/search
    method: GET
    data_selector: results
    params:
      q: ''
- name: get_all_tags
  endpoint:
    path: /dags/tags
    method: GET
    data_selector: tags
    params: {}
- name: prometheus_metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: health_check
  endpoint:
    path: /api/v2/health
    method: GET
    data_selector: status
    params: {}
- name: list_dags
  endpoint:
    path: /api/v2/dags
    method: GET
    data_selector: dags
    params:
      page: 1
      perPage: 50
      remoteNode: local
- name: create_dag
  endpoint:
    path: /api/v2/dags
    method: POST
    data_selector: name
    params: {}
- name: get_dag_details
  endpoint:
    path: /api/v2/dags/{fileName}
    method: GET
    data_selector: dag
    params: {}
- name: delete_dag
  endpoint:
    path: /api/v2/dags/{fileName}
    method: DELETE
    data_selector: {}
    params: {}
- name: get_dag_specification
  endpoint:
    path: /api/v2/dags/{fileName}/spec
    method: GET
    data_selector: spec
    params: {}
- name: update_dag_specification
  endpoint:
    path: /api/v2/dags/{fileName}/spec
    method: PUT
    data_selector: {}
    params: {}
- name: validate_dag_specification
  endpoint:
    path: /api/v2/dags/validate
    method: POST
    data_selector: {}
    params: {}
- name: get_dag_run_log
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/log
    method: GET
    data_selector: content
    params: {}
- name: get_step_log
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/steps/{stepName}/log
    method: GET
    data_selector: content
    params: {}
- name: update_step_status
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/steps/{stepName}/status
    method: PATCH
    data_selector: ''
    params: {}
- name: search_dags
  endpoint:
    path: /api/v2/dags/search
    method: GET
    data_selector: results
    params:
      q: ''
- name: get_all_tags
  endpoint:
    path: /api/v2/dags/tags
    method: GET
    data_selector: tags
    params: {}
- name: get_child_dag_run_details
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}
    method: GET
    data_selector: dagRunDetails
    params: {}
- name: get_child_dag_run_log
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/log
    method: GET
    data_selector: content
    params: {}
- name: get_child_step_log
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/log
    method: GET
    data_selector: content
    params: {}
- name: update_child_step_status
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/status
    method: PATCH
    data_selector: ''
    params: {}
- name: list_all_queues
  endpoint:
    path: /api/v2/queues
    method: GET
    data_selector: ''
    params: {}
- name: etl-pipeline
  endpoint:
    path: /api/v2/queues/etl-pipeline
    method: GET
    data_selector: queues
- name: backup_job
  endpoint:
    path: /api/v2/queues/backup_job
    method: GET
    data_selector: queues
- name: dag
  endpoint:
    path: /api/v2/dags
    method: GET
    data_selector: dags
- name: dag_run
  endpoint:
    path: /api/v2/dag-runs
    method: GET
    data_selector: dagRuns
- name: health_check
  endpoint:
    path: /api/v2/health
    method: GET
    data_selector: status
    params: {}
- name: list_dags
  endpoint:
    path: /api/v2/dags
    method: GET
    data_selector: dags
    params:
      page: 1
      perPage: 50
      remoteNode: local
- name: create_dag
  endpoint:
    path: /api/v2/dags
    method: POST
    data_selector: name
    params: {}
- name: DAG Validation
  endpoint:
    path: /api/v2/dags/validate
    method: POST
    data_selector: dag
    params: {}
- name: DAG Rename
  endpoint:
    path: /api/v2/dags/{fileName}/rename
    method: POST
    data_selector: ''
    params: {}
- name: Start DAG
  endpoint:
    path: /api/v2/dags/{fileName}/start
    method: POST
    data_selector: ''
    params: {}
- name: Enqueue DAG
  endpoint:
    path: /api/v2/dags/{fileName}/enqueue
    method: POST
    data_selector: ''
    params: {}
- name: Toggle DAG Suspension
  endpoint:
    path: /api/v2/dags/{fileName}/suspend
    method: POST
    data_selector: ''
    params: {}
- name: Get DAG Run History
  endpoint:
    path: /api/v2/dags/{fileName}/dag-runs
    method: GET
    data_selector: dagRuns
    params: {}
- name: Get Specific DAG Run
  endpoint:
    path: /api/v2/dags/{fileName}/dag-runs/{dagRunId}
    method: GET
    data_selector: dagRun
    params: {}
- name: List All DAG Runs
  endpoint:
    path: /api/v2/dag-runs
    method: GET
    data_selector: dagRuns
    params: {}
- name: Get DAG Run Details
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}
    method: GET
    data_selector: dagRun
    params: {}
- name: Stop DAG Run
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/stop
    method: POST
    data_selector: ''
    params: {}
- name: Stop All DAG Runs
  endpoint:
    path: /api/v2/dags/{fileName}/stop-all
    method: POST
    data_selector: ''
    params: {}
- name: Retry DAG Run
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/retry
    method: POST
    data_selector: ''
    params: {}
- name: Dequeue DAG Run
  endpoint:
    path: /api/v2/dag-runs/{name}/{dagRunId}/dequeue
    method: GET
    data_selector: ''
    params: {}
- name: get_dag_run_log
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/log
    method: GET
    data_selector: content
    params:
      limit: '10000'
- name: get_step_log
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/steps/{stepName}/log
    method: GET
    data_selector: content
    params: {}
- name: update_step_status
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/steps/{stepName}/status
    method: PATCH
    data_selector: success
    params: {}
- name: search_dags
  endpoint:
    path: /dags/search
    method: GET
    data_selector: results
    params:
      q: ''
- name: get_all_tags
  endpoint:
    path: /dags/tags
    method: GET
    data_selector: tags
    params: {}
- name: get_metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: get_child_dag_run_details
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}
    method: GET
    data_selector: dagRunDetails
    params: {}
- name: get_child_dag_run_log
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/log
    method: GET
    data_selector: content
    params: {}
- name: get_child_step_log
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/log
    method: GET
    data_selector: content
    params: {}
- name: update_child_step_status
  endpoint:
    path: /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/status
    method: PATCH
    data_selector: success
    params: {}
- name: list_all_queues
  endpoint:
    path: /queues
    method: GET
    data_selector: queues
    params: {}
- name: etl-pipeline
  endpoint:
    path: /api/v2/queues/etl-pipeline
    method: GET
    data_selector: queues
    params: {}
- name: backup_job
  endpoint:
    path: /api/v2/queues/backup_job
    method: GET
    data_selector: queues
    params: {}
- name: workers
  endpoint:
    path: /api/v2/workers
    method: GET
    data_selector: workers
    params:
      remoteNode: local
- name: suspend_resume_dag
  endpoint:
    path: /api/v2/dags/data-processing-pipeline/suspend
    method: POST
    data_selector: ''
    params: {}
- name: DAG_NAME
  endpoint:
    path: /reference/variables
    method: GET
    data_selector: DAG_NAME
    params: {}
- name: DAG_RUN_ID
  endpoint:
    path: /reference/variables
    method: GET
    data_selector: DAG_RUN_ID
    params: {}
- name: DAG_RUN_LOG_FILE
  endpoint:
    path: /reference/variables
    method: GET
    data_selector: DAG_RUN_LOG_FILE
    params: {}
- name: DAG_RUN_STEP_NAME
  endpoint:
    path: /reference/variables
    method: GET
    data_selector: DAG_RUN_STEP_NAME
    params: {}
- name: DAG_RUN_STEP_STDOUT_FILE
  endpoint:
    path: /reference/variables
    method: GET
    data_selector: DAG_RUN_STEP_STDOUT_FILE
    params: {}
- name: DAG_RUN_STEP_STDERR_FILE
  endpoint:
    path: /reference/variables
    method: GET
    data_selector: DAG_RUN_STEP_STDERR_FILE
    params: {}
- name: DAG_RUN_STATUS
  endpoint:
    path: /reference/variables
    method: GET
    data_selector: DAG_RUN_STATUS
    params: {}
- name: use-private-image
  endpoint:
    path: /ghcr.io/myorg/private-app:latest
    method: GET
    data_selector: Running
- name: checkout
  endpoint:
    path: /actions/checkout
    method: GET
    data_selector: steps
- name: runConfig
  endpoint:
    path: /data
    method: GET
    data_selector: params
    params:
      ENVIRONMENT: production
      VERSION: 1.0.0
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Implemented security filtering for system environment variables passed to step processes.
- Some objects like Contact may return nulls in deeply nested fields
- Single binary with Web UI. Execute workflows defined in a simple, declarative YAML
  on a schedule.
- DAGs automatically inherit base settings
- 'Precedence order for configurations: Command-line flags > Environment variables
  > Configuration file.'
- Uses custom run ID with --run-id option
- 'Dagu follows a simple philosophy: do one thing well with minimal dependencies.'
- Workers need access to the same DAG files and data directories as the main Dagu
  instance
- Shared storage can be provided via NFS, cloud storage (EFS, GCS, Azure Files), or
  distributed filesystems
- Can also use file path for various commands
- For detailed logs, use the web UI at http://localhost:8080 or check log files in
  the configured log directory.
- The coordinator service manages task distribution to workers for distributed execution
  with automatic service registry and health monitoring.
- Workers automatically register in the service registry system and poll the coordinator
  for matching tasks based on their labels.
- Custom host/port can be set using --host and --port options.
- The API supports Basic Authentication and Bearer Token.
- The API only supports server-side sorting by the name field.
- 'Basic Authentication: Include Authorization: Basic <base64(username:password)>
  header'
- 'Bearer Token: Include Authorization: Bearer <token> header'
- 'Security: Mounting Docker socket grants full Docker access.'
- Uses Dagu for workflow execution
- Environment variables can be defined at both DAG and step levels
- Some objects may return nulls in deeply nested fields
- All steps run in the same container instance, sharing the filesystem and installed
  packages.
- Uses shared Docker container for consistent execution environment
- All steps share the same filesystem and installed dependencies
- Prevent editing params at start
- Prevent custom run IDs
- Rate limit, service unavailable
- Cap at 60s
- 2x multiplier
- While connection fails
- 'Check intervals: 1s, 2s, 4s, 8s, 16s, 30s...'
- Control output size limits to prevent memory issues.
- Requires nix-shell to be installed separately. Not included in Dagu binary or container.
- Set maximum output size to 5MB for all steps
- Keep 30 days of history
- Daily at midnight
- 10MB max output per step
- Organize logs in custom directories with retention
- 2 hour timeout
- 10 min cleanup window
- Keep 1 year for compliance
- 5MB output limit
- No overlapping runs
- Enable OpenTelemetry tracing for observability
- Max 5 parallel steps
- Max 2 concurrent DAG runs
- 10 second initial delay
- Make workflows dynamic and reusable with runtime parameters.
- Runs only on weekdays
- Exponential backoff with while mode has a 2.0 multiplier.
- Custom backoff multiplier with until mode is 1.5.
- Backoff with max interval cap never waits more than 1 minute.
- Dagu provides multiple ways to handle data and variables in your DAGs, from simple
  environment variables to complex parameter passing between steps.
- Manage workflow execution with concurrency limits.
- Handlers are executed sequentially and synchronously.
- If a handler exits with a non-zero status, the overall DAG run ends in 'failed'.
- Build resilient workflows with retries, handlers, and notifications.
- DAG timeout is set to 3600 seconds (1 hour)
- Cleanup timeout is set to 300 seconds (5 minutes)
- nix-shell must be installed on your system separately. The Dagu binary and container
  image do not include nix-shell. Install Nix from nixos.org to use this feature.
- Steps run in Docker containers for isolated, reproducible execution.
- Use the `container` field at the DAG level to run all steps in containers.
- 'Provide at least one of the following: image, containerName'
- With only containerName, the target container must already be running
- Set image, containerName, or both. If both are omitted, the step fails validation.
- Only containerName requires the container to already be running; with both set,
  Dagu will start the container from image if needed.
- Allow self-signed certificates
- Only single-step workflows are supported today; each Dagu step maps to a single
  GitHub Action invocation.
- The executor synthesises a minimal `push` event payload.
- Dagu supports running multiple scheduler instances for high availability with automatic
  failover.
- Saturday 2 AM to 4 AM is the maintenance window.
- Dagu provides multiple mechanisms for passing data through workflows
- At the queue level, `maxConcurrency` is enforced by the scheduler process.
- If a queue has a defined `maxConcurrency`, any DAG assigned to that queue can run
  in parallel up to the queue’s limit.
- Email notifications can be sent when a DAG run ends in a canonical 'failed' or 'succeeded'
  state.
- 'Skip TLS verification (default: false)'
- Export timeout set to 30s
- The coordinator service is automatically started when you use `dagu start-all`.
- Workers automatically register themselves in a shared service registry directory.
- Workers automatically register themselves in a shared service registry directory
- Workers send regular heartbeats (every 10 seconds by default)
- Tasks are automatically redistributed if a worker becomes unhealthy
- Uses a service registry for automatic worker registration.
- Workers must match all specified labels in workerSelector.
- Uses a file-based service registry for worker registration and health monitoring.
- Workers send regular heartbeats every 10 seconds by default.
- Basic authentication is enabled when both username and password are set
- Empty username or password disables basic authentication
- Credentials are checked on every request
- Token authentication is enabled when a token value is set
- Tokens should be treated as secrets
- No expiration mechanism - rotate tokens manually
- Can be used alongside basic authentication
- HTTPS recommended in production for secure cookies
- Provider must support OpenID Connect Discovery
- 'Minimum required scopes: openid, profile, email'
- 'Google client IDs look like: [numeric]-[random].apps.googleusercontent.com'
- Client secrets start with GOCSPX- for newer applications
- Google supports wildcard redirect URIs for localhost development
- Session duration is 24 hours
- Google issuer is always https://accounts.google.com
- Production Dagu config requires specific clientId and clientSecret
- Issuer URL must include trailing slash
- Auth0 supports standard OIDC discovery
- Free tier sufficient for small teams
- Session duration controlled by Auth0 token settings
- Auth0 Universal Login provides customizable UI
- Keycloak runs on port 8081 to avoid conflict with Dagu (8080)
- 'Issuer URL format: http://keycloak-host/realms/realm-name'
- Client authentication must be enabled for confidential clients
- Development mode (start-dev) is insecure - use production mode for real deployments
- Default token lifespan is 5 minutes (configurable in realm settings)
- Both certFile and keyFile must be provided to enable TLS
- Server will listen on HTTPS when TLS is configured
- Self-signed certificates require clients to skip verification
- Use proper CA-signed certificates in production
- Permissions apply to all authenticated users
- Default is full access (both permissions true)
- Permissions work with any authentication method
- No user-specific permissions (all users have same permissions)
- Open http://localhost:8525 in your browser.
- Environment variables include DAGU_HOST, DAGU_PORT, DAGU_TZ, DAGU_LOG_FORMAT
- Metrics available at /api/v2/metrics
- Uses basic authentication for API access
- Dagu workflows are defined using YAML files.
- Each file represents a DAG (Directed Acyclic Graph) that describes your workflow
  steps and their relationships.
- The legacy run field is still accepted for backward compatibility until v1.24.0,
  but it will be removed in a future release.
- API supports Basic Auth and Bearer Token authentication methods.
- Always returns 200 status - check `valid` field to determine if spec is valid
- All endpoints return structured error responses.
- 'The API supports three authentication methods: Basic Auth, Bearer Token, No Authentication.'
- '`errors` array contains human-readable validation messages'
- '`dag` field may contain partial DAG details even when validation fails'
- Use this endpoint to validate DAG specs before creating or updating DAGs
- API supports Basic Auth and Bearer Token authentication.
- 'The API supports three authentication methods: Basic Auth, Bearer Token, and No
  Authentication.'
- errors array contains human-readable validation messages
- dag field may contain partial DAG details even when validation fails
- Basic Auth or Bearer Token can be used for authentication.
- For security, Dagu filters which system environment variables are passed to step
  processes and child DAGs.
- Global limit for all steps
- This executor is experimental. It depends on Docker, downloads images on demand,
  and currently supports single-action invocations per step.
- Retries with exponential backoff 2x multiplier, capped at 60s
- 'Intervals: 2s, 4s, 8s, 16s, 32s → 60s'
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 bad_request: Returned for invalid names.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- Validation failed for DAG
- Non-existent step dependency in DAG specification
- 'INVALID_DAG_SPEC: Check your DAG specification for errors'
- 'bad_request: Invalid request parameters'
- 'not_found: Resource doesn''t exist'
- 'internal_error: Server-side error'
- 'unauthorized: Authentication failed'
- 'forbidden: Insufficient permissions'
- 'already_exists: Resource (e.g., run ID) already exists'
- 'max_run_reached: Concurrency or singleton limit reached'
- 'not_running: DAG is not running'
- '429'
- '503'
- '504'
- Will fail if file exceeds 5MB
- 'invalid volume format: Volume format (DAG‑level container.volumes): source:target[:ro|rw]'
- 'invalid port format: Port format (DAG‑level container.ports): ''80'', ''8080:80'',
  ''127.0.0.1:8080:80'''
- Only single-step workflows are supported today
- Actions that rely on richer event context may need additional wiring.
- 'WORKER_NOT_FOUND: The specified worker ID does not exist.'
- 'INVALID_LABELS: One or more labels are not recognized.'
- 'bad_request: Invalid DAG name format'
- 'already_exists: DAG with this name already exists'
- 'not_found: DAG not found'
- 'forbidden: Permission denied to delete DAGs'
- '400: Invalid new file name format'
- '409: A DAG with the new name already exists'
- '404: DAG not found'
- '400: DAG is not currently running'
- 'bad_gateway: Upstream service error'
- 'remote_node_error: Remote node connection failed'
- 'already_running: DAG is already running'
- 'already_exists: Resource already exists'
- 'not_found: Child DAG run or step not found'
- 'internal_error: Failed to retrieve queue information'
- 'already_running: DAG critical-job is already running, cannot start in singleton
  mode'
- '403: Permission denied to delete DAGs'
- '400: Invalid DAG name format'
- '409: DAG with this name already exists'
- Step 'step2' depends on non-existent step 'missing_step'
- 'Invalid cron expression in schedule: ''* * * *'''
- DAG not found
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Not Found'
- '409: Conflict'
- '500: Internal Error'
- '503: Service Unavailable'
- 'bad_request: Invalid new file name format'
- 'already_exists: A DAG with the new name already exists'
- 'not_running: DAG is not currently running'
- 'already_running: Another instance of this DAG is already running'
- code: internal_error
  message: Failed to retrieve queue information
- '401 Unauthorized: Missing or invalid authentication token'
- '403 Forbidden: Insufficient permissions (e.g., no write access)'
- '404 Not Found: DAG, DAG run, or resource doesn''t exist'
- original DAG run not found
- '429: Rate limit exceeded'
- '503: Service unavailable'
- '504: Gateway timeout'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://dagu.io
  auth:
    type: oauth2
source_metadata: null
