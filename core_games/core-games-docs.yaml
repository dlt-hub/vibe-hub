resources:
- name: monthly_retention_data
  endpoint:
    path: /api/v1/retention
    method: GET
    data_selector: data
    params: {}
- name: Pickup Truck
  endpoint:
    path: /pickup_truck
    method: GET
    data_selector: properties
    params: {}
- name: Track
  endpoint:
    path: /track
    method: GET
    data_selector: properties
    params: {}
- name: Binding Set
  endpoint:
    path: /bindings/set
    method: POST
- name: Bindings Manager
  endpoint:
    path: /bindings/manager
    method: GET
- name: wallets
  endpoint:
    path: /GetWalletsForPlayer
    method: GET
    data_selector: results
- name: tokens
  endpoint:
    path: /GetTokensForOwner
    method: GET
    data_selector: results
    params:
      contractAddress: '0xff9c1b15b16263c61d017ee9f65c50e4ae0113d7'
- name: Camera
  endpoint:
    path: /api/cameras
    method: GET
    data_selector: cameras
- name: Position
  endpoint:
    path: /camera/position
    method: GET
    data_selector: properties
    params: {}
- name: Rotation
  endpoint:
    path: /camera/rotation
    method: GET
    data_selector: properties
    params: {}
- name: Audio
  endpoint:
    path: /camera/audio
    method: GET
    data_selector: properties
    params: {}
- name: Scene
  endpoint:
    path: /camera/scene
    method: GET
    data_selector: properties
    params: {}
- name: Camera Capture to Image
  endpoint:
    path: /camera/capture
    method: GET
    data_selector: properties
    params: {}
- name: Camera Templates
  endpoint:
    path: /camera/templates
    method: GET
    data_selector: properties
    params: {}
- name: Player Settings
  endpoint:
    path: /camera/player-settings
    method: GET
    data_selector: properties
    params: {}
- name: Camera Collision
  endpoint:
    path: /camera/collision
    method: GET
    data_selector: properties
    params: {}
- name: context
  endpoint:
    path: /contexts
    method: GET
    data_selector: contexts
    params: {}
- name: DamageableObject
  endpoint:
    path: /api/damageableobject/
    method: GET
    data_selector: properties
    params: {}
- name: Data Table
  endpoint:
    path: /data/tables
    method: POST
    data_selector: tables
    params: {}
- name: Static Mesh Properties
  endpoint:
    path: /api/staticmesh/properties
    method: GET
    data_selector: properties
    params: {}
- name: Physics Settings
  endpoint:
    path: /api/physics/settings
    method: GET
    data_selector: settings
    params: {}
- name: editor_tabs
  endpoint:
    path: /editor/tabs
    method: GET
    data_selector: operations
    params: {}
- name: editor_navigation
  endpoint:
    path: /editor/navigation
    method: GET
    data_selector: operations
    params: {}
- name: hierarchy_organization
  endpoint:
    path: /editor/hierarchy
    method: GET
    data_selector: operations
    params: {}
- name: viewport_movement
  endpoint:
    path: /editor/viewport
    method: GET
    data_selector: operations
    params: {}
- name: Basic Game State Manager
  endpoint:
    path: /basic-game-state-manager
    method: GET
    data_selector: states
    params: {}
- name: Game State Display
  endpoint:
    path: /game-state-display
    method: GET
    data_selector: display
    params: {}
- name: Lobby Start Behavior
  endpoint:
    path: /lobby-start-behavior
    method: GET
    data_selector: behavior
    params: {}
- name: Round End Conditions
  endpoint:
    path: /round-end-conditions
    method: GET
    data_selector: conditions
    params: {}
- name: Round Start Conditions
  endpoint:
    path: /round-start-conditions
    method: GET
    data_selector: conditions
    params: {}
- name: Capture Points
  endpoint:
    path: /capture-points
    method: GET
    data_selector: points
    params: {}
- name: Constricting Play Zone
  endpoint:
    path: /constricting-play-zone
    method: GET
    data_selector: zones
    params: {}
- name: Named Locations
  endpoint:
    path: /named-locations
    method: GET
    data_selector: locations
    params: {}
- name: UI
  endpoint:
    path: /ui
    method: GET
    data_selector: ui
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: game_event
  endpoint:
    path: /api/coregameevent
    method: GET
    data_selector: events
    params: {}
- name: IK Anchor
  endpoint:
    path: /api/ikanchor/
    method: GET
    data_selector: records
    params: {}
- name: Player
  endpoint:
    path: /api/player/
    method: GET
    data_selector: records
    params: {}
- name: Game Portal
  endpoint:
    path: /api/game_portal
    method: GET
    data_selector: portal_details
- name: Player Transfer
  endpoint:
    path: /api/player/transfer
    method: POST
    data_selector: transfer_details
- name: inventory
  endpoint:
    path: /api/inventory
    method: GET
    data_selector: records
    params: {}
- name: item_assets
  endpoint:
    path: /api/item_assets
    method: GET
    data_selector: records
    params: {}
- name: ItemObject
  endpoint:
    path: /itemobject
    method: GET
    data_selector: properties
    params: {}
- name: InventoryItem
  endpoint:
    path: /inventoryitem
    method: GET
    data_selector: items
    params: {}
- name: leaderboard
  endpoint:
    path: /api/leaderboards
    method: GET
    data_selector: entries
    params: {}
- name: AddEntry
  endpoint:
    path: /api/leaderboards/AddEntry
    method: POST
    data_selector: entry
    params: {}
- name: GetLeaderboard
  endpoint:
    path: /api/leaderboards/GetLeaderboard
    method: GET
    data_selector: entries
    params: {}
- name: custom_materials
  endpoint:
    path: /api/custom_materials
    method: GET
    data_selector: materials
    params: {}
- name: applying_materials
  endpoint:
    path: /api/applying_materials
    method: GET
    data_selector: materials
    params: {}
- name: material
  endpoint:
    path: /materials
    method: GET
    data_selector: materials
    params: {}
- name: material_slot
  endpoint:
    path: /material_slots
    method: GET
    data_selector: material_slots
    params: {}
- name: uploads
  endpoint:
    path: /media/uploads
    method: POST
    data_selector: uploaded_images
- name: image_assets
  endpoint:
    path: /media/assets
    method: GET
    data_selector: assets
- name: Default Context
  endpoint:
    path: /contexts/default
    method: GET
    data_selector: objects
- name: Client Context
  endpoint:
    path: /contexts/client
    method: GET
    data_selector: objects
- name: Server Context
  endpoint:
    path: /contexts/server
    method: GET
    data_selector: objects
- name: Static Context
  endpoint:
    path: /contexts/static
    method: GET
    data_selector: objects
- name: Local Context
  endpoint:
    path: /contexts/local
    method: GET
    data_selector: objects
- name: Game Settings
  endpoint:
    path: /api/game/settings
    method: GET
    data_selector: properties
    params: {}
- name: Network Relevance Focus
  endpoint:
    path: /api/network/relevance/focus
    method: GET
    data_selector: focus_options
    params: {}
- name: Setting Object Network Relevancy
  endpoint:
    path: /api/object/network/relevancy
    method: POST
    data_selector: settings
    params: {}
- name: Persistent Storage
  endpoint:
    path: /api/storage/GetOfflinePlayerData
    method: GET
    data_selector: ''
    params: {}
- name: Shared Keys
  endpoint:
    path: /api/storage/GetSharedOfflinePlayerData
    method: GET
    data_selector: ''
    params: {}
- name: Finding Player ID's
  endpoint:
    path: /api/game/GetPlayers
    method: GET
    data_selector: ''
    params: {}
- name: player_party_information
  endpoint:
    path: /api/player/
    method: GET
    data_selector: party
    params: {}
- name: player_data
  endpoint:
    path: /api/storage/player
    method: GET
    data_selector: data
    params: {}
- name: Physics Object
  endpoint:
    path: /api/physicsobject
    method: GET
    data_selector: objects
    params: {}
- name: Profiler
  endpoint:
    path: /profiler
    method: GET
    data_selector: performance_data
- name: GameInfo
  endpoint:
    path: /api/coregameinfo/
    method: GET
    data_selector: gameInfo
    params: {}
- name: Tree
  endpoint:
    path: /Data/Tree.pbt
    method: GET
    data_selector: objects
- name: AssetManifest
  endpoint:
    path: /Data/AssetManifest.pbt
    method: GET
    data_selector: assets
- name: main_scene
  endpoint:
    path: /scenes/main
    method: GET
    data_selector: scene
    params: {}
- name: duplicated_scene
  endpoint:
    path: /scenes/duplicate
    method: POST
    data_selector: scene
    params: {}
- name: include_publish
  endpoint:
    path: /scenes/publish/include
    method: POST
    data_selector: scene
    params: {}
- name: delete_scene
  endpoint:
    path: /scenes/delete
    method: DELETE
    data_selector: scene
    params: {}
- name: show_in_explorer
  endpoint:
    path: /scenes/explorer
    method: GET
    data_selector: scene
    params: {}
- name: publish_game
  endpoint:
    path: /scenes/publish
    method: POST
    data_selector: scene
    params: {}
- name: transfer_to_scene
  endpoint:
    path: /scenes/transfer
    method: POST
    data_selector: scene
    params: {}
- name: script_debugger
  endpoint:
    path: /script_debugger
    method: GET
    data_selector: data
    params: {}
- name: DanceTrigger
  endpoint:
    path: /api/dance_trigger
    method: POST
    data_selector: script
    params: {}
- name: Shared Keys
  endpoint:
    path: /shared-keys
    method: POST
    data_selector: keys
    params: {}
- name: Player Storage
  endpoint:
    path: /player-storage
    method: GET
    data_selector: storage
    params: {}
- name: Spawn Point
  endpoint:
    path: /api/spawnpoints
    method: GET
    data_selector: spawnPoints
- name: Spawn Settings
  endpoint:
    path: /api/spawnsettings
    method: GET
    data_selector: spawnSettings
- name: Player Storage
  endpoint:
    path: /persistent_storage/
    method: GET
    data_selector: data
    params: {}
- name: Player Shared Storage
  endpoint:
    path: /shared_storage/
    method: GET
    data_selector: data
    params: {}
- name: Concurrent Player Storage
  endpoint:
    path: /concurrent_storage/
    method: GET
    data_selector: data
    params: {}
- name: Concurrent Shared Player Storage
  endpoint:
    path: /concurrent_storage/
    method: GET
    data_selector: data
    params: {}
- name: team_settings
  endpoint:
    path: /teams/settings
    method: GET
    data_selector: settings
    params: {}
- name: team_autobalancer
  endpoint:
    path: /teams/autobalancer
    method: GET
    data_selector: autobalancer
    params: {}
- name: Game Chat
  endpoint:
    path: /game/chat
    method: GET
- name: Voice Chat
  endpoint:
    path: /voice/chat
    method: GET
- name: Teams Namespace
  endpoint:
    path: /teams/namespace
    method: GET
- name: Game Namespace
  endpoint:
    path: /game/namespace
    method: GET
- name: Player Object
  endpoint:
    path: /player/object
    method: GET
- name: templates
  endpoint:
    path: /api/templates
    method: GET
    data_selector: templates
    params: {}
- name: Terrain Creator
  endpoint:
    path: /terrain/creator
    method: GET
    data_selector: terrain_data
- name: Heightmaps
  endpoint:
    path: /heightmaps
    method: GET
    data_selector: heightmap_data
- name: Foliage
  endpoint:
    path: /foliage
    method: GET
    data_selector: foliage_data
- name: triggers
  endpoint:
    path: /api/triggers
    method: GET
    data_selector: triggers
    params: {}
- name: Camera
  endpoint:
    path: /api/camera/
    method: GET
    data_selector: captures
- name: CameraCapture
  endpoint:
    path: /api/cameracapture/
    method: GET
    data_selector: captures
- name: CameraCaptureClient
  endpoint:
    path: /api/cameracapture/
    method: POST
    data_selector: captures
    params: {}
- name: text_entry
  endpoint:
    path: /api/text_entry
    method: GET
    data_selector: text_entries
- name: Four Wheeled Vehicles
  endpoint:
    path: /api/vehicles/four_wheeled
    method: GET
    data_selector: vehicles
    params: {}
- name: Treaded Vehicles
  endpoint:
    path: /api/vehicles/treaded
    method: GET
    data_selector: vehicles
    params: {}
- name: vehicle_properties
  endpoint:
    path: /vehicle/properties
    method: GET
    data_selector: properties
- name: driver_properties
  endpoint:
    path: /driver/properties
    method: GET
    data_selector: properties
- name: Voice Chat Settings
  endpoint:
    path: /voice/chat/settings
    method: GET
    data_selector: settings
    params: {}
- name: weapons
  endpoint:
    path: /api/weapons
    method: GET
    data_selector: weapons
    params: {}
- name: Item Geometry
  endpoint:
    path: /api/item/geometry
    method: GET
    data_selector: items
    params: {}
- name: Item Registry
  endpoint:
    path: /api/item/registry
    method: GET
    data_selector: items
    params: {}
- name: Loot Table
  endpoint:
    path: /api/loot/table
    method: GET
    data_selector: loot
    params: {}
- name: Recipes Registry
  endpoint:
    path: /api/recipes/registry
    method: GET
    data_selector: recipes
    params: {}
- name: Scavenge Node
  endpoint:
    path: /api/scavenge/node
    method: GET
    data_selector: nodes
    params: {}
- name: 1 Flag
  endpoint:
    path: /api/1_flag
    method: GET
- name: 2 Flag
  endpoint:
    path: /api/2_flag
    method: GET
- name: battle_royale
  endpoint:
    path: /create/battle_royale
    method: POST
    data_selector: game_data
    params: {}
- name: Drop Zone
  endpoint:
    path: /drop-zone
    method: GET
    data_selector: zone_data
    params: {}
- name: Play Zone
  endpoint:
    path: /play-zone
    method: GET
    data_selector: zone_data
    params: {}
- name: Loot Table
  endpoint:
    path: /loot-table
    method: GET
    data_selector: loot_data
    params: {}
- name: ability
  endpoint:
    path: /abilities
    method: GET
    data_selector: abilities
- name: IdleActivity
  endpoint:
    path: /AIActivity/Idle
    method: POST
    data_selector: activity
    params: {}
- name: CaptureActivity
  endpoint:
    path: /AIActivity/Capture
    method: POST
    data_selector: activity
    params: {}
- name: Boss Damageable Object
  endpoint:
    path: /create-boss-damageable-object
    method: POST
    data_selector: data
- name: Boss AI Handler
  endpoint:
    path: /create-boss-ai-handler
    method: POST
    data_selector: data
- name: BossHealth
  endpoint:
    path: /api/boss/health
    method: GET
    data_selector: healthData
- name: BossAIServer
  endpoint:
    path: /services/data/vXX.X/sobjects/BossAIServer
    method: GET
    data_selector: records
    params: {}
- name: DamageClient
  endpoint:
    path: /services/data/vXX.X/sobjects/DamageClient
    method: GET
    data_selector: records
    params: {}
- name: EnableWeapon
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: DisableWeapon
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: ShieldGeneratorClient
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: ShieldGeneratorServer
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: BossHealthUIClient
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Damageable Object
  endpoint:
    path: /create_damageable_object
    method: POST
    data_selector: data
    params:
      MaxHitPoints: 50
      StartingHitPoints: 50
- name: Injector Pickup
  endpoint:
    path: /create_injector_pickup
    method: POST
    data_selector: data
    params: {}
- name: injectors
  endpoint:
    path: /services/data/vXX.X/sobjects/Injectors
    method: GET
    data_selector: records
    params: {}
- name: health_bar
  endpoint:
    path: /services/data/vXX.X/sobjects/HealthBar
    method: GET
    data_selector: records
    params: {}
- name: Script
  endpoint:
    path: /api/scripts
    method: POST
    data_selector: scripts
- name: RaceManager_Server
  endpoint:
    path: /scripts/RaceManager_Server
    method: POST
    data_selector: scripts
    params: {}
- name: finishTrigger
  endpoint:
    path: /finishTrigger
    method: GET
    data_selector: finish
    params: {}
- name: startingPositions
  endpoint:
    path: /startingPositions
    method: GET
    data_selector: positions
    params: {}
- name: GetReady
  endpoint:
    path: /GetReady
    method: POST
    data_selector: data
    params: {}
- name: Go
  endpoint:
    path: /Go
    method: POST
    data_selector: data
    params: {}
- name: StopRace
  endpoint:
    path: /StopRace
    method: POST
    data_selector: data
    params: {}
- name: RaceFinished
  endpoint:
    path: /RaceFinished
    method: POST
    data_selector: data
    params: {}
- name: leaderboard
  endpoint:
    path: /leaderboards
    method: GET
    data_selector: records
    params: {}
- name: player_data
  endpoint:
    path: /player/data
    method: GET
    data_selector: records
    params: {}
- name: players
  endpoint:
    path: /players
    method: GET
    data_selector: players
    params: {}
- name: leaderboard
  endpoint:
    path: /leaderboard
    method: POST
    data_selector: leaderboard
    params: {}
- name: GetReady
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Go
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: StopRace
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: RaceFinished
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: SetSplitTime
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: audio_effects
  endpoint:
    path: /audio/effects
    method: POST
    data_selector: effects
    params: {}
- name: effects
  endpoint:
    path: /effects
    method: GET
    data_selector: effects
    params: {}
- name: Moving Platform
  endpoint:
    path: /create/moving_platform
    method: POST
    data_selector: platform_data
    params:
      incremental: updated_at
- name: Rotating Platform
  endpoint:
    path: /create/rotating_platform
    method: POST
    data_selector: platform_data
    params: {}
- name: Shrink Platform
  endpoint:
    path: /create/shrink_platform
    method: POST
    data_selector: platform_data
    params: {}
- name: kill_zone
  endpoint:
    path: /kill_zone
    method: POST
    data_selector: records
    params: {}
- name: spawn_settings
  endpoint:
    path: /spawn_settings
    method: POST
    data_selector: records
    params: {}
- name: deadly_spinning_blade
  endpoint:
    path: /deadly_spinning_blade
    method: POST
    data_selector: records
    params: {}
- name: rewards_chest
  endpoint:
    path: /rewards_chest
    method: POST
    data_selector: records
    params: {}
- name: ChestAnimation_Client
  endpoint:
    path: /services/data/vXX.X/sobjects/ChestAnimation_Client
    method: GET
    data_selector: records
    params: {}
- name: PetsController_Server
  endpoint:
    path: /services/data/vXX.X/sobjects/PetsController_Server
    method: GET
    data_selector: records
    params: {}
- name: ChangeColorServer
  endpoint:
    path: /ChangeColorServer
    method: POST
- name: Cosmetic Tokens
  endpoint:
    path: /api/cosmetic_tokens
    method: GET
    data_selector: tokens
    params: {}
- name: Cosmetics
  endpoint:
    path: /cosmetics
    method: GET
    data_selector: templates
    params: {}
- name: Cosmetic Tokens
  endpoint:
    path: /cosmetic_tokens
    method: GET
    data_selector: tokens
    params: {}
- name: wallet
  endpoint:
    path: /api/wallet
    method: GET
    data_selector: walletData
- name: collection
  endpoint:
    path: /api/collection
    method: GET
    data_selector: collectionData
- name: GetTokens
  endpoint:
    path: /GetTokens
    method: GET
    data_selector: tokens
- name: GetWalletsForPlayer
  endpoint:
    path: /GetWalletsForPlayer
    method: GET
    data_selector: wallets
- name: GetTokensForOwner
  endpoint:
    path: /GetTokensForOwner
    method: GET
    data_selector: tokens
- name: nft_data
  endpoint:
    path: /assets/ethereum/{contract_address}/{token_id}
    method: GET
    data_selector: token
    params:
      contract_address: '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'
      token_id: '5822'
- name: owner_collection
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
    params:
      owner: '0xCe90a7949bb78892F159F428D0dC23a8E3584d75'
- name: tokens
  endpoint:
    path: /GetTokensForOwner
    method: GET
    data_selector: results
- name: ScoreServer
  endpoint:
    path: /api/storage/ScoreServer
    method: POST
    data_selector: data
    params: {}
- name: ScoreClient
  endpoint:
    path: /api/storage/ScoreClient
    method: GET
    data_selector: data
    params: {}
- name: WeaponServer
  endpoint:
    path: /api/storage/WeaponServer
    method: POST
    data_selector: data
    params: {}
- name: ROOT
  endpoint:
    path: /ROOT
    method: GET
    data_selector: properties
- name: CameraCapture
  endpoint:
    path: /CameraCapture
    method: GET
    data_selector: properties
- name: TakePhotoButton
  endpoint:
    path: /TakePhotoButton
    method: GET
    data_selector: properties
- name: ScreenPreview
  endpoint:
    path: /ScreenPreview
    method: GET
    data_selector: properties
- name: ShutterAudio
  endpoint:
    path: /ShutterAudio
    method: GET
    data_selector: properties
- name: Flash
  endpoint:
    path: /Flash
    method: GET
    data_selector: properties
- name: KeyTip
  endpoint:
    path: /KeyTip
    method: GET
    data_selector: properties
- name: WorldPreviewImage
  endpoint:
    path: /WorldPreviewImage
    method: GET
    data_selector: properties
- name: WorldPreviewText
  endpoint:
    path: /WorldPreviewText
    method: GET
    data_selector: properties
- name: photobooth.data
  endpoint:
    path: /photobooth/data
    method: GET
    data_selector: data
    params: {}
- name: photobooth
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: VIEW_PICTURE
  endpoint:
    path: /ViewPicture
    method: GET
- name: TRIGGER
  endpoint:
    path: /Trigger
    method: GET
- name: CLOSE_BUTTON
  endpoint:
    path: /CloseButton
    method: GET
- name: Burnt Egg
  endpoint:
    path: /items/burnt_egg
    method: POST
    data_selector: item_data
    params: {}
- name: Alien Raptor
  endpoint:
    path: /items/alien_raptor
    method: POST
    data_selector: item_data
    params: {}
- name: Incubator
  endpoint:
    path: /items/incubator
    method: POST
    data_selector: item_data
    params: {}
- name: Terminal
  endpoint:
    path: /items/terminal
    method: POST
    data_selector: item_data
    params: {}
- name: Incubator
  endpoint:
    path: /api/incubator
    method: POST
    data_selector: data
    params:
      unique_storage_id: '4'
      client: Incubator (Client)
      static: Incubator (Static)
      placement_preview: Incubator (Client)
      placement_overlap_check_trigger: Incubator (Trigger)
      placement_area_types: Scifi
      producer_base_type: Incubator
- name: Terminal
  endpoint:
    path: /api/terminal
    method: POST
    data_selector: data
    params:
      unique_storage_id: '5'
      client: Terminal (Client)
      static: Terminal (Static)
      placement_preview: Terminal (Client)
      placement_overlap_check_trigger: Terminal (Trigger)
      placement_area_types: Scifi
      is_producer_base: false
- name: Incubating Egg
  endpoint:
    path: /api/incubating_egg
    method: POST
    data_selector: data
    params:
      source_item_id: Alien Egg
      number_of_seeds: 1
- name: Icons
  endpoint:
    path: /services/data/vXX.X/sobjects/Icons
    method: GET
    data_selector: records
    params: {}
- name: upload_images
  endpoint:
    path: /upload/images
    method: POST
    data_selector: uploaded_images
- name: create_brush
  endpoint:
    path: /create/brush
    method: POST
    data_selector: created_brush
- name: TreasureChest
  endpoint:
    path: /services/data/vXX.X/sobjects/TreasureChest
    method: GET
    data_selector: records
    params: {}
- name: FireFly
  endpoint:
    path: /abilities/firefly
    method: POST
    data_selector: ability_data
    params: {}
- name: WeaponAimClient
  endpoint:
    path: /client/weapon/aim
    method: POST
    data_selector: data
    params: {}
- name: WeaponAimServer
  endpoint:
    path: /server/weapon/aim
    method: POST
    data_selector: data
    params: {}
- name: WeaponDamageServerShoot
  endpoint:
    path: /server/weapon/damage
    method: POST
    data_selector: data
    params: {}
- name: ember_pickup
  endpoint:
    path: /ammo/pickup/ember
    method: GET
    data_selector: pickups
    params:
      incremental: max_ammo
- name: weapon
  endpoint:
    path: /api/weapons
    method: GET
    data_selector: weapons
    params: {}
- name: Weapon
  endpoint:
    path: /weapons
    method: GET
    data_selector: weapons
    params: {}
- name: Bullet
  endpoint:
    path: /bullets
    method: GET
    data_selector: bullets
    params: {}
- name: left_body
  endpoint:
    path: /sockets/left
    method: GET
    data_selector: sockets
    params: {}
- name: center_body
  endpoint:
    path: /sockets/center
    method: GET
    data_selector: sockets
    params: {}
- name: right_body
  endpoint:
    path: /sockets/right
    method: GET
    data_selector: sockets
    params: {}
- name: animation_stances
  endpoint:
    path: /animations/stances
    method: GET
    data_selector: animations
- name: unarmed
  endpoint:
    path: /animations/unarmed
    method: GET
    data_selector: animations
- name: unarmed_zombie
  endpoint:
    path: /animations/unarmed_zombie
    method: GET
    data_selector: animations
- name: one_hand
  endpoint:
    path: /animations/one_hand
    method: GET
    data_selector: animations
- name: two_hand_melee
  endpoint:
    path: /animations/two_hand_melee
    method: GET
    data_selector: animations
- name: two_hand_rifle
  endpoint:
    path: /animations/two_hand_rifle
    method: GET
    data_selector: animations
- name: two_hand_staff
  endpoint:
    path: /animations/two_hand_staff
    method: GET
    data_selector: animations
- name: two_hand_sword
  endpoint:
    path: /animations/two_hand_sword
    method: GET
    data_selector: animations
- name: dual_wield_katana
  endpoint:
    path: /animations/dual_wield_katana
    method: GET
    data_selector: animations
- name: dual_wield_melee
  endpoint:
    path: /animations/dual_wield_melee
    method: GET
    data_selector: animations
- name: ability_animations
  endpoint:
    path: /ability/animations
    method: GET
    data_selector: animations
- name: one_hand_melee
  endpoint:
    path: /one_hand/melee
    method: GET
    data_selector: animations
- name: one_hand_pistol
  endpoint:
    path: /one_hand/pistol
    method: GET
    data_selector: animations
- name: two_hand_melee
  endpoint:
    path: /two_hand/melee
    method: GET
    data_selector: animations
- name: two_hand_rifle
  endpoint:
    path: /two_hand/rifle
    method: GET
    data_selector: animations
- name: two_hand_rocket
  endpoint:
    path: /two_hand/rocket
    method: GET
    data_selector: animations
- name: two_hand_staff
  endpoint:
    path: /two_hand/staff
    method: GET
    data_selector: animations
- name: unarmed_animations
  endpoint:
    path: /api/animations/unarmed
    method: GET
    data_selector: animations
- name: unarmed_zombie_animations
  endpoint:
    path: /api/animations/unarmed_zombie
    method: GET
    data_selector: animations
- name: one_hand_melee_animations
  endpoint:
    path: /api/animations/one_hand_melee
    method: GET
    data_selector: animations
- name: one_hand_pistol_animations
  endpoint:
    path: /api/animations/one_hand_pistol
    method: GET
    data_selector: animations
- name: two_hand_melee_animations
  endpoint:
    path: /api/animations/two_hand_melee
    method: GET
    data_selector: animations
- name: two_hand_rifle_animations
  endpoint:
    path: /api/animations/two_hand_rifle
    method: GET
    data_selector: animations
- name: two_hand_staff_animations
  endpoint:
    path: /api/animations/two_hand_staff
    method: GET
    data_selector: animations
- name: two_hand_sword_animations
  endpoint:
    path: /api/animations/two_hand_sword
    method: GET
    data_selector: animations
- name: dual_katana_left_hand_slash_left
  endpoint:
    path: /animations/dual_katana_left_hand_slash_left
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_katana_left_hand_throw
  endpoint:
    path: /animations/dual_katana_left_hand_throw
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_katana_right_hand_slash_right
  endpoint:
    path: /animations/dual_katana_right_hand_slash_right
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_katana_right_hand_slash_vertical
  endpoint:
    path: /animations/dual_katana_right_hand_slash_vertical
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_katana_right_hand_throw
  endpoint:
    path: /animations/dual_katana_right_hand_throw
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_katana_right_hand_thrust
  endpoint:
    path: /animations/dual_katana_right_hand_thrust
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_katana_unsheathe
  endpoint:
    path: /animations/dual_katana_unsheathe
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_melee_dual_thrust
  endpoint:
    path: /animations/dual_melee_dual_thrust
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_melee_left_hand_slash_left
  endpoint:
    path: /animations/dual_melee_left_hand_slash_left
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_melee_left_hand_slash_right
  endpoint:
    path: /animations/dual_melee_left_hand_slash_right
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_melee_left_hand_thrust
  endpoint:
    path: /animations/dual_melee_left_hand_thrust
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_melee_right_hand_slash_left
  endpoint:
    path: /animations/dual_melee_right_hand_slash_left
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_melee_right_hand_slash_right
  endpoint:
    path: /animations/dual_melee_right_hand_slash_right
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_melee_right_hand_thrust
  endpoint:
    path: /animations/dual_melee_right_hand_thrust
    method: GET
    data_selector: ability_animation
    params: {}
- name: dual_melee_unsheathe
  endpoint:
    path: /animations/dual_melee_unsheathe
    method: GET
    data_selector: ability_animation
    params: {}
- name: Whelp_Animation_Stances
  endpoint:
    path: /animations/whelp/stances
    method: GET
    data_selector: animations
- name: Whelp_Play_Animations
  endpoint:
    path: /animations/whelp/play
    method: GET
    data_selector: animations
- name: Fox_Animation_Stances
  endpoint:
    path: /animations/fox/stances
    method: GET
    data_selector: animations
- name: Fox_Play_Animations
  endpoint:
    path: /animations/fox/play
    method: GET
    data_selector: animations
- name: Mecha_Animation_Stances
  endpoint:
    path: /animations/mecha/stances
    method: GET
    data_selector: animations
- name: Mecha_Play_Animations
  endpoint:
    path: /animations/mecha/play
    method: GET
    data_selector: animations
- name: Raptor_Animation_Stances
  endpoint:
    path: /animations/raptor/stances
    method: GET
    data_selector: animations
- name: Raptor_Play_Animations
  endpoint:
    path: /animations/raptor/play
    method: GET
    data_selector: animations
- name: Spider_Animation_Stances
  endpoint:
    path: /animations/spider/stances
    method: GET
    data_selector: animations
- name: Spider_Play_Animations
  endpoint:
    path: /animations/spider/play
    method: GET
    data_selector: animations
- name: Wolf_Animation_Stances
  endpoint:
    path: /animations/wolf/stances
    method: GET
    data_selector: animations
- name: Wolf_Play_Animations
  endpoint:
    path: /animations/wolf/play
    method: GET
    data_selector: animations
- name: emotes
  endpoint:
    path: /emotes
    method: GET
    data_selector: emotes
    params: {}
- name: UIPivot
  endpoint:
    path: /enums/UIPivot
    method: GET
    data_selector: enum_values
- name: Visibility
  endpoint:
    path: /enums/Visibility
    method: GET
    data_selector: enum_values
- name: VoiceChannelType
  endpoint:
    path: /enums/VoiceChannelType
    method: GET
    data_selector: enum_values
- name: VoiceChatMethod
  endpoint:
    path: /enums/VoiceChatMethod
    method: GET
    data_selector: enum_values
- name: VoiceChatMode
  endpoint:
    path: /enums/VoiceChatMode
    method: GET
    data_selector: enum_values
- name: damageable
  endpoint:
    path: /damageable
    method: GET
    data_selector: properties
    params: {}
- name: Item
  endpoint:
    path: /api/item
    method: GET
    data_selector: items
    params: {}
- name: AbilityTarget
  endpoint:
    path: /AbilityTarget
    method: GET
    data_selector: properties
    params: {}
- name: AIActivity
  endpoint:
    path: /AIActivity
    method: GET
    data_selector: records
    params: {}
- name: AIActivity
  endpoint:
    path: /aiactivity
    method: GET
    data_selector: activities
- name: AddActivity
  endpoint:
    path: /AddActivity
    method: POST
    data_selector: activity
    params: {}
- name: RemoveActivity
  endpoint:
    path: /RemoveActivity
    method: DELETE
    data_selector: activity
    params: {}
- name: FindActivity
  endpoint:
    path: /FindActivity
    method: GET
    data_selector: activity
    params: {}
- name: AnimatedMesh
  endpoint:
    path: /animatedmesh
    method: GET
    data_selector: properties
- name: binding_sets
  endpoint:
    path: /binding_sets
    method: GET
    data_selector: bindingSets
    params: {}
- name: blockchain_contract
  endpoint:
    path: /blockchain/contracts
    method: GET
    data_selector: properties
- name: BlockchainToken
  endpoint:
    path: /blockchaintoken
    method: GET
    data_selector: tokenData
- name: token
  endpoint:
    path: /blockchain/getToken
    method: GET
    data_selector: token
    params:
      contractAddress: '0x9a534628b4062e123ce7ee2222ec20b86e16ca8f'
      tokenId: '1'
- name: GetValue
  endpoint:
    path: /blockchaintokenattribute/getvalue
    method: GET
    data_selector: value
    params: {}
- name: BlockchainWallet
  endpoint:
    path: /blockchain/wallets
    method: GET
    data_selector: wallets
    params: {}
- name: wallets
  endpoint:
    path: /blockchain/GetWalletsForPlayer
    method: GET
    data_selector: results
    params: {}
- name: GetTransform
  endpoint:
    path: /GetTransform
    method: GET
    data_selector: result
    params: {}
- name: GetCenter
  endpoint:
    path: /GetCenter
    method: GET
    data_selector: result
    params: {}
- name: Camera
  endpoint:
    path: /camera
    method: GET
    data_selector: CameraSettings
- name: camera_properties
  endpoint:
    path: /camera/properties
    method: GET
    data_selector: properties
- name: camera_functions
  endpoint:
    path: /camera/functions
    method: GET
    data_selector: functions
- name: Color
  endpoint:
    path: /generated/tags/#api
    method: GET
    data_selector: Color
    params: {}
- name: ColorFunctions
  endpoint:
    path: /api/color/functions
    method: GET
    data_selector: functions
    params: {}
- name: PredefinedColors
  endpoint:
    path: /api/color/predefined
    method: GET
    data_selector: colors
    params: {}
- name: friends
  endpoint:
    path: /GetFriends
    method: GET
    data_selector: results
- name: CoreFriend
  endpoint:
    path: /coresocial/friends
    method: GET
    data_selector: results
- name: CoreGameCollectionEntry
  endpoint:
    path: /coregamecollectionentry
    method: GET
    data_selector: entries
- name: CoreGameEvent
  endpoint:
    path: /coregameevent
    method: GET
    data_selector: events
    params: {}
- name: game_events
  endpoint:
    path: /coreplatform/GetGameEventsForGame
    method: GET
    data_selector: results
- name: CoreGameEvent
  endpoint:
    path: /core/game/events
    method: GET
    data_selector: results
- name: game_events
  endpoint:
    path: /CorePlatform/GetGameEventsForGame
    method: GET
- name: CoreGameInfo
  endpoint:
    path: /coregameinfo
    method: GET
    data_selector: properties
- name: CoreMesh
  endpoint:
    path: /coremesh
    method: GET
    data_selector: properties
    params: {}
- name: mesh
  endpoint:
    path: /coremesh
    method: POST
    data_selector: teamAssignment
    params: {}
- name: CoreObject
  endpoint:
    path: /CoreObject
    method: GET
    data_selector: properties
    params: {}
- name: UI Panel
  endpoint:
    path: /services/data/vXX.X/sobjects/UIPanel
    method: GET
    data_selector: records
    params: {}
- name: UIButton
  endpoint:
    path: /services/data/vXX.X/sobjects/UIButton
    method: GET
    data_selector: records
    params: {}
- name: CoreObjectReference
  endpoint:
    path: /CoreObjectReference
    method: GET
    data_selector: properties
    params: {}
- name: player_profile
  endpoint:
    path: /coreplatform/getPlayerProfile
    method: GET
    data_selector: profile
- name: CurveKey
  endpoint:
    path: /CurveKey
    method: GET
- name: CustomMaterial
  endpoint:
    path: /custommaterial
    method: GET
    data_selector: properties
    params: {}
- name: Damage
  endpoint:
    path: /damage
    method: GET
    data_selector: records
    params: {}
- name: damage_player_advanced
  endpoint:
    path: /damage/player/advanced
    method: POST
    data_selector: dmg
    params: {}
- name: reason
  endpoint:
    path: /damage/reason
    method: POST
    data_selector: dmg
    params: {}
- name: source_ability
  endpoint:
    path: /damage/source_ability
    method: POST
    data_selector: dmg
    params: {}
- name: source_player
  endpoint:
    path: /damage/source_player
    method: POST
    data_selector: dmg
    params: {}
- name: DamageableObject
  endpoint:
    path: /damageableobject
    method: GET
    data_selector: properties
    params: {}
- name: diedEvent
  endpoint:
    path: /diedEvent
    method: GET
    data_selector: eventData
    params: {}
- name: damagedEvent
  endpoint:
    path: /damagedEvent
    method: GET
    data_selector: eventData
    params: {}
- name: DateTime
  endpoint:
    path: /DateTime
    method: GET
    data_selector: DateTime
    params: {}
- name: equipment
  endpoint:
    path: /api/equipment
    method: GET
    data_selector: equipmentData
- name: EventListener
  endpoint:
    path: /eventlistener
    method: GET
    data_selector: properties
    params: {}
- name: Folder
  endpoint:
    path: /folder
    method: GET
    data_selector: records
- name: turn_radius
  endpoint:
    path: /fourwheeledvehicle/turnRadius
    method: GET
    data_selector: turnRadius
- name: HitResult
  endpoint:
    path: /api/hitresult
    method: GET
    data_selector: results
    params: {}
- name: HitResult
  endpoint:
    path: /GetMaterialSlot
    method: GET
    data_selector: materialSlot
    params: {}
- name: HookListener
  endpoint:
    path: /hooklistener
    method: GET
    data_selector: properties
    params: {}
- name: IKAnchor
  endpoint:
    path: /api/ikanchor
    method: GET
    data_selector: data
    params: {}
- name: impact_data
  endpoint:
    path: /impactdata
    method: GET
    data_selector: impactData
    params: {}
- name: Inventory
  endpoint:
    path: /inventory
    method: GET
    data_selector: inventoryItems
    params: {}
- name: inventory_item
  endpoint:
    path: /inventory/items
    method: GET
    data_selector: items
    params: {}
- name: inventory
  endpoint:
    path: /inventory
    method: GET
    data_selector: inventory
    params: {}
- name: player_inventory
  endpoint:
    path: /player/inventory
    method: GET
    data_selector: inventories
    params: {}
- name: InventoryItem
  endpoint:
    path: /inventory/item
    method: GET
    data_selector: items
    params: {}
- name: item_object
  endpoint:
    path: /itemobject
    method: GET
    data_selector: properties
    params: {}
- name: leaderboard_entry
  endpoint:
    path: /leaderboards
    method: GET
    data_selector: entries
    params: {}
- name: LightProperties
  endpoint:
    path: /light/properties
    method: GET
    data_selector: properties
- name: SpawnSharedAsset
  endpoint:
    path: /SpawnSharedAsset
    method: POST
    data_selector: none
    params: {}
- name: DestroySharedAsset
  endpoint:
    path: /DestroySharedAsset
    method: POST
    data_selector: none
    params: {}
- name: party_info
  endpoint:
    path: /PartyInfo
    method: GET
    data_selector: partyInfo
- name: party_info
  endpoint:
    path: /partyinfo
    method: GET
    data_selector: partyInfo
- name: PhysicsObject
  endpoint:
    path: /api/physicsobject
    method: GET
    data_selector: properties
    params: {}
- name: diedEvent
  endpoint:
    path: /diedEvent
    method: GET
    data_selector: records
    params: {}
- name: collidedEvent
  endpoint:
    path: /collidedEvent
    method: GET
    data_selector: records
    params: {}
- name: player
  endpoint:
    path: /player
    method: GET
    data_selector: records
- name: damagedEvent
  endpoint:
    path: /damagedEvent
    method: GET
    data_selector: player
- name: diedEvent
  endpoint:
    path: /diedEvent
    method: GET
    data_selector: player
- name: respawnedEvent
  endpoint:
    path: /respawnedEvent
    method: GET
    data_selector: player
- name: spawnedEvent
  endpoint:
    path: /spawnedEvent
    method: GET
    data_selector: player
- name: movementModeChangedEvent
  endpoint:
    path: /movementModeChangedEvent
    method: GET
    data_selector: player
- name: animationEvent
  endpoint:
    path: /animationEvent
    method: GET
    data_selector: records
- name: damagedEvent
  endpoint:
    path: /damagedEvent
    method: GET
    data_selector: records
- name: diedEvent
  endpoint:
    path: /diedEvent
    method: GET
    data_selector: records
- name: spawnedEvent
  endpoint:
    path: /spawnedEvent
    method: GET
    data_selector: records
- name: ApplyDamage
  endpoint:
    path: /ApplyDamage
    method: POST
    data_selector: records
- name: Die
  endpoint:
    path: /Die
    method: POST
    data_selector: records
- name: Spawn
  endpoint:
    path: /Spawn
    method: POST
    data_selector: records
- name: GetInteractableTarget
  endpoint:
    path: /GetInteractableTarget
    method: GET
    data_selector: trigger
    params: {}
- name: GetInventories
  endpoint:
    path: /GetInventories
    method: GET
    data_selector: inventories
    params: {}
- name: GetJoinTransferData
  endpoint:
    path: /GetJoinTransferData
    method: GET
    data_selector: transferData
    params: {}
- name: GetLeaveTransferData
  endpoint:
    path: /GetLeaveTransferData
    method: GET
    data_selector: transferData
    params: {}
- name: GetPartyInfo
  endpoint:
    path: /GetPartyInfo
    method: GET
    data_selector: partyInfo
    params: {}
- name: GetViewWorldPosition
  endpoint:
    path: /GetViewWorldPosition
    method: GET
    data_selector: viewPosition
    params: {}
- name: GetWorldPosition
  endpoint:
    path: /GetWorldPosition
    method: GET
    data_selector: worldPosition
    params: {}
- name: GrantRewardPoints
  endpoint:
    path: /GrantRewardPoints
    method: POST
    data_selector: reward
    params: {}
- name: HasPerk
  endpoint:
    path: /HasPerk
    method: GET
    data_selector: perk
    params: {}
- name: player
  endpoint:
    data_selector: records
- name: perk
  endpoint:
    path: /perks
    method: GET
    data_selector: perks
    params: {}
- name: Player
  endpoint:
    path: /players/settings
    method: GET
    data_selector: settings
    params: {}
- name: properties
  endpoint:
    path: /properties
    method: GET
    data_selector: properties
    params: {}
- name: player_transfer
  endpoint:
    path: /player/transfer
    method: GET
    data_selector: records
- name: PointLight
  endpoint:
    path: /api/pointlight
    method: GET
    data_selector: properties
    params: {}
- name: Projectile
  endpoint:
    path: /projectile
    method: GET
    data_selector: projectiles
- name: Rectangle
  endpoint:
    path: /Rectangle
    method: GET
    data_selector: properties
- name: context
  endpoint:
    path: /context
    method: GET
    data_selector: table
    params: {}
- name: scriptAssetId
  endpoint:
    path: /scriptAssetId
    method: GET
    data_selector: string
    params: {}
- name: script
  endpoint:
    path: /script
    method: GET
    data_selector: script
    params: {}
- name: SmartAudio
  endpoint:
    path: /smartaudio
    method: GET
    data_selector: properties
- name: properties
  endpoint:
    path: /api/properties
    method: GET
    data_selector: properties
    params: {}
- name: Task
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: GetStatus
  endpoint:
    path: /GetStatus
    method: GET
    data_selector: status
    params: {}
- name: repeatCount
  endpoint:
    path: /repeatCount
    method: GET
    data_selector: count
    params: {}
- name: repeatInterval
  endpoint:
    path: /repeatInterval
    method: GET
    data_selector: interval
    params: {}
- name: Terrain
  endpoint:
    path: /terrain
    method: GET
    data_selector: terrainData
- name: Transform
  endpoint:
    path: /transform
    method: GET
    data_selector: Transform
- name: Trigger
  endpoint:
    path: /api/trigger
    method: GET
    data_selector: triggers
    params: {}
- name: properties
  endpoint:
    path: /properties
    method: GET
    data_selector: properties
    params: {}
- name: screen_space
  endpoint:
    path: /uicontainer/screen_space
    method: GET
- name: world_space
  endpoint:
    path: /uicontainer/world_space
    method: GET
- name: UIEventRSVPButton
  endpoint:
    path: /uieventrsvpbutton
    method: GET
    data_selector: properties
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params: {}
- name: UIImage
  endpoint:
    path: /ui/image
    method: GET
    data_selector: properties
- name: UIPerkPurchaseButton
  endpoint:
    path: /uiperkpurchasebutton
    method: GET
    data_selector: properties
    params: {}
- name: tappedEvent
  endpoint:
    path: /tappedEvent
    method: GET
    data_selector: Event
    params: {}
- name: flickedEvent
  endpoint:
    path: /flickedEvent
    method: GET
    data_selector: Event
    params: {}
- name: touchStartedEvent
  endpoint:
    path: /touchStartedEvent
    method: GET
    data_selector: Event
    params: {}
- name: touchStoppedEvent
  endpoint:
    path: /touchStoppedEvent
    method: GET
    data_selector: Event
    params: {}
- name: pinchStartedEvent
  endpoint:
    path: /pinchStartedEvent
    method: GET
    data_selector: Event
    params: {}
- name: pinchStoppedEvent
  endpoint:
    path: /pinchStoppedEvent
    method: GET
    data_selector: Event
    params: {}
- name: rotateStartedEvent
  endpoint:
    path: /rotateStartedEvent
    method: GET
    data_selector: Event
    params: {}
- name: rotateStoppedEvent
  endpoint:
    path: /rotateStoppedEvent
    method: GET
    data_selector: Event
    params: {}
- name: progress
  endpoint:
    path: /uiprogressbar/progress
    method: GET
    data_selector: progress
- name: fillType
  endpoint:
    path: /uiprogressbar/fillType
    method: GET
    data_selector: fillType
- name: fillTileType
  endpoint:
    path: /uiprogressbar/fillTileType
    method: GET
    data_selector: fillTileType
- name: backgroundTileType
  endpoint:
    path: /uiprogressbar/backgroundTileType
    method: GET
    data_selector: backgroundTileType
- name: isHittable
  endpoint:
    path: /uiprogressbar/isHittable
    method: GET
    data_selector: isHittable
- name: UIRewardPointsMeter
  endpoint:
    path: /uirewardpointsmeter
    method: GET
    data_selector: properties
- name: UIScrollPanel
  endpoint:
    path: /uiscrollpanel
    method: GET
    data_selector: properties
    params: {}
- name: touchStartedEvent
  endpoint:
    path: /touchStartedEvent
    method: GET
    data_selector: Event
    params: {}
- name: touchStoppedEvent
  endpoint:
    path: /touchStoppedEvent
    method: GET
    data_selector: Event
    params: {}
- name: tappedEvent
  endpoint:
    path: /tappedEvent
    method: GET
    data_selector: Event
    params: {}
- name: flickedEvent
  endpoint:
    path: /flickedEvent
    method: GET
    data_selector: Event
    params: {}
- name: pinchStartedEvent
  endpoint:
    path: /pinchStartedEvent
    method: GET
    data_selector: Event
    params: {}
- name: pinchStoppedEvent
  endpoint:
    path: /pinchStoppedEvent
    method: GET
    data_selector: Event
    params: {}
- name: rotateStartedEvent
  endpoint:
    path: /rotateStartedEvent
    method: GET
    data_selector: Event
    params: {}
- name: rotateStoppedEvent
  endpoint:
    path: /rotateStoppedEvent
    method: GET
    data_selector: Event
    params: {}
- name: Vector3
  endpoint:
    path: /api/vector3
    method: GET
    data_selector: data
    params: {}
- name: Lerp
  endpoint:
    path: /vector3/lerp
    method: GET
    data_selector: result
- name: New
  endpoint:
    path: /vector3/new
    method: GET
    data_selector: result
- name: ZERO
  endpoint:
    path: /vector3/zero
    method: GET
    data_selector: result
- name: ONE
  endpoint:
    path: /vector3/one
    method: GET
    data_selector: result
- name: FORWARD
  endpoint:
    path: /vector3/forward
    method: GET
    data_selector: result
- name: UP
  endpoint:
    path: /vector3/up
    method: GET
    data_selector: result
- name: RIGHT
  endpoint:
    path: /vector3/right
    method: GET
    data_selector: result
- name: GetNormalized
  endpoint:
    path: /vector3/getnormalized
    method: GET
    data_selector: result
- name: size
  endpoint:
    path: /vector3/size
    method: GET
    data_selector: result
- name: sizeSquared
  endpoint:
    path: /vector3/sizesquared
    method: GET
    data_selector: result
- name: Vector4
  endpoint:
    path: /api/vector4
    method: GET
    data_selector: records
    params: {}
- name: Vehicle
  endpoint:
    path: /generated/tags/#vehicle
    method: GET
- name: VoiceChatChannel
  endpoint:
    path: /voicechat/channel
    method: GET
    data_selector: channel
    params: {}
- name: Weapon
  endpoint:
    path: /api/weapons
    method: GET
    data_selector: weapons
- name: projectileDrag
  endpoint:
    path: /projectileDrag
    method: GET
    data_selector: data
    params: {}
- name: muzzleFlashTemplateId
  endpoint:
    path: /muzzleFlashTemplateId
    method: GET
    data_selector: data
    params: {}
- name: outOfAmmoSoundId
  endpoint:
    path: /outOfAmmoSoundId
    method: GET
    data_selector: data
    params: {}
- name: projectileBounceCount
  endpoint:
    path: /projectileBounceCount
    method: GET
    data_selector: data
    params: {}
- name: projectilePierceCount
  endpoint:
    path: /projectilePierceCount
    method: GET
    data_selector: data
    params: {}
- name: shouldBurstStopOnRelease
  endpoint:
    path: /shouldBurstStopOnRelease
    method: GET
    data_selector: data
    params: {}
- name: spreadMin
  endpoint:
    path: /spreadMin
    method: GET
    data_selector: data
    params: {}
- name: spreadMax
  endpoint:
    path: /spreadMax
    method:
      path: /spreadMax
      method: GET
      data_selector: data
      params: {}
- name: spreadAperture
  endpoint:
    path: /spreadAperture
    method: GET
    data_selector: data
    params: {}
- name: spreadDecreaseSpeed
  endpoint:
    path: /spreadDecreaseSpeed
    method: GET
    data_selector: data
    params: {}
- name: spreadIncreasePerShot
  endpoint:
    path: /spreadIncreasePerShot
    method: GET
    data_selector: data
    params: {}
- name: spreadPenaltyPerShot
  endpoint:
    path: /spreadPenaltyPerShot
    method: GET
    data_selector: data
    params: {}
- name: WorldText
  endpoint:
    path: /worldtext
    method: GET
    data_selector: text
    params: {}
- name: GetToken
  endpoint:
    path: /GetToken
    method: GET
- name: GetTokensForOwner
  endpoint:
    path: /GetTokensForOwner
    method: GET
- name: GetContract
  endpoint:
    path: /GetContract
    method: GET
- name: GetWalletsForPlayer
  endpoint:
    path: /GetWalletsForPlayer
    method: GET
- name: GetToken
  endpoint:
    path: /assets/ethereum/{NFT_CONTRACT_ADDRESS}/{TOKEN_ID}
    method: GET
- name: GetTokens
  endpoint:
    path: /address/{SMART_CONTRACT_ADDRESS}
    method: GET
- name: BroadcastMessage
  endpoint:
    path: /chat/broadcast
    method: POST
    data_selector: resultCode
    params:
      message: string
      optionalParameters: table
- name: LocalMessage
  endpoint:
    path: /chat/local
    method: POST
    data_selector: resultCode
    params:
      message: string
- name: game_info
  endpoint:
    path: /CorePlatform.GetGameInfo
    method: GET
    data_selector: CoreGameInfo
    params: {}
- name: game_collection
  endpoint:
    path: /CorePlatform.GetGameCollection
    method: GET
    data_selector: Array[CoreGameCollectionEntry]
    params: {}
- name: player_profile
  endpoint:
    path: /CorePlatform.GetPlayerProfile
    method: GET
    data_selector: CorePlayerProfile
    params: {}
- name: game_event
  endpoint:
    path: /CorePlatform.GetGameEvent
    method: GET
    data_selector: CoreGameEvent
    params: {}
- name: game_event_collection
  endpoint:
    path: /CorePlatform.GetGameEventCollection
    method: GET
    data_selector: CoreGameEventCollection
    params: {}
- name: game_events_for_game
  endpoint:
    path: /CorePlatform.GetGameEventsForGame
    method: GET
    data_selector: CoreGameEventCollection
    params: {}
- name: registered_game_events
  endpoint:
    path: /CorePlatform.GetRegisteredGameEvents
    method: GET
    data_selector: CoreGameEventCollection
    params: {}
- name: GetGameEvent
  endpoint:
    path: /GetGameEvent
    method: GET
- name: GetGameEventsForGame
  endpoint:
    path: /GetGameEventsForGame
    method: GET
- name: GetGameInfo
  endpoint:
    path: /GetGameInfo
    method: GET
- name: GetPlayerProfile
  endpoint:
    path: /GetPlayerProfile
    method: GET
- name: GetRegisteredGameEvents
  endpoint:
    path: /GetRegisteredGameEvents
    method: GET
- name: IsPlayerRegisteredForGameEvent
  endpoint:
    path: /IsPlayerRegisteredForGameEvent
    method: GET
- name: friends
  endpoint:
    path: /coresocial/getfriends
    method: GET
    data_selector: CoreFriendCollection
- name: GetFriends
  endpoint:
    path: /GetFriends
    method: GET
    data_selector: entries
- name: IsFriendsWithLocalPlayer
  endpoint:
    path: /IsFriendsWithLocalPlayer
    method: GET
    data_selector: friends
- name: Environment
  endpoint:
    path: /environment
    method: GET
    data_selector: functions
    params: {}
- name: player
  endpoint:
    path: /Game/Players
    method: GET
    data_selector: players
    params: {}
- name: team_score
  endpoint:
    path: /Game/TeamScores
    method: GET
    data_selector: scores
    params: {}
- name: HasLeaderboards
  endpoint:
    path: /HasLeaderboards
    method: GET
    data_selector: boolean
- name: GetLeaderboard
  endpoint:
    path: /GetLeaderboard
    method: GET
    data_selector: Array<LeaderboardEntry>
- name: SubmitPlayerScore
  endpoint:
    path: /SubmitPlayerScore
    method: POST
    data_selector: None
- name: GetPlayerData
  endpoint:
    path: Storage.GetPlayerData
    method: GET
    data_selector: data
    params: {}
- name: SetPlayerData
  endpoint:
    path: Storage.SetPlayerData
    method: POST
    data_selector: resultCode
    params: {}
- name: GetSharedPlayerData
  endpoint:
    path: Storage.GetSharedPlayerData
    method: GET
    data_selector: data
    params: {}
- name: SetSharedPlayerData
  endpoint:
    path: Storage.SetSharedPlayerData
    method: POST
    data_selector: resultCode
    params: {}
- name: GetOfflinePlayerData
  endpoint:
    path: Storage.GetOfflinePlayerData
    method: GET
    data_selector: data
    params: {}
- name: GetConcurrentPlayerData
  endpoint:
    path: Storage.GetConcurrentPlayerData
    method: GET
    data_selector: data
    params: {}
- name: SetConcurrentPlayerData
  endpoint:
    path: Storage.SetConcurrentPlayerData
    method: POST
    data_selector: resultCode
    params: {}
- name: ConnectToConcurrentPlayerDataChanged
  endpoint:
    path: Storage.ConnectToConcurrentPlayerDataChanged
    method: CONNECT
    data_selector: eventListener
    params: {}
- name: HasPendingSetConcurrentPlayerData
  endpoint:
    path: Storage.HasPendingSetConcurrentPlayerData
    method: GET
    data_selector: boolean
    params: {}
- name: GetSharedPlayerData
  endpoint:
    path: /GetSharedPlayerData
    method: GET
    data_selector: returnTable
    params: {}
- name: SetPlayerData
  endpoint:
    path: /SetPlayerData
    method: POST
    data_selector: resultCode
    params: {}
- name: SetSharedPlayerData
  endpoint:
    path: /SetSharedPlayerData
    method: POST
    data_selector: resultCode
    params: {}
- name: SizeOfCompressedData
  endpoint:
    path: /SizeOfCompressedData
    method: GET
    data_selector: compressedSize
    params: {}
- name: AreTeamsEnemies
  endpoint:
    path: /api/teams/areTeamsEnemies
    method: GET
    data_selector: results
- name: AreTeamsFriendly
  endpoint:
    path: /api/teams/areTeamsFriendly
    method: GET
    data_selector: results
- name: SetTeamMode
  endpoint:
    path: /api/teams/setTeamMode
    method: POST
    data_selector: result
- name: GetTeamMode
  endpoint:
    path: /api/teams/getTeamMode
    method: GET
    data_selector: result
- name: coreModalChangedEvent
  endpoint:
    path: /events/UI.coreModalChangedEvent
    method: GET
    data_selector: Event
    params: {}
- name: voice_chat
  endpoint:
    path: /voicechat
    method: GET
    data_selector: channels
    params: {}
- name: GetVoiceChatMethod
  endpoint:
    path: /voicechat/method
    method: GET
    data_selector: method
    params: {}
- name: IsPlayerSpeaking
  endpoint:
    path: /voicechat/player/speaking
    method: GET
    data_selector: speakingStatus
    params: {}
- name: SetVoiceChatMode
  endpoint:
    path: /voicechat/mode/set
    method: POST
    data_selector: modeStatus
    params: {}
- name: GetVoiceChatMode
  endpoint:
    path: /voicechat/mode
    method: GET
    data_selector: currentMode
    params: {}
- name: CoreObject
  endpoint:
    path: /World/CoreObject
    method: GET
    data_selector: objects
    params: {}
- name: HitResult
  endpoint:
    path: /World/HitResult
    method: GET
    data_selector: results
    params: {}
- name: Object
  endpoint:
    path: /World/Object
    method: GET
    data_selector: objects
    params: {}
- name: Vector3
  endpoint:
    path: /World/Vector3
    method: GET
    data_selector: vectors
    params: {}
- name: Rotation
  endpoint:
    path: /World/Rotation
    method: GET
    data_selector: rotations
    params: {}
- name: SpawnAsset
  endpoint:
    path: /SpawnAsset
    method: GET
    data_selector: results
    params: {}
- name: Spherecast
  endpoint:
    path: /Spherecast
    method: GET
    data_selector: results
    params: {}
- name: SpherecastAll
  endpoint:
    path: /SpherecastAll
    method: GET
    data_selector: results
    params: {}
notes:
- For editors where we do not provide our own editor extensions, we supply a JSON
  dump of our API that can be used to create one.
- A statically linked binary with all deps included is available on GitHub
- We provide a .luacheckrc settings file with all Core API so they don't show up as
  undeclared global variables
- If you're having problems downloading or installing Core, please contact Customer
  Support.
- Core includes a player controller and third-person camera out of the box.
- Multiplayer networking is also included in all Core projects.
- Instead of 5.1 as in WoW, Core uses Lua 5.3.6.
- Core does have `print` but it prints to the Event Log instead of the chat frame.
- Core projects are saved in local files on the PC where they are created, and are
  not backed up when they are saved or published.
- To protect these project files, there are multiple ways of uploading your project
  to a cloud drive or even storing it on a portable hard drive.
- Currently, Creator Analytics is only available to members of the Creator Payouts
  Program.
- The earliest data available will be from October 2020 for creators who joined the
  Payouts Program before October 2020.
- The Core Editor does not need every file in the folder to open a project.
- The 'New repository...' option will not work for an existing project.
- The 'New repository...' option will not work for an existing project. Although the
  Menu option looks identical to the menu that you are redirected to you, the 'New
  repository...' choice will create a folder inside of your project, and only keep
  track of things that are inside that folder.
- GitHub Desktop allows you to easily use Git and GitHub for saving changes to a project.
- The Pickup Truck template must be deinstanced to modify its properties.
- Background ambience and music is best suited to have spatialization and attenuation
  disabled.
- Bindings can be enabled or disabled at startup by clicking on the checkbox in the
  Enable column of the Bindings Manager window.
- Deleted Binding Sets can be restored by viewing the list of deleted Binding Sets.
- Players need to link their MetaMask wallet to their Core account.
- Cameras capture and display the world, they are the eye of the player and can be
  set up in many ways.
- Core will automatically add a Third Person Camera to the Hierarchy under Game Settings.
- Cameras can override other cameras using the SetOverrideCamera function.
- Creators can have 1 concurrent player key per game, up to 16 concurrent shared player
  keys, and up to 16 concurrent creator keys.
- There is no request limit for reads, but they are requested a lot they will end
  up cached and might be a few seconds out of date.
- For writing, any single data has a limit of about 8 writes a second across all servers.
- Time is continuous for curves and getting the value at 100 on a curve with a range
  of 0 - 3 would automatically do the calculations to get the correct value based
  on its In/Out values.
- Custom Properties allow game creators to assign values like numbers, colors, and
  references to other objects as a part of one object, template, or script.
- The Damageable Object streamlines damage and destroying objects.
- No scripting is needed to damage an object and destroy it.
- Debris Physics is only available in a Client Context.
- Not all Static Mesh support Debris Physics.
- An Event is something that happens. The source of the event can be many things,
  from an object, broadcast, to even Player input.
- A Hook is like an event, but the purpose is to view or change something that's already
  going on.
- Functions in the Events namespace that communicate across the network have rate
  limits in place.
- Each of the functions return a BroadcastEventResultCode and error message.
- Enable Player Storage setting is necessary to save player's levels, gold, and equipment.
- The ResourcePersisterServer script keeps track of players' gold, even when they
  disconnect and reconnect later.
- The EquipmentPersistentStarterServer gives players the same weapons they had last
  when they disconnect and reconnect.
- Creators in the Perks Program can create 15 current and future events per game.
- Non-Perks Program creators can create 5 total events.
- Players can register for events from the Events page.
- Event image can be uploaded or default image can be used.
- IK Anchors are a system for modifying player animations.
- Players can be animated by setting their animationStance property, or by creating
  an Ability.
- The Interaction System works only in a Client Context, which means any change made
  or object spawned will only be visible to the player doing the interaction.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Game ID is required to use Game Portal and Player Transfer methods.
- Dynamic objects can only exist in contexts that are modifiable.
- Each Leaderboard can only have one entry per player.
- The maximum entries on a Leaderboard must be between 10 and 100 entries.
- One project can have up to 100 Leaderboards.
- Combined, Leaderboards in a project can have up to 1000 total entries.
- You can add a string of up to 8 characters of additional data as a fourth parameter.
- Smart Materials are enabled by default on materials that have repeating patterns.
- Z-fighting may occur with different materials layered over each other.
- Account limit of 1,000 images or 104 MB, whichever is hit first.
- Individual images have a 5 MB limit.
- Currently, some special effects materials do not behave the same way when merged,
  so you may want to separate them from your Merged Model.
- Device preview only works in editor and local preview mode.
- Multiplayer preview mode is currently not supported.
- Only landscape mode is supported for now.
- Testing in Local Preview Mode will not work.
- Dormant By Default property when enabled will only use network bandwidth when created
  or when forced by a Lua API call.
- Disabling a networked object's replication means that the server will not be checking
  to see if the object has changed.
- The Performance Rating system is only an estimation, and there will always be some
  difference in the way the game actually runs on other computers with varying hardware
  specs.
- This window only serves to give an estimation of performance on other computers,
  and should not be the only factor considered when thinking about how the game might
  actually run on players' computers.
- Storage is not enabled by default, and must be turned on for any project that will
  use shared data tables.
- Storage is available in a read-only format for players who are offline as well.
- Physics Objects come with a child ClientContext that has a mesh shape.
- Enable Play Mode Profiler in Game Settings to access performance data.
- Press F4 to activate or deactivate the Profiler View.
- Server-side data is for Game-thread only, so all Render thread data is blank.
- Due to the variable amount of Memory associated with Server pod instances depending
  on the number of Max Players for the game, the Memory counters show a percentage
  and not absolute MB values.
- Since the Server has a fixed tick rate of 30 ticks per second, the Frame time will
  hover around the 33 ms mark even though the Game thread time might be much less.
- Queues allow creators to design games that are best played with a specific minimum
  number of players, without making the players wait around for more people to play.
- Support for up to 64 scenes per project.
- Maximum total size of a game is 500 Megabytes.
- Maximum size of a scene is 100 Megabytes.
- All assets in the scene being duplicated will be copied over to the new scene.
- Only scenes that have been saved can be revealed in the explorer.
- The script needs to be a child of the Trigger because the code tries to reference
  the Trigger as the parent.
- Shared storage allows creators to use persistent player data across multiple Core
  games.
- Storage must be enabled in project settings to use shared data tables.
- Spawned shared assets need to be spawned into a networked Static Context, otherwise,
  an error will occur if called on a non-networked Static Context or a Static Context
  that is a descendant of a Client Context or Server Context.
- Default team mode is Friendly — players cannot damage each other.
- Templates are reusable packages in Core that can be modified across projects.
- The Terrain Creator is used to generate large landscapes.
- Heightmap images need to be square gray-scaled .png images.
- 'The Terrain Generator will only accept heightmap images of the following sizes:
  128 x 128, 256 x 256, 512 x 512, 1024 x 1024.'
- Weightmap images need to square .png images.
- Triggers are CoreObjects that detect collision with a player without actually preventing
  players from walking through them.
- The total budget for captures is 8 megapixels (8,388,608 pixels).
- Creators may release existing capture instances when they are no longer needed.
- Capturing images needs to be done from a Lua script.
- The Capture function may return nil if the total budget (8,388,608 pixels) is reached.
- The UI Text Entry Box allows creators to provide a way for players to enter text.
- Max Speed divided by Acceleration is an estimate of how long it takes to get to
  full speed.
- All new projects created have Voice Chat enabled by default with the Voice Chat
  Mode property set to All.
- Jump in and build a game using Core's Deathmatch framework.
- The Battle Royale framework features starting logic for game where the player must
  skydive to a starting location, the play area shrinks over time, and the last player
  standing wins.
- Players spawn on the ground.
- The Play Zone will shrink over time.
- This tutorial is not about the game of Tic Tac Toe itself, but how to add an AI
  entity to use the game state and strategy API, as a live opponent.
- The player always gets to move first.
- The AI waits for 2 seconds before making its move.
- Players need to disable all generators to make the boss vulnerable.
- Boss tracks players entering the perimeter.
- The health bar updates when the boss receives damage.
- The OnDamaged function will fire when the boss receives damage.
- Objects such as effects, sounds, and UI do not need to be synced up between clients.
- The visibility property for the Transition panel needs to be set to Inherit from
  Parent.
- Fade duration controls how long the fade will take.
- Due to mobile devices having lower capacity for graphics and memory, there are limitations
  to Core games published for mobile devices.
- The Object Count Limit is reduced from 30,000 to 10,000 and the Quality Preset is
  forced to Low.
- In this tutorial, you will be learning the benefits of using Local Context for your
  game to help you improve networking performance.
- Local Context allows you to improve networking performance for your game, which
  will improve the player experience.
- Core uses the Lua programming language, which has the advantage of being beginner-friendly
  but suitable for advanced programming projects.
- Lua requires functions to be declared on a line before any line that calls them.
- The race manager server script handles race management and player positioning.
- Uses Core functions to manage race timer and UI updates.
- The leaderboard will only update the entry if it's a lower time than any of the
  other times.
- This script handles a few different things for the player.
- Letting them know when to go (with audio cue).
- Networked Objects are the most expensive type of object.
- The chest animation should work properly and only show for the player that interacted
  with the trigger.
- Test the pets in multiplayer mode to ensure networking is synced.
- 'Completion Time: ~20 minutes'
- 'Knowledge Level: No previous knowledge.'
- Testing network dormancy needs to be done in multiplayer preview.
- Updating objects only when they need to be updated allows for a more relaxed approach
  to networked objects that are dormant.
- NFTs in the collection are lazy minted, there isn't a way to get all NFTs from a
  collection due to the contract address being a global address for lazy minted NFTs.
- Use contract address 0x495f947276749ce646f68ac8c248420045cb7b5e for fetching NFTs.
- Ensure contractAddress is set correctly for fetching tokens.
- Player storage allows players to retain progress between sessions.
- Camera icon becomes disabled and then enabled again.
- Syncing up background images between players isn't too important.
- The preview UI cannot be opened until a photo has been taken.
- The preview UI can be opened and closed after taking a photo.
- Test the game to make sure the icons can be dragged into the bag and the score increases.
- Images uploaded to the Media Library are shared across all projects.
- Uses Core's built-in resources for visual effects
- 'Completion Time: ~30 minutes'
- 'Knowledge Level: No knowledge absolutely required, but would be easier to understand
  with a grasp on Lua and completion of the first Weapons tutorial'
- Ability durations can be adjusted in the Properties window.
- The WeaponAim and WeaponDamage scripts must be added to the weapon object.
- Enable Networking to allow the trigger to work properly.
- Use various pre-built weapons from Core Content to create custom weapons.
- Ensure visual effects and audio are properly set up for a better gameplay experience.
- Importing animations is not supported, but custom animations can be created for
  the player's character by using IK Anchors.
- This animation does not have a looping cast animation. Does not scale with execution
  phase duration. Moves the player forward with root motion.
- Supports variable cast phase time. Supports time-stretched execute phase time.
- Currently does NOT support a variable cast phase time. Currently does NOT support
  a time-stretched execute phase time.
- Not all players have access to all emotes, but can purchase them through the Shop
  and unlock them through quests.
- The `canBePrevented` property is usually true in this game, but in this special
  case it has been configured as false.
- The ability's targeting data can be generated programmatically.
- For dynamic spread angle to work, select the Shoot ability and disable its 'Is Target
  Data Updated' in the execute phase.
- Basic game loop with lobby, round, and game over implemented using the AI Activity
  component.
- Metadata about a smart contract on the blockchain.
- The .hasMoreResults property may be checked to determine whether more wallets are
  available.
- Some properties are deprecated.
- The total budget is 8 megapixels (8,388,608 pixels).
- Creators may wish to explicitly release existing capture instances when they are
  no longer needed.
- Pagination is handled using hasMoreResults and GetMoreResults functions.
- Represents a single friend in a CoreFriendCollection.
- Events can be Active or Scheduled.
- Events can also be in a 'Canceled' state, but we ignore those.
- Camera is not allowed to collide with this mesh
- Children are automatically destroyed when their parent is destroyed.
- The timer for lifespans is set when the lifeSpan property is changed.
- DamageableObject is a CoreObject which implements the Damageable interface.
- Damageable objects can implement various behaviors based on events like damage and
  death.
- Equipment is a CoreObject representing an equippable item for players.
- EventListeners are returned by Events when you connect a listener function to them.
- Disconnect to prevent memory leaks when the listener is no longer needed.
- Default priority value is 100
- IKAnchors can be used to control player animations.
- The minimum speed the player has to be moving at for the IK anchors to be activated
  is 500.
- The lean angle when running is 15 degrees.
- Contains information about weapon interactions such as collision with a character.
- Dynamic properties may yield warnings if specified incorrectly.
- Requires setup of inventory template for dropping items
- Light is a light source that is a CoreObject.
- Contains data about a party, returned by Player:GetPartyInfo()
- Example code demonstrates portal functionality for party members.
- Physics Objects are also of type Damageable.
- Client-side scripts may affect performance if not managed properly.
- Player data is often sensitive and should be handled securely.
- Perks are a system to create in-game purchases that allow players to support game
  creators and enable exclusive content.
- The Player Settings object determines a player's movement, camera and other such
  properties.
- PlayerStart is a CoreObject representing a spawn point for players.
- Works best when the game is published.
- Projectile is a specialized Object which moves through the air in a parabolic shape
  and impacts other objects.
- Projectiles have a default radius of 22 and length of 44.
- The projectile's impact behavior can be customized with properties like bouncesRemaining
  and shouldDieOnImpact.
- Projectiles have a field to report what ability spawned them.
- If the projectile is fired by a weapon, then the weapon automatically populates
  the sourceAbility property.
- 'See also: Rotation.New'
- 'See also: Vector3.New'
- Set the initial state of the UI to 'disabled'
- Task is a representation of a Lua thread. It could be a Script initialization, a
  repeating Tick() function from a Script, an EventListener invocation, or a Task
  spawned directly by a call to Task.Spawn().
- TreadedVehicle is a Vehicle with treads, such as a tank or a tonk.
- Loop over time. Spawn a cube every 30ms
- Triggers are invisible and non-colliding CoreObjects.
- Uses safe area limits for UI placement on devices.
- Most of the UI components inherit from UI Control and have all its properties.
- Client-Only events can be fired based on user interactions.
- Fires events related to touch interactions.
- Defaults to Orientation.VERTICAL for scrolling direction.
- isInteractable property defaults to true.
- Client-Only API for UI interaction
- A three-component vector that can represent a position or direction.
- 'Last update: January 13, 2022'
- Messages sent from the server have a rate limit of 10 messages per second.
- Maximum message length is 280 characters.
- There is no rate limit for local messages.
- The pagination aspect of the friend collection should be considered when designing
  the user interface.
- The maximum size a networked event can send is 128 bytes and all networked events
  are subjected to a rate limit of 10 events per second.
- Core storage allows a maximum of 32Kb (32768 bytes) of encoded data to be stored.
- Any data exceeding this limit is not guaranteed to be stored and can potentially
  cause loss of stored data.
- Exceeding the limit will cause a warning to be displayed in the event log when in
  preview mode.
- Client-Only
- Voice chat settings can be changed dynamically during gameplay.
errors:
- If creators exceed the limit, then the writes will start queuing up and could start
  timing out.
- 'BroadcastToAllPlayers: Rate limited to 10 per second.'
- 'BroadcastToServer: Rate limited to 10 per second.'
- 'BroadcastToPlayer: Rate limited to 10 per second.'
- 'EVENT_LIMIT_EXCEEDED: A game can only have one scheduled event.'
- 'EVENT_LENGTH_EXCEEDED: Maximum event length is 24 hours for non-Perks creators.'
- 'Attempted to modify a field on a non-networked object: Make the object networked
  or put it into a context.'
- '400 Bad Request: Check the request parameters'
- '404 Not Found: The requested resource does not exist'
- 'BlockchainTokenResultCode.SUCCESS: Indicates successful operation.'
- Requests may return nil if the hasMoreResults property is false, or if an error
  occurs while fetching data.
- '400 Bad Request: Check the parameters passed to the function.'
- '404 Not Found: Ensure the item or inventory exists.'
- '500 Internal Server Error: Retry the request after some time.'
- 'BroadcastEventResultCode.EXCEEDED_SIZE_LIMIT: Event size exceeds limit'
- 'BroadcastEventResultCode.EXCEEDED_RATE_LIMIT: Rate limit exceeded'
auth_info:
  mentioned_objects:
  - Pet
  - Reward
  - BlockchainToken
  - BlockchainTokenResultCode
  - CoreSocial
  - CoreFriendCollection
client:
  base_url: https://www.coregames.com
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
