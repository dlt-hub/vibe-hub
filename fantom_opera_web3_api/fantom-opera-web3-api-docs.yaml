resources:
- name: transfer
  endpoint:
    path: /transfer
    method: POST
- name: transferWithParams
  endpoint:
    path: /transferWithParams
    method: POST
- name: Opera
  endpoint:
    path: /
    method: GET
- name: Opera Testnet
  endpoint:
    path: /
    method: GET
- name: Ethereum
  endpoint:
    path: /app-catalog/ethereum
    method: GET
- name: FTM
  endpoint:
    path: /accounts/ftm
    method: GET
- name: staking
  endpoint:
    path: /staking
    method: GET
- name: beethoven_x
  endpoint:
    path: /staking/beethoven_x
    method: GET
    data_selector: records
- name: ankr_protocol
  endpoint:
    path: /staking/ankr_protocol
    method: GET
    data_selector: records
- name: verify_contract
  endpoint:
    path: /verifyContract
    method: POST
    data_selector: result
    params: {}
- name: verify_contract
  endpoint:
    path: /verifyContract
    method: POST
    data_selector: result
- name: unit_test_contract_hardhat
  endpoint:
    path: /unittestexample-hardhat
    method: GET
    data_selector: examples
- name: unit_test_contract_truffle
  endpoint:
    path: /unittestexample-truffle
    method: GET
    data_selector: examples
- name: Variable-Cap Asset
  endpoint:
    path: /build-on-opera/tutorials/create-variable-cap-asset
    method: POST
    data_selector: records
- name: Variable-Cap Asset
  endpoint:
    path: /build-on-opera/tutorials/create-variable-cap-asset
    method: GET
- name: supported_token_pairs_mainnet
  endpoint:
    path: /api/supported_token_pairs/mainnet
    method: GET
    data_selector: pairs
    params: {}
- name: supported_token_pairs_testnet
  endpoint:
    path: /api/supported_token_pairs/testnet
    method: GET
    data_selector: pairs
    params: {}
- name: price_data
  endpoint:
    path: /api/v1/prices
    method: GET
    data_selector: data
    params: {}
- name: getReferenceData
  endpoint:
    path: /getReferenceData
    method: GET
- name: getReferenceDataBulk
  endpoint:
    path: /getReferenceDataBulk
    method: GET
- name: getReferenceData
  endpoint:
    path: /getReferenceData
    method: POST
    data_selector: rate
- name: getReferenceDataBulk
  endpoint:
    path: /getReferenceDataBulk
    method: POST
    data_selector: rate
- name: rpc
  endpoint:
    path: /
    method: POST
- name: graphql
  endpoint:
    path: /graphql
    method: POST
- name: transaction_tracing
  endpoint:
    path: /rpcapi-tracing
    method: POST
- name: RPC
  endpoint:
    path: /
    method: GET
- name: GraphQL
  endpoint:
    path: https://xapi.fantom.network/
    method: GET
- name: WS
  endpoint:
    path: wss://fantom-testnet.public.blastapi.io/
    method: GET
- name: Transaction Tracing
  endpoint:
    path: https://rpcapi-tracing.testnet.fantom.network
    method: GET
- name: trace_block
  endpoint:
    path: /trace_block
    method: POST
    data_selector: Object
- name: trace_transaction
  endpoint:
    path: /trace_transaction
    method: POST
    data_selector: Object
- name: trace_filter
  endpoint:
    path: /trace_filter
    method: POST
    data_selector: Object
- name: trace_get
  endpoint:
    path: /trace_get
    method: POST
    data_selector: Object
- name: debug_traceBlockByNumber
  endpoint:
    path: /debug_traceBlockByNumber
    method: POST
    data_selector: Object
- name: debug_traceBlockByHash
  endpoint:
    path: /debug_traceBlockByHash
    method: POST
    data_selector: Object
- name: debug_traceTransaction
  endpoint:
    path: /debug_traceTransaction
    method: POST
    data_selector: Object
- name: trace_block
  endpoint:
    path: /build-on-opera/api/transaction-tracing#trace_block
    method: POST
    data_selector: Object
    params: {}
- name: trace_transaction
  endpoint:
    path: /build-on-opera/api/transaction-tracing#trace_transaction
    method: POST
    data_selector: Object
    params: {}
- name: trace_filter
  endpoint:
    path: /build-on-opera/api/transaction-tracing#trace_filter
    method: POST
    data_selector: Object
    params: {}
- name: trace_get
  endpoint:
    path: /build-on-opera/api/transaction-tracing#trace_get
    method: POST
    data_selector: Object
    params: {}
- name: debug_traceBlockByNumber
  endpoint:
    path: /build-on-opera/api/transaction-tracing#debug_traceBlockByNumber
    method: POST
    data_selector: Object
    params: {}
- name: debug_traceBlockByHash
  endpoint:
    path: /build-on-opera/api/transaction-tracing#debug_traceBlockByHash
    method: POST
    data_selector: Object
    params: {}
- name: debug_traceTransaction
  endpoint:
    path: /build-on-opera/api/transaction-tracing#debug_traceTransaction
    method: POST
    data_selector: Object
    params: {}
- name: Contracts
  endpoint:
    path: /build-on-opera/providers/contracts
    method: GET
- name: Gas Monetization Program
  endpoint:
    path: /funding/gas-monetization
    method: GET
- name: Quarterly Bonus
  endpoint:
    path: /funding/gas-monetization#quarterly-bonus
    method: GET
- name: Gas Monetization Program
  endpoint:
    path: /funding/gas-monetization
    method: GET
- name: validator_parameters
  endpoint:
    path: /run-a-node/mainnet/run-validator-node
    method: GET
    data_selector: parameters
    params: {}
- name: sfc_contract
  endpoint:
    path: /address/0xfc00face00000000000000000000000000000000
    method: GET
    data_selector: contract_info
    params: {}
- name: validator_registration
  endpoint:
    path: /sfc/createValidator
    method: POST
    data_selector: registration_status
    params:
      pubkey: <your public key>
      stake: <minimal stake>
- name: validator_id
  endpoint:
    path: /sfc/getValidatorID
    method: GET
    data_selector: validator_id
    params: {}
- name: pruned_api_node
  endpoint:
    path: /run-api-node/pruned
    method: POST
    data_selector: data
    params: {}
- name: archive_api_node
  endpoint:
    path: /run-api-node/archive
    method: POST
    data_selector: data
    params: {}
- name: pruned_api_node
  endpoint:
    path: /run-a-node/mainnet/run-api-node
    method: GET
    data_selector: node
    params: {}
- name: archive_api_node
  endpoint:
    path: /run-a-node/mainnet/run-api-node
    method: GET
    data_selector: node
    params: {}
- name: validator_wallet
  endpoint:
    path: /run-a-node/testnet/run-validator-node
    method: POST
    data_selector: wallet
    params: {}
- name: validator_key
  endpoint:
    path: /run-a-node/testnet/run-validator-node
    method: POST
    data_selector: validator_key
    params: {}
- name: validator_parameters
  endpoint:
    path: /run-a-node/testnet/validator-parameters
    method: GET
    data_selector: parameters
- name: network_settings
  endpoint:
    path: /run-a-node/testnet/network-settings
    method: GET
    data_selector: settings
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: validator
  endpoint:
    path: /validator/id
    method: GET
    data_selector: validatorID
- name: validator_id
  endpoint:
    path: /getValidatorID
    method: GET
    data_selector: response
    params: {}
- name: unlock_wallet
  endpoint:
    path: /unlockAccount
    method: POST
    data_selector: response
    params: {}
- name: register_validator
  endpoint:
    path: /createValidator
    method: POST
    data_selector: response
    params: {}
- name: check_transaction
  endpoint:
    path: /getTransactionReceipt
    method: GET
    data_selector: response
    params: {}
- name: ChangedValidatorStatus
  endpoint:
    path: /ChangedValidatorStatus
    method: event
    data_selector: inputs
    params: {}
- name: ClaimedRewards
  endpoint:
    path: /ClaimedRewards
    method: event
    data_selector: inputs
    params: {}
- name: CreatedValidator
  endpoint:
    path: /CreatedValidator
    method: event
    data_selector: inputs
    params: {}
- name: DeactivatedValidator
  endpoint:
    path: /DeactivatedValidator
    method: event
    data_selector: inputs
    params: {}
- name: Delegated
  endpoint:
    path: /Delegated
    method: event
    data_selector: inputs
    params: {}
- name: LockedUpStake
  endpoint:
    path: /LockedUpStake
    method: event
    data_selector: inputs
    params: {}
- name: OwnershipTransferred
  endpoint:
    path: /OwnershipTransferred
    method: event
    data_selector: inputs
    params: {}
- name: RestakedRewards
  endpoint:
    path: /RestakedRewards
    method: event
    data_selector: inputs
    params: {}
- name: Undelegated
  endpoint:
    path: /Undelegated
    method: event
    data_selector: inputs
    params: {}
- name: UnlockedStake
  endpoint:
    path: /UnlockedStake
    method: event
    data_selector: inputs
    params: {}
- name: UpdatedBaseRewardPerSec
  endpoint:
    path: /UpdatedBaseRewardPerSec
    method: event
    data_selector: inputs
    params: {}
- name: UpdatedOfflinePenaltyThreshold
  endpoint:
    path: /UpdatedOfflinePenaltyThreshold
    method: event
    data_selector: inputs
    params: {}
- name: UpdatedSlashingRefundRatio
  endpoint:
    path: /UpdatedSlashingRefundRatio
    method: event
    data_selector: inputs
    params: {}
- name: Withdrawn
  endpoint:
    path: /Withdrawn
    method: event
    data_selector: inputs
    params: {}
- name: get_validator_id
  endpoint:
    path: /getValidatorID
    method: GET
    data_selector: validator_id
    params: {}
- name: unlock_validator_wallet
  endpoint:
    path: /unlockAccount
    method: POST
    data_selector: unlock_status
    params: {}
- name: register_validator
  endpoint:
    path: /createValidator
    method: POST
    data_selector: registration_status
    params: {}
- name: check_registration_transaction
  endpoint:
    path: /getTransactionReceipt
    method: GET
    data_selector: transaction_receipt
    params: {}
- name: USDC
  endpoint:
    path: /technology/stablecoin
    method: GET
    data_selector: USDC.e
    params: {}
- name: USDC
  endpoint:
    path: /technology/stablecoin
    method: GET
    data_selector: data
    params: {}
- name: transaction_service
  endpoint:
    path: /api/transaction
    method: GET
notes:
- Users will be able to unlock their staked FTM and bridge immediately to Sonic following
  a 24-hour withdrawal waiting period.
- Use RPC URL for accessing the network.
- No minimum stake, no mandatory lock-up period, and liquid staking services
- There is a seven-day unbonding period when you unstake your FTM
- Smart contracts are written in Solidity and can function on Opera as they do on
  Ethereum.
- FTM tokens are required to pay gas fees when deploying smart contracts.
- FTM for gas costs is required for deploying smart contracts.
- Ensure to create a scan API key from FTMScan.
- Ensure to create an API key from FTMScan before using the API.
- Fixed-cap assets are fungible tokens for which the supply is determined at the time
  of asset creation.
- Openzeppelin provides a library to create an upgradeable proxy pattern called TransparentUpgradeableProxy.
- Uses TransparentUpgradeableProxy for upgradeable proxy pattern.
- FTMScan can’t support a verified diamond proxy and its logic smart contracts.
- Louper supports the Opera mainnet and testnet.
- FTMScan can’t support a verified diamond proxy and its logic smart contracts
- Louper supports the Opera mainnet and testnet
- dAPIs offer security, transparency, cost-efficiency, and scalability in a turn-key
  package.
- 'Chain ID: 4002'
- 'Symbol: FTM'
- 'Explorer: https://testnet.ftmscan.com/'
- If an error is non-empty, all other fields should be ignored.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Approval to the Gas Monetization program is at our discretion.
- The quarterly bonus comes from the 15% deducted from transaction fees of apps not
  participating in Gas Monetization.
- Storing wallets on managed servers is not recommended, and it is advised to use
  only unmanaged servers for running validator nodes.
- 'Minimum Stake: 50,000 FTM.'
- 'Maximum Validator Size: 15x the self-stake amount.'
- 'Rewards: Currently ~6% APR (normal APR for self-stake + 15% of delegators'' rewards).'
- Validator requires a minimum stake of 50,000 FTM
- 1 TB of local SSD/NVMe storage is needed for a pruned DB
- 6 TB of local SSD/NVMe is needed for a full-size datadir
- Uses a validator signing key for registration and operation.
- Node must be synchronized with the network before starting.
- Node should not be forcefully terminated to avoid database corruption.
- You must unlock the validator signing key to restart your node.
- If your node is offline for more than 5 days, your validator wallet may be suspended.
- Requires setup of connected app in api
- Use local NVMe storage for better performance
- Recommended to use a dedicated hardware for best performance.
- Minimum requirement for pruned node is 1.2 TB local NVMe storage.
- 'Minimum stake: 50,000 FTM.'
- 'Minimum hardware requirements: AWS EC2 m5.large with 8GB RAM, 2 vCPUs, and at least
  300 GB of Amazon EBS General Purpose SSD (gp3) storage.'
- Minimum stake is 50,000 FTM.
- Use AWS EC2 m5.large with 8GB RAM, 2 vCPUs, and at least 300 GB of EBS storage.
- Some objects like Contact may return nulls in deeply nested fields
- Make sure to check your registration transaction (could take a few moments to be
  confirmed)
- 'Look for the status: “0x1” at the bottom, which means the transaction was successful'
- 'Minimum hardware requirements: AWS EC2 m5.large with 8GB RAM, 2 vCPUs, and at least
  300GB of Amazon EBS General Purpose SSD (gp2) storage (or equivalent).'
- We would recommend going with Ubuntu Server 22.04 LTS (64-bit).
- 'When using version 1.1.3, you need to add the db.preset argument (introduced since
  1.1.2) to the starting Opera command. For standard conditions, please use this option:
  db.preset=ldb-1.'
- If your validator node is down for more than 5 days, then it will become offline
  (i.e. pruned from the network).
- To shut down a node permanently, you can simply stop running the node in validator
  mode for 5 days or more.
- 'If your node is in a dirty state (it may happen occasionally), please run: opera
  --db.preset legacy-ldb db heal --experimental'
- 'Check your machine specs if it meets the minimum requirements: IOPS greater than
  5000, Connection speed > 1 Gbps, Cores: More than 4 cores, CPU: > 3 GHz.'
- You can also increase the value of ulimit on your machine.
- 'Look for the status: ''0x1'' at the bottom, which means the transaction was successful'
- 'Recommended OS: Ubuntu Server 22.04 LTS (64-bit).'
- When using version 1.1.3, you need to add the db.preset argument to the starting
  Opera command.
- Live pruning allows validators to operate continuously without going offline.
- 'Live pruning works by splitting the database into two types: LiveDB and ArchiveDB.'
- Validators can use live pruning without going offline.
- Opera's canonical stablecoin is USDC.e, supported by Circle and Wormhole.
- Opera is our mainnet, a fully decentralized blockchain network with smart contract
  support.
- The Opera chain went live on December 27, 2019.
- Opera is fully compatible with the Ethereum Virtual Machine (EVM) and supports Web3JS
  API and RPC.
- Developers should build on the Opera chain due to its impressive performance, scalability,
  and low transaction costs.
- Due to the caching mechanism, transaction nonces can become unsynchronized.
errors:
- 'Invalid API Key: Check if the API key is correct'
- 'Contract Not Found: Verify the contract address'
- 'API_KEY_REQUIRED: An API key must be provided in the request.'
- 'Invalid Stake: Ensure you meet the minimum stake requirement'
- 'Insufficient Storage: Ensure you have enough local SSD/NVMe storage'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- If using a non-local storage, latency may affect performance.
- Ensure firewall allows TCP and UDP traffic on port 5050.
- 'REQUEST_FAILED: Check your network configuration.'
- 'INVALID_PARAMS: Ensure you are providing correct parameters.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- If undelegating a locked stake or locked delegation before the locked period has
  expired, it will incur a penalty.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://fantom.foundation
  auth:
    type: oauth2
source_metadata: null
