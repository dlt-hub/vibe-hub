resources:
- name: Person
  endpoint:
    path: /data/Person
    method: GET
    data_selector: records
    params: {}
- name: bookinfo
  endpoint:
    path: /data/bookinfo
    method: GET
    data_selector: records
    params: {}
- name: results
  endpoint:
    path: /data/results
    method: GET
    data_selector: records
    params: {}
- name: user_service
  endpoint:
    path: /users/login
    method: POST
    data_selector: data
- name: database_api
  endpoint:
    path: /data
    method: GET
    data_selector: records
- name: retrieve_subscription_status
  endpoint:
    path: /retrieveSubscriptionStatus
    method: GET
- name: cancel_subscription
  endpoint:
    path: /cancelSubscription
    method: POST
- name: retrieve_subscription_status
  endpoint:
    path: /manage/subscription/status
    method: GET
- name: cancel_subscription
  endpoint:
    path: /manage/subscription/cancel
    method: POST
- name: retrieve_subscription_status
  endpoint:
    path: /commerce/googleplay/[packageName]/subscription/[subscriptionId]/purchases/[token]
    method: GET
    data_selector: GooglePlaySubscriptionStatus
    params: {}
- name: cancel_subscription
  endpoint:
    path: /commerce/googleplay/[packageName]/subscription/[subscriptionId]/purchases/[token]/cancel
    method: POST
    data_selector: ''
    params: {}
- name: User Registration
  endpoint:
    path: /users/register
    method: POST
    data_selector: user
    params: {}
- name: User Login
  endpoint:
    path: /users/login
    method: POST
    data_selector: user
    params: {}
- name: Password Recovery
  endpoint:
    path: /users/recoverPassword
    method: POST
    data_selector: user
    params: {}
- name: User Logout
  endpoint:
    path: /users/logout
    method: POST
    data_selector: user
    params: {}
- name: Updating User Registration
  endpoint:
    path: /users/update
    method: PUT
    data_selector: user
    params: {}
- name: user_registration
  endpoint:
    path: /api/users/register
    method: POST
    data_selector: user
    params: {}
- name: login
  endpoint:
    path: /users/login
    method: POST
- name: login
  endpoint:
    path: /api/users/login
    method: POST
    data_selector: user
    params: {}
- name: User Login
  endpoint:
    path: /users/login
    method: POST
- name: validating_user_login
  endpoint:
    path: /users/validating_user_login
    method: POST
    data_selector: response
    params: {}
- name: is_valid_user_token
  endpoint:
    path: /api/users/isvalidusertoken/<userToken>
    method: GET
    data_selector: ''
    params: {}
- name: login
  endpoint:
    path: /<application-id>/<CLOUDCODE-api-key>/users/login
    method: POST
    data_selector: user
    params: {}
- name: guest_login
  endpoint:
    path: /users/guestLogin
    method: POST
    data_selector: response
    params: {}
- name: anonymous_login
  endpoint:
    path: /api/users/register/guest
    method: POST
    data_selector: user
    params: {}
- name: get_authorization_url
  endpoint:
    path: /api/users/oauth/<providerCode>/request_url
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/users/oauth/<providerCode>/login
    method: POST
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: login
  endpoint:
    path: /api/users/oauth/twitter/login
    method: POST
- name: User Properties
  endpoint:
    path: /users/properties
    method: GET
    data_selector: properties
    params: {}
- name: Users
  endpoint:
    path: /api/data/{objectId}
    method: GET
    data_selector: properties
- name: user_properties
  endpoint:
    path: /users/properties
    method: GET
    data_selector: data
    params: {}
- name: user_properties
  endpoint:
    path: /users/properties
    method: GET
- name: user_properties
  endpoint:
    path: /users/properties
    method: GET
    data_selector: properties
- name: user_properties
  endpoint:
    path: /api/users/<user_objectId>
    method: GET
    data_selector: propName1, propName2
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: update_user_object
  endpoint:
    path: /users/update
    method: POST
- name: update_user
  endpoint:
    path: /users/update
    method: POST
- name: update_user
  endpoint:
    path: /api/users/<user-id>
    method: PUT
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: userStatus
    params: {}
- name: enable_user
  endpoint:
    path: /users/enable
    method: POST
- name: enable_user
  endpoint:
    path: /users/enable
    method: POST
- name: disable_user
  endpoint:
    path: /users/disable
    method: POST
- name: user_status
  endpoint:
    path: /<application-id>/<CLOUDCODE-api-key>/users/<user-objectId>/status
    method: PUT
    data_selector: null
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: disable_user
  endpoint:
    path: /api/users/disable
    method: POST
    data_selector: response
    params: {}
- name: disable_user
  endpoint:
    path: /user/disable
    method: POST
    data_selector: response
    params: {}
- name: disable_user
  endpoint:
    path: /<application-id>/<CLOUDCODE-api-key>/users/<user-objectId>/status
    method: PUT
    data_selector: null
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: remove_user
  endpoint:
    path: /users/remove
    method: DELETE
- name: users
  endpoint:
    path: /api/data/Users/<objectId>
    method: DELETE
    data_selector: timestamp
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: find_user_by
  endpoint:
    path: /users/find
    method: GET
- name: find_user_by
  endpoint:
    path: /users/find
    method: GET
- name: user
  endpoint:
    path: /api/data/<table-name>/<objectId>
    method: GET
    data_selector: user
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: create_email_confirmation
  endpoint:
    path: /users/createEmailConfirmation
    method: POST
- name: create_email_confirmation
  endpoint:
    path: /users/createEmailConfirmation
    method: POST
- name: create_email_confirmation
  endpoint:
    path: /api/users/createEmailConfirmationURL/<identity>
    method: POST
    data_selector: confirmation URL
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: resend_email_confirmation
  endpoint:
    path: /users/resendEmailConfirmation
    method: POST
- name: resend_email_confirmation
  endpoint:
    path: /users/resend_email_confirmation
    method: POST
- name: resend_email_confirmation
  endpoint:
    path: /api/users/resendconfirmation/<identity>
    method: POST
    data_selector: ''
    params: {}
- name: password_verification
  endpoint:
    path: /users/password_verification
    method: POST
- name: password_verification
  endpoint:
    path: /users/password-verification
    method: POST
    data_selector: data
    params: {}
- name: verify_password
  endpoint:
    path: /<application-id>/<CLOUDCODE-api-key>/users/verifypassword
    method: POST
    data_selector: 'true'
    params: {}
- name: Logout
  endpoint:
    path: /users/logout
    method: POST
- name: logout
  endpoint:
    path: /api/users/logout
    method: GET
    data_selector: null
    params: {}
- name: password_reset
  endpoint:
    path: /users/password/reset
    method: POST
- name: password_reset
  endpoint:
    path: /api/users/restorepassword/<user-identity-property>
    method: GET
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user_schema
  endpoint:
    path: /users/retrieveUserSchema
    method: GET
    data_selector: schema
- name: user_schema
  endpoint:
    path: /users/retrieveUserSchema
    method: GET
- name: user_schema
  endpoint:
    path: /api/users/userclassprops
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: available_user_roles
  endpoint:
    path: /users/roles
    method: GET
- name: user_roles
  endpoint:
    path: /users/retrieving-available-user-roles
    method: GET
- name: user_roles
  endpoint:
    path: /api/users/userroles
    method: GET
    data_selector: roles
- name: users_by_role
  endpoint:
    path: /users/retrieve/byRole
    method: GET
- name: users_by_role
  endpoint:
    path: /api/users/byRole
    method: GET
- name: users_by_role
  endpoint:
    path: /api/users/role/<roleName>
    method: GET
    data_selector: array of user objects
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user_roles
  endpoint:
    path: /users/{userId}/roles
    method: GET
- name: user_roles
  endpoint:
    path: /users/roles
    method: GET
- name: user_roles
  endpoint:
    path: /<application-id>/<CLOUDCODE-api-key>/users/userroles/<userId>
    method: GET
    data_selector: roles
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Assigning a Role to a User
  endpoint:
    path: /users/assigning_a_role_to_a_user
    method: POST
- name: Unassigning a Role from a User
  endpoint:
    path: /users/unassigning_a_role_from_a_user
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: assign_role
  endpoint:
    path: /<application-id>/<CLOUDCODE-api-key>/users/assignRole
    method: POST
    data_selector: null
    params: {}
- name: unassign_role
  endpoint:
    path: /users/unassignRole
    method: POST
    data_selector: response
    params: {}
- name: unassign_role
  endpoint:
    path: /api/users/unassignRole
    method: POST
- name: Person
  endpoint:
    path: /data/Person
    method: GET
    data_selector: data
- name: Auto Number
  endpoint:
    path: /data/auto-number
    method: GET
    data_selector: records
- name: auto_number
  endpoint:
    path: /data/AutoNumber
    method: GET
    data_selector: records
    params: {}
- name: Boolean
  endpoint:
    path: /api/boolean
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: data_object
  endpoint:
    path: /data/your_data_type
    method: GET
    data_selector: data
    params: {}
- name: saving_single_object
  endpoint:
    path: /data/savingSingleObject
    method: POST
- name: data_object
  endpoint:
    path: /data/object
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: employees
  endpoint:
    path: /api/data/employees
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: saving_multiple_objects
  endpoint:
    path: /data/multiple
    method: POST
- name: Person
  endpoint:
    path: /api/data/bulk/Person
    method: POST
- name: employees
  endpoint:
    path: /data/employees
    method: POST
    data_selector: objectId
- name: multiple_objects
  endpoint:
    path: /data/multiple-objects
    method: POST
    data_selector: response
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: data_object
  endpoint:
    path: /data
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: data_object
  endpoint:
    path: /api/data
    method: GET
    data_selector: data
    params: {}
- name: Updating Single Object
  endpoint:
    path: /data/updating_single_object
    method: POST
- name: Updating Single Object
  endpoint:
    path: /data/single-object
    method: POST
- name: update_object
  endpoint:
    path: /api/data/<table-name>/<objectId>
    method: PUT
    data_selector: updated_object
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: updating_multiple_objects
  endpoint:
    path: /data/multiple-objects
    method: POST
- name: bulk_update_person
  endpoint:
    path: /api/data/bulk/Person
    method: PUT
    data_selector: number of objects updated
    params: {}
- name: employees
  endpoint:
    path: /data/employees
    method: UPDATE
    data_selector: updated_records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Employee
  endpoint:
    path: /data/Employee
    method: PUT
    data_selector: null
    params: {}
- name: upsert_single_object
  endpoint:
    path: /data/upsert
    method: POST
    data_selector: object
- name: upsert_single_object
  endpoint:
    path: /data/upsert
    method: POST
    data_selector: response
    params: {}
- name: upsert
  endpoint:
    path: /api/data/<table-name>/upsert
    method: PUT
    data_selector: object
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: upsert_multiple_objects
  endpoint:
    path: /data/upsertMultiple
    method: POST
- name: bulkupsert
  endpoint:
    path: /api/data/bulkupsert/<table-name>
    method: PUT
    data_selector: objectId
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: deleting_single_object
  endpoint:
    path: /data/objects/{objectId}
    method: DELETE
    data_selector: records
- name: delete_single_object
  endpoint:
    path: /data/objects/{objectId}
    method: DELETE
    data_selector: result
    params: {}
- name: Orders
  endpoint:
    path: /api/data/Orders/<object-id>
    method: DELETE
    data_selector: deletionTime
- name: employees
  endpoint:
    path: /data/employees
    method: DELETE
    data_selector: objectId
    params: {}
- name: Deleting Multiple Objects
  endpoint:
    path: /data/objects
    method: DELETE
- name: employees
  endpoint:
    path: /data/employees
    method: DELETE
- name: bulk_delete_person
  endpoint:
    path: /<table-name>
    method: DELETE
    params:
      where: <where clause>
- name: Person
  endpoint:
    path: /api/data/Person/deep-save
    method: PUT
    data_selector: created
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: data_object
  endpoint:
    path: /data
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Product
  endpoint:
    path: /Product/deep-save
    method: PUT
- name: Order
  endpoint:
    path: /Order/deep-save
    method: PUT
- name: Order
  endpoint:
    path: /Product/deep-save
    method: PUT
    data_selector: orderItems
- name: OrderItem
  endpoint:
    path: /OrderItem
    method: GET
    data_selector: orderItems
- name: Product
  endpoint:
    path: /Product/deep-save
    method: PUT
    data_selector: records
- name: Manufacturer
  endpoint:
    path: /Manufacturer
    method: GET
    data_selector: records
- name: schema_definition
  endpoint:
    path: /api/data/<table-name>/properties
    method: GET
    data_selector: null
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Get Object Count
  endpoint:
    path: /data/getObjectCount
    method: GET
- name: get_object_count
  endpoint:
    path: /data/getObjectCount
    method: GET
    data_selector: count
    params: {}
- name: employees
  endpoint:
    path: /data/employees/count
    method: GET
    data_selector: object_count
- name: object_count
  endpoint:
    path: /api/data/<table-name>/count
    method: GET
    params:
      where: <whereClause>
- name: Basic Object Retrieval
  endpoint:
    path: /data/basic
    method: GET
- name: Person
  endpoint:
    path: /api/data/Person
    method: GET
    data_selector: records
    params: {}
- name: employees
  endpoint:
    path: /api/data/employees
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /api/data/<table-name>
    method: GET
    params:
      pageSize: XX
      offset: '2'
- name: Person
  endpoint:
    path: /Person
    method: GET
    data_selector: records
    params: {}
- name: Person
  endpoint:
    path: /api/data/Person
    method: GET
    data_selector: records
    params: {}
- name: Users
  endpoint:
    path: /data/Users
    method: GET
    data_selector: records
    params: {}
- name: movie
  endpoint:
    path: /Movie
    method: GET
    data_selector: records
    params:
      props: Avg(totalBoxOffice)
- name: Movie
  endpoint:
    path: /api/data/Movie
    method: GET
    data_selector: records
    params: {}
- name: movie
  endpoint:
    path: /Movie
    method: GET
    data_selector: count
    params:
      props: Count(objectId)
- name: Movie
  endpoint:
    path: /Movie
    method: GET
    data_selector: records
    params: {}
- name: movie
  endpoint:
    path: /Movie
    method: GET
    data_selector: records
    params:
      props: Sum(totalBoxOffice)
- name: Movie
  endpoint:
    path: /Movie
    method: GET
    data_selector: records
    params: {}
- name: Movie
  endpoint:
    path: /api/data/Movie
    method: GET
    data_selector: records
    params: {}
- name: movie
  endpoint:
    path: /Movie
    method: GET
    data_selector: records
    params:
      props: Min(totalBoxOffice)
- name: movie
  endpoint:
    path: /data/Movie
    method: GET
    data_selector: records
    params:
      props: Max(totalBoxOffice)
- name: Movie
  endpoint:
    path: /Movie
    method: GET
    data_selector: records
    params: {}
- name: Movie
  endpoint:
    path: /Movie
    method: GET
    data_selector: records
    params: {}
- name: averageBoxOffice
  endpoint:
    path: /data/movies
    method: GET
    data_selector: averageBoxOffice
    params:
      where: releaseYear > 2012 AND earnings > 500000000
- name: actorCount
  endpoint:
    path: /data/movies
    method: GET
    data_selector: actorCount
    params:
      where: actorCount >= 3
- name: employees
  endpoint:
    path: /Employees
    method: GET
    data_selector: records
    params:
      distinct: 'true'
- name: employees
  endpoint:
    path: /api/data/Employees
    method: GET
    data_selector: records
    params: {}
- name: Person
  endpoint:
    path: /data/Person
    method: GET
    data_selector: records
    params:
      where: created > 1683838706000
- name: user
  endpoint:
    path: /data/User
    method: GET
    data_selector: records
- name: data_object
  endpoint:
    path: /data/YourDataObject
    method: GET
    data_selector: records
- name: Movie
  endpoint:
    params:
      page_size_param: page size
      page_offset: page offset
      properties:
      - movieName
      - totalBoxOffice
- name: data_object
  endpoint:
    path: /data/object
    method: GET
    data_selector: data
    params: {}
- name: grouped_data
  endpoint:
    path: /<tableOrViewName>
    method: POST
    data_selector: items
    params: {}
- name: search_by_distance
  endpoint:
    path: /data/searchByDistance
    method: GET
    data_selector: dataObjects
    params: {}
- name: Person
  endpoint:
    path: /data/Person
    method: POST
    data_selector: records
    params: {}
- name: User
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: Data
  endpoint:
    path: /data
    method: GET
    data_selector: records
- name: Set/Add Relation with objects
  endpoint:
    path: /data/set-add-relation
    method: POST
    data_selector: data
    params: {}
- name: set_relation
  endpoint:
    path: /api/data/<table-name>/<parentObjectId>/<relationName>
    method: POST
    data_selector: none
    params: {}
- name: add_relation
  endpoint:
    path: /api/data/<table-name>/<parentObjectId>/<relationName>
    method: PUT
    data_selector: none
    params: {}
- name: employees
  endpoint:
    path: /data/employees
    method: GET
    data_selector: records
    params: {}
- name: uniqueSkills
  endpoint:
    path: /data/uniqueSkills
    method: GET
    data_selector: records
    params: {}
- name: set_add_relation
  endpoint:
    path: /data/set/add/relation
    method: POST
- name: employees
  endpoint:
    path: /data/employees
    method: GET
    data_selector: records
    params: {}
- name: uniqueSkills
  endpoint:
    path: /data/uniqueSkills
    method: GET
    data_selector: records
    params: {}
- name: set_relation
  endpoint:
    path: /api/data/<table-name>/<parentObjectId>/<relationName>
    method: POST
    params:
      whereClause: <whereClause>
- name: add_relation
  endpoint:
    path: /api/data/<table-name>/<parentObjectId>/<relationName>
    method: PUT
    params:
      whereClause: <whereClause>
- name: Delete Objects from relation
  endpoint:
    path: /data/deleteRelation
    method: DELETE
- name: relation
  endpoint:
    path: /api/data/<table-name>/<parentObjectId>/<relationName>
    method: DELETE
    data_selector: Error or number of objects deleted
- name: delete_relation
  endpoint:
    path: /delete/relation
    method: DELETE
- name: delete_relation
  endpoint:
    path: /data/relation
    method: DELETE
- name: relation_deletion
  endpoint:
    path: /api/data/<table-name>/<parentObjectId>/<relationName>
    method: DELETE
    params:
      whereClause: <whereClause>
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /data/[TABLE-NAME]
    method: GET
    data_selector: ''
    params: {}
- name: related_objects
  endpoint:
    path: /api/data/[TABLE-NAME]/[OBJECT-ID]/[relatedPropertyName]
    method: GET
- name: load_related_objects
  endpoint:
    path: /api/data/[TABLE-NAME]/[OBJECT-ID]/[relatedPropertyName]/load
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: employees
  endpoint:
    path: /data/employees
    method: GET
- name: uniqueSkills
  endpoint:
    path: /data/uniqueSkills
    method: GET
- name: marketValue
  endpoint:
    path: /data/marketValue
    method: GET
- name: order_item
  endpoint:
    path: /api/data/Order/<parentObjectId>/orderItem
    method: GET
    params:
      pageSize: '20'
      offset: '0'
- name: teacher
  endpoint:
    path: /data/teacher
    method: GET
    data_selector: records
    params: {}
- name: students
  endpoint:
    path: /data/students
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /Contact
    method: GET
    data_selector: records
    params: {}
- name: Person
  endpoint:
    path: /api/data/Person
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /data/user
    method: GET
    data_selector: records
- name: address
  endpoint:
    path: /data/address
    method: GET
    data_selector: records
- name: Person
  endpoint:
    path: /api/data/Person
    method: POST
    data_selector: profile
    params: {}
- name: Person
  endpoint:
    path: /data/Person/1316FEE4-92A6-4400-9D08-EB243BF57671
    method: GET
    data_selector: profile
    params: {}
- name: Person
  endpoint:
    path: /data/Person
    method: GET
    data_selector: records
    params: {}
- name: Person
  endpoint:
    path: /api/data/Person/{objectId}
    method: PUT
    data_selector: profile
    params: {}
- name: spatial_data_types
  endpoint:
    path: /spatial/data
    method: GET
    data_selector: data
    params: {}
- name: Person
  endpoint:
    path: /data/Person/first
    method: GET
    data_selector: records
- name: Travel
  endpoint:
    path: /data/Travel/first
    method: GET
    data_selector: records
- name: Building
  endpoint:
    path: /data/Building/first
    method: GET
    data_selector: records
- name: spatial_data
  endpoint:
    path: /data/spatial
    method: GET
    data_selector: records
- name: Person
  endpoint:
    path: /api/data/Person
    method: GET
    data_selector: records
- name: Order
  endpoint:
    path: /Order
    method: POST
    data_selector: data
    params: {}
- name: Travel
  endpoint:
    path: /Travel
    method: POST
    data_selector: data
    params: {}
- name: Building
  endpoint:
    path: /Building
    method: POST
    data_selector: data
    params: {}
- name: person
  endpoint:
    path: /data/Person/OBJECTID
    method: PUT
    data_selector: ''
    params: {}
- name: bulk_person
  endpoint:
    path: /data/bulk/Person
    method: PUT
    data_selector: ''
    params:
      where: email = 'bob@thebuilder.com'
- name: transaction
  endpoint:
    path: /api/transaction/unit-of-work
    method: POST
- name: transaction
  endpoint:
    path: /units/of/work
    method: POST
    data_selector: operations
- name: operations
  endpoint:
    path: /transactions
    method: POST
    data_selector: results
    params: {}
- name: Country
  endpoint:
    path: /api/transaction/unit-of-work
    method: POST
    data_selector: results.findCountry
    params:
      whereClause: name = 'India'
      pageSize: 1
- name: user
  endpoint:
    path: /data/user
    method: GET
    data_selector: data
    params: {}
- name: object
  endpoint:
    path: /data/object
    method: GET
    data_selector: data
    params: {}
- name: Person
  endpoint:
    path: /api/transaction/unit-of-work
    method: POST
    data_selector: results.createPerson
    params: {}
- name: transaction
  endpoint:
    path: /api/transaction/unit-of-work
    method: POST
    data_selector: results
    params: {}
- name: objects
  endpoint:
    path: /data/objects
    method: POST
    data_selector: data
    params: {}
- name: operation
  endpoint:
    path: /operations
    method: UPDATE
    data_selector: payload
    params: {}
- name: user
  endpoint:
    path: /users
    method: PUT
    data_selector: user
- name: updating_multiple_objects
  endpoint:
    path: /data/objects
    method: POST
- name: unit_of_work
  endpoint:
    path: /unit-of-work
    method: POST
    data_selector: operations
    params: {}
- name: upsert_single_object
  endpoint:
    path: /data/upsert
    method: POST
- name: upsert_single_object
  endpoint:
    path: /data/upsert
    method: POST
- name: upsert_person
  endpoint:
    path: /api/transaction/unit-of-work
    method: POST
    data_selector: operations
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: upsert_multiple_objects
  endpoint:
    path: /data/upsert
    method: POST
    data_selector: data
    params: {}
- name: upsert_bulk
  endpoint:
    path: /api/transaction/unit-of-work
    method: POST
    data_selector: operations
    params: {}
- name: deleting_single_object
  endpoint:
    path: /data/{dataType}/{objectId}
    method: DELETE
- name: unit_of_work
  endpoint:
    path: /api/transaction/unit-of-work
    method: POST
    data_selector: operations
- name: deleting_multiple_objects
  endpoint:
    path: /data/deleting_multiple_objects
    method: DELETE
- name: delete_bulk
  endpoint:
    path: /transaction/unit-of-work
    method: POST
    data_selector: operations
    params: {}
- name: SET_RELATION
  endpoint:
    path: /api/transaction/unit-of-work
    method: POST
    data_selector: operations
    params: {}
- name: transaction
  endpoint:
    path: /api/transaction/unit-of-work
    method: POST
    data_selector: results
    params: {}
- name: add_relation
  endpoint:
    path: /api/transaction/unit-of-work
    method: POST
    data_selector: operations
    params: {}
- name: relations
  endpoint:
    path: /api/data/relation
    method: POST
    data_selector: data
    params: {}
- name: delete_relation
  endpoint:
    path: /api/transaction/unit-of-work
    method: POST
    data_selector: operations
    params: {}
- name: setting_permissions_for_data_table
  endpoint:
    path: /permissions/data-table
    method: POST
- name: setting_object_acl_for_multiple_users
  endpoint:
    path: /permissions/object-acl/multiple
    method: POST
- name: setting_object_acl_for_one_user
  endpoint:
    path: /permissions/object-acl/one
    method: POST
- name: setting_object_acl_for_all_users_roles
  endpoint:
    path: /permissions/object-acl/all
    method: POST
- name: setting_permissions_for_data_table
  endpoint:
    path: /setting-permissions-for-data-table
    method: POST
- name: setting_object_acl_multiple_users
  endpoint:
    path: /setting-object-acl-multiple-users
    method: POST
- name: setting_object_acl_one_user
  endpoint:
    path: /setting-object-acl-one-user
    method: POST
- name: setting_object_acl_all_users_roles
  endpoint:
    path: /setting-object-acl-all-users-roles
    method: POST
- name: Setting Permissions For A Data Table
  endpoint:
    path: /data/permissions
    method: POST
    data_selector: returnValue
    params: {}
- name: Setting The Object ACL For Multiple Users
  endpoint:
    path: /data/permissions/multiple
    method: POST
    data_selector: returnValue
    params: {}
- name: Setting The Object ACL For One User
  endpoint:
    path: /data/permissions/one
    method: POST
    data_selector: returnValue
    params: {}
- name: Setting The Object ACL For All Users/Roles
  endpoint:
    path: /data/permissions/all
    method: POST
    data_selector: returnValue
    params: {}
- name: permissions
  endpoint:
    path: /api/data/<table-name>/permissions/<permission type>
    method: PUT
    data_selector: null
    params: {}
- name: bulk_permissions
  endpoint:
    path: /api/data/<table-name>/permissions/<objectId>/bulk
    method: PUT
    data_selector: null
    params: {}
- name: single_user_acl
  endpoint:
    path: /api/data/<table-name>/permissions/<permission type>/<objectId>
    method: PUT
    data_selector: null
    params: {}
- name: all_users_acl
  endpoint:
    path: /api/data/<table-name>/permissions/<permission type>/<objectId>
    method: PUT
    data_selector: null
    params: {}
- name: deny_access_for_user_role
  endpoint:
    path: /api/data/Person/permissions/DENY/{objectId}
    method: PUT
    data_selector: ''
    params:
      permission: ADD
      role: TrialUser
- name: deny_access_for_all_users
  endpoint:
    path: /api/data/Person/permissions/DENY/{objectId}
    method: PUT
    data_selector: ''
    params:
      permission: UPDATE
      user: '*'
- name: deny_access_for_all_user_roles
  endpoint:
    path: /api/data/Person/permissions/DENY/{objectId}
    method: PUT
    data_selector: ''
    params:
      permission: ADD
      role: '*'
- name: key-value
  endpoint:
    path: /api/hive/[hive-name]/key-value/[key]
    method: GET
    data_selector: value
    params: {}
- name: list
  endpoint:
    path: /api/hive/[hive-name]/list/[key]
    method: GET
    data_selector: value
    params: {}
- name: map
  endpoint:
    path: /api/hive/[hive-name]/map/[key]
    method: GET
    data_selector: value
    params: {}
- name: set
  endpoint:
    path: /api/hive/[hive-name]/set/[key]
    method: GET
    data_selector: value
    params: {}
- name: sorted-set
  endpoint:
    path: /api/hive/[hive-name]/sorted-set/[key]
    method: GET
    data_selector: value
    params: {}
- name: hive
  endpoint:
    path: /management/hive
    method: GET
    data_selector: hives
- name: hive
  endpoint:
    path: /api/hive/[hive-name]
    method: POST
    data_selector: ''
    params: {}
- name: create_hive
  endpoint:
    path: /management/createHive
    method: POST
    data_selector: response
    params: {}
- name: rename_hive
  endpoint:
    path: /management/renameHive
    method: POST
    data_selector: response
    params: {}
- name: delete_hive
  endpoint:
    path: /management/deleteHive
    method: DELETE
    data_selector: response
    params: {}
- name: get_hive_names
  endpoint:
    path: /management/getHiveNames
    method: GET
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Rename Hive
  endpoint:
    path: /management/api/rename/hive
    method: POST
- name: Rename Hive
  endpoint:
    path: /management/renameHive
    method: POST
- name: rename_hive
  endpoint:
    path: /api/hive/[hive-name]
    method: PUT
    data_selector: ''
    params:
      newName: '[new-name]'
- name: Delete Hive
  endpoint:
    path: /management/api/delete/hive
    method: DELETE
- name: Delete Hive
  endpoint:
    path: /management/api/deleteHive
    method: DELETE
- name: delete_hive
  endpoint:
    path: /api/hive/[hive-name]
    method: DELETE
- name: Get Hive Names
  endpoint:
    path: /management/api/get/hive/names
    method: GET
- name: Get Hive Names
  endpoint:
    path: /management/api/getHiveNames
    method: GET
- name: hive_names
  endpoint:
    path: /api/hive
    method: GET
    data_selector: ''
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: key_names
  endpoint:
    path: /api/hive/[hive-name]/[bucket-type]/keys
    method: GET
    data_selector: keys
    params:
      filterPattern: '*'
      cursor: '0'
      pageSize: '5000'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Delete Key
  endpoint:
    path: /general/api/delete/key
    method: DELETE
- name: Delete Key
  endpoint:
    path: /general/api/delete_key
    method: DELETE
- name: delete_key
  endpoint:
    path: /api/hive/[hive-name]/[bucket-type]/[key]
    method: DELETE
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: delete_keys
  endpoint:
    path: /general/api/delete_keys
    method: DELETE
    data_selector: response
    params: {}
- name: delete_keys
  endpoint:
    path: /[hive-name]/[bucket-type]
    method: DELETE
    data_selector: number_of_deleted_keys
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: check_keys_exist
  endpoint:
    path: /api/check/keys/exist
    method: GET
    data_selector: keys
    params: {}
- name: check_keys_exist
  endpoint:
    path: /api/hive/[hive-name]/[bucket-type]/action/exist
    method: POST
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Rename Key
  endpoint:
    path: /general/api/rename
    method: POST
    data_selector: response
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: rename_key
  endpoint:
    path: /api/hive/[hive-name]/[bucket-type]/[key]/rename
    method: PUT
    data_selector: null
    params:
      newKey: '[new-name]'
      overwrite: 'true'
- name: set_key_expiration
  endpoint:
    path: /api/data/setKeyExpiration
    method: POST
    data_selector: response
- name: set_key_expiration
  endpoint:
    path: /general/api/set_key_expiration_ttl
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: set_key_expiration
  endpoint:
    path: /api/hive/[hive-name]/[bucket-type]/[key]/expire
    method: PUT
    params:
      ttl: '[seconds]'
- name: Set Key Expiration - Unix Time
  endpoint:
    path: /general/api/set/key/expiration/unixtime
    method: POST
- name: set_key_expiration
  endpoint:
    path: /api/hive/[hive-name]/[bucket-type]/[key]/expire-at
    method: PUT
    params:
      unixTime: '[seconds]'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: get_key_expiration_time
  endpoint:
    path: /general/api/get_expiration_time
    method: GET
- name: get_key_expiration_time
  endpoint:
    path: /general_api_get_expiration_time
    method: GET
    data_selector: expirationTime
    params: {}
- name: get_key_expiration_time
  endpoint:
    path: /api/hive/[hive-name]/[bucket-type]/[key]/get-expiration-ttl
    method: GET
    data_selector: ''
    params: {}
- name: Clear Key Expiration Time
  endpoint:
    path: /api/clearKeyExpirationTime
    method: POST
- name: clear_key_expiration_time
  endpoint:
    path: /api/clearKeyExpirationTime
    method: POST
    data_selector: result
    params: {}
- name: clear_key_expiration
  endpoint:
    path: /api/hive/[hive-name]/[bucket-type]/[key]/clear-expiration
    method: PUT
    data_selector: null
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Time Since Last Operation
  endpoint:
    path: /general/api/time/since/last/operation
    method: GET
- name: time_since_last_operation
  endpoint:
    path: /general-api/time-since-last-operation
    method: GET
- name: time_since_last_operation
  endpoint:
    path: /[hive-name]/[bucket-type]/[key]/seconds-since-last-operation
    method: GET
    data_selector: seconds
    params: {}
- name: reset_last_operation_time
  endpoint:
    path: /resetLastOperationTime
    method: POST
- name: reset_last_operation_time
  endpoint:
    path: /resetLastOperationTime
    method: POST
- name: reset_last_operation_time
  endpoint:
    path: /api/hive/[hive-name]/[bucket-type]/action/touch
    method: PUT
    data_selector: number of reset timers
    params: {}
- name: Get Value
  endpoint:
    path: /keyvalue_api/get_key
    method: GET
- name: get_value
  endpoint:
    path: /api/hive/[hive-name]/key-value/[key]
    method: GET
    data_selector: value
    params: {}
- name: get_value
  endpoint:
    path: /keyvalue_api/get_key
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Get Values
  endpoint:
    path: /keyvalue/api/getMultipleKeys
    method: GET
- name: Get Values
  endpoint:
    path: /keyvalue/api/get/multiple_keys
    method: GET
- name: get_values
  endpoint:
    path: /[hive-name]/key-value
    method: POST
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: key_value
  endpoint:
    path: /key-value
    method: POST
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: set_key_value
  endpoint:
    path: /api/hive/[hive-name]/key-value/[key]
    method: PUT
    data_selector: 'true'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: set_keys_and_values
  endpoint:
    path: /data/setKeysAndValues
    method: POST
- name: key-value
  endpoint:
    path: /api/hive/[hive-name]/key-value
    method: PUT
    data_selector: null
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: increment_key_value
  endpoint:
    path: /api/hive/[hive-name]/key-value/[key]/increment
    method: PUT
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: decrement
  endpoint:
    path: /keyvalue/decrement
    method: POST
- name: decrement
  endpoint:
    path: /api/hive/[hive-name]/key-value/[key]/decrement
    method: PUT
    data_selector: decremented_value
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: key_items
  endpoint:
    path: /getKeyItems
    method: GET
- name: key_items
  endpoint:
    path: /api/data/keyitems
    method: GET
    data_selector: items
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /api/data
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: insert_before
  endpoint:
    path: /api/hive/[hive-name]/list/[key]/insert-before
    method: PUT
    data_selector: number_of_values
- name: insert_after
  endpoint:
    path: /api/hive/[hive-name]/list/[key]/insert-after
    method: PUT
    data_selector: response
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: add_first
  endpoint:
    path: /api/hive/[hive-name]/list/[key]/add-first
    method: PUT
    data_selector: number_of_values
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: data_object
  endpoint:
    path: /data
    method: GET
    data_selector: data
    params: {}
- name: add_last
  endpoint:
    path: /[hive-name]/list/[key]/add-last
    method: PUT
- name: delete_value
  endpoint:
    path: /list/remove_values
    method: DELETE
- name: delete_value
  endpoint:
    path: /list_api/remove_values
    method: DELETE
- name: delete_value
  endpoint:
    path: /api/hive/[hive-name]/list/[key]/delete-value
    method: PUT
    data_selector: number_of_deleted_values
    params: {}
- name: delete_first
  endpoint:
    path: /api/hive/[hive-name]/list/[key]/get-first-and-delete
    method: PUT
    data_selector: deletedValues
    params:
      count: '1'
- name: Delete Last
  endpoint:
    path: /deleteLast
    method: DELETE
- name: delete_last
  endpoint:
    path: /list/api/remove_and_return_last
    method: DELETE
- name: delete_last
  endpoint:
    path: /api/hive/[hive-name]/list/[key]/get-last-and-delete
    method: PUT
    data_selector: response
    params:
      count: '1'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: list_length
  endpoint:
    path: /api/hive/[hive-name]/list/[key]/length
    method: GET
    data_selector: ''
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Get All Key-Values
  endpoint:
    path: /map/api/getAllKeyValues
    method: GET
- name: Get All Key-Values
  endpoint:
    path: /map/api/getAllKeyValues
    method: GET
    data_selector: keyValues
- name: key_values
  endpoint:
    path: /api/hive/[hive-name]/map/[key]
    method: GET
    data_selector: key-value pairs
    params: {}
- name: get_specific_key_values
  endpoint:
    path: /api/hive/[hive-name]/map/[key]
    method: POST
    data_selector: key-value pairs
- name: key_value
  endpoint:
    path: /api/keyvalue
    method: GET
    data_selector: records
    params: {}
- name: Get All Keys Names
  endpoint:
    path: /map/api/get/all/keys
    method: GET
- name: Get All Keys Names
  endpoint:
    path: /map/getAllKeys
    method: GET
- name: get_all_keys
  endpoint:
    path: /api/hive/[hive-name]/map/[key]/keys
    method: GET
    data_selector: ''
- name: Get All Values
  endpoint:
    path: /map/api/get/all/values
    method: GET
- name: Get All Values
  endpoint:
    path: /map/api/get/all/values
    method: GET
- name: Get All Values
  endpoint:
    path: /get/all/values
    method: GET
- name: map_values
  endpoint:
    path: /[hive-name]/map/values
    method: GET
    data_selector: values
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: get_value_by_key_name
  endpoint:
    path: /map/api/getValueByKeyName
    method: GET
    data_selector: data
    params: {}
- name: get_value_by_key_name
  endpoint:
    path: /api/data/key
    method: GET
    data_selector: value
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: get_value_by_key
  endpoint:
    path: /api/hive/[hive-name]/map/[key]/get/[key-name]
    method: GET
    data_selector: null
    params: {}
- name: Check If Exists
  endpoint:
    path: /map/checkIfExists
    method: GET
- name: Check If Exists
  endpoint:
    path: /map/api/checkIfExists
    method: GET
- name: check_key_exists
  endpoint:
    path: /api/hive/[hive-name]/map/[key]/exists/[key-name]
    method: GET
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: set_values
  endpoint:
    path: /data/set
    method: POST
- name: set_values
  endpoint:
    path: /api/set_values
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: set_values
  endpoint:
    path: /api/hive/[hive-name]/map/[key]
    method: PUT
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: set_value_by_key_name
  endpoint:
    path: /data/key_value
    method: POST
- name: Set Value By Key Name
  endpoint:
    path: /data/key-value
    method: POST
- name: set_value_by_key_name
  endpoint:
    path: /api/hive/[hive-name]/map/[key]/set/[key-name]
    method: PUT
    data_selector: value
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Overwrite Current Value
  endpoint:
    path: /map/api/OverwriteCurrentValue
    method: POST
- name: overwrite_current_value
  endpoint:
    path: /api/hive/[hive-name]/map/[key]/set-with-overwrite/[key-name]
    method: PUT
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: increment
  endpoint:
    path: /api/hive/[hive-name]/map/[key]/increment/[key-name]
    method: PUT
    data_selector: incremented value
    params:
      count: '[increment-by]'
- name: user
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /api/data
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: decrement
  endpoint:
    path: /map/api/decrement
    method: POST
- name: decrement
  endpoint:
    path: /map/api/decrement
    method: POST
- name: decrement
  endpoint:
    path: /api/hive/[hive-name]/map/[key]/decrement/[key-name]
    method: PUT
    data_selector: decremented_value
    params:
      count: '[decrement-by]'
- name: delete_by_key_name
  endpoint:
    path: /deleteByKeyName
    method: DELETE
- name: Delete By Key Name
  endpoint:
    path: /map/delete
    method: DELETE
- name: delete_by_key_name
  endpoint:
    path: /api/hive/[hive-name]/map/[key]/by-obj-keys
    method: DELETE
    data_selector: number_of_deleted_pairs
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: map_length
  endpoint:
    path: /api/hive/[hive-name]/map/[key]/length
    method: GET
    data_selector: ''
- name: Get Key Items
  endpoint:
    path: /list-api/get-key-items
    method: GET
- name: key_items
  endpoint:
    path: /list/getKeyItems
    method: GET
- name: key_items
  endpoint:
    path: /api/hive/[hive-name]/set/[key]
    method: GET
    data_selector: values
- name: get_random_values
  endpoint:
    path: /data/getRandomValues
    method: GET
- name: random_values
  endpoint:
    path: /api/v1/getRandomValues
    method: GET
    data_selector: values
    params: {}
- name: random_values
  endpoint:
    path: /api/hive/[hive-name]/set/[key]/random
    method: GET
    data_selector: values
    params:
      count: '[n-values-to-get]'
- name: delete_random_key_items
  endpoint:
    path: /api/data/deleteRandomKeyItems
    method: DELETE
- name: delete_random_key_items
  endpoint:
    path: /delete/random/key/items
    method: DELETE
- name: delete_random_key_items
  endpoint:
    path: /api/hive/[hive-name]/set/[key]/random
    method: PUT
    data_selector: response
    params:
      count: '1'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: set_contains
  endpoint:
    path: /api/hive/[hive-name]/set/[key]/contains
    method: POST
    data_selector: boolean_array
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Add Values
  endpoint:
    path: /set/api/add
    method: POST
- name: add_values
  endpoint:
    path: /api/hive/[hive-name]/set/[key]/add
    method: PUT
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: delete_values
  endpoint:
    path: /data/values
    method: DELETE
- name: delete_values
  endpoint:
    path: /delete/values
    method: DELETE
- name: delete_values
  endpoint:
    path: /[hive-name]/set/[key]/values
    method: DELETE
    data_selector: number_of_deleted_items
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: difference
  endpoint:
    path: /api/hive/[hive-name]/set/action/difference
    method: POST
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: intersection
  endpoint:
    path: /api/hive/[hive-name]/set/action/intersection
    method: POST
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: union
  endpoint:
    path: /api/hive/[hive-name]/set/action/union
    method: POST
    data_selector: response
    params: {}
- name: user
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: data_object
  endpoint:
    path: /api/data
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: data_object
  endpoint:
    path: /data
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: set_length
  endpoint:
    path: /api/hive/[hive-name]/set/[key]/length
    method: GET
    data_selector: number of items stored in the set
    params: {}
- name: sorted_set_add
  endpoint:
    path: /api/hive/[hive-name]/sorted set/[key]/add
    method: PUT
    data_selector: items
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: increment_score
  endpoint:
    path: /sorted_set_api/increment_score
    method: POST
- name: increment_score
  endpoint:
    path: /api/hive/[hive-name]/sorted set/[key]/increment
    method: PUT
    data_selector: incremented_score
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: decrement_score
  endpoint:
    path: /sorted-set/decrement
    method: POST
- name: decrement_score
  endpoint:
    path: /api/data/sorted_set/decrement
    method: POST
    data_selector: data
    params: {}
- name: decrement_score
  endpoint:
    path: /api/hive/[hive-name]/sorted set/[key]/decrement
    method: PUT
    data_selector: decremented_score
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: get_random_values
  endpoint:
    path: /api/getRandomValues
    method: GET
- name: get_random_values
  endpoint:
    path: /[hive-name]/sorted set/[key]/get-random
    method: GET
    data_selector: response
    params:
      count: '[howMany]'
      withScores: '[scores]'
- name: get_random_values
  endpoint:
    path: /api/getRandomValues
    method: GET
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Get Score
  endpoint:
    path: /sorted-set/getScore
    method: GET
- name: Get Score
  endpoint:
    path: /sorted_set_api_get_score.html
    method: GET
- name: get_score
  endpoint:
    path: /api/hive/[hive-name]/sorted-set/[key]/get-score
    method: POST
    data_selector: score
    params: {}
- name: Get Rank
  endpoint:
    path: /sorted-set/get-rank
    method: GET
- name: Get Rank
  endpoint:
    path: /sorted-set/getRank
    method: GET
- name: get_rank
  endpoint:
    path: /api/hive/[hive-name]/sorted-set/[key]/get-rank
    method: POST
    data_selector: null
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Get Values By Rank Range
  endpoint:
    path: /sorted-set/get-range-of-values-by-rank
    method: GET
    data_selector: values
    params: {}
- name: rank_range
  endpoint:
    path: /getValuesByRankRange
    method: GET
    data_selector: results
- name: get_values_by_rank_range
  endpoint:
    path: /api/data/rank
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: get_values_by_rank_range
  endpoint:
    path: /api/hive/[hive-name]/sorted-set/[key]/get-range-by-rank
    method: GET
    data_selector: values
    params:
      startRank: '[startRank]'
      stopRank: '[stopRank]'
      withScores: '[scores]'
      reverse: '[orderControl]'
- name: values_by_score_range
  endpoint:
    path: /sorted_set/api/get_range_of_values_by_score
    method: GET
- name: get_values_by_score_range
  endpoint:
    path: /api/data/sorted_set/get_values_by_score_range
    method: GET
- name: get_values_by_score_range
  endpoint:
    path: /api/hive/[hive-name]/sorted-set/[key]/get-range-by-score
    method: GET
    data_selector: scores
    params:
      minScore: '[minScore]'
      maxScore: '[maxScore]'
      minBound: '[minBound]'
      maxBound: '[maxBound]'
      offset: '[offset]'
      pageSize: '[pageSize]'
      withScores: '[withScores]'
      reverse: '[reverse]'
- name: difference
  endpoint:
    path: /api/hive/[hive-name]/sorted-set/action/difference
    method: POST
    data_selector: response
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: intersection
  endpoint:
    path: /api/hive/[hive-name]/sorted-set/action/intersection
    method: POST
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: union
  endpoint:
    path: /api/hive/[hive-name]/sorted-set/action/union
    method: POST
    data_selector: null
    params: {}
- name: DeleteValue
  endpoint:
    path: /delete-value
    method: DELETE
- name: delete_values
  endpoint:
    path: /api/data/delete_values
    method: DELETE
- name: delete_values
  endpoint:
    path: /api/hive/[hive-name]/sorted-set/[key]/values
    method: DELETE
    data_selector: number_of_deleted_values
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Delete Values With Max Score
  endpoint:
    path: /remove_values_with_max_score
    method: DELETE
- name: delete_values_with_max_score
  endpoint:
    path: /api/data/sorted-set/remove-values-with-max-score
    method: DELETE
- name: delete_values_with_max_score
  endpoint:
    path: /api/hive/[hive-name]/sorted-set/[key]/get-with-max-score-and-delete
    method: PUT
    data_selector: deleted_values
    params:
      count: '[howMany]'
- name: delete_values_with_min_score
  endpoint:
    path: /api/delete_values_with_min_score
    method: DELETE
- name: delete_values_with_min_score
  endpoint:
    path: /deleteValuesWithMinScore
    method: DELETE
- name: delete_values_by_rank_range
  endpoint:
    path: /delete_values_by_rank_range
    method: DELETE
- name: delete_values_by_rank_range
  endpoint:
    path: /api/data/deleteValuesByRankRange
    method: DELETE
- name: delete_values_by_rank_range
  endpoint:
    path: /api/hive/[hive-name]/sorted-set/[key]/delete-by-rank
    method: DELETE
    data_selector: deletedCount
    params:
      startRank: '[startRank]'
      stopRank: '[stopRank]'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: delete_values_by_score_range
  endpoint:
    path: /deleteValuesByScoreRange
    method: DELETE
- name: delete_values_by_score_range
  endpoint:
    path: /api/hive/[hive-name]/sorted-set/[key]/delete-by-score
    method: DELETE
    data_selector: number_of_deleted_items
    params: {}
- name: delete_values_by_score_range
  endpoint:
    path: /api/data/sorted_set/deleteValuesByScoreRange
    method: DELETE
    data_selector: records
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: data
  endpoint:
    path: /data
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: sorted_set_length
  endpoint:
    path: /api/hive/[hive-name]/sorted-set/[key]/length
    method: GET
    data_selector: total number of elements stored in the sorted set
    params: {}
- name: length_with_a_query
  endpoint:
    path: /api/length/query
    method: GET
- name: sorted_set_count
  endpoint:
    path: /[hive-name]/sorted-set/[key]/count
    method: GET
    data_selector: ''
    params:
      minScore: ''
      minBound: ''
      maxScore: ''
      maxBound: ''
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: data_object
  endpoint:
    path: /api/data
    method: GET
    data_selector: data
- name: subscribe_for_all_messages
  endpoint:
    path: /subscribe/all
    method: POST
- name: subscribe_for_all_messages
  endpoint:
    path: /subscribe
    method: POST
    data_selector: message
    params: {}
- name: subscribe
  endpoint:
    path: /<channel-name>/subscribe
    method: POST
    data_selector: subscriptionId
    params: {}
- name: subscribe_for_filtered_messages
  endpoint:
    path: /subscribe/filtered
    method: POST
- name: subscribe
  endpoint:
    path: /api/messaging/<channel-name>/subscribe
    method: POST
    data_selector: subscriptionId
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /retrieve/messages
    method: GET
- name: messages
  endpoint:
    path: /retrieve/messages
    method: GET
- name: retrieve_messages
  endpoint:
    path: /api/messaging/default/<subscription-id>
    method: GET
    data_selector: messages
- name: message_listener
  endpoint:
    path: /pubsub/subscribe
    method: POST
    data_selector: message
    params:
      id: my-listener-1
      channel: default
      selector: SQL-92_condition
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: message_publish
  endpoint:
    path: /api/messaging/<channel-name>
    method: POST
    data_selector: status
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: message_status
  endpoint:
    path: /api/messaging/default
    method: POST
    data_selector: messageId
- name: default_channel
  endpoint:
    path: /api/publish/default
    method: POST
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: data_object
  endpoint:
    path: /data
    method: GET
    data_selector: records
    params: {}
- name: publish_message
  endpoint:
    path: /api/messaging/Default
    method: POST
    data_selector: headers
    params: {}
- name: publish_message
  endpoint:
    path: /publish
    method: POST
    data_selector: status
    params: {}
- name: scheduled_message
  endpoint:
    path: /api/messaging/default
    method: POST
    data_selector: messageId
    params: {}
- name: publish_message
  endpoint:
    path: /pubsub/publish
    method: POST
    data_selector: status
    params: {}
- name: repeated_publish
  endpoint:
    path: /pubsub/repeated_publish
    method: POST
- name: message
  endpoint:
    path: /api/messaging/default
    method: POST
    data_selector: null
    params: {}
- name: get_message_status
  endpoint:
    path: /pubsub/get_message_status
    method: GET
- name: message_status
  endpoint:
    path: /api/messaging/<message-id>
    method: GET
    data_selector: status
    params: {}
- name: get_message_status
  endpoint:
    path: /push/getMessageStatus
    method: GET
    data_selector: status
    params: {}
- name: message_status
  endpoint:
    path: /getMessageStatus
    method: GET
    data_selector: status
    params:
      message_id: message:6052643A-F96C-4253-BCF0-F606A4BBB794
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: cancel_scheduled_message
  endpoint:
    path: /api/cancel-scheduled-message
    method: POST
- name: cancel_scheduled_message
  endpoint:
    path: /pubsub/cancelScheduledMessage
    method: POST
- name: cancel_scheduled_message
  endpoint:
    path: /messaging/<message-id>
    method: DELETE
    data_selector: status
    params: {}
- name: campaign_member
  endpoint:
    method: GET
- name: contact
  endpoint:
    method: GET
- name: delete_channel
  endpoint:
    path: /pubsub/delete_channel
    method: DELETE
- name: delete_channel
  endpoint:
    path: /delete/channel
    method: DELETE
    data_selector: response
    params: {}
- name: delete_channel
  endpoint:
    path: /api/messaging/channels/<channel-name>
    method: DELETE
    data_selector: null
    params: {}
- name: subscribe
  endpoint:
    path: /messaging/demo/subscribe
    method: POST
    data_selector: subscriptionId
    params: {}
- name: retrieve_messages
  endpoint:
    path: /messaging/demo/{subscriptionId}
    method: GET
    data_selector: messages
    params: {}
- name: publish_message
  endpoint:
    path: /api.backendless.com/APP-ID/REST-API-KEY/messaging/demo
    method: POST
    data_selector: messageId
    params: {}
- name: subscribe
  endpoint:
    path: /messaging/demo/subscribe
    method: POST
    data_selector: null
    params: {}
- name: retrieve_messages
  endpoint:
    path: /messaging/demo/{subscriptionId}
    method: GET
    data_selector: messages
    params: {}
- name: publish_message
  endpoint:
    path: /{APP-ID}/{REST-API-KEY}/messaging/demo
    method: POST
    data_selector: null
    params: {}
- name: subscribe
  endpoint:
    path: /messaging/demo/subscribe
    method: POST
    data_selector: null
    params: {}
- name: retrieve_messages
  endpoint:
    path: /messaging/demo/{subscriptionId}
    method: GET
    data_selector: messages
    params: {}
- name: publish_message
  endpoint:
    path: /APP-ID/REST-API-KEY/messaging/demo
    method: POST
    data_selector: null
    params: {}
- name: publish_message
  endpoint:
    path: /messaging/demo
    method: POST
    data_selector: null
    params: {}
- name: publish_message
  endpoint:
    path: /publish/demo
    method: POST
- name: subscribe
  endpoint:
    path: /messaging/demo/subscribe
    method: POST
    data_selector: subscriptionId
- name: retrieve_messages
  endpoint:
    path: /messaging/demo/{subscriptionId}
    method: GET
    data_selector: messages
- name: publish_message
  endpoint:
    path: /APP-ID/REST-API-KEY/messaging/demo
    method: POST
    data_selector: messageId
- name: send_email
  endpoint:
    path: /api/messaging/email
    method: POST
    data_selector: response
    params: {}
- name: Sending Email
  endpoint:
    path: /email/send
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: email_template
  endpoint:
    path: /email/templates
    method: POST
    data_selector: templates
    params: {}
- name: send_email_template
  endpoint:
    path: /sendEmailTemplate
    method: POST
    data_selector: status
    params: {}
- name: send_email
  endpoint:
    path: /api/emailtemplate/send
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: device_registration
  endpoint:
    path: /registerDevice
    method: POST
    data_selector: DeviceRegistrationResult
    params: {}
- name: Push Template Management
  endpoint:
    path: /push/templates
    method: GET
    data_selector: templates
    params: {}
- name: button_options
  endpoint:
    path: /notification/buttons
    method: GET
    data_selector: options
    params: {}
- name: Push Notifications
  endpoint:
    path: /push
    method: GET
    data_selector: records
- name: DeviceRegistration
  endpoint:
    path: /DeviceRegistration
    method: GET
    data_selector: records
    params: {}
- name: Users
  endpoint:
    path: /Users
    method: GET
    data_selector: records
    params: {}
- name: Action On Tap Event
  endpoint:
    path: /action/on/tap
    method: POST
    data_selector: action
    params: {}
- name: push_notifications
  endpoint:
    path: /push/notification
    method: POST
    data_selector: notifications
    params: {}
- name: Device Registration
  endpoint:
    path: /push/device/registration
    method: POST
- name: Cancel Device Registration
  endpoint:
    path: /push/device/cancel
    method: POST
- name: Retrieve Device Registration
  endpoint:
    path: /push/device/retrieve
    method: GET
- name: campaign_member
  endpoint:
    method: GET
- name: contact
  endpoint:
    method: GET
- name: device_registration
  endpoint:
    path: /api/messaging/registrations
    method: POST
    data_selector: registrationId
- name: Cancel Device Registration
  endpoint:
    path: /push/cancelDeviceRegistration
    method: POST
- name: cancel_device_registration
  endpoint:
    path: /push/cancelDeviceRegistration
    method: POST
- name: cancel_device_registration
  endpoint:
    path: /api/messaging/registrations/<device-id>
    method: DELETE
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: DeviceRegistration
  endpoint:
    path: /data/DeviceRegistration
    method: GET
    data_selector: records
- name: push_notification
  endpoint:
    path: /api/messaging/<channel-name>
    method: POST
    data_selector: status
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Push Notifications
  endpoint:
    path: /push/notification/headers
    method: GET
- name: get_message_status
  endpoint:
    path: /push/getMessageStatus
    method: GET
- name: get_message_status
  endpoint:
    path: /push/get_message_status
    method: GET
- name: message_status
  endpoint:
    path: /api/messaging/<message-id>
    method: GET
    data_selector: status
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: device_registration
  endpoint:
    path: /push/device/registration
    method: GET
- name: device_registration
  endpoint:
    path: /api/push/device/registration
    method: GET
    data_selector: records
- name: device_registration
  endpoint:
    path: /api/messaging/registrations/<device-id>
    method: GET
    data_selector: deviceRegistration
    params: {}
- name: send_notification
  endpoint:
    path: /api/messaging/push/<template-name>
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: push_notification
  endpoint:
    path: /api/messaging/Default
    method: POST
    data_selector: message
- name: push_notification
  endpoint:
    path: /api/messaging/Default
    method: POST
    data_selector: message
    params: {}
- name: push_notification
  endpoint:
    path: /api/messaging/Default
    method: POST
    data_selector: null
    params: {}
- name: messaging
  endpoint:
    path: /api/messaging/Default
    method: POST
    data_selector: message
- name: file_upload
  endpoint:
    path: /files/upload
    method: POST
    data_selector: fileUrl
    params: {}
- name: file_download
  endpoint:
    path: /files/download
    method: GET
    data_selector: fileContent
    params: {}
- name: file_deletion
  endpoint:
    path: /files/delete
    method: DELETE
    data_selector: success
    params: {}
- name: directory_deletion
  endpoint:
    path: /directories/delete
    method: DELETE
    data_selector: success
    params: {}
- name: file_acl
  endpoint:
    path: /files/security
    method: POST
    data_selector: permissions
    params: {}
- name: file
  endpoint:
    path: /files
    method: GET
    data_selector: files
    params: {}
- name: get_public_url
  endpoint:
    path: /files/getPublicUrl
    method: GET
    data_selector: publicUrl
    params: {}
- name: zip_directory
  endpoint:
    path: /files/zipDirectory
    method: POST
    data_selector: archive
    params: {}
- name: file_upload
  endpoint:
    path: /files/file-upload
    method: POST
- name: file_upload
  endpoint:
    path: /files/upload
    method: POST
- name: file_upload
  endpoint:
    path: /file/upload
    method: POST
    data_selector: url
    params:
      source_file_url: ''
      target_file_path: ''
      overwrite: ''
      return_uploaded_file_url: ''
- name: file_upload
  endpoint:
    path: /api/files/<path>/<filename>
    method: POST
    data_selector: fileURL
    params:
      overwrite: 'true'
- name: Save Files From Byte Arrays
  endpoint:
    path: /files/save
    method: POST
- name: save_files_from_byte_arrays
  endpoint:
    path: /files/save
    method: POST
- name: save_file
  endpoint:
    path: /api/files/binary/<filePath>
    method: PUT
    params:
      overwrite: 'true'
- name: file_download
  endpoint:
    path: /<application id>/<REST-API-key>/files/<path>/<file name>
    method: GET
- name: file_download_custom_domain
  endpoint:
    path: /api/files/<path>/<file name>
    method: GET
- name: create_directory
  endpoint:
    path: /files/directory
    method: POST
- name: create_directory
  endpoint:
    path: /files/directory
    method: POST
- name: create_directory
  endpoint:
    path: /api/files/<Directory>/<SubDirectory>
    method: POST
    data_selector: None
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: rename_file_directory
  endpoint:
    path: /renaming-a-file-directory
    method: POST
- name: rename_file_directory
  endpoint:
    path: /files/renaming
    method: POST
- name: rename_file_directory
  endpoint:
    path: /api/files/rename
    method: PUT
    data_selector: null
    params: {}
- name: Copying a File/Directory
  endpoint:
    path: /file/file/copy
    method: POST
- name: Copying a File/Directory
  endpoint:
    path: /file/copy
    method: POST
- name: copy_file_directory
  endpoint:
    path: /copy
    method: POST
    data_selector: return URL of the copied directory/file
    params:
      from_path: string
      to_path: string
- name: copy_file_directory
  endpoint:
    path: /api/files/copy
    method: PUT
    data_selector: message
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: move_file_directory
  endpoint:
    path: /files/move
    method: POST
- name: move_file_directory
  endpoint:
    path: /files/move
    method: POST
- name: move_file_directory
  endpoint:
    path: /api/files/move
    method: PUT
    data_selector: message
    params: {}
- name: directory_listing
  endpoint:
    path: /files/directory
    method: GET
- name: directory_listing
  endpoint:
    path: /files/directory
    method: GET
    data_selector: data
    params: {}
- name: directory_listing
  endpoint:
    path: /get_directory_listing
    method: GET
    data_selector: files
    params: {}
- name: directory_listing
  endpoint:
    path: /api/files/<path>
    method: GET
    data_selector: collection
    params:
      pattern: <pattern>
      sub: <recursive>
      pagesize: <pagesize>
      offset: <offset>
- name: get_files_count
  endpoint:
    path: /file/getFileCount
    method: GET
    data_selector: data
    params: {}
- name: get_files_count
  endpoint:
    path: /files/count
    method: GET
- name: get_files_count
  endpoint:
    path: /files/getFilesCount
    method: GET
    data_selector: count
    params:
      path: days
      recursive: 'true'
      count directories: 'true'
- name: files_count
  endpoint:
    path: /api/files/<path>
    method: GET
    data_selector: null
    params:
      action: count
      pattern: <pattern>
      sub: <sub>
      countDirectories: <countDirectories>
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: delete_file
  endpoint:
    path: /files/delete
    method: DELETE
- name: delete_file
  endpoint:
    path: /files/delete
    method: DELETE
- name: delete_file
  endpoint:
    path: /delete/file
    method: DELETE
    data_selector: null
    params:
      file_path: notes/grocery.txt
- name: delete_file
  endpoint:
    path: /api/files/<path>/<filename>
    method: DELETE
    data_selector: null
    params: {}
- name: Deleting a Directory
  endpoint:
    path: /files/directory
    method: DELETE
- name: deleting_directory
  endpoint:
    path: /files/directory/deletion
    method: DELETE
- name: delete_directory
  endpoint:
    path: /<path>
    method: DELETE
    data_selector: null
    params: {}
- name: delete_directory
  endpoint:
    path: /delete/directory
    method: DELETE
    data_selector: none
    params:
      directory path: path/to/directory
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: append_data_to_file
  endpoint:
    path: /files/append
    method: POST
- name: append_data_to_file
  endpoint:
    path: /files/append
    method: POST
- name: append_raw_text
  endpoint:
    path: /api/files/append/<path>
    method: PUT
    data_selector: response
    params: {}
- name: append_base64_content
  endpoint:
    path: /api/files/append/binary/<path>
    method: PUT
    data_selector: response
    params: {}
- name: append_local_file
  endpoint:
    path: /api/files/append/<path>
    method: POST
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: data_object
  endpoint:
    path: /data
    method: GET
    data_selector: records
- name: files_security
  endpoint:
    path: /files/security
    method: GET
    data_selector: permissions
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: file
  endpoint:
    path: /files
    method: GET
    data_selector: records
    params: {}
- name: set_permissions_user_role
  endpoint:
    path: /permissions/user_role
    method: POST
    data_selector: permissions
    params: {}
- name: set_permissions_all_users_roles
  endpoint:
    path: /permissions/all_users_roles
    method: POST
    data_selector: permissions
    params: {}
- name: permissions
  endpoint:
    path: /api/files/permissions/<permission type>/<path>/<file_name>
    method: PUT
    data_selector: void or error
    params: {}
- name: campaign_member
  endpoint:
    method: GET
- name: contact
  endpoint:
    method: GET
- name: logging_message
  endpoint:
    path: /api/logging
    method: POST
    data_selector: message
    params: {}
- name: log_message
  endpoint:
    path: /logging
    method: POST
    data_selector: log
    params: {}
- name: log_message
  endpoint:
    path: /api/log
    method: PUT
    data_selector: none
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: cache_object
  endpoint:
    path: /<key>
    method: PUT
    data_selector: body
    params:
      timeout: <timeToLive>
- name: cache
  endpoint:
    path: /cache
    method: PUT
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: cache_object
  endpoint:
    path: /api/cache/<key>
    method: GET
    data_selector: 'null'
    params: {}
- name: cache
  endpoint:
    path: /cache
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Check If Key Exists
  endpoint:
    path: /check-if-key-exists
    method: GET
- name: check_key_exists
  endpoint:
    path: /api/cache/check_key_exists
    method: GET
- name: cache_check
  endpoint:
    path: /api/cache/<key>/check
    method: GET
    data_selector: response
- name: extending_object_cache
  endpoint:
    path: /cache/extend
    method: POST
    data_selector: data
    params: {}
- name: cache_expiration
  endpoint:
    path: /api/cache/<key>/expireIn
    method: PUT
- name: cache_expiration_fixed
  endpoint:
    path: /api/cache/<key>/expireAt
    method: PUT
- name: deleting_object_from_cache
  endpoint:
    path: /ut/deleting_object_from_cache
    method: DELETE
- name: delete_object_from_cache
  endpoint:
    path: /cache/delete
    method: DELETE
- name: cache_object
  endpoint:
    path: /api/cache/<key>
    method: DELETE
    data_selector: null
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: mycounter
  endpoint:
    path: /counters/mycounter/increment/get
    method: PUT
    data_selector: ''
    params: {}
- name: increment_by_1_return_previous
  endpoint:
    path: /increment_by_1_return_previous
    method: POST
- name: increment_by_1_return_previous
  endpoint:
    path: /api/counters/increment
    method: POST
    data_selector: result
- name: increment_counter
  endpoint:
    path: /api/counters/<counterName>/get/increment
    method: PUT
    data_selector: null
    params: {}
- name: increment_by_1_return_current
  endpoint:
    path: /ut/incrementBy1/returnCurrent
    method: GET
- name: increment_by_1_return_current
  endpoint:
    path: /ut/incrementBy1/returnCurrent
    method: POST
- name: counter
  endpoint:
    path: /codeless/atomic_counters/increment
    method: POST
    data_selector: current_value
    params:
      counter_name: CarsParkingLot
      increment_by: 1
      return_current_value: true
- name: increment_counter
  endpoint:
    path: /api/counters/<counterName>/increment/get
    method: PUT
    data_selector: Numeric value
- name: decrement
  endpoint:
    path: /api/ut/decrement
    method: POST
- name: decrement
  endpoint:
    path: /api/data/counters/decrement
    method: POST
- name: decrement_counter
  endpoint:
    path: /api/counters/<counterName>/get/decrement
    method: PUT
    data_selector: Numeric value
- name: decrement
  endpoint:
    path: /api/decrement
    method: POST
    data_selector: result
- name: decrement_counter
  endpoint:
    path: /api/counters/<counterName>/decrement/get
    method: PUT
    data_selector: Numeric value
- name: decrement
  endpoint:
    path: /api/decrement
    method: POST
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: increment_by_n_return_current
  endpoint:
    path: /incrementByN/returnCurrent
    method: POST
- name: increment_by_n
  endpoint:
    path: /api/incrementByN
    method: POST
    data_selector: result
- name: counter_increment
  endpoint:
    path: /api/counters/<counterName>/incrementby/get
    method: PUT
    data_selector: Numeric value
    params:
      value: <value>
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: increment_by_n_return_previous
  endpoint:
    path: /api/incrementByN/returnPrevious
    method: POST
- name: increment_by_n_return_previous
  endpoint:
    path: /increment/by/n/return/previous
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: increment_counter
  endpoint:
    path: /api/counters/<counterName>/get/incrementby
    method: PUT
    params:
      value: <value>
- name: conditional_update
  endpoint:
    path: /conditional/update
    method: POST
    data_selector: data
    params: {}
- name: conditional_update
  endpoint:
    path: /<counterName>/get/compareandset
    method: PUT
    data_selector: Boolean value
    params:
      expected: <expected>
      updatedvalue: <updated>
- name: get_current
  endpoint:
    path: /ut/get/current
    method: GET
- name: counters
  endpoint:
    path: /counters
    method: GET
    data_selector: records
- name: counter
  endpoint:
    path: /counters/current
    method: GET
    data_selector: value
    params:
      counter name: name_of_the_counter
- name: counter
  endpoint:
    path: /api/counters/<counterName>
    method: GET
    data_selector: Current counter value
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: counters
  endpoint:
    path: /counters
    method: GET
- name: counters_listing
  endpoint:
    path: /get/counters/listing
    method: GET
- name: counters_listing
  endpoint:
    path: /counters
    method: GET
    data_selector: counter_names
    params:
      name_pattern: '*'
- name: counters
  endpoint:
    path: /api/counters/<counterNamePattern>/list
    method: GET
    data_selector: response
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: reset_counter
  endpoint:
    path: /api/counters/<counterName>/reset
    method: PUT
    data_selector: null
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Documents
  endpoint:
    path: /data/Documents
    method: GET
    data_selector: records
- name: Products
  endpoint:
    path: /data/Products
    method: GET
    data_selector: records
- name: SampleValues
  endpoint:
    path: /data/SampleValues
    method: GET
    data_selector: records
- name: data_import
  endpoint:
    path: /data/import
    method: POST
    data_selector: records
- name: Country
  endpoint:
    path: /data/Country
    method: POST
    data_selector: records
    params: {}
- name: City
  endpoint:
    path: /data/City
    method: POST
    data_selector: records
    params: {}
- name: App Zip
  endpoint:
    path: /import/app-zip
    method: POST
    data_selector: result
    params: {}
- name: App Settings (JSON)
  endpoint:
    path: /import/app-settings-json
    method: POST
    data_selector: result
    params: {}
- name: Data Tables (CSV)
  endpoint:
    path: /import/data-tables-csv
    method: POST
    data_selector: result
    params: {}
- name: Firebase Users
  endpoint:
    path: /import/firebase-users
    method: POST
    data_selector: result
    params: {}
- name: AirTable Data
  endpoint:
    path: /import/airtable-data
    method: POST
    data_selector: result
    params: {}
- name: email_settings
  endpoint:
    path: /manage/email-settings
    method: POST
    data_selector: settings
    params: {}
notes:
- Every Backendless application has its own Billing plan and an ongoing subscription.
- When you create a new application, it is automatically placed on the Free plan.
- Make sure to use the 'REST API Key' for the api-key argument.
- Requires Application ID and API Key for authentication
- Requires setup of connected app in Backendless
- Ensure to handle subscription lifecycle properly.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Uses a guest login method for user authentication
- Anonymous login operation ignores validators for columns in Users table.
- Guest accounts may be purged from the system if abandoned.
- This API is used to exchange login provider's access token to the user object.
- The authorization token is generated on every successful login.
- Uses OAuth2 with refresh token — requires setup of connected app in Backendless
- Requires OAuth2 setup for access
- Make sure to include the user ID in the request body for updates.
- This API must be used from a controlled environment.
- The REST API is used with the CloudCode API key.
- User disable feature may require additional permissions.
- This operation does not return a value.
- Contains a value returned by Backendless in a preceding user Login API call.
- Password reset functionality available.
- A permission assigned at that level applies to all operations on the table.
- To view, assign or modify an asset container permission, use a corresponding screen
  in the Backendless Console.
- Asset permissions are the most granular in the Backendless security system as they
  apply to a specific object.
- Some objects may return nulls in deeply nested fields
- Business logic is the only exception to the rule for assigning NotAuthenticatedUser
  and AuthenticatedUser roles.
- This API must be used from a controlled environment due to security concerns.
- The identity column in the Users table is typically email.
- When you create a table in Backendless, the APIs to work with the data records become
  instantly available.
- Available data types include STRING, INT, BOOLEAN, DATETIME, DECIMAL, DOUBLE, FILE
  REFERENCE, GEOMETRY, JSON, LARGE TEXT, MONEY, MULTIPLE CHOICE, TEXT, COLOR.
- Boolean columns can hold the value of true, false or NULL.
- When you add a generated column, you provide the formula and the database automatically
  calculates the results based on the data in your database.
- If the table where the objects can be stored does not exist, it is automatically
  created based on the name specified in the request URL.
- Requires configuration of OAuth2 for user authentication.
- Some endpoints may have rate limits or require specific permissions
- OAuth2 requires setup of connected app in Backendless
- Requires valid objectId to delete a single object.
- The tables/schema where the data is being saved must be created before the API is
  used.
- Backendless requires OAuth2 setup for accessing resources.
- Ensure proper roles are assigned for user access.
- Basic Object Retrieval API for accessing data objects.
- Optional header user-token allows executing operations with user permissions.
- Uses OAuth2
- The value must be URL-encoded. The spaces are replaced with %20
- The value must be URL-encoded.
- Results can be grouped by values from another column.
- There is a special consideration for the whereClause-based queries which reference
  a column of the DATETIME data type.
- Typically a DATETIME column is referenced in a comparison against a scalar value
  describing a specific date or a timestamp.
- Backendless server sets the maximum allowed value for the page size to 100 objects.
  The minimum value is 1.
- Data retrieval and search API can request the server to return sorted data.
- The sorting direction can be either ascending (default) or descending for each individual
  column.
- The request body must be a JSON object with the structure specified in the documentation.
- The application must be setup with demo data in order to run the example and see
  the distance operator in action.
- Both parent and child objects must exist in the Backendless storage.
- If a column identifies a 1:1 relation which already exists between the parent and
  some other object, the "set" operation must replace the child object with the one
  identified in the operation.
- The "add" operation must return an error.
- Add/set methods must return the number of objects added/set.
- If add/set receives a non-existing object, it must be ignored.
- Both operations create the relation column if it does not exist at the time of the
  method call.
- Single Step Retrieval loads only a partial set of the related objects (default size
  of the retrieved related collection is 10).
- Loading relations with relation depth retrieves only a partial set of the related
  objects (default size of the retrieved related collection is 10).
- Uses OAuth2 for authentication
- The request must use a specific format for the JSON column in the API request.
- Spatial data can be represented in WKT or GeoJSON formats.
- Spatial values must be stored in columns of the POINT, LINESTRING, POLYGON or the
  GEOMETRY data types.
- Make sure to replace xxxx in the domain name in the sample request with the one
  assigned to your application.
- To delete contents of a record, update the value in a specific column to null.
- If any of the operations fail, the entire transaction is rolled back - there is
  no need to perform any clean up from your code.
- From the client-side perspective there is only one request going to the server -
  the request to execute the transaction.
- Consistency and referential integrity - transactions ensure that there is no 'dirty
  data' in your database.
- Backendless Database can execute multiple database requests grouped into a single
  transaction.
- The 'Repeatable read' is the default isolation level in the Backendless Database.
- Uses OAuth2 with refresh token
- Transaction Isolation levels include Read uncommitted, Read committed, Repeatable
  read, Serializable.
- The schema for both tables should be created before executing transactions.
- You can retrieve a single object by setting the pageSize option to 1.
- The operation type must be 'CREATE' to save a new object in the database.
- To update more than one object, use the bulkUpdate operation.
- Supports updating multiple objects in a single request.
- Operation returns the number of updated objects.
- To delete more than one object, use the bulkDelete operation.
- A relationship in the Backendless database must be declared as a column in a data
  table.
- Deleting from a relation is an operation that can be performed through the API.
- Permissions can be granted or rejected globally, where they apply to all tables
  and all objects in the data store.
- Every table may have its own permission matrix and owner policy - a special instruction
  whether object owners can or cannot retrieve/update/delete the objects they 'own'.
- The security system is multi-layered.
- Backendless checks if there are any restrictions for the user account at the object
  level.
- Every table in Backendless may have its own set of permissions for users and roles.
- Backendless provides a way to control whether users can get access to the data they
  created through 'Owner Policy'.
- Global policy applies to all tables and objects.
- By default all table level permissions inherit from the global policy.
- Ensure correct permissions are set for the API access.
- Requires authorization for accessing API.
- Requires setup of connected app in api
- Requires proper API keys and setup.
- Ensure proper authentication setup for accessing the API.
- Reset Last Operation Time API is used to reset the last operation timestamp.
- Some responses may include null values in certain fields
- Requires user authentication to access the API
- List indexes are zero-based.
- Negative indexes can be used to retrieve values from the end of the list.
- The request body must be a JSON array of values. Each individual value must of a
  valid JSON type.
- Optional parameter count defaults to 1.
- API requires proper authentication setup.
- Requires OAuth2 setup for authentication
- Ensure proper authentication is set up for API access.
- Backendless REST API requires authentication
- Returns a JSON array containing set's values. Otherwise, returns an empty response
  body if the specified key does not exist.
- OAuth2 authentication required for API access
- The request body must be an array containing JSON values to check if they are in
  the set.
- Ensure proper authorization headers are included for the delete operation.
- Some responses may have nested structures
- Requires setup of OAuth2 for authentication
- API requires authentication for all endpoints
- Deleting multiple values based on minimum score criteria.
- This API endpoint allows deletion of values based on a specified rank range.
- Requires OAuth2 authentication.
- Message retrieval requires establishing a subscription first.
- 'Important: The request must specify the channel name.'
- Publish with Headers
- Must specify Unix Timestamp for publish at in milliseconds since the Epoch.
- Publish operation returns an object containing the status of the message delivery
  and a unique message identifier.
- If the status property is 'failed', the errorMessage property should contain the
  details of the failure.
- Requires OAuth2 setup for API access
- Refer to the specific endpoint documentation for details on request and response.
- Ensure proper permissions are set for channel deletion
- Make sure to replace xxxx in the domain name in the sample requests below to the
  one assigned to your application.
- Uses OAuth2 for authentication.
- API for sending out custom email messages to the users of your application.
- Make sure to click Test before saving any configuration changes.
- The Reset button discards any unsaved changes.
- A mail server must be configured in your Backendless app to enable the email delivery
  API.
- OAuth2 authentication is required.
- Make sure to follow the instructions from the Google's documentation
- Backendless service for Android must be registered in the app's manifest.
- Backendless requires access to the certificate created for Push Notifications.
- Buttons in a Button Options Configuration with the selected 'Inline reply' checkbox
  have special handling on the device.
- All listed elements of a push notification (message body, title, subtitle and the
  headers) can be defined on the 'WHAT' section in Push Composer.
- You should create a channel for each distinct type of notification you need to send.
- A channel configuration can be referenced in a Push Template on the OPTIONS screen.
- Badge Number is dependent on the Android launcher installed on the device.
- Requires proper setup of Backendless application.
- The headers described must be included with every push notification when using the
  Push API.
- Requires setup of Backendless application.
- Requires proper setup of application in Backendless.
- Archiving of directories with total content size greater than 100 Mb may take longer
  time.
- File Upload requires specific request headers and body format.
- The path must start with the root directory of the remote file storage.
- If the directory does not exist, a new one is created.
- When the operation is performed, it can return a URL to the moved file or directory.
- Requires authorization to delete files.
- Uses OAuth2 with refresh token — requires setup of connected app in Backendless.
- 'The permission assignment popup contains two sections: USER PERMISSIONS and ROLES
  PERMISSIONS which allow permission management either for a specific user account
  or for application roles.'
- The user account (or the role) must contain the Permission permission.
- You can set up caching preferences both at the folder level and for individual files
  within Backendless.
- If you configure caching at the folder level, it will be applied recursively to
  all files contained within that folder and its subfolders.
- If a specific individual file has its own caching configuration, it will override
  the folder-level settings.
- user-token is optional and obtained from the login operation
- The default value for time to live is 7200 seconds.
- Requires setup of connected app in backendless
- Extending the life of object in cache
- Key assigned to the object to identify it in cache.
- Number of seconds to extend the life of an object in cache by. Must be a value between
  1 and 7200 (2 hours).
- API requires authentication for accessing endpoints.
- Operation will be executed with the security policy associated currently logged
  in user.
- When this box is checked, the operation returns the current value of the counter.
- Conditional update supports updating data objects conditionally.
- The Discard button discards any unsaved changes.
- Backendless will allow only requests originating from the specified hosts.
errors:
- '401 Unauthorized: Invalid Application ID or API Key'
- '404 Not Found: Resource does not exist'
- 'message: error-message'
- 'code: error-code'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '4068: GeoPoint coordinates not found. Either add them to the request URL or add
  the Content-Type:application/json header and put the coordinates into the request
  body.'
- '4080: Cannot accept discovered beacons - discovery mode is turned off.'
- '5000: Unable to retrieve device. Invalid device ID.'
- '5001: Unable to cancel device registration. Invalid device ID'
- '5002: Unable to create subscription - unknown messaging channel.'
- '5003: Invalid expiration date'
- '5004: Unable to register device. Invalid expiration date.'
- '5005: Wrong json format for device registration:'
- '5006: Device registration can''t be null'
- '5007: User has no permission to publish message'
- '5008: User has no permission to subscribe'
- '5009: Error during subscribing'
- '5010: Can''t find message channel with such name for the given application'
- '5011: Unable to register device, deviceId cannot be null'
- '5012: Channel with name ''%s'' already exists'
- '5030: Invalid publish date'
- '5040: Can''t cancel message. Already cancelled or there is no such message'
- '5041: Invalid message for push notification, provide message that could be cast
  to String'
- '5042: Unable to delete devices'
- '5043: Could not register channel'
- '5044: Channel name contains invalid character'
- '5045: Cannot send email with the default Email Settings. Change the Email Settings
  in the console and try again'
- '5046: Cannot set email. Invalid email settings'
- '5047: Invalid recipient'
- '5048: You must specify at least one recipient''s email address'
- '5049: You must specify at least one body'
- '5050: Unable to complete operation. Backend application is not properly configured.
  Contact the application developer and report a problem with Email Configuration'
- '5052: Cannot send email. Invalid path for the attachment(s).'
- '5053: Cannot send email. Error: %s'
- '999: Cannot process request - request per second limit has been exhausted'
- '1000: Entity with the specified ID cannot be found'
- '1001: Cannot update object without any properties'
- '1002: Cannot process request, use User Service to create new user entities.'
- '1003: Cannot persist object. Property "id" must be set by the server. Make sure
  the property is not initialized when saving new object.'
- '1004: Invalid offset. Offset must be greater than 0 and less than the total number
  of records'
- '1005: Invalid pagesize. Page size cannot be negative. Values greater than 100 will
  default to 100.'
- '1006: Unable to retrieve data. Query contains invalid object properties.'
- '1007: Unable to update object - invalid data type for properties - XXX.'
- '1009: Unable to retrieve data - unknown entity'
- '1010: Unable to retrieve data - object store is empty'
- '1011: User has no permission to create entity'
- '1012: User has no permission to update entity'
- '1013: User has no permission to find elements in persistence storage.'
- '1014: User has no permission to delete elements from persistence storage.'
- '1015: User has no permission to describe elements from persistence storage.'
- '1017: Invalid where clause'
- '1020: Missing ___class property for entity:'
- '1021: There are no such properties :'
- '1022: All related objects for a property must be of the same type'
- '1023: User has no permission to change permission for the current table.'
- '1024: Cannot update permission: %s'
- '1025: Invalid pagesize. Page size cannot be greater than 100.'
- '1026: The object exceeds maximum permitted serialized size of 10240 bytes'
- '1027: Key can not be null'
- '1028: Expiration time cannot be greater than 7200 seconds'
- '1029: Expected value cannot be null'
- '1030: Value is too large for the ''Long'' type'
- '1031: Timestamp should be after the current date'
- '1032: Unable to remove the object. Property objectId is missing.'
- '1034: Unable to retrieve the object. Property objectId is missing.'
- '1035: Unable to retrieve object. Object with the specified primary key does not
  exist.'
- '1036: Bulk update operation is prohibited for the system columns: %s, %s, ...'
- '1037: Property doesn''t exist: %s'
- '1038: Grave character is not allowed in property name: %s, %s, ...'
- '1101: Failed to create entity. Entity with the same primary key already exists'
- '1102: Failed to perform operation due to incomplete primary key. Please, specify
  all elements of a composite key correctly'
- '1103: This operation is not supported for external data sources'
- '1104: In external data mode the access to internal data tables is denied'
- '1105: Could not delete entity due to its being referenced by parent foreign entity.
  Please, delete parent entity before deleting this one.'
- '1107: Could not perform operation due to missing primary key'
- '1108: Inspection failed due to a table name collision of an external data table
  and Users table. Please rename the appropriate table in your external database to
  resolve this conflict.'
- '1109: Could not connect to external database. Password field may not be empty.'
- '1110: Saving object failed due to incorrect datetime value specified.'
- '1111: In external mode relationship from geo-point cannot be established.'
- '1125: Unable to save entity, table, %s does not exist'
- '1126: Unable to save entity, column %s does not exist'
- '1127: Unable to define relationship, column %s does not exist'
- '1128: Unable to save more than one related object for column %s'
- '1129: Unable to perform operation due to incomplete primary key. Missing column:
  %s'
- '1130: Unable to perform operation due to incorrectly specified primary key. Column
  %s is not a part of a composite primary key.'
- '1131: Unable to save entity. The required column %s in table %s is missing'
- '1132: Unable to save entity. Related table %s does not exist.'
- '1133: Unable to inspect tables. %s exceeds maximum allowed size of 45 characters.
  Please, rename it and try again.'
- '1134: Current user has no permission for %s operation on this table'
- '1135: The entity name ''GeoPoint'' is reserved'
- '1136: Bulk update is prohibited for system columns: %s'
- '1137: Unable to save entity, property %s cannot be null'
- '1138: Concurrent schema modification'
- '1139: There is more then one primary key in the schema, use findById with object
  argument'
- '1140: Remote database unavailable'
- '1141: Table has no primary key'
- '1142: Product has already been changed'
- '1143: Failed to add column'
- '1144: Failed to delete column'
- '1145: Update column failed'
- '1146: Delete all records failed'
- '1147: Add relation failed'
- '1148: Operations in the Users table are prohibited. Use UserProperty service'
- '1149: The maximum number of columns is reached. Adding new column failed'
- '1150: Before creating a relation please add a related table. Adding a relation
  failed'
- '1151: The maximum number of columns is already reached. Update column failed'
- '1152: Column with the same name already exists'
- '1153: Failed to update relationship'
- '1154: Could not add new table. This name is reserved, please choose another table
  name'
- '1155: Duplicate entry'
- '1156: Unable to set not null (required) constraint because column already contains
  nulls. Remove/initialize null entries and try again'
- '1157: Unable to set unique constraints for one-to-many relation'
- '1158: Unable to add index for relation column'
- '1159: Failed to update column with current constraints. Retry without constraints'
- '1160: External database inspection is already in progress'
- '1161: Table with the same name already exists'
- '1162: Fetch of UserDataTable %`s size failed'
- '1163: Operation over system column % is prohibited'
- '1164: Updating column type failed. Changing column to type % will lead to loss
  of data.'
- '1165: Column ''%'' cannot be empty'
- '1166: Duplicate entry for column ''%'''
- '1167: Could not remove relation. First disable not null (required) relation for
  column ''%'''
- '2002: Invalid application info (application id or api key)'
- '3009: User registration is disabled for the application'
- '3010: User registration has an unknown property and dynamic properties are disabled
  for this version of the application'
- '3011: Missing "password" property'
- '3012: Required property is missing'
- '3013: Missing value for the identity property'
- '3014: External registration failed with an error.'
- '3021: General user registration error. Details included with the error message.'
- '3033: User with the same identity already exists'
- '3038: Missing application-id or collection of properties for the registering user'
- '3039: Property "id" cannot be used in the registration call'
- '3040: Email address is in the wrong format'
- '3041: A value for a required property is missing'
- '3043: Duplicate properties in the registration request'
- '8000: Property value exceeds the length limit'
- '401 Unauthorized: Invalid login credentials'
- '403 Forbidden: Access denied'
- '2002: Version is disabled or provided wrong application info (application id or
  secret key)'
- '3000: Login has been disabled for the user account.'
- '3001: Missing login settings, possibly invalid application id or version.'
- '3002: User cannot login because Multiple Logins disabled and there is a logged
  in user for the account.'
- '3003: Invalid login or password.'
- '3006: Either login or password is an empty string value.'
- '3034: User logins are disabled for the version of the application.'
- '3036: Account locked out due to too many failed logins.'
- '3038: One of the required parameters (application id, version, login or password)
  is null'
- '3044: Multiple login limit for the same user account has been reached.'
- 'USER_NOT_FOUND: The specified user ID does not exist.'
- 'INVALID_REQUEST: The request body is malformed.'
- '3018: The property marked as "identity" is being updated and another user already
  has the specified value which must be unique.'
- '3024: General "update registration" error. Error message should contain additional
  details.'
- '3028: User is not logged in.'
- '3029: Cannot modify properties of another user. Returned when one user is logged
  and the call attempts to modify properties of another user.'
- '3030: Unable to locate user account - invalid user id.'
- '3031: A new "dynamic" property is being added, but dynamic property definition
  is disabled.'
- '3045: Required properties in the provided object do not contain values.'
- '400 Bad Request: Invalid request parameters'
- '401 Unauthorized: Invalid token or missing authorization'
- '3102: User has already confirmed the email address. Email confirmation will not
  be sent.'
- '3103: Unable to send email confirmation. The ''Require Email Confirmation'' option
  must be enabled in Backendless Console.'
- '3104: Unable to send email confirmation - user account with the email cannot be
  found.'
- '401 Unauthorized: Invalid credentials'
- '3007: Invalid application-id or version.'
- '3023: General error while executing logout. Error details should be available in
  the message property.'
- 'INVALID_EMAIL: The provided email address is not valid.'
- 'USER_NOT_FOUND: No user found with the provided email address.'
- '3020: Unable to find user with the specified login (invalid user identity).'
- '3025: General password recovery error. Additional details should be available in
  the ''message'' property of the response.'
- '3038: One of the requirement arguments (application id, version or user identity)
  is missing.'
- '2005: Could not find role.'
- '3038: One of the required parameters (user identity or roleName) is null.'
- '3057: Could not find user by id or identity.'
- '3058: Could not assign role to user.'
- '3059: Could not unassign role to user.'
- '401 Unauthorized: Check client_id and client_secret.'
- '403 Forbidden: Insufficient permissions for the requested resource.'
- '404 Not Found: The specified object does not exist.'
- '401 Unauthorized: Invalid or expired token.'
- 'USER_NOT_FOUND: Check if the user exists.'
- 'INVALID_CREDENTIALS: Verify the provided credentials.'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of API calls.'
- 'INVALID_API_KEY: Check API key validity'
- 'UNAUTHORIZED: Verify OAuth token'
- '401 Unauthorized: Check your client credentials.'
- '404 Not Found: The specified key does not exist.'
- '27003: no such key'
- '401 Unauthorized: Invalid API key or access token.'
- '401 Unauthorized: Check your API key or OAuth token.'
- '401 Unauthorized: Invalid API key'
- '404 Not Found: Endpoint does not exist'
- '401 Unauthorized: Check your OAuth token'
- '404 Not Found: Verify the key path'
- '401 Unauthorized: Check API key or token expiration'
- '401 Unauthorized: Check your API key.'
- '404 Not Found: Check if the resource ID is correct.'
- '401 Unauthorized: Verify API keys or authentication credentials.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Check your authentication details'
- '404 Not Found: Verify the endpoint'
- '404 Not Found: Check the endpoint path'
- 'message: error-message, code: error-code'
- error-message
- error-code
- '5003: Invalid repeatExpiresAt date'
- '5007: User does not have the permission to publish messages'
- '5030: Invalid publishAt date'
- '401 Unauthorized: Check your credentials'
- '404 Not Found: Verify the endpoint URL'
- '5040: Message has already been canceled or does not exist.'
- '404 Not Found: Channel does not exist'
- '403 Forbidden: Insufficient permissions to delete channel'
- 'error-message: error-code'
- Email API will return an error if the server information is not provided.
- '401 Unauthorized: Check your API key or token.'
- '404 Not Found: Verify the endpoint URL.'
- '5004: Invalid expiration date. The expiration date must be after the current time.'
- '8000: Property value exceeds the length limit. Error message should contain additional
  details about the violating property.'
- '5001: Unable to cancel device registration - unknown device ID.'
- '5003: Invalid `repeatExpiresAt` date'
- '5030: Invalid `publishAt` date'
- '401 Unauthorized: Check your credentials and permissions.'
- '404 Not Found: Ensure the endpoint is correct.'
- '5000: Unable to retrieve device registration - unknown device ID.'
- '6016: When saving a new file from the byte array, the payload exceeds 2,800,000
  bytes.'
- '6003: A file you are trying to save already exists in the system and cannot overwrite
  since `overwrite` argument is either set to `false` or omitted.'
- '4000: User has no permissions to specified resource'
- '6000: File or directory cannot be found.'
- '6006: Path contains prohibited symbols: {path name}'
- '6007: The specified resource was not found'
- '6018: Unable to modify file/folder: file/folder already exists: {file/directory
  name}'
- '6028: Parameter {param name} cannot be null'
- '8010: Missing field {field name}'
- '8011: Content type should be ''application/json'''
- '6021: Unable to move file to file'
- '6023: File already exists in target directory'
- '6029: Specified resource must be a directory'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '401 Unauthorized: Recheck OAuth configuration'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - User
  - Session
  - ServerCodeUser
  - NotAuthenticatedUser
  - AuthenticatedUser
  - SocialUser
  - FacebookUser
  - GooglePlusUser
  - TwitterUser
  - ASUser
  - AndroidUser
  - DotNetUser
  - IOSUser
  - JSUser
  - RestUser
  - Role
  - OAuth2
client:
  base_url: https://xxxx.backendless.app
  headers: {}
  resources:
  - name: iOS Receipt Validation
    endpoint:
      path: /commerce/apple/verifyReceipt
      method: POST
      data_selector: body
      params: {}
  - name: Android Receipt Validation
    endpoint:
      path: /commerce/googleplay/validate/[packageName]/inapp/[productId]/purchases/[token]
      method: GET
      data_selector: body
      params: {}
source_metadata: null
