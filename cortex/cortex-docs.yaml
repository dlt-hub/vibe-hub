resources:
- name: groups
  endpoint:
    path: /api/rest/groups
    method: GET
- name: groups
  endpoint:
    path: /api/v1/catalog/tagorid/groups
    method: GET
    data_selector: groups
    params: {}
- name: groups
  endpoint:
    path: /api/v1/catalog/{tagOrId}/groups
    method: GET
    data_selector: groups
    params:
      pageSize: 250
      page: 0
- name: add_groups
  endpoint:
    path: /api/v1/catalog/{tagOrId}/groups
    method: PUT
    data_selector: groups
    params: {}
- name: delete_groups
  endpoint:
    path: /api/v1/catalog/{tagOrId}/groups
    method: DELETE
    data_selector: groups
    params: {}
- name: listAllEntities
  endpoint:
    path: /api/rest/catalog-entities
    method: GET
- name: listEntityDescriptors
  endpoint:
    path: /api/rest/catalog-entities
    method: GET
- name: listDependenciesForEntity
  endpoint:
    path: /api/rest/dependencies
    method: GET
- name: getDependency
  endpoint:
    path: /api/rest/dependencies
    method: GET
- name: getEntityDetails
  endpoint:
    path: /api/rest/catalog-entities
    method: GET
- name: getCustomDataForEntity
  endpoint:
    path: /api/rest/custom-data
    method: GET
- name: getCustomDataForEntityByKey
  endpoint:
    path: /api/rest/custom-data
    method: GET
- name: getCurrentOncallForEntity
  endpoint:
    path: /api/rest/on-call
    method: GET
- name: getEntityDescriptor
  endpoint:
    path: /api/rest/catalog-entities
    method: GET
- name: listInitiatives
  endpoint:
    path: /api/rest/initiatives
    method: GET
- name: getInitiative
  endpoint:
    path: /api/rest/initiatives
    method: GET
- name: listRelationshipTypes
  endpoint:
    path: /api/rest/entity-relationship-types
    method: POST
- name: getRelationshipTypeDetails
  endpoint:
    path: /api/rest/entity-relationship-types
    method: GET
- name: listEntityRelationships
  endpoint:
    path: /api/rest/entity-relationships
    method: GET
- name: listScorecards
  endpoint:
    path: /api/rest/scorecards
    method: GET
- name: getScorecard
  endpoint:
    path: /api/rest/scorecards
    method: GET
- name: getScorecardNextStepsForEntity
  endpoint:
    path: /api/rest/scorecards
    method: GET
- name: listScorecardScores
  endpoint:
    path: /api/rest/scorecards
    method: GET
- name: employee-sally
  endpoint:
    path: /path/to/employee-sally
    method: GET
    data_selector: records
    params: {}
- name: eng-team
  endpoint:
    path: /path/to/eng-team
    method: GET
    data_selector: records
    params: {}
- name: deployment
  endpoint:
    path: /x-cortex-k8s/deployment
    method: GET
    data_selector: deployment
    params: {}
- name: argorollout
  endpoint:
    path: /x-cortex-k8s/argorollout
    method: GET
    data_selector: argorollout
    params: {}
- name: statefulset
  endpoint:
    path: /x-cortex-k8s/statefulset
    method: GET
    data_selector: statefulset
    params: {}
- name: cronjob
  endpoint:
    path: /x-cortex-k8s/cronjob
    method: GET
    data_selector: cronjob
    params: {}
- name: entity_owners
  endpoint:
    path: /configure/settings/notifications
    method: GET
    data_selector: owners
    params: {}
- name: entity_ownership
  endpoint:
    path: /admin/entities
    method: GET
    data_selector: entities
    params: {}
- name: deploy
  endpoint:
    path: /{repo_name}/deploys
    method: POST
    data_selector: customData
    params: {}
- name: deploy_data
  endpoint:
    path: /api/rest/deploys
    method: GET
    data_selector: records
- name: deploys
  endpoint:
    path: /deploys
    method: POST
    data_selector: customData
    params: {}
- name: deploy_data
  endpoint:
    path: /api/rest/deploys
    method: GET
    data_selector: deployments
- name: deploys
  endpoint:
    path: /$REPO_NAME/deploys
    method: POST
    data_selector: customData
- name: deploys
  endpoint:
    path: /api/rest/deploys
    method: GET
    data_selector: List
    params:
      lookback: Duration
      types: List
- name: custom_data
  endpoint:
    path: /api/rest/custom-data
    method: POST
    data_selector: data
- name: custom_data
  endpoint:
    path: /api/v1/catalog/{tag}/custom-data
    method: POST
    data_selector: values
- name: bulk_upload_custom_data
  endpoint:
    path: /api/v1/catalog/custom-data
    method: PUT
    data_selector: values
- name: on_call_assistant
  endpoint:
    path: /api/rest/on-call
    method: GET
- name: default_catalogs
  endpoint:
    path: /catalogs/default
    method: GET
    data_selector: catalogs
    params: {}
- name: custom_catalogs
  endpoint:
    path: /catalogs/custom
    method: GET
    data_selector: catalogs
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: deploy
  endpoint:
    path: /api/v1/catalog/{{.app.metadata.name}}/deploys
    method: POST
    data_selector: customData
    params: {}
- name: entity
  endpoint:
    path: /api/rest/entities
    method: GET
    data_selector: records
    params: {}
- name: pipelines
  endpoint:
    path: /ingesting-data-into-cortex/integrations/azuredevops#define-pipelines
    method: GET
- name: work_items
  endpoint:
    path: /ingesting-data-into-cortex/integrations/azuredevops#enable-or-disable-azure-devops-work-items
    method: GET
- name: work_items
  endpoint:
    path: azureDevops.workItems()
    method: GET
    data_selector: unresolved
    params: {}
- name: pipelines
  endpoint:
    path: azureDevops.pipelines()
    method: GET
    data_selector: metadata
    params: {}
- name: pipeline_runs
  endpoint:
    path: azureDevops.pipelineRuns()
    method: GET
    data_selector: results
    params: {}
- name: azure_resources
  endpoint:
    path: /api/azure/resources
    method: GET
    data_selector: resources
    params: {}
- name: entities
  endpoint:
    path: /ingesting-data-into-cortex/integrations/azureresources
    method: GET
- name: scorecards
  endpoint:
    path: /admin/cql-explorer
    method: GET
- name: employees
  endpoint:
    path: /reports/custom/New+Hires/REPORTID
    method: GET
- name: repository
  endpoint:
    path: /x-cortex-git/bitbucket/repository
    method: GET
- name: owners
  endpoint:
    path: /x-cortex-owners
    method: GET
- name: bugsnag_project
  endpoint:
    path: /organizations/{SLUG}/stability-center
    method: GET
- name: pipelines
  endpoint:
    path: /buildkite/pipelines
    method: GET
- name: vulnerabilities
  endpoint:
    path: /api/vulnerabilities
    method: GET
    data_selector: vulnerabilities
- name: Workflows
  endpoint:
    path: /api/v2/workflows
    method: GET
- name: Pipelines
  endpoint:
    path: /api/v2/pipelines
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: codecov_project
  endpoint:
    path: /api/codecov/projects
    method: GET
    data_selector: projects
- name: custom_webhook
  endpoint:
    path: /api/v1/custom-integrations/data/
    method: POST
    data_selector: data
    params: {}
- name: monitors
  endpoint:
    path: /monitors/manage
    method: GET
    data_selector: monitors
    params: {}
- name: slos
  endpoint:
    path: /slo
    method: GET
    data_selector: slos
    params: {}
- name: repository
  endpoint:
    path: /repos/{owner}/{repo}
    method: GET
    data_selector: data
    params: {}
- name: issues
  endpoint:
    path: /repos/{owner}/{repo}/issues
    method: GET
    data_selector: data
    params: {}
- name: pull_requests
  endpoint:
    path: /repos/{owner}/{repo}/pulls
    method: GET
    data_selector: data
    params: {}
- name: commits
  endpoint:
    path: /repos/{owner}/{repo}/commits
    method: GET
    data_selector: data
    params: {}
- name: merge_requests
  endpoint:
    path: /api/v4/merge_requests
    method: GET
    data_selector: merge_requests
- name: Google Cloud Vertex AI Batch Prediction Job
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Dataset
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Endpoint
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Featurestore
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Index
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Model
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Model Deployment Monitoring Job
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Notebooks Instance
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Pipeline Job
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Platform Index Endpoint
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Specialist Pool
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Study
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Tensorboard
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Training Pipeline
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Vision Application
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Vision Cluster
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Vision Index Point
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Vision Operator
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Vertex AI Vision Processor
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Apigee Api
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Apigee Instance
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud App Engine Service
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Artifact Registry Repository
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud BigQuery Connection
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud BigQuery
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Composer Environment
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Functions
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Kubernetes Engine Clusters
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Kubernetes Engine Operations
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud IAM Service Account
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Instance Group
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud HTTP(S) Load Balancing
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Memorystore Memcached
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Memorystore Redis
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Project
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Run Job
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Run Service
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Spanner Instance
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Spanner Instance Config
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud SQL
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Storage
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud Pub/Sub Topics
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud VM Instances
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: Google Cloud VPC Serverless Connector
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
- name: grafana_dashboard
  endpoint:
    path: /ingesting-data-into-cortex/entities#defining-entities-via-yaml-file
    method: GET
    data_selector: embeds
    params: {}
- name: createPipelineRun
  endpoint:
    path: /orgs/<your-Humanitec-org>/<your-app-ID>/pipelines/<pipeline-ID>/runs
    method: POST
    data_selector: ''
    params: {}
- name: trigger_incident
  endpoint:
    path: /trigger_incident
    method: POST
- name: feature_flags
  endpoint:
    path: /api/v2/flags
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: feature-flags
  endpoint:
    path: /feature-flags
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: SLO
  endpoint:
    path: /stream/my-stream/
    method: GET
    data_selector: slos
    params: {}
- name: organization
  endpoint:
    path: /api/organization
    method: GET
    data_selector: data
- name: user
  endpoint:
    path: /api/user
    method: GET
    data_selector: data
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: entities
- name: teams
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
- name: on_call
  endpoint:
    path: /v2/on-calls
    method: GET
    data_selector: data
- name: alerts
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
- name: on-call rotation
  endpoint:
    path: /v2/schedules
    method: GET
    data_selector: data
- name: alerts
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: services
- name: on_call_schedules
  endpoint:
    path: /oncalls
    method: GET
    data_selector: oncalls
- name: escalation_policies
  endpoint:
    path: /escalation_policies
    method: GET
    data_selector: escalation_policies
- name: slo
  endpoint:
    path: /prometheus/slo
    method: GET
    data_selector: slos
- name: error_tracking
  endpoint:
    path: /entities/details
    method: GET
    data_selector: error_data
- name: issues
  endpoint:
    path: /api/0/issues/
    method: GET
    data_selector: issues
- name: Semgrep Integration
  endpoint:
    path: /ingesting-data-into-cortex/integrations/semgrep
    method: GET
    data_selector: scans
    params: {}
- name: scan_details
  endpoint:
    path: /api/v1/docs/#tag/Scan/operation/semgrep_app.foundations.scan.handlers.scan.openapi_get_scan
    method: GET
- name: findings
  endpoint:
    path: /api/v1/docs/#tag/Finding
    method: GET
- name: sonarqube_project
  endpoint:
    path: /api/measures/component_tree
    method: GET
    data_selector: component
    params: {}
- name: API ID
  endpoint:
    path: /api/id
    method: GET
- name: API key
  endpoint:
    path: /api/key
    method: GET
- name: Organization slug
  endpoint:
    path: /api/organization/slug
    method: GET
- name: Wiz issues
  endpoint:
    path: /api/wiz/issues
    method: GET
    data_selector: issues
- name: ownership_report
  endpoint:
    path: /admin/settings/workday
    method: POST
    data_selector: report_fields
    params: {}
- name: incident
  endpoint:
    path: /trigger-incident
    method: POST
- name: scorecards
  endpoint:
    path: /api/rest/scorecards
    method: GET
    data_selector: records
- name: scorecards
  endpoint:
    path: /api/rest/scorecards
    method: GET
- name: scorecards
  endpoint:
    path: /api/rest/scorecards
    method: GET
- name: Scorecard
  endpoint:
    path: /scorecards
    method: POST
    data_selector: scorecard
- name: scorecards
  endpoint:
    path: /api/rest/scorecards
    method: GET
    data_selector: records
- name: initiatives
  endpoint:
    path: /api/rest/initiatives
    method: GET
    data_selector: records
    params: {}
- name: initiatives
  endpoint:
    path: /admin/initiatives
    method: GET
    data_selector: initiatives
    params: {}
- name: request_rule_exemption
  endpoint:
    path: /api/rest/scorecards#post-api-v1-scorecards-tag-entity-entitytag-exemption
    method: POST
    data_selector: request
    params: {}
- name: approve_rule_exemption
  endpoint:
    path: /api/rest/scorecards#put-api-v1-scorecards-tag-entity-entitytag-exemption-approve
    method: PUT
    data_selector: approve
    params: {}
- name: deny_rule_exemption
  endpoint:
    path: /api/rest/scorecards#put-api-v1-scorecards-tag-entity-entitytag-exemption-deny
    method: PUT
    data_selector: deny
    params: {}
- name: revoke_rule_exemption
  endpoint:
    path: /api/rest/scorecards#put-api-v1-scorecards-tag-entity-entitytag-exemption-revoke
    method: PUT
    data_selector: revoke
    params: {}
- name: scorecard
  endpoint:
    path: /configure/settings/gitops-settings#gitops-scorecard-settings
    method: GET
    data_selector: scorecards
    params: {}
- name: PR Cycle Time
  endpoint:
    path: /api/v1/pr_cycle_time
    method: GET
    data_selector: data
- name: PR Success Rate
  endpoint:
    path: /api/v1/pr_success_rate
    method: GET
    data_selector: data
- name: deployment_metrics
  endpoint:
    path: /api/rest/deploys
    method: GET
    data_selector: metrics
    params: {}
- name: incident_metrics
  endpoint:
    path: /api/rest/pagerduty
    method: GET
    data_selector: metrics
    params: {}
- name: project_management_metrics
  endpoint:
    path: /api/rest/jira
    method: GET
    data_selector: metrics
    params: {}
- name: version_control_metrics
  endpoint:
    path: /api/rest/version_control
    method: GET
    data_selector: metrics
    params: {}
- name: user_labels
  endpoint:
    path: /admin/settings/eng-intelligence/user-labeling
    method: GET
- name: issue_tracking
  endpoint:
    path: /admin/settings/eng-intelligence/general?activeTab=issue-tracking
    method: GET
- name: custom_metrics
  endpoint:
    path: /api/rest/custom-metrics
    method: GET
- name: custom_metrics
  endpoint:
    path: /api/rest/custom-metrics
    method: POST
    data_selector: data
- name: executive_report
  endpoint:
    path: /improve/reports/executive-report
    method: GET
    data_selector: data
- name: all_scorecards_report
  endpoint:
    path: /improve/reports/all-scorecards
    method: GET
    data_selector: data
- name: birds_eye_report
  endpoint:
    path: /improve/reports/birds-eye
    method: GET
    data_selector: data
- name: progress_report
  endpoint:
    path: /improve/reports/progress-report
    method: GET
    data_selector: data
- name: report_card
  endpoint:
    path: /improve/reports/report-card
    method: GET
    data_selector: data
- name: executive_report
  endpoint:
    path: /admin/reports/executive
    method: GET
- name: All Scorecards report
  endpoint:
    path: /admin/reports/scorecards
    method: GET
- name: Progress Report
  endpoint:
    path: /admin/reports/progress
    method: GET
- name: Report card
  endpoint:
    path: /admin/reports/reportcard
    method: GET
    data_selector: reports
- name: Workflows
  endpoint:
    path: /api/rest/workflows
    method: GET
- name: Workflows
  endpoint:
    path: /admin/settings/gitops?activeGitopsTab=WORKFLOWS
    method: GET
    data_selector: workflows
    params: {}
- name: Branch
  endpoint:
    path: /branches
    method: GET
- name: Data transformation
  endpoint:
    path: /data-transformations
    method: GET
- name: HTTP request
  endpoint:
    path: /http-requests
    method: GET
- name: HTTP action (async)
  endpoint:
    path: /http-actions-async
    method: GET
- name: JavaScript
  endpoint:
    path: /javascript
    method: GET
- name: Manual approval
  endpoint:
    path: /manual-approvals
    method: GET
- name: Scaffolder
  endpoint:
    path: /scaffolder
    method: GET
- name: User input
  endpoint:
    path: /user-inputs
    method: GET
- name: user_input
  endpoint:
    path: /user/input
    method: POST
    data_selector: input_fields
    params: {}
- name: pagerduty_incidents
  endpoint:
    path: /pagerduty/incidents
    method: GET
    data_selector: incidents
- name: confluence
  endpoint:
    path: /confluence/assets
    method: GET
    data_selector: assets
- name: servicenow_incidents
  endpoint:
    path: /servicenow/incidents
    method: GET
    data_selector: incidents
- name: sonarqube_issues
  endpoint:
    path: /sonarqube/issues
    method: GET
    data_selector: issues
- name: cloud_forecast
  endpoint:
    path: /cloudforecast/highlights
    method: GET
    data_selector: highlights
- name: plugins
  endpoint:
    path: /api/rest/plugins
    method: GET
    data_selector: records
    params: {}
- name: cities
  endpoint:
    path: /api/cities
    method: GET
    data_selector: '[]'
- name: data_records
  endpoint:
    path: /api/v1/data/records
    method: GET
    data_selector: data
- name: general_settings
  endpoint:
    path: /admin/settings/entities/general
    method: GET
    data_selector: settings
    params: {}
- name: notifications
  endpoint:
    path: /api/rest/notifications
    method: GET
    data_selector: records
    params: {}
- name: audit_logs
  endpoint:
    path: /api/rest/audit-logs
    method: GET
    data_selector: logs
- name: audit_log
  endpoint:
    path: /admin/settings/audit-logs
    method: GET
    data_selector: logs
- name: ip_allowlist
  endpoint:
    path: /api/rest/ip-allowlist
    method: GET
- name: gitops_logs
  endpoint:
    path: /api/rest/gitops-logs
    method: GET
    data_selector: records
- name: gitops_logs
  endpoint:
    path: /api/rest/gitops-logs
    method: GET
    data_selector: logs
    params: {}
- name: API Keys
  endpoint:
    path: /api/rest/api-keys
    method: GET
- name: api_keys
  endpoint:
    path: /api/v1/auth/key
    method: GET
    data_selector: apiKeys
    params:
      pageSize: '250'
      page: '0'
- name: get_api_key
  endpoint:
    path: /api/v1/auth/key/{cid}
    method: GET
    data_selector: cid
    params: {}
- name: create_api_key
  endpoint:
    path: /api/v1/auth/key
    method: POST
    data_selector: apiKey
    params: {}
- name: update_api_key
  endpoint:
    path: /api/v1/auth/key/{cid}
    method: PUT
    data_selector: cid
    params: {}
- name: delete_api_key
  endpoint:
    path: /api/v1/auth/key/{cid}
    method: DELETE
    data_selector: No content
    params: {}
- name: audit_logs
  endpoint:
    path: /api/v1/audit-logs
    method: GET
- name: audit_logs
  endpoint:
    path: /api/v1/audit-logs
    method: GET
    data_selector: logs
    params:
      page: 0
- name: entities
  endpoint:
    path: /api/v1/catalog
    method: GET
    data_selector: items
- name: entity_descriptors
  endpoint:
    path: /api/v1/catalog/descriptors
    method: GET
    data_selector: descriptors
- name: entity_details
  endpoint:
    path: /api/v1/catalog/{id}
    method: GET
    data_selector: details
- name: entities
  endpoint:
    path: /api/v1/catalog
    method: GET
- name: entity_descriptors
  endpoint:
    path: /api/v1/catalog/descriptors
    method: GET
- name: entity_details
  endpoint:
    path: /api/v1/catalog/tagorid
    method: GET
- name: GitOps_log
  endpoint:
    path: /api/v1/catalog/tagorid/gitops-logs
    method: GET
- name: entity_descriptor
  endpoint:
    path: /api/v1/catalog/tagorid/openapi
    method: GET
- name: entity_scorecard_scores
  endpoint:
    path: /api/v1/catalog/tagorid/scorecards
    method: GET
- name: create_or_update_entity
  endpoint:
    path: /api/v1/open-api
    method: POST
- name: archive_entity
  endpoint:
    path: /api/v1/catalog/tagorid/archive
    method: PUT
- name: unarchive_entity
  endpoint:
    path: /api/v1/catalog/tagorid/unarchive
    method: PUT
- name: patch_entity
  endpoint:
    path: /api/v1/open-api
    method: PATCH
- name: delete_entity
  endpoint:
    path: /api/v1/catalog/tagorid
    method: DELETE
- name: delete_entities_by_type
  endpoint:
    path: /api/v1/catalog
    method: DELETE
- name: catalog_entities
  endpoint:
    path: /api/v1/catalog
    method: GET
    data_selector: entities
    params:
      pageSize: 250
      page: 0
- name: entity_descriptors
  endpoint:
    path: /api/v1/catalog/descriptors
    method: GET
    data_selector: descriptors
    params:
      pageSize: 250
      page: 0
- name: retrieve_entity_details
  endpoint:
    path: /api/v1/catalog/{tagOrId}
    method: GET
- name: retrieve_gitops_logs
  endpoint:
    path: /api/v1/catalog/{tagOrId}/gitops-logs
    method: GET
- name: retrieve_entity_descriptor
  endpoint:
    path: /api/v1/catalog/{tagOrId}/openapi
    method: GET
- name: retrieve_scorecards
  endpoint:
    path: /api/v1/catalog/{tagOrId}/scorecards
    method: GET
- name: create_or_update_entity
  endpoint:
    path: /api/v1/open-api
    method: POST
- name: archive_entity
  endpoint:
    path: /api/v1/catalog/{tagOrId}/archive
    method: PUT
- name: unarchive_entity
  endpoint:
    path: /api/v1/catalog/{tagOrId}/unarchive
    method: PUT
    data_selector: response
    params: {}
- name: create_or_patch_entity
  endpoint:
    path: /api/v1/open-api
    method: PATCH
    data_selector: response
    params: {}
- name: delete_entity
  endpoint:
    path: /api/v1/catalog/{tagOrId}
    method: DELETE
    data_selector: response
    params: {}
- name: delete_entities_by_type
  endpoint:
    path: /api/v1/catalog
    method: DELETE
    data_selector: response
    params: {}
- name: custom_data
  endpoint:
    path: /api/v1/catalog/custom-data
    method: GET
    data_selector: data
    params: {}
- name: custom_data
  endpoint:
    path: /api/v1/catalog/tagorid/custom-data
    method: GET
- name: custom_data_entity
  endpoint:
    path: /api/v1/catalog/{tagOrId}/custom-data
    method: GET
    data_selector: object[]
    params:
      pageSize: 250
      page: 0
- name: custom_data_entity_by_key
  endpoint:
    path: /api/v1/catalog/{tagOrId}/custom-data/{key}
    method: GET
    data_selector: object
    params: {}
- name: add_custom_data_entity
  endpoint:
    path: /api/v1/catalog/{tagOrId}/custom-data
    method: POST
    data_selector: object
    params: {}
- name: delete_custom_data_entity
  endpoint:
    path: /api/v1/catalog/{tagOrId}/custom-data
    method: DELETE
    data_selector: No content
    params: {}
- name: bulk_add_custom_data
  endpoint:
    path: /api/v1/catalog/custom-data
    method: PUT
    data_selector: object
    params: {}
- name: custom_events
  endpoint:
    path: /api/v1/catalog/tagorid/custom-events
    method: GET
    data_selector: records
- name: custom_events
  endpoint:
    path: /api/v1/catalog/tagorid/custom-events
    method: GET
- name: custom_events
  endpoint:
    path: /api/v1/catalog/{tagOrId}/custom-events
    method: GET
    data_selector: events
    params:
      pageSize: '250'
      page: '0'
- name: custom_event_by_uuid
  endpoint:
    path: /api/v1/catalog/{tagOrId}/custom-events/{uuid}
    method: GET
    data_selector: customData
    params: {}
- name: create_custom_event
  endpoint:
    path: /api/v1/catalog/{tagOrId}/custom-events
    method: POST
    data_selector: customData
    params: {}
- name: update_custom_event
  endpoint:
    path: /api/v1/catalog/{tagOrId}/custom-events/{uuid}
    method: PUT
    data_selector: customData
    params: {}
- name: delete_all_custom_events
  endpoint:
    path: /api/v1/catalog/{tagOrId}/custom-events
    method: DELETE
    data_selector: ''
    params: {}
- name: delete_custom_event_by_uuid
  endpoint:
    path: /api/v1/catalog/{tagOrId}/custom-events/{uuid}
    method: DELETE
    data_selector: ''
    params: {}
- name: custom_metrics
  endpoint:
    path: /api/v1/eng-intel/custom-metrics/{customMetricKey}/entity/{tagOrId}
    method: GET
- name: custom_metrics
  endpoint:
    path: /api/v1/eng-intel/custom-metrics/{customMetricKey}/entity/{tagOrId}
    method: GET
    data_selector: data
    params: {}
- name: custom_metrics_data_points
  endpoint:
    path: /api/v1/eng-intel/custom-metrics/{customMetricKey}/entity/{tagOrId}
    method: GET
    data_selector: data
    params:
      pageSize: 250
      page: 0
- name: add_custom_metric_data_point
  endpoint:
    path: /api/v1/eng-intel/custom-metrics/{customMetricKey}/entity/{tagOrId}
    method: POST
    data_selector: ''
    params: {}
- name: add_custom_metric_data_points_bulk
  endpoint:
    path: /api/v1/eng-intel/custom-metrics/{customMetricKey}/entity/{tagOrId}/bulk
    method: POST
    data_selector: ''
    params: {}
- name: delete_custom_metric_data_points
  endpoint:
    path: /api/v1/eng-intel/custom-metrics/{customMetricKey}/entity/{tagOrId}
    method: DELETE
    data_selector: ''
    params: {}
- name: dependencies
  endpoint:
    path: /api/v1/catalog/{callerTag}/dependencies
    method: GET
    data_selector: response
    params:
      includeOutgoing: true
      includeIncoming: false
      pageSize: 250
      page: 0
- name: dependency_between_entities
  endpoint:
    path: /api/v1/catalog/{callerTag}/dependencies/{calleeTag}
    method: GET
    data_selector: response
    params: {}
- name: create_dependency
  endpoint:
    path: /api/v1/catalog/{callerTag}/dependencies/{calleeTag}
    method: POST
    data_selector: response
    params: {}
- name: bulk_create_or_update_dependencies
  endpoint:
    path: /api/v1/catalog/dependencies
    method: PUT
    data_selector: response
    params: {}
- name: update_dependency
  endpoint:
    path: /api/v1/catalog/{callerTag}/dependencies/{calleeTag}
    method: PUT
    data_selector: response
    params: {}
- name: delete_dependency
  endpoint:
    path: /api/v1/catalog/{callerTag}/dependencies/{calleeTag}
    method: DELETE
    data_selector: response
    params: {}
- name: delete_dependencies_from_entity
  endpoint:
    path: /api/v1/catalog/{callerTag}/dependencies
    method: DELETE
    data_selector: response
    params: {}
- name: delete_dependencies_in_bulk
  endpoint:
    path: /api/v1/catalog/dependencies
    method: DELETE
    data_selector: response
    params: {}
- name: deploys
  endpoint:
    path: /api/v1/catalog/tagorid/deploys
    method: GET
    data_selector: records
- name: deploys
  endpoint:
    path: /api/v1/catalog/{tagOrId}/deploys
    method: GET
    data_selector: deployments
    params: {}
- name: deployments
  endpoint:
    path: /api/v1/catalog/{tagOrId}/deploys
    method: GET
    data_selector: deployments
    params:
      pageSize: '250'
      page: '0'
- name: add_deployment
  endpoint:
    path: /api/v1/catalog/{tagOrId}/deploys
    method: POST
    data_selector: id
    params: {}
- name: update_deployment
  endpoint:
    path: /api/v1/catalog/{tagOrId}/deploys/{uuid}
    method: PUT
    data_selector: id
    params: {}
- name: delete_all_deployments
  endpoint:
    path: /api/v1/catalog/deploys/all
    method: DELETE
    data_selector: deploys
    params: {}
- name: delete_deployment_by_uuid
  endpoint:
    path: /api/v1/catalog/{tagOrId}/deploys/{uuid}
    method: DELETE
    data_selector: customData
    params: {}
- name: delete_deploys_by_filter
  endpoint:
    path: /api/v1/catalog/deploys
    method: DELETE
    data_selector: deploys
    params: {}
- name: discovery_audit
  endpoint:
    path: /api/rest/discovery-audit
    method: GET
- name: discovery_audit
  endpoint:
    path: /api/v1/discovery-audit
    method: GET
- name: discovery_audit
  endpoint:
    path: /api/v1/discovery-audit
    method: GET
    data_selector: events
    params:
      pageSize: 250
      page: 0
- name: entity_relationship_types
  endpoint:
    path: /api/rest/entity-relationship-types
    method: GET
    data_selector: records
    params: {}
- name: teams
  endpoint:
    path: /api/rest/teams
    method: GET
    data_selector: records
    params: {}
- name: retrieve_openapi_docs
  endpoint:
    path: /api/v1/catalog/{tagOrId}/documentation/openapi
    method: GET
- name: update_openapi_docs
  endpoint:
    path: /api/v1/catalog/{tagOrId}/documentation/openapi
    method: PUT
- name: delete_openapi_docs
  endpoint:
    path: /api/v1/catalog/{tagOrId}/documentation/openapi
    method: DELETE
- name: user_labels
  endpoint:
    path: /api/v1/eng-intel/labels
    method: GET
    data_selector: records
    params: {}
- name: list_user_labels
  endpoint:
    path: /api/v1/eng-intel/labels
    method: GET
    data_selector: labels
- name: retrieve_user_label
  endpoint:
    path: /api/v1/eng-intel/labels/{id}
    method: GET
    data_selector: label
- name: update_user_label_assignments
  endpoint:
    path: /api/v1/eng-intel/labels/users
    method: POST
    data_selector: result
- name: user_labels
  endpoint:
    path: /api/v1/eng-intel/labels
    method: GET
    data_selector: labels
    params:
      pageSize: 250
      page: 0
- name: retrieve_user_label
  endpoint:
    path: /api/v1/eng-intel/labels/{id}
    method: GET
    data_selector: description
- name: update_user_label_assignments
  endpoint:
    path: /api/v1/eng-intel/labels/users
    method: POST
    data_selector: userLabelAssignments
- name: relationship_types
  endpoint:
    path: /api/v1/relationship-types
    method: GET
    data_selector: types
    params: {}
- name: relationship_types
  endpoint:
    path: /api/v1/relationship-types
    method: GET
    data_selector: relationshipTypes
    params:
      pageSize: 250
      page: 0
- name: create_relationship_type
  endpoint:
    path: /api/v1/relationship-types
    method: POST
    data_selector: response
    params: {}
- name: get_relationship_type
  endpoint:
    path: /api/v1/relationship-types/{relationshipTypeTag}
    method: GET
    data_selector: response
    params: {}
- name: update_relationship_type
  endpoint:
    path: /api/v1/relationship-types/{relationshipTypeTag}
    method: PUT
    data_selector: response
    params: {}
- name: delete_relationship_type
  endpoint:
    path: /api/v1/relationship-types/{relationshipTypeTag}
    method: DELETE
    data_selector: response
    params: {}
- name: entity_relationships
  endpoint:
    path: /api/v1/relationships
    method: GET
    data_selector: data
    params: {}
- name: entity_destinations
  endpoint:
    path: /api/v1/catalog/{tagOrId}/relationships/{relationshipTypeTag}/destinations
    method: GET
    data_selector: destinations
    params: {}
- name: entity_sources
  endpoint:
    path: /api/v1/catalog/{tagOrId}/relationships/{relationshipTypeTag}/sources
    method: GET
    data_selector: sources
    params: {}
- name: entity_relationships
  endpoint:
    path: /api/v1/relationships/{relationshipTypeTag}
    method: GET
    data_selector: relationships
    params:
      pageSize: 250
      page: 0
- name: entity_types
  endpoint:
    path: /api/rest/entity-types
    method: GET
    data_selector: records
- name: entity_types
  endpoint:
    path: /api/v1/catalog-definitions
    method: GET
- name: retrieve_entity_type
  endpoint:
    path: /api/v1/catalog-definitions/type
    method: GET
- name: create_entity_type
  endpoint:
    path: /api/v1/catalog-definitions
    method: POST
- name: update_entity_type
  endpoint:
    path: /api/v1/catalog-definitions/type
    method: PUT
- name: delete_entity_type
  endpoint:
    path: /api/v1/catalog-definitions/type
    method: DELETE
- name: entity_types
  endpoint:
    path: /api/v1/catalog/definitions
    method: GET
    data_selector: definitions
    params:
      pageSize: 250
      page: 0
- name: gitops_logs
  endpoint:
    path: /api/v1/gitops-logs
    method: GET
    data_selector: logs
    params: {}
- name: gitops_logs
  endpoint:
    path: /api/rest/gitops-logs
    method: GET
    data_selector: logs
    params: {}
- name: gitops_logs
  endpoint:
    path: /api/v1/gitops-logs
    method: GET
    data_selector: logs
    params:
      page: 0
- name: initiatives
  endpoint:
    path: /api/v1/initiatives
    method: GET
- name: initiatives
  endpoint:
    path: /api/v1/initiatives
    method: GET
    data_selector: records
- name: initiatives
  endpoint:
    path: /api/v1/initiatives
    method: GET
    data_selector: initiatives
    params:
      pageSize: 250
      page: 0
- name: initiative
  endpoint:
    path: /api/v1/initiatives/{cid}
    method: GET
    data_selector: initiative
    params: {}
- name: create_initiative
  endpoint:
    path: /api/v1/initiatives
    method: POST
    data_selector: initiative
    params: {}
- name: update_initiative
  endpoint:
    path: /api/v1/initiatives/{cid}
    method: PUT
    data_selector: initiative
    params: {}
- name: delete_initiative
  endpoint:
    path: /api/v1/initiatives/{cid}
    method: DELETE
    data_selector: no_content
    params: {}
- name: IP Allowlist
  endpoint:
    path: /api/v1/ip-allowlist
    method: GET
- name: Validate IP Allowlist
  endpoint:
    path: /api/v1/ip-allowlist/validate
    method: POST
- name: Replace IP Allowlist
  endpoint:
    path: /api/v1/ip-allowlist
    method: PUT
- name: IP Allowlist
  endpoint:
    path: /api/v1/ip-allowlist
    method: GET
    data_selector: allowlist
    params: {}
- name: ip_allowlist
  endpoint:
    path: /api/v1/ip-allowlist
    method: GET
    data_selector: entries
    params:
      pageSize: 250
      page: 0
- name: ip_allowlist_validate
  endpoint:
    path: /api/v1/ip-allowlist/validate
    method: POST
    data_selector: object
    params: {}
- name: ip_allowlist_replace
  endpoint:
    path: /api/v1/ip-allowlist
    method: PUT
    data_selector: object
    params: {}
- name: notification_logs
  endpoint:
    path: /api/v1/notifications/logs
    method: GET
- name: notification_runs
  endpoint:
    path: /api/v1/notifications/logs/run
    method: GET
- name: notification_logs
  endpoint:
    path: /api/v1/notifications/logs
    method: GET
- name: notification_logs
  endpoint:
    path: /api/v1/notifications/logs
    method: GET
    data_selector: logs
    params:
      pageSize: 250
      page: 0
- name: notification_runs
  endpoint:
    path: /api/v1/notifications/logs/run
    method: GET
    data_selector: runs
    params:
      pageSize: 250
      page: 0
- name: current_on_call
  endpoint:
    path: /api/v1/catalog/{tagOrId}/integrations/oncall/current
    method: GET
    data_selector: object[]
- name: on_call_registration
  endpoint:
    path: /api/v1/catalog/{tagOrId}/integrations/oncall/registration
    method: GET
    data_selector: object[]
- name: packages
  endpoint:
    path: /api/v1/catalog/tagorid/packages
    method: GET
- name: upload_nuget_csproj
  endpoint:
    path: /api/v1/catalog/tagorid/packages/dotnet-nuget-csproj
    method: POST
- name: upload_nuget_packages_lock
  endpoint:
    path: /api/v1/catalog/tagorid/packages/dotnet-nuget-packages-lock
    method: POST
- name: delete_nuget_package
  endpoint:
    path: /api/v1/catalog/tagorid/packages/dotnet-nuget
    method: DELETE
- name: upload_go_sum
  endpoint:
    path: /api/v1/catalog/tagorid/packages/go-gosum
    method: POST
- name: delete_go_package
  endpoint:
    path: /api/v1/catalog/tagorid/packages/go
    method: DELETE
- name: upload_java_package
  endpoint:
    path: /api/v1/catalog/tagorid/packages/java
    method: POST
- name: upload_multiple_java_packages
  endpoint:
    path: /api/v1/catalog/tagorid/packages/java-bulk
    method: POST
- name: upload_maven_pom
  endpoint:
    path: /api/v1/catalog/tagorid/packages/java-maven-pom
    method: POST
- name: delete_java_package
  endpoint:
    path: /api/v1/catalog/tagorid/packages/java
    method: DELETE
- name: upload_npm_package_json
  endpoint:
    path: /api/v1/catalog/tagorid/packages/node-package-json
    method: POST
- name: upload_npm_package_lock
  endpoint:
    path: /api/v1/catalog/tagorid/packages/node-package-lock
    method: POST
- name: delete_node_package
  endpoint:
    path: /api/v1/catalog/tagorid/packages/node
    method: DELETE
- name: upload_pnpm_lock
  endpoint:
    path: /api/v1/catalog/tagorid/packages/node-pnpm-lock
    method: POST
- name: upload_yarn_lock
  endpoint:
    path: /api/v1/catalog/tagorid/packages/node-yarn-lock
    method: POST
- name: upload_pipfile_lock
  endpoint:
    path: /api/v1/catalog/tagorid/packages/python-pipfile
    method: POST
- name: upload_requirements_txt
  endpoint:
    path: /api/v1/catalog/tagorid/packages/python-requirements
    method: POST
- name: delete_python_package
  endpoint:
    path: /api/v1/catalog/tagorid/packages/python
    method: DELETE
- name: packages
  endpoint:
    path: /api/v1/catalog/tagorid/packages
    method: GET
- name: packages
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages
    method: GET
    data_selector: '[]'
- name: upload_nuget_csproj
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/dotnet/nuget/csproj
    method: POST
    data_selector: '[]'
- name: upload_nuget_packages_lock
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/dotnet/nuget/packages-lock
    method: POST
    data_selector: '[]'
- name: delete_nuget_package
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/dotnet/nuget
    method: DELETE
    data_selector: '[]'
- name: upload_go_sum
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/go/gosum
    method: POST
    data_selector: '[]'
- name: delete_go_package
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/go
    method: DELETE
    data_selector: '[]'
- name: upload_java_package
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/java
    method: POST
    data_selector: '{}'
- name: upload_multiple_java_packages
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/java/bulk
    method: POST
    data_selector: '[]'
- name: upload_maven_pom
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/java/maven-pom
    method: POST
    data_selector: '[]'
- name: delete_java_package
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/java
    method: DELETE
    data_selector: '[]'
- name: upload_npm_package_json
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/node/package-json
    method: POST
    data_selector: '[]'
- name: upload_npm_package_lock
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/node/package-lock
    method: POST
    data_selector: '[]'
- name: delete_node_package
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/node
    method: DELETE
    data_selector: '[]'
- name: upload_pnpm_lock
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/node/pnpm-lock
    method: POST
    data_selector: '[]'
- name: upload_yarn_lock
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/node/yarn-lock
    method: POST
    data_selector: '[]'
- name: upload_pipfile
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/python/pipfile
    method: POST
    data_selector: '[]'
- name: upload_requirements
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/python/requirements
    method: POST
    data_selector: '[]'
- name: delete_python_package
  endpoint:
    path: /api/v1/catalog/{tagOrId}/packages/python
    method: DELETE
    data_selector: null
    params:
      tagOrId: stringRequired
      name: stringRequired
- name: plugins
  endpoint:
    path: /api/v1/plugins
    method: GET
    data_selector: plugins
    params: {}
- name: plugins
  endpoint:
    path: /api/v1/plugins
    method: GET
    data_selector: plugins
    params:
      pageSize: '250'
      page: '0'
- name: plugin_by_tag
  endpoint:
    path: /api/v1/plugins/{tag}
    method: GET
    data_selector: ''
    params: {}
- name: create_plugin
  endpoint:
    path: /api/v1/plugins
    method: POST
    data_selector: ''
    params: {}
- name: replace_plugin
  endpoint:
    path: /api/v1/plugins/{tag}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_plugin
  endpoint:
    path: /api/v1/plugins/{tag}
    method: DELETE
    data_selector: ''
    params: {}
- name: queries
  endpoint:
    path: /api/v1/queries
    method: POST
- name: retrieve_query_results
  endpoint:
    path: /api/v1/queries/{jobId}
    method: GET
    data_selector: result
- name: run_query
  endpoint:
    path: /api/v1/queries
    method: POST
    data_selector: initiatedAt
- name: users
  endpoint:
    path: /api/rest/scim/v2/users
    method: GET
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: response
    params: {}
- name: user_by_id
  endpoint:
    path: /scim/v2/Users/{id}
    method: GET
    data_selector: response
    params: {}
- name: create_user
  endpoint:
    path: /scim/v2/Users
    method: POST
    data_selector: response
    params: {}
- name: update_user
  endpoint:
    path: /scim/v2/Users/{id}
    method: PUT
    data_selector: response
    params: {}
- name: patch_user
  endpoint:
    path: /scim/v2/Users/{id}
    method: PATCH
    data_selector: response
    params: {}
- name: delete_user
  endpoint:
    path: /scim/v2/Users/{id}
    method: DELETE
    data_selector: response
    params: {}
- name: scorecard
  endpoint:
    path: /api/v1/scorecards
    method: GET
    data_selector: records
- name: scorecards
  endpoint:
    path: /api/v1/scorecards
    method: GET
- name: scorecards
  endpoint:
    path: /api/v1/scorecards
    method: GET
    data_selector: scorecards
    params:
      page: 0
      pageSize: 250
- name: scorecard_scores
  endpoint:
    path: /api/v1/scorecards/{tag}/scores
    method: GET
    data_selector: serviceScores
    params:
      page: 0
      pageSize: 250
- name: entity_scorecard_scores
  endpoint:
    path: /api/v1/catalog/{tagOrId}/scorecards
    method: GET
    data_selector: ''
    params: {}
- name: retrieve_scorecard
  endpoint:
    path: /api/v1/scorecards/{tag}
    method: GET
    data_selector: scorecard
    params: {}
- name: retrieve_scorecard_descriptor
  endpoint:
    path: /api/v1/scorecards/{tag}/descriptor
    method: GET
    data_selector: ''
    params: {}
- name: retrieve_next_steps
  endpoint:
    path: /api/v1/scorecards/{tag}/next-steps
    method: GET
    data_selector: nextSteps
    params:
      entityTag: ''
- name: create_or_update_scorecard
  endpoint:
    path: /api/v1/scorecards/descriptor
    method: POST
    data_selector: ''
    params:
      dryRun: false
- name: request_scorecard_rule_exemption
  endpoint:
    path: /api/v1/scorecards/{tag}/entity/{entityTag}/exemption
    method: POST
    data_selector: response
    params: {}
- name: revoke_scorecard_rule_exemption
  endpoint:
    path: /api/v1/scorecards/{tag}/entity/{entityTag}/exemption/revoke
    method: PUT
    data_selector: response
    params: {}
- name: approve_scorecard_rule_exemption
  endpoint:
    path: /api/v1/scorecards/{tag}/entity/{entityTag}/exemption/approve
    method: PUT
    data_selector: response
    params: {}
- name: deny_scorecard_rule_exemption
  endpoint:
    path: /api/v1/scorecards/{tag}/entity/{entityTag}/exemption/deny
    method: PUT
    data_selector: response
    params: {}
- name: delete_scorecard
  endpoint:
    path: /api/v1/scorecards/{tag}
    method: DELETE
    data_selector: response
    params: {}
- name: secrets
  endpoint:
    path: /api/v1/secrets
    method: GET
    data_selector: secrets
    params:
      pageSize: 250
      page: 0
- name: team_hierarchies
  endpoint:
    path: /api/rest/team-hierarchies
    method: GET
    data_selector: relationships
- name: team_relationships
  endpoint:
    path: /api/v1/teams/relationships
    method: GET
    data_selector: edges
    params: {}
- name: team_relationships
  endpoint:
    path: /api/v1/teams/relationships
    method: PUT
    data_selector: edges
- name: teams
  endpoint:
    path: /api/v1/teams
    method: GET
- name: teams
  endpoint:
    path: /api/v1/teams
    method: GET
- name: teams
  endpoint:
    path: /api/v1/teams
    method: GET
    data_selector: teams
- name: team_details
  endpoint:
    path: /api/v1/teams/{tagOrId}
    method: GET
    data_selector: catalogEntityTag
- name: create_team
  endpoint:
    path: /api/v1/teams
    method: POST
    data_selector: catalogEntityTag
- name: update_team_members
  endpoint:
    path: /api/v1/teams/{tagOrId}/members
    method: PUT
    data_selector: catalogEntityTag
- name: archive_team
  endpoint:
    path: /api/v1/teams/{tagOrId}/archive
    method: PUT
    data_selector: catalogEntityTag
- name: unarchive_team
  endpoint:
    path: /api/v1/teams/{tagOrId}/unarchive
    method: PUT
    data_selector: responses
    params: {}
- name: delete_team
  endpoint:
    path: /api/v1/teams
    method: DELETE
    data_selector: responses
    params:
      teamTag: ''
- name: delete_team_by_tag_or_id
  endpoint:
    path: /api/v1/teams/{tagOrId}
    method: DELETE
    data_selector: responses
    params: {}
- name: workflows
  endpoint:
    path: /api/v1/workflows
    method: GET
- name: workflows
  endpoint:
    path: /api/v1/workflows
    method: GET
    data_selector: workflows
    params:
      pageSize: 250
      page: 0
- name: workflow_by_tag_or_id
  endpoint:
    path: /api/v1/workflows/{tagOrId}
    method: GET
    data_selector: workflow
    params: {}
- name: create_or_update_workflow
  endpoint:
    path: /api/v1/workflows
    method: POST
    data_selector: workflow
    params: {}
- name: validate_yaml_descriptor
  endpoint:
    path: /api/v1/workflows/validate
    method: POST
    data_selector: validation_result
    params: {}
- name: update_async_http_request_workflow_block
  endpoint:
    path: /api/v1/workflows/{tagOrId}/callback/{callbackId}
    method: POST
    data_selector: callback_result
    params: {}
- name: delete_workflow
  endpoint:
    path: /api/v1/workflows/{tagOrId}
    method: DELETE
    data_selector: delete_result
    params: {}
notes:
- Some objects may return nulls in deeply nested fields
- Your API key must have the Edit entities permission.
- Cortex is the internal developer portal (IDP) that helps engineering teams drive
  adoption of best practices, improve visibility into services and infrastructure,
  and accelerate engineering productivity.
- If you don’t have an account yet, sign up for a demo.
- Research Preview
- Ensure that the value of your Cortex API token is valid in your configuration.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Codifying engineering standards in Scorecards and continuously evaluating entities
  against standards using live data from integrated tools
- Automating Production Readiness requirements in new services and infrastructure
  via Workflows
- Setting up Data Verification processes to ensure accuracy across your catalogs
- Incident Management is the process of detecting, responding to, and resolving unplanned
  service disruptions.
- New developers often face challenges like steep learning curves, inconsistent documentation
  across tooling and internal processes, and struggle getting familiar with best practices
  at the organization.
- Every entity YAML requires the title, x-cortex-tag, and x-cortex-type.
- Groups must contain only alphanumeric characters, and may not contain whitespaces.
- If data is not available for a field on the entity page, it will not appear in the
  overview.
- Ownership is a core use case of Cortex, as many organizations seek to establish
  accurate ownership of services, data, and other entities.
- Cortex syncs ownership from AWS every day at 6 am UTC.
- This feature is supported for entities associated with a repository in GitHub, GitLab,
  or Azure DevOps.
- Requires setup of connected app in Cortex
- The ability to add relationship types is in beta.
- Cortex provides multiple options for defining a relationship.
- Groups are defined as a list of tags.
- Groups may not contain whitespace characters.
- Add deployment data to Cortex
- Ensure the repository contains the package.json file
- Deployment data is important for engineering insights and organizational success.
- Deployment data is visible on entity pages and in various dashboards.
- Requires a valid Cortex API key
- The repository name must match the Cortex tag.
- If any stage in the pipeline fails, a ROLLBACK event is sent to Cortex.
- Custom data extends the out-of-the-box metadata that Cortex provides via integrations.
- Automatically archive entities when they are no longer detected in your integrations
  or when their corresponding YAML files are deleted.
- To archive entities, your user or API key must have the Archive entities permission.
- To unarchive entities, your user or API key must have the Configure entities permission.
- Archived entities do not appear in the lists on 'All entities' or in catalogs by
  default, but you can choose to include archived entities in your view.
- If you have more than 500 nodes in the graph, you must select a filter before the
  graph will display.
- You must create an API key in PagerDuty with the Write permission.
- If you create an API key with Read-only permissions, you will also need to configure
  a webhook.
- Terraform stores a “state” about your infrastructure and configuration when it’s
  deployed.
- In Terraform Cloud, verify that the changes you made to the instance name in variables.tf
  have applied.
- 'By default, Cortex comes with four built-in catalogs: Services, Infrastructure,
  Domains, Teams.'
- Catalogs are not defined by a YAML file and must be created in the Cortex UI.
- Some objects like Contact may return nulls in deeply nested fields
- Axon establishes two-way WebSocket connection to Cortex's servers.
- You do not need to open inbound firewall ports; outbound-only WebSocket communication
  is sufficient.
- Your sensitive information stays inside your virtual private cloud (VPC) and is
  never exposed to Cortex cloud services.
- Use Axon Relay to allow Cortex to access internally-hosted integrations including
  Bitbucket, GitHub, GitLab, Jira, Prometheus, and SonarQube.
- Axon securely holds credentials and uses them to proxy requests to third-party integrations.
- Create an Apiiro API key with specific permissions.
- The API key needs to be able to call the Add deployment for entity API endpoint,
  ensure the Edit entities permission is enabled.
- Ensure the Cortex API Key is encoded correctly.
- Cortex syncs AWS tags daily at 8 a.m. UTC.
- Cortex recommends disabling work items option if your organization does not use
  work items.
- Cortex conducts a background sync of Azure DevOps identities every day at 10 a.m.
  UTC.
- Cortex conducts a background sync of Azure Resources every day at 10 a.m. UTC and
  an ownership sync every day at 6 a.m. UTC.
- Before getting started, create a BambooHR API key.
- Bitbucket data in Eng Intelligence and in the engineering homepage is available
  in private beta.
- When using an on-premises configuration of Bitbucket, the language does not populate
  on entity detail pages.
- Cortex conducts a background sync of Bitbucket identities every day at 10 a.m. UTC.
- Repositories are refreshed every day at 2 p.m. UTC.
- You must have the Configure integrations permission in Cortex.
- Create a Buildkite API access token with read-only permissions for pipelines and
  builds.
- Cortex will use the GitHub, GitLab, Bitbucket, or Azure DevOps repository to connect
  entities to Buildkite pipelines.
- Only Checkmarx SAST is supported for this integration.
- Requires API token created in CircleCI
- Self-hosted instances need to ensure Cortex can reach CircleCI
- Create a ClickUp personal API token before integrating.
- Mapping options will not appear in Cortex for users who have not finished user registration
  in ClickUp.
- Codecov's flags are used to categorize coverage reports for various features and
  tests in a given project.
- Generate a Coralogix API key before getting started.
- Cortex will use the Cortex tag as the 'best guess' for Datadog tag.
- If the Cortex tag does not exactly match the entity identifier in Datadog, the dependencies
  will not automatically sync.
- Before getting started, generate an access token in Dynatrace with the scopes `Read
  entities` and `Read SLO`.
- Cortex automatically syncs dependencies from Dynatrace using attributes inherent
  to each entity.
- Updating your configuration can cause a temporary deletion of users.
- Cortex's GitHub app is preconfigured with necessary permissions.
- Cortex conducts a background sync of GitHub identities every day at 10 a.m. UTC.
- Pull requests and issues are refreshed about every 10 minutes.
- A GitLab user with at least the Maintainer role must create a GitLab personal access
  token with the read_api scope.
- Make sure your Grafana dashboard is public and has allow_embedding enabled.
- Grafana charts are updated in real time.
- 'Create an incident.io API key with the following scopes: Create incidents, View
  all incident data, View data, View catalog types and entries'
- Create a Jenkins API key if you plan to use Jenkins blocks in Cortex Workflows.
- This integration uses the Cortex Deployer app.
- To integrate Cortex with Jira using OAuth, you must be running a self-hosted Jira
  instance with Jira server version 8.22 or higher.
- If you're using a self-hosted instance of Jira, you'll need to verify that your
  Cortex instance is able to reach the Jira instance.
- Cortex k8s agent uses a push model that ensures you do not need to expose your cluster
  to the public internet.
- Reach out to support at help@cortex.io to receive details about our static IP.
- Cortex does not automatically discover MS Teams channels based on a Cortex tag so
  you must define channels for each entity.
- New Relic user keys are linked to the account they were created from.
- Cortex fetches OpenTelemetry data every 5 minutes.
- Team data syncs from Okta daily at 3 p.m. UTC.
- Cortex conducts an ownership sync for Okta teams every day at 3 p.m. UTC.
- Ensure to have valid API key for authentication.
- Cortex syncs Opsgenie teams every day at 9 a.m. UTC.
- Cortex syncs Opsgenie identities every day at 10 a.m. UTC.
- Cortex will use the Cortex tag or its name as the "best guess" for PagerDuty projects.
- You can only set up one of the service, schedule, or escalation policy per entity.
- Integrating Cortex with Prometheus allows you to view SLO information from Prometheus
  on entity pages in Cortex
- Account alias is optional and only relevant if you have opted into multi account
  support.
- The token requires read permissions at minimum.
- Granting the token read and write permissions enables automatic creation of an access
  token.
- Integrating Rootly with Cortex allows you to trigger an incident directly from Cortex
  and view incident data on entity pages in Cortex
- Ensure the Rootly user account represented by the API key has admin permissions
  in Rootly.
- User auth token requires Read permissions for the Issue & Event and Project scopes.
- Integrating Semgrep with Cortex allows you to display the latest scans and vulnerability
  data on entity details pages in Cortex.
- Your ServiceNow user must have the `sn_cmdb_user` permission enabled.
- Your Cortex user must have the `Configure integrations` permission
- You must be an administrator in your Slack account
- The Slack account must not be linked to another Cortex tenant
- Snyk does not currently support aggregated issues in regions outside of the U.S.A.
- Cortex will use the Cortex tag as the "best guess" for SonarQube project key.
- Create an access token in Splunk.
- Integrating Veracode with Cortex allows you to view Veracode findings on entity
  pages in Cortex.
- Create Scorecards that track progress and drive alignment on Veracode vulnerability
  metrics.
- Cortex conducts an entity sync for Veracode every hour.
- Integrate Wiz with Cortex to leverage Wiz scanning capabilities earlier in the development
  lifecycle.
- Create a service account in Wiz with read access to projects, issues, and vulnerabilities.
- Verify that you have entered the correct authentication provider if you see a 'No
  address associated with hostname' error.
- Automatically created by Cortex for teams imported from Workday.
- Use Scorecards to establish best practices, track migration, promote accountability
  among teams, enforce standardization across entities, or define maturity standards.
- Admins can configure settings and view Scorecard rule exemptions under Settings
  > Scorecards.
- Scorecards evaluate entities and require entities in catalogs.
- When processing a Scorecard, the individual entity evaluations are spread out over
  the evaluation window you configured.
- CQL filters require their own independent evaluation, which can increase the time
  required to process the evaluation.
- Uses OAuth2 with refresh token — requires setup of connected app in Cortex
- Users who own an entity that's already met the rule or achieved the action item
  will not be notified.
- Users can request exemptions via API or Cortex UI
- Admins can approve, deny, or revoke exemptions
- Rule filters allow you to apply a Scorecard rule only to specific entities.
- It's helpful to use a rule filter when a rule doesn’t apply to every entity or every
  group.
- All Scorecard editing via the Cortex UI is disabled when GitOps is enabled.
- Scorecards should be placed in their own repository, separate from catalog entities.
- CQL reports offer a new level of visibility into your entities, extending the power
  of CQL and the Query Builder into reporting.
- The maximum data size that can be the value of a cell is 2048 bytes.
- Cycle Time and Time to Open metrics are not supported for Azure DevOps or Bitbucket.
- Metrics Explorer enables you to analyze metric trends over time and drill into specific
  data points for detailed investigation.
- Metrics in Metrics Explorer sync on a scheduled basis, updating every 4 hours.
- OAuth2 authentication is required.
- Data is recalculated every hour.
- By default, All Metrics displays data from the last 7 days.
- Define your own custom time series metrics to power the analytics in your Eng Intelligence
  dashboard.
- The data retention period for custom metric data is 24 months.
- Cortex lags results until the end of the previous day.
- Cortex offers several built-in reports for performance tracking.
- Cortex also offers CQL reports for custom data querying.
- The Bird’s eye report allows for filtering and grouping by teams, entities, and
  levels.
- By default, the report displays data from the last month.
- You can also group by Team, owner, or group to see how different parts of your organization
  are performing over time.
- Negative percentages in the Most moved section are a good thing - this means fewer
  entities are failing a given rule.
- The slug for each block must be unique across a Workflow.
- Before adding an integration-based block, make sure you have configured the integration
  with the correct permissions described in Cortex's documentation for that integration.
- To add validation, configure the user input block and enter a JavaScript expression.
- The validation logic runs when the Workflow is executed.
- You must have the `Execute Workflow runs` permission.
- When running a Workflow with Cortex-based blocks, you must have the relevant permission
  in order for the Cortex-based block to succeed.
- If the Workflow has a secret user input block configured, the user running the Workflow
  will be prompted to enter information into the field, which will be redacted in
  the Workflow's Outputs tab.
- For security reasons, for templates used on Cortex Cloud, we disable Cookiecutter
  hooks, network access, and any syscalls.
- If you see a 'Failed to save template' error, ensure that you have provided a valid
  Git URL.
- Plugins are run in an iframe, typical fetch requests may get blocked by CORS.
- Ensure that @cortexapps/plugin-core is up to date.
- Favor the Cortex code if you encounter any conflicts.
- Later in this process, you will need to run `eslint src --fix` and may have to manually
  fix some lint settings.
- Do not delete `routes.ts` as that will be removed in a later step.
- Remove `errorApi` usage (Cortex has no equivalent).
- Additional testing is recommended, as there will likely be some final clean-ups
  to ensure everything is working as expected.
- This guide describes using a Docker compose file, but note that Axon Relay can be
  run in Kubernetes or other container systems.
- Requires setup of connected app in api
- Ensure correct OAuth setup to access data
- Bitbucket data in the homepage is available in private beta. Please contact your
  Cortex Customer Success Manager for access.
- Cortex refreshes pull requests from GitHub and GitLab every 2 minutes. Pull requests
  from Azure DevOps and Bitbucket are refreshed every 5 minutes.
- Cortex runs a JQL query against your Jira instance to populate tickets that have
  been assigned to your associated account.
- Cortex refreshes issues from Jira every 5 minutes, GitHub every 2 minutes, ClickUp
  every 5 minutes, and Azure DevOps every 5 minutes.
- On-call information from PagerDuty is refreshed every 60 minutes. Information from
  Opsgenie is refreshed every minute.
- This feature is available in beta. Please contact your Cortex Customer Success Manager
  for access.
- Plugins must have a global context to appear in the main nav.
- To add a plugin as a tab on an entity page, the plugin itself should be configured
  to include the entity type in its context.
- Admins, or users with the Configure settings permission, can adjust system-wide
  settings for entities.
- Admins, or users with the `Configure settings` permission, can adjust system-wide
  settings for GitOps.
- Notifications are built into Cortex to help users stay on top of changes.
- Markdown limitations include rendering issues in Slack and email notifications.
- Admins can adjust general settings for Scorecards and can view a list of Scorecard
  rule exemptions in Settings.
- Scorecard is evaluated every 4 hours.
- Cortex will only preserve the last 4 digits of the key for cross-referencing, but
  the rest of the key will be encrypted.
- You must have the `View audit logs` permission.
- By default, all IP addresses are permitted access unless otherwise specified.
- Users must have the `View GitOps logs` permission.
- Cortex checks for `cortex.yaml` or `cortex.yml` anywhere in the default branch and
  processes any changes pushed to the default branch.
- The recommended placement for entity descriptor files is in the root of the repository,
  or in the appropriate `.cortex/catalog` folder.
- You cannot create catalogs via GitOps; catalogs can only be defined in the Cortex
  UI.
- Cortex will still process any cortex.yaml file found in the root of the repository.
- If you already have a cortex.yaml file when you set up GitOps, Cortex will automatically
  process it. However, the file will not be processed until UI editing is disabled.
- 'All requests to the Cortex API need to provide an Authorization: Bearer <token>
  header, where <token> is an API key created in the Settings page of your workspace.'
- The Cortex API limits requests to 1000 per minute per client.
- The body size of any given request has a maximum of 2MB.
- If you attempt too many requests in a short period, a `429` error will be returned
  with a `Retry-After` header.
- Your API token must have the `Edit API keys` permission.
- Your API token must have the `View audit logs` permission.
- Requires setup of OAuth2 with refresh token
- Ensure valid permissions for API access
- Your API key must have the `Edit entities` permission.
- Your API key must have the `Configure Eng Intelligence custom metrics` permission.
- Your API key must have the `Configure discovery audit events` permission.
- Your API key must have the `Configure user labels` permission.
- Your tenant must also have the `Entity relationships` feature enabled.
- Requires OAuth2 authentication.
- Your API key must have the `View GitOps logs` permission.
- Requires setup of connected app in cortex
- Your API key must have the `Configure IP allowlist` permission.
- Ensure proper permissions are set for accessing notification logs.
- Your API key must have the `View notification logs` permission.
- Your API key must have the `Enable Query builder` permission.
- Your API key must have the `Configure Open ID Connector & SCIM` permission.
- Use these operations to interact with Scorecards in Cortex.
- Your API key must have the `Create secrets` permission.
- Requires setup of connected app in API
- Your API key must have the `View Workflows` permission.
- Your API key must have the `Edit Workflows` permission.
- Uses Google for Single Sign-On (SSO).
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '404: Entity not found'
- '429: The client has exceeded the rate limit by performing too many requests in
  a short period.'
- 'ERROR: CORTEX_TOKEN secret not configured'
- 'Failed to notify Cortex: Check if the CORTEX_TOKEN is valid'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '{"message":"Not Found", "documentation_url":"https://docs.github.com/rest/repos#get-a-repository"}'
- '403 Forbidden: Ensure the access token has the read_api scope and the user has
  the Maintainer role.'
- 'Configuration error: Integration error for Jira: Unexpected HTTP response 0.'
- 'Configuration error: Jira: Unexpected HTTP response 403: Forbidden.'
- '403 Forbidden: Check API key permissions'
- '404 Not Found: Verify the endpoint URL'
- '429 Too Many Requests: Rate limit exceeded'
- Socket timed out when trying to connect to SonarQube
- Component key not found
- 'Sonarqube: Fail to request url'
- '429: Rate limit error, retries will be attempted.'
- '400: This typically indicates a misconfiguration with an integration. For example,
  you may be missing an entity registration required for an integration.'
- '403: This occurs if there are missing or improper permissions.'
- '429: This occurs when hitting the rate limit for an integration. Cortex will retry
  5 times before responding with this error. To prevent rate limit issues, we have
  built a self-throttling system that proactively throttles before hitting a rate
  limit from the vendor.'
- '500: This indicates that the integration itself returned an error.'
- '404: could not find workflow with id: xyz'
- '401 Unauthorized: Check your credentials'
- '403 Forbidden IP address: Your IP address is not included in the allowlist'
- '429: Too Many Requests'
- 400 Bad request
- 429 The client has exceeded the rate limit by performing too many requests in a
  short period. Retry the request after a delay.
- '429: The client has exceeded the rate limit by performing too many requests in
  a short period. Retry the request after a delay.'
- '401 Unauthorized: Check your token'
- '404 Not Found: Verify endpoint'
- '400: Invalid filters'
- '405: Entity delete is not allowed'
- '400: Bad Request'
- '400: Invalid endpoint'
- '404: Entity or relationship type not found'
- '401 Unauthorized: Recheck API key permissions'
- 403 Forbidden
- '404: Query not found'
- '404: Scorecard not found, entity not found, or rule with given identifier not found
  within the Scorecard'
- 400 Bad Request
- '404: Team not found'
- 404 Team not found
- 405 Team delete is not allowed
- '403: Access denied'
auth_info:
  mentioned_objects:
  - CORTEX_TOKEN
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Configure Scorecard exemptions
  - Edit entities
  - Archive entities
  - Delete entities
client:
  base_url: https://app.getcortexapp.com
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
