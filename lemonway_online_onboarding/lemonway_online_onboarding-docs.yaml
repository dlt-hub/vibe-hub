resources:
- name: documents
  endpoint:
    path: /reference/accounts_documentget
    method: GET
    data_selector: documents
    params: {}
- name: wallet_status_change
  endpoint:
    path: /reference/wallet-status-change
    method: GET
    data_selector: wallet_status
    params: {}
- name: document_status_change
  endpoint:
    path: /reference/document-status-change
    method: GET
    data_selector: document_status
    params: {}
- name: KYC Verification
  endpoint:
    path: /kyc/verification
    method: POST
    data_selector: verification_data
- name: AML Checks
  endpoint:
    path: /aml/checks
    method: POST
    data_selector: checks_data
- name: Account Configuration
  endpoint:
    path: /account/configuration
    method: POST
    data_selector: configuration_data
- name: Validation and Activation
  endpoint:
    path: /account/activation
    method: POST
    data_selector: activation_data
- name: dashboard_data
  endpoint:
    path: /api/v1/export/dashboard
    method: GET
    data_selector: data
- name: invoices
  endpoint:
    path: /access/invoices
    method: GET
    data_selector: invoices
    params: {}
- name: create_user
  endpoint:
    path: /users/create
    method: POST
    data_selector: user
    params: {}
- name: create_user_role
  endpoint:
    path: /create-user-role
    method: POST
    data_selector: role
    params: {}
- name: cheque_payments
  endpoint:
    path: /cheque/payments
    method: GET
    data_selector: payments
    params: {}
- name: payment
  endpoint:
    path: /api/v1/payments
    method: GET
    data_selector: records
    params: {}
- name: pay_out
  endpoint:
    path: /api/v1/pay-out
    method: POST
    data_selector: transaction
    params: {}
- name: individual_onboarding
  endpoint:
    path: /services/onboarding/individual
    method: POST
    data_selector: records
- name: legal_entity_onboarding
  endpoint:
    path: /services/onboarding/legalentity
    method: POST
    data_selector: records
- name: onboarding
  endpoint:
    path: /onboarding
    method: POST
    data_selector: records
    params: {}
- name: resume_online_onboarding
  endpoint:
    path: /onboardings/{accountId}/resume
    method: GET
- name: user_details
  endpoint:
    path: /api/v1/user/details
    method: GET
    data_selector: records
- name: user_identity
  endpoint:
    path: /api/v1/user/identity
    method: GET
    data_selector: records
- name: verifications
  endpoint:
    path: /api/v1/user/verifications
    method: GET
    data_selector: records
- name: KYC
  endpoint:
    path: /kyc
    method: GET
    data_selector: records
    params: {}
- name: individual_account_creation
  endpoint:
    path: /accounts/individual
    method: POST
    data_selector: response
    params: {}
- name: individual_onboarding
  endpoint:
    path: /onboardings/individual
    method: POST
    data_selector: response
    params: {}
- name: resume_onboarding
  endpoint:
    path: /onboardings/{onboardingid}/resume
    method: GET
    data_selector: response
    params: {}
- name: legal_entity
  endpoint:
    path: /docs/legalentity-onboarding
    method: GET
    data_selector: records
    params: {}
- name: eu_listed_company
  endpoint:
    path: /docs/company-registered-in-the-eu
    method: GET
    data_selector: records
    params: {}
- name: non_listed_company
  endpoint:
    path: /docs/legal-entities-non-listed-company
    method: GET
    data_selector: records
    params: {}
- name: associations
  endpoint:
    path: /docs/associations
    method: GET
    data_selector: records
    params: {}
- name: foundations
  endpoint:
    path: /docs/foundations
    method: GET
    data_selector: records
    params: {}
- name: endowment_funds
  endpoint:
    path: /docs/endowment-funds
    method: GET
    data_selector: records
    params: {}
- name: skilled_trades
  endpoint:
    path: /docs/skilled-trades
    method: GET
    data_selector: records
    params: {}
- name: limited_liability_agricultural_company
  endpoint:
    path: /docs/llcompany
    method: GET
    data_selector: records
    params: {}
- name: self_employed
  endpoint:
    path: /docs/selfemployed
    method: GET
    data_selector: records
    params: {}
- name: investment_funds
  endpoint:
    path: /docs/investmentfunds
    method: GET
    data_selector: records
    params: {}
- name: social_and_economic_committee
  endpoint:
    path: /docs/sec
    method: GET
    data_selector: records
    params: {}
- name: general_interest_grouping
  endpoint:
    path: /docs/general-interest-groups
    method: GET
    data_selector: records
    params: {}
- name: insurance_company
  endpoint:
    path: /docs/insurance-company
    method: GET
    data_selector: records
    params: {}
- name: parish_or_church
  endpoint:
    path: /docs/parishorchurch
    method: GET
    data_selector: records
    params: {}
- name: non_listed_company_documents
  endpoint:
    path: /docs/legal-entities-non-listed-company
    method: GET
    data_selector: documents
    params: {}
- name: company_registered_eu
  endpoint:
    path: /company/registered/eu
    method: GET
    data_selector: documents
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: associations
  endpoint:
    path: /associations
    method: GET
    data_selector: associations
- name: required_documents
  endpoint:
    path: /required_documents
    method: GET
    data_selector: documents
- name: endowment_fund
  endpoint:
    path: /endowment/funds
    method: GET
    data_selector: records
    params: {}
- name: skilled_trades
  endpoint:
    path: /skilled_trades
    method: GET
    data_selector: records
    params: {}
- name: primary_identification_document
  endpoint:
    path: /documents/primary-identification
    method: GET
    data_selector: documents
    params: {}
- name: secondary_identification_document
  endpoint:
    path: /documents/secondary-identification
    method: GET
    data_selector: documents
    params: {}
- name: insee_registration_document
  endpoint:
    path: /documents/insee-registration
    method: GET
    data_selector: documents
    params: {}
- name: incorporated_funds
  endpoint:
    path: /api/v1/incorporated_funds
    method: GET
    data_selector: data
    params: {}
- name: general_interest_groups
  endpoint:
    path: /api/general_interest_groups
    method: GET
    data_selector: records
- name: documents_required
  endpoint:
    path: /documents/required
    method: GET
    data_selector: documents
- name: moneyins_card_webinit
  endpoint:
    path: /v2/moneyins/card/webinit
    method: POST
- name: moneyins_direct_3dinit
  endpoint:
    path: /v2/moneyins/card/direct/3dinit
    method: POST
- name: moneyins_buynowpaylater_init
  endpoint:
    path: /v2/moneyins/buynowpaylater/init
    method: POST
- name: moneyins_buynowpaylater_plans
  endpoint:
    path: /v2/moneyins/buynowpaylater/plans
    method: GET
- name: moneyins_paybybank_transfer_init
  endpoint:
    path: /v2/moneyins/paybybank/transfer/init
    method: POST
- name: moneyins_getmoneyinbanks
  endpoint:
    path: /v2/moneyins/paybybank/transfer/banks
    method: GET
- name: moneyins_sdd_init
  endpoint:
    path: /v2/moneyins/sdd/init
    method: POST
- name: moneyins_sdd_mandate
  endpoint:
    path: /v2/moneyins/sdd/mandate
    method: POST
- name: moneyins_cheque_init
  endpoint:
    path: /v2/moneyins/cheque/init
    method: POST
- name: moneyins_cheque_get
  endpoint:
    path: /v2/moneyins/cheque
    method: GET
- name: supported_cards
  endpoint:
    path: /reference/supported/cards
    method: GET
    data_selector: cards
    params: {}
- name: moneyin3dinit
  endpoint:
    path: /moneyin3dinit
    method: GET
- name: moneyins_direct3dinitpost
  endpoint:
    path: /moneyins_direct3dinitpost
    method: POST
- name: MoneyIn3DAuthenticate
  endpoint:
    path: /moneyins/card/direct/{transactionid}/3dauthenticate
    method: POST
- name: MoneyIn3DConfirm
  endpoint:
    path: /moneyins/card/direct/{transactionid}/3dconfirm
    method: PUT
- name: GetCard
  endpoint:
    path: /v2/moneyins/card/{cardId}
    method: GET
- name: MoneyIn3DInit
  endpoint:
    path: /moneyins/card/direct/3dinit
    method: POST
- name: MoneyInWithCardID
  endpoint:
    path: /moneyins/card/{cardid}/rebill
    method: POST
- name: initiate_web_payment
  endpoint:
    path: /api/v2/moneyins/card/web/init
    method: POST
    data_selector: data
    params:
      registerCard: 'true'
- name: get_card_information
  endpoint:
    path: /api/v2/moneyins/card/get
    method: GET
    data_selector: data
    params: {}
- name: charge_registered_card
  endpoint:
    path: /api/v2/moneyins/card/rebill
    method: POST
    data_selector: data
    params: {}
- name: pre_authorization
  endpoint:
    path: /v2/moneyins/card/webinit
    method: POST
    data_selector: returnUrl
    params:
      captureDelayedDays: 6
- name: validate_capture
  endpoint:
    path: /v2/moneyins/{transactionid}/validate
    method: PUT
    data_selector: success
- name: payment_request
  endpoint:
    path: /v2/moneyins
    method: POST
    data_selector: value
    params: {}
- name: Initiate a Web Payment API v2
  endpoint:
    path: /reference/moneyins_cardwebinitpost
    method: POST
- name: Initiate a Web Payment API v1
  endpoint:
    path: /reference/moneyinwebinit
    method: POST
- name: Get Card Information API v2
  endpoint:
    path: /reference/moneyins_cardget
    method: GET
- name: Check if Card is Registered API v1
  endpoint:
    path: /reference/check-if-card-is-registered
    method: GET
- name: Capture a Deferred Payment API v2
  endpoint:
    path: /reference/moneyins_validateput
    method: PUT
- name: MoneyIn3DInit
  endpoint:
    path: /reference/moneyin3dinit
    method: POST
- name: MoneyIn3DAuthenticate
  endpoint:
    path: /reference/moneyins/card/direct/{transactionid}/3dauthenticate
    method: POST
- name: MoneyIn3DConfirm
  endpoint:
    path: /reference/moneyins/card/direct/{transactionid}/3dconfirm
    method: PUT
- name: Web Payment
  endpoint:
    path: /reference/moneyinwebinit
    method: POST
- name: Direct Payment
  endpoint:
    path: /reference/moneyin3dinit
    method: POST
- name: Web Payment REST
  endpoint:
    path: /reference/moneyins_cardwebinitpost
    method: POST
- name: Direct Payment REST
  endpoint:
    path: /reference/moneyins_direct3dinitpost
    method: POST
- name: create_payment_form
  endpoint:
    path: /v2/moneyins/card/paymentform
    method: POST
    data_selector: formId
    params: {}
- name: cheques
  endpoint:
    path: /cheques
    method: GET
    data_selector: cheque_data
- name: Get Pay by Bank List
  endpoint:
    path: /reference/moneyins_getmoneyinbanks
    method: GET
    data_selector: banks
    params:
      countryCode:
      - FR
- name: Initiate Pay by Bank
  endpoint:
    path: /reference/moneyins_moneyintransferinit
    method: POST
    data_selector: payment
    params:
      returnUrl: https://www.yoursite.com/success.php
      errorUrl: https://www.yoursite.com/oops.php
      cancelUrl: https://www.yoursite.com/seeYouNextTime.php
      totalAmount: 1500
      accountId: '33612345678'
      commissionAmount: 100
      countryCode: FR
      comment: Order number 2457765AX2
      autoCommission: false
- name: payments
  endpoint:
    path: /api/v1/payments
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: P2P Transfer
  endpoint:
    path: /p2p/transfers
    method: POST
    data_selector: transaction
    params: {}
- name: bank_transfer
  endpoint:
    path: /bank-transfer
    method: GET
    data_selector: transactions
    params: {}
- name: transfer_status
  endpoint:
    path: /bank-transfer/status
    method: GET
    data_selector: statuses
- name: transaction
  endpoint:
    path: /bank-transfer/transaction
    method: GET
    data_selector: transactions
- name: bank_transfer
  endpoint:
    path: /bank-transfer
    method: GET
    data_selector: transactions
    params: {}
- name: refunds
  endpoint:
    path: /reference/refunds_refundput
    method: POST
    data_selector: ''
- name: direct_debits
  endpoint:
    path: /api/v1/direct-debits
    method: GET
    data_selector: records
- name: register_sdd_mandate
  endpoint:
    path: /v2/moneyins/sdd/mandate
    method: POST
    data_selector: SSDMandate
    params: {}
- name: init_direct_debit
  endpoint:
    path: /v2/moneyins/sdd/init
    method: POST
    data_selector: ''
    params: {}
- name: sign_sdd_mandate
  endpoint:
    path: /v2/accounts/{accountid}/documents/{documentid}/signinit
    method: POST
    data_selector: ''
    params: {}
- name: SDD Refund Procedure
  endpoint:
    path: /sdd-refunds
    method: GET
- name: initialize_mb_way_payment
  endpoint:
    path: /reference/moneyins_mbwayinitpost
    method: POST
    data_selector: euPagoInit
    params: {}
- name: Get BNPL Payment Plans
  endpoint:
    path: /v2/moneyins/buynowpaylater/plans
    method: GET
    data_selector: paymentPlans
    params: {}
- name: Create A BNPL Payment
  endpoint:
    path: /v2/moneyins/buynowpaylater/init
    method: POST
    data_selector: paymentPlanId
    params: {}
- name: refund
  endpoint:
    path: /webservice/v2/refund/{transactionid}
    method: PUT
- name: moneyins
  endpoint:
    path: /v2/moneyins
    method: GET
    data_selector: transactions.value
    params:
      transactionId: '{transactionId}'
- name: account_transactions
  endpoint:
    path: /v2/accounts/{accountId}/transactions
    method: GET
    data_selector: transactions.value
    params:
      startDate: ''
      endDate: ''
- name: money_out
  endpoint:
    path: /v2/moneyins
    method: GET
    data_selector: transactions.value
    params:
      transactionId: '{transactionId}'
- name: paypal_payments
  endpoint:
    path: /paypal/payments
    method: POST
    data_selector: payment_info
- name: paypal_payment
  endpoint:
    path: /webservice/v2/moneyins/paypal/init
    method: POST
    data_selector: redirectionUrl
- name: paypal_init
  endpoint:
    path: /webservice/v2/moneyins/paypal/init
    method: POST
    data_selector: id
- name: paypal_resume
  endpoint:
    path: /webservice/v2/moneyins/paypal/{transactionId}/resume
    method: POST
    data_selector: id
- name: paypal_payment_init
  endpoint:
    path: /moneyins/paypal/init
    method: POST
    data_selector: redirections
    params: {}
- name: paypal_payment_validate
  endpoint:
    path: /moneyins/{transactionid}/validate
    method: PUT
    data_selector: ''
    params: {}
- name: refund
  endpoint:
    path: /webservice/v2/refund/{transactionid}
    method: PUT
    data_selector: transaction
- name: Apple Pay Session Creation
  endpoint:
    path: /xpay/apple/session
    method: POST
    data_selector: ''
    params: {}
- name: Apple Pay Payment Request
  endpoint:
    path: /direct-payments/xpay/apple/
    method: POST
    data_selector: ''
    params: {}
- name: multi_capture
  endpoint:
    path: /v2/moneyins/card/webinit
    method: POST
    data_selector: response
    params:
      captureDelayedDays: ''
- name: multi_capture_payment
  endpoint:
    path: /moneyins/{transactionid}/validate
    method: PUT
    data_selector: transaction
- name: multi_capture_payment
  endpoint:
    path: /api/v1/multi-capture
    method: POST
    data_selector: data
    params: {}
- name: synthetic_events
  endpoint:
    path: /services/data/v1/synthetic-events
    method: GET
    data_selector: events
    params: {}
- name: form_event_hooks
  endpoint:
    path: /event_hooks/form
    method: GET
    data_selector: events
    params: {}
- name: field_event_hooks
  endpoint:
    path: /event_hooks/field
    method: GET
    data_selector: events
    params: {}
- name: submit_form
  endpoint:
    path: /submit
    method: POST
    data_selector: submissionResult
    params: {}
- name: webinit
  endpoint:
    path: /v2/moneyins/card/webinit
    method: POST
- name: direct_payment
  endpoint:
    path: /v2/moneyins/card/direct/3dinit
    method: POST
    data_selector: transaction
    params: {}
- name: payment
  endpoint:
    path: /services/payment
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /services/transaction
    method: GET
    data_selector: data
    params: {}
- name: moneyins_card_webinit
  endpoint:
    path: /v2/moneyins/card/webinit
    method: POST
    data_selector: response
    params: {}
- name: pay_by_cheque
  endpoint:
    path: /v2/moneyins/cheque/init
    method: POST
- name: moneyins_paybybank_transfer_init
  endpoint:
    path: /v2/moneyins/paybybank/transfer/init
    method: POST
- name: moneyins_card_webinit
  endpoint:
    path: /moneyins/card/webinit/
    method: POST
- name: direct_payments_xpay_apple
  endpoint:
    path: /direct-payments/xpay/apple/
    method: POST
- name: country_codes
  endpoint:
    path: /country_codes
    method: GET
    data_selector: country_codes
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: bank_transfer_configurations
  endpoint:
    path: /bank-transfer/configurations
    method: GET
    data_selector: configurations
- name: SEPA Direct Debit configurations
  endpoint:
    path: /docs/sepa-direct-debit-configurations
    method: GET
    data_selector: configurations
    params: {}
- name: payment
  endpoint:
    path: /services/data/v1/payments
    method: POST
    data_selector: records
- name: merchant
  endpoint:
    path: /api/v1/merchant
    method: GET
    data_selector: data
    params: {}
- name: order
  endpoint:
    path: /api/v1/order
    method: GET
    data_selector: data
    params: {}
- name: merchant
  endpoint:
    path: /services/data/v1/merchants
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: records
    params: {}
- name: offers
  endpoint:
    path: /offers
    method: GET
    data_selector: records
    params: {}
- name: money_ins
  endpoint:
    path: /v2/moneyins/card/webinit
    method: POST
- name: settlement
  endpoint:
    path: /settling/payments
    method: POST
- name: refund
  endpoint:
    path: /webservice/v2/refund/{transactionid}
    method: PUT
    data_selector: null
    params: {}
- name: money_out
  endpoint:
    path: /money-out
    method: POST
    data_selector: data
    params: {}
- name: accounts_retrieve
  endpoint:
    path: /accounts/retrieve
    method: POST
    data_selector: accounts
    params: {}
- name: accounts
  endpoint:
    path: /accounts/retrieve
    method: POST
    data_selector: object
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: accounts
- name: moneyins
  endpoint:
    path: /moneyins
    method: GET
    data_selector: moneyins
- name: create_legal_account
  endpoint:
    path: /accounts/legal
    method: POST
- name: initiate_web_payment
  endpoint:
    path: /moneyins/card/webinit
    method: POST
- name: uploadDocument
  endpoint:
    path: /accounts/accountid/documents/upload
    method: POST
    data_selector: object
- name: upload_documents_kyc
  endpoint:
    path: /accounts/{accountid}/documents/upload
    method: POST
    data_selector: response
    params: {}
- name: card
  endpoint:
    path: /moneyins/card/cardId
    method: GET
- name: payment_details
  endpoint:
    path: /moneyins_moneyinget
    method: GET
- name: card_information
  endpoint:
    path: /moneyins/card/{cardId}
    method: GET
    data_selector: ''
    params: {}
- name: Pay by Bank
  endpoint:
    path: /v2/moneyins/paybybank/transfer/init
    method: POST
    data_selector: redirectUrl
    params:
      returnUrl: required
      cancelUrl: required
      errorUrl: required
      countryCode: required
      bankId: optional
      reference: optional
      accountId: required
      totalAmount: required
      commissionAmount: optional
      comment: optional
      autoCommission: optional
- name: MoneyInWebInit
  endpoint:
    path: /reference/moneyins_cardwebinitpost
    method: POST
- name: Initiate a Web Payment
  endpoint:
    path: /v2/moneyins/card/webinit
    method: POST
- name: Initiate a Direct Payment
  endpoint:
    path: /v2/moneyins/card/direct/3dinit
    method: POST
- name: accounts
  endpoint:
    path: /reference/accounts
    method: GET
- name: moneyins
  endpoint:
    path: /reference/moneyins
    method: GET
- name: moneyouts
  endpoint:
    path: /reference/moneyouts
    method: GET
- name: p2ps
  endpoint:
    path: /reference/p2ps
    method: POST
- name: refunds
  endpoint:
    path: /reference/refunds
    method: POST
- name: accounts
  endpoint:
    path: /reference/accounts
    method: GET
- name: moneyins
  endpoint:
    path: /reference/moneyins
    method: GET
- name: moneyouts
  endpoint:
    path: /reference/moneyouts
    method: GET
- name: documents
  endpoint:
    path: /accounts/{accountid}/documents/{documentName}
    method: GET
    data_selector: documents
    params: {}
- name: onboardings
  endpoint:
    path: /onboardings
    method: POST
    data_selector: id
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: data
    params: {}
- name: create_individual_account
  endpoint:
    path: /accounts/individual
    method: POST
    data_selector: account
    params: {}
- name: trigger_onboarding
  endpoint:
    path: /onboardings/individual
    method: POST
    data_selector: onboarding
    params: {}
- name: resume_onboarding
  endpoint:
    path: /onboardings/{onboardingId}/resume
    method: GET
    data_selector: onboarding
    params: {}
- name: list_all_accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: accounts
    params: {}
- name: retrieve_specific_account
  endpoint:
    path: /accounts/{id}
    method: GET
    data_selector: account
    params: {}
- name: get_documents
  endpoint:
    path: /accounts/{accountid}/documents/{documentName}
    method: GET
    data_selector: documents
    params: {}
- name: individual_onboarding
  endpoint:
    path: /reference/online-boarding-individual-api-reference
    method: GET
    data_selector: records
- name: legal_entity_onboarding
  endpoint:
    path: /reference/online-boarding-legal-entity-api-reference
    method: GET
    data_selector: records
- name: upload_documents
  endpoint:
    path: /upload/documents
    method: POST
- name: onboardings_resume
  endpoint:
    path: /onboardings/{onboardingId}/resume
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: account_details
  endpoint:
    path: /accounts/{id}
    method: GET
- name: get_documents
  endpoint:
    path: /accounts/{accountId}/documents/{documentName}
    method: GET
- name: upload_documents
  endpoint:
    path: /legal-entity-onboarding/{onboardingId}/document
    method: POST
- name: create_legal_entity_account
  endpoint:
    path: /accounts/legal-entity
    method: POST
    data_selector: account
- name: trigger_onboarding_company
  endpoint:
    path: /onboardings/company
    method: POST
    data_selector: onboardings
- name: trigger_onboarding_association
  endpoint:
    path: /onboardings/association
    method: POST
    data_selector: onboardings
- name: trigger_onboarding_sole_trader
  endpoint:
    path: /onboardings/sole_trader
    method: POST
    data_selector: onboardings
- name: resume_onboarding
  endpoint:
    path: /onboardings/{onboardingId}/resume
    method: GET
    data_selector: onboardings
- name: list_all_accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: accounts
- name: retrieve_specific_account
  endpoint:
    path: /accounts/{id}
    method: GET
    data_selector: account
- name: get_documents
  endpoint:
    path: /accounts/{accountid}/documents/{documentName}
    method: GET
    data_selector: documents
- name: upload_documents
  endpoint:
    path: /legal-entity-onboarding/{onboardingId}/document
    method: POST
    data_selector: documents
- name: account_creation_status_updates
  endpoint:
    path: /account
    method: POST
    data_selector: Notification Status
    params: {}
- name: onboarding_progress_updates
  endpoint:
    path: /account
    method: POST
    data_selector: Profile Status
    params: {}
- name: widget
  endpoint:
    path: /widget/0.2.2.min.js
    method: GET
    data_selector: widget
    params: {}
- name: oauth_token
  endpoint:
    path: /oauth/token
    method: POST
    data_selector: access_token
- name: individual_account
  endpoint:
    path: /accounts/individual
    method: POST
    data_selector: account_id
- name: individual_onboarding
  endpoint:
    path: /onboardings/individual
    method: POST
    data_selector: url
- name: accounts
  endpoint:
    path: /reference/accounts
    method: GET
- name: money_ins
  endpoint:
    path: /reference/moneyins
    method: POST
- name: money_outs
  endpoint:
    path: /reference/moneyouts
    method: POST
- name: accounts_retrieve
  endpoint:
    path: /accounts/retrieve
    method: POST
- name: generate_electronic_signature
  endpoint:
    path: /accounts/{accountid}/documents/{documentid}/signinit
    method: POST
    data_selector: response
    params: {}
- name: payment_account_balances
  endpoint:
    path: /accounts/balances
    method: GET
    data_selector: balances
    params:
      updateDate: '{{ dlt.secrets[''update_date''] }}'
      internalAccountIdStart: 12
      internalAccountIdEnd: 12
      page: 1
      limit: 20
- name: transactions
  endpoint:
    path: /accounts/accountId/transactions
    method: GET
- name: transactions
  endpoint:
    path: /accounts/{accountId}/transactions
    method: GET
    data_selector: transactions
    params:
      startDate: UTC Unix timestamp
      endDate: UTC Unix timestamp
      executionDateStart: UTC Unix timestamp
      executionDateEnd: UTC Unix timestamp
      page: int32
      limit: int32
- name: detailed_payment_account_data
  endpoint:
    path: /accounts/{accountid}
    method: GET
    data_selector: null
    params: {}
- name: accounts
  endpoint:
    path: /accounts/accountid
    method: GET
    data_selector: object
    params: {}
- name: documents_associated_with_payment_account
  endpoint:
    path: /accounts/{accountid}/documents
    method: GET
- name: payment_account_balance_history
  endpoint:
    path: /mb/currentSandbox/prod/directkitrest/v2/accounts/{accountId}/balances/history
    method: GET
    params:
      atDate: string
- name: Payment Account
  endpoint:
    path: /accounts/accountid/blocked
    method: PUT
    data_selector: object
    params: {}
- name: block_or_unblock_account
  endpoint:
    path: /accounts/{accountid}/blocked
    method: PUT
    data_selector: null
    params: {}
- name: create_legal_account
  endpoint:
    path: /accounts/legal
    method: POST
- name: create_individual_account
  endpoint:
    path: /accounts/individual
    method: POST
- name: ultimate_beneficial_owner
  endpoint:
    path: /accounts/{accountId}/ultimateBeneficialOwner
    method: POST
- name: ultimateBeneficialOwner
  endpoint:
    path: /accounts/accountId/ultimateBeneficialOwner
    method: POST
- name: accounts_kycstatus
  endpoint:
    path: /accounts/kycstatus
    method: GET
    data_selector: records
- name: kycstatus
  endpoint:
    path: /accounts/kycstatus
    method: GET
- name: ultimate_beneficial_owners
  endpoint:
    path: /accounts/accountIdultimateBeneficialOwner
    method: GET
- name: ultimate_beneficial_owner
  endpoint:
    path: /accounts/{accountId}ultimateBeneficialOwner
    method: GET
    data_selector: UBOs
    params:
      accountId: string
- name: update_ultimate_beneficial_owner
  endpoint:
    path: /accounts/{accountId}/ultimateBeneficialOwner/{UltimateBeneficialOwnerId}
    method: PUT
- name: update_legal_payment_account
  endpoint:
    path: /accounts/legal/{accountid}
    method: PUT
- name: update_legal_payment_account
  endpoint:
    path: /mb/currentSandbox/prod/directkitrest/v2/accounts/legal/{accountid}
    method: PUT
- name: accounts_balances
  endpoint:
    path: /accounts/balances
    method: GET
- name: accounts_transactions
  endpoint:
    path: /accounts/transactions
    method: GET
- name: accounts_legalsingle
  endpoint:
    path: /accounts/legal/{accountId}
    method: PUT
- name: update_payment_account_status
  endpoint:
    path: /accounts/kycstatus/{accountid}
    method: PUT
- name: update_individual_payment_account
  endpoint:
    path: /accounts/individual/{accountid}
    method: PUT
- name: moneyins_card_webinit
  endpoint:
    path: /moneyins/card/webinit
    method: POST
    data_selector: MoneyInToken
    params: {}
- name: moneyins
  endpoint:
    path: /v2/moneyins/card/direct/3dinit
    method: POST
    data_selector: transaction
- name: moneyouts
  endpoint:
    path: /v2/moneyouts
    method: GET
    data_selector: transactions
- name: direct_payment
  endpoint:
    path: /moneyins/card/direct/3dinit
    method: POST
- name: confirm_payment
  endpoint:
    path: /moneyins/card/direct/{transactionId}/3dconfirm
    method: PUT
- name: initiate_monthly_recurring_payments
  endpoint:
    path: /moneyins/card/{cardId}/subscription
    method: POST
- name: credit_account
  endpoint:
    path: /moneyins/card/create
    method: POST
- name: moneyins
  endpoint:
    path: /v2/moneyins
    method: GET
    data_selector: records
    params: {}
- name: moneyouts
  endpoint:
    path: /v2/moneyouts
    method: GET
    data_selector: records
    params: {}
- name: moneyins
  endpoint:
    path: /moneyins
    method: POST
    data_selector: response
    params: {}
- name: moneyouts
  endpoint:
    path: /moneyouts
    method: POST
    data_selector: response
    params: {}
- name: charge_registered_card
  endpoint:
    path: /moneyins/card/{cardid}/rebill
    method: POST
    data_selector: response
    params:
      accountId: required
      totalAmount: Amount to Debit
      comment: Comment Regarding the Transaction
- name: check_3d_secure_status
  endpoint:
    path: /moneyins/card/direct/{transactionId}/3dauthenticate
    method: POST
- name: card
  endpoint:
    path: /moneyins/accountid/card
    method: GET
- name: card_associated_to_payment_account
  endpoint:
    path: /moneyins/{accountid}/card
    method: GET
- name: moneyins
  endpoint:
    path: /moneyins
    method: GET
    data_selector: value
    params: {}
- name: payment_details
  endpoint:
    path: /moneyins
    method: GET
    data_selector: ''
    params: {}
- name: unregister_card_token
  endpoint:
    path: /moneyins/card/{cardid}/unregister
    method: PUT
    data_selector: null
    params:
      wallet: string
- name: capture_deferred_payment
  endpoint:
    path: /moneyins/{transactionid}/validate
    method: PUT
    data_selector: responses
    params: {}
- name: moneyins
  endpoint:
    path: /v2/moneyins
    method: GET
    data_selector: object
- name: moneyouts
  endpoint:
    path: /v2/moneyouts
    method: GET
    data_selector: object
- name: p2ps
  endpoint:
    path: /v2/p2ps
    method: GET
    data_selector: object
- name: refunds
  endpoint:
    path: /v2/refunds
    method: GET
    data_selector: object
- name: disputes
  endpoint:
    path: /v2/disputes
    method: GET
    data_selector: object
- name: Finalize Direct Payment
  endpoint:
    path: /moneyins/card/direct/{transactionid}/3dconfirm
    method: PUT
    data_selector: response
    params: {}
- name: Activate Payment with Apple Pay
  endpoint:
    path: /moneyins/card/webinit
    method: POST
- name: MoneyIns | Apple Pay
  endpoint:
    path: /reference/moneyins
    method: GET
- name: initiate_pay_by_paypal
  endpoint:
    path: /moneyins/paypal/init
    method: POST
- name: moneyins_paypal
  endpoint:
    path: /v2/moneyins/paypal/transactionId/resume
    method: POST
    data_selector: object
    params: {}
- name: PayPal Resume
  endpoint:
    path: /moneyins/paypal/{transactionId}/resume
    method: POST
    data_selector: ''
    params: {}
- name: buy_now_pay_later
  endpoint:
    path: /moneyins/buynowpaylater/init
    method: POST
- name: buynowpaylater
  endpoint:
    path: /moneyins/buynowpaylater/init
    method: POST
- name: create_new_pending_payment
  endpoint:
    path: /moneyins/buynowpaylater/init
    method: POST
    data_selector: response
    params: {}
- name: moneyins
  endpoint:
    path: /moneyins/buynowpaylater/init
    method: POST
- name: payment_plans
  endpoint:
    path: /moneyins/buynowpaylater/plans
    method: GET
    data_selector: paymentPlans
- name: activated_payment_plans
  endpoint:
    path: /moneyins/buynowpaylater/plans
    method: GET
    data_selector: ''
- name: Capture a Deferred Payment
  endpoint:
    path: /moneyins_validateput
    method: PUT
- name: Capture a Deferred Payment
  endpoint:
    path: /moneyins/{transactionid}/validate
    method: PUT
- name: Initiate a Web Payment
  endpoint:
    path: /moneyins/card/webinit
    method: POST
- name: payment_form
  endpoint:
    path: /mb/currentSandbox/prod/directkitrest/v2/moneyins/card/paymentform
    method: POST
- name: payment_form
  endpoint:
    path: /moneyins/card/paymentform
    method: POST
- name: payment_form
  endpoint:
    path: /moneyins/card/paymentform
    method: POST
- name: payment_form
  endpoint:
    path: /moneyins/card/paymentform
    method: POST
- name: completed_payment_form
  endpoint:
    path: /moneyins/paymentform/{formid}/completed
    method: GET
    data_selector: status
    params: {}
- name: payment_form_completed
  endpoint:
    path: /mb/currentSandbox/prod/directkitrest/v2/moneyins/paymentform/formid/completed
    method: GET
- name: disable_payment_form
  endpoint:
    path: /moneyins/paymentform/{formid}/disable
    method: PUT
- name: create_dedicated_virtual_iban
  endpoint:
    path: /moneyins/bankwire/iban/create
    method: POST
- name: disable_dedicated_virtual_iban
  endpoint:
    path: /moneyins/bankwireibandisablepost
    method: POST
- name: get_vibans_count
  endpoint:
    path: /moneyins/bankwireibancountget
    method: GET
- name: dedicated_virtual_iban
  endpoint:
    path: /moneyins/bankwire/iban/create
    method: POST
    data_selector: response
    params: {}
- name: create_virtual_iban
  endpoint:
    path: /moneyins/bankwire/iban/create
    method: POST
    data_selector: object
    params: {}
- name: create_dedicated_virtual_iban
  endpoint:
    path: /moneyins/bankwire/iban/create
    method: POST
- name: disable_dedicated_virtual_iban
  endpoint:
    path: /moneyins/bankwire/iban/{ibanid}/disable
    method: POST
    data_selector: response
    params: {}
- name: iban
  endpoint:
    path: /webservice/v2/moneyouts/{accountid}/iban
    method: GET
- name: get_the_iban_associated_with_a_payment_account
  endpoint:
    path: /moneyouts/ibanget
    method: GET
    data_selector: iban
- name: iban_count
  endpoint:
    path: /moneyins/bankwire/iban/count
    method: GET
- name: viban_count
  endpoint:
    path: /moneyins/bankwire/iban/count
    method: GET
- name: sdd_init
  endpoint:
    path: /moneyins/sdd/init
    method: POST
    data_selector: response
    params: {}
- name: moneyins
  endpoint:
    path: /v2/moneyins/sdd/init
    method: POST
    data_selector: response
- name: moneyouts
  endpoint:
    path: /v2/moneyouts
    method: GET
    data_selector: response
- name: sdd_initiate
  endpoint:
    path: /moneyins/sdd/init
    method: POST
    data_selector: ''
    params: {}
- name: moneyins
  endpoint:
    path: /v2/moneyins/sdd/init
    method: POST
    data_selector: response
- name: moneyouts
  endpoint:
    path: /v2/moneyouts
    method: GET
    data_selector: response
- name: sdd_mandate
  endpoint:
    path: /moneyins/sdd/mandate
    method: POST
    data_selector: response
    params: {}
- name: sdd_mandate
  endpoint:
    path: /moneyins/sdd/mandate
    method: POST
    data_selector: object
- name: sdd_list
  endpoint:
    path: /moneyins/sddget
    method: GET
    data_selector: object
- name: mandate_document
  endpoint:
    path: /moneyins/mandategetdocument
    method: GET
    data_selector: object
- name: mandate
  endpoint:
    path: /moneyins/accountid/mandate
    method: GET
- name: mandate
  endpoint:
    path: /moneyins/{accountid}/mandate
    method: GET
    data_selector: mandate
    params:
      accountid: string
- name: mandate_document
  endpoint:
    path: /mb/currentSandbox/prod/directkitrest/v2/moneyins/{accountid}/mandate/{mandateid}/document
    method: GET
- name: mandate
  endpoint:
    path: /moneyins/mandate
    method: GET
    data_selector: data
- name: mandate_document
  endpoint:
    path: /moneyins/mandate/document
    method: GET
    data_selector: data
- name: moneyins_sdd
  endpoint:
    path: /v2/moneyins/sdd
    method: GET
    data_selector: transactions
- name: moneyins_sdd
  endpoint:
    path: /moneyins/sdd
    method: GET
    data_selector: transactions
    params:
      updateDate: utc_unix_timestamp
      updateEndDate: utc_unix_timestamp
      page: '1'
      limit: '20'
- name: money_in_sdd
  endpoint:
    path: /moneyins/sdd/mandate/mandatid/unregister
    method: PUT
- name: list_of_money_in_by_sepa_direct_debit
  endpoint:
    path: /moneyins/sddget
    method: GET
- name: deactivate_mandate
  endpoint:
    path: /moneyins/sdd/mandate/{mandatid}/unregister
    method: PUT
    data_selector: response
    params: {}
- name: cancel_money_in
  endpoint:
    path: /moneyins/{transactionid}/cancel
    method: PUT
- name: moneyins
  endpoint:
    path: /v2/moneyins
    method: GET
    data_selector: records
- name: moneyouts
  endpoint:
    path: /v2/moneyouts
    method: GET
    data_selector: records
- name: banks
  endpoint:
    path: /moneyins/paybybank/transfer/banks
    method: GET
- name: pay_by_bank_list
  endpoint:
    path: /mb/currentSandbox/prod/directkitrest/v2/moneyins/paybybank/transfer/banks
    method: GET
    data_selector: ''
    params:
      country: ''
- name: money_in_by_fund_transfer
  endpoint:
    path: /moneyins/bankwire
    method: GET
    params:
      updateDate: ''
      updateEndDate: ''
      page: null
      limit: null
- name: moneyins
  endpoint:
    path: /v2/moneyins/bankwire
    method: GET
    data_selector: value
- name: moneyouts
  endpoint:
    path: /v2/moneyouts
    method: GET
    data_selector: value
- name: p2ps
  endpoint:
    path: /v2/p2ps
    method: GET
    data_selector: value
- name: refunds
  endpoint:
    path: /v2/refunds
    method: GET
    data_selector: value
- name: disputes
  endpoint:
    path: /v2/disputes
    method: GET
    data_selector: value
- name: moneyins
  endpoint:
    path: /webservice/v2/moneyins
    method: GET
- name: accounts
  endpoint:
    path: /reference/accounts_balancesget
    method: GET
- name: moneyins
  endpoint:
    path: /reference/moneyins_cardwebinitpost
    method: POST
- name: moneyouts
  endpoint:
    path: /reference/moneyouts_ibanget
    method: GET
- name: money_ins_cheque_init
  endpoint:
    path: /v2/moneyins/cheque/init
    method: POST
- name: money_ins_cheque_get
  endpoint:
    path: /v2/moneyins_chequeget
    method: GET
- name: register_cheque
  endpoint:
    path: /moneyins/cheque/init
    method: POST
- name: cheque
  endpoint:
    path: /v2/moneyins/cheque
    method: GET
- name: cheque_money_in
  endpoint:
    path: /moneyins/cheque
    method: GET
    data_selector: ''
    params:
      updateDate: ''
      updateEndDate: ''
      chequeType: ''
      reference: ''
      page: ''
      limit: ''
- name: multibanco_payment
  endpoint:
    path: /moneyins/multibanco/init
    method: POST
- name: initialize_ideal_payment
  endpoint:
    path: /moneyins/ideal/init
    method: POST
- name: iDeal Payment
  endpoint:
    path: /moneyins/ideal/init
    method: POST
- name: Finalize iDeal Payment
  endpoint:
    path: /moneyins/idealconfirmput-1
    method: PUT
- name: finalize_ideal_payment
  endpoint:
    path: /moneyins/ideal/{transactionid}/confirm
    method: PUT
    data_selector: response
    params: {}
- name: moneyins
  endpoint:
    path: /v2/moneyins
    method: GET
- name: moneyouts
  endpoint:
    path: /v2/moneyouts
    method: GET
- name: p2ps
  endpoint:
    path: /v2/p2ps
    method: GET
- name: refunds
  endpoint:
    path: /v2/refunds
    method: GET
- name: disputes
  endpoint:
    path: /v2/disputes
    method: GET
- name: initialize_mb_way_payment
  endpoint:
    path: /moneyins/mbway/init
    method: POST
- name: moneyins
  endpoint:
    path: /moneyins/mbway/init
    method: POST
- name: sofort_payment
  endpoint:
    path: /moneyins/sofort/init
    method: POST
    data_selector: response
    params: {}
- name: moneyins
  endpoint:
    path: /moneyins/payshop/init
    method: POST
- name: payshop_payment
  endpoint:
    path: /mb/currentSandbox/prod/directkitrest/v2/moneyins/payshop/init
    method: POST
    data_selector: response
    params: {}
- name: trustly_payment
  endpoint:
    path: /mb/currentSandbox/prod/directkitrest/v2/moneyins/trustly/init
    method: POST
    data_selector: string
    params: {}
- name: paytrail_payment
  endpoint:
    path: /moneyins/paytrail/init
    method: POST
    data_selector: null
    params: {}
- name: mobile_pay_init
  endpoint:
    path: /mb/currentSandbox/prod/directkitrest/v2/moneyins/mobilePay/init
    method: POST
    data_selector: response
    params:
      returnUrl: string
      reference: string
      accountId: string
      totalAmount: int32
      commissionAmount: int32
      comment: string
      autoCommission: boolean
- name: moneyouts_iban
  endpoint:
    path: /moneyouts/iban
    method: POST
    data_selector: response
    params: {}
- name: moneyouts_iban
  endpoint:
    path: /moneyouts/iban
    method: POST
    data_selector: response
    params: {}
- name: moneyouts_moneyout
  endpoint:
    path: /moneyouts/moneyout
    method: GET
    data_selector: response
    params: {}
- name: moneyouts_ibanget
  endpoint:
    path: /moneyouts/iban
    method: GET
    data_selector: response
    params: {}
- name: moneyouts
  endpoint:
    path: /moneyouts/iban
    method: POST
    data_selector: response
    params: {}
- name: iban
  endpoint:
    path: /moneyouts/ibanextendedpost
    method: POST
    data_selector: response
    params: {}
- name: moneyouts_iban
  endpoint:
    path: /moneyouts/iban
    method: POST
    data_selector: ''
    params:
      accountId: ''
      holder: ''
      bic: ''
      iban: ''
      domiciliation1: ''
      domiciliation2: ''
      comment: ''
- name: add_bank_account
  endpoint:
    path: /moneyouts/iban/extended
    method: POST
- name: moneyouts
  endpoint:
    path: /mb/currentSandbox/prod/directkitrest/v2/moneyouts
    method: POST
    data_selector: ''
    params: {}
- name: moneyins
  endpoint:
    path: /mb/currentSandbox/prod/directkitrest/v2/moneyins
    method: POST
    data_selector: ''
    params: {}
- name: moneyouts
  endpoint:
    path: /moneyouts
    method: POST
    data_selector: response
    params: {}
- name: iban_associated_with_payment_account
  endpoint:
    path: /moneyouts/{accountid}/iban
    method: GET
- name: money_out
  endpoint:
    path: /moneyouts/accountid/iban
    method: GET
- name: search_money_out
  endpoint:
    path: /moneyouts_moneyoutget
    method: GET
- name: get_iban
  endpoint:
    path: /moneyouts_ibanget
    method: GET
- name: external_fund_transfer
  endpoint:
    path: /moneyouts_moneyoutpost
    method: POST
- name: moneyouts
  endpoint:
    path: /v2/moneyouts
    method: GET
    data_selector: transactions
    params: {}
- name: moneyout_validation
  endpoint:
    path: /v2/moneyins/{transactionid}/validate
    method: GET
    data_selector: transactions
    params: {}
- name: moneyouts
  endpoint:
    path: /moneyouts
    method: GET
    data_selector: ''
    params:
      transactionid: ''
      transactionComment: ''
      reference: ''
      page: ''
      limit: ''
- name: moneyouts
  endpoint:
    path: /moneyouts
    method: GET
    data_selector: records
- name: moneyins
  endpoint:
    path: /moneyins
    method: GET
    data_selector: records
- name: money_out_cancellation
  endpoint:
    path: /moneyouts/{transactionid}/cancel
    method: PUT
    data_selector: response
    params:
      accountId: string
- name: unregister_iban
  endpoint:
    path: /moneyouts/iban/{IbanId}/unregister
    method: PUT
    data_selector: null
    params:
      IbanId: int64
      wallet: string
- name: p2p
  endpoint:
    path: /p2p
    method: POST
    data_selector: transaction
    params: {}
- name: payment_between_payment_accounts
  endpoint:
    path: /p2p
    method: POST
- name: p2p
  endpoint:
    path: /v2/p2p
    method: GET
    data_selector: transactions
    params: {}
- name: transactions
  endpoint:
    path: /p2p
    method: GET
    data_selector: transactions
    params:
      transactionId: int64
      transactionComment: string
      reference: string
      privateData.value: array of strings
      page: int32
      limit: int32
- name: transactions
  endpoint:
    path: /refund/transactionid
    method: PUT
- name: refund
  endpoint:
    path: /v2/refund/{transactionid}
    method: PUT
    data_selector: ''
    params: {}
- name: refund
  endpoint:
    path: /refundcreate/{transactionId}
    method: PUT
    data_selector: response
    params: {}
- name: refund
  endpoint:
    path: /refundcreate/transactionId
    method: PUT
- name: disputes
  endpoint:
    path: /disputes
    method: GET
- name: disputes
  endpoint:
    path: /v2/disputes
    method: GET
    data_selector: value
- name: disputes
  endpoint:
    path: /v2/disputes
    method: GET
    data_selector: disputes
    params:
      updateDate: required
      page: 'null'
      limit: '20'
- name: Finalize Pay by Bank
  endpoint:
    path: /reference/finalize-pay-by-bank
    method: POST
- name: moneyins
  endpoint:
    path: /v2/moneyins
    method: GET
    data_selector: records
- name: moneyins_transferinit
  endpoint:
    path: /v2/moneyins/transferinit
    method: POST
    data_selector: response
- name: Finalize Card Payment Indirect
  endpoint:
    path: /finalize-card-payment-indirect
    method: POST
- name: Finalize Card Payment Indirect
  endpoint:
    path: /reference/finalize-card-payment-indirect
    method: GET
    data_selector: response
    params:
      moneyInToken: moneyInToken
- name: Finalize Document Signature
  endpoint:
    path: /finalize-document-signature
    method: POST
- name: Finalize Document Signature
  endpoint:
    path: /finalize-document-signature
    method: POST
    data_selector: signature
    params: {}
- name: Finalize Document Signature
  endpoint:
    path: /finalize-document-signature
    method: POST
    data_selector: response
    params:
      signingtoken: 62612109COhhmoY3kOBhf9O7op8g1m8NE
- name: Accounts
  endpoint:
    path: /reference/accounts
    method: GET
- name: MoneyIns
  endpoint:
    path: /reference/moneyins
    method: GET
- name: MoneyOuts
  endpoint:
    path: /reference/moneyouts
    method: GET
- name: blocked_account_status_change
  endpoint:
    path: /reference/blocked-account-statuses
    method: GET
    data_selector: records
- name: accounts
  endpoint:
    path: /reference/accounts
    method: GET
- name: money_ins
  endpoint:
    path: /reference/moneyins
    method: POST
- name: money_outs
  endpoint:
    path: /reference/moneyouts
    method: POST
- name: p2ps
  endpoint:
    path: /reference/p2ps
    method: POST
- name: refunds
  endpoint:
    path: /reference/refunds
    method: POST
- name: disputes
  endpoint:
    path: /reference/disputes
    method: GET
- name: wallet_status_change
  endpoint:
    path: /wallet/status/change
    method: POST
    data_selector: NotifCategory
    params: {}
- name: accounts_balances
  endpoint:
    path: /accounts/balances
    method: GET
- name: accounts_transactions
  endpoint:
    path: /accounts/transactions
    method: GET
- name: accounts_kycstatus
  endpoint:
    path: /accounts/kycstatus
    method: GET
- name: accounts
  endpoint:
    path: /reference/accounts
    method: GET
- name: moneyins
  endpoint:
    path: /reference/moneyins
    method: POST
- name: moneyouts
  endpoint:
    path: /reference/moneyouts
    method: POST
- name: money_in_creation
  endpoint:
    path: /reference/money-in-creation
    method: GET
    data_selector: records
- name: money_in_sdd_canceled
  endpoint:
    path: /notification_handler
    method: POST
    data_selector: ExtId
    params: {}
- name: MoneyIns | Cards
  endpoint:
    path: /reference/moneyins_cardwebinitpost
    method: POST
- name: MoneyIns | Direct Debits
  endpoint:
    path: /reference/moneyins_sddinitpost
    method: POST
- name: Money-In - Chargeback notifications Wire, SDD & Cheque
  endpoint:
    path: /reference/money-in-notification
    method: GET
- name: Money-In notifications
  endpoint:
    path: /money-in-notification
    method: POST
    data_selector: notifications
    params: {}
- name: money_out_statuses
  endpoint:
    path: /money-out-statuses
    method: GET
    data_selector: statuses
- name: document_status_change
  endpoint:
    path: /document/status/change
    method: POST
    data_selector: NotifCategory
    params: {}
- name: chargeback
  endpoint:
    path: /chargebacks
    method: GET
    data_selector: chargebacks
    params: {}
- name: sdd_mandate_status
  endpoint:
    path: /reference/sdd-mandate-status
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: moneyins
  endpoint:
    path: /moneyins
    method: GET
- name: moneyouts
  endpoint:
    path: /moneyouts
    method: GET
- name: KYC Document Status
  endpoint:
    path: /kyc/document/status
    method: GET
    data_selector: statuses
- name: KYC Document Types
  endpoint:
    path: /reference/kyc-document-types
    method: GET
    data_selector: document_types
- name: KYC Document Statuses
  endpoint:
    path: /reference/kyc-document-status
    method: GET
    data_selector: document_statuses
- name: Complete Lemonway Error List
  endpoint:
    path: /reference/complete-lemonway-error-list
    method: GET
    data_selector: error_list
- name: accounts
  endpoint:
    path: /reference/accounts
    method: GET
    data_selector: records
- name: money_ins
  endpoint:
    path: /reference/moneyins
    method: GET
    data_selector: records
- name: money_outs
  endpoint:
    path: /reference/moneyouts
    method: GET
    data_selector: records
- name: p2ps
  endpoint:
    path: /reference/p2ps
    method: GET
    data_selector: records
- name: refunds
  endpoint:
    path: /reference/refunds
    method: GET
    data_selector: records
- name: disputes
  endpoint:
    path: /reference/disputes
    method: GET
    data_selector: records
- name: blocked_payments
  endpoint:
    path: /reference/blocked-payments-for-regulatory-reasons
    method: GET
    data_selector: Error Codes
    params: {}
- name: accounts
  endpoint:
    path: /reference/accounts
    method: GET
- name: moneyins
  endpoint:
    path: /reference/moneyins
    method: POST
- name: moneyouts
  endpoint:
    path: /reference/moneyouts
    method: POST
- name: refunds
  endpoint:
    path: /reference/refunds
    method: POST
- name: disputes
  endpoint:
    path: /reference/disputes
    method: GET
- name: accounts
  endpoint:
    path: /reference/post-2
    method: GET
- name: moneyins
  endpoint:
    path: /reference/moneyins
    method: POST
- name: moneyouts
  endpoint:
    path: /reference/moneyouts_ibanpost
    method: POST
- name: sdd_transactions
  endpoint:
    path: /moneyins_sddget
    method: GET
    data_selector: records
- name: MoneyIns | Direct Debits
  endpoint:
    path: /moneyins/sdd
    method: POST
    data_selector: transactions
    params: {}
- name: Payments by Cheques
  endpoint:
    path: /payments/cheques
    method: GET
    data_selector: payments
    params: {}
- name: disputes
  endpoint:
    path: /disputes_disputesget
    method: GET
    data_selector: disputes
    params:
      incremental: updated_at
- name: accounts
  endpoint:
    path: /reference/accounts
    method: GET
- name: money_ins
  endpoint:
    path: /reference/moneyins
    method: GET
- name: money_outs
  endpoint:
    path: /reference/moneyouts
    method: GET
- name: disputes
  endpoint:
    path: /reference/disputes
    method: GET
- name: accounts
  endpoint:
    path: /reference/accounts
    method: GET
- name: payments
  endpoint:
    path: /reference/payments
    method: POST
- name: accounts
  endpoint:
    path: /reference/accounts
    method: GET
- name: moneyins
  endpoint:
    path: /reference/moneyins
    method: POST
- name: moneyouts
  endpoint:
    path: /reference/moneyouts
    method: POST
- name: AddUltimateBeneficialOwner
  endpoint:
    path: /accounts/{accountId}/ultimateBeneficialOwner
    method: POST
- name: GetAccountDetails
  endpoint:
    path: /accounts/{accountid}
    method: GET
- name: GetBalanceHistory
  endpoint:
    path: /accounts/{accountId}/balances/history
    method: GET
- name: GetKycStatus
  endpoint:
    path: /accounts/kycstatus
    method: GET
- name: MoneyIn
  endpoint:
    path: /moneyins/card/direct
    method: POST
- name: Initiate a Web Payment
  endpoint:
    path: /v2/moneyins/card/webinit
    method: POST
- name: Initiate a Direct Payment
  endpoint:
    path: /v2/moneyins/card/direct/3dinit
    method: POST
- name: accounts
  endpoint:
    path: /accounts/retrieve
    method: POST
- name: accounts_retrieve
  endpoint:
    path: /accounts/retrieve
    method: POST
    data_selector: ''
    params:
      page: ''
- name: block_or_unblock_account
  endpoint:
    path: /accounts/{accountid}/blocked
    method: PUT
    data_selector: null
    params: {}
- name: accounts_balances
  endpoint:
    path: /accounts/balances
    method: GET
- name: payment_account_balances
  endpoint:
    path: /accounts/balances
    method: GET
    params:
      updateDate: string
      internalAccountIdStart: int64
      internalAccountIdEnd: int64
      page: int32
      limit: int32
- name: create_legal_account
  endpoint:
    path: /accounts/legal
    method: POST
- name: ultimate_beneficial_owner
  endpoint:
    path: /accounts/{accountId}/ultimateBeneficialOwner/{UltimateBeneficialOwnerId}
    method: PUT
    data_selector: null
    params: {}
- name: ultimate_beneficial_owner
  endpoint:
    path: /mb/currentSandbox/prod/directkitrest/v2/accounts/accountId/ultimateBeneficialOwner/UltimateBeneficialOwnerId
    method: PUT
- name: get_all_ultimate_beneficial_owners
  endpoint:
    path: /mb/currentSandbox/prod/directkitrest/v2/accounts/accountId/ultimateBeneficialOwner
    method: GET
- name: kyc_status
  endpoint:
    path: /accounts/kycstatus
    method: GET
    data_selector: accounts
    params: {}
- name: kyc_status
  endpoint:
    path: /accounts/kycstatus
    method: GET
    params:
      updateDate: ''
      page: ''
      limit: '20'
- name: update_legal_payment_account
  endpoint:
    path: /accounts/legal/{accountid}
    method: PUT
- name: web_payment
  endpoint:
    path: /moneyins/card/webinit
    method: POST
- name: unregister_card_token
  endpoint:
    path: /moneyins/card/{cardid}/unregister
    method: PUT
    data_selector: response
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Controlling access to the API server is crucial. It reduces the risk of unauthorized
  access and data breaches.
- Uses OAuth2 with refresh token — requires setup of connected app in lemonway
- Some objects may return nulls in deeply nested fields
- Approval Workflow feature introduces an additional layer of security for Pay-Outs
  initiated via the Lemonway Dashboard.
- End of Support for Legacy KYC APIs effective July 1st, 2025. Onboarding must exclusively
  be done through the Online Onboarding (OO) system.
- Notifications can be received by email (HTML format) or sent to an information system
  (webhooks / callbacks through HTTP POST or GET).
- It can take up to one hour to send a notification.
- 3D Secure is activated by default on enterprise production environments for card
  payments for donation/reward crowdfunding-based activities.
- To be whitelisted with Lemonway, you must ensure that you provide a Static IP address.
- Lemonway uses the OAuth 2.0 protocol and framework to secure access to our REST
  API resources.
- Company name should be the same as stated in the company registration documents
  and bank statement.
- Website URL is not mandatory but highly recommended.
- Email is unique, you can’t create two accounts with the same email address.
- Account ID length should not exceed 15 alphanumeric characters to comply with banks
  rules.
- The PDF exports are limited to 10,000 items.
- The export limit for XLS and CSV format is 30,000 lines.
- PDF exports are limited to 10,000 items.
- Ensure correct API version is used for requests.
- Invoices are automatically made available in your Dashboard between the 1st and
  the 15th of each month.
- Ensure that the new user’s IP address is whitelisted in order for them to access
  the dashboard.
- The Invitation link expires after 7 days.
- Requires setup of connected app in Lemonway
- Check for specific user creation requirements in documentation
- The Dashboard is available in English (GB), French (FR), German (DE), Italian (IT),
  Spanish (ES)
- Uses OAuth2 with refresh token — requires setup of connected app in Lemonway
- Thresholds depend on the KYC status of your accounts.
- Two-factor authentication (2FA) is a security process that requires users to provide
  two different authentication factors before they can access an online account.
- To have a Whitelisted IP Address with Lemonway, you must ensure that you provide
  a Static IP address.
- It can take upto 30 minutes for our servers to update and Whitelist your IP address.
- Pay-Out is only available via the Lemonway Dashboard.
- Onboarding is part of KYC process.
- Users can save and resume their onboarding form.
- KYC and KYB interface is managed by Lemonway
- Verification supports government IDs from over 150 countries
- Prior to implementation to your site, it is possible to customize your onboarding
  to match your enterprise's branding.
- When information is mandatory, the end user is required to provide the requested
  data; otherwise, they will not be able to proceed.
- Session will time out if there is extended inactivity.
- If you have existing users who have been KYC'd through our legacy system please
  contact your Lemonway account manager to help you.
- We have revamped our onboarding process to make it simpler and more efficient for
  you to onboard new clients.
- Identity verification using government-issued IDs or biometrics required.
- KYC validation is an absolute requirement when opening a Lemonway account.
- The end-user is required to validate their identity and provide official government
  documents.
- Online Onboarding is currently available in English, French, Spanish, German and
  Italian.
- Skilled Trades refer to occupations that require specialized training, technical
  skills, and hands-on work.
- 'A valid identification document of the legal representative of the management company
  requesting to open a payment account: identity card (both sides), passport, residence
  permit (both sides), driving license (card format, both sides)'
- A certificate of incorporation (Kbis for France) dated less than three months old
  of the fund which will hold the payment account
- The management regulations document the fund holding the payment account.
- 'Crowdfunding partners only: A document describing the project in detail if the
  account holder is the project leader'
- 'A valid identification document of the natural person who will be in charge of
  the management of the payment account on behalf of the SEC: identity card (both
  sides), passport, residence permit (both sides), driving license (card format, both
  sides)'
- A copy was issued less than 12 months ago of the minutes of the last general meeting
  mentioning the list of board members of the SEC who will be holding the payment
  account.
- A valid identification document of the natural person who will be in charge of the
  management of the payment account on behalf of the public agency is required.
- Lemonway adheres to GDPR and is PCI-DSS certified.
- Lemonway does not recommend you use the MoneyIn and RegisterCard method from January
  2021.
- Use OAuth2 with refresh token
- PCI-DSS compliance required for direct card payment mode
- A pre-authorization hold lasts between 1-6 days.
- You can only capture a pre-authorization once.
- Ensure that your redirect URLs are publicly available so we can correctly send you
  all notifications
- 'Lemonway recommends setting up the webhook Id= 42 ''MoneyIn: transaction status
  synchronization alert'' in the Dashboard (Backoffice)'
- Risk-based assessments are based on client information, transaction value, transaction
  history, device information, and behavioural history.
- You need to make sure your redirect URLs are publicly available so we can correctly
  send you all notifications
- Payments by cheque cannot be refunded. In this case, you will need to issue an outgoing
  transfer.
- Payments using Pay by Bank are limited to transactions above €1.
- The EU permits a maximum of €15,000 per transaction in the Euro Payments area.
- Some endpoints may return paginated data
- Transactions may fail if your SC Merchant Account does not have sufficient funds
  to pay the fees charged by Lemonway.
- Some banks do not recognize the dash '-' in the matching code.
- OAuth2 authentication requires setup of connected app in Lemonway
- Settlement can take up to 48 hours
- To use our BNPL solution a transaction needs to be a minimum of €100.
- If you have set up BNPL and receive a pair of empty square brackets, contact our
  Support Team.
- The paymentPlanId is unique to your business and is set up by a Lemonway Implementation
  Manager when you activate BNPL.
- Refunds are subject to the original agreement between you (the service provider)
  and your end-user (buyer).
- The paymentPlanId is unique to your business and is setup by a Lemonway Implementation
  Manager when you active BNPL.
- Your redirectional URLs (success, cancel and error) must be publicly accessible
  so your end user and our webkit server could send requests to them.
- If you would like to activate our multi-capture feature, please contact a member
  of our support team.
- To activate multi-capture you must contact our support team or your existing implementation
  manager.
- This status is different from completed to avoid amount duplication in our system.
- Optional body parameters include comment and reference for multi-capture.
- OAuth2 with refresh token is required to access the API.
- Knowledge of HTML and JavaScript required to create and manipulate HTML elements.
- Lemonway SDK is necessary for building the payment form.
- Understanding of the Lemonway SDK features required.
- Lemonway ensures that user card data is securely entered on a Lemonway-hosted page.
- Valid CSS is required by the SDK.
- 'Only the element #text can be styled inside the iframe.'
- These default toggling classes are not compatible with the CSS framework (Bootstrap,
  Foundation, Bulma…) that you are using.
- Synthetic events allow your container element to behave like an input text element.
- If an end-user switches to another language on your website, you can change the
  placeholder value of some (or all) of the hosted fields.
- You can also change the style of the hosted fields (for example, switch to Arabic
  right-to-left text style).
- Partners using this mode are obliged to maintain a high level of network security
  and be PCI-DSS certified.
- PCI-DSS compliant API for direct payments
- Used when the end-user buys a service or good on your website and then is redirected
  to the PSP (Payment Service Provider) payment page.
- Check payment status at https://api.tink.com/api/v1/payments/requests/{payment_request_id}/transfers
- Lemonway is a regulated Payment Institution under the European Banking Authority.
- Funds are segregated and protected under the GDR scheme.
- If you are an existing Lemonway partner and would like a dedicated payment wallet
  to store your merchant's VAT please contact a member of our support team.
- Lemonway is working on new ways to help you move money fast and efficiently as well
  as help streamline the Pay-Outs you provide to your users.
- We are working hard to bring you new APIs in the near future.
- Legislation is expected to pass in late 2024.
- Some objects like Contact may return nulls in deeply nested fields
- Integration is designed to be extended or customized to fit your needs.
- Lemonway's technical account supports one currency at a time.
- If you run your application in production mode, you must also compile DI and deploy
  static files.
- Use this option to connect the Lemonway payment plugin for Adobe Commence (Magento)
  to the Lemonway sandbox.
- Before setting up the extension in your production environment, you need to test
  your setup on the development site connected to the Lemonway sandbox.
- Lemonway will provide beneficiary information, IBAN, and BIC/SWIFT.
- The signature mode must be agreed upon with Lemonway as it must be activated internally
  by a member of Lemonway staff.
- The connector ensures continuous consistency between the 2 environments by ensuring
  that actions carried out in both directions Mirakl or Lemonway are mirrored immediately.
- Lemonway's connector is compatible with all Lemonway payments methods.
- Merchant signs up to the Marketplace.
- Merchant invited to create a shop on the Marketplace.
- When live the offer is visible on TechGadgets marketplace website.
- Payments for items or services bought on the marketplace are done directly by the
  marketplace by calling Lemonway's API.
- Refunds are performed by the marketplace operator in the same way, using the original
  Money-In transaction, Lemonway's API.
- Marketplace operator decides the billing cycle duration on the Mirakl platform.
- Each request must include wlLogin, wlPass, language, version, walletIp.
- This endpoint is soon to be deprecated, we advise you move to our new Online Onboarding
  system.
- Ensure all URLs (returnUrl, cancelUrl, errorUrl) are publicly accessible.
- Whenever you see `accountId` in a path or body parameter, enter your wallet’s ID.
- All callback URLs must be publicly accessible and reachable by Lemonway’s WebKit.
- API keys are generated and managed by the Lemonway Dashboard. They have an unlimited
  lifespan.
- The test environment will remain available throughout the duration of the contract.
- Ensure that you have fulfilled the required Lemonway requirements before you test
  on your platform.
- The validity date must be greater than or equal to the current month.
- CVV is an integer composed of any 3 digits.
- OAuth2 authentication is required to access the API.
- Only valid if a user has been fully Onboarded and accepted.
- Redirects the user back to your specified redirectUrl once all steps succeed (or
  fail).
- When passing the token in the header for Online Onboarding, make sure to use 'Bearer'
  with a capital B.
- Updated 4 months ago
- When passing the token in the header for Online Onboarding, make sure to use 'Bearer'
  with a capital 'B'.
- Webhook notifications can be delayed by up to one hour. We recommend performing
  a GET request after receiving a webhook to retrieve the latest information.
- Use dev endpoints until the flow works end-to-end.
- Switch to production endpoints.
- Keep all API calls on the server; expose only onboardingUrl.
- Serve every page over HTTPS.
- The widget automatically adjusts its height based on the content.
- The minimum height is 800px.
- Never embed API keys or OAuth tokens in client-side code.
- Use HTTPS for all API calls and for serving the widget page.
- These regexes validate mobile numbers only.
- They do not accept spaces or dashes.
- 'E.164 format is always: + country code subscriber number (no leading 0).'
- Requires registering the mandate with RegisterSddMandate before using this endpoint.
- Ensure to provide a return URL for post-signature redirection.
- Whenever you see accountId in a path or body parameter, enter your wallet’s ID.
- This endpoint is soon to be deprecated, move to the new Online Onboarding system.
- If an entity’s status changes multiple times during that period, it will appear
  once for each change.
- This feature is governed by your contract.
- Payment with a New Card requires 3-D Secure protection.
- You only receive the cardId after your first 3‑D Secure payment is confirmed.
- Due to PSD2 requirements for strong customer authentication, you can no longer re-bill
  a registered card for amounts that change on each transaction.
- This step is not a payment—it only confirms successful authentication.
- You must not call both endpoints. Use 3dauthenticate for authentication-only checks,
  or 3dconfirm to finalize the payment—never both.
- Authorization bearer (OAuth 2) is required.
- Pre-authorization validation can only be done once.
- Amounts are displayed as an integer in cents (Euro).
- This method finalizes the credit of a wallet by card after 3D Secure authentication
  of the client.
- Apple Pay is a secure digital wallet that tokenises card information, allowing seamless
  online transactions without sharing card details with merchants.
- cURL example provided for request
- Payment page URL is included in the response
- Payment plans are typically configured in collaboration with Lemonway’s Implementation
  team.
- Lemonway hosts and manages the payment pages
- Only bank-card payments are supported
- Deferred payment is not supported
- Deferred payment is not supported.
- 'Important: Whenever you see accountId in a path or body parameter, enter your wallet’s
  ID.'
- 'Pre‑approval required: Your wire‑transfer schema must be validated by Lemonway
  before use.'
- 'Activation: Contact your Lemonway account manager to enable this feature.'
- 'On‑demand creation: Call this method only when you know a payment is incoming—avoid
  assigning IBANs ''just in case.'''
- Only the first B2B Direct Debit on an Italian IBAN incurs a ~14‑day mandate‑validation
  period.
- Response language accepted by final client (PSU). English by default.
- Omit country to retrieve every supported bank worldwide
- There’s no keyword search—if you filter by country, you’ll receive the full list
  for that country
- Uses OAuth2 authentication for API access.
- Cheque must be made out to Lemonway.
- Holder of the cheque must match the payment account holder.
- Each iDEAL transaction can only be finalized once.
- Your site returns the URL, called to terminate the operation and on which the callback
  will be sent, with data in POST parameters.
- Bank details are required only for outbound transfers (Money-Out), not for incoming
  payments (Money-In) or P2P.
- Adding a new IBAN does not disable previously registered accounts.
- Bank details are only needed for Money-Out transactions.
- Adding a new bank account does not disable previously registered accounts.
- IBANs are required for outbound (Money‑Out) transactions.
- They are not needed for inbound (Money‑In) or P2P transfers between payment accounts.
- Refunds must go to the original funding source (the card used or the bank account
  that processed the initial payment).
- Lemonway may retain applicable processing fees.
- Omitting an amount defaults to a full refund.
- Refund requests must be made within 12 months of the original transaction.
- Ensure your redirect URLs are publicly available so we can correctly send you all
  notifications.
- 3D-Secure is used if the bank of the user enables 3D Secure.
- For security reasons, in any case of return by the POST, your server has to double-check
  the payment using the GetMoneyInTransDetails method of DirectKit to make sure the
  payment was done.
- This function is used to sign a document.
- The user receives an SMS with a code to complete the signature process.
- Webhooks can be configured from the Dashboard Notifications section.
- Account may be blocked for verification if a potential match is found with sanctions
  lists.
- Notification includes fields such as NotifCategory, NotifDate, IntId, ExtId, Status,
  and Blocked.
- OAuth Authentication required
- OAuth authentication is required.
- Webhook Notifications include Money-In Creation.
- You can simulate this POST notification using the Postman API client tool or a cURL
  request.
- All error descriptions are sent in French
- Webhook Notifications available for Money-Out statuses
- Requires setup of connected app in api
- Notification includes fields such as NotifCategory, NotifDate, IntId, ExtId, DocId,
  DocType, and Status.
- Chargebacks refer to the return of funds to a consumer, initiated by the issuing
  bank of the instrument used by a consumer to settle a debt.
- Uses OAuth2 for authentication.
- These statuses may or may not be used depending on your business
- Uses OAuth2 authentication
- Document type not processable automatically
- Expected document not detected by computer (make sure the document is correct, very
  clear and on a neutral background)
- Wrong Type
- Wrong Name (name not matching user information)
- File too big (file should not be over 4MB to be processed automatically)
- Automatic controls failed
- Need 2 sides of the document in one file
- Unknown
- Online onboarding API available
- Requires setup for OAuth authentication
- Complete Lemonway Error List
- If you have messages that start with 1XXX, 2XXX or 3XXX please contact Lemonway
  Support for further help.
- Updated 7 months ago
- The entered cheque number cannot be validated.
- The RLMC key of the check is invalid. Ensure that you review the key and the entered
  cheque number.
- The entered cheque number is incomplete.
- The RLMC key of the cheque is invalid, please check the key and the entered cheque
  number.
- The entered cheque number is Incomplete.
- Chargeback/Dispute Management exists within the Lemonway API.
- Code Banco Sabadell includes various error codes related to disputes and chargebacks.
- Many SDD codes are also included in the Credit Transfer Reason Code.
- Payment Account ID is required and must be between 0 and 256 characters.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'INVALID_REQUEST: Check request parameters for correctness.'
- 'UNAUTHORIZED_ACCESS: Validate API key and permissions.'
- 'USER_NOT_FOUND: Check the email address or user ID.'
- 'INVITATION_EXPIRED: Resend the invitation if it has expired.'
- 'USER_ALREADY_EXISTS: The user already exists'
- 'INVALID_EMAIL: The provided email is invalid'
- '401 Unauthorized: Recheck OAuth token or credentials'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Recheck OAuth token'
- '500 Internal Server Error: Retry later'
- 'INVALID_REQUEST: Check if all required fields are filled'
- 'UNAUTHORIZED: Ensure valid authentication credentials'
- '401 Unauthorized: Check OAuth token expiration.'
- '403 Forbidden: Verify user permissions.'
- '401 Unauthorized: Check client credentials or token expiration'
- '400 Bad Request: Validate input parameters'
- '429 Too Many Requests: Throttle API calls'
- 'Hold expires: Contact customer to perform another pre-authorization.'
- '365: Amount is less than Authorized Value'
- 'error message 366: Contact our Support Team to assist you.'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '110: Insufficient funds'
- '244: SDD mandate not found.'
- '245: SDD mandate invalid.'
- '246: SDD mandate is currently already in use for a direct debit.'
- '258: Already document associated with this mandate.'
- '138: This feature is not available. Please contact the Support Team.'
- 'ERR_INPUT_VALIDATION: Ensure that you enter the correct ISO country code format.'
- 'ERR_FUNCTIONAL: If you receive this error contact Lemonway Support. You will need
  to speak to an Implementation Manager to set up your BNPL service.'
- 'Invalid parameters: Ensure all mandatory fields are filled.'
- 'Unauthorized: Check your API credentials.'
- '401 Unauthorized: Check your credentials.'
- '401 Unauthorized: Verify your authentication credentials'
- 'Invalid card: If the PSP rejects the card (invalid card), we deactivate it for
  future transactions.'
- Could not find a matching version of package lemonway/payment. Check the package
  spelling, your version constraint and that the package is available in a stability
  which matches your minimum-stability (stable).
- 'Fatal error: Allowed memory size of 2146435072 bytes exhausted (tried to allocate
  4096 bytes)'
- Invalid API Requests
- Server or Network Incidents
- Blocked Payments for Regulatory Reasons
- 401 Unauthorized
- 500 InternalServerError
- '368: recurringAvgAmount must be greater than the transaction amount'
- '400: Bad Request: The Authorization Server is unable to process the request due
  to an error.'
- '401: Unauthorized: The sent request is not authenticated with the Authorization
  Server.'
- '404: Not Found: This indicates that the sent request was unable to communicate
  with the Authorization Server.'
- '500: Internal Server Error: Indicates that there is a problem or fault with the
  Authorization Server.'
- 'Invalid API Requests: Check your API request format'
- 'Server or Network Incidents: Try again later'
- 'Blocked Payments for Regulatory Reasons: Contact support'
- '400: Invalid parameters'
- '401: Unauthorized (missing or invalid API key or JWT token)'
- '403: Forbidden'
- '404: Document not found'
- '500: Internal server error'
- '403 Forbidden: Using Authorization: bearer (with a lowercase "b") will result in
  a 403 Forbidden error.'
- '400: Invalid request (missing parameters or invalid file)'
- '401: Unauthorised (missing or invalid authentication token)'
- '404: Onboarding or account not found'
- '368: recurringAvgAmount should be greater than the transaction amount'
- Declined Payments
- 'Invalid API Requests: Check the request format and parameters.'
- 'Server or Network Incidents: Retry the request after a few moments.'
- 'Blocked Payments for Regulatory Reasons: Contact support for assistance.'
- 'Invalid API Requests: Ensure the request format is correct.'
- 'Declined Payments: Check for regulatory reasons.'
- '2001: Command not recognised'
- '2002: Operation cancelled by the user'
- '2003: Authentication failed on Webkit'
- '2004: Bad format Request'
- '3000: Server Error'
- '4000: Unknown Error'
- 'INVALID_SIGNINGTOKEN: Ensure the signing token is valid and not expired.'
- Blocked by Lemonway – Potential match with a sanctions list
- Blocked by Partner
- Blocked by Lemonway – AML/CFT analysis in progress
- Blocked by Lemonway – Suspicion of fraud
- Blocked by Lemonway – Legal entity potential match with a sanctions list
- Blocked by Lemonway – Legal representative potential match with a sanctions list
- Blocked by Lemonway – Ultimate Beneficial Owner (UBO) potential match with a sanctions
  list
- 'INVALID_REQUEST: Check the parameters sent in the request'
- 'UNAUTHORIZED: Check your API key and permissions'
- 'NOT_FOUND: Resource not found'
- 'Invalid API Requests: Check the request format or parameters.'
- 'Invalid API Requests: Check the request format and parameters'
- 'Invalid API Requests: Check request format and parameters.'
- 'Server or Network Incidents: Retry the request later.'
- General Codes
- Card Payments
- Direct Debit
- Payments by Cheques
- Chargeback/Dispute Management
- '1: Internal error'
- '100: The limit amount reached by the sending wallet'
- '101: The limit amount reached by the receiving wallet for P2Ps'
- '105: Incorrect password'
- '109: The amount exceeds the limit'
- '110: Insufficient credit'
- '111: Invalid status for the sender'
- '114: Incorrect anti-phishing code format'
- '118: An error occurred while calculating the commission'
- '120: Authentication error'
- '121: Card deactivated. You attempted to register the card, but the transaction
  with PSP encountered an error, resulting in the deactivation of the cardId.'
- '124: Unknown error returned by the payment gateway (Mercanet, iDeal, Sofort)'
- '128: Invalid phone number'
- '137: Wallet type not allowed'
- '138: Unavailable functionality (depends on your contract)'
- '139: Ignored number'
- '140: Session not found'
- '142: Unable to connect. Another session is already started for this user'
- '143: Transaction not found. If searching for a transaction: please fill in one
  of the search fields. If validating a transaction: the transaction does not exist
  or its status does not allow validation'
- '146: Incorrect wallet status'
- '147: Wallet not found'
- '148: Invalid login'
- '151: Amount not allowed (higher than refundable amount, or lower than €0.50 for
  a card payment, not allowed according to your contract, or too high. Please contact
  support)'
- '152: Wallet ID already exists'
- '153: Error setting password'
- '155: Incorrect identity card number'
- '162: Client not found'
- '167: Sender''s wallet blocked for security reasons'
- '168: Receiver wallet blocked for security reasons'
- '170: Invalid operation returned by the payment gateway'
- '171: Operation refused by the payment gateway'
- '172: Internal error in the payment gateway'
- '173: You are not allowed to do a Money-In'
- '174: Error during Money-In'
- '175: Mobile number and email do not match any account in the system'
- '176: Error when sending email'
- '177: Error during the email change process'
- '178: Incorrect email format'
- '186: You cannot send money to yourself'
- '187: The amount is higher than the balance'
- '188: Incorrect amount format'
- '190: Internal error in the card payment processing (Visa & Mastercard)'
- '192: ERR_DEMANDEXP'
- '193: ERR_DEMAND_EXIST_BUT_NOT_A_PAYMENT'
- '195: ERR_TRANS_WRONGID'
- '200: Registration failed'
- '202: Bad secret answer format'
- '203: Unknown secret question'
- '204: Email already used'
- '209: Suspected fraud from the payment gateway'
- '210: User not registered'
- '211: You can not send money to yourself'
- '212: Bad card data format'
- '213: Unknown partner'
- '215: No approved IBAN found for this wallet'
- '217: Your account is temporarily blocked - click **Forgot password**'
- '218: Your account is blocked - contact our support team'
- '219: The card was not found. You may have entered the **cardId** incorrectly, or
  the card does not exist'
- '220: RIB has already been deleted'
- '221: Bad IBAN data format'
- '230: Error while executing the operation'
- '234: Bad input data'
- '235: File too big or wrong format'
- '236: IP in the input parameter is blacklisted'
- '237: Email is blacklisted'
- '238: IBAN is blacklisted'
- '239: Incorrect URL format'
- '240: Error while executing the operation'
- '241: A document of the same type is already pending review by LW''s KYC services'
- '242: Incorrect BIC/SWIFT code format'
- '243: The specified document type does not exist'
- '244: SDD mandate not found'
- '245: Invalid SDD mandate'
- '246: SDD mandate is currently already in use for a direct debit'
- '247: Incorrect date format'
- '248: Incorrect IP format'
- '249: Mobile number is mandatory for electronic signature'
- '250: Type is mandatory'
- '251: Address is mandatory'
- '252: Incorrect first or last name format'
- '253: Incorrect phone number format'
- '254: Invalid date'
- '255: The session cannot be found. Reconnect'
- '257: Unable to connect, another session is already started for this user'
- '258: The document already associated with this mandate'
- '259: Access temporarily blocked'
- '260: The amount is higher than the rolling reserve'
- '261: Payment not found or already processed'
- '262: Invalid payment account'
- '263: Payment not found or already processed'
- '264: Invalid Wallet ID'
- '265: Incorrect card type format'
- '266: Incorrect card date format'
- '267: Incorrect card crypto format'
- '281: Incorrect status'
- '282: Wallet blocked'
- '283: Insufficient permissions'
- '284: Contract already signed'
- '285: Invalid transaction status'
- '286: Invalid Document ID'
- '287: Invalid document type (expected: jpg, jpeg, png, tif, tiff, pdf)'
- '288: Network error'
- '289: Unsupported document type'
- '290: IBAN not found'
- '291: Unmatched names'
- '292: Incorrect IBAN status'
- '293: Document type error'
- '294: Invalid format for document type (must be an integer)'
- '295: Upload blocked for this document type'
- '296: PSP error'
- '297: Timeout error'
- '298: Invalid partner type'
- '299: Invalid annual estimation'
- '300: The sender and receiver wallets are identical'
- '301: The date is prior to the wallet creation date'
- '302: Unknown control'
- '303: Control error'
- '304: Refused transaction'
- '305: Execution error'
- '306: Empty IBAN DOM'
- '307: IBAN ID is not associated with this wallet'
- '308: No available IBAN'
- '309: Wallet IBAN limit reached'
- '310: Execution error'
- '341: An identical document has already been found in the database for this account'
- '342: Mandatory bank branch code required'
- '343: Mandatory bank name'
- '344: Mandatory bank branch address required'
- '345: Mandatory IBAN required'
- '346: Invalid country code'
- '355: Missing cheque information or RLMC'
- '356: Incorrect cheque information'
- '361: This card was not registered. You wanted to register the card. The client
  decided to click **no** ( card will not be saved) on the PSP webpage at the end
  of a transaction.'
- '362: Invalid bank ID'
- '363: No bank available in this country'
- '364: The country code is missing'
- '373: BNPL Service - ERR_INPUT_VALIDATION (Explicit error message given, details
  in message)'
- '374: BNPL Service - ERR_FUNCTIONAL (Explicit error message given, details in message)'
- '375: BNPL Service - ERR_TECHNICAL - Contact Lemonway Support'
- '109: The amount is higher than the limit'
- '118: Error while calculating commission'
- '121: Card deactivated. You wanted to register the card, but the transaction with
  PSP was in error, so the cardId was deactivated.'
- '143: Transaction not found. If searching for a transaction: please fill in one
  of the search fields. If validating a transaction: transaction does not exist or
  status does not allow validation'
- '151: Amount not allowed (higher than refundable amount, or lower than 0.50€ for
  a card payment, not allowed according to your contract, or too high. Please contact
  support)'
- '155: Wrong identity card number'
- '178: Wrong email format'
- '188: Incorrect amount format.'
- '211: You cannot send money to yourself'
- '219: The card was not found. You may have entered the cardId incorrectly, or the
  card does not exist'
- '239: Bad format URL'
- '243: The type of document does not exist'
- '245: SDD mandate invalid'
- '247: Wrong date format'
- '248: Wrong IP format'
- '249: Mobile number mandatory for electronic signature'
- '250: Type mandatory'
- '251: Address Mandatory'
- '252: Wrong first or last name format'
- '253: Bad format phone number'
- '258: Already document associated with this mandate'
- '242: Wrong BIC/SWIFT code format'
- '262: The payment account is not valid'
- '265: Bad format for the card type'
- '266: Bad format for card date'
- '267: Bad format for card crypto'
- '281: Wrong status'
- '285: Transaction status invalid'
- '287: Invalid type of document (expected: jpg, jpeg, png, tif, tiff, pdf)'
- '291: Un-matching names'
- '294: Invalid format for the type of document (has to be an integer)'
- '295: Upload blocked for this type of document'
- '301: Date prior to the wallet creation date'
- '316: Card expired'
- '341: The identical document already found in the database for this account'
- '361: This card was not registered. You wanted to register the card. The client
  decided to click no (not to save card) on the PSP Webpage at the end of a transaction.'
- '363: No bank is available in this country'
- '368: recurringAvgAmount amount should be greater than the transaction amount.'
- '373: BNPL Serice - ERR_INPUT_VALIDATION (Explicit error message given, details
  in message)'
- '142: Can not connect. Another session is already started for this user'
- '153: Error Setting Pass'
- '174: Error during money-in'
- '179-185: Error while executing the operation, please try again later'
- '189: Error while executing the operation, please try again later'
- '191: Error while executing the operation. Try again later'
- '230: Error while executing the operation. Try again later'
- '232-233: Error while executing the operation. Try again later'
- '240: Error while executing the operation. Try again later'
- '255: The session can not be found. Reconnect'
- '100: Limit amount reached by the sending wallet'
- '101: Limit amount reached by the receiving wallet for P2Ps'
- '173: You are not allowed to do a money-in'
- '217: Your account is temporarily blocked, please click on ''Forgot password'''
- '218: Your account is blocked, please contact our support team'
- '260: Amount higher than the rolling reserve'
- '282: Wallet Blocked'
- '124: Unknown error returned by the payment gateway'
- '209: Fraud suspicion from the payment gateway'
- '0000: Successful operation'
- '0001: 3-D Secure authentication required'
- '0002: Redirection required to finish a transaction'
- '0003: Transaction in progress, pending notification'
- '1001: Missing parameter'
- '1002: Invalid parameter'
- '1003: HASH error'
- '1004: Unsupported protocol'
- '1005: Bad request, please check the documentation to build the POST request'
- '1006: GET parameters are forbidden'
- '1007: CART total amount is different from the transaction amount'
- '2001: ALIAS not found'
- '2002: Reference transaction not found'
- '2003: Reference transaction not succeeded'
- '2004: Reference transaction not refundable'
- '2005: Reference authorization not capturable'
- '2006: Reference transaction not finished'
- '2007: Invalid capture amount'
- '2008: Invalid refund amount'
- '2009: Expired authorization'
- '2010: Installment schedule not found'
- '2011: Installment schedule already interrupted'
- '2012: Installment schedule already finished'
- '2013: File not found'
- '2014: Invalid file'
- '2015: The reference transaction is not voidable'
- '2016: Resource already exists'
- '2017: The requested operation is not available yet, please try again later'
- '2018: The requested HFTOKEN has not been found or is expired'
- '2019: The void amount is invalid'
- '2020: The alias has expired'
- '3001: Disabled account'
- '3002: Unauthorized server IP address'
- '3003: Unauthorized transaction'
- '3004: Transactions rate limit exceeded'
- '3006: Invalid submerchant for this account'
- '3008: Payment options not configured'
- '4001: Transaction declined by the banking network'
- '4002: Insufficient funds'
- '4003: Card declined by the banking network'
- '4005: Fraud suspicion'
- '4008: 3DSecure authentication failed'
- '4009: 3DSecure authentication abandoned or expired'
- '4010: Invalid transaction'
- '4011: Duplicated transaction'
- '4012: Invalid card data'
- '4013: Transaction not allowed by banking network for this holder'
- '4014: Non 3-D Secure-enrolled card'
- '4015: Expired transaction'
- '4016: Transaction declined by the payment terminal'
- '4017: Form expiration (as planned by the merchant)'
- '4018: Recurring payment revoked for this card holder'
- '4019: The bank will decline further transactions from this card'
- '4020: Strong customer authentication required by issuer'
- '4021: Operation not allowed / not supported'
- '5001: Exchange protocol failure'
- '5002: Banking network error'
- '5004: Time out, the response will be sent to the notification URL (only applicable
  for Visa / MasterCard direct connection)'
- '5005: 3-D Secure authentication error'
- '5006: Unexpected bank response'
- '6001: Transaction declined by the merchant'
- '6002: Transaction declined'
- '6003: The cardholder has already disputed a transaction'
- '6004: Transaction declined by merchant and/or platform rules'
- '6005: Card not enrolled or 3-D secure unavailable'
- '6006: Blocked payment method'
- '6007: Operation prohibited by the bank networks'
- '6008: Card holder has already declared transaction as fraudulent'
- 'SVU_3011: The entered cheque number cannot be validated.'
- 'SVU_3013: The RLMC key of the check is invalid. Ensure that you review the key
  and the entered cheque number.'
- 'SVU_3014: The entered cheque number is incomplete.'
- 'SVU_3016: The RLMC key of the cheque is invalid, please check the key and the entered
  cheque number.'
- 'SVU_3017: The entered cheque number is Incomplete.'
- 'coup0004: The payment failed before receiving the cheque (Viamobis).'
- 'coup0005: The payment failed before receiving the cheque (Lemonway).'
- 'SVU_1002: Data cannot be decoded correctly (incorrect secret key).'
- 'SVU_1006: Invalid value (variable name).'
- 'SVU_2001: No payment is currently in progress.'
- 'SVU_2002: This payment has already been processed (confirmed or cancelled).'
- 'SVL_3003: The session has expired, and you can not continue your payment.'
- 'SVU_3009: The entered bank check cannot be validated. Review the cheque number
  or use another chequebook.'
- '30: Services Not Provided or Merchandise Not Received'
- '41: Cancelled recurring transaction'
- '45: Disputed transaction'
- '53: Not as Described or Defective Merchandise'
- '75: Transaction not recognized'
- '82: Duplicate processing'
- '83: Fraud'
- '85: Credit not processed'
- '4834: Point-of-Interaction Error'
- '4837: No cardholder authorization'
- '4853: Cardholder dispute'
- '4855: Goods or Services Not Provided'
- '4863: Cardholder does not recognize - Potential Fraud'
- '4501: Operation not valid'
- '4502: Holder dispute'
- '4503: Expired card'
- '4506: Incorrect amount or card number'
- '4510: Payment processed as a charge'
- '4512: Duplicated operation'
- '4513: Payment not received'
- '4514: Fraudulent operation ( AMD)'
- '4515: Transaction not completed'
- '4516: Photocopy request unanswered'
- '4517: Photocopy request illegible'
- '4521: Operation not authorised'
- '4522: Authorisation rejected'
- '4523: Inexistent card'
- '4524: Error in addition'
- '4525: Paid by other means'
- '4526: Fraud. Operation not acknowledged by the holder'
- '4527: Fraud in a face-to-face environment'
- '4531: Holder dispute'
- '4532: Defective goods or goods other than those specified'
- '4534: Multiple non-authorised transactions'
- '4535: Card included in exceptions file'
- '4536: Operation submitted after the deadline'
- '4538: Deposit for reservation of accommodation'
- '4544: Recurring operation cancelled'
- '4545: Currency code incorrect'
- '4546: Fraud in a non-presential environment'
- '4547: Card included in exceptions file'
- '4549: Incorrect card number'
- '4550: Holder does not acknowledge op. over the telephone'
- '4551: Transaction currency not included'
- '4554: Cash not received'
- '4555: Services not provided or goods not received'
- '4556: Goods not as specific'
- '4753: Operation not reconciled'
- '4762: Magnetic stripe of card forged'
- '4801: Request for receipt without confirming dispatch in IPM (4516)'
- '4857: Multiple non-authorised transactions'
- '4859: Services not rendered'
- '4863: Transaction not acknowledged by the holder'
- '4870: Operation not acknowledged by holder-chip card'
- '4871: Operation not performed by the holder'
- '4896: Amount in excess of the limit in limited amount terminal'
- '4901: Documentation required not received in representation'
- '4902: Documentation of representation is illegible'
- '4903: The documentation furnished is incomplete or invalid'
- '4908: Operation not authorised'
- '4924: Card included in exceptions file'
- 'INVALID_REQUEST: Check request parameters.'
- 'UNAUTHORIZED: Verify API key or token.'
- 'NOT_FOUND: Resource does not exist.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - API Key
  - OAuth Authentication
client:
  base_url: https://ws.staging.lemonway.com/mb/currentSandbox/prod/directkitrest/v2
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
