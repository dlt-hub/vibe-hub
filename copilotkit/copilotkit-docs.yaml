resources:
- name: CopilotKit MCP
  endpoint:
    path: /sse
    method: GET
    data_selector: ''
- name: copilotkit
  endpoint:
    path: /api/copilotkit
    method: POST
- name: useCopilotAction
  endpoint:
    path: /reference/hooks/useCopilotAction
    method: GET
    data_selector: hooks
- name: OpenAI Adapter
  endpoint:
    path: /reference/classes/llm-adapters/OpenAIAdapter
- name: OpenAI Assistant Adapter
  endpoint:
    path: /reference/classes/llm-adapters/OpenAIAssistantAdapter
- name: LangChain Adapter
  endpoint:
    path: /reference/classes/llm-adapters/LangChainAdapter
- name: Groq Adapter
  endpoint:
    path: /reference/classes/llm-adapters/GroqAdapter
- name: Google Generative AI Adapter
  endpoint:
    path: /reference/classes/llm-adapters/GoogleGenerativeAIAdapter
- name: Anthropic Adapter
  endpoint:
    path: /reference/classes/llm-adapters/AnthropicAdapter
- name: messages
  endpoint:
    path: /localstorage/messages
    method: GET
    data_selector: messages
- name: state_machine_example
  endpoint:
    path: /direct-to-llm/cookbook/state-machine
    method: GET
    data_selector: examples
    params: {}
- name: CopilotKit MCP
  endpoint:
    path: /sse
    method: GET
- name: frontend_action
  endpoint:
    path: /frontend/actions
    method: POST
    data_selector: actions
    params: {}
- name: observability_hooks
  endpoint:
    path: /observability/hooks
    method: GET
    data_selector: hooks
    params: {}
- name: frontend_action
  endpoint:
    path: /frontend/actions
    method: POST
    data_selector: actions
    params: {}
- name: CopilotKit MCP
  endpoint:
    path: /sse
    method: GET
- name: useCopilotChatSuggestions
  endpoint:
    path: /reference/hooks/useCopilotChatSuggestions
    method: GET
    data_selector: suggestions
    params: {}
- name: useCopilotAction
  endpoint:
    path: /reference/hooks/useCopilotAction
    method: GET
    data_selector: action
    params: {}
- name: instructions
  endpoint:
    path: /useCopilotAdditionalInstructions
    method: POST
    data_selector: instructions
    params: {}
- name: agent_state
  endpoint:
    path: /coagents/state
    method: GET
    data_selector: state
    params: {}
- name: coagent
  endpoint:
    path: /useCoAgentStateRender
    method: GET
    data_selector: state
    params: {}
- name: CopilotTask
  endpoint:
    path: /reference/classes/CopilotTask
    method: GET
    data_selector: records
notes:
- The `instructions` parameter is the recommended way to customize AI assistant behavior.
- Uses 'use client' directive if using Next.js with the App Router
- Authentication headers automatically propagated to backend tools
- Copilot Cloud provides content moderation capabilities through the guardrails_c
  configuration, helping ensure safe and appropriate AI interactions.
- This recipe introduced a powerful pattern for building conversational AI applications
  using state machines.
- Avoid showing the dev console in production as it exposes internal error details
  to end users.
- Common issues you may encounter when using Copilots.
- If you're encountering network or API errors, here's how to troubleshoot.
- This feature is only available when using CopilotKit's hosted cloud service.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Empower users to guide agents at key checkpoints.
- Prerequisites include LangSmith API key and OpenAI API key.
- The Fully Headless UI extension is in Early Access to CopilotKit Premium users.
- Human-in-the-loop (HITL) allows agents to request human input or approval during
  execution.
- HITL combines the efficiency of AI with human judgment, creating a system that's
  both powerful and reliable.
- Any LangGraph agent can be used with CopilotKit.
- Frontend actions are automatically populated by CopilotKit.
- Router mode requires that you set up an LLM adapter.
- For agents deployed to LangGraph Platform, authentication works out of the box with
  the @auth.authenticate decorator.
- Ensure you're passing authorization in the properties prop.
- Access to premium features requires a public license key.
- A public API key is utilized for access to Copilot Cloud.
- All observability hooks require a publicLicenseKey or publicAPIkey
- 'Important: Observability hooks will not trigger without a valid key.'
- All observability hooks require a publicLicenseKey or publicAPIkey.
- Message streaming is on by default.
- Emission of tool calls are off by default.
- Editing the message history is not currently supported on the front-end, but will
  be soon.
- No API key required for local development.
- Requires publicApiKey for production error observability.
- If you're encountering network or API errors, check your endpoint configuration.
- Check your FastAPI setup if using python's FastAPI.
- Open-source telemetry is completely anonymous
- We do not collect any data about end-users
- We do not collect any application data flowing through your system, only CopilotKit
  metadata
- We do not sell or share any data with third parties
- We do not use cookies or trackers in open-source telemetry
- To minimize the frequency of data sent, we apply batching and sampling to telemetry
- Early Access feature for CopilotKit Premium users
- Requires a publicLicenseKey (when self-hosting) or publicApiKey from Copilot Cloud
- Observability hooks will not trigger without a valid key
- The Inspector is available to CopilotKit Premium users.
- Use publicApiKey for Copilot Cloud
- Use publicLicenseKey for self-hosted CopilotKit
- Message format has changed from classes to plain objects for better performance
  and simpler handling.
- Custom sub-components remain fully supported.
- We do not collect any data about end-users (the users interacting with your copilot)
- Open Source Friendly - Works without requiring a free public license key.
- This is a premium-only feature
- Usage is generous, free to get started, and works with either self-hosted or Copilot
  Cloud environments
- Requires publicApiKey from CopilotKit component to be set
errors:
- '401 Unauthorized: Provide clear auth errors'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Ensure proper token format and validation.'
- '401 Unauthorized: Ensure valid publicLicenseKey or publicApiKey'
- Check your publicApiKey - error observability requires a valid API key.
- Verify the key format - should start with ck_pub_.
- Ensure publicApiKey or publicLicenseKey is set (starts with ck_pub_)
- Check that your environment variables are loaded
- Verify errors actually occur
auth_info:
  mentioned_objects:
  - AuthState
  - Auth
  - AgentState
  - RunnableConfig
  - publicApiKey
  - publicLicenseKey
client:
  base_url: https://cloud.copilotkit.ai
source_metadata: null
