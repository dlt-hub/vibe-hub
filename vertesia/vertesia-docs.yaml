resources:
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
- name: interactions
  endpoint:
    path: /api/interactions
    method: GET
    data_selector: interactions
- name: Multipurpose Agent
  endpoint:
    path: /agent-runner
    method: POST
    data_selector: agent_execution
    params: {}
- name: Multipurpose Agent
  endpoint:
    path: /agent-runner
    method: GET
    data_selector: interactions
    params: {}
- name: Lease Agreement Agent
  endpoint:
    path: /agent-runner
    method: POST
    data_selector: interaction
    params: {}
- name: tools
  endpoint:
    path: /path/to/tools/endpoint
    method: GET
    data_selector: tools
- name: document_conversion
  endpoint:
    path: /api/document/convert
    method: POST
    data_selector: data
    params: {}
- name: Standard Document Intake Workflow
  endpoint:
    path: /semantic/configuration
    method: POST
    data_selector: useSemanticLayer
    params: {}
- name: think
  endpoint:
    path: /api/think
    method: POST
    data_selector: response
    params: {}
- name: plan
  endpoint:
    path: /api/plan
    method: POST
    data_selector: response
    params: {}
- name: update_plan
  endpoint:
    path: /api/update_plan
    method: PUT
    data_selector: response
    params: {}
- name: execute_parallel_work_streams
  endpoint:
    path: /api/execute_parallel_work_streams
    method: POST
    data_selector: response
    params: {}
- name: search_documents
  endpoint:
    path: /api/search_documents
    method: GET
    data_selector: response
    params: {}
- name: fetch_documents
  endpoint:
    path: /api/fetch_documents
    method: GET
    data_selector: response
    params: {}
- name: create_document
  endpoint:
    path: /api/create_document
    method: POST
    data_selector: response
    params: {}
- name: update_document
  endpoint:
    path: /api/update_document
    method: PUT
    data_selector: response
    params: {}
- name: get_object_type
  endpoint:
    path: /api/get_object_type
    method: GET
    data_selector: response
    params: {}
- name: create_or_update_object_type
  endpoint:
    path: /api/create_or_update_object_type
    method: POST
    data_selector: response
    params: {}
- name: analyze_spreadsheet
  endpoint:
    path: /api/analyze_spreadsheet
    method: POST
    data_selector: response
    params: {}
- name: update_spreadsheet
  endpoint:
    path: /api/update_spreadsheet
    method: PUT
    data_selector: response
    params: {}
- name: create_spreadsheet
  endpoint:
    path: /api/create_spreadsheet
    method: POST
    data_selector: response
    params: {}
- name: create_collection
  endpoint:
    path: /api/create_collection
    method: POST
    data_selector: response
    params: {}
- name: update_collection
  endpoint:
    path: /api/update_collection
    method: PUT
    data_selector: response
    params: {}
- name: add_to_collection
  endpoint:
    path: /api/add_to_collection
    method: POST
    data_selector: response
    params: {}
- name: remove_from_collection
  endpoint:
    path: /api/remove_from_collection
    method: DELETE
    data_selector: response
    params: {}
- name: get_collection
  endpoint:
    path: /api/get_collection
    method: GET
    data_selector: response
    params: {}
- name: search_collections
  endpoint:
    path: /api/search_collections
    method: GET
    data_selector: response
    params: {}
- name: web_search
  endpoint:
    path: /api/web_search
    method: GET
    data_selector: response
    params: {}
- name: execute_code
  endpoint:
    path: /api/execute_code
    method: POST
    data_selector: response
    params: {}
- name: ask_user
  endpoint:
    path: /api/ask_user
    method: POST
    data_selector: response
    params: {}
- name: analyze_image
  endpoint:
    path: /api/analyze_image
    method: POST
    data_selector: response
    params: {}
- name: Standard Document Intake Workflow
  endpoint:
    path: /workflow/rules
    method: GET
    data_selector: rules
    params: {}
- name: createDocumentTypeFromInteractionRun
  endpoint:
    path: /workflows/activities/createDocumentTypeFromInteractionRun
    method: POST
    data_selector: renditions
- name: createOrUpdateDocumentFromInteractionRun
  endpoint:
    path: /workflows/activities/createOrUpdateDocumentFromInteractionRun
    method: POST
    data_selector: renditions
- name: updateDocumentFromInteractionRun
  endpoint:
    path: /workflows/activities/updateDocumentFromInteractionRun
    method: POST
    data_selector: renditions
- name: chunkDocument
  endpoint:
    path: /workflows/activities/chunkDocument
    method: POST
    data_selector: renditions
- name: createPdfDocumentFromSource
  endpoint:
    path: /workflows/activities/createPdfDocumentFromSource
    method: POST
    data_selector: renditions
- name: executeInteraction
  endpoint:
    path: /workflows/activities/executeInteraction
    method: POST
    data_selector: renditions
- name: extractDocumentText
  endpoint:
    path: /workflows/activities/extractDocumentText
    method: POST
    data_selector: renditions
- name: generateDocumentProperties
  endpoint:
    path: /workflows/activities/generateDocumentProperties
    method: POST
    data_selector: renditions
- name: generateEmbeddings
  endpoint:
    path: /workflows/activities/generateEmbeddings
    method: POST
    data_selector: renditions
- name: generateImageRendition
  endpoint:
    path: /workflows/activities/generateImageRendition
    method: POST
    data_selector: renditions
- name: generateVideoRendition
  endpoint:
    path: /workflows/activities/generateVideoRendition
    method: POST
    data_selector: renditions
- name: generateOrAssignContentType
  endpoint:
    path: /workflows/activities/generateOrAssignContentType
    method: POST
    data_selector: renditions
- name: getObjectFromStore
  endpoint:
    path: /workflows/activities/getObjectFromStore
    method: POST
    data_selector: renditions
- name: handleDslError
  endpoint:
    path: /workflows/activities/handleDslError
    method: POST
    data_selector: renditions
- name: convertPdfToStructuredText
  endpoint:
    path: /workflows/activities/convertPdfToStructuredText
    method: POST
    data_selector: renditions
- name: createDocumentTypeFromInteractionRun
  endpoint:
    path: /workflows/activities/createDocumentTypeFromInteractionRun
    method: POST
    data_selector: renditions
    params: {}
- name: createOrUpdateDocumentFromInteractionRun
  endpoint:
    path: /workflows/activities/createOrUpdateDocumentFromInteractionRun
    method: POST
    data_selector: renditions
    params: {}
- name: updateDocumentFromInteractionRun
  endpoint:
    path: /workflows/activities/updateDocumentFromInteractionRun
    method: POST
    data_selector: renditions
    params: {}
- name: chunkDocument
  endpoint:
    path: /workflows/activities/chunkDocument
    method: POST
    data_selector: renditions
    params: {}
- name: createPdfDocumentFromSource
  endpoint:
    path: /workflows/activities/createPdfDocumentFromSource
    method: POST
    data_selector: renditions
    params: {}
- name: executeInteraction
  endpoint:
    path: /workflows/activities/executeInteraction
    method: POST
    data_selector: renditions
    params: {}
- name: extractDocumentText
  endpoint:
    path: /workflows/activities/extractDocumentText
    method: POST
    data_selector: renditions
    params: {}
- name: generateDocumentProperties
  endpoint:
    path: /workflows/activities/generateDocumentProperties
    method: POST
    data_selector: renditions
    params: {}
- name: generateEmbeddings
  endpoint:
    path: /workflows/activities/generateEmbeddings
    method: POST
    data_selector: renditions
    params: {}
- name: generateImageRendition
  endpoint:
    path: /workflows/activities/generateImageRendition
    method: POST
    data_selector: renditions
    params: {}
- name: generateVideoRendition
  endpoint:
    path: /workflows/activities/generateVideoRendition
    method: POST
    data_selector: renditions
    params: {}
- name: generateOrAssignContentType
  endpoint:
    path: /workflows/activities/generateOrAssignContentType
    method: POST
    data_selector: renditions
    params: {}
- name: getObjectFromStore
  endpoint:
    path: /workflows/activities/getObjectFromStore
    method: POST
    data_selector: renditions
    params: {}
- name: handleDslError
  endpoint:
    path: /workflows/activities/handleDslError
    method: POST
    data_selector: renditions
    params: {}
- name: convertPdfToStructuredText
  endpoint:
    path: /workflows/activities/convertPdfToStructuredText
    method: POST
    data_selector: renditions
    params: {}
- name: createContentObjectActivity
  endpoint:
    path: /activities/createContentObject
    method: POST
    data_selector: renditions
- name: transcribeMedia
  endpoint:
    path: /activities/transcribeMedia
    method: POST
    data_selector: renditions
- name: notifyWebhook
  endpoint:
    path: /activities/notifyWebhook
    method: POST
    data_selector: renditions
- name: setDocumentStatus
  endpoint:
    path: /activities/setDocumentStatus
    method: POST
    data_selector: renditions
- name: checkRateLimit
  endpoint:
    path: /activities/checkRateLimit
    method: POST
    data_selector: renditions
- name: analysePageLayout
  endpoint:
    path: /activities/analysePageLayout
    method: POST
    data_selector: renditions
- name: transcribePageMarkdown
  endpoint:
    path: /activities/transcribePageMarkdown
    method: POST
    data_selector: renditions
- name: assembleDocument
  endpoint:
    path: /activities/assembleDocument
    method: POST
    data_selector: renditions
- name: assembleMarkdownDocument
  endpoint:
    path: /activities/assembleMarkdownDocument
    method: POST
    data_selector: renditions
- name: countPages
  endpoint:
    path: /activities/countPages
    method: POST
    data_selector: renditions
- name: storePagesAsImagesAndJson
  endpoint:
    path: /activities/storePagesAsImagesAndJson
    method: POST
    data_selector: renditions
- name: cleanPdf
  endpoint:
    path: /activities/cleanPdf
    method: POST
    data_selector: renditions
- name: performOcr
  endpoint:
    path: /activities/performOcr
    method: POST
    data_selector: renditions
- name: getTableMappings
  endpoint:
    path: /activities/getTableMappings
    method: POST
    data_selector: renditions
- name: getTablesIds
  endpoint:
    path: /activities/getTablesIds
    method: POST
    data_selector: renditions
- name: processTables
  endpoint:
    path: /activities/processTables
    method: POST
    data_selector: renditions
- name: generateExcelPreview
  endpoint:
    path: /activities/generateExcelPreview
    method: POST
    data_selector: renditions
- name: postUpdateMessage
  endpoint:
    path: /activities/postUpdateMessage
    method: POST
    data_selector: renditions
- name: generatePdfRendition
  endpoint:
    path: /activities/generatePdfRendition
    method: POST
    data_selector: renditions
- name: transcribeMedia
  endpoint:
    path: /transcribeMedia
    method: POST
- name: notifyWebhook
  endpoint:
    path: /notifyWebhook
    method: POST
- name: setDocumentStatus
  endpoint:
    path: /setDocumentStatus
    method: POST
- name: checkRateLimit
  endpoint:
    path: /checkRateLimit
    method: GET
- name: analysePageLayout
  endpoint:
    path: /analysePageLayout
    method: POST
- name: transcribePageMarkdown
  endpoint:
    path: /transcribePageMarkdown
    method: POST
- name: assembleDocument
  endpoint:
    path: /assembleDocument
    method: POST
- name: assembleMarkdownDocument
  endpoint:
    path: /assembleMarkdownDocument
    method: POST
- name: countPages
  endpoint:
    path: /countPages
    method: POST
- name: storePagesAsImagesAndJson
  endpoint:
    path: /storePagesAsImagesAndJson
    method: POST
- name: cleanPdf
  endpoint:
    path: /cleanPdf
    method: POST
- name: performOcr
  endpoint:
    path: /performOcr
    method: POST
- name: getTableMappings
  endpoint:
    path: /getTableMappings
    method: POST
- name: getTablesIds
  endpoint:
    path: /getTablesIds
    method: POST
- name: processTables
  endpoint:
    path: /processTables
    method: POST
- name: generateExcelPreview
  endpoint:
    path: /generateExcelPreview
    method: POST
- name: postUpdateMessage
  endpoint:
    path: /postUpdateMessage
    method: POST
- name: generatePdfRendition
  endpoint:
    path: /generatePdfRendition
    method: POST
- name: createContentObjectActivity
  endpoint:
    path: /workflows/createContentObjectActivity
    method: POST
    data_selector: renditions
    params: {}
- name: cleanUpCachedFiles
  endpoint:
    path: /workflows/cleanUpCachedFiles
    method: POST
    data_selector: result
    params: {}
- name: renderMarkdownDocument
  endpoint:
    path: /workflows/renderMarkdownDocument
    method: POST
    data_selector: output
    params: {}
- name: splitTextIntoChunks
  endpoint:
    path: /workflows/splitTextIntoChunks
    method: POST
    data_selector: result
    params: {}
- name: combineSectionsAndSave
  endpoint:
    path: /workflows/combineSectionsAndSave
    method: POST
    data_selector: result
    params: {}
- name: createCheckpoint
  endpoint:
    path: /workflows/createCheckpoint
    method: POST
    data_selector: result
    params: {}
- name: resumeConversation
  endpoint:
    path: /workflows/resumeConversation
    method: POST
    data_selector: result
    params: {}
- name: startConversation
  endpoint:
    path: /workflows/startConversation
    method: POST
    data_selector: result
    params: {}
- name: generateTools
  endpoint:
    path: /workflows/generateTools
    method: POST
    data_selector: result
    params: {}
- name: executeRemoteTool
  endpoint:
    path: /workflows/executeRemoteTool
    method: POST
    data_selector: result
    params: {}
- name: fetchDocumentActivity
  endpoint:
    path: /workflows/fetchDocumentActivity
    method: POST
    data_selector: result
    params: {}
- name: searchDocumentsActivity
  endpoint:
    path: /workflows/searchDocumentsActivity
    method: POST
    data_selector: result
    params: {}
- name: updateDocumentActivity
  endpoint:
    path: /workflows/updateDocumentActivity
    method: POST
    data_selector: result
    params: {}
- name: webSearchActivity
  endpoint:
    path: /workflows/webSearchActivity
    method: POST
    data_selector: result
    params: {}
- name: getObjectTypeActivity
  endpoint:
    path: /workflows/getObjectTypeActivity
    method: POST
    data_selector: result
    params: {}
- name: createOrUpdateTypeActivity
  endpoint:
    path: /workflows/createOrUpdateTypeActivity
    method: POST
    data_selector: result
    params: {}
- name: disableTypeActivity
  endpoint:
    path: /workflows/disableTypeActivity
    method: POST
    data_selector: result
    params: {}
- name: createCollectionActivity
  endpoint:
    path: /workflows/createCollectionActivity
    method: POST
    data_selector: result
    params: {}
- name: updateCollectionPropertiesActivity
  endpoint:
    path: /workflows/updateCollectionPropertiesActivity
    method: POST
    data_selector: result
    params: {}
- name: addToCollectionActivity
  endpoint:
    path: /workflows/addToCollectionActivity
    method: POST
    data_selector: result
    params: {}
- name: createContentObjectActivity
  endpoint:
    path: /workflows/createContentObjectActivity
    method: POST
    data_selector: renditions
- name: cleanUpCachedFiles
  endpoint:
    path: /workflows/cleanUpCachedFiles
    method: POST
    data_selector: ''
- name: renderMarkdownDocument
  endpoint:
    path: /workflows/renderMarkdownDocument
    method: POST
    data_selector: ''
- name: splitTextIntoChunks
  endpoint:
    path: /workflows/splitTextIntoChunks
    method: POST
    data_selector: ''
- name: combineSectionsAndSave
  endpoint:
    path: /workflows/combineSectionsAndSave
    method: POST
    data_selector: ''
- name: createCheckpoint
  endpoint:
    path: /workflows/createCheckpoint
    method: POST
    data_selector: ''
- name: resumeConversation
  endpoint:
    path: /workflows/resumeConversation
    method: POST
    data_selector: ''
- name: startConversation
  endpoint:
    path: /workflows/startConversation
    method: POST
    data_selector: ''
- name: generateTools
  endpoint:
    path: /workflows/generateTools
    method: POST
    data_selector: ''
- name: executeRemoteTool
  endpoint:
    path: /workflows/executeRemoteTool
    method: POST
    data_selector: ''
- name: fetchDocumentActivity
  endpoint:
    path: /workflows/fetchDocumentActivity
    method: POST
    data_selector: ''
- name: searchDocumentsActivity
  endpoint:
    path: /workflows/searchDocumentsActivity
    method: POST
    data_selector: ''
- name: updateDocumentActivity
  endpoint:
    path: /workflows/updateDocumentActivity
    method: POST
    data_selector: ''
- name: webSearchActivity
  endpoint:
    path: /workflows/webSearchActivity
    method: POST
    data_selector: ''
- name: getObjectTypeActivity
  endpoint:
    path: /workflows/getObjectTypeActivity
    method: POST
    data_selector: ''
- name: createOrUpdateTypeActivity
  endpoint:
    path: /workflows/createOrUpdateTypeActivity
    method: POST
    data_selector: ''
- name: disableTypeActivity
  endpoint:
    path: /workflows/disableTypeActivity
    method: POST
    data_selector: ''
- name: createCollectionActivity
  endpoint:
    path: /workflows/createCollectionActivity
    method: POST
    data_selector: ''
- name: updateCollectionPropertiesActivity
  endpoint:
    path: /workflows/updateCollectionPropertiesActivity
    method: POST
    data_selector: ''
- name: addToCollectionActivity
  endpoint:
    path: /workflows/addToCollectionActivity
    method: POST
    data_selector: ''
- name: createContentObjectActivity
  endpoint:
    path: /createContentObjectActivity
    method: POST
    data_selector: renditions
- name: createContentObjectActivity
  endpoint:
    path: /createContentObjectActivity
    method: POST
    data_selector: renditions
- name: removeFromCollectionActivity
  endpoint:
    path: /removeFromCollectionActivity
    method: POST
    data_selector: renditions
- name: getCollectionActivity
  endpoint:
    path: /getCollectionActivity
    method: POST
    data_selector: renditions
- name: searchCollectionsActivity
  endpoint:
    path: /searchCollectionsActivity
    method: POST
    data_selector: renditions
- name: updateDocumentPropertiesActivity
  endpoint:
    path: /updateDocumentPropertiesActivity
    method: POST
    data_selector: renditions
- name: executeJavascriptCode
  endpoint:
    path: /executeJavascriptCode
    method: POST
    data_selector: renditions
- name: executePythonCode
  endpoint:
    path: /executePythonCode
    method: POST
    data_selector: renditions
- name: planActivity
  endpoint:
    path: /planActivity
    method: POST
    data_selector: renditions
- name: updatePlanActivity
  endpoint:
    path: /updatePlanActivity
    method: POST
    data_selector: renditions
- name: analyzeSpreadsheet
  endpoint:
    path: /analyzeSpreadsheet
    method: POST
    data_selector: renditions
- name: updateSpreadsheet
  endpoint:
    path: /updateSpreadsheet
    method: POST
    data_selector: renditions
- name: createSpreadsheet
  endpoint:
    path: /createSpreadsheet
    method: POST
    data_selector: renditions
- name: analyzeImageActivity
  endpoint:
    path: /analyzeImageActivity
    method: POST
    data_selector: renditions
- name: mergeDocumentActivity
  endpoint:
    path: /mergeDocumentActivity
    method: POST
    data_selector: renditions
- name: application_manifest
  endpoint:
    path: /apps/overview
    method: GET
    data_selector: applications
    params: {}
- name: application_manifest
  endpoint:
    path: /apps/overview#application-manifest
    method: GET
    data_selector: manifest
    params: {}
- name: app_card_color
  endpoint:
    path: /apps/installation-settings
    method: GET
    data_selector: color
    params: {}
- name: installed_application_settings
  endpoint:
    path: /api/installed_application_settings
    method: GET
    data_selector: settings
    params: {}
- name: api_keys
  endpoint:
    path: /apikeys
    method: GET
    data_selector: records
- name: create_api_key
  endpoint:
    path: /apikeys
    method: POST
    data_selector: results
- name: get_api_key
  endpoint:
    path: /apikeys/<API_KEY_ID>
    method: GET
    data_selector: results
- name: delete_api_key
  endpoint:
    path: /apikeys/<API_KEY_ID>
    method: DELETE
    data_selector: results
- name: update_api_key
  endpoint:
    path: /apikeys/<API_KEY_ID>
    method: PUT
    data_selector: results
- name: list_api_keys
  endpoint:
    path: /api/v1/apikeys
    method: GET
    data_selector: records
- name: create_api_key
  endpoint:
    path: /api/v1/apikeys
    method: POST
    data_selector: records
- name: get_api_key
  endpoint:
    path: /api/v1/apikeys/<API_KEY_ID>
    method: GET
    data_selector: records
- name: get_api_key_token
  endpoint:
    path: /api/v1/apikeys/<API_KEY_ID>/token
    method: GET
    data_selector: records
- name: delete_api_key
  endpoint:
    path: /api/v1/apikeys/<API_KEY_ID>
    method: DELETE
    data_selector: records
- name: update_api_key
  endpoint:
    path: /api/v1/apikeys/<API_KEY_ID>
    method: PUT
    data_selector: records
- name: auth_token
  endpoint:
    path: /auth/token
    method: GET
- name: auth_token
  endpoint:
    path: /auth/token
    method: GET
- name: current_account
  endpoint:
    path: /account
    method: GET
- name: update_current_account
  endpoint:
    path: /account
    method: PUT
- name: get_projects
  endpoint:
    path: /account/projects
    method: GET
- name: check_invites
  endpoint:
    path: /account/invites
    method: GET
- name: invite_user
  endpoint:
    path: /account/invites
    method: POST
- name: accept_invite
  endpoint:
    path: /account/invites/<TOKEN_ID>
    method: PUT
- name: decline_invite
  endpoint:
    path: /account/invites/<TOKEN_ID>
    method: DELETE
- name: get_onboarding_progress
  endpoint:
    path: /account/onboarding
    method: GET
- name: get_account_members
  endpoint:
    path: /account/members
    method: GET
- name: account
  endpoint:
    path: /account
    method: GET
    data_selector: records
- name: account_members
  endpoint:
    path: /account/members
    method: GET
    data_selector: records
- name: account_projects
  endpoint:
    path: /account/projects
    method: GET
    data_selector: data
- name: account_invites
  endpoint:
    path: /account/invites
    method: GET
    data_selector: records
- name: onboarding_progress
  endpoint:
    path: /account/onboarding
    method: GET
    data_selector: records
- name: retrieve_project
  endpoint:
    path: /projects/<PROJECT_ID>
    method: GET
- name: list_projects
  endpoint:
    path: /projects
    method: GET
- name: create_project
  endpoint:
    path: /projects
    method: POST
- name: update_project
  endpoint:
    path: /projects/<PROJECT_ID>
    method: PUT
- name: list_project_integrations
  endpoint:
    path: /projects/<PROJECT_ID>/integrations
    method: GET
- name: retrieve_project_integration_configuration
  endpoint:
    path: /projects/<PROJECT_ID>/integrations/<INTEGRATION_ID>
    method: GET
- name: update_project_integration_configuration
  endpoint:
    path: /projects/<PROJECT_ID>/integrations/<INTEGRATION_ID>
    method: PUT
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: project
  endpoint:
    path: /projects/<PROJECT_ID>
    method: GET
    data_selector: records
    params: {}
- name: create_project
  endpoint:
    path: /projects
    method: POST
    data_selector: records
    params: {}
- name: update_project
  endpoint:
    path: /projects/<PROJECT_ID>
    method: PUT
    data_selector: records
    params: {}
- name: list_project_integrations
  endpoint:
    path: /projects/<PROJECT_ID>/integrations
    method: GET
    data_selector: records
    params: {}
- name: retrieve_project_integration_configuration
  endpoint:
    path: /projects/<PROJECT_ID>/integrations/<INTEGRATION_ID>
    method: GET
    data_selector: records
    params: {}
- name: update_project_integration_configuration
  endpoint:
    path: /projects/<PROJECT_ID>/integrations/<INTEGRATION_ID>
    method: PUT
    data_selector: records
    params: {}
- name: environments
  endpoint:
    path: /environments
    method: GET
    data_selector: records
    params:
      all: 'true'
- name: create_environment
  endpoint:
    path: /environments
    method: POST
    data_selector: records
- name: retrieve_environment
  endpoint:
    path: /environments/<ENVIRONMENT_ID>
    method: GET
    data_selector: records
- name: update_environment
  endpoint:
    path: /environments/<ENVIRONMENT_ID>
    method: PUT
    data_selector: records
- name: delete_environment
  endpoint:
    path: /environments/<ENVIRONMENT_ID>
    method: DELETE
    data_selector: records
- name: get_available_models
  endpoint:
    path: /environments/<ENVIRONMENT_ID>/models
    method: GET
    data_selector: records
- name: generate_embeddings
  endpoint:
    path: /environments/<ENVIRONMENT_ID>/embeddings
    method: POST
    data_selector: records
- name: list_environments
  endpoint:
    path: /environments
    method: GET
    data_selector: records
    params:
      all: 'true'
- name: create_environment
  endpoint:
    path: /environments
    method: POST
    data_selector: records
    params: {}
- name: retrieve_environment
  endpoint:
    path: /environments/<ENVIRONMENT_ID>
    method: GET
    data_selector: records
    params: {}
- name: update_environment
  endpoint:
    path: /environments/<ENVIRONMENT_ID>
    method: PUT
    data_selector: records
    params: {}
- name: delete_environment
  endpoint:
    path: /environments/<ENVIRONMENT_ID>
    method: DELETE
    data_selector: records
    params: {}
- name: get_available_models
  endpoint:
    path: /environments/<ENVIRONMENT_ID>/models
    method: GET
    data_selector: records
    params: {}
- name: generate_embeddings
  endpoint:
    path: /environments/<ENVIRONMENT_ID>/embeddings
    method: POST
    data_selector: records
    params: {}
- name: prompt_template
  endpoint:
    path: /prompts
    method: GET
- name: retrieve_prompt_template
  endpoint:
    path: /prompts/<PT_ID>
    method: GET
- name: create_prompt_template
  endpoint:
    path: /prompts
    method: POST
- name: update_prompt_template
  endpoint:
    path: /prompts/<PT_ID>
    method: PUT
- name: delete_prompt_template
  endpoint:
    path: /prompts/<PT_ID>
    method: DELETE
- name: fork_prompt_template
  endpoint:
    path: /prompts/<PT_ID>/fork
    method: POST
- name: list_prompt_template_versions
  endpoint:
    path: /prompts/<PT_ID>/versions
    method: GET
- name: list_prompt_template_forks
  endpoint:
    path: /prompts/<PT_ID>/forks
    method: GET
- name: prompt_template
  endpoint:
    path: /prompts
    method: GET
    data_selector: records
- name: retrieve_prompt_template
  endpoint:
    path: /prompts/<PT_ID>
    method: GET
    data_selector: records
- name: create_prompt_template
  endpoint:
    path: /prompts
    method: POST
    data_selector: records
- name: update_prompt_template
  endpoint:
    path: /prompts/<PT_ID>
    method: PUT
    data_selector: records
- name: delete_prompt_template
  endpoint:
    path: /prompts/<PT_ID>
    method: DELETE
    data_selector: records
- name: fork_prompt_template
  endpoint:
    path: /prompts/<PT_ID>/fork
    method: POST
    data_selector: records
- name: list_prompt_template_versions
  endpoint:
    path: /prompts/<PT_ID>/versions
    method: GET
    data_selector: records
- name: list_prompt_template_forks
  endpoint:
    path: /prompts/<PT_ID>/forks
    method: GET
    data_selector: records
- name: compute_prompt_template_facets
  endpoint:
    path: /prompts/facets
    method: POST
- name: list_prompt_template_interactions
  endpoint:
    path: /prompts/<PT_ID>/interactions
    method: GET
- name: compute_prompt_template_facets
  endpoint:
    path: /prompts/facets
    method: POST
- name: list_prompt_template_interactions
  endpoint:
    path: /prompts/<PT_ID>/interactions
    method: GET
- name: interactions
  endpoint:
    path: /api/v1/interactions
    method: POST
    data_selector: null
- name: retrieve_interaction
  endpoint:
    path: /api/v1/interactions/<INTERACTION_ID>
    method: GET
    data_selector: null
- name: update_interaction
  endpoint:
    path: /api/v1/interactions/<INTERACTION_ID>
    method: PUT
    data_selector: null
- name: delete_interaction
  endpoint:
    path: /api/v1/interactions/<INTERACTION_ID>
    method: DELETE
    data_selector: null
- name: interactions
  endpoint:
    path: /api/v1/interactions
    method: POST
- name: retrieve_interaction
  endpoint:
    path: /api/v1/interactions/<INTERACTION_ID>
    method: GET
- name: update_interaction
  endpoint:
    path: /api/v1/interactions/<INTERACTION_ID>
    method: PUT
- name: delete_interaction
  endpoint:
    path: /api/v1/interactions/<INTERACTION_ID>
    method: DELETE
- name: execute_interaction_by_id
  endpoint:
    path: /interactions/<INTERACTION_ID>/execute
    method: POST
- name: execute_interaction_by_name
  endpoint:
    path: /execute
    method: POST
- name: execute_interaction_asynchronously
  endpoint:
    path: /execute/async
    method: POST
- name: list_interactions
  endpoint:
    path: /interactions
    method: GET
- name: list_interaction_names
  endpoint:
    path: /interactions/names
    method: GET
- name: publish_interaction_version
  endpoint:
    path: /interactions/<INTERACTION_ID>/publish
    method: POST
- name: list_interaction_versions
  endpoint:
    path: /interactions/<INTERACTION_ID>/versions
    method: GET
- name: fork_interaction
  endpoint:
    path: /interactions/<INTERACTION_ID>/fork
    method: POST
- name: list_interaction_forks
  endpoint:
    path: /interactions/<INTERACTION_ID>/forks
    method: GET
- name: execute_interaction_by_id
  endpoint:
    path: /interactions/<INTERACTION_ID>/execute
    method: POST
- name: execute_interaction_by_name
  endpoint:
    path: /execute
    method: POST
- name: execute_interaction_asynchronously
  endpoint:
    path: /execute/async
    method: POST
- name: list_interactions
  endpoint:
    path: /interactions
    method: GET
- name: list_interaction_names
  endpoint:
    path: /interactions/names
    method: GET
- name: publish_interaction_version
  endpoint:
    path: /interactions/<INTERACTION_ID>/publish
    method: POST
- name: list_interaction_versions
  endpoint:
    path: /interactions/<INTERACTION_ID>/versions
    method: GET
- name: fork_interaction
  endpoint:
    path: /interactions/<INTERACTION_ID>/fork
    method: POST
- name: list_interaction_forks
  endpoint:
    path: /interactions/<INTERACTION_ID>/forks
    method: GET
- name: export_interaction
  endpoint:
    path: /interactions/export
    method: POST
- name: generate_interaction
  endpoint:
    path: /interactions/0/generate-interaction
    method: POST
- name: generate_test_data
  endpoint:
    path: /interactions/<INTERACTION_ID>/generate-test-data
    method: POST
- name: suggest_prompt_improvements
  endpoint:
    path: /interactions/<INTERACTION_ID>/suggest-prompt-improvements
    method: POST
- name: export_interaction
  endpoint:
    path: /interactions/export
    method: POST
- name: generate_interaction
  endpoint:
    path: /interactions/0/generate-interaction
    method: POST
- name: generate_test_data
  endpoint:
    path: /interactions/<INTERACTION_ID>/generate-test-data
    method: POST
- name: suggest_prompt_improvements
  endpoint:
    path: /interactions/<INTERACTION_ID>/suggest-prompt-improvements
    method: POST
- name: runs
  endpoint:
    path: /runs
    method: GET
- name: retrieve_run
  endpoint:
    path: /runs/<RUN_ID>
    method: GET
- name: create_run
  endpoint:
    path: /runs
    method: POST
- name: stream_run
  endpoint:
    path: /runs/<RUN_ID>/stream
    method: GET
- name: compute_run_facets
  endpoint:
    path: /runs/facets
    method: POST
- name: search_runs
  endpoint:
    path: /runs/search
    method: POST
- name: find_runs
  endpoint:
    path: /runs/find
    method: POST
- name: get_run_filter_options
  endpoint:
    path: /runs/filter-options/<FIELD>
    method: GET
- name: run_filter_options
  endpoint:
    path: /api/v1/runs/filter-options/environment
    method: GET
- name: runs
  endpoint:
    path: /runs
    method: GET
    data_selector: records
    params:
      limit: number
      offset: number
      interaction: string
      status: string
      model: string
      environment: string
      tag: string
      parent: string
      finish_reason: string
      created_by: string
- name: retrieve_run
  endpoint:
    path: /runs/<RUN_ID>
    method: GET
    data_selector: record
- name: create_run
  endpoint:
    path: /runs
    method: POST
    data_selector: record
- name: stream_run
  endpoint:
    path: /runs/<RUN_ID>/stream
    method: GET
- name: compute_run_facets
  endpoint:
    path: /runs/facets
    method: POST
- name: search_runs
  endpoint:
    path: /runs/search
    method: POST
- name: find_runs
  endpoint:
    path: /runs/find
    method: POST
- name: get_run_filter_options
  endpoint:
    path: /runs/filter-options/<FIELD>
    method: GET
- name: run_filter_options
  endpoint:
    path: /api/v1/runs/filter-options/environment
    method: GET
- name: training_session
  endpoint:
    path: /training
    method: POST
    data_selector: null
    params: {}
- name: list_training_sessions
  endpoint:
    path: /training
    method: GET
    data_selector: null
    params: {}
- name: retrieve_training_session
  endpoint:
    path: /training/<SESSION_ID>
    method: GET
    data_selector: null
    params: {}
- name: add_runs_to_training_session
  endpoint:
    path: /training/<SESSION_ID>/add
    method: POST
    data_selector: null
    params: {}
- name: list_runs_in_training_session
  endpoint:
    path: /training/<SESSION_ID>/runs
    method: GET
    data_selector: null
    params: {}
- name: build_training_data
  endpoint:
    path: /training/<SESSION_ID>/build
    method: POST
    data_selector: null
    params: {}
- name: get_training_data_url
  endpoint:
    path: /training/<SESSION_ID>/url
    method: GET
    data_selector: null
    params: {}
- name: get_training_data_upload_url
  endpoint:
    path: /training/<SESSION_ID>/upload-url
    method: GET
    data_selector: null
    params: {}
- name: start_training
  endpoint:
    path: /training/<SESSION_ID>/start
    method: POST
    data_selector: null
    params: {}
- name: cancel_training
  endpoint:
    path: /training/<SESSION_ID>/cancel
    method: POST
    data_selector: null
    params: {}
- name: get_training_job
  endpoint:
    path: /training/job/<JOB_ID>
    method: GET
    data_selector: null
    params: {}
- name: set_training_dataset
  endpoint:
    path: /training/<SESSION_ID>/dataset
    method: POST
    data_selector: null
    params: {}
- name: training_dataset
  endpoint:
    path: /api/v1/training/<SESSION_ID>/dataset
    method: POST
    data_selector: null
    params: {}
- name: training
  endpoint:
    path: /training
    method: POST
    data_selector: id
    params: {}
- name: list_training_sessions
  endpoint:
    path: /training
    method: GET
    data_selector: '[]'
    params:
      limit: '10'
      offset: '0'
      status: created
- name: retrieve_training_session
  endpoint:
    path: /training/<SESSION_ID>
    method: GET
    data_selector: id
    params: {}
- name: add_runs_to_training_session
  endpoint:
    path: /training/<SESSION_ID>/add
    method: POST
    data_selector: ok
    params: {}
- name: list_runs_in_training_session
  endpoint:
    path: /training/<SESSION_ID>/runs
    method: GET
    data_selector: '[]'
    params:
      limit: '10'
      offset: '0'
- name: build_training_data
  endpoint:
    path: /training/<SESSION_ID>/build
    method: POST
    data_selector: dataset
    params: {}
- name: get_training_data_url
  endpoint:
    path: /training/<SESSION_ID>/url
    method: GET
    data_selector: url
    params: {}
- name: get_training_data_upload_url
  endpoint:
    path: /training/<SESSION_ID>/upload-url
    method: GET
    data_selector: url
    params:
      resumable: 'true'
- name: start_training
  endpoint:
    path: /training/<SESSION_ID>/start
    method: POST
    data_selector: id
    params: {}
- name: cancel_training
  endpoint:
    path: /training/<SESSION_ID>/cancel
    method: POST
    data_selector: id
    params: {}
- name: get_training_job
  endpoint:
    path: /training/job/<JOB_ID>
    method: GET
    data_selector: id
    params:
      sync: 'true'
- name: set_training_dataset
  endpoint:
    path: /training/<SESSION_ID>/dataset
    method: POST
    data_selector: dataset
    params: {}
- name: training_dataset
  endpoint:
    path: /api/v1/training/<SESSION_ID>/dataset
    method: POST
    data_selector: dataset
    params: {}
- name: upload_url
  endpoint:
    path: /objects/upload-url
    method: POST
    data_selector: url
- name: download_url
  endpoint:
    path: /objects/download-url
    method: POST
    data_selector: url
- name: create_object
  endpoint:
    path: /objects
    method: POST
    data_selector: id
- name: retrieve_object
  endpoint:
    path: /objects/:objectId
    method: GET
    data_selector: id
- name: update_object
  endpoint:
    path: /objects/:objectId
    method: PUT
    data_selector: id
- name: delete_object
  endpoint:
    path: /objects/:objectId
    method: DELETE
    data_selector: id
- name: list_objects
  endpoint:
    path: /objects
    method: GET
    data_selector: id
- name: upload_url
  endpoint:
    path: /objects/upload-url
    method: POST
    data_selector: null
- name: download_url
  endpoint:
    path: /objects/download-url
    method: POST
    data_selector: null
- name: create_object
  endpoint:
    path: /objects
    method: POST
    data_selector: null
- name: retrieve_object
  endpoint:
    path: /objects/:objectId
    method: GET
    data_selector: null
- name: update_object
  endpoint:
    path: /objects/:objectId
    method: PUT
    data_selector: null
- name: delete_object
  endpoint:
    path: /objects/:objectId
    method: DELETE
    data_selector: null
- name: list_objects
  endpoint:
    path: /objects
    method: GET
    data_selector: null
- name: search_objects
  endpoint:
    path: /objects/search
    method: POST
    data_selector: records
- name: find_objects
  endpoint:
    path: /objects/find
    method: POST
    data_selector: records
- name: export_properties
  endpoint:
    path: /objects/export
    method: POST
    data_selector: data
- name: get_text
  endpoint:
    path: /objects/:objectId/text
    method: GET
    data_selector: text
- name: get_content_source
  endpoint:
    path: /objects/:objectId/content-source
    method: GET
    data_selector: source
- name: get_renditions
  endpoint:
    path: /objects/:objectId/renditions
    method: GET
    data_selector: records
- name: get_revisions
  endpoint:
    path: /objects/:objectId/revisions
    method: GET
    data_selector: records
- name: create_revision
  endpoint:
    path: /objects/:objectId
    method: PUT
- name: compare_revisions
  endpoint:
    path: /objects/:objectId/compare/:targetId
    method: GET
- name: content_types
  endpoint:
    path: /types
    method: GET
    data_selector: records
- name: search_objects
  endpoint:
    path: /objects/search
    method: POST
    data_selector: results
- name: find_objects
  endpoint:
    path: /objects/find
    method: POST
    data_selector: results
- name: export_properties
  endpoint:
    path: /objects/export
    method: POST
    data_selector: data
- name: get_object_text
  endpoint:
    path: /objects/:objectId/text
    method: GET
    data_selector: text
- name: get_content_source
  endpoint:
    path: /objects/:objectId/content-source
    method: GET
    data_selector: source
- name: get_renditions
  endpoint:
    path: /objects/:objectId/renditions
    method: GET
    data_selector: renditions
- name: get_revisions
  endpoint:
    path: /objects/:objectId/revisions
    method: GET
    data_selector: revisions
- name: create_revision
  endpoint:
    path: /objects/:objectId
    method: PUT
    data_selector: id
- name: compare_revisions
  endpoint:
    path: /objects/:objectId/compare/:targetId
    method: GET
    data_selector: properties
- name: content_types
  endpoint:
    path: /types
    method: GET
    data_selector: records
- name: analyze
  endpoint:
    path: /objects/:objectId/analyze
    method: POST
    data_selector: workflow_id
    params: {}
- name: get_status
  endpoint:
    path: /objects/:objectId/analyze/status
    method: GET
    data_selector: workflow_id
    params: {}
- name: get_results
  endpoint:
    path: /objects/:objectId/analyze/results
    method: GET
    data_selector: document
    params: {}
- name: get_xml_text
  endpoint:
    path: /objects/:objectId/analyze/xml
    method: GET
    data_selector: document
    params: {}
- name: get_images
  endpoint:
    path: /objects/:objectId/analyze/images
    method: GET
    data_selector: id
    params: {}
- name: get_annotated
  endpoint:
    path: /objects/:objectId/analyze/annotated
    method: GET
    data_selector: url
    params: {}
- name: adapt_tables
  endpoint:
    path: /objects/:objectId/analyze/adapt_tables
    method: POST
    data_selector: workflow_id
    params: {}
- name: get_adapted_tables
  endpoint:
    path: /objects/:objectId/analyze/adapt_tables/:runId
    method: GET
    data_selector: description
    params:
      format: json
- name: analyze
  endpoint:
    path: /objects/:objectId/analyze
    method: POST
    data_selector: workflow_id
    params: {}
- name: get_status
  endpoint:
    path: /objects/:objectId/analyze/status
    method: GET
    data_selector: workflow_id
    params: {}
- name: get_results
  endpoint:
    path: /objects/:objectId/analyze/results
    method: GET
    data_selector: document
    params: {}
- name: get_xml_text
  endpoint:
    path: /objects/:objectId/analyze/xml
    method: GET
    data_selector: document
    params: {}
- name: get_images
  endpoint:
    path: /objects/:objectId/analyze/images
    method: GET
    data_selector: images
    params: {}
- name: get_annotated
  endpoint:
    path: /objects/:objectId/analyze/annotated
    method: GET
    data_selector: url
    params: {}
- name: adapt_tables
  endpoint:
    path: /objects/:objectId/analyze/adapt_tables
    method: POST
    data_selector: workflow_id
    params: {}
- name: get_adapted_tables
  endpoint:
    path: /objects/:objectId/analyze/adapt_tables/:runId
    method: GET
    data_selector: tables
    params:
      format: json
- name: execute_workflow
  endpoint:
    path: /workflows/execute/<WORKFLOW_NAME>
    method: POST
    data_selector: runId
    params: {}
- name: execute_workflow
  endpoint:
    path: /workflows/execute/<WORKFLOW_NAME>
    method: POST
- name: workflow_definitions
  endpoint:
    path: /api/v1/workflows/definitions
    method: GET
    data_selector: records
- name: workflow_definitions
  endpoint:
    path: /api/v1/workflows/definitions
    method: GET
    data_selector: ''
- name: create_workflow_definition
  endpoint:
    path: /api/v1/workflows/definitions
    method: POST
    data_selector: ''
- name: retrieve_workflow_definition
  endpoint:
    path: /api/v1/workflows/definitions/<WORKFLOW_DEFINITION_ID>
    method: GET
    data_selector: ''
- name: update_workflow_definition
  endpoint:
    path: /api/v1/workflows/definitions/<WORKFLOW_DEFINITION_ID>
    method: PUT
    data_selector: ''
- name: delete_workflow_definition
  endpoint:
    path: /api/v1/workflows/definitions/<WORKFLOW_DEFINITION_ID>
    method: DELETE
    data_selector: ''
- name: workflow_rule
  endpoint:
    path: /workflows/rules
    method: POST
    data_selector: null
    params: {}
- name: retrieve_workflow_rule
  endpoint:
    path: /workflows/rules/<RULE_ID>
    method: GET
    data_selector: null
    params: {}
- name: update_workflow_rule
  endpoint:
    path: /workflows/rules/<RULE_ID>
    method: PUT
    data_selector: null
    params: {}
- name: delete_workflow_rule
  endpoint:
    path: /workflows/rules/<RULE_ID>
    method: DELETE
    data_selector: null
    params: {}
- name: list_workflow_rules
  endpoint:
    path: /workflows/rules
    method: GET
    data_selector: null
    params: {}
- name: execute_workflow_rule
  endpoint:
    path: /workflows/rules/<RULE_ID>/execute
    method: POST
    data_selector: null
    params: {}
- name: workflow_rule
  endpoint:
    path: /workflows/rules
    method: POST
    data_selector: ''
    params: {}
- name: retrieve_workflow_rule
  endpoint:
    path: /workflows/rules/<RULE_ID>
    method: GET
    data_selector: ''
    params: {}
- name: update_workflow_rule
  endpoint:
    path: /workflows/rules/<RULE_ID>
    method: PUT
    data_selector: ''
    params: {}
- name: delete_workflow_rule
  endpoint:
    path: /workflows/rules/<RULE_ID>
    method: DELETE
    data_selector: ''
    params: {}
- name: list_workflow_rules
  endpoint:
    path: /workflows/rules
    method: GET
    data_selector: ''
    params: {}
- name: execute_workflow_rule
  endpoint:
    path: /workflows/rules/<RULE_ID>/execute
    method: POST
    data_selector: ''
    params: {}
- name: list_workflow_runs
  endpoint:
    path: /api/v1/workflows/runs
    method: POST
- name: get_run_details
  endpoint:
    path: /api/v1/workflows/runs/<WORKFLOW_ID>/<RUN_ID>
    method: GET
- name: terminate_workflow_run
  endpoint:
    path: /api/v1/workflows/runs/<WORKFLOW_ID>/<RUN_ID>/terminate
    method: POST
- name: cancel_workflow_run
  endpoint:
    path: /api/v1/workflows/runs/<WORKFLOW_ID>/<RUN_ID>/cancel
    method: POST
- name: list_workflow_runs
  endpoint:
    path: /api/v1/workflows/runs
    method: POST
    data_selector: runs
    params: {}
- name: get_run_details
  endpoint:
    path: /api/v1/workflows/runs/<WORKFLOW_ID>/<RUN_ID>
    method: GET
    data_selector: ''
    params: {}
- name: terminate_workflow_run
  endpoint:
    path: /api/v1/workflows/runs/<WORKFLOW_ID>/<RUN_ID>/terminate
    method: POST
    data_selector: ''
    params: {}
- name: cancel_workflow_run
  endpoint:
    path: /api/v1/workflows/runs/<WORKFLOW_ID>/<RUN_ID>/cancel
    method: POST
    data_selector: ''
    params: {}
- name: resolve_references
  endpoint:
    path: /refs/resolve
    method: POST
    data_selector: ids
    params: {}
- name: resolve_references
  endpoint:
    path: /api/v1/refs/resolve
    method: POST
    data_selector: refs
- name: embeddings_status
  endpoint:
    path: /api/v1/commands/embeddings/text/status
    method: GET
- name: activate_embeddings
  endpoint:
    path: /api/v1/commands/embeddings/text/enable
    method: POST
- name: deactivate_embeddings
  endpoint:
    path: /api/v1/commands/embeddings/text/disable
    method: POST
- name: recalculate_embeddings
  endpoint:
    path: /api/v1/commands/embeddings/text/recalculate
    method: POST
- name: initialize_samples
  endpoint:
    path: /api/v1/commands/onboarding/init-samples
    method: POST
- name: namespace_availability
  endpoint:
    path: /api/v1/commands/namespaces/my-namespace/is_available
    method: GET
- name: embeddings_status
  endpoint:
    path: /api/v1/commands/embeddings/text/status
    method: GET
- name: activate_embeddings
  endpoint:
    path: /api/v1/commands/embeddings/text/enable
    method: POST
- name: deactivate_embeddings
  endpoint:
    path: /api/v1/commands/embeddings/text/disable
    method: POST
- name: recalculate_embeddings
  endpoint:
    path: /api/v1/commands/embeddings/text/recalculate
    method: POST
- name: initialize_samples
  endpoint:
    path: /api/v1/commands/onboarding/init-samples
    method: POST
- name: check_namespace_availability
  endpoint:
    path: /api/v1/commands/namespaces/my-namespace/is_available
    method: GET
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
- name: interactions
  endpoint:
    path: /api/interactions
    method: GET
    data_selector: interactions
- name: memory_pack
  endpoint:
    path: /memory-packs
    method: POST
    data_selector: data
- name: interaction
  endpoint:
    path: /interactions
    method: POST
    data_selector: data
- name: memory_pack
  endpoint:
    path: /memory
    method: POST
    data_selector: memory_pack
    params: {}
- name: generate_release_notes
  endpoint:
    path: /generate
    method: POST
    data_selector: release_notes
    params: {}
notes:
- Built with SOC2 Type II compliance, flexible data residency options, bias mitigation
  tools, and end-to-end auditability.
- Both API key and project ID parameters are required when accessing objects in a
  project.
- Vertesia uses Workload Identity Federation to access GCP services and act as an
  OIDC Identity Provider for GCP.
- Vertesia uses Workload Identity Federation to access AWS services and act as an
  OIDC Identity Provider for AWS.
- Agents are designed to accept an Interaction as input.
- Agents in Vertesia are designed to accept an Interaction as input.
- Ensure that the interaction becomes discoverable and available within the Agent
  Runner.
- This activity requires an API key for serper. Go to Setting in Studio to configure
  your API key.
- Your tool server must validate the Vertesia-signed JWT using Vertesia's public key.
- Supports PDF format only
- PDF documents are first transformed to structured markdown (or XML if specified)
- Your tool server must validate the Vertesia-signed JWT using the public key available
  via a JWKS endpoint.
- Vertesia Semantic DocPrep transforms documents into structured markdown or XML files.
- Enables or disables Semantic DocPrep processing (defaults to false)
- 'Output format: markdown, xml (defaults to markdown)'
- Uses JSON-based workflow DSL for defining workflows.
- Applications can be private or public.
- Private applications are only installable in the same organization.
- Applications can be private or public. Private applications can only be installed
  in projects of the same organization.
- Currently, this is limited to customizing the color of the UI card within the Vertesia
  App Portal.
- Uses OAuth2 with Bearer token for authentication
- Uses Bearer token for authentication.
- Authorization requires a Bearer token.
- Uses OAuth2 — requires setup of an authentication token
- Authorization header must contain a Bearer token.
- Requires setup of JWT token for authentication.
- Uses OAuth2 with Bearer token for authorization.
- Currently, only PDF files are supported for analysis.
- The workflow ID can be made unique by adding a random token.
- Uses JWT token for authorization
- Workflows are defined using a DSL based on JSON.
- The input type can be single, multiple, or none.
- Requires using a TTY terminal, and Node.js version 18 or higher.
- Requires installation of vertesia CLI to execute commands.
- API key must be kept secret and should not be exposed publicly.
- API key should be stored securely and used in a private location.
errors:
- Non-2xx HTTP status code and a JSON body describing the error.
- '401 Unauthorized: Recheck API key or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth token'
- '401 Unauthorized: Recheck your JWT token.'
- 'Unauthorized: Recheck your JWT token'
- 'Not Found: Verify the ENVIRONMENT_ID'
- 'Bad Request: Check your input parameters'
- '401 Unauthorized: Recheck OAuth token.'
- '404 Not Found: Interaction ID does not exist.'
- '400 Bad Request: Invalid JSON body or parameters.'
- '401 Unauthorized: Recheck JWT token.'
- '401 Unauthorized: Recheck OAuth token or permissions.'
- '400 Bad Request: Check required parameters.'
- '401 Unauthorized: Invalid or missing authorization token.'
- '401 Unauthorized: Recheck the authorization token.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '429 Rate limit reached for gpt-4 in organization on tokens per min. Limit: 10000
  / min. Please try again in 6ms.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.vertesia.io
  auth:
    type: apikey
    location: header
    header_name: apikey
source_metadata: null
