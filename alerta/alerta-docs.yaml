resources:
- name: alert
  endpoint:
    path: /alert
    method: POST
    data_selector: alert
    params: {}
- name: retrieve_alert
  endpoint:
    path: /alert/:id
    method: GET
    data_selector: alert
    params: {}
- name: set_alert_status
  endpoint:
    path: /alert/:id/status
    method: PUT
    data_selector: status
    params: {}
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: alerts
- name: alert_history
  endpoint:
    path: /alerts/history
    method: GET
    data_selector: history
- name: alert_count
  endpoint:
    path: /alerts/count
    method: GET
    data_selector: severityCounts
- name: environments
  endpoint:
    path: /environments
    method: GET
    data_selector: environments
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: services
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
- name: blackout
  endpoint:
    path: /blackout
    method: POST
    data_selector: blackout
- name: blackouts
  endpoint:
    path: /blackouts
    method: GET
    data_selector: blackouts
- name: heartbeat
  endpoint:
    path: /heartbeat
    method: POST
    data_selector: heartbeat
- name: heartbeats
  endpoint:
    path: /heartbeats
    method: GET
    data_selector: heartbeats
- name: key
  endpoint:
    path: /key
    method: POST
    data_selector: data
- name: keys
  endpoint:
    path: /keys
    method: GET
    data_selector: keys
- name: user
  endpoint:
    path: /auth/signup
    method: POST
    data_selector: token
- name: update_user
  endpoint:
    path: /user/:user
    method: PUT
- name: user
  endpoint:
    path: /user/me
    method: PUT
    data_selector: ''
    params: {}
- name: user_attributes
  endpoint:
    path: /user/:id/attributes
    method: PUT
    data_selector: ''
    params: {}
- name: list_all_users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: delete_user
  endpoint:
    path: /user/:user
    method: DELETE
    data_selector: ''
    params: {}
- name: create_permission
  endpoint:
    path: /perm
    method: POST
    data_selector: ''
    params: {}
- name: list_all_permissions
  endpoint:
    path: /perms
    method: GET
    data_selector: permissions
    params: {}
- name: delete_permission
  endpoint:
    path: /perm/:perm
    method: DELETE
    data_selector: ''
    params: {}
- name: create_customer
  endpoint:
    path: /customer
    method: POST
    data_selector: ''
    params: {}
- name: list_all_customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
    params: {}
- name: delete_customer
  endpoint:
    path: /customer/:customer
    method: DELETE
    data_selector: ''
    params: {}
- name: get_manifest
  endpoint:
    path: /management/manifest
    method: GET
    data_selector: ''
    params: {}
- name: get_properties
  endpoint:
    path: /management/properties
    method: GET
    data_selector: ''
    params: {}
- name: good_to_go_healthcheck
  endpoint:
    path: /management/gtg
    method: GET
    data_selector: ''
    params: {}
- name: light_healthcheck
  endpoint:
    path: /_
    method: GET
    data_selector: ''
    params: {}
- name: deep_healthcheck
  endpoint:
    path: /management/healthcheck
    method: GET
    data_selector: ''
    params: {}
- name: json_metrics
  endpoint:
    path: /management/status
    method: GET
    data_selector: ''
    params: {}
- name: prometheus_metrics
  endpoint:
    path: /management/metrics
    method: GET
    data_selector: ''
    params: {}
- name: alerts
  endpoint:
    path: /api/alerts
    method: GET
    data_selector: alerts
- name: heartbeat
  endpoint:
    path: /heartbeat
    method: POST
- name: heartbeats
  endpoint:
    path: /heartbeats
    method: GET
- name: key
  endpoint:
    path: /key
    method: POST
- name: keys
  endpoint:
    path: /keys
    method: GET
- name: user
  endpoint:
    path: /user
    method: PUT
- name: users
  endpoint:
    path: /users
    method: GET
- name: customer
  endpoint:
    path: /customer
    method: POST
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: cloudwatch
  endpoint:
    path: /api/webhooks/cloudwatch
    method: POST
- name: grafana
  endpoint:
    path: /api/webhooks/grafana
    method: POST
- name: new_relic
  endpoint:
    path: /api/webhooks/newrelic
    method: POST
- name: pagerduty
  endpoint:
    path: /api/webhooks/pagerduty
    method: POST
- name: pingdom
  endpoint:
    path: /api/webhooks/pingdom
    method: POST
- name: serverdensity
  endpoint:
    path: /api/webhooks/serverdensity
    method: POST
- name: stackdriver
  endpoint:
    path: /api/webhooks/stackdriver
    method: POST
- name: telegram
  endpoint:
    path: /api/webhooks/telegram
    method: POST
- name: forwarder
  endpoint:
    path: /alert
    method: POST
    data_selector: alerts
    params: {}
- name: alerts
  endpoint:
    path: /get-alerts
    method: GET
- name: environments
  endpoint:
    path: /environments
    method: GET
- name: services
  endpoint:
    path: /services
    method: GET
- name: blackouts
  endpoint:
    path: /get-blackouts
    method: GET
- name: heartbeats
  endpoint:
    path: /get-heartbeats
    method: GET
- name: users
  endpoint:
    path: /get-users
    method: GET
- name: customers
  endpoint:
    path: /get-customers
    method: GET
- name: heartbeat
  endpoint:
    path: /heartbeat
    method: GET
    data_selector: heartbeats
    params: {}
- name: alert
  endpoint:
    path: /alert
    method: POST
- name: retrieve_alert
  endpoint:
    path: /alert/:id
    method: GET
- name: set_alert_status
  endpoint:
    path: /alert/:id/status
    method: PUT
- name: action_alert
  endpoint:
    path: /alert/:id/action
    method: PUT
- name: tag_alert
  endpoint:
    path: /alert/:id/tag
    method: PUT
- name: update_alert_attributes
  endpoint:
    path: /alert/:id/attributes
    method: PUT
- name: add_alert_note
  endpoint:
    path: /alert/:id/note
    method: PUT
- name: delete_alert
  endpoint:
    path: /alert/:id
    method: DELETE
- name: search_alerts
  endpoint:
    path: /alerts
    method: GET
- name: list_alert_history
  endpoint:
    path: /alerts/history
    method: GET
- name: keys
  endpoint:
    path: /keys
    method: GET
    data_selector: keys
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: permissions
  endpoint:
    path: /perms
    method: GET
    data_selector: permissions
    params: {}
- name: management_manifest
  endpoint:
    path: /management/manifest
    method: GET
    data_selector: build
    params: {}
- name: alert_count
  endpoint:
    path: /alerts/count
    method: GET
    data_selector: severityCounts
    params:
      environment: Production
- name: top_alerts
  endpoint:
    path: /alerts/top10/count
    method: GET
    data_selector: top10
- name: environments
  endpoint:
    path: /environments
    method: GET
    data_selector: environments
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: services
    params:
      environment: Production
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
    params:
      environment: Production
- name: blackouts
  endpoint:
    path: /blackouts
    method: GET
    data_selector: blackouts
- name: heartbeats
  endpoint:
    path: /heartbeats
    method: GET
    data_selector: heartbeats
- name: metrics
  endpoint:
    path: /management/metrics
    method: GET
    data_selector: metrics
    params: {}
notes:
- All datetime parameters must be in ISO 8601 format in UTC time.
- Access to the API can be restricted using API keys and to the web console using
  Basic Auth or OAuth2 providers Google, GitHub and GitLab.
- If the Alerta API enforces authentication, then the alerta command-line tool can
  be configured to present an API key or login to the API before accessing secured
  endpoints.
- Uses OAuth2
- Alert on stale or slow heartbeats using the --alert option
- FIXME
- Environment variables are read after configuration files so they will always override
  any other setting.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- To enforce authentication set AUTH_REQUIRED to True and set the SECRET_KEY to some
  random string in the alertad.conf server configuration settings file.
- All access is through roles. Permissions can not be assigned directly to users.
- When deploying with Apache mod_wsgi, set WSGIPassAuthorization On to avoid missing
  authorization errors.
- Serving the Alerta web UI from a static web hosting site will not work unless that
  domain is listed in the CORS_ORIGINS Alerta API server configuration settings.
- If authentication is enforced, then an API key is needed to access the alerta API
  programatically and use the webhooks.
- Authentication must be enforced and customer views enabled
- Forwarding heartbeats is not currently possible but may be supported in a future
  release.
- Supports any OpenID Connect compliant auth provider
- Only `origin` is mandatory.
- This API requires an API key for authentication.
- Uses API key for authentication
errors:
- '401 Unauthorized: Check OAuth token'
- '403 Forbidden: Check permissions'
- '404 Not Found: Check the endpoint'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403 Forbidden: The request will be rejected if the sender is not a member of a
  role with write:alerts permissions.'
- '401 Unauthorized: Recheck API key validity'
- '401 Unauthorized: Recheck API key'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - OAUTH2_CLIENT_ID
  - OAUTH2_CLIENT_SECRET
  - KEYCLOAK_URL
  - KEYCLOAK_REALM
  - ALLOWED_EMAIL_DOMAINS
  - ALLOWED_KEYCLOAK_ROLES
  - TOKEN_EXPIRE_DAYS
  - API_KEY_EXPIRE_DAYS
  - HMAC_AUTH_CREDENTIALS
  - NamedCredential
  - ADMIN_USERS
  - USER_DEFAULT_SCOPES
client:
  base_url: http://localhost:8080
  auth:
    type: apikey
    location: header
    header_name: Authorization
  headers:
    Content-type: application/json
source_metadata: null
