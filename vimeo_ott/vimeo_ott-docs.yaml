resources:
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: _embedded.products
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: _embedded.customers
- name: watching_items
  endpoint:
    path: /customers/:id/watching
    method: GET
    data_selector: _embedded.items
- name: watchlist_items
  endpoint:
    path: /customers/:id/watchlist
    method: GET
    data_selector: _embedded.items
    params:
      per_page: 50
      page: 1
- name: add_item_to_watchlist
  endpoint:
    path: /customers/:id/watchlist
    method: PUT
    data_selector: response
    params: {}
- name: remove_item_from_watchlist
  endpoint:
    path: /customers/:id/watchlist
    method: DELETE
    data_selector: response
    params: {}
- name: create_video
  endpoint:
    path: /videos
    method: POST
    data_selector: response
    params: {}
- name: retrieve_video
  endpoint:
    path: /videos/:id
    method: GET
    data_selector: response
    params: {}
- name: list_all_videos
  endpoint:
    path: /videos
    method: GET
    data_selector: _embedded.videos
    params:
      per_page: 50
      page: 1
- name: list_all_files
  endpoint:
    path: /videos/:id/files
    method: GET
    data_selector: response
    params: {}
- name: videos
  endpoint:
    path: /videos/:id
    method: PUT
    data_selector: video
    params: {}
- name: live_events
  endpoint:
    path: /live_events/:id
    method: GET
    data_selector: live_event
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: POST
    data_selector: comment
    params: {}
- name: report_comment
  endpoint:
    path: /comments/:id/report
    method: POST
    data_selector: message
- name: create_collection
  endpoint:
    path: /collections
    method: POST
    data_selector: id
    params: {}
- name: retrieve_collection
  endpoint:
    path: /collections/:id
    method: GET
    data_selector: id
    params: {}
- name: list_collections
  endpoint:
    path: /collections
    method: GET
    data_selector: count
    params: {}
- name: update_collection
  endpoint:
    path: /collections/:id
    method: PUT
    data_selector: id
    params: {}
- name: update_collection_position
  endpoint:
    path: /collections/:id/update_position
    method: PUT
    data_selector: ''
    params: {}
- name: list_items
  endpoint:
    path: /collections/:id/items
    method: GET
    data_selector: count
    params: {}
- name: add_item
  endpoint:
    path: /collections/:id/items
    method: PUT
    data_selector: ''
    params: {}
- name: update_item_position
  endpoint:
    path: /collections/:collection_id/items/:item_id
    method: PUT
    data_selector: position
- name: delete_item
  endpoint:
    path: /collections/:id/items
    method: DELETE
- name: list_browse_items
  endpoint:
    path: /browse
    method: GET
- name: create_authorization
  endpoint:
    path: /authorizations
    method: POST
- name: retrieve_report
  endpoint:
    path: /analytics
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: POST
- name: authorizations
  endpoint:
    path: /authorizations
    method: POST
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: null
    params: {}
- name: authorizations
  endpoint:
    path: /authorizations
    method: POST
    data_selector: null
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: _embedded.products
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: _embedded.customers
- name: watchlist_items
  endpoint:
    path: /customers/:id/watchlist
    method: GET
    data_selector: _embedded.items
    params:
      customer: string
      page: integer
      per_page: integer
      show_all: string
      source_id: integer
- name: add_item_to_watchlist
  endpoint:
    path: /customers/:id/watchlist
    method: PUT
    data_selector: ''
    params:
      customer: string
      video: string
- name: remove_item_from_watchlist
  endpoint:
    path: /customers/:id/watchlist
    method: DELETE
    data_selector: ''
    params:
      customer: string
      video: string
- name: create_video
  endpoint:
    path: /videos
    method: POST
    data_selector: ''
    params:
      title: string
      source_url: string
      description: string
      plans: array
      time_available: string
      time_unavailable: string
- name: retrieve_video
  endpoint:
    path: /videos/:id
    method: GET
    data_selector: ''
    params:
      href: string
- name: list_all_videos
  endpoint:
    path: /videos
    method: GET
    data_selector: _embedded.videos
    params:
      query: string
      plan: string
      page: integer
      per_page: integer
- name: list_all_files
  endpoint:
    path: /videos/:id/files
    method: GET
    data_selector: ''
    params:
      quality: string
      format: string
- name: videos
  endpoint:
    path: /videos/:id
    method: PUT
    data_selector: video
    params: {}
- name: live_events
  endpoint:
    path: /live_events/:id
    method: GET
    data_selector: live_event
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: POST
    data_selector: comment
    params: {}
- name: report_comment
  endpoint:
    path: /comments/:id/report
    method: POST
    data_selector: message
    params: {}
- name: create_collection
  endpoint:
    path: /collections
    method: POST
    data_selector: id
    params: {}
- name: retrieve_collection
  endpoint:
    path: /collections/:id
    method: GET
    data_selector: name
    params: {}
- name: list_all_collections
  endpoint:
    path: /collections
    method: GET
    data_selector: count
    params: {}
- name: update_collection
  endpoint:
    path: /collections/:id
    method: PUT
    data_selector: id
    params: {}
- name: update_collection_position
  endpoint:
    path: /collections/:id/update_position
    method: PUT
    data_selector: ''
    params: {}
- name: list_all_items
  endpoint:
    path: /collections/:id/items
    method: GET
    data_selector: count
    params: {}
- name: add_item
  endpoint:
    path: /collections/:id/items
    method: PUT
    data_selector: ''
    params: {}
- name: update_position_item
  endpoint:
    path: /collections/:collection_id/items/:item_id
    method: PUT
    data_selector: null
    params: {}
- name: delete_item
  endpoint:
    path: /collections/:id/items
    method: DELETE
    data_selector: null
    params: {}
- name: list_browse_items
  endpoint:
    path: /browse
    method: GET
    data_selector: _embedded.items
    params:
      product: https://api.vhx.tv/products/1
- name: create_authorization
  endpoint:
    path: /authorizations
    method: POST
    data_selector: null
    params:
      customer: https://api.vhx.tv/customers/1
      video: https://api.vhx.tv/videos/1
- name: retrieve_report
  endpoint:
    path: /analytics
    method: GET
    data_selector: data
    params:
      type: traffic
      from: 1-month-ago
      to: today
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
    params: {}
- name: authorizations
  endpoint:
    path: /authorizations
    method: POST
    data_selector: authorization
    params: {}
notes:
- No fields are required when updating a video.
- To enable the API, add api=1 to the URL of the iframe
- All events and methods can be called on the returned player object
- API access is over HTTPS and all data is sent and received as JSON.
- Videos can be listed and support pagination.
- Files are private and protected by default.
- This endpoint sends a request to delete a video. This process happens asynchronously
  in our system.
- It is assumed your application will handle any necessary pay wall.
- You can leverage the API to build your own custom web experience.
errors:
- '401 Unauthorized: Invalid authentication'
- '429 Too Many Requests: rate limit violation'
- 400 Bad Request (Client error)
- 401 Unauthorized (Invalid authentication)
- 429 Too Many Requests (rate limit violation)
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.vhx.tv
  auth:
    type: apikey
  headers:
    VHX-Customer: ''
    VHX-Client-IP: ''
source_metadata: null
