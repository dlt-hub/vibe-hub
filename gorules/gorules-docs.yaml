resources:
- name: releases
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
    data_selector: records
- name: evaluate_decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
    data_selector: result
- name: evaluate_decision
  endpoint:
    path: /api/projects/{projectId}/evaluate/{documentPath}
    method: POST
    data_selector: result
    params: {}
- name: evaluate_decision
  endpoint:
    path: /api/projects/{projectId}/evaluate/{documentPath}
    method: POST
    data_selector: result
    params: {}
- name: shipping_fees
  endpoint:
    path: /api/v1/shipping_fees
    method: POST
    data_selector: result.fees
    params: {}
- name: shipping_fees
  endpoint:
    path: /api/projects/evaluate
    method: POST
    data_selector: result.fees
    params: {}
- name: evaluation
  endpoint:
    path: /reference/post_api-projects-projectid-evaluate-documentpath
    method: POST
    data_selector: result
- name: company_analysis
  endpoint:
    path: /api/projects/projectid/evaluate/documentpath
    method: POST
    data_selector: result
- name: loops
  endpoint:
    path: /loops
    method: GET
    data_selector: results
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: groups
  endpoint:
    path: /settings/groups
    method: GET
    data_selector: groups
    params: {}
- name: members
  endpoint:
    path: /settings/members
    method: GET
    data_selector: members
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
- name: members
  endpoint:
    path: /members
    method: GET
- name: audit_log
  endpoint:
    path: /audit-log
    method: GET
    data_selector: audit_logs
- name: organisation_settings
  endpoint:
    path: /organisation/settings
    method: GET
    data_selector: settings
    params: {}
- name: Decision Model Change Requests
  endpoint:
    path: /decisions/change-requests
    method: POST
    data_selector: requests
- name: Release Deployment Change Requests
  endpoint:
    path: /releases/change-requests
    method: POST
    data_selector: requests
- name: audit_log
  endpoint:
    path: /audit-log
    method: GET
    data_selector: logs
    params: {}
- name: release
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
    data_selector: records
- name: evaluation
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
    data_selector: results
- name: release
  endpoint:
    path: /api/projects/projectid/releases
    method: GET
    data_selector: records
- name: evaluate_decision
  endpoint:
    path: /api/projects/projectid/evaluate/documentpath
    method: POST
    data_selector: records
- name: releases
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
- name: evaluate_decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
- name: releases
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
    data_selector: records
- name: evaluate_decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
    data_selector: results
- name: releases
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
    data_selector: records
    params: {}
- name: evaluate_decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
    data_selector: records
    params: {}
- name: release
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
    data_selector: records
    params: {}
- name: evaluate_decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
    data_selector: result
    params: {}
- name: releases
  endpoint:
    path: /api/projects/{projectId}/releases
    method: GET
    data_selector: records
- name: evaluate
  endpoint:
    path: /api/projects/{projectId}/evaluate
    method: POST
    data_selector: results
- name: health
  endpoint:
    path: /api/health
    method: GET
- name: releases
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
    data_selector: records
- name: evaluate_decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
    data_selector: records
- name: Release
  endpoint:
    path: /reference/post_api-projects-projectid-releases
    method: POST
    data_selector: release
    params: {}
- name: Download Release
  endpoint:
    path: /reference/get_api-projects-projectid-releases-releaseid-download
    method: GET
    data_selector: download
    params: {}
- name: Upload Release
  endpoint:
    path: /reference/post_api-projects-projectid-releases-multipart
    method: POST
    data_selector: upload
    params: {}
- name: Apply Release
  endpoint:
    path: /reference/post_api-projects-projectid-releases-apply
    method: POST
    data_selector: apply
    params: {}
- name: List Releases
  endpoint:
    path: /reference/get_api-projects-projectid-releases
    method: GET
    data_selector: releases
    params: {}
- name: create_release
  endpoint:
    path: /reference/post_api-projects-projectid-releases
    method: POST
- name: download_release
  endpoint:
    path: /reference/get_api-projects-projectid-releases-releaseid-download
    method: GET
- name: upload_release
  endpoint:
    path: /reference/post_api-projects-projectid-releases-multipart
    method: POST
- name: apply_release
  endpoint:
    path: /reference/post_api-projects-projectid-releases-apply
    method: POST
- name: Release
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
    data_selector: records
- name: Evaluate Decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
    data_selector: results
- name: evaluate_environment_decision
  endpoint:
    path: /api/projects/{projectId}/environments/{environmentKey}/evaluate/{documentPath}
    method: POST
    data_selector: ''
- name: releases
  endpoint:
    path: /api/projects/projectid/releases
    method: GET
    data_selector: records
- name: evaluate_decision
  endpoint:
    path: /api/projects/projectid/evaluate/documentpath
    method: POST
    data_selector: result
- name: evaluate_environment_decision
  endpoint:
    path: /api/projects/{projectId}/environments/{environmentKey}/evaluate/{documentPath}
    method: POST
- name: Releases
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
    data_selector: records
    params: {}
- name: Evaluate Decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
    data_selector: records
    params: {}
- name: Releases
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
    data_selector: records
    params: {}
- name: Evaluate Decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
    data_selector: records
    params: {}
- name: Create release
  endpoint:
    path: /api/projects/{projectid}/releases
    method: POST
    data_selector: records
    params: {}
- name: Download Release
  endpoint:
    path: /api/projects/{projectid}/releases/{releaseid}/download
    method: GET
    data_selector: records
    params: {}
- name: Upload release
  endpoint:
    path: /api/projects/{projectid}/releases/multipart
    method: POST
    data_selector: records
    params: {}
- name: Apply release
  endpoint:
    path: /api/projects/{projectid}/releases/apply
    method: POST
    data_selector: records
    params: {}
- name: releases
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
- name: evaluate_decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
- name: releases
  endpoint:
    path: /api/projects/projectid/releases
    method: GET
    data_selector: records
    params: {}
- name: evaluate_decision
  endpoint:
    path: /api/projects/projectid/evaluate/documentpath
    method: POST
    data_selector: result
    params: {}
- name: release
  endpoint:
    path: /api/projects/projectid/releases
    method: GET
    data_selector: releases
    params: {}
- name: evaluate_decision
  endpoint:
    path: /api/projects/projectid/evaluate/documentpath
    method: POST
    data_selector: result
    params: {}
- name: release
  endpoint:
    path: /api/projects/projectid/releases
    method: GET
    data_selector: records
- name: evaluation
  endpoint:
    path: /api/projects/projectid/evaluate/documentpath
    method: POST
    data_selector: results
- name: release
  endpoint:
    path: /api/projects/projectid/releases
    method: GET
- name: evaluate_decision
  endpoint:
    path: /api/projects/projectid/evaluate/documentpath
    method: POST
- name: Release
  endpoint:
    path: /api/projects/projectid/releases
    method: GET
    data_selector: releases
- name: Evaluate Decision
  endpoint:
    path: /api/projects/projectid/evaluate/documentpath
    method: POST
    data_selector: evaluationResult
- name: release
  endpoint:
    path: /api/projects/projectid/releases
    method: GET
- name: evaluate_decision
  endpoint:
    path: /api/projects/projectid/evaluate/documentpath
    method: POST
- name: Release
  endpoint:
    path: /api/projects/projectid/releases
    method: GET
- name: Evaluate Decision
  endpoint:
    path: /api/projects/projectid/evaluate/documentpath
    method: POST
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: release
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
    data_selector: records
    params: {}
- name: evaluate_decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/{documentpath}
    method: POST
    data_selector: result
    params: {}
- name: evaluateExpression
  endpoint:
    path: /evaluateExpression
    method: POST
- name: evaluateUnaryExpression
  endpoint:
    path: /evaluateUnaryExpression
    method: POST
- name: evaluate
  endpoint:
    path: /evaluate
    method: POST
- name: list_releases
  endpoint:
    path: /api/projects/{projectId}/releases
    method: GET
    data_selector: array of objects
    params:
      page: 1
      perPage: 10
- name: Releases
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
    data_selector: releases
    params: {}
- name: Evaluate Decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
    data_selector: result
    params: {}
- name: create_release
  endpoint:
    path: /api/projects/{projectId}/releases
    method: POST
- name: list_releases
  endpoint:
    path: /api/projects/{projectId}/releases
    method: GET
- name: get_release
  endpoint:
    path: /api/projects/{projectId}/releases/{releaseid}
    method: GET
- name: download_release
  endpoint:
    path: /api/projects/{projectId}/releases/{releaseid}/download
    method: GET
- name: upload_release
  endpoint:
    path: /api/projects/{projectId}/releases/multipart
    method: POST
- name: apply_release
  endpoint:
    path: /api/projects/{projectId}/releases/apply
    method: POST
- name: List Releases
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
- name: Create Release
  endpoint:
    path: /api/projects/{projectid}/releases
    method: POST
- name: Get Release
  endpoint:
    path: /api/projects/{projectid}/releases/{releaseid}
    method: GET
- name: Download Release
  endpoint:
    path: /api/projects/{projectid}/releases/{releaseid}/download
    method: GET
- name: Upload Release
  endpoint:
    path: /api/projects/{projectid}/releases/multipart
    method: POST
- name: Apply Release
  endpoint:
    path: /api/projects/{projectid}/releases/apply
    method: POST
- name: Evaluate Decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
- name: Evaluate Environment Decision
  endpoint:
    path: /api/projects/{projectid}/environments/{environmentkey}/evaluate/documentpath
    method: POST
- name: Get Release
  endpoint:
    path: /api/projects/{projectId}/releases/{releaseId}
    method: GET
    data_selector: object
- name: release
  endpoint:
    path: /api/projects/{projectid}/releases
    method: GET
- name: evaluate_decision
  endpoint:
    path: /api/projects/{projectid}/evaluate/documentpath
    method: POST
- name: download_release
  endpoint:
    path: /projects/{projectId}/releases/{releaseId}/download
    method: GET
    data_selector: file
    params: {}
- name: Release
  endpoint:
    path: /api/projects/projectid/releases
    method: GET
    data_selector: records
    params: {}
- name: Evaluate Decision
  endpoint:
    path: /api/projects/projectid/evaluate/documentpath
    method: POST
    data_selector: records
    params: {}
- name: upload_release
  endpoint:
    path: /api/projects/{projectId}/releases/multipart
    method: POST
    data_selector: object
- name: releases
  endpoint:
    path: /api/projects/projectid/releases
    method: GET
    data_selector: releases
    params: {}
- name: evaluate
  endpoint:
    path: /api/projects/projectid/evaluate/documentpath
    method: POST
    data_selector: evaluation
    params: {}
- name: apply_release
  endpoint:
    path: /api/projects/{projectId}/releases/apply
    method: POST
    data_selector: object
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: Evaluate Decision
  endpoint:
    path: /api/projects/{projectId}/evaluate/{documentPath}
    method: POST
- name: evaluateExpression
  endpoint:
    path: /reference/api-introduction/evaluateExpression
    method: GET
    data_selector: result
    params: {}
- name: evaluateUnaryExpression
  endpoint:
    path: /reference/api-introduction/evaluateUnaryExpression
    method: GET
    data_selector: result
    params: {}
- name: evaluate
  endpoint:
    path: /reference/api-introduction/evaluate
    method: POST
    data_selector: result
    params: {}
- name: Evaluate Environment Decision
  endpoint:
    path: /environments/{environmentKey}/evaluate/{documentPath}
    method: POST
    data_selector: object
    params: {}
- name: list_releases
  endpoint:
    path: /api/projects/{projectId}/releases
    method: GET
    data_selector: array of objects
    params:
      page: 1
      perPage: 10
- name: create_release
  endpoint:
    path: /projects/{projectId}/releases
    method: POST
- name: list_releases
  endpoint:
    path: /projects/{projectId}/releases
    method: GET
- name: get_release
  endpoint:
    path: /projects/{projectId}/releases/{releaseid}
    method: GET
- name: list_releases
  endpoint:
    path: /api/projects/{projectId}/releases
    method: GET
    data_selector: array of objects
    params:
      page: 1
      perPage: 10
- name: Evaluate Decision
  endpoint:
    path: /evaluate/{documentPath}
    method: POST
- name: release
  endpoint:
    path: /api/projects/{projectId}/releases/{releaseId}
    method: GET
    data_selector: object
    params: {}
- name: download_release
  endpoint:
    path: /{projectId}/releases/{releaseId}/download
    method: GET
- name: Upload Release
  endpoint:
    path: /api/projects/{projectId}/releases/multipart
    method: POST
- name: release
  endpoint:
    path: /api/projects/{projectId}/releases/apply
    method: POST
    data_selector: object
- name: evaluate_decision
  endpoint:
    path: /api/projects/{projectId}/evaluate/{documentPath}
    method: POST
    data_selector: object
    params: {}
- name: evaluate_environment_decision
  endpoint:
    path: /api/projects/{projectId}/environments/{environmentKey}/evaluate/{documentPath}
    method: POST
    data_selector: object
    params: {}
- name: release
  endpoint:
    path: /api/projects/projectid/releases
    method: GET
    data_selector: records
    params: {}
- name: evaluate
  endpoint:
    path: /api/projects/projectid/evaluate/documentpath
    method: POST
    data_selector: results
    params: {}
- name: list_releases
  endpoint:
    path: /projects/{projectId}/releases
    method: GET
    data_selector: array of objects
    params:
      page: 1
      perPage: 10
- name: Evaluate Decision
  endpoint:
    path: /api/projects/{projectId}/evaluate/{documentPath}
    method: POST
    data_selector: result
    params: {}
notes:
- You will need to create PAT for each environment e.g. `dev`, `uat`, `prod`.
- This token can only be used for evaluation. You will need to generate Project Token
  for each project separately.
- Obtain a license key from the organisation portal.
- BRMS Cloud is not intended to be used in a product environment. It is used for evaluation
  purposes only.
- BRMS Cloud is not intended to be used in product environments. It is used for evaluation
  purposes only.
- Allows integration of Retail order system directly with GoRules engine.
- The rules engine processes customer data against a set of predefined rules.
- Decision Tables are evaluated row by row, from top to bottom, adhering to a specified
  hit policy.
- Maximum execution time of a single function is limited to 5000ms
- Maximum execution time of a single function is limited to 5000ms.
- Loop Mode provides a powerful way to process arrays, enabling evaluation of each
  element independently and outputting results as an array.
- There can be only one owner of the organisation.
- By default, audit logs are retained forever.
- Settings allow you to customise security boundaries, personalise theme and update
  basic organisational settings.
- Only one pending Change Request can exist per single decision model or per environment
  at a time.
- Obtain license key from the organisation portal.
- Obtain a license key after signing up for self-hosted GoRules
- Navigate to http://localhost:9080 for login
- Environment where GoRules BRMS is hosted must have access to a License server
- Environment where GoRules BRMS is hosted must have access to a License server (https://portal.gorules.io/api).
- Visit http://localhost:9080 to access the service.
- For operational environments we strongly suggest setting up ingress.
- Remember to secure all sensitive information like database credentials using AWS
  Secrets Manager or environment variables.
- To make your service accessible, you need to edit service group and allow inbound
  traffic from all IPv4 (or configure appropriately).
- To obtain DB_SSL_CA go to AWS Docs find certificate for your region and use our
  online tool to convert certificate to base64.
- Remember to never commit sensitive information like database passwords to your version
  control system. Always use environment variables or a secure secrets management
  solution in your deployment process.
- 'POLL_INTERVAL=5000 # Dictates how often (in ms) agent polls for new data'
- The GoRules Agent is a standalone microservice that acts as a high-performance Rules
  Engine over REST, without requiring a UI.
- SSO is supported only on Business plan and above.
- Upon setting configuration you will need to restart BRMS for changes to take effect.
- Requires setup of Okta application
- Group claims can be configured but are optional
- We strongly suggest that you use managed Postgres DB from your cloud provider.
- For production environment we also suggest having point-in-time recovery.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- OIDC is recommended for organizations already using Azure or Okta for centralized
  user management and seeking to maintain a consistent authentication experience across
  applications.
- This document serves as a guide on implementing some techniques for Disaster Recovery
  (DR) and should not be interpreted as a comprehensive Disaster Recovery Plan (DRP).
  Each organization's DRP should be uniquely tailored to fit its specific needs and
  architectural framework.
- GoRules BRMS supports the creation and management of Releases.
- Environments allow tailored setups for each stage of your operational pipeline.
- Your credentials or IAM user must have permissions to Add, Delete, View, and List
  objects in the Bucket/Storage Container, depending on the selected cloud provider.
- GoRules BRMS offers a complete repository and environment for the lifecycle management
  of business rules.
- Non-technical stakeholders can create, modify, and oversee rules.
- BRMS can manage releases and promotion of the decision models between environments.
- User-friendly interface for non-technical users to create and modify rules.
- GoRules JDM is a modeling framework designed to streamline the representation and
  implementation of decision models.
- A lightweight and flexible HTTP client for making API requests
- ZEN Engine allows to load and execute JSON Decision Model (JDM) from JSON files.
- No authentication required for accessing the API.
- Log in to see full request history
- Pre-installed JavaScript libraries are available for use.
- Existing files will not be overwritten, instead new document versions will be pushed.
- Enabled debug trace of how the decision has been made
- Obtain a license key by signing up for self-hosted GoRules.
- After signing up, access the dashboard to manage license keys.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 200 Successful operation
auth_info:
  mentioned_objects: []
client:
  base_url: https://gorules.io
source_metadata: null
