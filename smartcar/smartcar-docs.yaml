resources:
- name: vehicle_signals
  endpoint:
    path: /signals
    method: GET
- name: commands
  endpoint:
    path: /commands
    method: POST
    data_selector: commands
    params: {}
- name: vehicle_connections
  endpoint:
    path: /v1/vehicles
    method: GET
- name: webhook_subscription
  endpoint:
    path: /v1/webhooks
    method: POST
- name: vehicle_attributes
  endpoint:
    path: /v1/vehicles/{vehicle_id}
    method: GET
- name: signals
  endpoint:
    path: /product/signals
    method: GET
- name: commands
  endpoint:
    path: /product/commands
    method: GET
- name: compatible_brands
  endpoint:
    path: /product/compatible-vehicles
    method: GET
- name: connect
  endpoint:
    path: /product/connect
    method: GET
- name: integrations
  endpoint:
    path: /product/integrations
    method: GET
- name: battery_level
  endpoint:
    path: /api/battery-level
    method: GET
    data_selector: data
- name: charging_status
  endpoint:
    path: /api/charging-status
    method: GET
    data_selector: data
- name: start_stop_charge
  endpoint:
    path: /start_stop_charge
    method: POST
    data_selector: data
    params: {}
- name: charge_limit
  endpoint:
    path: /charge_limit
    method: GET
    data_selector: data
    params: {}
- name: battery_level
  endpoint:
    path: /api/v1/battery_level
    method: GET
- name: charging_status
  endpoint:
    path: /api/v1/charging_status
    method: GET
- name: start_stop_charge
  endpoint:
    path: /api/v1/start_stop_charge
    method: POST
- name: charge_limit
  endpoint:
    path: /api/v1/charge_limit
    method: GET
- name: battery_level
  endpoint:
    path: /api/v1/battery
    method: GET
    data_selector: state_of_charge
- name: charging_status
  endpoint:
    path: /api/v1/charging
    method: GET
    data_selector: status
- name: battery
  endpoint:
    path: /battery
    method: GET
    data_selector: battery_level
- name: vehicle_location
  endpoint:
    path: /location
    method: GET
    data_selector: location
- name: charge
  endpoint:
    path: /charge
    method: POST
    data_selector: charge_status
- name: vehicle
  endpoint:
    path: /v1.0/vehicles
    method: GET
    data_selector: vehicles
- name: battery
  endpoint:
    path: /v1.0/vehicles/{vehicle_id}/battery
    method: GET
    data_selector: battery
- name: location
  endpoint:
    path: /v1.0/vehicles/{vehicle_id}/location
    method: GET
    data_selector: location
- name: fuel
  endpoint:
    path: /v1.0/vehicles/{vehicle_id}/fuel
    method: GET
    data_selector: fuel
- name: vehicle
  endpoint:
    path: /api/v1/vehicles
    method: GET
    data_selector: vehicles
- name: vehicle_data
  endpoint:
    path: /v1/vehicles
    method: GET
- name: vehicles
  endpoint:
    path: /v1/vehicles
    method: GET
    data_selector: vehicles
- name: battery_level
  endpoint:
    path: /battery_level
    method: GET
    data_selector: state_of_charge
- name: charging_status
  endpoint:
    path: /charging_status
    method: GET
    data_selector: status
- name: start_stop_charge
  endpoint:
    path: /start_stop_charge
    method: POST
    data_selector: charge_control
- name: get_set_charge_limit
  endpoint:
    path: /charge_limit
    method: GET
    data_selector: charge_limit
- name: incidents
  endpoint:
    path: /incidents
    method: GET
    data_selector: records
- name: uptime
  endpoint:
    path: /uptime
    method: GET
    data_selector: records
- name: End Users
  endpoint:
    path: /services/data/vXX.X/sobjects/EndUser
    method: GET
    data_selector: records
    params: {}
- name: vehicle_signals
  endpoint:
    path: /api/v1/vehicle/signals
    method: GET
    data_selector: signals
- name: vehicle_signals
  endpoint:
    path: /v1/vehicles/signals
    method: GET
    data_selector: data
- name: commands
  endpoint:
    path: /commands
    method: POST
- name: vehicle_connections
  endpoint:
    path: /api/v1/vehicle/connections
    method: GET
- name: webhook_subscriptions
  endpoint:
    path: /api/v1/webhooks
    method: POST
- name: vehicle_features
  endpoint:
    path: /api/v1/vehicle/features
    method: GET
- name: signals
  endpoint:
    path: /v1/signals
    method: GET
    data_selector: data
    params: {}
- name: commands
  endpoint:
    path: /v1/commands
    method: POST
    data_selector: data
    params: {}
- name: compatible_brands
  endpoint:
    path: /v1/compatible-brands
    method: GET
    data_selector: data
    params: {}
- name: battery
  endpoint:
    path: /v1.0/battery
    method: GET
- name: vehicle_location
  endpoint:
    path: /v1.0/vehicle/location
    method: GET
- name: charge
  endpoint:
    path: /v1.0/charge
    method: GET
- name: charging_station
  endpoint:
    path: /api/charging_stations
    method: GET
    data_selector: data
    params: {}
- name: vehicle_status
  endpoint:
    path: /api/vehicles/status
    method: GET
    data_selector: data
    params: {}
- name: vehicle_signals
  endpoint:
    path: /api/v1/vehicles/{vehicle_id}/signals
    method: GET
    data_selector: signals
    params: {}
- name: vehicle_service_history
  endpoint:
    path: /api/v1/vehicles/{vehicle_id}/service-history
    method: GET
    data_selector: service_history
    params: {}
- name: VIN
  endpoint:
    path: /vehicles/vin
    method: GET
- name: location
  endpoint:
    path: /vehicles/location
    method: GET
- name: battery_state_of_charge
  endpoint:
    path: /vehicles/battery
    method: GET
- name: fuel_tank
  endpoint:
    path: /vehicles/fuel
    method: GET
- name: VIN
  endpoint:
    path: /api/v1/vin
    method: GET
- name: Location
  endpoint:
    path: /api/v1/location
    method: GET
- name: Tire pressure
  endpoint:
    path: /api/v1/tire_pressure
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: commands
  endpoint:
    path: /commands
    method: POST
- name: vehicle_signals
  endpoint:
    path: /product/signals
    method: GET
- name: vehicle_commands
  endpoint:
    path: /product/commands
    method: POST
- name: vehicle_connections
  endpoint:
    path: /api/v1/vehicle/connections
    method: GET
- name: webhook_subscription
  endpoint:
    path: /api/v1/webhooks
    method: POST
- name: vehicle_attributes
  endpoint:
    path: /api/v1/vehicles/{vehicle_id}
    method: GET
- name: battery
  endpoint:
    path: /v1.0/battery
    method: GET
    data_selector: batteryLevel
- name: location
  endpoint:
    path: /v1.0/location
    method: GET
    data_selector: location
- name: charge
  endpoint:
    path: /v1.0/charge
    method: GET
    data_selector: chargeStatus
- name: odometer
  endpoint:
    path: /api/v1/vehicles/{vehicle_id}/odometer
    method: GET
    data_selector: data
- name: vin
  endpoint:
    path: /api/v1/vehicles/{vehicle_id}/vin
    method: GET
    data_selector: data
- name: engine_oil_life
  endpoint:
    path: /api/v1/vehicles/{vehicle_id}/engine_oil_life
    method: GET
    data_selector: data
- name: service_history
  endpoint:
    path: /api/v1/vehicles/{vehicle_id}/service_history
    method: GET
    data_selector: data
- name: location
  endpoint:
    path: /api/v1/vehicles/{vehicle_id}/location
    method: GET
    data_selector: data
- name: vehicle
  endpoint:
    path: /v1.0/vehicle
    method: GET
- name: battery
  endpoint:
    path: /v1.0/battery
    method: GET
- name: fuel
  endpoint:
    path: /v1.0/fuel
    method: GET
- name: location
  endpoint:
    path: /v1.0/location
    method: GET
- name: vin
  endpoint:
    path: /v1.0/vin
    method: GET
- name: VIN
  endpoint:
    path: /vin
    method: GET
- name: Location
  endpoint:
    path: /location
    method: GET
- name: Tire pressure
  endpoint:
    path: /tire-pressure
    method: GET
- name: vehicle_signals
  endpoint:
    path: /v1.0/vehicles/{vehicle_id}/signals
    method: GET
    data_selector: data
    params: {}
- name: vehicle_commands
  endpoint:
    path: /v1.0/vehicles/{vehicle_id}/commands
    method: POST
    data_selector: data
    params: {}
- name: vehicle
  endpoint:
    path: /vehicles
    method: GET
- name: vehicle_connections
  endpoint:
    path: /management/vehicle-connections
    method: GET
- name: compatibility_by_vin
  endpoint:
    path: /compatibility/by-vin
    method: GET
- name: compatibility_by_region_and_make
  endpoint:
    path: /compatibility/by-region-and-make
    method: GET
- name: battery_capacity
  endpoint:
    path: /battery/nominal_capacity
    method: GET
- name: connect
  endpoint:
    path: /oauth/authorize
    method: GET
    params:
      client_id: 8229df9f-91a0-4ff0-a1ae-a1f38ee24d07
      response_type: code
      scope: read_odometer read_vehicle_info read_location
      redirect_uri: https://example.com/home
- name: vehicle
  endpoint:
    path: /vehicle
    method: GET
    data_selector: data
    params: {}
- name: signals
  endpoint:
    path: /vehicle/signals
    method: GET
    data_selector: data
    params: {}
- name: read_alerts
  endpoint:
    path: /read/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: read_battery
  endpoint:
    path: /read/battery
    method: GET
    data_selector: battery
    params: {}
- name: read_charge
  endpoint:
    path: /read/charge
    method: GET
    data_selector: charge
    params: {}
- name: read_location
  endpoint:
    path: /read/location
    method: GET
    data_selector: location
    params: {}
- name: control_charge
  endpoint:
    path: /control/charge
    method: POST
    data_selector: charge_control
    params: {}
- name: control_security
  endpoint:
    path: /control/security
    method: POST
    data_selector: security_control
    params: {}
- name: vehicle
  endpoint:
    path: /v3/vehicles/{vehicleId}
    method: GET
    data_selector: attributes
- name: signals
  endpoint:
    path: /vehicles/{vehicleId}/signals
    method: GET
    data_selector: data
- name: signal
  endpoint:
    path: /v3/vehicles/{vehicleId}/signals/{signalCode}
    method: GET
    data_selector: attributes
- name: lock_unlock
  endpoint:
    path: /vehicles/{id}/security
    method: POST
    data_selector: message
    params: {}
- name: send_destination
  endpoint:
    path: /vehicles/{id}/navigation/destination
    method: POST
- name: vehicle_connections
  endpoint:
    path: /docs/api-reference/management/get-vehicle-connections
    method: GET
- name: delete_vehicle_connections
  endpoint:
    path: /docs/api-reference/management/delete-vehicle-connections
    method: DEL
- name: webhook_management
  endpoint:
    path: /docs/api-reference/webhooks/unsubscribe-webhook
    method: POST
- name: Check Compatibility by VIN
  endpoint:
    path: /docs/api-reference/compatibility/by-vin
    method: GET
- name: Check Compatibility by Region and Make
  endpoint:
    path: /docs/api-reference/compatibility/by-region-and-make
    method: GET
notes:
- The Vehicles API is designed primarily for exploration and non-frequent data retrieval.
- Data is typically updated once every 24 hours unless the vehicle is actively subscribed
  to a webhook.
- Webhooks update you instantly, no polling required.
- Customer-first permissions with clear, OAuth2-based consent flows.
- Uses OAuth2-based permissions
- Empower your users to interact with their vehicles remotely — from locking doors
  to starting a charge.
- OAuth2-based permissions
- Clear, user-friendly consent screens
- Smartcar Connect is a white-labeled OAuth flow that lets apps request permission
  from vehicle owners to access their car's data.
- Integrations allow your applications to receive and react to vehicle activity
- Smartcar's RESTful API gives you direct control to fetch the most up-to-date information
- Smartcar is SOC 2 Type 2 compliant.
- Smartcar is ISO 27001 & ISO 27701 compliant.
- Smartcar is compliant with the General Data Protection Regulation (GDPR).
- Retrieve granular battery and charging data with direct integrations across 200+
  EV models.
- Enroll drivers into demand response programs even if they’re not using a Level 2
  DC charger.
- Integrating with the Smartcar platform saved us months, if not years of engineering
  work. Being able to use one API to increase our breadth of supported EVs is a huge
  benefit for us.
- Smartcar ensures transparency by prioritizing consent management.
- Smartcar does not retain vehicle data, ensuring data privacy.
- Smartcar provides an EV integration platform for retrieving EV data.
- Smartcar gives us an easy and secure way to access information directly from the
  vehicle.
- Smartcar lets you connect to most battery electric vehicles (BEVs) and plug-in hybrid
  vehicles (PHEVs) with a single integration.
- Connect to 41 compatible EV brands with one reliable and predictable integration.
- Ensure data transparency with consent-based data collection.
- Smartcar helps EMSPs monitor and control charge directly from the vehicle.
- Leverage connected car data to turn your auto dealership software and dealership
  management systems into powerful engines for conversion and growth.
- Smartcar communicates directly with the cellular modem built into 2015 and newer
  vehicles.
- Using Smartcar’s APIs, we can provide new and innovative ways to make auto insurance
  fairer and more affordable for everyone.
- The API provides real-time vehicle data for warranty management.
- Smartcar retrieves vehicle data with a consent-driven system that requires explicit
  user permissions.
- Smartcar uses OAuth2.0 consent flow where you can review and accept detailed permissions
  before connecting your car to an app.
- Smartcar adheres to GDPR standards and maintains SOC 2 Type 2 compliance.
- Uses OAuth-2.0-based user consent flows
- Smartcar is a consent-based platform that processes only the necessary data to serve
  our customers.
- All requests to Smartcar services must be communicated via HTTPS and all data stored
  by the Smartcar platform is protected with Advanced Encryption Standard (AES) 256
  bit encryption.
- Uses OAuth2 with refresh token — requires setup of connected app in Smartcar
- Flexible, remote work environment
- All requests to the Vehicles API require an access token obtained via the OAuth2
  authorization flow.
- Smartcar mobile SDKs for iOS and Android are required for Bluetooth pairing.
- Optimize grid supply and demand by shifting EV charging loads to reduce grid strain
  and lower electricity rates.
- Some API requests may still see higher than normal latency. We’re continuing to
  work on a permanent fix to bring performance fully back to normal.
- This page reflects the reliability of each third party car brand service that Smartcar
  has integrated.
- Developer is responsible for mitigating any impacts on their End Users resulting
  from changes to data access by OEMs.
- Smartcar provides a connected car API platform for application developers.
- Smartcar does not store vehicle information which is processed through the Smartcar
  platform for longer than 90 days; any logs generated by the Smartcar API servers
  are deleted within ninety days.
- Smartcar's processing of personal information is governed by this End User Privacy
  Policy.
- These Clauses set out appropriate safeguards for the transfer of personal data.
- The Parties shall be able to demonstrate compliance with these Clauses.
- The data importer shall allow for and contribute to audits by the data exporter
  of the processing activities covered by these Clauses.
- The technical and organisational measures implemented by the data importer are described
  at https://smartcar.com/data-security/
- Users must link their vehicle to your app before making API requests.
- Users grant your app access to their vehicle data using Smartcar Connect.
- Kunden gewähren Ihrer Anwendung über Smartcar Connect Zugriff auf ihre Fahrzeugdaten.
- Webhooks übertragen Daten direkt auf Ihr System, sobald sie verfügbar sind.
- OAuth2-basierte Berechtigungen
- Jeder Befehl wird nur mit Zustimmung des Benutzers über den Smartcar Connect-Flow
  weitergegeben.
- Smartcar Connect ist ein White-Label-OAuth-Flow
- Smartcar Connect basiert auf einem Ansatz, bei dem der Datenschutz an erster Stelle
  steht, und bietet Fahrzeugbesitzern eine klare und transparente Möglichkeit, Datenberechtigungen
  zu überprüfen und zu erteilen.
- Webhooks allow your app to receive vehicle updates as they happen.
- No additional setup required for Smartcar integration.
- Smartcar is ISO 27001 and ISO 27701 compliant.
- Smartcar complies with GDPR.
- Integrates EVs into home energy management.
- Supports multiple EV brands and models
- Users must consent to data sharing for functionality
- Requires setup of connected app in Smartcar
- Ensure proper OAuth scopes are configured for data access
- Smartcar makes it easy to digitize the car rental experience with contactless handoffs.
- Die Telematiklösung von Smartcar, bei der der Datenschutz an erster Stelle steht,
  ermöglicht Transportabteilungen das Onboarding von Fahrern ausschließlich per Software,
  eine manipulationssichere Kilometerüberprüfung und eine kostengünstige Skalierbarkeit.
- Mit unserer branchenführenden Plattform für das Einwilligungsmanagement können Sie
  die Zustimmung zu Fahrzeugdaten ganz einfach verwalten.
- Pricing plans available for different needs.
- Smartcar provides an API for connected cars.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Autorisations donnant la priorité au client avec des flux de consentement clairs
  basés sur OAuth2.
- OAuth2-autorisatiestroom — klanten weten altijd wat ze delen — en waarom.
- Geen gebruikersgegevens opgeslagen
- Smartcar ofrece información sobre los vehículos en tiempo real, precisa y segura,
  lo que elimina las encuestas y abre nuevas posibilidades para las aplicaciones de
  movilidad, las flotas, las plataformas de seguros y más.
- Permisos centrados en el cliente con flujos de consentimiento claros y basados en
  OAuth2.
- Los webhooks envían los datos directamente a su sistema tan pronto como estén disponibles.
- All requests to Smartcar services must be communicated via HTTPS.
- Autorisations basées sur OAuth2
- API allows remote control of vehicles.
- Smartcar Connect est un flux OAuth en marque blanche qui permet aux applications
  de demander l'autorisation aux propriétaires de véhicules d'accéder aux données
  de leur voiture.
- Smartcar Connect est conçu selon une approche axée sur la confidentialité, offrant
  aux propriétaires de véhicules un moyen clair et transparent de consulter et d'accorder
  des autorisations relatives aux données.
- Webhooks allow your application to receive updates from vehicles as they happen.
- Uses OAuth2 for user connection.
- Integrates seamlessly with Smartcar Dashboard
- Supports all Smartcar APIs and Webhooks
- Smartcar allows integration with most battery electric vehicles (BEV) and plug-in
  hybrid electric vehicles (PHEV) with a single integration.
- Utilizes OAuth2 with refresh token — requires setup of connected app in Smartcar
- Smartcar récupère les données du véhicule à l'aide d'un système basé sur le consentement
  qui nécessite des autorisations explicites de l'utilisateur.
- Smartcar provides tools for businesses to integrate vehicles using a unified API.
- Uses OAuth 2.0 consent flow to connect vehicles.
- Token is valid for 30 days.
- You must append the redirect_uri parameter to launch the flow successfully.
- OAuth2 outlines multiple authorization types. Smartcar Connect utilizes the 'Authorization
  Code' flow.
- The access_token expires after two hours.
- The refresh_token expires after 60 days.
- Webhooks are the recommended way to receive real-time vehicle data from Smartcar.
- CSV integration is coming soon! If you are interested in early access or have specific
  requirements, please reach out to support@smartcar.com.
- Access tokens are only valid for two hours.
- OAuth2 with refresh token is required for authorization.
- Bearer authentication header of the form `Bearer <token>`, where `<token>` is your
  auth token.
- 2.0 is still the only supported version for sending remote commands.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck OAuth token.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Intermittent Authentication Errors: Retrying the request shortly after should succeed.'
- The data importer agrees to notify the data exporter promptly if it is unable to
  comply with these Clauses, for whatever reason.
- 'INVALID_REQUEST: Check request parameters'
- 'UNAUTHORIZED: Verify OAuth credentials'
- 'NOT_FOUND: Resource not available'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Recheck OAuth token expiration'
- '404 Not Found: Verify vehicle ID exists'
- '401 Unauthorized: Check OAuth credentials.'
- 'Invalid Credentials: Check that you’re launching Connect in simulated mode'
- '403 - Permission error: Check that the vehicle you’ve created supports the endpoint.'
- 'INVALID_TOKEN: Ensure the token is valid and not expired.'
- 'ACCESS_DENIED: Verify the necessary permissions are granted.'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Not Found'
- '500: Internal Server Error'
- '400'
- '401'
- '403'
- '404'
- '500'
- 'AUTHENTICATION: Thrown when there is an issue with your authorization headers.'
- 'INVALID_PLAN: Thrown when limits have been reached based on your plan or if the
  feature is not available.'
- 'VEHICLE_LIMIT: Thrown when limits have been reached based on your plan or if the
  feature is not available.'
- 'VEHICLE_REQUEST_LIMIT: Thrown when limits have been reached based on your plan
  or if the feature is not available.'
- 'ACCOUNT_SUSPENDED: Thrown when limits have been reached based on your plan or if
  the feature is not available.'
- 'MAKE_NOT_COMPATIBLE: Thrown when Smartcar does not support a make or feature for
  a vehicle.'
- 'SMARTCAR_NOT_CAPABLE: Thrown when Smartcar does not support a make or feature for
  a vehicle.'
- 'VEHICLE_NOT_CAPABLE: Thrown when Smartcar does not support a make or feature for
  a vehicle.'
- 'ACCOUNT_ISSUE: Thrown when there are issues with the user’s connected service account.'
- 'AUTHENTICATION_FAILED: Thrown when there are issues with the user’s connected service
  account.'
- 'NO_VEHICLES: Thrown when there are issues with the user’s connected service account.'
- 'SUBSCRIPTION: Thrown when there are issues with the user’s connected service account.'
- 'VEHICLE_MISSING: Thrown when there are issues with the user’s connected service
  account.'
- 'PERMISSION: Thrown when there are permission issues with the user’s connected service
  account.'
- 'VIRTUAL_KEY_REQUIRED: Thrown when a virtual key is required to complete the request.'
- 'NULL: Thrown when you make a requests to an endpoint associated with permissions
  not yet granted to your application.'
- 'SMARTCAR_API: Thrown when there is an issue with the frequency of your requests.'
- 'VEHICLE: Thrown when there is an issue with the frequency of your requests.'
- 'PATH: Thrown if the requested path does not exist.'
- 'VERSION: Thrown if the requested path does not exist.'
- 'INTERNAL: Thrown when Smartcar runs into an unexpected issue and was unable to
  process the request.'
- 'MULTIPLE_RECORDS_FOUND: Thrown when multiple records are found but only one was
  expected.'
- 'RECORD_NOT_FOUND: Thrown when a required record could not be found.'
- 'INVALID_DATA: Thrown when the OEM or vehicle failed to process the request.'
- 'KNOWN_ISSUE: Thrown when the OEM or vehicle failed to process the request.'
- 'NO_RESPONSE: Thrown when the OEM or vehicle failed to process the request.'
- 'RATE_LIMIT: Thrown when the OEM or vehicle failed to process the request.'
- 'UNKNOWN_ISSUE: Thrown when the OEM or vehicle failed to process the request.'
- 'PARAMETER: Thrown if there is an issue with the format of the request or body.'
- 'ASLEEP: Thrown when a request fails due to the state of a vehicle or logically
  cannot be completed.'
- 'CHARGING_IN_PROGRESS: Thrown when a request fails due to the state of a vehicle
  or logically cannot be completed.'
- 'CHARGING_PLUG_NOT_CONNECTED: Thrown when a request fails due to the state of a
  vehicle or logically cannot be completed.'
- 'DOOR_OPEN: Thrown when a request fails due to the state of a vehicle or logically
  cannot be completed.'
- 'FULLY_CHARGED: Thrown when a request fails due to the state of a vehicle or logically
  cannot be completed.'
- 'NOT_CHARGING: Thrown when a request fails due to the state of a vehicle or logically
  cannot be completed.'
- 'CHARGE_FAULT: Thrown when a request fails due to the state of a vehicle or logically
  cannot be completed.'
- 'HOOD_OPEN: Thrown when a request fails due to the state of a vehicle or logically
  cannot be completed.'
- 'IGNITION_ON: Thrown when a request fails due to the state of a vehicle or logically
  cannot be completed.'
- 'IN_MOTION: Thrown when a request fails due to the state of a vehicle or logically
  cannot be completed.'
- 'REMOTE_ACCESS_DISABLED: Thrown when a request fails due to the state of a vehicle
  or logically cannot be completed.'
- 'TRUNK_OPEN: Thrown when a request fails due to the state of a vehicle or logically
  cannot be completed.'
- 'UNKNOWN: Thrown when a request fails due to the state of a vehicle or logically
  cannot be completed.'
- 'UNREACHABLE: Thrown when a request fails due to the state of a vehicle or logically
  cannot be completed.'
- 'VEHICLE_OFFLINE_FOR_SERVICE: Thrown when a request fails due to the state of a
  vehicle or logically cannot be completed.'
auth_info:
  mentioned_objects:
  - Oauth2
  - OAuthToken
  - OAuth2
  - OauthToken
  - AuthProvider
  - NamedCredential
  - control_navigation
client:
  base_url: https://smartcar.com
  auth:
    type: oauth2
source_metadata: null
