resources:
- name: CommentBody
  endpoint:
    path: /CommentBody
    method: GET
    data_selector: data.body
    params: {}
- name: FriendsList
  endpoint:
    path: /FriendsList
    method: GET
    data_selector: data.friends
    params: {}
- name: AppQuery
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.user
    params: {}
- name: repository
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.repository
    params: {}
- name: ProfilePicture
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Profile
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: viewer
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.viewer
    params: {}
- name: node
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.node
    params: {}
- name: DictionaryComponent_word
  endpoint:
    path: src/Components/__generated__/DictionaryComponent_word.graphql.js
    method: GET
    data_selector: dictionary
    params: {}
- name: DictionaryComponent_definition
  endpoint:
    path: src/Components/__generated__/DictionaryComponent_definition.graphql.js
    method: GET
    data_selector: definition
    params: {}
- name: DictionaryQuery
  endpoint:
    path: src/Queries/__generated__/DictionaryQuery.graphql.js
    method: GET
    data_selector: dictionary
    params: {}
- name: Fragment Container
  endpoint:
    path: /docs/fragment-container
    method: GET
    data_selector: content
    params: {}
- name: Query Renderer
  endpoint:
    path: /docs/query-renderer
    method: GET
    data_selector: content
    params: {}
- name: FeedStories
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.feed
    params: {}
- name: TodoItem
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.item
    params: {}
- name: TodoItem
  endpoint:
    path: /TodoItem
    method: GET
    data_selector: item
- name: subscription
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: data
    params: {}
- name: ExampleQuery
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.page
    params: {}
- name: rebels
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.rebels
    params: {}
- name: empire
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.empire
    params: {}
- name: introduceShip
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.introduceShip
    params: {}
- name: friends
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.friends
    params:
      order_by: $orderBy
      search_term: $searchTerm
      first: $count
- name: user
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.user
    params: {}
- name: UserFragment
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.viewer.actor
- name: ViewerQuery
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.viewer
- name: MainContent
  endpoint:
    path: /graphql
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.user
    params:
      id: '4'
- name: like_post
  endpoint:
    path: /like_post
    method: POST
    data_selector: like_post
    params: {}
- name: comment_create
  endpoint:
    path: /comment_create
    method: POST
    data_selector: comment_create
    params: {}
- name: LikePostSubscription
  endpoint:
    path: /like_post_subscribe
    method: SUBSCRIPTION
    data_selector: like_post_subscribe
    params: {}
- name: CommentCreateSubscription
  endpoint:
    path: /comment_create_subscribe
    method: SUBSCRIPTION
    data_selector: comment_create_subscribe
    params: {}
- name: RelayEnvironmentProvider
  endpoint:
    path: /relay/environment
    method: GET
    data_selector: environment
    params: {}
- name: useRelayEnvironment
  endpoint:
    path: /relay/useRelayEnvironment
    method: GET
    data_selector: environment
    params: {}
- name: usePreloadedQuery
  endpoint:
    path: /relay/usePreloadedQuery
    method: GET
    data_selector: results
    params: {}
- name: useLazyLoadQuery
  endpoint:
    path: /relay/useLazyLoadQuery
    method: GET
    data_selector: results
    params: {}
- name: useFragment
  endpoint:
    path: /relay/useFragment
    method: GET
    data_selector: data
    params: {}
- name: CommentBody
  endpoint:
    path: /CommentBody
    method: GET
    data_selector: data
    params: {}
- name: FriendsList
  endpoint:
    path: /FriendsList
    method: GET
    data_selector: data
    params: {}
- name: AppQuery
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.user
    params: {}
- name: rebels
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.rebels
    params: {}
- name: empire
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.empire
    params: {}
- name: introduceShip
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.introduceShip
    params: {}
- name: node
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: usernames
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
notes:
- Relay Hooks are integrated with React Concurrent Mode and Suspense.
- The component is automatically subscribed to updates to the fragment data.
- Pagination will not cause the component to suspend.
- Ensure that at least the `repo` scope is selected for the token.
- A QueryRenderer will not start loading its data until it is mounted.
- Relay Modern requires a Babel plugin to convert GraphQL to runtime artifacts
- This guide just scratches the surface of Relay's API.
- Relay Modern comes with a built-in handler that augment the core with special functionality
  for handling connections.
- Last updated on 2020. 2. 3. by Tony
- Refetch query to be fetched upon calling `refetch`.
- Refetch Container is a higher-order component that fetches new GraphQL query with
  different variables.
- It is possible to continuously generate the query map files by using the --persist-output
  and --watch options simultaneously.
- All language plugins will emit roughly the same sort of type-information.
- Relay's artifact emission is stateless.
- Uses createMockEnvironment and MockPayloadGenerator for testing Relay components.
- Relay can be used to read and write local data, and act as a single source of truth
  for all data in your client application.
- The Relay Compiler fully supports client-side extensions of the schema, which allows
  you to define local fields and types.
- Relay builds on GraphQL functionality to provide a framework for declarative data-fetching.
- The Relay runtime is designed for high performance even on low-end mobile devices.
- Uses Relay for managing and declaratively fetching GraphQL data.
- Pagination state is reset when refetching with new variables.
- Uses GraphQL for data fetching.
- query variables are available globally by any fragment that is a descendant of the
  query
- fragment declarations inside components can also reference query variables
- any query that ends up rendering/including the above fragment must declare the $scale
  variable
- if any query that happens to include this fragment doesn't declare the $scale variable,
  an error will be produced by the Relay Compiler at build time
- Relay supports pagination and local variable declarations in fragments.
- Relay is a framework for managing and declaratively fetching GraphQL data.
- Uses React's Suspense for loading states
- Error boundaries can be used to catch errors during render
- Uses Relay to manage and declaratively fetch GraphQL data.
- Queries can suspend while loading data.
- Fragments can reference global query variables and can also declare local arguments
  with default values.
- The sample Error Boundary provides a retry function to re-attempt to render the
  content that originally produced the error.
- Calling `refetch` and passing a new set of variables will fetch the fragment again
  with the newly-provided variables.
- When the searchTerm provided via props changes, refetch the connection with the
  new searchTerm.
- Partial rendering behavior is highly experimental and likely to change.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Uses Relay for data fetching and caching
- Uses GraphQL with lazy loading queries.
- Each combination of values used for filters will produce a different record for
  the connection.
- When making updates to a connection, make sure to update all of the relevant records
  affected by a change.
- Keep a single connection per component, to keep the components easier to follow.
- Subscribing to changes in data allows clients to receive real-time updates.
- It is recommended to use Relay Hooks APIs in Concurrent Mode.
- Pagination requests will not cause the component to suspend.
- IDs are designed to be opaque
- Relay uses a standardized way of expressing one-to-many relationships
errors:
- '401 Unauthorized: Check your authentication token.'
- 'GraphQL error: Check if the query is valid or if variables are correctly passed.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects: []
client:
  base_url: /graphql
  headers:
    Content-Type: application/json
source_metadata: null
