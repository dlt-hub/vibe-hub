resources:
- name: assignments
  endpoint:
    path: /api/v1/assignments/{id}/documents/{documentId}
    method: GET
- name: programmes
  endpoint:
    path: /api/v1/programmes/{id}/documents/list
    method: POST
- name: categorylists
  endpoint:
    path: /api/v1/categorylists
    method: POST
- name: categories
  endpoint:
    path: /api/v1/categories/jobpostings
    method: GET
- name: companies
  endpoint:
    path: /api/v1/companies/{id}/categories
    method: GET
- name: people
  endpoint:
    path: /api/v1/people/{id}/categories
    method: GET
- name: thirdpartyapplications
  endpoint:
    path: /api/v1/thirdpartyapplications
    method: POST
    data_selector: ''
    params: {}
- name: renew_application
  endpoint:
    path: /api/v1/thirdpartyapplications/{id}/renew
    method: POST
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: thirdpartyapplications
  endpoint:
    path: /api/v1/thirdpartyapplications
    method: POST
    data_selector: applications
    params: {}
- name: assignments
  endpoint:
    path: /api/v1/assignments/list
    method: POST
    data_selector: Items
    params: {}
- name: assignments_documents
  endpoint:
    path: /api/v1/assignments/{id}/documents/{documentId}
    method: GET
- name: programmes_documents_list
  endpoint:
    path: /api/v1/programmes/{id}/documents/list
    method: POST
- name: programmes_document
  endpoint:
    path: /api/v1/programmes/{id}/document
    method: POST
- name: programmes_documents
  endpoint:
    path: /api/v1/programmes/{id}/documents/{documentId}
    method: GET
- name: categorylists
  endpoint:
    path: /api/v1/categorylists
    method: POST
- name: categorylists_entries
  endpoint:
    path: /api/v1/categorylists/{categoryListId}/entries
    method: POST
- name: categorylists_entries_list
  endpoint:
    path: /api/v1/categorylists/{id}/entries/list
    method: POST
- name: categorylists_entry
  endpoint:
    path: /api/v1/categorylists/{categoryListId}/entries/{entryId}
    method: GET
- name: categorylists_entry_delete
  endpoint:
    path: /api/v1/categorylists/{categoryListId}/entries/{entryId}
    method: DELETE
- name: categorylists_id
  endpoint:
    path: /api/v1/categorylists/{id}
    method: GET
- name: categories_jobpostings
  endpoint:
    path: /api/v1/categories/jobpostings
    method: GET
- name: jobpostings_categories
  endpoint:
    path: /api/v1/jobpostings/{id}/categories
    method: POST
- name: jobpostings_categories_id
  endpoint:
    path: /api/v1/jobpostings/{id}/categories/{categoryListId}
    method: GET
- name: categories_assignments
  endpoint:
    path: /api/v1/categories/assignments
    method: GET
- name: companies_categories
  endpoint:
    path: /api/v1/companies/{id}/categories
    method: GET
- name: people_categories
  endpoint:
    path: /api/v1/people/{id}/categories
    method: GET
- name: categories_programmes
  endpoint:
    path: /api/v1/categories/programmes
    method: GET
- name: duplicates_people
  endpoint:
    path: /api/v1/duplicates/people
    method: GET
    data_selector: records
    params:
      request.personName: John Doe
      request.emailAddress: someemailaddress@gmail.com
      request.pageIndex: 0
      request.pageSize: 10
- name: quicksearch_people
  endpoint:
    path: /api/v2/quicksearch/people
    method: GET
    data_selector: records
    params:
      request.searchTerm: John
      request.pageIndex: 0
      request.pageSize: 10
- name: search_users
  endpoint:
    path: /api/v1/search/users
    method: POST
    data_selector: Items
    params:
      request.searchTerm: Jane
- name: journal_list
  endpoint:
    path: /api/v1/journal/list
    method: POST
    data_selector: Items
    params:
      PageSize: 5
      PageIndex: 0
      UsePaging: true
      ReturnTotalCount: true
      ReturnTotalDatabaseItemCount: true
- name: lookup_lists
  endpoint:
    path: /api/v1/lookuplists/list
    method: POST
    data_selector: Items
    params: {}
- name: countries
  endpoint:
    path: /api/v1/countries
    method: GET
    data_selector: Items
    params: {}
- name: backup_requests
  endpoint:
    path: /api/v1/backuprequests
    method: POST
    data_selector: ''
    params: {}
- name: people_rules
  endpoint:
    path: /api/v1/datamanagement/people/rules
    method: GET
    data_selector: ''
    params: {}
- name: companies_rules
  endpoint:
    path: /api/v1/datamanagement/companies/rules
    method: GET
    data_selector: ''
    params: {}
- name: assignment_rules
  endpoint:
    path: /api/v1/datamanagement/assignment/rules
    method: GET
    data_selector: ''
    params: {}
- name: settings
  endpoint:
    path: /api/v1/settings/{key}
    method: GET
    data_selector: ''
    params:
      key: '[required]'
- name: assignments
  endpoint:
    path: /api/v1/assignments/list
    method: POST
    data_selector: Items
    params: {}
- name: assignments
  endpoint:
    path: /api/v1/assignments/list
    method: POST
    data_selector: Items
    params:
      PageSize: 1000
      PageIndex: 0
      ReturnTotalCount: true
- name: companies
  endpoint:
    path: /api/v1/companies/list
    method: POST
    data_selector: Items
    params:
      PageSize: 1000
      PageIndex: 0
      ReturnTotalCount: true
      ReturnTotalDatabaseItemCount: true
- name: companies
  endpoint:
    path: /api/v1/companies
    method: GET
    data_selector: Items
    params: {}
- name: people
  endpoint:
    path: /api/v1/people/list
    method: POST
    data_selector: Items
    params: {}
- name: documents
  endpoint:
    path: /api/v1/documents/list
    method: POST
    data_selector: Items
    params: {}
- name: fullparse_document
  endpoint:
    path: /api/v2/fullparse/document
    method: POST
- name: fullparse_results
  endpoint:
    path: /api/v2/fullparse/{id}
    method: GET
- name: fullparse_create
  endpoint:
    path: /api/v2/fullparse/create
    method: GET
    params:
      personId: required
      updateAllContactItems: required
- name: documents_list
  endpoint:
    path: /api/v1/documents/list
    method: GET
    data_selector: records
- name: documents
  endpoint:
    path: /api/v1/documents/{id}
    method: GET
    data_selector: records
- name: bulk_delete_documents
  endpoint:
    path: /api/v1/documents/bulkDelete
    method: POST
    data_selector: records
- name: rename_document
  endpoint:
    path: /api/v1/documents/{id}/rename
    method: POST
    data_selector: records
- name: people_documents_list
  endpoint:
    path: /api/v1/people/{id}/documents/list
    method: GET
    data_selector: records
- name: companies_documents_list
  endpoint:
    path: /api/v1/companies/{id}/documents/list
    method: GET
    data_selector: records
- name: assignments_documents_list
  endpoint:
    path: /api/v1/assignments/{id}/documents/list
    method: GET
    data_selector: records
- name: programmes_documents_list
  endpoint:
    path: /api/v1/programmes/{id}/documents/list
    method: GET
    data_selector: records
- name: category_lists
  endpoint:
    path: /api/v1/categorylists
    method: POST
    data_selector: records
notes:
- You must possess a licensed Invenias User Account and be a member of the 'System
  Administrator' permission group to execute operations.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- A token is valid for 24 hours only.
- An api_key will be valid for 3 minutes before expiring.
- The user who makes the backup request is the only person who can access the backup
  via Azure Storage Explorer.
- There are cost implications when requesting over one backup.
- It's possible to POST a request body in a list endpoint request allowing you to
  define filters, sorting, grouping, column selection, pagination, and more.
errors:
- '401 Unauthorized: If a client request contains an invalid bearer_token.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '429 Too Many Requests: The user has sent too many requests in a given amount of
  time (rate limiting).'
- '400 Bad Request: Review request for syntax errors.'
- '401 Unauthorized: Check authentication credentials.'
- '403 Forbidden: Ensure sufficient permissions.'
- '404 Not Found: Verify resource availability.'
- '500 Internal Server Error: Unexpected server condition.'
- '503 Service Unavailable: Server overload or maintenance.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - ClientId
  - ClientSecret
  - Authorization Server
client:
  base_url: https://{subdomain}.invenias.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://{subdomain}.invenias.com/identity/connect/token
    client_id: '{clientid}'
    client_secret: '{clientsecret}'
    location: header
    header_name: Authorization
  headers:
    Content-Type: application/x-www-form-urlencoded
source_metadata: null
