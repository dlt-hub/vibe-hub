resources:
- name: create_schedule_rotation
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/rotations
    method: POST
- name: get_schedule_rotation
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/rotations/:id
    method: GET
- name: update_schedule_rotation
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/rotations/:id
    method: PATCH
- name: delete_schedule_rotation
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/rotations/:id
    method: DELETE
- name: list_schedule_rotations
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/rotations
    method: GET
    data_selector: data
    params:
      scheduleIdentifierType: id
- name: create_schedule_rotation
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/rotations
    method: POST
- name: get_schedule_rotation
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/rotations/:id
    method: GET
- name: update_schedule_rotation
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/rotations/:id
    method: PATCH
- name: delete_schedule_rotation
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/rotations/:id
    method: DELETE
- name: schedule_rotations
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/rotations
    method: GET
    data_selector: data
    params:
      scheduleIdentifierType: name
- name: get_request_status
  endpoint:
    path: /v2/alerts/requests/:requestId
    method: GET
    data_selector: data
- name: create_alert
  endpoint:
    path: /v2/alerts
    method: POST
    data_selector: data
- name: delete_alert
  endpoint:
    path: /v2/alerts/:identifier
    method: DELETE
    data_selector: data
- name: get_alert
  endpoint:
    path: /v2/alerts/:identifier
    method: GET
    data_selector: data
- name: alerts
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
    params:
      limit: 20
- name: count_alerts
  endpoint:
    path: /v2/alerts/count
    method: GET
    data_selector: data
    params: {}
- name: acknowledge_alert
  endpoint:
    path: /v2/alerts/:identifier/acknowledge
    method: POST
    data_selector: ''
    params: {}
- name: close_alert
  endpoint:
    path: /v2/alerts/:identifier/close
    method: POST
    data_selector: ''
    params: {}
- name: add_note_to_alert
  endpoint:
    path: /v2/alerts/:identifier/notes
    method: POST
    data_selector: ''
    params: {}
- name: execute_custom_action
  endpoint:
    path: /v2/alerts/:identifier/actions/:action
    method: POST
    data_selector: ''
    params: {}
- name: get_request_status
  endpoint:
    path: /v2/alerts/requests/:requestId
    method: GET
- name: create_alert
  endpoint:
    path: /v2/alerts
    method: POST
- name: delete_alert
  endpoint:
    path: /v2/alerts/:identifier
    method: DELETE
- name: get_alert
  endpoint:
    path: /v2/alerts/:identifier
    method: GET
- name: alerts
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
- name: alerts_count
  endpoint:
    path: /v2/alerts/count
    method: GET
    data_selector: data
- name: acknowledge_alert
  endpoint:
    path: /v2/alerts/:identifier/acknowledge
    method: POST
- name: close_alert
  endpoint:
    path: /v2/alerts/:identifier/close
    method: POST
- name: add_note_to_alert
  endpoint:
    path: /v2/alerts/:identifier/notes
    method: POST
- name: execute_custom_action
  endpoint:
    path: /v2/alerts/:identifier/actions/:action
    method: POST
- name: unacknowledge_alert
  endpoint:
    path: /v2/alerts/:identifier/unacknowledge
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: snooze_alert
  endpoint:
    path: /v2/alerts/:identifier/snooze
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: escalate_alert
  endpoint:
    path: /v2/alerts/:identifier/escalate
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: assign_alert
  endpoint:
    path: /v2/alerts/:identifier/assign
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: add_team_to_alert
  endpoint:
    path: /v2/alerts/:identifier/teams
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: add_responder_to_alert
  endpoint:
    path: /v2/alerts/:identifier/responders
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: add_tags_to_alert
  endpoint:
    path: /v2/alerts/:identifier/tags
    method: POST
    data_selector: tags
    params:
      identifierType: id
- name: remove_tags_from_alert
  endpoint:
    path: /v2/alerts/:identifier/tags
    method: DELETE
    data_selector: tags
    params:
      identifierType: id
- name: unacknowledge_alert
  endpoint:
    path: /v2/alerts/:identifier/unacknowledge
    method: POST
- name: snooze_alert
  endpoint:
    path: /v2/alerts/:identifier/snooze
    method: POST
- name: escalate_alert
  endpoint:
    path: /v2/alerts/:identifier/escalate
    method: POST
- name: assign_alert
  endpoint:
    path: /v2/alerts/:identifier/assign
    method: POST
- name: add_team_to_alert
  endpoint:
    path: /v2/alerts/:identifier/teams
    method: POST
- name: add_responder_to_alert
  endpoint:
    path: /v2/alerts/:identifier/responders
    method: POST
- name: add_tags_to_alert
  endpoint:
    path: /v2/alerts/:identifier/tags
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: remove_tags_from_alert
  endpoint:
    path: /v2/alerts/:identifier/tags
    method: DELETE
    data_selector: result
    params:
      identifierType: id
- name: add_details_to_alert
  endpoint:
    path: /v2/alerts/:identifier/details
    method: POST
- name: remove_details_from_alert
  endpoint:
    path: /v2/alerts/:identifier/details
    method: DELETE
- name: update_alert_priority
  endpoint:
    path: /v2/alerts/:identifier/priority
    method: PUT
- name: update_alert_message
  endpoint:
    path: /v2/alerts/:identifier/message
    method: PUT
- name: update_alert_description
  endpoint:
    path: /v2/alerts/:identifier/description
    method: PUT
- name: list_alert_recipients
  endpoint:
    path: /v2/alerts/:identifier/recipients
    method: GET
- name: add_details_to_alert
  endpoint:
    path: /v2/alerts/:identifier/details
    method: POST
- name: remove_details_from_alert
  endpoint:
    path: /v2/alerts/:identifier/details
    method: DELETE
- name: update_alert_priority
  endpoint:
    path: /v2/alerts/:identifier/priority
    method: PUT
- name: update_alert_message
  endpoint:
    path: /v2/alerts/:identifier/message
    method: PUT
- name: update_alert_description
  endpoint:
    path: /v2/alerts/:identifier/description
    method: PUT
- name: list_alert_recipients
  endpoint:
    path: /v2/alerts/:identifier/recipients
    method: GET
- name: alert_logs
  endpoint:
    path: /v2/alerts/:identifier/logs
    method: GET
    data_selector: data
    params: {}
- name: alert_notes
  endpoint:
    path: /v2/alerts/:identifier/notes
    method: GET
    data_selector: data
    params: {}
- name: saved_searches
  endpoint:
    path: /v2/alerts/saved-searches
    method: GET
    data_selector: data
    params: {}
- name: create_saved_search
  endpoint:
    path: /v2/alerts/saved-searches
    method: POST
    data_selector: data
    params: {}
- name: update_saved_search
  endpoint:
    path: /v2/alerts/saved-searches/:identifier
    method: PATCH
    data_selector: data
    params: {}
- name: get_saved_search
  endpoint:
    path: /v2/alerts/saved-searches/:identifier
    method: GET
    data_selector: data
    params: {}
- name: delete_saved_search
  endpoint:
    path: /v2/alerts/saved-searches/:identifier
    method: DELETE
    data_selector: result
    params: {}
- name: create_alert_attachment
  endpoint:
    path: /v2/alerts/:alertIdentifier/attachments
    method: POST
    data_selector: result
    params: {}
- name: get_alert_attachment
  endpoint:
    path: /v2/alerts/:alertIdentifier/attachments/:attachmentId
    method: GET
    data_selector: data
    params: {}
- name: list_alert_attachments
  endpoint:
    path: /v2/alerts/:alertIdentifier/attachments
    method: GET
    data_selector: data
    params:
      alertIdentifierType: id
- name: delete_alert_attachment
  endpoint:
    path: /v2/alerts/:alertIdentifier/attachments/:attachmentId
    method: DELETE
    data_selector: result
    params:
      alertIdentifierType: id
      user: ''
- name: alert_logs
  endpoint:
    path: /v2/alerts/:identifier/logs
    method: GET
    data_selector: data
    params: {}
- name: alert_notes
  endpoint:
    path: /v2/alerts/:identifier/notes
    method: GET
    data_selector: data
    params: {}
- name: saved_searches
  endpoint:
    path: /v2/alerts/saved-searches
    method: GET
    data_selector: data
    params: {}
- name: create_saved_search
  endpoint:
    path: /v2/alerts/saved-searches
    method: POST
    data_selector: data
    params: {}
- name: update_saved_search
  endpoint:
    path: /v2/alerts/saved-searches/:identifier
    method: PATCH
    data_selector: data
    params: {}
- name: get_saved_search
  endpoint:
    path: /v2/alerts/saved-searches/:identifier
    method: GET
    data_selector: data
    params: {}
- name: delete_saved_search
  endpoint:
    path: /v2/alerts/saved-searches/:identifier
    method: DELETE
    data_selector: result
    params: {}
- name: create_attachment
  endpoint:
    path: /v2/alerts/:alertIdentifier/attachments
    method: POST
    data_selector: result
    params: {}
- name: get_attachment
  endpoint:
    path: /v2/alerts/:alertIdentifier/attachments/:attachmentId
    method: GET
    data_selector: data
    params: {}
- name: list_alert_attachments
  endpoint:
    path: /v2/alerts/:alertIdentifier/attachments
    method: GET
    params:
      alertIdentifierType: id
- name: delete_alert_attachment
  endpoint:
    path: /v2/alerts/:alertIdentifier/attachments/:attachmentId
    method: DELETE
    params:
      alertIdentifierType: id
      user: ''
- name: Get Request Status
  endpoint:
    path: /v1/incidents/requests/:requestId
    method: GET
    data_selector: data
    params: {}
- name: Create Incident
  endpoint:
    path: /v1/incidents/create
    method: POST
    data_selector: ''
    params: {}
- name: Delete Incident
  endpoint:
    path: /v1/incidents/:identifier
    method: DELETE
    data_selector: ''
    params: {}
- name: Get Incident
  endpoint:
    path: /v1/incidents/:identifier
    method: GET
    data_selector: data
    params: {}
- name: Get Associated Alerts
  endpoint:
    path: /v1/incidents/:identifier/associated-alert-ids
    method: GET
    data_selector: data
    params: {}
- name: Get Responder Alerts
  endpoint:
    path: /v1/incidents/:identifier/responder-alert-ids
    method: GET
    data_selector: data
    params: {}
- name: get_request_status
  endpoint:
    path: /v1/incidents/requests/:requestId
    method: GET
- name: create_incident
  endpoint:
    path: /v1/incidents/create
    method: POST
- name: delete_incident
  endpoint:
    path: /v1/incidents/:identifier
    method: DELETE
- name: get_incident
  endpoint:
    path: /v1/incidents/:identifier
    method: GET
- name: get_associated_alerts
  endpoint:
    path: /v1/incidents/:identifier/associated-alert-ids
    method: GET
- name: get_responder_alerts
  endpoint:
    path: /v1/incidents/:identifier/responder-alert-ids
    method: GET
- name: incidents
  endpoint:
    path: /v1/incidents
    method: GET
    data_selector: data
    params:
      limit: '20'
      offset: '0'
- name: close_incident
  endpoint:
    path: /v1/incidents/:identifier/close
    method: POST
    data_selector: result
- name: resolve_incident
  endpoint:
    path: /v1/incidents/:identifier/resolve
    method: POST
    data_selector: result
- name: reopen_incident
  endpoint:
    path: /v1/incidents/:identifier/reopen
    method: POST
    data_selector: result
- name: add_note
  endpoint:
    path: /v1/incidents/:identifier/notes
    method: POST
    data_selector: result
- name: add_responder
  endpoint:
    path: /v1/incidents/:identifier/responders
    method: POST
    data_selector: result
- name: add_tags
  endpoint:
    path: /v1/incidents/:identifier/tags
    method: POST
    data_selector: result
- name: remove_tags
  endpoint:
    path: /v1/incidents/:identifier/tags
    method: DELETE
    data_selector: result
- name: add_details
  endpoint:
    path: /v1/incidents/:identifier/details
    method: POST
    data_selector: result
- name: incidents
  endpoint:
    path: /v1/incidents
    method: GET
    data_selector: data
    params:
      limit: 20
      offset: 0
- name: close_incident
  endpoint:
    path: /v1/incidents/:identifier/close
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: resolve_incident
  endpoint:
    path: /v1/incidents/:identifier/resolve
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: reopen_incident
  endpoint:
    path: /v1/incidents/:identifier/reopen
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: add_note
  endpoint:
    path: /v1/incidents/:identifier/notes
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: add_responder
  endpoint:
    path: /v1/incidents/:identifier/responders
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: add_tags
  endpoint:
    path: /v1/incidents/:identifier/tags
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: remove_tags
  endpoint:
    path: /v1/incidents/:identifier/tags
    method: DELETE
    data_selector: result
    params:
      identifierType: id
      tags: ''
- name: add_details
  endpoint:
    path: /v1/incidents/:identifier/details
    method: POST
    data_selector: result
    params:
      identifierType: id
- name: remove_details
  endpoint:
    path: /v1/incidents/:identifier/details
    method: DELETE
    data_selector: result
    params:
      keys: comma separated list of keys to remove from the custom properties of the
        incident
- name: update_priority
  endpoint:
    path: /v1/incidents/:identifier/priority
    method: POST
    data_selector: result
    params:
      priority: Priority of the incident. Possible values are P1, P2, P3, P4 and P5
- name: update_message
  endpoint:
    path: /v1/incidents/:identifier/message
    method: POST
    data_selector: result
    params:
      message: Message of the incident.
- name: update_description
  endpoint:
    path: /v1/incidents/:identifier/description
    method: POST
    data_selector: result
    params:
      description: Description of the incident.
- name: list_logs
  endpoint:
    path: /v1/incidents/:identifier/logs
    method: GET
    data_selector: data
    params:
      identifierType: type of the identifier that is provided as an in-line parameter
      offset: Starting value of the offset property. Minimum value is 1.
      direction: Default value is next.
      limit: Maximum number of items to provide in the result. Default value is 20
        and maximum value is 100.
      order: Sorting order of the result set. Possible values are desc and asc.
- name: list_notes
  endpoint:
    path: /v1/incidents/:identifier/notes
    method: GET
    data_selector: data
    params:
      identifierType: type of the identifier that is provided as an in-line parameter
      offset: Starting value of the offset property. Minimum value is 1.
      direction: Default value is next.
      limit: Maximum number of items to provide in the result. Default value is 20
        and maximum value is 100.
      order: Sorting order of the result set. Possible values are desc and asc.
- name: remove_details
  endpoint:
    path: /v1/incidents/:identifier/details
    method: DELETE
    data_selector: result
    params:
      keys: comma separated list of keys to remove from the custom properties of the
        incident
      identifierType: id
- name: update_priority
  endpoint:
    path: /v1/incidents/:identifier/priority
    method: PUT
    data_selector: result
    params:
      priority: P1, P2, P3, P4, P5
      identifierType: id
- name: update_message
  endpoint:
    path: /v1/incidents/:identifier/message
    method: PUT
    data_selector: result
    params:
      message: incident message
      identifierType: id
- name: update_description
  endpoint:
    path: /v1/incidents/:identifier/description
    method: PUT
    data_selector: result
    params:
      description: incident description
      identifierType: id
- name: list_logs
  endpoint:
    path: /v1/incidents/:identifier/logs
    method: GET
    data_selector: data
    params:
      identifierType: id
      limit: '20'
- name: list_notes
  endpoint:
    path: /v1/incidents/:identifier/notes
    method: GET
    data_selector: data
    params:
      identifierType: id
      limit: '20'
- name: add_incident_timeline_entry
  endpoint:
    path: /v2/incident-timelines/:incidentId/entries
    method: POST
- name: get_incident_timeline_entry
  endpoint:
    path: /v2/incident-timelines/:incidentId/entries/:timelineEntryId
    method: GET
- name: update_incident_timeline_entry
  endpoint:
    path: /v2/incident-timelines/:incidentId/entries/:timelineEntryId
    method: PUT
- name: delete_incident_timeline_entry
  endpoint:
    path: /v2/incident-timelines/:incidentId/entries/:timelineEntryId
    method: DELETE
- name: list_incident_timeline_entries
  endpoint:
    path: /v2/incident-timelines/:incidentId/entries
    method: GET
- name: hide_incident_timeline_entry
  endpoint:
    path: /v2/incident-timelines/:incidentId/entries/:timelineEntryId/hide
    method: PATCH
- name: unhide_incident_timeline_entry
  endpoint:
    path: /v2/incident-timelines/:incidentId/entries/:timelineEntryId/unhide
    method: PATCH
    data_selector: result
    params: {}
- name: add_incident_timeline_entry
  endpoint:
    path: /v2/incident-timelines/:incidentId/entries
    method: POST
    data_selector: data
    params: {}
- name: get_incident_timeline_entry
  endpoint:
    path: /v2/incident-timelines/:incidentId/entries/:timelineEntryId
    method: GET
    data_selector: data
    params: {}
- name: update_incident_timeline_entry
  endpoint:
    path: /v2/incident-timelines/:incidentId/entries/:timelineEntryId
    method: PATCH
    data_selector: data
    params: {}
- name: delete_incident_timeline_entry
  endpoint:
    path: /v2/incident-timelines/:incidentId/entries/:timelineEntryId
    method: DELETE
    data_selector: result
    params: {}
- name: list_incident_timeline_entries
  endpoint:
    path: /v2/incident-timelines/:incidentId/entries
    method: GET
    data_selector: data.entries
    params: {}
- name: hide_incident_timeline_entry
  endpoint:
    path: /v2/incident-timelines/:incidentId/entries/:timelineEntryId/hide
    method: PATCH
    data_selector: result
    params: {}
- name: List Integrations
  endpoint:
    path: /v2/integrations
    method: GET
- name: Get Integration
  endpoint:
    path: /v2/integrations/$integrationId
    method: GET
- name: Create API Based Integration
  endpoint:
    path: /v2/integrations
    method: POST
- name: Create Email Based Integration
  endpoint:
    path: /v2/integrations
    method: POST
- name: Update Integration
  endpoint:
    path: /v2/integrations/$integrationId
    method: PUT
- name: Delete Integration
  endpoint:
    path: /v2/integrations/$integrationId
    method: DELETE
- name: enable_integration
  endpoint:
    path: /v2/integrations/$integrationId/enable
    method: POST
- name: disable_integration
  endpoint:
    path: /v2/integrations/$integrationId/disable
    method: POST
- name: authenticate_integration
  endpoint:
    path: /v2/integrations/authenticate
    method: POST
- name: get_integration_actions
  endpoint:
    path: /v2/integrations/$integrationId/actions
    method: GET
- name: list_integrations
  endpoint:
    path: /v2/integrations
    method: GET
- name: get_integration
  endpoint:
    path: /v2/integrations/$integrationId
    method: GET
- name: create_integration
  endpoint:
    path: /v2/integrations
    method: POST
- name: update_integration
  endpoint:
    path: /v2/integrations/$integrationId
    method: PUT
- name: delete_integration
  endpoint:
    path: /v2/integrations/$integrationId
    method: DELETE
- name: create_action
  endpoint:
    path: /actions
    method: POST
- name: close_action
  endpoint:
    path: /actions
    method: POST
- name: acknowledge_action
  endpoint:
    path: /actions
    method: POST
- name: addNote_action
  endpoint:
    path: /actions
    method: POST
- name: update_integration_actions
  endpoint:
    path: /v2/integrations/$integrationId/actions
    method: PUT
    data_selector: data
- name: enable_integration
  endpoint:
    path: /v2/integrations/$integrationId/enable
    method: POST
- name: disable_integration
  endpoint:
    path: /v2/integrations/$integrationId/disable
    method: POST
- name: authenticate_integration
  endpoint:
    path: /v2/integrations/authenticate
    method: POST
- name: get_integration_actions
  endpoint:
    path: /v2/integrations/$integrationId/actions
    method: GET
- name: create_action
  endpoint:
    path: /v2/integrations/$integrationId/actions
    method: POST
    data_selector: data.create
    params: {}
- name: close_action
  endpoint:
    path: /v2/integrations/$integrationId/actions
    method: POST
    data_selector: data.close
    params: {}
- name: acknowledge_action
  endpoint:
    path: /v2/integrations/$integrationId/actions
    method: POST
    data_selector: data.acknowledge
    params: {}
- name: add_note_action
  endpoint:
    path: /v2/integrations/$integrationId/actions
    method: POST
    data_selector: data.addNote
    params: {}
- name: ping_heartbeat
  endpoint:
    path: /v2/heartbeats/:heartbeatName/ping
    method: GET
    data_selector: result
- name: add_heartbeat
  endpoint:
    path: /v2/heartbeats
    method: POST
    data_selector: data
- name: get_heartbeat
  endpoint:
    path: /v2/heartbeats/:heartbeatName
    method: GET
    data_selector: data
- name: list_heartbeats
  endpoint:
    path: /v2/heartbeats
    method: GET
    data_selector: data.heartbeats
- name: update_heartbeat
  endpoint:
    path: /v2/heartbeats/:heartbeatName
    method: PATCH
    data_selector: data
- name: delete_heartbeat
  endpoint:
    path: /v2/heartbeats/:heartbeatName
    method: DELETE
    data_selector: result
- name: enable_heartbeat
  endpoint:
    path: /v2/heartbeats/:heartbeatName/enable
    method: POST
    data_selector: data
- name: create_alert_2
  endpoint:
    path: /api/create_alert_2
    method: POST
- name: create_alert
  endpoint:
    path: /api/create_alert
    method: POST
- name: close_alert_3
  endpoint:
    path: /api/close_alert_3
    method: DELETE
- name: close_alert
  endpoint:
    path: /api/close_alert
    method: DELETE
- name: acknowledge_alert_2
  endpoint:
    path: /api/acknowledge_alert_2
    method: PATCH
- name: acknowledge_alert
  endpoint:
    path: /api/acknowledge_alert
    method: PATCH
- name: add_note
  endpoint:
    path: /api/add_note
    method: POST
- name: add_note_2
  endpoint:
    path: /api/add_note_2
    method: POST
- name: create_policy
  endpoint:
    path: /v2/policies
    method: POST
- name: get_policy
  endpoint:
    path: /v2/policies/:identifier
    method: GET
- name: update_policy
  endpoint:
    path: /v2/policies/:identifier
    method: PUT
- name: delete_policy
  endpoint:
    path: /v2/policies/:identifier
    method: DELETE
- name: update_integration_actions
  endpoint:
    path: /v2/integrations/$integrationId/actions
    method: PUT
- name: disable_policy
  endpoint:
    path: /policies/:identifier/disable
    method: POST
- name: enable_policy
  endpoint:
    path: /policies/:identifier/enable
    method: POST
- name: change_policy_order
  endpoint:
    path: /policies/:identifier/change-order
    method: POST
- name: list_alert_policies
  endpoint:
    path: /policies/alert
    method: GET
- name: list_notification_policies
  endpoint:
    path: /policies/notification
    method: GET
- name: ping_heartbeat
  endpoint:
    path: /v2/heartbeats/:heartbeatName/ping
    method: GET
    data_selector: result
- name: add_heartbeat
  endpoint:
    path: /v2/heartbeats
    method: POST
    data_selector: data
- name: get_heartbeat
  endpoint:
    path: /v2/heartbeats/:heartbeatName
    method: GET
    data_selector: data
- name: list_heartbeats
  endpoint:
    path: /v2/heartbeats
    method: GET
    data_selector: data.heartbeats
- name: update_heartbeat
  endpoint:
    path: /v2/heartbeats/:heartbeatName
    method: PATCH
    data_selector: data
- name: delete_heartbeat
  endpoint:
    path: /v2/heartbeats/:heartbeatName
    method: DELETE
    data_selector: result
- name: enable_heartbeat
  endpoint:
    path: /v2/heartbeats/:heartbeatName/enable
    method: POST
    data_selector: data
- name: create_policy
  endpoint:
    path: /v1/policies
    method: POST
    data_selector: data
- name: get_policy
  endpoint:
    path: /v1/policies/:identifier
    method: GET
    data_selector: data
- name: update_policy
  endpoint:
    path: /v1/policies/:identifier
    method: PUT
    data_selector: data
- name: disable_heartbeat
  endpoint:
    path: /v2/heartbeats/:heartbeatName/disable
    method: POST
    data_selector: data
    params: {}
- name: delete_policy
  endpoint:
    path: /v1/policies/:identifier
    method: DELETE
- name: disable_policy
  endpoint:
    path: /v1/policies/:identifier/disable
    method: POST
- name: enable_policy
  endpoint:
    path: /v1/policies/:identifier/enable
    method: POST
- name: change_policy_order
  endpoint:
    path: /v1/policies/:identifier/change-order
    method: POST
- name: list_policies
  endpoint:
    path: /v1/policies
    method: GET
- name: create_policy
  endpoint:
    path: /v2/policies
    method: POST
- name: get_policy
  endpoint:
    path: /v2/policies/:identifier
    method: GET
- name: update_policy
  endpoint:
    path: /v2/policies/:identifier
    method: PUT
- name: delete_policy
  endpoint:
    path: /v2/policies/:identifier
    method: DELETE
- name: create_maintenance
  endpoint:
    path: /v1/maintenance
    method: POST
- name: get_maintenance
  endpoint:
    path: /v1/maintenance/:maintenanceId
    method: GET
- name: update_maintenance
  endpoint:
    path: /v1/maintenance/:maintenanceId
    method: PUT
- name: delete_maintenance
  endpoint:
    path: /v1/maintenance/:maintenanceId
    method: DELETE
- name: list_maintenance
  endpoint:
    path: /v1/maintenance
    method: GET
- name: cancel_maintenance
  endpoint:
    path: /v1/maintenance/:maintenanceId/cancel
    method: POST
- name: change_end_date
  endpoint:
    path: /v1/maintenance/:maintenanceId/change-end-date
    method: POST
- name: disable_policy
  endpoint:
    path: /v2/policies/:identifier/disable
    method: POST
- name: enable_policy
  endpoint:
    path: /v2/policies/:identifier/enable
    method: POST
- name: change_policy_order
  endpoint:
    path: /v2/policies/:identifier/change-order
    method: POST
- name: list_alert_policies
  endpoint:
    path: /v2/policies/alert
    method: GET
- name: list_notification_policies
  endpoint:
    path: /v2/policies/notification
    method: GET
- name: account_info
  endpoint:
    path: /v2/account
    method: GET
    data_selector: data
- name: create_policy
  endpoint:
    path: /v1/policies
    method: POST
- name: get_policy
  endpoint:
    path: /v1/policies/:identifier
    method: GET
- name: update_policy
  endpoint:
    path: /v1/policies/:identifier
    method: PUT
- name: delete_policy
  endpoint:
    path: /v1/policies/:identifier
    method: DELETE
    data_selector: result
- name: disable_policy
  endpoint:
    path: /v1/policies/:identifier/disable
    method: POST
    data_selector: result
- name: enable_policy
  endpoint:
    path: /v1/policies/:identifier/enable
    method: POST
    data_selector: result
- name: change_policy_order
  endpoint:
    path: /v1/policies/:identifier/change-order
    method: POST
    data_selector: result
- name: list_policies
  endpoint:
    path: /v1/policies
    method: GET
    data_selector: data
- name: create_user
  endpoint:
    path: /v2/users
    method: POST
    data_selector: result
    params: {}
- name: get_user
  endpoint:
    path: /v2/users/:identifier
    method: GET
    data_selector: data
    params: {}
- name: update_user
  endpoint:
    path: /v2/users/:identifier
    method: PATCH
    data_selector: result
    params: {}
- name: delete_user
  endpoint:
    path: /v2/users/:identifier
    method: DELETE
    data_selector: result
    params: {}
- name: list_users
  endpoint:
    path: /v2/users
    method: GET
    data_selector: data
    params:
      limit: 100
      offset: 0
      sort: username
      order: asc
- name: create_maintenance
  endpoint:
    path: /v1/maintenance
    method: POST
- name: get_maintenance
  endpoint:
    path: /v1/maintenance/:maintenanceId
    method: GET
- name: update_maintenance
  endpoint:
    path: /v1/maintenance/:maintenanceId
    method: PUT
- name: delete_maintenance
  endpoint:
    path: /v1/maintenance/:maintenanceId
    method: DELETE
- name: list_maintenance
  endpoint:
    path: /v1/maintenance
    method: GET
- name: cancel_maintenance
  endpoint:
    path: /v1/maintenance/:maintenanceId/cancel
    method: POST
- name: change_maintenance_end_date
  endpoint:
    path: /v1/maintenance/:maintenanceId/change-end-date
    method: POST
- name: user_escalations
  endpoint:
    path: /v2/users/:identifier/escalations
    method: GET
    data_selector: data
    params: {}
- name: user_teams
  endpoint:
    path: /v2/users/:identifier/teams
    method: GET
    data_selector: data
    params: {}
- name: user_forwarding_rules
  endpoint:
    path: /v2/users/:identifier/forwarding-rules
    method: GET
    data_selector: data
    params: {}
- name: user_schedules
  endpoint:
    path: /v2/users/:identifier/schedules
    method: GET
    data_selector: data
    params: {}
- name: saved_search
  endpoint:
    path: /v2/users/saved-searches/:identifier
    method: GET
    data_selector: data
    params: {}
- name: list_saved_searches
  endpoint:
    path: /v2/users/saved-searches
    method: GET
    data_selector: data
    params: {}
- name: delete_saved_search
  endpoint:
    path: /v1/incidents/saved-searches/:identifier
    method: DELETE
    data_selector: result
    params: {}
- name: account_info
  endpoint:
    path: /v2/account
    method: GET
    data_selector: data
- name: create_custom_user_role
  endpoint:
    path: /v2/roles
    method: POST
    data_selector: result
- name: get_custom_user_role
  endpoint:
    path: /v2/roles/:identifier
    method: GET
    data_selector: data
- name: update_custom_user_role
  endpoint:
    path: /v2/roles/:identifier
    method: PUT
    data_selector: result
- name: delete_custom_user_role
  endpoint:
    path: /v2/roles/:identifier
    method: DELETE
    data_selector: result
- name: list_custom_user_roles
  endpoint:
    path: /v2/roles
    method: GET
    data_selector: data
- name: create_user
  endpoint:
    path: /v2/users
    method: POST
- name: get_user
  endpoint:
    path: /v2/users/:identifier
    method: GET
- name: update_user
  endpoint:
    path: /v2/users/:identifier
    method: PATCH
- name: delete_user
  endpoint:
    path: /v2/users/:identifier
    method: DELETE
- name: list_users
  endpoint:
    path: /v2/users
    method: GET
- name: create_contact
  endpoint:
    path: /v2/users/:userIdentifier/contacts
    method: POST
- name: get_contact
  endpoint:
    path: /v2/users/:userIdentifier/contacts/:contactId
    method: GET
- name: update_contact
  endpoint:
    path: /v2/users/:userIdentifier/contacts/:contactId
    method: PATCH
- name: delete_contact
  endpoint:
    path: /v2/users/:userIdentifier/contacts/:contactId
    method: DELETE
- name: list_contacts
  endpoint:
    path: /v2/users/:userIdentifier/contacts
    method: GET
- name: enable_contact
  endpoint:
    path: /v2/users/:userIdentifier/contacts/:contactId/enable
    method: POST
- name: disable_contact
  endpoint:
    path: /v2/users/:userIdentifier/contacts/:contactId/disable
    method: POST
- name: user_escalations
  endpoint:
    path: /v2/users/:identifier/escalations
    method: GET
- name: user_teams
  endpoint:
    path: /v2/users/:identifier/teams
    method: GET
- name: user_forwarding_rules
  endpoint:
    path: /v2/users/:identifier/forwarding-rules
    method: GET
- name: user_schedules
  endpoint:
    path: /v2/users/:identifier/schedules
    method: GET
- name: saved_search
  endpoint:
    path: /v2/users/saved-searches/:identifier
    method: GET
- name: list_saved_searches
  endpoint:
    path: /v2/users/saved-searches
    method: GET
- name: delete_saved_search
  endpoint:
    path: /v1/incidents/saved-searches/:identifier
    method: DELETE
- name: create_notification_rule
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules
    method: POST
    data_selector: data
- name: get_notification_rule
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId
    method: GET
    data_selector: data
- name: update_notification_rule
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId
    method: PATCH
    data_selector: data
- name: delete_notification_rule
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId
    method: DELETE
    data_selector: result
- name: Create Custom User Role
  endpoint:
    path: /v2/roles
    method: POST
- name: Get Custom User Role
  endpoint:
    path: /v2/roles/:identifier
    method: GET
- name: Update Custom User Role
  endpoint:
    path: /v2/roles/:identifier
    method: PUT
- name: Delete Custom User Role
  endpoint:
    path: /v2/roles/:identifier
    method: DELETE
- name: List Custom User Roles
  endpoint:
    path: /v2/roles
    method: GET
- name: list_notification_rule
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules
    method: GET
    data_selector: data
- name: enable_notification_rule
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/enable
    method: POST
- name: disable_notification_rule
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/disable
    method: POST
- name: copy_notification_rules
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/copy-to
    method: PATCH
- name: create_contact
  endpoint:
    path: /v2/users/:userIdentifier/contacts
    method: POST
- name: get_contact
  endpoint:
    path: /v2/users/:userIdentifier/contacts/:contactId
    method: GET
- name: update_contact
  endpoint:
    path: /v2/users/:userIdentifier/contacts/:contactId
    method: PATCH
- name: delete_contact
  endpoint:
    path: /v2/users/:userIdentifier/contacts/:contactId
    method: DELETE
- name: list_contacts
  endpoint:
    path: /v2/users/:userIdentifier/contacts
    method: GET
- name: enable_contact
  endpoint:
    path: /v2/users/:userIdentifier/contacts/:contactId/enable
    method: POST
- name: disable_contact
  endpoint:
    path: /v2/users/:userIdentifier/contacts/:contactId/disable
    method: POST
- name: Create Notification Rule Step
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps
    method: POST
- name: Get Notification Rule Step
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps/:stepId
    method: GET
- name: Update Notification Rule Step (Partial)
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps/:stepId
    method: PATCH
- name: Delete Notification Rule Step
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps/:stepId
    method: DELETE
- name: List Notification Rule Step
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps
    method: GET
- name: Enable Notification Rule Step
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps/:stepId/enable
    method: POST
- name: Disable Notification Rule Step
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps/:stepId/disable
    method: POST
- name: contact
  endpoint:
    path: /docs/notification-rule-api
    method: GET
    data_selector: contact
    params: {}
- name: create_notification_rule
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules
    method: POST
- name: get_notification_rule
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId
    method: GET
- name: update_notification_rule
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId
    method: PATCH
- name: delete_notification_rule
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId
    method: DELETE
- name: create_team
  endpoint:
    path: /v2/teams
    method: POST
- name: get_team
  endpoint:
    path: /v2/teams/:identifier
    method: GET
- name: update_team
  endpoint:
    path: /v2/teams/:teamId
    method: PATCH
- name: delete_team
  endpoint:
    path: /v2/teams/:identifier
    method: DELETE
- name: list_teams
  endpoint:
    path: /v2/teams
    method: GET
- name: list_team_logs
  endpoint:
    path: /v2/teams/:identifier/logs
    method: GET
- name: list_notification_rules
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules
    method: GET
    data_selector: data
    params: {}
- name: enable_notification_rule
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/enable
    method: POST
    data_selector: result
    params: {}
- name: disable_notification_rule
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/disable
    method: POST
    data_selector: result
    params: {}
- name: copy_notification_rules
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/copy-to
    method: POST
    data_selector: result
    params: {}
- name: add_team_member
  endpoint:
    path: /v2/teams/:teamIdentifier/members
    method: POST
- name: remove_team_member
  endpoint:
    path: /v2/teams/:teamIdentifier/members/:memberIdentifier
    method: DELETE
- name: Create Notification Rule Step
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps
    method: POST
- name: Get Notification Rule Step
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps/:stepId
    method: GET
- name: Update Notification Rule Step
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps/:stepId
    method: PATCH
- name: Delete Notification Rule Step
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps/:stepId
    method: DELETE
- name: List Notification Rule Step
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps
    method: GET
- name: Enable Notification Rule Step
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps/:stepId/enable
    method: POST
- name: Disable Notification Rule Step
  endpoint:
    path: /v2/users/:userIdentifier/notification-rules/:ruleId/steps/:stepId/disable
    method: POST
- name: Create Team Role
  endpoint:
    path: /v2/teams/:teamIdentifier/roles
    method: POST
- name: Get Team Role
  endpoint:
    path: /v2/teams/:teamIdentifier/roles/:identifier
    method: GET
- name: Update Team Role
  endpoint:
    path: /v2/teams/:teamIdentifier/roles/:identifier
    method: PATCH
- name: Delete Team Role
  endpoint:
    path: /v2/teams/:teamIdentifier/roles/:identifier
    method: DELETE
- name: List Team Roles
  endpoint:
    path: /v2/teams/:teamIdentifier/roles
    method: GET
- name: contact
  endpoint:
    path: /docs/notification-rule-api
    method: GET
    data_selector: contact
    params: {}
- name: create_team
  endpoint:
    path: /v2/teams
    method: POST
    data_selector: result
- name: get_team
  endpoint:
    path: /v2/teams/:identifier
    method: GET
    data_selector: data
- name: update_team
  endpoint:
    path: /v2/teams/:teamId
    method: PATCH
    data_selector: result
- name: delete_team
  endpoint:
    path: /v2/teams/:identifier
    method: DELETE
    data_selector: result
- name: list_teams
  endpoint:
    path: /v2/teams
    method: GET
    data_selector: data
- name: list_team_logs
  endpoint:
    path: /v2/teams/:identifier/logs
    method: GET
    data_selector: data
- name: create_team_routing_rule
  endpoint:
    path: /v2/teams/:teamIdentifier/routing-rules
    method: POST
    data_selector: data
    params: {}
- name: get_team_routing_rule
  endpoint:
    path: /v2/teams/:teamIdentifier/routing-rules/:id
    method: GET
    data_selector: data
    params: {}
- name: update_team_routing_rule
  endpoint:
    path: /v2/teams/:teamIdentifier/routing-rules/:id
    method: PATCH
    data_selector: data
    params: {}
- name: delete_team_routing_rule
  endpoint:
    path: /v2/teams/:teamIdentifier/routing-rules/:id
    method: DELETE
    data_selector: data
    params: {}
- name: add_team_member
  endpoint:
    path: /v2/teams/:teamIdentifier/members
    method: POST
    data_selector: result
    params: {}
- name: remove_team_member
  endpoint:
    path: /v2/teams/:teamIdentifier/members/:memberIdentifier
    method: DELETE
    data_selector: result
    params: {}
- name: list_team_routing_rules
  endpoint:
    path: /v2/teams/:teamIdentifier/routing-rules
    method: GET
    data_selector: data
    params:
      teamIdentifierType: id
- name: change_team_routing_rule_order
  endpoint:
    path: /v2/teams/:teamIdentifier/routing-rules/:id/change-order
    method: POST
    data_selector: result
    params:
      teamIdentifierType: id
- name: create_team_role
  endpoint:
    path: /v2/teams/:teamIdentifier/roles
    method: POST
- name: get_team_role
  endpoint:
    path: /v2/teams/:teamIdentifier/roles/:identifier
    method: GET
- name: update_team_role
  endpoint:
    path: /v2/teams/:teamIdentifier/roles/:identifier
    method: PATCH
- name: delete_team_role
  endpoint:
    path: /v2/teams/:teamIdentifier/roles/:identifier
    method: DELETE
- name: list_team_roles
  endpoint:
    path: /v2/teams/:teamIdentifier/roles
    method: GET
- name: create_escalation
  endpoint:
    path: /v2/escalations
    method: POST
    data_selector: data
- name: get_escalation
  endpoint:
    path: /v2/escalations/:identifier
    method: GET
    data_selector: data
- name: update_escalation
  endpoint:
    path: /v2/escalations/:identifier
    method: PATCH
    data_selector: data
- name: delete_escalation
  endpoint:
    path: /v2/escalations/:identifier
    method: DELETE
    data_selector: data
- name: list_escalations
  endpoint:
    path: /v2/escalations
    method: GET
    data_selector: data
- name: Create Team Routing Rule
  endpoint:
    path: /v2/teams/:teamIdentifier/routing-rules
    method: POST
- name: Get Team Routing Rule
  endpoint:
    path: /v2/teams/:teamIdentifier/routing-rules/:id
    method: GET
- name: Update Team Routing Rule
  endpoint:
    path: /v2/teams/:teamIdentifier/routing-rules/:id
    method: PATCH
- name: Delete Team Routing Rule
  endpoint:
    path: /v2/teams/:teamIdentifier/routing-rules/:id
    method: DELETE
- name: get_on_calls
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/on-calls
    method: GET
    data_selector: data.onCallParticipants
- name: get_next_on_calls
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/next-on-calls
    method: GET
    data_selector: data.nextOnCallRecipients
- name: export_on_call_user
  endpoint:
    path: /v2/schedules/on-calls/:identifier.ics
    method: GET
    data_selector: ''
- name: team_routing_rules
  endpoint:
    path: /v2/teams/:teamIdentifier/routing-rules
    method: GET
- name: change_team_routing_rule_order
  endpoint:
    path: /v2/teams/:teamIdentifier/routing-rules/:id/change-order
    method: POST
- name: create_forwarding_rule
  endpoint:
    path: /v2/forwarding-rules
    method: POST
- name: get_forwarding_rule
  endpoint:
    path: /v2/forwarding-rules/:identifier
    method: GET
- name: update_forwarding_rule
  endpoint:
    path: /v2/forwarding-rules/:identifier
    method: PUT
- name: delete_forwarding_rule
  endpoint:
    path: /v2/forwarding-rules/:identifier
    method: DELETE
- name: list_forwarding_rules
  endpoint:
    path: /v2/forwarding-rules
    method: GET
- name: create_escalation
  endpoint:
    path: /v2/escalations
    method: POST
- name: get_escalation
  endpoint:
    path: /v2/escalations/:identifier
    method: GET
- name: update_escalation
  endpoint:
    path: /v2/escalations/:identifier
    method: PATCH
- name: delete_escalation
  endpoint:
    path: /v2/escalations/:identifier
    method: DELETE
- name: list_escalations
  endpoint:
    path: /v2/escalations
    method: GET
- name: escalation_repeat
  endpoint:
    path: /escalation/repeat
    method: POST
    data_selector: escalationRepeatRules
    params: {}
- name: create_service
  endpoint:
    path: /v1/services
    method: POST
- name: update_service
  endpoint:
    path: /v1/services/:id
    method: PATCH
- name: delete_service
  endpoint:
    path: /v1/services/:id
    method: DELETE
- name: get_service
  endpoint:
    path: /v1/services/:id
    method: GET
- name: list_services
  endpoint:
    path: /v1/services/
    method: GET
- name: incident_rule
  endpoint:
    path: /v1/services/:serviceId/incident-rules
    method: GET
    data_selector: data
    params: {}
- name: get_on_calls
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/on-calls
    method: GET
    data_selector: data.onCallParticipants
- name: list_on_calls
  endpoint:
    path: /v2/schedules/on-calls
    method: GET
    data_selector: data
- name: get_next_on_calls
  endpoint:
    path: /v2/schedules/:scheduleIdentifier/next-on-calls
    method: GET
    data_selector: data.nextOnCallRecipients
- name: export_on_call_user
  endpoint:
    path: /v2/schedules/on-calls/:identifier.ics
    method: GET
- name: incident_templates
  endpoint:
    path: /v1/services/:serviceId/incident-templates
    method: GET
    data_selector: data
    params: {}
- name: create_incident_template
  endpoint:
    path: /v1/services/:serviceId/incident-templates
    method: POST
    data_selector: data
    params: {}
- name: update_incident_template
  endpoint:
    path: /v1/services/:serviceId/incident-templates/:incidentTemplateId
    method: PUT
    data_selector: data
    params: {}
- name: delete_incident_template
  endpoint:
    path: /v1/services/:serviceId/incident-templates/:incidentTemplateId
    method: DELETE
    data_selector: data
    params: {}
- name: create_forwarding_rule
  endpoint:
    path: /v2/forwarding-rules
    method: POST
    data_selector: data
- name: get_forwarding_rule
  endpoint:
    path: /v2/forwarding-rules/:identifier
    method: GET
    data_selector: data
- name: update_forwarding_rule
  endpoint:
    path: /v2/forwarding-rules/:identifier
    method: PUT
    data_selector: data
- name: delete_forwarding_rule
  endpoint:
    path: /v2/forwarding-rules/:identifier
    method: DELETE
- name: list_forwarding_rules
  endpoint:
    path: /v2/forwarding-rules
    method: GET
    data_selector: data
- name: incident_templates
  endpoint:
    path: /v1/incident-templates
    method: GET
- name: create_incident_template
  endpoint:
    path: /v1/incident-templates
    method: POST
- name: update_incident_template
  endpoint:
    path: /v1/incident-templates/:incidentTemplateId
    method: PUT
- name: delete_incident_template
  endpoint:
    path: /v1/incident-templates/:incidentTemplateId
    method: DELETE
- name: Update Audience Template
  endpoint:
    path: /v1/services/:serviceId/audience-templates
    method: PATCH
- name: Get Audience Template
  endpoint:
    path: /v1/services/:serviceId/audience-templates
    method: GET
- name: services
  endpoint:
    path: /v1/services
    method: GET
    data_selector: data
    params:
      limit: 20
      offset: 0
- name: create_service
  endpoint:
    path: /v1/services
    method: POST
    data_selector: data
- name: update_service
  endpoint:
    path: /v1/services/:id
    method: PATCH
    data_selector: data
- name: delete_service
  endpoint:
    path: /v1/services/:id
    method: DELETE
- name: get_service
  endpoint:
    path: /v1/services/:id
    method: GET
    data_selector: data
- name: list_log_files
  endpoint:
    path: /v2/logs/list/:marker
    method: GET
    data_selector: data
    params:
      limit: '50'
- name: download_log_file
  endpoint:
    path: /v2/logs/download/:filename
    method: GET
    data_selector: null
    params: {}
- name: Create Incident Rule
  endpoint:
    path: /v1/services/:serviceId/incident-rules
    method: POST
- name: Update Incident Rule
  endpoint:
    path: /v1/services/:serviceId/incident-rules/:incidentRuleId
    method: PUT
- name: Delete Incident Rule
  endpoint:
    path: /v1/services/:serviceId/incident-rules/:incidentRuleId
    method: DELETE
- name: Get Incident Rules
  endpoint:
    path: /v1/services/:serviceId/incident-rules
    method: GET
- name: create_action_channel
  endpoint:
    path: /v1/actions/channels
    method: POST
- name: update_action_channel
  endpoint:
    path: /v1/actions/channels/:channelId
    method: PATCH
- name: delete_action_channel
  endpoint:
    path: /v1/actions/channels/:channelId
    method: DELETE
- name: get_action_channel
  endpoint:
    path: /v1/actions/channels/:channelId
    method: GET
- name: list_action_channels
  endpoint:
    path: /v1/actions/channels
    method: GET
- name: create_action
  endpoint:
    path: /v1/actions/actions
    method: POST
- name: update_action
  endpoint:
    path: /v1/actions/actions/:actionName
    method: PATCH
- name: create_incident_template
  endpoint:
    path: /v1/services/:serviceId/incident-templates
    method: POST
- name: update_incident_template
  endpoint:
    path: /v1/services/:serviceId/incident-templates/:incidentTemplateId
    method: PUT
- name: delete_incident_template
  endpoint:
    path: /v1/services/:serviceId/incident-templates/:incident-templates
    method: DELETE
- name: get_incident_templates
  endpoint:
    path: /v1/services/:serviceId/incident-templates
    method: GET
- name: delete_action
  endpoint:
    path: /v1/actions/actions/:actionName
    method: DELETE
    data_selector: result
    params:
      teamId: 'true'
- name: get_action
  endpoint:
    path: /v1/actions/actions/:actionName
    method: GET
    data_selector: data
    params:
      teamId: 'true'
- name: list_action
  endpoint:
    path: /v1/actions/actions
    method: GET
    data_selector: data
    params:
      teamId: 'true'
- name: execute_action
  endpoint:
    path: /v1/actions/actions/executions/:actionName
    method: POST
    data_selector: data
- name: get_execution_request_status
  endpoint:
    path: /v1/actions/actions/executions/:requestId
    method: GET
    data_selector: data
- name: incident_templates
  endpoint:
    path: /v1/incident-templates
    method: GET
    data_selector: data.incidentTemplates
- name: create_incident_template
  endpoint:
    path: /v1/incident-templates
    method: POST
- name: update_incident_template
  endpoint:
    path: /v1/incident-templates/:incidentTemplateId
    method: PUT
- name: delete_incident_template
  endpoint:
    path: /v1/incident-templates/:incidentTemplateId
    method: DELETE
- name: update_audience_template
  endpoint:
    path: /v1/services/:serviceId/audience-templates
    method: PATCH
- name: get_audience_template
  endpoint:
    path: /v1/services/:serviceId/audience-templates
    method: GET
- name: Get Request Status
  endpoint:
    path: /v2/deployments/requests/:requestId
    method: GET
- name: Get Deployment
  endpoint:
    path: /v2/deployments/:identifier
    method: GET
- name: Create Deployment
  endpoint:
    path: /v2/deployments/
    method: POST
- name: Update Deployment Status
  endpoint:
    path: /v2/deployments/:identifier/updateState
    method: PATCH
- name: update_deployment
  endpoint:
    path: /v2/deployments/:identifier/update
    method: PATCH
- name: search_deployments
  endpoint:
    path: /v2/deployments/search
    method: GET
- name: list_log_files
  endpoint:
    path: /v2/logs/list/:marker
    method: GET
    data_selector: data
    params:
      limit: '50'
- name: generate_log_file_download_link
  endpoint:
    path: /v2/logs/download/:filename
    method: GET
    data_selector: ''
- name: create_action_channel
  endpoint:
    path: /v1/actions/channels
    method: POST
    data_selector: data
    params: {}
- name: update_action_channel
  endpoint:
    path: /v1/actions/channels/:channelId
    method: PATCH
    data_selector: data
    params:
      teamId: 'true'
- name: delete_action_channel
  endpoint:
    path: /v1/actions/channels/:channelId
    method: DELETE
    data_selector: data
    params:
      teamId: 'true'
- name: get_action_channel
  endpoint:
    path: /v1/actions/channels/:channelId
    method: GET
    data_selector: data
    params:
      teamId: 'true'
- name: list_action_channels
  endpoint:
    path: /v1/actions/channels
    method: GET
    data_selector: data
    params:
      teamId: 'true'
- name: create_action
  endpoint:
    path: /v1/actions/actions
    method: POST
    data_selector: data
    params:
      teamId: 'true'
- name: update_action
  endpoint:
    path: /v1/actions/actions/:actionName
    method: PUT
    data_selector: data
    params:
      teamId: 'true'
- name: get_postmortem
  endpoint:
    path: /v2/postmortem/:postmortemId
    method: GET
- name: create_postmortem
  endpoint:
    path: /v2/postmortem
    method: POST
- name: delete_postmortem
  endpoint:
    path: /v2/postmortem/:postmortemId
    method: DELETE
- name: update_postmortem
  endpoint:
    path: /v2/postmortem/:postmortemId
    method: PUT
- name: update_postmortem_status
  endpoint:
    path: /v2/postmortem/:postmortemId/status
    method: PUT
- name: update_postmortem_owner
  endpoint:
    path: /v2/postmortem/:postmortemId/owner
    method: PUT
- name: update_postmortem_severity
  endpoint:
    path: /v2/postmortem/:postmortemId/severity
    method: PUT
- name: update_postmortem_title
  endpoint:
    path: /v2/postmortem/:postmortemId/title
    method: PUT
- name: update_postmortem_jira_issues
  endpoint:
    path: /v2/postmortem/:postmortemId/jira-issues
    method: PUT
- name: update_postmortem_related_incidents
  endpoint:
    path: /v2/postmortem/:postmortemId/related-incidents
    method: PUT
- name: delete_action
  endpoint:
    path: /v1/actions/actions/:actionName
    method: DELETE
    params:
      teamId: 'true'
- name: get_action
  endpoint:
    path: /v1/actions/actions/:actionName
    method: GET
    params:
      teamId: 'true'
- name: list_action
  endpoint:
    path: /v1/actions/actions
    method: GET
    params:
      teamId: 'true'
- name: execute_action
  endpoint:
    path: /v1/actions/actions/executions/:actionName
    method: POST
- name: get_execution_request_status
  endpoint:
    path: /v1/actions/actions/executions/:requestId
    method: GET
- name: update_postmortem_affected_services
  endpoint:
    path: /v2/postmortem/:postmortemId/affected-services
    method: PUT
    data_selector: affectedServices
    params: {}
- name: update_postmortem_responder_teams
  endpoint:
    path: /v2/postmortem/:postmortemId/responder-teams
    method: PUT
    data_selector: responderTeams
    params: {}
- name: update_postmortem_responder_users
  endpoint:
    path: /v2/postmortem/:postmortemId/responder-users
    method: PUT
    data_selector: responderUsers
    params: {}
- name: update_postmortem_content
  endpoint:
    path: /v2/postmortem/:postmortemId/content
    method: PUT
    data_selector: content
    params: {}
- name: update_postmortem_executive_summary
  endpoint:
    path: /v2/postmortem/:postmortemId/executive-summary
    method: PUT
    data_selector: executiveSummary
    params: {}
- name: alert
  endpoint:
    path: /alert
    method: GET
- name: Get Request Status
  endpoint:
    path: /v2/deployments/requests/:requestId
    method: GET
- name: Get Deployment
  endpoint:
    path: /v2/deployments/:identifier
    method: GET
- name: Create Deployment
  endpoint:
    path: /v2/deployments/
    method: POST
- name: Update Deployment Status
  endpoint:
    path: /v2/deployments/:identifier/updateState
    method: PATCH
- name: update_deployment
  endpoint:
    path: /:identifier/update
    method: PATCH
- name: search_deployments
  endpoint:
    path: /search
    method: GET
- name: get_postmortem
  endpoint:
    path: /v2/postmortem/:postmortemId
    method: GET
    data_selector: data
- name: create_postmortem
  endpoint:
    path: /v2/postmortem
    method: POST
    data_selector: data
- name: delete_postmortem
  endpoint:
    path: /v2/postmortem/:postmortemId
    method: DELETE
    data_selector: data
- name: update_postmortem
  endpoint:
    path: /v2/postmortem/:postmortemId
    method: PUT
    data_selector: data
- name: remove_tags
  endpoint:
    path: /alertV2/deleteTags
    method: POST
    data_selector: response
- name: add_team
  endpoint:
    path: /alertV2/addTeam
    method: POST
    data_selector: response
- name: add_details
  endpoint:
    path: /alertV2/addDetails
    method: POST
    data_selector: response
- name: remove_details
  endpoint:
    path: /alertV2/deleteDetails
    method: POST
    data_selector: response
- name: execute_alert_action
  endpoint:
    path: /alertV2/executeAction
    method: POST
    data_selector: response
- name: list_recipients
  endpoint:
    path: /alertV2/listRecipients
    method: GET
    data_selector: response
- name: list_logs
  endpoint:
    path: /alertV2/listLogs
    method: POST
    data_selector: response
- name: list_notes
  endpoint:
    path: /alertV2/listNotes
    method: POST
    data_selector: response
- name: get_request_status
  endpoint:
    path: /alertV2/getRequestStatus
    method: GET
    data_selector: response
- name: add_saved_search
  endpoint:
    path: /alertV2/addSavedSearches
    method: POST
    data_selector: response
- name: get_saved_search
  endpoint:
    path: /alertV2/getSavedSearch
    method: GET
    data_selector: response
- name: remove_saved_search
  endpoint:
    path: /alertV2/listSavedSearches
    method: GET
    data_selector: response
- name: add_heartbeat
  endpoint:
    path: /heartbeat/add
    method: POST
    data_selector: response
- name: ping_heartbeat
  endpoint:
    path: /heartbeat/ping
    method: POST
    data_selector: response
- name: copy_notification_rules
  endpoint:
    path: /notification/copyRules
    method: POST
    data_selector: response
- name: update_postmortem_affected_services
  endpoint:
    path: /v2/postmortem/:postmortemId/affected-services
    method: PUT
- name: update_postmortem_responder_teams
  endpoint:
    path: /v2/postmortem/:postmortemId/responder-teams
    method: PUT
- name: update_postmortem_responder_users
  endpoint:
    path: /v2/postmortem/:postmortemId/responder-users
    method: PUT
- name: update_postmortem_content
  endpoint:
    path: /v2/postmortem/:postmortemId/content
    method: PUT
- name: update_postmortem_executive_summary
  endpoint:
    path: /v2/postmortem/:postmortemId/executive-summary
    method: PUT
- name: alert
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
    params:
      limit: '20'
- name: create_alert
  endpoint:
    path: /v1/alerts
    method: POST
    data_selector: alert
    params: {}
- name: close_alert
  endpoint:
    path: /v1/alerts
    method: DELETE
    data_selector: alert
    params: {}
- name: delete_alert
  endpoint:
    path: /v1/alerts
    method: DELETE
    data_selector: alert
    params: {}
- name: get_alert
  endpoint:
    path: /v1/alerts/{id}
    method: GET
    data_selector: alert
    params: {}
- name: list_alerts
  endpoint:
    path: /v1/alerts
    method: GET
    data_selector: alerts
    params:
      limit: 20
- name: count_alerts
  endpoint:
    path: /v1/alerts/count
    method: GET
    data_selector: count
    params: {}
- name: list_alert_logs
  endpoint:
    path: /v1/alerts/{id}/logs
    method: GET
    data_selector: logs
    params:
      limit: 100
- name: list_alert_notes
  endpoint:
    path: /v1/alerts/{id}/notes
    method: GET
    data_selector: notes
    params:
      limit: 100
- name: list_alert_recipients
  endpoint:
    path: /v1/alerts/{id}/recipients
    method: GET
    data_selector: recipients
    params: {}
- name: attach
  endpoint:
    path: /alerts/attach
    method: POST
    data_selector: response
    params: {}
- name: escalate_to_next
  endpoint:
    path: /alerts/escalateToNext
    method: POST
    data_selector: response
    params: {}
- name: alert
  endpoint:
    path: /v1/alert
    method: GET
- name: incident
  endpoint:
    path: /v1/incident
    method: GET
- name: user
  endpoint:
    path: /v1/user
    method: GET
- name: remove_tags
  endpoint:
    path: /alertV2/deleteTags
    method: POST
    data_selector: response
    params: {}
- name: add_team
  endpoint:
    path: /alertV2/addTeam
    method: POST
    data_selector: response
    params: {}
- name: add_details
  endpoint:
    path: /alertV2/addDetails
    method: POST
    data_selector: response
    params: {}
- name: remove_details
  endpoint:
    path: /alertV2/deleteDetails
    method: POST
    data_selector: response
    params: {}
- name: execute_alert_action
  endpoint:
    path: /alertV2/executeCustomAction
    method: POST
    data_selector: response
    params: {}
- name: list_recipients
  endpoint:
    path: /alertV2/listRecipients
    method: GET
    data_selector: response
    params: {}
- name: list_logs
  endpoint:
    path: /alertV2/listLogs
    method: POST
    data_selector: response
    params: {}
- name: list_notes
  endpoint:
    path: /alertV2/listNotes
    method: POST
    data_selector: response
    params: {}
- name: get_request_status
  endpoint:
    path: /alertV2/getRequestStatus
    method: GET
    data_selector: response
    params: {}
- name: add_saved_search
  endpoint:
    path: /alertV2/addSavedSearches
    method: POST
    data_selector: response
    params: {}
- name: get_saved_search
  endpoint:
    path: /alertV2/getSavedSearch
    method: GET
    data_selector: response
    params: {}
- name: remove_saved_search
  endpoint:
    path: /alertV2/listSavedSearches
    method: GET
    data_selector: response
    params: {}
- name: add_heartbeat
  endpoint:
    path: /heartbeat/add
    method: POST
    data_selector: response
    params: {}
- name: ping_heartbeat
  endpoint:
    path: /heartbeat/ping
    method: POST
    data_selector: response
    params: {}
- name: copy_notification_rules
  endpoint:
    path: /notificationRules/copy
    method: POST
    data_selector: response
    params: {}
- name: alert
  endpoint:
    path: /v2/alerts
    method: POST
    data_selector: createResult
    params: {}
- name: close_alert
  endpoint:
    path: /v2/alerts/close
    method: POST
    data_selector: closeResult
    params: {}
- name: get_alert
  endpoint:
    path: /v2/alerts/{identifier}
    method: GET
    data_selector: getResult
    params: {}
- name: alerts
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
    params: {}
- name: attach
  endpoint:
    path: /alerts/attach
    method: POST
    data_selector: response
    params: {}
- name: escalate_to_next
  endpoint:
    path: /alerts/escalateToNext
    method: POST
    data_selector: response
    params: {}
- name: incident
  endpoint:
    path: /v2/incidents
    method: POST
    data_selector: incident
    params: {}
- name: integration
  endpoint:
    path: /v2/integrations
    method: POST
    data_selector: integration
    params: {}
- name: heartbeat
  endpoint:
    path: /v2/heartbeats
    method: POST
    data_selector: heartbeat
    params: {}
- name: policy
  endpoint:
    path: /v2/policies
    method: POST
    data_selector: policy
    params: {}
- name: maintenance
  endpoint:
    path: /v2/maintenance
    method: POST
    data_selector: maintenance
    params: {}
- name: account
  endpoint:
    path: /v2/account
    method: GET
    data_selector: account
    params: {}
- name: user
  endpoint:
    path: /v2/users
    method: POST
    data_selector: user
    params: {}
- name: contact
  endpoint:
    path: /v2/contacts
    method: POST
    data_selector: contact
    params: {}
- name: notification_rule
  endpoint:
    path: /v2/notification-rules
    method: POST
    data_selector: notification_rule
    params: {}
- name: team
  endpoint:
    path: /v2/teams
    method: POST
    data_selector: team
    params: {}
- name: sdk
  endpoint:
    path: /opsgenie/sdk
    method: GET
- name: alert
  endpoint:
    path: /v2/alerts
    method: POST
    data_selector: alert
    params: {}
- name: incident
  endpoint:
    path: /v2/incidents
    method: POST
    data_selector: incident
    params: {}
- name: team_member
  endpoint:
    path: /v2/team/member
    method: POST
    data_selector: result
    params: {}
- name: team_role
  endpoint:
    path: /v2/team/role
    method: POST
    data_selector: result
    params: {}
- name: routing_rule
  endpoint:
    path: /v2/routing/rule
    method: POST
    data_selector: result
    params: {}
- name: schedule
  endpoint:
    path: /v2/schedule
    method: POST
    data_selector: result
    params: {}
- name: escalation
  endpoint:
    path: /v2/escalation
    method: POST
    data_selector: result
    params: {}
- name: log_file_download_link
  endpoint:
    path: /generateLogFileDownloadLink
    method: POST
    data_selector: logsResult
- name: alert
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
- name: alert_logs
  endpoint:
    path: /v2/alerts/{alert_id}/logs
    method: GET
    data_selector: data
- name: alert_notes
  endpoint:
    path: /v2/alerts/{alert_id}/notes
    method: GET
    data_selector: data
- name: incident
  endpoint:
    path: /v2/incidents
    method: POST
    data_selector: createResult
- name: integration
  endpoint:
    path: /v2/integrations
    method: POST
    data_selector: createResult
- name: heartbeat
  endpoint:
    path: /v2/heartbeats
    method: POST
    data_selector: addResult
- name: policy
  endpoint:
    path: /v2/policies
    method: POST
    data_selector: policyResult
- name: maintenance
  endpoint:
    path: /v2/maintenance
    method: POST
    data_selector: maintenanceResult
- name: account
  endpoint:
    path: /v2/account
    method: GET
    data_selector: accountResult
- name: user
  endpoint:
    path: /v2/users
    method: POST
    data_selector: userResult
- name: contact
  endpoint:
    path: /v2/contacts
    method: POST
    data_selector: contactResult
- name: notification_rule
  endpoint:
    path: /v2/notification-rules
    method: POST
    data_selector: ruleResult
- name: team
  endpoint:
    path: /v2/teams
    method: POST
    data_selector: teamResult
- name: teams
  endpoint:
    path: /v2/teams
    method: GET
    data_selector: teams
    params: {}
- name: alert
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
- name: incident
  endpoint:
    path: /v2/incidents
    method: GET
    data_selector: data
- name: generate_log_file_download_link
  endpoint:
    path: /logs/generateLogFileDownloadLink
    method: POST
    data_selector: logsResult
    params: {}
- name: alert
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
- name: alert
  endpoint:
    path: /v2/alerts
    method: POST
    data_selector: data
- name: incident
  endpoint:
    path: /v2/incidents
    method: POST
    data_selector: data
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: teams
    params: {}
- name: alert
  endpoint:
    path: /v2/alerts
    method: POST
    data_selector: response
    params: {}
- name: alert
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
    params: {}
- name: incident
  endpoint:
    path: /v2/incidents
    method: GET
    data_selector: data
    params: {}
- name: alert
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
- name: add_tags
  endpoint:
    path: /v2/alerts/{identifier}/tags
    method: POST
    data_selector: data
- name: remove_tags
  endpoint:
    path: /v2/alerts/{identifier}/tags
    method: DELETE
    data_selector: data
- name: add_details
  endpoint:
    path: /v2/alerts/{identifier}/details
    method: POST
    data_selector: data
- name: remove_details
  endpoint:
    path: /v2/alerts/{identifier}/details
    method: DELETE
    data_selector: data
- name: update_priority
  endpoint:
    path: /v2/alerts/{identifier}/priority
    method: PUT
    data_selector: data
- name: update_message
  endpoint:
    path: /v2/alerts/{identifier}/message
    method: PUT
    data_selector: data
- name: update_description
  endpoint:
    path: /v2/alerts/{identifier}/description
    method: PUT
    data_selector: data
- name: list_recipients
  endpoint:
    path: /v2/alerts/{identifier}/recipients
    method: GET
    data_selector: data
- name: list_logs
  endpoint:
    path: /v2/alerts/{identifier}/logs
    method: GET
    data_selector: data
- name: list_notes
  endpoint:
    path: /v2/alerts/{identifier}/notes
    method: GET
    data_selector: data
- name: create_saved_search
  endpoint:
    path: /v2/saved-searches
    method: POST
    data_selector: data
- name: list_saved_searches
  endpoint:
    path: /v2/saved-searches
    method: GET
    data_selector: data
- name: update_saved_search
  endpoint:
    path: /v2/saved-searches/{identifier}
    method: PUT
    data_selector: data
- name: get_saved_search
  endpoint:
    path: /v2/saved-searches/{identifier}
    method: GET
    data_selector: data
- name: delete_saved_search
  endpoint:
    path: /v2/saved-searches/{identifier}
    method: DELETE
    data_selector: data
- name: add_attachment
  endpoint:
    path: /v2/alerts/{identifier}/attachments
    method: POST
    data_selector: data
- name: get_attachment
  endpoint:
    path: /v2/alerts/{identifier}/attachments/{attachment_id}
    method: GET
    data_selector: data
- name: list_attachments
  endpoint:
    path: /v2/alerts/{identifier}/attachments
    method: GET
    data_selector: data
- name: delete_attachment
  endpoint:
    path: /v2/alerts/{identifier}/attachments/{attachment_id}
    method: DELETE
    data_selector: data
- name: heartbeat
  endpoint:
    path: /v2/heartbeats
    method: GET
    data_selector: data
- name: add_tags
  endpoint:
    path: /alert/addTags
    method: POST
    data_selector: add_tags_response
    params: {}
- name: remove_tags
  endpoint:
    path: /alert/removeTags
    method: POST
    data_selector: remove_tags_response
    params: {}
- name: add_details
  endpoint:
    path: /alert/addDetails
    method: POST
    data_selector: add_details_response
    params: {}
- name: remove_details
  endpoint:
    path: /alert/removeDetails
    method: POST
    data_selector: remove_details_response
    params: {}
- name: update_priority
  endpoint:
    path: /alert/updatePriority
    method: POST
    data_selector: update_priority_response
    params: {}
- name: update_message
  endpoint:
    path: /alert/updateMessage
    method: POST
    data_selector: update_message_response
    params: {}
- name: update_description
  endpoint:
    path: /alert/updateDescription
    method: POST
    data_selector: update_description_response
    params: {}
- name: list_recipients
  endpoint:
    path: /alert/listRecipients
    method: GET
    data_selector: list_recipients_response
    params: {}
- name: list_logs
  endpoint:
    path: /alert/listLogs
    method: GET
    data_selector: list_logs_response
    params: {}
- name: list_notes
  endpoint:
    path: /alert/listNotes
    method: GET
    data_selector: list_notes_response
    params: {}
- name: create_saved_search
  endpoint:
    path: /alert/createSavedSearch
    method: POST
    data_selector: create_saved_search_response
    params: {}
- name: list_saved_searches
  endpoint:
    path: /alert/listSavedSearches
    method: GET
    data_selector: list_saved_searches_response
    params: {}
- name: update_saved_search
  endpoint:
    path: /alert/updateSavedSearch
    method: POST
    data_selector: update_saved_search_response
    params: {}
- name: get_saved_search
  endpoint:
    path: /alert/getSavedSearch
    method: GET
    data_selector: saved_searches_response
    params: {}
- name: delete_saved_search
  endpoint:
    path: /alert/deleteSavedSearch
    method: DELETE
    data_selector: delete_saved_search_response
    params: {}
- name: add_attachment
  endpoint:
    path: /alert/addAttachment
    method: POST
    data_selector: add_attachment_response
    params: {}
- name: get_attachment
  endpoint:
    path: /alert/getAttachment
    method: GET
    data_selector: get_attachment_response
    params: {}
- name: list_attachments
  endpoint:
    path: /alert/listAttachments
    method: GET
    data_selector: list_attachments_response
    params: {}
- name: delete_attachment
  endpoint:
    path: /alert/deleteAttachment
    method: DELETE
    data_selector: delete_attachment_response
    params: {}
- name: incident
  endpoint:
    path: /v2/incident
    method: POST
    data_selector: data
- name: heartbeat
  endpoint:
    path: /v1/heartbeats
    method: POST
    data_selector: response
    params: {}
- name: account_info
  endpoint:
    path: /v2/account
    method: GET
    data_selector: info
- name: incident
  endpoint:
    path: /v1/incidents
    method: GET
    data_selector: incidents
- name: account_info
  endpoint:
    path: /account
    method: GET
    data_selector: info_response
- name: alert
  endpoint:
    path: /v1/alerts
    method: GET
    data_selector: alerts
- name: incident
  endpoint:
    path: /v1/incidents
    method: GET
    data_selector: incidents
- name: alerts
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
    params: {}
- name: acknowledge_alert
  endpoint:
    path: /acknowledge
    method: POST
    data_selector: result
- name: unacknowledge_alert
  endpoint:
    path: /unacknowledge
    method: POST
    data_selector: result
- name: snooze_alert
  endpoint:
    path: /snooze
    method: POST
    data_selector: result
- name: assign_alert
  endpoint:
    path: /assign
    method: POST
    data_selector: result
- name: add_team
  endpoint:
    path: /addTeam
    method: POST
    data_selector: result
- name: add_responder
  endpoint:
    path: /addResponder
    method: POST
    data_selector: result
- name: add_note
  endpoint:
    path: /addNote
    method: POST
    data_selector: result
- name: add_tags
  endpoint:
    path: /addTags
    method: POST
    data_selector: result
- name: remove_tags
  endpoint:
    path: /removeTags
    method: POST
    data_selector: result
- name: add_details
  endpoint:
    path: /addDetails
    method: POST
    data_selector: result
- name: remove_details
  endpoint:
    path: /removeDetails
    method: POST
    data_selector: result
- name: execute_action
  endpoint:
    path: /executeAction
    method: POST
    data_selector: result
- name: attach_file
  endpoint:
    path: /attachFile
    method: POST
    data_selector: result
- name: get_attachment
  endpoint:
    path: /getAttachment
    method: GET
    data_selector: result
- name: download_attachment
  endpoint:
    path: /downloadAttachment
    method: GET
    data_selector: result
- name: list_attachments
  endpoint:
    path: /listAttachments
    method: GET
    data_selector: result
- name: delete_attachment
  endpoint:
    path: /deleteAttachment
    method: DELETE
    data_selector: result
- name: escalate_to_next
  endpoint:
    path: /escalateToNext
    method: POST
    data_selector: result
- name: create_schedule
  endpoint:
    path: /createSchedule
    method: POST
    data_selector: result
- name: get_schedule
  endpoint:
    path: /getSchedule
    method: GET
    data_selector: result
- name: acknowledge_alert
  endpoint:
    path: /acknowledge
    method: POST
    data_selector: alert
- name: unacknowledge_alert
  endpoint:
    path: /unacknowledge
    method: POST
    data_selector: alert
- name: snooze_alert
  endpoint:
    path: /snooze
    method: POST
    data_selector: alert
- name: assign_alert
  endpoint:
    path: /assign
    method: POST
    data_selector: alert
- name: add_team
  endpoint:
    path: /addTeam
    method: POST
    data_selector: alert
- name: add_responder
  endpoint:
    path: /addResponder
    method: POST
    data_selector: alert
- name: add_note
  endpoint:
    path: /addNote
    method: POST
    data_selector: alert
- name: add_tags
  endpoint:
    path: /addTags
    method: POST
    data_selector: alert
- name: remove_tags
  endpoint:
    path: /removeTags
    method: POST
    data_selector: alert
- name: add_details
  endpoint:
    path: /addDetails
    method: POST
    data_selector: alert
- name: remove_details
  endpoint:
    path: /removeDetails
    method: POST
    data_selector: alert
- name: execute_action
  endpoint:
    path: /executeAction
    method: POST
    data_selector: alert
- name: attach_file
  endpoint:
    path: /attachFile
    method: POST
    data_selector: alert
- name: get_attachment
  endpoint:
    path: /getAttachment
    method: GET
    data_selector: attachment
- name: download_attachment
  endpoint:
    path: /downloadAttachment
    method: GET
    data_selector: attachment
- name: list_attachments
  endpoint:
    path: /listAttachments
    method: GET
    data_selector: attachments
- name: delete_attachment
  endpoint:
    path: /deleteAttachment
    method: DELETE
    data_selector: alert
- name: escalate_to_next
  endpoint:
    path: /escalateToNext
    method: POST
    data_selector: alert
- name: create_schedule
  endpoint:
    path: /createSchedule
    method: POST
    data_selector: schedule
- name: get_schedule
  endpoint:
    path: /getSchedule
    method: GET
    data_selector: schedule
- name: listSchedules
  endpoint:
    path: /v1/schedules
    method: GET
    data_selector: schedules
- name: updateSchedule
  endpoint:
    path: /v1/schedules
    method: PUT
    data_selector: schedule
- name: deleteSchedule
  endpoint:
    path: /v1/schedules
    method: DELETE
    data_selector: schedule
- name: getScheduleTimeline
  endpoint:
    path: /v1/schedules/timeline
    method: GET
    data_selector: timeline
- name: createScheduleRotation
  endpoint:
    path: /v1/schedules/rotations
    method: POST
    data_selector: rotation
- name: getScheduleRotation
  endpoint:
    path: /v1/schedules/rotations
    method: GET
    data_selector: rotation
- name: listScheduleRotations
  endpoint:
    path: /v1/schedules/rotations
    method: GET
    data_selector: rotations
- name: createScheduleOverride
  endpoint:
    path: /v1/schedules/overrides
    method: POST
    data_selector: override
- name: getScheduleOverride
  endpoint:
    path: /v1/schedules/overrides
    method: GET
    data_selector: override
- name: listScheduleOverrides
  endpoint:
    path: /v1/schedules/overrides
    method: GET
    data_selector: overrides
- name: listSchedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: schedules
- name: updateSchedule
  endpoint:
    path: /schedules
    method: PUT
    data_selector: schedule
- name: deleteSchedule
  endpoint:
    path: /schedules
    method: DELETE
    data_selector: schedule
- name: getScheduleTimeline
  endpoint:
    path: /schedules/timeline
    method: GET
    data_selector: timeline
- name: createScheduleRotation
  endpoint:
    path: /schedules/rotation
    method: POST
    data_selector: rotation
- name: getScheduleRotation
  endpoint:
    path: /schedules/rotation
    method: GET
    data_selector: rotation
- name: listScheduleRotations
  endpoint:
    path: /schedules/rotations
    method: GET
    data_selector: rotations
- name: createScheduleOverride
  endpoint:
    path: /schedules/overrides
    method: POST
    data_selector: override
- name: listScheduleOverrides
  endpoint:
    path: /schedules/overrides
    method: GET
    data_selector: overrides
- name: enableIntegration
  endpoint:
    path: /integrations/enable
    method: POST
    data_selector: integration
- name: disableIntegration
  endpoint:
    path: /integrations/disable
    method: POST
    data_selector: integration
- name: downloadLogs
  endpoint:
    path: /downloadLogs
    method: GET
    data_selector: logs
    params:
      start: YYYY-MM-DD-HH-mm-ss
      end: YYYY-MM-DD-HH-mm-ss
      path: current directory
- name: createTeam
  endpoint:
    path: /createTeam
    method: POST
    data_selector: team
    params:
      name: team name
      desc: description
      userName: user email
      userId: user id
      role: role name
- name: updateTeam
  endpoint:
    path: /updateTeam
    method: PUT
    data_selector: updatedTeam
    params:
      id: team id
      name: team name
      desc: description
      userName: user email
      userId: user id
      role: role name
- name: getTeam
  endpoint:
    path: /getTeam
    method: GET
    data_selector: teamInfo
    params:
      id: team id
      name: team name
- name: deleteTeam
  endpoint:
    path: /deleteTeam
    method: DELETE
    data_selector: deletedTeam
    params:
      name: team name
      id: team id
- name: addMember
  endpoint:
    path: /addMember
    method: POST
    data_selector: addedMember
    params:
      teamName: team name
      teamId: team id
      userName: user email
      userId: user id
      role: role name
- name: listTeams
  endpoint:
    path: /listTeams
    method: GET
    data_selector: teams
    params: {}
- name: removeMember
  endpoint:
    path: /removeMember
    method: DELETE
    data_selector: removedMember
    params:
      teamName: team name
      teamId: team id
      userId: user id
      userName: user email
- name: createRole
  endpoint:
    path: /createRole
    method: POST
    data_selector: createdRole
    params:
      name: team name
      id: team id
      roleName: role name
      rights: rights list
- name: listRoleRights
  endpoint:
    path: /listRoleRights
    method: GET
    data_selector: roleRights
    params: {}
- name: getRole
  endpoint:
    path: /getRole
    method: GET
    data_selector: roleInfo
    params:
      teamName: team name
      teamId: team id
      roleName: role name
      roleId: role id
- name: deleteRole
  endpoint:
    path: /deleteRole
    method: DELETE
    data_selector: deletedRole
    params:
      teamName: team name
      teamId: team id
      roleName: role name
      roleId: role id
- name: listRoles
  endpoint:
    path: /listRoles
    method: GET
    data_selector: roles
    params:
      name: team name
      id: team id
- name: listRoutingRules
  endpoint:
    path: /listRoutingRules
    method: GET
    data_selector: routingRules
    params:
      name: team name
      id: team id
- name: deleteRoutingRule
  endpoint:
    path: /deleteRoutingRule
    method: DELETE
    data_selector: deletedRoutingRule
    params:
      name: team name
      id: team id
      ruleId: routing rule id
- name: getRoutingRule
  endpoint:
    path: /getRoutingRule
    method: GET
    data_selector: routingRuleInfo
    params:
      teamName: team name
      teamId: team id
      ruleId: routing rule id
- name: listTeamLogs
  endpoint:
    path: /listTeamLogs
    method: GET
    data_selector: teamLogs
    params:
      id: team id
      name: team name
      offset: default is 0
      limit: number of log entries
      order: asc or desc
- name: getOncall
  endpoint:
    path: /getOncall
    method: GET
    data_selector: oncallDetails
    params:
      id: on-call schedule id
      name: on-call schedule name
      flat: boolean
      atTime: time in 2006-01-02T15:04:05+07:00 format
- name: getNextOncall
  endpoint:
    path: /getNextOncall
    method: GET
    data_selector: nextOncallDetails
    params:
      id: on-call schedule id
      name: on-call schedule name
      flat: boolean
      atTime: time in 2006-01-02T15:04:05+07:00 format
- name: exportUserOncalls
  endpoint:
    path: /exportUserOncalls
    method: POST
    data_selector: exportedOncalls
    params:
      userName: user email
      userId: user id
      exportTo: file path
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: versionInfo
    params: {}
- name: createIncident
  endpoint:
    path: /createIncident
    method: POST
    data_selector: incident
    params:
      message: Incident text limited to 130 characters
- name: getIncident
  endpoint:
    path: /getIncident
    method: GET
    data_selector: incident
    params:
      identifier: Id of the Incident whose information we want to get
      identifierType: Type of identifier used to identify incident `tiny`, `id` default
        is `id`
- name: getIncidentList
  endpoint:
    path: /getIncidentList
    method: GET
    data_selector: incidents
    params:
      query: 'Query to fetch incidents required. Example:- `status: open`'
      limit: Page size. Default is 20. Max value for this parameter is 100.
      sortField: createdAt, tinyId, message, status, isSeen, owner default is createdAt
      offset: Start index of the result set (to apply pagination). Minimum value (and
        also default value) is 0
      order: 'asc/desc, default: desc'
- name: addNoteToIncident
  endpoint:
    path: /addNoteToIncident
    method: POST
    data_selector: incident
    params:
      identifier: Id of the Incident to which note needs to be added
      identifierType: Type of identifier used to identify incident `tiny`, `id` default
        is `id`
      note: Note which needs to be added
- name: addIncidentTags
  endpoint:
    path: /addIncidentTags
    method: POST
    data_selector: incident
    params:
      identifier: Id of the Incident to which tags needs to be added
      identifierType: Type of identifier used to identify incident `tiny`, `id` default
        is `id`
      tags: A comma separated list of labels that needs to be added to the incident.
- name: removeIncidentTags
  endpoint:
    path: /removeIncidentTags
    method: POST
    data_selector: incident
    params:
      identifier: Id of the Incident to which tags needs to be removed
      identifierType: Type of identifier used to identify incident `tiny`, `id` default
        is `id`
      tags: A comma separated list of labels that needs to be removed from the incident.
- name: addIncidentDetails
  endpoint:
    path: /addIncidentDetails
    method: POST
    data_selector: incident
    params:
      identifier: Id of the Incident to which details needs to be added
      identifierType: Type of identifier used to identify incident `tiny`, `id` default
        is `id`
      detailKeys: Details are stored in Key/Value pair. List of comma separated keys
        in Details
      detailValues: List of comma separated corresponding values to the keys specified
        in detailKeys
- name: removeIncidentDetails
  endpoint:
    path: /removeIncidentDetails
    method: POST
    data_selector: incident
    params:
      identifier: Id of the Incident to which details needs to be removed
      identifierType: Type of identifier used to identify incident `tiny`, `id` default
        is `id`
      keys: Details are stored in Key/Value pair. List of comma separated keys in
        Details which needs to be removed.
- name: updateIncidentPriority
  endpoint:
    path: /updateIncidentPriority
    method: POST
    data_selector: incident
    params:
      identifier: Id of the Incident whose priority we want to update
      identifierType: Type of identifier used to identify incident `tiny`, `id` default
        is `id`
      priority: 'The priority of alert. Values: `P1`, `P2`, `P3`, `P4`, `P5` default
        is `P3`'
- name: updateIncidentMessage
  endpoint:
    path: /updateIncidentMessage
    method: POST
    data_selector: incident
    params:
      identifier: Id of the Incident whose message we want to update
      identifierType: Type of identifier used to identify incident `tiny`, `id` default
        is `id`
      message: Incident text limited to 130 characters
- name: updateIncidentDescription
  endpoint:
    path: /updateIncidentDescription
    method: POST
    data_selector: incident
    params:
      identifier: Id of the Incident whose description needs to be updated
      identifierType: Type of identifier used to identify incident `tiny`, `id` default
        is `id`
      description: Incident text in long form. Unlike the message field, not limited
        to 130 characters.
- name: closeIncident
  endpoint:
    path: /closeIncident
    method: POST
    data_selector: incident
    params:
      identifier: Id of the Incident to which needs to be closed
      identifierType: Type of identifier used to identify incident `tiny`, `id` default
        is `id`
      note: Note which needs to be added
- name: deleteIncident
  endpoint:
    path: /deleteIncident
    method: DELETE
    data_selector: incident
    params:
      identifier: Id of the Incident which needs to be deleted
      identifierType: Type of identifier used to identify incident `tiny`, `id` default
        is `id`
- name: addIncidentResponders
  endpoint:
    path: /addIncidentResponders
    method: POST
    data_selector: incident
    params:
      identifier: Id of the Incident to which responders needs to be added
      identifierType: Type of identifier used to identify incident `tiny`, `id` default
        is `id`
      type: 'Type of responders which need to be added to the incident . Values :
        `user ,` team`'
      responder: A comma separated list of labels attached to the incident.
- name: createService
  endpoint:
    path: /createService
    method: POST
    data_selector: service
    params:
      name: test service
      teamId: c09f063a-e6bf-4d5c-a796-e49f7ee520e4
      visibility: TEAM_MEMBERS
      description: This is test service
- name: updateService
  endpoint:
    path: /updateService
    method: PUT
    data_selector: service
    params:
      id: c09f063a-e6bf-4d5c-a796-e49f7ee520e4
      name: New service name
      description: New service description
      visibility: TEAM_MEMBERS
- name: deleteService
  endpoint:
    path: /deleteService
    method: DELETE
    data_selector: service
    params:
      id: c09f063a-e6bf-4d5c-a796-e49f7ee520e4
- name: getService
  endpoint:
    path: /getService
    method: GET
    data_selector: service
    params:
      id: c09f063a-e6bf-4d5c-a796-e49f7ee520e4
- name: listServices
  endpoint:
    path: /listServices
    method: GET
    data_selector: services
    params:
      limit: 2
      offset: 0
- name: heartbeat
  endpoint:
    path: /v1/heartbeats
    method: GET
    data_selector: heartbeats
- name: createIncident
  endpoint:
    path: /createIncident
    method: POST
    data_selector: incident
    params:
      message: Incident text limited to 130 characters
- name: getIncident
  endpoint:
    path: /getIncident
    method: GET
    data_selector: incident
    params:
      identifier: Id of the Incident whose information we want to get
      identifierType: Type of identifier used to identify incident
- name: getIncidentList
  endpoint:
    path: /getIncidentList
    method: GET
    data_selector: incidents
    params:
      query: Query to fetch incidents required.
- name: addNoteToIncident
  endpoint:
    path: /addNoteToIncident
    method: POST
    data_selector: note
    params:
      identifier: Id of the Incident to which note needs to be added
      identifierType: Type of identifier used to identify incident
      note: Note which needs to be added
- name: addIncidentTags
  endpoint:
    path: /addIncidentTags
    method: POST
    data_selector: tags
    params:
      identifier: Id of the Incident to which tags needs to be added
      identifierType: Type of identifier used to identify incident
      tags: A comma separated list of labels that needs to added to the incident.
- name: removeIncidentTags
  endpoint:
    path: /removeIncidentTags
    method: POST
    data_selector: tags
    params:
      identifier: Id of the Incident to which tags needs to be removed
      identifierType: Type of identifier used to identify incident
      tags: A comma separated list of labels that needs to removed to the incident.
- name: addIncidentDetails
  endpoint:
    path: /addIncidentDetails
    method: POST
    data_selector: details
    params:
      identifier: Id of the Incident to which details needs to be added
      identifierType: Type of identifier used to identify incident
      detailKeys: Details are stored in Key/Value pair. List of comma separated keys
        in Details
      detailValues: List of comma separated corresponding values to the keys specified
        in detailKeys
- name: removeIncidentDetails
  endpoint:
    path: /removeIncidentDetails
    method: POST
    data_selector: details
    params:
      identifier: Id of the Incident to which details needs to be removed
      identifierType: Type of identifier used to identify incident
      keys: Details are stored in Key/Value pair. List of comma separated keys in
        Details which needs to removed.
- name: updateIncidentPriority
  endpoint:
    path: /updateIncidentPriority
    method: POST
    data_selector: priority
    params:
      identifier: Id of the Incident whose priority we want to update
      identifierType: Type of identifier used to identify incident
      priority: 'The priority of alert. Values: P1, P2, P3, P4, P5'
- name: updateIncidentMessage
  endpoint:
    path: /updateIncidentMessage
    method: POST
    data_selector: message
    params:
      identifier: Id of the Incident whose message we want to update
      identifierType: Type of identifier used to identify incident
      message: Incident text limited to 130 characters
- name: updateIncidentDescription
  endpoint:
    path: /updateIncidentDescription
    method: POST
    data_selector: description
    params:
      identifier: Id of the Incident whose description needs to be updated
      identifierType: Type of identifier used to identify incident
      description: Incident text in long form.
- name: closeIncident
  endpoint:
    path: /closeIncident
    method: POST
    data_selector: incident
    params:
      identifier: Id of the Incident to which needs to be closed
      identifierType: Type of identifier used to identify incident
      note: Note which needs to be added
- name: deleteIncident
  endpoint:
    path: /deleteIncident
    method: DELETE
    data_selector: incident
    params:
      identifier: Id of the Incident which needs to be deleted
      identifierType: Type of identifier used to identify incident
- name: addIncidentResponders
  endpoint:
    path: /addIncidentResponders
    method: POST
    data_selector: responders
    params:
      identifier: Id of the Incident to which responders needs to be added
      identifierType: Type of identifier used to identify incident
      type: Type of responders which need to be added to the incident
      responder: A comma separated list of responders
- name: createService
  endpoint:
    path: /createService
    method: POST
- name: updateService
  endpoint:
    path: /updateService
    method: POST
- name: deleteService
  endpoint:
    path: /deleteService
    method: DELETE
- name: getService
  endpoint:
    path: /getService
    method: GET
- name: listServices
  endpoint:
    path: /listServices
    method: GET
- name: create_alert
  endpoint:
    path: /createAlert
    method: POST
    data_selector: result
- name: get_alert
  endpoint:
    path: /getAlert
    method: GET
    data_selector: result
- name: attach_file
  endpoint:
    path: /attachFile
    method: POST
    data_selector: result
- name: acknowledge
  endpoint:
    path: /acknowledge
    method: POST
    data_selector: result
- name: renotify
  endpoint:
    path: /renotify
    method: POST
    data_selector: result
- name: take_ownership
  endpoint:
    path: /takeOwnership
    method: POST
    data_selector: result
- name: assign
  endpoint:
    path: /assign
    method: POST
    data_selector: result
- name: add_team
  endpoint:
    path: /addTeam
    method: POST
    data_selector: result
- name: heartbeat
  endpoint:
    path: /heartbeat
    method: POST
    data_selector: heartbeat
- name: create_alert
  endpoint:
    path: /v1/alerts
    method: POST
    data_selector: alert
    params: {}
- name: get_alert
  endpoint:
    path: /v1/alerts/{alertId}
    method: GET
    data_selector: alert
    params: {}
- name: addRecipient
  endpoint:
    path: /addRecipient
    method: POST
    data_selector: recipient
    params:
      alertId: required
      alias: required
      recipient: required
      user: optional
      note: optional
      source: optional
- name: addNote
  endpoint:
    path: /addNote
    method: POST
    data_selector: note
    params:
      alertID: required
      alias: required
      note: required
      user: optional
      source: optional
- name: executeAction
  endpoint:
    path: /executeAction
    method: POST
    data_selector: action
    params:
      alertId: required
      alias: required
      action: required
      user: optional
      note: optional
      source: optional
- name: closeAlert
  endpoint:
    path: /closeAlert
    method: POST
    data_selector: alert
    params:
      alertId: required
      alias: required
      user: optional
      note: optional
      notify: optional
      source: optional
- name: deleteAlert
  endpoint:
    path: /deleteAlert
    method: DELETE
    data_selector: alert
    params:
      alertId: required
      user: optional
      source: optional
- name: heartbeat
  endpoint:
    path: /heartbeat
    method: POST
    data_selector: heartbeat
    params:
      name: required
- name: enable
  endpoint:
    path: /enable
    method: POST
    data_selector: enable
    params:
      id: required
      type: required
      name: required
- name: disable
  endpoint:
    path: /disable
    method: POST
    data_selector: disable
    params:
      id: required
      type: required
      name: required
- name: executeScript
  endpoint:
    path: /executeScript
    method: POST
    data_selector: script
    params:
      name: required
      D: optional
- name: addRecipient
  endpoint:
    path: /addRecipient
    method: POST
    data_selector: recipient
    params:
      alertId: required
      alias: required
      recipient: required
      user: optional
      note: optional
      source: optional
- name: addNote
  endpoint:
    path: /addNote
    method: POST
    data_selector: note
    params:
      alertID: required
      alias: required
      note: required
      user: optional
      source: optional
- name: executeAction
  endpoint:
    path: /executeAction
    method: POST
    data_selector: action
    params:
      alertId: required
      alias: required
      action: required
      user: optional
      note: optional
      source: optional
- name: closeAlert
  endpoint:
    path: /closeAlert
    method: POST
    data_selector: alert
    params:
      alertId: required
      alias: required
      user: optional
      note: optional
      notify: optional
      source: optional
- name: deleteAlert
  endpoint:
    path: /deleteAlert
    method: DELETE
    data_selector: alert
    params:
      alertId: required
      user: optional
      source: optional
- name: heartbeat
  endpoint:
    path: /heartbeat
    method: POST
    data_selector: heartbeat
    params:
      name: required
- name: enable
  endpoint:
    path: /enable
    method: POST
    data_selector: integration
    params:
      id: required
      type: required
      name: required
- name: disable
  endpoint:
    path: /disable
    method: POST
    data_selector: integration
    params:
      id: required
      type: required
      name: required
- name: executeScript
  endpoint:
    path: /executeScript
    method: POST
    data_selector: script
    params:
      name: required
      D: optional
- name: alerts
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v2/users
    method: GET
    data_selector: data
    params: {}
- name: alerts
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
- name: teams
  endpoint:
    path: /v2/teams
    method: GET
    data_selector: data
- name: CloudWatch Alarms
  endpoint:
    path: /
    method: POST
    data_selector: messages
    params: {}
- name: alerts
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
- name: teams
  endpoint:
    path: /v2/teams
    method: GET
    data_selector: data
- name: alerts
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
    params: {}
- name: alerts
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
    params: {}
- name: Create Alert
  endpoint:
    path: /
    method: POST
    data_selector: Message
    params: {}
- name: alerts
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
    params: {}
- name: teams
  endpoint:
    path: /v2/teams
    method: GET
    data_selector: data
    params: {}
notes:
- If using the EU instance of Opsgenie, the URL needs to be https://api.eu.opsgenie.com
  for requests to be successful.
- All requests of Schedule Rotation API work under Schedule domain.
- Identifier of the schedule is required as an in-line parameter.
- Create an API Integration and obtain your apiKey to make requests listed above.
- If using the EU instance of Opsgenie, the URL needs to be https://api.eu.opsgenie.com
  for requests to be executed.
- Possible values for scheduleIdentifierType are id and name. Default is id.
- Opsgenie applies rate limiting to the API and integration requests.
- If a request exceeds the defined rate limit, the request is either rejected with
  the HTTP status 429 - Too Many Requests or delayed.
- API Access Management can be applied to Opsgenie integrations that can access Opsgenie
  Web API using their API keys.
- You can restrict the domain scope and request type of the integrations.
- More than 20000 alerts cannot be retrieved. Sum of offset and limit should be lower
  than 20K.
- Add responder to alert requests are processed asynchronously.
- Add team to alert requests are processed asynchronously.
- Assign alert requests are processed asynchronously.
- Escalate alert requests are processed asynchronously.
- Snooze alert requests are processed asynchronously.
- Unacknowledge alert requests are processed asynchronously.
- Requires GenieKey for authorization
- Uses API key for authentication.
- Incident API is only available to Standard and Enterprise plans.
- Requests are processed asynchronously, therefore valid requests are responded with
  HTTP status 202 - Accepted.
- Create an API Integration and obtain your apiKey to make requests.
- The integration of the API key should have 'Create and Update' rights.
- The integration of the API key should have 'Create and Update' rights otherwise
  request will not be accepted.
- If you are using the EU instance of Opsgenie, the URL needs to be https://api.eu.opsgenie.com
  for requests to be successful.
- The integration of the API key should have 'Create and Update' rights otherwise
  the request will not be accepted.
- If the apiKey belongs to a team integration, only that team's integrations will
  be listed.
- This method updates all of the actions of the integration.
- If an action is not put on the payload, that action will be deleted.
- Alert text limited to 130 characters.
- Receiving a PONG response does not necessarily mean that the heartbeat exists.
- This method updates all of the actions of the integration. If an action is not put
  on the payload, that action will be deleted.
- If the integration of the API key configured as read-only, write requests will not
  be accepted.
- This API Call only allows a limit of 1000 results.
- Create policy request is a write request. If the integration of the API key is configured
  as read-only, the request will not be accepted.
- If the integration of the API key configured as read-only, the request will not
  be accepted.
- Integration of the API key configured as read-only will not accept write requests.
- Uses API key for authentication
- If you have integrated your Opsgenie account with Atlassian Accounts, you can no
  longer perform an update via API calls.
- The integration of the API key configured as read-only will not accept write requests.
- List teams request is not affected by the number of teams you are calling. You will
  receive all the teams on your account, without pagination.
- All requests of Team Member API work under Team domain.
- If using the EU instance of Opsgenie, the URL needs to be https://api.eu.opsgenie.com
- If the API key configured as read-only, the request will not be accepted.
- If integration belongs to any team, it automatically overwrite ownerTeam object.
- All requests of Team Routing Rule API work under Team domain.
- All requests of Who Is On Call API work under Schedule domain.
- 0 should be given as a value to disable repeat option.
- 1 is the default repeat time indicating how many times the repeat action will be
  performed.
- false is the default for reverting acknowledge and seen states back on each repeat
  turn if an alert is not closed.
- false is the default to close the alert automatically if escalation repeats are
  completed.
- Service API is only available to Standard and Enterprise plans.
- Logs API is only available for our Enterprise plan offerings.
- If you are using the EU instance of Opsgenie, the URL should be changed to https://api.eu.opsgenie.com
  for requests to be successful.
- A team can have up to 200 incident rules.
- Currently, Opsgenie supports only Bitbucket cloud as the SCM tool.
- Update endpoint is not compatible for Bitbucket pipeline deployments.
- Postmortems are available for Essentials (up to 5 per month), Standard (unlimited)
  and, Enterprise (unlimited).
- Requires API key from API Integration
- Opsgenie supports only Bitbucket cloud as the SCM tool of choice.
- Create deployment requests are processed asynchronously, therefore valid requests
  are responded with HTTP status 202 - Accepted.
- The Update endpoint is not compatible for Bitbucket pipeline deployments.
- Uses API Key for authentication.
- Uses API key for authentication — requires setup of API key in Opsgenie.
- API key is required for authorization.
- API key required in the Authorization header for all requests.
- API key is required for authentication.
- 'Handle Username Encoding Problem: If you use MemberIdentifierType as ''username''
  and your username includes ''+'' character, you need to encode ''+'' as ''%2B''.'
- Node.js SDK requires Node.js (version > 0.6) to be installed
- If you use MemberIdentifierType as 'username' and your username includes '+' character,
  you need to encode '+' as '%2B'.
- Requires an API key for authentication
- Rate limiting may apply to API calls
- Ensure to handle errors for API rate limits.
- Requires an API key for authentication.
- Uses API Key for authentication — ensure API Key is properly configured in Opsgenie.
- The API key is used to authenticate requests to the service.
- API Key required for authentication.
- Ensure to pass required values in payloads for various functions.
- Uses API Key for authentication
- Ensure you pass the required values in the payloads for each function.
- Incident creation, deletion, and action requests are processed asynchronously.
- You must configure the API Key from Opsgenie Integrations.
- Requires setup of API Key from Opsgenie Integrations.
- Lamp requires internet connection to reach Opsgenie.
- If Lamp host server does not have internet connection, configure Lamp Proxy settings.
- Lamp is a Go-based command line utility to interact with Opsgenie service.
- API key can be obtained by adding an API Integration.
- Commands are prefixed with opsgenie-lamp.
- This command allows you to create, update and delete incident using Lamp command
  line.
- You can execute commands in verbose mode to get detailed information about the execution.
- New Lamp lets you use a config file located in a custom location.
- Incident text limited to 130 characters.
- The priority of alert can be P1 to P5 with default as P3.
- API key should be set in opsgenie-integration.conf file
- Lamp requires internet connection to reach Opsgenie
- If integration belongs to any team, it automatically overwrites `ownerTeam` object.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Default API integration name can not be changed.
- Default API integration can not be disabled & deleted.
- Uses OAuth2 with refresh token — requires setup of connected app in Opsgenie
- Some endpoints may return nulls in deeply nested fields
- Ensure API key has proper permissions.
- Ensure that notifications are sent for all of the states ALARM, OK, and INSUFFICIENT
  to Opsgenie.
- Ensure API key has the right permissions.
- API requires an API key for authentication
- Requires valid Opsgenie account and API key for access.
- When an alert is created in New Relic (Legacy), an alert is also created in Opsgenie
  automatically through the integration.
- When an alert is closed in New Relic (Legacy), the related alert is also closed
  in Opsgenie automatically through the integration.
- When an alert is acknowledged in New Relic (Legacy), the related alert is also acknowledged
  in Opsgenie automatically through the integration.
- API usage is subject to rate limits.
- Ensure API keys are kept secure.
errors:
- '403 Forbidden (Unauthorized): If the API key does not have access to the given
  schedule.'
- '403 - Forbidden (Unauthorized) with 40301 internal code: Team must be allowed to
  access given schedule.'
- '429 - Too Many Requests: The request is rejected due to rate limiting.'
- '401 - Unauthenticated (Not Unauthorized): apiKey is invalid or integration is disabled'
- '402 - Payment Required: apiKey is valid but the account cannot do this action because
  of subscription plan'
- '403 - Forbidden (Unauthorized): apiKey is valid but the apiKey cannot do this operation
  because of permissions'
- '404 - Not Found: Resource or handler not found'
- '405 - Method Not Allowed: URL is valid but HTTP method not supported'
- '429 - Too Many Request*: Throttling.'
- '503 - Service Unavailable*: Back-end servers are at capacity.'
- '429 - Too Many Requests: Request is rejected due to rate limiting.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API Key or token expiration'
- '400 - Bad Request (Syntax Error only): Invalid JSON body'
- '406 - Not Acceptable: Requested format is not supported (Accept header)'
- '409 - Conflict: ID or name conflicts with another entity. E.g. integration name
  already exists'
- '410 - Gone: Feature is deprecated'
- '415 - Unsupported Media Type: Request body format is not supported (Content-Type
  header)'
- '416 - Requested Range Not Satisfiable: The given range is not supported.'
- '422 - Unprocessable Entity: Semantic errors in request body'
- '428 - Pre Condition Required: Entity is used by another entity (schedule,escalation,team,etc)'
- 500 - Internal Server Error
- 501 - Not Implemented
- HTTP status 202 - Accepted for asynchronous requests.
- '202 - Accepted: Request will be processed'
- '401 Unauthorized: Recheck API key or permissions'
- '202 - Accepted: Request will be processed asynchronously'
- '202 - Accepted: Request will be processed asynchronously.'
- '401 Unauthorized: Recheck API key'
- '202 Accepted: Request will be processed'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Invalid API key'
- '401 Unauthorized: Recheck API key or permissions.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Recheck API key or token expiration.'
- 'Invalid API Key: Check if the API key is correct.'
- 'Not Found: Check if the integration ID is valid.'
- 'Unauthorized: Ensure the API key has the necessary permissions.'
- '403 Forbidden: Check access management settings'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Recheck API key validity'
- '401 Unauthorized: Recheck API key permissions'
- '401 Unauthorized: Recheck API key configuration'
- '403 Forbidden: Unauthorized access due to insufficient permissions.'
- '401 Unauthorized: Recheck API key or integration restrictions'
- '403 - Forbidden (Unauthorized): The team must allow access to the given team.'
- '403 - Forbidden (Unauthorized): Team integration does not have access to the specified
  team.'
- '403 Forbidden: Unauthorized access'
- Request cannot be accepted if the integration of the API key is configured as read-only
- '401 Unauthorized: Check API key or permissions.'
- '403 - Forbidden (Unauthorized): Team must be allowed to access given team.'
- '403 - Forbidden (Unauthorized): If the API key belongs to a team integration, that
  team must be allowed to access the given team.'
- '403 - Forbidden (Unauthorized): Ensure the API key has access to the schedule.'
- '401 Unauthorized: Recheck API key and permissions'
- '403 - Forbidden (Unauthorized): Check if the team integration has access to the
  given schedule.'
- 'RESPONSE CODE: 201'
- 'RESPONSE CODE: 200'
- '202 - Accepted: Valid request accepted for processing'
- 'Deployment creation is unsuccessful: Bitbucket Integration with name not found'
- 'HTTP status 202 - Accepted: Valid requests are responded with this status.'
- 'Unauthorized: Recheck API key permissions or token expiration'
- '202 - Accepted: Request will be processed.'
- 'Deployment creation is successful: Deployment successfully created.'
- 'Deployment creation is unsuccessful: Bitbucket Integration with name: opsgenie
  not found.'
- '401 Unauthorized: Check your API key.'
- '404 Not Found: The requested resource was not found.'
- '401 Unauthorized: Recheck API key or user permissions'
- '404 Not Found: Ensure the alert ID is correct'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check API key and permissions.'
- '404 Not Found: Ensure the endpoint is correct.'
- '403 Forbidden: Check your API key and permissions.'
- '404 Not Found: The specified resource does not exist.'
- '500 Internal Server Error: Try again later.'
- '401 Unauthorized: Check API key or permissions'
- '429 Too Many Requests: Rate limit exceeded'
- '500 Internal Server Error: Server error, retry later'
- '401 Unauthorized: Check your API key and permissions.'
- '429 Too Many Requests: You are being rate limited.'
- '401 Unauthorized: Invalid API key or insufficient permissions.'
- '429 Too Many Requests: Rate limit exceeded. Slow down your requests.'
- '202 Accepted: Request processed successfully'
- '401 Unauthorized: Check API Key validity'
- '429: Too Many Requests - Throttle API calls or reduce frequency'
- '500: Internal Server Error - Retry the request'
- '401: Unauthorized - Check API key and permissions'
- '429 Too Many Requests: Throttle API calls or reduce frequency.'
- '500 Internal Server Error: Retry the request.'
- '401 Unauthorized: Invalid API key.'
- '404 Not Found: Alert not found.'
- '404 Not Found: Ensure the heartbeat name is correct'
- '401 Unauthorized: Check API key validity.'
- '202 Accepted: Valid requests for incident operations.'
- '401 Unauthorized: Check API key validity'
- '404 Not Found: Ensure the alert ID is correct.'
- '400 Bad Request: Verify the parameters.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Invalid API Key.'
- '404 Not Found: Resource not found.'
- '401 Unauthorized: Check API key permissions'
- '403 Forbidden: API key is read-only'
- '400 Bad Request: Check the parameters passed for correctness.'
- '404 Not Found: Verify the incident identifier.'
- '401 Unauthorized: Ensure valid authentication.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403 Forbidden: Check your API key permissions.'
- '404 Not Found: Verify the endpoint URL.'
- '429 Too Many Requests: Slow down your requests.'
- 'Request limit exceeded: Throttle API calls or reduce frequency.'
- 'Query timeout: Break down filters or add selectivity.'
- '404 Not Found: Check the endpoint URL.'
- '403 Forbidden: Check API key permissions.'
- '429 Too Many Requests: Throttle your requests.'
- '401 Unauthorized: Check API key'
- '404 Not Found: Verify endpoint'
- '403 Forbidden: Check your permissions.'
- '429 Too Many Requests: Rate limit exceeded.'
- '404 Not Found: Verify the resource path.'
auth_info:
  mentioned_objects:
  - identifier
  - identifierType
  - ApiKey
  - ApiException
  - apiKey
  - tinyId
  - opsgenie-lamp
  - incident
  - responder
  - note
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.opsgenie.com
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
