resources:
- name: createAccessToken
  endpoint:
    path: /v1/access-tokens
    method: POST
    data_selector: response
    params: {}
- name: listAccessTokens
  endpoint:
    path: /v1/access-tokens
    method: GET
    data_selector: response
    params: {}
- name: revokeAccessToken
  endpoint:
    path: /v1/access-tokens/{id}
    method: DELETE
    data_selector: response
    params: {}
- name: getAccessTokenJwks
  endpoint:
    path: /v1/access-tokens/.well-known/jwks.json
    method: GET
    data_selector: response
    params: {}
- name: getAccessTokenOIDC
  endpoint:
    path: /v1/access-tokens/.well-known/openid-configuration
    method: GET
    data_selector: response
    params: {}
- name: getPublicTokenJwks
  endpoint:
    path: /v1/access-tokens/public/.well-known/jwks.json
    method: GET
    data_selector: response
    params: {}
- name: getPublicTokenOIDC
  endpoint:
    path: /v1/access-tokens/public/.well-known/openid-configuration
    method: GET
    data_selector: response
    params: {}
- name: createAccessToken
  endpoint:
    path: /v1/access-tokens
    method: POST
    data_selector: access_token
    params: {}
- name: listAccessTokens
  endpoint:
    path: /v1/access-tokens
    method: GET
    data_selector: access_tokens
    params: {}
- name: revokeAccessToken
  endpoint:
    path: /v1/access-tokens/{id}
    method: DELETE
    data_selector: access_token
    params: {}
- name: getAccessTokenJwks
  endpoint:
    path: /v1/access-tokens/.well-known/jwks.json
    method: GET
    data_selector: jwks
    params: {}
- name: getAccessTokenOIDC
  endpoint:
    path: /v1/access-tokens/.well-known/openid-configuration
    method: GET
    data_selector: openid_configuration
    params: {}
- name: getPublicTokenJwks
  endpoint:
    path: /v1/access-tokens/public/.well-known/jwks.json
    method: GET
    data_selector: public_jwks
    params: {}
- name: getPublicTokenOIDC
  endpoint:
    path: /v1/access-tokens/public/.well-known/openid-configuration
    method: GET
    data_selector: public_openid_configuration
    params: {}
- name: list_users
  endpoint:
    path: /v2/users
    method: GET
    data_selector: users
    params: {}
- name: get_me
  endpoint:
    path: /v2/users/me
    method: GET
    data_selector: user
    params: {}
- name: getUserV2
  endpoint:
    path: /v2/users/{id}
    method: GET
- name: updateUserV2
  endpoint:
    path: /v2/users/{id}
    method: PATCH
- name: deleteUserV2
  endpoint:
    path: /v2/users/{id}
    method: DELETE
- name: groups_for_user
  endpoint:
    path: /v2/users/{id}/groups
    method: GET
    data_selector: groups
    params:
      id: string
- name: invite_user
  endpoint:
    path: /v2/users/invite
    method: POST
    data_selector: user_invitation
    params: {}
- name: resend_user_invitation
  endpoint:
    path: /v2/users/invite:resendEmail
    method: POST
    data_selector: resend_invitation
    params: {}
- name: getUserLoginParametersV2
  endpoint:
    path: /v2/users/public/username/{username}:getLoginParameters
    method: GET
    data_selector: users
- name: verifyEmailWithToken
  endpoint:
    path: /v2/users/public/verifyEmail
    method: POST
    data_selector: id
- name: checkInviteToken
  endpoint:
    path: /v2/users/public/checkToken
    method: GET
    data_selector: id
- name: activateUser
  endpoint:
    path: /v2/users/public/activate
    method: POST
    data_selector: id
- name: rejectInvite
  endpoint:
    path: /v2/users/public/reject
    method: DELETE
    data_selector: id
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params:
      org_ids: ''
      query: ''
      limit: ''
      offset: ''
- name: me
  endpoint:
    path: /v1/users/me
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params:
      query: string
      limit: number
      offset: number
      hydrate: boolean
- name: users
  endpoint:
    path: /v1/users/{id}
    method: GET
    data_selector: users
    params:
      id: string
- name: userLoginParameters
  endpoint:
    path: /v1/users/username/{username}:getLoginParameters
    method: GET
    data_selector: loginParameters
    params:
      username: string
- name: createGroup
  endpoint:
    path: /v1/groups
    method: POST
    data_selector: id
    params: {}
- name: getGroup
  endpoint:
    path: /v1/groups/{id}
    method: GET
    data_selector: id
    params:
      hydrate: boolean
- name: updateGroup
  endpoint:
    path: /v1/groups/{id}
    method: PATCH
    data_selector: id
    params: {}
- name: advanceUserAssignment
  endpoint:
    path: /v1/groups/{id}/user:next
    method: POST
- name: deleteGroup
  endpoint:
    path: /v1/groups/{id}
    method: DELETE
- name: current_organization
  endpoint:
    path: /v2/organization/current
    method: GET
    data_selector: enabled
- name: organization
  endpoint:
    path: /v2/organization/{org_id}
    method: GET
    data_selector: enabled
    params: {}
- name: update_organization
  endpoint:
    path: /v2/organization/{org_id}
    method: PATCH
    data_selector: enabled
    params: {}
- name: organization_settings
  endpoint:
    path: /v2/organization/{org_id}/settings
    method: GET
    data_selector: enabled
    params: {}
- name: listSchemas
  endpoint:
    path: /v1/entity/schemas
    method: GET
    data_selector: schemas
    params:
      unpublished: 'false'
- name: getSchema
  endpoint:
    path: /v1/entity/schemas/{slug}
    method: GET
    data_selector: schema
- name: putSchema
  endpoint:
    path: /v1/entity/schemas/{slug}
    method: PUT
    data_selector: schema
- name: deleteSchema
  endpoint:
    path: /v1/entity/schemas/{slug}
    method: DELETE
    data_selector: schema
- name: schema_attribute
  endpoint:
    path: /v1/entity/schemas/attributes/{composite_id}
    method: PUT
    data_selector: job_id
    params: {}
- name: schema_capability
  endpoint:
    path: /v1/entity/schemas/capabilities/{composite_id}
    method: GET
    data_selector: job_id
    params: {}
- name: schema_group
  endpoint:
    path: /v1/entity/schemas/group/{composite_id}
    method: GET
    data_selector: job_id
    params: {}
- name: schema_group_headline
  endpoint:
    path: /v1/entity/schemas/headline/{composite_id}
    method: GET
    data_selector: job_id
    params: {}
- name: createEntity
  endpoint:
    path: /v1/entity/{slug}
    method: POST
    data_selector: job_id
    params: {}
- name: deleteEntity
  endpoint:
    path: /v1/entity/{slug}/{id}
    method: DELETE
    data_selector: job_id
    params:
      purge: false
- name: getEntity
  endpoint:
    path: /v1/entity/{slug}/{id}
    method: GET
    data_selector: job_id
    params: {}
- name: updateEntity
  endpoint:
    path: /v1/entity/{slug}/{id}
    method: PUT
    data_selector: job_id
    params: {}
- name: searchEntities
  endpoint:
    path: /v1/entity:search
    method: POST
    data_selector: job_id
    params: {}
- name: listEntities
  endpoint:
    path: /v1/entity:list
    method: POST
    data_selector: job_id
    params: {}
- name: validateEntity
  endpoint:
    path: /v1/entity/{slug}:validate
    method: POST
    data_selector: job_id
    params: {}
- name: reindexEntity
  endpoint:
    path: /v1/entity/{slug}/{id}:reindex
    method: POST
    data_selector: job_id
    params: {}
- name: wipeAllEntities
  endpoint:
    path: /v1/entity:wipeAllEntities
    method: POST
    data_selector: job_id
    params: {}
- name: getRelations
  endpoint:
    path: /v1/entity/{slug}/{id}/relations
    method: GET
    data_selector: relations
    params:
      hydrate: 'false'
      include_reverse: 'false'
      from: 0
      size: 100
- name: addRelations
  endpoint:
    path: /v1/entity/{slug}/{id}/relations
    method: POST
    data_selector: relations
    params: {}
- name: removeRelations
  endpoint:
    path: /v1/entity/{slug}/{id}/relations
    method: DELETE
    data_selector: relations
    params: {}
- name: getRelationsV2
  endpoint:
    path: /v2/entity/{slug}/{id}/relations
    method: GET
    data_selector: relations
    params:
      hydrate: 'false'
      include_reverse: 'false'
      from: 0
      size: 50
- name: getRelatedEntitiesCount
  endpoint:
    path: /v2/entity/{slug}/{id}/relations/count
    method: GET
    data_selector: count
    params: {}
- name: createActivity
  endpoint:
    path: /v1/entity/activity
    method: POST
    data_selector: activity
    params: {}
- name: getActivity
  endpoint:
    path: /v1/entity/activity/{id}
    method: GET
    data_selector: activity
    params: {}
- name: getEntityActivityFeed
  endpoint:
    path: /v1/entity/{slug}/{id}/activity
    method: GET
    data_selector: activity_feed
    params:
      from: 0
      size: 25
- name: exportEntities
  endpoint:
    path: /v1/entity:export
    method: POST
    data_selector: job_id
    params: {}
- name: importEntities
  endpoint:
    path: /v1/entity:import
    method: POST
    data_selector: job_id
    params: {}
- name: listSavedViews
  endpoint:
    path: /v1/entity/views
    method: GET
    data_selector: views
    params: {}
- name: listTaxonomies
  endpoint:
    path: /v1/entity/taxonomies
    method: GET
    data_selector: taxonomies
    params: {}
- name: createTaxonomy
  endpoint:
    path: /v1/entity/taxonomies
    method: POST
    data_selector: job_id
    params: {}
- name: createTaxonomyClassification
  endpoint:
    path: /v2/entity/taxonomies/classifications
    method: POST
    data_selector: job_id
    params: {}
- name: getTaxonomyClassification
  endpoint:
    path: /v2/entity/taxonomies/classifications/{classificationSlug}
    method: GET
    data_selector: job_id
    params: {}
- name: updateTaxonomyClassification
  endpoint:
    path: /v2/entity/taxonomies/classifications/{classificationSlug}
    method: PUT
    data_selector: job_id
    params: {}
- name: deleteTaxonomyClassification
  endpoint:
    path: /v2/entity/taxonomies/classifications/{classificationSlug}
    method: DELETE
    data_selector: job_id
    params: {}
- name: taxonomyAutocomplete
  endpoint:
    path: /v1/entity/taxonomies/{taxonomySlug}:autocomplete
    method: GET
    data_selector: job_id
    params: {}
- name: taxonomiesClassificationsSearch
  endpoint:
    path: /v1/entity/taxonomies/classifications:search
    method: POST
    data_selector: job_id
    params: {}
- name: getTaxonomyBulkActionJobs
  endpoint:
    path: /v1/entity/taxonomies/bulk-jobs
    method: GET
    data_selector: job_id
    params: {}
- name: getTaxonomyBulkActionJobById
  endpoint:
    path: /v1/entity/taxonomies/bulk-jobs/{job_id}
    method: GET
    data_selector: job_id
    params: {}
- name: cancelBulkAction
  endpoint:
    path: /v1/entity/taxonomies/bulk-jobs/{job_id}/cancel
    method: POST
    data_selector: job_id
    params: {}
- name: bulkMoveClassifications
  endpoint:
    path: /v1/entity/taxonomies/classifications:move
    method: POST
    data_selector: job_id
    params: {}
- name: bulkMergeClassifications
  endpoint:
    path: /v1/entity/taxonomies/classifications:merge
    method: POST
    data_selector: job_id
    params: {}
- name: bulkDeleteClassifications
  endpoint:
    path: /v1/entity/taxonomies/classifications:delete
    method: POST
    data_selector: job_id
    params: {}
- name: sendBatchRequests
  endpoint:
    path: /v1/batch/jobs
    method: POST
    data_selector: responses
- name: getJobInfo
  endpoint:
    path: /v1/batch/jobs/{job_id}
    method: GET
    data_selector: responses
- name: GetTasks
  endpoint:
    path: /entity/opportunity
    method: GET
    data_selector: GetTasks
- name: PostTasks
  endpoint:
    path: /entity/opportunity
    method: POST
    data_selector: PostTasks
- name: PatchTasks
  endpoint:
    path: /entity/opportunity
    method: PATCH
    data_selector: PatchTasks
- name: PutTasks
  endpoint:
    path: /entity/opportunity
    method: PUT
    data_selector: PutTasks
- name: DeleteTasks
  endpoint:
    path: /entity/opportunity
    method: DELETE
    data_selector: DeleteTasks
- name: createSubmission
  endpoint:
    path: /v1/submission/submissions
    method: POST
- name: checkNonce
  endpoint:
    path: /v1/submission/nonce/{nonce_id}
    method: GET
- name: calculatePricingDetails
  endpoint:
    path: /v1/pricing:compute
    method: POST
    data_selector: payload
- name: searchCatalog
  endpoint:
    path: /v1/public/catalog
    method: POST
    data_selector: payload
- name: availabilityCheck
  endpoint:
    path: /v1/public/availability:check
    method: POST
    data_selector: payload
- name: historicMarketPrices
  endpoint:
    path: /v1/public/historicMarketPrices
    method: GET
    data_selector: payload
- name: productRecommendations
  endpoint:
    path: /v1/public/product-recommendations
    method: POST
    data_selector: payload
- name: calculatePricingDetails
  endpoint:
    path: /calculatePricingDetails
    method: GET
- name: order
  endpoint:
    path: /createOrder
    method: POST
- name: order
  endpoint:
    path: /putOrder
    method: POST
- name: checkoutCart
  endpoint:
    path: /v1/public/cart:checkout
    method: POST
    data_selector: checkout result
    params: {}
- name: checkoutCart
  endpoint:
    path: /checkoutCart
    method: GET
- name: searchCatalog
  endpoint:
    path: /v1/public/catalog
    method: POST
    data_selector: matched_coupons
    params: {}
- name: order
  endpoint:
    path: /searchCatalog
    method: GET
- name: order
  endpoint:
    path: /privateSearchCatalog
    method: GET
    data_selector: orders
- name: historicMarketPrices
  endpoint:
    path: /v1/public/historicMarketPrices
    method: GET
    data_selector: price data
    params:
      market: day_ahead
      bidding_zone:
      - AT
      - DE-LU
      frequency:
      - PT15M
      - PT1H
      - P1D
      - P1M
      from: start_time
      to: end_time
- name: historicMarketPrices
  endpoint:
    path: /historicMarketPrices
    method: GET
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: availabilityCheck
  endpoint:
    path: /v1/public/availability:check
    method: POST
    data_selector: matched_coupons
    params: {}
- name: order
  endpoint:
    path: /availabilityCheck
    method: GET
- name: external_catalog
  endpoint:
    path: /v1/public/integration/{integrationId}/external-catalog
    method: POST
    data_selector: matched_coupons
    params:
      integrationId: required
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: records
    params: {}
- name: searchExternalProducts
  endpoint:
    path: /searchExternalProducts
    method: GET
- name: orders
  endpoint:
    path: /searchProviders
    method: GET
- name: searchStreets
  endpoint:
    path: /searchStreets
    method: GET
- name: calculatePricingDetails
  endpoint:
    path: /calculatePricingDetails
    method: GET
- name: order
  endpoint:
    path: /getCredentials
    method: GET
    data_selector: records
- name: order
  endpoint:
    path: /getCredentials
    method: GET
    data_selector: order
    params: {}
- name: order
  endpoint:
    path: /order
    method: GET
    data_selector: line_items
    params: {}
- name: deleteCredentials
  endpoint:
    path: /deleteCredentials
    method: POST
    data_selector: null
    params: {}
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: order
  endpoint:
    path: /deleteCredentials
    method: DELETE
    data_selector: order_number
    params: {}
- name: cross_sellable_products
  endpoint:
    path: /cross_sellable_products
    method: GET
- name: product_images
  endpoint:
    path: /product_images
    method: GET
- name: product_downloads
  endpoint:
    path: /product_downloads
    method: GET
- name: price_options
  endpoint:
    path: /price_options
    method: GET
- name: productRecommendations
  endpoint:
    path: /v1/public/product-recommendations
    method: POST
    data_selector: matched_coupons
    params: {}
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: records
    params: {}
- name: validatePromoCodes
  endpoint:
    path: /v1/public/validate-promo-codes
    method: POST
    data_selector: matched_coupons
- name: validatePromoCodes
  endpoint:
    path: /validatePromoCodes
    method: GET
- name: opportunity
  endpoint:
    path: /opportunities
    method: GET
    data_selector: records
    params: {}
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: records
    params: {}
- name: price
  endpoint:
    path: /prices
    method: GET
    data_selector: records
    params: {}
- name: composite_price
  endpoint:
    path: /composite_prices
    method: GET
    data_selector: records
    params: {}
- name: coupon
  endpoint:
    path: /coupons
    method: GET
    data_selector: promo_codes
    params: {}
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: listAvailableDatasetsV2
  endpoint:
    path: /v2/query/datasets
    method: GET
    data_selector: results
- name: executeEntitiesQuery
  endpoint:
    path: /v2/query/domain/entities:execute
    method: POST
    data_selector: results
- name: executeWorkflowsQuery
  endpoint:
    path: /v2/query/domain/workflows:execute
    method: POST
    data_selector: results
- name: executeAutomationQuery
  endpoint:
    path: /v2/query/domain/automations:execute
    method: POST
    data_selector: results
- name: listWorkflowDefinitions
  endpoint:
    path: /v2/query/domain/workflows/definitions
    method: GET
    data_selector: results
- name: listPhaseNames
  endpoint:
    path: /v2/query/domain/workflows/phases
    method: GET
    data_selector: results
- name: listDatasets
  endpoint:
    path: /v1/query/datasets
    method: GET
    data_selector: results
- name: executeQuery
  endpoint:
    path: /v1/query:execute
    method: POST
    data_selector: results
- name: retrieveAllViews
  endpoint:
    path: /datalake/views
    method: GET
    data_selector: results
- name: retrieveSpecificView
  endpoint:
    path: /datalake/views/{view_slug}
    method: GET
    data_selector: results
- name: relationships
  endpoint:
    path: /datalake/relationships
    method: GET
    data_selector: results
- name: generateCredentials
  endpoint:
    path: /v2/query/credentials:generate
    method: POST
    data_selector: results
- name: listCredentials
  endpoint:
    path: /v2/query/credentials:list
    method: GET
    data_selector: results
- name: revokeCredentials
  endpoint:
    path: /v2/query/credentials:revoke
    method: POST
    data_selector: results
- name: executeQuery
  endpoint:
    path: /v2/query:execute
    method: POST
    data_selector: results
- name: workflowsAutocomplete
  endpoint:
    path: /v2/query/workflows:autocomplete
    method: GET
    data_selector: results
- name: configured_events
  endpoint:
    path: /v1/webhooks/configured-events
    method: GET
- name: configs
  endpoint:
    path: /v1/webhooks/configs
    method: GET
- name: create_config
  endpoint:
    path: /v1/webhooks/configs
    method: POST
- name: get_config
  endpoint:
    path: /v1/webhooks/configs/{configId}
    method: GET
- name: update_config
  endpoint:
    path: /v1/webhooks/configs/{configId}
    method: PUT
- name: delete_config
  endpoint:
    path: /v1/webhooks/configs/{configId}
    method: DELETE
- name: failures_for_config
  endpoint:
    path: /v1/webhooks/configs/{configId}/failures
    method: GET
- name: failures
  endpoint:
    path: /v1/webhooks/failures
    method: GET
- name: trigger_webhook
  endpoint:
    path: /v1/webhooks/configs/{configId}/trigger
    method: POST
- name: getWehookEvents
  endpoint:
    path: /v1/webhooks/configs/{configId}/events
    method: GET
    data_selector: events
    params:
      status: succeeded
- name: getEventById
  endpoint:
    path: /v1/webhooks/configs/{configId}/events/{eventId}
    method: GET
    data_selector: event
    params: {}
- name: replayEvent
  endpoint:
    path: /v1/webhooks/configs/{configId}/events/{eventId}/replay
    method: POST
    data_selector: replay
    params: {}
- name: getWebhookExample
  endpoint:
    path: /v1/webhooks/configs/{configId}/example
    method: POST
    data_selector: example
    params: {}
- name: trigger
  endpoint:
    path: /v1/webhooks/configs/{configId}/trigger
    method: POST
    data_selector: trigger
    params:
      sync: true
- name: listCurrentRoles
  endpoint:
    path: /v1/permissions/me
    method: GET
    data_selector: assignments
- name: listAllRoles
  endpoint:
    path: /v1/permissions/roles
    method: GET
    data_selector: assignments
- name: createRole
  endpoint:
    path: /v1/permissions/roles
    method: POST
- name: getRole
  endpoint:
    path: /v1/permissions/roles/{roleId}
    method: GET
- name: putRole
  endpoint:
    path: /v1/permissions/roles/{roleId}
    method: PUT
- name: deleteRole
  endpoint:
    path: /v1/permissions/roles/{roleId}
    method: DELETE
- name: refreshPermissions
  endpoint:
    path: /v1/permissions/refresh
    method: GET
- name: getAssignedRolesForUser
  endpoint:
    path: /v1/permissions/assignments/{userId}
    method: GET
- name: assignRoles
  endpoint:
    path: /v1/permissions/assignments/{userId}
    method: PUT
- name: addAssignment
  endpoint:
    path: /v1/permissions/assignments/{userId}/{roleId}
    method: POST
- name: removeAssignment
  endpoint:
    path: /v1/permissions/assignments/{userId}/{roleId}
    method: DELETE
- name: listAllAssignments
  endpoint:
    path: /v1/permissions/assignments
    method: GET
- name: email_addresses
  endpoint:
    path: /v2/email-settings/email-addresses
    method: GET
- name: shared_inboxes
  endpoint:
    path: /v2/email-settings/shared-inboxes
    method: GET
- name: settings
  endpoint:
    path: /v2/email-settings/settings
    method: GET
- name: getSettings
  endpoint:
    path: /v1/email-settings
    method: GET
    data_selector: settings
    params:
      type: signature
- name: addSetting
  endpoint:
    path: /v1/email-settings
    method: POST
    data_selector: setting
    params: {}
- name: deleteSetting
  endpoint:
    path: /v1/email-settings
    method: DELETE
    data_selector: setting
    params: {}
- name: updateSetting
  endpoint:
    path: /v1/email-settings/{id}
    method: POST
    data_selector: setting
    params: {}
- name: addDomain
  endpoint:
    path: /v1/email-settings/domain
    method: POST
    data_selector: domain
    params: {}
- name: deleteDomain
  endpoint:
    path: /v1/email-settings/domain
    method: DELETE
    data_selector: domain
    params: {}
- name: verifyNameServers
  endpoint:
    path: /v1/email-settings/domain/name-servers:verify
    method: POST
    data_selector: verification
    params: {}
- name: verifyDomain
  endpoint:
    path: /v1/email-settings/domain:verify
    method: POST
    data_selector: verification
    params: {}
- name: sendMessage
  endpoint:
    path: /v1/message/messages
    method: POST
- name: updateMessage
  endpoint:
    path: /v1/message/messages
    method: PUT
- name: getMessage
  endpoint:
    path: /v1/message/messages/{id}
    method: GET
- name: deleteMessage
  endpoint:
    path: /v1/message/messages/{id}
    method: DELETE
- name: searchMessages
  endpoint:
    path: /v1/message/messages:search
    method: POST
- name: getMessageV2
  endpoint:
    path: /v2/message/messages/{id}
    method: GET
    data_selector: _id
- name: trashMessage
  endpoint:
    path: /v1/message/messages/{id}/trash
    method: POST
- name: untrashMessage
  endpoint:
    path: /v1/message/messages/{id}/untrash
    method: POST
- name: markReadMessage
  endpoint:
    path: /v1/message/messages/{id}/read
    method: POST
- name: markUnreadMessage
  endpoint:
    path: /v1/message/messages/{id}/unread
    method: POST
- name: getUnread
  endpoint:
    path: /v1/message/messages/unread/{actor}
    method: GET
- name: searchThreads
  endpoint:
    path: /v1/message/threads:search
    method: POST
    data_selector: thread
    params: {}
- name: searchThreadsV2
  endpoint:
    path: /v2/message/threads:search
    method: POST
    data_selector: thread
    params: {}
- name: searchThreadsIds
  endpoint:
    path: /v1/message/threads:searchIds
    method: POST
    data_selector: thread
    params: {}
- name: thread
  endpoint:
    path: /v1/message/threads
    method: POST
    data_selector: thread
- name: thread_timeline
  endpoint:
    path: /v1/message/threads/{id}/timeline
    method: GET
    data_selector: timeline
- name: threadBulkActionsUnfavorite
  endpoint:
    path: /v1/message/threads/bulk:unfavorite
    method: POST
    data_selector: ids
- name: threadBulkActionsTrash
  endpoint:
    path: /v1/message/threads/bulk:trash
    method: POST
    data_selector: ids
- name: threadBulkActionsUntrash
  endpoint:
    path: /v1/message/threads/bulk:untrash
    method: POST
    data_selector: ids
- name: threadBulkActionsDelete
  endpoint:
    path: /v1/message/threads/bulk:delete
    method: POST
    data_selector: ids
- name: threadBulkActionsDone
  endpoint:
    path: /v1/message/threads/bulk:done
    method: POST
    data_selector: ids
- name: threadBulkActionsOpen
  endpoint:
    path: /v1/message/threads/bulk:open
    method: POST
    data_selector: ids
- name: markReadThread
  endpoint:
    path: /v1/message/threads/{id}/read
    method: POST
    data_selector: id
- name: markReadThreadV2
  endpoint:
    path: /v2/message/threads/{id}/read
    method: POST
    data_selector: success
    params: {}
- name: markUnreadThread
  endpoint:
    path: /v1/message/threads/{id}/unread
    method: POST
    data_selector: success
    params: {}
- name: assignThread
  endpoint:
    path: /v1/message/threads/{id}/assign
    method: POST
    data_selector: success
    params: {}
- name: unassignThread
  endpoint:
    path: /v1/message/threads/{id}/unassign
    method: POST
    data_selector: success
    params: {}
- name: assignUsers
  endpoint:
    path: /v1/message/threads/{id}/assign:users
    method: POST
    data_selector: success
    params: {}
- name: createDraft
  endpoint:
    path: /v1/message/drafts
    method: POST
    data_selector: success
    params: {}
- name: sendDraft
  endpoint:
    path: /v1/message/drafts:send
    method: POST
- name: thread
  endpoint:
    path: /threads
    method: GET
    data_selector: threads
- name: uploadFileV2
  endpoint:
    path: /v2/files/upload
    method: POST
- name: saveFileV2
  endpoint:
    path: /v2/files
    method: POST
- name: getFile
  endpoint:
    path: /v2/files/{id}
    method: GET
- name: deleteFile
  endpoint:
    path: /delete/v2/files/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: downloadFile
  endpoint:
    path: /get/v1/files/{id}/download
    method: GET
    data_selector: ''
    params: {}
- name: downloadS3File
  endpoint:
    path: /post/v1/files:downloadS3
    method: POST
    data_selector: ''
    params: {}
- name: downloadFiles
  endpoint:
    path: /post/v1/files:downloadFiles
    method: POST
    data_selector: ''
    params: {}
- name: verifyCustomDownloadUrl
  endpoint:
    path: /post/v1/files/download:verify
    method: POST
    data_selector: ''
    params: {}
- name: uploadFilePublic
  endpoint:
    path: /v1/files/public/upload
    method: POST
    data_selector: file_entity_id
    params: {}
- name: previewFile
  endpoint:
    path: /v1/files/{id}/preview
    method: GET
    data_selector: file_entity_id
    params: {}
- name: generatePublicLink
  endpoint:
    path: /v1/files/{id}/public/links
    method: POST
    data_selector: file_entity_id
    params: {}
- name: revokePublicLink
  endpoint:
    path: /v1/files/public/links/{id}
    method: DELETE
    data_selector: file_entity_id
    params: {}
- name: session
  endpoint:
    path: /v1/files/session
    method: get
    data_selector: Created File Entity
- name: deleteSession
  endpoint:
    path: /v1/files/session
    method: delete
    data_selector: Created File Entity
- name: fileFolders
  endpoint:
    path: /v1/entity/{id}/folders
    method: get
    data_selector: Created File Entity
- name: getFileFolders
  endpoint:
    path: /v1/entity/{id}/folders
    method: get
    data_selector: Created File Entity
- name: createFileFolder
  endpoint:
    path: /v1/entity/{id}/folders
    method: post
    data_selector: Created File Entity
- name: updateFileFolder
  endpoint:
    path: /v1/entity/{id}/folders/{folderSlug}
    method: put
    data_selector: Created File Entity
- name: deleteFileFolder
  endpoint:
    path: /v1/entity/{id}/folders/{folderSlug}
    method: delete
    data_selector: Created File Entity
- name: getFilesInFolder
  endpoint:
    path: /v1/entity/{id}/folders/{folderSlug}/files
    method: get
    data_selector: Created File Entity
- name: files
  endpoint:
    path: /v1/files
    method: POST
    data_selector: entity
    params: {}
- name: getJourneysByOrgId
  endpoint:
    path: /v1/journey/organization/{id}
    method: GET
- name: getJourney
  endpoint:
    path: /v1/journey/configuration/{id}
    method: GET
- name: removeJourney
  endpoint:
    path: /v1/journey/configuration/{id}
    method: DELETE
- name: getJourneyProducts
  endpoint:
    path: /v1/journey/products/{id}
    method: GET
- name: createJourney
  endpoint:
    path: /v1/journey/configuration
    method: POST
- name: updateJourney
  endpoint:
    path: /v1/journey/configuration
    method: PUT
- name: patchUpdateJourney
  endpoint:
    path: /v1/journey/configuration
    method: PATCH
- name: createJourneyV2
  endpoint:
    path: /v2/journey/configuration
    method: POST
    data_selector: journeyId
    params: {}
- name: searchJourneys
  endpoint:
    path: /v1/journey/configuration/search
    method: POST
    data_selector: journeyId
    params: {}
- name: generateDocument
  endpoint:
    path: /v1/journey/document:generate
    method: POST
    data_selector: journeyId
    params: {}
- name: getSettingsForJourney
  endpoint:
    path: /v1/journey/{id}/settings
    method: GET
    data_selector: journeyId
    params: {}
- name: getButtonOptions
  endpoint:
    path: /v1/journey/button-options
    method: GET
    data_selector: journeyId
    params: {}
- name: journey
  endpoint:
    path: /v2/journey/configuration
    method: PUT
    data_selector: journey
    params: {}
- name: journeyById
  endpoint:
    path: /v2/journey/configuration/{id}
    method: GET
    data_selector: journey
    params: {}
- name: removeJourney
  endpoint:
    path: /v2/journey/configuration/{id}
    method: DELETE
    data_selector: journey
    params: {}
- name: addresses_from_file
  endpoint:
    path: /v1/public/suggestions
    method: GET
    data_selector: results
    params: {}
- name: validate_addresses_file
  endpoint:
    path: /v1/suggestions:validate
    method: GET
    data_selector: results
    params: {}
- name: check_address_availability
  endpoint:
    path: /v1/public/availability:check
    method: GET
    data_selector: results
    params: {}
- name: validate_addresses_files
  endpoint:
    path: /v1/addresses-files:validate
    method: GET
    data_selector: results
    params: {}
- name: getTemplateMeta
  endpoint:
    path: /v2/documents:meta
    method: POST
- name: generateDocumentV2
  endpoint:
    path: /v2/documents:generate
    method: POST
- name: convertDocument
  endpoint:
    path: /v2/documents:convert
    method: POST
- name: flows
  endpoint:
    path: /v1/automation/flows
    method: GET
    data_selector: Bulk Job Info
    params: {}
- name: createFlow
  endpoint:
    path: /v1/automation/flows
    method: POST
    data_selector: Bulk Job Info
    params: {}
- name: batchGetFlows
  endpoint:
    path: /v1/automation/flows:batchGet
    method: POST
    data_selector: Bulk Job Info
    params: {}
- name: getFlow
  endpoint:
    path: /v1/automation/flows/{flow_id}
    method: GET
    data_selector: Bulk Job Info
    params: {}
- name: putFlow
  endpoint:
    path: /v1/automation/flows/{flow_id}
    method: PUT
    data_selector: Bulk Job Info
    params: {}
- name: executions
  endpoint:
    path: /v1/automation/executions
    method: get
    data_selector: records
    params: {}
- name: startExecution
  endpoint:
    path: /v1/automation/executions
    method: post
    data_selector: records
    params: {}
- name: getExecution
  endpoint:
    path: /v1/automation/executions/{execution_id}
    method: get
    data_selector: records
    params: {}
- name: cancelExecution
  endpoint:
    path: /v1/automation/executions/{execution_id}
    method: delete
    data_selector: records
    params: {}
- name: retriggerAction
  endpoint:
    path: /v1/automation/executions/{execution_id}/{action_id}/retrigger
    method: post
    data_selector: records
    params: {}
- name: bulkTriggerExecutions
  endpoint:
    path: /v1/automation/executions/bulk-jobs
    method: POST
    data_selector: Bulk Job Info
- name: getBulkJob
  endpoint:
    path: /v1/automation/executions/bulk-jobs/{job_id}
    method: GET
    data_selector: Bulk Job Info
- name: patchBulkJob
  endpoint:
    path: /v1/automation/executions/bulk-jobs/{job_id}
    method: PATCH
    data_selector: Bulk Job Info
- name: storeConfig
  endpoint:
    path: /v1/mappings
    method: POST
- name: getConfig
  endpoint:
    path: /v1/mappings/{id}
    method: GET
- name: deleteConfig
  endpoint:
    path: /v1/mappings/{id}
    method: DELETE
- name: getAllVersions
  endpoint:
    path: /v1/mappings/{id}/versions
    method: GET
- name: storeNewVersion
  endpoint:
    path: /v1/mappings/{id}/versions
    method: POST
- name: getConfigVersion
  endpoint:
    path: /v1/mappings/{id}/versions/{version}
    method: GET
- name: executeMapping
  endpoint:
    path: /v1/mappings:execute
    method: POST
- name: searchConfigs
  endpoint:
    path: /v1/mappings:search
    method: POST
- name: queryMappingHistory
  endpoint:
    path: /v1/mappings/history
    method: GET
    data_selector: records
    params: {}
- name: executeRelations
  endpoint:
    path: /v1/relations:execute
    method: POST
    data_selector: records
    params: {}
- name: getMappingConfig
  endpoint:
    path: /v2/mappings/{id}
    method: GET
    data_selector: records
    params: {}
- name: putMappingConfig
  endpoint:
    path: /v2/mappings/{id}
    method: PUT
    data_selector: records
    params: {}
- name: getCategories
  endpoint:
    path: /v1/template-variables/categories
    method: GET
    data_selector: records
    params:
      lang: de
- name: searchVariables
  endpoint:
    path: /v1/template-variables:search
    method: POST
    data_selector: records
    params:
      from: 0
      size: 25
      lang: de
- name: getVariableContext
  endpoint:
    path: /v1/template-variables:context
    method: POST
    data_selector: parameters
- name: replaceTemplates
  endpoint:
    path: /v1/template-variables:replace
    method: POST
    data_selector: outputs
- name: custom_variables
  endpoint:
    path: /v1/custom-variables
    method: GET
    data_selector: custom_variables
- name: custom_variable
  endpoint:
    path: /v1/custom-variables
    method: POST
    data_selector: id
- name: search_custom_variables
  endpoint:
    path: /v1/custom-variables:search
    method: POST
    data_selector: data
    params:
      from: 0
      size: 25
- name: custom_variable
  endpoint:
    path: /v1/custom-variables/{id}
    method: PUT
    data_selector: id
    params: {}
- name: custom_variable
  endpoint:
    path: /update_custom_variable
    method: POST
    data_selector: id
    params: {}
- name: custom_variable
  endpoint:
    path: /v1/custom-variables/{id}
    method: GET
    data_selector: id
    params:
      id: required
- name: delete_custom_variable
  endpoint:
    path: /delete/v1/custom-variables/{id}
    method: DELETE
    data_selector: Success
    params: {}
- name: get_default_table_config
  endpoint:
    path: /get/v1/custom-variables/order-table-blueprint
    method: GET
    data_selector: Success
    params: {}
- name: default_table_config
  endpoint:
    path: /default_table_config
    method: GET
    data_selector: config
    params: {}
- name: getCustomerMeters
  endpoint:
    path: /v1/metering/meter
    method: GET
    data_selector: data
- name: getMetersByContractId
  endpoint:
    path: /v1/metering/contract/meters/{contract_id}
    method: GET
    data_selector: data
    params:
      contract_id: required
- name: updateMeter
  endpoint:
    path: /v1/metering/meter/{id}
    method: PATCH
    data_selector: data
    params:
      id: required
- name: getMeter
  endpoint:
    path: /v1/metering/meter/{id}
    method: GET
    data_selector: data
    params:
      id: required
- name: getMeterCounters
  endpoint:
    path: /v1/metering/counter
    method: GET
    data_selector: data
    params:
      meter_id: required
- name: getCounterDetails
  endpoint:
    path: /v1/metering/counter/{counter_id}
    method: GET
    data_selector: data
    params:
      counter_id: required
- name: createMeterReading
  endpoint:
    path: /v1/metering/reading
    method: POST
    data_selector: data
- name: getAllowedReadingForMeter
  endpoint:
    path: /v1/metering/allowed/reading/{meter_id}
    method: GET
    data_selector: data
    params:
      meter_id: required
- name: getReadingsByInterval
  endpoint:
    path: /v1/metering/reading/{meter_id}/{counter_id}
    method: GET
    data_selector: data
    params:
      meter_id: required
      counter_id: required
- name: create_meter_readings
  endpoint:
    path: /v1/metering/readings
    method: POST
    data_selector: readings
- name: batch_write_readings
  endpoint:
    path: /v2/metering/readings
    method: POST
    data_selector: readings
- name: create_meter_reading_from_submission
  endpoint:
    path: /v1/metering/reading/submission
    method: POST
    data_selector: entity
- name: get_allowed_reading_for_meter
  endpoint:
    path: /v1/metering/allowed/reading/{meter_id}
    method: GET
    data_selector: data
- name: create_reading_with_meter
  endpoint:
    path: /v1/metering/reading/with-meter
    method: POST
    data_selector: readings
- name: get_readings_by_interval
  endpoint:
    path: /v1/metering/reading/{meter_id}/{counter_id}
    method: GET
    data_selector: data
- name: update_meter_reading
  endpoint:
    path: /v1/metering/reading/{meter_id}/{counter_id}
    method: PUT
    data_selector: data
- name: meter_reading
  endpoint:
    path: /delete/v1/metering/reading/{meter_id}/{counter_id}
    method: DELETE
    data_selector: data
    params:
      timestamp: '2022-10-01T20:00:00.000Z'
- name: billing_events
  endpoint:
    path: /v1/billing/events
    method: GET
    data_selector: records
    params:
      from: 0
      size: 100
- name: contract_entity
  endpoint:
    path: /v1/billing/contracts
    method: POST
    data_selector: records
- name: contract
  endpoint:
    path: /v1/billing/contracts/{id}
    method: DELETE
- name: customer_balance
  endpoint:
    path: /v1/billing/customers/{id}/balance
    method: GET
- name: bulkSendMessage
  endpoint:
    path: /v1/email-template/templates:bulkSendMessage
    method: POST
- name: saveTemplate
  endpoint:
    path: /v1/email-template/templates
    method: POST
- name: getTemplateDetail
  endpoint:
    path: /v1/email-template/templates/{id}
    method: GET
- name: updateTemplateDetail
  endpoint:
    path: /v1/email-template/templates/{id}
    method: PUT
- name: revertToOriginalTemplate
  endpoint:
    path: /v1/email-template/templates:revert
    method: POST
    data_selector: result
    params: {}
- name: replaceVariablesAsync
  endpoint:
    path: /v1/email-template/templates:replaceAsync
    method: POST
    data_selector: result
    params: {}
- name: max_allowed_limit
  endpoint:
    path: /v1/workflows/limits/max-allowed
    method: GET
- name: workflow_definitions
  endpoint:
    path: /v1/workflows/definitions
    method: GET
- name: create_workflow_definition
  endpoint:
    path: /v1/workflows/definitions
    method: POST
- name: specific_workflow_definition
  endpoint:
    path: /v1/workflows/definitions/{definitionId}
    method: GET
- name: update_workflow_definition
  endpoint:
    path: /v1/workflows/definitions/{definitionId}
    method: PUT
- name: delete_workflow_definition
  endpoint:
    path: /v1/workflows/definitions/{definitionId}
    method: DELETE
- name: workflow_closing_reasons
  endpoint:
    path: /v1/workflows/definitions/{definitionId}/closing-reasons
    method: GET
- name: set_workflow_closing_reasons
  endpoint:
    path: /v1/workflows/definitions/{definitionId}/closing-reasons
    method: PATCH
- name: list_flow_templates
  endpoint:
    path: /v2/flows/templates
    method: GET
- name: create_flow_template
  endpoint:
    path: /v2/flows/templates
    method: POST
- name: search_flow_templates
  endpoint:
    path: /v2/flows/templates:search
    method: POST
- name: specific_flow_template
  endpoint:
    path: /v2/flows/templates/{flowId}
    method: GET
- name: updateFlowTemplate
  endpoint:
    path: /v2/flows/templates/{flowId}
    method: PUT
    data_selector: status
    params: {}
- name: deleteFlowTemplate
  endpoint:
    path: /v2/flows/templates/{flowId}
    method: DELETE
    data_selector: ''
    params: {}
- name: duplicateFlowTemplate
  endpoint:
    path: /v2/flows/templates/{flowId}/duplicate
    method: POST
    data_selector: ''
    params: {}
- name: getAllClosingReasons
  endpoint:
    path: /v1/workflows/closing-reasons
    method: GET
    data_selector: ''
    params:
      includeInactive: 'true'
- name: createClosingReason
  endpoint:
    path: /v1/workflows/closing-reasons
    method: POST
    data_selector: ''
    params: {}
- name: getClosingReason
  endpoint:
    path: /v2/workflows/closing-reasons/{reasonId}
    method: GET
    data_selector: ''
    params: {}
- name: updateClosingReason
  endpoint:
    path: /v2/workflows/closing-reasons/{reasonId}
    method: PATCH
    data_selector: ''
    params: {}
- name: deleteClosingReason
  endpoint:
    path: /v2/workflows/closing-reasons/{reasonId}
    method: DELETE
    data_selector: ''
    params: {}
- name: changeReasonStatus
  endpoint:
    path: /v1/workflows/closing-reasons/{reasonId}
    method: PATCH
    data_selector: ''
    params: {}
- name: executions
  endpoint:
    path: /v1/workflows/executions
    method: GET
    data_selector: executions
    params: {}
- name: create_execution
  endpoint:
    path: /v1/workflows/executions
    method: POST
    data_selector: execution
    params: {}
- name: get_execution
  endpoint:
    path: /v1/workflows/executions/{executionId}
    method: GET
    data_selector: execution
    params: {}
- name: update_execution
  endpoint:
    path: /v1/workflows/executions/{executionId}
    method: PATCH
    data_selector: execution
    params: {}
- name: delete_execution
  endpoint:
    path: /v1/workflows/executions/{executionId}
    method: DELETE
    data_selector: execution
    params: {}
- name: updateStep
  endpoint:
    path: /v1/workflows/executions/{executionId}/steps/{stepId}
    method: PATCH
    data_selector: task
    params: {}
- name: deleteStep
  endpoint:
    path: /v1/workflows/executions/{executionId}/steps/{stepId}
    method: DELETE
    data_selector: ''
    params: {}
- name: searchSteps
  endpoint:
    path: /v1/workflows/executions/steps/search
    method: POST
    data_selector: ''
    params: {}
- name: getClosingReasonExecution
  endpoint:
    path: /v1/workflows/executions/{executionId}/closing-reasons
    method: GET
    data_selector: ''
    params: {}
- name: startFlowExecution
  endpoint:
    path: /v2/flows/executions
    method: POST
    data_selector: ''
    params: {}
- name: getFlowExecution
  endpoint:
    path: /v2/flows/executions/{execution_id}
    method: GET
    data_selector: ''
    params: {}
- name: patchFlowExecution
  endpoint:
    path: /v2/flows/executions/{execution_id}
    method: PATCH
    data_selector: ''
    params: {}
- name: deleteFlowExecution
  endpoint:
    path: /v2/flows/executions/{execution_id}
    method: DELETE
    data_selector: ''
    params: {}
- name: searchFlowExecutions
  endpoint:
    path: /v2/flows/executions:search
    method: POST
    data_selector: ''
    params: {}
- name: patchTask
  endpoint:
    path: /v2/flows/executions/{execution_id}/tasks/{task_id}
    method: PATCH
    data_selector: task
- name: runTaskAutomation
  endpoint:
    path: /v2/flows/executions/{execution_id}/tasks/{task_id}/automation:run
    method: POST
    data_selector: ''
- name: executeTask
  endpoint:
    path: /v2/flows/executions/{execution_id}/tasks/{task_id}/execute
    method: POST
    data_selector: ''
- name: patchPhase
  endpoint:
    path: /v2/flows/executions/{execution_id}/phases/{phase_id}
    method: PATCH
    data_selector: ''
- name: addTask
  endpoint:
    path: /v2/flows/executions/{execution_id}/tasks
    method: POST
    data_selector: task
- name: cancelSchedule
  endpoint:
    path: /v2/flows/executions/{execution_id}/schedules/{schedule_id}
    method: POST
    data_selector: ''
- name: createNote
  endpoint:
    path: /v1/note
    method: POST
- name: getNote
  endpoint:
    path: /v1/note/{id}
    method: GET
- name: patchNote
  endpoint:
    path: /v1/note/{id}
    method: PATCH
- name: updateNote
  endpoint:
    path: /v1/note/{id}
    method: PUT
- name: deleteNote
  endpoint:
    path: /v1/note/{id}
    method: DELETE
- name: deleteNote
  endpoint:
    path: /v1/note/{id}
    method: DELETE
- name: searchNotesByContext
  endpoint:
    path: /v1/notes:search
    method: POST
- name: getNotesByContext
  endpoint:
    path: /v1/notes/{entity_id}
    method: GET
- name: getNoteContexts
  endpoint:
    path: /v1/note/{id}/context
    method: GET
- name: pinNote
  endpoint:
    path: /v1/note/{id}/pin
    method: POST
- name: addNoteReaction
  endpoint:
    path: /v1/note/{id}/reaction
    method: POST
- name: removeNoteReaction
  endpoint:
    path: /v1/note/{id}/reaction/{emoji_shortcode}
    method: DELETE
- name: toggleNoteReactions
  endpoint:
    path: /v1/note/{id}/reactions/toggle
    method: POST
    data_selector: emojis
- name: publishConsentEvent
  endpoint:
    path: /v1/consent/publish
    method: POST
- name: listConsentEvents
  endpoint:
    path: /v1/consent/{identifier}
    method: GET
- name: handleOptInWithToken
  endpoint:
    path: /v1/opt-in/{token}
    method: GET
- name: handleOptOutWithTokenConfirmation
  endpoint:
    path: /v1/opt-out/{token}
    method: POST
- name: handleOptOutWithToken
  endpoint:
    path: /v1/opt-out/{token}
    method: GET
- name: approvePartner
  endpoint:
    path: /v1/partners/{id}/approve
    method: POST
- name: rejectPartner
  endpoint:
    path: /v1/partners/{id}/reject
    method: POST
- name: searchAssignables
  endpoint:
    path: /v1/partners/assignables:search
    method: POST
- name: batchGet
  endpoint:
    path: /v1/partners/assignables:batchGet
    method: POST
- name: getPartnerByToken
  endpoint:
    path: /v1/partner-directory/public/getPartnerByToken
    method: GET
- name: activatePartner
  endpoint:
    path: /v1/partner-directory/public/activate
    method: POST
- name: searchGeolocationForText
  endpoint:
    path: /v1/geolocation/text:search
    method: POST
- name: invitePartnerV2
  endpoint:
    path: /v2/partners/{id}/invite
    method: POST
- name: getNotificationsV2
  endpoint:
    path: /v2/notification/notifications
    method: GET
- name: createNotification
  endpoint:
    path: /v1/notification/notifications
    method: POST
- name: getNotifications
  endpoint:
    path: /v1/notification/notifications
    method: GET
- name: getNotification
  endpoint:
    path: /v1/notification/notifications/{id}
    method: GET
- name: markAllAsRead
  endpoint:
    path: /v1/notification/notifications/mark
    method: PUT
- name: markAsRead
  endpoint:
    path: /v1/notification/notifications/{id}/mark
    method: PUT
- name: getTotalUnread
  endpoint:
    path: /v1/notification/unreads
    method: GET
- name: jobs
  endpoint:
    path: /v2/blueprint-manifest/jobs
    method: GET
    data_selector: resources
- name: createExport
  endpoint:
    path: /v1/blueprint-manifest/jobs:createExport
    method: POST
- name: uploadManifest
  endpoint:
    path: /v1/blueprint-manifest:uploadManifest
    method: POST
- name: createPlan
  endpoint:
    path: /v1/blueprint-manifest/jobs:createPlan
    method: POST
- name: listInstalledManifests
  endpoint:
    path: /v1/blueprint-manifest/manifests
    method: GET
    data_selector: resources
- name: getManifest
  endpoint:
    path: /v1/blueprint-manifest/manifests/{manifest_id}
    method: GET
    data_selector: resources
- name: updateManifest
  endpoint:
    path: /v1/blueprint-manifest/manifests/{manifest_id}
    method: PUT
    data_selector: resources
- name: deleteManifest
  endpoint:
    path: /v1/blueprint-manifest/manifests/{manifest_id}
    method: DELETE
    data_selector: resources
- name: listBlueprints
  endpoint:
    path: /v2/blueprint-manifest/blueprints
    method: GET
    data_selector: resources
- name: getBlueprint
  endpoint:
    path: /v2/blueprint-manifest/blueprints/{blueprint_id}
    method: GET
    data_selector: resources
- name: createBlueprint
  endpoint:
    path: /v2/blueprint-manifest/blueprints
    method: POST
    data_selector: resources
- name: installBlueprint
  endpoint:
    path: /v2/blueprint-manifest/blueprint:install
    method: POST
    data_selector: resources
- name: updateBlueprint
  endpoint:
    path: /v2/blueprint-manifest/blueprints/{blueprint_id}
    method: PUT
    data_selector: resources
    params: {}
- name: deleteBlueprint
  endpoint:
    path: /v2/blueprint-manifest/blueprints/{blueprint_id}
    method: DELETE
    data_selector: resources
    params: {}
- name: exportBlueprint
  endpoint:
    path: /v2/blueprint-manifest/blueprints/{blueprint_id}:export
    method: POST
    data_selector: resources
    params: {}
- name: addBlueprintResource
  endpoint:
    path: /v2/blueprint-manifest/blueprints/{blueprint_id}/resources
    method: POST
    data_selector: resources
    params:
      add_dependencies: false
- name: syncDependencies
  endpoint:
    path: /v2/blueprint-manifest/blueprints/{blueprint_id}/resources:syncDependencies
    method: POST
    data_selector: resources
    params: {}
- name: bulkAddBlueprintResources
  endpoint:
    path: /v2/blueprint-manifest/blueprints/{blueprint_id}/resources/bulk
    method: POST
    data_selector: resources
    params:
      add_dependencies: false
- name: bulkUpdateBlueprintResources
  endpoint:
    path: /v2/blueprint-manifest/blueprints/{blueprint_id}/resources/bulk
    method: PUT
    data_selector: resources
    params: {}
- name: bulkDeleteBlueprintResources
  endpoint:
    path: /v2/blueprint-manifest/blueprints/{blueprint_id}/resources/bulk
    method: DELETE
    data_selector: resources
    params: {}
- name: updateBlueprintResource
  endpoint:
    path: /v2/blueprint-manifest/blueprints/{blueprint_id}/resources/{resource_id}
    method: PUT
    data_selector: resources
    params: {}
- name: deleteBlueprintResource
  endpoint:
    path: /v2/blueprint-manifest/blueprints/{blueprint_id}/resources/{resource_id}
    method: DELETE
    data_selector: resources
    params: {}
- name: designs
  endpoint:
    path: /v1/designs
    method: GET
    data_selector: designs
    params: {}
- name: addDesign
  endpoint:
    path: /v1/designs
    method: POST
    data_selector: design
    params: {}
- name: getDesign
  endpoint:
    path: /v1/designs/{designId}
    method: GET
    data_selector: design
    params: {}
- name: deleteDesign
  endpoint:
    path: /v1/designs/{designId}
    method: DELETE
    data_selector: design
    params: {}
- name: updateDesign
  endpoint:
    path: /v1/designs/{designId}
    method: PUT
    data_selector: design
    params: {}
- name: getThemeFromDesign
  endpoint:
    path: /v1/designs/{designId}/parse
    method: GET
    data_selector: theme
    params: {}
- name: uploadFile
  endpoint:
    path: /v1/designs/files
    method: POST
    data_selector: file
    params: {}
- name: getFiles
  endpoint:
    path: /v1/designs/files
    method: GET
    data_selector: files
    params: {}
- name: removeConsumer
  endpoint:
    path: /v1/designs/removeConsumer/{application}/{designId}
    method: PUT
    data_selector: none
    params: {}
- name: createProduct
  endpoint:
    path: /v1/product
    method: POST
    data_selector: Coupon entity response
- name: getProduct
  endpoint:
    path: /v1/product/{productId}
    method: GET
    data_selector: Coupon entity response
- name: deleteProduct
  endpoint:
    path: /v1/product/{productId}
    method: DELETE
    data_selector: Coupon entity response
- name: patchProduct
  endpoint:
    path: /v1/product/{productId}
    method: PATCH
    data_selector: Coupon entity response
- name: createPrice
  endpoint:
    path: /v1/price
    method: POST
    data_selector: ''
    params: {}
- name: updateProduct
  endpoint:
    path: /v1/product/{productId}
    method: PUT
    data_selector: ''
    params: {}
- name: getPrice
  endpoint:
    path: /v1/price/{priceId}
    method: GET
- name: deletePrice
  endpoint:
    path: /v1/price/{priceId}
    method: DELETE
- name: patchPrice
  endpoint:
    path: /v1/price/{priceId}
    method: PATCH
- name: price
  endpoint:
    path: /v1/price/{priceId}
    method: PUT
    data_selector: coupon
    params: {}
- name: tax
  endpoint:
    path: /v1/tax/{taxId}
    method: GET
    data_selector: tax
    params: {}
- name: createCoupon
  endpoint:
    path: /coupon
    method: POST
    data_selector: coupon
- name: updateTax
  endpoint:
    path: /tax/{taxId}
    method: PUT
    data_selector: tax
- name: patchTax
  endpoint:
    path: /tax/{taxId}
    method: PATCH
    data_selector: tax
- name: getCoupon
  endpoint:
    path: /v1/coupon/{couponId}
    method: GET
    data_selector: coupon
    params:
      hydrate: 'false'
      strict: 'false'
- name: deleteCoupon
  endpoint:
    path: /v1/coupon/{couponId}
    method: DELETE
    data_selector: coupon
- name: patchCoupon
  endpoint:
    path: /v1/coupon/{couponId}
    method: PATCH
    data_selector: coupon
- name: updateCoupon
  endpoint:
    path: /v1/coupon/{couponId}
    method: PUT
    data_selector: coupon
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: records
- name: price
  endpoint:
    path: /prices
    method: GET
    data_selector: records
- name: tax
  endpoint:
    path: /taxes
    method: GET
    data_selector: records
- name: coupon
  endpoint:
    path: /coupons
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /v1/contact
    method: POST
    data_selector: contact
    params: {}
- name: get_contact
  endpoint:
    path: /v1/contact/{contactId}
    method: GET
    data_selector: contact
    params: {}
- name: update_contact
  endpoint:
    path: /v1/contact/{contactId}
    method: PUT
    data_selector: contact
    params: {}
- name: delete_contact
  endpoint:
    path: /v1/contact/{contactId}
    method: DELETE
    data_selector: contact
    params: {}
- name: patchContact
  endpoint:
    path: /patch/v1/contact/{contactId}
    method: PATCH
    data_selector: contact
    params: {}
- name: createAccount
  endpoint:
    path: /post/v1/account
    method: POST
    data_selector: account
    params: {}
- name: getAccount
  endpoint:
    path: /get/v1/account/{accountId}
    method: GET
    data_selector: account
    params:
      hydrate: boolean
- name: deleteAccount
  endpoint:
    path: /delete/v1/account/{accountId}
    method: DELETE
    data_selector: account
    params: {}
- name: updateAccount
  endpoint:
    path: /put/v1/account/{accountId}
    method: PUT
    data_selector: account
    params: {}
- name: account
  endpoint:
    path: /patch/v1/account/{accountId}
    method: PATCH
    data_selector: account
    params:
      accountId: required
- name: createOpportunity
  endpoint:
    path: /v1/opportunity
    method: POST
    data_selector: opportunity_title
- name: getOpportunity
  endpoint:
    path: /v1/opportunity/{opportunityId}
    method: GET
    data_selector: opportunity_title
- name: deleteOpportunity
  endpoint:
    path: /v1/opportunity/{opportunityId}
    method: DELETE
    data_selector: opportunity_title
- name: updateOpportunity
  endpoint:
    path: /v1/opportunity/{opportunityId}
    method: PUT
    data_selector: response
    params:
      opportunityId: required
- name: patchOpportunity
  endpoint:
    path: /v1/opportunity/{opportunityId}
    method: PATCH
    data_selector: response
    params:
      opportunityId: required
- name: opportunity
  endpoint:
    path: /opportunity
    method: GET
    data_selector: records
    params: {}
- name: createOrder
  endpoint:
    path: /v1/order
    method: POST
- name: getOrder
  endpoint:
    path: /v1/order/{orderId}
    method: GET
- name: delete_order
  endpoint:
    path: /v1/order/{orderId}
    method: DELETE
    data_selector: Order entity response
- name: update_order
  endpoint:
    path: /v1/order/{orderId}
    method: PUT
    data_selector: Order entity response
- name: patch_order
  endpoint:
    path: /v1/order/{orderId}
    method: PATCH
    data_selector: Order entity response
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: create_kanban_board
  endpoint:
    path: /v1/kanban/board
    method: POST
- name: get_all_kanban_boards
  endpoint:
    path: /v1/kanban/boards
    method: GET
- name: get_kanban_board
  endpoint:
    path: /v1/kanban/board/{boardId}
    method: GET
- name: update_kanban_board
  endpoint:
    path: /v1/kanban/board/{boardId}
    method: PUT
- name: patch_kanban_board
  endpoint:
    path: /v1/kanban/board/{boardId}
    method: PATCH
- name: delete_kanban_board
  endpoint:
    path: /v1/kanban/board/{boardId}
    method: DELETE
- name: flows_autocomplete
  endpoint:
    path: /v1/kanban/query/flows:autocomplete
    method: GET
- name: execute_flows_query
  endpoint:
    path: /v1/kanban/query/flows:execute
    method: POST
- name: Get all validation rules by organization Id
  endpoint:
    path: /v1/validation-rules
    method: GET
- name: Create Validation Rule
  endpoint:
    path: /v1/validation-rules
    method: POST
- name: Get validation rule by ID
  endpoint:
    path: /v1/validation-rules/{ruleId}
    method: GET
- name: Update Validation Rule (partial update)
  endpoint:
    path: /v1/validation-rules/{ruleId}
    method: PATCH
- name: Delete Validation Rule
  endpoint:
    path: /v1/validation-rules/{ruleId}
    method: DELETE
- name: Add a reference to the used_by array
  endpoint:
    path: /v1/validation-rules/{ruleId}/used-by
    method: POST
- name: Remove a reference from the used_by array
  endpoint:
    path: /v1/validation-rules/{ruleId}/used-by
    method: DELETE
notes:
- Audit logs are a pricing feature for enterprise tiers.
- To access the audit logs, you need to have the `audit_log:view` permission.
- Requires setup of connected app in Epilot
- API may return 429 if too many requests are made
- All entities are soft deleted by default. To force an actual deletion, provide `purge:true`.
- Checkout mode defaults to create_order if omitted
- Fast checkout is supported, considered transient and has no cart persistence
- None*EpilotPublicAuth*
- 'Request Body schema: application/json required'
- Some objects like Contact may return nulls in deeply nested fields
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Credentials saved
- Invalid payload
- Save credentials
- order_number is formatted as 'OR YYYY/XXXXXX'
- Some objects may return nulls in deeply nested fields
- 'Request body schema: application/json required'
- Service for configuring webhooks on different events
- Uses EpilotAuth for authorization
- Lucene syntax supported for search queries
- Requires authorization setup with EpilotAuth and EpilotOrg
- The operation replaces all existing assigned users in thread.
- EpilotAuth and EpilotOrg are required for authorization
- Supports message topics and user assignment.
- Not yet implemented; This API would fetch all the public links that are previously
  generated for a file
- Session API for cookie authentication
- Allows using preview urls directly in img src for private files using cookie authentication
- Deprecated endpoint for saving files.
- Default language code is 'de'.
- Custom variable ID is required in the path parameters.
- Requires setup of connected app in api
- This endpoint allows to initiate an asynchronous process in replacing the template
  details & generating the documents.
- Authorization required for all endpoints
- Update opportunity entity (replace completely) by a given id and given payload
- Patch opportunity entity (partial update) by a given id and given payload
- Default source_type is manual
- Default status is draft
errors:
- '404: Group not found'
- '422: User Group has no users assigned, thus it cannot advance to next user'
- '400: Invalid request'
- '429: Too many requests'
- '400: Invalid payload'
- '403: Forbidden, no credentials found for the given integration / organization'
- '404: Credentials not found'
- '204: Credentials saved'
- '204: Credentials deleted'
- '204: Success - replay event'
- '404: No events found'
- '500: Other errors'
- 403 Forbidden
- 404 Not found
- '403 Forbidden: Check authorization'
- '201: Created File Entity'
- '403: The requested resource is forbidden'
- '404: The requested resource was not found'
- '403 Forbidden: Check authorization credentials.'
- '403 Forbidden: Ensure proper authorization.'
- '400: The request could not be validated'
- '401: Could not authenticate the user'
- '403: The user is not allowed to access this resource'
- '500: Internal Server Error'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: bad request'
- '500: Internal server error'
- '400: Validation Errors'
- '401: Authentication Errors'
- '404: No design found'
- '400: Any error based on client data errors'
- '500: Any error based on the server-side'
auth_info:
  mentioned_objects:
  - EpilotAuth
  - EpilotOrg
  - EpilotPublicAuth
client:
  base_url: https://template-variables-api.sls.epilot.io
  auth:
    type: EpilotAuth
    location: header
    header_name: Authorization
source_metadata: null
