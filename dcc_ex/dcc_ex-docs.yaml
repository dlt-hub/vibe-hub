resources:
- name: EX-CommandStation
  endpoint:
    path: /ex-commandstation/index.html
    method: GET
    data_selector: records
    params: {}
- name: EX-Installer
  endpoint:
    path: /ex-installer/index.html
    method: GET
    data_selector: records
    params: {}
- name: EXRAIL
  endpoint:
    path: /exrail/index.html
    method: GET
    data_selector: records
    params: {}
- name: EX-WebThrottle
  endpoint:
    path: /ex-webthrottle/index.html
    method: GET
    data_selector: records
    params: {}
- name: EX-Turntable
  endpoint:
    path: /ex-turntable/index.html
    method: GET
    data_selector: records
    params: {}
- name: EX-IOExpander
  endpoint:
    path: /ex-ioexpander/index.html
    method: GET
    data_selector: records
    params: {}
- name: EX-DCCInspector
  endpoint:
    path: /ex-dccinspector/index.html
    method: GET
    data_selector: records
    params: {}
- name: EX-FastClock
  endpoint:
    path: /ex-fastclock/index.html
    method: GET
    data_selector: records
    params: {}
- name: EX-Toolbox
  endpoint:
    path: /ex-toolbox/index.html
    method: GET
    data_selector: records
    params: {}
- name: track_connection
  endpoint:
    path: /track/connection
    method: POST
    data_selector: status
- name: power_connection
  endpoint:
    path: /power/connection
    method: POST
    data_selector: status
- name: motor_driver
  endpoint:
    path: /ex-commandstation/motor-driver
    method: GET
    data_selector: motor_driver_options
- name: wifi
  endpoint:
    path: /ex-commandstation/wifi
    method: GET
    data_selector: wifi_options
- name: display_type
  endpoint:
    path: /ex-commandstation/display-type
    method: GET
    data_selector: display_options
- name: EX-CommandStation
  endpoint:
    path: /ex-commandstation
    method: GET
    data_selector: details
- name: EX-CommandStation
  endpoint:
    path: /EX-CommandStation
    method: GET
    data_selector: records
- name: DCC-EX EX-MotorShield8874
  endpoint:
    path: /motorboards/ex-motor-shield-8874.html
    method: GET
- name: Arduino Motor Shield
  endpoint:
    path: /motorboards/arduino-motor-shield.html
    method: GET
- name: Deek-Robot
  endpoint:
    path: /motorboards/deek-robot-motor-shield.html
    method: GET
- name: Flashtree
  endpoint:
    path: /motorboards/flashtree-motor-shield.html
    method: GET
- name: DIY More L298NH
  endpoint:
    path: /motorboards/diy-more-l298nh-motor-shield.html
    method: GET
- name: YFRobot L298P
  endpoint:
    path: /motorboards/yfrobot-l298p.html
    method: GET
- name: L298N (dual)
  endpoint:
    path: /motorboards/L298N-motor-board-setup.html
    method: GET
- name: Dual Module H-bridge MOSFET IRF3205
  endpoint:
    path: /motorboards/IRF3205-motor-board-setup.html
    method: GET
- name: Pololu MC33926
  endpoint:
    path: /motorboards/pololu-mc33926.html
    method: GET
- name: MiniIBT L6201P (single)
  endpoint:
    path: /motorboards/miniibt-motor-driver-l6201p.html
    method: GET
- name: BTS7960 IBT_2 (single)
  endpoint:
    path: /motorboards/IBT_2-motor-board-setup.html
    method: GET
- name: Keyes/Fundumoto
  endpoint:
    path: /motorboards/keyes-fundumoto.html
    method: GET
- name: Makerfabs H-Bridge
  endpoint:
    path: /motorboards/makerfabs-h-bridge-motor-shield.html
    method: GET
- name: Velleman KA03/VMA03
  endpoint:
    path: /motorboards/velleman-ka03-kit-vma03.html
    method: GET
- name: DFRobot 2x2A DC Motor Shield (DRI0009)
  endpoint:
    path: /motorboards/dfrobot-2x2a-dc-motor-shield.html
    method: GET
- name: DCC-EX EX-MotorShield8874 RevA
  endpoint:
    path: motorboards/ex-motor-shield-8874.html
    method: GET
- name: Arduino Motor Shield R3
  endpoint:
    path: motorboards/arduino-motor-shield.html
    method: GET
- name: Deek-Robot Motor Shield
  endpoint:
    path: motorboards/deek-robot-motor-shield.html
    method: GET
- name: Flashtree Motor Shield
  endpoint:
    path: motorboards/flashtree-motor-shield.html
    method: GET
- name: DIY More L298NH
  endpoint:
    path: motorboards/diy-more-l298nh-motor-shield.html
    method: GET
- name: HC-05/06 Bluetooth Modules
  endpoint:
    path: '#'
    method: GET
- name: Using Bluetooth with your ESP32 EX-CommandStation
  endpoint:
    path: '#'
    method: GET
- name: EX-CommandStation
  endpoint:
    path: /download/ex-commandstation
    method: GET
    data_selector: records
    params: {}
- name: EX-IOExpander
  endpoint:
    path: /download/ex-ioexpander
    method: GET
    data_selector: records
    params: {}
- name: EX-Turntable
  endpoint:
    path: /download/ex-turntable
    method: GET
    data_selector: records
    params: {}
- name: Motor Driver
  endpoint:
    path: /select_motordriver
    method: GET
    data_selector: records
- name: Display Driver
  endpoint:
    path: /select_display
    method: GET
    data_selector: records
- name: WiFi Configuration
  endpoint:
    path: /configure_wifi
    method: GET
    data_selector: records
- name: Track Modes
  endpoint:
    path: /set_track_modes
    method: GET
    data_selector: records
- name: Advanced Config
  endpoint:
    path: /advanced_config
    method: GET
    data_selector: records
- name: mySetup
  endpoint:
    path: /mySetup.h
    method: POST
    data_selector: commands
    params: {}
- name: power_management
  endpoint:
    path: /api/power_management
    method: POST
    data_selector: power_commands
    params: {}
- name: track_manager
  endpoint:
    path: /api/track_manager
    method: GET
    data_selector: track_configuration
    params: {}
- name: cab_commands
  endpoint:
    path: /cab/commands
    method: GET
    data_selector: commands
    params: {}
- name: roster_commands
  endpoint:
    path: /roster/commands
    method: GET
    data_selector: roster
    params: {}
- name: turnouts_points
  endpoint:
    path: /turnouts/points
    method: GET
    data_selector: turnouts
    params: {}
- name: turntables_traversers
  endpoint:
    path: /turntables/traversers
    method: GET
    data_selector: turntables
    params: {}
- name: routes_automations
  endpoint:
    path: /routes/automations
    method: GET
    data_selector: routes
    params: {}
- name: system_information
  endpoint:
    path: /system/information
    method: GET
    data_selector: system
    params: {}
- name: AccessoryDecoderControl
  endpoint:
    path: /accessory/decoder
    method: POST
    data_selector: response
    params: {}
- name: SensorStatus
  endpoint:
    path: /sensors/status
    method: GET
    data_selector: response
    params: {}
- name: SignalControl
  endpoint:
    path: /signals/control
    method: POST
    data_selector: response
    params: {}
- name: turnout_point
  endpoint:
    path: /define_turnout_point
    method: POST
    data_selector: response
    params: {}
- name: turntable_traverser
  endpoint:
    path: /define_turntable_traverser
    method: POST
    data_selector: response
    params: {}
- name: sensor
  endpoint:
    path: /sensors
    method: POST
    data_selector: sensor_definition
    params: {}
- name: output
  endpoint:
    path: /outputs
    method: POST
    data_selector: output_definition
    params: {}
- name: turnouts
  endpoint:
    path: /turnouts
    method: GET
    data_selector: records
- name: signals
  endpoint:
    path: /signals
    method: GET
    data_selector: records
- name: sensors
  endpoint:
    path: /sensors
    method: GET
    data_selector: records
- name: inputs_outputs
  endpoint:
    path: /inputs_outputs
    method: GET
    data_selector: records
- name: automation_animation
  endpoint:
    path: /automation_animation
    method: GET
    data_selector: records
- name: turntables
  endpoint:
    path: /turntables
    method: GET
    data_selector: records
- name: Arduino Mega2560 Pins to avoid
  endpoint:
    path: /microcontrollers/arduino_mega2560/pins_to_avoid
    method: GET
    data_selector: pins
    params: {}
- name: Arduino Mega2560 Pins to use
  endpoint:
    path: /microcontrollers/arduino_mega2560/pins_to_use
    method: GET
    data_selector: pins
    params: {}
- name: Arduino Mega2560 Pins to use with caution
  endpoint:
    path: /microcontrollers/arduino_mega2560/pins_to_use_with_caution
    method: GET
    data_selector: pins
    params: {}
- name: Arduino Uno Pins to avoid
  endpoint:
    path: /microcontrollers/arduino_uno/pins_to_avoid
    method: GET
    data_selector: pins
    params: {}
- name: Arduino Uno Pins to use
  endpoint:
    path: /microcontrollers/arduino_uno/pins_to_use
    method: GET
    data_selector: pins
    params: {}
- name: Arduino Uno Pins to use with caution
  endpoint:
    path: /microcontrollers/arduino_uno/pins_to_use_with_caution
    method: GET
    data_selector: pins
    params: {}
- name: MCP23017 digital I/O expander
  endpoint:
    path: /io_expanders/mcp23017
    method: GET
    data_selector: expander_info
    params: {}
- name: MCP23008 digital I/O expander
  endpoint:
    path: /io_expanders/mcp23008
    method: GET
    data_selector: expander_info
    params: {}
- name: PCF8574 digital I/O expander
  endpoint:
    path: /io_expanders/pcf8574
    method: GET
    data_selector: expander_info
    params: {}
- name: PCA9685 PWM servo module
  endpoint:
    path: /io_expanders/pca9685
    method: GET
    data_selector: expander_info
    params: {}
- name: EX-IOExpander
  endpoint:
    path: /io_expanders/ex_io_expander
    method: GET
    data_selector: expander_info
    params: {}
- name: VL53L0X time-of-flight sensor
  endpoint:
    path: /sensors/vl53l0x
    method: GET
    data_selector: sensor_info
    params: {}
- name: EX-Turntable
  endpoint:
    path: /other_devices/ex_turntable
    method: GET
    data_selector: device_info
    params: {}
- name: I2C_device_info
  endpoint:
    path: /i2c/device/info
    method: GET
    data_selector: devices
    params: {}
- name: I2C_device_configuration
  endpoint:
    path: /i2c/device/configuration
    method: GET
    data_selector: configurations
    params: {}
- name: LCD
  endpoint:
    path: /configuration/lcd
    method: GET
    data_selector: displays
    params: {}
- name: OLED
  endpoint:
    path: /configuration/oled
    method: GET
    data_selector: displays
    params: {}
- name: servo_turnout
  endpoint:
    path: /servo_turnout
    method: POST
    data_selector: servo_turnouts
    params: {}
- name: servo_signal
  endpoint:
    path: /servo_signal
    method: POST
    data_selector: servo_signals
    params: {}
- name: servo_animation
  endpoint:
    path: /servo_animation
    method: POST
    data_selector: servo_animations
    params: {}
- name: pin_allocation
  endpoint:
    path: /SupportedDevices
    method: GET
    data_selector: Vpin to physical pin mappings
    params: {}
- name: EXIOExpander
  endpoint:
    path: /services/data/vXX.X/sobjects/EXIOExpander
    method: GET
    data_selector: records
    params: {}
- name: Arduino Nano
  endpoint:
    path: /arduino/nano
    method: GET
    data_selector: pin_allocations
    params: {}
- name: Arduino Pro Mini
  endpoint:
    path: /arduino/pro_mini
    method: GET
    data_selector: pin_allocations
    params: {}
- name: Arduino Uno
  endpoint:
    path: /arduino/uno
    method: GET
    data_selector: pin_allocations
    params: {}
- name: Arduino Mega2560
  endpoint:
    path: /arduino/mega2560
    method: GET
    data_selector: pin_allocations
    params: {}
- name: STMicroelectronics NUCLEO-F411RE
  endpoint:
    path: /stmicroelectronics/nucleo_f411re
    method: GET
    data_selector: pin_allocations
    params: {}
- name: NUCLEO-F412ZG
  endpoint:
    path: /devices/nucleo-f412zg
    method: GET
    data_selector: pin_allocations
- name: Arduino Zero
  endpoint:
    path: /devices/arduino-zero
    method: GET
    data_selector: pin_allocations
- name: STM32F103C8T6
  endpoint:
    path: /devices/stm32f103c8t6
    method: GET
    data_selector: pin_allocations
- name: EXIOINIT
  endpoint:
    path: /initialise
    method: POST
    data_selector: response
    params: {}
- name: EXIORDY
  endpoint:
    path: /ready
    method: GET
    data_selector: status
    params: {}
- name: EXIODPUP
  endpoint:
    path: /digital/pullup
    method: POST
    data_selector: response
    params: {}
- name: EXIOVER
  endpoint:
    path: /version
    method: GET
    data_selector: version_info
    params: {}
- name: EXIORDAN
  endpoint:
    path: /analogue/read
    method: GET
    data_selector: analogue_values
    params: {}
- name: EXIOWRD
  endpoint:
    path: /digital/write
    method: POST
    data_selector: response
    params: {}
- name: EXIORDD
  endpoint:
    path: /digital/read
    method: GET
    data_selector: digital_values
    params: {}
- name: EXIOENAN
  endpoint:
    path: /analogue/enable
    method: POST
    data_selector: response
    params: {}
- name: EXIOINITA
  endpoint:
    path: /analogue/init
    method: POST
    data_selector: response
    params: {}
- name: EXIOPINS
  endpoint:
    path: /pins
    method: GET
    data_selector: pin_info
    params: {}
- name: EXIOWRAN
  endpoint:
    path: /analogue/write
    method: POST
    data_selector: response
    params: {}
- name: EXIOERR
  endpoint:
    path: /error
    method: GET
    data_selector: error_info
    params: {}
- name: EX-Turntable
  endpoint:
    path: /EX-Turntable
    method: GET
    data_selector: overview
- name: connection_summary
  endpoint:
    path: /connection/summary
    method: GET
    data_selector: connections
    params: {}
- name: two_wire_stepper_driver
  endpoint:
    path: /two_wire_stepper_driver
    method: GET
    data_selector: drivers
    params: {}
- name: EX-Turntable Device Driver
  endpoint:
    path: /EX-Turntable/device/driver
    method: POST
    data_selector: device_info
    params: {}
- name: turntable_commands
  endpoint:
    path: /turntable/commands
    method: POST
    data_selector: response
    params: {}
- name: EX-Turntable
  endpoint:
    path: /ex-turntable
    method: GET
    data_selector: overview
- name: EX-IOExpander
  endpoint:
    path: /ex-ioexpander
    method: GET
    data_selector: overview
- name: EX-FastClock
  endpoint:
    path: /ex-fastclock
    method: GET
    data_selector: overview
- name: throttle
  endpoint:
    path: /throttle
    method: GET
    data_selector: throttle_data
    params: {}
- name: routes_automation
  endpoint:
    path: /routes
    method: GET
    data_selector: routes_data
    params: {}
- name: turnouts_points
  endpoint:
    path: /turnouts
    method: GET
    data_selector: turnouts_data
    params: {}
- name: cv_programmer
  endpoint:
    path: /cv
    method: GET
    data_selector: cv_data
    params: {}
- name: locomotives
  endpoint:
    path: /locomotives
    method: GET
    data_selector: locomotives_data
    params: {}
- name: function_maps
  endpoint:
    path: /function_maps
    method: GET
    data_selector: function_maps_data
    params: {}
- name: settings
  endpoint:
    path: /settings
    method: GET
    data_selector: settings_data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: track_connection
  endpoint:
    path: /track/connection
    method: GET
    data_selector: records
- name: power_connection
  endpoint:
    path: /power/connection
    method: GET
    data_selector: records
- name: command_station
  endpoint:
    path: /status
    method: GET
    data_selector: status
    params: {}
- name: EX-CommandStation
  endpoint:
    path: /download/ex-commandstation
    method: GET
- name: EX-WebThrottle
  endpoint:
    path: /ex-webthrottle
    method: GET
- name: Loco Status
  endpoint:
    path: /loco/status
    method: GET
    data_selector: status
- name: Track Manager
  endpoint:
    path: /track/manager
    method: GET
    data_selector: tracks
- name: Servo Motor Testing
  endpoint:
    path: /servo/testing
    method: GET
    data_selector: servos
- name: Sensor Testing
  endpoint:
    path: /sensor/testing
    method: GET
    data_selector: sensors
- name: Current Meter
  endpoint:
    path: /current/meter
    method: GET
    data_selector: current
- name: turnout
  endpoint:
    path: /services/data/vXX.X/sobjects/Turnout
    method: GET
    data_selector: records
    params: {}
- name: servo_turnout
  endpoint:
    path: /services/data/vXX.X/sobjects/ServoTurnout
    method: GET
    data_selector: records
    params: {}
- name: pin_turnout
  endpoint:
    path: /services/data/vXX.X/sobjects/PinTurnout
    method: GET
    data_selector: records
    params: {}
- name: servo_signal
  endpoint:
    path: /services/servo_signal
    method: POST
    data_selector: SERVO_SIGNAL
    params: {}
- name: sequences
  endpoint:
    path: /sequences
    method: GET
    data_selector: sequences
    params: {}
- name: CLEAR_ALL_STASH
  endpoint:
    path: /CLEAR_ALL_STASH
    method: GET
    data_selector: none
    params: {}
- name: PICKUP_STASH
  endpoint:
    path: /PICKUP_STASH
    method: GET
    data_selector: none
    params:
      stash_id: id of the stash location to store the value (0-???)
- name: turnout
  endpoint:
    path: /turnout
    method: POST
    data_selector: turnouts
- name: pin_turnout
  endpoint:
    path: /pin_turnout
    method: POST
    data_selector: pin_turnouts
- name: servo_turnout
  endpoint:
    path: /servo_turnout
    method: POST
    data_selector: servo_turnouts
- name: virtual_turnout
  endpoint:
    path: /virtual_turnout
    method: POST
    data_selector: virtual_turnouts
- name: DCC Accessory Decoder Control
  endpoint:
    path: /dcc/accessory/decoder/control
    method: GET
    data_selector: commands
    params: {}
- name: Locos and Tracks
  endpoint:
    path: /locos/tracks
    method: GET
    data_selector: locos
    params: {}
- name: set_track
  endpoint:
    path: /set_track
    method: POST
    data_selector: response
    params: {}
- name: set_power
  endpoint:
    path: /set_power
    method: POST
    data_selector: response
    params: {}
- name: set_freq
  endpoint:
    path: /set_freq
    method: POST
    data_selector: response
    params: {}
- name: on_overload
  endpoint:
    path: /on_overload
    method: POST
    data_selector: response
    params: {}
- name: after_overload
  endpoint:
    path: /after_overload
    method: POST
    data_selector: response
    params: {}
- name: reserve
  endpoint:
    path: /reserve
    method: POST
    data_selector: response
    params: {}
- name: free
  endpoint:
    path: /free
    method: POST
    data_selector: response
    params: {}
- name: if_reserve
  endpoint:
    path: /if_reserve
    method: POST
    data_selector: response
    params: {}
- name: Motor Driver Modes
  endpoint:
    path: /trackmanager/motor_driver_modes
    method: GET
    data_selector: modes
    params: {}
- name: DCC Requirements
  endpoint:
    path: /trackmanager/dcc_requirements
    method: GET
    data_selector: requirements
    params: {}
- name: DC Requirements
  endpoint:
    path: /trackmanager/dc_requirements
    method: GET
    data_selector: requirements
    params: {}
- name: Route
  endpoint:
    path: /trackmanager/route
    method: POST
    data_selector: routes
    params: {}
- name: Automation
  endpoint:
    path: /trackmanager/automation
    method: POST
    data_selector: automations
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: track_power_state
  endpoint:
    path: /track_power
    method: GET
    data_selector: states
- name: loco_commands
  endpoint:
    path: /loco_commands
    method: POST
    data_selector: commands
- name: turnouts
  endpoint:
    path: /turnouts
    method: GET
    data_selector: turnout_ids
- name: automations
  endpoint:
    path: /automations
    method: GET
    data_selector: automation_ids
- name: roster
  endpoint:
    path: /roster
    method: GET
    data_selector: roster_entries
- name: turntables
  endpoint:
    path: /turntables
    method: GET
    data_selector: turntable_ids
- name: Engine Driver
  endpoint:
    path: /throttles/software/engine-driver.html
    method: GET
- name: wiThrottle
  endpoint:
    path: /throttles/software/withrottle.html
    method: GET
- name: JMRI
  endpoint:
    path: /throttles/software/jmri.html
    method: GET
- name: decoder_programming
  endpoint:
    path: /program/decoder
    method: GET
    data_selector: records
    params: {}
- name: Loco Roster
  endpoint:
    path: /add_loco_roster
    method: POST
    data_selector: roster_entries
- name: turntable
  endpoint:
    path: /ex-turntable
    method: GET
    data_selector: turntable_data
    params: {}
- name: traverser
  endpoint:
    path: /ex-traverser
    method: GET
    data_selector: traverser_data
    params: {}
- name: turntable_positions
  endpoint:
    path: /turntable/positions
    method: GET
    data_selector: positions
- name: traverser_positions
  endpoint:
    path: /traverser/positions
    method: GET
    data_selector: positions
- name: TTRoute1
  endpoint:
    path: /TTRoute1
    method: EX_TURNTABLE
    data_selector: Roundhouse stall 1
- name: TTRoute2
  endpoint:
    path: /TTRoute2
    method: EX_TURNTABLE
    data_selector: Roundhouse stall 2
- name: TTRoute3
  endpoint:
    path: /TTRoute3
    method: EX_TURNTABLE
    data_selector: Roundhouse stall 3
- name: TTRoute4
  endpoint:
    path: /TTRoute4
    method: EX_TURNTABLE
    data_selector: Roundhouse stall 4
- name: TTRoute5
  endpoint:
    path: /TTRoute5
    method: EX_TURNTABLE
    data_selector: Roundhouse stall 5
- name: TTRoute6
  endpoint:
    path: /TTRoute6
    method: EX_TURNTABLE
    data_selector: Roundhouse stall 6
- name: TTRoute7
  endpoint:
    path: /TTRoute7
    method: EX_TURNTABLE
    data_selector: Yard connection
- name: TTRoute8
  endpoint:
    path: /TTRoute8
    method: EX_TURNTABLE
    data_selector: Home turntable
- name: TTRoute1
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute1
    method: GET
    data_selector: records
    params: {}
- name: TTRoute2
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute2
    method: GET
    data_selector: records
    params: {}
- name: TTRoute3
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute3
    method: GET
    data_selector: records
    params: {}
- name: TTRoute4
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute4
    method: GET
    data_selector: records
    params: {}
- name: TTRoute5
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute5
    method: GET
    data_selector: records
    params: {}
- name: TTRoute6
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute6
    method: GET
    data_selector: records
    params: {}
- name: TTRoute7
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute7
    method: GET
    data_selector: records
    params: {}
- name: TTRoute8
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute8
    method: GET
    data_selector: records
    params: {}
- name: TTRoute9
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute9
    method: GET
    data_selector: records
    params: {}
- name: TTRoute10
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute10
    method: GET
    data_selector: records
    params: {}
- name: TTRoute11
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute11
    method: GET
    data_selector: records
    params: {}
- name: TTRoute12
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute12
    method: GET
    data_selector: records
    params: {}
- name: TTRoute13
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute13
    method: GET
    data_selector: records
    params: {}
- name: TTRoute14
  endpoint:
    path: /services/data/vXX.X/sobjects/TTRoute14
    method: GET
    data_selector: records
    params: {}
- name: turnouts
  endpoint:
    path: /services/data/vXX.X/turnouts
    method: GET
    data_selector: records
- name: sensors
  endpoint:
    path: /services/data/vXX.X/sensors
    method: GET
    data_selector: records
- name: signals
  endpoint:
    path: /services/data/vXX.X/signals
    method: GET
    data_selector: records
- name: main_track
  endpoint:
    path: /route/main_track
    method: POST
    data_selector: route
    params: {}
- name: station_siding
  endpoint:
    path: /route/station_siding
    method: POST
    data_selector: route
    params: {}
- name: ROUTE_1
  endpoint:
    path: /route/1
    method: POST
    data_selector: route
- name: ROUTE_2
  endpoint:
    path: /route/2
    method: POST
    data_selector: route
- name: turnouts
  endpoint:
    path: /services/data/v1.0/turnouts
    method: GET
    data_selector: records
- name: signals
  endpoint:
    path: /services/data/v1.0/signals
    method: GET
    data_selector: records
- name: blocks
  endpoint:
    path: /services/data/v1.0/blocks
    method: GET
    data_selector: records
- name: dealers
  endpoint:
    path: /dealers
    method: GET
    data_selector: suppliers
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: microcontroller_list
  endpoint:
    path: /microcontroller/list
    method: GET
    data_selector: records
- name: motor_board_list
  endpoint:
    path: /motor/board/list
    method: GET
    data_selector: records
- name: decoder_list
  endpoint:
    path: /dcc/decoders
    method: GET
    data_selector: decoders
    params: {}
- name: Using Buck Converters
  endpoint:
    path: /using-buck-converters
    method: GET
- name: High Power Buck Converters
  endpoint:
    path: /high-power-buck-converters
    method: GET
- name: 4 Pack of Buck Regular Converters
  endpoint:
    path: /pack-of-buck-regular-converters
    method: GET
- name: Cheap Buck Converter with Display
  endpoint:
    path: /cheap-buck-converter-with-display-5
    method: GET
- name: Using Diodes to Reduce Voltage
  endpoint:
    path: /using-diodes-to-reduce-voltage
    method: GET
- name: EX-CommandStation
  endpoint:
    path: /ex-commandstation
    method: GET
    data_selector: products
    params: {}
- name: Supported WiFi Shields and Boards
  endpoint:
    path: /supported-wifi
    method: GET
    data_selector: wifi_boards
    params: {}
- name: Supported Ethernet Boards
  endpoint:
    path: /supported-ethernet
    method: GET
    data_selector: ethernet_boards
    params: {}
- name: Arduino Network Shield 2
  endpoint:
    path: /ethernet-boards/arduino-network-shield-2
    method: GET
    data_selector: records
- name: Wiznet WIZ850IO
  endpoint:
    path: /ethernet-boards/wiznet-wiz850io
    method: GET
    data_selector: records
- name: Sunfounder Ethernet Shield
  endpoint:
    path: /ethernet-boards/sunfounder-ethernet-shield
    method: GET
    data_selector: records
- name: Nano Ethernet Shield
  endpoint:
    path: /ethernet-boards/nano-ethernet-shield
    method: GET
    data_selector: records
- name: multiplexer_support
  endpoint:
    path: /multiplexer/support
    method: GET
    data_selector: supported_multiplexers
    params: {}
- name: i2c_base_addresses
  endpoint:
    path: /multiplexer/i2c_base_addresses
    method: GET
    data_selector: base_addresses
    params: {}
- name: device_locating
  endpoint:
    path: /multiplexer/device_locating
    method: GET
    data_selector: located_devices
    params: {}
- name: multiplexer_usage
  endpoint:
    path: /multiplexer/usage
    method: GET
    data_selector: usage_examples
    params: {}
- name: MCP23017
  endpoint:
    path: /mcp23017
    method: GET
    data_selector: records
    params: {}
- name: PCA9685
  endpoint:
    path: /pca9685
    method: GET
    data_selector: records
    params: {}
- name: DFPlayer
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: speed_step_configuration
  endpoint:
    path: /speed-step-configuration
    method: GET
    data_selector: commands
    params: {}
- name: diagnostic_traces
  endpoint:
    path: /diagnostic-traces
    method: GET
    data_selector: commands
    params: {}
- name: exceptional_circumstances
  endpoint:
    path: /exceptional-circumstances
    method: GET
    data_selector: commands
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: DCC_modes
  endpoint:
    path: /api/dcc_modes
    method: GET
    data_selector: modes
- name: DC_modes
  endpoint:
    path: /api/dc_modes
    method: GET
    data_selector: modes
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: EX-CommandStation
  endpoint:
    path: /ex-commandstation
    method: GET
    data_selector: records
- name: EX-Installer
  endpoint:
    path: /ex-installer
    method: GET
    data_selector: records
- name: EXRAIL
  endpoint:
    path: /exrail
    method: GET
    data_selector: records
- name: EX-WebThrottle
  endpoint:
    path: /ex-webthrottle
    method: GET
    data_selector: records
- name: EX-Turntable
  endpoint:
    path: /ex-turntable
    method: GET
    data_selector: records
- name: EX-IOExpander
  endpoint:
    path: /ex-ioexpander
    method: GET
    data_selector: records
- name: EX-DCCInspector
  endpoint:
    path: /ex-dccinspector
    method: GET
    data_selector: records
- name: EX-FastClock
  endpoint:
    path: /ex-fastclock
    method: GET
    data_selector: records
- name: EX-Toolbox
  endpoint:
    path: /ex-toolbox
    method: GET
    data_selector: records
- name: EX-CommandStation
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
    params: {}
- name: track_connection
  endpoint:
    path: /track
    method: POST
    data_selector: track_status
- name: power_connection
  endpoint:
    path: /power
    method: POST
    data_selector: power_status
- name: WiFi Configuration
  endpoint:
    path: /wifi/configuration
    method: GET
    data_selector: configuration
    params: {}
- name: EX-CommandStation
  endpoint:
    path: /ex-commandstation
    method: GET
- name: motor_driver
  endpoint:
    path: /motor/driver
    method: GET
    data_selector: motor_types
    params: {}
- name: wifi_configuration
  endpoint:
    path: /wifi/config
    method: GET
    data_selector: wifi_options
    params: {}
- name: Engine Driver
  endpoint:
    path: /throttles/software/engine-driver
    method: GET
- name: WiThrottle
  endpoint:
    path: /throttles/software/withrottle
    method: GET
- name: EX-WebThrottle
  endpoint:
    path: /ex-webthrottle
    method: GET
- name: config.h
- name: myAutomation.h
- name: mySetup.h
- name: I2C Configuration
  endpoint:
    path: /configure/i2c
    method: GET
    data_selector: config
    params: {}
- name: Arduino Nano
  endpoint:
    path: /arduino/nano/pin_allocations
    method: GET
- name: Arduino Pro Mini
  endpoint:
    path: /arduino/pro_mini/pin_allocations
    method: GET
- name: Arduino Uno
  endpoint:
    path: /arduino/uno/pin_allocations
    method: GET
- name: Arduino Mega2560
  endpoint:
    path: /arduino/mega2560/pin_allocations
    method: GET
- name: STMicroelectronics NUCLEO-F411RE
  endpoint:
    path: /stmicroelectronics/nucleo_f411re/pin_allocations
    method: GET
- name: Nucleo_F412ZG
  endpoint:
    path: /devices/nucleo_f412zg
    method: GET
    data_selector: pin_allocations
- name: Arduino_Zero
  endpoint:
    path: /devices/arduino_zero
    method: GET
    data_selector: pin_allocations
- name: STM32F103C8T6_Bluepill
  endpoint:
    path: /devices/stm32f103c8t6_bluepill
    method: GET
    data_selector: pin_allocations
- name: EX-IOExpander
  endpoint:
    path: /index.html
    method: GET
    data_selector: records
    params: {}
- name: stepper_controller
  endpoint:
    path: /api/stepper_controller
    method: POST
    data_selector: result
    params: {}
- name: hall_effect_sensor
  endpoint:
    path: /api/hall_effect_sensor
    method: GET
    data_selector: status
    params: {}
- name: dual_relay_board
  endpoint:
    path: /api/dual_relay_board
    method: PUT
    data_selector: operation_result
    params: {}
- name: turntable_positions
  endpoint:
    path: /turntable/positions
    method: GET
    data_selector: positions
    params: {}
- name: EX-CommandStation
  endpoint:
    path: /install
    method: GET
- name: motor_driver
  endpoint:
    path: /configure/motor_driver
    method: GET
    data_selector: motor_driver_options
- name: wifi
  endpoint:
    path: /configure/wifi
    method: GET
    data_selector: wifi_options
- name: display
  endpoint:
    path: /configure/display
    method: GET
    data_selector: display_options
- name: EX-WebThrottle
  endpoint:
    path: /ex-webthrottle
    method: GET
    data_selector: records
- name: Connection
  endpoint:
    path: /connection
    method: GET
    data_selector: servers
    params: {}
- name: CV Programming
  endpoint:
    path: /cv_programming
    method: GET
    data_selector: programming_options
    params: {}
- name: Speed Matching
  endpoint:
    path: /speed_matching
    method: GET
    data_selector: matching_options
    params: {}
- name: Loco Status
  endpoint:
    path: /loco_status
    method: GET
    data_selector: loco_updates
    params: {}
- name: Track Manager
  endpoint:
    path: /track_manager
    method: GET
    data_selector: track_channels
    params: {}
- name: Servo Motor
  endpoint:
    path: /servo_motor
    method: GET
    data_selector: servo_settings
    params: {}
- name: Sensor Testing
  endpoint:
    path: /sensor_testing
    method: GET
    data_selector: sensor_data
    params: {}
- name: Current Meter
  endpoint:
    path: /current_meter
    method: GET
    data_selector: current_values
    params: {}
- name: myAutomation
  endpoint:
    path: /myAutomation.h
    method: POST
    data_selector: script
    params: {}
- name: roster
  endpoint:
    path: /services/data/vXX.X/sobjects/Roster
    method: GET
    data_selector: records
    params: {}
- name: turnouts
  endpoint:
    path: /services/data/vXX.X/sobjects/Turnouts
    method: GET
    data_selector: records
    params: {}
- name: servos
  endpoint:
    path: /services/data/vXX.X/sobjects/Servos
    method: GET
    data_selector: records
    params: {}
- name: sensors
  endpoint:
    path: /services/data/vXX.X/sobjects/Sensors
    method: GET
    data_selector: records
    params: {}
- name: signals
  endpoint:
    path: /services/data/vXX.X/sobjects/Signals
    method: GET
    data_selector: records
    params: {}
- name: servo_signal
  endpoint:
    path: /path/to/servo_signal
    method: POST
    data_selector: servo_signal_data
- name: servo_animation
  endpoint:
    path: /path/to/servo_animation
    method: POST
    data_selector: servo_animation_data
- name: sequence
  endpoint:
    path: /sequences
    method: GET
    data_selector: sequences
- name: AUTOMATION
  endpoint:
    path: /automation
    method: POST
    data_selector: automation
    params: {}
- name: ROUTE
  endpoint:
    path: /route
    method: POST
    data_selector: route
    params: {}
- name: SEQUENCE
  endpoint:
    path: /sequence
    method: POST
    data_selector: sequence
    params: {}
- name: CLEAR_ALL_STASH
  endpoint:
    path: /CLEAR_ALL_STASH
    method: GET
    data_selector: none
    params: {}
- name: PICKUP_STASH
  endpoint:
    path: /PICKUP_STASH
    method: GET
    data_selector: none
    params:
      stash_id: id of the stash location to store the value (0-???)
- name: turnout
  endpoint:
    path: /turnout
    method: POST
    data_selector: turnout_id
- name: pin_turnout
  endpoint:
    path: /pin_turnout
    method: POST
    data_selector: turnout_id
- name: servo_turnout
  endpoint:
    path: /servo_turnout
    method: POST
    data_selector: turnout_id
- name: virtual_turnout
  endpoint:
    path: /virtual_turnout
    method: POST
    data_selector: turnout_id
- name: ifclosed
  endpoint:
    path: /ifclosed
    method: GET
    data_selector: turnout_id
- name: ifthrown
  endpoint:
    path: /ifthrown
    method: GET
    data_selector: turnout_id
- name: onclose
  endpoint:
    path: /onclose
    method: POST
    data_selector: turnout_id
- name: onthrow
  endpoint:
    path: /onthrow
    method: POST
    data_selector: turnout_id
- name: close
  endpoint:
    path: /close
    method: POST
    data_selector: turnout_id
- name: throw
  endpoint:
    path: /throw
    method: POST
    data_selector: turnout_id
- name: toggle_turnout
  endpoint:
    path: /toggle_turnout
    method: POST
    data_selector: turnout_id
- name: turntable
  endpoint:
    path: /api/turntable
    method: GET
    data_selector: turntables
- name: rotary_encoder
  endpoint:
    path: /api/rotary_encoder
    method: GET
    data_selector: encoders
- name: JMRI_SENSOR
  endpoint:
    path: /path/to/jmri_sensor
    method: GET
    data_selector: records
    params: {}
- name: AT
  endpoint:
    path: /path/to/at
    method: GET
    data_selector: records
    params: {}
- name: AFTER
  endpoint:
    path: /path/to/after
    method: GET
    data_selector: records
    params: {}
- name: ATTIMEOUT
  endpoint:
    path: /path/to/attimeout
    method: GET
    data_selector: records
    params: {}
- name: IF
  endpoint:
    path: /path/to/if
    method: GET
    data_selector: records
    params: {}
- name: IFNOT
  endpoint:
    path: /path/to/ifnot
    method: GET
    data_selector: records
    params: {}
- name: IFTIMEOUT
  endpoint:
    path: /path/to/iftimeout
    method: GET
    data_selector: records
    params: {}
- name: ATGTE
  endpoint:
    path: /path/to/atgte
    method: GET
    data_selector: records
    params: {}
- name: ATLT
  endpoint:
    path: /path/to/atlt
    method: GET
    data_selector: records
    params: {}
- name: IFGTE
  endpoint:
    path: /path/to/ifgte
    method: GET
    data_selector: records
    params: {}
- name: IFLT
  endpoint:
    path: /path/to/iflt
    method: GET
    data_selector: records
    params: {}
- name: LATCH
  endpoint:
    path: /path/to/latch
    method: GET
    data_selector: records
    params: {}
- name: UNLATCH
  endpoint:
    path: /path/to/unlatch
    method: GET
    data_selector: records
    params: {}
- name: ONBUTTON
  endpoint:
    path: /path/to/onbutton
    method: GET
    data_selector: records
    params: {}
- name: ONSENSOR
  endpoint:
    path: /path/to/onsensor
    method: GET
    data_selector: records
    params: {}
- name: ONACTIVATE
  endpoint:
    path: /ONACTIVATE
    method: GET
    data_selector: parameters
    params: {}
- name: ONACTIVATEL
  endpoint:
    path: /ONACTIVATEL
    method: GET
    data_selector: parameters
    params: {}
- name: ONDEACTIVATE
  endpoint:
    path: /ONDEACTIVATE
    method: GET
    data_selector: parameters
    params: {}
- name: ONDEACTIVATEL
  endpoint:
    path: /ONDEACTIVATEL
    method: GET
    data_selector: parameters
    params: {}
- name: ACTIVATE
  endpoint:
    path: /ACTIVATE
    method: GET
    data_selector: parameters
    params: {}
- name: ACTIVATEL
  endpoint:
    path: /ACTIVATEL
    method: GET
    data_selector: parameters
    params: {}
- name: DEACTIVATE
  endpoint:
    path: /DEACTIVATE
    method: GET
    data_selector: parameters
    params: {}
- name: DEACTIVATEL
  endpoint:
    path: /DEACTIVATEL
    method: GET
    data_selector: parameters
    params: {}
- name: DCCACTIVATE
  endpoint:
    path: /DCCACTIVATE
    method: GET
    data_selector: parameters
    params: {}
- name: XFON
  endpoint:
    path: /XFON
    method: GET
    data_selector: parameters
    params: {}
- name: XFOFF
  endpoint:
    path: /XFOFF
    method: GET
    data_selector: parameters
    params: {}
- name: XFTOGGLE
  endpoint:
    path: /XFTOGGLE
    method: GET
    data_selector: parameters
    params: {}
- name: track_configuration
  endpoint:
    path: /track/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: block_reservation
  endpoint:
    path: /block/reserve
    method: POST
    data_selector: reservation
    params: {}
- name: Motor Driver Outputs
  endpoint:
    path: /motor_driver_outputs
    method: GET
    data_selector: outputs
    params: {}
- name: track_configuration
  endpoint:
    path: /track/configuration
    method: GET
    data_selector: status
    params: {}
- name: automation_scripts
  endpoint:
    path: /automation/scripts
    method: POST
    data_selector: result
    params: {}
- name: throttle_commands
  endpoint:
    path: /throttle/commands
    method: GET
    data_selector: commands
    params: {}
- name: turnouts
  endpoint:
    path: /turnouts
    method: GET
    data_selector: turnouts
    params: {}
- name: automations_routes
  endpoint:
    path: /automations_routes
    method: GET
    data_selector: automations
    params: {}
- name: roster_information
  endpoint:
    path: /roster
    method: GET
    data_selector: roster
    params: {}
- name: turntables_traversers
  endpoint:
    path: /turntables
    method: GET
    data_selector: turntables
    params: {}
- name: Engine Driver
  endpoint:
    path: /throttles/software/engine-driver
    method: GET
    data_selector: records
- name: wiThrottle
  endpoint:
    path: /throttles/software/withrottle
    method: GET
    data_selector: records
- name: JMRI
  endpoint:
    path: /throttles/software/jmri
    method: GET
    data_selector: records
- name: loco_roster
  endpoint:
    path: /add_loco_roster
    method: POST
    data_selector: roster_entries
    params: {}
- name: Turnout/Point
  endpoint:
    path: /services/data/vXX.X/sobjects/TurnoutPoint
    method: GET
    data_selector: records
    params: {}
- name: Sensor
  endpoint:
    path: /services/data/vXX.X/sobjects/Sensor
    method: GET
    data_selector: records
    params: {}
- name: Block
  endpoint:
    path: /services/data/vXX.X/sobjects/Block
    method: GET
    data_selector: records
    params: {}
- name: turntable
  endpoint:
    path: /EX-Turntable
    method: GET
    data_selector: records
    params: {}
- name: traverser
  endpoint:
    path: /EX-Traverser
    method: GET
    data_selector: records
    params: {}
- name: turntable_positions
  endpoint:
    path: /api/turntable/positions
    method: GET
    data_selector: positions
    params: {}
- name: traverser_positions
  endpoint:
    path: /api/traverser/positions
    method: GET
    data_selector: positions
    params: {}
- name: turnouts
  endpoint:
    path: /turnouts
    method: GET
    data_selector: records
- name: sensors
  endpoint:
    path: /sensors
    method: GET
    data_selector: records
- name: signals
  endpoint:
    path: /signals
    method: GET
    data_selector: records
- name: main_track
  endpoint:
    path: /route/1
    method: GET
    data_selector: route
    params: {}
- name: station_siding
  endpoint:
    path: /route/2
    method: GET
    data_selector: route
    params: {}
notes:
- DCC-EX is for more than just controlling trains.
- You can control your entire layout from one command station.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Power output is off by default when you first plug in the EX-CSB1 to prevent power
  from being applied to your layout before everything is ready.
- Default to Access Point (AP) mode for quick setup.
- Using WiFi (OR Ethernet) to talk between JMRI and EX‑CommandStation is complex,
  slow and functionally limited and, while it generally works, it is NOT SUPPORTED.
- Some objects like Contact may return nulls in deeply nested fields
- Select the correct motor driver type that you have installed.
- You can choose between Station Mode and Access Point Mode for WiFi configuration.
- Compatible with various throttle options including Engine Driver and WiThrottle
- Locos Can’t Respond to Throttle Commands on the Programming Track!
- The EX‑CommandStation / Booster One Express comes preloaded with the Command Station
  software, so you can start using it right out of the box.
- Ensure your accessories are compatible with I2C and check the DCC-EX website for
  supported devices.
- For advanced I2C accessories like sensors or GPIO expanders, you may need to manually
  configure them via the EX‑CommandStation software.
- The Instructions on the following pages assume that that you will use a WiFi Shield.
- Requires JMRI installed on a computer.
- It is very important that isolate the power between the two devices.
- The Arduino Mega only needs around 7V to operate. Any voltage over that is wasted
  as heat and can burn out the regulator on the board.
- Ensure USB Cable is connected from your computer to the EX‑CommandStation.
- The EX‑CSB1 will generally be supplied with a OLED 128 X 64
- Enabling the Start with Power on option will cause the EX‑CommandStation to automatically
  start with the track power on.
- Be aware that the Espressif firmware shipped with Duinopeak ESP8266 WiFi Expansion
  and ESP-01 or ESP-01S devices probably will NOT work with EX‑CommandStation out
  of the box.
- The recommended Makerfabs ESP8266 WiFi Shield is now shipping with the correct firmware
  version and will work with EX‑CommandStation without modification.
- Some people have experienced problems with v3.8.5 of the flash download tool when
  following the instructions of the linked page. They have had more success with v2.3.
- The instructions on the following page have been proven to work on Linux PCs, so
  will probably work on macOS PCs. However, attempts to get them to work on Microsoft
  Windows PCs have so far been unsuccessful.
- Choose a microcontroller and motor driver based on your needs.
- Connectivity options include Direct Connection (USB), WiFi, Ethernet, and Bluetooth.
- It’s important to note that the newer generations of microcontrollers almost always
  operate at 3.3 volts rather than 5 volts.
- Some devices such as the ESP01 WiFi board and HC05/06 Bluetooth boards are already
  3v3 devices, so if you have set these up with level shifters, the level shifters
  will no longer be required when using 3v3 microcontrollers.
- If your board is not in the list of supported motor driver types, see the Motor
  Driver Configuration Guide.
- If you require multiple throttles or controllers connected simultaneously, you will
  need to have WiFi or Ethernet connectivity instead.
- A 64bit version of Linux is required to run the EX-Installer.
- Do not directly modify anything in the ex-installer folder.
- Use the latest version of EX-CommandStation unless directed otherwise.
- The case of characters in file names is very important.
- Use mySetup.h to configure startup commands.
- Commands must be entered in uppercase.
- The simplest method to connect is via USB cable or wirelessly with WiFi or Bluetooth.
- If connecting directly to Arduino pin serial ports, you need to ensure that the
  logic levels are compatible between the EX‑CommandStation and throttle.
- A common microcontroller used for DIY throttles is the ESP32, which is a 3.3V device.
- A simple resistor divider using a 1K and 2K resistor can solve this problem as per
  the provided diagram.
- The Tx pin of the throttle must connect to the Rx pin of the EX‑CommandStation,
  and likewise the Rx pin to Tx pin.
- The use of the JOIN function allows the DCC signal for the MAIN track to also be
  sent to the PROG track.
- The speedbyte value is different to the speed sent, as it is an encoded (1,7 bits)
  byte.
- Forgets one or all locos. The 'cab' parameter is optional.
- Both Address/Subaddress and linear addressing methods are available for controlling
  accessory decoders.
- By design, for safety reasons, the NMRA specification prevents locos from responding
  to throttle or function commands while on the service track.
- 'Turnouts may be in either of two states: Closed or Thrown.'
- If turnout definitions are stored in EEPROM, the turnout thrown/closed state is
  also written to EEPROM.
- Use <E> command to store definitions to EEPROM.
- Use <e> command to erase everything stored in EEPROM.
- I2C devices must have pull-up resistors connected to the SDA and SCL lines.
- Multiple I2C modules can effectively lower the pull-up resistor value.
- The I2C bus spec allows bus operation at various speeds - on the Arduino, speeds
  of 100kHz and 400kHz are generally used.
- Some devices are not specified to operate at the higher speed (e.g. PCF8574) although
  my testing hasn’t shown any problems.
- If you need to run with higher capacitance (e.g. for longer cables), then it is
  possible to reduce the I2C clock speed.
- Operation will continue even with I2C speeds of 32kHz or lower, although the scan
  interval for digital inputs, and the refresh time for I2C displays, may be noticeably
  slower at speeds lower than 32kHz.
- I2C displays come in all shapes and sizes, and often have variations in design and
  pinouts between different vendors and manufacturers.
- You MUST make sure to order TWO (2) parts for your LCD Displays. You need the display
  AND a backpack based on the PCF8574 controller chip.
- The pre-configured MCP23017 modules do not have interrupt mode enabled, so are polled
  on a cyclic basis.
- Servo motors require a separate 5V supply.
- PCA9685 supports controlling up to 16 servos.
- EX‑IOExpander is currently in its infancy and as such is considered to be in Alpha
  testing, so could (and likely will) change without notice, and possibly even be
  broken in some scenarios.
- EX-IOExpander is currently in Alpha testing and could change without notice.
- Uncomment to enable diag output
- Testing disables I2C connectivity to your EX‑CommandStation, so it is best to perform
  testing with your EX‑IOExpander device disconnected, and you will need to reboot
  it once testing is complete before it will be able to be connected again.
- Some objects may return nulls in deeply nested fields
- Default automatic phase switching works with EX-Turntable and can be controlled
  manually.
- Using the default ULN2003/28BYJ-48 stepper driver and motor combination is not recommended
  due to quality issues.
- Consider enforcing single direction rotation to mitigate accuracy issues.
- Ensure the power is off when making connections to the CommandStation and EX-Turntable.
- If EX-Turntable does not disable the stepper driver after movements complete, you
  may need to have the 'Enable' pin inverted.
- Recommended to use EX-CommandStation version 5.4.0 or later for the new turntable
  object.
- All examples utilize the same step counts as calculated in the tuning section.
- Using the EXRAIL ROUTE() command is still required to advertise turntable positions
  until throttle software is updated.
- It is recommended to utilize the virtual RESERVE() and FREE() functions to prevent
  interference during operation.
- If you have a need to use a stepper driver and motor combination that isn’t on the
  supported list and isn’t “pin-compatible” with an existing supported driver/motor
  combination, you may need to define a custom entry in 'config.h' to allow EX‑Turntable
  to work correctly.
- Prior to version 0.7.0 of EX‑Turntable, there was a slight modification to the AccelStepper
  library.
- Home and limit sensors are required for traverser mode.
- Ensure the stepper motor operates in the correct direction.
- Uses Emulator mode to run without hardware.
- 'Ready-To-Run: Pre-assembled, with no need for additional assembly or configuration'
- 'Enhanced Performance: Faster WiFi than an ESP8266 with support for double the number
  of connections, faster processor, and a great deal more memory than an Arduino Mega
  for complex EXRAIL automation/animation scripts'
- Track output power will be off by default when first plugged in.
- Default to Access Point (AP) mode for quick setup
- SSID is DCCEX_xxxxxx and password is PASS_xxxxxx
- EX-Installer creates a folder (<home>\ex-installer) to hold the information it needs.
- If possible, choose a channel that is unused (or least used) by other WiFi networks
  around your location.
- If this field is left blank the password will default to 'PASS_xxxxx' where 'xxxxx'
  will be the same as the SSID name that will be automatically configured.
- Ensure the motor shield is securely seated onto the Arduino.
- Power to the track will be off by default when first plugged in to prevent accidental
  power application.
- The EX‑CommandStation / Booster One Express will power up in WiFi Access Point mode
  as configured out of the box.
- Designed for setup, configuration, debugging of the Command Station rather than
  continuous use
- Can connect through WiFi (Access Point mode or Station mode) or Ethernet
- COMMANDS are case sensitive.
- 'You must avoid using these characters in all descriptions: <, >, "'
- Users of previous EX-CommandStation versions can switch track power on or off via
  EXRAIL
- Another approach for powering up the track is to assign a speed to a loco in a sequence
  and power will automatically turn on.
- As of Version 5.0 you must now add AUTOSTART explicitly to the beginning of myAutomation.h
- Event handlers trigger sequences based on DCC accessory inputs
- Commands for loco control include speed adjustments and function toggling
- The EXRAIL code is only included in the compilation of the Command Station if the
  compiler detects a 'myAutomation.h' file.
- The current implementation requires no additional PC code/tool download or installation.
- Whenever the track mode is changed, track power is automatically turned off.
- Track power is immediately turned off anytime you change the track mode.
- The best way to reach us is on our Discord server.
- Someone will normally reply to you within a few hours, so check back regularly.
- Check to ensure power supply is connected securely with the correct voltage, polarity,
  and current rating and is plugged in at the wall, and turned on.
- Verify that all the pins are properly seating in the headers and that they are aligned
  correctly and not shifted and off by one or more pins.
- Connecting JMRI to an EX-CommandStation over WiFi works, but is not recommended
  and is not supported
- The Android throttle apps listed above can be made to made to run on Windows PCs.
- A Mega is required for using the WiFi connection, but an Uno or Nano will work with
  the Bluetooth connection.
- Application to drive DCC-EX command station via Bluetooth
- Rich set of features to control model railroad layout
- Connects to JMRI using their Web Server or soon will be able to connect directly
  to EX‑CommandStation
- Requires IoTT Red Hat
- A Mega is required for using the WiFi connection
- To use Wifi, make sure you have a WiFi enabled EX‑CommandStation as described in
  the Wifi Setup section.
- The app needs only access to local network permission to connect to an EX-CommandStation.
- Free, full-featured product, available to use for 3 hours after watching an advertisement.
- You can subscribe (either Monthly or Annually) to remove advertisements.
- Works on most recent Windows PCs and Apple Silicon Macs
- User Friendly installation of apps
- Allows you to run multiple instances of same app at the same time
- Has advertisements
- Open source software free for hobbyist use
- Supports both the DCC-EX and JMRI protocols
- Menu driven user interface makes it easy for visitors or occasional users to use
- This is an open source Project and is therefore always a work in progress. New features
  are being added regularly.
- While this controller code remains fully functional, support for DccEXcontroller
  has been discontinued.
- This ‘trick’ only supports a single connection at a time.
- Throttles must accept and ignore any unrecognized commands.
- Track power state must start as Unknown.
- The free version of wiThrottle only controls one loco at a time and does not offer
  turnout control or DCC track power control.
- The paid version wiThrottle can control multiple locos, can create and control consists,
  can control turnouts and routes, and can control DCC track power.
- Add additional ‘ROSTER(…)’ lines for all your locos
- If a function is not available leave the spot empty.
- An important item to note when configuring servo based turnouts/points and signals
  is that the angles provided are going to be unique to your layout.
- When going through the various examples where we define DCC turnouts/points, you
  may notice that a turnout/point ID has a DCC linear address that is the same, or
  close to it. This is pure coincidence.
- When defining aliases for sensors, you cannot specify a negative number for these.
- Uses automatic phase switching for the turntable.
- DCC phase switching occurs at 80 degrees.
- Ensure both our turnouts/points are closed and set all our signals to red at startup.
- Ensure signals are set to red and turnouts are closed on startup.
- Uses pin based control for turnouts and signals
- The new EX‑Installer will unfortunately not work on Windows 7.
- This is our stable, well supported platform
- Inexpensive and includes both WiFi and Bluetooth connectivity, limited in I/O pins
- Limited support only, will be removed in 6.0.0
- Does not work. It can’t switch fast enough to generate a reliable DCC signal
- This list is a compilation of multifunction decoders experienced by the DCC-EX team.
- In the USA the smaller the number, the bigger the wire!
- Don’t trust this table, especially if you are using higher currents and have a large
  layout.
- Recommended Makerfabs ESP8266 WiFi Shield will work with EX‑CommandStation without
  modification
- Espressif firmware shipped with Duinopeak ESP8266 WiFi Expansion and ESP-01 or ESP-01S
  devices will probably NOT work with EX‑CommandStation out of the box
- Documentation contains installation guides and troubleshooting tips.
- Includes various product categories for ease of navigation.
- Supports TCA9548A/PCA9548A 8-channel and TCA9544A/PCA9544A 4-channel multiplexers.
- Set multiplexers in the I2C address range 0x71-0x77.
- The default EX-CommandStation with a dual output Standard Motor Driver has everything
  you need.
- Arduino Nano and Uno have limited FLASH and RAM, using a reduced HAL.
- No standard pin order for I2C bus connectors.
- Connect the DFPlayer’s RX to the Arduino TX3 (14) via a 1kOhm resistor, and DFPlayer’s
  TX direct to the Arduino RX3 (15).
- Connect +5V power to VCC, and GND on the Arduino to GND on the DFPlayer.
- Connect a small speaker to the pins SPK1 and SPK2 on the DFPlayer.
- The driver follows a simple design pattern.
- It is recommended that the driver should not wait or delay.
- Opening the Serial Monitor always resets the Arduino board.
- Make sure the baud rate at the lower right of the window is set to '115200'.
- Make sure the dropdown next to that says 'Both NL & CR'.
- Use <D ACK ON> command to enable ACK diagnostics.
- Adjust ACK current limit with <D ACK LIMIT mA> command.
- Uses Arduino for DCC Sniffer setup
- DCC Sniffer can also be used as a decoder with different software
- This feature is not available in the current 'Production' version
- It is available in the 'development' (DEVEL) releases.
- This version is Bluetooth connected meaning that your railway layout may be controlled
  wirelessly from a suitable DCC App on a phone/tablet OR Bluetooth enabled PC/Laptop/Mac.
- Detailed ProMiniAir Users Manual available at http://oscaledeadrail.com/wp-content/uploads/2022/09/ProMiniAir_Users_Manual.pdf
- Detailed online setup instructions available at https://oscaledeadrail.com/instructions-for-the-standalone-prominiair-transmitter/
- Users must have a GitHub account to contribute.
- If you won’t be contributing to the website documentation, you can skip this step.
- The recommended approach to build a local preview is to use a virtual environment
  that replicates the GitHub pages deployment process.
- DCC-EX has no plans to support the Uno R4 or Giga at this time.
- TrackManager allows switching between DCC and DC modes for any track.
- Be cautious when integrating DC and DCC systems to avoid damage.
- DCC-EX is open source using off-the-shelf or open source hardware.
- This is NOT DCC++ v2.0, this is a completely new, yet API and feature compatible,
  Command Station.
- Some pages may not be suited to your level.
- Prices start from around $120-$145 in the US without and with a power supply, to
  approximately £98 in the UK, €115 in Europe, and in Australia starting from $AU190.
- Prices typically do not include tax and shipping.
- Ensure to use a well-regulated power supply between 12V and 25V DC.
- SSID is in the format DCCEX_xxxxxx and password is PASS_xxxxxx.
- Some users may experience issues when updating firmware or uploading EXRAIL scripts.
- Choose the correct motor driver type that you have installed.
- WiFi configuration allows for Access Point or Station mode.
- Power supply should be between 12V and 25V DC, depending on the scale of your locomotives.
- For safety, track power will be off by default when you first plug in the EX-CSB1.
- EX-Installer creates a folder (<home>\ex-installer) to hold the information it needs.
  Do not directly modify anything in this folder as it a) will be overwritten or deleted
  by the installer at any time, and b) will cause the installer to fail to load.
- If you are using the EX-CSB1 or the recommended DIY Mega hardware, you should not
  need to adjust the other settings on the page.
- Enabling start with power on will cause the EX-CommandStation to automatically start
  with the track power on.
- Some people have experienced problems with v3.8.5 of the flash download tool when
  following the instructions of the linked page.
- If you don’t succeed after several attempts with v3.8.5 try v2.3 instead.
- Instructions on the following page have been proven to work on Linux PCs, so will
  probably work on macOS PCs, however attempts to get them to work on Microsoft Windows
  PCs have so far been unsuccessful.
- Enabling 'Start with power on' will cause the EX-CommandStation to automatically
  start with the track power on.
- The case of characters the names is very important.
- Using myAutomation.h does use more progmem as it uses EXRAIL.
- EX-IOExpander is currently in Alpha testing.
- Using the reboot <Z> command on an Arduino Nano with the old bootloader may cause
  it to enter an endless reboot cycle.
- Uncommenting the line will enable extra diagnostic output to the serial console.
- In cases where multiple I2C devices exist on the same bus, the pullup resistors
  may cause issues with reliability.
- Support for the F412ZG is experimental at best right now.
- The Arduino Zero (and SAMD based clones) are 3v3 only and are not 5V tolerant.
- Support for the STM32F103C8T6 Bluepill is experimental at best right now.
- If your locomotive drives on to the turntable bridge track, and the DCC phase (or
  polarity) is not aligned with the surrounding layout tracks, then you will cause
  a short circuit.
- An auto reverser will allow out of phase layouts to work as it will always reverse
  on a short circuit.
- Both this and the following assembly page are primarily about using the UNL2003/28BYJ-48
  stepper driver and motor combination.
- If you wish to make use of the traverser feature, there is further information on
  what is required to enable this on the Traversers and Limited Rotation Turntables
  page.
- Ensure correct power supply is used for the prototyping shield.
- Ensure the turntable is able to trigger the homing sensor correctly.
- If operating EX-Turntable does not disable the stepper driver after movements complete,
  you may need to have the 'Enable' pin inverted.
- Recommended to perform initial testing via the EX-Turntable serial console.
- Ensure EX-Turntable is powered on before EX-CommandStation.
- This software is not official DCC-EX software and is maintained separately.
- The rotary encoder software can be downloaded from DCCEXTurntableController GitHub
  repository.
- If you have a need to use a stepper driver and motor combination that isn’t on the
  supported list and isn’t “pin-compatible” with an existing supported driver/motor
  combination, you may need to define a custom entry in “config.h” to allow EX‑Turntable
  to work correctly.
- From version 0.7.0 of EX‑Turntable, just use the definitions as outlined in the
  AccelStepper documentation.
- This page has been written as an addendum to the general EX‑Turntable documentation
  and focuses on the changes required to enable traverser mode.
- To use it to run real trains you will need an EX‑CommandStation / Booster One Express
  or DIY EX‑CommandStation based on a Arduino Mega, Arduino Uno, or other compatible
  microcontroller with a compatible Motor Shield.
- Pre-assembled, with no need for additional assembly or configuration
- The EX‑CommandStation / Booster One Express is set to operate in DCC mode by default.
- Ensure USB cable is connected from your computer to the EX-CommandStation.
- Antivirus software may block installation; consider turning it off.
- If using Access Point Mode, WiFi Password is optional and defaults to 'PASS_xxxxx'.
- If using Station Mode, both WiFi SSID and Password are required.
- Be aware that the Espressif firmware shipped with certain devices probably will
  NOT work with EX‑CommandStation out of the box.
- Power supply should be between 12V and 25V DC depending on the scale of your locomotives.
- Track power will be off by default when you first plug in the EX-CSB1.
- When using DC PWM mode, the track always receives full voltage whenever the throttle
  is set above zero.
- No additional software or hardware is needed beyond EX-CommandStation and Arduino
  IDE.
- COMMANDS are case sensitive. i.e. they must be in uppercase.
- 'You must avoid using these characters in all descriptions: <, >, " as these are
  part of the DCC-EX protocol.'
- No Implied AUTOSTART occurs and must be added to the myAutomation.h file
- Most IDs simply need to be unique, however RESERVE/FREE and LATCH/UNLATCH must be
  in the range 0 - 255.
- As of Version 5.0, AUTOSTART must be added explicitly to the beginning of the automation.
- All sequence types must be terminated by either a DONE, FOLLOW(id), or RETURN statement.
- From version 5.4.0, it is highly recommended to use the new turntable/traverser
  commands.
- Do NOT use SERVO for Turnouts/points.
- Uses commands to manage track and block.
- Commands like SET_TRACK and SET_POWER need to be used in sequence for proper configuration.
- Uses PWM for DC operation
- Track power is immediately turned off when changing track mode
- DCC-EX TrackManager 4.2.50+ is suitable for NMRA DCC Standards Modular Layouts.
- Sequences built this way can only be run via a clock command.
- The sequence above will repeat at 15 minutes past the hour per FastClock time.
- Usually there is a team member online to help with your issue, and if not you’ll
  get a response within a few hours.
- Discord allows for live chatting rather than just a back and forth offline support
  process.
- If you are using the EX-MotorShield8874, connect your 12-18V DC power supply directly
  to the barrel jack of the shield.
- Do not connect power to the Arduino and the Motor Shield at the same time.
- Ensure the 7-9V DC power supply for the Arduino has at least 1 Amp.
- For all type of motor drivers, ensure you see a green led marked `on` on the Arduino
  board glowing to indicate the Arduino has power.
- Throttle/controller MUST accept and ignore anything it does not understand.
- 'Track power state has three possible states: On, Off, and Unknown.'
- If a function is not available leave the spot empty
- An important item to note when configuring servo based turnouts/points and signals
  is that the angles provided are going to be unique to your layout, and possibly
  even be unique to each particular turnout/point or signal, depending on how they
  are mounted and physically connected.
- Some people choose to ensure the turnout/point ID matches the DCC linear address
  when using DCC turnouts/points, but this is not necessary.
- All configuration items have been updated in line with EX‑Turntable release 0.5.0-Beta
- Having both a turntable and traverser will require two separate instances of EX‑Turntable
- DCC phase/polarity must be reversed when the bridge is rotated 180 degrees.
- Ensure both turnouts/points are closed at startup
- All signals should be set to red at startup
- Using aliases helps your brain along.
- You can expand your I/O devices as you need.
- Use virtual blocks to safely control automation of your layout.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- If there are errors, check the Troubleshooting page for assistance.
- The core development team no longer have access to these, and testing is limited
  to ensuring the software compiles for the board type.
- Limited support only, will be removed in 6.0.0.
- 'No devices found: Check connection or recognition issues.'
- 'Multiple devices found: Select the correct device from the list.'
- 'ADDRESS_NOT_FOUND: Check the I2C address for the device.'
- 'DEVICE_NOT_RESPONDING: Verify connection and power supply.'
- Check HOME and LIMIT sensors connections if activation states are inverted.
- 'Connection Error: Ensure the EX-CommandStation is powered and connected.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Connection failed: Check SSID and password'
- 'Timeout: Ensure the device is powered and within range'
- 'Invalid mode: Ensure the mode specified is valid for the Motor Driver.'
- 'Invalid command format: Check command syntax and parameters.'
- 'INVALID_CONNECTION: Ensure correct wiring and power supply.'
- 'DEVICE_NOT_FOUND: Check if the device is powered and connected.'
- Using pin D13 as an input may not work as expected on non-genuine Arduino Uno devices.
- 'OFFLINE: Indicates device not connected properly'
- 'INVALID_PARAMETER: Check the parameters passed to the command.'
- 'BLOCK_OCCUPIED: The requested block is currently reserved.'
- 'Error 308: Indicates an out of spec. decoder.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://dcc-ex.com
  headers:
    Accept: application/json
source_metadata: null
