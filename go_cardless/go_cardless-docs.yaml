resources:
- name: billing_request_events
  endpoint:
    path: /billing_requests/events
    method: GET
    data_selector: events
- name: billing_requests
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
- name: billing_request_flows
  endpoint:
    path: /billing_request_flows
    method: POST
    data_selector: billing_request_flows
- name: billing_requests
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
    params: {}
- name: collect_customer_details
  endpoint:
    path: /billing_requests/BRQ123/actions/collect_customer_details
    method: POST
    data_selector: data
- name: collect_bank_account
  endpoint:
    path: /billing_requests/BRQ123/actions/collect_bank_account
    method: POST
    data_selector: data
- name: billing_requests
  endpoint:
    path: /billing_requests
    method: GET
- name: confirm_payer_details
  endpoint:
    path: /billing_requests/BRQ123/actions/confirm_payer_details
    method: POST
- name: fulfil
  endpoint:
    path: /billing_requests/BRQ123/actions/fulfil
    method: POST
- name: cancel
  endpoint:
    path: /billing_requests/BRQ123/actions/cancel
    method: POST
- name: get_single_billing_request
  endpoint:
    path: /billing_requests/BRQ123
    method: GET
- name: bank_authorisation
  endpoint:
    path: /bank_authorisations
    method: POST
    data_selector: bank_authorisations
    params: {}
- name: bank_authorisation_detail
  endpoint:
    path: /bank_authorisations/BAU123
    method: GET
    data_selector: bank_authorisations
    params: {}
- name: billing_requests
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
- name: billing_request
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: data
    params: {}
- name: billing_requests_notify
  endpoint:
    path: /billing_requests/BRQ123/actions/notify
    method: POST
    data_selector: billing_requests
    params:
      notification_type: email
      redirect_uri: https://my-company.com
- name: billing_requests_fallback
  endpoint:
    path: /billing_requests/BRQ123/actions/fallback
    method: POST
    data_selector: billing_requests
- name: billing_requests_choose_currency
  endpoint:
    path: /billing_requests/BRQ123/actions/choose_currency
    method: POST
- name: billing_requests_select_institution
  endpoint:
    path: /billing_requests/BRQ123/actions/select_institution
    method: POST
    data_selector: billing_requests
    params:
      institution: monzo
      country_code: GB
- name: billing_request_flows
  endpoint:
    path: /billing_request_flows
    method: POST
    data_selector: billing_request_flows
    params: {}
- name: initialise_billing_request_flow
  endpoint:
    path: /billing_request_flows/{id}/actions/initialise
    method: POST
    data_selector: billing_request_flows
    params: {}
- name: billing_request_templates
  endpoint:
    path: /billing_request_templates
    method: GET
    data_selector: billing_request_templates
- name: billing_request_template
  endpoint:
    path: /billing_request_templates/BRT123
    method: GET
    data_selector: billing_request_templates
- name: create_billing_request_template
  endpoint:
    path: /billing_request_templates
    method: POST
    data_selector: billing_request_templates
- name: billing_request
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: customers
- name: block
  endpoint:
    path: /blocks
    method: POST
    data_selector: blocks
- name: get_block
  endpoint:
    path: /blocks/{block_id}
    method: GET
    data_selector: blocks
- name: list_blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: blocks
- name: disable_block
  endpoint:
    path: /blocks/{block_id}/actions/disable
    method: POST
    data_selector: blocks
- name: enable_block
  endpoint:
    path: /blocks/{block_id}/actions/enable
    method: POST
    data_selector: blocks
- name: billing_request_templates
  endpoint:
    path: /billing_request_templates/{template_id}
    method: PUT
    data_selector: billing_request_templates
    params: {}
- name: institutions
  endpoint:
    path: /billing_requests/BRQ123/institutions
    method: GET
    data_selector: institutions
    params:
      country_code: GB
- name: balances
  endpoint:
    path: /balances
    method: GET
    data_selector: balances
    params:
      creditor: CR123
- name: bank_account_details
  endpoint:
    path: /bank_account_details/BA123
    method: GET
    data_selector: bank_account_details
- name: blocks
  endpoint:
    path: /blocks/block_by_ref
    method: POST
    data_selector: blocks
    params: {}
- name: creditors
  endpoint:
    path: /creditors
    method: POST
    data_selector: creditors
    params: {}
- name: billing_request
  endpoint:
    path: /billing_requests/create_with_actions
    method: POST
    data_selector: billing_request_with_actions
- name: institutions
  endpoint:
    path: /institutions
    method: GET
    data_selector: institutions
- name: customer
  endpoint:
    path: /customers/CU123
    method: PUT
    data_selector: customers
    params: {}
- name: customer_bank_account
  endpoint:
    path: /customer_bank_accounts
    method: POST
    data_selector: customer_bank_accounts
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: customers
- name: list_customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: get_customer
  endpoint:
    path: /customers/{customer_id}
    method: GET
    data_selector: customers
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: creditor_bank_account
  endpoint:
    path: /creditor_bank_accounts
    method: GET
    data_selector: creditor_bank_accounts
    params:
      enabled: 'true'
- name: currency_exchange_rate
  endpoint:
    path: /currency_exchange_rates
    method: GET
    data_selector: currency_exchange_rates
    params:
      source: GBP
      target: EUR
- name: creditors
  endpoint:
    path: /creditors
    method: GET
    data_selector: creditors
    params:
      limit: '50'
- name: creditor
  endpoint:
    path: /creditors/CR123
    method: GET
    data_selector: creditors
    params: {}
- name: create_creditor
  endpoint:
    path: /creditors
    method: POST
    data_selector: creditor_bank_accounts
    params: {}
- name: update_creditor
  endpoint:
    path: /creditors/CR123
    method: PUT
    data_selector: creditors
    params: {}
- name: create_creditor_bank_account
  endpoint:
    path: /creditor_bank_accounts
    method: POST
    data_selector: creditor_bank_accounts
    params: {}
- name: exports
  endpoint:
    path: /exports
    method: GET
    data_selector: exports
    params: {}
- name: instalment_schedules
  endpoint:
    path: /instalment_schedules
    method: GET
    data_selector: instalment_schedules
    params: {}
- name: instalment_schedule
  endpoint:
    path: /instalment_schedules/IS123
    method: GET
    data_selector: instalment_schedules
- name: cancel_instalment_schedule
  endpoint:
    path: /instalment_schedules/IS123/actions/cancel
    method: POST
    data_selector: instalment_schedules
- name: create_logo
  endpoint:
    path: /branding/logos
    method: POST
    data_selector: logos
- name: mandate
  endpoint:
    path: /mandates/MD123
    method: PUT
    data_selector: mandates
    params:
      metadata: {}
- name: mandate_cancel
  endpoint:
    path: /mandates/MD123/actions/cancel
    method: POST
    data_selector: mandates
    params:
      metadata: {}
- name: mandate_reinstate
  endpoint:
    path: /mandates/MD123/actions/reinstate
    method: POST
    data_selector: mandates
    params:
      metadata: {}
- name: mandate_imports
  endpoint:
    path: /mandate_imports
    method: POST
    data_selector: mandate_imports
    params:
      scheme: bacs
- name: mandate_import
  endpoint:
    path: /mandate_imports/IM000010790WX1
    method: GET
    data_selector: mandate_imports
    params: {}
- name: customer_bank_accounts
  endpoint:
    path: /customer_bank_accounts
    method: GET
    data_selector: customer_bank_accounts
    params:
      customer: CU123
      enabled: true
- name: customer_bank_account
  endpoint:
    path: /customer_bank_accounts/{id}
    method: GET
    data_selector: customer_bank_accounts
- name: update_customer_bank_account
  endpoint:
    path: /customer_bank_accounts/{id}
    method: PUT
    data_selector: customer_bank_accounts
    params:
      metadata:
        key: value
- name: disable_customer_bank_account
  endpoint:
    path: /customer_bank_accounts/{id}/actions/disable
    method: POST
    data_selector: customer_bank_accounts
- name: handle_customer_notification
  endpoint:
    path: /customer_notifications/{id}/actions/handle
    method: POST
    data_selector: customer_notifications
- name: mandate
  endpoint:
    path: /mandates
    method: GET
    data_selector: mandates
    params: {}
- name: create_mandate
  endpoint:
    path: /mandates
    method: POST
    data_selector: mandates
    params: {}
- name: get_single_mandate
  endpoint:
    path: /mandates/{id}
    method: GET
    data_selector: mandates
    params: {}
- name: mandate_imports_submit
  endpoint:
    path: /mandate_imports/IM000010790WX1/actions/submit
    method: POST
    data_selector: mandate_imports
    params: {}
- name: mandate_imports_cancel
  endpoint:
    path: /mandate_imports/IM000010790WX1/actions/cancel
    method: POST
    data_selector: mandate_imports
    params: {}
- name: mandate_import_entries_create
  endpoint:
    path: /mandate_import_entries
    method: POST
    data_selector: mandate_import_entries
    params: {}
- name: mandate_import_entries
  endpoint:
    path: /mandate_import_entries
    method: GET
    data_selector: mandate_import_entries
    params:
      mandate_import: IM000010790WX1
- name: negative_balance_limits
  endpoint:
    path: /negative_balance_limits
    method: GET
    data_selector: negative_balance_limits
    params:
      currency: GBP
      creditor: CR123
- name: outbound_payments
  endpoint:
    path: /outbound_payments
    method: POST
    data_selector: outbound_payments
    params: {}
- name: outbound_payments
  endpoint:
    path: /outbound_payments
    method: GET
    data_selector: outbound_payments
    params: {}
- name: update_outbound_payment
  endpoint:
    path: /outbound_payments/OUT01JR7P5PKW3K7Q34CJAWC03E82
    method: PUT
    data_selector: outbound_payments
    params: {}
- name: payer_authorisation
  endpoint:
    path: /payer_authorisations/PA123
    method: GET
    data_selector: payer_authorisations
    params: {}
- name: payer_authorisation
  endpoint:
    path: /payer_authorisations
    method: POST
    data_selector: payer_authorisations
- name: payer_authorisations
  endpoint:
    path: /payer_authorisations/PA123
    method: PUT
    data_selector: payer_authorisations
- name: submit_payer_authorisation
  endpoint:
    path: /payer_authorisations/PA123/actions/submit
    method: POST
    data_selector: payer_authorisations
- name: confirm_payer_authorisation
  endpoint:
    path: /payer_authorisations/PA123/actions/confirm
    method: POST
    data_selector: payer_authorisations
- name: payer_theme
  endpoint:
    path: /branding/payer_themes
    method: POST
    data_selector: payer_themes
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payments
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: GET
    data_selector: payouts
- name: single_payout
  endpoint:
    path: /payouts/{id}
    method: GET
    data_selector: payouts
- name: update_payout
  endpoint:
    path: /payouts/{id}
    method: PUT
    data_selector: payouts
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
    params:
      limit: '50'
- name: single_payment
  endpoint:
    path: /payments/{payment_id}
    method: GET
- name: update_payment
  endpoint:
    path: /payments/{payment_id}
    method: PUT
- name: cancel_payment
  endpoint:
    path: /payments/{payment_id}/actions/cancel
    method: POST
- name: retry_payment
  endpoint:
    path: /payments/{payment_id}/actions/retry
    method: POST
- name: payout_items
  endpoint:
    path: /payout_items
    method: GET
    data_selector: payout_items
    params:
      payout: PO123
- name: redirect_flows
  endpoint:
    path: /redirect_flows
    method: POST
    data_selector: redirect_flows
- name: refunds
  endpoint:
    path: /refunds
    method: GET
    data_selector: refunds
    params:
      limit: '50'
- name: single_refund
  endpoint:
    path: /refunds/RF123
    method: GET
    data_selector: refunds
- name: update_refund
  endpoint:
    path: /refunds/RF123
    method: PUT
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: customers
    params: {}
- name: creditors
  endpoint:
    path: /creditors
    method: POST
    data_selector: creditors
    params: {}
- name: customer_bank_accounts
  endpoint:
    path: /customer_bank_accounts
    method: POST
    data_selector: customer_bank_accounts
    params: {}
- name: balances
  endpoint:
    path: /balances
    method: GET
    data_selector: balances
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
    params: {}
- name: event
  endpoint:
    path: /events/{id}
    method: GET
    data_selector: events
    params: {}
- name: events
  endpoint:
    path: /events/{event_id}
    method: GET
    data_selector: events
- name: redirect_flow
  endpoint:
    path: /redirect_flows/RE123456
    method: GET
    data_selector: redirect_flows
- name: complete_redirect_flow
  endpoint:
    path: /redirect_flows/RE123456/actions/complete
    method: POST
    data_selector: redirect_flows
- name: refund
  endpoint:
    path: /refunds
    method: POST
    data_selector: refunds
- name: scenario_simulator_run
  endpoint:
    path: /scenario_simulators/payment_failed/actions/run
    method: POST
    data_selector: data
    params:
      links:
        resource: PM123
- name: scheme_identifier
  endpoint:
    path: /scheme_identifiers
    method: POST
    data_selector: scheme_identifiers
    params:
      name: The Wine Club
      scheme: bacs
      links:
        creditor: CR123
- name: list_scheme_identifiers
  endpoint:
    path: /scheme_identifiers
    method: GET
    data_selector: scheme_identifiers
- name: get_scheme_identifier
  endpoint:
    path: /scheme_identifiers/SU123
    method: GET
    data_selector: scheme_identifiers
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: single_subscription
  endpoint:
    path: /subscriptions/{id}
    method: GET
    data_selector: subscriptions
    params: {}
- name: update_subscription
  endpoint:
    path: /subscriptions/{id}
    method: PUT
    data_selector: subscriptions
    params: {}
- name: transferred_mandates
  endpoint:
    path: /transferred_mandates/{id}
    method: GET
- name: verification_details
  endpoint:
    path: /verification_details
    method: GET
    params:
      creditor: CR123
- name: events
  endpoint:
    path: /events/{id}
    method: GET
    data_selector: events
- name: events
  endpoint:
    path: /events/{event_id}
    method: GET
    data_selector: events
    params: {}
- name: bank_details_lookup
  endpoint:
    path: /bank_details_lookups
    method: POST
    data_selector: bank_details_lookups
    params: {}
- name: mandate_pdf
  endpoint:
    path: /mandate_pdfs
    method: POST
    data_selector: mandate_pdfs
    params: {}
- name: pause_subscription
  endpoint:
    path: /subscriptions/SB123/actions/pause
    method: POST
    data_selector: subscriptions
    params: {}
- name: resume_subscription
  endpoint:
    path: /subscriptions/SB123/actions/resume
    method: POST
    data_selector: subscriptions
    params: {}
- name: cancel_subscription
  endpoint:
    path: /subscriptions/SB123/actions/cancel
    method: POST
    data_selector: subscriptions
    params: {}
- name: list_tax_rates
  endpoint:
    path: /tax_rates
    method: GET
    data_selector: tax_rates
    params:
      jurisdiction: GB
- name: get_tax_rate
  endpoint:
    path: /tax_rates/GB_VAT_1
    method: GET
    data_selector: tax_rates
    params: {}
- name: customer_bank_account_tokens
  endpoint:
    path: /customer_bank_account_tokens/{id}
    method: GET
    data_selector: customer_bank_account_tokens
    params: {}
- name: events
  endpoint:
    path: /events/{event_id}
    method: GET
    data_selector: events
- name: instalment_schedule
  endpoint:
    path: /instalment_schedules
    method: POST
    data_selector: instalment_schedule
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
    params: {}
- name: payment_status
  endpoint:
    path: /payments/{id}
    method: GET
    data_selector: payment
    params: {}
- name: cancel_payment
  endpoint:
    path: /payments/{id}/cancel
    method: POST
    data_selector: payment
    params: {}
- name: mandate
  endpoint:
    path: /mandates
    method: POST
- name: billing_requests
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
    params: {}
- name: billing_requests
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
    params: {}
- name: collect_customer_details
  endpoint:
    path: /billing_requests/{id}/collect_customer_details
    method: POST
    data_selector: billing_requests
    params: {}
- name: confirm_payer_details
  endpoint:
    path: /billing_requests/{id}/confirm_payer_details
    method: POST
    data_selector: billing_requests
    params: {}
- name: billing_request
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
    params: {}
- name: billing_request_template
  endpoint:
    path: /billing_request_templates
    method: POST
    data_selector: billing_request_templates
    params: {}
- name: billing_requests
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
- name: billing_requests
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
    params: {}
- name: choose_currency
  endpoint:
    path: /billing_requests/{billing_request_id}/choose_currency
    method: POST
    data_selector: billing_requests
    params: {}
- name: billing_request
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: payments
- name: update_payment
  endpoint:
    path: /payments/PM123
    method: PUT
    data_selector: payments
- name: instalment_schedules
  endpoint:
    path: /instalment_schedules
    method: POST
    data_selector: instalment_schedules
- name: creditors
  endpoint:
    path: /creditors
    method: GET
    data_selector: fx_payout_currency
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: subscription
    params: {}
- name: billing_request
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
- name: billing_request_flow
  endpoint:
    path: /billing_request_flows
    method: POST
    data_selector: billing_request_flows
- name: billing_request
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
    params:
      verify: recommended
- name: billing_request
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
    params: {}
- name: customer_notifications
  endpoint:
    path: /webhooks
    method: POST
    data_selector: events
- name: blocks
  endpoint:
    path: /blocks
    method: POST
    data_selector: blocks
- name: get_block
  endpoint:
    path: /blocks/BLC123
    method: GET
    data_selector: blocks
- name: list_blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: blocks
- name: disable_block
  endpoint:
    path: /blocks/BLC123/actions/disable
    method: POST
    data_selector: blocks
- name: enable_block
  endpoint:
    path: /blocks/BLC123/actions/enable
    method: POST
    data_selector: blocks
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: customers
- name: list_customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: get_customer
  endpoint:
    path: /customers/{id}
    method: GET
    data_selector: customers
- name: creditors
  endpoint:
    path: /creditors
    method: GET
    data_selector: creditors
- name: creditor
  endpoint:
    path: /creditors/{id}
    method: GET
    data_selector: creditors
- name: creditor_bank_accounts
  endpoint:
    path: /creditor_bank_accounts
    method: POST
    data_selector: creditor_bank_accounts
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: customer_bank_accounts
  endpoint:
    path: /customer_bank_accounts
    method: GET
    data_selector: customer_bank_accounts
- name: customer_bank_account
  endpoint:
    path: /customer_bank_accounts/{id}
    method: GET
    data_selector: customer_bank_accounts
- name: update_customer_bank_account
  endpoint:
    path: /customer_bank_accounts/{id}
    method: PUT
    data_selector: customer_bank_accounts
- name: disable_customer_bank_account
  endpoint:
    path: /customer_bank_accounts/{id}/actions/disable
    method: POST
    data_selector: customer_bank_accounts
- name: handle_notification
  endpoint:
    path: /customer_notifications/{id}/actions/handle
    method: POST
    data_selector: customer_notifications
- name: creditor_bank_accounts
  endpoint:
    path: /creditor_bank_accounts
    method: GET
    data_selector: creditor_bank_accounts
    params: {}
- name: currency_exchange_rates
  endpoint:
    path: /currency_exchange_rates
    method: GET
    data_selector: currency_exchange_rates
    params: {}
- name: customers
  endpoint:
    path: /customers/CU123
    method: PUT
    data_selector: customers
    params: {}
- name: customer_bank_accounts
  endpoint:
    path: /customer_bank_accounts
    method: POST
    data_selector: customer_bank_accounts
    params: {}
- name: exports
  endpoint:
    path: /exports
    method: GET
    data_selector: exports
    params: {}
- name: single_export
  endpoint:
    path: /exports/EX123
    method: GET
    data_selector: exports
    params: {}
- name: instalment_schedules
  endpoint:
    path: /instalment_schedules
    method: GET
    data_selector: instalment_schedules
    params: {}
- name: single_instalment_schedule
  endpoint:
    path: /instalment_schedules/IS123
    method: GET
    data_selector: instalment_schedules
    params: {}
- name: mandate_import
  endpoint:
    path: /mandate_imports/IM000010790WX1/actions/submit
    method: POST
    data_selector: mandate_imports
    params: {}
- name: mandate_import_entries
  endpoint:
    path: /mandate_import_entries
    method: POST
    data_selector: mandate_import_entries
    params: {}
- name: events
  endpoint:
    path: /events/{event_id}
    method: GET
    data_selector: events
- name: instalment_schedule
  endpoint:
    path: /instalment_schedules/IS123
    method: GET
    data_selector: instalment_schedules
    params: {}
- name: cancel_instalment_schedule
  endpoint:
    path: /instalment_schedules/IS123/actions/cancel
    method: POST
    data_selector: instalment_schedules
    params: {}
- name: create_logo
  endpoint:
    path: /branding/logos
    method: POST
    data_selector: logos
    params: {}
- name: payer_authorisations
  endpoint:
    path: /payer_authorisations/PA123
    method: PUT
    data_selector: payer_authorisations
    params: {}
- name: submit_payer_authorisation
  endpoint:
    path: /payer_authorisations/PA123/actions/submit
    method: POST
    data_selector: payer_authorisations
    params: {}
- name: confirm_payer_authorisation
  endpoint:
    path: /payer_authorisations/PA123/actions/confirm
    method: POST
    data_selector: payer_authorisations
    params: {}
- name: mandates
  endpoint:
    path: /mandates
    method: GET
    data_selector: mandates
    params: {}
- name: create_mandate
  endpoint:
    path: /mandates
    method: POST
    data_selector: mandates
    params: {}
- name: get_mandate
  endpoint:
    path: /mandates/MD123
    method: GET
    data_selector: mandates
    params: {}
- name: subscription_request
  endpoint:
    path: /billing_requests/subscription_request
    method: POST
    data_selector: subscription_request
    params: {}
- name: instalment_schedule_request
  endpoint:
    path: /billing_requests/instalment_schedule_request
    method: POST
    data_selector: instalment_schedule_request
    params: {}
- name: billing_request
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
    params: {}
- name: bank_authorisation
  endpoint:
    path: /bank_authorisations
    method: POST
    data_selector: bank_authorisations
    params: {}
- name: get_bank_authorisation
  endpoint:
    path: /bank_authorisations/BAU123
    method: GET
    data_selector: bank_authorisations
    params: {}
- name: collect_customer_details
  endpoint:
    path: /billing_requests/BRQ123/actions/collect_customer_details
    method: POST
    data_selector: data
- name: collect_bank_account
  endpoint:
    path: /billing_requests/BRQ123/actions/collect_bank_account
    method: POST
    data_selector: data
- name: billing_requests
  endpoint:
    path: /billing_requests
    method: GET
    data_selector: billing_requests
- name: customer
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: creditors
  endpoint:
    path: /creditors
    method: GET
    data_selector: creditors
- name: customer_bank_accounts
  endpoint:
    path: /customer_bank_accounts
    method: GET
    data_selector: customer_bank_accounts
- name: creditor_bank_accounts
  endpoint:
    path: /creditor_bank_accounts
    method: GET
    data_selector: creditor_bank_accounts
- name: balances
  endpoint:
    path: /balances
    method: GET
    data_selector: balances
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: exports
  endpoint:
    path: /exports
    method: GET
    data_selector: exports
- name: blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: blocks
- name: billing_requests
  endpoint:
    path: /billing_requests
    method: POST
    data_selector: billing_requests
- name: billing_request_confirm_payer_details
  endpoint:
    path: /billing_requests/BRQ123/actions/confirm_payer_details
    method: POST
- name: billing_request_fulfil
  endpoint:
    path: /billing_requests/BRQ123/actions/fulfil
    method: POST
- name: billing_request_cancel
  endpoint:
    path: /billing_requests/BRQ123/actions/cancel
    method: POST
- name: billing_requests_list
  endpoint:
    path: /billing_requests
    method: GET
- name: billing_request_get
  endpoint:
    path: /billing_requests/BRQ123
    method: GET
- name: billing_requests_notify
  endpoint:
    path: /billing_requests/BRQ123/actions/notify
    method: POST
    data_selector: billing_requests
    params:
      notification_type: email
      redirect_uri: https://my-company.com
- name: billing_requests_fallback
  endpoint:
    path: /billing_requests/BRQ123/actions/fallback
    method: POST
    data_selector: billing_requests
- name: billing_requests_choose_currency
  endpoint:
    path: /billing_requests/BRQ123/actions/choose_currency
    method: POST
- name: billing_requests_select_institution
  endpoint:
    path: /billing_requests/BRQ123/actions/select_institution
    method: POST
    data_selector: billing_requests
    params:
      institution: monzo
      country_code: GB
- name: billing_request_flows
  endpoint:
    path: /billing_request_flows
    method: POST
    data_selector: billing_request_flows
- name: initialise_billing_request_flow
  endpoint:
    path: /billing_request_flows/{id}/actions/initialise
    method: POST
    data_selector: billing_request_flows
- name: billing_request_template
  endpoint:
    path: /billing_request_templates/{template_id}
    method: PUT
    data_selector: billing_request_templates
    params: {}
- name: blocks
  endpoint:
    path: /blocks/block_by_ref
    method: POST
- name: creditors
  endpoint:
    path: /creditors
    method: POST
- name: billing_request_templates
  endpoint:
    path: /billing_request_templates
    method: GET
    data_selector: billing_request_templates
- name: billing_request_template
  endpoint:
    path: /billing_request_templates/BRT123
    method: GET
    data_selector: billing_request_templates
- name: create_billing_request_template
  endpoint:
    path: /billing_request_templates
    method: POST
    data_selector: billing_request_templates
- name: billing_request
  endpoint:
    path: /billing_requests/create_with_actions
    method: POST
    data_selector: billing_request_with_actions
- name: institutions
  endpoint:
    path: /institutions
    method: GET
    data_selector: institutions
- name: institutions
  endpoint:
    path: /billing_requests/BRQ123/institutions
    method: GET
    data_selector: institutions
    params:
      country_code: GB
- name: balances
  endpoint:
    path: /balances
    method: GET
    data_selector: balances
    params:
      creditor: CR123
- name: bank_account_details
  endpoint:
    path: /bank_account_details/BA123
    method: GET
    data_selector: bank_account_details
- name: mandate
  endpoint:
    path: /mandates/{id}
    method: PUT
    data_selector: mandates
    params:
      metadata: {}
- name: mandate_cancel
  endpoint:
    path: /mandates/{id}/actions/cancel
    method: POST
    data_selector: mandates
    params:
      metadata: {}
- name: mandate_reinstate
  endpoint:
    path: /mandates/{id}/actions/reinstate
    method: POST
    data_selector: mandates
    params:
      metadata: {}
- name: mandate_import
  endpoint:
    path: /mandate_imports
    method: POST
    data_selector: mandate_imports
    params:
      scheme: bacs
- name: mandate_import_get
  endpoint:
    path: /mandate_imports/{id}
    method: GET
    data_selector: mandate_imports
    params: {}
- name: outbound_payments
  endpoint:
    path: /outbound_payments
    method: GET
    data_selector: outbound_payments
    params: {}
- name: update_outbound_payment
  endpoint:
    path: /outbound_payments/OUT01JR7P5PKW3K7Q34CJAWC03E82
    method: PUT
    data_selector: outbound_payments
    params: {}
- name: payer_authorisations
  endpoint:
    path: /payer_authorisations
    method: POST
    data_selector: payer_authorisations
- name: mandate_import_entries
  endpoint:
    path: /mandate_import_entries
    method: GET
    data_selector: mandate_import_entries
    params:
      mandate_import: IM000010790WX1
- name: negative_balance_limits
  endpoint:
    path: /negative_balance_limits
    method: GET
    data_selector: negative_balance_limits
    params:
      currency: GBP
      creditor: CR123
- name: outbound_payments
  endpoint:
    path: /outbound_payments
    method: POST
    data_selector: outbound_payments
- name: withdrawal_outbound_payments
  endpoint:
    path: /outbound_payments/withdrawal
    method: POST
    data_selector: outbound_payments
- name: payouts
  endpoint:
    path: /payouts
    method: GET
    data_selector: payouts
    params:
      limit: 50
- name: single_payout
  endpoint:
    path: /payouts/{id}
    method: GET
    data_selector: payouts
- name: update_payout
  endpoint:
    path: /payouts/{id}
    method: PUT
    data_selector: payouts
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
- name: single_payment
  endpoint:
    path: /payments/{payment_id}
    method: GET
    data_selector: payments
- name: update_payment
  endpoint:
    path: /payments/{payment_id}
    method: PUT
    data_selector: payments
- name: cancel_payment
  endpoint:
    path: /payments/{payment_id}/actions/cancel
    method: POST
    data_selector: payments
- name: retry_payment
  endpoint:
    path: /payments/{payment_id}/actions/retry
    method: POST
    data_selector: payments
- name: payout_items
  endpoint:
    path: /payout_items
    method: GET
    data_selector: payout_items
    params:
      payout: PO123
- name: redirect_flows
  endpoint:
    path: /redirect_flows
    method: POST
    data_selector: redirect_flows
- name: payer_theme
  endpoint:
    path: /branding/payer_themes
    method: POST
    data_selector: payer_themes
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payments
    params:
      amount: 100
      currency: GBP
- name: redirect_flows
  endpoint:
    path: /redirect_flows/RE123456
    method: GET
    data_selector: redirect_flows
    params: {}
- name: refunds
  endpoint:
    path: /refunds
    method: POST
    data_selector: refunds
    params: {}
- name: refunds
  endpoint:
    path: /refunds
    method: GET
    data_selector: refunds
- name: single_refund
  endpoint:
    path: /refunds/RF123
    method: GET
    data_selector: refunds
- name: update_refund
  endpoint:
    path: /refunds/RF123
    method: PUT
    data_selector: refunds
- name: scenario_simulator_run
  endpoint:
    path: /scenario_simulators/payment_failed/actions/run
    method: POST
    data_selector: data
    params:
      links:
        resource: PM123
- name: scheme_identifier
  endpoint:
    path: /scheme_identifiers
    method: POST
    data_selector: scheme_identifiers
    params:
      name: The Wine Club
      scheme: bacs
      links:
        creditor: CR123
- name: events
  endpoint:
    path: /events/{event_id}
    method: GET
    data_selector: events
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
- name: single_subscription
  endpoint:
    path: /subscriptions/{id}
    method: GET
    data_selector: subscriptions
- name: transferred_mandates
  endpoint:
    path: /transferred_mandates/MD123
    method: GET
- name: verification_details
  endpoint:
    path: /verification_details
    method: GET
    params:
      creditor: CR123
- name: pause_subscription
  endpoint:
    path: /subscriptions/SB123/actions/pause
    method: POST
    data_selector: subscriptions
    params: {}
- name: resume_subscription
  endpoint:
    path: /subscriptions/SB123/actions/resume
    method: POST
    data_selector: subscriptions
    params: {}
- name: cancel_subscription
  endpoint:
    path: /subscriptions/SB123/actions/cancel
    method: POST
    data_selector: subscriptions
    params: {}
- name: list_tax_rates
  endpoint:
    path: /tax_rates
    method: GET
    data_selector: tax_rates
    params:
      jurisdiction: GB
- name: get_tax_rate
  endpoint:
    path: /tax_rates/GB_VAT_1
    method: GET
    data_selector: tax_rates
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
- name: event
  endpoint:
    path: /events/EV123
    method: GET
    data_selector: events
- name: mandates
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params: {}
- name: events
  endpoint:
    path: /events/{id}
    method: GET
    data_selector: events
    params: {}
- name: bank_details_lookups
  endpoint:
    path: /bank_details_lookups
    method: POST
    data_selector: bank_details_lookups
    params: {}
- name: mandate_pdfs
  endpoint:
    path: /mandate_pdfs
    method: POST
    data_selector: mandate_pdfs
    params: {}
- name: customer_bank_account_tokens
  endpoint:
    path: /customer_bank_account_tokens/{id}
    method: GET
    data_selector: customer_bank_account_tokens
- name: oauth_access_token
  endpoint:
    path: /oauth/access_token
    method: POST
    data_selector: access_token
- name: oauth_introspect
  endpoint:
    path: /oauth/introspect
    method: POST
    data_selector: active
- name: oauth_revoke
  endpoint:
    path: /oauth/revoke
    method: POST
notes:
- Once your live account is set up, create an access token and then switch the environment
  and access token in your code.
- Your sandbox account will stay active and is perfect for testing any tweaks you
  want to make to your integration.
- Webhooks are HTTP POST requests made to the URL you provided, with a JSON body.
- It is important that you keep the secret safe, and change it periodically using
  the Dashboard.
- Events are triggered based on the lifecycle of billing requests.
- Instant Bank Pay is only available for transactions in GBP with your customers in
  the UK and for EUR with your customers in supported Eurozone countries.
- By default, the ability to provide a custom mandate reference is switched off.
- Restricted to GoCardless Pro and GoCardless Enterprise accounts with the custom
  payment pages upgrade.
- Unless your payment pages have been approved as scheme rules compliant by our sponsor
  bank you must use the Billing Requests API to create customers, bank accounts and
  mandates.
- Unless your account has previously been approved as a whitelabel partner you may
  only collect payments on behalf of a single creditor.
- The API is only available over HTTPS.
- All requests and responses are JSON-formatted and UTF-8 encoded.
- This endpoint is restricted and must be used within a checkout flow.
- Bank authorisations can still fail despite an outcome=success.
- This endpoint is currently supported only for Instant Bank Pay Billing Requests.
- Auto fulfil is an experimental feature.
- Some parameters are only applicable under certain conditions.
- Block will be enabled if you try to create a block that already exists and is disabled.
- All Billing Requests use the recommended verification preference by default.
- 'Restricted: This endpoint is restricted to GoCardless Embed customers.'
- 'Restricted: this endpoint is restricted to GoCardless Pro and GoCardless Enterprise
  accounts with the custom payment pages upgrade.'
- 'Warning: ACH/PAD is not supported on this endpoint.'
- This endpoint is restricted to GoCardless Pro and GoCardless Enterprise accounts
  with approved payment pages.
- This endpoint is a legacy API endpoint and does not support GoCardless’ newest features.
- Uses OAuth2 with access token — requires setup of GoCardless account
- Restricted to GoCardless Embed customers.
- This endpoint is restricted to GoCardless Embed customers.
- Mandates must be for the same scheme in a single mandate import.
- This API is restricted to approved integrators.
- This API is currently only available for approved integrators
- This API is currently only available for approved integrators - please get in touch
  if you would like to use this API.
- Outbound Payments are currently in Early Access and available only to a limited
  list of organisations.
- A Payer Authorisation cannot be confirmed if it hasn’t been submitted yet.
- Payout items can only be retrieved for payouts created in the last 6 months.
- Requests for older payouts will return an HTTP status 410 Gone.
- Use of metadata is limited to key-value pairs with specific character limits.
- This endpoint only serves requests for payouts created in the last 6 months.
- Scenario Simulators allow you to manually trigger and test certain paths that your
  integration will encounter in the real world.
- Webhook-Signature must be validated for incoming webhook requests.
- Intelligent retries feature is available.
- Redirect Flows are legacy APIs and cannot be used by new integrators.
- The Billing Request flow API should be used for your payment flows.
- The endpoint is restricted to GoCardless Embed customers.
- Requests to the health check endpoint do not require authorization and are not rate
  limited.
- 'Restricted: This endpoint is restricted to organisations with the Transfer Bank
  Accounts upgrade'
- 'Restricted: These endpoints are restricted to customers who want to collect their
  merchant’s verification details and pass them to GoCardless via our API.'
- The mandate is tracked via events that provide various states and details.
- Usage of this endpoint is monitored.
- If your organisation relies on GoCardless for modulus or reachability checking but
  not for payment collection, please get in touch.
- The JavaScript Flow is restricted to GoCardless Pro & Enterprise accounts with approved
  payment pages.
- OAuth allows you to work with other users’ GoCardless accounts.
- A fee charged by an app must be no more than 50% of the total payment amount.
- Intelligent retries needs to be enabled in Gocardless Dashboard.
- Webhooks may arrive out of order, or the same one may be delivered multiple times.
- You must use SSL/TLS for webhook URLs.
- Webhooks include an Origin header indicating what GoCardless environment they were
  sent from.
- Implement procedures and technical controls that ensure secure storage and transmission
  of personal data using industry-standard encryption mechanisms and strong cipher
  suites
- Implement technical controls to ensure that any data sent to, and received from,
  intended recipients is protected against eavesdropping, modification and loss in
  transit
- Apply access controls to ensure that only Authorised Users gain access to information
  systems that process and store key material
- Maintain and monitor audit logs on the use of the Transfer Bank accounts and Encrypted
  Bank Details Access features
- Have policies and procedures to detect and respond to security incidents, including
  procedures to monitor systems, mitigate effects, and document incidents and their
  outcomes
- Maintain Developer Documentation concerning the use, creation, management and revocation
  of encryption keys, access tokens and digital certificates
- Keep a backup of encryption key material and related business-critical data and
  have appropriate recovery and continuity procedures
- Generate RSA keys at least 2048-bit in length with SHA256
- Rotate keys at least annually
- Mandates can be cancelled at any time.
- Mandates can also, in rare cases, expire.
- Instalment schedules start in 'pending' state and transition to 'active' once all
  payments are created.
- In the sandbox, payments do not result in actual bank transactions.
- Webhooks allows you to receive real-time notifications from GoCardless when things
  happen in your merchant's account.
- Mandates can be cancelled at any time
- Mandates can also expire in rare cases
- Webhook events include 'cancelled', 'failed', and 'replaced'
- Integrators will need the custom payment pages upgrade enabled on their account.
- The hosted checkout flow provided by Billing Request Flows is built to optimise
  conversion.
- Integrators should use hosted flows for authorization.
- All mandate requests require the confirm payer details action.
- All endpoints require the Authorization token.
- User secrets are used to create access tokens which in turn are used for client
  authentication and API request authorization.
- You must set the verify preference to recommended when creating the Billing Request
  or Billing Request Template
- You can prevent certain customer details from being used when creating mandates
  via the API or the Blocklist page on the merchant dashboard
- The use of consent types combined with request types enhances the payer experience
  and enables the storage of compliant mandate data.
- The actions presented on a Billing Request are unordered.
- The collect_customer_details action is designed to help us collect the required
  information from our customers.
- The creation of bank_authorisation is only permitted from GoCardless hosted UIs
  to ensure we meet regulatory requirements.
- The retry_if_possible flag is mandatory for API users enabling Success+ and defaults
  to false.
- Most of your users will have signed up for their GoCardless account in the OAuth
  flow itself.
- Users after being successfully verified may later require further verification.
- We recommend storing your access token in an environment variable for security
- Change me to LIVE when you're ready to go live
- For the majority of integrations, that’ll be enough.
- Some integrations (for example, accountancy software) will want to go further in
  understanding exactly what makes up a payout.
- We must have gotten and saved merchants' access tokens after following the steps
  here
- You must connect your users' accounts via our OAuth 2 flow
- It's important not to pass the client secret to your user’s device
- Webhook requests are HTTP POST with a JSON body.
- A signature is provided in the Webhook-Signature header.
- When a payout is sent to your user, you’ll receive a webhook with resource_type
  'payouts' and action 'paid'.
- For each payment that has been paid out, we’ll send webhooks with resource_type
  'payments' and action 'paid_out'.
- You should store your client ID and secret in environment variables rather than
  committing them with your code.
- You must include both the payment_request and mandate_request fields when creating
  your Billing Request.
- The mandate_request and payment_request must have the same currency.
- Currently creating Direct Debit mandate for AUTOGIRO scheme is not supported
- You are discouraged from bundling the initialisation script or vendoring it, as
  GoCardless reserves the right to make non-breaking changes to the underlying implementation.
- We guarantee backward compatibility between major versions of the initialise script,
  as denoted by the script source URL.
- As Bacs supports verification, you’ll see we have a bank_authorisation action in
  the Billing Request response.
- The action is required, which means we cannot fulfil this request without first
  completing the bank authorisation.
- Billing Request Flows can be created against Billing Requests, and provide an entry
  into a hosted GoCardless flow that completes whatever actions remain against the
  request.
- At this time, this change will impact any merchants who have a country_code of 'GB'
  or 'FR'.
- If you want to see tax information on payout items between April 2020 and September
  2020, you must opt in by providing the 'include_2020_tax_cutover' parameter when
  querying the payout_items API endpoint.
- A signature is provided in the Webhook-Signature header of the request.
- It's important that you keep the secret safe, and change it periodically using the
  Dashboard.
- We recommend storing your webhook endpoint secret in an environment variable for
  security.
- Using TLS enables us to encrypt data in transit.
- Client authentication adds an extra check in the TLS handshake to validate that
  the client is authorised to access the endpoint.
- By default, all Billing Requests use the recommended verification preference.
- Each notification must be handled within the defined deadline, typically 10 minutes.
- This API is not available for partner integrations.
- Event creation is an asynchronous process, so it can take some time between an action
  occurring and its corresponding event getting included in API responses.
- Uses OAuth2 with access token — requires setup of connected app in GoCardless
- The action of removing a customer cannot be reversed, so please use with care.
- This API is restricted to GoCardless Embed customers.
- All properties associated with subscription_request and instalment_schedule_request
  are only supported for ACH and PAD schemes.
- Instant Bank Pay is only available for transactions in GBP and EUR.
- This endpoint is restricted as the authorisation must be used within a checkout
  flow.
- This endpoint is restricted to GoCardless Pro and GoCardless Enterprise accounts
  with the custom payment pages upgrade.
- This API supports OAuth2 authentication.
- Make sure to handle rate limiting and pagination.
- Uses OAuth2 for authentication with access token
- The auto_fulfil feature is experimental and cannot be disabled currently.
- Uses OAuth2 for authentication
- Ensure the access token is valid and has the right scopes
- Returns a cursor-paginated list of your Billing Request Templates.
- ACH/PAD is not supported on this endpoint.
- This endpoint is currently supported only for FasterPayments.
- This endpoint is rate limited to 60 requests per minute.
- Mandate Imports have an upper limit of 30,000 entries.
- This API is currently only available for approved integrators.
- Returns a cursor-paginated list of outbound payments.
- The resource is saved to the database even if incomplete.
- You can only specify a payment reference for Bacs payments if you’re on the GoCardless
  Plus, Pro or Enterprise packages.
- Scenario Simulators allow you to manually trigger and test certain paths that your
  integration will encounter in the real world. These endpoints are only active in
  the sandbox environment.
- PayerAuthorisation is completed. Customer, CustomerBankAccount and Mandate have
  been created.
- Restricted to organisations with the Transfer Bank Accounts upgrade
- This endpoint only supports UK based limited companies
- Payments will still be collected unless manually canceled.
- Returns a cursor-paginated list of your webhooks.
- The mandate can be cancelled, created, transferred, or expired.
- The webhook ID included under the meta key should not be used for deduplication.
- Intelligent retries need to be enabled in GoCardless Dashboard
- Requests to health check endpoint do not require authorization
- The ids for tax rates are shared between the environments.
- OAuth allows access to user accounts once authorized.
- Uses OAuth2 with refresh token — requires setup of connected app in api
errors:
- '498 Invalid Token: Occurs when the webhook signature is invalid.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Validation errors may occur if the requested payment amounts do
  not sum up correctly.'
- '401 Unauthorized: Check your access token.'
- '429: Too Many Requests. A rate limit has been reached.'
- '400: Bad Request. The request could not be understood by the server.'
- '401: Unauthorized. The client has not provided a valid Authentication HTTP header.'
- '401 Unauthorized: Recheck access token or permissions.'
- '401 Unauthorized: Recheck access token'
- 'invalid_: The errors key may also hold an array of type errors if the JSON you
  sent was incorrectly typed.'
- 'path_: not_ found - The path was not recognised. Check that you spelled the resource
  name correctly, and that the URL is formatted correctly.'
- 'resource_: not_ found - The ID in the request was not found in our database.'
- 'link_: not_ found - One of the link[resource] IDs in the request was not found.'
- unauthorized - Your username/password was not recognised.
- forbidden - You were authenticated, but you do not have permission to access that
  resource.
- 'feature_: disabled - You are trying to use a feature which hasn’t been enabled
  on your account.'
- 'not_: acceptable - The content type specified in your Accept header was not acceptable
  to this endpoint.'
- 'request_: entity_ too_ large - The body of your request is too large.'
- 'unsupported_: media_ type - The API communicates using JSON only.'
- 'rate_: limit_ exceeded - You have exceeded the rate limit.'
- 'access_: token_ not_ found - No access token with the ID specified was found.'
- 'access_: token_ not_ active - The access token you are using has been disabled.'
- 'access_: token_ revoked - The access token you are using has been revoked by the
  user.'
- 'missing_: authorization_ header - No Authorization header was included in your
  request.'
- 'invalid_: authorization_ header - The Authorization header sent was not valid.'
- 'insufficient_: permissions - The access token you are using does not have the right
  scope to perform the requested action.'
- 'method_: not_ allowed - The HTTP verb used is not permitted.'
- 'bad_: request - The request syntax was incorrect.'
- 'idempotency_: key_ too_ long - An idempotency key was supplied for this request
  but exceeded the max length of this key.'
- 'invalid_: document_ structure - The JSON sent to the server was not in the correct
  structure.'
- 'invalid_: content_ type - When including a JSON body with a request you must also
  include a Content-Type header.'
- 'tls_: required - The API can only be accessed over TLS/SSL.'
- 'missing_: version_ header - No version header was included in your request.'
- 'version_: not_ found - The specified version was not found.'
- 'invalid_: filters - The combination of filters specified in the query string of
  your request are not allowed.'
- 'request_: body_ not_ allowed - Sending a request body is not supported for the
  HTTP method you have used.'
- 'customer_: data_ removed - The customer has been removed and they can no longer
  be returned by our API.'
- 'payout_: items_ data_ archived - Payout items for payouts created more than 6 months
  ago have been archived.'
- 'cancellation_: failed - The mandate, payment or subscription was not in a cancellable
  state.'
- 'retry_: failed - The payment could not be retried.'
- 'disable_: failed - The customer or creditor bank account could not be disabled.'
- 'mandate_: is_ inactive - The payment could not be created, because the mandate
  linked is cancelled, failed, or expired.'
- 'mandate_: replaced - The resource could not be created, because the mandate it
  links to has been replaced.'
- 'bank_: account_ disabled - The mandate could not be created because the customer
  bank account linked is disabled.'
- 'mandate_: not_ inactive - The mandate could not be reinstated.'
- 'refund_: is_ unreachable - The refund could not be created.'
- 'refund_: payment_ invalid_ state - The refund could not be created, because the
  payment specified is not confirmed or paid_out.'
- 'total_: amount_ confirmation_ invalid - The refund could not be created because
  the total amount refunded does not match.'
- 'number_: of_ refunds_ exceeded - The refund could not be created because five refunds
  have already been created.'
- 'idempotent_: creation_ conflict - The resource has not been created as a resource
  has already been created with the supplied idempotency key.'
- 'customer_: bank_ account_ token_ used - The customer bank account could not be
  created because the token given has already been used.'
- 'billing_: request_ must_ be_ ready_ to_ fulfil - The billing request must have
  no outstanding required actions.'
- 'bank_: account_ exists - The customer or creditor bank account you are trying to
  create already exists.'
- 'available_: refund_ amount_ insufficient - The refund requested by the creditor
  could not be created for the given currency.'
- '400 Bad Request: Check the parameters being sent.'
- '401 Unauthorized: Ensure the access token is valid.'
- '404 Not Found: Verify the endpoint or resource ID.'
- '409 Conflict: Block already exists'
- '404 NotFound: Block ID not found'
- '410 Gone: This customer data has been removed'
- 'disable_failed: The bank account has already been disabled.'
- 'bank_account_exists: Duplicate bank account attempt'
- 'cancellation_failed: Mandate already cancelled.'
- 'mandate_not_inactive: Mandate cannot be reinstated.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '403 Forbidden: You are not authorised to handle notifications of this type'
- '410 Gone: This notification can no longer be handled'
- Validation failed
- is the wrong length (should be 8 characters)
- is required
- '422: Validation failed'
- '422: The Payer Authorisation needs to be submitted before confirmation'
- 'mandate_is_inactive: The linked mandate is cancelled or has failed.'
- 'cancellation_failed: The payment’s status is not pending_submission.'
- 'retry_failed: The payment has not failed.'
- '410 Gone: Payout items for payouts created more than 6 months ago are archived.'
- '401 Unauthorized: Invalid access token'
- '404 Not Found: Webhook or event does not exist'
- '400 Bad Request: Invalid parameters'
- '404 Not Found: The specified event does not exist.'
- '401 Unauthorized: Check your API credentials.'
- 'validation_failed: Invalid data provided.'
- 'subscription_not_active: The subscription is no longer active.'
- 'subscription_already_ended: The subscription has taken all payments.'
- 'mandate_payments_require_approval: The amount is being changed and the mandate
  requires approval.'
- 'number_of_subscription_amendments_exceeded: The subscription amount has already
  been changed 10 times.'
- 'forbidden: The amount is being changed, and the subscription was created by an
  app and you are not authenticated as that app.'
- '400 Bad Request: Invalid request parameters.'
- '401 Unauthorized: Check the provided authentication credentials.'
- '404 Not Found: The requested resource was not found.'
- '422 Unprocessable Entity: Cannot provide both a mandate and other details'
- forbidden
- validation_failed
- subscription_not_paused
- cancellation_failed
- 'invalid_request: You failed to provide either a scope or a response_type.'
- 'invalid_scope: You provided a scope other than read_only or read_write.'
- 'access_denied: The user chose not to connect their account to your app.'
- '498 Token Invalid: Webhooks with an invalid signature must return this error.'
- '204 No Content: Webhooks about unknown events should return this.'
- 'creation_failed: Could not create the instalment schedule and its payments.'
- 'errored: One or more of the instalments is in a failed state.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify access token.'
- '404 Not Found: Ensure resource ID is correct.'
- 'Rate limit exceeded: The rate limit for this resource is <times>/<time_period>.
  Please try again in <time_left> seconds'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '498 Invalid Token: Signature verification failed.'
- The error object is null if no error was encountered, such as when a customer clicks
  the exit button.
- '498 Invalid Token: The webhook token is invalid or has expired.'
- '409 Conflict: Attempting to enable or disable a block that does not exist.'
- '404 NotFound: Requested block ID does not exist.'
- 'bank_account_exists: If you try to create a duplicate bank account.'
- '400 Bad Request: Check the request parameters'
- '404 Not Found: Resource does not exist'
- 'record_limit_exceeded: Attempting to add more than 30,000 rows to a single mandate
  import.'
- '400 Bad Request: The request was invalid.'
- '401 Unauthorized: Authentication information is missing or invalid.'
- '404 Not Found: The resource could not be found.'
- '429 Too Many Requests: Rate limit exceeded.'
- '500 Internal Server Error: An error occurred on the server.'
- invalid_
- path_
- resource_
- link_
- unauthorized
- feature_
- not_
- acceptable
- request_
- entity_ too_ large
- unsupported_
- media_ type
- rate_
- limit_ exceeded
- access_
- token_ not_ found
- token_ not_ active
- token_ revoked
- missing_
- authorization_ header
- insufficient_
- permissions
- method_
- not_ allowed
- bad_
- request
- idempotency_
- key_ too_ long
- document_ structure
- content_ type
- tls_
- required
- version_ header
- version_
- not_ found
- filters
- body_ not_ allowed
- customer_
- data_ removed
- payout_
- items_ data_ archived
- '400 Bad Request: The request could not be understood by the server, usually due
  to malformed syntax.'
- '401 Unauthorized: The client has not provided a valid Authentication HTTP header.'
- '403 Forbidden: The client has provided a valid Authentication header, but does
  not have permission to access this resource.'
- '405 Method Not Allowed: The HTTP verb used, or resource requested is not allowed.'
- '409 Conflict: The resource to be created by your request already exists.'
- '429 Too Many Requests: A rate limit has been reached.'
- '401 Unauthorized: Recheck access token or permissions'
- '404 Not Found: Ensure the billing request ID is valid'
- '401 Unauthorized: Recheck OAuth token.'
- 'cancellation_failed: mandate is already cancelled'
- 'mandate_not_inactive: mandate cannot be reinstated'
- '422 Unprocessable entity: Validation failed'
- 'subscription_not_active: Subscription is no longer active.'
- 'subscription_already_ended: Subscription has taken all payments.'
- 'mandate_payments_require_approval: Amount change requires mandate approval.'
- 'number_of_subscription_amendments_exceeded: Subscription amount changed too many
  times.'
- 'forbidden: Issue with subscription created by another app.'
- 'forbidden: If the subscription was created by an app and you are not authenticated
  as that app.'
- 'validation_failed: If invalid data is provided when attempting to pause or resume
  a subscription.'
- 'subscription_not_paused: If the subscription is not paused.'
- 'mandate_cancelled: The mandate was cancelled via an API call.'
- 'bank_account_closed: The bank account for this mandate has been closed.'
- 498 Invalid Token
- 204 No Content
- '400 Bad Request: Check request parameters'
- 'invalid_request: Missing required parameters.'
- 'invalid_scope: Provided scope is not valid.'
- 'access_denied: User denied access.'
- 'customer_bank_account_token_used: Attempting to create a second customer bank account
  from the same customer bank account token.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - BillingRequestFlow
  - Client
  - OAuth
client:
  headers:
    User-Agent: gocardless-webhook-service/1.1
    Content-Type: application/json
    Accept: application/json
    GoCardless-Version: '2015-07-06'
    access_token: getenv('GC_ACCESS_TOKEN')
  base_url: https://api-sandbox.gocardless.com
  auth:
    type: oauth2
    flow: authorization_code
    token_url: https://connect.gocardless.com/oauth/access_token
    client_id: '{{ dlt.secrets[''client_id''] }}'
    client_secret: '{{ dlt.secrets[''client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  paginator:
    type: cursor
    default_page_size: 5
    cursor_param: after
    page_size_param: limit
source_metadata: null
