resources:
- name: pear init
  endpoint:
    path: /pear-runtime/cli
    method: POST
    data_selector: init
    params: {}
- name: pear dev
  endpoint:
    path: /pear-runtime/cli
    method: POST
    data_selector: dev
    params: {}
- name: pear stage
  endpoint:
    path: /pear-runtime/cli
    method: POST
    data_selector: stage
    params: {}
- name: pear seed
  endpoint:
    path: /pear-runtime/cli
    method: POST
    data_selector: seed
    params: {}
- name: pear run
  endpoint:
    path: /pear-runtime/cli
    method: POST
    data_selector: run
    params: {}
- name: pear release
  endpoint:
    path: /pear-runtime/cli
    method: POST
    data_selector: release
    params: {}
- name: pear info
  endpoint:
    path: /pear-runtime/cli
    method: GET
    data_selector: info
    params: {}
- name: pear dump
  endpoint:
    path: /pear-runtime/cli
    method: POST
    data_selector: dump
    params: {}
- name: pear touch
  endpoint:
    path: /pear-runtime/cli
    method: POST
    data_selector: touch
    params: {}
- name: pear sidecar
  endpoint:
    path: /pear-runtime/cli
    method: POST
    data_selector: sidecar
    params: {}
- name: pear versions
  endpoint:
    path: /pear-runtime/cli
    method: GET
    data_selector: versions
    params: {}
- name: pear shift
  endpoint:
    path: /pear-runtime/cli
    method: POST
    data_selector: shift
    params: {}
- name: pear reset
  endpoint:
    path: /pear-runtime/cli
    method: POST
    data_selector: reset
    params: {}
- name: pear gc
  endpoint:
    path: /pear-runtime/cli
    method: POST
    data_selector: gc
    params: {}
- name: pear data
  endpoint:
    path: /pear-runtime/cli
    method: GET
    data_selector: data
    params: {}
- name: microphone_status
  endpoint:
    path: /media/status/microphone
    method: GET
- name: camera_status
  endpoint:
    path: /media/status/camera
    method: GET
- name: screen_status
  endpoint:
    path: /media/status/screen
    method: GET
- name: microphone_access
  endpoint:
    path: /media/access/microphone
    method: POST
- name: camera_access
  endpoint:
    path: /media/access/camera
    method: POST
- name: screen_access
  endpoint:
    path: /media/access/screen
    method: POST
- name: desktop_sources
  endpoint:
    path: /media/desktopSources
    method: GET
- name: migration_scenarios
  endpoint:
    path: /migration/scenarios
    method: GET
    data_selector: scenarios
- name: migration_strategy
  endpoint:
    path: /migration/strategy
    method: GET
    data_selector: strategy
- name: config_migration
  endpoint:
    path: /migration/config
    method: GET
    data_selector: config
- name: route_handling_migration
  endpoint:
    path: /migration/route-handling
    method: GET
    data_selector: route_handling
- name: api_migration
  endpoint:
    path: /migration/api
    method: GET
    data_selector: api
- name: verifying_migration
  endpoint:
    path: /migration/verifying
    method: GET
    data_selector: verifying
- name: pear_applications
  endpoint:
    path: /pear/data/apps
    method: GET
    data_selector: applications
    params: {}
- name: uninstall_pear_application
  endpoint:
    path: /pear/reset
    method: POST
    data_selector: reset
    params: {}
- name: bare-assert
  endpoint:
    path: /bare-assert
    method: GET
- name: bare-buffer
  endpoint:
    path: /bare-buffer
    method: GET
- name: bare-subprocess
  endpoint:
    path: /bare-subprocess
    method: GET
- name: bare-console
  endpoint:
    path: /bare-console
    method: GET
- name: bare-crypto
  endpoint:
    path: /bare-crypto
    method: GET
- name: bare-events
  endpoint:
    path: /bare-events
    method: GET
- name: bare-fs
  endpoint:
    path: /bare-fs
    method: GET
- name: bare-http1
  endpoint:
    path: /bare-http1
    method: GET
- name: bare-https
  endpoint:
    path: /bare-https
    method: GET
- name: bare-inspector
  endpoint:
    path: /bare-inspector
    method: GET
- name: bare-module
  endpoint:
    path: /bare-module
    method: GET
- name: bare-os
  endpoint:
    path: /bare-os
    method: GET
- name: bare-path
  endpoint:
    path: /bare-path
    method: GET
- name: bare-process
  endpoint:
    path: /bare-process
    method: GET
- name: bare-readline
  endpoint:
    path: /bare-readline
    method: GET
- name: bare-repl
  endpoint:
    path: /bare-repl
    method: GET
- name: bare-stream
  endpoint:
    path: /bare-stream
    method: GET
- name: bare-timers
  endpoint:
    path: /bare-timers
    method: GET
- name: bare-tls
  endpoint:
    path: /bare-tls
    method: GET
- name: bare-tty
  endpoint:
    path: /bare-tty
    method: GET
- name: bare-url
  endpoint:
    path: /bare-url
    method: GET
- name: bare-utils
  endpoint:
    path: /bare-utils
    method: GET
- name: bare-worker
  endpoint:
    path: /bare-worker
    method: GET
- name: bare-zlib
  endpoint:
    path: /bare-zlib
    method: GET
- name: my-package
  endpoint:
    path: ./index.js
    method: GET
    data_selector: records
- name: pear
  endpoint:
    path: /guides/starting-a-pear-desktop-project
    method: GET
    data_selector: pear
    params: {}
- name: chat_room
  endpoint:
    path: /chat/room
    method: POST
    data_selector: room_data
- name: stage_app
  endpoint:
    path: /guides/sharing-a-pear-app
    method: GET
    data_selector: output
    params: {}
- name: run_app
  endpoint:
    path: /guides/sharing-a-pear-app#step-2.-run-the-app-on-the-same-machine
    method: GET
    data_selector: output
    params: {}
- name: seed_app
  endpoint:
    path: /guides/sharing-a-pear-app#step-3.-seed-the-app
    method: GET
    data_selector: output
    params: {}
- name: run_on_another_machine
  endpoint:
    path: /guides/sharing-a-pear-app#step-4.-run-the-app-on-another-machine
    method: GET
    data_selector: output
    params: {}
- name: pear_stage
  endpoint:
    path: /guides/sharing-a-pear-app
    method: GET
    data_selector: steps
- name: autopass
  endpoint:
    path: /autopass
    method: GET
    data_selector: data
    params: {}
- name: release
  endpoint:
    path: /pear/release
    method: POST
    data_selector: release
    params: {}
- name: stage
  endpoint:
    path: /pear/stage
    method: POST
    data_selector: stage
    params: {}
- name: seed
  endpoint:
    path: /pear/seed
    method: POST
    data_selector: seed
    params: {}
- name: autopass_mobile_example
  endpoint:
    path: /autopass-mobile-example
    method: GET
    data_selector: records
    params: {}
- name: template
  endpoint:
    path: /guides/creating-a-pear-init-template
    method: GET
    data_selector: params
    params: {}
- name: core
  endpoint:
    path: /building-blocks/hypercore
    method: GET
    data_selector: properties
    params: {}
- name: core
  endpoint:
    path: /hypercore
    method: GET
    data_selector: coreData
    params: {}
- name: db
  endpoint:
    path: /db
    method: GET
    data_selector: records
- name: db
  endpoint:
    path: /building-blocks/hyperbee
    method: GET
    data_selector: properties
    params: {}
- name: immutablePut
  endpoint:
    method: POST
- name: immutableGet
  endpoint:
    method: GET
- name: mutablePut
  endpoint:
    method: POST
- name: mutableGet
  endpoint:
    method: GET
- name: DHT
  endpoint:
    path: /building-blocks/hyperdht
    method: GET
    data_selector: DHT methods
- name: immutablePut
  endpoint:
    path: /immutablePut
    method: POST
    data_selector: hash
    params: {}
- name: immutableGet
  endpoint:
    path: /immutableGet
    method: GET
    data_selector: value
    params: {}
- name: mutablePut
  endpoint:
    path: /mutablePut
    method: POST
    data_selector: seq
    params: {}
- name: mutableGet
  endpoint:
    path: /mutableGet
    method: GET
    data_selector: value
    params:
      seq: '0'
      latest: 'false'
- name: writer-app
  endpoint:
    path: /writer-app
    method: POST
    data_selector: data
    params: {}
- name: reader-app
  endpoint:
    path: /reader-app
    method: GET
    data_selector: data
    params: {}
- name: server-app
  endpoint:
    path: /server-app
    method: POST
    data_selector: connection
    params: {}
- name: client-app
  endpoint:
    path: /client-app
    method: GET
    data_selector: connection
    params: {}
- name: peer-app
  endpoint:
    path: /peer-app
    method: GET
    data_selector: connections
    params: {}
- name: bee-writer-app
  endpoint:
    path: /bee-writer-app
    method: GET
    data_selector: records
- name: bee-reader-app
  endpoint:
    path: /bee-reader-app
    method: GET
    data_selector: records
- name: core-reader-app
  endpoint:
    path: /core-reader-app
    method: GET
    data_selector: records
- name: writer-app
  endpoint:
    path: /writer-app
    method: GET
    data_selector: data
    params: {}
- name: reader-app
  endpoint:
    path: /reader-app
    method: GET
    data_selector: data
    params: {}
- name: drive-writer-app
  endpoint:
    path: /how-tos/create-a-p2p-filesystem
    method: GET
    data_selector: writer-app
    params: {}
- name: drive-reader-app
  endpoint:
    path: /how-tos/create-a-p2p-filesystem
    method: GET
    data_selector: reader-app
    params: {}
- name: drive-bee-reader-app
  endpoint:
    path: /how-tos/create-a-p2p-filesystem
    method: GET
    data_selector: bee-reader-app
    params: {}
- name: corestore
  endpoint:
    path: /helpers/corestore
    method: GET
    data_selector: records
- name: drive
  endpoint:
    path: /localdrive
    method: GET
    data_selector: entries
    params: {}
- name: mirror_drive
  endpoint:
    path: /helpers/mirrordrive
    method: GET
    data_selector: mirror
- name: drive-writer-app
  endpoint:
    path: /drive/writer
    method: POST
    data_selector: output
    params: {}
- name: drive-reader-app
  endpoint:
    path: /drive/reader
    method: POST
    data_selector: output
    params: {}
- name: drive-bee-reader-app
  endpoint:
    path: /drive/bee-reader
    method: POST
    data_selector: output
    params: {}
- name: drive
  endpoint:
    path: /helpers/localdrive
    method: GET
    data_selector: entries
    params: {}
- name: hypershell-server
  endpoint:
    path: /hypershell-server
    method: POST
- name: hypershell
  endpoint:
    path: /hypershell
    method: POST
- name: hypershell-keygen
  endpoint:
    path: /hypershell-keygen
    method: POST
- name: peer
  endpoint:
    path: /hypershell/peer
    method: GET
    data_selector: records
    params: {}
- name: authorized_peers
  endpoint:
    path: /hypershell/authorized_peers
    method: GET
    data_selector: records
    params: {}
- name: storage
  endpoint:
    path: /tools/drives
    method: GET
    data_selector: records
    params: {}
- name: storage
  endpoint:
    path: /tools/drives
    method: GET
    data_selector: storage
    params: {}
notes:
- Pear v2 introduces a breaking change to the application entrypoint and includes
  several API deprecations.
- Pear v1 supports HTML entrypoints, while Pear v2 supports only JavaScript entrypoints.
- Running the command 'pear data apps' lists installed applications.
- Small and modular JavaScript runtime for desktop and mobile.
- Like Node.js, it provides an asynchronous, event-driven architecture.
- Application configuration is under the pear property in package.json
- This application operates in a peer-to-peer manner.
- Applications can be shared with peers by seeding them to the network from an efficient
  local data structure.
- The application has no state when it's opened for the first time, so the application
  may show a loader until it's ready to reveal.
- Uses the command 'pear stage <channel|link> [dir]' to stage applications.
- Uses Bare and Expo to build mobile applications
- Requires installation of dependencies like b4a, bare-fs, bare-rpc, corestore, autopass
- Changes to an application can only propagate to peers when the application is being
  seeded.
- Debugging Pear Terminal Applications is different than debugging Desktop Applications
  because they do not come with a UI.
- React Native uses Hermes as its Javascript engine by default. Hermes does not support
  UDP.
- Corestores are meant to manage many cores and their sessions efficiently.
- Hyperswarm supports joining multiple topics on the same instance and will dedup
  peer connections shared between them.
- Running external code opens an application up to being exploited if the external
  source is nefarious or compromised.
- Development dependencies are not required at runtime and should therefore be excluded
  to reduce bundle size and improve performance.
- The .git directory is excluded by default.
- Uses a template structure with _template.json and package.json files for initialization
- A Hypercore can only be modified by its creator; internally it signs updates with
  a private key that's meant to live on a single machine, and should never be shared.
- By default Hypercore uses random-access-file for storage.
- Do not attempt to create multiple Hypercores with the same private key (i.e., on
  two different devices).
- A conflict implies that the core was implicitly forked.
- A Hyperbee can only have a single writer on a single machine.
- The creator of the Hyperdrive is the only person who can modify it.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The default bootstrap servers are publicly served on behalf of the commons.
- To run a fully isolated DHT, start one or more DHT nodes with an empty bootstrap
  array.
- Autobase supports optimistic appends
- HyperDHT's holepunching will fail if both the client peer and the server peer are
  on randomizing NATs, in which case the connection must be relayed through a third
  peer.
- It is best practice to only have one Hyperswarm instance per application. This will
  speed up connections by reducing number of entries per topic and connections.
- The Hypercore instance is replicated with other peers using Hyperswarm.
- Only one Corestore per application is needed. This is the recommended best practices
  to make managing Hypercores efficient and to avoid pitfalls from having multiple
  Corestores.
- HyperDHT uses a series of holepunching techniques to establish direct connections
  between peers.
- It is best practice to only have one Hyperswarm instance per application.
- The writer-app outputs the Hypercore key.
- LocalDrive does not create the directory until something has been written.
- Only one Corestore per application is needed.
- This is the recommended best practices to make managing Hypercores efficient and
  to avoid pitfalls from having multiple Corestores.
- Corestore is a Hypercore factory that makes it easier to manage large collections
  of named Hypercores.
- A file system API that is similar to Hyperdrive.
- Supports mirroring files from user filesystem to a drive, and vice-versa.
- Mirrors a Hyperdrive or a LocalDrive into another one
- LocalDrive does not create the directory passed to it until something has been written.
- SecretStream can be used as a standalone module to provide encrypted communication
  between two parties.
- A series of binary encoders/decoders for building small and fast parsers and serializers.
- This tool comes in handy when mirroring files from user filesystem to a drive, and
  vice-versa.
- All connections are denied by default until allowed in the firewall.
- Public keys can be added in real time while the server is running.
- An end-to-end encrypted pipeline for the Internet, utilizing the Hyperswarm and
  Noise Protocol for secure communications.
- Under the hood, Hyperswarm performs UDP holepunching. So the server should be accessible
  even if it is located on a home network.
- Public keys can be added in real time by adding them to the firewall list while
  `hypershell-server` is running.
- By default, it tries to use `.drives` from the current directory.
- If it doesn't exist, it will go back `../` until it finds an existing `.drives`.
- The Command Line Interface is the primary interface for Pear Development.
- Uses default storage at .drives in the current directory.
- Development happens primarily on Apple hardware with Linux and Windows systems running
  as virtual machines.
- No sign-ups are required when using Keet.
- Everything in Keet, including the app itself, is distributed this way, fully encrypted,
  private, and only shared with the people you want.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404 Not Found: The specified file does not exist.'
- '500 Internal Server Error: An unexpected error occurred.'
- '401 Unauthorized: Provide a valid key.'
- '404 Not Found: Check the requested endpoint.'
- '500 Internal Server Error: Server issues, try again later.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://docs.pears.com
  headers:
    Accept: application/json
source_metadata: null
