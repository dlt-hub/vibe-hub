resources:
- name: contacts
  endpoint:
    path: /account/v1/json/contactCreate
    method: POST
    data_selector: responses
    params: {}
- name: contactsFind
  endpoint:
    path: /contactsFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: contactInfo
  endpoint:
    path: /contactInfo
    method: POST
    data_selector: response
    params: {}
- name: contactCreate
  endpoint:
    path: /contactCreate
    method: POST
    data_selector: response
    params: {}
- name: contactUpdate
  endpoint:
    path: /contactUpdate
    method: POST
    data_selector: response
    params: {}
- name: domainsFind
  endpoint:
    path: /domainsFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: domainCreate
  endpoint:
    path: /domainCreate
    method: POST
    data_selector: response
    params: {}
- name: domainUpdate
  endpoint:
    path: /domainUpdate
    method: POST
    data_selector: response
    params: {}
- name: domainInfo
  endpoint:
    path: /domainInfo
    method: POST
    data_selector: response
    params: {}
- name: domainStatus
  endpoint:
    path: /domainStatus
    method: POST
    data_selector: responses
    params: {}
- name: domainDelete
  endpoint:
    path: /domainDelete
    method: POST
    data_selector: ''
    params: {}
- name: domainWithdraw
  endpoint:
    path: /domainWithdraw
    method: POST
    data_selector: ''
    params: {}
- name: domainDeletionCancel
  endpoint:
    path: /domainDeletionCancel
    method: POST
    data_selector: ''
    params: {}
- name: domainTransfer
  endpoint:
    path: /domainTransfer
    method: POST
    data_selector: request
    params: {}
- name: domainTransferOutAck
  endpoint:
    path: /domainTransferOutAck
    method: POST
    data_selector: request
    params: {}
- name: domainTransferOutNack
  endpoint:
    path: /domainTransferOutNack
    method: POST
    data_selector: request
    params: {}
- name: domainRestore
  endpoint:
    path: /domainRestore
    method: POST
    data_selector: request
    params: {}
- name: domainCreateAuthInfo2
  endpoint:
    path: /domainCreateAuthInfo2
    method: POST
    data_selector: request
    params: {}
- name: jobsFind
  endpoint:
    path: /jobsFind
    method: POST
    data_selector: request
    params: {}
- name: zoneConfigsFind
  endpoint:
    path: /zoneConfigsFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: recordsFind
  endpoint:
    path: /recordsFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: zonesFind
  endpoint:
    path: /zonesFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: zoneCreate
  endpoint:
    path: /zoneCreate
    method: POST
    data_selector: response.zoneConfig
    params: {}
- name: zoneRecreate
  endpoint:
    path: /api/dns/v1/jsonxml/zoneRecreate
    method: POST
    data_selector: response.records
    params:
      zoneConfig: zoneConfig object
      records: list<Record>
      nameserverSetId: string
      useDefaultNameserverSet: bool
- name: zoneUpdate
  endpoint:
    path: /api/dns/v1/jsonxml/zoneUpdate
    method: POST
    data_selector: response.records
    params: {}
- name: recordsUpdate
  endpoint:
    path: /recordsUpdate
    method: POST
    data_selector: response.records
    params:
      zoneName: example.com
      recordsToAdd: []
      recordsToModify: []
      recordsToDelete: []
- name: resourceRecordSetUpdate
  endpoint:
    path: /resourceRecordSetUpdate
    method: POST
    data_selector: response
    params:
      hostname: www.example.com
      recordType: A
      rrSetContents: []
      removeAllRecords: false
- name: zoneDelete
  endpoint:
    path: /zoneDelete
    method: POST
    data_selector: response
    params:
      zoneConfigId: '15010100000010'
- name: zoneRestore
  endpoint:
    path: /zoneRestore
    method: POST
    data_selector: response
    params:
      zoneConfigId: '15010100000010'
- name: zonePurgeRestorable
  endpoint:
    path: /zonePurgeRestorable
    method: POST
    data_selector: response
    params:
      zoneConfigId: '15010100000010'
- name: changeContent
  endpoint:
    path: /changeContent
    method: POST
    data_selector: response
    params:
      recordType: MX
      oldContent: mail.mailserver.com
      newContent: mail.smtpservice.com
      includeTemplates: false
      includeSubAccounts: true
- name: zonesUntieFromTemplate
  endpoint:
    path: /zonesUntieFromTemplate
    method: POST
    data_selector: response
    params:
      zoneConfigIds:
      - '15010100000010'
- name: zonesTieToTemplate
  endpoint:
    path: /zonesTieToTemplate
    method: POST
    data_selector: null
    params: {}
- name: nameserverSetsFind
  endpoint:
    path: /nameserverSetsFind
    method: POST
    data_selector: null
    params: {}
- name: nameserverSetCreate
  endpoint:
    path: /nameserverSetCreate
    method: POST
    data_selector: null
    params: {}
- name: nameserverSetUpdate
  endpoint:
    path: /nameserverSetUpdate
    method: POST
    data_selector: null
    params: {}
- name: nameserverSetDelete
  endpoint:
    path: /nameserverSetDelete
    method: POST
    data_selector: null
    params: {}
- name: nameserverSetGetDefault
  endpoint:
    path: /nameserverSetGetDefault
    method: POST
    data_selector: null
    params: {}
- name: templatesFind
  endpoint:
    path: /templatesFind
    method: POST
    data_selector: response.data
    params:
      accountId: '150101000000001'
      limit: 10
      page: 1
      sort:
        field: templateName
        order: asc
- name: recordTemplatesFind
  endpoint:
    path: /recordTemplatesFind
    method: POST
    data_selector: response.data
    params:
      templateId: '15010100000010'
      limit: 10
      page: 1
      sort:
        field: recordTemplateName
        order: asc
- name: templateCreate
  endpoint:
    path: /templateCreate
    method: POST
    data_selector: response
    params: {}
- name: templateRecreate
  endpoint:
    path: /templateRecreate
    method: POST
    data_selector: response
    params: {}
- name: templateUpdate
  endpoint:
    path: /templateUpdate
    method: POST
    data_selector: response
    params: {}
- name: templateDelete
  endpoint:
    path: /templateDelete
    method: POST
    data_selector: ''
    params:
      templateId: '15010100000010'
- name: certificatesFind
  endpoint:
    path: /certificatesFind
    method: POST
    data_selector: response.data
    params:
      filter:
        field: accountId
        value: '35455111354542'
      limit: 10
      page: 1
      sort:
        field: commonName
        order: asc
- name: domainApproverList
  endpoint:
    path: /domainApproverList
    method: POST
    data_selector: response
    params:
      domainName: example.com
- name: csrDecode
  endpoint:
    path: /csrDecode
    method: POST
    data_selector: response.csr
    params:
      csr: '-----BEGIN CERTIFICATE REQUEST-----

        ...

        -----END CERTIFICATE REQUEST-----'
- name: checkAutoValidationCapable
  endpoint:
    path: /checkAutoValidationCapable
    method: POST
    data_selector: errors
    params:
      names:
      - example1.com
      - www.example1.com
      productCode: ssl-geotrust-rapidssl-12m
- name: orderCreate
  endpoint:
    path: /orderCreate
    method: POST
    data_selector: response
    params:
      order:
        type: DomainValidatedCertificateOrder
        csr: '-----BEGIN CERTIFICATE REQUEST-----

          ...

          -----END CERTIFICATE REQUEST-----'
        adminContact:
          title: Mr.
          firstName: George
          lastName: Orwell
          phoneNumber: ++149635453433
          emailAddress: admin@example.com
        techContact:
          title: Mr.
          firstName: Robert
          lastName: Stevenson
          phoneNumber: ++1333544451
          emailAddress: tech@example.com
        productCode: ssl-geotrust-rapidssl-12m
        validationType: validateViaEmail
        approverEmailAddress: admin@example.com
- name: orderCancel
  endpoint:
    path: /ssl/v1/jsonxml/orderCancel
    method: POST
    data_selector: status
    params:
      certificateId: String
- name: certificateDetailsGet
  endpoint:
    path: /ssl/v1/jsonxml/certificateDetailsGet
    method: POST
    data_selector: response
    params:
      certificateId: String
- name: certificateGet
  endpoint:
    path: /ssl/v1/jsonxml/certificateGet
    method: POST
    data_selector: response
    params:
      certificateId: String
- name: orderResendApproverEmail
  endpoint:
    path: /ssl/v1/jsonxml/orderResendApproverEmail
    method: POST
    data_selector: status
    params:
      certificateId: String
- name: certificateRevoke
  endpoint:
    path: /ssl/v1/jsonxml/certificateRevoke
    method: POST
    data_selector: status
    params:
      certificateId: String
- name: certificateReissue
  endpoint:
    path: /ssl/v1/jsonxml/certificateReissue
    method: POST
    data_selector: status
    params:
      certificateId: String
      csr: String
- name: virtualMachinesFind
  endpoint:
    path: /machine/v1/jsonxml/virtualMachinesFind
    method: POST
    data_selector: response
    params:
      filter:
        field: virtualMachineName
        value: String
      limit: Integer
      page: Integer
      sort:
        field: virtualMachineName
        order: asc
- name: virtualMachineCreate
  endpoint:
    path: /virtualMachineCreate
    method: POST
    data_selector: response
    params: {}
- name: virtualMachineInstall
  endpoint:
    path: /virtualMachineInstall
    method: POST
    data_selector: response
    params: {}
- name: virtualMachineEnableRescue
  endpoint:
    path: /virtualMachineEnableRescue
    method: POST
    data_selector: response
    params: {}
- name: virtualMachineDisableRescue
  endpoint:
    path: /virtualMachineDisableRescue
    method: POST
    data_selector: response
    params: {}
- name: virtualMachineChangeProduct
  endpoint:
    path: /virtualMachineChangeProduct
    method: POST
    data_selector: response
    params: {}
- name: virtualMachineDelete
  endpoint:
    path: /virtualMachineDelete
    method: POST
    data_selector: response
    params: {}
- name: virtualMachinePurgeRestorable
  endpoint:
    path: /virtualMachinePurgeRestorable
    method: POST
    data_selector: response
    params: {}
- name: virtualMachinePowerOn
  endpoint:
    path: /virtualMachinePowerOn
    method: POST
    data_selector: response
    params: {}
- name: virtualMachinePowerOff
  endpoint:
    path: /virtualMachinePowerOff
    method: POST
    data_selector: response
    params: {}
- name: virtualMachineShutdown
  endpoint:
    path: /virtualMachineShutdown
    method: POST
    data_selector: response
    params: {}
- name: virtualMachineReboot
  endpoint:
    path: /virtualMachineReboot
    method: POST
    data_selector: response
    params: {}
- name: virtualMachineReset
  endpoint:
    path: /virtualMachineReset
    method: POST
    data_selector: response
    params: {}
- name: webspacesFind
  endpoint:
    path: /webspacesFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
      sort.field: webspaceName
      sort.order: ASC
- name: webspaceCreate
  endpoint:
    path: /webspaceCreate
    method: POST
    data_selector: response
    params: {}
- name: webspaceUpdate
  endpoint:
    path: /webhosting/v1/jsonxml/webspaceUpdate
    method: POST
    data_selector: response
    params: {}
- name: webspaceDelete
  endpoint:
    path: /webhosting/v1/jsonxml/webspaceDelete
    method: POST
    data_selector: response
    params: {}
- name: usersFind
  endpoint:
    path: /database/v1/jsonxml/usersFind
    method: POST
    data_selector: response
    params: {}
- name: userCreate
  endpoint:
    path: /database/v1/jsonxml/userCreate
    method: POST
    data_selector: response
    params: {}
- name: userUpdate
  endpoint:
    path: /database/v1/jsonxml/userUpdate
    method: POST
    data_selector: response
    params: {}
- name: userDelete
  endpoint:
    path: /database/v1/jsonxml/userDelete
    method: POST
    data_selector: response
    params: {}
- name: vhostsFind
  endpoint:
    path: /vhostsFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: vhostCreate
  endpoint:
    path: /vhostCreate
    method: POST
    data_selector: response
    params: {}
- name: vhostUpdate
  endpoint:
    path: /vhostUpdate
    method: POST
    data_selector: response
    params: {}
- name: vhostDelete
  endpoint:
    path: /vhostDelete
    method: POST
    data_selector: status
    params:
      vhostId: string
- name: vhostRestore
  endpoint:
    path: /vhostRestore
    method: POST
    data_selector: status
    params:
      vhostId: string
- name: vhostActivateSsl
  endpoint:
    path: /vhostActivateSsl
    method: POST
    data_selector: response.sslSettings
    params:
      vhost:
        sslSettings:
          profile: string
          managedSslProductCode: string
- name: phpConfigurationMetadata
  endpoint:
    path: /phpConfigurationMetadata
    method: POST
    data_selector: responses
    params:
      all: boolean
- name: vhostPhpIniDefault
  endpoint:
    path: /vhostPhpIniDefault
    method: POST
    data_selector: response
    params:
      webspaceId: string
- name: vhostPhpIniList
  endpoint:
    path: /vhostPhpIniList
    method: POST
    data_selector: response
    params:
      vhostId: string
- name: phpversions
  endpoint:
    path: /phpversions
    method: POST
    data_selector: responses
    params: {}
- name: usersFind
  endpoint:
    path: /usersFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: userCreate
  endpoint:
    path: /userCreate
    method: POST
    data_selector: response
    params: {}
- name: userUpdate
  endpoint:
    path: /userUpdate
    method: POST
    data_selector: response
    params: {}
- name: userDelete
  endpoint:
    path: /userDelete
    method: POST
    data_selector: response
    params: {}
- name: databasesFind
  endpoint:
    path: /databasesFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: databaseCreate
  endpoint:
    path: /databaseCreate
    method: POST
    data_selector: response
    params: {}
- name: databaseUpdate
  endpoint:
    path: /databaseUpdate
    method: POST
    data_selector: response
    params: {}
- name: databaseDelete
  endpoint:
    path: /databaseDelete
    method: POST
    data_selector: response
    params: {}
- name: ImapMailbox
  endpoint:
    path: /mailboxCreate
    method: POST
    data_selector: response
    params: {}
- name: Forwarder
  endpoint:
    path: /mailboxCreate
    method: POST
    data_selector: response
    params: {}
- name: smtp_forwarder
  endpoint:
    path: /mailboxCreate
    method: POST
    data_selector: response
    params: {}
- name: mailing_list
  endpoint:
    path: /mailingList
    method: POST
    data_selector: response
    params: {}
- name: mailboxCreate
  endpoint:
    path: /mailboxCreate
    method: POST
    data_selector: response.mailbox
    params: {}
- name: mailboxUpdate
  endpoint:
    path: /mailboxUpdate
    method: POST
    data_selector: response
    params: {}
- name: mailboxesFind
  endpoint:
    path: /mailboxesFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: mailboxDelete
  endpoint:
    path: /mailboxDelete
    method: POST
    data_selector: response
    params: {}
- name: mailboxRestore
  endpoint:
    path: /mailboxRestore
    method: POST
    data_selector: response
    params: {}
- name: checkEmailAddress
  endpoint:
    path: /checkEmailAddress
    method: POST
    data_selector: response
    params: {}
- name: domainSettingsFind
  endpoint:
    path: /domainSettingsFind
    method: POST
    data_selector: response.data
    params:
      filter:
        field: DomainName
        value: example.com
- name: domainSettingsUpdate
  endpoint:
    path: /domainSettingsUpdate
    method: POST
    data_selector: response
    params: {}
- name: nextcloudUsersFind
  endpoint:
    path: /nextcloudUsersFind
    method: POST
    data_selector: response.data
    params:
      filter:
        field: NextcloudId
        value: 190913utddcl2hmyy7a
- name: nextcloudsFind
  endpoint:
    path: /nextcloudsFind
    method: POST
    data_selector: response.data
    params:
      filter:
        field: NextcloudId
        value: 190913utddcl2hmyy7a
- name: nextcloudCreate
  endpoint:
    path: /nextcloudCreate
    method: POST
    data_selector: response
    params: {}
- name: nextcloudUpdate
  endpoint:
    path: /nextcloudUpdate
    method: POST
    data_selector: response
    params: {}
- name: nextcloudUsersFind
  endpoint:
    path: /nextcloudUsersFind
    method: POST
    data_selector: data
    params:
      filter:
        field: NextcloudId
        value: 190913utddcl2hmyy7a
      limit: 5
      page: 1
- name: nextcloudModifyUsers
  endpoint:
    path: /nextcloudModifyUsers
    method: POST
    data_selector: ''
    params:
      nextcloudId: 250331353rvblb523ru
- name: nextcloudGroupsFind
  endpoint:
    path: /nextcloudGroupsFind
    method: POST
    data_selector: data
    params:
      filter:
        field: NextcloudId
        value: 190913utddcl2hmyy7a
      limit: 5
      page: 1
- name: nextcloudModifyGroupFolders
  endpoint:
    path: /nextcloudModifyGroupFolders
    method: POST
    data_selector: ''
    params:
      nextcloudId: 250331353rvblb523ru
- name: nextcloudAppsList
  endpoint:
    path: /nextcloudAppsList
    method: POST
    data_selector: data
    params:
      nextcloudId: 250331353rvblb523ru
- name: nextcloudAppGetConfiguration
  endpoint:
    path: /nextcloudAppGetConfiguration
    method: POST
    data_selector: ''
    params:
      appId: groupfolders
      language: de_DE
notes:
- Deleting contacts via API is not possible at the moment and might never be.
- Recreating an existing zone will cause it to be deleted and then created anew with
  the values and records provided.
- Uses API key for authentication
- The API uses asynchronous processing for certain requests.
- This method removes a restorable object permanently. You will not be able to restore
  it afterwards.
- The virtualMachinePowerOn method allows you to turn on a virtual machine.
- The virtualMachinePowerOff method allows you to turn off a virtual machine.
- The virtualMachineShutdown method allows you to gracefully shutdown a virtual machine.
- The virtualMachineReboot method allows you to gracefully reboot a virtual machine.
- The virtualMachineReset method emulates the behavior of pushing the reset power
  button.
- The function `webspacesFind` lets you list web spaces.
- The function `webspaceCreate` can create a new `webspace`.
- The primary name must be in ASCII/ACE format.
- Our system checks the values and if e.g. Key and Certificate do not match, you will
  receive an error.
- Creating a mailbox requires the type parameter to be set correctly.
- The mailboxCreate request is asynchronous.
- The mailbox type must be SmtpForwarder for SMTP Forwarder.
- The mailbox type must be MailingList for Mailing List.
- Request to create a mailing list or catchall mailbox.
errors:
- '200: OK'
- '400: The HTTP request was malformed'
- '404: Method, format, or entry point not found'
- '405: Method not allowed'
- '500: Internal server error'
- '502: Server temporarily not available'
- '503: Server temporarily not available due to maintenance'
- '504: Backend timeout'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key or token expiration'
- 'zoneConfig does not exist: Calling zoneRecreate with a zoneConfig that does not
  exist will result in an error.'
- If a record to delete or modify does not exist, an error will occur.
- '401 Unauthorized: Recheck API key validity'
- '401 Unauthorized: Recheck API key'
- '400 BAD REQUEST: Missing required fields in the request'
- '401 UNAUTHORIZED: Invalid API Key'
- '404 NOT FOUND: Endpoint does not exist'
auth_info:
  mentioned_objects: []
client:
  base_url: https://secure.hosting.de/api
  auth:
    type: apikey
    location: header
    header_name: authToken
source_metadata: null
