resources:
- name: stream
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: stream
- name: stream1
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: stream
    params: {}
- name: stream2
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: stream
    params: {}
- name: stream3
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: stream
    params: {}
- name: stream4
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: stream
    params: {}
- name: stream5
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: stream
    params: {}
- name: stream6
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: stream
    params: {}
- name: stream7
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: stream
    params: {}
- name: stream8
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: stream
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: response
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: action
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: GET
    data_selector: records
    params: {}
- name: GetMediaInfo
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: AddMedia
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: media_info
  endpoint:
    path: /GetMediaInfo
    method: POST
    data_selector: response
    params: {}
- name: AddMedia
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: response
- name: AddMedia
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: query
    params: {}
- name: AddMediaBenchmark
  endpoint:
    path: /AddMediaBenchmark
    method: POST
    data_selector: query
    params: {}
- name: HTTP(s) Server
  endpoint:
    path: http(s)://[user[:password]@]hostname[:port]/[path]/[filename]
    method: GET
- name: FTP / SFTP Server
  endpoint:
    path: ftp://[user[:password]@]hostname[:port]/[path]/[?passive=yes]
    method: GET
- name: Amazon Web Services (S3)
  endpoint:
    path: http(s)://[bucket].s3.amazonaws.com/[filename]
    method: GET
- name: Rackspace CloudFiles
  endpoint:
    path: http(s)://[RS_USER:RS_KEY@][RS_USER:RS_KEY@]storage.cloudfiles.com/[path]/[filename]
    method: GET
- name: Aspera Server
  endpoint:
    path: fasp://[user[:password]@]hostname[:port]/[path]/[filename]
    method: GET
- name: Microsoft Azure Blob
  endpoint:
    path: http(s)://[access_key]@[account].blob.core.windows.net/[container]/[path]
    method: GET
- name: OpenStack Cloud Storage
  endpoint:
    path: http(s)://[user[:password]@]storage.[region].oraclecloud.com/v1/[service-endpoint]/[container]/[object]
    method: GET
- name: RTMP
  endpoint:
    path: rtmp://[user[:password]@]hostname[:port]/[path]
    method: GET
- name: S3 NetApp
  endpoint:
    path: s3://[AccessKey[:SecretKey]@]hostname[:PORT]/[Object]
    method: GET
- name: Wasabi S3
  endpoint:
    path: s3://[AccessKey[:SecretKey]@]s3.wasabisys.com/[Bucket]/[Object]
    method: GET
- name: Backblaze S3
  endpoint:
    path: s3://[AccessKey[:SecretKey]@]s3.[Region].backblazeb2.com/[Bucket]/[Object]
    method: GET
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: media
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: decryption_parameters
  endpoint:
    path: /decryption
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[FileURL]'
      decryption: '[yes|no]'
      decryption_method: '[aes-128-cbc|aes-128-ctr|aes-256-cbc|aes-256-ctr]'
      decryption_key: '[Hexidecimal string]'
      decryption_key_file: '[URL]'
      decryption_iv: '[Hexidecimal string]'
      decryption_password: '[Password]'
- name: decryption_parameters
  endpoint:
    path: /decryption
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[FileURL]'
      decryption: '[yes|no]'
      decryption_method: '[aes-128-cbc|aes-128-ctr|aes-256-cbc|aes-256-ctr]'
      decryption_key: '[Hexidecimal string]'
      decryption_key_file: '[URL]'
      decryption_iv: '[Hexidecimal string]'
      decryption_password: '[Password]'
- name: notifications
  endpoint:
    params:
      notify_format: xml
      notify_upload_extended: 'no'
- name: notifications
  endpoint:
    path: /sns
    method: POST
- name: result
  endpoint:
    path: /result
    method: GET
    data_selector: result
    params: {}
- name: upload_response
  endpoint:
    path: /notify/upload
    method: POST
    data_selector: result
    params: {}
- name: AddMedia
  endpoint:
    path: /addMedia
    method: POST
- name: GetStatus
  endpoint:
    path: /getStatus
    method: GET
- name: result
  endpoint:
    path: /result
    method: GET
    data_selector: result
    params: {}
- name: result
  endpoint:
    path: /result
    method: GET
    data_selector: result
    params: {}
- name: AddMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      ludicrous_mode: '[yes|no]'
- name: metrics_report
  endpoint:
    path: /metrics/report
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source: '[SourceURL]'
      metrics_report:
        metrics:
        - vmaf
        - psnr
        - ssim
        - ms_ssim
        - bitrate
        destination: '[MetricsReportDestinationDir]'
      format:
      - output: '[OutputFormat]'
        metrics_report_sample_name: '[SampleName]'
      - output: '[OutputFormat]'
        metrics_report_sample_name: '[SampleName]'
- name: metrics_report
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source: '[SourceURL]'
      metrics_report:
        metrics:
        - vmaf
        - psnr
        - ssim
        - ms_ssim
        - bitrate
        destination: '[MetricsReportDestinationDir]'
      format:
      - output: '[OutputFormat]'
        metrics_report_sample_name: '[SampleName]'
      - output: '[OutputFormat]'
        metrics_report_sample_name: '[SampleName]'
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source: '[SourceFile]'
      format:
        output: '[output]'
- name: video_codec_options
  endpoint:
    path: /api/video/codecs
    method: GET
    data_selector: codecs
    params: {}
- name: video_size_options
  endpoint:
    path: /api/video/sizes
    method: GET
    data_selector: sizes
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[SourceFile]'
      format:
        output: apple_prores
        color_primaries: 2
        transfer_characteristics: 2
        matrix_coefficients: 2
        audio_codec: 'apple_prores: pcm_s24le'
        force_interlaced: 'no'
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: AddMedia
  endpoint:
    path: /reference/misc-addmedia
    method: POST
    data_selector: query
    params: {}
- name: AddMedia
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: query
    params: {}
- name: AddMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      source: '[SourceFile]'
      format:
        output: cablelabs_mpegts
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: closed_captions_parameters
  endpoint:
    path: /reference/closed-captions
    method: GET
    data_selector: parameters
- name: closed_captions
  endpoint:
    path: /reference/closed-captions
    method: GET
    data_selector: parameters
- name: format_params
  endpoint:
    path: /format/params
    method: GET
    data_selector: params
    params: {}
- name: video_codec_params
  endpoint:
    path: /video/codec/params
    method: GET
    data_selector: params
    params: {}
- name: video_codec_params
  endpoint:
    path: /video/codec/params
    method: GET
    data_selector: params
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: Get QC Status
  endpoint:
    path: /reference/qc-status
    method: GET
- name: GetQueueTime
  endpoint:
    path: /reference/misc-getqueuetime
    method: GET
- name: GetQueueStats
  endpoint:
    path: /reference/misc-getqueuestats
    method: GET
- name: GetMediaList
  endpoint:
    path: /reference/responses-getmedialist
    method: GET
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: video_encoding
  endpoint:
    path: /encoding/video
    method: POST
    data_selector: query
    params: {}
- name: addMedia
  endpoint:
    path: /action/addMedia
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: addMedia
      source: '[SourceFile]'
      format:
        output: '[output]'
- name: audio_stream
  endpoint:
    path: /audio_stream
    method: POST
    data_selector: query
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: addMedia
  endpoint:
    path: /addMedia
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: addMedia
      source: '[SourceFile]'
      format:
        output: '[output]'
        start: '[StartTimecode]'
        finish: '[FinishTimecode]'
        duration: '[Duration]'
        set_video_duration: '[yes|no]'
        apply_timecode: '[yes|no]'
- name: preset_2
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      format:
        output: webm
        video_codec: '[vp8|vp9]'
        preset: '2'
        video_codec_parameters:
          two_pass: 'yes'
          quality: good
          auto-alt-ref: '1'
          lag-in-frames: '16'
          slices: '2'
          static-thresh: '0'
          qmin: '0'
          qmax: '60'
          minsection-pct: '5'
          maxsection-pct: '800'
          keyint_max: '360'
          keyint_min: '0'
          target-bitrate: 2000k
          fps: 30000/1001
          cpu-used: '1'
- name: preset_3
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      format:
        output: webm
        video_codec: '[vp8|vp9]'
        preset: '3'
        video_codec_parameters:
          two_pass: 'yes'
          quality: good
          auto-alt-ref: '1'
          lag-in-frames: '16'
          static-thresh: '0'
          qmin: '4'
          qmax: '63'
          profile: '1'
          minsection-pct: '15'
          maxsection-pct: '400'
          keyint_max: '360'
          keyint_min: '0'
          target-bitrate: 2000k
          fps: 30000/1001
          cpu-used: '0'
- name: preset_4
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      format:
        output: webm
        video_codec: '[vp8|vp9]'
        preset: '4'
        video_codec_parameters:
          two_pass: 'yes'
          cbr: 'yes'
          quality: good
          static-thresh: '0'
          skip_threshold: '70'
          qmin: '4'
          qmax: '63'
          undershoot-pct: '95'
          keyint_max: '360'
          keyint_min: '0'
          target-bitrate: 400k
          fps: 30000/1001
          buf-sz: '6000'
          buf-initial-sz: '4000'
          cpu-used: '0'
- name: preset_5
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      format:
        output: webm
        video_codec: '[vp8|vp9]'
        preset: '5'
        video_codec_parameters:
          two_pass: 'yes'
          quality: good
          auto-alt-ref: '1'
          lag-in-frames: '16'
          slices: '2'
          qmin: '4'
          qmax: '60'
          arnr-max-frames: '5'
          arnr-strength: '3'
          minsection-pct: '5'
          maxsection-pct: '800'
          keyint_max: '360'
          keyint_min: '0'
          target-bitrate: 2000k
          fps: 30000/1001
          cpu-used: '0'
- name: preset_6
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      format:
        output: webm
        video_codec: '[vp8|vp9]'
        preset: '6'
        video_codec_parameters:
          quality: good
          slices: '2'
          static-thresh: '0'
          qmin: '0'
          qmax: '63'
          keyint_max: '360'
          keyint_min: '0'
          target-bitrate: 2000k
          fps: 30000/1001
          cpu-used: '0'
- name: preset_7
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      format:
        output: webm
        video_codec: '[vp8|vp9]'
        preset: '7'
        video_codec_parameters:
          quality: good
          slices: '2'
          static-thresh: '0'
          qmin: '0'
          qmax: '63'
          keyint_max: '360'
          keyint_min: '0'
          target-bitrate: 2000k
          fps: 30000/1001
          cpu-used: '3'
- name: preset_8
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      format:
        output: webm
        video_codec: '[vp8|vp9]'
        preset: '8'
        video_codec_parameters:
          quality: realtime
          cbr: 'yes'
          qmin: '4'
          qmax: '56'
          undershoot-pct: '95'
          keyint_max: '999999'
          target-bitrate: 500k
          fps: 15000/1001
          buf-sz: '6000'
          buf-initial-sz: '4000'
          cpu-used: '4'
- name: addMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: addMedia
      source: '[SourceFile]'
      format:
        output: '[output]'
- name: watermark_injection
  endpoint:
    path: /watermark/inject
    method: POST
    data_selector: query
    params: {}
- name: audio_stream
  endpoint:
    path: /query
    method: POST
    data_selector: query
- name: Output Destinations
  endpoint:
    path: /output-destinations
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[SourceFile]'
      format:
        output: '[OutputFormat]'
        destination: '[DestinationPath]'
- name: ftp_example
  endpoint:
    path: ftp://[user[:password]@]hostname[:port]/[path]/[?passive=yes]
    method: GET
- name: sftp_example
  endpoint:
    path: sftp://[user[:password]@]hostname[:port]/[path]/[filename]
    method: GET
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: addMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: addMedia
      source: '[SourceFile]'
      format:
        output: '[output]'
        start: '[StartTimecode]'
        finish: '[FinishTimecode]'
        duration: '[Duration]'
        set_video_duration: '[yes|no]'
        apply_timecode: '[yes|no]'
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: addMedia
      source: '[SourceFile]'
      format:
        output: '[output]'
        destination: '[DestinationPath]'
        profile: '[ProfileName]'
        encoder: '[EncoderVersion]'
        two_pass: '[yes|no]'
        two_pass_decoding: '[1|]'
        bufsize: '[BufferSize]'
        rc_init_occupancy: '[BufferOccupancy]'
        deinterlacing: '[yes|filter|no|auto]'
        force_interlaced: '[InterlacedType]'
        add_meta: '[yes|no]'
        hint: '[yes|no]'
        preset: '[WebMPreset]'
        bframes: '[BFramesMode]'
        gop: '[GOPType]'
        luma_spatial: '[SpatialLumaStrength]'
        chroma_spatial: '[SpatialChromaStrength]'
        luma_temp: '[TemporalLumaStrength]'
        strip_chapters: '[yes|no]'
        vidly_hls: '[yes|no]'
        vidly_hd: '[yes|no]'
        hard_cbr: '[yes|no]'
        pix_format: '[PixFormat]'
        best_quality: '[yes|no]'
        interlaced: '[yes|no]'
        copy_timestamps: '[yes|no]'
        slices: '[SlicesNumber]'
        speed: '[SpeedCorrection]'
        scale_in_color_matrix: '[ColorMatrix]'
        scale_out_color_matrix: '[ColorMatrix]'
        alpha_channel: '[yes|no]'
        black_padding_start: '[FramesPadding]'
        black_padding_end: '[FramesPadding]'
        black_padding_keyframe: '[yes|no]'
        stream_id_mapping: '[IDMapping]'
        transport_stream_id: '[TsID]'
        intermediate_stitch_multijob: '[yes|no]'
        container: '[mpegts|mp4]'
        reference_movie_alias: '[0|2|3]'
        ommcp_repack: '[yes|no]'
        ommq_data: '[name=value]'
        pack_files: '[yes|no]'
        dpp_metadata_file: '[DPPFileURL]'
        cut_before_speed: '[yes|no]'
        telecine:
          first_field: '[top|bottom]'
          pattern: '[PulldownPattern]'
        atadenoise:
          a0: '[AThresholdPane1]'
          b0: '[BThresholdPane1]'
          a1: '[AThresholdPane2]'
          b1: '[BThresholdPane2]'
          a2: '[AThresholdPane3]'
          b2: '[BThresholdPane3]'
          s: '[AveragingFramesNumber]'
          p: '[AveragingPlanes]'
        remove_init_ts_delay: '[yes|no]'
- name: nielsen_watermarking
  endpoint:
    path: /nielsen/watermarking
    method: POST
    data_selector: query
    params: {}
- name: ftp_endpoint
  endpoint:
    path: ftp://[user[:password]@]hostname[:port]/[path]/[?passive=yes]
    method: GET
- name: sftp_endpoint
  endpoint:
    path: sftp://[user[:password]@]hostname[:port]/[path]/[filename]
    method: GET
- name: Pre-Signed AWS S3 URL
  endpoint:
    params:
      X-Amz-Algorithm: Signature algorithm
      X-Amz-Credential: Access Key and Scope
      X-Amz-Date: Signature date in format "_yyyyMMdd_T_HHmmss_Z"
      X-Amz-Expires: Expiration time in seconds
      X-Amz-SignedHeaders: Headers list separated with ";" sign
      X-Amz-Signature: Signature hash
- name: rate
  endpoint:
    params: {}
- name: name
  endpoint:
    params: {}
- name: cgms_a
  endpoint:
    params: {}
- name: aps
  endpoint:
    params: {}
- name: asb
  endpoint:
    params: {}
- name: rcd
  endpoint:
    params: {}
- name: system
  endpoint:
    params: {}
- name: rating
  endpoint:
    params: {}
- name: content_flag
  endpoint:
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: waveform
  endpoint:
    path: /output-waveform
    method: POST
    data_selector: query
    params: {}
- name: network_name_parameters
- name: program_name_parameters
- name: copy_and_redistribution_control_parameters
- name: content_advisory_parameters
- name: rate
- name: name
- name: cgms_a
- name: aps
- name: asb
- name: rcd
- name: system
- name: rating
- name: content_flag
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[SourceFile]'
      format.output: '[mpeg_dash|mp4]'
      format.video_codec: hevc
      format.video_codec_parameters.level: '[Level]'
      format.video_codec_parameters.refresh: '1'
      format.video_codec_parameters.rc-lookahead: '20'
      format.video_codec_parameters.b-adapt: '2'
      format.video_codec_parameters.bframes: '4'
      format.video_codec_parameters.b-pyramid: '1'
      format.video_codec_parameters.ref: '3'
      format.video_codec_parameters.ctu: '64'
      format.video_codec_parameters.tu-intra-depth: '1'
      format.video_codec_parameters.tu-inter-depth: '1'
      format.video_codec_parameters.me: '1'
      format.video_codec_parameters.subme: '2'
      format.video_codec_parameters.merange: '60'
      format.video_codec_parameters.max-merge: '2'
      format.video_codec_parameters.rect: '1'
      format.video_codec_parameters.amp: '1'
      format.video_codec_parameters.early-skip: '0'
      format.video_codec_parameters.fast-cbf: '0'
      format.video_codec_parameters.signhide: '1'
      format.video_codec_parameters.lft: '1'
      format.video_codec_parameters.tskip: '0'
      format.video_codec_parameters.sao: '1'
      format.video_codec_parameters.weightp: '1'
      format.video_codec_parameters.tskip-fast: '0'
      format.video_codec_parameters.vbv-end: 0
      format.video_codec_parameters.vbv-end-fr-adj: 0
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: format
  endpoint:
    path: /query
    method: POST
    data_selector: query
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: audio_processing
  endpoint:
    path: /audio/processing
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[SourceFile]'
      format:
        output: '[output]'
        audio_codec: eac3
        audio_encoder: dee
- name: audio_quality_parameters
  endpoint:
    path: /audio/quality/parameters
    method: GET
    data_selector: parameters
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[SourceFile]'
      format:
        output: '[OutputFormat]'
        video_codec: libaom-av1
        video_codec_parameters:
          cpu-used: '[CPUNumber]'
          auto-alt-ref: '[0|1]'
          sharpness: '[Sharpness]'
          static-thresh: '[Threshold]'
          row-mt: '[0|1]'
          tile-columns: '[TileColumns]'
          tile-rows: '[TileRows]'
          enable-tpl-model: '[0|1]'
          enable-keyframe-filtering: '[0|1|2]'
          arnr-maxframes: '[FramesNumber]'
          arnr-strength: '[FilterStrength]'
          tune: '[TuneMode]'
          cq-level: '[QualityLevel]'
          max-intra-rate: '[IFrameBitrate]'
          max-inter-rate: '[PFrameBitrate]'
          gf-cbr-boost: '[BoostValue]'
          lossless: '[0|1]'
          enable-cdef: '[0|1]'
          enable-restoration: '[0|1]'
          enable-rect-partitions: '[0|1]'
          enable-ab-partitions: '[0|1]'
          enable-1to4-partitions: '[0|1]'
          min-partition-size: '[PartitionSize]'
          max-partition-size: '[PartitionSize]'
          enable-dual-filter: '[0|1]'
          enable-chroma-deltaq: '[0|1]'
          enable-intra-edge-filter: '[0|1]'
          enable-order-hint: '[0|1]'
          enable-tx64: '[0|1]'
          enable-flip-idtx: '[0|1]'
          enable-rect-tx: '[0|1]'
          enable-dist-wtd-comp: '[0|1]'
          enable-masked-comp: '[0|1]'
          enable-onesided-comp: '[0|1]'
          enable-interintra-comp: '[0|1]'
          enable-smooth-interintra: '[0|1]'
          enable-diff-wtd-comp: '[0|1]'
          enable-interinter-wedge: '[0|1]'
          enable-interintra-wedge: '[0|1]'
          enable-global-motion: '[0|1]'
          enable-warped-motion: '[0|1]'
          enable-filter-intra: '[0|1]'
          enable-smooth-intra: '[0|1]'
          enable-paeth-intra: '[0|1]'
          enable-cfl-intra: '[0|1]'
          enable-diagonal-intra: '[0|1]'
          enable-obmc: '[0|1]'
          enable-overlay: '[0|1]'
          enable-palette: '[0|1]'
          enable-intrabc: '[0|1]'
          enable-angle-delta: '[0|1]'
          disable-trellis-quant: '[0|1]'
          force-video-mode: '[0|1]'
          enable-qm: '[0|1]'
          qm-min: '[QMFlatness]'
          qm-max: '[QMFlatness]'
          reduced-tx-type-set: '[0|1]'
          use-intra-dct-only: '[0|1]'
          use-inter-dct-only: '[0|1]'
          use-intra-default-tx-only: '[0|1]'
          quant-b-adapt: '[0|1]'
          coeff-cost-upd-freq: '[0|1|2|3]'
          mode-cost-upd-freq: '[0|1|2|3]'
          mv-cost-upd-freq: '[0|1|2|3]'
          frame-parallel: '[0|1]'
          error-resilient: '[0|1]'
          aq-mode: '[QuantizationMode]'
          deltaq-mode: '[DeltaQIndexMode]'
          delta-lf-mode: '[0|1]'
          frame-boost: '[0|1]'
          noise-sensitivity: '[NoiseSensitivity]'
          tune-content: '[TuneType]'
          cdf-update-mode: '[CDFUpdateMode]'
          color-primaries: '[ColorPrimaries]'
          transfer-characteristics: '[TransferCharacteristics]'
          matrix-coefficients: '[MatrixCoefficients]'
          chroma-sample-position: '[ChromaSamplePosition]'
          min-gf-interval: '[GFInterval]'
          max-gf-interval: '[GFInterval]'
          gf-min-pyr-height: '[GFPyramidHeight]'
          gf-max-pyr-height: '[GFPyramidHeight]'
          sb-size: '[SuperBlockSize]'
          num-tile-groups: '[TileGroupsNumber]'
          mtu-size: '[MTUSize]'
          timing-info: '[TimingInfo]'
          film-grain-test: '[TestVector]'
          film-grain-table: '[FilmGrainParametersFile]'
          denoise-noise-level: '[NoiseLevel]'
          denoise-block-size: '[BlockSize]'
          enable-dnl-denoising: '[0|1]'
          max-reference-frames: '[RefFramesNumber]'
          reduced-reference-set: '[0|1]'
          enable-ref-frame-mvs: '[0|1]'
          target-seq-level-idx: '[TargetSequenceLevel]'
          set-tier-mask: '[TierMask]'
          min-cr: '[CompressionRatio]'
          vbr-corpus-complexity-lap: '[CorpusComplexity]'
          input-chroma-subsampling-x: '[ChromaSubsamplingX]'
          input-chroma-subsampling-y: '[ChromaSubsamplingY]'
- name: dolby_atmos_master_files
  endpoint:
    path: /path/to/dolby/atmos/master/files
    method: POST
    data_selector: query
- name: dolby_e_program
  endpoint:
    path: /dolby_e_program
    method: POST
    data_selector: programs
    params: {}
- name: audio_stream
  endpoint:
    path: /audio_stream
    method: POST
    data_selector: streams
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: media
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source: '[SourceFile]'
      format:
        output: '[advanced_hls|fmp4_hls|advanced_dash|advanced_fmp4]'
        destination: '[DestinationURL]'
        stream:
        - video_codec: mainconcept_avc
          video_codec_parameters: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: audio_quality_parameters
  endpoint:
    path: /reference/dolby-audio-quality
    method: GET
    data_selector: parameters
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: media_source
  endpoint:
    path: /services/data/vXX.X/sobjects/MediaSource
    method: GET
    data_selector: records
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: dolby_e_program
  endpoint:
    path: /dolby_e_program
    method: POST
    data_selector: format
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
- name: cue-out
  endpoint:
    path: /advanced_hls/cue-out
    method: GET
    data_selector: records
    params: {}
- name: cue-in
  endpoint:
    path: /advanced_hls/cue-in
    method: GET
    data_selector: records
    params: {}
- name: discontinuity
  endpoint:
    path: /advanced_hls/discontinuity
    method: GET
    data_selector: records
    params: {}
- name: daterange
  endpoint:
    path: /advanced_hls/daterange
    method: GET
    data_selector: records
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: advanced_dash_output
  endpoint:
    path: /advanced_dash/output
    method: POST
    data_selector: query
- name: Image Playlist Parameters
  endpoint:
    path: /advanced-mbr-image-playlist
    method: GET
    data_selector: parameters
    params: {}
- name: advanced_mss
  endpoint:
    path: /advanced/mss
    method: POST
    data_selector: query
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: stream_parameters
  endpoint:
    path: /stream/parameters
    method: GET
    data_selector: records
    params: {}
- name: output
  endpoint:
    path: /output
    method: GET
    data_selector: output
    params: {}
- name: intermediate_output_files
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[AddMedia|AddMediaBenchmark]'
      source: '[SourceFile]'
      multijob_workflow: '[yes|no]'
      format:
        output: adaptive_intermediate
        destination: '[DestFile]'
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: repackaging
  endpoint:
    path: /repackaging
    method: POST
- name: advanced_hls
  endpoint:
    path: /advanced_hls
    method: GET
    data_selector: records
    params: {}
- name: fmp4_hls
  endpoint:
    path: /fmp4_hls
    method: GET
    data_selector: records
    params: {}
- name: advanced_fmp4
  endpoint:
    path: /advanced_fmp4
    method: GET
    data_selector: records
    params: {}
- name: image_playlist_parameters
  endpoint:
    path: /advanced-mbr-image-playlist
    method: GET
    data_selector: parameters
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[SourceFile]'
      format:
        output: '[advanced_hls|fmp4_hls]'
        destination: '[DestinationURL]'
        stream:
        - manifest:
          - basename: '[BaseName]'
            bhls_drm: '[yes|no]'
        bhls_drm: '[yes|no]'
        bhls_drm_certificates:
          subject_key_identifier:
          - '[KeyID_1]'
          - '[KeyID_2]'
- name: Get QC Status
  endpoint:
    path: /reference/qc-status
    method: GET
- name: GetQueueTime
  endpoint:
    path: /reference/misc-getqueuetime
    method: GET
- name: GetQueueStats
  endpoint:
    path: /reference/misc-getqueuestats
    method: GET
- name: GetMediaList
  endpoint:
    path: /reference/responses-getmedialist
    method: GET
- name: GetStatus
  endpoint:
    path: /reference/responses-getstatus
    method: GET
- name: output
  endpoint:
    path: /output/summary
    method: GET
    data_selector: output
- name: video_rotation
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
- name: auto_crop
  endpoint:
    path: /auto_crop
    method: POST
    data_selector: query
    params: {}
- name: fade_effect
  endpoint:
    path: /fade/effect
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      format:
        fade_in: '[FadeInStamp]'
        fade_out: '[FadeOutStamp]'
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: split_screen
  endpoint:
    path: /reference/features-splitscreen
    method: POST
    data_selector: query
    params: {}
- name: overlay
  endpoint:
    path: /api/overlay
    method: POST
    data_selector: query
    params: {}
- name: audio_overlay
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[SourceFile]'
      format:
        audio_overlay:
        - overlay_source: '[AudioOverlay1Source]'
- name: text_overlay
  endpoint:
    path: /text_overlay
    method: POST
    data_selector: query
    params: {}
- name: rotate_video
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      format:
        rotate: '[RotateDegree]'
        set_rotate: '[RotateMeta]'
- name: image_transformation
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: auto_crop
  endpoint:
    path: /reference/features-auto-crop
    method: POST
    data_selector: query
    params: {}
- name: gif_creation
  endpoint:
    path: /create/gif
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      format:
        output: gif
        interval: '[Interval]'
        loop: '[LoopsCount]'
        colors: '[ColorsCount]'
        dither: '[DitherMode]'
        destination: '[DestFile]'
- name: padding
  endpoint:
    path: /padding
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /
    method: POST
    data_selector: query
    params: {}
- name: AddMedia
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: query
    params: {}
- name: fade_effect
  endpoint:
    path: /fade/effect
    method: POST
    data_selector: query
    params: {}
- name: timecode
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[SourceFile]'
      format:
        output: '[ipad|iphone|ipod|mov|mov_prores|mp4|mxf|wowza|apple_prores]'
        timecode_track: '[Timecode|copy|no]'
        timecode_add_start: '[yes|no]'
        timecode_track_mode: '[df|ndf]'
- name: split_screen
  endpoint:
    path: /split_screen
    method: POST
    data_selector: query
- name: job
  endpoint:
    path: /response/job
    method: GET
    data_selector: job
- name: notification_data
  endpoint:
    path: /notification/data
    method: GET
    data_selector: result
    params: {}
- name: audio_overlay
  endpoint:
    path: /audio_overlay
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[SourceFile]'
      overlay_source: '[AudioOverlay1Source]'
- name: text_overlay
  endpoint:
    path: /text/overlay
    method: POST
    data_selector: query
    params: {}
- name: image_transformation
  endpoint:
    path: /query
    method: POST
    data_selector: query
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: closed_captions
  endpoint:
    path: /closed_captions
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[SourceFile]'
      format:
        output: '[OutputFormat]'
        closed_captions:
        - source: '[CCSource]'
          copy: '[yes|no]'
          direct_copy: '[yes|no]'
          extract: '[srt|scc|dfxp]'
          mux_type: '[cea-608|cea-708|timed-text|webvtt|burn-in|ismt|436m|dvb|mp4-ttml|mp4-webvtt]'
          language: '[LanguageCode]'
          name: '[NameCode]'
          time_offset: '[TimeOffset]'
          vtt_segment_duration: '[SegmentDuration]'
          font_source: '[FontSourceURL]'
          font_size: '[FontSize]'
          align: '[left|right|center]'
          valign: '[top|bottom|center]'
          margin_vertical: '[VerticalMargin]'
          margin_left: '[LeftMargin]'
          margin_right: '[RightMargin]'
          add_source_offset: '[yes|no]'
          ignore_cc_absence: '[yes|no]'
          cea_data_field: '[0|1]'
          scte20: '[yes|no]'
          characteristics: '[Characteristics]'
          accessibility_scheme: '[Scheme]'
          accessibility_value: '[Value]'
          timescale: '[Timescale]'
          cea_track_id: '[TrackID]'
          transparent_background: '[yes|no]'
          sub_path: '[SubPath]'
          forced: '[yes|no]'
          role: '[SubtitleRole]'
          get_from_manifest: '[yes|no]'
          add_to_manifest: '[ManifestsList]'
          vtt_split_segments: '[yes|no]'
          cea_stream: '[video|text|auto]'
          page: '[PageNumber]'
          teletext_page_id: '[PageID]'
          emulate_rollup: '[yes|no]'
          strip_formatting: '[yes|no]'
          webvtt_strip_cue_settings: '[vertical|line|position|size|align|region],...'
        teletext:
          vanc_line_1: '[VANCLine1]'
          vanc_line_2: '[VANCLine2]'
          vbi_line_1: '[VBILine1]'
          vbi_line_2: '[VBILine2]'
- name: AddMedia
  endpoint:
    path: /reference/features-ken-burns
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source:
      - '[SlideSource]?effect=kenburns&direction=[EffectDirection]&size=[SlideSize]&duration=[Duration]&transition=[on|off]'
      slideshow: '1'
      format:
        output: mp4
        size: '[OutputSize]'
- name: slideshow
  endpoint:
    path: /slideshow
    method: POST
    data_selector: query
    params: {}
- name: burn_in_timecode
  endpoint:
    path: /burnin/timecode
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[SourceFile]'
      format:
        output: '[OutputFormat]'
        closed_captions:
        - source: '[CCSource]'
          copy: '[yes|no]'
          direct_copy: '[yes|no]'
          extract: '[srt|scc|dfxp]'
          mux_type: '[cea-608|cea-708|timed-text|webvtt|burn-in|ismt|436m|dvb|mp4-ttml|mp4-webvtt]'
          language: '[LanguageCode]'
          name: '[NameCode]'
          time_offset: '[TimeOffset]'
          vtt_segment_duration: '[SegmentDuration]'
          font_source: '[FontSourceURL]'
          font_size: '[FontSize]'
          align: '[left|right|center]'
          valign: '[top|bottom|center]'
          margin_vertical: '[VerticalMargin]'
          margin_left: '[LeftMargin]'
          margin_right: '[RightMargin]'
          add_source_offset: '[yes|no]'
          ignore_cc_absence: '[yes|no]'
          cea_data_field: '[0|1]'
          scte20: '[yes|no]'
          characteristics: '[Characteristics]'
          accessibility_scheme: '[Scheme]'
          accessibility_value: '[Value]'
          timescale: '[Timescale]'
          cea_track_id: '[TrackID]'
          transparent_background: '[yes|no]'
          sub_path: '[SubPath]'
          forced: '[yes|no]'
          role: '[SubtitleRole]'
          get_from_manifest: '[yes|no]'
          add_to_manifest: '[ManifestsList]'
          vtt_split_segments: '[yes|no]'
          cea_stream: '[video|text|auto]'
          page: '[PageNumber]'
          teletext_page_id: '[PageID]'
          emulate_rollup: '[yes|no]'
          strip_formatting: '[yes|no]'
          webvtt_strip_cue_settings: '[vertical|line|position|size|align|region],...'
        teletext:
          vanc_line_1: '[VANCLine1]'
          vanc_line_2: '[VANCLine2]'
          vbi_line_1: '[VBILine1]'
          vbi_line_2: '[VBILine2]'
- name: timecode_data
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: audio_stream_validation
  endpoint:
    path: /audio/validate
    method: POST
    data_selector: query
- name: job
  endpoint:
    path: /response/job
    method: GET
    data_selector: job
    params: {}
- name: notification_data
  endpoint:
    path: /notification/data
    method: GET
    data_selector: result
- name: general_validation_tests
  endpoint:
    path: /reference/qc-general-validation-tests
    method: GET
    data_selector: tests
    params: {}
- name: video_validation_tests
  endpoint:
    path: /reference/qc-video-validation-tests
    method: GET
    data_selector: tests
    params: {}
- name: audio_validation_tests
  endpoint:
    path: /reference/qc-audio-validation-tests
    method: GET
    data_selector: tests
    params: {}
- name: manifest_validation_tests
  endpoint:
    path: /reference/qc-manifest-validation-tests
    method: GET
    data_selector: tests
    params: {}
- name: QC Tests
  endpoint:
    path: /reference/qc-tests
    method: GET
- name: Get QC Status
  endpoint:
    path: /reference/qc-status
    method: GET
- name: Child QC-Media
  endpoint:
    path: /qc-status/child-media
    method: GET
    data_selector: response
    params: {}
- name: Report
  endpoint:
    path: /qc-status/report
    method: GET
    data_selector: report
    params: {}
- name: closed_captions
  endpoint:
    path: /closed_captions
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: '[Action]'
      source: '[SourceFile]'
      format:
        output: '[OutputFormat]'
        closed_captions:
        - source: '[CCSource]'
          copy: '[yes|no]'
          direct_copy: '[yes|no]'
          extract: '[srt|scc|dfxp]'
          mux_type: '[cea-608|cea-708|timed-text|webvtt|burn-in|ismt|436m|dvb|mp4-ttml|mp4-webvtt]'
          language: '[LanguageCode]'
          name: '[NameCode]'
          time_offset: '[TimeOffset]'
          vtt_segment_duration: '[SegmentDuration]'
          font_source: '[FontSourceURL]'
          font_size: '[FontSize]'
          align: '[left|right|center]'
          valign: '[top|bottom|center]'
          margin_vertical: '[VerticalMargin]'
          margin_left: '[LeftMargin]'
          margin_right: '[RightMargin]'
          add_source_offset: '[yes|no]'
          ignore_cc_absence: '[yes|no]'
          cea_data_field: '[0|1]'
          scte20: '[yes|no]'
          characteristics: '[Characteristics]'
          accessibility_scheme: '[Scheme]'
          accessibility_value: '[Value]'
          timescale: '[Timescale]'
          cea_track_id: '[TrackID]'
          transparent_background: '[yes|no]'
          sub_path: '[SubPath]'
          forced: '[yes|no]'
          role: '[SubtitleRole]'
          get_from_manifest: '[yes|no]'
          add_to_manifest: '[ManifestsList]'
          vtt_split_segments: '[yes|no]'
          cea_stream: '[video|text|auto]'
          page: '[PageNumber]'
          teletext_page_id: '[PageID]'
          emulate_rollup: '[yes|no]'
          strip_formatting: '[yes|no]'
          webvtt_strip_cue_settings: '[vertical|line|position|size|align|region],...'
        teletext:
          vanc_line_1: '[VANCLine1]'
          vanc_line_2: '[VANCLine2]'
          vbi_line_1: '[VBILine1]'
          vbi_line_2: '[VBILine2]'
- name: convert_captions
  endpoint:
    path: /convert/captions
    method: POST
    data_selector: query
    params: {}
- name: qc_check
  endpoint:
    path: /qc/check
    method: POST
    data_selector: query
    params: {}
- name: general_validation_tests
  endpoint:
    path: /reference/qc-general-validation-tests
    method: GET
    data_selector: tests
    params: {}
- name: video_validation_tests
  endpoint:
    path: /reference/qc-video-validation-tests
    method: GET
    data_selector: tests
    params: {}
- name: audio_validation_tests
  endpoint:
    path: /reference/qc-audio-validation-tests
    method: GET
    data_selector: tests
    params: {}
- name: manifest_validation_tests
  endpoint:
    path: /reference/qc-manifest-validation-tests
    method: GET
    data_selector: tests
    params: {}
- name: file_size
  endpoint:
    path: /qc/file-size
    method: POST
    data_selector: query
    params: {}
- name: QC Tests
  endpoint:
    path: /reference/qc-tests
    method: GET
    data_selector: tests
    params: {}
- name: Get QC Status
  endpoint:
    path: /reference/qc-status
    method: GET
    data_selector: status
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      format:
        output: '[qc_check|advanced_hls|advanced_dash|advanced_fmp4|fmp4_hls|mp4]'
        qc:
          qc_bitrate_mode:
            value: '[cbr|vbr]'
            severity: '[fatal|warning]'
- name: Get QC Status
  endpoint:
    path: /qc-status
    method: GET
- name: child_qc_media
  endpoint:
    path: /qc/child/media/status
    method: GET
    data_selector: response
- name: report
  endpoint:
    path: /qc/report
    method: GET
    data_selector: report
- name: conditions
  endpoint:
    path: /conditions
    method: GET
    data_selector: tests
    params: {}
- name: Add Media
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      format:
        output: '[qc_check|advanced_dash|advanced_fmp4|fmp4_hls]'
- name: AddMedia
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source: '[SourceFile|SourcePlaylist]'
      format:
        output: '[qc_check|advanced_hls|mp4|mxf|mainconcept_mxf|cablelabs_mpegts|mxf_op1a]'
- name: create_prohibited_words_list
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      action: SetBatonProfaneWords
- name: show_added_lists
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      action: ListBatonProfaneWords
- name: delete_words_list
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      action: DropBatonProfaneWords
- name: show_words_in_list
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      action: GetBatonProfaneWords
- name: qc_check
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: query
    params: {}
- name: AddMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: validate_captions
  endpoint:
    path: /validate/captions
    method: POST
    data_selector: query
    params: {}
- name: AddMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      format:
        output: '[qc_check|advanced_hls|advanced_dash|advanced_fmp4|fmp4_hls|mp4]'
- name: AddMedia
  endpoint:
    path: /qc-test-cmaf
    method: POST
    data_selector: query
    params: {}
- name: baton_report
  endpoint:
    path: /reference/qc-status
    method: GET
    data_selector: report
- name: prohibited_words_list
  endpoint:
    path: /prohibited-words
    method: POST
    data_selector: query
- name: qc_check
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: AddMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      format:
        output: '[qc_check|advanced_hls|advanced_dash|advanced_fmp4|fmp4_hls|mp4]'
        qc:
          qc_video_level:
            value: '[VideoLevel]'
            severity: '[fatal|warning]'
- name: video_streams_count
  endpoint:
    path: /qc-video-streams-number
    method: POST
    data_selector: query
- name: video_duration
  endpoint:
    path: /video/duration
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: AddMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      format:
        output: '[qc_check|advanced_hls]'
        qc:
          qc_pcr_interval:
            value: '[Number]'
            severity: '[fatal|warning]'
- name: PID Interval
  endpoint:
    path: /qc-test-pid-interval
    method: POST
    data_selector: query
    params: {}
- name: Validate IDR Interval
  endpoint:
    path: /qc/test/idr_interval
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      format:
        output: '[qc_check|advanced_hls|advanced_dash|advanced_fmp4|fmp4_hls|mp4]'
        qc:
          qc_idr_interval:
            value: '[FramesNumber]'
            deviation: '[Number]'
            severity: '[fatal|warning]'
- name: PCR Interval
  endpoint:
    path: /reference/qc-test-pcr-interval
    method: GET
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      format:
        output: '[qc_check|advanced_hls]'
        qc:
          qc_pcr_interval:
            value: '[Number]'
            severity: '[fatal|warning]'
- name: AddMedia
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: query
    params: {}
- name: qc_pid_interval
  endpoint:
    path: /qc/pid-interval
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      format:
        output: '[qc_check|advanced_hls]'
        qc:
          qc_pid_interval:
            value: '[Number]'
            severity: '[fatal|warning]'
- name: AddMedia
  endpoint:
    path: /add_media
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      format:
        output: '[qc_check|advanced_hls|advanced_dash|advanced_fmp4|fmp4_hls|mp4]'
        qc:
          qc_b_frames_present:
            value: '[yes|no]'
            severity: '[fatal|warning]'
- name: AddMedia
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: validate_b_frames_dts_increase
  endpoint:
    path: /reference/qc-test-bframe-dts-grow
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      format:
        output: '[qc_check|advanced_hls|advanced_dash|advanced_fmp4|fmp4_hls|mp4]'
        qc:
          qc_bframe_dts_grow:
            severity: '[fatal|warning]'
- name: validate_idr_interval
  endpoint:
    path: /qc/test/validate_idr_interval
    method: POST
    data_selector: query
- name: AddMedia
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: query
    params: {}
- name: detect_frames_freeze
  endpoint:
    path: /qc/detect-freeze
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: AddMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: AddMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
- name: audio_stream_validation
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      format:
        output: '[qc_check|advanced_hls|advanced_dash|advanced_fmp4|fmp4_hls|mp4]'
        qc:
          qc_audio_streams_number:
            value: '[StreamsNumber]'
            severity: '[fatal|warning]'
- name: AddMedia
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: query
    params: {}
- name: add_media
  endpoint:
    path: /add_media
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source: '[SourceFile|SourcePlaylist]'
      format:
        output: '[qc_check|mp4]'
        qc:
          qc_audio_channels:
            stream:
            - index: '[AudioStreamIndex]'
              value: '[ChannelsNumber]'
            severity: '[fatal|warning]'
- name: AddMedia
  endpoint:
    path: /validateDiscontinuityTags
    method: POST
    data_selector: query
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: AddMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source: '[SourceFile|SourcePlaylist]'
      format:
        output: '[qc_check|mp4]'
        qc:
          qc_audio_channel_layout:
            stream:
            - index: '[AudioStreamIndex]'
              value: '[ChannelLayout]'
            severity: '[fatal|warning]'
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
- name: AddMedia
  endpoint:
    path: /addMedia
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      format:
        output: '[qc_check|advanced_hls|advanced_dash|advanced_fmp4|fmp4_hls|mp4]'
        qc:
          qc_audio_streams_number:
            value: '[StreamsNumber]'
            severity: '[fatal|warning]'
- name: validate_cue_out_placement
  endpoint:
    path: /validate/cue-out
    method: POST
    data_selector: query
    params: {}
- name: validate_segment_duration
  endpoint:
    path: /reference/qc-test-validate-segment-duration
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source: '[SourceFile|SourcePlaylist]'
      format:
        output: '[qc_check|advanced_hls|advanced_fmp4|fmp4_hls]'
        qc:
          qc_target_segment_duration:
            value: '[Number]'
            severity: '[fatal|warning]'
- name: query
  endpoint:
    path: /validate/drm-uri
    method: POST
    data_selector: query
    params: {}
- name: validate_hls_version
  endpoint:
    path: /validate/hls/version
    method: POST
    data_selector: query
    params: {}
- name: get_queue_stats
  endpoint:
    path: /reference/misc-getqueuestats
    method: POST
    data_selector: response
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: GetQueueStats
      mediaid: '[MediaID]'
      date_from: '[YYYY-MM-DD HH:MM:SS]'
      date_to: '[YYYY-MM-DD HH:MM:SS]'
- name: presets
  endpoint:
    path: /GetPresetsList
    method: GET
    data_selector: response
- name: query
  endpoint:
    path: /validate/segment/duration
    method: POST
    data_selector: query
    params: {}
- name: presets
  endpoint:
    path: /GetPresetsList
    method: GET
    data_selector: response
- name: SavePreset
  endpoint:
    path: /reference/misc-savepreset
    method: POST
    data_selector: response
    params: {}
- name: GetPreset
  endpoint:
    path: /reference/misc-getpreset
    method: GET
    data_selector: response
    params: {}
- name: DeletePreset
  endpoint:
    path: /reference/misc-deletepreset
    method: DELETE
    data_selector: response
    params: {}
- name: queue_time
  endpoint:
    path: /reference/misc-getqueuetime
    method: POST
    data_selector: response
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      mediaid: '[MediaID]'
- name: SavePreset
  endpoint:
    path: /reference/misc-savepreset
    method: POST
    data_selector: response
- name: GetQueueStats
  endpoint:
    path: /reference/misc-getqueuestats
    method: GET
    data_selector: response
- name: response
  endpoint:
    path: /reference/misc-deletepreset
    method: GET
    data_selector: response
- name: presets
  endpoint:
    path: /misc-getpresetlist
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: GetPresetsList
      type: '[all|user|ui]'
- name: presets
  endpoint:
    path: /reference/misc-getpresetlist
    method: GET
    data_selector: response
- name: get_reserved_info
  endpoint:
    path: /reference/misc-getreservedinfo
    method: POST
    data_selector: response.result
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: getReservedInfo
- name: SavePreset
  endpoint:
    path: /misc-savepreset
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: addMedia
      format:
        output: '[output]'
        save_preset: '[PresetName]'
- name: SavePreset
  endpoint:
    path: /reference/misc-savepreset
    method: POST
    data_selector: response
    params: {}
- name: response
  endpoint:
    path: /misc-savepreset
    method: POST
    data_selector: response
- name: response
  endpoint:
    path: /delete/preset
    method: DELETE
    data_selector: response
    params: {}
- name: sub_user
  endpoint:
    path: /user-api/sub_user
    method: POST
    data_selector: data
    params:
      userid: required
      userkey: required
      action: required
      action_user_id: optional
      user_data: optional
      date_from: optional
      date_to: optional
- name: GetUserInfo
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: GetSubUsers
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: GetASM
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: GetStorageSpace
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: GetBandwidthStat
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: GetBandwidthStatGroupDate
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: AddSubUser
  endpoint:
    path: /actions/AddSubUser
    method: POST
- name: GetSubUsers
  endpoint:
    path: /actions/GetSubUsers
    method: GET
- name: sub_users
  endpoint:
    path: /getsubusers
    method: GET
    data_selector: result
- name: GetUserInfo
  endpoint:
    path: /getuserinfo
    method: POST
    data_selector: query
    params: {}
- name: GetSubUsers
  endpoint:
    path: /getsubusers
    method: POST
    data_selector: query
    params: {}
- name: GetASM
  endpoint:
    path: /getasm
    method: POST
    data_selector: query
    params: {}
- name: GetStorageSpace
  endpoint:
    path: /getstoragespace
    method: POST
    data_selector: query
    params: {}
- name: GetBandwidthStat
  endpoint:
    path: /getbandwidthstat
    method: POST
    data_selector: query
    params: {}
- name: GetBandwidthStatGroupDate
  endpoint:
    path: /getbandwidthstatgroupdate
    method: POST
    data_selector: query
    params: {}
- name: media
  endpoint:
    path: /GetMediaList
    method: GET
    data_selector: media
    params: {}
- name: sub_users
  endpoint:
    path: /getsubusers
    method: GET
    data_selector: result.user_0
    params: {}
- name: asm
  endpoint:
    path: /getasm
    method: GET
    data_selector: result
    params: {}
- name: storage_space
  endpoint:
    path: /getstoragespace
    method: GET
    data_selector: result
    params: {}
- name: bandwidth_stat
  endpoint:
    path: /getbandwidthstat
    method: GET
    data_selector: result
    params: {}
- name: bandwidth_stat_group_date
  endpoint:
    path: /getbandwidthstatgroupdate
    method: GET
    data_selector: result
    params: {}
- name: GetMediaList
  endpoint:
    path: /media
    method: GET
    data_selector: response.media
    params:
      action: GetMediaList
      version: '2'
- name: AddMedia
  endpoint:
    path: /addmedia
    method: POST
    data_selector: response
    params: {}
- name: media_list
  endpoint:
    path: /GetMediaList
    method: POST
    data_selector: query
    params:
      per_page: 10
- name: media
  endpoint:
    path: /response/media
    method: GET
    data_selector: media
- name: GetMediaList
  endpoint:
    path: /reference/responses-getmedialist-v1
    method: GET
    data_selector: response.media
    params: {}
- name: GetMediaList
  endpoint:
    path: /media
    method: GET
    data_selector: response.media
    params:
      action: GetMediaList
      version: '2'
- name: response
  endpoint:
    path: /GetStatus
    method: GET
    data_selector: response
- name: GetMediaList
  endpoint:
    path: /reference/responses-getmedialist-v3
    method: GET
    data_selector: query
    params:
      page: 1
      per_page: 10
      sort: media_id
      order: asc
- name: media
  endpoint:
    path: /response/media
    method: GET
    data_selector: media
- name: job
  endpoint:
    path: /response/job
    method: GET
    data_selector: job
    params: {}
- name: response
  endpoint:
    path: /GetStatus
    method: GET
    data_selector: response
    params: {}
- name: response
  endpoint:
    path: /GetMediaInfo
    method: GET
    data_selector: response
    params: {}
- name: job
  endpoint:
    path: /response/job
    method: GET
    data_selector: job
    params: {}
- name: GetMediaInfo
  endpoint:
    path: /GetMediaInfo
    method: POST
    data_selector: query
    params:
      mediaid: '[MediaID]'
- name: response
  endpoint:
    path: /GetMediaInfo
    method: GET
    data_selector: response
    params: {}
- name: incident_update
  endpoint:
    path: /update
    method: GET
    data_selector: update
- name: incident_update
  endpoint:
    path: /update
    method: GET
    data_selector: update
    params: {}
- name: addMedia
  endpoint:
    path: /addMedia
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: addMedia
      source: '[SourceFile]'
      format:
        output: mpegts
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Duration
  endpoint:
    path: /reference/qc-duration
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate Closed Captions
  endpoint:
    path: /reference/qc-test-captions-presented
    method: GET
    data_selector: formats_available
    params: {}
- name: Video Codec
  endpoint:
    path: /reference/qc-video-codec
    method: GET
    data_selector: formats_available
    params: {}
- name: Video Bitrate
  endpoint:
    path: /reference/qc-video-bitrate
    method: GET
    data_selector: formats_available
    params: {}
- name: Frame Rate
  endpoint:
    path: /reference/qc-frame-rate
    method: GET
    data_selector: formats_available
    params: {}
- name: Video Duration
  endpoint:
    path: /reference/qc-video-duration
    method: GET
    data_selector: formats_available
    params: {}
- name: Video Codec Profile
  endpoint:
    path: /reference/qc-video-codec-profile
    method: GET
    data_selector: formats_available
    params: {}
- name: Video Level
  endpoint:
    path: /reference/qc-video-level
    method: GET
    data_selector: formats_available
    params: {}
- name: Frame Size
  endpoint:
    path: /reference/qc-frame-size
    method: GET
    data_selector: formats_available
    params: {}
- name: Aspect Ratio
  endpoint:
    path: /reference/qc-aspect-ratio
    method: GET
    data_selector: formats_available
    params: {}
- name: Video Streams Count
  endpoint:
    path: /reference/qc-video-streams-number
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate DTS
  endpoint:
    path: /reference/qc-test-validate-dts
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate PTS
  endpoint:
    path: /reference/qc-test-validate-pts
    method: GET
    data_selector: formats_available
    params: {}
- name: PCR Interval
  endpoint:
    path: /reference/qc-test-pcr-interval
    method: GET
    data_selector: formats_available
    params: {}
- name: PID Interval
  endpoint:
    path: /reference/qc-test-pid-interval
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate B-Frames
  endpoint:
    path: /reference/qc-test-b-frames-present
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate B-Frames DTS Increase
  endpoint:
    path: /reference/qc-test-bframe-dts-grow
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate IDR Interval
  endpoint:
    path: /reference/qc-test-idr-interval
    method: GET
    data_selector: formats_available
    params: {}
- name: Segment Starts with IDR
  endpoint:
    path: /reference/qc-test-segments-start-with-idr
    method: GET
    data_selector: formats_available
    params: {}
- name: No Short Segments
  endpoint:
    path: /reference/qc-test-short-segment
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Codec
  endpoint:
    path: /reference/qc-audio-codec
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Bitrate
  endpoint:
    path: /reference/qc-audio-bitrate
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Duration
  endpoint:
    path: /reference/qc-audio-duration
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Sample Rate
  endpoint:
    path: /reference/qc-audio-sample-rate
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Channels
  endpoint:
    path: /reference/qc-audio-channels
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Stream Validation
  endpoint:
    path: /reference/qc-audio-streams-number
    method: GET
    data_selector: formats_available
    params: {}
- name: Master Manifest Bitrate
  endpoint:
    path: /reference/qc-test-bitrate-declaration
    method: GET
    data_selector: formats_available
    params: {}
- name: Master Manifest Codec
  endpoint:
    path: /reference/qc-test-codec-declaration
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate Discontinuity Tags
  endpoint:
    path: /reference/qc-test-discontinuity-tags
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate DRM URI
  endpoint:
    path: /reference/qc-test-drm-uri
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate HLS Version
  endpoint:
    path: /reference/qc-test-hls-version-number
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate CUE-OUT:0 Placement
  endpoint:
    path: /reference/qc-test-match-breakpoints
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate Sample AES Encryption
  endpoint:
    path: /reference/qc-test-proper-sample-aes-encryption-declared
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate Segment Duration
  endpoint:
    path: /reference/qc-test-target-segment-duration
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate Declared Segment Duration
  endpoint:
    path: /reference/qc-test-validate-segment-duration
    method: GET
    data_selector: formats_available
    params: {}
- name: File Size
  endpoint:
    path: /reference/qc-file-size
    method: GET
    data_selector: formats_available
    params: {}
- name: Bitrate
  endpoint:
    path: /reference/qc-bitrate
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Channel Layout
  endpoint:
    path: /reference/qc-audio-channel-layout
    method: GET
    data_selector: formats_available
    params: {}
- name: CMAF Conformance
  endpoint:
    path: /reference/qc-test-cmaf
    method: GET
    data_selector: formats_available
    params: {}
- name: CUE-inserts validation
  endpoint:
    path: /reference/qc-test-match-cue-inserts
    method: GET
    data_selector: formats_available
    params: {}
- name: MPD manifest is valid
  endpoint:
    path: /reference/qc-test-validate-manifest
    method: GET
    data_selector: formats_available
    params: {}
- name: Blank Frame Detection
  endpoint:
    path: /reference/qc-detect-black
    method: GET
    data_selector: formats_available
    params: {}
- name: Detect Frames Freeze
  endpoint:
    path: /reference/qc-detect-freeze
    method: GET
    data_selector: formats_available
    params: {}
- name: qc_duration
  endpoint:
    path: /qc-duration
    method: POST
    data_selector: query
- name: Duration
  endpoint:
    path: /reference/qc-duration
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate Closed Captions
  endpoint:
    path: /reference/qc-test-captions-presented
    method: GET
    data_selector: formats_available
    params: {}
- name: Video Codec
  endpoint:
    path: /reference/qc-video-codec
    method: GET
    data_selector: formats_available
    params: {}
- name: Video Bitrate
  endpoint:
    path: /reference/qc-video-bitrate
    method: GET
    data_selector: formats_available
    params: {}
- name: Frame Rate
  endpoint:
    path: /reference/qc-frame-rate
    method: GET
    data_selector: formats_available
    params: {}
- name: Video Duration
  endpoint:
    path: /reference/qc-video-duration
    method: GET
    data_selector: formats_available
    params: {}
- name: Video Codec Profile
  endpoint:
    path: /reference/qc-video-codec-profile
    method: GET
    data_selector: formats_available
    params: {}
- name: Video Level
  endpoint:
    path: /reference/qc-video-level
    method: GET
    data_selector: formats_available
    params: {}
- name: Frame Size
  endpoint:
    path: /reference/qc-frame-size
    method: GET
    data_selector: formats_available
    params: {}
- name: Aspect Ratio
  endpoint:
    path: /reference/qc-aspect-ratio
    method: GET
    data_selector: formats_available
    params: {}
- name: Video Streams Count
  endpoint:
    path: /reference/qc-video-streams-number
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate DTS
  endpoint:
    path: /reference/qc-test-validate-dts
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate PTS
  endpoint:
    path: /reference/qc-test-validate-pts
    method: GET
    data_selector: formats_available
    params: {}
- name: PCR Interval
  endpoint:
    path: /reference/qc-test-pcr-interval
    method: GET
    data_selector: formats_available
    params: {}
- name: PID Interval
  endpoint:
    path: /reference/qc-test-pid-interval
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate B-Frames
  endpoint:
    path: /reference/qc-test-b-frames-present
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate B-Frames DTS Increase
  endpoint:
    path: /reference/qc-test-bframe-dts-grow
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate IDR Interval
  endpoint:
    path: /reference/qc-test-idr-interval
    method: GET
    data_selector: formats_available
    params: {}
- name: Segment Starts with IDR
  endpoint:
    path: /reference/qc-test-segments-start-with-idr
    method: GET
    data_selector: formats_available
    params: {}
- name: No Short Segments
  endpoint:
    path: /reference/qc-test-short-segment
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Codec
  endpoint:
    path: /reference/qc-audio-codec
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Bitrate
  endpoint:
    path: /reference/qc-audio-bitrate
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Duration
  endpoint:
    path: /reference/qc-audio-duration
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Sample Rate
  endpoint:
    path: /reference/qc-audio-sample-rate
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Channels
  endpoint:
    path: /reference/qc-audio-channels
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Stream Validation
  endpoint:
    path: /reference/qc-audio-streams-number
    method: GET
    data_selector: formats_available
    params: {}
- name: Master Manifest Bitrate
  endpoint:
    path: /reference/qc-test-bitrate-declaration
    method: GET
    data_selector: formats_available
    params: {}
- name: Master Manifest Codec
  endpoint:
    path: /reference/qc-test-codec-declaration
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate Discontinuity Tags
  endpoint:
    path: /reference/qc-test-discontinuity-tags
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate DRM URI
  endpoint:
    path: /reference/qc-test-drm-uri
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate HLS Version
  endpoint:
    path: /reference/qc-test-hls-version-number
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate CUE-OUT:0 Placement
  endpoint:
    path: /reference/qc-test-match-breakpoints
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate Sample AES Encryption
  endpoint:
    path: /reference/qc-test-proper-sample-aes-encryption-declared
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate Segment Duration
  endpoint:
    path: /reference/qc-test-target-segment-duration
    method: GET
    data_selector: formats_available
    params: {}
- name: Validate Declared Segment Duration
  endpoint:
    path: /reference/qc-test-validate-segment-duration
    method: GET
    data_selector: formats_available
    params: {}
- name: File Size
  endpoint:
    path: /reference/qc-file-size
    method: GET
    data_selector: formats_available
    params: {}
- name: Bitrate
  endpoint:
    path: /reference/qc-bitrate
    method: GET
    data_selector: formats_available
    params: {}
- name: Audio Channel Layout
  endpoint:
    path: /reference/qc-audio-channel-layout
    method: GET
    data_selector: formats_available
    params: {}
- name: CMAF Conformance
  endpoint:
    path: /reference/qc-test-cmaf
    method: GET
    data_selector: formats_available
    params: {}
- name: CUE-inserts validation
  endpoint:
    path: /reference/qc-test-match-cue-inserts
    method: GET
    data_selector: formats_available
    params: {}
- name: MPD manifest is valid
  endpoint:
    path: /reference/qc-test-validate-manifest
    method: GET
    data_selector: formats_available
    params: {}
- name: Blank Frame Detection
  endpoint:
    path: /reference/qc-detect-black
    method: GET
    data_selector: formats_available
    params: {}
- name: Detect Frames Freeze
  endpoint:
    path: /reference/qc-detect-freeze
    method: GET
    data_selector: formats_available
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
- name: AddMedia
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: query
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params: {}
- name: AddMedia
  endpoint:
    path: /addmedia
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source: '[SourceFile|SourcePlaylist]'
      format.output: '[qc_check|mp4]'
      format.qc.qc_audio_codec.stream.index: '[AudioStreamIndex]'
      format.qc.qc_audio_codec.stream.value: '[CodecName]'
      format.qc.qc_audio_codec.severity: '[fatal|warning]'
- name: AddMedia
  endpoint:
    path: /AddMedia
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source: '[SourceFile|SourcePlaylist]'
      format:
        output: '[qc_check|advanced_hls|advanced_dash|advanced_fmp4|fmp4_hls|mp4]'
- name: AddMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source: '[SourceFile|SourcePlaylist]'
      format:
        output: '[qc_check|advanced_hls|advanced_dash|advanced_fmp4|fmp4_hls]'
        qc:
          qc_bitrate_declaration:
            allowed_deviation: '[Percent]'
            severity: '[fatal|warning]'
- name: AddMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source: '[SourceFile|SourcePlaylist]'
      format:
        output: '[qc_check|mp4]'
        qc:
          qc_audio_codec:
            stream:
            - index: '[AudioStreamIndex]'
              value: '[CodecName]'
            severity: '[fatal|warning]'
- name: media
  endpoint:
    path: /GetMediaList
    method: GET
    data_selector: media
    params: {}
- name: AddMedia
  endpoint:
    path: /query
    method: POST
    data_selector: query
    params:
      userid: '[UserID]'
      userkey: '[UserKey]'
      action: AddMedia
      source: '[SourceFile|SourcePlaylist]'
      format:
        output: '[qc_check|advanced_hls|advanced_dash|advanced_fmp4|fmp4_hls]'
        qc:
          qc_bitrate_declaration:
            allowed_deviation: '[Percent]'
            severity: '[fatal|warning]'
- name: media
  endpoint:
    path: /GetMediaList
    method: POST
    data_selector: response.media
    params: {}
- name: video_quality_checks
  endpoint:
    path: /video_quality/checks
    method: GET
    data_selector: checks
    params: {}
- name: audio_metadata_checks
  endpoint:
    path: /audio_metadata/checks
    method: GET
    data_selector: checks
    params: {}
- name: audio_quality_checks
  endpoint:
    path: /audio_quality/checks
    method: GET
    data_selector: checks
    params: {}
- name: file_quality_checks
  endpoint:
    path: /file_quality/checks
    method: GET
    data_selector: checks
    params: {}
- name: video_quality_checks
  endpoint:
    path: /video_quality/checks
    method: GET
    data_selector: checks
- name: audio_metadata_checks
  endpoint:
    path: /audio_metadata/checks
    method: GET
    data_selector: checks
- name: audio_quality_checks
  endpoint:
    path: /audio_quality/checks
    method: GET
    data_selector: checks
- name: file_quality_checks
  endpoint:
    path: /file_quality/checks
    method: GET
    data_selector: checks
notes:
- Users can choose a number of actions, but the primary two actions we tend to see
  are requests to use preset-based actions, or requests that explicitly lay out all
  the actions to be taken to process an asset.
- Regenerating the UserKey will invalidate the previous, and API requests using the
  old UserKey will error out.
- MPEG-TS output can be configured to remove initial PTS delay using the remove_init_ts_delay
  parameter.
- If you need to whitelist an IP for notification requests, they will come from '34.193.0.100/32'
  and '100.24.75.0/32'.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- All client requests and server responses use the XML or JSON format.
- Uses OAuth 2.0 with refresh token authentication
- If multiple SourceFile added, they will be concatenated or join to split screen
- Split Screen fields are optional
- Metadata fields are optional
- Logo fields are optional
- Overlay fields are optional
- Text Overlay fields are optional
- Video codec parameters are optional, while only for libx264 video codec
- Profile is optional, while only for libx264 video codec
- Turbo Encoding switch is optional
- Video rotation is optional
- Uses user ID and key for authentication
- Requires user ID and user key for API requests
- Put your real userID and userKey in the request.
- If your source media files are encrypted at rest, and would be retrieved with encryption
  still in place (usually called client-side encryption), we have a number of methods
  to decrypt those assets for processing.
- If native at-rest encryption is applied to files, but they are delivered decrypted
  (usually called server-side encryption), these parameters are not needed.
- You can use any supported region for the Amazon SNS topic.
- You can use any supported region for the Amazon SNS topic. It isn't a requirement
  to be set the same as the media processing region.
- If media has only one destination, than destination and destination_status parameters
  will be presented as a string, otherwise these parameters will be presented as an
  array.
- The <audio_validation /> section will be included to the notification data only
  if <extended_notify /> media parameter was set to yes.
- If you set <notify_upload_extended /> param to 'yes', the output parameters will
  be included in your response.
- Custom data can be included in responses from AddMedia requests.
- Source Media duration must be longer than 10 minutes of run length to enable ludicrous
  mode orchestration. If the duration is under ten minutes long, the job will be processed
  in default mode.
- Ludicrous Mode will not affect the performance of closed_capctions output format.
- Using the 'copy' parameter value will retain all original source settings in the
  output.
- 'For size parameter, you can specify only one dimension: either width or height.'
- Using the 'copy' parameter value will retain all original source settings in the
  output and ignore any additional parameters.
- 'For size parameter, you can specify only one dimension: either width or height.
  In this case, set other dimension to 0.'
- If framerate_upper_threshold is specified then the framerate parameter will be ignored.
- parameter works only for mpeg-ts output format.
- video_only parameter works only for mp4, mainconcept_mxf and advanced multibitrate
  output formats.
- color_primaries, transfer_characteristics, and matrix_coefficients parameters are
  supported only in mov, cablelabs_mpegts, mxf, and apple_prores output formats.
- video_tag parameter available only for mxf output format and mxf_op1a output format
  with xdcam video codec.
- mxf_profile and mxf_multiplex_type parameters available only for mainconcept_mxf
  output format.
- Requires UserID and UserKey
- Output format must be apple_prores
- Required parameters include userid, userkey, action, source, and format.
- Changing the default parameters listed below will risk violation of conformance
  with the CableLabs standard.
- 'Closed Captions Mux Type: cea-608, cea-708'
- Default keyframe interval is 60.
- H264 level defaults to 41.
- Default keyframe interval is 60 frames
- H264 level defaults to 41
- HDR 10 parameters available only for hevc video codec.
- HDR parameters available only for mp4, mpegts, fmp4_hls, advanced_dash, and advanced_fmp4
  output formats.
- audio_source_file parameter available only for mp4 and mpegts output formats.
- Enable or disable lossless encoding — default is no.
- Specify the quality level as an integer from -1 to 63.
- If you specify the audio_codec as 'copy', the options audio_channels_number, audio_sample_rate,
  audio_bitrate will be ignored and their values will be copied from your source file.
- audio_volume parameter will not work with *dolby_* audio codecs if audio_normalization
  or input_dialnorm parameters are set.
- copy_audio_streams parameter is only applicable for mp4 and mov output formats and
  audio_codec = copy.
- Uses XML for configuration
- <lfe_low /> and <lfe_hight /> parameters will be allied only in case of channel
  upmixing.
- <split_channels /> parameter available only for PCM audio codecs.
- <metadata_channel_layout /> parameter available only for mov, dnxhd and mxf_op1a
  output formats.
- <adjust_lra /> and <accepted_loudness_interval /> parameters only applied for DEE
  processing for large audio streams with size over 4GB.
- We discovered, that sometimes loudness normalization performed by our default audio
  encoder doesn't work well, especially on complex audio with a high loudness range.
  Therefore an iterative loudness correction procedure may be applied. The accepted_loudness_interval
  parameter tunes the exit criteria for this procedure by setting an acceptable loudness
  interval. Corresponding to the EBU recommendation we use default value equals to
  1.
- audio_service_type values include 0 for Complete main, 2 for Visually impaired,
  3 for Hearing impaired, 5 for Commentary, 6 for Emergency, 7 for Karaoke.
- language_code must be a valid ISO 639-2 language code.
- If the set_video_duration parameter is specified, the apply_timecode parameter will
  be ignored.
- Loudnorm feature not supported by advanced multibitrate formats.
- Loudnorm feature doesn’t affect Dolby audio
- Default value for insert_nielsen_watermarks is no.
- Default value for nielsen_watermarks_type is naes2_naes6.
- Supports a wide variety of delivery destinations
- Can use multiple elements within each destination
- Pre-Signed URL uses specific query parameters for authentication.
- Adding ?passive=yes to the FTP URL forces downloader/uploader to use Passive Mode
  for FTP transfer.
- If you don't specify AWS key/secret, the bucket must have READ and WRITE permissions
  for the specified AWS user and Account ID.
- Parameters for full_svc, priority, language_code, mainid, and asvcflags have specific
  allowed values and defaults.
- 'Insert Nielsen Watermarks in audio stream: default is ''no''.'
- Type of watermarks defaults to 'naes2_naes6'.
- Encoding.com supports a wide variety of delivery destinations.
- You can use multiple elements within each query.
- Many FTP services require the use of passive FTP due to firewalling.
- Do not forget to URL encode your AWS_SECRET, in particular, replacing '/' with '%2F'.
- This is necessary for legacy compatibility with the platform.
- 'Using specific S3 endpoints: To use a specific S3 endpoint/region, replace ‘s3.amazonaws.com‘
  in your S3 URL with one of the specified regions.'
- Please use the following ARN arn:aws:iam::456240961796:root as a Principal in your
  Assume Role policy settings.
- A variety of additional output configuration parameters can be found here.
- Renders waveforms from sound files as png images.
- Advanced features for managing the frames in your output.
- It is possible to force fixed GOPs by setting keyint and keyint_min to the same
  number.
- Nal-hrd is sometimes required for systems (in particular, some CableLabs variants),
  where a hard constant bitrate must be observed and reported in the data stream.
- Majority of users will not need to define parameters in a job request unless required
  by decoder.
- Some objects may return nulls in deeply nested fields
- The <open-gop /> parameter works only for mxf_op1a output format.
- Advanced usability options for output.
- Nal-hrd is sometimes required for systems.
- Some objects like Contact may return nulls in deeply nested fields
- Requires setup of connected app in api
- Enables DC offset correction.
- Enables the correction of a phase difference between the L and R channels.
- Enables alerts that provide information about a particular defect to the standard
  output.
- Requires UserID and UserKey for authentication
- Output formats include advanced_hls, advanced_dash, fmp4_hls, advanced_fmp4
- DolbyE audio is currently supported only for mxf_op1a and mov output formats.
- The <image_media_playlist /> parameter is incompatible with the <advanced_mss> output
  format.
- The <no_ext_x_tiles /> parameter of <image_media_playlist /> is only available for
  <advanced_hls>, <fmp4_hls>, and HLS manifests of <advanced_fmp4> output formats.
- The <align_audio_segments_to_framerate /> is only available for <advanced_hls>,
  <advanced_dash>, and <advanced_fmp4> output formats. The <align_audio_segments_to_framerate
  /> only applies if <audio_only /> set to yes in the block. For <advanced_hls> output
  format media should have <multijob_workflow /> set to yes, or <pack_audio_to_mpegts
  /> set to yes.
- The <break_points /> applicable only if <segment_timeline /> set to yes.
- The <damf_audio /> and <damf_metadata /> parameters available only for <advanced_dash>,
  <advanced_fmp4>, and <fmp4_hls> output formats.
- The <additional_alternate_id /> parameter is only available for <advanced_hls>,
  <fmp4_hls>, and HLS manifests of <advanced_fmp4> output formats.
- The <get_from_manifest /> parameter available only if manifest <sources /> are specified.
- The <add_cea_cc_channels /> parameter is only available for <advanced_hls>, <fmp4_hls>,
  and HLS manifests of <advanced_fmp4> output formats.
- The <init_extension />, <init_sub_path />, and <init_base_name /> parameters are
  only available for <advanced_dash>, <fmp4_hls>, and <advanced_fmp4> output formats.
- This feature is available only in advanced_hls and fmp4_hls output formats.
- This feature available only for advanced_hls, fmp4_hls, and advanced_fmp4 output
  formats.
- iOS 5 now supports Fast Forward and Reverse Playback.
- Default values for parameters are set to 'no'.
- Closed caption webVTT and cea-608 mux types are only available for advanced_hls
  output format.
- The <ad_break /> feature is only available for advanced_hls, fmp4_hls, and advanced_fmp4
  output formats.
- The <cmaf_conformant /> feature is available for fmp4_hls and other fmp4 output
  formats.
- The <segment_extension /> parameter is restricted to the fmp4_hls output format.
- The <pack_audio_to_mpegts /> feature is restricted to the advanced_hls output format.
- The <reorder_audio_packets /> feature is available only for advanced_hls output
  format.
- Some objects may require specific media parameters
- For closed captions only available ismt and webvtt muxing types.
- If mux type set to webvtt it will be applied to dash and hls manifests and ismt
  for mss.
- If mux type set to ismt it will be applied to dash and mss manifests and webvtt
  for hls.
- Value of Duration attribute of Period tag in MPD manifest will be taken from the
  first stream in API request.
- The <add_all_cea_cc_channels /> parameter available only for HLS manifests.
- Dolby Atmos DAMF alternate source files are required for processing.
- destination and add_audio_only options are available only for advanced_hls output.
- For widevine_drm and playready_drm parameters, <widevine_drm /> and <playready_drm
  /> parameters are available only for advanced_dash and dash manifests of advanced_fmp4
  output formats.
- For add_hls_drm_metadata parameter, <add_hls_drm_metadata /> parameter is available
  only for advanced_hls, fmp4_hls, and HLS manifests of advanced_fmp4 output formats.
- For single_segment_template parameter, <single_segment_template /> parameter available
  only for advanced_dash and dash manifests of advanced_fmp4 output formats.
- For replace_bitrate parameter, <replace_bitrate /> parameter is available only for
  advanced_dash and dash manifests of advanced_fmp4 output formats.
- For add_audio_channels parameter, <add_audio_channels /> parameter is available
  only for advanced_hls, fmp4_hls, and advanced_fmp4 output formats.
- For apply_to parameter, <apply_to /> parameter is available only for advanced_fmp4
  output format.
- 'For sub_path parameter, these characters will be filtered out: ''"'', ''`'', ''№'',
  ''$'', ''#'', ''?'''
- For add_all_cea_cc_channels parameter, the <add_all_cea_cc_channels /> parameter
  available only for advanced_hls, fmp4_hls, and HLS manifests of advanced_fmp4 output
  format.
- For add_cea_cc_channels, the <add_cea_cc_channels /> parameter is only available
  for advanced_hls, fmp4_hls, and HLS manifests of advanced_fmp4 output formats.
- For basename, the <add_cea_cc_channels /> parameter value should not contain sub-directories.
- These features are only available for advanced_hls, fmp4_hls, and advanced_fmp4
  outputs.
- <alternate_default /> and <alternate_autoselect /> are available only for advanced_hls,
  fmp4_hls, and advanced_fmp4 output formats.
- <characteristics /> parameter are available only for advanced_hls, fmp4_hls, and
  HLS manifests of advanced_fmp4 output formats.
- <accessibility_scheme /> and <accessibility_value /> parameters are available only
  for advanced_dash and DASH manifests of advanced_fmp4 output formats.
- The damf_audio and damf_metadata parameters available only for advanced_dash, advanced_fmp4,
  and fmp4_hls output formats.
- The <align_audio_segments_to_framerate /> is only available for <advanced_hls>,
  <advanced_dash>, and <advanced_fmp4> output formats. The <align_audio_segments_to_framerate
  /> only appliable if <audio_only /> set to yes in the block. For <advanced_hls>
  output format media should have <multijob_workflow /> set to yes, or <pack_audio_to_mpegts
  /> set to yes.
- ad_break options are only available for advanced_hls, fmp4_hls, advanced_fmp4, and
  advanced_dash output formats.
- Only applicable for advanced_hls, fmp4_hls, and HLS manifest from advanced_fmp4.
- The <ad_break /> feature is only available for advanced_hls, fmp4_hls, and advanced_fmp4
  (HLS manifest) output formats.
- Maximum number of available streams is 15
- Image Playlist Parameters feature doesn't work with advanced_mss output format.
- This feature available only for advanced_hls, fmp4_hls, advanced_dash, and advanced_fmp4
  output formats.
- The maximum number of available streams is 15
- For byte_range parameter, it is available for advanced_hls and fmp4_hls outputs
  only.
- The get_from_manifest parameter is available only if manifests are specified.
- Audio and video parameters aren’t applicable to the level and should instead be
  set in each parameter.
- This feature is available only for advanced_dash and advanced_hls output.
- widevine_drm and playready_drm parameters are available only for advanced_dash and
  dash manifests of advanced_fmp4 output formats.
- add_hls_drm_metadata parameter is available only for advanced_hls, fmp4_hls, and
  HLS manifests of advanced_fmp4 output formats.
- single_segment_template parameter available only for advanced_dash and dash manifests
  of advanced_fmp4 output formats.
- replace_bitrate parameter is available only for advanced_dash and dash manifests
  of advanced_fmp4 output formats.
- add_audio_channels parameter is available only for advanced_hls, fmp4_hls, and advanced_fmp4
  output formats.
- apply_to parameter is available only for advanced_fmp4 output format.
- 'sub_path parameter: These characters will be filtered out: ''\'', ''`'', ''№'',
  ''$'', ''#'', ''?'''
- add_all_cea_cc_channels parameter available only for advanced_hls, fmp4_hls, and
  HLS manifests of advanced_fmp4 output format.
- add_cea_cc_channels parameter is only available for advanced_hls, fmp4_hls, and
  HLS manifests of advanced_fmp4 output formats.
- basename parameter value should not contain sub-directories.
- 'If <auto /> is set to ''yes'' for <alternate_source /> then: Only auto alternate
  sources will be applied, other custom alternate_sources will be skipped.'
- For adaptive intermediate repackaging workflows.
- Required parameters include userid, userkey, and action.
- Uses XML or JSON format for requests
- Required fields include userid, userkey, action, source, and destination
- Auto cropping will be ignored if <crop_* /> parameters are specified.
- BuyDRM only works with advanced multibitrate output formats.
- 'Available for the following formats: fl9, advanced_hls, m4a, mp4, wmv, zune.'
- Length of metatag value can't be greater than 256 characters.
- Specify the number of columns in split screen.
- Specify the number of rows in split screen.
- Overlay supports video, audio, and text data.
- overlay_source is a required field.
- text and font_source are the required parameters
- Enables the rotation of the video picture.
- Specifies the rotation meta-data for .MOV files.
- image_format is a required field.
- If either width or height is set to 0, keep_aspect_ratio will be yes.
- Format fields are required for GIF creation.
- This effect is only compatible with mp4 outputs.
- By default each slide has duration equal to 3 seconds.
- If duration of slideshow and audio stream are different – shortest duration will
  be used.
- userid, userkey, and action are required parameters.
- fade_in and fade_out parameters should be in the format FadeInStart:FadeInDuration
  or FadeOutStart:FadeOutDuration.
- This feature works only for ipad, iphone, ipod, mov, mov_prores, mp4, mxf, wowza,
  apple_prores output formats.
- text and font_source are the required parameters.
- <image_format /> is a required field.
- Parameters include userid, userkey, and action as required fields.
- Interval, loop, colors, and dither have specific allowed values.
- Drop frame can be used only for 29.97 or 59.94 output frame rates.
- The <transparent_background /> parameter applied only if set to *dfxp*.
- The <ttml_profile /> parameter applied only if set to *ttml*.
- If multiple source files (up to 4) are specified in the source array, these files
  will be merged into a single MCC file.
- If 2 source files are specified in the source array, these files will be merged
  into a single SCC file, sources will be mapped to CC1 and CC2 channels respectively.
- Validation action can be pass, fail, or report.
- Repair option can be yes or no.
- Auto QC mode will be ignored if you manually configure tests in the request.
- The QC service is charged on output GB only at your account's configured per GB
  rate.
- QC features are available for advanced_hls, advanced_dash, advanced_fmp4, fmp4_hls,
  and mp4 output formats only!
- The <add_source_offset/> feature works only with mxf source.
- Specify the test level severity.
- 'Allowed values: warning, fatal.'
- Encoding.com supports various closed caption formats.
- For now QC features are available for advanced_hls, advanced_dash, advanced_fmp4,
  fmp4_hls, and mp4 output formats only!
- Validate the file size of your output
- Tests with ‘warning’ severity generate messages in report but qc process will continue.
- Tests with ‘fatal’ severity will stop QC process.
- Allowed values for value are cbr and vbr.
- Allowed values for severity are warning and fatal.
- You can use the ID of original media or the ID of QC-media which you can find by
  GetStatus request or in UI.
- Some tests will be excluded if media doesn't match specific conditions
- Specify the QC severity using the severity parameter, allowed values are warning,
  fatal with a default of warning.
- Baton Validation available only for advanced_hls, mp4, cablelabs_mpegts, mainconcept_mxf,
  and mxf_op1a output formats.
- ReportLinkPDF, Summary, and Result fields may not be presented in externalReport
  block.
- The qc_video_metrics test is available only for mpeg-4, mpeg-ts, and mxf source
  file formats.
- Required parameters include userid, userkey, action, and format.
- Will work only with cea-608 and cea-708 closed captions
- This test is ignored for audio-only streams in multi-bitrate formats.
- Specify the QC severity.
- Fields may not be presented in externalReport block.
- This test is ignored for audio-only streams in multibitrate formats.
- This test is ignored for video-only streams in multibitrate formats
- Value is required to specify the audio codec name.
- Severity can be 'warning' or 'fatal', defaulting to 'warning'.
- Required parameters include userid, userkey, action, source, and format
- This test is ignored for video-only streams in multibitrate formats.
- allowed_deviation defaults to 20
- severity defaults to warning
- Specify the number of audio channels as a positive integer.
- QC severity can be either warning or fatal, default is warning.
- The allowed_deviation defaults to 10 if not specified.
- The severity defaults to warning if not specified.
- Validates that the CUE-OUT:0 tag is placed at program segment boundaries and matches
  declared breakpoints in the request.
- mediaid is optional
- date_from and date_to have default values
- Uses OAuth2 authentication
- Required fields include userid, userkey, action, source, and format.
- This action allows you to retrieve statistics for job requests over a given range
  of dates.
- Create or update a named preset which can be applied as a template for future jobs.
- Response returns a message indicating the preset has been deleted.
- 'Date format: YYYY-MM-DD HH:MM:SS'
- For closeddate parameter, it may differ with the actual value of about 1 second.
- Page number starts from 1
- Default items per page is 10, can be between 5 and 100
- Often <closeddate /> parameter represents the last upload file modified time. It
  may differ with the actual value of about 1 second.
- Page number is a positive integer.
- Number of elements per page must be between 5 and 100 inclusive.
- Multiple state messages may be present in task status.
- For each request, any parameters can be omitted.
- Returns basic source details for your input.
- All parameters in the format description are required.
- Identifies the type of component stream and may be used to provide a text description
  of the elementary stream.
- Specify the file duration in hours, minutes, and seconds.
- Duration deviation in percent can be set from 0 to 100.
- Format output is required and can be either qc_check or mp4.
- QC severity can be either fatal or warning, defaulting to warning.
- allowed_deviation ranges from 0 to 100, default is 20
- severity can be warning or fatal, default is warning
- Force Sign-on is required for security reasons.
- You need an app administrator rights in your Okta Dashboard to have an ability to
  set up the OIDC application.
- If you log out and then log back into your Encoding.com User Interface your username
  and password is the first factor, but you should also be prompted for a six digit
  code.
- If you don't have access to the Authenticator Application, use the 'Recovery Code'
  mode.
- SSO can be enabled by the Admin user of your Encoding.com account.
- Pre-registered applications available in the Okta Integration Network.
- Encoding.com offers SSO via SAML issuer method.
- Pre-registered applications are available in the Okta Integration Network.
- The Encoding.com Incident Response Plan is updated quarterly.
- Updated 6 days ago
- SSO is implemented through a SAML issuer method.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Invalid API key: Check your user key'
- 'Missing required parameters: Ensure all required fields are included in the request'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check userID and userKey'
- If ludicrous mode is requested for a format the encoding or other processing engine
  cannot support, the API will return an error message.
- 'Incompatible parameter: ''flv'' output with ''vp6'' video codec is incompatible
  with ''dolby_audio'' audio codec.'
- If framerate_upper_threshold is specified then the framerate parameter will be ignored.
- 'USER_NOT_FOUND: Check if the UserID is correct.'
- 'INVALID_USERKEY: Verify the UserKey.'
- 'MISSING_REQUIRED_PARAMETER: Ensure all required fields are included.'
- Common Errors
- Media Errors
- Queue Errors
- 'REQUEST_FAILED: Check if the userid and userkey are correct.'
- '400 Bad Request: Check required fields are included'
- '401 Unauthorized: Verify API Key is correct'
- '404 Not Found: Endpoint does not exist'
- Encoding Error Codes
- '401 Unauthorized: Recheck UserID or UserKey'
- '400 Bad Request: Check required parameters'
- '401 Unauthorized: Invalid user credentials'
- '404 Not Found: Requested resource could not be found'
- '400 Bad Request: Check the input parameters'
- '404 Not Found: The requested resource could not be found'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Check userid and userkey'
- 'REQUEST_ERROR: Check parameters and try again.'
- '401 Unauthorized: Check UserID and UserKey'
- 'AUTHENTICATION_FAILED: Verify UserID and UserKey'
- 'INVALID_PARAMETER: Check required fields and allowed values'
- 'USER_NOT_AUTHORIZED: Check your user credentials'
- 'INVALID_SOURCE_URL: Verify the format of your source URLs'
- 'ACTION_NOT_SUPPORTED: Confirm that the action requested is valid'
- '401 Unauthorized: Check user credentials.'
- '400 Bad Request: Ensure all required parameters are provided.'
- 'USERID_REQUIRED: UserID is required.'
- 'USERKEY_REQUIRED: UserKey is required.'
- 'ACTION_REQUIRED: Action is required.'
- '401 Unauthorized: Recheck API credentials or access permissions'
- 'USER_NOT_FOUND: Ensure the UserID is correct'
- 'INVALID_USERKEY: Check the UserKey provided'
- 'ACTION_NOT_SPECIFIED: Action parameter is required'
- '401 Unauthorized: Recheck API key or user credentials'
- '404 Not Found: Verify endpoint path'
- 'Invalid User ID: Ensure the User ID is correct.'
- 'User key missing: Provide a valid user key.'
- 'Unsupported action: Check the action parameter.'
- 'INVALID_USERID: Check the UserID provided.'
- 'INVALID_USERKEY: Check the UserKey provided.'
- 'INVALID_ACTION: Check the Action provided.'
- 'USER_NOT_AUTHORIZED: Ensure valid UserID and UserKey.'
- 'INVALID_ACTION: Check if the action is supported.'
- 'MISSING_REQUIRED_FIELDS: Ensure all required fields are provided.'
- 'transcodingError: QC not started because of transcoding error.'
- 'InvalidParameters: Check the required parameters and their allowed values.'
- 'Unauthorized: Recheck user credentials.'
- '400 Bad Request: Required parameters are missing or invalid'
- '401 Unauthorized: Recheck credentials or token expiration'
- 'Invalid User ID or User Key: Ensure correct credentials are used.'
- 'Invalid output format: Check allowed values for output.'
- '401 Unauthorized: Recheck user credentials'
- '401 Unauthorized: Recheck credentials or permissions'
- '400 Bad Request: Check required parameters userid and userkey'
- '401 Unauthorized: Check user credentials'
- '401 Unauthorized: Invalid userkey or userid'
- Invalid UserID or UserKey
- Action not recognized
- Source file or playlist not found
- 'INVALID_USERID: Ensure the userid is correctly formatted.'
- 'INVALID_USERKEY: Check userkey for validity.'
- 'INVALID_ACTION: The action specified must be ''AddMedia''.'
- '401 Unauthorized: Recheck authentication credentials.'
- REQUEST_LIMIT_EXCEEDED
- QUERY_TIMEOUT
- 401 Unauthorized
- '400 Bad Request: Check required fields and formats'
- '403 Forbidden: User does not have permission to access this resource'
- '404 Not Found: Check the endpoint URL'
- 'REQUEST_FAILED: Check the provided UserID and UserKey'
- 'No XML: No XML query was provided in the request.'
- 'Wrong XML: The XML query provided in the request is not properly formatted.'
- 'Wrong query format: The XML does not contain <query> root element.'
- 'Invalid action: The action parameter is empty or is not an allowed action.'
- 'Wrong User ID or Key: The UserID/UserKey pair was not found.'
- 'You don''t have permission to create trial users: You cannot create trial users.'
- 'You don''t have permission to create sub users: You cannot create sub users.'
- 'You don''t have permission to manage this user: You can manage only users who had
  been created by you.'
- 'action_user_id : User not found: User with id which you set doesn''t exist.'
- 'action_user_id : This field is required: action_user_id is required field for following
  actions: UpdateSubUser DeleteSubUser GetUserInfo GetSubUsers GetASM GetStorageSpace
  GetBandwidthStat GetBandwidthStatGroupDate'
- 'action_user_id : This field is required: action_user_id is required field for following
  actions:  UpdateSubUser, DeleteSubUser, GetUserInfo, GetSubUsers, GetASM, GetStorageSpace,
  GetBandwidthStat, GetBandwidthStatGroupDate'
- '401 Unauthorized: Recheck API key or permissions'
- '400 Bad Request: Check request parameters'
- '404 Not Found: Check if the resource exists'
- 'Invalid request parameters: Check if all required parameters are provided.'
- '[Error]'
- 'Media ID is not indicated: The MediaID parameter is omitted in the query.'
- 'Wrong source file URL: The URL provided in the query does not match a single URL
  of valid formats.'
- 'Source file is not indicated: The Source File parameter is empty.'
- 'Wrong Media ID: The media with such ID was not found.'
- 'ECOM00101: Could not write header for output file'
- 'ECOM00102: Error while opening file'
- 'ECOM00122: Unknown format'
- 'ECOM00103: Incorrect frame size'
- 'ECOM00104: Frame size must be a multiple of 2'
- 'ECOM00105: Crop size must be a multiple of 2'
- 'ECOM00106: Error while opening codec for output stream'
- 'ECOM00107: Unknown encoder'
- 'ECOM00108: Unsupported codec for output stream'
- 'ECOM00109: Output file does not contain any stream'
- 'ECOM00110: Cannot allocate temp picture, check pix fmt'
- 'ECOM00202: Error putting thumbnail'
- 'ECOM00111: Unsupported codec .* for input'
- 'ECOM00203: S3 Download error'
- 'ECOM00112: Encoding was not completed: .*: could not find codec parameters'
- 'ECOM00204: S3 Upload Error: Access denied'
- 'ECOM00205: Upload Error: Couldn''t resolve host'
- 'ECOM00206: Upload Error: Uploaded unaligned file size'
- 'ECOM00207: Error putting file to S3'
- 'ECOM00208: Error accessing S3 file'
- 'ECOM00113: Unknown encoder error'
- 'ECOM00209: Failed FTP upload: 550'
- 'ECOM00210: Upload Error: Authentication failure'
- 'ECOM00114: Requested video bitrate is too low'
- 'ECOM00115: Video stream was not found'
- 'ECOM00211: Timed out before server could connect to us'
- 'ECOM00212: Upload Error: Upload failed: Permission denied'
- 'ECOM00213: Upload failed: Permission denied'
- 'ECOM00116: Wrong input file format'
- 'ECOM00117: No result file'
- 'ECOM00118: Video codec is not supported'
- 'ECOM00119: libfaac doesn''t support this output format'
- 'ECOM00120: Unsupported codec for input audio stream'
- 'ECOM00121: Unsupported codec for input video stream'
- 'ECOM00214: Error getting file: Download error'
- 'ECOM00215: couldn''t connect to host'
- 'ECOM00001: The AWS Access Key Id you provided does not exist'
- 'ECOM00216: connect() timed out'
- 'ECOM00217: error opening file'
- 'ECOM00218: Cannot assign requested address'
- 'ECOM00219: Error getting file: '
- 'ECOM00123: Neither video nor audio stream was found'
- 'ECOM00220: Failed to MKD dir'
- 'ECOM00124: Segmentation error'
- 'ECOM00125: Could not decode source file'
- 'ECOM00126: Encoding was not completed'
- 'ECOM00127: Audio stream was not found'
- 'ECOM00128: Encoder error: sh: /bin/tar: Argument list too long'
- 'ECOM00221: S3 download error: The specified key does not exist'
- 'ECOM00239: Failure establishing ssh session'
- 'ECOM00222: S3 upload error: All access to this object has been disabled'
- 'ECOM00223: Connection time-out'
- 'ECOM00129: Compressed SWF format not supported'
- 'ECOM00130: -acodec libmp3lame'
- 'ECOM00131: -acodec libfaac'
- 'ECOM00132: Incorrect video parameters such as bitrate, width or height'
- 'ECOM00002: Overtime limit exceeded'
- 'ECOM00133: Can''t get segment duration'
- 'ECOM00003: The specified bucket does not exist'
- 'ECOM00224: The requested URL returned error: 403'
- 'ECOM00225: The requested URL returned error: 404'
- 'ECOM00226: The requested URL returned error: 503'
- 'ECOM00227: The requested URL returned error: 400'
- 'ECOM00228: S3 upload error: Your socket connection to the server was not read from
  or written to within the timeout period. Idle connections will be closed.'
- 'ECOM00134: width or height not divisible by 16 (480x360), compression will suffer'
- 'ECOM00229: S3 upload error: We encountered an internal error. Please try again.'
- 'ECOM00230: Creating the dir/file failed: No such file or directory'
- 'ECOM00135: syntax error near unexpected token'
- 'ECOM00231: Access denied: 530'
- 'ECOM00232: Operation timed out'
- 'ECOM00233: Recv failure: Connection reset by peer'
- 'ECOM00136: Bufsize is required'
- 'ECOM00234: off-Error putting file: '
- 'ECOM00137: Can not resample 4 channels @ 44100 Hz to 2 channels @ 44000 Hz'
- 'ECOM00235: FTP response reading failed'
- 'ECOM00236: select/poll returned error'
- 'ECOM00237: server response timeout'
- 'ECOM00138: Audio downmixing failed'
- 'ECOM00139: Failed extracting mp3'
- 'ECOM00238: S3 upload error: Please re-send this request to the specified temporary
  endpoint. Continue to use the original request endpoint for future requests.'
- 'ECOM00234: Error putting file: S3 upload error: Your socket connection to the server
  was not read from or written to within the timeout period. Idle connections will
  be closed.'
- 'ECOM00117: Encoder error: no result file'
- 'ECOM00240: Error putting file: '
- 'ECOM00140: Concatenation failed'
- 'ECOM00241: The file is empty'
- 'ECOM00242: Failed FTP upload: 451'
- 'ECOM00243: Authentication failure'
- 'ECOM00245: Failed FTP upload: 553'
- 'ECOM00246: Download error: RETR response: 550'
- 'ECOM00141: No video stream was found in Source part .*'
- 'ECOM00247: Upload error: Got a 421 ftp-server response when 220 was expected'
- 'ECOM00248: Download error: Got a 421 ftp-server response when 220 was expected'
- 'ECOM00249: Download error: Access denied: 421'
- 'ECOM00250: Upload error: Access denied: 421'
- 'ECOM00251: Upload error: Failed FTP upload: 553'
- 'ECOM00252: Download error: The file is empty'
- 'ECOM00253: Download error: Server denied you to change to the given directory'
- 'ECOM00254: Upload error: Failed FTP upload: 421'
- 'ECOM00255: Download error: Failed FTP upload: 421'
- 'ECOM00256: Download error: The requested URL returned error: 401'
- 'ECOM00257: Download error: Couldn''t resolve host.*'
- 'ECOM00258: Download error: RETR response: 425'
- 'ECOM00259: Download error: transfer closed with .* bytes remaining to read'
- 'ECOM00260: Upload error: Failed FTP upload: 451'
- 'ECOM00261: ffmpeg version 0.8.1'
- 'ECOM00004: Rerun limit exceeded'
- 'ECOM00262: RETR response: 550'
- 'ECOM00265: Failure when receiving data from the peer'
- 'ECOM00142: Source duration should not be greater than .*'
- 'ECOM00143: Video size should be greater than .*'
- 'ECOM00144: Video bitrate should be greater than .*'
- 'ECOM00266: result file too small'
- 'ECOM00267: Upload error: Timeout was reached'
- 'ECOM00268: response reading failed'
- 'ECOM00269: Audio extraction failed'
- 'ECOM00270: Connection timed out'
- 'ECOM00271: Progress stuck'
- 'ECOM00255: Download error: Failed to open remote file for reading: No such file
  or directory'
- '400 Bad Request: Ensure all required fields are provided'
- 'Missing required parameters: userid, userkey, action, source, output format.'
- 'Common Errors: Refer to the error responses documentation for details.'
auth_info:
  mentioned_objects:
  - UserID
  - UserKey
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Okta OIDC Application
  - User ID and User Key pair
  - OAuth 2.0
  - User ID and User Key
  - OAuth 2.0 API Token
  - Admin
  - OKTA
  - Ping Identity
  - User ID and User Key pair API authentication
  - OAuth 2.0 API Token Authentication
client:
  base_url: https://manage.encoding.com
source_metadata: null
