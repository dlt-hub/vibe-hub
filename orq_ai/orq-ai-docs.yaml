resources:
- name: knowledge_base
  endpoint:
    path: /v2/knowledge
    method: POST
    data_selector: ''
    params: {}
- name: file_upload
  endpoint:
    path: /v2/files
    method: POST
    data_selector: ''
    params: {}
- name: datasource
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources
    method: POST
    data_selector: ''
    params: {}
- name: datasource_chunks
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}/chunks
    method: GET
    data_selector: ''
    params: {}
- name: chunking
  endpoint:
    path: /chunking
    method: POST
    data_selector: ''
    params: {}
- name: chunks
  endpoint:
    path: /knowledge/<knowledge_id>/datasources/<datasource_id>/chunks
    method: POST
    data_selector: chunks
    params: {}
- name: agents
  endpoint:
    path: /reference/listagents
    method: GET
- name: contacts
  endpoint:
    path: /reference/listcontacts
    method: GET
- name: datasets
  endpoint:
    path: /reference/listdatasets
    method: GET
- name: deployments
  endpoint:
    path: /reference/deployments-4
    method: GET
- name: files
  endpoint:
    path: /reference/filelist-1
    method: GET
- name: models
  endpoint:
    path: /reference/listmodels
    method: GET
- name: prompts
  endpoint:
    path: /reference/getallprompts-1
    method: GET
- name: agents
  endpoint:
    path: /v2/agents/
    method: GET
- name: agent
  endpoint:
    path: /agents/{id}
    method: GET
- name: agent
  endpoint:
    path: /v2/agents/{id}
    method: GET
- name: retrieve_specific_agent_task
  endpoint:
    path: /v2/agents/{id}/tasks/{task_id}
    method: GET
- name: list_tasks
  endpoint:
    path: /v2/agents/{agent_key}/tasks
    method: GET
- name: list_tasks_for_agent
  endpoint:
    path: /v2/agents/{agent_key}/tasks
    method: GET
- name: run_agent
  endpoint:
    path: /v2/agents/run
    method: POST
- name: run_agent
  endpoint:
    path: /v2/agents/run
    method: POST
- name: stream_run_agent
  endpoint:
    path: /agents/stream-run
    method: POST
- name: run_and_stream_agent_execution
  endpoint:
    path: /v2/agents/stream-run
    method: POST
- name: actions
  endpoint:
    path: /v2/agents/{agent_key}/tasks/{task_id}/actions
    method: GET
- name: list_actions
  endpoint:
    path: /v2/agents/{agent_key}/tasks/{task_id}/actions
    method: GET
- name: retrieve_action
  endpoint:
    path: /v2/agents/{agent_key}/tasks/{task_id}/actions/{action_id}
    method: GET
- name: retrieve_action
  endpoint:
    path: /v2/agents/{agent_key}/tasks/{task_id}/actions/{action_id}
    method: GET
    data_selector: response
    params: {}
- name: budgets
  endpoint:
    path: /budgets
    method: GET
- name: budgets
  endpoint:
    path: /v2/budgets
    method: GET
    data_selector: budgets
- name: budgets
  endpoint:
    path: /v2/budgets
    method: POST
- name: budget_configuration
  endpoint:
    path: /v2/budgets
    method: POST
- name: budget_configuration
  endpoint:
    path: /budgets/{id}
    method: GET
    data_selector: response
- name: budget_configuration
  endpoint:
    path: /budgets/{id}
    method: GET
- name: budget_configuration
  endpoint:
    path: /budgets/{id}
    method: PATCH
- name: budget_configuration
  endpoint:
    path: /budgets/{id}
    method: PATCH
- name: budget_configuration
  endpoint:
    path: /budgets/{id}
    method: DELETE
- name: budget_configuration
  endpoint:
    path: /budgets/{id}
    method: DELETE
- name: parse_text
  endpoint:
    path: /v2/chunking
    method: POST
- name: chunking
  endpoint:
    path: /v2/chunking
    method: POST
- name: contact
  endpoint:
    path: /v2/contacts
    method: POST
- name: contact
  endpoint:
    path: /v2/contacts
    method: POST
- name: contacts
  endpoint:
    path: /v2/contacts
    method: GET
- name: contacts
  endpoint:
    path: /v2/contacts
    method: GET
- name: contact
  endpoint:
    path: /v2/contacts/{id}
    method: GET
- name: contact
  endpoint:
    path: /v2/contacts/{id}
    method: GET
- name: contact
  endpoint:
    path: /v2/contacts/{id}
    method: PATCH
- name: contact
  endpoint:
    path: /v2/contacts/{id}
    method: PATCH
- name: contact
  endpoint:
    path: /v2/contacts/{id}
    method: DELETE
- name: contact
  endpoint:
    path: /v2/contacts/{id}
    method: DELETE
- name: datasets
  endpoint:
    path: /v2/datasets
    method: GET
- name: datasets
  endpoint:
    path: /v2/datasets
    method: POST
- name: datasets
  endpoint:
    path: /v2/datasets
    method: GET
- name: datasets
  endpoint:
    path: /v2/datasets
    method: POST
- name: datasets
  endpoint:
    path: /v2/datasets/{dataset_id}
    method: GET
- name: datasets
  endpoint:
    path: /v2/datasets/{dataset_id}
    method: GET
- name: update_dataset
  endpoint:
    path: /v2/datasets/{dataset_id}
    method: PATCH
- name: dataset
  endpoint:
    path: /datasets/{dataset_id}
    method: PATCH
- name: delete_dataset
  endpoint:
    path: /v2/datasets/{dataset_id}
    method: DELETE
- name: delete_dataset
  endpoint:
    path: /v2/datasets/{dataset_id}
    method: DELETE
- name: datapoints
  endpoint:
    path: /v2/datasets/{dataset_id}/datapoints
    method: GET
- name: datapoints
  endpoint:
    path: /datasets/{dataset_id}/datapoints
    method: GET
- name: datapoint
  endpoint:
    path: /v2/datasets/{dataset_id}/datapoints
    method: POST
- name: datapoint
  endpoint:
    path: /v2/datasets/{dataset_id}/datapoints
    method: POST
- name: datapoint
  endpoint:
    path: /v2/datasets/{dataset_id}/datapoints/{datapoint_id}
    method: GET
    data_selector: datapoint
- name: datapoint
  endpoint:
    path: /v2/datasets/{dataset_id}/datapoints/{datapoint_id}
    method: GET
- name: datapoint
  endpoint:
    path: /datasets/{dataset_id}/datapoints/{datapoint_id}
    method: PATCH
- name: datapoint
  endpoint:
    path: /datasets/{dataset_id}/datapoints/{datapoint_id}
    method: PATCH
- name: delete_datapoint
  endpoint:
    path: /v2/datasets/{dataset_id}/datapoints/{datapoint_id}
    method: DELETE
- name: delete_datapoint
  endpoint:
    path: /v2/datasets/{dataset_id}/datapoints/{datapoint_id}
    method: DELETE
- name: delete_all_datapoints
  endpoint:
    path: /v2/datasets/{dataset_id}/clear
    method: DELETE
- name: delete_all_datapoints
  endpoint:
    path: /v2/datasets/{dataset_id}/clear
    method: DELETE
- name: deployments
  endpoint:
    path: /v2/deployments
    method: GET
- name: deployments
  endpoint:
    path: /v2/deployments
    method: GET
- name: deployment_config
  endpoint:
    path: /v2/deployments/get_config
    method: POST
- name: get_config
  endpoint:
    path: /v2/deployments/get_config
    method: POST
- name: invoke_deployment
  endpoint:
    path: /v2/deployments/invoke
    method: POST
- name: invoke_deployment
  endpoint:
    path: /v2/deployments/invoke
    method: POST
- name: add_metrics
  endpoint:
    path: /v2/deployments/{id}/metrics
    method: POST
- name: add_metrics
  endpoint:
    path: /v2/deployments/{id}/metrics
    method: POST
- name: stream
  endpoint:
    path: /v2/deployments/stream
    method: POST
- name: feedback
  endpoint:
    path: /v2/feedback
    method: POST
- name: deployments
  endpoint:
    path: /v2/deployments/stream
    method: POST
- name: feedback
  endpoint:
    path: /v2/feedback
    method: POST
- name: evaluators
  endpoint:
    path: /v2/evaluators
    method: GET
    data_selector: records
- name: evaluators
  endpoint:
    path: /v2/evaluators
    method: GET
    data_selector: records
- name: evaluators
  endpoint:
    path: /v2/evaluators
    method: POST
- name: evaluator
  endpoint:
    path: /v2/evaluators/{id}
    method: PATCH
- name: evaluators
  endpoint:
    path: /evaluators
    method: POST
- name: delete_evaluator
  endpoint:
    path: /v2/evaluators/{id}
    method: DELETE
- name: evaluators
  endpoint:
    path: /evaluators/{id}
    method: PATCH
- name: files
  endpoint:
    path: /v2/files
    method: POST
- name: evaluator
  endpoint:
    path: /evaluators/{id}
    method: DELETE
- name: files
  endpoint:
    path: /v2/files
    method: GET
    data_selector: files
- name: files
  endpoint:
    path: /v2/files
    method: POST
- name: file
  endpoint:
    path: /v2/files/{file_id}
    method: GET
    data_selector: file object
- name: file
  endpoint:
    path: /v2/files/{file_id}
    method: DELETE
- name: files
  endpoint:
    path: /v2/files
    method: GET
    data_selector: files
- name: knowledge_bases
  endpoint:
    path: /v2/knowledge
    method: GET
- name: file
  endpoint:
    path: /v2/files/{file_id}
    method: GET
- name: knowledge_base
  endpoint:
    path: /v2/knowledge/{knowledge_id}
    method: GET
    data_selector: settings
- name: file
  endpoint:
    path: /v2/files/{file_id}
    method: DELETE
    data_selector: ''
- name: knowledge
  endpoint:
    path: /v2/knowledge/{knowledge_id}
    method: PATCH
- name: knowledge
  endpoint:
    path: /v2/knowledge/{knowledge_id}
    method: DELETE
- name: knowledge_bases
  endpoint:
    path: /v2/knowledge
    method: GET
    data_selector: ''
- name: datasources
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources
    method: GET
- name: knowledge_base
  endpoint:
    path: /v2/knowledge/{knowledge_id}
    method: GET
- name: datasource
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources
    method: POST
- name: knowledge
  endpoint:
    path: /knowledge/{knowledge_id}
    method: PATCH
- name: datasource
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}
    method: GET
    data_selector: response
- name: delete_datasource
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}
    method: DELETE
- name: knowledge
  endpoint:
    path: /v2/knowledge/{knowledge_id}
    method: DELETE
- name: datasource
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}
    method: PATCH
- name: datasources
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources
    method: GET
- name: chunks
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}/chunks
    method: POST
- name: datasource
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources
    method: POST
- name: list_chunks
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}/chunks
    method: GET
- name: datasource
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}
    method: GET
- name: update_chunk
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}/chunks/{chunk_id}
    method: PATCH
- name: delete_datasource
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}
    method: DELETE
- name: delete_chunk
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}/chunks/{chunk_id}
    method: DELETE
- name: update_datasource
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}
    method: PATCH
- name: chunk
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}/chunks/{chunk_id}
    method: GET
- name: create_chunks
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}/chunks
    method: POST
- name: knowledge_base_search
  endpoint:
    path: /v2/knowledge/{knowledge_id}/search
    method: POST
- name: list_chunks
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}/chunks
    method: GET
- name: create_knowledge
  endpoint:
    path: /v2/knowledge
    method: POST
- name: update_chunk
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}/chunks/{chunk_id}
    method: PATCH
- name: prompts
  endpoint:
    path: /v2/prompts
    method: GET
    data_selector: prompts
- name: delete_chunk
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}/chunks/{chunk_id}
    method: DELETE
- name: prompts
  endpoint:
    path: /v2/prompts
    method: POST
- name: chunk
  endpoint:
    path: /v2/knowledge/{knowledge_id}/datasources/{datasource_id}/chunks/{chunk_id}
    method: GET
- name: prompt
  endpoint:
    path: /v2/prompts/{id}
    method: GET
- name: knowledge_base_search
  endpoint:
    path: /v2/knowledge/{knowledge_id}/search
    method: POST
- name: knowledge
  endpoint:
    path: /knowledge
    method: POST
- name: agents
  endpoint:
    path: /reference/listagents
    method: GET
- name: budgets
  endpoint:
    path: /reference/listbudgets
    method: GET
- name: contacts
  endpoint:
    path: /reference/listcontacts
    method: GET
- name: datasets
  endpoint:
    path: /reference/listdatasets
    method: GET
- name: deployments
  endpoint:
    path: /reference/deployments-4
    method: GET
- name: evaluators
  endpoint:
    path: /reference/getevals
    method: GET
- name: files
  endpoint:
    path: /reference/filelist-1
    method: GET
- name: knowledge bases
  endpoint:
    path: /reference/listknowledgebases
    method: GET
- name: prompts
  endpoint:
    path: /reference/getallprompts-1
    method: GET
- name: models
  endpoint:
    path: /reference/listmodels
    method: GET
- name: memory stores
  endpoint:
    path: /reference/getallmemorystores
    method: GET
- name: tools
  endpoint:
    path: /reference/getalltools
    method: GET
- name: prompts
  endpoint:
    path: /v2/prompts
    method: GET
    data_selector: prompts
- name: prompt
  endpoint:
    path: /v2/prompts/{id}
    method: PATCH
- name: delete_prompt
  endpoint:
    path: /v2/prompts/{id}
    method: DELETE
- name: prompts
  endpoint:
    path: /v2/prompts
    method: POST
- name: prompt_versions
  endpoint:
    path: /prompts/{prompt_id}/versions
    method: GET
- name: prompt
  endpoint:
    path: /v2/prompts/{id}
    method: GET
- name: prompt_version
  endpoint:
    path: /v2/prompts/{prompt_id}/versions/{version_id}
    method: GET
    data_selector: object
    params: {}
- name: prompt_versions
  endpoint:
    path: /prompts/prompt_id/versions/version_id
    method: GET
    data_selector: object
- name: models
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: agents
  endpoint:
    path: /reference/listagents
    method: GET
- name: budgets
  endpoint:
    path: /reference/listbudgets
    method: GET
- name: contacts
  endpoint:
    path: /reference/listcontacts
    method: GET
- name: datasets
  endpoint:
    path: /reference/listdatasets
    method: GET
- name: deployments
  endpoint:
    path: /reference/deployments-4
    method: GET
- name: evaluators
  endpoint:
    path: /reference/getevals
    method: GET
- name: files
  endpoint:
    path: /reference/filelist-1
    method: GET
- name: knowledge bases
  endpoint:
    path: /reference/listknowledgebases
    method: GET
- name: prompts
  endpoint:
    path: /reference/getallprompts-1
    method: GET
- name: models
  endpoint:
    path: /reference/listmodels
    method: GET
- name: memory stores
  endpoint:
    path: /reference/getallmemorystores
    method: GET
- name: tools
  endpoint:
    path: /reference/getalltools
    method: GET
- name: prompt
  endpoint:
    path: /v2/prompts/{id}
    method: PATCH
- name: BertScore Evaluator
  endpoint:
    path: /v2/evaluators/bert_score
    method: POST
- name: prompt
  endpoint:
    path: /v2/prompts/{id}
    method: DELETE
- name: bleu_score
  endpoint:
    path: /v2/evaluators/bleu_score
    method: POST
    data_selector: value
- name: prompt_versions
  endpoint:
    path: /v2/prompts/{prompt_id}/versions
    method: GET
- name: bleu_score
  endpoint:
    path: /evaluators/bleu_score
    method: POST
- name: prompt_version
  endpoint:
    path: /v2/prompts/{prompt_id}/versions/{version_id}
    method: GET
- name: Run Contains All Evaluator
  endpoint:
    path: /v2/evaluators/contains_all
    method: POST
- name: prompt_versions
  endpoint:
    path: /prompts/prompt_id/versions/version_id
    method: GET
- name: models
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: Run Contains Any Evaluator
  endpoint:
    path: /evaluators/contains_any
    method: POST
- name: bert_score
  endpoint:
    path: /v2/evaluators/bert_score
    method: POST
- name: contains_email_evaluator
  endpoint:
    path: /v2/evaluators/contains_email
    method: POST
    data_selector: value
- name: bert_score
  endpoint:
    path: /evaluators/bert_score
    method: POST
- name: Run Contains None Evaluator
  endpoint:
    path: /v2/evaluators/contains_none
    method: POST
- name: bleu_score_evaluator
  endpoint:
    path: /v2/evaluators/bleu_score
    method: POST
- name: Run Contains URL Evaluator
  endpoint:
    path: /v2/evaluators/contains_url
    method: POST
- name: Run Contains Valid Link Evaluator
  endpoint:
    path: /v2/evaluators/contains_valid_link
    method: POST
- name: Run Contains All Evaluator
  endpoint:
    path: /v2/evaluators/contains_all
    method: POST
- name: Run Contains Evaluator
  endpoint:
    path: /v2/evaluators/contains
    method: POST
- name: Run Contains Any Evaluator
  endpoint:
    path: /v2/evaluators/contains_any
    method: POST
    data_selector: value
- name: Run Ends With Evaluator
  endpoint:
    path: /evaluators/ends_with
    method: POST
    data_selector: value
    params: {}
- name: contains_any_evaluator
  endpoint:
    path: /evaluators/contains_any
    method: POST
- name: contains_all_evaluator
  endpoint:
    path: /evaluators/contains_all
    method: POST
- name: Run Exact Match Evaluator
  endpoint:
    path: /v2/evaluators/exact_match
    method: POST
- name: contains_email_evaluator
  endpoint:
    path: /v2/evaluators/contains_email
    method: POST
    data_selector: value
- name: contains_email
  endpoint:
    path: /evaluators/contains_email
    method: POST
- name: contains_any
  endpoint:
    path: /evaluators/contains_any
    method: POST
- name: contains_none
  endpoint:
    path: /evaluators/contains_none
    method: POST
- name: run_length_between_evaluator
  endpoint:
    path: /v2/evaluators/length_between
    method: POST
    data_selector: object
    params: {}
- name: Run Contains None Evaluator
  endpoint:
    path: /v2/evaluators/contains_none
    method: POST
- name: Run Length Greater Than Evaluator
  endpoint:
    path: /v2/evaluators/length_greater_than
    method: POST
- name: Contains URL Evaluator
  endpoint:
    path: /v2/evaluators/contains_url
    method: POST
- name: evaluators
  endpoint:
    path: /evaluators
    method: GET
- name: length_greater_than
  endpoint:
    path: /evaluators/length_greater_than
    method: POST
- name: Run Contains Valid Link Evaluator
  endpoint:
    path: /evaluators/contains_valid_link
    method: POST
    data_selector: value
- name: length_less_than_evaluator
  endpoint:
    path: /v2/evaluators/length_less_than
    method: POST
- name: Run JSON Validation Evaluator
  endpoint:
    path: /v2/evaluators/valid_json
    method: POST
- name: Run Contains Evaluator
  endpoint:
    path: /v2/evaluators/contains
    method: POST
- name: age_appropriate_evaluator
  endpoint:
    path: /v2/evaluators/age_appropriate
    method: POST
- name: bot_detection
  endpoint:
    path: /v2/evaluators/bot_detection
    method: POST
- name: Run Ends With Evaluator
  endpoint:
    path: /v2/evaluators/ends_with
    method: POST
    data_selector: value
- name: fact_checking_knowledge_base
  endpoint:
    path: /v2/evaluators/fact_checking_knowledge_base
    method: POST
- name: ends_with
  endpoint:
    path: /evaluators/ends_with
    method: POST
- name: exact_match
  endpoint:
    path: /evaluators/exact_match
    method: POST
- name: exact_match_evaluator
  endpoint:
    path: /v2/evaluators/exact_match
    method: POST
- name: grammar_evaluator
  endpoint:
    path: /v2/evaluators/grammar
    method: POST
- name: Run Length Between Evaluator
  endpoint:
    path: /v2/evaluators/length_between
    method: POST
- name: localization_evaluator
  endpoint:
    path: /v2/evaluators/localization
    method: POST
- name: pii_evaluator
  endpoint:
    path: /evaluators/pii
    method: POST
- name: Run Length Greater Than Evaluator
  endpoint:
    path: /v2/evaluators/length_greater_than
    method: POST
- name: sentiment_classification
  endpoint:
    path: /v2/evaluators/sentiment_classification
    method: POST
- name: Run Length Less Than Evaluator
  endpoint:
    path: /v2/evaluators/length_less_than
    method: POST
- name: summarization_evaluator
  endpoint:
    path: /v2/evaluators/summarization
    method: POST
- name: summarization
  endpoint:
    path: /evaluators/summarization
    method: POST
- name: JSON Validation Evaluator
  endpoint:
    path: /v2/evaluators/valid_json
    method: POST
- name: tone_of_voice_evaluator
  endpoint:
    path: /v2/evaluators/tone_of_voice
    method: POST
- name: age_appropriate_evaluator
  endpoint:
    path: /v2/evaluators/age_appropriate
    method: POST
- name: tone_of_voice
  endpoint:
    path: /evaluators/tone_of_voice
    method: POST
- name: bot_detection
  endpoint:
    path: /v2/evaluators/bot_detection
    method: POST
- name: translation_evaluator
  endpoint:
    path: /v2/evaluators/translation
    method: POST
    data_selector: value
    params: {}
- name: fact_checking_knowledge_base
  endpoint:
    path: /v2/evaluators/fact_checking_knowledge_base
    method: POST
- name: Run Coherence Evaluator
  endpoint:
    path: /v2/evaluators/ragas_coherence
    method: POST
- name: grammar_evaluator
  endpoint:
    path: /v2/evaluators/grammar
    method: POST
- name: localization_evaluator
  endpoint:
    path: /v2/evaluators/localization
    method: POST
- name: run_conciseness_evaluator
  endpoint:
    path: /v2/evaluators/ragas_conciseness
    method: POST
- name: Run Context Precision Evaluator
  endpoint:
    path: /v2/evaluators/ragas_context_precision
    method: POST
- name: Run Correctness Evaluator
  endpoint:
    path: /v2/evaluators/ragas_correctness
    method: POST
- name: agents
  endpoint:
    path: /reference/listagents
    method: GET
- name: budgets
  endpoint:
    path: /reference/listbudgets
    method: GET
- name: contacts
  endpoint:
    path: /reference/listcontacts
    method: GET
- name: datasets
  endpoint:
    path: /reference/listdatasets
    method: GET
- name: deployments
  endpoint:
    path: /reference/deployments-4
    method: GET
- name: evaluators
  endpoint:
    path: /reference/getevals
    method: GET
- name: files
  endpoint:
    path: /reference/filelist-1
    method: GET
- name: knowledge_bases
  endpoint:
    path: /reference/listknowledgebases
    method: GET
- name: prompts
  endpoint:
    path: /reference/getallprompts-1
    method: GET
- name: models
  endpoint:
    path: /reference/listmodels
    method: GET
- name: memory_stores
  endpoint:
    path: /reference/getallmemorystores
    method: GET
- name: tools
  endpoint:
    path: /reference/getalltools
    method: GET
- name: faithfulness_evaluator
  endpoint:
    path: /v2/evaluators/ragas_faithfulness
    method: POST
- name: pii_evaluator
  endpoint:
    path: /evaluators/pii
    method: POST
- name: Run Harmfulness Evaluator
  endpoint:
    path: /v2/evaluators/ragas_harmfulness
    method: POST
- name: sentiment_classification
  endpoint:
    path: /v2/evaluators/sentiment_classification
    method: POST
- name: maliciousness_evaluator
  endpoint:
    path: /v2/evaluators/ragas_maliciousness
    method: POST
- name: summarization_evaluator
  endpoint:
    path: /v2/evaluators/summarization
    method: POST
- name: tone_of_voice_evaluator
  endpoint:
    path: /v2/evaluators/tone_of_voice
    method: POST
- name: response_relevancy_evaluator
  endpoint:
    path: /v2/evaluators/ragas_response_relevancy
    method: POST
- name: Run Summarization Evaluator
  endpoint:
    path: /v2/evaluators/ragas_summarization
    method: POST
- name: translation_evaluator
  endpoint:
    path: /v2/evaluators/translation
    method: POST
- name: invoke_custom_evaluator
  endpoint:
    path: /v2/evaluators/{id}/invoke
    method: POST
- name: context_recall_evaluator
  endpoint:
    path: /v2/evaluators/ragas_context_recall
    method: POST
- name: coherence_evaluator
  endpoint:
    path: /v2/evaluators/ragas_coherence
    method: POST
- name: Run Context Entities Recall Evaluator
  endpoint:
    path: /v2/evaluators/ragas_context_entities_recall
    method: POST
- name: conciseness_evaluator
  endpoint:
    path: /v2/evaluators/ragas_conciseness
    method: POST
- name: Run Noise Sensitivity Evaluator
  endpoint:
    path: /v2/evaluators/ragas_noise_sensitivity
    method: POST
- name: Run Context Precision Evaluator
  endpoint:
    path: /v2/evaluators/ragas_context_precision
    method: POST
- name: ragas_noise_sensitivity
  endpoint:
    path: /evaluators/ragas_noise_sensitivity
    method: POST
- name: Run Correctness Evaluator
  endpoint:
    path: /v2/evaluators/ragas_correctness
    method: POST
- name: remote_config
  endpoint:
    path: /remoteconfigs
    method: POST
- name: faithfulness_evaluator
  endpoint:
    path: /v2/evaluators/ragas_faithfulness
    method: POST
- name: Run Harmfulness Evaluator
  endpoint:
    path: /v2/evaluators/ragas_harmfulness
    method: POST
- name: memory_stores
  endpoint:
    path: /v2/memory-stores
    method: GET
    data_selector: data
    params:
      limit: '10'
- name: maliciousness_evaluator
  endpoint:
    path: /v2/evaluators/ragas_maliciousness
    method: POST
- name: memory_store
  endpoint:
    path: /memory-stores
    method: GET
    data_selector: memoryStores
- name: Response Relevancy Evaluator
  endpoint:
    path: /v2/evaluators/ragas_response_relevancy
    method: POST
- name: Run Summarization Evaluator
  endpoint:
    path: /v2/evaluators/ragas_summarization
    method: POST
- name: memory_store
  endpoint:
    path: /v2/memory-stores/{memory_store_key}
    method: GET
    data_selector: object
- name: invoke_custom_evaluator
  endpoint:
    path: /v2/evaluators/{id}/invoke
    method: POST
- name: memory_store
  endpoint:
    path: /v2/memory-stores/{memory_store_key}
    method: PATCH
- name: Run Context Recall Evaluator
  endpoint:
    path: /v2/evaluators/ragas_context_recall
    method: POST
- name: memory_store
  endpoint:
    path: /v2/memory-stores/{memory_store_key}
    method: DELETE
- name: context_entities_recall
  endpoint:
    path: /v2/evaluators/ragas_context_entities_recall
    method: POST
- name: memories
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories
    method: GET
- name: noise_sensitivity_evaluator
  endpoint:
    path: /v2/evaluators/ragas_noise_sensitivity
    method: POST
    data_selector: value
    params: {}
- name: memory
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories
    method: POST
- name: memory
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}
    method: GET
- name: remote_config
  endpoint:
    path: /remoteconfigs
    method: POST
- name: memory
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}
    method: PATCH
- name: memory_store
  endpoint:
    path: /memory-stores
    method: GET
    data_selector: data
    params:
      limit: '10'
- name: delete_memory
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}
    method: DELETE
- name: documents
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}/documents
    method: GET
- name: memory_store
  endpoint:
    path: /memory-stores
    method: POST
- name: create_memory_document
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}/documents
    method: POST
- name: memory_store
  endpoint:
    path: /v2/memory-stores/{memory_store_key}
    method: GET
    data_selector: object
- name: retrieve_memory_document
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}/documents/{document_id}
    method: GET
    data_selector: details
- name: update_memory_document
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}/documents/{document_id}
    method: PATCH
- name: memory_store
  endpoint:
    path: /v2/memory-stores/{memory_store_key}
    method: PATCH
- name: delete_memory_document
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}/documents/{document_id}
    method: DELETE
- name: memory_store
  endpoint:
    path: /v2/memory-stores/{memory_store_key}
    method: DELETE
- name: tools
  endpoint:
    path: /v2/tools
    method: GET
    data_selector: results
- name: memories
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories
    method: GET
- name: tool
  endpoint:
    path: /v2/tools
    method: POST
- name: memory
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories
    method: POST
- name: update_tool
  endpoint:
    path: /v2/tools/{tool_key}
    method: PATCH
- name: memory
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}
    method: GET
- name: delete_tool
  endpoint:
    path: /v2/tools/{tool_key}
    method: DELETE
- name: memory
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}
    method: PATCH
- name: tool
  endpoint:
    path: /v2/tools/{tool_key}
    method: GET
- name: delete_memory
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}
    method: DELETE
    data_selector: ''
- name: duplicate_tool
  endpoint:
    path: /v2/tools/{key}/duplicate
    method: POST
- name: documents
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}/documents
    method: GET
- name: memory_document
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}/documents
    method: POST
- name: agents
  endpoint:
    path: /v2/agents/run
    method: POST
    data_selector: task
    params: {}
- name: memory_document
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}/documents/{document_id}
    method: GET
- name: agent_tasks
  endpoint:
    path: /v2/agents/<agent-key>/tasks/
    method: GET
    data_selector: history
- name: stream_agent
  endpoint:
    path: /v2/agents/stream-run
    method: POST
    data_selector: data
- name: update_memory_document
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}/documents/{document_id}
    method: PATCH
- name: embedding_files
  endpoint:
    path: /embedding/files
    method: POST
    data_selector: embeddedFiles
    params:
      mimeType: required
- name: delete_memory_document
  endpoint:
    path: /v2/memory-stores/{memory_store_key}/memories/{memory_id}/documents/{document_id}
    method: DELETE
- name: agents
  endpoint:
    path: /agents/run
    method: POST
    data_selector: ''
    params: {}
- name: tools
  endpoint:
    path: /v2/tools
    method: GET
- name: agents
  endpoint:
    path: /v2/agents/run
    method: POST
    data_selector: result
- name: tool
  endpoint:
    path: /v2/tools
    method: POST
- name: agents
  endpoint:
    path: /v2/agents/run
    method: POST
    data_selector: result
    params: {}
- name: update_tool
  endpoint:
    path: /v2/tools/{tool_key}
    method: PATCH
- name: delete_tool
  endpoint:
    path: /v2/tools/{tool_key}
    method: DELETE
- name: agents
  endpoint:
    path: /v2/agents
    method: POST
    data_selector: none
    params: {}
- name: run_agents
  endpoint:
    path: /v2/agents/run
    method: POST
    data_selector: none
    params: {}
- name: tool
  endpoint:
    path: /v2/tools/{tool_key}
    method: GET
- name: duplicate_tool
  endpoint:
    path: /v2/tools/{key}/duplicate
    method: POST
- name: current_date
  endpoint:
    path: /current_date
    method: GET
    data_selector: date
- name: google_search
  endpoint:
    path: /google_search
    method: GET
    data_selector: results
- name: web_scraper
  endpoint:
    path: /web_scraper
    method: GET
    data_selector: content
- name: agents
  endpoint:
    path: /agents/run
    method: POST
    data_selector: data
    params: {}
- name: agents_run
  endpoint:
    path: /v2/agents/run
    method: POST
    data_selector: task
    params: {}
- name: agents
  endpoint:
    path: /agents/run
    method: POST
    data_selector: ''
    params: {}
- name: agent_tasks
  endpoint:
    path: /v2/agents/<agent-key>/tasks/
    method: GET
    data_selector: tasks
    params: {}
- name: stream_agent
  endpoint:
    path: /v2/agents/stream-run
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: embedding_files
  endpoint:
    path: /docs/file-support-for-agents
    method: GET
    data_selector: records
- name: chat_completion
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: agents
  endpoint:
    path: /agents/run
    method: POST
    data_selector: result
- name: agents_run
  endpoint:
    path: /v2/agents/run
    method: POST
    data_selector: results
    params: {}
- name: agents
  endpoint:
    path: /v2/agents/run
    method: POST
    data_selector: result
- name: cache
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: orq.cache
    params:
      type: exact_match
      ttl: 3600
- name: agents
  endpoint:
    path: /v2/agents
    method: POST
    data_selector: ''
    params: {}
- name: run_agents
  endpoint:
    path: /v2/agents/run
    method: POST
    data_selector: ''
    params: {}
- name: contact
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: orq.contact
    params: {}
- name: current_date
  endpoint:
    path: /tools/current_date
    method: GET
- name: google_search
  endpoint:
    path: /tools/google_search
    method: GET
- name: web_scraper
  endpoint:
    path: /tools/web_scraper
    method: GET
- name: fallbacks
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: orq.fallbacks
- name: agents
  endpoint:
    path: /agents/run
    method: POST
    data_selector: result
- name: agents
  endpoint:
    path: /agents/run
    method: POST
    data_selector: result
    params: {}
- name: chat_completions
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: tracking
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: orq.tracking
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: response
    params: {}
- name: contact
  endpoint:
    path: /contact
    method: POST
    data_selector: orq.contact
- name: load_balancer
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: orq.load_balancer
- name: fallbacks
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: orq.fallbacks
- name: models
  endpoint:
    path: /models
    method: GET
- name: model_details
  endpoint:
    path: /models/{model}
    method: GET
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
- name: text_completions
  endpoint:
    path: /completions
    method: POST
- name: vector_embeddings
  endpoint:
    path: /embeddings
    method: POST
- name: image_generation
  endpoint:
    path: /images/generations
    method: POST
- name: image_editing
  endpoint:
    path: /images/edits
    method: POST
- name: image_variations
  endpoint:
    path: /images/variations
    method: POST
- name: text_moderation
  endpoint:
    path: /moderations
    method: POST
- name: rerank_results
  endpoint:
    path: /rerank
    method: POST
- name: text_to_speech
  endpoint:
    path: /speech
    method: POST
- name: audio_transcriptions
  endpoint:
    path: /audio/transcriptions
    method: POST
- name: audio_translations
  endpoint:
    path: /audio/translations
    method: POST
- name: model_responses
  endpoint:
    path: /responses
    method: POST
- name: pdf_input
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completions
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: response.choices
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: completions
  endpoint:
    path: /completions
    method: POST
    data_selector: choices
    params: {}
- name: embeddings
  endpoint:
    path: /embeddings
    method: POST
    data_selector: data
    params: {}
- name: load_balancer
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: orq.load_balancer
    params: {}
- name: image_generation
  endpoint:
    path: /images/generations
    method: POST
    data_selector: data
    params: {}
- name: moderations
  endpoint:
    path: /moderations
    method: POST
    data_selector: results
    params: {}
- name: rerank
  endpoint:
    path: /rerank
    method: POST
    data_selector: data
    params: {}
- name: audio_transcriptions
  endpoint:
    path: /audio/transcriptions
    method: POST
    data_selector: text
    params: {}
- name: audio_speech
  endpoint:
    path: /audio/speech
    method: POST
    data_selector: data
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: models
  endpoint:
    path: /models
    method: GET
- name: model_details
  endpoint:
    path: /models/{model}
    method: GET
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
- name: text_completions
  endpoint:
    path: /completions
    method: POST
- name: vector_embeddings
  endpoint:
    path: /embeddings
    method: POST
- name: image_generation
  endpoint:
    path: /images/generations
    method: POST
- name: image_editing
  endpoint:
    path: /images/edits
    method: POST
- name: image_variations
  endpoint:
    path: /images/variations
    method: POST
- name: text_moderation
  endpoint:
    path: /moderations
    method: POST
- name: rerank_results
  endpoint:
    path: /rerank
    method: POST
- name: text_to_speech
  endpoint:
    path: /speech
    method: POST
- name: audio_transcriptions
  endpoint:
    path: /audio/transcriptions
    method: POST
- name: audio_translations
  endpoint:
    path: /audio/translations
    method: POST
- name: create_model_response
  endpoint:
    path: /responses
    method: POST
- name: thread
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: orq.thread
    params: {}
- name: pdf_input
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completions
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: tool
  endpoint:
    path: /proxy/chat/completions
    method: POST
    data_selector: choices[0].message
    params: {}
- name: tool_call
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: query_database
  endpoint:
    path: /query_database
    method: POST
    data_selector: results
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: completions
  endpoint:
    path: /completions
    method: POST
    data_selector: choices
    params: {}
- name: embeddings
  endpoint:
    path: /embeddings
    method: POST
    data_selector: data
    params: {}
- name: chat_completions
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: image_generation
  endpoint:
    path: /images/generations
    method: POST
    data_selector: data
    params: {}
- name: moderations
  endpoint:
    path: /moderations
    method: POST
    data_selector: results
    params: {}
- name: rerank
  endpoint:
    path: /rerank
    method: POST
    data_selector: data
    params: {}
- name: audio_transcriptions
  endpoint:
    path: /audio/transcriptions
    method: POST
    data_selector: text
    params: {}
- name: audio_speech
  endpoint:
    path: /audio/speech
    method: POST
    data_selector: stream
    params: {}
- name: chat_completions
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: choices
- name: structured_outputs
  endpoint:
    path: /proxy/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: thread_management
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: api_response
  endpoint:
    path: /beta/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: get_weather
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: choices[0].message
    params: {}
- name: chat_completions
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: query_database
  endpoint:
    method: POST
    data_selector: results
- name: get_weather
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: choices[0].message.tool_calls
    params: {}
- name: image_analysis
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: query_database
  endpoint:
    method: POST
    data_selector: results
    params:
      query: SQL query to execute
      limit: Maximum number of results
- name: Contact
  endpoint:
    path: /docs/creating-a-contact
    method: GET
- name: contacts
  endpoint:
    path: /v2/contacts
    method: POST
    data_selector: contact
    params: {}
- name: chat_completions
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: contact_metrics
  endpoint:
    path: /v2/deployments/invoke
    method: POST
    data_selector: data
    params: {}
- name: prompts
  endpoint:
    path: /v2/proxy/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: curated_dataset
  endpoint:
    path: /creating-curated-dataset
    method: GET
    data_selector: datasets
    params: {}
- name: experiment
  endpoint:
    path: /creating-an-experiment
    method: GET
    data_selector: experiments
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: datasets
  endpoint:
    path: /v2/datasets
    method: POST
    data_selector: null
    params: {}
- name: datapoints
  endpoint:
    path: /v2/datasets/DATASET_ID/datapoints
    method: POST
    data_selector: null
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params:
      limit: 10
- name: retrieve_dataset
  endpoint:
    path: /datasets/DATASET_ID
    method: GET
    data_selector: dataset
    params: {}
- name: Contact
  endpoint:
    path: /docs/contact
    method: GET
- name: Dashboard
  endpoint:
    path: /docs/dashboards-and-analytics
    method: GET
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: contacts
  endpoint:
    path: /v2/contacts
    method: POST
    data_selector: null
    params: {}
- name: contact_metrics
  endpoint:
    path: /v2/deployments/invoke
    method: POST
    data_selector: data
    params: {}
- name: invoke
  endpoint:
    path: /v2/deployments/invoke
    method: POST
    data_selector: retrievals
- name: dataset
  endpoint:
    path: /datasets
    method: POST
    data_selector: data
    params: {}
- name: experiment
  endpoint:
    path: /experiments
    method: POST
    data_selector: data
    params: {}
- name: attach_file
  endpoint:
    path: /v2/files
    method: POST
    data_selector: _id
    params:
      purpose: retrieval
- name: invoke_deployment
  endpoint:
    path: /v2/deployments/invoke
    method: POST
    data_selector: choices[0].message.content
    params:
      key: deployment_key
- name: curated_dataset
  endpoint:
    path: /datasets/curated
    method: POST
    data_selector: datasets
    params: {}
- name: deployments_invoke
  endpoint:
    path: /v2/deployments/invoke
    method: POST
    data_selector: choices[0].message.content
- name: datasets
  endpoint:
    path: /v2/datasets
    method: POST
    data_selector: datasets
- name: datapoints
  endpoint:
    path: /v2/datasets/DATASET_ID/datapoints
    method: POST
    data_selector: datapoints
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params:
      limit: 10
- name: fetch_dataset
  endpoint:
    path: /datasets/DATASET_ID
    method: GET
    data_selector: dataset
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: evaluators
  endpoint:
    path: /v2/evaluators
    method: POST
    data_selector: data
    params: {}
- name: Evaluators
  endpoint:
    path: /docs/evaluator
    method: GET
- name: Guardrails
  endpoint:
    path: /docs/evaluator
    method: GET
- name: evaluators
  endpoint:
    path: /v2/evaluators
    method: GET
    data_selector: data
- name: Evaluators
  endpoint:
    path: /docs/evaluator
    method: GET
    data_selector: evaluators
    params: {}
- name: Projects
  endpoint:
    path: /docs/projects
    method: GET
    data_selector: projects
    params: {}
- name: Function Evaluators
  endpoint:
    path: /docs/hub
    method: GET
- name: files
  endpoint:
    path: /v2/files
    method: POST
    data_selector: _id
    params:
      purpose: retrieval
- name: deployments_invoke
  endpoint:
    path: /v2/deployments/invoke
    method: POST
    data_selector: choices[0].message.content
    params: {}
- name: http_evaluator
  endpoint:
    path: /http/evaluators
    method: POST
    data_selector: response
    params: {}
- name: JSON Schema
  endpoint:
    path: /docs/json-evaluator
    method: POST
    data_selector: properties
    params:
      required:
      - title
      - length
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Age-Appropriate
  endpoint:
    path: /llm/evaluator/age-appropriate
    method: POST
    data_selector: evaluation
- name: Bot detection
  endpoint:
    path: /llm/evaluator/bot-detection
    method: POST
    data_selector: evaluation
- name: Fact checking knowledge base
  endpoint:
    path: /llm/evaluator/fact-checking
    method: POST
    data_selector: evaluation
- name: Grammar
  endpoint:
    path: /llm/evaluator/grammar
    method: POST
    data_selector: evaluation
- name: Localization
  endpoint:
    path: /llm/evaluator/localization
    method: POST
    data_selector: evaluation
- name: PII
  endpoint:
    path: /llm/evaluator/pii
    method: POST
    data_selector: evaluation
- name: Sentiment classification
  endpoint:
    path: /llm/evaluator/sentiment-classification
    method: POST
    data_selector: evaluation
- name: Summarization
  endpoint:
    path: /llm/evaluator/summarization
    method: POST
    data_selector: evaluation
- name: Tone of voice
  endpoint:
    path: /llm/evaluator/tone-of-voice
    method: POST
    data_selector: evaluation
- name: Translation
  endpoint:
    path: /llm/evaluator/translation
    method: POST
    data_selector: evaluation
- name: evaluators
  endpoint:
    path: /v2/evaluators
    method: POST
    data_selector: data
    params: {}
- name: evaluators
  endpoint:
    path: /evaluators
    method: GET
    data_selector: data
- name: Ragas Coherence
  endpoint:
    path: /docs/evaluator/coherence
    method: GET
    data_selector: records
    params: {}
- name: Ragas Conciseness
  endpoint:
    path: /docs/evaluator/conciseness
    method: GET
    data_selector: records
    params: {}
- name: Ragas Context Entities Recall
  endpoint:
    path: /docs/evaluator/context-entities-recall
    method: GET
    data_selector: records
    params: {}
- name: Ragas Context Precision
  endpoint:
    path: /docs/evaluator/context-precision
    method: GET
    data_selector: records
    params: {}
- name: Ragas Context Recall
  endpoint:
    path: /docs/evaluator/context-recall
    method: GET
    data_selector: records
    params: {}
- name: Ragas Correctness
  endpoint:
    path: /docs/evaluator/correctness
    method: GET
    data_selector: records
    params: {}
- name: Ragas Faithfulness
  endpoint:
    path: /docs/evaluator/faithfulness
    method: GET
    data_selector: records
    params: {}
- name: Ragas Harmfulness
  endpoint:
    path: /docs/evaluator/harmfulness
    method: GET
    data_selector: records
    params: {}
- name: Ragas Maliciousness
  endpoint:
    path: /docs/evaluator/maliciousness
    method: GET
    data_selector: records
    params: {}
- name: Ragas Noise Sensitivity
  endpoint:
    path: /docs/evaluator/noise-sensitivity
    method: GET
    data_selector: records
    params: {}
- name: Ragas Response Relevancy
  endpoint:
    path: /docs/evaluator/response-relevancy
    method: GET
    data_selector: records
    params: {}
- name: Ragas Summarization
  endpoint:
    path: /docs/evaluator/summarization
    method: GET
    data_selector: records
    params: {}
- name: BERT score
  endpoint:
    path: /function/evaluators/bert_score
    method: GET
    data_selector: records
- name: BLEU Score
  endpoint:
    path: /function/evaluators/bleu_score
    method: GET
    data_selector: records
- name: Contains
  endpoint:
    path: /function/evaluators/contains
    method: GET
    data_selector: records
- name: Contains all
  endpoint:
    path: /function/evaluators/contains_all
    method: GET
    data_selector: records
- name: Contains any
  endpoint:
    path: /function/evaluators/contains_any
    method: GET
    data_selector: records
- name: Contains Email
  endpoint:
    path: /function/evaluators/contains_email
    method: GET
    data_selector: records
- name: Contains None
  endpoint:
    path: /function/evaluators/contains_none
    method: GET
    data_selector: records
- name: Contains Valid link
  endpoint:
    path: /function/evaluators/contains_valid_link
    method: GET
    data_selector: records
- name: Cosine Similarity
  endpoint:
    path: /function/evaluators/cosine_similarity
    method: GET
    data_selector: records
- name: Ends with
  endpoint:
    path: /function/evaluators/ends_with
    method: GET
    data_selector: records
- name: Exact match
  endpoint:
    path: /function/evaluators/exact_match
    method: GET
    data_selector: records
- name: Length Between
  endpoint:
    path: /function/evaluators/length_between
    method: GET
    data_selector: records
- name: Length Greater Than
  endpoint:
    path: /function/evaluators/length_greater_than
    method: GET
    data_selector: records
- name: Length Less Than
  endpoint:
    path: /function/evaluators/length_less_than
    method: GET
    data_selector: records
- name: Levenshtein Distance
  endpoint:
    path: /function/evaluators/levenshtein_distance
    method: GET
    data_selector: records
- name: Meteor score
  endpoint:
    path: /function/evaluators/meteor_score
    method: GET
    data_selector: records
- name: OpenAI Moderations API
  endpoint:
    path: /function/evaluators/openai_moderations_api
    method: GET
    data_selector: records
- name: Rouge N
  endpoint:
    path: /function/evaluators/rouge_n
    method: GET
    data_selector: records
- name: Valid JSON
  endpoint:
    path: /function/evaluators/valid_json
    method: GET
    data_selector: records
- name: tone_of_voice
  endpoint:
    path: /v2/evaluators/tone_of_voice
    method: POST
    data_selector: value
- name: experiment
  endpoint:
    path: /docs/experiment
    method: GET
    data_selector: entries
- name: experiment
  endpoint:
    path: /docs/experiment
    method: GET
    data_selector: results
    params: {}
- name: evaluator
  endpoint:
    path: /docs/evaluator
    method: GET
    data_selector: results
    params: {}
- name: Age-Appropriate
  endpoint:
    path: /api/age-appropriate
    method: POST
    data_selector: evaluation
- name: Bot Detection
  endpoint:
    path: /api/bot-detection
    method: POST
    data_selector: evaluation
- name: Fact checking knowledge base
  endpoint:
    path: /api/fact-checking
    method: POST
    data_selector: evaluation
- name: Grammar
  endpoint:
    path: /api/grammar
    method: POST
    data_selector: evaluation
- name: Localization
  endpoint:
    path: /api/localization
    method: POST
    data_selector: evaluation
- name: PII
  endpoint:
    path: /api/pii
    method: POST
    data_selector: evaluation
- name: Sentiment classification
  endpoint:
    path: /api/sentiment
    method: POST
    data_selector: evaluation
- name: Summarization
  endpoint:
    path: /api/summarization
    method: POST
    data_selector: evaluation
- name: Tone of voice
  endpoint:
    path: /api/tone-of-voice
    method: POST
    data_selector: evaluation
- name: Translation
  endpoint:
    path: /api/translation
    method: POST
    data_selector: evaluation
- name: LLM Evaluator
  endpoint:
    path: /docs/llm-evaluator
    method: GET
    data_selector: records
- name: Evaluator API
  endpoint:
    path: /docs/using-evaluators-via-the-api
    method: GET
    data_selector: records
- name: rating
  endpoint:
    path: /feedback/rating
    method: GET
    data_selector: ratings
    params: {}
- name: defects
  endpoint:
    path: /feedback/defects
    method: GET
    data_selector: defects
    params: {}
- name: interactions
  endpoint:
    path: /feedback/interactions
    method: GET
    data_selector: interactions
    params: {}
- name: custom_feedback
  endpoint:
    path: /feedback/custom
    method: GET
    data_selector: customFeedback
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result
    params: {}
- name: search_knowledge_base
  endpoint:
    path: /v2/knowledge/{knowledge_id}/search
    method: POST
    data_selector: matches
- name: Ragas Coherence
  endpoint:
    path: /docs/using-evaluators-via-the-api
    method: GET
    data_selector: parameters
    params:
      query: query
      output: output
      model: model
      reference: reference
- name: Ragas Conciseness
  endpoint:
    path: /docs/using-evaluators-via-the-api
    method: GET
    data_selector: parameters
    params:
      query: query
      output: output
      model: model
      reference: reference
- name: Ragas Context Entities Recall
  endpoint:
    path: /docs/using-evaluators-via-the-api
    method: GET
    data_selector: parameters
    params:
      query: query
      output: output
      model: model
      reference: reference
      retrievals: retrievals
- name: Ragas Context Precision
  endpoint:
    path: /docs/using-evaluators-via-the-api
    method: GET
    data_selector: parameters
    params:
      query: query
      output: output
      model: model
      reference: reference
      retrievals: retrievals
- name: Ragas Context Recall
  endpoint:
    path: /docs/using-evaluators-via-the-api
    method: GET
    data_selector: parameters
    params:
      model: model
      reference: reference
      query: query
      output: output
      retrievals: retrievals
- name: Ragas Correctness
  endpoint:
    path: /docs/using-evaluators-via-the-api
    method: GET
    data_selector: parameters
    params:
      query: query
      output: output
      model: model
      reference: reference
- name: Ragas Faithfulness
  endpoint:
    path: /docs/using-evaluators-via-the-api
    method: GET
    data_selector: parameters
    params:
      query: query
      output: output
      model: model
      retrievals: retrievals
- name: Ragas Harmfulness
  endpoint:
    path: /docs/using-evaluators-via-the-api
    method: GET
    data_selector: parameters
    params:
      query: query
      output: output
      model: model
      retrievals: retrievals
- name: Ragas Maliciousness
  endpoint:
    path: /docs/using-evaluators-via-the-api
    method: GET
    data_selector: parameters
    params:
      query: query
      output: output
      model: model
      retrievals: retrievals
- name: Ragas Noise Sensitivity
  endpoint:
    path: /docs/using-evaluators-via-the-api
    method: GET
    data_selector: parameters
    params:
      query: query
      output: output
      model: model
      retrievals: retrievals
- name: Ragas Response Relevancy
  endpoint:
    path: /docs/using-evaluators-via-the-api
    method: GET
    data_selector: parameters
    params:
      query: query
      output: output
      model: model
      retrievals: retrievals
- name: Ragas Summarization
  endpoint:
    path: /docs/using-evaluators-via-the-api
    method: GET
    data_selector: parameters
    params:
      query: query
      output: output
      model: model
      reference: reference
      retrievals: retrievals
- name: tone_of_voice
  endpoint:
    path: /v2/evaluators/tone_of_voice
    method: POST
    data_selector: value
- name: list_models
  endpoint:
    path: /v2/models
    method: GET
    data_selector: data
- name: experiment
  endpoint:
    path: /docs/experiment
    method: GET
    data_selector: entries
    params: {}
- name: dataset
  endpoint:
    path: /docs/datasets
    method: GET
    data_selector: entries
    params: {}
- name: evaluator
  endpoint:
    path: /docs/evaluator
    method: GET
    data_selector: entries
    params: {}
- name: experiment
  endpoint:
    path: /docs/experiment
    method: GET
    data_selector: results
- name: evaluator
  endpoint:
    path: /docs/evaluator
    method: GET
    data_selector: results
- name: feedback_generation
  endpoint:
    path: /docs/adding-feedback-to-generations
    method: GET
    data_selector: feedbacks
    params: {}
- name: corrections
  endpoint:
    path: /docs/making-corrections
    method: GET
    data_selector: corrections
    params: {}
- name: feedback_types
  endpoint:
    path: /docs/feedback-types
    method: GET
    data_selector: types
    params: {}
- name: Rating
  endpoint:
    path: /docs/feedback/rating
    method: GET
    data_selector: values
    params: {}
- name: Defects
  endpoint:
    path: /docs/feedback/defects
    method: GET
    data_selector: values
    params: {}
- name: Interactions
  endpoint:
    path: /docs/feedback/interactions
    method: GET
    data_selector: values
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: response
    params: {}
- name: knowledge_base
  endpoint:
    path: /knowledge-base
    method: POST
    data_selector: data
    params: {}
- name: Vector Search
  endpoint:
    path: /vector_search
    method: GET
- name: Keyword Search
  endpoint:
    path: /keyword_search
    method: GET
- name: Hybrid Search
  endpoint:
    path: /hybrid_search
    method: GET
- name: Search Parameters
  endpoint:
    path: /search_parameters
    method: GET
- name: Reranking
  endpoint:
    path: /reranking
    method: GET
- name: invoke_deployment
  endpoint:
    path: /v2/deployments/invoke
    method: POST
    data_selector: generation
    params: {}
- name: knowledge_base_search
  endpoint:
    path: /v2/knowledge/KNOWLEDGE_BASE_ID/search
    method: POST
    data_selector: matches
- name: traces
  endpoint:
    path: /traces
    method: GET
    data_selector: events
- name: Model Deployment
  endpoint:
    path: /api/deployments
    method: GET
- name: Service Account
  endpoint:
    path: /path/to/service/account
    method: POST
    data_selector: service_account
    params: {}
- name: Project ID
  endpoint:
    path: /path/to/project/id
    method: GET
    data_selector: project_id
    params: {}
- name: list_models
  endpoint:
    path: /v2/models
    method: GET
    data_selector: data
- name: deployments_invoke
  endpoint:
    path: /v2/deployments/invoke
    method: POST
    data_selector: messages
- name: Logs
  endpoint:
    path: /docs/logs
    method: GET
- name: Traces
  endpoint:
    path: /docs/traces
    method: GET
- name: Threads
  endpoint:
    path: /docs/threads
    method: GET
- name: Observability Frameworks
  endpoint:
    path: /docs/observability-frameworks
    method: GET
- name: prompts
  endpoint:
    path: /v2/prompts
    method: POST
    data_selector: ''
    params: {}
- name: fetch_prompt
  endpoint:
    path: /v2/prompts/PROMPT_ID
    method: GET
    data_selector: ''
    params: {}
- name: Tools
  endpoint:
    path: /docs/creating-a-tool
    method: GET
- name: Webhook Events
  endpoint:
    path: /docs/webhook-events-copy
    method: GET
- name: Creating a Webhook
  endpoint:
    path: /docs/setting-up-a-webhook-copy
    method: GET
- name: Webhook Security & Validation
  endpoint:
    path: /docs/security-validation-copy
    method: GET
- name: Webhook Best Practices
  endpoint:
    path: /docs/best-practices-copy
    method: GET
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
    params: {}
- name: deployment_invocation
  endpoint:
    path: /webhook/deployment/invoke
    method: POST
    data_selector: data
- name: invoke
  endpoint:
    path: /v2/deployments/invoke
    method: POST
    data_selector: choices
    params: {}
- name: human_review
  endpoint:
    path: /workspace/settings/human_review
    method: GET
    data_selector: human_reviews
    params: {}
- name: human_review_sets
  endpoint:
    path: /workspace/settings/human_review/sets
    method: GET
    data_selector: human_review_sets
    params: {}
- name: Temperature
  endpoint:
    path: /docs/prompt#temperature
    method: GET
    data_selector: parameters
    params: {}
- name: Max Tokens
  endpoint:
    path: /docs/prompt#max-tokens
    method: GET
    data_selector: parameters
    params: {}
- name: Top K
  endpoint:
    path: /docs/prompt#top-k
    method: GET
    data_selector: parameters
    params: {}
- name: Top P
  endpoint:
    path: /docs/prompt#top-p
    method: GET
    data_selector: parameters
    params: {}
- name: Frequence Penalty
  endpoint:
    path: /docs/prompt#frequence-penalty
    method: GET
    data_selector: parameters
    params: {}
- name: Presence Penalty
  endpoint:
    path: /docs/prompt#presence-penalty
    method: GET
    data_selector: parameters
    params: {}
- name: deployment
  endpoint:
    path: /deployments
    method: POST
    data_selector: deployment
    params: {}
- name: Knowledge Base
  endpoint:
    path: /knowledge_base
    method: POST
- name: Deployment
  endpoint:
    path: /deployments
    method: POST
- name: advancedITAssistant
  endpoint:
    path: /deployments/advancedITAssistant
    method: POST
    data_selector: response
    params: {}
- name: image_generation
  endpoint:
    path: /deployments/invoke
    method: POST
    data_selector: messages
- name: ingestionAgent
  endpoint:
    path: /agents/ingestion
    method: POST
- name: qualificationAgent
  endpoint:
    path: /agents/qualification
    method: POST
- name: prompts
  endpoint:
    path: /v2/prompts
    method: POST
    data_selector: null
    params: {}
- name: fetch_prompt
  endpoint:
    path: /v2/prompts/PROMPT_ID
    method: GET
    data_selector: null
    params: {}
- name: insertionAgent
  endpoint:
    path: /deployments/insertionAgent
    method: POST
    data_selector: insertion_result
    params: {}
- name: crminsert
  endpoint:
    path: /tools/crminsert
    method: POST
    data_selector: data
    params: {}
- name: final_insertion_payload
  endpoint:
    path: /crm/insertion
    method: POST
    data_selector: payload
    params: {}
- name: webhook
  endpoint:
    path: /docs/setting-up-a-webhook-copy
    method: POST
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
    params: {}
- name: deployment_invocation
  endpoint:
    path: /webhook/events/deployment/invoked
    method: POST
    data_selector: data
- name: contact
  endpoint:
    path: /contact
    method: POST
    data_selector: data
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: data
    params: {}
- name: SQL Query Generation
  endpoint:
    path: /api/v1/sql/generate
    method: POST
    data_selector: output
    params: {}
- name: files
  endpoint:
    path: /v2/files
    method: POST
    data_selector: responses_json
- name: FAQ Bot
  endpoint:
    path: /v2/deployments/invoke
    method: POST
    data_selector: inputs
    params: {}
- name: human_review
  endpoint:
    path: /workspace/settings/human_review
    method: GET
    data_selector: human_reviews
    params: {}
- name: human_review_sets
  endpoint:
    path: /workspace/settings/human_review/sets
    method: GET
    data_selector: review_sets
    params: {}
- name: dataextraction_receipts
  endpoint:
    path: /deployments/DataExtraction_Receipts
    method: POST
    data_selector: content
- name: intent_classification
  endpoint:
    path: /api/v1/intent_classification
    method: POST
    data_selector: output
- name: chatbot
  endpoint:
    path: /chatbot
    method: POST
    data_selector: response
    params: {}
- name: knowledge_base
  endpoint:
    path: /api/knowledge_base
    method: POST
    data_selector: data
- name: deployment
  endpoint:
    path: /api/deployment
    method: POST
    data_selector: data
- name: feedback
  endpoint:
    path: /docs/capturing-feedback-with-orq
    method: GET
    data_selector: logs
    params: {}
- name: Knowledge Base
  endpoint:
    path: /knowledge_base
    method: POST
    data_selector: data
- name: Deployment
  endpoint:
    path: /deployments
    method: POST
    data_selector: data
- name: records
  endpoint:
    path: /upsert
    method: POST
    data_selector: records
- name: index_stats
  endpoint:
    path: /describe_index_stats
    method: GET
    data_selector: stats
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: ingestionAgent
  endpoint:
    path: /deployments/ingestionAgent
    method: POST
    data_selector: data
    params: {}
- name: qualificationAgent
  endpoint:
    path: /deployments/qualificationAgent
    method: POST
    data_selector: data
    params: {}
- name: get_config
  endpoint:
    path: /deployments/get_config
    method: POST
    data_selector: config
    params:
      key: Deployment-configuration
      context:
        environments:
        - production
        locale:
        - en
      inputs:
        country: Netherlands
      metadata:
        custom-field-name: custom-metadata-value
- name: deployment
  endpoint:
    path: /deployments/invoke
    method: POST
    data_selector: choices
    params: {}
- name: ingestionAgent
  endpoint:
    path: /api/agents/ingestion
    method: POST
- name: qualificationAgent
  endpoint:
    path: /api/agents/qualification
    method: POST
- name: insertionAgent
  endpoint:
    path: /api/agents/insertion
    method: POST
- name: Deployment
  endpoint:
    path: /deployments
    method: POST
- name: prospects
  endpoint:
    path: /api/prospects
    method: POST
    data_selector: payload
    params: {}
- name: knowledge_bases
  endpoint:
    path: /knowledge
    method: GET
    data_selector: knowledgeBases
- name: files
  endpoint:
    path: /v2/files
    method: POST
    data_selector: responses
    params: {}
- name: data_extraction
  endpoint:
    path: /deployments/invoke
    method: POST
    data_selector: generation.choices[0].message.content
    params: {}
- name: FAQ Bot
  endpoint:
    path: /v2/deployments/invoke
    method: POST
    data_selector: ''
    params: {}
- name: upsert_records
  endpoint:
    path: /guides/data/upsert-data
    method: POST
    data_selector: records
- name: describe_index_stats
  endpoint:
    path: /guides/data/check-data-freshness
    method: GET
    data_selector: stats
- name: search
  endpoint:
    path: /guides/data/query-data
    method: POST
    data_selector: results
- name: get_config
  endpoint:
    path: /deployments/get_config
    method: GET
    data_selector: config
    params:
      key: Deployment-configuration
      context:
        environments:
        - production
        locale:
        - en
      inputs:
        country: Netherlands
      metadata:
        custom-field-name: custom-metadata-value
- name: deployment
  endpoint:
    path: /deployments/invoke
    method: POST
    data_selector: choices
    params: {}
- name: LLM Inference API
  endpoint:
    path: /llm/inference
    method: POST
    data_selector: predictions
- name: knowledge_bases
  endpoint:
    path: /v2/knowledge
    method: GET
notes:
- The maximum file size is 10MB.
- All API requests must be made over HTTPS. Calls made over plain HTTP will fail.
- API requests without authentication will also fail.
- Credentials required are Bearer token or JWT
- 'Credentials: Bearer JWT'
- Retrieves a paginated list of contacts in your workspace. Use pagination parameters
  to navigate through large contact lists efficiently.
- Permanently deletes a contact from your workspace and cleans up associated budget
  configurations. This action cannot be undone.
- Creates a new dataset in the specified project.
- Retrieves a paginated list of datapoints from a specific dataset.
- Delete all datapoints from a dataset. This action is irreversible.
- Stream deployment generation. Only supported for completions and chat completions.
- Submit feedback for the LLM transaction via the API
- Credentials are required to access the API
- Returns a list of the files that your account has access to. orq.ai sorts and returns
  the files by their creation dates, placing the most recently created files at the
  top.
- Requires setup of connected app in orq.ai
- Credentials are passed as Bearer tokens
- All configuration changes made in the API will override the settings in the UI.
- Note that all configuration changes made in the API will override the settings in
  the UI.
- Uses Bearer token for authentication.
- 'Credentials required: Bearer JWT'
- Uses Bearer token for authentication
- Log in to use your API keys
- Bearer token required for authentication
- Bearer token authentication is required to access the API.
- 'Credentials: Bearer, JWT'
- Bearer authentication requires a JWT.
- Retrieves a paginated list of memory stores in the workspace. Use cursor-based pagination
  parameters to navigate through the results.
- Requires setup of API keys
- Retrieves a paginated list of memories for the memory store
- Update the memory store configuration
- Permanently delete a memory store, including memories and documents.
- Updates a tool in the workspace.
- The Agents API provides endpoints for creating, executing, and managing AI agents.
- To use the Agents API, make sure you have an API Key ready to use with the Orq.ai
  API.
- The agent key should be replaced with the actual agent key in the request path.
- Ensure to set ORQ_API_KEY in your environment variables for authentication.
- Agents should use `retrieve_knowledge_bases` to discover available knowledge bases
  before querying them.
- Agents must use the `retrieve_memory_stores` tool first to discover available memory
  stores before they can query or write to them.
- Agents can invoke sub-agents using a hierarchical agent system.
- Bearer token required
- Requires API key to be set in the environment variable ORQ_API_KEY.
- Uses API key for authentication
- Uses API key for authentication — ensure to set ORQ_API_KEY in environment variables
- Unified API for accessing multiple AI providers.
- Supports both single-turn and multi-turn interactions.
- Images can be embedded via URL or base64 encoding.
- PDFs are only supported via base64 encoding.
- 'Default behavior: If no name provided, system uses default identifier.'
- 'Names not appearing in dashboard: Check name follows alphanumeric + hyphens pattern.'
- For production workloads, it is highly recommended to use your own API keys and
  endpoints.
- Using shared API keys can lead to hitting different rate limits.
- 'Exact match only: Any parameter change creates new cache key'
- 'Case sensitive: ''Hello'' and ''hello'' are different cache keys'
- Uses API key for authentication — ensure to include in header.
- 'Contact ID Length: Maximum 255 characters'
- 'Metadata Size: Recommended maximum 20 fields'
- 'Tag Count: Maximum 10 tags per contact'
- 'Email Validation: Basic format validation only'
- 'Data Persistence: Contact data not stored permanently'
- Use a maximum of 3 Fallback models for performance.
- Order fallbacks by preference/cost.
- Use models with similar capabilities.
- Include fast backup option.
- API key is required for authentication.
- To start using DSPy with Orq, you need an API Key ready within your Orq.ai account.
- To setup your API key, see API keys & Endpoints.
- Unified API for multiple AI providers.
- To start using Langchain with Orq, you need an API Key ready within your Orq.ai
  account.
- Uses consistent patterns across team.
- Avoid timestamps or dynamic values.
- For production workloads, it is recommended to use your own API keys and endpoints.
- This API provides a unified API for accessing multiple AI providers.
- Cache identical requests to reduce latency by ~95% and save costs.
- 'Exact match only: Any parameter change creates new cache key.'
- 'Variable Naming: Use descriptive, snake_case variable names'
- 'Input Validation: Always validate inputs before sending requests'
- 'Template Testing: Test templates with sample data before production'
- 'Security: Sanitize user inputs to prevent injection attacks'
- 'Performance: Cache frequently used input combinations'
- 'Documentation: Document required inputs for each template'
- Uses API key for authorization
- 'Weights are normalized: higher weight means more traffic'
- Minimum weight is 0.1 (10%)
- HTTP status codes and error structures follow OpenAI’s conventions.
- Streaming, function/tool calls, and multimodal inputs (images/files) are supported
  on /chat/completions.
- Compress PDFs to reduce size (under 20MB recommended)
- Ensure text is selectable (not scanned images)
- Monitor reasoning token consumption
- Use lower reasoning effort for time-sensitive applications
- 'Response time: Reasoning adds significant latency to generation'
- 'Cost: Reasoning tokens are charged at higher rates'
- 'Model availability: Limited to specific reasoning-capable models'
- 'Token limits: Reasoning may hit context limits faster'
- 'Determinism: Reasoning output may vary between requests'
- 'Increased latency: Retries add delay (up to 31s for 5 attempts)'
- 'Cost implications: Failed requests may still incur charges'
- 'Rate limit consumption: Each retry counts against quotas'
- 'Limited retries: Maximum 5 attempts to prevent excessive delays'
- 'Non-retryable errors: 4xx client errors are not retried'
- Input variables are case-sensitive and must follow the specified format.
- Validation functions must ensure inputs meet specified format and constraints.
- Cache frequently used input combinations to optimize performance.
- Requires API key to access the endpoints
- 'Weights are normalized: [0.4, 0.8] → [33%, 67%]'
- Higher weight = more traffic
- 'Minimum weight: 0.1 (10%)'
- Requires sufficient requests for statistical accuracy
- All models support streaming — no additional configuration needed.
- Stream cuts off unexpectedly - Check network stability, Verify timeout settings,
  Monitor for rate limiting, Check model-specific limits
- Slow streaming performance - Optimize chunk processing, Reduce buffer flush frequency,
  Check network latency, Consider model selection
- Memory issues - Implement chunk size limits, Use streaming parsers, Clear processed
  chunks, Monitor memory usage
- The AI Gateway is versioned under /v2/proxy. Ensure clients target this path.
- Threads expire after 30 days of inactivity
- Maximum 100 characters for Thread ID
- 'Consistent Naming: Use predictable thread ID patterns'
- 'Meaningful Tags: Choose tags that aid in filtering and analysis'
- 'Session Management: Tie thread IDs to user sessions'
- 'Cleanup Strategy: Archive or delete old threads regularly'
- 'Error Handling: Validate thread configuration before requests'
- 'Timeout applies to: Request processing time, Model generation time, Network transfer
  time, All fallback attempts (each gets same timeout)'
- 'Fixed timeout: Same timeout applies to all requests'
- 'No granular control: Cannot set different timeouts for different operations'
- 'Fallback multiplication: Each fallback gets the same timeout duration'
- 'Provider variations: Different providers have different baseline response times'
- 'Streaming considerations: Streaming responses may need longer timeouts'
- Model decides when to use tools
- Generate structured JSON responses with guaranteed schema compliance.
- Ensure to set the ORQ_API_KEY environment variable for authentication.
- Schema complexity may lead to failures, consider breaking into smaller schemas.
- Not all models support schemas, use JSON mode as fallback.
- Deep nesting may cause issues, flatten structures when possible.
- Complex array items can be challenging, simplify item schemas.
- Schema validation adds latency, cache and optimize schemas.
- All models support streaming - no additional configuration needed.
- Stream cuts off unexpectedly
- Slow streaming performance
- Memory issues
- Use descriptive field names
- Add field descriptions for better results
- Mark essential fields as required
- Use appropriate data types and constraints
- Use UUID or timestamp-based IDs for uniqueness
- Timeout applies to request processing time, model generation time, network transfer
  time, and all fallback attempts.
- Prompts must be created in Orq.ai Studio before use
- Only 'latest' version currently supported
- Max image size for uploads is 20MB.
- Supports multiple image analysis and OCR.
- Model decides when to use tools.
- Use high-resolution images for detailed analysis
- Check file size (under 20MB) for image processing
- orq.ai collects and tracks key performance indicators like latency, token throughput,
  and error rates.
- The Dashboard helps you visualize this data in real time, enabling quick insights
  into your Workspace, its Deployments and model usage.
- Generates structured JSON responses with guaranteed schema compliance.
- To track Contact metrics effectively, you must create a Contact profile.
- Cache schemas for reuse
- Large schemas may fail, break into smaller schemas
- Not all models support schemas, use JSON mode as fallback
- Deep nesting may cause issues, flatten structures when possible
- Complex array items challenging, simplify item schemas
- Schema validation adds latency, cache and optimize schemas
- High detail recommended for OCR tasks.
- To get an API key ready, see Authentication.
- Ensure good lighting and contrast
- Avoid blurry or distorted images
- Compress large files to improve upload speed
- Contacts are API entities used to track metrics
- Use the API directly or the SDK for creating contacts.
- Guardrails will be executed synchronously if they exists while Evaluators will be
  non-blocking to ensure quickest response-time to the user.
- If an Evaluators has a Guardrail capability, it can be used as an Input Guardrail
  or Output Guardrail in a Deployment.
- Caching happens Deployment-wide and currently doesn't support image models.
- The cache only works when there is an exact match
- Flagging an Input as PII will remove its values being logged within our systems.
- When Output Masking is enabled, logs won't store the generated response.
- Datasets hold Messages, Inputs and Expected Outputs to test models at scale.
- You don’t need to include all three entities when uploading a dataset. Depending
  on your experiment, you can choose to include only inputs, messages, or expected
  outputs as needed.
- 'Minimum: 1 datapoint per request, Maximum: 5,000 datapoints per request.'
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Connect to your Deployment with a single line of code, make iterations without a
  code release, and benefit from reliable observability all the way throughout.
- An API key is needed to use within SDKs or HTTP API.
- The cache only works when there is an exact match.
- Use the optional field include_retrievals to embed the retrieval chunks within the
  response payload.
- This feature is only supported with OpenAI, Anthropic and Google Gemini Models
- Use the LLM Evaluator as a Guardrail for deployments.
- Python Evaluators enable users to write custom Python code to create tailored evaluations.
- 'The Python Evaluator runs in the following environment: python 3.11'
- 'The environment comes preloaded with the following libraries: numpy==1.26.4'
- Function Evaluators are rule-based tools designed to assess specific, measurable
  aspects of text, such as length, formatting, or keyword presence.
- They work like precise checklists—deterministic, reliable, and straightforward.
- HTTP Evaluators can be useful to implement business or industry-specific checks
  from within your applications.
- The Evaluator will be ignored during processing if it fails to return a valid response
  payload.
- Adding Evaluators to an Experiment allows for quantitative evaluation of the model-generated
  outputs.
- Evaluators can assess both newly generated outputs and existing responses already
  stored in your dataset.
- Depending on the Dataset size it may take a few minutes to run all model prompts
  generations.
- Once successful your Experiment Run Status will change to Completed.
- A JSON Schema lets you define which fields you want to find in the evaluated payload
- Once created the Evaluator will be available to use in Deployments
- Exports are available after an Experiment ran successfully.
- Python Evaluators enable users to write custom Python code to create tailored evaluations,
  offering maximum flexibility for assessing text or data.
- They shine in scenarios demanding tailored validation, complex data analysis, or
  integration with external systems.
- Multiple properties usable to create feedback include rating, defects, interactions,
  and correction.
- 'The Python Evaluator runs in the environment: python 3.11'
- The environment comes preloaded with numpy==1.26.4
- You can only create a Knowledge Base once you have activated an embedding model
  within your Model Garden.
- Search can include metadata filters to narrow results.
- Integrate any supported provider.
- Ragas Evaluators are specialized tools designed to evaluate the performance of retrieval-augmented
  generation (RAG) workflows.
- They focus on metrics like context relevance, faithfulness, recall, and robustness.
- orq.ai offers comprehensive Observability capabilities for monitoring your AI applications
  and deployments.
- Ensure you have an API Key ready to be used in place of <ORQ_API_KEY>
- You can export datasets and results in CSV, JSON and JSONL formats using the Export
  button.
- Verify your Traces in the orq.ai Studio.
- Feedbacks help improve model outputs by reviewing and qualifying results.
- Requires setup of API key in the environment
- An Orq.ai API Key is required (from your Orq.ai workspace).
- You will need an Orq.ai API Key (from your Orq.ai workspace).
- Requires Trace ID from Get Config or Invoke calls.
- Traces from your LlamaIndex execution will be visible within the Traces menu in
  your orq.ai studio.
- The Hub lets you browse and import Evaluators and Prompts from a wide library.
- Telemetry service name is 'mastra-app' and version is '1.0.0'.
- Requires setup of connected app in Orq.ai
- Use OpenAI API key for OpenAI interactions
- Requires setup of connected app in api
- Setting a too high threshold can yield to no result to a search.
- To use reranking within your Knowledge Base, you must enable at least one Reranking
  model within your Model Garden.
- The simplest way to enable telemetry is using the SDK's native support.
- Logs can contain a maximum of 16MB of data. This includes all text inputs, generations,
  retrievals and embedded images. Oversized logs are discarded from the Logs view.
- Automatically set chunk and preprocessing rules. Unfamiliar users are recommended
  to select this.
- Conversations will be grouped by Thread ID
- Tags can be used to filter and search Threads in the panel
- A search without metadata filters omits metadata and performs a search on the entire
  Knowledge Base.
- In the Playground, you can test all available models through our API key.
- Currently we only support the self service onboarding of private models through
  the providers above.
- Uses OAuth2 with refresh token — requires setup of connected app in orq.ai
- This comprehensive approach to prompt engineering will help you create robust, effective
  prompts that work consistently across different models and use cases.
- An API key is needed to use within SDKs or HTTP API
- API key is needed to use within SDKs or HTTP API.
- Prompt Snippets are saved text to be used within your prompts. This is useful for
  text that you want to appear within multiple prompts.
- Set up your environment variables to connect to Orq.ai's OpenTelemetry collector
- Function calling is a way for a model to output structured text automatically.
- Tools are only available to when Playground is configured with a model compatible
  with Function Calling.
- Uses API Key for authentication
- Orq.ai OpenTelemetry exporter requires API key from Orq.ai workspace.
- Your LlamaIndex code is automatically traced
- The previously set environment variables will be used.
- All Mastra Pipelines and agents call will be Instrumented and exported to Orq.ai
  through the OTLP exporter.
- Tool responses are valid JSON.
- This should be an endpoint on your server that can handle incoming webhook payloads.
- Store the secret token securely on your server to verify the authenticity of incoming
  webhook requests.
- Uses API key for authentication.
- 'Currently, Orq.ai supports only one webhook event: the invocation of a deployment.'
- Ensure the raw body of the request is used for verification. Avoid any transformations
  by your framework that might alter it.
- The signature is retrieved from the X-Orq-Signature header.
- Implement exception handling to manage invalid request bodies and signature verification
  failures.
- Always use HTTPS for your webhook URL to ensure data is transmitted securely.
- Validate incoming webhook payloads using the secret token to verify authenticity.
- Implement rate limiting on your webhook endpoint to handle high loads gracefully.
- Log webhook events and monitor for any unusual activity.
- Ensure your application correctly parses the JSON payload received.
- Webhook endpoints should acknowledge receipt of the webhook promptly. Aim to respond
  within a few seconds.
- Implement retry logic to handle webhook delivery failures gracefully.
- Use logs to debug issues with webhook deliveries.
- Regularly test your webhook endpoints to ensure they are working as expected.
- Keep an eye on the status of your webhooks in the Orq.ai dashboard for any failures.
- You can test all available models through our API key.
- API Keys are secure tokens used to authenticate your applications and services with
  the Orq.ai platform.
- Rate limiting are applied on the orq.ai API ensures fair and efficient use of the
  API.
- Members can be grouped within Teams
- Projects are where your orq.ai resources are living, models, prompts, Playground,
  Experiment and Deployment.
- No data that flows through orq.ai is ever used to train or fine-tune any models
  by orq.ai.
- Input variables can be flagged as Personally Identifiable Information (PII), which
  includes Personal Data.
- Active workspace in the Orq.ai Studio is required.
- Valid API key is needed from Workspace Settings > API Keys.
- Requires valid API key from Workspace Settings > API Keys
- Ensure you have a valid API key from Workspace Settings > API Keys.
- At least one text generation model must be enabled in the Model Garden.
- Ensure you have a valid API key for authentication.
- Only insert high-quality, validated prospect records. If data fails validation,
  report the issues rather than inserting incomplete records.
- Uses OAuth2 with refresh token — requires setup of connected app in Orq.ai
- Capture real-time user ratings on chatbot responses
- Log specific defects like grammatical errors, hallucinations, or ambiguity
- Webhook URL should be an endpoint on your server that can handle incoming webhook
  payloads.
- Secret token is used to sign the webhook payload to verify the authenticity of incoming
  requests.
- Ensure you have an Orq account to use the API.
- The API key must be included in the Authorization header.
- Integrate interaction tracking – Link front-end actions (copied, saved, deleted,
  shared) to feedback logging, allowing the bot to learn without requiring explicit
  user input.
- Create annotated datasets in Orq – Use feedback as a selection method to build curated
  datasets for evaluation. Run experiments to see if updates to prompts, models, parameters,
  or the knowledge base improve performance and response quality.
- By embedding feedback directly into user interactions, you create a frictionless
  improvement cycle, making your FAQ bot more adaptive and user-friendly.
- API key required for authentication.
- Ensure Base64 encoding of images before processing.
- The second deployment summarizes the extracted financial data, providing a high-level
  overview of expenses.
- Uses Claude 3.5 Haiku as primary model with Claude 3.7 Sonnet as fallback.
- Temperature set to 0.5, Top P to 0.7, and Top K to 5.
- Feedback in Orq.ai helps track response quality and identify areas for improvement.
- Uses Supabase Edge Function to securely store the API key.
- Orq.ai does not require Data Processing Agreements (DPAs) with model providers nor
  is Orq.ai a subprocessor for the model providers.
- Handle common inquiries about orders, products, returns, and company policies.
- Ensure you have an active workspace in the Orq.ai Studio.
- Valid API key is required from Workspace Settings > API Keys.
- Requires an active workspace in the Orq.ai Studio
- Valid API key is needed from Workspace Settings > API Keys
- Pinecone is eventually consistent, so there can be a slight delay before new or
  changed records are visible to queries.
- AI Agent provides intelligent prospect qualification and lead generation through
  a multi-step, orchestrated workflow.
- When using get_config, you won't benefit from retries and fallbacks as your calls
  to LLM providers will be made outside of our Platform.
- Prepare a Deployment using any chat model.
- Requires active Orq.ai account and API key for access.
- Model access for text generation must be enabled.
- Currently available only on n8n Desktop and self-hosted. Not yet supported on n8n
  Cloud.
- Create annotated datasets in Orq – Use feedback as a selection method to build curated
  datasets for evaluation.
- For summarizing all that extracted receipt data, we’re using Claude 3.5 Haiku as
  our primary model
- If it ever needs backup, Claude 3.7 Sonnet is ready to jump in as the fallback.
- Set the temperature to 0.5, which keeps things balanced.
- Top P (0.7) and Top K (5) settings make sure responses stay focused and relevant.
- To simplify the process, we’ve prepared a Google Colab file that you can copy and
  run immediately after replacing your API key.
- Collect feedback programmatically via the API if needed.
- Use Supabase to securely store the Orq.ai API key.
- You can collect feedback programmatically via the API if needed.
- The API key must be set in the environment variable ORQ_API_KEY.
- To set up the Orq client, an API key is required.
- Prepare a Deployment using any chat model, here we're using `claude sonnet 4`, the
  default configuration is sufficient for this cookbook.
errors:
- '400: Bad Request - The request was unacceptable, often due to missing a required
  parameter'
- '401: Unauthorized - No valid API key was provided'
- '402: Request Failed - The parameters were valid, but the request failed'
- '403: Forbidden - The API key doesn’t have permission to perform the request'
- '404: Not Found - The requested resource doesn’t exist'
- '409: Conflict - The request conflicts with another request'
- '429: Too Many Requests - Too many requests hit the API too quickly. We recommend
  an exponential backoff of your requests'
- '500, 502, 503, 504: Server Errors - Something went wrong on the system or model
  provider end.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your authentication credentials'
- 404 Evaluator not found
- '401 Unauthorized: Recheck API keys or token expiration'
- 500 Internal server error
- 400 Bad request
- 401 Unauthorized
- 404 Remote config not found
- 401 Unauthorized - Bearer token is missing or invalid.
- 400 Bad Request - Invalid memory store configuration or duplicate key.
- 403 Forbidden - Insufficient permissions to access this memory store.
- 404 Memory store not found.
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Check if the API key is correct or expired'
- '401 Unauthorized: Check API key and permissions'
- '429 Too Many Requests: Rate limit exceeded'
- '500 Internal Server Error: Try again later'
- 'Low cache hit rate: Ensure identical parameters'
- 'Cache not working: Confirm type ''exact_match'' is specified'
- '401 Unauthorized: Recheck API key validity.'
- '429: Rate limit exceeded'
- '500: Internal server error'
- '502: Bad gateway'
- '503: Service unavailable'
- '504: Gateway timeout'
- '400: Bad request'
- '401: Unauthorized'
- '401 Unauthorized: Check if the API key is set correctly.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key'
- 'Names not appearing in dashboard: Check name follows alphanumeric + hyphens pattern.'
- 'Fragmented tracking data: Standardize naming conventions across team.'
- 'Too many unique names: Limit to ~50 unique names per account.'
- 'Credential Failure: Having a different API key available to use models can be useful
  in case one becomes invalid.'
- '401 Unauthorized: Recheck API key.'
- 'Low cache hit rate: Ensure identical parameters.'
- 'Cache not working: Confirm ''type: "exact_match"'' is specified.'
- 'Variables not replaced: Cause: Typo in variable name or syntax. Solution: Check
  {{variableName}} format matches input keys'
- 'Missing content: Cause: Required inputs not provided. Solution: Validate all template
  variables have corresponding inputs'
- 'Unexpected output: Cause: HTML/special characters in inputs. Solution: Sanitize
  inputs before sending'
- 'Performance issues: Cause: Large input objects. Solution: Limit input size and
  cache frequently used values'
- 'context_length_exceeded: PDF too large. Try splitting into smaller sections.'
- 'Slow responses: Use lower reasoning effort for time-sensitive applications'
- 'High token usage: Monitor reasoning token consumption'
- '403: Forbidden'
- '401 Unauthorized: Ensure your API key is valid.'
- '400 Bad Request: Check your input format and required parameters.'
- 'Invalid email format: {value}'
- 'Invalid phone format: {value}'
- 'Invalid date format: {value}'
- 'Invalid price format: {value}'
- 'Invalid name length: {value}'
- 'Uneven distribution: Check if weights are normalized correctly'
- 'Unexpected costs: Track actual vs expected cost distribution'
- 'Performance issues: Check latency differences between models'
- 'Network interruption: Stream breaks - Implement reconnection logic'
- 'Processing overhead: Slight performance cost - Optimize chunk handling'
- 'Rate limiting: Stream throttling - Implement backoff strategies'
- 'TIMEOUT: Request timed out - try increasing timeout or using faster model'
- '401 Unauthorized: Check API key'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Check your API key.'
- 'Stream timeout: Set reasonable timeouts (30-60 seconds)'
- 'Streaming error: Implement proper error boundaries'
- 'Network interruption: Stream breaks'
- 'Processing overhead: Slight performance cost'
- 'Model variations: Different chunk sizes'
- 'Rate limiting: Stream throttling'
- 'THREAD_ID_TOO_LONG: Maximum 100 characters'
- 'TOO_MANY_TAGS: Recommended maximum 10 tags'
- 'prompt not found: Verify prompt ID is correct'
- 'Outdated prompt content: Remember ''latest'' version may have delays'
- '400 Bad Request: Check request formatting.'
- '401 Unauthorized: Invalid API key.'
- '429 Too Many Requests: Rate limit exceeded.'
- 'Unknown tool: tool_name'
- 'Invalid image URL or format: Check the image URL provided'
- Unable to process image. Please check format and size.
- Image content violates usage policies.
- 'Schema validation fails: Simplify complex nested structures'
- 'Inconsistent outputs: Use more specific prompts'
- 'Performance issues: Reduce schema complexity'
- 'Outdated prompt content: Check prompt was saved in dashboard'
- '401 Unauthorized: Check API key validity'
- 'image_parse_error: Unable to process image. Please check format and size.'
- 'content_policy_violation: Image content violates usage policies.'
- 'Vision API error: Error processing image. Please try again.'
- '401 Unauthorized: Ensure the API key is valid.'
- '429 Too Many Requests: When reaching rate limit, API calls are denied'
- Data is automatically deleted after the configured retention period.
- '500 Internal Server Error: Check if the service is down'
- '401 Unauthorized: Recheck your API key'
- '400 Bad Request: Check your input data.'
- '429 Too Many Requests: API calls are denied when reaching rate limit.'
- 'Failed to upload: {file_name}'
- 'Error uploading {file_name}: {e}'
- '400 Bad Request: Check the request format and required fields.'
- '404 Not Found: Verify the endpoint path.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Invalid API Key'
- '500 Internal Server Error: Retry the request'
auth_info:
  mentioned_objects:
  - Bearer
  - JWT
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.orq.ai
  auth:
    type: apikey
    location: header
    header_name: authorization
  headers:
    accept: application/json
    content-type: application/json
source_metadata: null
