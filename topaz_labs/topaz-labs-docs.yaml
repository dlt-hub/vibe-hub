resources:
- name: enhance_async
  endpoint:
    path: /image/v1/enhance/async
    method: POST
    data_selector: process_id
    params: {}
- name: enhance_sync
  endpoint:
    path: /image/v1/enhance
    method: POST
    data_selector: binary
    params: {}
- name: enhance_gen_async
  endpoint:
    path: /image/v1/enhance-gen/async
    method: POST
    data_selector: process_id
    params: {}
- name: enhance
  endpoint:
    path: /api/enhance
    method: POST
- name: sharpen
  endpoint:
    path: /api/sharpen
    method: POST
- name: denoise
  endpoint:
    path: /api/denoise
    method: POST
- name: restore
  endpoint:
    path: /api/restore
    method: POST
- name: lighting
  endpoint:
    path: /api/lighting
    method: POST
- name: status
  endpoint:
    path: /api/status
    method: GET
- name: download
  endpoint:
    path: /api/download
    method: GET
- name: estimate
  endpoint:
    path: /api/estimate
    method: POST
- name: cancel
  endpoint:
    path: /api/cancel
    method: POST
- name: sharpen_async
  endpoint:
    path: /image/v1/sharpen/async
    method: POST
    data_selector: process_id
- name: sharpen
  endpoint:
    path: /image/v1/sharpen
    method: POST
    data_selector: binary
- name: sharpen_gen_async
  endpoint:
    path: /image/v1/sharpen-gen/async
    method: POST
    data_selector: process_id
    params: {}
- name: denoise_async
  endpoint:
    path: /image/v1/denoise/async
    method: POST
    data_selector: process_id
    params: {}
- name: denoise_sync
  endpoint:
    path: /image/v1/denoise
    method: POST
    data_selector: binary
    params: {}
- name: restore
  endpoint:
    path: /image/v1/restore-gen/async
    method: POST
    data_selector: process_id
- name: lighting_async
  endpoint:
    path: /image/v1/lighting/async
    method: POST
    data_selector: process_id
    params: {}
- name: lighting_sync
  endpoint:
    path: /image/v1/lighting
    method: POST
    data_selector: binary
    params: {}
- name: statuses
  endpoint:
    path: /image/v1/status
    method: GET
    data_selector: array of statuses of all processes
- name: delete_statuses
  endpoint:
    path: /image/v1/status
    method: DELETE
- name: get_status
  endpoint:
    path: /image/v1/status/{process_id}
    method: GET
- name: delete_status
  endpoint:
    path: /image/v1/status/{process_id}
    method: DELETE
- name: download_output
  endpoint:
    path: /image/v1/download/{process_id}
    method: GET
    data_selector: download_url
- name: download_input
  endpoint:
    path: /image/v1/download/input/{process_id}
    method: GET
    data_selector: download_url
- name: estimate
  endpoint:
    path: /image/v1/estimate
    method: POST
    data_selector: duration
    params: {}
- name: estimate_generative
  endpoint:
    path: /image/v1/estimate-gen
    method: POST
    data_selector: duration
    params: {}
- name: estimate_bulk
  endpoint:
    path: /image/v1/estimate-bulk
    method: POST
    data_selector: one of[]
- name: cancel
  endpoint:
    path: /image/v1/cancel/{process_id}
    method: DELETE
    data_selector: null
    params:
      process_id: string · uuidRequired
- name: cancel
  endpoint:
    path: /cancel/{process_id}
    method: DELETE
    data_selector: '204'
    params:
      process_id: uuid
- name: status
  endpoint:
    path: /video/status
    method: GET
    data_selector: response
    params: {}
- name: video_status
  endpoint:
    path: /video/status
    method: GET
    data_selector: response
    params: {}
- name: create_video_request
  endpoint:
    path: /video/
    method: POST
    data_selector: response
    params: {}
- name: create_video_request
  endpoint:
    path: /video/
    method: POST
    data_selector: response
    params: {}
- name: accept_request
  endpoint:
    path: /video/{requestId}/accept
    method: PATCH
    data_selector: uploadId
    params: {}
- name: accept_request
  endpoint:
    path: /video/{requestId}/accept
    method: PATCH
    data_selector: uploadId
    params: {}
- name: complete_upload
  endpoint:
    path: /video/{requestId}/complete-upload/
    method: PATCH
    data_selector: Response
    params: {}
- name: complete_upload
  endpoint:
    path: /video/{requestId}/complete-upload/
    method: PATCH
    data_selector: uploadResults
    params: {}
- name: cancel_video_request
  endpoint:
    path: /video/{requestId}
    method: DELETE
    data_selector: message
    params: {}
- name: cancel_video_request
  endpoint:
    path: /video/{requestId}
    method: DELETE
    data_selector: message
    params: {}
- name: delete_video_files
  endpoint:
    path: /video/{requestId}/media
    method: DELETE
    data_selector: ''
    params:
      requestId: string · uuidRequired
- name: delete_video_files
  endpoint:
    path: /video/{requestId}/media
    method: DELETE
    params:
      requestId: string · uuid
- name: get_request_status
  endpoint:
    path: /video/{requestId}/status
    method: GET
    data_selector: response
    params: {}
- name: get_request_status
  endpoint:
    path: /video/{requestId}/status
    method: GET
    data_selector: Response
    params:
      requestId: string · uuid
- name: get_request_metrics
  endpoint:
    path: /video/{requestId}/metrics
    method: GET
    data_selector: Response
    params:
      requestId: string · uuid
- name: get_request_metrics
  endpoint:
    path: /video/{requestId}/metrics
    method: GET
    data_selector: Response
    params:
      requestId: string · uuid
- name: video_request_history
  endpoint:
    path: /video/history
    method: GET
    data_selector: result
- name: credit_balance
  endpoint:
    path: /account/v1/credits/balance
    method: GET
    data_selector: available_credits
- name: get_request_history
  endpoint:
    path: /video/history
    method: GET
    data_selector: result
    params: {}
- name: credit_balance
  endpoint:
    path: /account/v1/credits/balance
    method: GET
    data_selector: available_credits
    params: {}
- name: enhance
  endpoint:
    path: /api/v1/enhance
    method: POST
    data_selector: results
    params: {}
- name: denoise
  endpoint:
    path: /api/v1/denoise
    method: POST
    data_selector: results
    params: {}
- name: Adjust
  endpoint:
    path: /lighting/adjust
    method: POST
    data_selector: parameters
    params: {}
- name: White Balance
  endpoint:
    path: /lighting/white_balance
    method: POST
    data_selector: parameters
    params: {}
- name: Enhance
  endpoint:
    path: /image-api/enhance
    method: POST
    data_selector: models
    params: {}
- name: Enhance Generative
  endpoint:
    path: /image-api/enhance-generative
    method: POST
    data_selector: models
    params: {}
- name: Denoise
  endpoint:
    path: /image-api/denoise
    method: POST
    data_selector: models
    params: {}
- name: Restore Generative
  endpoint:
    path: /image-api/restore-generative
    method: POST
    data_selector: models
    params: {}
- name: Adjust
  endpoint:
    path: /models/adjust
    method: POST
    data_selector: parameters
    params: {}
- name: White Balance
  endpoint:
    path: /models/white-balance
    method: POST
    data_selector: parameters
    params: {}
- name: denoise
  endpoint:
    path: /image/v1/denoise
    method: POST
    data_selector: response
    params: {}
- name: sharpen
  endpoint:
    path: /image/v1/sharpen
    method: POST
    data_selector: response
    params: {}
- name: enhance
  endpoint:
    path: /image/v1/enhance
    method: POST
    data_selector: response
    params: {}
- name: denoise
  endpoint:
    path: /denoise
    method: POST
- name: sharpen
  endpoint:
    path: /sharpen
    method: POST
- name: enhance
  endpoint:
    path: /enhance
    method: POST
- name: video_enhancement
  endpoint:
    path: /video/
    method: POST
- name: accept_request
  endpoint:
    path: /video/{requestId}/accept
    method: PATCH
- name: upload_video
  endpoint:
    path: /video/{requestId}/complete-upload/
    method: PATCH
- name: check_status
  endpoint:
    path: /video/{requestId}/status
    method: GET
- name: video_enhancement
  endpoint:
    path: /video/
    method: POST
- name: accept_request
  endpoint:
    path: /video/{requestId}/accept
    method: PATCH
- name: upload_video
  endpoint:
    path: /video/{requestId}/complete-upload/
    method: PATCH
- name: check_status
  endpoint:
    path: /video/{requestId}/status
    method: GET
- name: video_request
  endpoint:
    path: /video/
    method: POST
    data_selector: null
    params: {}
- name: accept_video_request
  endpoint:
    path: /video/[your-requestID]/accept
    method: PATCH
    data_selector: null
    params: {}
- name: complete_upload
  endpoint:
    path: /video/[your-requestID]/complete-upload
    method: PATCH
    data_selector: null
    params: {}
- name: video_status
  endpoint:
    path: /video/[your-requestID]/status
    method: GET
    data_selector: null
    params: {}
- name: video_request
  endpoint:
    path: /video/
    method: POST
    data_selector: ''
    params: {}
- name: accept_video_request
  endpoint:
    path: /video/[your-requestID]/accept
    method: PATCH
    data_selector: ''
    params: {}
- name: complete_video_upload
  endpoint:
    path: /video/[your-requestID]/complete-upload
    method: PATCH
    data_selector: ''
    params: {}
- name: video_status
  endpoint:
    path: /video/[your-requestID]/status
    method: GET
    data_selector: ''
    params: {}
- name: Proteus
  endpoint:
    path: /video-api/proteus
    method: POST
- name: Artemis
  endpoint:
    path: /video-api/artemis
    method: POST
- name: Nyx
  endpoint:
    path: /video-api/nyx
    method: POST
- name: Rhea
  endpoint:
    path: /video-api/rhea
    method: POST
- name: Gaia
  endpoint:
    path: /video-api/gaia
    method: POST
- name: Apollo
  endpoint:
    path: /video-api/apollo
    method: POST
- name: Chronos
  endpoint:
    path: /video-api/chronos
    method: POST
- name: Dione
  endpoint:
    path: /video-api/dione
    method: POST
- name: Theia
  endpoint:
    path: /video-api/theia
    method: POST
- name: Iris
  endpoint:
    path: /video-api/iris
    method: POST
- name: Themis
  endpoint:
    path: /video-api/themis
    method: POST
- name: Proteus
  endpoint:
    path: /video-api/models/proteus
    method: GET
    data_selector: modelOptions
    params: {}
- name: Artemis
  endpoint:
    path: /video-api/models/artemis
    method: GET
    data_selector: modelOptions
    params: {}
- name: Nyx
  endpoint:
    path: /video-api/models/nyx
    method: GET
    data_selector: modelOptions
    params: {}
- name: Rhea
  endpoint:
    path: /video-api/models/rhea
    method: GET
    data_selector: modelOptions
    params: {}
- name: Gaia
  endpoint:
    path: /video-api/models/gaia
    method: GET
    data_selector: modelOptions
    params: {}
- name: Apollo
  endpoint:
    path: /video-api/models/apollo
    method: GET
    data_selector: modelOptions
    params: {}
- name: Chronos
  endpoint:
    path: /video-api/models/chronos
    method: GET
    data_selector: modelOptions
    params: {}
- name: Dione
  endpoint:
    path: /video-api/models/dione
    method: GET
    data_selector: modelOptions
    params: {}
- name: Theia
  endpoint:
    path: /video-api/models/theia
    method: GET
    data_selector: modelOptions
    params: {}
- name: Iris
  endpoint:
    path: /video-api/models/iris
    method: GET
    data_selector: modelOptions
    params: {}
- name: Themis
  endpoint:
    path: /video-api/models/themis
    method: GET
    data_selector: modelOptions
    params: {}
- name: sharpen_async
  endpoint:
    path: /image/v1/sharpen/async
    method: POST
    data_selector: process_id
    params: {}
- name: sharpen
  endpoint:
    path: /image/v1/sharpen
    method: POST
    data_selector: binary
    params: {}
- name: sharpen_gen
  endpoint:
    path: /image/v1/sharpen-gen/async
    method: POST
    data_selector: process_id
    params: {}
- name: sharpen_async
  endpoint:
    path: /image/v1/sharpen/async
    method: POST
    data_selector: process_id
    params: {}
- name: sharpen
  endpoint:
    path: /image/v1/sharpen
    method: POST
    data_selector: ''
    params: {}
- name: sharpen_gen_async
  endpoint:
    path: /image/v1/sharpen-gen/async
    method: POST
    data_selector: process_id
    params: {}
notes:
- Output dimensions of 512 megapixels is the maximum supported for asynchronous endpoint.
- This endpoint can return a maximum of 96 megapixels for synchronous endpoint.
- Simply create your first API key and you'll receive 100 free credits
- API works on a credit system, where the amount of credits required to process an
  image or video enhancement depends on the settings applied.
- You may only view your API key on creation, so please be sure to copy the key as
  it will no longer be visible to you once you exit the page.
- The API only responds to HTTPS-secured communications. Any requests sent via HTTP
  return an HTTP 301 redirect to the corresponding HTTPS resources.
- The API enforces a request size limit of 500MB. If a request exceeds this limit,
  the server responds with an HTTP 413.
- Uses a credit system for API calls.
- The API has access rate limits depending on the current load on the servers.
- The API only responds to HTTPS-secured communications.
- Generative models are only available as asynchronous endpoints.
- Generative models are only available as asynchronous endpoints
- Create your first API key to receive 100 free credits
- Requires setup of API key
- Make sure you never share your API key with anyone, and you never commit it to a
  public repository.
- This endpoint is free to use and does not consume any credits.
errors:
- '400: The request contains malformed data in the body, path, or query parameters.'
- '401: Authentication is required and has failed or has not yet been provided.'
- '402: Payment is required to access the resource.'
- '403: The API key doesn''t have permissions to perform the request.'
- '412: The preconditions to process the request were not met.'
- '413: The request is larger than the server is willing or able to process.'
- '415: The request entity has a media type which the server or resource does not
  support.'
- '422: The request was well-formed but was unable to be followed due to semantic
  errors.'
- '425: The request was sent too early to be processed. Please wait before retrying.'
- '429: Too many requests hit the API too quickly. A backoff (e.g. exponential) is
  recommended for your requests.'
- '500: Unexpected error on our end.'
- 401 Authentication is required and has failed or has not yet been provided.
- 403 The API key doesn't have permissions to perform the request.
- 429 Too many requests hit the API too quickly. A backoff (e.g. exponential) is recommended
  for your requests.
- 500 Unexpected error on our end.
- '404: The requested resource does not exist.'
- '409: The request conflicts with the current state.'
- '429: Too many requests hit the API too quickly.'
- 500 Internal server error
- 400 Bad request
- 401 Unauthorized
- 503 Service unavailable
- '400: Bad request'
- '401: Unauthorized'
- '500: Internal server error'
- '503: Service unavailable'
- 402 Payment required
- 403 Forbidden
- 404 Enhancement request with the provided ID not found
- '403: Forbidden'
- '404: Enhancement request with the provided ID not found'
- '200: Credit balance'
- 'HTTP 429: Rate limit exceeded, use exponential backoff.'
- 'HTTP 413: Request size exceeds limit.'
- 'HTTP 429: Try again later with exponential backoff.'
- 'HTTP 301: Requests sent via HTTP return a redirect to HTTPS.'
- 'HTTP 413: Ensure requests stay within the 500MB size limit.'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Verify client credentials'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.topazlabs.com
  auth:
    type: apiKeyAuth
  headers:
    Accept: '*/*'
source_metadata: null
