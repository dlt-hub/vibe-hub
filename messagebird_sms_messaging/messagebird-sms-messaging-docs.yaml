resources:
- name: messages
  endpoint:
    path: /messages
    method: POST
- name: get_messages
  endpoint:
    path: /messages
    method: GET
- name: get_message
  endpoint:
    path: /messages/{messageId}
    method: GET
- name: delete_message
  endpoint:
    path: /messages/{messageId}
    method: DELETE
- name: send_sms
  endpoint:
    path: /messages
    method: POST
    data_selector: messages
    params: {}
- name: status_report
  endpoint:
    path: /status
    method: GET
    data_selector: status_reports
    params: {}
- name: inbound_sms_vmn
  endpoint:
    path: /inbound
    method: POST
    data_selector: inbound_messages
    params: {}
- name: inbound_sms_shortcode
  endpoint:
    path: /shortcode
    method: GET
    data_selector: inbound_messages_shortcode
    params: {}
- name: messages
  endpoint:
    path: /messages/{messageId}
    method: GET
    data_selector: message
    params: {}
- name: list_messages
  endpoint:
    path: /messages
    method: GET
    data_selector: items
    params:
      status: scheduled
- name: bind_receiver
  endpoint:
    path: /bind_receiver
    method: POST
    data_selector: bind_receiver
- name: submit_sm
  endpoint:
    path: /submit_sm
    method: POST
    data_selector: submit_sm
- name: SMS
  endpoint:
    path: /api/sms-messaging/
    method: GET
- name: WhatsApp
  endpoint:
    path: /api/whatsapp
    method: GET
- name: Voice Calling
  endpoint:
    path: /api/voice-calling/
    method: GET
- name: Conversations
  endpoint:
    path: /api/conversations/
    method: GET
- name: Numbers
  endpoint:
    path: /api/numbers/
    method: GET
- name: Verify
  endpoint:
    path: /api/verify/
    method: GET
- name: sms
  endpoint:
    path: /sms
    method: POST
    data_selector: messages
    params: {}
- name: upload_sticker
  endpoint:
    path: /v1/files
    method: POST
    data_selector: id
- name: send_sticker_message
  endpoint:
    path: /v1/send
    method: POST
    data_selector: id
- name: fetch_message_details
  endpoint:
    path: /v1/messages/{id}
    method: GET
    data_selector: id
- name: upload_sticker_image
  endpoint:
    path: /v1/files
    method: POST
    data_selector: id
- name: send_sticker_message
  endpoint:
    path: /v1/send
    method: POST
    data_selector: id
- name: fetch_message_details
  endpoint:
    path: /v1/messages/{id}
    method: GET
    data_selector: id
- name: single_product_message
  endpoint:
    path: /v1/send
    method: POST
    data_selector: content
    params: {}
- name: multi_product_message
  endpoint:
    path: /v1/send
    method: POST
    data_selector: content
    params: {}
- name: customer_question
  endpoint:
    path: /v1/received
    method: POST
    data_selector: content.whatsappText
    params: {}
- name: customer_order
  endpoint:
    path: /v1/received
    method: POST
    data_selector: content.whatsappOrder
    params: {}
- name: send_product_message
  endpoint:
    path: /v1/send
    method: POST
    data_selector: content
    params: {}
- name: whatsapp_referral
  endpoint:
    path: /api/conversations/#whatsappreferral-object
    method: GET
    data_selector: referral.whatsapp
    params: {}
- name: whatsapp_referral
  endpoint:
    path: /api/conversations/whatsapp/referral
    method: GET
    data_selector: referral
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: messages
    params: {}
- name: numbers
  endpoint:
    path: /numbers
    method: GET
    data_selector: numbers
- name: lookup
  endpoint:
    path: /lookup
    method: GET
    data_selector: data
- name: webhook_notification
  endpoint:
    path: /notifications/webhook
    method: POST
    data_selector: notifications
    params: {}
- name: lookup
  endpoint:
    path: /lookup
    method: GET
    data_selector: number_data
- name: send_message
  endpoint:
    path: /v1/send
    method: POST
    data_selector: content
    params: {}
- name: start_conversation
  endpoint:
    path: /conversations/start
    method: POST
    data_selector: content
    params: {}
- name: conversations_start
  endpoint:
    path: /conversations/start
    method: POST
- name: send_message
  endpoint:
    path: /send
    method: POST
- name: send_message_template
  endpoint:
    path: /v1/send
    method: POST
    data_selector: content
    params: {}
- name: start_conversation
  endpoint:
    path: /conversations/start
    method: POST
    data_selector: content
    params: {}
- name: get_conversation_messages
  endpoint:
    path: /conversations/{id}/messages
    method: POST
    data_selector: content
    params: {}
- name: messages_batches
  endpoint:
    path: /messages/batches
    method: POST
- name: conversations_start
  endpoint:
    path: /conversations/start
    method: POST
    data_selector: message
- name: send_message
  endpoint:
    path: /send
    method: POST
    data_selector: message
- name: messages_batches
  endpoint:
    path: /messages/batches
    method: POST
    data_selector: messages
- name: messages_batches
  endpoint:
    path: /messages/batches
    method: POST
- name: messages_batches
  endpoint:
    path: /messages/batches
    method: POST
    data_selector: ''
    params: {}
- name: call_flows
  endpoint:
    path: /call-flows
    method: GET
    data_selector: data
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
    params: {}
- name: transcriptions
  endpoint:
    path: /transcriptions/{transcriptionID}
    method: GET
    data_selector: data
    params: {}
- name: call_flows
  endpoint:
    path: /call-flows
    method: GET
    data_selector: data
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
- name: transcriptions
  endpoint:
    path: /transcriptions/{transcriptionID}
    method: GET
    data_selector: data
- name: call_flows
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
- name: update_call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: PUT
    data_selector: data
- name: delete_call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: DELETE
    data_selector: data
- name: call_flow_numbers
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: POST
    data_selector: data
    params:
      id: string
      numbers: array
- name: call_flow_numbers_replace
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: PUT
    data_selector: data
    params:
      id: string
      numbers: array
- name: call_flows
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
- name: call_flow_numbers
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: POST
    data_selector: data
    params: {}
- name: call_flow_numbers_replace
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: PUT
    data_selector: data
    params: {}
- name: call_flows
  endpoint:
    path: /call-flows/
    method: GET
- name: calls
  endpoint:
    path: /calls/
    method: GET
- name: call_flows
  endpoint:
    path: /call-flows/
    method: GET
- name: calls
  endpoint:
    path: /calls/
    method: GET
- name: call_flows
  endpoint:
    path: /call-flows
    method: GET
    data_selector: data
    params: {}
- name: view_call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: GET
    data_selector: data
    params: {}
- name: create_call_flow
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
    params: {}
- name: call_flows
  endpoint:
    path: /call-flows
    method: GET
    data_selector: data
- name: single_call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: GET
    data_selector: data
- name: create_call_flow
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
- name: call_flows
  endpoint:
    path: /call-flows
    method: POST
    data_selector: steps
- name: call_flow_update
  endpoint:
    path: /call-flows/{callflowID}
    method: PUT
    data_selector: data
- name: call_flow_delete
  endpoint:
    path: /call-flows/{callflowID}
    method: DELETE
    data_selector: null
- name: call_flow
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
    params: {}
- name: fetch_call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: GET
    data_selector: data
    params: {}
- name: update_call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: PUT
    data_selector: data
    params: {}
- name: delete_call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: DELETE
    data_selector: data
    params: {}
- name: call_flow_numbers
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: POST
- name: call_flow_numbers_replace
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: PUT
- name: call_flows
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: POST
    data_selector: data
    params:
      id: callflowID
      numbers: array
- name: call_flows_replace
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: PUT
    data_selector: data
    params:
      id: callflowID
      numbers: array
- name: call_flow_numbers
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: GET
    data_selector: data
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
    params: {}
- name: call_flow_numbers
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: GET
    data_selector: data
    params: {}
- name: call
  endpoint:
    path: /calls/{callID}
    method: GET
    data_selector: data
    params: {}
- name: create_call
  endpoint:
    path: /calls
    method: POST
    data_selector: data
    params: {}
- name: update_call
  endpoint:
    path: /calls/{callID}
    method: PUT
    data_selector: data
    params: {}
- name: delete_call
  endpoint:
    path: /calls/{callID}
    method: DELETE
    data_selector: ''
    params: {}
- name: add_participant
  endpoint:
    path: /calls/{callID}/{destination}
    method: POST
    data_selector: ''
    params: {}
- name: list_legs
  endpoint:
    path: /calls/{callID}/legs
    method: GET
    data_selector: data
    params: {}
- name: view_leg
  endpoint:
    path: /calls/{callID}/legs/{legID}
    method: GET
    data_selector: data
    params: {}
- name: delete_leg
  endpoint:
    path: /legs/{legID}
    method: DELETE
    data_selector: ''
    params: {}
- name: call
  endpoint:
    path: /calls/{callID}
    method: GET
    data_selector: data
    params: {}
- name: create_call
  endpoint:
    path: /calls
    method: POST
    data_selector: data
    params: {}
- name: update_call
  endpoint:
    path: /calls/{callID}
    method: PUT
    data_selector: data
    params: {}
- name: delete_call
  endpoint:
    path: /calls/{callID}
    method: DELETE
    data_selector: null
    params: {}
- name: add_participant
  endpoint:
    path: /calls/{callID}/{destination}
    method: POST
    data_selector: null
    params: {}
- name: list_legs
  endpoint:
    path: /calls/{callID}/legs
    method: GET
    data_selector: data
    params: {}
- name: view_leg
  endpoint:
    path: /calls/{callID}/legs/{legID}
    method: GET
    data_selector: data
    params: {}
- name: delete_leg
  endpoint:
    path: /legs/{legID}
    method: DELETE
    data_selector: null
    params: {}
- name: place_leg_on_hold
  endpoint:
    path: /legs/{legID}/hold
    method: POST
    data_selector: records
    params:
      legId: string
      musicOnHold: string
- name: remove_leg_from_hold
  endpoint:
    path: /legs/{legID}/unhold
    method: POST
    data_selector: records
    params:
      legId: string
- name: recordings
  endpoint:
    path: /calls/{callID}/legs/{legID}/recordings
    method: GET
    data_selector: records
- name: place_leg_on_hold
  endpoint:
    path: /legs/{legID}/hold
    method: POST
    data_selector: null
    params:
      legId: string
      musicOnHold: string
- name: remove_leg_from_hold
  endpoint:
    path: /legs/{legID}/unhold
    method: POST
    data_selector: null
    params:
      legId: string
- name: recordings
  endpoint:
    path: /calls/{callID}/legs/{legID}/recordings
    method: GET
    data_selector: null
    params: {}
- name: call_flows
  endpoint:
    path: /call-flows/
    method: GET
- name: calls
  endpoint:
    path: /calls/
    method: GET
- name: legs
  endpoint:
    path: /calls/{callID}/legs/
    method: GET
- name: call_flows
  endpoint:
    path: /call-flows/
    method: GET
- name: calls
  endpoint:
    path: /calls/
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks/
    method: GET
- name: call_flows
  endpoint:
    path: /call-flows
    method: GET
    data_selector: data
- name: call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: GET
    data_selector: data
- name: create_call_flow
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
- name: call_flows
  endpoint:
    path: /call-flows
    method: GET
    data_selector: data
    params: {}
- name: view_call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: GET
    data_selector: data
    params: {}
- name: create_call_flow
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
    params: {}
- name: call_flows
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
- name: call_flow_numbers
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: POST
    data_selector: data
    params:
      id: callflowID
      numbers: array of E.164 formatted numbers
- name: call_flow_numbers_list
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: GET
    data_selector: data
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
- name: call_flows
  endpoint:
    path: /call-flows
    method: POST
    data_selector: steps
- name: call_flow_numbers
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: POST
    data_selector: data
    params: {}
- name: list_call_flow_numbers
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: GET
    data_selector: data
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: POST
    data_selector: data
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
    params: {}
- name: call
  endpoint:
    path: /calls/{callID}
    method: GET
    data_selector: data
    params: {}
- name: create_call
  endpoint:
    path: /calls
    method: POST
    data_selector: data
    params: {}
- name: update_call
  endpoint:
    path: /calls/{callID}
    method: PUT
    data_selector: data
    params: {}
- name: delete_call
  endpoint:
    path: /calls/{callID}
    method: DELETE
    data_selector: data
    params: {}
- name: legs
  endpoint:
    path: /calls/{callID}/legs
    method: GET
    data_selector: data
    params: {}
- name: leg
  endpoint:
    path: /calls/{callID}/legs/{legID}
    method: GET
    data_selector: data
    params: {}
- name: delete_leg
  endpoint:
    path: /legs/{legID}
    method: DELETE
    data_selector: data
    params: {}
- name: legs
  endpoint:
    path: /legs/{legID}
    method: DELETE
- name: hold_leg
  endpoint:
    path: /legs/{legID}/hold
    method: POST
- name: unhold_leg
  endpoint:
    path: /legs/{legID}/unhold
    method: POST
- name: recordings
  endpoint:
    path: /calls/{callID}/legs/{legID}/recordings
    method: GET
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
- name: view_call
  endpoint:
    path: /calls/{callID}
    method: GET
    data_selector: data
- name: create_call
  endpoint:
    path: /calls
    method: POST
    data_selector: data
- name: update_call
  endpoint:
    path: /calls/{callID}
    method: PUT
    data_selector: data
- name: delete_call
  endpoint:
    path: /calls/{callID}
    method: DELETE
    data_selector: null
- name: add_participant
  endpoint:
    path: /calls/{callID}/{destination}
    method: POST
    data_selector: null
- name: list_legs
  endpoint:
    path: /calls/{callID}/legs
    method: GET
    data_selector: data
- name: view_leg
  endpoint:
    path: /calls/{callID}/legs/{legID}
    method: GET
    data_selector: data
- name: delete_leg
  endpoint:
    path: /legs/{legID}
    method: DELETE
    data_selector: null
- name: recording
  endpoint:
    path: /recordings/{recordingID}
    method: GET
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /recordings/{recordingID}/transcriptions
    method: POST
    data_selector: data
    params: {}
- name: legs
  endpoint:
    path: /legs/{legID}
    method: DELETE
- name: hold_leg
  endpoint:
    path: /legs/{legID}/hold
    method: POST
- name: unhold_leg
  endpoint:
    path: /legs/{legID}/unhold
    method: POST
- name: recordings
  endpoint:
    path: /calls/{callID}/legs/{legID}/recordings
    method: GET
- name: recordings
  endpoint:
    path: /recordings/{recordingID}
    method: GET
    data_selector: data
    params: {}
- name: transcriptions
  endpoint:
    path: /recordings/{recordingID}/transcriptions
    method: POST
    data_selector: data
    params: {}
- name: call_flows
  endpoint:
    path: /call-flows/
    method: GET
- name: calls
  endpoint:
    path: /calls/
    method: GET
- name: recordings
  endpoint:
    path: /recordings/
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks/
    method: GET
- name: call_flow
  endpoint:
    path: /call-flows
    method: GET
    data_selector: data
- name: call_flow_by_id
  endpoint:
    path: /call-flows/{callflowID}
    method: GET
    data_selector: data
- name: create_call_flow
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
- name: call_flows
  endpoint:
    path: /call-flows
    method: GET
- name: calls
  endpoint:
    path: /calls
    method: GET
- name: recordings
  endpoint:
    path: /recordings/{recordingID}
    method: GET
- name: transcriptions
  endpoint:
    path: /transcriptions/{transcriptionID}
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: call_flows
  endpoint:
    path: /call-flows
    method: POST
    data_selector: steps
- name: call_flows
  endpoint:
    path: /call-flows
    method: GET
    data_selector: data
- name: call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: GET
    data_selector: data
- name: create_call_flow
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
- name: call_flows
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: POST
    data_selector: data
    params: {}
- name: call_flows_numbers
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: GET
    data_selector: data
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
    params: {}
- name: call_flows
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: POST
    data_selector: data
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
- name: call
  endpoint:
    path: /calls/{callID}
    method: GET
    data_selector: data
- name: create_call
  endpoint:
    path: /calls
    method: POST
    data_selector: data
- name: update_call
  endpoint:
    path: /calls/{callID}
    method: PUT
    data_selector: data
- name: delete_call
  endpoint:
    path: /calls/{callID}
    method: DELETE
- name: add_participant
  endpoint:
    path: /calls/{callID}/{destination}
    method: POST
- name: list_legs
  endpoint:
    path: /calls/{callID}/legs
    method: GET
    data_selector: data
- name: view_leg
  endpoint:
    path: /calls/{callID}/legs/{legID}
    method: GET
    data_selector: data
- name: delete_leg
  endpoint:
    path: /legs/{legID}
    method: DELETE
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
    params: {}
- name: call
  endpoint:
    path: /calls/{callID}
    method: GET
    data_selector: data
    params: {}
- name: create_call
  endpoint:
    path: /calls
    method: POST
    data_selector: data
    params: {}
- name: update_call
  endpoint:
    path: /calls/{callID}
    method: PUT
    data_selector: data
    params: {}
- name: delete_call
  endpoint:
    path: /calls/{callID}
    method: DELETE
    data_selector: data
    params: {}
- name: legs
  endpoint:
    path: /calls/{callID}/legs
    method: GET
    data_selector: data
    params: {}
- name: leg
  endpoint:
    path: /calls/{callID}/legs/{legID}
    method: GET
    data_selector: data
    params: {}
- name: legs
  endpoint:
    path: /legs/{legID}
    method: DELETE
- name: hold_leg
  endpoint:
    path: /legs/{legID}/hold
    method: POST
- name: unhold_leg
  endpoint:
    path: /legs/{legID}/unhold
    method: POST
- name: recordings
  endpoint:
    path: /calls/{callID}/legs/{legID}/recordings
    method: GET
- name: recording_details
  endpoint:
    path: /recordings/{recordingID}
    method: GET
- name: download_recording
  endpoint:
    path: /recordings/{recordingID}.wav
    method: GET
- name: delete_recording
  endpoint:
    path: /recordings/{recordingID}
    method: DELETE
- name: transcriptions
  endpoint:
    path: /recordings/{recordingID}/transcriptions
    method: POST
- name: legs
  endpoint:
    path: /legs/{legID}
    method: DELETE
    data_selector: ''
    params: {}
- name: hold_leg
  endpoint:
    path: /legs/{legID}/hold
    method: POST
    data_selector: ''
    params:
      musicOnHold: string
- name: unhold_leg
  endpoint:
    path: /legs/{legID}/unhold
    method: POST
    data_selector: ''
    params: {}
- name: recordings
  endpoint:
    path: /recordings/{recordingID}
    method: GET
    data_selector: data
    params: {}
- name: transcriptions
  endpoint:
    path: /recordings/{recordingID}/transcriptions
    method: POST
    data_selector: ''
    params: {}
- name: transcription
  endpoint:
    path: /recordings/{recordingID}/transcriptions
    method: POST
    data_selector: data
    params:
      recordingId: recordingId
      language: language
- name: get_transcription
  endpoint:
    path: /transcriptions/{transcriptionID}
    method: GET
    data_selector: data
    params:
      recordingId: recordingId
- name: list_numbers
  endpoint:
    path: /numbers
    method: GET
    data_selector: data
    params: {}
- name: get_webhooks
  endpoint:
    path: /numbers/{number}/webhook
    method: GET
    data_selector: data
    params: {}
- name: create_webhook
  endpoint:
    path: /numbers/{number}/webhook
    method: POST
    data_selector: data
    params:
      url: url
      token: token
- name: transcription
  endpoint:
    path: /recordings/{recordingID}/transcriptions
    method: POST
    data_selector: data
    params:
      recordingId: string
      language: string
- name: transcription_view
  endpoint:
    path: /recordings/{recordingID}/transcriptions
    method: GET
    data_selector: data
    params:
      recordingId: string
- name: numbers
  endpoint:
    path: /numbers
    method: GET
    data_selector: data
    params: {}
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /webhooks/{id}
    method: PUT
    data_selector: data
    params: {}
- name: webhook_delete
  endpoint:
    path: /webhooks/{id}
    method: DELETE
    data_selector: data
    params: {}
- name: webhook_update
  endpoint:
    path: /webhooks/{id}
    method: PUT
    data_selector: data
    params: {}
- name: webhook_delete
  endpoint:
    path: /webhooks/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: call_flows
  endpoint:
    path: /call-flows/
    method: GET
- name: calls
  endpoint:
    path: /calls/
    method: GET
- name: SMS
  endpoint:
    path: /api/sms
    method: POST
    data_selector: messages
- name: Voice Calling
  endpoint:
    path: /api/voice/calls
    method: POST
    data_selector: calls
- name: Conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: conversations
- name: call_flows
  endpoint:
    path: /call-flows
    method: GET
    data_selector: data
    params: {}
- name: call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: GET
    data_selector: data
    params: {}
- name: create_call_flow
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
    params: {}
- name: call_flows
  endpoint:
    path: /call-flows/
    method: GET
- name: calls
  endpoint:
    path: /calls/
    method: GET
- name: call_flows
  endpoint:
    path: /call-flows
    method: GET
    data_selector: data
- name: call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: GET
    data_selector: data
- name: create_call_flow
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
- name: call_flow
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
- name: call_flows
  endpoint:
    path: /call-flows
    method: POST
    data_selector: data
    params: {}
- name: update_call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: PUT
    data_selector: data
    params: {}
- name: delete_call_flow
  endpoint:
    path: /call-flows/{callflowID}
    method: DELETE
    data_selector: data
    params: {}
- name: call_flows
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: POST
    data_selector: data
    params: {}
- name: call_flows_replace
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: PUT
    data_selector: data
    params: {}
- name: call_flows_list
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: GET
    data_selector: data
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: POST
    data_selector: data
    params: {}
- name: calls_list
  endpoint:
    path: /calls
    method: GET
    data_selector: data
    params: {}
- name: call_flows
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: POST
    data_selector: data
    params:
      id: callflowID
      numbers: []
- name: call_flows_numbers
  endpoint:
    path: /call-flows/{callflowID}/numbers
    method: GET
    data_selector: data
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: POST
    data_selector: data
    params: {}
- name: call_status
  endpoint:
    path: /calls/{callID}
    method: GET
    data_selector: data
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
- name: call
  endpoint:
    path: /calls/{callID}
    method: GET
    data_selector: data
- name: create_call
  endpoint:
    path: /calls
    method: POST
    data_selector: data
- name: update_call
  endpoint:
    path: /calls/{callID}
    method: PUT
    data_selector: data
- name: delete_call
  endpoint:
    path: /calls/{callID}
    method: DELETE
    data_selector: ''
- name: add_participant
  endpoint:
    path: /calls/{callID}/{destination}
    method: POST
    data_selector: ''
- name: list_legs
  endpoint:
    path: /calls/{callID}/legs
    method: GET
    data_selector: data
- name: view_leg
  endpoint:
    path: /calls/{callID}/legs/{legID}
    method: GET
    data_selector: data
- name: delete_leg
  endpoint:
    path: /legs/{legID}
    method: DELETE
    data_selector: ''
- name: legs
  endpoint:
    path: /legs/{legID}
    method: DELETE
    data_selector: 'null'
    params: {}
- name: hold_leg
  endpoint:
    path: /legs/{legID}/hold
    method: POST
    data_selector: 'null'
    params: {}
- name: unhold_leg
  endpoint:
    path: /legs/{legID}/unhold
    method: POST
    data_selector: 'null'
    params: {}
- name: recordings
  endpoint:
    path: /calls/{callID}/legs/{legID}/recordings
    method: GET
    data_selector: data
    params: {}
- name: transcriptions
  endpoint:
    path: /recordings/{recordingID}/transcriptions
    method: POST
    data_selector: data
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
- name: call
  endpoint:
    path: /calls/{callID}
    method: GET
    data_selector: data
- name: create_call
  endpoint:
    path: /calls
    method: POST
    data_selector: data
- name: update_call
  endpoint:
    path: /calls/{callID}
    method: PUT
    data_selector: data
- name: delete_call
  endpoint:
    path: /calls/{callID}
    method: DELETE
- name: add_participant
  endpoint:
    path: /calls/{callID}/{destination}
    method: POST
- name: legs
  endpoint:
    path: /calls/{callID}/legs
    method: GET
    data_selector: data
- name: leg
  endpoint:
    path: /calls/{callID}/legs/{legID}
    method: GET
    data_selector: data
- name: delete_leg
  endpoint:
    path: /legs/{legID}
    method: DELETE
- name: numbers
  endpoint:
    path: /numbers
    method: GET
    data_selector: data
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: data
- name: AMDCompleteEvent
  endpoint:
    path: /
    method: POST
    data_selector: items
    params: {}
- name: legs
  endpoint:
    path: /legs/{legID}
    method: DELETE
- name: hold_leg
  endpoint:
    path: /legs/{legID}/hold
    method: POST
- name: unhold_leg
  endpoint:
    path: /legs/{legID}/unhold
    method: POST
- name: recordings
  endpoint:
    path: /calls/{callID}/legs/{legID}/recordings
    method: GET
- name: transcriptions
  endpoint:
    path: /recordings/{recordingID}/transcriptions
    method: POST
- name: numbers
  endpoint:
    path: /numbers
    method: GET
    data_selector: data
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: data
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: data
- name: voicemessages
  endpoint:
    path: /voicemessages
    method: POST
    data_selector: records
- name: voicemessages_get
  endpoint:
    path: /voicemessages/{voiceMessageId}
    method: GET
    data_selector: records
- name: voicemessages_delete
  endpoint:
    path: /voicemessages/{voiceMessageId}
    method: DELETE
    data_selector: records
- name: voicemessages
  endpoint:
    path: /voicemessages
    method: POST
    data_selector: voiceMessages
- name: voicemessages_get
  endpoint:
    path: /voicemessages/{voiceMessageId}
    method: GET
    data_selector: voiceMessages
- name: voicemessages_delete
  endpoint:
    path: /voicemessages/{voiceMessageId}
    method: DELETE
    data_selector: voiceMessages
- name: voicemessages
  endpoint:
    path: /voicemessages
    method: POST
    data_selector: id
    params:
      body: The body of the SMS message
      recipients: array of recipient msisdns
- name: voice_message_status
  endpoint:
    path: /voicemessages/{voiceMessageID}
    method: GET
    data_selector: id
    params:
      id: A unique random ID
- name: list_voicemessages
  endpoint:
    path: /voicemessages/
    method: GET
    data_selector: items
    params:
      offset: int
      limit: int
- name: voice_message
  endpoint:
    path: /voicemessages
    method: POST
    data_selector: id
    params:
      body: The body of the SMS message.
      recipients: array of recipient msisdns.
- name: list_voice_messages
  endpoint:
    path: /voicemessages
    method: GET
    data_selector: items
    params: {}
- name: view_voice_message
  endpoint:
    path: /voicemessages/{voiceMessageID}
    method: GET
    data_selector: id
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
- name: sms
  endpoint:
    path: /sms
    method: POST
    data_selector: messages
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: data
    params: {}
- name: sms
  endpoint:
    path: /sms
    method: POST
    data_selector: messages
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
    params: {}
- name: start_conversation
  endpoint:
    path: /conversations/start
    method: POST
    data_selector: response
    params: {}
- name: reply_conversation
  endpoint:
    path: /v1/conversations/{conversation_id}/messages
    method: POST
    data_selector: response
    params: {}
- name: send_message
  endpoint:
    path: /v1/send
    method: POST
    data_selector: response
    params: {}
- name: start_conversation
  endpoint:
    path: /conversations/start
    method: POST
    data_selector: null
    params: {}
- name: reply_conversation
  endpoint:
    path: /v1/conversations/{conversation_id}/messages
    method: POST
    data_selector: null
    params: {}
- name: send_message
  endpoint:
    path: /v1/send
    method: POST
    data_selector: null
    params: {}
- name: webhook
  endpoint:
    path: /v1/webhooks
    method: POST
    data_selector: null
    params: {}
- name: list_webhooks
  endpoint:
    path: /v1/webhooks
    method: GET
    data_selector: null
    params: {}
- name: get_webhook
  endpoint:
    path: /v1/webhooks/{id}
    method: GET
    data_selector: null
    params: {}
- name: update_webhook
  endpoint:
    path: /v1/webhooks/{id}
    method: PATCH
    data_selector: null
    params: {}
- name: delete_webhook
  endpoint:
    path: /v1/webhooks/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: conversations
  endpoint:
    path: /v1/conversations
    method: GET
    data_selector: items
    params:
      limit: '10'
      offset: '10'
- name: webhook
  endpoint:
    path: /v1/webhooks
    method: POST
    data_selector: null
    params: {}
- name: list_webhooks
  endpoint:
    path: /v1/webhooks
    method: GET
    data_selector: items
    params: {}
- name: get_webhook
  endpoint:
    path: /v1/webhooks/{id}
    method: GET
    data_selector: null
    params: {}
- name: update_webhook
  endpoint:
    path: /v1/webhooks/{id}
    method: PATCH
    data_selector: null
    params: {}
- name: delete_webhook
  endpoint:
    path: /v1/webhooks/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: conversations
  endpoint:
    path: /v1/conversations
    method: GET
    data_selector: items
    params:
      limit: 10
      offset: 10
- name: get_conversation
  endpoint:
    path: /v1/conversations/{id}
    method: GET
    data_selector: Conversation
    params: {}
- name: update_conversation
  endpoint:
    path: /v1/conversations/{id}
    method: PATCH
    data_selector: Conversation
    params: {}
- name: get_conversations_by_contact
  endpoint:
    path: /v1/conversations/contact/{id}
    method: GET
    data_selector: items
    params: {}
- name: get_messages_in_conversation
  endpoint:
    path: /v1/conversations/{id}/messages
    method: GET
    data_selector: items
    params: {}
- name: get_message
  endpoint:
    path: /v1/messages/{id}
    method: GET
    data_selector: Message
    params: {}
- name: list_messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: items
    params: {}
- name: conversation
  endpoint:
    path: /v1/conversations/{id}
    method: GET
    data_selector: Conversation
- name: update_conversation
  endpoint:
    path: /v1/conversations/{id}
    method: PATCH
    data_selector: Conversation
- name: conversations_by_contact
  endpoint:
    path: /v1/conversations/contact/{id}
    method: GET
    data_selector: items
- name: messages_in_conversation
  endpoint:
    path: /v1/conversations/{id}/messages
    method: GET
    data_selector: items
- name: message
  endpoint:
    path: /v1/messages/{id}
    method: GET
    data_selector: Message
- name: list_messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: items
- name: messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: messages
- name: webhooks
  endpoint:
    path: /v1/webhooks
    method: GET
    data_selector: webhooks
- name: messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: messages
- name: webhooks
  endpoint:
    path: /v1/webhooks
    method: GET
    data_selector: webhooks
- name: email
  endpoint:
    path: /v1/send
    method: POST
    data_selector: id
- name: email
  endpoint:
    path: /v1/send
    method: POST
    data_selector: message
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
    params: {}
- name: create_contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: records
    params: {}
- name: get_contact
  endpoint:
    path: /contacts/{id}
    method: GET
    data_selector: records
    params: {}
- name: update_contact
  endpoint:
    path: /contacts/{id}
    method: PATCH
    data_selector: records
    params: {}
- name: delete_contact
  endpoint:
    path: /contacts/{id}
    method: DELETE
    data_selector: records
    params: {}
- name: add_identifier
  endpoint:
    path: /contacts/{id}/identifiers
    method: POST
    data_selector: records
    params: {}
- name: delete_identifier
  endpoint:
    path: /contacts/{id}/identifiers/{id}
    method: DELETE
    data_selector: records
    params: {}
- name: import_contacts
  endpoint:
    path: /import/contacts
    method: POST
    data_selector: records
    params: {}
- name: import_status
  endpoint:
    path: /import/contacts/{import_id}/status
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
    params: {}
- name: create_contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: records
    params: {}
- name: view_contact
  endpoint:
    path: /contacts/{id}
    method: GET
    data_selector: records
    params: {}
- name: update_contact
  endpoint:
    path: /contacts/{id}
    method: PATCH
    data_selector: records
    params: {}
- name: delete_contact
  endpoint:
    path: /contacts/{id}
    method: DELETE
    data_selector: records
    params: {}
- name: add_identifier
  endpoint:
    path: /contacts/{id}/identifiers
    method: POST
    data_selector: records
    params: {}
- name: delete_identifier
  endpoint:
    path: /contacts/{id}/identifiers/{id}
    method: DELETE
    data_selector: records
    params: {}
- name: import_contacts
  endpoint:
    path: /import/contacts
    method: POST
    data_selector: records
    params: {}
- name: import_status
  endpoint:
    path: /import/contacts/{import_id}/status
    method: GET
    data_selector: records
    params: {}
- name: identifiers
  endpoint:
    path: /contacts/{id}/identifiers
    method: GET
    data_selector: items
    params: {}
- name: create_contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: id
    params: {}
- name: view_contact
  endpoint:
    path: /contacts/{id}
    method: GET
    data_selector: id
    params: {}
- name: update_contact
  endpoint:
    path: /contacts/{id}
    method: PATCH
    data_selector: id
    params: {}
- name: upsert_contact
  endpoint:
    path: /ops/contacts/upsert
    method: POST
    data_selector: contactId
    params: {}
- name: identifiers
  endpoint:
    path: /v2/contacts/{id}/identifiers
    method: GET
    data_selector: items
- name: create_contact
  endpoint:
    path: /v2/contacts
    method: POST
    data_selector: id
- name: view_contact
  endpoint:
    path: /v2/contacts/{id}
    method: GET
    data_selector: id
- name: update_contact
  endpoint:
    path: /v2/contacts/{id}
    method: PATCH
    data_selector: id
- name: upsert_contact
  endpoint:
    path: /v2/ops/contacts/upsert
    method: POST
    data_selector: contactId
- name: merge_contacts
  endpoint:
    path: /ops/contacts/merge
    method: POST
    data_selector: id
    params: {}
- name: list_identifiers
  endpoint:
    path: /contacts/{id}/identifiers
    method: GET
    data_selector: items
    params: {}
- name: get_identifier
  endpoint:
    path: /contacts/{id}/identifiers/{identifier_id}
    method: GET
    data_selector: ''
    params: {}
- name: add_identifier
  endpoint:
    path: /contacts/{id}/identifiers
    method: POST
    data_selector: id
    params: {}
- name: delete_identifier
  endpoint:
    path: /contacts/{id}/identifiers/{identifier_id}
    method: DELETE
    data_selector: ''
    params: {}
- name: import_contacts
  endpoint:
    path: /import/contacts
    method: POST
    data_selector: id
    params: {}
- name: merge_contacts
  endpoint:
    path: /ops/contacts/merge
    method: POST
    data_selector: id
- name: list_identifiers
  endpoint:
    path: /contacts/{id}/identifiers
    method: GET
    data_selector: items
- name: get_identifier
  endpoint:
    path: /contacts/{id}/identifiers/{identifier_id}
    method: GET
    data_selector: ''
- name: add_identifier
  endpoint:
    path: /contacts/{id}/identifiers
    method: POST
    data_selector: id
- name: delete_identifier
  endpoint:
    path: /contacts/{id}/identifiers/{identifier_id}
    method: DELETE
    data_selector: ''
- name: import_contacts
  endpoint:
    path: /import/contacts
    method: POST
    data_selector: id
- name: templates
  endpoint:
    path: /v2/platforms/whatsapp/templates
    method: POST
    data_selector: ''
    params: {}
- name: list_templates
  endpoint:
    path: /v3/platforms/whatsapp/templates
    method: GET
    data_selector: ''
    params:
      limit: 50
- name: delete_template
  endpoint:
    path: /v2/platforms/whatsapp/templates/{name}
    method: DELETE
    data_selector: none
    params:
      wabaId: ''
      channelId: ''
- name: templates
  endpoint:
    path: /v2/platforms/whatsapp/templates
    method: POST
    data_selector: components
    params: {}
- name: list_templates
  endpoint:
    path: /v3/platforms/whatsapp/templates
    method: GET
    data_selector: items
    params: {}
- name: fetch_template_by_name
  endpoint:
    path: /v2/platforms/whatsapp/templates/{name}
    method: GET
    data_selector: components
    params: {}
- name: fetch_template_by_name_and_language
  endpoint:
    path: /v2/platforms/whatsapp/templates/{name}/{language}
    method: GET
    data_selector: components
    params: {}
- name: delete_template
  endpoint:
    path: /v2/platforms/whatsapp/templates/{name}
    method: DELETE
    params:
      name: string
      wabaId: string
      channelId: string
- name: upload_file
  endpoint:
    path: /v1/files
    method: POST
- name: file
  endpoint:
    path: /v1/files/{id}
    method: DELETE
    data_selector: null
    params:
      id: string
- name: delete_file
  endpoint:
    path: /v1/files/{id}
    method: DELETE
    data_selector: null
    params:
      id: string
- name: widget
  endpoint:
    path: /widget
    method: GET
    data_selector: widgetData
- name: available_phone_numbers
  endpoint:
    path: /v1/available-phone-numbers/{countryCode}
    method: GET
    data_selector: items
    params:
      countryCode: string
- name: purchase_phone_number
  endpoint:
    path: /v1/phone-numbers
    method: POST
    data_selector: number
    params:
      countryCode: string
      billingIntervalMonths: integer
- name: fetch_purchased_phone_numbers
  endpoint:
    path: /v1/phone-numbers
    method: GET
    data_selector: items
    params: {}
- name: fetch_back_order_product_details
  endpoint:
    path: /v1/products/{productID}
    method: GET
    data_selector: ''
    params:
      productID: integer
- name: create_number_pool
  endpoint:
    path: /v1/pools
    method: POST
    data_selector: id
    params:
      poolName: string
      service: string
      configuration: object
- name: available_phone_numbers
  endpoint:
    path: /v1/available-phone-numbers/{countryCode}
    method: GET
    data_selector: items
    params:
      countryCode: string
      number: string
      features: array
      type: string
      limit: integer
      search_pattern: string
      exclude_numbers_require_verification: boolean
      prices: boolean
- name: purchase_phone_number
  endpoint:
    path: /v1/phone-numbers
    method: POST
    data_selector: ''
    params:
      number: string
      countryCode: string
      billingIntervalMonths: integer
- name: fetch_purchased_phone_numbers
  endpoint:
    path: /v1/phone-numbers
    method: GET
    data_selector: items
    params:
      limit: integer
      offset: integer
      features: array
      tags: array
      number: string
      region: string
      locality: string
      type: string
- name: fetch_specific_phone_number
  endpoint:
    path: /v1/phone-numbers/{phoneNumber}
    method: GET
    data_selector: ''
    params: {}
- name: update_purchased_phone_number
  endpoint:
    path: /v1/phone-numbers/{phoneNumber}
    method: PATCH
    data_selector: ''
    params: {}
- name: create_number_pool
  endpoint:
    path: /v1/pools
    method: POST
    data_selector: ''
    params:
      poolName: string
      service: string
      configuration: object
- name: list_pools
  endpoint:
    path: /v1/pools
    method: GET
    data_selector: items
- name: fetch_pool
  endpoint:
    path: /v1/pools/{poolName}
    method: GET
    data_selector: Pool
- name: edit_pool
  endpoint:
    path: /v1/pools/{poolName}
    method: PUT
    data_selector: Pool
- name: remove_pool
  endpoint:
    path: /v1/pools/{poolName}
    method: DELETE
- name: list_pool_numbers
  endpoint:
    path: /v1/pools/{poolName}/numbers
    method: GET
    data_selector: numbers
- name: add_numbers_to_pool
  endpoint:
    path: /v1/pools/{poolName}/numbers
    method: POST
- name: remove_numbers_from_pool
  endpoint:
    path: /v1/pools/{poolName}/numbers
    method: DELETE
- name: child_account
  endpoint:
    path: /child-accounts/
    method: GET
    data_selector: ''
    params:
      limit: 100
- name: create_child_account
  endpoint:
    path: /child-accounts/
    method: POST
    data_selector: ''
    params: {}
- name: edit_child_account
  endpoint:
    path: /child-accounts/{id}
    method: PATCH
    data_selector: ''
    params: {}
- name: fetch_child_account
  endpoint:
    path: /child-accounts/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_child_account
  endpoint:
    path: /child-accounts/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: list_pools
  endpoint:
    path: /v1/pools
    method: GET
    data_selector: items
    params:
      limit: 20
      offset: 0
- name: fetch_pool
  endpoint:
    path: /v1/pools/{poolName}
    method: GET
    data_selector: poolName
    params: {}
- name: edit_pool
  endpoint:
    path: /v1/pools/{poolName}
    method: PUT
    data_selector: poolName
    params: {}
- name: remove_pool
  endpoint:
    path: /v1/pools/{poolName}
    method: DELETE
    data_selector: ''
    params: {}
- name: list_pool_numbers
  endpoint:
    path: /v1/pools/{poolName}/numbers
    method: GET
    data_selector: numbers
    params:
      limit: 20
      offset: 0
- name: add_numbers_to_pool
  endpoint:
    path: /v1/pools/{poolName}/numbers
    method: POST
    data_selector: success
    params: {}
- name: remove_numbers_from_pool
  endpoint:
    path: /v1/pools/{poolName}/numbers
    method: DELETE
    data_selector: ''
    params: {}
- name: verify
  endpoint:
    path: /verify
    method: POST
- name: get_verify
  endpoint:
    path: /verify/{verifyId}
    method: GET
- name: delete_verify
  endpoint:
    path: /verify/{verifyId}
    method: DELETE
- name: verify
  endpoint:
    path: /verify
    method: POST
    data_selector: id
    params: {}
- name: verify_token
  endpoint:
    path: /verify/{verifyId}
    method: GET
    data_selector: id
    params: {}
- name: view_verify
  endpoint:
    path: /verify/{verifyId}
    method: GET
    data_selector: id
    params: {}
- name: delete_verify
  endpoint:
    path: /verify/{verifyId}
    method: DELETE
    data_selector: id
    params: {}
- name: child_account
  endpoint:
    path: /child-accounts/
    method: POST
    data_selector: ''
    params: {}
- name: child_account_edit
  endpoint:
    path: /child-accounts/{id}
    method: PATCH
    data_selector: ''
    params: {}
- name: child_account_fetch
  endpoint:
    path: /child-accounts/{id}
    method: GET
    data_selector: ''
    params: {}
- name: child_accounts_fetch_all
  endpoint:
    path: /child-accounts/
    method: GET
    data_selector: ''
    params:
      limit: 100
- name: child_account_delete
  endpoint:
    path: /child-accounts/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: verify
  endpoint:
    path: /verify
    method: POST
- name: get_verify
  endpoint:
    path: /verify/{verifyId}
    method: GET
- name: delete_verify
  endpoint:
    path: /verify/{verifyId}
    method: DELETE
- name: mms
  endpoint:
    path: /mms
    method: POST
- name: get_mms
  endpoint:
    path: /mms/{messageId}
    method: GET
- name: delete_mms
  endpoint:
    path: /mms/{messageId}
    method: DELETE
- name: message
  endpoint:
    path: /mms/{messageId}
    method: GET
    data_selector: message
    params: {}
- name: send_message
  endpoint:
    path: /mms
    method: POST
    data_selector: message
    params: {}
- name: verify
  endpoint:
    path: /verify
    method: POST
    data_selector: id
    params: {}
- name: verify_token
  endpoint:
    path: /verify/{verifyId}
    method: GET
    data_selector: id
    params: {}
- name: view_verify
  endpoint:
    path: /verify/{verifyId}
    method: GET
    data_selector: id
    params: {}
- name: delete_verify
  endpoint:
    path: /verify/{verifyId}
    method: DELETE
    data_selector: id
    params: {}
- name: hlr
  endpoint:
    path: /hlr
    method: POST
- name: hlr_get
  endpoint:
    path: /hlr/{hlrId}
    method: GET
- name: hlr_delete
  endpoint:
    path: /hlr/{hlrId}
    method: DELETE
- name: mms
  endpoint:
    path: /mms
    method: POST
- name: get_mms
  endpoint:
    path: /mms/{messageId}
    method: GET
- name: delete_mms
  endpoint:
    path: /mms/{messageId}
    method: DELETE
- name: hlr
  endpoint:
    path: /hlr
    method: POST
    data_selector: id
    params:
      msisdn: int
      reference: string
- name: hlr_view
  endpoint:
    path: /hlr/{hlrId}
    method: GET
    data_selector: id
    params:
      id: string
- name: balance
  endpoint:
    path: /balance
    method: GET
    data_selector: balance
- name: message
  endpoint:
    path: /mms/{messageId}
    method: GET
    data_selector: message
    params: {}
- name: send_message
  endpoint:
    path: /mms
    method: POST
    data_selector: message
    params: {}
- name: lookup
  endpoint:
    path: /lookup/{phoneNumber}
    method: GET
- name: hlr_lookup
  endpoint:
    path: /lookup/{phoneNumber}/hlr
    method: GET
- name: hlr_create
  endpoint:
    path: /lookup/{phoneNumber}/hlr
    method: POST
- name: hlr
  endpoint:
    path: /hlr
    method: POST
- name: hlr_get
  endpoint:
    path: /hlr/{hlrId}
    method: GET
- name: hlr_delete
  endpoint:
    path: /hlr/{hlrId}
    method: DELETE
- name: hlr
  endpoint:
    path: /hlr
    method: POST
    data_selector: ''
    params:
      msisdn: int
      reference: string
- name: hlr_id
  endpoint:
    path: /hlr/{hlrId}
    method: GET
    data_selector: ''
    params:
      id: string
- name: balance
  endpoint:
    path: /balance
    method: GET
    data_selector: balance
- name: lookup
  endpoint:
    path: /lookup/{phoneNumber}
    method: GET
    data_selector: null
    params:
      phoneNumber: int
      countryCode: string
- name: hlr
  endpoint:
    path: /lookup/{phoneNumber}/hlr
    method: POST
    data_selector: null
    params:
      phoneNumber: int
      reference: string
      countryCode: string
- name: view_hlr
  endpoint:
    path: /lookup/{phoneNumber}/hlr
    method: GET
    data_selector: null
    params:
      phoneNumber: int
      countryCode: string
- name: lookup
  endpoint:
    path: /lookup/{phoneNumber}
    method: GET
- name: hlr
  endpoint:
    path: /lookup/{phoneNumber}/hlr
    method: GET
- name: hlr_post
  endpoint:
    path: /lookup/{phoneNumber}/hlr
    method: POST
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
    params: {}
- name: contact_by_id
  endpoint:
    path: /contacts/{contactId}
    method: GET
    data_selector: record
    params: {}
- name: create_contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: record
    params: {}
- name: update_contact
  endpoint:
    path: /contacts/{contactId}
    method: PATCH
    data_selector: record
    params: {}
- name: delete_contact
  endpoint:
    path: /contacts/{contactId}
    method: DELETE
    data_selector: record
    params: {}
- name: lookup
  endpoint:
    path: /lookup/{phoneNumber}
    method: GET
    data_selector: href
    params: {}
- name: hlr
  endpoint:
    path: /lookup/{phoneNumber}/hlr
    method: POST
    data_selector: id
    params: {}
- name: view_hlr
  endpoint:
    path: /lookup/{phoneNumber}/hlr
    method: GET
    data_selector: id
    params: {}
- name: contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: records
    params:
      msisdn: string
- name: view_contact
  endpoint:
    path: /contacts/{contactId}
    method: GET
    data_selector: records
    params:
      id: string
- name: update_contact
  endpoint:
    path: /contacts/{contactId}
    method: PATCH
    data_selector: records
    params:
      id: string
- name: delete_contact
  endpoint:
    path: /contacts/{contactId}
    method: DELETE
    data_selector: records
    params:
      id: string
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: contact_by_id
  endpoint:
    path: /contacts/{contactId}
    method: GET
    data_selector: records
- name: create_contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: records
- name: update_contact
  endpoint:
    path: /contacts/{contactId}
    method: PATCH
    data_selector: records
- name: delete_contact
  endpoint:
    path: /contacts/{contactId}
    method: DELETE
    data_selector: records
- name: groups
  endpoint:
    path: /groups
    method: POST
- name: get_groups
  endpoint:
    path: /groups
    method: GET
- name: get_group_by_id
  endpoint:
    path: /groups/{groupId}
    method: GET
- name: get_group_contacts
  endpoint:
    path: /groups/{groupId}/contacts
    method: GET
- name: update_group
  endpoint:
    path: /groups/{groupId}
    method: PATCH
- name: update_group_contacts
  endpoint:
    path: /groups/{groupId}/contacts
    method: PUT
- name: delete_group
  endpoint:
    path: /groups/{groupId}
    method: DELETE
- name: delete_group_contact
  endpoint:
    path: /groups/{groupId}/contacts/{contactId}
    method: DELETE
- name: contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: records
    params:
      msisdn: string
- name: view_contact
  endpoint:
    path: /contacts/{contactId}
    method: GET
    data_selector: records
    params:
      id: string
- name: update_contact
  endpoint:
    path: /contacts/{contactId}
    method: PATCH
    data_selector: records
    params:
      id: string
- name: delete_contact
  endpoint:
    path: /contacts/{contactId}
    method: DELETE
    data_selector: records
    params:
      id: string
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params:
      limit: '200'
      offset: '0'
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: group
    params: {}
- name: view_group
  endpoint:
    path: /groups/{groupId}
    method: GET
    data_selector: group
    params: {}
- name: update_group
  endpoint:
    path: /groups/{groupId}
    method: PATCH
    data_selector: group
    params: {}
- name: add_contact_to_group
  endpoint:
    path: /groups/{groupId}/contacts
    method: PUT
    data_selector: contacts
    params: {}
- name: remove_contact_from_group
  endpoint:
    path: /groups/{groupId}/contacts/{contactId}
    method: DELETE
    data_selector: contact
    params: {}
- name: delete_group
  endpoint:
    path: /groups/{groupId}
    method: DELETE
    data_selector: group
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: group_by_id
  endpoint:
    path: /groups/{groupId}
    method: GET
    data_selector: group
- name: group_contacts
  endpoint:
    path: /groups/{groupId}/contacts
    method: GET
    data_selector: contacts
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: group
- name: update_group
  endpoint:
    path: /groups/{groupId}
    method: PATCH
    data_selector: group
- name: delete_group
  endpoint:
    path: /groups/{groupId}
    method: DELETE
    data_selector: group
- name: sms
  endpoint:
    path: /reporting/sms
    method: GET
    data_selector: items
    params:
      periodStart: ''
      periodEnd: ''
      periodGroup: day
      offset: 0
      limit: 500
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: group
    params:
      name: string
- name: view_group
  endpoint:
    path: /groups/{groupId}
    method: GET
    data_selector: group
    params: {}
- name: update_group
  endpoint:
    path: /groups/{groupId}
    method: PATCH
    data_selector: group
    params:
      name: string
- name: add_contact_to_group
  endpoint:
    path: /groups/{groupId}/contacts
    method: PUT
    data_selector: empty
    params:
      ids: array
- name: remove_contact_from_group
  endpoint:
    path: /groups/{groupId}/contacts/{contactId}
    method: DELETE
    data_selector: empty
    params: {}
- name: delete_group
  endpoint:
    path: /groups/{groupId}
    method: DELETE
    data_selector: empty
    params: {}
- name: list_groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params:
      limit: int
      offset: int
- name: call
  endpoint:
    path: /reporting/call
    method: GET
    data_selector: items
    params:
      periodStart: ''
      periodEnd: ''
- name: leg
  endpoint:
    path: /reporting/leg
    method: GET
    data_selector: items
    params:
      periodStart: datetime
      periodEnd: datetime
      periodGroup: day
      timezone: UTC
      groupBy: []
      filterBy: {}
      sort: ''
      offset: 0
      limit: 500
- name: sms
  endpoint:
    path: /reporting/sms
    method: GET
    data_selector: items
    params:
      offset: 0
      limit: 500
- name: conversations_message
  endpoint:
    path: /reporting/conversations/message
    method: GET
    data_selector: items
    params: {}
- name: flow
  endpoint:
    path: /flow
    method: GET
    data_selector: items
    params: {}
- name: invocation
  endpoint:
    path: /reporting/invocation
    method: GET
    data_selector: items
    params:
      periodGroup: month
- name: step
  endpoint:
    path: /reporting/step
    method: GET
    data_selector: items
    params:
      periodGroup: month
- name: call
  endpoint:
    path: /reporting/call
    method: GET
    data_selector: items
    params:
      periodStart: datetime
      periodEnd: datetime
      periodGroup: day
      timezone: UTC
      groupBy: []
      filterBy: {}
      offset: 0
      limit: 500
- name: step
  endpoint:
    path: /reporting/step
    method: GET
    data_selector: items
    params:
      periodGroup: none
      offset: 0
      limit: 100
- name: email
  endpoint:
    path: /reporting/conversations/email
    method: GET
    data_selector: items
    params:
      periodGroup: day
      offset: 0
      limit: 100
- name: leg
  endpoint:
    path: /reporting/leg
    method: GET
    data_selector: items
    params:
      offset: 0
      limit: 100
- name: conversations_message
  endpoint:
    path: /reporting/conversations/message
    method: GET
    data_selector: items
    params:
      periodStart: '2019-01-01T00:00:00Z'
      periodEnd: '2019-01-30T00:00:00Z'
- name: flow
  endpoint:
    path: /flow
    method: GET
    data_selector: items
- name: contacts
  endpoint:
    path: /contacts
    method: POST
- name: get_contacts
  endpoint:
    path: /contacts
    method: GET
- name: get_contact_by_id
  endpoint:
    path: /contacts/{contactId}
    method: GET
- name: get_contact_groups
  endpoint:
    path: /contacts/{contactId}/groups
    method: GET
- name: get_contact_messages
  endpoint:
    path: /contacts/{contactId}/messages
    method: GET
- name: update_contact
  endpoint:
    path: /contacts/{contactId}
    method: PATCH
- name: delete_contact
  endpoint:
    path: /contacts/{contactId}
    method: DELETE
- name: contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: contact
    params:
      msisdn: string
- name: view_contact
  endpoint:
    path: /contacts/{contactId}
    method: GET
    data_selector: contact
    params:
      id: string
- name: update_contact
  endpoint:
    path: /contacts/{contactId}
    method: PATCH
    data_selector: contact
    params:
      id: string
- name: delete_contact
  endpoint:
    path: /contacts/{contactId}
    method: DELETE
    data_selector: contact
    params:
      id: string
- name: invocation
  endpoint:
    path: /reporting/invocation
    method: GET
    data_selector: items
    params:
      periodGroup: month
- name: step
  endpoint:
    path: /reporting/step
    method: GET
    data_selector: items
    params:
      periodGroup: month
- name: steps
  endpoint:
    path: /reporting/step
    method: GET
    data_selector: items
    params:
      periodGroup: none
      offset: 0
      limit: 100
- name: email_conversations
  endpoint:
    path: /reporting/conversations/email
    method: GET
    data_selector: items
    params:
      periodGroup: none
      offset: 0
      limit: 100
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: contact_by_id
  endpoint:
    path: /contacts/{contactId}
    method: GET
    data_selector: record
- name: create_contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: record
- name: update_contact
  endpoint:
    path: /contacts/{contactId}
    method: PATCH
    data_selector: record
- name: delete_contact
  endpoint:
    path: /contacts/{contactId}
    method: DELETE
- name: contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: id
    params: {}
- name: view_contact
  endpoint:
    path: /contacts/{contactId}
    method: GET
    data_selector: id
    params: {}
- name: update_contact
  endpoint:
    path: /contacts/{contactId}
    method: PATCH
    data_selector: id
    params: {}
- name: delete_contact
  endpoint:
    path: /contacts/{contactId}
    method: DELETE
    data_selector: id
    params: {}
notes:
- Sticky VMN's ensure that the same Sender phone number is selected each time a specific
  recipient receives an SMS from your web application.
- Connect to all servers for redundancy.
- Request and response payloads are formatted as JSON using UTF-8 encoding and URL
  encoded values.
- API keys carry significant privileges. Keep them secure and do not share them in
  publicly accessible areas.
- Each message is identified by a unique random ID.
- Each business account must apply to WhatsApp for approval before gaining access
  to the WhatsApp Business API.
- WhatsApp requires you to use a pre-approved message template to initiate a conversation.
- The sticker image must be available in a public URL or uploaded to MessageBird
- The image format must be image/webp
- The image size can't be bigger than 100 KB
- The image dimensions must be exactly 512 x 512
- Animated stickers are not supported at the moment
- Native first party and third party WhatsApp stickers are not supported for outbound
  messages
- Only one catalog can be connected per WhatsApp Business Account.
- The WhatsApp referral property will be provided when a user clicks on an advertisement
  with a Click to WhatsApp call-to-action or a user clicks on the WhatsApp button
  in a Facebook post.
- The Voice Messaging API uses HTTP verbs and a RESTful endpoint structure with an
  access key that is used as the API Authorization framework.
- Request and response payloads are formatted as JSON.
- The Conversations API uses HTTP verbs and a RESTful endpoint structure with an access
  key that is used as the API Authorization.
- Emails will be received from a no-reply email address notifications@messagebird.com.
- You can configure these notification settings directly in your Notifications Center
  in the Dashboard.
- For notifications, you can setup multiple emails and webhooks in each MessageBird
  product available in the Notifications Center, and then subscribe to specific events/notification
  types.
- Messages can only be sent within the US and Canada.
- Messages are identified by a unique ID.
- You can only send MMS within the US and Canada.
- Maximum of 50 recipients can be entered per message object.
- Values are not automatically urlencoded.
- A maximum of 50 recipients can be entered per message object.
- XML Element tags and attributes are case-sensitive.
- This app works best with JavaScript enabled.
- Uses AccessKey for authentication
- Only one default call flow is allowed
- To ensure high availability, the totalCount value may return 999999999 when determining
  the precise count takes more than 2 seconds to calculate.
- To ensure high availability, the totalCount value returned from GET /calls may return
  999999999 when determining the precise count takes more than 2 seconds to calculate.
- Call flows can return nulls in certain cases.
- Only one default call flow is allowed.
- Dynamic call flows can be fetched from a web service.
- API requires AccessKey for authentication
- The `totalCount` value returned from `GET /calls` may return `999999999` when determining
  the precise count takes more than 2 seconds to calculate.
- The totalCount value may return 999999999 when determining the precise count takes
  more than 2 seconds to calculate.
- Check that the data property of the response object is not null when scripting requests.
- For high availability, check that the data property of the response is not null
  when scripting requests.
- The default value for the record attribute is false.
- Dynamic call flows can be fetched from a configured URL.
- The `totalCount` value returned may be unreliable if it takes more than 2 seconds
  to calculate.
- It is suggested not to depend on the completeness of the data received in the callbacks
  as some fields' availability may vary depending on the type and state of call.
- The Content-Type HTTP header needs to be set to application/xml when using XML.
- XML and JSON formats are supported for call flows.
- The API uses AccessKey for authorization in the header.
- Uses API key for authentication — AccessKey required.
- The totalCount value returned from GET /calls may return 999999999 when determining
  the precise count takes more than 2 seconds to calculate.
- There is a limit of 5 webhooks allowed per number.
- For AMD events specifically the call and leg data might not be fully synchronised
  with the actual state of the call.
- Per request, a max of 50 recipients can be entered.
- Requires API access key for authentication
- Rate limiting applies to all endpoints.
- The Conversations API is an omnichannel messaging solution to unify sending and
  receiving messages across all platforms in one conversation thread.
- API access key is required for authentication.
- The Conversations API uses HTTP verbs and RESTful endpoints structure with an access
  key that is used as the API Authorization.
- Messages are returned in the order they were created, with newest messages returned
  first.
- The entire payload (text + html + attachments + inline images) is limited to 20
  MBs. It supports all types of file.
- Requires setup of Messaging API for attachments.
- Only opus codecs, base audio/ogg is not supported
- The sticker dimensions must be exactly 512x512 and animated stickers are not supported.
- Only H.264 video codec and AAC audio codec is supported. Only videos with a single
  audio stream are supported.
- The maximum resolution for images is 85 Megapixel.
- Some identifiers are deprecated, use Identifiers instead for primary email and phone.
- Handles various contact operations including merging, listing, adding, and deleting
  identifiers.
- Supports recent versions of major desktop and mobile browsers.
- Be careful when renaming a pool because all requests for the old name will fail.
- The originator email domain needs to be set up as an email channel in your account
  at https://dashboard.messagebird.com/en/channels/
- An MMS message can carry up to 10 media attachments
- MMS media URL should be public accessible and respond within 5 seconds
- Maximum file size of an MMS media attachment is 1MB (1024KB)
- HLR responses must return a 200 OK HTTP header.
- Request and response payloads are formatted as JSON
- Uses UTF-8 encoding and URL encoded values
- HLR responses should respond with a 200 OK HTTP header.
- Request and response payloads are formatted as JSON using UTF-8 encoding.
- Pagination is only used with JSON responses.
- The default limit is 500, the maximum limit is 2500.
- The desired output format can be specified with the Accept header.
- Valid values are application/json (default) and text/csv.
- A reference token is required for any page after the first.
- Valid values for periodGroup are none, hour, day, week, month, year.
- Default for periodGroup is day.
- The default value for periodGroup is day.
- Requests can include optional parameters for filtering and sorting.
- The ref parameter expires one day after creation.
- Valid values for periodGroup are none, hour, day, week, month, and year.
- 'Default values for parameters include: periodGroup=day, timezone=UTC, limit=500.'
- The desired output format can be specified with the Accept header. Valid values
  are application/json (default) and text/csv.
- Default limit for the number of elements to return is 500, can be increased up to
  2500.
- Default periodGroup is day.
- The ref expires one day after creation and its lifetime cannot be extended.
errors:
- '429 Too Many Requests: Reduce the rate of your requests'
- 'INVALID_REQUEST: Check your request parameters.'
- 'AUTHENTICATION_FAILED: Verify your API key.'
- 'MESSAGE_NOT_DELIVERED: Check recipient number.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API key'
- 'Unauthorized: Check your API access key.'
- '401 Unauthorized: The access key was incorrect'
- '404 Not found: The resources cannot be found'
- '429 Too Many Requests: Rate Limited. Reduce the number of requests'
- '405 Method Not Allowed: The method is not allowed'
- '408 Request Timeout: The request is taking too long to respond'
- '422 Unprocessable Entity: The resource couldn''t be created'
- '5xx Something went wrong on our end: Please try again'
- '2: Request not allowed'
- '9: Missing params'
- '10: Invalid params'
- '20: Not found'
- '21: Bad request'
- '25: Not enough balance'
- '98: API not found'
- '99: Internal error'
- '100: Service unavailable'
- '101: Duplicate entry'
- '102: Ambiguous lookup'
- '401 Unauthorized: Recheck API Authorization'
- '301: The message failed to send. Please check your message is valid, including
  any media, and/or try again later.'
- '302: The contact is not registered on WhatsApp.'
- '470: Failed to send message because you are outside the support window for freeform
  messages to this user. Please use a valid message template.'
- '308: Message rejected because it exceeded the TTL before it was sent to WhatsApp.'
- '400 Bad Request: The request contains invalid/missing data, or is malformed.'
- '401 Unauthorized: The access key is missing or incorrect.'
- '403 Forbidden: Access to the requested resource was forbidden.'
- '404 Not Found: The resource could not be found.'
- '204 No Content: Successful deletion of a call flow.'
- '500 Internal Server Error: Something went wrong on our end, please try again.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API key or token expiration'
- '403 - Forbidden: The user or the network might have rejected the call.'
- '404 - Not Found: The number is unallocated to a subscriber or does not exist.'
- '408 - Request Timeout: Couldn''t find the user in time.'
- '410 - Gone: The user existed once, but is not available here anymore.'
- '480 - Temporarily Unavailable: Callee currently unavailable.'
- '486 - Busy Here: Callee is busy.'
- '500 - Internal Server Error: The server could not fulfill the request due to some
  unexpected condition.'
- '503 - Service Unavailable: The server is undergoing maintenance or is temporarily
  overloaded.'
- '403 - Forbidden: The server understood the request, but is refusing to fulfill
  it.'
- '404 - Not Found: The server has definitive information that the user does not exist
  at the domain specified in the Request-URI.'
- '503 - Service Unavailable: The server is undergoing maintenance or is temporarily
  overloaded and so cannot process the request.'
- '405 Method Not Allowed: The HTTP method is not allowed.'
- '409 Conflict: Request conflict with the current state of the server.'
- '400 Bad Request: Check your parameters.'
- '401 Unauthorized: Invalid API key.'
- '404 Not Found: Call flow does not exist.'
- '401 Unauthorized: Check your AccessKey'
- '404 Not Found: Ensure the callflowID is correct'
- '204 No Content: Successful deletion of a call flow'
- '401 Unauthorized: Invalid AccessKey'
- '404 Not Found: Resource not found'
- '204 No Content: Successful deletion of a call or leg.'
- '401 Unauthorized: Check the API key.'
- '404 Not Found: Resource does not exist.'
- '204 No Content: Successful request.'
- '401 Unauthorized: AccessKey may be invalid.'
- '404 Not Found: The requested resource was not found.'
- '404: Requested recording doesn''t exist.'
- '204 No Content: Success with no response'
- '401 Unauthorized: Check API key validity'
- '204 No Content: Successful delete of a call.'
- '401 Unauthorized: Check your API key.'
- '200 - OK: Successful'
- '484 - Address Incomplete: Request-URI incomplete.'
- '501 - Not Implemented: The server does not have the ability to fulfill the request.'
- '502 - Bad Gateway: The server received an invalid response from a downstream server.'
- '204 No Content: Request was successful and has no content.'
- '401 Unauthorized: Recheck AccessKey validity'
- '404 Not Found: Verify the callflowID or callID'
- '400 Bad Request: Check request parameters'
- '404: Requested resource does not exist.'
- '204 No Content: Request was successful and there is no content to return.'
- '401 Unauthorized: Recheck API key or permissions.'
- '404 Not Found: The requested resource could not be found.'
- '401 Unauthorized: Recheck API access key'
- '401 Unauthorized: Check API access key.'
- '404 Not Found: The requested resource does not exist.'
- '200 OK: Successful request'
- status reports require specific setup in MessageBird dashboard
- '200 OK: Success'
- '401 Unauthorized: Invalid API key'
- '404 Not Found: Voice message not found'
- '404 Not Found: Resource does not exist'
- '429 Too Many Requests: Rate limit exceeded'
- '400 Bad Request: Check the request parameters'
- '404 Not Found: Endpoint does not exist'
- '400 Bad Request: Check your request parameters.'
- '404 Not Found: The endpoint you are trying to access does not exist.'
- '400: Invalid HTTP request. The HTTP response should include details about the error.'
- '401: Unauthorized.'
- '422: The HTTP request is well-formed but was unable to be processed. The HTTP response
  should include details about the error.'
- '429: Too many concurrent requests. Please retry the request with standard exponential
  backoff.'
- '500: Unexpected internal server error. Please retry the request with standard exponential
  backoff.'
- '201: Message accepted and it will be processed asynchronously.'
- '404: Conversation not found.'
- '499: The client closed the connection.'
- 201 Webhook created.
- 400 Invalid HTTP request.
- 401 Unauthorized.
- 422 The HTTP request is well-formed but was unable to be processed.
- 429 Too many concurrent requests. Please retry the request with standard exponential
  backoff.
- 499 The client closed the connection.
- 500 Unexpected internal server error. Please retry the request with standard exponential
  backoff.
- '201: Webhook created.'
- '400: Invalid HTTP request.'
- '422: The HTTP request is well-formed but was unable to be processed.'
- '401 Unauthorized: Recheck API key or access.'
- 404 Conversation not found.
- '200: Ok.'
- '401 Unauthorized: Recheck API key or permissions'
- '400 Bad Request: Check the payload structure for errors.'
- '401 Unauthorized: Verify API key or access token.'
- '404 Not Found: Check the endpoint URL.'
- Request not allowed (incorrect access_key)
- 'Invalid ID: Ensure the contact ID is correct.'
- 'Unauthorized: Check your API key.'
- 4xx range indicates that there was a client side error - for example, due to authentication
  or a missing or wrong parameter.
- 5xx status code indicates that something went wrong on server-side, and you can
  retry using standard exponential backoff
- '4xx: indicates that there was a client side error - for example, due to authentication
  or a missing or wrong parameter.'
- '5xx: indicates that something went wrong on server-side, and you can retry using
  standard exponential backoff'
- '400: The HTTP request is malformed, the details should be available in the HTTP
  response body.'
- '401: The request is not authenticated, please check your access key.'
- '429: Too many requests, please retry using standard exponential backoff'
- '500: Internal server error, please retry using standard exponential backoff'
- '202: Template scheduled for deletion'
- '404: Template not found.'
- '422: WhatsApp sample templates cannot be deleted.'
- '1001: You are requesting with an invalid credential.'
- '204: File successfully deleted.'
- '403: Access forbidden.'
- '404: File not found.'
- '5xx: Unexpected internal server error. Please retry the request with standard exponential
  backoff.'
- 'API_ERROR: Check API usage limits or parameters'
- 'INVALID_PARAMETER: Verify the parameters being sent'
- 'NOT_FOUND: Ensure the pool name exists'
- '403: Not privileged to request the resource'
- 'type: string'
- 'title: A human-readable title of the error.'
- 'detail: What kind of error occurred.'
- '403: Not privileged to request the resource.'
- '204 No Content: The request was successful and there is no content to return.'
- 'InvalidParameter: Check your parameters'
- 'AuthorizationError: Check your API key'
- '204 No Content: Successful deletion'
- '200 OK: Successful operation'
- '204 No Content: Contact deleted successfully'
- '401 Unauthorized: Recheck API key validity'
- '404 Not Found: Contact ID does not exist'
- '204 No Content: Request successful with no content returned'
- '204 Accepted: Request is accepted but no content returned'
- '401 Unauthorized: Invalid AccessKey provided'
- '204 No Content: Request successful, no content returned'
- '204 accepted: Request successful, no content returned'
- '429 Too Many Requests: Excess requests receive this status.'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Verify your access key'
- '401 Unauthorized: Recheck API Key or token expiration'
- '400 Bad Request: Invalid parameters'
- '404 Not Found: Contact does not exist'
auth_info:
  mentioned_objects:
  - AccessKey
client:
  base_url: https://voice.messagebird.com
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
