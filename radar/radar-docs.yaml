resources:
- name: forward_geocode
  endpoint:
    path: /v1/geocode/forward
    method: GET
    data_selector: addresses
    params:
      query: ''
- name: reverse_geocode
  endpoint:
    path: /v1/geocode/reverse
    method: GET
    data_selector: addresses
    params:
      coordinates: ''
- name: ip_geocode
  endpoint:
    path: /v1/geocode/ip
    method: GET
    data_selector: address
    params: {}
- name: autocomplete
  endpoint:
    path: /v1/search/autocomplete
    method: GET
    data_selector: addresses
    params: {}
- name: users
  endpoint:
    path: /v1/search/users
    method: GET
    data_selector: users
    params: {}
- name: geofences
  endpoint:
    path: /v1/search/geofences
    method: GET
    data_selector: geofences
    params: {}
- name: places
  endpoint:
    path: /v1/search/places
    method: GET
    data_selector: places
    params: {}
- name: validate_address
  endpoint:
    path: /v1/addresses/validate
    method: GET
    data_selector: address
    params: {}
- name: route_distance
  endpoint:
    path: /v1/route/distance
    method: GET
    params:
      origin: ''
      destination: ''
      modes: ''
      units: imperial
      avoid: ''
      geometry: ''
- name: route_matrix
  endpoint:
    path: /v1/route/matrix
    method: GET
    params:
      origins: ''
      destinations: ''
      mode: ''
      units: imperial
      avoid: ''
- name: route_match
  endpoint:
    path: /v1/route/match
    method: POST
    params:
      path: ''
      mode: car
      roadAttributes: ''
      units: imperial
      geometry: polyline6
- name: route_directions
  endpoint:
    path: /v1/route/directions
    method: GET
    params:
      locations: ''
      mode: car
      units: imperial
      avoid: ''
      geometry: polyline6
- name: route_optimize
  endpoint:
    path: /v1/route/optimize
    method: GET
    params:
      locations: required
      mode: optional
      units: optional
      geometry: optional
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params:
      limit: 100
- name: user
  endpoint:
    path: /v1/users/:id
    method: GET
    data_selector: user
    params: {}
- name: delete_user
  endpoint:
    path: /v1/users/:id
    method: DELETE
    data_selector: null
    params: {}
- name: trips
  endpoint:
    path: /v1/trips
    method: GET
    data_selector: trips
- name: get_trip
  endpoint:
    path: /v1/trips/:id
    method: GET
    data_selector: trip
- name: create_trip
  endpoint:
    path: /v1/trips
    method: POST
    data_selector: trip
- name: update_trip
  endpoint:
    path: /v1/trips/:id/update
    method: PATCH
    data_selector: trip
- name: delete_trip
  endpoint:
    path: /v1/trips/:id
    method: DELETE
- name: geofences
  endpoint:
    path: /v1/geofences
    method: GET
    data_selector: geofences
    params:
      limit: 100
- name: get_geofence
  endpoint:
    path: /v1/geofences/:id
    method: GET
    data_selector: geofence
- name: upsert_geofence
  endpoint:
    path: /v1/geofences/:tag/:externalId
    method: PUT
- name: delete_geofence
  endpoint:
    path: /v1/geofences/:id
    method: DELETE
- name: get_users_in_geofence
  endpoint:
    path: /v1/geofences/:tag/:externalId/users
    method: GET
    data_selector: users
- name: events
  endpoint:
    path: /v1/events
    method: POST
- name: beacons
  endpoint:
    path: /v1/beacons
    method: GET
- name: get_places_settings
  endpoint:
    path: /v1/settings
    method: GET
- name: update_places_settings
  endpoint:
    path: /v1/settings
    method: PATCH
- name: geofences
  endpoint:
    path: /api/v1/geofences
    method: POST
    data_selector: geofences
- name: trips
  endpoint:
    path: /api/trips
    method: GET
    data_selector: trips
- name: create_beacons
  endpoint:
    path: /api/v1/beacons
    method: POST
    data_selector: beacons
- name: upsert_beacons
  endpoint:
    path: /api/v1/beacons/:tag/:externalId
    method: PUT
    data_selector: beacons
- name: fraud
  endpoint:
    path: /v1/fraud
    method: GET
    data_selector: fraud
- name: regions
  endpoint:
    path: /v1/regions
    method: GET
    data_selector: regions
- name: address_autocomplete
  endpoint:
    path: /api/autocomplete
    method: GET
- name: address_validation
  endpoint:
    path: /api/validate-an-address
    method: GET
- name: places_search
  endpoint:
    path: /api/search-places
    method: GET
- name: geofences_search
  endpoint:
    path: /api/search-geofences
    method: GET
- name: distance
  endpoint:
    path: /api#distance
    method: GET
- name: matrix
  endpoint:
    path: /api#matrix
    method: GET
- name: route_matching
  endpoint:
    path: /api#route-match
    method: GET
- name: directions
  endpoint:
    path: /api#directions
    method: GET
- name: route_optimization
  endpoint:
    path: /api#optimize-route
    method: GET
- name: autocomplete
  endpoint:
    path: /autocomplete
    method: GET
- name: radar_migration_sdk
  endpoint:
    path: /v1/radar-migration-sdk.js
    method: GET
    data_selector: records
    params: {}
- name: geofences
  endpoint:
    path: /geofences
    method: GET
    data_selector: geofences
- name: geofence
  endpoint:
    path: /api#upsert-a-geofence
    method: POST
- name: trips
  endpoint:
    path: /api#list-trips
    method: GET
- name: geofence_search
  endpoint:
    path: /api#search-geofences
    method: GET
    data_selector: geofences
    params:
      radius: 10000
      tag: store
      limit: 10
- name: forward_geocode
  endpoint:
    path: /api#forward-geocode
    method: GET
    data_selector: addresses
    params: {}
- name: IP geocoding
  endpoint:
    path: /api#ip-geocode
    method: GET
- name: maps
  endpoint:
    path: /maps/styles
    method: GET
    data_selector: styles
- name: Map
  endpoint:
    path: /api/maps
    method: GET
- name: maps
  endpoint:
    path: /maps/styles
    method: GET
    data_selector: styles
    params: {}
- name: tracking
  endpoint:
    path: /api/v1/tracking
    method: POST
    data_selector: data
- name: geofencing
  endpoint:
    path: /api/v1/geofencing
    method: POST
    data_selector: data
- name: forward_geocode
  endpoint:
    path: /api/forward-geocode
    method: POST
- name: reverse_geocode
  endpoint:
    path: /api/reverse-geocode
    method: POST
- name: ip_geocode
  endpoint:
    path: /api/ip-geocode
    method: POST
- name: autocomplete
  endpoint:
    path: /api/autocomplete
    method: POST
- name: search_geofences
  endpoint:
    path: /api/search-geofences
    method: POST
- name: search_places
  endpoint:
    path: /api/search-places
    method: POST
- name: validate_address
  endpoint:
    path: /api/validate-address
    method: POST
- name: distance
  endpoint:
    path: /api/distance
    method: POST
- name: matrix
  endpoint:
    path: /api/matrix
    method: POST
- name: track
  endpoint:
    path: /track
    method: POST
    data_selector: result
- name: trip
  endpoint:
    path: /trip
    method: POST
    data_selector: result
- name: getLocation
  endpoint:
    path: /api/getLocation
    method: GET
- name: getContext
  endpoint:
    path: /api/getContext
    method: GET
- name: geocode
  endpoint:
    path: /api/geocode
    method: GET
- name: reverseGeocode
  endpoint:
    path: /api/reverseGeocode
    method: GET
- name: ipGeocode
  endpoint:
    path: /api/ipGeocode
    method: GET
- name: autocomplete
  endpoint:
    path: /api/autocomplete
    method: GET
- name: searchGeofences
  endpoint:
    path: /api/searchGeofences
    method: GET
- name: searchPlaces
  endpoint:
    path: /api/searchPlaces
    method: GET
- name: getDistance
  endpoint:
    path: /api/getDistance
    method: GET
- name: getMatrix
  endpoint:
    path: /api/getMatrix
    method: GET
- name: logConversion
  endpoint:
    path: /api/logConversion
    method: POST
- name: setNotificationOptions
  endpoint:
    path: /api/setNotificationOptions
    method: POST
- name: country
  endpoint:
    path: /countries
    method: GET
    data_selector: countries
- name: webhook_event
  endpoint:
    path: /webhooks
    method: POST
    data_selector: events
- name: radar_place_exited
  endpoint:
    path: /radar_place_exited
    method: GET
    data_selector: records
- name: radar_country_entered
  endpoint:
    path: /radar_country_entered
    method: GET
    data_selector: records
- name: radar_country_exited
  endpoint:
    path: /radar_country_exited
    method: GET
    data_selector: records
- name: radar_state_entered
  endpoint:
    path: /radar_state_entered
    method: GET
    data_selector: records
- name: radar_state_exited
  endpoint:
    path: /radar_state_exited
    method: GET
    data_selector: records
- name: radar_dma_entered
  endpoint:
    path: /radar_dma_entered
    method: GET
    data_selector: records
- name: radar_dma_exited
  endpoint:
    path: /radar_dma_exited
    method: GET
    data_selector: records
- name: radar_started_trip
  endpoint:
    path: /radar_started_trip
    method: GET
    data_selector: records
- name: radar_updated_trip
  endpoint:
    path: /radar_updated_trip
    method: GET
    data_selector: records
- name: radar_approaching_trip_destination
  endpoint:
    path: /radar_approaching_trip_destination
    method: GET
    data_selector: records
- name: radar_arrived_at_trip_destination
  endpoint:
    path: /radar_arrived_at_trip_destination
    method: GET
    data_selector: records
- name: radar_stopped_trip
  endpoint:
    path: /radar_stopped_trip
    method: GET
    data_selector: records
- name: radar_beacon_entered
  endpoint:
    path: /radar_beacon_entered
    method: GET
    data_selector: records
- name: radar_beacon_exited
  endpoint:
    path: /radar_beacon_exited
    method: GET
    data_selector: records
- name: geofence_entered
  endpoint:
    path: /geofences/entered
    method: POST
    data_selector: geofence
    params: {}
- name: geofence_exited
  endpoint:
    path: /geofences/exited
    method: POST
    data_selector: geofence
    params: {}
- name: dwelled_in_geofence
  endpoint:
    path: /geofences/dwelled
    method: POST
    data_selector: geofence
    params: {}
- name: place_entered
  endpoint:
    path: /places/entered
    method: POST
    data_selector: place
    params: {}
- name: place_exited
  endpoint:
    path: /radar/place/exited
    method: GET
    data_selector: records
    params: {}
- name: country_entered
  endpoint:
    path: /radar/country/entered
    method: GET
    data_selector: records
    params: {}
- name: country_exited
  endpoint:
    path: /radar/country/exited
    method: GET
    data_selector: records
    params: {}
- name: state_entered
  endpoint:
    path: /radar/state/entered
    method: GET
    data_selector: records
    params: {}
- name: state_exited
  endpoint:
    path: /radar/state/exited
    method: GET
    data_selector: records
    params: {}
- name: dma_entered
  endpoint:
    path: /radar/dma/entered
    method: GET
    data_selector: records
    params: {}
- name: dma_exited
  endpoint:
    path: /radar/dma/exited
    method: GET
    data_selector: records
    params: {}
- name: started_trip
  endpoint:
    path: /radar/trip/started
    method: GET
    data_selector: records
    params: {}
- name: updated_trip
  endpoint:
    path: /radar/trip/updated
    method: GET
    data_selector: records
    params: {}
- name: approaching_trip_destination
  endpoint:
    path: /radar/approaching_trip_destination
    method: GET
    data_selector: trip
    params: {}
- name: arrived_at_trip_destination
  endpoint:
    path: /radar/arrived_at_trip_destination
    method: GET
    data_selector: trip
    params: {}
- name: stopped_trip
  endpoint:
    path: /radar/stopped_trip
    method: GET
    data_selector: trip
    params: {}
- name: beacon_entered
  endpoint:
    path: /radar/beacon_entered
    method: GET
    data_selector: beacon
    params: {}
- name: beacon_exited
  endpoint:
    path: /radar/beacon_exited
    method: GET
    data_selector: beacon
    params: {}
- name: user.approaching_trip_destination
  endpoint:
    path: /user/approaching_trip_destination
    method: GET
    data_selector: records
- name: user.arrived_at_trip_destination
  endpoint:
    path: /user/arrived_at_trip_destination
    method: GET
    data_selector: records
- name: user.stopped_trip
  endpoint:
    path: /user/stopped_trip
    method: GET
    data_selector: records
- name: user.entered_beacon
  endpoint:
    path: /user/entered_beacon
    method: GET
    data_selector: records
- name: user.exited_beacon
  endpoint:
    path: /user/exited_beacon
    method: GET
    data_selector: records
- name: user.entered_geofence
  endpoint:
    params: {}
- name: user.exited_geofence
  endpoint:
    params: {}
- name: user.dwelled_in_geofence
  endpoint:
    params: {}
- name: user.entered_place
  endpoint:
    params: {}
- name: user.exited_place
  endpoint:
    params: {}
- name: user.entered_region_country
  endpoint:
    params: {}
- name: user.exited_region_country
  endpoint:
    params: {}
- name: user.entered_region_state
  endpoint:
    params: {}
- name: user.exited_region_state
  endpoint:
    params: {}
- name: user.entered_region_dma
  endpoint:
    params: {}
- name: user.exited_region_dma
  endpoint:
    params: {}
- name: user.started_trip
  endpoint:
    params: {}
- name: events
  endpoint:
    path: /radar/events
    method: POST
    data_selector: events
- name: locations
  endpoint:
    path: /radar/locations
    method: POST
    data_selector: locations
- name: user_exited_beacon
  endpoint:
    path: /user/exited_beacon
    method: GET
    data_selector: records
    params: {}
- name: exited_beacon
  endpoint:
    path: /exited_beacon
    method: GET
    data_selector: records
- name: entered_geofence
  endpoint:
    path: /entered_geofence
    method: POST
    data_selector: records
- name: exited_geofence
  endpoint:
    path: /exited_geofence
    method: POST
    data_selector: records
- name: dwelled_in_geofence
  endpoint:
    path: /dwelled_in_geofence
    method: POST
    data_selector: records
- name: entered_place
  endpoint:
    path: /entered_place
    method: POST
    data_selector: records
- name: exited_place
  endpoint:
    path: /exited_place
    method: POST
    data_selector: records
- name: started_trip
  endpoint:
    path: /started_trip
    method: POST
    data_selector: records
- name: updated_trip
  endpoint:
    path: /updated_trip
    method: POST
    data_selector: records
- name: approaching_trip_destination
  endpoint:
    path: /approaching_trip_destination
    method: POST
    data_selector: records
- name: arrived_at_trip_destination
  endpoint:
    path: /arrived_at_trip_destination
    method: POST
    data_selector: records
- name: stopped_trip
  endpoint:
    path: /stopped_trip
    method: POST
    data_selector: records
- name: entered_beacon
  endpoint:
    path: /entered_beacon
    method: POST
    data_selector: records
- name: entered_geofence
  endpoint:
    path: /entered_geofence
    method: GET
    data_selector: records
- name: exited_geofence
  endpoint:
    path: /exited_geofence
    method: GET
    data_selector: records
- name: dwelled_in_geofence
  endpoint:
    path: /dwelled_in_geofence
    method: GET
    data_selector: records
- name: entered_place
  endpoint:
    path: /entered_place
    method: GET
    data_selector: records
- name: exited_place
  endpoint:
    path: /exited_place
    method: GET
    data_selector: records
- name: entered_country
  endpoint:
    path: /entered_country
    method: GET
    data_selector: records
- name: exited_country
  endpoint:
    path: /exited_country
    method: GET
    data_selector: records
- name: entered_state
  endpoint:
    path: /entered_state
    method: GET
    data_selector: records
- name: exited_state
  endpoint:
    path: /exited_state
    method: GET
    data_selector: records
- name: entered_dma
  endpoint:
    path: /entered_dma
    method: GET
    data_selector: records
- name: exited_dma
  endpoint:
    path: /exited_dma
    method: GET
    data_selector: records
- name: started_trip
  endpoint:
    path: /started_trip
    method: GET
    data_selector: records
- name: updated_trip
  endpoint:
    path: /updated_trip
    method: GET
    data_selector: records
- name: approaching_trip_destination
  endpoint:
    path: /approaching_trip_destination
    method: GET
    data_selector: records
- name: arrived_at_trip_destination
  endpoint:
    path: /arrived_at_trip_destination
    method: GET
    data_selector: records
- name: stopped_trip
  endpoint:
    path: /stopped_trip
    method: GET
    data_selector: records
- name: entered_beacon
  endpoint:
    path: /entered_beacon
    method: GET
    data_selector: records
- name: exited_beacon
  endpoint:
    path: /exited_beacon
    method: GET
    data_selector: records
- name: exited_dma
  endpoint:
    path: /exited_dma
    method: GET
    data_selector: records
- name: started_trip
  endpoint:
    path: /started_trip
    method: GET
    data_selector: records
- name: updated_trip
  endpoint:
    path: /updated_trip
    method: GET
    data_selector: records
- name: approaching_trip_destination
  endpoint:
    path: /approaching_trip_destination
    method: GET
    data_selector: records
- name: arrived_at_trip_destination
  endpoint:
    path: /arrived_at_trip_destination
    method: GET
    data_selector: records
- name: stopped_trip
  endpoint:
    path: /stopped_trip
    method: GET
    data_selector: records
- name: entered_beacon
  endpoint:
    path: /entered_beacon
    method: GET
    data_selector: records
- name: exited_beacon
  endpoint:
    path: /exited_beacon
    method: GET
    data_selector: records
- name: radarPlaceEntered
  endpoint:
    path: /radar/place/entered
    method: GET
    data_selector: records
- name: radarPlaceExited
  endpoint:
    path: /radar/place/exited
    method: GET
    data_selector: records
- name: radarCountryEntered
  endpoint:
    path: /radar/country/entered
    method: GET
    data_selector: records
- name: radarCountryExited
  endpoint:
    path: /radar/country/exited
    method: GET
    data_selector: records
- name: radarStateEntered
  endpoint:
    path: /radar/state/entered
    method: GET
    data_selector: records
- name: radarStateExited
  endpoint:
    path: /radar/state/exited
    method: GET
    data_selector: records
- name: radarDMAEntered
  endpoint:
    path: /radar/dma/entered
    method: GET
    data_selector: records
- name: radarDMAExited
  endpoint:
    path: /radar/dma/exited
    method: GET
    data_selector: records
- name: radarTripStarted
  endpoint:
    path: /radar/trip/started
    method: GET
    data_selector: records
- name: radarApproachingTripDestination
  endpoint:
    path: /radar/trip/approaching-destination
    method: GET
    data_selector: records
- name: radarArrivedTripDestination
  endpoint:
    path: /radar/trip/arrived-destination
    method: GET
    data_selector: records
- name: radarTripStopped
  endpoint:
    path: /radar/trip/stopped
    method: GET
    data_selector: records
- name: radarBeaconEntered
  endpoint:
    path: /radar/beacon/entered
    method: GET
    data_selector: records
- name: radarBeaconExited
  endpoint:
    path: /radar/beacon/exited
    method: GET
    data_selector: records
- name: Radar Beacon Exited
  endpoint:
    path: /path/to/radar/beacon/exited
    method: GET
    data_selector: records
    params: {}
- name: user.entered_beacon
  endpoint:
    path: /user/entered_beacon
    method: GET
    data_selector: beacon
    params: {}
- name: user.exited_beacon
  endpoint:
    path: /user/exited_beacon
    method: GET
    data_selector: beacon
    params: {}
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: data
- name: user_state
  endpoint:
    path: /user_state
    method: POST
    data_selector: data
- name: user_event
  endpoint:
    path: /api/2.0/track
    method: POST
    data_selector: events
    params: {}
- name: Radar Beacon Entered
  endpoint:
    path: /radar/beacon/entered
    method: GET
    data_selector: beacons
    params: {}
- name: Radar Beacon Exited
  endpoint:
    path: /radar/beacon/exited
    method: GET
    data_selector: beacons
    params: {}
- name: dma_exited
  endpoint:
    path: /event/dma/exited
    method: GET
    data_selector: records
- name: started_trip
  endpoint:
    path: /event/trip/started
    method: GET
    data_selector: records
- name: updated_trip
  endpoint:
    path: /event/trip/updated
    method: GET
    data_selector: records
- name: approaching_trip_destination
  endpoint:
    path: /event/trip/approaching
    method: GET
    data_selector: records
- name: arrived_trip_destination
  endpoint:
    path: /event/trip/arrived
    method: GET
    data_selector: records
- name: stopped_trip
  endpoint:
    path: /event/trip/stopped
    method: GET
    data_selector: records
- name: beacon_entered
  endpoint:
    path: /event/beacon/entered
    method: GET
    data_selector: records
- name: beacon_exited
  endpoint:
    path: /event/beacon/exited
    method: GET
    data_selector: records
- name: user_arrived_at_trip_destination
  endpoint:
    path: /user/arrived_at_trip_destination
    method: GET
    data_selector: records
- name: user_stopped_trip
  endpoint:
    path: /user/stopped_trip
    method: GET
    data_selector: records
- name: user_entered_beacon
  endpoint:
    path: /user/entered_beacon
    method: GET
    data_selector: records
- name: user_exited_beacon
  endpoint:
    path: /user/exited_beacon
    method: GET
    data_selector: records
- name: edit_device
  endpoint:
    path: /edit-device
    method: POST
- name: radar-event
  endpoint:
    path: /services/data/vXX.X/sobjects/radar-event
    method: POST
    data_selector: records
- name: user_exited_region_dma
  endpoint:
    path: /user/exited_region_dma
    method: GET
    data_selector: user.exited_region_dma
    params: {}
- name: user_started_trip
  endpoint:
    path: /user/started_trip
    method: GET
    data_selector: user.started_trip
    params: {}
- name: user_updated_trip
  endpoint:
    path: /user/updated_trip
    method: GET
    data_selector: user.updated_trip
    params: {}
- name: user_approaching_trip_destination
  endpoint:
    path: /user/approaching_trip_destination
    method: GET
    data_selector: user.approaching_trip_destination
    params: {}
- name: user_arrived_at_trip_destination
  endpoint:
    path: /user/arrived_at_trip_destination
    method: GET
    data_selector: user.arrived_at_trip_destination
    params: {}
- name: user_stopped_trip
  endpoint:
    path: /user/stopped_trip
    method: GET
    data_selector: user.stopped_trip
    params: {}
- name: user_entered_beacon
  endpoint:
    path: /user/entered_beacon
    method: GET
    data_selector: user.entered_beacon
    params: {}
- name: user_exited_beacon
  endpoint:
    path: /user/exited_beacon
    method: GET
    data_selector: user.exited_beacon
    params: {}
- name: beacon_entered
  endpoint:
    path: /beacon/entered
    method: GET
    data_selector: beacons
    params: {}
- name: beacon_exited
  endpoint:
    path: /beacon/exited
    method: GET
    data_selector: beacons
    params: {}
- name: Geofence Entered
  endpoint:
    path: /geofence/entered
    method: POST
    data_selector: geofence
    params: {}
- name: Geofence Exited
  endpoint:
    path: /geofence/exited
    method: POST
    data_selector: geofence
    params: {}
- name: Dwelled in Geofence
  endpoint:
    path: /geofence/dwelled
    method: POST
    data_selector: geofence
    params: {}
- name: Place Entered
  endpoint:
    path: /place/entered
    method: POST
    data_selector: place
    params: {}
- name: Place Exited
  endpoint:
    path: /place/exited
    method: POST
    data_selector: place
    params: {}
- name: Country Entered
  endpoint:
    path: /country/entered
    method: POST
    data_selector: region
    params: {}
- name: Country Exited
  endpoint:
    path: /country/exited
    method: POST
    data_selector: region
    params: {}
- name: State Entered
  endpoint:
    path: /state/entered
    method: POST
    data_selector: region
    params: {}
- name: State Exited
  endpoint:
    path: /state/exited
    method: POST
    data_selector: region
    params: {}
- name: DMA Entered
  endpoint:
    path: /dma/entered
    method: POST
    data_selector: region
    params: {}
- name: DMA Exited
  endpoint:
    path: /dma/exited
    method: POST
    data_selector: region
    params: {}
- name: Trip Started
  endpoint:
    path: /trip/started
    method: POST
    data_selector: trip
    params: {}
- name: Trip Updated
  endpoint:
    path: /trip/updated
    method: POST
    data_selector: trip
    params: {}
- name: Trip Approaching Destination
  endpoint:
    path: /trip/approaching
    method: POST
    data_selector: trip
    params: {}
- name: Trip Arrived Destination
  endpoint:
    path: /trip/arrived
    method: POST
    data_selector: trip
    params: {}
- name: Trip Stopped
  endpoint:
    path: /trip/stopped
    method: POST
    data_selector: trip
    params: {}
- name: geofences
  endpoint:
    path: /geofences
    method: GET
    data_selector: locations
    params: {}
- name: location_update
  endpoint:
    path: /trackOnce
    method: GET
    data_selector: location
- name: context
  endpoint:
    path: /getContext
    method: GET
    data_selector: context
- name: geocode
  endpoint:
    path: /geocode
    method: GET
    data_selector: addresses
- name: autocomplete
  endpoint:
    path: /autocomplete
    method: GET
    data_selector: addresses
- name: distance
  endpoint:
    path: /distance
    method: GET
    data_selector: routes
- name: tracking_options
  endpoint:
    path: /sdk/tracking
    method: GET
    data_selector: tracking_options
    params: {}
notes:
- Publishable authentication level
- 10 requests per second rate limit
- Publishable access for certain endpoints
- Rate limits vary by endpoint
- Rate limit for route_distance is 100 requests per second
- Rate limit for route_matrix is 20 requests per second
- Rate limit for route_match is 10 requests per second
- Rate limit for route_directions is 10 requests per second
- 10 requests per second (contact your customer success manager to increase rate limit)
- Default rate limit is 10 requests per second.
- Default rate limit is 10 requests per second for most endpoints.
- Authentication level is secret for most endpoints.
- Default rate limit is 10 requests per second
- Requires setup of connected app in radar
- Radar SDK calls the Radar API over HTTPS using TLS version 1.2 or higher.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Geofences can be created via the API, dashboard, CSV import, nightly sync, or integrations.
- Geofences should be uniquely referenced by tag and external ID.
- Trips supports tracking and calculating ETAs.
- The trip tracking dashboard is available on the Enterprise plan.
- Places is available on the Enterprise plan
- Regions is available on the Enterprise plan.
- Beacons should be uniquely referenced by tag and external ID, assigned by you when
  a beacon is created.
- To disable or rotate identifiers for a beacon, re-import the beacon with the same
  tag and external ID.
- Some more sensitive or proprietary failure reasons are not documented here. Contact
  your customer success manager for more information.
- Fraud is available on the Enterprise plan
- Campaigns require setup of geofences or places through the dashboard.
- Ensure that places are enabled through the settings page.
- A device needs to exit a geofence before generating a subsequent entry event, so
  ensure that the device has been detected outside of the geofence prior to testing
  another entry.
- Uses API key for authentication
- Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
- Create up to 1,000 geofences and make up to 100,000 API requests per month for free.
- You can create up to 1,000 geofences and make up to 100,000 API requests per month
  for free.
- Can create up to 1,000 geofences and make up to 100,000 API requests per month for
  free.
- Uses API keys for authentication.
- API key required for authentication
- Conversions are available on the Enterprise plan
- When processing conversions, Radar will determine if they happen at any of these
  geofences or places
- Adding a Radar logo to the map is required in our Terms of Use.
- Adding a Radar logo to the map is required in our Terms of Use
- Requires setup of API key.
- Apple requires justification for background location usage in App Store
- User identification should not include PII
- Use your Test Publishable key for testing and non-production environments.
- Use your Live Publishable key for production environments.
- By default, the SDK depends on Google Play Services Location.
- If you haven't already configured your project for Huawei Mobile Services, follow
  the instructions here.
- Always use publishable API keys in the SDK, not secret API keys.
- Location updates may be delayed significantly by Doze Mode and connectivity issues.
- Initialize the library with your publishable API key.
- The SDK supports React Native 0.60.0 and higher.
- Requires two-factor authentication and at least Brand Manager permission
- Enables real-time status updates on tracked mobile orders
- Use webhooks to send events and user state from Radar to your server
- Webhook should return a 2xx status code to acknowledge receipt
- The Airship integration is available on the Enterprise plan.
- You must manually create tag groups in Airship first.
- Radar uses the special string '(null)' to represent null user property values.
- If Regions is enabled, additional attributes will be sent.
- The AWS S3 integration uses an AWS Kinesis Data Firehose to stream new Radar locations
  and events.
- The AWS Kinesis Data Firehose flushes data to your S3 bucket after 10 minutes or
  128 MB of data, whichever happens first.
- Use the Attentive integration to send location-triggered and location-targeted messages
  to increase engagement and conversion.
- Set separate API keys for the Test and Live environments.
- Ask your Brandify account manager to enable a published CSV of your locations as
  Radar geofences.
- Radar will then attempt syncs nightly.
- The Braze integration is available on the Enterprise plan.
- Ask the Cordial team to create a secondary key for contacts (e.g., emailHash) that
  you can pass to Radar.
- Set Enabled to Yes and paste your API key.
- User IDs must be aligned between Iterable and Radar for the integration to function
  properly.
- The Leanplum integration is available on the Enterprise plan.
- Radar uses the special string '(null)' to represent null user attribute values.
- Contact your Lytics account manager to enable the integration.
- Create an API token in Lytics with no expiration and the Data Manager role.
- The Mixpanel integration is available on the Enterprise plan.
- The MoEngage integration is available on the Enterprise plan.
- By default, Radar sends the IDFV on iOS and Android Id on Android to associate the
  Radar events with the correct mParticle user.
- The Radar Test environment automatically maps to the Development environment in
  mParticle, and the Radar Live environment automatically maps to the Production environment
  in mParticle.
- Radar `userId` and `deviceId` do not map to OneSignal. Must send the OneSignal player
  ID to Radar.
- Requires setup of connected app in Salesforce Marketing Cloud
- Events will trigger journeys in Journey Builder
- Radar can sync locations from Yext as geofences in Radar.
- Radar will automatically keep geofences in sync when you create or update locations
  in Yext.
- Configurations are targeted by OS and environment.
- Remotely setting tracking options overrides any client-side specified tracking options.
- Always use your publishable API keys, which are restricted in scope, in the SDK.
  Do not use your secret API keys, which are unrestricted in scope, in any client-side
  code.
- Must add location usage descriptions and background modes to Info.plist.
- On Android, make sure to add Google Play Services Location to your project.
- 'The SDK supports custom tracking options as well as three presets: EFFICIENT, RESPONSIVE,
  and CONTINUOUS.'
errors:
- '400: Bad request (missing or invalid params)'
- '401: Unauthorized (invalid API key)'
- '402: Payment required (organization disabled or usage exceeded)'
- '403: Forbidden (insufficient permissions)'
- '404: Not found'
- '409: Conflict'
- '429: Too many requests (rate limit exceeded, no state change, or selective throttling)'
- '500: Internal server error'
- '503: Service temporarily unavailable'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '401 Unauthorized: Check API key.'
- '401 Unauthorized: Check API key or permissions'
- 'ERROR_PERMISSIONS: Unable to determine your location. Please make sure you''ve
  granted location permissions and try again.'
- 'ERROR_LOCATION: Unable to determine your location. Please make sure location services
  and wi-fi are enabled and try again.'
- 'ERROR_NETWORK: Unable to determine your location. Please make sure you''re connected
  to the Internet and try again.'
- 'Error: Google Maps API could not load.'
- 'errorPublishableKey: SDK not initialized'
- 'errorPermissions: location permissions not granted'
- 'errorLocation: location services error or timeout (10 seconds)'
- 'errorNetwork: network error or timeout (10 seconds)'
- 'errorBadRequest: bad request (missing or invalid params)'
- 'errorUnauthorized: unauthorized (invalid API key)'
- 'errorPaymentRequired: payment required (organization disabled or usage exceeded)'
- 'errorForbidden: forbidden (insufficient permissions)'
- 'errorNotFound: not found'
- 'errorRateLimit: too many requests exceeded'
- 'errorServer: internal server error'
- 'errorUnknown: unknown error'
- 'ERROR_UNAUTHORIZED: unauthorized (invalid API key)'
- 'ERROR_RATE_LIMIT: too many requests exceeded'
- 'ERROR_NETWORK: network error or timeout'
- 'RadarPublishableKeyError: SDK not initialized'
- 'RadarLocationPermissionsError: location permissions not granted'
- 'RadarLocationError: location services error or timeout'
- 'RadarTimeoutError: network timeout'
- 'RadarBadRequestError: bad request'
- 'RadarUnknownError: unauthorized'
- 'RadarPaymentRequiredError: payment required'
- 'RadarForbiddenError: forbidden'
- 'RadarNotFoundError: not found'
- 'RadarRateLimitError: too many requests'
- 'RadarServerError: internal server error'
- 'ERROR_PUBLISHABLE_KEY: SDK not initialized'
- 'ERROR_PERMISSIONS: location permissions not granted'
- 'ERROR_LOCATION: location services error or timeout (10 seconds)'
- 'ERROR_NETWORK: network error or timeout (10 seconds)'
- 'ERROR_BAD_REQUEST: bad request (missing or invalid params)'
- 'ERROR_PAYMENT_REQUIRED: payment required (organization disabled or usage exceeded)'
- 'ERROR_FORBIDDEN: forbidden (insufficient permissions or no beta access)'
- 'ERROR_NOT_FOUND: not found'
- 'ERROR_SERVER: internal server error'
- 'ERROR_UNKNOWN: unknown error'
- 'ERROR_RATE_LIMIT: too many requests (rate limit exceeded)'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.radar.io
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
