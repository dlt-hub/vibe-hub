resources:
- name: alerts
  endpoint:
    path: /alerts
    method: GET
- name: counter
  endpoint:
    path: /counter
    method: GET
- name: hello
  endpoint:
    path: /
    method: GET
    data_selector: hello
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: hello
    params: {}
- name: hello
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: hello
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: hello
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: hello
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: hello
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: hello
  endpoint:
    path: /
    method: POST
    data_selector: data
- name: hello
  endpoint:
    path: /
    method: GET
    data_selector: hello
    params: {}
- name: hello
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: hello
    params: {}
- name: hello
  endpoint:
    path: /
    method: GET
    data_selector: hello
    params: {}
- name: hello
  endpoint:
    path: /
    method: GET
    data_selector: hello
    params: {}
- name: hello
  endpoint:
    path: /
    method: GET
    data_selector: hello
- name: hello
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: hello
  endpoint:
    path: /
    method: GET
    data_selector: hello
    params: {}
- name: hello
  endpoint:
    path: /
    method: GET
    data_selector: hello
    params: {}
- name: hello
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: hello
  endpoint:
    path: /
    method: POST
    data_selector: data.hello
    params: {}
- name: hello
  endpoint:
    path: /
    method: GET
    data_selector: hello
    params: {}
- name: hello
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: hello
  endpoint:
    path: /
    method: GET
    data_selector: hello
    params: {}
- name: hello
  endpoint:
    path: /
    method: GET
    data_selector: hello
    params: {}
- name: mutation
  endpoint:
    path: /mutations
    method: POST
    data_selector: result
- name: users
  endpoint:
    path: /server/enums
    method: GET
    data_selector: users
    params: {}
- name: UnionType
  endpoint:
    path: /server/unions
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users/
    method: GET
    data_selector: users_ids
- name: schema_directives
  endpoint:
    path: /server/schema-directives
    method: GET
    data_selector: records
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: reviews
    params:
      first: 5
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: me
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: topProducts
    params:
      first: 5
- name: alerts
  endpoint:
    path: alerts
    method: GET
    data_selector: source
    params: {}
- name: counter
  endpoint:
    path: counter
    method: GET
    data_selector: source
    params: {}
- name: Dict
  endpoint:
    path: Titles
    method: GET
    data_selector: id, message
- name: User
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: User
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.users
    params: {}
- name: Post
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.posts
    params: {}
- name: post
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: post
  endpoint:
    path: /NEW_POSTS
    method: SUBSCRIBE
    data_selector: message
    params: {}
- name: source
  endpoint:
    path: /subscriptions
    method: POST
- name: resolver
  endpoint:
    path: /resolve
    method: POST
- name: post
  endpoint:
    path: /subscriptions/post
    method: SUBSCRIBE
    data_selector: message
- name: post
  endpoint:
    path: /subscriptions/post
    method: SUBSCRIBE
    data_selector: message
    params:
      category: ID
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Result
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.result
    params: {}
- name: User
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.user
    params: {}
- name: Post
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.post
    params: {}
- name: date_scalar
  endpoint:
    path: /date_scalar
    method: POST
    data_selector: data
    params: {}
- name: datetime_scalar
  endpoint:
    path: /datetime_scalar
    method: POST
    data_selector: data
    params: {}
- name: generic_scalar
  endpoint:
    path: /generic_scalar
    method: POST
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: /subscriptions/post
    method: SUBSCRIBE
    data_selector: message
    params:
      category: ID
- name: helloWorld
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.helloWorld
    params: {}
- name: Dict
  endpoint:
    path: Titles
    method: GET
    data_selector: id, message
    params: {}
- name: Dict
  endpoint:
    path: Titles
    method: GET
    data_selector: dict
    params: {}
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Mutation
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: DateTime
  endpoint:
    path: /graphql
    method: GET
    data_selector: records
- name: Generic
  endpoint:
    path: /graphql
    method: GET
    data_selector: records
- name: post
  endpoint:
    path: /broadcast/subscribe
    method: SUBSCRIBE
    data_selector: message
    params:
      channel: NEW_POSTS
- name: datetime_scalar
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: generic_scalar
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: subscription_type
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: results
  endpoint:
    path: /results
    method: POST
    data_selector: data.results
    params: {}
- name: Dict
  endpoint:
    path: Titles
    method: GET
    data_selector: titles
    params: {}
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Mutation
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Mutation
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: NEW_POSTS
    method: SUBSCRIBE
    data_selector: message
- name: post
  endpoint:
    path: /NEW_POSTS
    method: SUBSCRIBE
    data_selector: message
    params:
      category: ID
- name: User
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: Post
  endpoint:
    path: /posts
    method: GET
    data_selector: posts
- name: post
  endpoint:
    path: /subscriptions/post
    method: SUBSCRIBE
    data_selector: message
    params: {}
- name: interface
  endpoint:
    path: /server/0.24/bindables
    method: GET
    data_selector: ''
- name: Date
  endpoint:
    path: /date_scalar
    method: GET
    data_selector: records
- name: DateTime
  endpoint:
    path: /datetime_scalar
    method: GET
    data_selector: records
- name: Generic
  endpoint:
    path: /generic_scalar
    method: GET
    data_selector: records
- name: post
  endpoint:
    path: /post
    method: SUBSCRIPTION
    data_selector: message
    params: {}
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Mutation
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: datetime_scalar
  endpoint:
    path: /datetime/scalar
    method: POST
    data_selector: data
    params: {}
- name: generic_scalar
  endpoint:
    path: /generic/scalar
    method: POST
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: /post
    method: SUBSCRIBE
    data_selector: message
- name: query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
- name: Dict
  endpoint:
    path: /Titles/Dict
    method: GET
    data_selector: records
    params: {}
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Mutation
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: UserInput
  endpoint:
    path: /input/UserInput
    method: GET
    data_selector: fields
    params: {}
- name: interface_type
  endpoint:
    path: /server/0.23/bindables
    method: GET
    data_selector: interface_type
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: post
  endpoint:
    path: /subscribe/NEW_POSTS
    method: SUBSCRIBE
    data_selector: message
    params: {}
- name: post
  endpoint:
    path: /subscriptions/post
    method: POST
    data_selector: message
    params:
      category: ID
- name: InterfaceType
  endpoint:
    path: /server/0.23/bindables
    method: GET
    data_selector: records
- name: MutationType
  endpoint:
    path: /server/0.23/bindables
    method: GET
    data_selector: records
- name: ObjectType
  endpoint:
    path: /server/0.23/bindables
    method: GET
    data_selector: records
- name: QueryType
  endpoint:
    path: /server/0.23/bindables
    method: GET
    data_selector: records
- name: ScalarType
  endpoint:
    path: /server/0.23/bindables
    method: GET
    data_selector: records
- name: post
  endpoint:
    path: /post
    method: SUBSCRIBE
    data_selector: message
    params:
      category: ID
- name: post
  endpoint:
    path: post
    method: SUBSCRIPTION
    data_selector: message
    params:
      category: null
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Dict
  endpoint:
    path: /Titles/Dict
    method: GET
    data_selector: records
- name: Query
  endpoint:
    path: /query
    method: POST
    data_selector: data
- name: Mutation
  endpoint:
    path: /mutation
    method: POST
    data_selector: data
- name: User
  endpoint:
    path: /user
    method: GET
    data_selector: data
- name: result
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: /subscribe/NEW_POSTS
    method: SUBSCRIBE
    data_selector: message
    params: {}
- name: User
  endpoint:
    path: /user
    method: GET
    data_selector: users
    params: {}
- name: Post
  endpoint:
    path: /post
    method: GET
    data_selector: posts
    params: {}
- name: post
  endpoint:
    path: NEW_POSTS
    method: SUBSCRIBE
    data_selector: message
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Mutation
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: /subscriptions/post
    method: SUBSCRIBE
    data_selector: message
- name: is_default_resolver
  endpoint:
    path: /is_default_resolver
    method: GET
    data_selector: resolver
    params: {}
- name: load_schema_from_path
  endpoint:
    path: /load_schema_from_path
    method: GET
    data_selector: path
    params: {}
- name: make_executable_schema
  endpoint:
    path: /make_executable_schema
    method: GET
    data_selector: type_defs
    params: {}
- name: Query
  endpoint:
    path: /server/0.22/bindables
    method: GET
    data_selector: results
    params: {}
- name: post
  endpoint:
    path: post
    method: SUBSCRIPTION
- name: Query
  endpoint:
    path: /execute_query
    method: POST
    data_selector: data
- name: User
  endpoint:
    path: /user
    method: GET
    data_selector: data
    params: {}
- name: Post
  endpoint:
    path: /post
    method: GET
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: /post
    method: SUBSCRIPTION
    data_selector: message
- name: schema
  endpoint:
    path: /path/to/schema
    method: POST
    data_selector: data
- name: result
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.result
    params: {}
- name: users
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.users
    params: {}
- name: user
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.user
    params: {}
- name: User
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Post
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: /subscribe/NEW_POSTS
    method: GET
    data_selector: message
    params: {}
- name: post
  endpoint:
    path: NEW_POSTS
    method: SUBSCRIBE
    data_selector: message
    params:
      category: ID
- name: Result
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.result
    params: {}
- name: User
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.user
    params: {}
- name: post
  endpoint:
    path: /subscriptions/post
    method: SUBSCRIBE
    data_selector: message
    params: {}
- name: is_default_resolver
  endpoint:
    path: /is_default_resolver
    method: GET
    data_selector: resolver
    params: {}
- name: load_schema_from_path
  endpoint:
    path: /load_schema_from_path
    method: GET
    data_selector: path
    params: {}
- name: make_executable_schema
  endpoint:
    path: /make_executable_schema
    method: GET
    data_selector: type_defs
    params: {}
- name: post
  endpoint:
    path: /subscriptions/post
    method: SUBSCRIBE
    data_selector: message
    params:
      category: ID
- name: datetime_scalar
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: generic_scalar
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: /post
    method: SUBSCRIPTION
    data_selector: message
    params:
      category: ID
- name: schema
  endpoint:
    path: /load_schema_from_path
    method: GET
    data_selector: schema
    params: {}
- name: make_executable_schema
  endpoint:
    path: /make_executable_schema
    method: POST
    data_selector: schema
    params: {}
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Mutation
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: User
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: datetime_scalar
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: generic_scalar
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: subscription_type
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: NEW_POSTS
    method: SUBSCRIBE
    data_selector: message
    params:
      category: ID
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Mutation
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: /post
    method: SUBSCRIBE
    data_selector: message
    params: {}
- name: is_default_resolver
  endpoint:
    path: /is_default_resolver
    method: GET
    data_selector: resolver
    params: {}
- name: load_schema_from_path
  endpoint:
    path: /load_schema_from_path
    method: GET
    data_selector: path
    params: {}
- name: make_executable_schema
  endpoint:
    path: /make_executable_schema
    method: GET
    data_selector: type_defs
    params: {}
- name: post
  endpoint:
    path: /post
    method: SUBSCRIPTION
    data_selector: message
    params:
      category: ID
- name: query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: /subscriptions/post
    method: SUBSCRIBE
    data_selector: message
    params:
      category: ID
- name: schema
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Dict
  endpoint:
    path: Titles/Dict
    method: GET
    data_selector: records
- name: titles
  endpoint:
    path: /titles
    method: GET
    data_selector: titles
    params: {}
- name: Query
  endpoint:
    path: /query
    method: POST
    data_selector: data
    params: {}
- name: Mutation
  endpoint:
    path: /mutation
    method: POST
    data_selector: data
    params: {}
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
- name: Mutation
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
- name: User
  endpoint:
    path: /user
    method: GET
    data_selector: results
    params: {}
- name: Post
  endpoint:
    path: /post
    method: GET
    data_selector: results
    params: {}
- name: InputType
  endpoint:
    path: /inputType
    method: POST
    data_selector: data
- name: QueryType
  endpoint:
    path: /queryType
    method: GET
    data_selector: data
- name: Query
  endpoint:
    path: /schema
    method: GET
    data_selector: schema
- name: post
  endpoint:
    path: /subscribe/channel/NEW_POSTS
    method: POST
    data_selector: message
    params: {}
- name: User
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Post
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Result
  endpoint:
    path: /result
    method: GET
    data_selector: result
    params: {}
- name: User
  endpoint:
    path: /user
    method: GET
    data_selector: user
    params: {}
- name: Post
  endpoint:
    path: /post
    method: GET
    data_selector: post
    params: {}
- name: load_schema_from_path
  endpoint:
    path: /load_schema_from_path
    method: POST
    data_selector: schema
    params:
      path: str or PathLike
- name: make_executable_schema
  endpoint:
    path: /make_executable_schema
    method: POST
    data_selector: schema
    params:
      type_defs: str or list of str
      bindables: SchemaBindables
      directives: Dict[str, Type[SchemaDirectiveVisitor]]
      convert_names_case: bool or SchemaNameConverter
- name: DateTime
  endpoint:
    path: /DateTime
    method: GET
    data_selector: datetime
    params: {}
- name: Generic
  endpoint:
    path: /Generic
    method: GET
    data_selector: rawJSON
    params: {}
- name: Subscription
  endpoint:
    path: /Subscription
    method: POST
    data_selector: subscription
    params: {}
- name: Query
  endpoint:
    path: /query
    method: POST
    data_selector: data
    params: {}
- name: User
  endpoint:
    path: /user
    method: POST
    data_selector: data
    params: {}
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: User
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: /NEW_POSTS
    method: SUBSCRIBE
    data_selector: message
- name: countUsers
  endpoint:
    method: POST
    data_selector: count
- name: post
  endpoint:
    method: SUBSCRIBE
    data_selector: message
- name: countUsers
  endpoint:
    path: /query
    method: POST
    data_selector: data.countUsers
    params: {}
- name: results
  endpoint:
    path: /results
    method: POST
    data_selector: data.results
    params: {}
- name: QueryType
  endpoint:
    path: /server/0.18/bindables
    method: GET
    data_selector: Query
    params: {}
- name: ScalarType
  endpoint:
    path: /server/0.18/bindables
    method: GET
    data_selector: Scalar
    params: {}
- name: countUsers
  endpoint:
    path: /countUsers
    method: POST
    data_selector: data
    params: {}
- name: AvatarUpload
  endpoint:
    path: /avatarUpload
    method: POST
    data_selector: success
    params: {}
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: User
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: countUsers
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.countUsers
    params: {}
- name: operations
  endpoint:
    path: /combine_multipart_data
    method: POST
    data_selector: operations
    params: {}
- name: files_map
  endpoint:
    path: /combine_multipart_data
    method: POST
    data_selector: files_map
    params: {}
- name: files
  endpoint:
    path: /combine_multipart_data
    method: POST
    data_selector: files
    params: {}
- name: results
  endpoint:
    path: /results
    method: POST
    data_selector: data.results
    params: {}
- name: Query
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
- name: Mutation
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
- name: counter
  endpoint:
    path: /counter
    method: GET
    data_selector: counter
    params: {}
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: alerts
    params: {}
- name: alerts
  endpoint:
    path: alerts
    method: GET
- name: counter
  endpoint:
    path: counter
    method: GET
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: data
- name: counter
  endpoint:
    path: /counter
    method: GET
    data_selector: data
- name: alerts
  endpoint:
    path: alerts
    method: subscription
    data_selector: alerts
- name: counter
  endpoint:
    path: counter
    method: subscription
    data_selector: counter
- name: GraphQLHTTPHandler
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: Mutation
  endpoint:
    path: /mutations
    method: POST
    data_selector: data
    params: {}
- name: Story
  endpoint:
    path: /server/0.8.0/scalars
    method: GET
    data_selector: records
- name: extensions
  endpoint:
    path: /server/0.8.0/extensions
    method: GET
- name: custom_extension_example
  endpoint:
    path: /server/0.8.0/extensions
    method: GET
- name: wsgi_extension_implementation
  endpoint:
    path: /server/0.8.0/extensions
    method: GET
notes:
- Uses GraphQL for API structure
- Ariadne provides a GraphQL server implementation.
- Install Ariadne using pip.
- Uses GraphQL for API requests.
- Uses GraphQL API.
- Uses GraphQL schema for API definition
- Uses GraphQL schema and resolvers to handle queries.
- Uses GraphQL API for queries
- The API returns a greeting based on the client's user agent
- Uses GraphQL API accessible through the browser
- Uses GraphQL for querying data.
- The hello field returns a greeting message containing the user's agent.
- Uses GraphQL schema to define API
- Client can query the hello field to receive a greeting message
- Uses GraphQL schema definitions.
- Requires an ASGI server like uvicorn to serve the application.
- Uses GraphQL schema with a single Query type and hello field
- Ariadne is a Python GraphQL framework for building APIs.
- Uses GraphQL API
- Uses GraphQL schema definition language (SDL) to define API structure.
- The default context contains a 'request' object with user agent info.
- Ariadne is a Python GraphQL server framework.
- The default GraphQL server implementation requires an ASGI server like uvicorn.
- Uses GraphQL to expose API
- Ariadne is a Schema-first GraphQL server
- Ariadne is no longer actively maintained.
- Requires implementation of Query type in GraphQL API.
- Don't worry about `input` and `clean_input` dicts for now. Next chapters of this
  guide will show you how to customize GraphQL's default behavior using Ariadne's
  utilities.
- Mutating resolve and out_name attributes is considered safe to do if their original
  value was None and the GraphQL server has not started yet.
- Ariadne limits all mutations of Schema it performs to the make_executable_schema,
  where its not yet available to rest of the application.
- Custom scalars enable better control on how Python objects and values are represented
  in GraphQL query inputs and results.
- If resolver returns value that's not JSON serializable, GraphQL server will fail
  while creating Query result, and will return error 500 to the client.
- If JSON with variables or Query AST is incorrect the server will return 400 BAD
  REQUEST and will not attempt to execute query.
- Subscriptions are only possible to implement in asynchronous servers that implement
  the WebSockets protocol.
- If you are using uvicorn you need to pip install websockets otherwise you'll get
  Could not connect to websocket endpoint.
- WSGI-based servers are synchronous in nature and unable to handle WebSockets.
- The GraphQLHTTPSSEHandler requires the ASGI server to work.
- This handler only supports the distinct connections mode of the protocol due to
  Ariadne's stateless implementation.
- Dataloaders are a GraphQL pattern for solving the N+1 problem
- Dataloaders are a GraphQL pattern for solving the N+1 problem.
- Dataloader may cache retrieved items to make repeated retrievals faster.
- Dataloader batches multiple retrieval operations into one.
- SyncDataLoader caches previously loaded objects on its instance, so repeated calls
  to load previously loaded objects don't trigger new loads.
- Unlike DataLoader, SyncDataLoader doesn't provide an API for clearing entire cache
  or priming objects.
- File uploads require python-multipart library
- Schema directives are special annotations that developers can use to change or extend
  behaviour for selected elements in the schema.
- Ariadne supports building federated schemas through use of special types and directives
  introduced by federation specification.
- Use Apollo Gateway for composing multiple GraphQL services into one data graph.
- GraphQL types and resolvers are defined in code and require a schema.
- This is unreleased documentation for Ariadne · Python GraphQL Schema-first Next
  version.
- GraphQL interfaces require a type resolver.
- Queries can return various types based on the resolver's output.
- The API supports both synchronous and asynchronous operations.
- A bool for enabling debug mode. Controls presence of debug data in errors reported
  to client.
- A bool for disabling introspection queries.
- This version is no longer actively maintained.
- No authentication is required for this API.
- Uses `convert_names_case=True` option to resolve field names.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- GraphQL interfaces require a type resolver to function.
- To bind an interface to a schema, use the bind_to_schema method.
- GraphQL interfaces require a type resolver to function properly
- Valid schema must define the Query type
- Supports subscriptions for real-time data
- Uses GraphQL for schema definition and resolver functions.
- Uses Redis message backend
- Requires setup of broadcaster for publishing and subscribing to messages
- Some utility functions deprecated in future releases.
- Requires setup of subscriptions in the GraphQL schema
- Uses GraphQL subscriptions for real-time updates
- Uses GraphQL for queries and mutations
- Uses GraphQL with custom scalar types.
- Uses GraphQL subscriptions for real-time updates.
- Uses GraphQL to define types and resolvers.
- Type resolver is required by InterfaceType to function properly.
- GraphQL schema may contain various types and input types.
- No specific notes provided.
- GraphQL API requires a valid schema to query.
- Type resolver is required by UnionType to function properly.
- Base class for custom GraphQL directives.
- Separate instances of the GraphQL directive are created for each GraphQL schema
  item with the directive set on it.
- Uses GraphQL schema for data interaction
- This function is an asynchronous coroutine so you will need to await on the returned
  value.
- Coroutines will not work under WSGI. If your server uses WSGI (Django and Flask
  do), use graphql_sync instead.
- Supports the Query and Mutation operations.
- Handles websocket connections for GraphQL
- Ariadne uses type annotations in its codebase.
- This is documentation for Ariadne · Python GraphQL Schema-first 0.8.0, which is
  no longer actively maintained.
- This is documentation for Ariadne · Python GraphQL Schema-first 0.21, which is no
  longer actively maintained.
- This is documentation for Ariadne · Python GraphQL Schema-first 0.20, which is no
  longer actively maintained.
- Some objects may return nulls in deeply nested fields
- This is documentation for Ariadne · Python GraphQL Schema-first 0.18, which is no
  longer actively maintained.
- This is documentation for Ariadne · Python GraphQL Schema-first 0.16, which is no
  longer actively maintained.
- Ariadne ecosystem is no longer actively maintained.
- This is documentation for Ariadne · Python GraphQL Schema-first 0.7.0, which is
  no longer actively maintained.
- Ariadne requires that your GraphQL API always defines a Query type.
- It's considered a good design for mutations to return an updated object whenever
  possible.
- Custom scalars allow you to convert your Python objects to a JSON-serializable form
  in query results.
- Implementing logic validating if the status value is allowed is not required - this
  is done by GraphQL.
- WSGI-based servers (including Django) are synchronous in nature and unable to handle
  WebSockets.
- File uploads support for ASGI server requires that python-multipart is installed
- At the moment adding extensions to subscriptions is not supported.
errors:
- 'Variable "$input" got invalid value {}.

  In field "name": Expected "String!", found null.'
- '''dict'' object has no attribute ''build_name'''
- INTERNAL SERVER ERROR
- 'TypeError: Object of type date is not JSON serializable'
- 'Expected type Datetime!, found "invalid string": time data ''invalid string'' does
  not match format ''%Y-%m-%d'''
- 'Could not connect to websocket endpoint: Please check if the endpoint url is correct.'
- 'Invalid payload: Invalid payload'
- 'Missing auth: Missing auth'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'WebSocketConnectionError: Custom error reporting for on_connect'
- 'HttpBadRequestError: Request did not contain the data required to execute the GraphQL
  query'
- 'HttpError: Base class for HTTP errors raised inside the ASGI and WSGI servers'
- 'HTTP_STATUS_400_BAD_REQUEST: 400 Bad Request'
- 'HTTP_STATUS_405_METHOD_NOT_ALLOWED: 405 Method Not Allowed'
- 400 Bad Request
- 405 Method Not Allowed
- '400 Bad Request: Check request parameters'
- '405 Method Not Allowed: Ensure the correct HTTP method is used'
- '405 Method Not Allowed: Verify the HTTP method used'
- 'HTTP_STATUS_200_OK: 200 OK'
- HTTP_STATUS_400_BAD_REQUEST
- HTTP_STATUS_405_METHOD_NOT_ALLOWED
- 'HTTP_STATUS_400_BAD_REQUEST: Bad Request'
- 'HTTP_STATUS_405_METHOD_NOT_ALLOWED: Method Not Allowed'
- HttpError
- HttpBadRequestError
- HttpMethodNotAllowedError
- Expected type Datetime!, found "invalid string"; time data 'invalid string' does
  not match format '%Y-%m-%d'
- 'Argument "status" has invalid value TEST.

  Expected type "UserStatus", found TEST.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://graphql-core-3.readthedocs.io
source_metadata: null
