resources:
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: identity_data_sources
  endpoint:
    path: /identity/data/sources
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: identity_data_sources
  endpoint:
    path: /api/v1/identity/data_sources
    method: GET
    data_selector: data_sources
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: group
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: identity_data
  endpoint:
    path: /api/v1/identity
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: identity_data
  endpoint:
    path: /api/identity/data
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Data Store
  endpoint:
    path: /add-active-directory-data-store
    method: POST
    data_selector: data
    params: {}
- name: Identity Pool
  endpoint:
    path: /api/identity-pool
    method: GET
    data_selector: records
    params: {}
- name: ASP.NET data store
  endpoint:
    path: /add-asp-net-data-store
    method: POST
    data_selector: data_store
    params: {}
- name: identity_data
  endpoint:
    path: /api/v1/identity_data
    method: GET
    data_selector: data
    params: {}
- name: LDAP Data Store
  endpoint:
    path: /add-ldap-data-store
    method: POST
    data_selector: data
    params: {}
- name: data_store
  endpoint:
    path: /add-netiq-edirectory-data-store
    method: POST
    data_selector: data_store_properties
    params: {}
- name: Oracle DB
  endpoint:
    path: /services/data/vXX.X/oracleDB
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: POST
    data_selector: user_data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: identity_data_sources
  endpoint:
    path: /api/identity-data-sources
    method: GET
    data_selector: records
- name: authentication_policies
  endpoint:
    path: /api/authentication-policies
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: session
  endpoint:
    path: /api/v1/sessions
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /USERS
    method: CREATE TABLE
    data_selector: USERID
    params: {}
- name: userah
  endpoint:
    path: /USERAH
    method: CREATE TABLE
    data_selector: USER_ROWID
    params: {}
- name: userfp
  endpoint:
    path: /USERFP
    method: CREATE TABLE
    data_selector: USER_ROWID
    params: {}
- name: userpn
  endpoint:
    path: /USERPN
    method: CREATE TABLE
    data_selector: USER_ROWID
    params: {}
- name: userot
  endpoint:
    path: /USEROT
    method: CREATE TABLE
    data_selector: USER_ROWID
    params: {}
- name: ipaddresses
  endpoint:
    path: /IPADDRESSES
    method: CREATE TABLE
    data_selector: USER_ROWID
    params: {}
- name: get_password
  endpoint:
    path: /getpassword
    method: GET
    data_selector: RETVAL
    params: {}
- name: validate_user
  endpoint:
    path: /validateuser
    method: GET
    data_selector: RETVAL
    params: {}
- name: reset_password
  endpoint:
    path: /resetpassword
    method: POST
    data_selector: success
    params: {}
- name: change_password
  endpoint:
    path: /changepassword
    method: POST
    data_selector: success
    params: {}
- name: get_user_profile
  endpoint:
    path: /getuserprofile
    method: GET
    data_selector: userProfile
    params: {}
- name: update_user_profile
  endpoint:
    path: /updateuserprofile
    method: POST
    data_selector: success
    params: {}
- name: lock_user
  endpoint:
    path: /lockuser
    method: POST
    data_selector: procedure
    params: {}
- name: unlock_user
  endpoint:
    path: /unlockuser
    method: POST
    data_selector: procedure
    params: {}
- name: UserTable
  endpoint:
    path: /UserTable
    method: CREATE
    data_selector: records
- name: UserFP
  endpoint:
    path: /UserFP
    method: CREATE
    data_selector: records
- name: UserPN
  endpoint:
    path: /UserPN
    method: CREATE
    data_selector: records
- name: UserAccessHistory
  endpoint:
    path: /UserAccessHistory
    method: CREATE
    data_selector: records
- name: UserOT
  endpoint:
    path: /UserOT
    method: CREATE
    data_selector: records
- name: GetUserProfile
  endpoint:
    path: /services/data/vXX.X/sobjects/UserProfile
    method: GET
    data_selector: records
    params:
      UserName: '@UserName'
- name: UpdateUserProfile
  endpoint:
    path: /services/data/vXX.X/sobjects/UserProfile
    method: POST
    data_selector: records
    params:
      UserName: '@UserName'
      FirstName: '@FirstName'
      LastName: '@LastName'
      Phone1: '@Phone1'
      Phone2: '@Phone2'
      Phone3: '@Phone3'
      Phone4: '@Phone4'
      Email1: '@Email1'
      Email2: '@Email2'
      Email3: '@Email3'
      Email4: '@Email4'
      AuxID1: '@AuxID1'
      AuxID2: '@AuxID2'
      AuxID3: '@AuxID3'
      AuxID4: '@AuxID4'
      AuxID5: '@AuxID5'
      AuxID6: '@AuxID6'
      AuxID7: '@AuxID7'
      AuxID8: '@AuxID8'
      AuxID9: '@AuxID9'
      AuxID10: '@AuxID10'
      pinHash: '@pinHash'
      Questions: '@Questions'
      Answers: '@Answers'
      ChallengeQuestion: '@ChallengeQuestion'
      ChallengeAnswer: '@ChallengeAnswer'
      CertResetDate: '@CertResetDate'
      CertCount: '@CertCount'
      CertSerialNumber: '@CertSerialNumber'
      MobileResetDate: '@MobileResetDate'
      MobileCount: '@MobileCount'
      ExtSyncPwdDate: '@ExtSyncPwdDate'
      HardwareToken: '@HardwareToken'
      iOSDevices: '@iOSDevices'
      OATHSeed: '@OATHSeed'
      OneTimeOATHList: '@OneTimeOATHList'
      CookieKeys: '@CookieKeys'
      MultiFactorThrottle: '@MultiFactorThrottle'
      OTPValidation: '@OTPValidation'
      PWThrottle: '@PWThrottle'
      OIDCConsent: '@OIDCConsent'
- name: UserTable
  endpoint:
    path: /UserTable
    method: GET
    data_selector: UserName
- name: UserFP
  endpoint:
    path: /UserFP
    method: GET
    data_selector: UserName
- name: UserPN
  endpoint:
    path: /UserPN
    method: GET
    data_selector: UserName
- name: UserAccessHistory
  endpoint:
    path: /UserAccessHistory
    method: GET
    data_selector: UserName
- name: UserOT
  endpoint:
    path: /UserOT
    method: GET
    data_selector: UserName
- name: UserTable
  endpoint:
    path: /UserTable
    method: SELECT
    data_selector: AccountStatus
    params: {}
- name: sp_EnableUser
  endpoint:
    path: /sp_EnableUser
    method: CREATE PROCEDURE
    data_selector: UserName
    params: {}
- name: UserTable
  endpoint:
    path: /UserTable
    method: CREATE
    data_selector: records
    params: {}
- name: UserFPJson
  endpoint:
    path: /UserFPJson
    method: CREATE
    data_selector: records
    params: {}
- name: UserPNJson
  endpoint:
    path: /UserPNJson
    method: CREATE
    data_selector: records
    params: {}
- name: UserAccessHistoryJson
  endpoint:
    path: /UserAccessHistoryJson
    method: CREATE
    data_selector: records
    params: {}
- name: UserOTJson
  endpoint:
    path: /UserOTJson
    method: CREATE
    data_selector: records
    params: {}
- name: UserTable
  endpoint:
    path: /UserTable
    method: CREATE
    data_selector: UserTable
    params: {}
- name: UserFP
  endpoint:
    path: /UserFP
    method: CREATE
    data_selector: UserFP
    params: {}
- name: UserPN
  endpoint:
    path: /UserPN
    method: CREATE
    data_selector: UserPN
    params: {}
- name: UserAccessHistory
  endpoint:
    path: /UserAccessHistory
    method: CREATE
    data_selector: UserAccessHistory
    params: {}
- name: UserOT
  endpoint:
    path: /UserOT
    method: CREATE
    data_selector: UserOT
    params: {}
- name: UserTable
  endpoint:
    path: /UserTable
    method: SELECT
    data_selector: UserName
    params: {}
- name: UserStore
  endpoint:
    path: /UserStore
    method: EXECUTE
    data_selector: sp_LockUser
    params: {}
- name: UserTable
  endpoint:
    path: /UserTable
    method: CREATE
    data_selector: none
    params: {}
- name: UserFPJson
  endpoint:
    path: /UserFPJson
    method: CREATE
    data_selector: none
    params: {}
- name: UserPNJson
  endpoint:
    path: /UserPNJson
    method: CREATE
    data_selector: none
    params: {}
- name: UserAccessHistoryJson
  endpoint:
    path: /UserAccessHistoryJson
    method: CREATE
    data_selector: none
    params: {}
- name: UserOTJson
  endpoint:
    path: /UserOTJson
    method: CREATE
    data_selector: none
    params: {}
- name: LockUser
  endpoint:
    path: '[UserStore].dbo.sp_LockUser'
    method: EXECUTE
- name: UnlockUser
  endpoint:
    path: '[UserStore].dbo.sp_UnlockUser'
    method: EXECUTE
- name: CreateUser
  endpoint:
    path: '[UserStore].dbo.sp_CreateUser'
    method: EXECUTE
- name: GetUser
  endpoint:
    path: '[UserStore].dbo.sp_GetUser'
    method: EXECUTE
- name: GetUserProfileJson
  endpoint:
    path: '[UserStore].dbo.sp_GetUserProfileJson'
    method: EXECUTE
- name: UpdateUserProfileJson
  endpoint:
    path: '[UserStore].dbo.sp_UpdateUserProfileJson'
    method: EXECUTE
- name: GetPasswordWithFormat
  endpoint:
    path: '[UserStore].dbo.sp_GetPasswordWithFormat'
    method: EXECUTE
- name: ResetPassword
  endpoint:
    path: '[UserStore].dbo.sp_ResetPassword'
    method: EXECUTE
- name: AddUserToGroup
  endpoint:
    path: '[UserStore].dbo.sp_AddUserToGroup'
    method: EXECUTE
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: audit_logs
  endpoint:
    path: /api/audit/logs
    method: GET
    data_selector: records
    params: {}
- name: consents
  endpoint:
    path: /api/consents
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: audit_logs
  endpoint:
    path: /audit-logs
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: transaction
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: customer
  endpoint:
    path: /services/data/v2/sobjects/Customer
    method: GET
    data_selector: records
    params: {}
- name: transaction
  endpoint:
    path: /services/data/v2/sobjects/Transaction
    method: GET
    data_selector: records
    params: {}
- name: audit_events
  endpoint:
    path: /audit_events
    method: GET
    data_selector: events
- name: audit_logs
  endpoint:
    path: /audit-logs
    method: GET
    data_selector: logs
    params: {}
- name: SecureAuth IP Addresses
  endpoint:
    path: /secureauth/ip-addresses
    method: GET
    data_selector: ip_addresses
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: audit_logs
  endpoint:
    path: /services/data/vXX.X/sobjects/AuditLogs
    method: GET
    data_selector: records
    params: {}
- name: user_storage
  endpoint:
    path: /services/data/vXX.X/sobjects/UserStorage
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Audit Logs
  endpoint:
    path: /audit/logs
    method: GET
    data_selector: records
- name: user_profile
  endpoint:
    path: /api/user_profiles
    method: POST
    data_selector: data
    params: {}
- name: registration
  endpoint:
    path: /api/registration
    method: POST
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
- name: session
  endpoint:
    path: /api/v1/sessions
    method: GET
    data_selector: data
- name: ldap-agent
  endpoint:
    path: /etc/acceptto/ldap-agent.conf
    method: GET
    data_selector: config
    params: {}
- name: LDAP Agent
  endpoint:
    path: /user-directories
    method: GET
- name: LDAP Agent
  endpoint:
    path: /ldap-agent
    method: POST
    data_selector: Config
    params: {}
- name: LDAP Configuration
  endpoint:
    path: /config
    method: GET
    data_selector: configuration
    params: {}
- name: Active Directory User Directory
  endpoint:
    path: /user-directories
    method: POST
- name: user_directory
  endpoint:
    path: /user/directories
    method: POST
    data_selector: directory
    params:
      tenant_id: directory_tenant_id
      azure_domain: azure_tenant_domain
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: FDXConsent
  endpoint:
    path: /fdx/consent
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: operational_attributes
  endpoint:
    path: /user/operational_attributes
    method: GET
    data_selector: attributes
- name: custom_attributes
  endpoint:
    path: /user/custom_attributes
    method: GET
    data_selector: attributes
- name: audit_logs
  endpoint:
    path: /api/audit_logs
    method: GET
    data_selector: records
    params: {}
- name: user_registration
  endpoint:
    path: /tenant_id/identity/identity_pool_id/register
    method: GET
    data_selector: records
- name: audit_logs
  endpoint:
    path: /services/data/vXX.X/sobjects/AuditLogs
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: organization_schema
  endpoint:
    path: /settings/custom_attributes
    method: POST
    data_selector: properties
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: audit_logs
  endpoint:
    path: /services/data/vXX.X/sobjects/AuditLogs
    method: GET
    data_selector: records
- name: client_secrets
  endpoint:
    path: /services/data/vXX.X/sobjects/ClientSecrets
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: audit_logs
  endpoint:
    path: /services/data/vXX.X/sobjects/AuditLog
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: audit_logs
  endpoint:
    path: /services/data/vXX.X/auditLogs
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Audit Logs
  endpoint:
    path: /audit/logs
    method: GET
    data_selector: records
- name: identity_pools
  endpoint:
    path: /api/v1/identityPools
    method: POST
    data_selector: data
    params: {}
- name: user_registration
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: SAML Service Provider
  endpoint:
    path: /applications/clients
    method: POST
    data_selector: application
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: register_client
  endpoint:
    path: /oauth2/register
    method: POST
    data_selector: client_id
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: audit_logs
  endpoint:
    path: /services/data/vXX.X/auditLogs
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: begin_registration
  endpoint:
    path: /register/webauthn/begin
    method: POST
    data_selector: publicKey
    params: {}
- name: finish_registration
  endpoint:
    path: /register/webauthn/finish
    method: POST
    data_selector: ''
    params: {}
- name: begin_login
  endpoint:
    path: /login/webauthn/options
    method: POST
    data_selector: publicKey
    params: {}
- name: finish_login
  endpoint:
    path: /login/webauthn/finish
    method: POST
    data_selector: ''
    params: {}
- name: identity_pool
  endpoint:
    path: /identity/pools
    method: POST
    data_selector: pool
    params: {}
- name: users
  endpoint:
    path: /identity/pools/users
    method: POST
    data_selector: user
    params: {}
- name: groups
  endpoint:
    path: /identity/pools/groups
    method: POST
    data_selector: group
    params: {}
- name: password_policy
  endpoint:
    path: /configure/password_policy
    method: GET
    data_selector: password_requirements
    params: {}
- name: user_password_details
  endpoint:
    path: /view/user_password_details
    method: GET
    data_selector: password_details
    params: {}
- name: force_password_reset
  endpoint:
    path: /force/password_reset
    method: POST
    data_selector: reset_details
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: import_tenant_configuration
  endpoint:
    path: /api/identity/system/{tid}/configuration
    method: PUT
    data_selector: null
    params: {}
- name: export_tenant_configuration
  endpoint:
    path: /api/identity/system/{tid}/configuration
    method: GET
    data_selector: null
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Cognito Connection
  endpoint:
    params:
      Allowed OAuth Scopes:
      - email
      - profile
      - openid
- name: audit_logs
  endpoint:
    path: /services/data/vXX.X/sobjects/AuditLogs
    method: GET
    data_selector: records
- name: user_registration
  endpoint:
    path: /services/data/vXX.X/sobjects/UserRegistration
    method: POST
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: audit_logs
  endpoint:
    path: /services/data/vXX.X/sobjects/AuditLogs
    method: GET
    data_selector: records
    params: {}
- name: login_request_details
  endpoint:
    path: /api/system/{tenant_id}/logins/{login_id}
    method: GET
- name: accept_login_request
  endpoint:
    path: /api/system/{tenant_id}/logins/{login_id}/accept
    method: PUT
- name: reject_login_request
  endpoint:
    path: /api/system/{tenant_id}/logins/{login_id}/reject
    method: PUT
- name: Audit Logs
  endpoint:
    path: /audit-logs
    method: GET
    data_selector: records
- name: audit_logs
  endpoint:
    path: /audit_logs
    method: GET
    data_selector: records
    params: {}
- name: update_static_idp
  endpoint:
    path: /api/admin/default/servers/sample-workspace/idps/static
    method: PUT
    data_selector: ''
    params: {}
- name: get_static_idp
  endpoint:
    path: /api/admin/default/servers/sample-workspace/idps/static
    method: GET
    data_selector: ''
    params: {}
- name: audit_logs
  endpoint:
    path: /api/v1/audit/logs
    method: GET
    data_selector: records
    params: {}
- name: user_management
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: attributes
  endpoint:
    path: /authentication/providers/saml-idp/attributes
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: organization_schema
  endpoint:
    path: /settings/custom_attributes
    method: POST
    data_selector: properties
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: audit_logs
  endpoint:
    path: /audit/logs
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: audit_logs
  endpoint:
    path: /api/audit_logs
    method: GET
    data_selector: logs
    params: {}
- name: audit_logs
  endpoint:
    path: /services/data/vXX.X/sobjects/AuditLogs
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: tenant_settings
  endpoint:
    path: /services/data/vXX.X/sobjects/TenantSettings
    method: GET
    data_selector: records
    params: {}
- name: Policies
  endpoint:
    path: /ciam/en/access-policies.html
    method: GET
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Authorization Policy
  endpoint:
    path: /api/policies
    method: POST
    data_selector: policy
    params: {}
- name: Applications
  endpoint:
    path: /api/applications
    method: GET
    data_selector: applications
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Authorization policies are centrally administered, with benefits to auditability
  and ease of management.
- 'In cloud deployments with SecureAuth IWA Service enabled for Windows SSO, updating
  any data store information might wipe out the IWA service account password. Workaround:
  Re-enter the IWA service account password.'
- This issue is resolved in the 24.4.2 release.
- Requires configuration of OAuth2 for app access.
- Some objects like Contact may return nulls in deeply nested fields
- Some objects may return nulls in deeply nested fields
- OAuth 2.0 configuration is required for authentication
- Uses OAuth2 with refresh token — requires setup of connected app in SecureAuth
- Some API calls may result in delays during peak hours
- Enhanced Air-Gap environment support
- Minor UI updates aimed at improving usability
- Custom mouse pointer support – Fixed an issue where the mouse cursor did not appear
  in credential input fields during Windows login in certain environments.
- Self-service Password Reset – Updated the embedded Chromium browser to use the latest
  version.
- Code signing update – Updated the build process to use the latest SecureAuth code
  signing certificate.
- Microsoft has reached end of support for Windows 8.1. This will be the last Login
  for Windows version supported on Windows 8.1.
- 'New properties in the installer configuration: ldap_timeout allows you to set the
  timeout in seconds for the LDAP request. user_bypass allows you to define a local
  username to bypass multi-factor authentication (MFA).'
- 'Support for macOS 15: Sequoia'
- New installer configuration properties to bypass MFA or request MFA for users in
  defined groups or organizational units.
- General improvements
- Requires setup of connected app in SecureAuth
- New properties in the installer configuration. New properties are available to use
  in the installer config.json file.
- This new property will be available in a later update to the Identity Platform on
  the Login for Endpoints installer UI. As a workaround, you can manually add ldap_timeout
  to the installer config.json file.
- This new property will be available in a later update to the Identity Platform on
  the Login for Endpoints installer UI. As a workaround, you can manually add this
  new property to the installer config.json file.
- MSCHAPv2 password resets fail.
- Reinstalling SecureAuth RADIUS overwrites keystore certificate files.
- Syslog for SecureAuth RADIUS server is not working.
- Apache Log4j vulnerability – On December 14, 2021, SecureAuth released a RADIUS
  Server fix to address potential threats caused by the Apache Log4j vulnerability.
- The toolkit contains email templates to help admins communicate the roll-out strategy,
  actions to be taken by end users, and expectations, along with an FAQ section.
- You will receive an email with a unique username and password specific to your organization.
- You must first install and set up an on-prem SecureAuth Connector to establish communication
  between the Identity Platform and your data store.
- Uses OAuth2 with refresh token
- Some responses may include null fields for optional data
- Sites must install and configure the SecureAuth Connector to connect to on-prem
  data stores.
- 'Data stores: When upgrading from SecureAuth Identity Platform 9.3 or later, sites
  migrating to the SecureAuth cloud do not need to re-create data stores, but must
  re-enter the credentials after installing the SecureAuth Connector.'
- If you install or update the SecureAuth Connector after June 5, 2023, you must change
  the outbound firewall rule to TCP port 5671.
- Connector is not responding.
- If you have any questions about which ports to open, contact SecureAuth Support.
- Requires SecureAuth Connector version 2.0.2 or later.
- The username and password that you create in this step must match the username and
  password you enter when enabling FBA Web Service in Step C.
- A data store added to the Identity Platform in the New Experience cannot be edited
  in the Advanced Settings.
- To migrate from SecureAuth IdP (on-prem) version 9.3 with an existing AD data store
  configured using the New Experience to the Identity Platform (cloud), you will need
  to reenter the data store credentials after downloading and installing the SecureAuth
  Connector.
- Each mapped profile property should have its own directory attribute. It is not
  recommended to map the same directory attribute to more than one property.
- Each mapped profile property should have its own directory attribute.
- It is not recommended to map the same directory attribute to more than one property.
- Requires setup of SecureAuth Connector
- User profiles are not stored in Identity Platform
- You can only assign users to a group if they already exist in the Identity Pool.
  Create users first before adding them to a group.
- SSL connection might or might not work depending on the LDAP directory setup.
- All data format types might not work for all property and attribute mappings.
- When you set Allow public client flows to Yes, the application no longer appears
  in the app picker for Conditional Access policies.
- If a Conditional Access policy requires MFA for All resources, you can't exclude
  this application from the policy.
- Login workflows that include a password is not supported for guest accounts on Microsoft
  Entra ID. Use passwordless login workflow.
- You can only use Microsoft Entra ID in applications created in the New Experience.
- Password complexity rules set up in the Identity Platform cannot be applied to Microsoft
  Entra ID.
- Push notifications – Push notification login options are not available when Push
  Notification Token is in JSON data format
- SSL connection – Depending on the type of eDirectory and the directory setup, the
  SSL connection might or might not work.
- Data store support – Take note that all data format types might not work for all
  property and attribute mappings. Make sure to test the storage and usage before
  releasing to users.
- Requires setup of connected app in SecureAuth Identity Platform
- Use CyberArk Vault for credentials.
- For Identity Platform cloud deployments, have the SecureAuth Connector installed
  and connected.
- Split Profile data stores can only pull information from data stores that has membership
  validation enabled.
- 'If you have login performance issues, see this knowledge base article: How to improve
  performance by disabling lookups in nested groups'
- Extended attributes are supported only in legacy and on-premises Identity Platform
  deployments.
- If you want to migrate to the Identity Platform in the cloud, you will need to use
  out-of-the-box profile properties.
- The attribute mappings described here are specific to Active Directory integrations.
  Some attribute mapping adjustments might be required for other data store types,
  like LDAP.
- Identity Platform release 23.07 or later, cloud or hybrid deployment
- Have the ASP.NET framework
- Make sure Microsoft SQL Server is installed on the server
- Authenticate with a user that has Create Database permissions
- Ensure ports are open to enable connection to the SQL user data store
- Basic SQL knowledge to deploy the scripts
- Change the username `SecureAuthSQLUser` and `Password` to the actual values.
- The procedures for locking, disabling, and enabling users are defined in the database.
- Requires setup of connected app in api
- Protect API using Role-Based Access Control (RBAC) with Identity Pools.
- Securing Partner API Integrations with OAuth mTLS.
- Uses OAuth with mTLS for secure integrations
- Uses OAuth2 with mTLS for secure API access
- Uses OAuth2 with mTLS for secure API integrations
- Organizations may require Multi-Factor Authentication (MFA) during user sign in
  and consent granting.
- Some responses may return nulls for optional fields
- Uses OAuth2 with mTLS for secure communications
- If your firewall security rules block traffic from SecureAuth, allowlist the IP
  addresses that we use.
- Uses OAuth with mTLS for secure API integrations
- Authorization as a Service
- Some responses may have nulls in deeply nested fields
- Protect API using Role-Based Access Control (RBAC) with Identity Pools
- Uses OAuth2 with mTLS — requires setup of identity provider.
- Uses OAuth2 with mTLS for securing API integrations
- As an administrator, use these guides for step-by-step instructions on setting up
  and configuring SessionGuardian quickly.
- Configure and manage administrative settings in SessionGuardian.
- Monitoring user activity, generating reports, and tracking changes in the SessionGuardian
  Admin Console.
- By default the application is configured to store the images of captured screen
  content in the main S3 bucket (the bucket that the application uses for file storage).
- 'If you''d like to overwrite and use another S3 storage, please refer to the following
  two environment variables which can be updated: sge.escalated-alerts.screen-capture.s3-storage.bucket=,
  sge.escalated-alerts.screen-capture.directory-name= - the default value is alert/screen-capture.'
- SecureAuth Support for SessionGuardian
- SecureAuth Cloud Incident Response Process
- Use this guide to set up and manage SessionGuardian.
- Set a custom logo to display globally on Admin Console login screen, invitation,
  registration, and activation pages, and startup screen for all SessionGuardian clients.
- Define the support email, minimum software version, and download URL to ensure compatibility,
  streamline support, and enhance user experience.
- By default, the Communication type is set to EMAIL.
- Use this Quick Start guide to onboard end users efficiently. Learn how to create
  and manage user profiles, send registration emails, and handle multiple user accounts.
- This guide walks you through enrolling users in SessionGuardian Desktop.
- When there's no user directory Arculix will provide a user directory on its own.
- Requires configuration of OAuth client in SecureAuth
- Some responses may include sensitive user data
- The Acceptto product has simply been rebranded with the Arculix name and colors
  – there are no functionality changes to the product.
- Enhanced OAuth token authentication — Dashboard APIs now accept OAuth token authentication
  for better CIAM integration.
- For operating system compatibility with Device Trust, make sure to review the Arculix
  Device Trust section in the Arculix compatibility guide.
- Added support for reliable operation in an AD FS server farm cluster.
- Set a useful User-Agent header on outbound HTTP calls.
- Improved logging, including prefixing all log entries with the AD FS Activity ID
  when available.
- Included the AD FS Activity ID in the Arculix audit log under context > http_header_params
  > ad_fs_activity_id. This helps correlate Arculix AD FS plugin log entries with
  Arculix authentications.
- When the ArculixUserIdentifierAttribute is userPrincipalName, bypass the directory
  user lookup, since it is not needed.
- Improved configuration names and defaults. Added support to configure all settings
  during silent (command line) installation.
- Rebranded the plugin from “Acceptto” to “Arculix”.
- Simplified the authentication flow to be a simple redirect to Arculix, avoiding
  the need to use external JavaScript libraries in the plugin.
- Added support for user attributes without domain names (such as sAMAccountName)
  by providing the ArculixUserIdentifierDomain setting.
- Added an output claim for the Arculix level of assurance (LOA) score so it can be
  consumed downstream.
- Fixed typo in configuration UI
- Reduced namespace collision surface in JAR
- Establishing the root of trust for device ID and Device Trust for web, mobile, and
  workstation endpoints
- The LDAP Agent is a stateless service, so there is no limitation for horizontal
  scaling.
- Use of non-secure LDAP isn't recommended, but is available for rare situations where
  the customer can guarantee protection of the data in transit by other means.
- Windows administrators are encouraged to use the supplied configuration tool instead
  of editing the YAML configuration directly.
- The LDAP Agent communicates with the user directory using the LDAP protocol.
- A user account must be provisioned which allows read-only access to the directory.
- Use of environment variables to configure the LDAP Agent is primarily intended for
  Docker-based deployments.
- Change password and reset password methods are supported only when using LDAPS (LDAP
  over SSL) connections.
- To enable password management features, use LDAPS and configure appropriate service
  credentials.
- FAPI 2.0 is still in the draft phase, but certification is possible with the Implementers
  Draft FAPI 2.0 specification.
- Implemented DCR adjustments to be compliant with the latest changes to the Open
  Finance Brazil specification.
- Uses OAuth/OIDC for authentication
- Supports mTLS for secure API integrations
- SecureAuth recommends using universal login for secure authentication.
- Session Max Age is configurable in SSO settings.
- Maximum time a session can be idle before it is invalidated.
- Each user population has separate sign-in options, user identifiers, user attributes,
  password requirements, user population manager/delegated administrator, application
  and data access rights.
- Uses OAuth2 with mTLS for secure integrations
- SecureAuth prevents account enumeration by implementing consistent error responses.
- Custom attributes use Identity Schemas to control user data representation.
- API requests must include the email and custom fields in the payload object.
- Fine-grained access control is a nuanced approach to managing who can access specific
  resources.
- Access decisions can be made based on various conditions like the user’s device,
  location, or network.
- Authorization policies can be assigned to client applications, authorization server
  level, scopes, and API request level.
- EquineEase is a B2B SaaS platform designed to streamline stable management for Equestrian
  and Riding Clubs.
- SecureAuth platform administrators can easily onboard multiple organizations.
- Define a JSON-based schema for organization details using the Custom Attributes
  Schema editor.
- The editor has a built-in validator giving you real-time feedback about any potential
  errors.
- We recommend not using organizations marked as template as you would use a regular
  organization to avoid missconfiguring your newly created organizations and, for
  example, allowing access to resources you would normally deny. It is recommended
  the templates would contain only the basic configuration that can quickly get your
  organizations started.
- Uses OAuth with Role-Based Access Control (RBAC)
- Requires setup of Identity Provider
- Some API calls may be rate limited
- Uses OAuth with mTLS for secure API access
- The API key value is displayed only once, at the token creation step.
- Integrate Consent Screen
- Until FAPI 2.0 becomes final, we do not assume responsibility for FAPI 2.0 workspace
  settings, and we may introduce breaking changes as the FAPI 2.0 specification is
  refined.
- Uses OAuth2 with mTLS for secure integration
- Security Tokens - Get Access, ID, Refresh Tokens
- Ensure compliance with security standards for Open Finance
- You do not need to develop APIs like getting consents, accepting or rejecting consents,
  revoking consents, and more. They are ready at hand and you can start building consent
  pages right away.
- SecureAuth supports various strategies for acquiring consent including redirect
  flows, decoupled flow, CIBA, and app to app method.
- SecureAuth delivers a fine-grained consent application that you can easily integrate
  with.
- Zero trust model requires all users to be authenticated and authorized.
- Security best practices are constantly evolving to meet new threats.
- SecureAuth supports Identity Federation.
- Supports multiple IDPs for enhanced security.
- Peak load handling with infrastructure autoscaling capabilities.
- User self-registration is available with the Identity Pools.
- Uses OAuth2 with mTLS for authentication
- SecureAuth provides consent APIs and consent models that support all customer consent
  flows.
- SecureAuth allows you to integrate the platform with your existing identity sources
  using open standards.
- Supports advanced OAuth profiles, Financial grade API, mTLS for OAuth, or Strong
  Customer Authentication.
- Supports various authorization flows and client authentication methods.
- Consent APIs and models are ready to use.
- Supports various strategies for acquiring consent including redirect flows, decoupled
  flow, CIBA, and app to app method.
- mTLS is enabled by default.
- Supports OpenID Connect and OAuth 2.0 specifications for authentication and authorization.
- The organization must implement an authorization server capable of utilizing the
  OAuth 2.0 Device Authorization Grant (Device Flow).
- It is considered a security best practice to limit access to services and data to
  the resources that are absolutely necessary at the given moment.
- Uses OAuth2 with mTLS for secure communication.
- Uses Authorization Code Flow for secure user authentication
- Add Machine to Machine (M2M) OAuth client application
- Uses OAuth2 with mTLS — requires setup of identity provider
- This task involves creating a client application in CIAM that represents and protects
  a third-party SAML service provider (SP) application.
- SecureAuth requires setup of OAuth for API access.
- Depending on DCR settings, the software_statement body attribute or the Authorization
  Bearer header may be required to call the registration endpoint.
- Rotating and revoking client secrets is permanent and it cannot be undone.
- Requires setup of OAuth/OIDC Identity Provider
- To access a particular service, your client application needs to present the correct
  scopes in the access token.
- If you add your own client certificates, they are used instead of system root certificates.
- Configuring custom token time-to-live.
- Configure custom token time-to-live (TTL) for applications.
- The custom TTLs you set in client application settings take precedence over the
  TTLs you apply at the authorization server level.
- Enable Passwordless User Authentication
- If you wish to integrate with SecureAuth APIs and build your own login page, you
  must still enable the authentication methods of your choice in your pool settings
  to be able to successfully authenticate users.
- By default, the Demo workspace has the NIST-AAL-1 User policy assigned which allows
  to issue tokens only if the amr authentication context attribute is set to pwd (password).
  In such case, the policy must allow the amr claim to be set to otp if you are using
  verification codes or magic links and to pop if you are using passkeys.
- After logging into an application through SecureAuth, users can access all workspace
  applications without reauthenticating, as long as the session remains valid.
- Uses OAuth2 with refresh token — requires setup of connected app in secureauth
- Configurable first-factor and second-factor authentication methods available.
- Self-registration option can be enabled or disabled.
- Defines the minimum confidence level required for authentication. If the real-time
  LOA falls below this threshold, users must verify their identity with a second factor.
- 'Recommended ranges: Low (30%), Medium (60%), High (80%)'
- Schemas attached to Identity Pools are read-only. To modify a schema, update it
  at the tenant level. Changes apply across all associated Identity Pools.
- The Export API is not production-ready for large user bases. Use it only for testing
  or beta purposes.
- This provider should not be enabled or added in production level environments. This
  is meant as quick demo identity provider without depending on any external identity
  provider to validate concepts.
- Uses OAuth2 with mTLS — requires setup of identity provider in SecureAuth
- Use the authorization code grant flow
- 'Request the following scopes: openid, email, and profile'
- Auth0 acts as an external Identity Provider for SecureAuth, following the Bring
  Your Own Identity (BYOID) model.
- Authentication context caching can be enabled optionally.
- Ensure to enable read permissions for custom attributes.
- Set up required for Azure AD authentication
- Some objects like AuditLogs may return nulls in deeply nested fields
- Azure AD acts as an external Identity Provider for SecureAuth, following the Bring
  Your Own Identity (BYOID) model.
- Your Azure tenant has to be an Azure AD B2C tenant.
- Entrust applications can implement the OIDC protocol, providing the proof of user
  authentication to SecureAuth within an ID Token and Access Token.
- If you want SecureAuth to fetch group data from Entrust, add the groups claim to
  your Entrust application.
- Uses OAuth2 with mTLS
- Okta applications implement the OIDC protocol, providing the proof of user authentication
  to SecureAuth.
- SecureAuth uses the private_key_jwt authentication flow to authenticate with Okta.
- Okta applications can also use the SAML protocol, but this integration is not natively
  supported by SecureAuth yet.
- OAuth 2.0 Overview
- Exploring Financial Grade API (FAPI) 2.0
- IDP metadata can be fetched from URL or uploaded as a file or raw XML.
- If you select Subject as the identifier source, the identifier is retrieved from
  SAMLResponse <Subject>.
- If you choose Attribute, you need to enter a user attribute name into the Identifier
  attribute field.
- Ensure the Keycloak realm is properly configured for API access
- Check the client settings for valid redirect URIs
- You can enable the authentication context caching if you want SecureAuth to store
  the user's authentication data.
- 'Optional: enable Identity Provider (IdP) Discovery and provide Email domains.'
- Requires setup of connected app in OneLogin
- Some endpoints may have rate limits
- For information on granting and managing SecureAuth consents, see SecureAuth OAuth
  Consents.
- Salesforce IDP is enabled for user authentication.
- Demo workspace is created with the Demo Portal connected.
- The authorize endpoint is protected using CSRF cookies.
- SecureAuth uses this path to construct the URL of your /authenticate endpoint.
- It is possible to have exactly one Sandbox IDP or an external datastore IDP enabled
  for a workspace.
- Default OIDC/SAML attributes are mapped out of the box.
- If you need to create new authentication context attributes, read the Managing Authentication
  Context.
- Attributes returned by the script do not need to be separately mapped to the authentication
  context.
- If the incoming attribute has a `.` character in the name, the dot must be explicitly
  escaped using `\.` when defining the IDP attribute.
- API key is displayed only once at token creation step. Store securely.
- The policy that you select is validated before issuing a token for the authorization
  code/implicit grant flow. If the policy fails, the token is not issued and the user
  who tries to access the application is not allowed.
- Make sure that your application has a dynamic scope enabled.
- Restricting access to services using authorization scopes
- Restricting Access to Services Using Authorization Scopes
- Require two-factor authentication (2FA) from users when signing in to client applications
  registered within the SecureAuth platform.
- Require Two-Factor Authentication (2FA) from users before granting consent to a
  service access scope.
- Users must authenticate with a second factor when signing in to the SecureAuth platform.
- 'There are a few policy types available in SecureAuth: API request, User, Machine
  to machine, Developer, Dynamic Client Registration.'
- Another type of policies that you can create in SecureAuth is Open Policy Agent
  (OPA).
- Uses OAuth2 with mTLS for securing API integrations.
- Policies control application visibility in the User Portal based on group membership.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check your credentials.'
- '403 Forbidden: Ensure you have the right permissions.'
- 'INVALID_CREDENTIALS: Check client ID and secret'
- 'TOKEN_EXPIRED: Refresh token is required'
- '404 Not Found: Verify the endpoint URL'
- 'INVALID_CREDENTIALS: Check your client ID and secret'
- 'TOKEN_EXPIRED: Refresh your access token'
- '403 FORBIDDEN: Ensure you have the right permissions'
- 'Error connecting to Oracle DB: Check connection string and credentials.'
- 'INVALID_CLIENT: Check client ID and secret'
- 'TOKEN_EXPIRED: Refresh token or re-authenticate'
- '403 FORBIDDEN: Insufficient permissions for this operation'
- 403 when pairing a mobile device or workstation
- 'operation_not_supported: Missing LDAPResetPasswordBindUser or LDAPResetPasswordBindPass
  configuration'
- 'USO_NAO_COMPATIVEL_VERSAO: Consent created with v3 endpoint cannot be retrieved
  with v2.'
- '429 Too Many Requests: Exceeded rate limit, please slow down'
- '401 Unauthorized: Check your access token or authentication details'
- registration_access_token is rotated. Always use the latest returned token.
- '401: credential expired'
- 'invalid_grant: The provided authorization grant is invalid'
- 'access_denied: The resource owner or authorization server denied the request'
- '401 Unauthorized: Check client id and secret'
- '403 Forbidden: Access denied for this user'
- '429 Too Many Requests: Rate limit exceeded'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuth
  - IdentityProvider
  - Identity Pools
  - Role-Based Access Control
client:
  base_url: https://api.secureauth.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://api.secureauth.com/oauth2/token
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
