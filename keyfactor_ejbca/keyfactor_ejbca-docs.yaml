resources:
- name: ca_management
  endpoint:
    path: /ejbca/ejbca-rest-api/v1/ca_management/
    method: GET
- name: ca
  endpoint:
    path: /ejbca/ejbca-rest-api/v1/ca/
    method: GET
- name: certificate
  endpoint:
    path: /ejbca/ejbca-rest-api/v1/certificate/
    method: GET
- name: configdump
  endpoint:
    path: /ejbca/ejbca-rest-api/v1/configdump/
    method: GET
- name: cryptotoken
  endpoint:
    path: /ejbca/ejbca-rest-api/v1/cryptotoken/
    method: GET
- name: endentity
  endpoint:
    path: /ejbca/ejbca-rest-api/v1/endentity/
    method: GET
- name: certificate_management
  endpoint:
    path: /rest/certificate
    method: POST
    data_selector: certificates
    params: {}
- name: ca_management
  endpoint:
    path: /rest/ca
    method: GET
    data_selector: cas
    params: {}
- name: ca_management
  endpoint:
    path: /v1/ca_management/
    method: GET
- name: ca
  endpoint:
    path: /v1/ca/
    method: GET
- name: certificate
  endpoint:
    path: /v1/certificate/
    method: GET
- name: configdump
  endpoint:
    path: /v1/configdump/
    method: GET
- name: cryptotoken
  endpoint:
    path: /v1/cryptotoken/
    method: GET
- name: endentity
  endpoint:
    path: /v1/endentity/
    method: GET
- name: pkcs10enroll
  endpoint:
    path: /certificate/pkcs10enroll
    method: POST
    data_selector: certificate_request
    params: {}
- name: approval-profiles
  endpoint:
    path: /ejbca/ejbca-rest-api/v1/configdump
    method: POST
    data_selector: approval-profiles
    params:
      ignoreerrors: 'false'
      initialize: 'false'
      continue: 'false'
      overwrite: abort
      resolve: abort
- name: certificate_revocation_status
  endpoint:
    path: /v1/certificate/{issuer_dn}/{certificate_serial_number}/revocationstatus
    method: GET
- name: revoke_certificate
  endpoint:
    path: /v1/certificate/{issuer_dn}/{certificate_serial_number}/revoke
    method: PUT
- name: enroll_keystore
  endpoint:
    path: /v1/certificate/enrollkeystore
    method: POST
- name: search_certificates
  endpoint:
    path: /v1/certificate/search
    method: POST
- name: add_end_entity
  endpoint:
    path: /v1/endentity
    method: POST
- name: config_dump
  endpoint:
    path: /v1/configdump
    method: GET
- name: ca_management
  endpoint:
    path: /ca_management/
    method: GET
- name: ca
  endpoint:
    path: /ca/
    method: GET
- name: certificate
  endpoint:
    path: /certificate/
    method: GET
- name: configdump
  endpoint:
    path: /configdump/
    method: GET
- name: cryptotoken
  endpoint:
    path: /cryptotoken/
    method: GET
- name: endentity
  endpoint:
    path: /endentity/
    method: GET
- name: certificate_enrollment
  endpoint:
    path: /ejbca/ejbca-rest-api/v1/certificate/pkcs10enroll
    method: POST
    data_selector: certificate_request
- name: certificate_revocation
  endpoint:
    path: /ejbca/ejbca-rest-api/v1/certificate/{issuer_dn}/{certificate_serial_number}/revoke
    method: PUT
    data_selector: revocation_reason
- name: search_certificates
  endpoint:
    path: /ejbca/ejbca-rest-api/v1/certificate/search
    method: POST
    data_selector: criteria
- name: generate_keypair
  endpoint:
    path: /v1/cryptotoken/{cryptotoken_name}/generatekeys
    method: POST
    data_selector: ''
    params: {}
- name: endentity
  endpoint:
    path: /v1/endentity
    method: POST
    data_selector: ''
    params: {}
- name: enrollkeystore
  endpoint:
    path: /v1/certificate/enrollkeystore
    method: POST
    data_selector: ''
    params: {}
- name: configdump
  endpoint:
    path: /v1/configdump
    method: GET
    data_selector: ''
    params: {}
- name: configdump_zip
  endpoint:
    path: /v1/configdump/configdump.zip
    method: GET
    data_selector: ''
    params: {}
- name: device_enrollment
  endpoint:
    path: /enrollment
    method: POST
    data_selector: enrollmentData
- name: certificate_management
  endpoint:
    path: /certificates
    method: GET
    data_selector: certificateData
- name: acme
  endpoint:
    path: /modules/acme
    method: GET
- name: admin-gui
  endpoint:
    path: /modules/admin-gui
    method: GET
- name: batchenrollment-gui
  endpoint:
    path: /modules/batchenrollment-gui
    method: GET
- name: caa
  endpoint:
    path: /modules/caa
    method: GET
- name: certificatestore
  endpoint:
    path: /modules/certificatestore
    method: GET
- name: cesecore-common
  endpoint:
    path: /modules/cesecore-common
    method: GET
- name: clientToolBox
  endpoint:
    path: /modules/clientToolBox
    method: GET
- name: cmpclient
  endpoint:
    path: /modules/cmpclient
    method: GET
- name: common
  endpoint:
    path: /modules/common
    method: GET
- name: crlstore
  endpoint:
    path: /modules/crlstore
    method: GET
- name: ct
  endpoint:
    path: /modules/ct
    method: GET
- name: ejbca-cmp-tcp
  endpoint:
    path: /modules/ejbca-cmp-tcp
    method: GET
- name: ejbca-common
  endpoint:
    path: /modules/ejbca-common
    method: GET
- name: ejbca-rest-api
  endpoint:
    path: /modules/ejbca-rest-api
    method: GET
- name: healthcheck-war
  endpoint:
    path: /modules/healthcheck-war
    method: GET
- name: va
  endpoint:
    path: /modules/va
    method: GET
- name: certificate_formats
  endpoint:
    path: /ejbca/certificate-formats
    method: GET
    data_selector: formats
    params: {}
- name: crl_distribution
  endpoint:
    path: /ejbca/crl-distribution
    method: GET
    data_selector: crl
    params: {}
- name: certificate_enrollment
  endpoint:
    path: /ejbca/certificate-enrollment
    method: GET
    data_selector: enrollment
    params: {}
- name: install.properties
  endpoint:
    path: /conf/install.properties
    method: GET
    data_selector: properties
    params: {}
- name: cesecore.properties
  endpoint:
    path: /conf/cesecore.properties
    method: GET
    data_selector: properties
    params: {}
- name: ejbca.properties
  endpoint:
    path: /conf/ejbca.properties
    method: GET
    data_selector: properties
    params: {}
- name: web.properties
  endpoint:
    path: /conf/web.properties
    method: GET
    data_selector: properties
    params: {}
- name: database.properties
  endpoint:
    path: /conf/database.properties
    method: GET
    data_selector: properties
    params: {}
- name: databaseprotection.properties
  endpoint:
    path: /conf/databaseprotection.properties
    method: GET
    data_selector: properties
    params: {}
- name: databaseprotection
  endpoint:
    path: conf/databaseprotection.properties
    method: GET
    data_selector: properties
    params: {}
- name: WildFly 32
  endpoint:
    path: ../../ejbca/9.0/wildfly-32
    method: GET
- name: JBoss EAP 8.0
  endpoint:
    path: ../../ejbca/9.0/jboss-eap-8-0
    method: GET
- name: wildfly
  endpoint:
    path: /install
    method: GET
    data_selector: wildfly-installation
    params: {}
- name: datasource
  endpoint:
    path: /datasource/add
    method: POST
    data_selector: datasource-setup
    params: {}
- name: ejbcads
  endpoint:
    path: /subsystem=datasources/data-source=ejbcads
    method: add
    data_selector: {}
    params:
      connection-url: jdbc:postgresql://127.0.0.1/ejbca
      jndi-name: java:/EjbcaDS
      driver-name: postgresql.jar
      user-name: ejbca
      credential-reference: '{store=defaultCS, alias=dbPassword}'
      min-pool-size: 5
      max-pool-size: 150
      transaction-isolation: TRANSACTION_READ_COMMITTED
      check-valid-connection-sql: select 1;
- name: datasource
  endpoint:
    path: /subsystem=datasources/data-source=ejbcads
    method: ADD
    data_selector: records
- name: datasource
  endpoint:
    path: /subsystem=datasources/data-source=ejbcads
    method: ADD
    data_selector: datasources
    params:
      connection-url: jdbc:mysql://127.0.0.1:3306/ejbca?permitMysqlScheme
      jndi-name: java:/EjbcaDS
      user-name: ejbca
      driver-name: mariadb-java-client.jar
- name: datasource
  endpoint:
    path: /subsystem=datasources/data-source=ejbcads
    method: ADD
    data_selector: datasource
    params:
      connection-url: jdbc:mysql://127.0.0.1:3306/ejbca?permitMysqlScheme
      jndi-name: java:/EjbcaDS
      user-name: ejbca
- name: remoting
  endpoint:
    path: /subsystem=remoting/http-connector=http-remoting-connector:write-attribute(name=connector-ref,value=remoting)
    method: CONNECT
    data_selector: ''
    params: {}
- name: logging
  endpoint:
    path: /subsystem=logging/logger=org.ejbca:add(level=INFO)
    method: CONNECT
    data_selector: ''
    params: {}
- name: access-log
  endpoint:
    path: /subsystem=undertow/server=default-server/host=default-host/setting=access-log:add(pattern="%h
      %t \"%r\" %s \"%{i,User-Agent}\"", relative-to=jboss.server.log.dir, directory=access-logs)
    method: CONNECT
    data_selector: ''
    params: {}
- name: datasource
  endpoint:
    path: /subsystem=datasources/data-source=ejbcads
    method: ADD
    data_selector: datasource
    params:
      connection-url: jdbc:mysql://127.0.0.1:3306/ejbca?permitMysqlScheme
      jndi-name: java:/EjbcaDS
      user-name: ejbca
- name: remoting_configuration
  endpoint:
    path: /subsystem=remoting/http-connector=http-remoting-connector:write-attribute(name=connector-ref,value=remoting)
    method: CONNECT
- name: http_listener
  endpoint:
    path: /subsystem=undertow/server=default-server/http-listener=default:remove()
    method: CONNECT
- name: https_listener
  endpoint:
    path: /subsystem=undertow/server=default-server/https-listener=https:remove()
    method: CONNECT
- name: firewall_configuration
  endpoint:
    path: systemctl enable firewalld --now
    method: CONNECT
- name: WildFly
  endpoint:
    path: /ejbca/9.0/application-servers
    method: GET
    data_selector: records
- name: wildfly
  endpoint:
    path: /opt/wildfly/bin/standalone.conf
    method: GET
    data_selector: config
    params: {}
- name: remove_subsystems
  endpoint:
    path: /subsystem=jdr:remove()
    method: CONNECT
    data_selector: ''
    params: {}
- name: ajp_listener
  endpoint:
    path: /subsystem=undertow/server=default-server/ajp-listener=ajp-listener:add(socket-binding=ajp,
      scheme=https, enabled=true)
    method: CONNECT
    data_selector: ''
    params: {}
- name: request_limiter
  endpoint:
    path: /subsystem=undertow/configuration=filter/request-limit=ejbca-request-limiter:add(max-concurrent-requests=100,queue-size=300)
    method: CONNECT
    data_selector: ''
    params: {}
- name: ip_access_control
  endpoint:
    path: /subsystem=undertow/configuration=filter/expression-filter=local-only:add(expression="ip-access-control(acl={127.0.0.0/8
      allow})")
    method: CONNECT
    data_selector: ''
    params: {}
- name: smtp_configuration
  endpoint:
    path: /subsystem=elytron/credential-store=defaultCS:add-alias(alias=smtpPassword,
      secret-value="foo123")
    method: CONNECT
    data_selector: ''
    params: {}
- name: deployment_scanner
  endpoint:
    path: /subsystem=deployment-scanner/scanner=default:write-attribute(name=scan-interval,value=0)
    method: CONNECT
    data_selector: ''
    params: {}
- name: deployment_timeout
  endpoint:
    path: /subsystem=deployment-scanner/scanner=default:write-attribute(name=deployment-timeout,value=300)
    method: CONNECT
    data_selector: ''
    params: {}
- name: management_console
  endpoint:
    path: /core-service=management/management-interface=http-interface:write-attribute(name=console-enabled,value=false)
    method: CONNECT
    data_selector: ''
    params: {}
- name: max_upload_size
  endpoint:
    path: /subsystem=undertow/server=default-server/https-listener=httpspriv:write-attribute(name=max-post-size,value=25485760)
    method: CONNECT
    data_selector: ''
    params: {}
- name: audit_logging
  endpoint:
    path: /core-service=management/access=audit/logger=audit-log:write-attribute(name=enabled,value=true)
    method: CONNECT
    data_selector: ''
    params: {}
- name: acme_configuration
  endpoint:
    path: /subsystem=elytron/certificate-authority=AcmeCA:add(url="<ACME_DIRECTORY_URL>")
    method: CONNECT
    data_selector: ''
    params: {}
- name: EJBCA CA web
  endpoint:
    path: /ejbca/adminweb
    method: GET
- name: EJBCA RA web
  endpoint:
    path: /ejbca/ra
    method: GET
- name: EJBCA Public web pages
  endpoint:
    path: /ejbca
    method: GET
- name: Swagger UI
  endpoint:
    path: /ejbca/swagger-ui
    method: GET
- name: EJBCA documentation
  endpoint:
    path: /ejbca/doc
    method: GET
- name: EJBCA CRL distribution
  endpoint:
    path: /ejbca/publicweb/webdist/certdist
    method: GET
- name: EJBCA CA certificate distribution
  endpoint:
    path: /ejbca/publicweb/certificates/search.cgi
    method: GET
- name: EJBCA healthcheck
  endpoint:
    path: /ejbca/publicweb/healthcheck
    method: GET
- name: EJBCA web service API
  endpoint:
    path: /ejbca/ejbcaws/ejbcaws?wsdl
    method: GET
- name: Microsoft Autoenrollment
  endpoint:
    path: /ejbca/msae/CEPService
    method: GET
- name: EJBCA OCSP responder
  endpoint:
    path: /ejbca/publicweb/status/ocsp
    method: GET
- name: EJBCA SCEP
  endpoint:
    path: /ejbca/publicweb/apply/scep
    method: GET
- name: EJBCA CMP
  endpoint:
    path: /ejbca/publicweb/cmp
    method: GET
- name: EJBCA ACME
  endpoint:
    path: /ejbca/acme
    method: GET
- name: EJBCA EST
  endpoint:
    path: /.well-known/est
    method: GET
- name: EJBCA REST API
  endpoint:
    path: /ejbca/ejbca-rest-api
    method: GET
- name: Peer systems
  endpoint:
    path: /ejbca/peer/v1
    method: GET
- name: standalone
  endpoint:
    path: /opt/jboss/bin/standalone.sh
    method: GET
- name: launch
  endpoint:
    path: /opt/jboss/bin/launch.sh
    method: GET
- name: jboss_service
  endpoint:
    path: /etc/systemd/system/jboss.service
    method: GET
- name: jboss_service
  endpoint:
    path: /etc/systemd/system/jboss.service
    method: CREATE
    data_selector: configuration
- name: EJBCA CA web
  endpoint:
    path: /adminweb
    method: GET
- name: EJBCA RA web
  endpoint:
    path: /ra
    method: GET
- name: EJBCA Public web pages
  endpoint:
    path: /ejbca
    method: GET
- name: Swagger UI
  endpoint:
    path: /swagger-ui
    method: GET
- name: EJBCA documentation
  endpoint:
    path: /doc
    method: GET
- name: EJBCA CRL distribution
  endpoint:
    path: /publicweb/webdist/certdist
    method: GET
- name: EJBCA CA certificate distribution
  endpoint:
    path: /publicweb/certificates/search.cgi
    method: GET
- name: EJBCA healthcheck
  endpoint:
    path: /publicweb/healthcheck/ejbcahealth
    method: GET
- name: EJBCA web service API
  endpoint:
    path: /ejbcaws/ejbcaws
    method: GET
- name: Microsoft Autoenrollment
  endpoint:
    path: /msae/CEPService
    method: GET
- name: EJBCA OCSP responder
  endpoint:
    path: /publicweb/status/ocsp
    method: GET
- name: EJBCA SCEP
  endpoint:
    path: /publicweb/apply/scep
    method: GET
- name: EJBCA CMP
  endpoint:
    path: /publicweb/cmp
    method: GET
- name: EJBCA ACME
  endpoint:
    path: /acme
    method: GET
- name: EJBCA EST
  endpoint:
    path: /.well-known/est
    method: GET
- name: EJBCA REST API
  endpoint:
    path: /ejbca-rest-api
    method: GET
- name: Peer systems
  endpoint:
    path: /peer/v1
    method: GET
- name: EJBCA CA web
  endpoint:
    path: /ejbca/adminweb
    method: GET
- name: EJBCA RA web
  endpoint:
    path: /ejbca/ra
    method: GET
- name: EJBCA Public web pages
  endpoint:
    path: /ejbca
    method: GET
- name: EJBCA healthcheck
  endpoint:
    path: /ejbca/publicweb/healthcheck/ejbcahealth
    method: GET
- name: EJBCA OCSP responder
  endpoint:
    path: /ejbca/publicweb/status/ocsp
    method: GET
- name: EJBCA REST API
  endpoint:
    path: /ejbca/ejbca-rest-api
    method: GET
- name: hsm_configuration
  endpoint:
    path: /subsystem=elytron/credential-store=defaultCS:add-alias(alias=hsm,secret-value=123456)
    method: CONNECT
    data_selector: ''
    params: {}
- name: url_rewriting
  endpoint:
    path: /subsystem=undertow/configuration=filter/rewrite=redirect-to-app:add(redirect=true,target="/ejbca/adminweb/")
    method: CONNECT
    data_selector: ''
    params: {}
- name: datasource
  endpoint:
    path: /subsystem=datasources/data-source=ejbcads
    method: ADD
    data_selector: datasource
    params:
      connection-url: jdbc:mysql://127.0.0.1:3306/ejbca?permitMysqlScheme
      jndi-name: java:/EjbcaDS
      driver-name: mariadb-java-client.jar
      user-name: ejbca
      credential-reference:
        store: defaultCS
        alias: dbPassword
- name: EJBCA CA web
  endpoint:
    path: /adminweb
    method: GET
- name: EJBCA RA web
  endpoint:
    path: /ra
    method: GET
- name: EJBCA Public web pages
  endpoint:
    path: /ejbca
    method: GET
- name: Swagger UI
  endpoint:
    path: /swagger-ui
    method: GET
- name: EJBCA documentation
  endpoint:
    path: /doc
    method: GET
- name: EJBCA CRL distribution
  endpoint:
    path: /publicweb/webdist/certdist
    method: GET
- name: EJBCA CA certificate distribution
  endpoint:
    path: /publicweb/certificates/search.cgi
    method: GET
- name: EJBCA healthcheck
  endpoint:
    path: /publicweb/healthcheck/ejbcahealth
    method: GET
- name: EJBCA web service API
  endpoint:
    path: /ejbcaws/ejbcaws?wsdl
    method: GET
- name: Microsoft Autoenrollment
  endpoint:
    path: /msae/CEPService
    method: GET
- name: EJBCA OCSP responder
  endpoint:
    path: /publicweb/status/ocsp
    method: GET
- name: EJBCA SCEP
  endpoint:
    path: /publicweb/apply/scep
    method: GET
- name: EJBCA CMP
  endpoint:
    path: /publicweb/cmp
    method: GET
- name: EJBCA ACME
  endpoint:
    path: /acme
    method: GET
- name: EJBCA EST
  endpoint:
    path: /.well-known/est
    method: GET
- name: EJBCA REST API
  endpoint:
    path: /ejbca-rest-api
    method: GET
- name: Peer systems
  endpoint:
    path: /peer/v1
    method: GET
- name: management_ca
  endpoint:
    path: /install/management_ca
    method: POST
    data_selector: results
- name: tls_keystores
  endpoint:
    path: /deploy/tls_keystores
    method: POST
    data_selector: results
- name: other_management_cas
  endpoint:
    path: /add/management_cas
    method: POST
    data_selector: results
- name: peer_systems
  endpoint:
    path: /peerincoming/peerpublish/readcert
    method: GET
    data_selector: synchronization_data
- name: crl_download
  endpoint:
    path: /crl/download
    method: GET
    data_selector: crl_data
- name: database_protection
  endpoint:
    path: /conf/databaseprotection.properties
    method: GET
    data_selector: rowProtection
    params: {}
- name: ejbca_user
  endpoint:
    path: /create_user
    method: CREATE
    data_selector: user_creation
    params: {}
- name: database
  endpoint:
    path: /ejbca
    method: CREATE
    data_selector: CREATE DATABASE ejbca CHARACTER SET utf8 COLLATE utf8_unicode_ci;
- name: ejbca_user
  endpoint:
    path: /ejbca_user
    method: CREATE
    data_selector: CREATE USER ejbca IDENTIFIED BY ejbca;
- name: Creating a Root CA
  endpoint:
    path: /ejbca/9.0/creating-a-root-ca
    method: GET
- name: Creating an Issuing CA Signed by an External Root
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-an-external-root
    method: GET
- name: Creating an Issuing CA Signed by a Root on Same Node
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-a-root-on-same-no
    method: GET
- name: Importing an External CA
  endpoint:
    path: /ejbca/9.0/importing-an-external-ca
    method: GET
- name: Signing an External CA
  endpoint:
    path: /ejbca/9.0/signing-an-external-ca
    method: GET
- name: CA Rekey Recommendations
  endpoint:
    path: /ejbca/9.0/ca-rekey-recommendations
    method: GET
- name: Managing C-ITS ECAs
  endpoint:
    path: /ejbca/9.0/managing-c-its-ecas
    method: GET
- name: Creating a Hybrid CA
  endpoint:
    path: /ejbca/9.0/creating-a-hybrid-ca
    method: GET
- name: pkcs10enroll
  endpoint:
    path: /ejbca/9.0/ejbca-rest-interface/pkcs10enroll
    method: POST
- name: certificateRequest
  endpoint:
    path: /ejbca/9.0/web-service-interface/certificateRequest
    method: POST
- name: editUser
  endpoint:
    path: /ejbca/9.0/web-service-interface/editUser
    method: POST
- name: EdDSA Keys and Signatures
  endpoint:
    path: /managing-cas
    method: GET
    data_selector: keys_and_signatures
- name: certificate_request
  endpoint:
    path: /v1/ssh/certificaterequest
    method: POST
    data_selector: certificate
    params: {}
- name: CA Configuration
  endpoint:
    path: /ejbca/9.0/partitioned-crls#id-(9.0)PartitionedCRLs-Configuration
    method: GET
    data_selector: settings
    params: {}
- name: Certificate Profile Configuration
  endpoint:
    path: /ejbca/9.0/certificate-profile-fields
    method: GET
    data_selector: settings
    params: {}
- name: CRL Generation
  endpoint:
    path: /ejbca/publicweb/webdist/certdist
    method: GET
    data_selector: CRL partitions
    params:
      partition: '1'
- name: Search CRL
  endpoint:
    path: /crls/search.cgi
    method: GET
    data_selector: CRL partitions
    params:
      partition: '1'
- name: AdminWeb Get CRL
  endpoint:
    path: /ejbca/adminweb/ca/getcrl/getcrl
    method: GET
    data_selector: CRL partitions
    params:
      partition: '1'
- name: crypto_token_fields
  endpoint:
    path: /api/crypto_tokens/fields
    method: GET
    data_selector: fields
    params: {}
- name: pkcs11_fields
  endpoint:
    path: /api/crypto_tokens/pkcs11_fields
    method: GET
    data_selector: fields
    params: {}
- name: azure_key_vault_fields
  endpoint:
    path: /api/crypto_tokens/azure_key_vault_fields
    method: GET
    data_selector: fields
    params: {}
- name: aws_kms_fields
  endpoint:
    path: /api/crypto_tokens/aws_kms_fields
    method: GET
    data_selector: fields
    params: {}
- name: end_entity_statuses
  endpoint:
    path: /end-entity-statuses
    method: GET
    data_selector: statuses
- name: end_entity
  endpoint:
    path: /ejbca/rest/endentity
    method: GET
    data_selector: records
    params: {}
- name: e-mail_notifications
  endpoint:
    path: /ejbca/e-mail-notifications
    method: GET
- name: End Entity Profile Fields
  endpoint:
    path: /ejbca/9.0/end-entity-profiles-fields
    method: GET
    data_selector: fields
    params: {}
- name: certificate_statuses
  endpoint:
    path: /api/certificate_statuses
    method: GET
    data_selector: statuses
- name: Creating a Root CA
  endpoint:
    path: /ejbca/9.0/creating-a-root-ca
    method: GET
- name: Creating an Issuing CA Signed by an External Root
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-an-external-root
    method: GET
- name: Creating an Issuing CA Signed by a Root on Same Node
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-a-root-on-same-no
    method: GET
- name: Importing an External CA
  endpoint:
    path: /ejbca/9.0/importing-an-external-ca
    method: GET
- name: Signing an External CA
  endpoint:
    path: /ejbca/9.0/signing-an-external-ca
    method: GET
- name: CA Rekey Recommendations
  endpoint:
    path: /ejbca/9.0/ca-rekey-recommendations
    method: GET
- name: Managing C-ITS ECAs
  endpoint:
    path: /ejbca/9.0/managing-c-its-ecas
    method: GET
- name: Creating a Hybrid CA
  endpoint:
    path: /ejbca/9.0/creating-a-hybrid-ca
    method: GET
- name: PublisherQueueData
  endpoint:
    path: /publisher/queue/data
    method: GET
    data_selector: entries
- name: AzureCrlPublisher
  endpoint:
    path: /
    method: POST
    data_selector: blobs
- name: Creating a Root CA
  endpoint:
    path: /ejbca/9.0/creating-a-root-ca
    method: GET
- name: Creating an Issuing CA Signed by an External Root
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-an-external-root
    method: GET
- name: Creating an Issuing CA Signed by a Root on Same Node
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-a-root-on-same-no
    method: GET
- name: Importing an External CA
  endpoint:
    path: /ejbca/9.0/importing-an-external-ca
    method: GET
- name: Signing an External CA
  endpoint:
    path: /ejbca/9.0/signing-an-external-ca
    method: GET
- name: CA Rekey Recommendations
  endpoint:
    path: /ejbca/9.0/ca-rekey-recommendations
    method: GET
- name: Managing C-ITS ECAs
  endpoint:
    path: /ejbca/9.0/managing-c-its-ecas
    method: GET
- name: Creating a Hybrid CA
  endpoint:
    path: /ejbca/9.0/creating-a-hybrid-ca
    method: GET
- name: Managing Certificate Profiles
  endpoint:
    path: /ejbca/9.0/managing-certificate-profiles
    method: GET
- name: GPCP
  endpoint:
    path: /AdminGUI/ManagePublishers
    method: POST
    data_selector: result
- name: Creating a Root CA
  endpoint:
    path: /ejbca/9.0/creating-a-root-ca
    method: GET
- name: Creating an Issuing CA Signed by an External Root
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-an-external-root
    method: GET
- name: Creating an Issuing CA Signed by a Root on Same Node
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-a-root-on-same-no
    method: GET
- name: Importing an External CA
  endpoint:
    path: /ejbca/9.0/importing-an-external-ca
    method: GET
- name: Signing an External CA
  endpoint:
    path: /ejbca/9.0/signing-an-external-ca
    method: GET
- name: CA Rekey Recommendations
  endpoint:
    path: /ejbca/9.0/ca-rekey-recommendations
    method: GET
- name: Managing C-ITS ECAs
  endpoint:
    path: /ejbca/9.0/managing-c-its-ecas
    method: GET
- name: Creating a Hybrid CA
  endpoint:
    path: /ejbca/9.0/creating-a-hybrid-ca
    method: GET
- name: Cert Safe REST API
  endpoint:
    path: /ejbca/9.0/cert-safe-rest-api
    method: GET
- name: certificates
  endpoint:
    path: /:account/certificates/:certificate-thumbprint/:timestamp
    method: GET
- name: account
  endpoint:
    path: /:account
    method: GET
    data_selector: data
- name: agents
  endpoint:
    path: /:account/agents
    method: GET
    data_selector: data
- name: certificates
  endpoint:
    path: /:account/certificates
    method: GET
    data_selector: data
- name: Custom Publisher
  endpoint:
    path: /org/ejbca/core/model/ca/publisher/custpubl1/CustomerLdapPublisher1
    method: POST
    data_selector: properties
    params:
      hostnames: localhost
      port: 1636
      basedn: dc=example,dc=com
      logindn: cn=Directory Manager
      loginpassword: foo123
      usessl: true
      logconnectiontests: true
      connectiontimeout: 5000
      readtimeout: 30000
      storetimeout: 60000
- name: publishers
  endpoint:
    path: /edit/publishers
    method: POST
    data_selector: publishers
    params: {}
- name: ldap_nodes
  endpoint:
    path: /ldap/nodes
    method: POST
    data_selector: nodes
    params: {}
- name: available_publishers
  endpoint:
    path: /available_publishers
    method: GET
    data_selector: publishers
    params: {}
- name: publisher_groups
  endpoint:
    path: /publisher_groups
    method: GET
    data_selector: groups
    params: {}
- name: SCP Publisher Settings
  endpoint:
    path: /services/scp/publisher/settings
    method: GET
- name: peer_system
  endpoint:
    path: /peer_system
    method: POST
    data_selector: settings
    params: {}
- name: certificate
  endpoint:
    path: /certificates
    method: POST
    data_selector: certificates
    params: {}
- name: crl
  endpoint:
    path: /crl
    method: POST
    data_selector: crls
    params: {}
- name: ocsp_response
  endpoint:
    path: /ocsp_response
    method: POST
    data_selector: ocspResponses
    params: {}
- name: certificate
  endpoint:
    path: /publish/certificate
    method: POST
    data_selector: records
    params: {}
- name: revocation_info
  endpoint:
    path: /publish/revocation
    method: POST
    data_selector: records
    params: {}
- name: RSA Key Validator
  endpoint:
    path: /key-validators/rsa
    method: GET
    data_selector: parameters
    params: {}
- name: ECC Key Validator
  endpoint:
    path: /key-validators/ecc
    method: GET
    data_selector: parameters
    params: {}
- name: Block List Key Validator
  endpoint:
    path: /key-validators/block-list
    method: GET
    data_selector: parameters
    params: {}
- name: domain_lookup
  endpoint:
    path: /lookup
    method: GET
    data_selector: records
    params: {}
- name: External Command
  endpoint:
    path: /SystemConfiguration/ExternalScripts
    method: GET
    data_selector: scripts
    params: {}
- name: certificate_profiles
  endpoint:
    path: /ejbca/9.0/certificate-profiles
    method: GET
    data_selector: profiles
    params: {}
- name: Custom Certificate Extensions
  endpoint:
    path: /system_configuration/custom_certificate_extensions
    method: GET
    data_selector: extensions
    params: {}
- name: Account Bindings
  endpoint:
    path: /external_account_bindings
    method: POST
    data_selector: bindings
    params: {}
- name: approvals
  endpoint:
    path: /approvals
    method: GET
    data_selector: approvals
    params: {}
- name: accumulative_approval_profiles
  endpoint:
    path: /ejbca/9.0/accumulative-approval-profiles
    method: GET
- name: partitioned_approval_profiles
  endpoint:
    path: /ejbca/9.0/partitioned-approval-profiles
    method: GET
- name: approval_profiles
  endpoint:
    path: /ejbca/9.0/approval-profiles
    method: GET
- name: partitioned_approval_profiles
  endpoint:
    path: /ejbca/9.0/partitioned-approval-profiles
    method: GET
- name: Certificate and CRL Reader Service
  endpoint:
    path: /ejbca/9.0/certificate-and-crl-reader-service
    method: GET
- name: Certificate Expiration Check Service
  endpoint:
    path: /ejbca/9.0/certificate-expiration-check-service
    method: GET
- name: CRL Download and CRL Update Service
  endpoint:
    path: /ejbca/9.0/crl-download-and-crl-update-service
    method: GET
- name: CRL Updater Service
  endpoint:
    path: /ejbca/9.0/crl-updater-service
    method: GET
- name: Database Maintenance Service
  endpoint:
    path: /ejbca/9.0/database-maintenance-service
    method: GET
- name: HSM Keepalive Service
  endpoint:
    path: /ejbca/9.0/hsm-keepalive-service
    method: GET
- name: Microsoft Intune Certificate Revocation
  endpoint:
    path: /ejbca/9.0/microsoft-intune-certificate-revocation
    method: GET
- name: OAuth Key Update Worker
  endpoint:
    path: /ejbca/9.0/oauth-key-update-worker
    method: GET
- name: OCSP Response Pre-Signer
  endpoint:
    path: /ejbca/9.0/ocsp-response-pre-signer
    method: GET
- name: Publisher Queue Process Service
  endpoint:
    path: /ejbca/9.0/publisher-queue-process-service
    method: GET
- name: Remote Internal Key Binding Updater
  endpoint:
    path: /ejbca/9.0/remote-internal-key-binding-updater
    method: GET
- name: Renew CA Service
  endpoint:
    path: /ejbca/9.0/renew-ca-service
    method: GET
- name: Rollover Service
  endpoint:
    path: /ejbca/9.0/rollover-service
    method: GET
- name: User Password Expire Service
  endpoint:
    path: /ejbca/9.0/user-password-expire-service
    method: GET
- name: certificate_and_crl_reader_service
  endpoint:
    path: /ejbca/9.0/certificate-and-crl-reader-service
    method: GET
- name: certificate_expiration_check_service
  endpoint:
    path: /ejbca/9.0/certificate-expiration-check-service
    method: GET
- name: crl_download_and_update_service
  endpoint:
    path: /ejbca/9.0/crl-download-and-crl-update-service
    method: GET
- name: crl_updater_service
  endpoint:
    path: /ejbca/9.0/crl-updater-service
    method: GET
- name: database_maintenance_service
  endpoint:
    path: /ejbca/9.0/database-maintenance-service
    method: GET
- name: hsm_keepalive_service
  endpoint:
    path: /ejbca/9.0/hsm-keepalive-service
    method: GET
- name: microsoft_intune_certificate_revocation
  endpoint:
    path: /ejbca/9.0/microsoft-intune-certificate-revocation
    method: GET
- name: oauth_key_update_worker
  endpoint:
    path: /ejbca/9.0/oauth-key-update-worker
    method: GET
- name: ocsp_response_pre_signer
  endpoint:
    path: /ejbca/9.0/ocsp-response-pre-signer
    method: GET
- name: publisher_queue_process_service
  endpoint:
    path: /ejbca/9.0/publisher-queue-process-service
    method: GET
- name: remote_internal_key_binding_updater
  endpoint:
    path: /ejbca/9.0/remote-internal-key-binding-updater
    method: GET
- name: renew_ca_service
  endpoint:
    path: /ejbca/9.0/renew-ca-service
    method: GET
- name: rollover_service
  endpoint:
    path: /ejbca/9.0/rollover-service
    method: GET
- name: user_password_expire_service
  endpoint:
    path: /ejbca/9.0/user-password-expire-service
    method: GET
- name: CAs to Check
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
    params: {}
- name: Ignore nextUpdate and always download the CRL
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
    params: {}
- name: Maximum allowed size to download (bytes)
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
    params: {}
- name: Period
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
    params: {}
- name: Active
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
    params: {}
- name: Creating a Root CA
  endpoint:
    path: /ejbca/9.0/creating-a-root-ca
    method: GET
- name: Creating an Issuing CA Signed by an External Root
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-an-external-root
    method: GET
- name: Creating an Issuing CA Signed by a Root on Same Node
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-a-root-on-same-no
    method: GET
- name: Importing an External CA
  endpoint:
    path: /ejbca/9.0/importing-an-external-ca
    method: GET
- name: Signing an External CA
  endpoint:
    path: /ejbca/9.0/signing-an-external-ca
    method: GET
- name: CA Rekey Recommendations
  endpoint:
    path: /ejbca/9.0/ca-rekey-recommendations
    method: GET
- name: Managing C-ITS ECAs
  endpoint:
    path: /ejbca/9.0/managing-c-its-ecas
    method: GET
- name: Creating a Hybrid CA
  endpoint:
    path: /ejbca/9.0/creating-a-hybrid-ca
    method: GET
- name: Managing Certificate Profiles
  endpoint:
    path: /ejbca/9.0/managing-certificate-profiles
    method: GET
- name: CAs to Check
  endpoint:
    path: /services/database_maintenance/
    method: POST
    data_selector: CAs
    params: {}
- name: microsoft_intune_certificate_revocation
  endpoint:
    path: /ejbca/9.0/microsoft-intune-certificate-revocation
    method: GET
- name: revocation_requests
  endpoint:
    path: /revocationRequests
    method: POST
- name: publisher_queue_process
  endpoint:
    path: /ejbca/9.0/publisher-queue-process-service
    method: GET
- name: publishers
  endpoint:
    path: /publishers
    method: GET
- name: user_password_expire
  endpoint:
    path: /ejbca/9.0/user-password-expire-service
    method: GET
- name: OCSP Responders
  endpoint:
    path: /ocsp/responders
    method: GET
    data_selector: responders
    params: {}
- name: OCSPTRANSACTION
  endpoint:
    path: /path/to/OCSPTRANSACTION
    method: POST
    data_selector: transactions
    params: {}
- name: OCSPAUDIT
  endpoint:
    path: /path/to/OCSPAUDIT
    method: POST
    data_selector: audit
    params: {}
- name: Roles and Access Rules
  endpoint:
    path: /roles-access-rules
    method: GET
- name: Access Rules
  endpoint:
    path: /ejbca/accessrules
    method: GET
    data_selector: rules
- name: Role Based Access Rules
  endpoint:
    path: /ejbca/accessrules/role
    method: GET
    data_selector: rules
- name: Regular Access Rules
  endpoint:
    path: /ejbca/accessrules/regular
    method: GET
    data_selector: rules
- name: CA Access Rules
  endpoint:
    path: /ejbca/accessrules/ca
    method: GET
    data_selector: rules
- name: Validator Access Rules
  endpoint:
    path: /ejbca/accessrules/validator
    method: GET
    data_selector: rules
- name: End Entity Profile Access Rules
  endpoint:
    path: /ejbca/accessrules/endentityprofile
    method: GET
    data_selector: rules
- name: Crypto Token Access Rules
  endpoint:
    path: /ejbca/accessrules/cryptotoken
    method: GET
    data_selector: rules
- name: User Data Source Access Rules
  endpoint:
    path: /ejbca/accessrules/userdatasource
    method: GET
    data_selector: rules
- name: Internal Keybinding Rules
  endpoint:
    path: /ejbca/accessrules/internalkeybinding
    method: GET
    data_selector: rules
- name: Peer Management Rules
  endpoint:
    path: /ejbca/accessrules/peer
    method: GET
    data_selector: rules
- name: Peer RA Protocol Rules
  endpoint:
    path: /ejbca/accessrules/peerra/protocol
    method: GET
    data_selector: rules
- name: Audit Log Rules
  endpoint:
    path: /ejbca/accessrules/auditlog
    method: GET
    data_selector: rules
- name: Peer RA Rules
  endpoint:
    path: /ejbca/accessrules/peera
    method: GET
    data_selector: rules
- name: Peer Publisher Rules
  endpoint:
    path: /ejbca/accessrules/peerpublish
    method: GET
    data_selector: rules
- name: newAccount
  endpoint:
    path: /newAccount
    method: POST
    data_selector: ''
    params: {}
- name: newOrder
  endpoint:
    path: /newOrder
    method: POST
    data_selector: ''
    params: {}
- name: newAuthz
  endpoint:
    path: /newAuthz
    method: POST
    data_selector: ''
    params: {}
- name: challenge
  endpoint:
    path: /acct/{accountId}/chall/{challengeId}
    method: POST
    data_selector: ''
    params: {}
- name: directory
  endpoint:
    path: /ejbca/acme/directory
    method: GET
- name: newNonce
  endpoint:
    path: /ejbca/acme/newNonce
    method: GET
- name: newAccount
  endpoint:
    path: /ejbca/acme/newAccount
    method: POST
- name: updateAccount
  endpoint:
    path: /ejbca/acme/acct/{accountId}
    method: POST
- name: newOrder
  endpoint:
    path: /ejbca/acme/newOrder
    method: POST
- name: challenge
  endpoint:
    path: /ejbca/acme/acct/{accountId}/chall/{challengeId}
    method: POST
- name: newAuthz
  endpoint:
    path: /ejbca/acme/newAuthz
    method: POST
- name: finalizeOrder
  endpoint:
    path: /ejbca/acme/acct/{accountId}/orders/{orderId}/finalize
    method: POST
- name: revokeCert
  endpoint:
    path: /ejbca/acme/revokeCert
    method: POST
- name: keyChange
  endpoint:
    path: /ejbca/acme/keyChange
    method: POST
- name: cert
  endpoint:
    path: /ejbca/acme/cert/{certificateId}
    method: GET
- name: finalizeOrder
  endpoint:
    path: /acct/{accountId}/orders/{orderId}/finalize
    method: POST
- name: certificate_enrollment
  endpoint:
    path: /certbot/certonly
    method: POST
    data_selector: order
    params:
      challenge_type: http-01
- name: account_registration
  endpoint:
    path: /certbot/register
    method: POST
    data_selector: account
    params: {}
- name: crls
  endpoint:
    path: /crls/search.cgi
    method: GET
    params:
      delta: ''
- name: certificates
  endpoint:
    path: /certificates/search.cgi
    method: GET
    params: {}
- name: revoke_certificate
  endpoint:
    path: /cmpalias/revoke
    method: POST
    data_selector: response
    params:
      issuer: CN=ManagementCA,O=EJBCA Sample,C=SE
      serno: 17b9a7b8ce44b3fa
- name: create_certificate
  endpoint:
    path: /cmpalias/p10cr
    method: POST
    data_selector: response
    params:
      dn: CN=yourCN
      csr: your-request.csr
- name: error_messages
  endpoint:
    path: /ejbca/9.0/cmp-error-messages
    method: GET
- name: cacerts
  endpoint:
    path: /cacerts
    method: GET
- name: simpleenroll
  endpoint:
    path: /simpleenroll
    method: POST
- name: simplereenroll
  endpoint:
    path: /simplereenroll
    method: POST
- name: serverkeygen
  endpoint:
    path: /serverkeygen
    method: POST
- name: est
  endpoint:
    path: /.well-known/est/est/simpleenroll
    method: POST
    data_selector: certs
    params: {}
- name: serverkeygen
  endpoint:
    path: /.well-known/est/est/serverkeygen
    method: POST
    data_selector: keypair
    params: {}
- name: cacerts
  endpoint:
    path: /.well-known/est/est/cacerts
    method: GET
- name: simpleenroll
  endpoint:
    path: /.well-known/est/est/simpleenroll
    method: POST
- name: simplereenroll
  endpoint:
    path: /.well-known/est/est/simplereenroll
    method: POST
- name: serverkeygen
  endpoint:
    path: /.well-known/est/est/serverkeygen
    method: POST
- name: cacerts
  endpoint:
    path: /.well-known/est/estvendor/cacerts
    method: GET
- name: serverkeygen
  endpoint:
    path: /.well-known/est/est/serverkeygen
    method: POST
- name: est
  endpoint:
    path: /.well-known/est/est/simpleenroll
    method: POST
    data_selector: certificate
- name: serverkeygen
  endpoint:
    path: /.well-known/est/est/serverkeygen
    method: POST
    data_selector: keypair
- name: estvendor_cacerts
  endpoint:
    path: /.well-known/est/estvendor/cacerts
    method: GET
- name: estvendor_simpleenroll
  endpoint:
    path: /.well-known/est/estvendor/simpleenroll
    method: POST
- name: estvendor_simplereenroll
  endpoint:
    path: /.well-known/est/estvendor/simplereenroll
    method: POST
- name: enrollment
  endpoint:
    path: /.well-known/est/simpleenroll
    method: POST
    data_selector: device-p7.b64
- name: reenrollment
  endpoint:
    path: /.well-known/est/simplereenroll
    method: POST
    data_selector: device-new-p7.b64
- name: serverkeygen
  endpoint:
    path: /.well-known/est/est/serverkeygen
    method: POST
    data_selector: response
    params: {}
- name: enroll
  endpoint:
    path: /.well-known/est/estnew
    method: POST
    data_selector: response
    params: {}
- name: enroll_vendor_birth_certificate
  endpoint:
    path: .well-known/est/{est_alias}/sen
    method: POST
- name: reenroll_certificate
  endpoint:
    path: .well-known/est/{est_alias}/sren
    method: POST
- name: get_ca_certificate_chain
  endpoint:
    path: /crts
    method: GET
- name: server_side_key_generation
  endpoint:
    path: /skg
    method: POST
- name: OCSP_Request
  endpoint:
    path: /ejbca/publicweb/status/ocsp
    method: GET
- name: Unid Lookup
  endpoint:
    path: /unid/lookup
    method: GET
    data_selector: Fnr
- name: SCEP
  endpoint:
    path: /ejbca/publicweb/apply/scep/ALIAS/pkiclient.exe
    method: POST
    data_selector: response
    params: {}
- name: CA
  endpoint:
    path: /ejbca/publicweb/apply/scep/pkiclient.exe
    method: GET
    data_selector: records
    params: {}
- name: SCEP RA
  endpoint:
    path: /scepraserver/scep/pkiclient.exe
    method: GET
    data_selector: records
    params: {}
- name: administrator
  endpoint:
    path: /administrator
    method: GET
- name: ra_functionality_create_end_entity
  endpoint:
    path: /ra_functionality/create_end_entity
    method: GET
- name: ra_functionality_edit_end_entity
  endpoint:
    path: /ra_functionality/edit_end_entity
    method: GET
- name: ra_functionality_view_end_entity
  endpoint:
    path: /ra_functionality/view_end_entity
    method: GET
- name: ca_functionality_create_certificate
  endpoint:
    path: /ca_functionality/create_certificate
    method: GET
- name: secureaudit_log_custom_events
  endpoint:
    path: /secureaudit/log_custom_events
    method: GET
- name: userdatasourcesrules_fetch_userdata
  endpoint:
    path: /userdatasourcesrules/'user data source'/fetch_userdata
    method: GET
- name: certificateRequest
  endpoint:
    path: /ejbca/ejbcaws/certificateRequest
    method: POST
- name: checkRevokationStatus
  endpoint:
    path: /ejbca/ejbcaws/checkRevokationStatus
    method: POST
- name: crmfRequest
  endpoint:
    path: /ejbca/ejbcaws/crmfRequest
    method: POST
- name: customLog
  endpoint:
    path: /ejbca/ejbcaws/customLog
    method: POST
- name: cvcRequest
  endpoint:
    path: /ejbca/ejbcaws/cvcRequest
    method: POST
- name: editUser
  endpoint:
    path: /ejbca/ejbcaws/editUser
    method: POST
- name: findCerts
  endpoint:
    path: /ejbca/ejbcaws/findCerts
    method: POST
- name: findUser
  endpoint:
    path: /ejbca/ejbcaws/findUser
    method: POST
- name: getAvailableCAs
  endpoint:
    path: /ejbca/ejbcaws/getAvailableCAs
    method: POST
- name: getAvailableCAsInProfile
  endpoint:
    path: /ejbca/ejbcaws/getAvailableCAsInProfile
    method: POST
- name: getAvailableCertificateProfiles
  endpoint:
    path: /ejbca/ejbcaws/getAvailableCertificateProfiles
    method: POST
- name: getCertificate
  endpoint:
    path: /ejbca/ejbcaws/getCertificate
    method: POST
- name: getCertificatesByExpirationTime
  endpoint:
    path: /ejbca/ejbcaws/getCertificatesByExpirationTime
    method: POST
- name: getCertificatesByExpirationTimeAndIssuer
  endpoint:
    path: /ejbca/ejbcaws/getCertificatesByExpirationTimeAndIssuer
    method: POST
- name: getCertificatesByExpirationTimeAndType
  endpoint:
    path: /ejbca/ejbcaws/getCertificatesByExpirationTimeAndType
    method: POST
- name: getLastCAChain
  endpoint:
    path: /ejbca/ejbcaws/getLastCAChain
    method: POST
- name: getLastCertChain
  endpoint:
    path: /ejbca/ejbcaws/getLastCertChain
    method: POST
- name: getLatestCRL
  endpoint:
    path: /ejbca/ejbcaws/getLatestCRL
    method: POST
- name: getProfile
  endpoint:
    path: /ejbca/ejbcaws/getProfile
    method: POST
- name: getPublisherQueueLength
  endpoint:
    path: /ejbca/ejbcaws/getPublisherQueueLength
    method: POST
- name: getRemainingNumberOfApprovals
  endpoint:
    path: /ejbca/ejbcaws/getRemainingNumberOfApprovals
    method: POST
- name: isApproved
  endpoint:
    path: /ejbca/ejbcaws/isApproved
    method: POST
- name: isAuthorized
  endpoint:
    path: /ejbca/ejbcaws/isAuthorized
    method: POST
- name: keyRecover
  endpoint:
    path: /ejbca/ejbcaws/keyRecover
    method: POST
- name: pkcs10Request
  endpoint:
    path: /ejbca/ejbcaws/pkcs10Request
    method: POST
- name: pkcs12Req
  endpoint:
    path: /ejbca/ejbcaws/pkcs12Req
    method: POST
- name: republishCertificate
  endpoint:
    path: /ejbca/ejbcaws/republishCertificate
    method: POST
- name: revokeCert
  endpoint:
    path: /ejbca/ejbcaws/revokeCert
    method: POST
- name: revokeCertBackdated
  endpoint:
    path: /ejbca/ejbcaws/revokeCertBackdated
    method: POST
- name: revokeCertWithMetadata
  endpoint:
    path: /ejbca/ejbcaws/revokeCertWithMetadata
    method: POST
- name: revokeUser
  endpoint:
    path: /ejbca/ejbcaws/revokeUser
    method: POST
- name: AuditRecordData
  endpoint:
    path: /services/data/vXX.X/sobjects/AuditRecordData
    method: GET
    data_selector: records
    params: {}
- name: security_audit_events
  endpoint:
    path: /api/security_audit_events
    method: GET
    data_selector: events
- name: custom_user_data_source
  endpoint:
    path: /org/ejbca/core/model/ra/userdatasource/ICustomUserDataSource
    method: GET
    data_selector: userdata
    params: {}
- name: Creating a Root CA
  endpoint:
    path: /ejbca/9.0/creating-a-root-ca
    method: GET
- name: Creating an Issuing CA Signed by an External Root
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-an-external-root
    method: GET
- name: Creating an Issuing CA Signed by a Root on Same Node
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-a-root-on-same-no
    method: GET
- name: Importing an External CA
  endpoint:
    path: /ejbca/9.0/importing-an-external-ca
    method: GET
- name: Signing an External CA
  endpoint:
    path: /ejbca/9.0/signing-an-external-ca
    method: GET
- name: CA Rekey Recommendations
  endpoint:
    path: /ejbca/9.0/ca-rekey-recommendations
    method: GET
- name: Managing C-ITS ECAs
  endpoint:
    path: /ejbca/9.0/managing-c-its-ecas
    method: GET
- name: Creating a Hybrid CA
  endpoint:
    path: /ejbca/9.0/creating-a-hybrid-ca
    method: GET
- name: managing_cas
  endpoint:
    path: /ejbca/9.0/managing-cas
    method: GET
- name: managing_cvc_cas
  endpoint:
    path: /ejbca/9.0/managing-cvc-cas
    method: GET
- name: managing_crypto_tokens
  endpoint:
    path: /ejbca/9.0/managing-crypto-tokens
    method: GET
- name: managing_certificate_profiles
  endpoint:
    path: /ejbca/9.0/managing-certificate-profiles
    method: GET
- name: end_entity_profile_operations
  endpoint:
    path: /ejbca/9.0/end-entity-profile-operations
    method: GET
- name: ocsp_responder_management
  endpoint:
    path: /ejbca/9.0/ocsp-responder-management
    method: GET
- name: roles_and_access_rules_operations
  endpoint:
    path: /ejbca/9.0/roles-and-access-rules-operations
    method: GET
- name: approval_requests
  endpoint:
    path: /approvals
    method: GET
    data_selector: requests
- name: CertificateData
  endpoint:
    path: /database/CertificateData
    method: GET
    data_selector: records
    params: {}
- name: CRLData
  endpoint:
    path: /database/CRLData
    method: GET
    data_selector: records
    params: {}
- name: Monitoring and Healthcheck
  endpoint:
    path: /ejbca/9.0/monitoring-and-healthcheck
    method: GET
    data_selector: records
    params: {}
- name: healthcheck
  endpoint:
    path: /ejbca/publicweb/healthcheck/ejbcahealth
    method: GET
    data_selector: response
    params: {}
- name: VA Status
  endpoint:
    path: /healthcheck/vastatus
    method: GET
    data_selector: outOfSync
    params: {}
- name: end_entities
  endpoint:
    path: /ejbca/9.0/end-entities
    method: GET
- name: create_user
  endpoint:
    path: /ra/addendentity
    method: POST
    data_selector: user
    params: {}
- name: SSLServerEndEntityProfile
  endpoint:
    path: /make-new-request
    method: POST
    data_selector: certificate_request
    params:
      certificate_subtype: SSLServerCertificateProfile
      CA: ManagementCA
      key_pair_generation: By the CA
      key_algorithm: RSA 2048 bits
      common_name: testsrv.domain.com
      dns_name: testsrv.domain.com.
      username: testsrv.domain.com
      enrollment_code: password
- name: create_user_certificates
  endpoint:
    path: /ejbca/9.0/create-user-certificates
    method: POST
- name: Request Browser Certificate Renewal
  endpoint:
    path: /ejbca/9.0/request-browser-certificate-renewal
    method: GET
- name: enroll_device
  endpoint:
    path: /ejbca/publicweb/cmp/cmp
    method: POST
    data_selector: none
    params: {}
- name: revoke_certificate
  endpoint:
    path: /ejbca/publicweb/cmp/opensslra
    method: POST
    data_selector: none
    params: {}
- name: enroll_client
  endpoint:
    path: /ejbca/publicweb/cmp/opensslclient
    method: POST
    data_selector: none
    params: {}
- name: eNodeB Enrollment
  endpoint:
    path: /ejbca/publicweb/cmp/5GeNodeB
    method: GET
    data_selector: records
    params: {}
- name: enrollment
  endpoint:
    path: /ejbca/publicweb/cmp/5GeNodeB
    method: POST
    data_selector: received certificate(s)
- name: renewal
  endpoint:
    path: /ejbca/publicweb/cmp/5GeNodeB
    method: POST
    data_selector: received certificate(s)
- name: PKIMessage
  endpoint:
    path: /pkiMessage
    method: POST
    data_selector: certificates
    params: {}
- name: scep
  endpoint:
    path: /pkiclient.exe
    method: GET
    data_selector: response
    params: {}
- name: PKCSREQ
  endpoint:
    path: /generateCertReq
    method: POST
- name: GetCRL
  endpoint:
    path: /generateCrlReq
    method: POST
- name: GetCertInitial
  endpoint:
    path: /generateGetCertInitial
    method: POST
- name: Autoenrollment Configuration
  endpoint:
    path: /system/configuration/autoenrollment
    method: GET
    data_selector: aliases
    params: {}
- name: AD Connection
  endpoint:
    path: /system/configuration/ad-connection
    method: GET
    data_selector: adSettings
    params: {}
- name: service_account
  endpoint:
    path: /ActiveDirectory/ServiceAccounts
    method: POST
    data_selector: accounts
    params: {}
- name: dns_service
  endpoint:
    path: /DNS/Hosts
    method: POST
    data_selector: hosts
    params: {}
- name: certificate_services_tool
  endpoint:
    path: /Certificates/Services
    method: POST
    data_selector: services
    params: {}
- name: Root CA
  endpoint:
    path: /services/data/vXX.X/sobjects/RootCA
    method: POST
    data_selector: records
    params: {}
- name: Intermediate CA
  endpoint:
    path: /services/data/vXX.X/sobjects/IntermediateCA
    method: POST
    data_selector: records
    params: {}
- name: Issuing CA
  endpoint:
    path: /services/data/vXX.X/sobjects/IssuingCA
    method: POST
    data_selector: records
    params: {}
- name: User Certificate Profile
  endpoint:
    path: /services/data/vXX.X/sobjects/UserCertificateProfile
    method: POST
    data_selector: records
    params: {}
- name: Computer Certificate Profile
  endpoint:
    path: /services/data/vXX.X/sobjects/ComputerCertificateProfile
    method: POST
    data_selector: records
    params: {}
- name: Autoenrollment Configuration
  endpoint:
    path: /autoenrollment/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: Certificate Templates
  endpoint:
    path: /certificate/templates
    method: GET
    data_selector: templates
    params: {}
- name: System Configuration
  endpoint:
    path: /system/configuration
    method: PATCH
    data_selector: system
    params: {}
- name: Microsoft Auto-enrollment Troubleshooting
  endpoint:
    path: /ejbca/9.0/microsoft-auto-enrollment-troubleshooting
    method: GET
- name: Active Directory Connection Test
  endpoint:
    path: /edit-autoenrollment-alias
    method: POST
    data_selector: connection_test
    params: {}
- name: Certificate Enrollment Policy Server
  endpoint:
    path: /add-policy-server
    method: POST
    data_selector: server_response
    params: {}
- name: ACME
  endpoint:
    path: /ejbca/acme
    method: GET
- name: Certstore
  endpoint:
    path: /certificates
    method: GET
- name: CMP
  endpoint:
    path: /ejbca/publicweb/cmp
    method: GET
- name: CRLstore
  endpoint:
    path: /crls
    method: GET
- name: EST
  endpoint:
    path: /.well-known/est
    method: GET
- name: OCSP
  endpoint:
    path: /ejbca/publicweb/status/ocsp
    method: GET
- name: REST
  endpoint:
    path: /ejbca/ejbca-rest-api
    method: GET
- name: SCEP
  endpoint:
    path: /ejbca/publicweb/apply/scep
    method: GET
- name: Webdist
  endpoint:
    path: /ejbca/publicweb/webdist
    method: GET
- name: Web Service
  endpoint:
    path: /ejbca/ejbcaws
    method: GET
- name: import_single_certificate
  endpoint:
    path: /ca/importcert
    method: POST
    data_selector: parameters
    params:
      username: string
      password: string
      caname: string
      status: ACTIVE/REVOKED
      email: string
      certificate_file: path/to/certificate.pem
      endentityprofile: string
      certificateprofile: string
      revocation_reason: string
      revocation_time: string
- name: import_bulk_certificates
  endpoint:
    path: /ca/importcertdir
    method: POST
    data_selector: parameters
    params:
      username-source: CN/DN/FILE
      caname: string
      status: ACTIVE/REVOKED
      certificate_dir: path/to/certificate/directory
      endentityprofile: string
      certificateprofile: string
      resumeonerror: boolean
      revocation_reason: string
      revocation_time: string
- name: key_recovery
  endpoint:
    path: /ejbca/9.0/key-recovery
    method: GET
- name: create_ca
  endpoint:
    path: /createCA
    method: POST
    data_selector: response
    params: {}
- name: renew_ca
  endpoint:
    path: /renewCA
    method: POST
    data_selector: response
    params: {}
- name: revoke_ca
  endpoint:
    path: /revokeCA
    method: POST
    data_selector: response
    params: {}
- name: Create Root CA
  endpoint:
    path: /ca/init
    method: POST
    data_selector: root_ca_creation
    params:
      DN: C=SE,O=PrimeKey,CN=TestRoot
      key_length: '2048'
      algorithm: RSA
      validity: '365'
- name: Create Issuing CA
  endpoint:
    path: /ejbca/ca/create
    method: POST
    data_selector: result
    params: {}
- name: Sign CA Key Pair
  endpoint:
    path: /ejbca/ca/sign
    method: POST
    data_selector: result
    params: {}
- name: Read Certificate Response
  endpoint:
    path: /ejbca/ca/read
    method: GET
    data_selector: result
    params: {}
- name: Enrollment
  endpoint:
    path: /its/etsi/v1/certificate/{ecaCertificateId}/enroll
    method: POST
- name: Authorization Validation
  endpoint:
    path: /its/etsi/v1/certificate/{ecaCertificateId}/validate
    method: POST
- name: Crypto Token
  endpoint:
    path: /ManageCryptoTokens
    method: POST
    data_selector: token
    params: {}
- name: Certificate Authorities
  endpoint:
    path: /ManageCertificateAuthorities
    method: POST
    data_selector: certificate_authority
    params: {}
- name: SSLServerCertificateProfile
  endpoint:
    path: /manage/certificate/profiles
    method: POST
    data_selector: profiles
    params: {}
- name: CT Logs
  endpoint:
    path: /ct/v1/add-pre-chain
    method: POST
    data_selector: success
    params: {}
- name: Key Authorization Key (KAK)
  endpoint:
    path: /create_crypto_token
    method: POST
    data_selector: KAK
    params: {}
- name: Crypto Token Management
  endpoint:
    path: /manage_crypto_tokens
    method: POST
    data_selector: crypto_token
    params: {}
- name: remote_authenticator
  endpoint:
    path: /remote/authentication
    method: POST
    data_selector: authenticators
    params: {}
- name: oauth_provider
  endpoint:
    path: /config/oauth
    method: POST
    data_selector: providers
    params: {}
- name: userinfo
  endpoint:
    path: /realms/myrealm/protocol/openid-connect/userinfo
    method: GET
- name: OCSP Responder
  endpoint:
    path: /services/data/v9.0/ocsp/responder
    method: GET
    data_selector: records
- name: Peer Systems Management
  endpoint:
    path: /peer-systems
    method: GET
    data_selector: peerSystems
    params: {}
- name: Creating a Root CA
  endpoint:
    path: /ejbca/9.0/creating-a-root-ca
    method: GET
- name: Creating an Issuing CA Signed by an External Root
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-an-external-root
    method: GET
- name: Creating an Issuing CA Signed by a Root on Same Node
  endpoint:
    path: /ejbca/9.0/creating-an-issuing-ca-signed-by-a-root-on-same-no
    method: GET
- name: Importing an External CA
  endpoint:
    path: /ejbca/9.0/importing-an-external-ca
    method: GET
- name: Signing an External CA
  endpoint:
    path: /ejbca/9.0/signing-an-external-ca
    method: GET
- name: CA Rekey Recommendations
  endpoint:
    path: /ejbca/9.0/ca-rekey-recommendations
    method: GET
- name: Managing C-ITS ECAs
  endpoint:
    path: /ejbca/9.0/managing-c-its-ecas
    method: GET
- name: Creating a Hybrid CA
  endpoint:
    path: /ejbca/9.0/creating-a-hybrid-ca
    method: GET
- name: import_cvc_ca
  endpoint:
    path: /ca/importcvca
    method: POST
    data_selector: import_command
    params: {}
- name: create_authenticated_requests
  endpoint:
    path: /ca/create_authenticated_certificate_request
    method: POST
    data_selector: request_command
    params: {}
- name: createExternallySignedCa
  endpoint:
    path: /ejbca/9.0/web-service-interface/createExternallySignedCa
    method: POST
- name: caCertResponse
  endpoint:
    path: /ejbca/9.0/web-service-interface/caCertResponse
    method: POST
- name: caRenewCertRequest
  endpoint:
    path: /ejbca/9.0/web-service-interface/caRenewCertRequest
    method: POST
- name: cvcRequest
  endpoint:
    path: /ejbca/9.0/web-service-interface/cvcRequest
    method: POST
- name: createExternallySignedCa
  endpoint:
    path: /createExternallySignedCa
    method: POST
    data_selector: response
    params: {}
- name: caCertResponse
  endpoint:
    path: /caCertResponse
    method: POST
    data_selector: response
    params: {}
- name: caRenewCertRequest
  endpoint:
    path: /caRenewCertRequest
    method: POST
    data_selector: response
    params: {}
- name: PublisherQueueData
  endpoint:
    path: /PublisherQueueData
    method: DELETE
    data_selector: items
    params: {}
- name: PublisherData
  endpoint:
    path: /PublisherData
    method: SELECT
    data_selector: ids
    params: {}
- name: SSLServerEndEntityProfile
  endpoint:
    path: /EditEndEntityProfiles
    method: POST
    data_selector: profiles
    params:
      name: SSLServerEndEntityProfile
      organization: EJBCA Edu
      country: SE
      default_certificate_profile: SSLServerEndEntityCertificateProfile
      default_ca: specified_CA
      default_token: User Generated
- name: certificates
  endpoint:
    path: /api/certificates
    method: GET
    data_selector: certificates
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
    params: {}
- name: certificates
  endpoint:
    path: /search/certificates
    method: GET
    data_selector: certificates
    params: {}
- name: end_entities
  endpoint:
    path: /search/end_entities
    method: GET
    data_selector: end_entities
    params: {}
- name: Make New Request
  endpoint:
    path: /MakingNewRequest
    method: GET
- name: Upload CSR
  endpoint:
    path: /UploadCSR
    method: POST
- name: Provide Request Info
  endpoint:
    path: /ProvideRequestInfo
    method: POST
- name: Provide External account ID
  endpoint:
    path: /ProvideExternalAccountID
    method: POST
- name: Provide User Credentials
  endpoint:
    path: /ProvideUserCredentials
    method: POST
- name: Confirm Request
  endpoint:
    path: /ConfirmRequest
    method: POST
- name: Use Request ID
  endpoint:
    path: /UseRequestID
    method: GET
- name: Use Username
  endpoint:
    path: /UseUsername
    method: GET
- name: to_approve_requests
  endpoint:
    path: /manage_requests/to_approve
    method: GET
    data_selector: requests
    params: {}
- name: pending_approval_requests
  endpoint:
    path: /manage_requests/pending_approval
    method: GET
    data_selector: requests
    params: {}
- name: processed_requests
  endpoint:
    path: /manage_requests/processed
    method: GET
    data_selector: requests
    params: {}
- name: custom_search_requests
  endpoint:
    path: /manage_requests/custom_search
    method: GET
    data_selector: requests
    params: {}
- name: Enrollment - Make New Request
  endpoint:
    path: /ca_functionality/create_certificate/
    method: GET
- name: Enrollment - Use Request ID
  endpoint:
    path: /ca_functionality/use_approval_request_id/
    method: GET
- name: Enrollment - Use Username
  endpoint:
    path: /ca_functionality/use_username/
    method: GET
- name: Certificate and End Entity Search
  endpoint:
    path: /ra_functionality/view_end_entity/
    method: GET
- name: Manage Requests
  endpoint:
    path: /endentityprofilesrules/.../approve_end_entity/
    method: GET
- name: CAs & CRLs
  endpoint:
    path: /ca_functionality/view_ca/
    method: GET
- name: Role Management
  endpoint:
    path: /system_functionality/edit_administrator_privileges/
    method: GET
- name: Key Recovery
  endpoint:
    path: /ra_functionality/keyrecovery/
    method: GET
- name: custom_ra_styles
  endpoint:
    path: /system_configuration/custom_ra_styles
    method: POST
    data_selector: styles
    params: {}
- name: upload_css_logo
  endpoint:
    path: /upload_css_logo
    method: POST
    data_selector: upload
    params: {}
- name: apply_styles_to_roles
  endpoint:
    path: /roles_access_rules/apply_styles
    method: POST
    data_selector: apply
    params: {}
- name: certification-authorities
  endpoint:
    path: /certification-authorities
    method: GET
    data_selector: certification-authorities
    params: {}
- name: validators
  endpoint:
    path: /validators
    method: GET
    data_selector: validators
    params: {}
- name: commands
  endpoint:
    path: /p11ng-cli/commands
    method: GET
    data_selector: commands
    params: {}
- name: ocsp
  endpoint:
    path: /publicweb/status/ocsp
    method: GET
- name: crl
  endpoint:
    path: /publicweb/certdist
    method: GET
- name: SCEP User
  endpoint:
    path: /users
    method: POST
    data_selector: createdUser
    params:
      name: SCEP User
      user_name: scepuser@c2company.com
- name: SCEPTEST Group
  endpoint:
    path: /groups
    method: POST
    data_selector: createdGroup
    params:
      group_name: SCEPTEST
- name: Intune License Assignment
  endpoint:
    path: /users/{user_id}/licenses
    method: POST
    data_selector: assignedLicense
    params:
      intune_product: Intune
- name: SCEP Certificate Profile
  endpoint:
    path: /device_configuration/profiles
    method: POST
    data_selector: createdProfile
    params:
      profile_name: WIN10_SCEP_certificate_profile
      platform: Windows 10 and later
      certificate_type: Device
      subject_name_format: CN={{Device_Serial}}
      certificate_validity_period: 1 Year
      key_usage: Digital signature and Key Encipherment
      key_size: 2048
      hash_algorithm: SHA-2
      root_certificate: WIN10_IssuingCA_Cert
- name: enroll_windows_10_devices
  endpoint:
    path: /learn/microsoft/intune/fundamentals/deployment-guide-enroll
    method: GET
    data_selector: instructions
- name: remove_windows_10_devices
  endpoint:
    path: /learn/microsoft/intune/user-help/unenroll-your-device-from-intune-windows
    method: GET
    data_selector: instructions
- name: certificate_request
  endpoint:
    path: /pending_requests
    method: GET
    data_selector: requests
    params: {}
- name: Certificate Distribution Point
  endpoint:
    path: /configure/cdp
    method: POST
    data_selector: confirmation
    params: {}
- name: Authority Information Access
  endpoint:
    path: /configure/aia
    method: POST
    data_selector: confirmation
    params: {}
- name: Policy Module
  endpoint:
    path: /configure/policy
    method: POST
    data_selector: confirmation
    params: {}
- name: Validity Period
  endpoint:
    path: /configure/validity
    method: POST
    data_selector: confirmation
    params: {}
- name: Certificate Enrollment Request
  endpoint:
    path: /submit/certificate/enrollment
    method: POST
    data_selector: confirmation
    params: {}
- name: x509 Key Usage
  endpoint:
    path: /configure/key-usage
    method: POST
    data_selector: confirmation
    params: {}
- name: x509 Basic Constraint
  endpoint:
    path: /configure/basic-constraint
    method: POST
    data_selector: confirmation
    params: {}
- name: pki
  endpoint:
    path: /v1/pki
    method: POST
    data_selector: data
    params: {}
- name: subca01
  endpoint:
    path: /v1/subca01
    method: POST
    data_selector: data
    params: {}
- name: syslog_handler
  endpoint:
    path: /system/input/syslog
    method: POST
    data_selector: syslog-handler
    params:
      enabled: 'true'
      level: INFO
      hostname: my.host
      app-name: WildFly
      server-address: my.graylog.server
      port: '514'
      facility: local-use-1
- name: root_logger
  endpoint:
    path: /system/logger/root
    method: POST
    data_selector: root-logger
    params:
      level: INFO
      handlers:
      - CONSOLE
      - FILE
      - SYSLOGTCP
- name: SCEP Enrollment
  endpoint:
    path: /ejbca/publicweb/apply/scep
    method: GET
    data_selector: enrollment
- name: SCEP RA Enrollment
  endpoint:
    path: /scepraserver/scep
    method: GET
    data_selector: enrollment
    params:
      enrollment_mode: ra
- name: AMPublisher
  endpoint:
    path: /services/data/vXX.X/sobjects/AMPublisher
    method: GET
    data_selector: records
    params: {}
- name: AMUser
  endpoint:
    path: /services/data/vXX.X/sobjects/AMUser
    method: GET
    data_selector: records
    params: {}
- name: mod_jk_log
  endpoint:
    path: /var/log/apache2/mod_jk.log
    method: GET
- name: ssl_certificates
  endpoint:
    path: /etc/apache2/ssl/apache-CA.pem
    method: GET
- name: ajp_connector
  endpoint:
    path: /subsystem=web/connector=ajp
    method: ADD
    params:
      socket-binding: ajp
      protocol: AJP/1.3
      enabled: true
      scheme: http
- name: web_server_certificate
  endpoint:
    path: /ejbca/acme/directory
    method: POST
    data_selector: certificate
    params:
      email: admin@example.com
- name: EJBCA WS API
  endpoint:
    path: /ejbca/ejbcaws/ejbcaws
    method: GET
- name: certificate_metadata
  endpoint:
    path: /api/now/certificate_metadata
    method: GET
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: certificate_search_v2
  endpoint:
    path: /ejbca-rest-api/v2/certificate/search
    method: POST
    data_selector: certificates
- name: status_check
  endpoint:
    path: /ejbca-rest-api/v1/certificate/status
    method: GET
    data_selector: status
- name: crypto_token
  endpoint:
    path: /create_crypto_token
    method: POST
    data_selector: result
    params: {}
notes:
- The REST API requires client certificate authentication or OAuth just as the Admin
  GUI does.
- EJBCA Certificate Management REST API contains endpoints intended for integration
  with EJBCA, using CA Management, Crypto token management, Certificate management
  and ConfigDump RESTful Web Services.
- The REST API is disabled by default and requires activation.
- Client certificate authentication is required.
- To enable usage of self-signed certificates in development, add -k to the curl options.
- To view the error message from curl, remove -s.
- Requires client certificate for authentication
- Notification settings may trigger email notifications when adding end entities
- The REST API is disabled by default and requires enabling through the CA UI.
- Client certificate authentication is required for accessing the API.
- From version 7.10.0, 'email' should be mentioned in pkcs10enroll request in REST
  interface.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Domain security is of great importance.
- It is recommended to keep your CAs behind a one-way firewall, allowing only outgoing
  connections.
- EJBCA's Microsoft Auto-enrollment support eliminates the need for a separate CEP
  or CES server.
- EJBCA supports automated enrollment protocols including EST, CMP, Microsoft Intune,
  and SCEP.
- EJBCA is built for scale and can handle large volumes.
- Clustering allows for reliability and performance improvements.
- Database sharding is recommended for extreme volumes.
- CRL partitioning is supported to manage large populations of certificates.
- EJBCA Community and SignServer Community are available for immediate deployment
  from Docker Hub, allowing you to get a test PKI or digital signature solution up
  in a few seconds.
- Red Hat provides an open source automation tool, Ansible, that enables efficient
  and secure provisioning, configuration management, and deployment of software and
  containers.
- Keyfactor is committed to supporting our customers through the transition to these
  new PQC standards.
- Effective 'crypto agility' means that to be able to act on a large scale, you need
  to know where you need to act.
- EJBCA implements the Certification Authority (CA) part of a Public Key Infrastructure
  (PKI) according to standards such as X.509 and IETF-PKIX.
- Independent of CA software used (various degrees of integration possible and may
  be required).
- One responder can respond for any number of CAs.
- Status information stored in SQL database.
- Not depending on CRLs. Status information can be updated in real-time.
- Plug-in mechanism for custom OCSP extensions.
- Highly configurable audit and transaction logging. Suitable for invoicing.
- Supports PKCS#11 HSMs and soft keys.
- Built-in health check used by load balancers and for monitoring.
- Configurable for requiring signed requests, authorized signers, etc.
- Can answer good or unknown to non-existing certificates, with different configuration
  based on request URI.
- Linear scalability for performance and high availability by adding multiple nodes.
- High performance, >500 requests per second on a single server.
- On-line renewal of OCSP responder keys and certificates.
- EJBCA supports a variety of certificate formats and standards including X509 and
  PKIX.
- Supports CRL formats and standards for certificate distribution.
- Using Java 17 requires an application server that supports it, such as WildFly 32.
- EJBCA supports multiple relational databases such as MariaDB, MySQL, Oracle Database,
  PostgreSQL and others.
- EJBCA maintains its static configurations under the conf directory.
- Configuration files must be renamed from *.properties.sample to *.properties to
  become active.
- Make a note of the password used to encrypt the keystore, as it will be needed later.
- EJBCA can run on a supported application server (currently JEE10).
- The vast majority of our user base uses JBoss/WildFly.
- For MariaDB, use connection-url with ?permitMysqlScheme if mysql identifier is used.
- For PostgreSQL and Microsoft SQL Server, ensure the correct JDBC driver is added.
- Wait for the reload to complete by checking the server log or the result of ':read-attribute(name=server-state)'
  before continuing.
- EJBCA is logging all actions to the WildFly log file located in `/opt/wildfly/standalone/log/server.log`.
- The application server can sometimes load its own version of Bouncy Castle, resulting
  in incompatibility and/or conflict issues.
- 'For MariaDB connector of versions >= 3.0: `?permitMysqlScheme` must be added to
  the connection url if mysql identifier is used.'
- Wait for the reload to complete by checking the server log or the result of **':read-attribute(name=server-state)'**
  before continuing.
- Compress the OCSP audit log and the OCSP transaction log after rotation
- Uses WildFly 32.0.0.Final with various layers for EJBCA.
- Ensure unique TX_NODE_ID when running in a clustered environment.
- Uses Galleon to install WildFly
- Set allowed memory usage to at least 2048 MB of RAM
- Wait for the reload to complete by checking the server log or the result of **":read-attribute(name=server-state)"**
  before continuing.
- Make sure the password of the keystore and truststore in this section are correct,
  in order for the deployment not to fail. In production the passwords should be changed
  to "real" passwords.
- This command can fail with a "Duplicate resource" error. If that happens, it is
  safe to ignore the error and skip this step.
- Make sure the password of the keystore and truststore in this section are correct.
- In production the passwords should be changed to 'real' passwords.
- This command can fail with a 'Duplicate resource' error. If that happens, it is
  safe to ignore the error and skip this step.
- WildFly performs well for most use cases using the default WildFly configuration.
- You must also tune Java memory usage, typically heap (RAM), for EJBCA instances
  under high load, at least 4 GB is a good starting point.
- Use Galleon to only install the components needed by EJBCA.
- 'If you are using MariaDB connector of versions >= 3.0: ?permitMysqlScheme must
  be added to the connection url.'
- Avoid using global debug logging configuration in production.
- Consider enabling debugging for individual packages instead.
- Set the transaction node ID to a unique number.
- Ensure the script can only be executed by the jboss user.
- JBoss requires a unique transaction node ID for clustering
- Ensure to set proper memory usage for EJBCA
- JBoss is usually put in the /opt folder on Linux systems, and using a symlink to
  the JBoss folder makes it easy to switch to a new version of JBoss by simply overriding
  the symlink.
- By default, 512 MB of heap (RAM) is allowed to be used by the application server.
  This is not sufficient to run EJBCA. We recommend to allocate at least 2048 MB of
  RAM.
- Log files are rotated on a daily basis by default, but old log files are not deleted
  automatically. You can delete old log files using a cronjob.
- Ensure to configure TLS correctly with the appropriate passwords.
- Consult your HSM vendor for details on how to set PKCS#11 attributes.
- To log the SOAP messages received by and sent from EJBCA, use the command to enable
  logging.
- To remove the configuration when you are done, use the command to remove logging.
- Historically application servers are really bad at cleaning up memory from previous
  deployments and hot (re-)deploy is discouraged in production.
- To avoid manual deployment with the management interface, we can specify that the
  deployment directory should be scanned once at application server startup by setting
  the scan-interval to 0.
- JBoss performs well for most use cases using the default JBoss configuration.
- Log files are rotated on a daily basis by default, but old log files are not deleted
  automatically.
- Consider binding to a specific interface instead of binding to all interfaces using
  '0.0.0.0'.
- Uses JDBC drivers for database connections
- Ensure unique transaction node IDs across JBoss instances
- Audit logging is disabled by default.
- Requires setup of connected app in api.
- Verify that web.reqcertindb=false has been set in conf/web.properties
- This step will require a restart of the application server
- Requires installation of Management CA for internal PKI administration.
- Verify that web.reqcertindb=false has been set in conf/web.properties.
- If not, set web.reqcertindb=false in conf/web.properties, and run ant deployear
  again.
- The connecting system needs to be authorized to the /peerincoming /peerpublish/readcert
  /peerpublish/writecert /ca/[CAName] access rules to be able to check synchronization
  data and push missing or outdated certificate entries.
- The VA data source should not be involved in transactions (a no-tx-datasource in
  JBoss), and it should have auto-commit (should be default in JBoss).
- Clustering in EJBCA is defined as multiple, independent, EJBCA nodes accessing the
  same (highly available) database.
- When load balancing is used in front of multiple EJBCA nodes, it is recommended
  to use sticky web connections.
- Failover is handled manually, where traffic is redirected to the disaster recovery
  site if the primary site fails.
- The two sites are geographically separated.
- Keyfactor recommends synchronous replication between the sites to prevent data loss
  after a failover to the disaster recovery site.
- A common database cluster technology used with EJBCA is Galera.
- If Galera is used, Keyfactor recommends three database nodes, where each node is
  located in its own datacenter.
- For a solution that is straightforward to set up, the EJBCA Hardware Appliance comes
  with Galera clustering built-in and is easy to configure.
- EJBCA is used to issue billions of certificates under a very high transaction load.
- In more specialized PKI installations there can however be the need to issue hundreds
  of certificates per second.
- A prerequisite to get good performance under load is to have your database running
  fast.
- Using EJBCA in Ephemeral CA-mode curtails some functionality.
- If these limitations are acceptable you can gain some benefits by using Ephemeral
  CA-mode.
- The sequence number in memory for each node (JVM) must be unique per nodeId and
  starts with 0.
- The integrity of each fetched log entry is always validated when loaded from the
  database.
- Database integrity protection should be configured before EJBCA is installed and
  used the first time.
- Only a few ports need to be open to the outside to allow a functional EJBCA installation
- Depending on your needs, you can choose to have both port 8080 and 8442, or only
  one of them open
- Use this feature with caution
- EJBCA comes with a ready made script for setting up IPTables in Linux, and it can
  be found in *docs/howto/ejbcafirewall.sh*
- By default, the management web console is only accessible if you configure user
  access to it, and it is not configured by default.
- Switching to production mode (default) by setting ejbca.productionmode in conf/ejbca.properties
  will prevent ant from starting JUnit tests and deploying the CA build on an OCSP
  responder and vice versa.
- If you do not set utf8 as character set, then EJBCA may not start because of index
  limitations if using the default charset utf8mb4 in some configurations of MariaDB/MySQL.
- In some configurations for InnoDB the binlog_format defaults to statement. Running
  EJBCA requires is to be set to row.
- Multi-tenant architecture was introduced as of Oracle Database 12c.
- Uses Optimistic Locking which sacrifices concurrent transactions to the same database
  row in place of shorter database roundtrips.
- Running EJBCA requires binlog_format to be set to row.
- EJBCA runs with Optimistic Locking turned on, which sacrifices concurrent transactions
  to the same database row in place of shorter database roundtrips.
- If connecting multiple instances of EJBCA to the same database schema, ensure that
  these will not update the same end entities concurrently.
- Due to differences between databases in how batches are read, MSSQL installations
  should have database.crlgenfetchordered set to 'true'.
- EJBCA will run well without optimization and it can be ignored for most installations.
- 'Files Deployed: ejbca.ear is deployed to the standalone/deployments directory in
  JBoss/WildFly'
- TLS keystores (keystore.jks and truststore.jks) and superadmin keystore (superadmin.p12)
  are created in the directory p12
- Will create initial Management CA and TLS and superadmin users in the database
- Always make a backup of the database before upgrading. The database contains all
  CA data, and in case you need to roll back an upgrade you can restore the database
  backup.
- Wildfly 24 and later versions support the PKCS12 type of keystore (.p12 files).
- EJBCA 9 supports running on Java 17. EJBCA 9.0 is based on JEE10/Jakarta10, which
  limits WildFly support to WF32+.
- EJBCA 8 supports running on Java 17 in addition to Java 11. EJBCA 8.0 is based on
  JEE8/Jakarta8, which limits WildFly support to WF24 and WF26.
- With the end of JDK7 support, support of JEE6 reliant application servers ceases
  as well. Minimum supported version of JBoss is EAP7/Wildfly 10.
- End of support for legacy runtime version JDK6 and moving to JDK7.
- If the received token does not have a Key ID, the Default Trusted OAuth Provider
  may be used to verify the signature.
- 'EJBCA supports four types of CAs: X509, CVC, C-ITS ECA, SSH.'
- The Microsoft CA Compatibility Mode setting is irreversible and a warning is displayed.
- This field should not be manually changed using the ConfigDump Tool in existing
  installations. If changed, it will require clearing caches.
- This setting should be set at CA creation and then never be changed. This is because,
  if unchecked, revoked and expired certificates will be set in state 'archived' and
  not be put on a CRL again, even if the checkbox is re-checked again.
- Unless you create new CRLs manually, you must configure a CRL Updater Service to
  generate the CRLs for you.
- For long term stability we recommend to use the most commonly used EC curves, if
  no other requirements apply choose P-256/P-384/P-521.
- Do not enable use of explicit ECC parameters unless you know it is really needed.
  This will create certificates that violate RFC5280.
- HSM support for EdDSA is fairly new.
- Most HSMs only support Ed25519 and not Ed448 yet.
- EJBCA Enterprise has full support for Card Verifiable Certificates (CVC) CAs used
  by EU Extended Access Control (EAC) ePassports and eIDs.
- The sequence in the holder reference of EAC CVC certificates should identify a public
  key.
- The sequence is normally an automatic property in the CA token, starting with 00001
  and increased when new keys are generated.
- When issuing a CV certificate using a Root CA profile, the EAC role will be CVCA.
- When issuing a CV certificate using a Sub CA profile the EAC role will be DV-D if
  the country is the same as the country of the CVCA and DV-F if the country is not
  the same as the CVCA.
- When issuing a CV certificate using an End Entity profile the EAC role will be IS
  (or AT or ST if one of those terminal types is being used).
- In a certificate hierarchy with the ST terminal type, the DV role is specified using
  the Profile Signature Terminal DV role setting, either Accreditation Body or Certification
  Service Provider.
- 'The EAC access rights to use for issued certificates are configured in the certificate
  profile. The following access rights are available: Read access to DG3, Read access
  to DG4.'
- A new IS with no old certificate issued must be pre-registered, be in status NEW,
  and use a password.
- An IS with status REVOKED or HISTORICAL cannot be enrolled.
- The complete certificate chain is always returned, with the IS certificate in the
  first position, DV certificate in the second, and CVCA certificate last.
- Revocation of an IS prohibits further issuance of certificates to that IS using
  the WS API.
- IS end entity naming (CN, etc) must not be changed once a certificate has been issued
  to the IS end entity, as this will cause all future renewal to fail.
- Existing IS end entities should not be reused for new systems or when replacing
  an old IS, but a new one should always be created.
- The EU policy requires using an HSM to protect the CAs signature keys.
- Using PKCS#11 the Sun PKCS#11 provider only supports RSA with PKCS1 padding (SHA256WithRSA),
  and not PSS (SHA256WIthRSAAndMGF1).
- If using the PSS algorithms, you need to use the JDK patch by PrimeKey, or wait
  for a JDK where support for RSA-PSS in the Java PKCS#11 provider is included by
  default (JDK8u241 or JDK11.0.6 or later according to JDK-8080462).
- For information on ECC support, consult with your HSM vendor.
- Currently tested HSMs are Utimaco, Thales, and nCipher.
- Processing certificate requests in the EJBCA CA UI can use either binary or PEM
  format certificate requests.
- 'CSN 369791 TLS client: 1.2.203.7064.1.1.369791.1'
- 'CSN 369791 TLS server: 1.2.203.7064.1.1.369791.2'
- EJBCA implementation of C-ITS is limited to Enrollment Certification Authority (ECA)
  operations and issuance of enrollment credentials (EC).
- There is no support for integration or upload of ECTL (European Certificate Trust
  List) and TLM (Trust List Manager).
- Identified geographic regions like country and region in countries are not compatible
  for validation against geometric regions like circular and rectangular.
- SSH certificates tend to be short-lived.
- EJBCA does not yet support publishing operations for SSH certificates.
- EJBCA does not yet support validation of client keys for SSH certificates.
- Until NIST publishes the final standards for the PQC algorithms, the parameters,
  configurations, and other details are to be considered changeable. Using the algorithms
  should until then be for testing purposes only.
- CRL partitioning allows CRLs to be partitioned in several smaller CRLs, instead
  of one large CRL.
- Certificates that are issued with certificate profiles not configured as above,
  and any pre-existing certificates prior to activating partitioned CRLs, will have
  partition number 0.
- Microsoft CA Compatibility Mode must be enabled when the CA is created.
- Certificates issued with profiles not configured for Microsoft CA Compatibility
  Mode will have partition number 0.
- Post-quantum algorithm support is offered for experimentation and testing and with
  limited support (SLA).
- Until final standard algorithms and parameters are implemented, the pre-standardized
  PQC algorithms are only valid for non-production use.
- You can enable and disable End Entity Profile Limitations in the System Configuration.
- If disabling End Entity Profile Limitations, the administrator's ability to perform
  actions is limited by which CAs the administrator is authorized to access, irrespective
  of what End Entity Profiles the administrator has access to.
- If End Entity Profile Limitations are enabled, the administrator's ability to perform
  actions is limited both by which CAs the administrator is authorized to access,
  and the End Entity Profiles the administrator has access to.
- Note that when this option is disabled, the list of End Entity Profiles under System
  Functions → Roles and Access Rules → Access Rules might be empty.
- If you configure an autogenerated password in the end entity profile you do not
  need to enter one on the adduser page.
- A generated one will automatically be sent with the e-mail.
- Auto-generated usernames can be set using the Auto-generated checkbox.
- Passwords can be auto-generated with email notifications.
- This is a complex feature, so there will be some limitations.
- Using multi-value RDNs can complicate your PKI usage and should be avoided if possible.
- The 'number of allowed requests' in the End Entity Profile will set the default,
  and maximum value available when adding or editing a new end entity.
- There is an increased risk of password brute force attacks when enabling this feature
  since users can authenticate with their password even when the end entity is in
  GENERATED state.
- EJBCA has a fixed cap of 400 characters for the entire Subject DN.
- Multi-value RDNs are not allowed in End Entity Profile validations by default.
- Publishers need to be selected in a CA or Certificate Profile to be active.
- Failed publishing attempts are not removed from the queue.
- To connect to AD though SSL, issue an LDAP SSL P12 to the domain controller.
- Remember to add the CA certificate to the machine that stores trusted root certificates.
- The Azure CRL Publisher is written for Azure Storage API version '2019-12-12'.
- Custom publishers are deployed in a Jar with a special meta-data file.
- You can have your publisher implement org.ejbca.core.model.ca.publisher.CustomPublisherUiSupport
  to make the configuration more user-friendly in the CA GUI.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Enable External Script Access under System Configuration>External Scripts to access
  external scripts.
- The publisher detects output to standard error and a non-zero error level by default.
- Publisher allows you to make certificates and lifecycle events accessible in systems
  external to the CA.
- Defaults to 10s connection timeout.
- To use the CustomerLdapPublisher1 select Edit Publishers in the Administration GUI
- The configuration option web.manualclasspathsenabled=true must be enabled in conf/web.properties.
- EJBCA does not create branches in LDAP. You have to put them there with other means
  before you start publishing.
- To use SSL against an LDAP server with MS Outlook you must make sure the CN in the
  LDAP servers certificate is the same as the hostname.
- OpenDJ is a modern, standards compliant, java based, LDAP server that is easy to
  set up and use.
- The order of groups decides the order they are queued or published.
- The order of publishers inside groups is of no importance.
- SCP publishing will not be instantaneous.
- The delay incurred depends on the periodic interval configured for the Certificate
  and CRL Reader Service.
- If 'Publish only revoked certificates' is selected, ensure 'nonexistingisgood' is
  enabled on the OCSP responder.
- This publisher has been supplanted by the VA Peer Publisher but remains widely in
  use.
- Validators are applied to CA's to validate the issuance of certificates.
- Failing validation results in the issuance process being canceled.
- All validation results are both audit logged and also logged in the server logs.
- The block list is empty by default and must be filled manually.
- The Google Safe Browsing API should only be used for non-commercial purposes.
- 'To enable external scripts, select CA UI → System Configuration → External Scripts:
  For Enable External Script Access, select Activate'
- Uses CA defined CRL Distribution Point for convenience
- Certificate Transparency is relevant only for public SSL/TLS certificates
- The validity of a certificate can be configured as fixed date or relative time.
- The Allow Validity Override option allows requesting a specific notAfter date in
  issued certificates.
- The extension is added by default, all certificate profiles have this setting enabled
  by default.
- It is also possible to disable the extension through the msPKI-Enrollment-Flag at
  the MS template.
- An administrator must disable it at the certificate profile level in the current
  EJBCA implementation.
- Do not use a Subset of Subject DN when issuing CA certificates.
- Only administrators with access rule '/system_functionality/edit_available_custom_certificate_extensions'
  can add and remove extensions.
- Approvals can be set in both CA settings and Certificate Profiles.
- If no Approval Profile is chosen in the Certificate Profile, EJBCA defaults to the
  one in the CA.
- Approval Profiles are configured in the CA UI, under Supervision Functions > Approval
  Profiles.
- Note that the publishing CA's certificates need to be imported as External CAs prior
  to importing certificates in order to verify the signatures.
- The Pre-Certificate Maintenance Service is only needed when using CT in certificates.
- It is not needed when CT is only used in OCSP responses or TLS extensions.
- Only users with the /services/database_maintenance/ access rule can view and configure
  the database maintenance service.
- By default, only the Super Administrator role has this access.
- The Microsoft Intune Certificate Revocation worker must be configured on a CA instance.
  However, revocation requests can be dispatched through an RA.
- The service periodically downloads public keys for the configured provider(s) and
  updates the internal configuration accordingly.
- The selected providers must have Public Key input method set to Provide Key Config
  URL and have a valid URL configured.
- The rollover period varies between providers. For example, Azure recommends 24h
  intervals.
- The OCSP Response Pre-signer can be configured to run on either CA or VA instances.
- As of EJBCA 7.10.0, this service will only pre-sign responses for non-expired certificates.
- You can run one service for each publisher, or one service for all publishers.
- The publishing queue service will grab queued entries in batches of 100 from the
  top of the queue and publish up unto the max set for the service by the Max number
  of entries to publish per interval setting.
- If there is a large number of CA's that are configured for renewal with this service,
  it is recommended to create multiple Renew CA services splitting up the number of
  CA's per service.
- Default responder will reply with an 'UNKNOWN' response for unknown issuers.
- If no default responder is defined or defined incorrectly, the responder will reply
  'Unauthorized'.
- Logs can be configured in JBOSS_HOME/standalone/configuration/standalone.xml
- Transactions and audit logs are put in separate files
- All connections must be by mutually authenticated TLS.
- CA must be behind a firewall allowing only outgoing connections.
- 'The certificate must have Key Usage: Digital Signature.'
- 'The certificate should also have Key Usage: Key Encipherment if the key is an RSA
  key.'
- 'The certificate must have Extended Key Usage: Client Authentication.'
- Require administrator certificates to be available in the database for revocation
  checks. Set this to false, if you want to be able to use admin certificates issued
  by external CAs.
- Access rules for Public Web users can be set through Administrator Roles using match
  value PublicAccessAuthenticationToken.
- Rules not available to the current Administrator will be disabled.
- Rules pertaining to CA's and Crypto Tokens that the Administrator does not have
  access to will be hidden.
- Some objects may return nulls in deeply nested fields
- EJBCA supports both symmetric and asymmetric key configurations for ACME EAB.
- The ACME protocol is by default disabled. To enable the service, go to CA UI > System
  Configuration > Protocol Configuration and select Enable for ACME.
- Certbot does not support EJBCA approvals for ACME account management.
- Certbot does not support certificate enrollment for IP identifiers.
- acme4j supports EJBCA approvals for ACME account management
- acme4j supports certificate enrollment for IP identifiers
- acme4j supports pre-authorization
- acme4j supports EAB (External Account Bindings) as specified in RFC 8555 section
  7.3.4
- Default ACME URL defined in acme.sh version of EJBCA is https://localhost:8442/ejbca/acme/directory.
- 'The web server must open port 80 to serve the challenge token with HTTP: http://<hostname>/.well-known/acme-challenge/<filename>.'
- Server generated keys are not applicable in case of p10cr request type, as there
  is always a public key must be present in the corresponding request which arrives
  at the CA.
- EJBCA does not support CMPv1 as defined in RFC2510
- Uses EJBCA with 3GPP CMP profile for certificate enrollment
- Direct CA - Device Communication and CA - Device Communication Through a Bespoke
  RA are supported
- CMP Error Messages
- A request with an unsupported operation will result in an HTTP not found (404) response
  from the server.
- A request with an unknown alias will result in an HTTP bad request (400) response
  from the server.
- Uses ChallengePassword for initial certificate requests.
- Enable server side key generation must be configured for the alias.
- Client certificate is always required for renewal
- When using Vendor mode, simpleenroll requires client certificate authentication
- Using Vendor mode requires TLS client certificate authentication for certain operations.
- The EST simplereenroll operation always needs certificate authentication.
- ManagementCA.cacert.pem is the Root CA certificate of the CA chain that issued the
  TLS server cert.
- The examples above use port 8442 for TLS with server authentication, and port 8443
  for TLS with both client and server authentication.
- RA mode should typically be used only for trusted RAs.
- Vendor mode with RA mode is highly discouraged.
- Giving access to EST in RA mode enables RAs to issue certificates very freely, with
  the contents for Subject DN and altName defined by the request sent by the RA.
- You can limit allowed certificate fields and content using end entity and certificate
  profiles, but RA mode should typically be used only for trusted RAs.
- Vendor mode with RA mode allows end entities to enroll using a previously issued
  certificate. Unlike Vendor mode in client mode, where an end entity must be preregistered;
  in RA mode the end entity is automatically created after certificate authentication.
- Automated creation of end entities leads to poor access control. This convenience
  may result in security issues due to flawed business logic. Hence Vendor mode with
  RA mode is highly discouraged.
- Although you can configure an EST alias without client username and without requiring
  client certificate, such an EST alias cannot be used since either certificate or
  username/password authentication is required for the initial enrollment.
- The network configuration is less complicated when using a hardware or software
  appliance, where EST can be used without mentioning a port.
- ManagementCA.cacert.pem is the Root CA certificate.
- Port 8442 is used for TLS with server authentication.
- Port 8443 is used for TLS with both client and server authentication.
- Requires setup of Management CA certificate for TLS
- Client username and password must be provided for authentication
- Both EST and REST Coap Management need to be enabled in EJBCA System Configuration
  > Protocol Configuration.
- One CA name should be selected in the EST alias.
- Only RSA keys are supported for archival and recovery.
- OCSP service receives requests on http://localhost:8080/ejbca/publicweb/status/ocsp
- OCSP Key Bindings are configured to process OCSP requests for desired CAs
- The archive cutoff extension is configured using an OCSP key binding.
- Specify the Retention period to derive the archive cutoff date as described in RFC
  6960.
- Enable Use the issuer's notBefore date as the archive cutoff date to stay compliant
  with ETSI regulations.
- The Fnr will be returned if the certificate contains a Unid in the SN component
  of the SubjectDN.
- The lookup server always checks that each client is using TLS with client authentication.
- EJBCA supports using SCEP with approvals only in RA mode due to the fact that EJBCA's
  approvals are run on enrollment and not on issuance.
- Using a HSM in FIPS mode for the CA keys only allows a single key usage for the
  CA signing key.
- AutoSscep handles enrolling against an RA, where the RA first sends a PENDING response.
- The Web Services interface requires client certificate authentication from administrators.
- The Security Audit Log specifies in detail what it logs and does not log any other
  events.
- The main purpose of the Security Audit Log is to provide information to an auditor.
- The Security Audit Log does not log things that do not happen
- The main purpose of the Security Audit Log is to provide information to an auditor
- If the audit log gets too large or damaged, you can start a fresh new audit log.
- Service is EJBCA (not shown in the Admin GUI)
- 'Module is SERVICE: this event was generated from a module in EJBCA that is responsible
  for background services'
- Administrators are recommended to use these settings when redaction is desired.
- The scope of redaction is only limited to 'org.ejbca', 'org.cesecore', and 'com.keyfactor'
  packages.
- The following characters are banned to avoid XSS-attacks and SQL-injections
- 'To implement a custom user data source, create a class implementing the interface
  org.ejbca.core.model.ra.userdatasource.ICustomUserDataSource containing the methods:
  init(), fetch() and testConnection.'
- Make the user data source available to EJBCA by adding a userdata source, choose
  Custom user data source as type and enter its classpath and properties.
- For more information on RA Management tasks, see the RA Operations Guide.
- For information on EJBCA concepts and configuration, see the EJBCA CA Concept Guide.
- Approvals are configured for each CA and certificate profile.
- No administrator is allowed to take action regarding the same approval request more
  than once.
- A new CA should always issue an (empty) CRL and this is done when the CA is created.
- Expired certificates are normally removed from CRLs following RFC 5280.
- CRLs can also be generated by having a cron job or equivalent call bin/ejbca.sh
  ca createcrl.
- Backup of EJBCA consists of Dynamic and Static data.
- Dynamic data is stored in the database.
- Static data does not change during normal operations.
- Only other nodes that are in the Nodes in Cluster list are allowed to call the ClearCacheServlet.
- Authorization is based on caller's IP address.
- The health check indicates if something is not operating as expected.
- Putting a CA in the CA Service State offline will not trigger the health check.
- The default Monitoring and healthcheck servlet value is 14400 seconds (4 hours).
- Access to the servlet can be restricted by whitelisting IP addresses.
- Sessions last for 15 minutes by default unless there is page activity.
- Clients implementing HTTP over TLS validate the dNSName field in the Subject Alternative
  Name (SAN) extension in the certificate against the domain name it is trying to
  connect to.
- The Common Name (CN) field is not used and its inclusion in certificates is discouraged.
- If a server is fronting multiple services behind a single domain name, it is recommended
  to use a wildcard certificate instead of listing each individual domain name in
  the certificate.
- You should previously have created a certificate profile and end entity profile
  for SSL servers.
- To request a certificate, access EJBCA RA Web and click Make new request.
- Before you begin, you should previously have created a certificate profile and end
  entity profile for SSL servers.
- A new certificate is generated and downloaded to your desktop.
- Application for certificates only work when the status of a user is NEW, FAILED
  or INPROCESS.
- During batch generation of certificates, users with status NEW or FAILED are generated.
- If renewal is enabled there is an extra link under Enroll on the public web page
  called Renew Browser Certificate.
- Renewal will result in the status of the end entity being set to NEW and the password
  set to an auto-generated password.
- The end entity must have notifications set or the password will be unretrievable.
- The renewal functionality is provided in a separate web module called renew.war
  which is not deployed and linked to by default.
- It can be enabled in conf/web.properties by setting web.renewalenabled=true and
  then (re-)deploy EJBCA.
- Administrators can edit the status of an end entity using the RA Web.
- All EJBCA instances in the cluster must be running EJBCA 6.11 or later.
- The default validity time for the SSL certificate is two years.
- For application servers older than WildFly 24 that use the JKS format, the keystore
  is stored in APPSRV_HOME/standalone/configuration/keystore/keystore.jks.
- Uses HMAC with password authentication for client and RA modes.
- EJBCA always authenticates an update request using only the EndEntityCertificate
  module
- The eNodeB to be authorized for enrollment must be added to EJBCA
- The eNodeB must send the Vendor certificates, eNodeB, and Sub CA in the extraCerts
  field of the CMP request.
- The eNodeB generates a new key pair to issue in the CMP initial request.
- EJBCA does not support MD2 and MD5 for issuing certificates.
- SHA1 is supported for legacy reasons, but only if explicitly configured.
- Creating a SCEP alias with the name scep makes it available using the default URL.
- Creation and configuration of auto-enrollment aliases moved to CA side.
- Manually clear cache on RA side when removing alias.
- For simplicity, a single service account can be used for all permissions to reduce
  complexity when working on active directory permissions.
- Do not add the service account to the Protected Users Security Group. Adding the
  service account to the Protected Users Security Group will break LDAP Bind which
  is required for EJBCA to connect to Active Directory for syncing the certificate
  templates.
- The crypto parameter may be changed to only allow specific cipher suites.
- If the requirement is to be able to export private key, leave this checked.
- Key Archival requires setup in System Configuration.
- Uses Kerberos authentication for auto-enrollment.
- Requires configuration of AD server details for successful connection.
- An authentication key binding is required to establish trust.
- LDAPS certificate must be located in the Local Computer's Personal certificate store
  and must include the Server Authentication OID.
- Ensure that the AD Domain Controller contains the FQDN of the domain controller.
- Verify that ports 389 (LDAP) and 636 (LDAPS) are allowed through the firewall.
- All configurable protocols and services added prior to EJBCA 6.11.0 are enabled
  by default.
- Key recovery should only be used for encryption keys and not authentication or signature
  keys, where this need for recovery does not exist.
- Key recovery cannot be used with user-generated keys since the CA does not have
  access to the private key in this case.
- RSA PKCS#1.5 encryption is not allowed in FIPS after December 31st 2023, while legacy
  decryption is still allowed.
- CAs with keys on an HSM cannot be exported through EJBCA.
- The Crypto token password is set to 'foo123'.
- The file 'chain.pem' contains the certificate chain of the external CA.
- It is recommended to create a dedicated certificate profile and an end entity profile
  for the external CA on your CA machine, instead of using the built-in profiles.
- EJBCA should be deployed in a local WildFly server as a CA
- The CA certificate request must be signed by an external Root CA and then imported
  to EJBCA to enable the EA to issue enrollment credentials (EC).
- Specify a name for the hybrid CA crypto token
- Select Soft to create a soft crypto token
- Enter a password to be used to activate the crypto token
- Self Signed means that this CA has signed itself, thus making it a Root CA
- Select a certificate profile, which can either be the ROOTCA template or a derivative
  of it
- Specify the Validity of the CA's certificate, in this example, 10 y
- Actions available on a profile include View, Edit, Delete, Rename, Clone, and Export.
- This is merely an example guide, and does not conform to any baseline requirements
  program or standard.
- The following configuration conforms to ICAO Doc 9303 Part 12, 7th Edition, but
  as standards evolve over time and requirements differ, it is always up to the operator
  of the ePassport system to ensure that the configuration is relevant and stays up
  to date.
- EJBCA can asynchronously publish certificates to one or more CT logs using a Custom
  Publisher.
- It is recommended to add a Pre-Certificate Maintenance Service when using CT in
  certificates.
- Note that it is not possible to change the crypto token ID or type.
- Note that the shown key specifications might not be supported by underlying PKCS#11
  modules.
- The KAK must be a >= 2048 bit RSA Key.
- Remote Authenticators are used to establish mutual TLS, from the upstream node to
  the downstream node.
- Remote Authenticators are used to establish mutual TLS.
- The externally visible hostname must be set correctly.
- The skew limit must have a non-negative integer value.
- Bearer token is a very sensitive object and should be kept secret.
- EJBCA can act as the current user to any other application that is integrated with
  the same OAuth provider.
- HTTPS can be configured on Keycloak however if the Keycloak server certificate that
  chains up to an root not trusted by Java you need to manually add it to Java's truststore.
- Query parameters and Wildcards are not allowed in redirect URIs
- Azure returns a JWT access token which cannot be validated because Azure adds a
  nonce claim in the header of the token after the token has been signed using the
  public key
- OCSP key binding is active and can be used to sign OCSP queries.
- By default, EJBCA requires an Admin TLS certificate to be present in the database.
- To connect a Peer from the CA to the VA/RA without importing the CA's TLS client
  certificate, set web.reqcertindb=false in conf/web.properties.
- Ensure correct Authentication Key Binding is selected.
- Namespaces are used to create a partition between sets of roles, to reduce the risk
  of mistakenly assigning an administrator belonging to one organization to a role
  belonging to another.
- The authorization privileges are cached and there will be a slight delay before
  a rule change is used.
- DVs have short validity periods and it can be useful to have them automatically
  renewed.
- EJBCA requires authentication for internal processes between nodes.
- Ensure that the role created matches the certificate defined in the CA's Authentication
  Key Binding.
- The RA can be configured to both use certificate authentication or to allow for
  public access.
- The heart of any RA is the ability to enroll for certificates and key stores.
- Requires configuration of OAuth application in Keyfactor.
- Rate limits apply to API usage.
- RA does not support Decline rules.
- Public access allows anyone to navigate to the RA UI without having to present a
  client certificate.
- This operation would make the CA UI publicly available to any party and would in
  almost all cases cause a gaping security risk.
- Uploaded styles must have the same names as the files that are replaced.
- Changes might not appear until the browser cache is invalidated or cleared manually.
- Exporting the current state of your installation is useful for auditing purposes.
- The import functionality allows you to import a complete configuration.
- Configure secure SSL for this server using SSL certificate generated by EJBCA
- It is recommended to use a firewall as an extra layer of security
- The recommended way of authenticating with EJBCA in a high security environment
  is by using a hard token.
- Most secure installations will contain administrator login keys on an external token
  rather than storing them as soft key stores on the local machine.
- Applicable to MacOS only - The OpenSC PKCS#11 implementation is required.
- A compatible browser, Firefox or Chrome is recommended.
- Microsoft Azure Active Directory administrator privileges required
- Microsoft Intune administrator privileges required
- Intune license required
- Azure AD Premium is required for Automatic Enrollment into Intune
- EJBCA Enterprise 7.4.1 or later required
- A Proxy was not required for EJBCA to connect to Intune. If a proxy is required
  then specify the applicable fields.
- Users must be assigned an Intune license to enroll devices.
- Azure AD must first be configured as a Trusted OAuth Provider.
- Application Insights is hosted in the Azure cloud platform.
- Java applications like EJBCA integrate with Azure Application Insights by configuring
  the JVM.
- This configuration applies to a Microsoft Server configured as a Standalone Root
  CA.
- Uses Vault PKI for managing certificates.
- Requires EJBCA for certificate authority management.
- The connector cannot be installed with a non-domain account.
- Use syslog over TCP for logging.
- To visualize data, create extractors in Graylog.
- Mutual certificate authentication is required for accessing EJBCA.
- An Active Directory must be available for vSEC:CMS to manage users.
- To enable Chainloop to use EJBCA as its certificate authority, you must add your
  EJBCA settings to your Chainloop Helm Chart configuration.
- Cisco IOS requires the subject DN attributes to align exactly with what it expects,
  thus only specific Subject DN fields are allowed.
- 'Create Nonexisting Users: false'
- 'Modify Existing Users: true'
- 'Add multiple certificates per user: false'
- 'Remove certificates when revoked: true'
- 'Remove ldap user when certificate revoked: false'
- 'LDAP location fields from cert DN: CN, Common Name (not really used)'
- 'Suffix base DN of the LDAP Search: same as Base DN, for example dc=company,dc=com'
- 'LDAP filter of the search: uid=$USERNAME'
- 'Subject DN Fields: UID, CN, O, C is sufficient'
- 'Default Certificate Profile: AMUser'
- 'Available Certificate Profiles: AMUser'
- Requires a client SSL certificate when accessing https://demo.primekey.se/
- KeepAlive Off should be included in the file apache2.conf to prevent Apache from
  hanging
- Have a proxy in front of Admin UI/WebService but just pass-through the TLS traffic
  in order to keep mutual authentication (allowing client certificate authentication
  to work in EJBCA).
- EJBCA API URL is formatted as https://my-pki-server/ejbca/ejbcaws/ejbcaws
- RA user certificate must be in .pfx format and imported into the local machine certificate
  store on the AirWatch Cloud Connector
- Ensure that the RA user certificate has the appropriate access rights in EJBCA Roles
  and Access Rules
- EJBCA must use TLS connection client certificate authentication
- Avoid using spaces in EJBCA CA names to prevent 'CA not found' error
- If an End Entity profile already existed for Client Authentication, select that
  profile instead.
- Uses mutual authentication.
- Support for RSASSA-PSS was implemented in OracleJDK 8u241, OpenJDK 8u272, and 11.0.6
- RSASSA-PSS working only with RSA keys 4096 bit or larger in some versions of the
  JDK
- FIPS mode does not allow the same key to be used for signing and encryption.
- The same activation code must be used for all keys used by a CA.
- Java PKCS#11 provider caches PKCS#11 sessions in a way that they can not be re-established.
- PKCS#11 NG has better support for restarting PKCS#11 session.
- Generally, you should NOT use an attributesFile and thus only in exceptional cases
  using an uncommon HSM not working well with the defaults.
- This HSM only works on Windows.
- The installation is done with an installer and the setup with a GUI.
- All generated keys will be on slot 1.
- The PIN code used when activating the keys could be anything since the authentication
  is made when login on to the user that runs EJBCA.
errors:
- '403: Not authorized to resource /administrator.'
- '400: A common error that can be caused by many conditions such as: invalid input
  parameters / JSON body in the request.'
- '404: Requested entity was not found by EJBCA.'
- '409: Conflict occurred while processing request, e.g. trying to revoke an already
  revoked certificate.'
- '422: Well-formed request but unable to process due to e.g. semantic errors.'
- '500: Unexpected error while calling the API.'
- '503: Possible reason could be that the CA is offline.'
- '400: Bad Request'
- '403: Forbidden'
- '404: Not Found'
- '500: Internal Server Error'
- '503: Service Unavailable'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck client certificate or credentials'
- '400: Bad Request - invalid input parameters or entity not found.'
- '403: Forbidden - insufficient privileges.'
- '404: Not Found - requested entity was not found.'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Ensure that the client certificate is valid.'
- '404 BAD_REQUEST: Check the error message returned for details'
- 'ClassCastException setting BagAttributes, can not set friendly name: : java.lang.ClassCastException:
  org.bouncycastle.jcajce.provider.asymmetric.x509.X509CertificateObject cannot be
  cast to org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier'
- 'ClassCastException: likely caused by Bouncy Castle version conflict'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'ClassCastException: version conflict is likely'
- ERROR [StartupSingletonBean] BouncyCastle is not loaded by an EJBCA classloader,
  version conflict is likely
- ClassCastException setting BagAttributes, can not set friendly name
- Check server logs for reload completion after configuration changes
- Connection problems after creating the ejbca user.
- 'Given userdata doesn''t fulfill end entity profile. : Subject DN has multi value
  RDNs, which is not allowed.'
- 'Given userdata doesn''t fulfill end entity profile. : Wrong number of UID fields
  in Subject DN.'
- An error message from the server.
- 'error: string'
- '401 Unauthorized: attempt to access account failed'
- '403 Forbidden: requests made with an agent certificate are refused'
- '4XX and 5XX: accompanied by an error JSON object containing an explanation'
- '500 Internal Server Error: Check approval request state.'
- '401 Unauthorized: Recheck account credentials.'
- '400: Bad request'
- '401: Unauthorized'
- '404: Not found'
- '409: Conflict'
- The server experienced an internal error
- Could not update user because of Batch generation password in end entity profile
  setting
- CSR is unacceptable
- '400 Bad Request: The received request did not contain a DER object.'
- 'BAD_REQUEST (2): The DER object contained in request could not be parsed to a CMP
  message.'
- 'BAD_REQUEST (2): Signature verification on a nested message failed.'
- 'BAD_REQUEST (2): Received CMP message was of an unknown type.'
- '404 Not Found: Submitting a request with a URL that does not match an existing
  CMP alias.'
- 'BAD_REQUEST (2): Submitting a CMP RA message with a signing certificate which was
  revoked or expired.'
- 'BAD_MESSAGE_CHECK (1): Submitting a CMP RA message that could not be authenticated.'
- 'CERT_REVOKED (10): Trying to revoke a certificate that was already revoked.'
- 'BAD_REQUEST (2): Trying to revoke a certificate whose revocation is waiting for
  approval.'
- 'BAD_REQUEST (2): Trying to revoke a certificate from a nonexistent CA.'
- 'BAD_CERTIFICATE_ID (4): Trying to revoke a non existing certificate.'
- 'BAD_CERTIFICATE_ID (4): Trying to revoke a certificate, but serial number or issuer
  were missing from request.'
- 'INCORRECT_DATA (7): Revocation reason could not be parsed from CMP message.'
- 'WRONG_AUTHORITY (6): Trying to issue or request a certificate from a non existing
  CA.'
- 'BAD_POP (9): Submitting a CMP request with bad POP.'
- 'BAD_REQUEST (2): Submitting a CMP client mode enrollment request with invalid certificate
  extensions specified.'
- 'NOT_AUTHORIZED (23): Submitting a CMP client mode enrollment request with invalid
  enrollment code.'
- 'BAD_REQUEST (2): Attempting a key update request without the end entity authentication
  module configured.'
- 'BAD_REQUEST (2): A key update request without could not be authenticated/verified.'
- 'BAD_REQUEST (2): A key update request was submitted without a subject DN.'
- 'BAD_MESSAGE_CHECK (1): A key update request for an end entity which wasn''t found
  in the database.'
- 'BAD_MESSAGE_CHECK (1): A key update request was submitted using the same key pair.'
- 'BAD_MESSAGE_CHECK (1): Any other failures that may have occurred during key renewal.'
- 'NOT_AUTHORIZED (23): Submitting a CMP client mode enrollment request with wrong
  user/enrollment code.'
- 'BAD_REQUEST (2): A request for server generated keys when this is not enabled in
  CMP alias.'
- 'BAD_REQUEST (2): A request for server generated keys when the certificate profile
  does not exist.'
- 'BAD_REQUEST (2): A request for server generated keys when the key algorithm, key
  size (RSA) or curve (ECDSA) is not allowed.'
- 'BAD_REQUEST (2): A request for server generated keys with invalid or unsupported
  key parameters.'
- 'Various: Other internal errors.'
- '400 Bad Request: Check the structure of the CSR or parameters.'
- '401 Unauthorized: Ensure valid credentials are provided.'
- '500 Internal Server Error: Check server logs for more details.'
- '400 Bad Request: Renewed certificate must have the same subject DN as the old one.'
- '400 Bad Request: Renewed certificate must have the same subject DN as the old one'
- The client was not authorized to request an Fnr.
- There was no Unid Fnr mapping available.
- There was no Unid in the certificate.
- '501:Cert_PI:SCEP:<0x141a2>: SCEP unexpectedly returned 2 certs'
- 'CERT_PROFILE_NOT_EXISTS: No such certificate profile.'
- 'SUCCESS: Operation succeeded'
- 'FAILURE: Operation failed'
- 'MEM: Error Virtual Memory is about to run out, currently free memory : **number**'
- 'DB: Error creating connection to database'
- 'CA: Error CA Token is disconnected: **CAName**'
- 'MAINT: DOWN_FOR_MAINTENANCE'
- 'Error when testing the connection with publisher: **PublisherName**'
- Could not perform a test signature on the audit log.
- '401: The monitoring system is not authorized to access the VA status servlet.'
- '500: An error occurred when querying the servlet.'
- '503: One or more VAs, whose status are requested, are out of sync.'
- '401 Unauthorized: Recheck HMAC parameters or password.'
- Authorization failed for resource /ca/1471073378
- Multiple PKIMessage objects are not allowed in one message.
- 'Invalid credentials: Verify the bind account name and format.'
- 'Certificate with serial number X and SAN Y issued by ''CN=Issuing CA'' is NOT trusted...
  LDAPS ONLY: Set up an Authentication Keybinding.'
- 'Couldn''t kickstart handshaking LDAPS ONLY: Make sure the Domain Controller has
  a valid LDAPS Certificate.'
- '400 Bad Request: Validate the request parameters'
- '401 Unauthorized: Ensure the AA certificate is imported for validation'
- 'HTTP 400 Bad Request: Check if root CA certificate is added to the CT log''s truststore.'
- 'Connection reset: Ensure TLS v1.2 support and proper firewall configuration.'
- Trusted OAuth Provider with the same label already exists!
- Trusted OAuth Provider with same kid or internal Id exists!
- Not authorized to perform any operations.
- '401 Unauthorized: Check if the token is valid or has expired.'
- '403 Forbidden: Ensure the user has permission to access the resource.'
- '404 Not Found: Verify that the requested resource exists.'
- 0 - Normal exit
- 1 - Functional failure, command was entered correctly but failed for some other
  reason
- 2 - Authentication failure
- 3 - CLI failure, command failed due to incorrect parameter use
- Certificate enrollment failed.
- 'HTTP Status 200: Indicates success.'
- 'Status ''OK'': Indicates the mutual authentication and REST protocol initial configurations
  are correct.'
auth_info:
  mentioned_objects:
  - SuperAdmin
  - ejbca
  - OAuth
  - OauthToken
  - AuthProvider
  - NamedCredential
  - ManagementCA
  - device-cert.pem
  - enrolled-key.key
  - OAuthProvider
client:
  base_url: /opt/wildfly/bin/jboss-cli.sh
  headers: {}
  paginator: {}
source_metadata: null
