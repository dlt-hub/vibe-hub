resources:
- name: Bridge Endpoint
  endpoint:
    path: /api/novu
    method: POST
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: workflows
  endpoint:
    path: /api/workflows
    method: GET
    data_selector: data
    params: {}
- name: subscribers
  endpoint:
    path: /api/subscribers
    method: POST
    data_selector: data
- name: topics
  endpoint:
    path: /api/topics
    method: POST
    data_selector: data
- name: trigger_workflow
  endpoint:
    path: /api/workflow/trigger
    method: POST
    data_selector: data
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: retrieve_subscriber_preferences
  endpoint:
    path: /api/subscribers/retrieve-subscriber-preferences
    method: GET
    data_selector: preferences
    params: {}
- name: update_subscriber_preferences
  endpoint:
    path: /api/subscribers/update-subscriber-preferences
    method: POST
    data_selector: preferences
    params: {}
- name: multi-tenancy
  endpoint:
    path: /platform/concepts/tenants
    method: GET
    data_selector: notifications
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: events
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data.notifications
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: data.preferences
- name: Inbox
  endpoint:
    path: /platform/inbox/setup-inbox
    method: GET
    data_selector: notifications
    params: {}
- name: inbox
  endpoint:
    path: /inbox
    method: GET
- name: workflow
  endpoint:
    path: /workflows
    method: POST
    data_selector: workflow
    params: {}
- name: channel_step
  endpoint:
    path: /channel_steps
    method: POST
    data_selector: data
- name: step_conditions
  endpoint:
    path: /platform/workflow/step-conditions
    method: GET
    data_selector: conditions
    params: {}
- name: email
  endpoint:
    path: /trigger
    method: POST
    data_selector: records
- name: sms_override
  endpoint:
    path: /api/sms/override
    method: POST
    data_selector: overrides
- name: subscribers
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
- name: update_credential_webhookUrl
  endpoint:
    path: /subscribers/credentials/update
    method: POST
    data_selector: credentials
    params: {}
- name: manage_members
  endpoint:
    path: /platform/account/manage-members
    method: GET
    data_selector: members
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
- name: preferences
  endpoint:
    path: /preferences
    method: GET
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: get_api_key_status
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: get_environments
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: get_workflows
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: trigger_workflow
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: find_subscribers
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: get_notifications
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: get_subscriber_preferences
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: notifications
- name: inbox
  endpoint:
    path: /platform/inbox/react/components/inbox
    method: GET
    data_selector: records
    params: {}
- name: inbox
  endpoint:
    path: /api/inbox
    method: GET
- name: example-provider
  endpoint:
    path: /providers/example
    method: POST
    data_selector: data
    params:
      credential: apiKey
- name: example-provider
  endpoint:
    path: /providers/email/example-provider
    method: POST
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /api/webhook
    method: POST
- name: subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
- name: notification
  endpoint:
    path: /notifications
    method: POST
    data_selector: data
- name: notifyUserTask
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: notifyContentReady
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: notifyError
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
- name: notification
  endpoint:
    path: /notifications
    method: POST
    data_selector: result
- name: example-provider
  endpoint:
    path: /providers
    method: POST
    data_selector: provider
    params: {}
- name: email_provider
  endpoint:
    path: /packages/shared/src/consts/providers/channels/email.ts
    method: GET
    data_selector: providers
    params: {}
- name: get_notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: get_notification
  endpoint:
    path: /notification
    method: GET
    data_selector: notification
- name: notifications
  endpoint:
    path: /v1/notifications
    method: POST
    data_selector: data
- name: subscribers
  endpoint:
    path: /v1/subscribers
    method: POST
    data_selector: data
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: null
    params: {}
- name: notify-user-task
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: notify-on-job-completion
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: notify-content-ready
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: notify-error
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: send-notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: result
    params: {}
- name: create-subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
    params: {}
- name: transcriptions
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result
    params: {}
- name: transcription
  endpoint:
    path: /api/v1/transcriptions
    method: POST
    data_selector: data
    params: {}
- name: notification
  endpoint:
    path: /api/v1/notifications
    method: POST
    data_selector: data
    params: {}
- name: custom_step
  endpoint:
    path: /custom/step
    method: POST
    data_selector: output
    params: {}
- name: delay_step
  endpoint:
    path: /delay/step
    method: POST
    data_selector: output
    params: {}
- name: step_conditions
  endpoint:
    path: /step/conditions
    method: POST
    data_selector: output
    params: {}
- name: digest_step
  endpoint:
    path: /digest/step
    method: POST
    data_selector: output
    params: {}
- name: get_notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: get_notification
  endpoint:
    path: /notification
    method: GET
    data_selector: notification
- name: transcribeVideo
  endpoint:
    path: /transcribe
    method: POST
- name: notifyTranscriptionComplete
  endpoint:
    path: /notifications/completion
    method: POST
- name: notifyTranscriptionError
  endpoint:
    path: /notifications/error
    method: POST
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: events
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: records
- name: comment-on-post
  endpoint:
    path: /workflow/comment-on-post
    method: POST
    data_selector: payload
    params: {}
- name: acme-login-alert
  endpoint:
    path: /workflow/acme-login-alert
    method: POST
    data_selector: payload
    params: {}
- name: push_webhook
  endpoint:
    path: /integrations/push
    method: POST
    data_selector: data
    params: {}
- name: trigger_notification
  endpoint:
    path: /v1/notifications/trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /v1/subscribers
    method: POST
    data_selector: data
    params: {}
- name: provider
  endpoint:
    path: /api/providers
    method: POST
    data_selector: provider
    params: {}
- name: notifyUserTask
  endpoint:
    method: POST
- name: contentGenerationRequested
  endpoint:
    method: POST
- name: transcriptionRequested
  endpoint:
    method: POST
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: transcriptions
  endpoint:
    path: /v1/listen
    method: POST
    data_selector: results
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: events
    params: {}
- name: trigger_notification
  endpoint:
    path: /notifications/trigger
    method: POST
    data_selector: data
    params:
      workflowId: workflowId
      subscriberId: subscriberId
      email: email
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: notify_user_task
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: data
- name: notify_on_job_completion
  endpoint:
    path: /tasks/notify-on-job-completion
    method: POST
    data_selector: data
- name: notify_error
  endpoint:
    path: /tasks/notify-error
    method: POST
    data_selector: data
- name: generate_content
  endpoint:
    path: /tasks/generate-content
    method: POST
    data_selector: data
- name: process_content_request
  endpoint:
    path: /tasks/process-content-request
    method: POST
    data_selector: data
- name: transcribe_video
  endpoint:
    path: /tasks/transcribe-video
    method: POST
    data_selector: data
- name: process_transcription_request
  endpoint:
    path: /tasks/process-transcription-request
    method: POST
    data_selector: data
- name: novu-integrations
  endpoint:
    path: /novu-integrations
    method: GET
    data_selector: migrations
    params: {}
- name: changes-migration
  endpoint:
    path: /changes-migration
    method: GET
    data_selector: migrations
    params: {}
- name: encrypt-credentials
  endpoint:
    path: /encrypt-credentials
    method: GET
    data_selector: migrations
    params: {}
- name: expire-at
  endpoint:
    path: /expire-at
    method: GET
    data_selector: migrations
    params: {}
- name: fcm-credentials
  endpoint:
    path: /fcm-credentials
    method: GET
    data_selector: migrations
    params: {}
- name: in-app-integration
  endpoint:
    path: /in-app-integration
    method: GET
    data_selector: migrations
    params: {}
- name: normalize-users-email
  endpoint:
    path: /normalize-users-email
    method: GET
    data_selector: migrations
    params: {}
- name: secure-to-boolean
  endpoint:
    path: /secure-to-boolean
    method: GET
    data_selector: migrations
    params: {}
- name: seen-read-support
  endpoint:
    path: /seen-read-support
    method: GET
    data_selector: migrations
    params: {}
- name: integration-scheme-update
  endpoint:
    path: /integration-scheme-update
    method: GET
    data_selector: migrations
    params: {}
- name: layout-identifier-update
  endpoint:
    path: /layout-identifier-update
    method: GET
    data_selector: migrations
    params: {}
- name: email
  endpoint:
    path: /api/novu/email
    method: POST
    data_selector: email
    params: {}
- name: inApp
  endpoint:
    path: /api/novu/in-app
    method: POST
    data_selector: inApp
    params: {}
- name: email_provider
  endpoint:
    path: /api/providers/email
    method: POST
    data_selector: provider
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: send_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: result
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
    params: {}
- name: example-provider
  endpoint:
    path: /packages/shared/src/consts/providers/channels/email
    method: GET
    data_selector: providers
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: ''
- name: transcription
  endpoint:
    path: /api/transcription
    method: POST
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /transcriptions
    method: POST
    data_selector: transcriptionResults
    params: {}
- name: subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: subscriberResults
    params: {}
- name: delay
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflow
    params: {}
- name: digest
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflow
    params: {}
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflow
    params: {}
- name: in-app
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflow
    params: {}
- name: notifyUserTask
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: data
    params: {}
- name: transcriptionRequested
  endpoint:
    path: /tasks/transcription-requested
    method: POST
    data_selector: data
    params: {}
- name: migrations
  endpoint:
    path: /migrations
    method: POST
    data_selector: migrations
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result
    params: {}
- name: example-provider
  endpoint:
    path: /packages/shared/src/consts/providers/channels/email
    method: GET
- name: email
  endpoint:
    path: /api/novu/email
    method: POST
    data_selector: response
    params: {}
- name: in_app
  endpoint:
    path: /api/novu/in-app
    method: POST
    data_selector: response
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: records
- name: subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
- name: notification
  endpoint:
    path: /notifications
    method: POST
    data_selector: data
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: data
- name: notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
- name: email_provider
  endpoint:
    path: /providers/email
    method: POST
    data_selector: providers
    params: {}
- name: transcription
  endpoint:
    path: /transcribe
    method: POST
    data_selector: result
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: data
    params: {}
- name: email
  endpoint:
    path: /api/novu/email
    method: POST
    data_selector: email
    params: {}
- name: inApp
  endpoint:
    path: /api/novu/in-app
    method: POST
    data_selector: inApp
    params: {}
- name: digest
  endpoint:
    path: /api/novu/digest
    method: POST
    data_selector: digest
    params: {}
- name: delay
  endpoint:
    path: /api/novu/delay
    method: POST
    data_selector: delay
    params: {}
- name: subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: subscriber
    params: {}
- name: trigger_notification
  endpoint:
    path: /notifications/trigger
    method: POST
    data_selector: notification
    params: {}
- name: webhook
  endpoint:
    path: /integrations/push
    method: POST
    data_selector: data
- name: notify_user_task
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: notify_transcription_complete
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: notify_transcription_error
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: notify_user_task
  endpoint:
    path: /notify-user-task
    method: POST
- name: transcription_requested
  endpoint:
    path: /transcription-requested
    method: POST
- name: delay
  endpoint:
    path: /api/novu
    method: POST
    data_selector: records
- name: digest
  endpoint:
    path: /api/novu
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: records
- name: in_app
  endpoint:
    path: /api/novu
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /api/novu/email
    method: POST
    data_selector: email
    params: {}
- name: in-app
  endpoint:
    path: /api/novu/in-app
    method: POST
    data_selector: inApp
    params: {}
- name: delay
  endpoint:
    path: /api/novu/delay
    method: POST
    data_selector: delay
    params: {}
- name: digest
  endpoint:
    path: /api/novu/digest
    method: POST
    data_selector: digest
    params: {}
- name: comment-on-post
  endpoint:
    path: /workflow/comment-on-post
    method: POST
    data_selector: payload
    params: {}
- name: acme-login-alert
  endpoint:
    path: /workflow/acme-login-alert
    method: POST
    data_selector: payload
    params: {}
- name: acme-password-change
  endpoint:
    path: /workflow/acme-password-change
    method: POST
    data_selector: payload
    params: {}
- name: comment-on-post
  endpoint:
    path: /workflow/comment-on-post
    method: POST
    data_selector: payload
    params: {}
- name: acme-login-alert
  endpoint:
    path: /workflow/acme-login-alert
    method: POST
    data_selector: payload
    params: {}
- name: acme-password-change
  endpoint:
    path: /workflow/acme-password-change
    method: POST
    data_selector: payload
    params: {}
- name: migrations
  endpoint:
    path: /migrations
    method: GET
    data_selector: migration_records
- name: migrations
  endpoint:
    path: /migrations
    method: GET
    data_selector: migrations
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: email_provider
  endpoint:
    path: /providers/email
    method: POST
    data_selector: provider
    params: {}
- name: example-provider
  endpoint:
    path: /providers/email/example-provider
    method: POST
    data_selector: provider
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: ''
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: ''
- name: send-notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: result
    params: {}
- name: create-subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
    params: {}
- name: transcription-completed
  endpoint:
    path: /transcription/completed
    method: POST
    data_selector: data
- name: transcription-error
  endpoint:
    path: /transcription/error
    method: POST
    data_selector: data
- name: send_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: result
    params:
      workflowId: workflow_id
      to:
        subscriberId: subscriber_id
        email: recipient_email
      payload: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
    params:
      subscriberId: subscriber_id
      email: recipient_email
      firstName: first_name
      lastName: last_name
      phone: phone_number
      avatar: avatar_url
      locale: user_locale
      data: {}
- name: transcription
  endpoint:
    path: /transcriptions
    method: POST
    data_selector: transcription
    params: {}
- name: transcription
  endpoint:
    path: /transcriptions
    method: POST
    data_selector: data
    params: {}
- name: subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: workflow
  endpoint:
    path: /workflow
    method: POST
    data_selector: workflow
    params: {}
- name: trigger
  endpoint:
    path: /trigger
    method: POST
    data_selector: trigger
    params: {}
- name: migrations
  endpoint:
    path: /migrations
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /api/novu/email
    method: POST
    data_selector: email
    params: {}
- name: in_app
  endpoint:
    path: /api/novu/in-app
    method: POST
    data_selector: inApp
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: Environment
  endpoint:
    path: /platform/concepts/environments
    method: GET
    data_selector: resources
    params: {}
- name: migrations
  endpoint:
    path: /migrations
    method: GET
    data_selector: records
- name: example-provider
  endpoint:
    path: /providers/example-provider
    method: POST
    data_selector: provider
    params: {}
- name: tenant
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: records
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: environment
  endpoint:
    path: /platform/environments
    method: GET
    data_selector: environments
- name: send_notification
  endpoint:
    path: /v1/notifications
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /v1/subscribers
    method: POST
    data_selector: data
    params: {}
- name: notify_user_task
  endpoint:
    path: /notify/user/task
    method: POST
    data_selector: data
    params: {}
- name: transcription_completed
  endpoint:
    path: /transcription/completed
    method: POST
    data_selector: data
    params: {}
- name: transcription_error
  endpoint:
    path: /transcription/error
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /v1/listen
    method: POST
    data_selector: result
    params: {}
- name: send_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: notify_user_task
  endpoint:
    path: /tasks/notify-user-task
    method: POST
    data_selector: data
- name: transcription_completed
  endpoint:
    path: /tasks/transcription-completed
    method: POST
    data_selector: data
- name: transcription_error
  endpoint:
    path: /tasks/transcription-error
    method: POST
    data_selector: data
- name: comment-on-post
  endpoint:
    path: /workflow/comment-on-post
    method: POST
    data_selector: payload
    params: {}
- name: acme-login-alert
  endpoint:
    path: /workflow/acme-login-alert
    method: POST
    data_selector: payload
    params: {}
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
- name: migrations
  endpoint:
    path: /migrations
    method: POST
    data_selector: migrations
    params: {}
- name: delay
  endpoint:
    path: /api/novu
    method: POST
    data_selector: result
    params: {}
- name: digest
  endpoint:
    path: /api/novu
    method: POST
    data_selector: result
    params: {}
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: result
    params: {}
- name: inApp
  endpoint:
    path: /api/novu
    method: POST
    data_selector: result
    params: {}
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflow
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: get_environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: get
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_an_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: get_environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: get
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_an_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: example-provider
  endpoint:
    path: /packages/shared/src/consts/providers/channels/email
    method: POST
    data_selector: providers
    params: {}
- name: trigger_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: result
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
    params: {}
- name: transcription
  endpoint:
    path: /transcriptions
    method: POST
    data_selector: data
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: trigger_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: transcriptions
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: inApp
  endpoint:
    path: /in-app
    method: POST
    data_selector: message
    params: {}
- name: digest
  endpoint:
    path: /digest
    method: POST
    data_selector: digest
    params: {}
- name: delay
  endpoint:
    path: /delay
    method: POST
    data_selector: delay
    params: {}
- name: notify-user-task
  endpoint:
    path: /notify/user
    method: POST
    data_selector: data
- name: content-generation-requested
  endpoint:
    path: /content/generation/requested
    method: POST
    data_selector: data
- name: transcription-completed
  endpoint:
    path: /transcription/completed
    method: POST
    data_selector: data
- name: transcription-error
  endpoint:
    path: /transcription/error
    method: POST
    data_selector: data
- name: transcription
  endpoint:
    path: /transcribe
    method: POST
- name: email
  endpoint:
    path: /api/novu
    method: POST
- name: in-app
  endpoint:
    path: /api/novu
    method: POST
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
    data_selector: data
    params: {}
- name: migrations
  endpoint:
    path: /migrations
    method: POST
    data_selector: migrations
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: data
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: get_environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: get
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: auto_configure_integration
  endpoint:
    path: /v1/integrations/{integrationId}/auto-configure
    method: post
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: webhook
  endpoint:
    path: /webhook
    method: POST
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: webhook
  endpoint:
    path: /webhook
    method: POST
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: data
    params: {}
- name: subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: subscriber
    params: {}
- name: notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: notification
    params: {}
- name: send_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: workflowId
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: subscriberId
    params: {}
- name: notifyUserTask
  endpoint:
    path: /notify-user-task
    method: POST
    data_selector: data
- name: transcriptionRequested
  endpoint:
    path: /transcription-requested
    method: POST
    data_selector: data
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: notification
  endpoint:
    path: /notifications
    method: POST
    data_selector: notification
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribe
    method: POST
    data_selector: results
- name: transcription
  endpoint:
    path: /v1/listen
    method: POST
    data_selector: results
- name: migrations
  endpoint:
    path: /migrations
    method: POST
    data_selector: migrations
- name: email
  endpoint:
    path: /api/novu/email
    method: POST
    data_selector: data
    params: {}
- name: in_app
  endpoint:
    path: /api/novu/in-app
    method: POST
    data_selector: data
    params: {}
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: workflows
  endpoint:
    path: /api/workflows
    method: GET
    data_selector: data
    params: {}
- name: migrations
  endpoint:
    path: /migrations
    method: POST
    data_selector: records
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: Webhook URL
  endpoint:
    path: /webhook
    method: POST
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: tenant
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: tenant
    params: {}
- name: Webhook
  endpoint:
    path: /integrations
    method: POST
- name: send_notification
  endpoint:
    path: /notifications/send
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers/create
    method: POST
    data_selector: data
    params: {}
- name: example-provider
  endpoint:
    path: /packages/shared/src/consts/providers/channels/email.ts
    method: GET
    data_selector: providers
    params: {}
- name: transcription_complete
  endpoint:
    path: /transcription/completed
    method: POST
    data_selector: data
- name: transcription_error
  endpoint:
    path: /transcription/error
    method: POST
    data_selector: data
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: ''
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: results
- name: send_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: result
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
    params: {}
- name: delay
  endpoint:
    path: /api/novu
    method: POST
    data_selector: events
    params: {}
- name: digest
  endpoint:
    path: /api/novu
    method: POST
    data_selector: events
    params: {}
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: events
    params: {}
- name: inApp
  endpoint:
    path: /api/novu
    method: POST
    data_selector: events
    params: {}
- name: notify_user_task
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: data
    params: {}
- name: transcription_completed
  endpoint:
    path: /tasks/transcription-completed
    method: POST
    data_selector: data
    params: {}
- name: transcription_error
  endpoint:
    path: /tasks/transcription-error
    method: POST
    data_selector: data
    params: {}
- name: transcriptions
  endpoint:
    path: /v1/listen
    method: POST
    data_selector: results
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflow
    params: {}
- name: migrations
  endpoint:
    path: /migrations
    method: GET
    data_selector: migrations
- name: notifications
  endpoint:
    path: /notifications
    method: POST
    data_selector: notifications
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: get_environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: GET
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: messages
  endpoint:
    path: /v1/messages
    method: get
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: get_environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: GET
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: auto_configure_integration
  endpoint:
    path: /v1/integrations/{integrationId}/auto-configure
    method: POST
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: messages
  endpoint:
    path: /v1/messages
    method: get
- name: send_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: notifyUserTask
  endpoint:
    path: /notify-user-task
    method: POST
    data_selector: data
    params: {}
- name: transcriptionRequested
  endpoint:
    path: /transcription-requested
    method: POST
    data_selector: data
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: transcription
  endpoint:
    path: /v1/listen
    method: POST
    data_selector: result
    params: {}
- name: trigger_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: telemetry
  endpoint:
    path: /telemetry
    method: GET
    data_selector: data
- name: notifications
  endpoint:
    path: /notifications
    method: POST
    data_selector: notification
- name: notify_user_task
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: data
- name: notify_on_job_completion
  endpoint:
    path: /tasks/notify-job-completion
    method: POST
    data_selector: data
- name: notify_content_ready
  endpoint:
    path: /tasks/notify-content-ready
    method: POST
    data_selector: data
- name: notify_error
  endpoint:
    path: /tasks/notify-error
    method: POST
    data_selector: data
- name: notify_transcription_complete
  endpoint:
    path: /tasks/notify-transcription-complete
    method: POST
    data_selector: data
- name: notify_transcription_error
  endpoint:
    path: /tasks/notify-transcription-error
    method: POST
    data_selector: data
- name: process_content_request
  endpoint:
    path: /tasks/process-content-request
    method: POST
    data_selector: data
- name: process_transcription_request
  endpoint:
    path: /tasks/process-transcription-request
    method: POST
    data_selector: data
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result
    params: {}
- name: email
  endpoint:
    path: /api/novu/email
    method: POST
    data_selector: response
    params: {}
- name: inApp
  endpoint:
    path: /api/novu/in-app
    method: POST
    data_selector: response
    params: {}
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: GET
    data_selector: subscribers
    params: {}
- name: topics
  endpoint:
    path: /v2/topics
    method: GET
    data_selector: topics
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
    data_selector: workflows
    params: {}
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: update_integration_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transaction
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: comment-on-post
  endpoint:
    path: /workflow/comment-on-post
    method: POST
    data_selector: payload
    params: {}
- name: acme-login-alert
  endpoint:
    path: /workflow/acme-login-alert
    method: POST
    data_selector: payload
    params: {}
- name: acme-password-change
  endpoint:
    path: /workflow/acme-password-change
    method: POST
    data_selector: payload
    params: {}
- name: layouts
  endpoint:
    path: /v2/layouts/{layoutId}
    method: GET
- name: subscribers
  endpoint:
    path: /api-reference/subscribers
    method: POST
- name: migration
  endpoint:
    path: /migrations
    method: GET
    data_selector: migrations
- name: notification
  endpoint:
    path: /notifications
    method: POST
    data_selector: notifications
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: notify_user_task
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: data
    params: {}
- name: transcription_complete
  endpoint:
    path: /tasks/notify-transcription-complete
    method: POST
    data_selector: data
    params: {}
- name: transcription_error
  endpoint:
    path: /tasks/notify-transcription-error
    method: POST
    data_selector: data
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: transcriptions
  endpoint:
    path: /v1/transcribe
    method: POST
    data_selector: results
- name: list_active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: list_all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: update_integration_as_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_a_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: layouts
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
    data_selector: details
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: workflows
  endpoint:
    path: /api/workflows
    method: GET
    data_selector: data
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: null
    params: {}
- name: trigger_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: result
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
    params: {}
- name: transcription
  endpoint:
    path: /transcriptions
    method: POST
    data_selector: data
    params: {}
- name: notification
  endpoint:
    path: /notifications
    method: POST
    data_selector: data
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: auto_configure_integration
  endpoint:
    path: /v1/integrations/{integrationId}/auto-configure
    method: post
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
- name: in-app
  endpoint:
    path: /in-app
    method: POST
    data_selector: notification
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: update_integration_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionid
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: notifications
  endpoint:
    path: /v1/notifications
    method: GET
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: notification_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: create_translation
  endpoint:
    path: /v2/translations
    method: post
- name: delete_translation_group
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}
    method: delete
- name: retrieve_a_translation_group
  endpoint:
    path: /v2/translations/group/{resourceType}/{resourceId}
    method: get
- name: retrieve_a_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: get
- name: create_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: get_environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: get
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: notifications
  endpoint:
    path: /v1/notifications
    method: GET
    data_selector: events
    params: {}
- name: layouts
  endpoint:
    path: /v2/layouts/{layoutId}
    method: PUT
    data_selector: ''
    params: {}
- name: trigger_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: result
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
    params: {}
- name: notification_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
    data_selector: event_details
- name: topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
    data_selector: subscriber_info
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
    data_selector: topic_creation_response
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
    data_selector: subscription_creation_response
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
    data_selector: deletion_response
- name: retrieve_translation_group
  endpoint:
    path: /v2/translations/group/{resourceType}/{resourceId}
    method: get
    data_selector: translation_group_details
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
    data_selector: subscriber_details
- name: notifyUserTask
  endpoint:
    path: /path/to/notifyUser
    method: POST
    data_selector: data
    params: {}
- name: notifyOnJobCompletion
  endpoint:
    path: /path/to/notifyOnJobCompletion
    method: POST
    data_selector: data
    params: {}
- name: generateContent
  endpoint:
    path: /path/to/generateContent
    method: POST
    data_selector: data
    params: {}
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: GET
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: GET
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: GET
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: GET
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: records
- name: in-app
  endpoint:
    path: /api/novu
    method: POST
    data_selector: records
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: send_notification
  endpoint:
    path: /notifications/send
    method: POST
    data_selector: data
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
- name: notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
- name: workflows
  endpoint:
    path: /api/workflows
    method: GET
    data_selector: data
- name: notifyUserTask
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: data
- name: transcription
  endpoint:
    path: /tasks/transcription
    method: POST
    data_selector: data
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: results
    params: {}
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: GET
    data_selector: subscribers
- name: topics
  endpoint:
    path: /v2/topics
    method: GET
    data_selector: topics
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
    data_selector: workflows
- name: migrations
  endpoint:
    path: /migrations
    method: POST
    data_selector: migrations
    params: {}
- name: telemetry
  endpoint:
    path: /api/telemetry
    method: GET
    data_selector: data
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: set_primary_integration
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: notifications
  endpoint:
    path: /v1/notifications
    method: GET
- name: retrieve_notification
  endpoint:
    path: /v1/notifications/{notificationId}
    method: GET
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: GET
- name: create_topic
  endpoint:
    path: /v2/topics
    method: POST
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: POST
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: DELETE
- name: list_topics
  endpoint:
    path: /v2/topics
    method: GET
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: GET
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: PATCH
- name: create_translation
  endpoint:
    path: /v2/translations
    method: POST
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: list_active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: list_all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: update_integration_as_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionid
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: subscriber
  endpoint:
    path: /platform/concepts/subscribers
    method: GET
    data_selector: subscribers
    params: {}
- name: feature_flags
  endpoint:
    path: /feature-flags
    method: GET
    data_selector: flags
- name: tenant_info
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: data
- name: subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: subscriber
    params: {}
- name: trigger
  endpoint:
    path: /workflows/trigger
    method: POST
    data_selector: trigger
    params: {}
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_notification_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: delete_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: create_translation
  endpoint:
    path: /v2/translations
    method: post
- name: delete_translation_group
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}
    method: delete
- name: delete_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: delete
- name: import_master_translations_json
  endpoint:
    path: /v2/translations/master-json
    method: post
- name: retrieve_translation_group
  endpoint:
    path: /v2/translations/group/{resourceType}/{resourceId}
    method: get
- name: retrieve_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: get
- name: retrieve_master_translations_json
  endpoint:
    path: /v2/translations/master-json
    method: get
- name: upload_master_translations_json_file
  endpoint:
    path: /v2/translations/master-json/upload
    method: post
- name: notifyUserTask
  endpoint:
    path: /notify-user
    method: POST
- name: contentGenerationRequested
  endpoint:
    path: /content-generation-requested
    method: POST
- name: transcriptionRequested
  endpoint:
    path: /transcription-requested
    method: POST
- name: transcriptions
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result
    params: {}
- name: task
  endpoint:
    path: /api/novu
    method: POST
    data_selector: data
    params: {}
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: Subscriber
  endpoint:
    path: /platform/concepts/subscribers
    method: GET
    data_selector: data
    params: {}
- name: example_provider
  endpoint:
    path: /packages/shared/src/consts/providers/channels/email
    method: GET
    data_selector: providers
    params: {}
- name: notification
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: send_notification
  endpoint:
    path: /notify/send
    method: POST
    data_selector: response.data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: response.data
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: notify_user_task
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: data
    params: {}
- name: content_generation
  endpoint:
    path: /tasks/content-generation
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /tasks/transcription
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /v1/listen
    method: POST
    data_selector: results
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: set_primary_integration
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: message
    params: {}
- name: notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: notification_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: notification_inbox
  endpoint:
    path: /api/novu
    method: GET
    data_selector: notifications
    params: {}
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: get_environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: GET
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: update_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: set_primary_integration
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: notifications
  endpoint:
    path: /v1/notifications
    method: GET
- name: retrieve_notification
  endpoint:
    path: /v1/notifications/{notificationId}
    method: GET
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: GET
- name: create_topic
  endpoint:
    path: /v2/topics
    method: POST
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: GET
- name: retrieve_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: GET
- name: update_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: PATCH
- name: send_notification
  endpoint:
    path: /notifications
    method: POST
    data_selector: data
    params:
      workflowId: workflowId
      to:
        subscriberId: userId
        email: email
      payload: payload
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params:
      subscriberId: userId
      email: email
      firstName: firstName
      lastName: lastName
      phone: phone
      avatar: avatar
      locale: locale
      data: data
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: notify_user_task
  endpoint:
    path: /path/to/notify_user_task
    method: POST
    data_selector: data
    params: {}
- name: transcription_complete
  endpoint:
    path: /path/to/transcription_complete
    method: POST
    data_selector: data
    params: {}
- name: transcription_error
  endpoint:
    path: /path/to/transcription_error
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result
    params: {}
- name: update_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: PATCH
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: POST
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: POST
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: POST
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: PATCH
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: PATCH
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: PATCH
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: PUT
- name: create_workflow
  endpoint:
    path: /v2/workflows
    method: POST
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: PUT
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: data
- name: inApp
  endpoint:
    path: /in-app
    method: POST
    data_selector: data
- name: digest
  endpoint:
    path: /digest
    method: POST
    data_selector: data
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: data
- name: comment_on_post
  endpoint:
    path: /workflow/comment-on-post
    method: POST
    data_selector: payload
    params:
      required:
      - post_id
      - comment
- name: acme_login_alert
  endpoint:
    path: /workflow/acme-login-alert
    method: POST
    data_selector: payload
    params: {}
- name: acme_password_change
  endpoint:
    path: /workflow/acme-password-change
    method: POST
    data_selector: payload
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: notifications
- name: trigger_notification
  endpoint:
    path: /v1/notifications/trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /v1/subscribers
    method: POST
    data_selector: data
    params: {}
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: GET
- name: topics
  endpoint:
    path: /v2/topics
    method: GET
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
- name: notifyUserTask
  endpoint:
    path: /notify
    method: POST
    data_selector: data
    params: {}
- name: transcriptionRequested
  endpoint:
    path: /transcription
    method: POST
    data_selector: data
    params: {}
- name: transcriptions
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result
    params: {}
- name: workflow
  endpoint:
    path: /workflow
    method: POST
- name: email
  endpoint:
    path: /email
    method: POST
- name: inApp
  endpoint:
    path: /in-app
    method: POST
- name: list_active_integrations
  endpoint:
    path: /v1/integrations/active
    method: GET
- name: list_all_integrations
  endpoint:
    path: /v1/integrations
    method: GET
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: PUT
- name: update_integration_as_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: POST
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: DELETE
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: DELETE
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: GET
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: POST
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: DELETE
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: POST
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: POST
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: GET
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: GET
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: GET
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: PUT
- name: migrations
  endpoint:
    path: /migrations
    method: GET
    data_selector: records
    params: {}
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_notification_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: GET
    data_selector: subscribers
    params: {}
- name: topics
  endpoint:
    path: /v2/topics
    method: GET
    data_selector: topics
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
    data_selector: workflows
    params: {}
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: retrieve_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow_details
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: PUT
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: GET
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: GET
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: PUT
- name: set_primary_integration
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: POST
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: DELETE
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: DELETE
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: GET
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: POST
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: DELETE
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: POST
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: POST
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: GET
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: GET
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: GET
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: PUT
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_notification_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: send_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: notify-user-task
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: data
    params: {}
- name: notify-on-job-completion
  endpoint:
    path: /tasks/notify-on-job-completion
    method: POST
    data_selector: data
    params: {}
- name: content-generation-requested
  endpoint:
    path: /events/content-generation-requested
    method: POST
    data_selector: data
    params: {}
- name: transcription-completed
  endpoint:
    path: /tasks/notify-transcription-complete
    method: POST
    data_selector: data
    params: {}
- name: transcription-error
  endpoint:
    path: /tasks/notify-transcription-error
    method: POST
    data_selector: data
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow_details
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: results
- name: workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: example-provider
  endpoint:
    path: /providers/email/example-provider
    method: POST
    data_selector: provider
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: comment-on-post
  endpoint:
    path: /workflow/comment-on-post
    method: POST
    data_selector: payload
    params:
      required:
      - post_id
      - comment
- name: acme-login-alert
  endpoint:
    path: /workflow/acme-login-alert
    method: POST
    data_selector: payload
    params: {}
- name: acme-password-change
  endpoint:
    path: /workflow/acme-password-change
    method: POST
    data_selector: payload
    params: {}
- name: send_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: result
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
    params: {}
- name: notify_user_task
  endpoint:
    path: /notify/user/task
    method: POST
    data_selector: task
    params: {}
- name: content_generation_requested
  endpoint:
    path: /content/generation/requested
    method: POST
    data_selector: request
    params: {}
- name: transcription_requested
  endpoint:
    path: /video/transcription/requested
    method: POST
    data_selector: request
    params: {}
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: GET
- name: topics
  endpoint:
    path: /v2/topics
    method: GET
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: response
    params: {}
- name: inApp
  endpoint:
    path: /inApp
    method: POST
    data_selector: response
    params: {}
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: set_primary_integration
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: subscribers
  endpoint:
    path: /api/subscribers
    method: GET
    data_selector: data
    params: {}
- name: migrations
  endpoint:
    path: /migrations
    method: GET
    data_selector: records
- name: telemetry
  endpoint:
    path: /telemetry
    method: GET
    data_selector: records
- name: list_all_events
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: delete_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: list_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: get
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: create_translation
  endpoint:
    path: /v2/translations
    method: post
- name: delete_translation_group
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}
    method: delete
- name: delete_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: delete
- name: import_master_translations_json
  endpoint:
    path: /v2/translations/master-json
    method: post
- name: retrieve_translation_group
  endpoint:
    path: /v2/translations/group/{resourceType}/{resourceId}
    method: get
- name: retrieve_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: get
- name: retrieve_master_translations_json
  endpoint:
    path: /v2/translations/master-json
    method: get
- name: upload_master_translations_json_file
  endpoint:
    path: /v2/translations/master-json/upload
    method: post
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: GET
    data_selector: data
- name: topics
  endpoint:
    path: /v2/topics
    method: GET
    data_selector: data
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
    data_selector: data
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: set_primary_integration
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow_by_id
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: webhook
  endpoint:
    path: /api/webhooks/clerk
    method: POST
    data_selector: data
    params: {}
- name: webhook_events
  endpoint:
    path: /v1/webhook_events
    method: POST
    data_selector: data
    params: {}
- name: workflow
  endpoint:
    path: /api/workflows
    method: POST
    data_selector: data
    params: {}
- name: list_all_events
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_an_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_a_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: delete_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: list_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: get
- name: retrieve_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: create_a_translation
  endpoint:
    path: /v2/translations
    method: post
- name: delete_a_translation_group
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}
    method: delete
- name: delete_a_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: delete
- name: import_master_translations_json
  endpoint:
    path: /v2/translations/master-json
    method: post
- name: retrieve_a_translation_group
  endpoint:
    path: /v2/translations/group/{resourceType}/{resourceId}
    method: get
- name: retrieve_a_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: get
- name: retrieve_master_translations_json
  endpoint:
    path: /v2/translations/master-json
    method: get
- name: upload_master_translations_json_file
  endpoint:
    path: /v2/translations/master-json/upload
    method: post
- name: upload_translation_files
  endpoint:
    path: /v2/translations/upload
    method: post
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: trigger_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: notifyContentReady
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
- name: notifyError
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
- name: transcribeVideo
  endpoint:
    path: /transcribe
    method: POST
    data_selector: data
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: retrieve_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: email_data
    params: {}
- name: in_app
  endpoint:
    path: /in-app
    method: POST
    data_selector: in_app_data
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow_details
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: webhook_event
  endpoint:
    path: /api/webhooks/clerk
    method: POST
    data_selector: data
    params: {}
- name: webhook_events
  endpoint:
    path: /webhooks
    method: POST
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: workflow
  endpoint:
    path: /api/workflows
    method: POST
    data_selector: data
    params: {}
- name: example-provider
  endpoint:
    path: /packages/providers/src/lib/email/example-provider
    method: GET
    data_selector: records
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: data
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: list_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: trigger_notification
  endpoint:
    path: /notifications/trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: notify_user_task
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: result
    params: {}
- name: content_generation
  endpoint:
    path: /tasks/content-generation
    method: POST
    data_selector: result
    params: {}
- name: video_transcription
  endpoint:
    path: /tasks/video-transcription
    method: POST
    data_selector: result
    params: {}
- name: transcription
  endpoint:
    path: /transcriptions
    method: POST
    data_selector: result
    params: {}
- name: notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_an_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_a_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: create_a_translation
  endpoint:
    path: /v2/translations
    method: post
- name: delete_a_translation_group
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}
    method: delete
- name: retrieve_a_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: get
- name: delay
  endpoint:
    path: /delay
    method: POST
- name: digest
  endpoint:
    path: /digest
    method: POST
- name: email
  endpoint:
    path: /email
    method: POST
- name: inApp
  endpoint:
    path: /inApp
    method: POST
- name: migrations
  endpoint:
    path: /migrations
    method: POST
    data_selector: records
    params: {}
- name: migrations
  endpoint:
    path: /migrations
    method: GET
    data_selector: migrations
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: list_all_workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: get_environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: get
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: auto_configure_integration
  endpoint:
    path: /v1/integrations/{integrationId}/auto-configure
    method: post
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
- name: workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: GET
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: GET
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: PUT
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: PUT
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
- name: list_active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: list_all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: update_integration_as_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_a_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionid
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_a_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_a_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_a_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_a_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_a_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: notify_user_task
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: data
- name: notify_on_job_completion
  endpoint:
    path: /tasks/notify-on-job-completion
    method: POST
    data_selector: data
- name: content_generation_requested
  endpoint:
    path: /events/content-generation-requested
    method: POST
    data_selector: data
- name: transcription_requested
  endpoint:
    path: /events/video.transcription.requested
    method: POST
    data_selector: data
- name: transcription
  endpoint:
    path: /transcribe
    method: POST
    data_selector: result
    params: {}
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_a_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_a_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: notifications
    params: {}
- name: inApp
  endpoint:
    path: /in-app
    method: POST
    data_selector: notifications
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: workflows
  endpoint:
    path: /api/workflows
    method: GET
    data_selector: workflows
    params: {}
- name: test_workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
    params: {}
- name: example-provider
  endpoint:
    path: /providers/email/example-provider
    method: POST
    data_selector: provider
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: data
- name: trigger_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: response.data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: response.data
    params: {}
- name: transcription
  endpoint:
    path: /api/transcriptions
    method: POST
    data_selector: data
    params: {}
- name: notification
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /transcribe
    method: POST
    data_selector: result
    params: {}
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: workflow
  endpoint:
    path: /workflow
    method: POST
    data_selector: workflow
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: notifications
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: get_environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: GET
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow_detail
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: POST
    data_selector: subscriber
    params: {}
- name: events
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: event
    params: {}
- name: Trigger Notification Workflow
  endpoint:
    path: /workflow/trigger
    method: POST
    data_selector: data
    params:
      workflowId: '{{workflowId}}'
      to:
        subscriberId: '{{subscriberId}}'
- name: Add New Subscriber
  endpoint:
    path: /subscribers/create
    method: POST
    data_selector: data
    params:
      subscriberId: '{{subscriberId}}'
      email: '{{email}}'
- name: list_all_events
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: delete_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: list_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: get
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: create_translation
  endpoint:
    path: /v2/translations
    method: post
- name: delete_translation_group
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}
    method: delete
- name: delete_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: delete
- name: import_master_translations_json
  endpoint:
    path: /v2/translations/master-json
    method: post
- name: retrieve_translation_group
  endpoint:
    path: /v2/translations/group/{resourceType}/{resourceId}
    method: get
- name: retrieve_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: get
- name: retrieve_master_translations_json
  endpoint:
    path: /v2/translations/master-json
    method: get
- name: upload_master_translations_json_file
  endpoint:
    path: /v2/translations/master-json/upload
    method: post
- name: notifyUserTask
  endpoint:
    path: /tasks/notify-user
    method: POST
- name: contentGenerationRequested
  endpoint:
    path: /events/content.generation.requested
    method: POST
- name: transcriptionRequested
  endpoint:
    path: /events/video.transcription.requested
    method: POST
- name: transcription
  endpoint:
    path: /v1/listen
    method: POST
    data_selector: results
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: data
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
    data_selector: null
    params: {}
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
    data_selector: null
    params: {}
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
    data_selector: null
    params: {}
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
    data_selector: null
    params: {}
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
    data_selector: null
    params: {}
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
    data_selector: null
    params: {}
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
    data_selector: null
    params: {}
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
    data_selector: null
    params: {}
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
    data_selector: null
    params: {}
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
    data_selector: null
    params: {}
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
    data_selector: null
    params: {}
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
    data_selector: null
    params: {}
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
    data_selector: null
    params: {}
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
    data_selector: null
    params: {}
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
    data_selector: null
    params: {}
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
    data_selector: null
    params: {}
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
    data_selector: null
    params: {}
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
    data_selector: null
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: notifications
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: webhook_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: payload
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
    params: {}
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: set_primary_integration
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: records
- name: send_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: GET
- name: retrieve_notification
  endpoint:
    path: /v1/notifications/{notificationId}
    method: GET
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: GET
- name: create_topic
  endpoint:
    path: /v2/topics
    method: POST
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: POST
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: DELETE
- name: delete_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: DELETE
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: GET
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: GET
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: PATCH
- name: notify-user-task
  endpoint:
    path: /tasks/notify
    method: POST
    data_selector: data
    params: {}
- name: transcription-completed
  endpoint:
    path: /tasks/transcription-completed
    method: POST
    data_selector: data
    params: {}
- name: transcription-error
  endpoint:
    path: /tasks/transcription-error
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: message
    params: {}
- name: in-app
  endpoint:
    path: /api/novu
    method: POST
    data_selector: message
    params: {}
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_a_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_a_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: list_all_workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: migrations
  endpoint:
    path: /migrations
    method: POST
    data_selector: migrations
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: get_environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: get
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: auto_configure_integration
  endpoint:
    path: /v1/integrations/{integrationId}/auto-configure
    method: post
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: webhook
  endpoint:
    path: /integrations/push
    method: POST
    data_selector: data
    params: {}
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- endpoint:
    path: /v1/integrations/active
    method: get
- endpoint:
    path: /v1/integrations
    method: get
- endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- endpoint:
    path: /v1/messages/{messageId}
    method: delete
- endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- endpoint:
    path: /v1/messages
    method: get
- endpoint:
    path: /v2/layouts
    method: post
- endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- endpoint:
    path: /v2/layouts
    method: get
- endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- endpoint:
    path: /v2/layouts/{layoutId}
    method: patch
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
    params: {}
- name: list_all_events
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: create_translation
  endpoint:
    path: /v2/translations
    method: post
- name: delete_translation_group
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}
    method: delete
- name: retrieve_translation_group
  endpoint:
    path: /v2/translations/group/{resourceType}/{resourceId}
    method: get
- name: create_subscriber
  endpoint:
    path: /api-reference/subscribers/create-subscriber
    method: POST
- name: update_subscriber
  endpoint:
    path: /api-reference/subscribers/update-subscriber
    method: PUT
- name: bulk_create_subscribers
  endpoint:
    path: /api-reference/subscribers/bulk-create-subscribers
    method: POST
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /api-reference/subscribers/retrieve-subscriber-subscriptions
    method: GET
- name: update_provider_credentials
  endpoint:
    path: /api-reference/subscribers/update-provider-credentials
    method: PUT
- name: update_subscriber_preferences
  endpoint:
    path: /api-reference/subscribers/update-subscriber-preferences
    method: PUT
- name: create_topic
  endpoint:
    path: /api-reference/topics/create-a-topic
    method: POST
- name: update_topic
  endpoint:
    path: /api-reference/topics/update-a-topic
    method: PUT
- name: create_topic_subscriptions
  endpoint:
    path: /api-reference/topics/create-topic-subscriptions
    method: POST
- name: list_topic_subscriptions
  endpoint:
    path: /api-reference/topics/list-topic-subscriptions
    method: GET
- name: list_all_topics
  endpoint:
    path: /api-reference/topics/list-all-topics
    method: GET
- name: check_topic_subscriber
  endpoint:
    path: /api-reference/topics/check-topic-subscriber
    method: GET
- name: trigger_event
  endpoint:
    path: /api-reference/events/trigger-event
    method: POST
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_a_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_a_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: list_all_workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: webhook_event
  endpoint:
    path: /v1/events
    method: POST
    data_selector: data
    params: {}
- name: send_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: workflowId
    params:
      workflowId: string
      to:
        subscriberId: string
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: subscriberPayload
    params: {}
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
- name: webhook
  endpoint:
    path: /integrations/push
    method: POST
    data_selector: data
    params: {}
- name: workflow
  endpoint:
    path: /workflows
    method: POST
    data_selector: workflow
    params: {}
- name: notify-user-task
  endpoint:
    path: /api/notify-user
    method: POST
    data_selector: data
    params: {}
- name: transcription-completed
  endpoint:
    path: /api/transcription-completed
    method: POST
    data_selector: data
    params: {}
- name: transcription-error
  endpoint:
    path: /api/transcription-error
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result
    params: {}
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
- name: inApp
  endpoint:
    path: /in-app
    method: POST
    data_selector: notification
- name: subscribers
  endpoint:
    path: /api-reference/subscribers/retrieve-subscriber-preferences
    method: GET
    data_selector: preferences
- name: preferences
  endpoint:
    path: /api-reference/subscribers/update-subscriber-preferences
    method: POST
    data_selector: preferences
- name: migrations
  endpoint:
    path: /migrations
    method: GET
    data_selector: records
- name: create_subscriber
  endpoint:
    path: /api-reference/subscribers/create-subscriber
    method: POST
- name: update_subscriber
  endpoint:
    path: /api-reference/subscribers/update-subscriber
    method: PUT
- name: bulk_create_subscribers
  endpoint:
    path: /api-reference/subscribers/bulk-create-subscribers
    method: POST
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /api-reference/subscribers/retrieve-subscriber-subscriptions
    method: GET
- name: update_subscriber_credentials
  endpoint:
    path: /api-reference/subscribers/update-provider-credentials
    method: PUT
- name: update_subscriber_preferences
  endpoint:
    path: /api-reference/subscribers/update-subscriber-preferences
    method: PUT
- name: create_topic
  endpoint:
    path: /api-reference/topics/create-a-topic
    method: POST
- name: update_topic
  endpoint:
    path: /api-reference/topics/update-a-topic
    method: PUT
- name: create_topic_subscription
  endpoint:
    path: /api-reference/topics/create-topic-subscriptions
    method: POST
- name: list_topic_subscriptions
  endpoint:
    path: /api-reference/topics/list-topic-subscriptions
    method: GET
- name: list_all_topics
  endpoint:
    path: /api-reference/topics/list-all-topics
    method: GET
- name: check_topic_subscriber
  endpoint:
    path: /api-reference/topics/check-topic-subscriber
    method: GET
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: GET
    data_selector: data
- name: topics
  endpoint:
    path: /v2/topics
    method: GET
    data_selector: data
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
    data_selector: data
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
    data_selector: data
    params: {}
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: set_primary_integration
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: trigger_notification
  endpoint:
    path: /notifications/trigger
    method: POST
    data_selector: success
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: subscriberId
    params: {}
- name: notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: notification_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: topics
  endpoint:
    path: /v2/topics
    method: get
- name: topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: get
- name: notify-user-task
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: data
    params: {}
- name: notify-content-ready
  endpoint:
    path: /tasks/notify-content-ready
    method: POST
    data_selector: data
    params: {}
- name: notify-error
  endpoint:
    path: /tasks/notify-error
    method: POST
    data_selector: data
    params: {}
- name: notify-transcription-complete
  endpoint:
    path: /tasks/notify-transcription-complete
    method: POST
    data_selector: data
    params: {}
- name: notify-transcription-error
  endpoint:
    path: /tasks/notify-transcription-error
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: data
    params: {}
- name: in-app
  endpoint:
    path: /api/novu
    method: POST
    data_selector: data
    params: {}
- name: upload_translations
  endpoint:
    path: /v2/translations/upload
    method: post
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: push_notifications
  endpoint:
    path: /push
    method: POST
    data_selector: notifications
- name: sms_notifications
  endpoint:
    path: /sms
    method: POST
    data_selector: notifications
- name: in_app_notifications
  endpoint:
    path: /in-app
    method: POST
    data_selector: notifications
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow_details
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: migrations
  endpoint:
    path: /migrations
    method: POST
    data_selector: migration_records
    params: {}
- name: webhook
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: inbox
  endpoint:
    path: /platform/inbox
    method: GET
    data_selector: notifications
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: set_primary_integration
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: message
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
    params: {}
- name: providers
  endpoint:
    path: /providers
    method: GET
    data_selector: providers
- name: notifications
  endpoint:
    path: /v1/notifications
    method: GET
    data_selector: events
    params: {}
- name: event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: GET
    data_selector: event
    params: {}
- name: topics
  endpoint:
    path: /v2/topics
    method: GET
    data_selector: topics
    params: {}
- name: create_topic
  endpoint:
    path: /v2/topics
    method: POST
    data_selector: topic
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: records
- name: trigger_notification
  endpoint:
    path: /novu/trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /novu/subscribers
    method: POST
    data_selector: data
    params: {}
- name: notify_user_task
  endpoint:
    path: /v1/notify
    method: POST
    data_selector: data
    params: {}
- name: transcription_completed
  endpoint:
    path: /v1/transcription/completed
    method: POST
    data_selector: data
    params: {}
- name: transcription_error
  endpoint:
    path: /v1/transcription/error
    method: POST
    data_selector: data
    params: {}
- name: upload_translations
  endpoint:
    path: /v2/translations/upload
    method: post
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: payload
- name: inApp
  endpoint:
    path: /api/novu
    method: POST
    data_selector: payload
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: migrations
  endpoint:
    path: /migrations
    method: POST
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: notifications
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
- name: novu
  endpoint:
    path: /api/novu
    method: GET
    data_selector: workflows
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: get_environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: get
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: auto_configure_integration
  endpoint:
    path: /v1/integrations/{integrationId}/auto-configure
    method: post
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: inbox
  endpoint:
    path: /inbox
    method: GET
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: payload
    params: {}
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
    params: {}
- name: workflows
  endpoint:
    path: /api/workflows
    method: GET
    data_selector: data
- name: triggers
  endpoint:
    path: /api/triggers
    method: POST
    data_selector: data
- name: email_provider
  endpoint:
    path: /providers/email
    method: POST
    data_selector: providers
    params: {}
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: create_translation
  endpoint:
    path: /v2/translations
    method: post
- name: delete_translation_group
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}
    method: delete
- name: retrieve_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: get
- name: trigger_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: result
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
    params: {}
- name: notifyUserTask
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /transcriptions
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result.results
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_a_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_a_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: list_all_workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow_detail
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: migrations
  endpoint:
    path: /migrations
    method: POST
    data_selector: migrations
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: notifications
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
    params: {}
- name: novu
  endpoint:
    path: /api/novu
    method: GET
    data_selector: workflows
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: get_environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: get
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data.notifications
    params:
      limit: 30
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: data.preferences
    params: {}
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
- name: notifications
  endpoint:
    path: /api-reference/notifications/list-all-events
    method: GET
    data_selector: notifications
    params: {}
- name: subscribers
  endpoint:
    path: /api-reference/subscribers/create-subscriber
    method: POST
    data_selector: subscribers
    params: {}
- name: list_active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: list_all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: update_integration_as_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: payload
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
    data_selector: event
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: trigger_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: result
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
    params: {}
- name: transcription_complete
  endpoint:
    path: /transcription/completed
    method: POST
    data_selector: data
- name: transcription_error
  endpoint:
    path: /transcription/error
    method: POST
    data_selector: data
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_a_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_a_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: list_all_workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result.results
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: retrieve_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: retrieve_workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: webhook_event
  endpoint:
    path: /v1/events
    method: POST
    data_selector: event
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: workflows
  endpoint:
    path: /api/workflows
    method: GET
    data_selector: data
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data.notifications
    params:
      limit: 30
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
    params: {}
- name: subscribers
  endpoint:
    path: /api/subscribers
    method: GET
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: data
    params: {}
- name: list_active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: list_all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: update_integration_as_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_a_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_a_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_a_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_a_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_a_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_a_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: payload
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_notification_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: create_translation
  endpoint:
    path: /v2/translations
    method: post
- name: trigger_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
    data_selector: ''
    params: {}
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
    data_selector: ''
    params: {}
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
    data_selector: ''
    params: {}
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
    data_selector: ''
    params: {}
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
    data_selector: ''
    params: {}
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
    data_selector: ''
    params: {}
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
    data_selector: ''
    params: {}
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
    data_selector: ''
    params: {}
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
    data_selector: ''
    params: {}
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
    data_selector: ''
    params: {}
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
    data_selector: ''
    params: {}
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
    data_selector: ''
    params: {}
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
    data_selector: ''
    params: {}
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
    data_selector: ''
    params: {}
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
    data_selector: ''
    params: {}
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
    data_selector: ''
    params: {}
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
    data_selector: ''
    params: {}
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
    data_selector: ''
    params: {}
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
    data_selector: ''
    params: {}
- name: create_a_workflow
  endpoint:
    path: /v2/workflows
    method: post
    data_selector: ''
    params: {}
- name: delete_a_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
    data_selector: ''
    params: {}
- name: list_all_workflows
  endpoint:
    path: /v2/workflows
    method: get
    data_selector: ''
    params: {}
- name: notification
  endpoint:
    path: /api/v1/notifications
    method: POST
    data_selector: data
    params: {}
- name: transcribe
  endpoint:
    path: /v1/listen/prerecorded/transcribeFile
    method: POST
    data_selector: result.results
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow_detail
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: email
  endpoint:
    path: /api/novu/email
    method: POST
    data_selector: email
    params: {}
- name: in-app
  endpoint:
    path: /api/novu/in-app
    method: POST
    data_selector: in-app
    params: {}
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: POST
    data_selector: subscriberData
    params: {}
- name: events
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: triggerEvent
    params: {}
- name: test_workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data.notifications
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: data.preferences
- name: Inbox
  endpoint:
    path: /api/inbox
    method: GET
- name: subscribers
  endpoint:
    path: /api-reference/subscribers
    method: GET
    data_selector: subscribers
- name: preferences
  endpoint:
    path: /api-reference/subscribers/retrieve-subscriber-preferences
    method: GET
    data_selector: preferences
- name: notifications
  endpoint:
    path: /api-reference/notifications/list-all-events
    method: GET
    data_selector: notifications
- name: workflows
  endpoint:
    path: /platform/workflows
    method: GET
    data_selector: workflows
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: message
    params: {}
- name: list_active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: list_all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: update_integration_as_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: inbox
  endpoint:
    path: /api/inbox
    method: GET
    data_selector: notifications
- name: multi_provider_configuration
  endpoint:
    path: IS_MULTI_PROVIDER_CONFIGURATION_ENABLED
    method: GET
    data_selector: enabled
    params: {}
- name: multi_tenancy
  endpoint:
    path: IS_MULTI_TENANCY_ENABLED
    method: GET
    data_selector: enabled
    params: {}
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: delete_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: list_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: get
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: create_translation
  endpoint:
    path: /v2/translations
    method: post
- name: delete_translation_group
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}
    method: delete
- name: delete_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: delete
- name: import_master_translations_json
  endpoint:
    path: /v2/translations/master-json
    method: post
- name: retrieve_translation_group
  endpoint:
    path: /v2/translations/group/{resourceType}/{resourceId}
    method: get
- name: retrieve_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: get
- name: retrieve_master_translations_json
  endpoint:
    path: /v2/translations/master-json
    method: get
- name: upload_master_translations_json_file
  endpoint:
    path: /v2/translations/master-json/upload
    method: post
- name: upload_translation_files
  endpoint:
    path: /v2/translations/upload
    method: post
- name: send_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: result
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
- name: notify_user_task
  endpoint:
    path: /notify-user
    method: POST
    data_selector: data
    params: {}
- name: notify_content_ready
  endpoint:
    path: /notify-content-ready
    method: POST
    data_selector: data
    params: {}
- name: notify_error
  endpoint:
    path: /notify-error
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /v1/listen
    method: POST
    data_selector: results
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_a_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_a_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: list_all_workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: task
  endpoint:
    path: /api/novu
    method: POST
    data_selector: events
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow_details
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: POST
    data_selector: response
    params: {}
- name: events
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: response
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflow
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data.notifications
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: data.preferences
- name: inbox
  endpoint:
    path: /api/inbox
    method: GET
    data_selector: notifications
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: update_integration_as_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: message
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: event
    params: {}
- name: list_all_events
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: data
    params: {}
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: trigger_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
- name: workflow_detail
  endpoint:
    path: /v2/workflows/{workflowId}
    method: GET
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: GET
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: PUT
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: PUT
- name: notify_user_task
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: data
    params: {}
- name: notify_on_job_completion
  endpoint:
    path: /tasks/notify-on-job-completion
    method: POST
    data_selector: data
    params: {}
- name: generate_content
  endpoint:
    path: /tasks/generate-content
    method: POST
    data_selector: data
    params: {}
- name: process_content_request
  endpoint:
    path: /tasks/process-content-request
    method: POST
    data_selector: data
    params: {}
- name: transcribe_video
  endpoint:
    path: /tasks/transcribe-video
    method: POST
    data_selector: data
    params: {}
- name: testWorkflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
- name: email
  endpoint:
    path: /api/novu/email
    method: POST
    data_selector: message
    params: {}
- name: inApp
  endpoint:
    path: /api/novu/inApp
    method: POST
    data_selector: message
    params: {}
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
    data_selector: data.notifications
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
    params: {}
- name: Trigger Workflow
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: message
    params: {}
- name: Webhooks
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
    params: {}
- name: list_active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: list_all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: update_integration_as_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: workflows
  endpoint:
    path: /api/workflows
    method: GET
    data_selector: workflows
- name: triggers
  endpoint:
    path: /api/triggers
    method: POST
    data_selector: result
- name: providers
  endpoint:
    path: /api/providers
    method: GET
    data_selector: providers
- name: Webhook
  endpoint:
    path: /webhook
    method: POST
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_notification_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: create_translation
  endpoint:
    path: /v2/translations
    method: post
- name: retrieve_a_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: get
- name: workflows
  endpoint:
    path: /workflows
    method: POST
    data_selector: workflow
    params: {}
- name: digest
  endpoint:
    path: /digest
    method: POST
    data_selector: digest
    params: {}
- name: delay
  endpoint:
    path: /delay
    method: POST
    data_selector: delay
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: records
- name: notification
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
    params: {}
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_a_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_a_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: list_all_workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: feature_flags
  endpoint:
    path: /feature-flags
    method: GET
    data_selector: flags
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
    data_selector: records
- name: workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: GET
    data_selector: records
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: GET
    data_selector: records
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: PUT
    data_selector: records
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: PUT
    data_selector: records
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: webhook_event
  endpoint:
    path: /v1/events
    method: POST
    data_selector: data
- name: send_notification
  endpoint:
    path: /notifications/send
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
    params: {}
- name: transcription_completed
  endpoint:
    path: /transcription/completed
    method: POST
    data_selector: data
- name: transcription_error
  endpoint:
    path: /transcription/error
    method: POST
    data_selector: data
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded
    method: POST
    data_selector: result
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data.notifications
    params:
      limit: 30
- name: delay
  endpoint:
    path: /api/novu
    method: POST
- name: digest
  endpoint:
    path: /api/novu
    method: POST
- name: email
  endpoint:
    path: /api/novu
    method: POST
- name: inApp
  endpoint:
    path: /api/novu
    method: POST
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
    params: {}
- name: migrations
  endpoint:
    path: /migrations
    method: POST
    data_selector: migrations
    params: {}
- name: subscriber
  endpoint:
    path: /api/v1/subscribers
    method: POST
    data_selector: data
    params: {}
- name: notification
  endpoint:
    path: /api/v1/notifications
    method: POST
    data_selector: data
    params: {}
- name: migrations
  endpoint:
    path: /migrations
    method: GET
    data_selector: migrations
- name: notifications
  endpoint:
    path: /notifications
    method: POST
    data_selector: notifications
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /v1/webhooks
    method: POST
    data_selector: data
    params: {}
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: triggers
  endpoint:
    path: /triggers
    method: POST
    data_selector: trigger
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: list_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: inbox
  endpoint:
    path: /api/inbox
    method: GET
    data_selector: notifications
    params: {}
- name: workflow
  endpoint:
    path: /api/workflows
    method: POST
    data_selector: workflow
    params: {}
- name: Webhook
  endpoint:
    path: /integrations/push
    method: POST
    data_selector: data
    params: {}
- endpoint:
    path: /v1/integrations/active
    method: get
- endpoint:
    path: /v1/integrations
    method: get
- endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- endpoint:
    path: /v1/messages/{messageId}
    method: delete
- endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- endpoint:
    path: /v1/messages
    method: get
- endpoint:
    path: /v2/layouts
    method: post
- endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- endpoint:
    path: /v2/layouts
    method: get
- endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- endpoint:
    path: /v2/layouts/{layoutId}
    method: update
- name: digest_events
  endpoint:
    path: /api/digest/events
    method: POST
    data_selector: events
    params: {}
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: translations
  endpoint:
    path: /translations
    method: GET
    data_selector: data
    params: {}
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: data
    params: {}
- name: notification
  endpoint:
    path: /notifications
    method: GET
    data_selector: records
- name: example-provider
  endpoint:
    path: /api/providers/example-provider
    method: POST
    data_selector: provider
    params: {}
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_a_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_a_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: list_all_workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: data
    params: {}
- name: trigger_notification
  endpoint:
    path: /notifications/trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: novu_workflows
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
    params: {}
- name: notify_user_task
  endpoint:
    path: /tasks/notify-user
    method: POST
    data_selector: data
    params: {}
- name: notify_on_job_completion
  endpoint:
    path: /tasks/notify-job-completion
    method: POST
    data_selector: data
    params: {}
- name: notify_content_ready
  endpoint:
    path: /tasks/notify-content-ready
    method: POST
    data_selector: data
    params: {}
- name: notify_transcription_complete
  endpoint:
    path: /tasks/notify-transcription-complete
    method: POST
    data_selector: data
    params: {}
- name: transcription
  endpoint:
    path: /v1/listen/prerecorded
    method: POST
    data_selector: result.results
    params: {}
- name: workflow
  endpoint:
    path: /api/novu/workflow
    method: POST
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data.notifications
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: data.preferences
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: data
    params: {}
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: message
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: triggers
  endpoint:
    path: /triggers
    method: POST
    data_selector: result
- name: inbox
  endpoint:
    path: /api/inbox
    method: GET
    data_selector: records
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: set_primary_integration
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: inbox
  endpoint:
    path: /api/inbox
    method: GET
    data_selector: notifications
    params: {}
- name: workflows
  endpoint:
    path: /api/workflows
    method: GET
    data_selector: workflows
    params: {}
- name: workflows
  endpoint:
    path: /api/workflows
    method: GET
    data_selector: workflows
- name: layouts
  endpoint:
    path: /api/layouts
    method: GET
    data_selector: layouts
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_notification_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: list_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: get
- name: delete_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: delete
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: notification
  endpoint:
    path: /notifications/send
    method: POST
    data_selector: notification
    params: {}
- name: notification_feed
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
    params: {}
- name: upload_translations
  endpoint:
    path: /v2/translations/upload
    method: post
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: list_all_workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: email_channel
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: payload
    params: {}
- name: push_channel
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: payload
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
    data_selector: workflows
- name: workflow_details
  endpoint:
    path: /v2/workflows/{workflowId}
    method: GET
    data_selector: workflow
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: GET
    data_selector: step
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: PUT
    data_selector: workflow
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: PUT
    data_selector: workflow
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
- name: webhook_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: data
- name: notification
  endpoint:
    path: /notifications
    method: GET
    data_selector: data
- name: subscriber
  endpoint:
    path: /subscribers
    method: GET
    data_selector: data
- name: novu_workflows
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
    params: {}
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: trigger_event
  endpoint:
    path: /trigger
    method: POST
    data_selector: triggerResponse
- name: subscribers
  endpoint:
    path: /v1/subscribers
    method: PUT
    data_selector: data
    params: {}
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
    params: {}
- name: notifications
  endpoint:
    path: /api-reference/notifications/list-all-events
    method: GET
    data_selector: notifications
- name: subscribers
  endpoint:
    path: /api-reference/subscribers/create-subscriber
    method: POST
    data_selector: subscribers
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: data
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: data
- name: send_notification
  endpoint:
    path: /notifications/send
    method: POST
    data_selector: data.payload
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers/create
    method: POST
    data_selector: data.subscriber
    params: {}
- name: workflows
  endpoint:
    path: /platform/concepts/workflows
    method: GET
    data_selector: workflows
    params: {}
- name: demo_providers
  endpoint:
    path: /platform/integrations/demo-providers
    method: GET
    data_selector: demo_providers
    params: {}
- name: integrations
  endpoint:
    path: /platform/integrations/overview
    method: GET
    data_selector: integrations
    params: {}
- name: trigger_overrides
  endpoint:
    path: /platform/integrations/trigger-overrides
    method: GET
    data_selector: trigger_overrides
    params: {}
- name: notify-user-task
  endpoint:
    path: /tasks/notify-user
    method: POST
- name: transcription-completed
  endpoint:
    path: /tasks/transcription-completed
    method: POST
- name: transcription-error
  endpoint:
    path: /tasks/transcription-error
    method: POST
- name: inbox
  endpoint:
    path: /platform/inbox
    method: GET
- name: workflows
  endpoint:
    path: /platform/workflows
    method: POST
- name: email
  endpoint:
    path: /api/novu
    method: POST
- name: inApp
  endpoint:
    path: /api/novu
    method: POST
- name: delay
  endpoint:
    path: /api/novu
    method: POST
- name: digest
  endpoint:
    path: /api/novu
    method: POST
- name: notification_workflow
  endpoint:
    path: /platform/workflow
    method: GET
    data_selector: workflows
    params: {}
- name: payload_schema
  endpoint:
    path: /platform/payload/schema
    method: GET
    data_selector: schemas
    params: {}
- name: digest_engine
  endpoint:
    path: /platform/digest
    method: GET
    data_selector: digests
    params: {}
- name: email_layouts
  endpoint:
    path: /platform/layouts
    method: GET
    data_selector: layouts
    params: {}
- name: notification
  endpoint:
    path: /notifications
    method: POST
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: preferences
  endpoint:
    path: /inbox/preferences
    method: GET
    data_selector: preferences
    params: {}
- name: workflow_preferences
  endpoint:
    path: /inbox/workflows/preferences
    method: GET
    data_selector: preferences
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: tabs
  endpoint:
    path: /platform/inbox/configuration/tabs
    method: GET
    data_selector: tabs
    params: {}
- name: schedule
  endpoint:
    path: /platform/inbox/features/schedule
    method: GET
    data_selector: schedule
    params: {}
- name: snooze
  endpoint:
    path: /platform/inbox/features/snooze
    method: GET
    data_selector: snooze
    params: {}
- name: chat
  endpoint:
    path: /platform/integrations/chat
    method: GET
    data_selector: chat
    params: {}
- name: email_provider
  endpoint:
    path: /v1/email/providers
    method: POST
    data_selector: providers
- name: push_provider
  endpoint:
    path: /v1/push/providers
    method: POST
    data_selector: providers
- name: list_active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: list_all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: set_primary_integration
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionid
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: subscribers
  endpoint:
    path: /subscribers
    method: GET
    data_selector: subscribers
- name: Notification
  endpoint:
    path: /notifications
    method: GET
    data_selector: data
    params: {}
- name: Subscriber
  endpoint:
    path: /subscribers
    method: GET
    data_selector: data
    params: {}
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: GET
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: GET
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: GET
- name: create_topic
  endpoint:
    path: /v2/topics
    method: POST
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: POST
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: DELETE
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: GET
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: GET
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: PATCH
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
    params: {}
- name: notification
  endpoint:
    path: /notification
    method: POST
    data_selector: ''
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: subscribers
  endpoint:
    path: /v1/subscribers/<SUBSCRIBER_ID>/credentials
    method: PUT
    data_selector: result
    params: {}
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
    data_selector: records
    params: {}
- name: workflow_details
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
    data_selector: records
    params: {}
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
    data_selector: records
    params: {}
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
    data_selector: records
    params: {}
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
    data_selector: records
    params: {}
- name: send_notification
  endpoint:
    path: /notifications/send
    method: POST
    data_selector: result
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
- name: testWorkflow
  endpoint:
    path: /api/novu
    method: POST
- name: notifyUserTask
  endpoint:
    path: /notify/user
    method: POST
    data_selector: data
    params: {}
- name: notifyOnJobCompletion
  endpoint:
    path: /notify/job/completion
    method: POST
    data_selector: data
    params: {}
- name: generateContent
  endpoint:
    path: /generate/content
    method: POST
    data_selector: data
    params: {}
- name: transcribeVideo
  endpoint:
    path: /transcribe/video
    method: POST
    data_selector: data
    params: {}
- name: novu
  endpoint:
    path: /api/novu
    method: GET
- name: transcription
  endpoint:
    path: /transcribe
    method: POST
- name: notifications
  endpoint:
    path: /v1/notifications
    method: GET
    data_selector: data.notifications
    params:
      limit: 30
- name: inbox
  endpoint:
    path: /inbox
    method: GET
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: message
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook_data
    params: {}
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: inbox_notification
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: notification
    params: {}
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: set_primary_integration
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: update_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: put
- name: chat
  endpoint:
    path: /chat/send
    method: POST
    data_selector: message
    params: {}
- name: push_notification
  endpoint:
    path: /push/notifications
    method: POST
    data_selector: notification
- name: sms
  endpoint:
    path: /sms/send
    method: POST
    data_selector: message
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: GET
- name: retrieve_notification_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: GET
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: GET
- name: create_topic
  endpoint:
    path: /v2/topics
    method: POST
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: POST
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: DELETE
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: GET
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: GET
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: PATCH
- name: Notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: records
- name: default_schedule
  endpoint:
    path: /platform/inbox/overview
    method: GET
    data_selector: defaultSchedule
    params: {}
- name: snooze
  endpoint:
    path: /platform/inbox/snooze
    method: POST
    data_selector: snoozeNotification
    params: {}
- name: chat_channel
  endpoint:
    path: /platform/integrations/chat
    method: POST
    data_selector: chatProviderIntegration
    params: {}
- name: email_channel
  endpoint:
    path: /platform/integrations/email
    method: POST
    data_selector: emailProviderIntegration
    params: {}
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: result
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_a_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_a_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: list_all_workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: data
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: retrieve_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: retrieve_workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: inbox
  endpoint:
    path: /inbox
    method: GET
- name: notifications
  endpoint:
    path: /notifications
    method: GET
- name: trigger_event
  endpoint:
    path: /v1/trigger
    method: POST
    data_selector: data
- name: subscribers
  endpoint:
    path: /v1/subscribers
    method: GET
    data_selector: data
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: POST
    data_selector: subscriberData
- name: events
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: triggerEvent
- name: Braze API
  endpoint:
    path: /api/v3
    method: POST
    data_selector: data
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
    params: {}
- name: novu_workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
    data_selector: data
- name: send_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /notifications/list
    method: GET
    data_selector: data.notifications
    params:
      limit: 30
- name: workflow_trigger
  endpoint:
    path: /trigger
    method: POST
    data_selector: data
    params: {}
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
- name: transcription
  endpoint:
    path: /transcribe
    method: POST
    data_selector: result
- name: delay
  endpoint:
    path: /api/novu
    method: POST
    data_selector: events
- name: digest
  endpoint:
    path: /api/novu
    method: POST
    data_selector: events
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: events
- name: inApp
  endpoint:
    path: /api/novu
    method: POST
    data_selector: events
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: message
    params: {}
- name: create_webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: notification_center
  endpoint:
    path: /api/novu
    method: GET
    data_selector: notifications
    params: {}
- name: inbox
  endpoint:
    path: /api/inbox
    method: GET
    data_selector: notifications
- name: workflows
  endpoint:
    path: /api/workflows
    method: POST
    data_selector: workflow
- name: workflows
  endpoint:
    path: /workflows
    method: GET
- name: layouts
  endpoint:
    path: /layouts
    method: GET
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: post
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: post
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: delete
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: post
- name: create_environment
  endpoint:
    path: /v1/environments
    method: post
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: delete
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: get
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: put
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: post
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: delete
- name: events-publish
  endpoint:
    path: events-publish
    method: POST
    data_selector: key
    params: {}
- name: events-update
  endpoint:
    path: events-update
    method: POST
    data_selector: subject
    params: {}
- name: push_notification
  endpoint:
    path: /push/send
    method: POST
    data_selector: notification
    params: {}
- name: sms_notification
  endpoint:
    path: /sms/send
    method: POST
    data_selector: message
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: Inbox
  endpoint:
    path: /inbox/preferences
    method: GET
    data_selector: preferences
    params: {}
- name: list_active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: list_all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: update_integration_as_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: snooze
  endpoint:
    path: /platform/inbox/snooze
    method: GET
    data_selector: notifications
    params: {}
- name: chat
  endpoint:
    path: /platform/integrations/chat
    method: POST
    data_selector: chat_notifications
    params: {}
- name: email
  endpoint:
    path: /platform/integrations/email
    method: POST
    data_selector: email_notifications
    params: {}
- name: notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_notification_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_a_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: create_translation
  endpoint:
    path: /v2/translations
    method: post
- name: retrieve_a_translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: get
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: result
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data
    params: {}
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: data
    params: {}
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_a_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_a_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: list_all_workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: retrieve_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: get
- name: retrieve_workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: get
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: put
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: put
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
    params:
      applicationIdentifier: YOUR_APP_ID
      subscriber: USER_ID
      apiUrl: https://api.novu.co
      socketUrl: https://ws.novu.co
      placement: right
      placementOffset: 10
- name: Braze Integration
  endpoint:
    path: /integrations/braze
    method: POST
    data_selector: data
    params: {}
- name: novu
  endpoint:
    path: /api/novu
    method: GET
- name: tenants
  endpoint:
    path: /tenants/{identifier}
    method: GET
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data.notifications
    params:
      limit: 30
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: data.preferences
    params: {}
- name: send_notification
  endpoint:
    path: /trigger
    method: POST
    data_selector: result
    params: {}
- name: create_subscriber
  endpoint:
    path: /subscribers
    method: POST
    data_selector: result
    params: {}
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
- name: notifyUserTask
  endpoint:
    path: /notify-user
    method: POST
- name: notifyContentReady
  endpoint:
    path: /notify-content-ready
    method: POST
- name: notifyError
  endpoint:
    path: /notify-error
    method: POST
- name: transcribeVideo
  endpoint:
    path: /transcribe-video
    method: POST
- name: transcription
  endpoint:
    path: /v1/listen
    method: POST
    data_selector: result
    params: {}
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
- name: email
  endpoint:
    path: /api/novu
    method: POST
    data_selector: records
- name: in-app
  endpoint:
    path: /api/novu
    method: POST
    data_selector: records
- name: workflows
  endpoint:
    path: /workflows
    method: GET
- name: triggers
  endpoint:
    path: /triggers
    method: POST
- name: comment-on-post
  endpoint:
    path: /api/novu
    method: POST
    data_selector: payload
    params: {}
- name: acme-login-alert
  endpoint:
    path: /api/novu
    method: POST
    data_selector: payload
    params: {}
- name: acme-password-change
  endpoint:
    path: /api/novu
    method: POST
    data_selector: payload
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: notifications
    params: {}
- name: workflows
  endpoint:
    path: /api/workflows
    method: GET
- name: layouts
  endpoint:
    path: /api/layouts
    method: GET
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: translations
  endpoint:
    path: /translations
    method: GET
    data_selector: translations
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
- name: create_environment
  endpoint:
    path: /v1/environments
    method: POST
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
- name: get_environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: GET
- name: list_all_environments
  endpoint:
    path: /v1/environments
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: create_integration
  endpoint:
    path: /v1/integrations
    method: POST
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: push_notification
  endpoint:
    path: /push/notifications
    method: POST
    data_selector: notification
    params: {}
- name: sms
  endpoint:
    path: /sms/send
    method: POST
    data_selector: message
    params: {}
- name: Notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: get
- name: all_integrations
  endpoint:
    path: /v1/integrations
    method: get
- name: update_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: put
- name: set_primary_integration
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: post
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: delete
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: delete
- name: list_all_messages
  endpoint:
    path: /v1/messages
    method: get
- name: create_layout
  endpoint:
    path: /v2/layouts
    method: post
- name: delete_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: delete
- name: duplicate_layout
  endpoint:
    path: /v2/layouts/{layoutId}/duplicate
    method: post
- name: generate_layout_preview
  endpoint:
    path: /v2/layouts/{layoutId}/preview
    method: post
- name: get_layout_usage
  endpoint:
    path: /v2/layouts/{layoutId}/usage
    method: get
- name: list_all_layouts
  endpoint:
    path: /v2/layouts
    method: get
- name: retrieve_layout
  endpoint:
    path: /v2/layouts/{layoutId}
    method: get
- name: default_schedule
  endpoint:
    path: /platform/inbox/overview
    method: GET
    data_selector: defaultSchedule
    params: {}
- name: snooze
  endpoint:
    path: /platform/inbox/snooze
    method: GET
    data_selector: snooze
    params: {}
- name: chat
  endpoint:
    path: /platform/integrations/chat
    method: GET
    data_selector: chat
    params: {}
- name: email
  endpoint:
    path: /platform/integrations/email
    method: GET
    data_selector: email
    params: {}
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: payload
    params: {}
- name: list_all_notifications
  endpoint:
    path: /v1/notifications
    method: get
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: get
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: get
- name: create_topic
  endpoint:
    path: /v2/topics
    method: post
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: post
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: delete
- name: list_all_topics
  endpoint:
    path: /v2/topics
    method: get
- name: retrieve_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: get
- name: update_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: patch
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
- name: Inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
- name: Bell
  endpoint:
    path: /bell
    method: GET
    data_selector: bellData
- name: Notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: InboxContent
  endpoint:
    path: /inbox-content
    method: GET
    data_selector: inboxContent
- name: trigger_event
  endpoint:
    path: /v1/triggers
    method: POST
    data_selector: response
    params: {}
- name: update_credentials
  endpoint:
    path: /v1/subscribers/<SUBSCRIBER_ID>/credentials
    method: PUT
    data_selector: response
    params: {}
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: post
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: patch
- name: create_a_subscriber
  endpoint:
    path: /v2/subscribers
    method: post
- name: delete_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: delete
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: delete
- name: retrieve_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: get
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: get
- name: retrieve_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: get
- name: retrieve_subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: get
- name: retrieve_unseen_notifications_count
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/unseen
    method: get
- name: search_subscribers
  endpoint:
    path: /v2/subscribers
    method: get
- name: update_a_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: patch
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: post
- name: update_notification_action_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}
    method: post
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: post
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: patch
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: patch
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: patch
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: put
- name: create_a_workflow
  endpoint:
    path: /v2/workflows
    method: post
- name: delete_a_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: delete
- name: list_all_workflows
  endpoint:
    path: /v2/workflows
    method: get
- name: slack_credentials
  endpoint:
    path: /v1/subscribers/<SUBSCRIBER_ID>/credentials
    method: PUT
    data_selector: credentials
    params: {}
- name: zulip_credentials
  endpoint:
    path: /v1/subscribers/<SUBSCRIBER_ID>/credentials
    method: PUT
    data_selector: credentials
    params: {}
- name: whatsapp_credentials
  endpoint:
    path: /v1/subscribers/<SUBSCRIBER_ID>/credentials
    method: PUT
    data_selector: credentials
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
    data_selector: records
- name: workflow_details
  endpoint:
    path: /v2/workflows/{workflowId}
    method: GET
    data_selector: records
- name: workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: GET
    data_selector: records
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: PUT
    data_selector: records
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: PUT
    data_selector: records
- name: amazon_ses
  endpoint:
    path: /send
    method: POST
    data_selector: response
- name: Mandrill Integration
  endpoint:
    path: /integrations/mandrill
    method: POST
- name: workflow
  endpoint:
    path: /api/novu
    method: POST
    data_selector: workflows
- name: email_webhook
  endpoint:
    path: /api.novu.co/v1/email/webhook
    method: POST
    data_selector: webhookData
- name: push_notifications
  endpoint:
    path: /api.novu.co/v1/push/notifications
    method: POST
    data_selector: notificationData
- name: sms
  endpoint:
    path: /sms/send
    method: POST
- name: WhatsApp
  endpoint:
    path: /whatsapp/messages
    method: POST
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
- name: schedule
  endpoint:
    path: /schedule
    method: GET
    data_selector: schedule
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
    params: {}
- name: preferences
  endpoint:
    path: /api-reference/subscribers/retrieve-subscriber-preferences
    method: GET
    data_selector: preferences
- name: subscribers
  endpoint:
    path: /api-reference/subscribers/create-subscriber
    method: POST
    data_selector: subscriber
- name: schedule
  endpoint:
    path: /useSchedule
    method: GET
    data_selector: schedule
    params: {}
- name: schedule
  endpoint:
    path: /schedule
    method: POST
    data_selector: schedule
    params: {}
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: payload
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
    params: {}
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: acknowledged
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: trigger
  endpoint:
    path: /triggers
    method: POST
    data_selector: result
- name: activity-feed
  endpoint:
    path: /activity-feed
    method: GET
    data_selector: activities
- name: integration
  endpoint:
    path: /integrations
    method: GET
    data_selector: integrations
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
    data_selector: response
    params: {}
- name: notification_inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
    data_selector: ''
    params: {}
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
- name: workflows
  endpoint:
    path: /api/v1/workflows
    method: GET
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
    data_selector: data
    params: {}
- name: subscriber
  endpoint:
    path: /api-reference/subscribers/retrieve-a-subscriber
    method: GET
    data_selector: records
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: POST
    data_selector: ''
    params:
      failIfExists: true
- name: events-publish
  endpoint:
    path: /events/publish
    method: POST
    data_selector: key
    params: {}
- name: events-update
  endpoint:
    path: /events/update
    method: PUT
    data_selector: subject
    params: {}
- name: push_notification
  endpoint:
    path: /push/notifications
    method: POST
    data_selector: notification
    params: {}
- name: sms
  endpoint:
    path: /sms/send
    method: POST
    data_selector: message
    params: {}
- name: subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: GET
    data_selector: _id
- name: subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: PATCH
    data_selector: response
    params: {}
- name: delete_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: DELETE
    data_selector: acknowledged
    params: {}
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: GET
    data_selector: data
    params: {}
- name: subscribers
  endpoint:
    path: /v1/subscribers
    method: GET
    data_selector: records
- name: workflows
  endpoint:
    path: /v1/workflows
    method: GET
    data_selector: records
- name: credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: PUT
    data_selector: records
- name: subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: GET
    data_selector: data
    params: {}
- name: event_trigger
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: payload
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: POST
    data_selector: updated
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data
    params: {}
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
    params: {}
- name: subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: GET
    data_selector: global, workflows
    params:
      criticality: nonCritical
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: PATCH
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: PATCH
    data_selector: response
- name: inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: notifications
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: PATCH
    data_selector: credentials
    params: {}
- name: trigger_event
  endpoint:
    path: /v1/subscribers/<SUBSCRIBER_ID>/credentials
    method: PUT
    data_selector: ''
    params: {}
- name: subscribers
  endpoint:
    path: /v1/subscribers/<SUBSCRIBER_ID>/credentials
    method: PUT
    data_selector: credentials
    params: {}
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: PUT
    data_selector: channels
    params: {}
- name: email
  endpoint:
    path: /email/send
    method: POST
    data_selector: data
    params: {}
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: DELETE
    data_selector: ''
- name: mandrill
  endpoint:
    path: /api/1.0/messages/send.json
    method: POST
    data_selector: messages
- name: Email Webhook
  endpoint:
    path: /v1/email/webhook
    method: POST
    data_selector: data
- name: APNS
  endpoint:
    path: /v1/push/apns
    method: POST
    data_selector: data
- name: FCM
  endpoint:
    path: /v1/push/fcm
    method: POST
    data_selector: data
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: GET
    data_selector: data
    params:
      page: '0'
      limit: '10'
      read: 'true'
      seen: 'true'
- name: sender_id
  endpoint:
    path: /api/sender_ids
    method: POST
    data_selector: sender_ids
    params: {}
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: POST
    data_selector: attributes
- name: whatsapp_messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: mark_as_read
  endpoint:
    path: /v1/subscribers/string/messages/mark-as
    method: POST
    data_selector: response
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
- name: schedule
  endpoint:
    path: /schedule
    method: GET
    data_selector: schedule
- name: retrieve_subscriber_notifications
  endpoint:
    path: /api-reference/subscribers/retrieve-subscriber-notifications
    method: GET
- name: update_all_notifications_state
  endpoint:
    path: /api-reference/subscribers/update-all-notifications-state
    method: POST
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
    params: {}
- name: schedule
  endpoint:
    path: /useSchedule
    method: GET
    data_selector: schedule
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: POST
    data_selector: response
    params: {}
- name: schedule
  endpoint:
    path: /schedule
    method: POST
    data_selector: schedule
    params: {}
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: PATCH
    data_selector: isOnline
- name: trigger_event
  endpoint:
    path: /v1/events/trigger
    method: POST
    data_selector: acknowledged
    params: {}
- name: topic
  endpoint:
    path: /api-reference/topics/topic-schema
    method: GET
    data_selector: records
- name: subscriber
  endpoint:
    path: /api-reference/subscribers/subscriber-schema
    method: GET
    data_selector: records
- name: bulk_trigger_event
  endpoint:
    path: /v1/events/trigger/bulk
    method: POST
    data_selector: response
    params: {}
- name: topic
  endpoint:
    path: /v2/topics
    method: POST
    data_selector: _id
    params:
      failIfExists: true
- name: broadcast_event
  endpoint:
    path: /v1/events/trigger/broadcast
    method: POST
    data_selector: acknowledged
    params: {}
- name: topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: GET
    data_selector: _id
    params: {}
- name: cancel_triggered_event
  endpoint:
    path: /v1/events/trigger/{transactionId}
    method: DELETE
    data_selector: response
- name: subscriber
  endpoint:
    path: /api-reference/subscribers/subscriber-schema
    method: GET
    data_selector: records
    params: {}
- name: topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: PATCH
    data_selector: _id
    params: {}
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: DELETE
- name: subscriber
  endpoint:
    path: /v2/subscribers
    method: POST
    data_selector: data
    params:
      failIfExists: 'true'
- name: topics
  endpoint:
    path: /v2/topics
    method: GET
    data_selector: data
    params:
      limit: 100
- name: subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: GET
    data_selector: _id
- name: topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: POST
    data_selector: data
    params: {}
- name: subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: PATCH
    data_selector: null
    params: {}
- name: delete_subscriber
  endpoint:
    path: /v2/subscribers/{subscriberId}
    method: DELETE
    data_selector: acknowledged
    params: {}
- name: delete_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: DELETE
    data_selector: data
    params: {}
- name: topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: GET
    data_selector: data
    params:
      after: string
      before: string
      limit: '100'
      orderDirection: ASC
      orderBy: string
      includeCursor: 'true'
      subscriberId: string
- name: subscribers
  endpoint:
    path: /v2/subscribers
    method: GET
    data_selector: data
    params:
      after: string
      before: string
      limit: '0'
      orderDirection: ASC
      orderBy: string
      includeCursor: true
      email: string
      name: string
      phone: string
      subscriberId: string
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: GET
    data_selector: response
    params: {}
- name: subscriber_subscriptions
  endpoint:
    path: /v2/subscribers/{subscriberId}/subscriptions
    method: GET
    data_selector: data
    params: {}
- name: notification_event
  endpoint:
    path: /api-reference/notifications/notification-event-schema
    method: GET
- name: workflow
  endpoint:
    path: /api-reference/workflows/workflow-schema
    method: GET
- name: channel_type_enum
  endpoint:
    path: /api-reference/notifications/channeltypeenum
    method: GET
- name: notifications
  endpoint:
    path: /v1/notifications
    method: GET
    data_selector: records
    params:
      limit: 10
- name: bulk_create_subscribers
  endpoint:
    path: /v1/subscribers/bulk
    method: POST
    data_selector: created
    params: {}
- name: subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: GET
    data_selector: global, workflows
    params:
      criticality: nonCritical
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data
    params:
      channels: in_app
      page: 0
      limit: 10
- name: update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences
    method: PATCH
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: GET
    data_selector: null
    params: {}
- name: bulk_update_subscriber_preferences
  endpoint:
    path: /v2/subscribers/{subscriberId}/preferences/bulk
    method: PATCH
    data_selector: response
    params: {}
- name: update_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: PATCH
    data_selector: credentials
- name: notifications
  endpoint:
    path: /v1/notifications/string
    method: GET
    data_selector: _id
- name: upsert_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials
    method: PUT
    data_selector: body
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: POST
    data_selector: null
    params: {}
- name: delete_provider_credentials
  endpoint:
    path: /v1/subscribers/{subscriberId}/credentials/{providerId}
    method: DELETE
- name: workflow
  endpoint:
    path: /workflows
    method: POST
    data_selector: workflow
    params:
      active: false
      isTranslationEnabled: false
- name: workflow
  endpoint:
    path: /workflows
    method: POST
    data_selector: workflow
    params: {}
- name: retrieve_subscriber_notifications
  endpoint:
    path: /v1/subscribers/{subscriberId}/notifications/feed
    method: GET
    data_selector: data
    params:
      page: 0
      limit: 10
- name: ChatStepResponse
  endpoint:
    path: /chat/step/response
    method: GET
    data_selector: controls
- name: DelayStepResponse
  endpoint:
    path: /delay/step/response
    method: GET
    data_selector: controls
- name: DigestStepResponse
  endpoint:
    path: /digest/step/response
    method: GET
    data_selector: controls
- name: CustomStepResponse
  endpoint:
    path: /custom/step/response
    method: GET
    data_selector: controls
- name: update_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-as
    method: POST
    data_selector: attributes
- name: workflows
  endpoint:
    path: /workflows
    method: POST
    data_selector: workflow
    params: {}
- name: messages
  endpoint:
    path: /v1/subscribers/string/messages/mark-as
    method: POST
    data_selector: response
    params: {}
- name: workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: GET
    data_selector: workflowDetails
    params:
      environmentId: string
- name: subscriber_notifications
  endpoint:
    path: /api-reference/subscribers/retrieve-subscriber-notifications
    method: GET
    data_selector: notifications
    params: {}
- name: update_notifications_state
  endpoint:
    path: /api-reference/subscribers/update-all-notifications-state
    method: POST
    data_selector: notifications
    params: {}
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
    params: {}
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: ChatStepResponse
  endpoint:
    path: /chat/step/response
    method: GET
    data_selector: controls
    params: {}
- name: DelayStepResponse
  endpoint:
    path: /delay/step/response
    method: GET
    data_selector: controls
    params: {}
- name: DigestStepResponse
  endpoint:
    path: /digest/step/response
    method: GET
    data_selector: controls
    params: {}
- name: CustomStepResponse
  endpoint:
    path: /custom/step/response
    method: GET
    data_selector: controls
    params: {}
- name: update_all_notifications_state
  endpoint:
    path: /v1/subscribers/{subscriberId}/messages/mark-all
    method: POST
    data_selector: response
- name: update_subscriber_online_status
  endpoint:
    path: /v1/subscribers/{subscriberId}/online-status
    method: PATCH
    data_selector: isOnline
- name: workflows
  endpoint:
    path: /workflows/string
    method: GET
    data_selector: records
    params:
      environmentId: string
- name: create_a_topic
  endpoint:
    path: /api-reference/topics/create-a-topic
    method: POST
- name: retrieve_a_topic
  endpoint:
    path: /api-reference/topics/retrieve-a-topic
    method: GET
- name: list_all_topics
  endpoint:
    path: /api-reference/topics/list-all-topics
    method: GET
- name: workflow
  endpoint:
    path: /workflows/retrieve
    method: GET
    data_selector: data
    params: {}
- name: topic
  endpoint:
    path: /v2/topics
    method: POST
    data_selector: ''
    params:
      failIfExists: 'true'
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: PUT
- name: topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: GET
    data_selector: _id
    params: {}
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: PATCH
    data_selector: _id
    params: {}
- name: chat_step
  endpoint:
    path: /chat/step
    method: GET
    data_selector: controls
- name: delay_step
  endpoint:
    path: /delay/step
    method: GET
    data_selector: controls
- name: digest_step
  endpoint:
    path: /digest/step
    method: GET
    data_selector: controls
- name: custom_step
  endpoint:
    path: /custom/step
    method: GET
    data_selector: controls
- name: delete_topic
  endpoint:
    path: /v2/topics/{topicKey}
    method: DELETE
- name: workflow
  endpoint:
    path: /v2/workflows/string
    method: PUT
    data_selector: workflow
    params: {}
- name: topics
  endpoint:
    path: /v2/topics
    method: GET
    data_selector: data
    params:
      limit: 100
- name: create_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: POST
    data_selector: data
    params: {}
- name: workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: DELETE
    params: {}
- name: delete_topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: DELETE
    data_selector: data
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
    data_selector: workflows
    params:
      limit: number
      offset: number
      orderDirection: string
      orderBy: string
      query: string
      tags: array<string>
      status: array<string>
- name: topic_subscriptions
  endpoint:
    path: /v2/topics/{topicKey}/subscriptions
    method: GET
    data_selector: data
    params: {}
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: PUT
    data_selector: sync workflow details
    params:
      targetEnvironmentId: required
- name: check_topic_subscriber
  endpoint:
    path: /v1/topics/{topicKey}/subscribers/{externalSubscriberId}
    method: GET
    data_selector: records
    params: {}
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
    params: {}
- name: workflow
  endpoint:
    path: /sync/workflow
    method: GET
    data_selector: response
    params: {}
- name: notification_event
  endpoint:
    path: /api-reference/notifications/notification-event-schema
    method: GET
    data_selector: notification_event
- name: workflow
  endpoint:
    path: /api-reference/workflows/workflow-schema
    method: GET
    data_selector: workflow
- name: ChatStepResponse
  endpoint:
    path: ChatStepResponse
    method: GET
- name: DelayStepResponse
  endpoint:
    path: DelayStepResponse
    method: GET
- name: DigestStepResponse
  endpoint:
    path: DigestStepResponse
    method: GET
- name: CustomStepResponse
  endpoint:
    path: CustomStepResponse
    method: GET
- name: notifications
  endpoint:
    path: /v1/notifications
    method: GET
    data_selector: events
    params:
      limit: 10
- name: workflows
  endpoint:
    path: /v2/workflows/string/sync
    method: PUT
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data
    params:
      channels: in_app
      page: 0
      limit: 10
- name: retrieve_workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: GET
    data_selector: controls
    params: {}
- name: retrieve_event
  endpoint:
    path: /v1/notifications/{notificationId}
    method: GET
    data_selector: event details
- name: translation
  endpoint:
    path: /v2/translations
    method: POST
    data_selector: resourceId
    params: {}
- name: notifications
  endpoint:
    path: /notifications/string
    method: GET
    data_selector: _id
- name: translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: GET
    data_selector: content
    params:
      resourceType: workflow
      resourceId: welcome-email
      locale: en_US
- name: event
  endpoint:
    path: /events
    method: GET
    data_selector: data
- name: translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: DELETE
    data_selector: Empty
    params: {}
- name: workflow
  endpoint:
    path: /api-reference/workflows/workflow-schema
    method: GET
- name: workflows
  endpoint:
    path: /v2/workflows
    method: POST
- name: translation_group
  endpoint:
    path: /v2/translations/group/{resourceType}/{resourceId}
    method: GET
    data_selector: resource
    params:
      resourceType: workflow
      resourceId: welcome-email
- name: workflow
  endpoint:
    path: /workflows
    method: POST
    data_selector: created
    params: {}
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: translation_group
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}
    method: DELETE
    params: {}
- name: import_master_translations
  endpoint:
    path: /v2/translations/master-json
    method: POST
    data_selector: success
    params: {}
- name: workflows
  endpoint:
    path: /workflows
    method: POST
    data_selector: name
    params: {}
- name: master_translations
  endpoint:
    path: /v2/translations/master-json
    method: GET
    data_selector: workflows
    params:
      locale: en_US
- name: environment
  endpoint:
    path: /api-reference/environments/environment-schema
    method: GET
    data_selector: resources
    params: {}
- name: workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: GET
    params:
      environmentId: string
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
    params: {}
- name: environment
  endpoint:
    path: /v1/environments
    method: POST
    data_selector: data
    params: {}
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: workflow_preferences
  endpoint:
    path: /workflow/preferences
    method: GET
    data_selector: user
    params: {}
- name: environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
- name: workflows
  endpoint:
    path: /workflows/string
    method: GET
    data_selector: records
    params:
      environmentId: string
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
    data_selector: Empty
    params: {}
- name: environments
  endpoint:
    path: /v1/environments
    method: GET
    data_selector: response
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: data
    params: {}
- name: environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: GET
    data_selector: response
    params: {}
- name: update_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: PUT
    data_selector: workflow
    params: {}
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: messages
  endpoint:
    path: /api-reference/messages/list-all-messages
    method: GET
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: messages
    params:
      page: 0
      limit: 10
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params:
      pageSize: pageSize
      page: page
- name: PushControl
  endpoint:
    path: /push/control
    method: POST
    data_selector: controls
- name: StepIssues
  endpoint:
    path: /step/issues
    method: GET
    data_selector: issues
- name: ChatStepResponse
  endpoint:
    path: /chat/step/response
    method: GET
    data_selector: controls
- name: DelayStepResponse
  endpoint:
    path: /delay/step/response
    method: GET
    data_selector: controls
- name: DigestStepResponse
  endpoint:
    path: /digest/step/response
    method: GET
    data_selector: controls
- name: CustomStepResponse
  endpoint:
    path: /custom/step/response
    method: GET
    data_selector: controls
- name: WorkflowPreferences
  endpoint:
    path: /workflow/preferences
    method: GET
    data_selector: user
- name: workflow
  endpoint:
    path: /workflows/string
    method: PUT
    data_selector: payload
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params:
      channel: in_app
      subscriberId: string
      transactionId: string
      page: 0
      limit: 10
- name: delete_workflow
  endpoint:
    path: /v2/workflows/{workflowId}
    method: DELETE
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: DELETE
    data_selector: acknowledged
    params: {}
- name: workflows
  endpoint:
    path: /v2/workflows
    method: GET
    data_selector: workflows
    params:
      limit: number
      offset: number
      orderDirection: string
      orderBy: string
      query: string
      tags: array
      status: array
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: DELETE
    params:
      channel: string
- name: integration
  endpoint:
    path: /api-reference/integrations/integration-schema
    method: GET
    data_selector: records
- name: credentials
  endpoint:
    path: /api-reference/integrations/credentials
    method: GET
    data_selector: records
- name: sync_workflow
  endpoint:
    path: /v2/workflows/{workflowId}/sync
    method: PUT
    data_selector: workflow details
    params:
      targetEnvironmentId: required
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
    params: {}
- name: integration
  endpoint:
    path: /v1/integrations
    method: POST
    data_selector: response
    params: {}
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: PUT
    data_selector: credentials
    params: {}
- name: workflows
  endpoint:
    path: /workflows/string/sync
    method: PUT
    data_selector: ''
- name: integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: integrations
  endpoint:
    path: /integrations
    method: GET
    data_selector: response
- name: workflow
  endpoint:
    path: /services/data/v1/workflows/sync
    method: POST
    data_selector: data
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: GET
    data_selector: response
- name: retrieve_workflow_step
  endpoint:
    path: /v2/workflows/{workflowId}/steps/{stepId}
    method: GET
    data_selector: controls
    params: {}
- name: update_integration_as_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: POST
- name: translations
  endpoint:
    path: /v2/translations
    method: POST
    data_selector: resourceId
    params: {}
- name: translation
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: GET
    data_selector: resourceId
    params: {}
- name: translations
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}/{locale}
    method: DELETE
    params: {}
- name: translation_group
  endpoint:
    path: /v2/translations/group/{resourceType}/{resourceId}
    method: GET
    data_selector: resourceId
    params: {}
- name: delete_translation_group
  endpoint:
    path: /v2/translations/{resourceType}/{resourceId}
    method: DELETE
    data_selector: ''
- name: import_master_translations
  endpoint:
    path: /v2/translations/master-json
    method: POST
    data_selector: success
    params: {}
- name: master_translations
  endpoint:
    path: /v2/translations/master-json
    method: GET
    data_selector: workflows
- name: environment
  endpoint:
    path: /api-reference/environments/environment-schema
    method: GET
    data_selector: resources
    params: {}
- name: environments
  endpoint:
    path: /v1/environments
    method: POST
    data_selector: ''
    params: {}
- name: environments
  endpoint:
    path: /v1/environments/{environmentId}
    method: PUT
    data_selector: body
- name: delete_environment
  endpoint:
    path: /v1/environments/{environmentId}
    method: DELETE
    data_selector: Empty
    params: {}
- name: environments
  endpoint:
    path: /v1/environments
    method: GET
    data_selector: response
- name: environment_tags
  endpoint:
    path: /v2/environments/{environmentId}/tags
    method: GET
    data_selector: response
- name: message
  endpoint:
    path: /api-reference/messages/message-schema
    method: GET
- name: workflow
  endpoint:
    path: /api-reference/workflows/workflow-schema
    method: GET
- name: messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: messages
    params:
      limit: 10
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params:
      channel: in_app
      subscriberId: string
      transactionId: string
      page: 0
      limit: 10
- name: delete_message
  endpoint:
    path: /v1/messages/{messageId}
    method: DELETE
    params: {}
- name: delete_messages_by_transactionId
  endpoint:
    path: /v1/messages/transaction/{transactionId}
    method: DELETE
    data_selector: Empty
    params:
      channel: string
- name: create_integration
  endpoint:
    path: /api-reference/integrations/create-an-integration
    method: POST
- name: list_integrations
  endpoint:
    path: /api-reference/integrations/list-all-integrations
    method: GET
- name: update_integration
  endpoint:
    path: /api-reference/integrations/update-an-integration
    method: PUT
- name: delete_integration
  endpoint:
    path: /api-reference/integrations/delete-an-integration
    method: DELETE
- name: integrations
  endpoint:
    path: /v1/integrations
    method: POST
    data_selector: ''
    params: {}
- name: integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: PUT
    data_selector: credentials
    params: {}
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integrationId}
    method: DELETE
- name: integrations
  endpoint:
    path: /v1/integrations
    method: GET
    data_selector: response
- name: active_integrations
  endpoint:
    path: /v1/integrations/active
    method: GET
    data_selector: response
    params: {}
- name: update_integration_as_primary
  endpoint:
    path: /v1/integrations/{integrationId}/set-primary
    method: POST
notes:
- The open-source notification infrastructure that simplifies in-app, email, chat,
  and push notifications.
- Requires a single HTTP webhook-like endpoint to be exposed by your application.
- Use environment variables for credentials in production environments
- Each environment contains independent workflows, environment-specific subscribers,
  topics, separate integrations and credentials, and API keys for secure access.
- Workflows can be created and managed via code.
- A subscriber must exist in Novu before sending notifications.
- Subscribers can have the same email address but must have a unique subscriberId.
- Topics support up to 100,000 subscribers.
- Workflow events are created for each subscriber in a topic.
- Integrations are configured connections to third-party services that deliver notifications.
- Each environment has a mix of isolated resources and assets that can be published
  from Development.
- Data in one environment has no connection to data in another.
- The trigger event initiates the processing of notifications for subscribers.
- Subscribers can set global channel preferences which override individual settings.
- Currently, we do not support using a different delivery provider for each tenant.
- We don't support specifying different workflow preferences for each tenant.
- To secure your webhook endpoint, you should verify the webhook signature using the
  Svix library.
- 'Responses timing out: We will consider any message that fails to send a response
  within 15 seconds a failed message.'
- Keyless mode lets you test the look and features of the Inbox component instantly
  in your application, no setup required.
- Data is temporary (expires in 24h) and not tied to real subscribers.
- Build a fully custom notification inbox with the headless version of Novu's inbox
  notification package.
- Users on a paid plan can remove the 'Inbox by Novu' branding from the Inbox UI.
- The @novu/react package introduces a more flexible and customizable way to display
  notifications in your application.
- The new package offers more flexibility in handling notifications and integrating
  with third-party libraries.
- It is optimized for performance and provides a smoother user experience.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Supports subscriber preference management
- Can be triggered via API calls, events, or scheduled operations
- Notification severity lets you classify workflows based on their importance level.
- Uses OAuth2 with refresh token — requires setup of connected app in Novu
- In free plan, only one layout can be created per environment. In pro and higher
  plans, upto 100 layouts can be created per environment.
- Novu performs actions based on channel step execution conditions.
- Delay steps can be inserted at any stage of your workflow execution, they can happen
  after or before any action.
- Changing the step content after triggering the workflow with delay step will not
  affect the existing pending delayed notification content.
- The digest engine collects multiple trigger events, aggregates them into a single
  message, and delivers that new payload to the next workflow step.
- Conditions can leverage subscriber-related fields to tailor notifications based
  on user-specific data.
- Conditions can depend on custom payload data passed during the workflow trigger
  call.
- Tags act like labels or categories that help you organize and manage notifications
  in your app.
- Translations feature is in beta and available on Team and Enterprise plans.
- Overrides interact directly with provider SDKs, ensure they are configured correctly.
- This feature is available only in Novu cloud. This feature will not work in community
  self hosted version and local environment.
- This provider should not be used in production or staging environments.
- Requires configuration of sender name and from email address for email providers.
- Novu supports multiple active providers for push channel.
- Advanced user authentication capabilities are supported.
- Only members with the Owner role can invite or manage members.
- Users who are approved will be added to your organization and assigned the Viewer
  role by default.
- Manage your billing and payment information, view invoices, and upgrade your subscription
  plan.
- This feature is only available to Enterprise customers on our Cloud platform.
- To enable SAML SSO for your account, please reach out to your account manager or
  contact us at sales@novu.co.
- You can find the applicationIdentifier in the Novu Dashboard under the API keys
  page.
- Connect your JS/TS app to Novu via the Typescript SDK.
- Connect your Python app to Novu via the Python SDK.
- Connect your Golang app to Novu via the Go SDK.
- Connect your PHP app to Novu via the PHP SDK.
- Novu runs all your requests in the context of an environment.
- Users requiring custom limits can contact support for further assistance.
- If you pass a subscriberId that does not exist yet, Novu will automatically create
  a new subscriber with that ID.
- Ensure your provider name does not conflict with existing providers.
- A provider can have more than one credential as per its SDK requirements.
- 'Feature flag environment variable accepts boolean values: `true` or `false`.'
- We have used pnpm package manager in this guide. You can use npm as well.
- A credential can be made secret by adding in ./secure-credentials.ts
- Use environment variables for sensitive credentials.
- Attempting to use the API in client-side applications will result in CORS errors.
- Ensure to set NOVU_SECRET_KEY in your environment variables.
- It's recommended to store your secret key securely, e.g., in environment variables.
- Ensure to create or update subscribers for notifications.
- Notifications can be sent through multiple channels including chat and SMS.
- Only one credential `apiKey` is used for the `example-provider`.
- Self-hosting is a great way to rapidly test new custom providers or to test your
  contributions.
- Ensure you have created an app in your team.
- Once you've generated your API Key, wait about 3 minutes before testing it.
- Your involvement in shaping the future of our notification infrastructure solution
  is highly encouraged.
- 'Feature flag environment variable accepts boolean values: true or false.'
- It's important to note that our API and backend SDK are intended for use exclusively
  in server-side applications. Attempting to use them in a client-side application
  will result in Cross-Origin Resource Sharing (CORS) errors.
- It is advised not to hardcode your credentials in a file in production environments.
  Use environment variables instead.
- Use the secret key from environment variable 'NOVU_SECRET_KEY' for authentication.
- Attempting to use the API in a client-side application will result in CORS errors.
- Ensure the workflow ID corresponds to an existing, active workflow in your Novu
  dashboard.
- Deepgram requires an API key for authentication.
- Ensure audio files are in a supported format for transcription.
- Requires setup of API key in environment variables
- Requires setup of connected app in Deepgram
- Ensure audio quality is sufficient for accurate transcription
- In this guide, we have used only one credential `apiKey` for our `example-provider`.
  This is for reference purposes only. A provider can have more than one credential
  as per its `SDK` requirements.
- The bridge url must be publicly accessible. It's recommended to have https enabled.
- Attempting to use API in a client-side application will result in CORS errors.
- It is advised not to hardcode your credentials in a file in production environments.
- Webhook url should accept POST request.
- Ensure the workflow ID corresponds to an existing, active workflow in Novu dashboard.
- Getting the code the run at a checked out version can be tricky
- Some migrations may fail because they rely on the underlying code rather than direct
  mongo queries
- Uses retry logic for network issues or brief API unavailability
- Requires API key for authentication
- The bridge url must be publicly accessible.
- Use webhook integrations for real-time notifications.
- Ensure workflowId exists in your Novu dashboard.
- You can create Novu workflows entirely in code
- You can inject custom code that does nearly anything you can imagine as part of
  a Novu workflow
- Your code-based workflow lives alongside your application code in source control
- You can hydrate notification content using local data-sources, reducing what you
  need to sync outside of your IT boundary
- Ensure subscriber data is up-to-date to avoid notification issues.
- Novu does not automatically run database migrations when deploying new versions.
- For Novu Cloud, migrations are run by Novu team through a custom deployment service
  on AWS.
- For Novu Self-Hosting, migrations can be run locally against MongoDB using known
  connection strings.
- Migrations are manual.
- Requires valid MongoDB credentials and network access.
- Novu does not use a versioning or idempotent migration strategy.
- Some migrations may fail because they rely on the underlying code rather than direct
  mongo queries.
- Use environment variables for credentials in production environments.
- Some migrations require REDIS (ensure already running)
- Some migrations require NEW_RELIC (so turn off)
- Run each script only once. Monitor logs or database changes for success.
- Ensure the workflowId corresponds to an existing, active workflow in your Novu dashboard.
- If a subscriber with the provided subscriberId doesn't exist, Novu will auto-create
  the subscriber.
- Providers allow us to handle message delivery over multiple channels.
- API and backend SDK are intended for use exclusively in server-side applications.
- Ensure to replace 'your-workflow-id' with actual workflow ID in the task.
- Payload structure should match the expected variables in the Novu workflow.
- Ensure user data is synchronized with subscriber data in Novu.
- Local Studio currently works only in the Chrome browser.
- Uses API key for authentication — ensure the key is stored securely
- Dynamic content can be included in payloads using Handlebars syntax
- Some migration scripts require access to Redis during execution.
- Always back up your database before running migrations.
- Consider scripting or CI/CD automation for repeatability.
- Dockerized deployments do not auto-run migrations—there is no explicit configuration
  to turn this on either.
- Requires audio files to be in WAV format for transcription
- Provider requires API key for integration
- We recommend having at least 8GB of RAM to run Novu on a local machine as Novu has
  multiple services running together with external services like redis, mongodb etc.
- The bridge url must be publicly accessible. We recommend having https enabled for
  the bridge url.
- Use environment variables for API Key in production.
- Local Studio currently works only in the Chrome browser
- Novu does not implement a versioning system or record migration history in the database.
- 'No version provided. Please choose one:'
- Invalid selection.
- Ensure workflow ID corresponds to an existing workflow in Novu dashboard.
- If a subscriber ID does not exist, Novu will create one automatically.
- Webhook URL should accept POST request.
- Never deploy Novu setup using default secrets.
- Requires setup of API key for authentication
- Handles audio transcription with Deepgram API
- Use environment variables to store credentials securely.
- Some migrations do not exit fully when run in the bash script (eg < 0.19.0) and
  require Ctrl-C to finish and continue.
- Not all migrations are fully documented in the release notes for each release.
- Migrations are dependent on the underlying code (eg repositories) and matches the
  version of the code against the migration at the right point in time is crucial.
- Some objects like Contact may return nulls in deeply nested fields
- Webhook URL should accept POST requests.
- Uses API key for authentication
- Ensure to handle API limits and retry logic
- The system processes the video using Deepgram's API
- Changing the step content after triggering the workflow with digest step will not
  affect the existing digested events.
- Migrations are manual and must be run from an environment that has access to the
  migration scripts.
- Some migrations require REDIS to be running during execution.
- Update the `.env` file with your own secrets.
- The database is in the same machine as the servers.
- Update the .env file with your own secrets.
- Feature flags allow to turn certain functionality on and off based on configuration.
- Only one credential `apiKey` is used for `example-provider`.
- It's important to note that our API and backend SDK are intended for use exclusively
  in server-side applications.
- Ensure workflow IDs correspond to existing workflows in your Novu dashboard.
- If a subscriberId doesn't exist, Novu will auto-create the subscriber.
- Multiple retries are configured for notification tasks
- If a subscriber with the specified subscriberId doesn't exist, Novu will create
  one automatically.
- Ensure to create or update a subscriber in Novu when a user signs up or becomes
  eligible for notifications.
- Uses Novu API for notifications
- Ensure to handle retries for transient errors
- Changing the step content after triggering the workflow with a delay step will not
  affect the existing pending delayed notification content.
- Ensure to create subscribers before triggering notifications.
- Success may also require the Redis instance to be running during execution.
- Self-hosting Novu provides full control and flexibility over your notification infrastructure.
- Ensure the bridge endpoint is publicly accessible and has HTTPS enabled.
- Changing the step content after triggering the workflow will not affect existing
  notifications.
- The above specifications are general recommendations. Adjust them based on your
  system load, usage patterns, and scale of operations.
- Uses API key for authentication — ensure the API key is set in the environment variables.
- Requires valid API key for authentication
- Ensure workflow ID corresponds to an existing, active workflow in your Novu dashboard.
- If a subscriber with this subscriberId doesn't exist, Novu will auto-create it.
- Retry logic is implemented for resilience against transient network issues
- Use the large-2x preset for faster processing.
- Novu Framework requires a single HTTP webhook-like endpoint to be exposed by your
  application.
- Success may also require the Redis instance to be running during execution for some
  migrations.
- Self-hosting Novu does not support GitHub login. To access your account, please
  use the email and password associated with your Novu account.
- Every provider requires some credentials to create an instance.
- Ensure that the workflow ID corresponds to an existing, active workflow in your
  Novu dashboard.
- Requires a valid NOVU_SECRET_KEY for authentication.
- Ensure proper setup of Deepgram for video transcription.
- Ensure workflow ID corresponds to an existing, active workflow in Novu dashboard.
- If a subscriber with the provided subscriberId doesn't exist, Novu will create one
  automatically.
- The bridge URL must be publicly accessible.
- Uses a single HTTP endpoint to receive events.
- Uses Novu for notification workflows
- Handles audio transcription from video files.
- Migrations are manual and must be tracked by the user.
- Ensure Redis is running for certain migrations.
- Self-hosting Novu does not support GitHub login.
- Telemetry data collection is anonymized.
- Telemetry sharing is optional and can be disabled via the Admin Settings or environment
  variable.
- The old Web UI dashboard is compatible with the new v2 API.
- Your webhook url should accept POST request.
- Fork the novu repository and clone it in your local machine.
- Use the above command at the root of the project.
- Uses pnpm package manager in this guide.
- Attempting to use the API in a client-side application will result in Cross-Origin
  Resource Sharing (CORS) errors.
- If a subscriber with the given subscriberId doesn't exist, Novu will auto-create
  it when the workflow is triggered.
- Uses API key for authentication — requires setup of the API key in environment variables
- Uses API key for authentication.
- Ensure to handle audio extraction and conversion to WAV format before sending to
  Deepgram.
- Migrations are manual and must be run from an environment with access to the migration
  scripts.
- Some migrations require access to Redis during execution.
- Novu Framework requires a single HTTP webhook-like endpoint (/api/novu or similar)
  to be exposed by your application.
- Telemetry data is anonymized.
- Success of this process requires cloning the git repository and setting up the projects
  from source before starting migrations.
- Do not use local tunnel in production environment.
- The old Web UI dashboard is compatible with the new v2 API
- Telemetry data is optional and can be disabled.
- The old Web UI is compatible with the v2 API.
- If a subscriber with the provided subscriberId doesn't exist, Novu will automatically
  create one.
- Uses API key for authentication — ensure the key is set in environment variables
- Ensure this workflow ID corresponds to an existing, active workflow in your Novu
  dashboard.
- Changing the step content after triggering the workflow will not affect the existing
  pending notifications.
- Retry logic is implemented for transient errors.
- Requires API key for authentication.
- Ensure audio files are in supported formats.
- 'Warning: some migrations do not exit fully when run in the bash script and require
  Ctrl-C to finish and continue.'
- 'Warning: not all migrations are fully documented in the release notes for each
  release.'
- The bulk API is limited to 100 events per request.
- Using a previously generated transactionId during the event trigger will cancel
  any active or pending workflows.
- In this guide, we have used only one credential `apiKey` for our `example-provider`.
- API and backend SDK are intended for server-side applications only.
- If a subscriber with the specified ID does not exist, Novu will auto-create it.
- Use pnpm package manager in this guide. You can use npm as well.
- Uses retry logic for resilience against transient network issues or brief API unavailability
- This workflow provides a complete solution for transcribing videos and keeping users
  informed about the process status, all while handling errors gracefully.
- Ensure workflow IDs correspond to existing workflows in Novu dashboard.
- If a subscriberId does not exist, Novu will automatically create one.
- Telemetry can be disabled using the NOVU_TELEMETRY environment variable.
- 'Warning: some migrations do not exit fully when run in the bash script ( eg < 0.19.0
  ) and require Ctrl-C to finish and continue.'
- Uses pnpm as the package manager for setup.
- Optional localstack is required only in S3 related modules.
- Self-hosting Novu does not support GitHub login. Use email and password for access.
- Use API key in the Authorization header as 'ApiKey <NOVU_SECRET_KEY>'
- Use the correct model for transcription based on the audio content
- Some migrations do not exit properly ( eg < 0.19.0 ) and require Ctrl-C to finish
  and continue.
- Uses pnpm package manager as shown in the guide.
- Ensure to set secure secrets in the .env file.
- Authentication requires an API key included in the Authorization header prefixed
  with 'ApiKey '
- Webhook notifications can be configured for API responses.
- Telemetry can be disabled via the NOVU_TELEMETRY environment variable.
- If a subscriber with this 'subscriberId' doesn't already exist in Novu, Novu will
  automatically create one when the workflow is triggered.
- Secret Hmac Key is used for data encryption with HMAC SHA256.
- Uses API key for authentication — ensure to set NOVU_SECRET_KEY in environment variables
- Adjust system specifications based on load and usage.
- Uses API key for authentication — ensure to set NOVU_SECRET_KEY in environment variables.
- Requires API Key for authentication
- Telemetry data collection is optional and can be disabled.
- Ensure subscriberId corresponds to an existing subscriber in Novu.
- Requires setup of Novu API key in environment variables
- Changing the step content after triggering the workflow with a digest step will
  not affect the existing digested events.
- Ensure to add all credentials carefully.
- Ensure to replace <your-docker-host> with your actual host address.
- Rate limits may apply depending on the plan
- subscriberId is a required field
- providerId is a required field in certain endpoints
- API and backend SDK are intended for use exclusively in server-side applications.
  Using them in client-side applications will result in CORS errors.
- Ensure subscriberId is unique within your system.
- Ensure video files are properly formatted for transcription.
- Handle audio quality issues to avoid transcription errors.
- Use pnpm package manager in this guide, but npm can also be used.
- Use environment variables to manage your credentials securely.
- Some features exclusive to Novu's cloud-managed solution will not be available in
  a self-hosted environment.
- Ensure the workflow ID corresponds to an existing workflow in your Novu dashboard.
- If a subscriber with the given subscriberId doesn't exist, Novu will auto-create
  it.
- Uses API key for authentication — ensure correct key is provided
- Some tasks may have retries for transient errors
- Handles transcription of audio from video files.
- Telemetry is optional and can be disabled via the Admin Settings.
- If a subscriber with the specified subscriberId doesn't exist, Novu will automatically
  create one.
- The bulk API is limited to 500 subscribers per request.
- Requires audio files to be in WAV format.
- Requires Node.js version v20.8.1, MongoDB, and Redis.
- If delay step fails, workflow execution will stop immediately.
- If digest step fails, workflow execution will stop immediately.
- The notification system is integrated with workflows
- The new Dashboard brings a cleaner, and more intuitive UI.
- Ensure to handle audio file format conversions before sending files for transcription.
- Rate limits may apply based on the API key used.
- Requires valid MongoDB credentials and network access for running migrations.
- Migrations are manual and must be run on a compatible environment.
- The new Dashboard is powered by v2 APIs.
- Ensure the webhook route is public by updating middleware.ts
- localtunnel links may expire quickly and sometimes face reliability issues
- By default, Clerk sends email notifications whenever necessary.
- To prevent users from receiving duplicate emails, disable email delivery for notifications
  handled by Novu.
- Ensure that your firewall rules allow traffic from the internet.
- The Novu CLI provides a mechanism for you to synchronize your workflows into Novu
  Cloud.
- Uses pnpm package manager in this guide. You can use npm as well.
- Use environment variables to store credentials in production environments.
- Uses API key for authentication — ensure to set the NOVU_SECRET_KEY environment
  variable.
- Transcription may fail due to audio quality issues.
- Ensure the webhook route is public by updating middleware.ts.
- The webhook event will trigger Novu workflows based on specific Clerk events.
- By default, Clerk sends email notifications whenever necessary, such as Magic Links
  for email verification, Invitations, Password Resets, and more.
- Clerk does not send duplicate emails when notifications are handled by Novu.
- Self-hosting Novu does not support GitHub login. Use email and password.
- The API and backend SDK are intended for use exclusively in server-side applications.
- Ensure workflow ID corresponds to an existing workflow in your Novu dashboard.
- Uses API key for authentication — requires setup of API key in environment variables
- Requires setup of connected app in api
- It is necessary to have https enabled for the bridge url.
- Migrations must be run from an environment that has access to the migration scripts.
- Some migrations do not exit fully when run in the bash script and require Ctrl-C
  to finish and continue.
- 'You can also clone this repository: https://github.com/novuhq/stripe-to-novu-webhooks'
- localtunnel links may expire quickly and sometimes face reliability issues.
- A user receives a notification when transcription is complete or if an error occurs
- The bridge url must be publicly accessible and should have https enabled.
- Each workflow has a unique identifier, supports environment syncing, and provides
  real-time visibility through the Activity Feed for monitoring and debugging.
- Dockerized deployments do not auto-run migrations.
- Ensure to use strong, unique secrets in your .env file
- Self-hosting Novu does not support GitHub login
- Ensure your firewall rules allow traffic from the internet.
- If a subscriber with the given subscriberId doesn't exist, it will be created automatically.
- Ensure API key is kept secure
- Notifications require valid email addresses
- This task downloads the video file, extracts audio, sends it for transcription,
  and stores the results in a database.
- Bridge Endpoint is used to receive events from the Worker Engine through an encrypted
  client-initiated tunnel.
- Telemetry data is collected for usage patterns but is anonymized.
- Requires setup of OAuth2 for authentication.
- Ensure to manage API key properly in your environment.
- If your application api server is running at URL https://api.domain.com and /api/novu
  endpoint is serving Novu workflows created using Novu Framework, then <YOUR_DEPLOYED_URL>in
  above command will be https://api.domain.com/api/novu
- Only one credential 'apiKey' is used for the example provider.
- If a subscriber with the specified subscriberId does not exist, Novu will auto-create
  the subscriber.
- Requires an API key for authentication
- If delay step fails, will the workflow continue to the next step? No, workflow execution
  will stop immediately if the delay step fails due to an error.
- Webhook events from Stripe trigger notification workflows in Novu.
- Make sure your selected name is not conflicting with our existing provider's name.
- Ensure workflowId corresponds to an existing, active workflow in your Novu dashboard.
- Requires setup of API key for authentication.
- Ensure correct workflow ID is used in the API calls.
- Requires an API key for authentication to access Deepgram's transcription services.
- Ensure to update the .env file with your own secrets.
- The setup may not be optimal for production.
- Ensure you have valid Stripe and Novu accounts.
- Webhook signature verification is necessary for security.
- Requires setup of API keys in Novu Cloud
- The '@novu/framework' SDK is compatible with Node.js version 20.0.0 and above.
- Headless version provides full control over the UI.
- Real-time notifications available through event listeners.
- If your Novu account is in the EU region, include the backendUrl and socketUrl props
  to connect to EU-specific API endpoints.
- Each subscriber must have a unique subscriberId.
- Topics can be managed from Novu dashboard or using Topics APIs.
- Webhooks require verifying the signature and timestamp when processing.
- Ensure to verify the webhook signature from Stripe.
- Webhook events include payment, subscription, or customer events.
- Ensure to configure your secret key for authentication.
- For EU customers, set NOVU_API_URL to 'https://eu.api.novu.co'.
- Ensure that the API key is included in the request headers.
- Handle potential errors gracefully to avoid user notification failures.
- Ensure the audio quality is sufficient for accurate transcription.
- EU region requires backendUrl and socketUrl to connect to specific API endpoints.
- 'Each environment has two unique identifiers: Application Identifier and API Secret
  Key.'
- Migrating from v0 to v2 requires manual recreation of workflows.
- Webhook signatures should be verified to ensure messages are sent by Novu.
- The demo email provider limits are 300 emails per organization per month, sent only
  to the logged-in user.
- Uses API key for authorization.
- Uses pnpm package manager — npm can also be used.
- Make sure to write the test for this new provider.
- Some endpoints require specific identifiers in the URL.
- Payload structures vary based on the type of notification
- Migrations do not implement a versioning or idempotent migration strategy.
- Integrates with Stripe to trigger Novu workflows on Stripe events.
- Direct integration with other CI/CD tools is on our roadmap. If you would like to
  see a specific CI/CD tool integrated, please reach out to us.
- Add NOVU_SECRET_KEY environment variable to your .env
- This feature is available to users on the Team and Enterprise pricing plans, and
  it is supported on both the new dashboard and the legacy dashboard.
- Uses API keys for production environment.
- Each integration is scoped to a specific environment such as development, staging,
  or production.
- Integrations require credentials to authenticate with third-party providers.
- Webhooks are processed by returning a 2xx response within 15 seconds.
- Disable CSRF protection for the webhook endpoint.
- Requires setup of connected app in Novu
- Ensure to handle rate limits and pagination
- Webhooks trigger notification workflows whenever specific events occur in external
  applications.
- Changing the step content after triggering the workflow with digest step will not
  affect the existing pending delayed notification content.
- Webhook events from Stripe can trigger notification workflows in Novu.
- Novu Framework operates in a GitOps model.
- Requires setup of API keys in the Novu Dashboard
- Lightweight solution gives full control over the UI.
- Real-time notifications are emitted when notifications are received.
- Each integration is scoped to a specific environment—such as development, staging,
  or production.
- Webhook responses must return a 2xx status code within 15 seconds.
- Workflows can be synced between environments.
- Workflows have unique identifiers that are immutable after creation.
- If a subscriberId doesn't exist, Novu will automatically create one when the workflow
  is triggered.
- Ensure to handle audio file format appropriately before sending for transcription.
- Migrations must be run manually.
- Some migrations require Redis to be running.
- This integration triggers Novu workflows for any Stripe event, including payment,
  subscription, or customer events.
- Novu requires a secret key for authentication.
- Ensure your firewall allows traffic from the internet.
- Use @novu/react Inbox component for notifications.
- Use @novu/js for headless notification management.
- Use the API keys for your selected production environment from the API Keys page.
- Each integration is scoped to a specific environment.
- Each subscriber is uniquely identified by a subscriberId.
- Webhook endpoint should return a 2xx response within 15 seconds.
- CSRF protection should be disabled for webhook endpoints.
- Uses pnpm package manager — npm can be used as well.
- Ensure workflow ID corresponds to an existing workflow in the Novu dashboard.
- Requires the setup of an API key for authorization.
- Ensure audio is in a supported format for transcription.
- Novu Cloud workers will need to be able to communicate with your Bridge Endpoint.
- HMAC Verification is turned on by default for all production NODE_ENV environments.
- Add `NOVU_SECRET_KEY` environment variable to your `.env`
- Notifications may have variable structure based on user settings
- Webhook endpoint must return a 2xx response within a reasonable time-frame (15s).
- Transcription may fail if audio quality is low.
- The Novu API is idempotent for existing subscriberIds.
- Customize event mappings in the EVENT_TO_WORKFLOW_MAPPINGS variable.
- Some migrations require Redis to be running during execution.
- Ensure Novu Cloud workers can communicate with your Bridge Endpoint.
- Novu requires the `class-validator-jsonschema` package to generate JSON schemas
  from your DTOs.
- Svelte application default port is 5173.
- Use the headless version of Novu's inbox notification package for full control over
  the UI.
- Subscribers must be created before triggering workflows.
- Webhook messages must be acknowledged with a 2xx response within 15 seconds.
- If you pass a `subscriberId` that does not exist yet, Novu will automatically create
  a new subscriber with that ID.
- Some tasks may return nulls in deeply nested fields
- The API requires an API key for authentication.
- Email Channel is a critical component for delivering notifications reliably.
- Bridge URL must be publicly accessible.
- Requires Stripe account and Novu account.
- Ensure to handle errors and retry logic for reliable delivery.
- Requires setup of an API key from the Novu dashboard.
- Use your application identifier and subscriber ID when initializing the Novu client
- Keyless mode allows testing of the Inbox component with temporary data.
- Webhook endpoints must respond with a 2xx status code within 15 seconds.
- Uses pnpm package manager for setup
- A provider can have more than one credential as per its SDK requirements
- This integration will automatically trigger notification workflows when any Stripe
  event occurs.
- Ensure to set up the API key and environment variables correctly.
- Twilio integration requires a Twilio account and valid API keys.
- Some features may vary based on the plan.
- The Dev Studio will be started by default on port 2022
- Supports OAuth2 for authentication.
- Ensure to set up the application in the Novu Dashboard.
- All information collected from self-hosted instances is completely anonymized.
- This API provides methods for fetching, managing, and receiving real-time notifications.
- Ensure to configure the correct environment before deploying to production.
- Webhook response must be a 2xx status code within 15 seconds.
- Webhook signatures must be verified for security.
- Digest times are in UTC time.
- Each environment includes one default layout, but you can create additional layouts
  based on your needs.
- In free plan, only one layout can be created per environment. In pro and higher
  plans, up to 100 layouts can be created per environment.
- With Pull to Refresh is implemented using the refetch function.
- Disabling content sanitization can expose your application to Cross-Site Scripting
  (XSS) attacks.
- Use environment variables to store API keys in production environments.
- Ensure you have a Stripe account and a Novu account.
- Novu will auto-create the subscriber if the subscriberId doesn't exist.
- Requires setup of connected app in Novu.
- Requires setup of API key in the environment.
- Requires setup of API key in the environment variables
- The endpoint path can be customized but must be used in the bridge url.
- Use the API keys for your selected production environment from the API Keys page
  in your application.
- Without additional security, a malicious actor could potentially guess another subscriber's
  subscriberId.
- Recommended to update .env file with your own secrets.
- Webhook messages should return a 2xx status code within 15 seconds.
- It is important to disable CSRF protection for webhook endpoints if applicable.
- Requires setup of API keys in Novu dashboard
- Default and targeted locales can be configured on the translation page.
- Custom data can be sent with notifications.
- Supports localization for notification keys.
- By default, Novu sanitizes the subject and body of all in-app step notifications
  to ensure that they are safe to display.
- Webhook events can trigger notifications for payment, subscription, or customer
  events.
- OAuth2 with refresh token requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- If a subscriber with this subscriberId doesn't exist, Novu will auto-create them.
- Ensure to configure the NOVU_SECRET_KEY in your environment.
- Requires setup of API keys and workflows in Novu
- Notifications may vary based on the successful or erroneous completion of tasks
- Uses Deepgram API for transcription tasks.
- Some migrations require REDIS (ensure already running).
- Use OAuth2 with refresh token for authentication.
- Notifications are emitted in real-time.
- Telemetry data is collected but anonymized.
- Ensure that subscriberId and applicationIdentifier match the configuration for your
  chosen production environment.
- You must configure separate integrations for each environment.
- Workflows can be triggered by external events.
- Each workflow has a unique identifier.
- Requires setup in Novu dashboard for integration.
- Each layout must include the {{content}} variable.
- Requires setup of push provider credentials.
- Ensure to handle authentication tokens properly.
- The Novu Inbox component is designed to be fully themeable and adaptable to your
  application’s visual language.
- Styles remain encapsulated and do not leak into global stylesheets
- No additional setup is required to manage scoped styling
- Snooze is supported in client-side SDKs starting from version 3.3.0 and is only
  available for cloud workspaces.
- Multiple active providers for push channel are supported.
- Ensure compliance with country-specific restrictions for sender IDs.
- The `seen()` method is only available on individual notification instances, not
  on the `novu.notifications` object.
- Ensure firewall rules allow traffic from the internet for Novu Cloud workers.
- You can find the `applicationIdentifier` in the Novu Dashboard under the [API keys
  page](https://dashboard.novu.co/api-keys).
- The `subscriberId` is the unique identifier of the user in your application.
- Ensure to set up your API keys in the Novu Dashboard.
- 'Data is stored using TTL values: Notifications (for 1 month), Jobs (for 1 month),
  Message (for in-app messages - 12 months, for all other messages - 1 month), Execution
  details (for 1 month).'
- If you want to delete any specific data or information, reach out to support@novu.co.
- We highly appreciate it if someone shares security vulnerabilities with us.
- Uses webhook URL for Discord integration.
- Webhook endpoints must return a 2xx response within 15 seconds.
- If a subscriber with this subscriberId doesn't exist in Novu, it will be auto-created.
- Currently, there are no notifications until triggered from the dashboard.
- Every layout must include the {{content}} variable.
- In free plan, only one layout can be created per environment.
- The translations feature is in beta and available on Team and Enterprise plans.
- Some migrations do not exit fully when run in the bash script ( eg < 0.19.0 ) and
  require Ctrl-C to finish and continue.
- Disabling content sanitization can expose your application to Cross-Site Scripting
  (XSS) attacks. You should only enable this feature if you completely trust the source
  of your notification data and have full control over the trigger payload.
- The appearance prop allows for theming and styling of the Inbox component.
- Ensure compliance with country-specific restrictions for sender IDs when using SMS.
- Some providers may require additional configuration for sending notifications.
- Use `novu.notifications.seenAll()` for bulk operations
- Uses NovuProvider component to provide context for inbox hooks
- Use subscriber ID to identify users.
- Ensure to include application identifier for API calls.
- Uses Discord Webhook integration for sending notifications.
- Use pnpm package manager for installation.
- If a subscriber with this subscriberId doesn't already exist in Novu, Novu will
  automatically create one.
- Sample application will create an .env file containing the NOVU_SECRET_KEY environment
  variable
- Requires video file URL for transcription
- Notification objects may contain null values for certain fields
- Ensure to enable HMAC encryption for security when using the Inbox.
- Environment variables should be used to store sensitive keys.
- Return a 2xx response to indicate webhook processing
- Disable CSRF protection for webhook endpoints
- This guide uses @novu/js javascript sdk to build the Inbox component in Vue. Novu
  currently does not support native Vue Inbox component.
- Payload variables are not supported in layouts because one layout can be used across
  multiple workflows and workflows can have strict payload schema validation.
- Translations feature is currently not supported in layouts. We are working on it
  and will update this section when it is available.
- Global preferences override individual workflow preferences.
- Grouping preference is supported in client-side SDKs starting from version 3.4.0.
- In-app notifications and notifications from critical workflows are never paused
  and will always be delivered, regardless of schedule settings.
- The SMS channel is not enabled by default. Configure a provider to use it.
- Use an API key for authentication.
- API key must be included in the request header as 'ApiKey {apiKey}'.
- Webhook events should include the correct event type to trigger the corresponding
  workflow.
- Ensure that the ACCESS_KEY_ID and ACCESS_SECRET_KEY values are correct and have
  the necessary permissions.
- HMAC Verification is turned on by default for all production NODE_ENV environments
- Requires setup of NOVU_SECRET_KEY environment variable.
- Use your preferred framework or templating logic to render the notifications.
- Ensure to replace 'your-workflow-id' with the actual workflow ID when triggering.
- Ensure proper configuration for production environment.
- Use applicationIdentifier and subscriberId for real-time notifications.
- Ensure audio file is in WAV format for transcription
- Notifications represent the complete journey of a message triggered by an event
  in your application.
- Each notification encapsulates a set of properties that describe its creation, context,
  execution, and result.
- Webhook endpoint must return a 2xx response within 15 seconds.
- Disable CSRF protection for webhook endpoints.
- Ensure to replace <your-docker-host> with your actual Docker host address.
- Translations feature is currently in beta and available on Team and Enterprise plans.
- Global preferences apply across all workflows.
- Workflow marked as 'critical' cannot be disabled by the user.
- By default, the Email channel is enabled and configured with Novu's default provider.
- The Chat channel is not enabled by default.
- The SMS channel is not enabled by default. To use it, configure a provider like
  Twilio, Nexmo, or others, and ensure compliance with country-specific restrictions
  for sender IDs.
- Verify the webhook signature for security.
- Process all relevant Stripe event types to trigger Novu workflows.
- Due to the latest regulatory changes regarding SPAM rules and email fraud, it is
  needed to authenticate the sender's identity before sending emails on a large scale.
- This feature is available to users on the Team and Enterprise pricing plans.
- Notifications may include nulls in certain fields.
- Uses Deepgram API for video transcription.
- Webhook endpoint should return a 2xx status code to indicate successful processing.
- Verify webhook signatures to ensure messages are sent by Novu.
- Novu currently does not support native Vue Inbox component.
- Translations feature is currently not supported in layouts.
- The notification title and body are required fields.
- Localization only updates the UI text in the Inbox.
- The data object supports only scalar values, such as strings, numbers, booleans,
  or null.
- Email channel is enabled by default with Novu's default provider
- Snooze duration depends on the cloud workspace plan
- Integration identifier is similar to Provider identifier but it is different than
  Provider Id.
- Notifications can be marked as seen or read through specific methods.
- The `seen()` method is only available on individual notification instances.
- Novu supports Webhook integration for Discord, Mattermost, and MS Teams.
- Supports various Stripe events for notifications.
- SES account needs to be verified before sending emails.
- Requires setup of IAM account with permissions.
- By default, Stripe sends email notifications whenever necessary, such as subscription
  created, updated, and more.
- Requires setup of connected app in Mandrill
- Ensure to verify ownership of sending domain
- The sample application will create an .env file containing the NOVU_SECRET_KEY environment
  variable required for securing your endpoint.
- Ensure you have created an app in your team before generating API keys.
- After generating your API Key, wait about 3 minutes before testing it.
- 'Data is stored using the following TTL values: Notifications (for 1 month), Jobs
  (for 1 month), Message (for in-app messages - 12 months, for all other messages
  - 1 month), Execution details (for 1 month), Subscribers, workflows, feeds, layouts
  (not deleted automatically, can be deleted by the user at any time).'
- Without additional security, a malicious actor could potentially guess another subscriber's
  subscriberId and use your public applicationIdentifier to view that user's notifications.
- The NovuProvider is the top-level component that provides the Novu instance.
- Changes to preferences are automatically synchronized with the server and will affect
  future notifications immediately.
- Subscriber preferences can be retrieved and updated using APIs.
- Changes to schedules are automatically synchronized with the server and will affect
  notification delivery times immediately.
- Webhook endpoint must respond with a 2xx status code within 15 seconds.
- Some notifications may have delays based on user settings
- Subscriber schema includes attributes like firstName, lastName, email, phone.
- subscriberId is a required field, rest other fields are optional, if the subscriber
  already exists, it will be updated
- Localization only updates the UI text in the Inbox. It doesn’t translate the content
  of your notifications.
- 'API key authentication. Allowed headers-- ''Authorization: ApiKey <api_key>''.'
- The data object supports only scalar values, such as strings, numbers, booleans,
  or null. String values are limited to 256 characters. There is a limit of 10 data
  object properties per in-app step.
- The data object is included in the client response. Avoid storing sensitive information,
  such as API keys or passwords, in notification.data. Workflow trigger payload may
  contain sensitive information, so avoid using the complete payload in the data object.
  Use only required and insensitive payload data in the data object.
- The SMS channel is not enabled by default.
- Notifications can be marked as seen or read, with specific methods for each.
- The 'seen' method is available only on individual notification instances.
- 'Allowed headers-- "Authorization: ApiKey <api_key>".'
- Ensure you have created an app in your team before generating an API key.
- To send WhatsApp messages, prefix the phone number with 'whatsapp:'.
- Requires idempotency-key header for requests.
- All systems operational
- 'API key authentication. Allowed headers-- "Authorization: ApiKey <api_key>".'
- This action is irreversible and will remove all subscriptions to the topic.
- subscriberId is a required field, rest other fields are optional
- If the subscriber already exists, it will be updated
- Max subscriberIds is 100
- subscriberId is a required field, rest other fields are optional.
- Uses API key authentication
- The search is case sensitive and supports pagination.
- This API supports filtering by channels, templates, emails, subscriberIds, transactionId,
  topicKey.
- 'API key authentication. Allowed headers-- Authorization: ApiKey <api_key>.'
- Allows updating multiple workflow preferences in a single request
- Maximum 100 items in preferences array
- Default page size is 10, maximum is 100
- Uses OAuth2 for authentication
- Subscriber can subscribe to multiple topics.
- API key authentication is required.
- Uses idempotency key for requests
- Notification event contains workflow details, subscriber details, payload sent during
  trigger, execution details.
- The API does not require authentication.
- Ensure the OAuth2 setup is correctly configured to access events
- Requires setup of connected app in novu
- If locale is not provided, exports organization default locale
- This action is irreversible and will remove the environment and all its associated
  data.
- Each channel step in the workflow generates a message.
- Requires a valid API key for accessing workflows.
- Uses OAuth2 for authorization
- Message is a single notification that is sent to a subscriber.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '409 Conflict: Subscriber already exists.'
- '400 Bad Request: Invalid input data.'
- '400 Bad Request: Check your request format and required fields.'
- '404 Not Found: Verify the resource or endpoint you''re trying to access.'
- 'Not using the raw payload body: This is the most common issue.'
- 'Missing the secret key: Remember that keys are unique to endpoints.'
- 'Sending the wrong response codes: Make sure to use the right response status codes.'
- No, workflow execution will stop immediately if the delay step fails due to an error.
- 300 emails per organization per month, and those can be only sent to the current
  logged in user.
- 'Invalid API Key: Check the API key provided.'
- 'Unauthorized: Ensure proper authentication.'
- 'Rate limit exceeded: Reduce the frequency of requests.'
- Subscriber does not have a configured channel.
- Subscriber does not have a configured channel
- Webhook URL for the chat channel is missing
- Subscriber does not have an active integration
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Common errors can be found in the additional resources section.
- 'Authentication errors: Verify API key is valid and has no extra spaces'
- 'Empty results: Check you''re using the correct region (US/EU)'
- 'Connection issues: Restart your AI assistant after configuration changes'
- 'Webhook URL for the chat channel is missing: Ensure that the correct webhook URL
  is configured for the subscriber’s chat provider.'
- 'All chat channels failed to send the message: Check the individual chat provider
  configurations and logs.'
- 'Subscriber is missing a phone number: Update the subscriber profile with a valid
  phone number.'
- 'Subscriber does not have an active integration: Configure the appropriate chat
  or push provider in the integration store.'
- 'Subscriber does not have a configured channel: Ensure the subscriber is mapped
  to an integration that supports the desired channel.'
- 'Message content could not be generated: Review the content in the step editor and
  ensure it contains valid syntax and characters.'
- 'Novu''s provider limit has been reached: Upgrade to a production provider or reset
  the limit for testing.'
- 'Bridge execution failed: Verify that the bridge URL is correctly set and publicly
  accessible.'
- Common errors can be referenced in the Novu documentation.
- '400 Bad Request: Check your input parameters.'
- '404 Not Found: Ensure the provider exists.'
- 'RateLimit-Exceeded: Too many requests in a given time frame.'
- '400 Bad Request: Check the payload structure for missing required fields.'
- '401 Unauthorized: Verify the API key is correctly set in the Authorization header.'
- '404 Not Found: Ensure the endpoint is correct and the resource exists.'
- '400 Bad Request: Check the request payload for missing or invalid fields.'
- '401 Unauthorized: Verify the API key and permissions.'
- '404 Not Found: Ensure the endpoint exists and is correctly specified.'
- '401 Unauthorized: Recheck API Key or permissions'
- '404 Not Found: Check the endpoint URL'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- 'RateLimit-Remaining: Indicates the remaining number of request tokens in the current
  window.'
- 'RateLimit-Limit: Indicates the total number of request tokens available in the
  current window.'
- 'RateLimit-Reset: Indicates the number of seconds until the current window resets
  and the request token limit is fully replenished.'
- '400 Bad Request: Check the request payload for required fields.'
- '401 Unauthorized: Ensure the API Key is correct and set in the headers.'
- 'RateLimit-Exceeded: Too many requests sent in a given time frame.'
- '401 Unauthorized: Check your API key or secret key.'
- '404 Not Found: Verify the endpoint path and resource.'
- '401 Unauthorized: Check your API key and permissions.'
- '422 Unprocessable Entity: Verify audio file format and parameters.'
- '400 Bad Request: Check the payload structure'
- '401 Unauthorized: Recheck API key or permissions'
- '500 Internal Server Error: Retry later'
- '400 Bad Request: Check input formatting'
- '401 Unauthorized: Verify API key validity'
- '500 Internal Server Error: Retry the request'
- 'RateLimit-Exceeded: Too many requests in a given timeframe'
- 'Unauthorized: Check API Key validity'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check the request payload for missing required fields.'
- '404 Not Found: The subscriberId does not exist in Novu.'
- '500 Internal Server Error: An unexpected error occurred on the server.'
- 'Unknown error: Check logs for details'
- CORS errors when attempting to use API in client-side applications.
- '400 Bad Request: Check request payload for validity'
- '404 Not Found: Check if the workflowId is correct.'
- '400 Bad Request: Ensure all required fields are included in the request.'
- 'ECONNREFUSED 127.0.0.1:6379: Some migration scripts require access to Redis during
  execution.'
- CORS errors when used in client-side applications.
- '400 Bad Request: Check the payload structure and required fields.'
- '401 Unauthorized: Verify your API key and permissions.'
- '404 Not Found: Confirm the endpoint and resource exist.'
- CORS errors will occur if used in client-side applications.
- '400 Bad Request: Validate your request body and parameters.'
- '400 Bad Request: Check payload format and required fields.'
- '401 Unauthorized: Verify API key and permissions.'
- '404 Not Found: Ensure the endpoint is correct.'
- '400 Bad Request: Check input parameters'
- '401 Unauthorized: Verify API key'
- '500 Internal Server Error: Retry the request after a brief wait'
- 'ECONNREFUSED 127.0.0.1:6379: Redis not running.'
- '400 Bad Request: Check the audio file format and parameters'
- '401 Unauthorized: Verify the API key'
- '429 Too Many Requests: Rate limit exceeded, try again later'
- 'Invalid API key: Check the key provided'
- 'Provider not found: Ensure the provider exists in the list'
- CORS errors when using the API in client-side applications.
- '401 Unauthorized: Check your API Key or permissions.'
- '404 Not Found: Ensure the specified workflow ID exists.'
- '401 Unauthorized: Check your API key or JWT secret.'
- 'INVALID_API_KEY: Ensure your API key is correct'
- 'NOT_FOUND: Verify the endpoint and parameters'
- '500 Internal Server Error: Try again later'
- 'INVALID_API_KEY: Recheck your API key'
- 'TRANSCRIPTION_ERROR: Check audio quality or format'
- '429 Too Many Requests: Rate limit exceeded. Check RateLimit-Remaining header.'
- 'INVALID_SUBSCRIBER_ID: Ensure the subscriber ID exists in Novu.'
- 'WORKFLOW_NOT_FOUND: Check if the specified workflow ID is correct.'
- '401 Unauthorized: Check the API key or token'
- '500 Internal Server Error: Retry the request after some time'
- '400 Bad Request: Check the input audio file format'
- '401 Unauthorized: Check your API key'
- '429 Too Many Requests: Rate limit exceeded'
- '401 Unauthorized: Recheck API key or access permissions'
- '400 Bad Request: Validate request parameters'
- 'ECONNREFUSED 127.0.0.1:6379: Some migrations require Redis to be running.'
- '400 Bad Request: Check the provider configuration and credentials.'
- 'CORS errors: Attempting to use the API in a client-side application'
- 'RateLimit-Reset: Indicates the number of seconds until the current window resets.'
- '400 Bad Request: Ensure all required fields are supplied.'
- '404 Not Found: Check if the workflow ID or subscriber ID is valid.'
- '401 Unauthorized: Verify the API key is correct and has the necessary permissions.'
- 'Unknown error: Handle unknown errors gracefully'
- 'Failed to send notification: Ensure the recipient details are correct'
- '400 Bad Request: Check if required fields are missing or incorrectly formatted.'
- '404 Not Found: The specified workflow ID does not exist.'
- If delay step fails, workflow execution will stop immediately.
- If digest step fails, workflow execution will stop immediately.
- '400 Bad Request: Check if required fields are missing'
- '401 Unauthorized: Recheck OAuth token or credentials'
- '404 Not Found: Check if the endpoint is correct'
- 'ECONNREFUSED 127.0.0.1:6379: Ensure Redis is running during migration execution.'
- 'CORS_ERROR: Attempting to use the API in a client-side application'
- '400 Bad Request: Check the structure of your request payload.'
- '404 Not Found: Ensure the workflow ID is correct and exists.'
- '401 Unauthorized: Check the API key and its permissions.'
- 'CORS errors: Attempting to use them in a client-side application will result in
  Cross-Origin Resource Sharing (CORS) errors.'
- '400 Bad Request: Check the input data for errors.'
- '401 Unauthorized: Ensure the API key is valid.'
- '500 Internal Server Error: Try again later.'
- '400 Bad Request: Check payload structure and required fields.'
- '401 Unauthorized: Check API key or authentication method.'
- Unknown error triggering Novu
- Failed to send notification
- 'ECONNREFUSED: Ensure Redis is running during migration execution.'
- 'ECONNREFUSED 127.0.0.1:6379: Some migrations require Redis (ensure already running).'
- '401 Unauthorized: Check if the API key is correct.'
- '404 Not Found: Ensure the workflow ID is valid.'
- '401 Unauthorized: Check your API key.'
- '400 Bad Request: Ensure all required fields are provided.'
- '429 Too Many Requests: Throttle your requests to the API.'
- '401 Unauthorized: Invalid API key or missing authentication.'
- '404 Not Found: Specified workflow ID does not exist.'
- '400 Bad Request: Check the request payload'
- '401 Unauthorized: Invalid API key'
- '404 Not Found: The requested resource does not exist'
- '401 Unauthorized: Recheck API key'
- '500 Internal Server Error: Contact support'
- 'MIGRATION_FAILED: Check logs for specific migration errors.'
- 'ECONNREFUSED: Redis is not running'
- Some migrations do not exit properly and require Ctrl-C to finish and continue.
- '401 Unauthorized: Invalid API key or missing authorization.'
- '500 Internal Server Error: Check server logs for details.'
- 'RateLimit-Exceeded: Adjust your request rate to avoid limits.'
- 'Unknown error: Caught during API call; ensure error handling is robust'
- '401 Unauthorized: Check API key and permissions'
- '404 Not Found: Verify endpoint path'
- '401 Unauthorized: Check API key.'
- '400 Bad Request: Verify request parameters.'
- '401 Unauthorized: Check API key and permissions.'
- '400 Bad Request: Verify the audio format and request parameters.'
- '404 Not Found: The requested resource does not exist.'
- 'ECONNREFUSED: Redis is not running.'
- 'RateLimit-Policy: Defines the details of the applied rate limiting policy.'
- '404 Not Found: Check if the workflow ID is correct and active.'
- '400 Bad Request: Ensure the payload is correctly formatted.'
- '404 Not Found: Ensure the endpoint is correct'
- '400 Bad Request: Check the payload for required fields and data types.'
- '401 Unauthorized: Verify API key validity.'
- '500 Internal Server Error: Retry after a delay.'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Verify API key.'
- '429 Too Many Requests: Rate limit exceeded.'
- 'ECONNREFUSED 127.0.0.1:6379: Start Redis locally to avoid connection issues.'
- '400 Bad Request: Check the payload for required fields.'
- '404 Not Found: Confirm the specified workflow ID exists.'
- 'CORS_ERROR: Attempting to use API in client-side application.'
- '401 Unauthorized: Verify the API key and its configuration.'
- '401 Unauthorized: Check API Key.'
- '400 Bad Request: Invalid request format'
- '401 Unauthorized: Check your OAuth token and permissions.'
- '409 Conflict: Resource already exists or is in conflict.'
- ECONNREFUSED 127.0.0.1:6379
- '401 Unauthorized: Use an API key or check the secret key.'
- CORS errors when attempting to use the API in client-side applications.
- '400 Bad Request: Check the request payload structure'
- '401 Unauthorized: Recheck API key validity'
- '400 Bad Request: Check audio format and parameters'
- '403 Forbidden: Invalid API key or insufficient permissions'
- '500 Internal Server Error: Retry the request later'
- '401 Unauthorized: Invalid API key or token.'
- '500 Internal Server Error: An unexpected error occurred.'
- 'RateLimit-Exceeded: Exceeded the maximum number of requests allowed.'
- '401 Unauthorized: Ensure the API key is valid and included in the request header.'
- '500 Internal Server Error: Retry the request or check server status.'
- Unknown error occurred
- '401 Unauthorized: Check your API key or ensure it''s set properly.'
- '401 Unauthorized: Ensure the API key is valid'
- '404 Not Found: Check the endpoint path'
- 'ECONNREFUSED 127.0.0.1:6379: Ensure Redis is running during execution.'
- 'RateLimit-Exceeded: Reduce the number of requests or wait until the rate limit
  resets.'
- '401 Unauthorized: Invalid API key or insufficient permissions.'
- '404 Not Found: Requested resource does not exist.'
- '400 Bad Request: Check required fields in the payload.'
- '401 Unauthorized: Ensure API key is correct.'
- '500 Internal Server Error: Retry the request or contact support.'
- '401 Unauthorized: Check API Key and permissions'
- '429 Too Many Requests: Throttle your requests'
- '404 Not Found: Verify the endpoint and resource ID.'
- 'ECONNREFUSED: Ensure Redis is running if required by migration.'
- 'Invalid feature flag: Check the feature flag name and ensure it is correctly spelled.'
- 'RateLimit-Exceeded: Reduce request frequency'
- '401 Unauthorized: Check API Key validity'
- '401 Unauthorized: Verify the API key and its permissions.'
- '404 Not Found: Endpoint may not exist'
- '500 Internal Server Error: Issue with Novu service'
- '401 Unauthorized: Invalid API key.'
- '404 Not Found: Resource not found.'
- 'ECONNREFUSED 127.0.0.1:6379: Ensure Redis is running.'
- '400 Bad Request: Check the request payload and parameters.'
- '401 Unauthorized: Ensure the API key is valid and included in the request.'
- '401 Unauthorized: Ensure the API key is valid and included in the header.'
- '404 Not Found: Verify the endpoint path and workflow ID.'
- '422 Unprocessable Entity: Check the payload structure'
- 'Invalid API key: Check your API key and try again.'
- 'Rate limit exceeded: Throttle your requests.'
- '401 Unauthorized: Check API key validity and permissions.'
- 'INVALID_API_KEY: Check the API key used for authentication.'
- 'TRANSCRIPTION_FAILED: Verify audio quality and format.'
- '429 Too Many Requests: You have exceeded your request limits.'
- '404 Not Found: Verify the workflow ID or subscriber ID.'
- '400 Bad Request: Ensure all required fields are provided in the request.'
- 'Error triggering Novu: Check the workflow ID and payload structure'
- 'Unknown error: Check the API integration and logs'
- 'ECONNREFUSED 127.0.0.1:6379: Some migrations require access to Redis during execution.'
- '400 Bad Request: Check the payload for missing required fields.'
- '401 Unauthorized: Ensure your API key is valid.'
- '400 Bad Request: Check the payload structure.'
- '500 Internal Server Error: Retry after some time.'
- '400 Bad Request: Check audio format or file size.'
- '429 Too Many Requests: Throttle your requests.'
- '401 Unauthorized: Recheck API key or its permissions.'
- '404 Not Found: Ensure the workflow ID exists.'
- '400 Bad Request: Check the audio file format or request parameters.'
- '401 Unauthorized: Verify the API key used for authentication.'
- '429 Too Many Requests: Implement exponential backoff for retries.'
- 'ECONNREFUSED: Ensure Redis is running if required by migration scripts.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '400 Bad Request: Invalid request parameters'
- '401 Unauthorized: Invalid or expired API key'
- '404 Not Found: Resource not found'
- '401 Unauthorized: Recheck API key or permissions.'
- '404 Not Found: Verify the endpoint path.'
- '401 Unauthorized: Check the API key and permissions.'
- '500 Internal Server Error: Retry the request after some time.'
- '400 Bad Request: Check if the audio file is in the correct format.'
- '401 Unauthorized: Verify your API key.'
- 'ECONNREFUSED: Redis is not running during migration execution.'
- CORS errors when using in a client-side application.
- '404 Not Found: Check if the workflow ID is correct.'
- '401 Unauthorized: Check your API key and permissions'
- '400 Bad Request: Ensure the payload structure is correct'
- '400 Bad Request: Check the request format and payload.'
- '401 Unauthorized: Verify your secret key and permissions.'
- '404 Not Found: Check the endpoint URL or resource ID'
- '400 Bad Request: Validate the input parameters'
- '401 Unauthorized: Verify API key and permissions'
- 'CORS_ERROR: Attempting to use them in a client-side application will result in
  Cross-Origin Resource Sharing (CORS) errors.'
- '400 Bad Request: Validate the payload structure and required fields.'
- '400 Bad Request: Check payload structure'
- '500 Internal Server Error: Retry after some time'
- '400 Bad Request: Check the request parameters and payload.'
- '404 Not Found: Verify the endpoint and resource availability.'
- '401 Unauthorized: Check your API key in the function settings.'
- '429 Too Many Requests: Implement retry logic for rate limits.'
- '500 Server Error: Check server status and logs for details.'
- Failed to send error notification
- '400 Bad Request: Check the request format and parameters'
- 'ECONNREFUSED 127.0.0.1:6379: Some migrations require Redis (on 127.0.0.1:6379)
  to be running.'
- '401 Unauthorized: Check your Novu API key.'
- 'Webhook verification failed: Ensure the signature is correct.'
- '401 Unauthorized: Recheck API key.'
- '401 Unauthorized: Check your API key or authentication method.'
- '404 Not Found: Ensure the workflowId is correct and active.'
- '400 Bad Request: Validate the input parameters.'
- '401 Unauthorized: Recheck API key validity.'
- '401 Unauthorized: Check your Novu API key and its permissions.'
- 'Webhook signature verification failed: Ensure the correct webhook secret is used.'
- '400 Bad Request: Invalid webhook URL or secret key.'
- '401 Unauthorized: Invalid HMAC signature.'
- CORS errors may occur when using the API in client-side applications.
- '401 Unauthorized: Check your Stripe secret key and webhook secret.'
- '400 Bad Request: Verify the structure of the webhook event.'
- '500 Internal Server Error: Check the server logs for more details.'
- '400 Bad Request: Check the webhook URL and HMAC key.'
- '401 Unauthorized: Ensure the signature is correct.'
- '401 Unauthorized: Verify API key in the headers.'
- '500 Internal Server Error: Retry the request after a short delay.'
- '400 Bad Request: Check the audio file format and parameters.'
- '400 Bad Request: Check request parameters.'
- '404 Not Found: Verify endpoint and resource IDs.'
- '500 Internal Server Error: Contact support if issues persist.'
- '400 Bad Request: Check the request payload format.'
- '401 Unauthorized: Ensure API key is valid.'
- 'CORS: Attempting to use them in a client-side application will result in Cross-Origin
  Resource Sharing (CORS) errors.'
- '400 Bad Request: Check your request payload for missing or incorrect fields.'
- '404 Not Found: Ensure the workflow ID is correct and exists in Novu.'
- '401 Unauthorized: Check your API key and its permissions.'
- '404 Not Found: Check if the endpoint and parameters are correct.'
- '400 Bad Request: Ensure that the request format is correct.'
- 'All chat channels failed to send the message: Check the individual chat provider
  configurations and logs to identify why each failed.'
- '408 Request Timeout: Ensure the endpoint responds within 15 seconds.'
- '401 Unauthorized: Check your authentication credentials'
- '404 Not Found: Verify the resource exists'
- 'CORS_ERROR: Attempting to use the API in a client-side application will result
  in CORS errors.'
- '400 Bad Request: Check the provided payload for required fields.'
- '401 Unauthorized: Ensure your API key is valid and included.'
- '401 Unauthorized: Check API key or permissions'
- 'ECONNREFUSED: If Redis is not running, some migrations will encounter this error.'
- All chat channels failed to send the message
- Subscriber is missing a phone number
- Message content could not be generated
- Novu's provider limit has been reached
- Bridge execution failed
- 'Failed to send webhook: Check if the endpoint is available and responding.'
- 'Invalid signature: Ensure the webhook signature is verified correctly.'
- 'Request timeout: Endpoint took too long to respond.'
- '400 Bad Request: Check your payload for missing required fields.'
- '401 Unauthorized: Verify that your API key is correct.'
- '401 Unauthorized: Ensure API key is valid'
- '400 Bad Request: Check request parameters'
- '400 Bad Request: Check the audio file format and ensure it''s supported.'
- 'ECONNREFUSED: Ensure Redis is running.'
- '401 Unauthorized: Invalid API key provided'
- '400 Bad Request: Check the request payload for errors.'
- '404 Not Found: Verify the endpoint and parameters.'
- 'Webhook delivery failed: Check endpoint availability and response codes.'
- 'Signature verification failed: Ensure raw payload is used and correct secret key.'
- 'CORS errors: Attempting to use them in a client-side application will result in
  CORS errors.'
- '404 Not Found: Workflow ID does not exist.'
- '400 Bad Request: Check the subscriber ID and required fields.'
- '400 Bad Request: Check audio format and parameters.'
- '401 Unauthorized: Verify API key is correct and has permission.'
- '429 Too Many Requests: Rate limit exceeded, try again later.'
- '401 Unauthorized: Double-check your Novu API key in the function settings'
- 'Workflow Not Triggering: Confirm the event name matches a key in EVENT_TO_WORKFLOW_MAPPINGS
  and the workflow exists in Novu'
- 'ECONNREFUSED: Ensure Redis is running during execution.'
- '401 Unauthorized: Check your secret key.'
- '500 Internal Server Error: Check server status or configurations.'
- '400 Bad Request: Verify the payload and headers.'
- '404 Not Found: Check the endpoint URL.'
- '429 Too Many Requests: Implement rate limiting.'
- '400 Bad Request: Check the provided data and ensure all required fields are included.'
- '401 Unauthorized: Verify the API key is valid and has the necessary permissions.'
- '401 Unauthorized: Check API key validity'
- '404 Not Found: Verify the endpoint'
- '400 Bad Request: Ensure the audio file is valid.'
- '500 Internal Server Error: Retry the request.'
- '401 Unauthorized: API key is missing or invalid'
- 'API error: Check Segment''s logs for detailed error messages'
- 'ECONNREFUSED: Redis is not available during migration execution.'
- 'Failed to send message: Ensure the endpoint is correct.'
- 'Invalid signature: Verify the payload exactly as sent.'
- '401 Unauthorized: Check API key'
- '404 Not Found: Verify endpoint paths'
- 'ECONNREFUSED: Some migrations require Redis (on 127.0.0.1:6379) to be running.'
- '401 Unauthorized: Check your Novu API key in the function settings.'
- 'Subscriber Not Created: Ensure userId is included in the identify event.'
- 'Workflow Not Triggering: Confirm the event name matches a key in EVENT_TO_WORKFLOW_MAPPINGS.'
- '401 Unauthorized: Invalid credentials or token expired'
- '400 Bad Request: Invalid payload or parameters.'
- '404 Not Found: Endpoint does not exist.'
- '404 Not Found: Verify endpoint paths.'
- '500 Internal Server Error: Contact support if persistent'
- '400 Bad Request: Check request parameters for correctness'
- '401 Unauthorized: Ensure your API key is valid'
- '404 Not Found: Verify the endpoint URL.'
- '429 Too Many Requests: Rate limit exceeded, retry after some time.'
- 'Message content could not be generated: Review the content in the step editor.'
- 'Novu''s provider limit has been reached: Upgrade to a production provider or reset
  the limit.'
- 'Bridge execution failed: Verify that the bridge URL is correctly set.'
- '401 Unauthorized: Recheck API key or credentials'
- 'Webhook endpoint failed: Check raw payload body and secret key.'
- 'Webhook response timed out: Ensure processing is asynchronous.'
- '401 Unauthorized: Verify your authentication credentials.'
- '404 Not Found: Ensure the resource exists.'
- '401 Unauthorized: Verify your Novu API key in the function settings.'
- 'Webhook signature verification failed: Check the signature and secret.'
- '400 Bad Request: Check the request parameters.'
- '400 Bad Request: Ensure the audio file format is supported'
- '429 Too Many Requests: Throttle requests as necessary'
- 'INVALID_SUBSCRIBER_ID: Check if the subscriberId is correct or exists.'
- 'AUTHENTICATION_FAILED: Verify API keys and permissions.'
- 'Webhook delivery failed: Ensure the endpoint is available and responding within
  the time limit.'
- 'Invalid signature: Check the secret key and ensure the raw payload is used for
  verification.'
- '401 Unauthorized: Recheck API keys or token expiration'
- '404 Not Found: Verify endpoint URL'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Ensure your OAuth token is valid.'
- 'RateLimit-Exceeded: Reduce the rate of requests'
- '400 Bad Request: Invalid data provided for creating a subscriber.'
- '401 Unauthorized: Verify your NOVU_SECRET_KEY.'
- '404 Not Found: Check the endpoint path.'
- '401 Unauthorized: Check your credentials and token expiration.'
- '404 Not Found: Ensure the endpoint exists.'
- '401 Unauthorized: Invalid API key or missing credentials'
- 'Unauthorized: Check your API keys or token'
- '401 Unauthorized: Check API key or token.'
- '404 Not Found: Verify endpoint URL.'
- Not using the raw payload body
- Missing the secret key
- Sending the wrong response codes
- Responses timing out
- '400 Bad Request: Check if the payload is in the correct format.'
- '404 Not Found: Ensure the workflow ID is correct.'
- '401 Unauthorized: Check your API key and token.'
- '500 Internal Server Error: Something went wrong on the server.'
- 'INVALID_REQUEST: Check the request parameters.'
- 'UNAUTHORIZED: Verify your authentication credentials.'
- 'Webhook signature verification failed: Ensure you are using the correct Stripe
  webhook secret.'
- '400 Bad Request: Verify your request format and parameters.'
- 'Webhook delivery failed: Check the endpoint and payload.'
- 'Authorization failed: Invalid API key.'
- '401 Unauthorized: Ensure your API key is correct and has the necessary permissions.'
- '400 Bad Request: Ensure all required fields are included'
- '422 Unprocessable Entity: Check the file format or audio quality'
- '400 Bad Request: Invalid parameter or request format.'
- '400 Bad Request: Check your request parameters'
- '404 Not Found: The requested resource could not be found'
- '401 Unauthorized: Check your API key or token.'
- '401 Unauthorized: Check API key validity.'
- '401 Unauthorized: Ensure subscriberId and applicationIdentifier are correct.'
- '403 Forbidden: Check for correct API key permissions.'
- '400 Bad Request: Invalid payload format'
- '404 Not Found: Endpoint not found'
- '400 Bad Request: Check the request body for proper formatting.'
- 'Subscriber does not have a configured channel: if the `from` field is missing /
  null / undefined.'
- '401 Unauthorized: Verify your Novu API key.'
- 'Error triggering notification: Check your payload structure and API key.'
- 'CORS error: Attempting to use the API in client-side application.'
- '404 Not Found: Verify the workflow ID and endpoint paths.'
- '401 Unauthorized: Recheck API key or token.'
- '401 Unauthorized: Check API key or authentication details.'
- '404 Not Found: Verify endpoint path.'
- '400 Bad Request: Check the audio file format and size'
- '401 Unauthorized: Verify API key is valid'
- '429 Too Many Requests: Rate limit exceeded, slow down requests'
- '400 Bad Request: Check your payload format.'
- '401 Unauthorized: Check your API key or OAuth token.'
- '401 Unauthorized: Check your Stripe secret key.'
- '400 Bad Request: Ensure the event data structure is correct.'
- 'RateLimit-Exceeded: Check your rate limits and reduce request frequency.'
- '401 Unauthorized: Ensure valid OAuth token'
- '400 BAD REQUEST: Check the request parameters.'
- '401 UNAUTHORIZED: Verify API key.'
- '500 INTERNAL SERVER ERROR: Try again later.'
- 'Failed to send: Check if the endpoint is available and correctly configured.'
- 'Invalid signature: Ensure the correct secret key is used for verification.'
- 'Timeout: Ensure the endpoint responds within 15 seconds.'
- '400 Bad Request: Check if required fields are missing.'
- '401 Unauthorized: Verify your API key or authentication token.'
- '404 Not Found: Check the endpoint and parameters.'
- '403 Forbidden: Check IAM permissions.'
- '400 Bad Request: Ensure correct API usage.'
- '401 Unauthorized: Check your API key or access permissions.'
- '404 Not Found: Ensure the endpoint URL is correct.'
- '201'
- '400'
- '401'
- '403'
- '404'
- '405'
- '409'
- '413'
- '414'
- '415'
- '422'
- '429'
- '500'
- '503'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Not Found'
- '201: Created'
- '400 Bad Request: Check if the subscriberId is provided'
- '404 Not Found: Check if the subscriberId exists'
- '400 Bad Request: Invalid input data'
- '403 Forbidden: Insufficient permissions'
- '404 Not Found: Subscriber not found'
- '400 Bad Request: Check query parameters'
- '404 Not Found: Verify endpoint'
- '400 Bad Request: Check query parameters for correctness'
- '401 Unauthorized: Ensure valid API key is provided'
- '404 Not Found: Verify the subscriberId exists'
- '405: Method Not Allowed'
- '409: Conflict'
- '413: Payload Too Large'
- '422: Unprocessable Entity'
- '429: Too Many Requests'
- '500: Internal Server Error'
- '404 Not Found: Verify subscriber ID.'
- 200 OK
- 400 Bad Request
- 401 Unauthorized
- 403 Forbidden
- 404 Not Found
- 405 Method Not Allowed
- 409 Conflict
- 413 Payload Too Large
- 414 URI Too Long
- 422 Unprocessable Entity
- 429 Too Many Requests
- 500 Internal Server Error
- 503 Service Unavailable
- '400 Bad Request: Invalid request format.'
- '404 Not Found: Subscriber not found.'
- '204'
- '400 Bad Request: Check request body for required fields'
- '200: OK'
- '503: Service Unavailable'
- '400 Bad Request: Check your request format'
- '404 Not Found: Verify the topicKey'
- 'SUBSCRIBER_NOT_FOUND: Subscriber with ID invalid-subscriber-id could not be found'
- '404 Not Found: Verify topicKey'
- '200'
- '404 Not Found: Verify subscriber ID'
- '204: No Content'
- '414: URI Too Long'
- '415: Unsupported Media Type'
- '401 Unauthorized: Recheck OAuth token'
- '401 Unauthorized: Recheck API key or token'
- '404 Not Found: Confirm the topicKey is correct'
- '400 Bad Request: Check parameters'
- '403 Forbidden: Access denied'
- 415 Unsupported Media Type
- '200: Success'
- '401 Unauthorized: Check your credentials and permissions'
- '400 Bad Request: Check request format and parameters'
- '401 Unauthorized: Recheck authorization token'
- '403 Forbidden: Verify permissions for the action'
- '404 Not Found: Ensure the resource exists'
- '404 Not Found: Integration not found'
- '400 Bad Request: Check input data'
- '404 Not Found: Environment ID does not exist'
- '400 Bad Request: Check your request payload for errors'
- '403 Forbidden: You do not have permission to access this resource'
auth_info:
  mentioned_objects:
  - Novu API
  - ApiKey
  - Subscriber
  - Notification
  - Novu
  - Deepgram
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuthToken
  - workflowId
  - JWT_SECRET
  - STORE_ENCRYPTION_KEY
  - REDIS_CACHE_SERVICE_HOST
  - REDIS_CACHE_SERVICE_PORT
  - HMAC SHA256
  - REDIS_HOST
  - User
  - subscriberId
  - ApiKeyDto
  - secret-key
  - bridge-url
  - HOST_NAME
  - Bridge Endpoint
  - Client
  - Webhook
  - Topic
  - NOVU_SECRET_KEY
  - NOVU_API_URL
  - Workflow
  - applicationIdentifier
  - API Key
  - ApplicationIdentifier
  - ChatOrPushProviderEnum
  - subscriber
  - NOVU_BRIDGE_URL
  - SubscriberId
  - Authorization
client:
  base_url: https://api.novu.co
  auth:
    type: oauth2
source_metadata: null
