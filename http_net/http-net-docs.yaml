resources:
- name: contacts
  endpoint:
    path: /contacts
    method: POST
    data_selector: response
    params: {}
- name: domains
  endpoint:
    path: /domains
    method: POST
    data_selector: response
    params: {}
- name: contactsFind
  endpoint:
    path: /contactsFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: contactInfo
  endpoint:
    path: /contactInfo
    method: POST
    data_selector: response
    params: {}
- name: contactCreate
  endpoint:
    path: /contactCreate
    method: POST
    data_selector: response
    params: {}
- name: contactUpdate
  endpoint:
    path: /contactUpdate
    method: POST
    data_selector: response
    params: {}
- name: domainsFind
  endpoint:
    path: /domainsFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: domainCreate
  endpoint:
    path: /domainCreate
    method: POST
    data_selector: response
    params: {}
- name: domainUpdate
  endpoint:
    path: /domainUpdate
    method: POST
    data_selector: response
    params: {}
- name: domainInfo
  endpoint:
    path: /domainInfo
    method: POST
    data_selector: response
    params: {}
- name: domainStatus
  endpoint:
    path: /domainStatus
    method: POST
    data_selector: responses
    params: {}
- name: domainDelete
  endpoint:
    path: /domainDelete
    method: POST
    data_selector: response
    params: {}
- name: domainWithdraw
  endpoint:
    path: /domainWithdraw
    method: POST
    data_selector: response
    params: {}
- name: domainTransfer
  endpoint:
    path: /domainTransfer
    method: POST
    data_selector: response
    params: {}
- name: domainTransferOutAck
  endpoint:
    path: /domain/v1/jsonxml/domainTransferOutAck
    method: POST
    data_selector: response
    params: {}
- name: domainTransferOutNack
  endpoint:
    path: /domain/v1/jsonxml/domainTransferOutNack
    method: POST
    data_selector: response
    params: {}
- name: domainRestore
  endpoint:
    path: /domain/v1/jsonxml/domainRestore
    method: POST
    data_selector: response
    params: {}
- name: domainCreateAuthInfo2
  endpoint:
    path: /domain/v1/jsonxml/domainCreateAuthInfo2
    method: POST
    data_selector: response
    params: {}
- name: jobsFind
  endpoint:
    path: /domain/v1/jsonxml/jobsFind
    method: POST
    data_selector: response
    params: {}
- name: zoneConfigsFind
  endpoint:
    path: /dns/v1/jsonxml/zoneConfigsFind
    method: POST
    data_selector: response
    params: {}
- name: recordsFind
  endpoint:
    path: /dns/v1/jsonxml/recordsFind
    method: POST
    data_selector: response
    params: {}
- name: zonesFind
  endpoint:
    path: /jsonxml/zonesFind
    method: POST
    data_selector: response.data
    params:
      filter.accountId: '150101000000001'
      limit: 10
      page: 1
- name: zoneCreate
  endpoint:
    path: /jsonxml/zoneCreate
    method: POST
    data_selector: response.records
    params: {}
- name: zoneRecreate
  endpoint:
    path: /zoneRecreate
    method: POST
    data_selector: response.records
    params:
      zoneConfig: zoneConfig
      records: list<Record>
      nameserverSetId: string
      useDefaultNameserverSet: bool
- name: zoneUpdate
  endpoint:
    path: /api/dns/v1/jsonxml/zoneUpdate
    method: POST
    data_selector: response.records
    params: {}
- name: recordsUpdate
  endpoint:
    path: /recordsUpdate
    method: POST
    data_selector: response.records
    params: {}
- name: resourceRecordSetUpdate
  endpoint:
    path: /resourceRecordSetUpdate
    method: POST
    data_selector: response
    params: {}
- name: zoneDelete
  endpoint:
    path: /zoneDelete
    method: POST
    data_selector: response
    params: {}
- name: zoneRestore
  endpoint:
    path: /zoneRestore
    method: POST
    data_selector: response
    params: {}
- name: zonePurgeRestorable
  endpoint:
    path: /zonePurgeRestorable
    method: POST
    data_selector: response
    params: {}
- name: changeContent
  endpoint:
    path: /changeContent
    method: POST
    data_selector: response
    params: {}
- name: zonesUntieFromTemplate
  endpoint:
    path: /zonesUntieFromTemplate
    method: POST
    data_selector: response
    params: {}
- name: zonesTieToTemplate
  endpoint:
    path: /zonesTieToTemplate
    method: POST
    data_selector: status
    params: {}
- name: nameserverSetsFind
  endpoint:
    path: /nameserverSetsFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: nameserverSetCreate
  endpoint:
    path: /nameserverSetCreate
    method: POST
    data_selector: response
    params: {}
- name: nameserverSetUpdate
  endpoint:
    path: /nameserverSetUpdate
    method: POST
    data_selector: response
    params: {}
- name: nameserverSetDelete
  endpoint:
    path: /nameserverSetDelete
    method: POST
    data_selector: status
    params: {}
- name: nameserverSetGetDefault
  endpoint:
    path: /nameserverSetGetDefault
    method: POST
    data_selector: response
    params: {}
- name: templatesFind
  endpoint:
    path: /templatesFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: recordTemplatesFind
  endpoint:
    path: /recordTemplatesFind
    method: POST
    data_selector: response.data
    params:
      limit: 10
      page: 1
- name: templateCreate
  endpoint:
    path: /templateCreate
    method: POST
    data_selector: response
    params: {}
- name: templateRecreate
  endpoint:
    path: /templateRecreate
    method: POST
    data_selector: response
    params: {}
- name: templateUpdate
  endpoint:
    path: /templateUpdate
    method: POST
    data_selector: response
    params: {}
- name: templateDelete
  endpoint:
    path: /templateDelete
    method: POST
    data_selector: status
    params:
      templateId: string
- name: certificatesFind
  endpoint:
    path: /certificatesFind
    method: POST
    data_selector: data
    params:
      limit: 10
      page: 1
      filter:
        field: accountId
        value: '35455111354542'
- name: domainApproverList
  endpoint:
    path: /domainApproverList
    method: POST
    data_selector: response
    params: {}
- name: csrDecode
  endpoint:
    path: /csrDecode
    method: POST
    data_selector: response.csr
    params: {}
- name: checkAutoValidationCapable
  endpoint:
    path: /checkAutoValidationCapable
    method: POST
    data_selector: errors
    params: {}
- name: orderCreate
  endpoint:
    path: /orderCreate
    method: POST
    data_selector: response
    params: {}
- name: orderCancel
  endpoint:
    path: /orderCancel
    method: POST
    data_selector: response
    params:
      certificateId: required
- name: certificateDetailsGet
  endpoint:
    path: /certificateDetailsGet
    method: POST
    data_selector: response
    params:
      certificateId: required
- name: certificateGet
  endpoint:
    path: /certificateGet
    method: POST
    data_selector: response
    params:
      certificateId: required
- name: orderResendApproverEmail
  endpoint:
    path: /orderResendApproverEmail
    method: POST
    data_selector: response
    params:
      certificateId: required
- name: certificateRevoke
  endpoint:
    path: /certificateRevoke
    method: POST
    data_selector: response
    params:
      certificateId: required
- name: certificateReissue
  endpoint:
    path: /certificateReissue
    method: POST
    data_selector: response
    params:
      certificateId: required
      csr: optional
- name: ImapMailbox
  endpoint:
    path: /mailboxCreate
    method: POST
    data_selector: response
    params: {}
- name: Forwarder
  endpoint:
    path: /mailboxCreate
    method: POST
    data_selector: response
    params: {}
- name: SmtpForwarder
  endpoint:
    path: /mailboxCreate
    method: POST
    data_selector: response
    params: {}
- name: mailboxCreate
  endpoint:
    path: /mailboxCreate
    method: POST
    data_selector: response
    params: {}
- name: mailboxCreate
  endpoint:
    path: /mailboxCreate
    method: POST
    data_selector: response
    params: {}
- name: mailboxUpdate
  endpoint:
    path: /mailboxUpdate
    method: POST
    data_selector: response
    params: {}
- name: mailboxesFind
  endpoint:
    path: /mailboxesFind
    method: POST
    data_selector: response
    params: {}
- name: mailboxDelete
  endpoint:
    path: /mailboxDelete
    method: POST
    data_selector: status
    params: {}
- name: mailboxDeletionCancel
  endpoint:
    path: /mailboxDeletionCancel
    method: POST
    data_selector: status
    params: {}
- name: mailboxRestore
  endpoint:
    path: /mailboxRestore
    method: POST
    data_selector: response
    params: {}
- name: mailboxPurgeRestorable
  endpoint:
    path: /mailboxPurgeRestorable
    method: POST
    data_selector: status
    params: {}
- name: checkEmailAddress
  endpoint:
    path: /checkEmailAddress
    method: POST
    data_selector: response
    params: {}
- name: domainSettingsFind
  endpoint:
    path: /domainSettingsFind
    method: POST
    data_selector: response
    params: {}
- name: domainSettingsUpdate
  endpoint:
    path: /domainSettingsUpdate
    method: POST
    data_selector: response
    params: {}
notes:
- Domains will always be created with transfer lock, regardless of which value is
  specified for transferLockEnabled in the request.
- Recreating an existing zone will cause it (ie. the zoneConfig and all records) to
  be deleted and then created anew with the values and records provided with the request.
- Uses API key for authentication
- Processing is asynchronous
- Uses API key for authentication.
- The SSL API is released as a beta and might have code breaking changes in further
  releases.
- To create a catchall mailbox the type parameter must be Catchall and all required
  properties must be set.
errors:
- '400: The HTTP request was malformed'
- '404: Method, format, or entry point not found'
- '500: Internal server error'
- '502: Server temporarily not available'
- '503: Server temporarily not available due to maintenance'
- '504: Backend timeout'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API key validity'
- 'status: success'
auth_info:
  mentioned_objects: []
client:
  base_url: https://partner.http.net/api
  auth:
    type: apikey
    location: header
    header_name: authToken
  headers:
    Accept: application/json
    Content-Type: application/json
source_metadata: null
