resources:
- name: patient_create_update
  endpoint:
    path: api/v2/patients
    method: POST
- name: retrieve_posted_patient
  endpoint:
    path: api/v2/patients/{patient_id}
    method: GET
- name: delete_patient
  endpoint:
    path: api/v2/patients/{particle_patient_id}
    method: DELETE
- name: list_patients
  endpoint:
    path: api/v2/patients
    method: GET
- name: create_update_patient
  endpoint:
    path: api/v2/patients
    method: POST
- name: retrieve_posted_patient
  endpoint:
    path: api/v2/patients/{patient_id}
    method: GET
- name: delete_patient
  endpoint:
    path: api/v2/patients/{particle_patient_id}
    method: DELETE
- name: list_patients
  endpoint:
    path: api/v2/patients
    method: GET
- name: patients
  endpoint:
    path: /patients
    method: GET
    data_selector: data
    params: {}
- name: medications
  endpoint:
    path: /medications
    method: GET
    data_selector: data
    params: {}
- name: patients
  endpoint:
    path: /reference/get_api-v1-patients-1
    method: GET
- name: documents
  endpoint:
    path: /reference/get_api-v1-documents-patient-id-1
    method: GET
- name: referrals
  endpoint:
    path: /reference/get_api-v1-referrals-1
    method: GET
- name: signature_keys
  endpoint:
    path: /reference/signaturekeys_getvalidsignaturekeys
    method: GET
- name: patients
  endpoint:
    path: /reference/post_api-v2-patients
    method: POST
- name: list_patients
  endpoint:
    path: /reference/get_api-v1-patients-1
    method: GET
- name: search_patients
  endpoint:
    path: /reference/post_api-v1-patients-search
    method: POST
- name: get_patient
  endpoint:
    path: /reference/get_api-v1-patients-id-1
    method: GET
- name: delete_patient
  endpoint:
    path: /reference/delete_api-v1-patients-id-1
    method: DELETE
- name: patients
  endpoint:
    path: /api/v1/patients
    method: GET
- name: documents
  endpoint:
    path: /api/v1/documents
    method: GET
- name: referrals
  endpoint:
    path: /api/v1/referrals
    method: GET
- name: patients
  endpoint:
    path: /reference/get_api-v1-patients-1
    method: GET
- name: documents
  endpoint:
    path: /reference/get_api-v1-documents-1
    method: GET
- name: referrals
  endpoint:
    path: /reference/get_api-v1-referrals-1
    method: GET
- name: patients
  endpoint:
    path: /reference/post_api-v2-patients
    method: POST
- name: list_patients
  endpoint:
    path: /reference/get_api-v1-patients-1
    method: GET
- name: search_patients
  endpoint:
    path: /reference/post_api-v1-patients-search
    method: POST
- name: get_patient
  endpoint:
    path: /reference/get_api-v1-patients-id-1
    method: GET
- name: delete_patient
  endpoint:
    path: /reference/delete_api-v1-patients-id-1
    method: DELETE
- name: create_query
  endpoint:
    path: /reference/post_api-v2-patients-particle-patient-id-query
    method: POST
- name: get_query_status
  endpoint:
    path: /reference/get_api-v2-patients-particle-patient-id-query
    method: GET
- name: collect_fhir_datasets
  endpoint:
    path: /reference/get_api-v2-patients-particle-patient-id-fhir
    method: GET
- name: collect_flat_datasets
  endpoint:
    path: /reference/get_api-v2-patients-particle-patient-id-flat
    method: GET
- name: download_ccda
  endpoint:
    path: /reference/get_api-v2-patients-particle-patient-id-ccda
    method: GET
- name: list_discharge_summaries
  endpoint:
    path: /reference/get_api-v1-patients-id-dischargesummaries
    method: GET
- name: get_ai_patient_summary
  endpoint:
    path: /reference/get_patientsummary-particle-patient-id
    method: GET
- name: list_patient_referrals
  endpoint:
    path: /reference/get_api-v1-referrals-1
    method: GET
- name: list_available_referral_orgs
  endpoint:
    path: /reference/get_api-v1-referrals-organizations-1
    method: GET
- name: list_registered_referral_orgs
  endpoint:
    path: /reference/get_api-v1-referrals-organizations-registered-1
    method: GET
- name: register_referral_org
  endpoint:
    path: /reference/post_api-v1-referrals-organizations-registered-1
    method: POST
- name: unregister_referral_org
  endpoint:
    path: /reference/delete_api-v1-referrals-organizations-registered-oid-1
    method: DELETE
- name: list_projects
  endpoint:
    path: /reference/projects_listprojects
    method: GET
- name: create_project
  endpoint:
    path: /reference/projects_createproject
    method: POST
- name: search_projects
  endpoint:
    path: /reference/projects_searchprojects
    method: GET
- name: get_project
  endpoint:
    path: /reference/projects_getproject
    method: GET
- name: delete_project
  endpoint:
    path: /reference/projects_deleteproject
    method: DELETE
- name: update_project
  endpoint:
    path: /reference/projects_updateproject
    method: PATCH
- name: get_project_policy
  endpoint:
    path: /reference/projects_getpolicy
    method: GET
- name: register_patient
  endpoint:
    path: /api/v2/patients
    method: POST
    data_selector: patient
    params: {}
- name: patients
  endpoint:
    path: /api/v2/patients
    method: GET
- name: patients
  endpoint:
    path: /api/v1/patients
    method: GET
    data_selector: patients
- name: patients
  endpoint:
    path: /patients
    method: GET
    data_selector: object
- name: search_patients
  endpoint:
    path: /patients/search
    method: POST
    data_selector: object
- name: register_patient
  endpoint:
    path: /v2/patients
    method: POST
- name: patients
  endpoint:
    path: /api/v2/patients
    method: GET
- name: search_patients
  endpoint:
    path: /api/v1/patients/search
    method: POST
- name: patient
  endpoint:
    path: /api/v1/patients/{id}
    method: GET
- name: patients
  endpoint:
    path: /v1/patients
    method: GET
    data_selector: patients
- name: delete_patient
  endpoint:
    path: /api/v1/patients/{id}
    method: DELETE
- name: patients
  endpoint:
    path: /patients
    method: GET
- name: search_patients
  endpoint:
    path: /patients/search
    method: POST
- name: search_patients
  endpoint:
    path: /api/v1/patients/search
    method: POST
- name: create_query
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/query
    method: POST
- name: patient
  endpoint:
    path: /api/v1/patients/{id}
    method: GET
- name: patients_query
  endpoint:
    path: /api/v2/patients/particle_patient_id/query
    method: POST
- name: get_query_status
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/query
    method: GET
- name: delete_patient
  endpoint:
    path: /patients/{id}
    method: DELETE
- name: patients
  endpoint:
    path: /patients/particle_patient_id/query
    method: GET
- name: fhir_datasets
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/fhir
    method: GET
- name: create_query
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/query
    method: POST
- name: flat_datasets
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/flat
    method: GET
    data_selector: data
- name: patients_query
  endpoint:
    path: /api/v2/patients/particle_patient_id/query
    method: POST
    data_selector: object
    params: {}
- name: ccda
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/ccda
    method: GET
- name: discharge_summary
  endpoint:
    path: /api/v1/patients/{id}/dischargesummaries
    method: GET
- name: get_query_status
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/query
    method: GET
    data_selector: object
    params:
      query_id: string
- name: patient_summary
  endpoint:
    path: /patientsummary/{particle_patient_id}
    method: GET
- name: patients
  endpoint:
    path: /patients/particle_patient_id/query
    method: GET
- name: create_patient_subscriptions
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions
    method: POST
- name: FHIR Datasets
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/fhir
    method: GET
- name: collect_flat_datasets
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/flat
    method: GET
- name: create_subscriptions_bulk
  endpoint:
    path: /api/v1/patients/subscriptions
    method: post
- name: patient_subscriptions
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions
    method: GET
- name: ccda
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/ccda
    method: GET
- name: delete_patient_subscriptions
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions
    method: DELETE
- name: discharge_summaries
  endpoint:
    path: /api/v1/patients/{id}/dischargesummaries
    method: GET
- name: Simulate Sandbox Webhooks
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions/trigger-sandbox-workflow
    method: POST
- name: AI Patient Summary
  endpoint:
    path: /patientsummary/{particle_patient_id}
    method: GET
- name: submit_document
  endpoint:
    path: /api/v1/documents
    method: POST
- name: patient_subscriptions
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions
    method: POST
- name: subscriptions
  endpoint:
    path: /api/v1/patients/subscriptions
    method: POST
- name: patient_documents
  endpoint:
    path: /api/v1/documents/patient/{id}
    method: GET
    data_selector: array of objects
    params: {}
- name: documents
  endpoint:
    path: /documents/patient/id
    method: GET
- name: patient_subscriptions
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions
    method: GET
    data_selector: subscriptions
- name: document
  endpoint:
    path: /api/v1/documents/{id}
    method: GET
- name: delete_patient_subscriptions
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions
    method: DELETE
- name: delete_document
  endpoint:
    path: /api/v1/documents/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: trigger_sandbox_workflow
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions/trigger-sandbox-workflow
    method: POST
- name: patient_referrals
  endpoint:
    path: /api/v1/referrals
    method: GET
    data_selector: referrals
    params:
      referral_states: SCHEDULED,COMPLETE
- name: submit_document
  endpoint:
    path: /api/v1/documents
    method: POST
- name: referral_organizations
  endpoint:
    path: /api/v1/referrals/organizations
    method: GET
    data_selector: organizations
    params: {}
- name: patient_documents
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: object
    params: {}
- name: registered_referral_orgs
  endpoint:
    path: /api/v1/referrals/organizations/registered
    method: GET
    data_selector: response
- name: patient_documents
  endpoint:
    path: /api/v1/documents/patient/{id}
    method: GET
    data_selector: array of objects
- name: registered_referral_orgs
  endpoint:
    path: /api/v1/referrals/organizations/registered
    method: POST
- name: patient_document
  endpoint:
    path: /api/v1/documents/patient/id
    method: GET
- name: unregister_referral_organization
  endpoint:
    path: /api/v1/referrals/organizations/registered/{oid}
    method: DELETE
- name: document
  endpoint:
    path: /api/v1/documents/{id}
    method: GET
- name: signature_key
  endpoint:
    path: /v1/{parent}/signaturekeys
    method: POST
- name: delete_document
  endpoint:
    path: /api/v1/documents/{id}
    method: DELETE
- name: valid_signature_keys
  endpoint:
    path: /v1/{parent}:getValidSignatureKeys
    method: GET
    data_selector: Signature Keys
- name: patient_referrals
  endpoint:
    path: /api/v1/referrals
    method: GET
    data_selector: referrals
    params:
      referral_states: SCHEDULED,COMPLETE
- name: signature_key
  endpoint:
    path: /v1/{signaturekey.name}
    method: GET
- name: referral_organizations
  endpoint:
    path: /api/v1/referrals/organizations
    method: GET
    data_selector: organizations
- name: signature_key
  endpoint:
    path: /v1/{signaturekey.name}
    method: DELETE
- name: notification
  endpoint:
    path: /v1/notifications
    method: POST
- name: registered_referral_orgs
  endpoint:
    path: /api/v1/referrals/organizations/registered
    method: GET
- name: notification
  endpoint:
    path: /v1/{notification.name}
    method: GET
- name: registered_referral_orgs
  endpoint:
    path: /api/v1/referrals/organizations/registered
    method: POST
- name: notification
  endpoint:
    path: /v1/{notification.name}
    method: DELETE
- name: unregister_referral_organization
  endpoint:
    path: /api/v1/referrals/organizations/registered/{oid}
    method: DELETE
- name: notification
  endpoint:
    path: /v1/{notification.name}
    method: PATCH
    data_selector: ''
    params: {}
- name: signature_key
  endpoint:
    path: /v1/{parent}/signaturekeys
    method: POST
- name: notification
  endpoint:
    path: /v1/{notification.name}
    method: PATCH
    data_selector: response
    params: {}
- name: valid_signature_keys
  endpoint:
    path: /v1/{parent}:getValidSignatureKeys
    method: GET
    data_selector: SignatureKeys
- name: notifications
  endpoint:
    path: /v1/notifications
    method: GET
- name: signature_key
  endpoint:
    path: /v1/{signaturekey.name}
    method: GET
    data_selector: object
- name: project_notifications
  endpoint:
    path: /v1/{parent}/notifications
    method: GET
- name: delete_signature_key
  endpoint:
    path: /v1/{signaturekey.name}
    method: DELETE
- name: Create Project Notification
  endpoint:
    path: /v1/{parent}/notifications
    method: POST
- name: notification
  endpoint:
    path: /v1/notifications
    method: POST
- name: notification
  endpoint:
    path: /v1/{notification.name}
    method: GET
- name: projects
  endpoint:
    path: /v1/projects
    method: GET
    data_selector: projects
    params: {}
- name: Delete Notification
  endpoint:
    path: /v1/{notification.name}
    method: DELETE
- name: projects
  endpoint:
    path: /v1/projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /v1/projects
    method: POST
- name: notification
  endpoint:
    path: /v1/{notification.name}
    method: PATCH
    data_selector: object
- name: projects
  endpoint:
    path: /v1/projects:search
    method: GET
- name: notifications
  endpoint:
    path: /v1/{notification.name}
    method: PATCH
- name: project
  endpoint:
    path: /v1/{project.name}
    method: GET
    data_selector: response
- name: notifications
  endpoint:
    path: /v1/notifications
    method: GET
- name: Delete Project
  endpoint:
    path: /v1/{project.name}
    method: DELETE
- name: notifications
  endpoint:
    path: /v1/{parent}/notifications
    method: GET
- name: update_project
  endpoint:
    path: /v1/{project.name}
    method: PATCH
- name: Create Project Notification
  endpoint:
    path: /v1/{parent}/notifications
    method: POST
- name: project_policy
  endpoint:
    path: /v1/{project.name}:getPolicy
    method: GET
    data_selector: object
- name: service_account
  endpoint:
    path: /v1/serviceaccounts
    method: POST
- name: projects
  endpoint:
    path: /v1/projects
    method: GET
    data_selector: projects
    params:
      page_size: '0'
- name: projects
  endpoint:
    path: /v1/projects
    method: GET
- name: service_accounts
  endpoint:
    path: /v1/serviceaccounts:search
    method: GET
- name: project
  endpoint:
    path: /v1/projects
    method: POST
- name: service_account
  endpoint:
    path: /v1/{service_account.name}
    method: GET
- name: projects_search
  endpoint:
    path: /v1/projects:search
    method: GET
- name: service_account
  endpoint:
    path: /v1/{service_account.name}
    method: PATCH
- name: project
  endpoint:
    path: /v1/{project.name}
    method: GET
- name: service_accounts
  endpoint:
    path: /v1/serviceaccounts
    method: GET
- name: delete_project
  endpoint:
    path: /v1/{project.name}
    method: DELETE
- name: delete_service_account
  endpoint:
    path: /v1/{service_account.name}
    method: DELETE
- name: update_project
  endpoint:
    path: /v1/{project.name}
    method: PATCH
- name: service_account_policy
  endpoint:
    path: /v1/{service_account.name}:getPolicy
    method: GET
- name: set_service_account_policy
  endpoint:
    path: /v1/{service_account.name}:setPolicy
    method: POST
- name: project_policy
  endpoint:
    path: /v1/{project.name}:getPolicy
    method: GET
- name: connection
  endpoint:
    path: /v1/{connection.name}
    method: GET
- name: service_account
  endpoint:
    path: /v1/serviceaccounts
    method: POST
- name: Delete Connection
  endpoint:
    path: /v1/{connection.name}
    method: DELETE
- name: service_accounts
  endpoint:
    path: /v1/serviceaccounts:search
    method: GET
- name: connections
  endpoint:
    path: /v1/{parent}/connections
    method: GET
- name: service_account
  endpoint:
    path: /v1/{service_account.name}
    method: GET
    data_selector: ''
- name: connections
  endpoint:
    path: /v1/{parent}/connections
    method: POST
- name: service_account
  endpoint:
    path: /v1/{service_account.name}
    method: PATCH
- name: credentials
  endpoint:
    path: /v1/{parent}/credentials
    method: POST
- name: service_accounts
  endpoint:
    path: /v1/serviceaccounts
    method: GET
- name: credential
  endpoint:
    path: /v1/{credential.name}
    method: GET
- name: delete_service_account
  endpoint:
    path: /v1/{service_account.name}
    method: DELETE
- name: delete_credential
  endpoint:
    path: /v1/{credential.name}
    method: DELETE
- name: service_account_policy
  endpoint:
    path: /v1/{service_account.name}:getPolicy
    method: GET
- name: valid_credentials
  endpoint:
    path: /v1/{parent}:getValidCredentials
    method: GET
    data_selector: credentials
    params: {}
- name: service_account_policy
  endpoint:
    path: /v1/{service_account.name}:setPolicy
    method: POST
- name: batch_jobs
  endpoint:
    path: /api/v1/batches
    method: GET
    data_selector: batch_jobs
- name: batch
  endpoint:
    path: /api/v1/batches/{batch_id}
    method: GET
    data_selector: batch_metadata
- name: connection
  endpoint:
    path: /v1/{connection.name}
    method: GET
- name: batch
  endpoint:
    path: /api/v1/batches/{batch_type}
    method: POST
- name: hl7v2_message
  endpoint:
    path: /hl7v2/{message_id}
    method: GET
- name: hl7v2_messages
  endpoint:
    path: /hl7v2/patient/{particle_patient_id}
    method: GET
    data_selector: messages
- name: patient
  endpoint:
    path: /api/v1/patients
    method: POST
    data_selector: patient_record
- name: flat_query
  endpoint:
    path: /flat
    method: POST
- name: flat_query
  endpoint:
    path: /flat/{id}
    method: GET
- name: collect_flat_datasets
  endpoint:
    path: /flat/{id}/collect-data
    method: GET
- name: flat_resource
  endpoint:
    path: /flat/{patient_id}/{resource_type}/{resource_id}
    method: GET
- name: connections
  endpoint:
    path: /v1/{parent}/connections
    method: GET
- name: connections
  endpoint:
    path: /v1/{parent}/connections
    method: POST
- name: FHIR Patient
  endpoint:
    path: /R4/Patient
    method: POST
- name: Run a FHIR Query for a Patient
  endpoint:
    path: /R4/Patient/{patient_id}/$query
    method: POST
- name: collect_all_fhir_resources
  endpoint:
    path: /R4/Patient/{patient_id}/$everything
    method: GET
- name: credential
  endpoint:
    path: /v1/{credential.name}
    method: GET
    data_selector: response
- name: get_fhir_query_status
  endpoint:
    path: /R4/Patient/{patient_id}/$query
    method: GET
- name: Delete Credential
  endpoint:
    path: /v1/{credential.name}
    method: DELETE
- name: Collect All FHIR Resources for a Patient
  endpoint:
    path: /R4/Patient/patient_id/$query
    method: GET
- name: Search FHIR Resources
  endpoint:
    path: /R4/resource-type-1
    method: GET
- name: search_fhir_resources
  endpoint:
    path: /R4/{resource_type}
    method: GET
- name: valid_credentials
  endpoint:
    path: /v1/{parent}:getValidCredentials
    method: GET
- name: read_fhir_resource
  endpoint:
    path: /R4/{resource_type}/{resource_id}
    method: GET
- name: batch_jobs
  endpoint:
    path: /api/v1/batches
    method: GET
- name: deltas
  endpoint:
    path: /deltas
    method: POST
- name: batch
  endpoint:
    path: /api/v1/batches/{batch_id}
    method: GET
    data_selector: metadata
- name: Get Deltas Query Status
  endpoint:
    path: /deltas/{particle_patient_id}
    method: GET
- name: deltas
  endpoint:
    path: /deltas/particle_patient_id
    method: GET
- name: batch
  endpoint:
    path: /api/v1/batches/{batch_type}
    method: POST
- name: Get Deltas Flat Resource
  endpoint:
    path: /deltas/flat/{particle_patient_id}/{resource_type}/{resource_id}
    method: GET
- name: hl7v2_message
  endpoint:
    path: /hl7v2/{message_id}
    method: GET
- name: deltas_patient
  endpoint:
    path: /deltas/R4/Patient/{particle_patient_id}/$everything
    method: GET
    data_selector: entry
- name: hl7v2_messages_by_patient
  endpoint:
    path: /hl7v2/patient/{particle_patient_id}
    method: GET
    data_selector: messages
- name: deltas_flat_patient
  endpoint:
    path: /deltas/R4/Patient/particle_patient_id/$everything
    method: GET
- name: patients
  endpoint:
    path: /api/v1/patients
    method: GET
- name: documents
  endpoint:
    path: /api/v1/documents
    method: GET
- name: referrals
  endpoint:
    path: /api/v1/referrals
    method: GET
- name: deltas
  endpoint:
    path: /deltas/R4/{resource_type}
    method: GET
    data_selector: entry
    params:
      person: Particle Patient ID
      _lastUpdated: Resources updated after this time will be included
- name: read_fhir_delta_resource
  endpoint:
    path: /deltas/R4/{resource_type}/{resource_id}
    method: GET
- name: patients
  endpoint:
    path: /api/v1/patients
    method: POST
    data_selector: patient
    params: {}
- name: flat_deltas
  endpoint:
    path: /deltas/flat/{particle_patient_id}
    method: GET
- name: queries
  endpoint:
    path: /api/v1/queries/
    method: GET
    data_selector: queries
    params: {}
- name: flat_query
  endpoint:
    path: /flat
    method: POST
- name: query_status
  endpoint:
    path: /v1/queries/{id}
    method: GET
    data_selector: object
- name: flat_query
  endpoint:
    path: /flat/{id}
    method: GET
- name: queries
  endpoint:
    path: /api/v1/queries/id
    method: GET
- name: files
  endpoint:
    path: /api/v1/files/query-id-zip
    method: GET
- name: download_zipped_file
  endpoint:
    path: /api/v1/files/{query_id}/zip
    method: GET
- name: Collect Flat Datasets
  endpoint:
    path: /flat/{id}/collect-data
    method: GET
- name: flat_resource
  endpoint:
    path: /flat/{patient_id}/{resource_type}/{resource_id}
    method: GET
- name: FHIR Patient
  endpoint:
    path: /R4/Patient
    method: POST
- name: query
  endpoint:
    path: /api/v1/queries
    method: POST
- name: Download a file
  endpoint:
    path: /api/v1/files/{query_id}/{file_id}
    method: GET
- name: FHIR Query for a Patient
  endpoint:
    path: /R4/Patient/{patient_id}/$query
    method: POST
- name: collect_all_fhir_resources
  endpoint:
    path: /R4/Patient/{patient_id}/$everything
    method: GET
    data_selector: Bundle
- name: get_fhir_query_status
  endpoint:
    path: /R4/Patient/{patient_id}/$query
    method: GET
- name: condition_data
  endpoint:
    path: /condition_data
    method: GET
    data_selector: records
- name: patient_data
  endpoint:
    path: /patients
    method: GET
    data_selector: records
- name: search_fhir_resources
  endpoint:
    path: /R4/{resource_type}
    method: GET
- name: fhir_resource
  endpoint:
    path: /R4/{resource_type}/{resource_id}
    method: GET
- name: patients
  endpoint:
    path: /api/v1/patients
    method: GET
    data_selector: records
    params: {}
- name: discharge_summaries
  endpoint:
    path: /api/v1/discharge_summaries
    method: GET
    data_selector: records
    params: {}
- name: submit_deltas_query
  endpoint:
    path: /deltas
    method: POST
- name: Get Deltas Query Status
  endpoint:
    path: /deltas/{particle_patient_id}
    method: GET
- name: deltas_flat
  endpoint:
    path: /deltas/particle_patient_id
    method: GET
- name: deltas_flat_resource
  endpoint:
    path: /deltas/flat/{particle_patient_id}/{resource_type}/{resource_id}
    method: GET
- name: C-CDA
  endpoint:
    path: /api/ccda
    method: GET
    data_selector: data
    params: {}
- name: FHIR
  endpoint:
    path: /api/fhir
    method: GET
    data_selector: data
    params: {}
- name: collect_deltas_fhir_datasets
  endpoint:
    path: /deltas/R4/Patient/{particle_patient_id}/$everything
    method: GET
- name: deltas_flat
  endpoint:
    path: /deltas/R4/Patient/particle_patient_id/$everything
    method: GET
- name: patients
  endpoint:
    path: /patients
    method: POST
    data_selector: records
    params:
      consent_date: date
      permission: permit/deny
- name: deltas
  endpoint:
    path: /deltas/R4/{resource_type}
    method: GET
    data_selector: entry
    params:
      person: Particle Patient ID
      _lastUpdated: string
- name: read_fhir_delta_resource
  endpoint:
    path: /deltas/R4/{resource_type}/{resource_id}
    method: GET
- name: flat_deltas
  endpoint:
    path: /deltas/flat/{particle_patient_id}
    method: GET
- name: list_queries
  endpoint:
    path: /api/v1/queries/
    method: GET
- name: Labs
  endpoint:
    path: /labs
    method: GET
    data_selector: records
- name: Medications
  endpoint:
    path: /medications
    method: GET
    data_selector: records
- name: Problems
  endpoint:
    path: /problems
    method: GET
    data_selector: records
- name: Procedures
  endpoint:
    path: /procedures
    method: GET
    data_selector: records
- name: query_status
  endpoint:
    path: /v1/queries/{id}
    method: GET
- name: queries
  endpoint:
    path: /queries/id
    method: GET
- name: files_query_id_zip
  endpoint:
    path: /files/query/id/zip
    method: GET
- name: download_query_results
  endpoint:
    path: /api/v1/files/{query_id}/zip
    method: GET
    data_selector: string
- name: register_patient
  endpoint:
    path: /api/v2/patients
    method: POST
    data_selector: null
    params: {}
- name: initiate_query
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/query
    method: POST
    data_selector: null
    params: {}
- name: check_query_status
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/query
    method: GET
    data_selector: null
    params:
      query_id: '...'
- name: retrieve_patient_data_fhir
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/fhir
    method: GET
    data_selector: null
    params: {}
- name: retrieve_patient_data_flat
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/flat
    method: GET
    data_selector: null
    params: {}
- name: retrieve_patient_data_ccda
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/ccda
    method: GET
    data_selector: null
    params: {}
- name: create_query
  endpoint:
    path: /api/v1/queries
    method: POST
- name: create_query
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/query
    method: POST
    data_selector: query_id
    params:
      purpose_of_use: TREATMENT
- name: monitor_query_status
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/query
    method: GET
    data_selector: status
- name: download_file
  endpoint:
    path: /api/v1/files/{query_id}/{file_id}
    method: GET
- name: flat_data
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/flat
    method: GET
    data_selector: clinical_data
    params:
      _since: ISO 8601 format
- name: ccda_data
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/ccda
    method: GET
    data_selector: ccda_documents
    params:
      query_id: optional
      file_id: optional
- name: Condition DataSet
  endpoint:
    path: /condition_data
    method: GET
    data_selector: records
- name: C-CDA Query Complete Notification
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: FHIR Query Complete Notification
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: ADT Message Notification
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: patients
  endpoint:
    path: /api/v1/patients
    method: GET
    data_selector: records
    params: {}
- name: files
  endpoint:
    path: /api/v1/files
    method: GET
    data_selector: records
    params: {}
- name: document_create_update
  endpoint:
    path: api/v1/documents
    method: POST
    data_selector: Documents Model
- name: retrieve_posted_document
  endpoint:
    path: api/v1/documents/{document_id}
    method: GET
    data_selector: Documents Model
- name: delete_document
  endpoint:
    path: api/v1/documents/{document_id}
    method: DELETE
    data_selector: Documents Model
- name: list_patient_documents
  endpoint:
    path: api/v1/documents/patient/{patient_id}
    method: GET
    data_selector: Documents Model
- name: C-CDA files
  endpoint:
    path: /Files/
    method: GET
    data_selector: files
- name: FHIR JSON data
  endpoint:
    path: /R4/
    method: GET
    data_selector: data
- name: Flat data
  endpoint:
    path: flat/{id}/collect-data
    method: GET
    data_selector: data
- name: projects
  endpoint:
    path: /v1/projects
    method: POST
- name: service_accounts
  endpoint:
    path: /v1/serviceaccounts
    method: POST
- name: credentials
  endpoint:
    path: /serviceaccounts/{UUID}/credentials
    method: POST
- name: conditions
  endpoint:
    path: /api/v1/conditions
    method: GET
    data_selector: conditions
    params: {}
- name: observations
  endpoint:
    path: /api/v1/observations
    method: GET
    data_selector: observations
    params: {}
- name: medications
  endpoint:
    path: /api/v1/medications
    method: GET
    data_selector: medications
    params: {}
- name: procedures
  endpoint:
    path: /api/v1/procedures
    method: GET
    data_selector: procedures
    params: {}
- name: allergy_intolerance
  endpoint:
    path: /api/v1/allergy_intolerances
    method: GET
    data_selector: allergy_intolerances
    params: {}
- name: List Batches
  endpoint:
    path: /api/v1/projects/{project_id}/batches
    method: GET
- name: Healthix
  endpoint:
    path: /docs/healthix-ny-hie
    method: GET
- name: Manifest MedEx
  endpoint:
    path: /docs/manifest-medex
    method: GET
- name: create_batch
  endpoint:
    path: /api/v1/projects/{project_id}/batches
    method: POST
- name: patients
  endpoint:
    path: /patients
    method: POST
    data_selector: records
- name: list_batch
  endpoint:
    path: /api/v1/projects/{project_id}/batches
    method: GET
    data_selector: batch_statuses
- name: get_batch
  endpoint:
    path: /api/v1/projects/{project_id}/batches/{batch_id}
    method: GET
    data_selector: batch
- name: deltas
  endpoint:
    path: /deltas
    method: POST
    data_selector: response
    params:
      particle_patient_id: UUID
      purpose_of_use: TREATMENT
      specialties:
      - ONCOLOGY
      hints:
      - '10023'
- name: deltas_status
  endpoint:
    path: /deltas/{particle_patient_id}
    method: GET
- name: deltas_fhir
  endpoint:
    path: /deltas/R4/Patient/{particle_patient_id}/$everything
    method: GET
- name: deltas_flat
  endpoint:
    path: /deltas/flat/{particle_patient_id}
    method: GET
- name: queries
  endpoint:
    path: /v1.3/reference/get_api-v1-queries-id
    method: GET
    data_selector: files
    params: {}
- name: download_file
  endpoint:
    path: /v1.3/reference/get_api-v1-files-query-id-file-id
    method: GET
    data_selector: files
    params: {}
- name: Labs
  endpoint:
    path: /labs
    method: GET
    data_selector: records
- name: Medications
  endpoint:
    path: /medications
    method: GET
    data_selector: records
- name: Problems
  endpoint:
    path: /problems
    method: GET
    data_selector: records
- name: Procedures
  endpoint:
    path: /procedures
    method: GET
    data_selector: records
- name: Composition
  endpoint:
    path: /R4/Composition
    method: GET
    data_selector: link
    params:
      patient: '{patient_id}'
- name: MedicationStatement
  endpoint:
    path: /R4/MedicationStatement
    method: GET
    data_selector: link
    params:
      patient: '{patient_id}'
      effective: gt2021-10-19
- name: Observation
  endpoint:
    path: /R4/Observation
    method: GET
    data_selector: link
    params:
      patient: '{patient_id}'
      code: 4548-4
- name: register_patient
  endpoint:
    path: /api/v2/patients
    method: POST
- name: initiate_query
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/query
    method: POST
- name: check_query_status
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/query
    method: GET
- name: retrieve_patient_data_fhir
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/fhir
    method: GET
- name: retrieve_patient_data_flat
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/flat
    method: GET
- name: retrieve_patient_data_ccda
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/ccda
    method: GET
- name: create_query
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/query
    method: POST
    data_selector: query_id
- name: monitor_query_status
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/query
    method: GET
    data_selector: status
- name: check_specific_query_status
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/query
    method: GET
    params:
      query_id: abc123
- name: flat_data
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/flat
    method: GET
    data_selector: results
    params:
      _since: ISO 8601 format
- name: ccda_data
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/ccda
    method: GET
    data_selector: documents
    params:
      query_id: optional
      file_id: optional
- name: AllergyIntolerance
  endpoint:
    path: /R4/AllergyIntolerance
    method: GET
    data_selector: link
    params:
      date: onset
- name: CarePlan
  endpoint:
    path: /R4/CarePlan
    method: GET
    data_selector: link
    params:
      date: activity-date
- name: Composition
  endpoint:
    path: /R4/Composition
    method: GET
    data_selector: link
    params:
      date: date
      period: period
- name: Condition
  endpoint:
    path: /R4/Condition
    method: GET
    data_selector: link
    params:
      date: onset-date
- name: DiagnosticReport
  endpoint:
    path: /R4/DiagnosticReport
    method: GET
    data_selector: link
    params:
      date: date
- name: Encounter
  endpoint:
    path: /R4/Encounter
    method: GET
    data_selector: link
    params:
      date: date
- name: Immunization
  endpoint:
    path: /R4/Immunization
    method: GET
    data_selector: link
    params:
      date: date
- name: MedicationStatement
  endpoint:
    path: /R4/MedicationStatement
    method: GET
    data_selector: link
    params:
      date: effective
- name: Observation
  endpoint:
    path: /R4/Observation
    method: GET
    data_selector: link
    params:
      date: date
- name: Procedure
  endpoint:
    path: /R4/Procedure
    method: GET
    data_selector: link
    params:
      date: date
- name: MedicationStatement
  endpoint:
    path: /MedicationStatement
    method: GET
- name: Composition
  endpoint:
    path: /Composition
    method: GET
- name: Medication
  endpoint:
    path: /Medication
    method: GET
- name: Encounter
  endpoint:
    path: /Encounter
    method: GET
- name: AllergyIntolerance
  endpoint:
    path: /fhir/AllergyIntolerance
    method: GET
- name: Basic
  endpoint:
    path: /fhir/Basic
    method: GET
- name: CarePlan
  endpoint:
    path: /fhir/CarePlan
    method: GET
- name: Composition
  endpoint:
    path: /fhir/Composition
    method: GET
- name: Condition
  endpoint:
    path: /fhir/Condition
    method: GET
- name: Coverage
  endpoint:
    path: /fhir/Coverage
    method: GET
- name: Device
  endpoint:
    path: /fhir/Device
    method: GET
- name: DiagnosticReport
  endpoint:
    path: /fhir/DiagnosticReport
    method: GET
- name: DocumentReference
  endpoint:
    path: /fhir/DocumentReference
    method: GET
- name: Encounter
  endpoint:
    path: /fhir/Encounter
    method: GET
- name: FamilyMemberHistory
  endpoint:
    path: /fhir/FamilyMemberHistory
    method: GET
- name: Immunization
  endpoint:
    path: /fhir/Immunization
    method: GET
- name: Location
  endpoint:
    path: /fhir/Location
    method: GET
- name: Medication
  endpoint:
    path: /fhir/Medication
    method: GET
- name: MedicationRequest
  endpoint:
    path: /fhir/MedicationRequest
    method: GET
- name: MedicationStatement
  endpoint:
    path: /fhir/MedicationStatement
    method: GET
- name: Observation
  endpoint:
    path: /fhir/Observation
    method: GET
- name: Organization
  endpoint:
    path: /fhir/Organization
    method: GET
- name: Patient
  endpoint:
    path: /fhir/Patient
    method: GET
- name: Person
  endpoint:
    path: /fhir/Person
    method: GET
- name: Practitioner
  endpoint:
    path: /fhir/Practitioner
    method: GET
- name: PractitionerRole
  endpoint:
    path: /fhir/PractitionerRole
    method: GET
- name: Procedure
  endpoint:
    path: /fhir/Procedure
    method: GET
- name: RelatedPerson
  endpoint:
    path: /fhir/RelatedPerson
    method: GET
- name: documents
  endpoint:
    path: /api/v1/documents
    method: POST
    data_selector: Documents Model
- name: retrieve_document
  endpoint:
    path: /api/v1/documents/{document_id}
    method: GET
    data_selector: Documents Model
- name: delete_document
  endpoint:
    path: /api/v1/documents/{document_id}
    method: DELETE
    data_selector: Documents Model
- name: list_patient_documents
  endpoint:
    path: /api/v1/documents/patient/{patient_id}
    method: GET
    data_selector: Documents Model
- name: Allergies
  endpoint:
    path: /flat/allergies
    method: GET
- name: Compositions
  endpoint:
    path: /flat/compositions
    method: GET
- name: Coverages
  endpoint:
    path: /flat/coverages
    method: GET
- name: Document References
  endpoint:
    path: /flat/document-references
    method: GET
- name: Encounters
  endpoint:
    path: /flat/encounters
    method: GET
- name: Family Member Histories
  endpoint:
    path: /flat/family-member-histories
    method: GET
- name: Immunizations
  endpoint:
    path: /flat/immunizations
    method: GET
- name: Labs
  endpoint:
    path: /flat/labs
    method: GET
- name: Locations
  endpoint:
    path: /flat/locations
    method: GET
- name: Medications
  endpoint:
    path: /flat/medications
    method: GET
- name: MedRecs
  endpoint:
    path: /flat/medrecs
    method: GET
- name: Organizations
  endpoint:
    path: /flat/organizations
    method: GET
- name: Patients
  endpoint:
    path: /flat/patients
    method: GET
- name: Practitioners
  endpoint:
    path: /flat/practitioners
    method: GET
- name: Problems
  endpoint:
    path: /flat/problems
    method: GET
- name: Procedures
  endpoint:
    path: /flat/procedures
    method: GET
- name: Provenances
  endpoint:
    path: /flat/provenances
    method: GET
- name: Related Persons
  endpoint:
    path: /flat/related-persons
    method: GET
- name: Social Histories
  endpoint:
    path: /flat/social-histories
    method: GET
- name: Vital Signs
  endpoint:
    path: /flat/vital-signs
    method: GET
- name: create_project
  endpoint:
    path: /v1/projects
    method: POST
    data_selector: project
    params: {}
- name: create_service_account
  endpoint:
    path: /v1/serviceaccounts
    method: POST
    data_selector: serviceAccount
    params: {}
- name: set_policy
  endpoint:
    path: /v1/serviceaccounts/{UUID}:setPolicy
    method: POST
    data_selector: policy
    params: {}
- name: create_credentials
  endpoint:
    path: /serviceaccounts/{UUID}/credentials
    method: POST
    data_selector: credentials
    params: {}
- name: create_connection
  endpoint:
    path: /v1/projects/{UUID}/connections
    method: POST
    data_selector: connection
    params: {}
- name: list_batches
  endpoint:
    path: /api/v1/projects/{project_id}/batches
    method: GET
    data_selector: batch_statuses
- name: transition_alerts
  endpoint:
    path: /alerts/transition
    method: GET
- name: new_encounter_alerts
  endpoint:
    path: /alerts/new_encounter
    method: GET
- name: discharge_summary_alerts
  endpoint:
    path: /alerts/discharge_summary
    method: GET
- name: referral_alerts
  endpoint:
    path: /alerts/referral
    method: GET
- name: batches
  endpoint:
    path: /api/v1/projects/{project_id}/batches
    method: GET
    data_selector: batch_statuses
- name: batch_details
  endpoint:
    path: /api/v1/projects/{project_id}/batches/{batch_id}
    method: GET
    data_selector: batch_id
- name: patients
  endpoint:
    path: /v2/patients
    method: POST
    data_selector: null
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/subscriptions
    method: POST
    data_selector: null
    params: {}
- name: referral_organizations
  endpoint:
    path: /api/v1/referrals/organizations/registered
    method: POST
    data_selector: null
    params: {}
- name: deltas_query
  endpoint:
    path: /deltas
    method: POST
    data_selector: particle_patient_id
    params:
      purpose_of_use: TREATMENT
      specialties:
      - ONCOLOGY
      hints:
      - '10023'
- name: deltas_query_status
  endpoint:
    path: /deltas/{particle_patient_id}
    method: GET
- name: retrieve_data_delta_fhir
  endpoint:
    path: /deltas/R4/Patient/{particle_patient_id}/$everything
    method: GET
- name: retrieve_data_delta_flat
  endpoint:
    path: /deltas/flat/{particle_patient_id}
    method: GET
- name: transition_alerts
  endpoint:
    path: /api/v2/transitionalerts
    method: GET
    data_selector: data
    params: {}
- name: webhook_notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
- name: queries
  endpoint:
    path: /v1.3/queries
    method: GET
    data_selector: results
- name: files
  endpoint:
    path: /v1.3/files
    method: GET
    data_selector: results
- name: Composition
  endpoint:
    path: /R4/Composition
    method: GET
    data_selector: link
    params:
      _count: '1000'
- name: MedicationStatement
  endpoint:
    path: /R4/MedicationStatement
    method: GET
    data_selector: link
    params: {}
- name: Observation
  endpoint:
    path: /R4/Observation
    method: GET
    data_selector: link
    params: {}
- name: patients
  endpoint:
    path: /api/v2/patients
    method: POST
    data_selector: patient_id
- name: subscriptions
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions
    method: POST
    data_selector: subscriptions
- name: queries
  endpoint:
    path: /api/v2/queries
    method: POST
    data_selector: query_id
- name: trigger_alert
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions/trigger-sandbox-workflow
    method: POST
    data_selector: alert_id
- name: referral_alerts
  endpoint:
    path: /api/v1/referrals/organizations/registered
    method: POST
    data_selector: organizations
- name: adt_notifications
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions/trigger-sandbox-workflow
    method: POST
    data_selector: workflow
- name: hl7v2_notifications
  endpoint:
    path: /hl7v2/{message_id}
    method: GET
    data_selector: message
- name: registered_referral_organizations
  endpoint:
    path: /api/v1/referrals/organizations/registered
    method: POST
    data_selector: organizations
- name: referrals
  endpoint:
    path: /api/v1/referrals
    method: GET
    data_selector: data
- name: MedicationStatement
  endpoint:
    path: /MedicationStatement/
    method: GET
    data_selector: entry
    params: {}
- name: Composition
  endpoint:
    path: /Composition/
    method: GET
    data_selector: entry
    params: {}
- name: Medication
  endpoint:
    path: /Medication/
    method: GET
    data_selector: entry
    params: {}
- name: Encounter
  endpoint:
    path: /Encounter/
    method: GET
    data_selector: entry
    params: {}
- name: discharge_summary_alert
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
- name: patients
  endpoint:
    path: /history/api/v1/patients
    method: GET
    data_selector: patients
- name: patient_query
  endpoint:
    path: /flat
    method: POST
    data_selector: id
- name: AllergyIntolerance
  endpoint:
    path: /fhir/AllergyIntolerance
    method: GET
    data_selector: records
- name: Basic
  endpoint:
    path: /fhir/Basic
    method: GET
    data_selector: records
- name: CarePlan
  endpoint:
    path: /fhir/CarePlan
    method: GET
    data_selector: records
- name: Composition
  endpoint:
    path: /fhir/Composition
    method: GET
    data_selector: records
- name: Condition
  endpoint:
    path: /fhir/Condition
    method: GET
    data_selector: records
- name: Coverage
  endpoint:
    path: /fhir/Coverage
    method: GET
    data_selector: records
- name: Device
  endpoint:
    path: /fhir/Device
    method: GET
    data_selector: records
- name: DiagnosticReport
  endpoint:
    path: /fhir/DiagnosticReport
    method: GET
    data_selector: records
- name: DocumentReference
  endpoint:
    path: /fhir/DocumentReference
    method: GET
    data_selector: records
- name: Encounter
  endpoint:
    path: /fhir/Encounter
    method: GET
    data_selector: records
- name: FamilyMemberHistory
  endpoint:
    path: /fhir/FamilyMemberHistory
    method: GET
    data_selector: records
- name: Immunization
  endpoint:
    path: /fhir/Immunization
    method: GET
    data_selector: records
- name: Location
  endpoint:
    path: /fhir/Location
    method: GET
    data_selector: records
- name: Medication
  endpoint:
    path: /fhir/Medication
    method: GET
    data_selector: records
- name: MedicationRequest
  endpoint:
    path: /fhir/MedicationRequest
    method: GET
    data_selector: records
- name: MedicationStatement
  endpoint:
    path: /fhir/MedicationStatement
    method: GET
    data_selector: records
- name: Observation
  endpoint:
    path: /fhir/Observation
    method: GET
    data_selector: records
- name: Organization
  endpoint:
    path: /fhir/Organization
    method: GET
    data_selector: records
- name: Patient
  endpoint:
    path: /fhir/Patient
    method: GET
    data_selector: records
- name: Person
  endpoint:
    path: /fhir/Person
    method: GET
    data_selector: records
- name: Practitioner
  endpoint:
    path: /fhir/Practitioner
    method: GET
    data_selector: records
- name: PractitionerRole
  endpoint:
    path: /fhir/PractitionerRole
    method: GET
    data_selector: records
- name: Procedure
  endpoint:
    path: /fhir/Procedure
    method: GET
    data_selector: records
- name: RelatedPerson
  endpoint:
    path: /fhir/RelatedPerson
    method: GET
    data_selector: records
- name: patients
  endpoint:
    path: /history/api/v1/patients/{query_id}
    method: GET
    data_selector: patients
- name: conditions
  endpoint:
    path: /conditions
    method: GET
    data_selector: conditions
- name: encounters
  endpoint:
    path: /encounters
    method: GET
    data_selector: encounters
- name: filtered_medications
  endpoint:
    path: /filtered-medications
    method: GET
    data_selector: filtered_medications
- name: immunizations
  endpoint:
    path: /immunizations
    method: GET
    data_selector: immunizations
- name: labs
  endpoint:
    path: /labs
    method: GET
    data_selector: labs
- name: medications
  endpoint:
    path: /medications
    method: GET
    data_selector: medications
- name: med_recs
  endpoint:
    path: /medrecs
    method: GET
    data_selector: med_recs
- name: procedures
  endpoint:
    path: /procedures
    method: GET
    data_selector: recent_procedures
- name: providers
  endpoint:
    path: /providers
    method: GET
    data_selector: practitioners
- name: social_history
  endpoint:
    path: /socialhistory
    method: GET
    data_selector: social_history
- name: sources
  endpoint:
    path: /sources
    method: GET
    data_selector: locations
- name: vitals
  endpoint:
    path: /vitals
    method: GET
    data_selector: vital_signs
- name: patients
  endpoint:
    path: /history/api/v1/patients
    method: GET
    data_selector: patients
- name: patient_history
  endpoint:
    path: /history/api/v1/patients/{query_id}
    method: GET
    data_selector: summary
- name: allergies
  endpoint:
    path: /history/api/v1/patients/{query_id}/allergies
    method: GET
    data_selector: allergies
- name: conditions
  endpoint:
    path: /history/api/v1/patients/{query_id}/conditions
    method: GET
    data_selector: conditions
- name: encounters
  endpoint:
    path: /history/api/v1/patients/{query_id}/encounters
    method: GET
    data_selector: encounters
- name: medications
  endpoint:
    path: /history/api/v1/patients/{query_id}/medications
    method: GET
    data_selector: medications
- name: labs
  endpoint:
    path: /history/api/v1/patients/{query_id}/labs
    method: GET
    data_selector: labs
- name: procedures
  endpoint:
    path: /history/api/v1/patients/{query_id}/procedures
    method: GET
    data_selector: recent_procedures
- name: practitioners
  endpoint:
    path: /history/api/v1/patients/{query_id}/providers
    method: GET
    data_selector: practitioners
- name: vitals
  endpoint:
    path: /history/api/v1/patients/{query_id}/vitals
    method: GET
    data_selector: vital_signs
- name: Allergies
  endpoint:
    path: /flat/Allergies/collect-data
    method: GET
- name: Compositions
  endpoint:
    path: /flat/Compositions/collect-data
    method: GET
- name: Coverages
  endpoint:
    path: /flat/Coverages/collect-data
    method: GET
- name: Document References
  endpoint:
    path: /flat/DocumentReferences/collect-data
    method: GET
- name: Encounters
  endpoint:
    path: /flat/Encounters/collect-data
    method: GET
- name: Family Member Histories
  endpoint:
    path: /flat/FamilyMemberHistories/collect-data
    method: GET
- name: Immunizations
  endpoint:
    path: /flat/Immunizations/collect-data
    method: GET
- name: Labs
  endpoint:
    path: /flat/Labs/collect-data
    method: GET
- name: Locations
  endpoint:
    path: /flat/Locations/collect-data
    method: GET
- name: Medications
  endpoint:
    path: /flat/Medications/collect-data
    method: GET
- name: MedRecs
  endpoint:
    path: /flat/MedRecs/collect-data
    method: GET
- name: Organizations
  endpoint:
    path: /flat/Organizations/collect-data
    method: GET
- name: Patients
  endpoint:
    path: /flat/Patients/collect-data
    method: GET
- name: Practitioners
  endpoint:
    path: /flat/Practitioners/collect-data
    method: GET
- name: Problems
  endpoint:
    path: /flat/Problems/collect-data
    method: GET
- name: Procedures
  endpoint:
    path: /flat/Procedures/collect-data
    method: GET
- name: Provenances
  endpoint:
    path: /flat/Provenances/collect-data
    method: GET
- name: Related Persons
  endpoint:
    path: /flat/RelatedPersons/collect-data
    method: GET
- name: Social Histories
  endpoint:
    path: /flat/SocialHistories/collect-data
    method: GET
- name: Vital Signs
  endpoint:
    path: /flat/VitalSigns/collect-data
    method: GET
- name: patients
  endpoint:
    path: /v2/patients
    method: POST
    data_selector: null
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/subscriptions
    method: POST
    data_selector: null
    params: {}
- name: referral_organizations
  endpoint:
    path: /api/v1/referrals/organizations/registered
    method: POST
    data_selector: null
    params: {}
- name: referral_organizations_list
  endpoint:
    path: /referrals/organizations
    method: GET
    data_selector: null
    params: {}
- name: Encounter
  endpoint:
    path: /services/data/vXX.X/sobjects/Encounter
    method: GET
    data_selector: records
    params: {}
- name: FilteredMedication
  endpoint:
    path: /services/data/vXX.X/sobjects/FilteredMedication
    method: GET
    data_selector: records
    params: {}
- name: Immunization
  endpoint:
    path: /services/data/vXX.X/sobjects/Immunization
    method: GET
    data_selector: records
    params: {}
- name: Lab
  endpoint:
    path: /services/data/vXX.X/sobjects/Lab
    method: GET
    data_selector: records
    params: {}
- name: Location
  endpoint:
    path: /services/data/vXX.X/sobjects/Location
    method: GET
    data_selector: records
    params: {}
- name: Medication
  endpoint:
    path: /services/data/vXX.X/sobjects/Medication
    method: GET
    data_selector: records
    params: {}
- name: Medication Alert
  endpoint:
    path: /services/data/vXX.X/sobjects/MedicationAlert
    method: GET
    data_selector: records
    params: {}
- name: MedRec
  endpoint:
    path: /services/data/vXX.X/sobjects/MedRec
    method: GET
    data_selector: records
    params: {}
- name: Procedure
  endpoint:
    path: /services/data/vXX.X/sobjects/Procedure
    method: GET
    data_selector: records
    params: {}
- name: Practitioner
  endpoint:
    path: /services/data/vXX.X/sobjects/Practitioner
    method: GET
    data_selector: records
    params: {}
- name: Social History
  endpoint:
    path: /services/data/vXX.X/sobjects/SocialHistory
    method: GET
    data_selector: records
    params: {}
- name: VitalSign
  endpoint:
    path: /services/data/vXX.X/sobjects/VitalSign
    method: GET
    data_selector: records
    params: {}
- name: transition_alerts
  endpoint:
    path: /api/v2/transitionalerts
    method: POST
    data_selector: data
    params: {}
- name: New Encounter Alert
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: patients
  endpoint:
    path: /api/v2/patients
    method: POST
    data_selector: patient_id
- name: subscriptions
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions
    method: POST
    data_selector: subscriptions
- name: queries
  endpoint:
    path: /api/v2/queries
    method: POST
    data_selector: query_id
- name: trigger_alert
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions/trigger-sandbox-workflow
    method: POST
    data_selector: workflow
- name: patients_flat
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/flat
    method: GET
    data_selector: data
- name: transitions
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/flat?TRANSITIONS
    method: GET
    data_selector: data
- name: ccda_files
  endpoint:
    path: /api/v2/patients/{particle_patient_id}/ccda?{file_id}
    method: GET
    data_selector: data
- name: referral_alerts
  endpoint:
    path: /api/v1/referrals/organizations/registered
    method: POST
    data_selector: organizations
- name: adt_notifications
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions/trigger-sandbox-workflow
    method: POST
    data_selector: workflow
- name: hl7v2_message
  endpoint:
    path: /hl7v2/{message_id}
    method: GET
    data_selector: message
- name: registered_referral_organizations
  endpoint:
    path: /api/v1/referrals/organizations/registered
    method: POST
    data_selector: organizations
    params: {}
- name: referral_alerts
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
    params: {}
- name: discharge_summary_alert
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
- name: create_patient_subscriptions
  endpoint:
    path: /api/v1/patients/subscriptions
    method: POST
    data_selector: subscriptions
- name: unsubscribe_patient
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscriptions
    method: DELETE
- name: list_patient_subscriptions
  endpoint:
    path: /api/v1/patients/{particle_patient_id}/subscription
    method: GET
    data_selector: subscriptions
- name: patients
  endpoint:
    path: /history/api/v1/patients
    method: GET
    data_selector: patients
- name: patient_query
  endpoint:
    path: /flat
    method: POST
    data_selector: id
- name: patients
  endpoint:
    path: /api/v1/patients
    method: GET
    data_selector: data
- name: queries
  endpoint:
    path: /api/v1/queries
    method: GET
    data_selector: data
- name: patients
  endpoint:
    path: /history/api/v1/patients/{query_id}
    method: GET
    data_selector: patients
- name: conditions
  endpoint:
    path: /conditions
    method: GET
    data_selector: conditions
- name: encounters
  endpoint:
    path: /encounters
    method: GET
    data_selector: encounters
- name: medications
  endpoint:
    path: /medications
    method: GET
    data_selector: medications
- name: labs
  endpoint:
    path: /labs
    method: GET
    data_selector: labs
- name: procedures
  endpoint:
    path: /procedures
    method: GET
    data_selector: recent_procedures
- name: practitioners
  endpoint:
    path: /providers
    method: GET
    data_selector: practitioners
- name: social_history
  endpoint:
    path: /socialhistory
    method: GET
    data_selector: social_history
- name: vitals
  endpoint:
    path: /vitals
    method: GET
    data_selector: vital_signs
- name: patients
  endpoint:
    path: /history/api/v1/patients
    method: GET
    data_selector: patients
- name: patient_data
  endpoint:
    path: /history/api/v1/patients/{query_id}
    method: GET
    data_selector: summary
- name: filtered_medication
  endpoint:
    path: /filtered_medication
    method: GET
    data_selector: records
    params: {}
- name: immunization
  endpoint:
    path: /immunization
    method: GET
    data_selector: records
    params: {}
- name: lab
  endpoint:
    path: /lab
    method: GET
    data_selector: records
    params: {}
- name: location
  endpoint:
    path: /location
    method: GET
    data_selector: records
    params: {}
- name: medication
  endpoint:
    path: /medication
    method: GET
    data_selector: records
    params: {}
- name: medication_alert
  endpoint:
    path: /medication_alert
    method: GET
    data_selector: records
    params: {}
- name: med_rec
  endpoint:
    path: /med_rec
    method: GET
    data_selector: records
    params: {}
- name: procedure
  endpoint:
    path: /procedure
    method: GET
    data_selector: records
    params: {}
- name: practitioner
  endpoint:
    path: /practitioner
    method: GET
    data_selector: records
    params: {}
- name: social_history
  endpoint:
    path: /social_history
    method: GET
    data_selector: records
    params: {}
- name: vital_sign
  endpoint:
    path: /vital_sign
    method: GET
    data_selector: records
    params: {}
- name: patients
  endpoint:
    path: /api/patients
    method: GET
    data_selector: data
    params: {}
- name: queries
  endpoint:
    path: /api/queries
    method: GET
    data_selector: data
    params: {}
- name: patients
  endpoint:
    path: /patients
    method: GET
    data_selector: data
- name: patients
  endpoint:
    path: /api/v1/patients
    method: GET
    data_selector: data
    params: {}
- name: patients
  endpoint:
    path: /patients
    method: GET
    data_selector: data
    params: {}
- name: queries
  endpoint:
    path: /queries
    method: GET
    data_selector: data
    params: {}
- name: patients
  endpoint:
    path: /patients
    method: GET
    data_selector: data
    params: {}
- name: health_records
  endpoint:
    path: /health_records
    method: GET
    data_selector: records
    params: {}
- name: patients
  endpoint:
    path: /v1/patients
    method: GET
    data_selector: data
    params: {}
- name: queries
  endpoint:
    path: /v1/queries
    method: POST
    data_selector: data
    params: {}
- name: patients
  endpoint:
    path: /patients
    method: GET
    data_selector: records
    params: {}
- name: queries
  endpoint:
    path: /queries
    method: POST
    data_selector: records
    params: {}
- name: patients
  endpoint:
    path: /api/patients
    method: GET
    data_selector: data
    params: {}
- name: records
  endpoint:
    path: /api/records
    method: GET
    data_selector: data
    params: {}
- name: patients
  endpoint:
    path: /v1/patients
    method: GET
    data_selector: data
    params: {}
- name: queries
  endpoint:
    path: /v1/queries
    method: GET
    data_selector: data
    params: {}
- name: patients
  endpoint:
    path: /patients
    method: POST
    data_selector: records
    params: {}
notes:
- Ensure that each patient has a unique patient_id, as reusing patient_id's for different
  patients will result in errors.
- Use the same POST endpoint to both create and update the patient demographics record
  for a patient_id.
- Ensure that each patient has a unique patient_id, as reusing patient_id's will result
  in errors.
- Use the same POST endpoint to both create and update the patient demographics.
- Requires setup of connected app in Particle Health
- Some data may return nulls in deeply nested fields
- Particle Health supports a RESTful web service based on the FHIR and C-CDA standards.
- 'OAuth2 Client‑Credentials → Bearer token (sent as `Authorization: Bearer` …)'
- Endpoints using continuation_token or page_token return the next token in the response;
  pass it back verbatim.
- Reach out to your Particle Health representative to create a service account and
  retrieve credentials.
- Retrieves a patient; system tries External and Particle IDs with OR logic.
- 202 = still zipping; 204 = no files.
- Returns a FHIR Bundle with paging and incremental sync.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- Removes a document.
- Triggers sandbox webhook notification events for testing.
- Updated about 1 month ago
- Retrieves a single document and its metadata.
- Creating a new Signature Key will automatically set the prior valid Signature Key
  to expire in 24 hours.
- Lists currently valid Signature Keys for a Notification (active and rotating).
- If Signature Keys have been rotated, it will return both the current active Signature
  Key as well as the soon to be expired Signature Key(s).
- Webhook delivery for this Notification stops immediately.
- Deletes a Signature Key immediately.
- Retrieves an org‑scoped Notification by resource name.
- Uses OAuth2 Bearer token for authentication
- Retrieves a Project by resource name (`projects/{project_id}`)
- Lists Notifications for a specific Project.
- Updates mutable fields such as display_name, npi, address, and lifecycle state.
- Creates a Notification under a specific Project.
- Creates a Service Account identity for API access.
- Creates a Project under your Organization for environment/config scoping.
- Searches Projects by simple field filter
- Updates mutable fields such as `display_name`, `npi`, `address`, and lifecycle `state`.
- Deletes a connection from a project
- 'Policy separate: Roles are managed via `setPolicy`.'
- Creating a new set of credentials will automatically set the prior valid set of
  credentials to be expired.
- Secret values are never returned after creation.
- 'Overwrite: Replaces existing bindings; getPolicy first if you need to merge.'
- Returns batch metadata, progress, and results summary.
- Updates mutable Connection fields
- Creates a Connection record (e.g., site or department) under a Project.
- Starts a FHIR query against the patient.
- This endpoint is not included by default. If you require access, please contact
  support@particlehealth.com.
- Query parameter filtering is not included by default. If you require access, please
  contact support@particlehealth.com.
- Developer focused guide for how to integrate with Particle and leverage retrieved
  data.
- Familiarize yourself with the key components of our platform.
- Returns a FHIR Bundle of all resources related to the patient with paging and date
  filters.
- Tokens are valid for 60 minutes; request a new token when it expires.
- 'Query Limit for Sandbox Data: Please note that we limit the number of queries within
  our Sandbox environment to 500 queries per organization per day.'
- The URL for this request expired after 30 days.
- Searches a resource type (Patient, Encounter, etc.) scoped by patient.
- Particle now supports batch querying.
- Patient search is no longer case sensitive.
- Queries are typically split into hundreds of subqueries during this process.
- Non-XML files retrieved from the networks (e.g., PDFs, PNGs, etc.) are not converted,
  but can still be retrieved via our C-CDA endpoints.
- Particle reserves the right to implement rate limits on all APIs.
- Local codes are internal codes used to reference clinical events.
- Local codes are internal standards unique to an EMR, Hospital System, or Facility.
- Particle converts C-CDA records to FHIR format for storage and querying.
- Particle is connected to all three nationwide networks, including some state health
  information exchanges.
- Healthix requires patient consent for data sharing.
- Reads a specific changed resource.
- Quality and accuracy of the demographics clients submit for network queries have
  the largest impact on the success of a query.
- Querying for the same person no more than once in a 48-hour time period is recommended.
- Every state has various laws regarding a patient's right to Opt-In or Opt-Out of
  data sharing.
- Endpoints may be offline for various reasons.
- Confidence matching algorithms against their database of demographics can affect
  data returned.
- Particle cannot ensure that this logic will be accurate in all instances as some
  small fraction of mismatched patient files could still make their way to the customer.
- Data Deduplication is an opt-in service provided by Particle.
- You must register the patient before querying or subscribing.
- Requests to unprovisioned formats return 403 Forbidden with data_format_not_allowed.
- You must register the patient first using POST /api/v2/patients
- Webhook recommended for real-time notification when results are ready
- Access our Sandbox environment to better understand clinical data and available
  data formats.
- Requests to unprovisioned formats will return 403 Forbidden
- Data retrieval is only available after a query reaches COMPLETE status
- Notifications are sent as HTTP Post requests.
- Particle Health Notifications follow the Cloud Events spec and therefore set the
  content-type header value to application/cloudevents+json.
- Please note that we limit the number of queries within our Sandbox environment to
  500 queries per organization per day.
- Data includes patient conditions such as Covid, Diabetes, and Lung Cancer.
- You are required to submit historical and net new records for any patient that you
  query for the purposes of testing your integration flow; these records must be posted
  within 1 month of initial query(s)
- You may not go live with production query volume until you demonstrate the ability
  to push data on a monthly basis to the Bi-directionality API.
- New Encounter & Discharge Summary Alerts added.
- Patient search in the UI is no longer case sensitive.
- Each document requires a patient_id, and this patient_id must already exist in Particle's
  Master Patient Index before a document can be successfully uploaded.
- Successful requests will return a 200 OK.
- Data transformation processes vary based on the format requested
- JWTs expire after 60mins and must be re-generated after that time.
- Particle supports both C-CDA and FHIR data formats.
- For customers requesting data in FHIR format, Particle converts C-CDA records to
  FHIR.
- Production is limited to 10,000 queries in a batch.
- Sandbox is limited to 10 queries in a batch.
- The maximum request size is 40MB both environments.
- A Project may only have 3 active batches running at any particular time.
- Batch may take up to 24 hours to complete.
- Healthix requires patients to provide consent for their records to be shared via
  the network.
- Healthix does not currently provide visibility into whether no documents were returned
  for a patient because consent is not present vs. if there are no documents present
  for the patient.
- Healthix recommends integrating the consent form into your standard patient onboarding
  workflows and forms, to ensure high completion rates.
- Healthix consent forms can be tailored to your organization by personalizing the
  material with your organization name and logo.
- A copy of the patient customer form must be stored and made available to Healthix
  if requested during their annual audit.
- It is recommended to query for the same person no more than once in a 48-hour time
  period.
- Endpoints within Particle's networks may be undergoing maintenance due to an update
  or error.
- Confidence matching algorithms against their database of demographics may cause
  scenarios where no data is returned.
- Deltas is an opt-in feature that must be enabled for your account by Particle.
- This implemented logic is sound but even so Particle cannot ensure that this logic
  will be accurate in all instances as some small fraction of mismatched patient files
  could still make their way to the customer.
- Particle currently does not convert any non-XML file into other downstream data
  formats.
- Image files returned should not be expected to have Radiology/Cardiology imaging.
- Data Deduplication is an opt-in service provided by Particle. Reach out to your
  Particle Health representative to enable it for your organization.
- C-CDA documents are source data and, as such, are not deduplicated by Particle.
- The maximum number of resources that the API will return per-page is 1000.
- The FHIR endpoint is currently disabled for v2 APIs due to implementation requirements.
- Requests to unprovisioned formats will return 403 Forbidden with error 'data_format_not_allowed'.
- Data retrieval is only available after a query reaches 'COMPLETE' status.
- Notifications change the relationship between request and response, as they provide
  proactive updates.
- Notifications follow the Cloud Events spec and set the content-type header value
  to application/cloudevents+json.
- If you have high sensitivity patients (e.g. high risk, post-discharge), you may
  query them more often (limit 2x/week)
- The data made available to the networks should be ‘Net New Data’ - i.e. data created
  in your system related to an event
- Each document requires a patient_id, which must exist in Particle's Master Patient
  Index before uploading.
- The Particle Management APIs will only be relevant to your organization if you fall
  into the 'Client A' or 'Client C' categorization diagramed above.
- Clients can choose to rotate their credentials at a cadence that makes the most
  sense for their workflow and security requirements.
- The maximum request size is 40MB for both environments.
- Batch queries are processed during off-peak hours and can take up to 24 hours to
  complete.
- All webhook notifications from Particle are signed. Verifying the signature on every
  incoming request is highly recommended.
- Webhook notifications are PHI-free and serve as a signal to retrieve full data.
- Discharge summaries may not be immediately available when the initial alert is sent.
- New Encounter Alerts are triggered when Particle's monitoring systems detect new
  clinical information for a patient subscribed to your Signal service.
- Ensure to generate a JSON web token for authentication.
- In Sandbox, you must manually create queries for patients.
- The maximum number of resources that the API will return per page is 1000.
- Referral Alerts are tied to specific registered referral organizations.
- Uses FHIR standard for API interactions.
- Typically you will only see a single `file_id` or `resource_id` for discharge summaries.
- If Particle identifies a discharge summary that is only available in an unstructured
  format, we will surface a `DocumentReferenceId` in the `Discharge Summary Alert`.
- A Particle Patient ID must be generated for a patient by uploading the patient's
  demographics via the Patients API before you can subscribe the patient to Signal
  via the Subscriptions API.
- When you create and delete subscriptions, for ADT notifications, these changes will
  only be effective at the start of the following month.
- Webhook endpoint must accept POST requests with JSON payloads
- Webhook must respond with a 200 HTTP status code within 30 seconds
- Webhook must use HTTPS protocol
- Each response is limited to 1000 queries.
- Particle Signal integrates seamlessly into existing workflows.
- Webhook notifications from Particle are signed and should be verified.
- Transition Alerts provide notifications for patient admissions, discharges, and
  transfers.
- Webhook notifications are PHI-free.
- New Encounter Alerts are triggered by new clinical information for a subscribed
  patient.
- Navigator leverages identified medical records to enable immediate, patient-centered
  actions that drive growth.
- Ensure to trigger a query and a Signal Alert webhook notifications to your callback
  endpoint in Sandbox.
- You do not need to pre-register the callback URL in Sandbox.
- Not all providers are part of health networks yet.
- Some data exists in less accessible formats like PDF or TIFF files.
- Mobility of populations poses a significant challenge.
- Queries are to be initiated for treatment purposes only.
- Medication fill data provides a more complete and accurate picture of the medications
  a patient is actively taking
- This partnership gives Particle’s customers access to pharmacy fill and claims based
  patient medication history data that covers 99% of U.S. pharmacies and 96% of U.S.
  patients.
- Referral Alerts are tied to specific registered organizations for monitoring.
- Discharge summaries are one of the most important sources of data for managing care
  of high-risk patient populations.
- When you subscribe / unsubscribe patients in Signal, these changes will only be
  effective for your ADT fees at the start of the following month.
- Signal delivers alerts via HTTP POST requests to your configured webhook endpoint.
- Webhook endpoint must accept POST requests with JSON payloads and respond with a
  200 HTTP status code within 30 seconds.
- Purpose of Use is a required field when querying.
- Each response is limited to 1000 queries, if there are more add the following to
  the next request under the query param 'continuation_token'
- OAuth2 authentication is required for all API calls.
- Each response is limited to 1000 queries, if there are more add the following to
  the next request under the query param 'continuation_token'.
- Each response is limited to 1000 queries, if there are more add the continuation_token
  to the next request.
- 'Purpose of Use is a required field when querying. Valid Purposes of Use are: Treatment,
  Payment, Operations, Coverage and Individual Access, however, currently the healthcare
  network responds only for the Treatment Purpose of Use.'
- Some objects like Contact may return nulls in deeply nested fields
- Users must reset their temporary password upon first login.
- MFA is required for each user login.
- Visit the Supported Flat Data Domains for guidance on how to make sense of Particle's
  Flat data format output, how to link the different data models together, and how
  to filter data to exactly what is needed for your clinical workflows.
- Uses OAuth2 with refresh token — requires setup of connected app in Particle Health
- Data is returned in JSON format
- Some patient populations have up to a 20% likelihood to be readmitted within 30
  days.
- 'Purpose of Use is a required field when querying. Valid Purposes of Use are: Treatment,
  Payment, Operations, Coverage and Individual Access.'
- Purpose of Use is required when querying.
- Requires setup of OAuth2 for authentication.
- Patient consent is required for the Individual Access POU because it falls outside
  the scope of Treatment, Payment, and Health Care Operations (TPO) purposes as defined
  under HIPAA.
- 'Contact: delegation-of-authority@particlehealth.com'
- Testing delegated transactions before going live in August-September.
- Testing can start on Aug 12 in Carequality's staging environment
- Cut over is the week of Sept 15, 2025.
- Final deadline is on Sept 22, 2025.
- Requires OAuth2 authentication for access
- Currently the healthcare network responds only for the Treatment Purpose of Use.
- Currently, the healthcare network responds only for the Treatment Purpose of Use.
- API requires patient consent for accessing PHI.
- Rate limits apply to API requests.
- Patient consent is required for the Individual Access POU.
- This policy is in place for all future exchange purposes as well.
- If your software acts as a System of the Principal-- providing the tools for Providers
  to initiate query request -- you may not need authorization from the Principal.
- Unlike the national networks, Healthix requires patients to provide consent for
  their records to be shared via the network.
- You must use the Patients API to create a record for the patient that includes their
  consent details before you can query Healthix for the patient.
- Healthix does not require you to provide a copy of the consent form for each patient.
errors:
- Overlay detected. Please verify the patient_id and demographics.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: Bad Request: Your request is invalid. Look at the error message to learn why.'
- '401: Unauthorized: You used incorrect authentication credentials.'
- '403: Forbidden: You have insufficient permissions to access the requested resource.'
- '404: Not Found: The specified resource could not be found.'
- '405: Method Not Allowed: You used an invalid HTTP method.'
- '406: Not Acceptable: You requested a format that we don''t support.'
- '410: Gone: The resource requested has expired and been removed from our servers.'
- '412: Precondition Failed: An operation might still be in progress.'
- '429: Too Many Requests: You''ve made too many requests in a short period of time.
  Contact support if you feel this is in error.'
- '500: Internal Server Error: Something went wrong on our end. Try again in a bit.
  We''ll also be alerted automatically to look into it.'
- '503: Service Unavailable: We''re temporarily offline for maintenance. Try again
  in a bit.'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Recheck authentication credentials'
- '406 Not Acceptable: Check the requested content type'
- 500 Internal Server Error
- '400 Bad Request: Invalid request parameters'
- '401 Unauthorized: Authentication credentials are missing or invalid'
- '404 Not Found: The requested resource could not be found'
- '406 Not Acceptable: The requested resource is not available in the requested format'
- 400 Bad Request
- 401 Unauthorized
- 406 Not Acceptable
- '400 Bad Request: Check request parameters'
- '404 Not Found: Verify endpoint'
- '406 Not Acceptable: Content type not supported'
- '401 Unauthorized: Recheck authentication'
- '406 Not Acceptable: Check request format'
- '429 Too Many Requests: Rate limit exceeded'
- '401 Unauthorized: Invalid authentication credentials'
- '404 Not Found: The specified resource could not be found'
- '400 Bad Request: Check parameters for correctness'
- '401 Unauthorized: Ensure valid authentication'
- '406 Not Acceptable: Review accepted response formats'
- '429 Too Many Requests: Reduce the rate of requests'
- '400 Bad Request: message'
- '401 Unauthorized: message'
- '404 Not Found: message'
- '400 Bad Request: The request is invalid'
- '401 Unauthorized: Authentication credentials were missing or incorrect'
- '406 Not Acceptable: The requested resource is not available in a format that is
  acceptable'
- '500 Internal Server Error: An error occurred on the server'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '406 Not Acceptable: Check Accept headers'
- '404 Not Found: Verify the Particle Patient ID'
- '406 Not Acceptable: Ensure the request format is correct'
- '500 Internal Server Error: Try again later'
- '400 Bad Request: Invalid input'
- '401 Unauthorized: Authentication failed'
- '406 Not Acceptable: Request format not acceptable'
- 404 Not Found
- '406 Not Acceptable: Check the Accept headers'
- '500 Internal Server Error: Retry the request'
- '406 Not Acceptable: Ensure requested format is supported'
- 400 Returned when the request is malformed or missing required fields.
- 401 Returned when the caller does not have permission to access the resource.
- 404 Returned when the resource does not exist.
- 429 Returned when the caller has exceeded the rate limit.
- 500 Server error
- '406 Not Acceptable: Check Accept header'
- '500 Internal Server Error: Check server status'
- '400: Returned when the request is malformed or missing required fields.'
- '401: Returned when the caller does not have permission to access the resource.'
- '404: Returned when the resource does not exist.'
- '429: Returned when the caller has exceeded the rate limit.'
- '500: Server error'
- '401 Unauthorized: Authentication is required'
- '406 Not Acceptable: Requested format not acceptable'
- 429 Too Many Requests
- '401 Unauthorized: Authentication required'
- '404 Not Found: Resource not found'
- '401 Unauthorized: Check authentication'
- '406 Not Acceptable: Review acceptable response formats'
- '406 Not Acceptable: Check request headers'
- '406 Not Acceptable: message'
- '406 Not Acceptable: Requested resource is not available'
- 412 Precondition Failed
- '400 Bad Request: Check the request parameters.'
- '404 Not Found: Verify the patient ID.'
- '406 Not Acceptable: Ensure the correct headers are set.'
- TIMEOUT
- '429 Too Many Requests: Implement a backoff policy when a 429 response is detected.'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Check your authentication credentials'
- '406 Not Acceptable: Ensure the ''accept'' header is correct'
- 'PENDING: query accepted but not started'
- 'RUNNING: records are being retrieved'
- 'COMPLETE: results are available'
- 'FAILED: query failed'
- '403 Forbidden: data_format_not_allowed'
- Empty collections returned if no clinical data is found
- 'Invalid signature: The notification signature could not be verified.'
- Not updating patient records in conjunction with querying
- Historical records are not provided for all patients
- Data being shared is not helpful to a provider at the point of care
- '429 Too Many Requests: Implement a backoff policy when a `429` response is detected.'
- '429: Too Many Requests - You will receive this error if you attempt to create a
  new batch request while 3 batches are currently active.'
- '403: Forbidden - Unsupported query type'
- '429: Too Many Requests - Limit of 3 active batches exceeded'
- No documents returned for a patient without consent
- '404 Not Found: If the particle_patient_id provided is not found.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '403 Forbidden: Requests to unprovisioned formats return data_format_not_allowed.'
- '403 Forbidden: ''data_format_not_allowed'''
- Empty collections will be returned if no clinical data is found for a patient.
- 'Invalid signature: Check the x-ph-signature-256 header for signature verification.'
- 'Connectivity: Not updating patient records in conjunction with querying'
- 'Query Responder Obligations: Historical records are not provided for all patients
  and/or any new data or resources available in a customer’s systems are not continuously
  made available in a timely fashion'
- 'Dataset: Data being shared is not helpful to a provider at the point of care'
- '401 Unauthorized: Recheck JWT validity or scopes'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '403: Forbidden if query types other than CCDA, FHIR, or FLAT are used.'
- '429: Too Many Requests when attempting to create a new batch while 3 batches are
  currently active.'
- 'Not Receiving Alerts: Verify your callback endpoint is publicly accessible and
  correctly configured with Particle.'
- 'Webhook Signature Verification Failing: Double-check your secret key used for HMAC
  verification.'
- '404 Not Found: The particle_patient_id provided is not found.'
- '400 Bad Request: Check the request payload for required fields.'
- '401 Unauthorized: Ensure valid token is provided.'
- '404 Not Found: Verify the endpoint and patient ID.'
- Webhook endpoint not accessible or returning non-200 responses
- Patient not active in connected healthcare networks
- Incorrect subscription configuration
- Authentication issues with webhook requests
- Verify your callback endpoint is publicly accessible and correctly configured.
- Check your server logs for incoming requests that might be failing.
- Ensure your API key is valid and has the necessary permissions.
- '400 Bad Request: Check the request payload for errors.'
- '404 Not Found: The requested resource could not be found.'
- '500 Internal Server Error: An error occurred on the server.'
- '401 Unauthorized: Generate a new JSON web token.'
- '422 Unprocessable Entity: Check the patient details or subscription format.'
- '400 Bad Request: Check the payload structure when registering organizations.'
- '404 Not Found: Ensure the endpoint is correct for retrieving alerts.'
- 'HTTP status 204: Indicates successful deletion of subscriptions'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '401 Unauthorized: Check your credentials.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check your API key or token'
- '404 Not Found: The requested resource does not exist'
- '429 Too Many Requests: Reduce the frequency of your requests.'
- '404 Not Found: Ensure the endpoint is correct.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Ensure valid credentials.'
- '401 Unauthorized: Check your credentials'
- '404 Not Found: Verify the endpoint path'
- '400 Bad Request: Check request parameters and format.'
- '401 Unauthorized: Verify OAuth token and permissions.'
- '429 Too Many Requests: Rate limit exceeded, try again later.'
- Please reach out for any other questions, so far, here's a few! We're committed
  to trust on the network and collaboration between implementers.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Service Account
  - client ID
  - client secret
  - Authentication
  - Patient
  - Subscription
  - Authorization
  - Token
client:
  base_url: https://sandbox.particlehealth.com
  auth:
    type: oauth2
    flow: jwt
source_metadata: null
