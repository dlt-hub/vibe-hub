resources:
- name: helloworld
  endpoint:
    path: /src/helloworld/module.go
    method: GET
    data_selector: module
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: GET
- name: greet
  endpoint:
    path: /greet/:nickname
    method: GET
- name: api
  endpoint:
    path: /api
    method: GET
- name: hello
  endpoint:
    path: /hello
    method: GET
- name: greet
  endpoint:
    path: /greet/:nickname
    method: GET
- name: api
  endpoint:
    path: /api
    method: GET
- name: requestlogger
  endpoint:
    path: /requestlogger
    method: GET
- name: prefixrouter
  endpoint:
    path: /prefixrouter
    method: GET
- name: pugtemplate
  endpoint:
    path: /pugtemplate
    method: GET
- name: locale
  endpoint:
    path: /locale
    method: GET
- name: opentelemetry
  endpoint:
    path: /opentelemetry
    method: GET
- name: auth
  endpoint:
    path: /auth
    method: GET
- name: product
  endpoint:
    path: /product
    method: GET
- name: price
  endpoint:
    path: /price
    method: GET
- name: category
  endpoint:
    path: /category
    method: GET
- name: cart
  endpoint:
    path: /cart
    method: GET
- name: customer
  endpoint:
    path: /customer
    method: GET
- name: checkout
  endpoint:
    path: /checkout
    method: GET
- name: csvcommerce_product
  endpoint:
    path: /csvcommerce/product
    method: GET
- name: csvcommerce_search
  endpoint:
    path: /csvcommerce/search
    method: GET
- name: rootRedirectHandler
  endpoint:
    path: /prefixrouter/rootRedirectHandler
    method: GET
    data_selector: records
    params:
      enabled: true
      redirectTarget: /en/
- name: http_frontend_cache
  endpoint:
    path: /cache/httpfrontend
    method: GET
    data_selector: cache_entries
    params: {}
- name: root_redirect_handler
  endpoint:
    path: /
    method: GET
    data_selector: redirectTarget
    params:
      enabled: 'true'
- name: templates
  endpoint:
    path: /config/config.yml
    method: GET
    data_selector: gotemplates.engine.templates.basepath
- name: layouts
  endpoint:
    path: /config/config.yml
    method: GET
    data_selector: gotemplates.engine.layout.dir
- name: HTTPFrontend
  endpoint:
    path: /flamingo/httpcache
    method: GET
    data_selector: cache
    params: {}
- name: ping
  endpoint:
    path: /status/ping
    method: GET
    data_selector: ok
    params: {}
- name: healthcheck
  endpoint:
    path: /status/healthcheck
    method: GET
    data_selector: status
    params: {}
- name: locale_configuration
  endpoint:
    path: /locale/configuration
    method: GET
    data_selector: locale
    params: {}
- name: ping
  endpoint:
    path: /status/ping
    method: GET
- name: healthcheck
  endpoint:
    path: /status/healthcheck
    method: GET
- name: translations
  endpoint:
    path: /translations
    method: GET
    data_selector: translations
    params: {}
- name: locale
  endpoint:
    path: /locale
    method: GET
    data_selector: locale
    params: {}
- name: locale
  endpoint:
    path: /localization
    method: GET
    data_selector: locale_data
- name: security
  endpoint:
    path: /security
    method: GET
    data_selector: permissions
    params: {}
- name: security
  endpoint:
    path: /security
    method: GET
    data_selector: permissions
    params: {}
- name: AddressFormDataDecoder
  endpoint:
    path: /address/form/data/decoder
    method: POST
    data_selector: formData
    params: {}
- name: AddressFormDataValidator
  endpoint:
    path: /address/form/data/validator
    method: POST
    data_selector: formData
    params: {}
- name: csrf
  endpoint:
    path: /csrf
    method: POST
    data_selector: csrf
    params:
      all: false
      secret: somethingSuperSecret
      ttl: 900
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: product
  endpoint:
    path: /domain/ProductService
    method: GET
    data_selector: ''
    params: {}
- name: search
  endpoint:
    path: /domain/SearchService
    method: GET
    data_selector: ''
    params: {}
- name: product
  endpoint:
    path: commerce/product/fakeservice
    method: GET
    data_selector: ''
    params:
      enabled: 'true'
      currency: EUR
      jsonTestDataFolder: testdata/products
      jsonTestDataLiveSearch: testdata/livesearch/livesearch.json
      jsonTestDataCategoryFacetItems: testdata/facets/categoryFacetItems.json
      defaultProducts: 'true'
- name: category
  endpoint:
    path: /category
    method: GET
    data_selector: categories
    params: {}
- name: category_tree
  endpoint:
    path: /category/tree
    method: GET
    data_selector: trees
    params: {}
- name: category
  endpoint:
    path: /category
    method: GET
    data_selector: categories
- name: category_tree
  endpoint:
    path: /category/tree
    method: GET
    data_selector: tree
- name: cart
  endpoint:
    path: /commerce/cart
    method: GET
    data_selector: cart
    params: {}
- name: DeliveryInfo
  endpoint:
    path: /delivery/info
    method: GET
    data_selector: DeliveryInfo
    params: {}
- name: DeliveryInfo
  endpoint:
    path: /path/to/delivery/info
    method: GET
    data_selector: deliveryInfo
    params: {}
- name: place_order
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: place_order
  endpoint:
    path: /graphql/checkout/placeorder
    method: POST
    data_selector: data
    params: {}
- name: place_order_lock
  endpoint:
    path: /commerce/checkout/placeorder/lock
    method: GET
    data_selector: type
    params: {}
- name: place_order_lock
  endpoint:
    path: commerce.checkout.placeorder.lock
    method: GET
    data_selector: type
    params: {}
- name: search
  endpoint:
    path: /search
    method: GET
- name: Price
  endpoint:
    path: /price
    method: GET
    data_selector: price_data
- name: Charge
  endpoint:
    path: /charge
    method: GET
    data_selector: charge_data
- name: WebCartPaymentGateway
  endpoint:
    path: /webcartpaymentgateway
    method: POST
    data_selector: result
    params: {}
- name: OfflineWebCartPaymentGateway
  endpoint:
    path: /offlinewebcartpaymentgateway
    method: POST
    data_selector: result
    params:
      enableOfflinePaymentGateway: 'true'
- name: WebCartPaymentGateway
  endpoint:
    path: /payment/webcart
    method: POST
    data_selector: paymentResult
- name: OfflineWebCartPaymentGateway
  endpoint:
    path: /payment/offline
    method: POST
    data_selector: offlinePaymentResult
- name: error_templates
  endpoint:
    path: /frontend/src/page/error
    method: GET
    data_selector: templates
    params: {}
- name: frontend_build
  endpoint:
    path: /frontend/dist
    method: GET
    data_selector: build_results
    params: {}
- name: flamingo_carotene_core
  endpoint:
    path: /flamingo-carotene-core
    method: GET
    data_selector: modules
    params: {}
- name: flamingo_carotene_pug
  endpoint:
    path: /flamingo-carotene-pug
    method: GET
    data_selector: modules
    params: {}
- name: flamingo_carotene_webpack
  endpoint:
    path: /flamingo-carotene-webpack
    method: GET
    data_selector: modules
    params: {}
- name: flamingo_carotene_static_asset
  endpoint:
    path: /flamingo-carotene-static-asset
    method: GET
    data_selector: modules
    params: {}
- name: flamingo_carotene_modules
  endpoint:
    path: /flamingo_carotene/modules
    method: GET
    data_selector: modules
- name: hello_template
  endpoint:
    path: /frontend/src/page/hello/hello.pug
    method: GET
    data_selector: content
    params: {}
- name: base_template
  endpoint:
    path: /frontend/src/template/base/base.pug
    method: GET
    data_selector: content
    params: {}
- name: flamingoCarotene
  endpoint:
    path: /flamingo-carotene
    method: GET
    data_selector: records
- name: flamingoCarotene
  endpoint:
    path: /flamingo-carotene
    method: GET
    data_selector: records
    params: {}
- name: eslint
  endpoint:
    path: path/to/the/node/module
    method: GET
    data_selector: config
    params: {}
- name: eslint
  endpoint:
    path: /path/to/the/node/module
    method: GET
- name: postcss
  endpoint:
    path: /postcss
    method: GET
    data_selector: module_info
    params: {}
- name: postcss
  endpoint:
    path: /postcss
    method: GET
    data_selector: config
    params: {}
- name: pugLint
  endpoint:
    path: __dirname
    method: CONFIGURE
    data_selector: config.paths.pugLint
    params: {}
- name: config
  endpoint:
    path: pugLint
    method: CONFIGURE
    data_selector: config.pugLint
    params:
      filesPattern: /**/*.pug
      breakOnError: false
- name: pug
  endpoint:
    path: /pug
    method: POST
    data_selector: ast
- name: pugLint
  endpoint:
    path: config.paths.pugLint
    method: GET
    data_selector: __dirname
    params: {}
- name: pugLintConfig
  endpoint:
    path: config.pugLint
    method: GET
    data_selector:
      filesPattern: /**/*.pug
      breakOnError: false
    params: {}
- name: sassLint
  endpoint:
    path: __dirname
    method: N/A
    data_selector: N/A
    params: {}
- name: pug
  endpoint:
    path: /pug
    method: POST
    data_selector: templates
    params: {}
- name: sassLint
  endpoint:
    path: __dirname
    method: POST
    data_selector: config.sassLint
    params: {}
- name: smooth_scroll
  endpoint:
    path: /smooth_scroll
    method: POST
    data_selector: animation
    params: {}
- name: static_asset
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: state
  endpoint:
    path: /flamingo-carotene-state-manager
    method: GET
    data_selector: state
    params: {}
- name: svgIconSprite
  endpoint:
    path: /dist/svgIconSprite
    method: GET
    data_selector: svg
    params: {}
- name: svgIconSpriteBehavior
  endpoint:
    path: /dist/svgIconSprite.behavior
    method: GET
    data_selector: behavior
    params: {}
- name: webpack
  endpoint:
    path: /config/webpack
    method: GET
    data_selector: config.webpack
- name: static_asset
  endpoint:
    path: /config/staticAsset
    method: POST
    data_selector: assetPaths
    params: {}
- name: weather
  endpoint:
    path: /weather/wiesbaden
    method: GET
    data_selector: weather
    params: {}
- name: svgIconSprite
  endpoint:
    path: /dist/svgIconSprite
    method: GET
- name: svgIconSpriteBehavior
  endpoint:
    path: /dist/svgIconSprite.behavior
    method: GET
- name: webpack
  endpoint:
    path: /flamingo-carotene-webpack
    method: GET
    data_selector: config
    params: {}
- name: helloworld
  endpoint:
    path: /src/helloworld/module.go
    method: GET
    data_selector: module
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: null
    params: {}
- name: greet
  endpoint:
    path: /greet/:nickname
    method: GET
    data_selector: null
    params: {}
- name: api
  endpoint:
    path: /api
    method: GET
    data_selector: null
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: GET
- name: greet
  endpoint:
    path: /greet/:nickname
    method: GET
- name: api
  endpoint:
    path: /api
    method: GET
- name: helloworld
  endpoint:
    path: /src/helloworld/module.go
    method: GET
    data_selector: module
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: GET
- name: greet
  endpoint:
    path: /greet/:nickname
    method: GET
- name: api
  endpoint:
    path: /api
    method: GET
- name: RootRedirectHandler
  endpoint:
    path: /prefixrouter/rootRedirectHandler
    method: GET
    data_selector: enabled
    params:
      enabled: true
      redirectTarget: /en/
- name: HTTPFrontend
  endpoint:
    path: injector.Bind((*cache.HTTPFrontend)(nil)).AnnotatedWith("myservice").In(dingo.Singleton)
    method: GET
    data_selector: cache metadata
    params: {}
- name: ping
  endpoint:
    path: /status/ping
    method: GET
- name: healthcheck
  endpoint:
    path: /status/healthcheck
    method: GET
- name: config
  endpoint:
    path: /config
    method: GET
    data_selector: config
    params: {}
- name: translations
  endpoint:
    path: /translations
    method: GET
    data_selector: records
    params: {}
- name: locale
  endpoint:
    path: /locale
    method: GET
    data_selector: locale
    params: {}
- name: security
  endpoint:
    path: /security
    method: GET
    data_selector: permissions
    params: {}
- name: root_redirect_handler
  endpoint:
    path: prefixrouter.rootRedirectHandler
    method: GET
    data_selector: enabled
    params:
      redirectTarget: /en/
- name: caching_http_responses
  endpoint:
    path: /caching/http/responses
    method: GET
    data_selector: responses
    params: {}
- name: cache_backends
  endpoint:
    path: /cache/backends
    method: GET
    data_selector: backends
    params: {}
- name: templates
  endpoint:
    path: /config/config.yml
    method: GET
    data_selector: gotemplates.engine.templates.basepath
    params: {}
- name: layouts
  endpoint:
    path: /config/config.yml
    method: GET
    data_selector: gotemplates.layout.dir
    params: {}
- name: ping
  endpoint:
    path: /status/ping
    method: GET
- name: healthcheck
  endpoint:
    path: /status/healthcheck
    method: GET
- name: locale_configuration
  endpoint:
    path: /locale/configuration
    method: GET
    data_selector: locale
    params: {}
- name: locale
  endpoint:
    path: /locale
    method: GET
    data_selector: locale
    params: {}
- name: csrf
  endpoint:
    path: /csrf
    method: POST
    data_selector: csrf
    params:
      all: false
      secret: somethingSuperSecret
      ttl: 900
- name: security
  endpoint:
    path: /security
    method: GET
    data_selector: security
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: FormDataDecoder
  endpoint:
    path: /path/to/decoder
    method: GET
    data_selector: records
    params: {}
- name: FormDataValidator
  endpoint:
    path: /path/to/validator
    method: GET
    data_selector: records
    params: {}
- name: unit_tests
  endpoint:
    path: /test/unit
    method: GET
    data_selector: tests
- name: integration_tests
  endpoint:
    path: /test/integrationtest
    method: GET
    data_selector: tests
- name: contract_testing
  endpoint:
    path: /test/contract
    method: GET
    data_selector: tests
- name: product
  endpoint:
    path: /product
    method: GET
    data_selector: products
- name: find_products
  endpoint:
    path: /findProducts
    method: GET
    data_selector: searchResults
- name: product
  endpoint:
    path: domain.ProductService
    method: ''
    data_selector: ''
    params: {}
- name: search
  endpoint:
    path: domain.SearchService
    method: ''
    data_selector: ''
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
- name: category
  endpoint:
    path: /category
    method: GET
    data_selector: categories
    params: {}
- name: cart
  endpoint:
    path: /commerce/cart
    method: GET
    data_selector: cart_data
    params: {}
- name: DeliveryInfo
  endpoint:
    path: /DeliveryInfo
    method: GET
- name: place_order
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.placeOrder
    params: {}
- name: place_order_lock
  endpoint:
    path: /commerce/checkout/placeorder/lock
    method: GET
    data_selector: type
    params: {}
- name: product
  endpoint:
    path: domain.ProductService
    method: GET
    data_selector: ''
    params:
      enabled: true
      currency: EUR
      jsonTestDataFolder: testdata/products
      jsonTestDataLiveSearch: testdata/livesearch/livesearch.json
      jsonTestDataCategoryFacetItems: testdata/facets/categoryFacetItems.json
      defaultProducts: true
- name: search
  endpoint:
    path: domain.SearchService
    method: GET
    data_selector: ''
    params: {}
- name: category
  endpoint:
    path: /category
    method: GET
- name: category_tree
  endpoint:
    path: /category/tree
    method: GET
- name: DeliveryInfo
  endpoint:
    path: /delivery/info
    method: GET
    data_selector: deliveryInfo
    params: {}
- name: place_order
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: error_templates
  endpoint:
    path: /frontend/src/page/error/
    method: POST
    data_selector: templates
    params: {}
- name: frontend_build
  endpoint:
    path: /frontend/dist/
    method: GET
    data_selector: build_results
    params: {}
- name: place_order_lock
  endpoint:
    path: commerce.checkout.placeorder.lock
    method: GET
    data_selector: type
    params: {}
- name: Build and Build-Helper Modules
  endpoint:
    path: /modules/build
    method: GET
    data_selector: modules
    params: {}
- name: Client Modules
  endpoint:
    path: /modules/client
    method: GET
    data_selector: modules
    params: {}
- name: Search
  endpoint:
    path: /search
    method: GET
- name: w3cDatalayer
  endpoint:
    path: /w3cDatalayer
    method: GET
    data_selector: data
    params: {}
- name: Price
  endpoint:
    path: /price
    method: GET
    data_selector: prices
- name: Charge
  endpoint:
    path: /charge
    method: GET
    data_selector: charges
- name: flamingoCarotene
  endpoint:
    path: /flamingo-carotene
    method: GET
    data_selector: modules
    params: {}
- name: WebCartPaymentGateway
  endpoint:
    path: /payment/webcart
    method: POST
    data_selector: payment
    params: {}
- name: OfflineWebCartPaymentGateway
  endpoint:
    path: /payment/offlinewebcart
    method: POST
    data_selector: offline_payment
    params:
      enableOfflinePaymentGateway: true
- name: devServer
  endpoint:
    path: /dev
    method: GET
    data_selector: devServer
    params: {}
- name: eslint
  endpoint:
    path: path/to/the/node/module
    method: GET
- name: postcss_loader_injection
  endpoint:
    path: /flamingo-carotene-postcss
    method: GET
    data_selector: module_info
- name: pugLint
  endpoint:
    path: config.paths.pugLint
    method: GET
    data_selector: pugLint
    params: {}
- name: filesPattern
  endpoint:
    path: config.pugLint.filesPattern
    method: GET
    data_selector: filesPattern
    params: {}
- name: breakOnError
  endpoint:
    path: config.pugLint.breakOnError
    method: GET
    data_selector: breakOnError
    params: {}
- name: pug
  endpoint:
    path: /flamingo-carotene-pug
    method: GET
    data_selector: ast
- name: sassLint
  endpoint:
    path: __dirname
    method: POST
    data_selector: config.paths.sassLint
    params: {}
- name: flamingoCarotene
  endpoint:
    path: flamingoCarotenePath
- name: project
  endpoint:
    path: projectPath
- name: src
  endpoint:
    path: path.join(projectPath, 'src')
- name: dist
  endpoint:
    path: path.join(projectPath, 'dist')
- name: eslint
  endpoint:
    path: /path/to/the/node/module
    method: GET
    data_selector: eslintConfig
- name: static_asset
  endpoint:
    path: /module/flamingo-carotene-static-asset
    method: GET
    data_selector: config.staticAsset
    params: {}
- name: pugLint
  endpoint:
    path: config.paths.pugLint
    method: GET
    data_selector: paths
    params: {}
- name: pugLintConfig
  endpoint:
    path: config.pugLint
    method: GET
    data_selector: pugLint
    params: {}
- name: webpack
  endpoint:
    path: /config/webpack
    method: GET
    data_selector: webpackConfig
    params: {}
- name: helloworld
  endpoint:
    path: /src/helloworld/module.go
    method: GET
- name: pug
  endpoint:
    path: /pug
    method: POST
    data_selector: templates
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: GET
- name: greet
  endpoint:
    path: /greet/:nickname
    method: GET
- name: api
  endpoint:
    path: /api
    method: GET
- name: sassLint
  endpoint:
    path: /config/paths/sassLint
    method: GET
    data_selector: __dirname
- name: sassLintConfig
  endpoint:
    path: /config/sassLint
    method: GET
    data_selector: breakOnError
    params:
      breakOnError: false
- name: SmoothScrollTo
  endpoint:
    path: /flamingo-carotene-smooth-scroll-to
    method: GET
- name: weather
  endpoint:
    path: /data/2.5/weather
    method: GET
- name: static_asset
  endpoint:
    path: /static/assets
    method: COPY
    data_selector: assets
    params: {}
- name: svgIconSprite
  endpoint:
    path: /flamingo-carotene-webpack-svg-sprite/dist/svgIconSprite
    method: GET
    data_selector: icons
- name: webpack
  endpoint:
    path: /webpack/config
    method: GET
    data_selector: config
    params: {}
- name: helloworld
  endpoint:
    path: /src/helloworld/module.go
    method: GET
    data_selector: module
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: GET
- name: greet
  endpoint:
    path: /greet/:nickname
    method: GET
- name: api
  endpoint:
    path: /api
    method: GET
notes:
- The 'flamingo.App()' method is the main entry point to run a flamingo application.
- Uses a go template for rendering HTML.
- Healthcheck module available on port 13210.
- Uses dependency injection for controller initialization
- Routes need to be registered with the RouterModule
- A configuration context allows to run several different Flamingo powered sites in
  one installation.
- Contexts can be nested in a tree like structure - this allows you to inherit the
  properties of contexts from parents to children.
- Logging is an essential part of any application, as it helps in tracking events,
  debugging issues, and monitoring the application’s behavior.
- The Flamingo Bootstrap takes care of defining configuration areas and loading configurations.
- Flamingo has a strong module concept for building pluggable and maintainable web
  applications.
- Supports advanced template engines above the Go standard templates.
- Proper session backend like redis is required for authentication.
- This module is deprecated and will likely be removed in future versions of flamingo.
  Please use the OpenTelemetry module instead.
- The auth package needs a proper session backend like redis, the cookie backend does
  not provide enough space for jwt tokens.
- 'We refactored the caching of HTTP requests, added more backends and moved it into
  a separate module: flamingo.me/httpcache'
- You can set the prefix in a configuration by using different configs for flamingo.router.*
- 'Currently there are the following backends available: inMemoryCache, fileBackend,
  nullBackend.'
- The healthcheck module requires the systemendpoint module and its second server.
- The template directory's name can also be changed within your config but it defaults
  to 'templates' if unset.
- You can configure the name of your layouts folder in your project configuration,
  although it must always reside inside of your templates folder.
- Provides localization features including translations of labels and local display
  of dates, prices, and numbers.
- This package provides localization features
- Translations of Labels
- Local display of Dates
- Local display of prices and numbers
- The locale used for labels is set to en-gb
- Fallback locales include en-gb
- Label file location is translations/en_GB.all.json
- Multiple label file locations can be provided
- This module is deprecated, flamingo.me/flamingo/v3/core/auth should be used instead.
- This package provides localization features for translations of labels, local display
  of dates, prices, and numbers.
- Permissions hierarchy provides automatic inclusion of child permissions into list
  of permissions if their parent is fetched via role providers.
- Faking is easy and also allows for local independent testing.
- Mocking has the advantage to test your application in a more production-like setup.
- During development, one sometimes encounter something one did not expect to see.
  In that case, we have prepared several tools that can help you get things working.
- Dingo allows to request the injection of provider instead of instances.
- Use a Provider instead of requesting the Type directly when for lazy binding, if
  you need new instances on demand.
- Form package provides out-of-the-box support for forms handling.
- Form service can implement all of those three interfaces, but it must implement
  at least one of them.
- Uses dingo injector for service registration
- Custom validators and form services can be globally defined
- Pug.js is by default compiled to JavaScript, and executed as HTML.
- Extensive usage of JavaScript is not advised.
- Partials are requested by setting the HTTP Header X-Partial
- The metrics endpoint is provided under the systemendpoint. Once the module is activated
  you can access them via http://localhost:13210/metrics
- Flamingo Commerce is built on top of the Flamingo Framework
- This package provides effective observability to the flamingo ecosystem using the
  OpenTelemetry instrumentation library.
- Uses fake services for product and search responses.
- The configuration option `jsonTestDataFolder` tells fakeservices to look for json
  files with product data in the defined folder.
- The configuration option `jsonTestDataLiveSearch` provides a possibility to fake
  live search results separately.
- The configuration option `jsonTestDataCategoryFacetItems` provides a possibility
  to fake the contents of the category facet individually.
- The configuration option `defaultProducts` toggles the delivery of default test
  products.
- Provides data controller to access category and tree from inside templates
- For product search service, depends on product package
- You can set the templates for the category single view (if it should be different
  from default)
- You can provide a path for json files that include the data for the categories and
  the tree via commerce.category.fakeService.testDataFolder.
- enable the secondary adapters for the cart services.  (e.g. for testing or development
  mode)
- enable the cache
- set the default delivery code that is used if no other is given
- enable the secondary adapters for the cart services.
- 'Valid codes for DeliveryInfo include: delivery, pickup_store_LOCATIONCODE, pickup_collection_LOCATIONCODE'
- 'Valid delivery codes include: delivery, pickup_store_LOCATIONCODE, pickup_collection_LOCATIONCODE'
- 'DefaultDeliveryInfoBuilder uses the convention: WORKFLOW_LOCATIONTYPE_LOCATIONCODE_METHOD_anythingelse'
- Uses memory for context store — only suited for single node applications, use redis
  for multi node setup
- If using the new place order process, ensure to set flamingo.session.saveMode to
  'OnWrite'.
- In-memory context store is only suited for single node applications; use redis for
  multi-node setup.
- Default lock implementation provides a mutex based in memory adapter for the TryLock
  port.
- This lock is only suited for single node applications, please use redis for multi
  node setup
- An implementation needs to provide an adapter for the CustomerService as well as
  an implementation of the Customer interface.
- If you want sha512 hashes instead real user values
- Price calculation is not a trivial topic and multiple solutions exist.
- This package offers a generic concept to implement payment processing.
- The checkout will use WebCartPaymentGateway to start a payment of a cart.
- Flamingo Carotene provides an easy to use frontend build pipeline for Flamingo projects
  that are using the 'pugtemplate' engine for serverside rendering.
- Make sure frontend/dist and all other npm cache folders are added to your .gitignore
  file to avoid having them under version control.
- Make sure that `frontend/dist` and all other npm cache folders are added to your
  `.gitignore` file to avoid having them under version control.
- Flamingo Carotene is a collection of modules, which are 'self-registered' - and
  can be combined by personal or project needs.
- Flamingo has no template engine registered and therefore falls back to return the
  template variables in a JSON structure.
- The NAME of the class is important here!
- This module exposes the flamingo-carotene command and the logic to load all the
  other modules and dispatch commands.
- The ESLint module knows of 2 types of working.
- The ESLint module will provide the default eslint-config-flamingo-carotene ESLint
  config and a default .eslintignore to let you start right away.
- It integrates into the webpack config by adding the eslint-loader as a preloader
  for js files.
- The module will do its job on the config command.
- When no config was found in your project, this module will use some minor defaults.
- The module will check if there is a postcss config in the root of your project.
- A child process will be opened to execute the linting of the pug files.
- The pug module compiles the pug templates in a Flamingo Carotene project.
- 'The pug-lint module will listen to the following commands: lint, lintPug, build,
  watchPug'
- 'The sass lint module will listen to the following commands: lint, build, watchWebpackCss.'
- 'breakOnError: True to break the process when an error occurred, false to only write
  it to output.'
- A child process will be opened to execute the compilation of the pug files.
- Programmatically scrolling a page in a fancy, sparkling, smooth way
- 'The sass lint module will listen to the following commands: `lint`, `build`, `watchWebpackCss`.'
- The state-manager is a singleton and already returns an instance but a class.
- Use `setDuration()` to change the overall animation time (in ms)
- Use `setOffset()` to set an offset
- This module provides a simple way to copy assets from the configured source to a
  destination folder.
- This module simplifies the setup, generating and using svg sprites for icons in
  the Flamingo Carotene environment.
- This module abstracts webpack to have a quite good featured webpack config ready
  to use with your project.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Use http://openweathermap.org/img/w/${weather.iconCode}.png for a nice image.
- Only Dart is now supported
- Uses Dingo for dependency injection
- Flamingo supports various logging and monitoring modules
- Flamingo supports various template engines
- It is ok to not use the dependency injection container. When writing a package you
  should think of being able to also use it without the container
- The Flamingo command package provides the Flamingo root command and allows to add
  additional commands under the Flamingo root command.
- Uses dependency injection with Dingo.
- Routing registration supports reverse routing.
- Flamingo also supports a Trace log level, which is below Debug and intended to provide
  very detailed logging information.
- Uses caching for HTTP responses from APIs.
- GraceTime and LiveTime parameters for cache management.
- The template directory's name can also be changed within your config but it defaults
  to templates if unset.
- Layouts can be used to reduce boilerplate html when creating templates by encapsulating
  your templates.
- The locale used for labels is en-gb
- Pricing format includes thousands separator as ',' and decimal as '.'
- This package provides localization features.
- The prefix router overrides the 'serve' command and offers additional prefix routing.
- The Cache module provides an easy interface to cache things in flamingo.
- Default domain.FormDataDecoder provides http request body decoding provided by "github.com/go-playground/form"
  and string processing provided by "github.com/leebenson/conform".
- Default domain.FormDataValidator provides full struct validation via github.com/go-playground/validator.
- If you use the default configuration you should then see an ok when calling http://localhost:13210/status/ping
- Provides localization features such as translations of labels, local display of
  dates, prices, and numbers.
- It is possible to view the intermediate result by https://your_flamingo_url/_pugtpl/debug?tpl=home/home
- Templates can be debugged via `/_pugtpl/debug?tpl=pages/product/view`
- Partials are requested by setting the HTTP Header `X-Partial`
- The metrics endpoint is provided under the systemendpoint.
- During development, one sometimes encounter something one did not expect to see.
- Custom form data decoder can be implemented by defining the interface.
- Form modules can attach custom validators via the domain.ValidationProvider.
- The static prototype can be used to test/analyze the UI in early project phases,
  when the backend might not be ready yet.
- Templates can be debugged via /_pugtpl/debug?tpl=pages/product/view
- Provides product domain models and the related secondary ports
- The product has one main price that stands for the value of that product
- You can enable `LimitOperationAmountMiddleware` to prevent batching attack by setting
  `graphql.security.limitOperationAmount.enable` to true.
- '`graphql.security.limitOperationAmount.sameOperationLimit` option can be used to
  set a limit for the same operations called in a single request.'
- '`graphql.security.limitOperationAmount.totalOperationLimit` option can be used
  to set a limit for all the operations called in a single request.'
- Uses fake services to respond with preconfigured fake products.
- Provides domain model for category with potential data a category can have (like
  name, media, ...)
- Provides controller for rendering category pages, supporting different templates
  based on the category type.
- Flamingo Commerce is built on top of the Flamingo Framework.
- Ensure to use the 'OnWrite' Flamingo session save mode
- 'Important: This lock is only suited for single node applications, please use redis
  for multi node setup'
- Your specific implementation of a customer can also include much more properties
  - as long as the two interfaces (ports) are implemented.
- The configuration option jsonTestDataFolder tells fakeservices to look for json
  files with product data in the defined folder.
- The configuration option jsonTestDataLiveSearch provides a possibility to fake live
  search results separately.
- The configuration option jsonTestDataCategoryFacetItems provides a possibility to
  fake the contents of the category facet individually.
- The configuration option defaultProducts toggles the delivery of default test products.
- Provides a controller for rendering category pages, supporting different templates
  based on the category type.
- enable the secondary adapters for the cart services. (e.g. for testing or development
  mode)
- PaymentGateway is a digital tool that allows for online (credit card) payment request
  processing.
- PaymentMethod represents the used Payment - Typical payment methods include cash,
  checks, credit or debit cards, money orders, bank transfers and online payment services
  such as PayPal.
- It introduces a modular concept and provide a collection of reusable of npm packages
  (modules), that provide features required in frontend development.
- When using the new place order process use the 'OnWrite' Flamingo session save mode.
- Ensure that 'frontend/dist' and all other npm cache folders are added to your .gitignore
  file.
- An implementation needs to provide an adapter for the CustomerService
- A typical implementation would fetch the Token from the auth object
- A module that is used for your tooling process will typically go into the devDependencies
  of your project and with that will not end up in the code you will serve to the
  client.
- The price module defines value objects to deal with prices and charges.
- Every command other than the config command will trigger the config command before
  itself.
- A simple implementation of an OfflineWebCartPaymentGateway is also included.
- Make sure other flamingo template engines like gotemplate are removed.
- The dev server will listen to the dev command.
- The NODE_ENV is set to development when executing the dev server command.
- 'The ESLint module will listen to the following commands: `lint`, `build`, `watchWebpackJs`.'
- breakOnError will be set to true for production build automatically.
- You can easily stop the animation by using stop()
- The current animation will be stopped automatically if you call scrollTo() while
  the animation is running.
- The ESLint module integrates into the webpack config by adding the eslint-loader
  as a preloader for js files.
- The module runs in a child process that will run in parallel to the webpack process.
- It takes all the files defined by a glob pattern and saves the AST compilation to
  the configured dist folder.
- Flamingo supports different template engines that can be used for server side rendering.
- Routes need to be registered with the help of a RouterModule.
- Flamingo has a very flexible and powerful configuration concept.
- The module copies all the files and directories that are found inside the given
  source paths to the configured destinations.
- An initial webpack config will be provided by this module.
- Every module in flamingo needs to provide an implementation of the module interface.
- The templates are saved in the "templates" folder by default.
errors:
- Non-operational if there is no last process
- If background process is still running, this mutation is non-operational.
- '[XYZ] requires a peer of postcss@^8.1.0 [...] or Error: true is not a PostCSS plugin'
- 'AccessDeny: voter declares permission for resource as denied'
- 'AccessGranted: voter declares permission for resource as granted'
- 'AccessAbstained: vote is not relevant'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - application.AuthManager
  - application.UserServiceInterface
  - web.Session
  - OpenId Connect
  - OAuth2.0
  - keycloak
client:
  base_url: http://localhost:3322
source_metadata: null
