resources:
- name: delete_model_version
  endpoint:
    path: /2.0/mlflow/model-versions/delete
    method: DELETE
    data_selector: ''
    params: {}
- name: search_model_versions
  endpoint:
    path: /2.0/mlflow/model-versions/search
    method: GET
    data_selector: ''
    params: {}
- name: get_download_uri_for_model_version_artifacts
  endpoint:
    path: /2.0/mlflow/model-versions/get-download-uri
    method: GET
    data_selector: ''
    params: {}
- name: transition_model_version_stage
  endpoint:
    path: /2.0/mlflow/model-versions/transition-stage
    method: POST
    data_selector: ''
    params: {}
- name: search_registered_models
  endpoint:
    path: /2.0/mlflow/registered-models/search
    method: GET
    data_selector: ''
    params: {}
- name: set_registered_model_tag
  endpoint:
    path: /2.0/mlflow/registered-models/set-tag
    method: POST
    data_selector: ''
    params: {}
- name: set_model_version_tag
  endpoint:
    path: /2.0/mlflow/model-versions/set-tag
    method: POST
    data_selector: ''
    params: {}
- name: delete_registered_model_tag
  endpoint:
    path: /2.0/mlflow/registered-models/delete-tag
    method: DELETE
    data_selector: ''
    params: {}
- name: delete_model_version_tag
  endpoint:
    path: /2.0/mlflow/model-versions/delete-tag
    method: DELETE
    data_selector: ''
    params: {}
- name: delete_registered_model_alias
  endpoint:
    path: /2.0/mlflow/registered-models/alias
    method: DELETE
    data_selector: ''
    params: {}
- name: get_model_version_by_alias
  endpoint:
    path: /2.0/mlflow/registered-models/alias
    method: GET
    data_selector: ''
    params: {}
- name: set_registered_model_alias
  endpoint:
    path: /2.0/mlflow/registered-models/alias
    method: POST
    data_selector: ''
    params: {}
- name: log_metric
  endpoint:
    path: /2.0/mlflow/runs/log-metric
    method: POST
    data_selector: ''
    params: {}
- name: log_batch
  endpoint:
    path: /2.0/mlflow/runs/log-batch
    method: POST
    data_selector: ''
    params: {}
- name: log_model
  endpoint:
    path: /2.0/mlflow/runs/log-model
    method: POST
    data_selector: ''
    params: {}
- name: log_inputs
  endpoint:
    path: /2.0/mlflow/runs/log-inputs
    method: POST
    data_selector: ''
    params: {}
- name: set_experiment_tag
  endpoint:
    path: /2.0/mlflow/experiments/set-experiment-tag
    method: POST
    data_selector: ''
    params: {}
- name: delete_experiment_tag
  endpoint:
    path: /2.0/mlflow/experiments/delete-experiment-tag
    method: POST
    data_selector: ''
    params: {}
- name: set_tag
  endpoint:
    path: /2.0/mlflow/runs/set-tag
    method: POST
    data_selector: ''
    params: {}
- name: delete_tag
  endpoint:
    path: /2.0/mlflow/runs/delete-tag
    method: POST
    data_selector: ''
    params: {}
- name: log_param
  endpoint:
    path: /2.0/mlflow/runs/log-parameter
    method: POST
    data_selector: ''
    params: {}
- name: get_metric_history
  endpoint:
    path: /2.0/mlflow/metrics/get-history
    method: GET
    data_selector: ''
    params: {}
- name: search_runs
  endpoint:
    path: /2.0/mlflow/runs/search
    method: POST
    data_selector: ''
    params: {}
- name: list_artifacts
  endpoint:
    path: /2.0/mlflow/artifacts/list
    method: GET
    data_selector: ''
    params: {}
- name: update_run
  endpoint:
    path: /2.0/mlflow/runs/update
    method: POST
    data_selector: ''
    params: {}
- name: create_registered_model
  endpoint:
    path: /2.0/mlflow/registered-models/create
    method: POST
    data_selector: ''
    params: {}
- name: get_registered_model
  endpoint:
    path: /2.0/mlflow/registered-models/get
    method: GET
    data_selector: ''
    params: {}
- name: rename_registered_model
  endpoint:
    path: /2.0/mlflow/registered-models/rename
    method: POST
    data_selector: ''
    params: {}
- name: update_registered_model
  endpoint:
    path: /2.0/mlflow/registered-models/update
    method: PATCH
    data_selector: ''
    params: {}
- name: delete_registered_model
  endpoint:
    path: /2.0/mlflow/registered-models/delete
    method: DELETE
    data_selector: ''
    params: {}
- name: get_latest_model_versions
  endpoint:
    path: /2.0/mlflow/registered-models/get-latest-versions
    method: POST
    data_selector: ''
    params: {}
- name: create_model_version
  endpoint:
    path: /2.0/mlflow/model-versions/create
    method: POST
    data_selector: ''
    params: {}
- name: get_model_version
  endpoint:
    path: /2.0/mlflow/model-versions/get
    method: GET
    data_selector: ''
    params: {}
- name: update_model_version
  endpoint:
    path: /2.0/mlflow/model-versions/update
    method: PATCH
    data_selector: ''
    params: {}
- name: deployments
  endpoint:
    path: /deployments
    method: POST
    data_selector: deployments
    params: {}
- name: experiments
  endpoint:
    path: /experiments
    method: POST
    data_selector: experiments
    params: {}
- name: gateway
  endpoint:
    path: /gateway
    method: POST
    data_selector: gateway
    params: {}
- name: deployments_update
  endpoint:
    path: /deployments/update
    method: POST
- name: deployments_update_endpoint
  endpoint:
    path: /deployments/update-endpoint
    method: POST
- name: experiments_create
  endpoint:
    path: /experiments/create
    method: POST
- name: experiments_delete
  endpoint:
    path: /experiments/delete
    method: DELETE
- name: experiments_restore
  endpoint:
    path: /experiments/restore
    method: POST
- name: experiments_rename
  endpoint:
    path: /experiments/rename
    method: POST
- name: experiments_search
  endpoint:
    path: /experiments/search
    method: GET
- name: gateway_start
  endpoint:
    path: /gateway/start
    method: POST
- name: gc
  endpoint:
    path: /gc
    method: DELETE
- name: models_serve
  endpoint:
    path: /models/serve
    method: POST
- name: mlflow_update_registered_model
  endpoint:
    path: /mlflow_update_registered_model
    method: POST
    data_selector: model
    params: {}
- name: restore_experiment
  endpoint:
    path: /mlflow_restore_experiment
    method: POST
- name: restore_run
  endpoint:
    path: /mlflow_restore_run
    method: POST
- name: rfunc_serve
  endpoint:
    path: /mlflow_rfunc_serve
    method: POST
- name: run
  endpoint:
    path: /mlflow_run
    method: POST
- name: search_experiments
  endpoint:
    path: /mlflow_search_experiments
    method: GET
- name: search_registered_models
  endpoint:
    path: /mlflow_search_registered_models
    method: GET
- name: search_runs
  endpoint:
    path: /mlflow_search_runs
    method: GET
- name: set_tracking_uri
  endpoint:
    path: /mlflow_set_tracking_uri
    method: POST
- name: set_experiment
  endpoint:
    path: /mlflow_set_experiment
    method: POST
- name: set_experiment_tag
  endpoint:
    path: /mlflow_set_experiment_tag
    method: POST
- name: set_model_version_tag
  endpoint:
    path: /mlflow_set_model_version_tag
    method: POST
- name: set_tag
  endpoint:
    path: /mlflow_set_tag
    method: POST
- name: transition_model_version_stage
  endpoint:
    path: /mlflow_transition_model_version_stage
    method: POST
- name: update_model_version
  endpoint:
    path: /mlflow_update_model_version
    method: POST
- name: ui
  endpoint:
    path: /mlflow_ui
    method: GET
- name: experiment
  endpoint:
    path: /mlflow_get_experiment
    method: GET
- name: latest_model_versions
  endpoint:
    path: /mlflow_get_latest_versions
    method: GET
- name: metric_history
  endpoint:
    path: /mlflow_get_metric_history
    method: GET
- name: model_version
  endpoint:
    path: /mlflow_get_model_version
    method: GET
- name: registered_model
  endpoint:
    path: /mlflow_get_registered_model
    method: GET
- name: run
  endpoint:
    path: /mlflow_get_run
    method: GET
- name: tracking_uri
  endpoint:
    path: /mlflow_get_tracking_uri
    method: GET
- name: artifacts
  endpoint:
    path: /mlflow_list_artifacts
    method: GET
- name: load_flavor
  endpoint:
    path: /mlflow_load_flavor
    method: POST
- name: load_model
  endpoint:
    path: /mlflow_load_model
    method: POST
- name: log_artifact
  endpoint:
    path: /mlflow_log_artifact
    method: POST
- name: log_batch
  endpoint:
    path: /mlflow_log_batch
    method: POST
- name: log_metric
  endpoint:
    path: /mlflow_log_metric
    method: POST
- name: log_model
  endpoint:
    path: /mlflow_log_model
    method: POST
- name: log_param
  endpoint:
    path: /mlflow_log_param
    method: POST
- name: param
  endpoint:
    path: /mlflow_param
    method: GET
- name: predict
  endpoint:
    path: /mlflow_predict
    method: POST
- name: register_external_observer
  endpoint:
    path: /mlflow_register_external_observer
    method: POST
- name: rename_experiment
  endpoint:
    path: /mlflow_rename_experiment
    method: POST
- name: rename_registered_model
  endpoint:
    path: /mlflow_rename_registered_model
    method: POST
- name: mlflow_projects
  endpoint:
    path: /api/2.0/mlflow/projects
    method: GET
    data_selector: projects
- name: MLproject
  endpoint:
    path: /mlproject
    method: GET
    data_selector: projects
    params: {}
- name: python_env
  endpoint:
    path: python_env.yaml
    method: GET
    data_selector: ''
    params: {}
- name: MLproject
  endpoint:
    path: /mlflow/projects
    method: GET
    data_selector: projects
    params: {}
- name: MLflow Project
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
    params: {}
- name: Execution
  endpoint:
    path: /api/runs
    method: POST
    data_selector: runs
    params: {}
- name: project_configuration
  endpoint:
    path: /MLproject
    method: GET
    data_selector: project
    params: {}
- name: environment_dependencies
  endpoint:
    path: /python_env.yaml
    method: GET
    data_selector: dependencies
    params: {}
- name: projects
  endpoint:
    path: /api/2.0/mlflow/projects
    method: GET
    data_selector: projects
    params: {}
- name: project
  endpoint:
    path: /mlflow/projects
    method: GET
    data_selector: projects
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: run_data
    params:
      synchronous: 'true'
- name: MLflow Project
  endpoint:
    path: /api/2.0/mlflow/projects
    method: GET
    data_selector: projects
    params: {}
- name: preprocessing
  endpoint:
    path: ./preprocessing
    method: POST
    data_selector: params
    params:
      input_path: s3://bucket/raw-data
- name: feature_engineering
  endpoint:
    path: ./feature_engineering
    method: POST
    data_selector: params
    params:
      data_path: processed_data_path
- name: training
  endpoint:
    path: ./training
    method: POST
    data_selector: params
    params:
      features_path: features_path
      algorithm: random_forest
- name: deployment
  endpoint:
    path: ./deployment
    method: POST
    data_selector: params
    params:
      model_run_id: best_model
      stage: production
- name: projects
  endpoint:
    path: /api/2.0/mlflow/projects
    method: GET
    data_selector: projects
- name: projects
  endpoint:
    path: /api/2.0/mlflow/projects
    method: GET
    data_selector: projects
- name: runs
  endpoint:
    path: /api/2.0/mlflow/runs
    method: GET
    data_selector: runs
- name: project
  endpoint:
    path: /mlflow/projects
    method: POST
- name: mlflow_project
  endpoint:
    path: /api/2.0/projects
    method: GET
    data_selector: projects
    params: {}
- name: mlflow_run
  endpoint:
    path: /api/2.0/runs
    method: GET
    data_selector: runs
    params: {}
- name: mlflow_project
  endpoint:
    path: /api/2.0/mlflow/projects
    method: GET
    data_selector: projects
notes:
- By default, the server listens on http://localhost:5000 and only accepts connections
  from the local machine.
- Any directory with a MLproject file or containing .py/.sh files can be run as an
  MLflow Project.
- Use virtualenv for pure Python projects
- Use conda when you need system libraries (CUDA, Intel MKL)
- Use Docker for complex dependencies or production deployment
- Pin exact versions in production environments
- Create a python_env.yaml file for pure Python dependencies
- MLflow Projects provide a standard format for packaging and sharing reproducible
  data science code.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Critical environment variables are automatically passed to execution environments.
- Use virtualenv for pure Python projects.
- Use conda when you need system libraries (CUDA, Intel MKL).
- Use Docker for complex dependencies or production deployment.
- Pin exact versions in production environments.
- No complex setup required for running projects.
- Projects can be run from GitHub or local directories.
- Add user to docker group or use sudo to resolve Docker Permission Denied
- Restart shell/session after adding user to docker group
- Use SSH with key authentication or HTTPS with token.
- MLflow Projects allow for seamless collaboration and automated execution across
  environments.
- 'Enable Verbose Logging: export MLFLOW_LOGGING_LEVEL=DEBUG  mlflow run . -v'
- 'Test Locally First: mlflow run . --env-manager local'
- 'Then test with environment isolation: mlflow run . --env-manager virtualenv'
- 'Validate Project Structure: from mlflow.projects import load_project  project =
  load_project(''.'')  print(f''Project name: {project.name}'')  print(f''Entry points:
  {list(project._entry_points.keys())}'')  print(f''Environment type: {project.env_type}'')'
- MLflow is an open-source platform for managing the machine learning lifecycle.
errors:
- 'Docker Permission Denied: Solution: Add user to docker group or use sudo'
- 'Conda Environment Creation Fails: Solution: Clean conda cache and retry'
- 'Git Authentication for Private Repos: Solution: Use SSH with key authentication
  or HTTPS with token'
- 'Kubernetes Job Fails: Debug: Check job status, describe job, check logs'
- 'Docker Permission Denied: Add user to docker group or use sudo.'
- 'Conda Environment Creation Fails: Clean conda cache and retry.'
- 'Git Authentication for Private Repos: Use SSH with key authentication or HTTPS
  with token.'
- 'Docker Permission Denied: Add user to docker group or use sudo'
- 'Conda Environment Creation Fails: Clean conda cache and retry'
- 'Git Authentication for Private Repos: Use SSH with key authentication or HTTPS
  with token'
- 'Kubernetes Job Fails: Check job status'
auth_info:
  mentioned_objects: []
client:
  base_url: https://my-tracking-server.com
source_metadata: null
