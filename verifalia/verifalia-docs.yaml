resources:
- name: email_verification
  endpoint:
    path: /email-verification
    method: POST
    data_selector: results
- name: email_verification
  endpoint:
    path: /email-verification
    method: POST
    data_selector: results
    params: {}
- name: email_verification
  endpoint:
    path: /email-verification
    method: POST
    data_selector: records
    params: {}
- name: email_verification
  endpoint:
    path: /email-verifications
    method: POST
    data_selector: results
    params: {}
- name: email_verification
  endpoint:
    path: /validate-email
    method: POST
    data_selector: validationResults
- name: email_verification
  endpoint:
    path: /email-verifications
    method: POST
    data_selector: records
    params: {}
- name: email_validation
  endpoint:
    path: /email-validation
    method: POST
    data_selector: validationResults
    params: {}
- name: email_validation
  endpoint:
    path: /email-validations
    method: POST
    data_selector: results
    params: {}
- name: email_verification
  endpoint:
    path: /email-validations
    method: POST
    data_selector: validationResults
- name: email_validation
  endpoint:
    path: /email-validations
    method: POST
    data_selector: validationResults
    params: {}
- name: email_verification
  endpoint:
    path: /api/email/verify
    method: POST
    data_selector: results
    params: {}
- name: email_validation
  endpoint:
    path: /email-validations
    method: POST
    data_selector: entries
- name: email_validation
  endpoint:
    path: /email-validations
    method: POST
    data_selector: entries
- name: email_validation
  endpoint:
    path: /v2.7/email-validations
    method: POST
- name: credits_balance
  endpoint:
    path: /credits/balance
    method: GET
    data_selector: creditPacks
    params: {}
- name: credits_daily_usage
  endpoint:
    path: /credits/daily-usage
    method: GET
    data_selector: data
    params: {}
- name: credits_balance
  endpoint:
    path: /credits/balance
    method: GET
    data_selector: creditPacks
    params: {}
- name: credits_usage
  endpoint:
    path: /credits/daily-usage
    method: GET
    data_selector: data
    params: {}
- name: credits_balance
  endpoint:
    path: /credits/balance
    method: GET
- name: credits_daily_usage
  endpoint:
    path: /credits/daily-usage
    method: GET
- name: result_quality_levels
  endpoint:
    path: /email-validations/quality-levels
    method: GET
    data_selector: data
- name: email_validation
  endpoint:
    path: /email-validations/{id}
    method: DELETE
    data_selector: status
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params:
      includeDeleted: false
      type: Standard
      sort: createdOn
- name: users
  endpoint:
    path: /users/{user-id}
    method: DELETE
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: delete_user
  endpoint:
    path: /users/{user-id}
    method: DELETE
    data_selector: result
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: user_details
  endpoint:
    path: /users/{user-id}
    method: GET
    data_selector: user
    params: {}
- name: users
  endpoint:
    path: /v2.7/users
    method: DELETE
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: user
    params: {}
- name: delete_user
  endpoint:
    path: /users/{user-id}
    method: DELETE
    data_selector: user
    params: {}
- name: users
  endpoint:
    path: /v2.7/users
    method: DELETE
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: user_details
  endpoint:
    path: /users/{user-id}
    method: GET
    data_selector: user
- name: users
  endpoint:
    path: /v2.7/users/{user_id}
    method: PATCH
    data_selector: 'null'
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: user_details
  endpoint:
    path: /users/{user-id}
    method: GET
    data_selector: user
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: user_details
  endpoint:
    path: /users/{user-id}
    method: GET
    data_selector: user
- name: create_user
  endpoint:
    path: /users
    method: POST
    data_selector: user
- name: update_user
  endpoint:
    path: /users/{user-id}
    method: PATCH
    data_selector: user
- name: delete_user
  endpoint:
    path: /users/{user-id}
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: user_details
  endpoint:
    path: /users/{user-id}
    method: GET
    data_selector: user
    params: {}
- name: users
  endpoint:
    path: /users/{user-id}
    method: DELETE
- name: update_user
  endpoint:
    path: /users/{user-id}
    method: PATCH
- name: users
  endpoint:
    path: /users/{user-id}
    method: DELETE
- name: users
  endpoint:
    path: /users/{user-id}
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params:
      includeDeleted: false
- name: user_details
  endpoint:
    path: /users/{user-id}
    method: GET
    data_selector: user
- name: users
  endpoint:
    path: /v2.7/users/{user-id}
    method: DELETE
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /users/{user-id}
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: user_details
  endpoint:
    path: /users/{user-id}
    method: GET
    data_selector: user
    params: {}
- name: user_certificates
  endpoint:
    path: /users/{user-id}/certificates
    method: GET
    data_selector: data
- name: upload_certificate
  endpoint:
    path: /users/{user-id}/certificates
    method: POST
    data_selector: data
- name: contact_methods
  endpoint:
    path: /users/{user-id}/contact-methods
    method: GET
    data_selector: contactMethods
    params: {}
- name: contact_method_details
  endpoint:
    path: /users/{user-id}/contact-methods/{contact-method-id}
    method: GET
    data_selector: contactMethod
    params: {}
notes:
- Real-time email verification API
- API v2.7 introduces 14 new endpoints for automated user management and over 50 granular
  permissions.
- The upload area is easy to use and similar to browsing for a file on your computer.
- The widget blocks undeliverable emails as well as disposable emails.
- You can set the data-verifalia-emailValidations-block attribute to @free to block
  free email providers.
- Supports verification of lists containing up to 40 million email addresses at once.
- Client areas of the site are secured by HTTPS protocol.
- Verifalia checks email addresses without sending email messages.
- Credits never expire
- Unused credits can be used to verify additional lists at any time
- Uses OAuth2 with refresh token — requires setup of connected app in Verifalia
- Temporary unavailability can occur due to various reasons like mailbox over quota
- Verifalia validates email addresses protected by greylisting.
- Uses OAuth2 with refresh token
- Requires setup of connected app in Verifalia
- The SERVICE is licensed, not sold.
- Client Personal Data includes email addresses.
- Access to our API is included for free with all of our plans, including the Free
  plan!
- All API communication takes place over secure HTTPS/SSL connections.
- Verifalia API supports CORS.
- Verifalia API enforces a rate limit of 18 requests per second, burst limit of 45
  requests per second.
- On subsequent API calls, the API consumer must pass the bearer token obtained during
  the first call above by way of the Authorization HTTP header.
- The API supports multiple file types for email validation.
- CAPTCHA is used to prevent bot submissions.
- Verifalia replies back with an HTTP 415 (Unsupported media type) status code in
  the event it can't process the provided file format.
- Verifalia replies back with an HTTP 415 status code in the event it can't process
  the provided file format.
- Only users with credits:read permission can query credits information.
- API consumers can request daily usage consumption for a specific date or period.
- The API returns the most recent dates where credits have been consumed by default.
- For security reasons, only administrators are allowed to delete other administrators.
- For security reasons, only administrators are allowed to create other administrators.
- Only administrators are allowed to create or update other administrators.
- Only administrators are allowed to create other administrators.
- Only administrators are allowed to update other administrators.
- Only administrators are allowed to delete other administrators.
- The API only accepts X.509 client certificates that include the Extended Key Usage
  extension id-kp-clientAuth.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses Basic Authentication with username and password
- Bearer authentication tokens are now returned as RFC 7519 JSON web tokens (JWT).
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'InvalidEmail: The email address is not valid.'
- 'EmailBlocked: The email address is blocked.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'INVALID_EMAIL: The provided email address is not valid.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '400 Bad Request: Check the email format or provided data'
- '429 Too Many Requests: Rate limit exceeded'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400 Bad Request: Invalid input data'
- '401 Unauthorized: Invalid credentials'
- '429: Too many requests. Returned when a request cannot be served due to the application''s
  rate limit having been exhausted.'
- '415: Unsupported media type'
- 'HTTP 415: Unsupported media type'
- 'HTTP 403: Forbidden'
- '403 Forbidden: User has not been granted the required credits:read permission'
- '403 Forbidden: User has not been granted the required credits:read permission.'
- '410 Gone: Job has already been deleted'
- '406 Not acceptable: Validation is still in progress'
- '403 Forbidden: Insufficient permissions'
- '401 Unauthorized: Recheck credentials.'
- '404 Not Found: User not found.'
- 'HTTP 200: Successful request'
- 'HTTP 401: Unauthorized access'
- 'HTTP 404: User not found'
- 'HTTP 200: Request succeeded'
- 'HTTP 403: Forbidden operation'
- 'HTTP 200: OK'
- 'HTTP error: check the details of the problem.'
- HTTP error status codes for failures
- 'HTTP 200: Deletion successful'
- 'HTTP error status code: Deletion failed'
- 'HTTP 400: Bad Request'
- 'HTTP 401: Unauthorized'
- Relevant HTTP error status code for failures
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.verifalia.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.verifalia.com/oauth2/token
    client_id: '{{ dlt.secrets[''verifalia_client_id''] }}'
    client_secret: '{{ dlt.secrets[''verifalia_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''verifalia_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
