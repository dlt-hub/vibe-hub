resources:
- name: get_institutions_list
  endpoint:
    path: /institutions
    method: GET
    data_selector: institutions
    params: {}
- name: get_institution_details
  endpoint:
    path: /institutions/{id}
    method: GET
    data_selector: institution
    params: {}
- name: get_institutions_countries
  endpoint:
    path: /institutions/countries
    method: GET
    data_selector: countries
- name: create_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
- name: get_payment_name_match_score
  endpoint:
    path: /payments/{id}/name-match-score
    method: GET
    data_selector: score
    params:
      allowInitials: true
- name: update_payment
  endpoint:
    path: /payments/{id}
    method: PUT
    data_selector: status
    params: {}
- name: cancel_payment
  endpoint:
    path: /payments/{id}/cancel
    method: DELETE
    data_selector: status
    params: {}
- name: payment_name_match_score
  endpoint:
    path: /api/payment/name/match/score
    method: GET
    data_selector: score
    params: {}
- name: verify
  endpoint:
    path: /api/v1/verify
    method: POST
    data_selector: data
    params: {}
- name: BIN lookup
  endpoint:
    path: /transformer-match
    method: POST
    data_selector: ''
    params: {}
- name: Payment initiation
  endpoint:
    path: /payments
    method: POST
    data_selector: ''
    params: {}
- name: payments_report
  endpoint:
    path: /reports/payments
    method: GET
- name: connect_report
  endpoint:
    path: /reports/connect
    method: GET
- name: settlement_report
  endpoint:
    path: /reports/settlement
    method: GET
- name: audit_log_report
  endpoint:
    path: /reports/audit-log
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: transaction
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /api/payments
    method: POST
    data_selector: data
    params: {}
- name: accounts
  endpoint:
    path: /api/accounts
    method: GET
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /api/v1/payments
    method: POST
    data_selector: data
    params: {}
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: data
    params: {}
- name: Payments
  endpoint:
    path: /api/payments
    method: POST
    data_selector: payment
    params: {}
- name: Refunds
  endpoint:
    path: /api/refunds
    method: POST
    data_selector: refund
    params: {}
- name: get_institutions_list
  endpoint:
    path: /institutions
    method: GET
    data_selector: institutions
    params: {}
- name: get_institution_details
  endpoint:
    path: /institutions/{id}
    method: GET
    data_selector: institution
    params: {}
- name: get_institutions_countries
  endpoint:
    path: /payments/{id}/name-match-score
    method: GET
    data_selector: records
    params: {}
- name: create_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: records
    params: {}
- name: get_payment_name_match_score
  endpoint:
    path: /payments/{id}/name-match-score
    method: GET
    data_selector: score
- name: update_payment
  endpoint:
    path: /payments/{id}
    method: PUT
    data_selector: ''
- name: cancel_payment
  endpoint:
    path: /payments/{id}/cancel
    method: DELETE
    data_selector: ''
- name: payment_name_match_score
  endpoint:
    path: /payment/name/match/score
    method: GET
    data_selector: score
    params: {}
- name: payments
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: id
    params: {}
- name: payments
  endpoint:
    path: /api/payments
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: dropin
  endpoint:
    path: /dropin
    method: POST
- name: payment_status
  endpoint:
    path: /api/payment/status
    method: GET
    data_selector: statuses
    params: {}
- name: bank_logos
  endpoint:
    path: /bank-logos-icon/
    method: GET
    data_selector: records
    params: {}
- name: banks
  endpoint:
    path: /banks
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /api/v1/payments
    method: POST
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /api/v1/payments
    method: POST
    data_selector: payment_data
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: checkoutUrl
    params: {}
notes:
- Idempotency key required for POST requests.
- All properties/keys are case-sensitive.
- Start offering customers real-time account-to-account payments.
- Once your Fuzebox account is set up, you’re ready to begin your integration.
- Uses OAuth2 with refresh token — requires setup of connected app in Volt
- Some responses may contain nested fields with null values
- Cash management, refunds and payouts
- Circuit Breaker is designed to be flexible, recognising that not every merchant
  has the same requirements or criteria.
- We strongly recommend using Circuit Breaker alongside Connect.
- GDPR Compliant
- Reports contain transactions only in specific states as of the time the report was
  requested.
- Matchmeter is a tool that accurately matches naming nuances between merchant inputs
  and end-user bank records.
- PayTo is a modern digital payment solution developed in Australia.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Ensure that you are configuring the same environment in Fuzebox and on Shopify.
  If you configure production in Shopify with sandbox Fuzebox credentials, you will
  not be able to receive live payments.
- Always make sure you are configuring in the same environment in Fuzebox and on Shopware.
- Ensure OAuth2 credentials are correctly set up in the connected app.
- Volt initiates payments as instant whenever possible.
- Ensure smooth and uninterrupted operations for merchants and shoppers.
- Currently, version `1` is the only version.
- Volt is a global fintech company specialising in real-time account-to-account (A2A)
  payments.
- Volt is an open banking and technology company. Our API enables you to plug into
  the world’s next generation payments systems.
- Every transaction has a unique ID, making reconciliation easy.
- There’s a 20-minute timeframe for transactions to complete, though 95% take less
  than 10 minutes.
- Pix requires the shopper’s Brazilian Tax ID (their CPF or CNPJ) for each transaction.
- Payments will not be completed if the amount does not end in '00'.
- Correct at time of writing (Q2 2024), but speak to your integration contact for
  updates.
- We cannot currently support cross-border wallet topups – please consult with your
  Volt account manager.
- For hosted checkout, different return URLs can be defined based on payment result.
- For embedded checkout, no return URLs are needed.
- The NOT_RECEIVED status doesn’t exist in the PayTo flow.
- Circuit Breaker analyses transactions for risk.
- Testing on sandbox – Volt Docs
- Maintain clear spacing, use approved colours, and avoid alterations to ensure consistency
  and impact.
- Brand familiarity at checkout stands out and instils trust for the customer, allowing
  them to transact confidently.
- Volt brand assets Volt logo variations and our colour guide.
- Checkout branding Usage specifications and localised assets.
- Once the payment is complete, your customer will return to your website or mobile
  app.
- Clean and responsive UI
- User-friendly, conversion-optimised bank search
- Use Sandbox environment for testing without making a real payment.
- Responses are in JSON format.
- Volt Checkout offers the option to save shopper details for future payments.
- Ensure sensitive information in parameters is encrypted.
- You must include the X-Volt-Api-Version header to request the new v3 checkout experience.
errors:
- '409 Conflict: Idempotency-Key was already used.'
- '404 Not found: The resource that you are requesting cannot be found.'
- '500 Internal server error: Something went wrong and request cannot be processed.'
- 404 Not found - The resource that you are requesting cannot be found.
- 409 Conflict - Modification of a resource is not possible, because current state
  of it does not allow it.
- 500 Internal server error - Something went wrong and request cannot be processed
  due to server error.
- '200: Success'
- '404: Not Found'
- '409: Conflict'
- '500: Internal Server Error'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Check your credentials or token expiration.'
- '409 Conflict: Modification of a resource is not possible, because current state
  of it does not allow it. Or Idempotency-Key was already used.'
- '500 Internal server error: Something went wrong and request cannot be processed
  due to server error.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '409 Conflict: Modification of a resource is not possible.'
- '500 Internal server error: Something went wrong.'
- 'Invalid CPF or CNPJ: Ensure the shopper''s tax ID is correct.'
- '403 Forbidden: Check API permissions'
- '404 Not Found: Verify endpoint path'
- 'REFUSED_BY_RISK: Transaction not sent to the bank due to risk analysis.'
- 'REFUSED_BY_BANK: Bank refused to initiate the payment.'
- 'FAILED: Payment request could not be completed due to technical limitations.'
- 'INVALID_SHOPPER_REFERENCE: Ensure shopper.reference is provided.'
- 'PAYMENT_FAILED: Check payment details and retry.'
- '401 Unauthorized: Verify authentication credentials.'
- '400: Invalid request - Check your request format and required fields.'
- '401: Unauthorized - Verify your authentication credentials.'
- '404: Not found - Ensure the endpoint is correct.'
auth_info:
  mentioned_objects:
  - Bearer
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://docs.volt.io
  auth:
    type: oauth2
source_metadata: null
