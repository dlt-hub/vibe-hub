resources:
- name: all_connections
  endpoint:
    path: /oidc/.well-known/all-connections
    method: GET
- name: connections
  endpoint:
    path: /oidc/.well-known/all-connections
    method: GET
    data_selector: records
- name: connections
  endpoint:
    path: /oidc/.well-known/all-connections
    method: GET
- name: api_connections
  endpoint:
    path: /oidc/.well-known/api-connections
    method: GET
- name: api_connections
  endpoint:
    path: /oidc/.well-known/api-connections
    method: GET
- name: legacy_connections
  endpoint:
    path: /oidc/.well-known/legacy-connections
    method: GET
- name: test_connections
  endpoint:
    path: /oidc/.well-known/test-connections
    method: GET
- name: legacy_connections
  endpoint:
    path: /oidc/.well-known/legacy-connections
    method: GET
- name: payments_connections
  endpoint:
    path: /oidc/.well-known/payments-connections
    method: GET
- name: test_connections
  endpoint:
    path: /oidc/.well-known/test-connections
    method: GET
- name: auth_requests
  endpoint:
    path: /auth-requests
    method: GET
    data_selector: records
    params:
      scope: auth_requests:read
- name: payments_connections
  endpoint:
    path: /oidc/.well-known/payments-connections
    method: GET
- name: auth_requests
  endpoint:
    path: /auth-requests
    method: POST
- name: auth_requests
  endpoint:
    path: /auth-requests/{authRequestId}
    method: GET
    params:
      incremental: auth_requests:read
- name: auth_requests
  endpoint:
    path: /auth-requests
    method: GET
    data_selector: response
    params:
      scope: auth_requests:read
- name: auth_requests
  endpoint:
    path: /auth-requests/{authRequestId}
    method: PATCH
- name: auth_requests
  endpoint:
    path: /auth-requests
    method: POST
- name: user_connections
  endpoint:
    path: /users/{userId}/connections
    method: GET
    data_selector: connections
    params: {}
- name: auth_requests
  endpoint:
    path: /auth-requests/{authRequestId}
    method: GET
- name: update_connection
  endpoint:
    path: /users/{userId}/connections/{connectionId}
    method: PATCH
- name: auth_requests
  endpoint:
    path: /auth-requests/{authRequestId}
    method: PATCH
- name: delete_user_connection
  endpoint:
    path: /users/{userId}/connections/{connectionId}
    method: DELETE
    data_selector: ''
- name: user_connections
  endpoint:
    path: /users/{userId}/connections
    method: GET
    data_selector: connections
- name: user_connection_syncs
  endpoint:
    path: /users/{userId}/connections/{connectionId}/syncs
    method: GET
    data_selector: syncs
    params: {}
- name: connections
  endpoint:
    path: /users/{userId}/connections/{connectionId}
    method: PATCH
- name: syncs
  endpoint:
    path: /users/{userId}/syncs
    method: GET
    data_selector: response
    params:
      scope: user:read
- name: user_connections
  endpoint:
    path: /users/{userId}/connections/{connectionId}
    method: DELETE
- name: user_connection_sync
  endpoint:
    path: /users/{userId}/syncs/{syncId}
    method: GET
    data_selector: response
- name: user_connection_syncs
  endpoint:
    path: /users/{userId}/connections/{connectionId}/syncs
    method: GET
- name: payees
  endpoint:
    path: /payees
    method: GET
    data_selector: records
    params:
      scope: payee:read
      limit: 10
- name: syncs
  endpoint:
    path: /users/{userId}/syncs
    method: GET
- name: payees
  endpoint:
    path: /payees
    method: POST
    params:
      scope: payee:create
- name: user_connection_sync
  endpoint:
    path: /users/{userId}/syncs/{syncId}
    method: GET
    params:
      scope: user:read
- name: payee
  endpoint:
    path: /payees/{payeeId}
    method: GET
- name: payees
  endpoint:
    path: /payees
    method: GET
    data_selector: records
    params:
      limit: 10
- name: pay_links
  endpoint:
    path: /pay-links
    method: GET
    data_selector: response
    params:
      scope: pay_link:read
- name: payees
  endpoint:
    path: /payees
    method: POST
- name: pay-links
  endpoint:
    path: /pay-links
    method: POST
- name: pay-link
  endpoint:
    path: /pay-links/{payLinkId}
    method: GET
    data_selector: response
- name: payee
  endpoint:
    path: /payees/{payeeId}
    method: GET
- name: pay_links
  endpoint:
    path: /pay-links
    method: GET
    data_selector: records
    params:
      scope: pay_link:read
- name: pay_file
  endpoint:
    path: /pay-file/upload-file
    method: POST
- name: pay-link
  endpoint:
    path: /pay-links
    method: POST
- name: pay_file
  endpoint:
    path: /pay-file/{id}
    method: GET
    data_selector: ''
    params:
      scope: pay_file:read
- name: upload_payment_file_data
  endpoint:
    path: /pay-file/upload-data
    method: POST
- name: pay-links
  endpoint:
    path: /pay-links/{payLinkId}
    method: GET
- name: pay_file
  endpoint:
    path: /pay-file/upload-file
    method: POST
- name: execute_payment_file
  endpoint:
    path: /pay-file/{id}/execute
    method: POST
- name: pay_file_consent
  endpoint:
    path: /pay-file-consent
    method: GET
    params:
      scope: pay_file_consent:read
- name: pay_file
  endpoint:
    path: /pay-file/{id}
    method: GET
- name: upload_payment_file_data
  endpoint:
    path: /pay-file/upload-data
    method: POST
- name: pay_file_consent
  endpoint:
    path: /pay-file-consent/{id}
    method: GET
    params:
      scope: pay_file_consent:read
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: records
    params:
      scope: payment:read
- name: execute_payment_file
  endpoint:
    path: /pay-file/{id}/execute
    method: POST
- name: pay_file_consent
  endpoint:
    path: /pay-file-consent
    method: GET
    data_selector: response
    params:
      scope: pay_file_consent:read
- name: payment
  endpoint:
    path: /payments/{paymentId}
    method: GET
    data_selector: response
- name: payment_file_consent
  endpoint:
    path: /pay-file-consent/{id}
    method: GET
    params:
      scope: pay_file_consent:read
- name: standing_orders
  endpoint:
    path: /standing-orders
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: records
    params:
      scope: payment:read
- name: standing_order
  endpoint:
    path: /standing-orders/{standingOrderRequestId}
    method: GET
    params:
      scope: payment:read
- name: payment
  endpoint:
    path: /payments/{paymentId}
    method: GET
    data_selector: response
    params: {}
- name: standing_orders
  endpoint:
    path: /standing-orders
    method: GET
    data_selector: records
- name: recurring_payments
  endpoint:
    path: /recurring-payments
    method: GET
    data_selector: response
    params:
      scope: recurring-payment:read
- name: standing_order
  endpoint:
    path: /standing-orders/{standingOrderRequestId}
    method: GET
    params:
      scope: payment:read
- name: recurring_payment
  endpoint:
    path: /recurring-payments/{recurringPaymentId}
    method: GET
    data_selector: response
- name: recurring_payments
  endpoint:
    path: /recurring-payments
    method: GET
    data_selector: response
    params:
      scope: recurring-payment:read
- name: recurring_payment
  endpoint:
    path: /recurring-payments/{recurringPaymentId}
    method: DELETE
    params: {}
- name: recurring_payment
  endpoint:
    path: /recurring-payments/{recurringPaymentId}
    method: GET
- name: payments
  endpoint:
    path: /recurring-payments/{recurringPaymentId}/pay
    method: POST
- name: recurring_payment
  endpoint:
    path: /recurring-payments/{recurringPaymentId}
    method: DELETE
    data_selector: ''
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /users
    method: POST
- name: recurring_payment
  endpoint:
    path: /recurring-payments/{recurringPaymentId}/pay
    method: POST
    params:
      scope: recurring-payment:create
- name: user
  endpoint:
    path: /users/{userId}
    method: GET
    data_selector: response
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params:
      scope: user:read
      limit: 10
- name: delete_user
  endpoint:
    path: /users/{userId}
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: POST
- name: scim_user
  endpoint:
    path: /scim/users
    method: POST
    data_selector: response
    params:
      scope: scim_user:write
- name: scim_user
  endpoint:
    path: /scim/users/{userId}
    method: GET
- name: user
  endpoint:
    path: /users/{userId}
    method: GET
    data_selector: response
- name: delete_user
  endpoint:
    path: /users/{userId}
    method: DELETE
    params: {}
- name: consents
  endpoint:
    path: /consents/{authRequestId}
    method: GET
- name: scim_user
  endpoint:
    path: /scim/users
    method: POST
- name: scim_user
  endpoint:
    path: /scim/users/{userId}
    method: GET
    data_selector: response
    params:
      scope: scim_user:read
- name: connections
  endpoint:
    path: /reference/get_oidc-well-known-all-connections
    method: GET
- name: auth-requests
  endpoint:
    path: /reference/get_auth-requests
    method: GET
- name: user connections
  endpoint:
    path: /reference/get_users-userid-connections
    method: GET
- name: payees
  endpoint:
    path: /reference/get_payees
    method: GET
- name: payments
  endpoint:
    path: /reference/get_payments
    method: GET
- name: users
  endpoint:
    path: /reference/get_users
    method: GET
- name: scim
  endpoint:
    path: /reference/post_scim-users
    method: POST
- name: auth
  endpoint:
    path: /reference/get_oidc-auth
    method: GET
- name: consents
  endpoint:
    path: /consents/{authRequestId}
    method: GET
- name: auth_token
  endpoint:
    path: /oidc/token
    method: POST
- name: auth
  endpoint:
    path: /oidc/auth
    method: GET
- name: pushed_authorization_request
  endpoint:
    path: /oidc/request
    method: POST
- name: auth_token
  endpoint:
    path: /oidc/token
    method: POST
- name: openid_configuration
  endpoint:
    path: /oidc/.well-known/openid-configuration
    method: GET
- name: pushed_authorization_request
  endpoint:
    path: /oidc/request
    method: POST
- name: reseller-check
  endpoint:
    path: /reseller-check
    method: POST
- name: bank_icons
  endpoint:
    path: /bank-icons/{bankRef}
    method: GET
    data_selector: null
    params: {}
- name: Open ID Connect configuration
  endpoint:
    path: /oidc/.well-known/openid-configuration
    method: GET
- name: reseller_check
  endpoint:
    path: /reseller-check
    method: POST
    params:
      scope: reseller:create
- name: accounts
  endpoint:
    path: /v3/accounts
    method: GET
    data_selector: accounts
- name: bank_icon
  endpoint:
    path: /bank-icons/{bankRef}
    method: GET
    data_selector: response
    params: {}
- name: accounts
  endpoint:
    path: /v3/accounts
    method: POST
    data_selector: null
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: records
    params:
      scope: accounts:read
- name: accounts
  endpoint:
    path: /v3/accounts
    method: POST
- name: account
  endpoint:
    path: /v3/accounts/{accountId}
    method: GET
    data_selector: response
- name: accounts
  endpoint:
    path: /v3/accounts/{accountId}
    method: PATCH
    params: {}
- name: accounts
  endpoint:
    path: /v3/accounts/{accountId}
    method: GET
    data_selector: response
- name: delete_account
  endpoint:
    path: /v3/accounts/{accountId}
    method: DELETE
    data_selector: ''
    params: {}
- name: accounts
  endpoint:
    path: /v3/accounts/{accountId}
    method: PATCH
    params:
      incremental: updated_at
- name: historical_balances
  endpoint:
    path: /v3/accounts/{accountId}/balances
    method: GET
    params:
      scope: accounts:read
- name: delete_account
  endpoint:
    path: /v3/accounts/{accountId}
    method: DELETE
    data_selector: response
- name: add_balance
  endpoint:
    path: /v3/accounts/{accountId}/balances
    method: POST
- name: historical_balances
  endpoint:
    path: /v3/accounts/{accountId}/balances
    method: GET
    params:
      scope: accounts:read
- name: accounts_syncs
  endpoint:
    path: /v3/accounts/syncs
    method: GET
    data_selector: response
- name: add_balance
  endpoint:
    path: /v3/accounts/{accountId}/balances
    method: POST
- name: accounts_syncs
  endpoint:
    path: /v3/accounts/syncs
    method: GET
- name: holdings
  endpoint:
    path: /v3/accounts/{accountId}/holdings
    method: GET
    params:
      scope: accounts:read
- name: holdings
  endpoint:
    path: /v3/accounts/{accountId}/holdings
    method: GET
    params:
      scope: accounts:read
- name: holdings
  endpoint:
    path: /accounts/{accountId}/holdings/{holdingId}
    method: GET
    data_selector: response
- name: holdings
  endpoint:
    path: /accounts/{accountId}/holdings/{holdingId}
    method: GET
    data_selector: records
- name: holdings_with_matches
  endpoint:
    path: /accounts/{accountId}/holdings-with-matches
    method: GET
    data_selector: response
- name: holdings_with_matches
  endpoint:
    path: /v3/accounts/{accountId}/holdings-with-matches
    method: GET
    data_selector: ''
- name: notification_thresholds
  endpoint:
    path: /v3/accounts/{accountId}/notification-thresholds
    method: GET
    data_selector: response
    params:
      scope: accounts:read
- name: notification_thresholds
  endpoint:
    path: /v3/accounts/{accountId}/notification-thresholds
    method: GET
    data_selector: notifications
    params:
      scope: accounts:read
- name: notification_threshold
  endpoint:
    path: /v3/accounts/{accountId}/notification-thresholds
    method: POST
- name: notification_thresholds
  endpoint:
    path: /v3/accounts/{accountId}/notification-thresholds
    method: POST
- name: notification_thresholds
  endpoint:
    path: /v3/accounts/{accountId}/notification-thresholds/{thresholdId}
    method: PATCH
- name: notification_threshold
  endpoint:
    path: /v3/accounts/{accountId}/notification-thresholds/{thresholdId}
    method: PATCH
- name: notification_threshold
  endpoint:
    path: /v3/accounts/{accountId}/notification-thresholds/{thresholdId}
    method: DELETE
- name: notification_threshold
  endpoint:
    path: /v3/accounts/{accountId}/notification-thresholds/{thresholdId}
    method: DELETE
- name: standing_orders
  endpoint:
    path: /v3/accounts/{accountId}/standing-orders
    method: GET
    data_selector: ''
    params: {}
- name: standing_orders
  endpoint:
    path: /v3/accounts/{accountId}/standing-orders
    method: GET
    data_selector: records
    params: {}
- name: statements
  endpoint:
    path: /v3/accounts/{accountId}/statements
    method: GET
    params:
      scopes:
      - accounts:read
      - statements_basic:read
      - statements_detail:read
- name: statements
  endpoint:
    path: /v3/accounts/{accountId}/statements
    method: GET
    params: {}
- name: affordability
  endpoint:
    path: /v3/affordability
    method: GET
    data_selector: metadata
- name: affordability
  endpoint:
    path: /v3/affordability
    method: GET
    data_selector: metadata
- name: affordability
  endpoint:
    path: /v3/affordability
    method: POST
- name: affordability
  endpoint:
    path: /v3/affordability
    method: POST
- name: affordability_confidence
  endpoint:
    path: /v3/affordability/confidence
    method: GET
    data_selector: response
- name: affordability_confidence
  endpoint:
    path: /v3/affordability/confidence
    method: GET
    data_selector: response
- name: affordability
  endpoint:
    path: /v3/affordability/{reportId}
    method: GET
    data_selector: data
    params:
      reportId: uuid
- name: affordability
  endpoint:
    path: /v3/affordability/{reportId}
    method: GET
    data_selector: data
    params:
      reportId: uuid
- name: affordability
  endpoint:
    path: /affordability
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: affordability
  endpoint:
    path: /affordability
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: affordability_income
  endpoint:
    path: /v3/affordability/income
    method: GET
    data_selector: metadata
- name: affordability_income
  endpoint:
    path: /v3/affordability/income
    method: GET
    data_selector: response
- name: affordability_income
  endpoint:
    path: /v3/affordability/income
    method: POST
    params: {}
- name: affordability_income
  endpoint:
    path: /v3/affordability/income
    method: POST
- name: affordability_income
  endpoint:
    path: /v3/affordability/income/{reportId}
    method: GET
    data_selector: response
- name: affordability_income
  endpoint:
    path: /v3/affordability/income/{reportId}
    method: GET
    data_selector: response
- name: beneficiaries
  endpoint:
    path: /v3/beneficiaries
    method: GET
    data_selector: records
    params: {}
- name: beneficiaries
  endpoint:
    path: /v3/beneficiaries
    method: GET
    data_selector: records
    params:
      incremental: beneficiaries:read
- name: beneficiary
  endpoint:
    path: /v3/beneficiaries/{beneficiaryId}
    method: GET
    data_selector: response
- name: beneficiary
  endpoint:
    path: /v3/beneficiaries/{beneficiaryId}
    method: GET
    data_selector: response
- name: global_counterparties
  endpoint:
    path: /v3/global-counterparties
    method: GET
    data_selector: response
- name: global_counterparties
  endpoint:
    path: /v3/global-counterparties
    method: GET
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: records
    params:
      scope: transactions:read:all
- name: transactions
  endpoint:
    path: /v3/transactions
    method: POST
- name: transactions
  endpoint:
    path: /v3/transactions
    method: POST
- name: transactions
  endpoint:
    path: /v3/transactions/{transactionId}
    method: GET
    data_selector: response
- name: transactions
  endpoint:
    path: /v3/transactions/{transactionId}
    method: GET
    data_selector: response
- name: transactions
  endpoint:
    path: /v3/transactions/{transactionId}
    method: PATCH
- name: transactions
  endpoint:
    path: /v3/transactions/{transactionId}
    method: PATCH
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions/{transactionId}
    method: DELETE
    data_selector: null
    params:
      scope: transactions:write:all
- name: transactions
  endpoint:
    path: /v3/transactions-collection
    method: POST
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions/{transactionId}
    method: DELETE
- name: transactions_attachments
  endpoint:
    path: /v3/transactions/{transactionId}/files
    method: GET
- name: transactions
  endpoint:
    path: /v3/transactions-collection
    method: POST
- name: transactions_attachments
  endpoint:
    path: /v3/transactions/{transactionId}/files
    method: GET
    data_selector: files
- name: transactions
  endpoint:
    path: /transactions/{transactionId}/files
    method: POST
- name: transactions_attachment
  endpoint:
    path: /v3/transactions/{transactionId}/files/{fileId}
    method: GET
    params:
      scope: transactions:read:all
- name: transactions
  endpoint:
    path: /v3/transactions/{transactionId}/files
    method: POST
- name: delete_attachment
  endpoint:
    path: /v3/transactions/{transactionId}/files/{fileId}
    method: DELETE
    data_selector: ''
- name: transactions_attachment
  endpoint:
    path: /v3/transactions/{transactionId}/files/{fileId}
    method: GET
    data_selector: response
- name: transactions_splits
  endpoint:
    path: /v3/transactions/{transactionId}/splits
    method: GET
    data_selector: response
    params: {}
- name: delete_attachment
  endpoint:
    path: /v3/transactions/{transactionId}/files/{fileId}
    method: DELETE
    data_selector: null
    params:
      scopes:
      - transactions:read:all
      - transactions:write
      - transactions:write:all
- name: transactions
  endpoint:
    path: /v3/transactions/{transactionId}/splits
    method: POST
- name: transactions_splits
  endpoint:
    path: /v3/transactions/{transactionId}/splits
    method: GET
    data_selector: splits
- name: transactions
  endpoint:
    path: /transactions/{transactionId}/splits
    method: POST
- name: merge_split_transactions
  endpoint:
    path: /v3/transactions/{transactionId}/splits
    method: DELETE
    data_selector: response
- name: merge_split_transactions
  endpoint:
    path: /v3/transactions/{transactionId}/splits
    method: DELETE
- name: transactions
  endpoint:
    path: /v3/transactions/{transactionId}/splits/{splitId}
    method: PATCH
- name: transactions
  endpoint:
    path: /v3/transactions/{transactionId}/splits/{splitId}
    method: PATCH
- name: categories
  endpoint:
    path: /v3/categories
    method: GET
    data_selector: categories
    params:
      scope: categories:read
- name: categories
  endpoint:
    path: /v3/categories
    method: GET
    data_selector: records
    params:
      scope: categories:read
- name: categories
  endpoint:
    path: /v3/categories
    method: POST
- name: categories
  endpoint:
    path: /v3/categories
    method: POST
- name: categories
  endpoint:
    path: /v3/categories/{categoryId}
    method: GET
    data_selector: RESPONSE
- name: category_groups
  endpoint:
    path: /v3/category-groups
    method: GET
    data_selector: response
    params:
      scope: categories:read
- name: categories
  endpoint:
    path: /v3/categories/{categoryId}
    method: GET
    data_selector: response
    params:
      scope: categories:read
- name: categorise_transactions
  endpoint:
    path: /v3/categorise-transactions
    method: POST
- name: category_groups
  endpoint:
    path: /v3/category-groups
    method: GET
    data_selector: response
    params: {}
- name: regular_transactions
  endpoint:
    path: /v3/regular-transactions
    method: GET
    data_selector: response
    params: {}
- name: categorise_transactions
  endpoint:
    path: /v3/categorise-transactions
    method: POST
- name: regular_transactions
  endpoint:
    path: /v3/regular-transactions/{accountId}/detect
    method: POST
- name: regular_transactions
  endpoint:
    path: /v3/regular-transactions
    method: GET
    data_selector: response
- name: rental_record
  endpoint:
    path: /v3/rental-records
    method: GET
    data_selector: rental_record
- name: regular_transactions
  endpoint:
    path: /v3/regular-transactions/{accountId}/detect
    method: POST
- name: rental_records
  endpoint:
    path: /v3/rental-records
    method: POST
    params:
      scope: rental_records:write
- name: rental_record
  endpoint:
    path: /v3/rental-records/{rentalId}
    method: DELETE
    params:
      rental_records: write
- name: rental_records
  endpoint:
    path: /v3/rental-records
    method: GET
    data_selector: records
    params:
      scope: rental_records:read
- name: spending_analysis
  endpoint:
    path: /v3/spending-analysis
    method: POST
    data_selector: total
    params:
      scope: spending_analysis:read
- name: rental_record
  endpoint:
    path: /v3/rental-records
    method: POST
- name: spending_goals
  endpoint:
    path: /v3/spending-goals
    method: GET
    data_selector: response
    params:
      scope: spending_goals:read
- name: rental_records
  endpoint:
    path: /v3/rental-records/{rentalId}
    method: DELETE
    params:
      incremental: rentalId
- name: spending_goals
  endpoint:
    path: /reference/get_spending-goals-1
    method: GET
    data_selector: spending_goals
    params: {}
- name: spending_goal
  endpoint:
    path: /spending-goals
    method: POST
- name: spending_analysis
  endpoint:
    path: /v3/spending-analysis
    method: POST
- name: spending_goal
  endpoint:
    path: /v3/spending-goals/{goalId}
    method: GET
- name: spending_goals
  endpoint:
    path: /v3/spending-goals
    method: GET
- name: spending_goal
  endpoint:
    path: /v3/spending-goals/{goalId}
    method: PATCH
    params:
      scope: spending_goals:read spending_goals:write
- name: spending_goals
  endpoint:
    path: /reference/get_spending-goals-1
    method: GET
    data_selector: results
- name: spending_goals
  endpoint:
    path: /spending-goals
    method: POST
- name: spending_goals
  endpoint:
    path: /v3/spending-goals/{goalId}
    method: DELETE
- name: savings_goals
  endpoint:
    path: /v3/savings-goals
    method: GET
    data_selector: savings_goals
    params: {}
- name: spending_goal
  endpoint:
    path: /v3/spending-goals/{goalId}
    method: GET
    data_selector: response
    params: {}
- name: savings_goals
  endpoint:
    path: /v3/savings-goals
    method: POST
    data_selector: null
    params: {}
- name: spending_goals
  endpoint:
    path: /v3/spending-goals/{goalId}
    method: PATCH
- name: savings_goals
  endpoint:
    path: /v3/savings-goals/{goalId}
    method: GET
    data_selector: response
- name: savings_goals
  endpoint:
    path: /v3/savings-goals/{goalId}
    method: PATCH
    params:
      scope: savings_goals:read, savings_goals:write, savings_goals:write:all
- name: spending_goals
  endpoint:
    path: /v3/spending-goals/{goalId}
    method: DELETE
- name: savings_goals
  endpoint:
    path: /v3/savings-goals/{goalId}
    method: DELETE
    data_selector: null
    params:
      scope: savings_goals:write:all
- name: savings_goals
  endpoint:
    path: /v3/savings-goals
    method: GET
    data_selector: records
    params: {}
- name: standard_financial_statements
  endpoint:
    path: /v3/standard-financial-statements/{reportId}
    method: GET
    data_selector: response
- name: savings_goal
  endpoint:
    path: /v3/savings-goals
    method: POST
- name: savings_goal
  endpoint:
    path: /v3/savings-goals/{goalId}
    method: GET
    data_selector: response
- name: standard_financial_statements
  endpoint:
    path: /v3/standard-financial-statements
    method: GET
    data_selector: records
    params:
      scope: standard_financial_statement:read
- name: savings_goal
  endpoint:
    path: /v3/savings-goals/{goalId}
    method: PATCH
- name: standard_financial_statements
  endpoint:
    path: /standard-financial-statements
    method: POST
- name: savings_goal
  endpoint:
    path: /v3/savings-goals/{goalId}
    method: DELETE
- name: sync
  endpoint:
    path: /v3/sync/{connectionId}
    method: POST
    params: {}
- name: standard_financial_statements
  endpoint:
    path: /v3/standard-financial-statements/{reportId}
    method: GET
- name: projects
  endpoint:
    path: /v3/projects
    method: GET
    data_selector: data
    params:
      limit: 0 to 1000
      offset: 0 to 1000000000
- name: standard_financial_statements
  endpoint:
    path: /v3/standard-financial-statements
    method: GET
    data_selector: records
    params:
      scope: standard_financial_statement:read
- name: standard_financial_statements
  endpoint:
    path: /v3/standard-financial-statements
    method: POST
- name: projects
  endpoint:
    path: /v3/projects
    method: POST
- name: sync
  endpoint:
    path: /v3/sync/{connectionId}
    method: POST
- name: projects
  endpoint:
    path: /v3/projects/{projectId}
    method: GET
- name: projects
  endpoint:
    path: /v3/projects/{projectId}
    method: PATCH
- name: projects
  endpoint:
    path: /v3/projects
    method: GET
    data_selector: data
    params:
      limit: 0 to 1000
      offset: 0 to 1000000000
- name: projects
  endpoint:
    path: /v3/projects/{projectId}
    method: DELETE
- name: projects
  endpoint:
    path: /projects
    method: POST
    data_selector: response
    params: {}
- name: tax
  endpoint:
    path: /tax
    method: GET
    data_selector: transactions
    params:
      scope: tax:read
- name: projects
  endpoint:
    path: /v3/projects/{projectId}
    method: GET
    data_selector: response
- name: projects
  endpoint:
    path: /v3/projects/{projectId}
    method: PATCH
- name: projects
  endpoint:
    path: /v3/projects/{projectId}
    method: DELETE
- name: tax
  endpoint:
    path: /v3/tax
    method: GET
    data_selector: transactions
- name: authorisation_request
  endpoint:
    path: /oidc/request
    method: POST
    data_selector: request_uri
    params: {}
- name: create_user
  endpoint:
    path: /users
    method: POST
    data_selector: user
    params: {}
- name: obtain_token
  endpoint:
    path: /oidc/token
    method: POST
    data_selector: access_token
    params: {}
- name: authorisation_request
  endpoint:
    path: /oidc/request
    method: POST
    data_selector: request_uri
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: data
- name: user
  endpoint:
    path: /users
    method: POST
    data_selector: ''
    params: {}
- name: payment_status
  endpoint:
    path: /payments/{paymentId}
    method: GET
    data_selector: status
- name: API Clients
  endpoint:
    path: /api-clients
    method: GET
- name: API Users
  endpoint:
    path: /api-users
    method: GET
- name: API Businesses, Software & Certificates
  endpoint:
    path: /api-businesses-software-certificates
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: data
- name: payment_status
  endpoint:
    path: /payments/{paymentId}
    method: GET
    data_selector: status
- name: mock_financial_institution
  endpoint:
    path: /mock-financial-institution
    method: GET
- name: mock_user
  endpoint:
    path: /mock-data/new
    method: POST
- name: mock_account
  endpoint:
    path: /mock-data/accounts
    method: POST
- name: mock_transaction
  endpoint:
    path: /mock-data/transactions
    method: POST
- name: Bank Connections
  endpoint:
    path: /docs/bank-connections
    method: GET
- name: mock_bank
  endpoint:
    path: /mock-banks
    method: GET
- name: mock_bank_accounts
  endpoint:
    path: /mock-data
    method: POST
    data_selector: accounts
- name: bank_connections
  endpoint:
    path: /docs/bank-connections
    method: GET
    data_selector: connections
- name: benefits_check
  endpoint:
    path: /benefits_check
    method: POST
    data_selector: claims
- name: counterparties_check
  endpoint:
    path: /counterparties_check
    method: POST
    data_selector: claims
- name: outbound_ip_addresses
  endpoint:
    path: /ip-addresses/outbound
    method: GET
    data_selector: ip_addresses
- name: inbound_ip_addresses
  endpoint:
    path: /ip-addresses/inbound
    method: GET
    data_selector: ip_addresses
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: clientUserId
    params: {}
- name: outbound_ip_addresses
  endpoint:
    path: /ip-addresses/outbound
    method: GET
    data_selector: ip_addresses
    params: {}
- name: inbound_ip_addresses
  endpoint:
    path: /ip-addresses/inbound
    method: GET
    data_selector: ip_addresses
    params: {}
- name: auth_requests
  endpoint:
    path: /auth-requests
    method: GET
    data_selector: records
    params: {}
- name: auth_requests_id
  endpoint:
    path: /auth-requests/:id
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: clientUserId
    params: {}
- name: user_connections
  endpoint:
    path: /users/:id/connections
    method: GET
    data_selector: data
    params: {}
- name: auth_requests
  endpoint:
    path: /auth-requests
    method: GET
    data_selector: auth_requests
- name: auth_request
  endpoint:
    path: /auth-requests/:id
    method: GET
    data_selector: auth_request
- name: create_auth_request
  endpoint:
    path: /auth-requests
    method: POST
    data_selector: auth_request
- name: update_auth_request
  endpoint:
    path: /auth-requests/:id
    method: PATCH
    data_selector: auth_request
- name: categorise_transactions
  endpoint:
    path: /v3/categorise-transactions
    method: POST
    data_selector: transactions
    params: {}
- name: transactions_collection
  endpoint:
    path: /transactions-collection
    method: POST
    data_selector: records
    params:
      categorise: 'true'
- name: transactions_collection
  endpoint:
    path: /transactions-collection
    method: POST
    data_selector: transactions
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: categories
- name: accounts
  endpoint:
    path: /accounts
    method: POST
    data_selector: account
- name: categorise_transactions
  endpoint:
    path: /v3/categorise-transactions
    method: POST
    data_selector: transactions
- name: global_counterparties
  endpoint:
    path: /reference/get_global-counterparties
    method: GET
- name: transactions_collection
  endpoint:
    path: /transactions-collection
    method: POST
    data_selector: records
    params:
      categorise: 'true'
- name: transactions-collection
  endpoint:
    path: /transactions-collection
    method: POST
    data_selector: transactions
    params:
      categorise: 'true'
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: categories
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: POST
    data_selector: account
    params: {}
- name: tax_return
  endpoint:
    path: /tax
    method: GET
    data_selector: taxReturn
    params:
      startDate: '2019-04-06'
      endDate: '2020-04-05'
- name: categories
  endpoint:
    path: /v2.0/standard-categories
    method: GET
    data_selector: categories
- name: category_groups
  endpoint:
    path: /v2.0/standard-category-groups
    method: GET
    data_selector: category_groups
- name: global_counterparties
  endpoint:
    path: /reference/get_global-counterparties
    method: GET
    data_selector: counterparties
    params: {}
- name: transaction_splits
  endpoint:
    path: /transactions/{transactionId}/splits
    method: POST
    data_selector: splits
    params: {}
- name: get_transaction_splits
  endpoint:
    path: /transactions/{transactionId}/splits
    method: GET
    data_selector: splits
    params: {}
- name: update_transaction_split
  endpoint:
    path: /transactions/{transactionId}/splits/{splitId}
    method: PATCH
    data_selector: split
    params: {}
- name: delete_transaction_splits
  endpoint:
    path: /transactions/{transactionId}/splits
    method: DELETE
    data_selector: result
    params: {}
- name: tax_return
  endpoint:
    path: /tax
    method: GET
    params:
      startDate: ''
      endDate: ''
      accountId: ''
      projectId: ''
- name: historical_balances
  endpoint:
    path: /reference#get_accounts-accountid-balances
    method: GET
    data_selector: balances
- name: regular_transaction_series
  endpoint:
    path: /reference/get_regular-transactions
    method: GET
- name: transaction_splits
  endpoint:
    path: /transactions/{transactionId}/splits
    method: POST
    data_selector: splits
- name: transaction_splits_get
  endpoint:
    path: /transactions/{transactionId}/splits
    method: GET
    data_selector: splits
- name: transaction_splits_patch
  endpoint:
    path: /transactions/{transactionId}/splits/{splitId}
    method: PATCH
    data_selector: split
- name: transaction_splits_delete
  endpoint:
    path: /transactions/{transactionId}/splits
    method: DELETE
    data_selector: result
- name: rental_records
  endpoint:
    path: /rental-records
    method: GET
    data_selector: records
- name: create_rental_record
  endpoint:
    path: /rental-records
    method: POST
    data_selector: records
- name: delete_rental_record
  endpoint:
    path: /rental-records/{rentalId}
    method: DELETE
- name: historical_balances
  endpoint:
    path: /get_accounts-accountid-balances
    method: GET
- name: regular_transaction_series
  endpoint:
    path: /reference/get_regular-transactions
    method: GET
- name: account_verification
  endpoint:
    path: /auth-requests
    method: POST
    data_selector: accountVerification
    params: {}
- name: rental_records
  endpoint:
    path: /rental-records
    method: GET
    data_selector: records
- name: create_rental_record
  endpoint:
    path: /rental-records
    method: POST
    data_selector: record
- name: delete_rental_record
  endpoint:
    path: /rental-records/{rentalId}
    method: DELETE
    data_selector: ''
- name: single_immediate_payments
  endpoint:
    path: /payments/single-immediate
    method: POST
- name: payee
  endpoint:
    path: /payees
    method: POST
    data_selector: data
    params: {}
- name: payees
  endpoint:
    path: /payees
    method: GET
    data_selector: data
    params:
      limit: limit
      offset: offset
- name: account_verification
  endpoint:
    path: /auth-requests
    method: POST
    data_selector: accountVerification
    params: {}
- name: SIP Status
  endpoint:
    path: /payments-status
    method: GET
    data_selector: status
    params: {}
- name: bank_chooser
  endpoint:
    path: /payments/bank-chooser
    method: GET
- name: payee
  endpoint:
    path: /payees
    method: POST
    data_selector: data
    params: {}
- name: payees
  endpoint:
    path: /payees
    method: GET
    data_selector: data
    params:
      limit: limit
      offset: offset
- name: payment_refunds
  endpoint:
    path: /payments/reverse
    method: POST
- name: payments_claim
  endpoint:
    path: /payments-claim
    method: POST
    data_selector: value
- name: standing_orders
  endpoint:
    path: /standing-orders
    method: POST
- name: SIP Status
  endpoint:
    path: /payments-status
    method: GET
- name: embedded_component
  endpoint:
    path: /token/
    method: GET
    data_selector: token
    params:
      tenant: moneyhubdemo
- name: payment_refunds
  endpoint:
    path: /reverse-payments
    method: POST
    data_selector: payment
    params: {}
- name: create_user
  endpoint:
    path: /scim/users
    method: POST
    data_selector: id
- name: get_user
  endpoint:
    path: /scim/users/
    method: GET
    data_selector: id
- name: authorisation_request
  endpoint:
    path: /auth-requests
    method: POST
- name: recurring_payments
  endpoint:
    path: /recurring-payments/:recurringPaymentId
    method: GET
    data_selector: recurringPayments
    params: {}
- name: pay
  endpoint:
    path: /recurring-payments/:recurringPaymentId/pay
    method: POST
    data_selector: paymentClaims
    params: {}
- name: standing_orders
  endpoint:
    path: /standing-orders
    method: POST
    data_selector: standingOrder
    params: {}
- name: widget
  endpoint:
    path: /your_widget_url
    method: GET
    data_selector: widget_data
- name: event
  endpoint:
    path: /indexRoute
    method: POST
    data_selector: metadata
    params: {}
- name: users
  endpoint:
    path: /scim/users
    method: POST
    data_selector: id
    params:
      scope: scim_user:write
- name: get_user
  endpoint:
    path: /scim/users/{userId}
    method: GET
    data_selector: id
    params:
      scope: scim_user:read
- name: external_link_event
  endpoint:
    path: /external_link_event
    method: POST
    data_selector: url
    params: {}
- name: close_event
  endpoint:
    path: /close_event
    method: POST
    data_selector: cta
    params: {}
- name: external_link_event
  endpoint:
    path: /externalLink
    method: POST
    data_selector: url
    params: {}
- name: close_event
  endpoint:
    path: /closeEvent
    method: POST
    data_selector: cta
    params: {}
- name: widgets
  endpoint:
    path: /api/widgets
    method: POST
    data_selector: widget
    params: {}
- name: affordability_widget
  endpoint:
    path: /widgets
    method: GET
    data_selector: widgets
    params: {}
- name: event_handling
  endpoint:
    path: /docs/key-event-handling
    method: GET
    data_selector: events
    params: {}
- name: widget
  endpoint:
    path: /widgets.bundle.js
    method: GET
- name: external_link_event
  endpoint:
    path: /externalLink
    method: POST
    data_selector: url
    params: {}
- name: close_event
  endpoint:
    path: /close
    method: POST
    data_selector: cta
    params: {}
- name: external_link_event
  endpoint:
    path: /external/link/event
    method: POST
    data_selector: url
    params: {}
- name: close_event
  endpoint:
    path: /close/event
    method: POST
    data_selector: cta
    params: {}
- name: Pay Link Widget
  endpoint:
    path: /pay-link-widget
    method: GET
- name: pay_links
  endpoint:
    path: /pay-links
    method: POST
    data_selector: ''
    params: {}
- name: single_payment_widget
  endpoint:
    path: /docs/single-payment-widget
    method: GET
- name: affordability_widget
  endpoint:
    path: /docs/affordability-widget
    method: GET
- name: pay_link_widget
  endpoint:
    path: /docs/wip-pay-link-widget
    method: GET
- name: widgets
  endpoint:
    path: /api/widgets
    method: POST
- name: affordability_widget
  endpoint:
    path: /creating-affordability-widgets
    method: GET
- name: affordability_widget
  endpoint:
    path: /self-hosted-affordability-widget
    method: GET
    data_selector: reports
    params: {}
- name: bank_connections
  endpoint:
    path: /oidc/.well-known/all-connections
    method: GET
- name: bank_icons
  endpoint:
    path: /bank-icons/:bankRef
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
- name: PayLinkWidget
  endpoint:
    path: /paylink/widget
    method: POST
- name: pay_links
  endpoint:
    path: /pay-links
    method: POST
    data_selector: null
    params: {}
- name: mortgage
  endpoint:
    path: /accounts/mortgage
    method: GET
    data_selector: records
- name: loan
  endpoint:
    path: /accounts/loan
    method: GET
    data_selector: records
- name: pensions_investments
  endpoint:
    path: /accounts/pensions_investments
    method: GET
    data_selector: records
- name: property
  endpoint:
    path: /accounts/property
    method: GET
    data_selector: records
- name: Lending and Collections reports
  endpoint:
    path: /docs/lending-and-collections-reports
    method: GET
- name: affordability_widget
  endpoint:
    path: /self-hosting-affordability-widget
    method: GET
    data_selector: widgetData
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: cash
  endpoint:
    path: /accounts/cash
    method: GET
    data_selector: records
- name: card
  endpoint:
    path: /accounts/card
    method: GET
    data_selector: records
- name: savings
  endpoint:
    path: /accounts/savings
    method: GET
    data_selector: records
- name: mortgage
  endpoint:
    path: /accounts/mortgage
    method: GET
    data_selector: records
- name: loan
  endpoint:
    path: /accounts/loan
    method: GET
    data_selector: records
- name: pension
  endpoint:
    path: /accounts/pension
    method: GET
    data_selector: records
- name: investment
  endpoint:
    path: /accounts/investment
    method: GET
    data_selector: records
- name: property
  endpoint:
    path: /accounts/property
    method: GET
    data_selector: records
- name: statements
  endpoint:
    path: /accounts/{accountId}/statements
    method: GET
    data_selector: statements
- name: manual_account_details
  endpoint:
    path: /manual-accounts/account-details
    method: GET
    data_selector: account_details
    params: {}
- name: beneficiaries
  endpoint:
    path: /beneficiaries
    method: GET
    data_selector: beneficiaries
    params:
      limit: pagination limit
      offset: pagination offset
- name: beneficiary_detail
  endpoint:
    path: /beneficiaries/{beneficiaryId}
    method: GET
    data_selector: beneficiary
    params: {}
- name: standing_orders
  endpoint:
    path: /accounts/{accountId}/standing-orders
    method: GET
- name: transactions
  endpoint:
    path: /reference/get_oidc-well-known-all-connections#transactions
    method: GET
- name: statements
  endpoint:
    path: /accounts/{accountId}/statements
    method: GET
- name: beneficiaries
  endpoint:
    path: /beneficiaries
    method: GET
- name: beneficiary_detail
  endpoint:
    path: /beneficiaries/{beneficiaryId}
    method: GET
- name: standing_orders
  endpoint:
    path: /accounts/{accountId}/standing-orders
    method: GET
- name: connections
  endpoint:
    path: /users/D/connections
    method: GET
    data_selector: connections
- name: update_connection
  endpoint:
    path: /users/D/connections/{connectionId}
    method: PATCH
    data_selector: updatedConnection
- name: auth_requests
  endpoint:
    path: /auth-requests
    method: POST
    data_selector: authRequest
- name: connections
  endpoint:
    path: /users/:id/connections
    method: GET
    data_selector: data
- name: property_estimate
  endpoint:
    path: /
    method: GET
    data_selector: id
- name: vehicle_valuation
  endpoint:
    path: /oidc/.well-known/autotrader-connections
    method: GET
    data_selector: value
    params: {}
- name: connections
  endpoint:
    path: /users/:id/connections
    method: GET
    data_selector: data
- name: property_estimate
  endpoint:
    path: /zoopla
    method: GET
    data_selector: id
    params: {}
- name: banks
  endpoint:
    path: /which-banks-return-overdraft-information
    method: GET
- name: post_connection_enrichment_complete
  endpoint:
    path: /postConnectionEnrichmentCompleted
    method: GET
    data_selector: payload
- name: newRegularTransactions
  endpoint:
    path: /webhooks/newRegularTransactions
    method: POST
    data_selector: seriesIds
- name: updatedRegularTransactions
  endpoint:
    path: /webhooks/updatedRegularTransactions
    method: POST
    data_selector: seriesIds
- name: deleted_account
  endpoint:
    path: /deleted-account
    method: POST
    data_selector: accountId
- name: newTransactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: accounts
- name: sync_complete
  endpoint:
    path: /sync-complete
    method: GET
    data_selector: payload
- name: restored_transactions
  endpoint:
    path: /restored-transactions
    method: GET
    data_selector: accounts
- name: postConnectionEnrichmentCompleted
  endpoint:
    path: /postConnectionEnrichmentCompleted
    method: GET
    data_selector: payload
    params: {}
- name: accounts
  endpoint:
    path: /updatedTransactions
    method: GET
    data_selector: accounts
- name: deletedTransactions
  endpoint:
    path: /deleted-transactions
    method: GET
    data_selector: accounts
    params: {}
- name: newRegularTransactions
  endpoint:
    path: /webhooks/newRegularTransactions
    method: POST
    data_selector: seriesIds
- name: updatedRegularTransactions
  endpoint:
    path: /webhooks/updatedRegularTransactions
    method: POST
    data_selector: seriesIds
- name: payment_completed
  endpoint:
    path: /payment/completed
    method: POST
    data_selector: paymentCompleted
- name: deleted_account
  endpoint:
    path: /deleted-account
    method: GET
    data_selector: accountId
- name: payment_error
  endpoint:
    path: /payment-error
    method: GET
    data_selector: paymentError
- name: new_transactions
  endpoint:
    path: /newTransactions
    method: POST
    data_selector: accounts
- name: payment_pending
  endpoint:
    path: /payment-pending
    method: GET
    data_selector: paymentPending
- name: affordability_report
  endpoint:
    path: /affordability-report-success
    method: GET
    data_selector: report
    params: {}
- name: restored_transactions
  endpoint:
    path: /restored-transactions
    method: GET
    data_selector: accounts
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: accounts
    params: {}
- name: balanceThreshold
  endpoint:
    path: /accounts/{accountId}/notification-thresholds
    method: POST
    data_selector: payload
    params: {}
- name: deleted_transactions
  endpoint:
    path: /deletedTransactions
    method: GET
    data_selector: accounts
    params: {}
- name: reauthReminder
  endpoint:
    path: /reauthReminder
    method: GET
    data_selector: payload
- name: payment_completed
  endpoint:
    path: /payment-completed
    method: GET
    data_selector: paymentId
- name: payment_error
  endpoint:
    path: /payment-error
    method: GET
    data_selector: paymentError
- name: refresh_reminder
  endpoint:
    path: /refreshReminder
    method: GET
    data_selector: connectionId, bankName, periodSinceLastUpdateInDays
- name: payment_pending
  endpoint:
    path: /paymentPending
    method: POST
    data_selector: paymentPending
- name: affordability_report
  endpoint:
    path: /affordability/report/success
    method: GET
    data_selector: report
    params: {}
- name: balanceThreshold
  endpoint:
    path: /accounts/{accountId}/notification-thresholds
    method: POST
    data_selector: payload
    params: {}
- name: refresh_reminder
  endpoint:
    path: /refreshReminder
    method: GET
    data_selector: connectionId, bankName, periodSinceLastUpdateInDays
notes:
- Requires auth_requests:read scope.
- Requires auth_requests:write scope.
- Requires auth_requests:read and auth_requests:write scopes.
- Requires user:read scope.
- Requires user:update scope and for the API client to use their own consent screens
  i.e. not have Enforce user consent enabled.
- This endpoint can only currently be used to update the expiresAt field which is
  the date which the user has consented to.
- The deletion of a connection will delete all data associated with it and it will
  revoke the consent the user granted. Requires user:delete scope.
- The deletion of a connection will delete all data associated with it and it will
  revoke the consent the user granted.
- Requires user:delete scope.
- Requires payee:read scope.
- Requires pay_link:create scope.
- Requires pay_link:read scope.
- Default limit is set to 10.
- Uploads a payment file for processing. Requires pay_file:write scope.
- Uploads payment file data for processing. Requires pay_file:write scope.
- Executes a payment file by ID. Requires pay_file:write scope.
- Requires pay_file:read scope.
- Requires pay_file:write scope.
- Requires payment:read scope.
- Requires recurring-payment:read scope.
- Requires recurring-payment:create scope.
- The deletion of a user will delete all data associated with it.
- It also revokes consent for all existing connections.
- Requires user:create scope.
- Requires scim_user:read scope.
- Requires user:read and user:delete scope.
- Requires client to be configured with an internal consent screen
- Requires reseller:create scope.
- Please be aware we don’t have icons for all the connections we provide, when this
  is the case the route returns 404 as response unless the defaultIcon parameter is
  used.
- Requires accounts:read scope. Optional scope accounts_details:read is needed for
  some extra fields such as account number and sort code.
- Be aware we don’t have icons for all the connections we provide, when this is the
  case the route returns 404 as response unless the defaultIcon parameter is used.
- Requires accounts:read and accounts:write:all scopes.
- This endpoint can only be used to delete accounts created using the POST /accounts
  endpoint.
- Accounts created when connecting to a financial institution can only be deleted
  by removing the connection they belong to.
- Requires accounts:write:all scope.
- Requires accounts:read and either of accounts:write or accounts:write:all scopes.
- Requires accounts:read scope.
- Requires accounts:read and either of standing_orders:read or standing_orders_detail:read
  scopes.
- Requires accounts:read and either statements_basic:read or statements_detail:read
  scopes.
- Requires affordability:read scope.
- Requires affordability:write and affordability:read scopes.
- Requires affordability_income:read scope.
- Requires affordability_income:write and affordability_income:read scopes.
- Requires beneficiaries:read scope. Optional scope beneficiaries_detail:read is needed
  for some extra fields such as postal address.
- Retrieves list of global counterparties.
- Requires transactions:read:all scope. Transactions usually start around the account
  opening date however in most cases we only retrieve the last 12 months before the
  connection was created.
- Transactions usually start around the account opening date however in most cases
  we only retrieve the last 12 months before the connection was created.
- Requires transactions:read:all and transactions:write:all scopes.
- Requires transactions:read:all scope.
- Requires transactions:read:all and either of transactions:write or transactions:write:all
  scopes.
- A maximum of 50 transactions is imposed.
- Requires transactions:write:all scope.
- Requires transactions:read:all and transactions:write:all scopes. A maximum of 50
  transactions is imposed.
- Requires categories:read scope.
- Requires categories:write scope.
- Requires categorisation scope. A maximum of 200 transactions is imposed.
- Requires regular_transactions:read, accounts:read and transactions:read:all scopes.
- Requires regular_transactions:write, regular_transactions:read, accounts:read and
  transactions:read:all scopes.
- Requires rental_records:read scope. Please note that a user will only have one rental
  recognition record.
- A user will only have one rental recognition record.
- Requires rental_records:write scope. Please note that a user will only have one
  rental recognition record.
- Requires rental_records:write scope.
- Requires spending_goals:read and spending_goals:write:all scopes.
- Defaults to all categories and accounts if none specified.
- The 'total' field in the response calculates the total outgoing expenditure for
  the given periods.
- Requires spending_goals:read scope.
- Create a single spending goal for a user
- Requires spending_goals:write:all scope.
- Requires savings_goals:read scope.
- Requires savings_goals:read and savings_goals:write:all scopes.
- Requires spending_goals:read spending_goals:write scope.
- Requires savings_goals:read and either savings_goals:write or savings_goals:write:all
  scope.
- Requires standard_financial_statement:read scope.
- Requires standard_financial_statement:write and standard_financial_statement:read
  scopes.
- Requires savings_goals:write:all scope.
- Requires accounts:read and either accounts:write or accounts:write:all scopes.
- Requires projects:write scopes.
- This endpoint can only be used to delete projects created using the POST /projects
  endpoint.
- Projects created when connecting to a financial institution can only be deleted
  by removing the connection they belong to.
- Requires projects:delete scope.
- Requires projects:read scope.
- When testing locally you may want to redirect to an unsecure URI such as localhost.
- Requires tax:read scope.
- Ensure client_id and redirect_uri are correctly configured in your client setup.
- Requires setup of client credentials for OAuth2
- This getting started guide wants to set you up for success! While there are other
  authentication methods you can use which may be easier to setup, when you inevitably
  decide to go live, you will NEED to have JWKS setup. This ensures the best security
  when developing against our API.
- Each time you make a new request to the /token endpoint, you will need a fresh JWT
  with unique jti.
- Requires construction of an Authorisation URL before querying financial data.
- Token needs scopes based on the data being queried, such as accounts:read.
- Uses client credentials for token generation
- To check payment status, you need to decode the id_token to obtain paymentId.
- MFA for Cognito users is currently an optional feature, Moneyhub will communicate
  months in advance if we decide to enforce this.
- Many of our endpoints allow extra customisation via query parameters.
- This guide aims to cover the basics, and because of this won't go into detail about
  the large amount of claims you can pass into an auth request.
- You may need to poll the payment status data for resolution.
- Credentials for test users with customised accounts and transactions may be available
  on request.
- MFA is always required when creating a connection.
- None of the fields on the account creation page are required.
- Client Authentication configured to be private_key_jwt
- Response type must be set to code id_token
- This type of test connections require the legacy scope enabled for your API client,
  this scope is not enabled by default and you will need to contact us if you wish
  to test screen scrapping connections.
- You can create a mock user with any username and password
- No fields on the account creation page are required
- If you wish to use Pushed Authorisation Requests, we recommend that you set the
  Request Object Signing algorithm to `none` in the Admin Portal.
- To create a connection to a banking provider, you'll need to create an OpenID Connection
  authorisation URL.
- Your API client does not have access to make connections to the type of banks specified
  in the error.
- Your API client does not have access to banks in the country indicated in the error.
- When making a connection without specifying a user ID (One time access scenario)
  the default time for the expiration date time will be 24 hours in the future.
- Our commitment to maintaining a high-performance solution is illustrated in our
  ongoing optimizations and technical enhancements.
- We understand the importance of both speed and reliability, and we continually strive
  to minimize response times, especially in synchronous operations, to improve the
  overall user experience.
- If you wish to make a connection to a banking provider that doesn't do the initial
  sync for transactions and financial data before returning the result to you, you
  may request to make the connection asynchronously.
- To refresh a connection, you need to specify the connection ID as the value in the
  mh:con_id claim.
- The security that is gained from PAR means the request object signing isn't required.
- For pushed authorisation request URLs, it is recommended that you have the Request
  Object Signing Algorithm set to `none` on your API Client configuration.
- For the mh:benefits_check, you can specify in the value a property called checkTransactionsFromDate.
- The request parameter is used to securely send authorization parameters in a signed
  JWT.
- You can specify whether you want the transactions returned in a connection to be
  categorised as personal or business categories.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Base URL for the token endpoint is https://identity.moneyhub.co.uk/oidc/token
- Using response_type 'code id_token' requires HTTPS redirect URLs
- Default time for expiration date time will be 24 hours in the future when making
  a connection without specifying a user ID.
- Add an mh:sync claims value to the authorisation URL for async connections
- You can test this on our Open Banking mock by using a custom made log in for the
  bank.
- You can specify whether you want the transactions returned in a connection to be
  categorised as `personal` or `business` categories.
- mTLS provides enhanced security by authenticating both clients and servers.
- You will need to provide a unique token identifier and set it to the jti property
  for all JWTs.
- An issued at and expiry time will be required in the JWTs.
- Authorization codes last for 10 minutes, and can only be used once.
- Access tokens issued through the `client_credentials` grant expire after 7200 seconds
  (2 hours).
- mTLS is an extension of the standard TLS protocol that provides enhanced security
  by requiring both the client and server in a communication session to authenticate
  each other's certificates.
- A rate limiter that limits the number of requests received by each API client within
  any given minute. Current values are 1000 requests per minute.
- A rate limit that limits the number of times that a user connection can be synced
  using the POST /sync endpoint. Current value is once every 5 seconds.
- Currently there is no limit when initiating a connection or initiating a payment.
- It is recommended to pass in the `sub` value for AIS connections.
- Access tokens issued through the client_credentials grant expire after 7200 seconds
  (2 hours).
- This route requires an access token from the client credentials grant with the scope
  of `user:create`.
- Enforce User Consent must be switched to 'no' by Moneyhub for your client.
- If you plan on using custom consent screens you will need to also consider your
  flow for 90 day re-consent.
- This route requires an access token from the client credentials grant with the scope
  of user:create.
- For most of our endpoints, we recommend setting a timeout of 60 seconds, even though
  we expect the vast majority to complete within a second (average response times
  being 100-200ms).
- There are also endpoints that we expect to take longer than the usual API request.
  Any endpoint than can trigger a connection sync we'd expect to take longer. This
  is due to the time it takes to fetch transaction data from providers.
- Ensure you have the scope `categorisation` enabled on your API client.
- The maximum number of transactions allowed per request is 200.
- Counterparty payload has changed significantly going from V2 to V3.
- Local counterparties are not supported.
- Transactions that are created as part of connecting to a provider are categorised
  automatically so there is no need to do any extra steps
- Only 50 transactions can be sent in each API request
- The value key in monetary values is in pence.
- Categorisation by its nature is personal - not everyone categorises transactions
  in the same way.
- Confirming the category ID of a transaction is important to improve categorisation
  for the user.
- Counterparties V2 is the default version when retrieving transactions but there
  is no active development for this version. We encourage clients to transition to
  V3.
- The value key is in pence.
- Balances may not be available for every single date when predicting previous balances
  as this is based on the number of transactions that the account has.
- Manual Accounts are not supported.
- Enrichment is asynchronous.
- To retrieve rental records, the rental_records:read scope is required.
- To create or delete, the rental_records:write scope is required.
- Regular transaction API will not work with manual accounts and transactions.
- Open Banking Payments allows an alternative payment option to Card Payments and
  Direct Debit.
- To create or delete the rental_records:write scope is required.
- Requires a valid JWKS or jwks_uri
- 'Scopes needed: payee:create, payee:read, payment, payment:read'
- Unlock deeper financial insights and accelerate decision-making with Moneyhub Affordability
  Engine.
- 'Revolutionise your product application process: Faster, Fairer Decisions.'
- Payment consents are short-lived and cannot be re-authenticated by the Payment Services
  user.
- The `accountVerification` parameter enables simple account verification AIS consent
  request by replacing generic permissions with ReadAccountsDetail permission.
- 'In order to use it you will need to use one of the following scopes when creating
  the authorisation url: `id:api` - if you specify this scope we will display a list
  of the available API based providers; `id:test` - if you specify this scope we will
  display a list of the test providers.'
- You will need an API Client with a valid JWKS or jwks_uri
- request_object_signing_alg equal to none if using push authorisation requests or
  not none if using request objects
- payee:create, payee:read, payment and payment:read scopes enabled
- 'In order to use it you will need to use one of the following scopes when creating
  the authorisation url: `id:api`, `id:test`.'
- Some banks have limits on the length of payee name and the characters used. We recommend
  you keep your payee name (name) within the following limits - 18 characters, supported
  characters - /^[a-zA-Z0-9\s&]+$/.
- Requires payment, payee:read and payee:create scopes enabled
- Requires valid JWKS or jwks_uri
- Requires request_object_signing_alg not equal to none
- Requires reverse_payment scope enabled
- A payment may still fail even if it was successfully submitted, this could be due
  to fraud checks made by the bank.
- This claim must be supplied using the claims parameter semantics from OpenID Connect
  Core. It should be nested under the `id_token` key and not the `userinfo` key.
- Across all of our supported banks there is variance on the supported characters
  allowed within the Beneficiary Payment Reference (payerRef).
- Some banks also have limits on the length of payee name and the characters used.
- Variable Recurring Payments (VRP) do not currently support webhooks for status notifications.
- Creating standing orders requires the `standing_orders:create` scope to be enabled
  on the API client.
- Payments that were initiated but were not fulfilled or cancelled will transition
  to this state after 10 minutes they were created.
- Token is valid for 2 hours, then you will need to create another.
- 'In order to use it you will need to use one of the following scopes when creating
  the authorisation url: `id:api` or `id:test`.'
- Reverse payment scope must be enabled
- Requires a bearer token with scim_user:write scope to create users.
- Requires a bearer token with scim_user:read scope to retrieve users.
- 'You will need an API client that has the following scopes enabled: auth_requests:write,
  auth_requests:read, payment, payment:read, payee:create, payee:read.'
- Accessing a tenant's data works the same way as an API user.
- 'To get data scoped to a user, using the token pass in {token: access_token} as
  the second parameter to any moneyhub data access function.'
- 'Our embedded component will publish events to the following interfaces if they
  are available: window.Android.postMessage, window.webkit.messageHandlers.ios.postMessage,
  window.ReactNativeWebView.postMessage.'
- If an embedded component is loaded without a token being passed in, and guest user
  functionality isn't configured, a missing access token event will be sent back from
  the component.
- Get a demo token from https://demo-token.vercel.app/token/?tenant=moneyhubdemo which
  is valid for 2 hours.
- If an embedded component is loaded without a token being passed in, a missing access
  token event will be sent back from the component.
- MISSING_ACCESS_TOKEN event triggers a fetch for a new token.
- Requires a token with the 'scim_user:write' scope to create users.
- Requires a token with the 'scim_user:read' scope to retrieve users.
- In some cases, such as open banking connection flows, it will be necessary to forward
  url params into the component.
- Requires handling of external link events for open banking flows.
- 'Our embedded component will publish events to the following interfaces if they
  are available: window.Android.postMessage, window.webkit.messageHandlers.ios.postMessage,
  window.ReactNativeWebView.postMessage'
- Events are sent as JSON with the specified format
- Ensure to fetch the user token before booting the widget.
- Widgets are standalone low-code components that provide self-contained open finance
  user journeys.
- Widgets can be created via the Admin Portal.
- Widget Status cannot be changed after creation.
- Handles missing access token by fetching a new token.
- Widgets are automatically accessible on the Moneyhub platform.
- Uses OAuth2 for authentication — requires token fetching
- Requests must be made from a valid web URI for local development.
- Widget requires an externally accessible location within your infrastructure.
- Moneyhub widgets utilise OpenID Connect Dynamic Client Registration to create a
  separate API client for each instance of a widget.
- You will need to use native platform apis to link back to the desired area of your
  app.
- The Single Payment Widget is designed to enhance checkout experiences by supporting
  Open Banking payments directly from UK bank accounts.
- Webhook events will be sent in JWT format.
- Once a payee has been created, it cannot be edited. If you need to change the payee
  details, you will need to create a new payee.
- Webhook URI is optional but recommended for real-time updates.
- Events will be sent in JWT format.
- Ensure your site is listed in the widget’s authorised domains for self-hosting.
- This page is for specific guidance for the Affordability widget.
- To run the widget journey requests must be made from a valid web URI.
- If you choose to run the widget through your infrastructure, note that our code
  snippet will pull the latest version of the widget from Moneyhub servers at the
  start of each journey.
- We recommend to url encode the values of the query params and external user ID (if
  set separately in the URL path) so they can be saved and forwarded correctly.
- JWK is deleted when the browser session ends, making it impossible to use the client
  for subsequent requests.
- Ensure to pass externalUserId in the URL path
- The Single Payment Widget is a seamlessly embeddable component designed to enhance
  checkout experiences by supporting Open Banking payments directly from UK bank accounts.
- Events will be sent in JWT format as the default format.
- Access to the real connections via the API will need to be requested.
- The account_details:read scope needs to be enabled per API client as it is not a
  default scope.
- Ensure you have created an API Client with pay_link:create and pay_link:read scopes
  enabled.
- Requirements for the accounts details object when creating a manual account
- Balance types are specifically designed for use in open banking connections.
- Our Affordability widget works in conjunction with our wider Affordability Service.
- Some objects like Contact may return nulls in deeply nested fields
- Transactions are fetched from the bank every time we automatically sync a connection
  and when our sync endpoint is called.
- Some transactions initially have a status of pending and after a couple of days
  they change to posted.
- We recommend to url encode the values of the query params and external user ID (if
  set separately in the URL path) so they can be saved and forwarded correctly
- Ensure external user ID is part of the URL path when using the affordability widget.
- Confidence Connect is a feature that can be enabled and configured to interrupt
  the submission process when the currently connected accounts do not pass the configured
  rules.
- Every client you create will have access to the test connections by default. Access
  to the real connections via the API will need to be requested.
- Some fields such as IBAN, account number, sort code, PAN and account holder require
  the accounts_details:read scope.
- To access statements information, additional ReadStatementsBasic or ReadStatementsDetail
  Open Banking permissions must be requested.
- Please note that not every bank supports statements at this time.
- Currently we are only offering this fetch beneficiaries capability on Open Banking
  type connections
- Monzo doesn't have the retrieval of beneficiaries on their API specification, so
  can't be synchronised at this time
- The following balance types are specifically designed for use in open banking connections.
- Standing orders can only be accessed within the first 10 minutes of consent.
- Not every bank supports standing orders at this time.
- Transactions are fetched from the bank every time we automatically sync a connection.
- We recommend to consume all of our transactions webhooks to stay updated.
- Moneyhub store the user's account data for as long as the connection is maintained.
- Should the connection expire the data is left in that last updated state until the
  user re-authenticates.
- An API Client with statements_basic:read or statements_detail:read scope enabled
  is required.
- Not every bank supports statements at this time.
- Re-authentication allows users to add a new account to a connection or resolve a
  connection issue without needing assistance.
- Re-consent applies only to API / Open Banking connections and only for connections
  with tppConsent set as true.
- Not every bank supports standing orders.
- Requires the user:update scope enabled for your API client
- In order to use the bank chooser you will need to use one of the specified scopes
  when creating the authorisation url.
- Only by removing the connection will the user's account data be deleted.
- Re-authentication and re-consent options are recommended for user connections.
- This requires the user:update scope enabled for your API client
- Webhook size limit of 6000 transaction IDs.
- Paypal is a connection that returns a user's Paypal account, balances and transactions
  as a personal, cash-type account
- It authorises the connection in the standard user journey.
- Webhook payload is a JSON object with a Content-Type of application/json
- Our APIs have access to highly sensitive information concerning current accounts,
  saving accounts, credit cards, and other financial instruments.
- The key is subject to change over time without notice, so don't keep it as a static
  resource.
- Webhook size limit of 6000 transaction IDs per event
- The client requires the regular_transactions:read scope to receive the regular transaction
  webhooks.
- The payload is a JSON object with a Content-Type of application/json
- Event that notifies when a synchronisation of a connection has completed (either
  in success or error)
- The client requires the `regular_transactions:read` in order to receive the regular
  transaction webhooks
- Event that notifies when a payment is pending
- This event happens only when a transaction was previously marked as deleted but
  it has been restored.
- The nudge:addFirstConnectionNotification tenant feature must be active on the tenant
  for this notification to be generated.
- A user's age is determined by the number of full days that have passed since their
  activation date.
- Event triggers every 2 days until the connection has synced successfully
- Event that notifies when an affordability report has been completed.
- 'Minimum Activation Period: The notification will only be generated for users who
  have been active for one day or longer.'
- This event can be trigger once every 48 hours
errors:
- Requires user:read and user:delete scope.
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404 Not Found: Icon not available for the provided bank reference'
- 401 Unsuccessful Response - Not authorised - Missing authorization header - Invalid
  access Token
- 403 Unsuccessful Response - Forbidden - Invalid scopes
- Requires spending_analysis:read scope.
- '401 Unauthorized: Missing authorization header - Invalid access Token'
- 'INVALID_CLIENT: Check client credentials'
- 'UNAUTHORIZED_CLIENT: Ensure client is allowed to request the token'
- Use the same JWT twice will result in errors.
- '401 Unauthorized: Recheck client credentials or token expiration'
- Use of the same JWT twice will result in errors.
- '401 Unauthorized: Check token validity or scopes.'
- 'invalid_scope: missing permission for connection type'
- 'invalid_scope: missing permission for connection country'
- 'session_not_found: ''sub'' must be provided if cookies have been bypassed'
- 'SYNC ERROR: Causes connection to fail'
- 'INVALID SUBMISSION: Causes payment to throw errors'
- error=invalid_scope&error_description=missing%20permission%20for%20connection%20type%3A%20api
- error=invalid_scope&error_description=missing%20permission%20for%20connection%20country%3A%20IE
- '''sub'' must be provided if cookies have been bypassed'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- invalid_request - The request is missing a required parameter, includes an invalid
  parameter value, includes a parameter more than once, or is otherwise malformed.
- unauthorized_client - The client is not authorized to request an authorization code
  using this method.
- access_denied - The resource owner or authorization server denied the request
- unsupported_response_type - The authorization server does not support obtaining
  an authorization code using this method.
- invalid_scope - The requested scope is invalid, unknown or malformed.
- server_error - There was an unexpected error
- temporarily_unavailable - The authorization server is currently unable to handle
  the request due to a temporary overloading or maintenance of the server.
- invalid_request_uri - The request_uri in the Authorization Request returns an error
  or contains invalid data.
- invalid_request_object - The request parameter contains an invalid Request Object.
- access_denied - Returned on redirect when user cancels the flow whilst in providers
  authorisation screen.
- invalid_client - Client authentication failed (e.g., unknown client, no client authentication
  included, or unsupported authentication method).
- invalid_grant - The provided authorization grant (e.g., authorization code, resource
  owner credentials) or refresh token is invalid, expired, revoked, does not match
  the redirection URI used in the authorization request, or was issued to another
  client.
- unsupported_grant_type - The authorization grant type is not supported by the authorization
  server.
- 'HTTP 429 Too Many Requests: Evaluate the Retry-After header and wait before retrying.'
- 'Unauthorized: Recheck OAuth scopes or token expiration'
- '429 Too Many Requests: If you exceed a rate limit when using any of our HTTP-based
  APIs, we will return a HTTP 429 Too Many Requests error.'
- '400 Bad Request: Check if the user has existing rental records.'
- '403 Forbidden: Ensure user has provided the necessary consent.'
- 'Invalid parameters: Ensure all required fields are populated correctly'
- 'Unauthorized: Check your authorization credentials'
- 'Payment limit exceeded: Review the transaction limits set by your bank'
- 'error:paymentSubmission: An error occurred when exchanging the authorisation code
  with the financial provider/bank.'
- 'error:redirect: The financial provider/bank has redirected with an error code during
  the consent flow.'
- 'error:tokenGrant: An error occurred when initiating or submitting the payment.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Ensure token is valid.'
- 'MISSING_ACCESS_TOKEN: Trigger a token fetch in your app.'
- Failed to fetch token
- Error fetching token
- Error parsing JSON message
- 'Payment Error: Informs the user that an error occurred while processing the payment.'
- 'MISSING_ACCESS_TOKEN: Trigger a token fetch in your app'
- 'bad request: If any IDs aren''t valid UUIDs'
- 'bad request: If any more than 50 transaction IDs are sent per request'
- 'INVALID_USER_ID: Check if externalUserId is formatted correctly'
- 'REPORT_NOT_FOUND: Ensure reportId exists in the system'
- 'bad request: If any IDs aren''t valid UUIDs, or if more than 50 transaction IDs
  are sent per request.'
- '404 Not Found: If a beneficiary with that ID doesn''t exist'
- 'resync: This connection hasn’t been updated recently'
- 'sync_error: There was an error syncing this connection'
- 'sync_partial: There was an error syncing some of the transactions on this account'
- 'mfa_required: This connection requires multi factor authentication'
- 'credentials_error: This connection can no longer be updated'
- 'resync: This connection hasn’t been updated recently, most likely due to the requirement
  for the user to enter multi factor authentication.'
- 'sync_error: There was an error syncing this connection. This may be due to the
  connection expiring.'
- 'sync_partial: There was an error syncing some of the transactions on this account.'
- 'mfa_required: This connection requires multi factor authentication and needs user
  input.'
- 'credentials_error: This connection can no longer be updated, the user may have
  changed their credentials.'
auth_info:
  mentioned_objects:
  - user:read
  - spending_goals:write:all
  - projects:write
  - projects:read
  - client_id
  - client_secret
  - jwks_uri
  - OpenID Connect
  - Authorization Code Flow
  - client_credentials
  - refresh_token
  - auth_requests:write
  - auth_requests:read
  - payment
  - payment:read
  - payee:create
  - payee:read
  - scim_user:write
  - scim_user:read
  - OauthToken
client:
  base_url: https://api.moneyhub.co.uk
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
